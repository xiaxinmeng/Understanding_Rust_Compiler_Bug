{"sha": "c5f16e0e180f4f76187e55aecb5913a1cf7fab2a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1ZjE2ZTBlMTgwZjRmNzYxODdlNTVhZWNiNTkxM2ExY2Y3ZmFiMmE=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-06-14T11:08:58Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-06-20T11:23:46Z"}, "message": "Rename ParamBound(s) to GenericBound(s)", "tree": {"sha": "457abe3be0f8a865223cfd1fca80ec5997119824", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/457abe3be0f8a865223cfd1fca80ec5997119824"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5f16e0e180f4f76187e55aecb5913a1cf7fab2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5f16e0e180f4f76187e55aecb5913a1cf7fab2a", "html_url": "https://github.com/rust-lang/rust/commit/c5f16e0e180f4f76187e55aecb5913a1cf7fab2a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5f16e0e180f4f76187e55aecb5913a1cf7fab2a/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "991efa4284c6ee01c36ab24a14b1c7779b92e17e", "url": "https://api.github.com/repos/rust-lang/rust/commits/991efa4284c6ee01c36ab24a14b1c7779b92e17e", "html_url": "https://github.com/rust-lang/rust/commit/991efa4284c6ee01c36ab24a14b1c7779b92e17e"}], "stats": {"total": 362, "additions": 181, "deletions": 181}, "files": [{"sha": "e49a5e4ee6ae95fc4e1f1730f2784b18eb0e4707", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c5f16e0e180f4f76187e55aecb5913a1cf7fab2a/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5f16e0e180f4f76187e55aecb5913a1cf7fab2a/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=c5f16e0e180f4f76187e55aecb5913a1cf7fab2a", "patch": "@@ -314,7 +314,7 @@ pub trait Visitor<'v> : Sized {\n     fn visit_trait_ref(&mut self, t: &'v TraitRef) {\n         walk_trait_ref(self, t)\n     }\n-    fn visit_param_bound(&mut self, bounds: &'v ParamBound) {\n+    fn visit_param_bound(&mut self, bounds: &'v GenericBound) {\n         walk_param_bound(self, bounds)\n     }\n     fn visit_poly_trait_ref(&mut self, t: &'v PolyTraitRef, m: TraitBoundModifier) {\n@@ -731,12 +731,12 @@ pub fn walk_foreign_item<'v, V: Visitor<'v>>(visitor: &mut V, foreign_item: &'v\n     walk_list!(visitor, visit_attribute, &foreign_item.attrs);\n }\n \n-pub fn walk_param_bound<'v, V: Visitor<'v>>(visitor: &mut V, bound: &'v ParamBound) {\n+pub fn walk_param_bound<'v, V: Visitor<'v>>(visitor: &mut V, bound: &'v GenericBound) {\n     match *bound {\n-        ParamBound::Trait(ref typ, modifier) => {\n+        GenericBound::Trait(ref typ, modifier) => {\n             visitor.visit_poly_trait_ref(typ, modifier);\n         }\n-        ParamBound::Outlives(ref lifetime) => visitor.visit_lifetime(lifetime),\n+        GenericBound::Outlives(ref lifetime) => visitor.visit_lifetime(lifetime),\n     }\n }\n "}, {"sha": "b725432eb5ca3e927a0f9c68279e1bb352de62a6", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c5f16e0e180f4f76187e55aecb5913a1cf7fab2a/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5f16e0e180f4f76187e55aecb5913a1cf7fab2a/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=c5f16e0e180f4f76187e55aecb5913a1cf7fab2a", "patch": "@@ -1285,7 +1285,7 @@ impl<'a> LoweringContext<'a> {\n         &mut self,\n         exist_ty_id: NodeId,\n         parent_index: DefIndex,\n-        bounds: &hir::ParamBounds,\n+        bounds: &hir::GenericBounds,\n     ) -> (HirVec<hir::Lifetime>, HirVec<hir::GenericParam>) {\n         // This visitor walks over impl trait bounds and creates defs for all lifetimes which\n         // appear in the bounds, excluding lifetimes that are created within the bounds.\n@@ -1873,16 +1873,16 @@ impl<'a> LoweringContext<'a> {\n \n     fn lower_param_bound(\n         &mut self,\n-        tpb: &ParamBound,\n+        tpb: &GenericBound,\n         itctx: ImplTraitContext,\n-    ) -> hir::ParamBound {\n+    ) -> hir::GenericBound {\n         match *tpb {\n-            ParamBound::Trait(ref ty, modifier) => hir::ParamBound::Trait(\n+            GenericBound::Trait(ref ty, modifier) => hir::GenericBound::Trait(\n                 self.lower_poly_trait_ref(ty, itctx),\n                 self.lower_trait_bound_modifier(modifier),\n             ),\n-            ParamBound::Outlives(ref lifetime) => {\n-                hir::ParamBound::Outlives(self.lower_lifetime(lifetime))\n+            GenericBound::Outlives(ref lifetime) => {\n+                hir::GenericBound::Outlives(self.lower_lifetime(lifetime))\n             }\n         }\n     }\n@@ -1925,15 +1925,15 @@ impl<'a> LoweringContext<'a> {\n     fn lower_generic_params(\n         &mut self,\n         params: &Vec<GenericParam>,\n-        add_bounds: &NodeMap<Vec<ParamBound>>,\n+        add_bounds: &NodeMap<Vec<GenericBound>>,\n         itctx: ImplTraitContext,\n     ) -> hir::HirVec<hir::GenericParam> {\n         params.iter().map(|param| self.lower_generic_param(param, add_bounds, itctx)).collect()\n     }\n \n     fn lower_generic_param(&mut self,\n                            param: &GenericParam,\n-                           add_bounds: &NodeMap<Vec<ParamBound>>,\n+                           add_bounds: &NodeMap<Vec<GenericBound>>,\n                            itctx: ImplTraitContext)\n                            -> hir::GenericParam {\n         let mut bounds = self.lower_param_bounds(&param.bounds, itctx);\n@@ -2013,7 +2013,7 @@ impl<'a> LoweringContext<'a> {\n         for pred in &generics.where_clause.predicates {\n             if let WherePredicate::BoundPredicate(ref bound_pred) = *pred {\n                 'next_bound: for bound in &bound_pred.bounds {\n-                    if let ParamBound::Trait(_, TraitBoundModifier::Maybe) = *bound {\n+                    if let GenericBound::Trait(_, TraitBoundModifier::Maybe) = *bound {\n                         let report_error = |this: &mut Self| {\n                             this.diagnostic().span_err(\n                                 bound_pred.bounded_ty.span,\n@@ -2098,7 +2098,7 @@ impl<'a> LoweringContext<'a> {\n                                 .filter_map(|bound| match *bound {\n                                     // Ignore `?Trait` bounds.\n                                     // Tthey were copied into type parameters already.\n-                                    ParamBound::Trait(_, TraitBoundModifier::Maybe) => None,\n+                                    GenericBound::Trait(_, TraitBoundModifier::Maybe) => None,\n                                     _ => Some(this.lower_param_bound(\n                                         bound,\n                                         ImplTraitContext::Disallowed,\n@@ -2217,8 +2217,8 @@ impl<'a> LoweringContext<'a> {\n         }\n     }\n \n-    fn lower_param_bounds(&mut self, bounds: &[ParamBound], itctx: ImplTraitContext)\n-        -> hir::ParamBounds {\n+    fn lower_param_bounds(&mut self, bounds: &[GenericBound], itctx: ImplTraitContext)\n+        -> hir::GenericBounds {\n         bounds.iter().map(|bound| self.lower_param_bound(bound, itctx)).collect()\n     }\n "}, {"sha": "f6876113c1176a0ca2f924694499b1b710780449", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c5f16e0e180f4f76187e55aecb5913a1cf7fab2a/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5f16e0e180f4f76187e55aecb5913a1cf7fab2a/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=c5f16e0e180f4f76187e55aecb5913a1cf7fab2a", "patch": "@@ -443,21 +443,21 @@ pub enum TraitBoundModifier {\n /// the \"special\" built-in traits (see middle::lang_items) and\n /// detects Copy, Send and Sync.\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n-pub enum ParamBound {\n+pub enum GenericBound {\n     Trait(PolyTraitRef, TraitBoundModifier),\n     Outlives(Lifetime),\n }\n \n-impl ParamBound {\n+impl GenericBound {\n     pub fn span(&self) -> Span {\n         match self {\n-            &ParamBound::Trait(ref t, ..) => t.span,\n-            &ParamBound::Outlives(ref l) => l.span,\n+            &GenericBound::Trait(ref t, ..) => t.span,\n+            &GenericBound::Outlives(ref l) => l.span,\n         }\n     }\n }\n \n-pub type ParamBounds = HirVec<ParamBound>;\n+pub type GenericBounds = HirVec<GenericBound>;\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum GenericParamKind {\n@@ -479,7 +479,7 @@ pub struct GenericParam {\n     pub id: NodeId,\n     pub name: ParamName,\n     pub attrs: HirVec<Attribute>,\n-    pub bounds: ParamBounds,\n+    pub bounds: GenericBounds,\n     pub span: Span,\n     pub pure_wrt_drop: bool,\n \n@@ -588,15 +588,15 @@ pub struct WhereBoundPredicate {\n     /// The type being bounded\n     pub bounded_ty: P<Ty>,\n     /// Trait and lifetime bounds (`Clone+Send+'static`)\n-    pub bounds: ParamBounds,\n+    pub bounds: GenericBounds,\n }\n \n /// A lifetime predicate, e.g. `'a: 'b+'c`\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct WhereRegionPredicate {\n     pub span: Span,\n     pub lifetime: Lifetime,\n-    pub bounds: ParamBounds,\n+    pub bounds: GenericBounds,\n }\n \n /// An equality predicate (unsupported), e.g. `T=int`\n@@ -1555,7 +1555,7 @@ pub enum TraitItemKind {\n     Method(MethodSig, TraitMethod),\n     /// An associated type with (possibly empty) bounds and optional concrete\n     /// type\n-    Type(ParamBounds, Option<P<Ty>>),\n+    Type(GenericBounds, Option<P<Ty>>),\n }\n \n // The bodies for items are stored \"out of line\", in a separate\n@@ -1640,7 +1640,7 @@ pub struct BareFnTy {\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct ExistTy {\n     pub generics: Generics,\n-    pub bounds: ParamBounds,\n+    pub bounds: GenericBounds,\n     pub impl_trait_fn: Option<DefId>,\n }\n \n@@ -2049,9 +2049,9 @@ pub enum Item_ {\n     /// A union definition, e.g. `union Foo<A, B> {x: A, y: B}`\n     ItemUnion(VariantData, Generics),\n     /// Represents a Trait Declaration\n-    ItemTrait(IsAuto, Unsafety, Generics, ParamBounds, HirVec<TraitItemRef>),\n+    ItemTrait(IsAuto, Unsafety, Generics, GenericBounds, HirVec<TraitItemRef>),\n     /// Represents a Trait Alias Declaration\n-    ItemTraitAlias(Generics, ParamBounds),\n+    ItemTraitAlias(Generics, GenericBounds),\n \n     /// An implementation, eg `impl<A> Trait for Foo { .. }`\n     ItemImpl(Unsafety,"}, {"sha": "229a4da465a27e24333aead08be0ebc4c82b0e10", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c5f16e0e180f4f76187e55aecb5913a1cf7fab2a/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5f16e0e180f4f76187e55aecb5913a1cf7fab2a/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=c5f16e0e180f4f76187e55aecb5913a1cf7fab2a", "patch": "@@ -24,7 +24,7 @@ use syntax::util::parser::{self, AssocOp, Fixity};\n use syntax_pos::{self, BytePos, FileName};\n \n use hir;\n-use hir::{PatKind, ParamBound, TraitBoundModifier, RangeEnd};\n+use hir::{PatKind, GenericBound, TraitBoundModifier, RangeEnd};\n use hir::{GenericParam, GenericParamKind, GenericArg};\n \n use std::cell::Cell;\n@@ -514,7 +514,7 @@ impl<'a> State<'a> {\n \n     fn print_associated_type(&mut self,\n                              name: ast::Name,\n-                             bounds: Option<&hir::ParamBounds>,\n+                             bounds: Option<&hir::GenericBounds>,\n                              ty: Option<&hir::Ty>)\n                              -> io::Result<()> {\n         self.word_space(\"type\")?;\n@@ -740,7 +740,7 @@ impl<'a> State<'a> {\n                 self.print_generic_params(&generics.params)?;\n                 let mut real_bounds = Vec::with_capacity(bounds.len());\n                 for b in bounds.iter() {\n-                    if let ParamBound::Trait(ref ptr, hir::TraitBoundModifier::Maybe) = *b {\n+                    if let GenericBound::Trait(ref ptr, hir::TraitBoundModifier::Maybe) = *b {\n                         self.s.space()?;\n                         self.word_space(\"for ?\")?;\n                         self.print_trait_ref(&ptr.trait_ref)?;\n@@ -766,7 +766,7 @@ impl<'a> State<'a> {\n                 let mut real_bounds = Vec::with_capacity(bounds.len());\n                 // FIXME(durka) this seems to be some quite outdated syntax\n                 for b in bounds.iter() {\n-                    if let ParamBound::Trait(ref ptr, hir::TraitBoundModifier::Maybe) = *b {\n+                    if let GenericBound::Trait(ref ptr, hir::TraitBoundModifier::Maybe) = *b {\n                         self.s.space()?;\n                         self.word_space(\"for ?\")?;\n                         self.print_trait_ref(&ptr.trait_ref)?;\n@@ -2071,7 +2071,7 @@ impl<'a> State<'a> {\n         }\n     }\n \n-    pub fn print_bounds(&mut self, prefix: &str, bounds: &[hir::ParamBound]) -> io::Result<()> {\n+    pub fn print_bounds(&mut self, prefix: &str, bounds: &[hir::GenericBound]) -> io::Result<()> {\n         if !bounds.is_empty() {\n             self.s.word(prefix)?;\n             let mut first = true;\n@@ -2086,13 +2086,13 @@ impl<'a> State<'a> {\n                 }\n \n                 match bound {\n-                    ParamBound::Trait(tref, modifier) => {\n+                    GenericBound::Trait(tref, modifier) => {\n                         if modifier == &TraitBoundModifier::Maybe {\n                             self.s.word(\"?\")?;\n                         }\n                         self.print_poly_trait_ref(tref)?;\n                     }\n-                    ParamBound::Outlives(lt) => {\n+                    GenericBound::Outlives(lt) => {\n                         self.print_lifetime(lt)?;\n                     }\n                 }\n@@ -2121,7 +2121,7 @@ impl<'a> State<'a> {\n                 let mut sep = \":\";\n                 for bound in &param.bounds {\n                     match bound {\n-                        ParamBound::Outlives(lt) => {\n+                        GenericBound::Outlives(lt) => {\n                             self.s.word(sep)?;\n                             self.print_lifetime(lt)?;\n                             sep = \"+\";\n@@ -2181,7 +2181,7 @@ impl<'a> State<'a> {\n \n                     for (i, bound) in bounds.iter().enumerate() {\n                         match bound {\n-                            ParamBound::Outlives(lt) => {\n+                            GenericBound::Outlives(lt) => {\n                                 self.print_lifetime(lt)?;\n                             }\n                             _ => bug!(),"}, {"sha": "882194ae64e79df096a3df67768edc4a432b512c", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5f16e0e180f4f76187e55aecb5913a1cf7fab2a/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5f16e0e180f4f76187e55aecb5913a1cf7fab2a/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=c5f16e0e180f4f76187e55aecb5913a1cf7fab2a", "patch": "@@ -188,7 +188,7 @@ impl_stable_hash_for!(struct hir::GenericArgs {\n     parenthesized\n });\n \n-impl_stable_hash_for!(enum hir::ParamBound {\n+impl_stable_hash_for!(enum hir::GenericBound {\n     Trait(poly_trait_ref, trait_bound_modifier),\n     Outlives(lifetime)\n });"}, {"sha": "091662966ea8f9c4050a9a53de5d1438aaa855bf", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c5f16e0e180f4f76187e55aecb5913a1cf7fab2a/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5f16e0e180f4f76187e55aecb5913a1cf7fab2a/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=c5f16e0e180f4f76187e55aecb5913a1cf7fab2a", "patch": "@@ -1250,9 +1250,9 @@ fn object_lifetime_defaults_for_item(\n     tcx: TyCtxt<'_, '_, '_>,\n     generics: &hir::Generics,\n ) -> Vec<ObjectLifetimeDefault> {\n-    fn add_bounds(set: &mut Set1<hir::LifetimeName>, bounds: &[hir::ParamBound]) {\n+    fn add_bounds(set: &mut Set1<hir::LifetimeName>, bounds: &[hir::GenericBound]) {\n         for bound in bounds {\n-            if let hir::ParamBound::Outlives(ref lifetime) = *bound {\n+            if let hir::GenericBound::Outlives(ref lifetime) = *bound {\n                 set.insert(lifetime.name);\n             }\n         }\n@@ -2280,7 +2280,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n \n             for bound in &lifetime_i.bounds {\n                 match bound {\n-                    hir::ParamBound::Outlives(lt) => match lt.name {\n+                    hir::GenericBound::Outlives(lt) => match lt.name {\n                         hir::LifetimeName::Underscore => {\n                             let mut err = struct_span_err!(\n                                 self.tcx.sess,"}, {"sha": "4f04ad896983d475b8f65d25d1223f86f6f90418", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5f16e0e180f4f76187e55aecb5913a1cf7fab2a/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5f16e0e180f4f76187e55aecb5913a1cf7fab2a/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=c5f16e0e180f4f76187e55aecb5913a1cf7fab2a", "patch": "@@ -99,7 +99,7 @@ impl<'a> AstValidator<'a> {\n         }\n     }\n \n-    fn no_questions_in_bounds(&self, bounds: &ParamBounds, where_: &str, is_trait: bool) {\n+    fn no_questions_in_bounds(&self, bounds: &GenericBounds, where_: &str, is_trait: bool) {\n         for bound in bounds {\n             if let Trait(ref poly, TraitBoundModifier::Maybe) = *bound {\n                 let mut err = self.err_handler().struct_span_err(poly.span,"}, {"sha": "e7b2869dfe61eaaea68c0f03df8350a07f7c9c5e", "filename": "src/librustc_passes/hir_stats.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c5f16e0e180f4f76187e55aecb5913a1cf7fab2a/src%2Flibrustc_passes%2Fhir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5f16e0e180f4f76187e55aecb5913a1cf7fab2a/src%2Flibrustc_passes%2Fhir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fhir_stats.rs?ref=c5f16e0e180f4f76187e55aecb5913a1cf7fab2a", "patch": "@@ -203,8 +203,8 @@ impl<'v> hir_visit::Visitor<'v> for StatCollector<'v> {\n         hir_visit::walk_impl_item(self, ii)\n     }\n \n-    fn visit_param_bound(&mut self, bounds: &'v hir::ParamBound) {\n-        self.record(\"ParamBound\", Id::None, bounds);\n+    fn visit_param_bound(&mut self, bounds: &'v hir::GenericBound) {\n+        self.record(\"GenericBound\", Id::None, bounds);\n         hir_visit::walk_param_bound(self, bounds)\n     }\n \n@@ -322,8 +322,8 @@ impl<'v> ast_visit::Visitor<'v> for StatCollector<'v> {\n         ast_visit::walk_impl_item(self, ii)\n     }\n \n-    fn visit_param_bound(&mut self, bounds: &'v ast::ParamBound) {\n-        self.record(\"ParamBound\", Id::None, bounds);\n+    fn visit_param_bound(&mut self, bounds: &'v ast::GenericBound) {\n+        self.record(\"GenericBound\", Id::None, bounds);\n         ast_visit::walk_param_bound(self, bounds)\n     }\n "}, {"sha": "809f5a06952ad26ac62e4b7d3b1d94564caa0c9b", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5f16e0e180f4f76187e55aecb5913a1cf7fab2a/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5f16e0e180f4f76187e55aecb5913a1cf7fab2a/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=c5f16e0e180f4f76187e55aecb5913a1cf7fab2a", "patch": "@@ -1038,8 +1038,8 @@ impl<'a, 'tcx> ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n     }\n \n     fn check_ty_param_bound(&mut self,\n-                            ty_param_bound: &hir::ParamBound) {\n-        if let hir::ParamBound::Trait(ref trait_ref, _) = *ty_param_bound {\n+                            ty_param_bound: &hir::GenericBound) {\n+        if let hir::GenericBound::Trait(ref trait_ref, _) = *ty_param_bound {\n             if self.path_is_private_type(&trait_ref.trait_ref.path) {\n                 self.old_error_set.insert(trait_ref.trait_ref.ref_id);\n             }"}, {"sha": "0f0f3f6e7892b6c9ec2991b46c315c1fe9556f8e", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5f16e0e180f4f76187e55aecb5913a1cf7fab2a/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5f16e0e180f4f76187e55aecb5913a1cf7fab2a/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=c5f16e0e180f4f76187e55aecb5913a1cf7fab2a", "patch": "@@ -718,7 +718,7 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n         &mut self,\n         item: &'l ast::Item,\n         generics: &'l ast::Generics,\n-        trait_refs: &'l ast::ParamBounds,\n+        trait_refs: &'l ast::GenericBounds,\n         methods: &'l [ast::TraitItem],\n     ) {\n         let name = item.ident.to_string();"}, {"sha": "7f2f0b0c83716ea6767e24237ced1c4d8a8c517e", "filename": "src/librustc_save_analysis/sig.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c5f16e0e180f4f76187e55aecb5913a1cf7fab2a/src%2Flibrustc_save_analysis%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5f16e0e180f4f76187e55aecb5913a1cf7fab2a/src%2Flibrustc_save_analysis%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fsig.rs?ref=c5f16e0e180f4f76187e55aecb5913a1cf7fab2a", "patch": "@@ -104,7 +104,7 @@ pub fn assoc_const_signature(\n pub fn assoc_type_signature(\n     id: NodeId,\n     ident: ast::Ident,\n-    bounds: Option<&ast::ParamBounds>,\n+    bounds: Option<&ast::GenericBounds>,\n     default: Option<&ast::Ty>,\n     scx: &SaveContext,\n ) -> Option<Signature> {\n@@ -629,7 +629,7 @@ impl Sig for ast::Generics {\n                     ast::GenericParamKind::Lifetime { .. } => {\n                         let bounds = param.bounds.iter()\n                             .map(|bound| match bound {\n-                                ast::ParamBound::Outlives(lt) => lt.ident.to_string(),\n+                                ast::GenericBound::Outlives(lt) => lt.ident.to_string(),\n                                 _ => panic!(),\n                             })\n                             .collect::<Vec<_>>()\n@@ -841,7 +841,7 @@ fn name_and_generics(\n fn make_assoc_type_signature(\n     id: NodeId,\n     ident: ast::Ident,\n-    bounds: Option<&ast::ParamBounds>,\n+    bounds: Option<&ast::GenericBounds>,\n     default: Option<&ast::Ty>,\n     scx: &SaveContext,\n ) -> Result {"}, {"sha": "7a4fbc73c2e7dc554571d0b8affeb4cb2106bc51", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c5f16e0e180f4f76187e55aecb5913a1cf7fab2a/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5f16e0e180f4f76187e55aecb5913a1cf7fab2a/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=c5f16e0e180f4f76187e55aecb5913a1cf7fab2a", "patch": "@@ -1249,15 +1249,15 @@ fn impl_polarity<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n // Is it marked with ?Sized\n fn is_unsized<'gcx: 'tcx, 'tcx>(astconv: &AstConv<'gcx, 'tcx>,\n-                                ast_bounds: &[hir::ParamBound],\n+                                ast_bounds: &[hir::GenericBound],\n                                 span: Span) -> bool\n {\n     let tcx = astconv.tcx();\n \n     // Try to find an unbound in bounds.\n     let mut unbound = None;\n     for ab in ast_bounds {\n-        if let &hir::ParamBound::Trait(ref ptr, hir::TraitBoundModifier::Maybe) = ab  {\n+        if let &hir::GenericBound::Trait(ref ptr, hir::TraitBoundModifier::Maybe) = ab  {\n             if unbound.is_none() {\n                 unbound = Some(ptr.trait_ref.clone());\n             } else {\n@@ -1444,7 +1444,7 @@ pub fn explicit_predicates_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         match param.kind {\n             GenericParamKind::Lifetime { .. } => {\n                 param.bounds.iter().for_each(|bound| match bound {\n-                    hir::ParamBound::Outlives(lt) => {\n+                    hir::GenericBound::Outlives(lt) => {\n                         let bound = AstConv::ast_region_to_region(&icx, &lt, None);\n                         let outlives = ty::Binder::bind(ty::OutlivesPredicate(region, bound));\n                         predicates.push(outlives.to_predicate());\n@@ -1482,7 +1482,7 @@ pub fn explicit_predicates_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n                 for bound in bound_pred.bounds.iter() {\n                     match bound {\n-                        &hir::ParamBound::Trait(ref poly_trait_ref, _) => {\n+                        &hir::GenericBound::Trait(ref poly_trait_ref, _) => {\n                             let mut projections = Vec::new();\n \n                             let trait_ref =\n@@ -1498,7 +1498,7 @@ pub fn explicit_predicates_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                             }\n                         }\n \n-                        &hir::ParamBound::Outlives(ref lifetime) => {\n+                        &hir::GenericBound::Outlives(ref lifetime) => {\n                             let region = AstConv::ast_region_to_region(&icx,\n                                                                        lifetime,\n                                                                        None);\n@@ -1513,7 +1513,7 @@ pub fn explicit_predicates_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 let r1 = AstConv::ast_region_to_region(&icx, &region_pred.lifetime, None);\n                 for bound in &region_pred.bounds {\n                     let r2 = match bound {\n-                        hir::ParamBound::Outlives(lt) => {\n+                        hir::GenericBound::Outlives(lt) => {\n                             AstConv::ast_region_to_region(&icx, lt, None)\n                         }\n                         _ => bug!(),\n@@ -1582,7 +1582,7 @@ pub enum SizedByDefault { Yes, No, }\n /// built-in trait (formerly known as kind): Send.\n pub fn compute_bounds<'gcx: 'tcx, 'tcx>(astconv: &AstConv<'gcx, 'tcx>,\n                                         param_ty: Ty<'tcx>,\n-                                        ast_bounds: &[hir::ParamBound],\n+                                        ast_bounds: &[hir::GenericBound],\n                                         sized_by_default: SizedByDefault,\n                                         span: Span)\n                                         -> Bounds<'tcx>\n@@ -1591,9 +1591,9 @@ pub fn compute_bounds<'gcx: 'tcx, 'tcx>(astconv: &AstConv<'gcx, 'tcx>,\n     let mut trait_bounds = vec![];\n     for ast_bound in ast_bounds {\n         match *ast_bound {\n-            hir::ParamBound::Trait(ref b, hir::TraitBoundModifier::None) => trait_bounds.push(b),\n-            hir::ParamBound::Trait(_, hir::TraitBoundModifier::Maybe) => {}\n-            hir::ParamBound::Outlives(ref l) => region_bounds.push(l),\n+            hir::GenericBound::Trait(ref b, hir::TraitBoundModifier::None) => trait_bounds.push(b),\n+            hir::GenericBound::Trait(_, hir::TraitBoundModifier::Maybe) => {}\n+            hir::GenericBound::Outlives(ref l) => region_bounds.push(l),\n         }\n     }\n \n@@ -1623,18 +1623,18 @@ pub fn compute_bounds<'gcx: 'tcx, 'tcx>(astconv: &AstConv<'gcx, 'tcx>,\n     }\n }\n \n-/// Converts a specific ParamBound from the AST into a set of\n+/// Converts a specific GenericBound from the AST into a set of\n /// predicates that apply to the self-type. A vector is returned\n /// because this can be anywhere from 0 predicates (`T:?Sized` adds no\n /// predicates) to 1 (`T:Foo`) to many (`T:Bar<X=i32>` adds `T:Bar`\n /// and `<T as Bar>::X == i32`).\n fn predicates_from_bound<'tcx>(astconv: &AstConv<'tcx, 'tcx>,\n                                param_ty: Ty<'tcx>,\n-                               bound: &hir::ParamBound)\n+                               bound: &hir::GenericBound)\n                                -> Vec<ty::Predicate<'tcx>>\n {\n     match *bound {\n-        hir::ParamBound::Trait(ref tr, hir::TraitBoundModifier::None) => {\n+        hir::GenericBound::Trait(ref tr, hir::TraitBoundModifier::None) => {\n             let mut projections = Vec::new();\n             let pred = astconv.instantiate_poly_trait_ref(tr,\n                                                           param_ty,\n@@ -1644,12 +1644,12 @@ fn predicates_from_bound<'tcx>(astconv: &AstConv<'tcx, 'tcx>,\n                        .chain(Some(pred.to_predicate()))\n                        .collect()\n         }\n-        hir::ParamBound::Outlives(ref lifetime) => {\n+        hir::GenericBound::Outlives(ref lifetime) => {\n             let region = astconv.ast_region_to_region(lifetime, None);\n             let pred = ty::Binder::bind(ty::OutlivesPredicate(param_ty, region));\n             vec![ty::Predicate::TypeOutlives(pred)]\n         }\n-        hir::ParamBound::Trait(_, hir::TraitBoundModifier::Maybe) => vec![],\n+        hir::GenericBound::Trait(_, hir::TraitBoundModifier::Maybe) => vec![],\n     }\n }\n "}, {"sha": "5c09da90491d064f6001723f0080d4e1171640e4", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c5f16e0e180f4f76187e55aecb5913a1cf7fab2a/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5f16e0e180f4f76187e55aecb5913a1cf7fab2a/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=c5f16e0e180f4f76187e55aecb5913a1cf7fab2a", "patch": "@@ -486,8 +486,8 @@ impl<'a, 'tcx, 'rcx> AutoTraitFinder<'a, 'tcx, 'rcx> {\n             .iter()\n             .flat_map(|(name, lifetime)| {\n                 let empty = Vec::new();\n-                let bounds: FxHashSet<ParamBound> = finished.get(name).unwrap_or(&empty).iter()\n-                    .map(|region| ParamBound::Outlives(self.get_lifetime(region, names_map)))\n+                let bounds: FxHashSet<GenericBound> = finished.get(name).unwrap_or(&empty).iter()\n+                    .map(|region| GenericBound::Outlives(self.get_lifetime(region, names_map)))\n                     .collect();\n \n                 if bounds.is_empty() {\n@@ -533,9 +533,9 @@ impl<'a, 'tcx, 'rcx> AutoTraitFinder<'a, 'tcx, 'rcx> {\n \n     fn make_final_bounds<'b, 'c, 'cx>(\n         &self,\n-        ty_to_bounds: FxHashMap<Type, FxHashSet<ParamBound>>,\n+        ty_to_bounds: FxHashMap<Type, FxHashSet<GenericBound>>,\n         ty_to_fn: FxHashMap<Type, (Option<PolyTrait>, Option<Type>)>,\n-        lifetime_to_bounds: FxHashMap<Lifetime, FxHashSet<ParamBound>>,\n+        lifetime_to_bounds: FxHashMap<Lifetime, FxHashSet<GenericBound>>,\n     ) -> Vec<WherePredicate> {\n         ty_to_bounds\n             .into_iter()\n@@ -586,7 +586,7 @@ impl<'a, 'tcx, 'rcx> AutoTraitFinder<'a, 'tcx, 'rcx> {\n                         }\n                         _ => panic!(\"Unexpected data: {:?}, {:?}\", ty, data),\n                     };\n-                    bounds.insert(ParamBound::TraitBound(\n+                    bounds.insert(GenericBound::TraitBound(\n                         PolyTrait {\n                             trait_: new_ty,\n                             generic_params: poly_trait.generic_params,\n@@ -729,7 +729,7 @@ impl<'a, 'tcx, 'rcx> AutoTraitFinder<'a, 'tcx, 'rcx> {\n                         // later\n \n                         let is_fn = match &mut b {\n-                            &mut ParamBound::TraitBound(ref mut p, _) => {\n+                            &mut GenericBound::TraitBound(ref mut p, _) => {\n                                 // Insert regions into the for_generics hash map first, to ensure\n                                 // that we don't end up with duplicate bounds (e.g. for<'b, 'b>)\n                                 for_generics.extend(p.generic_params.clone());\n@@ -823,7 +823,7 @@ impl<'a, 'tcx, 'rcx> AutoTraitFinder<'a, 'tcx, 'rcx> {\n                                         .entry(*ty.clone())\n                                         .or_insert_with(|| FxHashSet());\n \n-                                    bounds.insert(ParamBound::TraitBound(\n+                                    bounds.insert(GenericBound::TraitBound(\n                                         PolyTrait {\n                                             trait_: Type::ResolvedPath {\n                                                 path: new_trait_path,\n@@ -840,7 +840,7 @@ impl<'a, 'tcx, 'rcx> AutoTraitFinder<'a, 'tcx, 'rcx> {\n                                     // that we don't see a\n                                     // duplicate bound like `T: Iterator + Iterator<Item=u8>`\n                                     // on the docs page.\n-                                    bounds.remove(&ParamBound::TraitBound(\n+                                    bounds.remove(&GenericBound::TraitBound(\n                                         PolyTrait {\n                                             trait_: *trait_.clone(),\n                                             generic_params: Vec::new(),\n@@ -874,7 +874,7 @@ impl<'a, 'tcx, 'rcx> AutoTraitFinder<'a, 'tcx, 'rcx> {\n                     default.take();\n                     let generic_ty = Type::Generic(param.name.clone());\n                     if !has_sized.contains(&generic_ty) {\n-                        bounds.insert(0, ParamBound::maybe_sized(self.cx));\n+                        bounds.insert(0, GenericBound::maybe_sized(self.cx));\n                     }\n                 }\n                 GenericParamDefKind::Lifetime => {}\n@@ -908,7 +908,7 @@ impl<'a, 'tcx, 'rcx> AutoTraitFinder<'a, 'tcx, 'rcx> {\n     // both for visual consistency between 'rustdoc' runs, and to\n     // make writing tests much easier\n     #[inline]\n-    fn sort_where_bounds(&self, mut bounds: &mut Vec<ParamBound>) {\n+    fn sort_where_bounds(&self, mut bounds: &mut Vec<GenericBound>) {\n         // We should never have identical bounds - and if we do,\n         // they're visually identical as well. Therefore, using\n         // an unstable sort is fine.\n@@ -928,7 +928,7 @@ impl<'a, 'tcx, 'rcx> AutoTraitFinder<'a, 'tcx, 'rcx> {\n     // to end users, it makes writing tests much more difficult, as predicates\n     // can appear in any order in the final result.\n     //\n-    // To solve this problem, we sort WherePredicates and ParamBounds\n+    // To solve this problem, we sort WherePredicates and GenericBounds\n     // by their Debug string. The thing to keep in mind is that we don't really\n     // care what the final order is - we're synthesizing an impl or bound\n     // ourselves, so any order can be considered equally valid. By sorting the\n@@ -938,7 +938,7 @@ impl<'a, 'tcx, 'rcx> AutoTraitFinder<'a, 'tcx, 'rcx> {\n     // Using the Debug impementation for sorting prevents us from needing to\n     // write quite a bit of almost entirely useless code (e.g. how should two\n     // Types be sorted relative to each other). It also allows us to solve the\n-    // problem for both WherePredicates and ParamBounds at the same time. This\n+    // problem for both WherePredicates and GenericBounds at the same time. This\n     // approach is probably somewhat slower, but the small number of items\n     // involved (impls rarely have more than a few bounds) means that it\n     // shouldn't matter in practice."}, {"sha": "f3a833bad8f781cd53f3a2faf1de8d090dd992c3", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5f16e0e180f4f76187e55aecb5913a1cf7fab2a/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5f16e0e180f4f76187e55aecb5913a1cf7fab2a/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=c5f16e0e180f4f76187e55aecb5913a1cf7fab2a", "patch": "@@ -474,7 +474,7 @@ fn filter_non_trait_generics(trait_did: DefId, mut g: clean::Generics) -> clean:\n             } if *s == \"Self\" => {\n                 bounds.retain(|bound| {\n                     match *bound {\n-                        clean::ParamBound::TraitBound(clean::PolyTrait {\n+                        clean::GenericBound::TraitBound(clean::PolyTrait {\n                             trait_: clean::ResolvedPath { did, .. },\n                             ..\n                         }, _) => did != trait_did,\n@@ -505,7 +505,7 @@ fn filter_non_trait_generics(trait_did: DefId, mut g: clean::Generics) -> clean:\n /// the metadata for a crate, so we want to separate those out and create a new\n /// list of explicit supertrait bounds to render nicely.\n fn separate_supertrait_bounds(mut g: clean::Generics)\n-                              -> (clean::Generics, Vec<clean::ParamBound>) {\n+                              -> (clean::Generics, Vec<clean::GenericBound>) {\n     let mut ty_bounds = Vec::new();\n     g.where_predicates.retain(|pred| {\n         match *pred {"}, {"sha": "031a948fe80d1ba52771bf35a7991b4e8299e167", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 41, "deletions": 41, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/c5f16e0e180f4f76187e55aecb5913a1cf7fab2a/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5f16e0e180f4f76187e55aecb5913a1cf7fab2a/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=c5f16e0e180f4f76187e55aecb5913a1cf7fab2a", "patch": "@@ -14,7 +14,7 @@\n pub use self::Type::*;\n pub use self::Mutability::*;\n pub use self::ItemEnum::*;\n-pub use self::ParamBound::*;\n+pub use self::GenericBound::*;\n pub use self::SelfTy::*;\n pub use self::FunctionRetTy::*;\n pub use self::Visibility::{Public, Inherited};\n@@ -532,7 +532,7 @@ pub enum ItemEnum {\n     MacroItem(Macro),\n     PrimitiveItem(PrimitiveType),\n     AssociatedConstItem(Type, Option<String>),\n-    AssociatedTypeItem(Vec<ParamBound>, Option<Type>),\n+    AssociatedTypeItem(Vec<GenericBound>, Option<Type>),\n     /// An item that has been stripped by a rustdoc pass\n     StrippedItem(Box<ItemEnum>),\n     KeywordItem(String),\n@@ -1458,13 +1458,13 @@ impl Clean<Attributes> for [ast::Attribute] {\n }\n \n #[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Eq, Debug, Hash)]\n-pub enum ParamBound {\n+pub enum GenericBound {\n     TraitBound(PolyTrait, hir::TraitBoundModifier),\n     Outlives(Lifetime),\n }\n \n-impl ParamBound {\n-    fn maybe_sized(cx: &DocContext) -> ParamBound {\n+impl GenericBound {\n+    fn maybe_sized(cx: &DocContext) -> GenericBound {\n         let did = cx.tcx.require_lang_item(lang_items::SizedTraitLangItem);\n         let empty = cx.tcx.intern_substs(&[]);\n         let path = external_path(cx, &cx.tcx.item_name(did).as_str(),\n@@ -1483,7 +1483,7 @@ impl ParamBound {\n \n     fn is_sized_bound(&self, cx: &DocContext) -> bool {\n         use rustc::hir::TraitBoundModifier as TBM;\n-        if let ParamBound::TraitBound(PolyTrait { ref trait_, .. }, TBM::None) = *self {\n+        if let GenericBound::TraitBound(PolyTrait { ref trait_, .. }, TBM::None) = *self {\n             if trait_.def_id() == cx.tcx.lang_items().sized_trait() {\n                 return true;\n             }\n@@ -1492,26 +1492,26 @@ impl ParamBound {\n     }\n \n     fn get_poly_trait(&self) -> Option<PolyTrait> {\n-        if let ParamBound::TraitBound(ref p, _) = *self {\n+        if let GenericBound::TraitBound(ref p, _) = *self {\n             return Some(p.clone())\n         }\n         None\n     }\n \n     fn get_trait_type(&self) -> Option<Type> {\n \n-        if let ParamBound::TraitBound(PolyTrait { ref trait_, .. }, _) = *self {\n+        if let GenericBound::TraitBound(PolyTrait { ref trait_, .. }, _) = *self {\n             return Some(trait_.clone());\n         }\n         None\n     }\n }\n \n-impl Clean<ParamBound> for hir::ParamBound {\n-    fn clean(&self, cx: &DocContext) -> ParamBound {\n+impl Clean<GenericBound> for hir::GenericBound {\n+    fn clean(&self, cx: &DocContext) -> GenericBound {\n         match *self {\n-            hir::ParamBound::Outlives(lt) => Outlives(lt.clean(cx)),\n-            hir::ParamBound::Trait(ref t, modifier) => TraitBound(t.clean(cx), modifier),\n+            hir::GenericBound::Outlives(lt) => Outlives(lt.clean(cx)),\n+            hir::GenericBound::Trait(ref t, modifier) => TraitBound(t.clean(cx), modifier),\n         }\n     }\n }\n@@ -1570,8 +1570,8 @@ fn external_path(cx: &DocContext, name: &str, trait_did: Option<DefId>, has_self\n     }\n }\n \n-impl<'a, 'tcx> Clean<ParamBound> for (&'a ty::TraitRef<'tcx>, Vec<TypeBinding>) {\n-    fn clean(&self, cx: &DocContext) -> ParamBound {\n+impl<'a, 'tcx> Clean<GenericBound> for (&'a ty::TraitRef<'tcx>, Vec<TypeBinding>) {\n+    fn clean(&self, cx: &DocContext) -> GenericBound {\n         let (trait_ref, ref bounds) = *self;\n         inline::record_extern_fqn(cx, trait_ref.def_id, TypeKind::Trait);\n         let path = external_path(cx, &cx.tcx.item_name(trait_ref.def_id).as_str(),\n@@ -1614,17 +1614,17 @@ impl<'a, 'tcx> Clean<ParamBound> for (&'a ty::TraitRef<'tcx>, Vec<TypeBinding>)\n     }\n }\n \n-impl<'tcx> Clean<ParamBound> for ty::TraitRef<'tcx> {\n-    fn clean(&self, cx: &DocContext) -> ParamBound {\n+impl<'tcx> Clean<GenericBound> for ty::TraitRef<'tcx> {\n+    fn clean(&self, cx: &DocContext) -> GenericBound {\n         (self, vec![]).clean(cx)\n     }\n }\n \n-impl<'tcx> Clean<Option<Vec<ParamBound>>> for Substs<'tcx> {\n-    fn clean(&self, cx: &DocContext) -> Option<Vec<ParamBound>> {\n+impl<'tcx> Clean<Option<Vec<GenericBound>>> for Substs<'tcx> {\n+    fn clean(&self, cx: &DocContext) -> Option<Vec<GenericBound>> {\n         let mut v = Vec::new();\n         v.extend(self.regions().filter_map(|r| r.clean(cx))\n-                     .map(ParamBound::Outlives));\n+                     .map(GenericBound::Outlives));\n         v.extend(self.types().map(|t| TraitBound(PolyTrait {\n             trait_: t.clean(cx),\n             generic_params: Vec::new(),\n@@ -1674,7 +1674,7 @@ impl Clean<Lifetime> for hir::GenericParam {\n             hir::GenericParamKind::Lifetime { .. } => {\n                 if self.bounds.len() > 0 {\n                     let mut bounds = self.bounds.iter().map(|bound| match bound {\n-                        hir::ParamBound::Outlives(lt) => lt,\n+                        hir::GenericBound::Outlives(lt) => lt,\n                         _ => panic!(),\n                     });\n                     let name = bounds.next().unwrap().name.name();\n@@ -1720,8 +1720,8 @@ impl Clean<Option<Lifetime>> for ty::RegionKind {\n \n #[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Eq, Debug, Hash)]\n pub enum WherePredicate {\n-    BoundPredicate { ty: Type, bounds: Vec<ParamBound> },\n-    RegionPredicate { lifetime: Lifetime, bounds: Vec<ParamBound> },\n+    BoundPredicate { ty: Type, bounds: Vec<GenericBound> },\n+    RegionPredicate { lifetime: Lifetime, bounds: Vec<GenericBound> },\n     EqPredicate { lhs: Type, rhs: Type },\n }\n \n@@ -1791,7 +1791,7 @@ impl<'tcx> Clean<WherePredicate> for ty::OutlivesPredicate<ty::Region<'tcx>, ty:\n         let ty::OutlivesPredicate(ref a, ref b) = *self;\n         WherePredicate::RegionPredicate {\n             lifetime: a.clean(cx).unwrap(),\n-            bounds: vec![ParamBound::Outlives(b.clean(cx).unwrap())]\n+            bounds: vec![GenericBound::Outlives(b.clean(cx).unwrap())]\n         }\n     }\n }\n@@ -1802,7 +1802,7 @@ impl<'tcx> Clean<WherePredicate> for ty::OutlivesPredicate<Ty<'tcx>, ty::Region<\n \n         WherePredicate::BoundPredicate {\n             ty: ty.clean(cx),\n-            bounds: vec![ParamBound::Outlives(lt.clean(cx).unwrap())]\n+            bounds: vec![GenericBound::Outlives(lt.clean(cx).unwrap())]\n         }\n     }\n }\n@@ -1819,8 +1819,8 @@ impl<'tcx> Clean<WherePredicate> for ty::ProjectionPredicate<'tcx> {\n impl<'tcx> Clean<Type> for ty::ProjectionTy<'tcx> {\n     fn clean(&self, cx: &DocContext) -> Type {\n         let trait_ = match self.trait_ref(cx.tcx).clean(cx) {\n-            ParamBound::TraitBound(t, _) => t.trait_,\n-            ParamBound::Outlives(_) => panic!(\"cleaning a trait got a lifetime\"),\n+            GenericBound::TraitBound(t, _) => t.trait_,\n+            GenericBound::Outlives(_) => panic!(\"cleaning a trait got a lifetime\"),\n         };\n         Type::QPath {\n             name: cx.tcx.associated_item(self.item_def_id).name.clean(cx),\n@@ -1835,7 +1835,7 @@ pub enum GenericParamDefKind {\n     Lifetime,\n     Type {\n         did: DefId,\n-        bounds: Vec<ParamBound>,\n+        bounds: Vec<GenericBound>,\n         default: Option<Type>,\n         synthetic: Option<hir::SyntheticTyParamKind>,\n     },\n@@ -1893,7 +1893,7 @@ impl Clean<GenericParamDef> for hir::GenericParam {\n             hir::GenericParamKind::Lifetime { .. } => {\n                 let name = if self.bounds.len() > 0 {\n                     let mut bounds = self.bounds.iter().map(|bound| match bound {\n-                        hir::ParamBound::Outlives(lt) => lt,\n+                        hir::GenericBound::Outlives(lt) => lt,\n                         _ => panic!(),\n                     });\n                     let name = bounds.next().unwrap().name.name();\n@@ -2049,7 +2049,7 @@ impl<'a, 'tcx> Clean<Generics> for (&'a ty::Generics,\n             if !sized_params.contains(&tp.name) {\n                 where_predicates.push(WP::BoundPredicate {\n                     ty: Type::Generic(tp.name.clone()),\n-                    bounds: vec![ParamBound::maybe_sized(cx)],\n+                    bounds: vec![GenericBound::maybe_sized(cx)],\n                 })\n             }\n         }\n@@ -2290,7 +2290,7 @@ pub struct Trait {\n     pub unsafety: hir::Unsafety,\n     pub items: Vec<Item>,\n     pub generics: Generics,\n-    pub bounds: Vec<ParamBound>,\n+    pub bounds: Vec<GenericBound>,\n     pub is_spotlight: bool,\n     pub is_auto: bool,\n }\n@@ -2512,7 +2512,7 @@ impl<'tcx> Clean<Item> for ty::AssociatedItem {\n                     // at the end.\n                     match bounds.iter().position(|b| b.is_sized_bound(cx)) {\n                         Some(i) => { bounds.remove(i); }\n-                        None => bounds.push(ParamBound::maybe_sized(cx)),\n+                        None => bounds.push(GenericBound::maybe_sized(cx)),\n                     }\n \n                     let ty = if self.defaultness.has_value() {\n@@ -2567,7 +2567,7 @@ pub enum Type {\n     /// structs/enums/traits (most that'd be an hir::TyPath)\n     ResolvedPath {\n         path: Path,\n-        typarams: Option<Vec<ParamBound>>,\n+        typarams: Option<Vec<GenericBound>>,\n         did: DefId,\n         /// true if is a `T::Name` path for associated types\n         is_generic: bool,\n@@ -2603,7 +2603,7 @@ pub enum Type {\n     Infer,\n \n     // impl TraitA+TraitB\n-    ImplTrait(Vec<ParamBound>),\n+    ImplTrait(Vec<GenericBound>),\n }\n \n #[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Eq, Hash, Copy, Debug)]\n@@ -2977,7 +2977,7 @@ impl Clean<Type> for hir::Ty {\n             TyTraitObject(ref bounds, ref lifetime) => {\n                 match bounds[0].clean(cx).trait_ {\n                     ResolvedPath { path, typarams: None, did, is_generic } => {\n-                        let mut bounds: Vec<self::ParamBound> = bounds[1..].iter().map(|bound| {\n+                        let mut bounds: Vec<self::GenericBound> = bounds[1..].iter().map(|bound| {\n                             TraitBound(bound.clean(cx), hir::TraitBoundModifier::None)\n                         }).collect();\n                         if !lifetime.is_elided() {\n@@ -3080,7 +3080,7 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n                     inline::record_extern_fqn(cx, did, TypeKind::Trait);\n \n                     let mut typarams = vec![];\n-                    reg.clean(cx).map(|b| typarams.push(ParamBound::Outlives(b)));\n+                    reg.clean(cx).map(|b| typarams.push(GenericBound::Outlives(b)));\n                     for did in obj.auto_traits() {\n                         let empty = cx.tcx.intern_substs(&[]);\n                         let path = external_path(cx, &cx.tcx.item_name(did).as_str(),\n@@ -3138,7 +3138,7 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n                     } else if let ty::Predicate::TypeOutlives(pred) = *predicate {\n                         // these should turn up at the end\n                         pred.skip_binder().1.clean(cx).map(|r| {\n-                            regions.push(ParamBound::Outlives(r))\n+                            regions.push(GenericBound::Outlives(r))\n                         });\n                         return None;\n                     } else {\n@@ -3173,7 +3173,7 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n                 }).collect::<Vec<_>>();\n                 bounds.extend(regions);\n                 if !has_sized && !bounds.is_empty() {\n-                    bounds.insert(0, ParamBound::maybe_sized(cx));\n+                    bounds.insert(0, GenericBound::maybe_sized(cx));\n                 }\n                 ImplTrait(bounds)\n             }\n@@ -4469,11 +4469,11 @@ impl AutoTraitResult {\n     }\n }\n \n-impl From<ParamBound> for SimpleBound {\n-    fn from(bound: ParamBound) -> Self {\n+impl From<GenericBound> for SimpleBound {\n+    fn from(bound: GenericBound) -> Self {\n         match bound.clone() {\n-            ParamBound::Outlives(l) => SimpleBound::Outlives(l),\n-            ParamBound::TraitBound(t, mod_) => match t.trait_ {\n+            GenericBound::Outlives(l) => SimpleBound::Outlives(l),\n+            GenericBound::TraitBound(t, mod_) => match t.trait_ {\n                 Type::ResolvedPath { path, typarams, .. } => {\n                     SimpleBound::TraitBound(path.segments,\n                                             typarams"}, {"sha": "a54eb64443bef0dbea29d6edbaf3a1e32fea8f7c", "filename": "src/librustdoc/clean/simplify.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5f16e0e180f4f76187e55aecb5913a1cf7fab2a/src%2Flibrustdoc%2Fclean%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5f16e0e180f4f76187e55aecb5913a1cf7fab2a/src%2Flibrustdoc%2Fclean%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fsimplify.rs?ref=c5f16e0e180f4f76187e55aecb5913a1cf7fab2a", "patch": "@@ -147,7 +147,7 @@ pub fn ty_params(mut params: Vec<clean::GenericParamDef>) -> Vec<clean::GenericP\n     params\n }\n \n-fn ty_bounds(bounds: Vec<clean::ParamBound>) -> Vec<clean::ParamBound> {\n+fn ty_bounds(bounds: Vec<clean::GenericBound>) -> Vec<clean::GenericBound> {\n     bounds\n }\n "}, {"sha": "53ebb3a12f527e637bfe3b84938f2e6c816d9d79", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5f16e0e180f4f76187e55aecb5913a1cf7fab2a/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5f16e0e180f4f76187e55aecb5913a1cf7fab2a/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=c5f16e0e180f4f76187e55aecb5913a1cf7fab2a", "patch": "@@ -77,7 +77,7 @@ pub struct DocContext<'a, 'tcx: 'a, 'rcx: 'a> {\n     /// Table node id of lifetime parameter definition -> substituted lifetime\n     pub lt_substs: RefCell<FxHashMap<DefId, clean::Lifetime>>,\n     /// Table DefId of `impl Trait` in argument position -> bounds\n-    pub impl_trait_bounds: RefCell<FxHashMap<DefId, Vec<clean::ParamBound>>>,\n+    pub impl_trait_bounds: RefCell<FxHashMap<DefId, Vec<clean::GenericBound>>>,\n     pub send_trait: Option<DefId>,\n     pub fake_def_ids: RefCell<FxHashMap<CrateNum, DefId>>,\n     pub all_fake_def_ids: RefCell<FxHashSet<DefId>>,"}, {"sha": "16d14bc56d6950257b21eda784f2fe559b548101", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5f16e0e180f4f76187e55aecb5913a1cf7fab2a/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5f16e0e180f4f76187e55aecb5913a1cf7fab2a/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=c5f16e0e180f4f76187e55aecb5913a1cf7fab2a", "patch": "@@ -201,7 +201,7 @@ pub struct Trait {\n     pub name: Name,\n     pub items: hir::HirVec<hir::TraitItem>,\n     pub generics: hir::Generics,\n-    pub bounds: hir::HirVec<hir::ParamBound>,\n+    pub bounds: hir::HirVec<hir::GenericBound>,\n     pub attrs: hir::HirVec<ast::Attribute>,\n     pub id: ast::NodeId,\n     pub whence: Span,"}, {"sha": "987821d2e30025268e543083e8da3111a2573d75", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c5f16e0e180f4f76187e55aecb5913a1cf7fab2a/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5f16e0e180f4f76187e55aecb5913a1cf7fab2a/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=c5f16e0e180f4f76187e55aecb5913a1cf7fab2a", "patch": "@@ -46,7 +46,7 @@ pub struct MutableSpace(pub clean::Mutability);\n #[derive(Copy, Clone)]\n pub struct RawMutableSpace(pub clean::Mutability);\n /// Wrapper struct for emitting type parameter bounds.\n-pub struct ParamBounds<'a>(pub &'a [clean::ParamBound]);\n+pub struct GenericBounds<'a>(pub &'a [clean::GenericBound]);\n /// Wrapper struct for emitting a comma-separated list of items\n pub struct CommaSep<'a, T: 'a>(pub &'a [T]);\n pub struct AbiSpace(pub Abi);\n@@ -104,9 +104,9 @@ impl<'a, T: fmt::Display> fmt::Display for CommaSep<'a, T> {\n     }\n }\n \n-impl<'a> fmt::Display for ParamBounds<'a> {\n+impl<'a> fmt::Display for GenericBounds<'a> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        let &ParamBounds(bounds) = self;\n+        let &GenericBounds(bounds) = self;\n         for (i, bound) in bounds.iter().enumerate() {\n             if i > 0 {\n                 f.write_str(\" + \")?;\n@@ -126,9 +126,9 @@ impl fmt::Display for clean::GenericParamDef {\n \n                 if !bounds.is_empty() {\n                     if f.alternate() {\n-                        write!(f, \": {:#}\", ParamBounds(bounds))?;\n+                        write!(f, \": {:#}\", GenericBounds(bounds))?;\n                     } else {\n-                        write!(f, \":&nbsp;{}\", ParamBounds(bounds))?;\n+                        write!(f, \":&nbsp;{}\", GenericBounds(bounds))?;\n                     }\n                 }\n \n@@ -190,9 +190,9 @@ impl<'a> fmt::Display for WhereClause<'a> {\n                 &clean::WherePredicate::BoundPredicate { ref ty, ref bounds } => {\n                     let bounds = bounds;\n                     if f.alternate() {\n-                        clause.push_str(&format!(\"{:#}: {:#}\", ty, ParamBounds(bounds)));\n+                        clause.push_str(&format!(\"{:#}: {:#}\", ty, GenericBounds(bounds)));\n                     } else {\n-                        clause.push_str(&format!(\"{}: {}\", ty, ParamBounds(bounds)));\n+                        clause.push_str(&format!(\"{}: {}\", ty, GenericBounds(bounds)));\n                     }\n                 }\n                 &clean::WherePredicate::RegionPredicate { ref lifetime,\n@@ -267,7 +267,7 @@ impl fmt::Display for clean::PolyTrait {\n     }\n }\n \n-impl fmt::Display for clean::ParamBound {\n+impl fmt::Display for clean::GenericBound {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n             clean::Outlives(ref lt) => {\n@@ -512,7 +512,7 @@ fn primitive_link(f: &mut fmt::Formatter,\n \n /// Helper to render type parameters\n fn tybounds(w: &mut fmt::Formatter,\n-            typarams: &Option<Vec<clean::ParamBound>>) -> fmt::Result {\n+            typarams: &Option<Vec<clean::GenericBound>>) -> fmt::Result {\n     match *typarams {\n         Some(ref params) => {\n             for param in params {\n@@ -667,7 +667,7 @@ fn fmt_type(t: &clean::Type, f: &mut fmt::Formatter, use_absolute: bool) -> fmt:\n             }\n         }\n         clean::ImplTrait(ref bounds) => {\n-            write!(f, \"impl {}\", ParamBounds(bounds))\n+            write!(f, \"impl {}\", GenericBounds(bounds))\n         }\n         clean::QPath { ref name, ref self_type, ref trait_ } => {\n             let should_show_cast = match *trait_ {"}, {"sha": "180591b35326073f3fc3c825be08563a7d2d0d39", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c5f16e0e180f4f76187e55aecb5913a1cf7fab2a/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5f16e0e180f4f76187e55aecb5913a1cf7fab2a/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=c5f16e0e180f4f76187e55aecb5913a1cf7fab2a", "patch": "@@ -69,7 +69,7 @@ use doctree;\n use fold::DocFolder;\n use html::escape::Escape;\n use html::format::{ConstnessSpace};\n-use html::format::{ParamBounds, WhereClause, href, AbiSpace};\n+use html::format::{GenericBounds, WhereClause, href, AbiSpace};\n use html::format::{VisSpace, Method, UnsafetySpace, MutableSpace};\n use html::format::fmt_impl_for_trait_page;\n use html::item_type::ItemType;\n@@ -2960,14 +2960,14 @@ fn assoc_const(w: &mut fmt::Formatter,\n }\n \n fn assoc_type<W: fmt::Write>(w: &mut W, it: &clean::Item,\n-                             bounds: &Vec<clean::ParamBound>,\n+                             bounds: &Vec<clean::GenericBound>,\n                              default: Option<&clean::Type>,\n                              link: AssocItemLink) -> fmt::Result {\n     write!(w, \"type <a href='{}' class=\\\"type\\\">{}</a>\",\n            naive_assoc_href(it, link),\n            it.name.as_ref().unwrap())?;\n     if !bounds.is_empty() {\n-        write!(w, \": {}\", ParamBounds(bounds))?\n+        write!(w, \": {}\", GenericBounds(bounds))?\n     }\n     if let Some(default) = default {\n         write!(w, \" = {}\", default)?;"}, {"sha": "9dc13fab2d65d8b400206271fecad6ff3b3397d1", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c5f16e0e180f4f76187e55aecb5913a1cf7fab2a/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5f16e0e180f4f76187e55aecb5913a1cf7fab2a/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=c5f16e0e180f4f76187e55aecb5913a1cf7fab2a", "patch": "@@ -10,7 +10,7 @@\n \n // The Rust abstract syntax tree.\n \n-pub use self::ParamBound::*;\n+pub use self::GenericBound::*;\n pub use self::UnsafeSource::*;\n pub use self::GenericArgs::*;\n pub use symbol::{Ident, Symbol as Name};\n@@ -282,12 +282,12 @@ pub enum TraitBoundModifier {\n /// the \"special\" built-in traits (see middle::lang_items) and\n /// detects Copy, Send and Sync.\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n-pub enum ParamBound {\n+pub enum GenericBound {\n     Trait(PolyTraitRef, TraitBoundModifier),\n     Outlives(Lifetime)\n }\n \n-impl ParamBound {\n+impl GenericBound {\n     pub fn span(&self) -> Span {\n         match self {\n             &Trait(ref t, ..) => t.span,\n@@ -296,7 +296,7 @@ impl ParamBound {\n     }\n }\n \n-pub type ParamBounds = Vec<ParamBound>;\n+pub type GenericBounds = Vec<GenericBound>;\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum GenericParamKind {\n@@ -312,7 +312,7 @@ pub struct GenericParam {\n     pub id: NodeId,\n     pub ident: Ident,\n     pub attrs: ThinVec<Attribute>,\n-    pub bounds: ParamBounds,\n+    pub bounds: GenericBounds,\n \n     pub kind: GenericParamKind,\n }\n@@ -381,7 +381,7 @@ pub struct WhereBoundPredicate {\n     /// The type being bounded\n     pub bounded_ty: P<Ty>,\n     /// Trait and lifetime bounds (`Clone+Send+'static`)\n-    pub bounds: ParamBounds,\n+    pub bounds: GenericBounds,\n }\n \n /// A lifetime predicate.\n@@ -391,7 +391,7 @@ pub struct WhereBoundPredicate {\n pub struct WhereRegionPredicate {\n     pub span: Span,\n     pub lifetime: Lifetime,\n-    pub bounds: ParamBounds,\n+    pub bounds: GenericBounds,\n }\n \n /// An equality predicate (unsupported).\n@@ -927,7 +927,7 @@ impl Expr {\n         }\n     }\n \n-    fn to_bound(&self) -> Option<ParamBound> {\n+    fn to_bound(&self) -> Option<GenericBound> {\n         match &self.node {\n             ExprKind::Path(None, path) =>\n                 Some(Trait(PolyTraitRef::new(Vec::new(), path.clone(), self.span),\n@@ -1352,7 +1352,7 @@ pub struct TraitItem {\n pub enum TraitItemKind {\n     Const(P<Ty>, Option<P<Expr>>),\n     Method(MethodSig, Option<P<Block>>),\n-    Type(ParamBounds, Option<P<Ty>>),\n+    Type(GenericBounds, Option<P<Ty>>),\n     Macro(Mac),\n }\n \n@@ -1537,10 +1537,10 @@ pub enum TyKind {\n     Path(Option<QSelf>, Path),\n     /// A trait object type `Bound1 + Bound2 + Bound3`\n     /// where `Bound` is a trait or a lifetime.\n-    TraitObject(ParamBounds, TraitObjectSyntax),\n+    TraitObject(GenericBounds, TraitObjectSyntax),\n     /// An `impl Bound1 + Bound2 + Bound3` type\n     /// where `Bound` is a trait or a lifetime.\n-    ImplTrait(ParamBounds),\n+    ImplTrait(GenericBounds),\n     /// No-op; kept solely so that we can pretty-print faithfully\n     Paren(P<Ty>),\n     /// Unused for now\n@@ -2061,11 +2061,11 @@ pub enum ItemKind {\n     /// A Trait declaration (`trait` or `pub trait`).\n     ///\n     /// E.g. `trait Foo { .. }`, `trait Foo<T> { .. }` or `auto trait Foo {}`\n-    Trait(IsAuto, Unsafety, Generics, ParamBounds, Vec<TraitItem>),\n+    Trait(IsAuto, Unsafety, Generics, GenericBounds, Vec<TraitItem>),\n     /// Trait alias\n     ///\n     /// E.g. `trait Foo = Bar + Quux;`\n-    TraitAlias(Generics, ParamBounds),\n+    TraitAlias(Generics, GenericBounds),\n     /// An implementation.\n     ///\n     /// E.g. `impl<A> Foo<A> { .. }` or `impl<A> Trait for Foo<A> { .. }`"}, {"sha": "9de6e14fbebdc44457ee2895582a8532bdd67bf8", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c5f16e0e180f4f76187e55aecb5913a1cf7fab2a/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5f16e0e180f4f76187e55aecb5913a1cf7fab2a/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=c5f16e0e180f4f76187e55aecb5913a1cf7fab2a", "patch": "@@ -68,18 +68,18 @@ pub trait AstBuilder {\n                span: Span,\n                id: ast::Ident,\n                attrs: Vec<ast::Attribute>,\n-               bounds: ast::ParamBounds,\n+               bounds: ast::GenericBounds,\n                default: Option<P<ast::Ty>>) -> ast::GenericParam;\n \n     fn trait_ref(&self, path: ast::Path) -> ast::TraitRef;\n     fn poly_trait_ref(&self, span: Span, path: ast::Path) -> ast::PolyTraitRef;\n-    fn ty_param_bound(&self, path: ast::Path) -> ast::ParamBound;\n+    fn ty_param_bound(&self, path: ast::Path) -> ast::GenericBound;\n     fn lifetime(&self, span: Span, ident: ast::Ident) -> ast::Lifetime;\n     fn lifetime_def(&self,\n                     span: Span,\n                     ident: ast::Ident,\n                     attrs: Vec<ast::Attribute>,\n-                    bounds: ast::ParamBounds)\n+                    bounds: ast::GenericBounds)\n                     -> ast::GenericParam;\n \n     // statements\n@@ -436,7 +436,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n                span: Span,\n                ident: ast::Ident,\n                attrs: Vec<ast::Attribute>,\n-               bounds: ast::ParamBounds,\n+               bounds: ast::GenericBounds,\n                default: Option<P<ast::Ty>>) -> ast::GenericParam {\n         ast::GenericParam {\n             ident: ident.with_span_pos(span),\n@@ -464,7 +464,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         }\n     }\n \n-    fn ty_param_bound(&self, path: ast::Path) -> ast::ParamBound {\n+    fn ty_param_bound(&self, path: ast::Path) -> ast::GenericBound {\n         ast::Trait(self.poly_trait_ref(path.span, path), ast::TraitBoundModifier::None)\n     }\n \n@@ -476,7 +476,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n                     span: Span,\n                     ident: ast::Ident,\n                     attrs: Vec<ast::Attribute>,\n-                    bounds: ast::ParamBounds)\n+                    bounds: ast::GenericBounds)\n                     -> ast::GenericParam {\n         let lifetime = self.lifetime(span, ident);\n         ast::GenericParam {"}, {"sha": "5db5d0781eae12babf41ae9cc6706fa3eb00fad4", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c5f16e0e180f4f76187e55aecb5913a1cf7fab2a/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5f16e0e180f4f76187e55aecb5913a1cf7fab2a/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=c5f16e0e180f4f76187e55aecb5913a1cf7fab2a", "patch": "@@ -268,15 +268,15 @@ pub trait Folder : Sized {\n         noop_fold_interpolated(nt, self)\n     }\n \n-    fn fold_opt_bounds(&mut self, b: Option<ParamBounds>) -> Option<ParamBounds> {\n+    fn fold_opt_bounds(&mut self, b: Option<GenericBounds>) -> Option<GenericBounds> {\n         noop_fold_opt_bounds(b, self)\n     }\n \n-    fn fold_bounds(&mut self, b: ParamBounds) -> ParamBounds {\n+    fn fold_bounds(&mut self, b: GenericBounds) -> GenericBounds {\n         noop_fold_bounds(b, self)\n     }\n \n-    fn fold_param_bound(&mut self, tpb: ParamBound) -> ParamBound {\n+    fn fold_param_bound(&mut self, tpb: GenericBound) -> GenericBound {\n         noop_fold_param_bound(tpb, self)\n     }\n \n@@ -676,7 +676,7 @@ pub fn noop_fold_fn_decl<T: Folder>(decl: P<FnDecl>, fld: &mut T) -> P<FnDecl> {\n     })\n }\n \n-pub fn noop_fold_param_bound<T>(pb: ParamBound, fld: &mut T) -> ParamBound where T: Folder {\n+pub fn noop_fold_param_bound<T>(pb: GenericBound, fld: &mut T) -> GenericBound where T: Folder {\n     match pb {\n         Trait(ty, modifier) => {\n             Trait(fld.fold_poly_trait_ref(ty), modifier)\n@@ -847,13 +847,13 @@ pub fn noop_fold_mt<T: Folder>(MutTy {ty, mutbl}: MutTy, folder: &mut T) -> MutT\n     }\n }\n \n-pub fn noop_fold_opt_bounds<T: Folder>(b: Option<ParamBounds>, folder: &mut T)\n-                                       -> Option<ParamBounds> {\n+pub fn noop_fold_opt_bounds<T: Folder>(b: Option<GenericBounds>, folder: &mut T)\n+                                       -> Option<GenericBounds> {\n     b.map(|bounds| folder.fold_bounds(bounds))\n }\n \n-fn noop_fold_bounds<T: Folder>(bounds: ParamBounds, folder: &mut T)\n-                          -> ParamBounds {\n+fn noop_fold_bounds<T: Folder>(bounds: GenericBounds, folder: &mut T)\n+                          -> GenericBounds {\n     bounds.move_map(|bound| folder.fold_param_bound(bound))\n }\n "}, {"sha": "8588f4c492f94b6325c4529f06dbc0e18370728a", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c5f16e0e180f4f76187e55aecb5913a1cf7fab2a/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5f16e0e180f4f76187e55aecb5913a1cf7fab2a/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=c5f16e0e180f4f76187e55aecb5913a1cf7fab2a", "patch": "@@ -36,7 +36,7 @@ use ast::{VariantData, StructField};\n use ast::StrStyle;\n use ast::SelfKind;\n use ast::{TraitItem, TraitRef, TraitObjectSyntax};\n-use ast::{Ty, TyKind, TypeBinding, ParamBounds};\n+use ast::{Ty, TyKind, TypeBinding, GenericBounds};\n use ast::{Visibility, VisibilityKind, WhereClause, CrateSugar};\n use ast::{UseTree, UseTreeKind};\n use ast::{BinOpKind, UnOp};\n@@ -4735,7 +4735,7 @@ impl<'a> Parser<'a> {\n     // LT_BOUND = LIFETIME (e.g. `'a`)\n     // TY_BOUND = TY_BOUND_NOPAREN | (TY_BOUND_NOPAREN)\n     // TY_BOUND_NOPAREN = [?] [for<LT_PARAM_DEFS>] SIMPLE_PATH (e.g. `?for<'a: 'b> m::Trait<'a>`)\n-    fn parse_ty_param_bounds_common(&mut self, allow_plus: bool) -> PResult<'a, ParamBounds> {\n+    fn parse_ty_param_bounds_common(&mut self, allow_plus: bool) -> PResult<'a, GenericBounds> {\n         let mut bounds = Vec::new();\n         loop {\n             // This needs to be syncronized with `Token::can_begin_bound`.\n@@ -4784,16 +4784,16 @@ impl<'a> Parser<'a> {\n         return Ok(bounds);\n     }\n \n-    fn parse_ty_param_bounds(&mut self) -> PResult<'a, ParamBounds> {\n+    fn parse_ty_param_bounds(&mut self) -> PResult<'a, GenericBounds> {\n         self.parse_ty_param_bounds_common(true)\n     }\n \n     // Parse bounds of a lifetime parameter `BOUND + BOUND + BOUND`, possibly with trailing `+`.\n     // BOUND = LT_BOUND (e.g. `'a`)\n-    fn parse_lt_param_bounds(&mut self) -> ParamBounds {\n+    fn parse_lt_param_bounds(&mut self) -> GenericBounds {\n         let mut lifetimes = Vec::new();\n         while self.check_lifetime() {\n-            lifetimes.push(ast::ParamBound::Outlives(self.expect_lifetime()));\n+            lifetimes.push(ast::GenericBound::Outlives(self.expect_lifetime()));\n \n             if !self.eat_plus() {\n                 break\n@@ -4833,7 +4833,7 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Parses the following grammar:\n-    ///     TraitItemAssocTy = Ident [\"<\"...\">\"] [\":\" [ParamBounds]] [\"where\" ...] [\"=\" Ty]\n+    ///     TraitItemAssocTy = Ident [\"<\"...\">\"] [\":\" [GenericBounds]] [\"where\" ...] [\"=\" Ty]\n     fn parse_trait_item_assoc_ty(&mut self)\n         -> PResult<'a, (Ident, TraitItemKind, ast::Generics)> {\n         let ident = self.parse_ident()?;"}, {"sha": "1e0b107ef6ead0aac56e43ff50cd19cc13dd4ca3", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c5f16e0e180f4f76187e55aecb5913a1cf7fab2a/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5f16e0e180f4f76187e55aecb5913a1cf7fab2a/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=c5f16e0e180f4f76187e55aecb5913a1cf7fab2a", "patch": "@@ -292,7 +292,7 @@ pub fn ty_to_string(ty: &ast::Ty) -> String {\n     to_string(|s| s.print_type(ty))\n }\n \n-pub fn bounds_to_string(bounds: &[ast::ParamBound]) -> String {\n+pub fn bounds_to_string(bounds: &[ast::GenericBound]) -> String {\n     to_string(|s| s.print_type_bounds(\"\", bounds))\n }\n \n@@ -1177,7 +1177,7 @@ impl<'a> State<'a> {\n \n     fn print_associated_type(&mut self,\n                              ident: ast::Ident,\n-                             bounds: Option<&ast::ParamBounds>,\n+                             bounds: Option<&ast::GenericBounds>,\n                              ty: Option<&ast::Ty>)\n                              -> io::Result<()> {\n         self.word_space(\"type\")?;\n@@ -2810,7 +2810,7 @@ impl<'a> State<'a> {\n \n     pub fn print_type_bounds(&mut self,\n                         prefix: &str,\n-                        bounds: &[ast::ParamBound])\n+                        bounds: &[ast::GenericBound])\n                         -> io::Result<()> {\n         if !bounds.is_empty() {\n             self.s.word(prefix)?;\n@@ -2843,7 +2843,7 @@ impl<'a> State<'a> {\n         self.print_name(lifetime.ident.name)\n     }\n \n-    pub fn print_lifetime_bounds(&mut self, lifetime: ast::Lifetime, bounds: &ast::ParamBounds)\n+    pub fn print_lifetime_bounds(&mut self, lifetime: ast::Lifetime, bounds: &ast::GenericBounds)\n         -> io::Result<()>\n     {\n         self.print_lifetime(lifetime)?;\n@@ -2854,7 +2854,7 @@ impl<'a> State<'a> {\n                     self.s.word(\" + \")?;\n                 }\n                 match bound {\n-                    ast::ParamBound::Outlives(lt) => self.print_lifetime(*lt)?,\n+                    ast::GenericBound::Outlives(lt) => self.print_lifetime(*lt)?,\n                     _ => panic!(),\n                 }\n             }"}, {"sha": "ebb3081c1fde5586665e08271e5cdd35ef972e75", "filename": "src/libsyntax/util/node_count.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5f16e0e180f4f76187e55aecb5913a1cf7fab2a/src%2Flibsyntax%2Futil%2Fnode_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5f16e0e180f4f76187e55aecb5913a1cf7fab2a/src%2Flibsyntax%2Futil%2Fnode_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fnode_count.rs?ref=c5f16e0e180f4f76187e55aecb5913a1cf7fab2a", "patch": "@@ -95,7 +95,7 @@ impl<'ast> Visitor<'ast> for NodeCounter {\n         self.count += 1;\n         walk_trait_ref(self, t)\n     }\n-    fn visit_param_bound(&mut self, bounds: &ParamBound) {\n+    fn visit_param_bound(&mut self, bounds: &GenericBound) {\n         self.count += 1;\n         walk_param_bound(self, bounds)\n     }"}, {"sha": "71b606f08a5a0f3c4bf4b0d66b4d045bd34efbfb", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5f16e0e180f4f76187e55aecb5913a1cf7fab2a/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5f16e0e180f4f76187e55aecb5913a1cf7fab2a/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=c5f16e0e180f4f76187e55aecb5913a1cf7fab2a", "patch": "@@ -86,7 +86,7 @@ pub trait Visitor<'ast>: Sized {\n     fn visit_trait_item(&mut self, ti: &'ast TraitItem) { walk_trait_item(self, ti) }\n     fn visit_impl_item(&mut self, ii: &'ast ImplItem) { walk_impl_item(self, ii) }\n     fn visit_trait_ref(&mut self, t: &'ast TraitRef) { walk_trait_ref(self, t) }\n-    fn visit_param_bound(&mut self, bounds: &'ast ParamBound) {\n+    fn visit_param_bound(&mut self, bounds: &'ast GenericBound) {\n         walk_param_bound(self, bounds)\n     }\n     fn visit_poly_trait_ref(&mut self, t: &'ast PolyTraitRef, m: &'ast TraitBoundModifier) {\n@@ -479,7 +479,7 @@ pub fn walk_global_asm<'a, V: Visitor<'a>>(_: &mut V, _: &'a GlobalAsm) {\n     // Empty!\n }\n \n-pub fn walk_param_bound<'a, V: Visitor<'a>>(visitor: &mut V, bound: &'a ParamBound) {\n+pub fn walk_param_bound<'a, V: Visitor<'a>>(visitor: &mut V, bound: &'a GenericBound) {\n     match *bound {\n         Trait(ref typ, ref modifier) => {\n             visitor.visit_poly_trait_ref(typ, modifier);"}, {"sha": "0922e7cd800e4d93e52bdddf4af94fb4e1a1664f", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5f16e0e180f4f76187e55aecb5913a1cf7fab2a/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5f16e0e180f4f76187e55aecb5913a1cf7fab2a/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=c5f16e0e180f4f76187e55aecb5913a1cf7fab2a", "patch": "@@ -553,7 +553,7 @@ impl<'a> TraitDef<'a> {\n             GenericParamKind::Lifetime { .. } => param.clone(),\n             GenericParamKind::Type { .. } => {\n                 // I don't think this can be moved out of the loop, since\n-                // a ParamBound requires an ast id\n+                // a GenericBound requires an ast id\n                 let mut bounds: Vec<_> =\n                     // extra restrictions on the generics parameters to the\n                     // type being derived upon"}, {"sha": "edb901e1f3c429ceff44a89cd82de96fccfb4fa2", "filename": "src/libsyntax_ext/deriving/generic/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5f16e0e180f4f76187e55aecb5913a1cf7fab2a/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5f16e0e180f4f76187e55aecb5913a1cf7fab2a/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs?ref=c5f16e0e180f4f76187e55aecb5913a1cf7fab2a", "patch": "@@ -261,7 +261,7 @@ impl<'a> LifetimeBounds<'a> {\n             .iter()\n             .map(|&(lt, ref bounds)| {\n                 let bounds = bounds.iter()\n-                    .map(|b| ast::ParamBound::Outlives(cx.lifetime(span, Ident::from_str(b))));\n+                    .map(|b| ast::GenericBound::Outlives(cx.lifetime(span, Ident::from_str(b))));\n                 cx.lifetime_def(span, Ident::from_str(lt), vec![], bounds.collect())\n             })\n             .chain(self.bounds"}]}