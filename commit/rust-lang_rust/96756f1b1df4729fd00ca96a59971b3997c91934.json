{"sha": "96756f1b1df4729fd00ca96a59971b3997c91934", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2NzU2ZjFiMWRmNDcyOWZkMDBjYTk2YTU5OTcxYjM5OTdjOTE5MzQ=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-04-05T20:08:16Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-04-06T08:45:30Z"}, "message": "Add Lifetime to TyKind::Ref", "tree": {"sha": "1daa47d67081772ed1a61b0db13ff041337ddf8b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1daa47d67081772ed1a61b0db13ff041337ddf8b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/96756f1b1df4729fd00ca96a59971b3997c91934", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/96756f1b1df4729fd00ca96a59971b3997c91934", "html_url": "https://github.com/rust-lang/rust/commit/96756f1b1df4729fd00ca96a59971b3997c91934", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/96756f1b1df4729fd00ca96a59971b3997c91934/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4bc8a018302d53951ae855ba57d07095a16ef182", "url": "https://api.github.com/repos/rust-lang/rust/commits/4bc8a018302d53951ae855ba57d07095a16ef182", "html_url": "https://github.com/rust-lang/rust/commit/4bc8a018302d53951ae855ba57d07095a16ef182"}], "stats": {"total": 117, "additions": 74, "deletions": 43}, "files": [{"sha": "813cd1295f584b04d094937e98a1cbcf67acb0ea", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/96756f1b1df4729fd00ca96a59971b3997c91934/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96756f1b1df4729fd00ca96a59971b3997c91934/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=96756f1b1df4729fd00ca96a59971b3997c91934", "patch": "@@ -1888,9 +1888,10 @@ impl Type {\n                     substs.iter(&Interner).filter_map(|a| a.ty(&Interner)).any(go)\n                 }\n \n-                TyKind::Array(ty) | TyKind::Slice(ty) | TyKind::Raw(_, ty) | TyKind::Ref(_, ty) => {\n-                    go(ty)\n-                }\n+                TyKind::Array(ty)\n+                | TyKind::Slice(ty)\n+                | TyKind::Raw(_, ty)\n+                | TyKind::Ref(_, _, ty) => go(ty),\n \n                 TyKind::Scalar(_)\n                 | TyKind::Str\n@@ -2148,7 +2149,10 @@ impl Type {\n                     );\n                 }\n \n-                TyKind::Ref(_, ty) | TyKind::Raw(_, ty) | TyKind::Array(ty) | TyKind::Slice(ty) => {\n+                TyKind::Ref(_, _, ty)\n+                | TyKind::Raw(_, ty)\n+                | TyKind::Array(ty)\n+                | TyKind::Slice(ty) => {\n                     walk_type(db, &type_.derived(ty.clone()), cb);\n                 }\n "}, {"sha": "d7bf9fdf7e4c5a379c4a2a6ee16cf1230c71f291", "filename": "crates/hir_ty/src/diagnostics/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96756f1b1df4729fd00ca96a59971b3997c91934/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96756f1b1df4729fd00ca96a59971b3997c91934/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs?ref=96756f1b1df4729fd00ca96a59971b3997c91934", "patch": "@@ -315,7 +315,7 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n                 if pat_ty == match_expr_ty\n                     || match_expr_ty\n                         .as_reference()\n-                        .map(|(match_expr_ty, _)| match_expr_ty == pat_ty)\n+                        .map(|(match_expr_ty, ..)| match_expr_ty == pat_ty)\n                         .unwrap_or(false)\n                 {\n                     // If we had a NotUsefulMatchArm diagnostic, we could"}, {"sha": "22416c0cff1fcec3fdfd9bc28d490de48f1d88e0", "filename": "crates/hir_ty/src/display.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96756f1b1df4729fd00ca96a59971b3997c91934/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96756f1b1df4729fd00ca96a59971b3997c91934/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs?ref=96756f1b1df4729fd00ca96a59971b3997c91934", "patch": "@@ -314,7 +314,7 @@ impl HirDisplay for Ty {\n                 t.hir_fmt(f)?;\n                 write!(f, \"; _]\")?;\n             }\n-            TyKind::Raw(m, t) | TyKind::Ref(m, t) => {\n+            TyKind::Raw(m, t) | TyKind::Ref(m, _, t) => {\n                 let ty_display =\n                     t.into_displayable(f.db, f.max_size, f.omit_verbose_types, f.display_target);\n "}, {"sha": "d6c48870ad3b50dce3961f0b2ebe1b9ada602b50", "filename": "crates/hir_ty/src/infer/coerce.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/96756f1b1df4729fd00ca96a59971b3997c91934/crates%2Fhir_ty%2Fsrc%2Finfer%2Fcoerce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96756f1b1df4729fd00ca96a59971b3997c91934/crates%2Fhir_ty%2Fsrc%2Finfer%2Fcoerce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fcoerce.rs?ref=96756f1b1df4729fd00ca96a59971b3997c91934", "patch": "@@ -81,7 +81,7 @@ impl<'a> InferenceContext<'a> {\n             // `&T` -> `*const T`\n             // `&mut T` -> `*mut T`/`*const T`\n             (TyKind::Ref(.., substs), &TyKind::Raw(m2 @ Mutability::Not, ..))\n-            | (TyKind::Ref(Mutability::Mut, substs), &TyKind::Raw(m2, ..)) => {\n+            | (TyKind::Ref(Mutability::Mut, _, substs), &TyKind::Raw(m2, ..)) => {\n                 from_ty = TyKind::Raw(m2, substs.clone()).intern(&Interner);\n             }\n \n@@ -111,7 +111,9 @@ impl<'a> InferenceContext<'a> {\n         // Auto Deref if cannot coerce\n         match (from_ty.kind(&Interner), to_ty.kind(&Interner)) {\n             // FIXME: DerefMut\n-            (TyKind::Ref(_, st1), TyKind::Ref(_, st2)) => self.unify_autoderef_behind_ref(st1, st2),\n+            (TyKind::Ref(.., st1), TyKind::Ref(.., st2)) => {\n+                self.unify_autoderef_behind_ref(st1, st2)\n+            }\n \n             // Otherwise, normal unify\n             _ => self.unify(&from_ty, to_ty),"}, {"sha": "77fb36332a9f92841ac519560775f2c22f91cbb9", "filename": "crates/hir_ty/src/infer/expr.rs", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/96756f1b1df4729fd00ca96a59971b3997c91934/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96756f1b1df4729fd00ca96a59971b3997c91934/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=96756f1b1df4729fd00ca96a59971b3997c91934", "patch": "@@ -23,7 +23,7 @@ use crate::{\n     traits::{chalk::from_chalk, FnTrait},\n     utils::{generics, variant_data, Generics},\n     AdtId, Binders, CallableDefId, FnPointer, FnSig, FnSubst, InEnvironment, Interner,\n-    ProjectionTyExt, Rawness, Scalar, Substitution, TraitRef, Ty, TyBuilder, TyKind, TypeWalk,\n+    LifetimeData, ProjectionTyExt, Rawness, Scalar, Substitution, TraitRef, Ty, TyBuilder, TyKind,\n };\n \n use super::{\n@@ -527,7 +527,9 @@ impl<'a> InferenceContext<'a> {\n                 let inner_ty = self.infer_expr_inner(*expr, &expectation);\n                 match rawness {\n                     Rawness::RawPtr => TyKind::Raw(mutability, inner_ty),\n-                    Rawness::Ref => TyKind::Ref(mutability, inner_ty),\n+                    Rawness::Ref => {\n+                        TyKind::Ref(mutability, LifetimeData::Static.intern(&Interner), inner_ty)\n+                    }\n                 }\n                 .intern(&Interner)\n             }\n@@ -730,13 +732,17 @@ impl<'a> InferenceContext<'a> {\n             }\n             Expr::Literal(lit) => match lit {\n                 Literal::Bool(..) => TyKind::Scalar(Scalar::Bool).intern(&Interner),\n-                Literal::String(..) => {\n-                    TyKind::Ref(Mutability::Not, TyKind::Str.intern(&Interner)).intern(&Interner)\n-                }\n+                Literal::String(..) => TyKind::Ref(\n+                    Mutability::Not,\n+                    LifetimeData::Static.intern(&Interner),\n+                    TyKind::Str.intern(&Interner),\n+                )\n+                .intern(&Interner),\n                 Literal::ByteString(..) => {\n                     let byte_type = TyKind::Scalar(Scalar::Uint(UintTy::U8)).intern(&Interner);\n                     let array_type = TyKind::Array(byte_type).intern(&Interner);\n-                    TyKind::Ref(Mutability::Not, array_type).intern(&Interner)\n+                    TyKind::Ref(Mutability::Not, LifetimeData::Static.intern(&Interner), array_type)\n+                        .intern(&Interner)\n                 }\n                 Literal::Char(..) => TyKind::Scalar(Scalar::Char).intern(&Interner),\n                 Literal::Int(_v, ty) => match ty {\n@@ -872,7 +878,9 @@ impl<'a> InferenceContext<'a> {\n         // Apply autoref so the below unification works correctly\n         // FIXME: return correct autorefs from lookup_method\n         let actual_receiver_ty = match expected_receiver_ty.as_reference() {\n-            Some((_, mutability)) => TyKind::Ref(mutability, derefed_receiver_ty).intern(&Interner),\n+            Some((_, lifetime, mutability)) => {\n+                TyKind::Ref(mutability, lifetime, derefed_receiver_ty).intern(&Interner)\n+            }\n             _ => derefed_receiver_ty,\n         };\n         self.unify(&expected_receiver_ty, &actual_receiver_ty);"}, {"sha": "b5e97cc8c2b071e7d3cd40ac1b9b115a7fd2551c", "filename": "crates/hir_ty/src/infer/pat.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/96756f1b1df4729fd00ca96a59971b3997c91934/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96756f1b1df4729fd00ca96a59971b3997c91934/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs?ref=96756f1b1df4729fd00ca96a59971b3997c91934", "patch": "@@ -13,8 +13,8 @@ use hir_expand::name::Name;\n \n use super::{BindingMode, Expectation, InferenceContext};\n use crate::{\n-    lower::lower_to_chalk_mutability, utils::variant_data, Interner, Substitution, Ty, TyBuilder,\n-    TyKind,\n+    lower::lower_to_chalk_mutability, utils::variant_data, Interner, LifetimeData, Substitution,\n+    Ty, TyBuilder, TyKind,\n };\n \n impl<'a> InferenceContext<'a> {\n@@ -104,7 +104,7 @@ impl<'a> InferenceContext<'a> {\n         let body = Arc::clone(&self.body); // avoid borrow checker problem\n \n         if is_non_ref_pat(&body, pat) {\n-            while let Some((inner, mutability)) = expected.as_reference() {\n+            while let Some((inner, _lifetime, mutability)) = expected.as_reference() {\n                 expected = inner;\n                 default_bm = match default_bm {\n                     BindingMode::Move => BindingMode::Ref(mutability),\n@@ -162,7 +162,7 @@ impl<'a> InferenceContext<'a> {\n             Pat::Ref { pat, mutability } => {\n                 let mutability = lower_to_chalk_mutability(*mutability);\n                 let expectation = match expected.as_reference() {\n-                    Some((inner_ty, exp_mut)) => {\n+                    Some((inner_ty, _lifetime, exp_mut)) => {\n                         if mutability != exp_mut {\n                             // FIXME: emit type error?\n                         }\n@@ -171,7 +171,8 @@ impl<'a> InferenceContext<'a> {\n                     _ => self.result.standard_types.unknown.clone(),\n                 };\n                 let subty = self.infer_pat(*pat, &expectation, default_bm);\n-                TyKind::Ref(mutability, subty).intern(&Interner)\n+                TyKind::Ref(mutability, LifetimeData::Static.intern(&Interner), subty)\n+                    .intern(&Interner)\n             }\n             Pat::TupleStruct { path: p, args: subpats, ellipsis } => self.infer_tuple_struct_pat(\n                 p.as_ref(),\n@@ -203,9 +204,12 @@ impl<'a> InferenceContext<'a> {\n                 let inner_ty = self.insert_type_vars_shallow(inner_ty);\n \n                 let bound_ty = match mode {\n-                    BindingMode::Ref(mutability) => {\n-                        TyKind::Ref(mutability, inner_ty.clone()).intern(&Interner)\n-                    }\n+                    BindingMode::Ref(mutability) => TyKind::Ref(\n+                        mutability,\n+                        LifetimeData::Static.intern(&Interner),\n+                        inner_ty.clone(),\n+                    )\n+                    .intern(&Interner),\n                     BindingMode::Move => inner_ty.clone(),\n                 };\n                 let bound_ty = self.resolve_ty_as_possible(bound_ty);"}, {"sha": "c7878ebfdfa5c634b166d819afb214558c5f29c5", "filename": "crates/hir_ty/src/infer/unify.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96756f1b1df4729fd00ca96a59971b3997c91934/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96756f1b1df4729fd00ca96a59971b3997c91934/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs?ref=96756f1b1df4729fd00ca96a59971b3997c91934", "patch": "@@ -317,7 +317,7 @@ impl InferenceTable {\n                 | (TyKind::Closure(.., substs1), TyKind::Closure(.., substs2)) => {\n                     self.unify_substs(substs1, substs2, depth + 1)\n                 }\n-                (TyKind::Ref(_, ty1), TyKind::Ref(_, ty2))\n+                (TyKind::Ref(_, _, ty1), TyKind::Ref(_, _, ty2))\n                 | (TyKind::Raw(_, ty1), TyKind::Raw(_, ty2))\n                 | (TyKind::Array(ty1), TyKind::Array(ty2))\n                 | (TyKind::Slice(ty1), TyKind::Slice(ty2)) => self.unify_inner(ty1, ty2, depth + 1),"}, {"sha": "1dfe2075c8152486db200b91f9ca2775def4c06f", "filename": "crates/hir_ty/src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/96756f1b1df4729fd00ca96a59971b3997c91934/crates%2Fhir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96756f1b1df4729fd00ca96a59971b3997c91934/crates%2Fhir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flib.rs?ref=96756f1b1df4729fd00ca96a59971b3997c91934", "patch": "@@ -165,16 +165,16 @@ impl CallableSig {\n }\n \n impl Ty {\n-    pub fn as_reference(&self) -> Option<(&Ty, Mutability)> {\n+    pub fn as_reference(&self) -> Option<(&Ty, Lifetime, Mutability)> {\n         match self.kind(&Interner) {\n-            TyKind::Ref(mutability, ty) => Some((ty, *mutability)),\n+            TyKind::Ref(mutability, lifetime, ty) => Some((ty, *lifetime, *mutability)),\n             _ => None,\n         }\n     }\n \n     pub fn as_reference_or_ptr(&self) -> Option<(&Ty, Rawness, Mutability)> {\n         match self.kind(&Interner) {\n-            TyKind::Ref(mutability, ty) => Some((ty, Rawness::Ref, *mutability)),\n+            TyKind::Ref(mutability, _, ty) => Some((ty, Rawness::Ref, *mutability)),\n             TyKind::Raw(mutability, ty) => Some((ty, Rawness::RawPtr, *mutability)),\n             _ => None,\n         }\n@@ -183,7 +183,7 @@ impl Ty {\n     pub fn strip_references(&self) -> &Ty {\n         let mut t: &Ty = self;\n \n-        while let TyKind::Ref(_mutability, ty) = t.kind(&Interner) {\n+        while let TyKind::Ref(_mutability, _lifetime, ty) = t.kind(&Interner) {\n             t = ty;\n         }\n "}, {"sha": "5a769fa6ac25e2d5141d84827bb37bb20364cb5d", "filename": "crates/hir_ty/src/lower.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/96756f1b1df4729fd00ca96a59971b3997c91934/crates%2Fhir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96756f1b1df4729fd00ca96a59971b3997c91934/crates%2Fhir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flower.rs?ref=96756f1b1df4729fd00ca96a59971b3997c91934", "patch": "@@ -34,7 +34,7 @@ use crate::{\n         variant_data, Generics,\n     },\n     AliasEq, AliasTy, Binders, BoundVar, CallableSig, DebruijnIndex, DynTy, FnPointer, FnSig,\n-    FnSubst, ImplTraitId, OpaqueTy, PolyFnSig, ProjectionTy, QuantifiedWhereClause,\n+    FnSubst, ImplTraitId, LifetimeData, OpaqueTy, PolyFnSig, ProjectionTy, QuantifiedWhereClause,\n     QuantifiedWhereClauses, ReturnTypeImplTrait, ReturnTypeImplTraits, Substitution,\n     TraitEnvironment, TraitRef, Ty, TyBuilder, TyKind, TypeWalk, WhereClause,\n };\n@@ -174,7 +174,9 @@ impl<'a> TyLoweringContext<'a> {\n             }\n             TypeRef::Reference(inner, _, mutability) => {\n                 let inner_ty = self.lower_ty(inner);\n-                TyKind::Ref(lower_to_chalk_mutability(*mutability), inner_ty).intern(&Interner)\n+                let lifetime = LifetimeData::Static.intern(&Interner);\n+                TyKind::Ref(lower_to_chalk_mutability(*mutability), lifetime, inner_ty)\n+                    .intern(&Interner)\n             }\n             TypeRef::Placeholder => TyKind::Error.intern(&Interner),\n             TypeRef::Fn(params, is_varargs) => {"}, {"sha": "427844c12df10f215710298b6abd06e499cd8549", "filename": "crates/hir_ty/src/method_resolution.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/96756f1b1df4729fd00ca96a59971b3997c91934/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96756f1b1df4729fd00ca96a59971b3997c91934/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs?ref=96756f1b1df4729fd00ca96a59971b3997c91934", "patch": "@@ -21,8 +21,8 @@ use crate::{\n     primitive::{self, FloatTy, IntTy, UintTy},\n     utils::all_super_traits,\n     AdtId, Canonical, CanonicalVarKinds, DebruijnIndex, FnPointer, FnSig, ForeignDefId,\n-    InEnvironment, Interner, Scalar, Substitution, TraitEnvironment, Ty, TyBuilder, TyKind,\n-    TypeWalk,\n+    InEnvironment, Interner, LifetimeData, Scalar, Substitution, TraitEnvironment, Ty, TyBuilder,\n+    TyKind, TypeWalk,\n };\n \n /// This is used as a key for indexing impls.\n@@ -453,7 +453,12 @@ fn iterate_method_candidates_with_autoref(\n     }\n     let refed = Canonical {\n         binders: deref_chain[0].binders.clone(),\n-        value: TyKind::Ref(Mutability::Not, deref_chain[0].value.clone()).intern(&Interner),\n+        value: TyKind::Ref(\n+            Mutability::Not,\n+            LifetimeData::Static.intern(&Interner),\n+            deref_chain[0].value.clone(),\n+        )\n+        .intern(&Interner),\n     };\n     if iterate_method_candidates_by_receiver(\n         &refed,\n@@ -470,7 +475,12 @@ fn iterate_method_candidates_with_autoref(\n     }\n     let ref_muted = Canonical {\n         binders: deref_chain[0].binders.clone(),\n-        value: TyKind::Ref(Mutability::Mut, deref_chain[0].value.clone()).intern(&Interner),\n+        value: TyKind::Ref(\n+            Mutability::Mut,\n+            LifetimeData::Static.intern(&Interner),\n+            deref_chain[0].value.clone(),\n+        )\n+        .intern(&Interner),\n     };\n     if iterate_method_candidates_by_receiver(\n         &ref_muted,"}, {"sha": "26f8fdbdc323efc2d2404c235ca4447ef8b56996", "filename": "crates/hir_ty/src/traits/chalk/mapping.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/96756f1b1df4729fd00ca96a59971b3997c91934/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96756f1b1df4729fd00ca96a59971b3997c91934/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs?ref=96756f1b1df4729fd00ca96a59971b3997c91934", "patch": "@@ -11,7 +11,7 @@ use hir_def::{GenericDefId, TypeAliasId};\n \n use crate::{\n     chalk_ext::ProjectionTyExt, db::HirDatabase, primitive::UintTy, AliasTy, CallableDefId,\n-    Canonical, DomainGoal, FnPointer, GenericArg, InEnvironment, OpaqueTy, ProjectionTy,\n+    Canonical, DomainGoal, FnPointer, GenericArg, InEnvironment, Lifetime, OpaqueTy, ProjectionTy,\n     QuantifiedWhereClause, Scalar, Substitution, TraitRef, Ty, TypeWalk, WhereClause,\n };\n \n@@ -22,7 +22,7 @@ impl ToChalk for Ty {\n     type Chalk = chalk_ir::Ty<Interner>;\n     fn to_chalk(self, db: &dyn HirDatabase) -> chalk_ir::Ty<Interner> {\n         match self.into_inner() {\n-            TyKind::Ref(m, ty) => ref_to_chalk(db, m, ty),\n+            TyKind::Ref(m, lt, ty) => ref_to_chalk(db, m, lt, ty),\n             TyKind::Array(ty) => array_to_chalk(db, ty),\n             TyKind::Function(FnPointer { sig, substitution: substs, .. }) => {\n                 let substitution = chalk_ir::FnSubst(substs.0.to_chalk(db));\n@@ -167,8 +167,8 @@ impl ToChalk for Ty {\n             }\n             chalk_ir::TyKind::Raw(mutability, ty) => TyKind::Raw(mutability, from_chalk(db, ty)),\n             chalk_ir::TyKind::Slice(ty) => TyKind::Slice(from_chalk(db, ty)),\n-            chalk_ir::TyKind::Ref(mutability, _lifetime, ty) => {\n-                TyKind::Ref(mutability, from_chalk(db, ty))\n+            chalk_ir::TyKind::Ref(mutability, lifetime, ty) => {\n+                TyKind::Ref(mutability, lifetime, from_chalk(db, ty))\n             }\n             chalk_ir::TyKind::Str => TyKind::Str,\n             chalk_ir::TyKind::Never => TyKind::Never,\n@@ -192,10 +192,10 @@ impl ToChalk for Ty {\n fn ref_to_chalk(\n     db: &dyn HirDatabase,\n     mutability: chalk_ir::Mutability,\n+    lifetime: Lifetime,\n     ty: Ty,\n ) -> chalk_ir::Ty<Interner> {\n     let arg = ty.to_chalk(db);\n-    let lifetime = LifetimeData::Static.intern(&Interner);\n     chalk_ir::TyKind::Ref(mutability, lifetime, arg).intern(&Interner)\n }\n "}, {"sha": "c984a31c851e7cee1eb2e5b4ad026e93519ea64d", "filename": "crates/hir_ty/src/types.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/96756f1b1df4729fd00ca96a59971b3997c91934/crates%2Fhir_ty%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96756f1b1df4729fd00ca96a59971b3997c91934/crates%2Fhir_ty%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftypes.rs?ref=96756f1b1df4729fd00ca96a59971b3997c91934", "patch": "@@ -11,7 +11,8 @@ use smallvec::SmallVec;\n \n use crate::{\n     AssocTypeId, CanonicalVarKinds, ChalkTraitId, ClosureId, FnDefId, FnSig, ForeignDefId,\n-    InferenceVar, Interner, OpaqueTyId, PlaceholderIndex, TypeWalk, VariableKind, VariableKinds,\n+    InferenceVar, Interner, Lifetime, OpaqueTyId, PlaceholderIndex, TypeWalk, VariableKind,\n+    VariableKinds,\n };\n \n #[derive(Clone, PartialEq, Eq, Debug, Hash)]\n@@ -122,7 +123,7 @@ pub enum TyKind {\n \n     /// A reference; a pointer with an associated lifetime. Written as\n     /// `&'a mut T` or `&'a T`.\n-    Ref(Mutability, Ty),\n+    Ref(Mutability, Lifetime, Ty),\n \n     /// This represents a placeholder for an opaque type in situations where we\n     /// don't know the hidden type (i.e. currently almost always). This is"}, {"sha": "4cc4e24fd57a5a3e11395c9661e3bda09788c78e", "filename": "crates/hir_ty/src/walk.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/96756f1b1df4729fd00ca96a59971b3997c91934/crates%2Fhir_ty%2Fsrc%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96756f1b1df4729fd00ca96a59971b3997c91934/crates%2Fhir_ty%2Fsrc%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fwalk.rs?ref=96756f1b1df4729fd00ca96a59971b3997c91934", "patch": "@@ -153,7 +153,7 @@ impl TypeWalk for Ty {\n                     p.walk(f);\n                 }\n             }\n-            TyKind::Slice(ty) | TyKind::Array(ty) | TyKind::Ref(_, ty) | TyKind::Raw(_, ty) => {\n+            TyKind::Slice(ty) | TyKind::Array(ty) | TyKind::Ref(_, _, ty) | TyKind::Raw(_, ty) => {\n                 ty.walk(f);\n             }\n             TyKind::Function(fn_pointer) => {\n@@ -187,7 +187,7 @@ impl TypeWalk for Ty {\n             TyKind::Alias(AliasTy::Opaque(o_ty)) => {\n                 o_ty.substitution.walk_mut_binders(f, binders);\n             }\n-            TyKind::Slice(ty) | TyKind::Array(ty) | TyKind::Ref(_, ty) | TyKind::Raw(_, ty) => {\n+            TyKind::Slice(ty) | TyKind::Array(ty) | TyKind::Ref(_, _, ty) | TyKind::Raw(_, ty) => {\n                 ty.walk_mut_binders(f, binders);\n             }\n             TyKind::Function(fn_pointer) => {"}]}