{"sha": "93ac5bc7de2b47f8848275254a0e327269ee5f06", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzYWM1YmM3ZGUyYjQ3Zjg4NDgyNzUyNTRhMGUzMjcyNjllZTVmMDY=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-12-28T15:54:27Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-02-14T22:40:03Z"}, "message": "Update tests", "tree": {"sha": "61ff326e5c920e427f01e8b98844588cfcf75898", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61ff326e5c920e427f01e8b98844588cfcf75898"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/93ac5bc7de2b47f8848275254a0e327269ee5f06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/93ac5bc7de2b47f8848275254a0e327269ee5f06", "html_url": "https://github.com/rust-lang/rust/commit/93ac5bc7de2b47f8848275254a0e327269ee5f06", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/93ac5bc7de2b47f8848275254a0e327269ee5f06/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb8c9911f591b2f72d5d473acab3c27ef9ae1a46", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb8c9911f591b2f72d5d473acab3c27ef9ae1a46", "html_url": "https://github.com/rust-lang/rust/commit/bb8c9911f591b2f72d5d473acab3c27ef9ae1a46"}], "stats": {"total": 448, "additions": 291, "deletions": 157}, "files": [{"sha": "557439f394953ed460f11012a6e57e641be84479", "filename": "src/test/ui/consts/min_const_fn/min_const_fn.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/93ac5bc7de2b47f8848275254a0e327269ee5f06/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93ac5bc7de2b47f8848275254a0e327269ee5f06/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.rs?ref=93ac5bc7de2b47f8848275254a0e327269ee5f06", "patch": "@@ -123,12 +123,9 @@ impl<T: Sync + Sized> Foo<T> {\n }\n \n struct AlanTuring<T>(T);\n-const fn no_rpit2() -> AlanTuring<impl std::fmt::Debug> { AlanTuring(0) }\n-//~^ ERROR `impl Trait` in const fn is unstable\n const fn no_apit2(_x: AlanTuring<impl std::fmt::Debug>) {}\n //~^ ERROR trait bounds other than `Sized`\n const fn no_apit(_x: impl std::fmt::Debug) {} //~ ERROR trait bounds other than `Sized`\n-const fn no_rpit() -> impl std::fmt::Debug {} //~ ERROR `impl Trait` in const fn is unstable\n const fn no_dyn_trait(_x: &dyn std::fmt::Debug) {} //~ ERROR trait bounds other than `Sized`\n const fn no_dyn_trait_ret() -> &'static dyn std::fmt::Debug { &() }\n //~^ ERROR trait bounds other than `Sized`"}, {"sha": "512b343011b40c8a6030d5f76dabbba90faa7837", "filename": "src/test/ui/consts/min_const_fn/min_const_fn.stderr", "status": "modified", "additions": 8, "deletions": 26, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/93ac5bc7de2b47f8848275254a0e327269ee5f06/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93ac5bc7de2b47f8848275254a0e327269ee5f06/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr?ref=93ac5bc7de2b47f8848275254a0e327269ee5f06", "patch": "@@ -214,17 +214,8 @@ LL | impl<T: Sync + Sized> Foo<T> {\n    = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n-error[E0723]: `impl Trait` in const fn is unstable\n-  --> $DIR/min_const_fn.rs:126:24\n-   |\n-LL | const fn no_rpit2() -> AlanTuring<impl std::fmt::Debug> { AlanTuring(0) }\n-   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n-\n error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:128:34\n+  --> $DIR/min_const_fn.rs:126:34\n    |\n LL | const fn no_apit2(_x: AlanTuring<impl std::fmt::Debug>) {}\n    |                                  ^^^^^^^^^^^^^^^^^^^^\n@@ -233,25 +224,16 @@ LL | const fn no_apit2(_x: AlanTuring<impl std::fmt::Debug>) {}\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:130:22\n+  --> $DIR/min_const_fn.rs:128:22\n    |\n LL | const fn no_apit(_x: impl std::fmt::Debug) {}\n    |                      ^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n-error[E0723]: `impl Trait` in const fn is unstable\n-  --> $DIR/min_const_fn.rs:131:23\n-   |\n-LL | const fn no_rpit() -> impl std::fmt::Debug {}\n-   |                       ^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n-\n error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:132:23\n+  --> $DIR/min_const_fn.rs:129:23\n    |\n LL | const fn no_dyn_trait(_x: &dyn std::fmt::Debug) {}\n    |                       ^^\n@@ -260,7 +242,7 @@ LL | const fn no_dyn_trait(_x: &dyn std::fmt::Debug) {}\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:133:32\n+  --> $DIR/min_const_fn.rs:130:32\n    |\n LL | const fn no_dyn_trait_ret() -> &'static dyn std::fmt::Debug { &() }\n    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -269,7 +251,7 @@ LL | const fn no_dyn_trait_ret() -> &'static dyn std::fmt::Debug { &() }\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:138:41\n+  --> $DIR/min_const_fn.rs:135:41\n    |\n LL | const fn really_no_traits_i_mean_it() { (&() as &dyn std::fmt::Debug, ()).1 }\n    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -278,7 +260,7 @@ LL | const fn really_no_traits_i_mean_it() { (&() as &dyn std::fmt::Debug, ()).1\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: function pointers in const fn are unstable\n-  --> $DIR/min_const_fn.rs:141:21\n+  --> $DIR/min_const_fn.rs:138:21\n    |\n LL | const fn no_fn_ptrs(_x: fn()) {}\n    |                     ^^\n@@ -287,15 +269,15 @@ LL | const fn no_fn_ptrs(_x: fn()) {}\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: function pointers in const fn are unstable\n-  --> $DIR/min_const_fn.rs:143:27\n+  --> $DIR/min_const_fn.rs:140:27\n    |\n LL | const fn no_fn_ptrs2() -> fn() { fn foo() {} foo }\n    |                           ^^^^\n    |\n    = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n-error: aborting due to 34 previous errors\n+error: aborting due to 32 previous errors\n \n Some errors have detailed explanations: E0493, E0723.\n For more information about an error, try `rustc --explain E0493`."}, {"sha": "9cc9b69ac0b6c750c4d02ba776edd077dfb318b3", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_impl_trait.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/93ac5bc7de2b47f8848275254a0e327269ee5f06/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93ac5bc7de2b47f8848275254a0e327269ee5f06/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_impl_trait.rs?ref=93ac5bc7de2b47f8848275254a0e327269ee5f06", "patch": "@@ -0,0 +1,9 @@\n+struct AlanTuring<T>(T);\n+const fn no_rpit2() -> AlanTuring<impl std::fmt::Debug> {\n+    //~^ ERROR `impl Trait` in const fn is unstable\n+    AlanTuring(0)\n+}\n+\n+const fn no_rpit() -> impl std::fmt::Debug {} //~ ERROR `impl Trait` in const fn is unstable\n+\n+fn main() {}"}, {"sha": "a62a340332db288547b7a5ac7880af636126b28d", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_impl_trait.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/93ac5bc7de2b47f8848275254a0e327269ee5f06/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_impl_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93ac5bc7de2b47f8848275254a0e327269ee5f06/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_impl_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_impl_trait.stderr?ref=93ac5bc7de2b47f8848275254a0e327269ee5f06", "patch": "@@ -0,0 +1,21 @@\n+error[E0723]: `impl Trait` in const fn is unstable\n+  --> $DIR/min_const_fn_impl_trait.rs:2:24\n+   |\n+LL | const fn no_rpit2() -> AlanTuring<impl std::fmt::Debug> {\n+   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n+\n+error[E0723]: `impl Trait` in const fn is unstable\n+  --> $DIR/min_const_fn_impl_trait.rs:7:23\n+   |\n+LL | const fn no_rpit() -> impl std::fmt::Debug {}\n+   |                       ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0723`."}, {"sha": "f6a92b0d0bfb53f7b4edd6a2e9f256058b90977c", "filename": "src/test/ui/feature-gates/feature-gate-member-constraints.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/93ac5bc7de2b47f8848275254a0e327269ee5f06/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-member-constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93ac5bc7de2b47f8848275254a0e327269ee5f06/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-member-constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-member-constraints.rs?ref=93ac5bc7de2b47f8848275254a0e327269ee5f06", "patch": "@@ -1,9 +1,10 @@\n-trait Trait<'a, 'b> { }\n+trait Trait<'a, 'b> {}\n impl<T> Trait<'_, '_> for T {}\n \n fn foo<'a, 'b>(x: &'a u32, y: &'b u32) -> impl Trait<'a, 'b> {\n     //~^ ERROR ambiguous lifetime bound\n+    //~| ERROR ambiguous lifetime bound\n     (x, y)\n }\n \n-fn main() { }\n+fn main() {}"}, {"sha": "c2ec7ae16a3a6a97f1008362a5b64ff38486baa8", "filename": "src/test/ui/feature-gates/feature-gate-member-constraints.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/93ac5bc7de2b47f8848275254a0e327269ee5f06/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-member-constraints.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93ac5bc7de2b47f8848275254a0e327269ee5f06/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-member-constraints.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-member-constraints.stderr?ref=93ac5bc7de2b47f8848275254a0e327269ee5f06", "patch": "@@ -6,5 +6,13 @@ LL | fn foo<'a, 'b>(x: &'a u32, y: &'b u32) -> impl Trait<'a, 'b> {\n    |\n    = help: add #![feature(member_constraints)] to the crate attributes to enable\n \n-error: aborting due to previous error\n+error: ambiguous lifetime bound in `impl Trait`\n+  --> $DIR/feature-gate-member-constraints.rs:4:43\n+   |\n+LL | fn foo<'a, 'b>(x: &'a u32, y: &'b u32) -> impl Trait<'a, 'b> {\n+   |                                           ^^^^^^^^^^^^^^^^^^ the elided lifetimes here do not outlive one another\n+   |\n+   = help: add #![feature(member_constraints)] to the crate attributes to enable\n+\n+error: aborting due to 2 previous errors\n "}, {"sha": "981fad57b0fffb26fd8e81166ba75e55cae8bd4d", "filename": "src/test/ui/impl-trait/auto-trait-leak.stderr", "status": "modified", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/93ac5bc7de2b47f8848275254a0e327269ee5f06/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93ac5bc7de2b47f8848275254a0e327269ee5f06/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr?ref=93ac5bc7de2b47f8848275254a0e327269ee5f06", "patch": "@@ -4,9 +4,34 @@ error[E0391]: cycle detected when processing `cycle1::{{opaque}}#0`\n LL | fn cycle1() -> impl Clone {\n    |                ^^^^^^^^^^\n    |\n+note: ...which requires borrow-checking `cycle1`...\n+  --> $DIR/auto-trait-leak.rs:12:1\n+   |\n+LL | fn cycle1() -> impl Clone {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: ...which requires processing `cycle1`...\n+  --> $DIR/auto-trait-leak.rs:12:1\n+   |\n+LL | fn cycle1() -> impl Clone {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...which requires processing `cycle1`...\n   --> $DIR/auto-trait-leak.rs:12:1\n    |\n+LL | fn cycle1() -> impl Clone {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: ...which requires unsafety-checking `cycle1`...\n+  --> $DIR/auto-trait-leak.rs:12:1\n+   |\n+LL | fn cycle1() -> impl Clone {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: ...which requires building MIR for...\n+  --> $DIR/auto-trait-leak.rs:12:1\n+   |\n+LL | fn cycle1() -> impl Clone {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: ...which requires type-checking `cycle1`...\n+  --> $DIR/auto-trait-leak.rs:12:1\n+   |\n LL | fn cycle1() -> impl Clone {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: ...which requires evaluating trait selection obligation `impl std::clone::Clone: std::marker::Send`...\n@@ -15,9 +40,34 @@ note: ...which requires processing `cycle2::{{opaque}}#0`...\n    |\n LL | fn cycle2() -> impl Clone {\n    |                ^^^^^^^^^^\n+note: ...which requires borrow-checking `cycle2`...\n+  --> $DIR/auto-trait-leak.rs:21:1\n+   |\n+LL | fn cycle2() -> impl Clone {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...which requires processing `cycle2`...\n   --> $DIR/auto-trait-leak.rs:22:1\n    |\n+LL | fn cycle2() -> impl Clone {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: ...which requires processing `cycle2`...\n+  --> $DIR/auto-trait-leak.rs:21:1\n+   |\n+LL | fn cycle2() -> impl Clone {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: ...which requires unsafety-checking `cycle2`...\n+  --> $DIR/auto-trait-leak.rs:21:1\n+   |\n+LL | fn cycle2() -> impl Clone {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: ...which requires building MIR for...\n+  --> $DIR/auto-trait-leak.rs:21:1\n+   |\n+LL | fn cycle2() -> impl Clone {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: ...which requires type-checking `cycle2`...\n+  --> $DIR/auto-trait-leak.rs:21:1\n+   |\n LL | fn cycle2() -> impl Clone {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: ...which requires evaluating trait selection obligation `impl std::clone::Clone: std::marker::Send`...\n@@ -40,9 +90,34 @@ error[E0391]: cycle detected when processing `cycle1::{{opaque}}#0`\n LL | fn cycle1() -> impl Clone {\n    |                ^^^^^^^^^^\n    |\n+note: ...which requires borrow-checking `cycle1`...\n+  --> $DIR/auto-trait-leak.rs:12:1\n+   |\n+LL | fn cycle1() -> impl Clone {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: ...which requires processing `cycle1`...\n+  --> $DIR/auto-trait-leak.rs:12:1\n+   |\n+LL | fn cycle1() -> impl Clone {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...which requires processing `cycle1`...\n   --> $DIR/auto-trait-leak.rs:12:1\n    |\n+LL | fn cycle1() -> impl Clone {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: ...which requires unsafety-checking `cycle1`...\n+  --> $DIR/auto-trait-leak.rs:12:1\n+   |\n+LL | fn cycle1() -> impl Clone {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: ...which requires building MIR for...\n+  --> $DIR/auto-trait-leak.rs:12:1\n+   |\n+LL | fn cycle1() -> impl Clone {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: ...which requires type-checking `cycle1`...\n+  --> $DIR/auto-trait-leak.rs:12:1\n+   |\n LL | fn cycle1() -> impl Clone {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: ...which requires evaluating trait selection obligation `impl std::clone::Clone: std::marker::Send`...\n@@ -51,6 +126,11 @@ note: ...which requires processing `cycle2::{{opaque}}#0`...\n    |\n LL | fn cycle2() -> impl Clone {\n    |                ^^^^^^^^^^\n+note: ...which requires borrow-checking `cycle2`...\n+  --> $DIR/auto-trait-leak.rs:21:1\n+   |\n+LL | fn cycle2() -> impl Clone {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...which requires processing `cycle2`...\n   --> $DIR/auto-trait-leak.rs:22:1\n    |\n@@ -89,6 +169,26 @@ LL | fn cycle2() -> impl Clone {\n note: ...which requires processing `cycle2`...\n   --> $DIR/auto-trait-leak.rs:22:1\n    |\n+LL | fn cycle2() -> impl Clone {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: ...which requires processing `cycle2`...\n+  --> $DIR/auto-trait-leak.rs:21:1\n+   |\n+LL | fn cycle2() -> impl Clone {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: ...which requires unsafety-checking `cycle2`...\n+  --> $DIR/auto-trait-leak.rs:21:1\n+   |\n+LL | fn cycle2() -> impl Clone {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: ...which requires building MIR for...\n+  --> $DIR/auto-trait-leak.rs:21:1\n+   |\n+LL | fn cycle2() -> impl Clone {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: ...which requires type-checking `cycle2`...\n+  --> $DIR/auto-trait-leak.rs:21:1\n+   |\n LL | fn cycle2() -> impl Clone {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: ...which again requires processing `cycle1::{{opaque}}#0`, completing the cycle"}, {"sha": "3cc537440977c09f96c24c6765d5f1d979d14f60", "filename": "src/test/ui/impl-trait/recursive-impl-trait-type-direct.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/93ac5bc7de2b47f8848275254a0e327269ee5f06/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type-direct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93ac5bc7de2b47f8848275254a0e327269ee5f06/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type-direct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type-direct.rs?ref=93ac5bc7de2b47f8848275254a0e327269ee5f06", "patch": "@@ -1,6 +1,9 @@\n // Test that an `impl Trait` type that expands to itself is an error.\n \n-fn test() -> impl Sized { //~ ERROR E0720\n+#![allow(unconditional_recursion)]\n+\n+fn test() -> impl Sized {\n+    //~^ ERROR E0720\n     test()\n }\n "}, {"sha": "5a95e2969d1b0aa0e36cdac5b1498ba52959d2e8", "filename": "src/test/ui/impl-trait/recursive-impl-trait-type-direct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93ac5bc7de2b47f8848275254a0e327269ee5f06/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type-direct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93ac5bc7de2b47f8848275254a0e327269ee5f06/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type-direct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type-direct.stderr?ref=93ac5bc7de2b47f8848275254a0e327269ee5f06", "patch": "@@ -1,5 +1,5 @@\n error[E0720]: opaque type expands to a recursive type\n-  --> $DIR/recursive-impl-trait-type-direct.rs:3:14\n+  --> $DIR/recursive-impl-trait-type-direct.rs:5:14\n    |\n LL | fn test() -> impl Sized {\n    |              ^^^^^^^^^^ expands to a recursive type"}, {"sha": "e3c621f0c57424357bc30d7885f70c75b453c683", "filename": "src/test/ui/impl-trait/recursive-impl-trait-type-indirect.rs", "status": "modified", "additions": 42, "deletions": 23, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/93ac5bc7de2b47f8848275254a0e327269ee5f06/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type-indirect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93ac5bc7de2b47f8848275254a0e327269ee5f06/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type-indirect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type-indirect.rs?ref=93ac5bc7de2b47f8848275254a0e327269ee5f06", "patch": "@@ -2,75 +2,94 @@\n // otherwise forbidden.\n \n #![feature(generators)]\n+#![allow(unconditional_recursion)]\n \n-fn option(i: i32) -> impl Sized { //~ ERROR\n-    if i < 0 {\n-        None\n-    } else {\n-        Some((option(i - 1), i))\n-    }\n+fn option(i: i32) -> impl Sized {\n+    //~^ ERROR\n+    if i < 0 { None } else { Some((option(i - 1), i)) }\n }\n \n-fn tuple() -> impl Sized { //~ ERROR\n+fn tuple() -> impl Sized {\n+    //~^ ERROR\n     (tuple(),)\n }\n \n-fn array() -> impl Sized { //~ ERROR\n+fn array() -> impl Sized {\n+    //~^ ERROR\n     [array()]\n }\n \n-fn ptr() -> impl Sized { //~ ERROR\n+fn ptr() -> impl Sized {\n+    //~^ ERROR\n     &ptr() as *const _\n }\n \n-fn fn_ptr() -> impl Sized { //~ ERROR\n+fn fn_ptr() -> impl Sized {\n+    //~^ ERROR\n     fn_ptr as fn() -> _\n }\n \n-fn closure_capture() -> impl Sized { //~ ERROR\n+fn closure_capture() -> impl Sized {\n+    //~^ ERROR\n     let x = closure_capture();\n-    move || { x; }\n+    move || {\n+        x;\n+    }\n }\n \n-fn closure_ref_capture() -> impl Sized { //~ ERROR\n+fn closure_ref_capture() -> impl Sized {\n+    //~^ ERROR\n     let x = closure_ref_capture();\n-    move || { &x; }\n+    move || {\n+        &x;\n+    }\n }\n \n-fn closure_sig() -> impl Sized { //~ ERROR\n+fn closure_sig() -> impl Sized {\n+    //~^ ERROR\n     || closure_sig()\n }\n \n-fn generator_sig() -> impl Sized { //~ ERROR\n+fn generator_sig() -> impl Sized {\n+    //~^ ERROR\n     || generator_sig()\n }\n \n-fn generator_capture() -> impl Sized { //~ ERROR\n+fn generator_capture() -> impl Sized {\n+    //~^ ERROR\n     let x = generator_capture();\n-    move || { yield; x; }\n+    move || {\n+        yield;\n+        x;\n+    }\n }\n \n-fn substs_change<T>() -> impl Sized { //~ ERROR\n+fn substs_change<T: 'static>() -> impl Sized {\n+    //~^ ERROR\n     (substs_change::<&T>(),)\n }\n \n-fn generator_hold() -> impl Sized { //~ ERROR\n+fn generator_hold() -> impl Sized {\n+    //~^ ERROR\n     move || {\n         let x = generator_hold();\n         yield;\n         x;\n     }\n }\n \n-fn use_fn_ptr() -> impl Sized { // OK, error already reported\n+fn use_fn_ptr() -> impl Sized {\n+    // OK, error already reported\n     fn_ptr()\n }\n \n-fn mutual_recursion() -> impl Sync { //~ ERROR\n+fn mutual_recursion() -> impl Sync {\n+    //~^ ERROR\n     mutual_recursion_b()\n }\n \n-fn mutual_recursion_b() -> impl Sized { //~ ERROR\n+fn mutual_recursion_b() -> impl Sized {\n+    //~^ ERROR\n     mutual_recursion()\n }\n "}, {"sha": "6573b00870c5bcc8c2cd2bd9c0a38e9de566113b", "filename": "src/test/ui/impl-trait/recursive-impl-trait-type-indirect.stderr", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/93ac5bc7de2b47f8848275254a0e327269ee5f06/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type-indirect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93ac5bc7de2b47f8848275254a0e327269ee5f06/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type-indirect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type-indirect.stderr?ref=93ac5bc7de2b47f8848275254a0e327269ee5f06", "patch": "@@ -1,21 +1,21 @@\n error[E0720]: opaque type expands to a recursive type\n-  --> $DIR/recursive-impl-trait-type-indirect.rs:6:22\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:7:22\n    |\n LL | fn option(i: i32) -> impl Sized {\n    |                      ^^^^^^^^^^ expands to a recursive type\n    |\n    = note: expanded type is `std::option::Option<(impl Sized, i32)>`\n \n error[E0720]: opaque type expands to a recursive type\n-  --> $DIR/recursive-impl-trait-type-indirect.rs:14:15\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:12:15\n    |\n LL | fn tuple() -> impl Sized {\n    |               ^^^^^^^^^^ expands to a recursive type\n    |\n    = note: expanded type is `(impl Sized,)`\n \n error[E0720]: opaque type expands to a recursive type\n-  --> $DIR/recursive-impl-trait-type-indirect.rs:18:15\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:17:15\n    |\n LL | fn array() -> impl Sized {\n    |               ^^^^^^^^^^ expands to a recursive type\n@@ -31,79 +31,79 @@ LL | fn ptr() -> impl Sized {\n    = note: expanded type is `*const impl Sized`\n \n error[E0720]: opaque type expands to a recursive type\n-  --> $DIR/recursive-impl-trait-type-indirect.rs:26:16\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:27:16\n    |\n LL | fn fn_ptr() -> impl Sized {\n    |                ^^^^^^^^^^ expands to a recursive type\n    |\n    = note: expanded type is `fn() -> impl Sized`\n \n error[E0720]: opaque type expands to a recursive type\n-  --> $DIR/recursive-impl-trait-type-indirect.rs:30:25\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:32:25\n    |\n LL | fn closure_capture() -> impl Sized {\n    |                         ^^^^^^^^^^ expands to a recursive type\n    |\n-   = note: expanded type is `[closure@$DIR/recursive-impl-trait-type-indirect.rs:32:5: 32:19 x:impl Sized]`\n+   = note: expanded type is `[closure@$DIR/recursive-impl-trait-type-indirect.rs:35:5: 37:6 x:impl Sized]`\n \n error[E0720]: opaque type expands to a recursive type\n-  --> $DIR/recursive-impl-trait-type-indirect.rs:35:29\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:40:29\n    |\n LL | fn closure_ref_capture() -> impl Sized {\n    |                             ^^^^^^^^^^ expands to a recursive type\n    |\n-   = note: expanded type is `[closure@$DIR/recursive-impl-trait-type-indirect.rs:37:5: 37:20 x:impl Sized]`\n+   = note: expanded type is `[closure@$DIR/recursive-impl-trait-type-indirect.rs:43:5: 45:6 x:impl Sized]`\n \n error[E0720]: opaque type expands to a recursive type\n-  --> $DIR/recursive-impl-trait-type-indirect.rs:40:21\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:48:21\n    |\n LL | fn closure_sig() -> impl Sized {\n    |                     ^^^^^^^^^^ expands to a recursive type\n    |\n-   = note: expanded type is `[closure@$DIR/recursive-impl-trait-type-indirect.rs:41:5: 41:21]`\n+   = note: expanded type is `[closure@$DIR/recursive-impl-trait-type-indirect.rs:50:5: 50:21]`\n \n error[E0720]: opaque type expands to a recursive type\n-  --> $DIR/recursive-impl-trait-type-indirect.rs:44:23\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:53:23\n    |\n LL | fn generator_sig() -> impl Sized {\n    |                       ^^^^^^^^^^ expands to a recursive type\n    |\n-   = note: expanded type is `[closure@$DIR/recursive-impl-trait-type-indirect.rs:45:5: 45:23]`\n+   = note: expanded type is `[closure@$DIR/recursive-impl-trait-type-indirect.rs:55:5: 55:23]`\n \n error[E0720]: opaque type expands to a recursive type\n-  --> $DIR/recursive-impl-trait-type-indirect.rs:48:27\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:58:27\n    |\n LL | fn generator_capture() -> impl Sized {\n    |                           ^^^^^^^^^^ expands to a recursive type\n    |\n-   = note: expanded type is `[generator@$DIR/recursive-impl-trait-type-indirect.rs:50:5: 50:26 x:impl Sized {()}]`\n+   = note: expanded type is `[generator@$DIR/recursive-impl-trait-type-indirect.rs:61:5: 64:6 x:impl Sized {()}]`\n \n error[E0720]: opaque type expands to a recursive type\n-  --> $DIR/recursive-impl-trait-type-indirect.rs:53:26\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:67:35\n    |\n-LL | fn substs_change<T>() -> impl Sized {\n-   |                          ^^^^^^^^^^ expands to a recursive type\n+LL | fn substs_change<T: 'static>() -> impl Sized {\n+   |                                   ^^^^^^^^^^ expands to a recursive type\n    |\n    = note: expanded type is `(impl Sized,)`\n \n error[E0720]: opaque type expands to a recursive type\n-  --> $DIR/recursive-impl-trait-type-indirect.rs:57:24\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:72:24\n    |\n LL | fn generator_hold() -> impl Sized {\n    |                        ^^^^^^^^^^ expands to a recursive type\n    |\n-   = note: expanded type is `[generator@$DIR/recursive-impl-trait-type-indirect.rs:58:5: 62:6 {impl Sized, ()}]`\n+   = note: expanded type is `[generator@$DIR/recursive-impl-trait-type-indirect.rs:74:5: 78:6 {impl Sized, ()}]`\n \n error[E0720]: opaque type expands to a recursive type\n-  --> $DIR/recursive-impl-trait-type-indirect.rs:69:26\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:86:26\n    |\n LL | fn mutual_recursion() -> impl Sync {\n    |                          ^^^^^^^^^ expands to a recursive type\n    |\n    = note: type resolves to itself\n \n error[E0720]: opaque type expands to a recursive type\n-  --> $DIR/recursive-impl-trait-type-indirect.rs:73:28\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:91:28\n    |\n LL | fn mutual_recursion_b() -> impl Sized {\n    |                            ^^^^^^^^^^ expands to a recursive type"}, {"sha": "5c7ed9d52194010d90e44b2ea971a0649e94554b", "filename": "src/test/ui/lint/lint-unused-mut-variables.rs", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/93ac5bc7de2b47f8848275254a0e327269ee5f06/src%2Ftest%2Fui%2Flint%2Flint-unused-mut-variables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93ac5bc7de2b47f8848275254a0e327269ee5f06/src%2Ftest%2Fui%2Flint%2Flint-unused-mut-variables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-unused-mut-variables.rs?ref=93ac5bc7de2b47f8848275254a0e327269ee5f06", "patch": "@@ -2,17 +2,17 @@\n \n // Exercise the unused_mut attribute in some positive and negative cases\n \n-#![deny(unused_mut)]\n+#![warn(unused_mut)]\n #![feature(async_closure, raw_ref_op)]\n \n async fn baz_async(\n     mut a: i32,\n-    //~^ ERROR: variable does not need to be mutable\n+    //~^ WARN: variable does not need to be mutable\n     #[allow(unused_mut)] mut b: i32,\n ) {}\n fn baz(\n     mut a: i32,\n-    //~^ ERROR: variable does not need to be mutable\n+    //~^ WARN: variable does not need to be mutable\n     #[allow(unused_mut)] mut b: i32,\n     #[allow(unused_mut)] (mut c, d): (i32, i32)\n ) {}\n@@ -21,13 +21,13 @@ struct RefStruct {}\n impl RefStruct {\n     async fn baz_async(\n         mut a: i32,\n-        //~^ ERROR: variable does not need to be mutable\n+        //~^ WARN: variable does not need to be mutable\n         #[allow(unused_mut)] mut b: i32,\n     ) {}\n     fn baz(\n         &self,\n         mut a: i32,\n-        //~^ ERROR: variable does not need to be mutable\n+        //~^ WARN: variable does not need to be mutable\n         #[allow(unused_mut)] mut b: i32,\n         #[allow(unused_mut)] (mut c, d): (i32, i32)\n     ) {}\n@@ -37,7 +37,7 @@ trait RefTrait {\n     fn baz(\n         &self,\n         mut a: i32,\n-        //~^ ERROR: variable does not need to be mutable\n+        //~^ WARN: variable does not need to be mutable\n         #[allow(unused_mut)] mut b: i32,\n         #[allow(unused_mut)] (mut c, d): (i32, i32)\n     ) {}\n@@ -46,7 +46,7 @@ impl RefTrait for () {\n     fn baz(\n         &self,\n         mut a: i32,\n-        //~^ ERROR: variable does not need to be mutable\n+        //~^ WARN: variable does not need to be mutable\n         #[allow(unused_mut)] mut b: i32,\n         #[allow(unused_mut)] (mut c, d): (i32, i32)\n     ) {}\n@@ -55,32 +55,32 @@ impl RefTrait for () {\n fn main() {\n     let _ = async move |\n         mut a: i32,\n-        //~^ ERROR: variable does not need to be mutable\n+        //~^ WARN: variable does not need to be mutable\n         #[allow(unused_mut)] mut b: i32,\n     | {};\n     let _ = |\n         mut a: i32,\n-        //~^ ERROR: variable does not need to be mutable\n+        //~^ WARN: variable does not need to be mutable\n         #[allow(unused_mut)] mut b: i32,\n         #[allow(unused_mut)] (mut c, d): (i32, i32)\n     | {};\n \n     // negative cases\n-    let mut a = 3; //~ ERROR: variable does not need to be mutable\n+    let mut a = 3; //~ WARN: variable does not need to be mutable\n \n-    let mut a = 2; //~ ERROR: variable does not need to be mutable\n+    let mut a = 2; //~ WARN: variable does not need to be mutable\n \n-    let mut b = 3; //~ ERROR: variable does not need to be mutable\n+    let mut b = 3; //~ WARN: variable does not need to be mutable\n \n-    let mut a = vec![3]; //~ ERROR: variable does not need to be mutable\n+    let mut a = vec![3]; //~ WARN: variable does not need to be mutable\n \n-    let (mut a, b) = (1, 2); //~ ERROR: variable does not need to be mutable\n+    let (mut a, b) = (1, 2); //~ WARN: variable does not need to be mutable\n \n-    let mut a; //~ ERROR: variable does not need to be mutable\n+    let mut a; //~ WARN: variable does not need to be mutable\n \n     a = 3;\n \n-    let mut b; //~ ERROR: variable does not need to be mutable\n+    let mut b; //~ WARN: variable does not need to be mutable\n \n     if true {\n         b = 3;\n@@ -89,44 +89,44 @@ fn main() {\n     }\n \n     match 30 {\n-        mut x => {} //~ ERROR: variable does not need to be mutable\n+        mut x => {} //~ WARN: variable does not need to be mutable\n \n     }\n     match (30, 2) {\n-      (mut x, 1) | //~ ERROR: variable does not need to be mutable\n+      (mut x, 1) | //~ WARN: variable does not need to be mutable\n \n       (mut x, 2) |\n       (mut x, 3) => {\n       }\n       _ => {}\n     }\n \n-    let x = |mut y: isize| 10; //~ ERROR: variable does not need to be mutable\n+    let x = |mut y: isize| 10; //~ WARN: variable does not need to be mutable\n \n-    fn what(mut foo: isize) {} //~ ERROR: variable does not need to be mutable\n+    fn what(mut foo: isize) {} //~ WARN: variable does not need to be mutable\n \n \n-    let mut a = &mut 5; //~ ERROR: variable does not need to be mutable\n+    let mut a = &mut 5; //~ WARN: variable does not need to be mutable\n \n     *a = 4;\n \n     let mut a = 5;\n-    let mut b = (&mut a,); //~ ERROR: variable does not need to be mutable\n+    let mut b = (&mut a,); //~ WARN: variable does not need to be mutable\n     *b.0 = 4;\n \n-    let mut x = &mut 1; //~ ERROR: variable does not need to be mutable\n+    let mut x = &mut 1; //~ WARN: variable does not need to be mutable\n \n     let mut f = || {\n       *x += 1;\n     };\n     f();\n \n     fn mut_ref_arg(mut arg : &mut [u8]) -> &mut [u8] {\n-        &mut arg[..] //~^ ERROR: variable does not need to be mutable\n+        &mut arg[..] //~^ WARN: variable does not need to be mutable\n \n     }\n \n-    let mut v : &mut Vec<()> = &mut vec![]; //~ ERROR: variable does not need to be mutable\n+    let mut v : &mut Vec<()> = &mut vec![]; //~ WARN: variable does not need to be mutable\n \n     v.push(());\n \n@@ -181,7 +181,7 @@ fn main() {\n     let mut raw_address_of_mut = 1; // OK\n     let mut_ptr = &raw mut raw_address_of_mut;\n \n-    let mut raw_address_of_const = 1; //~ ERROR: variable does not need to be mutable\n+    let mut raw_address_of_const = 1; //~ WARN: variable does not need to be mutable\n     let const_ptr = &raw const raw_address_of_const;\n }\n "}, {"sha": "b56b3c7569f71cf796bc1a9d87ab8459fb655ca5", "filename": "src/test/ui/lint/lint-unused-mut-variables.stderr", "status": "modified", "additions": 34, "deletions": 34, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/93ac5bc7de2b47f8848275254a0e327269ee5f06/src%2Ftest%2Fui%2Flint%2Flint-unused-mut-variables.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93ac5bc7de2b47f8848275254a0e327269ee5f06/src%2Ftest%2Fui%2Flint%2Flint-unused-mut-variables.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-unused-mut-variables.stderr?ref=93ac5bc7de2b47f8848275254a0e327269ee5f06", "patch": "@@ -1,4 +1,4 @@\n-error: variable does not need to be mutable\n+warning: variable does not need to be mutable\n   --> $DIR/lint-unused-mut-variables.rs:9:5\n    |\n LL |     mut a: i32,\n@@ -9,194 +9,194 @@ LL |     mut a: i32,\n note: the lint level is defined here\n   --> $DIR/lint-unused-mut-variables.rs:5:9\n    |\n-LL | #![deny(unused_mut)]\n+LL | #![warn(unused_mut)]\n    |         ^^^^^^^^^^\n \n-error: variable does not need to be mutable\n-  --> $DIR/lint-unused-mut-variables.rs:14:5\n-   |\n-LL |     mut a: i32,\n-   |     ----^\n-   |     |\n-   |     help: remove this `mut`\n-\n-error: variable does not need to be mutable\n+warning: variable does not need to be mutable\n   --> $DIR/lint-unused-mut-variables.rs:23:9\n    |\n LL |         mut a: i32,\n    |         ----^\n    |         |\n    |         help: remove this `mut`\n \n-error: variable does not need to be mutable\n+warning: variable does not need to be mutable\n+  --> $DIR/lint-unused-mut-variables.rs:14:5\n+   |\n+LL |     mut a: i32,\n+   |     ----^\n+   |     |\n+   |     help: remove this `mut`\n+\n+warning: variable does not need to be mutable\n   --> $DIR/lint-unused-mut-variables.rs:29:9\n    |\n LL |         mut a: i32,\n    |         ----^\n    |         |\n    |         help: remove this `mut`\n \n-error: variable does not need to be mutable\n+warning: variable does not need to be mutable\n   --> $DIR/lint-unused-mut-variables.rs:39:9\n    |\n LL |         mut a: i32,\n    |         ----^\n    |         |\n    |         help: remove this `mut`\n \n-error: variable does not need to be mutable\n+warning: variable does not need to be mutable\n   --> $DIR/lint-unused-mut-variables.rs:48:9\n    |\n LL |         mut a: i32,\n    |         ----^\n    |         |\n    |         help: remove this `mut`\n \n-error: variable does not need to be mutable\n+warning: variable does not need to be mutable\n   --> $DIR/lint-unused-mut-variables.rs:57:9\n    |\n LL |         mut a: i32,\n    |         ----^\n    |         |\n    |         help: remove this `mut`\n \n-error: variable does not need to be mutable\n+warning: variable does not need to be mutable\n   --> $DIR/lint-unused-mut-variables.rs:62:9\n    |\n LL |         mut a: i32,\n    |         ----^\n    |         |\n    |         help: remove this `mut`\n \n-error: variable does not need to be mutable\n+warning: variable does not need to be mutable\n   --> $DIR/lint-unused-mut-variables.rs:104:14\n    |\n LL |     let x = |mut y: isize| 10;\n    |              ----^\n    |              |\n    |              help: remove this `mut`\n \n-error: variable does not need to be mutable\n+warning: variable does not need to be mutable\n   --> $DIR/lint-unused-mut-variables.rs:69:9\n    |\n LL |     let mut a = 3;\n    |         ----^\n    |         |\n    |         help: remove this `mut`\n \n-error: variable does not need to be mutable\n+warning: variable does not need to be mutable\n   --> $DIR/lint-unused-mut-variables.rs:71:9\n    |\n LL |     let mut a = 2;\n    |         ----^\n    |         |\n    |         help: remove this `mut`\n \n-error: variable does not need to be mutable\n+warning: variable does not need to be mutable\n   --> $DIR/lint-unused-mut-variables.rs:73:9\n    |\n LL |     let mut b = 3;\n    |         ----^\n    |         |\n    |         help: remove this `mut`\n \n-error: variable does not need to be mutable\n+warning: variable does not need to be mutable\n   --> $DIR/lint-unused-mut-variables.rs:75:9\n    |\n LL |     let mut a = vec![3];\n    |         ----^\n    |         |\n    |         help: remove this `mut`\n \n-error: variable does not need to be mutable\n+warning: variable does not need to be mutable\n   --> $DIR/lint-unused-mut-variables.rs:77:10\n    |\n LL |     let (mut a, b) = (1, 2);\n    |          ----^\n    |          |\n    |          help: remove this `mut`\n \n-error: variable does not need to be mutable\n+warning: variable does not need to be mutable\n   --> $DIR/lint-unused-mut-variables.rs:79:9\n    |\n LL |     let mut a;\n    |         ----^\n    |         |\n    |         help: remove this `mut`\n \n-error: variable does not need to be mutable\n+warning: variable does not need to be mutable\n   --> $DIR/lint-unused-mut-variables.rs:83:9\n    |\n LL |     let mut b;\n    |         ----^\n    |         |\n    |         help: remove this `mut`\n \n-error: variable does not need to be mutable\n+warning: variable does not need to be mutable\n   --> $DIR/lint-unused-mut-variables.rs:92:9\n    |\n LL |         mut x => {}\n    |         ----^\n    |         |\n    |         help: remove this `mut`\n \n-error: variable does not need to be mutable\n+warning: variable does not need to be mutable\n   --> $DIR/lint-unused-mut-variables.rs:96:8\n    |\n LL |       (mut x, 1) |\n    |        ----^\n    |        |\n    |        help: remove this `mut`\n \n-error: variable does not need to be mutable\n+warning: variable does not need to be mutable\n   --> $DIR/lint-unused-mut-variables.rs:109:9\n    |\n LL |     let mut a = &mut 5;\n    |         ----^\n    |         |\n    |         help: remove this `mut`\n \n-error: variable does not need to be mutable\n+warning: variable does not need to be mutable\n   --> $DIR/lint-unused-mut-variables.rs:114:9\n    |\n LL |     let mut b = (&mut a,);\n    |         ----^\n    |         |\n    |         help: remove this `mut`\n \n-error: variable does not need to be mutable\n+warning: variable does not need to be mutable\n   --> $DIR/lint-unused-mut-variables.rs:117:9\n    |\n LL |     let mut x = &mut 1;\n    |         ----^\n    |         |\n    |         help: remove this `mut`\n \n-error: variable does not need to be mutable\n+warning: variable does not need to be mutable\n   --> $DIR/lint-unused-mut-variables.rs:129:9\n    |\n LL |     let mut v : &mut Vec<()> = &mut vec![];\n    |         ----^\n    |         |\n    |         help: remove this `mut`\n \n-error: variable does not need to be mutable\n+warning: variable does not need to be mutable\n   --> $DIR/lint-unused-mut-variables.rs:184:9\n    |\n LL |     let mut raw_address_of_const = 1;\n    |         ----^^^^^^^^^^^^^^^^^^^^\n    |         |\n    |         help: remove this `mut`\n \n-error: variable does not need to be mutable\n+warning: variable does not need to be mutable\n   --> $DIR/lint-unused-mut-variables.rs:106:13\n    |\n LL |     fn what(mut foo: isize) {}\n    |             ----^^^\n    |             |\n    |             help: remove this `mut`\n \n-error: variable does not need to be mutable\n+warning: variable does not need to be mutable\n   --> $DIR/lint-unused-mut-variables.rs:124:20\n    |\n LL |     fn mut_ref_arg(mut arg : &mut [u8]) -> &mut [u8] {\n@@ -218,5 +218,5 @@ note: the lint level is defined here\n LL | #[deny(unused_mut)]\n    |        ^^^^^^^^^^\n \n-error: aborting due to 26 previous errors\n+error: aborting due to previous error\n "}, {"sha": "6cbb3069ecd4b88d2e6b142464b7489ac56e46d3", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use6.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/93ac5bc7de2b47f8848275254a0e327269ee5f06/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93ac5bc7de2b47f8848275254a0e327269ee5f06/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use6.rs?ref=93ac5bc7de2b47f8848275254a0e327269ee5f06", "patch": "@@ -7,11 +7,11 @@ fn main() {}\n // test that unused generic parameters are ok\n type Two<T, U> = impl Debug;\n \n-fn two<T: Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n+fn two<T: Copy + Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n     (t, t)\n }\n \n-fn three<T: Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n-//~^ concrete type differs from previous\n+fn three<T: Copy + Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n+    //~^ concrete type differs from previous\n     (u, t)\n }"}, {"sha": "7e81d362661bc9ac1f08901fd719a7ea232a22d1", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use6.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93ac5bc7de2b47f8848275254a0e327269ee5f06/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93ac5bc7de2b47f8848275254a0e327269ee5f06/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use6.stderr?ref=93ac5bc7de2b47f8848275254a0e327269ee5f06", "patch": "@@ -1,7 +1,7 @@\n error: concrete type differs from previous defining opaque type use\n   --> $DIR/generic_duplicate_param_use6.rs:14:1\n    |\n-LL | / fn three<T: Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n+LL | / fn three<T: Copy + Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n LL | |\n LL | |     (u, t)\n LL | | }\n@@ -10,7 +10,7 @@ LL | | }\n note: previous use here\n   --> $DIR/generic_duplicate_param_use6.rs:10:1\n    |\n-LL | / fn two<T: Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n+LL | / fn two<T: Copy + Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n LL | |     (t, t)\n LL | | }\n    | |_^"}, {"sha": "50eeff0b18fd44eb1252568f3733d31b0744f98c", "filename": "src/test/ui/type-alias-impl-trait/issue-52843-closure-constrain.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93ac5bc7de2b47f8848275254a0e327269ee5f06/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843-closure-constrain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93ac5bc7de2b47f8848275254a0e327269ee5f06/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843-closure-constrain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843-closure-constrain.rs?ref=93ac5bc7de2b47f8848275254a0e327269ee5f06", "patch": "@@ -7,7 +7,7 @@ use std::fmt::Debug;\n fn main() {\n     type Opaque = impl Debug;\n     fn _unused() -> Opaque { String::new() }\n-    //~^ ERROR: concrete type differs from previous defining opaque type use\n     let null = || -> Opaque { 0 };\n+    //~^ ERROR: concrete type differs from previous defining opaque type use\n     println!(\"{:?}\", null());\n }"}, {"sha": "1333b4c63d18ccb16a1028be06286476fdeb4c4b", "filename": "src/test/ui/type-alias-impl-trait/issue-52843-closure-constrain.stderr", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/93ac5bc7de2b47f8848275254a0e327269ee5f06/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843-closure-constrain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93ac5bc7de2b47f8848275254a0e327269ee5f06/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843-closure-constrain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843-closure-constrain.stderr?ref=93ac5bc7de2b47f8848275254a0e327269ee5f06", "patch": "@@ -1,20 +1,14 @@\n error: concrete type differs from previous defining opaque type use\n-  --> $DIR/issue-52843-closure-constrain.rs:9:5\n+  --> $DIR/issue-52843-closure-constrain.rs:10:16\n    |\n-LL |     fn _unused() -> Opaque { String::new() }\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `i32`, got `std::string::String`\n+LL |     let null = || -> Opaque { 0 };\n+   |                ^^^^^^^^^^^^^^^^^^ expected `std::string::String`, got `i32`\n    |\n note: previous use here\n-  --> $DIR/issue-52843-closure-constrain.rs:7:1\n+  --> $DIR/issue-52843-closure-constrain.rs:9:5\n    |\n-LL | / fn main() {\n-LL | |     type Opaque = impl Debug;\n-LL | |     fn _unused() -> Opaque { String::new() }\n-LL | |\n-LL | |     let null = || -> Opaque { 0 };\n-LL | |     println!(\"{:?}\", null());\n-LL | | }\n-   | |_^\n+LL |     fn _unused() -> Opaque { String::new() }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "73acc92172bad939ec780de90f15f4ae84ba0966", "filename": "src/test/ui/type-alias-impl-trait/issue-60564.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93ac5bc7de2b47f8848275254a0e327269ee5f06/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60564.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93ac5bc7de2b47f8848275254a0e327269ee5f06/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60564.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60564.rs?ref=93ac5bc7de2b47f8848275254a0e327269ee5f06", "patch": "@@ -8,7 +8,7 @@ trait IterBits {\n type IterBitsIter<T, E, I> = impl std::iter::Iterator<Item = I>;\n //~^ ERROR could not find defining uses\n \n-impl<T, E> IterBits for T\n+impl<T: Copy, E> IterBits for T\n where\n     T: std::ops::Shr<Output = T>\n         + std::ops::BitAnd<T, Output = T>"}]}