{"sha": "60f6cbd0028c61bcca181318f48cdf0c6be61231", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwZjZjYmQwMDI4YzYxYmNjYTE4MTMxOGY0OGNkZjBjNmJlNjEyMzE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2019-03-31T21:56:56Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2019-04-01T12:31:48Z"}, "message": "wasi: Use raw syscalls for stdio\n\nI've since learned that the mapping between libc fds and wasi fds are\nexpected to be one-to-one, so we can use the raw syscalls for writing to\nstdout/stderr and reading from stdin! This should help ensure that we\ndon't depend on a C library too unnecessarily.", "tree": {"sha": "65010d199b9a0ece6c8aa57f99ea6b2d06027122", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/65010d199b9a0ece6c8aa57f99ea6b2d06027122"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/60f6cbd0028c61bcca181318f48cdf0c6be61231", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/60f6cbd0028c61bcca181318f48cdf0c6be61231", "html_url": "https://github.com/rust-lang/rust/commit/60f6cbd0028c61bcca181318f48cdf0c6be61231", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/60f6cbd0028c61bcca181318f48cdf0c6be61231/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "382f9a7a3d15580c15531428f39bf47f55093d42", "url": "https://api.github.com/repos/rust-lang/rust/commits/382f9a7a3d15580c15531428f39bf47f55093d42", "html_url": "https://github.com/rust-lang/rust/commit/382f9a7a3d15580c15531428f39bf47f55093d42"}], "stats": {"total": 23, "additions": 9, "deletions": 14}, "files": [{"sha": "192947886668f64457e2598cb3dd3eeaf42b2ee6", "filename": "src/libstd/sys/wasi/stdio.rs", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/60f6cbd0028c61bcca181318f48cdf0c6be61231/src%2Flibstd%2Fsys%2Fwasi%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60f6cbd0028c61bcca181318f48cdf0c6be61231/src%2Flibstd%2Fsys%2Fwasi%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasi%2Fstdio.rs?ref=60f6cbd0028c61bcca181318f48cdf0c6be61231", "patch": "@@ -1,6 +1,7 @@\n-use crate::io;\n+use crate::io::{self, IoVec, IoVecMut};\n use crate::libc;\n-use crate::sys::cvt;\n+use crate::mem::ManuallyDrop;\n+use crate::sys::fd::WasiFd;\n \n pub struct Stdin;\n pub struct Stdout;\n@@ -12,10 +13,8 @@ impl Stdin {\n     }\n \n     pub fn read(&self, data: &mut [u8]) -> io::Result<usize> {\n-        let amt = cvt(unsafe {\n-            libc::read(libc::STDIN_FILENO, data.as_mut_ptr() as *mut _, data.len())\n-        })?;\n-        Ok(amt as usize)\n+        ManuallyDrop::new(unsafe { WasiFd::from_raw(libc::STDIN_FILENO as u32) })\n+            .read(&mut [IoVecMut::new(data)])\n     }\n }\n \n@@ -25,10 +24,8 @@ impl Stdout {\n     }\n \n     pub fn write(&self, data: &[u8]) -> io::Result<usize> {\n-        let amt = cvt(unsafe {\n-            libc::write(libc::STDOUT_FILENO, data.as_ptr() as *const _, data.len())\n-        })?;\n-        Ok(amt as usize)\n+        ManuallyDrop::new(unsafe { WasiFd::from_raw(libc::STDOUT_FILENO as u32) })\n+            .write(&[IoVec::new(data)])\n     }\n \n     pub fn flush(&self) -> io::Result<()> {\n@@ -42,10 +39,8 @@ impl Stderr {\n     }\n \n     pub fn write(&self, data: &[u8]) -> io::Result<usize> {\n-        let amt = cvt(unsafe {\n-            libc::write(libc::STDERR_FILENO, data.as_ptr() as *const _, data.len())\n-        })?;\n-        Ok(amt as usize)\n+        ManuallyDrop::new(unsafe { WasiFd::from_raw(libc::STDERR_FILENO as u32) })\n+            .write(&[IoVec::new(data)])\n     }\n \n     pub fn flush(&self) -> io::Result<()> {"}]}