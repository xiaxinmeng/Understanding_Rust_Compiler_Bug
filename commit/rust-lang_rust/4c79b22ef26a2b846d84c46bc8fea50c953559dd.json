{"sha": "4c79b22ef26a2b846d84c46bc8fea50c953559dd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjNzliMjJlZjI2YTJiODQ2ZDg0YzQ2YmM4ZmVhNTBjOTUzNTU5ZGQ=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-12-17T14:49:31Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-12-18T22:26:13Z"}, "message": "std::vec: remove .as_imm_buf, replaced by .as_ptr & .len.\n\nThere's no need for the restrictions of a closure with the above methods.", "tree": {"sha": "195c5edab1e773dcd7db4454b6d848a47d5a6249", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/195c5edab1e773dcd7db4454b6d848a47d5a6249"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c79b22ef26a2b846d84c46bc8fea50c953559dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c79b22ef26a2b846d84c46bc8fea50c953559dd", "html_url": "https://github.com/rust-lang/rust/commit/4c79b22ef26a2b846d84c46bc8fea50c953559dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c79b22ef26a2b846d84c46bc8fea50c953559dd/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac137f6dbe51429de203ea2e900b8bac01f466cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac137f6dbe51429de203ea2e900b8bac01f466cb", "html_url": "https://github.com/rust-lang/rust/commit/ac137f6dbe51429de203ea2e900b8bac01f466cb"}], "stats": {"total": 286, "additions": 119, "deletions": 167}, "files": [{"sha": "1153c3a6ef300b32433d8cebc532e6df9f816cce", "filename": "src/libextra/flate.rs", "status": "modified", "additions": 22, "deletions": 28, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/4c79b22ef26a2b846d84c46bc8fea50c953559dd/src%2Flibextra%2Fflate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c79b22ef26a2b846d84c46bc8fea50c953559dd/src%2Flibextra%2Fflate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fflate.rs?ref=4c79b22ef26a2b846d84c46bc8fea50c953559dd", "patch": "@@ -44,21 +44,18 @@ static TINFL_FLAG_PARSE_ZLIB_HEADER : c_int = 0x1; // parse zlib header and adle\n static TDEFL_WRITE_ZLIB_HEADER : c_int = 0x01000; // write zlib header and adler32 checksum\n \n fn deflate_bytes_internal(bytes: &[u8], flags: c_int) -> ~[u8] {\n-    bytes.as_imm_buf(|b, len| {\n-        unsafe {\n-            let mut outsz : size_t = 0;\n-            let res =\n-                rustrt::tdefl_compress_mem_to_heap(b as *c_void,\n-                                                   len as size_t,\n-                                                   &mut outsz,\n-                                                   flags);\n-            assert!(res as int != 0);\n+    unsafe {\n+        let mut outsz : size_t = 0;\n+        let res = rustrt::tdefl_compress_mem_to_heap(bytes.as_ptr() as *c_void,\n+                                                     bytes.len() as size_t,\n+                                                     &mut outsz,\n+                                                     flags);\n+        assert!(res as int != 0);\n             let out = vec::raw::from_buf_raw(res as *u8,\n                                              outsz as uint);\n-            libc::free(res);\n-            out\n-        }\n-    })\n+        libc::free(res);\n+        out\n+    }\n }\n \n pub fn deflate_bytes(bytes: &[u8]) -> ~[u8] {\n@@ -70,21 +67,18 @@ pub fn deflate_bytes_zlib(bytes: &[u8]) -> ~[u8] {\n }\n \n fn inflate_bytes_internal(bytes: &[u8], flags: c_int) -> ~[u8] {\n-    bytes.as_imm_buf(|b, len| {\n-        unsafe {\n-            let mut outsz : size_t = 0;\n-            let res =\n-                rustrt::tinfl_decompress_mem_to_heap(b as *c_void,\n-                                                     len as size_t,\n-                                                     &mut outsz,\n-                                                     flags);\n-            assert!(res as int != 0);\n-            let out = vec::raw::from_buf_raw(res as *u8,\n-                                            outsz as uint);\n-            libc::free(res);\n-            out\n-        }\n-    })\n+    unsafe {\n+        let mut outsz : size_t = 0;\n+        let res = rustrt::tinfl_decompress_mem_to_heap(bytes.as_ptr() as *c_void,\n+                                                       bytes.len() as size_t,\n+                                                       &mut outsz,\n+                                                       flags);\n+        assert!(res as int != 0);\n+        let out = vec::raw::from_buf_raw(res as *u8,\n+                                         outsz as uint);\n+        libc::free(res);\n+        out\n+    }\n }\n \n pub fn inflate_bytes(bytes: &[u8]) -> ~[u8] {"}, {"sha": "2e9687bb9c1f35b453fbb2d2a33a2fb6e5753b47", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c79b22ef26a2b846d84c46bc8fea50c953559dd/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c79b22ef26a2b846d84c46bc8fea50c953559dd/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=4c79b22ef26a2b846d84c46bc8fea50c953559dd", "patch": "@@ -354,9 +354,7 @@ pub mod write {\n             add(*arg);\n         }\n \n-        llvm_args.as_imm_buf(|p, len| {\n-            llvm::LLVMRustSetLLVMOptions(len as c_int, p);\n-        })\n+        llvm::LLVMRustSetLLVMOptions(llvm_args.len() as c_int, llvm_args.as_ptr());\n     }\n \n     unsafe fn populate_llvm_passes(fpm: lib::llvm::PassManagerRef,"}, {"sha": "8e85603b31cffdc0e22c86c16ac5c4b7779fbc7d", "filename": "src/librustc/back/manifest.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4c79b22ef26a2b846d84c46bc8fea50c953559dd/src%2Flibrustc%2Fback%2Fmanifest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c79b22ef26a2b846d84c46bc8fea50c953559dd/src%2Flibrustc%2Fback%2Fmanifest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Fmanifest.rs?ref=4c79b22ef26a2b846d84c46bc8fea50c953559dd", "patch": "@@ -55,7 +55,7 @@ mod windows {\n         let mut t = s.to_utf16();\n         // Null terminate before passing on.\n         t.push(0u16);\n-        t.as_imm_buf(|buf, _len| f(buf))\n+        f(t.as_ptr())\n     }\n \n     #[link_name = \"kernel32\"]\n@@ -86,14 +86,12 @@ mod windows {\n                 return Err(format!(\"failure in BeginUpdateResourceW: {}\", os::last_os_error()));\n             }\n \n-            let ok = manifest.as_imm_buf(|p, len| {\n-                UpdateResourceW(hUpdate,\n-                                MAKEINTRESOURCEW(24), // RT_MANIFEST\n-                                MAKEINTRESOURCEW(1),  // CREATEPROCESS_MANIFEST_RESOURCE_ID\n-                                0,                    // LANG_NEUTRAL, SUBLANG_NEUTRAL\n-                                p as LPCVOID,\n-                                len as u32)\n-            });\n+            let ok = UpdateResourceW(hUpdate,\n+                                     MAKEINTRESOURCEW(24), // RT_MANIFEST\n+                                     MAKEINTRESOURCEW(1),  // CREATEPROCESS_MANIFEST_RESOURCE_ID\n+                                     0,                    // LANG_NEUTRAL, SUBLANG_NEUTRAL\n+                                     manifest.as_ptr() as LPCVOID,\n+                                     manifest.len() as u32);\n             if ok == FALSE {\n                 return Err(format!(\"failure in UpdateResourceW: {}\", os::last_os_error()));\n             }"}, {"sha": "de56453631eea4088c3891676ffb3f67edd48b69", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4c79b22ef26a2b846d84c46bc8fea50c953559dd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c79b22ef26a2b846d84c46bc8fea50c953559dd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=4c79b22ef26a2b846d84c46bc8fea50c953559dd", "patch": "@@ -2414,9 +2414,9 @@ pub fn create_entry_wrapper(ccx: @mut CrateContext,\n                 (rust_main, args)\n             };\n \n-            let result = args.as_imm_buf(|buf, len| {\n-                llvm::LLVMBuildCall(bld, start_fn, buf, len as c_uint, noname())\n-            });\n+            let result = llvm::LLVMBuildCall(bld, start_fn,\n+                                             args.as_ptr(), args.len() as c_uint,\n+                                             noname());\n \n             llvm::LLVMBuildRet(bld, result);\n         }"}, {"sha": "02e2232bfc8f09f67fb41d1733685a58bc127613", "filename": "src/librustc/middle/trans/builder.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4c79b22ef26a2b846d84c46bc8fea50c953559dd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c79b22ef26a2b846d84c46bc8fea50c953559dd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuilder.rs?ref=4c79b22ef26a2b846d84c46bc8fea50c953559dd", "patch": "@@ -464,11 +464,11 @@ impl Builder {\n             let min = llvm::LLVMConstInt(t, lo, signed);\n             let max = llvm::LLVMConstInt(t, hi, signed);\n \n-            [min, max].as_imm_buf(|ptr, len| {\n-                llvm::LLVMSetMetadata(value, lib::llvm::MD_range as c_uint,\n-                                      llvm::LLVMMDNodeInContext(self.ccx.llcx,\n-                                                                ptr, len as c_uint));\n-            })\n+            let v = [min, max];\n+\n+            llvm::LLVMSetMetadata(value, lib::llvm::MD_range as c_uint,\n+                                  llvm::LLVMMDNodeInContext(self.ccx.llcx,\n+                                                            v.as_ptr(), v.len() as c_uint));\n         }\n \n         value"}, {"sha": "627a23542d20d7886b0f77e5b553e6328c71bd15", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4c79b22ef26a2b846d84c46bc8fea50c953559dd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c79b22ef26a2b846d84c46bc8fea50c953559dd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=4c79b22ef26a2b846d84c46bc8fea50c953559dd", "patch": "@@ -952,17 +952,16 @@ pub fn C_zero_byte_arr(size: uint) -> ValueRef {\n \n pub fn C_struct(elts: &[ValueRef], packed: bool) -> ValueRef {\n     unsafe {\n-        elts.as_imm_buf(|ptr, len| {\n-            llvm::LLVMConstStructInContext(base::task_llcx(), ptr, len as c_uint, packed as Bool)\n-        })\n+\n+        llvm::LLVMConstStructInContext(base::task_llcx(),\n+                                       elts.as_ptr(), elts.len() as c_uint,\n+                                       packed as Bool)\n     }\n }\n \n pub fn C_named_struct(T: Type, elts: &[ValueRef]) -> ValueRef {\n     unsafe {\n-        elts.as_imm_buf(|ptr, len| {\n-            llvm::LLVMConstNamedStruct(T.to_ref(), ptr, len as c_uint)\n-        })\n+        llvm::LLVMConstNamedStruct(T.to_ref(), elts.as_ptr(), elts.len() as c_uint)\n     }\n }\n \n@@ -988,9 +987,7 @@ pub fn get_param(fndecl: ValueRef, param: uint) -> ValueRef {\n pub fn const_get_elt(cx: &CrateContext, v: ValueRef, us: &[c_uint])\n                   -> ValueRef {\n     unsafe {\n-        let r = us.as_imm_buf(|p, len| {\n-            llvm::LLVMConstExtractValue(v, p, len as c_uint)\n-        });\n+        let r = llvm::LLVMConstExtractValue(v, us.as_ptr(), us.len() as c_uint);\n \n         debug!(\"const_get_elt(v={}, us={:?}, r={})\",\n                cx.tn.val_to_str(v), us, cx.tn.val_to_str(r));"}, {"sha": "5560efacfa5359f50a4ac24f8335a2960de259ab", "filename": "src/librustc/middle/trans/foreign.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4c79b22ef26a2b846d84c46bc8fea50c953559dd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c79b22ef26a2b846d84c46bc8fea50c953559dd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=4c79b22ef26a2b846d84c46bc8fea50c953559dd", "patch": "@@ -646,11 +646,9 @@ pub fn trans_rust_fn_with_foreign_abi(ccx: @mut CrateContext,\n         }\n \n         // Perform the call itself\n-        let llrust_ret_val = llrust_args.as_imm_buf(|ptr, len| {\n-            debug!(\"calling llrustfn = {}\", ccx.tn.val_to_str(llrustfn));\n-            llvm::LLVMBuildCall(builder, llrustfn, ptr,\n-                                len as c_uint, noname())\n-        });\n+        debug!(\"calling llrustfn = {}\", ccx.tn.val_to_str(llrustfn));\n+        let llrust_ret_val = llvm::LLVMBuildCall(builder, llrustfn, llrust_args.as_ptr(),\n+                                                 llrust_args.len() as c_uint, noname());\n \n         // Get the return value where the foreign fn expects it.\n         let llforeign_ret_ty = match tys.fn_ty.ret_ty.cast {"}, {"sha": "9e359e26f03d6abddcb2371af62450d89f3925cb", "filename": "src/librustuv/process.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4c79b22ef26a2b846d84c46bc8fea50c953559dd/src%2Flibrustuv%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c79b22ef26a2b846d84c46bc8fea50c953559dd/src%2Flibrustuv%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fprocess.rs?ref=4c79b22ef26a2b846d84c46bc8fea50c953559dd", "patch": "@@ -70,7 +70,7 @@ impl Process {\n                     },\n                     flags: 0,\n                     stdio_count: stdio.len() as libc::c_int,\n-                    stdio: stdio.as_imm_buf(|p, _| p),\n+                    stdio: stdio.as_ptr(),\n                     uid: 0,\n                     gid: 0,\n                 };\n@@ -163,7 +163,7 @@ fn with_argv<T>(prog: &str, args: &[~str], f: |**libc::c_char| -> T) -> T {\n         c_args.push(s.with_ref(|p| p));\n     }\n     c_args.push(ptr::null());\n-    c_args.as_imm_buf(|buf, _| f(buf))\n+    f(c_args.as_ptr())\n }\n \n /// Converts the environment to the env array expected by libuv\n@@ -182,7 +182,7 @@ fn with_env<T>(env: Option<&[(~str, ~str)]>, f: |**libc::c_char| -> T) -> T {\n         c_envp.push(s.with_ref(|p| p));\n     }\n     c_envp.push(ptr::null());\n-    c_envp.as_imm_buf(|buf, _| f(buf))\n+    f(c_envp.as_ptr())\n }\n \n impl HomingIO for Process {"}, {"sha": "2f11e93d839fbe88d6314e7a6b3e199227bfa200", "filename": "src/libstd/c_str.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4c79b22ef26a2b846d84c46bc8fea50c953559dd/src%2Flibstd%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c79b22ef26a2b846d84c46bc8fea50c953559dd/src%2Flibstd%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fc_str.rs?ref=4c79b22ef26a2b846d84c46bc8fea50c953559dd", "patch": "@@ -267,17 +267,16 @@ impl<'a> ToCStr for &'a [u8] {\n     }\n \n     unsafe fn to_c_str_unchecked(&self) -> CString {\n-        self.as_imm_buf(|self_buf, self_len| {\n-            let buf = libc::malloc(self_len as libc::size_t + 1) as *mut u8;\n-            if buf.is_null() {\n-                fail!(\"failed to allocate memory!\");\n-            }\n+        let self_len = self.len();\n+        let buf = libc::malloc(self_len as libc::size_t + 1) as *mut u8;\n+        if buf.is_null() {\n+            fail!(\"failed to allocate memory!\");\n+        }\n \n-            ptr::copy_memory(buf, self_buf, self_len);\n-            *ptr::mut_offset(buf, self_len as int) = 0;\n+        ptr::copy_memory(buf, self.as_ptr(), self_len);\n+        *ptr::mut_offset(buf, self_len as int) = 0;\n \n-            CString::new(buf as *libc::c_char, true)\n-        })\n+        CString::new(buf as *libc::c_char, true)\n     }\n \n     fn with_c_str<T>(&self, f: |*libc::c_char| -> T) -> T {"}, {"sha": "74d18f11a1d60c9df0ca0fb4892a7382aef5a304", "filename": "src/libstd/io/native/file.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c79b22ef26a2b846d84c46bc8fea50c953559dd/src%2Flibstd%2Fio%2Fnative%2Ffile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c79b22ef26a2b846d84c46bc8fea50c953559dd/src%2Flibstd%2Fio%2Fnative%2Ffile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnative%2Ffile.rs?ref=4c79b22ef26a2b846d84c46bc8fea50c953559dd", "patch": "@@ -37,8 +37,8 @@ fn keep_going(data: &[u8], f: |*u8, uint| -> i64) -> i64 {\n     #[cfg(windows)] static eintr: int = 0; // doesn't matter\n     #[cfg(not(windows))] static eintr: int = libc::EINTR as int;\n \n-    let (data, origamt) = data.as_imm_buf(|data, amt| (data, amt));\n-    let mut data = data;\n+    let origamt = data.len();\n+    let mut data = data.as_ptr();\n     let mut amt = origamt;\n     while amt > 0 {\n         let mut ret;"}, {"sha": "ef972dc4d0ad115cc29206662fe55f70e100763e", "filename": "src/libstd/io/native/process.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4c79b22ef26a2b846d84c46bc8fea50c953559dd/src%2Flibstd%2Fio%2Fnative%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c79b22ef26a2b846d84c46bc8fea50c953559dd/src%2Flibstd%2Fio%2Fnative%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnative%2Fprocess.rs?ref=4c79b22ef26a2b846d84c46bc8fea50c953559dd", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use cast;\n use io;\n use libc::{pid_t, c_void, c_int};\n use libc;\n@@ -17,6 +16,8 @@ use prelude::*;\n use ptr;\n use rt::rtio;\n use super::file;\n+#[cfg(windows)]\n+use cast;\n \n use p = io::process;\n \n@@ -453,7 +454,7 @@ fn with_argv<T>(prog: &str, args: &[~str], cb: |**libc::c_char| -> T) -> T {\n     // Finally, make sure we add a null pointer.\n     ptrs.push(ptr::null());\n \n-    ptrs.as_imm_buf(|buf, _| cb(buf))\n+    cb(ptrs.as_ptr())\n }\n \n #[cfg(unix)]\n@@ -476,7 +477,7 @@ fn with_envp<T>(env: Option<~[(~str, ~str)]>, cb: |*c_void| -> T) -> T {\n             let mut ptrs = tmps.map(|tmp| tmp.with_ref(|buf| buf));\n             ptrs.push(ptr::null());\n \n-            ptrs.as_imm_buf(|buf, _| unsafe { cb(cast::transmute(buf)) })\n+            cb(ptrs.as_ptr() as *c_void)\n         }\n         _ => cb(ptr::null())\n     }\n@@ -499,7 +500,7 @@ fn with_envp<T>(env: Option<~[(~str, ~str)]>, cb: |*mut c_void| -> T) -> T {\n \n             blk.push(0);\n \n-            blk.as_imm_buf(|p, _len| unsafe { cb(cast::transmute(p)) })\n+            cb(blk.as_mut_ptr() as *mut c_void)\n         }\n         _ => cb(ptr::mut_null())\n     }"}, {"sha": "c7ff4510d0d99a3c7e21d7ac227c2639bfd6f1cb", "filename": "src/libstd/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c79b22ef26a2b846d84c46bc8fea50c953559dd/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c79b22ef26a2b846d84c46bc8fea50c953559dd/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=4c79b22ef26a2b846d84c46bc8fea50c953559dd", "patch": "@@ -130,7 +130,7 @@ pub mod win32 {\n         let mut t = s.to_utf16();\n         // Null terminate before passing on.\n         t.push(0u16);\n-        t.as_imm_buf(|buf, _len| f(buf))\n+        f(t.as_ptr())\n     }\n }\n "}, {"sha": "070884c078c475207e8e6d9a8ec3fb7641b40d21", "filename": "src/libstd/ptr.rs", "status": "modified", "additions": 32, "deletions": 36, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/4c79b22ef26a2b846d84c46bc8fea50c953559dd/src%2Flibstd%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c79b22ef26a2b846d84c46bc8fea50c953559dd/src%2Flibstd%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fptr.rs?ref=4c79b22ef26a2b846d84c46bc8fea50c953559dd", "patch": "@@ -511,10 +511,9 @@ pub mod ptr_tests {\n             \"there\".with_c_str(|p1| {\n                 \"thing\".with_c_str(|p2| {\n                     let v = ~[p0, p1, p2, null()];\n-                    v.as_imm_buf(|vp, len| {\n-                        assert_eq!(unsafe { buf_len(vp) }, 3u);\n-                        assert_eq!(len, 4u);\n-                    })\n+                    unsafe {\n+                        assert_eq!(buf_len(v.as_ptr()), 3u);\n+                    }\n                 })\n             })\n         })\n@@ -623,23 +622,21 @@ pub mod ptr_tests {\n                 one, two, three\n             ];\n \n-            arr.as_imm_buf(|arr_ptr, arr_len| {\n-                let mut ctr = 0;\n-                let mut iteration_count = 0;\n-                array_each_with_len(arr_ptr, arr_len, |e| {\n-                     let actual = str::raw::from_c_str(e);\n-                     let expected = expected_arr[ctr].with_ref(|buf| {\n-                         str::raw::from_c_str(buf)\n-                     });\n-                     debug!(\n-                         \"test_ptr_array_each_with_len e: {}, a: {}\",\n-                         expected, actual);\n-                     assert_eq!(actual, expected);\n-                     ctr += 1;\n-                     iteration_count += 1;\n+            let mut ctr = 0;\n+            let mut iteration_count = 0;\n+            array_each_with_len(arr.as_ptr(), arr.len(), |e| {\n+                    let actual = str::raw::from_c_str(e);\n+                    let expected = expected_arr[ctr].with_ref(|buf| {\n+                            str::raw::from_c_str(buf)\n+                        });\n+                    debug!(\n+                        \"test_ptr_array_each_with_len e: {}, a: {}\",\n+                        expected, actual);\n+                    assert_eq!(actual, expected);\n+                    ctr += 1;\n+                    iteration_count += 1;\n                 });\n-                assert_eq!(iteration_count, 3u);\n-            })\n+            assert_eq!(iteration_count, 3u);\n         }\n     }\n \n@@ -660,23 +657,22 @@ pub mod ptr_tests {\n                 one, two, three\n             ];\n \n-            arr.as_imm_buf(|arr_ptr, _| {\n-                let mut ctr = 0;\n-                let mut iteration_count = 0;\n-                array_each(arr_ptr, |e| {\n-                     let actual = str::raw::from_c_str(e);\n-                     let expected = expected_arr[ctr].with_ref(|buf| {\n-                         str::raw::from_c_str(buf)\n-                     });\n-                     debug!(\n-                         \"test_ptr_array_each e: {}, a: {}\",\n-                         expected, actual);\n-                     assert_eq!(actual, expected);\n-                     ctr += 1;\n-                     iteration_count += 1;\n+            let arr_ptr = arr.as_ptr();\n+            let mut ctr = 0;\n+            let mut iteration_count = 0;\n+            array_each(arr_ptr, |e| {\n+                    let actual = str::raw::from_c_str(e);\n+                    let expected = expected_arr[ctr].with_ref(|buf| {\n+                        str::raw::from_c_str(buf)\n+                    });\n+                    debug!(\n+                        \"test_ptr_array_each e: {}, a: {}\",\n+                        expected, actual);\n+                    assert_eq!(actual, expected);\n+                    ctr += 1;\n+                    iteration_count += 1;\n                 });\n-                assert_eq!(iteration_count, 3);\n-            })\n+            assert_eq!(iteration_count, 3);\n         }\n     }\n "}, {"sha": "e785ed74159ce32f44e8f1ae89e59f6e89738a37", "filename": "src/libstd/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c79b22ef26a2b846d84c46bc8fea50c953559dd/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c79b22ef26a2b846d84c46bc8fea50c953559dd/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=4c79b22ef26a2b846d84c46bc8fea50c953559dd", "patch": "@@ -2502,7 +2502,7 @@ impl<'a> StrSlice<'a> for &'a str {\n     #[inline]\n     fn as_imm_buf<T>(&self, f: |*u8, uint| -> T) -> T {\n         let v: &[u8] = unsafe { cast::transmute(*self) };\n-        v.as_imm_buf(f)\n+        f(v.as_ptr(), v.len())\n     }\n }\n "}, {"sha": "08ab6732aecd249305c358a86afcdf68084d29e8", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 10, "deletions": 38, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/4c79b22ef26a2b846d84c46bc8fea50c953559dd/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c79b22ef26a2b846d84c46bc8fea50c953559dd/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=4c79b22ef26a2b846d84c46bc8fea50c953559dd", "patch": "@@ -775,15 +775,15 @@ impl<'a, T> Container for &'a [T] {\n     /// Returns the length of a vector\n     #[inline]\n     fn len(&self) -> uint {\n-        self.as_imm_buf(|_p, len| len)\n+        self.repr().len\n     }\n }\n \n impl<T> Container for ~[T] {\n     /// Returns the length of a vector\n     #[inline]\n     fn len(&self) -> uint {\n-        self.as_imm_buf(|_p, len| len)\n+        self.repr().len\n     }\n }\n \n@@ -984,14 +984,6 @@ pub trait ImmutableVector<'a, T> {\n     /// of a vector and return the results.\n     fn map<U>(&self, |t: &T| -> U) -> ~[U];\n \n-    /**\n-     * Work with the buffer of a vector.\n-     *\n-     * Allows for unsafe manipulation of vector contents, which is useful for\n-     * foreign interop.\n-     */\n-    fn as_imm_buf<U>(&self, f: |*T, uint| -> U) -> U;\n-\n     /**\n      * Returns a mutable reference to the first element in this slice\n      * and adjusts the slice in place so that it no longer contains\n@@ -1032,14 +1024,12 @@ impl<'a,T> ImmutableVector<'a, T> for &'a [T] {\n     fn slice(&self, start: uint, end: uint) -> &'a [T] {\n         assert!(start <= end);\n         assert!(end <= self.len());\n-        self.as_imm_buf(|p, _len| {\n-            unsafe {\n-                cast::transmute(Slice {\n-                    data: ptr::offset(p, start as int),\n+        unsafe {\n+            cast::transmute(Slice {\n+                    data: self.as_ptr().offset(start as int),\n                     len: (end - start)\n                 })\n-            }\n-        })\n+        }\n     }\n \n     #[inline]\n@@ -1197,12 +1187,6 @@ impl<'a,T> ImmutableVector<'a, T> for &'a [T] {\n         self.iter().map(f).collect()\n     }\n \n-    #[inline]\n-    fn as_imm_buf<U>(&self, f: |*T, uint| -> U) -> U {\n-        let s = self.repr();\n-        f(s.data, s.len)\n-    }\n-\n     fn shift_ref(&mut self) -> &'a T {\n         unsafe {\n             let s: &mut Slice<T> = cast::transmute(self);\n@@ -2206,10 +2190,9 @@ impl<'a,T> MutableVector<'a, T> for &'a mut [T] {\n     #[inline]\n     unsafe fn copy_memory(self, src: &[T]) {\n         self.as_mut_buf(|p_dst, len_dst| {\n-            src.as_imm_buf(|p_src, len_src| {\n-                assert!(len_dst >= len_src)\n-                ptr::copy_nonoverlapping_memory(p_dst, p_src, len_src)\n-            })\n+            let len_src = src.len();\n+            assert!(len_dst >= len_src);\n+            ptr::copy_nonoverlapping_memory(p_dst, src.as_ptr(), len_src)\n         })\n     }\n \n@@ -2369,9 +2352,7 @@ pub mod bytes {\n         dst.reserve_additional(src.len());\n         unsafe {\n             dst.as_mut_buf(|p_dst, len_dst| {\n-                src.as_imm_buf(|p_src, len_src| {\n-                    ptr::copy_memory(p_dst.offset(len_dst as int), p_src, len_src)\n-                })\n+                ptr::copy_memory(p_dst.offset(len_dst as int), src.as_ptr(), src.len())\n             });\n             dst.set_len(old_len + src.len());\n         }\n@@ -3553,15 +3534,6 @@ mod tests {\n         }\n     }\n \n-    #[test]\n-    #[should_fail]\n-    fn test_as_imm_buf_fail() {\n-        let v = [(~0, @0), (~0, @0), (~0, @0), (~0, @0)];\n-        v.as_imm_buf(|_buf, _i| {\n-            fail!()\n-        })\n-    }\n-\n     #[test]\n     #[should_fail]\n     fn test_as_mut_buf_fail() {"}, {"sha": "932b9a0d4510656d042b309ee12b34cac45c5abf", "filename": "src/test/run-fail/bug-2470-bounds-check-overflow.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4c79b22ef26a2b846d84c46bc8fea50c953559dd/src%2Ftest%2Frun-fail%2Fbug-2470-bounds-check-overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c79b22ef26a2b846d84c46bc8fea50c953559dd/src%2Ftest%2Frun-fail%2Fbug-2470-bounds-check-overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fbug-2470-bounds-check-overflow.rs?ref=4c79b22ef26a2b846d84c46bc8fea50c953559dd", "patch": "@@ -21,16 +21,15 @@ fn main() {\n     // huge).\n \n     let x = ~[1u,2u,3u];\n-    x.as_imm_buf(|p, _len| {\n-        let base = p as uint;\n-        let idx = base / mem::size_of::<uint>();\n-        error!(\"ov1 base = 0x{:x}\", base);\n-        error!(\"ov1 idx = 0x{:x}\", idx);\n-        error!(\"ov1 sizeof::<uint>() = 0x{:x}\", mem::size_of::<uint>());\n-        error!(\"ov1 idx * sizeof::<uint>() = 0x{:x}\",\n-               idx * mem::size_of::<uint>());\n \n-        // This should fail.\n-        error!(\"ov1 0x{:x}\",  x[idx]);\n-    })\n+    let base = x.as_ptr() as uint;\n+    let idx = base / mem::size_of::<uint>();\n+    error!(\"ov1 base = 0x{:x}\", base);\n+    error!(\"ov1 idx = 0x{:x}\", idx);\n+    error!(\"ov1 sizeof::<uint>() = 0x{:x}\", mem::size_of::<uint>());\n+    error!(\"ov1 idx * sizeof::<uint>() = 0x{:x}\",\n+           idx * mem::size_of::<uint>());\n+\n+    // This should fail.\n+    error!(\"ov1 0x{:x}\",  x[idx]);\n }"}]}