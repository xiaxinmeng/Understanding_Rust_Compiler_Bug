{"sha": "cda0b07121b8792fec23030f44515c5b4f351b8d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkYTBiMDcxMjFiODc5MmZlYzIzMDMwZjQ0NTE1YzViNGYzNTFiOGQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-19T12:19:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-19T12:19:24Z"}, "message": "Auto merge of #1808 - RalfJung:fmt, r=oli-obk\n\nadd (bors-ignored) formatting check job", "tree": {"sha": "dca8a7a3ad7e3bab7d62c948a0395df7eaa6c2b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dca8a7a3ad7e3bab7d62c948a0395df7eaa6c2b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cda0b07121b8792fec23030f44515c5b4f351b8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cda0b07121b8792fec23030f44515c5b4f351b8d", "html_url": "https://github.com/rust-lang/rust/commit/cda0b07121b8792fec23030f44515c5b4f351b8d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cda0b07121b8792fec23030f44515c5b4f351b8d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25a43c7783366ae1a9c44d882a223ac24cbf6560", "url": "https://api.github.com/repos/rust-lang/rust/commits/25a43c7783366ae1a9c44d882a223ac24cbf6560", "html_url": "https://github.com/rust-lang/rust/commit/25a43c7783366ae1a9c44d882a223ac24cbf6560"}, {"sha": "74ae89e6caf72f604fbcdd9be7d09038a2120a44", "url": "https://api.github.com/repos/rust-lang/rust/commits/74ae89e6caf72f604fbcdd9be7d09038a2120a44", "html_url": "https://github.com/rust-lang/rust/commit/74ae89e6caf72f604fbcdd9be7d09038a2120a44"}], "stats": {"total": 26, "additions": 24, "deletions": 2}, "files": [{"sha": "889c584ba7c1f85a3972d69aa480da3b4dc62a7e", "filename": ".github/workflows/ci.yml", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/cda0b07121b8792fec23030f44515c5b4f351b8d/.github%2Fworkflows%2Fci.yml", "raw_url": "https://github.com/rust-lang/rust/raw/cda0b07121b8792fec23030f44515c5b4f351b8d/.github%2Fworkflows%2Fci.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fci.yml?ref=cda0b07121b8792fec23030f44515c5b4f351b8d", "patch": "@@ -92,11 +92,34 @@ jobs:\n       - name: Test\n         run: bash ./ci.sh\n \n+  fmt:\n+    name: check formatting (ignored by bors)\n+    runs-on: ubuntu-latest\n+    steps:\n+      - uses: actions/checkout@v2\n+      - name: Install latest nightly\n+        uses: actions-rs/toolchain@v1\n+        with:\n+            toolchain: nightly\n+            components: rustfmt\n+            default: true\n+      - name: Check formatting (miri)\n+        uses: actions-rs/cargo@v1\n+        with:\n+          command: fmt\n+          args: --all -- --check\n+      - name: Check formatting (cargo-miri)\n+        uses: actions-rs/cargo@v1\n+        with:\n+          command: fmt\n+          args: --manifest-path cargo-miri/Cargo.toml --all -- --check\n+\n   # These jobs doesn't actually test anything, but they're only used to tell\n   # bors the build completed, as there is no practical way to detect when a\n   # workflow is successful listening to webhooks only.\n   #\n   # ALL THE PREVIOUS JOBS NEED TO BE ADDED TO THE `needs` SECTION OF THIS JOB!\n+  # (`fmt` is deliberately not listed, we want bors to ignore it.)\n   end-success:\n     name: bors build finished\n     runs-on: ubuntu-latest"}, {"sha": "b26705cb704ff682edd271f27d81cae6038d5956", "filename": "benches/helpers/miri_helper.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cda0b07121b8792fec23030f44515c5b4f351b8d/benches%2Fhelpers%2Fmiri_helper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cda0b07121b8792fec23030f44515c5b4f351b8d/benches%2Fhelpers%2Fmiri_helper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/benches%2Fhelpers%2Fmiri_helper.rs?ref=cda0b07121b8792fec23030f44515c5b4f351b8d", "patch": "@@ -20,8 +20,7 @@ impl rustc_driver::Callbacks for MiriCompilerCalls<'_> {\n         compiler.session().abort_if_errors();\n \n         queries.global_ctxt().unwrap().peek_mut().enter(|tcx| {\n-            let (entry_def_id, _) =\n-                tcx.entry_fn(()).expect(\"no main or start function found\");\n+            let (entry_def_id, _) = tcx.entry_fn(()).expect(\"no main or start function found\");\n \n             self.bencher.iter(|| {\n                 let config = miri::MiriConfig::default();"}]}