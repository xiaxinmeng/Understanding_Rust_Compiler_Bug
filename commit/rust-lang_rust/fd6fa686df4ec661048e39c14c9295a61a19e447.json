{"sha": "fd6fa686df4ec661048e39c14c9295a61a19e447", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkNmZhNjg2ZGY0ZWM2NjEwNDhlMzljMTRjOTI5NWE2MWExOWU0NDc=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-04-05T15:10:55Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-04-06T22:36:59Z"}, "message": "linker: Add more markup and comments to code producing linker arguments", "tree": {"sha": "8963f8ef566a834fda9ec5da92fb36607719ee1c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8963f8ef566a834fda9ec5da92fb36607719ee1c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd6fa686df4ec661048e39c14c9295a61a19e447", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd6fa686df4ec661048e39c14c9295a61a19e447", "html_url": "https://github.com/rust-lang/rust/commit/fd6fa686df4ec661048e39c14c9295a61a19e447", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd6fa686df4ec661048e39c14c9295a61a19e447/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f42d81ea489c53a93f4d2b6e59b8ddeb4ee749a", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f42d81ea489c53a93f4d2b6e59b8ddeb4ee749a", "html_url": "https://github.com/rust-lang/rust/commit/7f42d81ea489c53a93f4d2b6e59b8ddeb4ee749a"}], "stats": {"total": 84, "additions": 61, "deletions": 23}, "files": [{"sha": "556a7b85cca70c0b0bacc38a47b162cc8b4d1fb0", "filename": "src/librustc_codegen_ssa/back/link.rs", "status": "modified", "additions": 61, "deletions": 23, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/fd6fa686df4ec661048e39c14c9295a61a19e447/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd6fa686df4ec661048e39c14c9295a61a19e447/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs?ref=fd6fa686df4ec661048e39c14c9295a61a19e447", "patch": "@@ -193,6 +193,7 @@ pub fn get_linker(sess: &Session, linker: &Path, flavor: LinkerFlavor) -> Comman\n                     _ => None,\n                 };\n                 if let Some(ref a) = arch {\n+                    // FIXME: Move this to `fn linker_with_args`.\n                     let mut arg = OsString::from(\"/LIBPATH:\");\n                     arg.push(format!(\"{}\\\\lib\\\\{}\\\\store\", root_lib_path.display(), a.to_string()));\n                     cmd.arg(&arg);\n@@ -1254,9 +1255,29 @@ fn add_post_link_args(cmd: &mut dyn Linker, sess: &'a Session, flavor: LinkerFla\n     }\n }\n \n+/// Add sysroot and other globally set directories to the directory search list.\n+fn add_library_search_dirs(cmd: &mut dyn Linker, sess: &'a Session) {\n+    // The default library location, we need this to find the runtime.\n+    // The location of crates will be determined as needed.\n+    let lib_path = sess.target_filesearch(PathKind::All).get_lib_path();\n+\n+    // prefer system mingw-w64 libs, see get_crt_libs_path comment for more details\n+    if cfg!(windows) && sess.target.target.llvm_target.contains(\"windows-gnu\") {\n+        if let Some(compiler_libs_path) = get_crt_libs_path(sess) {\n+            cmd.include_path(&compiler_libs_path);\n+        }\n+    }\n+\n+    cmd.include_path(&fix_windows_verbatim_for_gcc(&lib_path));\n+}\n+\n /// Produce the linker command line containing linker path and arguments.\n /// `NO-OPT-OUT` marks the arguments that cannot be removed from the command line\n /// by the user without creating a custom target specification.\n+/// `OBJECT-FILES` specify whether the arguments can add object files.\n+/// `CUSTOMIZATION-POINT` means that arbitrary arguments defined by the user\n+/// or by the target spec can be inserted here.\n+/// `AUDIT-ORDER` - need to figure out whether the option is order-dependent or not.\n fn linker_with_args<'a, B: ArchiveBuilder<'a>>(\n     path: &Path,\n     flavor: LinkerFlavor,\n@@ -1273,9 +1294,10 @@ fn linker_with_args<'a, B: ArchiveBuilder<'a>>(\n     assert!(base_cmd.get_args().is_empty() || sess.target.target.target_vendor == \"uwp\");\n     let cmd = &mut *codegen_results.linker_info.to_linker(base_cmd, &sess, flavor, target_cpu);\n \n-    // NO-OPT-OUT\n+    // NO-OPT-OUT, OBJECT-FILES-MAYBE, CUSTOMIZATION-POINT\n     add_pre_link_args(cmd, sess, flavor, crate_type);\n \n+    // NO-OPT-OUT, OBJECT-FILES-NO, AUDIT-ORDER\n     if sess.target.target.options.is_like_fuchsia {\n         let prefix = match sess.opts.debugging_opts.sanitizer {\n             Some(Sanitizer::Address) => \"asan/\",\n@@ -1284,9 +1306,10 @@ fn linker_with_args<'a, B: ArchiveBuilder<'a>>(\n         cmd.arg(format!(\"--dynamic-linker={}ld.so.1\", prefix));\n     }\n \n-    // NO-OPT-OUT\n+    // NO-OPT-OUT, OBJECT-FILES-YES\n     add_pre_link_objects(cmd, sess, crate_type);\n \n+    // NO-OPT-OUT, OBJECT-FILES-NO, AUDIT-ORDER\n     if sess.target.target.options.is_like_emscripten {\n         cmd.arg(\"-s\");\n         cmd.arg(if sess.panic_strategy() == PanicStrategy::Abort {\n@@ -1296,43 +1319,40 @@ fn linker_with_args<'a, B: ArchiveBuilder<'a>>(\n         });\n     }\n \n+    // OBJECT-FILES-YES, AUDIT-ORDER\n     link_sanitizer_runtime(sess, crate_type, cmd);\n \n+    // OBJECT-FILES-NO, AUDIT-ORDER\n     // Linker plugins should be specified early in the list of arguments\n+    // FIXME: How \"early\" exactly?\n     cmd.linker_plugin_lto();\n \n-    // The default library location, we need this to find the runtime.\n-    // The location of crates will be determined as needed.\n-    let lib_path = sess.target_filesearch(PathKind::All).get_lib_path();\n-\n-    // target descriptor\n-    let t = &sess.target.target;\n-\n-    // prefer system mingw-w64 libs, see get_crt_libs_path comment for more details\n-    if cfg!(windows) && sess.target.target.llvm_target.contains(\"windows-gnu\") {\n-        if let Some(compiler_libs_path) = get_crt_libs_path(sess) {\n-            cmd.include_path(&compiler_libs_path);\n-        }\n-    }\n-\n-    cmd.include_path(&fix_windows_verbatim_for_gcc(&lib_path));\n+    // NO-OPT-OUT, OBJECT-FILES-NO, AUDIT-ORDER\n+    // FIXME: Order-dependent, at least relatively to other args adding searh directories.\n+    add_library_search_dirs(cmd, sess);\n \n+    // OBJECT-FILES-YES\n     for obj in codegen_results.modules.iter().filter_map(|m| m.object.as_ref()) {\n         cmd.add_object(obj);\n     }\n+\n+    // NO-OPT-OUT, OBJECT-FILES-NO, AUDIT-ORDER\n     cmd.output_filename(out_filename);\n \n+    // OBJECT-FILES-NO, AUDIT-ORDER\n     if crate_type == config::CrateType::Executable && sess.target.target.options.is_like_windows {\n         if let Some(ref s) = codegen_results.windows_subsystem {\n             cmd.subsystem(s);\n         }\n     }\n \n+    // NO-OPT-OUT, OBJECT-FILES-NO, AUDIT-ORDER\n     // If we're building something like a dynamic library then some platforms\n     // need to make sure that all symbols are exported correctly from the\n     // dynamic library.\n     cmd.export_symbols(tmpdir, crate_type);\n \n+    // OBJECT-FILES-YES\n     // When linking a dynamic library, we put the metadata into a section of the\n     // executable. This metadata is in a separate object file from the main\n     // object file, so we link that in here.\n@@ -1343,22 +1363,26 @@ fn linker_with_args<'a, B: ArchiveBuilder<'a>>(\n         }\n     }\n \n+    // OBJECT-FILES-YES\n     let obj = codegen_results.allocator_module.as_ref().and_then(|m| m.object.as_ref());\n     if let Some(obj) = obj {\n         cmd.add_object(obj);\n     }\n \n+    // OBJECT-FILES-NO, AUDIT-ORDER\n+    // FIXME: Order dependent, applies to the following objects. Where should it be placed?\n     // Try to strip as much out of the generated object by removing unused\n     // sections if possible. See more comments in linker.rs\n     if !sess.opts.cg.link_dead_code {\n         let keep_metadata = crate_type == config::CrateType::Dylib;\n         cmd.gc_sections(keep_metadata);\n     }\n \n+    // NO-OPT-OUT, OBJECT-FILES-NO, AUDIT-ORDER\n     if crate_type == config::CrateType::Executable {\n         let mut position_independent_executable = false;\n \n-        if t.options.position_independent_executables {\n+        if sess.target.target.options.position_independent_executables {\n             if is_pic(sess)\n                 && !sess.crt_static(Some(crate_type))\n                 && !sess\n@@ -1385,9 +1409,10 @@ fn linker_with_args<'a, B: ArchiveBuilder<'a>>(\n         }\n     }\n \n+    // OBJECT-FILES-NO, AUDIT-ORDER\n     let relro_level = match sess.opts.debugging_opts.relro_level {\n         Some(level) => level,\n-        None => t.options.relro_level,\n+        None => sess.target.target.options.relro_level,\n     };\n     match relro_level {\n         RelroLevel::Full => {\n@@ -1402,23 +1427,29 @@ fn linker_with_args<'a, B: ArchiveBuilder<'a>>(\n         RelroLevel::None => {}\n     }\n \n+    // OBJECT-FILES-NO, AUDIT-ORDER\n     // Pass optimization flags down to the linker.\n     cmd.optimize();\n \n+    // OBJECT-FILES-NO, AUDIT-ORDER\n     // Pass debuginfo flags down to the linker.\n     cmd.debuginfo();\n \n+    // OBJECT-FILES-NO, AUDIT-ORDER\n     // We want to, by default, prevent the compiler from accidentally leaking in\n     // any system libraries, so we may explicitly ask linkers to not link to any\n     // libraries by default. Note that this does not happen for windows because\n     // windows pulls in some large number of libraries and I couldn't quite\n     // figure out which subset we wanted.\n     //\n     // This is all naturally configurable via the standard methods as well.\n-    if !sess.opts.cg.default_linker_libraries.unwrap_or(false) && t.options.no_default_libraries {\n+    if !sess.opts.cg.default_linker_libraries.unwrap_or(false)\n+        && sess.target.target.options.no_default_libraries\n+    {\n         cmd.no_default_libraries();\n     }\n \n+    // OBJECT-FILES-YES\n     // Take careful note of the ordering of the arguments we pass to the linker\n     // here. Linkers will assume that things on the left depend on things to the\n     // right. Things on the right cannot depend on things on the left. This is\n@@ -1456,6 +1487,8 @@ fn linker_with_args<'a, B: ArchiveBuilder<'a>>(\n     if sess.opts.debugging_opts.link_native_libraries.unwrap_or(true) {\n         add_upstream_native_libraries(cmd, sess, codegen_results, crate_type);\n     }\n+\n+    // NO-OPT-OUT, OBJECT-FILES-NO, AUDIT-ORDER\n     // Tell the linker what we're doing.\n     if crate_type != config::CrateType::Executable {\n         cmd.build_dylib(out_filename);\n@@ -1464,14 +1497,17 @@ fn linker_with_args<'a, B: ArchiveBuilder<'a>>(\n         cmd.build_static_executable();\n     }\n \n+    // OBJECT-FILES-NO, AUDIT-ORDER\n     if sess.opts.cg.profile_generate.enabled() {\n         cmd.pgo_gen();\n     }\n \n+    // OBJECT-FILES-NO, AUDIT-ORDER\n     if sess.opts.debugging_opts.control_flow_guard != CFGuard::Disabled {\n         cmd.control_flow_guard();\n     }\n \n+    // OBJECT-FILES-NO, AUDIT-ORDER\n     // FIXME (#2397): At some point we want to rpath our guesses as to\n     // where extern libraries might live, based on the\n     // addl_lib_search_paths\n@@ -1496,17 +1532,19 @@ fn linker_with_args<'a, B: ArchiveBuilder<'a>>(\n         cmd.args(&rpath::get_rpath_flags(&mut rpath_config));\n     }\n \n+    // OBJECT-FILES-MAYBE, CUSTOMIZATION-POINT\n     add_user_defined_link_args(cmd, sess, codegen_results);\n \n+    // NO-OPT-OUT, OBJECT-FILES-NO, AUDIT-ORDER\n     cmd.finalize();\n \n-    // NO-OPT-OUT\n+    // NO-OPT-OUT, OBJECT-FILES-MAYBE, CUSTOMIZATION-POINT\n     add_late_link_args(cmd, sess, flavor, crate_type, codegen_results);\n \n-    // NO-OPT-OUT\n+    // NO-OPT-OUT, OBJECT-FILES-YES\n     add_post_link_objects(cmd, sess, crate_type);\n \n-    // NO-OPT-OUT\n+    // NO-OPT-OUT, OBJECT-FILES-MAYBE, CUSTOMIZATION-POINT\n     add_post_link_args(cmd, sess, flavor);\n \n     cmd.take_cmd()"}]}