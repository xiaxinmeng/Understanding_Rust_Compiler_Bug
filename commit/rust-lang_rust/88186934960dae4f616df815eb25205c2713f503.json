{"sha": "88186934960dae4f616df815eb25205c2713f503", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4MTg2OTM0OTYwZGFlNGY2MTZkZjgxNWViMjUyMDVjMjcxM2Y1MDM=", "commit": {"author": {"name": "Flavio Percoco", "email": "flaper87@gmail.com", "date": "2014-12-22T16:15:51Z"}, "committer": {"name": "Flavio Percoco", "email": "flaper87@gmail.com", "date": "2014-12-26T16:26:33Z"}, "message": "Relax `Arc` bounds don't require Sync+Send\n\nBesides the above making sense, it'll also allow us to make `RacyCell`\nprivate and use UnsafeCell instead.", "tree": {"sha": "10568b070d36a957f6a6aacf726d3dae05f73354", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/10568b070d36a957f6a6aacf726d3dae05f73354"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/88186934960dae4f616df815eb25205c2713f503", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/88186934960dae4f616df815eb25205c2713f503", "html_url": "https://github.com/rust-lang/rust/commit/88186934960dae4f616df815eb25205c2713f503", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/88186934960dae4f616df815eb25205c2713f503/comments", "author": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7df17a2868004597bff61348060f423ad2384e04", "url": "https://api.github.com/repos/rust-lang/rust/commits/7df17a2868004597bff61348060f423ad2384e04", "html_url": "https://github.com/rust-lang/rust/commit/7df17a2868004597bff61348060f423ad2384e04"}], "stats": {"total": 73, "additions": 37, "deletions": 36}, "files": [{"sha": "3d10628b1cb8d6930d53dd1960edda3569f7fa49", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88186934960dae4f616df815eb25205c2713f503/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88186934960dae4f616df815eb25205c2713f503/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=88186934960dae4f616df815eb25205c2713f503", "patch": "@@ -139,7 +139,7 @@ struct ArcInner<T> {\n     data: T,\n }\n \n-impl<T: Sync + Send> Arc<T> {\n+impl<T> Arc<T> {\n     /// Constructs a new `Arc<T>`.\n     ///\n     /// # Examples"}, {"sha": "269d988d1eeb925027aa997fcc129a7788fa558a", "filename": "src/libstd/comm/mod.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/88186934960dae4f616df815eb25205c2713f503/src%2Flibstd%2Fcomm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88186934960dae4f616df815eb25205c2713f503/src%2Flibstd%2Fcomm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcomm%2Fmod.rs?ref=88186934960dae4f616df815eb25205c2713f503", "patch": "@@ -1027,23 +1027,18 @@ impl<T: Send> Drop for Receiver<T> {\n \n /// A version of `UnsafeCell` intended for use in concurrent data\n /// structures (for example, you might put it in an `Arc`).\n-pub struct RacyCell<T>(pub UnsafeCell<T>);\n+struct RacyCell<T>(pub UnsafeCell<T>);\n \n impl<T> RacyCell<T> {\n-    /// DOX\n-    pub fn new(value: T) -> RacyCell<T> {\n+\n+    fn new(value: T) -> RacyCell<T> {\n         RacyCell(UnsafeCell { value: value })\n     }\n \n-    /// DOX\n-    pub unsafe fn get(&self) -> *mut T {\n+    unsafe fn get(&self) -> *mut T {\n         self.0.get()\n     }\n \n-    /// DOX\n-    pub unsafe fn into_inner(self) -> T {\n-        self.0.into_inner()\n-    }\n }\n \n unsafe impl<T:Send> Send for RacyCell<T> { }"}, {"sha": "fbbbb3e77a40785cc604e21d9c3a83fd8932feae", "filename": "src/libstd/sync/mutex.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/88186934960dae4f616df815eb25205c2713f503/src%2Flibstd%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88186934960dae4f616df815eb25205c2713f503/src%2Flibstd%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmutex.rs?ref=88186934960dae4f616df815eb25205c2713f503", "patch": "@@ -10,7 +10,6 @@\n \n use prelude::*;\n \n-use comm::RacyCell;\n use cell::UnsafeCell;\n use kinds::marker;\n use sync::{poison, AsMutexGuard};\n@@ -71,7 +70,7 @@ pub struct Mutex<T> {\n     // time, so to ensure that the native mutex is used correctly we box the\n     // inner lock to give it a constant address.\n     inner: Box<StaticMutex>,\n-    data: RacyCell<T>,\n+    data: UnsafeCell<T>,\n }\n \n unsafe impl<T:Send> Send for Mutex<T> { }\n@@ -101,7 +100,7 @@ unsafe impl<T:Send> Sync for Mutex<T> { }\n /// ```\n pub struct StaticMutex {\n     lock: sys::Mutex,\n-    poison: RacyCell<poison::Flag>,\n+    poison: UnsafeCell<poison::Flag>,\n }\n \n unsafe impl Sync for StaticMutex {}\n@@ -132,15 +131,15 @@ pub struct StaticMutexGuard {\n /// other mutex constants.\n pub const MUTEX_INIT: StaticMutex = StaticMutex {\n     lock: sys::MUTEX_INIT,\n-    poison: RacyCell(UnsafeCell { value: poison::Flag { failed: false } }),\n+    poison: UnsafeCell { value: poison::Flag { failed: false } },\n };\n \n impl<T: Send> Mutex<T> {\n     /// Creates a new mutex in an unlocked state ready for use.\n     pub fn new(t: T) -> Mutex<T> {\n         Mutex {\n             inner: box MUTEX_INIT,\n-            data: RacyCell::new(t),\n+            data: UnsafeCell::new(t),\n         }\n     }\n "}, {"sha": "81f8659d6ae08b87c79c247655ab1c68a668a1ba", "filename": "src/libstd/sys/unix/mutex.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/88186934960dae4f616df815eb25205c2713f503/src%2Flibstd%2Fsys%2Funix%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88186934960dae4f616df815eb25205c2713f503/src%2Flibstd%2Fsys%2Funix%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fmutex.rs?ref=88186934960dae4f616df815eb25205c2713f503", "patch": "@@ -8,21 +8,20 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use comm::RacyCell;\n use cell::UnsafeCell;\n use kinds::Sync;\n use sys::sync as ffi;\n use sys_common::mutex;\n \n-pub struct Mutex { inner: RacyCell<ffi::pthread_mutex_t> }\n+pub struct Mutex { inner: UnsafeCell<ffi::pthread_mutex_t> }\n \n #[inline]\n pub unsafe fn raw(m: &Mutex) -> *mut ffi::pthread_mutex_t {\n     m.inner.get()\n }\n \n pub const MUTEX_INIT: Mutex = Mutex {\n-    inner: RacyCell(UnsafeCell { value: ffi::PTHREAD_MUTEX_INITIALIZER }),\n+    inner: UnsafeCell { value: ffi::PTHREAD_MUTEX_INITIALIZER },\n };\n \n unsafe impl Sync for Mutex {}"}, {"sha": "56731bd7ec3ee2a38d99026349cc991729b05688", "filename": "src/libstd/thread.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/88186934960dae4f616df815eb25205c2713f503/src%2Flibstd%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88186934960dae4f616df815eb25205c2713f503/src%2Flibstd%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread.rs?ref=88186934960dae4f616df815eb25205c2713f503", "patch": "@@ -127,7 +127,7 @@\n use any::Any;\n use borrow::IntoCow;\n use boxed::Box;\n-use comm::RacyCell;\n+use cell::UnsafeCell;\n use clone::Clone;\n use kinds::{Send, Sync};\n use ops::{Drop, FnOnce};\n@@ -211,8 +211,8 @@ impl Builder {\n     }\n \n     fn spawn_inner<T: Send>(self, f: Thunk<(), T>) -> JoinGuard<T> {\n-        let my_packet = Arc::new(RacyCell::new(None));\n-        let their_packet = my_packet.clone();\n+        let my_packet = Packet(Arc::new(UnsafeCell::new(None)));\n+        let their_packet = Packet(my_packet.0.clone());\n \n         let Builder { name, stack_size, stdout, stderr } = self;\n \n@@ -266,7 +266,7 @@ impl Builder {\n                 }\n             };\n             unsafe {\n-                *their_packet.get() = Some(match (output, try_result) {\n+                *their_packet.0.get() = Some(match (output, try_result) {\n                     (Some(data), Ok(_)) => Ok(data),\n                     (None, Err(cause)) => Err(cause),\n                     _ => unreachable!()\n@@ -383,6 +383,11 @@ impl thread_info::NewThread for Thread {\n /// A thread that completes without panicking is considered to exit successfully.\n pub type Result<T> = ::result::Result<T, Box<Any + Send>>;\n \n+struct Packet<T>(Arc<UnsafeCell<Option<Result<T>>>>);\n+\n+unsafe impl<T:'static+Send> Send for Packet<T> {}\n+unsafe impl<T> Sync for Packet<T> {}\n+\n #[must_use]\n /// An RAII-style guard that will block until thread termination when dropped.\n ///\n@@ -391,9 +396,11 @@ pub struct JoinGuard<T> {\n     native: imp::rust_thread,\n     thread: Thread,\n     joined: bool,\n-    packet: Arc<RacyCell<Option<Result<T>>>>,\n+    packet: Packet<T>,\n }\n \n+unsafe impl<T: Send> Sync for JoinGuard<T> {}\n+\n impl<T: Send> JoinGuard<T> {\n     /// Extract a handle to the thread this guard will join on.\n     pub fn thread(&self) -> &Thread {\n@@ -410,7 +417,7 @@ impl<T: Send> JoinGuard<T> {\n         unsafe { imp::join(self.native) };\n         self.joined = true;\n         unsafe {\n-            (*self.packet.get()).take().unwrap()\n+            (*self.packet.0.get()).take().unwrap()\n         }\n     }\n "}, {"sha": "756c86c211547efaebea7df4e9e55adc557aa867", "filename": "src/libstd/thread_local/scoped.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88186934960dae4f616df815eb25205c2713f503/src%2Flibstd%2Fthread_local%2Fscoped.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88186934960dae4f616df815eb25205c2713f503/src%2Flibstd%2Fthread_local%2Fscoped.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread_local%2Fscoped.rs?ref=88186934960dae4f616df815eb25205c2713f503", "patch": "@@ -196,10 +196,10 @@ impl<T> Key<T> {\n \n #[cfg(not(any(windows, target_os = \"android\", target_os = \"ios\")))]\n mod imp {\n-    use std::comm::RacyCell;\n+    use std::cell::UnsafeCell;\n \n     #[doc(hidden)]\n-    pub struct KeyInner<T> { pub inner: RacyCell<*mut T> }\n+    pub struct KeyInner<T> { pub inner: UnsafeCell<*mut T> }\n \n     unsafe impl<T> ::kinds::Sync for KeyInner<T> { }\n "}, {"sha": "a25632b33768d91463d53ce90cf56032a3e33e61", "filename": "src/test/run-pass/issue-17718-static-unsafe-interior.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/88186934960dae4f616df815eb25205c2713f503/src%2Ftest%2Frun-pass%2Fissue-17718-static-unsafe-interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88186934960dae4f616df815eb25205c2713f503/src%2Ftest%2Frun-pass%2Fissue-17718-static-unsafe-interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-17718-static-unsafe-interior.rs?ref=88186934960dae4f616df815eb25205c2713f503", "patch": "@@ -9,43 +9,44 @@\n // except according to those terms.\n \n use std::kinds::marker;\n-use std::comm::RacyCell;\n use std::cell::UnsafeCell;\n \n struct MyUnsafe<T> {\n-    value: RacyCell<T>\n+    value: UnsafeCell<T>\n }\n \n impl<T> MyUnsafe<T> {\n     fn forbidden(&self) {}\n }\n \n+impl<T: Send> Sync for MyUnsafe<T> {}\n+\n enum UnsafeEnum<T> {\n     VariantSafe,\n-    VariantUnsafe(RacyCell<T>)\n+    VariantUnsafe(UnsafeCell<T>)\n }\n \n+impl<T: Send> Sync for UnsafeEnum<T> {}\n+\n static STATIC1: UnsafeEnum<int> = UnsafeEnum::VariantSafe;\n \n-static STATIC2: RacyCell<int> = RacyCell(UnsafeCell { value: 1 });\n-const CONST: RacyCell<int> = RacyCell(UnsafeCell { value: 1 });\n+static STATIC2: UnsafeCell<int> = UnsafeCell { value: 1 };\n+const CONST: UnsafeCell<int> = UnsafeCell { value: 1 };\n static STATIC3: MyUnsafe<int> = MyUnsafe{value: CONST};\n \n-static STATIC4: &'static RacyCell<int> = &STATIC2;\n+static STATIC4: &'static UnsafeCell<int> = &STATIC2;\n \n struct Wrap<T> {\n     value: T\n }\n \n unsafe impl<T: Send> Sync for Wrap<T> {}\n \n-static UNSAFE: RacyCell<int> = RacyCell(UnsafeCell{value: 1});\n-static WRAPPED_UNSAFE: Wrap<&'static RacyCell<int>> = Wrap { value: &UNSAFE };\n+static UNSAFE: UnsafeCell<int> = UnsafeCell{value: 1};\n+static WRAPPED_UNSAFE: Wrap<&'static UnsafeCell<int>> = Wrap { value: &UNSAFE };\n \n fn main() {\n     let a = &STATIC1;\n \n     STATIC3.forbidden()\n }\n-\n-"}]}