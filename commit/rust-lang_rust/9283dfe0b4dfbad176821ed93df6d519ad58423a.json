{"sha": "9283dfe0b4dfbad176821ed93df6d519ad58423a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyODNkZmUwYjRkZmJhZDE3NjgyMWVkOTNkZjZkNTE5YWQ1ODQyM2E=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-20T01:22:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-20T01:22:33Z"}, "message": "auto merge of #6619 : steveklabnik/rust/stdout_docs, r=thestinger\n\nAdded docs for stdout, stderr, print, and println.", "tree": {"sha": "098dd73786298c115d64c6bc3bec988dd76dc9be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/098dd73786298c115d64c6bc3bec988dd76dc9be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9283dfe0b4dfbad176821ed93df6d519ad58423a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9283dfe0b4dfbad176821ed93df6d519ad58423a", "html_url": "https://github.com/rust-lang/rust/commit/9283dfe0b4dfbad176821ed93df6d519ad58423a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9283dfe0b4dfbad176821ed93df6d519ad58423a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7396f7f004667610455557e7872330b59fafc79a", "url": "https://api.github.com/repos/rust-lang/rust/commits/7396f7f004667610455557e7872330b59fafc79a", "html_url": "https://github.com/rust-lang/rust/commit/7396f7f004667610455557e7872330b59fafc79a"}, {"sha": "58777272857526eb301bfedd909e6826e5edf716", "url": "https://api.github.com/repos/rust-lang/rust/commits/58777272857526eb301bfedd909e6826e5edf716", "html_url": "https://github.com/rust-lang/rust/commit/58777272857526eb301bfedd909e6826e5edf716"}], "stats": {"total": 44, "additions": 44, "deletions": 0}, "files": [{"sha": "2e37c6766c6fd162538bc177810a1686e884740c", "filename": "src/libcore/io.rs", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/9283dfe0b4dfbad176821ed93df6d519ad58423a/src%2Flibcore%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9283dfe0b4dfbad176821ed93df6d519ad58423a/src%2Flibcore%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fio.rs?ref=9283dfe0b4dfbad176821ed93df6d519ad58423a", "patch": "@@ -1571,13 +1571,57 @@ pub fn buffered_file_writer(path: &Path) -> Result<@Writer, ~str> {\n // FIXME (#2004) it would be great if this could be a const\n // FIXME (#2004) why are these different from the way stdin() is\n // implemented?\n+\n+\n+/**\n+* Gives a `Writer` which allows you to write to the standard output.\n+*\n+* # Examples\n+* ~~~\n+* let stdout = core::io::stdout();\n+* stdout.write_str(\"hello\\n\");\n+* ~~~\n+*/\n pub fn stdout() -> @Writer { fd_writer(libc::STDOUT_FILENO as c_int, false) }\n+\n+/**\n+* Gives a `Writer` which allows you to write to standard error.\n+*\n+* # Examples\n+* ~~~\n+* let stderr = core::io::stderr();\n+* stderr.write_str(\"hello\\n\");\n+* ~~~\n+*/\n pub fn stderr() -> @Writer { fd_writer(libc::STDERR_FILENO as c_int, false) }\n \n+/**\n+* Prints a string to standard output.\n+*\n+* This string will not have an implicit newline at the end. If you want\n+* an implicit newline, please see `println`.\n+*\n+* # Examples\n+* ~~~\n+* // print is imported into the prelude, and so is always available.\n+* print(\"hello\");\n+* ~~~\n+*/\n pub fn print(s: &str) {\n     stdout().write_str(s);\n }\n \n+/**\n+* Prints a string to standard output, followed by a newline.\n+*\n+* If you do not want an implicit newline, please see `print`.\n+*\n+* # Examples\n+* ~~~\n+* // println is imported into the prelude, and so is always available.\n+* println(\"hello\");\n+* ~~~\n+*/\n pub fn println(s: &str) {\n     stdout().write_line(s);\n }"}]}