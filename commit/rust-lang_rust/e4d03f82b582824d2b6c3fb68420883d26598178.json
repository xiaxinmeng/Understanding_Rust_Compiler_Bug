{"sha": "e4d03f82b582824d2b6c3fb68420883d26598178", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0ZDAzZjgyYjU4MjgyNGQyYjZjM2ZiNjg0MjA4ODNkMjY1OTgxNzg=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-13T11:44:40Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-15T07:51:32Z"}, "message": "miri value visitor: provide place when visiting a primitive", "tree": {"sha": "fd85f4988ff35e9fec0f2c8ffdf20c70d4836289", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd85f4988ff35e9fec0f2c8ffdf20c70d4836289"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e4d03f82b582824d2b6c3fb68420883d26598178", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e4d03f82b582824d2b6c3fb68420883d26598178", "html_url": "https://github.com/rust-lang/rust/commit/e4d03f82b582824d2b6c3fb68420883d26598178", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e4d03f82b582824d2b6c3fb68420883d26598178/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5bc83b60d10492f8e71461b03f5adb8505e53d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5bc83b60d10492f8e71461b03f5adb8505e53d6", "html_url": "https://github.com/rust-lang/rust/commit/c5bc83b60d10492f8e71461b03f5adb8505e53d6"}], "stats": {"total": 17, "additions": 9, "deletions": 8}, "files": [{"sha": "229f48381eaa43f456cc2c4cc8592bbc91afa2d3", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e4d03f82b582824d2b6c3fb68420883d26598178/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4d03f82b582824d2b6c3fb68420883d26598178/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=e4d03f82b582824d2b6c3fb68420883d26598178", "patch": "@@ -21,7 +21,7 @@ use rustc::mir::interpret::{\n };\n \n use super::{\n-    OpTy, MPlaceTy, ImmTy, Machine, EvalContext, ValueVisitor\n+    OpTy, MPlaceTy, Machine, EvalContext, ValueVisitor\n };\n \n macro_rules! validation_failure {\n@@ -281,8 +281,9 @@ impl<'rt, 'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>>\n         }\n     }\n \n-    fn visit_primitive(&mut self, value: ImmTy<'tcx, M::PointerTag>) -> EvalResult<'tcx>\n+    fn visit_primitive(&mut self, value: OpTy<'tcx, M::PointerTag>) -> EvalResult<'tcx>\n     {\n+        let value = self.ecx.read_immediate(value)?;\n         // Go over all the primitive types\n         let ty = value.layout.ty;\n         match ty.sty {"}, {"sha": "f0a71242599bff68a6001753760487450b4e6ed4", "filename": "src/librustc_mir/interpret/visitor.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e4d03f82b582824d2b6c3fb68420883d26598178/src%2Flibrustc_mir%2Finterpret%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4d03f82b582824d2b6c3fb68420883d26598178/src%2Flibrustc_mir%2Finterpret%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvisitor.rs?ref=e4d03f82b582824d2b6c3fb68420883d26598178", "patch": "@@ -8,7 +8,7 @@ use rustc::mir::interpret::{\n };\n \n use super::{\n-    Machine, EvalContext, MPlaceTy, OpTy, ImmTy,\n+    Machine, EvalContext, MPlaceTy, OpTy,\n };\n \n // A thing that we can project into, and that has a layout.\n@@ -201,9 +201,11 @@ macro_rules! make_value_visitor {\n             { Ok(()) }\n \n             /// Called whenever we reach a value of primitive type.  There can be no recursion\n-            /// below such a value.  This is the leave function.\n+            /// below such a value.  This is the leaf function.\n+            /// We do *not* provide an `ImmTy` here because some implementations might want\n+            /// to write to the place this primitive lives in.\n             #[inline(always)]\n-            fn visit_primitive(&mut self, _val: ImmTy<'tcx, M::PointerTag>) -> EvalResult<'tcx>\n+            fn visit_primitive(&mut self, _v: Self::V) -> EvalResult<'tcx>\n             { Ok(()) }\n \n             // Default recursors. Not meant to be overloaded.\n@@ -279,9 +281,7 @@ macro_rules! make_value_visitor {\n                     _ => v.layout().ty.builtin_deref(true).is_some(),\n                 };\n                 if primitive {\n-                    let op = v.to_op(self.ecx())?;\n-                    let val = self.ecx().read_immediate(op)?;\n-                    return self.visit_primitive(val);\n+                    return self.visit_primitive(v);\n                 }\n \n                 // Proceed into the fields."}]}