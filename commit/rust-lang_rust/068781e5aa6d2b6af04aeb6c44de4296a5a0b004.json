{"sha": "068781e5aa6d2b6af04aeb6c44de4296a5a0b004", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2ODc4MWU1YWE2ZDJiNmFmMDRhZWI2YzQ0ZGU0Mjk2YTVhMGIwMDQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-02-22T07:56:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-02-22T07:56:47Z"}, "message": "auto merge of #12422 : alexcrichton/rust/buffered-default, r=brson\n\nOne of the most common ways to use the stdin stream is to read it line by line\r\nfor a small program. In order to facilitate this common usage pattern, this\r\ncommit changes the stdin() function to return a BufferedReader by default. A new\r\n`stdin_raw()` method was added to get access to the raw unbuffered stream.\r\n\r\nI have not changed the stdout or stderr methods because they are currently\r\nunable to flush in their destructor, but #12403 should have just fixed that.", "tree": {"sha": "0ed28c6d380d79c5a162d6a44b6939c822e82988", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ed28c6d380d79c5a162d6a44b6939c822e82988"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/068781e5aa6d2b6af04aeb6c44de4296a5a0b004", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/068781e5aa6d2b6af04aeb6c44de4296a5a0b004", "html_url": "https://github.com/rust-lang/rust/commit/068781e5aa6d2b6af04aeb6c44de4296a5a0b004", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/068781e5aa6d2b6af04aeb6c44de4296a5a0b004/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "698042de238644341b798238bd5a61ea2f3c0f20", "url": "https://api.github.com/repos/rust-lang/rust/commits/698042de238644341b798238bd5a61ea2f3c0f20", "html_url": "https://github.com/rust-lang/rust/commit/698042de238644341b798238bd5a61ea2f3c0f20"}, {"sha": "7736985f78e43aa2e7f45c5ad19a520c97f45d8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/7736985f78e43aa2e7f45c5ad19a520c97f45d8f", "html_url": "https://github.com/rust-lang/rust/commit/7736985f78e43aa2e7f45c5ad19a520c97f45d8f"}], "stats": {"total": 32, "additions": 21, "deletions": 11}, "files": [{"sha": "d9419fb3ebc47ed006495008695740e79c94a0ba", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/068781e5aa6d2b6af04aeb6c44de4296a5a0b004/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/068781e5aa6d2b6af04aeb6c44de4296a5a0b004/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=068781e5aa6d2b6af04aeb6c44de4296a5a0b004", "patch": "@@ -26,11 +26,9 @@ Some examples of obvious things you might want to do\n * Read lines from stdin\n \n     ```rust\n-    use std::io::BufferedReader;\n-    use std::io::stdin;\n+    use std::io;\n \n-    let mut stdin = BufferedReader::new(stdin());\n-    for line in stdin.lines() {\n+    for line in io::stdin().lines() {\n         print!(\"{}\", line);\n     }\n     ```\n@@ -1097,10 +1095,9 @@ pub trait Buffer: Reader {\n     /// # Example\n     ///\n     /// ```rust\n-    /// use std::io::{BufferedReader, stdin};\n-    ///\n-    /// let mut reader = BufferedReader::new(stdin());\n+    /// use std::io;\n     ///\n+    /// let mut reader = io::stdin();\n     /// let input = reader.read_line().ok().unwrap_or(~\"nothing\");\n     /// ```\n     ///"}, {"sha": "e1f0d87e130b6b3f9476b333403d79967d265009", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/068781e5aa6d2b6af04aeb6c44de4296a5a0b004/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/068781e5aa6d2b6af04aeb6c44de4296a5a0b004/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=068781e5aa6d2b6af04aeb6c44de4296a5a0b004", "patch": "@@ -30,7 +30,7 @@ out.write(bytes!(\"Hello, world!\"));\n use container::Container;\n use fmt;\n use io::{Reader, Writer, IoResult, IoError, OtherIoError,\n-         standard_error, EndOfFile, LineBufferedWriter};\n+         standard_error, EndOfFile, LineBufferedWriter, BufferedReader};\n use libc;\n use mem::replace;\n use option::{Option, Some, None};\n@@ -86,8 +86,21 @@ fn src<T>(fd: libc::c_int, readable: bool, f: |StdSource| -> T) -> T {\n \n /// Creates a new non-blocking handle to the stdin of the current process.\n ///\n-/// See `stdout()` for notes about this function.\n-pub fn stdin() -> StdReader {\n+/// The returned handled is buffered by default with a `BufferedReader`. If\n+/// buffered access is not desired, the `stdin_raw` function is provided to\n+/// provided unbuffered access to stdin.\n+///\n+/// See `stdout()` for more notes about this function.\n+pub fn stdin() -> BufferedReader<StdReader> {\n+    BufferedReader::new(stdin_raw())\n+}\n+\n+/// Creates a new non-blocking handle to the stdin of the current process.\n+///\n+/// Unlike `stdin()`, the returned reader is *not* a buffered reader.\n+///\n+/// See `stdout()` for more notes about this function.\n+pub fn stdin_raw() -> StdReader {\n     src(libc::STDIN_FILENO, true, |src| StdReader { inner: src })\n }\n "}, {"sha": "56390b70ab3bc32cfac347204707e4f5333f5f27", "filename": "src/test/bench/sudoku.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/068781e5aa6d2b6af04aeb6c44de4296a5a0b004/src%2Ftest%2Fbench%2Fsudoku.rs", "raw_url": "https://github.com/rust-lang/rust/raw/068781e5aa6d2b6af04aeb6c44de4296a5a0b004/src%2Ftest%2Fbench%2Fsudoku.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fsudoku.rs?ref=068781e5aa6d2b6af04aeb6c44de4296a5a0b004", "patch": "@@ -278,7 +278,7 @@ fn main() {\n     let mut sudoku = if use_default {\n         Sudoku::from_vec(&DEFAULT_SUDOKU)\n     } else {\n-        Sudoku::read(BufferedReader::new(io::stdin()))\n+        Sudoku::read(io::stdin())\n     };\n     sudoku.solve();\n     sudoku.write(&mut io::stdout());"}]}