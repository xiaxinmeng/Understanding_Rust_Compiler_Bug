{"sha": "e39c92e7aa2cd77659d504b05ad59e38388866f7", "node_id": "C_kwDOAAsO6NoAKGUzOWM5MmU3YWEyY2Q3NzY1OWQ1MDRiMDVhZDU5ZTM4Mzg4ODY2Zjc", "commit": {"author": {"name": "Xavier Denis", "email": "xldenis@gmail.com", "date": "2022-06-10T06:16:56Z"}, "committer": {"name": "Xavier Denis", "email": "xldenis@gmail.com", "date": "2022-06-10T20:06:26Z"}, "message": "Actually fix", "tree": {"sha": "c0e5410f978d0cd6c86a738e6e9a463262df458e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c0e5410f978d0cd6c86a738e6e9a463262df458e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e39c92e7aa2cd77659d504b05ad59e38388866f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e39c92e7aa2cd77659d504b05ad59e38388866f7", "html_url": "https://github.com/rust-lang/rust/commit/e39c92e7aa2cd77659d504b05ad59e38388866f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e39c92e7aa2cd77659d504b05ad59e38388866f7/comments", "author": {"login": "xldenis", "id": 451373, "node_id": "MDQ6VXNlcjQ1MTM3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/451373?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xldenis", "html_url": "https://github.com/xldenis", "followers_url": "https://api.github.com/users/xldenis/followers", "following_url": "https://api.github.com/users/xldenis/following{/other_user}", "gists_url": "https://api.github.com/users/xldenis/gists{/gist_id}", "starred_url": "https://api.github.com/users/xldenis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xldenis/subscriptions", "organizations_url": "https://api.github.com/users/xldenis/orgs", "repos_url": "https://api.github.com/users/xldenis/repos", "events_url": "https://api.github.com/users/xldenis/events{/privacy}", "received_events_url": "https://api.github.com/users/xldenis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xldenis", "id": 451373, "node_id": "MDQ6VXNlcjQ1MTM3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/451373?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xldenis", "html_url": "https://github.com/xldenis", "followers_url": "https://api.github.com/users/xldenis/followers", "following_url": "https://api.github.com/users/xldenis/following{/other_user}", "gists_url": "https://api.github.com/users/xldenis/gists{/gist_id}", "starred_url": "https://api.github.com/users/xldenis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xldenis/subscriptions", "organizations_url": "https://api.github.com/users/xldenis/orgs", "repos_url": "https://api.github.com/users/xldenis/repos", "events_url": "https://api.github.com/users/xldenis/events{/privacy}", "received_events_url": "https://api.github.com/users/xldenis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc75f0e5dab9e11056a177cf60d25586983a4050", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc75f0e5dab9e11056a177cf60d25586983a4050", "html_url": "https://github.com/rust-lang/rust/commit/cc75f0e5dab9e11056a177cf60d25586983a4050"}], "stats": {"total": 1670, "additions": 895, "deletions": 775}, "files": [{"sha": "182a9a5cc5d0659510250ff0fbd9b912c3a45141", "filename": "compiler/rustc_mir_build/src/build/expr/into.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e39c92e7aa2cd77659d504b05ad59e38388866f7/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e39c92e7aa2cd77659d504b05ad59e38388866f7/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs?ref=e39c92e7aa2cd77659d504b05ad59e38388866f7", "patch": "@@ -63,14 +63,17 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         (if_then_scope, then_source_info),\n                         LintLevel::Inherited,\n                         |this| {\n+                            let variable_scope =\n+                                this.new_source_scope(then_expr.span, LintLevel::Inherited, None);\n+                            this.source_scope = variable_scope;\n                             let (then_block, else_block) =\n                                 this.in_if_then_scope(condition_scope, |this| {\n                                     let then_blk = unpack!(this.then_else_break(\n                                         block,\n                                         &this.thir[cond],\n                                         Some(condition_scope),\n                                         condition_scope,\n-                                        then_expr.span\n+                                        SourceInfo { span: then_expr.span, scope: variable_scope }\n                                     ));\n \n                                     this.expr_into_dest(destination, then_blk, then_expr)"}, {"sha": "9d5c262ed3025147f0fe1c26f9bf0e42e81193fb", "filename": "compiler/rustc_mir_build/src/build/matches/mod.rs", "status": "modified", "additions": 19, "deletions": 18, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/e39c92e7aa2cd77659d504b05ad59e38388866f7/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e39c92e7aa2cd77659d504b05ad59e38388866f7/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs?ref=e39c92e7aa2cd77659d504b05ad59e38388866f7", "patch": "@@ -41,7 +41,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         expr: &Expr<'tcx>,\n         temp_scope_override: Option<region::Scope>,\n         break_scope: region::Scope,\n-        variable_span: Span,\n+        variable_source_info: SourceInfo,\n     ) -> BlockAnd<()> {\n         let this = self;\n         let expr_span = expr.span;\n@@ -53,15 +53,15 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     &this.thir[lhs],\n                     temp_scope_override,\n                     break_scope,\n-                    variable_span,\n+                    variable_source_info,\n                 ));\n \n                 let rhs_then_block = unpack!(this.then_else_break(\n                     lhs_then_block,\n                     &this.thir[rhs],\n                     temp_scope_override,\n                     break_scope,\n-                    variable_span,\n+                    variable_source_info,\n                 ));\n \n                 rhs_then_block.unit()\n@@ -74,23 +74,18 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         &this.thir[value],\n                         temp_scope_override,\n                         break_scope,\n-                        variable_span,\n+                        variable_source_info,\n                     )\n                 })\n             }\n-            ExprKind::Let { expr, ref pat } => {\n-                let variable_scope =\n-                    this.new_source_scope(variable_span, LintLevel::Inherited, None);\n-                this.source_scope = variable_scope;\n-                this.lower_let_expr(\n-                    block,\n-                    &this.thir[expr],\n-                    pat,\n-                    break_scope,\n-                    Some(variable_scope),\n-                    variable_span,\n-                )\n-            }\n+            ExprKind::Let { expr, ref pat } => this.lower_let_expr(\n+                block,\n+                &this.thir[expr],\n+                pat,\n+                break_scope,\n+                Some(variable_source_info.scope),\n+                variable_source_info.span,\n+            ),\n             _ => {\n                 let temp_scope = temp_scope_override.unwrap_or_else(|| this.local_scope());\n                 let mutability = Mutability::Mut;\n@@ -1988,7 +1983,13 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     Guard::If(e) => {\n                         let e = &this.thir[e];\n                         guard_span = e.span;\n-                        this.then_else_break(block, e, None, match_scope, arm_span)\n+                        this.then_else_break(\n+                            block,\n+                            e,\n+                            None,\n+                            match_scope,\n+                            this.source_info(arm_span),\n+                        )\n                     }\n                     Guard::IfLet(ref pat, scrutinee) => {\n                         let s = &this.thir[scrutinee];"}, {"sha": "ff608f7f5cebfdeca344a29c1ff2ef270d11e53a", "filename": "src/test/mir-opt/bool_compare.opt1.InstCombine.diff", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Fbool_compare.opt1.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Fbool_compare.opt1.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbool_compare.opt1.InstCombine.diff?ref=e39c92e7aa2cd77659d504b05ad59e38388866f7", "patch": "@@ -6,19 +6,21 @@\n       let mut _0: u32;                     // return place in scope 0 at $DIR/bool_compare.rs:2:21: 2:24\n       let mut _2: bool;                    // in scope 0 at $DIR/bool_compare.rs:3:8: 3:17\n       let mut _3: bool;                    // in scope 0 at $DIR/bool_compare.rs:3:8: 3:9\n+      scope 1 {\n+      }\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/bool_compare.rs:3:8: 3:17\n-          StorageLive(_3);                 // scope 0 at $DIR/bool_compare.rs:3:8: 3:9\n-          _3 = _1;                         // scope 0 at $DIR/bool_compare.rs:3:8: 3:9\n--         _2 = Ne(move _3, const true);    // scope 0 at $DIR/bool_compare.rs:3:8: 3:17\n-+         _2 = Not(move _3);               // scope 0 at $DIR/bool_compare.rs:3:8: 3:17\n-          StorageDead(_3);                 // scope 0 at $DIR/bool_compare.rs:3:16: 3:17\n-          switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/bool_compare.rs:3:8: 3:17\n+          StorageLive(_2);                 // scope 1 at $DIR/bool_compare.rs:3:8: 3:17\n+          StorageLive(_3);                 // scope 1 at $DIR/bool_compare.rs:3:8: 3:9\n+          _3 = _1;                         // scope 1 at $DIR/bool_compare.rs:3:8: 3:9\n+-         _2 = Ne(move _3, const true);    // scope 1 at $DIR/bool_compare.rs:3:8: 3:17\n++         _2 = Not(move _3);               // scope 1 at $DIR/bool_compare.rs:3:8: 3:17\n+          StorageDead(_3);                 // scope 1 at $DIR/bool_compare.rs:3:16: 3:17\n+          switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 1 at $DIR/bool_compare.rs:3:8: 3:17\n       }\n   \n       bb1: {\n-          _0 = const 0_u32;                // scope 0 at $DIR/bool_compare.rs:3:20: 3:21\n+          _0 = const 0_u32;                // scope 1 at $DIR/bool_compare.rs:3:20: 3:21\n           goto -> bb3;                     // scope 0 at $DIR/bool_compare.rs:3:5: 3:34\n       }\n   "}, {"sha": "8395b22b8e2e744425a9fa7eea09da25cb297e14", "filename": "src/test/mir-opt/bool_compare.opt2.InstCombine.diff", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Fbool_compare.opt2.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Fbool_compare.opt2.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbool_compare.opt2.InstCombine.diff?ref=e39c92e7aa2cd77659d504b05ad59e38388866f7", "patch": "@@ -6,19 +6,21 @@\n       let mut _0: u32;                     // return place in scope 0 at $DIR/bool_compare.rs:7:21: 7:24\n       let mut _2: bool;                    // in scope 0 at $DIR/bool_compare.rs:8:8: 8:17\n       let mut _3: bool;                    // in scope 0 at $DIR/bool_compare.rs:8:16: 8:17\n+      scope 1 {\n+      }\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/bool_compare.rs:8:8: 8:17\n-          StorageLive(_3);                 // scope 0 at $DIR/bool_compare.rs:8:16: 8:17\n-          _3 = _1;                         // scope 0 at $DIR/bool_compare.rs:8:16: 8:17\n--         _2 = Ne(const true, move _3);    // scope 0 at $DIR/bool_compare.rs:8:8: 8:17\n-+         _2 = Not(move _3);               // scope 0 at $DIR/bool_compare.rs:8:8: 8:17\n-          StorageDead(_3);                 // scope 0 at $DIR/bool_compare.rs:8:16: 8:17\n-          switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/bool_compare.rs:8:8: 8:17\n+          StorageLive(_2);                 // scope 1 at $DIR/bool_compare.rs:8:8: 8:17\n+          StorageLive(_3);                 // scope 1 at $DIR/bool_compare.rs:8:16: 8:17\n+          _3 = _1;                         // scope 1 at $DIR/bool_compare.rs:8:16: 8:17\n+-         _2 = Ne(const true, move _3);    // scope 1 at $DIR/bool_compare.rs:8:8: 8:17\n++         _2 = Not(move _3);               // scope 1 at $DIR/bool_compare.rs:8:8: 8:17\n+          StorageDead(_3);                 // scope 1 at $DIR/bool_compare.rs:8:16: 8:17\n+          switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 1 at $DIR/bool_compare.rs:8:8: 8:17\n       }\n   \n       bb1: {\n-          _0 = const 0_u32;                // scope 0 at $DIR/bool_compare.rs:8:20: 8:21\n+          _0 = const 0_u32;                // scope 1 at $DIR/bool_compare.rs:8:20: 8:21\n           goto -> bb3;                     // scope 0 at $DIR/bool_compare.rs:8:5: 8:34\n       }\n   "}, {"sha": "413b5fdf20850f301e63801d46462068f1a4406f", "filename": "src/test/mir-opt/bool_compare.opt3.InstCombine.diff", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Fbool_compare.opt3.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Fbool_compare.opt3.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbool_compare.opt3.InstCombine.diff?ref=e39c92e7aa2cd77659d504b05ad59e38388866f7", "patch": "@@ -6,19 +6,21 @@\n       let mut _0: u32;                     // return place in scope 0 at $DIR/bool_compare.rs:12:21: 12:24\n       let mut _2: bool;                    // in scope 0 at $DIR/bool_compare.rs:13:8: 13:18\n       let mut _3: bool;                    // in scope 0 at $DIR/bool_compare.rs:13:8: 13:9\n+      scope 1 {\n+      }\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/bool_compare.rs:13:8: 13:18\n-          StorageLive(_3);                 // scope 0 at $DIR/bool_compare.rs:13:8: 13:9\n-          _3 = _1;                         // scope 0 at $DIR/bool_compare.rs:13:8: 13:9\n--         _2 = Eq(move _3, const false);   // scope 0 at $DIR/bool_compare.rs:13:8: 13:18\n-+         _2 = Not(move _3);               // scope 0 at $DIR/bool_compare.rs:13:8: 13:18\n-          StorageDead(_3);                 // scope 0 at $DIR/bool_compare.rs:13:17: 13:18\n-          switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/bool_compare.rs:13:8: 13:18\n+          StorageLive(_2);                 // scope 1 at $DIR/bool_compare.rs:13:8: 13:18\n+          StorageLive(_3);                 // scope 1 at $DIR/bool_compare.rs:13:8: 13:9\n+          _3 = _1;                         // scope 1 at $DIR/bool_compare.rs:13:8: 13:9\n+-         _2 = Eq(move _3, const false);   // scope 1 at $DIR/bool_compare.rs:13:8: 13:18\n++         _2 = Not(move _3);               // scope 1 at $DIR/bool_compare.rs:13:8: 13:18\n+          StorageDead(_3);                 // scope 1 at $DIR/bool_compare.rs:13:17: 13:18\n+          switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 1 at $DIR/bool_compare.rs:13:8: 13:18\n       }\n   \n       bb1: {\n-          _0 = const 0_u32;                // scope 0 at $DIR/bool_compare.rs:13:21: 13:22\n+          _0 = const 0_u32;                // scope 1 at $DIR/bool_compare.rs:13:21: 13:22\n           goto -> bb3;                     // scope 0 at $DIR/bool_compare.rs:13:5: 13:35\n       }\n   "}, {"sha": "ba4496aa2c9f4caf25d5401ceea4ced9bbb8d687", "filename": "src/test/mir-opt/bool_compare.opt4.InstCombine.diff", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Fbool_compare.opt4.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Fbool_compare.opt4.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbool_compare.opt4.InstCombine.diff?ref=e39c92e7aa2cd77659d504b05ad59e38388866f7", "patch": "@@ -6,19 +6,21 @@\n       let mut _0: u32;                     // return place in scope 0 at $DIR/bool_compare.rs:17:21: 17:24\n       let mut _2: bool;                    // in scope 0 at $DIR/bool_compare.rs:18:8: 18:18\n       let mut _3: bool;                    // in scope 0 at $DIR/bool_compare.rs:18:17: 18:18\n+      scope 1 {\n+      }\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/bool_compare.rs:18:8: 18:18\n-          StorageLive(_3);                 // scope 0 at $DIR/bool_compare.rs:18:17: 18:18\n-          _3 = _1;                         // scope 0 at $DIR/bool_compare.rs:18:17: 18:18\n--         _2 = Eq(const false, move _3);   // scope 0 at $DIR/bool_compare.rs:18:8: 18:18\n-+         _2 = Not(move _3);               // scope 0 at $DIR/bool_compare.rs:18:8: 18:18\n-          StorageDead(_3);                 // scope 0 at $DIR/bool_compare.rs:18:17: 18:18\n-          switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/bool_compare.rs:18:8: 18:18\n+          StorageLive(_2);                 // scope 1 at $DIR/bool_compare.rs:18:8: 18:18\n+          StorageLive(_3);                 // scope 1 at $DIR/bool_compare.rs:18:17: 18:18\n+          _3 = _1;                         // scope 1 at $DIR/bool_compare.rs:18:17: 18:18\n+-         _2 = Eq(const false, move _3);   // scope 1 at $DIR/bool_compare.rs:18:8: 18:18\n++         _2 = Not(move _3);               // scope 1 at $DIR/bool_compare.rs:18:8: 18:18\n+          StorageDead(_3);                 // scope 1 at $DIR/bool_compare.rs:18:17: 18:18\n+          switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 1 at $DIR/bool_compare.rs:18:8: 18:18\n       }\n   \n       bb1: {\n-          _0 = const 0_u32;                // scope 0 at $DIR/bool_compare.rs:18:21: 18:22\n+          _0 = const 0_u32;                // scope 1 at $DIR/bool_compare.rs:18:21: 18:22\n           goto -> bb3;                     // scope 0 at $DIR/bool_compare.rs:18:5: 18:35\n       }\n   "}, {"sha": "3173d09fddc138302ddefe69f901bed976d30194", "filename": "src/test/mir-opt/const_goto.issue_77355_opt.ConstGoto.diff", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Fconst_goto.issue_77355_opt.ConstGoto.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Fconst_goto.issue_77355_opt.ConstGoto.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_goto.issue_77355_opt.ConstGoto.diff?ref=e39c92e7aa2cd77659d504b05ad59e38388866f7", "patch": "@@ -7,33 +7,35 @@\n -     let mut _2: bool;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n -     let mut _3: isize;                   // in scope 0 at $DIR/const_goto.rs:12:22: 12:28\n +     let mut _2: isize;                   // in scope 0 at $DIR/const_goto.rs:12:22: 12:28\n+      scope 1 {\n+      }\n   \n       bb0: {\n--         StorageLive(_2);                 // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n--         _3 = discriminant(_1);           // scope 0 at $DIR/const_goto.rs:12:17: 12:20\n--         switchInt(move _3) -> [1_isize: bb2, 2_isize: bb2, otherwise: bb1]; // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-+         _2 = discriminant(_1);           // scope 0 at $DIR/const_goto.rs:12:17: 12:20\n-+         switchInt(move _2) -> [1_isize: bb2, 2_isize: bb2, otherwise: bb1]; // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+-         StorageLive(_2);                 // scope 1 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+-         _3 = discriminant(_1);           // scope 1 at $DIR/const_goto.rs:12:17: 12:20\n+-         switchInt(move _3) -> [1_isize: bb2, 2_isize: bb2, otherwise: bb1]; // scope 1 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n++         _2 = discriminant(_1);           // scope 1 at $DIR/const_goto.rs:12:17: 12:20\n++         switchInt(move _2) -> [1_isize: bb2, 2_isize: bb2, otherwise: bb1]; // scope 1 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       }\n   \n       bb1: {\n--         _2 = const false;                // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n--         goto -> bb3;                     // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+-         _2 = const false;                // scope 1 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+-         goto -> bb3;                     // scope 1 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n +         _0 = const 42_u64;               // scope 0 at $DIR/const_goto.rs:12:53: 12:55\n +         goto -> bb3;                     // scope 0 at $DIR/const_goto.rs:12:5: 12:57\n       }\n   \n       bb2: {\n--         _2 = const true;                 // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n--         goto -> bb3;                     // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+-         _2 = const true;                 // scope 1 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+-         goto -> bb3;                     // scope 1 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n -     }\n - \n -     bb3: {\n--         switchInt(move _2) -> [false: bb5, otherwise: bb4]; // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+-         switchInt(move _2) -> [false: bb5, otherwise: bb4]; // scope 1 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n -     }\n - \n -     bb4: {\n-          _0 = const 23_u64;               // scope 0 at $DIR/const_goto.rs:12:41: 12:43\n+          _0 = const 23_u64;               // scope 1 at $DIR/const_goto.rs:12:41: 12:43\n -         goto -> bb6;                     // scope 0 at $DIR/const_goto.rs:12:5: 12:57\n +         goto -> bb3;                     // scope 0 at $DIR/const_goto.rs:12:5: 12:57\n       }"}, {"sha": "33925e41faa6285d99e757139451d43ffc1243d4", "filename": "src/test/mir-opt/const_goto_storage.match_nested_if.ConstGoto.diff", "status": "modified", "additions": 29, "deletions": 23, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Fconst_goto_storage.match_nested_if.ConstGoto.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Fconst_goto_storage.match_nested_if.ConstGoto.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_goto_storage.match_nested_if.ConstGoto.diff?ref=e39c92e7aa2cd77659d504b05ad59e38388866f7", "patch": "@@ -13,54 +13,60 @@\n       scope 1 {\n           debug val => _1;                 // in scope 1 at $DIR/const_goto_storage.rs:3:9: 3:12\n       }\n+      scope 2 {\n+          scope 3 {\n+              scope 4 {\n+              }\n+          }\n+      }\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/const_goto_storage.rs:3:9: 3:12\n -         StorageLive(_2);                 // scope 0 at $DIR/const_goto_storage.rs:3:21: 3:23\n -         nop;                             // scope 0 at $DIR/const_goto_storage.rs:3:21: 3:23\n -         StorageLive(_3);                 // scope 0 at $DIR/const_goto_storage.rs:4:15: 8:10\n--         StorageLive(_4);                 // scope 0 at $DIR/const_goto_storage.rs:4:18: 4:76\n--         StorageLive(_5);                 // scope 0 at $DIR/const_goto_storage.rs:4:21: 4:52\n--         StorageLive(_6);                 // scope 0 at $DIR/const_goto_storage.rs:4:24: 4:28\n--         _6 = const true;                 // scope 0 at $DIR/const_goto_storage.rs:4:24: 4:28\n--         switchInt(move _6) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/const_goto_storage.rs:4:24: 4:28\n-+         StorageLive(_2);                 // scope 0 at $DIR/const_goto_storage.rs:4:24: 4:28\n-+         _2 = const true;                 // scope 0 at $DIR/const_goto_storage.rs:4:24: 4:28\n-+         switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/const_goto_storage.rs:4:24: 4:28\n+-         StorageLive(_4);                 // scope 2 at $DIR/const_goto_storage.rs:4:18: 4:76\n+-         StorageLive(_5);                 // scope 3 at $DIR/const_goto_storage.rs:4:21: 4:52\n+-         StorageLive(_6);                 // scope 4 at $DIR/const_goto_storage.rs:4:24: 4:28\n+-         _6 = const true;                 // scope 4 at $DIR/const_goto_storage.rs:4:24: 4:28\n+-         switchInt(move _6) -> [false: bb2, otherwise: bb1]; // scope 4 at $DIR/const_goto_storage.rs:4:24: 4:28\n++         StorageLive(_2);                 // scope 4 at $DIR/const_goto_storage.rs:4:24: 4:28\n++         _2 = const true;                 // scope 4 at $DIR/const_goto_storage.rs:4:24: 4:28\n++         switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 4 at $DIR/const_goto_storage.rs:4:24: 4:28\n       }\n   \n       bb1: {\n--         _5 = const true;                 // scope 0 at $DIR/const_goto_storage.rs:4:31: 4:35\n--         goto -> bb3;                     // scope 0 at $DIR/const_goto_storage.rs:4:21: 4:52\n+-         _5 = const true;                 // scope 4 at $DIR/const_goto_storage.rs:4:31: 4:35\n+-         goto -> bb3;                     // scope 3 at $DIR/const_goto_storage.rs:4:21: 4:52\n -     }\n - \n -     bb2: {\n--         _5 = const false;                // scope 0 at $DIR/const_goto_storage.rs:4:45: 4:50\n--         goto -> bb3;                     // scope 0 at $DIR/const_goto_storage.rs:4:21: 4:52\n+-         _5 = const false;                // scope 3 at $DIR/const_goto_storage.rs:4:45: 4:50\n+-         goto -> bb3;                     // scope 3 at $DIR/const_goto_storage.rs:4:21: 4:52\n -     }\n - \n -     bb3: {\n--         StorageDead(_6);                 // scope 0 at $DIR/const_goto_storage.rs:4:51: 4:52\n--         switchInt(move _5) -> [false: bb5, otherwise: bb4]; // scope 0 at $DIR/const_goto_storage.rs:4:21: 4:52\n+-         StorageDead(_6);                 // scope 3 at $DIR/const_goto_storage.rs:4:51: 4:52\n+-         switchInt(move _5) -> [false: bb5, otherwise: bb4]; // scope 3 at $DIR/const_goto_storage.rs:4:21: 4:52\n -     }\n - \n -     bb4: {\n--         _4 = const true;                 // scope 0 at $DIR/const_goto_storage.rs:4:55: 4:59\n--         goto -> bb6;                     // scope 0 at $DIR/const_goto_storage.rs:4:18: 4:76\n+-         _4 = const true;                 // scope 3 at $DIR/const_goto_storage.rs:4:55: 4:59\n+-         goto -> bb6;                     // scope 2 at $DIR/const_goto_storage.rs:4:18: 4:76\n -     }\n - \n -     bb5: {\n--         _4 = const false;                // scope 0 at $DIR/const_goto_storage.rs:4:69: 4:74\n--         goto -> bb6;                     // scope 0 at $DIR/const_goto_storage.rs:4:18: 4:76\n+-         _4 = const false;                // scope 2 at $DIR/const_goto_storage.rs:4:69: 4:74\n+-         goto -> bb6;                     // scope 2 at $DIR/const_goto_storage.rs:4:18: 4:76\n -     }\n - \n -     bb6: {\n--         StorageDead(_5);                 // scope 0 at $DIR/const_goto_storage.rs:4:75: 4:76\n--         switchInt(move _4) -> [false: bb8, otherwise: bb7]; // scope 0 at $DIR/const_goto_storage.rs:4:18: 4:76\n+-         StorageDead(_5);                 // scope 2 at $DIR/const_goto_storage.rs:4:75: 4:76\n+-         switchInt(move _4) -> [false: bb8, otherwise: bb7]; // scope 2 at $DIR/const_goto_storage.rs:4:18: 4:76\n -     }\n - \n -     bb7: {\n--         _3 = const true;                 // scope 0 at $DIR/const_goto_storage.rs:5:13: 5:17\n+-         _3 = const true;                 // scope 2 at $DIR/const_goto_storage.rs:5:13: 5:17\n -         goto -> bb9;                     // scope 0 at $DIR/const_goto_storage.rs:4:15: 8:10\n -     }\n - \n@@ -76,7 +82,7 @@\n -     bb10: {\n -         StorageDead(_4);                 // scope 0 at $DIR/const_goto_storage.rs:8:9: 8:10\n -         StorageDead(_3);                 // scope 0 at $DIR/const_goto_storage.rs:8:9: 8:10\n-+         StorageDead(_2);                 // scope 0 at $DIR/const_goto_storage.rs:4:51: 4:52\n++         StorageDead(_2);                 // scope 3 at $DIR/const_goto_storage.rs:4:51: 4:52\n           _1 = const true;                 // scope 0 at $DIR/const_goto_storage.rs:10:17: 10:21\n -         goto -> bb12;                    // scope 0 at $DIR/const_goto_storage.rs:10:17: 10:21\n +         goto -> bb3;                     // scope 0 at $DIR/const_goto_storage.rs:10:17: 10:21\n@@ -86,7 +92,7 @@\n -         StorageDead(_4);                 // scope 0 at $DIR/const_goto_storage.rs:8:9: 8:10\n -         StorageDead(_3);                 // scope 0 at $DIR/const_goto_storage.rs:8:9: 8:10\n +     bb2: {\n-+         StorageDead(_2);                 // scope 0 at $DIR/const_goto_storage.rs:4:51: 4:52\n++         StorageDead(_2);                 // scope 3 at $DIR/const_goto_storage.rs:4:51: 4:52\n           _1 = const false;                // scope 0 at $DIR/const_goto_storage.rs:12:14: 12:19\n -         goto -> bb12;                    // scope 0 at $DIR/const_goto_storage.rs:12:14: 12:19\n +         goto -> bb3;                     // scope 0 at $DIR/const_goto_storage.rs:12:14: 12:19"}, {"sha": "3d9517fb504c3ce335898571d0872bba9d574a3b", "filename": "src/test/mir-opt/const_prop/control_flow_simplification.hello.ConstProp.diff", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcontrol_flow_simplification.hello.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcontrol_flow_simplification.hello.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcontrol_flow_simplification.hello.ConstProp.diff?ref=e39c92e7aa2cd77659d504b05ad59e38388866f7", "patch": "@@ -5,18 +5,20 @@\n       let mut _0: ();                      // return place in scope 0 at $DIR/control-flow-simplification.rs:11:14: 11:14\n       let mut _1: bool;                    // in scope 0 at $DIR/control-flow-simplification.rs:12:8: 12:21\n       let mut _2: !;                       // in scope 0 at $SRC_DIR/std/src/panic.rs:LL:COL\n+      scope 1 {\n+      }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/control-flow-simplification.rs:12:8: 12:21\n--         _1 = const <bool as NeedsDrop>::NEEDS; // scope 0 at $DIR/control-flow-simplification.rs:12:8: 12:21\n--         switchInt(move _1) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/control-flow-simplification.rs:12:8: 12:21\n-+         _1 = const false;                // scope 0 at $DIR/control-flow-simplification.rs:12:8: 12:21\n-+         switchInt(const false) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/control-flow-simplification.rs:12:8: 12:21\n+          StorageLive(_1);                 // scope 1 at $DIR/control-flow-simplification.rs:12:8: 12:21\n+-         _1 = const <bool as NeedsDrop>::NEEDS; // scope 1 at $DIR/control-flow-simplification.rs:12:8: 12:21\n+-         switchInt(move _1) -> [false: bb2, otherwise: bb1]; // scope 1 at $DIR/control-flow-simplification.rs:12:8: 12:21\n++         _1 = const false;                // scope 1 at $DIR/control-flow-simplification.rs:12:8: 12:21\n++         switchInt(const false) -> [false: bb2, otherwise: bb1]; // scope 1 at $DIR/control-flow-simplification.rs:12:8: 12:21\n       }\n   \n       bb1: {\n-          StorageLive(_2);                 // scope 0 at $SRC_DIR/std/src/panic.rs:LL:COL\n-          _2 = begin_panic::<&str>(const \"explicit panic\"); // scope 0 at $SRC_DIR/std/src/panic.rs:LL:COL\n+          StorageLive(_2);                 // scope 1 at $SRC_DIR/std/src/panic.rs:LL:COL\n+          _2 = begin_panic::<&str>(const \"explicit panic\"); // scope 1 at $SRC_DIR/std/src/panic.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/std/src/panic.rs:LL:COL\n                                            // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(Scalar(<ZST>)) }"}, {"sha": "4b11e4ebec6ac73a683bfb867cd356aeaa3dd8ed", "filename": "src/test/mir-opt/const_prop/control_flow_simplification.hello.PreCodegen.before.mir", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcontrol_flow_simplification.hello.PreCodegen.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcontrol_flow_simplification.hello.PreCodegen.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcontrol_flow_simplification.hello.PreCodegen.before.mir?ref=e39c92e7aa2cd77659d504b05ad59e38388866f7", "patch": "@@ -2,6 +2,8 @@\n \n fn hello() -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/control-flow-simplification.rs:11:14: 11:14\n+    scope 1 {\n+    }\n \n     bb0: {\n         return;                          // scope 0 at $DIR/control-flow-simplification.rs:15:2: 15:2"}, {"sha": "047853696f228c93be89cbe81a7aa323ac43ade0", "filename": "src/test/mir-opt/const_prop/discriminant.main.ConstProp.64bit.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant.main.ConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant.main.ConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant.main.ConstProp.64bit.diff?ref=e39c92e7aa2cd77659d504b05ad59e38388866f7", "patch": "@@ -31,7 +31,7 @@\n       }\n   \n       bb2: {\n-          _2 = const 42_i32;               // scope 0 at $DIR/discriminant.rs:11:47: 11:49\n+          _2 = const 42_i32;               // scope 2 at $DIR/discriminant.rs:11:47: 11:49\n           goto -> bb4;                     // scope 0 at $DIR/discriminant.rs:11:13: 11:64\n       }\n   "}, {"sha": "9f2ae1c90cad3a794f110cc2f053769ae38b069e", "filename": "src/test/mir-opt/dead-store-elimination/cycle.cycle.DeadStoreElimination.diff", "status": "modified", "additions": 31, "deletions": 29, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Fdead-store-elimination%2Fcycle.cycle.DeadStoreElimination.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Fdead-store-elimination%2Fcycle.cycle.DeadStoreElimination.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdead-store-elimination%2Fcycle.cycle.DeadStoreElimination.diff?ref=e39c92e7aa2cd77659d504b05ad59e38388866f7", "patch": "@@ -8,58 +8,60 @@\n       let mut _0: ();                      // return place in scope 0 at $DIR/cycle.rs:9:46: 9:46\n       let mut _4: ();                      // in scope 0 at $DIR/cycle.rs:9:1: 18:2\n       let mut _5: bool;                    // in scope 0 at $DIR/cycle.rs:12:11: 12:17\n-      let _6: i32;                         // in scope 0 at $DIR/cycle.rs:13:13: 13:17\n       let mut _7: i32;                     // in scope 0 at $DIR/cycle.rs:14:13: 14:14\n       let mut _8: i32;                     // in scope 0 at $DIR/cycle.rs:15:13: 15:14\n       let mut _9: i32;                     // in scope 0 at $DIR/cycle.rs:16:13: 16:17\n       let mut _10: !;                      // in scope 0 at $DIR/cycle.rs:12:5: 17:6\n       let _11: ();                         // in scope 0 at $DIR/cycle.rs:12:5: 17:6\n       let mut _12: !;                      // in scope 0 at $DIR/cycle.rs:12:5: 17:6\n       scope 1 {\n-          debug temp => _6;                // in scope 1 at $DIR/cycle.rs:13:13: 13:17\n+          let _6: i32;                     // in scope 1 at $DIR/cycle.rs:13:13: 13:17\n+          scope 2 {\n+              debug temp => _6;            // in scope 2 at $DIR/cycle.rs:13:13: 13:17\n+          }\n       }\n   \n       bb0: {\n           goto -> bb1;                     // scope 0 at $DIR/cycle.rs:12:5: 17:6\n       }\n   \n       bb1: {\n-          StorageLive(_5);                 // scope 0 at $DIR/cycle.rs:12:11: 12:17\n-          _5 = cond() -> bb2;              // scope 0 at $DIR/cycle.rs:12:11: 12:17\n+          StorageLive(_5);                 // scope 1 at $DIR/cycle.rs:12:11: 12:17\n+          _5 = cond() -> bb2;              // scope 1 at $DIR/cycle.rs:12:11: 12:17\n                                            // mir::Constant\n                                            // + span: $DIR/cycle.rs:12:11: 12:15\n                                            // + literal: Const { ty: fn() -> bool {cond}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb2: {\n-          switchInt(move _5) -> [false: bb4, otherwise: bb3]; // scope 0 at $DIR/cycle.rs:12:11: 12:17\n+          switchInt(move _5) -> [false: bb4, otherwise: bb3]; // scope 1 at $DIR/cycle.rs:12:11: 12:17\n       }\n   \n       bb3: {\n-          StorageLive(_6);                 // scope 0 at $DIR/cycle.rs:13:13: 13:17\n--         _6 = _3;                         // scope 0 at $DIR/cycle.rs:13:20: 13:21\n-+         nop;                             // scope 0 at $DIR/cycle.rs:13:20: 13:21\n-          StorageLive(_7);                 // scope 1 at $DIR/cycle.rs:14:13: 14:14\n--         _7 = _2;                         // scope 1 at $DIR/cycle.rs:14:13: 14:14\n--         _3 = move _7;                    // scope 1 at $DIR/cycle.rs:14:9: 14:14\n-+         nop;                             // scope 1 at $DIR/cycle.rs:14:13: 14:14\n-+         nop;                             // scope 1 at $DIR/cycle.rs:14:9: 14:14\n-          StorageDead(_7);                 // scope 1 at $DIR/cycle.rs:14:13: 14:14\n-          StorageLive(_8);                 // scope 1 at $DIR/cycle.rs:15:13: 15:14\n--         _8 = _1;                         // scope 1 at $DIR/cycle.rs:15:13: 15:14\n--         _2 = move _8;                    // scope 1 at $DIR/cycle.rs:15:9: 15:14\n-+         nop;                             // scope 1 at $DIR/cycle.rs:15:13: 15:14\n-+         nop;                             // scope 1 at $DIR/cycle.rs:15:9: 15:14\n-          StorageDead(_8);                 // scope 1 at $DIR/cycle.rs:15:13: 15:14\n-          StorageLive(_9);                 // scope 1 at $DIR/cycle.rs:16:13: 16:17\n--         _9 = _6;                         // scope 1 at $DIR/cycle.rs:16:13: 16:17\n--         _1 = move _9;                    // scope 1 at $DIR/cycle.rs:16:9: 16:17\n-+         nop;                             // scope 1 at $DIR/cycle.rs:16:13: 16:17\n-+         nop;                             // scope 1 at $DIR/cycle.rs:16:9: 16:17\n-          StorageDead(_9);                 // scope 1 at $DIR/cycle.rs:16:16: 16:17\n--         _4 = const ();                   // scope 0 at $DIR/cycle.rs:12:18: 17:6\n-+         nop;                             // scope 0 at $DIR/cycle.rs:12:18: 17:6\n-          StorageDead(_6);                 // scope 0 at $DIR/cycle.rs:17:5: 17:6\n+          StorageLive(_6);                 // scope 1 at $DIR/cycle.rs:13:13: 13:17\n+-         _6 = _3;                         // scope 1 at $DIR/cycle.rs:13:20: 13:21\n++         nop;                             // scope 1 at $DIR/cycle.rs:13:20: 13:21\n+          StorageLive(_7);                 // scope 2 at $DIR/cycle.rs:14:13: 14:14\n+-         _7 = _2;                         // scope 2 at $DIR/cycle.rs:14:13: 14:14\n+-         _3 = move _7;                    // scope 2 at $DIR/cycle.rs:14:9: 14:14\n++         nop;                             // scope 2 at $DIR/cycle.rs:14:13: 14:14\n++         nop;                             // scope 2 at $DIR/cycle.rs:14:9: 14:14\n+          StorageDead(_7);                 // scope 2 at $DIR/cycle.rs:14:13: 14:14\n+          StorageLive(_8);                 // scope 2 at $DIR/cycle.rs:15:13: 15:14\n+-         _8 = _1;                         // scope 2 at $DIR/cycle.rs:15:13: 15:14\n+-         _2 = move _8;                    // scope 2 at $DIR/cycle.rs:15:9: 15:14\n++         nop;                             // scope 2 at $DIR/cycle.rs:15:13: 15:14\n++         nop;                             // scope 2 at $DIR/cycle.rs:15:9: 15:14\n+          StorageDead(_8);                 // scope 2 at $DIR/cycle.rs:15:13: 15:14\n+          StorageLive(_9);                 // scope 2 at $DIR/cycle.rs:16:13: 16:17\n+-         _9 = _6;                         // scope 2 at $DIR/cycle.rs:16:13: 16:17\n+-         _1 = move _9;                    // scope 2 at $DIR/cycle.rs:16:9: 16:17\n++         nop;                             // scope 2 at $DIR/cycle.rs:16:13: 16:17\n++         nop;                             // scope 2 at $DIR/cycle.rs:16:9: 16:17\n+          StorageDead(_9);                 // scope 2 at $DIR/cycle.rs:16:16: 16:17\n+-         _4 = const ();                   // scope 1 at $DIR/cycle.rs:12:18: 17:6\n++         nop;                             // scope 1 at $DIR/cycle.rs:12:18: 17:6\n+          StorageDead(_6);                 // scope 1 at $DIR/cycle.rs:17:5: 17:6\n           StorageDead(_5);                 // scope 0 at $DIR/cycle.rs:17:5: 17:6\n           goto -> bb1;                     // scope 0 at $DIR/cycle.rs:12:5: 17:6\n       }"}, {"sha": "089f43b5169f46f728c52e9db01cf9d02462494b", "filename": "src/test/mir-opt/deaggregator_test_enum_2.test1.Deaggregator.diff", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_enum_2.test1.Deaggregator.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_enum_2.test1.Deaggregator.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_enum_2.test1.Deaggregator.diff?ref=e39c92e7aa2cd77659d504b05ad59e38388866f7", "patch": "@@ -8,21 +8,23 @@\n       let mut _3: bool;                    // in scope 0 at $DIR/deaggregator_test_enum_2.rs:10:8: 10:9\n       let mut _4: i32;                     // in scope 0 at $DIR/deaggregator_test_enum_2.rs:11:16: 11:17\n       let mut _5: i32;                     // in scope 0 at $DIR/deaggregator_test_enum_2.rs:13:16: 13:17\n+      scope 1 {\n+      }\n   \n       bb0: {\n-          StorageLive(_3);                 // scope 0 at $DIR/deaggregator_test_enum_2.rs:10:8: 10:9\n-          _3 = _1;                         // scope 0 at $DIR/deaggregator_test_enum_2.rs:10:8: 10:9\n-          switchInt(move _3) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/deaggregator_test_enum_2.rs:10:8: 10:9\n+          StorageLive(_3);                 // scope 1 at $DIR/deaggregator_test_enum_2.rs:10:8: 10:9\n+          _3 = _1;                         // scope 1 at $DIR/deaggregator_test_enum_2.rs:10:8: 10:9\n+          switchInt(move _3) -> [false: bb2, otherwise: bb1]; // scope 1 at $DIR/deaggregator_test_enum_2.rs:10:8: 10:9\n       }\n   \n       bb1: {\n-          StorageLive(_4);                 // scope 0 at $DIR/deaggregator_test_enum_2.rs:11:16: 11:17\n-          _4 = _2;                         // scope 0 at $DIR/deaggregator_test_enum_2.rs:11:16: 11:17\n--         _0 = Foo::A(move _4);            // scope 0 at $DIR/deaggregator_test_enum_2.rs:11:9: 11:18\n-+         Deinit(_0);                      // scope 0 at $DIR/deaggregator_test_enum_2.rs:11:9: 11:18\n-+         ((_0 as A).0: i32) = move _4;    // scope 0 at $DIR/deaggregator_test_enum_2.rs:11:9: 11:18\n-+         discriminant(_0) = 0;            // scope 0 at $DIR/deaggregator_test_enum_2.rs:11:9: 11:18\n-          StorageDead(_4);                 // scope 0 at $DIR/deaggregator_test_enum_2.rs:11:17: 11:18\n+          StorageLive(_4);                 // scope 1 at $DIR/deaggregator_test_enum_2.rs:11:16: 11:17\n+          _4 = _2;                         // scope 1 at $DIR/deaggregator_test_enum_2.rs:11:16: 11:17\n+-         _0 = Foo::A(move _4);            // scope 1 at $DIR/deaggregator_test_enum_2.rs:11:9: 11:18\n++         Deinit(_0);                      // scope 1 at $DIR/deaggregator_test_enum_2.rs:11:9: 11:18\n++         ((_0 as A).0: i32) = move _4;    // scope 1 at $DIR/deaggregator_test_enum_2.rs:11:9: 11:18\n++         discriminant(_0) = 0;            // scope 1 at $DIR/deaggregator_test_enum_2.rs:11:9: 11:18\n+          StorageDead(_4);                 // scope 1 at $DIR/deaggregator_test_enum_2.rs:11:17: 11:18\n           goto -> bb3;                     // scope 0 at $DIR/deaggregator_test_enum_2.rs:10:5: 14:6\n       }\n   "}, {"sha": "e33057e81fa1e0b1171847e154a261d8a06f249f", "filename": "src/test/mir-opt/dest-prop/branch.main.DestinationPropagation.diff", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fbranch.main.DestinationPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fbranch.main.DestinationPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fbranch.main.DestinationPropagation.diff?ref=e39c92e7aa2cd77659d504b05ad59e38388866f7", "patch": "@@ -12,6 +12,8 @@\n           scope 2 {\n               debug y => _2;               // in scope 2 at $DIR/branch.rs:15:9: 15:10\n           }\n+          scope 3 {\n+          }\n       }\n   \n       bb0: {\n@@ -24,19 +26,19 @@\n   \n       bb1: {\n           StorageLive(_2);                 // scope 1 at $DIR/branch.rs:15:9: 15:10\n-          StorageLive(_3);                 // scope 1 at $DIR/branch.rs:15:16: 15:22\n-          _3 = cond() -> bb2;              // scope 1 at $DIR/branch.rs:15:16: 15:22\n+          StorageLive(_3);                 // scope 3 at $DIR/branch.rs:15:16: 15:22\n+          _3 = cond() -> bb2;              // scope 3 at $DIR/branch.rs:15:16: 15:22\n                                            // mir::Constant\n                                            // + span: $DIR/branch.rs:15:16: 15:20\n                                            // + literal: Const { ty: fn() -> bool {cond}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb2: {\n-          switchInt(move _3) -> [false: bb4, otherwise: bb3]; // scope 1 at $DIR/branch.rs:15:16: 15:22\n+          switchInt(move _3) -> [false: bb4, otherwise: bb3]; // scope 3 at $DIR/branch.rs:15:16: 15:22\n       }\n   \n       bb3: {\n-          nop;                             // scope 1 at $DIR/branch.rs:16:9: 16:10\n+          nop;                             // scope 3 at $DIR/branch.rs:16:9: 16:10\n           goto -> bb6;                     // scope 1 at $DIR/branch.rs:15:13: 20:6\n       }\n   "}, {"sha": "982dd7a27bc6b3ca884db8b5f50fb58817f70bfe", "filename": "src/test/mir-opt/early_otherwise_branch_soundness.no_downcast.EarlyOtherwiseBranch.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_soundness.no_downcast.EarlyOtherwiseBranch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_soundness.no_downcast.EarlyOtherwiseBranch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_soundness.no_downcast.EarlyOtherwiseBranch.diff?ref=e39c92e7aa2cd77659d504b05ad59e38388866f7", "patch": "@@ -24,7 +24,7 @@\n       }\n   \n       bb2: {\n-          _0 = const 1_u32;                // scope 0 at $DIR/early_otherwise_branch_soundness.rs:13:38: 13:39\n+          _0 = const 1_u32;                // scope 1 at $DIR/early_otherwise_branch_soundness.rs:13:38: 13:39\n           goto -> bb4;                     // scope 0 at $DIR/early_otherwise_branch_soundness.rs:13:5: 13:52\n       }\n   "}, {"sha": "56f2fede4377b8fbe0e278a7df02ff834ee070f6", "filename": "src/test/mir-opt/equal_true.opt.InstCombine.diff", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Fequal_true.opt.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Fequal_true.opt.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fequal_true.opt.InstCombine.diff?ref=e39c92e7aa2cd77659d504b05ad59e38388866f7", "patch": "@@ -6,19 +6,21 @@\n       let mut _0: i32;                     // return place in scope 0 at $DIR/equal_true.rs:3:20: 3:23\n       let mut _2: bool;                    // in scope 0 at $DIR/equal_true.rs:4:8: 4:17\n       let mut _3: bool;                    // in scope 0 at $DIR/equal_true.rs:4:8: 4:9\n+      scope 1 {\n+      }\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/equal_true.rs:4:8: 4:17\n-          StorageLive(_3);                 // scope 0 at $DIR/equal_true.rs:4:8: 4:9\n-          _3 = _1;                         // scope 0 at $DIR/equal_true.rs:4:8: 4:9\n--         _2 = Eq(move _3, const true);    // scope 0 at $DIR/equal_true.rs:4:8: 4:17\n-+         _2 = move _3;                    // scope 0 at $DIR/equal_true.rs:4:8: 4:17\n-          StorageDead(_3);                 // scope 0 at $DIR/equal_true.rs:4:16: 4:17\n-          switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/equal_true.rs:4:8: 4:17\n+          StorageLive(_2);                 // scope 1 at $DIR/equal_true.rs:4:8: 4:17\n+          StorageLive(_3);                 // scope 1 at $DIR/equal_true.rs:4:8: 4:9\n+          _3 = _1;                         // scope 1 at $DIR/equal_true.rs:4:8: 4:9\n+-         _2 = Eq(move _3, const true);    // scope 1 at $DIR/equal_true.rs:4:8: 4:17\n++         _2 = move _3;                    // scope 1 at $DIR/equal_true.rs:4:8: 4:17\n+          StorageDead(_3);                 // scope 1 at $DIR/equal_true.rs:4:16: 4:17\n+          switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 1 at $DIR/equal_true.rs:4:8: 4:17\n       }\n   \n       bb1: {\n-          _0 = const 0_i32;                // scope 0 at $DIR/equal_true.rs:4:20: 4:21\n+          _0 = const 0_i32;                // scope 1 at $DIR/equal_true.rs:4:20: 4:21\n           goto -> bb3;                     // scope 0 at $DIR/equal_true.rs:4:5: 4:34\n       }\n   "}, {"sha": "15409fa0dd23c2ae54dfcf4098ba888bbfd27b4b", "filename": "src/test/mir-opt/funky_arms.float_to_exponential_common.ConstProp.diff", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Ffunky_arms.float_to_exponential_common.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Ffunky_arms.float_to_exponential_common.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Ffunky_arms.float_to_exponential_common.ConstProp.diff?ref=e39c92e7aa2cd77659d504b05ad59e38388866f7", "patch": "@@ -81,34 +81,34 @@\n       bb6: {\n           StorageLive(_10);                // scope 3 at $DIR/funky_arms.rs:24:17: 24:26\n           _10 = ((_7 as Some).0: usize);   // scope 3 at $DIR/funky_arms.rs:24:17: 24:26\n-          StorageLive(_11);                // scope 2 at $DIR/funky_arms.rs:26:43: 26:46\n-          _11 = &mut (*_1);                // scope 2 at $DIR/funky_arms.rs:26:43: 26:46\n-          StorageLive(_12);                // scope 2 at $DIR/funky_arms.rs:26:48: 26:51\n-          _12 = _2;                        // scope 2 at $DIR/funky_arms.rs:26:48: 26:51\n-          StorageLive(_13);                // scope 2 at $DIR/funky_arms.rs:26:53: 26:57\n-          _13 = _6;                        // scope 2 at $DIR/funky_arms.rs:26:53: 26:57\n-          StorageLive(_14);                // scope 2 at $DIR/funky_arms.rs:26:59: 26:79\n-          StorageLive(_15);                // scope 2 at $DIR/funky_arms.rs:26:59: 26:75\n-          StorageLive(_16);                // scope 2 at $DIR/funky_arms.rs:26:59: 26:68\n-          _16 = _10;                       // scope 2 at $DIR/funky_arms.rs:26:59: 26:68\n-          _15 = move _16 as u32 (Misc);    // scope 2 at $DIR/funky_arms.rs:26:59: 26:75\n-          StorageDead(_16);                // scope 2 at $DIR/funky_arms.rs:26:74: 26:75\n-          _14 = Add(move _15, const 1_u32); // scope 2 at $DIR/funky_arms.rs:26:59: 26:79\n-          StorageDead(_15);                // scope 2 at $DIR/funky_arms.rs:26:78: 26:79\n-          StorageLive(_17);                // scope 2 at $DIR/funky_arms.rs:26:81: 26:86\n-          _17 = _3;                        // scope 2 at $DIR/funky_arms.rs:26:81: 26:86\n-          _0 = float_to_exponential_common_exact::<T>(move _11, move _12, move _13, move _14, move _17) -> bb7; // scope 2 at $DIR/funky_arms.rs:26:9: 26:87\n+          StorageLive(_11);                // scope 3 at $DIR/funky_arms.rs:26:43: 26:46\n+          _11 = &mut (*_1);                // scope 3 at $DIR/funky_arms.rs:26:43: 26:46\n+          StorageLive(_12);                // scope 3 at $DIR/funky_arms.rs:26:48: 26:51\n+          _12 = _2;                        // scope 3 at $DIR/funky_arms.rs:26:48: 26:51\n+          StorageLive(_13);                // scope 3 at $DIR/funky_arms.rs:26:53: 26:57\n+          _13 = _6;                        // scope 3 at $DIR/funky_arms.rs:26:53: 26:57\n+          StorageLive(_14);                // scope 3 at $DIR/funky_arms.rs:26:59: 26:79\n+          StorageLive(_15);                // scope 3 at $DIR/funky_arms.rs:26:59: 26:75\n+          StorageLive(_16);                // scope 3 at $DIR/funky_arms.rs:26:59: 26:68\n+          _16 = _10;                       // scope 3 at $DIR/funky_arms.rs:26:59: 26:68\n+          _15 = move _16 as u32 (Misc);    // scope 3 at $DIR/funky_arms.rs:26:59: 26:75\n+          StorageDead(_16);                // scope 3 at $DIR/funky_arms.rs:26:74: 26:75\n+          _14 = Add(move _15, const 1_u32); // scope 3 at $DIR/funky_arms.rs:26:59: 26:79\n+          StorageDead(_15);                // scope 3 at $DIR/funky_arms.rs:26:78: 26:79\n+          StorageLive(_17);                // scope 3 at $DIR/funky_arms.rs:26:81: 26:86\n+          _17 = _3;                        // scope 3 at $DIR/funky_arms.rs:26:81: 26:86\n+          _0 = float_to_exponential_common_exact::<T>(move _11, move _12, move _13, move _14, move _17) -> bb7; // scope 3 at $DIR/funky_arms.rs:26:9: 26:87\n                                            // mir::Constant\n                                            // + span: $DIR/funky_arms.rs:26:9: 26:42\n                                            // + literal: Const { ty: for<'r, 's, 't0> fn(&'r mut Formatter<'s>, &'t0 T, Sign, u32, bool) -> Result<(), std::fmt::Error> {float_to_exponential_common_exact::<T>}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb7: {\n-          StorageDead(_17);                // scope 2 at $DIR/funky_arms.rs:26:86: 26:87\n-          StorageDead(_14);                // scope 2 at $DIR/funky_arms.rs:26:86: 26:87\n-          StorageDead(_13);                // scope 2 at $DIR/funky_arms.rs:26:86: 26:87\n-          StorageDead(_12);                // scope 2 at $DIR/funky_arms.rs:26:86: 26:87\n-          StorageDead(_11);                // scope 2 at $DIR/funky_arms.rs:26:86: 26:87\n+          StorageDead(_17);                // scope 3 at $DIR/funky_arms.rs:26:86: 26:87\n+          StorageDead(_14);                // scope 3 at $DIR/funky_arms.rs:26:86: 26:87\n+          StorageDead(_13);                // scope 3 at $DIR/funky_arms.rs:26:86: 26:87\n+          StorageDead(_12);                // scope 3 at $DIR/funky_arms.rs:26:86: 26:87\n+          StorageDead(_11);                // scope 3 at $DIR/funky_arms.rs:26:86: 26:87\n           StorageDead(_10);                // scope 2 at $DIR/funky_arms.rs:27:5: 27:6\n           goto -> bb10;                    // scope 2 at $DIR/funky_arms.rs:24:5: 29:6\n       }"}, {"sha": "1baa7c7677a06252be1e83a7f86d7c8ab4a7dd0e", "filename": "src/test/mir-opt/if_condition_int.dont_opt_bool.SimplifyComparisonIntegral.diff", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Fif_condition_int.dont_opt_bool.SimplifyComparisonIntegral.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Fif_condition_int.dont_opt_bool.SimplifyComparisonIntegral.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fif_condition_int.dont_opt_bool.SimplifyComparisonIntegral.diff?ref=e39c92e7aa2cd77659d504b05ad59e38388866f7", "patch": "@@ -5,15 +5,17 @@\n       debug x => _1;                       // in scope 0 at $DIR/if-condition-int.rs:16:18: 16:19\n       let mut _0: u32;                     // return place in scope 0 at $DIR/if-condition-int.rs:16:30: 16:33\n       let mut _2: bool;                    // in scope 0 at $DIR/if-condition-int.rs:17:8: 17:9\n+      scope 1 {\n+      }\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/if-condition-int.rs:17:8: 17:9\n-          _2 = _1;                         // scope 0 at $DIR/if-condition-int.rs:17:8: 17:9\n-          switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/if-condition-int.rs:17:8: 17:9\n+          StorageLive(_2);                 // scope 1 at $DIR/if-condition-int.rs:17:8: 17:9\n+          _2 = _1;                         // scope 1 at $DIR/if-condition-int.rs:17:8: 17:9\n+          switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 1 at $DIR/if-condition-int.rs:17:8: 17:9\n       }\n   \n       bb1: {\n-          _0 = const 0_u32;                // scope 0 at $DIR/if-condition-int.rs:17:12: 17:13\n+          _0 = const 0_u32;                // scope 1 at $DIR/if-condition-int.rs:17:12: 17:13\n           goto -> bb3;                     // scope 0 at $DIR/if-condition-int.rs:17:5: 17:26\n       }\n   "}, {"sha": "13933ea52f7076faee83014a142708f3bb85d351", "filename": "src/test/mir-opt/if_condition_int.dont_opt_floats.SimplifyComparisonIntegral.diff", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Fif_condition_int.dont_opt_floats.SimplifyComparisonIntegral.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Fif_condition_int.dont_opt_floats.SimplifyComparisonIntegral.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fif_condition_int.dont_opt_floats.SimplifyComparisonIntegral.diff?ref=e39c92e7aa2cd77659d504b05ad59e38388866f7", "patch": "@@ -6,18 +6,20 @@\n       let mut _0: i32;                     // return place in scope 0 at $DIR/if-condition-int.rs:52:31: 52:34\n       let mut _2: bool;                    // in scope 0 at $DIR/if-condition-int.rs:53:8: 53:18\n       let mut _3: f32;                     // in scope 0 at $DIR/if-condition-int.rs:53:8: 53:9\n+      scope 1 {\n+      }\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/if-condition-int.rs:53:8: 53:18\n-          StorageLive(_3);                 // scope 0 at $DIR/if-condition-int.rs:53:8: 53:9\n-          _3 = _1;                         // scope 0 at $DIR/if-condition-int.rs:53:8: 53:9\n-          _2 = Eq(move _3, const -42f32);  // scope 0 at $DIR/if-condition-int.rs:53:8: 53:18\n-          StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:53:17: 53:18\n-          switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/if-condition-int.rs:53:8: 53:18\n+          StorageLive(_2);                 // scope 1 at $DIR/if-condition-int.rs:53:8: 53:18\n+          StorageLive(_3);                 // scope 1 at $DIR/if-condition-int.rs:53:8: 53:9\n+          _3 = _1;                         // scope 1 at $DIR/if-condition-int.rs:53:8: 53:9\n+          _2 = Eq(move _3, const -42f32);  // scope 1 at $DIR/if-condition-int.rs:53:8: 53:18\n+          StorageDead(_3);                 // scope 1 at $DIR/if-condition-int.rs:53:17: 53:18\n+          switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 1 at $DIR/if-condition-int.rs:53:8: 53:18\n       }\n   \n       bb1: {\n-          _0 = const 0_i32;                // scope 0 at $DIR/if-condition-int.rs:53:21: 53:22\n+          _0 = const 0_i32;                // scope 1 at $DIR/if-condition-int.rs:53:21: 53:22\n           goto -> bb3;                     // scope 0 at $DIR/if-condition-int.rs:53:5: 53:35\n       }\n   "}, {"sha": "543818fdda0e67c578b924961abe6a458589191c", "filename": "src/test/mir-opt/if_condition_int.opt_char.SimplifyComparisonIntegral.diff", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_char.SimplifyComparisonIntegral.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_char.SimplifyComparisonIntegral.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_char.SimplifyComparisonIntegral.diff?ref=e39c92e7aa2cd77659d504b05ad59e38388866f7", "patch": "@@ -6,27 +6,29 @@\n       let mut _0: u32;                     // return place in scope 0 at $DIR/if-condition-int.rs:20:25: 20:28\n       let mut _2: bool;                    // in scope 0 at $DIR/if-condition-int.rs:21:8: 21:16\n       let mut _3: char;                    // in scope 0 at $DIR/if-condition-int.rs:21:8: 21:9\n+      scope 1 {\n+      }\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/if-condition-int.rs:21:8: 21:16\n-          StorageLive(_3);                 // scope 0 at $DIR/if-condition-int.rs:21:8: 21:9\n-          _3 = _1;                         // scope 0 at $DIR/if-condition-int.rs:21:8: 21:9\n--         _2 = Eq(move _3, const 'x');     // scope 0 at $DIR/if-condition-int.rs:21:8: 21:16\n--         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:21:15: 21:16\n--         switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/if-condition-int.rs:21:8: 21:16\n-+         nop;                             // scope 0 at $DIR/if-condition-int.rs:21:8: 21:16\n-+         nop;                             // scope 0 at $DIR/if-condition-int.rs:21:15: 21:16\n-+         switchInt(move _3) -> ['x': bb1, otherwise: bb2]; // scope 0 at $DIR/if-condition-int.rs:21:8: 21:16\n+          StorageLive(_2);                 // scope 1 at $DIR/if-condition-int.rs:21:8: 21:16\n+          StorageLive(_3);                 // scope 1 at $DIR/if-condition-int.rs:21:8: 21:9\n+          _3 = _1;                         // scope 1 at $DIR/if-condition-int.rs:21:8: 21:9\n+-         _2 = Eq(move _3, const 'x');     // scope 1 at $DIR/if-condition-int.rs:21:8: 21:16\n+-         StorageDead(_3);                 // scope 1 at $DIR/if-condition-int.rs:21:15: 21:16\n+-         switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 1 at $DIR/if-condition-int.rs:21:8: 21:16\n++         nop;                             // scope 1 at $DIR/if-condition-int.rs:21:8: 21:16\n++         nop;                             // scope 1 at $DIR/if-condition-int.rs:21:15: 21:16\n++         switchInt(move _3) -> ['x': bb1, otherwise: bb2]; // scope 1 at $DIR/if-condition-int.rs:21:8: 21:16\n       }\n   \n       bb1: {\n-+         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:21:8: 21:16\n-          _0 = const 0_u32;                // scope 0 at $DIR/if-condition-int.rs:21:19: 21:20\n++         StorageDead(_3);                 // scope 1 at $DIR/if-condition-int.rs:21:8: 21:16\n+          _0 = const 0_u32;                // scope 1 at $DIR/if-condition-int.rs:21:19: 21:20\n           goto -> bb3;                     // scope 0 at $DIR/if-condition-int.rs:21:5: 21:33\n       }\n   \n       bb2: {\n-+         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:21:8: 21:16\n++         StorageDead(_3);                 // scope 1 at $DIR/if-condition-int.rs:21:8: 21:16\n           _0 = const 1_u32;                // scope 0 at $DIR/if-condition-int.rs:21:30: 21:31\n           goto -> bb3;                     // scope 0 at $DIR/if-condition-int.rs:21:5: 21:33\n       }"}, {"sha": "92e770c15e53c843262c9290e505b4bab6cbaefb", "filename": "src/test/mir-opt/if_condition_int.opt_i8.SimplifyComparisonIntegral.diff", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_i8.SimplifyComparisonIntegral.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_i8.SimplifyComparisonIntegral.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_i8.SimplifyComparisonIntegral.diff?ref=e39c92e7aa2cd77659d504b05ad59e38388866f7", "patch": "@@ -6,27 +6,29 @@\n       let mut _0: u32;                     // return place in scope 0 at $DIR/if-condition-int.rs:24:21: 24:24\n       let mut _2: bool;                    // in scope 0 at $DIR/if-condition-int.rs:25:8: 25:15\n       let mut _3: i8;                      // in scope 0 at $DIR/if-condition-int.rs:25:8: 25:9\n+      scope 1 {\n+      }\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/if-condition-int.rs:25:8: 25:15\n-          StorageLive(_3);                 // scope 0 at $DIR/if-condition-int.rs:25:8: 25:9\n-          _3 = _1;                         // scope 0 at $DIR/if-condition-int.rs:25:8: 25:9\n--         _2 = Eq(move _3, const 42_i8);   // scope 0 at $DIR/if-condition-int.rs:25:8: 25:15\n--         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:25:14: 25:15\n--         switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/if-condition-int.rs:25:8: 25:15\n-+         nop;                             // scope 0 at $DIR/if-condition-int.rs:25:8: 25:15\n-+         nop;                             // scope 0 at $DIR/if-condition-int.rs:25:14: 25:15\n-+         switchInt(move _3) -> [42_i8: bb1, otherwise: bb2]; // scope 0 at $DIR/if-condition-int.rs:25:8: 25:15\n+          StorageLive(_2);                 // scope 1 at $DIR/if-condition-int.rs:25:8: 25:15\n+          StorageLive(_3);                 // scope 1 at $DIR/if-condition-int.rs:25:8: 25:9\n+          _3 = _1;                         // scope 1 at $DIR/if-condition-int.rs:25:8: 25:9\n+-         _2 = Eq(move _3, const 42_i8);   // scope 1 at $DIR/if-condition-int.rs:25:8: 25:15\n+-         StorageDead(_3);                 // scope 1 at $DIR/if-condition-int.rs:25:14: 25:15\n+-         switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 1 at $DIR/if-condition-int.rs:25:8: 25:15\n++         nop;                             // scope 1 at $DIR/if-condition-int.rs:25:8: 25:15\n++         nop;                             // scope 1 at $DIR/if-condition-int.rs:25:14: 25:15\n++         switchInt(move _3) -> [42_i8: bb1, otherwise: bb2]; // scope 1 at $DIR/if-condition-int.rs:25:8: 25:15\n       }\n   \n       bb1: {\n-+         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:25:8: 25:15\n-          _0 = const 0_u32;                // scope 0 at $DIR/if-condition-int.rs:25:18: 25:19\n++         StorageDead(_3);                 // scope 1 at $DIR/if-condition-int.rs:25:8: 25:15\n+          _0 = const 0_u32;                // scope 1 at $DIR/if-condition-int.rs:25:18: 25:19\n           goto -> bb3;                     // scope 0 at $DIR/if-condition-int.rs:25:5: 25:32\n       }\n   \n       bb2: {\n-+         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:25:8: 25:15\n++         StorageDead(_3);                 // scope 1 at $DIR/if-condition-int.rs:25:8: 25:15\n           _0 = const 1_u32;                // scope 0 at $DIR/if-condition-int.rs:25:29: 25:30\n           goto -> bb3;                     // scope 0 at $DIR/if-condition-int.rs:25:5: 25:32\n       }"}, {"sha": "6a3d8a948be167ad1b72c3d4bc37a40c6260bbac", "filename": "src/test/mir-opt/if_condition_int.opt_multiple_ifs.SimplifyComparisonIntegral.diff", "status": "modified", "additions": 28, "deletions": 24, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_multiple_ifs.SimplifyComparisonIntegral.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_multiple_ifs.SimplifyComparisonIntegral.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_multiple_ifs.SimplifyComparisonIntegral.diff?ref=e39c92e7aa2cd77659d504b05ad59e38388866f7", "patch": "@@ -8,46 +8,50 @@\n       let mut _3: u32;                     // in scope 0 at $DIR/if-condition-int.rs:33:8: 33:9\n       let mut _4: bool;                    // in scope 0 at $DIR/if-condition-int.rs:35:15: 35:22\n       let mut _5: u32;                     // in scope 0 at $DIR/if-condition-int.rs:35:15: 35:16\n+      scope 1 {\n+      }\n+      scope 2 {\n+      }\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/if-condition-int.rs:33:8: 33:15\n-          StorageLive(_3);                 // scope 0 at $DIR/if-condition-int.rs:33:8: 33:9\n-          _3 = _1;                         // scope 0 at $DIR/if-condition-int.rs:33:8: 33:9\n--         _2 = Eq(move _3, const 42_u32);  // scope 0 at $DIR/if-condition-int.rs:33:8: 33:15\n--         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:33:14: 33:15\n--         switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/if-condition-int.rs:33:8: 33:15\n-+         nop;                             // scope 0 at $DIR/if-condition-int.rs:33:8: 33:15\n-+         nop;                             // scope 0 at $DIR/if-condition-int.rs:33:14: 33:15\n-+         switchInt(move _3) -> [42_u32: bb1, otherwise: bb2]; // scope 0 at $DIR/if-condition-int.rs:33:8: 33:15\n+          StorageLive(_2);                 // scope 1 at $DIR/if-condition-int.rs:33:8: 33:15\n+          StorageLive(_3);                 // scope 1 at $DIR/if-condition-int.rs:33:8: 33:9\n+          _3 = _1;                         // scope 1 at $DIR/if-condition-int.rs:33:8: 33:9\n+-         _2 = Eq(move _3, const 42_u32);  // scope 1 at $DIR/if-condition-int.rs:33:8: 33:15\n+-         StorageDead(_3);                 // scope 1 at $DIR/if-condition-int.rs:33:14: 33:15\n+-         switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 1 at $DIR/if-condition-int.rs:33:8: 33:15\n++         nop;                             // scope 1 at $DIR/if-condition-int.rs:33:8: 33:15\n++         nop;                             // scope 1 at $DIR/if-condition-int.rs:33:14: 33:15\n++         switchInt(move _3) -> [42_u32: bb1, otherwise: bb2]; // scope 1 at $DIR/if-condition-int.rs:33:8: 33:15\n       }\n   \n       bb1: {\n-+         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:33:8: 33:15\n-          _0 = const 0_u32;                // scope 0 at $DIR/if-condition-int.rs:34:9: 34:10\n++         StorageDead(_3);                 // scope 1 at $DIR/if-condition-int.rs:33:8: 33:15\n+          _0 = const 0_u32;                // scope 1 at $DIR/if-condition-int.rs:34:9: 34:10\n           goto -> bb6;                     // scope 0 at $DIR/if-condition-int.rs:33:5: 39:6\n       }\n   \n       bb2: {\n-+         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:33:8: 33:15\n-          StorageLive(_4);                 // scope 0 at $DIR/if-condition-int.rs:35:15: 35:22\n-          StorageLive(_5);                 // scope 0 at $DIR/if-condition-int.rs:35:15: 35:16\n-          _5 = _1;                         // scope 0 at $DIR/if-condition-int.rs:35:15: 35:16\n--         _4 = Ne(move _5, const 21_u32);  // scope 0 at $DIR/if-condition-int.rs:35:15: 35:22\n--         StorageDead(_5);                 // scope 0 at $DIR/if-condition-int.rs:35:21: 35:22\n--         switchInt(move _4) -> [false: bb4, otherwise: bb3]; // scope 0 at $DIR/if-condition-int.rs:35:15: 35:22\n-+         nop;                             // scope 0 at $DIR/if-condition-int.rs:35:15: 35:22\n-+         nop;                             // scope 0 at $DIR/if-condition-int.rs:35:21: 35:22\n-+         switchInt(move _5) -> [21_u32: bb4, otherwise: bb3]; // scope 0 at $DIR/if-condition-int.rs:35:15: 35:22\n++         StorageDead(_3);                 // scope 1 at $DIR/if-condition-int.rs:33:8: 33:15\n+          StorageLive(_4);                 // scope 2 at $DIR/if-condition-int.rs:35:15: 35:22\n+          StorageLive(_5);                 // scope 2 at $DIR/if-condition-int.rs:35:15: 35:16\n+          _5 = _1;                         // scope 2 at $DIR/if-condition-int.rs:35:15: 35:16\n+-         _4 = Ne(move _5, const 21_u32);  // scope 2 at $DIR/if-condition-int.rs:35:15: 35:22\n+-         StorageDead(_5);                 // scope 2 at $DIR/if-condition-int.rs:35:21: 35:22\n+-         switchInt(move _4) -> [false: bb4, otherwise: bb3]; // scope 2 at $DIR/if-condition-int.rs:35:15: 35:22\n++         nop;                             // scope 2 at $DIR/if-condition-int.rs:35:15: 35:22\n++         nop;                             // scope 2 at $DIR/if-condition-int.rs:35:21: 35:22\n++         switchInt(move _5) -> [21_u32: bb4, otherwise: bb3]; // scope 2 at $DIR/if-condition-int.rs:35:15: 35:22\n       }\n   \n       bb3: {\n-+         StorageDead(_5);                 // scope 0 at $DIR/if-condition-int.rs:35:15: 35:22\n-          _0 = const 1_u32;                // scope 0 at $DIR/if-condition-int.rs:36:9: 36:10\n++         StorageDead(_5);                 // scope 2 at $DIR/if-condition-int.rs:35:15: 35:22\n+          _0 = const 1_u32;                // scope 2 at $DIR/if-condition-int.rs:36:9: 36:10\n           goto -> bb5;                     // scope 0 at $DIR/if-condition-int.rs:35:12: 39:6\n       }\n   \n       bb4: {\n-+         StorageDead(_5);                 // scope 0 at $DIR/if-condition-int.rs:35:15: 35:22\n++         StorageDead(_5);                 // scope 2 at $DIR/if-condition-int.rs:35:15: 35:22\n           _0 = const 2_u32;                // scope 0 at $DIR/if-condition-int.rs:38:9: 38:10\n           goto -> bb5;                     // scope 0 at $DIR/if-condition-int.rs:35:12: 39:6\n       }"}, {"sha": "fa2ef0c1ec5b30aed7216aa65599a107637a618c", "filename": "src/test/mir-opt/if_condition_int.opt_negative.SimplifyComparisonIntegral.diff", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_negative.SimplifyComparisonIntegral.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_negative.SimplifyComparisonIntegral.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_negative.SimplifyComparisonIntegral.diff?ref=e39c92e7aa2cd77659d504b05ad59e38388866f7", "patch": "@@ -6,27 +6,29 @@\n       let mut _0: u32;                     // return place in scope 0 at $DIR/if-condition-int.rs:28:28: 28:31\n       let mut _2: bool;                    // in scope 0 at $DIR/if-condition-int.rs:29:8: 29:16\n       let mut _3: i32;                     // in scope 0 at $DIR/if-condition-int.rs:29:8: 29:9\n+      scope 1 {\n+      }\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/if-condition-int.rs:29:8: 29:16\n-          StorageLive(_3);                 // scope 0 at $DIR/if-condition-int.rs:29:8: 29:9\n-          _3 = _1;                         // scope 0 at $DIR/if-condition-int.rs:29:8: 29:9\n--         _2 = Eq(move _3, const -42_i32); // scope 0 at $DIR/if-condition-int.rs:29:8: 29:16\n--         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:29:15: 29:16\n--         switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/if-condition-int.rs:29:8: 29:16\n-+         nop;                             // scope 0 at $DIR/if-condition-int.rs:29:8: 29:16\n-+         nop;                             // scope 0 at $DIR/if-condition-int.rs:29:15: 29:16\n-+         switchInt(move _3) -> [-42_i32: bb1, otherwise: bb2]; // scope 0 at $DIR/if-condition-int.rs:29:8: 29:16\n+          StorageLive(_2);                 // scope 1 at $DIR/if-condition-int.rs:29:8: 29:16\n+          StorageLive(_3);                 // scope 1 at $DIR/if-condition-int.rs:29:8: 29:9\n+          _3 = _1;                         // scope 1 at $DIR/if-condition-int.rs:29:8: 29:9\n+-         _2 = Eq(move _3, const -42_i32); // scope 1 at $DIR/if-condition-int.rs:29:8: 29:16\n+-         StorageDead(_3);                 // scope 1 at $DIR/if-condition-int.rs:29:15: 29:16\n+-         switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 1 at $DIR/if-condition-int.rs:29:8: 29:16\n++         nop;                             // scope 1 at $DIR/if-condition-int.rs:29:8: 29:16\n++         nop;                             // scope 1 at $DIR/if-condition-int.rs:29:15: 29:16\n++         switchInt(move _3) -> [-42_i32: bb1, otherwise: bb2]; // scope 1 at $DIR/if-condition-int.rs:29:8: 29:16\n       }\n   \n       bb1: {\n-+         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:29:8: 29:16\n-          _0 = const 0_u32;                // scope 0 at $DIR/if-condition-int.rs:29:19: 29:20\n++         StorageDead(_3);                 // scope 1 at $DIR/if-condition-int.rs:29:8: 29:16\n+          _0 = const 0_u32;                // scope 1 at $DIR/if-condition-int.rs:29:19: 29:20\n           goto -> bb3;                     // scope 0 at $DIR/if-condition-int.rs:29:5: 29:33\n       }\n   \n       bb2: {\n-+         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:29:8: 29:16\n++         StorageDead(_3);                 // scope 1 at $DIR/if-condition-int.rs:29:8: 29:16\n           _0 = const 1_u32;                // scope 0 at $DIR/if-condition-int.rs:29:30: 29:31\n           goto -> bb3;                     // scope 0 at $DIR/if-condition-int.rs:29:5: 29:33\n       }"}, {"sha": "9549e198060c4095951e486ca79eb7e9bdf117fd", "filename": "src/test/mir-opt/if_condition_int.opt_u32.SimplifyComparisonIntegral.diff", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_u32.SimplifyComparisonIntegral.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_u32.SimplifyComparisonIntegral.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fif_condition_int.opt_u32.SimplifyComparisonIntegral.diff?ref=e39c92e7aa2cd77659d504b05ad59e38388866f7", "patch": "@@ -6,27 +6,29 @@\n       let mut _0: u32;                     // return place in scope 0 at $DIR/if-condition-int.rs:11:23: 11:26\n       let mut _2: bool;                    // in scope 0 at $DIR/if-condition-int.rs:12:8: 12:15\n       let mut _3: u32;                     // in scope 0 at $DIR/if-condition-int.rs:12:8: 12:9\n+      scope 1 {\n+      }\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/if-condition-int.rs:12:8: 12:15\n-          StorageLive(_3);                 // scope 0 at $DIR/if-condition-int.rs:12:8: 12:9\n-          _3 = _1;                         // scope 0 at $DIR/if-condition-int.rs:12:8: 12:9\n--         _2 = Eq(move _3, const 42_u32);  // scope 0 at $DIR/if-condition-int.rs:12:8: 12:15\n--         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:12:14: 12:15\n--         switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/if-condition-int.rs:12:8: 12:15\n-+         nop;                             // scope 0 at $DIR/if-condition-int.rs:12:8: 12:15\n-+         nop;                             // scope 0 at $DIR/if-condition-int.rs:12:14: 12:15\n-+         switchInt(move _3) -> [42_u32: bb1, otherwise: bb2]; // scope 0 at $DIR/if-condition-int.rs:12:8: 12:15\n+          StorageLive(_2);                 // scope 1 at $DIR/if-condition-int.rs:12:8: 12:15\n+          StorageLive(_3);                 // scope 1 at $DIR/if-condition-int.rs:12:8: 12:9\n+          _3 = _1;                         // scope 1 at $DIR/if-condition-int.rs:12:8: 12:9\n+-         _2 = Eq(move _3, const 42_u32);  // scope 1 at $DIR/if-condition-int.rs:12:8: 12:15\n+-         StorageDead(_3);                 // scope 1 at $DIR/if-condition-int.rs:12:14: 12:15\n+-         switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 1 at $DIR/if-condition-int.rs:12:8: 12:15\n++         nop;                             // scope 1 at $DIR/if-condition-int.rs:12:8: 12:15\n++         nop;                             // scope 1 at $DIR/if-condition-int.rs:12:14: 12:15\n++         switchInt(move _3) -> [42_u32: bb1, otherwise: bb2]; // scope 1 at $DIR/if-condition-int.rs:12:8: 12:15\n       }\n   \n       bb1: {\n-+         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:12:8: 12:15\n-          _0 = const 0_u32;                // scope 0 at $DIR/if-condition-int.rs:12:18: 12:19\n++         StorageDead(_3);                 // scope 1 at $DIR/if-condition-int.rs:12:8: 12:15\n+          _0 = const 0_u32;                // scope 1 at $DIR/if-condition-int.rs:12:18: 12:19\n           goto -> bb3;                     // scope 0 at $DIR/if-condition-int.rs:12:5: 12:32\n       }\n   \n       bb2: {\n-+         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:12:8: 12:15\n++         StorageDead(_3);                 // scope 1 at $DIR/if-condition-int.rs:12:8: 12:15\n           _0 = const 1_u32;                // scope 0 at $DIR/if-condition-int.rs:12:29: 12:30\n           goto -> bb3;                     // scope 0 at $DIR/if-condition-int.rs:12:5: 12:32\n       }"}, {"sha": "9a00bb809c6c1819f3a63abecbbd7334553a3e94", "filename": "src/test/mir-opt/inline/inline_diverging.g.Inline.diff", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.g.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.g.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.g.Inline.diff?ref=e39c92e7aa2cd77659d504b05ad59e38388866f7", "patch": "@@ -9,33 +9,35 @@\n       let mut _4: i32;                     // in scope 0 at $DIR/inline-diverging.rs:14:9: 14:10\n       let mut _5: !;                       // in scope 0 at $DIR/inline-diverging.rs:15:12: 17:6\n       let _6: !;                           // in scope 0 at $DIR/inline-diverging.rs:16:9: 16:16\n-+     scope 1 (inlined panic) {            // at $DIR/inline-diverging.rs:16:9: 16:16\n-+         let mut _7: !;                   // in scope 1 at $SRC_DIR/std/src/panic.rs:LL:COL\n+      scope 1 {\n+      }\n++     scope 2 (inlined panic) {            // at $DIR/inline-diverging.rs:16:9: 16:16\n++         let mut _7: !;                   // in scope 2 at $SRC_DIR/std/src/panic.rs:LL:COL\n +     }\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/inline-diverging.rs:13:8: 13:13\n-          StorageLive(_3);                 // scope 0 at $DIR/inline-diverging.rs:13:8: 13:9\n-          _3 = _1;                         // scope 0 at $DIR/inline-diverging.rs:13:8: 13:9\n-          _2 = Gt(move _3, const 0_i32);   // scope 0 at $DIR/inline-diverging.rs:13:8: 13:13\n-          StorageDead(_3);                 // scope 0 at $DIR/inline-diverging.rs:13:12: 13:13\n-          switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/inline-diverging.rs:13:8: 13:13\n+          StorageLive(_2);                 // scope 1 at $DIR/inline-diverging.rs:13:8: 13:13\n+          StorageLive(_3);                 // scope 1 at $DIR/inline-diverging.rs:13:8: 13:9\n+          _3 = _1;                         // scope 1 at $DIR/inline-diverging.rs:13:8: 13:9\n+          _2 = Gt(move _3, const 0_i32);   // scope 1 at $DIR/inline-diverging.rs:13:8: 13:13\n+          StorageDead(_3);                 // scope 1 at $DIR/inline-diverging.rs:13:12: 13:13\n+          switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 1 at $DIR/inline-diverging.rs:13:8: 13:13\n       }\n   \n       bb1: {\n-          StorageLive(_4);                 // scope 0 at $DIR/inline-diverging.rs:14:9: 14:10\n-          _4 = _1;                         // scope 0 at $DIR/inline-diverging.rs:14:9: 14:10\n-          _0 = move _4 as u32 (Misc);      // scope 0 at $DIR/inline-diverging.rs:14:9: 14:17\n-          StorageDead(_4);                 // scope 0 at $DIR/inline-diverging.rs:14:16: 14:17\n+          StorageLive(_4);                 // scope 1 at $DIR/inline-diverging.rs:14:9: 14:10\n+          _4 = _1;                         // scope 1 at $DIR/inline-diverging.rs:14:9: 14:10\n+          _0 = move _4 as u32 (Misc);      // scope 1 at $DIR/inline-diverging.rs:14:9: 14:17\n+          StorageDead(_4);                 // scope 1 at $DIR/inline-diverging.rs:14:16: 14:17\n           StorageDead(_2);                 // scope 0 at $DIR/inline-diverging.rs:17:5: 17:6\n           return;                          // scope 0 at $DIR/inline-diverging.rs:18:2: 18:2\n       }\n   \n       bb2: {\n           StorageLive(_6);                 // scope 0 at $DIR/inline-diverging.rs:16:9: 16:16\n -         _6 = panic();                    // scope 0 at $DIR/inline-diverging.rs:16:9: 16:16\n-+         StorageLive(_7);                 // scope 1 at $SRC_DIR/std/src/panic.rs:LL:COL\n-+         _7 = begin_panic::<&str>(const \"explicit panic\"); // scope 1 at $SRC_DIR/std/src/panic.rs:LL:COL\n++         StorageLive(_7);                 // scope 2 at $SRC_DIR/std/src/panic.rs:LL:COL\n++         _7 = begin_panic::<&str>(const \"explicit panic\"); // scope 2 at $SRC_DIR/std/src/panic.rs:LL:COL\n                                            // mir::Constant\n -                                          // + span: $DIR/inline-diverging.rs:16:9: 16:14\n -                                          // + literal: Const { ty: fn() -> ! {panic}, val: Value(Scalar(<ZST>)) }"}, {"sha": "af32b3158025731139c2174cf7a540c2dc697307", "filename": "src/test/mir-opt/inline/inline_generator.main.Inline.diff", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Finline%2Finline_generator.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Finline%2Finline_generator.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_generator.main.Inline.diff?ref=e39c92e7aa2cd77659d504b05ad59e38388866f7", "patch": "@@ -33,6 +33,8 @@\n +         let mut _13: &mut [generator@$DIR/inline-generator.rs:15:5: 15:41]; // in scope 6 at $DIR/inline-generator.rs:15:5: 15:41\n +         let mut _14: &mut [generator@$DIR/inline-generator.rs:15:5: 15:41]; // in scope 6 at $DIR/inline-generator.rs:15:5: 15:41\n +         let mut _15: &mut [generator@$DIR/inline-generator.rs:15:5: 15:41]; // in scope 6 at $DIR/inline-generator.rs:15:5: 15:41\n++         scope 7 {\n++         }\n +     }\n   \n       bb0: {\n@@ -104,13 +106,13 @@\n +     bb3: {\n +         _11 = move _7;                   // scope 6 at $DIR/inline-generator.rs:15:5: 15:41\n +         StorageLive(_8);                 // scope 6 at $DIR/inline-generator.rs:15:17: 15:39\n-+         StorageLive(_9);                 // scope 6 at $DIR/inline-generator.rs:15:20: 15:21\n-+         _9 = _11;                        // scope 6 at $DIR/inline-generator.rs:15:20: 15:21\n-+         switchInt(move _9) -> [false: bb5, otherwise: bb4]; // scope 6 at $DIR/inline-generator.rs:15:20: 15:21\n++         StorageLive(_9);                 // scope 7 at $DIR/inline-generator.rs:15:20: 15:21\n++         _9 = _11;                        // scope 7 at $DIR/inline-generator.rs:15:20: 15:21\n++         switchInt(move _9) -> [false: bb5, otherwise: bb4]; // scope 7 at $DIR/inline-generator.rs:15:20: 15:21\n +     }\n + \n +     bb4: {\n-+         _8 = const 7_i32;                // scope 6 at $DIR/inline-generator.rs:15:24: 15:25\n++         _8 = const 7_i32;                // scope 7 at $DIR/inline-generator.rs:15:24: 15:25\n +         goto -> bb6;                     // scope 6 at $DIR/inline-generator.rs:15:17: 15:39\n +     }\n + "}, {"sha": "d4fe82cc99f67bad28c9ab07cb0fb959cb2fa316", "filename": "src/test/mir-opt/issue_38669.main.SimplifyCfg-initial.after.mir", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Fissue_38669.main.SimplifyCfg-initial.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Fissue_38669.main.SimplifyCfg-initial.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_38669.main.SimplifyCfg-initial.after.mir?ref=e39c92e7aa2cd77659d504b05ad59e38388866f7", "patch": "@@ -9,6 +9,8 @@ fn main() -> () {\n     let mut _5: !;                       // in scope 0 at $DIR/issue-38669.rs:7:25: 9:10\n     scope 1 {\n         debug should_break => _1;        // in scope 1 at $DIR/issue-38669.rs:5:9: 5:25\n+        scope 2 {\n+        }\n     }\n \n     bb0: {\n@@ -24,13 +26,13 @@ fn main() -> () {\n \n     bb2: {\n         StorageLive(_3);                 // scope 1 at $DIR/issue-38669.rs:7:9: 9:10\n-        StorageLive(_4);                 // scope 1 at $DIR/issue-38669.rs:7:12: 7:24\n-        _4 = _1;                         // scope 1 at $DIR/issue-38669.rs:7:12: 7:24\n-        switchInt(move _4) -> [false: bb4, otherwise: bb3]; // scope 1 at $DIR/issue-38669.rs:7:12: 7:24\n+        StorageLive(_4);                 // scope 2 at $DIR/issue-38669.rs:7:12: 7:24\n+        _4 = _1;                         // scope 2 at $DIR/issue-38669.rs:7:12: 7:24\n+        switchInt(move _4) -> [false: bb4, otherwise: bb3]; // scope 2 at $DIR/issue-38669.rs:7:12: 7:24\n     }\n \n     bb3: {\n-        _0 = const ();                   // scope 1 at $DIR/issue-38669.rs:8:13: 8:18\n+        _0 = const ();                   // scope 2 at $DIR/issue-38669.rs:8:13: 8:18\n         StorageDead(_4);                 // scope 1 at $DIR/issue-38669.rs:9:9: 9:10\n         StorageDead(_3);                 // scope 1 at $DIR/issue-38669.rs:9:9: 9:10\n         StorageDead(_1);                 // scope 0 at $DIR/issue-38669.rs:12:1: 12:2"}, {"sha": "7930aa997686487e7589563a50f55b624b8eeb10", "filename": "src/test/mir-opt/issue_41888.main.ElaborateDrops.after.mir", "status": "modified", "additions": 36, "deletions": 34, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Fissue_41888.main.ElaborateDrops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Fissue_41888.main.ElaborateDrops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_41888.main.ElaborateDrops.after.mir?ref=e39c92e7aa2cd77659d504b05ad59e38388866f7", "patch": "@@ -15,8 +15,10 @@ fn main() -> () {\n     scope 1 {\n         debug e => _1;                   // in scope 1 at $DIR/issue-41888.rs:7:9: 7:10\n         scope 2 {\n-            debug _k => _6;              // in scope 2 at $DIR/issue-41888.rs:10:21: 10:23\n-            let _6: K;                   // in scope 2 at $DIR/issue-41888.rs:10:21: 10:23\n+            scope 3 {\n+                debug _k => _6;          // in scope 3 at $DIR/issue-41888.rs:10:21: 10:23\n+                let _6: K;               // in scope 3 at $DIR/issue-41888.rs:10:21: 10:23\n+            }\n         }\n     }\n \n@@ -25,48 +27,48 @@ fn main() -> () {\n         _7 = const false;                // scope 0 at $DIR/issue-41888.rs:7:9: 7:10\n         _8 = const false;                // scope 0 at $DIR/issue-41888.rs:7:9: 7:10\n         StorageLive(_1);                 // scope 0 at $DIR/issue-41888.rs:7:9: 7:10\n-        StorageLive(_2);                 // scope 1 at $DIR/issue-41888.rs:8:8: 8:14\n-        _2 = cond() -> [return: bb1, unwind: bb11]; // scope 1 at $DIR/issue-41888.rs:8:8: 8:14\n+        StorageLive(_2);                 // scope 2 at $DIR/issue-41888.rs:8:8: 8:14\n+        _2 = cond() -> [return: bb1, unwind: bb11]; // scope 2 at $DIR/issue-41888.rs:8:8: 8:14\n                                          // mir::Constant\n                                          // + span: $DIR/issue-41888.rs:8:8: 8:12\n                                          // + literal: Const { ty: fn() -> bool {cond}, val: Value(Scalar(<ZST>)) }\n     }\n \n     bb1: {\n-        switchInt(move _2) -> [false: bb7, otherwise: bb2]; // scope 1 at $DIR/issue-41888.rs:8:8: 8:14\n+        switchInt(move _2) -> [false: bb7, otherwise: bb2]; // scope 2 at $DIR/issue-41888.rs:8:8: 8:14\n     }\n \n     bb2: {\n-        StorageLive(_3);                 // scope 1 at $DIR/issue-41888.rs:9:13: 9:20\n-        StorageLive(_4);                 // scope 1 at $DIR/issue-41888.rs:9:18: 9:19\n-        _4 = K;                          // scope 1 at $DIR/issue-41888.rs:9:18: 9:19\n-        _3 = E::F(move _4);              // scope 1 at $DIR/issue-41888.rs:9:13: 9:20\n-        StorageDead(_4);                 // scope 1 at $DIR/issue-41888.rs:9:19: 9:20\n-        goto -> bb14;                    // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n+        StorageLive(_3);                 // scope 2 at $DIR/issue-41888.rs:9:13: 9:20\n+        StorageLive(_4);                 // scope 2 at $DIR/issue-41888.rs:9:18: 9:19\n+        _4 = K;                          // scope 2 at $DIR/issue-41888.rs:9:18: 9:19\n+        _3 = E::F(move _4);              // scope 2 at $DIR/issue-41888.rs:9:13: 9:20\n+        StorageDead(_4);                 // scope 2 at $DIR/issue-41888.rs:9:19: 9:20\n+        goto -> bb14;                    // scope 2 at $DIR/issue-41888.rs:9:9: 9:10\n     }\n \n     bb3: {\n-        goto -> bb4;                     // scope 1 at $DIR/issue-41888.rs:9:19: 9:20\n+        goto -> bb4;                     // scope 2 at $DIR/issue-41888.rs:9:19: 9:20\n     }\n \n     bb4: {\n-        StorageDead(_3);                 // scope 1 at $DIR/issue-41888.rs:9:19: 9:20\n-        _5 = discriminant(_1);           // scope 2 at $DIR/issue-41888.rs:10:16: 10:24\n-        switchInt(move _5) -> [0_isize: bb5, otherwise: bb6]; // scope 2 at $DIR/issue-41888.rs:10:16: 10:24\n+        StorageDead(_3);                 // scope 2 at $DIR/issue-41888.rs:9:19: 9:20\n+        _5 = discriminant(_1);           // scope 3 at $DIR/issue-41888.rs:10:16: 10:24\n+        switchInt(move _5) -> [0_isize: bb5, otherwise: bb6]; // scope 3 at $DIR/issue-41888.rs:10:16: 10:24\n     }\n \n     bb5: {\n-        StorageLive(_6);                 // scope 2 at $DIR/issue-41888.rs:10:21: 10:23\n-        _9 = const false;                // scope 2 at $DIR/issue-41888.rs:10:21: 10:23\n-        _6 = move ((_1 as F).0: K);      // scope 2 at $DIR/issue-41888.rs:10:21: 10:23\n-        _0 = const ();                   // scope 1 at $DIR/issue-41888.rs:10:29: 13:10\n-        StorageDead(_6);                 // scope 1 at $DIR/issue-41888.rs:13:9: 13:10\n-        goto -> bb8;                     // scope 1 at $DIR/issue-41888.rs:10:9: 13:10\n+        StorageLive(_6);                 // scope 3 at $DIR/issue-41888.rs:10:21: 10:23\n+        _9 = const false;                // scope 3 at $DIR/issue-41888.rs:10:21: 10:23\n+        _6 = move ((_1 as F).0: K);      // scope 3 at $DIR/issue-41888.rs:10:21: 10:23\n+        _0 = const ();                   // scope 3 at $DIR/issue-41888.rs:10:29: 13:10\n+        StorageDead(_6);                 // scope 2 at $DIR/issue-41888.rs:13:9: 13:10\n+        goto -> bb8;                     // scope 2 at $DIR/issue-41888.rs:10:9: 13:10\n     }\n \n     bb6: {\n-        _0 = const ();                   // scope 1 at $DIR/issue-41888.rs:13:10: 13:10\n-        goto -> bb8;                     // scope 1 at $DIR/issue-41888.rs:10:9: 13:10\n+        _0 = const ();                   // scope 2 at $DIR/issue-41888.rs:13:10: 13:10\n+        goto -> bb8;                     // scope 2 at $DIR/issue-41888.rs:10:9: 13:10\n     }\n \n     bb7: {\n@@ -88,7 +90,7 @@ fn main() -> () {\n     }\n \n     bb10 (cleanup): {\n-        goto -> bb11;                    // scope 1 at $DIR/issue-41888.rs:9:19: 9:20\n+        goto -> bb11;                    // scope 2 at $DIR/issue-41888.rs:9:19: 9:20\n     }\n \n     bb11 (cleanup): {\n@@ -100,19 +102,19 @@ fn main() -> () {\n     }\n \n     bb13 (cleanup): {\n-        _7 = const true;                 // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n-        _8 = const true;                 // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n-        _9 = const true;                 // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n-        _1 = move _3;                    // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n-        goto -> bb10;                    // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n+        _7 = const true;                 // scope 2 at $DIR/issue-41888.rs:9:9: 9:10\n+        _8 = const true;                 // scope 2 at $DIR/issue-41888.rs:9:9: 9:10\n+        _9 = const true;                 // scope 2 at $DIR/issue-41888.rs:9:9: 9:10\n+        _1 = move _3;                    // scope 2 at $DIR/issue-41888.rs:9:9: 9:10\n+        goto -> bb10;                    // scope 2 at $DIR/issue-41888.rs:9:9: 9:10\n     }\n \n     bb14: {\n-        _7 = const true;                 // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n-        _8 = const true;                 // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n-        _9 = const true;                 // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n-        _1 = move _3;                    // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n-        goto -> bb3;                     // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n+        _7 = const true;                 // scope 2 at $DIR/issue-41888.rs:9:9: 9:10\n+        _8 = const true;                 // scope 2 at $DIR/issue-41888.rs:9:9: 9:10\n+        _9 = const true;                 // scope 2 at $DIR/issue-41888.rs:9:9: 9:10\n+        _1 = move _3;                    // scope 2 at $DIR/issue-41888.rs:9:9: 9:10\n+        goto -> bb3;                     // scope 2 at $DIR/issue-41888.rs:9:9: 9:10\n     }\n \n     bb15: {"}, {"sha": "52a4cc661a52d43f1c0f56767875dd3276becb38", "filename": "src/test/mir-opt/issue_73223.main.PreCodegen.64bit.diff", "status": "modified", "additions": 27, "deletions": 25, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.64bit.diff?ref=e39c92e7aa2cd77659d504b05ad59e38388866f7", "patch": "@@ -29,9 +29,11 @@\n               scope 4 {\n                   debug left_val => _8;    // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                   debug right_val => _9;   // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                  let _13: core::panicking::AssertKind; // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                   scope 5 {\n-                      debug kind => _13;   // in scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                      let _13: core::panicking::AssertKind; // in scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                      scope 6 {\n+                          debug kind => _13; // in scope 6 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                      }\n                   }\n               }\n           }\n@@ -70,32 +72,32 @@\n           _8 = (_5.0: &i32);               // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_9);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _9 = (_5.1: &i32);               // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_10);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_11);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_12);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _12 = (*_8);                     // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _11 = Eq(move _12, const 1_i32); // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_12);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _10 = Not(move _11);             // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_11);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          switchInt(move _10) -> [false: bb2, otherwise: bb1]; // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_10);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_11);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_12);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _12 = (*_8);                     // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _11 = Eq(move _12, const 1_i32); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_12);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _10 = Not(move _11);             // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_11);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          switchInt(move _10) -> [false: bb2, otherwise: bb1]; // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       }\n   \n       bb1: {\n-          StorageLive(_13);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_14);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_15);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_16);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _16 = _8;                        // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _15 = _16;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_17);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_18);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _18 = _9;                        // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _17 = _18;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_19);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          Deinit(_19);                     // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          discriminant(_19) = 0;           // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _14 = core::panicking::assert_failed::<i32, i32>(const core::panicking::AssertKind::Eq, move _15, move _17, move _19); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_13);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_14);                // scope 6 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_15);                // scope 6 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_16);                // scope 6 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _16 = _8;                        // scope 6 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _15 = _16;                       // scope 6 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_17);                // scope 6 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_18);                // scope 6 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _18 = _9;                        // scope 6 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _17 = _18;                       // scope 6 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_19);                // scope 6 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          Deinit(_19);                     // scope 6 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          discriminant(_19) = 0;           // scope 6 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _14 = core::panicking::assert_failed::<i32, i32>(const core::panicking::AssertKind::Eq, move _15, move _17, move _19); // scope 6 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: for<'r, 's, 't0> fn(core::panicking::AssertKind, &'r i32, &'s i32, Option<Arguments<'t0>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(Scalar(<ZST>)) }"}, {"sha": "877c03d65cf9f88d6b5e289e5f6adf0b7a0be80b", "filename": "src/test/mir-opt/issue_73223.main.SimplifyArmIdentity.64bit.diff", "status": "modified", "additions": 34, "deletions": 32, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.64bit.diff?ref=e39c92e7aa2cd77659d504b05ad59e38388866f7", "patch": "@@ -37,9 +37,11 @@\n               scope 4 {\n                   debug left_val => _13;   // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                   debug right_val => _14;  // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                  let _20: core::panicking::AssertKind; // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                   scope 5 {\n-                      debug kind => _20;   // in scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                      let _20: core::panicking::AssertKind; // in scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                      scope 6 {\n+                          debug kind => _20; // in scope 6 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                      }\n                   }\n               }\n           }\n@@ -97,42 +99,42 @@\n           _13 = (_9.0: &i32);              // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_14);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _14 = (_9.1: &i32);              // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_15);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_16);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_17);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _17 = (*_13);                    // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_18);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _18 = const 1_i32;               // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _16 = Eq(move _17, const 1_i32); // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_18);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_17);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _15 = Not(move _16);             // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_16);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          switchInt(move _15) -> [false: bb4, otherwise: bb3]; // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_15);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_16);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_17);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _17 = (*_13);                    // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_18);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _18 = const 1_i32;               // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _16 = Eq(move _17, const 1_i32); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_18);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_17);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _15 = Not(move _16);             // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_16);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          switchInt(move _15) -> [false: bb4, otherwise: bb3]; // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       }\n   \n       bb3: {\n-          StorageLive(_20);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          Deinit(_20);                     // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          discriminant(_20) = 0;           // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_21);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_22);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _22 = const core::panicking::AssertKind::Eq; // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_20);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          Deinit(_20);                     // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          discriminant(_20) = 0;           // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_21);                // scope 6 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_22);                // scope 6 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _22 = const core::panicking::AssertKind::Eq; // scope 6 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }\n-          StorageLive(_23);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_24);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _24 = _13;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _23 = _24;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_25);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_26);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _26 = _14;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _25 = _26;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_27);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          Deinit(_27);                     // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          discriminant(_27) = 0;           // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _21 = core::panicking::assert_failed::<i32, i32>(const core::panicking::AssertKind::Eq, move _23, move _25, move _27); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_23);                // scope 6 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_24);                // scope 6 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _24 = _13;                       // scope 6 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _23 = _24;                       // scope 6 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_25);                // scope 6 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_26);                // scope 6 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _26 = _14;                       // scope 6 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _25 = _26;                       // scope 6 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_27);                // scope 6 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          Deinit(_27);                     // scope 6 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          discriminant(_27) = 0;           // scope 6 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _21 = core::panicking::assert_failed::<i32, i32>(const core::panicking::AssertKind::Eq, move _23, move _25, move _27); // scope 6 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: for<'r, 's, 't0> fn(core::panicking::AssertKind, &'r i32, &'s i32, Option<Arguments<'t0>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(Scalar(<ZST>)) }"}, {"sha": "1dca68fd72790ce0ae3bf94a0b085febae1c9571", "filename": "src/test/mir-opt/issues/issue_59352.num_to_digit.PreCodegen.after.mir", "status": "modified", "additions": 54, "deletions": 52, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_59352.num_to_digit.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_59352.num_to_digit.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_59352.num_to_digit.PreCodegen.after.mir?ref=e39c92e7aa2cd77659d504b05ad59e38388866f7", "patch": "@@ -8,60 +8,62 @@ fn num_to_digit(_1: char) -> u32 {\n     let mut _4: char;                    // in scope 0 at $DIR/issue-59352.rs:14:26: 14:29\n     let mut _5: u32;                     // in scope 0 at $DIR/issue-59352.rs:14:8: 14:23\n     let mut _12: isize;                  // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-    scope 1 (inlined char::methods::<impl char>::is_digit) { // at $DIR/issue-59352.rs:14:8: 14:23\n-        debug self => _2;                // in scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n-        debug radix => _5;               // in scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n-        let mut _6: &std::option::Option<u32>; // in scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n-        let _7: std::option::Option<u32>; // in scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n-        let mut _8: char;                // in scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n-        scope 2 (inlined Option::<u32>::is_some) { // at $SRC_DIR/core/src/char/methods.rs:LL:COL\n-            debug self => _6;            // in scope 2 at $SRC_DIR/core/src/option.rs:LL:COL\n-            let mut _9: isize;           // in scope 2 at $SRC_DIR/core/src/option.rs:LL:COL\n+    scope 1 {\n+        scope 2 (inlined char::methods::<impl char>::is_digit) { // at $DIR/issue-59352.rs:14:8: 14:23\n+            debug self => _2;            // in scope 2 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n+            debug radix => _5;           // in scope 2 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n+            let mut _6: &std::option::Option<u32>; // in scope 2 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n+            let _7: std::option::Option<u32>; // in scope 2 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n+            let mut _8: char;            // in scope 2 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n+            scope 3 (inlined Option::<u32>::is_some) { // at $SRC_DIR/core/src/char/methods.rs:LL:COL\n+                debug self => _6;        // in scope 3 at $SRC_DIR/core/src/option.rs:LL:COL\n+                let mut _9: isize;       // in scope 3 at $SRC_DIR/core/src/option.rs:LL:COL\n+            }\n         }\n-    }\n-    scope 3 (inlined #[track_caller] Option::<u32>::unwrap) { // at $DIR/issue-59352.rs:14:26: 14:50\n-        debug self => _3;                // in scope 3 at $SRC_DIR/core/src/option.rs:LL:COL\n-        let mut _10: isize;              // in scope 3 at $SRC_DIR/core/src/option.rs:LL:COL\n-        let mut _11: !;                  // in scope 3 at $SRC_DIR/core/src/option.rs:LL:COL\n-        scope 4 {\n-            debug val => _0;             // in scope 4 at $SRC_DIR/core/src/option.rs:LL:COL\n+        scope 4 (inlined #[track_caller] Option::<u32>::unwrap) { // at $DIR/issue-59352.rs:14:26: 14:50\n+            debug self => _3;            // in scope 4 at $SRC_DIR/core/src/option.rs:LL:COL\n+            let mut _10: isize;          // in scope 4 at $SRC_DIR/core/src/option.rs:LL:COL\n+            let mut _11: !;              // in scope 4 at $SRC_DIR/core/src/option.rs:LL:COL\n+            scope 5 {\n+                debug val => _0;         // in scope 5 at $SRC_DIR/core/src/option.rs:LL:COL\n+            }\n         }\n     }\n \n     bb0: {\n-        StorageLive(_2);                 // scope 0 at $DIR/issue-59352.rs:14:8: 14:11\n-        _2 = _1;                         // scope 0 at $DIR/issue-59352.rs:14:8: 14:11\n-        StorageLive(_5);                 // scope 0 at $DIR/issue-59352.rs:14:8: 14:23\n-        StorageLive(_6);                 // scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n-        StorageLive(_7);                 // scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n-        StorageLive(_8);                 // scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n-        _8 = _2;                         // scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n-        _7 = char::methods::<impl char>::to_digit(move _8, const 8_u32) -> bb5; // scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n+        StorageLive(_2);                 // scope 1 at $DIR/issue-59352.rs:14:8: 14:11\n+        _2 = _1;                         // scope 1 at $DIR/issue-59352.rs:14:8: 14:11\n+        StorageLive(_5);                 // scope 1 at $DIR/issue-59352.rs:14:8: 14:23\n+        StorageLive(_6);                 // scope 2 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n+        StorageLive(_7);                 // scope 2 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n+        StorageLive(_8);                 // scope 2 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n+        _8 = _2;                         // scope 2 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n+        _7 = char::methods::<impl char>::to_digit(move _8, const 8_u32) -> bb5; // scope 2 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n                                          // mir::Constant\n                                          // + span: $SRC_DIR/core/src/char/methods.rs:LL:COL\n                                          // + literal: Const { ty: fn(char, u32) -> Option<u32> {char::methods::<impl char>::to_digit}, val: Value(Scalar(<ZST>)) }\n     }\n \n     bb1: {\n-        StorageDead(_12);                // scope 0 at $DIR/issue-59352.rs:14:8: 14:23\n-        StorageLive(_3);                 // scope 0 at $DIR/issue-59352.rs:14:26: 14:41\n-        StorageLive(_4);                 // scope 0 at $DIR/issue-59352.rs:14:26: 14:29\n-        _4 = _1;                         // scope 0 at $DIR/issue-59352.rs:14:26: 14:29\n-        _3 = char::methods::<impl char>::to_digit(move _4, const 8_u32) -> bb2; // scope 0 at $DIR/issue-59352.rs:14:26: 14:41\n+        StorageDead(_12);                // scope 1 at $DIR/issue-59352.rs:14:8: 14:23\n+        StorageLive(_3);                 // scope 1 at $DIR/issue-59352.rs:14:26: 14:41\n+        StorageLive(_4);                 // scope 1 at $DIR/issue-59352.rs:14:26: 14:29\n+        _4 = _1;                         // scope 1 at $DIR/issue-59352.rs:14:26: 14:29\n+        _3 = char::methods::<impl char>::to_digit(move _4, const 8_u32) -> bb2; // scope 1 at $DIR/issue-59352.rs:14:26: 14:41\n                                          // mir::Constant\n                                          // + span: $DIR/issue-59352.rs:14:30: 14:38\n                                          // + literal: Const { ty: fn(char, u32) -> Option<u32> {char::methods::<impl char>::to_digit}, val: Value(Scalar(<ZST>)) }\n     }\n \n     bb2: {\n-        StorageDead(_4);                 // scope 0 at $DIR/issue-59352.rs:14:40: 14:41\n-        StorageLive(_10);                // scope 0 at $DIR/issue-59352.rs:14:26: 14:50\n-        _10 = discriminant(_3);          // scope 3 at $SRC_DIR/core/src/option.rs:LL:COL\n-        switchInt(move _10) -> [0_isize: bb6, 1_isize: bb8, otherwise: bb7]; // scope 3 at $SRC_DIR/core/src/option.rs:LL:COL\n+        StorageDead(_4);                 // scope 1 at $DIR/issue-59352.rs:14:40: 14:41\n+        StorageLive(_10);                // scope 1 at $DIR/issue-59352.rs:14:26: 14:50\n+        _10 = discriminant(_3);          // scope 4 at $SRC_DIR/core/src/option.rs:LL:COL\n+        switchInt(move _10) -> [0_isize: bb6, 1_isize: bb8, otherwise: bb7]; // scope 4 at $SRC_DIR/core/src/option.rs:LL:COL\n     }\n \n     bb3: {\n-        StorageDead(_12);                // scope 0 at $DIR/issue-59352.rs:14:8: 14:23\n+        StorageDead(_12);                // scope 1 at $DIR/issue-59352.rs:14:8: 14:23\n         _0 = const 0_u32;                // scope 0 at $DIR/issue-59352.rs:14:60: 14:61\n         goto -> bb4;                     // scope 0 at $DIR/issue-59352.rs:14:5: 14:63\n     }\n@@ -71,23 +73,23 @@ fn num_to_digit(_1: char) -> u32 {\n     }\n \n     bb5: {\n-        _6 = &_7;                        // scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n-        StorageDead(_8);                 // scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n-        StorageLive(_9);                 // scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n-        _9 = discriminant((*_6));        // scope 2 at $SRC_DIR/core/src/option.rs:LL:COL\n-        StorageLive(_12);                // scope 2 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-        _12 = move _9;                   // scope 2 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-        StorageDead(_9);                 // scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n-        StorageDead(_6);                 // scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n-        StorageDead(_7);                 // scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n-        StorageDead(_5);                 // scope 0 at $DIR/issue-59352.rs:14:8: 14:23\n-        StorageDead(_2);                 // scope 0 at $DIR/issue-59352.rs:14:22: 14:23\n-        switchInt(move _12) -> [1_isize: bb1, otherwise: bb3]; // scope 0 at $DIR/issue-59352.rs:14:8: 14:23\n+        _6 = &_7;                        // scope 2 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n+        StorageDead(_8);                 // scope 2 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n+        StorageLive(_9);                 // scope 2 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n+        _9 = discriminant((*_6));        // scope 3 at $SRC_DIR/core/src/option.rs:LL:COL\n+        StorageLive(_12);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        _12 = move _9;                   // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageDead(_9);                 // scope 2 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n+        StorageDead(_6);                 // scope 2 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n+        StorageDead(_7);                 // scope 2 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n+        StorageDead(_5);                 // scope 1 at $DIR/issue-59352.rs:14:8: 14:23\n+        StorageDead(_2);                 // scope 1 at $DIR/issue-59352.rs:14:22: 14:23\n+        switchInt(move _12) -> [1_isize: bb1, otherwise: bb3]; // scope 1 at $DIR/issue-59352.rs:14:8: 14:23\n     }\n \n     bb6: {\n-        StorageLive(_11);                // scope 3 at $SRC_DIR/core/src/option.rs:LL:COL\n-        _11 = core::panicking::panic(const \"called `Option::unwrap()` on a `None` value\"); // scope 3 at $SRC_DIR/core/src/option.rs:LL:COL\n+        StorageLive(_11);                // scope 4 at $SRC_DIR/core/src/option.rs:LL:COL\n+        _11 = core::panicking::panic(const \"called `Option::unwrap()` on a `None` value\"); // scope 4 at $SRC_DIR/core/src/option.rs:LL:COL\n                                          // mir::Constant\n                                          // + span: $SRC_DIR/core/src/option.rs:LL:COL\n                                          // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(Scalar(<ZST>)) }\n@@ -97,13 +99,13 @@ fn num_to_digit(_1: char) -> u32 {\n     }\n \n     bb7: {\n-        unreachable;                     // scope 3 at $SRC_DIR/core/src/option.rs:LL:COL\n+        unreachable;                     // scope 4 at $SRC_DIR/core/src/option.rs:LL:COL\n     }\n \n     bb8: {\n-        _0 = move ((_3 as Some).0: u32); // scope 3 at $SRC_DIR/core/src/option.rs:LL:COL\n-        StorageDead(_10);                // scope 0 at $DIR/issue-59352.rs:14:26: 14:50\n-        StorageDead(_3);                 // scope 0 at $DIR/issue-59352.rs:14:49: 14:50\n+        _0 = move ((_3 as Some).0: u32); // scope 4 at $SRC_DIR/core/src/option.rs:LL:COL\n+        StorageDead(_10);                // scope 1 at $DIR/issue-59352.rs:14:26: 14:50\n+        StorageDead(_3);                 // scope 1 at $DIR/issue-59352.rs:14:49: 14:50\n         goto -> bb4;                     // scope 0 at $DIR/issue-59352.rs:14:5: 14:63\n     }\n }"}, {"sha": "b8023a6a8e690a3508c10bdd6723dd4d1481386c", "filename": "src/test/mir-opt/issues/issue_75439.foo.MatchBranchSimplification.diff", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_75439.foo.MatchBranchSimplification.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_75439.foo.MatchBranchSimplification.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_75439.foo.MatchBranchSimplification.diff?ref=e39c92e7aa2cd77659d504b05ad59e38388866f7", "patch": "@@ -13,8 +13,8 @@\n           scope 3 {\n               debug ip => _4;              // in scope 3 at $DIR/issue-75439.rs:9:27: 9:29\n               let _4: u32;                 // in scope 3 at $DIR/issue-75439.rs:9:27: 9:29\n-          }\n-          scope 4 {\n+              scope 4 {\n+              }\n           }\n       }\n       scope 2 {\n@@ -44,7 +44,7 @@\n       }\n   \n       bb4: {\n-          StorageLive(_5);                 // scope 1 at $DIR/issue-75439.rs:10:14: 10:38\n+          StorageLive(_5);                 // scope 3 at $DIR/issue-75439.rs:10:14: 10:38\n           StorageLive(_6);                 // scope 4 at $DIR/issue-75439.rs:10:33: 10:35\n           _6 = _4;                         // scope 4 at $DIR/issue-75439.rs:10:33: 10:35\n           _5 = transmute::<u32, [u8; 4]>(move _6) -> bb7; // scope 4 at $DIR/issue-75439.rs:10:23: 10:36\n@@ -67,10 +67,10 @@\n   \n       bb7: {\n           StorageDead(_6);                 // scope 4 at $DIR/issue-75439.rs:10:35: 10:36\n-          Deinit(_0);                      // scope 1 at $DIR/issue-75439.rs:10:9: 10:39\n-          ((_0 as Some).0: [u8; 4]) = move _5; // scope 1 at $DIR/issue-75439.rs:10:9: 10:39\n-          discriminant(_0) = 1;            // scope 1 at $DIR/issue-75439.rs:10:9: 10:39\n-          StorageDead(_5);                 // scope 1 at $DIR/issue-75439.rs:10:38: 10:39\n+          Deinit(_0);                      // scope 3 at $DIR/issue-75439.rs:10:9: 10:39\n+          ((_0 as Some).0: [u8; 4]) = move _5; // scope 3 at $DIR/issue-75439.rs:10:9: 10:39\n+          discriminant(_0) = 1;            // scope 3 at $DIR/issue-75439.rs:10:9: 10:39\n+          StorageDead(_5);                 // scope 3 at $DIR/issue-75439.rs:10:38: 10:39\n           StorageDead(_4);                 // scope 1 at $DIR/issue-75439.rs:11:5: 11:6\n           goto -> bb9;                     // scope 1 at $DIR/issue-75439.rs:9:5: 13:6\n       }"}, {"sha": "d39bb419e3ff5e5cf7734740f449e8b56bf62f53", "filename": "src/test/mir-opt/loop_test.main.SimplifyCfg-promote-consts.after.mir", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Floop_test.main.SimplifyCfg-promote-consts.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Floop_test.main.SimplifyCfg-promote-consts.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Floop_test.main.SimplifyCfg-promote-consts.after.mir?ref=e39c92e7aa2cd77659d504b05ad59e38388866f7", "patch": "@@ -9,18 +9,20 @@ fn main() -> () {\n     let mut _5: ();                      // in scope 0 at $DIR/loop_test.rs:6:1: 17:2\n     let _6: i32;                         // in scope 0 at $DIR/loop_test.rs:14:13: 14:14\n     scope 1 {\n-        debug x => _6;                   // in scope 1 at $DIR/loop_test.rs:14:13: 14:14\n+    }\n+    scope 2 {\n+        debug x => _6;                   // in scope 2 at $DIR/loop_test.rs:14:13: 14:14\n     }\n \n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/loop_test.rs:10:5: 12:6\n-        StorageLive(_2);                 // scope 0 at $DIR/loop_test.rs:10:8: 10:12\n-        _2 = const true;                 // scope 0 at $DIR/loop_test.rs:10:8: 10:12\n-        switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/loop_test.rs:10:8: 10:12\n+        StorageLive(_2);                 // scope 1 at $DIR/loop_test.rs:10:8: 10:12\n+        _2 = const true;                 // scope 1 at $DIR/loop_test.rs:10:8: 10:12\n+        switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 1 at $DIR/loop_test.rs:10:8: 10:12\n     }\n \n     bb1: {\n-        _0 = const ();                   // scope 0 at $DIR/loop_test.rs:11:9: 11:15\n+        _0 = const ();                   // scope 1 at $DIR/loop_test.rs:11:9: 11:15\n         StorageDead(_2);                 // scope 0 at $DIR/loop_test.rs:12:5: 12:6\n         StorageDead(_1);                 // scope 0 at $DIR/loop_test.rs:12:5: 12:6\n         return;                          // scope 0 at $DIR/loop_test.rs:17:2: 17:2"}, {"sha": "e2cc076c6d8d16624434c476f48a8ae4dea191e7", "filename": "src/test/mir-opt/lower_array_len.array_bound.InstCombine.diff", "status": "modified", "additions": 31, "deletions": 29, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound.InstCombine.diff?ref=e39c92e7aa2cd77659d504b05ad59e38388866f7", "patch": "@@ -13,43 +13,45 @@\n       let _8: usize;                       // in scope 0 at $DIR/lower_array_len.rs:8:15: 8:20\n       let mut _9: usize;                   // in scope 0 at $DIR/lower_array_len.rs:8:9: 8:21\n       let mut _10: bool;                   // in scope 0 at $DIR/lower_array_len.rs:8:9: 8:21\n-      let mut _11: &[u8; N];               // in scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n+      scope 1 {\n+          let mut _11: &[u8; N];           // in scope 1 at $DIR/lower_array_len.rs:7:16: 7:27\n+      }\n   \n       bb0: {\n-          StorageLive(_3);                 // scope 0 at $DIR/lower_array_len.rs:7:8: 7:27\n-          StorageLive(_4);                 // scope 0 at $DIR/lower_array_len.rs:7:8: 7:13\n-          _4 = _1;                         // scope 0 at $DIR/lower_array_len.rs:7:8: 7:13\n-          StorageLive(_5);                 // scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n-          StorageLive(_6);                 // scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n-          StorageLive(_7);                 // scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n--         _7 = &(*_2);                     // scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n-+         _7 = _2;                         // scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n-          StorageLive(_11);                // scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n-          _11 = _7;                        // scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n-          _6 = move _7 as &[u8] (Pointer(Unsize)); // scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n-          StorageDead(_7);                 // scope 0 at $DIR/lower_array_len.rs:7:20: 7:21\n--         _5 = Len((*_11));                // scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n-+         _5 = const N;                    // scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n-          StorageDead(_11);                // scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n-          StorageDead(_6);                 // scope 0 at $DIR/lower_array_len.rs:7:26: 7:27\n-          _3 = Lt(move _4, move _5);       // scope 0 at $DIR/lower_array_len.rs:7:8: 7:27\n-          StorageDead(_5);                 // scope 0 at $DIR/lower_array_len.rs:7:26: 7:27\n-          StorageDead(_4);                 // scope 0 at $DIR/lower_array_len.rs:7:26: 7:27\n-          switchInt(move _3) -> [false: bb3, otherwise: bb1]; // scope 0 at $DIR/lower_array_len.rs:7:8: 7:27\n+          StorageLive(_3);                 // scope 1 at $DIR/lower_array_len.rs:7:8: 7:27\n+          StorageLive(_4);                 // scope 1 at $DIR/lower_array_len.rs:7:8: 7:13\n+          _4 = _1;                         // scope 1 at $DIR/lower_array_len.rs:7:8: 7:13\n+          StorageLive(_5);                 // scope 1 at $DIR/lower_array_len.rs:7:16: 7:27\n+          StorageLive(_6);                 // scope 1 at $DIR/lower_array_len.rs:7:16: 7:27\n+          StorageLive(_7);                 // scope 1 at $DIR/lower_array_len.rs:7:16: 7:27\n+-         _7 = &(*_2);                     // scope 1 at $DIR/lower_array_len.rs:7:16: 7:27\n++         _7 = _2;                         // scope 1 at $DIR/lower_array_len.rs:7:16: 7:27\n+          StorageLive(_11);                // scope 1 at $DIR/lower_array_len.rs:7:16: 7:27\n+          _11 = _7;                        // scope 1 at $DIR/lower_array_len.rs:7:16: 7:27\n+          _6 = move _7 as &[u8] (Pointer(Unsize)); // scope 1 at $DIR/lower_array_len.rs:7:16: 7:27\n+          StorageDead(_7);                 // scope 1 at $DIR/lower_array_len.rs:7:20: 7:21\n+-         _5 = Len((*_11));                // scope 1 at $DIR/lower_array_len.rs:7:16: 7:27\n++         _5 = const N;                    // scope 1 at $DIR/lower_array_len.rs:7:16: 7:27\n+          StorageDead(_11);                // scope 1 at $DIR/lower_array_len.rs:7:16: 7:27\n+          StorageDead(_6);                 // scope 1 at $DIR/lower_array_len.rs:7:26: 7:27\n+          _3 = Lt(move _4, move _5);       // scope 1 at $DIR/lower_array_len.rs:7:8: 7:27\n+          StorageDead(_5);                 // scope 1 at $DIR/lower_array_len.rs:7:26: 7:27\n+          StorageDead(_4);                 // scope 1 at $DIR/lower_array_len.rs:7:26: 7:27\n+          switchInt(move _3) -> [false: bb3, otherwise: bb1]; // scope 1 at $DIR/lower_array_len.rs:7:8: 7:27\n       }\n   \n       bb1: {\n-          StorageLive(_8);                 // scope 0 at $DIR/lower_array_len.rs:8:15: 8:20\n-          _8 = _1;                         // scope 0 at $DIR/lower_array_len.rs:8:15: 8:20\n--         _9 = Len((*_2));                 // scope 0 at $DIR/lower_array_len.rs:8:9: 8:21\n-+         _9 = const N;                    // scope 0 at $DIR/lower_array_len.rs:8:9: 8:21\n-          _10 = Lt(_8, _9);                // scope 0 at $DIR/lower_array_len.rs:8:9: 8:21\n-          assert(move _10, \"index out of bounds: the length is {} but the index is {}\", move _9, _8) -> bb2; // scope 0 at $DIR/lower_array_len.rs:8:9: 8:21\n+          StorageLive(_8);                 // scope 1 at $DIR/lower_array_len.rs:8:15: 8:20\n+          _8 = _1;                         // scope 1 at $DIR/lower_array_len.rs:8:15: 8:20\n+-         _9 = Len((*_2));                 // scope 1 at $DIR/lower_array_len.rs:8:9: 8:21\n++         _9 = const N;                    // scope 1 at $DIR/lower_array_len.rs:8:9: 8:21\n+          _10 = Lt(_8, _9);                // scope 1 at $DIR/lower_array_len.rs:8:9: 8:21\n+          assert(move _10, \"index out of bounds: the length is {} but the index is {}\", move _9, _8) -> bb2; // scope 1 at $DIR/lower_array_len.rs:8:9: 8:21\n       }\n   \n       bb2: {\n-          _0 = (*_2)[_8];                  // scope 0 at $DIR/lower_array_len.rs:8:9: 8:21\n-          StorageDead(_8);                 // scope 0 at $DIR/lower_array_len.rs:9:5: 9:6\n+          _0 = (*_2)[_8];                  // scope 1 at $DIR/lower_array_len.rs:8:9: 8:21\n+          StorageDead(_8);                 // scope 1 at $DIR/lower_array_len.rs:9:5: 9:6\n           goto -> bb4;                     // scope 0 at $DIR/lower_array_len.rs:7:5: 11:6\n       }\n   "}, {"sha": "d1cd3865da3274a669ebead1975332b40bcb0b7f", "filename": "src/test/mir-opt/lower_array_len.array_bound.NormalizeArrayLen.diff", "status": "modified", "additions": 30, "deletions": 28, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound.NormalizeArrayLen.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound.NormalizeArrayLen.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound.NormalizeArrayLen.diff?ref=e39c92e7aa2cd77659d504b05ad59e38388866f7", "patch": "@@ -13,45 +13,47 @@\n       let _8: usize;                       // in scope 0 at $DIR/lower_array_len.rs:8:15: 8:20\n       let mut _9: usize;                   // in scope 0 at $DIR/lower_array_len.rs:8:9: 8:21\n       let mut _10: bool;                   // in scope 0 at $DIR/lower_array_len.rs:8:9: 8:21\n-+     let mut _11: &[u8; N];               // in scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n+      scope 1 {\n++         let mut _11: &[u8; N];           // in scope 1 at $DIR/lower_array_len.rs:7:16: 7:27\n+      }\n   \n       bb0: {\n-          StorageLive(_3);                 // scope 0 at $DIR/lower_array_len.rs:7:8: 7:27\n-          StorageLive(_4);                 // scope 0 at $DIR/lower_array_len.rs:7:8: 7:13\n-          _4 = _1;                         // scope 0 at $DIR/lower_array_len.rs:7:8: 7:13\n-          StorageLive(_5);                 // scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n-          StorageLive(_6);                 // scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n-          StorageLive(_7);                 // scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n-          _7 = &(*_2);                     // scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n-+         StorageLive(_11);                // scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n-+         _11 = _7;                        // scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n-          _6 = move _7 as &[u8] (Pointer(Unsize)); // scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n-          StorageDead(_7);                 // scope 0 at $DIR/lower_array_len.rs:7:20: 7:21\n--         _5 = Len((*_6));                 // scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n-+         _5 = Len((*_11));                // scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n-+         StorageDead(_11);                // scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n-          goto -> bb1;                     // scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n+          StorageLive(_3);                 // scope 1 at $DIR/lower_array_len.rs:7:8: 7:27\n+          StorageLive(_4);                 // scope 1 at $DIR/lower_array_len.rs:7:8: 7:13\n+          _4 = _1;                         // scope 1 at $DIR/lower_array_len.rs:7:8: 7:13\n+          StorageLive(_5);                 // scope 1 at $DIR/lower_array_len.rs:7:16: 7:27\n+          StorageLive(_6);                 // scope 1 at $DIR/lower_array_len.rs:7:16: 7:27\n+          StorageLive(_7);                 // scope 1 at $DIR/lower_array_len.rs:7:16: 7:27\n+          _7 = &(*_2);                     // scope 1 at $DIR/lower_array_len.rs:7:16: 7:27\n++         StorageLive(_11);                // scope 1 at $DIR/lower_array_len.rs:7:16: 7:27\n++         _11 = _7;                        // scope 1 at $DIR/lower_array_len.rs:7:16: 7:27\n+          _6 = move _7 as &[u8] (Pointer(Unsize)); // scope 1 at $DIR/lower_array_len.rs:7:16: 7:27\n+          StorageDead(_7);                 // scope 1 at $DIR/lower_array_len.rs:7:20: 7:21\n+-         _5 = Len((*_6));                 // scope 1 at $DIR/lower_array_len.rs:7:16: 7:27\n++         _5 = Len((*_11));                // scope 1 at $DIR/lower_array_len.rs:7:16: 7:27\n++         StorageDead(_11);                // scope 1 at $DIR/lower_array_len.rs:7:16: 7:27\n+          goto -> bb1;                     // scope 1 at $DIR/lower_array_len.rs:7:16: 7:27\n       }\n   \n       bb1: {\n-          StorageDead(_6);                 // scope 0 at $DIR/lower_array_len.rs:7:26: 7:27\n-          _3 = Lt(move _4, move _5);       // scope 0 at $DIR/lower_array_len.rs:7:8: 7:27\n-          StorageDead(_5);                 // scope 0 at $DIR/lower_array_len.rs:7:26: 7:27\n-          StorageDead(_4);                 // scope 0 at $DIR/lower_array_len.rs:7:26: 7:27\n-          switchInt(move _3) -> [false: bb4, otherwise: bb2]; // scope 0 at $DIR/lower_array_len.rs:7:8: 7:27\n+          StorageDead(_6);                 // scope 1 at $DIR/lower_array_len.rs:7:26: 7:27\n+          _3 = Lt(move _4, move _5);       // scope 1 at $DIR/lower_array_len.rs:7:8: 7:27\n+          StorageDead(_5);                 // scope 1 at $DIR/lower_array_len.rs:7:26: 7:27\n+          StorageDead(_4);                 // scope 1 at $DIR/lower_array_len.rs:7:26: 7:27\n+          switchInt(move _3) -> [false: bb4, otherwise: bb2]; // scope 1 at $DIR/lower_array_len.rs:7:8: 7:27\n       }\n   \n       bb2: {\n-          StorageLive(_8);                 // scope 0 at $DIR/lower_array_len.rs:8:15: 8:20\n-          _8 = _1;                         // scope 0 at $DIR/lower_array_len.rs:8:15: 8:20\n-          _9 = Len((*_2));                 // scope 0 at $DIR/lower_array_len.rs:8:9: 8:21\n-          _10 = Lt(_8, _9);                // scope 0 at $DIR/lower_array_len.rs:8:9: 8:21\n-          assert(move _10, \"index out of bounds: the length is {} but the index is {}\", move _9, _8) -> bb3; // scope 0 at $DIR/lower_array_len.rs:8:9: 8:21\n+          StorageLive(_8);                 // scope 1 at $DIR/lower_array_len.rs:8:15: 8:20\n+          _8 = _1;                         // scope 1 at $DIR/lower_array_len.rs:8:15: 8:20\n+          _9 = Len((*_2));                 // scope 1 at $DIR/lower_array_len.rs:8:9: 8:21\n+          _10 = Lt(_8, _9);                // scope 1 at $DIR/lower_array_len.rs:8:9: 8:21\n+          assert(move _10, \"index out of bounds: the length is {} but the index is {}\", move _9, _8) -> bb3; // scope 1 at $DIR/lower_array_len.rs:8:9: 8:21\n       }\n   \n       bb3: {\n-          _0 = (*_2)[_8];                  // scope 0 at $DIR/lower_array_len.rs:8:9: 8:21\n-          StorageDead(_8);                 // scope 0 at $DIR/lower_array_len.rs:9:5: 9:6\n+          _0 = (*_2)[_8];                  // scope 1 at $DIR/lower_array_len.rs:8:9: 8:21\n+          StorageDead(_8);                 // scope 1 at $DIR/lower_array_len.rs:9:5: 9:6\n           goto -> bb5;                     // scope 0 at $DIR/lower_array_len.rs:7:5: 11:6\n       }\n   "}, {"sha": "3d7047b71d3421d1cc102e6d783724be4821810c", "filename": "src/test/mir-opt/lower_array_len.array_bound.SimplifyLocals.diff", "status": "modified", "additions": 32, "deletions": 30, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound.SimplifyLocals.diff?ref=e39c92e7aa2cd77659d504b05ad59e38388866f7", "patch": "@@ -13,47 +13,49 @@\n -     let _8: usize;                       // in scope 0 at $DIR/lower_array_len.rs:8:15: 8:20\n -     let mut _9: usize;                   // in scope 0 at $DIR/lower_array_len.rs:8:9: 8:21\n -     let mut _10: bool;                   // in scope 0 at $DIR/lower_array_len.rs:8:9: 8:21\n--     let mut _11: &[u8; N];               // in scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n +     let _6: usize;                       // in scope 0 at $DIR/lower_array_len.rs:8:15: 8:20\n +     let mut _7: usize;                   // in scope 0 at $DIR/lower_array_len.rs:8:9: 8:21\n +     let mut _8: bool;                    // in scope 0 at $DIR/lower_array_len.rs:8:9: 8:21\n+      scope 1 {\n+-         let mut _11: &[u8; N];           // in scope 1 at $DIR/lower_array_len.rs:7:16: 7:27\n+      }\n   \n       bb0: {\n-          StorageLive(_3);                 // scope 0 at $DIR/lower_array_len.rs:7:8: 7:27\n-          StorageLive(_4);                 // scope 0 at $DIR/lower_array_len.rs:7:8: 7:13\n-          _4 = _1;                         // scope 0 at $DIR/lower_array_len.rs:7:8: 7:13\n-          StorageLive(_5);                 // scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n--         StorageLive(_6);                 // scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n--         StorageLive(_7);                 // scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n--         StorageLive(_11);                // scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n--         StorageDead(_7);                 // scope 0 at $DIR/lower_array_len.rs:7:20: 7:21\n-          _5 = const N;                    // scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n--         StorageDead(_11);                // scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n--         StorageDead(_6);                 // scope 0 at $DIR/lower_array_len.rs:7:26: 7:27\n-          _3 = Lt(move _4, move _5);       // scope 0 at $DIR/lower_array_len.rs:7:8: 7:27\n-          StorageDead(_5);                 // scope 0 at $DIR/lower_array_len.rs:7:26: 7:27\n-          StorageDead(_4);                 // scope 0 at $DIR/lower_array_len.rs:7:26: 7:27\n-          switchInt(move _3) -> [false: bb3, otherwise: bb1]; // scope 0 at $DIR/lower_array_len.rs:7:8: 7:27\n+          StorageLive(_3);                 // scope 1 at $DIR/lower_array_len.rs:7:8: 7:27\n+          StorageLive(_4);                 // scope 1 at $DIR/lower_array_len.rs:7:8: 7:13\n+          _4 = _1;                         // scope 1 at $DIR/lower_array_len.rs:7:8: 7:13\n+          StorageLive(_5);                 // scope 1 at $DIR/lower_array_len.rs:7:16: 7:27\n+-         StorageLive(_6);                 // scope 1 at $DIR/lower_array_len.rs:7:16: 7:27\n+-         StorageLive(_7);                 // scope 1 at $DIR/lower_array_len.rs:7:16: 7:27\n+-         StorageLive(_11);                // scope 1 at $DIR/lower_array_len.rs:7:16: 7:27\n+-         StorageDead(_7);                 // scope 1 at $DIR/lower_array_len.rs:7:20: 7:21\n+          _5 = const N;                    // scope 1 at $DIR/lower_array_len.rs:7:16: 7:27\n+-         StorageDead(_11);                // scope 1 at $DIR/lower_array_len.rs:7:16: 7:27\n+-         StorageDead(_6);                 // scope 1 at $DIR/lower_array_len.rs:7:26: 7:27\n+          _3 = Lt(move _4, move _5);       // scope 1 at $DIR/lower_array_len.rs:7:8: 7:27\n+          StorageDead(_5);                 // scope 1 at $DIR/lower_array_len.rs:7:26: 7:27\n+          StorageDead(_4);                 // scope 1 at $DIR/lower_array_len.rs:7:26: 7:27\n+          switchInt(move _3) -> [false: bb3, otherwise: bb1]; // scope 1 at $DIR/lower_array_len.rs:7:8: 7:27\n       }\n   \n       bb1: {\n--         StorageLive(_8);                 // scope 0 at $DIR/lower_array_len.rs:8:15: 8:20\n--         _8 = _1;                         // scope 0 at $DIR/lower_array_len.rs:8:15: 8:20\n--         _9 = const N;                    // scope 0 at $DIR/lower_array_len.rs:8:9: 8:21\n--         _10 = Lt(_8, _9);                // scope 0 at $DIR/lower_array_len.rs:8:9: 8:21\n--         assert(move _10, \"index out of bounds: the length is {} but the index is {}\", move _9, _8) -> bb2; // scope 0 at $DIR/lower_array_len.rs:8:9: 8:21\n-+         StorageLive(_6);                 // scope 0 at $DIR/lower_array_len.rs:8:15: 8:20\n-+         _6 = _1;                         // scope 0 at $DIR/lower_array_len.rs:8:15: 8:20\n-+         _7 = const N;                    // scope 0 at $DIR/lower_array_len.rs:8:9: 8:21\n-+         _8 = Lt(_6, _7);                 // scope 0 at $DIR/lower_array_len.rs:8:9: 8:21\n-+         assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> bb2; // scope 0 at $DIR/lower_array_len.rs:8:9: 8:21\n+-         StorageLive(_8);                 // scope 1 at $DIR/lower_array_len.rs:8:15: 8:20\n+-         _8 = _1;                         // scope 1 at $DIR/lower_array_len.rs:8:15: 8:20\n+-         _9 = const N;                    // scope 1 at $DIR/lower_array_len.rs:8:9: 8:21\n+-         _10 = Lt(_8, _9);                // scope 1 at $DIR/lower_array_len.rs:8:9: 8:21\n+-         assert(move _10, \"index out of bounds: the length is {} but the index is {}\", move _9, _8) -> bb2; // scope 1 at $DIR/lower_array_len.rs:8:9: 8:21\n++         StorageLive(_6);                 // scope 1 at $DIR/lower_array_len.rs:8:15: 8:20\n++         _6 = _1;                         // scope 1 at $DIR/lower_array_len.rs:8:15: 8:20\n++         _7 = const N;                    // scope 1 at $DIR/lower_array_len.rs:8:9: 8:21\n++         _8 = Lt(_6, _7);                 // scope 1 at $DIR/lower_array_len.rs:8:9: 8:21\n++         assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> bb2; // scope 1 at $DIR/lower_array_len.rs:8:9: 8:21\n       }\n   \n       bb2: {\n--         _0 = (*_2)[_8];                  // scope 0 at $DIR/lower_array_len.rs:8:9: 8:21\n--         StorageDead(_8);                 // scope 0 at $DIR/lower_array_len.rs:9:5: 9:6\n-+         _0 = (*_2)[_6];                  // scope 0 at $DIR/lower_array_len.rs:8:9: 8:21\n-+         StorageDead(_6);                 // scope 0 at $DIR/lower_array_len.rs:9:5: 9:6\n+-         _0 = (*_2)[_8];                  // scope 1 at $DIR/lower_array_len.rs:8:9: 8:21\n+-         StorageDead(_8);                 // scope 1 at $DIR/lower_array_len.rs:9:5: 9:6\n++         _0 = (*_2)[_6];                  // scope 1 at $DIR/lower_array_len.rs:8:9: 8:21\n++         StorageDead(_6);                 // scope 1 at $DIR/lower_array_len.rs:9:5: 9:6\n           goto -> bb4;                     // scope 0 at $DIR/lower_array_len.rs:7:5: 11:6\n       }\n   "}, {"sha": "ef5641ad34335e2b5a0e269db371bb19af940928", "filename": "src/test/mir-opt/lower_array_len.array_bound_mut.InstCombine.diff", "status": "modified", "additions": 30, "deletions": 28, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound_mut.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound_mut.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound_mut.InstCombine.diff?ref=e39c92e7aa2cd77659d504b05ad59e38388866f7", "patch": "@@ -16,42 +16,44 @@\n       let _11: usize;                      // in scope 0 at $DIR/lower_array_len.rs:21:15: 21:16\n       let mut _12: usize;                  // in scope 0 at $DIR/lower_array_len.rs:21:9: 21:17\n       let mut _13: bool;                   // in scope 0 at $DIR/lower_array_len.rs:21:9: 21:17\n-      let mut _14: &[u8; N];               // in scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n+      scope 1 {\n+          let mut _14: &[u8; N];           // in scope 1 at $DIR/lower_array_len.rs:18:16: 18:27\n+      }\n   \n       bb0: {\n-          StorageLive(_3);                 // scope 0 at $DIR/lower_array_len.rs:18:8: 18:27\n-          StorageLive(_4);                 // scope 0 at $DIR/lower_array_len.rs:18:8: 18:13\n-          _4 = _1;                         // scope 0 at $DIR/lower_array_len.rs:18:8: 18:13\n-          StorageLive(_5);                 // scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n-          StorageLive(_6);                 // scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n-          StorageLive(_7);                 // scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n-          _7 = &(*_2);                     // scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n-          StorageLive(_14);                // scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n-          _14 = _7;                        // scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n-          _6 = move _7 as &[u8] (Pointer(Unsize)); // scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n-          StorageDead(_7);                 // scope 0 at $DIR/lower_array_len.rs:18:20: 18:21\n--         _5 = Len((*_14));                // scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n-+         _5 = const N;                    // scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n-          StorageDead(_14);                // scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n-          StorageDead(_6);                 // scope 0 at $DIR/lower_array_len.rs:18:26: 18:27\n-          _3 = Lt(move _4, move _5);       // scope 0 at $DIR/lower_array_len.rs:18:8: 18:27\n-          StorageDead(_5);                 // scope 0 at $DIR/lower_array_len.rs:18:26: 18:27\n-          StorageDead(_4);                 // scope 0 at $DIR/lower_array_len.rs:18:26: 18:27\n-          switchInt(move _3) -> [false: bb3, otherwise: bb1]; // scope 0 at $DIR/lower_array_len.rs:18:8: 18:27\n+          StorageLive(_3);                 // scope 1 at $DIR/lower_array_len.rs:18:8: 18:27\n+          StorageLive(_4);                 // scope 1 at $DIR/lower_array_len.rs:18:8: 18:13\n+          _4 = _1;                         // scope 1 at $DIR/lower_array_len.rs:18:8: 18:13\n+          StorageLive(_5);                 // scope 1 at $DIR/lower_array_len.rs:18:16: 18:27\n+          StorageLive(_6);                 // scope 1 at $DIR/lower_array_len.rs:18:16: 18:27\n+          StorageLive(_7);                 // scope 1 at $DIR/lower_array_len.rs:18:16: 18:27\n+          _7 = &(*_2);                     // scope 1 at $DIR/lower_array_len.rs:18:16: 18:27\n+          StorageLive(_14);                // scope 1 at $DIR/lower_array_len.rs:18:16: 18:27\n+          _14 = _7;                        // scope 1 at $DIR/lower_array_len.rs:18:16: 18:27\n+          _6 = move _7 as &[u8] (Pointer(Unsize)); // scope 1 at $DIR/lower_array_len.rs:18:16: 18:27\n+          StorageDead(_7);                 // scope 1 at $DIR/lower_array_len.rs:18:20: 18:21\n+-         _5 = Len((*_14));                // scope 1 at $DIR/lower_array_len.rs:18:16: 18:27\n++         _5 = const N;                    // scope 1 at $DIR/lower_array_len.rs:18:16: 18:27\n+          StorageDead(_14);                // scope 1 at $DIR/lower_array_len.rs:18:16: 18:27\n+          StorageDead(_6);                 // scope 1 at $DIR/lower_array_len.rs:18:26: 18:27\n+          _3 = Lt(move _4, move _5);       // scope 1 at $DIR/lower_array_len.rs:18:8: 18:27\n+          StorageDead(_5);                 // scope 1 at $DIR/lower_array_len.rs:18:26: 18:27\n+          StorageDead(_4);                 // scope 1 at $DIR/lower_array_len.rs:18:26: 18:27\n+          switchInt(move _3) -> [false: bb3, otherwise: bb1]; // scope 1 at $DIR/lower_array_len.rs:18:8: 18:27\n       }\n   \n       bb1: {\n-          StorageLive(_8);                 // scope 0 at $DIR/lower_array_len.rs:19:15: 19:20\n-          _8 = _1;                         // scope 0 at $DIR/lower_array_len.rs:19:15: 19:20\n--         _9 = Len((*_2));                 // scope 0 at $DIR/lower_array_len.rs:19:9: 19:21\n-+         _9 = const N;                    // scope 0 at $DIR/lower_array_len.rs:19:9: 19:21\n-          _10 = Lt(_8, _9);                // scope 0 at $DIR/lower_array_len.rs:19:9: 19:21\n-          assert(move _10, \"index out of bounds: the length is {} but the index is {}\", move _9, _8) -> bb2; // scope 0 at $DIR/lower_array_len.rs:19:9: 19:21\n+          StorageLive(_8);                 // scope 1 at $DIR/lower_array_len.rs:19:15: 19:20\n+          _8 = _1;                         // scope 1 at $DIR/lower_array_len.rs:19:15: 19:20\n+-         _9 = Len((*_2));                 // scope 1 at $DIR/lower_array_len.rs:19:9: 19:21\n++         _9 = const N;                    // scope 1 at $DIR/lower_array_len.rs:19:9: 19:21\n+          _10 = Lt(_8, _9);                // scope 1 at $DIR/lower_array_len.rs:19:9: 19:21\n+          assert(move _10, \"index out of bounds: the length is {} but the index is {}\", move _9, _8) -> bb2; // scope 1 at $DIR/lower_array_len.rs:19:9: 19:21\n       }\n   \n       bb2: {\n-          _0 = (*_2)[_8];                  // scope 0 at $DIR/lower_array_len.rs:19:9: 19:21\n-          StorageDead(_8);                 // scope 0 at $DIR/lower_array_len.rs:20:5: 20:6\n+          _0 = (*_2)[_8];                  // scope 1 at $DIR/lower_array_len.rs:19:9: 19:21\n+          StorageDead(_8);                 // scope 1 at $DIR/lower_array_len.rs:20:5: 20:6\n           goto -> bb5;                     // scope 0 at $DIR/lower_array_len.rs:18:5: 24:6\n       }\n   "}, {"sha": "c31c9d80a1bf330be6fe26fe695910214ec16c07", "filename": "src/test/mir-opt/lower_array_len.array_bound_mut.NormalizeArrayLen.diff", "status": "modified", "additions": 30, "deletions": 28, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound_mut.NormalizeArrayLen.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound_mut.NormalizeArrayLen.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound_mut.NormalizeArrayLen.diff?ref=e39c92e7aa2cd77659d504b05ad59e38388866f7", "patch": "@@ -16,45 +16,47 @@\n       let _11: usize;                      // in scope 0 at $DIR/lower_array_len.rs:21:15: 21:16\n       let mut _12: usize;                  // in scope 0 at $DIR/lower_array_len.rs:21:9: 21:17\n       let mut _13: bool;                   // in scope 0 at $DIR/lower_array_len.rs:21:9: 21:17\n-+     let mut _14: &[u8; N];               // in scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n+      scope 1 {\n++         let mut _14: &[u8; N];           // in scope 1 at $DIR/lower_array_len.rs:18:16: 18:27\n+      }\n   \n       bb0: {\n-          StorageLive(_3);                 // scope 0 at $DIR/lower_array_len.rs:18:8: 18:27\n-          StorageLive(_4);                 // scope 0 at $DIR/lower_array_len.rs:18:8: 18:13\n-          _4 = _1;                         // scope 0 at $DIR/lower_array_len.rs:18:8: 18:13\n-          StorageLive(_5);                 // scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n-          StorageLive(_6);                 // scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n-          StorageLive(_7);                 // scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n-          _7 = &(*_2);                     // scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n-+         StorageLive(_14);                // scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n-+         _14 = _7;                        // scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n-          _6 = move _7 as &[u8] (Pointer(Unsize)); // scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n-          StorageDead(_7);                 // scope 0 at $DIR/lower_array_len.rs:18:20: 18:21\n--         _5 = Len((*_6));                 // scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n-+         _5 = Len((*_14));                // scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n-+         StorageDead(_14);                // scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n-          goto -> bb1;                     // scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n+          StorageLive(_3);                 // scope 1 at $DIR/lower_array_len.rs:18:8: 18:27\n+          StorageLive(_4);                 // scope 1 at $DIR/lower_array_len.rs:18:8: 18:13\n+          _4 = _1;                         // scope 1 at $DIR/lower_array_len.rs:18:8: 18:13\n+          StorageLive(_5);                 // scope 1 at $DIR/lower_array_len.rs:18:16: 18:27\n+          StorageLive(_6);                 // scope 1 at $DIR/lower_array_len.rs:18:16: 18:27\n+          StorageLive(_7);                 // scope 1 at $DIR/lower_array_len.rs:18:16: 18:27\n+          _7 = &(*_2);                     // scope 1 at $DIR/lower_array_len.rs:18:16: 18:27\n++         StorageLive(_14);                // scope 1 at $DIR/lower_array_len.rs:18:16: 18:27\n++         _14 = _7;                        // scope 1 at $DIR/lower_array_len.rs:18:16: 18:27\n+          _6 = move _7 as &[u8] (Pointer(Unsize)); // scope 1 at $DIR/lower_array_len.rs:18:16: 18:27\n+          StorageDead(_7);                 // scope 1 at $DIR/lower_array_len.rs:18:20: 18:21\n+-         _5 = Len((*_6));                 // scope 1 at $DIR/lower_array_len.rs:18:16: 18:27\n++         _5 = Len((*_14));                // scope 1 at $DIR/lower_array_len.rs:18:16: 18:27\n++         StorageDead(_14);                // scope 1 at $DIR/lower_array_len.rs:18:16: 18:27\n+          goto -> bb1;                     // scope 1 at $DIR/lower_array_len.rs:18:16: 18:27\n       }\n   \n       bb1: {\n-          StorageDead(_6);                 // scope 0 at $DIR/lower_array_len.rs:18:26: 18:27\n-          _3 = Lt(move _4, move _5);       // scope 0 at $DIR/lower_array_len.rs:18:8: 18:27\n-          StorageDead(_5);                 // scope 0 at $DIR/lower_array_len.rs:18:26: 18:27\n-          StorageDead(_4);                 // scope 0 at $DIR/lower_array_len.rs:18:26: 18:27\n-          switchInt(move _3) -> [false: bb4, otherwise: bb2]; // scope 0 at $DIR/lower_array_len.rs:18:8: 18:27\n+          StorageDead(_6);                 // scope 1 at $DIR/lower_array_len.rs:18:26: 18:27\n+          _3 = Lt(move _4, move _5);       // scope 1 at $DIR/lower_array_len.rs:18:8: 18:27\n+          StorageDead(_5);                 // scope 1 at $DIR/lower_array_len.rs:18:26: 18:27\n+          StorageDead(_4);                 // scope 1 at $DIR/lower_array_len.rs:18:26: 18:27\n+          switchInt(move _3) -> [false: bb4, otherwise: bb2]; // scope 1 at $DIR/lower_array_len.rs:18:8: 18:27\n       }\n   \n       bb2: {\n-          StorageLive(_8);                 // scope 0 at $DIR/lower_array_len.rs:19:15: 19:20\n-          _8 = _1;                         // scope 0 at $DIR/lower_array_len.rs:19:15: 19:20\n-          _9 = Len((*_2));                 // scope 0 at $DIR/lower_array_len.rs:19:9: 19:21\n-          _10 = Lt(_8, _9);                // scope 0 at $DIR/lower_array_len.rs:19:9: 19:21\n-          assert(move _10, \"index out of bounds: the length is {} but the index is {}\", move _9, _8) -> bb3; // scope 0 at $DIR/lower_array_len.rs:19:9: 19:21\n+          StorageLive(_8);                 // scope 1 at $DIR/lower_array_len.rs:19:15: 19:20\n+          _8 = _1;                         // scope 1 at $DIR/lower_array_len.rs:19:15: 19:20\n+          _9 = Len((*_2));                 // scope 1 at $DIR/lower_array_len.rs:19:9: 19:21\n+          _10 = Lt(_8, _9);                // scope 1 at $DIR/lower_array_len.rs:19:9: 19:21\n+          assert(move _10, \"index out of bounds: the length is {} but the index is {}\", move _9, _8) -> bb3; // scope 1 at $DIR/lower_array_len.rs:19:9: 19:21\n       }\n   \n       bb3: {\n-          _0 = (*_2)[_8];                  // scope 0 at $DIR/lower_array_len.rs:19:9: 19:21\n-          StorageDead(_8);                 // scope 0 at $DIR/lower_array_len.rs:20:5: 20:6\n+          _0 = (*_2)[_8];                  // scope 1 at $DIR/lower_array_len.rs:19:9: 19:21\n+          StorageDead(_8);                 // scope 1 at $DIR/lower_array_len.rs:20:5: 20:6\n           goto -> bb6;                     // scope 0 at $DIR/lower_array_len.rs:18:5: 24:6\n       }\n   "}, {"sha": "a3d794f94b3f27b262e857fab60f672a679bef64", "filename": "src/test/mir-opt/lower_array_len.array_bound_mut.SimplifyLocals.diff", "status": "modified", "additions": 32, "deletions": 30, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound_mut.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound_mut.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound_mut.SimplifyLocals.diff?ref=e39c92e7aa2cd77659d504b05ad59e38388866f7", "patch": "@@ -16,50 +16,52 @@\n -     let _11: usize;                      // in scope 0 at $DIR/lower_array_len.rs:21:15: 21:16\n -     let mut _12: usize;                  // in scope 0 at $DIR/lower_array_len.rs:21:9: 21:17\n -     let mut _13: bool;                   // in scope 0 at $DIR/lower_array_len.rs:21:9: 21:17\n--     let mut _14: &[u8; N];               // in scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n +     let _6: usize;                       // in scope 0 at $DIR/lower_array_len.rs:19:15: 19:20\n +     let mut _7: usize;                   // in scope 0 at $DIR/lower_array_len.rs:19:9: 19:21\n +     let mut _8: bool;                    // in scope 0 at $DIR/lower_array_len.rs:19:9: 19:21\n +     let _9: usize;                       // in scope 0 at $DIR/lower_array_len.rs:21:15: 21:16\n +     let mut _10: usize;                  // in scope 0 at $DIR/lower_array_len.rs:21:9: 21:17\n +     let mut _11: bool;                   // in scope 0 at $DIR/lower_array_len.rs:21:9: 21:17\n+      scope 1 {\n+-         let mut _14: &[u8; N];           // in scope 1 at $DIR/lower_array_len.rs:18:16: 18:27\n+      }\n   \n       bb0: {\n-          StorageLive(_3);                 // scope 0 at $DIR/lower_array_len.rs:18:8: 18:27\n-          StorageLive(_4);                 // scope 0 at $DIR/lower_array_len.rs:18:8: 18:13\n-          _4 = _1;                         // scope 0 at $DIR/lower_array_len.rs:18:8: 18:13\n-          StorageLive(_5);                 // scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n--         StorageLive(_6);                 // scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n--         StorageLive(_7);                 // scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n--         StorageLive(_14);                // scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n--         StorageDead(_7);                 // scope 0 at $DIR/lower_array_len.rs:18:20: 18:21\n-          _5 = const N;                    // scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n--         StorageDead(_14);                // scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n--         StorageDead(_6);                 // scope 0 at $DIR/lower_array_len.rs:18:26: 18:27\n-          _3 = Lt(move _4, move _5);       // scope 0 at $DIR/lower_array_len.rs:18:8: 18:27\n-          StorageDead(_5);                 // scope 0 at $DIR/lower_array_len.rs:18:26: 18:27\n-          StorageDead(_4);                 // scope 0 at $DIR/lower_array_len.rs:18:26: 18:27\n-          switchInt(move _3) -> [false: bb3, otherwise: bb1]; // scope 0 at $DIR/lower_array_len.rs:18:8: 18:27\n+          StorageLive(_3);                 // scope 1 at $DIR/lower_array_len.rs:18:8: 18:27\n+          StorageLive(_4);                 // scope 1 at $DIR/lower_array_len.rs:18:8: 18:13\n+          _4 = _1;                         // scope 1 at $DIR/lower_array_len.rs:18:8: 18:13\n+          StorageLive(_5);                 // scope 1 at $DIR/lower_array_len.rs:18:16: 18:27\n+-         StorageLive(_6);                 // scope 1 at $DIR/lower_array_len.rs:18:16: 18:27\n+-         StorageLive(_7);                 // scope 1 at $DIR/lower_array_len.rs:18:16: 18:27\n+-         StorageLive(_14);                // scope 1 at $DIR/lower_array_len.rs:18:16: 18:27\n+-         StorageDead(_7);                 // scope 1 at $DIR/lower_array_len.rs:18:20: 18:21\n+          _5 = const N;                    // scope 1 at $DIR/lower_array_len.rs:18:16: 18:27\n+-         StorageDead(_14);                // scope 1 at $DIR/lower_array_len.rs:18:16: 18:27\n+-         StorageDead(_6);                 // scope 1 at $DIR/lower_array_len.rs:18:26: 18:27\n+          _3 = Lt(move _4, move _5);       // scope 1 at $DIR/lower_array_len.rs:18:8: 18:27\n+          StorageDead(_5);                 // scope 1 at $DIR/lower_array_len.rs:18:26: 18:27\n+          StorageDead(_4);                 // scope 1 at $DIR/lower_array_len.rs:18:26: 18:27\n+          switchInt(move _3) -> [false: bb3, otherwise: bb1]; // scope 1 at $DIR/lower_array_len.rs:18:8: 18:27\n       }\n   \n       bb1: {\n--         StorageLive(_8);                 // scope 0 at $DIR/lower_array_len.rs:19:15: 19:20\n--         _8 = _1;                         // scope 0 at $DIR/lower_array_len.rs:19:15: 19:20\n--         _9 = const N;                    // scope 0 at $DIR/lower_array_len.rs:19:9: 19:21\n--         _10 = Lt(_8, _9);                // scope 0 at $DIR/lower_array_len.rs:19:9: 19:21\n--         assert(move _10, \"index out of bounds: the length is {} but the index is {}\", move _9, _8) -> bb2; // scope 0 at $DIR/lower_array_len.rs:19:9: 19:21\n-+         StorageLive(_6);                 // scope 0 at $DIR/lower_array_len.rs:19:15: 19:20\n-+         _6 = _1;                         // scope 0 at $DIR/lower_array_len.rs:19:15: 19:20\n-+         _7 = const N;                    // scope 0 at $DIR/lower_array_len.rs:19:9: 19:21\n-+         _8 = Lt(_6, _7);                 // scope 0 at $DIR/lower_array_len.rs:19:9: 19:21\n-+         assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> bb2; // scope 0 at $DIR/lower_array_len.rs:19:9: 19:21\n+-         StorageLive(_8);                 // scope 1 at $DIR/lower_array_len.rs:19:15: 19:20\n+-         _8 = _1;                         // scope 1 at $DIR/lower_array_len.rs:19:15: 19:20\n+-         _9 = const N;                    // scope 1 at $DIR/lower_array_len.rs:19:9: 19:21\n+-         _10 = Lt(_8, _9);                // scope 1 at $DIR/lower_array_len.rs:19:9: 19:21\n+-         assert(move _10, \"index out of bounds: the length is {} but the index is {}\", move _9, _8) -> bb2; // scope 1 at $DIR/lower_array_len.rs:19:9: 19:21\n++         StorageLive(_6);                 // scope 1 at $DIR/lower_array_len.rs:19:15: 19:20\n++         _6 = _1;                         // scope 1 at $DIR/lower_array_len.rs:19:15: 19:20\n++         _7 = const N;                    // scope 1 at $DIR/lower_array_len.rs:19:9: 19:21\n++         _8 = Lt(_6, _7);                 // scope 1 at $DIR/lower_array_len.rs:19:9: 19:21\n++         assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> bb2; // scope 1 at $DIR/lower_array_len.rs:19:9: 19:21\n       }\n   \n       bb2: {\n--         _0 = (*_2)[_8];                  // scope 0 at $DIR/lower_array_len.rs:19:9: 19:21\n--         StorageDead(_8);                 // scope 0 at $DIR/lower_array_len.rs:20:5: 20:6\n-+         _0 = (*_2)[_6];                  // scope 0 at $DIR/lower_array_len.rs:19:9: 19:21\n-+         StorageDead(_6);                 // scope 0 at $DIR/lower_array_len.rs:20:5: 20:6\n+-         _0 = (*_2)[_8];                  // scope 1 at $DIR/lower_array_len.rs:19:9: 19:21\n+-         StorageDead(_8);                 // scope 1 at $DIR/lower_array_len.rs:20:5: 20:6\n++         _0 = (*_2)[_6];                  // scope 1 at $DIR/lower_array_len.rs:19:9: 19:21\n++         StorageDead(_6);                 // scope 1 at $DIR/lower_array_len.rs:20:5: 20:6\n           goto -> bb5;                     // scope 0 at $DIR/lower_array_len.rs:18:5: 24:6\n       }\n   "}, {"sha": "4b77db0707d3f57851a33f94fda98be1bfd2e80c", "filename": "src/test/mir-opt/lower_intrinsics.f_u64.PreCodegen.before.mir", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Flower_intrinsics.f_u64.PreCodegen.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Flower_intrinsics.f_u64.PreCodegen.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_intrinsics.f_u64.PreCodegen.before.mir?ref=e39c92e7aa2cd77659d504b05ad59e38388866f7", "patch": "@@ -7,7 +7,9 @@ fn f_u64() -> () {\n         debug t => _1;                   // in scope 1 at $DIR/lower_intrinsics.rs:44:22: 44:23\n         let _2: ();                      // in scope 1 at $DIR/lower_intrinsics.rs:48:9: 48:21\n         let mut _3: u64;                 // in scope 1 at $DIR/lower_intrinsics.rs:48:19: 48:20\n-        scope 2 (inlined std::mem::size_of::<u64>) { // at $DIR/lower_intrinsics.rs:45:8: 45:32\n+        scope 2 {\n+            scope 3 (inlined std::mem::size_of::<u64>) { // at $DIR/lower_intrinsics.rs:45:8: 45:32\n+            }\n         }\n     }\n "}, {"sha": "1306caf229174ea68e009c632183f525f66394cc", "filename": "src/test/mir-opt/lower_intrinsics.f_unit.PreCodegen.before.mir", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Flower_intrinsics.f_unit.PreCodegen.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Flower_intrinsics.f_unit.PreCodegen.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_intrinsics.f_unit.PreCodegen.before.mir?ref=e39c92e7aa2cd77659d504b05ad59e38388866f7", "patch": "@@ -6,21 +6,23 @@ fn f_unit() -> () {\n     scope 1 (inlined f_dispatch::<()>) { // at $DIR/lower_intrinsics.rs:34:5: 34:19\n         debug t => _1;                   // in scope 1 at $DIR/lower_intrinsics.rs:44:22: 44:23\n         let _2: ();                      // in scope 1 at $DIR/lower_intrinsics.rs:46:9: 46:17\n-        scope 2 (inlined std::mem::size_of::<()>) { // at $DIR/lower_intrinsics.rs:45:8: 45:32\n+        scope 2 {\n+            scope 3 (inlined std::mem::size_of::<()>) { // at $DIR/lower_intrinsics.rs:45:8: 45:32\n+            }\n         }\n     }\n \n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/lower_intrinsics.rs:34:16: 34:18\n-        StorageLive(_2);                 // scope 1 at $DIR/lower_intrinsics.rs:46:9: 46:17\n-        _2 = f_zst::<()>(const ()) -> bb1; // scope 1 at $DIR/lower_intrinsics.rs:46:9: 46:17\n+        StorageLive(_2);                 // scope 2 at $DIR/lower_intrinsics.rs:46:9: 46:17\n+        _2 = f_zst::<()>(const ()) -> bb1; // scope 2 at $DIR/lower_intrinsics.rs:46:9: 46:17\n                                          // mir::Constant\n                                          // + span: $DIR/lower_intrinsics.rs:46:9: 46:14\n                                          // + literal: Const { ty: fn(()) {f_zst::<()>}, val: Value(Scalar(<ZST>)) }\n     }\n \n     bb1: {\n-        StorageDead(_2);                 // scope 1 at $DIR/lower_intrinsics.rs:46:17: 46:18\n+        StorageDead(_2);                 // scope 2 at $DIR/lower_intrinsics.rs:46:17: 46:18\n         StorageDead(_1);                 // scope 0 at $DIR/lower_intrinsics.rs:34:18: 34:19\n         return;                          // scope 0 at $DIR/lower_intrinsics.rs:35:2: 35:2\n     }"}, {"sha": "095641a597ba8ce5f2e8c429ec24bbf08ee4a927", "filename": "src/test/mir-opt/lower_slice_len.bound.LowerSliceLenCalls.diff", "status": "modified", "additions": 23, "deletions": 21, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Flower_slice_len.bound.LowerSliceLenCalls.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Flower_slice_len.bound.LowerSliceLenCalls.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_slice_len.bound.LowerSliceLenCalls.diff?ref=e39c92e7aa2cd77659d504b05ad59e38388866f7", "patch": "@@ -12,41 +12,43 @@\n       let _7: usize;                       // in scope 0 at $DIR/lower_slice_len.rs:6:15: 6:20\n       let mut _8: usize;                   // in scope 0 at $DIR/lower_slice_len.rs:6:9: 6:21\n       let mut _9: bool;                    // in scope 0 at $DIR/lower_slice_len.rs:6:9: 6:21\n+      scope 1 {\n+      }\n   \n       bb0: {\n-          StorageLive(_3);                 // scope 0 at $DIR/lower_slice_len.rs:5:8: 5:27\n-          StorageLive(_4);                 // scope 0 at $DIR/lower_slice_len.rs:5:8: 5:13\n-          _4 = _1;                         // scope 0 at $DIR/lower_slice_len.rs:5:8: 5:13\n-          StorageLive(_5);                 // scope 0 at $DIR/lower_slice_len.rs:5:16: 5:27\n-          StorageLive(_6);                 // scope 0 at $DIR/lower_slice_len.rs:5:16: 5:27\n-          _6 = &(*_2);                     // scope 0 at $DIR/lower_slice_len.rs:5:16: 5:27\n--         _5 = core::slice::<impl [u8]>::len(move _6) -> bb1; // scope 0 at $DIR/lower_slice_len.rs:5:16: 5:27\n+          StorageLive(_3);                 // scope 1 at $DIR/lower_slice_len.rs:5:8: 5:27\n+          StorageLive(_4);                 // scope 1 at $DIR/lower_slice_len.rs:5:8: 5:13\n+          _4 = _1;                         // scope 1 at $DIR/lower_slice_len.rs:5:8: 5:13\n+          StorageLive(_5);                 // scope 1 at $DIR/lower_slice_len.rs:5:16: 5:27\n+          StorageLive(_6);                 // scope 1 at $DIR/lower_slice_len.rs:5:16: 5:27\n+          _6 = &(*_2);                     // scope 1 at $DIR/lower_slice_len.rs:5:16: 5:27\n+-         _5 = core::slice::<impl [u8]>::len(move _6) -> bb1; // scope 1 at $DIR/lower_slice_len.rs:5:16: 5:27\n -                                          // mir::Constant\n -                                          // + span: $DIR/lower_slice_len.rs:5:22: 5:25\n -                                          // + literal: Const { ty: for<'r> fn(&'r [u8]) -> usize {core::slice::<impl [u8]>::len}, val: Value(Scalar(<ZST>)) }\n-+         _5 = Len((*_6));                 // scope 0 at $DIR/lower_slice_len.rs:5:16: 5:27\n-+         goto -> bb1;                     // scope 0 at $DIR/lower_slice_len.rs:5:16: 5:27\n++         _5 = Len((*_6));                 // scope 1 at $DIR/lower_slice_len.rs:5:16: 5:27\n++         goto -> bb1;                     // scope 1 at $DIR/lower_slice_len.rs:5:16: 5:27\n       }\n   \n       bb1: {\n-          StorageDead(_6);                 // scope 0 at $DIR/lower_slice_len.rs:5:26: 5:27\n-          _3 = Lt(move _4, move _5);       // scope 0 at $DIR/lower_slice_len.rs:5:8: 5:27\n-          StorageDead(_5);                 // scope 0 at $DIR/lower_slice_len.rs:5:26: 5:27\n-          StorageDead(_4);                 // scope 0 at $DIR/lower_slice_len.rs:5:26: 5:27\n-          switchInt(move _3) -> [false: bb4, otherwise: bb2]; // scope 0 at $DIR/lower_slice_len.rs:5:8: 5:27\n+          StorageDead(_6);                 // scope 1 at $DIR/lower_slice_len.rs:5:26: 5:27\n+          _3 = Lt(move _4, move _5);       // scope 1 at $DIR/lower_slice_len.rs:5:8: 5:27\n+          StorageDead(_5);                 // scope 1 at $DIR/lower_slice_len.rs:5:26: 5:27\n+          StorageDead(_4);                 // scope 1 at $DIR/lower_slice_len.rs:5:26: 5:27\n+          switchInt(move _3) -> [false: bb4, otherwise: bb2]; // scope 1 at $DIR/lower_slice_len.rs:5:8: 5:27\n       }\n   \n       bb2: {\n-          StorageLive(_7);                 // scope 0 at $DIR/lower_slice_len.rs:6:15: 6:20\n-          _7 = _1;                         // scope 0 at $DIR/lower_slice_len.rs:6:15: 6:20\n-          _8 = Len((*_2));                 // scope 0 at $DIR/lower_slice_len.rs:6:9: 6:21\n-          _9 = Lt(_7, _8);                 // scope 0 at $DIR/lower_slice_len.rs:6:9: 6:21\n-          assert(move _9, \"index out of bounds: the length is {} but the index is {}\", move _8, _7) -> bb3; // scope 0 at $DIR/lower_slice_len.rs:6:9: 6:21\n+          StorageLive(_7);                 // scope 1 at $DIR/lower_slice_len.rs:6:15: 6:20\n+          _7 = _1;                         // scope 1 at $DIR/lower_slice_len.rs:6:15: 6:20\n+          _8 = Len((*_2));                 // scope 1 at $DIR/lower_slice_len.rs:6:9: 6:21\n+          _9 = Lt(_7, _8);                 // scope 1 at $DIR/lower_slice_len.rs:6:9: 6:21\n+          assert(move _9, \"index out of bounds: the length is {} but the index is {}\", move _8, _7) -> bb3; // scope 1 at $DIR/lower_slice_len.rs:6:9: 6:21\n       }\n   \n       bb3: {\n-          _0 = (*_2)[_7];                  // scope 0 at $DIR/lower_slice_len.rs:6:9: 6:21\n-          StorageDead(_7);                 // scope 0 at $DIR/lower_slice_len.rs:7:5: 7:6\n+          _0 = (*_2)[_7];                  // scope 1 at $DIR/lower_slice_len.rs:6:9: 6:21\n+          StorageDead(_7);                 // scope 1 at $DIR/lower_slice_len.rs:7:5: 7:6\n           goto -> bb5;                     // scope 0 at $DIR/lower_slice_len.rs:5:5: 9:6\n       }\n   "}, {"sha": "72fd303d447d1ec5b6285dfe4f532777438a2c61", "filename": "src/test/mir-opt/match_arm_scopes.complicated_match.SimplifyCfg-initial.after-ElaborateDrops.after.diff", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Fmatch_arm_scopes.complicated_match.SimplifyCfg-initial.after-ElaborateDrops.after.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Fmatch_arm_scopes.complicated_match.SimplifyCfg-initial.after-ElaborateDrops.after.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_arm_scopes.complicated_match.SimplifyCfg-initial.after-ElaborateDrops.after.diff?ref=e39c92e7aa2cd77659d504b05ad59e38388866f7", "patch": "@@ -26,8 +26,12 @@\n           debug s => _8;                   // in scope 1 at $DIR/match-arm-scopes.rs:15:20: 15:21\n       }\n       scope 2 {\n-          debug b => _15;                  // in scope 2 at $DIR/match-arm-scopes.rs:16:16: 16:17\n-          debug t => _16;                  // in scope 2 at $DIR/match-arm-scopes.rs:16:19: 16:20\n+      }\n+      scope 3 {\n+      }\n+      scope 4 {\n+          debug b => _15;                  // in scope 4 at $DIR/match-arm-scopes.rs:16:16: 16:17\n+          debug t => _16;                  // in scope 4 at $DIR/match-arm-scopes.rs:16:19: 16:20\n       }\n   \n       bb0: {\n@@ -83,15 +87,15 @@\n -         _3 = &shallow (_2.0: bool);      // scope 0 at $DIR/match-arm-scopes.rs:14:11: 14:16\n -         _4 = &shallow (_2.1: bool);      // scope 0 at $DIR/match-arm-scopes.rs:14:11: 14:16\n           StorageLive(_9);                 // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n-          StorageLive(_10);                // scope 0 at $DIR/match-arm-scopes.rs:15:45: 15:49\n-          _10 = _1;                        // scope 0 at $DIR/match-arm-scopes.rs:15:45: 15:49\n--         switchInt(move _10) -> [false: bb10, otherwise: bb9]; // scope 0 at $DIR/match-arm-scopes.rs:15:45: 15:49\n-+         switchInt(move _10) -> [false: bb7, otherwise: bb6]; // scope 0 at $DIR/match-arm-scopes.rs:15:45: 15:49\n+          StorageLive(_10);                // scope 2 at $DIR/match-arm-scopes.rs:15:45: 15:49\n+          _10 = _1;                        // scope 2 at $DIR/match-arm-scopes.rs:15:45: 15:49\n+-         switchInt(move _10) -> [false: bb10, otherwise: bb9]; // scope 2 at $DIR/match-arm-scopes.rs:15:45: 15:49\n++         switchInt(move _10) -> [false: bb7, otherwise: bb6]; // scope 2 at $DIR/match-arm-scopes.rs:15:45: 15:49\n       }\n   \n -     bb9: {\n +     bb6: {\n-          _0 = const 3_i32;                // scope 0 at $DIR/match-arm-scopes.rs:15:59: 15:60\n+          _0 = const 3_i32;                // scope 2 at $DIR/match-arm-scopes.rs:15:59: 15:60\n           StorageDead(_10);                // scope 0 at $DIR/match-arm-scopes.rs:15:72: 15:73\n           StorageDead(_9);                 // scope 0 at $DIR/match-arm-scopes.rs:15:72: 15:73\n -         goto -> bb23;                    // scope 0 at no-location\n@@ -140,15 +144,15 @@\n -         _3 = &shallow (_2.0: bool);      // scope 0 at $DIR/match-arm-scopes.rs:14:11: 14:16\n -         _4 = &shallow (_2.1: bool);      // scope 0 at $DIR/match-arm-scopes.rs:14:11: 14:16\n           StorageLive(_12);                // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n-          StorageLive(_13);                // scope 0 at $DIR/match-arm-scopes.rs:15:45: 15:49\n-          _13 = _1;                        // scope 0 at $DIR/match-arm-scopes.rs:15:45: 15:49\n--         switchInt(move _13) -> [false: bb15, otherwise: bb14]; // scope 0 at $DIR/match-arm-scopes.rs:15:45: 15:49\n-+         switchInt(move _13) -> [false: bb12, otherwise: bb11]; // scope 0 at $DIR/match-arm-scopes.rs:15:45: 15:49\n+          StorageLive(_13);                // scope 3 at $DIR/match-arm-scopes.rs:15:45: 15:49\n+          _13 = _1;                        // scope 3 at $DIR/match-arm-scopes.rs:15:45: 15:49\n+-         switchInt(move _13) -> [false: bb15, otherwise: bb14]; // scope 3 at $DIR/match-arm-scopes.rs:15:45: 15:49\n++         switchInt(move _13) -> [false: bb12, otherwise: bb11]; // scope 3 at $DIR/match-arm-scopes.rs:15:45: 15:49\n       }\n   \n -     bb14: {\n +     bb11: {\n-          _0 = const 3_i32;                // scope 0 at $DIR/match-arm-scopes.rs:15:59: 15:60\n+          _0 = const 3_i32;                // scope 3 at $DIR/match-arm-scopes.rs:15:59: 15:60\n           StorageDead(_13);                // scope 0 at $DIR/match-arm-scopes.rs:15:72: 15:73\n           StorageDead(_12);                // scope 0 at $DIR/match-arm-scopes.rs:15:72: 15:73\n -         goto -> bb23;                    // scope 0 at no-location\n@@ -200,7 +204,7 @@\n   \n -     bb19: {\n +     bb16: {\n-          _0 = const 2_i32;                // scope 2 at $DIR/match-arm-scopes.rs:16:41: 16:42\n+          _0 = const 2_i32;                // scope 4 at $DIR/match-arm-scopes.rs:16:41: 16:42\n -         drop(_16) -> [return: bb21, unwind: bb25]; // scope 0 at $DIR/match-arm-scopes.rs:16:41: 16:42\n +         drop(_16) -> [return: bb18, unwind: bb22]; // scope 0 at $DIR/match-arm-scopes.rs:16:41: 16:42\n       }"}, {"sha": "7736342316b599035a711860d47d32a8f079e795", "filename": "src/test/mir-opt/matches_reduce_branches.foo.MatchBranchSimplification.64bit.diff", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.foo.MatchBranchSimplification.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.foo.MatchBranchSimplification.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.foo.MatchBranchSimplification.64bit.diff?ref=e39c92e7aa2cd77659d504b05ad59e38388866f7", "patch": "@@ -6,24 +6,26 @@\n       let mut _0: ();                      // return place in scope 0 at $DIR/matches_reduce_branches.rs:7:25: 7:25\n       let mut _2: isize;                   // in scope 0 at $DIR/matches_reduce_branches.rs:8:22: 8:26\n +     let mut _3: isize;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      scope 1 {\n+      }\n   \n       bb0: {\n-          _2 = discriminant(_1);           // scope 0 at $DIR/matches_reduce_branches.rs:8:17: 8:20\n--         switchInt(move _2) -> [0_isize: bb2, otherwise: bb1]; // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _2 = discriminant(_1);           // scope 1 at $DIR/matches_reduce_branches.rs:8:17: 8:20\n+-         switchInt(move _2) -> [0_isize: bb2, otherwise: bb1]; // scope 1 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n -     }\n - \n -     bb1: {\n--         goto -> bb3;                     // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+-         goto -> bb3;                     // scope 1 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n -     }\n - \n -     bb2: {\n--         goto -> bb3;                     // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+-         goto -> bb3;                     // scope 1 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n -     }\n - \n -     bb3: {\n-+         StorageLive(_3);                 // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-+         _3 = move _2;                    // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-+         StorageDead(_3);                 // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n++         StorageLive(_3);                 // scope 1 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n++         _3 = move _2;                    // scope 1 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n++         StorageDead(_3);                 // scope 1 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           return;                          // scope 0 at $DIR/matches_reduce_branches.rs:11:2: 11:2\n       }\n   }"}, {"sha": "4cac6a007f3b3b27bbdc067a79ee18f057f87cab", "filename": "src/test/mir-opt/matches_reduce_branches.foo.PreCodegen.before.64bit.mir", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.foo.PreCodegen.before.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.foo.PreCodegen.before.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.foo.PreCodegen.before.64bit.mir?ref=e39c92e7aa2cd77659d504b05ad59e38388866f7", "patch": "@@ -3,6 +3,8 @@\n fn foo(_1: Option<()>) -> () {\n     debug bar => _1;                     // in scope 0 at $DIR/matches_reduce_branches.rs:7:8: 7:11\n     let mut _0: ();                      // return place in scope 0 at $DIR/matches_reduce_branches.rs:7:25: 7:25\n+    scope 1 {\n+    }\n \n     bb0: {\n         return;                          // scope 0 at $DIR/matches_reduce_branches.rs:11:2: 11:2"}, {"sha": "95ce545bbd41262cf6941d8557d0473e55c907c2", "filename": "src/test/mir-opt/matches_reduce_branches.match_nested_if.MatchBranchSimplification.64bit.diff", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.match_nested_if.MatchBranchSimplification.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.match_nested_if.MatchBranchSimplification.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.match_nested_if.MatchBranchSimplification.64bit.diff?ref=e39c92e7aa2cd77659d504b05ad59e38388866f7", "patch": "@@ -9,31 +9,37 @@\n       scope 1 {\n           debug val => _1;                 // in scope 1 at $DIR/matches_reduce_branches.rs:40:9: 40:12\n       }\n+      scope 2 {\n+          scope 3 {\n+              scope 4 {\n+              }\n+          }\n+      }\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/matches_reduce_branches.rs:40:9: 40:12\n-          StorageLive(_2);                 // scope 0 at $DIR/matches_reduce_branches.rs:41:24: 41:28\n-          _2 = const true;                 // scope 0 at $DIR/matches_reduce_branches.rs:41:24: 41:28\n--         switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/matches_reduce_branches.rs:41:24: 41:28\n+          StorageLive(_2);                 // scope 4 at $DIR/matches_reduce_branches.rs:41:24: 41:28\n+          _2 = const true;                 // scope 4 at $DIR/matches_reduce_branches.rs:41:24: 41:28\n+-         switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 4 at $DIR/matches_reduce_branches.rs:41:24: 41:28\n -     }\n - \n -     bb1: {\n-+         StorageLive(_3);                 // scope 0 at $DIR/matches_reduce_branches.rs:41:24: 41:28\n-+         _3 = move _2;                    // scope 0 at $DIR/matches_reduce_branches.rs:41:24: 41:28\n-          StorageDead(_2);                 // scope 0 at $DIR/matches_reduce_branches.rs:41:51: 41:52\n++         StorageLive(_3);                 // scope 4 at $DIR/matches_reduce_branches.rs:41:24: 41:28\n++         _3 = move _2;                    // scope 4 at $DIR/matches_reduce_branches.rs:41:24: 41:28\n+          StorageDead(_2);                 // scope 3 at $DIR/matches_reduce_branches.rs:41:51: 41:52\n -         _1 = const true;                 // scope 0 at $DIR/matches_reduce_branches.rs:47:13: 47:17\n -         goto -> bb3;                     // scope 0 at $DIR/matches_reduce_branches.rs:47:13: 47:17\n -     }\n - \n -     bb2: {\n--         StorageDead(_2);                 // scope 0 at $DIR/matches_reduce_branches.rs:41:51: 41:52\n+-         StorageDead(_2);                 // scope 3 at $DIR/matches_reduce_branches.rs:41:51: 41:52\n -         _1 = const false;                // scope 0 at $DIR/matches_reduce_branches.rs:49:14: 49:19\n -         goto -> bb3;                     // scope 0 at $DIR/matches_reduce_branches.rs:49:14: 49:19\n -     }\n - \n -     bb3: {\n +         _1 = Ne(_3, const false);        // scope 0 at $DIR/matches_reduce_branches.rs:49:14: 49:19\n-+         StorageDead(_3);                 // scope 0 at $DIR/matches_reduce_branches.rs:41:24: 41:28\n++         StorageDead(_3);                 // scope 4 at $DIR/matches_reduce_branches.rs:41:24: 41:28\n           _0 = _1;                         // scope 1 at $DIR/matches_reduce_branches.rs:51:5: 51:8\n           StorageDead(_1);                 // scope 0 at $DIR/matches_reduce_branches.rs:52:1: 52:2\n           return;                          // scope 0 at $DIR/matches_reduce_branches.rs:52:2: 52:2"}, {"sha": "23a388aadde71b047302e6c4e36ada024dd1b9d2", "filename": "src/test/mir-opt/multiple_return_terminators.test.MultipleReturnTerminators.diff", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Fmultiple_return_terminators.test.MultipleReturnTerminators.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Fmultiple_return_terminators.test.MultipleReturnTerminators.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmultiple_return_terminators.test.MultipleReturnTerminators.diff?ref=e39c92e7aa2cd77659d504b05ad59e38388866f7", "patch": "@@ -4,6 +4,8 @@\n   fn test(_1: bool) -> () {\n       debug x => _1;                       // in scope 0 at $DIR/multiple_return_terminators.rs:4:9: 4:10\n       let mut _0: ();                      // return place in scope 0 at $DIR/multiple_return_terminators.rs:4:18: 4:18\n+      scope 1 {\n+      }\n   \n       bb0: {\n           return;                          // scope 0 at $DIR/multiple_return_terminators.rs:10:2: 10:2"}, {"sha": "4a0a7b24aa3d9fa18d2626618ca3742a0107eec7", "filename": "src/test/mir-opt/nll/region_subtyping_basic.main.nll.0.64bit.mir", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.64bit.mir?ref=e39c92e7aa2cd77659d504b05ad59e38388866f7", "patch": "@@ -39,6 +39,8 @@ fn main() -> () {\n             let _6: &'_#5r usize;        // in scope 2 at $DIR/region-subtyping-basic.rs:19:9: 19:10\n             scope 3 {\n                 debug q => _6;           // in scope 3 at $DIR/region-subtyping-basic.rs:19:9: 19:10\n+                scope 4 {\n+                }\n             }\n         }\n     }\n@@ -61,25 +63,25 @@ fn main() -> () {\n         StorageLive(_6);                 // bb1[2]: scope 2 at $DIR/region-subtyping-basic.rs:19:9: 19:10\n         _6 = _2;                         // bb1[3]: scope 2 at $DIR/region-subtyping-basic.rs:19:13: 19:14\n         FakeRead(ForLet(None), _6);      // bb1[4]: scope 2 at $DIR/region-subtyping-basic.rs:19:9: 19:10\n-        StorageLive(_7);                 // bb1[5]: scope 3 at $DIR/region-subtyping-basic.rs:20:8: 20:12\n-        _7 = const ConstValue(Scalar(0x01): bool); // bb1[6]: scope 3 at $DIR/region-subtyping-basic.rs:20:8: 20:12\n-        switchInt(move _7) -> [Const(Value(Scalar(0x00)): bool): bb4, otherwise: bb2]; // bb1[7]: scope 3 at $DIR/region-subtyping-basic.rs:20:8: 20:12\n+        StorageLive(_7);                 // bb1[5]: scope 4 at $DIR/region-subtyping-basic.rs:20:8: 20:12\n+        _7 = const ConstValue(Scalar(0x01): bool); // bb1[6]: scope 4 at $DIR/region-subtyping-basic.rs:20:8: 20:12\n+        switchInt(move _7) -> [Const(Value(Scalar(0x00)): bool): bb4, otherwise: bb2]; // bb1[7]: scope 4 at $DIR/region-subtyping-basic.rs:20:8: 20:12\n     }\n \n     bb2: {\n-        StorageLive(_8);                 // bb2[0]: scope 3 at $DIR/region-subtyping-basic.rs:21:9: 21:18\n-        StorageLive(_9);                 // bb2[1]: scope 3 at $DIR/region-subtyping-basic.rs:21:15: 21:17\n-        _9 = (*_6);                      // bb2[2]: scope 3 at $DIR/region-subtyping-basic.rs:21:15: 21:17\n-        _8 = ConstValue(Scalar(<ZST>): fn(usize) -> bool {use_x})(move _9) -> [return: bb3, unwind: bb7]; // bb2[3]: scope 3 at $DIR/region-subtyping-basic.rs:21:9: 21:18\n+        StorageLive(_8);                 // bb2[0]: scope 4 at $DIR/region-subtyping-basic.rs:21:9: 21:18\n+        StorageLive(_9);                 // bb2[1]: scope 4 at $DIR/region-subtyping-basic.rs:21:15: 21:17\n+        _9 = (*_6);                      // bb2[2]: scope 4 at $DIR/region-subtyping-basic.rs:21:15: 21:17\n+        _8 = ConstValue(Scalar(<ZST>): fn(usize) -> bool {use_x})(move _9) -> [return: bb3, unwind: bb7]; // bb2[3]: scope 4 at $DIR/region-subtyping-basic.rs:21:9: 21:18\n                                          // mir::Constant\n                                          // + span: $DIR/region-subtyping-basic.rs:21:9: 21:14\n                                          // + literal: Const { ty: fn(usize) -> bool {use_x}, val: Value(Scalar(<ZST>)) }\n     }\n \n     bb3: {\n-        StorageDead(_9);                 // bb3[0]: scope 3 at $DIR/region-subtyping-basic.rs:21:17: 21:18\n-        StorageDead(_8);                 // bb3[1]: scope 3 at $DIR/region-subtyping-basic.rs:21:18: 21:19\n-        _0 = const ConstValue(Scalar(<ZST>): ()); // bb3[2]: scope 3 at $DIR/region-subtyping-basic.rs:20:13: 22:6\n+        StorageDead(_9);                 // bb3[0]: scope 4 at $DIR/region-subtyping-basic.rs:21:17: 21:18\n+        StorageDead(_8);                 // bb3[1]: scope 4 at $DIR/region-subtyping-basic.rs:21:18: 21:19\n+        _0 = const ConstValue(Scalar(<ZST>): ()); // bb3[2]: scope 4 at $DIR/region-subtyping-basic.rs:20:13: 22:6\n         goto -> bb6;                     // bb3[3]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6\n     }\n "}, {"sha": "349dbbb2679d226d809e2ca4b7b3942557e3f9dc", "filename": "src/test/mir-opt/not_equal_false.opt.InstCombine.diff", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Fnot_equal_false.opt.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Fnot_equal_false.opt.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnot_equal_false.opt.InstCombine.diff?ref=e39c92e7aa2cd77659d504b05ad59e38388866f7", "patch": "@@ -6,19 +6,21 @@\n       let mut _0: u32;                     // return place in scope 0 at $DIR/not_equal_false.rs:3:20: 3:23\n       let mut _2: bool;                    // in scope 0 at $DIR/not_equal_false.rs:4:8: 4:18\n       let mut _3: bool;                    // in scope 0 at $DIR/not_equal_false.rs:4:8: 4:9\n+      scope 1 {\n+      }\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/not_equal_false.rs:4:8: 4:18\n-          StorageLive(_3);                 // scope 0 at $DIR/not_equal_false.rs:4:8: 4:9\n-          _3 = _1;                         // scope 0 at $DIR/not_equal_false.rs:4:8: 4:9\n--         _2 = Ne(move _3, const false);   // scope 0 at $DIR/not_equal_false.rs:4:8: 4:18\n-+         _2 = move _3;                    // scope 0 at $DIR/not_equal_false.rs:4:8: 4:18\n-          StorageDead(_3);                 // scope 0 at $DIR/not_equal_false.rs:4:17: 4:18\n-          switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/not_equal_false.rs:4:8: 4:18\n+          StorageLive(_2);                 // scope 1 at $DIR/not_equal_false.rs:4:8: 4:18\n+          StorageLive(_3);                 // scope 1 at $DIR/not_equal_false.rs:4:8: 4:9\n+          _3 = _1;                         // scope 1 at $DIR/not_equal_false.rs:4:8: 4:9\n+-         _2 = Ne(move _3, const false);   // scope 1 at $DIR/not_equal_false.rs:4:8: 4:18\n++         _2 = move _3;                    // scope 1 at $DIR/not_equal_false.rs:4:8: 4:18\n+          StorageDead(_3);                 // scope 1 at $DIR/not_equal_false.rs:4:17: 4:18\n+          switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 1 at $DIR/not_equal_false.rs:4:8: 4:18\n       }\n   \n       bb1: {\n-          _0 = const 0_u32;                // scope 0 at $DIR/not_equal_false.rs:4:21: 4:22\n+          _0 = const 0_u32;                // scope 1 at $DIR/not_equal_false.rs:4:21: 4:22\n           goto -> bb3;                     // scope 0 at $DIR/not_equal_false.rs:4:5: 4:35\n       }\n   "}, {"sha": "c1fe50afff2e508e26c2c703f9268f8b58b05aab", "filename": "src/test/mir-opt/retag.array_casts.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 36, "deletions": 34, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Fretag.array_casts.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Fretag.array_casts.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretag.array_casts.SimplifyCfg-elaborate-drops.after.mir?ref=e39c92e7aa2cd77659d504b05ad59e38388866f7", "patch": "@@ -51,9 +51,11 @@ fn array_casts() -> () {\n                     scope 7 {\n                         debug left_val => _20; // in scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                         debug right_val => _21; // in scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                        let _27: core::panicking::AssertKind; // in scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                         scope 8 {\n-                            debug kind => _27; // in scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                            let _27: core::panicking::AssertKind; // in scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                            scope 9 {\n+                                debug kind => _27; // in scope 9 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                            }\n                         }\n                     }\n                 }\n@@ -137,41 +139,41 @@ fn array_casts() -> () {\n         StorageLive(_21);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n         _21 = (_13.1: &usize);           // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n         Retag(_21);                      // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-        StorageLive(_22);                // scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-        StorageLive(_23);                // scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-        StorageLive(_24);                // scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-        _24 = (*_20);                    // scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-        StorageLive(_25);                // scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-        _25 = (*_21);                    // scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-        _23 = Eq(move _24, move _25);    // scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-        StorageDead(_25);                // scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-        StorageDead(_24);                // scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-        _22 = Not(move _23);             // scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-        StorageDead(_23);                // scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-        switchInt(move _22) -> [false: bb4, otherwise: bb3]; // scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageLive(_22);                // scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageLive(_23);                // scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageLive(_24);                // scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        _24 = (*_20);                    // scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageLive(_25);                // scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        _25 = (*_21);                    // scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        _23 = Eq(move _24, move _25);    // scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageDead(_25);                // scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageDead(_24);                // scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        _22 = Not(move _23);             // scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageDead(_23);                // scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        switchInt(move _22) -> [false: bb4, otherwise: bb3]; // scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n     }\n \n     bb3: {\n-        StorageLive(_27);                // scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-        _27 = core::panicking::AssertKind::Eq; // scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-        StorageLive(_28);                // scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-        StorageLive(_29);                // scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-        _29 = move _27;                  // scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-        StorageLive(_30);                // scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-        StorageLive(_31);                // scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-        _31 = &(*_20);                   // scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-        Retag(_31);                      // scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-        _30 = &(*_31);                   // scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-        Retag(_30);                      // scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-        StorageLive(_32);                // scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-        StorageLive(_33);                // scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-        _33 = &(*_21);                   // scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-        Retag(_33);                      // scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-        _32 = &(*_33);                   // scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-        Retag(_32);                      // scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-        StorageLive(_34);                // scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-        _34 = Option::<Arguments>::None; // scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-        _28 = core::panicking::assert_failed::<usize, usize>(move _29, move _30, move _32, move _34); // scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageLive(_27);                // scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        _27 = core::panicking::AssertKind::Eq; // scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageLive(_28);                // scope 9 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageLive(_29);                // scope 9 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        _29 = move _27;                  // scope 9 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageLive(_30);                // scope 9 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageLive(_31);                // scope 9 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        _31 = &(*_20);                   // scope 9 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        Retag(_31);                      // scope 9 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        _30 = &(*_31);                   // scope 9 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        Retag(_30);                      // scope 9 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageLive(_32);                // scope 9 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageLive(_33);                // scope 9 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        _33 = &(*_21);                   // scope 9 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        Retag(_33);                      // scope 9 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        _32 = &(*_33);                   // scope 9 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        Retag(_32);                      // scope 9 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageLive(_34);                // scope 9 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        _34 = Option::<Arguments>::None; // scope 9 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        _28 = core::panicking::assert_failed::<usize, usize>(move _29, move _30, move _32, move _34); // scope 9 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                          // mir::Constant\n                                          // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                          // + literal: Const { ty: for<'r, 's, 't0> fn(core::panicking::AssertKind, &'r usize, &'s usize, Option<Arguments<'t0>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(Scalar(<ZST>)) }"}, {"sha": "06c4b997c7c33f2d050e8d1d7591cd9321f6753a", "filename": "src/test/mir-opt/simplify_cfg.main.SimplifyCfg-early-opt.diff", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Fsimplify_cfg.main.SimplifyCfg-early-opt.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Fsimplify_cfg.main.SimplifyCfg-early-opt.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_cfg.main.SimplifyCfg-early-opt.diff?ref=e39c92e7aa2cd77659d504b05ad59e38388866f7", "patch": "@@ -6,6 +6,8 @@\n       let mut _1: ();                      // in scope 0 at $DIR/simplify_cfg.rs:7:1: 13:2\n       let mut _2: bool;                    // in scope 0 at $DIR/simplify_cfg.rs:9:12: 9:17\n       let mut _3: !;                       // in scope 0 at $DIR/simplify_cfg.rs:9:18: 11:10\n+      scope 1 {\n+      }\n   \n       bb0: {\n           goto -> bb1;                     // scope 0 at $DIR/simplify_cfg.rs:8:5: 12:6\n@@ -16,23 +18,23 @@\n -     }\n - \n -     bb2: {\n-          StorageLive(_2);                 // scope 0 at $DIR/simplify_cfg.rs:9:12: 9:17\n--         _2 = bar() -> [return: bb3, unwind: bb6]; // scope 0 at $DIR/simplify_cfg.rs:9:12: 9:17\n-+         _2 = bar() -> [return: bb2, unwind: bb5]; // scope 0 at $DIR/simplify_cfg.rs:9:12: 9:17\n+          StorageLive(_2);                 // scope 1 at $DIR/simplify_cfg.rs:9:12: 9:17\n+-         _2 = bar() -> [return: bb3, unwind: bb6]; // scope 1 at $DIR/simplify_cfg.rs:9:12: 9:17\n++         _2 = bar() -> [return: bb2, unwind: bb5]; // scope 1 at $DIR/simplify_cfg.rs:9:12: 9:17\n                                            // mir::Constant\n                                            // + span: $DIR/simplify_cfg.rs:9:12: 9:15\n                                            // + literal: Const { ty: fn() -> bool {bar}, val: Value(Scalar(<ZST>)) }\n       }\n   \n -     bb3: {\n--         switchInt(move _2) -> [false: bb5, otherwise: bb4]; // scope 0 at $DIR/simplify_cfg.rs:9:12: 9:17\n+-         switchInt(move _2) -> [false: bb5, otherwise: bb4]; // scope 1 at $DIR/simplify_cfg.rs:9:12: 9:17\n +     bb2: {\n-+         switchInt(move _2) -> [false: bb4, otherwise: bb3]; // scope 0 at $DIR/simplify_cfg.rs:9:12: 9:17\n++         switchInt(move _2) -> [false: bb4, otherwise: bb3]; // scope 1 at $DIR/simplify_cfg.rs:9:12: 9:17\n       }\n   \n -     bb4: {\n +     bb3: {\n-          _0 = const ();                   // scope 0 at $DIR/simplify_cfg.rs:10:13: 10:18\n+          _0 = const ();                   // scope 1 at $DIR/simplify_cfg.rs:10:13: 10:18\n           StorageDead(_2);                 // scope 0 at $DIR/simplify_cfg.rs:11:9: 11:10\n           return;                          // scope 0 at $DIR/simplify_cfg.rs:13:2: 13:2\n       }"}, {"sha": "ed2bda1a47491d656d93730a42925dd2ace73d6d", "filename": "src/test/mir-opt/simplify_cfg.main.SimplifyCfg-initial.diff", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Fsimplify_cfg.main.SimplifyCfg-initial.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Fsimplify_cfg.main.SimplifyCfg-initial.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_cfg.main.SimplifyCfg-initial.diff?ref=e39c92e7aa2cd77659d504b05ad59e38388866f7", "patch": "@@ -6,6 +6,8 @@\n       let mut _1: ();                      // in scope 0 at $DIR/simplify_cfg.rs:7:1: 13:2\n       let mut _2: bool;                    // in scope 0 at $DIR/simplify_cfg.rs:9:12: 9:17\n       let mut _3: !;                       // in scope 0 at $DIR/simplify_cfg.rs:9:18: 11:10\n+      scope 1 {\n+      }\n   \n       bb0: {\n           goto -> bb1;                     // scope 0 at $DIR/simplify_cfg.rs:8:5: 12:6\n@@ -17,31 +19,31 @@\n       }\n   \n       bb2: {\n-          StorageLive(_2);                 // scope 0 at $DIR/simplify_cfg.rs:9:12: 9:17\n--         _2 = bar() -> [return: bb3, unwind: bb11]; // scope 0 at $DIR/simplify_cfg.rs:9:12: 9:17\n-+         _2 = bar() -> [return: bb3, unwind: bb6]; // scope 0 at $DIR/simplify_cfg.rs:9:12: 9:17\n+          StorageLive(_2);                 // scope 1 at $DIR/simplify_cfg.rs:9:12: 9:17\n+-         _2 = bar() -> [return: bb3, unwind: bb11]; // scope 1 at $DIR/simplify_cfg.rs:9:12: 9:17\n++         _2 = bar() -> [return: bb3, unwind: bb6]; // scope 1 at $DIR/simplify_cfg.rs:9:12: 9:17\n                                            // mir::Constant\n                                            // + span: $DIR/simplify_cfg.rs:9:12: 9:15\n                                            // + literal: Const { ty: fn() -> bool {bar}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb3: {\n-          switchInt(move _2) -> [false: bb5, otherwise: bb4]; // scope 0 at $DIR/simplify_cfg.rs:9:12: 9:17\n+          switchInt(move _2) -> [false: bb5, otherwise: bb4]; // scope 1 at $DIR/simplify_cfg.rs:9:12: 9:17\n       }\n   \n       bb4: {\n-          _0 = const ();                   // scope 0 at $DIR/simplify_cfg.rs:10:13: 10:18\n--         goto -> bb10;                    // scope 0 at $DIR/simplify_cfg.rs:10:13: 10:18\n+          _0 = const ();                   // scope 1 at $DIR/simplify_cfg.rs:10:13: 10:18\n+-         goto -> bb10;                    // scope 1 at $DIR/simplify_cfg.rs:10:13: 10:18\n +         StorageDead(_2);                 // scope 0 at $DIR/simplify_cfg.rs:11:9: 11:10\n +         return;                          // scope 0 at $DIR/simplify_cfg.rs:13:2: 13:2\n       }\n   \n       bb5: {\n--         goto -> bb8;                     // scope 0 at $DIR/simplify_cfg.rs:9:12: 9:17\n+-         goto -> bb8;                     // scope 1 at $DIR/simplify_cfg.rs:9:12: 9:17\n -     }\n - \n -     bb6: {\n--         unreachable;                     // scope 0 at $DIR/simplify_cfg.rs:9:18: 11:10\n+-         unreachable;                     // scope 1 at $DIR/simplify_cfg.rs:9:18: 11:10\n -     }\n - \n -     bb7: {"}, {"sha": "2f9e45279d86e18be58cb21d52c927c07f2ed521", "filename": "src/test/mir-opt/simplify_if.main.SimplifyConstCondition-after-const-prop.diff", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Fsimplify_if.main.SimplifyConstCondition-after-const-prop.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Fsimplify_if.main.SimplifyConstCondition-after-const-prop.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_if.main.SimplifyConstCondition-after-const-prop.diff?ref=e39c92e7aa2cd77659d504b05ad59e38388866f7", "patch": "@@ -5,25 +5,27 @@\n       let mut _0: ();                      // return place in scope 0 at $DIR/simplify_if.rs:5:11: 5:11\n       let mut _1: bool;                    // in scope 0 at $DIR/simplify_if.rs:6:8: 6:13\n       let _2: ();                          // in scope 0 at $DIR/simplify_if.rs:7:9: 7:15\n+      scope 1 {\n+      }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/simplify_if.rs:6:8: 6:13\n-          _1 = const false;                // scope 0 at $DIR/simplify_if.rs:6:8: 6:13\n--         switchInt(const false) -> [false: bb3, otherwise: bb1]; // scope 0 at $DIR/simplify_if.rs:6:8: 6:13\n-+         goto -> bb3;                     // scope 0 at $DIR/simplify_if.rs:6:8: 6:13\n+          StorageLive(_1);                 // scope 1 at $DIR/simplify_if.rs:6:8: 6:13\n+          _1 = const false;                // scope 1 at $DIR/simplify_if.rs:6:8: 6:13\n+-         switchInt(const false) -> [false: bb3, otherwise: bb1]; // scope 1 at $DIR/simplify_if.rs:6:8: 6:13\n++         goto -> bb3;                     // scope 1 at $DIR/simplify_if.rs:6:8: 6:13\n       }\n   \n       bb1: {\n-          StorageLive(_2);                 // scope 0 at $DIR/simplify_if.rs:7:9: 7:15\n-          _2 = noop() -> bb2;              // scope 0 at $DIR/simplify_if.rs:7:9: 7:15\n+          StorageLive(_2);                 // scope 1 at $DIR/simplify_if.rs:7:9: 7:15\n+          _2 = noop() -> bb2;              // scope 1 at $DIR/simplify_if.rs:7:9: 7:15\n                                            // mir::Constant\n                                            // + span: $DIR/simplify_if.rs:7:9: 7:13\n                                            // + literal: Const { ty: fn() {noop}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb2: {\n-          StorageDead(_2);                 // scope 0 at $DIR/simplify_if.rs:7:15: 7:16\n-          nop;                             // scope 0 at $DIR/simplify_if.rs:6:14: 8:6\n+          StorageDead(_2);                 // scope 1 at $DIR/simplify_if.rs:7:15: 7:16\n+          nop;                             // scope 1 at $DIR/simplify_if.rs:6:14: 8:6\n           goto -> bb4;                     // scope 0 at $DIR/simplify_if.rs:6:5: 8:6\n       }\n   "}, {"sha": "d220d929020987ad688f592d8abccb63db22725c", "filename": "src/test/mir-opt/simplify_locals_fixedpoint.foo.SimplifyLocals.diff", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Fsimplify_locals_fixedpoint.foo.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Fsimplify_locals_fixedpoint.foo.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals_fixedpoint.foo.SimplifyLocals.diff?ref=e39c92e7aa2cd77659d504b05ad59e38388866f7", "patch": "@@ -13,6 +13,8 @@\n       scope 1 {\n           debug a => _6;                   // in scope 1 at $DIR/simplify-locals-fixedpoint.rs:4:18: 4:19\n           let _6: u8;                      // in scope 1 at $DIR/simplify-locals-fixedpoint.rs:4:18: 4:19\n+          scope 2 {\n+          }\n       }\n   \n       bb0: {\n@@ -40,12 +42,12 @@\n       bb2: {\n           StorageLive(_6);                 // scope 1 at $DIR/simplify-locals-fixedpoint.rs:4:18: 4:19\n           _6 = (((_1.0: std::option::Option<u8>) as Some).0: u8); // scope 1 at $DIR/simplify-locals-fixedpoint.rs:4:18: 4:19\n--         StorageLive(_7);                 // scope 0 at $DIR/simplify-locals-fixedpoint.rs:5:12: 5:20\n--         StorageLive(_8);                 // scope 0 at $DIR/simplify-locals-fixedpoint.rs:5:12: 5:13\n--         _8 = _6;                         // scope 0 at $DIR/simplify-locals-fixedpoint.rs:5:12: 5:13\n--         _7 = Gt(move _8, const 42_u8);   // scope 0 at $DIR/simplify-locals-fixedpoint.rs:5:12: 5:20\n--         StorageDead(_8);                 // scope 0 at $DIR/simplify-locals-fixedpoint.rs:5:19: 5:20\n--         StorageDead(_7);                 // scope 0 at $DIR/simplify-locals-fixedpoint.rs:7:9: 7:10\n+-         StorageLive(_7);                 // scope 2 at $DIR/simplify-locals-fixedpoint.rs:5:12: 5:20\n+-         StorageLive(_8);                 // scope 2 at $DIR/simplify-locals-fixedpoint.rs:5:12: 5:13\n+-         _8 = _6;                         // scope 2 at $DIR/simplify-locals-fixedpoint.rs:5:12: 5:13\n+-         _7 = Gt(move _8, const 42_u8);   // scope 2 at $DIR/simplify-locals-fixedpoint.rs:5:12: 5:20\n+-         StorageDead(_8);                 // scope 2 at $DIR/simplify-locals-fixedpoint.rs:5:19: 5:20\n+-         StorageDead(_7);                 // scope 1 at $DIR/simplify-locals-fixedpoint.rs:7:9: 7:10\n           StorageDead(_6);                 // scope 0 at $DIR/simplify-locals-fixedpoint.rs:8:5: 8:6\n           goto -> bb3;                     // scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:5: 8:6\n       }"}, {"sha": "e87c59a4c77081a00b1816f8b7ccc9df71431f0b", "filename": "src/test/mir-opt/unreachable.main.UnreachablePropagation.diff", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Funreachable.main.UnreachablePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Funreachable.main.UnreachablePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funreachable.main.UnreachablePropagation.diff?ref=e39c92e7aa2cd77659d504b05ad59e38388866f7", "patch": "@@ -5,16 +5,18 @@\n       let mut _0: ();                      // return place in scope 0 at $DIR/unreachable.rs:8:11: 8:11\n       let mut _1: std::option::Option<Empty>; // in scope 0 at $DIR/unreachable.rs:9:23: 9:30\n       let mut _2: isize;                   // in scope 0 at $DIR/unreachable.rs:9:12: 9:20\n-      let mut _4: i32;                     // in scope 0 at $DIR/unreachable.rs:10:13: 10:19\n       let _5: ();                          // in scope 0 at $DIR/unreachable.rs:12:9: 16:10\n       let mut _6: bool;                    // in scope 0 at $DIR/unreachable.rs:12:12: 12:16\n       let mut _7: !;                       // in scope 0 at $DIR/unreachable.rs:18:9: 18:21\n       scope 1 {\n           debug _x => _3;                  // in scope 1 at $DIR/unreachable.rs:9:17: 9:19\n           let _3: Empty;                   // in scope 1 at $DIR/unreachable.rs:9:17: 9:19\n-      }\n-      scope 2 {\n-          debug _y => _4;                  // in scope 2 at $DIR/unreachable.rs:10:13: 10:19\n+          let mut _4: i32;                 // in scope 1 at $DIR/unreachable.rs:10:13: 10:19\n+          scope 2 {\n+              debug _y => _4;              // in scope 2 at $DIR/unreachable.rs:10:13: 10:19\n+              scope 3 {\n+              }\n+          }\n       }\n   \n       bb0: {\n@@ -34,16 +36,16 @@\n       bb2: {\n -         StorageLive(_3);                 // scope 1 at $DIR/unreachable.rs:9:17: 9:19\n -         _3 = move ((_1 as Some).0: Empty); // scope 1 at $DIR/unreachable.rs:9:17: 9:19\n--         StorageLive(_4);                 // scope 0 at $DIR/unreachable.rs:10:13: 10:19\n+-         StorageLive(_4);                 // scope 1 at $DIR/unreachable.rs:10:13: 10:19\n -         StorageLive(_5);                 // scope 2 at $DIR/unreachable.rs:12:9: 16:10\n--         StorageLive(_6);                 // scope 2 at $DIR/unreachable.rs:12:12: 12:16\n--         _6 = const true;                 // scope 2 at $DIR/unreachable.rs:12:12: 12:16\n--         switchInt(move _6) -> [false: bb4, otherwise: bb3]; // scope 2 at $DIR/unreachable.rs:12:12: 12:16\n+-         StorageLive(_6);                 // scope 3 at $DIR/unreachable.rs:12:12: 12:16\n+-         _6 = const true;                 // scope 3 at $DIR/unreachable.rs:12:12: 12:16\n+-         switchInt(move _6) -> [false: bb4, otherwise: bb3]; // scope 3 at $DIR/unreachable.rs:12:12: 12:16\n -     }\n - \n -     bb3: {\n--         _4 = const 21_i32;               // scope 2 at $DIR/unreachable.rs:13:13: 13:20\n--         _5 = const ();                   // scope 2 at $DIR/unreachable.rs:12:17: 14:10\n+-         _4 = const 21_i32;               // scope 3 at $DIR/unreachable.rs:13:13: 13:20\n+-         _5 = const ();                   // scope 3 at $DIR/unreachable.rs:12:17: 14:10\n -         goto -> bb5;                     // scope 2 at $DIR/unreachable.rs:12:9: 16:10\n -     }\n - "}, {"sha": "b63a2f2b0ac4dc7c18003a838dd7902ef48ae1f6", "filename": "src/test/mir-opt/unreachable_diverging.main.UnreachablePropagation.diff", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Funreachable_diverging.main.UnreachablePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Funreachable_diverging.main.UnreachablePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funreachable_diverging.main.UnreachablePropagation.diff?ref=e39c92e7aa2cd77659d504b05ad59e38388866f7", "patch": "@@ -14,6 +14,8 @@\n           scope 2 {\n               debug bomb => _4;            // in scope 2 at $DIR/unreachable_diverging.rs:14:17: 14:21\n               let _4: Empty;               // in scope 2 at $DIR/unreachable_diverging.rs:14:17: 14:21\n+              scope 3 {\n+              }\n           }\n       }\n   \n@@ -36,31 +38,31 @@\n       bb2: {\n           StorageLive(_4);                 // scope 2 at $DIR/unreachable_diverging.rs:14:17: 14:21\n           _4 = move ((_2 as Some).0: Empty); // scope 2 at $DIR/unreachable_diverging.rs:14:17: 14:21\n-          StorageLive(_5);                 // scope 1 at $DIR/unreachable_diverging.rs:15:9: 17:10\n-          StorageLive(_6);                 // scope 1 at $DIR/unreachable_diverging.rs:15:12: 15:13\n-          _6 = _1;                         // scope 1 at $DIR/unreachable_diverging.rs:15:12: 15:13\n--         switchInt(move _6) -> [false: bb4, otherwise: bb3]; // scope 1 at $DIR/unreachable_diverging.rs:15:12: 15:13\n-+         goto -> bb3;                     // scope 1 at $DIR/unreachable_diverging.rs:15:12: 15:13\n+          StorageLive(_5);                 // scope 2 at $DIR/unreachable_diverging.rs:15:9: 17:10\n+          StorageLive(_6);                 // scope 3 at $DIR/unreachable_diverging.rs:15:12: 15:13\n+          _6 = _1;                         // scope 3 at $DIR/unreachable_diverging.rs:15:12: 15:13\n+-         switchInt(move _6) -> [false: bb4, otherwise: bb3]; // scope 3 at $DIR/unreachable_diverging.rs:15:12: 15:13\n++         goto -> bb3;                     // scope 3 at $DIR/unreachable_diverging.rs:15:12: 15:13\n       }\n   \n       bb3: {\n--         _5 = loop_forever() -> bb5;      // scope 1 at $DIR/unreachable_diverging.rs:16:13: 16:27\n-+         _5 = loop_forever() -> bb4;      // scope 1 at $DIR/unreachable_diverging.rs:16:13: 16:27\n+-         _5 = loop_forever() -> bb5;      // scope 3 at $DIR/unreachable_diverging.rs:16:13: 16:27\n++         _5 = loop_forever() -> bb4;      // scope 3 at $DIR/unreachable_diverging.rs:16:13: 16:27\n                                            // mir::Constant\n                                            // + span: $DIR/unreachable_diverging.rs:16:13: 16:25\n                                            // + literal: Const { ty: fn() {loop_forever}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb4: {\n--         _5 = const ();                   // scope 1 at $DIR/unreachable_diverging.rs:17:10: 17:10\n--         goto -> bb5;                     // scope 1 at $DIR/unreachable_diverging.rs:15:9: 17:10\n+-         _5 = const ();                   // scope 2 at $DIR/unreachable_diverging.rs:17:10: 17:10\n+-         goto -> bb5;                     // scope 2 at $DIR/unreachable_diverging.rs:15:9: 17:10\n -     }\n - \n -     bb5: {\n-          StorageDead(_6);                 // scope 1 at $DIR/unreachable_diverging.rs:17:9: 17:10\n-          StorageDead(_5);                 // scope 1 at $DIR/unreachable_diverging.rs:17:9: 17:10\n-          StorageLive(_7);                 // scope 1 at $DIR/unreachable_diverging.rs:18:9: 18:22\n-          unreachable;                     // scope 1 at $DIR/unreachable_diverging.rs:18:15: 18:19\n+          StorageDead(_6);                 // scope 2 at $DIR/unreachable_diverging.rs:17:9: 17:10\n+          StorageDead(_5);                 // scope 2 at $DIR/unreachable_diverging.rs:17:9: 17:10\n+          StorageLive(_7);                 // scope 2 at $DIR/unreachable_diverging.rs:18:9: 18:22\n+          unreachable;                     // scope 2 at $DIR/unreachable_diverging.rs:18:15: 18:19\n       }\n   \n -     bb6: {"}, {"sha": "f8b41d7b4c5dfdecf3c6f17fa4e9635a78fe5b97", "filename": "src/test/mir-opt/while_let_loops.change_loop_body.ConstProp.64bit.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.ConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.ConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.ConstProp.64bit.diff?ref=e39c92e7aa2cd77659d504b05ad59e38388866f7", "patch": "@@ -34,9 +34,9 @@\n       }\n   \n       bb2: {\n-          _1 = const 1_i32;                // scope 1 at $DIR/while_let_loops.rs:8:9: 8:15\n-          nop;                             // scope 1 at $DIR/while_let_loops.rs:9:9: 9:14\n-          goto -> bb4;                     // scope 1 at $DIR/while_let_loops.rs:9:9: 9:14\n+          _1 = const 1_i32;                // scope 2 at $DIR/while_let_loops.rs:8:9: 8:15\n+          nop;                             // scope 2 at $DIR/while_let_loops.rs:9:9: 9:14\n+          goto -> bb4;                     // scope 2 at $DIR/while_let_loops.rs:9:9: 9:14\n       }\n   \n       bb3: {"}, {"sha": "df5a3cb31514dd3648c8988dc6414c70ba273da5", "filename": "src/test/mir-opt/while_storage.while_loop.PreCodegen.after.mir", "status": "modified", "additions": 19, "deletions": 15, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Fwhile_storage.while_loop.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/e39c92e7aa2cd77659d504b05ad59e38388866f7/src%2Ftest%2Fmir-opt%2Fwhile_storage.while_loop.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fwhile_storage.while_loop.PreCodegen.after.mir?ref=e39c92e7aa2cd77659d504b05ad59e38388866f7", "patch": "@@ -7,48 +7,52 @@ fn while_loop(_1: bool) -> () {\n     let mut _3: bool;                    // in scope 0 at $DIR/while-storage.rs:10:20: 10:21\n     let mut _4: bool;                    // in scope 0 at $DIR/while-storage.rs:11:12: 11:23\n     let mut _5: bool;                    // in scope 0 at $DIR/while-storage.rs:11:21: 11:22\n+    scope 1 {\n+        scope 2 {\n+        }\n+    }\n \n     bb0: {\n         goto -> bb1;                     // scope 0 at $DIR/while-storage.rs:10:5: 14:6\n     }\n \n     bb1: {\n-        StorageLive(_2);                 // scope 0 at $DIR/while-storage.rs:10:11: 10:22\n-        StorageLive(_3);                 // scope 0 at $DIR/while-storage.rs:10:20: 10:21\n-        _3 = _1;                         // scope 0 at $DIR/while-storage.rs:10:20: 10:21\n-        _2 = get_bool(move _3) -> bb2;   // scope 0 at $DIR/while-storage.rs:10:11: 10:22\n+        StorageLive(_2);                 // scope 1 at $DIR/while-storage.rs:10:11: 10:22\n+        StorageLive(_3);                 // scope 1 at $DIR/while-storage.rs:10:20: 10:21\n+        _3 = _1;                         // scope 1 at $DIR/while-storage.rs:10:20: 10:21\n+        _2 = get_bool(move _3) -> bb2;   // scope 1 at $DIR/while-storage.rs:10:11: 10:22\n                                          // mir::Constant\n                                          // + span: $DIR/while-storage.rs:10:11: 10:19\n                                          // + literal: Const { ty: fn(bool) -> bool {get_bool}, val: Value(Scalar(<ZST>)) }\n     }\n \n     bb2: {\n-        StorageDead(_3);                 // scope 0 at $DIR/while-storage.rs:10:21: 10:22\n-        switchInt(move _2) -> [false: bb7, otherwise: bb3]; // scope 0 at $DIR/while-storage.rs:10:11: 10:22\n+        StorageDead(_3);                 // scope 1 at $DIR/while-storage.rs:10:21: 10:22\n+        switchInt(move _2) -> [false: bb7, otherwise: bb3]; // scope 1 at $DIR/while-storage.rs:10:11: 10:22\n     }\n \n     bb3: {\n-        StorageLive(_4);                 // scope 0 at $DIR/while-storage.rs:11:12: 11:23\n-        StorageLive(_5);                 // scope 0 at $DIR/while-storage.rs:11:21: 11:22\n-        _5 = _1;                         // scope 0 at $DIR/while-storage.rs:11:21: 11:22\n-        _4 = get_bool(move _5) -> bb4;   // scope 0 at $DIR/while-storage.rs:11:12: 11:23\n+        StorageLive(_4);                 // scope 2 at $DIR/while-storage.rs:11:12: 11:23\n+        StorageLive(_5);                 // scope 2 at $DIR/while-storage.rs:11:21: 11:22\n+        _5 = _1;                         // scope 2 at $DIR/while-storage.rs:11:21: 11:22\n+        _4 = get_bool(move _5) -> bb4;   // scope 2 at $DIR/while-storage.rs:11:12: 11:23\n                                          // mir::Constant\n                                          // + span: $DIR/while-storage.rs:11:12: 11:20\n                                          // + literal: Const { ty: fn(bool) -> bool {get_bool}, val: Value(Scalar(<ZST>)) }\n     }\n \n     bb4: {\n-        StorageDead(_5);                 // scope 0 at $DIR/while-storage.rs:11:22: 11:23\n-        switchInt(move _4) -> [false: bb6, otherwise: bb5]; // scope 0 at $DIR/while-storage.rs:11:12: 11:23\n+        StorageDead(_5);                 // scope 2 at $DIR/while-storage.rs:11:22: 11:23\n+        switchInt(move _4) -> [false: bb6, otherwise: bb5]; // scope 2 at $DIR/while-storage.rs:11:12: 11:23\n     }\n \n     bb5: {\n-        StorageDead(_4);                 // scope 0 at $DIR/while-storage.rs:13:9: 13:10\n-        goto -> bb8;                     // scope 0 at no-location\n+        StorageDead(_4);                 // scope 1 at $DIR/while-storage.rs:13:9: 13:10\n+        goto -> bb8;                     // scope 1 at no-location\n     }\n \n     bb6: {\n-        StorageDead(_4);                 // scope 0 at $DIR/while-storage.rs:13:9: 13:10\n+        StorageDead(_4);                 // scope 1 at $DIR/while-storage.rs:13:9: 13:10\n         StorageDead(_2);                 // scope 0 at $DIR/while-storage.rs:14:5: 14:6\n         goto -> bb1;                     // scope 0 at $DIR/while-storage.rs:10:5: 14:6\n     }"}]}