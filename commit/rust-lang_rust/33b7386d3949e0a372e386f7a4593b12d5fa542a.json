{"sha": "33b7386d3949e0a372e386f7a4593b12d5fa542a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzYjczODZkMzk0OWUwYTM3MmUzODZmN2E0NTkzYjEyZDVmYTU0MmE=", "commit": {"author": {"name": "Eli Friedman", "email": "eli.friedman@gmail.com", "date": "2015-06-12T23:50:13Z"}, "committer": {"name": "Eli Friedman", "email": "eli.friedman@gmail.com", "date": "2015-06-12T23:50:13Z"}, "message": "Split TyArray into TyArray and TySlice.\n\nArrays and slices are closely related, but not that closely; making the\nseparation more explicit is generally more clear.", "tree": {"sha": "c06138678970ad2b90ad79ac132594eff6ca64c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c06138678970ad2b90ad79ac132594eff6ca64c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/33b7386d3949e0a372e386f7a4593b12d5fa542a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/33b7386d3949e0a372e386f7a4593b12d5fa542a", "html_url": "https://github.com/rust-lang/rust/commit/33b7386d3949e0a372e386f7a4593b12d5fa542a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/33b7386d3949e0a372e386f7a4593b12d5fa542a/comments", "author": {"login": "eefriedman", "id": 12769964, "node_id": "MDQ6VXNlcjEyNzY5OTY0", "avatar_url": "https://avatars.githubusercontent.com/u/12769964?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eefriedman", "html_url": "https://github.com/eefriedman", "followers_url": "https://api.github.com/users/eefriedman/followers", "following_url": "https://api.github.com/users/eefriedman/following{/other_user}", "gists_url": "https://api.github.com/users/eefriedman/gists{/gist_id}", "starred_url": "https://api.github.com/users/eefriedman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eefriedman/subscriptions", "organizations_url": "https://api.github.com/users/eefriedman/orgs", "repos_url": "https://api.github.com/users/eefriedman/repos", "events_url": "https://api.github.com/users/eefriedman/events{/privacy}", "received_events_url": "https://api.github.com/users/eefriedman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eefriedman", "id": 12769964, "node_id": "MDQ6VXNlcjEyNzY5OTY0", "avatar_url": "https://avatars.githubusercontent.com/u/12769964?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eefriedman", "html_url": "https://github.com/eefriedman", "followers_url": "https://api.github.com/users/eefriedman/followers", "following_url": "https://api.github.com/users/eefriedman/following{/other_user}", "gists_url": "https://api.github.com/users/eefriedman/gists{/gist_id}", "starred_url": "https://api.github.com/users/eefriedman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eefriedman/subscriptions", "organizations_url": "https://api.github.com/users/eefriedman/orgs", "repos_url": "https://api.github.com/users/eefriedman/repos", "events_url": "https://api.github.com/users/eefriedman/events{/privacy}", "received_events_url": "https://api.github.com/users/eefriedman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50ab23ddbd39d797dde46288af0ae9d29784e7a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/50ab23ddbd39d797dde46288af0ae9d29784e7a3", "html_url": "https://github.com/rust-lang/rust/commit/50ab23ddbd39d797dde46288af0ae9d29784e7a3"}], "stats": {"total": 288, "additions": 138, "deletions": 150}, "files": [{"sha": "72e96121a3a683ab8c8fe54e8241c0ff852f2345", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/33b7386d3949e0a372e386f7a4593b12d5fa542a/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33b7386d3949e0a372e386f7a4593b12d5fa542a/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=33b7386d3949e0a372e386f7a4593b12d5fa542a", "patch": "@@ -113,11 +113,12 @@ pub fn enc_ty<'a, 'tcx>(w: &mut Encoder, cx: &ctxt<'a, 'tcx>, t: Ty<'tcx>) {\n         ty::TyArray(t, sz) => {\n             mywrite!(w, \"V\");\n             enc_ty(w, cx, t);\n-            mywrite!(w, \"/\");\n-            match sz {\n-                Some(n) => mywrite!(w, \"{}|\", n),\n-                None => mywrite!(w, \"|\"),\n-            }\n+            mywrite!(w, \"/{}|\", sz);\n+        }\n+        ty::TySlice(t) => {\n+            mywrite!(w, \"V\");\n+            enc_ty(w, cx, t);\n+            mywrite!(w, \"/|\");\n         }\n         ty::TyStr => {\n             mywrite!(w, \"v\");"}, {"sha": "125de300db169924fb08eca07dc611be7cb5d16a", "filename": "src/librustc/middle/check_const.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/33b7386d3949e0a372e386f7a4593b12d5fa542a/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33b7386d3949e0a372e386f7a4593b12d5fa542a/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs?ref=33b7386d3949e0a372e386f7a4593b12d5fa542a", "patch": "@@ -423,7 +423,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for CheckCrateVisitor<'a, 'tcx> {\n                 self.visit_expr(&**element);\n                 // The count is checked elsewhere (typeck).\n                 let count = match node_ty.sty {\n-                    ty::TyArray(_, Some(n)) => n,\n+                    ty::TyArray(_, n) => n,\n                     _ => unreachable!()\n                 };\n                 // [element; 0] is always zero-sized.\n@@ -851,10 +851,14 @@ impl<'a, 'tcx> euv::Delegate<'tcx> for CheckCrateVisitor<'a, 'tcx> {\n                     }\n                     let mutbl = bk.to_mutbl_lossy();\n                     if mutbl == ast::MutMutable && self.mode == Mode::StaticMut {\n-                        // Mutable slices are the only `&mut` allowed in globals,\n-                        // but only in `static mut`, nowhere else.\n+                        // Mutable slices are the only `&mut` allowed in\n+                        // globals, but only in `static mut`, nowhere else.\n+                        // FIXME: This exception is really weird... there isn't\n+                        // any fundamental reason to restrict this based on\n+                        // type of the expression.  `&mut [1]` has exactly the\n+                        // same representation as &mut 1.\n                         match cmt.ty.sty {\n-                            ty::TyArray(_, _) => break,\n+                            ty::TyArray(_, _) | ty::TySlice(_) => break,\n                             _ => {}\n                         }\n                     }"}, {"sha": "ea95536b811e60bf7e3754f44d0f78f0f05db2ab", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/33b7386d3949e0a372e386f7a4593b12d5fa542a/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33b7386d3949e0a372e386f7a4593b12d5fa542a/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=33b7386d3949e0a372e386f7a4593b12d5fa542a", "patch": "@@ -537,14 +537,14 @@ fn construct_witness(cx: &MatchCheckCtxt, ctor: &Constructor,\n \n         ty::TyRef(_, ty::mt { ty, mutbl }) => {\n             match ty.sty {\n-               ty::TyArray(_, Some(n)) => match ctor {\n+               ty::TyArray(_, n) => match ctor {\n                     &Single => {\n                         assert_eq!(pats_len, n);\n                         ast::PatVec(pats.collect(), None, vec!())\n                     },\n                     _ => unreachable!()\n                 },\n-                ty::TyArray(_, None) => match ctor {\n+                ty::TySlice(_) => match ctor {\n                     &Slice(n) => {\n                         assert_eq!(pats_len, n);\n                         ast::PatVec(pats.collect(), None, vec!())\n@@ -560,7 +560,7 @@ fn construct_witness(cx: &MatchCheckCtxt, ctor: &Constructor,\n             }\n         }\n \n-        ty::TyArray(_, Some(len)) => {\n+        ty::TyArray(_, len) => {\n             assert_eq!(pats_len, len);\n             ast::PatVec(pats.collect(), None, vec![])\n         }\n@@ -601,7 +601,7 @@ fn all_constructors(cx: &MatchCheckCtxt, left_ty: Ty,\n             [true, false].iter().map(|b| ConstantValue(const_bool(*b))).collect(),\n \n         ty::TyRef(_, ty::mt { ty, .. }) => match ty.sty {\n-            ty::TyArray(_, None) =>\n+            ty::TySlice(_) =>\n                 range_inclusive(0, max_slice_length).map(|length| Slice(length)).collect(),\n             _ => vec!(Single)\n         },\n@@ -779,7 +779,7 @@ fn pat_constructors(cx: &MatchCheckCtxt, p: &Pat,\n             vec!(ConstantRange(eval_const_expr(cx.tcx, &**lo), eval_const_expr(cx.tcx, &**hi))),\n         ast::PatVec(ref before, ref slice, ref after) =>\n             match left_ty.sty {\n-                ty::TyArray(_, Some(_)) => vec!(Single),\n+                ty::TyArray(_, _) => vec!(Single),\n                 _                      => if slice.is_some() {\n                     range_inclusive(before.len() + after.len(), max_slice_length)\n                         .map(|length| Slice(length))\n@@ -807,7 +807,7 @@ pub fn constructor_arity(cx: &MatchCheckCtxt, ctor: &Constructor, ty: Ty) -> usi\n         ty::TyTuple(ref fs) => fs.len(),\n         ty::TyBox(_) => 1,\n         ty::TyRef(_, ty::mt { ty, .. }) => match ty.sty {\n-            ty::TyArray(_, None) => match *ctor {\n+            ty::TySlice(_) => match *ctor {\n                 Slice(length) => length,\n                 ConstantValue(_) => 0,\n                 _ => unreachable!()\n@@ -822,7 +822,7 @@ pub fn constructor_arity(cx: &MatchCheckCtxt, ctor: &Constructor, ty: Ty) -> usi\n             }\n         }\n         ty::TyStruct(cid, _) => ty::lookup_struct_fields(cx.tcx, cid).len(),\n-        ty::TyArray(_, Some(n)) => n,\n+        ty::TyArray(_, n) => n,\n         _ => 0\n     }\n }"}, {"sha": "168494043e5c452ec46dfc296a6c6c7555a89f6d", "filename": "src/librustc/middle/fast_reject.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33b7386d3949e0a372e386f7a4593b12d5fa542a/src%2Flibrustc%2Fmiddle%2Ffast_reject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33b7386d3949e0a372e386f7a4593b12d5fa542a/src%2Flibrustc%2Fmiddle%2Ffast_reject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ffast_reject.rs?ref=33b7386d3949e0a372e386f7a4593b12d5fa542a", "patch": "@@ -55,7 +55,7 @@ pub fn simplify_type(tcx: &ty::ctxt,\n         ty::TyFloat(float_type) => Some(FloatSimplifiedType(float_type)),\n         ty::TyEnum(def_id, _) => Some(EnumSimplifiedType(def_id)),\n         ty::TyStr => Some(StrSimplifiedType),\n-        ty::TyArray(..) => Some(VecSimplifiedType),\n+        ty::TyArray(..) | ty::TySlice(_) => Some(VecSimplifiedType),\n         ty::TyRawPtr(_) => Some(PtrSimplifiedType),\n         ty::TyTrait(ref trait_info) => {\n             Some(TraitSimplifiedType(trait_info.principal_def_id()))"}, {"sha": "fc9636ae3665f6df12fa2a3efccf0fbdf6a97a87", "filename": "src/librustc/middle/implicator.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/33b7386d3949e0a372e386f7a4593b12d5fa542a/src%2Flibrustc%2Fmiddle%2Fimplicator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33b7386d3949e0a372e386f7a4593b12d5fa542a/src%2Flibrustc%2Fmiddle%2Fimplicator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fimplicator.rs?ref=33b7386d3949e0a372e386f7a4593b12d5fa542a", "patch": "@@ -117,6 +117,7 @@ impl<'a, 'tcx> Implicator<'a, 'tcx> {\n             }\n \n             ty::TyArray(t, _) |\n+            ty::TySlice(t) |\n             ty::TyRawPtr(ty::mt { ty: t, .. }) |\n             ty::TyBox(t) => {\n                 self.accumulate_from_ty(t)"}, {"sha": "1aa54863c203af515971f76ee82b2a8366c4fcec", "filename": "src/librustc/middle/infer/freshen.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/33b7386d3949e0a372e386f7a4593b12d5fa542a/src%2Flibrustc%2Fmiddle%2Finfer%2Ffreshen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33b7386d3949e0a372e386f7a4593b12d5fa542a/src%2Flibrustc%2Fmiddle%2Finfer%2Ffreshen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Ffreshen.rs?ref=33b7386d3949e0a372e386f7a4593b12d5fa542a", "patch": "@@ -159,6 +159,7 @@ impl<'a, 'tcx> TypeFolder<'tcx> for TypeFreshener<'a, 'tcx> {\n             ty::TyStr |\n             ty::TyError |\n             ty::TyArray(..) |\n+            ty::TySlice(..) |\n             ty::TyRawPtr(..) |\n             ty::TyRef(..) |\n             ty::TyBareFn(..) |"}, {"sha": "6d8e412c8a5dd9c1f303b7016e9f4e869f2f5150", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/33b7386d3949e0a372e386f7a4593b12d5fa542a/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33b7386d3949e0a372e386f7a4593b12d5fa542a/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=33b7386d3949e0a372e386f7a4593b12d5fa542a", "patch": "@@ -230,7 +230,7 @@ fn deref_kind(t: Ty, context: DerefKindContext) -> McResult<deref_kind> {\n             Ok(deref_interior(InteriorField(PositionalField(0))))\n         }\n \n-        ty::TyArray(_, _) | ty::TyStr => {\n+        ty::TyArray(_, _) | ty::TySlice(_) | ty::TyStr => {\n             // no deref of indexed content without supplying InteriorOffsetKind\n             if let Some(context) = context {\n                 Ok(deref_interior(InteriorElement(context, element_kind(t))))\n@@ -843,7 +843,7 @@ impl<'t,'tcx,TYPER:Typer<'tcx>> MemCategorizationContext<'t,TYPER> {\n         // Only promote `[T; 0]` before an RFC for rvalue promotions\n         // is accepted.\n         let qualif = match expr_ty.sty {\n-            ty::TyArray(_, Some(0)) => qualif,\n+            ty::TyArray(_, 0) => qualif,\n             _ => check_const::ConstQualif::NOT_CONST\n         };\n \n@@ -1130,7 +1130,7 @@ impl<'t,'tcx,TYPER:Typer<'tcx>> MemCategorizationContext<'t,TYPER> {\n                           -> (ast::Mutability, ty::Region) {\n             match slice_ty.sty {\n                 ty::TyRef(r, ref mt) => match mt.ty.sty {\n-                    ty::TyArray(_, None) => (mt.mutbl, *r),\n+                    ty::TySlice(_) => (mt.mutbl, *r),\n                     _ => vec_slice_info(tcx, pat, mt.ty),\n                 },\n \n@@ -1669,10 +1669,10 @@ fn element_kind(t: Ty) -> ElementKind {\n     match t.sty {\n         ty::TyRef(_, ty::mt{ty, ..}) |\n         ty::TyBox(ty) => match ty.sty {\n-            ty::TyArray(_, None) => VecElement,\n+            ty::TySlice(_) => VecElement,\n             _ => OtherElement\n         },\n-        ty::TyArray(..) => VecElement,\n+        ty::TyArray(..) | ty::TySlice(_) => VecElement,\n         _ => OtherElement\n     }\n }"}, {"sha": "dcf37e7d56a1b70421421cfdac7ac54b461a3506", "filename": "src/librustc/middle/traits/coherence.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/33b7386d3949e0a372e386f7a4593b12d5fa542a/src%2Flibrustc%2Fmiddle%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33b7386d3949e0a372e386f7a4593b12d5fa542a/src%2Flibrustc%2Fmiddle%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fcoherence.rs?ref=33b7386d3949e0a372e386f7a4593b12d5fa542a", "patch": "@@ -306,6 +306,7 @@ fn ty_is_local_constructor<'tcx>(tcx: &ty::ctxt<'tcx>,\n         ty::TyStr(..) |\n         ty::TyBareFn(..) |\n         ty::TyArray(..) |\n+        ty::TySlice(..) |\n         ty::TyRawPtr(..) |\n         ty::TyRef(..) |\n         ty::TyTuple(..) |"}, {"sha": "5d8cdd44eaa538af8da846233f0805b5cffb8c09", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 8, "deletions": 25, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/33b7386d3949e0a372e386f7a4593b12d5fa542a/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33b7386d3949e0a372e386f7a4593b12d5fa542a/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=33b7386d3949e0a372e386f7a4593b12d5fa542a", "patch": "@@ -1429,7 +1429,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             }\n \n             // [T; n] -> [T].\n-            (&ty::TyArray(_, Some(_)), &ty::TyArray(_, None)) => true,\n+            (&ty::TyArray(_, _), &ty::TySlice(_)) => true,\n \n             // Struct<T> -> Struct<U>.\n             (&ty::TyStruct(def_id_a, _), &ty::TyStruct(def_id_b, _)) => {\n@@ -1662,35 +1662,18 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 }\n             }\n \n-            ty::TyArray(element_ty, ref len) => {\n-                // [T; n] and [T]\n+            ty::TyArray(element_ty, _) => {\n+                // [T; n]\n                 match bound {\n-                    ty::BoundCopy => {\n-                        match *len {\n-                            // [T; n] is copy iff T is copy\n-                            Some(_) => ok_if(vec![element_ty]),\n-\n-                            // [T] is unsized and hence affine\n-                            None => Err(Unimplemented),\n-                        }\n-                    }\n-\n-                    ty::BoundSized => {\n-                        if len.is_some() {\n-                            ok_if(Vec::new())\n-                        } else {\n-                            Err(Unimplemented)\n-                        }\n-                    }\n-\n+                    ty::BoundCopy => ok_if(vec![element_ty]),\n+                    ty::BoundSized => ok_if(Vec::new()),\n                     ty::BoundSync | ty::BoundSend => {\n                         self.tcx().sess.bug(\"Send/Sync shouldn't occur in builtin_bounds()\");\n                     }\n                 }\n             }\n \n-            ty::TyStr => {\n-                // Equivalent to [u8]\n+            ty::TyStr | ty::TySlice(_) => {\n                 match bound {\n                     ty::BoundSync | ty::BoundSend => {\n                         self.tcx().sess.bug(\"Send/Sync shouldn't occur in builtin_bounds()\");\n@@ -1855,7 +1838,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 Some(vec![element_ty])\n             },\n \n-            ty::TyArray(element_ty, _) => {\n+            ty::TyArray(element_ty, _) | ty::TySlice(element_ty) => {\n                 Some(vec![element_ty])\n             }\n \n@@ -2510,7 +2493,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             }\n \n             // [T; n] -> [T].\n-            (&ty::TyArray(a, Some(_)), &ty::TyArray(b, None)) => {\n+            (&ty::TyArray(a, _), &ty::TySlice(b)) => {\n                 let origin = infer::Misc(obligation.cause.span);\n                 if self.infcx.sub_types(false, origin, a, b).is_err() {\n                     return Err(Unimplemented);"}, {"sha": "c24f1d3e7bedbd6ff536c6924280f7d5b662ac92", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 32, "deletions": 38, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/33b7386d3949e0a372e386f7a4593b12d5fa542a/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33b7386d3949e0a372e386f7a4593b12d5fa542a/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=33b7386d3949e0a372e386f7a4593b12d5fa542a", "patch": "@@ -906,7 +906,7 @@ impl<'tcx> ctxt<'tcx> {\n     pub fn print_debug_stats(&self) {\n         sty_debug_print!(\n             self,\n-            TyEnum, TyBox, TyArray, TyRawPtr, TyRef, TyBareFn, TyTrait,\n+            TyEnum, TyBox, TyArray, TySlice, TyRawPtr, TyRef, TyBareFn, TyTrait,\n             TyStruct, TyClosure, TyTuple, TyParam, TyInfer, TyProjection);\n \n         println!(\"Substs interner: #{}\", self.substs_interner.borrow().len());\n@@ -1378,10 +1378,11 @@ pub enum TypeVariants<'tcx> {\n     /// The pointee of a string slice. Written as `str`.\n     TyStr,\n \n-    /// An array with the given length, or the pointee\n-    /// of an array slice.  Written as `[T; n]`, or `[T]`.\n-    /// FIXME: It probably makes sense to separate these.\n-    TyArray(Ty<'tcx>, Option<usize>),\n+    /// An array with the given length. Written as `[T; n]`.\n+    TyArray(Ty<'tcx>, usize),\n+\n+    /// The pointee of an array slice.  Written as `[T]`.\n+    TySlice(Ty<'tcx>),\n \n     /// A raw pointer. Written as `*mut T` or `*const T`\n     TyRawPtr(mt<'tcx>),\n@@ -3047,7 +3048,7 @@ impl FlagComputation {\n                 self.add_bounds(bounds);\n             }\n \n-            &TyBox(tt) | &TyArray(tt, _) => {\n+            &TyBox(tt) | &TyArray(tt, _) | &TySlice(tt) => {\n                 self.add_ty(tt)\n             }\n \n@@ -3201,7 +3202,10 @@ pub fn mk_nil_ptr<'tcx>(cx: &ctxt<'tcx>) -> Ty<'tcx> {\n }\n \n pub fn mk_vec<'tcx>(cx: &ctxt<'tcx>, ty: Ty<'tcx>, sz: Option<usize>) -> Ty<'tcx> {\n-    mk_t(cx, TyArray(ty, sz))\n+    match sz {\n+        Some(n) => mk_t(cx, TyArray(ty, n)),\n+        None => mk_t(cx, TySlice(ty))\n+    }\n }\n \n pub fn mk_slice<'tcx>(cx: &ctxt<'tcx>, r: &'tcx Region, tm: mt<'tcx>) -> Ty<'tcx> {\n@@ -3480,29 +3484,17 @@ pub fn type_is_self(ty: Ty) -> bool {\n fn type_is_slice(ty: Ty) -> bool {\n     match ty.sty {\n         TyRawPtr(mt) | TyRef(_, mt) => match mt.ty.sty {\n-            TyArray(_, None) | TyStr => true,\n+            TySlice(_) | TyStr => true,\n             _ => false,\n         },\n         _ => false\n     }\n }\n \n-pub fn type_is_vec(ty: Ty) -> bool {\n-    match ty.sty {\n-        TyArray(..) => true,\n-        TyRawPtr(mt{ty, ..}) | TyRef(_, mt{ty, ..}) |\n-        TyBox(ty) => match ty.sty {\n-            TyArray(_, None) => true,\n-            _ => false\n-        },\n-        _ => false\n-    }\n-}\n-\n pub fn type_is_structural(ty: Ty) -> bool {\n     match ty.sty {\n       TyStruct(..) | TyTuple(_) | TyEnum(..) |\n-      TyArray(_, Some(_)) | TyClosure(..) => true,\n+      TyArray(..) | TyClosure(..) => true,\n       _ => type_is_slice(ty) | type_is_trait(ty)\n     }\n }\n@@ -3516,7 +3508,7 @@ pub fn type_is_simd(cx: &ctxt, ty: Ty) -> bool {\n \n pub fn sequence_element_type<'tcx>(cx: &ctxt<'tcx>, ty: Ty<'tcx>) -> Ty<'tcx> {\n     match ty.sty {\n-        TyArray(ty, _) => ty,\n+        TyArray(ty, _) | TySlice(ty) => ty,\n         TyStr => mk_mach_uint(cx, ast::TyU8),\n         _ => cx.sess.bug(&format!(\"sequence_element_type called on non-sequence value: {}\",\n                                  ty_to_string(cx, ty))),\n@@ -3816,17 +3808,18 @@ pub fn type_contents<'tcx>(cx: &ctxt<'tcx>, ty: Ty<'tcx>) -> TypeContents {\n             TyRef(r, ref mt) => {\n                 TC::ReachesFfiUnsafe | match mt.ty.sty {\n                     TyStr => borrowed_contents(*r, ast::MutImmutable),\n-                    TyArray(..) => tc_ty(cx, mt.ty, cache).reference(borrowed_contents(*r,\n+                    TyArray(..) |\n+                    TySlice(_) => tc_ty(cx, mt.ty, cache).reference(borrowed_contents(*r,\n                                                                                       mt.mutbl)),\n                     _ => tc_ty(cx, mt.ty, cache).reference(borrowed_contents(*r, mt.mutbl)),\n                 }\n             }\n \n-            TyArray(ty, Some(_)) => {\n+            TyArray(ty, _) => {\n                 tc_ty(cx, ty, cache)\n             }\n \n-            TyArray(ty, None) => {\n+            TySlice(ty) => {\n                 tc_ty(cx, ty, cache) | TC::Nonsized\n             }\n             TyStr => TC::Nonsized,\n@@ -4021,7 +4014,7 @@ pub fn type_moves_by_default<'a,'tcx>(param_env: &ParameterEnvironment<'a,'tcx>,\n             mutbl: ast::MutMutable, ..\n         }) => Some(true),\n \n-        TyArray(..) | TyTrait(..) | TyTuple(..) |\n+        TyArray(..) | TySlice(_) | TyTrait(..) | TyTuple(..) |\n         TyClosure(..) | TyEnum(..) | TyStruct(..) |\n         TyProjection(..) | TyParam(..) | TyInfer(..) | TyError => None\n     }.unwrap_or_else(|| !type_impls_bound(Some(param_env),\n@@ -4066,9 +4059,9 @@ fn type_is_sized_uncached<'a,'tcx>(param_env: Option<&ParameterEnvironment<'a,'t\n     let result = match ty.sty {\n         TyBool | TyChar | TyInt(..) | TyUint(..) | TyFloat(..) |\n         TyBox(..) | TyRawPtr(..) | TyRef(..) | TyBareFn(..) |\n-        TyArray(_, Some(..)) | TyTuple(..) | TyClosure(..) => Some(true),\n+        TyArray(..) | TyTuple(..) | TyClosure(..) => Some(true),\n \n-        TyStr | TyTrait(..) | TyArray(_, None) => Some(false),\n+        TyStr | TyTrait(..) | TySlice(_) => Some(false),\n \n         TyEnum(..) | TyStruct(..) | TyProjection(..) | TyParam(..) |\n         TyInfer(..) | TyError => None\n@@ -4116,8 +4109,8 @@ pub fn is_instantiable<'tcx>(cx: &ctxt<'tcx>, r_ty: Ty<'tcx>) -> bool {\n             // fixed length vectors need special treatment compared to\n             // normal vectors, since they don't necessarily have the\n             // possibility to have length zero.\n-            TyArray(_, Some(0)) => false, // don't need no contents\n-            TyArray(ty, Some(_)) => type_requires(cx, seen, r_ty, ty),\n+            TyArray(_, 0) => false, // don't need no contents\n+            TyArray(ty, _) => type_requires(cx, seen, r_ty, ty),\n \n             TyBool |\n             TyChar |\n@@ -4128,7 +4121,7 @@ pub fn is_instantiable<'tcx>(cx: &ctxt<'tcx>, r_ty: Ty<'tcx>) -> bool {\n             TyBareFn(..) |\n             TyParam(_) |\n             TyProjection(_) |\n-            TyArray(_, None) => {\n+            TySlice(_) => {\n                 false\n             }\n             TyBox(typ) => {\n@@ -4238,7 +4231,7 @@ pub fn is_type_representable<'tcx>(cx: &ctxt<'tcx>, sp: Span, ty: Ty<'tcx>)\n             }\n             // Fixed-length vectors.\n             // FIXME(#11924) Behavior undecided for zero-length vectors.\n-            TyArray(ty, Some(_)) => {\n+            TyArray(ty, _) => {\n                 is_type_structurally_recursive(cx, sp, seen, ty)\n             }\n             TyStruct(did, substs) => {\n@@ -4494,7 +4487,7 @@ pub fn type_content<'tcx>(ty: Ty<'tcx>) -> Ty<'tcx> {\n // Returns the type of ty[i]\n pub fn index<'tcx>(ty: Ty<'tcx>) -> Option<Ty<'tcx>> {\n     match ty.sty {\n-        TyArray(ty, _) => Some(ty),\n+        TyArray(ty, _) | TySlice(ty) => Some(ty),\n         _ => None\n     }\n }\n@@ -4504,7 +4497,7 @@ pub fn index<'tcx>(ty: Ty<'tcx>) -> Option<Ty<'tcx>> {\n // which can't actually be indexed.\n pub fn array_element_ty<'tcx>(tcx: &ctxt<'tcx>, ty: Ty<'tcx>) -> Option<Ty<'tcx>> {\n     match ty.sty {\n-        TyArray(ty, _) => Some(ty),\n+        TyArray(ty, _) | TySlice(ty) => Some(ty),\n         TyStr => Some(tcx.types.u8),\n         _ => None\n     }\n@@ -5063,8 +5056,8 @@ pub fn ty_sort_string<'tcx>(cx: &ctxt<'tcx>, ty: Ty<'tcx>) -> String {\n \n         TyEnum(id, _) => format!(\"enum `{}`\", item_path_str(cx, id)),\n         TyBox(_) => \"box\".to_string(),\n-        TyArray(_, Some(n)) => format!(\"array of {} elements\", n),\n-        TyArray(_, None) => \"slice\".to_string(),\n+        TyArray(_, n) => format!(\"array of {} elements\", n),\n+        TySlice(_) => \"slice\".to_string(),\n         TyRawPtr(_) => \"*-ptr\".to_string(),\n         TyRef(_, _) => \"&-ptr\".to_string(),\n         TyBareFn(Some(_), _) => format!(\"fn item\"),\n@@ -6626,11 +6619,11 @@ pub fn hash_crate_independent<'tcx>(tcx: &ctxt<'tcx>, ty: Ty<'tcx>, svh: &Svh) -\n                 TyBox(_) => {\n                     byte!(9);\n                 }\n-                TyArray(_, Some(n)) => {\n+                TyArray(_, n) => {\n                     byte!(10);\n                     n.hash(state);\n                 }\n-                TyArray(_, None) => {\n+                TySlice(_) => {\n                     byte!(11);\n                 }\n                 TyRawPtr(m) => {\n@@ -6967,6 +6960,7 @@ pub fn accumulate_lifetimes_in_type(accumulator: &mut Vec<ty::Region>,\n             TyBox(_) |\n             TyStr |\n             TyArray(_, _) |\n+            TySlice(_) |\n             TyRawPtr(_) |\n             TyBareFn(..) |\n             TyTuple(_) |"}, {"sha": "38391438298ee8a69b95964573913187485e0614", "filename": "src/librustc/middle/ty_fold.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/33b7386d3949e0a372e386f7a4593b12d5fa542a/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33b7386d3949e0a372e386f7a4593b12d5fa542a/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty_fold.rs?ref=33b7386d3949e0a372e386f7a4593b12d5fa542a", "patch": "@@ -599,6 +599,9 @@ pub fn super_fold_ty<'tcx, T: TypeFolder<'tcx>>(this: &mut T,\n         ty::TyArray(typ, sz) => {\n             ty::TyArray(typ.fold_with(this), sz)\n         }\n+        ty::TySlice(typ) => {\n+            ty::TySlice(typ.fold_with(this))\n+        }\n         ty::TyEnum(tid, ref substs) => {\n             let substs = substs.fold_with(this);\n             ty::TyEnum(tid, this.tcx().mk_substs(substs))"}, {"sha": "91169af4adbe309da6b83a96d72f079732eb8557", "filename": "src/librustc/middle/ty_relate/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/33b7386d3949e0a372e386f7a4593b12d5fa542a/src%2Flibrustc%2Fmiddle%2Fty_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33b7386d3949e0a372e386f7a4593b12d5fa542a/src%2Flibrustc%2Fmiddle%2Fty_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty_relate%2Fmod.rs?ref=33b7386d3949e0a372e386f7a4593b12d5fa542a", "patch": "@@ -518,7 +518,7 @@ pub fn super_relate_tys<'a,'tcx:'a,R>(relation: &mut R,\n             Ok(ty::mk_rptr(tcx, tcx.mk_region(r), mt))\n         }\n \n-        (&ty::TyArray(a_t, Some(sz_a)), &ty::TyArray(b_t, Some(sz_b))) =>\n+        (&ty::TyArray(a_t, sz_a), &ty::TyArray(b_t, sz_b)) =>\n         {\n             let t = try!(relation.relate(&a_t, &b_t));\n             if sz_a == sz_b {\n@@ -528,7 +528,7 @@ pub fn super_relate_tys<'a,'tcx:'a,R>(relation: &mut R,\n             }\n         }\n \n-        (&ty::TyArray(a_t, None), &ty::TyArray(b_t, None)) =>\n+        (&ty::TySlice(a_t), &ty::TySlice(b_t)) =>\n         {\n             let t = try!(relation.relate(&a_t, &b_t));\n             Ok(ty::mk_vec(tcx, t, None))"}, {"sha": "b34eb2ddb1e913ebfae6ba52e55013321f3929d6", "filename": "src/librustc/middle/ty_walk.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33b7386d3949e0a372e386f7a4593b12d5fa542a/src%2Flibrustc%2Fmiddle%2Fty_walk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33b7386d3949e0a372e386f7a4593b12d5fa542a/src%2Flibrustc%2Fmiddle%2Fty_walk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty_walk.rs?ref=33b7386d3949e0a372e386f7a4593b12d5fa542a", "patch": "@@ -71,7 +71,7 @@ fn push_subtypes<'tcx>(stack: &mut Vec<Ty<'tcx>>, parent_ty: Ty<'tcx>) {\n         ty::TyBool | ty::TyChar | ty::TyInt(_) | ty::TyUint(_) | ty::TyFloat(_) |\n         ty::TyStr | ty::TyInfer(_) | ty::TyParam(_) | ty::TyError => {\n         }\n-        ty::TyBox(ty) | ty::TyArray(ty, _) => {\n+        ty::TyBox(ty) | ty::TyArray(ty, _) | ty::TySlice(ty) => {\n             stack.push(ty);\n         }\n         ty::TyRawPtr(ref mt) | ty::TyRef(_, ref mt) => {"}, {"sha": "7341420c553585ab7671602c41def9d2f91ac719", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/33b7386d3949e0a372e386f7a4593b12d5fa542a/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33b7386d3949e0a372e386f7a4593b12d5fa542a/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=33b7386d3949e0a372e386f7a4593b12d5fa542a", "patch": "@@ -20,7 +20,7 @@ use middle::ty::{ReFree, ReScope, ReInfer, ReStatic, Region, ReEmpty};\n use middle::ty::{ReSkolemized, ReVar, BrEnv};\n use middle::ty::{mt, Ty, ParamTy};\n use middle::ty::{TyBool, TyChar, TyStruct, TyEnum};\n-use middle::ty::{TyError, TyStr, TyArray, TyFloat, TyBareFn};\n+use middle::ty::{TyError, TyStr, TyArray, TySlice, TyFloat, TyBareFn};\n use middle::ty::{TyParam, TyRawPtr, TyRef, TyTuple};\n use middle::ty::TyClosure;\n use middle::ty::{TyBox, TyTrait, TyInt, TyUint, TyInfer};\n@@ -432,11 +432,10 @@ pub fn ty_to_string<'tcx>(cx: &ctxt<'tcx>, typ: &ty::TyS<'tcx>) -> String {\n             })\n         }\n         TyArray(t, sz) => {\n-            let inner_str = ty_to_string(cx, t);\n-            match sz {\n-                Some(n) => format!(\"[{}; {}]\", inner_str, n),\n-                None => format!(\"[{}]\", inner_str),\n-            }\n+            format!(\"[{}; {}]\", ty_to_string(cx, t), sz)\n+        }\n+        TySlice(t) => {\n+            format!(\"[{}]\", ty_to_string(cx, t))\n         }\n     }\n }"}, {"sha": "d2a7b3198f8dd65b073c8e4f88f0c8402e20cc3d", "filename": "src/librustc_trans/trans/_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/33b7386d3949e0a372e386f7a4593b12d5fa542a/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33b7386d3949e0a372e386f7a4593b12d5fa542a/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2F_match.rs?ref=33b7386d3949e0a372e386f7a4593b12d5fa542a", "patch": "@@ -852,7 +852,7 @@ fn compare_values<'blk, 'tcx>(cx: Block<'blk, 'tcx>,\n     match rhs_t.sty {\n         ty::TyRef(_, mt) => match mt.ty.sty {\n             ty::TyStr => compare_str(cx, lhs, rhs, rhs_t, debug_loc),\n-            ty::TyArray(ty, _) => match ty.sty {\n+            ty::TyArray(ty, _) | ty::TySlice(ty) => match ty.sty {\n                 ty::TyUint(ast::TyU8) => {\n                     // NOTE: cast &[u8] and &[u8; N] to &str and abuse the str_eq lang item,\n                     // which calls memcmp().\n@@ -1116,7 +1116,7 @@ fn compile_submatch_continue<'a, 'p, 'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n         Some(vec!(Load(bcx, val)))\n     } else {\n         match left_ty.sty {\n-            ty::TyArray(_, Some(n)) => {\n+            ty::TyArray(_, n) => {\n                 let args = extract_vec_elems(bcx, left_ty, n, 0, val);\n                 Some(args.vals)\n             }"}, {"sha": "d9e1a75d3dcdc6fdb581d25b84d0000f0a58c0f0", "filename": "src/librustc_trans/trans/adt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33b7386d3949e0a372e386f7a4593b12d5fa542a/src%2Flibrustc_trans%2Ftrans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33b7386d3949e0a372e386f7a4593b12d5fa542a/src%2Flibrustc_trans%2Ftrans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fadt.rs?ref=33b7386d3949e0a372e386f7a4593b12d5fa542a", "patch": "@@ -472,7 +472,7 @@ fn find_discr_field_candidate<'tcx>(tcx: &ty::ctxt<'tcx>,\n \n         // Is this a fixed-size array of something non-zero\n         // with at least one element?\n-        ty::TyArray(ety, Some(d)) if d > 0 => {\n+        ty::TyArray(ety, d) if d > 0 => {\n             if let Some(mut vpath) = find_discr_field_candidate(tcx, ety, path) {\n                 vpath.push(0);\n                 Some(vpath)"}, {"sha": "0ec2d1abb09bda1d35d270fe84da492700daf26f", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/33b7386d3949e0a372e386f7a4593b12d5fa542a/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33b7386d3949e0a372e386f7a4593b12d5fa542a/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=33b7386d3949e0a372e386f7a4593b12d5fa542a", "patch": "@@ -444,12 +444,12 @@ pub fn iter_structural_ty<'blk, 'tcx, F>(cx: Block<'blk, 'tcx>,\n               cx = f(cx, llupvar, upvar.ty);\n           }\n       }\n-      ty::TyArray(_, Some(n)) => {\n+      ty::TyArray(_, n) => {\n         let (base, len) = tvec::get_fixed_base_and_len(cx, data_ptr, n);\n         let unit_ty = ty::sequence_element_type(cx.tcx(), t);\n         cx = tvec::iter_vec_raw(cx, base, unit_ty, len, f);\n       }\n-      ty::TyArray(_, None) | ty::TyStr => {\n+      ty::TySlice(_) | ty::TyStr => {\n         let unit_ty = ty::sequence_element_type(cx.tcx(), t);\n         cx = tvec::iter_vec_raw(cx, data_ptr, unit_ty, info.unwrap(), f);\n       }"}, {"sha": "0f8fd45b05ac16bb6e831a78e03623b7320eb123", "filename": "src/librustc_trans/trans/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33b7386d3949e0a372e386f7a4593b12d5fa542a/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33b7386d3949e0a372e386f7a4593b12d5fa542a/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs?ref=33b7386d3949e0a372e386f7a4593b12d5fa542a", "patch": "@@ -246,7 +246,7 @@ pub fn type_is_immediate<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, ty: Ty<'tcx>) -\n         return false;\n     }\n     match ty.sty {\n-        ty::TyStruct(..) | ty::TyEnum(..) | ty::TyTuple(..) | ty::TyArray(_, Some(_)) |\n+        ty::TyStruct(..) | ty::TyEnum(..) | ty::TyTuple(..) | ty::TyArray(_, _) |\n         ty::TyClosure(..) => {\n             let llty = sizing_type_of(ccx, ty);\n             llsize_of_alloc(ccx, llty) <= llsize_of_alloc(ccx, ccx.int_type())"}, {"sha": "f7d1fad19a1660f7b134374ab69b2b5c714b2c24", "filename": "src/librustc_trans/trans/consts.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/33b7386d3949e0a372e386f7a4593b12d5fa542a/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33b7386d3949e0a372e386f7a4593b12d5fa542a/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs?ref=33b7386d3949e0a372e386f7a4593b12d5fa542a", "patch": "@@ -609,13 +609,13 @@ fn const_expr_unadjusted<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                                           \"index is not an integer-constant expression\")\n               };\n               let (arr, len) = match bt.sty {\n-                  ty::TyArray(_, Some(u)) => (bv, C_uint(cx, u)),\n-                  ty::TyArray(_, None) | ty::TyStr => {\n+                  ty::TyArray(_, u) => (bv, C_uint(cx, u)),\n+                  ty::TySlice(_) | ty::TyStr => {\n                       let e1 = const_get_elt(cx, bv, &[0]);\n                       (const_deref_ptr(cx, e1), const_get_elt(cx, bv, &[1]))\n                   }\n                   ty::TyRef(_, mt) => match mt.ty.sty {\n-                      ty::TyArray(_, Some(u)) => {\n+                      ty::TyArray(_, u) => {\n                           (const_deref_ptr(cx, bv), C_uint(cx, u))\n                       },\n                       _ => cx.sess().span_bug(base.span,"}, {"sha": "42aa96ed21e9cf02dda349fdf9035d551d8ffe76", "filename": "src/librustc_trans/trans/debuginfo/metadata.rs", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/33b7386d3949e0a372e386f7a4593b12d5fa542a/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33b7386d3949e0a372e386f7a4593b12d5fa542a/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmetadata.rs?ref=33b7386d3949e0a372e386f7a4593b12d5fa542a", "patch": "@@ -226,15 +226,15 @@ impl<'tcx> TypeMap<'tcx> {\n                 let inner_type_id = self.get_unique_type_id_as_string(inner_type_id);\n                 unique_type_id.push_str(&inner_type_id[..]);\n             },\n-            ty::TyArray(inner_type, optional_length) => {\n-                match optional_length {\n-                    Some(len) => {\n-                        unique_type_id.push_str(&format!(\"[{}]\", len));\n-                    }\n-                    None => {\n-                        unique_type_id.push_str(\"[]\");\n-                    }\n-                };\n+            ty::TyArray(inner_type, len) => {\n+                unique_type_id.push_str(&format!(\"[{}]\", len));\n+\n+                let inner_type_id = self.get_unique_type_id_of_type(cx, inner_type);\n+                let inner_type_id = self.get_unique_type_id_as_string(inner_type_id);\n+                unique_type_id.push_str(&inner_type_id[..]);\n+            },\n+            ty::TySlice(inner_type) => {\n+                unique_type_id.push_str(\"[]\");\n \n                 let inner_type_id = self.get_unique_type_id_of_type(cx, inner_type);\n                 let inner_type_id = self.get_unique_type_id_as_string(inner_type_id);\n@@ -756,7 +756,10 @@ pub fn type_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n             prepare_enum_metadata(cx, t, def_id, unique_type_id, usage_site_span).finalize(cx)\n         }\n         ty::TyArray(typ, len) => {\n-            fixed_vec_metadata(cx, unique_type_id, typ, len.map(|x| x as u64), usage_site_span)\n+            fixed_vec_metadata(cx, unique_type_id, typ, Some(len as u64), usage_site_span)\n+        }\n+        ty::TySlice(typ) => {\n+            fixed_vec_metadata(cx, unique_type_id, typ, None, usage_site_span)\n         }\n         ty::TyStr => {\n             fixed_vec_metadata(cx, unique_type_id, cx.tcx().types.i8, None, usage_site_span)\n@@ -768,7 +771,7 @@ pub fn type_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n         }\n         ty::TyBox(ty) | ty::TyRawPtr(ty::mt{ty, ..}) | ty::TyRef(_, ty::mt{ty, ..}) => {\n             match ty.sty {\n-                ty::TyArray(typ, None) => {\n+                ty::TySlice(typ) => {\n                     vec_slice_metadata(cx, t, typ, unique_type_id, usage_site_span)\n                 }\n                 ty::TyStr => {"}, {"sha": "7d6c053cd1bf48b068661e7a495d645c54242a57", "filename": "src/librustc_trans/trans/debuginfo/type_names.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/33b7386d3949e0a372e386f7a4593b12d5fa542a/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33b7386d3949e0a372e386f7a4593b12d5fa542a/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Ftype_names.rs?ref=33b7386d3949e0a372e386f7a4593b12d5fa542a", "patch": "@@ -94,17 +94,15 @@ pub fn push_debuginfo_type_name<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n \n             push_debuginfo_type_name(cx, inner_type, true, output);\n         },\n-        ty::TyArray(inner_type, optional_length) => {\n+        ty::TyArray(inner_type, len) => {\n+            output.push('[');\n+            push_debuginfo_type_name(cx, inner_type, true, output);\n+            output.push_str(&format!(\"; {}\", len));\n+            output.push(']');\n+        },\n+        ty::TySlice(inner_type) => {\n             output.push('[');\n             push_debuginfo_type_name(cx, inner_type, true, output);\n-\n-            match optional_length {\n-                Some(len) => {\n-                    output.push_str(&format!(\"; {}\", len));\n-                }\n-                None => { /* nothing to do */ }\n-            };\n-\n             output.push(']');\n         },\n         ty::TyTrait(ref trait_data) => {"}, {"sha": "07a8cbc38d5755908199b9adb8308c8ee7a44cb7", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33b7386d3949e0a372e386f7a4593b12d5fa542a/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33b7386d3949e0a372e386f7a4593b12d5fa542a/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=33b7386d3949e0a372e386f7a4593b12d5fa542a", "patch": "@@ -313,7 +313,7 @@ pub fn unsized_info<'ccx, 'tcx>(ccx: &CrateContext<'ccx, 'tcx>,\n                                 -> ValueRef {\n     let (source, target) = ty::struct_lockstep_tails(ccx.tcx(), source, target);\n     match (&source.sty, &target.sty) {\n-        (&ty::TyArray(_, Some(len)), &ty::TyArray(_, None)) => C_uint(ccx, len),\n+        (&ty::TyArray(_, len), &ty::TySlice(_)) => C_uint(ccx, len),\n         (&ty::TyTrait(_), &ty::TyTrait(_)) => {\n             // For now, upcasts are limited to changes in marker\n             // traits, and hence never actually require an actual"}, {"sha": "c7f5b86412cae7ade6fa87676a02c26f978b94b0", "filename": "src/librustc_trans/trans/glue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33b7386d3949e0a372e386f7a4593b12d5fa542a/src%2Flibrustc_trans%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33b7386d3949e0a372e386f7a4593b12d5fa542a/src%2Flibrustc_trans%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fglue.rs?ref=33b7386d3949e0a372e386f7a4593b12d5fa542a", "patch": "@@ -435,7 +435,7 @@ pub fn size_and_align_of_dst<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, t: Ty<'tcx>, in\n             let align_ptr = GEPi(bcx, info, &[2]);\n             (Load(bcx, size_ptr), Load(bcx, align_ptr))\n         }\n-        ty::TyArray(_, None) | ty::TyStr => {\n+        ty::TySlice(_) | ty::TyStr => {\n             let unit_ty = ty::sequence_element_type(bcx.tcx(), t);\n             // The info in this case is the length of the str, so the size is that\n             // times the unit size."}, {"sha": "3df6c904c7bc00cd47dd12e6ca6e55ed07ae587c", "filename": "src/librustc_trans/trans/tvec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/33b7386d3949e0a372e386f7a4593b12d5fa542a/src%2Flibrustc_trans%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33b7386d3949e0a372e386f7a4593b12d5fa542a/src%2Flibrustc_trans%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Ftvec.rs?ref=33b7386d3949e0a372e386f7a4593b12d5fa542a", "patch": "@@ -310,8 +310,8 @@ pub fn get_base_and_len<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n     let ccx = bcx.ccx();\n \n     match vec_ty.sty {\n-        ty::TyArray(_, Some(n)) => get_fixed_base_and_len(bcx, llval, n),\n-        ty::TyArray(_, None) | ty::TyStr => {\n+        ty::TyArray(_, n) => get_fixed_base_and_len(bcx, llval, n),\n+        ty::TySlice(_) | ty::TyStr => {\n             let base = Load(bcx, expr::get_dataptr(bcx, llval));\n             let len = Load(bcx, expr::get_len(bcx, llval));\n             (base, len)"}, {"sha": "763d0581d6fb4c4e962eda86cf807466dad24415", "filename": "src/librustc_trans/trans/type_of.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/33b7386d3949e0a372e386f7a4593b12d5fa542a/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33b7386d3949e0a372e386f7a4593b12d5fa542a/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs?ref=33b7386d3949e0a372e386f7a4593b12d5fa542a", "patch": "@@ -200,7 +200,7 @@ pub fn sizing_type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>) -> Typ\n \n         ty::TyBareFn(..) => Type::i8p(cx),\n \n-        ty::TyArray(ty, Some(size)) => {\n+        ty::TyArray(ty, size) => {\n             let llty = sizing_type_of(cx, ty);\n             let size = size as u64;\n             ensure_array_fits_in_address_space(cx, llty, size, t);\n@@ -232,7 +232,7 @@ pub fn sizing_type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>) -> Typ\n             cx.sess().bug(&format!(\"fictitious type {} in sizing_type_of()\",\n                                   ppaux::ty_to_string(cx.tcx(), t)))\n         }\n-        ty::TyArray(_, None) | ty::TyTrait(..) | ty::TyStr => unreachable!()\n+        ty::TySlice(_) | ty::TyTrait(..) | ty::TyStr => unreachable!()\n     };\n \n     cx.llsizingtypes().borrow_mut().insert(t, llsizingty);\n@@ -359,7 +359,7 @@ pub fn in_memory_type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>) ->\n                   let ptr_ty = in_memory_type_of(cx, ty).ptr_to();\n                   let unsized_part = ty::struct_tail(cx.tcx(), ty);\n                   let info_ty = match unsized_part.sty {\n-                      ty::TyStr | ty::TyArray(..) => {\n+                      ty::TyStr | ty::TyArray(..) | ty::TySlice(_) => {\n                           Type::uint_from_ty(cx, ast::TyUs)\n                       }\n                       ty::TyTrait(_) => Type::vtable_ptr(cx),\n@@ -374,7 +374,7 @@ pub fn in_memory_type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>) ->\n           }\n       }\n \n-      ty::TyArray(ty, Some(size)) => {\n+      ty::TyArray(ty, size) => {\n           let size = size as u64;\n           let llty = in_memory_type_of(cx, ty);\n           ensure_array_fits_in_address_space(cx, llty, size, t);\n@@ -385,7 +385,7 @@ pub fn in_memory_type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>) ->\n       // traits have the type of u8. This is so that the data pointer inside\n       // fat pointers is of the right type (e.g. for array accesses), even\n       // when taking the address of an unsized field in a struct.\n-      ty::TyArray(ty, None) => in_memory_type_of(cx, ty),\n+      ty::TySlice(ty) => in_memory_type_of(cx, ty),\n       ty::TyStr | ty::TyTrait(..) => Type::i8(cx),\n \n       ty::TyBareFn(..) => {"}, {"sha": "2f1447e0714685d68811c5da78a71e2959317236", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/33b7386d3949e0a372e386f7a4593b12d5fa542a/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33b7386d3949e0a372e386f7a4593b12d5fa542a/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=33b7386d3949e0a372e386f7a4593b12d5fa542a", "patch": "@@ -59,7 +59,7 @@ pub fn check_pat<'a, 'tcx>(pcx: &pat_ctxt<'a, 'tcx>,\n                 if let ast::LitBinary(_) = lt.node {\n                     let expected_ty = structurally_resolved_type(fcx, pat.span, expected);\n                     if let ty::TyRef(_, mt) = expected_ty.sty {\n-                        if let ty::TyArray(_, None) = mt.ty.sty {\n+                        if let ty::TySlice(_) = mt.ty.sty {\n                             pat_ty = ty::mk_slice(tcx, tcx.mk_region(ty::ReStatic),\n                                 ty::mt{ ty: tcx.types.u8, mutbl: ast::MutImmutable })\n                         }\n@@ -293,7 +293,7 @@ pub fn check_pat<'a, 'tcx>(pcx: &pat_ctxt<'a, 'tcx>,\n             let expected_ty = structurally_resolved_type(fcx, pat.span, expected);\n             let inner_ty = fcx.infcx().next_ty_var();\n             let pat_ty = match expected_ty.sty {\n-                ty::TyArray(_, Some(size)) => ty::mk_vec(tcx, inner_ty, Some({\n+                ty::TyArray(_, size) => ty::mk_vec(tcx, inner_ty, Some({\n                     let min_len = before.len() + after.len();\n                     match *slice {\n                         Some(_) => cmp::max(min_len, size),"}, {"sha": "6e306047f75c93632c5d23b02a39a57d22c059a6", "filename": "src/librustc_typeck/check/cast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/33b7386d3949e0a372e386f7a4593b12d5fa542a/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33b7386d3949e0a372e386f7a4593b12d5fa542a/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs?ref=33b7386d3949e0a372e386f7a4593b12d5fa542a", "patch": "@@ -74,7 +74,7 @@ fn unsize_kind<'a,'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n                         t: Ty<'tcx>)\n                         -> Option<UnsizeKind<'tcx>> {\n     match t.sty {\n-        ty::TyArray(_, None) | ty::TyStr => Some(UnsizeKind::Length),\n+        ty::TySlice(_) | ty::TyStr => Some(UnsizeKind::Length),\n         ty::TyTrait(_) => Some(UnsizeKind::Vtable),\n         ty::TyStruct(did, substs) => {\n             match ty::struct_fields(fcx.tcx(), did, substs).pop() {\n@@ -337,7 +337,7 @@ impl<'tcx> CastCheck<'tcx> {\n         // array-ptr-cast.\n \n         if m_expr.mutbl == ast::MutImmutable && m_cast.mutbl == ast::MutImmutable {\n-            if let ty::TyArray(ety, Some(_)) = m_expr.ty.sty {\n+            if let ty::TyArray(ety, _) = m_expr.ty.sty {\n                 // Due to the limitations of LLVM global constants,\n                 // region pointers end up pointing at copies of\n                 // vector elements instead of the original values."}, {"sha": "79449b2f10d43b856f4bf534875bd7a49ba71f93", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/33b7386d3949e0a372e386f7a4593b12d5fa542a/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33b7386d3949e0a372e386f7a4593b12d5fa542a/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=33b7386d3949e0a372e386f7a4593b12d5fa542a", "patch": "@@ -202,7 +202,7 @@ fn create_steps<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n     });\n \n     match final_ty.sty {\n-        ty::TyArray(elem_ty, Some(_)) => {\n+        ty::TyArray(elem_ty, _) => {\n             let slice_ty = ty::mk_vec(fcx.tcx(), elem_ty, None);\n             steps.push(CandidateStep {\n                 self_ty: slice_ty,\n@@ -295,7 +295,7 @@ impl<'a,'tcx> ProbeContext<'a,'tcx> {\n                 let lang_def_id = self.tcx().lang_items.str_impl();\n                 self.assemble_inherent_impl_for_primitive(lang_def_id);\n             }\n-            ty::TyArray(_, None) => {\n+            ty::TySlice(_) => {\n                 let lang_def_id = self.tcx().lang_items.slice_impl();\n                 self.assemble_inherent_impl_for_primitive(lang_def_id);\n             }"}, {"sha": "69f1b5091df4621f2af3eba574fe2c24dde2e192", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/33b7386d3949e0a372e386f7a4593b12d5fa542a/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33b7386d3949e0a372e386f7a4593b12d5fa542a/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=33b7386d3949e0a372e386f7a4593b12d5fa542a", "patch": "@@ -2095,7 +2095,7 @@ fn lookup_indexing<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n \n     // After we have fully autoderef'd, if the resulting type is [T; n], then\n     // do a final unsized coercion to yield [T].\n-    if let ty::TyArray(element_ty, Some(_)) = ty.sty {\n+    if let ty::TyArray(element_ty, _) = ty.sty {\n         let adjusted_ty = ty::mk_vec(fcx.tcx(), element_ty, None);\n         try_index_step(fcx, MethodCall::expr(expr.id), expr, base_expr,\n                        adjusted_ty, autoderefs, true, lvalue_pref, idx_ty)\n@@ -3452,7 +3452,7 @@ fn check_expr_with_unifier<'a, 'tcx, F>(fcx: &FnCtxt<'a, 'tcx>,\n       ast::ExprVec(ref args) => {\n         let uty = expected.to_option(fcx).and_then(|uty| {\n             match uty.sty {\n-                ty::TyArray(ty, _) => Some(ty),\n+                ty::TyArray(ty, _) | ty::TySlice(ty) => Some(ty),\n                 _ => None\n             }\n         });\n@@ -3482,7 +3482,7 @@ fn check_expr_with_unifier<'a, 'tcx, F>(fcx: &FnCtxt<'a, 'tcx>,\n         let uty = match expected {\n             ExpectHasType(uty) => {\n                 match uty.sty {\n-                    ty::TyArray(ty, _) => Some(ty),\n+                    ty::TyArray(ty, _) | ty::TySlice(ty) => Some(ty),\n                     _ => None\n                 }\n             }\n@@ -3862,7 +3862,7 @@ impl<'tcx> Expectation<'tcx> {\n     /// for examples of where this comes up,.\n     fn rvalue_hint(ty: Ty<'tcx>) -> Expectation<'tcx> {\n         match ty.sty {\n-            ty::TyArray(_, None) | ty::TyTrait(..) => {\n+            ty::TySlice(_) | ty::TyTrait(..) => {\n                 ExpectRvalueLikeUnsized(ty)\n             }\n             _ => ExpectHasType(ty)"}, {"sha": "cb4d048ab374be61070a5ca019886a1e1b017271", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33b7386d3949e0a372e386f7a4593b12d5fa542a/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33b7386d3949e0a372e386f7a4593b12d5fa542a/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=33b7386d3949e0a372e386f7a4593b12d5fa542a", "patch": "@@ -997,7 +997,7 @@ fn constrain_index<'a, 'tcx>(rcx: &mut Rcx<'a, 'tcx>,\n     let r_index_expr = ty::ReScope(CodeExtent::from_node_id(index_expr.id));\n     if let ty::TyRef(r_ptr, mt) = indexed_ty.sty {\n         match mt.ty.sty {\n-            ty::TyArray(_, None) | ty::TyStr => {\n+            ty::TySlice(_) | ty::TyStr => {\n                 rcx.fcx.mk_subr(infer::IndexSlice(index_expr.span),\n                                 r_index_expr, *r_ptr);\n             }"}, {"sha": "f6a40eec5829c2f6ed8fd497702678cf4434a591", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/33b7386d3949e0a372e386f7a4593b12d5fa542a/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33b7386d3949e0a372e386f7a4593b12d5fa542a/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=33b7386d3949e0a372e386f7a4593b12d5fa542a", "patch": "@@ -25,7 +25,7 @@ use middle::ty::{MethodTraitItemId, TypeTraitItemId, ParameterEnvironment};\n use middle::ty::{Ty, TyBool, TyChar, TyEnum, TyError};\n use middle::ty::{TyParam, TypeScheme, TyRawPtr};\n use middle::ty::{TyRef, TyStruct, TyTrait, TyTuple};\n-use middle::ty::{TyStr, TyArray, TyFloat, TyInfer, TyInt};\n+use middle::ty::{TyStr, TyArray, TySlice, TyFloat, TyInfer, TyInt};\n use middle::ty::{TyUint, TyClosure, TyBox, TyBareFn};\n use middle::ty::TyProjection;\n use middle::ty;\n@@ -70,7 +70,7 @@ fn get_base_type_def_id<'a, 'tcx>(inference_context: &InferCtxt<'a, 'tcx>,\n         }\n \n         TyBool | TyChar | TyInt(..) | TyUint(..) | TyFloat(..) |\n-        TyStr(..) | TyArray(..) | TyBareFn(..) | TyTuple(..) |\n+        TyStr(..) | TyArray(..) | TySlice(..) | TyBareFn(..) | TyTuple(..) |\n         TyParam(..) | TyError |\n         TyRawPtr(_) | TyRef(_, _) | TyProjection(..) => {\n             None"}, {"sha": "d815893524ff3b1f79c69f2dbbe28f7edbd11a6f", "filename": "src/librustc_typeck/coherence/orphan.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33b7386d3949e0a372e386f7a4593b12d5fa542a/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33b7386d3949e0a372e386f7a4593b12d5fa542a/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs?ref=33b7386d3949e0a372e386f7a4593b12d5fa542a", "patch": "@@ -93,7 +93,7 @@ impl<'cx, 'tcx> OrphanChecker<'cx, 'tcx> {\n                                                   \"str\",\n                                                   item.span);\n                     }\n-                    ty::TyArray(_, None) => {\n+                    ty::TySlice(_) => {\n                         self.check_primitive_impl(def_id,\n                                                   self.tcx.lang_items.slice_impl(),\n                                                   \"slice\","}, {"sha": "37088701adcd6ff7ca06fea6727fda6c59e9f1d8", "filename": "src/librustc_typeck/variance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33b7386d3949e0a372e386f7a4593b12d5fa542a/src%2Flibrustc_typeck%2Fvariance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33b7386d3949e0a372e386f7a4593b12d5fa542a/src%2Flibrustc_typeck%2Fvariance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance.rs?ref=33b7386d3949e0a372e386f7a4593b12d5fa542a", "patch": "@@ -889,7 +889,7 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n                 self.add_constraints_from_mt(generics, mt, variance);\n             }\n \n-            ty::TyBox(typ) | ty::TyArray(typ, _) => {\n+            ty::TyBox(typ) | ty::TyArray(typ, _) | ty::TySlice(typ) => {\n                 self.add_constraints_from_ty(generics, typ, variance);\n             }\n "}, {"sha": "77409f2746a5750b238734a765e4759ca50856e6", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/33b7386d3949e0a372e386f7a4593b12d5fa542a/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33b7386d3949e0a372e386f7a4593b12d5fa542a/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=33b7386d3949e0a372e386f7a4593b12d5fa542a", "patch": "@@ -1652,9 +1652,9 @@ impl<'tcx> Clean<Type> for ty::Ty<'tcx> {\n                 });\n                 lang_struct(cx, box_did, t, \"Box\", Unique)\n             }\n-            ty::TyArray(ty, None) => Vector(box ty.clean(cx)),\n-            ty::TyArray(ty, Some(i)) => FixedVector(box ty.clean(cx),\n-                                                   format!(\"{}\", i)),\n+            ty::TySlice(ty) => Vector(box ty.clean(cx)),\n+            ty::TyArray(ty, i) => FixedVector(box ty.clean(cx),\n+                                              format!(\"{}\", i)),\n             ty::TyRawPtr(mt) => RawPointer(mt.mutbl.clean(cx), box mt.ty.clean(cx)),\n             ty::TyRef(r, mt) => BorrowedRef {\n                 lifetime: r.clean(cx),"}]}