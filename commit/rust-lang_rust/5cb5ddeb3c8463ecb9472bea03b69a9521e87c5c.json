{"sha": "5cb5ddeb3c8463ecb9472bea03b69a9521e87c5c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjYjVkZGViM2M4NDYzZWNiOTQ3MmJlYTAzYjY5YTk1MjFlODdjNWM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-04-03T01:17:40Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-04-03T01:17:40Z"}, "message": ".unwrap() less on .span_to_snippet()", "tree": {"sha": "6a9f617217f76f83cc6557e1a93c93534fabd2f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a9f617217f76f83cc6557e1a93c93534fabd2f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5cb5ddeb3c8463ecb9472bea03b69a9521e87c5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5cb5ddeb3c8463ecb9472bea03b69a9521e87c5c", "html_url": "https://github.com/rust-lang/rust/commit/5cb5ddeb3c8463ecb9472bea03b69a9521e87c5c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5cb5ddeb3c8463ecb9472bea03b69a9521e87c5c/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "08a724967ede178052f43049248b647a9feab806", "url": "https://api.github.com/repos/rust-lang/rust/commits/08a724967ede178052f43049248b647a9feab806", "html_url": "https://github.com/rust-lang/rust/commit/08a724967ede178052f43049248b647a9feab806"}], "stats": {"total": 38, "additions": 18, "deletions": 20}, "files": [{"sha": "b3764d2d47be14aa587994edb16fe78a9f47ee9a", "filename": "src/librustc_parse/parser/stmt.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5cb5ddeb3c8463ecb9472bea03b69a9521e87c5c/src%2Flibrustc_parse%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cb5ddeb3c8463ecb9472bea03b69a9521e87c5c/src%2Flibrustc_parse%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fstmt.rs?ref=5cb5ddeb3c8463ecb9472bea03b69a9521e87c5c", "patch": "@@ -165,9 +165,9 @@ impl<'a> Parser<'a> {\n                     // Rewind to before attempting to parse the type and continue parsing.\n                     let parser_snapshot_after_type = self.clone();\n                     mem::replace(self, parser_snapshot_before_type);\n-\n-                    let snippet = self.span_to_snippet(pat.span).unwrap();\n-                    err.span_label(pat.span, format!(\"while parsing the type for `{}`\", snippet));\n+                    if let Ok(snip) = self.span_to_snippet(pat.span) {\n+                        err.span_label(pat.span, format!(\"while parsing the type for `{}`\", snip));\n+                    }\n                     (Some((parser_snapshot_after_type, colon_sp, err)), None)\n                 }\n             }"}, {"sha": "fcec29aaa8ecb51688a98cf79d091d50edc39088", "filename": "src/librustc_trait_selection/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 15, "deletions": 17, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/5cb5ddeb3c8463ecb9472bea03b69a9521e87c5c/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cb5ddeb3c8463ecb9472bea03b69a9521e87c5c/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=5cb5ddeb3c8463ecb9472bea03b69a9521e87c5c", "patch": "@@ -732,12 +732,13 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 true\n             };\n \n+        let sm = self.tcx.sess.source_map();\n         let (snippet, last_ty) =\n             if let (true, hir::TyKind::TraitObject(..), Ok(snippet), true, Some(last_ty)) = (\n                 // Verify that we're dealing with a return `dyn Trait`\n                 ret_ty.span.overlaps(span),\n                 &ret_ty.kind,\n-                self.tcx.sess.source_map().span_to_snippet(ret_ty.span),\n+                sm.span_to_snippet(ret_ty.span),\n                 // If any of the return types does not conform to the trait, then we can't\n                 // suggest `impl Trait` nor trait objects, it is a type mismatch error.\n                 all_returns_conform_to_trait,\n@@ -775,26 +776,23 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             if is_object_safe {\n                 // Suggest `-> Box<dyn Trait>` and `Box::new(returned_value)`.\n                 // Get all the return values and collect their span and suggestion.\n-                let mut suggestions = visitor\n+                if let Some(mut suggestions) = visitor\n                     .returns\n                     .iter()\n                     .map(|expr| {\n-                        (\n-                            expr.span,\n-                            format!(\n-                                \"Box::new({})\",\n-                                self.tcx.sess.source_map().span_to_snippet(expr.span).unwrap()\n-                            ),\n-                        )\n+                        let snip = sm.span_to_snippet(expr.span).ok()?;\n+                        Some((expr.span, format!(\"Box::new({})\", snip)))\n                     })\n-                    .collect::<Vec<_>>();\n-                // Add the suggestion for the return type.\n-                suggestions.push((ret_ty.span, format!(\"Box<dyn {}>\", trait_obj)));\n-                err.multipart_suggestion(\n-                    \"return a boxed trait object instead\",\n-                    suggestions,\n-                    Applicability::MaybeIncorrect,\n-                );\n+                    .collect::<Option<Vec<_>>>()\n+                {\n+                    // Add the suggestion for the return type.\n+                    suggestions.push((ret_ty.span, format!(\"Box<dyn {}>\", trait_obj)));\n+                    err.multipart_suggestion(\n+                        \"return a boxed trait object instead\",\n+                        suggestions,\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                }\n             } else {\n                 // This is currently not possible to trigger because E0038 takes precedence, but\n                 // leave it in for completeness in case anything changes in an earlier stage."}]}