{"sha": "4ea862f95321ef9d8fa5d8f02f26f9bd1a265484", "node_id": "C_kwDOAAsO6NoAKDRlYTg2MmY5NTMyMWVmOWQ4ZmE1ZDhmMDJmMjZmOWJkMWEyNjU0ODQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-06-10T20:32:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-10T20:32:32Z"}, "message": "Rollup merge of #97941 - CorinJG:error_naming_conventions, r=compiler-errors\n\nnit: Fixed several error_codes/Exxxx.md messages which used UpperCamelCase\u2026\n\n\u2026 instead of snake_case for module names", "tree": {"sha": "583f240bbdf23376d9351b40e18f90a29113ed85", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/583f240bbdf23376d9351b40e18f90a29113ed85"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ea862f95321ef9d8fa5d8f02f26f9bd1a265484", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJio6pgCRBK7hj4Ov3rIwAAWuIIAGgd6QzsTtL/3o/v0/j9Y8gQ\ns8gKaNvQIn6T5tLoXcGSfZyx1eYMk0WXsrTuCt4TJGZjyL2bSqilAl0Y7v8h6zHA\nit5lRFgQRM8AwHyXYcYh+OvD8pvfiBRJ8N7rrXjhLx1M8bMZUfFj11FJvsVFjA0X\nnwrqjUqlhhsluK1InYnEsVgQhwWkXpipLV0SklEdjPi405w7fE5orZJSOWepo2D8\nvyVhKzwQwzxj/rnuoF0hHeyALVVqNu1db4frGGbR9HxPs0Vzj6SXkX075+x+fcbu\nraYmB5lhFyhlKaL4BrKcVrx0ftppl6U9BgQnvLvzVhmlI114dwr1Z/+6zhBizSU=\n=cfrr\n-----END PGP SIGNATURE-----\n", "payload": "tree 583f240bbdf23376d9351b40e18f90a29113ed85\nparent 30a8903821e35c7c7cee7f393917aecaadc92e93\nparent 6227d89d6aad396a1ff5a7a9bf390baa4fad93f1\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1654893152 +0200\ncommitter GitHub <noreply@github.com> 1654893152 +0200\n\nRollup merge of #97941 - CorinJG:error_naming_conventions, r=compiler-errors\n\nnit: Fixed several error_codes/Exxxx.md messages which used UpperCamelCase\u2026\n\n\u2026 instead of snake_case for module names\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ea862f95321ef9d8fa5d8f02f26f9bd1a265484", "html_url": "https://github.com/rust-lang/rust/commit/4ea862f95321ef9d8fa5d8f02f26f9bd1a265484", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ea862f95321ef9d8fa5d8f02f26f9bd1a265484/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30a8903821e35c7c7cee7f393917aecaadc92e93", "url": "https://api.github.com/repos/rust-lang/rust/commits/30a8903821e35c7c7cee7f393917aecaadc92e93", "html_url": "https://github.com/rust-lang/rust/commit/30a8903821e35c7c7cee7f393917aecaadc92e93"}, {"sha": "6227d89d6aad396a1ff5a7a9bf390baa4fad93f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/6227d89d6aad396a1ff5a7a9bf390baa4fad93f1", "html_url": "https://github.com/rust-lang/rust/commit/6227d89d6aad396a1ff5a7a9bf390baa4fad93f1"}], "stats": {"total": 54, "additions": 27, "deletions": 27}, "files": [{"sha": "a12378a206de2252b21c51a56e240691b8687c09", "filename": "compiler/rustc_error_codes/src/error_codes/E0451.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4ea862f95321ef9d8fa5d8f02f26f9bd1a265484/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0451.md", "raw_url": "https://github.com/rust-lang/rust/raw/4ea862f95321ef9d8fa5d8f02f26f9bd1a265484/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0451.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0451.md?ref=4ea862f95321ef9d8fa5d8f02f26f9bd1a265484", "patch": "@@ -3,35 +3,35 @@ A struct constructor with private fields was invoked.\n Erroneous code example:\n \n ```compile_fail,E0451\n-mod Bar {\n+mod bar {\n     pub struct Foo {\n         pub a: isize,\n         b: isize,\n     }\n }\n \n-let f = Bar::Foo{ a: 0, b: 0 }; // error: field `b` of struct `Bar::Foo`\n+let f = bar::Foo{ a: 0, b: 0 }; // error: field `b` of struct `bar::Foo`\n                                 //        is private\n ```\n \n To fix this error, please ensure that all the fields of the struct are public,\n or implement a function for easy instantiation. Examples:\n \n ```\n-mod Bar {\n+mod bar {\n     pub struct Foo {\n         pub a: isize,\n         pub b: isize, // we set `b` field public\n     }\n }\n \n-let f = Bar::Foo{ a: 0, b: 0 }; // ok!\n+let f = bar::Foo{ a: 0, b: 0 }; // ok!\n ```\n \n Or:\n \n ```\n-mod Bar {\n+mod bar {\n     pub struct Foo {\n         pub a: isize,\n         b: isize, // still private\n@@ -44,5 +44,5 @@ mod Bar {\n     }\n }\n \n-let f = Bar::Foo::new(); // ok!\n+let f = bar::Foo::new(); // ok!\n ```"}, {"sha": "4881f61d0bc48301f7d41e2df5b721ee1783002b", "filename": "compiler/rustc_error_codes/src/error_codes/E0574.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4ea862f95321ef9d8fa5d8f02f26f9bd1a265484/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0574.md", "raw_url": "https://github.com/rust-lang/rust/raw/4ea862f95321ef9d8fa5d8f02f26f9bd1a265484/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0574.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0574.md?ref=4ea862f95321ef9d8fa5d8f02f26f9bd1a265484", "patch": "@@ -4,9 +4,9 @@ expected.\n Erroneous code example:\n \n ```compile_fail,E0574\n-mod Mordor {}\n+mod mordor {}\n \n-let sauron = Mordor { x: () }; // error!\n+let sauron = mordor { x: () }; // error!\n \n enum Jak {\n     Daxter { i: isize },\n@@ -19,17 +19,17 @@ match eco {\n ```\n \n In all these errors, a type was expected. For example, in the first error,\n-we tried to instantiate the `Mordor` module, which is impossible. If you want\n+we tried to instantiate the `mordor` module, which is impossible. If you want\n to instantiate a type inside a module, you can do it as follow:\n \n ```\n-mod Mordor {\n+mod mordor {\n     pub struct TheRing {\n         pub x: usize,\n     }\n }\n \n-let sauron = Mordor::TheRing { x: 1 }; // ok!\n+let sauron = mordor::TheRing { x: 1 }; // ok!\n ```\n \n In the second error, we tried to bind the `Jak` enum directly, which is not"}, {"sha": "eba2d3b14175b6825686e9ac18cfd3c36320b597", "filename": "compiler/rustc_error_codes/src/error_codes/E0577.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4ea862f95321ef9d8fa5d8f02f26f9bd1a265484/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0577.md", "raw_url": "https://github.com/rust-lang/rust/raw/4ea862f95321ef9d8fa5d8f02f26f9bd1a265484/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0577.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0577.md?ref=4ea862f95321ef9d8fa5d8f02f26f9bd1a265484", "patch": "@@ -11,13 +11,13 @@ fn main() {}\n ```\n \n `Sea` is not a module, therefore it is invalid to use it in a visibility path.\n-To fix this error we need to ensure `Sea` is a module.\n+To fix this error we need to ensure `sea` is a module.\n \n Please note that the visibility scope can only be applied on ancestors!\n \n ```edition2018\n-pub mod Sea {\n-    pub (in crate::Sea) struct Shark; // ok!\n+pub mod sea {\n+    pub (in crate::sea) struct Shark; // ok!\n }\n \n fn main() {}"}, {"sha": "eb293118acc869c85624fe7112692a067287b5ae", "filename": "compiler/rustc_error_codes/src/error_codes/E0603.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4ea862f95321ef9d8fa5d8f02f26f9bd1a265484/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0603.md", "raw_url": "https://github.com/rust-lang/rust/raw/4ea862f95321ef9d8fa5d8f02f26f9bd1a265484/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0603.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0603.md?ref=4ea862f95321ef9d8fa5d8f02f26f9bd1a265484", "patch": "@@ -3,24 +3,24 @@ A private item was used outside its scope.\n Erroneous code example:\n \n ```compile_fail,E0603\n-mod SomeModule {\n+mod foo {\n     const PRIVATE: u32 = 0x_a_bad_1dea_u32; // This const is private, so we\n                                             // can't use it outside of the\n-                                            // `SomeModule` module.\n+                                            // `foo` module.\n }\n \n-println!(\"const value: {}\", SomeModule::PRIVATE); // error: constant `PRIVATE`\n+println!(\"const value: {}\", foo::PRIVATE); // error: constant `PRIVATE`\n                                                   //        is private\n ```\n \n In order to fix this error, you need to make the item public by using the `pub`\n keyword. Example:\n \n ```\n-mod SomeModule {\n+mod foo {\n     pub const PRIVATE: u32 = 0x_a_bad_1dea_u32; // We set it public by using the\n                                                 // `pub` keyword.\n }\n \n-println!(\"const value: {}\", SomeModule::PRIVATE); // ok!\n+println!(\"const value: {}\", foo::PRIVATE); // ok!\n ```"}, {"sha": "e10c1639dd38a5690e410e61e79c299999f04a7c", "filename": "compiler/rustc_error_codes/src/error_codes/E0742.md", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4ea862f95321ef9d8fa5d8f02f26f9bd1a265484/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0742.md", "raw_url": "https://github.com/rust-lang/rust/raw/4ea862f95321ef9d8fa5d8f02f26f9bd1a265484/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0742.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0742.md?ref=4ea862f95321ef9d8fa5d8f02f26f9bd1a265484", "patch": "@@ -4,18 +4,18 @@ item.\n Erroneous code example:\n \n ```compile_fail,E0742,edition2018\n-pub mod Sea {}\n+pub mod sea {}\n \n-pub (in crate::Sea) struct Shark; // error!\n+pub (in crate::sea) struct Shark; // error!\n \n fn main() {}\n ```\n \n-To fix this error, we need to move the `Shark` struct inside the `Sea` module:\n+To fix this error, we need to move the `Shark` struct inside the `sea` module:\n \n ```edition2018\n-pub mod Sea {\n-    pub (in crate::Sea) struct Shark; // ok!\n+pub mod sea {\n+    pub (in crate::sea) struct Shark; // ok!\n }\n \n fn main() {}\n@@ -25,9 +25,9 @@ Of course, you can do it as long as the module you're referring to is an\n ancestor:\n \n ```edition2018\n-pub mod Earth {\n-    pub mod Sea {\n-        pub (in crate::Earth) struct Shark; // ok!\n+pub mod earth {\n+    pub mod sea {\n+        pub (in crate::earth) struct Shark; // ok!\n     }\n }\n "}]}