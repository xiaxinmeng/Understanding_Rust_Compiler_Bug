{"sha": "781de34222a7606932a0485670537c1413616246", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4MWRlMzQyMjJhNzYwNjkzMmEwNDg1NjcwNTM3YzE0MTM2MTYyNDY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-13T15:54:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-13T15:54:54Z"}, "message": "Auto merge of #6859 - magurotuna:if_then_some_else_none, r=giraffate\n\nImplement new lint: if_then_some_else_none\n\nResolves #6760\n\nchangelog: Added a new lint: `if_then_some_else_none`", "tree": {"sha": "e80f574992425ded0b0693669f24207ccfdc2253", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e80f574992425ded0b0693669f24207ccfdc2253"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/781de34222a7606932a0485670537c1413616246", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/781de34222a7606932a0485670537c1413616246", "html_url": "https://github.com/rust-lang/rust/commit/781de34222a7606932a0485670537c1413616246", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/781de34222a7606932a0485670537c1413616246/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "92b96778648c96585c720942d5c53703724e3acb", "url": "https://api.github.com/repos/rust-lang/rust/commits/92b96778648c96585c720942d5c53703724e3acb", "html_url": "https://github.com/rust-lang/rust/commit/92b96778648c96585c720942d5c53703724e3acb"}, {"sha": "11d2af7e9694e8e63000e33f77d4926e936e3822", "url": "https://api.github.com/repos/rust-lang/rust/commits/11d2af7e9694e8e63000e33f77d4926e936e3822", "html_url": "https://github.com/rust-lang/rust/commit/11d2af7e9694e8e63000e33f77d4926e936e3822"}], "stats": {"total": 285, "additions": 285, "deletions": 0}, "files": [{"sha": "f7916511edfe7a7e662962ae971b68cd2a531af1", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/781de34222a7606932a0485670537c1413616246/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/781de34222a7606932a0485670537c1413616246/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=781de34222a7606932a0485670537c1413616246", "patch": "@@ -2103,6 +2103,7 @@ Released 2018-09-13\n [`if_let_some_result`]: https://rust-lang.github.io/rust-clippy/master/index.html#if_let_some_result\n [`if_not_else`]: https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else\n [`if_same_then_else`]: https://rust-lang.github.io/rust-clippy/master/index.html#if_same_then_else\n+[`if_then_some_else_none`]: https://rust-lang.github.io/rust-clippy/master/index.html#if_then_some_else_none\n [`ifs_same_cond`]: https://rust-lang.github.io/rust-clippy/master/index.html#ifs_same_cond\n [`implicit_clone`]: https://rust-lang.github.io/rust-clippy/master/index.html#implicit_clone\n [`implicit_hasher`]: https://rust-lang.github.io/rust-clippy/master/index.html#implicit_hasher"}, {"sha": "a527f51b1fdc79de6fbd48cccef29852b8ad69d8", "filename": "clippy_lints/src/if_then_some_else_none.rs", "status": "added", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/781de34222a7606932a0485670537c1413616246/clippy_lints%2Fsrc%2Fif_then_some_else_none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/781de34222a7606932a0485670537c1413616246/clippy_lints%2Fsrc%2Fif_then_some_else_none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fif_then_some_else_none.rs?ref=781de34222a7606932a0485670537c1413616246", "patch": "@@ -0,0 +1,115 @@\n+use crate::utils;\n+use if_chain::if_chain;\n+use rustc_hir::{Expr, ExprKind};\n+use rustc_lint::{LateContext, LateLintPass, LintContext};\n+use rustc_middle::lint::in_external_macro;\n+use rustc_semver::RustcVersion;\n+use rustc_session::{declare_tool_lint, impl_lint_pass};\n+\n+const IF_THEN_SOME_ELSE_NONE_MSRV: RustcVersion = RustcVersion::new(1, 50, 0);\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Checks for if-else that could be written to `bool::then`.\n+    ///\n+    /// **Why is this bad?** Looks a little redundant. Using `bool::then` helps it have less lines of code.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust\n+    /// # let v = vec![0];\n+    /// let a = if v.is_empty() {\n+    ///     println!(\"true!\");\n+    ///     Some(42)\n+    /// } else {\n+    ///     None\n+    /// };\n+    /// ```\n+    ///\n+    /// Could be written:\n+    ///\n+    /// ```rust\n+    /// # let v = vec![0];\n+    /// let a = v.is_empty().then(|| {\n+    ///     println!(\"true!\");\n+    ///     42\n+    /// });\n+    /// ```\n+    pub IF_THEN_SOME_ELSE_NONE,\n+    restriction,\n+    \"Finds if-else that could be written using `bool::then`\"\n+}\n+\n+pub struct IfThenSomeElseNone {\n+    msrv: Option<RustcVersion>,\n+}\n+\n+impl IfThenSomeElseNone {\n+    #[must_use]\n+    pub fn new(msrv: Option<RustcVersion>) -> Self {\n+        Self { msrv }\n+    }\n+}\n+\n+impl_lint_pass!(IfThenSomeElseNone => [IF_THEN_SOME_ELSE_NONE]);\n+\n+impl LateLintPass<'_> for IfThenSomeElseNone {\n+    fn check_expr(&mut self, cx: &LateContext<'_>, expr: &'tcx Expr<'_>) {\n+        if !utils::meets_msrv(self.msrv.as_ref(), &IF_THEN_SOME_ELSE_NONE_MSRV) {\n+            return;\n+        }\n+\n+        if in_external_macro(cx.sess(), expr.span) {\n+            return;\n+        }\n+\n+        // We only care about the top-most `if` in the chain\n+        if utils::parent_node_is_if_expr(expr, cx) {\n+            return;\n+        }\n+\n+        if_chain! {\n+            if let ExprKind::If(ref cond, ref then, Some(ref els)) = expr.kind;\n+            if let ExprKind::Block(ref then_block, _) = then.kind;\n+            if let Some(ref then_expr) = then_block.expr;\n+            if let ExprKind::Call(ref then_call, [then_arg]) = then_expr.kind;\n+            if let ExprKind::Path(ref then_call_qpath) = then_call.kind;\n+            if utils::match_qpath(then_call_qpath, &utils::paths::OPTION_SOME);\n+            if let ExprKind::Block(ref els_block, _) = els.kind;\n+            if els_block.stmts.is_empty();\n+            if let Some(ref els_expr) = els_block.expr;\n+            if let ExprKind::Path(ref els_call_qpath) = els_expr.kind;\n+            if utils::match_qpath(els_call_qpath, &utils::paths::OPTION_NONE);\n+            then {\n+                let cond_snip = utils::snippet_with_macro_callsite(cx, cond.span, \"[condition]\");\n+                let cond_snip = if matches!(cond.kind, ExprKind::Unary(_, _) | ExprKind::Binary(_, _, _)) {\n+                    format!(\"({})\", cond_snip)\n+                } else {\n+                    cond_snip.into_owned()\n+                };\n+                let arg_snip = utils::snippet_with_macro_callsite(cx, then_arg.span, \"\");\n+                let closure_body = if then_block.stmts.is_empty() {\n+                    arg_snip.into_owned()\n+                } else {\n+                    format!(\"{{ /* snippet */ {} }}\", arg_snip)\n+                };\n+                let help = format!(\n+                    \"consider using `bool::then` like: `{}.then(|| {})`\",\n+                    cond_snip,\n+                    closure_body,\n+                );\n+                utils::span_lint_and_help(\n+                    cx,\n+                    IF_THEN_SOME_ELSE_NONE,\n+                    expr.span,\n+                    \"this could be simplified with `bool::then`\",\n+                    None,\n+                    &help,\n+                );\n+            }\n+        }\n+    }\n+\n+    extract_msrv_attr!(LateContext);\n+}"}, {"sha": "52c342d580e247a85dd454227acbee70abb05b6d", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/781de34222a7606932a0485670537c1413616246/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/781de34222a7606932a0485670537c1413616246/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=781de34222a7606932a0485670537c1413616246", "patch": "@@ -231,6 +231,7 @@ mod identity_op;\n mod if_let_mutex;\n mod if_let_some_result;\n mod if_not_else;\n+mod if_then_some_else_none;\n mod implicit_return;\n mod implicit_saturating_sub;\n mod inconsistent_struct_constructor;\n@@ -680,6 +681,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &if_let_mutex::IF_LET_MUTEX,\n         &if_let_some_result::IF_LET_SOME_RESULT,\n         &if_not_else::IF_NOT_ELSE,\n+        &if_then_some_else_none::IF_THEN_SOME_ELSE_NONE,\n         &implicit_return::IMPLICIT_RETURN,\n         &implicit_saturating_sub::IMPLICIT_SATURATING_SUB,\n         &inconsistent_struct_constructor::INCONSISTENT_STRUCT_CONSTRUCTOR,\n@@ -1280,6 +1282,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box redundant_slicing::RedundantSlicing);\n     store.register_late_pass(|| box from_str_radix_10::FromStrRadix10);\n     store.register_late_pass(|| box manual_map::ManualMap);\n+    store.register_late_pass(move || box if_then_some_else_none::IfThenSomeElseNone::new(msrv));\n \n     store.register_group(true, \"clippy::restriction\", Some(\"clippy_restriction\"), vec![\n         LintId::of(&arithmetic::FLOAT_ARITHMETIC),\n@@ -1295,6 +1298,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&exhaustive_items::EXHAUSTIVE_STRUCTS),\n         LintId::of(&exit::EXIT),\n         LintId::of(&float_literal::LOSSY_FLOAT_LITERAL),\n+        LintId::of(&if_then_some_else_none::IF_THEN_SOME_ELSE_NONE),\n         LintId::of(&implicit_return::IMPLICIT_RETURN),\n         LintId::of(&indexing_slicing::INDEXING_SLICING),\n         LintId::of(&inherent_impl::MULTIPLE_INHERENT_IMPL),"}, {"sha": "54789bf93209dff66681103f80796c148d295610", "filename": "tests/ui/if_then_some_else_none.rs", "status": "added", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/781de34222a7606932a0485670537c1413616246/tests%2Fui%2Fif_then_some_else_none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/781de34222a7606932a0485670537c1413616246/tests%2Fui%2Fif_then_some_else_none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_then_some_else_none.rs?ref=781de34222a7606932a0485670537c1413616246", "patch": "@@ -0,0 +1,104 @@\n+#![warn(clippy::if_then_some_else_none)]\n+#![feature(custom_inner_attributes)]\n+\n+fn main() {\n+    // Should issue an error.\n+    let _ = if foo() {\n+        println!(\"true!\");\n+        Some(\"foo\")\n+    } else {\n+        None\n+    };\n+\n+    // Should issue an error when macros are used.\n+    let _ = if matches!(true, true) {\n+        println!(\"true!\");\n+        Some(matches!(true, false))\n+    } else {\n+        None\n+    };\n+\n+    // Should issue an error. Binary expression `o < 32` should be parenthesized.\n+    let x = Some(5);\n+    let _ = x.and_then(|o| if o < 32 { Some(o) } else { None });\n+\n+    // Should issue an error. Unary expression `!x` should be parenthesized.\n+    let x = true;\n+    let _ = if !x { Some(0) } else { None };\n+\n+    // Should not issue an error since the `else` block has a statement besides `None`.\n+    let _ = if foo() {\n+        println!(\"true!\");\n+        Some(\"foo\")\n+    } else {\n+        eprintln!(\"false...\");\n+        None\n+    };\n+\n+    // Should not issue an error since there are more than 2 blocks in the if-else chain.\n+    let _ = if foo() {\n+        println!(\"foo true!\");\n+        Some(\"foo\")\n+    } else if bar() {\n+        println!(\"bar true!\");\n+        Some(\"bar\")\n+    } else {\n+        None\n+    };\n+\n+    let _ = if foo() {\n+        println!(\"foo true!\");\n+        Some(\"foo\")\n+    } else {\n+        bar().then(|| {\n+            println!(\"bar true!\");\n+            \"bar\"\n+        })\n+    };\n+\n+    // Should not issue an error since the `then` block has `None`, not `Some`.\n+    let _ = if foo() { None } else { Some(\"foo is false\") };\n+\n+    // Should not issue an error since the `else` block doesn't use `None` directly.\n+    let _ = if foo() { Some(\"foo is true\") } else { into_none() };\n+\n+    // Should not issue an error since the `then` block doesn't use `Some` directly.\n+    let _ = if foo() { into_some(\"foo\") } else { None };\n+}\n+\n+fn _msrv_1_49() {\n+    #![clippy::msrv = \"1.49\"]\n+    // `bool::then` was stabilized in 1.50. Do not lint this\n+    let _ = if foo() {\n+        println!(\"true!\");\n+        Some(149)\n+    } else {\n+        None\n+    };\n+}\n+\n+fn _msrv_1_50() {\n+    #![clippy::msrv = \"1.50\"]\n+    let _ = if foo() {\n+        println!(\"true!\");\n+        Some(150)\n+    } else {\n+        None\n+    };\n+}\n+\n+fn foo() -> bool {\n+    unimplemented!()\n+}\n+\n+fn bar() -> bool {\n+    unimplemented!()\n+}\n+\n+fn into_some<T>(v: T) -> Option<T> {\n+    Some(v)\n+}\n+\n+fn into_none<T>() -> Option<T> {\n+    None\n+}"}, {"sha": "8cb22d569f4cc90bca59bf68e2971bb5e8415458", "filename": "tests/ui/if_then_some_else_none.stderr", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/781de34222a7606932a0485670537c1413616246/tests%2Fui%2Fif_then_some_else_none.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/781de34222a7606932a0485670537c1413616246/tests%2Fui%2Fif_then_some_else_none.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_then_some_else_none.stderr?ref=781de34222a7606932a0485670537c1413616246", "patch": "@@ -0,0 +1,61 @@\n+error: this could be simplified with `bool::then`\n+  --> $DIR/if_then_some_else_none.rs:6:13\n+   |\n+LL |       let _ = if foo() {\n+   |  _____________^\n+LL | |         println!(\"true!\");\n+LL | |         Some(\"foo\")\n+LL | |     } else {\n+LL | |         None\n+LL | |     };\n+   | |_____^\n+   |\n+   = note: `-D clippy::if-then-some-else-none` implied by `-D warnings`\n+   = help: consider using `bool::then` like: `foo().then(|| { /* snippet */ \"foo\" })`\n+\n+error: this could be simplified with `bool::then`\n+  --> $DIR/if_then_some_else_none.rs:14:13\n+   |\n+LL |       let _ = if matches!(true, true) {\n+   |  _____________^\n+LL | |         println!(\"true!\");\n+LL | |         Some(matches!(true, false))\n+LL | |     } else {\n+LL | |         None\n+LL | |     };\n+   | |_____^\n+   |\n+   = help: consider using `bool::then` like: `matches!(true, true).then(|| { /* snippet */ matches!(true, false) })`\n+\n+error: this could be simplified with `bool::then`\n+  --> $DIR/if_then_some_else_none.rs:23:28\n+   |\n+LL |     let _ = x.and_then(|o| if o < 32 { Some(o) } else { None });\n+   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using `bool::then` like: `(o < 32).then(|| o)`\n+\n+error: this could be simplified with `bool::then`\n+  --> $DIR/if_then_some_else_none.rs:27:13\n+   |\n+LL |     let _ = if !x { Some(0) } else { None };\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using `bool::then` like: `(!x).then(|| 0)`\n+\n+error: this could be simplified with `bool::then`\n+  --> $DIR/if_then_some_else_none.rs:82:13\n+   |\n+LL |       let _ = if foo() {\n+   |  _____________^\n+LL | |         println!(\"true!\");\n+LL | |         Some(150)\n+LL | |     } else {\n+LL | |         None\n+LL | |     };\n+   | |_____^\n+   |\n+   = help: consider using `bool::then` like: `foo().then(|| { /* snippet */ 150 })`\n+\n+error: aborting due to 5 previous errors\n+"}]}