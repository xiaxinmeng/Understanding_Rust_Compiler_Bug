{"sha": "a7f0ecf5626aefc3a269f32d70316654f5b4773f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3ZjBlY2Y1NjI2YWVmYzNhMjY5ZjMyZDcwMzE2NjU0ZjViNDc3M2Y=", "commit": {"author": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2014-01-31T00:10:07Z"}, "committer": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2014-02-01T23:24:44Z"}, "message": "impl Eq for CString", "tree": {"sha": "58f43bb92ab8b4d3a313b1b37772c6d03ebc5d76", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/58f43bb92ab8b4d3a313b1b37772c6d03ebc5d76"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a7f0ecf5626aefc3a269f32d70316654f5b4773f", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a7f0ecf5626aefc3a269f32d70316654f5b4773f", "html_url": "https://github.com/rust-lang/rust/commit/a7f0ecf5626aefc3a269f32d70316654f5b4773f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a7f0ecf5626aefc3a269f32d70316654f5b4773f/comments", "author": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "committer": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73024e4b858e6c2083f40e8c987acedc22e9672b", "url": "https://api.github.com/repos/rust-lang/rust/commits/73024e4b858e6c2083f40e8c987acedc22e9672b", "html_url": "https://github.com/rust-lang/rust/commit/73024e4b858e6c2083f40e8c987acedc22e9672b"}], "stats": {"total": 32, "additions": 28, "deletions": 4}, "files": [{"sha": "7e79ad97df08355b892d72536ead372e65635fc7", "filename": "src/libstd/c_str.rs", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/a7f0ecf5626aefc3a269f32d70316654f5b4773f/src%2Flibstd%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7f0ecf5626aefc3a269f32d70316654f5b4773f/src%2Flibstd%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fc_str.rs?ref=a7f0ecf5626aefc3a269f32d70316654f5b4773f", "patch": "@@ -68,6 +68,7 @@ use iter::{Iterator, range};\n use libc;\n use kinds::marker;\n use ops::Drop;\n+use cmp::Eq;\n use clone::Clone;\n use option::{Option, Some, None};\n use ptr::RawPtr;\n@@ -109,13 +110,28 @@ impl Clone for CString {\n         if self.buf.is_null() {\n             CString { buf: self.buf, owns_buffer_: self.owns_buffer_ }\n         } else {\n-            let buf = unsafe { malloc_raw(self.len()) } as *mut libc::c_char;\n-            unsafe { ptr::copy_nonoverlapping_memory(buf, self.buf, self.len()); }\n+            let len = self.len() + 1;\n+            let buf = unsafe { malloc_raw(len) } as *mut libc::c_char;\n+            unsafe { ptr::copy_nonoverlapping_memory(buf, self.buf, len); }\n             CString { buf: buf as *libc::c_char, owns_buffer_: true }\n         }\n     }\n }\n \n+impl Eq for CString {\n+    fn eq(&self, other: &CString) -> bool {\n+        if self.buf as uint == other.buf as uint {\n+            true\n+        } else if self.buf.is_null() || other.buf.is_null() {\n+            false\n+        } else {\n+            unsafe {\n+                libc::strcmp(self.buf, other.buf) == 0\n+            }\n+        }\n+    }\n+}\n+\n impl CString {\n     /// Create a C String from a pointer.\n     pub unsafe fn new(buf: *libc::c_char, owns_buffer: bool) -> CString {\n@@ -615,8 +631,9 @@ mod tests {\n \n     #[test]\n     fn test_clone() {\n-        let c_str = \"hello\".to_c_str();\n-        assert!(c_str == c_str.clone());\n+        let a = \"hello\".to_c_str();\n+        let b = a.clone();\n+        assert!(a == b);\n     }\n \n     #[test]\n@@ -642,6 +659,13 @@ mod tests {\n         // force a copy, reading the memory\n         c_.as_bytes().to_owned();\n     }\n+\n+    #[test]\n+    fn test_clone_eq_null() {\n+        let x = unsafe { CString::new(ptr::null(), false) };\n+        let y = x.clone();\n+        assert!(x == y);\n+    }\n }\n \n #[cfg(test)]"}]}