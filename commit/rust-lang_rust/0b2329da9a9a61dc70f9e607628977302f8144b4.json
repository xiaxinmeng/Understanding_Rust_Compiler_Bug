{"sha": "0b2329da9a9a61dc70f9e607628977302f8144b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiMjMyOWRhOWE5YTYxZGM3MGY5ZTYwNzYyODk3NzMwMmY4MTQ0YjQ=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-10T09:31:03Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-10T09:31:03Z"}, "message": "also make panic_fmt track_caller", "tree": {"sha": "ff8c5ad06b6b390a4e486128ea75a44e1828f826", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff8c5ad06b6b390a4e486128ea75a44e1828f826"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b2329da9a9a61dc70f9e607628977302f8144b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b2329da9a9a61dc70f9e607628977302f8144b4", "html_url": "https://github.com/rust-lang/rust/commit/0b2329da9a9a61dc70f9e607628977302f8144b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b2329da9a9a61dc70f9e607628977302f8144b4/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f34e0664a1fa63f89f2257dba7d0d13445f58c02", "url": "https://api.github.com/repos/rust-lang/rust/commits/f34e0664a1fa63f89f2257dba7d0d13445f58c02", "html_url": "https://github.com/rust-lang/rust/commit/f34e0664a1fa63f89f2257dba7d0d13445f58c02"}], "stats": {"total": 43, "additions": 36, "deletions": 7}, "files": [{"sha": "04af5b5f7682800cd5694bfb6a9eb58e715c1b14", "filename": "src/libcore/macros/mod.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/0b2329da9a9a61dc70f9e607628977302f8144b4/src%2Flibcore%2Fmacros%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b2329da9a9a61dc70f9e607628977302f8144b4/src%2Flibcore%2Fmacros%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros%2Fmod.rs?ref=0b2329da9a9a61dc70f9e607628977302f8144b4", "patch": "@@ -1,3 +1,4 @@\n+#[cfg(bootstrap)]\n #[doc(include = \"panic.md\")]\n #[macro_export]\n #[allow_internal_unstable(core_panic, track_caller)]\n@@ -20,6 +21,26 @@ macro_rules! panic {\n     );\n }\n \n+#[cfg(not(bootstrap))]\n+#[doc(include = \"panic.md\")]\n+#[macro_export]\n+#[allow_internal_unstable(core_panic, track_caller)]\n+#[stable(feature = \"core\", since = \"1.6.0\")]\n+macro_rules! panic {\n+    () => (\n+        $crate::panic!(\"explicit panic\")\n+    );\n+    ($msg:expr) => (\n+        $crate::panicking::panic($msg)\n+    );\n+    ($msg:expr,) => (\n+        $crate::panic!($msg)\n+    );\n+    ($fmt:expr, $($arg:tt)+) => (\n+        $crate::panicking::panic_fmt($crate::format_args!($fmt, $($arg)+))\n+    );\n+}\n+\n /// Asserts that two expressions are equal to each other (using [`PartialEq`]).\n ///\n /// On panic, this macro will print the values of the expressions with their"}, {"sha": "3587f3f0ebf56c738feb4be9a8db8327052a6424", "filename": "src/libcore/panicking.rs", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0b2329da9a9a61dc70f9e607628977302f8144b4/src%2Flibcore%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b2329da9a9a61dc70f9e607628977302f8144b4/src%2Flibcore%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpanicking.rs?ref=0b2329da9a9a61dc70f9e607628977302f8144b4", "patch": "@@ -32,6 +32,7 @@\n use crate::fmt;\n use crate::panic::{Location, PanicInfo};\n \n+/// The underlying implementation of libcore's `panic!` macro when no formatting is used.\n #[cold]\n // never inline unless panic_immediate_abort to avoid code\n // bloat at the call sites as much as possible\n@@ -49,7 +50,10 @@ pub fn panic(expr: &str) -> ! {\n     // truncation and padding (even though none is used here). Using\n     // Arguments::new_v1 may allow the compiler to omit Formatter::pad from the\n     // output binary, saving up to a few kilobytes.\n-    panic_fmt(fmt::Arguments::new_v1(&[expr], &[]), Location::caller())\n+    #[cfg(not(bootstrap))]\n+    panic_fmt(fmt::Arguments::new_v1(&[expr], &[]));\n+    #[cfg(bootstrap)]\n+    panic_fmt(fmt::Arguments::new_v1(&[expr], &[]), Location::caller());\n }\n \n #[cfg(not(bootstrap))]\n@@ -62,13 +66,11 @@ fn panic_bounds_check(index: usize, len: usize) -> ! {\n         unsafe { super::intrinsics::abort() }\n     }\n \n-    panic_fmt(\n-        format_args!(\"index out of bounds: the len is {} but the index is {}\", len, index),\n-        Location::caller(),\n-    )\n+    panic!(\"index out of bounds: the len is {} but the index is {}\", len, index)\n }\n \n-// For bootstrap, we need a variant with the old argument order.\n+// For bootstrap, we need a variant with the old argument order, and a corresponding\n+// `panic_fmt`.\n #[cfg(bootstrap)]\n #[cold]\n #[cfg_attr(not(feature = \"panic_immediate_abort\"), inline(never))]\n@@ -84,10 +86,12 @@ fn panic_bounds_check(location: &Location<'_>, index: usize, len: usize) -> ! {\n     )\n }\n \n+/// The underlying implementation of libcore's `panic!` macro when formatting is used.\n #[cold]\n #[cfg_attr(not(feature = \"panic_immediate_abort\"), inline(never))]\n #[cfg_attr(feature = \"panic_immediate_abort\", inline)]\n-pub fn panic_fmt(fmt: fmt::Arguments<'_>, location: &Location<'_>) -> ! {\n+#[cfg_attr(not(bootstrap), track_caller)]\n+pub fn panic_fmt(fmt: fmt::Arguments<'_>, #[cfg(bootstrap)] location: &Location<'_>) -> ! {\n     if cfg!(feature = \"panic_immediate_abort\") {\n         unsafe { super::intrinsics::abort() }\n     }\n@@ -99,6 +103,10 @@ pub fn panic_fmt(fmt: fmt::Arguments<'_>, location: &Location<'_>) -> ! {\n         fn panic_impl(pi: &PanicInfo<'_>) -> !;\n     }\n \n+    #[cfg(bootstrap)]\n     let pi = PanicInfo::internal_constructor(Some(&fmt), location);\n+    #[cfg(not(bootstrap))]\n+    let pi = PanicInfo::internal_constructor(Some(&fmt), Location::caller());\n+\n     unsafe { panic_impl(&pi) }\n }"}]}