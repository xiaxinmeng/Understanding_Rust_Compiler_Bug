{"sha": "dfcd1c632897779c30d1fee9a6d3c8822bab4d4f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmY2QxYzYzMjg5Nzc3OWMzMGQxZmVlOWE2ZDNjODgyMmJhYjRkNGY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2019-05-31T18:30:06Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2019-07-02T16:15:19Z"}, "message": "make `dup_vec` optional", "tree": {"sha": "91fa0330e34f6f7506067afdd3bb75b1b78f4194", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91fa0330e34f6f7506067afdd3bb75b1b78f4194"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dfcd1c632897779c30d1fee9a6d3c8822bab4d4f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dfcd1c632897779c30d1fee9a6d3c8822bab4d4f", "html_url": "https://github.com/rust-lang/rust/commit/dfcd1c632897779c30d1fee9a6d3c8822bab4d4f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dfcd1c632897779c30d1fee9a6d3c8822bab4d4f/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "979f566603bad15fadb48b9ce4d9f87632cbf849", "url": "https://api.github.com/repos/rust-lang/rust/commits/979f566603bad15fadb48b9ce4d9f87632cbf849", "html_url": "https://github.com/rust-lang/rust/commit/979f566603bad15fadb48b9ce4d9f87632cbf849"}], "stats": {"total": 33, "additions": 20, "deletions": 13}, "files": [{"sha": "1f49cb950082d14f7ac51173cd8d272b2f0df51e", "filename": "src/librustc/infer/lexical_region_resolve/mod.rs", "status": "modified", "additions": 20, "deletions": 13, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/dfcd1c632897779c30d1fee9a6d3c8822bab4d4f/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfcd1c632897779c30d1fee9a6d3c8822bab4d4f/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs?ref=dfcd1c632897779c30d1fee9a6d3c8822bab4d4f", "patch": "@@ -500,7 +500,12 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n                     that is not used is not a problem, so if this rule\n                     starts to create problems we'll have to revisit\n                     this portion of the code and think hard about it. =) */\n-                    self.collect_error_for_expanding_node(graph, &mut dup_vec, node_vid, errors);\n+                    self.collect_error_for_expanding_node(\n+                        graph,\n+                        &mut dup_vec,\n+                        node_vid,\n+                        errors,\n+                    );\n                 }\n             }\n         }\n@@ -558,9 +563,9 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n         // Errors in expanding nodes result from a lower-bound that is\n         // not contained by an upper-bound.\n         let (mut lower_bounds, lower_dup) =\n-            self.collect_concrete_regions(graph, node_idx, INCOMING, dup_vec);\n+            self.collect_concrete_regions(graph, node_idx, INCOMING, Some(dup_vec));\n         let (mut upper_bounds, upper_dup) =\n-            self.collect_concrete_regions(graph, node_idx, OUTGOING, dup_vec);\n+            self.collect_concrete_regions(graph, node_idx, OUTGOING, Some(dup_vec));\n \n         if lower_dup || upper_dup {\n             return;\n@@ -630,7 +635,7 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n         graph: &RegionGraph<'tcx>,\n         orig_node_idx: RegionVid,\n         dir: Direction,\n-        dup_vec: &mut [u32],\n+        mut dup_vec: Option<&mut [u32]>,\n     ) -> (Vec<RegionAndOrigin<'tcx>>, bool) {\n         struct WalkState<'tcx> {\n             set: FxHashSet<RegionVid>,\n@@ -654,16 +659,18 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n             let node_idx = state.stack.pop().unwrap();\n \n             // check whether we've visited this node on some previous walk\n-            if dup_vec[node_idx.index() as usize] == u32::MAX {\n-                dup_vec[node_idx.index() as usize] = orig_node_idx.index() as u32;\n-            } else if dup_vec[node_idx.index() as usize] != orig_node_idx.index() as u32 {\n-                state.dup_found = true;\n-            }\n+            if let Some(dup_vec) = &mut dup_vec {\n+                if dup_vec[node_idx.index() as usize] == u32::MAX {\n+                    dup_vec[node_idx.index() as usize] = orig_node_idx.index() as u32;\n+                } else if dup_vec[node_idx.index() as usize] != orig_node_idx.index() as u32 {\n+                    state.dup_found = true;\n+                }\n \n-            debug!(\n-                \"collect_concrete_regions(orig_node_idx={:?}, node_idx={:?})\",\n-                orig_node_idx, node_idx\n-            );\n+                debug!(\n+                    \"collect_concrete_regions(orig_node_idx={:?}, node_idx={:?})\",\n+                    orig_node_idx, node_idx\n+                );\n+            }\n \n             process_edges(&self.data, &mut state, graph, node_idx, dir);\n         }"}]}