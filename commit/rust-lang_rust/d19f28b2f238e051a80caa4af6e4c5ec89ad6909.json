{"sha": "d19f28b2f238e051a80caa4af6e4c5ec89ad6909", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxOWYyOGIyZjIzOGUwNTFhODBjYWE0YWY2ZTRjNWVjODlhZDY5MDk=", "commit": {"author": {"name": "Flavio Percoco Premoli", "email": "flaper87@gmail.com", "date": "2015-01-24T09:42:39Z"}, "committer": {"name": "Flavio Percoco Premoli", "email": "flaper87@gmail.com", "date": "2015-01-24T09:42:39Z"}, "message": "Rollup merge of #21108 - steveklabnik:gh16969, r=alexcrichton\n\nFixes #16969", "tree": {"sha": "c134e4ff105f44b3a644d7e5c1ff07a81d6c5a17", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c134e4ff105f44b3a644d7e5c1ff07a81d6c5a17"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d19f28b2f238e051a80caa4af6e4c5ec89ad6909", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d19f28b2f238e051a80caa4af6e4c5ec89ad6909", "html_url": "https://github.com/rust-lang/rust/commit/d19f28b2f238e051a80caa4af6e4c5ec89ad6909", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d19f28b2f238e051a80caa4af6e4c5ec89ad6909/comments", "author": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5c1f166a8282072089de2ad62a5b2427bd2bebf", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5c1f166a8282072089de2ad62a5b2427bd2bebf", "html_url": "https://github.com/rust-lang/rust/commit/e5c1f166a8282072089de2ad62a5b2427bd2bebf"}, {"sha": "aca793966a84dfec785c3e300e62588dad35dfeb", "url": "https://api.github.com/repos/rust-lang/rust/commits/aca793966a84dfec785c3e300e62588dad35dfeb", "html_url": "https://github.com/rust-lang/rust/commit/aca793966a84dfec785c3e300e62588dad35dfeb"}], "stats": {"total": 114, "additions": 112, "deletions": 2}, "files": [{"sha": "e6570c2ee74c8d649faaf8afec41cf76358d30ba", "filename": "src/doc/trpl/method-syntax.md", "status": "modified", "additions": 112, "deletions": 2, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/d19f28b2f238e051a80caa4af6e4c5ec89ad6909/src%2Fdoc%2Ftrpl%2Fmethod-syntax.md", "raw_url": "https://github.com/rust-lang/rust/raw/d19f28b2f238e051a80caa4af6e4c5ec89ad6909/src%2Fdoc%2Ftrpl%2Fmethod-syntax.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fmethod-syntax.md?ref=d19f28b2f238e051a80caa4af6e4c5ec89ad6909", "patch": "@@ -18,6 +18,8 @@ x.foo().bar().baz();\n Luckily, as you may have guessed with the leading question, you can! Rust provides\n the ability to use this *method call syntax* via the `impl` keyword.\n \n+## Method calls\n+\n Here's how it works:\n \n ```{rust}\n@@ -56,11 +58,56 @@ other parameter. Because we know it's a `Circle`, we can access the `radius`\n just like we would with any other struct. An import of \u03c0 and some\n multiplications later, and we have our area.\n \n+## Chaining method calls\n+\n+So, now we know how to call a method, such as `foo.bar()`. But what about our\n+original example, `foo.bar().baz()`? This is called 'method chaining', and we\n+can do it by returning `self`.\n+\n+```\n+struct Circle {\n+    x: f64,\n+    y: f64,\n+    radius: f64,\n+}\n+\n+impl Circle {\n+    fn area(&self) -> f64 {\n+        std::f64::consts::PI * (self.radius * self.radius)\n+    }\n+\n+    fn grow(&self) -> Circle {\n+        Circle { x: self.x, y: self.y, radius: (self.radius * 10.0) }\n+    }\n+}\n+\n+fn main() {\n+    let c = Circle { x: 0.0, y: 0.0, radius: 2.0 };\n+    println!(\"{}\", c.area());\n+\n+    let d = c.grow().area();\n+    println!(\"{}\", d);\n+}\n+```\n+\n+Check the return type:\n+\n+```\n+# struct Circle;\n+# impl Circle {\n+fn grow(&self) -> Circle {\n+# Circle } }\n+```\n+\n+We just say we're returning a `Circle`. With this, we can grow a new circle\n+that's twice as big as the old one.\n+\n+## Static methods\n+\n You can also define methods that do not take a `self` parameter. Here's a\n pattern that's very common in Rust code:\n \n-```{rust}\n-# #![allow(non_shorthand_field_patterns)]\n+```\n struct Circle {\n     x: f64,\n     y: f64,\n@@ -86,3 +133,66 @@ This *static method* builds a new `Circle` for us. Note that static methods\n are called with the `Struct::method()` syntax, rather than the `ref.method()`\n syntax.\n \n+## Builder Pattern\n+\n+Let's say that we want our users to be able to create Circles, but we will\n+allow them to only set the properties they care about. Otherwise, the `x`\n+and `y` attributes will be `0.0`, and the `radius` will be `1.0`. Rust doesn't\n+have method overloading, named arguments, or variable arguments. We employ\n+the builder pattern instead. It looks like this:\n+\n+```\n+struct Circle {\n+    x: f64,\n+    y: f64,\n+    radius: f64,\n+}\n+\n+impl Circle {\n+    fn area(&self) -> f64 {\n+        std::f64::consts::PI * (self.radius * self.radius)\n+    }\n+}\n+\n+struct CircleBuilder {\n+    coordinate: f64,\n+    radius: f64,\n+}\n+\n+impl CircleBuilder {\n+    fn new() -> CircleBuilder {\n+        CircleBuilder { coordinate: 0.0, radius: 0.0, }\n+    }\n+\n+    fn coordinate(&mut self, coordinate: f64) -> &mut CircleBuilder {\n+\tself.coordinate = coordinate;\n+\tself\n+    }\n+\n+    fn radius(&mut self, radius: f64) -> &mut CircleBuilder {\n+\tself.radius = radius;\n+\tself\n+    }\n+\n+    fn finalize(&self) -> Circle {\n+        Circle { x: self.coordinate, y: self.coordinate, radius: self.radius }\n+    }\n+}\n+\n+fn main() {\n+    let c = CircleBuilder::new()\n+                .coordinate(10.0)\n+                .radius(5.0)\n+                .finalize();\n+\n+\n+    println!(\"area: {}\", c.area());\n+}\n+```\n+\n+What we've done here is make another struct, `CircleBuilder`. We've defined our\n+builder methods on it. We've also defined our `area()` method on `Circle`. We\n+also made one more method on `CircleBuilder`: `finalize()`. This method creates\n+our final `Circle` from the builder. Now, we've used the type system to enforce\n+our concerns: we can use the methods on `CircleBuilder` to constrain making\n+`Circle`s in any way we choose."}]}