{"sha": "451a09a6857f7e7dabc918f09c78932b3de2e8f4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1MWEwOWE2ODU3ZjdlN2RhYmM5MThmMDljNzg5MzJiM2RlMmU4ZjQ=", "commit": {"author": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-08-14T16:22:47Z"}, "committer": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-08-14T18:54:57Z"}, "message": "Remove tcx parameter for EnvVars::alloc_env_value", "tree": {"sha": "d1c5f4426cbedf6b073be155ad3fd76ec381fbf2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d1c5f4426cbedf6b073be155ad3fd76ec381fbf2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/451a09a6857f7e7dabc918f09c78932b3de2e8f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/451a09a6857f7e7dabc918f09c78932b3de2e8f4", "html_url": "https://github.com/rust-lang/rust/commit/451a09a6857f7e7dabc918f09c78932b3de2e8f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/451a09a6857f7e7dabc918f09c78932b3de2e8f4/comments", "author": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "46f902b67dfeaeab45424dd7e24771676ef30b58", "url": "https://api.github.com/repos/rust-lang/rust/commits/46f902b67dfeaeab45424dd7e24771676ef30b58", "html_url": "https://github.com/rust-lang/rust/commit/46f902b67dfeaeab45424dd7e24771676ef30b58"}], "stats": {"total": 19, "additions": 10, "deletions": 9}, "files": [{"sha": "0970edb2b75f3c0b88d0714ec803441431b5aa9a", "filename": "src/eval.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/451a09a6857f7e7dabc918f09c78932b3de2e8f4/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/451a09a6857f7e7dabc918f09c78932b3de2e8f4/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=451a09a6857f7e7dabc918f09c78932b3de2e8f4", "patch": "@@ -39,8 +39,10 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n         Evaluator::new(config.communicate),\n         MemoryExtra::new(StdRng::seed_from_u64(config.seed.unwrap_or(0)), config.validate),\n     );\n+\n     // Complete initialization.\n-    EnvVars::init(&mut ecx, &tcx, config.communicate);\n+    EnvVars::init(&mut ecx, config.communicate);\n+\n     // Setup first stack-frame\n     let main_instance = ty::Instance::mono(ecx.tcx.tcx, main_id);\n     let main_mir = ecx.load_mir(main_instance.def)?;"}, {"sha": "05c5fbb0430989444c07ff391128162f9ec2f3a2", "filename": "src/shims/env.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/451a09a6857f7e7dabc918f09c78932b3de2e8f4/src%2Fshims%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/451a09a6857f7e7dabc918f09c78932b3de2e8f4/src%2Fshims%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fenv.rs?ref=451a09a6857f7e7dabc918f09c78932b3de2e8f4", "patch": "@@ -1,6 +1,6 @@\n use std::collections::HashMap;\n \n-use rustc::ty::{layout::{Size, Align}, TyCtxt};\n+use rustc::ty::layout::{Size, Align};\n use rustc_mir::interpret::{Pointer, Memory};\n use crate::stacked_borrows::Tag;\n use crate::*;\n@@ -13,12 +13,11 @@ pub struct EnvVars {\n impl EnvVars {\n     pub(crate) fn init<'mir, 'tcx>(\n         ecx: &mut InterpCx<'mir, 'tcx, Evaluator<'tcx>>,\n-        tcx: &TyCtxt<'tcx>,\n         communicate: bool,\n     ) {\n         if communicate {\n             for (name, value) in std::env::vars() {\n-                let value = alloc_env_value(value.as_bytes(), ecx.memory_mut(), tcx);\n+                let value = alloc_env_value(value.as_bytes(), ecx.memory_mut());\n                 ecx.machine.env_vars.map.insert(name.into_bytes(), value);\n             }\n         }\n@@ -40,8 +39,8 @@ impl EnvVars {\n pub(crate) fn alloc_env_value<'mir, 'tcx>(\n     bytes: &[u8],\n     memory: &mut Memory<'mir, 'tcx, Evaluator<'tcx>>,\n-    tcx: &TyCtxt<'tcx>,\n ) -> Pointer<Tag> {\n+    let tcx = {memory.tcx.tcx};\n     let length = bytes.len() as u64;\n     // `+1` for the null terminator.\n     let ptr = memory.allocate(\n@@ -51,11 +50,11 @@ pub(crate) fn alloc_env_value<'mir, 'tcx>(\n     );\n     // We just allocated these, so the write cannot fail.\n     let alloc = memory.get_mut(ptr.alloc_id).unwrap();\n-    alloc.write_bytes(tcx, ptr, &bytes).unwrap();\n+    alloc.write_bytes(&tcx, ptr, &bytes).unwrap();\n     let trailing_zero_ptr = ptr.offset(\n         Size::from_bytes(length),\n-        tcx,\n+        &tcx,\n     ).unwrap();\n-    alloc.write_bytes(tcx, trailing_zero_ptr, &[0]).unwrap();\n+    alloc.write_bytes(&tcx, trailing_zero_ptr, &[0]).unwrap();\n     ptr\n }"}, {"sha": "088077d5dfa2d4e3fa4a950cd293dac5adef1035", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/451a09a6857f7e7dabc918f09c78932b3de2e8f4/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/451a09a6857f7e7dabc918f09c78932b3de2e8f4/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=451a09a6857f7e7dabc918f09c78932b3de2e8f4", "patch": "@@ -466,7 +466,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     }\n                 }\n                 if let Some((name, value)) = new {\n-                    let value_copy = alloc_env_value(&value, this.memory_mut(), tcx);\n+                    let value_copy = alloc_env_value(&value, this.memory_mut());\n                     if let Some(var) = this.machine.env_vars.set(name.to_owned(), value_copy) {\n                         this.memory_mut().deallocate(var, None, MiriMemoryKind::Env.into())?;\n                     }"}]}