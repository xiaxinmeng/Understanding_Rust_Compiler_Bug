{"sha": "fb5002d68aa22f23ced3e2b5265f622264e4840a", "node_id": "C_kwDOAAsO6NoAKGZiNTAwMmQ2OGFhMjJmMjNjZWQzZTJiNTI2NWY2MjIyNjRlNDg0MGE", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2022-09-27T22:21:31Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2022-09-27T22:21:31Z"}, "message": "Manually order `DefId` on 64-bit big-endian\n\n`DefId` uses different field orders on 64-bit big-endian vs. others, in\norder to optimize its `Hash` implementation. However, that also made it\nderive different lexical ordering for `PartialOrd` and `Ord`. That\ncaused spurious differences wherever `DefId`s are sorted, like the\ncandidate sources list in `report_method_error`.\n\nNow we manually implement `PartialOrd` and `Ord` on 64-bit big-endian to\nmatch the same lexical ordering as other targets, fixing at least one\ntest, `src/test/ui/methods/method-ambig-two-traits-cross-crate.rs`.", "tree": {"sha": "7ac8346a53e6a207bc872985a400525e8d742257", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ac8346a53e6a207bc872985a400525e8d742257"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb5002d68aa22f23ced3e2b5265f622264e4840a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb5002d68aa22f23ced3e2b5265f622264e4840a", "html_url": "https://github.com/rust-lang/rust/commit/fb5002d68aa22f23ced3e2b5265f622264e4840a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb5002d68aa22f23ced3e2b5265f622264e4840a/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57ee5cf5a93923dae9c98bffb11545fc3a31368d", "url": "https://api.github.com/repos/rust-lang/rust/commits/57ee5cf5a93923dae9c98bffb11545fc3a31368d", "html_url": "https://github.com/rust-lang/rust/commit/57ee5cf5a93923dae9c98bffb11545fc3a31368d"}], "stats": {"total": 20, "additions": 19, "deletions": 1}, "files": [{"sha": "bbeabdb55a72a7b02edc3ee1b3c89c4fc0418ba4", "filename": "compiler/rustc_span/src/def_id.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/fb5002d68aa22f23ced3e2b5265f622264e4840a/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb5002d68aa22f23ced3e2b5265f622264e4840a/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs?ref=fb5002d68aa22f23ced3e2b5265f622264e4840a", "patch": "@@ -218,7 +218,9 @@ impl<D: Decoder> Decodable<D> for DefIndex {\n /// index and a def index.\n ///\n /// You can create a `DefId` from a `LocalDefId` using `local_def_id.to_def_id()`.\n-#[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Copy)]\n+#[derive(Clone, PartialEq, Eq, Copy)]\n+// Don't derive order on 64-bit big-endian, so we can be consistent regardless of field order.\n+#[cfg_attr(not(all(target_pointer_width = \"64\", target_endian = \"big\")), derive(PartialOrd, Ord))]\n // On below-64 bit systems we can simply use the derived `Hash` impl\n #[cfg_attr(not(target_pointer_width = \"64\"), derive(Hash))]\n #[repr(C)]\n@@ -260,6 +262,22 @@ impl Hash for DefId {\n     }\n }\n \n+// Implement the same comparison as derived with the other field order.\n+#[cfg(all(target_pointer_width = \"64\", target_endian = \"big\"))]\n+impl Ord for DefId {\n+    #[inline]\n+    fn cmp(&self, other: &DefId) -> std::cmp::Ordering {\n+        Ord::cmp(&(self.index, self.krate), &(other.index, other.krate))\n+    }\n+}\n+#[cfg(all(target_pointer_width = \"64\", target_endian = \"big\"))]\n+impl PartialOrd for DefId {\n+    #[inline]\n+    fn partial_cmp(&self, other: &DefId) -> Option<std::cmp::Ordering> {\n+        Some(Ord::cmp(self, other))\n+    }\n+}\n+\n impl DefId {\n     /// Makes a local `DefId` from the given `DefIndex`.\n     #[inline]"}]}