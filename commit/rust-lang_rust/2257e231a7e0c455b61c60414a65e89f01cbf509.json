{"sha": "2257e231a7e0c455b61c60414a65e89f01cbf509", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyNTdlMjMxYTdlMGM0NTViNjFjNjA0MTRhNjVlODlmMDFjYmY1MDk=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-09-24T17:58:53Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-09-26T16:03:19Z"}, "message": "librustc: Eliminate the `ref` syntax for unboxed closure capture clauses\nin favor of `move`.\n\nThis breaks code that used `move` as an identifier, because it is now a\nkeyword. Change such identifiers to not use the keyword `move`.\nAdditionally, this breaks code that was counting on by-value or\nby-reference capture semantics for unboxed closures (behind the feature\ngate). Change `ref |:|` to `|:|` and `|:|` to `move |:|`.\n\nPart of RFC #63; part of issue #12831.\n\n[breaking-change]", "tree": {"sha": "ee2c609c40991b420297ec902418bfca2dafb4bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee2c609c40991b420297ec902418bfca2dafb4bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2257e231a7e0c455b61c60414a65e89f01cbf509", "comment_count": 8, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2257e231a7e0c455b61c60414a65e89f01cbf509", "html_url": "https://github.com/rust-lang/rust/commit/2257e231a7e0c455b61c60414a65e89f01cbf509", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2257e231a7e0c455b61c60414a65e89f01cbf509/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d653c17a656e8fe1572c7a695e33b188eda0597", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d653c17a656e8fe1572c7a695e33b188eda0597", "html_url": "https://github.com/rust-lang/rust/commit/5d653c17a656e8fe1572c7a695e33b188eda0597"}], "stats": {"total": 163, "additions": 82, "deletions": 81}, "files": [{"sha": "168d0daeb3845d915a2fb734c6bcca442a768fa2", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2257e231a7e0c455b61c60414a65e89f01cbf509/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2257e231a7e0c455b61c60414a65e89f01cbf509/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=2257e231a7e0c455b61c60414a65e89f01cbf509", "patch": "@@ -96,12 +96,6 @@ pub trait BoxAny {\n     /// `Err(Self)` if it isn't.\n     #[unstable = \"naming conventions around accessing innards may change\"]\n     fn downcast<T: 'static>(self) -> Result<Box<T>, Self>;\n-\n-    /// Deprecated; this method has been renamed to `downcast`.\n-    #[deprecated = \"use downcast instead\"]\n-    fn move<T: 'static>(self) -> Result<Box<T>, Self> {\n-        self.downcast::<T>()\n-    }\n }\n \n #[stable]"}, {"sha": "26eca0938b1894b8469e5c82d073dcac18180537", "filename": "src/librustc/middle/borrowck/check_loans.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2257e231a7e0c455b61c60414a65e89f01cbf509/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2257e231a7e0c455b61c60414a65e89f01cbf509/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs?ref=2257e231a7e0c455b61c60414a65e89f01cbf509", "patch": "@@ -652,12 +652,12 @@ impl<'a, 'tcx> CheckLoanCtxt<'a, 'tcx> {\n         debug!(\"check_if_path_is_moved(id={:?}, use_kind={:?}, lp={})\",\n                id, use_kind, lp.repr(self.bccx.tcx));\n         let base_lp = owned_ptr_base_path_rc(lp);\n-        self.move_data.each_move_of(id, &base_lp, |move, moved_lp| {\n+        self.move_data.each_move_of(id, &base_lp, |the_move, moved_lp| {\n             self.bccx.report_use_of_moved_value(\n                 span,\n                 use_kind,\n                 &**lp,\n-                move,\n+                the_move,\n                 moved_lp);\n             false\n         });"}, {"sha": "63d49dcd3036ef7f499da1d582aa331766db0bbe", "filename": "src/librustc/middle/borrowck/graphviz.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2257e231a7e0c455b61c60414a65e89f01cbf509/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2257e231a7e0c455b61c60414a65e89f01cbf509/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgraphviz.rs?ref=2257e231a7e0c455b61c60414a65e89f01cbf509", "patch": "@@ -108,8 +108,8 @@ impl<'a, 'tcx> DataflowLabeller<'a, 'tcx> {\n         let move_index_to_path = |move_index| {\n             let move_data = &self.analysis_data.move_data.move_data;\n             let moves = move_data.moves.borrow();\n-            let move = moves.get(move_index);\n-            move_data.path_loan_path(move.path)\n+            let the_move = moves.get(move_index);\n+            move_data.path_loan_path(the_move.path)\n         };\n         self.build_set(e, cfgidx, dfcx, move_index_to_path)\n     }"}, {"sha": "d4d6fae53e3a330bdd0965f662130c4a95e9e6a8", "filename": "src/librustc/middle/borrowck/mod.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2257e231a7e0c455b61c60414a65e89f01cbf509/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2257e231a7e0c455b61c60414a65e89f01cbf509/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs?ref=2257e231a7e0c455b61c60414a65e89f01cbf509", "patch": "@@ -409,14 +409,14 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                                      use_span: Span,\n                                      use_kind: MovedValueUseKind,\n                                      lp: &LoanPath,\n-                                     move: &move_data::Move,\n+                                     the_move: &move_data::Move,\n                                      moved_lp: &LoanPath) {\n         let verb = match use_kind {\n             MovedInUse => \"use\",\n             MovedInCapture => \"capture\",\n         };\n \n-        match move.kind {\n+        match the_move.kind {\n             move_data::Declared => {\n                 self.tcx.sess.span_err(\n                     use_span,\n@@ -435,18 +435,20 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n             }\n         }\n \n-        match move.kind {\n+        match the_move.kind {\n             move_data::Declared => {}\n \n             move_data::MoveExpr => {\n-                let (expr_ty, expr_span) = match self.tcx.map.find(move.id) {\n+                let (expr_ty, expr_span) = match self.tcx\n+                                                     .map\n+                                                     .find(the_move.id) {\n                     Some(ast_map::NodeExpr(expr)) => {\n                         (ty::expr_ty_adjusted(self.tcx, &*expr), expr.span)\n                     }\n                     r => {\n                         self.tcx.sess.bug(format!(\"MoveExpr({:?}) maps to \\\n                                                    {:?}, not Expr\",\n-                                                  move.id,\n+                                                  the_move.id,\n                                                   r).as_slice())\n                     }\n                 };\n@@ -461,8 +463,8 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n             }\n \n             move_data::MovePat => {\n-                let pat_ty = ty::node_id_to_type(self.tcx, move.id);\n-                self.tcx.sess.span_note(self.tcx.map.span(move.id),\n+                let pat_ty = ty::node_id_to_type(self.tcx, the_move.id);\n+                self.tcx.sess.span_note(self.tcx.map.span(the_move.id),\n                     format!(\"`{}` moved here because it has type `{}`, \\\n                              which is moved by default (use `ref` to \\\n                              override)\",\n@@ -471,14 +473,16 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n             }\n \n             move_data::Captured => {\n-                let (expr_ty, expr_span) = match self.tcx.map.find(move.id) {\n+                let (expr_ty, expr_span) = match self.tcx\n+                                                     .map\n+                                                     .find(the_move.id) {\n                     Some(ast_map::NodeExpr(expr)) => {\n                         (ty::expr_ty_adjusted(self.tcx, &*expr), expr.span)\n                     }\n                     r => {\n                         self.tcx.sess.bug(format!(\"Captured({:?}) maps to \\\n                                                    {:?}, not Expr\",\n-                                                  move.id,\n+                                                  the_move.id,\n                                                   r).as_slice())\n                     }\n                 };"}, {"sha": "5cc58eb264e076d196167aad6f43130da525d0fe", "filename": "src/librustc/middle/borrowck/move_data.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/2257e231a7e0c455b61c60414a65e89f01cbf509/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmove_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2257e231a7e0c455b61c60414a65e89f01cbf509/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmove_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmove_data.rs?ref=2257e231a7e0c455b61c60414a65e89f01cbf509", "patch": "@@ -413,8 +413,8 @@ impl MoveData {\n          * killed by scoping. See `doc.rs` for more details.\n          */\n \n-        for (i, move) in self.moves.borrow().iter().enumerate() {\n-            dfcx_moves.add_gen(move.id, i);\n+        for (i, the_move) in self.moves.borrow().iter().enumerate() {\n+            dfcx_moves.add_gen(the_move.id, i);\n         }\n \n         for (i, assignment) in self.var_assignments.borrow().iter().enumerate() {\n@@ -577,10 +577,10 @@ impl<'a, 'tcx> FlowedMoveData<'a, 'tcx> {\n         let mut ret = None;\n         for loan_path_index in self.move_data.path_map.borrow().find(&*loan_path).iter() {\n             self.dfcx_moves.each_gen_bit(id, |move_index| {\n-                let move = self.move_data.moves.borrow();\n-                let move = move.get(move_index);\n-                if move.path == **loan_path_index {\n-                    ret = Some(move.kind);\n+                let the_move = self.move_data.moves.borrow();\n+                let the_move = the_move.get(move_index);\n+                if the_move.path == **loan_path_index {\n+                    ret = Some(the_move.kind);\n                     false\n                 } else {\n                     true\n@@ -622,13 +622,13 @@ impl<'a, 'tcx> FlowedMoveData<'a, 'tcx> {\n         let mut ret = true;\n \n         self.dfcx_moves.each_bit_on_entry(id, |index| {\n-            let move = self.move_data.moves.borrow();\n-            let move = move.get(index);\n-            let moved_path = move.path;\n+            let the_move = self.move_data.moves.borrow();\n+            let the_move = the_move.get(index);\n+            let moved_path = the_move.path;\n             if base_indices.iter().any(|x| x == &moved_path) {\n                 // Scenario 1 or 2: `loan_path` or some base path of\n                 // `loan_path` was moved.\n-                if !f(move, &*self.move_data.path_loan_path(moved_path)) {\n+                if !f(the_move, &*self.move_data.path_loan_path(moved_path)) {\n                     ret = false;\n                 }\n             } else {\n@@ -637,7 +637,8 @@ impl<'a, 'tcx> FlowedMoveData<'a, 'tcx> {\n                         if p == loan_path_index {\n                             // Scenario 3: some extension of `loan_path`\n                             // was moved\n-                            f(move, &*self.move_data.path_loan_path(moved_path))\n+                            f(the_move,\n+                              &*self.move_data.path_loan_path(moved_path))\n                         } else {\n                             true\n                         }"}, {"sha": "415ff6a4097ac521a4d38d700073d8e203c10181", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2257e231a7e0c455b61c60414a65e89f01cbf509/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2257e231a7e0c455b61c60414a65e89f01cbf509/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=2257e231a7e0c455b61c60414a65e89f01cbf509", "patch": "@@ -2084,7 +2084,7 @@ impl<'a> Parser<'a> {\n                                     ExprBlock(blk));\n             },\n             token::BINOP(token::OR) |  token::OROR => {\n-                return self.parse_lambda_expr(CaptureByValue);\n+                return self.parse_lambda_expr(CaptureByRef);\n             },\n             // FIXME #13626: Should be able to stick in\n             // token::SELF_KEYWORD_NAME\n@@ -2135,8 +2135,8 @@ impl<'a> Parser<'a> {\n                 hi = self.last_span.hi;\n             }\n             _ => {\n-                if self.eat_keyword(keywords::Ref) {\n-                    return self.parse_lambda_expr(CaptureByRef);\n+                if self.eat_keyword(keywords::Move) {\n+                    return self.parse_lambda_expr(CaptureByValue);\n                 }\n                 if self.eat_keyword(keywords::Proc) {\n                     let decl = self.parse_proc_decl();"}, {"sha": "a486ac40a97a137beaff65a60bdcf1b9f0f0474a", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 29, "deletions": 28, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/2257e231a7e0c455b61c60414a65e89f01cbf509/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2257e231a7e0c455b61c60414a65e89f01cbf509/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=2257e231a7e0c455b61c60414a65e89f01cbf509", "patch": "@@ -482,40 +482,41 @@ declare_special_idents_and_keywords! {\n         (25,                         Loop,       \"loop\");\n         (26,                         Match,      \"match\");\n         (27,                         Mod,        \"mod\");\n-        (28,                         Mut,        \"mut\");\n-        (29,                         Once,       \"once\");\n-        (30,                         Pub,        \"pub\");\n-        (31,                         Ref,        \"ref\");\n-        (32,                         Return,     \"return\");\n+        (28,                         Move,       \"move\");\n+        (29,                         Mut,        \"mut\");\n+        (30,                         Once,       \"once\");\n+        (31,                         Pub,        \"pub\");\n+        (32,                         Ref,        \"ref\");\n+        (33,                         Return,     \"return\");\n         // Static and Self are also special idents (prefill de-dupes)\n         (super::STATIC_KEYWORD_NAME_NUM, Static, \"static\");\n         (super::SELF_KEYWORD_NAME_NUM,   Self,   \"self\");\n-        (33,                         Struct,     \"struct\");\n+        (34,                         Struct,     \"struct\");\n         (super::SUPER_KEYWORD_NAME_NUM, Super,   \"super\");\n-        (34,                         True,       \"true\");\n-        (35,                         Trait,      \"trait\");\n-        (36,                         Type,       \"type\");\n-        (37,                         Unsafe,     \"unsafe\");\n-        (38,                         Use,        \"use\");\n-        (39,                         Virtual,    \"virtual\");\n-        (40,                         While,      \"while\");\n-        (41,                         Continue,   \"continue\");\n-        (42,                         Proc,       \"proc\");\n-        (43,                         Box,        \"box\");\n-        (44,                         Const,      \"const\");\n-        (45,                         Where,      \"where\");\n+        (35,                         True,       \"true\");\n+        (36,                         Trait,      \"trait\");\n+        (37,                         Type,       \"type\");\n+        (38,                         Unsafe,     \"unsafe\");\n+        (39,                         Use,        \"use\");\n+        (40,                         Virtual,    \"virtual\");\n+        (41,                         While,      \"while\");\n+        (42,                         Continue,   \"continue\");\n+        (43,                         Proc,       \"proc\");\n+        (44,                         Box,        \"box\");\n+        (45,                         Const,      \"const\");\n+        (46,                         Where,      \"where\");\n \n         'reserved:\n-        (46,                         Alignof,    \"alignof\");\n-        (47,                         Be,         \"be\");\n-        (48,                         Offsetof,   \"offsetof\");\n-        (49,                         Priv,       \"priv\");\n-        (50,                         Pure,       \"pure\");\n-        (51,                         Sizeof,     \"sizeof\");\n-        (52,                         Typeof,     \"typeof\");\n-        (53,                         Unsized,    \"unsized\");\n-        (54,                         Yield,      \"yield\");\n-        (55,                         Do,         \"do\");\n+        (47,                         Alignof,    \"alignof\");\n+        (48,                         Be,         \"be\");\n+        (49,                         Offsetof,   \"offsetof\");\n+        (50,                         Priv,       \"priv\");\n+        (51,                         Pure,       \"pure\");\n+        (52,                         Sizeof,     \"sizeof\");\n+        (53,                         Typeof,     \"typeof\");\n+        (54,                         Unsized,    \"unsized\");\n+        (55,                         Yield,      \"yield\");\n+        (56,                         Do,         \"do\");\n     }\n }\n "}, {"sha": "ae4ba611bab5317424266b6a14c65e6358eb4dbb", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2257e231a7e0c455b61c60414a65e89f01cbf509/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2257e231a7e0c455b61c60414a65e89f01cbf509/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=2257e231a7e0c455b61c60414a65e89f01cbf509", "patch": "@@ -2176,8 +2176,8 @@ impl<'a> State<'a> {\n     pub fn print_capture_clause(&mut self, capture_clause: ast::CaptureClause)\n                                 -> IoResult<()> {\n         match capture_clause {\n-            ast::CaptureByValue => Ok(()),\n-            ast::CaptureByRef => self.word_space(\"ref\"),\n+            ast::CaptureByValue => self.word_space(\"move\"),\n+            ast::CaptureByRef => Ok(()),\n         }\n     }\n "}, {"sha": "e046b5c68addd4c88826cd13c583fae3327fcf71", "filename": "src/test/compile-fail/regionck-unboxed-closure-lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2257e231a7e0c455b61c60414a65e89f01cbf509/src%2Ftest%2Fcompile-fail%2Fregionck-unboxed-closure-lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2257e231a7e0c455b61c60414a65e89f01cbf509/src%2Ftest%2Fcompile-fail%2Fregionck-unboxed-closure-lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregionck-unboxed-closure-lifetimes.rs?ref=2257e231a7e0c455b61c60414a65e89f01cbf509", "patch": "@@ -17,7 +17,7 @@ fn main() {\n     {\n         let c = 1;\n         let c_ref = &c; //~ ERROR `c` does not live long enough\n-        f = |&mut: a: int, b: int| { a + b + *c_ref };\n+        f = move |&mut: a: int, b: int| { a + b + *c_ref };\n     }\n }\n "}, {"sha": "a1411146ddda622da81b2cdcaf049bdb95c1f82c", "filename": "src/test/run-pass/capture-clauses-boxed-closures.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2257e231a7e0c455b61c60414a65e89f01cbf509/src%2Ftest%2Frun-pass%2Fcapture-clauses-boxed-closures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2257e231a7e0c455b61c60414a65e89f01cbf509/src%2Ftest%2Frun-pass%2Fcapture-clauses-boxed-closures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcapture-clauses-boxed-closures.rs?ref=2257e231a7e0c455b61c60414a65e89f01cbf509", "patch": "@@ -17,7 +17,7 @@ fn each<T>(x: &[T], f: |&T|) {\n fn main() {\n     let mut sum = 0u;\n     let elems = [ 1u, 2, 3, 4, 5 ];\n-    each(elems, ref |val| sum += *val);\n+    each(elems, |val| sum += *val);\n     assert_eq!(sum, 15);\n }\n "}, {"sha": "508d1e46f7e18e5e64588bbe47121f25ffc0e886", "filename": "src/test/run-pass/unboxed-closures-all-traits.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2257e231a7e0c455b61c60414a65e89f01cbf509/src%2Ftest%2Frun-pass%2Funboxed-closures-all-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2257e231a7e0c455b61c60414a65e89f01cbf509/src%2Ftest%2Frun-pass%2Funboxed-closures-all-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-all-traits.rs?ref=2257e231a7e0c455b61c60414a65e89f01cbf509", "patch": "@@ -24,8 +24,8 @@ fn c<F:FnOnce(int, int) -> int>(f: F) -> int {\n \n fn main() {\n     let z: int = 7;\n-    assert_eq!(a(|&: x: int, y| x + y + z), 10);\n-    assert_eq!(b(|&mut: x: int, y| x + y + z), 14);\n-    assert_eq!(c(|: x: int, y| x + y + z), 18);\n+    assert_eq!(a(move |&: x: int, y| x + y + z), 10);\n+    assert_eq!(b(move |&mut: x: int, y| x + y + z), 14);\n+    assert_eq!(c(move |: x: int, y| x + y + z), 18);\n }\n "}, {"sha": "ab3faa16f948ffc2428e05f466a4f579e9720c96", "filename": "src/test/run-pass/unboxed-closures-boxed.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2257e231a7e0c455b61c60414a65e89f01cbf509/src%2Ftest%2Frun-pass%2Funboxed-closures-boxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2257e231a7e0c455b61c60414a65e89f01cbf509/src%2Ftest%2Frun-pass%2Funboxed-closures-boxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-boxed.rs?ref=2257e231a7e0c455b61c60414a65e89f01cbf509", "patch": "@@ -13,7 +13,8 @@\n use std::ops::FnMut;\n \n  fn make_adder(x: int) -> Box<FnMut<(int,),int>+'static> {\n-    (box |&mut: y: int| -> int { x + y }) as Box<FnMut<(int,),int>+'static>\n+    (box move |&mut: y: int| -> int { x + y }) as\n+        Box<FnMut<(int,),int>+'static>\n }\n \n pub fn main() {"}, {"sha": "00bf5fac095cd6e77fbf3bd002a123156aa5c585", "filename": "src/test/run-pass/unboxed-closures-drop.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2257e231a7e0c455b61c60414a65e89f01cbf509/src%2Ftest%2Frun-pass%2Funboxed-closures-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2257e231a7e0c455b61c60414a65e89f01cbf509/src%2Ftest%2Frun-pass%2Funboxed-closures-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-drop.rs?ref=2257e231a7e0c455b61c60414a65e89f01cbf509", "patch": "@@ -55,65 +55,65 @@ fn c<F:FnOnce(int, int) -> int>(f: F) -> int {\n \n fn test_fn() {\n     {\n-        a(|&: a: int, b| { a + b });\n+        a(move |&: a: int, b| { a + b });\n     }\n     assert_eq!(drop_count(), 0);\n \n     {\n         let z = &Droppable::new();\n-        a(|&: a: int, b| { z; a + b });\n+        a(move |&: a: int, b| { z; a + b });\n         assert_eq!(drop_count(), 0);\n     }\n     assert_eq!(drop_count(), 1);\n \n     {\n         let z = &Droppable::new();\n         let zz = &Droppable::new();\n-        a(|&: a: int, b| { z; zz; a + b });\n+        a(move |&: a: int, b| { z; zz; a + b });\n         assert_eq!(drop_count(), 1);\n     }\n     assert_eq!(drop_count(), 3);\n }\n \n fn test_fn_mut() {\n     {\n-        b(|&mut: a: int, b| { a + b });\n+        b(move |&mut: a: int, b| { a + b });\n     }\n     assert_eq!(drop_count(), 3);\n \n     {\n         let z = &Droppable::new();\n-        b(|&mut: a: int, b| { z; a + b });\n+        b(move |&mut: a: int, b| { z; a + b });\n         assert_eq!(drop_count(), 3);\n     }\n     assert_eq!(drop_count(), 4);\n \n     {\n         let z = &Droppable::new();\n         let zz = &Droppable::new();\n-        b(|&mut: a: int, b| { z; zz; a + b });\n+        b(move |&mut: a: int, b| { z; zz; a + b });\n         assert_eq!(drop_count(), 4);\n     }\n     assert_eq!(drop_count(), 6);\n }\n \n fn test_fn_once() {\n     {\n-        c(|: a: int, b| { a + b });\n+        c(move |: a: int, b| { a + b });\n     }\n     assert_eq!(drop_count(), 6);\n \n     {\n         let z = Droppable::new();\n-        c(|: a: int, b| { z; a + b });\n+        c(move |: a: int, b| { z; a + b });\n         assert_eq!(drop_count(), 7);\n     }\n     assert_eq!(drop_count(), 7);\n \n     {\n         let z = Droppable::new();\n         let zz = Droppable::new();\n-        c(|: a: int, b| { z; zz; a + b });\n+        c(move |: a: int, b| { z; zz; a + b });\n         assert_eq!(drop_count(), 9);\n     }\n     assert_eq!(drop_count(), 9);"}, {"sha": "4239cfdd8cf14f552f85d67d1c09db33cb043f02", "filename": "src/test/run-pass/unboxed-closures-single-word-env.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2257e231a7e0c455b61c60414a65e89f01cbf509/src%2Ftest%2Frun-pass%2Funboxed-closures-single-word-env.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2257e231a7e0c455b61c60414a65e89f01cbf509/src%2Ftest%2Frun-pass%2Funboxed-closures-single-word-env.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-single-word-env.rs?ref=2257e231a7e0c455b61c60414a65e89f01cbf509", "patch": "@@ -27,8 +27,8 @@ fn c<F:FnOnce(int, int) -> int>(f: F) -> int {\n \n fn main() {\n     let z = 10;\n-    assert_eq!(a(|&: x: int, y| x + y + z), 13);\n-    assert_eq!(b(|&mut: x: int, y| x + y + z), 17);\n-    assert_eq!(c(|: x: int, y| x + y + z), 21);\n+    assert_eq!(a(move |&: x: int, y| x + y + z), 13);\n+    assert_eq!(b(move |&mut: x: int, y| x + y + z), 17);\n+    assert_eq!(c(move |: x: int, y| x + y + z), 21);\n }\n "}]}