{"sha": "63a9030e7b75312261733187f827df66db55cb1b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzYTkwMzBlN2I3NTMxMjI2MTczMzE4N2Y4MjdkZjY2ZGI1NWNiMWI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-01T10:30:04Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-12T16:54:49Z"}, "message": "Unify associated item parsing.\nAn exception is `fn` params.", "tree": {"sha": "f519e681c1c9a098fa7930bc87d55f32161c582a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f519e681c1c9a098fa7930bc87d55f32161c582a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63a9030e7b75312261733187f827df66db55cb1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63a9030e7b75312261733187f827df66db55cb1b", "html_url": "https://github.com/rust-lang/rust/commit/63a9030e7b75312261733187f827df66db55cb1b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63a9030e7b75312261733187f827df66db55cb1b/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7672bff3780ef0e7ba5313bf23644465644e19e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/7672bff3780ef0e7ba5313bf23644465644e19e6", "html_url": "https://github.com/rust-lang/rust/commit/7672bff3780ef0e7ba5313bf23644465644e19e6"}], "stats": {"total": 88, "additions": 29, "deletions": 59}, "files": [{"sha": "3fbdbb4cb2240b6d3cdb9afda111d2ac1e3c2b61", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 20, "deletions": 50, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/63a9030e7b75312261733187f827df66db55cb1b/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63a9030e7b75312261733187f827df66db55cb1b/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=63a9030e7b75312261733187f827df66db55cb1b", "patch": "@@ -6,8 +6,7 @@ use crate::maybe_whole;\n use rustc_errors::{PResult, Applicability, DiagnosticBuilder, StashKey};\n use rustc_error_codes::*;\n use syntax::ast::{self, DUMMY_NODE_ID, Ident, Attribute, AttrKind, AttrStyle, AnonConst, Item};\n-use syntax::ast::{ItemKind, ImplItem, TraitItem, TraitItemKind, UseTree, UseTreeKind};\n-use syntax::ast::{AssocItemKind};\n+use syntax::ast::{AssocItem, AssocItemKind, ItemKind, UseTree, UseTreeKind};\n use syntax::ast::{PathSegment, IsAuto, Constness, IsAsync, Unsafety, Defaultness, Extern, StrLit};\n use syntax::ast::{Visibility, VisibilityKind, Mutability, FnHeader, ForeignItem, ForeignItemKind};\n use syntax::ast::{Ty, TyKind, Generics, TraitRef, EnumDef, Variant, VariantData, StructField};\n@@ -649,7 +648,7 @@ impl<'a> Parser<'a> {\n         Ok((Ident::invalid(), item_kind, Some(attrs)))\n     }\n \n-    fn parse_impl_body(&mut self) -> PResult<'a, (Vec<ImplItem>, Vec<Attribute>)> {\n+    fn parse_impl_body(&mut self) -> PResult<'a, (Vec<AssocItem>, Vec<Attribute>)> {\n         self.expect(&token::OpenDelim(token::Brace))?;\n         let attrs = self.parse_inner_attributes()?;\n \n@@ -671,12 +670,12 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Parses an impl item.\n-    pub fn parse_impl_item(&mut self, at_end: &mut bool) -> PResult<'a, ImplItem> {\n+    pub fn parse_impl_item(&mut self, at_end: &mut bool) -> PResult<'a, AssocItem> {\n         maybe_whole!(self, NtImplItem, |x| x);\n         let attrs = self.parse_outer_attributes()?;\n         let mut unclosed_delims = vec![];\n         let (mut item, tokens) = self.collect_tokens(|this| {\n-            let item = this.parse_impl_item_(at_end, attrs);\n+            let item = this.parse_assoc_item(at_end, attrs, |_| true);\n             unclosed_delims.append(&mut this.unclosed_delims);\n             item\n         })?;\n@@ -689,38 +688,6 @@ impl<'a> Parser<'a> {\n         Ok(item)\n     }\n \n-    fn parse_impl_item_(\n-        &mut self,\n-        at_end: &mut bool,\n-        mut attrs: Vec<Attribute>,\n-    ) -> PResult<'a, ImplItem> {\n-        let lo = self.token.span;\n-        let vis = self.parse_visibility(FollowedByType::No)?;\n-        let defaultness = self.parse_defaultness();\n-        let (name, kind, generics) = if self.eat_keyword(kw::Type) {\n-            self.parse_assoc_ty()?\n-        } else if self.is_const_item() {\n-            self.parse_assoc_const()?\n-        } else if let Some(mac) = self.parse_assoc_macro_invoc(\"impl\", Some(&vis), at_end)? {\n-            // FIXME: code copied from `parse_macro_use_or_failure` -- use abstraction!\n-            (Ident::invalid(), ast::ImplItemKind::Macro(mac), Generics::default())\n-        } else {\n-            self.parse_assoc_fn(at_end, &mut attrs, |_| true)?\n-        };\n-\n-        Ok(ImplItem {\n-            id: DUMMY_NODE_ID,\n-            span: lo.to(self.prev_span),\n-            ident: name,\n-            attrs,\n-            vis,\n-            defaultness,\n-            generics,\n-            kind,\n-            tokens: None,\n-        })\n-    }\n-\n     /// Parses defaultness (i.e., `default` or nothing).\n     fn parse_defaultness(&mut self) -> Defaultness {\n         // `pub` is included for better error messages\n@@ -843,12 +810,19 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Parses the items in a trait declaration.\n-    pub fn parse_trait_item(&mut self, at_end: &mut bool) -> PResult<'a, TraitItem> {\n+    pub fn parse_trait_item(&mut self, at_end: &mut bool) -> PResult<'a, AssocItem> {\n         maybe_whole!(self, NtTraitItem, |x| x);\n         let attrs = self.parse_outer_attributes()?;\n         let mut unclosed_delims = vec![];\n         let (mut item, tokens) = self.collect_tokens(|this| {\n-            let item = this.parse_trait_item_(at_end, attrs);\n+            // This is somewhat dubious; We don't want to allow\n+            // param names to be left off if there is a definition...\n+            //\n+            // We don't allow param names to be left off in edition 2018.\n+            //\n+            // FIXME(Centril): bake closure into param parsing.\n+            // Also add semantic restrictions and add tests.\n+            let item = this.parse_assoc_item(at_end, attrs, |t| t.span.rust_2018());\n             unclosed_delims.append(&mut this.unclosed_delims);\n             item\n         })?;\n@@ -860,30 +834,26 @@ impl<'a> Parser<'a> {\n         Ok(item)\n     }\n \n-    fn parse_trait_item_(\n+    fn parse_assoc_item(\n         &mut self,\n         at_end: &mut bool,\n         mut attrs: Vec<Attribute>,\n-    ) -> PResult<'a, TraitItem> {\n+        is_name_required: fn(&token::Token) -> bool,\n+    ) -> PResult<'a, AssocItem> {\n         let lo = self.token.span;\n         let vis = self.parse_visibility(FollowedByType::No)?;\n         let defaultness = self.parse_defaultness();\n         let (name, kind, generics) = if self.eat_keyword(kw::Type) {\n             self.parse_assoc_ty()?\n         } else if self.is_const_item() {\n             self.parse_assoc_const()?\n-        } else if let Some(mac) = self.parse_assoc_macro_invoc(\"trait\", None, &mut false)? {\n-            // trait item macro.\n-            (Ident::invalid(), TraitItemKind::Macro(mac), Generics::default())\n+        } else if let Some(mac) = self.parse_assoc_macro_invoc(\"associated\", Some(&vis), at_end)? {\n+            (Ident::invalid(), AssocItemKind::Macro(mac), Generics::default())\n         } else {\n-            // This is somewhat dubious; We don't want to allow\n-            // param names to be left off if there is a definition...\n-            //\n-            // We don't allow param names to be left off in edition 2018.\n-            self.parse_assoc_fn(at_end, &mut attrs, |t| t.span.rust_2018())?\n+            self.parse_assoc_fn(at_end, &mut attrs, is_name_required)?\n         };\n \n-        Ok(TraitItem {\n+        Ok(AssocItem {\n             id: DUMMY_NODE_ID,\n             span: lo.to(self.prev_span),\n             ident: name,"}, {"sha": "ea21592997bfeed95d67a69a5ac36ac2ebc4a481", "filename": "src/test/ui/did_you_mean/issue-40006.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/63a9030e7b75312261733187f827df66db55cb1b/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63a9030e7b75312261733187f827df66db55cb1b/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.rs?ref=63a9030e7b75312261733187f827df66db55cb1b", "patch": "@@ -18,10 +18,10 @@ trait A { //~ ERROR missing\n trait B {\n     fn xxx() { ### } //~ ERROR expected\n }\n-trait C { //~ ERROR missing `fn`, `type`, or `const` for trait-item declaration\n+trait C { //~ ERROR missing `fn`, `type`, or `const` for associated-item declaration\n     L = M;\n }\n-trait D { //~ ERROR missing `fn`, `type`, or `const` for trait-item declaration\n+trait D { //~ ERROR missing `fn`, `type`, or `const` for associated-item declaration\n     Z = { 2 + 3 };\n }\n trait E {"}, {"sha": "d1e995013cb93708fdf345f1c18a5c08fe6f458a", "filename": "src/test/ui/did_you_mean/issue-40006.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/63a9030e7b75312261733187f827df66db55cb1b/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/63a9030e7b75312261733187f827df66db55cb1b/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.stderr?ref=63a9030e7b75312261733187f827df66db55cb1b", "patch": "@@ -1,20 +1,20 @@\n-error: missing `fn`, `type`, or `const` for impl-item declaration\n+error: missing `fn`, `type`, or `const` for associated-item declaration\n   --> $DIR/issue-40006.rs:1:13\n    |\n LL |   impl dyn A {\n    |  _____________^\n LL | |     Y\n    | |____^ missing `fn`, `type`, or `const`\n \n-error: missing `fn`, `type`, or `const` for trait-item declaration\n+error: missing `fn`, `type`, or `const` for associated-item declaration\n   --> $DIR/issue-40006.rs:7:10\n    |\n LL |   trait X {\n    |  __________^\n LL | |     X() {}\n    | |____^ missing `fn`, `type`, or `const`\n \n-error: missing `fn`, `type`, or `const` for trait-item declaration\n+error: missing `fn`, `type`, or `const` for associated-item declaration\n   --> $DIR/issue-40006.rs:15:10\n    |\n LL |   trait A {\n@@ -28,15 +28,15 @@ error: expected `[`, found `#`\n LL |     fn xxx() { ### }\n    |                 ^ expected `[`\n \n-error: missing `fn`, `type`, or `const` for trait-item declaration\n+error: missing `fn`, `type`, or `const` for associated-item declaration\n   --> $DIR/issue-40006.rs:21:10\n    |\n LL |   trait C {\n    |  __________^\n LL | |     L = M;\n    | |____^ missing `fn`, `type`, or `const`\n \n-error: missing `fn`, `type`, or `const` for trait-item declaration\n+error: missing `fn`, `type`, or `const` for associated-item declaration\n   --> $DIR/issue-40006.rs:24:10\n    |\n LL |   trait D {\n@@ -50,7 +50,7 @@ error: expected one of `!` or `::`, found `(`\n LL |     ::Y ();\n    |         ^ expected one of `!` or `::`\n \n-error: missing `fn`, `type`, or `const` for impl-item declaration\n+error: missing `fn`, `type`, or `const` for associated-item declaration\n   --> $DIR/issue-40006.rs:32:8\n    |\n LL |     pub hello_method(&self) {"}, {"sha": "6e20a9ce3c432758dce2169fae1565662c1de912", "filename": "src/test/ui/parser/issue-21153.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63a9030e7b75312261733187f827df66db55cb1b/src%2Ftest%2Fui%2Fparser%2Fissue-21153.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/63a9030e7b75312261733187f827df66db55cb1b/src%2Ftest%2Fui%2Fparser%2Fissue-21153.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-21153.stderr?ref=63a9030e7b75312261733187f827df66db55cb1b", "patch": "@@ -1,4 +1,4 @@\n-error: missing `fn`, `type`, or `const` for trait-item declaration\n+error: missing `fn`, `type`, or `const` for associated-item declaration\n   --> $DIR/issue-21153.rs:1:29\n    |\n LL |   trait MyTrait<T>: Iterator {"}]}