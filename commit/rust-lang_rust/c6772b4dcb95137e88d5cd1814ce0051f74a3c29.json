{"sha": "c6772b4dcb95137e88d5cd1814ce0051f74a3c29", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2NzcyYjRkY2I5NTEzN2U4OGQ1Y2QxODE0Y2UwMDUxZjc0YTNjMjk=", "commit": {"author": {"name": "Tatsuyuki Ishi", "email": "ishitatsuyuki@gmail.com", "date": "2018-01-22T23:21:17Z"}, "committer": {"name": "Tatsuyuki Ishi", "email": "ishitatsuyuki@gmail.com", "date": "2018-01-23T00:56:28Z"}, "message": "Implement Ord as necessary", "tree": {"sha": "e686082c1425e437ed9dfc30a24435fb303140de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e686082c1425e437ed9dfc30a24435fb303140de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6772b4dcb95137e88d5cd1814ce0051f74a3c29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6772b4dcb95137e88d5cd1814ce0051f74a3c29", "html_url": "https://github.com/rust-lang/rust/commit/c6772b4dcb95137e88d5cd1814ce0051f74a3c29", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6772b4dcb95137e88d5cd1814ce0051f74a3c29/comments", "author": {"login": "ishitatsuyuki", "id": 12389383, "node_id": "MDQ6VXNlcjEyMzg5Mzgz", "avatar_url": "https://avatars.githubusercontent.com/u/12389383?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ishitatsuyuki", "html_url": "https://github.com/ishitatsuyuki", "followers_url": "https://api.github.com/users/ishitatsuyuki/followers", "following_url": "https://api.github.com/users/ishitatsuyuki/following{/other_user}", "gists_url": "https://api.github.com/users/ishitatsuyuki/gists{/gist_id}", "starred_url": "https://api.github.com/users/ishitatsuyuki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ishitatsuyuki/subscriptions", "organizations_url": "https://api.github.com/users/ishitatsuyuki/orgs", "repos_url": "https://api.github.com/users/ishitatsuyuki/repos", "events_url": "https://api.github.com/users/ishitatsuyuki/events{/privacy}", "received_events_url": "https://api.github.com/users/ishitatsuyuki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ishitatsuyuki", "id": 12389383, "node_id": "MDQ6VXNlcjEyMzg5Mzgz", "avatar_url": "https://avatars.githubusercontent.com/u/12389383?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ishitatsuyuki", "html_url": "https://github.com/ishitatsuyuki", "followers_url": "https://api.github.com/users/ishitatsuyuki/followers", "following_url": "https://api.github.com/users/ishitatsuyuki/following{/other_user}", "gists_url": "https://api.github.com/users/ishitatsuyuki/gists{/gist_id}", "starred_url": "https://api.github.com/users/ishitatsuyuki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ishitatsuyuki/subscriptions", "organizations_url": "https://api.github.com/users/ishitatsuyuki/orgs", "repos_url": "https://api.github.com/users/ishitatsuyuki/repos", "events_url": "https://api.github.com/users/ishitatsuyuki/events{/privacy}", "received_events_url": "https://api.github.com/users/ishitatsuyuki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0bbc4221dc897ee4048e66b87adb31fbbd6f619c", "url": "https://api.github.com/repos/rust-lang/rust/commits/0bbc4221dc897ee4048e66b87adb31fbbd6f619c", "html_url": "https://github.com/rust-lang/rust/commit/0bbc4221dc897ee4048e66b87adb31fbbd6f619c"}], "stats": {"total": 38, "additions": 33, "deletions": 5}, "files": [{"sha": "f3a4c25f7c5c2cc82a9dd3e85cbf8ba4115d55c6", "filename": "src/librustc/traits/project.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6772b4dcb95137e88d5cd1814ce0051f74a3c29/src%2Flibrustc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6772b4dcb95137e88d5cd1814ce0051f74a3c29/src%2Flibrustc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fproject.rs?ref=c6772b4dcb95137e88d5cd1814ce0051f74a3c29", "patch": "@@ -101,7 +101,7 @@ pub struct MismatchedProjectionTypes<'tcx> {\n     pub err: ty::error::TypeError<'tcx>\n }\n \n-#[derive(PartialEq, Eq, Debug)]\n+#[derive(PartialEq, Eq, PartialOrd, Ord, Debug)]\n enum ProjectionTyCandidate<'tcx> {\n     // from a where-clause in the env or object type\n     ParamEnv(ty::PolyProjectionPredicate<'tcx>),"}, {"sha": "4ce8c09a6003fe061fa4b0b09a442cb7e6f405e0", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c6772b4dcb95137e88d5cd1814ce0051f74a3c29/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6772b4dcb95137e88d5cd1814ce0051f74a3c29/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=c6772b4dcb95137e88d5cd1814ce0051f74a3c29", "patch": "@@ -39,6 +39,7 @@ use util::nodemap::{NodeSet, DefIdMap, FxHashMap, FxHashSet};\n use serialize::{self, Encodable, Encoder};\n use std::collections::BTreeMap;\n use std::cmp;\n+use std::cmp::Ordering;\n use std::fmt;\n use std::hash::{Hash, Hasher};\n use std::iter::FromIterator;\n@@ -497,6 +498,20 @@ impl<'tcx> Hash for TyS<'tcx> {\n     }\n }\n \n+impl<'tcx> Ord for TyS<'tcx> {\n+    #[inline]\n+    fn cmp(&self, other: &TyS<'tcx>) -> Ordering {\n+        // (self as *const _).cmp(other as *const _)\n+        (self as *const TyS<'tcx>).cmp(&(other as *const TyS<'tcx>))\n+    }\n+}\n+impl<'tcx> PartialOrd for TyS<'tcx> {\n+    #[inline]\n+    fn partial_cmp(&self, other: &TyS<'tcx>) -> Option<Ordering> {\n+        Some(self.cmp(other))\n+    }\n+}\n+\n impl<'tcx> TyS<'tcx> {\n     pub fn is_primitive_ty(&self) -> bool {\n         match self.sty {\n@@ -566,6 +581,19 @@ impl<T> PartialEq for Slice<T> {\n }\n impl<T> Eq for Slice<T> {}\n \n+impl<T> Ord for Slice<T> {\n+    #[inline]\n+    fn cmp(&self, other: &Slice<T>) -> Ordering {\n+        (&self.0 as *const [T]).cmp(&(&other.0 as *const [T]))\n+    }\n+}\n+impl<T> PartialOrd for Slice<T> {\n+    #[inline]\n+    fn partial_cmp(&self, other: &Slice<T>) -> Option<Ordering> {\n+        Some(self.cmp(other))\n+    }\n+}\n+\n impl<T> Hash for Slice<T> {\n     fn hash<H: Hasher>(&self, s: &mut H) {\n         (self.as_ptr(), self.len()).hash(s)\n@@ -1101,7 +1129,7 @@ pub type PolySubtypePredicate<'tcx> = ty::Binder<SubtypePredicate<'tcx>>;\n /// equality between arbitrary types. Processing an instance of\n /// Form #2 eventually yields one of these `ProjectionPredicate`\n /// instances to normalize the LHS.\n-#[derive(Copy, Clone, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n+#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable)]\n pub struct ProjectionPredicate<'tcx> {\n     pub projection_ty: ProjectionTy<'tcx>,\n     pub ty: Ty<'tcx>,"}, {"sha": "55caffa2caf70a3f77b697f169f9e03eb55fd569", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c6772b4dcb95137e88d5cd1814ce0051f74a3c29/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6772b4dcb95137e88d5cd1814ce0051f74a3c29/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=c6772b4dcb95137e88d5cd1814ce0051f74a3c29", "patch": "@@ -646,7 +646,7 @@ impl<'tcx> PolyExistentialTraitRef<'tcx> {\n /// erase, or otherwise \"discharge\" these bound regions, we change the\n /// type from `Binder<T>` to just `T` (see\n /// e.g. `liberate_late_bound_regions`).\n-#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug, RustcEncodable, RustcDecodable)]\n+#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, RustcEncodable, RustcDecodable)]\n pub struct Binder<T>(pub T);\n \n impl<T> Binder<T> {\n@@ -746,7 +746,7 @@ impl<T> Binder<T> {\n \n /// Represents the projection of an associated type. In explicit UFCS\n /// form this would be written `<T as Trait<..>>::N`.\n-#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug, RustcEncodable, RustcDecodable)]\n+#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, RustcEncodable, RustcDecodable)]\n pub struct ProjectionTy<'tcx> {\n     /// The parameters of the associated item.\n     pub substs: &'tcx Substs<'tcx>,"}, {"sha": "7c167f69ebd8c063c504cd9c671437f212a0175c", "filename": "src/librustc/ty/subst.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6772b4dcb95137e88d5cd1814ce0051f74a3c29/src%2Flibrustc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6772b4dcb95137e88d5cd1814ce0051f74a3c29/src%2Flibrustc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsubst.rs?ref=c6772b4dcb95137e88d5cd1814ce0051f74a3c29", "patch": "@@ -29,7 +29,7 @@ use std::mem;\n /// To reduce memory usage, a `Kind` is a interned pointer,\n /// with the lowest 2 bits being reserved for a tag to\n /// indicate the type (`Ty` or `Region`) it points to.\n-#[derive(Copy, Clone, PartialEq, Eq, Hash)]\n+#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]\n pub struct Kind<'tcx> {\n     ptr: NonZero<usize>,\n     marker: PhantomData<(Ty<'tcx>, ty::Region<'tcx>)>"}]}