{"sha": "0ebb25b29b0988be89f42091fd373ea58d7ff9fb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlYmIyNWIyOWIwOTg4YmU4OWY0MjA5MWZkMzczZWE1OGQ3ZmY5ZmI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-25T13:55:25Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-25T13:59:49Z"}, "message": "Document `parentModule` experimental LSP request", "tree": {"sha": "06bb2df01d20d94ab38f2216d88555df03a826c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06bb2df01d20d94ab38f2216d88555df03a826c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ebb25b29b0988be89f42091fd373ea58d7ff9fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ebb25b29b0988be89f42091fd373ea58d7ff9fb", "html_url": "https://github.com/rust-lang/rust/commit/0ebb25b29b0988be89f42091fd373ea58d7ff9fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ebb25b29b0988be89f42091fd373ea58d7ff9fb/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a30bdd9795770329e4562d8bfca60ebe2e52dea1", "url": "https://api.github.com/repos/rust-lang/rust/commits/a30bdd9795770329e4562d8bfca60ebe2e52dea1", "html_url": "https://github.com/rust-lang/rust/commit/a30bdd9795770329e4562d8bfca60ebe2e52dea1"}], "stats": {"total": 102, "additions": 64, "deletions": 38}, "files": [{"sha": "345693524ea5f4a00e6e0788b42dd8253f19257b", "filename": "crates/rust-analyzer/src/caps.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0ebb25b29b0988be89f42091fd373ea58d7ff9fb/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ebb25b29b0988be89f42091fd373ea58d7ff9fb/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs?ref=0ebb25b29b0988be89f42091fd373ea58d7ff9fb", "patch": "@@ -86,6 +86,7 @@ pub fn server_capabilities(client_caps: &ClientCapabilities) -> ServerCapabiliti\n             \"joinLines\": true,\n             \"ssr\": true,\n             \"onEnter\": true,\n+            \"parentModule\": true,\n         })),\n     }\n }"}, {"sha": "acb1dacb6b6622eda78d09caceb37657e9d9446e", "filename": "crates/rust-analyzer/src/lsp_ext.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0ebb25b29b0988be89f42091fd373ea58d7ff9fb/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ebb25b29b0988be89f42091fd373ea58d7ff9fb/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs?ref=0ebb25b29b0988be89f42091fd373ea58d7ff9fb", "patch": "@@ -3,7 +3,7 @@\n use std::{collections::HashMap, path::PathBuf};\n \n use lsp_types::request::Request;\n-use lsp_types::{Location, Position, Range, TextDocumentIdentifier};\n+use lsp_types::{Position, Range, TextDocumentIdentifier};\n use rustc_hash::FxHashMap;\n use serde::{Deserialize, Serialize};\n \n@@ -79,8 +79,8 @@ pub enum ParentModule {}\n \n impl Request for ParentModule {\n     type Params = lsp_types::TextDocumentPositionParams;\n-    type Result = Vec<Location>;\n-    const METHOD: &'static str = \"rust-analyzer/parentModule\";\n+    type Result = Option<lsp_types::GotoDefinitionResponse>;\n+    const METHOD: &'static str = \"experimental/parentModule\";\n }\n \n pub enum JoinLines {}"}, {"sha": "1f910ff82b9377717c6a3d10c70793a92a0107e3", "filename": "crates/rust-analyzer/src/main_loop/handlers.rs", "status": "modified", "additions": 10, "deletions": 22, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/0ebb25b29b0988be89f42091fd373ea58d7ff9fb/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ebb25b29b0988be89f42091fd373ea58d7ff9fb/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=0ebb25b29b0988be89f42091fd373ea58d7ff9fb", "patch": "@@ -344,11 +344,8 @@ pub fn handle_goto_definition(\n         None => return Ok(None),\n         Some(it) => it,\n     };\n-    let res = to_proto::goto_definition_response(\n-        &world,\n-        FileRange { file_id: position.file_id, range: nav_info.range },\n-        nav_info.info,\n-    )?;\n+    let src = FileRange { file_id: position.file_id, range: nav_info.range };\n+    let res = to_proto::goto_definition_response(&world, Some(src), nav_info.info)?;\n     Ok(Some(res))\n }\n \n@@ -362,11 +359,8 @@ pub fn handle_goto_implementation(\n         None => return Ok(None),\n         Some(it) => it,\n     };\n-    let res = to_proto::goto_definition_response(\n-        &world,\n-        FileRange { file_id: position.file_id, range: nav_info.range },\n-        nav_info.info,\n-    )?;\n+    let src = FileRange { file_id: position.file_id, range: nav_info.range };\n+    let res = to_proto::goto_definition_response(&world, Some(src), nav_info.info)?;\n     Ok(Some(res))\n }\n \n@@ -380,26 +374,20 @@ pub fn handle_goto_type_definition(\n         None => return Ok(None),\n         Some(it) => it,\n     };\n-    let res = to_proto::goto_definition_response(\n-        &world,\n-        FileRange { file_id: position.file_id, range: nav_info.range },\n-        nav_info.info,\n-    )?;\n+    let src = FileRange { file_id: position.file_id, range: nav_info.range };\n+    let res = to_proto::goto_definition_response(&world, Some(src), nav_info.info)?;\n     Ok(Some(res))\n }\n \n pub fn handle_parent_module(\n     world: WorldSnapshot,\n     params: lsp_types::TextDocumentPositionParams,\n-) -> Result<Vec<Location>> {\n+) -> Result<Option<lsp_types::GotoDefinitionResponse>> {\n     let _p = profile(\"handle_parent_module\");\n     let position = from_proto::file_position(&world, params)?;\n-    world\n-        .analysis()\n-        .parent_module(position)?\n-        .into_iter()\n-        .map(|it| to_proto::location(&world, it.file_range()))\n-        .collect::<Result<Vec<_>>>()\n+    let navs = world.analysis().parent_module(position)?;\n+    let res = to_proto::goto_definition_response(&world, None, navs)?;\n+    Ok(Some(res))\n }\n \n pub fn handle_runnables("}, {"sha": "bb7594dbf309d439a8a45492ef003845e3140857", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0ebb25b29b0988be89f42091fd373ea58d7ff9fb/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ebb25b29b0988be89f42091fd373ea58d7ff9fb/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=0ebb25b29b0988be89f42091fd373ea58d7ff9fb", "patch": "@@ -403,13 +403,20 @@ pub(crate) fn location(world: &WorldSnapshot, frange: FileRange) -> Result<lsp_t\n \n pub(crate) fn location_link(\n     world: &WorldSnapshot,\n-    src: FileRange,\n+    src: Option<FileRange>,\n     target: NavigationTarget,\n ) -> Result<lsp_types::LocationLink> {\n-    let src_location = location(world, src)?;\n+    let origin_selection_range = match src {\n+        Some(src) => {\n+            let line_index = world.analysis().file_line_index(src.file_id)?;\n+            let range = range(&line_index, src.range);\n+            Some(range)\n+        }\n+        None => None,\n+    };\n     let (target_uri, target_range, target_selection_range) = location_info(world, target)?;\n     let res = lsp_types::LocationLink {\n-        origin_selection_range: Some(src_location.range),\n+        origin_selection_range,\n         target_uri,\n         target_range,\n         target_selection_range,\n@@ -432,7 +439,7 @@ fn location_info(\n \n pub(crate) fn goto_definition_response(\n     world: &WorldSnapshot,\n-    src: FileRange,\n+    src: Option<FileRange>,\n     targets: Vec<NavigationTarget>,\n ) -> Result<lsp_types::GotoDefinitionResponse> {\n     if world.config.client_caps.location_link {"}, {"sha": "209f470eba50be3bf4c032333616330daf0374e8", "filename": "docs/dev/lsp-extensions.md", "status": "modified", "additions": 35, "deletions": 5, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/0ebb25b29b0988be89f42091fd373ea58d7ff9fb/docs%2Fdev%2Flsp-extensions.md", "raw_url": "https://github.com/rust-lang/rust/raw/0ebb25b29b0988be89f42091fd373ea58d7ff9fb/docs%2Fdev%2Flsp-extensions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Flsp-extensions.md?ref=0ebb25b29b0988be89f42091fd373ea58d7ff9fb", "patch": "@@ -87,6 +87,40 @@ Invoking code action at this position will yield two code actions for importing\n * Is a fixed two-level structure enough?\n * Should we devise a general way to encode custom interaction protocols for GUI refactorings?\n \n+## Parent Module\n+\n+**Issue:** https://github.com/microsoft/language-server-protocol/issues/1002\n+\n+**Server Capability:** `{ \"parentModule\": boolean }`\n+\n+This request is send from client to server to handle \"Goto Parent Module\" editor action.\n+\n+**Method:** `experimental/parentModule`\n+\n+**Request:** `TextDocumentPositionParams`\n+\n+**Response:** `Location | Location[] | LocationLink[] | null`\n+\n+\n+### Example\n+\n+```rust\n+// src/main.rs\n+mod foo;\n+// src/foo.rs\n+\n+/* cursor here*/\n+```\n+\n+`experimental/parentModule` returns a single `Link` to the `mod foo;` declaration.\n+\n+### Unresolved Question\n+\n+* An alternative would be to use a more general \"gotoSuper\" request, which would work for super methods, super classes and super modules.\n+  This is the approach IntelliJ Rust is takeing.\n+  However, experience shows that super module (which generally has a feeling of navigation between files) should be separate.\n+  If you want super module, but the cursor happens to be inside an overriden function, the behavior with single \"gotoSuper\" request is surprising.\n+\n ## Join Lines\n \n **Issue:** https://github.com/microsoft/language-server-protocol/issues/992\n@@ -108,11 +142,7 @@ interface JoinLinesParams {\n }\n ```\n \n-**Response:**\n-\n-```typescript\n-TextEdit[]\n-```\n+**Response:** `TextEdit[]`\n \n ### Example\n "}, {"sha": "86302db37c1e58359a69d4e5295414f0d43d1e72", "filename": "editors/code/src/commands.ts", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0ebb25b29b0988be89f42091fd373ea58d7ff9fb/editors%2Fcode%2Fsrc%2Fcommands.ts", "raw_url": "https://github.com/rust-lang/rust/raw/0ebb25b29b0988be89f42091fd373ea58d7ff9fb/editors%2Fcode%2Fsrc%2Fcommands.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands.ts?ref=0ebb25b29b0988be89f42091fd373ea58d7ff9fb", "patch": "@@ -138,10 +138,10 @@ export function parentModule(ctx: Ctx): Cmd {\n             ),\n         });\n         const loc = response[0];\n-        if (loc == null) return;\n+        if (!loc) return;\n \n-        const uri = client.protocol2CodeConverter.asUri(loc.uri);\n-        const range = client.protocol2CodeConverter.asRange(loc.range);\n+        const uri = client.protocol2CodeConverter.asUri(loc.targetUri);\n+        const range = client.protocol2CodeConverter.asRange(loc.targetRange);\n \n         const doc = await vscode.workspace.openTextDocument(uri);\n         const e = await vscode.window.showTextDocument(doc);"}, {"sha": "4da12eb3092ac8ec5db17494580e5644a6d8df72", "filename": "editors/code/src/lsp_ext.ts", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ebb25b29b0988be89f42091fd373ea58d7ff9fb/editors%2Fcode%2Fsrc%2Flsp_ext.ts", "raw_url": "https://github.com/rust-lang/rust/raw/0ebb25b29b0988be89f42091fd373ea58d7ff9fb/editors%2Fcode%2Fsrc%2Flsp_ext.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Flsp_ext.ts?ref=0ebb25b29b0988be89f42091fd373ea58d7ff9fb", "patch": "@@ -31,7 +31,7 @@ export interface MatchingBraceParams {\n }\n export const matchingBrace = new lc.RequestType<MatchingBraceParams, lc.Position[], void>(\"experimental/matchingBrace\");\n \n-export const parentModule = new lc.RequestType<lc.TextDocumentPositionParams, lc.Location[], void>(\"rust-analyzer/parentModule\");\n+export const parentModule = new lc.RequestType<lc.TextDocumentPositionParams, lc.LocationLink[], void>(\"experimental/parentModule\");\n \n export interface JoinLinesParams {\n     textDocument: lc.TextDocumentIdentifier;"}]}