{"sha": "9349d9ee4826279e9ae4e76fe1bf67f18781174a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzNDlkOWVlNDgyNjI3OWU5YWU0ZTc2ZmUxYmY2N2YxODc4MTE3NGE=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2020-11-29T21:49:07Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2020-11-29T21:49:12Z"}, "message": "Show type of Self on hover", "tree": {"sha": "e3838f8f2724ce8a4ec239115aa578b383af2b1e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e3838f8f2724ce8a4ec239115aa578b383af2b1e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9349d9ee4826279e9ae4e76fe1bf67f18781174a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9349d9ee4826279e9ae4e76fe1bf67f18781174a", "html_url": "https://github.com/rust-lang/rust/commit/9349d9ee4826279e9ae4e76fe1bf67f18781174a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9349d9ee4826279e9ae4e76fe1bf67f18781174a/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65a789368a55416099a8b9d866abb5142273984e", "url": "https://api.github.com/repos/rust-lang/rust/commits/65a789368a55416099a8b9d866abb5142273984e", "html_url": "https://github.com/rust-lang/rust/commit/65a789368a55416099a8b9d866abb5142273984e"}], "stats": {"total": 119, "additions": 74, "deletions": 45}, "files": [{"sha": "462f5c2b8b9ccff4dc844611b790d5dffa839e53", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 74, "deletions": 45, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/9349d9ee4826279e9ae4e76fe1bf67f18781174a/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9349d9ee4826279e9ae4e76fe1bf67f18781174a/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=9349d9ee4826279e9ae4e76fe1bf67f18781174a", "patch": "@@ -295,7 +295,6 @@ fn definition_owner_name(db: &RootDatabase, def: &Definition) -> Option<String>\n             ModuleDef::EnumVariant(e) => Some(e.parent_enum(db).name(db)),\n             _ => None,\n         },\n-        Definition::SelfType(i) => i.target_ty(db).as_adt().map(|adt| adt.name(db)),\n         _ => None,\n     }\n     .map(|name| name.to_string())\n@@ -357,7 +356,14 @@ fn hover_for_definition(db: &RootDatabase, def: Definition) -> Option<Markup> {\n             ModuleDef::BuiltinType(it) => return Some(it.to_string().into()),\n         },\n         Definition::Local(it) => return Some(Markup::fenced_block(&it.ty(db).display(db))),\n-        Definition::TypeParam(_) | Definition::SelfType(_) => {\n+        Definition::SelfType(impl_def) => {\n+            impl_def.target_ty(db).as_adt().and_then(|adt| match adt {\n+                Adt::Struct(it) => from_def_source(db, it, mod_path),\n+                Adt::Union(it) => from_def_source(db, it, mod_path),\n+                Adt::Enum(it) => from_def_source(db, it, mod_path),\n+            })\n+        }\n+        Definition::TypeParam(_) => {\n             // FIXME: Hover for generic param\n             None\n         }\n@@ -1025,52 +1031,75 @@ impl Thing {\n }\n \"#,\n             expect![[r#\"\n-                *Self { x: 0 }*\n+                *Self*\n+\n                 ```rust\n-                Thing\n+                test\n+                ```\n+\n+                ```rust\n+                struct Thing\n                 ```\n             \"#]],\n-        )\n-    } /* FIXME: revive these tests\n-              let (analysis, position) = fixture::position(\n-                  \"\n-                  struct Thing { x: u32 }\n-                  impl Thing {\n-                      fn new() -> Self<|> {\n-                          Self { x: 0 }\n-                      }\n-                  }\n-                  \",\n-              );\n-\n-              let hover = analysis.hover(position).unwrap().unwrap();\n-              assert_eq!(trim_markup(&hover.info.markup.as_str()), (\"Thing\"));\n-\n-              let (analysis, position) = fixture::position(\n-                  \"\n-                  enum Thing { A }\n-                  impl Thing {\n-                      pub fn new() -> Self<|> {\n-                          Thing::A\n-                      }\n-                  }\n-                  \",\n-              );\n-              let hover = analysis.hover(position).unwrap().unwrap();\n-              assert_eq!(trim_markup(&hover.info.markup.as_str()), (\"enum Thing\"));\n-\n-              let (analysis, position) = fixture::position(\n-                  \"\n-                  enum Thing { A }\n-                  impl Thing {\n-                      pub fn thing(a: Self<|>) {\n-                      }\n-                  }\n-                  \",\n-              );\n-              let hover = analysis.hover(position).unwrap().unwrap();\n-              assert_eq!(trim_markup(&hover.info.markup.as_str()), (\"enum Thing\"));\n-      */\n+        );\n+        check(\n+            r#\"\n+struct Thing { x: u32 }\n+impl Thing {\n+    fn new() -> Self<|> { Self { x: 0 } }\n+}\n+\"#,\n+            expect![[r#\"\n+                *Self*\n+\n+                ```rust\n+                test\n+                ```\n+\n+                ```rust\n+                struct Thing\n+                ```\n+            \"#]],\n+        );\n+        check(\n+            r#\"\n+enum Thing { A }\n+impl Thing {\n+    pub fn new() -> Self<|> { Thing::A }\n+}\n+\"#,\n+            expect![[r#\"\n+                *Self*\n+\n+                ```rust\n+                test\n+                ```\n+\n+                ```rust\n+                enum Thing\n+                ```\n+            \"#]],\n+        );\n+        check(\n+            r#\"\n+        enum Thing { A }\n+        impl Thing {\n+            pub fn thing(a: Self<|>) {}\n+        }\n+        \"#,\n+            expect![[r#\"\n+                *Self*\n+\n+                ```rust\n+                test\n+                ```\n+\n+                ```rust\n+                enum Thing\n+                ```\n+            \"#]],\n+        );\n+    }\n \n     #[test]\n     fn test_hover_shadowing_pat() {"}]}