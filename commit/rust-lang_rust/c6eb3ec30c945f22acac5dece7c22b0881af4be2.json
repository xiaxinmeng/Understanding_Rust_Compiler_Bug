{"sha": "c6eb3ec30c945f22acac5dece7c22b0881af4be2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2ZWIzZWMzMGM5NDVmMjJhY2FjNWRlY2U3YzIyYjA4ODFhZjRiZTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-26T15:26:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-26T15:26:14Z"}, "message": "auto merge of #8758 : pnkfelix/rust/fsk-more-oldvisit-ports, r=pnkfelix\n\nFurther followup on #7081.\r\n\r\nThere still remains writeback.rs, but I want to wait to investigate that one because I've seen `make check` issues with it in the past.", "tree": {"sha": "c77579dc668a715f18763baaec44e33f68433829", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c77579dc668a715f18763baaec44e33f68433829"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6eb3ec30c945f22acac5dece7c22b0881af4be2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6eb3ec30c945f22acac5dece7c22b0881af4be2", "html_url": "https://github.com/rust-lang/rust/commit/c6eb3ec30c945f22acac5dece7c22b0881af4be2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6eb3ec30c945f22acac5dece7c22b0881af4be2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5fc211accf9b08d2e5dd8edd3c52d484e3910499", "url": "https://api.github.com/repos/rust-lang/rust/commits/5fc211accf9b08d2e5dd8edd3c52d484e3910499", "html_url": "https://github.com/rust-lang/rust/commit/5fc211accf9b08d2e5dd8edd3c52d484e3910499"}, {"sha": "2f82d89b2869adb4b1b17d19303676fa635d5df3", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f82d89b2869adb4b1b17d19303676fa635d5df3", "html_url": "https://github.com/rust-lang/rust/commit/2f82d89b2869adb4b1b17d19303676fa635d5df3"}], "stats": {"total": 200, "additions": 123, "deletions": 77}, "files": [{"sha": "942d5f1373d733e78eb1c384027952d5d3093019", "filename": "src/librustc/metadata/creader.rs", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c6eb3ec30c945f22acac5dece7c22b0881af4be2/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6eb3ec30c945f22acac5dece7c22b0881af4be2/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcreader.rs?ref=c6eb3ec30c945f22acac5dece7c22b0881af4be2", "patch": "@@ -25,7 +25,7 @@ use syntax::codemap::{span, dummy_sp};\n use syntax::diagnostic::span_handler;\n use syntax::parse::token;\n use syntax::parse::token::ident_interner;\n-use syntax::oldvisit;\n+use syntax::visit;\n \n // Traverses an AST, reading all the information about use'd crates and extern\n // libraries necessary for later resolving, typechecking, linking, etc.\n@@ -46,17 +46,25 @@ pub fn read_crates(diag: @mut span_handler,\n         next_crate_num: 1,\n         intr: intr\n     };\n-    let v =\n-        oldvisit::mk_simple_visitor(@oldvisit::SimpleVisitor {\n-            visit_view_item: |a| visit_view_item(e, a),\n-            visit_item: |a| visit_item(e, a),\n-            .. *oldvisit::default_simple_visitor()});\n+    let mut v = ReadCrateVisitor{ e:e };\n     visit_crate(e, crate);\n-    oldvisit::visit_crate(crate, ((), v));\n+    visit::walk_crate(&mut v, crate, ());\n     dump_crates(*e.crate_cache);\n     warn_if_multiple_versions(e, diag, *e.crate_cache);\n }\n \n+struct ReadCrateVisitor { e:@mut Env }\n+impl visit::Visitor<()> for ReadCrateVisitor {\n+    fn visit_view_item(&mut self, a:&ast::view_item, _:()) {\n+        visit_view_item(self.e, a);\n+        visit::walk_view_item(self, a, ());\n+    }\n+    fn visit_item(&mut self, a:@ast::item, _:()) {\n+        visit_item(self.e, a);\n+        visit::walk_item(self, a, ());\n+    }\n+}\n+\n #[deriving(Clone)]\n struct cache_entry {\n     cnum: int,"}, {"sha": "5a2e3a4b760f742ade80c897364e37ad8c2dd39c", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c6eb3ec30c945f22acac5dece7c22b0881af4be2/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6eb3ec30c945f22acac5dece7c22b0881af4be2/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=c6eb3ec30c945f22acac5dece7c22b0881af4be2", "patch": "@@ -56,7 +56,7 @@ use syntax::visit::Visitor;\n  * lint attributes.\n  *\n  * At each node of the ast which can modify lint attributes, all known lint\n- * passes are also applied.  Each lint pass is an oldvisit::vt<()> structure.\n+ * passes are also applied.  Each lint pass is a visit::Visitor implementator.\n  * The visitors are constructed via the lint_*() functions below. There are\n  * also some lint checks which operate directly on ast nodes (such as\n  * @ast::item), and those are organized as check_item_*(). Each visitor added\n@@ -508,7 +508,7 @@ impl Context {\n         }\n     }\n \n-    fn add_oldvisit_lint(&mut self, v: @mut OuterLint) {\n+    fn add_old_lint(&mut self, v: @mut OuterLint) {\n         self.visitors.push(OldVisitor(v, v.inner_variant()));\n     }\n \n@@ -547,7 +547,7 @@ impl Context {\n                     }\n                 }\n             }\n-            // Can't use oldvisit::visit_method_helper because the\n+            // Can't use visit::walk_method_helper because the\n             // item_stopping_visitor has overridden visit_fn(&fk_method(... ))\n             // to be a no-op, so manually invoke visit_fn.\n             Method(m) => {\n@@ -1450,14 +1450,14 @@ pub fn check_crate(tcx: ty::ctxt, crate: @ast::Crate) {\n     }\n \n     // Register each of the lint passes with the context\n-    cx.add_oldvisit_lint(lint_while_true());\n-    cx.add_oldvisit_lint(lint_path_statement());\n-    cx.add_oldvisit_lint(lint_heap());\n-    cx.add_oldvisit_lint(lint_type_limits());\n-    cx.add_oldvisit_lint(lint_unused_unsafe());\n-    cx.add_oldvisit_lint(lint_unused_mut());\n-    cx.add_oldvisit_lint(lint_unnecessary_allocations());\n-    cx.add_oldvisit_lint(lint_missing_doc());\n+    cx.add_old_lint(lint_while_true());\n+    cx.add_old_lint(lint_path_statement());\n+    cx.add_old_lint(lint_heap());\n+    cx.add_old_lint(lint_type_limits());\n+    cx.add_old_lint(lint_unused_unsafe());\n+    cx.add_old_lint(lint_unused_mut());\n+    cx.add_old_lint(lint_unnecessary_allocations());\n+    cx.add_old_lint(lint_missing_doc());\n     cx.add_lint(lint_session(cx));\n \n     // Actually perform the lint checks (iterating the ast)"}, {"sha": "7b3fad0b36b2212f528e6871665e6f7052e76db5", "filename": "src/librustc/middle/moves.rs", "status": "modified", "additions": 41, "deletions": 29, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/c6eb3ec30c945f22acac5dece7c22b0881af4be2/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6eb3ec30c945f22acac5dece7c22b0881af4be2/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmoves.rs?ref=c6eb3ec30c945f22acac5dece7c22b0881af4be2", "patch": "@@ -139,8 +139,8 @@ use std::at_vec;\n use std::hashmap::{HashSet, HashMap};\n use syntax::ast::*;\n use syntax::ast_util;\n-use syntax::oldvisit;\n-use syntax::oldvisit::vt;\n+use syntax::visit;\n+use syntax::visit::Visitor;\n use syntax::codemap::span;\n \n #[deriving(Encodable, Decodable)]\n@@ -190,16 +190,26 @@ enum UseMode {\n     Read         // Read no matter what the type.\n }\n \n+struct ComputeModesVisitor;\n+\n+impl visit::Visitor<VisitContext> for ComputeModesVisitor {\n+    fn visit_fn(&mut self, fk:&visit::fn_kind, fd:&fn_decl,\n+                b:&Block, s:span, n:NodeId, e:VisitContext) {\n+        compute_modes_for_fn(*self, fk, fd, b, s, n, e);\n+    }\n+    fn visit_expr(&mut self, ex:@expr, e:VisitContext) {\n+        compute_modes_for_expr(*self, ex, e);\n+    }\n+    fn visit_local(&mut self, l:@Local, e:VisitContext) {\n+        compute_modes_for_local(*self, l, e);\n+    }\n+}\n+\n pub fn compute_moves(tcx: ty::ctxt,\n                      method_map: method_map,\n                      crate: &Crate) -> MoveMaps\n {\n-    let visitor = oldvisit::mk_vt(@oldvisit::Visitor {\n-        visit_fn: compute_modes_for_fn,\n-        visit_expr: compute_modes_for_expr,\n-        visit_local: compute_modes_for_local,\n-        .. *oldvisit::default_visitor()\n-    });\n+    let mut visitor = ComputeModesVisitor;\n     let visit_cx = VisitContext {\n         tcx: tcx,\n         method_map: method_map,\n@@ -209,7 +219,7 @@ pub fn compute_moves(tcx: ty::ctxt,\n             moved_variables_set: @mut HashSet::new()\n         }\n     };\n-    oldvisit::visit_crate(crate, (visit_cx, visitor));\n+    visit::walk_crate(&mut visitor, crate, visit_cx);\n     return visit_cx.move_maps;\n }\n \n@@ -227,43 +237,44 @@ pub fn moved_variable_node_id_from_def(def: def) -> Option<NodeId> {\n ///////////////////////////////////////////////////////////////////////////\n // Expressions\n \n-fn compute_modes_for_local<'a>(local: @Local,\n-                               (cx, v): (VisitContext,\n-                                         vt<VisitContext>)) {\n+fn compute_modes_for_local<'a>(v: ComputeModesVisitor,\n+                               local: @Local,\n+                               cx: VisitContext) {\n     cx.use_pat(local.pat);\n     for &init in local.init.iter() {\n         cx.use_expr(init, Read, v);\n     }\n }\n \n-fn compute_modes_for_fn(fk: &oldvisit::fn_kind,\n+fn compute_modes_for_fn(v: ComputeModesVisitor,\n+                        fk: &visit::fn_kind,\n                         decl: &fn_decl,\n                         body: &Block,\n                         span: span,\n                         id: NodeId,\n-                        (cx, v): (VisitContext,\n-                                  vt<VisitContext>)) {\n+                        cx: VisitContext) {\n+    let mut v = v;\n     for a in decl.inputs.iter() {\n         cx.use_pat(a.pat);\n     }\n-    oldvisit::visit_fn(fk, decl, body, span, id, (cx, v));\n+    visit::walk_fn(&mut v, fk, decl, body, span, id, cx);\n }\n \n-fn compute_modes_for_expr(expr: @expr,\n-                          (cx, v): (VisitContext,\n-                                    vt<VisitContext>))\n+fn compute_modes_for_expr(v: ComputeModesVisitor,\n+                          expr: @expr,\n+                          cx: VisitContext)\n {\n     cx.consume_expr(expr, v);\n }\n \n impl VisitContext {\n-    pub fn consume_exprs(&self, exprs: &[@expr], visitor: vt<VisitContext>) {\n+    pub fn consume_exprs(&self, exprs: &[@expr], visitor: ComputeModesVisitor) {\n         for expr in exprs.iter() {\n             self.consume_expr(*expr, visitor);\n         }\n     }\n \n-    pub fn consume_expr(&self, expr: @expr, visitor: vt<VisitContext>) {\n+    pub fn consume_expr(&self, expr: @expr, visitor: ComputeModesVisitor) {\n         /*!\n          * Indicates that the value of `expr` will be consumed,\n          * meaning either copied or moved depending on its type.\n@@ -281,7 +292,7 @@ impl VisitContext {\n         };\n     }\n \n-    pub fn consume_block(&self, blk: &Block, visitor: vt<VisitContext>) {\n+    pub fn consume_block(&self, blk: &Block, visitor: ComputeModesVisitor) {\n         /*!\n          * Indicates that the value of `blk` will be consumed,\n          * meaning either copied or moved depending on its type.\n@@ -290,7 +301,8 @@ impl VisitContext {\n         debug!(\"consume_block(blk.id=%?)\", blk.id);\n \n         for stmt in blk.stmts.iter() {\n-            (visitor.visit_stmt)(*stmt, (*self, visitor));\n+            let mut v = visitor;\n+            v.visit_stmt(*stmt, *self);\n         }\n \n         for tail_expr in blk.expr.iter() {\n@@ -301,7 +313,7 @@ impl VisitContext {\n     pub fn use_expr(&self,\n                     expr: @expr,\n                     expr_mode: UseMode,\n-                    visitor: vt<VisitContext>) {\n+                    visitor: ComputeModesVisitor) {\n         /*!\n          * Indicates that `expr` is used with a given mode.  This will\n          * in turn trigger calls to the subcomponents of `expr`.\n@@ -570,7 +582,7 @@ impl VisitContext {\n                                    expr: &expr,\n                                    receiver_expr: @expr,\n                                    arg_exprs: &[@expr],\n-                                   visitor: vt<VisitContext>)\n+                                   visitor: ComputeModesVisitor)\n                                    -> bool {\n         if !self.method_map.contains_key(&expr.id) {\n             return false;\n@@ -587,7 +599,7 @@ impl VisitContext {\n         return true;\n     }\n \n-    pub fn consume_arm(&self, arm: &arm, visitor: vt<VisitContext>) {\n+    pub fn consume_arm(&self, arm: &arm, visitor: ComputeModesVisitor) {\n         for pat in arm.pats.iter() {\n             self.use_pat(*pat);\n         }\n@@ -630,21 +642,21 @@ impl VisitContext {\n \n     pub fn use_receiver(&self,\n                         receiver_expr: @expr,\n-                        visitor: vt<VisitContext>) {\n+                        visitor: ComputeModesVisitor) {\n         self.use_fn_arg(receiver_expr, visitor);\n     }\n \n     pub fn use_fn_args(&self,\n                        _: NodeId,\n                        arg_exprs: &[@expr],\n-                       visitor: vt<VisitContext>) {\n+                       visitor: ComputeModesVisitor) {\n         //! Uses the argument expressions.\n         for arg_expr in arg_exprs.iter() {\n             self.use_fn_arg(*arg_expr, visitor);\n         }\n     }\n \n-    pub fn use_fn_arg(&self, arg_expr: @expr, visitor: vt<VisitContext>) {\n+    pub fn use_fn_arg(&self, arg_expr: @expr, visitor: ComputeModesVisitor) {\n         //! Uses the argument.\n         self.consume_expr(arg_expr, visitor)\n     }"}, {"sha": "4266b051c687598bd206dfa317a668c9bbaa585c", "filename": "src/librustc/middle/stack_check.rs", "status": "modified", "additions": 37, "deletions": 20, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/c6eb3ec30c945f22acac5dece7c22b0881af4be2/src%2Flibrustc%2Fmiddle%2Fstack_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6eb3ec30c945f22acac5dece7c22b0881af4be2/src%2Flibrustc%2Fmiddle%2Fstack_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstack_check.rs?ref=c6eb3ec30c945f22acac5dece7c22b0881af4be2", "patch": "@@ -22,7 +22,8 @@ use syntax::ast;\n use syntax::ast_map;\n use syntax::attr;\n use syntax::codemap::span;\n-use visit = syntax::oldvisit;\n+use syntax::visit;\n+use syntax::visit::Visitor;\n use util::ppaux::Repr;\n \n #[deriving(Clone)]\n@@ -31,44 +32,56 @@ struct Context {\n     safe_stack: bool\n }\n \n+struct StackCheckVisitor;\n+\n+impl Visitor<Context> for StackCheckVisitor {\n+    fn visit_item(&mut self, i:@ast::item, e:Context) {\n+        stack_check_item(*self, i, e);\n+    }\n+    fn visit_fn(&mut self, fk:&visit::fn_kind, fd:&ast::fn_decl,\n+                b:&ast::Block, s:span, n:ast::NodeId, e:Context) {\n+        stack_check_fn(*self, fk, fd, b, s, n, e);\n+    }\n+    fn visit_expr(&mut self, ex:@ast::expr, e:Context) {\n+        stack_check_expr(*self, ex, e);\n+    }\n+}\n+\n pub fn stack_check_crate(tcx: ty::ctxt,\n                          crate: &ast::Crate) {\n     let new_cx = Context {\n         tcx: tcx,\n         safe_stack: false\n     };\n-    let visitor = visit::mk_vt(@visit::Visitor {\n-        visit_item: stack_check_item,\n-        visit_fn: stack_check_fn,\n-        visit_expr: stack_check_expr,\n-        ..*visit::default_visitor()\n-    });\n-    visit::visit_crate(crate, (new_cx, visitor));\n+    let mut visitor = StackCheckVisitor;\n+    visit::walk_crate(&mut visitor, crate, new_cx);\n }\n \n-fn stack_check_item(item: @ast::item,\n-                    (in_cx, v): (Context, visit::vt<Context>)) {\n+fn stack_check_item(v: StackCheckVisitor,\n+                    item: @ast::item,\n+                    in_cx: Context) {\n+    let mut v = v;\n     match item.node {\n         ast::item_fn(_, ast::extern_fn, _, _, _) => {\n             // an extern fn is already being called from C code...\n             let new_cx = Context {safe_stack: true, ..in_cx};\n-            visit::visit_item(item, (new_cx, v));\n+            visit::walk_item(&mut v, item, new_cx);\n         }\n         ast::item_fn(*) => {\n             let safe_stack = fixed_stack_segment(item.attrs);\n             let new_cx = Context {safe_stack: safe_stack, ..in_cx};\n-            visit::visit_item(item, (new_cx, v));\n+            visit::walk_item(&mut v, item, new_cx);\n         }\n         ast::item_impl(_, _, _, ref methods) => {\n             // visit_method() would make this nicer\n             for &method in methods.iter() {\n                 let safe_stack = fixed_stack_segment(method.attrs);\n                 let new_cx = Context {safe_stack: safe_stack, ..in_cx};\n-                visit::visit_method_helper(method, (new_cx, v));\n+                visit::walk_method_helper(&mut v, method, new_cx);\n             }\n         }\n         _ => {\n-            visit::visit_item(item, (in_cx, v));\n+            visit::walk_item(&mut v, item, in_cx);\n         }\n     }\n \n@@ -77,12 +90,13 @@ fn stack_check_item(item: @ast::item,\n     }\n }\n \n-fn stack_check_fn<'a>(fk: &visit::fn_kind,\n+fn stack_check_fn<'a>(v: StackCheckVisitor,\n+                      fk: &visit::fn_kind,\n                       decl: &ast::fn_decl,\n                       body: &ast::Block,\n                       sp: span,\n                       id: ast::NodeId,\n-                      (in_cx, v): (Context, visit::vt<Context>)) {\n+                      in_cx: Context) {\n     let safe_stack = match *fk {\n         visit::fk_method(*) | visit::fk_item_fn(*) => {\n             in_cx.safe_stack // see stack_check_item above\n@@ -102,11 +116,13 @@ fn stack_check_fn<'a>(fk: &visit::fn_kind,\n     };\n     let new_cx = Context {safe_stack: safe_stack, ..in_cx};\n     debug!(\"stack_check_fn(safe_stack=%b, id=%?)\", safe_stack, id);\n-    visit::visit_fn(fk, decl, body, sp, id, (new_cx, v));\n+    let mut v = v;\n+    visit::walk_fn(&mut v, fk, decl, body, sp, id, new_cx);\n }\n \n-fn stack_check_expr<'a>(expr: @ast::expr,\n-                        (cx, v): (Context, visit::vt<Context>)) {\n+fn stack_check_expr<'a>(v: StackCheckVisitor,\n+                        expr: @ast::expr,\n+                        cx: Context) {\n     debug!(\"stack_check_expr(safe_stack=%b, expr=%s)\",\n            cx.safe_stack, expr.repr(cx.tcx));\n     if !cx.safe_stack {\n@@ -126,7 +142,8 @@ fn stack_check_expr<'a>(expr: @ast::expr,\n             _ => {}\n         }\n     }\n-    visit::visit_expr(expr, (cx, v));\n+    let mut v = v;\n+    visit::walk_expr(&mut v, expr, cx);\n }\n \n fn call_to_extern_fn(cx: Context, callee: @ast::expr) {"}, {"sha": "715c25c4a197fd6d7534d6bafde267d872f657d4", "filename": "src/librustc/middle/typeck/check/vtable.rs", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/c6eb3ec30c945f22acac5dece7c22b0881af4be2/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6eb3ec30c945f22acac5dece7c22b0881af4be2/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs?ref=c6eb3ec30c945f22acac5dece7c22b0881af4be2", "patch": "@@ -29,7 +29,8 @@ use syntax::ast;\n use syntax::ast_util;\n use syntax::codemap::span;\n use syntax::print::pprust::expr_to_str;\n-use syntax::oldvisit;\n+use syntax::visit;\n+use syntax::visit::Visitor;\n \n // vtable resolution looks for places where trait bounds are\n // substituted in and figures out which vtable is used. There is some\n@@ -712,11 +713,11 @@ pub fn early_resolve_expr(ex: @ast::expr,\n     }\n }\n \n-fn resolve_expr(ex: @ast::expr,\n-                (fcx, v): (@mut FnCtxt,\n-                           oldvisit::vt<@mut FnCtxt>)) {\n+fn resolve_expr(v: &mut VtableResolveVisitor,\n+                ex: @ast::expr,\n+                fcx: @mut FnCtxt) {\n     early_resolve_expr(ex, fcx, false);\n-    oldvisit::visit_expr(ex, (fcx, v));\n+    visit::walk_expr(v, ex, fcx);\n }\n \n pub fn resolve_impl(ccx: @mut CrateCtxt, impl_item: @ast::item) {\n@@ -763,12 +764,20 @@ pub fn resolve_impl(ccx: @mut CrateCtxt, impl_item: @ast::item) {\n     }\n }\n \n+struct VtableResolveVisitor;\n+\n+impl visit::Visitor<@mut FnCtxt> for VtableResolveVisitor {\n+    fn visit_expr(&mut self, ex:@ast::expr, e:@mut FnCtxt) {\n+        resolve_expr(self, ex, e);\n+    }\n+    fn visit_item(&mut self, _:@ast::item, _:@mut FnCtxt) {\n+        // no-op\n+    }\n+}\n+\n // Detect points where a trait-bounded type parameter is\n // instantiated, resolve the impls for the parameters.\n pub fn resolve_in_block(fcx: @mut FnCtxt, bl: &ast::Block) {\n-    oldvisit::visit_block(bl, (fcx, oldvisit::mk_vt(@oldvisit::Visitor {\n-        visit_expr: resolve_expr,\n-        visit_item: |_,_| {},\n-        .. *oldvisit::default_visitor()\n-    })));\n+    let mut visitor = VtableResolveVisitor;\n+    visit::walk_block(&mut visitor, bl, fcx);\n }"}]}