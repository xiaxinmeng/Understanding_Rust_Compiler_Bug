{"sha": "5a54945b6f637eadd4848874db39b49d2764839f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhNTQ5NDViNmY2MzdlYWRkNDg0ODg3NGRiMzliNDlkMjc2NDgzOWY=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-08-08T22:53:32Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-08-09T14:18:05Z"}, "message": "Extend suggestion support for traits and foreign items", "tree": {"sha": "f2fbe78268168899c3f438814fc841a7a20491a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f2fbe78268168899c3f438814fc841a7a20491a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a54945b6f637eadd4848874db39b49d2764839f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a54945b6f637eadd4848874db39b49d2764839f", "html_url": "https://github.com/rust-lang/rust/commit/5a54945b6f637eadd4848874db39b49d2764839f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a54945b6f637eadd4848874db39b49d2764839f/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52da091ee687f3d065713626a10b4cc961f04f75", "url": "https://api.github.com/repos/rust-lang/rust/commits/52da091ee687f3d065713626a10b4cc961f04f75", "html_url": "https://github.com/rust-lang/rust/commit/52da091ee687f3d065713626a10b4cc961f04f75"}], "stats": {"total": 178, "additions": 161, "deletions": 17}, "files": [{"sha": "d389563aea639e8f6975920c76babc96d2765987", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/5a54945b6f637eadd4848874db39b49d2764839f/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a54945b6f637eadd4848874db39b49d2764839f/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=5a54945b6f637eadd4848874db39b49d2764839f", "patch": "@@ -3858,11 +3858,20 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     Some(Node::Item(hir::Item {\n                         node: ItemKind::Fn(.., body_id),\n                         ..\n+                    })) |\n+                    Some(Node::ImplItem(hir::ImplItem {\n+                        node: hir::ImplItemKind::Method(_, body_id),\n+                        ..\n+                    })) |\n+                    Some(Node::TraitItem(hir::TraitItem {\n+                        node: hir::TraitItemKind::Method(.., hir::TraitMethod::Provided(body_id)),\n+                        ..\n                     })) => {\n                         let body = hir.body(*body_id);\n                         sugg_call = body.arguments.iter()\n                             .map(|arg| match &arg.pat.node {\n-                                hir::PatKind::Binding(_, _, ident, None) => ident.to_string(),\n+                                hir::PatKind::Binding(_, _, ident, None)\n+                                if ident.name != kw::SelfLower => ident.to_string(),\n                                 _ => \"_\".to_string(),\n                             }).collect::<Vec<_>>().join(\", \");\n                     }\n@@ -3878,6 +3887,20 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             _ => {}\n                         }\n                     }\n+                    Some(Node::ForeignItem(hir::ForeignItem {\n+                        node: hir::ForeignItemKind::Fn(_, idents, _),\n+                        ..\n+                    })) |\n+                    Some(Node::TraitItem(hir::TraitItem {\n+                        node: hir::TraitItemKind::Method(.., hir::TraitMethod::Required(idents)),\n+                        ..\n+                    })) => sugg_call = idents.iter()\n+                            .map(|ident| if ident.name != kw::SelfLower {\n+                                ident.to_string()\n+                            } else {\n+                                \"_\".to_string()\n+                            }).collect::<Vec<_>>()\n+                            .join(\", \"),\n                     _ => {}\n                 }\n             };"}, {"sha": "9b6b10748172b6b3295ddd03b95b111a7f666b44", "filename": "src/test/ui/suggestions/fn-or-tuple-struct-without-args.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5a54945b6f637eadd4848874db39b49d2764839f/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-without-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a54945b6f637eadd4848874db39b49d2764839f/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-without-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-without-args.rs?ref=5a54945b6f637eadd4848874db39b49d2764839f", "patch": "@@ -11,7 +11,18 @@ struct V();\n \n trait T {\n     fn baz(x: usize, y: usize) -> usize { x }\n-    fn bat() -> usize { 42 }\n+    fn bat(x: usize) -> usize { 42 }\n+    fn bax(x: usize) -> usize { 42 }\n+    fn bach(x: usize) -> usize;\n+    fn ban(&self) -> usize { 42 }\n+    fn bal(&self) -> usize;\n+}\n+\n+struct X;\n+\n+impl T for X {\n+    fn bach(x: usize) -> usize { 42 }\n+    fn bal(&self) -> usize { 42 }\n }\n \n fn main() {\n@@ -23,4 +34,12 @@ fn main() {\n     let _: usize = T::bat; //~ ERROR mismatched types\n     let _: E = E::A; //~ ERROR mismatched types\n     let _: E = E::B; //~ ERROR expected value, found struct variant `E::B`\n+    let _: usize = X::baz; //~ ERROR mismatched types\n+    let _: usize = X::bat; //~ ERROR mismatched types\n+    let _: usize = X::bax; //~ ERROR mismatched types\n+    let _: usize = X::bach; //~ ERROR mismatched types\n+    let _: usize = X::ban; //~ ERROR mismatched types\n+    let _: usize = X::bal; //~ ERROR mismatched types\n+    let _: usize = X.ban; //~ ERROR attempted to take value of method\n+    let _: usize = X.bal; //~ ERROR attempted to take value of method\n }"}, {"sha": "e3012144513fd89ab547e8c91db8f4b8a3a47c30", "filename": "src/test/ui/suggestions/fn-or-tuple-struct-without-args.stderr", "status": "modified", "additions": 117, "deletions": 15, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/5a54945b6f637eadd4848874db39b49d2764839f/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-without-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a54945b6f637eadd4848874db39b49d2764839f/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-without-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-without-args.stderr?ref=5a54945b6f637eadd4848874db39b49d2764839f", "patch": "@@ -1,5 +1,5 @@\n error[E0423]: expected value, found struct variant `E::B`\n-  --> $DIR/fn-or-tuple-struct-without-args.rs:25:16\n+  --> $DIR/fn-or-tuple-struct-without-args.rs:36:16\n    |\n LL |     let _: E = E::B;\n    |                ^^^-\n@@ -8,7 +8,7 @@ LL |     let _: E = E::B;\n    |                did you mean `E::B { /* fields */ }`?\n \n error[E0308]: mismatched types\n-  --> $DIR/fn-or-tuple-struct-without-args.rs:18:20\n+  --> $DIR/fn-or-tuple-struct-without-args.rs:29:20\n    |\n LL | fn foo(a: usize, b: usize) -> usize { a }\n    | ----------------------------------- fn(usize, usize) -> usize {foo} defined here\n@@ -23,7 +23,7 @@ LL |     let _: usize = foo;\n               found type `fn(usize, usize) -> usize {foo}`\n \n error[E0308]: mismatched types\n-  --> $DIR/fn-or-tuple-struct-without-args.rs:19:16\n+  --> $DIR/fn-or-tuple-struct-without-args.rs:30:16\n    |\n LL | struct S(usize, usize);\n    | ----------------------- fn(usize, usize) -> S {S} defined here\n@@ -38,7 +38,7 @@ LL |     let _: S = S;\n               found type `fn(usize, usize) -> S {S}`\n \n error[E0308]: mismatched types\n-  --> $DIR/fn-or-tuple-struct-without-args.rs:20:20\n+  --> $DIR/fn-or-tuple-struct-without-args.rs:31:20\n    |\n LL | fn bar() -> usize { 42 }\n    | ----------------- fn() -> usize {bar} defined here\n@@ -53,7 +53,7 @@ LL |     let _: usize = bar;\n               found type `fn() -> usize {bar}`\n \n error[E0308]: mismatched types\n-  --> $DIR/fn-or-tuple-struct-without-args.rs:21:16\n+  --> $DIR/fn-or-tuple-struct-without-args.rs:32:16\n    |\n LL | struct V();\n    | ----------- fn() -> V {V} defined here\n@@ -68,7 +68,7 @@ LL |     let _: V = V;\n               found type `fn() -> V {V}`\n \n error[E0308]: mismatched types\n-  --> $DIR/fn-or-tuple-struct-without-args.rs:22:20\n+  --> $DIR/fn-or-tuple-struct-without-args.rs:33:20\n    |\n LL |     fn baz(x: usize, y: usize) -> usize { x }\n    |     ----------------------------------- fn(usize, usize) -> usize {<_ as T>::baz} defined here\n@@ -77,28 +77,28 @@ LL |     let _: usize = T::baz;\n    |                    ^^^^^^\n    |                    |\n    |                    expected usize, found fn item\n-   |                    help: use parentheses to call this function: `T::baz(...)`\n+   |                    help: use parentheses to call this function: `T::baz(x, y)`\n    |\n    = note: expected type `usize`\n               found type `fn(usize, usize) -> usize {<_ as T>::baz}`\n \n error[E0308]: mismatched types\n-  --> $DIR/fn-or-tuple-struct-without-args.rs:23:20\n+  --> $DIR/fn-or-tuple-struct-without-args.rs:34:20\n    |\n-LL |     fn bat() -> usize { 42 }\n-   |     ----------------- fn() -> usize {<_ as T>::bat} defined here\n+LL |     fn bat(x: usize) -> usize { 42 }\n+   |     ------------------------- fn(usize) -> usize {<_ as T>::bat} defined here\n ...\n LL |     let _: usize = T::bat;\n    |                    ^^^^^^\n    |                    |\n    |                    expected usize, found fn item\n-   |                    help: use parentheses to call this function: `T::bat()`\n+   |                    help: use parentheses to call this function: `T::bat(x)`\n    |\n    = note: expected type `usize`\n-              found type `fn() -> usize {<_ as T>::bat}`\n+              found type `fn(usize) -> usize {<_ as T>::bat}`\n \n error[E0308]: mismatched types\n-  --> $DIR/fn-or-tuple-struct-without-args.rs:24:16\n+  --> $DIR/fn-or-tuple-struct-without-args.rs:35:16\n    |\n LL |     A(usize),\n    |     -------- fn(usize) -> E {E::A} defined here\n@@ -112,7 +112,109 @@ LL |     let _: E = E::A;\n    = note: expected type `E`\n               found type `fn(usize) -> E {E::A}`\n \n-error: aborting due to 8 previous errors\n+error[E0308]: mismatched types\n+  --> $DIR/fn-or-tuple-struct-without-args.rs:37:20\n+   |\n+LL |     fn baz(x: usize, y: usize) -> usize { x }\n+   |     ----------------------------------- fn(usize, usize) -> usize {<X as T>::baz} defined here\n+...\n+LL |     let _: usize = X::baz;\n+   |                    ^^^^^^\n+   |                    |\n+   |                    expected usize, found fn item\n+   |                    help: use parentheses to call this function: `X::baz(x, y)`\n+   |\n+   = note: expected type `usize`\n+              found type `fn(usize, usize) -> usize {<X as T>::baz}`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/fn-or-tuple-struct-without-args.rs:38:20\n+   |\n+LL |     fn bat(x: usize) -> usize { 42 }\n+   |     ------------------------- fn(usize) -> usize {<X as T>::bat} defined here\n+...\n+LL |     let _: usize = X::bat;\n+   |                    ^^^^^^\n+   |                    |\n+   |                    expected usize, found fn item\n+   |                    help: use parentheses to call this function: `X::bat(x)`\n+   |\n+   = note: expected type `usize`\n+              found type `fn(usize) -> usize {<X as T>::bat}`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/fn-or-tuple-struct-without-args.rs:39:20\n+   |\n+LL |     fn bax(x: usize) -> usize { 42 }\n+   |     ------------------------- fn(usize) -> usize {<X as T>::bax} defined here\n+...\n+LL |     let _: usize = X::bax;\n+   |                    ^^^^^^\n+   |                    |\n+   |                    expected usize, found fn item\n+   |                    help: use parentheses to call this function: `X::bax(x)`\n+   |\n+   = note: expected type `usize`\n+              found type `fn(usize) -> usize {<X as T>::bax}`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/fn-or-tuple-struct-without-args.rs:40:20\n+   |\n+LL |     fn bach(x: usize) -> usize;\n+   |     --------------------------- fn(usize) -> usize {<X as T>::bach} defined here\n+...\n+LL |     let _: usize = X::bach;\n+   |                    ^^^^^^^\n+   |                    |\n+   |                    expected usize, found fn item\n+   |                    help: use parentheses to call this function: `X::bach(x)`\n+   |\n+   = note: expected type `usize`\n+              found type `fn(usize) -> usize {<X as T>::bach}`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/fn-or-tuple-struct-without-args.rs:41:20\n+   |\n+LL |     fn ban(&self) -> usize { 42 }\n+   |     ---------------------- for<'r> fn(&'r X) -> usize {<X as T>::ban} defined here\n+...\n+LL |     let _: usize = X::ban;\n+   |                    ^^^^^^\n+   |                    |\n+   |                    expected usize, found fn item\n+   |                    help: use parentheses to call this function: `X::ban(_)`\n+   |\n+   = note: expected type `usize`\n+              found type `for<'r> fn(&'r X) -> usize {<X as T>::ban}`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/fn-or-tuple-struct-without-args.rs:42:20\n+   |\n+LL |     fn bal(&self) -> usize;\n+   |     ----------------------- for<'r> fn(&'r X) -> usize {<X as T>::bal} defined here\n+...\n+LL |     let _: usize = X::bal;\n+   |                    ^^^^^^\n+   |                    |\n+   |                    expected usize, found fn item\n+   |                    help: use parentheses to call this function: `X::bal(_)`\n+   |\n+   = note: expected type `usize`\n+              found type `for<'r> fn(&'r X) -> usize {<X as T>::bal}`\n+\n+error[E0615]: attempted to take value of method `ban` on type `X`\n+  --> $DIR/fn-or-tuple-struct-without-args.rs:43:22\n+   |\n+LL |     let _: usize = X.ban;\n+   |                      ^^^ help: use parentheses to call the method: `ban()`\n+\n+error[E0615]: attempted to take value of method `bal` on type `X`\n+  --> $DIR/fn-or-tuple-struct-without-args.rs:44:22\n+   |\n+LL |     let _: usize = X.bal;\n+   |                      ^^^ help: use parentheses to call the method: `bal()`\n+\n+error: aborting due to 16 previous errors\n \n-Some errors have detailed explanations: E0308, E0423.\n+Some errors have detailed explanations: E0308, E0423, E0615.\n For more information about an error, try `rustc --explain E0308`."}]}