{"sha": "4c599bc198fd882331cf4721536b2ca8fe2893d2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjNTk5YmMxOThmZDg4MjMzMWNmNDcyMTUzNmIyY2E4ZmUyODkzZDI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-05-24T20:15:04Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-06-01T17:31:12Z"}, "message": "fix librustc_driver tests", "tree": {"sha": "30463b9601fa715b0f9c98010b995fd17a14e927", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30463b9601fa715b0f9c98010b995fd17a14e927"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c599bc198fd882331cf4721536b2ca8fe2893d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c599bc198fd882331cf4721536b2ca8fe2893d2", "html_url": "https://github.com/rust-lang/rust/commit/4c599bc198fd882331cf4721536b2ca8fe2893d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c599bc198fd882331cf4721536b2ca8fe2893d2/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af223fae27d2aa16743abadeb5635f8452a49894", "url": "https://api.github.com/repos/rust-lang/rust/commits/af223fae27d2aa16743abadeb5635f8452a49894", "html_url": "https://github.com/rust-lang/rust/commit/af223fae27d2aa16743abadeb5635f8452a49894"}], "stats": {"total": 30, "additions": 14, "deletions": 16}, "files": [{"sha": "2b74d0a812b4a90f8fcf11558054e3e88c5a8cee", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 14, "deletions": 16, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/4c599bc198fd882331cf4721536b2ca8fe2893d2/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c599bc198fd882331cf4721536b2ca8fe2893d2/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=4c599bc198fd882331cf4721536b2ca8fe2893d2", "patch": "@@ -46,6 +46,7 @@ use rustc::hir;\n struct Env<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> {\n     infcx: &'a infer::InferCtxt<'a, 'gcx, 'tcx>,\n     region_maps: &'a mut RegionMaps,\n+    param_env: ty::ParamEnv<'tcx>,\n }\n \n struct RH<'a> {\n@@ -153,9 +154,13 @@ fn test_env<F>(source_string: &str,\n                              index,\n                              \"test_crate\",\n                              |tcx| {\n-        tcx.infer_ctxt((), Reveal::UserFacing).enter(|infcx| {\n+        tcx.infer_ctxt(()).enter(|infcx| {\n             let mut region_maps = RegionMaps::new();\n-            body(Env { infcx: &infcx, region_maps: &mut region_maps });\n+            body(Env {\n+                infcx: &infcx,\n+                region_maps: &mut region_maps,\n+                param_env: ty::ParamEnv::empty(Reveal::UserFacing),\n+            });\n             let free_regions = FreeRegionMap::new();\n             let def_id = tcx.hir.local_def_id(ast::CRATE_NODE_ID);\n             infcx.resolve_regions_and_report_errors(def_id, &region_maps, &free_regions);\n@@ -250,14 +255,14 @@ impl<'a, 'gcx, 'tcx> Env<'a, 'gcx, 'tcx> {\n     }\n \n     pub fn make_subtype(&self, a: Ty<'tcx>, b: Ty<'tcx>) -> bool {\n-        match self.infcx.sub_types(true, &ObligationCause::dummy(), a, b) {\n+        match self.infcx.at(&ObligationCause::dummy(), self.param_env).sub(a, b) {\n             Ok(_) => true,\n             Err(ref e) => panic!(\"Encountered error: {}\", e),\n         }\n     }\n \n     pub fn is_subtype(&self, a: Ty<'tcx>, b: Ty<'tcx>) -> bool {\n-        self.infcx.can_sub_types(a, b).is_ok()\n+        self.infcx.can_sub(self.param_env, a, b).is_ok()\n     }\n \n     pub fn assert_subtype(&self, a: Ty<'tcx>, b: Ty<'tcx>) {\n@@ -354,30 +359,23 @@ impl<'a, 'gcx, 'tcx> Env<'a, 'gcx, 'tcx> {\n                                   self.tcx().types.isize)\n     }\n \n-    pub fn dummy_type_trace(&self) -> infer::TypeTrace<'tcx> {\n-        infer::TypeTrace::dummy(self.tcx())\n-    }\n-\n-    pub fn sub(&self, t1: Ty<'tcx>, t2: Ty<'tcx>) -> InferResult<'tcx, Ty<'tcx>> {\n-        let trace = self.dummy_type_trace();\n-        self.infcx.sub(true, trace, &t1, &t2)\n+    pub fn sub(&self, t1: Ty<'tcx>, t2: Ty<'tcx>) -> InferResult<'tcx, ()> {\n+        self.infcx.at(&ObligationCause::dummy(), self.param_env).sub(t1, t2)\n     }\n \n     pub fn lub(&self, t1: Ty<'tcx>, t2: Ty<'tcx>) -> InferResult<'tcx, Ty<'tcx>> {\n-        let trace = self.dummy_type_trace();\n-        self.infcx.lub(true, trace, &t1, &t2)\n+        self.infcx.at(&ObligationCause::dummy(), self.param_env).lub(t1, t2)\n     }\n \n     pub fn glb(&self, t1: Ty<'tcx>, t2: Ty<'tcx>) -> InferResult<'tcx, Ty<'tcx>> {\n-        let trace = self.dummy_type_trace();\n-        self.infcx.glb(true, trace, &t1, &t2)\n+        self.infcx.at(&ObligationCause::dummy(), self.param_env).glb(t1, t2)\n     }\n \n     /// Checks that `t1 <: t2` is true (this may register additional\n     /// region checks).\n     pub fn check_sub(&self, t1: Ty<'tcx>, t2: Ty<'tcx>) {\n         match self.sub(t1, t2) {\n-            Ok(InferOk { obligations, .. }) => {\n+            Ok(InferOk { obligations, value: () }) => {\n                 // None of these tests should require nested obligations:\n                 assert!(obligations.is_empty());\n             }"}]}