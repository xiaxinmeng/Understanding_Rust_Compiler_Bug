{"sha": "6b589681c9855a4802308423242976414d414b17", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiNTg5NjgxYzk4NTVhNDgwMjMwODQyMzI0Mjk3NjQxNGQ0MTRiMTc=", "commit": {"author": {"name": "Georg Brandl", "email": "georg@python.org", "date": "2015-09-02T15:14:23Z"}, "committer": {"name": "Georg Brandl", "email": "georg@python.org", "date": "2015-09-02T15:14:27Z"}, "message": "methods: allow multiple self kinds for \"is_\" methods\n\nThese can be static method predicates.  (Found one in rust-copperline,\ncalled Term::is_unsupported_term().)", "tree": {"sha": "db43a8f1b15a52f1d9d7273531eed85ae70f7b39", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/db43a8f1b15a52f1d9d7273531eed85ae70f7b39"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b589681c9855a4802308423242976414d414b17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b589681c9855a4802308423242976414d414b17", "html_url": "https://github.com/rust-lang/rust/commit/6b589681c9855a4802308423242976414d414b17", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b589681c9855a4802308423242976414d414b17/comments", "author": {"login": "birkenfeld", "id": 144359, "node_id": "MDQ6VXNlcjE0NDM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/144359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/birkenfeld", "html_url": "https://github.com/birkenfeld", "followers_url": "https://api.github.com/users/birkenfeld/followers", "following_url": "https://api.github.com/users/birkenfeld/following{/other_user}", "gists_url": "https://api.github.com/users/birkenfeld/gists{/gist_id}", "starred_url": "https://api.github.com/users/birkenfeld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/birkenfeld/subscriptions", "organizations_url": "https://api.github.com/users/birkenfeld/orgs", "repos_url": "https://api.github.com/users/birkenfeld/repos", "events_url": "https://api.github.com/users/birkenfeld/events{/privacy}", "received_events_url": "https://api.github.com/users/birkenfeld/received_events", "type": "User", "site_admin": false}, "committer": {"login": "birkenfeld", "id": 144359, "node_id": "MDQ6VXNlcjE0NDM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/144359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/birkenfeld", "html_url": "https://github.com/birkenfeld", "followers_url": "https://api.github.com/users/birkenfeld/followers", "following_url": "https://api.github.com/users/birkenfeld/following{/other_user}", "gists_url": "https://api.github.com/users/birkenfeld/gists{/gist_id}", "starred_url": "https://api.github.com/users/birkenfeld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/birkenfeld/subscriptions", "organizations_url": "https://api.github.com/users/birkenfeld/orgs", "repos_url": "https://api.github.com/users/birkenfeld/repos", "events_url": "https://api.github.com/users/birkenfeld/events{/privacy}", "received_events_url": "https://api.github.com/users/birkenfeld/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e7496ae7cdf9e912a639c49d2c35b8fdf16d106", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e7496ae7cdf9e912a639c49d2c35b8fdf16d106", "html_url": "https://github.com/rust-lang/rust/commit/2e7496ae7cdf9e912a639c49d2c35b8fdf16d106"}], "stats": {"total": 20, "additions": 11, "deletions": 9}, "files": [{"sha": "4a144734a9414013fd70c8eac85057dda6630f1b", "filename": "src/methods.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6b589681c9855a4802308423242976414d414b17/src%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b589681c9855a4802308423242976414d414b17/src%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmethods.rs?ref=6b589681c9855a4802308423242976414d414b17", "patch": "@@ -88,12 +88,14 @@ impl LintPass for MethodsPass {\n                         }\n                     }\n                     // check conventions w.r.t. conversion method names and predicates\n-                    for &(prefix, self_kind) in &CONVENTIONS {\n+                    let is_copy = is_copy(cx, &ty, &item);\n+                    for &(prefix, self_kinds) in &CONVENTIONS {\n                         if name.as_str().starts_with(prefix) &&\n-                                !self_kind.matches(&sig.explicit_self.node, is_copy(cx, &ty, &item)) {\n+                                !self_kinds.iter().any(|k| k.matches(&sig.explicit_self.node, is_copy)) {\n                             span_lint(cx, WRONG_SELF_CONVENTION, sig.explicit_self.span, &format!(\n                                 \"methods called `{}*` usually take {}; consider choosing a less \\\n-                                 ambiguous name\", prefix, self_kind.description()));\n+                                 ambiguous name\", prefix,\n+                                &self_kinds.iter().map(|k| k.description()).collect::<Vec<_>>().join(\" or \")));\n                         }\n                     }\n                 }\n@@ -102,12 +104,12 @@ impl LintPass for MethodsPass {\n     }\n }\n \n-const CONVENTIONS: [(&'static str, SelfKind); 5] = [\n-    (\"into_\", ValueSelf),\n-    (\"to_\", RefSelf),\n-    (\"as_\", RefSelf),\n-    (\"is_\", RefSelf),\n-    (\"from_\", NoSelf),\n+const CONVENTIONS: [(&'static str, &'static [SelfKind]); 5] = [\n+    (\"into_\", &[ValueSelf]),\n+    (\"to_\",   &[RefSelf]),\n+    (\"as_\",   &[RefSelf]),\n+    (\"is_\",   &[RefSelf, NoSelf]),\n+    (\"from_\", &[NoSelf]),\n ];\n \n const TRAIT_METHODS: [(&'static str, usize, SelfKind, OutType, &'static str); 30] = ["}]}