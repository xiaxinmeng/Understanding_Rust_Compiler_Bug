{"sha": "5e8c0c5ae049157f8301f8cfc4cfbf8210e281dd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlOGMwYzVhZTA0OTE1N2Y4MzAxZjhjZmM0Y2ZiZjgyMTBlMjgxZGQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-10T21:49:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-10T21:49:26Z"}, "message": "Auto merge of #5441 - rabisg0:fix/clone-on-copy, r=phansch\n\nCheck for clone-on-copy in argument positions\n\nEarlier if arguments to method calls matched the above pattern they were\nnot reported. This patch ensures such arguments are checked as well.\n\nFixes #5436\n\nchangelog: apply clone_on_copy lint to func args as well", "tree": {"sha": "2c8e44c713fbc526bf9eab119036ed69f1afb6bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c8e44c713fbc526bf9eab119036ed69f1afb6bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e8c0c5ae049157f8301f8cfc4cfbf8210e281dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e8c0c5ae049157f8301f8cfc4cfbf8210e281dd", "html_url": "https://github.com/rust-lang/rust/commit/5e8c0c5ae049157f8301f8cfc4cfbf8210e281dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e8c0c5ae049157f8301f8cfc4cfbf8210e281dd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0353f21d2322797f162c781b6737d9f42f049cec", "url": "https://api.github.com/repos/rust-lang/rust/commits/0353f21d2322797f162c781b6737d9f42f049cec", "html_url": "https://github.com/rust-lang/rust/commit/0353f21d2322797f162c781b6737d9f42f049cec"}, {"sha": "183c4abb224d4108df4c65cdaca760888fbbb709", "url": "https://api.github.com/repos/rust-lang/rust/commits/183c4abb224d4108df4c65cdaca760888fbbb709", "html_url": "https://github.com/rust-lang/rust/commit/183c4abb224d4108df4c65cdaca760888fbbb709"}], "stats": {"total": 52, "additions": 37, "deletions": 15}, "files": [{"sha": "19ed50c42e35cad5140af9a0d47c811002f3971b", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5e8c0c5ae049157f8301f8cfc4cfbf8210e281dd/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e8c0c5ae049157f8301f8cfc4cfbf8210e281dd/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=5e8c0c5ae049157f8301f8cfc4cfbf8210e281dd", "patch": "@@ -1947,9 +1947,10 @@ fn lint_clone_on_copy(cx: &LateContext<'_, '_>, expr: &hir::Expr<'_>, arg: &hir:\n             match &cx.tcx.hir().get(parent) {\n                 hir::Node::Expr(parent) => match parent.kind {\n                     // &*x is a nop, &x.clone() is not\n-                    hir::ExprKind::AddrOf(..) |\n+                    hir::ExprKind::AddrOf(..) => return,\n                     // (*x).func() is useless, x.clone().func() can work in case func borrows mutably\n-                    hir::ExprKind::MethodCall(..) => return,\n+                    hir::ExprKind::MethodCall(_, _, parent_args) if expr.hir_id == parent_args[0].hir_id => return,\n+\n                     _ => {},\n                 },\n                 hir::Node::Stmt(stmt) => {"}, {"sha": "7a1d031fac4d515d92ab4203297836f86cef5065", "filename": "tests/ui/unnecessary_clone.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5e8c0c5ae049157f8301f8cfc4cfbf8210e281dd/tests%2Fui%2Funnecessary_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e8c0c5ae049157f8301f8cfc4cfbf8210e281dd/tests%2Fui%2Funnecessary_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_clone.rs?ref=5e8c0c5ae049157f8301f8cfc4cfbf8210e281dd", "patch": "@@ -13,6 +13,10 @@ impl SomeTrait for SomeImpl {}\n \n fn main() {}\n \n+fn is_ascii(ch: char) -> bool {\n+    ch.is_ascii()\n+}\n+\n fn clone_on_copy() {\n     42.clone();\n \n@@ -27,6 +31,11 @@ fn clone_on_copy() {\n     let mut x = 43;\n     let _ = &x.clone(); // ok, getting a ref\n     'a'.clone().make_ascii_uppercase(); // ok, clone and then mutate\n+    is_ascii('z'.clone());\n+\n+    // Issue #5436\n+    let mut vec = Vec::new();\n+    vec.push(42.clone());\n }\n \n fn clone_on_ref_ptr() {"}, {"sha": "7b34ff9e3153395f6d59f12d8ed6432f85ecc435", "filename": "tests/ui/unnecessary_clone.stderr", "status": "modified", "additions": 25, "deletions": 13, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/5e8c0c5ae049157f8301f8cfc4cfbf8210e281dd/tests%2Fui%2Funnecessary_clone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e8c0c5ae049157f8301f8cfc4cfbf8210e281dd/tests%2Fui%2Funnecessary_clone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_clone.stderr?ref=5e8c0c5ae049157f8301f8cfc4cfbf8210e281dd", "patch": "@@ -1,69 +1,81 @@\n error: using `clone` on a `Copy` type\n-  --> $DIR/unnecessary_clone.rs:17:5\n+  --> $DIR/unnecessary_clone.rs:21:5\n    |\n LL |     42.clone();\n    |     ^^^^^^^^^^ help: try removing the `clone` call: `42`\n    |\n    = note: `-D clippy::clone-on-copy` implied by `-D warnings`\n \n error: using `clone` on a `Copy` type\n-  --> $DIR/unnecessary_clone.rs:21:5\n+  --> $DIR/unnecessary_clone.rs:25:5\n    |\n LL |     (&42).clone();\n    |     ^^^^^^^^^^^^^ help: try dereferencing it: `*(&42)`\n \n error: using `clone` on a `Copy` type\n-  --> $DIR/unnecessary_clone.rs:24:5\n+  --> $DIR/unnecessary_clone.rs:28:5\n    |\n LL |     rc.borrow().clone();\n    |     ^^^^^^^^^^^^^^^^^^^ help: try dereferencing it: `*rc.borrow()`\n \n+error: using `clone` on a `Copy` type\n+  --> $DIR/unnecessary_clone.rs:34:14\n+   |\n+LL |     is_ascii('z'.clone());\n+   |              ^^^^^^^^^^^ help: try removing the `clone` call: `'z'`\n+\n+error: using `clone` on a `Copy` type\n+  --> $DIR/unnecessary_clone.rs:38:14\n+   |\n+LL |     vec.push(42.clone());\n+   |              ^^^^^^^^^^ help: try removing the `clone` call: `42`\n+\n error: using `.clone()` on a ref-counted pointer\n-  --> $DIR/unnecessary_clone.rs:39:5\n+  --> $DIR/unnecessary_clone.rs:48:5\n    |\n LL |     rc.clone();\n    |     ^^^^^^^^^^ help: try this: `Rc::<bool>::clone(&rc)`\n    |\n    = note: `-D clippy::clone-on-ref-ptr` implied by `-D warnings`\n \n error: using `.clone()` on a ref-counted pointer\n-  --> $DIR/unnecessary_clone.rs:42:5\n+  --> $DIR/unnecessary_clone.rs:51:5\n    |\n LL |     arc.clone();\n    |     ^^^^^^^^^^^ help: try this: `Arc::<bool>::clone(&arc)`\n \n error: using `.clone()` on a ref-counted pointer\n-  --> $DIR/unnecessary_clone.rs:45:5\n+  --> $DIR/unnecessary_clone.rs:54:5\n    |\n LL |     rcweak.clone();\n    |     ^^^^^^^^^^^^^^ help: try this: `Weak::<bool>::clone(&rcweak)`\n \n error: using `.clone()` on a ref-counted pointer\n-  --> $DIR/unnecessary_clone.rs:48:5\n+  --> $DIR/unnecessary_clone.rs:57:5\n    |\n LL |     arc_weak.clone();\n    |     ^^^^^^^^^^^^^^^^ help: try this: `Weak::<bool>::clone(&arc_weak)`\n \n error: using `.clone()` on a ref-counted pointer\n-  --> $DIR/unnecessary_clone.rs:52:33\n+  --> $DIR/unnecessary_clone.rs:61:33\n    |\n LL |     let _: Arc<dyn SomeTrait> = x.clone();\n    |                                 ^^^^^^^^^ help: try this: `Arc::<SomeImpl>::clone(&x)`\n \n error: using `clone` on a `Copy` type\n-  --> $DIR/unnecessary_clone.rs:56:5\n+  --> $DIR/unnecessary_clone.rs:65:5\n    |\n LL |     t.clone();\n    |     ^^^^^^^^^ help: try removing the `clone` call: `t`\n \n error: using `clone` on a `Copy` type\n-  --> $DIR/unnecessary_clone.rs:58:5\n+  --> $DIR/unnecessary_clone.rs:67:5\n    |\n LL |     Some(t).clone();\n    |     ^^^^^^^^^^^^^^^ help: try removing the `clone` call: `Some(t)`\n \n error: using `clone` on a double-reference; this will copy the reference instead of cloning the inner type\n-  --> $DIR/unnecessary_clone.rs:64:22\n+  --> $DIR/unnecessary_clone.rs:73:22\n    |\n LL |     let z: &Vec<_> = y.clone();\n    |                      ^^^^^^^^^\n@@ -79,10 +91,10 @@ LL |     let z: &Vec<_> = &std::vec::Vec<i32>::clone(y);\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: using `clone` on a `Copy` type\n-  --> $DIR/unnecessary_clone.rs:100:20\n+  --> $DIR/unnecessary_clone.rs:109:20\n    |\n LL |         let _: E = a.clone();\n    |                    ^^^^^^^^^ help: try dereferencing it: `*****a`\n \n-error: aborting due to 12 previous errors\n+error: aborting due to 14 previous errors\n "}]}