{"sha": "05083299fae33f44506bd40e17283433b66417a5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1MDgzMjk5ZmFlMzNmNDQ1MDZiZDQwZTE3MjgzNDMzYjY2NDE3YTU=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-08-05T08:15:38Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-08-05T08:15:38Z"}, "message": "Rollup merge of #27521 - steveklabnik:doc_std_mem_forget, r=gankro\n\nWe were burying the reason to use this function below a bunch of caveats about\r\nits usage. That's backwards. Why a function should be used belongs at the top of\r\nthe docs, not the bottom.\r\n\r\nAlso, add some extra links to related functions mentioned in the body.\r\n\r\n/cc @abhijeetbhagat who  pointed this out on IRC", "tree": {"sha": "4f993271ee3553049840afcec81863809eb49153", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f993271ee3553049840afcec81863809eb49153"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05083299fae33f44506bd40e17283433b66417a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05083299fae33f44506bd40e17283433b66417a5", "html_url": "https://github.com/rust-lang/rust/commit/05083299fae33f44506bd40e17283433b66417a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05083299fae33f44506bd40e17283433b66417a5/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b1dc2c50949dc747c6246e547294bdbd1e4e6488", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1dc2c50949dc747c6246e547294bdbd1e4e6488", "html_url": "https://github.com/rust-lang/rust/commit/b1dc2c50949dc747c6246e547294bdbd1e4e6488"}, {"sha": "5af1b3f3a3361abf79573295b0847d8fecf782aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/5af1b3f3a3361abf79573295b0847d8fecf782aa", "html_url": "https://github.com/rust-lang/rust/commit/5af1b3f3a3361abf79573295b0847d8fecf782aa"}], "stats": {"total": 30, "additions": 16, "deletions": 14}, "files": [{"sha": "86b331d220a3b30e0b55ab2d6a672e2271145a14", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/05083299fae33f44506bd40e17283433b66417a5/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05083299fae33f44506bd40e17283433b66417a5/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=05083299fae33f44506bd40e17283433b66417a5", "patch": "@@ -29,6 +29,19 @@ pub use intrinsics::transmute;\n /// `mem::drop` function in that it **does not run the destructor**, leaking the\n /// value and any resources that it owns.\n ///\n+/// There's only a few reasons to use this function. They mainly come\n+/// up in unsafe code or FFI code.\n+///\n+/// * You have an uninitialized value, perhaps for performance reasons, and\n+///   need to prevent the destructor from running on it.\n+/// * You have two copies of a value (like when writing something like\n+///   [`mem::swap`][swap]), but need the destructor to only run once to\n+///   prevent a double `free`.\n+/// * Transferring resources across [FFI][ffi] boundries.\n+///\n+/// [swap]: fn.swap.html\n+/// [ffi]: ../../book/ffi.html\n+///\n /// # Safety\n ///\n /// This function is not marked as `unsafe` as Rust does not guarantee that the\n@@ -52,20 +65,9 @@ pub use intrinsics::transmute;\n /// * `mpsc::{Sender, Receiver}` cycles (they use `Arc` internally)\n /// * Panicking destructors are likely to leak local resources\n ///\n-/// # When To Use\n-///\n-/// There's only a few reasons to use this function. They mainly come\n-/// up in unsafe code or FFI code.\n-///\n-/// * You have an uninitialized value, perhaps for performance reasons, and\n-///   need to prevent the destructor from running on it.\n-/// * You have two copies of a value (like `std::mem::swap`), but need the\n-///   destructor to only run once to prevent a double free.\n-/// * Transferring resources across FFI boundries.\n-///\n /// # Example\n ///\n-/// Leak some heap memory by never deallocating it.\n+/// Leak some heap memory by never deallocating it:\n ///\n /// ```rust\n /// use std::mem;\n@@ -74,7 +76,7 @@ pub use intrinsics::transmute;\n /// mem::forget(heap_memory);\n /// ```\n ///\n-/// Leak an I/O object, never closing the file.\n+/// Leak an I/O object, never closing the file:\n ///\n /// ```rust,no_run\n /// use std::mem;\n@@ -84,7 +86,7 @@ pub use intrinsics::transmute;\n /// mem::forget(file);\n /// ```\n ///\n-/// The swap function uses forget to good effect.\n+/// The `mem::swap` function uses `mem::forget` to good effect:\n ///\n /// ```rust\n /// use std::mem;"}]}