{"sha": "9af6b3d4e74cf31c21821430de755219bf239d96", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhZjZiM2Q0ZTc0Y2YzMWMyMTgyMTQzMGRlNzU1MjE5YmYyMzlkOTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-27T09:22:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-27T09:22:09Z"}, "message": "Auto merge of #74737 - smmalis37:astconv-factor, r=davidtwco\n\nPull out some duplicated code into a new function\n\nI debated pulling the actual struct_span_err calls into the new method, but I felt like having to pass in multiple arguments for it and wiring up string formatting outweighed the benefits.\n\nViewing the diff with whitespace ignored is recommended.", "tree": {"sha": "7683541959730bc94303901a4ab04889fc7a493e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7683541959730bc94303901a4ab04889fc7a493e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9af6b3d4e74cf31c21821430de755219bf239d96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9af6b3d4e74cf31c21821430de755219bf239d96", "html_url": "https://github.com/rust-lang/rust/commit/9af6b3d4e74cf31c21821430de755219bf239d96", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9af6b3d4e74cf31c21821430de755219bf239d96/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1841fb97e17f5e41c609cd11ab114c7ac1f3de2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/1841fb97e17f5e41c609cd11ab114c7ac1f3de2a", "html_url": "https://github.com/rust-lang/rust/commit/1841fb97e17f5e41c609cd11ab114c7ac1f3de2a"}, {"sha": "617dd0a8b9d848f468bc762bd12adc4f2a4af3cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/617dd0a8b9d848f468bc762bd12adc4f2a4af3cb", "html_url": "https://github.com/rust-lang/rust/commit/617dd0a8b9d848f468bc762bd12adc4f2a4af3cb"}], "stats": {"total": 88, "additions": 46, "deletions": 42}, "files": [{"sha": "21b5f5c9033e614d48f9097c53eac9816f721561", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 45, "deletions": 41, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/9af6b3d4e74cf31c21821430de755219bf239d96/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af6b3d4e74cf31c21821430de755219bf239d96/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=9af6b3d4e74cf31c21821430de755219bf239d96", "patch": "@@ -1483,36 +1483,25 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     tcx.collect_referenced_late_bound_regions(&ty::Binder::bind(ty));\n                 debug!(\"late_bound_in_trait_ref = {:?}\", late_bound_in_trait_ref);\n                 debug!(\"late_bound_in_ty = {:?}\", late_bound_in_ty);\n-                for br in late_bound_in_ty.difference(&late_bound_in_trait_ref) {\n-                    let br_name = match *br {\n-                        ty::BrNamed(_, name) => format!(\"lifetime `{}`\", name),\n-                        _ => \"an anonymous lifetime\".to_string(),\n-                    };\n-                    // FIXME: point at the type params that don't have appropriate lifetimes:\n-                    // struct S1<F: for<'a> Fn(&i32, &i32) -> &'a i32>(F);\n-                    //                         ----  ----     ^^^^^^^\n-                    let mut err = struct_span_err!(\n-                        tcx.sess,\n-                        binding.span,\n-                        E0582,\n-                        \"binding for associated type `{}` references {}, \\\n-                         which does not appear in the trait input types\",\n-                        binding.item_name,\n-                        br_name\n-                    );\n-\n-                    if let ty::BrAnon(_) = *br {\n-                        // The only way for an anonymous lifetime to wind up\n-                        // in the return type but **also** be unconstrained is\n-                        // if it only appears in \"associated types\" in the\n-                        // input. See #62200 for an example. In this case,\n-                        // though we can easily give a hint that ought to be\n-                        // relevant.\n-                        err.note(\"lifetimes appearing in an associated type are not considered constrained\");\n-                    }\n \n-                    err.emit();\n-                }\n+                // FIXME: point at the type params that don't have appropriate lifetimes:\n+                // struct S1<F: for<'a> Fn(&i32, &i32) -> &'a i32>(F);\n+                //                         ----  ----     ^^^^^^^\n+                self.validate_late_bound_regions(\n+                    late_bound_in_trait_ref,\n+                    late_bound_in_ty,\n+                    |br_name| {\n+                        struct_span_err!(\n+                            tcx.sess,\n+                            binding.span,\n+                            E0582,\n+                            \"binding for associated type `{}` references {}, \\\n+                             which does not appear in the trait input types\",\n+                            binding.item_name,\n+                            br_name\n+                        )\n+                    },\n+                );\n             }\n         }\n \n@@ -3085,33 +3074,48 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             tcx.collect_constrained_late_bound_regions(&inputs.map_bound(|i| i.to_owned()));\n         let output = bare_fn_ty.output();\n         let late_bound_in_ret = tcx.collect_referenced_late_bound_regions(&output);\n-        for br in late_bound_in_ret.difference(&late_bound_in_args) {\n-            let lifetime_name = match *br {\n-                ty::BrNamed(_, name) => format!(\"lifetime `{}`,\", name),\n-                ty::BrAnon(_) | ty::BrEnv => \"an anonymous lifetime\".to_string(),\n-            };\n-            let mut err = struct_span_err!(\n+\n+        self.validate_late_bound_regions(late_bound_in_args, late_bound_in_ret, |br_name| {\n+            struct_span_err!(\n                 tcx.sess,\n                 decl.output.span(),\n                 E0581,\n-                \"return type references {} which is not constrained by the fn input types\",\n-                lifetime_name\n-            );\n+                \"return type references {}, which is not constrained by the fn input types\",\n+                br_name\n+            )\n+        });\n+\n+        bare_fn_ty\n+    }\n+\n+    fn validate_late_bound_regions(\n+        &self,\n+        constrained_regions: FxHashSet<ty::BoundRegion>,\n+        referenced_regions: FxHashSet<ty::BoundRegion>,\n+        generate_err: impl Fn(&str) -> rustc_errors::DiagnosticBuilder<'tcx>,\n+    ) {\n+        for br in referenced_regions.difference(&constrained_regions) {\n+            let br_name = match *br {\n+                ty::BrNamed(_, name) => format!(\"lifetime `{}`\", name),\n+                ty::BrAnon(_) | ty::BrEnv => \"an anonymous lifetime\".to_string(),\n+            };\n+\n+            let mut err = generate_err(&br_name);\n+\n             if let ty::BrAnon(_) = *br {\n                 // The only way for an anonymous lifetime to wind up\n                 // in the return type but **also** be unconstrained is\n                 // if it only appears in \"associated types\" in the\n-                // input. See #47511 for an example. In this case,\n+                // input. See #47511 and #62200 for examples. In this case,\n                 // though we can easily give a hint that ought to be\n                 // relevant.\n                 err.note(\n                     \"lifetimes appearing in an associated type are not considered constrained\",\n                 );\n             }\n+\n             err.emit();\n         }\n-\n-        bare_fn_ty\n     }\n \n     /// Given the bounds on an object, determines what single region bound (if any) we can"}, {"sha": "4473c0e68cfc8d803ef8525124de5e2b9b23ad92", "filename": "src/test/ui/issues/issue-47511.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9af6b3d4e74cf31c21821430de755219bf239d96/src%2Ftest%2Fui%2Fissues%2Fissue-47511.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9af6b3d4e74cf31c21821430de755219bf239d96/src%2Ftest%2Fui%2Fissues%2Fissue-47511.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-47511.stderr?ref=9af6b3d4e74cf31c21821430de755219bf239d96", "patch": "@@ -1,4 +1,4 @@\n-error[E0581]: return type references an anonymous lifetime which is not constrained by the fn input types\n+error[E0581]: return type references an anonymous lifetime, which is not constrained by the fn input types\n   --> $DIR/issue-47511.rs:5:15\n    |\n LL | fn f(_: X) -> X {"}]}