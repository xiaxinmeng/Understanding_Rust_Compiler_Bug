{"sha": "53e4b9dd74c29cc9308b8d0f10facac70bb101a7", "node_id": "C_kwDOAAsO6NoAKDUzZTRiOWRkNzRjMjljYzkzMDhiOGQwZjEwZmFjYWM3MGJiMTAxYTc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-04T20:05:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-04T20:05:32Z"}, "message": "Auto merge of #104535 - mikebenfield:discr-fix, r=pnkfelix\n\nrustc_codegen_ssa: Fix for codegen_get_discr\n\nWhen doing the optimized implementation of getting the discriminant, the arithmetic needs to be done in the tag type so wrapping behavior works correctly.\n\nFixes #104519", "tree": {"sha": "b770ff68bf5b62e8a8171b4f0511ce48762a6d69", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b770ff68bf5b62e8a8171b4f0511ce48762a6d69"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/53e4b9dd74c29cc9308b8d0f10facac70bb101a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/53e4b9dd74c29cc9308b8d0f10facac70bb101a7", "html_url": "https://github.com/rust-lang/rust/commit/53e4b9dd74c29cc9308b8d0f10facac70bb101a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/53e4b9dd74c29cc9308b8d0f10facac70bb101a7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f0d5d716a00c1f29cfbf240e12bdccc4f9b9a94", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f0d5d716a00c1f29cfbf240e12bdccc4f9b9a94", "html_url": "https://github.com/rust-lang/rust/commit/0f0d5d716a00c1f29cfbf240e12bdccc4f9b9a94"}, {"sha": "31c0645b9d2539f47eecb096142474b29dc542f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/31c0645b9d2539f47eecb096142474b29dc542f7", "html_url": "https://github.com/rust-lang/rust/commit/31c0645b9d2539f47eecb096142474b29dc542f7"}], "stats": {"total": 70, "additions": 56, "deletions": 14}, "files": [{"sha": "fbe30154a7c8d26b23cb4af4ac5fa419e2a558ad", "filename": "compiler/rustc_codegen_ssa/src/mir/place.rs", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/53e4b9dd74c29cc9308b8d0f10facac70bb101a7/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53e4b9dd74c29cc9308b8d0f10facac70bb101a7/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fplace.rs?ref=53e4b9dd74c29cc9308b8d0f10facac70bb101a7", "patch": "@@ -309,14 +309,14 @@ impl<'a, 'tcx, V: CodegenObject> PlaceRef<'tcx, V> {\n                 // In the algorithm above, we can change\n                 // cast(relative_tag) + niche_variants.start()\n                 // into\n-                // cast(tag) + (niche_variants.start() - niche_start)\n+                // cast(tag + (niche_variants.start() - niche_start))\n                 // if either the casted type is no larger than the original\n                 // type, or if the niche values are contiguous (in either the\n                 // signed or unsigned sense).\n-                let can_incr_after_cast = cast_smaller || niches_ule || niches_sle;\n+                let can_incr = cast_smaller || niches_ule || niches_sle;\n \n                 let data_for_boundary_niche = || -> Option<(IntPredicate, u128)> {\n-                    if !can_incr_after_cast {\n+                    if !can_incr {\n                         None\n                     } else if niche_start == low_unsigned {\n                         Some((IntPredicate::IntULE, niche_end))\n@@ -353,24 +353,33 @@ impl<'a, 'tcx, V: CodegenObject> PlaceRef<'tcx, V> {\n                     // The algorithm is now this:\n                     // is_niche = tag <= niche_end\n                     // discr = if is_niche {\n-                    //     cast(tag) + (niche_variants.start() - niche_start)\n+                    //     cast(tag + (niche_variants.start() - niche_start))\n                     // } else {\n                     //     untagged_variant\n                     // }\n                     // (the first line may instead be tag >= niche_start,\n                     // and may be a signed or unsigned comparison)\n+                    // The arithmetic must be done before the cast, so we can\n+                    // have the correct wrapping behavior. See issue #104519 for\n+                    // the consequences of getting this wrong.\n                     let is_niche =\n                         bx.icmp(predicate, tag, bx.cx().const_uint_big(tag_llty, constant));\n+                    let delta = (niche_variants.start().as_u32() as u128).wrapping_sub(niche_start);\n+                    let incr_tag = if delta == 0 {\n+                        tag\n+                    } else {\n+                        bx.add(tag, bx.cx().const_uint_big(tag_llty, delta))\n+                    };\n+\n                     let cast_tag = if cast_smaller {\n-                        bx.intcast(tag, cast_to, false)\n+                        bx.intcast(incr_tag, cast_to, false)\n                     } else if niches_ule {\n-                        bx.zext(tag, cast_to)\n+                        bx.zext(incr_tag, cast_to)\n                     } else {\n-                        bx.sext(tag, cast_to)\n+                        bx.sext(incr_tag, cast_to)\n                     };\n \n-                    let delta = (niche_variants.start().as_u32() as u128).wrapping_sub(niche_start);\n-                    (is_niche, cast_tag, delta)\n+                    (is_niche, cast_tag, 0)\n                 } else {\n                     // The special cases don't apply, so we'll have to go with\n                     // the general algorithm."}, {"sha": "44f1b408d21b8f0ede3c3ceb48cec463f614e142", "filename": "src/test/codegen/enum-match.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/53e4b9dd74c29cc9308b8d0f10facac70bb101a7/src%2Ftest%2Fcodegen%2Fenum-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53e4b9dd74c29cc9308b8d0f10facac70bb101a7/src%2Ftest%2Fcodegen%2Fenum-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fenum-match.rs?ref=53e4b9dd74c29cc9308b8d0f10facac70bb101a7", "patch": "@@ -34,11 +34,8 @@ pub enum Enum1 {\n \n // CHECK: define i8 @match1{{.*}}\n // CHECK-NEXT: start:\n-// CHECK-NEXT: %1 = icmp ugt i8 %0, 1\n-// CHECK-NEXT: %2 = zext i8 %0 to i64\n-// CHECK-NEXT: %3 = add nsw i64 %2, -1\n-// CHECK-NEXT: %_2 = select i1 %1, i64 %3, i64 0\n-// CHECK-NEXT: switch i64 %_2, label {{.*}} [\n+// CHECK-NEXT: %1 = {{.*}}call i8 @llvm.usub.sat.i8(i8 %0, i8 1)\n+// CHECK-NEXT: switch i8 %1, label {{.*}} [\n #[no_mangle]\n pub fn match1(e: Enum1) -> u8 {\n     use Enum1::*;"}, {"sha": "c4630f76b3a1341bf5e8c2abe0902bc58339562c", "filename": "src/test/ui/enum-discriminant/issue-104519.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/53e4b9dd74c29cc9308b8d0f10facac70bb101a7/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-104519.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53e4b9dd74c29cc9308b8d0f10facac70bb101a7/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-104519.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-104519.rs?ref=53e4b9dd74c29cc9308b8d0f10facac70bb101a7", "patch": "@@ -0,0 +1,36 @@\n+// run-pass\n+#![allow(dead_code)]\n+\n+enum OpenResult {\n+    Ok(()),\n+    Err(()),\n+    TransportErr(TransportErr),\n+}\n+\n+#[repr(i32)]\n+enum TransportErr {\n+    UnknownMethod = -2,\n+}\n+\n+#[inline(never)]\n+fn some_match(result: OpenResult) -> u8 {\n+    match result {\n+        OpenResult::Ok(()) => 0,\n+        _ => 1,\n+    }\n+}\n+\n+fn main() {\n+    let result = OpenResult::Ok(());\n+    assert_eq!(some_match(result), 0);\n+\n+    let result = OpenResult::Ok(());\n+    match result {\n+        OpenResult::Ok(()) => (),\n+        _ => unreachable!(\"message a\"),\n+    }\n+    match result {\n+        OpenResult::Ok(()) => (),\n+        _ => unreachable!(\"message b\"),\n+    }\n+}"}]}