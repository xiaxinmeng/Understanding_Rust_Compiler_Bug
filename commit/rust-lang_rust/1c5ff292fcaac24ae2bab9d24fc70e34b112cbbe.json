{"sha": "1c5ff292fcaac24ae2bab9d24fc70e34b112cbbe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjNWZmMjkyZmNhYWMyNGFlMmJhYjlkMjRmYzcwZTM0YjExMmNiYmU=", "commit": {"author": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-10-01T10:52:47Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-10-25T15:20:39Z"}, "message": "Rebase fallout", "tree": {"sha": "d5b1656a87df2d9c5a1dc35d800cb56a8d4f1ab0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d5b1656a87df2d9c5a1dc35d800cb56a8d4f1ab0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c5ff292fcaac24ae2bab9d24fc70e34b112cbbe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c5ff292fcaac24ae2bab9d24fc70e34b112cbbe", "html_url": "https://github.com/rust-lang/rust/commit/1c5ff292fcaac24ae2bab9d24fc70e34b112cbbe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c5ff292fcaac24ae2bab9d24fc70e34b112cbbe/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2e682afed62b3ba7b6cea55b6f8fcea296861a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2e682afed62b3ba7b6cea55b6f8fcea296861a7", "html_url": "https://github.com/rust-lang/rust/commit/d2e682afed62b3ba7b6cea55b6f8fcea296861a7"}], "stats": {"total": 388, "additions": 69, "deletions": 319}, "files": [{"sha": "1632af6d3dd15fef20113f01af5f1f83febc2b22", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 0, "deletions": 43, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/1c5ff292fcaac24ae2bab9d24fc70e34b112cbbe/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c5ff292fcaac24ae2bab9d24fc70e34b112cbbe/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=1c5ff292fcaac24ae2bab9d24fc70e34b112cbbe", "patch": "@@ -1547,49 +1547,6 @@ impl LintPass for UnusedBrokenConst {\n         lint_array!()\n     }\n }\n-\n-fn validate_const<'a, 'tcx>(\n-    tcx: ty::TyCtxt<'a, 'tcx, 'tcx>,\n-    constant: &ty::Const<'tcx>,\n-    param_env: ty::ParamEnv<'tcx>,\n-    gid: ::rustc::mir::interpret::GlobalId<'tcx>,\n-    what: &str,\n-) {\n-    let ecx = ::rustc_mir::const_eval::mk_eval_cx(tcx, gid.instance, param_env).unwrap();\n-    let result = (|| {\n-        let op = ecx.const_to_op(constant)?;\n-        let mut ref_tracking = ::rustc_mir::interpret::RefTracking::new(op);\n-        while let Some((op, mut path)) = ref_tracking.todo.pop() {\n-            ecx.validate_operand(\n-                op,\n-                &mut path,\n-                Some(&mut ref_tracking),\n-                /* const_mode */ true,\n-            )?;\n-        }\n-        Ok(())\n-    })();\n-    if let Err(err) = result {\n-        let (trace, span) = ecx.generate_stacktrace(None);\n-        let err = ::rustc::mir::interpret::ConstEvalErr {\n-            error: err,\n-            stacktrace: trace,\n-            span,\n-        };\n-        let err = err.struct_error(\n-            tcx.at(span),\n-            &format!(\"this {} likely exhibits undefined behavior\", what),\n-        );\n-        if let Some(mut err) = err {\n-            err.note(\"The rules on what exactly is undefined behavior aren't clear, \\\n-                so this check might be overzealous. Please open an issue on the rust compiler \\\n-                repository if you believe it should not be considered undefined behavior\",\n-            );\n-            err.emit();\n-        }\n-    }\n-}\n-\n fn check_const(cx: &LateContext, body_id: hir::BodyId) {\n     let def_id = cx.tcx.hir.body_owner_def_id(body_id);\n     let is_static = cx.tcx.is_static(def_id).is_some();"}, {"sha": "830f2fb089a5ed16ceebda6e682e8741b6463a3d", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1c5ff292fcaac24ae2bab9d24fc70e34b112cbbe/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c5ff292fcaac24ae2bab9d24fc70e34b112cbbe/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=1c5ff292fcaac24ae2bab9d24fc70e34b112cbbe", "patch": "@@ -24,7 +24,6 @@ use rustc::ty::{self, Ty, TyCtxt, Instance, query::TyCtxtAt};\n use rustc::ty::layout::{self, Size, LayoutOf, TyLayout};\n use rustc::ty::subst::Subst;\n use rustc::traits::Reveal;\n-use rustc::util::nodemap::FxHashSet;\n use rustc_data_structures::indexed_vec::IndexVec;\n use rustc_data_structures::fx::FxHashMap;\n use rustc::util::common::ErrorReported;\n@@ -36,7 +35,7 @@ use interpret::{self,\n     PlaceTy, MemPlace, OpTy, Operand, Value, Pointer, Scalar, ConstValue,\n     EvalResult, EvalError, EvalErrorKind, GlobalId, EvalContext, StackPopCleanup,\n     Allocation, AllocId, MemoryKind,\n-    snapshot,\n+    snapshot, RefTracking,\n };\n \n /// Number of steps until the detector even starts doing anything.\n@@ -542,15 +541,13 @@ fn validate_const<'a, 'tcx>(\n     let ecx = mk_eval_cx(tcx, cid.instance, key.param_env).unwrap();\n     let val = (|| {\n         let op = ecx.const_to_op(constant)?;\n-        let mut todo = vec![(op, Vec::new())];\n-        let mut seen = FxHashSet();\n-        seen.insert(op);\n-        while let Some((op, mut path)) = todo.pop() {\n+        let mut ref_tracking = RefTracking::new(op);\n+        while let Some((op, mut path)) = ref_tracking.todo.pop() {\n             ecx.validate_operand(\n                 op,\n                 &mut path,\n-                &mut seen,\n-                &mut todo,\n+                Some(&mut ref_tracking),\n+                /* const_mode */ true,\n             )?;\n         }\n         Ok(constant)"}, {"sha": "83f2735aa9d8ee638527801ef583058ad3e29dde", "filename": "src/test/compile-fail/const-fn-error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c5ff292fcaac24ae2bab9d24fc70e34b112cbbe/src%2Ftest%2Fcompile-fail%2Fconst-fn-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c5ff292fcaac24ae2bab9d24fc70e34b112cbbe/src%2Ftest%2Fcompile-fail%2Fconst-fn-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-fn-error.rs?ref=1c5ff292fcaac24ae2bab9d24fc70e34b112cbbe", "patch": "@@ -16,7 +16,7 @@ const fn f(x: usize) -> usize {\n     let mut sum = 0;\n     //~^ let bindings in constant functions are unstable\n     //~| statements in constant functions are unstable\n-    for i in 0..x { //~ ERROR E0080\n+    for i in 0..x {\n         //~^ ERROR E0015\n         //~| ERROR E0019\n         sum += i;"}, {"sha": "fc42f87ccbfda72e974c5878a08c937d3f78562e", "filename": "src/test/compile-fail/issue-52443.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1c5ff292fcaac24ae2bab9d24fc70e34b112cbbe/src%2Ftest%2Fcompile-fail%2Fissue-52443.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c5ff292fcaac24ae2bab9d24fc70e34b112cbbe/src%2Ftest%2Fcompile-fail%2Fissue-52443.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-52443.rs?ref=1c5ff292fcaac24ae2bab9d24fc70e34b112cbbe", "patch": "@@ -14,5 +14,4 @@ fn main() {\n     [(); {while true {break}; 0}]; //~ ERROR constant contains unimplemented expression type\n     [(); { for _ in 0usize.. {}; 0}]; //~ ERROR calls in constants are limited to constant functions\n     //~^ ERROR constant contains unimplemented expression type\n-    //~| ERROR evaluation of constant value failed\n }"}, {"sha": "81be93e916e8bf0c1fbd3a68794f89bd736d4b74", "filename": "src/test/ui/consts/const-call.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1c5ff292fcaac24ae2bab9d24fc70e34b112cbbe/src%2Ftest%2Fui%2Fconsts%2Fconst-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c5ff292fcaac24ae2bab9d24fc70e34b112cbbe/src%2Ftest%2Fui%2Fconsts%2Fconst-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-call.stderr?ref=1c5ff292fcaac24ae2bab9d24fc70e34b112cbbe", "patch": "@@ -4,12 +4,6 @@ error[E0015]: calls in constants are limited to constant functions, tuple struct\n LL |     let _ = [0; f(2)];\n    |                 ^^^^\n \n-error[E0080]: evaluation of constant value failed\n-  --> $DIR/const-call.rs:16:17\n-   |\n-LL |     let _ = [0; f(2)];\n-   |                 ^^^^ calling non-const fn `f`\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0015`."}, {"sha": "b6c35b8ebbd9353368b1b598d37178c87ebcdc73", "filename": "src/test/ui/consts/const-eval/conditional_array_execution.nll.stderr", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/d2e682afed62b3ba7b6cea55b6f8fcea296861a7/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconditional_array_execution.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d2e682afed62b3ba7b6cea55b6f8fcea296861a7/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconditional_array_execution.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconditional_array_execution.nll.stderr?ref=d2e682afed62b3ba7b6cea55b6f8fcea296861a7", "patch": "@@ -1,29 +0,0 @@\n-warning: any use of this value will cause an error\n-  --> $DIR/conditional_array_execution.rs:15:1\n-   |\n-LL | const FOO: u32 = [X - Y, Y - X][(X < Y) as usize];\n-   | ^^^^^^^^^^^^^^^^^^-----^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |                   |\n-   |                   attempt to subtract with overflow\n-   |\n-note: lint level defined here\n-  --> $DIR/conditional_array_execution.rs:11:9\n-   |\n-LL | #![warn(const_err)]\n-   |         ^^^^^^^^^\n-\n-error[E0080]: evaluation of constant expression failed\n-  --> $DIR/conditional_array_execution.rs:19:14\n-   |\n-LL |     println!(\"{}\", FOO);\n-   |              ^^^^  --- referenced constant has errors\n-\n-error[E0080]: evaluation of constant expression failed\n-  --> $DIR/conditional_array_execution.rs:19:20\n-   |\n-LL |     println!(\"{}\", FOO);\n-   |                    ^^^ referenced constant has errors\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0080`."}, {"sha": "86a86922d3b792417967fe7496380c77a32955bd", "filename": "src/test/ui/consts/const-eval/issue-43197.nll.stderr", "status": "removed", "additions": 0, "deletions": 43, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/d2e682afed62b3ba7b6cea55b6f8fcea296861a7/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-43197.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d2e682afed62b3ba7b6cea55b6f8fcea296861a7/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-43197.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-43197.nll.stderr?ref=d2e682afed62b3ba7b6cea55b6f8fcea296861a7", "patch": "@@ -1,43 +0,0 @@\n-warning: any use of this value will cause an error\n-  --> $DIR/issue-43197.rs:20:5\n-   |\n-LL |     const X: u32 = 0-1;\n-   |     ^^^^^^^^^^^^^^^---^\n-   |                    |\n-   |                    attempt to subtract with overflow\n-   |\n-note: lint level defined here\n-  --> $DIR/issue-43197.rs:11:9\n-   |\n-LL | #![warn(const_err)]\n-   |         ^^^^^^^^^\n-\n-warning: any use of this value will cause an error\n-  --> $DIR/issue-43197.rs:22:5\n-   |\n-LL |     const Y: u32 = foo(0-1);\n-   |     ^^^^^^^^^^^^^^^^^^^---^^\n-   |                        |\n-   |                        attempt to subtract with overflow\n-\n-error[E0080]: evaluation of constant expression failed\n-  --> $DIR/issue-43197.rs:24:14\n-   |\n-LL |     println!(\"{} {}\", X, Y);\n-   |              ^^^^^^^  - referenced constant has errors\n-\n-error[E0080]: evaluation of constant expression failed\n-  --> $DIR/issue-43197.rs:24:26\n-   |\n-LL |     println!(\"{} {}\", X, Y);\n-   |                          ^ referenced constant has errors\n-\n-error[E0080]: evaluation of constant expression failed\n-  --> $DIR/issue-43197.rs:24:23\n-   |\n-LL |     println!(\"{} {}\", X, Y);\n-   |                       ^ referenced constant has errors\n-\n-error: aborting due to 3 previous errors\n-\n-For more information about this error, try `rustc --explain E0080`."}, {"sha": "eaaebc5d75ae36ff9676f073f1df74b7312eada8", "filename": "src/test/ui/consts/const-eval/issue-43197.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1c5ff292fcaac24ae2bab9d24fc70e34b112cbbe/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-43197.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c5ff292fcaac24ae2bab9d24fc70e34b112cbbe/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-43197.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-43197.stderr?ref=1c5ff292fcaac24ae2bab9d24fc70e34b112cbbe", "patch": "@@ -1,5 +1,5 @@\n warning: any use of this value will cause an error\n-  --> $DIR/issue-43197.rs:20:5\n+  --> $DIR/issue-43197.rs:18:5\n    |\n LL |     const X: u32 = 0-1;\n    |     ^^^^^^^^^^^^^^^---^\n@@ -13,21 +13,21 @@ LL | #![warn(const_err)]\n    |         ^^^^^^^^^\n \n warning: any use of this value will cause an error\n-  --> $DIR/issue-43197.rs:22:5\n+  --> $DIR/issue-43197.rs:20:5\n    |\n LL |     const Y: u32 = foo(0-1);\n    |     ^^^^^^^^^^^^^^^^^^^---^^\n    |                        |\n    |                        attempt to subtract with overflow\n \n error[E0080]: evaluation of constant expression failed\n-  --> $DIR/issue-43197.rs:24:26\n+  --> $DIR/issue-43197.rs:22:26\n    |\n LL |     println!(\"{} {}\", X, Y);\n    |                          ^ referenced constant has errors\n \n error[E0080]: evaluation of constant expression failed\n-  --> $DIR/issue-43197.rs:24:23\n+  --> $DIR/issue-43197.rs:22:23\n    |\n LL |     println!(\"{} {}\", X, Y);\n    |                       ^ referenced constant has errors"}, {"sha": "71e06e36361e869d15b75f9e43f8c22fa6cf5305", "filename": "src/test/ui/consts/const-eval/issue-44578.nll.stderr", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d2e682afed62b3ba7b6cea55b6f8fcea296861a7/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-44578.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d2e682afed62b3ba7b6cea55b6f8fcea296861a7/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-44578.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-44578.nll.stderr?ref=d2e682afed62b3ba7b6cea55b6f8fcea296861a7", "patch": "@@ -1,15 +0,0 @@\n-error[E0080]: evaluation of constant expression failed\n-  --> $DIR/issue-44578.rs:35:14\n-   |\n-LL |     println!(\"{}\", <Bar<u16, u8> as Foo>::AMT);\n-   |              ^^^^  -------------------------- referenced constant has errors\n-\n-error[E0080]: evaluation of constant expression failed\n-  --> $DIR/issue-44578.rs:35:20\n-   |\n-LL |     println!(\"{}\", <Bar<u16, u8> as Foo>::AMT);\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0080`."}, {"sha": "3075be9e28b35430479ff938be99d2eb710df3a1", "filename": "src/test/ui/consts/const-eval/issue-52442.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c5ff292fcaac24ae2bab9d24fc70e34b112cbbe/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52442.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c5ff292fcaac24ae2bab9d24fc70e34b112cbbe/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52442.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52442.stderr?ref=1c5ff292fcaac24ae2bab9d24fc70e34b112cbbe", "patch": "@@ -8,7 +8,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/issue-52442.rs:12:11\n    |\n LL |     [();  { &loop { break } as *const _ as usize } ]; //~ ERROR unimplemented expression type\n-   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer, but expected the type usize\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer, but expected initialized plain bits\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n "}, {"sha": "807a70dd2014fbae2c7db51fa0577e923b2c255b", "filename": "src/test/ui/consts/const-eval/issue-52443.stderr", "status": "removed", "additions": 0, "deletions": 49, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/d2e682afed62b3ba7b6cea55b6f8fcea296861a7/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52443.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d2e682afed62b3ba7b6cea55b6f8fcea296861a7/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52443.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52443.stderr?ref=d2e682afed62b3ba7b6cea55b6f8fcea296861a7", "patch": "@@ -1,49 +0,0 @@\n-error[E0308]: mismatched types\n-  --> $DIR/issue-52443.rs:12:10\n-   |\n-LL |     [(); & { loop { continue } } ]; //~ ERROR mismatched types\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^\n-   |          |\n-   |          expected usize, found reference\n-   |          help: consider removing the borrow: `{ loop { continue } }`\n-   |\n-   = note: expected type `usize`\n-              found type `&_`\n-\n-error[E0308]: mismatched types\n-  --> $DIR/issue-52443.rs:13:17\n-   |\n-LL |     [(); loop { break }]; //~ ERROR mismatched types\n-   |                 ^^^^^ expected (), found usize\n-   |\n-   = note: expected type `()`\n-              found type `usize`\n-\n-error[E0019]: constant contains unimplemented expression type\n-  --> $DIR/issue-52443.rs:14:11\n-   |\n-LL |     [(); {while true {break}; 0}]; //~ ERROR constant contains unimplemented expression type\n-   |           ^^^^^^^^^^^^^^^^^^\n-\n-error[E0015]: calls in constants are limited to constant functions, tuple structs and tuple variants\n-  --> $DIR/issue-52443.rs:15:21\n-   |\n-LL |     [(); { for _ in 0usize.. {}; 0}]; //~ ERROR calls in constants are limited to constant functions\n-   |                     ^^^^^^^^\n-\n-error[E0019]: constant contains unimplemented expression type\n-  --> $DIR/issue-52443.rs:15:21\n-   |\n-LL |     [(); { for _ in 0usize.. {}; 0}]; //~ ERROR calls in constants are limited to constant functions\n-   |                     ^^^^^^^^\n-\n-error[E0080]: evaluation of constant value failed\n-  --> $DIR/issue-52443.rs:15:21\n-   |\n-LL |     [(); { for _ in 0usize.. {}; 0}]; //~ ERROR calls in constants are limited to constant functions\n-   |                     ^^^^^^^^ calling non-const fn `<I as std::iter::IntoIterator><std::ops::RangeFrom<usize>>::into_iter`\n-\n-error: aborting due to 6 previous errors\n-\n-Some errors occurred: E0015, E0019, E0080, E0308.\n-For more information about an error, try `rustc --explain E0015`."}, {"sha": "c6b3dd242e9c1070b8f8557111f5c074a68d13d5", "filename": "src/test/ui/consts/const-eval/promoted_const_fn_fail_deny_const_err.nll.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1c5ff292fcaac24ae2bab9d24fc70e34b112cbbe/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_const_fn_fail_deny_const_err.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c5ff292fcaac24ae2bab9d24fc70e34b112cbbe/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_const_fn_fail_deny_const_err.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_const_fn_fail_deny_const_err.nll.stderr?ref=1c5ff292fcaac24ae2bab9d24fc70e34b112cbbe", "patch": "@@ -0,0 +1,14 @@\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/promoted_const_fn_fail_deny_const_err.rs:31:27\n+   |\n+LL |     let x: &'static u8 = &(bar() + 1);\n+   |            -----------    ^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |            |\n+   |            type annotation requires that borrow lasts for `'static`\n+...\n+LL | }\n+   | - temporary value is freed at the end of this statement\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0716`."}, {"sha": "728ff39f5790c0dba6d2c6fe288be07c6f3da44a", "filename": "src/test/ui/consts/const-eval/promoted_const_fn_fail_deny_const_err.stderr", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1c5ff292fcaac24ae2bab9d24fc70e34b112cbbe/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_const_fn_fail_deny_const_err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c5ff292fcaac24ae2bab9d24fc70e34b112cbbe/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_const_fn_fail_deny_const_err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_const_fn_fail_deny_const_err.stderr?ref=1c5ff292fcaac24ae2bab9d24fc70e34b112cbbe", "patch": "@@ -1,19 +1,14 @@\n-error: reaching this expression at runtime will panic or abort\n-  --> $DIR/promoted_const_fn_fail_deny_const_err.rs:31:26\n+error[E0597]: borrowed value does not live long enough\n+  --> $DIR/promoted_const_fn_fail_deny_const_err.rs:31:27\n    |\n-LL |         Bar { a: &42 }.b as u8\n-   |         ---------------------- a raw memory access tried to access part of a pointer value as raw bytes\n-...\n LL |     let x: &'static u8 = &(bar() + 1);\n-   |                          ^^-----^^^^^\n-   |                            |\n-   |                            inside call to `bar`\n-   |\n-note: lint level defined here\n-  --> $DIR/promoted_const_fn_fail_deny_const_err.rs:13:9\n+   |                           ^^^^^^^^^^^ temporary value does not live long enough\n+...\n+LL | }\n+   | - temporary value only lives until here\n    |\n-LL | #![deny(const_err)]\n-   |         ^^^^^^^^^\n+   = note: borrowed value must be valid for the static lifetime...\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "d55c1c2c70ba1ca2027411b6a923207fb4f4f310", "filename": "src/test/ui/consts/const-eval/ref_to_int_match.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c5ff292fcaac24ae2bab9d24fc70e34b112cbbe/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fref_to_int_match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c5ff292fcaac24ae2bab9d24fc70e34b112cbbe/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fref_to_int_match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fref_to_int_match.stderr?ref=1c5ff292fcaac24ae2bab9d24fc70e34b112cbbe", "patch": "@@ -2,7 +2,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ref_to_int_match.rs:33:1\n    |\n LL | const BAR: Int = unsafe { Foo { r: &42 }.f }; //~ ERROR it is undefined behavior to use this value\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer, but expected the type u64\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer, but expected initialized plain bits\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n "}, {"sha": "1d0ac4c98f5cef7ef22952421f5301c2cf3a234e", "filename": "src/test/ui/consts/const-eval/transmute-const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c5ff292fcaac24ae2bab9d24fc70e34b112cbbe/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ftransmute-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c5ff292fcaac24ae2bab9d24fc70e34b112cbbe/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ftransmute-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ftransmute-const.rs?ref=1c5ff292fcaac24ae2bab9d24fc70e34b112cbbe", "patch": "@@ -13,6 +13,6 @@\n use std::mem;\n \n static FOO: bool = unsafe { mem::transmute(3u8) };\n-//~^ ERROR this static likely exhibits undefined behavior\n+//~^ ERROR it is undefined behavior to use this value\n \n fn main() {}"}, {"sha": "6d6ad38afdb96127c874653643bd779b61195e9a", "filename": "src/test/ui/consts/const-eval/ub-nonnull.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1c5ff292fcaac24ae2bab9d24fc70e34b112cbbe/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c5ff292fcaac24ae2bab9d24fc70e34b112cbbe/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.rs?ref=1c5ff292fcaac24ae2bab9d24fc70e34b112cbbe", "patch": "@@ -15,11 +15,11 @@ use std::ptr::NonNull;\n use std::num::{NonZeroU8, NonZeroUsize};\n \n const NULL_PTR: NonNull<u8> = unsafe { mem::transmute(0usize) };\n-//~^ ERROR this constant likely exhibits undefined behavior\n+//~^ ERROR it is undefined behavior to use this value\n \n const NULL_U8: NonZeroU8 = unsafe { mem::transmute(0u8) };\n-//~^ ERROR this constant likely exhibits undefined behavior\n+//~^ ERROR it is undefined behavior to use this value\n const NULL_USIZE: NonZeroUsize = unsafe { mem::transmute(0usize) };\n-//~^ ERROR this constant likely exhibits undefined behavior\n+//~^ ERROR it is undefined behavior to use this value\n \n fn main() {}"}, {"sha": "1fdea3f38d38d5ca4f6ed9e6cb14573689bd6ee6", "filename": "src/test/ui/consts/const-eval/ub-nonnull.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1c5ff292fcaac24ae2bab9d24fc70e34b112cbbe/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c5ff292fcaac24ae2bab9d24fc70e34b112cbbe/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.stderr?ref=1c5ff292fcaac24ae2bab9d24fc70e34b112cbbe", "patch": "@@ -1,20 +1,20 @@\n-error[E0080]: this constant likely exhibits undefined behavior\n+error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-nonnull.rs:17:1\n    |\n LL | const NULL_PTR: NonNull<u8> = unsafe { mem::transmute(0usize) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 0, but expected something greater or equal to 1\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n-error[E0080]: this constant likely exhibits undefined behavior\n+error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-nonnull.rs:20:1\n    |\n LL | const NULL_U8: NonZeroU8 = unsafe { mem::transmute(0u8) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 0, but expected something greater or equal to 1\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n-error[E0080]: this constant likely exhibits undefined behavior\n+error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-nonnull.rs:22:1\n    |\n LL | const NULL_USIZE: NonZeroUsize = unsafe { mem::transmute(0usize) };"}, {"sha": "2c2abd9127582a32dd3178ebf13bab47fd4814a0", "filename": "src/test/ui/consts/const-eval/ub-ref.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1c5ff292fcaac24ae2bab9d24fc70e34b112cbbe/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c5ff292fcaac24ae2bab9d24fc70e34b112cbbe/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref.rs?ref=1c5ff292fcaac24ae2bab9d24fc70e34b112cbbe", "patch": "@@ -13,18 +13,18 @@\n use std::mem;\n \n const UNALIGNED: &u16 = unsafe { mem::transmute(&[0u8; 4]) };\n-//~^ ERROR this constant likely exhibits undefined behavior\n+//~^ ERROR it is undefined behavior to use this value\n \n const NULL: &u16 = unsafe { mem::transmute(0usize) };\n-//~^ ERROR this constant likely exhibits undefined behavior\n+//~^ ERROR it is undefined behavior to use this value\n \n const REF_AS_USIZE: usize = unsafe { mem::transmute(&0) };\n-//~^ ERROR this constant likely exhibits undefined behavior\n+//~^ ERROR it is undefined behavior to use this value\n \n const REF_AS_USIZE_SLICE: &[usize] = &[unsafe { mem::transmute(&0) }];\n-//~^ ERROR this constant likely exhibits undefined behavior\n+//~^ ERROR it is undefined behavior to use this value\n \n const USIZE_AS_REF: &'static u8 = unsafe { mem::transmute(1337usize) };\n-//~^ ERROR this constant likely exhibits undefined behavior\n+//~^ ERROR it is undefined behavior to use this value\n \n fn main() {}"}, {"sha": "4ae4640d074e3a2b3b750fae93d45256d6a3ed23", "filename": "src/test/ui/consts/const-eval/ub-ref.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1c5ff292fcaac24ae2bab9d24fc70e34b112cbbe/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c5ff292fcaac24ae2bab9d24fc70e34b112cbbe/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref.stderr?ref=1c5ff292fcaac24ae2bab9d24fc70e34b112cbbe", "patch": "@@ -1,36 +1,36 @@\n-error[E0080]: this constant likely exhibits undefined behavior\n+error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-ref.rs:15:1\n    |\n LL | const UNALIGNED: &u16 = unsafe { mem::transmute(&[0u8; 4]) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered unaligned reference\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n-error[E0080]: this constant likely exhibits undefined behavior\n+error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-ref.rs:18:1\n    |\n LL | const NULL: &u16 = unsafe { mem::transmute(0usize) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 0, but expected something greater or equal to 1\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n-error[E0080]: this constant likely exhibits undefined behavior\n+error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-ref.rs:21:1\n    |\n LL | const REF_AS_USIZE: usize = unsafe { mem::transmute(&0) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer, but expected initialized plain bits\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n-error[E0080]: this constant likely exhibits undefined behavior\n+error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-ref.rs:24:1\n    |\n LL | const REF_AS_USIZE_SLICE: &[usize] = &[unsafe { mem::transmute(&0) }];\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ a raw memory access tried to access part of a pointer value as raw bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n-error[E0080]: this constant likely exhibits undefined behavior\n+error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-ref.rs:27:1\n    |\n LL | const USIZE_AS_REF: &'static u8 = unsafe { mem::transmute(1337usize) };"}, {"sha": "22262fd0b977449c558ec1acdb8305c6fc410f1b", "filename": "src/test/ui/consts/const-eval/ub-uninhabit.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1c5ff292fcaac24ae2bab9d24fc70e34b112cbbe/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-uninhabit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c5ff292fcaac24ae2bab9d24fc70e34b112cbbe/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-uninhabit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-uninhabit.rs?ref=1c5ff292fcaac24ae2bab9d24fc70e34b112cbbe", "patch": "@@ -16,13 +16,13 @@ use std::mem;\n enum Bar {}\n \n const BAD_BAD_BAD: Bar = unsafe { mem::transmute(()) };\n-//~^ ERROR this constant likely exhibits undefined behavior\n+//~^ ERROR it is undefined behavior to use this value\n \n const BAD_BAD_REF: &Bar = unsafe { mem::transmute(1usize) };\n-//~^ ERROR this constant likely exhibits undefined behavior\n+//~^ ERROR it is undefined behavior to use this value\n \n const BAD_BAD_ARRAY: [Bar; 1] = unsafe { mem::transmute(()) };\n-//~^ ERROR this constant likely exhibits undefined behavior\n+//~^ ERROR it is undefined behavior to use this value\n \n fn main() {\n }"}, {"sha": "2ac0a6e4e86739589476e6ea6f089d8e33da36ca", "filename": "src/test/ui/consts/const-eval/ub-uninhabit.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1c5ff292fcaac24ae2bab9d24fc70e34b112cbbe/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-uninhabit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c5ff292fcaac24ae2bab9d24fc70e34b112cbbe/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-uninhabit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-uninhabit.stderr?ref=1c5ff292fcaac24ae2bab9d24fc70e34b112cbbe", "patch": "@@ -1,20 +1,20 @@\n-error[E0080]: this constant likely exhibits undefined behavior\n+error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-uninhabit.rs:18:1\n    |\n LL | const BAD_BAD_BAD: Bar = unsafe { mem::transmute(()) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a value of an uninhabited type\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n-error[E0080]: this constant likely exhibits undefined behavior\n+error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-uninhabit.rs:21:1\n    |\n LL | const BAD_BAD_REF: &Bar = unsafe { mem::transmute(1usize) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a value of an uninhabited type at .<deref>\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n-error[E0080]: this constant likely exhibits undefined behavior\n+error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-uninhabit.rs:24:1\n    |\n LL | const BAD_BAD_ARRAY: [Bar; 1] = unsafe { mem::transmute(()) };"}, {"sha": "f591a5affe5da2b2adb85ef0bba8baf57493228b", "filename": "src/test/ui/consts/const-eval/ub-upvars.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c5ff292fcaac24ae2bab9d24fc70e34b112cbbe/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-upvars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c5ff292fcaac24ae2bab9d24fc70e34b112cbbe/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-upvars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-upvars.rs?ref=1c5ff292fcaac24ae2bab9d24fc70e34b112cbbe", "patch": "@@ -12,7 +12,7 @@\n \n use std::mem;\n \n-const BAD_UPVAR: &FnOnce() = &{ //~ ERROR this constant likely exhibits undefined behavior\n+const BAD_UPVAR: &FnOnce() = &{ //~ ERROR it is undefined behavior to use this value\n     let bad_ref: &'static u16 = unsafe { mem::transmute(0usize) };\n     let another_var = 13;\n     move || { let _ = bad_ref; let _ = another_var; }"}, {"sha": "178f80f88e8d6c4a05c189f44eb4481148cd4824", "filename": "src/test/ui/consts/const-eval/ub-upvars.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c5ff292fcaac24ae2bab9d24fc70e34b112cbbe/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-upvars.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c5ff292fcaac24ae2bab9d24fc70e34b112cbbe/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-upvars.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-upvars.stderr?ref=1c5ff292fcaac24ae2bab9d24fc70e34b112cbbe", "patch": "@@ -1,7 +1,7 @@\n-error[E0080]: this constant likely exhibits undefined behavior\n+error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-upvars.rs:15:1\n    |\n-LL | / const BAD_UPVAR: &FnOnce() = &{ //~ ERROR this constant likely exhibits undefined behavior\n+LL | / const BAD_UPVAR: &FnOnce() = &{ //~ ERROR it is undefined behavior to use this value\n LL | |     let bad_ref: &'static u16 = unsafe { mem::transmute(0usize) };\n LL | |     let another_var = 13;\n LL | |     move || { let _ = bad_ref; let _ = another_var; }"}, {"sha": "0e4f1e09171de97213808d5929a62416d84a205e", "filename": "src/test/ui/consts/const-eval/union-ice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c5ff292fcaac24ae2bab9d24fc70e34b112cbbe/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c5ff292fcaac24ae2bab9d24fc70e34b112cbbe/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ice.rs?ref=1c5ff292fcaac24ae2bab9d24fc70e34b112cbbe", "patch": "@@ -22,7 +22,7 @@ const UNION: DummyUnion = DummyUnion { field1: 1065353216 };\n \n const FIELD3: Field3 = unsafe { UNION.field3 }; //~ ERROR will cause an error\n \n-const FIELD_PATH: Struct = Struct { //~ ERROR any use of this value will cause an error\n+const FIELD_PATH: Struct = Struct { //~ ERROR it is undefined behavior to use this value\n     a: 42,\n     b: unsafe { UNION.field3 },\n };"}, {"sha": "d5a20640771df3c8224bd46762f54d59e4a855f0", "filename": "src/test/ui/consts/const-eval/union-ice.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c5ff292fcaac24ae2bab9d24fc70e34b112cbbe/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c5ff292fcaac24ae2bab9d24fc70e34b112cbbe/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ice.stderr?ref=1c5ff292fcaac24ae2bab9d24fc70e34b112cbbe", "patch": "@@ -6,10 +6,10 @@ LL | const FIELD3: Field3 = unsafe { UNION.field3 }; //~ ERROR will cause an err\n    |\n    = note: #[deny(const_err)] on by default\n \n-error: any use of this value will cause an error\n+error[E0080]: it is undefined behavior to use this value\n   --> $DIR/union-ice.rs:25:1\n    |\n-LL | / const FIELD_PATH: Struct = Struct { //~ ERROR any use of this value will cause an error\n+LL | / const FIELD_PATH: Struct = Struct { //~ ERROR it is undefined behavior to use this value\n LL | |     a: 42,\n LL | |     b: unsafe { UNION.field3 },\n LL | | };"}, {"sha": "a7b757f2d000066777b264214721270923268900", "filename": "src/test/ui/consts/const-fn-error.stderr", "status": "removed", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/d2e682afed62b3ba7b6cea55b6f8fcea296861a7/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d2e682afed62b3ba7b6cea55b6f8fcea296861a7/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-error.stderr?ref=d2e682afed62b3ba7b6cea55b6f8fcea296861a7", "patch": "@@ -1,41 +0,0 @@\n-error[E0658]: let bindings in constant functions are unstable (see issue #48821)\n-  --> $DIR/const-fn-error.rs:16:19\n-   |\n-LL |     let mut sum = 0;\n-   |                   ^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: statements in constant functions are unstable (see issue #48821)\n-  --> $DIR/const-fn-error.rs:16:19\n-   |\n-LL |     let mut sum = 0;\n-   |                   ^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0015]: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n-  --> $DIR/const-fn-error.rs:19:14\n-   |\n-LL |     for i in 0..x { //~ ERROR E0080\n-   |              ^^^^\n-\n-error[E0019]: constant function contains unimplemented expression type\n-  --> $DIR/const-fn-error.rs:19:14\n-   |\n-LL |     for i in 0..x { //~ ERROR E0080\n-   |              ^^^^\n-\n-error[E0080]: evaluation of constant value failed\n-  --> $DIR/const-fn-error.rs:19:14\n-   |\n-LL |     for i in 0..x { //~ ERROR E0080\n-   |              ^^^^ calling non-const fn `<I as std::iter::IntoIterator><std::ops::Range<usize>>::into_iter`\n-...\n-LL |     let a : [i32; f(X)];\n-   |                   ---- inside call to `f`\n-\n-error: aborting due to 5 previous errors\n-\n-Some errors occurred: E0015, E0019, E0080, E0658.\n-For more information about an error, try `rustc --explain E0015`."}, {"sha": "ef35bb6d98dae0b17c16eb7f56644fae887d1804", "filename": "src/test/ui/infinite/infinite-recursion-const-fn.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c5ff292fcaac24ae2bab9d24fc70e34b112cbbe/src%2Ftest%2Fui%2Finfinite%2Finfinite-recursion-const-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c5ff292fcaac24ae2bab9d24fc70e34b112cbbe/src%2Ftest%2Fui%2Finfinite%2Finfinite-recursion-const-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finfinite%2Finfinite-recursion-const-fn.stderr?ref=1c5ff292fcaac24ae2bab9d24fc70e34b112cbbe", "patch": "@@ -1,5 +1,5 @@\n error[E0080]: evaluation of constant value failed\n-  --> $DIR/infinite-recursion-const-fn.rs:14:25\n+  --> $DIR/infinite-recursion-const-fn.rs:13:25\n    |\n LL | const fn a() -> usize { b() } //~ ERROR evaluation of constant value failed\n    |                         ^^^"}, {"sha": "ca9da096b6c16e2139ccd353b1fdfd4a3fb777c9", "filename": "src/test/ui/issues/issue-39559-2.stderr", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1c5ff292fcaac24ae2bab9d24fc70e34b112cbbe/src%2Ftest%2Fui%2Fissues%2Fissue-39559-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c5ff292fcaac24ae2bab9d24fc70e34b112cbbe/src%2Ftest%2Fui%2Fissues%2Fissue-39559-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-39559-2.stderr?ref=1c5ff292fcaac24ae2bab9d24fc70e34b112cbbe", "patch": "@@ -4,24 +4,12 @@ error[E0015]: calls in constants are limited to constant functions, tuple struct\n LL |     let array: [usize; Dim3::dim()]\n    |                        ^^^^^^^^^^^\n \n-error[E0080]: evaluation of constant value failed\n-  --> $DIR/issue-39559-2.rs:24:24\n-   |\n-LL |     let array: [usize; Dim3::dim()]\n-   |                        ^^^^^^^^^^^ calling non-const fn `<Dim3 as Dim>::dim`\n-\n error[E0015]: calls in constants are limited to constant functions, tuple structs and tuple variants\n   --> $DIR/issue-39559-2.rs:26:15\n    |\n LL |         = [0; Dim3::dim()];\n    |               ^^^^^^^^^^^\n \n-error[E0080]: evaluation of constant value failed\n-  --> $DIR/issue-39559-2.rs:27:15\n-   |\n-LL |         = [0; Dim3::dim()];\n-   |               ^^^^^^^^^^^ calling non-const fn `<Dim3 as Dim>::dim`\n-\n-error: aborting due to 4 previous errors\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0015`."}, {"sha": "2bddc443d5baf8a564f20b6a6879b4184879dc18", "filename": "src/test/ui/issues/issue-43105.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1c5ff292fcaac24ae2bab9d24fc70e34b112cbbe/src%2Ftest%2Fui%2Fissues%2Fissue-43105.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c5ff292fcaac24ae2bab9d24fc70e34b112cbbe/src%2Ftest%2Fui%2Fissues%2Fissue-43105.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43105.rs?ref=1c5ff292fcaac24ae2bab9d24fc70e34b112cbbe", "patch": "@@ -12,11 +12,10 @@ fn xyz() -> u8 { 42 }\n \n const NUM: u8 = xyz();\n //~^ ERROR calls in constants are limited to constant functions, tuple structs and tuple variants\n-//~| ERROR any use of this value will cause an error\n \n fn main() {\n     match 1 {\n-        NUM => unimplemented!(), //~ ERROR could not evaluate constant pattern\n+        NUM => unimplemented!(),\n         _ => unimplemented!(),\n     }\n }"}, {"sha": "67a6008cd8ebc9dc80e4a7ae4ef8be48914935cf", "filename": "src/test/ui/issues/issue-43105.stderr", "status": "modified", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1c5ff292fcaac24ae2bab9d24fc70e34b112cbbe/src%2Ftest%2Fui%2Fissues%2Fissue-43105.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c5ff292fcaac24ae2bab9d24fc70e34b112cbbe/src%2Ftest%2Fui%2Fissues%2Fissue-43105.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43105.stderr?ref=1c5ff292fcaac24ae2bab9d24fc70e34b112cbbe", "patch": "@@ -4,22 +4,6 @@ error[E0015]: calls in constants are limited to constant functions, tuple struct\n LL | const NUM: u8 = xyz();\n    |                 ^^^^^\n \n-error: any use of this value will cause an error\n-  --> $DIR/issue-43105.rs:13:1\n-   |\n-LL | const NUM: u8 = xyz();\n-   | ^^^^^^^^^^^^^^^^-----^\n-   |                 |\n-   |                 calling non-const fn `xyz`\n-   |\n-   = note: #[deny(const_err)] on by default\n-\n-error: could not evaluate constant pattern\n-  --> $DIR/issue-43105.rs:19:9\n-   |\n-LL |         NUM => unimplemented!(), //~ ERROR could not evaluate constant pattern\n-   |         ^^^\n-\n-error: aborting due to 3 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0015`."}, {"sha": "03de0efd07362b5ea13527dea76821c4d526a7e6", "filename": "src/test/ui/issues/issue-52023-array-size-pointer-cast.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c5ff292fcaac24ae2bab9d24fc70e34b112cbbe/src%2Ftest%2Fui%2Fissues%2Fissue-52023-array-size-pointer-cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c5ff292fcaac24ae2bab9d24fc70e34b112cbbe/src%2Ftest%2Fui%2Fissues%2Fissue-52023-array-size-pointer-cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-52023-array-size-pointer-cast.stderr?ref=1c5ff292fcaac24ae2bab9d24fc70e34b112cbbe", "patch": "@@ -10,7 +10,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/issue-52023-array-size-pointer-cast.rs:12:17\n    |\n LL |     let _ = [0; (&0 as *const i32) as usize]; //~ ERROR casting pointers to integers in constants\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer, but expected the type usize\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer, but expected initialized plain bits\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n "}]}