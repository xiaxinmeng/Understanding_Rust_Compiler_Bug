{"sha": "dcb0f6309e93fd302952c1e8a7fb890fd32a5548", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjYjBmNjMwOWU5M2ZkMzAyOTUyYzFlOGE3ZmI4OTBmZDMyYTU1NDg=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-07-08T09:05:22Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-07-08T10:01:49Z"}, "message": "we cannot track all machine memory any more due to int-ptr-casts", "tree": {"sha": "3dfe19d79c31054600d2c73de1683449ccbe3da2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3dfe19d79c31054600d2c73de1683449ccbe3da2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dcb0f6309e93fd302952c1e8a7fb890fd32a5548", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dcb0f6309e93fd302952c1e8a7fb890fd32a5548", "html_url": "https://github.com/rust-lang/rust/commit/dcb0f6309e93fd302952c1e8a7fb890fd32a5548", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dcb0f6309e93fd302952c1e8a7fb890fd32a5548/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e94f57cb321a973f7efb96b1a24405636a5e903", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e94f57cb321a973f7efb96b1a24405636a5e903", "html_url": "https://github.com/rust-lang/rust/commit/5e94f57cb321a973f7efb96b1a24405636a5e903"}], "stats": {"total": 24, "additions": 14, "deletions": 10}, "files": [{"sha": "f1a465c7d624002f16408160f3640c02076fcfb7", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dcb0f6309e93fd302952c1e8a7fb890fd32a5548/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/dcb0f6309e93fd302952c1e8a7fb890fd32a5548/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=dcb0f6309e93fd302952c1e8a7fb890fd32a5548", "patch": "@@ -1 +1 @@\n-e1beee4992ad4b235fc700bf7af1ee86f894ea53\n+8ac1525e091d3db28e67adcbbd6db1e1deaa37fb"}, {"sha": "49d647838c9e179cf1fe5e958cdde38e2e3b15da", "filename": "src/machine.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dcb0f6309e93fd302952c1e8a7fb890fd32a5548/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcb0f6309e93fd302952c1e8a7fb890fd32a5548/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=dcb0f6309e93fd302952c1e8a7fb890fd32a5548", "patch": "@@ -54,14 +54,17 @@ pub enum MiriMemoryKind {\n     C,\n     /// Windows `HeapAlloc` memory.\n     WinHeap,\n-    /// Memory for args, errno, extern statics and other parts of the machine-managed environment.\n+    /// Memory for args, errno, and other parts of the machine-managed environment.\n     /// This memory may leak.\n     Machine,\n     /// Memory for env vars. Separate from `Machine` because we clean it up and leak-check it.\n     Env,\n     /// Globals copied from `tcx`.\n     /// This memory may leak.\n     Global,\n+    /// Memory for extern statics.\n+    /// This memory may leak.\n+    ExternGlobal,\n }\n \n impl Into<MemoryKind<MiriMemoryKind>> for MiriMemoryKind {\n@@ -77,7 +80,7 @@ impl MayLeak for MiriMemoryKind {\n         use self::MiriMemoryKind::*;\n         match self {\n             Rust | C | WinHeap | Env => false,\n-            Machine | Global => true,\n+            Machine | Global | ExternGlobal => true,\n         }\n     }\n }\n@@ -92,6 +95,7 @@ impl fmt::Display for MiriMemoryKind {\n             Machine => write!(f, \"machine-managed memory\"),\n             Env => write!(f, \"environment variable\"),\n             Global => write!(f, \"global\"),\n+            ExternGlobal => write!(f, \"extern global\"),\n         }\n     }\n }\n@@ -171,7 +175,7 @@ impl MemoryExtra {\n                 // \"__cxa_thread_atexit_impl\"\n                 // This should be all-zero, pointer-sized.\n                 let layout = this.machine.layouts.usize;\n-                let place = this.allocate(layout, MiriMemoryKind::Machine.into());\n+                let place = this.allocate(layout, MiriMemoryKind::ExternGlobal.into());\n                 this.write_scalar(Scalar::from_machine_usize(0, this), place.into())?;\n                 Self::add_extern_static(this, \"__cxa_thread_atexit_impl\", place.ptr);\n                 // \"environ\"\n@@ -181,7 +185,7 @@ impl MemoryExtra {\n                 // \"_tls_used\"\n                 // This is some obscure hack that is part of the Windows TLS story. It's a `u8`.\n                 let layout = this.machine.layouts.u8;\n-                let place = this.allocate(layout, MiriMemoryKind::Machine.into());\n+                let place = this.allocate(layout, MiriMemoryKind::ExternGlobal.into());\n                 this.write_scalar(Scalar::from_u8(0), place.into())?;\n                 Self::add_extern_static(this, \"_tls_used\", place.ptr);\n             }"}, {"sha": "4a2bec28bd17c6aa9eeb85384a8c2c73610d0b66", "filename": "src/shims/env.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dcb0f6309e93fd302952c1e8a7fb890fd32a5548/src%2Fshims%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcb0f6309e93fd302952c1e8a7fb890fd32a5548/src%2Fshims%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fenv.rs?ref=dcb0f6309e93fd302952c1e8a7fb890fd32a5548", "patch": "@@ -383,9 +383,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             this.memory.deallocate(this.force_ptr(old_vars_ptr)?, None, MiriMemoryKind::Env.into())?;\n         } else {\n             // No `environ` allocated yet, let's do that.\n-            // This is memory backing an extern static, hence `Machine`, not `Env`.\n+            // This is memory backing an extern static, hence `ExternGlobal`, not `Env`.\n             let layout = this.machine.layouts.usize;\n-            let place = this.allocate(layout, MiriMemoryKind::Machine.into());\n+            let place = this.allocate(layout, MiriMemoryKind::ExternGlobal.into());\n             this.machine.env_vars.environ = Some(place);\n         }\n "}, {"sha": "6942acc5e2b07346e2ff13b64833e128b8147f35", "filename": "src/stacked_borrows.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dcb0f6309e93fd302952c1e8a7fb890fd32a5548/src%2Fstacked_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcb0f6309e93fd302952c1e8a7fb890fd32a5548/src%2Fstacked_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows.rs?ref=dcb0f6309e93fd302952c1e8a7fb890fd32a5548", "patch": "@@ -466,13 +466,13 @@ impl Stacks {\n             // everything else off the stack, invalidating all previous pointers,\n             // and in particular, *all* raw pointers.\n             MemoryKind::Stack => (Tag::Tagged(extra.borrow_mut().new_ptr()), Permission::Unique),\n-            // Global memory can be referenced by global pointers from `tcx`.\n+            // `Global` memory can be referenced by global pointers from `tcx`.\n             // Thus we call `global_base_ptr` such that the global pointers get the same tag\n             // as what we use here.\n-            // `Machine` is used for extern statics, and thus must also be listed here.\n+            // `ExternGlobal` is used for extern statics, and thus must also be listed here.\n             // `Env` we list because we can get away with precise tracking there.\n             // The base pointer is not unique, so the base permission is `SharedReadWrite`.\n-            MemoryKind::Machine(MiriMemoryKind::Global | MiriMemoryKind::Machine | MiriMemoryKind::Env) =>\n+            MemoryKind::Machine(MiriMemoryKind::Global | MiriMemoryKind::ExternGlobal | MiriMemoryKind::Env) =>\n                 (extra.borrow_mut().global_base_ptr(id), Permission::SharedReadWrite),\n             // Everything else we handle entirely untagged for now.\n             // FIXME: experiment with more precise tracking."}]}