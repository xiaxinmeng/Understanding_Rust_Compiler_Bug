{"sha": "cd290b427c4256e710a189c2d674bede00a30958", "node_id": "C_kwDOAAsO6NoAKGNkMjkwYjQyN2M0MjU2ZTcxMGExODljMmQ2NzRiZWRlMDBhMzA5NTg", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-11-19T11:46:03Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-11-19T11:46:17Z"}, "message": "fix: inlay param hint hiding heurstic is case unsensitive", "tree": {"sha": "d96e0137aa2606b01434e2bb953dda1f99bf0916", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d96e0137aa2606b01434e2bb953dda1f99bf0916"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd290b427c4256e710a189c2d674bede00a30958", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd290b427c4256e710a189c2d674bede00a30958", "html_url": "https://github.com/rust-lang/rust/commit/cd290b427c4256e710a189c2d674bede00a30958", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd290b427c4256e710a189c2d674bede00a30958/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cfa26c3ac3d85d502f75c2f6b760aadcc997a1a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/cfa26c3ac3d85d502f75c2f6b760aadcc997a1a8", "html_url": "https://github.com/rust-lang/rust/commit/cfa26c3ac3d85d502f75c2f6b760aadcc997a1a8"}], "stats": {"total": 33, "additions": 25, "deletions": 8}, "files": [{"sha": "94af017d64bbbc7704c775391bca789b79f44ee3", "filename": "crates/ide/src/inlay_hints.rs", "status": "modified", "additions": 25, "deletions": 8, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/cd290b427c4256e710a189c2d674bede00a30958/crates%2Fide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd290b427c4256e710a189c2d674bede00a30958/crates%2Fide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints.rs?ref=cd290b427c4256e710a189c2d674bede00a30958", "patch": "@@ -441,15 +441,25 @@ fn is_argument_similar_to_param_name(argument: &ast::Expr, param_name: &str) ->\n         None => return false,\n     };\n \n+    // std is honestly too panic happy...\n+    let str_split_at = |str: &str, at| str.is_char_boundary(at).then(|| argument.split_at(at));\n+\n     let param_name = param_name.trim_start_matches('_');\n     let argument = argument.trim_start_matches('_');\n-    if argument.strip_prefix(param_name).map_or(false, |s| s.starts_with('_')) {\n-        return true;\n+\n+    match str_split_at(argument, param_name.len()) {\n+        Some((prefix, rest)) if prefix.eq_ignore_ascii_case(param_name) => {\n+            return rest.is_empty() || rest.starts_with('_');\n+        }\n+        _ => (),\n     }\n-    if argument.strip_suffix(param_name).map_or(false, |s| s.ends_with('_')) {\n-        return true;\n+    match argument.len().checked_sub(param_name.len()).and_then(|at| str_split_at(argument, at)) {\n+        Some((rest, suffix)) if param_name.eq_ignore_ascii_case(suffix) => {\n+            return rest.is_empty() || rest.ends_with('_');\n+        }\n+        _ => (),\n     }\n-    argument == param_name\n+    false\n }\n \n /// Hide the parameter name of a unary function if it is a `_` - prefixed suffix of the function's name, or equal.\n@@ -464,9 +474,13 @@ fn is_param_name_suffix_of_fn_name(\n     match (callable.n_params(), fn_name) {\n         (1, Some(function)) => {\n             function == param_name\n-                || (function.len() > param_name.len()\n-                    && function.ends_with(param_name)\n-                    && function[..function.len() - param_name.len()].ends_with('_'))\n+                || function\n+                    .len()\n+                    .checked_sub(param_name.len())\n+                    .and_then(|at| function.is_char_boundary(at).then(|| function.split_at(at)))\n+                    .map_or(false, |(prefix, suffix)| {\n+                        suffix.eq_ignore_ascii_case(param_name) && prefix.ends_with('_')\n+                    })\n         }\n         _ => false,\n     }\n@@ -852,6 +866,9 @@ enum CompletionKind {\n fn non_ident_pat((a, b): (u32, u32)) {}\n \n fn main() {\n+    const PARAM: u32 = 0;\n+    foo(PARAM);\n+\n     check(\"\");\n \n     map(0);"}]}