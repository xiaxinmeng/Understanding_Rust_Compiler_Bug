{"sha": "1b835da0f5a1a1e0fdb472c683ac1fc50c0483c1", "node_id": "C_kwDOAAsO6NoAKDFiODM1ZGEwZjVhMWExZTBmZGI0NzJjNjgzYWMxZmM1MGMwNDgzYzE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-24T05:59:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-24T05:59:23Z"}, "message": "Auto merge of #14639 - HKalbasi:dev2, r=Veykril\n\nFix some typos in `StructFlags`\n\nAnd a question: what is the benefit of storing things like `IS_BOX` in struct flags over using `lang_attr`?", "tree": {"sha": "3b63e263cb8073543dcdafd89afd5403b3e2822e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b63e263cb8073543dcdafd89afd5403b3e2822e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b835da0f5a1a1e0fdb472c683ac1fc50c0483c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b835da0f5a1a1e0fdb472c683ac1fc50c0483c1", "html_url": "https://github.com/rust-lang/rust/commit/1b835da0f5a1a1e0fdb472c683ac1fc50c0483c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b835da0f5a1a1e0fdb472c683ac1fc50c0483c1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc78ebd9d83d614562f0a9280bdedf91a3841a73", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc78ebd9d83d614562f0a9280bdedf91a3841a73", "html_url": "https://github.com/rust-lang/rust/commit/bc78ebd9d83d614562f0a9280bdedf91a3841a73"}, {"sha": "232f293c19700d21931cdea0a6c4afac97e77002", "url": "https://api.github.com/repos/rust-lang/rust/commits/232f293c19700d21931cdea0a6c4afac97e77002", "html_url": "https://github.com/rust-lang/rust/commit/232f293c19700d21931cdea0a6c4afac97e77002"}], "stats": {"total": 89, "additions": 84, "deletions": 5}, "files": [{"sha": "4eefd66d477844b4073eb3723fd3101aec611263", "filename": "crates/hir-def/src/data/adt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b835da0f5a1a1e0fdb472c683ac1fc50c0483c1/crates%2Fhir-def%2Fsrc%2Fdata%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b835da0f5a1a1e0fdb472c683ac1fc50c0483c1/crates%2Fhir-def%2Fsrc%2Fdata%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fdata%2Fadt.rs?ref=1b835da0f5a1a1e0fdb472c683ac1fc50c0483c1", "patch": "@@ -60,7 +60,7 @@ bitflags! {\n         /// Indicates whether this struct is `ManuallyDrop`.\n         const IS_MANUALLY_DROP = 1 << 6;\n         /// Indicates whether this struct is `UnsafeCell`.\n-        const IS_UNSAFE_CELL   = 1 << 6;\n+        const IS_UNSAFE_CELL   = 1 << 7;\n     }\n }\n "}, {"sha": "85ed46b96321a318defaadb7dee237f04163b991", "filename": "crates/hir-ty/src/lang_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b835da0f5a1a1e0fdb472c683ac1fc50c0483c1/crates%2Fhir-ty%2Fsrc%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b835da0f5a1a1e0fdb472c683ac1fc50c0483c1/crates%2Fhir-ty%2Fsrc%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Flang_items.rs?ref=1b835da0f5a1a1e0fdb472c683ac1fc50c0483c1", "patch": "@@ -7,7 +7,7 @@ use crate::db::HirDatabase;\n \n pub fn is_box(db: &dyn HirDatabase, adt: AdtId) -> bool {\n     let AdtId::StructId(id) = adt else { return false };\n-    db.struct_data(id).flags.contains(StructFlags::IS_UNSAFE_CELL)\n+    db.struct_data(id).flags.contains(StructFlags::IS_BOX)\n }\n \n pub fn is_unsafe_cell(db: &dyn HirDatabase, adt: AdtId) -> bool {"}, {"sha": "fef00771199afb4a2ff75847cb092f38e2bde9ec", "filename": "crates/hir-ty/src/mir.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1b835da0f5a1a1e0fdb472c683ac1fc50c0483c1/crates%2Fhir-ty%2Fsrc%2Fmir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b835da0f5a1a1e0fdb472c683ac1fc50c0483c1/crates%2Fhir-ty%2Fsrc%2Fmir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fmir.rs?ref=1b835da0f5a1a1e0fdb472c683ac1fc50c0483c1", "patch": "@@ -3,8 +3,8 @@\n use std::{fmt::Display, iter};\n \n use crate::{\n-    db::HirDatabase, infer::PointerCast, ClosureId, Const, ConstScalar, InferenceResult, Interner,\n-    MemoryMap, Substitution, Ty, TyKind,\n+    db::HirDatabase, display::HirDisplay, infer::PointerCast, lang_items::is_box, ClosureId, Const,\n+    ConstScalar, InferenceResult, Interner, MemoryMap, Substitution, Ty, TyKind,\n };\n use chalk_ir::Mutability;\n use hir_def::{\n@@ -115,8 +115,11 @@ impl<V, T> ProjectionElem<V, T> {\n         match self {\n             ProjectionElem::Deref => match &base.data(Interner).kind {\n                 TyKind::Raw(_, inner) | TyKind::Ref(_, _, inner) => inner.clone(),\n+                TyKind::Adt(adt, subst) if is_box(db, adt.0) => {\n+                    subst.at(Interner, 0).assert_ty_ref(Interner).clone()\n+                }\n                 _ => {\n-                    never!(\"Overloaded deref is not a projection\");\n+                    never!(\"Overloaded deref on type {} is not a projection\", base.display(db));\n                     return TyKind::Error.intern(Interner);\n                 }\n             },"}, {"sha": "1e57a4ae2968aa5b3548ccc4a072411f07e80624", "filename": "crates/hir-ty/src/tests/method_resolution.rs", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/1b835da0f5a1a1e0fdb472c683ac1fc50c0483c1/crates%2Fhir-ty%2Fsrc%2Ftests%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b835da0f5a1a1e0fdb472c683ac1fc50c0483c1/crates%2Fhir-ty%2Fsrc%2Ftests%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftests%2Fmethod_resolution.rs?ref=1b835da0f5a1a1e0fdb472c683ac1fc50c0483c1", "patch": "@@ -1939,3 +1939,54 @@ fn foo() {\n \"#,\n     );\n }\n+\n+#[test]\n+fn box_deref_is_builtin() {\n+    check(\n+        r#\"\n+//- minicore: deref\n+use core::ops::Deref;\n+\n+#[lang = \"owned_box\"]\n+struct Box<T>(*mut T);\n+\n+impl<T> Box<T> {\n+    fn new(t: T) -> Self {\n+        loop {}\n+    }\n+}\n+\n+impl<T> Deref for Box<T> {\n+    type Target = T;\n+    fn deref(&self) -> &Self::Target;\n+}\n+\n+struct Foo;\n+impl Foo {\n+    fn foo(&self) {}\n+}\n+fn test() {\n+    Box::new(Foo).foo();\n+  //^^^^^^^^^^^^^ adjustments: Deref(None), Borrow(Ref(Not))\n+}\n+\"#,\n+    );\n+}\n+\n+#[test]\n+fn manually_drop_deref_is_not_builtin() {\n+    check(\n+        r#\"\n+//- minicore: manually_drop, deref\n+struct Foo;\n+impl Foo {\n+    fn foo(&self) {}\n+}\n+use core::mem::ManuallyDrop;\n+fn test() {\n+    ManuallyDrop::new(Foo).foo();\n+  //^^^^^^^^^^^^^^^^^^^^^^ adjustments: Deref(Some(OverloadedDeref(Some(Not)))), Borrow(Ref(Not))\n+}\n+\"#,\n+    );\n+}"}, {"sha": "ca1dbf532c3dba6e2b07d622c533d3d92d53a14c", "filename": "crates/test-utils/src/minicore.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/1b835da0f5a1a1e0fdb472c683ac1fc50c0483c1/crates%2Ftest-utils%2Fsrc%2Fminicore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b835da0f5a1a1e0fdb472c683ac1fc50c0483c1/crates%2Ftest-utils%2Fsrc%2Fminicore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest-utils%2Fsrc%2Fminicore.rs?ref=1b835da0f5a1a1e0fdb472c683ac1fc50c0483c1", "patch": "@@ -31,6 +31,7 @@\n //!     infallible:\n //!     iterator: option\n //!     iterators: iterator, fn\n+//!     manually_drop: drop\n //!     non_zero:\n //!     option: panic\n //!     ord: eq, option\n@@ -194,6 +195,30 @@ pub mod convert {\n \n // region:drop\n pub mod mem {\n+    // region:manually_drop\n+    #[lang = \"manually_drop\"]\n+    #[repr(transparent)]\n+    pub struct ManuallyDrop<T: ?Sized> {\n+        value: T,\n+    }\n+\n+    impl<T> ManuallyDrop<T> {\n+        pub const fn new(value: T) -> ManuallyDrop<T> {\n+            ManuallyDrop { value }\n+        }\n+    }\n+\n+    // region:deref\n+    impl<T: ?Sized> crate::ops::Deref for ManuallyDrop<T> {\n+        type Target = T;\n+        fn deref(&self) -> &T {\n+            &self.value\n+        }\n+    }\n+    // endregion:deref\n+\n+    // endregion:manually_drop\n+\n     pub fn drop<T>(_x: T) {}\n }\n // endregion:drop"}]}