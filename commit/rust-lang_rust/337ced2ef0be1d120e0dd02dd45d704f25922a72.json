{"sha": "337ced2ef0be1d120e0dd02dd45d704f25922a72", "node_id": "C_kwDOAAsO6NoAKDMzN2NlZDJlZjBiZTFkMTIwZTBkZDAyZGQ0NWQ3MDRmMjU5MjJhNzI", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2021-12-21T09:41:02Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2021-12-22T03:05:54Z"}, "message": "rustc_metadata: Merge `get_ctor_def_id` and `get_ctor_kind`\n\nAlso avoid decoding the whole `ty::AssocItem` to get a `has_self` flag", "tree": {"sha": "a615b167896143b744ec3a375d25451917bce8a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a615b167896143b744ec3a375d25451917bce8a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/337ced2ef0be1d120e0dd02dd45d704f25922a72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/337ced2ef0be1d120e0dd02dd45d704f25922a72", "html_url": "https://github.com/rust-lang/rust/commit/337ced2ef0be1d120e0dd02dd45d704f25922a72", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/337ced2ef0be1d120e0dd02dd45d704f25922a72/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e100ec5bc7cd768ec17d75448b29c9ab4a39272b", "url": "https://api.github.com/repos/rust-lang/rust/commits/e100ec5bc7cd768ec17d75448b29c9ab4a39272b", "html_url": "https://github.com/rust-lang/rust/commit/e100ec5bc7cd768ec17d75448b29c9ab4a39272b"}], "stats": {"total": 49, "additions": 21, "deletions": 28}, "files": [{"sha": "5a67c91adcbc2bb90d4e2ec0392d4e9a0d417a31", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 17, "deletions": 19, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/337ced2ef0be1d120e0dd02dd45d704f25922a72/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/337ced2ef0be1d120e0dd02dd45d704f25922a72/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=337ced2ef0be1d120e0dd02dd45d704f25922a72", "patch": "@@ -1161,8 +1161,9 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n                     // Re-export lists automatically contain constructors when necessary.\n                     match kind {\n                         DefKind::Struct => {\n-                            if let Some(ctor_def_id) = self.get_ctor_def_id(child_index) {\n-                                let ctor_kind = self.get_ctor_kind(child_index);\n+                            if let Some((ctor_def_id, ctor_kind)) =\n+                                self.get_ctor_def_id_and_kind(child_index)\n+                            {\n                                 let ctor_res =\n                                     Res::Def(DefKind::Ctor(CtorOf::Struct, ctor_kind), ctor_def_id);\n                                 let vis = self.get_visibility(ctor_def_id.index);\n@@ -1174,8 +1175,9 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n                             // value namespace, they are reserved for possible future use.\n                             // It's ok to use the variant's id as a ctor id since an\n                             // error will be reported on any use of such resolution anyway.\n-                            let ctor_def_id = self.get_ctor_def_id(child_index).unwrap_or(def_id);\n-                            let ctor_kind = self.get_ctor_kind(child_index);\n+                            let (ctor_def_id, ctor_kind) = self\n+                                .get_ctor_def_id_and_kind(child_index)\n+                                .unwrap_or((def_id, CtorKind::Fictive));\n                             let ctor_res =\n                                 Res::Def(DefKind::Ctor(CtorOf::Variant, ctor_kind), ctor_def_id);\n                             let mut vis = self.get_visibility(ctor_def_id.index);\n@@ -1296,6 +1298,13 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n         }\n     }\n \n+    fn get_fn_has_self_parameter(&self, id: DefIndex) -> bool {\n+        match self.kind(id) {\n+            EntryKind::AssocFn(data) => data.decode(self).has_self,\n+            _ => false,\n+        }\n+    }\n+\n     fn get_associated_item(&self, id: DefIndex, sess: &Session) -> ty::AssocItem {\n         let def_key = self.def_key(id);\n         let parent = self.local_def_id(def_key.parent.unwrap());\n@@ -1326,22 +1335,11 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n         self.root.tables.variances.get(self, id).unwrap_or_else(Lazy::empty).decode(self)\n     }\n \n-    fn get_ctor_kind(&self, node_id: DefIndex) -> CtorKind {\n+    fn get_ctor_def_id_and_kind(&self, node_id: DefIndex) -> Option<(DefId, CtorKind)> {\n         match self.kind(node_id) {\n-            EntryKind::Struct(data, _) | EntryKind::Union(data, _) | EntryKind::Variant(data) => {\n-                data.decode(self).ctor_kind\n-            }\n-            _ => CtorKind::Fictive,\n-        }\n-    }\n-\n-    fn get_ctor_def_id(&self, node_id: DefIndex) -> Option<DefId> {\n-        match self.kind(node_id) {\n-            EntryKind::Struct(data, _) => {\n-                data.decode(self).ctor.map(|index| self.local_def_id(index))\n-            }\n-            EntryKind::Variant(data) => {\n-                data.decode(self).ctor.map(|index| self.local_def_id(index))\n+            EntryKind::Struct(data, _) | EntryKind::Variant(data) => {\n+                let vdata = data.decode(self);\n+                vdata.ctor.map(|index| (self.local_def_id(index), vdata.ctor_kind))\n             }\n             _ => None,\n         }"}, {"sha": "72a04e7042a113c0b5acf81ff88ffd137e4b486a", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/337ced2ef0be1d120e0dd02dd45d704f25922a72/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/337ced2ef0be1d120e0dd02dd45d704f25922a72/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=337ced2ef0be1d120e0dd02dd45d704f25922a72", "patch": "@@ -388,9 +388,7 @@ impl CStore {\n     }\n \n     pub fn ctor_def_id_and_kind_untracked(&self, def: DefId) -> Option<(DefId, CtorKind)> {\n-        self.get_crate_data(def.krate).get_ctor_def_id(def.index).map(|ctor_def_id| {\n-            (ctor_def_id, self.get_crate_data(def.krate).get_ctor_kind(def.index))\n-        })\n+        self.get_crate_data(def.krate).get_ctor_def_id_and_kind(def.index)\n     }\n \n     pub fn visibility_untracked(&self, def: DefId) -> Visibility {\n@@ -439,8 +437,8 @@ impl CStore {\n         )\n     }\n \n-    pub fn associated_item_cloned_untracked(&self, def: DefId, sess: &Session) -> ty::AssocItem {\n-        self.get_crate_data(def.krate).get_associated_item(def.index, sess)\n+    pub fn fn_has_self_parameter_untracked(&self, def: DefId) -> bool {\n+        self.get_crate_data(def.krate).get_fn_has_self_parameter(def.index)\n     }\n \n     pub fn crate_source_untracked(&self, cnum: CrateNum) -> CrateSource {"}, {"sha": "d57591186d87cacd58e8479f0cbb498f986afdd4", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/337ced2ef0be1d120e0dd02dd45d704f25922a72/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/337ced2ef0be1d120e0dd02dd45d704f25922a72/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=337ced2ef0be1d120e0dd02dd45d704f25922a72", "patch": "@@ -1016,10 +1016,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                 self.insert_field_names(def_id, field_names);\n             }\n             Res::Def(DefKind::AssocFn, def_id) => {\n-                if cstore\n-                    .associated_item_cloned_untracked(def_id, self.r.session)\n-                    .fn_has_self_parameter\n-                {\n+                if cstore.fn_has_self_parameter_untracked(def_id) {\n                     self.r.has_self.insert(def_id);\n                 }\n             }"}]}