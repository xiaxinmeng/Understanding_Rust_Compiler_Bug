{"sha": "dbdc61f9f91e39003cf18131c9eb3dfa5eccfd50", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiZGM2MWY5ZjkxZTM5MDAzY2YxODEzMWM5ZWIzZGZhNWVjY2ZkNTA=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-10-25T09:43:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-25T09:43:38Z"}, "message": "Rollup merge of #78085 - wesleywiser:mir_validation_switch_int, r=oli-obk\n\nMIR validation should check `SwitchInt` values are valid for the type\n\nFixes #75440", "tree": {"sha": "9bb298388e63e16bc05a5608cba20753bb8639ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9bb298388e63e16bc05a5608cba20753bb8639ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dbdc61f9f91e39003cf18131c9eb3dfa5eccfd50", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJflUjLCRBK7hj4Ov3rIwAAdHIIABg/8dhGM9bycTAl2uXaPHAV\n5Rkb88+Mi6VJc/RyZks4KV0+o68DbPdXW8PHTSLtwuEej2Lvrdr6BSsvxJQveGS5\nk+006EDB8gLyugEoi2IwTWp8g8i61QVIQ5wbWjryu8vDcvSBYQxA5UQklNLjJFcJ\nN19tankCpNmMm7Cq8S2OLmr5r0lRYy0kgu8VYd2DD/XT7DqYOcmGU+0FHSOIO0a+\nusXpX0znH0LMw5iXQfzoGt52zdnk334dEZZWD3ELV4wuD9BOHlzBzKJBO8e4eWKh\nzYjdMFoi764O10oYuJxRp3OIAvHa6tS1/MBWGqHHoXNZtWgGg+rntjuPh6QnVA4=\n=qy+g\n-----END PGP SIGNATURE-----\n", "payload": "tree 9bb298388e63e16bc05a5608cba20753bb8639ca\nparent 569d29d55c240eea3ff35d0a16572c2b81dd40bf\nparent dd683e5ab5d79782a484d919bb8de89764cf98d2\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1603619018 +0900\ncommitter GitHub <noreply@github.com> 1603619018 +0900\n\nRollup merge of #78085 - wesleywiser:mir_validation_switch_int, r=oli-obk\n\nMIR validation should check `SwitchInt` values are valid for the type\n\nFixes #75440\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dbdc61f9f91e39003cf18131c9eb3dfa5eccfd50", "html_url": "https://github.com/rust-lang/rust/commit/dbdc61f9f91e39003cf18131c9eb3dfa5eccfd50", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dbdc61f9f91e39003cf18131c9eb3dfa5eccfd50/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "569d29d55c240eea3ff35d0a16572c2b81dd40bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/569d29d55c240eea3ff35d0a16572c2b81dd40bf", "html_url": "https://github.com/rust-lang/rust/commit/569d29d55c240eea3ff35d0a16572c2b81dd40bf"}, {"sha": "dd683e5ab5d79782a484d919bb8de89764cf98d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd683e5ab5d79782a484d919bb8de89764cf98d2", "html_url": "https://github.com/rust-lang/rust/commit/dd683e5ab5d79782a484d919bb8de89764cf98d2"}], "stats": {"total": 26, "additions": 24, "deletions": 2}, "files": [{"sha": "7b22d643ab646c9e193d28ca2824a748d49b22fd", "filename": "compiler/rustc_mir/src/transform/validate.rs", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/dbdc61f9f91e39003cf18131c9eb3dfa5eccfd50/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbdc61f9f91e39003cf18131c9eb3dfa5eccfd50/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fvalidate.rs?ref=dbdc61f9f91e39003cf18131c9eb3dfa5eccfd50", "patch": "@@ -5,13 +5,17 @@ use crate::dataflow::{Analysis, ResultsCursor};\n use crate::util::storage::AlwaysLiveLocals;\n \n use super::MirPass;\n-use rustc_middle::mir::visit::{PlaceContext, Visitor};\n+use rustc_middle::mir::{\n+    interpret::Scalar,\n+    visit::{PlaceContext, Visitor},\n+};\n use rustc_middle::mir::{\n     AggregateKind, BasicBlock, Body, BorrowKind, Local, Location, MirPhase, Operand, Rvalue,\n     SourceScope, Statement, StatementKind, Terminator, TerminatorKind, VarDebugInfo,\n };\n use rustc_middle::ty::relate::{Relate, RelateResult, TypeRelation};\n use rustc_middle::ty::{self, ParamEnv, Ty, TyCtxt};\n+use rustc_target::abi::Size;\n \n #[derive(Copy, Clone, Debug)]\n enum EdgeKind {\n@@ -346,7 +350,25 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n                         ),\n                     );\n                 }\n-                for (_, target) in targets.iter() {\n+\n+                let target_width = self.tcx.sess.target.pointer_width;\n+\n+                let size = Size::from_bits(match switch_ty.kind() {\n+                    ty::Uint(uint) => uint.normalize(target_width).bit_width().unwrap(),\n+                    ty::Int(int) => int.normalize(target_width).bit_width().unwrap(),\n+                    ty::Char => 32,\n+                    ty::Bool => 1,\n+                    other => bug!(\"unhandled type: {:?}\", other),\n+                });\n+\n+                for (value, target) in targets.iter() {\n+                    if Scalar::<()>::try_from_uint(value, size).is_none() {\n+                        self.fail(\n+                            location,\n+                            format!(\"the value {:#x} is not a proper {:?}\", value, switch_ty),\n+                        )\n+                    }\n+\n                     self.check_edge(location, target, EdgeKind::Normal);\n                 }\n                 self.check_edge(location, targets.otherwise(), EdgeKind::Normal);"}]}