{"sha": "1114ab684fbad001c4e580326d8eb4d8c4e917d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExMTRhYjY4NGZiYWQwMDFjNGU1ODAzMjZkOGViNGQ4YzRlOTE3ZDM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-08-31T03:35:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-08-31T03:35:33Z"}, "message": "Auto merge of #53832 - pietroalbini:rollup, r=pietroalbini\n\nRollup of 20 pull requests\n\nSuccessful merges:\n\n - #51760 (Add another PartialEq example)\n - #53113 (Add example for Cow)\n - #53129 (remove `let x = baz` which was obscuring the real error)\n - #53389 (document effect of join on memory ordering)\n - #53472 (Use FxHash{Map,Set} instead of the default Hash{Map,Set} everywhere in rustc.)\n - #53476 (Add partialeq implementation for TryFromIntError type)\n - #53513 (Force-inline `shallow_resolve` at its hottest call site.)\n - #53655 (set applicability)\n - #53702 (Fix stabilisation version for macro_vis_matcher.)\n - #53727 (Do not suggest dereferencing in macro)\n - #53732 (save-analysis: Differentiate foreign functions and statics.)\n - #53740 (add llvm-readobj to llvm-tools-preview)\n - #53743 (fix a typo: taget_env -> target_env)\n - #53747 (Rustdoc fixes)\n - #53753 (expand keep-stage --help text)\n - #53756 (Fix typo in comment)\n - #53768 (move file-extension based .gitignore down to src/)\n - #53785 (Fix a comment in src/libcore/slice/mod.rs)\n - #53786 (Replace usages of 'bad_style' with 'nonstandard_style'.)\n - #53806 (Fix UI issues on Implementations on Foreign types)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "ca7e8212e95a1a99912f17d9df0c0313f75b8a0b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca7e8212e95a1a99912f17d9df0c0313f75b8a0b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1114ab684fbad001c4e580326d8eb4d8c4e917d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1114ab684fbad001c4e580326d8eb4d8c4e917d3", "html_url": "https://github.com/rust-lang/rust/commit/1114ab684fbad001c4e580326d8eb4d8c4e917d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1114ab684fbad001c4e580326d8eb4d8c4e917d3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8adc69a5a873dd7e840b7d002ae48a4c638ef7ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/8adc69a5a873dd7e840b7d002ae48a4c638ef7ee", "html_url": "https://github.com/rust-lang/rust/commit/8adc69a5a873dd7e840b7d002ae48a4c638ef7ee"}, {"sha": "6b1fffae20ce2c542fb6ee860b3ecfadd055abd2", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b1fffae20ce2c542fb6ee860b3ecfadd055abd2", "html_url": "https://github.com/rust-lang/rust/commit/6b1fffae20ce2c542fb6ee860b3ecfadd055abd2"}], "stats": {"total": 912, "additions": 568, "deletions": 344}, "files": [{"sha": "e18acfd98e241b14cf69e554406705d83f7e569d", "filename": ".gitignore", "status": "modified", "additions": 0, "deletions": 46, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/1114ab684fbad001c4e580326d8eb4d8c4e917d3/.gitignore", "raw_url": "https://github.com/rust-lang/rust/raw/1114ab684fbad001c4e580326d8eb4d8c4e917d3/.gitignore", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitignore?ref=1114ab684fbad001c4e580326d8eb4d8c4e917d3", "patch": "@@ -1,49 +1,3 @@\n-*.a\n-*.aux\n-*.bc\n-*.boot\n-*.bz2\n-*.cmi\n-*.cmo\n-*.cmx\n-*.cp\n-*.cps\n-*.d\n-*.dSYM\n-*.def\n-*.diff\n-*.dll\n-*.dylib\n-*.elc\n-*.epub\n-*.exe\n-*.fn\n-*.html\n-*.kdev4\n-*.ky\n-*.ll\n-*.llvm\n-*.log\n-*.o\n-*.orig\n-*.out\n-*.patch\n-*.pdb\n-*.pdf\n-*.pg\n-*.pot\n-*.pyc\n-*.rej\n-*.rlib\n-*.rustc\n-*.so\n-*.swo\n-*.swp\n-*.tmp\n-*.toc\n-*.tp\n-*.vr\n-*.x86\n *~\n .#*\n .DS_Store"}, {"sha": "f1b36f5858037b7f12fadf37c070c68ff886af21", "filename": "src/.gitignore", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2F.gitignore", "raw_url": "https://github.com/rust-lang/rust/raw/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2F.gitignore", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2F.gitignore?ref=1114ab684fbad001c4e580326d8eb4d8c4e917d3", "patch": "@@ -0,0 +1,46 @@\n+*.a\n+*.aux\n+*.bc\n+*.boot\n+*.bz2\n+*.cmi\n+*.cmo\n+*.cmx\n+*.cp\n+*.cps\n+*.d\n+*.dSYM\n+*.def\n+*.diff\n+*.dll\n+*.dylib\n+*.elc\n+*.epub\n+*.exe\n+*.fn\n+*.html\n+*.kdev4\n+*.ky\n+*.ll\n+*.llvm\n+*.log\n+*.o\n+*.orig\n+*.out\n+*.patch\n+*.pdb\n+*.pdf\n+*.pg\n+*.pot\n+*.pyc\n+*.rej\n+*.rlib\n+*.rustc\n+*.so\n+*.swo\n+*.swp\n+*.tmp\n+*.toc\n+*.tp\n+*.vr\n+*.x86"}, {"sha": "2084b8bdb65ffb859bb74195c6ec764ad4069afc", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=1114ab684fbad001c4e580326d8eb4d8c4e917d3", "patch": "@@ -125,7 +125,8 @@ To learn more about a subcommand, run `./x.py <subcommand> -h`\"\n             \"stage to build (indicates compiler to use/test, e.g. stage 0 uses the \\\n              bootstrap compiler, stage 1 the stage 0 rustc artifacts, etc.)\",\n             \"N\");\n-        opts.optmulti(\"\", \"keep-stage\", \"stage(s) to keep without recompiling\", \"N\");\n+        opts.optmulti(\"\", \"keep-stage\", \"stage(s) to keep without recompiling \\\n+            (pass multiple times to keep e.g. both stages 0 and 1)\", \"N\");\n         opts.optopt(\"\", \"src\", \"path to the root of the rust checkout\", \"DIR\");\n         opts.optopt(\"j\", \"jobs\", \"number of jobs to run in parallel\", \"JOBS\");\n         opts.optflag(\"h\", \"help\", \"print this help message\");"}, {"sha": "e6ee525ca2e0304bf4a8f615b3a6288361f2bc17", "filename": "src/bootstrap/job.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Fbootstrap%2Fjob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Fbootstrap%2Fjob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fjob.rs?ref=1114ab684fbad001c4e580326d8eb4d8c4e917d3", "patch": "@@ -37,7 +37,7 @@\n //! Note that this module has a #[cfg(windows)] above it as none of this logic\n //! is required on Unix.\n \n-#![allow(bad_style, dead_code)]\n+#![allow(nonstandard_style, dead_code)]\n \n use std::env;\n use std::io;"}, {"sha": "2725abdc3d95f4774ee4cfe31040aa68634a9155", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=1114ab684fbad001c4e580326d8eb4d8c4e917d3", "patch": "@@ -211,6 +211,7 @@ const LLVM_TOOLS: &[&str] = &[\n     \"llvm-objcopy\", // used to transform ELFs into binary format which flashing tools consume\n     \"llvm-objdump\", // used to disassemble programs\n     \"llvm-profdata\", // used to inspect and merge files generated by profiles\n+    \"llvm-readobj\", // used to get information from ELFs/objects that the other tools don't provide\n     \"llvm-size\", // used to prints the size of the linker sections of a program\n     \"llvm-strip\", // used to discard symbols from binary files to reduce their size\n ];"}, {"sha": "8ce8f20add3ad20fa2d5e61ae629cf7364cd0888", "filename": "src/bootstrap/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Fbootstrap%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Fbootstrap%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Futil.rs?ref=1114ab684fbad001c4e580326d8eb4d8c4e917d3", "patch": "@@ -137,7 +137,7 @@ pub fn symlink_dir(config: &Config, src: &Path, dest: &Path) -> io::Result<()> {\n     //\n     // Copied from std\n     #[cfg(windows)]\n-    #[allow(bad_style)]\n+    #[allow(nonstandard_style)]\n     fn symlink_dir_inner(target: &Path, junction: &Path) -> io::Result<()> {\n         use std::ptr;\n         use std::ffi::OsStr;"}, {"sha": "5ae5339138fbed3ef3bbc1049ca1d686f094f924", "filename": "src/liballoc/borrow.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Fliballoc%2Fborrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Fliballoc%2Fborrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fborrow.rs?ref=1114ab684fbad001c4e580326d8eb4d8c4e917d3", "patch": "@@ -141,6 +141,41 @@ impl<T> ToOwned for T\n /// let mut input = Cow::from(vec![-1, 0, 1]);\n /// abs_all(&mut input);\n /// ```\n+///\n+/// Another example showing how to keep `Cow` in a struct:\n+///\n+/// ```\n+/// use std::borrow::{Cow, ToOwned};\n+///\n+/// struct Items<'a, X: 'a> where [X]: ToOwned<Owned=Vec<X>> {\n+///     values: Cow<'a, [X]>,\n+/// }\n+///\n+/// impl<'a, X: Clone + 'a> Items<'a, X> where [X]: ToOwned<Owned=Vec<X>> {\n+///     fn new(v: Cow<'a, [X]>) -> Self {\n+///         Items { values: v }\n+///     }\n+/// }\n+///\n+/// // Creates a container from borrowed values of a slice\n+/// let readonly = [1, 2];\n+/// let borrowed = Items::new((&readonly[..]).into());\n+/// match borrowed {\n+///     Items { values: Cow::Borrowed(b) } => println!(\"borrowed {:?}\", b),\n+///     _ => panic!(\"expect borrowed value\"),\n+/// }\n+///\n+/// let mut clone_on_write = borrowed;\n+/// // Mutates the data from slice into owned vec and pushes a new value on top\n+/// clone_on_write.values.to_mut().push(3);\n+/// println!(\"clone_on_write = {:?}\", clone_on_write.values);\n+///\n+/// // The data was mutated. Let check it out.\n+/// match clone_on_write {\n+///     Items { values: Cow::Owned(_) } => println!(\"clone_on_write contains owned data\"),\n+///     _ => panic!(\"expect owned data\"),\n+/// }\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub enum Cow<'a, B: ?Sized + 'a>\n     where B: ToOwned"}, {"sha": "8848be5903810ef96bdbc44dda078a543e1c4fe0", "filename": "src/liballoc_system/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Fliballoc_system%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Fliballoc_system%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_system%2Flib.rs?ref=1114ab684fbad001c4e580326d8eb4d8c4e917d3", "patch": "@@ -220,7 +220,7 @@ mod platform {\n }\n \n #[cfg(windows)]\n-#[allow(bad_style)]\n+#[allow(nonstandard_style)]\n mod platform {\n     use MIN_ALIGN;\n     use System;"}, {"sha": "ef7d83a0993da134e3d670408c7b0008e59ee7b1", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 84, "deletions": 1, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=1114ab684fbad001c4e580326d8eb4d8c4e917d3", "patch": "@@ -75,7 +75,12 @@ use self::Ordering::*;\n /// the same book if their ISBN matches, even if the formats differ:\n ///\n /// ```\n-/// enum BookFormat { Paperback, Hardback, Ebook }\n+/// enum BookFormat {\n+///     Paperback,\n+///     Hardback,\n+///     Ebook,\n+/// }\n+///\n /// struct Book {\n ///     isbn: i32,\n ///     format: BookFormat,\n@@ -95,6 +100,84 @@ use self::Ordering::*;\n /// assert!(b1 != b3);\n /// ```\n ///\n+/// ## How can I compare two different types?\n+///\n+/// The type you can compare with is controlled by `PartialEq`'s type parameter.\n+/// For example, let's tweak our previous code a bit:\n+///\n+/// ```\n+/// enum BookFormat {\n+///     Paperback,\n+///     Hardback,\n+///     Ebook,\n+/// }\n+///\n+/// struct Book {\n+///     isbn: i32,\n+///     format: BookFormat,\n+/// }\n+///\n+/// impl PartialEq<BookFormat> for Book {\n+///     fn eq(&self, other: &BookFormat) -> bool {\n+///         match (&self.format, other) {\n+///            (BookFormat::Paperback, BookFormat::Paperback) => true,\n+///            (BookFormat::Hardback,  BookFormat::Hardback)  => true,\n+///            (BookFormat::Ebook,     BookFormat::Ebook)     => true,\n+///            (_, _) => false,\n+///         }\n+///     }\n+/// }\n+///\n+/// let b1 = Book { isbn: 3, format: BookFormat::Paperback };\n+///\n+/// assert!(b1 == BookFormat::Paperback);\n+/// assert!(b1 != BookFormat::Ebook);\n+/// ```\n+///\n+/// By changing `impl PartialEq for Book` to `impl PartialEq<BookFormat> for Book`,\n+/// we've changed what type we can use on the right side of the `==` operator.\n+/// This lets us use it in the `assert!` statements at the bottom.\n+///\n+/// You can also combine these implementations to let the `==` operator work with\n+/// two different types:\n+///\n+/// ```\n+/// enum BookFormat {\n+///     Paperback,\n+///     Hardback,\n+///     Ebook,\n+/// }\n+///\n+/// struct Book {\n+///     isbn: i32,\n+///     format: BookFormat,\n+/// }\n+///\n+/// impl PartialEq<BookFormat> for Book {\n+///     fn eq(&self, other: &BookFormat) -> bool {\n+///         match (&self.format, other) {\n+///            (&BookFormat::Paperback, &BookFormat::Paperback) => true,\n+///            (&BookFormat::Hardback,  &BookFormat::Hardback)  => true,\n+///            (&BookFormat::Ebook,     &BookFormat::Ebook)     => true,\n+///            (_, _) => false,\n+///         }\n+///     }\n+/// }\n+///\n+/// impl PartialEq for Book {\n+///     fn eq(&self, other: &Book) -> bool {\n+///         self.isbn == other.isbn\n+///     }\n+/// }\n+///\n+/// let b1 = Book { isbn: 3, format: BookFormat::Paperback };\n+/// let b2 = Book { isbn: 3, format: BookFormat::Ebook };\n+///\n+/// assert!(b1 == BookFormat::Paperback);\n+/// assert!(b1 != BookFormat::Ebook);\n+/// assert!(b1 == b2);\n+/// ```\n+///\n /// # Examples\n ///\n /// ```"}, {"sha": "fc405881b28da96fa2f43dfdbe0ada795a07c9fb", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=1114ab684fbad001c4e580326d8eb4d8c4e917d3", "patch": "@@ -4323,7 +4323,7 @@ from_str_radix_int_impl! { isize i8 i16 i32 i64 i128 usize u8 u16 u32 u64 u128 }\n \n /// The error type returned when a checked integral type conversion fails.\n #[unstable(feature = \"try_from\", issue = \"33417\")]\n-#[derive(Debug, Copy, Clone)]\n+#[derive(Debug, Copy, Clone, PartialEq, Eq)]\n pub struct TryFromIntError(());\n \n impl TryFromIntError {"}, {"sha": "f8c3feba74ca616cc7e4c8687633163aad40cf39", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=1114ab684fbad001c4e580326d8eb4d8c4e917d3", "patch": "@@ -21,14 +21,9 @@\n // The library infrastructure for slices is fairly messy. There's\n // a lot of stuff defined here. Let's keep it clean.\n //\n-// Since slices don't support inherent methods; all operations\n-// on them are defined on traits, which are then re-exported from\n-// the prelude for convenience. So there are a lot of traits here.\n-//\n // The layout of this file is thus:\n //\n-// * Slice-specific 'extension' traits and their implementations. This\n-//   is where most of the slice API resides.\n+// * Inherent methods. This is where most of the slice API resides.\n // * Implementations of a few common traits with important slice ops.\n // * Definitions of a bunch of iterators.\n // * Free functions."}, {"sha": "d6298a38a2601fbd3cee9699c40ec983e7f0af84", "filename": "src/libpanic_unwind/seh.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibpanic_unwind%2Fseh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibpanic_unwind%2Fseh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Fseh.rs?ref=1114ab684fbad001c4e580326d8eb4d8c4e917d3", "patch": "@@ -54,7 +54,7 @@\n //! [win64]: http://msdn.microsoft.com/en-us/library/1eyas8tf.aspx\n //! [llvm]: http://llvm.org/docs/ExceptionHandling.html#background-on-windows-exceptions\n \n-#![allow(bad_style)]\n+#![allow(nonstandard_style)]\n #![allow(private_no_mangle_fns)]\n \n use alloc::boxed::Box;"}, {"sha": "c2074db00385b8367c823eb44d3ba4365d65b1c0", "filename": "src/libpanic_unwind/seh64_gnu.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibpanic_unwind%2Fseh64_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibpanic_unwind%2Fseh64_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Fseh64_gnu.rs?ref=1114ab684fbad001c4e580326d8eb4d8c4e917d3", "patch": "@@ -11,7 +11,7 @@\n //! Unwinding implementation of top of native Win64 SEH,\n //! however the unwind handler data (aka LSDA) uses GCC-compatible encoding.\n \n-#![allow(bad_style)]\n+#![allow(nonstandard_style)]\n #![allow(private_no_mangle_fns)]\n \n use alloc::boxed::Box;"}, {"sha": "0a1c9b3adf183b67143f02a7f335dc16446d5591", "filename": "src/libpanic_unwind/windows.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibpanic_unwind%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibpanic_unwind%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Fwindows.rs?ref=1114ab684fbad001c4e580326d8eb4d8c4e917d3", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(bad_style)]\n+#![allow(nonstandard_style)]\n #![allow(dead_code)]\n #![cfg(windows)]\n "}, {"sha": "8584b534ff240b4c5cb18781653f66197b04318c", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=1114ab684fbad001c4e580326d8eb4d8c4e917d3", "patch": "@@ -50,14 +50,15 @@ use hir::GenericArg;\n use lint::builtin::{self, PARENTHESIZED_PARAMS_IN_TYPES_AND_MODULES,\n                     ELIDED_LIFETIMES_IN_PATHS};\n use middle::cstore::CrateStore;\n+use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::indexed_vec::IndexVec;\n use rustc_data_structures::small_vec::OneVector;\n use rustc_data_structures::thin_vec::ThinVec;\n use session::Session;\n use util::common::FN_OUTPUT_NAME;\n use util::nodemap::{DefIdMap, NodeMap};\n \n-use std::collections::{BTreeMap, HashSet};\n+use std::collections::BTreeMap;\n use std::fmt::Debug;\n use std::iter;\n use std::mem;\n@@ -1342,7 +1343,7 @@ impl<'a> LoweringContext<'a> {\n             exist_ty_id: NodeId,\n             collect_elided_lifetimes: bool,\n             currently_bound_lifetimes: Vec<hir::LifetimeName>,\n-            already_defined_lifetimes: HashSet<hir::LifetimeName>,\n+            already_defined_lifetimes: FxHashSet<hir::LifetimeName>,\n             output_lifetimes: Vec<hir::GenericArg>,\n             output_lifetime_params: Vec<hir::GenericParam>,\n         }\n@@ -1476,7 +1477,7 @@ impl<'a> LoweringContext<'a> {\n             exist_ty_id,\n             collect_elided_lifetimes: true,\n             currently_bound_lifetimes: Vec::new(),\n-            already_defined_lifetimes: HashSet::new(),\n+            already_defined_lifetimes: FxHashSet::default(),\n             output_lifetimes: Vec::new(),\n             output_lifetime_params: Vec::new(),\n         };"}, {"sha": "a379438275d897f5b2e7079ed3ca31027be9c220", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=1114ab684fbad001c4e580326d8eb4d8c4e917d3", "patch": "@@ -1116,7 +1116,11 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         self.resolve_type_vars_if_possible(t).to_string()\n     }\n \n-    pub fn shallow_resolve(&self, typ: Ty<'tcx>) -> Ty<'tcx> {\n+    // We have this force-inlined variant of shallow_resolve() for the one\n+    // callsite that is extremely hot. All other callsites use the normal\n+    // variant.\n+    #[inline(always)]\n+    pub fn inlined_shallow_resolve(&self, typ: Ty<'tcx>) -> Ty<'tcx> {\n         match typ.sty {\n             ty::Infer(ty::TyVar(v)) => {\n                 // Not entirely obvious: if `typ` is a type variable,\n@@ -1157,6 +1161,10 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         }\n     }\n \n+    pub fn shallow_resolve(&self, typ: Ty<'tcx>) -> Ty<'tcx> {\n+        self.inlined_shallow_resolve(typ)\n+    }\n+\n     pub fn resolve_type_vars_if_possible<T>(&self, value: &T) -> T\n         where T: TypeFoldable<'tcx>\n     {"}, {"sha": "cbf6722c0fd375dbcbfbac29a7dd1862098ef168", "filename": "src/librustc/middle/weak_lang_items.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs?ref=1114ab684fbad001c4e580326d8eb4d8c4e917d3", "patch": "@@ -13,6 +13,7 @@\n use session::config;\n use middle::lang_items;\n \n+use rustc_data_structures::fx::FxHashSet;\n use rustc_target::spec::PanicStrategy;\n use syntax::ast;\n use syntax::symbol::Symbol;\n@@ -23,8 +24,6 @@ use hir::intravisit;\n use hir;\n use ty::TyCtxt;\n \n-use std::collections::HashSet;\n-\n macro_rules! weak_lang_items {\n     ($($name:ident, $item:ident, $sym:ident;)*) => (\n \n@@ -101,7 +100,7 @@ fn verify<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         return\n     }\n \n-    let mut missing = HashSet::new();\n+    let mut missing = FxHashSet::default();\n     for &cnum in tcx.crates().iter() {\n         for &item in tcx.missing_lang_items(cnum).iter() {\n             missing.insert(item);"}, {"sha": "ee683e37648f0089c9f316c667d88cbda01639d5", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=1114ab684fbad001c4e580326d8eb4d8c4e917d3", "patch": "@@ -37,10 +37,10 @@ use std::collections::btree_map::Iter as BTreeMapIter;\n use std::collections::btree_map::Keys as BTreeMapKeysIter;\n use std::collections::btree_map::Values as BTreeMapValuesIter;\n \n+use rustc_data_structures::fx::FxHashSet;\n use std::{fmt, str};\n use std::hash::Hasher;\n use std::collections::hash_map::DefaultHasher;\n-use std::collections::HashSet;\n use std::iter::FromIterator;\n use std::path::{Path, PathBuf};\n \n@@ -1373,7 +1373,7 @@ pub fn default_configuration(sess: &Session) -> ast::CrateConfig {\n     let max_atomic_width = sess.target.target.max_atomic_width();\n     let atomic_cas = sess.target.target.options.atomic_cas;\n \n-    let mut ret = HashSet::new();\n+    let mut ret = FxHashSet::default();\n     // Target bindings.\n     ret.insert((Symbol::intern(\"target_os\"), Some(Symbol::intern(os))));\n     if let Some(ref fam) = sess.target.target.options.target_family {"}, {"sha": "0de5d3d03d5c37cbb725264079ddc62b10bb42d3", "filename": "src/librustc/session/filesearch.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibrustc%2Fsession%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibrustc%2Fsession%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Ffilesearch.rs?ref=1114ab684fbad001c4e580326d8eb4d8c4e917d3", "patch": "@@ -12,8 +12,8 @@\n \n pub use self::FileMatch::*;\n \n+use rustc_data_structures::fx::FxHashSet;\n use std::borrow::Cow;\n-use std::collections::HashSet;\n use std::env;\n use std::fs;\n use std::path::{Path, PathBuf};\n@@ -40,7 +40,7 @@ impl<'a> FileSearch<'a> {\n     pub fn for_each_lib_search_path<F>(&self, mut f: F) where\n         F: FnMut(&Path, PathKind)\n     {\n-        let mut visited_dirs = HashSet::new();\n+        let mut visited_dirs = FxHashSet::default();\n \n         for (path, kind) in self.search_paths.iter(self.kind) {\n             f(path, kind);"}, {"sha": "00c5369e0644e371a894db0c8d8befe4e093eaf6", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=1114ab684fbad001c4e580326d8eb4d8c4e917d3", "patch": "@@ -47,7 +47,6 @@ use jobserver::Client;\n \n use std;\n use std::cell::{self, Cell, RefCell};\n-use std::collections::HashMap;\n use std::env;\n use std::fmt;\n use std::io::Write;\n@@ -122,7 +121,7 @@ pub struct Session {\n     /// Map from imported macro spans (which consist of\n     /// the localized span for the macro body) to the\n     /// macro name and definition span in the source crate.\n-    pub imported_macro_spans: OneThread<RefCell<HashMap<Span, (String, Span)>>>,\n+    pub imported_macro_spans: OneThread<RefCell<FxHashMap<Span, (String, Span)>>>,\n \n     incr_comp_session: OneThread<RefCell<IncrCompSession>>,\n \n@@ -1122,7 +1121,7 @@ pub fn build_session_(\n         injected_allocator: Once::new(),\n         allocator_kind: Once::new(),\n         injected_panic_runtime: Once::new(),\n-        imported_macro_spans: OneThread::new(RefCell::new(HashMap::new())),\n+        imported_macro_spans: OneThread::new(RefCell::new(FxHashMap::default())),\n         incr_comp_session: OneThread::new(RefCell::new(IncrCompSession::NotInitialized)),\n         self_profiling: Lock::new(SelfProfiler::new()),\n         profile_channel: Lock::new(None),"}, {"sha": "9998db4ad1d48569f8ce45bd488d949a5f3b2467", "filename": "src/librustc/traits/fulfill.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ffulfill.rs?ref=1114ab684fbad001c4e580326d8eb4d8c4e917d3", "patch": "@@ -269,7 +269,8 @@ impl<'a, 'b, 'gcx, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'b, 'gcx,\n         // doing more work yet\n         if !pending_obligation.stalled_on.is_empty() {\n             if pending_obligation.stalled_on.iter().all(|&ty| {\n-                let resolved_ty = self.selcx.infcx().shallow_resolve(&ty);\n+                // Use the force-inlined variant of shallow_resolve() because this code is hot.\n+                let resolved_ty = self.selcx.infcx().inlined_shallow_resolve(&ty);\n                 resolved_ty == ty // nothing changed here\n             }) {\n                 debug!(\"process_predicate: pending obligation {:?} still stalled on {:?}\","}, {"sha": "d07891fca12aea5144fbe378051805c345a2eb43", "filename": "src/librustc/ty/query/job.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibrustc%2Fty%2Fquery%2Fjob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibrustc%2Fty%2Fquery%2Fjob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fjob.rs?ref=1114ab684fbad001c4e580326d8eb4d8c4e917d3", "patch": "@@ -11,6 +11,7 @@\n #![allow(warnings)]\n \n use std::mem;\n+use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::sync::{Lock, LockGuard, Lrc, Weak};\n use rustc_data_structures::OnDrop;\n use syntax_pos::Span;\n@@ -21,7 +22,7 @@ use ty::context::TyCtxt;\n use errors::Diagnostic;\n use std::process;\n use std::{fmt, ptr};\n-use std::collections::HashSet;\n+\n #[cfg(parallel_queries)]\n use {\n     rayon_core,\n@@ -282,7 +283,7 @@ where\n fn cycle_check<'tcx>(query: Lrc<QueryJob<'tcx>>,\n                      span: Span,\n                      stack: &mut Vec<(Span, Lrc<QueryJob<'tcx>>)>,\n-                     visited: &mut HashSet<*const QueryJob<'tcx>>\n+                     visited: &mut FxHashSet<*const QueryJob<'tcx>>\n ) -> Option<Option<Waiter<'tcx>>> {\n     if visited.contains(&query.as_ptr()) {\n         return if let Some(p) = stack.iter().position(|q| q.1.as_ptr() == query.as_ptr()) {\n@@ -321,7 +322,7 @@ fn cycle_check<'tcx>(query: Lrc<QueryJob<'tcx>>,\n #[cfg(parallel_queries)]\n fn connected_to_root<'tcx>(\n     query: Lrc<QueryJob<'tcx>>,\n-    visited: &mut HashSet<*const QueryJob<'tcx>>\n+    visited: &mut FxHashSet<*const QueryJob<'tcx>>\n ) -> bool {\n     // We already visited this or we're deliberately ignoring it\n     if visited.contains(&query.as_ptr()) {\n@@ -357,7 +358,7 @@ fn remove_cycle<'tcx>(\n     wakelist: &mut Vec<Lrc<QueryWaiter<'tcx>>>,\n     tcx: TyCtxt<'_, 'tcx, '_>\n ) -> bool {\n-    let mut visited = HashSet::new();\n+    let mut visited = FxHashSet::default();\n     let mut stack = Vec::new();\n     // Look for a cycle starting with the last query in `jobs`\n     if let Some(waiter) = cycle_check(jobs.pop().unwrap(),\n@@ -389,7 +390,7 @@ fn remove_cycle<'tcx>(\n         // connected to queries outside the cycle\n         let entry_points: Vec<Lrc<QueryJob<'tcx>>> = stack.iter().filter_map(|query| {\n             // Mark all the other queries in the cycle as already visited\n-            let mut visited = HashSet::from_iter(stack.iter().filter_map(|q| {\n+            let mut visited = FxHashSet::from_iter(stack.iter().filter_map(|q| {\n                 if q.1.as_ptr() != query.1.as_ptr() {\n                     Some(q.1.as_ptr())\n                 } else {"}, {"sha": "0edb1aa79e74583d5866c18ea3a72a3f0b685470", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=1114ab684fbad001c4e580326d8eb4d8c4e917d3", "patch": "@@ -718,7 +718,7 @@ macro_rules! define_queries_inner {\n             }\n         }\n \n-        #[allow(bad_style)]\n+        #[allow(nonstandard_style)]\n         #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n         pub enum Query<$tcx> {\n             $($(#[$attr])* $name($K)),*\n@@ -775,7 +775,7 @@ macro_rules! define_queries_inner {\n         pub mod queries {\n             use std::marker::PhantomData;\n \n-            $(#[allow(bad_style)]\n+            $(#[allow(nonstandard_style)]\n             pub struct $name<$tcx> {\n                 data: PhantomData<&$tcx ()>\n             })*"}, {"sha": "02bdc5f41b35428e04287114043e94ce6ad0b5f5", "filename": "src/librustc/util/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibrustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibrustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fcommon.rs?ref=1114ab684fbad001c4e580326d8eb4d8c4e917d3", "patch": "@@ -84,7 +84,7 @@ pub struct ProfQDumpParams {\n     pub dump_profq_msg_log:bool,\n }\n \n-#[allow(bad_style)]\n+#[allow(nonstandard_style)]\n #[derive(Clone, Debug, PartialEq, Eq)]\n pub struct QueryMsg {\n     pub query: &'static str,"}, {"sha": "70760d35f7865c1f3e78d8b208f6990d37cb59d7", "filename": "src/librustc/util/profiling.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibrustc%2Futil%2Fprofiling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibrustc%2Futil%2Fprofiling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fprofiling.rs?ref=1114ab684fbad001c4e580326d8eb4d8c4e917d3", "patch": "@@ -21,7 +21,7 @@ macro_rules! define_categories {\n             $($name),*\n         }\n \n-        #[allow(bad_style)]\n+        #[allow(nonstandard_style)]\n         struct Categories<T> {\n             $($name: T),*\n         }"}, {"sha": "3ba4e4ddbb13bb7e883f26b7096ba4324aac5be1", "filename": "src/librustc/util/time_graph.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibrustc%2Futil%2Ftime_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibrustc%2Futil%2Ftime_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Ftime_graph.rs?ref=1114ab684fbad001c4e580326d8eb4d8c4e917d3", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::collections::HashMap;\n+use rustc_data_structures::fx::FxHashMap;\n use std::fs::File;\n use std::io::prelude::*;\n use std::marker::PhantomData;\n@@ -40,7 +40,7 @@ struct PerThread {\n \n #[derive(Clone)]\n pub struct TimeGraph {\n-    data: Arc<Mutex<HashMap<TimelineId, PerThread>>>,\n+    data: Arc<Mutex<FxHashMap<TimelineId, PerThread>>>,\n }\n \n #[derive(Clone, Copy)]\n@@ -68,7 +68,7 @@ impl Drop for RaiiToken {\n impl TimeGraph {\n     pub fn new() -> TimeGraph {\n         TimeGraph {\n-            data: Arc::new(Mutex::new(HashMap::new()))\n+            data: Arc::new(Mutex::new(FxHashMap::default()))\n         }\n     }\n "}, {"sha": "ebb229b7b6bfaca67f304b84c4f245e53fc5e3f1", "filename": "src/librustc_codegen_llvm/back/linker.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibrustc_codegen_llvm%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibrustc_codegen_llvm%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Flinker.rs?ref=1114ab684fbad001c4e580326d8eb4d8c4e917d3", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::collections::HashMap;\n+use rustc_data_structures::fx::FxHashMap;\n use std::ffi::{OsStr, OsString};\n use std::fs::{self, File};\n use std::io::prelude::*;\n@@ -31,7 +31,7 @@ use llvm_util;\n /// For all the linkers we support, and information they might\n /// need out of the shared crate context before we get rid of it.\n pub struct LinkerInfo {\n-    exports: HashMap<CrateType, Vec<String>>,\n+    exports: FxHashMap<CrateType, Vec<String>>,\n }\n \n impl LinkerInfo {"}, {"sha": "aa4f7688b0f42fb7be454b93e8017609a3c88d93", "filename": "src/librustc_codegen_llvm/back/rpath.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibrustc_codegen_llvm%2Fback%2Frpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibrustc_codegen_llvm%2Fback%2Frpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Frpath.rs?ref=1114ab684fbad001c4e580326d8eb4d8c4e917d3", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::collections::HashSet;\n+use rustc_data_structures::fx::FxHashSet;\n use std::env;\n use std::path::{Path, PathBuf};\n use std::fs;\n@@ -172,7 +172,7 @@ fn get_install_prefix_rpath(config: &mut RPathConfig) -> String {\n }\n \n fn minimize_rpaths(rpaths: &[String]) -> Vec<String> {\n-    let mut set = HashSet::new();\n+    let mut set = FxHashSet::default();\n     let mut minimized = Vec::new();\n     for rpath in rpaths {\n         if set.insert(rpath) {"}, {"sha": "f10a9a68bed5b3a73d2354b2e6a2e61b34572fd5", "filename": "src/librustc_data_structures/flock.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibrustc_data_structures%2Fflock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibrustc_data_structures%2Fflock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fflock.rs?ref=1114ab684fbad001c4e580326d8eb4d8c4e917d3", "patch": "@@ -239,7 +239,7 @@ mod imp {\n }\n \n #[cfg(windows)]\n-#[allow(bad_style)]\n+#[allow(nonstandard_style)]\n mod imp {\n     use std::io;\n     use std::mem;"}, {"sha": "26cc2c9f17cfbd57dba41abe1cdc796fb6022e4b", "filename": "src/librustc_data_structures/graph/test.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibrustc_data_structures%2Fgraph%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibrustc_data_structures%2Fgraph%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fgraph%2Ftest.rs?ref=1114ab684fbad001c4e580326d8eb4d8c4e917d3", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::collections::HashMap;\n+use fx::FxHashMap;\n use std::cmp::max;\n use std::slice;\n use std::iter;\n@@ -18,17 +18,17 @@ use super::*;\n pub struct TestGraph {\n     num_nodes: usize,\n     start_node: usize,\n-    successors: HashMap<usize, Vec<usize>>,\n-    predecessors: HashMap<usize, Vec<usize>>,\n+    successors: FxHashMap<usize, Vec<usize>>,\n+    predecessors: FxHashMap<usize, Vec<usize>>,\n }\n \n impl TestGraph {\n     pub fn new(start_node: usize, edges: &[(usize, usize)]) -> Self {\n         let mut graph = TestGraph {\n             num_nodes: start_node + 1,\n             start_node,\n-            successors: HashMap::new(),\n-            predecessors: HashMap::new(),\n+            successors: FxHashMap::default(),\n+            predecessors: FxHashMap::default(),\n         };\n         for &(source, target) in edges {\n             graph.num_nodes = max(graph.num_nodes, source + 1);"}, {"sha": "e329b037d22aafce284a8e8337467d9fb7fe863e", "filename": "src/librustc_driver/profile/trace.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibrustc_driver%2Fprofile%2Ftrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibrustc_driver%2Fprofile%2Ftrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fprofile%2Ftrace.rs?ref=1114ab684fbad001c4e580326d8eb4d8c4e917d3", "patch": "@@ -10,10 +10,10 @@\n \n use super::*;\n use syntax_pos::SpanData;\n+use rustc_data_structures::fx::FxHashMap;\n use rustc::util::common::QueryMsg;\n use std::fs::File;\n use std::time::{Duration, Instant};\n-use std::collections::hash_map::HashMap;\n use rustc::dep_graph::{DepNode};\n \n #[derive(Debug, Clone, Eq, PartialEq)]\n@@ -149,7 +149,7 @@ fn write_traces_rec(file: &mut File, traces: &[Rec], total: Duration, depth: usi\n     }\n }\n \n-fn compute_counts_rec(counts: &mut HashMap<String,QueryMetric>, traces: &[Rec]) {\n+fn compute_counts_rec(counts: &mut FxHashMap<String,QueryMetric>, traces: &[Rec]) {\n     for t in traces.iter() {\n         match t.effect {\n             Effect::TimeBegin(ref msg) => {\n@@ -200,7 +200,7 @@ fn compute_counts_rec(counts: &mut HashMap<String,QueryMetric>, traces: &[Rec])\n     }\n }\n \n-pub fn write_counts(count_file: &mut File, counts: &mut HashMap<String,QueryMetric>) {\n+pub fn write_counts(count_file: &mut File, counts: &mut FxHashMap<String,QueryMetric>) {\n     use rustc::util::common::duration_to_secs_str;\n     use std::cmp::Reverse;\n \n@@ -219,7 +219,7 @@ pub fn write_counts(count_file: &mut File, counts: &mut HashMap<String,QueryMetr\n \n pub fn write_traces(html_file: &mut File, counts_file: &mut File, traces: &[Rec]) {\n     let capacity = traces.iter().fold(0, |acc, t| acc + 1 + t.extent.len());\n-    let mut counts : HashMap<String, QueryMetric> = HashMap::with_capacity(capacity);\n+    let mut counts = FxHashMap::with_capacity_and_hasher(capacity, Default::default());\n     compute_counts_rec(&mut counts, traces);\n     write_counts(counts_file, &mut counts);\n "}, {"sha": "5f275b700387360eaec802315d1fffc30a726853", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=1114ab684fbad001c4e580326d8eb4d8c4e917d3", "patch": "@@ -16,12 +16,12 @@ use {Level, CodeSuggestion, DiagnosticBuilder, SubDiagnostic, SourceMapperDyn, D\n use snippet::{Annotation, AnnotationType, Line, MultilineAnnotation, StyledString, Style};\n use styled_buffer::StyledBuffer;\n \n+use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::Lrc;\n use atty;\n use std::borrow::Cow;\n use std::io::prelude::*;\n use std::io;\n-use std::collections::HashMap;\n use std::cmp::{min, Reverse};\n use termcolor::{StandardStream, ColorChoice, ColorSpec, BufferWriter};\n use termcolor::{WriteColor, Color, Buffer};\n@@ -1090,7 +1090,7 @@ impl EmitterWriter {\n                                             max_line_num_len + 1);\n \n                 // Contains the vertical lines' positions for active multiline annotations\n-                let mut multilines = HashMap::new();\n+                let mut multilines = FxHashMap::default();\n \n                 // Next, output the annotate source for this file\n                 for line_idx in 0..annotated_file.lines.len() {\n@@ -1109,7 +1109,7 @@ impl EmitterWriter {\n                                                          width_offset,\n                                                          code_offset);\n \n-                    let mut to_add = HashMap::new();\n+                    let mut to_add = FxHashMap::default();\n \n                     for (depth, style) in depths {\n                         if multilines.get(&depth).is_some() {"}, {"sha": "e5baf93b00064abf32a50b65f3cd1ea70a0de1af", "filename": "src/librustc_errors/lock.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibrustc_errors%2Flock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibrustc_errors%2Flock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flock.rs?ref=1114ab684fbad001c4e580326d8eb4d8c4e917d3", "patch": "@@ -22,7 +22,7 @@\n use std::any::Any;\n \n #[cfg(windows)]\n-#[allow(bad_style)]\n+#[allow(nonstandard_style)]\n pub fn acquire_global_lock(name: &str) -> Box<dyn Any> {\n     use std::ffi::CString;\n     use std::io;"}, {"sha": "9a2302171bab3fe8fb222e22f875b15c6f9526f7", "filename": "src/librustc_errors/registry.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibrustc_errors%2Fregistry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibrustc_errors%2Fregistry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fregistry.rs?ref=1114ab684fbad001c4e580326d8eb4d8c4e917d3", "patch": "@@ -8,11 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::collections::HashMap;\n+use rustc_data_structures::fx::FxHashMap;\n \n #[derive(Clone)]\n pub struct Registry {\n-    descriptions: HashMap<&'static str, &'static str>,\n+    descriptions: FxHashMap<&'static str, &'static str>,\n }\n \n impl Registry {"}, {"sha": "1b3819474c22e6b8e4a3f8ce6ffc49c89ce9d705", "filename": "src/librustc_incremental/persist/dirty_clean.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs?ref=1114ab684fbad001c4e580326d8eb4d8c4e917d3", "patch": "@@ -24,7 +24,6 @@\n //! the required condition is not met.\n //!\n \n-use std::collections::HashSet;\n use std::iter::FromIterator;\n use std::vec::Vec;\n use rustc::dep_graph::{DepNode, label_strs};\n@@ -193,7 +192,7 @@ const LABELS_TRAIT: &[&[&str]] = &[\n //\n //     TypeOfItem for these.\n \n-type Labels = HashSet<String>;\n+type Labels = FxHashSet<String>;\n \n /// Represents the requested configuration by rustc_clean/dirty\n struct Assertion {\n@@ -205,13 +204,13 @@ impl Assertion {\n     fn from_clean_labels(labels: Labels) -> Assertion {\n         Assertion {\n             clean: labels,\n-            dirty: Labels::new(),\n+            dirty: Labels::default(),\n         }\n     }\n \n     fn from_dirty_labels(labels: Labels) -> Assertion {\n         Assertion {\n-            clean: Labels::new(),\n+            clean: Labels::default(),\n             dirty: labels,\n         }\n     }\n@@ -328,7 +327,7 @@ impl<'a, 'tcx> DirtyCleanVisitor<'a, 'tcx> {\n             }\n         }\n         // if no `label` or `except` is given, only the node's group are asserted\n-        Labels::new()\n+        Labels::default()\n     }\n \n     /// Return all DepNode labels that should be asserted for this item.\n@@ -436,7 +435,7 @@ impl<'a, 'tcx> DirtyCleanVisitor<'a, 'tcx> {\n     }\n \n     fn resolve_labels(&self, item: &NestedMetaItem, value: &str) -> Labels {\n-        let mut out: Labels = HashSet::new();\n+        let mut out = Labels::default();\n         for label in value.split(',') {\n             let label = label.trim();\n             if DepNode::has_label_string(label) {"}, {"sha": "822590450e278cbb3daeb142f0547353435d103c", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=1114ab684fbad001c4e580326d8eb4d8c4e917d3", "patch": "@@ -39,7 +39,6 @@ use util::nodemap::NodeSet;\n use lint::{LateContext, LintContext, LintArray};\n use lint::{LintPass, LateLintPass, EarlyLintPass, EarlyContext};\n \n-use std::collections::HashSet;\n use rustc::util::nodemap::FxHashSet;\n \n use syntax::tokenstream::{TokenTree, TokenStream};\n@@ -55,7 +54,7 @@ use syntax::errors::{Applicability, DiagnosticBuilder};\n use rustc::hir::{self, GenericParamKind, PatKind};\n use rustc::hir::intravisit::FnKind;\n \n-use bad_style::{MethodLateContext, method_context};\n+use nonstandard_style::{MethodLateContext, method_context};\n \n // hardwired lints from librustc\n pub use lint::builtin::*;\n@@ -305,14 +304,14 @@ pub struct MissingDoc {\n     doc_hidden_stack: Vec<bool>,\n \n     /// Private traits or trait items that leaked through. Don't check their methods.\n-    private_traits: HashSet<ast::NodeId>,\n+    private_traits: FxHashSet<ast::NodeId>,\n }\n \n impl MissingDoc {\n     pub fn new() -> MissingDoc {\n         MissingDoc {\n             doc_hidden_stack: vec![false],\n-            private_traits: HashSet::new(),\n+            private_traits: FxHashSet::default(),\n         }\n     }\n \n@@ -909,7 +908,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnconditionalRecursion {\n         let mut work_queue = vec![cfg.entry];\n         let mut reached_exit_without_self_call = false;\n         let mut self_call_spans = vec![];\n-        let mut visited = HashSet::new();\n+        let mut visited = FxHashSet::default();\n \n         while let Some(idx) = work_queue.pop() {\n             if idx == cfg.exit {"}, {"sha": "47e9aef6b00308747a369101e1d3722da2c58f64", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=1114ab684fbad001c4e580326d8eb4d8c4e917d3", "patch": "@@ -62,12 +62,12 @@ use syntax::edition::Edition;\n use lint::LintId;\n use lint::FutureIncompatibleInfo;\n \n-mod bad_style;\n+mod nonstandard_style;\n pub mod builtin;\n mod types;\n mod unused;\n \n-use bad_style::*;\n+use nonstandard_style::*;\n use builtin::*;\n use types::*;\n use unused::*;"}, {"sha": "09871c0e84049d801888014eafc012a400faa67f", "filename": "src/librustc_lint/nonstandard_style.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibrustc_lint%2Fnonstandard_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibrustc_lint%2Fnonstandard_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fnonstandard_style.rs?ref=1114ab684fbad001c4e580326d8eb4d8c4e917d3", "previous_filename": "src/librustc_lint/bad_style.rs"}, {"sha": "9492385957eabe79f7571b120bbfde0a5f868f72", "filename": "src/librustc_metadata/locator.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibrustc_metadata%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibrustc_metadata%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flocator.rs?ref=1114ab684fbad001c4e580326d8eb4d8c4e917d3", "patch": "@@ -226,6 +226,7 @@ use cstore::{MetadataRef, MetadataBlob};\n use creader::Library;\n use schema::{METADATA_HEADER, rustc_version};\n \n+use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::svh::Svh;\n use rustc::middle::cstore::MetadataLoader;\n use rustc::session::{config, Session};\n@@ -239,7 +240,6 @@ use syntax_pos::Span;\n use rustc_target::spec::{Target, TargetTriple};\n \n use std::cmp;\n-use std::collections::HashSet;\n use std::fmt;\n use std::fs;\n use std::io::{self, Read};\n@@ -308,7 +308,7 @@ impl CratePaths {\n \n impl<'a> Context<'a> {\n     pub fn maybe_load_library_crate(&mut self) -> Option<Library> {\n-        let mut seen_paths = HashSet::new();\n+        let mut seen_paths = FxHashSet::default();\n         match self.extra_filename {\n             Some(s) => self.find_library_crate(s, &mut seen_paths)\n                 .or_else(|| self.find_library_crate(\"\", &mut seen_paths)),\n@@ -431,7 +431,7 @@ impl<'a> Context<'a> {\n \n     fn find_library_crate(&mut self,\n                           extra_prefix: &str,\n-                          seen_paths: &mut HashSet<PathBuf>)\n+                          seen_paths: &mut FxHashSet<PathBuf>)\n                           -> Option<Library> {\n         // If an SVH is specified, then this is a transitive dependency that\n         // must be loaded via -L plus some filtering."}, {"sha": "dcbf92b57b13a2a895a0ee897fd44b1b20eb4aad", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=1114ab684fbad001c4e580326d8eb4d8c4e917d3", "patch": "@@ -67,9 +67,9 @@ use rustc::ty::{self, TyCtxt, AdtDef, Ty};\n use rustc::ty::subst::Substs;\n use util::dump_mir;\n use util::liveness::{self, IdentityMap};\n+use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::indexed_vec::Idx;\n use rustc_data_structures::indexed_set::IdxSet;\n-use std::collections::HashMap;\n use std::borrow::Cow;\n use std::iter::once;\n use std::mem;\n@@ -142,10 +142,12 @@ struct TransformVisitor<'a, 'tcx: 'a> {\n     state_field: usize,\n \n     // Mapping from Local to (type of local, generator struct index)\n-    remap: HashMap<Local, (Ty<'tcx>, usize)>,\n+    // FIXME(eddyb) This should use `IndexVec<Local, Option<_>>`.\n+    remap: FxHashMap<Local, (Ty<'tcx>, usize)>,\n \n     // A map from a suspension point in a block to the locals which have live storage at that point\n-    storage_liveness: HashMap<BasicBlock, liveness::LiveVarSet<Local>>,\n+    // FIXME(eddyb) This should use `IndexVec<BasicBlock, Option<_>>`.\n+    storage_liveness: FxHashMap<BasicBlock, liveness::LiveVarSet<Local>>,\n \n     // A list of suspension points, generated during the transform\n     suspension_points: Vec<SuspensionPoint>,\n@@ -364,12 +366,15 @@ impl<'tcx> Visitor<'tcx> for BorrowedLocals {\n     }\n }\n \n-fn locals_live_across_suspend_points<'a, 'tcx,>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                                               mir: &Mir<'tcx>,\n-                                               source: MirSource,\n-                                               movable: bool) ->\n-                                               (liveness::LiveVarSet<Local>,\n-                                                HashMap<BasicBlock, liveness::LiveVarSet<Local>>) {\n+fn locals_live_across_suspend_points(\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    mir: &Mir<'tcx>,\n+    source: MirSource,\n+    movable: bool,\n+) -> (\n+    liveness::LiveVarSet<Local>,\n+    FxHashMap<BasicBlock, liveness::LiveVarSet<Local>>,\n+) {\n     let dead_unwinds = IdxSet::new_empty(mir.basic_blocks().len());\n     let node_id = tcx.hir.as_local_node_id(source.def_id).unwrap();\n \n@@ -413,7 +418,7 @@ fn locals_live_across_suspend_points<'a, 'tcx,>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         &liveness,\n     );\n \n-    let mut storage_liveness_map = HashMap::new();\n+    let mut storage_liveness_map = FxHashMap::default();\n \n     for (block, data) in mir.basic_blocks().iter_enumerated() {\n         if let TerminatorKind::Yield { .. } = data.terminator().kind {\n@@ -477,9 +482,9 @@ fn compute_layout<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                             interior: Ty<'tcx>,\n                             movable: bool,\n                             mir: &mut Mir<'tcx>)\n-    -> (HashMap<Local, (Ty<'tcx>, usize)>,\n+    -> (FxHashMap<Local, (Ty<'tcx>, usize)>,\n         GeneratorLayout<'tcx>,\n-        HashMap<BasicBlock, liveness::LiveVarSet<Local>>)\n+        FxHashMap<BasicBlock, liveness::LiveVarSet<Local>>)\n {\n     // Use a liveness analysis to compute locals which are live across a suspension point\n     let (live_locals, storage_liveness) = locals_live_across_suspend_points(tcx,"}, {"sha": "f093d672498ad4b2483ad71133cb43b4a38cd852", "filename": "src/librustc_platform_intrinsics/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibrustc_platform_intrinsics%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibrustc_platform_intrinsics%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_platform_intrinsics%2Flib.rs?ref=1114ab684fbad001c4e580326d8eb4d8c4e917d3", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(bad_style)]\n+#![allow(nonstandard_style)]\n \n #![cfg_attr(not(stage0), feature(nll))]\n #![cfg_attr(not(stage0), feature(infer_outlives_requirements))]"}, {"sha": "5ef05cb1d6b6e8fdcd7321290c78ae837e3f1721", "filename": "src/librustc_plugin/registry.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibrustc_plugin%2Fregistry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibrustc_plugin%2Fregistry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Fregistry.rs?ref=1114ab684fbad001c4e580326d8eb4d8c4e917d3", "patch": "@@ -12,6 +12,7 @@\n \n use rustc::lint::{EarlyLintPassObject, LateLintPassObject, LintId, Lint};\n use rustc::session::Session;\n+use rustc::util::nodemap::FxHashMap;\n \n use syntax::ext::base::{SyntaxExtension, NamedSyntaxExtension, NormalTT, IdentTT};\n use syntax::ext::base::MacroExpanderFn;\n@@ -21,7 +22,6 @@ use syntax::ast;\n use syntax::feature_gate::AttributeType;\n use syntax_pos::Span;\n \n-use std::collections::HashMap;\n use std::borrow::ToOwned;\n \n /// Structure used to register plugins.\n@@ -53,7 +53,7 @@ pub struct Registry<'a> {\n     pub late_lint_passes: Vec<LateLintPassObject>,\n \n     #[doc(hidden)]\n-    pub lint_groups: HashMap<&'static str, Vec<LintId>>,\n+    pub lint_groups: FxHashMap<&'static str, Vec<LintId>>,\n \n     #[doc(hidden)]\n     pub llvm_passes: Vec<String>,\n@@ -74,7 +74,7 @@ impl<'a> Registry<'a> {\n             syntax_exts: vec![],\n             early_lint_passes: vec![],\n             late_lint_passes: vec![],\n-            lint_groups: HashMap::new(),\n+            lint_groups: FxHashMap::default(),\n             llvm_passes: vec![],\n             attributes: vec![],\n             whitelisted_custom_derives: Vec::new(),"}, {"sha": "95d5fba9668d4a6db5f2f4ec7e6078a6fb6d8c47", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 41, "deletions": 21, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=1114ab684fbad001c4e580326d8eb4d8c4e917d3", "patch": "@@ -70,7 +70,7 @@ use syntax::feature_gate::{feature_err, GateIssue};\n use syntax::ptr::P;\n \n use syntax_pos::{Span, DUMMY_SP, MultiSpan};\n-use errors::{DiagnosticBuilder, DiagnosticId};\n+use errors::{Applicability, DiagnosticBuilder, DiagnosticId};\n \n use std::cell::{Cell, RefCell};\n use std::cmp;\n@@ -221,9 +221,12 @@ fn resolve_struct_error<'sess, 'a>(resolver: &'sess Resolver,\n             let sugg_msg = \"try using a local type parameter instead\";\n             if let Some((sugg_span, new_snippet)) = cm.generate_local_type_param_snippet(span) {\n                 // Suggest the modification to the user\n-                err.span_suggestion(sugg_span,\n-                                    sugg_msg,\n-                                    new_snippet);\n+                err.span_suggestion_with_applicability(\n+                    sugg_span,\n+                    sugg_msg,\n+                    new_snippet,\n+                    Applicability::MachineApplicable,\n+                );\n             } else if let Some(sp) = cm.generate_fn_name_span(span) {\n                 err.span_label(sp, \"try adding a local type parameter in this method instead\");\n             } else {\n@@ -3004,8 +3007,12 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n                                         enum_path);\n                         err.help(&msg);\n                     } else {\n-                        err.span_suggestion(span, \"you can try using the variant's enum\",\n-                                            enum_path);\n+                        err.span_suggestion_with_applicability(\n+                            span,\n+                            \"you can try using the variant's enum\",\n+                            enum_path,\n+                            Applicability::MachineApplicable,\n+                        );\n                     }\n                 }\n             }\n@@ -3014,20 +3021,32 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n                     let self_is_available = this.self_value_is_available(path[0].span, span);\n                     match candidate {\n                         AssocSuggestion::Field => {\n-                            err.span_suggestion(span, \"try\",\n-                                                format!(\"self.{}\", path_str));\n+                            err.span_suggestion_with_applicability(\n+                                span,\n+                                \"try\",\n+                                format!(\"self.{}\", path_str),\n+                                Applicability::MachineApplicable,\n+                            );\n                             if !self_is_available {\n                                 err.span_label(span, format!(\"`self` value is only available in \\\n                                                                methods with `self` parameter\"));\n                             }\n                         }\n                         AssocSuggestion::MethodWithSelf if self_is_available => {\n-                            err.span_suggestion(span, \"try\",\n-                                                format!(\"self.{}\", path_str));\n+                            err.span_suggestion_with_applicability(\n+                                span,\n+                                \"try\",\n+                                format!(\"self.{}\", path_str),\n+                                Applicability::MachineApplicable,\n+                            );\n                         }\n                         AssocSuggestion::MethodWithSelf | AssocSuggestion::AssocItem => {\n-                            err.span_suggestion(span, \"try\",\n-                                                format!(\"Self::{}\", path_str));\n+                            err.span_suggestion_with_applicability(\n+                                span,\n+                                \"try\",\n+                                format!(\"Self::{}\", path_str),\n+                                Applicability::MachineApplicable,\n+                            );\n                         }\n                     }\n                     return (err, candidates);\n@@ -4662,15 +4681,16 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n                     format!(\"other_{}\", name)\n                 };\n \n-                err.span_suggestion(binding.span,\n-                                    rename_msg,\n-                                    if snippet.ends_with(';') {\n-                                        format!(\"{} as {};\",\n-                                                &snippet[..snippet.len()-1],\n-                                                suggested_name)\n-                                    } else {\n-                                        format!(\"{} as {}\", snippet, suggested_name)\n-                                    });\n+                err.span_suggestion_with_applicability(\n+                    binding.span,\n+                    rename_msg,\n+                    if snippet.ends_with(';') {\n+                        format!(\"{} as {};\", &snippet[..snippet.len() - 1], suggested_name)\n+                    } else {\n+                        format!(\"{} as {}\", snippet, suggested_name)\n+                    },\n+                    Applicability::MachineApplicable,\n+                );\n             } else {\n                 err.span_label(binding.span, rename_msg);\n             }"}, {"sha": "6f5655b8cec535be80182279598cb27bcad7d9db", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=1114ab684fbad001c4e580326d8eb4d8c4e917d3", "patch": "@@ -91,7 +91,7 @@ pub struct DumpVisitor<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> {\n     // of macro use (callsite) spans. We store these to ensure\n     // we only write one macro def per unique macro definition, and\n     // one macro use per unique callsite span.\n-    // mac_defs: HashSet<Span>,\n+    // mac_defs: FxHashSet<Span>,\n     macro_calls: FxHashSet<Span>,\n }\n \n@@ -107,7 +107,7 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n             dumper,\n             span: span_utils.clone(),\n             cur_scope: CRATE_NODE_ID,\n-            // mac_defs: HashSet::new(),\n+            // mac_defs: FxHashSet::default(),\n             macro_calls: FxHashSet(),\n         }\n     }"}, {"sha": "56dfac84611922b54012e64663fdff42aad296a0", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=1114ab684fbad001c4e580326d8eb4d8c4e917d3", "patch": "@@ -148,7 +148,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                 filter!(self.span_utils, sub_span, item.span, None);\n \n                 Some(Data::DefData(Def {\n-                    kind: DefKind::Function,\n+                    kind: DefKind::ForeignFunction,\n                     id: id_from_node_id(item.id, self),\n                     span: self.span_from_span(sub_span.unwrap()),\n                     name: item.ident.to_string(),\n@@ -171,7 +171,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                 let span = self.span_from_span(sub_span.unwrap());\n \n                 Some(Data::DefData(Def {\n-                    kind: DefKind::Static,\n+                    kind: DefKind::ForeignStatic,\n                     id,\n                     span,\n                     name: item.ident.to_string(),"}, {"sha": "4e22ead8db987a0514b885a992a43eac35332084", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=1114ab684fbad001c4e580326d8eb4d8c4e917d3", "patch": "@@ -351,11 +351,14 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                             if !self.infcx.type_moves_by_default(self.param_env,\n                                                                 checked,\n                                                                 sp) {\n-                                let sp = cm.call_span_if_macro(sp);\n-                                if let Ok(code) = cm.span_to_snippet(sp) {\n-                                    return Some((sp,\n-                                                 \"consider dereferencing the borrow\",\n-                                                 format!(\"*{}\", code)));\n+                                // do not suggest if the span comes from a macro (#52783)\n+                                if let (Ok(code),\n+                                        true) = (cm.span_to_snippet(sp), sp == expr.span) {\n+                                    return Some((\n+                                        sp,\n+                                        \"consider dereferencing the borrow\",\n+                                        format!(\"*{}\", code),\n+                                    ));\n                                 }\n                             }\n                         }"}, {"sha": "12863cc66a053ecb02149a573d1c276dd0e34628", "filename": "src/librustc_typeck/structured_errors.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibrustc_typeck%2Fstructured_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibrustc_typeck%2Fstructured_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fstructured_errors.rs?ref=1114ab684fbad001c4e580326d8eb4d8c4e917d3", "patch": "@@ -10,7 +10,7 @@\n \n use rustc::session::Session;\n use syntax_pos::Span;\n-use errors::{DiagnosticId, DiagnosticBuilder};\n+use errors::{Applicability, DiagnosticId, DiagnosticBuilder};\n use rustc::ty::{Ty, TypeFoldable};\n \n pub trait StructuredDiagnostic<'tcx> {\n@@ -73,9 +73,12 @@ impl<'tcx> StructuredDiagnostic<'tcx> for VariadicError<'tcx> {\n             )\n         };\n         if let Ok(snippet) = self.sess.source_map().span_to_snippet(self.span) {\n-            err.span_suggestion(self.span,\n-                                &format!(\"cast the value to `{}`\", self.cast_ty),\n-                                format!(\"{} as {}\", snippet, self.cast_ty));\n+            err.span_suggestion_with_applicability(\n+                self.span,\n+                &format!(\"cast the value to `{}`\", self.cast_ty),\n+                format!(\"{} as {}\", snippet, self.cast_ty),\n+                Applicability::MachineApplicable,\n+            );\n         } else {\n             err.help(&format!(\"cast the value to `{}`\", self.cast_ty));\n         }"}, {"sha": "18ad862c11bb0915953059768629af09e8959ccb", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=1114ab684fbad001c4e580326d8eb4d8c4e917d3", "patch": "@@ -29,8 +29,9 @@\n \n #![allow(non_camel_case_types)]\n \n+use rustc_data_structures::fx::FxHashMap;\n use std::cell::RefCell;\n-use std::collections::{HashMap, VecDeque};\n+use std::collections::VecDeque;\n use std::default::Default;\n use std::fmt::{self, Write};\n use std::borrow::Cow;\n@@ -417,14 +418,14 @@ impl<'a, I: Iterator<Item = Event<'a>>> Iterator for SummaryLine<'a, I> {\n /// references.\n struct Footnotes<'a, I: Iterator<Item = Event<'a>>> {\n     inner: I,\n-    footnotes: HashMap<String, (Vec<Event<'a>>, u16)>,\n+    footnotes: FxHashMap<String, (Vec<Event<'a>>, u16)>,\n }\n \n impl<'a, I: Iterator<Item = Event<'a>>> Footnotes<'a, I> {\n     fn new(iter: I) -> Self {\n         Footnotes {\n             inner: iter,\n-            footnotes: HashMap::new(),\n+            footnotes: FxHashMap::default(),\n         }\n     }\n     fn get_entry(&mut self, key: &str) -> &mut (Vec<Event<'a>>, u16) {\n@@ -865,7 +866,7 @@ pub fn markdown_links(md: &str) -> Vec<(String, Option<Range<usize>>)> {\n \n #[derive(Default)]\n pub struct IdMap {\n-    map: HashMap<String, usize>,\n+    map: FxHashMap<String, usize>,\n }\n \n impl IdMap {\n@@ -880,7 +881,7 @@ impl IdMap {\n     }\n \n     pub fn reset(&mut self) {\n-        self.map = HashMap::new();\n+        self.map = FxHashMap::default();\n     }\n \n     pub fn derive(&mut self, candidate: String) -> String {"}, {"sha": "1abe01dd0ac20ec800ba1562fa951bf5949181d4", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 29, "deletions": 28, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=1114ab684fbad001c4e580326d8eb4d8c4e917d3", "patch": "@@ -38,7 +38,7 @@ pub use self::ExternalLocation::*;\n use std::borrow::Cow;\n use std::cell::RefCell;\n use std::cmp::Ordering;\n-use std::collections::{BTreeMap, HashSet, VecDeque};\n+use std::collections::{BTreeMap, VecDeque};\n use std::default::Default;\n use std::error;\n use std::fmt::{self, Display, Formatter, Write as FmtWrite};\n@@ -741,7 +741,7 @@ fn write_shared(cx: &Context,\n \n     // To avoid \"light.css\" to be overwritten, we'll first run over the received themes and only\n     // then we'll run over the \"official\" styles.\n-    let mut themes: HashSet<String> = HashSet::new();\n+    let mut themes: FxHashSet<String> = FxHashSet::default();\n \n     for entry in &cx.shared.themes {\n         let mut content = Vec::with_capacity(100000);\n@@ -1539,35 +1539,36 @@ impl Ord for ItemEntry {\n \n #[derive(Debug)]\n struct AllTypes {\n-    structs: HashSet<ItemEntry>,\n-    enums: HashSet<ItemEntry>,\n-    unions: HashSet<ItemEntry>,\n-    primitives: HashSet<ItemEntry>,\n-    traits: HashSet<ItemEntry>,\n-    macros: HashSet<ItemEntry>,\n-    functions: HashSet<ItemEntry>,\n-    typedefs: HashSet<ItemEntry>,\n-    existentials: HashSet<ItemEntry>,\n-    statics: HashSet<ItemEntry>,\n-    constants: HashSet<ItemEntry>,\n-    keywords: HashSet<ItemEntry>,\n+    structs: FxHashSet<ItemEntry>,\n+    enums: FxHashSet<ItemEntry>,\n+    unions: FxHashSet<ItemEntry>,\n+    primitives: FxHashSet<ItemEntry>,\n+    traits: FxHashSet<ItemEntry>,\n+    macros: FxHashSet<ItemEntry>,\n+    functions: FxHashSet<ItemEntry>,\n+    typedefs: FxHashSet<ItemEntry>,\n+    existentials: FxHashSet<ItemEntry>,\n+    statics: FxHashSet<ItemEntry>,\n+    constants: FxHashSet<ItemEntry>,\n+    keywords: FxHashSet<ItemEntry>,\n }\n \n impl AllTypes {\n     fn new() -> AllTypes {\n+        let new_set = |cap| FxHashSet::with_capacity_and_hasher(cap, Default::default());\n         AllTypes {\n-            structs: HashSet::with_capacity(100),\n-            enums: HashSet::with_capacity(100),\n-            unions: HashSet::with_capacity(100),\n-            primitives: HashSet::with_capacity(26),\n-            traits: HashSet::with_capacity(100),\n-            macros: HashSet::with_capacity(100),\n-            functions: HashSet::with_capacity(100),\n-            typedefs: HashSet::with_capacity(100),\n-            existentials: HashSet::with_capacity(100),\n-            statics: HashSet::with_capacity(100),\n-            constants: HashSet::with_capacity(100),\n-            keywords: HashSet::with_capacity(100),\n+            structs: new_set(100),\n+            enums: new_set(100),\n+            unions: new_set(100),\n+            primitives: new_set(26),\n+            traits: new_set(100),\n+            macros: new_set(100),\n+            functions: new_set(100),\n+            typedefs: new_set(100),\n+            existentials: new_set(100),\n+            statics: new_set(100),\n+            constants: new_set(100),\n+            keywords: new_set(100),\n         }\n     }\n \n@@ -1595,7 +1596,7 @@ impl AllTypes {\n     }\n }\n \n-fn print_entries(f: &mut fmt::Formatter, e: &HashSet<ItemEntry>, title: &str,\n+fn print_entries(f: &mut fmt::Formatter, e: &FxHashSet<ItemEntry>, title: &str,\n                  class: &str) -> fmt::Result {\n     if !e.is_empty() {\n         let mut e: Vec<&ItemEntry> = e.iter().collect();\n@@ -4185,7 +4186,7 @@ fn sidebar_assoc_items(it: &clean::Item) -> String {\n                 }\n             }\n             let format_impls = |impls: Vec<&Impl>| {\n-                let mut links = HashSet::new();\n+                let mut links = FxHashSet::default();\n                 impls.iter()\n                            .filter_map(|i| {\n                                let is_negative_impl = is_negative_impl(i.inner_impl());"}, {"sha": "51ed62678292662fd4201c4e1ddcf630819c1c88", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=1114ab684fbad001c4e580326d8eb4d8c4e917d3", "patch": "@@ -242,6 +242,7 @@\n         }\n     }\n \n+    highlightSourceLines(null);\n     window.onhashchange = highlightSourceLines;\n \n     // Gets the human-readable string for the virtual-key code of the"}, {"sha": "5145e9f449b17571d8edc8cba762888379771b4b", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=1114ab684fbad001c4e580326d8eb4d8c4e917d3", "patch": "@@ -502,13 +502,21 @@ h4 > code, h3 > code, .invisible > code {\n \tmargin-left: 33px;\n \tmargin-top: -13px;\n }\n+\n .content .stability::before {\n \tcontent: '\u02ea';\n \tfont-size: 30px;\n \tposition: absolute;\n \ttop: -9px;\n \tleft: -13px;\n }\n+.methods > .stability {\n+\tmargin-top: -8px;\n+}\n+\n+#main > .stability {\n+\tmargin-top: 0;\n+}\n \n nav {\n \tborder-bottom: 1px solid;"}, {"sha": "12d2208489368a52e7466c1f964990eebcdd2229", "filename": "src/librustdoc/html/static/themes/dark.css", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css", "raw_url": "https://github.com/rust-lang/rust/raw/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css?ref=1114ab684fbad001c4e580326d8eb4d8c4e917d3", "patch": "@@ -407,3 +407,7 @@ kbd {\n .search-results td span.grey {\n \tcolor: #ccc;\n }\n+\n+.impl-items code {\n+\tbackground-color: rgba(0, 0, 0, 0);\n+}"}, {"sha": "043d7ae23c2e4aaa6876541d41ce131b68316844", "filename": "src/librustdoc/html/static/themes/light.css", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css", "raw_url": "https://github.com/rust-lang/rust/raw/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css?ref=1114ab684fbad001c4e580326d8eb4d8c4e917d3", "patch": "@@ -401,3 +401,7 @@ kbd {\n .search-results td span.grey {\n \tcolor: #999;\n }\n+\n+.impl-items code {\n+\tbackground-color: rgba(0, 0, 0, 0);\n+}"}, {"sha": "73cc363009de5992063af609be74e7d6a97f51b7", "filename": "src/librustdoc/theme.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibrustdoc%2Ftheme.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibrustdoc%2Ftheme.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftheme.rs?ref=1114ab684fbad001c4e580326d8eb4d8c4e917d3", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::collections::HashSet;\n+use rustc_data_structures::fx::FxHashSet;\n use std::fs::File;\n use std::hash::{Hash, Hasher};\n use std::io::Read;\n@@ -31,7 +31,7 @@ macro_rules! try_something {\n #[derive(Debug, Clone, Eq)]\n pub struct CssPath {\n     pub name: String,\n-    pub children: HashSet<CssPath>,\n+    pub children: FxHashSet<CssPath>,\n }\n \n // This PartialEq implementation IS NOT COMMUTATIVE!!!\n@@ -66,7 +66,7 @@ impl CssPath {\n     fn new(name: String) -> CssPath {\n         CssPath {\n             name,\n-            children: HashSet::new(),\n+            children: FxHashSet::default(),\n         }\n     }\n }\n@@ -211,7 +211,7 @@ fn build_rule(v: &[u8], positions: &[usize]) -> String {\n              .join(\" \")\n }\n \n-fn inner(v: &[u8], events: &[Events], pos: &mut usize) -> HashSet<CssPath> {\n+fn inner(v: &[u8], events: &[Events], pos: &mut usize) -> FxHashSet<CssPath> {\n     let mut paths = Vec::with_capacity(50);\n \n     while *pos < events.len() {"}, {"sha": "6d8298f01cdceee5100c46b431726fe84cda11bc", "filename": "src/libstd/os/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibstd%2Fos%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibstd%2Fos%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fmod.rs?ref=1114ab684fbad001c4e580326d8eb4d8c4e917d3", "patch": "@@ -11,7 +11,7 @@\n //! OS-specific functionality.\n \n #![stable(feature = \"os\", since = \"1.0.0\")]\n-#![allow(missing_docs, bad_style, missing_debug_implementations)]\n+#![allow(missing_docs, nonstandard_style, missing_debug_implementations)]\n \n cfg_if! {\n     if #[cfg(dox)] {"}, {"sha": "f943257c687330c368622f087e42bde74c625f45", "filename": "src/libstd/sys/redox/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibstd%2Fsys%2Fredox%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibstd%2Fsys%2Fredox%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fmod.rs?ref=1114ab684fbad001c4e580326d8eb4d8c4e917d3", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(dead_code, missing_docs, bad_style)]\n+#![allow(dead_code, missing_docs, nonstandard_style)]\n \n use io::{self, ErrorKind};\n "}, {"sha": "12e14734ff515edbcc7ee43d51916e9ea7bb182e", "filename": "src/libstd/sys/unix/fd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibstd%2Fsys%2Funix%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibstd%2Fsys%2Funix%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffd.rs?ref=1114ab684fbad001c4e580326d8eb4d8c4e917d3", "patch": "@@ -282,7 +282,7 @@ impl Drop for FileDesc {\n         // reason for this is that if an error occurs we don't actually know if\n         // the file descriptor was closed or not, and if we retried (for\n         // something like EINTR), we might close another valid file descriptor\n-        // (opened after we closed ours.\n+        // opened after we closed ours.\n         let _ = unsafe { libc::close(self.fd) };\n     }\n }"}, {"sha": "2b9fbc9ef3945e2364eda68f34686e46013cafe7", "filename": "src/libstd/sys/unix/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fmod.rs?ref=1114ab684fbad001c4e580326d8eb4d8c4e917d3", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(missing_docs, bad_style)]\n+#![allow(missing_docs, nonstandard_style)]\n \n use io::{self, ErrorKind};\n use libc;"}, {"sha": "2d10541752c83b3ca21b1ab5cfdfebf91d340250", "filename": "src/libstd/sys/unix/net.rs", "status": "modified", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibstd%2Fsys%2Funix%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibstd%2Fsys%2Funix%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fnet.rs?ref=1114ab684fbad001c4e580326d8eb4d8c4e917d3", "patch": "@@ -395,30 +395,3 @@ fn on_resolver_failure() {\n \n #[cfg(not(target_env = \"gnu\"))]\n fn on_resolver_failure() {}\n-\n-#[cfg(all(test, taget_env = \"gnu\"))]\n-mod test {\n-    use super::*;\n-\n-    #[test]\n-    fn test_res_init() {\n-        // This mostly just tests that the weak linkage doesn't panic wildly...\n-        res_init_if_glibc_before_2_26().unwrap();\n-    }\n-\n-    #[test]\n-    fn test_parse_glibc_version() {\n-        let cases = [\n-            (\"0.0\", Some((0, 0))),\n-            (\"01.+2\", Some((1, 2))),\n-            (\"3.4.5.six\", Some((3, 4))),\n-            (\"1\", None),\n-            (\"1.-2\", None),\n-            (\"1.foo\", None),\n-            (\"foo.1\", None),\n-        ];\n-        for &(version_str, parsed) in cases.iter() {\n-            assert_eq!(parsed, parse_glibc_version(version_str));\n-        }\n-    }\n-}"}, {"sha": "971e6501c2c2a6088beacceee6c22c6f3ae06893", "filename": "src/libstd/sys/unix/os.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fos.rs?ref=1114ab684fbad001c4e580326d8eb4d8c4e917d3", "patch": "@@ -569,3 +569,30 @@ fn parse_glibc_version(version: &str) -> Option<(usize, usize)> {\n         _ => None\n     }\n }\n+\n+#[cfg(all(test, target_env = \"gnu\"))]\n+mod test {\n+    use super::*;\n+\n+    #[test]\n+    fn test_glibc_version() {\n+        // This mostly just tests that the weak linkage doesn't panic wildly...\n+        glibc_version();\n+    }\n+\n+    #[test]\n+    fn test_parse_glibc_version() {\n+        let cases = [\n+            (\"0.0\", Some((0, 0))),\n+            (\"01.+2\", Some((1, 2))),\n+            (\"3.4.5.six\", Some((3, 4))),\n+            (\"1\", None),\n+            (\"1.-2\", None),\n+            (\"1.foo\", None),\n+            (\"foo.1\", None),\n+        ];\n+        for &(version_str, parsed) in cases.iter() {\n+            assert_eq!(parsed, parse_glibc_version(version_str));\n+        }\n+    }\n+}"}, {"sha": "03a5b2d779e1f633420f0f85e00f8bb29acb0250", "filename": "src/libstd/sys/wasm/net.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibstd%2Fsys%2Fwasm%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibstd%2Fsys%2Fwasm%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasm%2Fnet.rs?ref=1114ab684fbad001c4e580326d8eb4d8c4e917d3", "patch": "@@ -297,7 +297,7 @@ pub fn lookup_host(_: &str) -> io::Result<LookupHost> {\n     unsupported()\n }\n \n-#[allow(bad_style)]\n+#[allow(nonstandard_style)]\n pub mod netc {\n     pub const AF_INET: u8 = 0;\n     pub const AF_INET6: u8 = 1;"}, {"sha": "8a744519e917591ac052453bd0e4f7f4375d9556", "filename": "src/libstd/sys/windows/c.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs?ref=1114ab684fbad001c4e580326d8eb4d8c4e917d3", "patch": "@@ -10,7 +10,7 @@\n \n //! C definitions used by libnative that don't belong in liblibc\n \n-#![allow(bad_style)]\n+#![allow(nonstandard_style)]\n #![cfg_attr(test, allow(dead_code))]\n #![unstable(issue = \"0\", feature = \"windows_c\")]\n "}, {"sha": "31ef9fa2bedfd4a4a0091c661a19db158ae75c0c", "filename": "src/libstd/sys/windows/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs?ref=1114ab684fbad001c4e580326d8eb4d8c4e917d3", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(missing_docs, bad_style)]\n+#![allow(missing_docs, nonstandard_style)]\n \n use ptr;\n use ffi::{OsStr, OsString};"}, {"sha": "29ea82c2053cdb08df0e6f8de9efc5f96787c82e", "filename": "src/libstd/sys/windows/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs?ref=1114ab684fbad001c4e580326d8eb4d8c4e917d3", "patch": "@@ -10,7 +10,7 @@\n \n //! Implementation of `std::os` functionality for Windows\n \n-#![allow(bad_style)]\n+#![allow(nonstandard_style)]\n \n use os::windows::prelude::*;\n "}, {"sha": "a7c7dbb1b402762b9c59fae8304070a51ce823cb", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=1114ab684fbad001c4e580326d8eb4d8c4e917d3", "patch": "@@ -1310,11 +1310,17 @@ impl<T> JoinHandle<T> {\n \n     /// Waits for the associated thread to finish.\n     ///\n+    /// In terms of [atomic memory orderings],  the completion of the associated\n+    /// thread synchronizes with this function returning. In other words, all\n+    /// operations performed by that thread are ordered before all\n+    /// operations that happen after `join` returns.\n+    ///\n     /// If the child thread panics, [`Err`] is returned with the parameter given\n     /// to [`panic`].\n     ///\n     /// [`Err`]: ../../std/result/enum.Result.html#variant.Err\n     /// [`panic`]: ../../std/macro.panic.html\n+    /// [atomic memory orderings]: ../../std/sync/atomic/index.html\n     ///\n     /// # Panics\n     ///"}, {"sha": "bd0e0d277ee54e932518e45178ba664190a8c3cb", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=1114ab684fbad001c4e580326d8eb4d8c4e917d3", "patch": "@@ -28,8 +28,8 @@ use ThinVec;\n use tokenstream::{ThinTokenStream, TokenStream};\n \n use serialize::{self, Encoder, Decoder};\n-use std::collections::HashSet;\n use std::fmt;\n+use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::sync::Lrc;\n use std::u32;\n \n@@ -407,7 +407,7 @@ pub struct WhereEqPredicate {\n \n /// The set of MetaItems that define the compilation environment of the crate,\n /// used to drive conditional compilation\n-pub type CrateConfig = HashSet<(Name, Option<Symbol>)>;\n+pub type CrateConfig = FxHashSet<(Name, Option<Symbol>)>;\n \n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct Crate {"}, {"sha": "e8a68b6d7676c5640803e2bf50dcbd9c0eadc949", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=1114ab684fbad001c4e580326d8eb4d8c4e917d3", "patch": "@@ -26,7 +26,7 @@ use OneVector;\n use symbol::{keywords, Ident, Symbol};\n use ThinVec;\n \n-use std::collections::HashMap;\n+use rustc_data_structures::fx::FxHashMap;\n use std::iter;\n use std::path::PathBuf;\n use std::rc::Rc;\n@@ -800,7 +800,7 @@ pub struct ExtCtxt<'a> {\n     pub resolver: &'a mut dyn Resolver,\n     pub resolve_err_count: usize,\n     pub current_expansion: ExpansionData,\n-    pub expansions: HashMap<Span, Vec<String>>,\n+    pub expansions: FxHashMap<Span, Vec<String>>,\n }\n \n impl<'a> ExtCtxt<'a> {\n@@ -821,7 +821,7 @@ impl<'a> ExtCtxt<'a> {\n                 directory_ownership: DirectoryOwnership::Owned { relative: None },\n                 crate_span: None,\n             },\n-            expansions: HashMap::new(),\n+            expansions: FxHashMap::default(),\n         }\n     }\n "}, {"sha": "684cee38874630fa7d0f311cd34d1b729c9177d8", "filename": "src/libsyntax/ext/derive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibsyntax%2Fext%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibsyntax%2Fext%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderive.rs?ref=1114ab684fbad001c4e580326d8eb4d8c4e917d3", "patch": "@@ -17,7 +17,7 @@ use parse::parser::PathStyle;\n use symbol::Symbol;\n use syntax_pos::Span;\n \n-use std::collections::HashSet;\n+use rustc_data_structures::fx::FxHashSet;\n \n pub fn collect_derives(cx: &mut ExtCtxt, attrs: &mut Vec<ast::Attribute>) -> Vec<ast::Path> {\n     let mut result = Vec::new();\n@@ -48,7 +48,7 @@ pub fn collect_derives(cx: &mut ExtCtxt, attrs: &mut Vec<ast::Attribute>) -> Vec\n pub fn add_derived_markers<T>(cx: &mut ExtCtxt, span: Span, traits: &[ast::Path], item: T) -> T\n     where T: HasAttrs,\n {\n-    let (mut names, mut pretty_name) = (HashSet::new(), \"derive(\".to_owned());\n+    let (mut names, mut pretty_name) = (FxHashSet::default(), \"derive(\".to_owned());\n     for (i, path) in traits.iter().enumerate() {\n         if i > 0 {\n             pretty_name.push_str(\", \");"}, {"sha": "6e38f820586ffaea612ff38ddbab17eff5011d21", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=1114ab684fbad001c4e580326d8eb4d8c4e917d3", "patch": "@@ -34,7 +34,7 @@ use syntax_pos::hygiene::ExpnFormat;\n use tokenstream::{TokenStream, TokenTree};\n use visit::{self, Visitor};\n \n-use std::collections::HashMap;\n+use rustc_data_structures::fx::FxHashMap;\n use std::fs::File;\n use std::io::Read;\n use std::iter::FromIterator;\n@@ -319,7 +319,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n         // Unresolved macros produce dummy outputs as a recovery measure.\n         invocations.reverse();\n         let mut expanded_fragments = Vec::new();\n-        let mut derives: HashMap<Mark, Vec<_>> = HashMap::new();\n+        let mut derives: FxHashMap<Mark, Vec<_>> = FxHashMap::default();\n         let mut undetermined_invocations = Vec::new();\n         let (mut progress, mut force) = (false, !self.monotonic);\n         loop {"}, {"sha": "5906412883ad0c0356091004cbbe261a8a5e63c6", "filename": "src/libsyntax/ext/placeholders.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibsyntax%2Fext%2Fplaceholders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibsyntax%2Fext%2Fplaceholders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fplaceholders.rs?ref=1114ab684fbad001c4e580326d8eb4d8c4e917d3", "patch": "@@ -21,7 +21,7 @@ use symbol::keywords;\n use ThinVec;\n use util::move_map::MoveMap;\n \n-use std::collections::HashMap;\n+use rustc_data_structures::fx::FxHashMap;\n \n pub fn placeholder(kind: AstFragmentKind, id: ast::NodeId) -> AstFragment {\n     fn mac_placeholder() -> ast::Mac {\n@@ -81,7 +81,7 @@ pub fn placeholder(kind: AstFragmentKind, id: ast::NodeId) -> AstFragment {\n }\n \n pub struct PlaceholderExpander<'a, 'b: 'a> {\n-    expanded_fragments: HashMap<ast::NodeId, AstFragment>,\n+    expanded_fragments: FxHashMap<ast::NodeId, AstFragment>,\n     cx: &'a mut ExtCtxt<'b>,\n     monotonic: bool,\n }\n@@ -90,7 +90,7 @@ impl<'a, 'b> PlaceholderExpander<'a, 'b> {\n     pub fn new(cx: &'a mut ExtCtxt<'b>, monotonic: bool) -> Self {\n         PlaceholderExpander {\n             cx,\n-            expanded_fragments: HashMap::new(),\n+            expanded_fragments: FxHashMap::default(),\n             monotonic,\n         }\n     }"}, {"sha": "c962e7fcbb4cfce003da8e7f43c0b8eae534cfab", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=1114ab684fbad001c4e580326d8eb4d8c4e917d3", "patch": "@@ -96,11 +96,11 @@ use OneVector;\n use symbol::keywords;\n use tokenstream::TokenStream;\n \n+use rustc_data_structures::fx::FxHashMap;\n+use std::collections::hash_map::Entry::{Occupied, Vacant};\n use std::mem;\n use std::ops::{Deref, DerefMut};\n use std::rc::Rc;\n-use std::collections::HashMap;\n-use std::collections::hash_map::Entry::{Occupied, Vacant};\n \n // To avoid costly uniqueness checks, we require that `MatchSeq` always has a nonempty body.\n \n@@ -263,7 +263,7 @@ pub enum ParseResult<T> {\n \n /// A `ParseResult` where the `Success` variant contains a mapping of `Ident`s to `NamedMatch`es.\n /// This represents the mapping of metavars to the token trees they bind to.\n-pub type NamedParseResult = ParseResult<HashMap<Ident, Rc<NamedMatch>>>;\n+pub type NamedParseResult = ParseResult<FxHashMap<Ident, Rc<NamedMatch>>>;\n \n /// Count how many metavars are named in the given matcher `ms`.\n pub fn count_names(ms: &[TokenTree]) -> usize {\n@@ -351,7 +351,7 @@ fn nameize<I: Iterator<Item = NamedMatch>>(\n         sess: &ParseSess,\n         m: &TokenTree,\n         res: &mut I,\n-        ret_val: &mut HashMap<Ident, Rc<NamedMatch>>,\n+        ret_val: &mut FxHashMap<Ident, Rc<NamedMatch>>,\n     ) -> Result<(), (syntax_pos::Span, String)> {\n         match *m {\n             TokenTree::Sequence(_, ref seq) => for next_m in &seq.tts {\n@@ -382,7 +382,7 @@ fn nameize<I: Iterator<Item = NamedMatch>>(\n         Ok(())\n     }\n \n-    let mut ret_val = HashMap::new();\n+    let mut ret_val = FxHashMap::default();\n     for m in ms {\n         match n_rec(sess, m, res.by_ref(), &mut ret_val) {\n             Ok(_) => {}"}, {"sha": "d09127d6b08b7a303ffd729c22727f21b798ea0f", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=1114ab684fbad001c4e580326d8eb4d8c4e917d3", "patch": "@@ -27,8 +27,8 @@ use parse::token::Token::*;\n use symbol::Symbol;\n use tokenstream::{TokenStream, TokenTree};\n \n+use rustc_data_structures::fx::FxHashMap;\n use std::borrow::Cow;\n-use std::collections::HashMap;\n use std::collections::hash_map::Entry;\n \n use rustc_data_structures::sync::Lrc;\n@@ -451,14 +451,14 @@ struct FirstSets {\n     // If two sequences have the same span in a matcher, then map that\n     // span to None (invalidating the mapping here and forcing the code to\n     // use a slow path).\n-    first: HashMap<Span, Option<TokenSet>>,\n+    first: FxHashMap<Span, Option<TokenSet>>,\n }\n \n impl FirstSets {\n     fn new(tts: &[quoted::TokenTree]) -> FirstSets {\n         use self::quoted::TokenTree;\n \n-        let mut sets = FirstSets { first: HashMap::new() };\n+        let mut sets = FirstSets { first: FxHashMap::default() };\n         build_recur(&mut sets, tts);\n         return sets;\n "}, {"sha": "549e5f00dcec4cbe8cc7478f673140fadc4f0aa6", "filename": "src/libsyntax/ext/tt/transcribe.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs?ref=1114ab684fbad001c4e580326d8eb4d8c4e917d3", "patch": "@@ -19,11 +19,11 @@ use OneVector;\n use syntax_pos::{Span, DUMMY_SP};\n use tokenstream::{TokenStream, TokenTree, Delimited};\n \n-use std::rc::Rc;\n+use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::Lrc;\n use std::mem;\n use std::ops::Add;\n-use std::collections::HashMap;\n+use std::rc::Rc;\n \n // An iterator over the token trees in a delimited token tree (`{ ... }`) or a sequence (`$(...)`).\n enum Frame {\n@@ -67,11 +67,11 @@ impl Iterator for Frame {\n /// `src` contains no `TokenTree::{Sequence, MetaVar, MetaVarDecl}`s, `interp` can\n /// (and should) be None.\n pub fn transcribe(cx: &ExtCtxt,\n-                  interp: Option<HashMap<Ident, Rc<NamedMatch>>>,\n+                  interp: Option<FxHashMap<Ident, Rc<NamedMatch>>>,\n                   src: Vec<quoted::TokenTree>)\n                   -> TokenStream {\n     let mut stack: OneVector<Frame> = smallvec![Frame::new(src)];\n-    let interpolations = interp.unwrap_or_else(HashMap::new); /* just a convenience */\n+    let interpolations = interp.unwrap_or_else(FxHashMap::default); /* just a convenience */\n     let mut repeats = Vec::new();\n     let mut result: Vec<TokenStream> = Vec::new();\n     let mut result_stack = Vec::new();\n@@ -187,7 +187,7 @@ pub fn transcribe(cx: &ExtCtxt,\n }\n \n fn lookup_cur_matched(ident: Ident,\n-                      interpolations: &HashMap<Ident, Rc<NamedMatch>>,\n+                      interpolations: &FxHashMap<Ident, Rc<NamedMatch>>,\n                       repeats: &[(usize, usize)])\n                       -> Option<Rc<NamedMatch>> {\n     interpolations.get(&ident).map(|matched| {\n@@ -234,7 +234,7 @@ impl Add for LockstepIterSize {\n }\n \n fn lockstep_iter_size(tree: &quoted::TokenTree,\n-                      interpolations: &HashMap<Ident, Rc<NamedMatch>>,\n+                      interpolations: &FxHashMap<Ident, Rc<NamedMatch>>,\n                       repeats: &[(usize, usize)])\n                       -> LockstepIterSize {\n     use self::quoted::TokenTree;"}, {"sha": "080860f17f5ddf5226ffe83c9d0cb55911746b26", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=1114ab684fbad001c4e580326d8eb4d8c4e917d3", "patch": "@@ -645,7 +645,7 @@ declare_features! (\n     // Defining procedural macros in `proc-macro` crates\n     (accepted, proc_macro, \"1.29.0\", Some(38356), None),\n     // Allows use of the :vis macro fragment specifier\n-    (accepted, macro_vis_matcher, \"1.29.0\", Some(41022), None),\n+    (accepted, macro_vis_matcher, \"1.30.0\", Some(41022), None),\n     // Allows importing and reexporting macros with `use`,\n     // enables macro modularization in general.\n     (accepted, use_extern_macros, \"1.30.0\", Some(35896), None),"}, {"sha": "96584a580f1758d72e5797aee7bb11255362dae1", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=1114ab684fbad001c4e580326d8eb4d8c4e917d3", "patch": "@@ -1831,10 +1831,10 @@ mod tests {\n     use errors;\n     use feature_gate::UnstableFeatures;\n     use parse::token;\n-    use std::collections::HashSet;\n     use std::io;\n     use std::path::PathBuf;\n     use diagnostics::plugin::ErrorMap;\n+    use rustc_data_structures::fx::FxHashSet;\n     use rustc_data_structures::sync::Lock;\n     use with_globals;\n     fn mk_sess(cm: Lrc<SourceMap>) -> ParseSess {\n@@ -1845,10 +1845,10 @@ mod tests {\n         ParseSess {\n             span_diagnostic: errors::Handler::with_emitter(true, false, Box::new(emitter)),\n             unstable_features: UnstableFeatures::from_environment(),\n-            config: CrateConfig::new(),\n+            config: CrateConfig::default(),\n             included_mod_stack: Lock::new(Vec::new()),\n             code_map: cm,\n-            missing_fragment_specifiers: Lock::new(HashSet::new()),\n+            missing_fragment_specifiers: Lock::new(FxHashSet::default()),\n             raw_identifier_spans: Lock::new(Vec::new()),\n             registered_diagnostics: Lock::new(ErrorMap::new()),\n             non_modrs_mods: Lock::new(vec![]),"}, {"sha": "28d63399b4461f3c024a30820fb3a43ff2d3b757", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=1114ab684fbad001c4e580326d8eb4d8c4e917d3", "patch": "@@ -24,8 +24,8 @@ use symbol::Symbol;\n use tokenstream::{TokenStream, TokenTree};\n use diagnostics::plugin::ErrorMap;\n \n+use rustc_data_structures::fx::FxHashSet;\n use std::borrow::Cow;\n-use std::collections::HashSet;\n use std::iter;\n use std::path::{Path, PathBuf};\n use std::str;\n@@ -46,7 +46,7 @@ pub struct ParseSess {\n     pub span_diagnostic: Handler,\n     pub unstable_features: UnstableFeatures,\n     pub config: CrateConfig,\n-    pub missing_fragment_specifiers: Lock<HashSet<Span>>,\n+    pub missing_fragment_specifiers: Lock<FxHashSet<Span>>,\n     /// Places where raw identifiers were used. This is used for feature gating\n     /// raw identifiers\n     pub raw_identifier_spans: Lock<Vec<Span>>,\n@@ -75,8 +75,8 @@ impl ParseSess {\n         ParseSess {\n             span_diagnostic: handler,\n             unstable_features: UnstableFeatures::from_environment(),\n-            config: HashSet::new(),\n-            missing_fragment_specifiers: Lock::new(HashSet::new()),\n+            config: FxHashSet::default(),\n+            missing_fragment_specifiers: Lock::new(FxHashSet::default()),\n             raw_identifier_spans: Lock::new(Vec::new()),\n             registered_diagnostics: Lock::new(ErrorMap::new()),\n             included_mod_stack: Lock::new(vec![]),"}, {"sha": "6c50b9c82f2b8ea138c8ab7231a797c0f43e7d7c", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=1114ab684fbad001c4e580326d8eb4d8c4e917d3", "patch": "@@ -786,7 +786,12 @@ impl<'a> Parser<'a> {\n         } else {\n             err.span_label(self.span, \"expected identifier\");\n             if self.token == token::Comma && self.look_ahead(1, |t| t.is_ident()) {\n-                err.span_suggestion(self.span, \"remove this comma\", String::new());\n+                err.span_suggestion_with_applicability(\n+                    self.span,\n+                    \"remove this comma\",\n+                    String::new(),\n+                    Applicability::MachineApplicable,\n+                );\n             }\n         }\n         err\n@@ -6083,7 +6088,12 @@ impl<'a> Parser<'a> {\n                                                                 self.this_token_to_string()));\n                 if self.token.is_ident() {\n                     // This is likely another field; emit the diagnostic and keep going\n-                    err.span_suggestion(sp, \"try adding a comma\", \",\".into());\n+                    err.span_suggestion_with_applicability(\n+                        sp,\n+                        \"try adding a comma\",\n+                        \",\".into(),\n+                        Applicability::MachineApplicable,\n+                    );\n                     err.emit();\n                 } else {\n                     return Err(err)"}, {"sha": "efe9c2cefdebe93b3e1e4f646e2b2093061ae5b3", "filename": "src/libsyntax_ext/format.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibsyntax_ext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibsyntax_ext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat.rs?ref=1114ab684fbad001c4e580326d8eb4d8c4e917d3", "patch": "@@ -24,9 +24,9 @@ use syntax::tokenstream;\n use syntax_pos::{MultiSpan, Span, DUMMY_SP};\n use errors::Applicability;\n \n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use std::borrow::Cow;\n use std::collections::hash_map::Entry;\n-use std::collections::{HashMap, HashSet};\n \n #[derive(PartialEq)]\n enum ArgumentType {\n@@ -65,7 +65,7 @@ struct Context<'a, 'b: 'a> {\n     /// Unique format specs seen for each argument.\n     arg_unique_types: Vec<Vec<ArgumentType>>,\n     /// Map from named arguments to their resolved indices.\n-    names: HashMap<String, usize>,\n+    names: FxHashMap<String, usize>,\n \n     /// The latest consecutive literal strings, or empty if there weren't any.\n     literal: String,\n@@ -104,7 +104,7 @@ struct Context<'a, 'b: 'a> {\n     /// * `count_args`: `vec![Exact(0), Exact(5), Exact(3)]`\n     count_args: Vec<Position>,\n     /// Relative slot numbers for count arguments.\n-    count_positions: HashMap<usize, usize>,\n+    count_positions: FxHashMap<usize, usize>,\n     /// Number of count slots assigned.\n     count_positions_count: usize,\n \n@@ -134,9 +134,9 @@ struct Context<'a, 'b: 'a> {\n fn parse_args(ecx: &mut ExtCtxt,\n               sp: Span,\n               tts: &[tokenstream::TokenTree])\n-              -> Option<(P<ast::Expr>, Vec<P<ast::Expr>>, HashMap<String, usize>)> {\n+              -> Option<(P<ast::Expr>, Vec<P<ast::Expr>>, FxHashMap<String, usize>)> {\n     let mut args = Vec::<P<ast::Expr>>::new();\n-    let mut names = HashMap::<String, usize>::new();\n+    let mut names = FxHashMap::<String, usize>::default();\n \n     let mut p = ecx.new_parser_from_tts(tts);\n \n@@ -768,7 +768,7 @@ pub fn expand_preparsed_format_args(ecx: &mut ExtCtxt,\n                                     sp: Span,\n                                     efmt: P<ast::Expr>,\n                                     args: Vec<P<ast::Expr>>,\n-                                    names: HashMap<String, usize>,\n+                                    names: FxHashMap<String, usize>,\n                                     append_newline: bool)\n                                     -> P<ast::Expr> {\n     // NOTE: this verbose way of initializing `Vec<Vec<ArgumentType>>` is because\n@@ -852,7 +852,7 @@ pub fn expand_preparsed_format_args(ecx: &mut ExtCtxt,\n         curpiece: 0,\n         arg_index_map: Vec::new(),\n         count_args: Vec::new(),\n-        count_positions: HashMap::new(),\n+        count_positions: FxHashMap::default(),\n         count_positions_count: 0,\n         count_args_index_offset: 0,\n         literal: String::new(),\n@@ -952,7 +952,7 @@ pub fn expand_preparsed_format_args(ecx: &mut ExtCtxt,\n \n             // The set of foreign substitutions we've explained.  This prevents spamming the user\n             // with `%d should be written as {}` over and over again.\n-            let mut explained = HashSet::new();\n+            let mut explained = FxHashSet::default();\n \n             macro_rules! check_foreign {\n                 ($kind:ident) => {{"}, {"sha": "7e985cf52f550d1aa1f8c95cd5ba9fbdd0dad2b6", "filename": "src/libsyntax_pos/hygiene.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibsyntax_pos%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibsyntax_pos%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fhygiene.rs?ref=1114ab684fbad001c4e580326d8eb4d8c4e917d3", "patch": "@@ -21,8 +21,7 @@ use edition::Edition;\n use symbol::Symbol;\n \n use serialize::{Encodable, Decodable, Encoder, Decoder};\n-use std::collections::HashMap;\n-use rustc_data_structures::fx::FxHashSet;\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use std::fmt;\n \n /// A SyntaxContext represents a chain of macro expansions (represented by marks).\n@@ -190,7 +189,7 @@ impl Mark {\n crate struct HygieneData {\n     marks: Vec<MarkData>,\n     syntax_contexts: Vec<SyntaxContextData>,\n-    markings: HashMap<(SyntaxContext, Mark, Transparency), SyntaxContext>,\n+    markings: FxHashMap<(SyntaxContext, Mark, Transparency), SyntaxContext>,\n     default_edition: Edition,\n }\n \n@@ -212,7 +211,7 @@ impl HygieneData {\n                 opaque: SyntaxContext(0),\n                 opaque_and_semitransparent: SyntaxContext(0),\n             }],\n-            markings: HashMap::new(),\n+            markings: FxHashMap::default(),\n             default_edition: Edition::Edition2015,\n         }\n     }\n@@ -231,7 +230,7 @@ pub fn set_default_edition(edition: Edition) {\n }\n \n pub fn clear_markings() {\n-    HygieneData::with(|data| data.markings = HashMap::new());\n+    HygieneData::with(|data| data.markings = FxHashMap::default());\n }\n \n impl SyntaxContext {"}, {"sha": "d993c6244fc163d7241095a4ff62200d81922ae2", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=1114ab684fbad001c4e580326d8eb4d8c4e917d3", "patch": "@@ -1184,7 +1184,7 @@ fn get_concurrency() -> usize {\n     };\n \n     #[cfg(windows)]\n-    #[allow(bad_style)]\n+    #[allow(nonstandard_style)]\n     fn num_cpus() -> usize {\n         #[repr(C)]\n         struct SYSTEM_INFO {"}, {"sha": "43c3e1e7666239568d219c4dd2299e8ae8521132", "filename": "src/libunwind/libunwind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibunwind%2Flibunwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Flibunwind%2Flibunwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunwind%2Flibunwind.rs?ref=1114ab684fbad001c4e580326d8eb4d8c4e917d3", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(bad_style)]\n+#![allow(nonstandard_style)]\n \n macro_rules! cfg_if {\n     ( $( if #[cfg( $meta:meta )] { $($it1:item)* } else { $($it2:item)* } )* ) =>"}, {"sha": "a7fd9f299c033bdb8c086e310290ed21678e6cfa", "filename": "src/test/run-pass/simd-target-feature-mixup.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Ftest%2Frun-pass%2Fsimd-target-feature-mixup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Ftest%2Frun-pass%2Fsimd-target-feature-mixup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsimd-target-feature-mixup.rs?ref=1114ab684fbad001c4e580326d8eb4d8c4e917d3", "patch": "@@ -52,7 +52,7 @@ fn is_sigill(status: ExitStatus) -> bool {\n }\n \n #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n-#[allow(bad_style)]\n+#[allow(nonstandard_style)]\n mod test {\n     // An SSE type\n     #[repr(simd)]"}, {"sha": "1122f5a75592caae0602f3e003ee6c35f14c7ec1", "filename": "src/test/run-pass/try-from-int-error-partial-eq.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Ftest%2Frun-pass%2Ftry-from-int-error-partial-eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Ftest%2Frun-pass%2Ftry-from-int-error-partial-eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftry-from-int-error-partial-eq.rs?ref=1114ab684fbad001c4e580326d8eb4d8c4e917d3", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(try_from)]\n+#![allow(unused_must_use)]\n+\n+use std::convert::TryFrom;\n+use std::num::TryFromIntError;\n+\n+fn main() {\n+    let x: u32 = 125;\n+    let y: Result<u8, TryFromIntError> = u8::try_from(x);\n+    y == Ok(125);\n+}"}, {"sha": "81b81a9a141da48292f513365c6445cff77ce4e5", "filename": "src/test/rustdoc/intra-links.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Ftest%2Frustdoc%2Fintra-links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Ftest%2Frustdoc%2Fintra-links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-links.rs?ref=1114ab684fbad001c4e580326d8eb4d8c4e917d3", "patch": "@@ -75,7 +75,7 @@ pub static THIS_STATIC: usize = 5usize;\n \n pub trait SoAmbiguous {}\n \n-#[allow(bad_style)]\n+#[allow(nonstandard_style)]\n pub fn SoAmbiguous() {}\n \n "}, {"sha": "1776a71a6bb472b24e529409141a81f10c529a70", "filename": "src/test/ui/deref-suggestion.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Ftest%2Fui%2Fderef-suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Ftest%2Fui%2Fderef-suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderef-suggestion.rs?ref=1114ab684fbad001c4e580326d8eb4d8c4e917d3", "patch": "@@ -15,20 +15,26 @@ macro_rules! borrow {\n fn foo(_: String) {}\n \n fn foo2(s: &String) {\n-    foo(s); //~ ERROR mismatched types\n+    foo(s);\n+    //~^ ERROR mismatched types\n }\n \n fn foo3(_: u32) {}\n fn foo4(u: &u32) {\n-    foo3(u); //~ ERROR mismatched types\n+    foo3(u);\n+    //~^ ERROR mismatched types\n }\n \n fn main() {\n     let s = String::new();\n     let r_s = &s;\n     foo2(r_s);\n-    foo(&\"aaa\".to_owned()); //~ ERROR mismatched types\n-    foo(&mut \"aaa\".to_owned()); //~ ERROR mismatched types\n+    foo(&\"aaa\".to_owned());\n+    //~^ ERROR mismatched types\n+    foo(&mut \"aaa\".to_owned());\n+    //~^ ERROR mismatched types\n     foo3(borrow!(0));\n     foo4(&0);\n+    assert_eq!(3i32, &3i32);\n+    //~^ ERROR mismatched types\n }"}, {"sha": "9811c5969dad69ebc7d00ab10c10603cf02f2249", "filename": "src/test/ui/deref-suggestion.stderr", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Ftest%2Fui%2Fderef-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Ftest%2Fui%2Fderef-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderef-suggestion.stderr?ref=1114ab684fbad001c4e580326d8eb4d8c4e917d3", "patch": "@@ -1,7 +1,7 @@\n error[E0308]: mismatched types\n   --> $DIR/deref-suggestion.rs:18:9\n    |\n-LL |     foo(s); //~ ERROR mismatched types\n+LL |     foo(s);\n    |         ^\n    |         |\n    |         expected struct `std::string::String`, found reference\n@@ -11,9 +11,9 @@ LL |     foo(s); //~ ERROR mismatched types\n               found type `&std::string::String`\n \n error[E0308]: mismatched types\n-  --> $DIR/deref-suggestion.rs:23:10\n+  --> $DIR/deref-suggestion.rs:24:10\n    |\n-LL |     foo3(u); //~ ERROR mismatched types\n+LL |     foo3(u);\n    |          ^\n    |          |\n    |          expected u32, found &u32\n@@ -23,9 +23,9 @@ LL |     foo3(u); //~ ERROR mismatched types\n               found type `&u32`\n \n error[E0308]: mismatched types\n-  --> $DIR/deref-suggestion.rs:30:9\n+  --> $DIR/deref-suggestion.rs:32:9\n    |\n-LL |     foo(&\"aaa\".to_owned()); //~ ERROR mismatched types\n+LL |     foo(&\"aaa\".to_owned());\n    |         ^^^^^^^^^^^^^^^^^\n    |         |\n    |         expected struct `std::string::String`, found reference\n@@ -35,9 +35,9 @@ LL |     foo(&\"aaa\".to_owned()); //~ ERROR mismatched types\n               found type `&std::string::String`\n \n error[E0308]: mismatched types\n-  --> $DIR/deref-suggestion.rs:31:9\n+  --> $DIR/deref-suggestion.rs:34:9\n    |\n-LL |     foo(&mut \"aaa\".to_owned()); //~ ERROR mismatched types\n+LL |     foo(&mut \"aaa\".to_owned());\n    |         ^^^^^^^^^^^^^^^^^^^^^\n    |         |\n    |         expected struct `std::string::String`, found mutable reference\n@@ -58,6 +58,16 @@ LL |     foo3(borrow!(0));\n    = note: expected type `u32`\n               found type `&{integer}`\n \n-error: aborting due to 5 previous errors\n+error[E0308]: mismatched types\n+  --> $DIR/deref-suggestion.rs:38:5\n+   |\n+LL |     assert_eq!(3i32, &3i32);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^ expected i32, found &i32\n+   |\n+   = note: expected type `i32`\n+              found type `&i32`\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+error: aborting due to 6 previous errors\n \n For more information about this error, try `rustc --explain E0308`."}, {"sha": "b4cbed03153a74193e06d112e7885805426f4f1c", "filename": "src/test/ui/lifetimes/lifetime-errors/ex2a-push-one-existing-name-early-bound.nll.stderr", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2a-push-one-existing-name-early-bound.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2a-push-one-existing-name-early-bound.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2a-push-one-existing-name-early-bound.nll.stderr?ref=1114ab684fbad001c4e580326d8eb4d8c4e917d3", "patch": "@@ -4,14 +4,15 @@ warning: not reporting region error due to nll\n LL |     x.push(y); //~ ERROR explicit lifetime required\n    |            ^\n \n-error[E0282]: type annotations needed\n-  --> $DIR/ex2a-push-one-existing-name-early-bound.rs:20:9\n+error[E0621]: explicit lifetime required in the type of `y`\n+  --> $DIR/ex2a-push-one-existing-name-early-bound.rs:17:5\n    |\n-LL | let x = baz;\n-   |     -   ^^^ cannot infer type for `T`\n-   |     |\n-   |     consider giving `x` a type\n+LL | fn baz<'a, 'b, T>(x: &mut Vec<&'a T>, y: &T)\n+   |                                          -- help: add explicit lifetime `'a` to the type of `y`: `&'a T`\n+...\n+LL |     x.push(y); //~ ERROR explicit lifetime required\n+   |     ^^^^^^^^^ lifetime `'a` required\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0282`.\n+For more information about this error, try `rustc --explain E0621`."}, {"sha": "cad0a3c6ac13df67d8a44c7fc8f8f876f7769ad4", "filename": "src/test/ui/lifetimes/lifetime-errors/ex2a-push-one-existing-name-early-bound.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2a-push-one-existing-name-early-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2a-push-one-existing-name-early-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2a-push-one-existing-name-early-bound.rs?ref=1114ab684fbad001c4e580326d8eb4d8c4e917d3", "patch": "@@ -17,5 +17,4 @@ fn baz<'a, 'b, T>(x: &mut Vec<&'a T>, y: &T)\n     x.push(y); //~ ERROR explicit lifetime required\n }\n fn main() {\n-let x = baz;\n }"}, {"sha": "55d6168e6e0085205d0044dca7e8f4ab517d8c7a", "filename": "src/test/ui/lint/lint-group-style.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Ftest%2Fui%2Flint%2Flint-group-style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Ftest%2Fui%2Flint%2Flint-group-style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-group-style.rs?ref=1114ab684fbad001c4e580326d8eb4d8c4e917d3", "patch": "@@ -8,24 +8,24 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![deny(bad_style)]\n+#![deny(nonstandard_style)]\n #![allow(dead_code)]\n \n fn CamelCase() {} //~ ERROR should have a snake\n \n-#[allow(bad_style)]\n+#[allow(nonstandard_style)]\n mod test {\n     fn CamelCase() {}\n \n-    #[forbid(bad_style)]\n+    #[forbid(nonstandard_style)]\n     mod bad {\n         fn CamelCase() {} //~ ERROR should have a snake\n \n         static bad: isize = 1; //~ ERROR should have an upper\n     }\n \n     mod warn {\n-        #![warn(bad_style)]\n+        #![warn(nonstandard_style)]\n \n         fn CamelCase() {} //~ WARN should have a snake\n "}, {"sha": "6b91ce5b93ca604ab9d28b5b7a816028ea96fe30", "filename": "src/test/ui/lint/lint-group-style.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Ftest%2Fui%2Flint%2Flint-group-style.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Ftest%2Fui%2Flint%2Flint-group-style.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-group-style.stderr?ref=1114ab684fbad001c4e580326d8eb4d8c4e917d3", "patch": "@@ -7,9 +7,9 @@ LL | fn CamelCase() {} //~ ERROR should have a snake\n note: lint level defined here\n   --> $DIR/lint-group-style.rs:11:9\n    |\n-LL | #![deny(bad_style)]\n-   |         ^^^^^^^^^\n-   = note: #[deny(non_snake_case)] implied by #[deny(bad_style)]\n+LL | #![deny(nonstandard_style)]\n+   |         ^^^^^^^^^^^^^^^^^\n+   = note: #[deny(non_snake_case)] implied by #[deny(nonstandard_style)]\n \n error: function `CamelCase` should have a snake case name such as `camel_case`\n   --> $DIR/lint-group-style.rs:22:9\n@@ -20,9 +20,9 @@ LL |         fn CamelCase() {} //~ ERROR should have a snake\n note: lint level defined here\n   --> $DIR/lint-group-style.rs:20:14\n    |\n-LL |     #[forbid(bad_style)]\n-   |              ^^^^^^^^^\n-   = note: #[forbid(non_snake_case)] implied by #[forbid(bad_style)]\n+LL |     #[forbid(nonstandard_style)]\n+   |              ^^^^^^^^^^^^^^^^^\n+   = note: #[forbid(non_snake_case)] implied by #[forbid(nonstandard_style)]\n \n error: static variable `bad` should have an upper case name such as `BAD`\n   --> $DIR/lint-group-style.rs:24:9\n@@ -33,9 +33,9 @@ LL |         static bad: isize = 1; //~ ERROR should have an upper\n note: lint level defined here\n   --> $DIR/lint-group-style.rs:20:14\n    |\n-LL |     #[forbid(bad_style)]\n-   |              ^^^^^^^^^\n-   = note: #[forbid(non_upper_case_globals)] implied by #[forbid(bad_style)]\n+LL |     #[forbid(nonstandard_style)]\n+   |              ^^^^^^^^^^^^^^^^^\n+   = note: #[forbid(non_upper_case_globals)] implied by #[forbid(nonstandard_style)]\n \n warning: function `CamelCase` should have a snake case name such as `camel_case`\n   --> $DIR/lint-group-style.rs:30:9\n@@ -46,9 +46,9 @@ LL |         fn CamelCase() {} //~ WARN should have a snake\n note: lint level defined here\n   --> $DIR/lint-group-style.rs:28:17\n    |\n-LL |         #![warn(bad_style)]\n-   |                 ^^^^^^^^^\n-   = note: #[warn(non_snake_case)] implied by #[warn(bad_style)]\n+LL |         #![warn(nonstandard_style)]\n+   |                 ^^^^^^^^^^^^^^^^^\n+   = note: #[warn(non_snake_case)] implied by #[warn(nonstandard_style)]\n \n warning: type `snake_case` should have a camel case name such as `SnakeCase`\n   --> $DIR/lint-group-style.rs:32:9\n@@ -59,9 +59,9 @@ LL |         struct snake_case; //~ WARN should have a camel\n note: lint level defined here\n   --> $DIR/lint-group-style.rs:28:17\n    |\n-LL |         #![warn(bad_style)]\n-   |                 ^^^^^^^^^\n-   = note: #[warn(non_camel_case_types)] implied by #[warn(bad_style)]\n+LL |         #![warn(nonstandard_style)]\n+   |                 ^^^^^^^^^^^^^^^^^\n+   = note: #[warn(non_camel_case_types)] implied by #[warn(nonstandard_style)]\n \n error: aborting due to 3 previous errors\n "}, {"sha": "1e37ac0dc586c9b00ccbf25bc1463a15d7ba5487", "filename": "src/test/ui/lint/lint-shorthand-field.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Ftest%2Fui%2Flint%2Flint-shorthand-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Ftest%2Fui%2Flint%2Flint-shorthand-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-shorthand-field.rs?ref=1114ab684fbad001c4e580326d8eb4d8c4e917d3", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(bad_style, unused_variables)]\n+#![allow(nonstandard_style, unused_variables)]\n #![deny(non_shorthand_field_patterns)]\n \n struct Foo {"}, {"sha": "23e98cc22fc3ae725b1ce257a6056edc61895f1f", "filename": "src/test/ui/lint/outer-forbid.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Ftest%2Fui%2Flint%2Fouter-forbid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Ftest%2Fui%2Flint%2Fouter-forbid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fouter-forbid.rs?ref=1114ab684fbad001c4e580326d8eb4d8c4e917d3", "patch": "@@ -11,7 +11,7 @@\n // Forbidding a group (here, `unused`) overrules subsequent allowance of both\n // the group, and an individual lint in the group (here, `unused_variables`);\n // and, forbidding an individual lint (here, `non_snake_case`) overrules\n-// subsequent allowance of a lint group containing it (here, `bad_style`). See\n+// subsequent allowance of a lint group containing it (here, `nonstandard_style`). See\n // Issue #42873.\n \n #![forbid(unused, non_snake_case)]\n@@ -22,7 +22,7 @@ fn foo() {}\n #[allow(unused)] //~ ERROR overruled\n fn bar() {}\n \n-#[allow(bad_style)] //~ ERROR overruled\n+#[allow(nonstandard_style)] //~ ERROR overruled\n fn main() {\n     println!(\"hello forbidden world\")\n }"}, {"sha": "c011b49eaee7ded8c8863ca47fdd384f83edba1d", "filename": "src/test/ui/lint/outer-forbid.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Ftest%2Fui%2Flint%2Fouter-forbid.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1114ab684fbad001c4e580326d8eb4d8c4e917d3/src%2Ftest%2Fui%2Flint%2Fouter-forbid.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fouter-forbid.stderr?ref=1114ab684fbad001c4e580326d8eb4d8c4e917d3", "patch": "@@ -16,14 +16,14 @@ LL | #![forbid(unused, non_snake_case)]\n LL | #[allow(unused)] //~ ERROR overruled\n    |         ^^^^^^ overruled by previous forbid\n \n-error[E0453]: allow(bad_style) overruled by outer forbid(non_snake_case)\n+error[E0453]: allow(nonstandard_style) overruled by outer forbid(non_snake_case)\n   --> $DIR/outer-forbid.rs:25:9\n    |\n LL | #![forbid(unused, non_snake_case)]\n    |                   -------------- `forbid` level set here\n ...\n-LL | #[allow(bad_style)] //~ ERROR overruled\n-   |         ^^^^^^^^^ overruled by previous forbid\n+LL | #[allow(nonstandard_style)] //~ ERROR overruled\n+   |         ^^^^^^^^^^^^^^^^^ overruled by previous forbid\n \n error: aborting due to 3 previous errors\n "}]}