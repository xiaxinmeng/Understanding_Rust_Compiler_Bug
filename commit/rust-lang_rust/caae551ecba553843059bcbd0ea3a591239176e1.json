{"sha": "caae551ecba553843059bcbd0ea3a591239176e1", "node_id": "C_kwDOAAsO6NoAKGNhYWU1NTFlY2JhNTUzODQzMDU5YmNiZDBlYTNhNTkxMjM5MTc2ZTE", "commit": {"author": {"name": "nils", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2023-03-21T12:00:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-21T12:00:21Z"}, "message": "Rollup merge of #106434 - clubby789:document-sum-result, r=the8472\n\nDocument `Iterator::sum/product` for Option/Result\n\nCloses #105266\n\nWe already document the similar behavior for `collect()` so I believe it makes sense to add this too. The Option/Result implementations *are* documented on their respective pages and the page for `Sum`, but buried amongst many other trait impls which doesn't make it very discoverable.\n\n`````@rustbot````` label +A-docs", "tree": {"sha": "a268ef9f62e7a7151c88b5be8b65d576eeb21a4f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a268ef9f62e7a7151c88b5be8b65d576eeb21a4f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/caae551ecba553843059bcbd0ea3a591239176e1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkGZxVCRBK7hj4Ov3rIwAA6zQIAEqPUII/4jPVxvBTFsoctJlv\n+xmi9F2dxYahy1vaOi7qyGC5ApzDMxPs4U97XDPeeHMhsKKcFiNCKQv+NYpRcEWk\nvnv6Pf/EzYPcZncihUnLrkmzdqFrYXBfJ9GQSjZWA7wqj2RMKMTyF3xNobpIMY+x\ndFPbp1YeAnRsoTZXtTI0UXnAwRv2Uq55T/izlMekzGRjP1GM0xhuhXZGODiD8g9x\nvYMr2WfvFFtsonCrZRVfVaQDtIZLZOa6P2GRdbZOKZPOVTmu7Fj1R7z4aZpOv/ha\noZy8QBRdLioy+cW8TkSMUWF+m17x8Bf7Xvr6XaN38VYTv3eBkqVbtlvh1KT2p3k=\n=bohk\n-----END PGP SIGNATURE-----\n", "payload": "tree a268ef9f62e7a7151c88b5be8b65d576eeb21a4f\nparent ef03fda339923e659d3d3ca3321de887316d2807\nparent f321144a56aef246d430f5eea9316d8cc257a5a0\nauthor nils <48135649+Nilstrieb@users.noreply.github.com> 1679400021 +0100\ncommitter GitHub <noreply@github.com> 1679400021 +0100\n\nRollup merge of #106434 - clubby789:document-sum-result, r=the8472\n\nDocument `Iterator::sum/product` for Option/Result\n\nCloses #105266\n\nWe already document the similar behavior for `collect()` so I believe it makes sense to add this too. The Option/Result implementations *are* documented on their respective pages and the page for `Sum`, but buried amongst many other trait impls which doesn't make it very discoverable.\n\n`````@rustbot````` label +A-docs\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/caae551ecba553843059bcbd0ea3a591239176e1", "html_url": "https://github.com/rust-lang/rust/commit/caae551ecba553843059bcbd0ea3a591239176e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/caae551ecba553843059bcbd0ea3a591239176e1/comments", "author": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef03fda339923e659d3d3ca3321de887316d2807", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef03fda339923e659d3d3ca3321de887316d2807", "html_url": "https://github.com/rust-lang/rust/commit/ef03fda339923e659d3d3ca3321de887316d2807"}, {"sha": "f321144a56aef246d430f5eea9316d8cc257a5a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/f321144a56aef246d430f5eea9316d8cc257a5a0", "html_url": "https://github.com/rust-lang/rust/commit/f321144a56aef246d430f5eea9316d8cc257a5a0"}], "stats": {"total": 46, "additions": 42, "deletions": 4}, "files": [{"sha": "f9c7eb8f9383e24a7e5f50717fd396de866c32bd", "filename": "library/core/src/iter/traits/accum.rs", "status": "modified", "additions": 36, "deletions": 4, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/caae551ecba553843059bcbd0ea3a591239176e1/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Faccum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caae551ecba553843059bcbd0ea3a591239176e1/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Faccum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Faccum.rs?ref=caae551ecba553843059bcbd0ea3a591239176e1", "patch": "@@ -164,12 +164,13 @@ where\n     /// element is encountered:\n     ///\n     /// ```\n+    /// let f = |&x: &i32| if x < 0 { Err(\"Negative element found\") } else { Ok(x) };\n     /// let v = vec![1, 2];\n-    /// let res: Result<i32, &'static str> = v.iter().map(|&x: &i32|\n-    ///     if x < 0 { Err(\"Negative element found\") }\n-    ///     else { Ok(x) }\n-    /// ).sum();\n+    /// let res: Result<i32, _> = v.iter().map(f).sum();\n     /// assert_eq!(res, Ok(3));\n+    /// let v = vec![1, -2];\n+    /// let res: Result<i32, _> = v.iter().map(f).sum();\n+    /// assert_eq!(res, Err(\"Negative element found\"));\n     /// ```\n     fn sum<I>(iter: I) -> Result<T, E>\n     where\n@@ -187,6 +188,20 @@ where\n     /// Takes each element in the [`Iterator`]: if it is an [`Err`], no further\n     /// elements are taken, and the [`Err`] is returned. Should no [`Err`]\n     /// occur, the product of all elements is returned.\n+    ///\n+    /// # Examples\n+    ///\n+    /// This multiplies each number in a vector of strings,\n+    /// if a string could not be parsed the operation returns `Err`:\n+    ///\n+    /// ```\n+    /// let nums = vec![\"5\", \"10\", \"1\", \"2\"];\n+    /// let total: Result<usize, _> = nums.iter().map(|w| w.parse::<usize>()).product();\n+    /// assert_eq!(total, Ok(100));\n+    /// let nums = vec![\"5\", \"10\", \"one\", \"2\"];\n+    /// let total: Result<usize, _> = nums.iter().map(|w| w.parse::<usize>()).product();\n+    /// assert!(total.is_err());\n+    /// ```\n     fn product<I>(iter: I) -> Result<T, E>\n     where\n         I: Iterator<Item = Result<U, E>>,\n@@ -213,6 +228,9 @@ where\n     /// let words = vec![\"have\", \"a\", \"great\", \"day\"];\n     /// let total: Option<usize> = words.iter().map(|w| w.find('a')).sum();\n     /// assert_eq!(total, Some(5));\n+    /// let words = vec![\"have\", \"a\", \"good\", \"day\"];\n+    /// let total: Option<usize> = words.iter().map(|w| w.find('a')).sum();\n+    /// assert_eq!(total, None);\n     /// ```\n     fn sum<I>(iter: I) -> Option<T>\n     where\n@@ -230,6 +248,20 @@ where\n     /// Takes each element in the [`Iterator`]: if it is a [`None`], no further\n     /// elements are taken, and the [`None`] is returned. Should no [`None`]\n     /// occur, the product of all elements is returned.\n+    ///\n+    /// # Examples\n+    ///\n+    /// This multiplies each number in a vector of strings,\n+    /// if a string could not be parsed the operation returns `None`:\n+    ///\n+    /// ```\n+    /// let nums = vec![\"5\", \"10\", \"1\", \"2\"];\n+    /// let total: Option<usize> = nums.iter().map(|w| w.parse::<usize>().ok()).product();\n+    /// assert_eq!(total, Some(100));\n+    /// let nums = vec![\"5\", \"10\", \"one\", \"2\"];\n+    /// let total: Option<usize> = nums.iter().map(|w| w.parse::<usize>().ok()).product();\n+    /// assert_eq!(total, None);\n+    /// ```\n     fn product<I>(iter: I) -> Option<T>\n     where\n         I: Iterator<Item = Option<U>>,"}, {"sha": "16c9f668b8ea8602768e3e915cbd6410153d67af", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/caae551ecba553843059bcbd0ea3a591239176e1/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caae551ecba553843059bcbd0ea3a591239176e1/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=caae551ecba553843059bcbd0ea3a591239176e1", "patch": "@@ -3448,6 +3448,9 @@ pub trait Iterator {\n     ///\n     /// An empty iterator returns the zero value of the type.\n     ///\n+    /// `sum()` can be used to sum any type implementing [`Sum`][`core::iter::Sum`],\n+    /// including [`Option`][`Option::sum`] and [`Result`][`Result::sum`].\n+    ///\n     /// # Panics\n     ///\n     /// When calling `sum()` and a primitive integer type is being returned, this\n@@ -3478,6 +3481,9 @@ pub trait Iterator {\n     ///\n     /// An empty iterator returns the one value of the type.\n     ///\n+    /// `product()` can be used to multiply any type implementing [`Product`][`core::iter::Product`],\n+    /// including [`Option`][`Option::product`] and [`Result`][`Result::product`].\n+    ///\n     /// # Panics\n     ///\n     /// When calling `product()` and a primitive integer type is being returned,"}]}