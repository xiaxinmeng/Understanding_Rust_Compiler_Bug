{"sha": "971b9b23b5ce0573dcc28e928410b4795b548bcc", "node_id": "C_kwDOAAsO6NoAKDk3MWI5YjIzYjVjZTA1NzNkY2MyOGU5Mjg0MTBiNDc5NWI1NDhiY2M", "commit": {"author": {"name": "Urgau", "email": "urgau@numericable.fr", "date": "2023-03-28T16:47:37Z"}, "committer": {"name": "Urgau", "email": "urgau@numericable.fr", "date": "2023-05-10T17:36:01Z"}, "message": "Uplift clippy::forget_copy to rustc", "tree": {"sha": "85771fc14cdffd19f5b761289e0b829ca710d98e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/85771fc14cdffd19f5b761289e0b829ca710d98e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/971b9b23b5ce0573dcc28e928410b4795b548bcc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/971b9b23b5ce0573dcc28e928410b4795b548bcc", "html_url": "https://github.com/rust-lang/rust/commit/971b9b23b5ce0573dcc28e928410b4795b548bcc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/971b9b23b5ce0573dcc28e928410b4795b548bcc/comments", "author": {"login": "Urgau", "id": 3616612, "node_id": "MDQ6VXNlcjM2MTY2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3616612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Urgau", "html_url": "https://github.com/Urgau", "followers_url": "https://api.github.com/users/Urgau/followers", "following_url": "https://api.github.com/users/Urgau/following{/other_user}", "gists_url": "https://api.github.com/users/Urgau/gists{/gist_id}", "starred_url": "https://api.github.com/users/Urgau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Urgau/subscriptions", "organizations_url": "https://api.github.com/users/Urgau/orgs", "repos_url": "https://api.github.com/users/Urgau/repos", "events_url": "https://api.github.com/users/Urgau/events{/privacy}", "received_events_url": "https://api.github.com/users/Urgau/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Urgau", "id": 3616612, "node_id": "MDQ6VXNlcjM2MTY2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3616612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Urgau", "html_url": "https://github.com/Urgau", "followers_url": "https://api.github.com/users/Urgau/followers", "following_url": "https://api.github.com/users/Urgau/following{/other_user}", "gists_url": "https://api.github.com/users/Urgau/gists{/gist_id}", "starred_url": "https://api.github.com/users/Urgau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Urgau/subscriptions", "organizations_url": "https://api.github.com/users/Urgau/orgs", "repos_url": "https://api.github.com/users/Urgau/repos", "events_url": "https://api.github.com/users/Urgau/events{/privacy}", "received_events_url": "https://api.github.com/users/Urgau/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf6d2272c51406c03d8e1b1b3e7c1d36a5535877", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf6d2272c51406c03d8e1b1b3e7c1d36a5535877", "html_url": "https://github.com/rust-lang/rust/commit/cf6d2272c51406c03d8e1b1b3e7c1d36a5535877"}], "stats": {"total": 209, "additions": 207, "deletions": 2}, "files": [{"sha": "0db4b3160dfb3b43e774a747a9bf8b52b7f1cb16", "filename": "compiler/rustc_lint/messages.ftl", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/971b9b23b5ce0573dcc28e928410b4795b548bcc/compiler%2Frustc_lint%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/971b9b23b5ce0573dcc28e928410b4795b548bcc/compiler%2Frustc_lint%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fmessages.ftl?ref=971b9b23b5ce0573dcc28e928410b4795b548bcc", "patch": "@@ -529,3 +529,6 @@ lint_drop_copy = calls to `std::mem::drop` with a value that implements `Copy`.\n \n lint_forget_ref = calls to `std::mem::forget` with a reference instead of an owned value\n     .note = argument has type `{$arg_ty}`\n+\n+lint_forget_copy = calls to `std::mem::forget` with a value that implements `Copy`.\n+    .note = argument has type `{$arg_ty}`"}, {"sha": "e72439439a4b520da7670e6f12972aa9c645d0d2", "filename": "compiler/rustc_lint/src/drop_forget_useless.rs", "status": "modified", "additions": 36, "deletions": 2, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/971b9b23b5ce0573dcc28e928410b4795b548bcc/compiler%2Frustc_lint%2Fsrc%2Fdrop_forget_useless.rs", "raw_url": "https://github.com/rust-lang/rust/raw/971b9b23b5ce0573dcc28e928410b4795b548bcc/compiler%2Frustc_lint%2Fsrc%2Fdrop_forget_useless.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fdrop_forget_useless.rs?ref=971b9b23b5ce0573dcc28e928410b4795b548bcc", "patch": "@@ -1,7 +1,10 @@\n use rustc_hir::{Arm, Expr, ExprKind, Node};\n use rustc_span::sym;\n \n-use crate::{lints::{DropRefDiag, DropCopyDiag, ForgetRefDiag}, LateContext, LateLintPass, LintContext};\n+use crate::{\n+    lints::{DropCopyDiag, DropRefDiag, ForgetCopyDiag, ForgetRefDiag},\n+    LateContext, LateLintPass, LintContext,\n+};\n \n declare_lint! {\n     /// The `drop_ref` lint checks for calls to `std::mem::drop` with a reference\n@@ -78,7 +81,35 @@ declare_lint! {\n     \"calls to `std::mem::drop` with a value that implements Copy\"\n }\n \n-declare_lint_pass!(DropForgetUseless => [DROP_REF, FORGET_REF, DROP_COPY]);\n+declare_lint! {\n+    /// The `forget_copy` lint checks for calls to `std::mem::forget` with a value\n+    /// that derives the Copy trait.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust\n+    /// let x: i32 = 42; // i32 implements Copy\n+    /// std::mem::forget(x); // A copy of x is passed to the function, leaving the\n+    ///                      // original unaffected\n+    /// ```\n+    ///\n+    /// {{produces}}\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// Calling `std::mem::forget` [does nothing for types that\n+    /// implement Copy](https://doc.rust-lang.org/std/mem/fn.drop.html) since the\n+    /// value will be copied and moved into the function on invocation.\n+    ///\n+    /// An alternative, but also valid, explanation is that Copy types do not\n+    /// implement the Drop trait, which means they have no destructors. Without a\n+    /// destructor, there is nothing for `std::mem::forget` to ignore.\n+    pub FORGET_COPY,\n+    Warn,\n+    \"calls to `std::mem::forget` with a value that implements Copy\"\n+}\n+\n+declare_lint_pass!(DropForgetUseless => [DROP_REF, FORGET_REF, DROP_COPY, FORGET_COPY]);\n \n impl<'tcx> LateLintPass<'tcx> for DropForgetUseless {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) {\n@@ -100,6 +131,9 @@ impl<'tcx> LateLintPass<'tcx> for DropForgetUseless {\n                 sym::mem_drop if is_copy && !drop_is_single_call_in_arm => {\n                     cx.emit_spanned_lint(DROP_COPY, expr.span, DropCopyDiag { arg_ty, note: arg.span });\n                 }\n+                sym::mem_forget if is_copy => {\n+                    cx.emit_spanned_lint(FORGET_COPY, expr.span, ForgetCopyDiag { arg_ty, note: arg.span });\n+                }\n                 _ => return,\n             };\n         }"}, {"sha": "102a149a410c54be5e11f2d3735cc38e58af1b54", "filename": "compiler/rustc_lint/src/lints.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/971b9b23b5ce0573dcc28e928410b4795b548bcc/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/971b9b23b5ce0573dcc28e928410b4795b548bcc/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flints.rs?ref=971b9b23b5ce0573dcc28e928410b4795b548bcc", "patch": "@@ -687,6 +687,14 @@ pub struct ForgetRefDiag<'a> {\n     pub note: Span,\n }\n \n+#[derive(LintDiagnostic)]\n+#[diag(lint_forget_copy)]\n+pub struct ForgetCopyDiag<'a> {\n+    pub arg_ty: Ty<'a>,\n+    #[note]\n+    pub note: Span,\n+}\n+\n // hidden_unicode_codepoints.rs\n #[derive(LintDiagnostic)]\n #[diag(lint_hidden_unicode_codepoints)]"}, {"sha": "a6b17b76971f27c8a8f49c4e7c11751a2c609e52", "filename": "tests/ui/lint/forget_copy.rs", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/971b9b23b5ce0573dcc28e928410b4795b548bcc/tests%2Fui%2Flint%2Fforget_copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/971b9b23b5ce0573dcc28e928410b4795b548bcc/tests%2Fui%2Flint%2Fforget_copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fforget_copy.rs?ref=971b9b23b5ce0573dcc28e928410b4795b548bcc", "patch": "@@ -0,0 +1,56 @@\n+// check-pass\n+\n+#![warn(forget_copy)]\n+\n+use std::mem::forget;\n+use std::vec::Vec;\n+\n+#[derive(Copy, Clone)]\n+struct SomeStruct;\n+\n+struct AnotherStruct {\n+    x: u8,\n+    y: u8,\n+    z: Vec<u8>,\n+}\n+\n+impl Clone for AnotherStruct {\n+    fn clone(&self) -> AnotherStruct {\n+        AnotherStruct {\n+            x: self.x,\n+            y: self.y,\n+            z: self.z.clone(),\n+        }\n+    }\n+}\n+\n+fn main() {\n+    let s1 = SomeStruct {};\n+    let s2 = s1;\n+    let s3 = &s1;\n+    let mut s4 = s1;\n+    let ref s5 = s1;\n+\n+    forget(s1); //~ WARN calls to `std::mem::forget`\n+    forget(s2); //~ WARN calls to `std::mem::forget`\n+    forget(s3); //~ WARN calls to `std::mem::forget`\n+    forget(s4); //~ WARN calls to `std::mem::forget`\n+    forget(s5); //~ WARN calls to `std::mem::forget`\n+\n+    let a1 = AnotherStruct {\n+        x: 255,\n+        y: 0,\n+        z: vec![1, 2, 3],\n+    };\n+    let a2 = &a1;\n+    let mut a3 = a1.clone();\n+    let ref a4 = a1;\n+    let a5 = a1.clone();\n+\n+    forget(a2); //~ WARN calls to `std::mem::forget`\n+    let a3 = &a1;\n+    forget(a3); //~ WARN calls to `std::mem::forget`\n+    forget(a4); //~ WARN calls to `std::mem::forget`\n+    let a5 = a1.clone();\n+    forget(a5);\n+}"}, {"sha": "d33dfa0fd3d11b306cc718548b6145300a4566f9", "filename": "tests/ui/lint/forget_copy.stderr", "status": "added", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/971b9b23b5ce0573dcc28e928410b4795b548bcc/tests%2Fui%2Flint%2Fforget_copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/971b9b23b5ce0573dcc28e928410b4795b548bcc/tests%2Fui%2Flint%2Fforget_copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fforget_copy.stderr?ref=971b9b23b5ce0573dcc28e928410b4795b548bcc", "patch": "@@ -0,0 +1,104 @@\n+warning: calls to `std::mem::forget` with a value that implements `Copy`.\n+  --> $DIR/forget_copy.rs:34:5\n+   |\n+LL |     forget(s1);\n+   |     ^^^^^^^^^^\n+   |\n+note: argument has type `SomeStruct`\n+  --> $DIR/forget_copy.rs:34:12\n+   |\n+LL |     forget(s1);\n+   |            ^^\n+note: the lint level is defined here\n+  --> $DIR/forget_copy.rs:3:9\n+   |\n+LL | #![warn(forget_copy)]\n+   |         ^^^^^^^^^^^\n+\n+warning: calls to `std::mem::forget` with a value that implements `Copy`.\n+  --> $DIR/forget_copy.rs:35:5\n+   |\n+LL |     forget(s2);\n+   |     ^^^^^^^^^^\n+   |\n+note: argument has type `SomeStruct`\n+  --> $DIR/forget_copy.rs:35:12\n+   |\n+LL |     forget(s2);\n+   |            ^^\n+\n+warning: calls to `std::mem::forget` with a reference instead of an owned value\n+  --> $DIR/forget_copy.rs:36:5\n+   |\n+LL |     forget(s3);\n+   |     ^^^^^^^^^^\n+   |\n+note: argument has type `&SomeStruct`\n+  --> $DIR/forget_copy.rs:36:12\n+   |\n+LL |     forget(s3);\n+   |            ^^\n+   = note: `#[warn(forget_ref)]` on by default\n+\n+warning: calls to `std::mem::forget` with a value that implements `Copy`.\n+  --> $DIR/forget_copy.rs:37:5\n+   |\n+LL |     forget(s4);\n+   |     ^^^^^^^^^^\n+   |\n+note: argument has type `SomeStruct`\n+  --> $DIR/forget_copy.rs:37:12\n+   |\n+LL |     forget(s4);\n+   |            ^^\n+\n+warning: calls to `std::mem::forget` with a reference instead of an owned value\n+  --> $DIR/forget_copy.rs:38:5\n+   |\n+LL |     forget(s5);\n+   |     ^^^^^^^^^^\n+   |\n+note: argument has type `&SomeStruct`\n+  --> $DIR/forget_copy.rs:38:12\n+   |\n+LL |     forget(s5);\n+   |            ^^\n+\n+warning: calls to `std::mem::forget` with a reference instead of an owned value\n+  --> $DIR/forget_copy.rs:50:5\n+   |\n+LL |     forget(a2);\n+   |     ^^^^^^^^^^\n+   |\n+note: argument has type `&AnotherStruct`\n+  --> $DIR/forget_copy.rs:50:12\n+   |\n+LL |     forget(a2);\n+   |            ^^\n+\n+warning: calls to `std::mem::forget` with a reference instead of an owned value\n+  --> $DIR/forget_copy.rs:52:5\n+   |\n+LL |     forget(a3);\n+   |     ^^^^^^^^^^\n+   |\n+note: argument has type `&AnotherStruct`\n+  --> $DIR/forget_copy.rs:52:12\n+   |\n+LL |     forget(a3);\n+   |            ^^\n+\n+warning: calls to `std::mem::forget` with a reference instead of an owned value\n+  --> $DIR/forget_copy.rs:53:5\n+   |\n+LL |     forget(a4);\n+   |     ^^^^^^^^^^\n+   |\n+note: argument has type `&AnotherStruct`\n+  --> $DIR/forget_copy.rs:53:12\n+   |\n+LL |     forget(a4);\n+   |            ^^\n+\n+warning: 8 warnings emitted\n+"}]}