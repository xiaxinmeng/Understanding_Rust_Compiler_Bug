{"sha": "2d8f6389d09bfbaa9a5960c63f6639ddc513c813", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkOGY2Mzg5ZDA5YmZiYWE5YTU5NjBjNjNmNjYzOWRkYzUxM2M4MTM=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-02-06T21:38:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-06T21:38:33Z"}, "message": "Rollup merge of #68524 - jonas-schievink:generator-resume-arguments, r=Zoxc\n\nGenerator Resume Arguments\n\ncc https://github.com/rust-lang/rust/issues/43122 and https://github.com/rust-lang/rust/issues/56974\n\nBlockers:\n* [x] Fix miscompilation when resume argument is live across a yield point (https://github.com/rust-lang/rust/pull/68524#issuecomment-578459069)\n* [x] Fix 10% compile time regression in `await-call-tree` benchmarks (https://github.com/rust-lang/rust/pull/68524#issuecomment-578487162)\n  * [x] Fix remaining 1-3% regression (https://github.com/rust-lang/rust/pull/68524#issuecomment-579566255) - resolved (https://github.com/rust-lang/rust/pull/68524#issuecomment-581144901)\n* [x] Make dropck rules account for resume arguments (https://github.com/rust-lang/rust/pull/68524#issuecomment-578541137)\n\nFollow-up work:\n* Change async/await desugaring to make use of this feature\n* Rewrite [`box_region.rs`](https://github.com/rust-lang/rust/blob/3d8778d767f0dde6fe2bc9459f21ead8e124d8cb/src/librustc_data_structures/box_region.rs) to use resume arguments (this shows up in profiles too)", "tree": {"sha": "3ce2a1d693e31d97746c05ea716a045c84747d3a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ce2a1d693e31d97746c05ea716a045c84747d3a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d8f6389d09bfbaa9a5960c63f6639ddc513c813", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJePIdZCRBK7hj4Ov3rIwAAdHIIAI2ZGwP9E7++6DtKMMpU2oX5\np5dPdug413H3sOYNf/jycUnpuq1UkKBOK10GhxDFG06MWNH3TlAKh17VduuXmbUg\nWdpdKwcBou5Na0GbBdNMjv0E2beA/H2BrydS8Z/QBy9YRE21GLpQLOxNM+noqDXw\ndtuYgjzU8CmgEJUF41luNMt4Qlwe82b4gVWnc0ir2sjWcFepMSVxO1WECj/Fn2d4\nkEgGXTLtuhL+SytrnuAP//kjfMKoRNf9TbRVy5r2/42u6KPqrdvZSYWC8UztMpYe\n5E36nAf1FEz9Ixfu+eZWdncmUsJtXCvarep96hpVlGD5mBve6VviOIw0oICnX1c=\n=ml/S\n-----END PGP SIGNATURE-----\n", "payload": "tree 3ce2a1d693e31d97746c05ea716a045c84747d3a\nparent 26c86a6a2828b1048fa2fd425595ef8fb475249a\nparent 9d7b214ac6cb50a1b5454e0ae904a6479b54261c\nauthor Dylan DPC <dylan.dpc@gmail.com> 1581025113 +0100\ncommitter GitHub <noreply@github.com> 1581025113 +0100\n\nRollup merge of #68524 - jonas-schievink:generator-resume-arguments, r=Zoxc\n\nGenerator Resume Arguments\n\ncc https://github.com/rust-lang/rust/issues/43122 and https://github.com/rust-lang/rust/issues/56974\n\nBlockers:\n* [x] Fix miscompilation when resume argument is live across a yield point (https://github.com/rust-lang/rust/pull/68524#issuecomment-578459069)\n* [x] Fix 10% compile time regression in `await-call-tree` benchmarks (https://github.com/rust-lang/rust/pull/68524#issuecomment-578487162)\n  * [x] Fix remaining 1-3% regression (https://github.com/rust-lang/rust/pull/68524#issuecomment-579566255) - resolved (https://github.com/rust-lang/rust/pull/68524#issuecomment-581144901)\n* [x] Make dropck rules account for resume arguments (https://github.com/rust-lang/rust/pull/68524#issuecomment-578541137)\n\nFollow-up work:\n* Change async/await desugaring to make use of this feature\n* Rewrite [`box_region.rs`](https://github.com/rust-lang/rust/blob/3d8778d767f0dde6fe2bc9459f21ead8e124d8cb/src/librustc_data_structures/box_region.rs) to use resume arguments (this shows up in profiles too)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d8f6389d09bfbaa9a5960c63f6639ddc513c813", "html_url": "https://github.com/rust-lang/rust/commit/2d8f6389d09bfbaa9a5960c63f6639ddc513c813", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26c86a6a2828b1048fa2fd425595ef8fb475249a", "url": "https://api.github.com/repos/rust-lang/rust/commits/26c86a6a2828b1048fa2fd425595ef8fb475249a", "html_url": "https://github.com/rust-lang/rust/commit/26c86a6a2828b1048fa2fd425595ef8fb475249a"}, {"sha": "9d7b214ac6cb50a1b5454e0ae904a6479b54261c", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d7b214ac6cb50a1b5454e0ae904a6479b54261c", "html_url": "https://github.com/rust-lang/rust/commit/9d7b214ac6cb50a1b5454e0ae904a6479b54261c"}], "stats": {"total": 1150, "additions": 867, "deletions": 283}, "files": [{"sha": "8bc62418b3969c1e3c73d306571b81f10cf5f710", "filename": "src/doc/unstable-book/src/language-features/generators.md", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fgenerators.md", "raw_url": "https://github.com/rust-lang/rust/raw/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fgenerators.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fgenerators.md?ref=2d8f6389d09bfbaa9a5960c63f6639ddc513c813", "patch": "@@ -37,11 +37,11 @@ fn main() {\n         return \"foo\"\n     };\n \n-    match Pin::new(&mut generator).resume() {\n+    match Pin::new(&mut generator).resume(()) {\n         GeneratorState::Yielded(1) => {}\n         _ => panic!(\"unexpected value from resume\"),\n     }\n-    match Pin::new(&mut generator).resume() {\n+    match Pin::new(&mut generator).resume(()) {\n         GeneratorState::Complete(\"foo\") => {}\n         _ => panic!(\"unexpected value from resume\"),\n     }\n@@ -71,9 +71,9 @@ fn main() {\n     };\n \n     println!(\"1\");\n-    Pin::new(&mut generator).resume();\n+    Pin::new(&mut generator).resume(());\n     println!(\"3\");\n-    Pin::new(&mut generator).resume();\n+    Pin::new(&mut generator).resume(());\n     println!(\"5\");\n }\n ```\n@@ -92,10 +92,10 @@ The `Generator` trait in `std::ops` currently looks like:\n # use std::ops::GeneratorState;\n # use std::pin::Pin;\n \n-pub trait Generator {\n+pub trait Generator<R = ()> {\n     type Yield;\n     type Return;\n-    fn resume(self: Pin<&mut Self>) -> GeneratorState<Self::Yield, Self::Return>;\n+    fn resume(self: Pin<&mut Self>, resume: R) -> GeneratorState<Self::Yield, Self::Return>;\n }\n ```\n \n@@ -152,10 +152,6 @@ closure-like semantics. Namely:\n * Whenever a generator is dropped it will drop all captured environment\n   variables.\n \n-Note that unlike closures, generators at this time cannot take any arguments.\n-That is, generators must always look like `|| { ... }`. This restriction may be\n-lifted at a future date, the design is ongoing!\n-\n ### Generators as state machines\n \n In the compiler, generators are currently compiled as state machines. Each\n@@ -179,8 +175,8 @@ fn main() {\n         return ret\n     };\n \n-    Pin::new(&mut generator).resume();\n-    Pin::new(&mut generator).resume();\n+    Pin::new(&mut generator).resume(());\n+    Pin::new(&mut generator).resume(());\n }\n ```\n \n@@ -205,7 +201,7 @@ fn main() {\n             type Yield = i32;\n             type Return = &'static str;\n \n-            fn resume(mut self: Pin<&mut Self>) -> GeneratorState<i32, &'static str> {\n+            fn resume(mut self: Pin<&mut Self>, resume: ()) -> GeneratorState<i32, &'static str> {\n                 use std::mem;\n                 match mem::replace(&mut *self, __Generator::Done) {\n                     __Generator::Start(s) => {\n@@ -228,8 +224,8 @@ fn main() {\n         __Generator::Start(ret)\n     };\n \n-    Pin::new(&mut generator).resume();\n-    Pin::new(&mut generator).resume();\n+    Pin::new(&mut generator).resume(());\n+    Pin::new(&mut generator).resume(());\n }\n ```\n "}, {"sha": "d65aee09232807bec31eca96e521f31daf333f37", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=2d8f6389d09bfbaa9a5960c63f6639ddc513c813", "patch": "@@ -1104,6 +1104,7 @@ impl<T: ?Sized> AsMut<T> for Box<T> {\n #[stable(feature = \"pin\", since = \"1.33.0\")]\n impl<T: ?Sized> Unpin for Box<T> {}\n \n+#[cfg(bootstrap)]\n #[unstable(feature = \"generator_trait\", issue = \"43122\")]\n impl<G: ?Sized + Generator + Unpin> Generator for Box<G> {\n     type Yield = G::Yield;\n@@ -1114,6 +1115,7 @@ impl<G: ?Sized + Generator + Unpin> Generator for Box<G> {\n     }\n }\n \n+#[cfg(bootstrap)]\n #[unstable(feature = \"generator_trait\", issue = \"43122\")]\n impl<G: ?Sized + Generator> Generator for Pin<Box<G>> {\n     type Yield = G::Yield;\n@@ -1124,6 +1126,28 @@ impl<G: ?Sized + Generator> Generator for Pin<Box<G>> {\n     }\n }\n \n+#[cfg(not(bootstrap))]\n+#[unstable(feature = \"generator_trait\", issue = \"43122\")]\n+impl<G: ?Sized + Generator<R> + Unpin, R> Generator<R> for Box<G> {\n+    type Yield = G::Yield;\n+    type Return = G::Return;\n+\n+    fn resume(mut self: Pin<&mut Self>, arg: R) -> GeneratorState<Self::Yield, Self::Return> {\n+        G::resume(Pin::new(&mut *self), arg)\n+    }\n+}\n+\n+#[cfg(not(bootstrap))]\n+#[unstable(feature = \"generator_trait\", issue = \"43122\")]\n+impl<G: ?Sized + Generator<R>, R> Generator<R> for Pin<Box<G>> {\n+    type Yield = G::Yield;\n+    type Return = G::Return;\n+\n+    fn resume(mut self: Pin<&mut Self>, arg: R) -> GeneratorState<Self::Yield, Self::Return> {\n+        G::resume((*self).as_mut(), arg)\n+    }\n+}\n+\n #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n impl<F: ?Sized + Future + Unpin> Future for Box<F> {\n     type Output = F::Output;"}, {"sha": "4e43561996c370ee7c151ef6f632925c7ac35d1a", "filename": "src/libcore/ops/generator.rs", "status": "modified", "additions": 31, "deletions": 4, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Flibcore%2Fops%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Flibcore%2Fops%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Fgenerator.rs?ref=2d8f6389d09bfbaa9a5960c63f6639ddc513c813", "patch": "@@ -50,11 +50,11 @@ pub enum GeneratorState<Y, R> {\n ///         return \"foo\"\n ///     };\n ///\n-///     match Pin::new(&mut generator).resume() {\n+///     match Pin::new(&mut generator).resume(()) {\n ///         GeneratorState::Yielded(1) => {}\n ///         _ => panic!(\"unexpected return from resume\"),\n ///     }\n-///     match Pin::new(&mut generator).resume() {\n+///     match Pin::new(&mut generator).resume(()) {\n ///         GeneratorState::Complete(\"foo\") => {}\n ///         _ => panic!(\"unexpected return from resume\"),\n ///     }\n@@ -67,7 +67,7 @@ pub enum GeneratorState<Y, R> {\n #[lang = \"generator\"]\n #[unstable(feature = \"generator_trait\", issue = \"43122\")]\n #[fundamental]\n-pub trait Generator {\n+pub trait Generator<#[cfg(not(bootstrap))] R = ()> {\n     /// The type of value this generator yields.\n     ///\n     /// This associated type corresponds to the `yield` expression and the\n@@ -110,9 +110,13 @@ pub trait Generator {\n     /// been returned previously. While generator literals in the language are\n     /// guaranteed to panic on resuming after `Complete`, this is not guaranteed\n     /// for all implementations of the `Generator` trait.\n-    fn resume(self: Pin<&mut Self>) -> GeneratorState<Self::Yield, Self::Return>;\n+    fn resume(\n+        self: Pin<&mut Self>,\n+        #[cfg(not(bootstrap))] arg: R,\n+    ) -> GeneratorState<Self::Yield, Self::Return>;\n }\n \n+#[cfg(bootstrap)]\n #[unstable(feature = \"generator_trait\", issue = \"43122\")]\n impl<G: ?Sized + Generator> Generator for Pin<&mut G> {\n     type Yield = G::Yield;\n@@ -123,6 +127,7 @@ impl<G: ?Sized + Generator> Generator for Pin<&mut G> {\n     }\n }\n \n+#[cfg(bootstrap)]\n #[unstable(feature = \"generator_trait\", issue = \"43122\")]\n impl<G: ?Sized + Generator + Unpin> Generator for &mut G {\n     type Yield = G::Yield;\n@@ -132,3 +137,25 @@ impl<G: ?Sized + Generator + Unpin> Generator for &mut G {\n         G::resume(Pin::new(&mut *self))\n     }\n }\n+\n+#[cfg(not(bootstrap))]\n+#[unstable(feature = \"generator_trait\", issue = \"43122\")]\n+impl<G: ?Sized + Generator<R>, R> Generator<R> for Pin<&mut G> {\n+    type Yield = G::Yield;\n+    type Return = G::Return;\n+\n+    fn resume(mut self: Pin<&mut Self>, arg: R) -> GeneratorState<Self::Yield, Self::Return> {\n+        G::resume((*self).as_mut(), arg)\n+    }\n+}\n+\n+#[cfg(not(bootstrap))]\n+#[unstable(feature = \"generator_trait\", issue = \"43122\")]\n+impl<G: ?Sized + Generator<R> + Unpin, R> Generator<R> for &mut G {\n+    type Yield = G::Yield;\n+    type Return = G::Return;\n+\n+    fn resume(mut self: Pin<&mut Self>, arg: R) -> GeneratorState<Self::Yield, Self::Return> {\n+        G::resume(Pin::new(&mut *self), arg)\n+    }\n+}"}, {"sha": "d28507f6eb2e3b28b5181025037cdc3640f534e8", "filename": "src/librustc/infer/opaque_types/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs?ref=2d8f6389d09bfbaa9a5960c63f6639ddc513c813", "patch": "@@ -744,6 +744,7 @@ where\n \n                 substs.as_generator().return_ty(def_id, self.tcx).visit_with(self);\n                 substs.as_generator().yield_ty(def_id, self.tcx).visit_with(self);\n+                substs.as_generator().resume_ty(def_id, self.tcx).visit_with(self);\n             }\n             _ => {\n                 ty.super_visit_with(self);"}, {"sha": "f6c7174649fe8338333cffdf44155c62811fb407", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=2d8f6389d09bfbaa9a5960c63f6639ddc513c813", "patch": "@@ -1120,6 +1120,8 @@ pub enum TerminatorKind<'tcx> {\n         value: Operand<'tcx>,\n         /// Where to resume to.\n         resume: BasicBlock,\n+        /// The place to store the resume argument in.\n+        resume_arg: Place<'tcx>,\n         /// Cleanup to be done if the generator is dropped at this suspend point.\n         drop: Option<BasicBlock>,\n     },\n@@ -2645,9 +2647,12 @@ impl<'tcx> TypeFoldable<'tcx> for Terminator<'tcx> {\n                 target,\n                 unwind,\n             },\n-            Yield { ref value, resume, drop } => {\n-                Yield { value: value.fold_with(folder), resume: resume, drop: drop }\n-            }\n+            Yield { ref value, resume, ref resume_arg, drop } => Yield {\n+                value: value.fold_with(folder),\n+                resume,\n+                resume_arg: resume_arg.fold_with(folder),\n+                drop,\n+            },\n             Call { ref func, ref args, ref destination, cleanup, from_hir_call } => {\n                 let dest =\n                     destination.as_ref().map(|&(ref loc, dest)| (loc.fold_with(folder), dest));"}, {"sha": "2f094516a35d9e561003333775602be3da75aa05", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=2d8f6389d09bfbaa9a5960c63f6639ddc513c813", "patch": "@@ -516,8 +516,14 @@ macro_rules! make_mir_visitor {\n                     TerminatorKind::Yield {\n                         value,\n                         resume: _,\n+                        resume_arg,\n                         drop: _,\n                     } => {\n+                        self.visit_place(\n+                            resume_arg,\n+                            PlaceContext::MutatingUse(MutatingUseContext::Store),\n+                            source_location,\n+                        );\n                         self.visit_operand(value, source_location);\n                     }\n "}, {"sha": "d4c3518260c602be532f9f99d24c0b6ae756db04", "filename": "src/librustc/traits/util.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Flibrustc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Flibrustc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Futil.rs?ref=2d8f6389d09bfbaa9a5960c63f6639ddc513c813", "patch": "@@ -643,8 +643,10 @@ pub fn generator_trait_ref_and_outputs(\n     self_ty: Ty<'tcx>,\n     sig: ty::PolyGenSig<'tcx>,\n ) -> ty::Binder<(ty::TraitRef<'tcx>, Ty<'tcx>, Ty<'tcx>)> {\n-    let trait_ref =\n-        ty::TraitRef { def_id: fn_trait_def_id, substs: tcx.mk_substs_trait(self_ty, &[]) };\n+    let trait_ref = ty::TraitRef {\n+        def_id: fn_trait_def_id,\n+        substs: tcx.mk_substs_trait(self_ty, &[sig.skip_binder().resume_ty.into()]),\n+    };\n     ty::Binder::bind((trait_ref, sig.skip_binder().yield_ty, sig.skip_binder().return_ty))\n }\n "}, {"sha": "0a5ab790adbab2d97eac1dd160ff7a0dd27d341f", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=2d8f6389d09bfbaa9a5960c63f6639ddc513c813", "patch": "@@ -2350,8 +2350,9 @@ impl<'tcx> ty::Instance<'tcx> {\n                     ]);\n                     let ret_ty = tcx.mk_adt(state_adt_ref, state_substs);\n \n-                    tcx.mk_fn_sig(iter::once(env_ty),\n-                        ret_ty,\n+                    tcx.mk_fn_sig(\n+                        [env_ty, sig.resume_ty].iter(),\n+                        &ret_ty,\n                         false,\n                         hir::Unsafety::Normal,\n                         rustc_target::spec::abi::Abi::Rust"}, {"sha": "9d00d27226320a2407a285c83a648ba419c11ce0", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=2d8f6389d09bfbaa9a5960c63f6639ddc513c813", "patch": "@@ -598,8 +598,8 @@ impl<'a, 'tcx> Lift<'tcx> for ty::adjustment::AutoBorrow<'a> {\n impl<'a, 'tcx> Lift<'tcx> for ty::GenSig<'a> {\n     type Lifted = ty::GenSig<'tcx>;\n     fn lift_to_tcx(&self, tcx: TyCtxt<'tcx>) -> Option<Self::Lifted> {\n-        tcx.lift(&(self.yield_ty, self.return_ty))\n-            .map(|(yield_ty, return_ty)| ty::GenSig { yield_ty, return_ty })\n+        tcx.lift(&(self.resume_ty, self.yield_ty, self.return_ty))\n+            .map(|(resume_ty, yield_ty, return_ty)| ty::GenSig { resume_ty, yield_ty, return_ty })\n     }\n }\n "}, {"sha": "0d30395d2501b93fea4442e223db135c80f89b40", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 32, "deletions": 9, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=2d8f6389d09bfbaa9a5960c63f6639ddc513c813", "patch": "@@ -346,9 +346,17 @@ static_assert_size!(TyKind<'_>, 24);\n /// ## Generators\n ///\n /// Generators are handled similarly in `GeneratorSubsts`.  The set of\n-/// type parameters is similar, but the role of CK and CS are\n-/// different. CK represents the \"yield type\" and CS represents the\n-/// \"return type\" of the generator.\n+/// type parameters is similar, but `CK` and `CS` are replaced by the\n+/// following type parameters:\n+///\n+/// * `GS`: The generator's \"resume type\", which is the type of the\n+///   argument passed to `resume`, and the type of `yield` expressions\n+///   inside the generator.\n+/// * `GY`: The \"yield type\", which is the type of values passed to\n+///   `yield` inside the generator.\n+/// * `GR`: The \"return type\", which is the type of value returned upon\n+///   completion of the generator.\n+/// * `GW`: The \"generator witness\".\n #[derive(Copy, Clone, Debug, TypeFoldable)]\n pub struct ClosureSubsts<'tcx> {\n     /// Lifetime and type parameters from the enclosing function,\n@@ -442,6 +450,7 @@ pub struct GeneratorSubsts<'tcx> {\n }\n \n struct SplitGeneratorSubsts<'tcx> {\n+    resume_ty: Ty<'tcx>,\n     yield_ty: Ty<'tcx>,\n     return_ty: Ty<'tcx>,\n     witness: Ty<'tcx>,\n@@ -453,10 +462,11 @@ impl<'tcx> GeneratorSubsts<'tcx> {\n         let generics = tcx.generics_of(def_id);\n         let parent_len = generics.parent_count;\n         SplitGeneratorSubsts {\n-            yield_ty: self.substs.type_at(parent_len),\n-            return_ty: self.substs.type_at(parent_len + 1),\n-            witness: self.substs.type_at(parent_len + 2),\n-            upvar_kinds: &self.substs[parent_len + 3..],\n+            resume_ty: self.substs.type_at(parent_len),\n+            yield_ty: self.substs.type_at(parent_len + 1),\n+            return_ty: self.substs.type_at(parent_len + 2),\n+            witness: self.substs.type_at(parent_len + 3),\n+            upvar_kinds: &self.substs[parent_len + 4..],\n         }\n     }\n \n@@ -485,6 +495,11 @@ impl<'tcx> GeneratorSubsts<'tcx> {\n         })\n     }\n \n+    /// Returns the type representing the resume type of the generator.\n+    pub fn resume_ty(self, def_id: DefId, tcx: TyCtxt<'_>) -> Ty<'tcx> {\n+        self.split(def_id, tcx).resume_ty\n+    }\n+\n     /// Returns the type representing the yield type of the generator.\n     pub fn yield_ty(self, def_id: DefId, tcx: TyCtxt<'_>) -> Ty<'tcx> {\n         self.split(def_id, tcx).yield_ty\n@@ -505,10 +520,14 @@ impl<'tcx> GeneratorSubsts<'tcx> {\n         ty::Binder::dummy(self.sig(def_id, tcx))\n     }\n \n-    /// Returns the \"generator signature\", which consists of its yield\n+    /// Returns the \"generator signature\", which consists of its resume, yield\n     /// and return types.\n     pub fn sig(self, def_id: DefId, tcx: TyCtxt<'_>) -> GenSig<'tcx> {\n-        ty::GenSig { yield_ty: self.yield_ty(def_id, tcx), return_ty: self.return_ty(def_id, tcx) }\n+        ty::GenSig {\n+            resume_ty: self.resume_ty(def_id, tcx),\n+            yield_ty: self.yield_ty(def_id, tcx),\n+            return_ty: self.return_ty(def_id, tcx),\n+        }\n     }\n }\n \n@@ -1072,13 +1091,17 @@ impl<'tcx> ProjectionTy<'tcx> {\n \n #[derive(Clone, Debug, TypeFoldable)]\n pub struct GenSig<'tcx> {\n+    pub resume_ty: Ty<'tcx>,\n     pub yield_ty: Ty<'tcx>,\n     pub return_ty: Ty<'tcx>,\n }\n \n pub type PolyGenSig<'tcx> = Binder<GenSig<'tcx>>;\n \n impl<'tcx> PolyGenSig<'tcx> {\n+    pub fn resume_ty(&self) -> ty::Binder<Ty<'tcx>> {\n+        self.map_bound_ref(|sig| sig.resume_ty)\n+    }\n     pub fn yield_ty(&self) -> ty::Binder<Ty<'tcx>> {\n         self.map_bound_ref(|sig| sig.yield_ty)\n     }"}, {"sha": "dd3316979f6a2206bcdd209158bdc5ca74272aa8", "filename": "src/librustc_ast_lowering/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Flibrustc_ast_lowering%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Flibrustc_ast_lowering%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fexpr.rs?ref=2d8f6389d09bfbaa9a5960c63f6639ddc513c813", "patch": "@@ -688,12 +688,12 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     ) -> Option<hir::Movability> {\n         match generator_kind {\n             Some(hir::GeneratorKind::Gen) => {\n-                if !decl.inputs.is_empty() {\n+                if decl.inputs.len() > 1 {\n                     struct_span_err!(\n                         self.sess,\n                         fn_decl_span,\n                         E0628,\n-                        \"generators cannot have explicit parameters\"\n+                        \"too many parameters for a generator (expected 0 or 1 parameters)\"\n                     )\n                     .emit();\n                 }"}, {"sha": "dbc54291f4087c25858d77cbefdaf5931d3b0813", "filename": "src/librustc_data_structures/box_region.rs", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Flibrustc_data_structures%2Fbox_region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Flibrustc_data_structures%2Fbox_region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fbox_region.rs?ref=2d8f6389d09bfbaa9a5960c63f6639ddc513c813", "patch": "@@ -25,6 +25,7 @@ pub struct PinnedGenerator<I, A, R> {\n }\n \n impl<I, A, R> PinnedGenerator<I, A, R> {\n+    #[cfg(bootstrap)]\n     pub fn new<T: Generator<Yield = YieldType<I, A>, Return = R> + 'static>(\n         generator: T,\n     ) -> (I, Self) {\n@@ -39,6 +40,22 @@ impl<I, A, R> PinnedGenerator<I, A, R> {\n         (init, result)\n     }\n \n+    #[cfg(not(bootstrap))]\n+    pub fn new<T: Generator<Yield = YieldType<I, A>, Return = R> + 'static>(\n+        generator: T,\n+    ) -> (I, Self) {\n+        let mut result = PinnedGenerator { generator: Box::pin(generator) };\n+\n+        // Run it to the first yield to set it up\n+        let init = match Pin::new(&mut result.generator).resume(()) {\n+            GeneratorState::Yielded(YieldType::Initial(y)) => y,\n+            _ => panic!(),\n+        };\n+\n+        (init, result)\n+    }\n+\n+    #[cfg(bootstrap)]\n     pub unsafe fn access(&mut self, closure: *mut dyn FnMut()) {\n         BOX_REGION_ARG.with(|i| {\n             i.set(Action::Access(AccessAction(closure)));\n@@ -50,13 +67,35 @@ impl<I, A, R> PinnedGenerator<I, A, R> {\n         }\n     }\n \n+    #[cfg(not(bootstrap))]\n+    pub unsafe fn access(&mut self, closure: *mut dyn FnMut()) {\n+        BOX_REGION_ARG.with(|i| {\n+            i.set(Action::Access(AccessAction(closure)));\n+        });\n+\n+        // Call the generator, which in turn will call the closure in BOX_REGION_ARG\n+        if let GeneratorState::Complete(_) = Pin::new(&mut self.generator).resume(()) {\n+            panic!()\n+        }\n+    }\n+\n+    #[cfg(bootstrap)]\n     pub fn complete(&mut self) -> R {\n         // Tell the generator we want it to complete, consuming it and yielding a result\n         BOX_REGION_ARG.with(|i| i.set(Action::Complete));\n \n         let result = Pin::new(&mut self.generator).resume();\n         if let GeneratorState::Complete(r) = result { r } else { panic!() }\n     }\n+\n+    #[cfg(not(bootstrap))]\n+    pub fn complete(&mut self) -> R {\n+        // Tell the generator we want it to complete, consuming it and yielding a result\n+        BOX_REGION_ARG.with(|i| i.set(Action::Complete));\n+\n+        let result = Pin::new(&mut self.generator).resume(());\n+        if let GeneratorState::Complete(r) = result { r } else { panic!() }\n+    }\n }\n \n #[derive(PartialEq)]"}, {"sha": "cc6e03d1ca70f9ff0d56752faabb96899c349b57", "filename": "src/librustc_error_codes/error_codes/E0626.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Flibrustc_error_codes%2Ferror_codes%2FE0626.md", "raw_url": "https://github.com/rust-lang/rust/raw/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Flibrustc_error_codes%2Ferror_codes%2FE0626.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0626.md?ref=2d8f6389d09bfbaa9a5960c63f6639ddc513c813", "patch": "@@ -12,7 +12,7 @@ let mut b = || {\n     yield (); // ...is still in scope here, when the yield occurs.\n     println!(\"{}\", a);\n };\n-Pin::new(&mut b).resume();\n+Pin::new(&mut b).resume(());\n ```\n \n At present, it is not permitted to have a yield that occurs while a\n@@ -31,7 +31,7 @@ let mut b = || {\n     yield ();\n     println!(\"{}\", a);\n };\n-Pin::new(&mut b).resume();\n+Pin::new(&mut b).resume(());\n ```\n \n This is a very simple case, of course. In more complex cases, we may\n@@ -50,7 +50,7 @@ let mut b = || {\n     yield x; // ...when this yield occurs.\n   }\n };\n-Pin::new(&mut b).resume();\n+Pin::new(&mut b).resume(());\n ```\n \n Such cases can sometimes be resolved by iterating \"by value\" (or using\n@@ -66,7 +66,7 @@ let mut b = || {\n     yield x; // <-- Now yield is OK.\n   }\n };\n-Pin::new(&mut b).resume();\n+Pin::new(&mut b).resume(());\n ```\n \n If taking ownership is not an option, using indices can work too:\n@@ -83,7 +83,7 @@ let mut b = || {\n     yield x; // <-- Now yield is OK.\n   }\n };\n-Pin::new(&mut b).resume();\n+Pin::new(&mut b).resume(());\n \n // (*) -- Unfortunately, these temporaries are currently required.\n // See <https://github.com/rust-lang/rust/issues/43122>."}, {"sha": "392f164d3148c49434e54a5cd7f4637712dc8bed", "filename": "src/librustc_mir/borrow_check/invalidation.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Flibrustc_mir%2Fborrow_check%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Flibrustc_mir%2Fborrow_check%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Finvalidation.rs?ref=2d8f6389d09bfbaa9a5960c63f6639ddc513c813", "patch": "@@ -159,7 +159,7 @@ impl<'cx, 'tcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx> {\n                     self.consume_operand(location, index);\n                 }\n             }\n-            TerminatorKind::Yield { ref value, resume, drop: _ } => {\n+            TerminatorKind::Yield { ref value, resume, resume_arg, drop: _ } => {\n                 self.consume_operand(location, value);\n \n                 // Invalidate all borrows of local places\n@@ -170,6 +170,8 @@ impl<'cx, 'tcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx> {\n                         self.all_facts.invalidates.push((resume, i));\n                     }\n                 }\n+\n+                self.mutate_place(location, resume_arg, Deep, JustWrite);\n             }\n             TerminatorKind::Resume | TerminatorKind::Return | TerminatorKind::GeneratorDrop => {\n                 // Invalidate all borrows of local places"}, {"sha": "e528159fcef17d4a373db566c3bd5095fab56e71", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=2d8f6389d09bfbaa9a5960c63f6639ddc513c813", "patch": "@@ -684,7 +684,7 @@ impl<'cx, 'tcx> DataflowResultsConsumer<'cx, 'tcx> for MirBorrowckCtxt<'cx, 'tcx\n                 }\n             }\n \n-            TerminatorKind::Yield { ref value, resume: _, drop: _ } => {\n+            TerminatorKind::Yield { ref value, resume: _, ref resume_arg, drop: _ } => {\n                 self.consume_operand(loc, (value, span), flow_state);\n \n                 if self.movable_generator {\n@@ -697,6 +697,8 @@ impl<'cx, 'tcx> DataflowResultsConsumer<'cx, 'tcx> for MirBorrowckCtxt<'cx, 'tcx\n                         }\n                     });\n                 }\n+\n+                self.mutate_place(loc, (resume_arg, span), Deep, JustWrite, flow_state);\n             }\n \n             TerminatorKind::Resume | TerminatorKind::Return | TerminatorKind::GeneratorDrop => {"}, {"sha": "f6e3ca2f80900d2a555e386621bbca4d8f44d6bf", "filename": "src/librustc_mir/borrow_check/universal_regions.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Flibrustc_mir%2Fborrow_check%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Flibrustc_mir%2Fborrow_check%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Funiversal_regions.rs?ref=2d8f6389d09bfbaa9a5960c63f6639ddc513c813", "patch": "@@ -581,9 +581,11 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n \n             DefiningTy::Generator(def_id, substs, movability) => {\n                 assert_eq!(self.mir_def_id, def_id);\n+                let resume_ty = substs.as_generator().resume_ty(def_id, tcx);\n                 let output = substs.as_generator().return_ty(def_id, tcx);\n                 let generator_ty = tcx.mk_generator(def_id, substs, movability);\n-                let inputs_and_output = self.infcx.tcx.intern_type_list(&[generator_ty, output]);\n+                let inputs_and_output =\n+                    self.infcx.tcx.intern_type_list(&[generator_ty, resume_ty, output]);\n                 ty::Binder::dummy(inputs_and_output)\n             }\n "}, {"sha": "040c13e8210ea056bc8eb23219d8744740ecbd94", "filename": "src/librustc_mir/dataflow/impls/storage_liveness.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fstorage_liveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fstorage_liveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fstorage_liveness.rs?ref=2d8f6389d09bfbaa9a5960c63f6639ddc513c813", "patch": "@@ -31,10 +31,12 @@ impl<'a, 'tcx> BitDenotation<'tcx> for MaybeStorageLive<'a, 'tcx> {\n         self.body.local_decls.len()\n     }\n \n-    fn start_block_effect(&self, _on_entry: &mut BitSet<Local>) {\n-        // Nothing is live on function entry (generators only have a self\n-        // argument, and we don't care about that)\n-        assert_eq!(1, self.body.arg_count);\n+    fn start_block_effect(&self, on_entry: &mut BitSet<Local>) {\n+        // The resume argument is live on function entry (we don't care about\n+        // the `self` argument)\n+        for arg in self.body.args_iter().skip(1) {\n+            on_entry.insert(arg);\n+        }\n     }\n \n     fn statement_effect(&self, trans: &mut GenKillSet<Local>, loc: Location) {\n@@ -100,10 +102,12 @@ impl<'mir, 'tcx> BitDenotation<'tcx> for RequiresStorage<'mir, 'tcx> {\n         self.body.local_decls.len()\n     }\n \n-    fn start_block_effect(&self, _sets: &mut BitSet<Local>) {\n-        // Nothing is live on function entry (generators only have a self\n-        // argument, and we don't care about that)\n-        assert_eq!(1, self.body.arg_count);\n+    fn start_block_effect(&self, on_entry: &mut BitSet<Local>) {\n+        // The resume argument is live on function entry (we don't care about\n+        // the `self` argument)\n+        for arg in self.body.args_iter().skip(1) {\n+            on_entry.insert(arg);\n+        }\n     }\n \n     fn before_statement_effect(&self, sets: &mut GenKillSet<Self::Idx>, loc: Location) {"}, {"sha": "6f8caca5e21ef1125ee66f2dfd25b798ac2f7542", "filename": "src/librustc_mir/dataflow/move_paths/builder.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs?ref=2d8f6389d09bfbaa9a5960c63f6639ddc513c813", "patch": "@@ -380,7 +380,9 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n                 self.gather_operand(discr);\n             }\n \n-            TerminatorKind::Yield { ref value, .. } => {\n+            TerminatorKind::Yield { ref value, resume_arg: ref place, .. } => {\n+                self.create_move_path(place);\n+                self.gather_init(place.as_ref(), InitKind::Deep);\n                 self.gather_operand(value);\n             }\n "}, {"sha": "a6fc65731780a506037e4b26c446cd3b8a4c8b03", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 94, "deletions": 26, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=2d8f6389d09bfbaa9a5960c63f6639ddc513c813", "patch": "@@ -192,9 +192,10 @@ const RETURNED: usize = GeneratorSubsts::RETURNED;\n /// Generator has been poisoned\n const POISONED: usize = GeneratorSubsts::POISONED;\n \n-struct SuspensionPoint {\n+struct SuspensionPoint<'tcx> {\n     state: usize,\n     resume: BasicBlock,\n+    resume_arg: Place<'tcx>,\n     drop: Option<BasicBlock>,\n     storage_liveness: liveness::LiveVarSet,\n }\n@@ -216,7 +217,7 @@ struct TransformVisitor<'tcx> {\n     storage_liveness: FxHashMap<BasicBlock, liveness::LiveVarSet>,\n \n     // A list of suspension points, generated during the transform\n-    suspension_points: Vec<SuspensionPoint>,\n+    suspension_points: Vec<SuspensionPoint<'tcx>>,\n \n     // The original RETURN_PLACE local\n     new_ret_local: Local,\n@@ -303,8 +304,8 @@ impl MutVisitor<'tcx> for TransformVisitor<'tcx> {\n                 Operand::Move(Place::from(self.new_ret_local)),\n                 None,\n             )),\n-            TerminatorKind::Yield { ref value, resume, drop } => {\n-                Some((VariantIdx::new(0), Some(resume), value.clone(), drop))\n+            TerminatorKind::Yield { ref value, resume, resume_arg, drop } => {\n+                Some((VariantIdx::new(0), Some((resume, resume_arg)), value.clone(), drop))\n             }\n             _ => None,\n         };\n@@ -319,13 +320,14 @@ impl MutVisitor<'tcx> for TransformVisitor<'tcx> {\n                     self.make_state(state_idx, v),\n                 )),\n             });\n-            let state = if let Some(resume) = resume {\n+            let state = if let Some((resume, resume_arg)) = resume {\n                 // Yield\n                 let state = 3 + self.suspension_points.len();\n \n                 self.suspension_points.push(SuspensionPoint {\n                     state,\n                     resume,\n+                    resume_arg,\n                     drop,\n                     storage_liveness: self.storage_liveness.get(&block).unwrap().clone(),\n                 });\n@@ -378,28 +380,35 @@ fn make_generator_state_argument_pinned<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body\n     PinArgVisitor { ref_gen_ty, tcx }.visit_body(body);\n }\n \n-fn replace_result_variable<'tcx>(\n-    ret_ty: Ty<'tcx>,\n+/// Allocates a new local and replaces all references of `local` with it. Returns the new local.\n+///\n+/// `local` will be changed to a new local decl with type `ty`.\n+///\n+/// Note that the new local will be uninitialized. It is the caller's responsibility to assign some\n+/// valid value to it before its first use.\n+fn replace_local<'tcx>(\n+    local: Local,\n+    ty: Ty<'tcx>,\n     body: &mut BodyAndCache<'tcx>,\n     tcx: TyCtxt<'tcx>,\n ) -> Local {\n     let source_info = source_info(body);\n-    let new_ret = LocalDecl {\n+    let new_decl = LocalDecl {\n         mutability: Mutability::Mut,\n-        ty: ret_ty,\n+        ty,\n         user_ty: UserTypeProjections::none(),\n         source_info,\n         internal: false,\n         is_block_tail: None,\n         local_info: LocalInfo::Other,\n     };\n-    let new_ret_local = Local::new(body.local_decls.len());\n-    body.local_decls.push(new_ret);\n-    body.local_decls.swap(RETURN_PLACE, new_ret_local);\n+    let new_local = Local::new(body.local_decls.len());\n+    body.local_decls.push(new_decl);\n+    body.local_decls.swap(local, new_local);\n \n-    RenameLocalVisitor { from: RETURN_PLACE, to: new_ret_local, tcx }.visit_body(body);\n+    RenameLocalVisitor { from: local, to: new_local, tcx }.visit_body(body);\n \n-    new_ret_local\n+    new_local\n }\n \n struct StorageIgnored(liveness::LiveVarSet);\n@@ -792,6 +801,10 @@ fn compute_layout<'tcx>(\n     (remap, layout, storage_liveness)\n }\n \n+/// Replaces the entry point of `body` with a block that switches on the generator discriminant and\n+/// dispatches to blocks according to `cases`.\n+///\n+/// After this function, the former entry point of the function will be bb1.\n fn insert_switch<'tcx>(\n     body: &mut BodyAndCache<'tcx>,\n     cases: Vec<(usize, BasicBlock)>,\n@@ -885,10 +898,11 @@ fn create_generator_drop_shim<'tcx>(\n     drop_clean: BasicBlock,\n ) -> BodyAndCache<'tcx> {\n     let mut body = body.clone();\n+    body.arg_count = 1; // make sure the resume argument is not included here\n \n     let source_info = source_info(&body);\n \n-    let mut cases = create_cases(&mut body, transform, |point| point.drop);\n+    let mut cases = create_cases(&mut body, transform, Operation::Drop);\n \n     cases.insert(0, (UNRESUMED, drop_clean));\n \n@@ -1006,7 +1020,7 @@ fn create_generator_resume_function<'tcx>(\n         }\n     }\n \n-    let mut cases = create_cases(body, &transform, |point| Some(point.resume));\n+    let mut cases = create_cases(body, &transform, Operation::Resume);\n \n     use rustc::mir::interpret::PanicInfo::{ResumedAfterPanic, ResumedAfterReturn};\n \n@@ -1056,34 +1070,66 @@ fn insert_clean_drop(body: &mut BodyAndCache<'_>) -> BasicBlock {\n     drop_clean\n }\n \n-fn create_cases<'tcx, F>(\n+/// An operation that can be performed on a generator.\n+#[derive(PartialEq, Copy, Clone)]\n+enum Operation {\n+    Resume,\n+    Drop,\n+}\n+\n+impl Operation {\n+    fn target_block(self, point: &SuspensionPoint<'_>) -> Option<BasicBlock> {\n+        match self {\n+            Operation::Resume => Some(point.resume),\n+            Operation::Drop => point.drop,\n+        }\n+    }\n+}\n+\n+fn create_cases<'tcx>(\n     body: &mut BodyAndCache<'tcx>,\n     transform: &TransformVisitor<'tcx>,\n-    target: F,\n-) -> Vec<(usize, BasicBlock)>\n-where\n-    F: Fn(&SuspensionPoint) -> Option<BasicBlock>,\n-{\n+    operation: Operation,\n+) -> Vec<(usize, BasicBlock)> {\n     let source_info = source_info(body);\n \n     transform\n         .suspension_points\n         .iter()\n         .filter_map(|point| {\n             // Find the target for this suspension point, if applicable\n-            target(point).map(|target| {\n+            operation.target_block(point).map(|target| {\n                 let block = BasicBlock::new(body.basic_blocks().len());\n                 let mut statements = Vec::new();\n \n                 // Create StorageLive instructions for locals with live storage\n                 for i in 0..(body.local_decls.len()) {\n+                    if i == 2 {\n+                        // The resume argument is live on function entry. Don't insert a\n+                        // `StorageLive`, or the following `Assign` will read from uninitialized\n+                        // memory.\n+                        continue;\n+                    }\n+\n                     let l = Local::new(i);\n                     if point.storage_liveness.contains(l) && !transform.remap.contains_key(&l) {\n                         statements\n                             .push(Statement { source_info, kind: StatementKind::StorageLive(l) });\n                     }\n                 }\n \n+                if operation == Operation::Resume {\n+                    // Move the resume argument to the destination place of the `Yield` terminator\n+                    let resume_arg = Local::new(2); // 0 = return, 1 = self\n+                    statements.push(Statement {\n+                        source_info,\n+                        kind: StatementKind::Assign(box (\n+                            point.resume_arg,\n+                            Rvalue::Use(Operand::Move(resume_arg.into())),\n+                        )),\n+                    });\n+                }\n+\n                 // Then jump to the real target\n                 body.basic_blocks_mut().push(BasicBlockData {\n                     statements,\n@@ -1138,7 +1184,29 @@ impl<'tcx> MirPass<'tcx> for StateTransform {\n \n         // We rename RETURN_PLACE which has type mir.return_ty to new_ret_local\n         // RETURN_PLACE then is a fresh unused local with type ret_ty.\n-        let new_ret_local = replace_result_variable(ret_ty, body, tcx);\n+        let new_ret_local = replace_local(RETURN_PLACE, ret_ty, body, tcx);\n+\n+        // We also replace the resume argument and insert an `Assign`.\n+        // This is needed because the resume argument `_2` might be live across a `yield`, in which\n+        // case there is no `Assign` to it that the transform can turn into a store to the generator\n+        // state. After the yield the slot in the generator state would then be uninitialized.\n+        let resume_local = Local::new(2);\n+        let new_resume_local =\n+            replace_local(resume_local, body.local_decls[resume_local].ty, body, tcx);\n+\n+        // When first entering the generator, move the resume argument into its new local.\n+        let source_info = source_info(body);\n+        let stmts = &mut body.basic_blocks_mut()[BasicBlock::new(0)].statements;\n+        stmts.insert(\n+            0,\n+            Statement {\n+                source_info,\n+                kind: StatementKind::Assign(box (\n+                    new_resume_local.into(),\n+                    Rvalue::Use(Operand::Move(resume_local.into())),\n+                )),\n+            },\n+        );\n \n         // Extract locals which are live across suspension point into `layout`\n         // `remap` gives a mapping from local indices onto generator struct indices\n@@ -1162,9 +1230,9 @@ impl<'tcx> MirPass<'tcx> for StateTransform {\n         };\n         transform.visit_body(body);\n \n-        // Update our MIR struct to reflect the changed we've made\n+        // Update our MIR struct to reflect the changes we've made\n         body.yield_ty = None;\n-        body.arg_count = 1;\n+        body.arg_count = 2; // self, resume arg\n         body.spread_arg = None;\n         body.generator_layout = Some(layout);\n "}, {"sha": "6f5c5f0dd4c5013b795c7cdd4eea0457235930ec", "filename": "src/librustc_mir_build/build/expr/as_rvalue.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=2d8f6389d09bfbaa9a5960c63f6639ddc513c813", "patch": "@@ -230,18 +230,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 block = unpack!(this.stmt_expr(block, expr, None));\n                 block.and(this.unit_rvalue())\n             }\n-            ExprKind::Yield { value } => {\n-                let value = unpack!(block = this.as_operand(block, scope, value));\n-                let resume = this.cfg.start_new_block();\n-                let cleanup = this.generator_drop_cleanup();\n-                this.cfg.terminate(\n-                    block,\n-                    source_info,\n-                    TerminatorKind::Yield { value: value, resume: resume, drop: cleanup },\n-                );\n-                resume.and(this.unit_rvalue())\n-            }\n-            ExprKind::Literal { .. }\n+            ExprKind::Yield { .. }\n+            | ExprKind::Literal { .. }\n             | ExprKind::StaticRef { .. }\n             | ExprKind::Block { .. }\n             | ExprKind::Match { .. }"}, {"sha": "cc139dee63f92b86100045d40fd406db2764d37c", "filename": "src/librustc_mir_build/build/expr/category.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fcategory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fcategory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fcategory.rs?ref=2d8f6389d09bfbaa9a5960c63f6639ddc513c813", "patch": "@@ -50,6 +50,7 @@ impl Category {\n             | ExprKind::Adt { .. }\n             | ExprKind::Borrow { .. }\n             | ExprKind::AddressOf { .. }\n+            | ExprKind::Yield { .. }\n             | ExprKind::Call { .. } => Some(Category::Rvalue(RvalueFunc::Into)),\n \n             ExprKind::Array { .. }\n@@ -63,7 +64,6 @@ impl Category {\n             | ExprKind::Repeat { .. }\n             | ExprKind::Assign { .. }\n             | ExprKind::AssignOp { .. }\n-            | ExprKind::Yield { .. }\n             | ExprKind::InlineAsm { .. } => Some(Category::Rvalue(RvalueFunc::AsRvalue)),\n \n             ExprKind::Literal { .. } | ExprKind::StaticRef { .. } => Some(Category::Constant),"}, {"sha": "51b0b5bc7cb0b73c320df8bae29c8a8b4b9ea87e", "filename": "src/librustc_mir_build/build/expr/into.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Finto.rs?ref=2d8f6389d09bfbaa9a5960c63f6639ddc513c813", "patch": "@@ -365,6 +365,24 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 block.unit()\n             }\n \n+            ExprKind::Yield { value } => {\n+                let scope = this.local_scope();\n+                let value = unpack!(block = this.as_operand(block, scope, value));\n+                let resume = this.cfg.start_new_block();\n+                let cleanup = this.generator_drop_cleanup();\n+                this.cfg.terminate(\n+                    block,\n+                    source_info,\n+                    TerminatorKind::Yield {\n+                        value,\n+                        resume,\n+                        resume_arg: destination.clone(),\n+                        drop: cleanup,\n+                    },\n+                );\n+                resume.unit()\n+            }\n+\n             // these are the cases that are more naturally handled by some other mode\n             ExprKind::Unary { .. }\n             | ExprKind::Binary { .. }\n@@ -376,8 +394,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             | ExprKind::Tuple { .. }\n             | ExprKind::Closure { .. }\n             | ExprKind::Literal { .. }\n-            | ExprKind::StaticRef { .. }\n-            | ExprKind::Yield { .. } => {\n+            | ExprKind::StaticRef { .. } => {\n                 debug_assert!(match Category::of(&expr.kind).unwrap() {\n                     // should be handled above\n                     Category::Rvalue(RvalueFunc::Into) => false,"}, {"sha": "32b1f2b6e1368d6d060321e6c7d09be3c2bca971", "filename": "src/librustc_mir_build/build/mod.rs", "status": "modified", "additions": 19, "deletions": 9, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs?ref=2d8f6389d09bfbaa9a5960c63f6639ddc513c813", "patch": "@@ -68,28 +68,38 @@ fn mir_build(tcx: TyCtxt<'_>, def_id: DefId) -> BodyAndCache<'_> {\n             let fn_sig = cx.tables().liberated_fn_sigs()[id];\n             let fn_def_id = tcx.hir().local_def_id(id);\n \n+            let safety = match fn_sig.unsafety {\n+                hir::Unsafety::Normal => Safety::Safe,\n+                hir::Unsafety::Unsafe => Safety::FnUnsafe,\n+            };\n+\n+            let body = tcx.hir().body(body_id);\n             let ty = tcx.type_of(fn_def_id);\n             let mut abi = fn_sig.abi;\n             let implicit_argument = match ty.kind {\n                 ty::Closure(..) => {\n                     // HACK(eddyb) Avoid having RustCall on closures,\n                     // as it adds unnecessary (and wrong) auto-tupling.\n                     abi = Abi::Rust;\n-                    Some(ArgInfo(liberated_closure_env_ty(tcx, id, body_id), None, None, None))\n+                    vec![ArgInfo(liberated_closure_env_ty(tcx, id, body_id), None, None, None)]\n                 }\n                 ty::Generator(..) => {\n                     let gen_ty = tcx.body_tables(body_id).node_type(id);\n-                    Some(ArgInfo(gen_ty, None, None, None))\n-                }\n-                _ => None,\n-            };\n \n-            let safety = match fn_sig.unsafety {\n-                hir::Unsafety::Normal => Safety::Safe,\n-                hir::Unsafety::Unsafe => Safety::FnUnsafe,\n+                    // The resume argument may be missing, in that case we need to provide it here.\n+                    // It will always be `()` in this case.\n+                    if body.params.is_empty() {\n+                        vec![\n+                            ArgInfo(gen_ty, None, None, None),\n+                            ArgInfo(tcx.mk_unit(), None, None, None),\n+                        ]\n+                    } else {\n+                        vec![ArgInfo(gen_ty, None, None, None)]\n+                    }\n+                }\n+                _ => vec![],\n             };\n \n-            let body = tcx.hir().body(body_id);\n             let explicit_arguments = body.params.iter().enumerate().map(|(index, arg)| {\n                 let owner_id = tcx.hir().body_owner(body_id);\n                 let opt_ty_info;"}, {"sha": "346d2a931d10b4b6ed068639339a19298ae99a10", "filename": "src/librustc_traits/dropck_outlives.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Flibrustc_traits%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Flibrustc_traits%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fdropck_outlives.rs?ref=2d8f6389d09bfbaa9a5960c63f6639ddc513c813", "patch": "@@ -227,15 +227,16 @@ fn dtorck_constraint_for_ty<'tcx>(\n             // In particular, skipping over `_interior` is safe\n             // because any side-effects from dropping `_interior` can\n             // only take place through references with lifetimes\n-            // derived from lifetimes attached to the upvars, and we\n-            // *do* incorporate the upvars here.\n+            // derived from lifetimes attached to the upvars and resume\n+            // argument, and we *do* incorporate those here.\n \n             constraints.outlives.extend(\n                 substs\n                     .as_generator()\n                     .upvar_tys(def_id, tcx)\n                     .map(|t| -> ty::subst::GenericArg<'tcx> { t.into() }),\n             );\n+            constraints.outlives.push(substs.as_generator().resume_ty(def_id, tcx).into());\n         }\n \n         ty::Adt(def, substs) => {"}, {"sha": "26777b3b0104882c567e248616e1a8142134a61a", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=2d8f6389d09bfbaa9a5960c63f6639ddc513c813", "patch": "@@ -92,8 +92,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 .into(),\n             GenericParamDefKind::Const => span_bug!(expr.span, \"closure has const param\"),\n         });\n-        if let Some(GeneratorTypes { yield_ty, interior, movability }) = generator_types {\n+        if let Some(GeneratorTypes { resume_ty, yield_ty, interior, movability }) = generator_types\n+        {\n             let generator_substs = substs.as_generator();\n+            self.demand_eqtype(\n+                expr.span,\n+                resume_ty,\n+                generator_substs.resume_ty(expr_def_id, self.tcx),\n+            );\n             self.demand_eqtype(\n                 expr.span,\n                 yield_ty,\n@@ -259,8 +265,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 _ => return None,\n             }\n         } else {\n-            // Generators cannot have explicit arguments.\n-            vec![]\n+            // Generators with a `()` resume type may be defined with 0 or 1 explicit arguments,\n+            // else they must have exactly 1 argument. For now though, just give up in this case.\n+            return None;\n         };\n \n         let ret_param_ty = projection.skip_binder().ty;"}, {"sha": "9ce89bd636304ea6a5d404318b882f84582a8416", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=2d8f6389d09bfbaa9a5960c63f6639ddc513c813", "patch": "@@ -1796,16 +1796,19 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         expr: &'tcx hir::Expr<'tcx>,\n         src: &'tcx hir::YieldSource,\n     ) -> Ty<'tcx> {\n-        match self.yield_ty {\n-            Some(ty) => {\n-                self.check_expr_coercable_to_type(&value, ty);\n+        match self.resume_yield_tys {\n+            Some((resume_ty, yield_ty)) => {\n+                self.check_expr_coercable_to_type(&value, yield_ty);\n+\n+                resume_ty\n             }\n             // Given that this `yield` expression was generated as a result of lowering a `.await`,\n             // we know that the yield type must be `()`; however, the context won't contain this\n             // information. Hence, we check the source of the yield expression here and check its\n             // value's type against `()` (this check should always hold).\n             None if src == &hir::YieldSource::Await => {\n                 self.check_expr_coercable_to_type(&value, self.tcx.mk_unit());\n+                self.tcx.mk_unit()\n             }\n             _ => {\n                 struct_span_err!(\n@@ -1815,9 +1818,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     \"yield expression outside of generator literal\"\n                 )\n                 .emit();\n+                self.tcx.mk_unit()\n             }\n         }\n-        self.tcx.mk_unit()\n     }\n }\n "}, {"sha": "0b87d3adcb5bcfc77015869e7f81d2fb3b902b75", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=2d8f6389d09bfbaa9a5960c63f6639ddc513c813", "patch": "@@ -573,7 +573,7 @@ pub struct FnCtxt<'a, 'tcx> {\n     /// First span of a return site that we find. Used in error messages.\n     ret_coercion_span: RefCell<Option<Span>>,\n \n-    yield_ty: Option<Ty<'tcx>>,\n+    resume_yield_tys: Option<(Ty<'tcx>, Ty<'tcx>)>,\n \n     ps: RefCell<UnsafetyState>,\n \n@@ -1251,6 +1251,9 @@ impl<'a, 'tcx> Visitor<'tcx> for GatherLocalsVisitor<'a, 'tcx> {\n /// includes yield), it returns back some information about the yield\n /// points.\n struct GeneratorTypes<'tcx> {\n+    /// Type of generator argument / values returned by `yield`.\n+    resume_ty: Ty<'tcx>,\n+\n     /// Type of value that is yielded.\n     yield_ty: Ty<'tcx>,\n \n@@ -1311,7 +1314,11 @@ fn check_fn<'a, 'tcx>(\n         let yield_ty = fcx\n             .next_ty_var(TypeVariableOrigin { kind: TypeVariableOriginKind::TypeInference, span });\n         fcx.require_type_is_sized(yield_ty, span, traits::SizedYieldType);\n-        fcx.yield_ty = Some(yield_ty);\n+\n+        // Resume type defaults to `()` if the generator has no argument.\n+        let resume_ty = fn_sig.inputs().get(0).map(|ty| *ty).unwrap_or_else(|| tcx.mk_unit());\n+\n+        fcx.resume_yield_tys = Some((resume_ty, yield_ty));\n     }\n \n     let outer_def_id = tcx.closure_base_def_id(hir.local_def_id(fn_id));\n@@ -1364,8 +1371,11 @@ fn check_fn<'a, 'tcx>(\n         let interior = fcx\n             .next_ty_var(TypeVariableOrigin { kind: TypeVariableOriginKind::MiscVariable, span });\n         fcx.deferred_generator_interiors.borrow_mut().push((body.id(), interior, gen_kind));\n+\n+        let (resume_ty, yield_ty) = fcx.resume_yield_tys.unwrap();\n         Some(GeneratorTypes {\n-            yield_ty: fcx.yield_ty.unwrap(),\n+            resume_ty,\n+            yield_ty,\n             interior,\n             movability: can_be_generator.unwrap(),\n         })\n@@ -2767,7 +2777,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             err_count_on_creation: inh.tcx.sess.err_count(),\n             ret_coercion: None,\n             ret_coercion_span: RefCell::new(None),\n-            yield_ty: None,\n+            resume_yield_tys: None,\n             ps: RefCell::new(UnsafetyState::function(hir::Unsafety::Normal, hir::CRATE_HIR_ID)),\n             diverges: Cell::new(Diverges::Maybe),\n             has_errors: Cell::new(false),"}, {"sha": "dc089c9045693e15e3a0583bdcb468efa55b4ebb", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=2d8f6389d09bfbaa9a5960c63f6639ddc513c813", "patch": "@@ -1189,7 +1189,7 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::Generics {\n     // and we don't do that for closures.\n     if let Node::Expr(&hir::Expr { kind: hir::ExprKind::Closure(.., gen), .. }) = node {\n         let dummy_args = if gen.is_some() {\n-            &[\"<yield_ty>\", \"<return_ty>\", \"<witness>\"][..]\n+            &[\"<resume_ty>\", \"<yield_ty>\", \"<return_ty>\", \"<witness>\"][..]\n         } else {\n             &[\"<closure_kind>\", \"<closure_signature>\"][..]\n         };"}, {"sha": "f74c84e6dfd4862f60362a73aeb756b7cd7539ab", "filename": "src/libstd/future.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Flibstd%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Flibstd%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffuture.rs?ref=2d8f6389d09bfbaa9a5960c63f6639ddc513c813", "patch": "@@ -40,7 +40,10 @@ impl<T: Generator<Yield = ()>> Future for GenFuture<T> {\n         // Safe because we're !Unpin + !Drop mapping to a ?Unpin value\n         let gen = unsafe { Pin::map_unchecked_mut(self, |s| &mut s.0) };\n         let _guard = unsafe { set_task_context(cx) };\n-        match gen.resume() {\n+        match gen.resume(\n+            #[cfg(not(bootstrap))]\n+            (),\n+        ) {\n             GeneratorState::Yielded(()) => Poll::Pending,\n             GeneratorState::Complete(x) => Poll::Ready(x),\n         }"}, {"sha": "fd46c1a8b4db74d7ecae2db5f6119236096e1b00", "filename": "src/test/debuginfo/generator-locals.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Ftest%2Fdebuginfo%2Fgenerator-locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Ftest%2Fdebuginfo%2Fgenerator-locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgenerator-locals.rs?ref=2d8f6389d09bfbaa9a5960c63f6639ddc513c813", "patch": "@@ -78,9 +78,9 @@ fn main() {\n         _zzz(); // #break\n         a = c;\n     };\n-    Pin::new(&mut b).resume();\n-    Pin::new(&mut b).resume();\n-    Pin::new(&mut b).resume();\n+    Pin::new(&mut b).resume(());\n+    Pin::new(&mut b).resume(());\n+    Pin::new(&mut b).resume(());\n     _zzz(); // #break\n }\n "}, {"sha": "f19a3c71dd8d282f6b8603ce372c4efd5db686cf", "filename": "src/test/debuginfo/generator-objects.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Ftest%2Fdebuginfo%2Fgenerator-objects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Ftest%2Fdebuginfo%2Fgenerator-objects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgenerator-objects.rs?ref=2d8f6389d09bfbaa9a5960c63f6639ddc513c813", "patch": "@@ -57,11 +57,11 @@ fn main() {\n         println!(\"{} {} {}\", a, c, d);\n     };\n     _zzz(); // #break\n-    Pin::new(&mut b).resume();\n+    Pin::new(&mut b).resume(());\n     _zzz(); // #break\n-    Pin::new(&mut b).resume();\n+    Pin::new(&mut b).resume(());\n     _zzz(); // #break\n-    Pin::new(&mut b).resume();\n+    Pin::new(&mut b).resume(());\n     _zzz(); // #break\n }\n "}, {"sha": "4de88e9dae62bc5269f5ead15a56a39d301c4f86", "filename": "src/test/debuginfo/issue-57822.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Ftest%2Fdebuginfo%2Fissue-57822.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Ftest%2Fdebuginfo%2Fissue-57822.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fissue-57822.rs?ref=2d8f6389d09bfbaa9a5960c63f6639ddc513c813", "patch": "@@ -45,7 +45,7 @@ fn main() {\n         yield;\n     };\n     let mut b = move || {\n-        Pin::new(&mut a).resume();\n+        Pin::new(&mut a).resume(());\n         yield;\n     };\n "}, {"sha": "278dc49c9260526b19b8ffd26398d8217e7e93d1", "filename": "src/test/mir-opt/generator-drop-cleanup.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Ftest%2Fmir-opt%2Fgenerator-drop-cleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Ftest%2Fmir-opt%2Fgenerator-drop-cleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgenerator-drop-cleanup.rs?ref=2d8f6389d09bfbaa9a5960c63f6639ddc513c813", "patch": "@@ -13,12 +13,12 @@ fn main() {\n \n // START rustc.main-{{closure}}.generator_drop.0.mir\n // bb0: {\n-//     _5 = discriminant((*_1));\n-//     switchInt(move _5) -> [0u32: bb4, 3u32: bb7, otherwise: bb8];\n+//     _7 = discriminant((*_1));\n+//     switchInt(move _7) -> [0u32: bb4, 3u32: bb7, otherwise: bb8];\n // }\n // bb1: {\n+//     StorageDead(_4);\n //     StorageDead(_3);\n-//     StorageDead(_2);\n //     goto -> bb5;\n // }\n // bb2: {\n@@ -37,8 +37,8 @@ fn main() {\n //     goto -> bb3;\n // }\n // bb7: {\n-//     StorageLive(_2);\n //     StorageLive(_3);\n+//     StorageLive(_4);\n //     goto -> bb1;\n // }\n // bb8: {"}, {"sha": "4442fa5f52126457b6c4d88312c2de8fef0aa12a", "filename": "src/test/mir-opt/generator-storage-dead-unwind.rs", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Ftest%2Fmir-opt%2Fgenerator-storage-dead-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Ftest%2Fmir-opt%2Fgenerator-storage-dead-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgenerator-storage-dead-unwind.rs?ref=2d8f6389d09bfbaa9a5960c63f6639ddc513c813", "patch": "@@ -31,81 +31,81 @@ fn main() {\n \n // START rustc.main-{{closure}}.StateTransform.before.mir\n // ...\n-// let _2: Foo;\n+// let _3: Foo;\n // ...\n-// let mut _7: Foo;\n+// let mut _8: Foo;\n // ...\n-// let mut _9: Bar;\n+// let mut _10: Bar;\n // scope 1 {\n-//     debug a => _2;\n-//     let _3: Bar;\n+//     debug a => _3;\n+//     let _4: Bar;\n //     scope 2 {\n-//         debug b => _3;\n+//         debug b => _4;\n //     }\n // }\n // bb0: {\n-//     StorageLive(_2);\n-//     _2 = Foo(const 5i32,);\n //     StorageLive(_3);\n-//     _3 = Bar(const 6i32,);\n+//     _3 = Foo(const 5i32,);\n+//     StorageLive(_4);\n+//     _4 = Bar(const 6i32,);\n //     ...\n-//     _1 = suspend(move _5) -> [resume: bb2, drop: bb4];\n+//     _1 = suspend(move _6) -> [resume: bb2, drop: bb4];\n // }\n // bb1 (cleanup): {\n //     resume;\n // }\n // bb2: {\n //     ...\n-//     StorageLive(_6);\n //     StorageLive(_7);\n-//     _7 = move _2;\n-//     _6 = const take::<Foo>(move _7) -> [return: bb7, unwind: bb9];\n+//     StorageLive(_8);\n+//     _8 = move _3;\n+//     _7 = const take::<Foo>(move _8) -> [return: bb7, unwind: bb9];\n // }\n // bb3 (cleanup): {\n-//     StorageDead(_2);\n+//     StorageDead(_3);\n //     drop(_1) -> bb1;\n // }\n // bb4: {\n //     ...\n-//     StorageDead(_3);\n-//     drop(_2) -> [return: bb5, unwind: bb3];\n+//     StorageDead(_4);\n+//     drop(_3) -> [return: bb5, unwind: bb3];\n // }\n // bb5: {\n-//     StorageDead(_2);\n+//     StorageDead(_3);\n //     drop(_1) -> [return: bb6, unwind: bb1];\n // }\n // bb6: {\n //     generator_drop;\n // }\n // bb7: {\n+//     StorageDead(_8);\n //     StorageDead(_7);\n-//     StorageDead(_6);\n-//     StorageLive(_8);\n //     StorageLive(_9);\n-//     _9 = move _3;\n-//     _8 = const take::<Bar>(move _9) -> [return: bb10, unwind: bb11];\n+//     StorageLive(_10);\n+//     _10 = move _4;\n+//     _9 = const take::<Bar>(move _10) -> [return: bb10, unwind: bb11];\n // }\n // bb8 (cleanup): {\n+//     StorageDead(_4);\n //     StorageDead(_3);\n-//     StorageDead(_2);\n //     drop(_1) -> bb1;\n // }\n // bb9 (cleanup): {\n+//     StorageDead(_8);\n //     StorageDead(_7);\n-//     StorageDead(_6);\n //     goto -> bb8;\n // }\n // bb10: {\n+//     StorageDead(_10);\n //     StorageDead(_9);\n-//     StorageDead(_8);\n //     ...\n+//     StorageDead(_4);\n //     StorageDead(_3);\n-//     StorageDead(_2);\n //     drop(_1) -> [return: bb12, unwind: bb1];\n // }\n // bb11 (cleanup): {\n+//     StorageDead(_10);\n //     StorageDead(_9);\n-//     StorageDead(_8);\n //     goto -> bb8;\n // }\n // bb12: {"}, {"sha": "1a7c2e80629012ecae140f87c54a24cbd6078304", "filename": "src/test/run-fail/generator-resume-after-panic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Ftest%2Frun-fail%2Fgenerator-resume-after-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Ftest%2Frun-fail%2Fgenerator-resume-after-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fgenerator-resume-after-panic.rs?ref=2d8f6389d09bfbaa9a5960c63f6639ddc513c813", "patch": "@@ -16,7 +16,7 @@ fn main() {\n         yield;\n     };\n     panic::catch_unwind(panic::AssertUnwindSafe(|| {\n-        let x = Pin::new(&mut g).resume();\n+        let x = Pin::new(&mut g).resume(());\n     }));\n-    Pin::new(&mut g).resume();\n+    Pin::new(&mut g).resume(());\n }"}, {"sha": "9fc5667d6847e01a42887b1607b48d8e724a7cf5", "filename": "src/test/ui/async-await/issues/issue-65419/issue-65419-generator-resume-after-completion.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65419%2Fissue-65419-generator-resume-after-completion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65419%2Fissue-65419-generator-resume-after-completion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65419%2Fissue-65419-generator-resume-after-completion.rs?ref=2d8f6389d09bfbaa9a5960c63f6639ddc513c813", "patch": "@@ -19,7 +19,7 @@ fn main() {\n     let mut g = || {\n         yield;\n     };\n-    Pin::new(&mut g).resume(); // Yields once.\n-    Pin::new(&mut g).resume(); // Completes here.\n-    Pin::new(&mut g).resume(); // Panics here.\n+    Pin::new(&mut g).resume(()); // Yields once.\n+    Pin::new(&mut g).resume(()); // Completes here.\n+    Pin::new(&mut g).resume(()); // Panics here.\n }"}, {"sha": "659e520d4cd1289f71e6ec7c27edce4aadff1119", "filename": "src/test/ui/drop/dynamic-drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop.rs?ref=2d8f6389d09bfbaa9a5960c63f6639ddc513c813", "patch": "@@ -184,7 +184,7 @@ fn generator(a: &Allocator, run_count: usize) {\n          );\n     };\n     for _ in 0..run_count {\n-        Pin::new(&mut gen).resume();\n+        Pin::new(&mut gen).resume(());\n     }\n }\n "}, {"sha": "30788e3c1864bb1935c4ae4a1ee029b74c6e56a6", "filename": "src/test/ui/generator-yielding-or-returning-itself.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Ftest%2Fui%2Fgenerator-yielding-or-returning-itself.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Ftest%2Fui%2Fgenerator-yielding-or-returning-itself.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator-yielding-or-returning-itself.rs?ref=2d8f6389d09bfbaa9a5960c63f6639ddc513c813", "patch": "@@ -13,7 +13,7 @@ pub fn want_cyclic_generator_return<T>(_: T)\n \n fn supply_cyclic_generator_return() {\n     want_cyclic_generator_return(|| {\n-        //~^ ERROR closure/generator type that references itself\n+        //~^ ERROR type mismatch\n         if false { yield None.unwrap(); }\n         None.unwrap()\n     })"}, {"sha": "1572219cf4ac8d655c6ec95efa622fc41e72f2c3", "filename": "src/test/ui/generator-yielding-or-returning-itself.stderr", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Ftest%2Fui%2Fgenerator-yielding-or-returning-itself.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Ftest%2Fui%2Fgenerator-yielding-or-returning-itself.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator-yielding-or-returning-itself.stderr?ref=2d8f6389d09bfbaa9a5960c63f6639ddc513c813", "patch": "@@ -1,13 +1,13 @@\n-error[E0644]: closure/generator type that references itself\n-  --> $DIR/generator-yielding-or-returning-itself.rs:15:34\n+error[E0271]: type mismatch resolving `<[generator@$DIR/generator-yielding-or-returning-itself.rs:15:34: 19:6 _] as std::ops::Generator>::Return == [generator@$DIR/generator-yielding-or-returning-itself.rs:15:34: 19:6 _]`\n+  --> $DIR/generator-yielding-or-returning-itself.rs:15:5\n    |\n-LL |       want_cyclic_generator_return(|| {\n-   |  __________________________________^\n-LL | |\n-LL | |         if false { yield None.unwrap(); }\n-LL | |         None.unwrap()\n-LL | |     })\n-   | |_____^ cyclic type of infinite size\n+LL | pub fn want_cyclic_generator_return<T>(_: T)\n+   |        ----------------------------\n+LL |     where T: Generator<Yield = (), Return = T>\n+   |                                    ---------- required by this bound in `want_cyclic_generator_return`\n+...\n+LL |     want_cyclic_generator_return(|| {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cyclic type of infinite size\n    |\n    = note: closures cannot capture themselves or take themselves as argument;\n            this error may be the result of a recent compiler bug-fix,\n@@ -30,5 +30,4 @@ LL |     want_cyclic_generator_yield(|| {\n \n error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0271, E0644.\n-For more information about an error, try `rustc --explain E0271`.\n+For more information about this error, try `rustc --explain E0271`."}, {"sha": "2dd5ea675233ccbeddf4c21e149355fe0e124b86", "filename": "src/test/ui/generator/auxiliary/xcrate-reachable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Ftest%2Fui%2Fgenerator%2Fauxiliary%2Fxcrate-reachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Ftest%2Fui%2Fgenerator%2Fauxiliary%2Fxcrate-reachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fauxiliary%2Fxcrate-reachable.rs?ref=2d8f6389d09bfbaa9a5960c63f6639ddc513c813", "patch": "@@ -6,7 +6,7 @@ fn msg() -> u32 {\n     0\n }\n \n-pub fn foo() -> impl Generator<Yield=(), Return=u32> {\n+pub fn foo() -> impl Generator<(), Yield=(), Return=u32> {\n     || {\n         yield;\n         return msg();"}, {"sha": "d07abd0918c7860dabe18800bd3421202b9c1c8d", "filename": "src/test/ui/generator/auxiliary/xcrate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Ftest%2Fui%2Fgenerator%2Fauxiliary%2Fxcrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Ftest%2Fui%2Fgenerator%2Fauxiliary%2Fxcrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fauxiliary%2Fxcrate.rs?ref=2d8f6389d09bfbaa9a5960c63f6639ddc513c813", "patch": "@@ -3,15 +3,15 @@\n use std::marker::Unpin;\n use std::ops::Generator;\n \n-pub fn foo() -> impl Generator<Yield = (), Return = ()> {\n+pub fn foo() -> impl Generator<(), Yield = (), Return = ()> {\n     || {\n         if false {\n             yield;\n         }\n     }\n }\n \n-pub fn bar<T: 'static>(t: T) -> Box<Generator<Yield = T, Return = ()> + Unpin> {\n+pub fn bar<T: 'static>(t: T) -> Box<Generator<(), Yield = T, Return = ()> + Unpin> {\n     Box::new(|| {\n         yield t;\n     })"}, {"sha": "d36592583cdc598c70fe0f87b6f9c149d5b5c881", "filename": "src/test/ui/generator/borrowing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Ftest%2Fui%2Fgenerator%2Fborrowing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Ftest%2Fui%2Fgenerator%2Fborrowing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fborrowing.rs?ref=2d8f6389d09bfbaa9a5960c63f6639ddc513c813", "patch": "@@ -6,7 +6,7 @@ use std::pin::Pin;\n fn main() {\n     let _b = {\n         let a = 3;\n-        Pin::new(&mut || yield &a).resume()\n+        Pin::new(&mut || yield &a).resume(())\n         //~^ ERROR: `a` does not live long enough\n     };\n "}, {"sha": "83987e19839ce81ca82b2d90c3303ece764af3fc", "filename": "src/test/ui/generator/borrowing.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Ftest%2Fui%2Fgenerator%2Fborrowing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Ftest%2Fui%2Fgenerator%2Fborrowing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fborrowing.stderr?ref=2d8f6389d09bfbaa9a5960c63f6639ddc513c813", "patch": "@@ -1,7 +1,7 @@\n error[E0597]: `a` does not live long enough\n   --> $DIR/borrowing.rs:9:33\n    |\n-LL |         Pin::new(&mut || yield &a).resume()\n+LL |         Pin::new(&mut || yield &a).resume(())\n    |                       ----------^\n    |                       |         |\n    |                       |         borrowed value does not live long enough"}, {"sha": "990d94e6efc1bb5245bef77147675f7b34ab945d", "filename": "src/test/ui/generator/conditional-drop.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Ftest%2Fui%2Fgenerator%2Fconditional-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Ftest%2Fui%2Fgenerator%2Fconditional-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fconditional-drop.rs?ref=2d8f6389d09bfbaa9a5960c63f6639ddc513c813", "patch": "@@ -35,9 +35,9 @@ fn t1() {\n     };\n \n     let n = A.load(Ordering::SeqCst);\n-    Pin::new(&mut a).resume();\n+    Pin::new(&mut a).resume(());\n     assert_eq!(A.load(Ordering::SeqCst), n + 1);\n-    Pin::new(&mut a).resume();\n+    Pin::new(&mut a).resume(());\n     assert_eq!(A.load(Ordering::SeqCst), n + 1);\n }\n \n@@ -51,8 +51,8 @@ fn t2() {\n     };\n \n     let n = A.load(Ordering::SeqCst);\n-    Pin::new(&mut a).resume();\n+    Pin::new(&mut a).resume(());\n     assert_eq!(A.load(Ordering::SeqCst), n);\n-    Pin::new(&mut a).resume();\n+    Pin::new(&mut a).resume(());\n     assert_eq!(A.load(Ordering::SeqCst), n + 1);\n }"}, {"sha": "9d4c217b76ed783bae301916e4585f5d4f6077a2", "filename": "src/test/ui/generator/control-flow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Ftest%2Fui%2Fgenerator%2Fcontrol-flow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Ftest%2Fui%2Fgenerator%2Fcontrol-flow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fcontrol-flow.rs?ref=2d8f6389d09bfbaa9a5960c63f6639ddc513c813", "patch": "@@ -7,10 +7,10 @@ use std::ops::{GeneratorState, Generator};\n use std::pin::Pin;\n \n fn finish<T>(mut amt: usize, mut t: T) -> T::Return\n-    where T: Generator<Yield = ()> + Unpin,\n+    where T: Generator<(), Yield = ()> + Unpin,\n {\n     loop {\n-        match Pin::new(&mut t).resume() {\n+        match Pin::new(&mut t).resume(()) {\n             GeneratorState::Yielded(()) => amt = amt.checked_sub(1).unwrap(),\n             GeneratorState::Complete(ret) => {\n                 assert_eq!(amt, 0);"}, {"sha": "a9a50a122a19cee290bbfed4eeaa1acc25f2f9ad", "filename": "src/test/ui/generator/drop-and-replace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Ftest%2Fui%2Fgenerator%2Fdrop-and-replace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Ftest%2Fui%2Fgenerator%2Fdrop-and-replace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fdrop-and-replace.rs?ref=2d8f6389d09bfbaa9a5960c63f6639ddc513c813", "patch": "@@ -37,7 +37,7 @@ fn main() {\n     };\n \n     loop {\n-        match Pin::new(&mut a).resume() {\n+        match Pin::new(&mut a).resume(()) {\n             GeneratorState::Complete(()) => break,\n             _ => (),\n         }"}, {"sha": "7ba711881045dd25c521f67934e492fcdf3c97ea", "filename": "src/test/ui/generator/drop-env.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Ftest%2Fui%2Fgenerator%2Fdrop-env.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Ftest%2Fui%2Fgenerator%2Fdrop-env.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fdrop-env.rs?ref=2d8f6389d09bfbaa9a5960c63f6639ddc513c813", "patch": "@@ -30,7 +30,7 @@ fn t1() {\n     };\n \n     let n = A.load(Ordering::SeqCst);\n-    drop(Pin::new(&mut foo).resume());\n+    drop(Pin::new(&mut foo).resume(()));\n     assert_eq!(A.load(Ordering::SeqCst), n);\n     drop(foo);\n     assert_eq!(A.load(Ordering::SeqCst), n + 1);\n@@ -43,7 +43,7 @@ fn t2() {\n     };\n \n     let n = A.load(Ordering::SeqCst);\n-    drop(Pin::new(&mut foo).resume());\n+    drop(Pin::new(&mut foo).resume(()));\n     assert_eq!(A.load(Ordering::SeqCst), n + 1);\n     drop(foo);\n     assert_eq!(A.load(Ordering::SeqCst), n + 1);"}, {"sha": "4c18077f33573e79aeb48647ddd7bb55f6db4580", "filename": "src/test/ui/generator/dropck-resume.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Ftest%2Fui%2Fgenerator%2Fdropck-resume.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Ftest%2Fui%2Fgenerator%2Fdropck-resume.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fdropck-resume.rs?ref=2d8f6389d09bfbaa9a5960c63f6639ddc513c813", "patch": "@@ -0,0 +1,33 @@\n+#![feature(generators, generator_trait)]\n+\n+use std::ops::{Generator, GeneratorState};\n+use std::pin::Pin;\n+\n+struct SetToNone<'a: 'b, 'b>(&'b mut Option<&'a i32>);\n+\n+impl<'a, 'b> Drop for SetToNone<'a, 'b> {\n+    fn drop(&mut self) {\n+        *self.0 = None;\n+    }\n+}\n+\n+fn drop_using_generator() -> i32 {\n+    let mut y = Some(&0);\n+    let z = &mut y;\n+    let r;\n+    {\n+        let mut g = move |r| {\n+            let _s = SetToNone(r);\n+            yield;\n+        };\n+        let mut g = Pin::new(&mut g);\n+        g.as_mut().resume(z);\n+        r = y.as_ref().unwrap();\n+        //~^ ERROR cannot borrow `y` as immutable because it is also borrowed as mutable\n+    }\n+    **r\n+}\n+\n+fn main() {\n+    println!(\"{}\", drop_using_generator());\n+}"}, {"sha": "ecf92e7e3ae79c179026abd44406f8d90e66706f", "filename": "src/test/ui/generator/dropck-resume.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Ftest%2Fui%2Fgenerator%2Fdropck-resume.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Ftest%2Fui%2Fgenerator%2Fdropck-resume.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fdropck-resume.stderr?ref=2d8f6389d09bfbaa9a5960c63f6639ddc513c813", "patch": "@@ -0,0 +1,15 @@\n+error[E0502]: cannot borrow `y` as immutable because it is also borrowed as mutable\n+  --> $DIR/dropck-resume.rs:25:13\n+   |\n+LL |     let z = &mut y;\n+   |             ------ mutable borrow occurs here\n+...\n+LL |         r = y.as_ref().unwrap();\n+   |             ^ immutable borrow occurs here\n+LL |\n+LL |     }\n+   |     - mutable borrow might be used here, when `g` is dropped and runs the destructor for generator\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0502`."}, {"sha": "da00b230d9fb73b54e7506187a4d9b967772fbfd", "filename": "src/test/ui/generator/dropck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Ftest%2Fui%2Fgenerator%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Ftest%2Fui%2Fgenerator%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fdropck.rs?ref=2d8f6389d09bfbaa9a5960c63f6639ddc513c813", "patch": "@@ -15,6 +15,6 @@ fn main() {\n         let _d = ref_.take(); //~ ERROR `ref_` does not live long enough\n         yield;\n     };\n-    Pin::new(&mut gen).resume();\n+    Pin::new(&mut gen).resume(());\n     // drops the RefCell and then the Ref, leading to use-after-free\n }"}, {"sha": "5f0a6bb09b7843f452575ed051cb352cfbb95760", "filename": "src/test/ui/generator/generator-region-requirements.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-region-requirements.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-region-requirements.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-region-requirements.rs?ref=2d8f6389d09bfbaa9a5960c63f6639ddc513c813", "patch": "@@ -8,7 +8,7 @@ fn dangle(x: &mut i32) -> &'static mut i32 {\n         x\n     };\n     loop {\n-        match Pin::new(&mut g).resume() {\n+        match Pin::new(&mut g).resume(()) {\n             GeneratorState::Complete(c) => return c,\n             //~^ ERROR explicit lifetime required\n             GeneratorState::Yielded(_) => (),"}, {"sha": "389b9d139694195499a6f8be2657e50ad1890eaa", "filename": "src/test/ui/generator/issue-44197.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Ftest%2Fui%2Fgenerator%2Fissue-44197.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Ftest%2Fui%2Fgenerator%2Fissue-44197.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fissue-44197.rs?ref=2d8f6389d09bfbaa9a5960c63f6639ddc513c813", "patch": "@@ -2,14 +2,14 @@\n \n #![feature(generators, generator_trait)]\n \n-use std::ops::{ Generator, GeneratorState };\n+use std::ops::{Generator, GeneratorState};\n use std::pin::Pin;\n \n fn foo(_: &str) -> String {\n     String::new()\n }\n \n-fn bar(baz: String) -> impl Generator<Yield = String, Return = ()> {\n+fn bar(baz: String) -> impl Generator<(), Yield = String, Return = ()> {\n     move || {\n         yield foo(&baz);\n     }\n@@ -19,7 +19,7 @@ fn foo2(_: &str) -> Result<String, ()> {\n     Err(())\n }\n \n-fn bar2(baz: String) -> impl Generator<Yield = String, Return = ()> {\n+fn bar2(baz: String) -> impl Generator<(), Yield = String, Return = ()> {\n     move || {\n         if let Ok(quux) = foo2(&baz) {\n             yield quux;\n@@ -28,6 +28,9 @@ fn bar2(baz: String) -> impl Generator<Yield = String, Return = ()> {\n }\n \n fn main() {\n-    assert_eq!(Pin::new(&mut bar(String::new())).resume(), GeneratorState::Yielded(String::new()));\n-    assert_eq!(Pin::new(&mut bar2(String::new())).resume(), GeneratorState::Complete(()));\n+    assert_eq!(\n+        Pin::new(&mut bar(String::new())).resume(()),\n+        GeneratorState::Yielded(String::new())\n+    );\n+    assert_eq!(Pin::new(&mut bar2(String::new())).resume(()), GeneratorState::Complete(()));\n }"}, {"sha": "187c374021dcac962c5bd4a8a919cc700e787b28", "filename": "src/test/ui/generator/issue-61442-stmt-expr-with-drop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Ftest%2Fui%2Fgenerator%2Fissue-61442-stmt-expr-with-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Ftest%2Fui%2Fgenerator%2Fissue-61442-stmt-expr-with-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fissue-61442-stmt-expr-with-drop.rs?ref=2d8f6389d09bfbaa9a5960c63f6639ddc513c813", "patch": "@@ -18,12 +18,12 @@ fn drop_and_yield() {\n         String::new();\n         yield;\n     };\n-    Box::pin(x).as_mut().resume();\n+    Box::pin(x).as_mut().resume(());\n     let y = static || {\n         String::new();\n         yield;\n     };\n-    Box::pin(y).as_mut().resume();\n+    Box::pin(y).as_mut().resume(());\n }\n \n fn main() {"}, {"sha": "90eefe02f664e46fa7bf8a4ee51e333c340751ef", "filename": "src/test/ui/generator/iterator-count.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Ftest%2Fui%2Fgenerator%2Fiterator-count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Ftest%2Fui%2Fgenerator%2Fiterator-count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fiterator-count.rs?ref=2d8f6389d09bfbaa9a5960c63f6639ddc513c813", "patch": "@@ -10,18 +10,18 @@ struct W<T>(T);\n \n // This impl isn't safe in general, but the generator used in this test is movable\n // so it won't cause problems.\n-impl<T: Generator<Return = ()> + Unpin> Iterator for W<T> {\n+impl<T: Generator<(), Return = ()> + Unpin> Iterator for W<T> {\n     type Item = T::Yield;\n \n     fn next(&mut self) -> Option<Self::Item> {\n-        match Pin::new(&mut self.0).resume() {\n+        match Pin::new(&mut self.0).resume(()) {\n             GeneratorState::Complete(..) => None,\n             GeneratorState::Yielded(v) => Some(v),\n         }\n     }\n }\n \n-fn test() -> impl Generator<Return=(), Yield=u8> + Unpin {\n+fn test() -> impl Generator<(), Return=(), Yield=u8> + Unpin {\n     || {\n         for i in 1..6 {\n             yield i"}, {"sha": "6a2e42a5573a8486814f17145a15599fc805cb2c", "filename": "src/test/ui/generator/live-upvar-across-yield.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Ftest%2Fui%2Fgenerator%2Flive-upvar-across-yield.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Ftest%2Fui%2Fgenerator%2Flive-upvar-across-yield.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Flive-upvar-across-yield.rs?ref=2d8f6389d09bfbaa9a5960c63f6639ddc513c813", "patch": "@@ -10,5 +10,5 @@ fn main() {\n     let mut a = || {\n         b(yield);\n     };\n-    Pin::new(&mut a).resume();\n+    Pin::new(&mut a).resume(());\n }"}, {"sha": "45519150eec2b560bd64d3e519cf39cd19add0b9", "filename": "src/test/ui/generator/nested_generators.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Ftest%2Fui%2Fgenerator%2Fnested_generators.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Ftest%2Fui%2Fgenerator%2Fnested_generators.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fnested_generators.rs?ref=2d8f6389d09bfbaa9a5960c63f6639ddc513c813", "patch": "@@ -11,7 +11,7 @@ fn main() {\n             yield 2;\n         };\n \n-        match Pin::new(&mut sub_generator).resume() {\n+        match Pin::new(&mut sub_generator).resume(()) {\n             GeneratorState::Yielded(x) => {\n                 yield x;\n             }"}, {"sha": "6b5a557933953381296326acd8fe24b83f27ef35", "filename": "src/test/ui/generator/no-parameters-on-generators.rs", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fgenerator%2Fno-parameters-on-generators.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fgenerator%2Fno-parameters-on-generators.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fno-parameters-on-generators.rs?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -1,8 +0,0 @@\n-#![feature(generators)]\n-\n-fn main() {\n-    let gen = |start| { //~ ERROR generators cannot have explicit parameters\n-        //~^ ERROR type inside generator must be known in this context\n-        yield;\n-    };\n-}"}, {"sha": "5e8e043a391ce280810483861084730b95dc77c9", "filename": "src/test/ui/generator/no-parameters-on-generators.stderr", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fgenerator%2Fno-parameters-on-generators.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26c86a6a2828b1048fa2fd425595ef8fb475249a/src%2Ftest%2Fui%2Fgenerator%2Fno-parameters-on-generators.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fno-parameters-on-generators.stderr?ref=26c86a6a2828b1048fa2fd425595ef8fb475249a", "patch": "@@ -1,21 +0,0 @@\n-error[E0628]: generators cannot have explicit parameters\n-  --> $DIR/no-parameters-on-generators.rs:4:15\n-   |\n-LL |     let gen = |start| {\n-   |               ^^^^^^^\n-\n-error[E0698]: type inside generator must be known in this context\n-  --> $DIR/no-parameters-on-generators.rs:4:16\n-   |\n-LL |     let gen = |start| {\n-   |                ^^^^^ cannot infer type\n-   |\n-note: the type is part of the generator because of this `yield`\n-  --> $DIR/no-parameters-on-generators.rs:6:9\n-   |\n-LL |         yield;\n-   |         ^^^^^\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0698`."}, {"sha": "29f4788b2757f5b0be79472d5125c0d76383d868", "filename": "src/test/ui/generator/panic-drops-resume.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Ftest%2Fui%2Fgenerator%2Fpanic-drops-resume.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Ftest%2Fui%2Fgenerator%2Fpanic-drops-resume.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fpanic-drops-resume.rs?ref=2d8f6389d09bfbaa9a5960c63f6639ddc513c813", "patch": "@@ -0,0 +1,37 @@\n+//! Tests that panics inside a generator will correctly drop the initial resume argument.\n+\n+// run-pass\n+// ignore-wasm       no unwind support\n+// ignore-emscripten no unwind support\n+\n+#![feature(generators, generator_trait)]\n+\n+use std::ops::Generator;\n+use std::panic::{catch_unwind, AssertUnwindSafe};\n+use std::pin::Pin;\n+use std::sync::atomic::{AtomicUsize, Ordering};\n+\n+static DROP: AtomicUsize = AtomicUsize::new(0);\n+\n+struct Dropper {}\n+\n+impl Drop for Dropper {\n+    fn drop(&mut self) {\n+        DROP.fetch_add(1, Ordering::SeqCst);\n+    }\n+}\n+\n+fn main() {\n+    let mut gen = |_arg| {\n+        if true {\n+            panic!();\n+        }\n+        yield ();\n+    };\n+    let mut gen = Pin::new(&mut gen);\n+\n+    assert_eq!(DROP.load(Ordering::Acquire), 0);\n+    let res = catch_unwind(AssertUnwindSafe(|| gen.as_mut().resume(Dropper {})));\n+    assert!(res.is_err());\n+    assert_eq!(DROP.load(Ordering::Acquire), 1);\n+}"}, {"sha": "c9a201725aea2705240b99a9c6165992b53f1ff1", "filename": "src/test/ui/generator/panic-drops.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Ftest%2Fui%2Fgenerator%2Fpanic-drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Ftest%2Fui%2Fgenerator%2Fpanic-drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fpanic-drops.rs?ref=2d8f6389d09bfbaa9a5960c63f6639ddc513c813", "patch": "@@ -35,7 +35,7 @@ fn main() {\n \n     assert_eq!(A.load(Ordering::SeqCst), 0);\n     let res = panic::catch_unwind(panic::AssertUnwindSafe(|| {\n-        Pin::new(&mut foo).resume()\n+        Pin::new(&mut foo).resume(())\n     }));\n     assert!(res.is_err());\n     assert_eq!(A.load(Ordering::SeqCst), 1);\n@@ -50,7 +50,7 @@ fn main() {\n \n     assert_eq!(A.load(Ordering::SeqCst), 1);\n     let res = panic::catch_unwind(panic::AssertUnwindSafe(|| {\n-        Pin::new(&mut foo).resume()\n+        Pin::new(&mut foo).resume(())\n     }));\n     assert!(res.is_err());\n     assert_eq!(A.load(Ordering::SeqCst), 1);"}, {"sha": "500a3c9c2950e6177c32b1d466d2b59616e9bbcb", "filename": "src/test/ui/generator/panic-safe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Ftest%2Fui%2Fgenerator%2Fpanic-safe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Ftest%2Fui%2Fgenerator%2Fpanic-safe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fpanic-safe.rs?ref=2d8f6389d09bfbaa9a5960c63f6639ddc513c813", "patch": "@@ -17,13 +17,13 @@ fn main() {\n     };\n \n     let res = panic::catch_unwind(panic::AssertUnwindSafe(|| {\n-        Pin::new(&mut foo).resume()\n+        Pin::new(&mut foo).resume(())\n     }));\n     assert!(res.is_err());\n \n     for _ in 0..10 {\n         let res = panic::catch_unwind(panic::AssertUnwindSafe(|| {\n-            Pin::new(&mut foo).resume()\n+            Pin::new(&mut foo).resume(())\n         }));\n         assert!(res.is_err());\n     }"}, {"sha": "efed08bd4708f2e803c142b2590caeecfc9848f5", "filename": "src/test/ui/generator/resume-after-return.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Ftest%2Fui%2Fgenerator%2Fresume-after-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Ftest%2Fui%2Fgenerator%2Fresume-after-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fresume-after-return.rs?ref=2d8f6389d09bfbaa9a5960c63f6639ddc513c813", "patch": "@@ -16,12 +16,12 @@ fn main() {\n         yield;\n     };\n \n-    match Pin::new(&mut foo).resume() {\n+    match Pin::new(&mut foo).resume(()) {\n         GeneratorState::Complete(()) => {}\n         s => panic!(\"bad state: {:?}\", s),\n     }\n \n-    match panic::catch_unwind(move || Pin::new(&mut foo).resume()) {\n+    match panic::catch_unwind(move || Pin::new(&mut foo).resume(())) {\n         Ok(_) => panic!(\"generator successfully resumed\"),\n         Err(_) => {}\n     }"}, {"sha": "87b1f1a065bc8c3099b34410267256398fb84765", "filename": "src/test/ui/generator/resume-arg-late-bound.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Ftest%2Fui%2Fgenerator%2Fresume-arg-late-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Ftest%2Fui%2Fgenerator%2Fresume-arg-late-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fresume-arg-late-bound.rs?ref=2d8f6389d09bfbaa9a5960c63f6639ddc513c813", "patch": "@@ -0,0 +1,17 @@\n+//! Tests that we cannot produce a generator that accepts a resume argument\n+//! with any lifetime and then stores it across a `yield`.\n+\n+#![feature(generators, generator_trait)]\n+\n+use std::ops::Generator;\n+\n+fn test(a: impl for<'a> Generator<&'a mut bool>) {}\n+\n+fn main() {\n+    let gen = |arg: &mut bool| {\n+        yield ();\n+        *arg = true;\n+    };\n+    test(gen);\n+    //~^ ERROR type mismatch in function arguments\n+}"}, {"sha": "7719d5123f4663213b110b427869341a905d802a", "filename": "src/test/ui/generator/resume-arg-late-bound.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Ftest%2Fui%2Fgenerator%2Fresume-arg-late-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Ftest%2Fui%2Fgenerator%2Fresume-arg-late-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fresume-arg-late-bound.stderr?ref=2d8f6389d09bfbaa9a5960c63f6639ddc513c813", "patch": "@@ -0,0 +1,15 @@\n+error[E0631]: type mismatch in function arguments\n+  --> $DIR/resume-arg-late-bound.rs:15:10\n+   |\n+LL | fn test(a: impl for<'a> Generator<&'a mut bool>) {}\n+   |    ----         ------------------------------- required by this bound in `test`\n+...\n+LL |     test(gen);\n+   |          ^^^\n+   |          |\n+   |          expected signature of `for<'a> fn(&'a mut bool) -> _`\n+   |          found signature of `fn(&mut bool) -> _`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0631`."}, {"sha": "4c4cf117a556316f58c00b0a41f1821554c1163e", "filename": "src/test/ui/generator/resume-live-across-yield.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Ftest%2Fui%2Fgenerator%2Fresume-live-across-yield.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Ftest%2Fui%2Fgenerator%2Fresume-live-across-yield.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fresume-live-across-yield.rs?ref=2d8f6389d09bfbaa9a5960c63f6639ddc513c813", "patch": "@@ -0,0 +1,45 @@\n+// run-pass\n+\n+#![feature(generators, generator_trait)]\n+\n+use std::ops::{Generator, GeneratorState};\n+use std::pin::Pin;\n+use std::sync::atomic::{AtomicUsize, Ordering};\n+\n+static DROP: AtomicUsize = AtomicUsize::new(0);\n+\n+#[derive(PartialEq, Eq, Debug)]\n+struct Dropper(String);\n+\n+impl Drop for Dropper {\n+    fn drop(&mut self) {\n+        DROP.fetch_add(1, Ordering::SeqCst);\n+    }\n+}\n+\n+fn main() {\n+    let mut g = |mut _d| {\n+        _d = yield;\n+        _d\n+    };\n+\n+    let mut g = Pin::new(&mut g);\n+\n+    assert_eq!(\n+        g.as_mut().resume(Dropper(String::from(\"Hello world!\"))),\n+        GeneratorState::Yielded(())\n+    );\n+    assert_eq!(DROP.load(Ordering::Acquire), 0);\n+    match g.as_mut().resume(Dropper(String::from(\"Number Two\"))) {\n+        GeneratorState::Complete(dropper) => {\n+            assert_eq!(DROP.load(Ordering::Acquire), 1);\n+            assert_eq!(dropper.0, \"Number Two\");\n+            drop(dropper);\n+            assert_eq!(DROP.load(Ordering::Acquire), 2);\n+        }\n+        _ => unreachable!(),\n+    }\n+\n+    drop(g);\n+    assert_eq!(DROP.load(Ordering::Acquire), 2);\n+}"}, {"sha": "0606ea71cdf372a84ef2f504543068146144f2a8", "filename": "src/test/ui/generator/retain-resume-ref.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Ftest%2Fui%2Fgenerator%2Fretain-resume-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Ftest%2Fui%2Fgenerator%2Fretain-resume-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fretain-resume-ref.rs?ref=2d8f6389d09bfbaa9a5960c63f6639ddc513c813", "patch": "@@ -0,0 +1,25 @@\n+//! This test ensures that a mutable reference cannot be passed as a resume argument twice.\n+\n+#![feature(generators, generator_trait)]\n+\n+use std::marker::Unpin;\n+use std::ops::{\n+    Generator,\n+    GeneratorState::{self, *},\n+};\n+use std::pin::Pin;\n+\n+fn main() {\n+    let mut thing = String::from(\"hello\");\n+\n+    let mut gen = |r| {\n+        if false {\n+            yield r;\n+        }\n+    };\n+\n+    let mut gen = Pin::new(&mut gen);\n+    gen.as_mut().resume(&mut thing);\n+    gen.as_mut().resume(&mut thing);\n+    //~^ cannot borrow `thing` as mutable more than once at a time\n+}"}, {"sha": "bc715c7030eb397e617376c4bb455e74f945d54f", "filename": "src/test/ui/generator/retain-resume-ref.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Ftest%2Fui%2Fgenerator%2Fretain-resume-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Ftest%2Fui%2Fgenerator%2Fretain-resume-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fretain-resume-ref.stderr?ref=2d8f6389d09bfbaa9a5960c63f6639ddc513c813", "patch": "@@ -0,0 +1,14 @@\n+error[E0499]: cannot borrow `thing` as mutable more than once at a time\n+  --> $DIR/retain-resume-ref.rs:23:25\n+   |\n+LL |     gen.as_mut().resume(&mut thing);\n+   |                         ---------- first mutable borrow occurs here\n+LL |     gen.as_mut().resume(&mut thing);\n+   |                         ^^^^^^^^^^ second mutable borrow occurs here\n+LL |\n+LL | }\n+   | - first borrow might be used here, when `gen` is dropped and runs the destructor for generator\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0499`."}, {"sha": "c6dd738d6ac60d370c1857db6bf83153cb97da0e", "filename": "src/test/ui/generator/sized-yield.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Ftest%2Fui%2Fgenerator%2Fsized-yield.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Ftest%2Fui%2Fgenerator%2Fsized-yield.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fsized-yield.rs?ref=2d8f6389d09bfbaa9a5960c63f6639ddc513c813", "patch": "@@ -9,6 +9,6 @@ fn main() {\n    //~^ ERROR the size for values of type\n        yield s[..];\n    };\n-   Pin::new(&mut gen).resume();\n+   Pin::new(&mut gen).resume(());\n    //~^ ERROR the size for values of type\n }"}, {"sha": "79aeec2ec02801df72fd2e4385cb06989b4de022", "filename": "src/test/ui/generator/sized-yield.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Ftest%2Fui%2Fgenerator%2Fsized-yield.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Ftest%2Fui%2Fgenerator%2Fsized-yield.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fsized-yield.stderr?ref=2d8f6389d09bfbaa9a5960c63f6639ddc513c813", "patch": "@@ -15,7 +15,7 @@ LL | |    };\n error[E0277]: the size for values of type `str` cannot be known at compilation time\n   --> $DIR/sized-yield.rs:12:23\n    |\n-LL |    Pin::new(&mut gen).resume();\n+LL |    Pin::new(&mut gen).resume(());\n    |                       ^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`"}, {"sha": "32f3ee32d77b9d96eb1320eca4ab4edce2c5129c", "filename": "src/test/ui/generator/smoke-resume-args.rs", "status": "added", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Ftest%2Fui%2Fgenerator%2Fsmoke-resume-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Ftest%2Fui%2Fgenerator%2Fsmoke-resume-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fsmoke-resume-args.rs?ref=2d8f6389d09bfbaa9a5960c63f6639ddc513c813", "patch": "@@ -0,0 +1,97 @@\n+// run-pass\n+\n+#![feature(generators, generator_trait)]\n+\n+use std::fmt::Debug;\n+use std::marker::Unpin;\n+use std::ops::{\n+    Generator,\n+    GeneratorState::{self, *},\n+};\n+use std::pin::Pin;\n+use std::sync::atomic::{AtomicUsize, Ordering};\n+\n+fn drain<G: Generator<R, Yield = Y> + Unpin, R, Y>(\n+    gen: &mut G,\n+    inout: Vec<(R, GeneratorState<Y, G::Return>)>,\n+) where\n+    Y: Debug + PartialEq,\n+    G::Return: Debug + PartialEq,\n+{\n+    let mut gen = Pin::new(gen);\n+\n+    for (input, out) in inout {\n+        assert_eq!(gen.as_mut().resume(input), out);\n+    }\n+}\n+\n+static DROPS: AtomicUsize = AtomicUsize::new(0);\n+\n+#[derive(Debug, PartialEq)]\n+struct DropMe;\n+\n+impl Drop for DropMe {\n+    fn drop(&mut self) {\n+        DROPS.fetch_add(1, Ordering::SeqCst);\n+    }\n+}\n+\n+fn expect_drops<T>(expected_drops: usize, f: impl FnOnce() -> T) -> T {\n+    DROPS.store(0, Ordering::SeqCst);\n+\n+    let res = f();\n+\n+    let actual_drops = DROPS.load(Ordering::SeqCst);\n+    assert_eq!(actual_drops, expected_drops);\n+    res\n+}\n+\n+fn main() {\n+    drain(\n+        &mut |mut b| {\n+            while b != 0 {\n+                b = yield (b + 1);\n+            }\n+            -1\n+        },\n+        vec![(1, Yielded(2)), (-45, Yielded(-44)), (500, Yielded(501)), (0, Complete(-1))],\n+    );\n+\n+    expect_drops(2, || drain(&mut |a| yield a, vec![(DropMe, Yielded(DropMe))]));\n+\n+    expect_drops(6, || {\n+        drain(\n+            &mut |a| yield yield a,\n+            vec![(DropMe, Yielded(DropMe)), (DropMe, Yielded(DropMe)), (DropMe, Complete(DropMe))],\n+        )\n+    });\n+\n+    #[allow(unreachable_code)]\n+    expect_drops(2, || drain(&mut |a| yield return a, vec![(DropMe, Complete(DropMe))]));\n+\n+    expect_drops(2, || {\n+        drain(\n+            &mut |a: DropMe| {\n+                if false { yield () } else { a }\n+            },\n+            vec![(DropMe, Complete(DropMe))],\n+        )\n+    });\n+\n+    expect_drops(4, || {\n+        drain(\n+            #[allow(unused_assignments, unused_variables)]\n+            &mut |mut a: DropMe| {\n+                a = yield;\n+                a = yield;\n+                a = yield;\n+            },\n+            vec![\n+                (DropMe, Yielded(())),\n+                (DropMe, Yielded(())),\n+                (DropMe, Yielded(())),\n+                (DropMe, Complete(())),\n+            ],\n+        )\n+    });\n+}"}, {"sha": "9289710b34bf980f58244e0459aad8794ae5b9dd", "filename": "src/test/ui/generator/smoke.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Ftest%2Fui%2Fgenerator%2Fsmoke.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Ftest%2Fui%2Fgenerator%2Fsmoke.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fsmoke.rs?ref=2d8f6389d09bfbaa9a5960c63f6639ddc513c813", "patch": "@@ -17,7 +17,7 @@ fn simple() {\n         }\n     };\n \n-    match Pin::new(&mut foo).resume() {\n+    match Pin::new(&mut foo).resume(()) {\n         GeneratorState::Complete(()) => {}\n         s => panic!(\"bad state: {:?}\", s),\n     }\n@@ -33,7 +33,7 @@ fn return_capture() {\n         a\n     };\n \n-    match Pin::new(&mut foo).resume() {\n+    match Pin::new(&mut foo).resume(()) {\n         GeneratorState::Complete(ref s) if *s == \"foo\" => {}\n         s => panic!(\"bad state: {:?}\", s),\n     }\n@@ -45,11 +45,11 @@ fn simple_yield() {\n         yield;\n     };\n \n-    match Pin::new(&mut foo).resume() {\n+    match Pin::new(&mut foo).resume(()) {\n         GeneratorState::Yielded(()) => {}\n         s => panic!(\"bad state: {:?}\", s),\n     }\n-    match Pin::new(&mut foo).resume() {\n+    match Pin::new(&mut foo).resume(()) {\n         GeneratorState::Complete(()) => {}\n         s => panic!(\"bad state: {:?}\", s),\n     }\n@@ -62,11 +62,11 @@ fn yield_capture() {\n         yield b;\n     };\n \n-    match Pin::new(&mut foo).resume() {\n+    match Pin::new(&mut foo).resume(()) {\n         GeneratorState::Yielded(ref s) if *s == \"foo\" => {}\n         s => panic!(\"bad state: {:?}\", s),\n     }\n-    match Pin::new(&mut foo).resume() {\n+    match Pin::new(&mut foo).resume(()) {\n         GeneratorState::Complete(()) => {}\n         s => panic!(\"bad state: {:?}\", s),\n     }\n@@ -79,11 +79,11 @@ fn simple_yield_value() {\n         return String::from(\"foo\")\n     };\n \n-    match Pin::new(&mut foo).resume() {\n+    match Pin::new(&mut foo).resume(()) {\n         GeneratorState::Yielded(ref s) if *s == \"bar\" => {}\n         s => panic!(\"bad state: {:?}\", s),\n     }\n-    match Pin::new(&mut foo).resume() {\n+    match Pin::new(&mut foo).resume(()) {\n         GeneratorState::Complete(ref s) if *s == \"foo\" => {}\n         s => panic!(\"bad state: {:?}\", s),\n     }\n@@ -97,11 +97,11 @@ fn return_after_yield() {\n         return a\n     };\n \n-    match Pin::new(&mut foo).resume() {\n+    match Pin::new(&mut foo).resume(()) {\n         GeneratorState::Yielded(()) => {}\n         s => panic!(\"bad state: {:?}\", s),\n     }\n-    match Pin::new(&mut foo).resume() {\n+    match Pin::new(&mut foo).resume(()) {\n         GeneratorState::Complete(ref s) if *s == \"foo\" => {}\n         s => panic!(\"bad state: {:?}\", s),\n     }\n@@ -149,11 +149,11 @@ fn send_and_sync() {\n fn send_over_threads() {\n     let mut foo = || { yield };\n     thread::spawn(move || {\n-        match Pin::new(&mut foo).resume() {\n+        match Pin::new(&mut foo).resume(()) {\n             GeneratorState::Yielded(()) => {}\n             s => panic!(\"bad state: {:?}\", s),\n         }\n-        match Pin::new(&mut foo).resume() {\n+        match Pin::new(&mut foo).resume(()) {\n             GeneratorState::Complete(()) => {}\n             s => panic!(\"bad state: {:?}\", s),\n         }\n@@ -162,11 +162,11 @@ fn send_over_threads() {\n     let a = String::from(\"a\");\n     let mut foo = || { yield a };\n     thread::spawn(move || {\n-        match Pin::new(&mut foo).resume() {\n+        match Pin::new(&mut foo).resume(()) {\n             GeneratorState::Yielded(ref s) if *s == \"a\" => {}\n             s => panic!(\"bad state: {:?}\", s),\n         }\n-        match Pin::new(&mut foo).resume() {\n+        match Pin::new(&mut foo).resume(()) {\n             GeneratorState::Complete(()) => {}\n             s => panic!(\"bad state: {:?}\", s),\n         }"}, {"sha": "3980766c4287e73e7947d4af964e969fa4d39129", "filename": "src/test/ui/generator/static-generators.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Ftest%2Fui%2Fgenerator%2Fstatic-generators.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Ftest%2Fui%2Fgenerator%2Fstatic-generators.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fstatic-generators.rs?ref=2d8f6389d09bfbaa9a5960c63f6639ddc513c813", "patch": "@@ -15,6 +15,6 @@ fn main() {\n     // Safety: We shadow the original generator variable so have no safe API to\n     // move it after this point.\n     let mut generator = unsafe { Pin::new_unchecked(&mut generator) };\n-    assert_eq!(generator.as_mut().resume(), GeneratorState::Yielded(()));\n-    assert_eq!(generator.as_mut().resume(), GeneratorState::Complete(()));\n+    assert_eq!(generator.as_mut().resume(()), GeneratorState::Yielded(()));\n+    assert_eq!(generator.as_mut().resume(()), GeneratorState::Complete(()));\n }"}, {"sha": "7a353ea298b26c5c7ce2ac24be6961678c7c32de", "filename": "src/test/ui/generator/too-many-parameters.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Ftest%2Fui%2Fgenerator%2Ftoo-many-parameters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Ftest%2Fui%2Fgenerator%2Ftoo-many-parameters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Ftoo-many-parameters.rs?ref=2d8f6389d09bfbaa9a5960c63f6639ddc513c813", "patch": "@@ -0,0 +1,8 @@\n+#![feature(generators)]\n+\n+fn main() {\n+    |(), ()| {\n+        //~^ error: too many parameters for a generator\n+        yield;\n+    };\n+}"}, {"sha": "a297ee43de9695dc0e7a5c7e32de0126b1130eba", "filename": "src/test/ui/generator/too-many-parameters.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Ftest%2Fui%2Fgenerator%2Ftoo-many-parameters.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Ftest%2Fui%2Fgenerator%2Ftoo-many-parameters.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Ftoo-many-parameters.stderr?ref=2d8f6389d09bfbaa9a5960c63f6639ddc513c813", "patch": "@@ -0,0 +1,8 @@\n+error[E0628]: too many parameters for a generator (expected 0 or 1 parameters)\n+  --> $DIR/too-many-parameters.rs:4:5\n+   |\n+LL |     |(), ()| {\n+   |     ^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "d39c788a84bd409eba24c4b4a2c3063f20caf195", "filename": "src/test/ui/generator/type-mismatch-error.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Ftest%2Fui%2Fgenerator%2Ftype-mismatch-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Ftest%2Fui%2Fgenerator%2Ftype-mismatch-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Ftype-mismatch-error.rs?ref=2d8f6389d09bfbaa9a5960c63f6639ddc513c813", "patch": "@@ -0,0 +1,22 @@\n+//! Test that we get the expected type mismatch error instead of \"closure is expected to take 0\n+//! arguments\" (which got introduced after implementing resume arguments).\n+\n+#![feature(generators, generator_trait)]\n+\n+use std::ops::Generator;\n+\n+fn f<G: Generator>(_: G, _: G::Return) {}\n+\n+fn main() {\n+    f(\n+        |a: u8| {\n+            if false {\n+                yield ();\n+            } else {\n+                a\n+                //~^ error: `if` and `else` have incompatible types\n+            }\n+        },\n+        0u8,\n+    );\n+}"}, {"sha": "8f5949533e2c786c2ae948e883676d1dbda99282", "filename": "src/test/ui/generator/type-mismatch-error.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Ftest%2Fui%2Fgenerator%2Ftype-mismatch-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Ftest%2Fui%2Fgenerator%2Ftype-mismatch-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Ftype-mismatch-error.stderr?ref=2d8f6389d09bfbaa9a5960c63f6639ddc513c813", "patch": "@@ -0,0 +1,19 @@\n+error[E0308]: `if` and `else` have incompatible types\n+  --> $DIR/type-mismatch-error.rs:16:17\n+   |\n+LL | /             if false {\n+LL | |                 yield ();\n+   | |                 ---------\n+   | |                 |       |\n+   | |                 |       help: consider removing this semicolon\n+   | |                 expected because of this\n+LL | |             } else {\n+LL | |                 a\n+   | |                 ^ expected `()`, found `u8`\n+LL | |\n+LL | |             }\n+   | |_____________- `if` and `else` have incompatible types\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "7774ff48f56b730b7bdc028dccf03771e07cee1e", "filename": "src/test/ui/generator/type-mismatch-signature-deduction.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Ftest%2Fui%2Fgenerator%2Ftype-mismatch-signature-deduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Ftest%2Fui%2Fgenerator%2Ftype-mismatch-signature-deduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Ftype-mismatch-signature-deduction.rs?ref=2d8f6389d09bfbaa9a5960c63f6639ddc513c813", "patch": "@@ -2,15 +2,15 @@\n \n use std::ops::Generator;\n \n-fn foo() -> impl Generator<Return = i32> {\n+fn foo() -> impl Generator<Return = i32> { //~ ERROR type mismatch\n     || {\n         if false {\n-            return Ok(6); //~ ERROR mismatched types [E0308]\n+            return Ok(6);\n         }\n \n         yield ();\n \n-        5\n+        5 //~ ERROR mismatched types [E0308]\n     }\n }\n "}, {"sha": "8de77798ff48e632f3926ad9ba0879b3baf0aa7b", "filename": "src/test/ui/generator/type-mismatch-signature-deduction.stderr", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Ftest%2Fui%2Fgenerator%2Ftype-mismatch-signature-deduction.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Ftest%2Fui%2Fgenerator%2Ftype-mismatch-signature-deduction.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Ftype-mismatch-signature-deduction.stderr?ref=2d8f6389d09bfbaa9a5960c63f6639ddc513c813", "patch": "@@ -1,12 +1,23 @@\n error[E0308]: mismatched types\n-  --> $DIR/type-mismatch-signature-deduction.rs:8:20\n+  --> $DIR/type-mismatch-signature-deduction.rs:13:9\n    |\n-LL |             return Ok(6);\n-   |                    ^^^^^ expected `i32`, found enum `std::result::Result`\n+LL |         5\n+   |         ^ expected enum `std::result::Result`, found integer\n    |\n-   = note: expected type `i32`\n-              found enum `std::result::Result<{integer}, _>`\n+   = note: expected type `std::result::Result<{integer}, _>`\n+              found type `{integer}`\n \n-error: aborting due to previous error\n+error[E0271]: type mismatch resolving `<[generator@$DIR/type-mismatch-signature-deduction.rs:6:5: 14:6 _] as std::ops::Generator>::Return == i32`\n+  --> $DIR/type-mismatch-signature-deduction.rs:5:13\n+   |\n+LL | fn foo() -> impl Generator<Return = i32> {\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `std::result::Result`, found `i32`\n+   |\n+   = note: expected enum `std::result::Result<{integer}, _>`\n+              found type `i32`\n+   = note: the return type of a function must have a statically known size\n+\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0308`.\n+Some errors have detailed explanations: E0271, E0308.\n+For more information about an error, try `rustc --explain E0271`."}, {"sha": "1b1cff3387d9f7ea34388d4dd17f7c36b95acd75", "filename": "src/test/ui/generator/xcrate-reachable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Ftest%2Fui%2Fgenerator%2Fxcrate-reachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Ftest%2Fui%2Fgenerator%2Fxcrate-reachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fxcrate-reachable.rs?ref=2d8f6389d09bfbaa9a5960c63f6639ddc513c813", "patch": "@@ -10,5 +10,5 @@ use std::ops::Generator;\n use std::pin::Pin;\n \n fn main() {\n-    Pin::new(&mut foo::foo()).resume();\n+    Pin::new(&mut foo::foo()).resume(());\n }"}, {"sha": "40986bbeb6517243f3f487ce1f2dcafcb32b612d", "filename": "src/test/ui/generator/xcrate.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Ftest%2Fui%2Fgenerator%2Fxcrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Ftest%2Fui%2Fgenerator%2Fxcrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fxcrate.rs?ref=2d8f6389d09bfbaa9a5960c63f6639ddc513c813", "patch": "@@ -12,18 +12,18 @@ use std::pin::Pin;\n fn main() {\n     let mut foo = xcrate::foo();\n \n-    match Pin::new(&mut foo).resume() {\n+    match Pin::new(&mut foo).resume(()) {\n         GeneratorState::Complete(()) => {}\n         s => panic!(\"bad state: {:?}\", s),\n     }\n \n     let mut foo = xcrate::bar(3);\n \n-    match Pin::new(&mut foo).resume() {\n+    match Pin::new(&mut foo).resume(()) {\n         GeneratorState::Yielded(3) => {}\n         s => panic!(\"bad state: {:?}\", s),\n     }\n-    match Pin::new(&mut foo).resume() {\n+    match Pin::new(&mut foo).resume(()) {\n         GeneratorState::Complete(()) => {}\n         s => panic!(\"bad state: {:?}\", s),\n     }"}, {"sha": "985e5d8bdc83818e1466153e7e931c5e5602bc11", "filename": "src/test/ui/generator/yield-while-iterating.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-iterating.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-iterating.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-iterating.rs?ref=2d8f6389d09bfbaa9a5960c63f6639ddc513c813", "patch": "@@ -43,7 +43,7 @@ fn yield_during_iter_borrowed_slice_3() {\n             yield p;\n         }\n     };\n-    Pin::new(&mut b).resume();\n+    Pin::new(&mut b).resume(());\n }\n \n fn yield_during_iter_borrowed_slice_4() {\n@@ -56,7 +56,7 @@ fn yield_during_iter_borrowed_slice_4() {\n         }\n     };\n     println!(\"{}\", x[0]); //~ ERROR\n-    Pin::new(&mut b).resume();\n+    Pin::new(&mut b).resume(());\n }\n \n fn yield_during_range_iter() {\n@@ -69,7 +69,7 @@ fn yield_during_range_iter() {\n             yield x;\n         }\n     };\n-    Pin::new(&mut b).resume();\n+    Pin::new(&mut b).resume(());\n }\n \n fn main() { }"}, {"sha": "b6563475235c244da583e9d335a13e8543b0b754", "filename": "src/test/ui/generator/yield-while-iterating.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-iterating.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-iterating.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-iterating.stderr?ref=2d8f6389d09bfbaa9a5960c63f6639ddc513c813", "patch": "@@ -16,7 +16,7 @@ LL |         for p in &mut x {\n ...\n LL |     println!(\"{}\", x[0]);\n    |                    ^ immutable borrow occurs here\n-LL |     Pin::new(&mut b).resume();\n+LL |     Pin::new(&mut b).resume(());\n    |              ------ mutable borrow later used here\n \n error: aborting due to 2 previous errors"}, {"sha": "061a64dbc364d9143dbe310e31ba589fad76ef92", "filename": "src/test/ui/generator/yield-while-local-borrowed.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-local-borrowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-local-borrowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-local-borrowed.rs?ref=2d8f6389d09bfbaa9a5960c63f6639ddc513c813", "patch": "@@ -15,7 +15,7 @@ fn borrow_local_inline() {\n         yield();\n         println!(\"{}\", a);\n     };\n-    Pin::new(&mut b).resume();\n+    Pin::new(&mut b).resume(());\n }\n \n fn borrow_local_inline_done() {\n@@ -26,7 +26,7 @@ fn borrow_local_inline_done() {\n         }\n         yield();\n     };\n-    Pin::new(&mut b).resume();\n+    Pin::new(&mut b).resume(());\n }\n \n fn borrow_local() {\n@@ -43,7 +43,7 @@ fn borrow_local() {\n             println!(\"{}\", b);\n         }\n     };\n-    Pin::new(&mut b).resume();\n+    Pin::new(&mut b).resume(());\n }\n \n fn main() { }"}, {"sha": "a03ef945dd231c2b6cf4929ae06332340e1a8dd3", "filename": "src/test/ui/generator/yield-while-ref-reborrowed.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-ref-reborrowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-ref-reborrowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-ref-reborrowed.rs?ref=2d8f6389d09bfbaa9a5960c63f6639ddc513c813", "patch": "@@ -12,7 +12,7 @@ fn reborrow_shared_ref(x: &i32) {\n         yield();\n         println!(\"{}\", a);\n     };\n-    Pin::new(&mut b).resume();\n+    Pin::new(&mut b).resume(());\n }\n \n fn reborrow_mutable_ref(x: &mut i32) {\n@@ -23,7 +23,7 @@ fn reborrow_mutable_ref(x: &mut i32) {\n         yield();\n         println!(\"{}\", a);\n     };\n-    Pin::new(&mut b).resume();\n+    Pin::new(&mut b).resume(());\n }\n \n fn reborrow_mutable_ref_2(x: &mut i32) {\n@@ -34,7 +34,7 @@ fn reborrow_mutable_ref_2(x: &mut i32) {\n         println!(\"{}\", a);\n     };\n     println!(\"{}\", x); //~ ERROR\n-    Pin::new(&mut b).resume();\n+    Pin::new(&mut b).resume(());\n }\n \n fn main() { }"}, {"sha": "fd885660d092758f61ff23236596e98bbb5a8ec1", "filename": "src/test/ui/generator/yield-while-ref-reborrowed.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-ref-reborrowed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-ref-reborrowed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-ref-reborrowed.stderr?ref=2d8f6389d09bfbaa9a5960c63f6639ddc513c813", "patch": "@@ -8,7 +8,7 @@ LL |         let a = &mut *x;\n ...\n LL |     println!(\"{}\", x);\n    |                    ^ second borrow occurs here\n-LL |     Pin::new(&mut b).resume();\n+LL |     Pin::new(&mut b).resume(());\n    |              ------ first borrow later used here\n \n error: aborting due to previous error"}, {"sha": "e6279bd028e01008a12dca339f8f2d9992d2bafc", "filename": "src/test/ui/nll/issue-55850.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Ftest%2Fui%2Fnll%2Fissue-55850.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d8f6389d09bfbaa9a5960c63f6639ddc513c813/src%2Ftest%2Fui%2Fnll%2Fissue-55850.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-55850.rs?ref=2d8f6389d09bfbaa9a5960c63f6639ddc513c813", "patch": "@@ -15,7 +15,7 @@ where\n     type Item = G::Yield;\n \n     fn next(&mut self) -> Option<Self::Item> {\n-        match Pin::new(&mut self.0).resume() {\n+        match Pin::new(&mut self.0).resume(()) {\n             Yielded(y) => Some(y),\n             _ => None\n         }"}]}