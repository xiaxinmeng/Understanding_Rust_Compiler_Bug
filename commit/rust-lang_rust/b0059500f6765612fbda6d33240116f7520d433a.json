{"sha": "b0059500f6765612fbda6d33240116f7520d433a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwMDU5NTAwZjY3NjU2MTJmYmRhNmQzMzI0MDExNmY3NTIwZDQzM2E=", "commit": {"author": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2020-10-22T21:20:02Z"}, "committer": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2020-10-22T23:16:02Z"}, "message": "Reduce diagram mess in 'match arms have incompatible types' error", "tree": {"sha": "ad06b9049f7c9502773745b5aa2bf7710530dbdb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad06b9049f7c9502773745b5aa2bf7710530dbdb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b0059500f6765612fbda6d33240116f7520d433a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIyBAABCgAdFiEERijF2Cz/ZdaBZKeK+boUO5X/bYIFAl+SErIACgkQ+boUO5X/\nbYL5UQ/3Yb1FrggTbPbenGBFkSimxIhhliv1z1FCEleJB4Mh4rOQPYjn/h+mG7jc\n16JQk2tBv7vEeQMbUogFZGcA4X07JTJbyWPyFloyu34dNwC6uDiVFMI9mYHg0uqP\n5Sn6pBV7QvvdmQh3iwZ+OFVZU9qk/oUsZFlq+wF8snZVha4E+xnO9hHyo5dgzWOi\n9C/3WReFVSk7SOnX2EF3oB1KqW9HpFcBuYHBrSnFLOCcU5QZaZxZVwkqBWwPpIM+\ndNqfuRatw+KopplBe4qFafebioDtv7ja1J1YkED4HodM3qeL27jFqahTqyFqu4wj\nWFTs1QNm+saGiqEq2kucpkKx8ZvCFJfdQ03Hi785duJf2gTWum+a367BT32/zuZA\nZUvG+RX8wE1bJ79IJ0o8LzZRJYce7fIt3L3fQmrnyw5pXyJBvo76tI+ltJlPyMts\nwCaJlf8mqSWKzFpMbW/iovW9nd4XyFEtgZzaik9WpGBaI9PBTc/3ki1b6hkrLgnx\nlys9mWanU31ov1eOHtzpSEq6ibkllSHazkBX9pBtNbXpSdNzPRREfWHaL6DQyPNq\nhkUWh7a1qElsWdX7Oz1UEF6ft8w7XIWfFKC8YubHLYGPnRmE2u7O/0lzl9941gla\nbpFCy4vYogPENqHLeeyesoPPtTbcPG1mSOrhNSafW1RNz25y4g==\n=1z8a\n-----END PGP SIGNATURE-----", "payload": "tree ad06b9049f7c9502773745b5aa2bf7710530dbdb\nparent f82adf5bdba6e2a9fe4a42c9d260f20b60b33960\nauthor David Tolnay <dtolnay@gmail.com> 1603401602 -0700\ncommitter David Tolnay <dtolnay@gmail.com> 1603408562 -0700\n\nReduce diagram mess in 'match arms have incompatible types' error\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b0059500f6765612fbda6d33240116f7520d433a", "html_url": "https://github.com/rust-lang/rust/commit/b0059500f6765612fbda6d33240116f7520d433a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b0059500f6765612fbda6d33240116f7520d433a/comments", "author": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f82adf5bdba6e2a9fe4a42c9d260f20b60b33960", "url": "https://api.github.com/repos/rust-lang/rust/commits/f82adf5bdba6e2a9fe4a42c9d260f20b60b33960", "html_url": "https://github.com/rust-lang/rust/commit/f82adf5bdba6e2a9fe4a42c9d260f20b60b33960"}], "stats": {"total": 66, "additions": 38, "deletions": 28}, "files": [{"sha": "3a0ec6327c18643297e2e4978e6e0ea513f397d3", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b0059500f6765612fbda6d33240116f7520d433a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0059500f6765612fbda6d33240116f7520d433a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=b0059500f6765612fbda6d33240116f7520d433a", "patch": "@@ -619,6 +619,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 scrut_hir_id,\n                 opt_suggest_box_span,\n                 arm_span,\n+                scrut_span,\n                 ..\n             }) => match source {\n                 hir::MatchSource::IfLetDesugar { .. } => {\n@@ -664,18 +665,29 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                         Some(ty::error::ExpectedFound { expected, .. }) => expected,\n                         _ => last_ty,\n                     });\n-                    let msg = \"`match` arms have incompatible types\";\n-                    err.span_label(cause.span, msg);\n+                    let source_map = self.tcx.sess.source_map();\n+                    let mut any_multiline_arm = source_map.is_multiline(arm_span);\n                     if prior_arms.len() <= 4 {\n                         for sp in prior_arms {\n+                            any_multiline_arm |= source_map.is_multiline(*sp);\n                             err.span_label(*sp, format!(\"this is found to be of type `{}`\", t));\n                         }\n                     } else if let Some(sp) = prior_arms.last() {\n+                        any_multiline_arm |= source_map.is_multiline(*sp);\n                         err.span_label(\n                             *sp,\n                             format!(\"this and all prior arms are found to be of type `{}`\", t),\n                         );\n                     }\n+                    let outer_error_span = if any_multiline_arm {\n+                        // Cover just `match` and the scrutinee expression, not\n+                        // the entire match body, to reduce diagram noise.\n+                        cause.span.shrink_to_lo().to(scrut_span)\n+                    } else {\n+                        cause.span\n+                    };\n+                    let msg = \"`match` arms have incompatible types\";\n+                    err.span_label(outer_error_span, msg);\n                     if let Some(sp) = semi_span {\n                         err.span_suggestion_short(\n                             sp,"}, {"sha": "bbc46b8d6083562ae070a76b14133a1490ffbe7c", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b0059500f6765612fbda6d33240116f7520d433a/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0059500f6765612fbda6d33240116f7520d433a/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=b0059500f6765612fbda6d33240116f7520d433a", "patch": "@@ -343,6 +343,7 @@ static_assert_size!(ObligationCauseCode<'_>, 32);\n #[derive(Clone, Debug, PartialEq, Eq, Hash, Lift)]\n pub struct MatchExpressionArmCause<'tcx> {\n     pub arm_span: Span,\n+    pub scrut_span: Span,\n     pub semi_span: Option<Span>,\n     pub source: hir::MatchSource,\n     pub prior_arms: Vec<Span>,"}, {"sha": "398e013e62fb561b0f58da9bec9f8bb6c0388f95", "filename": "compiler/rustc_typeck/src/check/_match.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b0059500f6765612fbda6d33240116f7520d433a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0059500f6765612fbda6d33240116f7520d433a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs?ref=b0059500f6765612fbda6d33240116f7520d433a", "patch": "@@ -201,6 +201,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         expr.span,\n                         ObligationCauseCode::MatchExpressionArm(box MatchExpressionArmCause {\n                             arm_span,\n+                            scrut_span: scrut.span,\n                             semi_span,\n                             source: match_src,\n                             prior_arms: other_arms.clone(),"}, {"sha": "008b1c1e93d6d8641ff095ca498eaaea7651ee61", "filename": "src/test/ui/match/match-incompat-type-semi.stderr", "status": "modified", "additions": 22, "deletions": 26, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/b0059500f6765612fbda6d33240116f7520d433a/src%2Ftest%2Fui%2Fmatch%2Fmatch-incompat-type-semi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b0059500f6765612fbda6d33240116f7520d433a/src%2Ftest%2Fui%2Fmatch%2Fmatch-incompat-type-semi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-incompat-type-semi.stderr?ref=b0059500f6765612fbda6d33240116f7520d433a", "patch": "@@ -56,36 +56,32 @@ LL | |     };\n error[E0308]: `match` arms have incompatible types\n   --> $DIR/match-incompat-type-semi.rs:39:17\n    |\n-LL |        let _ = match Some(42) {\n-   |   _____________-\n-LL |  |         Some(x) => {\n-LL |  |             x\n-   |  |             - this is found to be of type `{integer}`\n-LL |  |         },\n-LL |  |         None => {\n-   |  |_________________^\n-LL | ||         },\n-   | ||_________^ expected integer, found `()`\n-LL |  |     };\n-   |  |_____- `match` arms have incompatible types\n+LL |       let _ = match Some(42) {\n+   |               -------------- `match` arms have incompatible types\n+LL |           Some(x) => {\n+LL |               x\n+   |               - this is found to be of type `{integer}`\n+LL |           },\n+LL |           None => {\n+   |  _________________^\n+LL | |         },\n+   | |_________^ expected integer, found `()`\n \n error[E0308]: `match` arms have incompatible types\n   --> $DIR/match-incompat-type-semi.rs:50:17\n    |\n-LL |        let _ = match Some(42) {\n-   |   _____________-\n-LL |  |         Some(x) => \"rust-lang.org\"\n-   |  |____________________-\n-LL | ||             .chars()\n-LL | ||             .skip(1)\n-LL | ||             .chain(Some(x as u8 as char))\n-LL | ||             .take(10)\n-LL | ||             .any(char::is_alphanumeric),\n-   | ||_______________________________________- this is found to be of type `bool`\n-LL |  |         None => {}\n-   |  |                 ^^ expected `bool`, found `()`\n-LL |  |     };\n-   |  |_____- `match` arms have incompatible types\n+LL |       let _ = match Some(42) {\n+   |               -------------- `match` arms have incompatible types\n+LL |           Some(x) => \"rust-lang.org\"\n+   |  ____________________-\n+LL | |             .chars()\n+LL | |             .skip(1)\n+LL | |             .chain(Some(x as u8 as char))\n+LL | |             .take(10)\n+LL | |             .any(char::is_alphanumeric),\n+   | |_______________________________________- this is found to be of type `bool`\n+LL |           None => {}\n+   |                   ^^ expected `bool`, found `()`\n \n error: aborting due to 5 previous errors\n "}]}