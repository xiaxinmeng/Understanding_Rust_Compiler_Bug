{"sha": "ba2efe96aeada34c1e2dc267a1a35948bdda91f8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhMmVmZTk2YWVhZGEzNGMxZTJkYzI2N2ExYTM1OTQ4YmRkYTkxZjg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-02-13T02:09:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-02-13T02:09:15Z"}, "message": "Auto merge of #22219 - pnkfelix:partial-reinit, r=pnkfelix\n\nborrowck: Prevent partial reinitialization of uninitialized structures\r\n\r\nThis is a pnkfelix-swiped squash of #22079, which was a rebase and revision of #18963\r\n\r\nFixes #18571.", "tree": {"sha": "9654aeeeafc972a1ae71a4278362750810a3f81f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9654aeeeafc972a1ae71a4278362750810a3f81f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba2efe96aeada34c1e2dc267a1a35948bdda91f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba2efe96aeada34c1e2dc267a1a35948bdda91f8", "html_url": "https://github.com/rust-lang/rust/commit/ba2efe96aeada34c1e2dc267a1a35948bdda91f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba2efe96aeada34c1e2dc267a1a35948bdda91f8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39b463f15328f448c13fa990f9fc8897e0af55c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/39b463f15328f448c13fa990f9fc8897e0af55c2", "html_url": "https://github.com/rust-lang/rust/commit/39b463f15328f448c13fa990f9fc8897e0af55c2"}, {"sha": "6cc3b00d3f7b1e7512d85830bf62f2acc461237d", "url": "https://api.github.com/repos/rust-lang/rust/commits/6cc3b00d3f7b1e7512d85830bf62f2acc461237d", "html_url": "https://github.com/rust-lang/rust/commit/6cc3b00d3f7b1e7512d85830bf62f2acc461237d"}], "stats": {"total": 182, "additions": 181, "deletions": 1}, "files": [{"sha": "a18e8b16e8baccd45f23a9b935434dce91fea653", "filename": "src/librustc_borrowck/borrowck/check_loans.rs", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/ba2efe96aeada34c1e2dc267a1a35948bdda91f8/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba2efe96aeada34c1e2dc267a1a35948bdda91f8/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs?ref=ba2efe96aeada34c1e2dc267a1a35948bdda91f8", "patch": "@@ -699,6 +699,11 @@ impl<'a, 'tcx> CheckLoanCtxt<'a, 'tcx> {\n                               lp: &Rc<LoanPath<'tcx>>) {\n         debug!(\"check_if_path_is_moved(id={}, use_kind={:?}, lp={})\",\n                id, use_kind, lp.repr(self.bccx.tcx));\n+\n+        // FIXME (22079): if you find yourself tempted to cut and paste\n+        // the body below and then specializing the error reporting,\n+        // consider refactoring this instead!\n+\n         let base_lp = owned_ptr_base_path_rc(lp);\n         self.move_data.each_move_of(id, &base_lp, |the_move, moved_lp| {\n             self.bccx.report_use_of_moved_value(\n@@ -745,6 +750,29 @@ impl<'a, 'tcx> CheckLoanCtxt<'a, 'tcx> {\n                                                      use_kind, lp_base);\n             }\n             LpExtend(ref lp_base, _, LpInterior(InteriorField(_))) => {\n+                match lp_base.to_type().sty {\n+                    ty::ty_struct(def_id, _) | ty::ty_enum(def_id, _) => {\n+                        if ty::has_dtor(self.tcx(), def_id) {\n+                            // In the case where the owner implements drop, then\n+                            // the path must be initialized to prevent a case of\n+                            // partial reinitialization\n+                            //\n+                            // FIXME (22079): could refactor via hypothetical\n+                            // generalized check_if_path_is_moved\n+                            let loan_path = owned_ptr_base_path_rc(lp_base);\n+                            self.move_data.each_move_of(id, &loan_path, |_, _| {\n+                                self.bccx\n+                                    .report_partial_reinitialization_of_uninitialized_structure(\n+                                        span,\n+                                        &*loan_path);\n+                                false\n+                            });\n+                            return;\n+                        }\n+                    },\n+                    _ => {},\n+                }\n+\n                 // assigning to `P.f` is ok if assigning to `P` is ok\n                 self.check_if_assigned_path_is_moved(id, span,\n                                                      use_kind, lp_base);\n@@ -775,10 +803,12 @@ impl<'a, 'tcx> CheckLoanCtxt<'a, 'tcx> {\n                     mark_variable_as_used_mut(self, assignee_cmt);\n                 }\n             }\n+\n             return;\n         }\n \n-        // Initializations are OK.\n+        // Initializations are OK if and only if they aren't partial\n+        // reinitialization of a partially-uninitialized structure.\n         if mode == euv::Init {\n             return\n         }"}, {"sha": "7c055bc3118b1b03c9b7f52d8d5f1b4e25d3f5eb", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ba2efe96aeada34c1e2dc267a1a35948bdda91f8/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba2efe96aeada34c1e2dc267a1a35948bdda91f8/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=ba2efe96aeada34c1e2dc267a1a35948bdda91f8", "patch": "@@ -686,6 +686,18 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n         }\n     }\n \n+    pub fn report_partial_reinitialization_of_uninitialized_structure(\n+            &self,\n+            span: Span,\n+            lp: &LoanPath<'tcx>) {\n+        self.tcx\n+            .sess\n+            .span_err(span,\n+                      (format!(\"partial reinitialization of uninitialized \\\n+                               structure `{}`\",\n+                               self.loan_path_to_string(lp))).as_slice());\n+    }\n+\n     pub fn report_reassigned_immutable_variable(&self,\n                                                 span: Span,\n                                                 lp: &LoanPath<'tcx>,"}, {"sha": "1ee040a0705ae43b81fae680935c804aa7042b1d", "filename": "src/test/compile-fail/borrowck-partial-reinit-1.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/ba2efe96aeada34c1e2dc267a1a35948bdda91f8/src%2Ftest%2Fcompile-fail%2Fborrowck-partial-reinit-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba2efe96aeada34c1e2dc267a1a35948bdda91f8/src%2Ftest%2Fcompile-fail%2Fborrowck-partial-reinit-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-partial-reinit-1.rs?ref=ba2efe96aeada34c1e2dc267a1a35948bdda91f8", "patch": "@@ -0,0 +1,49 @@\n+// Copyright 2014-2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct Test;\n+\n+struct Test2 {\n+    b: Option<Test>,\n+}\n+\n+struct Test3(Option<Test>);\n+\n+impl Drop for Test {\n+    fn drop(&mut self) {\n+        println!(\"dropping!\");\n+    }\n+}\n+\n+impl Drop for Test2 {\n+    fn drop(&mut self) {}\n+}\n+\n+impl Drop for Test3 {\n+    fn drop(&mut self) {}\n+}\n+\n+fn stuff() {\n+    let mut t = Test2 { b: None };\n+    let u = Test;\n+    drop(t);\n+    t.b = Some(u);\n+    //~^ ERROR partial reinitialization of uninitialized structure `t`\n+\n+    let mut t = Test3(None);\n+    let u = Test;\n+    drop(t);\n+    t.0 = Some(u);\n+    //~^ ERROR partial reinitialization of uninitialized structure `t`\n+}\n+\n+fn main() {\n+    stuff()\n+}"}, {"sha": "0926ba6e4325007716502d6cd606dab80c06400e", "filename": "src/test/compile-fail/borrowck-partial-reinit-2.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/ba2efe96aeada34c1e2dc267a1a35948bdda91f8/src%2Ftest%2Fcompile-fail%2Fborrowck-partial-reinit-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba2efe96aeada34c1e2dc267a1a35948bdda91f8/src%2Ftest%2Fcompile-fail%2Fborrowck-partial-reinit-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-partial-reinit-2.rs?ref=ba2efe96aeada34c1e2dc267a1a35948bdda91f8", "patch": "@@ -0,0 +1,34 @@\n+// Copyright 2014-2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct Test {\n+    a: isize,\n+    b: Option<Box<Test>>,\n+}\n+\n+impl Drop for Test {\n+    fn drop(&mut self) {\n+        println!(\"Dropping {}\", self.a);\n+    }\n+}\n+\n+fn stuff() {\n+    let mut t = Test { a: 1, b: None};\n+    let mut u = Test { a: 2, b: Some(Box::new(t))};\n+    t.b = Some(Box::new(u));\n+    //~^ ERROR partial reinitialization of uninitialized structure `t`\n+    println!(\"done\");\n+}\n+\n+fn main() {\n+    stuff();\n+    println!(\"Hello, world!\")\n+}\n+"}, {"sha": "0aa73892b8229d76f75eac82d9aaf6cd6354a237", "filename": "src/test/compile-fail/borrowck-partial-reinit-3.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ba2efe96aeada34c1e2dc267a1a35948bdda91f8/src%2Ftest%2Fcompile-fail%2Fborrowck-partial-reinit-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba2efe96aeada34c1e2dc267a1a35948bdda91f8/src%2Ftest%2Fcompile-fail%2Fborrowck-partial-reinit-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-partial-reinit-3.rs?ref=ba2efe96aeada34c1e2dc267a1a35948bdda91f8", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+use std::mem;\n+\n+struct Test { f: usize }\n+impl Drop for Test {\n+    fn drop(&mut self) {}\n+}\n+\n+fn main() {\n+    let mut x = (Test { f: 2 }, Test { f: 4 });\n+    mem::drop(x.0);\n+    x.0.f = 3;\n+    //~^ ERROR partial reinitialization of uninitialized structure `x.0`\n+}"}, {"sha": "774e04ecb298eaa83d97ed32b5ed6b3c31ceeca4", "filename": "src/test/compile-fail/borrowck-partial-reinit-4.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/ba2efe96aeada34c1e2dc267a1a35948bdda91f8/src%2Ftest%2Fcompile-fail%2Fborrowck-partial-reinit-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba2efe96aeada34c1e2dc267a1a35948bdda91f8/src%2Ftest%2Fcompile-fail%2Fborrowck-partial-reinit-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-partial-reinit-4.rs?ref=ba2efe96aeada34c1e2dc267a1a35948bdda91f8", "patch": "@@ -0,0 +1,33 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct Test;\n+\n+struct Test2(Option<Test>);\n+\n+impl Drop for Test {\n+    fn drop(&mut self) {\n+        println!(\"dropping!\");\n+    }\n+}\n+\n+impl Drop for Test2 {\n+    fn drop(&mut self) {}\n+}\n+\n+fn stuff() {\n+    let mut x : (Test2, Test2);\n+    (x.0).0 = Some(Test);\n+    //~^ ERROR partial reinitialization of uninitialized structure `x.0`\n+}\n+\n+fn main() {\n+    stuff()\n+}"}]}