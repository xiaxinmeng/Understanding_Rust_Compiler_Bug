{"sha": "44f4510caa6becafc3621253e8115d94b6bd4423", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0ZjQ1MTBjYWE2YmVjYWZjMzYyMTI1M2U4MTE1ZDk0YjZiZDQ0MjM=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2020-09-16T10:35:09Z"}, "committer": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2020-09-16T10:35:09Z"}, "message": "Store `Import` indices for later reconstruction", "tree": {"sha": "24ac7cbedd43e646d47b3b99c45c72c30db8938d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24ac7cbedd43e646d47b3b99c45c72c30db8938d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/44f4510caa6becafc3621253e8115d94b6bd4423", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/44f4510caa6becafc3621253e8115d94b6bd4423", "html_url": "https://github.com/rust-lang/rust/commit/44f4510caa6becafc3621253e8115d94b6bd4423", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/44f4510caa6becafc3621253e8115d94b6bd4423/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b14bf68ce62bc712ed9ca9f977dd7efbd6fe4fd7", "url": "https://api.github.com/repos/rust-lang/rust/commits/b14bf68ce62bc712ed9ca9f977dd7efbd6fe4fd7", "html_url": "https://github.com/rust-lang/rust/commit/b14bf68ce62bc712ed9ca9f977dd7efbd6fe4fd7"}], "stats": {"total": 13, "additions": 9, "deletions": 4}, "files": [{"sha": "f02cfb0c692827a38a342fc785f050f8ca12dd44", "filename": "crates/hir_def/src/item_tree.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/44f4510caa6becafc3621253e8115d94b6bd4423/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44f4510caa6becafc3621253e8115d94b6bd4423/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs?ref=44f4510caa6becafc3621253e8115d94b6bd4423", "patch": "@@ -291,7 +291,6 @@ pub enum AttrOwner {\n \n     Variant(Idx<Variant>),\n     Field(Idx<Field>),\n-    // FIXME: Store variant and field attrs, and stop reparsing them in `attrs_query`.\n }\n \n macro_rules! from_attrs {\n@@ -483,6 +482,11 @@ pub struct Import {\n     /// AST ID of the `use` or `extern crate` item this import was derived from. Note that many\n     /// `Import`s can map to the same `use` item.\n     pub ast_id: FileAstId<ast::Use>,\n+    /// Index of this `Import` when the containing `Use` is visited via `ModPath::expand_use_item`.\n+    ///\n+    /// This can be used to get the `UseTree` this `Import` corresponds to and allows emitting\n+    /// precise diagnostics.\n+    pub index: usize,\n }\n \n #[derive(Debug, Clone, Eq, PartialEq)]"}, {"sha": "9160bfafe83659fe8c52cc277c8d9f161e8a0764", "filename": "crates/hir_def/src/item_tree/lower.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/44f4510caa6becafc3621253e8115d94b6bd4423/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44f4510caa6becafc3621253e8115d94b6bd4423/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs?ref=44f4510caa6becafc3621253e8115d94b6bd4423", "patch": "@@ -482,14 +482,15 @@ impl Ctx {\n         ModPath::expand_use_item(\n             InFile::new(self.file, use_item.clone()),\n             &self.hygiene,\n-            |path, _tree, is_glob, alias| {\n+            |path, _use_tree, is_glob, alias| {\n                 imports.push(id(tree.imports.alloc(Import {\n                     path,\n                     alias,\n                     visibility,\n                     is_glob,\n                     is_prelude,\n                     ast_id,\n+                    index: imports.len(),\n                 })));\n             },\n         );"}, {"sha": "d26c032b714a9c3ed92abf4c83c612ee976b93d6", "filename": "crates/hir_def/src/item_tree/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/44f4510caa6becafc3621253e8115d94b6bd4423/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44f4510caa6becafc3621253e8115d94b6bd4423/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Ftests.rs?ref=44f4510caa6becafc3621253e8115d94b6bd4423", "patch": "@@ -228,9 +228,9 @@ fn smoke() {\n \n             top-level items:\n             #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"attr_on_use\"))] }, input: None }]) }]\n-            Import { path: ModPath { kind: Plain, segments: [Name(Text(\"a\"))] }, alias: None, visibility: RawVisibilityId(\"pub(self)\"), is_glob: false, is_prelude: false, ast_id: FileAstId::<syntax::ast::generated::nodes::Use>(0) }\n+            Import { path: ModPath { kind: Plain, segments: [Name(Text(\"a\"))] }, alias: None, visibility: RawVisibilityId(\"pub(self)\"), is_glob: false, is_prelude: false, ast_id: FileAstId::<syntax::ast::generated::nodes::Use>(0), index: 0 }\n             #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"attr_on_use\"))] }, input: None }]) }]\n-            Import { path: ModPath { kind: Plain, segments: [Name(Text(\"b\"))] }, alias: None, visibility: RawVisibilityId(\"pub(self)\"), is_glob: true, is_prelude: false, ast_id: FileAstId::<syntax::ast::generated::nodes::Use>(0) }\n+            Import { path: ModPath { kind: Plain, segments: [Name(Text(\"b\"))] }, alias: None, visibility: RawVisibilityId(\"pub(self)\"), is_glob: true, is_prelude: false, ast_id: FileAstId::<syntax::ast::generated::nodes::Use>(0), index: 1 }\n             #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"ext_crate\"))] }, input: None }]) }]\n             ExternCrate { path: ModPath { kind: Plain, segments: [Name(Text(\"krate\"))] }, alias: None, visibility: RawVisibilityId(\"pub(self)\"), is_macro_use: false, ast_id: FileAstId::<syntax::ast::generated::nodes::ExternCrate>(1) }\n             #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"on_trait\"))] }, input: None }]) }]"}]}