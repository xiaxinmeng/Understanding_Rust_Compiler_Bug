{"sha": "f3579268372723bc4ff7b76090c090aa7b9e6a3a", "node_id": "C_kwDOAAsO6NoAKGYzNTc5MjY4MzcyNzIzYmM0ZmY3Yjc2MDkwYzA5MGFhN2I5ZTZhM2E", "commit": {"author": {"name": "joboet", "email": "jonasboettiger@icloud.com", "date": "2022-07-18T08:56:10Z"}, "committer": {"name": "joboet", "email": "jonasboettiger@icloud.com", "date": "2022-07-18T08:56:10Z"}, "message": "std: panic instead of deadlocking in mutex implementation on Fuchsia", "tree": {"sha": "4d7ac20660f37648af7867d7f9f1f49e739682e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d7ac20660f37648af7867d7f9f1f49e739682e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f3579268372723bc4ff7b76090c090aa7b9e6a3a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEVuz3PwcqDyifNyYbcE4BSbAZSzwFAmLVICoACgkQcE4BSbAZ\nSzyuIw/6AonvglLduk6d3Qn7uBa6G7g1pkIK5XD9/EDBRqJV+/ajNwDDc/ugRc/i\nMBwPh4KM6JzBylSgqLAJlB8ew1+IlLNsWXrzpQyutiUsEpP3sVbMi6EIoneou5a7\nUGW9xSvhXkSlVrw9OxoGR/QBSUGKXMzjfupHrV8ejzo4p+el7awPiVOq8lwdf84J\nqRoqyVX+VMRpCcOX+PrSDh4a71/OiqgknUREuK0c484/nx9bIeHRZD12XY6luxGX\nz2KhrG1h459obA8UwP98jx1hPOwJyGMTTVMfeAQwG8iAACrRPP4fHjSBpn+qUEhj\nFaE4yVqglZcDiS0VGMzgLTErHeZn/tCwWNOM+eTocthpz8kXDYeQ9W3faYoxZ+Z4\n8Qv6yd13iBz3IMiZt4SfMsPww7qOR6fqi9DFY5HtFKyiAQO5GKtVcTVP1IoP4VY2\nHCYaGjq4/x31qXmX85u+E74NFxxP/jCTY7D6nE7LRrPLCdqUq1PL96q/+igqyml9\nVc9SpoNPTyahIG/83xKJesA/K2DrruC/53qINnp3zUJlpYYty7OaD3v1R0JclDQK\nt/D08poaJaKhnXmU2l+Thx8Vl2B/daxCs3mCTmX3X4SwZHxiiRbjkXB1I8mcnL8b\nJpH4FKARbJMkF///aGEdUeF457QAXWU0i7E2DFNDywRzo56IaHw=\n=NNg0\n-----END PGP SIGNATURE-----", "payload": "tree 4d7ac20660f37648af7867d7f9f1f49e739682e2\nparent 0d91b08970301ae586031b1b2437a44115074efc\nauthor joboet <jonasboettiger@icloud.com> 1658134570 +0200\ncommitter joboet <jonasboettiger@icloud.com> 1658134570 +0200\n\nstd: panic instead of deadlocking in mutex implementation on Fuchsia\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f3579268372723bc4ff7b76090c090aa7b9e6a3a", "html_url": "https://github.com/rust-lang/rust/commit/f3579268372723bc4ff7b76090c090aa7b9e6a3a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f3579268372723bc4ff7b76090c090aa7b9e6a3a/comments", "author": {"login": "joboet", "id": 25721079, "node_id": "MDQ6VXNlcjI1NzIxMDc5", "avatar_url": "https://avatars.githubusercontent.com/u/25721079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joboet", "html_url": "https://github.com/joboet", "followers_url": "https://api.github.com/users/joboet/followers", "following_url": "https://api.github.com/users/joboet/following{/other_user}", "gists_url": "https://api.github.com/users/joboet/gists{/gist_id}", "starred_url": "https://api.github.com/users/joboet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joboet/subscriptions", "organizations_url": "https://api.github.com/users/joboet/orgs", "repos_url": "https://api.github.com/users/joboet/repos", "events_url": "https://api.github.com/users/joboet/events{/privacy}", "received_events_url": "https://api.github.com/users/joboet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "joboet", "id": 25721079, "node_id": "MDQ6VXNlcjI1NzIxMDc5", "avatar_url": "https://avatars.githubusercontent.com/u/25721079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joboet", "html_url": "https://github.com/joboet", "followers_url": "https://api.github.com/users/joboet/followers", "following_url": "https://api.github.com/users/joboet/following{/other_user}", "gists_url": "https://api.github.com/users/joboet/gists{/gist_id}", "starred_url": "https://api.github.com/users/joboet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joboet/subscriptions", "organizations_url": "https://api.github.com/users/joboet/orgs", "repos_url": "https://api.github.com/users/joboet/repos", "events_url": "https://api.github.com/users/joboet/events{/privacy}", "received_events_url": "https://api.github.com/users/joboet/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d91b08970301ae586031b1b2437a44115074efc", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d91b08970301ae586031b1b2437a44115074efc", "html_url": "https://github.com/rust-lang/rust/commit/0d91b08970301ae586031b1b2437a44115074efc"}], "stats": {"total": 31, "additions": 15, "deletions": 16}, "files": [{"sha": "8d5b540212a17c9be272c66d14f6b84a96049c44", "filename": "library/std/src/sys/unix/futex.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f3579268372723bc4ff7b76090c090aa7b9e6a3a/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3579268372723bc4ff7b76090c090aa7b9e6a3a/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffutex.rs?ref=f3579268372723bc4ff7b76090c090aa7b9e6a3a", "patch": "@@ -267,7 +267,6 @@ pub mod zircon {\n         ) -> zx_status_t;\n         pub fn zx_futex_wake(value_ptr: *const zx_futex_t, wake_count: u32) -> zx_status_t;\n         pub fn zx_futex_wake_single_owner(value_ptr: *const zx_futex_t) -> zx_status_t;\n-        pub fn zx_nanosleep(deadline: zx_time_t) -> zx_status_t;\n         pub fn zx_thread_self() -> zx_handle_t;\n     }\n }"}, {"sha": "7372406b32fac683dba4a8a68a97db4ad2ec4e8c", "filename": "library/std/src/sys/unix/locks/fuchsia_mutex.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/f3579268372723bc4ff7b76090c090aa7b9e6a3a/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Ffuchsia_mutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3579268372723bc4ff7b76090c090aa7b9e6a3a/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Ffuchsia_mutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Ffuchsia_mutex.rs?ref=f3579268372723bc4ff7b76090c090aa7b9e6a3a", "patch": "@@ -42,9 +42,9 @@ use crate::sync::atomic::{\n     Ordering::{Acquire, Relaxed, Release},\n };\n use crate::sys::futex::zircon::{\n-    zx_futex_wait, zx_futex_wake_single_owner, zx_handle_t, zx_nanosleep, zx_thread_self,\n-    ZX_ERR_BAD_HANDLE, ZX_ERR_BAD_STATE, ZX_ERR_INVALID_ARGS, ZX_ERR_TIMED_OUT, ZX_ERR_WRONG_TYPE,\n-    ZX_OK, ZX_TIME_INFINITE, ZX_TIME_INFINITE,\n+    zx_futex_wait, zx_futex_wake_single_owner, zx_handle_t, zx_thread_self, ZX_ERR_BAD_HANDLE,\n+    ZX_ERR_BAD_STATE, ZX_ERR_INVALID_ARGS, ZX_ERR_TIMED_OUT, ZX_ERR_WRONG_TYPE, ZX_OK,\n+    ZX_TIME_INFINITE, ZX_TIME_INFINITE,\n };\n \n // The lowest two bits of a `zx_handle_t` are always set, so the lowest bit is used to mark the\n@@ -122,18 +122,18 @@ impl Mutex {\n                         ZX_TIME_INFINITE,\n                     ) {\n                         ZX_OK | ZX_ERR_BAD_STATE | ZX_ERR_TIMED_OUT => (),\n-                        // Either the current thread is trying to lock a mutex it has already locked,\n-                        // or the previous owner did not unlock the mutex before exiting. Since it is\n-                        // not possible to reliably detect which is the case, the current thread is\n-                        // deadlocked. This makes debugging these cases quite a bit harder, but encourages\n-                        // portable programming, since all other platforms do the same.\n-                        //\n-                        // Note that if the thread handle is reused, an arbitrary thread's priority could\n-                        // be boosted by the wait, but there is currently no way to prevent that.\n-                        ZX_ERR_INVALID_ARGS | ZX_ERR_BAD_HANDLE | ZX_ERR_WRONG_TYPE => loop {\n-                            zx_nanosleep(ZX_TIME_INFINITE);\n-                        },\n-                        error => unreachable!(\"unexpected error code in futex wait: {error}\"),\n+                        // Note that if a thread handle is reused after its associated thread\n+                        // exits without unlocking the mutex, an arbitrary thread's priority\n+                        // could be boosted by the wait, but there is currently no way to\n+                        // prevent that.\n+                        ZX_ERR_INVALID_ARGS | ZX_ERR_BAD_HANDLE | ZX_ERR_WRONG_TYPE => {\n+                            panic!(\n+                                \"either the current thread is trying to lock a mutex it has\n+                                already locked, or the previous uowner did not unlock the mutex\n+                                before exiting\"\n+                            )\n+                        }\n+                        error => panic!(\"unexpected error in zx_futex_wait: {error}\"),\n                     }\n                 }\n             }"}]}