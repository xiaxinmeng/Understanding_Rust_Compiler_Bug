{"sha": "37f17bca7ccca0b393a58c87bb87bac18f371f61", "node_id": "C_kwDOAAsO6NoAKDM3ZjE3YmNhN2NjY2EwYjM5M2E1OGM4N2JiODdiYWMxOGYzNzFmNjE", "commit": {"author": {"name": "Jubilee", "email": "46493976+workingjubilee@users.noreply.github.com", "date": "2021-10-08T03:26:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-08T03:26:12Z"}, "message": "Rollup merge of #89082 - smoelius:master, r=kennytm\n\nImplement #85440 (Random test ordering)\n\nThis PR adds `--shuffle` and `--shuffle-seed` options to `libtest`. The options are similar to the [`-shuffle` option](https://github.com/golang/go/blob/c894b442d1e5e150ad33fa3ce13dbfab1c037b3a/src/testing/testing.go#L1482-L1499) that was recently added to Go.\n\nHere are the relevant parts of the help message:\n```\n        --shuffle       Run tests in random order\n        --shuffle-seed SEED\n                        Run tests in random order; seed the random number\n                        generator with SEED\n...\nBy default, the tests are run in alphabetical order. Use --shuffle or set\nRUST_TEST_SHUFFLE to run the tests in random order. Pass the generated\n\"shuffle seed\" to --shuffle-seed (or set RUST_TEST_SHUFFLE_SEED) to run the\ntests in the same order again. Note that --shuffle and --shuffle-seed do not\naffect whether the tests are run in parallel.\n```\nIs an RFC needed for this?", "tree": {"sha": "23c2653b0ede7c0e6fd0b49687219a138ab13796", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23c2653b0ede7c0e6fd0b49687219a138ab13796"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37f17bca7ccca0b393a58c87bb87bac18f371f61", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhX7pVCRBK7hj4Ov3rIwAAH4gIADT8pP+EC2EpeU0fb2cegmwJ\nHxFiIPaL9yZSqQOZdr1JslY9+rI5TPtSR0MllrGJg5SztGvO4Jood9DV6rsQorIE\nMhJWiLyzVw2leIvJsk+QmtXGwag+pZiSZYQS0/1NS3nCqLr7sIqd79BrsvTigzUg\nuPlDSZkGiVa6wG2GTvynyErhvZhIxoCoIu/W2FQ5aoZ5SddvMOP/zR8KgPxZz9hY\n7jtGJEuS5t1WtZpwe09+xCIA+YhnMp/EbKFo6M0MjQR8cAX5vW5U9eKoq3kLs1Wd\n2ySyyr10QuHWYCCp7U3UvxhBwGdW7KqnS+Scm84fKlb5owv03GAWHz6sPh1BQU8=\n=3ncz\n-----END PGP SIGNATURE-----\n", "payload": "tree 23c2653b0ede7c0e6fd0b49687219a138ab13796\nparent 6c17601a2e6fa55e5d2ec7284359bee931c0c61a\nparent ecf474152350664f1227421eeb278b2e8185cd07\nauthor Jubilee <46493976+workingjubilee@users.noreply.github.com> 1633663572 -0700\ncommitter GitHub <noreply@github.com> 1633663572 -0700\n\nRollup merge of #89082 - smoelius:master, r=kennytm\n\nImplement #85440 (Random test ordering)\n\nThis PR adds `--shuffle` and `--shuffle-seed` options to `libtest`. The options are similar to the [`-shuffle` option](https://github.com/golang/go/blob/c894b442d1e5e150ad33fa3ce13dbfab1c037b3a/src/testing/testing.go#L1482-L1499) that was recently added to Go.\n\nHere are the relevant parts of the help message:\n```\n        --shuffle       Run tests in random order\n        --shuffle-seed SEED\n                        Run tests in random order; seed the random number\n                        generator with SEED\n...\nBy default, the tests are run in alphabetical order. Use --shuffle or set\nRUST_TEST_SHUFFLE to run the tests in random order. Pass the generated\n\"shuffle seed\" to --shuffle-seed (or set RUST_TEST_SHUFFLE_SEED) to run the\ntests in the same order again. Note that --shuffle and --shuffle-seed do not\naffect whether the tests are run in parallel.\n```\nIs an RFC needed for this?\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37f17bca7ccca0b393a58c87bb87bac18f371f61", "html_url": "https://github.com/rust-lang/rust/commit/37f17bca7ccca0b393a58c87bb87bac18f371f61", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37f17bca7ccca0b393a58c87bb87bac18f371f61/comments", "author": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c17601a2e6fa55e5d2ec7284359bee931c0c61a", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c17601a2e6fa55e5d2ec7284359bee931c0c61a", "html_url": "https://github.com/rust-lang/rust/commit/6c17601a2e6fa55e5d2ec7284359bee931c0c61a"}, {"sha": "ecf474152350664f1227421eeb278b2e8185cd07", "url": "https://api.github.com/repos/rust-lang/rust/commits/ecf474152350664f1227421eeb278b2e8185cd07", "html_url": "https://github.com/rust-lang/rust/commit/ecf474152350664f1227421eeb278b2e8185cd07"}], "stats": {"total": 353, "additions": 313, "deletions": 40}, "files": [{"sha": "cb40b4e965b2a56d81184ec3d65d7c14b859208b", "filename": "library/test/src/cli.rs", "status": "modified", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/37f17bca7ccca0b393a58c87bb87bac18f371f61/library%2Ftest%2Fsrc%2Fcli.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37f17bca7ccca0b393a58c87bb87bac18f371f61/library%2Ftest%2Fsrc%2Fcli.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fcli.rs?ref=37f17bca7ccca0b393a58c87bb87bac18f371f61", "patch": "@@ -21,6 +21,8 @@ pub struct TestOpts {\n     pub nocapture: bool,\n     pub color: ColorConfig,\n     pub format: OutputFormat,\n+    pub shuffle: bool,\n+    pub shuffle_seed: Option<u64>,\n     pub test_threads: Option<usize>,\n     pub skip: Vec<String>,\n     pub time_options: Option<TestTimeOptions>,\n@@ -138,6 +140,13 @@ fn optgroups() -> getopts::Options {\n \n             `CRITICAL_TIME` here means the limit that should not be exceeded by test.\n             \",\n+        )\n+        .optflag(\"\", \"shuffle\", \"Run tests in random order\")\n+        .optopt(\n+            \"\",\n+            \"shuffle-seed\",\n+            \"Run tests in random order; seed the random number generator with SEED\",\n+            \"SEED\",\n         );\n     opts\n }\n@@ -155,6 +164,12 @@ By default, all tests are run in parallel. This can be altered with the\n --test-threads flag or the RUST_TEST_THREADS environment variable when running\n tests (set it to 1).\n \n+By default, the tests are run in alphabetical order. Use --shuffle or set\n+RUST_TEST_SHUFFLE to run the tests in random order. Pass the generated\n+\"shuffle seed\" to --shuffle-seed (or set RUST_TEST_SHUFFLE_SEED) to run the\n+tests in the same order again. Note that --shuffle and --shuffle-seed do not\n+affect whether the tests are run in parallel.\n+\n All tests have their standard output and standard error captured by default.\n This can be overridden with the --nocapture flag or setting RUST_TEST_NOCAPTURE\n environment variable to a value other than \"0\". Logging is not captured by default.\n@@ -218,6 +233,21 @@ macro_rules! unstable_optflag {\n     }};\n }\n \n+// Gets the option value and checks if unstable features are enabled.\n+macro_rules! unstable_optopt {\n+    ($matches:ident, $allow_unstable:ident, $option_name:literal) => {{\n+        let opt = $matches.opt_str($option_name);\n+        if !$allow_unstable && opt.is_some() {\n+            return Err(format!(\n+                \"The \\\"{}\\\" option is only accepted on the nightly compiler with -Z unstable-options\",\n+                $option_name\n+            ));\n+        }\n+\n+        opt\n+    }};\n+}\n+\n // Implementation of `parse_opts` that doesn't care about help message\n // and returns a `Result`.\n fn parse_opts_impl(matches: getopts::Matches) -> OptRes {\n@@ -227,6 +257,8 @@ fn parse_opts_impl(matches: getopts::Matches) -> OptRes {\n     let force_run_in_process = unstable_optflag!(matches, allow_unstable, \"force-run-in-process\");\n     let exclude_should_panic = unstable_optflag!(matches, allow_unstable, \"exclude-should-panic\");\n     let time_options = get_time_options(&matches, allow_unstable)?;\n+    let shuffle = get_shuffle(&matches, allow_unstable)?;\n+    let shuffle_seed = get_shuffle_seed(&matches, allow_unstable)?;\n \n     let include_ignored = matches.opt_present(\"include-ignored\");\n     let quiet = matches.opt_present(\"quiet\");\n@@ -260,6 +292,8 @@ fn parse_opts_impl(matches: getopts::Matches) -> OptRes {\n         nocapture,\n         color,\n         format,\n+        shuffle,\n+        shuffle_seed,\n         test_threads,\n         skip,\n         time_options,\n@@ -303,6 +337,46 @@ fn get_time_options(\n     Ok(options)\n }\n \n+fn get_shuffle(matches: &getopts::Matches, allow_unstable: bool) -> OptPartRes<bool> {\n+    let mut shuffle = unstable_optflag!(matches, allow_unstable, \"shuffle\");\n+    if !shuffle && allow_unstable {\n+        shuffle = match env::var(\"RUST_TEST_SHUFFLE\") {\n+            Ok(val) => &val != \"0\",\n+            Err(_) => false,\n+        };\n+    }\n+\n+    Ok(shuffle)\n+}\n+\n+fn get_shuffle_seed(matches: &getopts::Matches, allow_unstable: bool) -> OptPartRes<Option<u64>> {\n+    let mut shuffle_seed = match unstable_optopt!(matches, allow_unstable, \"shuffle-seed\") {\n+        Some(n_str) => match n_str.parse::<u64>() {\n+            Ok(n) => Some(n),\n+            Err(e) => {\n+                return Err(format!(\n+                    \"argument for --shuffle-seed must be a number \\\n+                     (error: {})\",\n+                    e\n+                ));\n+            }\n+        },\n+        None => None,\n+    };\n+\n+    if shuffle_seed.is_none() && allow_unstable {\n+        shuffle_seed = match env::var(\"RUST_TEST_SHUFFLE_SEED\") {\n+            Ok(val) => match val.parse::<u64>() {\n+                Ok(n) => Some(n),\n+                Err(_) => panic!(\"RUST_TEST_SHUFFLE_SEED is `{}`, should be a number.\", val),\n+            },\n+            Err(_) => None,\n+        };\n+    }\n+\n+    Ok(shuffle_seed)\n+}\n+\n fn get_test_threads(matches: &getopts::Matches) -> OptPartRes<Option<usize>> {\n     let test_threads = match matches.opt_str(\"test-threads\") {\n         Some(n_str) => match n_str.parse::<usize>() {"}, {"sha": "11c5ab48ed3e8e572faa2b7ade04a105009e197e", "filename": "library/test/src/console.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37f17bca7ccca0b393a58c87bb87bac18f371f61/library%2Ftest%2Fsrc%2Fconsole.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37f17bca7ccca0b393a58c87bb87bac18f371f61/library%2Ftest%2Fsrc%2Fconsole.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fconsole.rs?ref=37f17bca7ccca0b393a58c87bb87bac18f371f61", "patch": "@@ -225,9 +225,9 @@ fn on_test_event(\n     out: &mut dyn OutputFormatter,\n ) -> io::Result<()> {\n     match (*event).clone() {\n-        TestEvent::TeFiltered(ref filtered_tests) => {\n+        TestEvent::TeFiltered(ref filtered_tests, shuffle_seed) => {\n             st.total = filtered_tests.len();\n-            out.write_run_start(filtered_tests.len())?;\n+            out.write_run_start(filtered_tests.len(), shuffle_seed)?;\n         }\n         TestEvent::TeFilteredOut(filtered_out) => {\n             st.filtered_out = filtered_out;"}, {"sha": "6ff1a615eb4d055a7e3f78c5e5271a0101ec8d84", "filename": "library/test/src/event.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37f17bca7ccca0b393a58c87bb87bac18f371f61/library%2Ftest%2Fsrc%2Fevent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37f17bca7ccca0b393a58c87bb87bac18f371f61/library%2Ftest%2Fsrc%2Fevent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fevent.rs?ref=37f17bca7ccca0b393a58c87bb87bac18f371f61", "patch": "@@ -28,7 +28,7 @@ impl CompletedTest {\n \n #[derive(Debug, Clone)]\n pub enum TestEvent {\n-    TeFiltered(Vec<TestDesc>),\n+    TeFiltered(Vec<TestDesc>, Option<u64>),\n     TeWait(TestDesc),\n     TeResult(CompletedTest),\n     TeTimeout(TestDesc),"}, {"sha": "424d3ef7b4106fd29139f73563a31e4a4b36cb9f", "filename": "library/test/src/formatters/json.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/37f17bca7ccca0b393a58c87bb87bac18f371f61/library%2Ftest%2Fsrc%2Fformatters%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37f17bca7ccca0b393a58c87bb87bac18f371f61/library%2Ftest%2Fsrc%2Fformatters%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fformatters%2Fjson.rs?ref=37f17bca7ccca0b393a58c87bb87bac18f371f61", "patch": "@@ -60,10 +60,15 @@ impl<T: Write> JsonFormatter<T> {\n }\n \n impl<T: Write> OutputFormatter for JsonFormatter<T> {\n-    fn write_run_start(&mut self, test_count: usize) -> io::Result<()> {\n+    fn write_run_start(&mut self, test_count: usize, shuffle_seed: Option<u64>) -> io::Result<()> {\n+        let shuffle_seed_json = if let Some(shuffle_seed) = shuffle_seed {\n+            format!(r#\", \"shuffle_seed\": {}\"#, shuffle_seed)\n+        } else {\n+            String::new()\n+        };\n         self.writeln_message(&*format!(\n-            r#\"{{ \"type\": \"suite\", \"event\": \"started\", \"test_count\": {} }}\"#,\n-            test_count\n+            r#\"{{ \"type\": \"suite\", \"event\": \"started\", \"test_count\": {}{} }}\"#,\n+            test_count, shuffle_seed_json\n         ))\n     }\n "}, {"sha": "e2aebee916d0eae7bb4f1364fec83f62660141fa", "filename": "library/test/src/formatters/junit.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/37f17bca7ccca0b393a58c87bb87bac18f371f61/library%2Ftest%2Fsrc%2Fformatters%2Fjunit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37f17bca7ccca0b393a58c87bb87bac18f371f61/library%2Ftest%2Fsrc%2Fformatters%2Fjunit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fformatters%2Fjunit.rs?ref=37f17bca7ccca0b393a58c87bb87bac18f371f61", "patch": "@@ -27,7 +27,11 @@ impl<T: Write> JunitFormatter<T> {\n }\n \n impl<T: Write> OutputFormatter for JunitFormatter<T> {\n-    fn write_run_start(&mut self, _test_count: usize) -> io::Result<()> {\n+    fn write_run_start(\n+        &mut self,\n+        _test_count: usize,\n+        _shuffle_seed: Option<u64>,\n+    ) -> io::Result<()> {\n         // We write xml header on run start\n         self.out.write_all(b\"\\n\")?;\n         self.write_message(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\")"}, {"sha": "cb80859759fad7c55968eeb6ec6b194e4cede049", "filename": "library/test/src/formatters/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37f17bca7ccca0b393a58c87bb87bac18f371f61/library%2Ftest%2Fsrc%2Fformatters%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37f17bca7ccca0b393a58c87bb87bac18f371f61/library%2Ftest%2Fsrc%2Fformatters%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fformatters%2Fmod.rs?ref=37f17bca7ccca0b393a58c87bb87bac18f371f61", "patch": "@@ -18,7 +18,7 @@ pub(crate) use self::pretty::PrettyFormatter;\n pub(crate) use self::terse::TerseFormatter;\n \n pub(crate) trait OutputFormatter {\n-    fn write_run_start(&mut self, test_count: usize) -> io::Result<()>;\n+    fn write_run_start(&mut self, test_count: usize, shuffle_seed: Option<u64>) -> io::Result<()>;\n     fn write_test_start(&mut self, desc: &TestDesc) -> io::Result<()>;\n     fn write_timeout(&mut self, desc: &TestDesc) -> io::Result<()>;\n     fn write_result("}, {"sha": "4a03b4b9147605c392fe76e4d7fa725fb37f9b49", "filename": "library/test/src/formatters/pretty.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/37f17bca7ccca0b393a58c87bb87bac18f371f61/library%2Ftest%2Fsrc%2Fformatters%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37f17bca7ccca0b393a58c87bb87bac18f371f61/library%2Ftest%2Fsrc%2Fformatters%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fformatters%2Fpretty.rs?ref=37f17bca7ccca0b393a58c87bb87bac18f371f61", "patch": "@@ -181,9 +181,14 @@ impl<T: Write> PrettyFormatter<T> {\n }\n \n impl<T: Write> OutputFormatter for PrettyFormatter<T> {\n-    fn write_run_start(&mut self, test_count: usize) -> io::Result<()> {\n+    fn write_run_start(&mut self, test_count: usize, shuffle_seed: Option<u64>) -> io::Result<()> {\n         let noun = if test_count != 1 { \"tests\" } else { \"test\" };\n-        self.write_plain(&format!(\"\\nrunning {} {}\\n\", test_count, noun))\n+        let shuffle_seed_msg = if let Some(shuffle_seed) = shuffle_seed {\n+            format!(\" (shuffle seed: {})\", shuffle_seed)\n+        } else {\n+            String::new()\n+        };\n+        self.write_plain(&format!(\"\\nrunning {} {}{}\\n\", test_count, noun, shuffle_seed_msg))\n     }\n \n     fn write_test_start(&mut self, desc: &TestDesc) -> io::Result<()> {"}, {"sha": "1f2c410cd96f3902493d9a17eab2fc5bc95a466c", "filename": "library/test/src/formatters/terse.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/37f17bca7ccca0b393a58c87bb87bac18f371f61/library%2Ftest%2Fsrc%2Fformatters%2Fterse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37f17bca7ccca0b393a58c87bb87bac18f371f61/library%2Ftest%2Fsrc%2Fformatters%2Fterse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fformatters%2Fterse.rs?ref=37f17bca7ccca0b393a58c87bb87bac18f371f61", "patch": "@@ -170,10 +170,15 @@ impl<T: Write> TerseFormatter<T> {\n }\n \n impl<T: Write> OutputFormatter for TerseFormatter<T> {\n-    fn write_run_start(&mut self, test_count: usize) -> io::Result<()> {\n+    fn write_run_start(&mut self, test_count: usize, shuffle_seed: Option<u64>) -> io::Result<()> {\n         self.total_test_count = test_count;\n         let noun = if test_count != 1 { \"tests\" } else { \"test\" };\n-        self.write_plain(&format!(\"\\nrunning {} {}\\n\", test_count, noun))\n+        let shuffle_seed_msg = if let Some(shuffle_seed) = shuffle_seed {\n+            format!(\" (shuffle seed: {})\", shuffle_seed)\n+        } else {\n+            String::new()\n+        };\n+        self.write_plain(&format!(\"\\nrunning {} {}{}\\n\", test_count, noun, shuffle_seed_msg))\n     }\n \n     fn write_test_start(&mut self, desc: &TestDesc) -> io::Result<()> {"}, {"sha": "049cadf86a6d029d3668882ad1d53b1a19d79f84", "filename": "library/test/src/helpers/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/37f17bca7ccca0b393a58c87bb87bac18f371f61/library%2Ftest%2Fsrc%2Fhelpers%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37f17bca7ccca0b393a58c87bb87bac18f371f61/library%2Ftest%2Fsrc%2Fhelpers%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fhelpers%2Fmod.rs?ref=37f17bca7ccca0b393a58c87bb87bac18f371f61", "patch": "@@ -5,3 +5,4 @@ pub mod concurrency;\n pub mod exit_code;\n pub mod isatty;\n pub mod metrics;\n+pub mod shuffle;"}, {"sha": "ca503106c556c43b5fd92e377a1ee6a4fc8db8e7", "filename": "library/test/src/helpers/shuffle.rs", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/37f17bca7ccca0b393a58c87bb87bac18f371f61/library%2Ftest%2Fsrc%2Fhelpers%2Fshuffle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37f17bca7ccca0b393a58c87bb87bac18f371f61/library%2Ftest%2Fsrc%2Fhelpers%2Fshuffle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fhelpers%2Fshuffle.rs?ref=37f17bca7ccca0b393a58c87bb87bac18f371f61", "patch": "@@ -0,0 +1,67 @@\n+use crate::cli::TestOpts;\n+use crate::types::{TestDescAndFn, TestId, TestName};\n+use std::collections::hash_map::DefaultHasher;\n+use std::hash::Hasher;\n+use std::time::{SystemTime, UNIX_EPOCH};\n+\n+pub fn get_shuffle_seed(opts: &TestOpts) -> Option<u64> {\n+    opts.shuffle_seed.or_else(|| {\n+        if opts.shuffle {\n+            Some(\n+                SystemTime::now()\n+                    .duration_since(UNIX_EPOCH)\n+                    .expect(\"Failed to get system time\")\n+                    .as_nanos() as u64,\n+            )\n+        } else {\n+            None\n+        }\n+    })\n+}\n+\n+pub fn shuffle_tests(shuffle_seed: u64, tests: &mut [(TestId, TestDescAndFn)]) {\n+    let test_names: Vec<&TestName> = tests.iter().map(|test| &test.1.desc.name).collect();\n+    let test_names_hash = calculate_hash(&test_names);\n+    let mut rng = Rng::new(shuffle_seed, test_names_hash);\n+    shuffle(&mut rng, tests);\n+}\n+\n+// `shuffle` is from `rust-analyzer/src/cli/analysis_stats.rs`.\n+fn shuffle<T>(rng: &mut Rng, slice: &mut [T]) {\n+    for i in 0..slice.len() {\n+        randomize_first(rng, &mut slice[i..]);\n+    }\n+\n+    fn randomize_first<T>(rng: &mut Rng, slice: &mut [T]) {\n+        assert!(!slice.is_empty());\n+        let idx = rng.rand_range(0..slice.len() as u64) as usize;\n+        slice.swap(0, idx);\n+    }\n+}\n+\n+struct Rng {\n+    state: u64,\n+    extra: u64,\n+}\n+\n+impl Rng {\n+    fn new(seed: u64, extra: u64) -> Self {\n+        Self { state: seed, extra }\n+    }\n+\n+    fn rand_range(&mut self, range: core::ops::Range<u64>) -> u64 {\n+        self.rand_u64() % (range.end - range.start) + range.start\n+    }\n+\n+    fn rand_u64(&mut self) -> u64 {\n+        self.state = calculate_hash(&(self.state, self.extra));\n+        self.state\n+    }\n+}\n+\n+// `calculate_hash` is from `core/src/hash/mod.rs`.\n+fn calculate_hash<T: core::hash::Hash>(t: &T) -> u64 {\n+    let mut s = DefaultHasher::new();\n+    t.hash(&mut s);\n+    s.finish()\n+}"}, {"sha": "99d951d8016bb4aef1e0ad0695f53b80ef488ddf", "filename": "library/test/src/lib.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/37f17bca7ccca0b393a58c87bb87bac18f371f61/library%2Ftest%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37f17bca7ccca0b393a58c87bb87bac18f371f61/library%2Ftest%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Flib.rs?ref=37f17bca7ccca0b393a58c87bb87bac18f371f61", "patch": "@@ -91,6 +91,7 @@ mod tests;\n use event::{CompletedTest, TestEvent};\n use helpers::concurrency::get_concurrency;\n use helpers::exit_code::get_exit_code;\n+use helpers::shuffle::{get_shuffle_seed, shuffle_tests};\n use options::{Concurrent, RunStrategy};\n use test_result::*;\n use time::TestExecTime;\n@@ -247,7 +248,9 @@ where\n \n     let filtered_descs = filtered_tests.iter().map(|t| t.desc.clone()).collect();\n \n-    let event = TestEvent::TeFiltered(filtered_descs);\n+    let shuffle_seed = get_shuffle_seed(opts);\n+\n+    let event = TestEvent::TeFiltered(filtered_descs, shuffle_seed);\n     notify_about_test_event(event)?;\n \n     let (filtered_tests, filtered_benchs): (Vec<_>, _) = filtered_tests\n@@ -259,7 +262,11 @@ where\n     let concurrency = opts.test_threads.unwrap_or_else(get_concurrency);\n \n     let mut remaining = filtered_tests;\n-    remaining.reverse();\n+    if let Some(shuffle_seed) = shuffle_seed {\n+        shuffle_tests(shuffle_seed, &mut remaining);\n+    } else {\n+        remaining.reverse();\n+    }\n     let mut pending = 0;\n \n     let (tx, rx) = channel::<CompletedTest>();"}, {"sha": "718613895dee4e30fd2170824b3d07e80c994cb3", "filename": "library/test/src/tests.rs", "status": "modified", "additions": 94, "deletions": 25, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/37f17bca7ccca0b393a58c87bb87bac18f371f61/library%2Ftest%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37f17bca7ccca0b393a58c87bb87bac18f371f61/library%2Ftest%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Ftests.rs?ref=37f17bca7ccca0b393a58c87bb87bac18f371f61", "patch": "@@ -45,6 +45,8 @@ impl TestOpts {\n             nocapture: false,\n             color: AutoColor,\n             format: OutputFormat::Pretty,\n+            shuffle: false,\n+            shuffle_seed: None,\n             test_threads: None,\n             skip: vec![],\n             time_options: None,\n@@ -565,11 +567,7 @@ pub fn exact_filter_match() {\n     assert_eq!(exact.len(), 2);\n }\n \n-#[test]\n-pub fn sort_tests() {\n-    let mut opts = TestOpts::new();\n-    opts.run_tests = true;\n-\n+fn sample_tests() -> Vec<TestDescAndFn> {\n     let names = vec![\n         \"sha1::test\".to_string(),\n         \"isize::test_to_str\".to_string(),\n@@ -583,26 +581,32 @@ pub fn sort_tests() {\n         \"test::run_include_ignored_option\".to_string(),\n         \"test::sort_tests\".to_string(),\n     ];\n-    let tests = {\n-        fn testfn() {}\n-        let mut tests = Vec::new();\n-        for name in &names {\n-            let test = TestDescAndFn {\n-                desc: TestDesc {\n-                    name: DynTestName((*name).clone()),\n-                    ignore: false,\n-                    should_panic: ShouldPanic::No,\n-                    allow_fail: false,\n-                    compile_fail: false,\n-                    no_run: false,\n-                    test_type: TestType::Unknown,\n-                },\n-                testfn: DynTestFn(Box::new(testfn)),\n-            };\n-            tests.push(test);\n-        }\n-        tests\n-    };\n+    fn testfn() {}\n+    let mut tests = Vec::new();\n+    for name in &names {\n+        let test = TestDescAndFn {\n+            desc: TestDesc {\n+                name: DynTestName((*name).clone()),\n+                ignore: false,\n+                should_panic: ShouldPanic::No,\n+                allow_fail: false,\n+                compile_fail: false,\n+                no_run: false,\n+                test_type: TestType::Unknown,\n+            },\n+            testfn: DynTestFn(Box::new(testfn)),\n+        };\n+        tests.push(test);\n+    }\n+    tests\n+}\n+\n+#[test]\n+pub fn sort_tests() {\n+    let mut opts = TestOpts::new();\n+    opts.run_tests = true;\n+\n+    let tests = sample_tests();\n     let filtered = filter_tests(&opts, tests);\n \n     let expected = vec![\n@@ -624,6 +628,71 @@ pub fn sort_tests() {\n     }\n }\n \n+#[test]\n+pub fn shuffle_tests() {\n+    let mut opts = TestOpts::new();\n+    opts.shuffle = true;\n+\n+    let shuffle_seed = get_shuffle_seed(&opts).unwrap();\n+\n+    let left =\n+        sample_tests().into_iter().enumerate().map(|(i, e)| (TestId(i), e)).collect::<Vec<_>>();\n+    let mut right =\n+        sample_tests().into_iter().enumerate().map(|(i, e)| (TestId(i), e)).collect::<Vec<_>>();\n+\n+    assert!(left.iter().zip(&right).all(|(a, b)| a.1.desc.name == b.1.desc.name));\n+\n+    helpers::shuffle::shuffle_tests(shuffle_seed, right.as_mut_slice());\n+\n+    assert!(left.iter().zip(right).any(|(a, b)| a.1.desc.name != b.1.desc.name));\n+}\n+\n+#[test]\n+pub fn shuffle_tests_with_seed() {\n+    let mut opts = TestOpts::new();\n+    opts.shuffle = true;\n+\n+    let shuffle_seed = get_shuffle_seed(&opts).unwrap();\n+\n+    let mut left =\n+        sample_tests().into_iter().enumerate().map(|(i, e)| (TestId(i), e)).collect::<Vec<_>>();\n+    let mut right =\n+        sample_tests().into_iter().enumerate().map(|(i, e)| (TestId(i), e)).collect::<Vec<_>>();\n+\n+    helpers::shuffle::shuffle_tests(shuffle_seed, left.as_mut_slice());\n+    helpers::shuffle::shuffle_tests(shuffle_seed, right.as_mut_slice());\n+\n+    assert!(left.iter().zip(right).all(|(a, b)| a.1.desc.name == b.1.desc.name));\n+}\n+\n+#[test]\n+pub fn order_depends_on_more_than_seed() {\n+    let mut opts = TestOpts::new();\n+    opts.shuffle = true;\n+\n+    let shuffle_seed = get_shuffle_seed(&opts).unwrap();\n+\n+    let mut left_tests = sample_tests();\n+    let mut right_tests = sample_tests();\n+\n+    left_tests.pop();\n+    right_tests.remove(0);\n+\n+    let mut left =\n+        left_tests.into_iter().enumerate().map(|(i, e)| (TestId(i), e)).collect::<Vec<_>>();\n+    let mut right =\n+        right_tests.into_iter().enumerate().map(|(i, e)| (TestId(i), e)).collect::<Vec<_>>();\n+\n+    assert_eq!(left.len(), right.len());\n+\n+    assert!(left.iter().zip(&right).all(|(a, b)| a.0 == b.0));\n+\n+    helpers::shuffle::shuffle_tests(shuffle_seed, left.as_mut_slice());\n+    helpers::shuffle::shuffle_tests(shuffle_seed, right.as_mut_slice());\n+\n+    assert!(left.iter().zip(right).any(|(a, b)| a.0 != b.0));\n+}\n+\n #[test]\n pub fn test_metricmap_compare() {\n     let mut m1 = MetricMap::new();"}, {"sha": "23a9f31e8e7da00c10434cb47c6e630ade13afae", "filename": "src/doc/rustc/src/tests/index.md", "status": "modified", "additions": 35, "deletions": 1, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/37f17bca7ccca0b393a58c87bb87bac18f371f61/src%2Fdoc%2Frustc%2Fsrc%2Ftests%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/37f17bca7ccca0b393a58c87bb87bac18f371f61/src%2Fdoc%2Frustc%2Fsrc%2Ftests%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Ftests%2Findex.md?ref=37f17bca7ccca0b393a58c87bb87bac18f371f61", "patch": "@@ -181,6 +181,40 @@ unstable-options` flag. See [tracking issue\n #64888](https://github.com/rust-lang/rust/issues/64888) and the [unstable\n docs](../../unstable-book/compiler-flags/report-time.html) for more information.\n \n+#### `--shuffle`\n+\n+Runs the tests in random order, as opposed to the default alphabetical order.\n+\n+This may also be specified by setting the `RUST_TEST_SHUFFLE` environment\n+variable to anything but `0`.\n+\n+The random number generator seed that is output can be passed to\n+[`--shuffle-seed`](#--shuffle-seed-seed) to run the tests in the same order\n+again.\n+\n+Note that `--shuffle` does not affect whether the tests are run in parallel. To\n+run the tests in random order sequentially, use `--shuffle --test-threads 1`.\n+\n+\u26a0\ufe0f \ud83d\udea7 This option is [unstable](#unstable-options), and requires the `-Z\n+unstable-options` flag. See [tracking issue\n+#89583](https://github.com/rust-lang/rust/issues/89583) for more information.\n+\n+#### `--shuffle-seed` _SEED_\n+\n+Like [`--shuffle`](#--shuffle), but seeds the random number generator with\n+_SEED_. Thus, calling the test harness with `--shuffle-seed` _SEED_ twice runs\n+the tests in the same order both times.\n+\n+_SEED_ is any 64-bit unsigned integer, for example, one produced by\n+[`--shuffle`](#--shuffle).\n+\n+This can also be specified with the `RUST_TEST_SHUFFLE_SEED` environment\n+variable.\n+\n+\u26a0\ufe0f \ud83d\udea7 This option is [unstable](#unstable-options), and requires the `-Z\n+unstable-options` flag. See [tracking issue\n+#89583](https://github.com/rust-lang/rust/issues/89583) for more information.\n+\n ### Output options\n \n The following options affect the output behavior.\n@@ -197,7 +231,7 @@ to the console. Usually the output is captured, and only displayed if the test\n fails.\n \n This may also be specified by setting the `RUST_TEST_NOCAPTURE` environment\n-variable set to anything but `0`.\n+variable to anything but `0`.\n \n #### `--show-output`\n "}, {"sha": "87aba8c5d32bfcae9296c87804bc9853379094fc", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37f17bca7ccca0b393a58c87bb87bac18f371f61/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37f17bca7ccca0b393a58c87bb87bac18f371f61/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=37f17bca7ccca0b393a58c87bb87bac18f371f61", "patch": "@@ -506,6 +506,8 @@ pub fn test_opts(config: &Config) -> test::TestOpts {\n             Err(_) => false,\n         },\n         color: config.color,\n+        shuffle: false,\n+        shuffle_seed: None,\n         test_threads: None,\n         skip: vec![],\n         list: false,"}]}