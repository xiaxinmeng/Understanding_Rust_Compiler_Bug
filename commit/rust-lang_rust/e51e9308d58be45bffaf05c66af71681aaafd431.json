{"sha": "e51e9308d58be45bffaf05c66af71681aaafd431", "node_id": "C_kwDOAAsO6NoAKGU1MWU5MzA4ZDU4YmU0NWJmZmFmMDVjNjZhZjcxNjgxYWFhZmQ0MzE", "commit": {"author": {"name": "kraktus", "email": "kraktus@users.noreply.github.com", "date": "2022-10-12T10:04:41Z"}, "committer": {"name": "kraktus", "email": "kraktus@users.noreply.github.com", "date": "2022-10-12T20:34:32Z"}, "message": "`default_numeric_fallback` do not lint on constants", "tree": {"sha": "84aabf773ce490c4adb166cc1806a7cca69c100b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84aabf773ce490c4adb166cc1806a7cca69c100b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e51e9308d58be45bffaf05c66af71681aaafd431", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e51e9308d58be45bffaf05c66af71681aaafd431", "html_url": "https://github.com/rust-lang/rust/commit/e51e9308d58be45bffaf05c66af71681aaafd431", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e51e9308d58be45bffaf05c66af71681aaafd431/comments", "author": {"login": "kraktus", "id": 56031107, "node_id": "MDQ6VXNlcjU2MDMxMTA3", "avatar_url": "https://avatars.githubusercontent.com/u/56031107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kraktus", "html_url": "https://github.com/kraktus", "followers_url": "https://api.github.com/users/kraktus/followers", "following_url": "https://api.github.com/users/kraktus/following{/other_user}", "gists_url": "https://api.github.com/users/kraktus/gists{/gist_id}", "starred_url": "https://api.github.com/users/kraktus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kraktus/subscriptions", "organizations_url": "https://api.github.com/users/kraktus/orgs", "repos_url": "https://api.github.com/users/kraktus/repos", "events_url": "https://api.github.com/users/kraktus/events{/privacy}", "received_events_url": "https://api.github.com/users/kraktus/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kraktus", "id": 56031107, "node_id": "MDQ6VXNlcjU2MDMxMTA3", "avatar_url": "https://avatars.githubusercontent.com/u/56031107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kraktus", "html_url": "https://github.com/kraktus", "followers_url": "https://api.github.com/users/kraktus/followers", "following_url": "https://api.github.com/users/kraktus/following{/other_user}", "gists_url": "https://api.github.com/users/kraktus/gists{/gist_id}", "starred_url": "https://api.github.com/users/kraktus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kraktus/subscriptions", "organizations_url": "https://api.github.com/users/kraktus/orgs", "repos_url": "https://api.github.com/users/kraktus/repos", "events_url": "https://api.github.com/users/kraktus/events{/privacy}", "received_events_url": "https://api.github.com/users/kraktus/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d588175cae9a2882ab63ffb1fa1704971cff628", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d588175cae9a2882ab63ffb1fa1704971cff628", "html_url": "https://github.com/rust-lang/rust/commit/2d588175cae9a2882ab63ffb1fa1704971cff628"}], "stats": {"total": 133, "additions": 93, "deletions": 40}, "files": [{"sha": "8b5c9d25dc85abb0d9baba91a9950987dd78cdc9", "filename": "clippy_lints/src/default_numeric_fallback.rs", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e51e9308d58be45bffaf05c66af71681aaafd431/clippy_lints%2Fsrc%2Fdefault_numeric_fallback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e51e9308d58be45bffaf05c66af71681aaafd431/clippy_lints%2Fsrc%2Fdefault_numeric_fallback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdefault_numeric_fallback.rs?ref=e51e9308d58be45bffaf05c66af71681aaafd431", "patch": "@@ -1,12 +1,12 @@\n use clippy_utils::diagnostics::span_lint_hir_and_then;\n-use clippy_utils::numeric_literal;\n use clippy_utils::source::snippet_opt;\n+use clippy_utils::{get_parent_node, numeric_literal};\n use if_chain::if_chain;\n use rustc_ast::ast::{LitFloatType, LitIntType, LitKind};\n use rustc_errors::Applicability;\n use rustc_hir::{\n     intravisit::{walk_expr, walk_stmt, Visitor},\n-    Body, Expr, ExprKind, HirId, Lit, Stmt, StmtKind,\n+    Body, Expr, ExprKind, HirId, ItemKind, Lit, Node, Stmt, StmtKind,\n };\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::{\n@@ -55,7 +55,12 @@ declare_lint_pass!(DefaultNumericFallback => [DEFAULT_NUMERIC_FALLBACK]);\n \n impl<'tcx> LateLintPass<'tcx> for DefaultNumericFallback {\n     fn check_body(&mut self, cx: &LateContext<'tcx>, body: &'tcx Body<'_>) {\n-        let mut visitor = NumericFallbackVisitor::new(cx);\n+        let is_parent_const = if let Some(Node::Item(item)) = get_parent_node(cx.tcx, body.id().hir_id) {\n+            matches!(item.kind, ItemKind::Const(..))\n+        } else {\n+            false\n+        };\n+        let mut visitor = NumericFallbackVisitor::new(cx, is_parent_const);\n         visitor.visit_body(body);\n     }\n }\n@@ -68,9 +73,13 @@ struct NumericFallbackVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> NumericFallbackVisitor<'a, 'tcx> {\n-    fn new(cx: &'a LateContext<'tcx>) -> Self {\n+    fn new(cx: &'a LateContext<'tcx>, is_parent_const: bool) -> Self {\n         Self {\n-            ty_bounds: vec![TyBound::Nothing],\n+            ty_bounds: vec![if is_parent_const {\n+                TyBound::Any\n+            } else {\n+                TyBound::Nothing\n+            }],\n             cx,\n         }\n     }\n@@ -192,13 +201,7 @@ impl<'a, 'tcx> Visitor<'tcx> for NumericFallbackVisitor<'a, 'tcx> {\n \n     fn visit_stmt(&mut self, stmt: &'tcx Stmt<'_>) {\n         match stmt.kind {\n-            StmtKind::Local(local) => {\n-                if local.ty.is_some() {\n-                    self.ty_bounds.push(TyBound::Any);\n-                } else {\n-                    self.ty_bounds.push(TyBound::Nothing);\n-                }\n-            },\n+            StmtKind::Local(local) if local.ty.is_some() => self.ty_bounds.push(TyBound::Any),\n \n             _ => self.ty_bounds.push(TyBound::Nothing),\n         }"}, {"sha": "a370ccc76962e9802fed7b14ecc2be8abba88aaa", "filename": "tests/ui/default_numeric_fallback_f64.fixed", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e51e9308d58be45bffaf05c66af71681aaafd431/tests%2Fui%2Fdefault_numeric_fallback_f64.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e51e9308d58be45bffaf05c66af71681aaafd431/tests%2Fui%2Fdefault_numeric_fallback_f64.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_numeric_fallback_f64.fixed?ref=e51e9308d58be45bffaf05c66af71681aaafd431", "patch": "@@ -33,6 +33,7 @@ mod basic_expr {\n         let x: [f64; 3] = [1., 2., 3.];\n         let x: (f64, f64) = if true { (1., 2.) } else { (3., 4.) };\n         let x: _ = 1.;\n+        const X: f32 = 1.;\n     }\n }\n \n@@ -59,6 +60,14 @@ mod nested_local {\n             // Should NOT lint this because this literal is bound to `_` of outer `Local`.\n             2.\n         };\n+\n+        const X: f32 = {\n+            // Should lint this because this literal is not bound to any types.\n+            let y = 1.0_f64;\n+\n+            // Should NOT lint this because this literal is bound to `_` of outer `Local`.\n+            1.\n+        };\n     }\n }\n "}, {"sha": "2476fe95141dece897a260b54d29ace5e612c9c5", "filename": "tests/ui/default_numeric_fallback_f64.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e51e9308d58be45bffaf05c66af71681aaafd431/tests%2Fui%2Fdefault_numeric_fallback_f64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e51e9308d58be45bffaf05c66af71681aaafd431/tests%2Fui%2Fdefault_numeric_fallback_f64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_numeric_fallback_f64.rs?ref=e51e9308d58be45bffaf05c66af71681aaafd431", "patch": "@@ -33,6 +33,7 @@ mod basic_expr {\n         let x: [f64; 3] = [1., 2., 3.];\n         let x: (f64, f64) = if true { (1., 2.) } else { (3., 4.) };\n         let x: _ = 1.;\n+        const X: f32 = 1.;\n     }\n }\n \n@@ -59,6 +60,14 @@ mod nested_local {\n             // Should NOT lint this because this literal is bound to `_` of outer `Local`.\n             2.\n         };\n+\n+        const X: f32 = {\n+            // Should lint this because this literal is not bound to any types.\n+            let y = 1.;\n+\n+            // Should NOT lint this because this literal is bound to `_` of outer `Local`.\n+            1.\n+        };\n     }\n }\n "}, {"sha": "5df2f642388dc562e0c807babcd6ada427d09be8", "filename": "tests/ui/default_numeric_fallback_f64.stderr", "status": "modified", "additions": 20, "deletions": 14, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/e51e9308d58be45bffaf05c66af71681aaafd431/tests%2Fui%2Fdefault_numeric_fallback_f64.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e51e9308d58be45bffaf05c66af71681aaafd431/tests%2Fui%2Fdefault_numeric_fallback_f64.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_numeric_fallback_f64.stderr?ref=e51e9308d58be45bffaf05c66af71681aaafd431", "patch": "@@ -61,79 +61,85 @@ LL |             _ => 1.,\n    |                  ^^ help: consider adding suffix: `1.0_f64`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_f64.rs:43:21\n+  --> $DIR/default_numeric_fallback_f64.rs:44:21\n    |\n LL |             let y = 1.;\n    |                     ^^ help: consider adding suffix: `1.0_f64`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_f64.rs:51:21\n+  --> $DIR/default_numeric_fallback_f64.rs:52:21\n    |\n LL |             let y = 1.;\n    |                     ^^ help: consider adding suffix: `1.0_f64`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_f64.rs:57:21\n+  --> $DIR/default_numeric_fallback_f64.rs:58:21\n    |\n LL |             let y = 1.;\n    |                     ^^ help: consider adding suffix: `1.0_f64`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_f64.rs:69:9\n+  --> $DIR/default_numeric_fallback_f64.rs:66:21\n+   |\n+LL |             let y = 1.;\n+   |                     ^^ help: consider adding suffix: `1.0_f64`\n+\n+error: default numeric fallback might occur\n+  --> $DIR/default_numeric_fallback_f64.rs:78:9\n    |\n LL |         1.\n    |         ^^ help: consider adding suffix: `1.0_f64`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_f64.rs:75:27\n+  --> $DIR/default_numeric_fallback_f64.rs:84:27\n    |\n LL |         let f = || -> _ { 1. };\n    |                           ^^ help: consider adding suffix: `1.0_f64`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_f64.rs:79:29\n+  --> $DIR/default_numeric_fallback_f64.rs:88:29\n    |\n LL |         let f = || -> f64 { 1. };\n    |                             ^^ help: consider adding suffix: `1.0_f64`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_f64.rs:93:21\n+  --> $DIR/default_numeric_fallback_f64.rs:102:21\n    |\n LL |         generic_arg(1.);\n    |                     ^^ help: consider adding suffix: `1.0_f64`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_f64.rs:96:32\n+  --> $DIR/default_numeric_fallback_f64.rs:105:32\n    |\n LL |         let x: _ = generic_arg(1.);\n    |                                ^^ help: consider adding suffix: `1.0_f64`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_f64.rs:114:28\n+  --> $DIR/default_numeric_fallback_f64.rs:123:28\n    |\n LL |         GenericStruct { x: 1. };\n    |                            ^^ help: consider adding suffix: `1.0_f64`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_f64.rs:117:36\n+  --> $DIR/default_numeric_fallback_f64.rs:126:36\n    |\n LL |         let _ = GenericStruct { x: 1. };\n    |                                    ^^ help: consider adding suffix: `1.0_f64`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_f64.rs:135:24\n+  --> $DIR/default_numeric_fallback_f64.rs:144:24\n    |\n LL |         GenericEnum::X(1.);\n    |                        ^^ help: consider adding suffix: `1.0_f64`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_f64.rs:155:23\n+  --> $DIR/default_numeric_fallback_f64.rs:164:23\n    |\n LL |         s.generic_arg(1.);\n    |                       ^^ help: consider adding suffix: `1.0_f64`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_f64.rs:162:21\n+  --> $DIR/default_numeric_fallback_f64.rs:171:21\n    |\n LL |             let x = 22.;\n    |                     ^^^ help: consider adding suffix: `22.0_f64`\n@@ -143,5 +149,5 @@ LL |         internal_macro!();\n    |\n    = note: this error originates in the macro `internal_macro` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to 23 previous errors\n+error: aborting due to 24 previous errors\n "}, {"sha": "3f4994f0453b1ef153fea0355d2a1130f9adafdc", "filename": "tests/ui/default_numeric_fallback_i32.fixed", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e51e9308d58be45bffaf05c66af71681aaafd431/tests%2Fui%2Fdefault_numeric_fallback_i32.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e51e9308d58be45bffaf05c66af71681aaafd431/tests%2Fui%2Fdefault_numeric_fallback_i32.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_numeric_fallback_i32.fixed?ref=e51e9308d58be45bffaf05c66af71681aaafd431", "patch": "@@ -33,6 +33,8 @@ mod basic_expr {\n         let x: [i32; 3] = [1, 2, 3];\n         let x: (i32, i32) = if true { (1, 2) } else { (3, 4) };\n         let x: _ = 1;\n+        let x: u64 = 1;\n+        const CONST_X: i8 = 1;\n     }\n }\n \n@@ -59,6 +61,14 @@ mod nested_local {\n             // Should NOT lint this because this literal is bound to `_` of outer `Local`.\n             2\n         };\n+\n+        const CONST_X: i32 = {\n+            // Should lint this because this literal is not bound to any types.\n+            let y = 1_i32;\n+\n+            // Should NOT lint this because this literal is bound to `_` of outer `Local`.\n+            1\n+        };\n     }\n }\n "}, {"sha": "2df0e09787f9055d0f5034471acd9ec6b3c3c4ca", "filename": "tests/ui/default_numeric_fallback_i32.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e51e9308d58be45bffaf05c66af71681aaafd431/tests%2Fui%2Fdefault_numeric_fallback_i32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e51e9308d58be45bffaf05c66af71681aaafd431/tests%2Fui%2Fdefault_numeric_fallback_i32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_numeric_fallback_i32.rs?ref=e51e9308d58be45bffaf05c66af71681aaafd431", "patch": "@@ -33,6 +33,8 @@ mod basic_expr {\n         let x: [i32; 3] = [1, 2, 3];\n         let x: (i32, i32) = if true { (1, 2) } else { (3, 4) };\n         let x: _ = 1;\n+        let x: u64 = 1;\n+        const CONST_X: i8 = 1;\n     }\n }\n \n@@ -59,6 +61,14 @@ mod nested_local {\n             // Should NOT lint this because this literal is bound to `_` of outer `Local`.\n             2\n         };\n+\n+        const CONST_X: i32 = {\n+            // Should lint this because this literal is not bound to any types.\n+            let y = 1;\n+\n+            // Should NOT lint this because this literal is bound to `_` of outer `Local`.\n+            1\n+        };\n     }\n }\n "}, {"sha": "6f219c3fc2b0e8a62afe16ed15ad820088d6272a", "filename": "tests/ui/default_numeric_fallback_i32.stderr", "status": "modified", "additions": 20, "deletions": 14, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/e51e9308d58be45bffaf05c66af71681aaafd431/tests%2Fui%2Fdefault_numeric_fallback_i32.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e51e9308d58be45bffaf05c66af71681aaafd431/tests%2Fui%2Fdefault_numeric_fallback_i32.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_numeric_fallback_i32.stderr?ref=e51e9308d58be45bffaf05c66af71681aaafd431", "patch": "@@ -73,79 +73,85 @@ LL |             _ => 2,\n    |                  ^ help: consider adding suffix: `2_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:43:21\n+  --> $DIR/default_numeric_fallback_i32.rs:45:21\n    |\n LL |             let y = 1;\n    |                     ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:51:21\n+  --> $DIR/default_numeric_fallback_i32.rs:53:21\n    |\n LL |             let y = 1;\n    |                     ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:57:21\n+  --> $DIR/default_numeric_fallback_i32.rs:59:21\n    |\n LL |             let y = 1;\n    |                     ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:69:9\n+  --> $DIR/default_numeric_fallback_i32.rs:67:21\n+   |\n+LL |             let y = 1;\n+   |                     ^ help: consider adding suffix: `1_i32`\n+\n+error: default numeric fallback might occur\n+  --> $DIR/default_numeric_fallback_i32.rs:79:9\n    |\n LL |         1\n    |         ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:75:27\n+  --> $DIR/default_numeric_fallback_i32.rs:85:27\n    |\n LL |         let f = || -> _ { 1 };\n    |                           ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:79:29\n+  --> $DIR/default_numeric_fallback_i32.rs:89:29\n    |\n LL |         let f = || -> i32 { 1 };\n    |                             ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:93:21\n+  --> $DIR/default_numeric_fallback_i32.rs:103:21\n    |\n LL |         generic_arg(1);\n    |                     ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:96:32\n+  --> $DIR/default_numeric_fallback_i32.rs:106:32\n    |\n LL |         let x: _ = generic_arg(1);\n    |                                ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:114:28\n+  --> $DIR/default_numeric_fallback_i32.rs:124:28\n    |\n LL |         GenericStruct { x: 1 };\n    |                            ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:117:36\n+  --> $DIR/default_numeric_fallback_i32.rs:127:36\n    |\n LL |         let _ = GenericStruct { x: 1 };\n    |                                    ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:135:24\n+  --> $DIR/default_numeric_fallback_i32.rs:145:24\n    |\n LL |         GenericEnum::X(1);\n    |                        ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:155:23\n+  --> $DIR/default_numeric_fallback_i32.rs:165:23\n    |\n LL |         s.generic_arg(1);\n    |                       ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:162:21\n+  --> $DIR/default_numeric_fallback_i32.rs:172:21\n    |\n LL |             let x = 22;\n    |                     ^^ help: consider adding suffix: `22_i32`\n@@ -155,5 +161,5 @@ LL |         internal_macro!();\n    |\n    = note: this error originates in the macro `internal_macro` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to 25 previous errors\n+error: aborting due to 26 previous errors\n "}]}