{"sha": "743c1c37e87835cbc7e9a5b5daff7ff9f71e9fe6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0M2MxYzM3ZTg3ODM1Y2JjN2U5YTViNWRhZmY3ZmY5ZjcxZTlmZTY=", "commit": {"author": {"name": "Ben Striegel", "email": "ben.striegel@gmail.com", "date": "2013-01-30T03:34:16Z"}, "committer": {"name": "Ben Striegel", "email": "ben.striegel@gmail.com", "date": "2013-01-31T04:19:40Z"}, "message": "RIMOV, round 11\n\nLast bit of mut removal, manually cleaning up outliers", "tree": {"sha": "7e900839bee3dff937e2edd71550cbe9b9e0b45b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e900839bee3dff937e2edd71550cbe9b9e0b45b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/743c1c37e87835cbc7e9a5b5daff7ff9f71e9fe6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/743c1c37e87835cbc7e9a5b5daff7ff9f71e9fe6", "html_url": "https://github.com/rust-lang/rust/commit/743c1c37e87835cbc7e9a5b5daff7ff9f71e9fe6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/743c1c37e87835cbc7e9a5b5daff7ff9f71e9fe6/comments", "author": {"login": "bstrie", "id": 865233, "node_id": "MDQ6VXNlcjg2NTIzMw==", "avatar_url": "https://avatars.githubusercontent.com/u/865233?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bstrie", "html_url": "https://github.com/bstrie", "followers_url": "https://api.github.com/users/bstrie/followers", "following_url": "https://api.github.com/users/bstrie/following{/other_user}", "gists_url": "https://api.github.com/users/bstrie/gists{/gist_id}", "starred_url": "https://api.github.com/users/bstrie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bstrie/subscriptions", "organizations_url": "https://api.github.com/users/bstrie/orgs", "repos_url": "https://api.github.com/users/bstrie/repos", "events_url": "https://api.github.com/users/bstrie/events{/privacy}", "received_events_url": "https://api.github.com/users/bstrie/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bstrie", "id": 865233, "node_id": "MDQ6VXNlcjg2NTIzMw==", "avatar_url": "https://avatars.githubusercontent.com/u/865233?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bstrie", "html_url": "https://github.com/bstrie", "followers_url": "https://api.github.com/users/bstrie/followers", "following_url": "https://api.github.com/users/bstrie/following{/other_user}", "gists_url": "https://api.github.com/users/bstrie/gists{/gist_id}", "starred_url": "https://api.github.com/users/bstrie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bstrie/subscriptions", "organizations_url": "https://api.github.com/users/bstrie/orgs", "repos_url": "https://api.github.com/users/bstrie/repos", "events_url": "https://api.github.com/users/bstrie/events{/privacy}", "received_events_url": "https://api.github.com/users/bstrie/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0336a8633f0734ef269c000c5d7432b7a706a1fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/0336a8633f0734ef269c000c5d7432b7a706a1fe", "html_url": "https://github.com/rust-lang/rust/commit/0336a8633f0734ef269c000c5d7432b7a706a1fe"}], "stats": {"total": 31, "additions": 14, "deletions": 17}, "files": [{"sha": "9982f72ebe722171fd4697e1a72733af7c829e1d", "filename": "doc/rust.md", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/743c1c37e87835cbc7e9a5b5daff7ff9f71e9fe6/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/743c1c37e87835cbc7e9a5b5daff7ff9f71e9fe6/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=743c1c37e87835cbc7e9a5b5daff7ff9f71e9fe6", "patch": "@@ -1716,15 +1716,12 @@ vec_elems : [expr [',' expr]*] | [expr ',' \"..\" expr]\n \n A [_vector_](#vector-types) _expression_ is written by enclosing zero or\n more comma-separated expressions of uniform type in square brackets.\n-The keyword `mut` can be written after the opening bracket to\n-indicate that the elements of the resulting vector may be mutated.\n-When no mutability is specified, the vector is immutable.\n \n ~~~~\n [1, 2, 3, 4];\n [\"a\", \"b\", \"c\", \"d\"];\n [0, ..128];             // vector with 128 zeros\n-[mut 0u8, 0u8, 0u8, 0u8];\n+[0u8, 0u8, 0u8, 0u8];\n ~~~~\n \n ### Index expressions\n@@ -1746,7 +1743,7 @@ task in a _failing state_.\n # do task::spawn_unlinked {\n \n ([1, 2, 3, 4])[0];\n-([mut 'x', 'y'])[1] = 'z';\n+(['x', 'y'])[1] = 'z';\n ([\"a\", \"b\"])[10]; // fails\n \n # }\n@@ -1909,8 +1906,8 @@ No allocation or destruction is entailed.\n An example of three different swap expressions:\n \n ~~~~~~~~\n-# let mut x = &[mut 0];\n-# let mut a = &[mut 0];\n+# let mut x = &[0];\n+# let mut a = &[0];\n # let i = 0;\n # let y = {mut z: 0};\n # let b = {mut c: 0};\n@@ -2005,11 +2002,11 @@ the unary copy operator is typically only used to cause an argument to a functio\n An example of a copy expression:\n \n ~~~~\n-fn mutate(vec: ~[mut int]) {\n+fn mutate(vec: ~[int]) {\n    vec[0] = 10;\n }\n \n-let v = ~[mut 1,2,3];\n+let v = ~[1,2,3];\n \n mutate(copy v);   // Pass a copy\n "}, {"sha": "dbafea444094331ebc3a94c8cccab4a16aa28e0d", "filename": "doc/tutorial.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/743c1c37e87835cbc7e9a5b5daff7ff9f71e9fe6/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/743c1c37e87835cbc7e9a5b5daff7ff9f71e9fe6/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=743c1c37e87835cbc7e9a5b5daff7ff9f71e9fe6", "patch": "@@ -1795,7 +1795,7 @@ Generic `type`, `struct`, and `enum` declarations follow the same pattern:\n type Set<T> = HashMap<T, ()>;\n \n struct Stack<T> {\n-    elements: ~[mut T]\n+    elements: ~[T]\n }\n \n enum Option<T> {"}, {"sha": "52b62d10a2046947d94783025f33613086fb46f1", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/743c1c37e87835cbc7e9a5b5daff7ff9f71e9fe6/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/743c1c37e87835cbc7e9a5b5daff7ff9f71e9fe6/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=743c1c37e87835cbc7e9a5b5daff7ff9f71e9fe6", "patch": "@@ -280,8 +280,12 @@ pub pure fn view<T>(v: &r/[T], start: uint, end: uint) -> &r/[T] {\n }\n \n /// Return a slice that points into another slice.\n+<<<<<<< HEAD\n #[inline(always)]\n pub pure fn mut_view<T>(v: &r/[mut T], start: uint, end: uint) -> &r/[mut T] {\n+=======\n+pub pure fn mut_view<T>(v: &mut r/[T], start: uint, end: uint) -> &mut r/[T] {\n+>>>>>>> RIMOV, round 11\n     assert (start <= end);\n     assert (end <= len(v));\n     do as_mut_buf(v) |p, _len| {\n@@ -2199,12 +2203,8 @@ pub mod bytes {\n       * Copies `count` bytes from `src` to `dst`. The source and destination\n       * may overlap.\n       */\n-<<<<<<< HEAD\n     #[inline(always)]\n-    pub fn copy_memory(dst: &[mut u8], src: &[const u8], count: uint) {\n-=======\n     pub fn copy_memory(dst: &mut [u8], src: &[const u8], count: uint) {\n->>>>>>> RIMOV, round 5\n         // Bound checks are done at vec::raw::copy_memory.\n         unsafe { vec::raw::copy_memory(dst, src, count) }\n     }"}, {"sha": "a64700494c8975c7070242d0253674596f755033", "filename": "src/libfuzzer/cycles.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/743c1c37e87835cbc7e9a5b5daff7ff9f71e9fe6/src%2Flibfuzzer%2Fcycles.rs", "raw_url": "https://github.com/rust-lang/rust/raw/743c1c37e87835cbc7e9a5b5daff7ff9f71e9fe6/src%2Flibfuzzer%2Fcycles.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfuzzer%2Fcycles.rs?ref=743c1c37e87835cbc7e9a5b5daff7ff9f71e9fe6", "patch": "@@ -58,7 +58,7 @@ fn empty_pointy() -> @pointy {\n         mut g : fn~()->(){},\n \n         mut m : ~[],\n-        mut n : ~[mut],\n+        mut n : ~[],\n         mut o : {x : 0, y : none}\n     }\n }"}, {"sha": "4b637b0195c31c7bc5eac21eef4f7c64aace4547", "filename": "src/test/compile-fail/regions-infer-invariance-due-to-mutability-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/743c1c37e87835cbc7e9a5b5daff7ff9f71e9fe6/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/743c1c37e87835cbc7e9a5b5daff7ff9f71e9fe6/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability-2.rs?ref=743c1c37e87835cbc7e9a5b5daff7ff9f71e9fe6", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n struct invariant {\n-    f: @[mut &int]\n+    f: @mut [&int]\n }\n \n fn to_same_lifetime(bi: invariant/&r) {\n@@ -25,4 +25,4 @@ fn to_longer_lifetime(bi: invariant/&r) -> invariant/&static {\n }\n \n fn main() {\n-}\n\\ No newline at end of file\n+}"}]}