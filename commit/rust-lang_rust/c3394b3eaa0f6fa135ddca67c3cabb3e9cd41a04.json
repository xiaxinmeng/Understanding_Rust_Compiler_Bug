{"sha": "c3394b3eaa0f6fa135ddca67c3cabb3e9cd41a04", "node_id": "C_kwDOAAsO6NoAKGMzMzk0YjNlYWEwZjZmYTEzNWRkY2E2N2MzY2FiYjNlOWNkNDFhMDQ", "commit": {"author": {"name": "yukang", "email": "moorekang@gmail.com", "date": "2023-03-09T14:05:57Z"}, "committer": {"name": "yukang", "email": "moorekang@gmail.com", "date": "2023-05-17T09:56:26Z"}, "message": "Fix #107910, Shorten backtraces in ICEs", "tree": {"sha": "e47317ba9e7ef5b3196c62a12a97c7adc66f4d5f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e47317ba9e7ef5b3196c62a12a97c7adc66f4d5f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c3394b3eaa0f6fa135ddca67c3cabb3e9cd41a04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c3394b3eaa0f6fa135ddca67c3cabb3e9cd41a04", "html_url": "https://github.com/rust-lang/rust/commit/c3394b3eaa0f6fa135ddca67c3cabb3e9cd41a04", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c3394b3eaa0f6fa135ddca67c3cabb3e9cd41a04/comments", "author": {"login": "chenyukang", "id": 230646, "node_id": "MDQ6VXNlcjIzMDY0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/230646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenyukang", "html_url": "https://github.com/chenyukang", "followers_url": "https://api.github.com/users/chenyukang/followers", "following_url": "https://api.github.com/users/chenyukang/following{/other_user}", "gists_url": "https://api.github.com/users/chenyukang/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenyukang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenyukang/subscriptions", "organizations_url": "https://api.github.com/users/chenyukang/orgs", "repos_url": "https://api.github.com/users/chenyukang/repos", "events_url": "https://api.github.com/users/chenyukang/events{/privacy}", "received_events_url": "https://api.github.com/users/chenyukang/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chenyukang", "id": 230646, "node_id": "MDQ6VXNlcjIzMDY0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/230646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenyukang", "html_url": "https://github.com/chenyukang", "followers_url": "https://api.github.com/users/chenyukang/followers", "following_url": "https://api.github.com/users/chenyukang/following{/other_user}", "gists_url": "https://api.github.com/users/chenyukang/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenyukang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenyukang/subscriptions", "organizations_url": "https://api.github.com/users/chenyukang/orgs", "repos_url": "https://api.github.com/users/chenyukang/repos", "events_url": "https://api.github.com/users/chenyukang/events{/privacy}", "received_events_url": "https://api.github.com/users/chenyukang/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2ccc855e74aec03e434405eca3c247ee2432e53", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2ccc855e74aec03e434405eca3c247ee2432e53", "html_url": "https://github.com/rust-lang/rust/commit/c2ccc855e74aec03e434405eca3c247ee2432e53"}], "stats": {"total": 299, "additions": 259, "deletions": 40}, "files": [{"sha": "b17db0aa56a0d30a2e79ad800197348d419a5a97", "filename": "compiler/rustc_query_impl/src/plumbing.rs", "status": "modified", "additions": 58, "deletions": 35, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/c3394b3eaa0f6fa135ddca67c3cabb3e9cd41a04/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3394b3eaa0f6fa135ddca67c3cabb3e9cd41a04/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs?ref=c3394b3eaa0f6fa135ddca67c3cabb3e9cd41a04", "patch": "@@ -488,6 +488,18 @@ macro_rules! expand_if_cached {\n     };\n }\n \n+/// Don't show the backtrace for query system by default\n+/// use `RUST_BACKTRACE=full` to show all the backtraces\n+#[inline(never)]\n+pub fn __rust_begin_short_backtrace<F, T>(f: F) -> T\n+where\n+    F: FnOnce() -> T,\n+{\n+    let result = f();\n+    std::hint::black_box(());\n+    result\n+}\n+\n // NOTE: `$V` isn't used here, but we still need to match on it so it can be passed to other macros\n // invoked by `rustc_query_append`.\n macro_rules! define_queries {\n@@ -498,21 +510,25 @@ macro_rules! define_queries {\n             use super::*;\n \n             $(\n-                #[inline(always)]\n-                #[tracing::instrument(level = \"trace\", skip(tcx))]\n-                pub(super) fn $name<'tcx>(\n-                    tcx: TyCtxt<'tcx>,\n-                    span: Span,\n-                    key: query_keys::$name<'tcx>,\n-                    mode: QueryMode,\n-                ) -> Option<Erase<query_values::$name<'tcx>>> {\n-                    get_query_incr(\n-                        queries::$name::config(tcx),\n-                        QueryCtxt::new(tcx),\n-                        span,\n-                        key,\n-                        mode\n-                    )\n+                // Adding `__rust_end_short_backtrace` marker to backtraces so that we emit the frames\n+                // when `RUST_BACKTRACE=1`, add a new mod with `$name` here is to allow duplicate naming\n+                pub mod $name {\n+                    use super::*;\n+                    #[inline(never)]\n+                    pub fn __rust_end_short_backtrace<'tcx>(\n+                        tcx: TyCtxt<'tcx>,\n+                        span: Span,\n+                        key: query_keys::$name<'tcx>,\n+                        mode: QueryMode,\n+                    ) -> Option<Erase<query_values::$name<'tcx>>> {\n+                        get_query_incr(\n+                            queries::$name::config(tcx),\n+                            QueryCtxt::new(tcx),\n+                            span,\n+                            key,\n+                            mode\n+                        )\n+                    }\n                 }\n             )*\n         }\n@@ -521,32 +537,34 @@ macro_rules! define_queries {\n             use super::*;\n \n             $(\n-                #[inline(always)]\n-                #[tracing::instrument(level = \"trace\", skip(tcx))]\n-                pub(super) fn $name<'tcx>(\n-                    tcx: TyCtxt<'tcx>,\n-                    span: Span,\n-                    key: query_keys::$name<'tcx>,\n-                    __mode: QueryMode,\n-                ) -> Option<Erase<query_values::$name<'tcx>>> {\n-                    Some(get_query_non_incr(\n-                        queries::$name::config(tcx),\n-                        QueryCtxt::new(tcx),\n-                        span,\n-                        key,\n-                    ))\n+                pub mod $name {\n+                    use super::*;\n+                    #[inline(never)]\n+                    pub fn __rust_end_short_backtrace<'tcx>(\n+                        tcx: TyCtxt<'tcx>,\n+                        span: Span,\n+                        key: query_keys::$name<'tcx>,\n+                        __mode: QueryMode,\n+                    ) -> Option<Erase<query_values::$name<'tcx>>> {\n+                        Some(get_query_non_incr(\n+                            queries::$name::config(tcx),\n+                            QueryCtxt::new(tcx),\n+                            span,\n+                            key,\n+                        ))\n+                    }\n                 }\n             )*\n         }\n \n         pub(crate) fn engine(incremental: bool) -> QueryEngine {\n             if incremental {\n                 QueryEngine {\n-                    $($name: get_query_incr::$name,)*\n+                    $($name: get_query_incr::$name::__rust_end_short_backtrace,)*\n                 }\n             } else {\n                 QueryEngine {\n-                    $($name: get_query_non_incr::$name,)*\n+                    $($name: get_query_non_incr::$name::__rust_end_short_backtrace,)*\n                 }\n             }\n         }\n@@ -578,10 +596,15 @@ macro_rules! define_queries {\n                         query_cache: offset_of!(QueryCaches<'tcx> => $name),\n                         cache_on_disk: |tcx, key| ::rustc_middle::query::cached::$name(tcx, key),\n                         execute_query: |tcx, key| erase(tcx.$name(key)),\n-                        compute: |tcx, key| query_provided_to_value::$name(\n-                            tcx,\n-                            call_provider!([$($modifiers)*][tcx, $name, key])\n-                        ),\n+                        compute: |tcx, key| {\n+                            use crate::plumbing::__rust_begin_short_backtrace;\n+                            __rust_begin_short_backtrace(||\n+                                query_provided_to_value::$name(\n+                                    tcx,\n+                                    call_provider!([$($modifiers)*][tcx, $name, key])\n+                                )\n+                            )\n+                        },\n                         can_load_from_disk: should_ever_cache_on_disk!([$($modifiers)*] true false),\n                         try_load_from_disk: should_ever_cache_on_disk!([$($modifiers)*] {\n                             |tcx, key, prev_index, index| {"}, {"sha": "6f020940df12fd067a897c9ac5c39f50892151d6", "filename": "library/std/src/sys_common/backtrace.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c3394b3eaa0f6fa135ddca67c3cabb3e9cd41a04/library%2Fstd%2Fsrc%2Fsys_common%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3394b3eaa0f6fa135ddca67c3cabb3e9cd41a04/library%2Fstd%2Fsrc%2Fsys_common%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fbacktrace.rs?ref=c3394b3eaa0f6fa135ddca67c3cabb3e9cd41a04", "patch": "@@ -68,13 +68,17 @@ unsafe fn _print_fmt(fmt: &mut fmt::Formatter<'_>, print_fmt: PrintFmt) -> fmt::\n         }\n \n         let mut hit = false;\n-        let mut stop = false;\n         backtrace_rs::resolve_frame_unsynchronized(frame, |symbol| {\n             hit = true;\n+\n+            // Any frames between `__rust_begin_short_backtrace` and `__rust_end_short_backtrace`\n+            // are omitted from the backtrace in short mode, `__rust_end_short_backtrace` will be\n+            // called before the panic hook, so we won't ignore any frames if there is no\n+            // invoke of `__rust_begin_short_backtrace`.\n             if print_fmt == PrintFmt::Short {\n                 if let Some(sym) = symbol.name().and_then(|s| s.as_str()) {\n                     if start && sym.contains(\"__rust_begin_short_backtrace\") {\n-                        stop = true;\n+                        start = false;\n                         return;\n                     }\n                     if sym.contains(\"__rust_end_short_backtrace\") {\n@@ -88,9 +92,6 @@ unsafe fn _print_fmt(fmt: &mut fmt::Formatter<'_>, print_fmt: PrintFmt) -> fmt::\n                 res = bt_fmt.frame().symbol(frame, symbol);\n             }\n         });\n-        if stop {\n-            return false;\n-        }\n         #[cfg(target_os = \"nto\")]\n         if libc::__my_thread_exit as *mut libc::c_void == frame.ip() {\n             if !hit && start {"}, {"sha": "4f33d590237b390590d878b19264a68eda3a1fcb", "filename": "tests/run-make/short-ice/Makefile", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c3394b3eaa0f6fa135ddca67c3cabb3e9cd41a04/tests%2Frun-make%2Fshort-ice%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/c3394b3eaa0f6fa135ddca67c3cabb3e9cd41a04/tests%2Frun-make%2Fshort-ice%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fshort-ice%2FMakefile?ref=c3394b3eaa0f6fa135ddca67c3cabb3e9cd41a04", "patch": "@@ -0,0 +1,9 @@\n+include ../tools.mk\n+\n+# ignore-windows\n+\n+export RUSTC := $(RUSTC_ORIGINAL)\n+export TMPDIR := $(TMPDIR)\n+\n+all:\n+\tbash check.sh"}, {"sha": "96cd8fe86bc30444dbfb30bbbe34a9edd1f165f0", "filename": "tests/run-make/short-ice/check.sh", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/c3394b3eaa0f6fa135ddca67c3cabb3e9cd41a04/tests%2Frun-make%2Fshort-ice%2Fcheck.sh", "raw_url": "https://github.com/rust-lang/rust/raw/c3394b3eaa0f6fa135ddca67c3cabb3e9cd41a04/tests%2Frun-make%2Fshort-ice%2Fcheck.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fshort-ice%2Fcheck.sh?ref=c3394b3eaa0f6fa135ddca67c3cabb3e9cd41a04", "patch": "@@ -0,0 +1,36 @@\n+#!/bin/sh\n+\n+RUST_BACKTRACE=1 $RUSTC src/lib.rs -Z treat-err-as-bug=1 1>$TMPDIR/rust-test-1.log 2>&1\n+RUST_BACKTRACE=full $RUSTC src/lib.rs -Z treat-err-as-bug=1 1>$TMPDIR/rust-test-2.log 2>&1\n+\n+short=$(cat $TMPDIR/rust-test-1.log | wc -l)\n+full=$(cat $TMPDIR/rust-test-2.log | wc -l)\n+rustc_query_count=$(cat $TMPDIR/rust-test-1.log | grep rustc_query_ | wc -l)\n+rustc_query_count_full=$(cat $TMPDIR/rust-test-2.log | grep rustc_query_ | wc -l)\n+\n+begin_count=$(cat $TMPDIR/rust-test-2.log | grep __rust_begin_short_backtrace | wc -l)\n+end_count=$(cat $TMPDIR/rust-test-2.log | grep __rust_end_short_backtrace | wc -l)\n+\n+cat $TMPDIR/rust-test-1.log\n+echo \"=====================\"\n+cat $TMPDIR/rust-test-2.log\n+echo \"=====================\"\n+\n+echo \"short backtrace: $short\"\n+echo \"full  backtrace: $full\"\n+echo \"begin_count: $begin_count\"\n+echo \"end_count  : $end_count\"\n+echo \"rustc_query_count: $rustc_query_count\"\n+echo \"rustc_query_count_full: $rustc_query_count_full\"\n+\n+## backtraces to vary a bit depending on platform and configuration options,\n+## here we make sure that the short backtrace of rustc_query is shorter than the full,\n+## and marks are in pairs.\n+if [ $short -lt $full ] &&\n+    [ $begin_count -eq $end_count ] &&\n+    [ $(($rustc_query_count + 10)) -lt $rustc_query_count_full ] &&\n+    [ $rustc_query_count_full -gt 10 ]; then\n+    exit 0\n+else\n+    exit 1\n+fi"}, {"sha": "b23b7f830d7396204f7fc3ffc2c04e060251b276", "filename": "tests/run-make/short-ice/src/lib.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c3394b3eaa0f6fa135ddca67c3cabb3e9cd41a04/tests%2Frun-make%2Fshort-ice%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3394b3eaa0f6fa135ddca67c3cabb3e9cd41a04/tests%2Frun-make%2Fshort-ice%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fshort-ice%2Fsrc%2Flib.rs?ref=c3394b3eaa0f6fa135ddca67c3cabb3e9cd41a04", "patch": "@@ -0,0 +1,7 @@\n+fn func(s: &str) {\n+    println!(\"{}\", s);\n+}\n+\n+fn main() {\n+    func(1);\n+}"}, {"sha": "815ce4dd015283bd80cf487871959304afd4530a", "filename": "tests/ui/panics/default-backtrace-ice.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3394b3eaa0f6fa135ddca67c3cabb3e9cd41a04/tests%2Fui%2Fpanics%2Fdefault-backtrace-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c3394b3eaa0f6fa135ddca67c3cabb3e9cd41a04/tests%2Fui%2Fpanics%2Fdefault-backtrace-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpanics%2Fdefault-backtrace-ice.stderr?ref=c3394b3eaa0f6fa135ddca67c3cabb3e9cd41a04", "patch": "@@ -8,6 +8,8 @@ LL | fn main() { missing_ident; }\n stack backtrace:\n (end_short_backtrace)\n (begin_short_backtrace)\n+(end_short_backtrace)\n+(begin_short_backtrace)\n \n error: the compiler unexpectedly panicked. this is a bug.\n "}, {"sha": "38a80f8b6703a82b0110079354b1785ff5ca342f", "filename": "tests/ui/panics/short-ice-remove-middle-frames-2.rs", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/c3394b3eaa0f6fa135ddca67c3cabb3e9cd41a04/tests%2Fui%2Fpanics%2Fshort-ice-remove-middle-frames-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3394b3eaa0f6fa135ddca67c3cabb3e9cd41a04/tests%2Fui%2Fpanics%2Fshort-ice-remove-middle-frames-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpanics%2Fshort-ice-remove-middle-frames-2.rs?ref=c3394b3eaa0f6fa135ddca67c3cabb3e9cd41a04", "patch": "@@ -0,0 +1,61 @@\n+// compile-flags:-Cstrip=none\n+// run-fail\n+// check-run-results\n+// exec-env:RUST_BACKTRACE=1\n+// ignore-android FIXME #17520\n+// ignore-wasm no panic support\n+// ignore-openbsd no support for libbacktrace without filename\n+// ignore-emscripten no panic\n+// ignore-sgx Backtraces not symbolized\n+// ignore-fuchsia Backtraces not symbolized\n+// ignore-msvc the `__rust_{begin,end}_short_backtrace` symbols aren't reliable.\n+\n+/// This test case make sure that we can have multiple pairs of `__rust_{begin,end}_short_backtrace`\n+\n+#[inline(never)]\n+fn __rust_begin_short_backtrace<T, F: FnOnce() -> T>(f: F) -> T {\n+    let result = f();\n+    std::hint::black_box(result)\n+}\n+\n+#[inline(never)]\n+fn __rust_end_short_backtrace<T, F: FnOnce() -> T>(f: F) -> T {\n+    let result = f();\n+    std::hint::black_box(result)\n+}\n+\n+fn first() {\n+    __rust_end_short_backtrace(|| second());\n+}\n+\n+fn second() {\n+    third(); // won't show up\n+}\n+\n+fn third() {\n+    fourth(); // won't show up\n+}\n+\n+fn fourth() {\n+    __rust_begin_short_backtrace(|| fifth());\n+}\n+\n+fn fifth() {\n+    __rust_end_short_backtrace(|| sixth());\n+}\n+\n+fn sixth() {\n+    seven(); // won't show up\n+}\n+\n+fn seven() {\n+    __rust_begin_short_backtrace(|| eight());\n+}\n+\n+fn eight() {\n+    panic!(\"debug!!!\");\n+}\n+\n+fn main() {\n+    first();\n+}"}, {"sha": "2592b7479186aafddbf1479c8043bd95f9e5c541", "filename": "tests/ui/panics/short-ice-remove-middle-frames-2.run.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c3394b3eaa0f6fa135ddca67c3cabb3e9cd41a04/tests%2Fui%2Fpanics%2Fshort-ice-remove-middle-frames-2.run.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c3394b3eaa0f6fa135ddca67c3cabb3e9cd41a04/tests%2Fui%2Fpanics%2Fshort-ice-remove-middle-frames-2.run.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpanics%2Fshort-ice-remove-middle-frames-2.run.stderr?ref=c3394b3eaa0f6fa135ddca67c3cabb3e9cd41a04", "patch": "@@ -0,0 +1,11 @@\n+thread 'main' panicked at 'debug!!!', $DIR/short-ice-remove-middle-frames-2.rs:56:5\n+stack backtrace:\n+   0: std::panicking::begin_panic\n+   1: short_ice_remove_middle_frames_2::eight\n+   2: short_ice_remove_middle_frames_2::seven::{{closure}}\n+   3: short_ice_remove_middle_frames_2::fifth\n+   4: short_ice_remove_middle_frames_2::fourth::{{closure}}\n+   5: short_ice_remove_middle_frames_2::first\n+   6: short_ice_remove_middle_frames_2::main\n+   7: core::ops::function::FnOnce::call_once\n+note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace."}, {"sha": "c872084f0333e664b959142268ef45493202b8b0", "filename": "tests/ui/panics/short-ice-remove-middle-frames.rs", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/c3394b3eaa0f6fa135ddca67c3cabb3e9cd41a04/tests%2Fui%2Fpanics%2Fshort-ice-remove-middle-frames.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3394b3eaa0f6fa135ddca67c3cabb3e9cd41a04/tests%2Fui%2Fpanics%2Fshort-ice-remove-middle-frames.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpanics%2Fshort-ice-remove-middle-frames.rs?ref=c3394b3eaa0f6fa135ddca67c3cabb3e9cd41a04", "patch": "@@ -0,0 +1,57 @@\n+// compile-flags:-Cstrip=none\n+// run-fail\n+// check-run-results\n+// exec-env:RUST_BACKTRACE=1\n+// ignore-android FIXME #17520\n+// ignore-wasm no panic support\n+// ignore-openbsd no support for libbacktrace without filename\n+// ignore-emscripten no panic\n+// ignore-sgx Backtraces not symbolized\n+// ignore-fuchsia Backtraces not symbolized\n+// ignore-msvc the `__rust_{begin,end}_short_backtrace` symbols aren't reliable.\n+\n+\n+#[inline(never)]\n+fn __rust_begin_short_backtrace<T, F: FnOnce() -> T>(f: F) -> T {\n+    let result = f();\n+    std::hint::black_box(result)\n+}\n+\n+#[inline(never)]\n+fn __rust_end_short_backtrace<T, F: FnOnce() -> T>(f: F) -> T {\n+    let result = f();\n+    std::hint::black_box(result)\n+}\n+\n+fn first() {\n+    __rust_end_short_backtrace(|| second());\n+    // do not take effect since we already has a inner call of __rust_end_short_backtrace\n+}\n+\n+fn second() {\n+    __rust_end_short_backtrace(|| third());\n+}\n+\n+fn third() {\n+    fourth(); // won't show up in backtrace\n+}\n+\n+fn fourth() {\n+    fifth(); // won't show up in backtrace\n+}\n+\n+fn fifth() {\n+    __rust_begin_short_backtrace(|| sixth());\n+}\n+\n+fn sixth() {\n+    seven();\n+}\n+\n+fn seven() {\n+    panic!(\"debug!!!\");\n+}\n+\n+fn main() {\n+    first();\n+}"}, {"sha": "9c15f2e08feed9749c907de860d59432b298cb9d", "filename": "tests/ui/panics/short-ice-remove-middle-frames.run.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c3394b3eaa0f6fa135ddca67c3cabb3e9cd41a04/tests%2Fui%2Fpanics%2Fshort-ice-remove-middle-frames.run.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c3394b3eaa0f6fa135ddca67c3cabb3e9cd41a04/tests%2Fui%2Fpanics%2Fshort-ice-remove-middle-frames.run.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpanics%2Fshort-ice-remove-middle-frames.run.stderr?ref=c3394b3eaa0f6fa135ddca67c3cabb3e9cd41a04", "patch": "@@ -0,0 +1,12 @@\n+thread 'main' panicked at 'debug!!!', $DIR/short-ice-remove-middle-frames.rs:52:5\n+stack backtrace:\n+   0: std::panicking::begin_panic\n+   1: short_ice_remove_middle_frames::seven\n+   2: short_ice_remove_middle_frames::sixth\n+   3: short_ice_remove_middle_frames::fifth::{{closure}}\n+   4: short_ice_remove_middle_frames::second\n+   5: short_ice_remove_middle_frames::first::{{closure}}\n+   6: short_ice_remove_middle_frames::first\n+   7: short_ice_remove_middle_frames::main\n+   8: core::ops::function::FnOnce::call_once\n+note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace."}]}