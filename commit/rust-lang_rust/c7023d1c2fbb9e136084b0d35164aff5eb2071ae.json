{"sha": "c7023d1c2fbb9e136084b0d35164aff5eb2071ae", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3MDIzZDFjMmZiYjllMTM2MDg0YjBkMzUxNjRhZmY1ZWIyMDcxYWU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-05-02T10:07:54Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-05-02T20:21:57Z"}, "message": "run MIR borrowck on the validated, not optimized, MIR", "tree": {"sha": "fac5811feaa51f242da3fda09b95eae92476dd4b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fac5811feaa51f242da3fda09b95eae92476dd4b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c7023d1c2fbb9e136084b0d35164aff5eb2071ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c7023d1c2fbb9e136084b0d35164aff5eb2071ae", "html_url": "https://github.com/rust-lang/rust/commit/c7023d1c2fbb9e136084b0d35164aff5eb2071ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c7023d1c2fbb9e136084b0d35164aff5eb2071ae/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74b2783877d5f6906a2e532828203f155054d8f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/74b2783877d5f6906a2e532828203f155054d8f9", "html_url": "https://github.com/rust-lang/rust/commit/74b2783877d5f6906a2e532828203f155054d8f9"}], "stats": {"total": 24, "additions": 22, "deletions": 2}, "files": [{"sha": "abc967dec905c23459cfc9fc567679316d5467af", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7023d1c2fbb9e136084b0d35164aff5eb2071ae/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7023d1c2fbb9e136084b0d35164aff5eb2071ae/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=c7023d1c2fbb9e136084b0d35164aff5eb2071ae", "patch": "@@ -455,7 +455,7 @@ impl<'hir> Map<'hir> {\n                 if let EntryExpr(_, expr) = entry {\n                     BodyId { node_id: expr.id }\n                 } else {\n-                    span_bug!(self.span(id), \"id `{}` has no associated body\", id);\n+                    span_bug!(self.span(id), \"id `{}` has no associated body: {:?}\", id, entry);\n                 }\n             }\n         } else {"}, {"sha": "47f708bf58367215e64ba9b9e25e0a57f1425471", "filename": "src/librustc_borrowck/borrowck/mir/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c7023d1c2fbb9e136084b0d35164aff5eb2071ae/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7023d1c2fbb9e136084b0d35164aff5eb2071ae/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fmod.rs?ref=c7023d1c2fbb9e136084b0d35164aff5eb2071ae", "patch": "@@ -61,7 +61,10 @@ pub fn borrowck_mir(bcx: &mut BorrowckCtxt,\n     let def_id = tcx.hir.local_def_id(id);\n     debug!(\"borrowck_mir({}) UNIMPLEMENTED\", tcx.item_path_str(def_id));\n \n-    let mir = &tcx.item_mir(def_id);\n+    // It is safe for us to borrow `mir_validated()`: `optimized_mir`\n+    // steals it, but it forces the `borrowck` query.\n+    let mir = &tcx.mir_validated(def_id).borrow();\n+\n     let param_env = ty::ParameterEnvironment::for_item(tcx, id);\n     let move_data = MoveData::gather_moves(mir, tcx, &param_env);\n     let mdpe = MoveDataParamEnv { move_data: move_data, param_env: param_env };"}, {"sha": "8a5f1fe3da0ac62d73046bfafea3c49359b686dd", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c7023d1c2fbb9e136084b0d35164aff5eb2071ae/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7023d1c2fbb9e136084b0d35164aff5eb2071ae/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=c7023d1c2fbb9e136084b0d35164aff5eb2071ae", "patch": "@@ -86,6 +86,19 @@ fn borrowck<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, owner_def_id: DefId) {\n     debug!(\"borrowck(body_owner_def_id={:?})\", owner_def_id);\n \n     let owner_id = tcx.hir.as_local_node_id(owner_def_id).unwrap();\n+\n+    match tcx.hir.get(owner_id) {\n+        hir_map::NodeStructCtor(_) |\n+        hir_map::NodeVariant(_) => {\n+            // We get invoked with anything that has MIR, but some of\n+            // those things (notably the synthesized constructors from\n+            // tuple structs/variants) do not have an associated body\n+            // and do not need borrowchecking.\n+            return;\n+        }\n+        _ => { }\n+    }\n+\n     let body_id = tcx.hir.body_owned_by(owner_id);\n     let attributes = tcx.get_attrs(owner_def_id);\n     let tables = tcx.typeck_tables_of(owner_def_id);"}, {"sha": "947b6df4bf0e86277d5a4987328b598986bdbd89", "filename": "src/librustc_mir/queries.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c7023d1c2fbb9e136084b0d35164aff5eb2071ae/src%2Flibrustc_mir%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7023d1c2fbb9e136084b0d35164aff5eb2071ae/src%2Flibrustc_mir%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fqueries.rs?ref=c7023d1c2fbb9e136084b0d35164aff5eb2071ae", "patch": "@@ -110,6 +110,10 @@ fn mir_validated<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx\n }\n \n fn optimized_mir<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx Mir<'tcx> {\n+    // Borrowck uses `mir_validated`, so we have to force it to\n+    // execute before we can steal.\n+    ty::queries::borrowck::force(tcx, DUMMY_SP, def_id);\n+\n     let mut mir = tcx.mir_validated(def_id).steal();\n     let source = MirSource::from_local_def_id(tcx, def_id);\n     transform::run_suite(tcx, source, MIR_OPTIMIZED, &mut mir);"}]}