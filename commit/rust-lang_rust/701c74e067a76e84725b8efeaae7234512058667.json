{"sha": "701c74e067a76e84725b8efeaae7234512058667", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwMWM3NGUwNjdhNzZlODQ3MjViOGVmZWFhZTcyMzQ1MTIwNTg2Njc=", "commit": {"author": {"name": "ashtneoi", "email": "ashtneoi@gmail.com", "date": "2018-08-12T20:27:14Z"}, "committer": {"name": "ashtneoi", "email": "ashtneoi@gmail.com", "date": "2018-08-15T22:14:21Z"}, "message": "Make move error suggestions clearer", "tree": {"sha": "49c4ae99994fda8803b2d7b577fe48a1178c8a8f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/49c4ae99994fda8803b2d7b577fe48a1178c8a8f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/701c74e067a76e84725b8efeaae7234512058667", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/701c74e067a76e84725b8efeaae7234512058667", "html_url": "https://github.com/rust-lang/rust/commit/701c74e067a76e84725b8efeaae7234512058667", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/701c74e067a76e84725b8efeaae7234512058667/comments", "author": {"login": "ashtneoi", "id": 33603534, "node_id": "MDQ6VXNlcjMzNjAzNTM0", "avatar_url": "https://avatars.githubusercontent.com/u/33603534?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ashtneoi", "html_url": "https://github.com/ashtneoi", "followers_url": "https://api.github.com/users/ashtneoi/followers", "following_url": "https://api.github.com/users/ashtneoi/following{/other_user}", "gists_url": "https://api.github.com/users/ashtneoi/gists{/gist_id}", "starred_url": "https://api.github.com/users/ashtneoi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ashtneoi/subscriptions", "organizations_url": "https://api.github.com/users/ashtneoi/orgs", "repos_url": "https://api.github.com/users/ashtneoi/repos", "events_url": "https://api.github.com/users/ashtneoi/events{/privacy}", "received_events_url": "https://api.github.com/users/ashtneoi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ashtneoi", "id": 33603534, "node_id": "MDQ6VXNlcjMzNjAzNTM0", "avatar_url": "https://avatars.githubusercontent.com/u/33603534?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ashtneoi", "html_url": "https://github.com/ashtneoi", "followers_url": "https://api.github.com/users/ashtneoi/followers", "following_url": "https://api.github.com/users/ashtneoi/following{/other_user}", "gists_url": "https://api.github.com/users/ashtneoi/gists{/gist_id}", "starred_url": "https://api.github.com/users/ashtneoi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ashtneoi/subscriptions", "organizations_url": "https://api.github.com/users/ashtneoi/orgs", "repos_url": "https://api.github.com/users/ashtneoi/repos", "events_url": "https://api.github.com/users/ashtneoi/events{/privacy}", "received_events_url": "https://api.github.com/users/ashtneoi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b05e9a7f7724281c43ee7225c4f43cff9e05e617", "url": "https://api.github.com/repos/rust-lang/rust/commits/b05e9a7f7724281c43ee7225c4f43cff9e05e617", "html_url": "https://github.com/rust-lang/rust/commit/b05e9a7f7724281c43ee7225c4f43cff9e05e617"}], "stats": {"total": 167, "additions": 85, "deletions": 82}, "files": [{"sha": "ce7206be4c32c3fa9ebfb46b6cd47038eadf2099", "filename": "src/librustc_mir/borrow_check/move_errors.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/701c74e067a76e84725b8efeaae7234512058667/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/701c74e067a76e84725b8efeaae7234512058667/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs?ref=701c74e067a76e84725b8efeaae7234512058667", "patch": "@@ -354,7 +354,7 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n                     // `*IndexMut::index_mut(&mut a, b)`.\n                     err.span_suggestion(\n                         span,\n-                        \"consider removing this dereference operator\",\n+                        \"consider removing the `*`\",\n                         snippet[1..].to_owned(),\n                     );\n                 } else {\n@@ -400,16 +400,19 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n                 if pat_snippet.starts_with('&') {\n                     let pat_snippet = pat_snippet[1..].trim_left();\n                     let suggestion;\n+                    let to_remove;\n                     if pat_snippet.starts_with(\"mut\")\n                         && pat_snippet[\"mut\".len()..].starts_with(Pattern_White_Space)\n                     {\n                         suggestion = pat_snippet[\"mut\".len()..].trim_left();\n+                        to_remove = \"&mut\";\n                     } else {\n                         suggestion = pat_snippet;\n+                        to_remove = \"&\";\n                     }\n                     err.span_suggestion(\n                         pat_span,\n-                        \"consider removing this borrow operator\",\n+                        &format!(\"consider removing the `{}`\", to_remove),\n                         suggestion.to_owned(),\n                     );\n                 }"}, {"sha": "b7047b01af045a6c025c23393b8354fb576aea8a", "filename": "src/test/ui/suggestions/dont-suggest-ref.rs", "status": "modified", "additions": 40, "deletions": 40, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/701c74e067a76e84725b8efeaae7234512058667/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/701c74e067a76e84725b8efeaae7234512058667/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref.rs?ref=701c74e067a76e84725b8efeaae7234512058667", "patch": "@@ -46,26 +46,26 @@ pub fn main() {\n \n     let X(_t) = *s;\n     //~^ ERROR cannot move\n-    //~| HELP consider removing this dereference operator\n+    //~| HELP consider removing the `*`\n     //~| SUGGESTION s\n     if let Either::One(_t) = *r { }\n     //~^ ERROR cannot move\n-    //~| HELP consider removing this dereference operator\n+    //~| HELP consider removing the `*`\n     //~| SUGGESTION r\n     while let Either::One(_t) = *r { }\n     //~^ ERROR cannot move\n-    //~| HELP consider removing this dereference operator\n+    //~| HELP consider removing the `*`\n     //~| SUGGESTION r\n     match *r {\n         //~^ ERROR cannot move\n-        //~| HELP consider removing this dereference operator\n+        //~| HELP consider removing the `*`\n         //~| SUGGESTION r\n         Either::One(_t)\n         | Either::Two(_t) => (),\n     }\n     match *r {\n         //~^ ERROR cannot move\n-        //~| HELP consider removing this dereference operator\n+        //~| HELP consider removing the `*`\n         //~| SUGGESTION r\n         Either::One(_t) => (),\n         Either::Two(ref _t) => (),\n@@ -74,34 +74,34 @@ pub fn main() {\n \n     let X(_t) = *sm;\n     //~^ ERROR cannot move\n-    //~| HELP consider removing this dereference operator\n+    //~| HELP consider removing the `*`\n     //~| SUGGESTION sm\n     if let Either::One(_t) = *rm { }\n     //~^ ERROR cannot move\n-    //~| HELP consider removing this dereference operator\n+    //~| HELP consider removing the `*`\n     //~| SUGGESTION rm\n     while let Either::One(_t) = *rm { }\n     //~^ ERROR cannot move\n-    //~| HELP consider removing this dereference operator\n+    //~| HELP consider removing the `*`\n     //~| SUGGESTION rm\n     match *rm {\n         //~^ ERROR cannot move\n-        //~| HELP consider removing this dereference operator\n+        //~| HELP consider removing the `*`\n         //~| SUGGESTION rm\n         Either::One(_t)\n         | Either::Two(_t) => (),\n     }\n     match *rm {\n         //~^ ERROR cannot move\n-        //~| HELP consider removing this dereference operator\n+        //~| HELP consider removing the `*`\n         //~| SUGGESTION rm\n         Either::One(_t) => (),\n         Either::Two(ref _t) => (),\n         // TODO: should suggest removing `ref` too\n     }\n     match *rm {\n         //~^ ERROR cannot move\n-        //~| HELP consider removing this dereference operator\n+        //~| HELP consider removing the `*`\n         //~| SUGGESTION rm\n         Either::One(_t) => (),\n         Either::Two(ref mut _t) => (),\n@@ -176,165 +176,165 @@ pub fn main() {\n \n     let &X(_t) = s;\n     //~^ ERROR cannot move\n-    //~| HELP consider removing this borrow operator\n+    //~| HELP consider removing the `&`\n     //~| SUGGESTION X(_t)\n     if let &Either::One(_t) = r { }\n     //~^ ERROR cannot move\n-    //~| HELP consider removing this borrow operator\n+    //~| HELP consider removing the `&`\n     //~| SUGGESTION Either::One(_t)\n     while let &Either::One(_t) = r { }\n     //~^ ERROR cannot move\n-    //~| HELP consider removing this borrow operator\n+    //~| HELP consider removing the `&`\n     //~| SUGGESTION Either::One(_t)\n     match r {\n         //~^ ERROR cannot move\n         &Either::One(_t)\n-        //~^ HELP consider removing this borrow operator\n+        //~^ HELP consider removing the `&`\n         //~| SUGGESTION Either::One(_t)\n         | &Either::Two(_t) => (),\n         // TODO: would really like a suggestion here too\n     }\n     match r {\n         //~^ ERROR cannot move\n         &Either::One(_t) => (),\n-        //~^ HELP consider removing this borrow operator\n+        //~^ HELP consider removing the `&`\n         //~| SUGGESTION Either::One(_t)\n         &Either::Two(ref _t) => (),\n     }\n     match r {\n         //~^ ERROR cannot move\n         &Either::One(_t) => (),\n-        //~^ HELP consider removing this borrow operator\n+        //~^ HELP consider removing the `&`\n         //~| SUGGESTION Either::One(_t)\n         Either::Two(_t) => (),\n     }\n     fn f1(&X(_t): &X) { }\n     //~^ ERROR cannot move\n-    //~| HELP consider removing this borrow operator\n+    //~| HELP consider removing the `&`\n     //~| SUGGESTION X(_t)\n \n     let &mut X(_t) = sm;\n     //~^ ERROR cannot move\n-    //~| HELP consider removing this borrow operator\n+    //~| HELP consider removing the `&mut`\n     //~| SUGGESTION X(_t)\n     if let &mut Either::One(_t) = rm { }\n     //~^ ERROR cannot move\n-    //~| HELP consider removing this borrow operator\n+    //~| HELP consider removing the `&mut`\n     //~| SUGGESTION Either::One(_t)\n     while let &mut Either::One(_t) = rm { }\n     //~^ ERROR cannot move\n-    //~| HELP consider removing this borrow operator\n+    //~| HELP consider removing the `&mut`\n     //~| SUGGESTION Either::One(_t)\n     match rm {\n         //~^ ERROR cannot move\n         &mut Either::One(_t) => (),\n-        //~^ HELP consider removing this borrow operator\n+        //~^ HELP consider removing the `&mut`\n         //~| SUGGESTION Either::One(_t)\n         &mut Either::Two(_t) => (),\n-        //~^ HELP consider removing this borrow operator\n+        //~^ HELP consider removing the `&mut`\n         //~| SUGGESTION Either::Two(_t)\n     }\n     match rm {\n         //~^ ERROR cannot move\n         &mut Either::One(_t) => (),\n-        //~^ HELP consider removing this borrow operator\n+        //~^ HELP consider removing the `&mut`\n         //~| SUGGESTION Either::One(_t)\n         &mut Either::Two(ref _t) => (),\n     }\n     match rm {\n         //~^ ERROR cannot move\n         &mut Either::One(_t) => (),\n-        //~^ HELP consider removing this borrow operator\n+        //~^ HELP consider removing the `&mut`\n         //~| SUGGESTION Either::One(_t)\n         &mut Either::Two(ref mut _t) => (),\n     }\n     match rm {\n         //~^ ERROR cannot move\n         &mut Either::One(_t) => (),\n-        //~^ HELP consider removing this borrow operator\n+        //~^ HELP consider removing the `&mut`\n         //~| SUGGESTION Either::One(_t)\n         Either::Two(_t) => (),\n     }\n     fn f2(&mut X(_t): &mut X) { }\n     //~^ ERROR cannot move\n-    //~| HELP consider removing this borrow operator\n+    //~| HELP consider removing the `&mut`\n     //~| SUGGESTION X(_t)\n \n     // --------\n \n     let &X(_t) = &x;\n     //~^ ERROR cannot move\n-    //~| HELP consider removing this borrow operator\n+    //~| HELP consider removing the `&`\n     //~| SUGGESTION X(_t)\n     if let &Either::One(_t) = &e { }\n     //~^ ERROR cannot move\n-    //~| HELP consider removing this borrow operator\n+    //~| HELP consider removing the `&`\n     //~| SUGGESTION Either::One(_t)\n     while let &Either::One(_t) = &e { }\n     //~^ ERROR cannot move\n-    //~| HELP consider removing this borrow operator\n+    //~| HELP consider removing the `&`\n     //~| SUGGESTION Either::One(_t)\n     match &e {\n         //~^ ERROR cannot move\n         &Either::One(_t)\n-        //~^ HELP consider removing this borrow operator\n+        //~^ HELP consider removing the `&`\n         //~| SUGGESTION Either::One(_t)\n         | &Either::Two(_t) => (),\n         // TODO: would really like a suggestion here too\n     }\n     match &e {\n         //~^ ERROR cannot move\n         &Either::One(_t) => (),\n-        //~^ HELP consider removing this borrow operator\n+        //~^ HELP consider removing the `&`\n         //~| SUGGESTION Either::One(_t)\n         &Either::Two(ref _t) => (),\n     }\n     match &e {\n         //~^ ERROR cannot move\n         &Either::One(_t) => (),\n-        //~^ HELP consider removing this borrow operator\n+        //~^ HELP consider removing the `&`\n         //~| SUGGESTION Either::One(_t)\n         Either::Two(_t) => (),\n     }\n \n     let &mut X(_t) = &mut xm;\n     //~^ ERROR cannot move\n-    //~| HELP consider removing this borrow operator\n+    //~| HELP consider removing the `&mut`\n     //~| SUGGESTION X(_t)\n     if let &mut Either::One(_t) = &mut em { }\n     //~^ ERROR cannot move\n-    //~| HELP consider removing this borrow operator\n+    //~| HELP consider removing the `&mut`\n     //~| SUGGESTION Either::One(_t)\n     while let &mut Either::One(_t) = &mut em { }\n     //~^ ERROR cannot move\n-    //~| HELP consider removing this borrow operator\n+    //~| HELP consider removing the `&mut`\n     //~| SUGGESTION Either::One(_t)\n     match &mut em {\n         //~^ ERROR cannot move\n         &mut Either::One(_t)\n-        //~^ HELP consider removing this borrow operator\n+        //~^ HELP consider removing the `&mut`\n         //~| SUGGESTION Either::One(_t)\n         | &mut Either::Two(_t) => (),\n         // TODO: would really like a suggestion here too\n     }\n     match &mut em {\n         //~^ ERROR cannot move\n         &mut Either::One(_t) => (),\n-        //~^ HELP consider removing this borrow operator\n+        //~^ HELP consider removing the `&mut`\n         //~| SUGGESTION Either::One(_t)\n         &mut Either::Two(ref _t) => (),\n     }\n     match &mut em {\n         //~^ ERROR cannot move\n         &mut Either::One(_t) => (),\n-        //~^ HELP consider removing this borrow operator\n+        //~^ HELP consider removing the `&mut`\n         //~| SUGGESTION Either::One(_t)\n         &mut Either::Two(ref mut _t) => (),\n     }\n     match &mut em {\n         //~^ ERROR cannot move\n         &mut Either::One(_t) => (),\n-        //~^ HELP consider removing this borrow operator\n+        //~^ HELP consider removing the `&mut`\n         //~| SUGGESTION Either::One(_t)\n         Either::Two(_t) => (),\n     }"}, {"sha": "f18b609a1756d825408aa489a5bb7fa9fc31dba6", "filename": "src/test/ui/suggestions/dont-suggest-ref.stderr", "status": "modified", "additions": 40, "deletions": 40, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/701c74e067a76e84725b8efeaae7234512058667/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/701c74e067a76e84725b8efeaae7234512058667/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref.stderr?ref=701c74e067a76e84725b8efeaae7234512058667", "patch": "@@ -5,7 +5,7 @@ LL |     let X(_t) = *s;\n    |           --    ^^\n    |           |     |\n    |           |     cannot move out of borrowed content\n-   |           |     help: consider removing this dereference operator: `s`\n+   |           |     help: consider removing the `*`: `s`\n    |           data moved here\n    |\n note: move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n@@ -21,7 +21,7 @@ LL |     if let Either::One(_t) = *r { }\n    |                        --    ^^\n    |                        |     |\n    |                        |     cannot move out of borrowed content\n-   |                        |     help: consider removing this dereference operator: `r`\n+   |                        |     help: consider removing the `*`: `r`\n    |                        data moved here\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n@@ -37,7 +37,7 @@ LL |     while let Either::One(_t) = *r { }\n    |                           --    ^^\n    |                           |     |\n    |                           |     cannot move out of borrowed content\n-   |                           |     help: consider removing this dereference operator: `r`\n+   |                           |     help: consider removing the `*`: `r`\n    |                           data moved here\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n@@ -53,7 +53,7 @@ LL |     match *r {\n    |           ^^\n    |           |\n    |           cannot move out of borrowed content\n-   |           help: consider removing this dereference operator: `r`\n+   |           help: consider removing the `*`: `r`\n ...\n LL |         Either::One(_t)\n    |                     -- data moved here\n@@ -71,7 +71,7 @@ LL |     match *r {\n    |           ^^\n    |           |\n    |           cannot move out of borrowed content\n-   |           help: consider removing this dereference operator: `r`\n+   |           help: consider removing the `*`: `r`\n ...\n LL |         Either::One(_t) => (),\n    |                     -- data moved here\n@@ -89,7 +89,7 @@ LL |     let X(_t) = *sm;\n    |           --    ^^^\n    |           |     |\n    |           |     cannot move out of borrowed content\n-   |           |     help: consider removing this dereference operator: `sm`\n+   |           |     help: consider removing the `*`: `sm`\n    |           data moved here\n    |\n note: move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n@@ -105,7 +105,7 @@ LL |     if let Either::One(_t) = *rm { }\n    |                        --    ^^^\n    |                        |     |\n    |                        |     cannot move out of borrowed content\n-   |                        |     help: consider removing this dereference operator: `rm`\n+   |                        |     help: consider removing the `*`: `rm`\n    |                        data moved here\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n@@ -121,7 +121,7 @@ LL |     while let Either::One(_t) = *rm { }\n    |                           --    ^^^\n    |                           |     |\n    |                           |     cannot move out of borrowed content\n-   |                           |     help: consider removing this dereference operator: `rm`\n+   |                           |     help: consider removing the `*`: `rm`\n    |                           data moved here\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n@@ -137,7 +137,7 @@ LL |     match *rm {\n    |           ^^^\n    |           |\n    |           cannot move out of borrowed content\n-   |           help: consider removing this dereference operator: `rm`\n+   |           help: consider removing the `*`: `rm`\n ...\n LL |         Either::One(_t)\n    |                     -- data moved here\n@@ -155,7 +155,7 @@ LL |     match *rm {\n    |           ^^^\n    |           |\n    |           cannot move out of borrowed content\n-   |           help: consider removing this dereference operator: `rm`\n+   |           help: consider removing the `*`: `rm`\n ...\n LL |         Either::One(_t) => (),\n    |                     -- data moved here\n@@ -173,7 +173,7 @@ LL |     match *rm {\n    |           ^^^\n    |           |\n    |           cannot move out of borrowed content\n-   |           help: consider removing this dereference operator: `rm`\n+   |           help: consider removing the `*`: `rm`\n ...\n LL |         Either::One(_t) => (),\n    |                     -- data moved here\n@@ -377,7 +377,7 @@ LL |     let &X(_t) = s;\n    |         ------   ^ cannot move out of borrowed content\n    |         |  |\n    |         |  data moved here\n-   |         help: consider removing this borrow operator: `X(_t)`\n+   |         help: consider removing the `&`: `X(_t)`\n    |\n note: move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n   --> $DIR/dont-suggest-ref.rs:177:12\n@@ -392,7 +392,7 @@ LL |     if let &Either::One(_t) = r { }\n    |            ----------------   ^ cannot move out of borrowed content\n    |            |            |\n    |            |            data moved here\n-   |            help: consider removing this borrow operator: `Either::One(_t)`\n+   |            help: consider removing the `&`: `Either::One(_t)`\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n   --> $DIR/dont-suggest-ref.rs:181:25\n@@ -407,7 +407,7 @@ LL |     while let &Either::One(_t) = r { }\n    |               ----------------   ^ cannot move out of borrowed content\n    |               |            |\n    |               |            data moved here\n-   |               help: consider removing this borrow operator: `Either::One(_t)`\n+   |               help: consider removing the `&`: `Either::One(_t)`\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n   --> $DIR/dont-suggest-ref.rs:185:28\n@@ -425,7 +425,7 @@ LL |         &Either::One(_t)\n    |         ----------------\n    |         |            |\n    |         |            data moved here\n-   |         help: consider removing this borrow operator: `Either::One(_t)`\n+   |         help: consider removing the `&`: `Either::One(_t)`\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n   --> $DIR/dont-suggest-ref.rs:191:22\n@@ -443,7 +443,7 @@ LL |         &Either::One(_t) => (),\n    |         ----------------\n    |         |            |\n    |         |            data moved here\n-   |         help: consider removing this borrow operator: `Either::One(_t)`\n+   |         help: consider removing the `&`: `Either::One(_t)`\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n   --> $DIR/dont-suggest-ref.rs:199:22\n@@ -461,7 +461,7 @@ LL |         &Either::One(_t) => (),\n    |         ----------------\n    |         |            |\n    |         |            data moved here\n-   |         help: consider removing this borrow operator: `Either::One(_t)`\n+   |         help: consider removing the `&`: `Either::One(_t)`\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n   --> $DIR/dont-suggest-ref.rs:206:22\n@@ -476,7 +476,7 @@ LL |     let &mut X(_t) = sm;\n    |         ----------   ^^ cannot move out of borrowed content\n    |         |      |\n    |         |      data moved here\n-   |         help: consider removing this borrow operator: `X(_t)`\n+   |         help: consider removing the `&mut`: `X(_t)`\n    |\n note: move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n   --> $DIR/dont-suggest-ref.rs:216:16\n@@ -491,7 +491,7 @@ LL |     if let &mut Either::One(_t) = rm { }\n    |            --------------------   ^^ cannot move out of borrowed content\n    |            |                |\n    |            |                data moved here\n-   |            help: consider removing this borrow operator: `Either::One(_t)`\n+   |            help: consider removing the `&mut`: `Either::One(_t)`\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n   --> $DIR/dont-suggest-ref.rs:220:29\n@@ -506,7 +506,7 @@ LL |     while let &mut Either::One(_t) = rm { }\n    |               --------------------   ^^ cannot move out of borrowed content\n    |               |                |\n    |               |                data moved here\n-   |               help: consider removing this borrow operator: `Either::One(_t)`\n+   |               help: consider removing the `&mut`: `Either::One(_t)`\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n   --> $DIR/dont-suggest-ref.rs:224:32\n@@ -536,11 +536,11 @@ note: move occurs because `_t` has type `X`, which does not implement the `Copy`\n    |\n LL |         &mut Either::Two(_t) => (),\n    |                          ^^\n-help: consider removing this borrow operator\n+help: consider removing the `&mut`\n    |\n LL |         Either::One(_t) => (),\n    |         ^^^^^^^^^^^^^^^\n-help: consider removing this borrow operator\n+help: consider removing the `&mut`\n    |\n LL |         Either::Two(_t) => (),\n    |         ^^^^^^^^^^^^^^^\n@@ -555,7 +555,7 @@ LL |         &mut Either::One(_t) => (),\n    |         --------------------\n    |         |                |\n    |         |                data moved here\n-   |         help: consider removing this borrow operator: `Either::One(_t)`\n+   |         help: consider removing the `&mut`: `Either::One(_t)`\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n   --> $DIR/dont-suggest-ref.rs:239:26\n@@ -573,7 +573,7 @@ LL |         &mut Either::One(_t) => (),\n    |         --------------------\n    |         |                |\n    |         |                data moved here\n-   |         help: consider removing this borrow operator: `Either::One(_t)`\n+   |         help: consider removing the `&mut`: `Either::One(_t)`\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n   --> $DIR/dont-suggest-ref.rs:246:26\n@@ -591,7 +591,7 @@ LL |         &mut Either::One(_t) => (),\n    |         --------------------\n    |         |                |\n    |         |                data moved here\n-   |         help: consider removing this borrow operator: `Either::One(_t)`\n+   |         help: consider removing the `&mut`: `Either::One(_t)`\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n   --> $DIR/dont-suggest-ref.rs:253:26\n@@ -606,7 +606,7 @@ LL |     let &X(_t) = &x;\n    |         ------   ^^ cannot move out of borrowed content\n    |         |  |\n    |         |  data moved here\n-   |         help: consider removing this borrow operator: `X(_t)`\n+   |         help: consider removing the `&`: `X(_t)`\n    |\n note: move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n   --> $DIR/dont-suggest-ref.rs:265:12\n@@ -621,7 +621,7 @@ LL |     if let &Either::One(_t) = &e { }\n    |            ----------------   ^^ cannot move out of borrowed content\n    |            |            |\n    |            |            data moved here\n-   |            help: consider removing this borrow operator: `Either::One(_t)`\n+   |            help: consider removing the `&`: `Either::One(_t)`\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n   --> $DIR/dont-suggest-ref.rs:269:25\n@@ -636,7 +636,7 @@ LL |     while let &Either::One(_t) = &e { }\n    |               ----------------   ^^ cannot move out of borrowed content\n    |               |            |\n    |               |            data moved here\n-   |               help: consider removing this borrow operator: `Either::One(_t)`\n+   |               help: consider removing the `&`: `Either::One(_t)`\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n   --> $DIR/dont-suggest-ref.rs:273:28\n@@ -654,7 +654,7 @@ LL |         &Either::One(_t)\n    |         ----------------\n    |         |            |\n    |         |            data moved here\n-   |         help: consider removing this borrow operator: `Either::One(_t)`\n+   |         help: consider removing the `&`: `Either::One(_t)`\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n   --> $DIR/dont-suggest-ref.rs:279:22\n@@ -672,7 +672,7 @@ LL |         &Either::One(_t) => (),\n    |         ----------------\n    |         |            |\n    |         |            data moved here\n-   |         help: consider removing this borrow operator: `Either::One(_t)`\n+   |         help: consider removing the `&`: `Either::One(_t)`\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n   --> $DIR/dont-suggest-ref.rs:287:22\n@@ -690,7 +690,7 @@ LL |         &Either::One(_t) => (),\n    |         ----------------\n    |         |            |\n    |         |            data moved here\n-   |         help: consider removing this borrow operator: `Either::One(_t)`\n+   |         help: consider removing the `&`: `Either::One(_t)`\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n   --> $DIR/dont-suggest-ref.rs:294:22\n@@ -705,7 +705,7 @@ LL |     let &mut X(_t) = &mut xm;\n    |         ----------   ^^^^^^^ cannot move out of borrowed content\n    |         |      |\n    |         |      data moved here\n-   |         help: consider removing this borrow operator: `X(_t)`\n+   |         help: consider removing the `&mut`: `X(_t)`\n    |\n note: move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n   --> $DIR/dont-suggest-ref.rs:300:16\n@@ -720,7 +720,7 @@ LL |     if let &mut Either::One(_t) = &mut em { }\n    |            --------------------   ^^^^^^^ cannot move out of borrowed content\n    |            |                |\n    |            |                data moved here\n-   |            help: consider removing this borrow operator: `Either::One(_t)`\n+   |            help: consider removing the `&mut`: `Either::One(_t)`\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n   --> $DIR/dont-suggest-ref.rs:304:29\n@@ -735,7 +735,7 @@ LL |     while let &mut Either::One(_t) = &mut em { }\n    |               --------------------   ^^^^^^^ cannot move out of borrowed content\n    |               |                |\n    |               |                data moved here\n-   |               help: consider removing this borrow operator: `Either::One(_t)`\n+   |               help: consider removing the `&mut`: `Either::One(_t)`\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n   --> $DIR/dont-suggest-ref.rs:308:32\n@@ -753,7 +753,7 @@ LL |         &mut Either::One(_t)\n    |         --------------------\n    |         |                |\n    |         |                data moved here\n-   |         help: consider removing this borrow operator: `Either::One(_t)`\n+   |         help: consider removing the `&mut`: `Either::One(_t)`\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n   --> $DIR/dont-suggest-ref.rs:314:26\n@@ -771,7 +771,7 @@ LL |         &mut Either::One(_t) => (),\n    |         --------------------\n    |         |                |\n    |         |                data moved here\n-   |         help: consider removing this borrow operator: `Either::One(_t)`\n+   |         help: consider removing the `&mut`: `Either::One(_t)`\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n   --> $DIR/dont-suggest-ref.rs:322:26\n@@ -789,7 +789,7 @@ LL |         &mut Either::One(_t) => (),\n    |         --------------------\n    |         |                |\n    |         |                data moved here\n-   |         help: consider removing this borrow operator: `Either::One(_t)`\n+   |         help: consider removing the `&mut`: `Either::One(_t)`\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n   --> $DIR/dont-suggest-ref.rs:329:26\n@@ -807,7 +807,7 @@ LL |         &mut Either::One(_t) => (),\n    |         --------------------\n    |         |                |\n    |         |                data moved here\n-   |         help: consider removing this borrow operator: `Either::One(_t)`\n+   |         help: consider removing the `&mut`: `Either::One(_t)`\n    |\n note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n   --> $DIR/dont-suggest-ref.rs:336:26\n@@ -823,7 +823,7 @@ LL |     fn f1(&X(_t): &X) { }\n    |           |  |\n    |           |  data moved here\n    |           cannot move out of borrowed content\n-   |           help: consider removing this borrow operator: `X(_t)`\n+   |           help: consider removing the `&`: `X(_t)`\n    |\n note: move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n   --> $DIR/dont-suggest-ref.rs:211:14\n@@ -839,7 +839,7 @@ LL |     fn f2(&mut X(_t): &mut X) { }\n    |           |      |\n    |           |      data moved here\n    |           cannot move out of borrowed content\n-   |           help: consider removing this borrow operator: `X(_t)`\n+   |           help: consider removing the `&mut`: `X(_t)`\n    |\n note: move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n   --> $DIR/dont-suggest-ref.rs:258:18"}]}