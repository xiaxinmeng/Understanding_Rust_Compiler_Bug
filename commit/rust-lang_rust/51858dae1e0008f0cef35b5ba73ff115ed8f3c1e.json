{"sha": "51858dae1e0008f0cef35b5ba73ff115ed8f3c1e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxODU4ZGFlMWUwMDA4ZjBjZWYzNWI1YmE3M2ZmMTE1ZWQ4ZjNjMWU=", "commit": {"author": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2020-06-30T22:42:55Z"}, "committer": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2020-06-30T22:42:55Z"}, "message": "Make #[target_feature] Fn trait error message less confusing", "tree": {"sha": "9aca02c7a479c897f28ff71bf4b179fbdf55f629", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9aca02c7a479c897f28ff71bf4b179fbdf55f629"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/51858dae1e0008f0cef35b5ba73ff115ed8f3c1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/51858dae1e0008f0cef35b5ba73ff115ed8f3c1e", "html_url": "https://github.com/rust-lang/rust/commit/51858dae1e0008f0cef35b5ba73ff115ed8f3c1e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/51858dae1e0008f0cef35b5ba73ff115ed8f3c1e/comments", "author": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e899b1cbe6209842e112f0b7ec450a3cdfdb36d", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e899b1cbe6209842e112f0b7ec450a3cdfdb36d", "html_url": "https://github.com/rust-lang/rust/commit/8e899b1cbe6209842e112f0b7ec450a3cdfdb36d"}], "stats": {"total": 43, "additions": 21, "deletions": 22}, "files": [{"sha": "ade3dee0b128601fc8f6e8ea464116041698ff9e", "filename": "src/librustc_trait_selection/traits/error_reporting/mod.rs", "status": "modified", "additions": 15, "deletions": 16, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/51858dae1e0008f0cef35b5ba73ff115ed8f3c1e/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51858dae1e0008f0cef35b5ba73ff115ed8f3c1e/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=51858dae1e0008f0cef35b5ba73ff115ed8f3c1e", "patch": "@@ -286,18 +286,6 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                             .starts_with(\"std::convert::From<\");\n                         let is_unsize =\n                             { Some(trait_ref.def_id()) == self.tcx.lang_items().unsize_trait() };\n-                        let is_fn_trait = [\n-                            self.tcx.lang_items().fn_trait(),\n-                            self.tcx.lang_items().fn_mut_trait(),\n-                            self.tcx.lang_items().fn_once_trait(),\n-                        ]\n-                        .contains(&Some(trait_ref.def_id()));\n-                        let is_target_feature_fn =\n-                            if let ty::FnDef(def_id, _) = trait_ref.skip_binder().self_ty().kind {\n-                                !self.tcx.codegen_fn_attrs(def_id).target_features.is_empty()\n-                            } else {\n-                                false\n-                            };\n                         let (message, note) = if is_try && is_from {\n                             (\n                                 Some(format!(\n@@ -439,11 +427,22 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                             );\n                         }\n \n+                        let is_fn_trait = [\n+                            self.tcx.lang_items().fn_trait(),\n+                            self.tcx.lang_items().fn_mut_trait(),\n+                            self.tcx.lang_items().fn_once_trait(),\n+                        ]\n+                        .contains(&Some(trait_ref.def_id()));\n+                        let is_target_feature_fn =\n+                            if let ty::FnDef(def_id, _) = trait_ref.skip_binder().self_ty().kind {\n+                                !self.tcx.codegen_fn_attrs(def_id).target_features.is_empty()\n+                            } else {\n+                                false\n+                            };\n                         if is_fn_trait && is_target_feature_fn {\n-                            err.note(&format!(\n-                                \"`{}` has `#[target_feature]` and is unsafe to call\",\n-                                trait_ref.skip_binder().self_ty(),\n-                            ));\n+                            err.note(\n+                                \"`#[target_feature]` functions do not implement the `Fn` traits\",\n+                            );\n                         }\n \n                         // Try to report a help message"}, {"sha": "448077b439e80bb3416fe4fdf62361755fb9fffc", "filename": "src/test/ui/rfcs/rfc-2396-target_feature-11/fn-traits.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/51858dae1e0008f0cef35b5ba73ff115ed8f3c1e/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffn-traits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/51858dae1e0008f0cef35b5ba73ff115ed8f3c1e/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffn-traits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffn-traits.stderr?ref=51858dae1e0008f0cef35b5ba73ff115ed8f3c1e", "patch": "@@ -9,7 +9,7 @@ LL |     call(foo);\n    |\n    = help: the trait `std::ops::Fn<()>` is not implemented for `fn() {foo}`\n    = note: wrap the `fn() {foo}` in a closure with no arguments: `|| { /* code */ }\n-   = note: `fn() {foo}` has `#[target_feature]` and is unsafe to call\n+   = note: `#[target_feature]` functions do not implement the `Fn` traits\n \n error[E0277]: expected a `std::ops::FnMut<()>` closure, found `fn() {foo}`\n   --> $DIR/fn-traits.rs:25:14\n@@ -22,7 +22,7 @@ LL |     call_mut(foo);\n    |\n    = help: the trait `std::ops::FnMut<()>` is not implemented for `fn() {foo}`\n    = note: wrap the `fn() {foo}` in a closure with no arguments: `|| { /* code */ }\n-   = note: `fn() {foo}` has `#[target_feature]` and is unsafe to call\n+   = note: `#[target_feature]` functions do not implement the `Fn` traits\n \n error[E0277]: expected a `std::ops::FnOnce<()>` closure, found `fn() {foo}`\n   --> $DIR/fn-traits.rs:26:15\n@@ -35,7 +35,7 @@ LL |     call_once(foo);\n    |\n    = help: the trait `std::ops::FnOnce<()>` is not implemented for `fn() {foo}`\n    = note: wrap the `fn() {foo}` in a closure with no arguments: `|| { /* code */ }\n-   = note: `fn() {foo}` has `#[target_feature]` and is unsafe to call\n+   = note: `#[target_feature]` functions do not implement the `Fn` traits\n \n error[E0277]: expected a `std::ops::Fn<()>` closure, found `unsafe fn() {foo_unsafe}`\n   --> $DIR/fn-traits.rs:28:10\n@@ -48,7 +48,7 @@ LL |     call(foo_unsafe);\n    |\n    = help: the trait `std::ops::Fn<()>` is not implemented for `unsafe fn() {foo_unsafe}`\n    = note: wrap the `unsafe fn() {foo_unsafe}` in a closure with no arguments: `|| { /* code */ }\n-   = note: `unsafe fn() {foo_unsafe}` has `#[target_feature]` and is unsafe to call\n+   = note: `#[target_feature]` functions do not implement the `Fn` traits\n \n error[E0277]: expected a `std::ops::FnMut<()>` closure, found `unsafe fn() {foo_unsafe}`\n   --> $DIR/fn-traits.rs:30:14\n@@ -61,7 +61,7 @@ LL |     call_mut(foo_unsafe);\n    |\n    = help: the trait `std::ops::FnMut<()>` is not implemented for `unsafe fn() {foo_unsafe}`\n    = note: wrap the `unsafe fn() {foo_unsafe}` in a closure with no arguments: `|| { /* code */ }\n-   = note: `unsafe fn() {foo_unsafe}` has `#[target_feature]` and is unsafe to call\n+   = note: `#[target_feature]` functions do not implement the `Fn` traits\n \n error[E0277]: expected a `std::ops::FnOnce<()>` closure, found `unsafe fn() {foo_unsafe}`\n   --> $DIR/fn-traits.rs:32:15\n@@ -74,7 +74,7 @@ LL |     call_once(foo_unsafe);\n    |\n    = help: the trait `std::ops::FnOnce<()>` is not implemented for `unsafe fn() {foo_unsafe}`\n    = note: wrap the `unsafe fn() {foo_unsafe}` in a closure with no arguments: `|| { /* code */ }\n-   = note: `unsafe fn() {foo_unsafe}` has `#[target_feature]` and is unsafe to call\n+   = note: `#[target_feature]` functions do not implement the `Fn` traits\n \n error: aborting due to 6 previous errors\n "}]}