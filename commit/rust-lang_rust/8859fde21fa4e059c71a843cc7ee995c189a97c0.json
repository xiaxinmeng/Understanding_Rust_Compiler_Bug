{"sha": "8859fde21fa4e059c71a843cc7ee995c189a97c0", "node_id": "C_kwDOAAsO6NoAKDg4NTlmZGUyMWZhNGUwNTljNzFhODQzY2M3ZWU5OTVjMTg5YTk3YzA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-22T21:35:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-22T21:35:02Z"}, "message": "Auto merge of #109497 - matthiaskrgr:rollup-6txuxm0, r=matthiaskrgr\n\nRollup of 10 pull requests\n\nSuccessful merges:\n\n - #109373 (Set LLVM `LLVM_UNREACHABLE_OPTIMIZE` to `OFF`)\n - #109392 (Custom MIR: Allow optional RET type annotation)\n - #109394 (adapt tests/codegen/vec-shrink-panik for LLVM 17)\n - #109412 (rustdoc: Add GUI test for \"Auto-hide item contents for large items\" setting)\n - #109452 (Ignore the vendor directory for tidy tests.)\n - #109457 (Remove comment about reusing rib allocations)\n - #109461 (rustdoc: remove redundant `.content` prefix from span/a colors)\n - #109477 (`HirId` to `LocalDefId` cleanup)\n - #109489 (More general captures)\n - #109494 (Do not feed param_env for RPITITs impl side)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "e4667bdecb090c73393e8b3ca4dfded439d8dc5f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e4667bdecb090c73393e8b3ca4dfded439d8dc5f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8859fde21fa4e059c71a843cc7ee995c189a97c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8859fde21fa4e059c71a843cc7ee995c189a97c0", "html_url": "https://github.com/rust-lang/rust/commit/8859fde21fa4e059c71a843cc7ee995c189a97c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8859fde21fa4e059c71a843cc7ee995c189a97c0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a266f11990d9544ee408e213e1eec8cc9eb032b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/a266f11990d9544ee408e213e1eec8cc9eb032b7", "html_url": "https://github.com/rust-lang/rust/commit/a266f11990d9544ee408e213e1eec8cc9eb032b7"}, {"sha": "6244b94377a77d9caf84f6a8f4e375ae4e672465", "url": "https://api.github.com/repos/rust-lang/rust/commits/6244b94377a77d9caf84f6a8f4e375ae4e672465", "html_url": "https://github.com/rust-lang/rust/commit/6244b94377a77d9caf84f6a8f4e375ae4e672465"}], "stats": {"total": 207, "additions": 153, "deletions": 54}, "files": [{"sha": "46692fd5e8bcfadd23e27842b5fc137db3c87a71", "filename": "compiler/rustc_codegen_llvm/src/llvm_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8859fde21fa4e059c71a843cc7ee995c189a97c0/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8859fde21fa4e059c71a843cc7ee995c189a97c0/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs?ref=8859fde21fa4e059c71a843cc7ee995c189a97c0", "patch": "@@ -424,7 +424,7 @@ pub(crate) fn global_llvm_features(sess: &Session, diagnostics: bool) -> Vec<Str\n         .filter_map(|s| {\n             let enable_disable = match s.chars().next() {\n                 None => return None,\n-                Some(c @ '+' | c @ '-') => c,\n+                Some(c @ ('+' | '-')) => c,\n                 Some(_) => {\n                     if diagnostics {\n                         sess.emit_warning(UnknownCTargetFeaturePrefix { feature: s });"}, {"sha": "c41e96290df1632f95635926afe9133efc523974", "filename": "compiler/rustc_hir_analysis/src/collect.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8859fde21fa4e059c71a843cc7ee995c189a97c0/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8859fde21fa4e059c71a843cc7ee995c189a97c0/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs?ref=8859fde21fa4e059c71a843cc7ee995c189a97c0", "patch": "@@ -1208,7 +1208,7 @@ fn infer_return_ty_for_fn_sig<'tcx>(\n                     fn_sig,\n                     Applicability::MachineApplicable,\n                 );\n-            } else if let Some(sugg) = suggest_impl_trait(tcx, ret_ty, ty.span, hir_id, def_id) {\n+            } else if let Some(sugg) = suggest_impl_trait(tcx, ret_ty, ty.span, def_id) {\n                 diag.span_suggestion(\n                     ty.span,\n                     \"replace with an appropriate return type\",\n@@ -1240,12 +1240,10 @@ fn infer_return_ty_for_fn_sig<'tcx>(\n     }\n }\n \n-// FIXME(vincenzopalazzo): remove the hir item when the refactoring is stable\n fn suggest_impl_trait<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     ret_ty: Ty<'tcx>,\n     span: Span,\n-    _hir_id: hir::HirId,\n     def_id: LocalDefId,\n ) -> Option<String> {\n     let format_as_assoc: fn(_, _, _, _, _) -> _ ="}, {"sha": "fb7cb86d734eff2c13603ff3a0ab16c5b057db13", "filename": "compiler/rustc_hir_typeck/src/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8859fde21fa4e059c71a843cc7ee995c189a97c0/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8859fde21fa4e059c71a843cc7ee995c189a97c0/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs?ref=8859fde21fa4e059c71a843cc7ee995c189a97c0", "patch": "@@ -231,7 +231,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         let ty = ensure_sufficient_stack(|| match &expr.kind {\n             hir::ExprKind::Path(\n-                qpath @ hir::QPath::Resolved(..) | qpath @ hir::QPath::TypeRelative(..),\n+                qpath @ (hir::QPath::Resolved(..) | hir::QPath::TypeRelative(..)),\n             ) => self.check_expr_path(qpath, expr, args),\n             _ => self.check_expr_kind(expr, expected),\n         });"}, {"sha": "18a49ef2f0162daae349a10f8afe4b6d2154f49b", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/suggestions.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8859fde21fa4e059c71a843cc7ee995c189a97c0/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8859fde21fa4e059c71a843cc7ee995c189a97c0/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs?ref=8859fde21fa4e059c71a843cc7ee995c189a97c0", "patch": "@@ -165,8 +165,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         &self,\n         ty: Ty<'tcx>,\n     ) -> Option<(DefIdOrName, Ty<'tcx>, Vec<Ty<'tcx>>)> {\n-        let body_hir_id = self.tcx.hir().local_def_id_to_hir_id(self.body_id);\n-        self.err_ctxt().extract_callable_info(body_hir_id, self.param_env, ty)\n+        self.err_ctxt().extract_callable_info(self.body_id, self.param_env, ty)\n     }\n \n     pub fn suggest_two_fn_call("}, {"sha": "9b0c6e25d16b4903baaf7dde4f5bcafef8a60c7c", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8859fde21fa4e059c71a843cc7ee995c189a97c0/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8859fde21fa4e059c71a843cc7ee995c189a97c0/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=8859fde21fa4e059c71a843cc7ee995c189a97c0", "patch": "@@ -2525,7 +2525,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         ident\n     }\n \n-    // FIXME(vincenzoapalzzo): move the HirId to a LocalDefId\n+    // FIXME(vincenzopalazzo): move the HirId to a LocalDefId\n     pub fn adjust_ident_and_get_scope(\n         self,\n         mut ident: Ident,"}, {"sha": "6af9dc89e5694c71a076c9383721a675c8d5109f", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8859fde21fa4e059c71a843cc7ee995c189a97c0/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8859fde21fa4e059c71a843cc7ee995c189a97c0/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=8859fde21fa4e059c71a843cc7ee995c189a97c0", "patch": "@@ -590,7 +590,6 @@ struct LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n     parent_scope: ParentScope<'a>,\n \n     /// The current set of local scopes for types and values.\n-    /// FIXME #4948: Reuse ribs to avoid allocation.\n     ribs: PerNS<Vec<Rib<'a>>>,\n \n     /// Previous poped `rib`, only used for diagnostic."}, {"sha": "ee35664619fd9a9373f7f2f865c5b51109ae7b1f", "filename": "compiler/rustc_resolve/src/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8859fde21fa4e059c71a843cc7ee995c189a97c0/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8859fde21fa4e059c71a843cc7ee995c189a97c0/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs?ref=8859fde21fa4e059c71a843cc7ee995c189a97c0", "patch": "@@ -703,7 +703,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                 PathResult::NonModule(path_res) if let Some(res) = path_res.full_res() => {\n                     check_consistency(self, &path, path_span, kind, initial_res, res)\n                 }\n-                path_res @ PathResult::NonModule(..) | path_res @ PathResult::Failed { .. } => {\n+                path_res @ (PathResult::NonModule(..) | PathResult::Failed { .. }) => {\n                     let mut suggestion = None;\n                     let (span, label) = if let PathResult::Failed { span, label, .. } = path_res {\n                         // try to suggest if it's not a macro, maybe a function"}, {"sha": "af108ab6f309f0df5800f0273dbaaee053588a21", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8859fde21fa4e059c71a843cc7ee995c189a97c0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8859fde21fa4e059c71a843cc7ee995c189a97c0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=8859fde21fa4e059c71a843cc7ee995c189a97c0", "patch": "@@ -212,7 +212,7 @@ pub trait TypeErrCtxtExt<'tcx> {\n \n     fn extract_callable_info(\n         &self,\n-        hir_id: HirId,\n+        body_id: LocalDefId,\n         param_env: ty::ParamEnv<'tcx>,\n         found: Ty<'tcx>,\n     ) -> Option<(DefIdOrName, Ty<'tcx>, Vec<Ty<'tcx>>)>;\n@@ -909,9 +909,8 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             trait_pred.self_ty(),\n         );\n \n-        let body_hir_id = self.tcx.hir().local_def_id_to_hir_id(obligation.cause.body_id);\n         let Some((def_id_or_name, output, inputs)) = self.extract_callable_info(\n-            body_hir_id,\n+            obligation.cause.body_id,\n             obligation.param_env,\n             self_ty,\n         ) else { return false; };\n@@ -1113,10 +1112,9 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n     /// Extracts information about a callable type for diagnostics. This is a\n     /// heuristic -- it doesn't necessarily mean that a type is always callable,\n     /// because the callable type must also be well-formed to be called.\n-    // FIXME(vincenzopalazzo): move the HirId to a LocalDefId\n     fn extract_callable_info(\n         &self,\n-        hir_id: HirId,\n+        body_id: LocalDefId,\n         param_env: ty::ParamEnv<'tcx>,\n         found: Ty<'tcx>,\n     ) -> Option<(DefIdOrName, Ty<'tcx>, Vec<Ty<'tcx>>)> {\n@@ -1168,7 +1166,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                     })\n                 }\n                 ty::Param(param) => {\n-                    let generics = self.tcx.generics_of(hir_id.owner.to_def_id());\n+                    let generics = self.tcx.generics_of(body_id);\n                     let name = if generics.count() > param.index as usize\n                         && let def = generics.param_at(param.index as usize, self.tcx)\n                         && matches!(def.kind, ty::GenericParamDefKind::Type { .. })"}, {"sha": "bf0bc202852e4fa00e85ae9ecf81c4e9eb4659af", "filename": "compiler/rustc_ty_utils/src/assoc.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8859fde21fa4e059c71a843cc7ee995c189a97c0/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8859fde21fa4e059c71a843cc7ee995c189a97c0/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs?ref=8859fde21fa4e059c71a843cc7ee995c189a97c0", "patch": "@@ -386,10 +386,6 @@ fn associated_type_for_impl_trait_in_impl(\n         opt_rpitit_info: Some(ImplTraitInTraitData::Impl { fn_def_id: impl_fn_def_id.to_def_id() }),\n     });\n \n-    // Copy param_env of the containing function. The synthesized associated type doesn't have\n-    // extra predicates to assume.\n-    impl_assoc_ty.param_env(tcx.param_env(impl_fn_def_id));\n-\n     // Copy visility of the containing function.\n     impl_assoc_ty.visibility(tcx.visibility(impl_fn_def_id));\n "}, {"sha": "50aeb7f440faf204aaaa24b6a5e8e0d23f634b70", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8859fde21fa4e059c71a843cc7ee995c189a97c0/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8859fde21fa4e059c71a843cc7ee995c189a97c0/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=8859fde21fa4e059c71a843cc7ee995c189a97c0", "patch": "@@ -130,7 +130,9 @@ fn param_env(tcx: TyCtxt<'_>, def_id: DefId) -> ty::ParamEnv<'_> {\n     // FIXME(-Zlower-impl-trait-in-trait-to-assoc-ty): I don't like this, we should\n     // at least be making sure that the generics in RPITITs and their parent fn don't\n     // get out of alignment, or else we do actually need to substitute these predicates.\n-    if let Some(ImplTraitInTraitData::Trait { fn_def_id, .. }) = tcx.opt_rpitit_info(def_id) {\n+    if let Some(ImplTraitInTraitData::Trait { fn_def_id, .. })\n+    | Some(ImplTraitInTraitData::Impl { fn_def_id, .. }) = tcx.opt_rpitit_info(def_id)\n+    {\n         predicates = tcx.predicates_of(fn_def_id).instantiate_identity(tcx).predicates;\n     }\n "}, {"sha": "3061f76df04d0e9a1429a77a2559b0869477a81c", "filename": "library/core/src/intrinsics/mir.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8859fde21fa4e059c71a843cc7ee995c189a97c0/library%2Fcore%2Fsrc%2Fintrinsics%2Fmir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8859fde21fa4e059c71a843cc7ee995c189a97c0/library%2Fcore%2Fsrc%2Fintrinsics%2Fmir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics%2Fmir.rs?ref=8859fde21fa4e059c71a843cc7ee995c189a97c0", "patch": "@@ -49,6 +49,8 @@\n //!\n //! The input to the [`mir!`] macro is:\n //!\n+//!  - An optional return type annotation in the form of `type RET = ...;`. This may be required\n+//!    if the compiler cannot infer the type of RET.\n //!  - A possibly empty list of local declarations. Locals can also be declared inline on\n //!    assignments via `let`. Type inference generally works. Shadowing does not.\n //!  - A list of basic blocks. The first of these is the start block and is where execution begins.\n@@ -124,6 +126,18 @@\n //!         }\n //!     )\n //! }\n+//!\n+//! #[custom_mir(dialect = \"runtime\", phase = \"optimized\")]\n+//! fn annotated_return_type() -> (i32, bool) {\n+//!     mir!(\n+//!         type RET = (i32, bool);\n+//!         {\n+//!             RET.0 = 1;\n+//!             RET.1 = true;\n+//!             Return()\n+//!         }\n+//!     )\n+//! }\n //! ```\n //!\n //! We can also set off compilation failures that happen in sufficiently late stages of the\n@@ -342,6 +356,7 @@ define!(\n #[rustc_macro_transparency = \"transparent\"]\n pub macro mir {\n     (\n+        $(type RET = $ret_ty:ty ;)?\n         $(let $local_decl:ident $(: $local_decl_ty:ty)? ;)*\n \n         {\n@@ -362,7 +377,7 @@ pub macro mir {\n         {\n             // Now all locals\n             #[allow(non_snake_case)]\n-            let RET;\n+            let RET $(: $ret_ty)?;\n             $(\n                 let $local_decl $(: $local_decl_ty)? ;\n             )*"}, {"sha": "36f9aaa595d0ff0632efefcf46177695bfcfc773", "filename": "src/bootstrap/download-ci-llvm-stamp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8859fde21fa4e059c71a843cc7ee995c189a97c0/src%2Fbootstrap%2Fdownload-ci-llvm-stamp", "raw_url": "https://github.com/rust-lang/rust/raw/8859fde21fa4e059c71a843cc7ee995c189a97c0/src%2Fbootstrap%2Fdownload-ci-llvm-stamp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdownload-ci-llvm-stamp?ref=8859fde21fa4e059c71a843cc7ee995c189a97c0", "patch": "@@ -1,4 +1,4 @@\n Change this file to make users of the `download-ci-llvm` configuration download\n a new version of LLVM from CI, even if the LLVM submodule hasn\u2019t changed.\n \n-Last change is for: https://github.com/rust-lang/rust/pull/104748\n+Last change is for: https://github.com/rust-lang/rust/pull/109373"}, {"sha": "f27db5c91e221f8adcd07bda6bd71243b627155f", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8859fde21fa4e059c71a843cc7ee995c189a97c0/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8859fde21fa4e059c71a843cc7ee995c189a97c0/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=8859fde21fa4e059c71a843cc7ee995c189a97c0", "patch": "@@ -309,6 +309,7 @@ impl Step for Llvm {\n         cfg.out_dir(&out_dir)\n             .profile(profile)\n             .define(\"LLVM_ENABLE_ASSERTIONS\", assertions)\n+            .define(\"LLVM_UNREACHABLE_OPTIMIZE\", \"OFF\")\n             .define(\"LLVM_ENABLE_PLUGINS\", plugins)\n             .define(\"LLVM_TARGETS_TO_BUILD\", llvm_targets)\n             .define(\"LLVM_EXPERIMENTAL_TARGETS_TO_BUILD\", llvm_exp_targets)"}, {"sha": "6fd113fcfd8aae914eb08b99fbe556feb340e324", "filename": "src/ci/docker/host-x86_64/x86_64-gnu-tools/browser-ui-test.version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8859fde21fa4e059c71a843cc7ee995c189a97c0/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2Fbrowser-ui-test.version", "raw_url": "https://github.com/rust-lang/rust/raw/8859fde21fa4e059c71a843cc7ee995c189a97c0/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2Fbrowser-ui-test.version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2Fbrowser-ui-test.version?ref=8859fde21fa4e059c71a843cc7ee995c189a97c0", "patch": "@@ -1 +1 @@\n-0.14.4\n\\ No newline at end of file\n+0.14.5\n\\ No newline at end of file"}, {"sha": "7d578b5c7754a152138e43866ff419bad835c49c", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/8859fde21fa4e059c71a843cc7ee995c189a97c0/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/8859fde21fa4e059c71a843cc7ee995c189a97c0/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=8859fde21fa4e059c71a843cc7ee995c189a97c0", "patch": "@@ -217,7 +217,7 @@ ul.all-items {\n a.anchor,\n .small-section-header a,\n #source-sidebar a,\n-pre.rust a,\n+.rust a,\n .sidebar h2 a,\n .sidebar h3 a,\n .mobile-topbar h2 a,\n@@ -228,43 +228,43 @@ h1 a,\n \tcolor: var(--main-color);\n }\n \n-.content span.enum, .content a.enum,\n-.content span.struct, .content a.struct,\n-.content span.union, .content a.union,\n-.content span.primitive, .content a.primitive,\n-.content span.type, .content a.type,\n-.content span.foreigntype, .content a.foreigntype {\n+span.enum, a.enum,\n+span.struct, a.struct,\n+span.union, a.union,\n+span.primitive, a.primitive,\n+span.type, a.type,\n+span.foreigntype, a.foreigntype {\n \tcolor: var(--type-link-color);\n }\n \n-.content span.trait, .content a.trait,\n-.content span.traitalias, .content a.traitalias {\n+span.trait, a.trait,\n+span.traitalias, a.traitalias {\n \tcolor: var(--trait-link-color);\n }\n \n-.content span.associatedtype, .content a.associatedtype,\n-.content span.constant, .content a.constant,\n-.content span.static, .content a.static {\n+span.associatedtype, a.associatedtype,\n+span.constant, a.constant,\n+span.static, a.static {\n \tcolor: var(--assoc-item-link-color);\n }\n \n-.content span.fn, .content a.fn,\n-.content span.method, .content a.method,\n-.content span.tymethod, .content a.tymethod {\n+span.fn, a.fn,\n+span.method, a.method,\n+span.tymethod, a.tymethod {\n \tcolor: var(--function-link-color);\n }\n \n-.content span.attr, .content a.attr,\n-.content span.derive, .content a.derive,\n-.content span.macro, .content a.macro {\n+span.attr, a.attr,\n+span.derive, a.derive,\n+span.macro, a.macro {\n \tcolor: var(--macro-link-color);\n }\n \n-.content span.mod, .content a.mod {\n+span.mod, a.mod {\n \tcolor: var(--mod-link-color);\n }\n \n-.content span.keyword, .content a.keyword {\n+span.keyword, a.keyword {\n \tcolor: var(--keyword-link-color);\n }\n \n@@ -713,7 +713,7 @@ h2.small-section-header > .anchor {\n }\n \n .main-heading a:hover,\n-.example-wrap > pre.rust a:hover,\n+.example-wrap > .rust a:hover,\n .all-items a:hover,\n .docblock a:not(.test-arrow):not(.scrape-help):not(.tooltip):hover,\n .docblock-short a:not(.test-arrow):not(.scrape-help):not(.tooltip):hover,"}, {"sha": "67a4df19fcc7aafb8144ac842e16b5fa21c0298b", "filename": "src/tools/tidy/src/walk.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8859fde21fa4e059c71a843cc7ee995c189a97c0/src%2Ftools%2Ftidy%2Fsrc%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8859fde21fa4e059c71a843cc7ee995c189a97c0/src%2Ftools%2Ftidy%2Fsrc%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fwalk.rs?ref=8859fde21fa4e059c71a843cc7ee995c189a97c0", "patch": "@@ -29,6 +29,7 @@ pub fn filter_dirs(path: &Path) -> bool {\n         // Filter RLS output directories\n         \"target/rls\",\n         \"src/bootstrap/target\",\n+        \"vendor\",\n     ];\n     skip.iter().any(|p| path.ends_with(p))\n }"}, {"sha": "b3c3483fea9824fdf0401059e0b148c18cbf648a", "filename": "tests/codegen/vec-shrink-panik.rs", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/8859fde21fa4e059c71a843cc7ee995c189a97c0/tests%2Fcodegen%2Fvec-shrink-panik.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8859fde21fa4e059c71a843cc7ee995c189a97c0/tests%2Fcodegen%2Fvec-shrink-panik.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fvec-shrink-panik.rs?ref=8859fde21fa4e059c71a843cc7ee995c189a97c0", "patch": "@@ -1,3 +1,8 @@\n+// revisions: old new\n+// LLVM 17 realizes double panic is not possible and doesn't generate calls\n+// to panic_cannot_unwind.\n+// [old]ignore-llvm-version: 17 - 99\n+// [new]min-llvm-version: 17\n // compile-flags: -O\n // ignore-debug: the debug assertions get in the way\n #![crate_type = \"lib\"]\n@@ -18,11 +23,11 @@ pub fn shrink_to_fit(vec: &mut Vec<u32>) {\n pub fn issue71861(vec: Vec<u32>) -> Box<[u32]> {\n     // CHECK-NOT: panic\n \n-    // Call to panic_cannot_unwind in case of double-panic is expected,\n-    // but other panics are not.\n+    // Call to panic_cannot_unwind in case of double-panic is expected\n+    // on LLVM 16 and older, but other panics are not.\n     // CHECK: cleanup\n-    // CHECK-NEXT: ; call core::panicking::panic_cannot_unwind\n-    // CHECK-NEXT: panic_cannot_unwind\n+    // old-NEXT: ; call core::panicking::panic_cannot_unwind\n+    // old-NEXT: panic_cannot_unwind\n \n     // CHECK-NOT: panic\n     vec.into_boxed_slice()\n@@ -34,14 +39,14 @@ pub fn issue75636<'a>(iter: &[&'a str]) -> Box<[&'a str]> {\n     // CHECK-NOT: panic\n \n     // Call to panic_cannot_unwind in case of double-panic is expected,\n-    // but other panics are not.\n+    // on LLVM 16 and older, but other panics are not.\n     // CHECK: cleanup\n-    // CHECK-NEXT: ; call core::panicking::panic_cannot_unwind\n-    // CHECK-NEXT: panic_cannot_unwind\n+    // old-NEXT: ; call core::panicking::panic_cannot_unwind\n+    // old-NEXT: panic_cannot_unwind\n \n     // CHECK-NOT: panic\n     iter.iter().copied().collect()\n }\n \n-// CHECK: ; core::panicking::panic_cannot_unwind\n-// CHECK: declare void @{{.*}}panic_cannot_unwind\n+// old: ; core::panicking::panic_cannot_unwind\n+// old: declare void @{{.*}}panic_cannot_unwind"}, {"sha": "701d6b1ab71312feac4e39be94f66c80d03d4cb3", "filename": "tests/mir-opt/building/custom/composite_return.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8859fde21fa4e059c71a843cc7ee995c189a97c0/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fcomposite_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8859fde21fa4e059c71a843cc7ee995c189a97c0/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fcomposite_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fcomposite_return.rs?ref=8859fde21fa4e059c71a843cc7ee995c189a97c0", "patch": "@@ -0,0 +1,21 @@\n+#![feature(custom_mir, core_intrinsics)]\n+\n+extern crate core;\n+use core::intrinsics::mir::*;\n+\n+// EMIT_MIR composite_return.tuple.built.after.mir\n+#[custom_mir(dialect = \"runtime\", phase = \"optimized\")]\n+fn tuple() -> (i32, bool) {\n+    mir!(\n+        type RET = (i32, bool);\n+        {\n+            RET.0 = 1;\n+            RET.1 = true;\n+            Return()\n+        }\n+    )\n+}\n+\n+fn main() {\n+    assert_eq!(tuple(), (1, true));\n+}"}, {"sha": "d159c1a655eb574e712cc7dc61f98a517d52de9f", "filename": "tests/mir-opt/building/custom/composite_return.tuple.built.after.mir", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8859fde21fa4e059c71a843cc7ee995c189a97c0/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fcomposite_return.tuple.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/8859fde21fa4e059c71a843cc7ee995c189a97c0/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fcomposite_return.tuple.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fcomposite_return.tuple.built.after.mir?ref=8859fde21fa4e059c71a843cc7ee995c189a97c0", "patch": "@@ -0,0 +1,11 @@\n+// MIR for `tuple` after built\n+\n+fn tuple() -> (i32, bool) {\n+    let mut _0: (i32, bool);             // return place in scope 0 at $DIR/composite_return.rs:+0:15: +0:26\n+\n+    bb0: {\n+        (_0.0: i32) = const 1_i32;       // scope 0 at $DIR/composite_return.rs:+4:13: +4:22\n+        (_0.1: bool) = const true;       // scope 0 at $DIR/composite_return.rs:+5:13: +5:25\n+        return;                          // scope 0 at $DIR/composite_return.rs:+6:13: +6:21\n+    }\n+}"}, {"sha": "0ebb96d787046ffdc53864694ddd7a9c09d39eb9", "filename": "tests/rustdoc-gui/setting-auto-hide-content-large-items.goml", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/8859fde21fa4e059c71a843cc7ee995c189a97c0/tests%2Frustdoc-gui%2Fsetting-auto-hide-content-large-items.goml", "raw_url": "https://github.com/rust-lang/rust/raw/8859fde21fa4e059c71a843cc7ee995c189a97c0/tests%2Frustdoc-gui%2Fsetting-auto-hide-content-large-items.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-gui%2Fsetting-auto-hide-content-large-items.goml?ref=8859fde21fa4e059c71a843cc7ee995c189a97c0", "patch": "@@ -0,0 +1,51 @@\n+// This test ensures that the \"Auto-hide item contents for large items\" setting is working as\n+// expected.\n+\n+// We need to disable this check because `implementors/test_docs/trait.Iterator.js` doesn't exist.\n+fail-on-request-error: false\n+\n+define-function: (\n+    \"check-setting\",\n+    (storage_value, setting_attribute_value, toggle_attribute_value),\n+    block {\n+        assert-local-storage: {\"rustdoc-auto-hide-large-items\": |storage_value|}\n+        click: \"#settings-menu\"\n+        wait-for: \"#settings\"\n+        assert-property: (\"#auto-hide-large-items\", {\"checked\": |setting_attribute_value|})\n+        assert-attribute: (\".item-decl .type-contents-toggle\", {\"open\": |toggle_attribute_value|})\n+    }\n+)\n+\n+goto: \"file://\" + |DOC_PATH| + \"/lib2/scroll_traits/trait.Iterator.html\"\n+\n+// We check that the setting is enabled by default and is working.\n+call-function: (\"check-setting\", {\n+    \"storage_value\": null,\n+    \"setting_attribute_value\": \"true\",\n+    \"toggle_attribute_value\": null,\n+})\n+\n+// Now we change its value.\n+click: \"#auto-hide-large-items\"\n+assert-local-storage: {\"rustdoc-auto-hide-large-items\": \"false\"}\n+\n+// We check that the changes were applied as expected.\n+reload:\n+\n+call-function: (\"check-setting\", {\n+    \"storage_value\": \"false\",\n+    \"setting_attribute_value\": \"false\",\n+    \"toggle_attribute_value\": \"\",\n+})\n+\n+// And now we re-enable the setting.\n+click: \"#auto-hide-large-items\"\n+assert-local-storage: {\"rustdoc-auto-hide-large-items\": \"true\"}\n+\n+// And we check everything is back the way it was before.\n+reload:\n+call-function: (\"check-setting\", {\n+    \"storage_value\": \"true\",\n+    \"setting_attribute_value\": \"true\",\n+    \"toggle_attribute_value\": null,\n+})"}, {"sha": "3d010f18009d1102f05d084561f093132e17ae8d", "filename": "tests/ui/async-await/in-trait/issue-104678.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8859fde21fa4e059c71a843cc7ee995c189a97c0/tests%2Fui%2Fasync-await%2Fin-trait%2Fissue-104678.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8859fde21fa4e059c71a843cc7ee995c189a97c0/tests%2Fui%2Fasync-await%2Fin-trait%2Fissue-104678.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fissue-104678.rs?ref=8859fde21fa4e059c71a843cc7ee995c189a97c0", "patch": "@@ -1,5 +1,7 @@\n // edition:2021\n // check-pass\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![feature(async_fn_in_trait)]\n #![allow(incomplete_features)]"}]}