{"sha": "3bdbfbe8b9c78bcec9019e7452a2a9396ecc861e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiZGJmYmU4YjljNzhiY2VjOTAxOWU3NDUyYTJhOTM5NmVjYzg2MWU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-10-01T10:40:56Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-10-07T03:59:56Z"}, "message": "syntax: de-dups in item parsing.", "tree": {"sha": "5822a6fbadcc2d183fb1d94f5fb7f3c8f721f456", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5822a6fbadcc2d183fb1d94f5fb7f3c8f721f456"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3bdbfbe8b9c78bcec9019e7452a2a9396ecc861e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3bdbfbe8b9c78bcec9019e7452a2a9396ecc861e", "html_url": "https://github.com/rust-lang/rust/commit/3bdbfbe8b9c78bcec9019e7452a2a9396ecc861e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3bdbfbe8b9c78bcec9019e7452a2a9396ecc861e/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0fe4be4657493fb1cd292911df0d9470d8c38e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0fe4be4657493fb1cd292911df0d9470d8c38e3", "html_url": "https://github.com/rust-lang/rust/commit/e0fe4be4657493fb1cd292911df0d9470d8c38e3"}], "stats": {"total": 94, "additions": 44, "deletions": 50}, "files": [{"sha": "95137f93b881008d684251a2436186f9b9707283", "filename": "src/libsyntax/parse/parser/item.rs", "status": "modified", "additions": 44, "deletions": 50, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/3bdbfbe8b9c78bcec9019e7452a2a9396ecc861e/src%2Flibsyntax%2Fparse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bdbfbe8b9c78bcec9019e7452a2a9396ecc861e/src%2Flibsyntax%2Fparse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fitem.rs?ref=3bdbfbe8b9c78bcec9019e7452a2a9396ecc861e", "patch": "@@ -98,23 +98,22 @@ impl<'a> Parser<'a> {\n \n         let lo = self.token.span;\n \n-        let visibility = self.parse_visibility(false)?;\n+        let vis = self.parse_visibility(false)?;\n \n         if self.eat_keyword(kw::Use) {\n             // USE ITEM\n             let item_ = ItemKind::Use(P(self.parse_use_tree()?));\n             self.expect(&token::Semi)?;\n \n             let span = lo.to(self.prev_span);\n-            let item =\n-                self.mk_item(span, Ident::invalid(), item_, visibility, attrs);\n+            let item = self.mk_item(span, Ident::invalid(), item_, vis, attrs);\n             return Ok(Some(item));\n         }\n \n         if self.eat_keyword(kw::Extern) {\n             let extern_sp = self.prev_span;\n             if self.eat_keyword(kw::Crate) {\n-                return Ok(Some(self.parse_item_extern_crate(lo, visibility, attrs)?));\n+                return Ok(Some(self.parse_item_extern_crate(lo, vis, attrs)?));\n             }\n \n             let opt_abi = self.parse_opt_abi()?;\n@@ -128,10 +127,10 @@ impl<'a> Parser<'a> {\n                     constness: respan(fn_span, Constness::NotConst),\n                     abi: opt_abi.unwrap_or(Abi::C),\n                 };\n-                return self.parse_item_fn(lo, visibility, attrs, header);\n+                return self.parse_item_fn(lo, vis, attrs, header);\n             } else if self.check(&token::OpenDelim(token::Brace)) {\n                 return Ok(Some(\n-                    self.parse_item_foreign_mod(lo, opt_abi, visibility, attrs, extern_sp)?,\n+                    self.parse_item_foreign_mod(lo, opt_abi, vis, attrs, extern_sp)?,\n                 ));\n             }\n \n@@ -142,10 +141,8 @@ impl<'a> Parser<'a> {\n             self.bump();\n             // STATIC ITEM\n             let m = self.parse_mutability();\n-            let (ident, item_, extra_attrs) = self.parse_item_const(Some(m))?;\n-            let span = lo.to(self.prev_span);\n-            let attrs = maybe_append(attrs, extra_attrs);\n-            return Ok(Some(self.mk_item(span, ident, item_, visibility, attrs)));\n+            let info = self.parse_item_const(Some(m));\n+            return self.mk_item_with_info(attrs, lo, vis, info);\n         }\n         if self.eat_keyword(kw::Const) {\n             let const_span = self.prev_span;\n@@ -168,7 +165,7 @@ impl<'a> Parser<'a> {\n                     constness: respan(const_span, Constness::Const),\n                     abi,\n                 };\n-                return self.parse_item_fn(lo, visibility, attrs, header);\n+                return self.parse_item_fn(lo, vis, attrs, header);\n             }\n \n             // CONST ITEM\n@@ -184,10 +181,8 @@ impl<'a> Parser<'a> {\n                     )\n                     .emit();\n             }\n-            let (ident, item_, extra_attrs) = self.parse_item_const(None)?;\n-            let span = lo.to(self.prev_span);\n-            let attrs = maybe_append(attrs, extra_attrs);\n-            return Ok(Some(self.mk_item(span, ident, item_, visibility, attrs)));\n+            let info = self.parse_item_const(None);\n+            return self.mk_item_with_info(attrs, lo, vis, info);\n         }\n \n         // Parses `async unsafe? fn`.\n@@ -212,7 +207,7 @@ impl<'a> Parser<'a> {\n                     constness: respan(fn_span, Constness::NotConst),\n                     abi: Abi::Rust,\n                 };\n-                return self.parse_item_fn(lo, visibility, attrs, header);\n+                return self.parse_item_fn(lo, vis, attrs, header);\n             }\n         }\n         if self.check_keyword(kw::Unsafe) &&\n@@ -227,10 +222,8 @@ impl<'a> Parser<'a> {\n                 self.expect_keyword(kw::Trait)?;\n                 IsAuto::Yes\n             };\n-            let (ident, item_, extra_attrs) = self.parse_item_trait(is_auto, Unsafety::Unsafe)?;\n-            let span = lo.to(self.prev_span);\n-            let attrs = maybe_append(attrs, extra_attrs);\n-            return Ok(Some(self.mk_item(span, ident, item_, visibility, attrs)));\n+            let info = self.parse_item_trait(is_auto, Unsafety::Unsafe);\n+            return self.mk_item_with_info(attrs, lo, vis, info);\n         }\n         if self.check_keyword(kw::Impl) ||\n            self.check_keyword(kw::Unsafe) &&\n@@ -241,10 +234,8 @@ impl<'a> Parser<'a> {\n             let defaultness = self.parse_defaultness();\n             let unsafety = self.parse_unsafety();\n             self.expect_keyword(kw::Impl)?;\n-            let (ident, item_, extra_attrs) = self.parse_item_impl(unsafety, defaultness)?;\n-            let span = lo.to(self.prev_span);\n-            let attrs = maybe_append(attrs, extra_attrs);\n-            return Ok(Some(self.mk_item(span, ident, item_, visibility, attrs)));\n+            let info = self.parse_item_impl(unsafety, defaultness);\n+            return self.mk_item_with_info(attrs, lo, vis, info);\n         }\n         if self.check_keyword(kw::Fn) {\n             // FUNCTION ITEM\n@@ -256,7 +247,7 @@ impl<'a> Parser<'a> {\n                 constness: respan(fn_span, Constness::NotConst),\n                 abi: Abi::Rust,\n             };\n-            return self.parse_item_fn(lo, visibility, attrs, header);\n+            return self.parse_item_fn(lo, vis, attrs, header);\n         }\n         if self.check_keyword(kw::Unsafe)\n             && self.look_ahead(1, |t| *t != token::OpenDelim(token::Brace)) {\n@@ -273,14 +264,12 @@ impl<'a> Parser<'a> {\n                 constness: respan(fn_span, Constness::NotConst),\n                 abi,\n             };\n-            return self.parse_item_fn(lo, visibility, attrs, header);\n+            return self.parse_item_fn(lo, vis, attrs, header);\n         }\n         if self.eat_keyword(kw::Mod) {\n             // MODULE ITEM\n-            let (ident, item_, extra_attrs) = self.parse_item_mod(&attrs[..])?;\n-            let span = lo.to(self.prev_span);\n-            let attrs = maybe_append(attrs, extra_attrs);\n-            return Ok(Some(self.mk_item(span, ident, item_, visibility, attrs)));\n+            let info = self.parse_item_mod(&attrs[..]);\n+            return self.mk_item_with_info(attrs, lo, vis, info);\n         }\n         if let Some(type_) = self.eat_type() {\n             let (ident, alias, generics) = type_?;\n@@ -290,14 +279,12 @@ impl<'a> Parser<'a> {\n                 AliasKind::OpaqueTy(bounds) => ItemKind::OpaqueTy(bounds, generics),\n             };\n             let span = lo.to(self.prev_span);\n-            return Ok(Some(self.mk_item(span, ident, item_, visibility, attrs)));\n+            return Ok(Some(self.mk_item(span, ident, item_, vis, attrs)));\n         }\n         if self.eat_keyword(kw::Enum) {\n             // ENUM ITEM\n-            let (ident, item_, extra_attrs) = self.parse_item_enum()?;\n-            let span = lo.to(self.prev_span);\n-            let attrs = maybe_append(attrs, extra_attrs);\n-            return Ok(Some(self.mk_item(span, ident, item_, visibility, attrs)));\n+            let info = self.parse_item_enum();\n+            return self.mk_item_with_info(attrs, lo, vis, info);\n         }\n         if self.check_keyword(kw::Trait)\n             || (self.check_keyword(kw::Auto)\n@@ -311,33 +298,27 @@ impl<'a> Parser<'a> {\n                 IsAuto::Yes\n             };\n             // TRAIT ITEM\n-            let (ident, item_, extra_attrs) = self.parse_item_trait(is_auto, Unsafety::Normal)?;\n-            let span = lo.to(self.prev_span);\n-            let attrs = maybe_append(attrs, extra_attrs);\n-            return Ok(Some(self.mk_item(span, ident, item_, visibility, attrs)));\n+            let info = self.parse_item_trait(is_auto, Unsafety::Normal);\n+            return self.mk_item_with_info(attrs, lo, vis, info);\n         }\n         if self.eat_keyword(kw::Struct) {\n             // STRUCT ITEM\n-            let (ident, item_, extra_attrs) = self.parse_item_struct()?;\n-            let span = lo.to(self.prev_span);\n-            let attrs = maybe_append(attrs, extra_attrs);\n-            return Ok(Some(self.mk_item(span, ident, item_, visibility, attrs)));\n+            let info = self.parse_item_struct();\n+            return self.mk_item_with_info(attrs, lo, vis, info);\n         }\n         if self.is_union_item() {\n             // UNION ITEM\n             self.bump();\n-            let (ident, item_, extra_attrs) = self.parse_item_union()?;\n-            let span = lo.to(self.prev_span);\n-            let attrs = maybe_append(attrs, extra_attrs);\n-            return Ok(Some(self.mk_item(span, ident, item_, visibility, attrs)));\n+            let info = self.parse_item_union();\n+            return self.mk_item_with_info(attrs, lo, vis, info);\n         }\n-        if let Some(macro_def) = self.eat_macro_def(&attrs, &visibility, lo)? {\n+        if let Some(macro_def) = self.eat_macro_def(&attrs, &vis, lo)? {\n             return Ok(Some(macro_def));\n         }\n \n         // Verify whether we have encountered a struct or method definition where the user forgot to\n         // add the `struct` or `fn` keyword after writing `pub`: `pub S {}`\n-        if visibility.node.is_pub() &&\n+        if vis.node.is_pub() &&\n             self.check_ident() &&\n             self.look_ahead(1, |t| *t != token::Not)\n         {\n@@ -428,7 +409,20 @@ impl<'a> Parser<'a> {\n                 return Err(err);\n             }\n         }\n-        self.parse_macro_use_or_failure(attrs, macros_allowed, attributes_allowed, lo, visibility)\n+        self.parse_macro_use_or_failure(attrs, macros_allowed, attributes_allowed, lo, vis)\n+    }\n+\n+    fn mk_item_with_info(\n+        &self,\n+        attrs: Vec<Attribute>,\n+        lo: Span,\n+        vis: Visibility,\n+        info: PResult<'a, ItemInfo>,\n+    ) -> PResult<'a, Option<P<Item>>> {\n+        let (ident, item, extra_attrs) = info?;\n+        let span = lo.to(self.prev_span);\n+        let attrs = maybe_append(attrs, extra_attrs);\n+        Ok(Some(self.mk_item(span, ident, item, vis, attrs)))\n     }\n \n     fn recover_first_param(&mut self) -> &'static str {"}]}