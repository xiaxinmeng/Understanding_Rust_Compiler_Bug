{"sha": "c46164b626925083519bfd48733fad48cc1ddec5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0NjE2NGI2MjY5MjUwODM1MTliZmQ0ODczM2ZhZDQ4Y2MxZGRlYzU=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-04-26T04:20:50Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-04-26T09:01:24Z"}, "message": "Refactor away field `vis` of `ModuleS`", "tree": {"sha": "d3a4f4921e91f6d993bd6afe525657db00404856", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3a4f4921e91f6d993bd6afe525657db00404856"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c46164b626925083519bfd48733fad48cc1ddec5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c46164b626925083519bfd48733fad48cc1ddec5", "html_url": "https://github.com/rust-lang/rust/commit/c46164b626925083519bfd48733fad48cc1ddec5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c46164b626925083519bfd48733fad48cc1ddec5/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19304837c86cc406ee042c99e12fa34debae4e8a", "url": "https://api.github.com/repos/rust-lang/rust/commits/19304837c86cc406ee042c99e12fa34debae4e8a", "html_url": "https://github.com/rust-lang/rust/commit/19304837c86cc406ee042c99e12fa34debae4e8a"}], "stats": {"total": 72, "additions": 27, "deletions": 45}, "files": [{"sha": "6dfd3e00be86463aae79a6199a53ad318a348360", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 20, "deletions": 19, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/c46164b626925083519bfd48733fad48cc1ddec5/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c46164b626925083519bfd48733fad48cc1ddec5/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=c46164b626925083519bfd48733fad48cc1ddec5", "patch": "@@ -46,9 +46,9 @@ trait ToNameBinding<'a> {\n     fn to_name_binding(self) -> NameBinding<'a>;\n }\n \n-impl<'a> ToNameBinding<'a> for (Module<'a>, Span) {\n+impl<'a> ToNameBinding<'a> for (Module<'a>, Span, ty::Visibility) {\n     fn to_name_binding(self) -> NameBinding<'a> {\n-        NameBinding::create_from_module(self.0, Some(self.1))\n+        NameBinding { kind: NameBindingKind::Module(self.0), span: Some(self.1), vis: self.2 }\n     }\n }\n \n@@ -247,8 +247,8 @@ impl<'b, 'tcx:'b> Resolver<'b, 'tcx> {\n                     };\n                     let parent_link = ModuleParentLink(parent, name);\n                     let def = Def::Mod(def_id);\n-                    let module = self.new_extern_crate_module(parent_link, def, vis, item.id);\n-                    self.define(parent, name, TypeNS, (module, sp));\n+                    let module = self.new_extern_crate_module(parent_link, def, item.id);\n+                    self.define(parent, name, TypeNS, (module, sp, vis));\n \n                     self.build_reduced_graph_for_external_crate(module);\n                 }\n@@ -257,8 +257,8 @@ impl<'b, 'tcx:'b> Resolver<'b, 'tcx> {\n             ItemMod(..) => {\n                 let parent_link = ModuleParentLink(parent, name);\n                 let def = Def::Mod(self.ast_map.local_def_id(item.id));\n-                let module = self.new_module(parent_link, Some(def), false, vis);\n-                self.define(parent, name, TypeNS, (module, sp));\n+                let module = self.new_module(parent_link, Some(def), false);\n+                self.define(parent, name, TypeNS, (module, sp, vis));\n                 self.module_map.insert(item.id, module);\n                 *parent_ref = module;\n             }\n@@ -289,12 +289,12 @@ impl<'b, 'tcx:'b> Resolver<'b, 'tcx> {\n             ItemEnum(ref enum_definition, _) => {\n                 let parent_link = ModuleParentLink(parent, name);\n                 let def = Def::Enum(self.ast_map.local_def_id(item.id));\n-                let module = self.new_module(parent_link, Some(def), false, vis);\n-                self.define(parent, name, TypeNS, (module, sp));\n+                let module = self.new_module(parent_link, Some(def), false);\n+                self.define(parent, name, TypeNS, (module, sp, vis));\n \n                 for variant in &(*enum_definition).variants {\n                     let item_def_id = self.ast_map.local_def_id(item.id);\n-                    self.build_reduced_graph_for_variant(variant, item_def_id, module);\n+                    self.build_reduced_graph_for_variant(variant, item_def_id, module, vis);\n                 }\n             }\n \n@@ -328,8 +328,8 @@ impl<'b, 'tcx:'b> Resolver<'b, 'tcx> {\n                 // Add all the items within to a new module.\n                 let parent_link = ModuleParentLink(parent, name);\n                 let def = Def::Trait(def_id);\n-                let module_parent = self.new_module(parent_link, Some(def), false, vis);\n-                self.define(parent, name, TypeNS, (module_parent, sp));\n+                let module_parent = self.new_module(parent_link, Some(def), false);\n+                self.define(parent, name, TypeNS, (module_parent, sp, vis));\n \n                 // Add the names of all the items to the trait info.\n                 for item in items {\n@@ -353,7 +353,8 @@ impl<'b, 'tcx:'b> Resolver<'b, 'tcx> {\n     fn build_reduced_graph_for_variant(&mut self,\n                                        variant: &Variant,\n                                        item_id: DefId,\n-                                       parent: Module<'b>) {\n+                                       parent: Module<'b>,\n+                                       vis: ty::Visibility) {\n         let name = variant.node.name;\n         if variant.node.data.is_struct() {\n             // Not adding fields for variants as they are not accessed with a self receiver\n@@ -364,8 +365,8 @@ impl<'b, 'tcx:'b> Resolver<'b, 'tcx> {\n         // Variants are always treated as importable to allow them to be glob used.\n         // All variants are defined in both type and value namespaces as future-proofing.\n         let def = Def::Variant(item_id, self.ast_map.local_def_id(variant.node.data.id()));\n-        self.define(parent, name, ValueNS, (def, variant.span, parent.vis));\n-        self.define(parent, name, TypeNS, (def, variant.span, parent.vis));\n+        self.define(parent, name, ValueNS, (def, variant.span, vis));\n+        self.define(parent, name, TypeNS, (def, variant.span, vis));\n     }\n \n     /// Constructs the reduced graph for one foreign item.\n@@ -396,7 +397,7 @@ impl<'b, 'tcx:'b> Resolver<'b, 'tcx> {\n                    block_id);\n \n             let parent_link = BlockParentLink(parent, block_id);\n-            let new_module = self.new_module(parent_link, None, false, parent.vis);\n+            let new_module = self.new_module(parent_link, None, false);\n             self.module_map.insert(block_id, new_module);\n             *parent = new_module;\n         }\n@@ -425,8 +426,8 @@ impl<'b, 'tcx:'b> Resolver<'b, 'tcx> {\n                 debug!(\"(building reduced graph for external crate) building module {} {:?}\",\n                        name, vis);\n                 let parent_link = ModuleParentLink(parent, name);\n-                let module = self.new_module(parent_link, Some(def), true, vis);\n-                self.try_define(parent, name, TypeNS, (module, DUMMY_SP));\n+                let module = self.new_module(parent_link, Some(def), true);\n+                self.try_define(parent, name, TypeNS, (module, DUMMY_SP, vis));\n             }\n             Def::Variant(_, variant_id) => {\n                 debug!(\"(building reduced graph for external crate) building variant {}\", name);\n@@ -467,8 +468,8 @@ impl<'b, 'tcx:'b> Resolver<'b, 'tcx> {\n                 }\n \n                 let parent_link = ModuleParentLink(parent, name);\n-                let module = self.new_module(parent_link, Some(def), true, vis);\n-                self.try_define(parent, name, TypeNS, (module, DUMMY_SP));\n+                let module = self.new_module(parent_link, Some(def), true);\n+                self.try_define(parent, name, TypeNS, (module, DUMMY_SP, vis));\n             }\n             Def::TyAlias(..) | Def::AssociatedTy(..) => {\n                 debug!(\"(building reduced graph for external crate) building type {}\", name);"}, {"sha": "16954f6bc97b4226c83c4b71716496e5f31774e0", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 7, "deletions": 26, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/c46164b626925083519bfd48733fad48cc1ddec5/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c46164b626925083519bfd48733fad48cc1ddec5/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=c46164b626925083519bfd48733fad48cc1ddec5", "patch": "@@ -818,7 +818,6 @@ enum ParentLink<'a> {\n pub struct ModuleS<'a> {\n     parent_link: ParentLink<'a>,\n     def: Option<Def>,\n-    vis: ty::Visibility,\n \n     // If the module is an extern crate, `def` is root of the external crate and `extern_crate_id`\n     // is the NodeId of the local `extern crate` item (otherwise, `extern_crate_id` is None).\n@@ -849,12 +848,10 @@ impl<'a> ModuleS<'a> {\n     fn new(parent_link: ParentLink<'a>,\n            def: Option<Def>,\n            external: bool,\n-           vis: ty::Visibility,\n            arenas: &'a ResolverArenas<'a>) -> Self {\n         ModuleS {\n             parent_link: parent_link,\n             def: def,\n-            vis: vis,\n             extern_crate_id: None,\n             resolutions: RefCell::new(HashMap::new()),\n             unresolved_imports: RefCell::new(Vec::new()),\n@@ -895,7 +892,7 @@ impl<'a> ModuleS<'a> {\n \n impl<'a> fmt::Debug for ModuleS<'a> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        write!(f, \"{:?}, {:?}\", self.def, self.vis)\n+        write!(f, \"{:?}\", self.def)\n     }\n }\n \n@@ -923,14 +920,6 @@ enum NameBindingKind<'a> {\n struct PrivacyError<'a>(Span, Name, &'a NameBinding<'a>);\n \n impl<'a> NameBinding<'a> {\n-    fn create_from_module(module: Module<'a>, span: Option<Span>) -> Self {\n-        NameBinding {\n-            kind: NameBindingKind::Module(module),\n-            span: span,\n-            vis: module.vis,\n-        }\n-    }\n-\n     fn module(&self) -> Option<Module<'a>> {\n         match self.kind {\n             NameBindingKind::Module(module) => Some(module),\n@@ -1148,9 +1137,8 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n            arenas: &'a ResolverArenas<'a>)\n            -> Resolver<'a, 'tcx> {\n         let root_def_id = ast_map.local_def_id(CRATE_NODE_ID);\n-        let vis = ty::Visibility::Public;\n         let graph_root =\n-            ModuleS::new(NoParentLink, Some(Def::Mod(root_def_id)), false, vis, arenas);\n+            ModuleS::new(NoParentLink, Some(Def::Mod(root_def_id)), false, arenas);\n         let graph_root = arenas.alloc_module(graph_root);\n \n         Resolver {\n@@ -1208,21 +1196,14 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n         }\n     }\n \n-    fn new_module(&self,\n-                  parent_link: ParentLink<'a>,\n-                  def: Option<Def>,\n-                  external: bool,\n-                  vis: ty::Visibility) -> Module<'a> {\n-        self.arenas.alloc_module(ModuleS::new(parent_link, def, external, vis, self.arenas))\n+    fn new_module(&self, parent_link: ParentLink<'a>, def: Option<Def>, external: bool)\n+                  -> Module<'a> {\n+        self.arenas.alloc_module(ModuleS::new(parent_link, def, external, self.arenas))\n     }\n \n-    fn new_extern_crate_module(&self,\n-                               parent_link: ParentLink<'a>,\n-                               def: Def,\n-                               vis: ty::Visibility,\n-                               local_node_id: NodeId)\n+    fn new_extern_crate_module(&self, parent_link: ParentLink<'a>, def: Def, local_node_id: NodeId)\n                                -> Module<'a> {\n-        let mut module = ModuleS::new(parent_link, Some(def), false, vis, self.arenas);\n+        let mut module = ModuleS::new(parent_link, Some(def), false, self.arenas);\n         module.extern_crate_id = Some(local_node_id);\n         self.arenas.modules.alloc(module)\n     }"}]}