{"sha": "20728fb0d0d163ee7a390aa8c99b66089bb82d21", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwNzI4ZmIwZDBkMTYzZWU3YTM5MGFhOGM5OWI2NjA4OWJiODJkMjE=", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2017-05-31T01:44:01Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2017-05-31T03:46:02Z"}, "message": "fix never_loop", "tree": {"sha": "00727a3f3a1a51245dfea8e699920c43ec0aeb31", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00727a3f3a1a51245dfea8e699920c43ec0aeb31"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/20728fb0d0d163ee7a390aa8c99b66089bb82d21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/20728fb0d0d163ee7a390aa8c99b66089bb82d21", "html_url": "https://github.com/rust-lang/rust/commit/20728fb0d0d163ee7a390aa8c99b66089bb82d21", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/20728fb0d0d163ee7a390aa8c99b66089bb82d21/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "892cc2833c63a4c3ed2df82c99d200f6fb9f11c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/892cc2833c63a4c3ed2df82c99d200f6fb9f11c2", "html_url": "https://github.com/rust-lang/rust/commit/892cc2833c63a4c3ed2df82c99d200f6fb9f11c2"}], "stats": {"total": 189, "additions": 125, "deletions": 64}, "files": [{"sha": "b650c64eb218b76c48ef82f4a233ad874b07ddb7", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20728fb0d0d163ee7a390aa8c99b66089bb82d21/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/20728fb0d0d163ee7a390aa8c99b66089bb82d21/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=20728fb0d0d163ee7a390aa8c99b66089bb82d21", "patch": "@@ -295,7 +295,7 @@ name\n [needless_return](https://github.com/Manishearth/rust-clippy/wiki#needless_return)                                     | warn    | using a return statement like `return expr;` where an expression would suffice\n [needless_update](https://github.com/Manishearth/rust-clippy/wiki#needless_update)                                     | warn    | using `Foo { ..base }` when there are no missing fields\n [neg_multiply](https://github.com/Manishearth/rust-clippy/wiki#neg_multiply)                                           | warn    | multiplying integers with -1\n-[never_loop](https://github.com/Manishearth/rust-clippy/wiki#never_loop)                                               | allow   | any loop with an unconditional `break` or `return` statement\n+[never_loop](https://github.com/Manishearth/rust-clippy/wiki#never_loop)                                               | warn    | any loop that will always `break` or `return`\n [new_ret_no_self](https://github.com/Manishearth/rust-clippy/wiki#new_ret_no_self)                                     | warn    | not returning `Self` in a `new` method\n [new_without_default](https://github.com/Manishearth/rust-clippy/wiki#new_without_default)                             | warn    | `fn new() -> Self` method without `Default` implementation\n [new_without_default_derive](https://github.com/Manishearth/rust-clippy/wiki#new_without_default_derive)               | warn    | `fn new() -> Self` without `#[derive]`able `Default` implementation"}, {"sha": "fb0114f8f683ae0e1fffac08763de6fac8921c7d", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20728fb0d0d163ee7a390aa8c99b66089bb82d21/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20728fb0d0d163ee7a390aa8c99b66089bb82d21/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=20728fb0d0d163ee7a390aa8c99b66089bb82d21", "patch": "@@ -324,7 +324,6 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         enum_variants::STUTTER,\n         if_not_else::IF_NOT_ELSE,\n         items_after_statements::ITEMS_AFTER_STATEMENTS,\n-        loops::NEVER_LOOP,\n         matches::SINGLE_MATCH_ELSE,\n         mem_forget::MEM_FORGET,\n         methods::FILTER_MAP,\n@@ -420,6 +419,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         loops::FOR_LOOP_OVER_RESULT,\n         loops::ITER_NEXT_LOOP,\n         loops::NEEDLESS_RANGE_LOOP,\n+        loops::NEVER_LOOP,\n         loops::REVERSE_RANGE_LOOP,\n         loops::UNUSED_COLLECT,\n         loops::WHILE_LET_LOOP,"}, {"sha": "c4a792031758b6dd919b6050083419ec9509f69f", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 79, "deletions": 28, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/20728fb0d0d163ee7a390aa8c99b66089bb82d21/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20728fb0d0d163ee7a390aa8c99b66089bb82d21/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=20728fb0d0d163ee7a390aa8c99b66089bb82d21", "patch": "@@ -285,24 +285,22 @@ declare_lint! {\n     \"looping on a map using `iter` when `keys` or `values` would do\"\n }\n \n-/// **What it does:** Checks for loops that contain an unconditional `break`\n-/// or `return`.\n+/// **What it does:** Checks for loops that will always `break`, `return` or\n+/// `continue` an outer loop.\n ///\n /// **Why is this bad?** This loop never loops, all it does is obfuscating the\n /// code.\n ///\n-/// **Known problems:** Ignores `continue` statements in the loop that create\n-/// nontrivial control flow. Therefore set to `Allow` by default.\n-/// See https://github.com/Manishearth/rust-clippy/issues/1586\n+/// **Known problems:** None\n ///\n /// **Example:**\n /// ```rust\n /// loop { ..; break; }\n /// ```\n declare_lint! {\n     pub NEVER_LOOP,\n-    Allow,\n-    \"any loop with an unconditional `break` or `return` statement\"\n+    Warn,\n+    \"any loop that will always `break` or `return`\"\n }\n \n #[derive(Copy, Clone)]\n@@ -344,7 +342,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                           \"empty `loop {}` detected. You may want to either use `panic!()` or add \\\n                            `std::thread::sleep(..);` to the loop body.\");\n             }\n-            if never_loop_block(block) {\n+            if never_loop(block, &expr.id) {\n                 span_lint(cx, NEVER_LOOP, expr.span, \"this loop never actually loops\");\n             }\n \n@@ -424,47 +422,100 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n     }\n }\n \n-fn never_loop_block(block: &Block) -> bool {\n-    block.stmts.iter().any(never_loop_stmt) || block.expr.as_ref().map_or(false, |e| never_loop_expr(e))\n+fn never_loop(block: &Block, id: &NodeId) -> bool {\n+    !contains_continue_block(block, id) && loop_exit_block(block)\n+}\n+\n+fn contains_continue_block(block: &Block, dest: &NodeId) -> bool {\n+    block.stmts.iter().any(|e| contains_continue_stmt(e, dest))\n+        || block.expr.as_ref().map_or(false, |e| contains_continue_expr(e, dest))\n }\n \n-fn never_loop_stmt(stmt: &Stmt) -> bool {\n+fn contains_continue_stmt(stmt: &Stmt, dest: &NodeId) -> bool {\n     match stmt.node {\n         StmtSemi(ref e, _) |\n-        StmtExpr(ref e, _) => never_loop_expr(e),\n-        StmtDecl(ref d, _) => never_loop_decl(d),\n+        StmtExpr(ref e, _) => contains_continue_expr(e, dest),\n+        StmtDecl(ref d, _) => contains_continue_decl(d, dest),\n     }\n }\n \n-fn never_loop_decl(decl: &Decl) -> bool {\n-    if let DeclLocal(ref local) = decl.node {\n-        local.init.as_ref().map_or(false, |e| never_loop_expr(e))\n-    } else {\n-        false\n+fn contains_continue_decl(decl: &Decl, dest: &NodeId) -> bool {\n+    match decl.node {\n+        DeclLocal(ref local) => local.init.as_ref().map_or(false, |e| contains_continue_expr(e, dest)),\n+        _ => false\n     }\n }\n \n-fn never_loop_expr(expr: &Expr) -> bool {\n+fn contains_continue_expr(expr: &Expr, dest: &NodeId) -> bool {\n     match expr.node {\n-        ExprBreak(..) | ExprRet(..) => true,\n         ExprBox(ref e) |\n         ExprUnary(_, ref e) |\n-        ExprBinary(_, ref e, _) | // because short-circuiting\n         ExprCast(ref e, _) |\n         ExprType(ref e, _) |\n         ExprField(ref e, _) |\n         ExprTupField(ref e, _) |\n-        ExprRepeat(ref e, _) |\n-        ExprAddrOf(_, ref e) => never_loop_expr(e),\n+        ExprAddrOf(_, ref e) |\n+        ExprRepeat(ref e, _) => contains_continue_expr(e, dest),\n+        ExprBinary(_, ref e1, ref e2) |\n         ExprAssign(ref e1, ref e2) |\n         ExprAssignOp(_, ref e1, ref e2) |\n-        ExprIndex(ref e1, ref e2) => never_loop_expr(e1) || never_loop_expr(e2),\n+        ExprIndex(ref e1, ref e2) => [e1, e2].iter().any(|e| contains_continue_expr(e, dest)),\n         ExprArray(ref es) |\n         ExprTup(ref es) |\n-        ExprMethodCall(_, _, ref es) => es.iter().any(|e| never_loop_expr(e)),\n-        ExprCall(ref e, ref es) => never_loop_expr(e) || es.iter().any(|e| never_loop_expr(e)),\n-        ExprBlock(ref block) => never_loop_block(block),\n-        ExprStruct(_, _, ref base) => base.as_ref().map_or(false, |e| never_loop_expr(e)),\n+        ExprMethodCall(_, _, ref es) => es.iter().any(|e| contains_continue_expr(e, dest)),\n+        ExprCall(ref e, ref es) => contains_continue_expr(e, dest) || es.iter().any(|e| contains_continue_expr(e, dest)),\n+        ExprBlock(ref block) => contains_continue_block(block, dest),\n+        ExprStruct(_, _, ref base) => base.as_ref().map_or(false, |e| contains_continue_expr(e, dest)),\n+        ExprAgain(d) => d.target_id.opt_id().map_or(false, |id| id == *dest),\n+        _ => false,\n+    }\n+}\n+\n+fn loop_exit_block(block: &Block) -> bool {\n+    block.stmts.iter().any(|e| loop_exit_stmt(e))\n+        || block.expr.as_ref().map_or(false, |e| loop_exit_expr(e))\n+}\n+\n+fn loop_exit_stmt(stmt: &Stmt) -> bool {\n+    match stmt.node {\n+        StmtSemi(ref e, _) |\n+        StmtExpr(ref e, _) => loop_exit_expr(e),\n+        StmtDecl(ref d, _) => loop_exit_decl(d),\n+    }\n+}\n+\n+fn loop_exit_decl(decl: &Decl) -> bool {\n+    match decl.node {\n+        DeclLocal(ref local) => local.init.as_ref().map_or(false, |e| loop_exit_expr(e)),\n+        _ => false\n+    }\n+}\n+\n+fn loop_exit_expr(expr: &Expr) -> bool {\n+    match expr.node {\n+        ExprBox(ref e) |\n+        ExprUnary(_, ref e) |\n+        ExprCast(ref e, _) |\n+        ExprType(ref e, _) |\n+        ExprField(ref e, _) |\n+        ExprTupField(ref e, _) |\n+        ExprAddrOf(_, ref e) |\n+        ExprRepeat(ref e, _) => loop_exit_expr(e),\n+        ExprMethodCall(_, _, ref es) => es.iter().any(|e| loop_exit_expr(e)),\n+        ExprArray(ref es) |\n+        ExprTup(ref es) => es.iter().any(|e| loop_exit_expr(e)),\n+        ExprCall(ref e, ref es) => loop_exit_expr(e) || es.iter().any(|e| loop_exit_expr(e)),\n+        ExprBinary(_, ref e1, ref e2) |\n+        ExprAssign(ref e1, ref e2) |\n+        ExprAssignOp(_, ref e1, ref e2) |\n+        ExprIndex(ref e1, ref e2) => [e1, e2].iter().any(|e| loop_exit_expr(e)),\n+        ExprIf(ref e, ref e2, ref e3) => loop_exit_expr(e) || e3.as_ref().map_or(false, |e| loop_exit_expr(e)) && loop_exit_expr(e2),\n+        ExprWhile(ref e, ref b, _) => loop_exit_expr(e) || loop_exit_block(b),\n+        ExprMatch(ref e, ref arms, _) => loop_exit_expr(e) || arms.iter().all(|a| loop_exit_expr(&a.body)),\n+        ExprBlock(ref b) => loop_exit_block(b),\n+        ExprBreak(_, _) |\n+        ExprAgain(_) |\n+        ExprRet(_) => true,\n         _ => false,\n     }\n }"}, {"sha": "5d0c7e3c206eef14a44d38b96724467766e77d93", "filename": "clippy_tests/examples/never_loop.rs", "status": "modified", "additions": 35, "deletions": 12, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/20728fb0d0d163ee7a390aa8c99b66089bb82d21/clippy_tests%2Fexamples%2Fnever_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20728fb0d0d163ee7a390aa8c99b66089bb82d21/clippy_tests%2Fexamples%2Fnever_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_tests%2Fexamples%2Fnever_loop.rs?ref=20728fb0d0d163ee7a390aa8c99b66089bb82d21", "patch": "@@ -2,33 +2,56 @@\n #![plugin(clippy)]\n \n #![warn(never_loop)]\n-#![allow(dead_code, unused)]\n+#![allow(single_match, while_true)]\n \n-fn main() {\n+fn break_stmt() {\n     loop {\n-        println!(\"This is only ever printed once\");\n         break;\n     }\n+}\n \n-    let x = 1;\n+fn conditional_break() {\n+    let mut x = 5;\n     loop {\n-        println!(\"This, too\"); // but that's OK\n+        x -= 1;\n         if x == 1 {\n-            break;\n+            break\n         }\n     }\n+}\n \n+fn nested_loop() {\n     loop {\n-        loop {\n-            // another one\n-            break;\n+        while true {\n+            break\n         }\n-        break;\n+        break\n     }\n+}\n \n+fn if_false() {\n+    let x = 1;\n     loop {\n-        loop {\n-            if x == 1 { return; }\n+        if x == 1 {\n+            return\n         }\n     }\n }\n+\n+fn match_false() {\n+    let x = 1;\n+    loop {\n+        match x {\n+            1 => return,\n+            _ => (),\n+        }\n+    }\n+}\n+\n+fn main() {\n+    break_stmt();\n+    conditional_break();\n+    nested_loop();\n+    if_false();\n+    match_false();\n+}"}, {"sha": "4f2c0f6022765fab2e80995900dbc8b4f6ebc842", "filename": "clippy_tests/examples/never_loop.stderr", "status": "modified", "additions": 9, "deletions": 22, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/20728fb0d0d163ee7a390aa8c99b66089bb82d21/clippy_tests%2Fexamples%2Fnever_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/20728fb0d0d163ee7a390aa8c99b66089bb82d21/clippy_tests%2Fexamples%2Fnever_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_tests%2Fexamples%2Fnever_loop.stderr?ref=20728fb0d0d163ee7a390aa8c99b66089bb82d21", "patch": "@@ -2,38 +2,25 @@ error: this loop never actually loops\n   --> never_loop.rs:8:5\n    |\n 8  | /     loop {\n-9  | |         println!(\"This is only ever printed once\");\n-10 | |         break;\n-11 | |     }\n+9  | |         break;\n+10 | |     }\n    | |_____^\n    |\n    = note: `-D never-loop` implied by `-D warnings`\n \n error: this loop never actually loops\n-  --> never_loop.rs:21:5\n+  --> never_loop.rs:24:5\n    |\n-21 | /     loop {\n-22 | |         loop {\n-23 | |             // another one\n-24 | |             break;\n-25 | |         }\n-26 | |         break;\n-27 | |     }\n+24 | /     loop {\n+25 | |         while true {\n+26 | |             break\n+27 | |         }\n+28 | |         break\n+29 | |     }\n    | |_____^\n    |\n    = note: `-D never-loop` implied by `-D warnings`\n \n-error: this loop never actually loops\n-  --> never_loop.rs:22:9\n-   |\n-22 | /         loop {\n-23 | |             // another one\n-24 | |             break;\n-25 | |         }\n-   | |_________^\n-   |\n-   = note: `-D never-loop` implied by `-D warnings`\n-\n error: aborting due to previous error(s)\n \n error: Could not compile `clippy_tests`."}]}