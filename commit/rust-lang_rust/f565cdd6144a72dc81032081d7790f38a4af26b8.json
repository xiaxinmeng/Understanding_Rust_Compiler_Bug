{"sha": "f565cdd6144a72dc81032081d7790f38a4af26b8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1NjVjZGQ2MTQ0YTcyZGM4MTAzMjA4MWQ3NzkwZjM4YTRhZjI2Yjg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-03-03T08:47:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-03-03T08:47:51Z"}, "message": "Auto merge of #58866 - kennytm:rollup, r=kennytm\n\nRollup of 14 pull requests\n\nSuccessful merges:\n\n - #58730 (Have all methods of Filter and FilterMap use internal iteration)\n - #58780 (ManuallyDrop != MaybeUninit)\n - #58782 (Replace `s` with `self` in docs for str methods taking self.)\n - #58785 (allow specifying attributes for tool lints)\n - #58802 (Ensure `record_layout_for_printing()` is inlined.)\n - #58821 (Fixed a syntax error in the pin docs)\n - #58830 (tidy: deny(rust_2018_idioms))\n - #58832 (Revert switching to GCP on AppVeyor)\n - #58833 (tools/rustbook: deny(rust_2018_idioms))\n - #58835 (tools/remote-test-{client,server}: deny(rust_2018_idioms))\n - #58838 (Fix typo in Vec#resize_with documentation)\n - #58842 (Forbid duplicating Cargo as a dependency)\n - #58852 (Update toolchain to build NetBSD release)\n - #58865 (Fix C-variadic function printing)", "tree": {"sha": "b172ddaed4c5fd5b36853ac418039f67d667c0e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b172ddaed4c5fd5b36853ac418039f67d667c0e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f565cdd6144a72dc81032081d7790f38a4af26b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f565cdd6144a72dc81032081d7790f38a4af26b8", "html_url": "https://github.com/rust-lang/rust/commit/f565cdd6144a72dc81032081d7790f38a4af26b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f565cdd6144a72dc81032081d7790f38a4af26b8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba43811a07f13975640e58e6acb3ba3d1399cf78", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba43811a07f13975640e58e6acb3ba3d1399cf78", "html_url": "https://github.com/rust-lang/rust/commit/ba43811a07f13975640e58e6acb3ba3d1399cf78"}, {"sha": "946e670bce9f1e123dffce485fc979a96edbb0b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/946e670bce9f1e123dffce485fc979a96edbb0b8", "html_url": "https://github.com/rust-lang/rust/commit/946e670bce9f1e123dffce485fc979a96edbb0b8"}], "stats": {"total": 226, "additions": 125, "deletions": 101}, "files": [{"sha": "d70ad54b1c812ee6ef9b293cbfa9f434f4fb882b", "filename": "appveyor.yml", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f565cdd6144a72dc81032081d7790f38a4af26b8/appveyor.yml", "raw_url": "https://github.com/rust-lang/rust/raw/f565cdd6144a72dc81032081d7790f38a4af26b8/appveyor.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/appveyor.yml?ref=f565cdd6144a72dc81032081d7790f38a4af26b8", "patch": "@@ -5,11 +5,6 @@ environment:\n   # server goes down presumably. See #43333 for more info\n   CARGO_HTTP_CHECK_REVOKE: false\n \n-  # Execute the builds on GCE instead of Hyper-V. Those builders have a 3-4\n-  # minute startup overhead, but AppVeyor support recommended this as a\n-  # possible solution for #58160 (spurious 259 exit codes)\n-  appveyor_build_worker_cloud: gce\n-\n   matrix:\n   # 32/64 bit MSVC tests\n   - MSYS_BITS: 64"}, {"sha": "44b1aaa24b19d9747bf4a8ed81cba44533ee7f70", "filename": "src/ci/docker/dist-x86_64-netbsd/Dockerfile", "status": "modified", "additions": 2, "deletions": 18, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f565cdd6144a72dc81032081d7790f38a4af26b8/src%2Fci%2Fdocker%2Fdist-x86_64-netbsd%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/f565cdd6144a72dc81032081d7790f38a4af26b8/src%2Fci%2Fdocker%2Fdist-x86_64-netbsd%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-x86_64-netbsd%2FDockerfile?ref=f565cdd6144a72dc81032081d7790f38a4af26b8", "patch": "@@ -3,23 +3,8 @@ FROM ubuntu:16.04\n COPY scripts/cross-apt-packages.sh /scripts/\n RUN sh /scripts/cross-apt-packages.sh\n \n-# Ubuntu 16.04 (this container) ships with make 4, but something in the\n-# toolchains we build below chokes on that, so go back to make 3\n-COPY scripts/make3.sh /scripts/\n-RUN sh /scripts/make3.sh\n-\n-COPY scripts/crosstool-ng.sh /scripts/\n-RUN sh /scripts/crosstool-ng.sh\n-\n-COPY scripts/rustbuild-setup.sh /scripts/\n-RUN sh /scripts/rustbuild-setup.sh\n-USER rustbuild\n-WORKDIR /tmp\n-\n COPY dist-x86_64-netbsd/build-netbsd-toolchain.sh /tmp/\n-RUN ./build-netbsd-toolchain.sh\n-\n-USER root\n+RUN /tmp/build-netbsd-toolchain.sh\n \n COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh\n@@ -33,6 +18,5 @@ ENV \\\n \n ENV HOSTS=x86_64-unknown-netbsd\n \n-ENV RUST_CONFIGURE_ARGS --enable-extended --disable-docs \\\n-  --set llvm.allow-old-toolchain\n+ENV RUST_CONFIGURE_ARGS --enable-extended --disable-docs\n ENV SCRIPT python2.7 ../x.py dist --host $HOSTS --target $HOSTS"}, {"sha": "b5377c64b1f546a0b3470d4db5fbfd152903bf4f", "filename": "src/ci/docker/dist-x86_64-netbsd/build-netbsd-toolchain.sh", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f565cdd6144a72dc81032081d7790f38a4af26b8/src%2Fci%2Fdocker%2Fdist-x86_64-netbsd%2Fbuild-netbsd-toolchain.sh", "raw_url": "https://github.com/rust-lang/rust/raw/f565cdd6144a72dc81032081d7790f38a4af26b8/src%2Fci%2Fdocker%2Fdist-x86_64-netbsd%2Fbuild-netbsd-toolchain.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-x86_64-netbsd%2Fbuild-netbsd-toolchain.sh?ref=f565cdd6144a72dc81032081d7790f38a4af26b8", "patch": "@@ -28,15 +28,15 @@ mkdir -p /x-tools/x86_64-unknown-netbsd/sysroot\n URL=https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror\n \n # Originally from ftp://ftp.netbsd.org/pub/NetBSD/NetBSD-$BSD/source/sets/*.tgz\n-curl $URL/2017-03-17-netbsd-src.tgz | tar xzf -\n-curl $URL/2017-03-17-netbsd-gnusrc.tgz | tar xzf -\n-curl $URL/2017-03-17-netbsd-sharesrc.tgz | tar xzf -\n-curl $URL/2017-03-17-netbsd-syssrc.tgz | tar xzf -\n+curl $URL/2018-03-01-netbsd-src.tgz | tar xzf -\n+curl $URL/2018-03-01-netbsd-gnusrc.tgz | tar xzf -\n+curl $URL/2018-03-01-netbsd-sharesrc.tgz | tar xzf -\n+curl $URL/2018-03-01-netbsd-syssrc.tgz | tar xzf -\n \n # Originally from ftp://ftp.netbsd.org/pub/NetBSD/NetBSD-$BSD/amd64/binary/sets/*.tgz\n-curl $URL/2017-03-17-netbsd-base.tgz | \\\n+curl $URL/2018-03-01-netbsd-base.tgz | \\\n   tar xzf - -C /x-tools/x86_64-unknown-netbsd/sysroot ./usr/include ./usr/lib ./lib\n-curl $URL/2017-03-17-netbsd-comp.tgz | \\\n+curl $URL/2018-03-01-netbsd-comp.tgz | \\\n   tar xzf - -C /x-tools/x86_64-unknown-netbsd/sysroot ./usr/include ./usr/lib\n \n cd usr/src"}, {"sha": "947ce354ae711b279e4d8d830799466cb97fb95b", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f565cdd6144a72dc81032081d7790f38a4af26b8/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f565cdd6144a72dc81032081d7790f38a4af26b8/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=f565cdd6144a72dc81032081d7790f38a4af26b8", "patch": "@@ -1260,7 +1260,7 @@ impl<T> Vec<T> {\n     /// This method uses a closure to create new values on every push. If\n     /// you'd rather [`Clone`] a given value, use [`resize`]. If you want\n     /// to use the [`Default`] trait to generate values, you can pass\n-    /// [`Default::default()`] as the second argument..\n+    /// [`Default::default()`] as the second argument.\n     ///\n     /// # Examples\n     ///"}, {"sha": "1dd2bd3ee78aa67a548bb6625d4703109b396f1b", "filename": "src/libcore/benches/iter.rs", "status": "modified", "additions": 30, "deletions": 2, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f565cdd6144a72dc81032081d7790f38a4af26b8/src%2Flibcore%2Fbenches%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f565cdd6144a72dc81032081d7790f38a4af26b8/src%2Flibcore%2Fbenches%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbenches%2Fiter.rs?ref=f565cdd6144a72dc81032081d7790f38a4af26b8", "patch": "@@ -185,13 +185,13 @@ bench_sums! {\n bench_sums! {\n     bench_filter_sum,\n     bench_filter_ref_sum,\n-    (0i64..1000000).filter(|x| x % 2 == 0)\n+    (0i64..1000000).filter(|x| x % 3 == 0)\n }\n \n bench_sums! {\n     bench_filter_chain_sum,\n     bench_filter_chain_ref_sum,\n-    (0i64..1000000).chain(0..1000000).filter(|x| x % 2 == 0)\n+    (0i64..1000000).chain(0..1000000).filter(|x| x % 3 == 0)\n }\n \n bench_sums! {\n@@ -306,3 +306,31 @@ fn bench_skip_then_zip(b: &mut Bencher) {\n         assert_eq!(s, 2009900);\n     });\n }\n+\n+#[bench]\n+fn bench_filter_count(b: &mut Bencher) {\n+    b.iter(|| {\n+        (0i64..1000000).map(black_box).filter(|x| x % 3 == 0).count()\n+    })\n+}\n+\n+#[bench]\n+fn bench_filter_ref_count(b: &mut Bencher) {\n+    b.iter(|| {\n+        (0i64..1000000).map(black_box).by_ref().filter(|x| x % 3 == 0).count()\n+    })\n+}\n+\n+#[bench]\n+fn bench_filter_chain_count(b: &mut Bencher) {\n+    b.iter(|| {\n+        (0i64..1000000).chain(0..1000000).map(black_box).filter(|x| x % 3 == 0).count()\n+    })\n+}\n+\n+#[bench]\n+fn bench_filter_chain_ref_count(b: &mut Bencher) {\n+    b.iter(|| {\n+        (0i64..1000000).chain(0..1000000).map(black_box).by_ref().filter(|x| x % 3 == 0).count()\n+    })\n+}"}, {"sha": "d4ad22c16bbfa697458af3c5d2e7882be0588bc8", "filename": "src/libcore/iter/adapters/mod.rs", "status": "modified", "additions": 7, "deletions": 30, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/f565cdd6144a72dc81032081d7790f38a4af26b8/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f565cdd6144a72dc81032081d7790f38a4af26b8/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs?ref=f565cdd6144a72dc81032081d7790f38a4af26b8", "patch": "@@ -681,12 +681,7 @@ impl<I: Iterator, P> Iterator for Filter<I, P> where P: FnMut(&I::Item) -> bool\n \n     #[inline]\n     fn next(&mut self) -> Option<I::Item> {\n-        for x in &mut self.iter {\n-            if (self.predicate)(&x) {\n-                return Some(x);\n-            }\n-        }\n-        None\n+        self.try_for_each(Err).err()\n     }\n \n     #[inline]\n@@ -707,12 +702,9 @@ impl<I: Iterator, P> Iterator for Filter<I, P> where P: FnMut(&I::Item) -> bool\n     // Using the branchless version will also simplify the LLVM byte code, thus\n     // leaving more budget for LLVM optimizations.\n     #[inline]\n-    fn count(mut self) -> usize {\n-        let mut count = 0;\n-        for x in &mut self.iter {\n-            count += (self.predicate)(&x) as usize;\n-        }\n-        count\n+    fn count(self) -> usize {\n+        let mut predicate = self.predicate;\n+        self.iter.map(|x| predicate(&x) as usize).sum()\n     }\n \n     #[inline]\n@@ -746,12 +738,7 @@ impl<I: DoubleEndedIterator, P> DoubleEndedIterator for Filter<I, P>\n {\n     #[inline]\n     fn next_back(&mut self) -> Option<I::Item> {\n-        for x in self.iter.by_ref().rev() {\n-            if (self.predicate)(&x) {\n-                return Some(x);\n-            }\n-        }\n-        None\n+        self.try_rfold((), |_, x| Err(x)).err()\n     }\n \n     #[inline]\n@@ -820,12 +807,7 @@ impl<B, I: Iterator, F> Iterator for FilterMap<I, F>\n \n     #[inline]\n     fn next(&mut self) -> Option<B> {\n-        for x in self.iter.by_ref() {\n-            if let Some(y) = (self.f)(x) {\n-                return Some(y);\n-            }\n-        }\n-        None\n+        self.try_for_each(Err).err()\n     }\n \n     #[inline]\n@@ -863,12 +845,7 @@ impl<B, I: DoubleEndedIterator, F> DoubleEndedIterator for FilterMap<I, F>\n {\n     #[inline]\n     fn next_back(&mut self) -> Option<B> {\n-        for x in self.iter.by_ref().rev() {\n-            if let Some(y) = (self.f)(x) {\n-                return Some(y);\n-            }\n-        }\n-        None\n+        self.try_rfold((), |_, x| Err(x)).err()\n     }\n \n     #[inline]"}, {"sha": "94f342e7e8efc6a575184b89027e5a7ce28a2a74", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f565cdd6144a72dc81032081d7790f38a4af26b8/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f565cdd6144a72dc81032081d7790f38a4af26b8/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=f565cdd6144a72dc81032081d7790f38a4af26b8", "patch": "@@ -900,10 +900,16 @@ pub fn discriminant<T>(v: &T) -> Discriminant<T> {\n     }\n }\n \n+// FIXME: Reference `MaybeUninit` from these docs, once that is stable.\n /// A wrapper to inhibit compiler from automatically calling `T`\u2019s destructor.\n ///\n /// This wrapper is 0-cost.\n ///\n+/// `ManuallyDrop<T>` is subject to the same layout optimizations as `T`.\n+/// As a consequence, it has *no effect* on the assumptions that the compiler makes\n+/// about all values being initialized at their type.  In particular, initializing\n+/// a `ManuallyDrop<&mut T>` with [`mem::zeroed`] is undefined behavior.\n+///\n /// # Examples\n ///\n /// This wrapper helps with explicitly documenting the drop order dependencies between fields of\n@@ -935,6 +941,8 @@ pub fn discriminant<T>(v: &T) -> Discriminant<T> {\n ///     }\n /// }\n /// ```\n+///\n+/// [`mem::zeroed`]: fn.zeroed.html\n #[stable(feature = \"manually_drop\", since = \"1.20.0\")]\n #[lang = \"manually_drop\"]\n #[derive(Copy, Clone, Debug, Default, PartialEq, Eq, PartialOrd, Ord, Hash)]"}, {"sha": "fb78f5e5a238424764e7460bbbdc450d6dd7e7a1", "filename": "src/libcore/pin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f565cdd6144a72dc81032081d7790f38a4af26b8/src%2Flibcore%2Fpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f565cdd6144a72dc81032081d7790f38a4af26b8/src%2Flibcore%2Fpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpin.rs?ref=f565cdd6144a72dc81032081d7790f38a4af26b8", "patch": "@@ -215,7 +215,7 @@\n //!     had a method `fn get_pin_mut(self: Pin<&mut Self>) -> Pin<&mut T>`.\n //!     Then we could do the following:\n //!     ```compile_fail\n-//!     fn exploit_ref_cell<T>(rc: Pin<&mut RefCell<T>) {\n+//!     fn exploit_ref_cell<T>(rc: Pin<&mut RefCell<T>>) {\n //!         { let p = rc.as_mut().get_pin_mut(); } // Here we get pinned access to the `T`.\n //!         let rc_shr: &RefCell<T> = rc.into_ref().get_ref();\n //!         let b = rc_shr.borrow_mut();"}, {"sha": "53334adadb856d83a4888393c5fc00a5663a0a0d", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f565cdd6144a72dc81032081d7790f38a4af26b8/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f565cdd6144a72dc81032081d7790f38a4af26b8/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=f565cdd6144a72dc81032081d7790f38a4af26b8", "patch": "@@ -3965,7 +3965,7 @@ impl str {\n         me.make_ascii_lowercase()\n     }\n \n-    /// Return an iterator that escapes each char in `s` with [`char::escape_debug`].\n+    /// Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n     ///\n     /// Note: only extended grapheme codepoints that begin the string will be\n     /// escaped.\n@@ -4013,7 +4013,7 @@ impl str {\n         }\n     }\n \n-    /// Return an iterator that escapes each char in `s` with [`char::escape_default`].\n+    /// Return an iterator that escapes each char in `self` with [`char::escape_default`].\n     ///\n     /// [`char::escape_default`]: ../std/primitive.char.html#method.escape_default\n     ///\n@@ -4051,7 +4051,7 @@ impl str {\n         EscapeDefault { inner: self.chars().flat_map(CharEscapeDefault) }\n     }\n \n-    /// Return an iterator that escapes each char in `s` with [`char::escape_unicode`].\n+    /// Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n     ///\n     /// [`char::escape_unicode`]: ../std/primitive.char.html#method.escape_unicode\n     ///"}, {"sha": "496ff568b31b4d5a775a0f1f1382dfa477a9fff6", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f565cdd6144a72dc81032081d7790f38a4af26b8/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f565cdd6144a72dc81032081d7790f38a4af26b8/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=f565cdd6144a72dc81032081d7790f38a4af26b8", "patch": "@@ -132,14 +132,22 @@ macro_rules! declare_lint {\n \n #[macro_export]\n macro_rules! declare_tool_lint {\n-    ($vis: vis $tool: ident ::$NAME: ident, $Level: ident, $desc: expr) => (\n-        declare_tool_lint!{$vis $tool::$NAME, $Level, $desc, false}\n+    (\n+        $(#[$attr:meta])* $vis:vis $tool:ident ::$NAME:ident, $Level: ident, $desc: expr\n+    ) => (\n+        declare_tool_lint!{$(#[$attr])* $vis $tool::$NAME, $Level, $desc, false}\n     );\n-    ($vis: vis $tool: ident ::$NAME: ident, $Level: ident, $desc: expr,\n-     report_in_external_macro: $rep: expr) => (\n-         declare_tool_lint!{$vis $tool::$NAME, $Level, $desc, $rep}\n+    (\n+        $(#[$attr:meta])* $vis:vis $tool:ident ::$NAME:ident, $Level:ident, $desc:expr,\n+        report_in_external_macro: $rep:expr\n+    ) => (\n+         declare_tool_lint!{$(#[$attr])* $vis $tool::$NAME, $Level, $desc, $rep}\n     );\n-    ($vis: vis $tool: ident ::$NAME: ident, $Level: ident, $desc: expr, $external: expr) => (\n+    (\n+        $(#[$attr:meta])* $vis:vis $tool:ident ::$NAME:ident, $Level:ident, $desc:expr,\n+        $external:expr\n+    ) => (\n+        $(#[$attr])*\n         $vis static $NAME: &$crate::lint::Lint = &$crate::lint::Lint {\n             name: &concat!(stringify!($tool), \"::\", stringify!($NAME)),\n             default_level: $crate::lint::$Level,"}, {"sha": "7d2b21b9aecdaed1f0c8e579f001907204ea2a22", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f565cdd6144a72dc81032081d7790f38a4af26b8/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f565cdd6144a72dc81032081d7790f38a4af26b8/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=f565cdd6144a72dc81032081d7790f38a4af26b8", "patch": "@@ -1176,25 +1176,27 @@ impl<'a, 'tcx> LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n \n     /// This is invoked by the `layout_raw` query to record the final\n     /// layout of each type.\n-    #[inline]\n+    #[inline(always)]\n     fn record_layout_for_printing(&self, layout: TyLayout<'tcx>) {\n-        // If we are running with `-Zprint-type-sizes`, record layouts for\n-        // dumping later. Ignore layouts that are done with non-empty\n-        // environments or non-monomorphic layouts, as the user only wants\n-        // to see the stuff resulting from the final codegen session.\n+        // If we are running with `-Zprint-type-sizes`, maybe record layouts\n+        // for dumping later.\n+        if self.tcx.sess.opts.debugging_opts.print_type_sizes {\n+            self.record_layout_for_printing_outlined(layout)\n+        }\n+    }\n+\n+    fn record_layout_for_printing_outlined(&self, layout: TyLayout<'tcx>) {\n+        // Ignore layouts that are done with non-empty environments or\n+        // non-monomorphic layouts, as the user only wants to see the stuff\n+        // resulting from the final codegen session.\n         if\n-            !self.tcx.sess.opts.debugging_opts.print_type_sizes ||\n             layout.ty.has_param_types() ||\n             layout.ty.has_self_ty() ||\n             !self.param_env.caller_bounds.is_empty()\n         {\n             return;\n         }\n \n-        self.record_layout_for_printing_outlined(layout)\n-    }\n-\n-    fn record_layout_for_printing_outlined(&self, layout: TyLayout<'tcx>) {\n         // (delay format until we actually need it)\n         let record = |kind, packed, opt_discr_size, variants| {\n             let type_desc = format!(\"{:?}\", layout.ty);"}, {"sha": "49e3fad4af0ffdc76671655f3379319ec69a1551", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f565cdd6144a72dc81032081d7790f38a4af26b8/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f565cdd6144a72dc81032081d7790f38a4af26b8/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=f565cdd6144a72dc81032081d7790f38a4af26b8", "patch": "@@ -2814,9 +2814,6 @@ impl<'a> State<'a> {\n         -> io::Result<()> {\n         self.popen()?;\n         self.commasep(Inconsistent, &decl.inputs, |s, arg| s.print_arg(arg, false))?;\n-        if decl.c_variadic {\n-            self.s.word(\", ...\")?;\n-        }\n         self.pclose()?;\n \n         self.print_fn_output(decl)"}, {"sha": "d499be424603badfa5f9fd4c4a70dd6ae7432661", "filename": "src/test/pretty/fn-variadic.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f565cdd6144a72dc81032081d7790f38a4af26b8/src%2Ftest%2Fpretty%2Ffn-variadic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f565cdd6144a72dc81032081d7790f38a4af26b8/src%2Ftest%2Fpretty%2Ffn-variadic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Ffn-variadic.rs?ref=f565cdd6144a72dc81032081d7790f38a4af26b8", "patch": "@@ -0,0 +1,15 @@\n+// Check that `fn foo(x: i32, ...)` does not print as `fn foo(x: i32, ..., ...)`.\n+// See issue #58853.\n+\n+// pp-exact\n+#![feature(c_variadic)]\n+\n+extern \"C\" {\n+    pub fn foo(x: i32, ...);\n+}\n+\n+pub unsafe extern \"C\" fn bar(_: i32, mut ap: ...) -> usize {\n+    ap.arg::<usize>()\n+}\n+\n+fn main() { }"}, {"sha": "d25a5ea374627dbf5ec62eff4467088c2eb42ecb", "filename": "src/test/ui-fulldeps/auxiliary/lint_tool_test.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f565cdd6144a72dc81032081d7790f38a4af26b8/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint_tool_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f565cdd6144a72dc81032081d7790f38a4af26b8/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint_tool_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint_tool_test.rs?ref=f565cdd6144a72dc81032081d7790f38a4af26b8", "patch": "@@ -13,7 +13,11 @@ use rustc::lint::{EarlyContext, LintContext, LintPass, EarlyLintPass,\n use rustc_plugin::Registry;\n use syntax::ast;\n declare_tool_lint!(pub clippy::TEST_LINT, Warn, \"Warn about stuff\");\n-declare_tool_lint!(pub clippy::TEST_GROUP, Warn, \"Warn about other stuff\");\n+declare_tool_lint!(\n+    /// Some docs\n+    pub clippy::TEST_GROUP,\n+    Warn, \"Warn about other stuff\"\n+);\n \n struct Pass;\n "}, {"sha": "f42de44176787b0baca7946af970c9ed53b2688a", "filename": "src/tools/remote-test-client/src/main.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f565cdd6144a72dc81032081d7790f38a4af26b8/src%2Ftools%2Fremote-test-client%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f565cdd6144a72dc81032081d7790f38a4af26b8/src%2Ftools%2Fremote-test-client%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fremote-test-client%2Fsrc%2Fmain.rs?ref=f565cdd6144a72dc81032081d7790f38a4af26b8", "patch": "@@ -1,3 +1,5 @@\n+#![deny(rust_2018_idioms)]\n+\n /// This is a small client program intended to pair with `remote-test-server` in\n /// this repository. This client connects to the server over TCP and is used to\n /// push artifacts and run tests on the server instead of locally.\n@@ -15,7 +17,7 @@ use std::process::{Command, Stdio};\n use std::thread;\n use std::time::Duration;\n \n-const REMOTE_ADDR_ENV: &'static str = \"TEST_DEVICE_ADDR\";\n+const REMOTE_ADDR_ENV: &str = \"TEST_DEVICE_ADDR\";\n \n macro_rules! t {\n     ($e:expr) => (match $e {"}, {"sha": "e1270489d315fbc9ec8ac0415d17720649892122", "filename": "src/tools/remote-test-server/src/main.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f565cdd6144a72dc81032081d7790f38a4af26b8/src%2Ftools%2Fremote-test-server%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f565cdd6144a72dc81032081d7790f38a4af26b8/src%2Ftools%2Fremote-test-server%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fremote-test-server%2Fsrc%2Fmain.rs?ref=f565cdd6144a72dc81032081d7790f38a4af26b8", "patch": "@@ -1,3 +1,5 @@\n+#![deny(rust_2018_idioms)]\n+\n /// This is a small server which is intended to run inside of an emulator or\n /// on a remote test device. This server pairs with the `remote-test-client`\n /// program in this repository. The `remote-test-client` connects to this\n@@ -120,7 +122,7 @@ struct RemoveOnDrop<'a> {\n     inner: &'a Path,\n }\n \n-impl<'a> Drop for RemoveOnDrop<'a> {\n+impl Drop for RemoveOnDrop<'_> {\n     fn drop(&mut self) {\n         t!(fs::remove_dir_all(self.inner));\n     }"}, {"sha": "cfc1bc6d414e40a1892946cb59537b880b2e8015", "filename": "src/tools/rustbook/src/main.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f565cdd6144a72dc81032081d7790f38a4af26b8/src%2Ftools%2Frustbook%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f565cdd6144a72dc81032081d7790f38a4af26b8/src%2Ftools%2Frustbook%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustbook%2Fsrc%2Fmain.rs?ref=f565cdd6144a72dc81032081d7790f38a4af26b8", "patch": "@@ -1,4 +1,5 @@\n-//\n+#![deny(rust_2018_idioms)]\n+\n use clap::{crate_version};\n \n use std::env;\n@@ -68,7 +69,7 @@ fn main() {\n }\n \n // Build command implementation\n-pub fn build_1(args: &ArgMatches) -> Result1<()> {\n+pub fn build_1(args: &ArgMatches<'_>) -> Result1<()> {\n     let book_dir = get_book_dir(args);\n     let mut book = MDBook1::load(&book_dir)?;\n \n@@ -85,7 +86,7 @@ pub fn build_1(args: &ArgMatches) -> Result1<()> {\n }\n \n // Build command implementation\n-pub fn build_2(args: &ArgMatches) -> Result2<()> {\n+pub fn build_2(args: &ArgMatches<'_>) -> Result2<()> {\n     let book_dir = get_book_dir(args);\n     let mut book = MDBook2::load(&book_dir)?;\n \n@@ -101,7 +102,7 @@ pub fn build_2(args: &ArgMatches) -> Result2<()> {\n     Ok(())\n }\n \n-fn get_book_dir(args: &ArgMatches) -> PathBuf {\n+fn get_book_dir(args: &ArgMatches<'_>) -> PathBuf {\n     if let Some(dir) = args.value_of(\"dir\") {\n         // Check if path is relative from current dir, or absolute...\n         let p = Path::new(dir);"}, {"sha": "f581ce1f5a379f5cdaba8ba00ec519f69d0ce4cf", "filename": "src/tools/tidy/src/deps.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f565cdd6144a72dc81032081d7790f38a4af26b8/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f565cdd6144a72dc81032081d7790f38a4af26b8/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs?ref=f565cdd6144a72dc81032081d7790f38a4af26b8", "patch": "@@ -49,13 +49,13 @@ const EXCEPTIONS: &[&str] = &[\n ];\n \n /// Which crates to check against the whitelist?\n-const WHITELIST_CRATES: &[CrateVersion] = &[\n+const WHITELIST_CRATES: &[CrateVersion<'_>] = &[\n     CrateVersion(\"rustc\", \"0.0.0\"),\n     CrateVersion(\"rustc_codegen_llvm\", \"0.0.0\"),\n ];\n \n /// Whitelist of crates rustc is allowed to depend on. Avoid adding to the list if possible.\n-const WHITELIST: &[Crate] = &[\n+const WHITELIST: &[Crate<'_>] = &[\n     Crate(\"adler32\"),\n     Crate(\"aho-corasick\"),\n     Crate(\"arrayvec\"),\n@@ -183,7 +183,7 @@ struct Crate<'a>(&'a str); // (name)\n #[derive(Copy, Clone, PartialOrd, Ord, PartialEq, Eq, Debug, Hash)]\n struct CrateVersion<'a>(&'a str, &'a str); // (name, version)\n \n-impl<'a> Crate<'a> {\n+impl Crate<'_> {\n     pub fn id_str(&self) -> String {\n         format!(\"{} \", self.0)\n     }\n@@ -330,10 +330,10 @@ fn get_deps(path: &Path, cargo: &Path) -> Resolve {\n \n /// Checks the dependencies of the given crate from the given cargo metadata to see if they are on\n /// the whitelist. Returns a list of illegal dependencies.\n-fn check_crate_whitelist<'a, 'b>(\n-    whitelist: &'a HashSet<Crate>,\n+fn check_crate_whitelist<'a>(\n+    whitelist: &'a HashSet<Crate<'_>>,\n     resolve: &'a Resolve,\n-    visited: &'b mut BTreeSet<CrateVersion<'a>>,\n+    visited: &mut BTreeSet<CrateVersion<'a>>,\n     krate: CrateVersion<'a>,\n     must_be_on_whitelist: bool,\n ) -> BTreeSet<Crate<'a>> {\n@@ -378,7 +378,7 @@ fn check_crate_duplicate(resolve: &Resolve, bad: &mut bool) {\n         // to accidentally sneak into our dependency graph, in order to ensure we keep our CI times\n         // under control.\n \n-        // \"cargo\", // FIXME(#53005)\n+        \"cargo\",\n         \"rustc-ap-syntax\",\n     ];\n     let mut name_to_id: HashMap<_, Vec<_>> = HashMap::new();"}, {"sha": "1eab217027c8a7a99963d707dbcd365e8154b7f4", "filename": "src/tools/tidy/src/features.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f565cdd6144a72dc81032081d7790f38a4af26b8/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f565cdd6144a72dc81032081d7790f38a4af26b8/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs?ref=f565cdd6144a72dc81032081d7790f38a4af26b8", "patch": "@@ -22,7 +22,7 @@ pub enum Status {\n }\n \n impl fmt::Display for Status {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         let as_str = match *self {\n             Status::Stable => \"stable\",\n             Status::Unstable => \"unstable\","}, {"sha": "c4a1246ffdf555f6915db7668551a8659c5cffab", "filename": "src/tools/tidy/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f565cdd6144a72dc81032081d7790f38a4af26b8/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f565cdd6144a72dc81032081d7790f38a4af26b8/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs?ref=f565cdd6144a72dc81032081d7790f38a4af26b8", "patch": "@@ -3,7 +3,8 @@\n //! This library contains the tidy lints and exposes it\n //! to be used by tools.\n \n-extern crate serde;\n+#![deny(rust_2018_idioms)]\n+\n extern crate serde_json;\n #[macro_use]\n extern crate serde_derive;"}]}