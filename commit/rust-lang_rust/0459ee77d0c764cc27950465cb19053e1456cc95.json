{"sha": "0459ee77d0c764cc27950465cb19053e1456cc95", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0NTllZTc3ZDBjNzY0Y2MyNzk1MDQ2NWNiMTkwNTNlMTQ1NmNjOTU=", "commit": {"author": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2014-02-26T17:58:41Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-04-04T16:31:44Z"}, "message": "Fix fallout from std::libc separation", "tree": {"sha": "9fa60ca3a09b8bf87bcd9a53ca3c673f84610e5c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9fa60ca3a09b8bf87bcd9a53ca3c673f84610e5c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0459ee77d0c764cc27950465cb19053e1456cc95", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0459ee77d0c764cc27950465cb19053e1456cc95", "html_url": "https://github.com/rust-lang/rust/commit/0459ee77d0c764cc27950465cb19053e1456cc95", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0459ee77d0c764cc27950465cb19053e1456cc95/comments", "author": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "06ad5eb459f1072d79a815210d69af55ef174d20", "url": "https://api.github.com/repos/rust-lang/rust/commits/06ad5eb459f1072d79a815210d69af55ef174d20", "html_url": "https://github.com/rust-lang/rust/commit/06ad5eb459f1072d79a815210d69af55ef174d20"}], "stats": {"total": 571, "additions": 311, "deletions": 260}, "files": [{"sha": "28330010dc2acc6c3939498c7b991687c4480a1c", "filename": "mk/crates.mk", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/mk%2Fcrates.mk", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/mk%2Fcrates.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcrates.mk?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -49,14 +49,14 @@\n # automatically generated for all stage/host/target combinations.\n ################################################################################\n \n-TARGET_CRATES := std green rustuv native flate arena glob term semver \\\n+TARGET_CRATES := libc std green rustuv native flate arena glob term semver \\\n                  uuid serialize sync getopts collections num test time rand \\\n \t\t workcache url log\n HOST_CRATES := syntax rustc rustdoc fourcc hexfloat\n CRATES := $(TARGET_CRATES) $(HOST_CRATES)\n TOOLS := compiletest rustdoc rustc\n \n-DEPS_std := native:rustrt native:compiler-rt native:backtrace\n+DEPS_std := libc native:rustrt native:compiler-rt native:backtrace\n DEPS_green := std rand native:context_switch\n DEPS_rustuv := std native:uv native:uv_support\n DEPS_native := std"}, {"sha": "449c3ca6941dcfa0d1c88248ed554865ec645869", "filename": "src/doc/guide-ffi.md", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Fdoc%2Fguide-ffi.md", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Fdoc%2Fguide-ffi.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-ffi.md?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -12,7 +12,8 @@ The following is a minimal example of calling a foreign function which will\n compile if snappy is installed:\n \n ~~~~ {.ignore}\n-use std::libc::size_t;\n+extern crate libc;\n+use libc::size_t;\n \n #[link(name = \"snappy\")]\n extern {\n@@ -44,7 +45,8 @@ keeping the binding correct at runtime.\n The `extern` block can be extended to cover the entire snappy API:\n \n ~~~~ {.ignore}\n-use std::libc::{c_int, size_t};\n+extern crate libc;\n+use libc::{c_int, size_t};\n \n #[link(name = \"snappy\")]\n extern {\n@@ -402,7 +404,7 @@ global state. In order to access these variables, you declare them in `extern`\n blocks with the `static` keyword:\n \n ~~~{.ignore}\n-use std::libc;\n+extern crate libc;\n \n #[link(name = \"readline\")]\n extern {\n@@ -420,7 +422,7 @@ interface. To do this, statics can be declared with `mut` so rust can mutate\n them.\n \n ~~~{.ignore}\n-use std::libc;\n+extern crate libc;\n use std::ptr;\n \n #[link(name = \"readline\")]\n@@ -444,11 +446,15 @@ calling foreign functions. Some foreign functions, most notably the Windows API,\n conventions. Rust provides a way to tell the compiler which convention to use:\n \n ~~~~\n+extern crate libc;\n+\n #[cfg(target_os = \"win32\", target_arch = \"x86\")]\n #[link(name = \"kernel32\")]\n extern \"stdcall\" {\n-    fn SetEnvironmentVariableA(n: *u8, v: *u8) -> std::libc::c_int;\n+    fn SetEnvironmentVariableA(n: *u8, v: *u8) -> libc::c_int;\n }\n+\n+# fn main() { }\n ~~~~\n \n This applies to the entire `extern` block. The list of supported ABI constraints"}, {"sha": "04b332ab580a20480d897105e57df68c97ad2189", "filename": "src/doc/guide-unsafe.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Fdoc%2Fguide-unsafe.md", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Fdoc%2Fguide-unsafe.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-unsafe.md?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -192,7 +192,8 @@ As an example, we give a reimplementation of owned boxes by wrapping\n reimplementation is as safe as the built-in `~` type.\n \n ```\n-use std::libc::{c_void, size_t, malloc, free};\n+extern crate libc;\n+use libc::{c_void, size_t, malloc, free};\n use std::mem;\n use std::ptr;\n "}, {"sha": "efc1847e2c5e74d524becda0b05a650debba0bb9", "filename": "src/doc/index.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Fdoc%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Fdoc%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Findex.md?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -36,6 +36,7 @@ li {list-style-type: none; }\n * [The `glob` file path matching library](glob/index.html)\n * [The `green` M:N runtime library](green/index.html)\n * [The `hexfloat` library for hexadecimal floating-point literals](hexfloat/index.html)\n+* [The `libc` bindings](libc/index.html)\n * [The `native` 1:1 threading runtime](native/index.html)\n * [The `num` arbitrary precision numerics library](num/index.html)\n * [The `rand` library for random numbers and distributions](rand/index.html)"}, {"sha": "fa43c283082749664beec6e84a54c922a9e81250", "filename": "src/doc/rust.md", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Fdoc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Fdoc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust.md?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -1472,11 +1472,13 @@ with the exception that they may not have a body\n and are instead terminated by a semicolon.\n \n ~~~~\n-# use std::libc::{c_char, FILE};\n+extern crate libc;\n+use libc::{c_char, FILE};\n \n extern {\n     fn fopen(filename: *c_char, mode: *c_char) -> *FILE;\n }\n+# fn main() {}\n ~~~~\n \n Functions within external blocks may be called by Rust code,"}, {"sha": "44e2ecc4d3842fbcd1c8dfffb0bce23186f4b650", "filename": "src/etc/zsh/_rust", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Fetc%2Fzsh%2F_rust", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Fetc%2Fzsh%2F_rust", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fzsh%2F_rust?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -40,7 +40,7 @@ _rustc_opts_switches=(\n )\n _rustc_opts_lint=(\n     'attribute-usage[detects bad use of attributes]'\n-    'ctypes[proper use of std::libc types in foreign modules]'\n+    'ctypes[proper use of libc types in foreign modules]'\n     'dead-assignment[detect assignments that will never be read]'\n     'dead-code[detect piece of code that will never be used]'\n     'default-type-param-usage[prevents explicitly setting a type parameter with a default]'"}, {"sha": "8090b2cea8c6e1ac87a91fd96125a5d10e952b89", "filename": "src/libcollections/hashmap.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibcollections%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibcollections%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fhashmap.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -30,11 +30,12 @@ use std::result::{Ok, Err};\n use std::slice::ImmutableVector;\n \n mod table {\n+    extern crate libc;\n+\n     use std::clone::Clone;\n     use std::cmp::Eq;\n     use std::hash::{Hash, Hasher};\n     use std::kinds::marker;\n-    use std::libc;\n     use std::num::CheckedMul;\n     use std::option::{Option, Some, None};\n     use std::prelude::Drop;"}, {"sha": "97e03561b871500e02840697be04e636c185f300", "filename": "src/libflate/lib.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibflate%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibflate%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibflate%2Flib.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -26,13 +26,14 @@ Simple compression\n \n #[cfg(test)] #[phase(syntax, link)] extern crate log;\n \n-use std::libc::{c_void, size_t, c_int};\n-use std::libc;\n+extern crate libc;\n+\n use std::c_vec::CVec;\n+use libc::{c_void, size_t, c_int};\n \n-pub mod rustrt {\n-    use std::libc::{c_int, c_void, size_t};\n \n+pub mod rustrt {\n+    use libc::{c_void, size_t, c_int};\n     #[link(name = \"miniz\", kind = \"static\")]\n     extern {\n         pub fn tdefl_compress_mem_to_heap(psrc_buf: *c_void,"}, {"sha": "e4a9641efd1b759c8c1aaf5d92fff1d51f8016ce", "filename": "src/libgreen/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibgreen%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibgreen%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Flib.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -199,6 +199,7 @@\n #[cfg(test)] #[phase(syntax, link)] extern crate log;\n #[cfg(test)] extern crate rustuv;\n extern crate rand;\n+extern crate libc;\n \n use std::mem::replace;\n use std::os;"}, {"sha": "d1d7a9e0c98da8c54fc5e09ebf8eb98d22baffee", "filename": "src/libgreen/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibgreen%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibgreen%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Fmacros.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -52,7 +52,7 @@ macro_rules! rtabort (\n \n pub fn dumb_println(args: &fmt::Arguments) {\n     use std::io;\n-    use std::libc;\n+    use libc;\n \n     struct Stderr;\n     impl io::Writer for Stderr {"}, {"sha": "036d02655f9f0eab55607fbea5d3b121e147dac7", "filename": "src/libgreen/sched.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibgreen%2Fsched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibgreen%2Fsched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Fsched.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -976,7 +976,7 @@ fn new_sched_rng() -> XorShiftRng {\n }\n #[cfg(unix)]\n fn new_sched_rng() -> XorShiftRng {\n-    use std::libc;\n+    use libc;\n     use std::mem;\n     use rand::SeedableRng;\n "}, {"sha": "b8ab4d5f8c1febb8dfa1a3f82a657330aca84ac7", "filename": "src/libgreen/stack.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibgreen%2Fstack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibgreen%2Fstack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Fstack.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -11,7 +11,7 @@\n use std::rt::env::max_cached_stacks;\n use std::os::{errno, page_size, MemoryMap, MapReadable, MapWritable,\n               MapNonStandardFlags, MapVirtual};\n-use std::libc;\n+use libc;\n \n /// A task's stack. The name \"Stack\" is a vestige of segmented stacks.\n pub struct Stack {"}, {"sha": "00aee1d17dcfa3cbb56432b6b2b6b03c8a1c0899", "filename": "src/liblibc/lib.rs", "status": "modified", "additions": 29, "deletions": 45, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Fliblibc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Fliblibc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc%2Flib.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -8,37 +8,43 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(globs)];\n-#[crate_id = \"libc#0.10-pre\"];\n-#[experimental];\n+#![feature(globs)]\n+#![crate_id = \"libc#0.10-pre\"]\n+#![experimental]\n+#![no_std] // we don't need std, and we can't have std, since it doesn't exist\n+           // yet. std depends on us.\n+#![crate_type = \"rlib\"]\n+#![crate_type = \"dylib\"]\n \n /*!\n * Bindings for the C standard library and other platform libraries\n *\n-* This module contains bindings to the C standard library,\n-* organized into modules by their defining standard.\n-* Additionally, it contains some assorted platform-specific definitions.\n-* For convenience, most functions and types are reexported from `libc`,\n-* so `pub use std::*` will import the available\n-* C bindings as appropriate for the target platform. The exact\n-* set of functions available are platform specific.\n+* **NOTE:** These are *architecture and libc* specific. On Linux, these\n+* bindings are only correct for glibc.\n *\n-* *Note* Because these definitions are platform-specific, some may not appear in\n-* the generated documentation.\n+* This module contains bindings to the C standard library, organized into\n+* modules by their defining standard.  Additionally, it contains some assorted\n+* platform-specific definitions.  For convenience, most functions and types\n+* are reexported, so `use libc::*` will import the available C bindings as\n+* appropriate for the target platform. The exact set of functions available\n+* are platform specific.\n *\n-* We consider the following specs reasonably normative with respect\n-* to interoperating with the C standard library (libc/msvcrt):\n+* *Note:* Because these definitions are platform-specific, some may not appear\n+* in the generated documentation.\n+*\n+* We consider the following specs reasonably normative with respect to\n+* interoperating with the C standard library (libc/msvcrt):\n *\n * * ISO 9899:1990 ('C95', 'ANSI C', 'Standard C'), NA1, 1995.\n * * ISO 9899:1999 ('C99' or 'C9x').\n * * ISO 9945:1988 / IEEE 1003.1-1988 ('POSIX.1').\n * * ISO 9945:2001 / IEEE 1003.1-2001 ('POSIX:2001', 'SUSv3').\n * * ISO 9945:2008 / IEEE 1003.1-2008 ('POSIX:2008', 'SUSv4').\n *\n-* Note that any reference to the 1996 revision of POSIX, or any revs\n-* between 1990 (when '88 was approved at ISO) and 2001 (when the next\n-* actual revision-revision happened), are merely additions of other\n-* chapters (1b and 1c) outside the core interfaces.\n+* Note that any reference to the 1996 revision of POSIX, or any revs between\n+* 1990 (when '88 was approved at ISO) and 2001 (when the next actual\n+* revision-revision happened), are merely additions of other chapters (1b and\n+* 1c) outside the core interfaces.\n *\n * Despite having several names each, these are *reasonably* coherent\n * point-in-time, list-of-definition sorts of specs. You can get each under a\n@@ -55,15 +61,13 @@\n * sanity while editing, filling-in-details and eliminating duplication) into\n * definitions common-to-all (held in modules named c95, c99, posix88, posix01\n * and posix08) and definitions that appear only on *some* platforms (named\n-* 'extra'). This would be things like significant OSX foundation kit, or\n-* win32 library kernel32.dll, or various fancy glibc, linux or BSD\n-* extensions.\n+* 'extra'). This would be things like significant OSX foundation kit, or win32\n+* library kernel32.dll, or various fancy glibc, linux or BSD extensions.\n *\n * In addition to the per-platform 'extra' modules, we define a module of\n * 'common BSD' libc routines that never quite made it into POSIX but show up\n-* in multiple derived systems. This is the 4.4BSD r2 / 1995 release, the\n-* final one from Berkeley after the lawsuits died down and the CSRG\n-* dissolved.\n+* in multiple derived systems. This is the 4.4BSD r2 / 1995 release, the final\n+* one from Berkeley after the lawsuits died down and the CSRG dissolved.\n */\n \n #![allow(non_camel_case_types)]\n@@ -997,7 +1001,6 @@ pub mod types {\n             pub mod bsd44 {\n             }\n             pub mod extra {\n-                use ptr;\n                 use consts::os::extra::{MAX_PROTOCOL_CHAIN,\n                                               WSAPROTOCOL_LEN};\n                 use types::common::c95::c_void;\n@@ -1102,24 +1105,6 @@ pub mod types {\n                 }\n                 pub type LPSYSTEM_INFO = *mut SYSTEM_INFO;\n \n-                impl SYSTEM_INFO {\n-                    pub fn new() -> SYSTEM_INFO {\n-                        SYSTEM_INFO {\n-                            wProcessorArchitecture: 0,\n-                            wReserved: 0,\n-                            dwPageSize: 0,\n-                            lpMinimumApplicationAddress: ptr::mut_null(),\n-                            lpMaximumApplicationAddress: ptr::mut_null(),\n-                            dwActiveProcessorMask: 0,\n-                            dwNumberOfProcessors: 0,\n-                            dwProcessorType: 0,\n-                            dwAllocationGranularity: 0,\n-                            wProcessorLevel: 0,\n-                            wProcessorRevision: 0\n-                        }\n-                    }\n-                }\n-\n                 pub struct MEMORY_BASIC_INFORMATION {\n                     pub BaseAddress: LPVOID,\n                     pub AllocationBase: LPVOID,\n@@ -3901,12 +3886,11 @@ pub mod funcs {\n         pub mod glob {\n             use types::os::arch::c95::{c_char, c_int};\n             use types::os::common::posix01::{glob_t};\n-            use Nullable;\n \n             extern {\n                 pub fn glob(pattern: *c_char,\n                             flags: c_int,\n-                            errfunc: Nullable<extern \"C\" fn(epath: *c_char, errno: int) -> int>,\n+                            errfunc: ::Nullable<extern \"C\" fn(epath: *c_char, errno: int) -> int>,\n                             pglob: *mut glob_t);\n                 pub fn globfree(pglob: *mut glob_t);\n             }"}, {"sha": "5b872a2dbc5cf26f5fff1290ccdcfb43e30ffb61", "filename": "src/libnative/io/addrinfo.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibnative%2Fio%2Faddrinfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibnative%2Fio%2Faddrinfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Faddrinfo.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -12,8 +12,8 @@ use ai = std::io::net::addrinfo;\n use std::c_str::CString;\n use std::cast;\n use std::io::IoError;\n-use std::libc;\n-use std::libc::{c_char, c_int};\n+use libc;\n+use libc::{c_char, c_int};\n use std::ptr::{null, mut_null};\n \n use super::net::sockaddr_to_addr;"}, {"sha": "56460166b48a4c7b3cdfbb23f5ec7fb18bccea1a", "filename": "src/libnative/io/file_unix.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibnative%2Fio%2Ffile_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibnative%2Fio%2Ffile_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Ffile_unix.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -14,8 +14,8 @@ use std::sync::arc::UnsafeArc;\n use std::c_str::CString;\n use std::io::IoError;\n use std::io;\n-use std::libc::{c_int, c_void};\n-use std::libc;\n+use libc::{c_int, c_void};\n+use libc;\n use std::mem;\n use std::rt::rtio;\n use std::slice;\n@@ -341,8 +341,8 @@ pub fn mkdir(p: &CString, mode: io::FilePermission) -> IoResult<()> {\n }\n \n pub fn readdir(p: &CString) -> IoResult<~[Path]> {\n-    use std::libc::{dirent_t};\n-    use std::libc::{opendir, readdir_r, closedir};\n+    use libc::{dirent_t};\n+    use libc::{opendir, readdir_r, closedir};\n \n     fn prune(root: &CString, dirs: ~[Path]) -> ~[Path] {\n         let root = unsafe { CString::new(root.with_ref(|p| p), false) };\n@@ -520,7 +520,7 @@ pub fn utime(p: &CString, atime: u64, mtime: u64) -> IoResult<()> {\n mod tests {\n     use super::{CFile, FileDesc};\n     use std::io;\n-    use std::libc;\n+    use libc;\n     use std::os;\n     use std::rt::rtio::RtioFileStream;\n "}, {"sha": "3e8ee55df94fc934350364a38b1fff61752e33ac", "filename": "src/libnative/io/file_win32.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibnative%2Fio%2Ffile_win32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibnative%2Fio%2Ffile_win32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Ffile_win32.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -14,8 +14,8 @@ use std::c_str::CString;\n use std::cast;\n use std::io::IoError;\n use std::io;\n-use std::libc::{c_int, c_void};\n-use std::libc;\n+use libc::{c_int, c_void};\n+use libc;\n use std::mem;\n use std::os::win32::{as_utf16_p, fill_utf16_buf_and_decode};\n use std::ptr;"}, {"sha": "ffca0dbe3dc6056890cd6a7eef296882652c5c56", "filename": "src/libnative/io/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibnative%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibnative%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fmod.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -27,8 +27,8 @@ use std::io::IoError;\n use std::io::net::ip::SocketAddr;\n use std::io::process::ProcessConfig;\n use std::io::signal::Signum;\n-use std::libc::c_int;\n-use std::libc;\n+use libc::c_int;\n+use libc;\n use std::os;\n use std::rt::rtio;\n use std::rt::rtio::{RtioTcpStream, RtioTcpListener, RtioUdpSocket,"}, {"sha": "cef6a247a00af9024a6ac81c05a5f3fbb784c90a", "filename": "src/libnative/io/net.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibnative%2Fio%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibnative%2Fio%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fnet.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -11,7 +11,7 @@\n use std::cast;\n use std::io::net::ip;\n use std::io;\n-use std::libc;\n+use libc;\n use std::mem;\n use std::rt::rtio;\n use std::sync::arc::UnsafeArc;"}, {"sha": "22ba643e96a0261e1a4ef14d8f51423bb13c36a3", "filename": "src/libnative/io/pipe_unix.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibnative%2Fio%2Fpipe_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibnative%2Fio%2Fpipe_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fpipe_unix.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -11,7 +11,7 @@\n use std::c_str::CString;\n use std::cast;\n use std::io;\n-use std::libc;\n+use libc;\n use std::mem;\n use std::rt::rtio;\n use std::sync::arc::UnsafeArc;"}, {"sha": "84b3d887c04989ebfa618688d035ff82aa97d832", "filename": "src/libnative/io/pipe_win32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibnative%2Fio%2Fpipe_win32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibnative%2Fio%2Fpipe_win32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fpipe_win32.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -85,7 +85,7 @@\n //! me!\n \n use std::c_str::CString;\n-use std::libc;\n+use libc;\n use std::os::win32::as_utf16_p;\n use std::ptr;\n use std::rt::rtio;"}, {"sha": "1218fab05f03478d23021ec3ad01217f9a9171f9", "filename": "src/libnative/io/process.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibnative%2Fio%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibnative%2Fio%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fprocess.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n use std::io;\n-use std::libc::{pid_t, c_void, c_int};\n-use std::libc;\n+use libc::{pid_t, c_void, c_int};\n+use libc;\n use std::os;\n use std::ptr;\n use std::rt::rtio;\n@@ -223,20 +223,20 @@ fn spawn_process_os(config: p::ProcessConfig,\n                     dir: Option<&Path>,\n                     in_fd: c_int, out_fd: c_int,\n                     err_fd: c_int) -> IoResult<SpawnProcessResult> {\n-    use std::libc::types::os::arch::extra::{DWORD, HANDLE, STARTUPINFO};\n-    use std::libc::consts::os::extra::{\n+    use libc::types::os::arch::extra::{DWORD, HANDLE, STARTUPINFO};\n+    use libc::consts::os::extra::{\n         TRUE, FALSE,\n         STARTF_USESTDHANDLES,\n         INVALID_HANDLE_VALUE,\n         DUPLICATE_SAME_ACCESS\n     };\n-    use std::libc::funcs::extra::kernel32::{\n+    use libc::funcs::extra::kernel32::{\n         GetCurrentProcess,\n         DuplicateHandle,\n         CloseHandle,\n         CreateProcessA\n     };\n-    use std::libc::funcs::extra::msvcrt::get_osfhandle;\n+    use libc::funcs::extra::msvcrt::get_osfhandle;\n \n     use std::mem;\n \n@@ -422,9 +422,9 @@ fn spawn_process_os(config: p::ProcessConfig,\n                     dir: Option<&Path>,\n                     in_fd: c_int, out_fd: c_int,\n                     err_fd: c_int) -> IoResult<SpawnProcessResult> {\n-    use std::libc::funcs::posix88::unistd::{fork, dup2, close, chdir, execvp};\n-    use std::libc::funcs::bsd44::getdtablesize;\n-    use std::libc::c_ulong;\n+    use libc::funcs::posix88::unistd::{fork, dup2, close, chdir, execvp};\n+    use libc::funcs::bsd44::getdtablesize;\n+    use libc::c_ulong;\n \n     mod rustrt {\n         extern {\n@@ -716,16 +716,16 @@ fn waitpid(pid: pid_t) -> p::ProcessExit {\n \n     #[cfg(windows)]\n     fn waitpid_os(pid: pid_t) -> p::ProcessExit {\n-        use std::libc::types::os::arch::extra::DWORD;\n-        use std::libc::consts::os::extra::{\n+        use libc::types::os::arch::extra::DWORD;\n+        use libc::consts::os::extra::{\n             SYNCHRONIZE,\n             PROCESS_QUERY_INFORMATION,\n             FALSE,\n             STILL_ACTIVE,\n             INFINITE,\n             WAIT_FAILED\n         };\n-        use std::libc::funcs::extra::kernel32::{\n+        use libc::funcs::extra::kernel32::{\n             OpenProcess,\n             GetExitCodeProcess,\n             CloseHandle,\n@@ -761,7 +761,7 @@ fn waitpid(pid: pid_t) -> p::ProcessExit {\n \n     #[cfg(unix)]\n     fn waitpid_os(pid: pid_t) -> p::ProcessExit {\n-        use std::libc::funcs::posix01::wait;\n+        use libc::funcs::posix01::wait;\n         let mut status = 0 as c_int;\n         match retry(|| unsafe { wait::waitpid(pid, &mut status, 0) }) {\n             -1 => fail!(\"unknown waitpid error: {}\", super::last_error()),\n@@ -779,7 +779,7 @@ fn waitpid_nowait(pid: pid_t) -> Option<p::ProcessExit> {\n \n     #[cfg(unix)]\n     fn waitpid_os(pid: pid_t) -> Option<p::ProcessExit> {\n-        use std::libc::funcs::posix01::wait;\n+        use libc::funcs::posix01::wait;\n         let mut status = 0 as c_int;\n         match retry(|| unsafe {\n             wait::waitpid(pid, &mut status, libc::WNOHANG)"}, {"sha": "4b29feab84fd0c5e2a0a146d44426a5d7f0b8d41", "filename": "src/libnative/io/timer_helper.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibnative%2Fio%2Ftimer_helper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibnative%2Fio%2Ftimer_helper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Ftimer_helper.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -94,7 +94,7 @@ fn shutdown() {\n \n #[cfg(unix)]\n mod imp {\n-    use std::libc;\n+    use libc;\n     use std::os;\n \n     use io::file::FileDesc;\n@@ -117,9 +117,9 @@ mod imp {\n \n #[cfg(windows)]\n mod imp {\n-    use std::libc::{BOOL, LPCSTR, HANDLE, LPSECURITY_ATTRIBUTES, CloseHandle};\n+    use libc::{BOOL, LPCSTR, HANDLE, LPSECURITY_ATTRIBUTES, CloseHandle};\n     use std::ptr;\n-    use std::libc;\n+    use libc;\n \n     pub type signal = HANDLE;\n "}, {"sha": "13f1ea6319a460fbee5fe88e14f235850f5edecb", "filename": "src/libnative/io/timer_other.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibnative%2Fio%2Ftimer_other.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibnative%2Fio%2Ftimer_other.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Ftimer_other.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -47,7 +47,7 @@\n //! Note that all time units in this file are in *milliseconds*.\n \n use std::comm::Data;\n-use std::libc;\n+use libc;\n use std::mem;\n use std::os;\n use std::ptr;\n@@ -287,7 +287,7 @@ impl Drop for Timer {\n \n #[cfg(target_os = \"macos\")]\n mod imp {\n-    use std::libc;\n+    use libc;\n \n     pub static FD_SETSIZE: uint = 1024;\n \n@@ -314,7 +314,7 @@ mod imp {\n #[cfg(target_os = \"android\")]\n #[cfg(target_os = \"freebsd\")]\n mod imp {\n-    use std::libc;\n+    use libc;\n \n     pub static FD_SETSIZE: uint = 1024;\n "}, {"sha": "25dbdc1e1a5cdf8f67abdd31dc703b9430e22d75", "filename": "src/libnative/io/timer_timerfd.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibnative%2Fio%2Ftimer_timerfd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibnative%2Fio%2Ftimer_timerfd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Ftimer_timerfd.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -29,7 +29,7 @@\n //! As with timer_other, all units in this file are in units of millseconds.\n \n use std::comm::Data;\n-use std::libc;\n+use libc;\n use std::ptr;\n use std::os;\n use std::rt::rtio;\n@@ -267,7 +267,7 @@ impl Drop for Timer {\n \n #[allow(dead_code)]\n mod imp {\n-    use std::libc;\n+    use libc;\n \n     pub static CLOCK_MONOTONIC: libc::c_int = 1;\n     pub static EPOLL_CTL_ADD: libc::c_int = 1;"}, {"sha": "278a5a73a36bd5943ac2462bb8cb8c1e945aae13", "filename": "src/libnative/io/timer_win32.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibnative%2Fio%2Ftimer_win32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibnative%2Fio%2Ftimer_win32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Ftimer_win32.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -21,7 +21,7 @@\n //! the other two implementations of timers with nothing *that* new showing up.\n \n use std::comm::Data;\n-use std::libc;\n+use libc;\n use std::ptr;\n use std::rt::rtio;\n \n@@ -178,7 +178,7 @@ impl Drop for Timer {\n }\n \n mod imp {\n-    use std::libc::{LPSECURITY_ATTRIBUTES, BOOL, LPCSTR, HANDLE, LARGE_INTEGER,\n+    use libc::{LPSECURITY_ATTRIBUTES, BOOL, LPCSTR, HANDLE, LARGE_INTEGER,\n                     LONG, LPVOID, DWORD, c_void};\n \n     pub type PTIMERAPCROUTINE = *c_void;"}, {"sha": "b4e8bfde4894578fc51d54ec1ff5121098327992", "filename": "src/libnative/lib.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibnative%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibnative%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Flib.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -57,6 +57,8 @@\n //    consider whether they're needed before adding that feature here (the\n //    answer is that you don't need them)\n \n+extern crate libc;\n+\n use std::os;\n use std::rt;\n use std::str;\n@@ -109,8 +111,8 @@ pub fn start(argc: int, argv: **u8, main: proc()) -> int {\n     // prevent this problem.\n     #[cfg(windows)] fn ignore_sigpipe() {}\n     #[cfg(unix)] fn ignore_sigpipe() {\n-        use std::libc;\n-        use std::libc::funcs::posix01::signal::signal;\n+        use libc;\n+        use libc::funcs::posix01::signal::signal;\n         unsafe {\n             assert!(signal(libc::SIGPIPE, libc::SIG_IGN) != -1);\n         }"}, {"sha": "ed4c7299dffb8d4614666d9b4eccd50339b45450", "filename": "src/librand/os.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibrand%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibrand%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fos.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -58,12 +58,14 @@ mod imp {\n \n #[cfg(windows)]\n mod imp {\n+    extern crate libc;\n+\n     use Rng;\n     use std::cast;\n     use std::io::{IoResult, IoError};\n-    use std::libc::{c_ulong, DWORD, BYTE, LPCSTR, BOOL};\n     use std::os;\n     use std::rt::stack;\n+    use self::libc::{c_ulong, DWORD, BYTE, LPCSTR, BOOL};\n \n     type HCRYPTPROV = c_ulong;\n "}, {"sha": "0e28791539ce5a8f9e07cd825a204d3b04568550", "filename": "src/librustc/back/archive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibrustc%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibrustc%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Farchive.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -18,7 +18,7 @@ use lib::llvm::{ArchiveRef, llvm};\n use std::cast;\n use std::io;\n use std::io::{fs, TempDir};\n-use std::libc;\n+use libc;\n use std::os;\n use std::io::process::{ProcessConfig, Process, ProcessOutput};\n use std::str;"}, {"sha": "a329f850ed40ca149d9dafd66701cc5b222d2350", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -102,7 +102,7 @@ pub mod write {\n \n     use std::c_str::ToCStr;\n     use std::io::Process;\n-    use std::libc::{c_uint, c_int};\n+    use libc::{c_uint, c_int};\n     use std::str;\n \n     // On android, we by default compile for armv7 processors. This enables"}, {"sha": "3171114985e1f64fefbdc8b903fbe80b4b971d68", "filename": "src/librustc/back/lto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibrustc%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibrustc%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flto.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -15,7 +15,7 @@ use lib::llvm::{ModuleRef, TargetMachineRef, llvm, True, False};\n use metadata::cstore;\n use util::common::time;\n \n-use std::libc;\n+use libc;\n use flate;\n \n pub fn run(sess: &session::Session, llmod: ModuleRef,"}, {"sha": "d18a70523d9f88115b77bf5158251cc79f108eee", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -42,6 +42,8 @@ extern crate sync;\n extern crate getopts;\n extern crate collections;\n extern crate time;\n+extern crate libc;\n+\n #[phase(syntax, link)]\n extern crate log;\n "}, {"sha": "62c14e560e79843079153341c560c6f1ce60d5fa", "filename": "src/librustc/lib/llvm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibrustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibrustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib%2Fllvm.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -15,7 +15,7 @@\n use std::c_str::ToCStr;\n use std::cell::RefCell;\n use collections::HashMap;\n-use std::libc::{c_uint, c_ushort, c_void, free};\n+use libc::{c_uint, c_ushort, c_void, free};\n use std::str::raw::from_c_str;\n \n use middle::trans::type_::Type;\n@@ -307,7 +307,7 @@ pub mod llvm {\n     use super::{ValueRef, TargetMachineRef, FileType, ArchiveRef};\n     use super::{CodeGenModel, RelocMode, CodeGenOptLevel};\n     use super::debuginfo::*;\n-    use std::libc::{c_char, c_int, c_longlong, c_ushort, c_uint, c_ulonglong,\n+    use libc::{c_char, c_int, c_longlong, c_ushort, c_uint, c_ulonglong,\n                     size_t};\n \n     // Link to our native llvm bindings (things that we need to use the C++ api"}, {"sha": "3529f2c57c0e29ea801e44ffb88d743e179151a5", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -34,7 +34,7 @@ use syntax::fold::Folder;\n use syntax::parse::token;\n use syntax;\n \n-use std::libc;\n+use libc;\n use std::cast;\n use std::cell::RefCell;\n use std::io::Seek;"}, {"sha": "22182d7e87e13bcda571bb26db21eefbaee20945", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -154,7 +154,7 @@ static lint_table: &'static [(&'static str, LintSpec)] = &[\n     (\"ctypes\",\n      LintSpec {\n         lint: CTypes,\n-        desc: \"proper use of std::libc types in foreign modules\",\n+        desc: \"proper use of libc types in foreign modules\",\n         default: warn\n      }),\n "}, {"sha": "da78b650852e81ff80d49e52bae35820d2c46e6f", "filename": "src/librustc/middle/trans/adt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -44,7 +44,7 @@\n  */\n \n use std::container::Map;\n-use std::libc::c_ulonglong;\n+use libc::c_ulonglong;\n use std::option::{Option, Some, None};\n use std::num::{Bitwise};\n "}, {"sha": "10cd58691466baa4143e3d1f5563420072e4682d", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -72,9 +72,9 @@ use util::sha2::Sha256;\n use util::nodemap::NodeMap;\n \n use arena::TypedArena;\n+use libc::c_uint;\n use std::c_str::ToCStr;\n use std::cell::{Cell, RefCell};\n-use std::libc::c_uint;\n use std::local_data;\n use syntax::abi::{X86, X86_64, Arm, Mips, Rust, RustIntrinsic};\n use syntax::ast_util::{local_def, is_local};"}, {"sha": "c60a1e219d009c3a2b291a871a8e02e59a3cba0c", "filename": "src/librustc/middle/trans/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -21,7 +21,7 @@ use syntax::codemap::Span;\n use middle::trans::builder::Builder;\n use middle::trans::type_::Type;\n \n-use std::libc::{c_uint, c_ulonglong, c_char};\n+use libc::{c_uint, c_ulonglong, c_char};\n \n pub fn terminate(cx: &Block, _: &str) {\n     debug!(\"terminate({})\", cx.to_str());"}, {"sha": "b7a18a275cab604d08b5fbaad183f21b82a49b53", "filename": "src/librustc/middle/trans/builder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuilder.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -19,9 +19,9 @@ use middle::trans::base;\n use middle::trans::common::*;\n use middle::trans::machine::llalign_of_pref;\n use middle::trans::type_::Type;\n-\n use collections::HashMap;\n-use std::libc::{c_uint, c_ulonglong, c_char};\n+use std::vec::Vec;\n+use libc::{c_uint, c_ulonglong, c_char};\n use syntax::codemap::Span;\n \n pub struct Builder<'a> {"}, {"sha": "395bc637aada086672c156641fa65d04a158ce2e", "filename": "src/librustc/middle/trans/cabi_mips.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_mips.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_mips.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_mips.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -10,7 +10,7 @@\n \n #![allow(non_uppercase_pattern_statics)]\n \n-use std::libc::c_uint;\n+use libc::c_uint;\n use std::cmp;\n use lib::llvm::{llvm, Integer, Pointer, Float, Double, Struct, Array};\n use lib::llvm::StructRetAttribute;"}, {"sha": "9008e9ed8dffd57817ee38bb08918bbe26970c53", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -31,9 +31,10 @@ use util::nodemap::NodeMap;\n \n use arena::TypedArena;\n use collections::HashMap;\n+use libc::{c_uint, c_longlong, c_ulonglong, c_char};\n use std::c_str::ToCStr;\n use std::cell::{Cell, RefCell};\n-use std::libc::{c_uint, c_longlong, c_ulonglong, c_char};\n+use std::vec::Vec;\n use syntax::ast::Ident;\n use syntax::ast;\n use syntax::ast_map::{PathElem, PathName};"}, {"sha": "13fb644eedb1c1182592dd0548a88c72d8fd8e8b", "filename": "src/librustc/middle/trans/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -33,9 +33,9 @@ use middle::ty;\n use util::ppaux::{Repr, ty_to_str};\n \n use std::c_str::ToCStr;\n-use std::libc::c_uint;\n use std::slice;\n use std::vec::Vec;\n+use libc::c_uint;\n use syntax::{ast, ast_util};\n \n pub fn const_lit(cx: &CrateContext, e: &ast::Expr, lit: ast::Lit)"}, {"sha": "f98a77eed65a004ce886ba8fcfd29c63f3bfd818", "filename": "src/librustc/middle/trans/context.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -27,7 +27,6 @@ use middle::ty;\n use util::sha2::Sha256;\n use util::nodemap::{NodeMap, NodeSet, DefIdMap};\n \n-use libc::c_uint;\n use std::cell::{Cell, RefCell};\n use std::c_str::ToCStr;\n use std::ptr;"}, {"sha": "103fae91e757f201ec6daa9cc7c94faf1e3dc731", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -145,7 +145,7 @@ use std::c_str::{CString, ToCStr};\n use std::cell::{Cell, RefCell};\n use collections::HashMap;\n use collections::HashSet;\n-use std::libc::{c_uint, c_ulonglong, c_longlong};\n+use libc::{c_uint, c_ulonglong, c_longlong};\n use std::ptr;\n use std::sync::atomics;\n use std::slice;"}, {"sha": "0a2bf60bf04e237116844da90fe724330d20741c", "filename": "src/librustc/middle/trans/foreign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -26,7 +26,7 @@ use middle::trans::type_of;\n use middle::ty::FnSig;\n use middle::ty;\n use std::cmp;\n-use std::libc::c_uint;\n+use libc::c_uint;\n use syntax::abi::{Cdecl, Aapcs, C, Win64, Abi};\n use syntax::abi::{RustIntrinsic, Rust, Stdcall, Fastcall, System};\n use syntax::codemap::Span;"}, {"sha": "957db7591994775b9f6eb71ccf286b3c8af28fe5", "filename": "src/librustc/middle/trans/glue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -38,7 +38,7 @@ use util::ppaux;\n use arena::TypedArena;\n use std::c_str::ToCStr;\n use std::cell::Cell;\n-use std::libc::c_uint;\n+use libc::c_uint;\n use syntax::ast;\n use syntax::parse::token;\n "}, {"sha": "f1f8a1abb2a620954dd3a54f43907bf0f9ae8cc6", "filename": "src/librustc/middle/trans/reflect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -26,7 +26,7 @@ use middle::ty;\n use util::ppaux::ty_to_str;\n \n use arena::TypedArena;\n-use std::libc::c_uint;\n+use libc::c_uint;\n use syntax::ast::DefId;\n use syntax::ast;\n use syntax::ast_map;"}, {"sha": "6f91ec53419e07943687099da8ba218e09799366", "filename": "src/librustc/middle/trans/type_.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -21,7 +21,7 @@ use syntax::abi::{X86, X86_64, Arm, Mips};\n use std::c_str::ToCStr;\n use std::cast;\n \n-use std::libc::{c_uint};\n+use libc::{c_uint};\n \n #[deriving(Clone, Eq, Show)]\n pub struct Type {"}, {"sha": "e627b859f4295d91a8c093480a4a4fc2467e9c2c", "filename": "src/librustc/middle/trans/value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibrustc%2Fmiddle%2Ftrans%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibrustc%2Fmiddle%2Ftrans%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fvalue.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -11,7 +11,7 @@\n use lib::llvm::{llvm, UseRef, ValueRef};\n use middle::trans::basic_block::BasicBlock;\n use middle::trans::common::Block;\n-use std::libc::c_uint;\n+use libc::c_uint;\n \n pub struct Value(pub ValueRef);\n "}, {"sha": "76341d21e9ac6395e421c87fdfddf849fd3f883d", "filename": "src/librustdoc/flock.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibrustdoc%2Fflock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibrustdoc%2Fflock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fflock.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -18,13 +18,14 @@\n \n pub use self::imp::Lock;\n \n+\n #[cfg(unix)]\n mod imp {\n-    use std::libc;\n+    use libc;\n \n     #[cfg(target_os = \"linux\")]\n     mod os {\n-        use std::libc;\n+        use libc;\n \n         pub struct flock {\n             pub l_type: libc::c_short,\n@@ -45,7 +46,7 @@ mod imp {\n \n     #[cfg(target_os = \"freebsd\")]\n     mod os {\n-        use std::libc;\n+        use libc;\n \n         pub struct flock {\n             pub l_start: libc::off_t,\n@@ -64,7 +65,7 @@ mod imp {\n \n     #[cfg(target_os = \"macos\")]\n     mod os {\n-        use std::libc;\n+        use libc;\n \n         pub struct flock {\n             pub l_start: libc::off_t,\n@@ -132,7 +133,7 @@ mod imp {\n \n #[cfg(windows)]\n mod imp {\n-    use std::libc;\n+    use libc;\n     use std::mem;\n     use std::os::win32::as_utf16_p;\n     use std::os;"}, {"sha": "8449d5ff1d8928b23d0514803c4662abddf7a89c", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -26,10 +26,10 @@\n \n #![allow(non_camel_case_types)]\n \n+use libc;\n use std::cast;\n use std::fmt;\n use std::io;\n-use std::libc;\n use std::local_data;\n use std::mem;\n use std::str;"}, {"sha": "7059d7fb8a373ad731cc98e8de481dc41a63f6a2", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -26,6 +26,7 @@ extern crate testing = \"test\";\n extern crate time;\n #[phase(syntax, link)]\n extern crate log;\n+extern crate libc;\n \n use std::local_data;\n use std::io;"}, {"sha": "7a23a3466da4011d3765939939b2184bc70e61fa", "filename": "src/librustuv/addrinfo.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibrustuv%2Faddrinfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibrustuv%2Faddrinfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Faddrinfo.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -10,8 +10,8 @@\n \n use ai = std::io::net::addrinfo;\n use std::cast;\n-use std::libc;\n-use std::libc::c_int;\n+use libc;\n+use libc::c_int;\n use std::ptr::null;\n use std::rt::task::BlockedTask;\n "}, {"sha": "c75f84de01e4462ffeb874d2ac8e644e47174781", "filename": "src/librustuv/async.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibrustuv%2Fasync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibrustuv%2Fasync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fasync.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use std::cast;\n-use std::libc::c_int;\n+use libc::c_int;\n use std::rt::rtio::{Callback, RemoteCallback};\n use std::unstable::sync::Exclusive;\n "}, {"sha": "acb7a8184dd0782da034d1281735a33d1c9a72ec", "filename": "src/librustuv/file.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibrustuv%2Ffile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibrustuv%2Ffile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Ffile.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -12,8 +12,8 @@ use std::c_str::CString;\n use std::c_str;\n use std::cast::transmute;\n use std::cast;\n-use std::libc::{c_int, c_char, c_void, size_t, ssize_t};\n-use std::libc;\n+use libc::{c_int, c_char, c_void, size_t, ssize_t};\n+use libc;\n use std::rt::task::BlockedTask;\n use std::io::{FileStat, IoError};\n use std::io;\n@@ -434,7 +434,7 @@ impl rtio::RtioFileStream for FileWatcher {\n         self.base_write(buf, offset as i64)\n     }\n     fn seek(&mut self, pos: i64, whence: io::SeekStyle) -> Result<u64, IoError> {\n-        use std::libc::{SEEK_SET, SEEK_CUR, SEEK_END};\n+        use libc::{SEEK_SET, SEEK_CUR, SEEK_END};\n         let whence = match whence {\n             io::SeekSet => SEEK_SET,\n             io::SeekCur => SEEK_CUR,\n@@ -443,7 +443,7 @@ impl rtio::RtioFileStream for FileWatcher {\n         self.seek_common(pos, whence)\n     }\n     fn tell(&self) -> Result<u64, IoError> {\n-        use std::libc::SEEK_CUR;\n+        use libc::SEEK_CUR;\n         // this is temporary\n         let self_ = unsafe { cast::transmute_mut(self) };\n         self_.seek_common(0, SEEK_CUR)\n@@ -465,8 +465,8 @@ impl rtio::RtioFileStream for FileWatcher {\n \n #[cfg(test)]\n mod test {\n-    use std::libc::c_int;\n-    use std::libc::{O_CREAT, O_RDWR, O_RDONLY, S_IWUSR, S_IRUSR};\n+    use libc::c_int;\n+    use libc::{O_CREAT, O_RDWR, O_RDONLY, S_IWUSR, S_IRUSR};\n     use std::io;\n     use std::str;\n     use std::slice;"}, {"sha": "0de6e479a8f7aacb54414f2e8d75c8ae137096d3", "filename": "src/librustuv/idle.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibrustuv%2Fidle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibrustuv%2Fidle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fidle.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use std::cast;\n-use std::libc::{c_int, c_void};\n+use libc::{c_int, c_void};\n \n use uvll;\n use super::{Loop, UvHandle};"}, {"sha": "8f5d4a725140aa53de1b5493e325365a747d05c1", "filename": "src/librustuv/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibrustuv%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibrustuv%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Flib.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -45,12 +45,13 @@ via `close` and `delete` methods.\n \n #[cfg(test)] extern crate green;\n #[cfg(test)] extern crate realrustuv = \"rustuv\";\n+extern crate libc;\n \n use std::cast;\n use std::fmt;\n use std::io::IoError;\n use std::io;\n-use std::libc::{c_int, c_void};\n+use libc::{c_int, c_void};\n use std::ptr::null;\n use std::ptr;\n use std::rt::local::Local;"}, {"sha": "df41adfafbece95382607dc298f661697d9f7077", "filename": "src/librustuv/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibrustuv%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibrustuv%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fmacros.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -29,7 +29,7 @@ macro_rules! uvdebug (\n \n pub fn dumb_println(args: &fmt::Arguments) {\n     use std::io;\n-    use std::libc;\n+    use libc;\n \n     struct Stderr;\n     impl io::Writer for Stderr {"}, {"sha": "4d4b62dddd4a0642cc986db228cb9bdb1f7c2e99", "filename": "src/librustuv/net.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibrustuv%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibrustuv%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fnet.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -11,8 +11,8 @@\n use std::cast;\n use std::io::IoError;\n use std::io::net::ip;\n-use std::libc::{size_t, ssize_t, c_int, c_void, c_uint};\n-use std::libc;\n+use libc::{size_t, ssize_t, c_int, c_void, c_uint};\n+use libc;\n use std::mem;\n use std::ptr;\n use std::rt::rtio;"}, {"sha": "dd11fb90a524894a2c4fd7cdd69c45e1f6e5402f", "filename": "src/librustuv/pipe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibrustuv%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibrustuv%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fpipe.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -10,7 +10,7 @@\n \n use std::c_str::CString;\n use std::io::IoError;\n-use std::libc;\n+use libc;\n use std::rt::rtio::{RtioPipe, RtioUnixListener, RtioUnixAcceptor};\n use std::rt::task::BlockedTask;\n "}, {"sha": "c0db66cb913fd1e6f7fa7df4d81529970ca821e7", "filename": "src/librustuv/process.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibrustuv%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibrustuv%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fprocess.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -10,8 +10,8 @@\n \n use std::io::IoError;\n use std::io::process;\n-use std::libc::c_int;\n-use std::libc;\n+use libc::c_int;\n+use libc;\n use std::ptr;\n use std::rt::rtio::RtioProcess;\n use std::rt::task::BlockedTask;"}, {"sha": "b6c7fbda8c836c2ba26417702741291c4c0b40ef", "filename": "src/librustuv/queue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibrustuv%2Fqueue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibrustuv%2Fqueue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fqueue.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -21,7 +21,7 @@\n #![allow(dead_code)]\n \n use std::cast;\n-use std::libc::{c_void, c_int};\n+use libc::{c_void, c_int};\n use std::rt::task::BlockedTask;\n use std::unstable::mutex::NativeMutex;\n use std::sync::arc::UnsafeArc;"}, {"sha": "c38b4fdd96faf8d1680fe9e83ba6e335ec76c8a2", "filename": "src/librustuv/signal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibrustuv%2Fsignal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibrustuv%2Fsignal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fsignal.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::libc::c_int;\n+use libc::c_int;\n use std::io::signal::Signum;\n use std::rt::rtio::RtioSignal;\n "}, {"sha": "1fb61c15b830b11addcd0ce15e6e6969287f3f42", "filename": "src/librustuv/stream.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibrustuv%2Fstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibrustuv%2Fstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fstream.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use std::cast;\n-use std::libc::{c_int, size_t, ssize_t};\n+use libc::{c_int, size_t, ssize_t};\n use std::ptr;\n use std::rt::task::BlockedTask;\n "}, {"sha": "3d323382ad5368abf2aca5a34ed94a0be9924ad4", "filename": "src/librustuv/timer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibrustuv%2Ftimer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibrustuv%2Ftimer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Ftimer.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::libc::c_int;\n+use libc::c_int;\n use std::mem;\n use std::rt::rtio::RtioTimer;\n use std::rt::task::BlockedTask;"}, {"sha": "95ecaa09a43ae473ddf3b2e49697f3b0dbf4e1ac", "filename": "src/librustuv/tty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibrustuv%2Ftty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibrustuv%2Ftty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Ftty.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use libc;\n use std::io::IoError;\n-use std::libc;\n use std::ptr;\n use std::rt::rtio::RtioTTY;\n "}, {"sha": "424849bbf0eab83d37da97c044628fabaff79a34", "filename": "src/librustuv/uvio.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibrustuv%2Fuvio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibrustuv%2Fuvio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fuvio.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -17,10 +17,10 @@ use std::io::signal::Signum;\n use std::io::{FileMode, FileAccess, Open, Append, Truncate, Read, Write,\n               ReadWrite, FileStat};\n use std::io;\n-use std::libc::c_int;\n-use std::libc::{O_CREAT, O_APPEND, O_TRUNC, O_RDWR, O_RDONLY, O_WRONLY, S_IRUSR,\n+use libc::c_int;\n+use libc::{O_CREAT, O_APPEND, O_TRUNC, O_RDWR, O_RDONLY, O_WRONLY, S_IRUSR,\n                 S_IWUSR};\n-use std::libc;\n+use libc;\n use std::path::Path;\n use std::rt::rtio;\n use std::rt::rtio::IoFactory;"}, {"sha": "04bc53004d04c1e8e4b2708b18418113bc69f817", "filename": "src/librustuv/uvll.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibrustuv%2Fuvll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibrustuv%2Fuvll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fuvll.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -29,13 +29,13 @@\n \n #![allow(non_camel_case_types)] // C types\n \n-use std::libc::{size_t, c_int, c_uint, c_void, c_char, c_double};\n-use std::libc::{ssize_t, sockaddr, free, addrinfo};\n-use std::libc;\n+use libc::{size_t, c_int, c_uint, c_void, c_char, c_double};\n+use libc::{ssize_t, sockaddr, free, addrinfo};\n+use libc;\n use std::rt::global_heap::malloc_raw;\n \n #[cfg(test)]\n-use std::libc::uintptr_t;\n+use libc::uintptr_t;\n \n pub use self::errors::{EACCES, ECONNREFUSED, ECONNRESET, EPIPE, ECONNABORTED,\n                        ECANCELED, EBADF, ENOTCONN, ENOENT, EADDRNOTAVAIL};\n@@ -49,7 +49,7 @@ pub static UNKNOWN: c_int = -4094;\n \n #[cfg(windows)]\n pub mod errors {\n-    use std::libc::c_int;\n+    use libc::c_int;\n \n     pub static EACCES: c_int = -4092;\n     pub static ECONNREFUSED: c_int = -4078;\n@@ -64,8 +64,8 @@ pub mod errors {\n }\n #[cfg(not(windows))]\n pub mod errors {\n-    use std::libc;\n-    use std::libc::c_int;\n+    use libc;\n+    use libc::c_int;\n \n     pub static EACCES: c_int = -libc::EACCES;\n     pub static ECONNREFUSED: c_int = -libc::ECONNREFUSED;"}, {"sha": "6acf0eb0cee596168e2cfbbeecf5a03f5ec56e57", "filename": "src/libstd/c_str.rs", "status": "modified", "additions": 24, "deletions": 19, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibstd%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibstd%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fc_str.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -39,25 +39,28 @@ unnecessary amounts of allocations.\n An example of creating and using a C string would be:\n \n ```rust\n-use std::libc;\n+extern crate libc;\n+\n extern {\n     fn puts(s: *libc::c_char);\n }\n \n-let my_string = \"Hello, world!\";\n-\n-// Allocate the C string with an explicit local that owns the string. The\n-// `c_buffer` pointer will be deallocated when `my_c_string` goes out of scope.\n-let my_c_string = my_string.to_c_str();\n-my_c_string.with_ref(|c_buffer| {\n-    unsafe { puts(c_buffer); }\n-});\n-\n-// Don't save off the allocation of the C string, the `c_buffer` will be\n-// deallocated when this block returns!\n-my_string.with_c_str(|c_buffer| {\n-    unsafe { puts(c_buffer); }\n-});\n+fn main() {\n+    let my_string = \"Hello, world!\";\n+\n+    // Allocate the C string with an explicit local that owns the string. The\n+    // `c_buffer` pointer will be deallocated when `my_c_string` goes out of scope.\n+    let my_c_string = my_string.to_c_str();\n+    my_c_string.with_ref(|c_buffer| {\n+        unsafe { puts(c_buffer); }\n+    });\n+\n+    // Don't save off the allocation of the C string, the `c_buffer` will be\n+    // deallocated when this block returns!\n+    my_string.with_c_str(|c_buffer| {\n+        unsafe { puts(c_buffer); }\n+    });\n+}\n  ```\n \n */\n@@ -266,11 +269,13 @@ pub trait ToCStr {\n     /// # Example\n     ///\n     /// ```rust\n-    /// use std::libc;\n+    /// extern crate libc;\n     ///\n-    /// let s = \"PATH\".with_c_str(|path| unsafe {\n-    ///     libc::getenv(path)\n-    /// });\n+    /// fn main() {\n+    ///     let s = \"PATH\".with_c_str(|path| unsafe {\n+    ///         libc::getenv(path)\n+    ///     });\n+    /// }\n     /// ```\n     ///\n     /// # Failure"}, {"sha": "6eff453b60dba756a01815549dfdbc2038278d24", "filename": "src/libstd/io/pipe.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibstd%2Fio%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibstd%2Fio%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fpipe.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -38,11 +38,14 @@ impl PipeStream {\n     ///\n     /// ```rust\n     /// # #[allow(unused_must_use)];\n-    /// use std::libc;\n+    /// extern crate libc;\n+    ///\n     /// use std::io::pipe::PipeStream;\n     ///\n-    /// let mut pipe = PipeStream::open(libc::STDERR_FILENO);\n-    /// pipe.write(bytes!(\"Hello, stderr!\"));\n+    /// fn main() {\n+    ///     let mut pipe = PipeStream::open(libc::STDERR_FILENO);\n+    ///     pipe.write(bytes!(\"Hello, stderr!\"));\n+    /// }\n     /// ```\n     pub fn open(fd: libc::c_int) -> IoResult<PipeStream> {\n         LocalIo::maybe_raise(|io| {"}, {"sha": "a16113cb48fce25bd7d134b47a7801a83a28fcb6", "filename": "src/libstd/os.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -932,8 +932,9 @@ pub fn page_size() -> uint {\n /// Returns the page size of the current architecture in bytes.\n #[cfg(windows)]\n pub fn page_size() -> uint {\n+    use mem;\n     unsafe {\n-        let mut info = libc::SYSTEM_INFO::new();\n+        let mut info = mem::uninit();\n         libc::GetSystemInfo(&mut info);\n \n         return info.dwPageSize as uint;\n@@ -1250,8 +1251,9 @@ impl MemoryMap {\n     /// Granularity of MapAddr() and MapOffset() parameter values.\n     /// This may be greater than the value returned by page_size().\n     pub fn granularity() -> uint {\n+        use mem;\n         unsafe {\n-            let mut info = libc::SYSTEM_INFO::new();\n+            let mut info = mem::uninit();\n             libc::GetSystemInfo(&mut info);\n \n             return info.dwAllocationGranularity as uint;"}, {"sha": "943ae16b48fb92e57f73ef695edf8a651fc949cc", "filename": "src/libsyntax/diagnostic.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibsyntax%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibsyntax%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+extern crate libc;\n+\n use codemap::{Pos, Span};\n use codemap;\n "}, {"sha": "23ffb7813ba2d99e830ce668b7fb512c2e99a0da", "filename": "src/libtime/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibtime%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Flibtime%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtime%2Flib.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -20,9 +20,9 @@\n \n #[cfg(test)] #[phase(syntax, link)] extern crate log;\n extern crate serialize;\n+extern crate libc;\n \n use std::io::BufReader;\n-use std::libc;\n use std::num;\n use std::str;\n \n@@ -42,7 +42,7 @@ mod rustrt {\n \n #[cfg(unix, not(target_os = \"macos\"))]\n mod imp {\n-    use std::libc::{c_int, timespec};\n+    use libc::{c_int, timespec};\n \n     // Apparently android provides this in some other library?\n     #[cfg(not(target_os = \"android\"))]\n@@ -56,7 +56,7 @@ mod imp {\n }\n #[cfg(target_os = \"macos\")]\n mod imp {\n-    use std::libc::{timeval, timezone, c_int, mach_timebase_info};\n+    use libc::{timeval, timezone, c_int, mach_timebase_info};\n \n     extern {\n         pub fn gettimeofday(tp: *mut timeval, tzp: *mut timezone) -> c_int;\n@@ -1076,7 +1076,7 @@ mod tests {\n \n     #[cfg(windows)]\n     fn set_time_zone() {\n-        use std::libc;\n+        use libc;\n         // Windows crt doesn't see any environment variable set by\n         // `SetEnvironmentVariable`, which `os::setenv` internally uses.\n         // It is why we use `putenv` here."}, {"sha": "fe4a397b786afc21c05f1228b33e8dad33e48792", "filename": "src/test/auxiliary/anon-extern-mod-cross-crate-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Ftest%2Fauxiliary%2Fanon-extern-mod-cross-crate-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Ftest%2Fauxiliary%2Fanon-extern-mod-cross-crate-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fanon-extern-mod-cross-crate-1.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -10,7 +10,7 @@\n \n #[crate_id=\"anonexternmod#0.1\"];\n \n-use std::libc;\n+extern crate libc;\n \n #[link(name=\"rustrt\")]\n extern {"}, {"sha": "7185ac413c5d119e1521007f7888975924292978", "filename": "src/test/auxiliary/extern-crosscrate-source.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Ftest%2Fauxiliary%2Fextern-crosscrate-source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Ftest%2Fauxiliary%2Fextern-crosscrate-source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fextern-crosscrate-source.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -11,10 +11,10 @@\n #[crate_id=\"externcallback#0.1\"];\n #[crate_type = \"lib\"];\n \n-use std::libc;\n+extern crate libc;\n \n pub mod rustrt {\n-    use std::libc;\n+    extern crate libc;\n \n     #[link(name = \"rustrt\")]\n     extern {"}, {"sha": "396e136f6f030bfa985fba28b6c60251ea66c537", "filename": "src/test/auxiliary/foreign_lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Ftest%2Fauxiliary%2Fforeign_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Ftest%2Fauxiliary%2Fforeign_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fforeign_lib.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -11,7 +11,7 @@\n #[crate_id=\"foreign_lib\"];\n \n pub mod rustrt {\n-    use std::libc;\n+    extern crate libc;\n \n     #[link(name = \"rustrt\")]\n     extern {"}, {"sha": "9bb47fcfad3b40b0047003367ff6e0c51735b34b", "filename": "src/test/auxiliary/issue-3012-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Ftest%2Fauxiliary%2Fissue-3012-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Ftest%2Fauxiliary%2Fissue-3012-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-3012-1.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -12,7 +12,7 @@\n #[crate_type = \"lib\"];\n \n pub mod socket {\n-    use std::libc;\n+    extern crate libc;\n \n     pub struct socket_handle {\n         sockfd: libc::c_int,"}, {"sha": "0f898ae83859f1dbf42993d3b3cb5df764ecd9e5", "filename": "src/test/auxiliary/issue_5844_aux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Ftest%2Fauxiliary%2Fissue_5844_aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Ftest%2Fauxiliary%2Fissue_5844_aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue_5844_aux.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::libc;\n+extern crate libc;\n \n extern \"C\" {\n     pub fn rand() -> libc::c_int;"}, {"sha": "df747618696087bca17f937437f87654afc5b140", "filename": "src/test/compile-fail/attrs-after-extern-mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Ftest%2Fcompile-fail%2Fattrs-after-extern-mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Ftest%2Fcompile-fail%2Fattrs-after-extern-mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fattrs-after-extern-mod.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -12,7 +12,7 @@\n // statics cannot. This ensures that there's some form of error if this is\n // attempted.\n \n-use std::libc;\n+extern crate libc;\n \n extern {\n     static mut rust_dbg_static_mut: libc::c_int;"}, {"sha": "3de0a0446d80d545e0a3f028f827794376e68e5b", "filename": "src/test/compile-fail/lint-ctypes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Ftest%2Fcompile-fail%2Flint-ctypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Ftest%2Fcompile-fail%2Flint-ctypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-ctypes.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -10,7 +10,7 @@\n \n #![deny(ctypes)]\n \n-use std::libc;\n+extern crate libc;\n \n extern {\n     pub fn bare_type1(size: int); //~ ERROR: found rust type"}, {"sha": "95c1d131b7b2d082bad29fd674ec289a61c9e360", "filename": "src/test/compile-fail/lint-dead-code-3.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Ftest%2Fcompile-fail%2Flint-dead-code-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Ftest%2Fcompile-fail%2Flint-dead-code-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-dead-code-3.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -14,6 +14,8 @@\n \n #![crate_type=\"lib\"]\n \n+extern crate libc;\n+\n struct Foo; //~ ERROR: code is never used\n impl Foo {\n     fn foo(&self) { //~ ERROR: code is never used\n@@ -46,7 +48,7 @@ pub fn pub_fn() {\n }\n \n mod blah {\n-    use std::libc::size_t;\n+    use libc::size_t;\n     // not warned because it's used in the parameter of `free` and return of\n     // `malloc` below, which are also used.\n     enum c_void {}"}, {"sha": "5025e2e509b116878c9e74472761b9b8c3b6520a", "filename": "src/test/compile-fail/non-copyable-void.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Ftest%2Fcompile-fail%2Fnon-copyable-void.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Ftest%2Fcompile-fail%2Fnon-copyable-void.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnon-copyable-void.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::libc;\n+extern crate libc;\n \n fn main() {\n     let x : *Vec<int> = &vec!(1,2,3);"}, {"sha": "0e44af19a7f627b597d605fdb65596b387ab1e63", "filename": "src/test/compile-fail/static-mut-foreign-requires-unsafe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Ftest%2Fcompile-fail%2Fstatic-mut-foreign-requires-unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Ftest%2Fcompile-fail%2Fstatic-mut-foreign-requires-unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstatic-mut-foreign-requires-unsafe.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::libc;\n+extern crate libc;\n \n extern {\n     static mut a: libc::c_int;"}, {"sha": "fbcad79ac46e7502fddc2aacd4408ab56b0b8897", "filename": "src/test/compile-fail/unsupported-cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Ftest%2Fcompile-fail%2Funsupported-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Ftest%2Fcompile-fail%2Funsupported-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsupported-cast.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -10,7 +10,7 @@\n \n // error-pattern:unsupported cast\n \n-use std::libc;\n+extern crate libc;\n \n fn main() {\n   println!(\"{:?}\", 1.0 as *libc::FILE); // Can't cast float to foreign."}, {"sha": "c11d269a89755e41351e8fe3d24f0f64c11cb55e", "filename": "src/test/run-fail/extern-fail.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Ftest%2Frun-fail%2Fextern-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Ftest%2Frun-fail%2Fextern-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fextern-fail.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -13,11 +13,11 @@\n // Testing that runtime failure doesn't cause callbacks to abort abnormally.\n // Instead the failure will be delivered after the callbacks return.\n \n-use std::libc;\n+extern crate libc;\n use std::task;\n \n mod rustrt {\n-    use std::libc;\n+    extern crate libc;\n \n     extern {\n         pub fn rust_dbg_call(cb: *u8, data: libc::uintptr_t)"}, {"sha": "671530425908ac3fd91a3ad71257ea2f88a1aef8", "filename": "src/test/run-fail/morestack2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Ftest%2Frun-fail%2Fmorestack2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Ftest%2Frun-fail%2Fmorestack2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmorestack2.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -16,11 +16,11 @@\n // See the hack in upcall_call_shim_on_c_stack where it messes\n // with the stack limit.\n \n-use std::libc;\n+extern crate libc;\n use std::task;\n \n mod rustrt {\n-    use std::libc;\n+    extern crate libc;\n \n     extern {\n         pub fn rust_get_argc() -> libc::c_int;"}, {"sha": "9ee1b85d85672503f0e5fb1bc7fe78d83c2970c4", "filename": "src/test/run-pass/anon-extern-mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Ftest%2Frun-pass%2Fanon-extern-mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Ftest%2Frun-pass%2Fanon-extern-mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fanon-extern-mod.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::libc;\n+extern crate libc;\n \n #[link(name = \"rustrt\")]\n extern {"}, {"sha": "89cbbc24475880479465b2ba19b3fb10429c2ef6", "filename": "src/test/run-pass/c-stack-as-value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Ftest%2Frun-pass%2Fc-stack-as-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Ftest%2Frun-pass%2Fc-stack-as-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fc-stack-as-value.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n mod rustrt {\n-    use std::libc;\n+    extern crate libc;\n \n     #[link(name = \"rustrt\")]\n     extern {"}, {"sha": "c02a24c3f0847c469023108accc9f2429f9ca121", "filename": "src/test/run-pass/c-stack-returning-int64.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Ftest%2Frun-pass%2Fc-stack-returning-int64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Ftest%2Frun-pass%2Fc-stack-returning-int64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fc-stack-returning-int64.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -8,8 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-mod libc {\n-    use std::libc::{c_char, c_long, c_longlong};\n+// ignore-fast doesn't like extern crate\n+\n+extern crate libc;\n+\n+mod mlibc {\n+    use libc::{c_char, c_long, c_longlong};\n \n     extern {\n         pub fn atol(x: *c_char) -> c_long;\n@@ -18,11 +22,11 @@ mod libc {\n }\n \n fn atol(s: ~str) -> int {\n-    s.with_c_str(|x| unsafe { libc::atol(x) as int })\n+    s.with_c_str(|x| unsafe { mlibc::atol(x) as int })\n }\n \n fn atoll(s: ~str) -> i64 {\n-    s.with_c_str(|x| unsafe { libc::atoll(x) as i64 })\n+    s.with_c_str(|x| unsafe { mlibc::atoll(x) as i64 })\n }\n \n pub fn main() {"}, {"sha": "7b17b578b82b793040201e8fc7acabd40ffcc5af", "filename": "src/test/run-pass/const-cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Ftest%2Frun-pass%2Fconst-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Ftest%2Frun-pass%2Fconst-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-cast.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::libc;\n+extern crate libc;\n \n extern fn foo() {}\n "}, {"sha": "10c1d474f1ae05e458a04bb25b341f4be6763dcb", "filename": "src/test/run-pass/core-run-destroy.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Ftest%2Frun-pass%2Fcore-run-destroy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Ftest%2Frun-pass%2Fcore-run-destroy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcore-run-destroy.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -17,6 +17,7 @@\n // instead of in std.\n \n #[feature(macro_rules)];\n+extern crate libc;\n \n extern crate native;\n extern crate green;\n@@ -34,7 +35,7 @@ macro_rules! iotest (\n             #[allow(unused_imports)];\n \n             use std::io::timer;\n-            use std::libc;\n+            use libc;\n             use std::str;\n             use std::io::process::{Process, ProcessOutput};\n             use native;\n@@ -87,7 +88,7 @@ iotest!(fn test_destroy_twice() {\n pub fn test_destroy_actually_kills(force: bool) {\n     use std::io::process::{Process, ProcessOutput, ExitStatus, ExitSignal};\n     use std::io::timer;\n-    use std::libc;\n+    use libc;\n     use std::str;\n \n     #[cfg(unix,not(target_os=\"android\"))]"}, {"sha": "84574fb6787d29fc53705ed81bc39db85b70f92b", "filename": "src/test/run-pass/extern-call-deep.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Ftest%2Frun-pass%2Fextern-call-deep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Ftest%2Frun-pass%2Fextern-call-deep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-call-deep.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -8,10 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::libc;\n+extern crate libc;\n \n mod rustrt {\n-    use std::libc;\n+    extern crate libc;\n \n     #[link(name = \"rustrt\")]\n     extern {"}, {"sha": "60b80356d9faa263e2b0228126e0d055e9bb55db", "filename": "src/test/run-pass/extern-call-deep2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Ftest%2Frun-pass%2Fextern-call-deep2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Ftest%2Frun-pass%2Fextern-call-deep2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-call-deep2.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -8,11 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::libc;\n+extern crate libc;\n use std::task;\n \n mod rustrt {\n-    use std::libc;\n+    extern crate libc;\n \n     #[link(name = \"rustrt\")]\n     extern {"}, {"sha": "391fdc616dc2e29014e3120d74b192f744789f8f", "filename": "src/test/run-pass/extern-call-indirect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Ftest%2Frun-pass%2Fextern-call-indirect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Ftest%2Frun-pass%2Fextern-call-indirect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-call-indirect.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -8,10 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::libc;\n+extern crate libc;\n \n mod rustrt {\n-    use std::libc;\n+    extern crate libc;\n \n     #[link(name = \"rustrt\")]\n     extern {"}, {"sha": "a1aa2adc4310aeecf0b5f6b555b583f57c68988b", "filename": "src/test/run-pass/extern-call-scrub.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Ftest%2Frun-pass%2Fextern-call-scrub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Ftest%2Frun-pass%2Fextern-call-scrub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-call-scrub.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -12,11 +12,11 @@\n // make sure the stack pointers are maintained properly in both\n // directions\n \n-use std::libc;\n+extern crate libc;\n use std::task;\n \n mod rustrt {\n-    use std::libc;\n+    extern crate libc;\n \n     #[link(name = \"rustrt\")]\n     extern {"}, {"sha": "26fc334026f4882cdd67f2c3a6c91d26a68c5aa9", "filename": "src/test/run-pass/extern-stress.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Ftest%2Frun-pass%2Fextern-stress.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Ftest%2Frun-pass%2Fextern-stress.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-stress.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -11,11 +11,11 @@\n // This creates a bunch of descheduling tasks that run concurrently\n // while holding onto C stacks\n \n-use std::libc;\n+extern crate libc;\n use std::task;\n \n mod rustrt {\n-    use std::libc;\n+    extern crate libc;\n \n     #[link(name = \"rustrt\")]\n     extern {"}, {"sha": "aec7ee4341241e432a2953513a2d8d2f94a8ccf8", "filename": "src/test/run-pass/extern-yield.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Ftest%2Frun-pass%2Fextern-yield.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Ftest%2Frun-pass%2Fextern-yield.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-yield.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -8,11 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::libc;\n+extern crate libc;\n use std::task;\n \n mod rustrt {\n-    use std::libc;\n+    extern crate libc;\n \n     #[link(name = \"rustrt\")]\n     extern {"}, {"sha": "147cfb16fa2fd3e3ab49ff43f2ebdde0a728503a", "filename": "src/test/run-pass/foreign-call-no-runtime.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Ftest%2Frun-pass%2Fforeign-call-no-runtime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Ftest%2Frun-pass%2Fforeign-call-no-runtime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-call-no-runtime.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -8,8 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+extern crate libc;\n+\n use std::cast;\n-use std::libc;\n use std::unstable::run_in_bare_thread;\n \n #[link(name = \"rustrt\")]"}, {"sha": "a36083e829319268e51d30cae2bc09a8b4ad55ba", "filename": "src/test/run-pass/foreign-dupe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Ftest%2Frun-pass%2Fforeign-dupe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Ftest%2Frun-pass%2Fforeign-dupe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-dupe.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -12,7 +12,7 @@\n // calling pin_task and that's having wierd side-effects.\n \n mod rustrt1 {\n-    use std::libc;\n+    extern crate libc;\n \n     #[link(name = \"rustrt\")]\n     extern {\n@@ -21,7 +21,7 @@ mod rustrt1 {\n }\n \n mod rustrt2 {\n-    use std::libc;\n+    extern crate libc;\n \n     #[link(name = \"rustrt\")]\n     extern {"}, {"sha": "e35aaaf7f76d8941c69f138af3749d8c15cf9879", "filename": "src/test/run-pass/foreign-fn-linkname.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Ftest%2Frun-pass%2Fforeign-fn-linkname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Ftest%2Frun-pass%2Fforeign-fn-linkname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-fn-linkname.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -8,8 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-mod libc {\n-    use std::libc::{c_char, size_t};\n+// ignore-fast doesn't like extern crate\n+\n+extern crate libc;\n+\n+mod mlibc {\n+    extern crate libc;\n+    use self::libc::{c_char, size_t};\n \n     extern {\n         #[link_name = \"strlen\"]\n@@ -21,7 +26,7 @@ fn strlen(str: ~str) -> uint {\n     // C string is terminated with a zero\n     str.with_c_str(|buf| {\n         unsafe {\n-            libc::my_strlen(buf) as uint\n+            mlibc::my_strlen(buf) as uint\n         }\n     })\n }"}, {"sha": "e1ed0b8ea3b0c0743ba2a5663c553f581f2b6b9e", "filename": "src/test/run-pass/foreign-mod-unused-const.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Ftest%2Frun-pass%2Fforeign-mod-unused-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Ftest%2Frun-pass%2Fforeign-mod-unused-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-mod-unused-const.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -8,8 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-fast doesn't like extern crate\n+\n+extern crate libc;\n+\n mod foo {\n-    use std::libc::c_int;\n+    use libc::c_int;\n \n     extern {\n         pub static errno: c_int;"}, {"sha": "0bf97a7d9b48c69dd38d5e2c66cbf6d5bbd8d06c", "filename": "src/test/run-pass/foreign-no-abi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Ftest%2Frun-pass%2Fforeign-no-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Ftest%2Frun-pass%2Fforeign-no-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-no-abi.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -11,7 +11,7 @@\n // ABI is cdecl by default\n \n mod rustrt {\n-    use std::libc;\n+    extern crate libc;\n \n     #[link(name = \"rustrt\")]\n     extern {"}, {"sha": "3c7e878c3189041ac7b3103ddde7978fbc3befc3", "filename": "src/test/run-pass/foreign2.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Ftest%2Frun-pass%2Fforeign2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Ftest%2Frun-pass%2Fforeign2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign2.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -8,6 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-fast doesn't like extern crate\n+\n+extern crate libc;\n+\n mod bar {\n     extern {}\n }\n@@ -16,8 +20,8 @@ mod zed {\n     extern {}\n }\n \n-mod libc {\n-    use std::libc::{c_int, c_void, size_t, ssize_t};\n+mod mlibc {\n+    use libc::{c_int, c_void, size_t, ssize_t};\n \n     extern {\n         pub fn write(fd: c_int, buf: *c_void, count: size_t) -> ssize_t;"}, {"sha": "3befa4e7fb43a3e6744483e413de912b87c5d39f", "filename": "src/test/run-pass/issue-1251.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Ftest%2Frun-pass%2Fissue-1251.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Ftest%2Frun-pass%2Fissue-1251.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-1251.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -11,7 +11,7 @@\n #[crate_id=\"rust_get_test_int\"];\n \n mod rustrt {\n-    use std::libc;\n+    extern crate libc;\n \n     extern {\n         pub fn rust_get_test_int() -> libc::intptr_t;"}, {"sha": "b6ff31269c7bdc42eea4b9652634bfc4cd60ca16", "filename": "src/test/run-pass/issue-2214.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Ftest%2Frun-pass%2Fissue-2214.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Ftest%2Frun-pass%2Fissue-2214.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2214.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -10,8 +10,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+extern crate libc;\n+\n use std::cast;\n-use std::libc::{c_double, c_int};\n+use libc::{c_double, c_int};\n \n fn to_c_int(v: &mut int) -> &mut c_int {\n     unsafe {\n@@ -26,7 +28,7 @@ fn lgamma(n: c_double, value: &mut int) -> c_double {\n }\n \n mod m {\n-    use std::libc::{c_double, c_int};\n+    use libc::{c_double, c_int};\n \n     #[link_name = \"m\"]\n     extern {"}, {"sha": "a301aa6baa4c49a29466b4db259ea247f5979639", "filename": "src/test/run-pass/issue-3012-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Ftest%2Frun-pass%2Fissue-3012-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Ftest%2Frun-pass%2Fissue-3012-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3012-2.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -14,9 +14,9 @@\n #[feature(managed_boxes)];\n \n extern crate socketlib;\n+extern crate libc;\n \n use socketlib::socket;\n-use std::libc;\n \n pub fn main() {\n     let fd: libc::c_int = 1 as libc::c_int;"}, {"sha": "5823c473caa4cab842fd703f49668508a2401b5f", "filename": "src/test/run-pass/issue-3656.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Ftest%2Frun-pass%2Fissue-3656.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Ftest%2Frun-pass%2Fissue-3656.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3656.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -13,7 +13,8 @@\n // Incorrect struct size computation in the FFI, because of not taking\n // the alignment of elements into account.\n \n-use std::libc::{c_uint, uint32_t, c_void};\n+extern crate libc;\n+use libc::{c_uint, uint32_t, c_void};\n \n struct KEYGEN {\n     hash_algorithm: [c_uint, ..2],"}, {"sha": "b23158522a308dc274ff7dbc634b094c46011ffa", "filename": "src/test/run-pass/issue-4735.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Ftest%2Frun-pass%2Fissue-4735.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Ftest%2Frun-pass%2Fissue-4735.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4735.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -8,9 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-fast doesn't like extern crate\n+\n+extern crate libc;\n \n use std::cast::transmute;\n-use std::libc::c_void;\n+use libc::c_void;\n \n struct NonCopyable(*c_void);\n "}, {"sha": "1bda73a16c9eb5c2bd75d469badac657bcd3a6f1", "filename": "src/test/run-pass/issue-5791.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Ftest%2Frun-pass%2Fissue-5791.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Ftest%2Frun-pass%2Fissue-5791.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5791.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::libc;\n+extern crate libc;\n \n extern {\n     #[link_name = \"malloc\"]"}, {"sha": "b9e174ee86b6794ad4eea2c3e450d475d4fc3249", "filename": "src/test/run-pass/item-attributes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Ftest%2Frun-pass%2Fitem-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Ftest%2Frun-pass%2Fitem-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fitem-attributes.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -157,7 +157,7 @@ mod test_other_forms {\n \n mod test_foreign_items {\n     pub mod rustrt {\n-        use std::libc;\n+        extern crate libc;\n \n         extern {\n             #[attr];"}, {"sha": "2194453aac29aded856ee6917f20de869c1d6aeb", "filename": "src/test/run-pass/lint-cstack.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Ftest%2Frun-pass%2Flint-cstack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Ftest%2Frun-pass%2Flint-cstack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flint-cstack.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::libc;\n+extern crate libc;\n \n extern {\n     fn rust_get_test_int() -> libc::intptr_t;"}, {"sha": "f1ba95b5efe90d26998327917f801e705906432e", "filename": "src/test/run-pass/morestack6.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Ftest%2Frun-pass%2Fmorestack6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Ftest%2Frun-pass%2Fmorestack6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmorestack6.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -18,7 +18,7 @@ extern crate rand;\n use std::task;\n \n mod rustrt {\n-    use std::libc;\n+    extern crate libc;\n \n     extern {\n         pub fn debug_get_stk_seg() -> *u8;"}, {"sha": "8631755f37fd9a7895ab5678957c2cda5f509eec", "filename": "src/test/run-pass/newtype-struct-with-dtor.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Ftest%2Frun-pass%2Fnewtype-struct-with-dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Ftest%2Frun-pass%2Fnewtype-struct-with-dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnewtype-struct-with-dtor.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -8,8 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::libc::c_int;\n-use std::libc;\n+// ignore-fast doesn't like extern crate\n+\n+extern crate libc;\n+use libc::c_int;\n \n pub struct Fd(c_int);\n "}, {"sha": "aa4e91320f755b7191aef46ab1f8cfdd9f192677", "filename": "src/test/run-pass/osx-frameworks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Ftest%2Frun-pass%2Fosx-frameworks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Ftest%2Frun-pass%2Fosx-frameworks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fosx-frameworks.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::libc;\n+extern crate libc;\n \n #[cfg(target_os = \"macos\")]\n #[link(name = \"CoreFoundation\", kind = \"framework\")]"}, {"sha": "45445ed84f9ed6d61d926b98d644ba0ce6e00a31", "filename": "src/test/run-pass/process-detach.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Ftest%2Frun-pass%2Fprocess-detach.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Ftest%2Frun-pass%2Fprocess-detach.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fprocess-detach.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -22,8 +22,8 @@\n \n extern crate green;\n extern crate rustuv;\n+extern crate libc;\n \n-use std::libc;\n use std::io::process;\n use std::io::signal::{Listener, Interrupt};\n "}, {"sha": "2c5245d5b38589bfa4b020aa12c11e2c60497595", "filename": "src/test/run-pass/regions-mock-tcx.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Ftest%2Frun-pass%2Fregions-mock-tcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Ftest%2Frun-pass%2Fregions-mock-tcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-mock-tcx.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -18,11 +18,11 @@\n \n extern crate arena;\n extern crate collections;\n+extern crate libc;\n \n use arena::Arena;\n use collections::HashMap;\n use std::cast;\n-use std::libc;\n use std::mem;\n \n type Type<'tcx> = &'tcx TypeStructure<'tcx>;"}, {"sha": "b0198d56e05a57b382299d1ab0204cb1a700221f", "filename": "src/test/run-pass/regions-mock-trans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Ftest%2Frun-pass%2Fregions-mock-trans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Ftest%2Frun-pass%2Fregions-mock-trans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-mock-trans.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+extern crate libc;\n use std::cast;\n-use std::libc;\n use std::mem;\n \n struct arena(());"}, {"sha": "2f059c3531d1e0f845e5dbc56387d7a02260e4a2", "filename": "src/test/run-pass/rename-directory.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Ftest%2Frun-pass%2Frename-directory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Ftest%2Frun-pass%2Frename-directory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frename-directory.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -13,9 +13,10 @@\n \n // ignore-fast\n \n+extern crate libc;\n+\n use std::io::TempDir;\n use std::os;\n-use std::libc;\n use std::io;\n use std::io::fs;\n "}, {"sha": "4c88caa1d2c198d24d7ec8080537a377b22a3e4b", "filename": "src/test/run-pass/static-mut-foreign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Ftest%2Frun-pass%2Fstatic-mut-foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Ftest%2Frun-pass%2Fstatic-mut-foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstatic-mut-foreign.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -12,7 +12,7 @@\n // statics cannot. This ensures that there's some form of error if this is\n // attempted.\n \n-use std::libc;\n+extern crate libc;\n \n #[link(name = \"rustrt\")]\n extern {"}, {"sha": "b87535713a76d54903d758c606fbd3143630a499", "filename": "src/test/run-pass/supported-cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Ftest%2Frun-pass%2Fsupported-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Ftest%2Frun-pass%2Fsupported-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsupported-cast.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::libc;\n+extern crate libc;\n \n pub fn main() {\n   let f = 1 as *libc::FILE;"}, {"sha": "73a24ee43e688004e61bd9c9a1eaed444438f40f", "filename": "src/test/run-pass/tcp-stress.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Ftest%2Frun-pass%2Ftcp-stress.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Ftest%2Frun-pass%2Ftcp-stress.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftcp-stress.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -16,8 +16,8 @@\n #[feature(phase)];\n #[phase(syntax, link)]\n extern crate log;\n+extern crate libc;\n \n-use std::libc;\n use std::io::net::ip::{Ipv4Addr, SocketAddr};\n use std::io::net::tcp::{TcpListener, TcpStream};\n use std::io::{Acceptor, Listener};"}, {"sha": "903b76a29ceabb01d9faac6a04d2da64fa7e80b0", "filename": "src/test/run-pass/variadic-ffi.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Ftest%2Frun-pass%2Fvariadic-ffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0459ee77d0c764cc27950465cb19053e1456cc95/src%2Ftest%2Frun-pass%2Fvariadic-ffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvariadic-ffi.rs?ref=0459ee77d0c764cc27950465cb19053e1456cc95", "patch": "@@ -8,8 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+extern crate libc;\n use std::c_str::CString;\n-use std::libc::{c_char, c_int};\n+use libc::{c_char, c_int};\n+\n+// ignore-fast doesn't like extern crate\n \n extern {\n     fn sprintf(s: *mut c_char, format: *c_char, ...) -> c_int;"}]}