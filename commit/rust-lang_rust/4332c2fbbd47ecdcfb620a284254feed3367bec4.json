{"sha": "4332c2fbbd47ecdcfb620a284254feed3367bec4", "node_id": "C_kwDOAAsO6NoAKDQzMzJjMmZiYmQ0N2VjZGNmYjYyMGEyODQyNTRmZWVkMzM2N2JlYzQ", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-05-27T09:18:11Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-05-27T09:18:11Z"}, "message": "Update tests on aarch64", "tree": {"sha": "cf2ee9a9fbf775b6ebdae164bba1dc41606e5275", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf2ee9a9fbf775b6ebdae164bba1dc41606e5275"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4332c2fbbd47ecdcfb620a284254feed3367bec4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4332c2fbbd47ecdcfb620a284254feed3367bec4", "html_url": "https://github.com/rust-lang/rust/commit/4332c2fbbd47ecdcfb620a284254feed3367bec4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4332c2fbbd47ecdcfb620a284254feed3367bec4/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ba8da6aae5c0422b022b248799eb42244fae468", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ba8da6aae5c0422b022b248799eb42244fae468", "html_url": "https://github.com/rust-lang/rust/commit/6ba8da6aae5c0422b022b248799eb42244fae468"}], "stats": {"total": 310, "additions": 183, "deletions": 127}, "files": [{"sha": "2b6a9b71cd506390b41464288f84f165b3b6c9db", "filename": "src/test/ui/asm/aarch64/bad-reg.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4332c2fbbd47ecdcfb620a284254feed3367bec4/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fbad-reg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4332c2fbbd47ecdcfb620a284254feed3367bec4/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fbad-reg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fbad-reg.rs?ref=4332c2fbbd47ecdcfb620a284254feed3367bec4", "patch": "@@ -36,9 +36,11 @@ fn main() {\n \n         asm!(\"\", in(\"p0\") foo);\n         //~^ ERROR register class `preg` can only be used as a clobber, not as an input or output\n+        //~| ERROR type `i32` cannot be used with this register class\n         asm!(\"\", out(\"p0\") _);\n         asm!(\"{}\", in(preg) foo);\n         //~^ ERROR register class `preg` can only be used as a clobber, not as an input or output\n+        //~| ERROR type `i32` cannot be used with this register class\n         asm!(\"{}\", out(preg) _);\n         //~^ ERROR register class `preg` can only be used as a clobber, not as an input or output\n "}, {"sha": "0ba627dac309fc8e44534a91082cbf50de1c809b", "filename": "src/test/ui/asm/aarch64/bad-reg.stderr", "status": "modified", "additions": 25, "deletions": 9, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/4332c2fbbd47ecdcfb620a284254feed3367bec4/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fbad-reg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4332c2fbbd47ecdcfb620a284254feed3367bec4/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fbad-reg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fbad-reg.stderr?ref=4332c2fbbd47ecdcfb620a284254feed3367bec4", "patch": "@@ -87,60 +87,76 @@ LL |         asm!(\"\", in(\"p0\") foo);\n    |                  ^^^^^^^^^^^^\n \n error: register class `preg` can only be used as a clobber, not as an input or output\n-  --> $DIR/bad-reg.rs:40:20\n+  --> $DIR/bad-reg.rs:41:20\n    |\n LL |         asm!(\"{}\", in(preg) foo);\n    |                    ^^^^^^^^^^^^\n \n error: register class `preg` can only be used as a clobber, not as an input or output\n-  --> $DIR/bad-reg.rs:42:20\n+  --> $DIR/bad-reg.rs:44:20\n    |\n LL |         asm!(\"{}\", out(preg) _);\n    |                    ^^^^^^^^^^^\n \n error: register `x0` conflicts with register `x0`\n-  --> $DIR/bad-reg.rs:48:32\n+  --> $DIR/bad-reg.rs:50:32\n    |\n LL |         asm!(\"\", in(\"x0\") foo, in(\"w0\") bar);\n    |                  ------------  ^^^^^^^^^^^^ register `x0`\n    |                  |\n    |                  register `x0`\n \n error: register `x0` conflicts with register `x0`\n-  --> $DIR/bad-reg.rs:50:32\n+  --> $DIR/bad-reg.rs:52:32\n    |\n LL |         asm!(\"\", in(\"x0\") foo, out(\"x0\") bar);\n    |                  ------------  ^^^^^^^^^^^^^ register `x0`\n    |                  |\n    |                  register `x0`\n    |\n help: use `lateout` instead of `out` to avoid conflict\n-  --> $DIR/bad-reg.rs:50:18\n+  --> $DIR/bad-reg.rs:52:18\n    |\n LL |         asm!(\"\", in(\"x0\") foo, out(\"x0\") bar);\n    |                  ^^^^^^^^^^^^\n \n error: register `v0` conflicts with register `v0`\n-  --> $DIR/bad-reg.rs:53:32\n+  --> $DIR/bad-reg.rs:55:32\n    |\n LL |         asm!(\"\", in(\"v0\") foo, in(\"q0\") bar);\n    |                  ------------  ^^^^^^^^^^^^ register `v0`\n    |                  |\n    |                  register `v0`\n \n error: register `v0` conflicts with register `v0`\n-  --> $DIR/bad-reg.rs:55:32\n+  --> $DIR/bad-reg.rs:57:32\n    |\n LL |         asm!(\"\", in(\"v0\") foo, out(\"q0\") bar);\n    |                  ------------  ^^^^^^^^^^^^^ register `v0`\n    |                  |\n    |                  register `v0`\n    |\n help: use `lateout` instead of `out` to avoid conflict\n-  --> $DIR/bad-reg.rs:55:18\n+  --> $DIR/bad-reg.rs:57:18\n    |\n LL |         asm!(\"\", in(\"v0\") foo, out(\"q0\") bar);\n    |                  ^^^^^^^^^^^^\n \n-error: aborting due to 18 previous errors\n+error: type `i32` cannot be used with this register class\n+  --> $DIR/bad-reg.rs:37:27\n+   |\n+LL |         asm!(\"\", in(\"p0\") foo);\n+   |                           ^^^\n+   |\n+   = note: register class `preg` supports these types: \n+\n+error: type `i32` cannot be used with this register class\n+  --> $DIR/bad-reg.rs:41:29\n+   |\n+LL |         asm!(\"{}\", in(preg) foo);\n+   |                             ^^^\n+   |\n+   = note: register class `preg` supports these types: \n+\n+error: aborting due to 20 previous errors\n "}, {"sha": "e4d29754556c80ccdf8ae412db3b8f2ae60e8d44", "filename": "src/test/ui/asm/aarch64/type-check-2-2.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/4332c2fbbd47ecdcfb620a284254feed3367bec4/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-2-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4332c2fbbd47ecdcfb620a284254feed3367bec4/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-2-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-2-2.rs?ref=4332c2fbbd47ecdcfb620a284254feed3367bec4", "patch": "@@ -0,0 +1,37 @@\n+// only-aarch64\n+\n+#![feature(repr_simd, never_type, asm_sym)]\n+\n+use std::arch::{asm, global_asm};\n+\n+#[repr(simd)]\n+#[derive(Clone, Copy)]\n+struct SimdType(f32, f32, f32, f32);\n+\n+#[repr(simd)]\n+struct SimdNonCopy(f32, f32, f32, f32);\n+\n+fn main() {\n+    unsafe {\n+        // Inputs must be initialized\n+\n+        let x: u64;\n+        asm!(\"{}\", in(reg) x);\n+        //~^ ERROR use of possibly-uninitialized variable: `x`\n+        let mut y: u64;\n+        asm!(\"{}\", inout(reg) y);\n+        //~^ ERROR use of possibly-uninitialized variable: `y`\n+        let _ = y;\n+\n+        // Outputs require mutable places\n+\n+        let v: Vec<u64> = vec![0, 1, 2];\n+        asm!(\"{}\", in(reg) v[0]);\n+        asm!(\"{}\", out(reg) v[0]);\n+        //~^ ERROR cannot borrow `v` as mutable, as it is not declared as mutable\n+        asm!(\"{}\", inout(reg) v[0]);\n+        //~^ ERROR cannot borrow `v` as mutable, as it is not declared as mutable\n+\n+        // Sym operands must point to a function or static\n+    }\n+}"}, {"sha": "37bbe394994e08c9e4d2dcd836b2f2d1bb24ad33", "filename": "src/test/ui/asm/aarch64/type-check-2-2.stderr", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/4332c2fbbd47ecdcfb620a284254feed3367bec4/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-2-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4332c2fbbd47ecdcfb620a284254feed3367bec4/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-2-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-2-2.stderr?ref=4332c2fbbd47ecdcfb620a284254feed3367bec4", "patch": "@@ -0,0 +1,34 @@\n+error[E0381]: use of possibly-uninitialized variable: `x`\n+  --> $DIR/type-check-2-2.rs:19:28\n+   |\n+LL |         asm!(\"{}\", in(reg) x);\n+   |                            ^ use of possibly-uninitialized `x`\n+\n+error[E0381]: use of possibly-uninitialized variable: `y`\n+  --> $DIR/type-check-2-2.rs:22:9\n+   |\n+LL |         asm!(\"{}\", inout(reg) y);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^ use of possibly-uninitialized `y`\n+\n+error[E0596]: cannot borrow `v` as mutable, as it is not declared as mutable\n+  --> $DIR/type-check-2-2.rs:30:29\n+   |\n+LL |         let v: Vec<u64> = vec![0, 1, 2];\n+   |             - help: consider changing this to be mutable: `mut v`\n+LL |         asm!(\"{}\", in(reg) v[0]);\n+LL |         asm!(\"{}\", out(reg) v[0]);\n+   |                             ^ cannot borrow as mutable\n+\n+error[E0596]: cannot borrow `v` as mutable, as it is not declared as mutable\n+  --> $DIR/type-check-2-2.rs:32:31\n+   |\n+LL |         let v: Vec<u64> = vec![0, 1, 2];\n+   |             - help: consider changing this to be mutable: `mut v`\n+...\n+LL |         asm!(\"{}\", inout(reg) v[0]);\n+   |                               ^ cannot borrow as mutable\n+\n+error: aborting due to 4 previous errors\n+\n+Some errors have detailed explanations: E0381, E0596.\n+For more information about an error, try `rustc --explain E0381`."}, {"sha": "fdafe63c7b07b51b2dfd77addcd0530153b1ee43", "filename": "src/test/ui/asm/aarch64/type-check-2.rs", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4332c2fbbd47ecdcfb620a284254feed3367bec4/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4332c2fbbd47ecdcfb620a284254feed3367bec4/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-2.rs?ref=4332c2fbbd47ecdcfb620a284254feed3367bec4", "patch": "@@ -15,23 +15,6 @@ fn main() {\n     unsafe {\n         // Inputs must be initialized\n \n-        let x: u64;\n-        asm!(\"{}\", in(reg) x);\n-        //~^ ERROR use of possibly-uninitialized variable: `x`\n-        let mut y: u64;\n-        asm!(\"{}\", inout(reg) y);\n-        //~^ ERROR use of possibly-uninitialized variable: `y`\n-        let _ = y;\n-\n-        // Outputs require mutable places\n-\n-        let v: Vec<u64> = vec![0, 1, 2];\n-        asm!(\"{}\", in(reg) v[0]);\n-        asm!(\"{}\", out(reg) v[0]);\n-        //~^ ERROR cannot borrow `v` as mutable, as it is not declared as mutable\n-        asm!(\"{}\", inout(reg) v[0]);\n-        //~^ ERROR cannot borrow `v` as mutable, as it is not declared as mutable\n-\n         // Sym operands must point to a function or static\n \n         const C: i32 = 0;"}, {"sha": "4b99652cd20bd0805e8644c1a063af4350e944b1", "filename": "src/test/ui/asm/aarch64/type-check-2.stderr", "status": "modified", "additions": 25, "deletions": 57, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/4332c2fbbd47ecdcfb620a284254feed3367bec4/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4332c2fbbd47ecdcfb620a284254feed3367bec4/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-2.stderr?ref=4332c2fbbd47ecdcfb620a284254feed3367bec4", "patch": "@@ -1,21 +1,37 @@\n+error: invalid `sym` operand\n+  --> $DIR/type-check-2.rs:75:19\n+   |\n+LL | global_asm!(\"{}\", sym C);\n+   |                   ^^^^^ is an `i32`\n+   |\n+   = help: `sym` operands must refer to either a function or a static\n+\n+error: invalid `sym` operand\n+  --> $DIR/type-check-2.rs:24:20\n+   |\n+LL |         asm!(\"{}\", sym C);\n+   |                    ^^^^^ is an `i32`\n+   |\n+   = help: `sym` operands must refer to either a function or a static\n+\n error: arguments for inline assembly must be copyable\n-  --> $DIR/type-check-2.rs:46:31\n+  --> $DIR/type-check-2.rs:29:31\n    |\n LL |         asm!(\"{:v}\", in(vreg) SimdNonCopy(0.0, 0.0, 0.0, 0.0));\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `SimdNonCopy` does not implement the Copy trait\n \n-error: cannot use value of type `[closure@$DIR/type-check-2.rs:58:28: 58:38]` for inline assembly\n-  --> $DIR/type-check-2.rs:58:28\n+error: cannot use value of type `[closure@$DIR/type-check-2.rs:41:28: 41:38]` for inline assembly\n+  --> $DIR/type-check-2.rs:41:28\n    |\n LL |         asm!(\"{}\", in(reg) |x: i32| x);\n    |                            ^^^^^^^^^^\n    |\n    = note: only integers, floats, SIMD vectors, pointers and function pointers can be used as arguments for inline assembly\n \n error: cannot use value of type `Vec<i32>` for inline assembly\n-  --> $DIR/type-check-2.rs:60:28\n+  --> $DIR/type-check-2.rs:43:28\n    |\n LL |         asm!(\"{}\", in(reg) vec![0]);\n    |                            ^^^^^^^\n@@ -24,84 +40,36 @@ LL |         asm!(\"{}\", in(reg) vec![0]);\n    = note: this error originates in the macro `vec` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: cannot use value of type `(i32, i32, i32)` for inline assembly\n-  --> $DIR/type-check-2.rs:62:28\n+  --> $DIR/type-check-2.rs:45:28\n    |\n LL |         asm!(\"{}\", in(reg) (1, 2, 3));\n    |                            ^^^^^^^^^\n    |\n    = note: only integers, floats, SIMD vectors, pointers and function pointers can be used as arguments for inline assembly\n \n error: cannot use value of type `[i32; 3]` for inline assembly\n-  --> $DIR/type-check-2.rs:64:28\n+  --> $DIR/type-check-2.rs:47:28\n    |\n LL |         asm!(\"{}\", in(reg) [1, 2, 3]);\n    |                            ^^^^^^^^^\n    |\n    = note: only integers, floats, SIMD vectors, pointers and function pointers can be used as arguments for inline assembly\n \n error: cannot use value of type `fn() {main}` for inline assembly\n-  --> $DIR/type-check-2.rs:72:31\n+  --> $DIR/type-check-2.rs:55:31\n    |\n LL |         asm!(\"{}\", inout(reg) f);\n    |                               ^\n    |\n    = note: only integers, floats, SIMD vectors, pointers and function pointers can be used as arguments for inline assembly\n \n error: cannot use value of type `&mut i32` for inline assembly\n-  --> $DIR/type-check-2.rs:75:31\n+  --> $DIR/type-check-2.rs:58:31\n    |\n LL |         asm!(\"{}\", inout(reg) r);\n    |                               ^\n    |\n    = note: only integers, floats, SIMD vectors, pointers and function pointers can be used as arguments for inline assembly\n \n-error: invalid `sym` operand\n-  --> $DIR/type-check-2.rs:41:20\n-   |\n-LL |         asm!(\"{}\", sym C);\n-   |                    ^^^^^ is an `i32`\n-   |\n-   = help: `sym` operands must refer to either a function or a static\n-\n-error: invalid `sym` operand\n-  --> $DIR/type-check-2.rs:92:19\n-   |\n-LL | global_asm!(\"{}\", sym C);\n-   |                   ^^^^^ is an `i32`\n-   |\n-   = help: `sym` operands must refer to either a function or a static\n-\n-error[E0381]: use of possibly-uninitialized variable: `x`\n-  --> $DIR/type-check-2.rs:19:28\n-   |\n-LL |         asm!(\"{}\", in(reg) x);\n-   |                            ^ use of possibly-uninitialized `x`\n-\n-error[E0381]: use of possibly-uninitialized variable: `y`\n-  --> $DIR/type-check-2.rs:22:9\n-   |\n-LL |         asm!(\"{}\", inout(reg) y);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^ use of possibly-uninitialized `y`\n-\n-error[E0596]: cannot borrow `v` as mutable, as it is not declared as mutable\n-  --> $DIR/type-check-2.rs:30:29\n-   |\n-LL |         let v: Vec<u64> = vec![0, 1, 2];\n-   |             - help: consider changing this to be mutable: `mut v`\n-LL |         asm!(\"{}\", in(reg) v[0]);\n-LL |         asm!(\"{}\", out(reg) v[0]);\n-   |                             ^ cannot borrow as mutable\n-\n-error[E0596]: cannot borrow `v` as mutable, as it is not declared as mutable\n-  --> $DIR/type-check-2.rs:32:31\n-   |\n-LL |         let v: Vec<u64> = vec![0, 1, 2];\n-   |             - help: consider changing this to be mutable: `mut v`\n-...\n-LL |         asm!(\"{}\", inout(reg) v[0]);\n-   |                               ^ cannot borrow as mutable\n-\n-error: aborting due to 13 previous errors\n+error: aborting due to 9 previous errors\n \n-Some errors have detailed explanations: E0381, E0596.\n-For more information about an error, try `rustc --explain E0381`."}, {"sha": "623f6593d79ba51b1a1a56d410c4266e8dd48dae", "filename": "src/test/ui/asm/aarch64/type-check-3.rs", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4332c2fbbd47ecdcfb620a284254feed3367bec4/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4332c2fbbd47ecdcfb620a284254feed3367bec4/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-3.rs?ref=4332c2fbbd47ecdcfb620a284254feed3367bec4", "patch": "@@ -95,21 +95,3 @@ fn main() {\n         asm!(\"{:x}\", inout(reg) main => val_u64);\n     }\n }\n-\n-// Constants must be... constant\n-\n-static S: i32 = 1;\n-const fn const_foo(x: i32) -> i32 {\n-    x\n-}\n-const fn const_bar<T>(x: T) -> T {\n-    x\n-}\n-global_asm!(\"{}\", const S);\n-//~^ ERROR constants cannot refer to statics\n-global_asm!(\"{}\", const const_foo(0));\n-global_asm!(\"{}\", const const_foo(S));\n-//~^ ERROR constants cannot refer to statics\n-global_asm!(\"{}\", const const_bar(0));\n-global_asm!(\"{}\", const const_bar(S));\n-//~^ ERROR constants cannot refer to statics"}, {"sha": "b320abdc01b721a1cea17ae89b34cf7cfe025430", "filename": "src/test/ui/asm/aarch64/type-check-3.stderr", "status": "modified", "additions": 1, "deletions": 26, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/4332c2fbbd47ecdcfb620a284254feed3367bec4/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4332c2fbbd47ecdcfb620a284254feed3367bec4/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-3.stderr?ref=4332c2fbbd47ecdcfb620a284254feed3367bec4", "patch": "@@ -143,30 +143,5 @@ LL |         asm!(\"{:x}\", inout(reg) main => val_u32);\n    |\n    = note: asm inout arguments must have the same type, unless they are both pointers or integers of the same size\n \n-error[E0013]: constants cannot refer to statics\n-  --> $DIR/type-check-3.rs:108:25\n-   |\n-LL | global_asm!(\"{}\", const S);\n-   |                         ^\n-   |\n-   = help: consider extracting the value of the `static` to a `const`, and referring to that\n-\n-error[E0013]: constants cannot refer to statics\n-  --> $DIR/type-check-3.rs:111:35\n-   |\n-LL | global_asm!(\"{}\", const const_foo(S));\n-   |                                   ^\n-   |\n-   = help: consider extracting the value of the `static` to a `const`, and referring to that\n-\n-error[E0013]: constants cannot refer to statics\n-  --> $DIR/type-check-3.rs:114:35\n-   |\n-LL | global_asm!(\"{}\", const const_bar(S));\n-   |                                   ^\n-   |\n-   = help: consider extracting the value of the `static` to a `const`, and referring to that\n-\n-error: aborting due to 9 previous errors; 10 warnings emitted\n+error: aborting due to 6 previous errors; 10 warnings emitted\n \n-For more information about this error, try `rustc --explain E0013`."}, {"sha": "bd23755c02316ee099600add3c46ca20b3cd35e7", "filename": "src/test/ui/asm/aarch64/type-check-4.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/4332c2fbbd47ecdcfb620a284254feed3367bec4/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4332c2fbbd47ecdcfb620a284254feed3367bec4/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-4.rs?ref=4332c2fbbd47ecdcfb620a284254feed3367bec4", "patch": "@@ -0,0 +1,32 @@\n+// only-aarch64\n+// compile-flags: -C target-feature=+neon\n+\n+#![feature(repr_simd, stdsimd, asm_const)]\n+\n+use std::arch::aarch64::float64x2_t;\n+use std::arch::{asm, global_asm};\n+\n+#[repr(simd)]\n+#[derive(Copy, Clone)]\n+struct Simd256bit(f64, f64, f64, f64);\n+\n+fn main() {\n+}\n+\n+// Constants must be... constant\n+\n+static S: i32 = 1;\n+const fn const_foo(x: i32) -> i32 {\n+    x\n+}\n+const fn const_bar<T>(x: T) -> T {\n+    x\n+}\n+global_asm!(\"{}\", const S);\n+//~^ ERROR constants cannot refer to statics\n+global_asm!(\"{}\", const const_foo(0));\n+global_asm!(\"{}\", const const_foo(S));\n+//~^ ERROR constants cannot refer to statics\n+global_asm!(\"{}\", const const_bar(0));\n+global_asm!(\"{}\", const const_bar(S));\n+//~^ ERROR constants cannot refer to statics"}, {"sha": "4837e647beae12be570edd4d61f3dea736ede9d5", "filename": "src/test/ui/asm/aarch64/type-check-4.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/4332c2fbbd47ecdcfb620a284254feed3367bec4/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4332c2fbbd47ecdcfb620a284254feed3367bec4/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-4.stderr?ref=4332c2fbbd47ecdcfb620a284254feed3367bec4", "patch": "@@ -0,0 +1,27 @@\n+error[E0013]: constants cannot refer to statics\n+  --> $DIR/type-check-4.rs:25:25\n+   |\n+LL | global_asm!(\"{}\", const S);\n+   |                         ^\n+   |\n+   = help: consider extracting the value of the `static` to a `const`, and referring to that\n+\n+error[E0013]: constants cannot refer to statics\n+  --> $DIR/type-check-4.rs:28:35\n+   |\n+LL | global_asm!(\"{}\", const const_foo(S));\n+   |                                   ^\n+   |\n+   = help: consider extracting the value of the `static` to a `const`, and referring to that\n+\n+error[E0013]: constants cannot refer to statics\n+  --> $DIR/type-check-4.rs:31:35\n+   |\n+LL | global_asm!(\"{}\", const const_bar(S));\n+   |                                   ^\n+   |\n+   = help: consider extracting the value of the `static` to a `const`, and referring to that\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0013`."}]}