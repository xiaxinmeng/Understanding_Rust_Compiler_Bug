{"sha": "b4dd765e6884820bb9b5c46d18215657abb7ef22", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0ZGQ3NjVlNjg4NDgyMGJiOWI1YzQ2ZDE4MjE1NjU3YWJiN2VmMjI=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-07-28T14:07:05Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-07-28T14:15:56Z"}, "message": "comments and code-cleanup in response to reviews.", "tree": {"sha": "231386b1562480b0dad57aab28bc6b9e112e5e38", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/231386b1562480b0dad57aab28bc6b9e112e5e38"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4dd765e6884820bb9b5c46d18215657abb7ef22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4dd765e6884820bb9b5c46d18215657abb7ef22", "html_url": "https://github.com/rust-lang/rust/commit/b4dd765e6884820bb9b5c46d18215657abb7ef22", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4dd765e6884820bb9b5c46d18215657abb7ef22/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22796c8bade7d44c4e28d1e48196065705a2de60", "url": "https://api.github.com/repos/rust-lang/rust/commits/22796c8bade7d44c4e28d1e48196065705a2de60", "html_url": "https://github.com/rust-lang/rust/commit/22796c8bade7d44c4e28d1e48196065705a2de60"}], "stats": {"total": 42, "additions": 38, "deletions": 4}, "files": [{"sha": "7d7fd111fe94c9dba05ec0e6c5dfcfe7bbfeb91a", "filename": "src/librustc_trans/trans/_match.rs", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b4dd765e6884820bb9b5c46d18215657abb7ef22/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4dd765e6884820bb9b5c46d18215657abb7ef22/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2F_match.rs?ref=b4dd765e6884820bb9b5c46d18215657abb7ef22", "patch": "@@ -952,9 +952,24 @@ fn insert_lllocals<'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n                         Lvalue::new(\"_match::insert_lllocals\"),\n                     TrByMoveIntoCopy(..) => {\n                         // match_input moves from the input into a\n-                        // separate stack slot; it must zero (at least\n-                        // until we track drop flags for a fragmented\n-                        // parent match input expression).\n+                        // separate stack slot.\n+                        //\n+                        // E.g. consider moving the value `D(A)` out\n+                        // of the tuple `(D(A), D(B))` and into the\n+                        // local variable `x` via the pattern `(x,_)`,\n+                        // leaving the remainder of the tuple `(_,\n+                        // D(B))` still to be dropped in the future.\n+                        //\n+                        // Thus, here we must must zero the place that\n+                        // we are moving *from*, because we do not yet\n+                        // track drop flags for a fragmented parent\n+                        // match input expression.\n+                        //\n+                        // Longer term we will be able to map the move\n+                        // into `(x, _)` up to the parent path that\n+                        // owns the whole tuple, and mark the\n+                        // corresponding stack-local drop-flag\n+                        // tracking the first component of the tuple.\n                         let hint_kind = HintKind::ZeroAndMaintain;\n                         Lvalue::new_with_hint(\"_match::insert_lllocals (match_input)\",\n                                               bcx, binding_info.id, hint_kind)"}, {"sha": "77ac43ac172bbd9bc75c89bb77a60eda7040bbc6", "filename": "src/librustc_trans/trans/datum.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b4dd765e6884820bb9b5c46d18215657abb7ef22/src%2Flibrustc_trans%2Ftrans%2Fdatum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4dd765e6884820bb9b5c46d18215657abb7ef22/src%2Flibrustc_trans%2Ftrans%2Fdatum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdatum.rs?ref=b4dd765e6884820bb9b5c46d18215657abb7ef22", "patch": "@@ -189,9 +189,27 @@ pub struct Rvalue {\n     pub mode: RvalueMode\n }\n \n+/// Classifies what action we should take when a value is moved away\n+/// with respect to its drop-flag.\n+///\n+/// Long term there will be no need for this classification: all flags\n+/// (which will be stored on the stack frame) will have the same\n+/// interpretation and maintenance code associated with them.\n #[derive(Copy, Clone, Debug)]\n pub enum HintKind {\n+    /// When the value is moved, set the drop-flag to \"dropped\"\n+    /// (i.e. \"zero the flag\", even when the specific representation\n+    /// is not literally 0) and when it is reinitialized, set the\n+    /// drop-flag back to \"initialized\".\n     ZeroAndMaintain,\n+\n+    /// When the value is moved, do not set the drop-flag to \"dropped\"\n+    /// However, continue to read the drop-flag in deciding whether to\n+    /// drop. (In essence, the path/fragment in question will never\n+    /// need to be dropped at the points where it is moved away by\n+    /// this code, but we are defending against the scenario where\n+    /// some *other* code could move away (or drop) the value and thus\n+    /// zero-the-flag, which is why we will still read from it.\n     DontZeroJustUse,\n }\n \n@@ -218,7 +236,8 @@ impl Lvalue { // Constructors for various Lvalues.\n                     DropFlagInfo::ZeroAndMaintain(id),\n                 HintKind::DontZeroJustUse if hint_available =>\n                     DropFlagInfo::DontZeroJustUse(id),\n-                _ => DropFlagInfo::None,\n+                _ =>\n+                    DropFlagInfo::None,\n             };\n             (Some(id), info)\n         };"}]}