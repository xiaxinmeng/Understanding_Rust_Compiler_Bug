{"sha": "ccce98535bd51687554be8a209b3a529ef84f7e1", "node_id": "C_kwDOAAsO6NoAKGNjY2U5ODUzNWJkNTE2ODc1NTRiZThhMjA5YjNhNTI5ZWY4NGY3ZTE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-26T21:35:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-26T21:35:53Z"}, "message": "Auto merge of #91246 - nnethercote:faster-layout-array, r=dtolnay\n\nFaster `Layout::array`\n\n`Layout::array` is called (indirectly) by `Vec::push()`, which is typically instantiated many times, and so making it smaller can help with compile times because less LLVM IR is generated.\n\nr? `@ghost`", "tree": {"sha": "4374bf59302b300f1afd111da543c262b8140c05", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4374bf59302b300f1afd111da543c262b8140c05"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ccce98535bd51687554be8a209b3a529ef84f7e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ccce98535bd51687554be8a209b3a529ef84f7e1", "html_url": "https://github.com/rust-lang/rust/commit/ccce98535bd51687554be8a209b3a529ef84f7e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ccce98535bd51687554be8a209b3a529ef84f7e1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d246f0c8d3063fea86abbb65a824362709541ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d246f0c8d3063fea86abbb65a824362709541ba", "html_url": "https://github.com/rust-lang/rust/commit/6d246f0c8d3063fea86abbb65a824362709541ba"}, {"sha": "dbfb91385f7e4c27a6a48ecc3f683e3295af8b49", "url": "https://api.github.com/repos/rust-lang/rust/commits/dbfb91385f7e4c27a6a48ecc3f683e3295af8b49", "html_url": "https://github.com/rust-lang/rust/commit/dbfb91385f7e4c27a6a48ecc3f683e3295af8b49"}], "stats": {"total": 102, "additions": 98, "deletions": 4}, "files": [{"sha": "ff322f0da97c6e069f62f2e9432e593011cd5e62", "filename": "library/alloc/src/raw_vec/tests.rs", "status": "modified", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/ccce98535bd51687554be8a209b3a529ef84f7e1/library%2Falloc%2Fsrc%2Fraw_vec%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccce98535bd51687554be8a209b3a529ef84f7e1/library%2Falloc%2Fsrc%2Fraw_vec%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fraw_vec%2Ftests.rs?ref=ccce98535bd51687554be8a209b3a529ef84f7e1", "patch": "@@ -77,3 +77,87 @@ fn reserve_does_not_overallocate() {\n         assert!(v.capacity() >= 12 + 12 / 2);\n     }\n }\n+\n+struct ZST;\n+\n+// A `RawVec` holding zero-sized elements should always look like this.\n+fn zst_sanity<T>(v: &RawVec<T>) {\n+    assert_eq!(v.capacity(), usize::MAX);\n+    assert_eq!(v.ptr(), core::ptr::Unique::<T>::dangling().as_ptr());\n+    assert_eq!(v.current_memory(), None);\n+}\n+\n+#[test]\n+fn zst() {\n+    let cap_err = Err(crate::collections::TryReserveErrorKind::CapacityOverflow.into());\n+\n+    assert_eq!(std::mem::size_of::<ZST>(), 0);\n+\n+    // All these different ways of creating the RawVec produce the same thing.\n+\n+    let v: RawVec<ZST> = RawVec::new();\n+    zst_sanity(&v);\n+\n+    let v: RawVec<ZST> = RawVec::with_capacity_in(100, Global);\n+    zst_sanity(&v);\n+\n+    let v: RawVec<ZST> = RawVec::with_capacity_in(100, Global);\n+    zst_sanity(&v);\n+\n+    let v: RawVec<ZST> = RawVec::allocate_in(0, AllocInit::Uninitialized, Global);\n+    zst_sanity(&v);\n+\n+    let v: RawVec<ZST> = RawVec::allocate_in(100, AllocInit::Uninitialized, Global);\n+    zst_sanity(&v);\n+\n+    let mut v: RawVec<ZST> = RawVec::allocate_in(usize::MAX, AllocInit::Uninitialized, Global);\n+    zst_sanity(&v);\n+\n+    // Check all these operations work as expected with zero-sized elements.\n+\n+    assert!(!v.needs_to_grow(100, usize::MAX - 100));\n+    assert!(v.needs_to_grow(101, usize::MAX - 100));\n+    zst_sanity(&v);\n+\n+    v.reserve(100, usize::MAX - 100);\n+    //v.reserve(101, usize::MAX - 100); // panics, in `zst_reserve_panic` below\n+    zst_sanity(&v);\n+\n+    v.reserve_exact(100, usize::MAX - 100);\n+    //v.reserve_exact(101, usize::MAX - 100); // panics, in `zst_reserve_exact_panic` below\n+    zst_sanity(&v);\n+\n+    assert_eq!(v.try_reserve(100, usize::MAX - 100), Ok(()));\n+    assert_eq!(v.try_reserve(101, usize::MAX - 100), cap_err);\n+    zst_sanity(&v);\n+\n+    assert_eq!(v.try_reserve_exact(100, usize::MAX - 100), Ok(()));\n+    assert_eq!(v.try_reserve_exact(101, usize::MAX - 100), cap_err);\n+    zst_sanity(&v);\n+\n+    assert_eq!(v.grow_amortized(100, usize::MAX - 100), cap_err);\n+    assert_eq!(v.grow_amortized(101, usize::MAX - 100), cap_err);\n+    zst_sanity(&v);\n+\n+    assert_eq!(v.grow_exact(100, usize::MAX - 100), cap_err);\n+    assert_eq!(v.grow_exact(101, usize::MAX - 100), cap_err);\n+    zst_sanity(&v);\n+}\n+\n+#[test]\n+#[should_panic(expected = \"capacity overflow\")]\n+fn zst_reserve_panic() {\n+    let mut v: RawVec<ZST> = RawVec::new();\n+    zst_sanity(&v);\n+\n+    v.reserve(101, usize::MAX - 100);\n+}\n+\n+#[test]\n+#[should_panic(expected = \"capacity overflow\")]\n+fn zst_reserve_exact_panic() {\n+    let mut v: RawVec<ZST> = RawVec::new();\n+    zst_sanity(&v);\n+\n+    v.reserve_exact(101, usize::MAX - 100);\n+}"}, {"sha": "9df0b5c55191591de62b572cedb21cb866eaf85a", "filename": "library/core/src/alloc/layout.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ccce98535bd51687554be8a209b3a529ef84f7e1/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccce98535bd51687554be8a209b3a529ef84f7e1/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs?ref=ccce98535bd51687554be8a209b3a529ef84f7e1", "patch": "@@ -281,7 +281,9 @@ impl Layout {\n         // > `usize::MAX`)\n         let new_size = self.size() + pad;\n \n-        Layout::from_size_align(new_size, self.align()).unwrap()\n+        // SAFETY: self.align is already known to be valid and new_size has been\n+        // padded already.\n+        unsafe { Layout::from_size_align_unchecked(new_size, self.align()) }\n     }\n \n     /// Creates a layout describing the record for `n` instances of\n@@ -403,9 +405,17 @@ impl Layout {\n     #[stable(feature = \"alloc_layout_manipulation\", since = \"1.44.0\")]\n     #[inline]\n     pub fn array<T>(n: usize) -> Result<Self, LayoutError> {\n-        let (layout, offset) = Layout::new::<T>().repeat(n)?;\n-        debug_assert_eq!(offset, mem::size_of::<T>());\n-        Ok(layout.pad_to_align())\n+        let array_size = mem::size_of::<T>().checked_mul(n).ok_or(LayoutError)?;\n+\n+        // SAFETY:\n+        // - Size: `array_size` cannot be too big because `size_of::<T>()` must\n+        //   be a multiple of `align_of::<T>()`. Therefore, `array_size`\n+        //   rounded up to the nearest multiple of `align_of::<T>()` is just\n+        //   `array_size`. And `array_size` cannot be too big because it was\n+        //   just checked by the `checked_mul()`.\n+        // - Alignment: `align_of::<T>()` will always give an acceptable\n+        //   (non-zero, power of two) alignment.\n+        Ok(unsafe { Layout::from_size_align_unchecked(array_size, mem::align_of::<T>()) })\n     }\n }\n "}]}