{"sha": "22b720a920612211d83f7176d7cf2f184c74d294", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyYjcyMGE5MjA2MTIyMTFkODNmNzE3NmQ3Y2YyZjE4NGM3NGQyOTQ=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-05-13T06:53:43Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-05-13T07:10:12Z"}, "message": "address more review comments", "tree": {"sha": "18801235b8eceefeec1a1a5c36f8ead482929301", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18801235b8eceefeec1a1a5c36f8ead482929301"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22b720a920612211d83f7176d7cf2f184c74d294", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22b720a920612211d83f7176d7cf2f184c74d294", "html_url": "https://github.com/rust-lang/rust/commit/22b720a920612211d83f7176d7cf2f184c74d294", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22b720a920612211d83f7176d7cf2f184c74d294/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96e1cf3b0693e5724797abd566bd4913be4f6d79", "url": "https://api.github.com/repos/rust-lang/rust/commits/96e1cf3b0693e5724797abd566bd4913be4f6d79", "html_url": "https://github.com/rust-lang/rust/commit/96e1cf3b0693e5724797abd566bd4913be4f6d79"}], "stats": {"total": 16, "additions": 9, "deletions": 7}, "files": [{"sha": "8fc032572c3d29477b246a64d37d5765195d075d", "filename": "src/librustc/plugin/registry.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22b720a920612211d83f7176d7cf2f184c74d294/src%2Flibrustc%2Fplugin%2Fregistry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22b720a920612211d83f7176d7cf2f184c74d294/src%2Flibrustc%2Fplugin%2Fregistry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fplugin%2Fregistry.rs?ref=22b720a920612211d83f7176d7cf2f184c74d294", "patch": "@@ -137,7 +137,7 @@ impl<'a> Registry<'a> {\n     }\n \n \n-    /// Register an attribute with an attribute type\n+    /// Register an attribute with an attribute type.\n     ///\n     /// Registered attributes will bypass the `custom_attribute` feature gate.\n     /// `Whitelisted` attributes will additionally not trigger the `unused_attribute`"}, {"sha": "8d8fbd5bf9a16e7fc8ef4b879e75e1333c02a863", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/22b720a920612211d83f7176d7cf2f184c74d294/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22b720a920612211d83f7176d7cf2f184c74d294/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=22b720a920612211d83f7176d7cf2f184c74d294", "patch": "@@ -643,11 +643,8 @@ impl LintPass for UnusedAttributes {\n \n         let plugin_attributes = cx.sess().plugin_attributes.borrow_mut();\n         for &(ref name, ty) in plugin_attributes.iter() {\n-            match ty {\n-                AttributeType::Whitelisted if attr.check_name(&*name) => {\n-                    break;\n-                },\n-                _ => ()\n+            if ty == AttributeType::Whitelisted && attr.check_name(&*name) {\n+                break;\n             }\n         }\n "}, {"sha": "495f152d315c37c06230cef79d7698c863ec54f7", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/22b720a920612211d83f7176d7cf2f184c74d294/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22b720a920612211d83f7176d7cf2f184c74d294/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=22b720a920612211d83f7176d7cf2f184c74d294", "patch": "@@ -389,6 +389,8 @@ impl<'a> Context<'a> {\n         for &(ref n, ref ty) in self.plugin_attributes.iter() {\n             if &*n == name {\n                 // Plugins can't gate attributes, so we don't check for it\n+                // unlike the code above; we only use this loop to\n+                // short-circuit to avoid the checks below\n                 debug!(\"check_attribute: {:?} is registered by a plugin, {:?}\", name, ty);\n                 return;\n             }\n@@ -403,7 +405,10 @@ impl<'a> Context<'a> {\n                               \"attributes of the form `#[derive_*]` are reserved \\\n                                for the compiler\");\n         } else {\n-            // Only do the custom attribute lint post-expansion\n+            // Only run the custom attribute lint during regular\n+            // feature gate checking. Macro gating runs\n+            // before the plugin attributes are registered\n+            // so we skip this then\n             if !is_macro {\n                 self.gate_feature(\"custom_attribute\", attr.span,\n                            &format!(\"The attribute `{}` is currently \\"}]}