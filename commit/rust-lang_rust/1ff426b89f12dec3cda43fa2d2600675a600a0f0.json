{"sha": "1ff426b89f12dec3cda43fa2d2600675a600a0f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmZjQyNmI4OWYxMmRlYzNjZGE0M2ZhMmQyNjAwNjc1YTYwMGEwZjA=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-07-09T00:00:21Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-07-09T00:00:21Z"}, "message": "rustc: Use interior vectors for the union-find in rustc", "tree": {"sha": "74e2eda6b22cffc00abe6802ed3c13c3444765c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/74e2eda6b22cffc00abe6802ed3c13c3444765c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ff426b89f12dec3cda43fa2d2600675a600a0f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ff426b89f12dec3cda43fa2d2600675a600a0f0", "html_url": "https://github.com/rust-lang/rust/commit/1ff426b89f12dec3cda43fa2d2600675a600a0f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ff426b89f12dec3cda43fa2d2600675a600a0f0/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b7984c25003f2fdde9f56e5d67c6195194549ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b7984c25003f2fdde9f56e5d67c6195194549ca", "html_url": "https://github.com/rust-lang/rust/commit/9b7984c25003f2fdde9f56e5d67c6195194549ca"}], "stats": {"total": 45, "additions": 24, "deletions": 21}, "files": [{"sha": "fc85cccd36dbfdb6997abeffaa026ac6f0e30708", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 24, "deletions": 20, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/1ff426b89f12dec3cda43fa2d2600675a600a0f0/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ff426b89f12dec3cda43fa2d2600675a600a0f0/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=1ff426b89f12dec3cda43fa2d2600675a600a0f0", "patch": "@@ -5,7 +5,7 @@ import std::str;\n import std::uint;\n import std::vec;\n import std::box;\n-import std::ufind;\n+import std::ufindivec;\n import std::map;\n import std::map::hashmap;\n import std::option;\n@@ -1989,31 +1989,31 @@ mod unify {\n \n     }\n     type var_bindings =\n-        rec(ufind::ufind sets, smallintmap::smallintmap[t] types);\n+        rec(ufindivec::ufind sets, smallintmap::smallintmap[t] types);\n \n     type ctxt = rec(@var_bindings vb, ty_ctxt tcx);\n \n     fn mk_var_bindings() -> @var_bindings {\n-        ret @rec(sets=ufind::make(), types=smallintmap::mk[t]());\n+        ret @rec(sets=ufindivec::make(), types=smallintmap::mk[t]());\n     }\n \n     // Unifies two sets.\n     fn union(&@ctxt cx, uint set_a, uint set_b) -> union_result {\n-        ufind::grow(cx.vb.sets, uint::max(set_a, set_b) + 1u);\n-        auto root_a = ufind::find(cx.vb.sets, set_a);\n-        auto root_b = ufind::find(cx.vb.sets, set_b);\n+        ufindivec::grow(cx.vb.sets, uint::max(set_a, set_b) + 1u);\n+        auto root_a = ufindivec::find(cx.vb.sets, set_a);\n+        auto root_b = ufindivec::find(cx.vb.sets, set_b);\n \n         auto replace_type = bind fn (&@ctxt cx, t t, uint set_a, uint set_b) {\n-            ufind::union(cx.vb.sets, set_a, set_b);\n-            let uint root_c = ufind::find(cx.vb.sets, set_a);\n+            ufindivec::union(cx.vb.sets, set_a, set_b);\n+            let uint root_c = ufindivec::find(cx.vb.sets, set_a);\n             smallintmap::insert[t](cx.vb.types, root_c, t);\n         } (_, _, set_a, set_b);\n \n         alt (smallintmap::find(cx.vb.types, root_a)) {\n             case (none) {\n                 alt (smallintmap::find(cx.vb.types, root_b)) {\n                     case (none) {\n-                        ufind::union(cx.vb.sets, set_a, set_b);\n+                        ufindivec::union(cx.vb.sets, set_a, set_b);\n                         ret unres_ok; }\n                     case (some(?t_b)) {\n                         replace_type(cx, t_b);\n@@ -2043,8 +2043,8 @@ mod unify {\n         }\n     }\n     fn record_var_binding(&@ctxt cx, int key, t typ) -> result {\n-        ufind::grow(cx.vb.sets, (key as uint) + 1u);\n-        auto root = ufind::find(cx.vb.sets, key as uint);\n+        ufindivec::grow(cx.vb.sets, (key as uint) + 1u);\n+        auto root = ufindivec::find(cx.vb.sets, key as uint);\n         auto result_type = typ;\n         alt (smallintmap::find[t](cx.vb.types, root)) {\n             case (some(?old_type)) {\n@@ -2229,10 +2229,10 @@ mod unify {\n        fixup_result {\n         alt (struct(tcx, typ)) {\n             case (ty_var(?vid)) {\n-                if (vid as uint >= ufind::set_count(vb.sets)) {\n+                if (vid as uint >= ufindivec::set_count(vb.sets)) {\n                     ret fix_err(vid);\n                 }\n-                auto root_id = ufind::find(vb.sets, vid as uint);\n+                auto root_id = ufindivec::find(vb.sets, vid as uint);\n                 alt (smallintmap::find[t](vb.types, root_id)) {\n                     case (none[t]) { ret fix_err(vid); }\n                     case (some[t](?rt)) { ret fix_ok(rt); }\n@@ -2644,11 +2644,13 @@ mod unify {\n     }\n     fn dump_var_bindings(ty_ctxt tcx, @var_bindings vb) {\n         auto i = 0u;\n-        while (i < vec::len[ufind::node](vb.sets.nodes)) {\n+        while (i < ivec::len[ufindivec::node](vb.sets.nodes)) {\n             auto sets = \"\";\n             auto j = 0u;\n-            while (j < vec::len[option::t[uint]](vb.sets.nodes)) {\n-                if (ufind::find(vb.sets, j) == i) { sets += #fmt(\" %u\", j); }\n+            while (j < ivec::len[option::t[uint]](vb.sets.nodes)) {\n+                if (ufindivec::find(vb.sets, j) == i) {\n+                    sets += #fmt(\" %u\", j);\n+                }\n                 j += 1u;\n             }\n             auto typespec;\n@@ -2667,11 +2669,11 @@ mod unify {\n     fn fixup_vars(ty_ctxt tcx, @var_bindings vb, t typ) -> fixup_result {\n         fn subst_vars(ty_ctxt tcx, @var_bindings vb,\n                       @mutable option::t[int] unresolved, int vid) -> t {\n-            if (vid as uint >= ufind::set_count(vb.sets)) {\n+            if (vid as uint >= ufindivec::set_count(vb.sets)) {\n                 *unresolved = some[int](vid);\n                 ret ty::mk_var(tcx, vid);\n             }\n-            auto root_id = ufind::find(vb.sets, vid as uint);\n+            auto root_id = ufindivec::find(vb.sets, vid as uint);\n             alt (smallintmap::find[t](vb.types, root_id)) {\n                 case (none[t]) {\n                     *unresolved = some[int](vid);\n@@ -2696,8 +2698,10 @@ mod unify {\n     }\n     fn resolve_type_var(&ty_ctxt tcx, &@var_bindings vb, int vid) ->\n        fixup_result {\n-        if (vid as uint >= ufind::set_count(vb.sets)) { ret fix_err(vid); }\n-        auto root_id = ufind::find(vb.sets, vid as uint);\n+        if (vid as uint >= ufindivec::set_count(vb.sets)) {\n+            ret fix_err(vid);\n+        }\n+        auto root_id = ufindivec::find(vb.sets, vid as uint);\n         alt (smallintmap::find[t](vb.types, root_id)) {\n             case (none[t]) { ret fix_err(vid); }\n             case (some[t](?rt)) { ret fixup_vars(tcx, vb, rt); }"}, {"sha": "3c16d466fe2418e5f5798e61dfc128009376b21d", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1ff426b89f12dec3cda43fa2d2600675a600a0f0/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ff426b89f12dec3cda43fa2d2600675a600a0f0/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=1ff426b89f12dec3cda43fa2d2600675a600a0f0", "patch": "@@ -36,7 +36,6 @@ import middle::ty::unify::fix_err;\n import std::int;\n import std::ivec;\n import std::str;\n-import std::ufind;\n import std::uint;\n import std::vec;\n import std::map;"}]}