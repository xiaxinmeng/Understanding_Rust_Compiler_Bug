{"sha": "2aae8020c71fec7ab5ba59c20fe0c127a06e0a64", "node_id": "C_kwDOAAsO6NoAKDJhYWU4MDIwYzcxZmVjN2FiNWJhNTljMjBmZTBjMTI3YTA2ZTBhNjQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-27T23:17:18Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-27T23:17:18Z"}, "message": "Auto merge of #97468 - matthiaskrgr:rollup-8cu0hqr, r=matthiaskrgr\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #95214 (Remove impossible panic note from `Vec::append`)\n - #97411 (Print stderr consistently)\n - #97453 (rename `TyKind` to `RegionKind` in comment in rustc_middle)\n - #97457 (Add regression test for #81899)\n - #97458 (Modify `derive(Debug)` to use `Self` in struct literal to avoid redundant error)\n - #97462 (Add more eslint rules)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "36bc69f114364113e9532b7ed1b496f71165bd71", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/36bc69f114364113e9532b7ed1b496f71165bd71"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2aae8020c71fec7ab5ba59c20fe0c127a06e0a64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2aae8020c71fec7ab5ba59c20fe0c127a06e0a64", "html_url": "https://github.com/rust-lang/rust/commit/2aae8020c71fec7ab5ba59c20fe0c127a06e0a64", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2aae8020c71fec7ab5ba59c20fe0c127a06e0a64/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ebbcbfc236ced21d5e6a92269edb704692ff26b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/ebbcbfc236ced21d5e6a92269edb704692ff26b8", "html_url": "https://github.com/rust-lang/rust/commit/ebbcbfc236ced21d5e6a92269edb704692ff26b8"}, {"sha": "b37b735038d56ce2b28ccde00b999d77dfab4741", "url": "https://api.github.com/repos/rust-lang/rust/commits/b37b735038d56ce2b28ccde00b999d77dfab4741", "html_url": "https://github.com/rust-lang/rust/commit/b37b735038d56ce2b28ccde00b999d77dfab4741"}], "stats": {"total": 156, "additions": 109, "deletions": 47}, "files": [{"sha": "53369afae278c33c5a80cc68aa79bd7e23b348b1", "filename": "compiler/rustc_builtin_macros/src/deriving/generic/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2aae8020c71fec7ab5ba59c20fe0c127a06e0a64/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2aae8020c71fec7ab5ba59c20fe0c127a06e0a64/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs?ref=2aae8020c71fec7ab5ba59c20fe0c127a06e0a64", "patch": "@@ -1039,7 +1039,9 @@ impl<'a> MethodDef<'a> {\n         let span = trait_.span;\n         let mut patterns = Vec::new();\n         for i in 0..self_args.len() {\n-            let struct_path = cx.path(span, vec![type_ident]);\n+            // We could use `type_ident` instead of `Self`, but in the case of a type parameter\n+            // shadowing the struct name, that causes a second, unnecessary E0578 error. #97343\n+            let struct_path = cx.path(span, vec![Ident::new(kw::SelfUpper, type_ident.span)]);\n             let (pat, ident_expr) = trait_.create_struct_pattern(\n                 cx,\n                 struct_path,"}, {"sha": "2dabc6963884104adcea996ecd02ede90d40d44e", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2aae8020c71fec7ab5ba59c20fe0c127a06e0a64/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2aae8020c71fec7ab5ba59c20fe0c127a06e0a64/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=2aae8020c71fec7ab5ba59c20fe0c127a06e0a64", "patch": "@@ -1469,7 +1469,7 @@ impl ParamConst {\n     }\n }\n \n-/// Use this rather than `TyKind`, whenever possible.\n+/// Use this rather than `RegionKind`, whenever possible.\n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, HashStable)]\n #[rustc_pass_by_value]\n pub struct Region<'tcx>(pub Interned<'tcx, RegionKind>);"}, {"sha": "d222fcb445f584eec0bdefcc9f05e7d83daf3178", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2aae8020c71fec7ab5ba59c20fe0c127a06e0a64/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2aae8020c71fec7ab5ba59c20fe0c127a06e0a64/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=2aae8020c71fec7ab5ba59c20fe0c127a06e0a64", "patch": "@@ -1771,7 +1771,7 @@ impl<T, A: Allocator> Vec<T, A> {\n     ///\n     /// # Panics\n     ///\n-    /// Panics if the number of elements in the vector overflows a `usize`.\n+    /// Panics if the new capacity exceeds `isize::MAX` bytes.\n     ///\n     /// # Examples\n     ///"}, {"sha": "b804cefd3fcde9f35bfaa69ed733f7f900e6911a", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2aae8020c71fec7ab5ba59c20fe0c127a06e0a64/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2aae8020c71fec7ab5ba59c20fe0c127a06e0a64/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=2aae8020c71fec7ab5ba59c20fe0c127a06e0a64", "patch": "@@ -227,7 +227,7 @@ impl StepDescription {\n \n     fn is_excluded(&self, builder: &Builder<'_>, pathset: &PathSet) -> bool {\n         if builder.config.exclude.iter().any(|e| pathset.has(&e.path, e.kind)) {\n-            eprintln!(\"Skipping {:?} because it is excluded\", pathset);\n+            println!(\"Skipping {:?} because it is excluded\", pathset);\n             return true;\n         }\n "}, {"sha": "b82c1505b249562f8015bb8802adb721480e9d55", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2aae8020c71fec7ab5ba59c20fe0c127a06e0a64/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2aae8020c71fec7ab5ba59c20fe0c127a06e0a64/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=2aae8020c71fec7ab5ba59c20fe0c127a06e0a64", "patch": "@@ -765,7 +765,7 @@ impl Config {\n             {\n                 Ok(table) => table,\n                 Err(err) => {\n-                    println!(\"failed to parse TOML configuration '{}': {}\", file.display(), err);\n+                    eprintln!(\"failed to parse TOML configuration '{}': {}\", file.display(), err);\n                     process::exit(2);\n                 }\n             }"}, {"sha": "9827a6c590b57b4fd2487cb19e62aa9fb0bbd2b8", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2aae8020c71fec7ab5ba59c20fe0c127a06e0a64/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2aae8020c71fec7ab5ba59c20fe0c127a06e0a64/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=2aae8020c71fec7ab5ba59c20fe0c127a06e0a64", "patch": "@@ -367,8 +367,8 @@ To learn more about a subcommand, run `./x.py <subcommand> -h`\",\n             }\n         }\n         if !pass_sanity_check {\n-            println!(\"{}\\n\", subcommand_help);\n-            println!(\n+            eprintln!(\"{}\\n\", subcommand_help);\n+            eprintln!(\n                 \"Sorry, I couldn't figure out which subcommand you were trying to specify.\\n\\\n                  You may need to move some options to after the subcommand.\\n\"\n             );\n@@ -532,7 +532,7 @@ Arguments:\n             Kind::Build => Subcommand::Build { paths },\n             Kind::Check => {\n                 if matches.opt_present(\"all-targets\") {\n-                    eprintln!(\n+                    println!(\n                         \"Warning: --all-targets is now on by default and does not need to be passed explicitly.\"\n                     );\n                 }\n@@ -606,7 +606,7 @@ Arguments:\n             if matches.opt_str(\"keep-stage\").is_some()\n                 || matches.opt_str(\"keep-stage-std\").is_some()\n             {\n-                println!(\"--keep-stage not yet supported for x.py check\");\n+                eprintln!(\"--keep-stage not yet supported for x.py check\");\n                 process::exit(1);\n             }\n         }"}, {"sha": "d1a450f1bff8ed7b8ee2df7775a004573e9150bc", "filename": "src/bootstrap/format.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2aae8020c71fec7ab5ba59c20fe0c127a06e0a64/src%2Fbootstrap%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2aae8020c71fec7ab5ba59c20fe0c127a06e0a64/src%2Fbootstrap%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fformat.rs?ref=2aae8020c71fec7ab5ba59c20fe0c127a06e0a64", "patch": "@@ -96,7 +96,7 @@ pub fn format(build: &Build, check: bool, paths: &[PathBuf]) {\n                     entry.split(' ').nth(1).expect(\"every git status entry should list a path\")\n                 });\n             for untracked_path in untracked_paths {\n-                eprintln!(\"skip untracked path {} during rustfmt invocations\", untracked_path);\n+                println!(\"skip untracked path {} during rustfmt invocations\", untracked_path);\n                 // The leading `/` makes it an exact match against the\n                 // repository root, rather than a glob. Without that, if you\n                 // have `foo.rs` in the repository root it will also match\n@@ -105,10 +105,10 @@ pub fn format(build: &Build, check: bool, paths: &[PathBuf]) {\n                 ignore_fmt.add(&format!(\"!/{}\", untracked_path)).expect(&untracked_path);\n             }\n         } else {\n-            eprintln!(\"Not in git tree. Skipping git-aware format checks\");\n+            println!(\"Not in git tree. Skipping git-aware format checks\");\n         }\n     } else {\n-        eprintln!(\"Could not find usable git. Skipping git-aware format checks\");\n+        println!(\"Could not find usable git. Skipping git-aware format checks\");\n     }\n     let ignore_fmt = ignore_fmt.build().unwrap();\n "}, {"sha": "0f0cf0762ab5df6823ebe0d62656cf43411744a4", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2aae8020c71fec7ab5ba59c20fe0c127a06e0a64/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2aae8020c71fec7ab5ba59c20fe0c127a06e0a64/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=2aae8020c71fec7ab5ba59c20fe0c127a06e0a64", "patch": "@@ -689,9 +689,9 @@ impl Build {\n         // Check for postponed failures from `test --no-fail-fast`.\n         let failures = self.delayed_failures.borrow();\n         if failures.len() > 0 {\n-            println!(\"\\n{} command(s) did not execute successfully:\\n\", failures.len());\n+            eprintln!(\"\\n{} command(s) did not execute successfully:\\n\", failures.len());\n             for failure in failures.iter() {\n-                println!(\"  - {}\\n\", failure);\n+                eprintln!(\"  - {}\\n\", failure);\n             }\n             process::exit(1);\n         }"}, {"sha": "7bfcfcdef2c7d2dba1608586f252591b445e95e9", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2aae8020c71fec7ab5ba59c20fe0c127a06e0a64/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2aae8020c71fec7ab5ba59c20fe0c127a06e0a64/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=2aae8020c71fec7ab5ba59c20fe0c127a06e0a64", "patch": "@@ -138,10 +138,10 @@ pub(crate) fn maybe_download_ci_llvm(builder: &Builder<'_>) {\n     let llvm_sha = llvm_sha.trim();\n \n     if llvm_sha == \"\" {\n-        println!(\"error: could not find commit hash for downloading LLVM\");\n-        println!(\"help: maybe your repository history is too shallow?\");\n-        println!(\"help: consider disabling `download-ci-llvm`\");\n-        println!(\"help: or fetch enough history to include one upstream commit\");\n+        eprintln!(\"error: could not find commit hash for downloading LLVM\");\n+        eprintln!(\"help: maybe your repository history is too shallow?\");\n+        eprintln!(\"help: consider disabling `download-ci-llvm`\");\n+        eprintln!(\"help: or fetch enough history to include one upstream commit\");\n         panic!();\n     }\n "}, {"sha": "82f55440ce50c4e6f55f586e9f11e360d440812c", "filename": "src/bootstrap/setup.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2aae8020c71fec7ab5ba59c20fe0c127a06e0a64/src%2Fbootstrap%2Fsetup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2aae8020c71fec7ab5ba59c20fe0c127a06e0a64/src%2Fbootstrap%2Fsetup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fsetup.rs?ref=2aae8020c71fec7ab5ba59c20fe0c127a06e0a64", "patch": "@@ -85,12 +85,12 @@ pub fn setup(config: &Config, profile: Profile) {\n     let path = &config.config;\n \n     if path.exists() {\n-        println!(\n+        eprintln!(\n             \"error: you asked `x.py` to setup a new config file, but one already exists at `{}`\",\n             path.display()\n         );\n-        println!(\"help: try adding `profile = \\\"{}\\\"` at the top of {}\", profile, path.display());\n-        println!(\n+        eprintln!(\"help: try adding `profile = \\\"{}\\\"` at the top of {}\", profile, path.display());\n+        eprintln!(\n             \"note: this will use the configuration in {}\",\n             profile.include_path(&config.src).display()\n         );\n@@ -115,7 +115,7 @@ pub fn setup(config: &Config, profile: Profile) {\n     println!();\n \n     if !rustup_installed() && profile != Profile::User {\n-        println!(\"`rustup` is not installed; cannot link `stage1` toolchain\");\n+        eprintln!(\"`rustup` is not installed; cannot link `stage1` toolchain\");\n     } else if stage_dir_exists(&stage_path[..]) {\n         attempt_toolchain_link(&stage_path[..]);\n     }\n@@ -173,7 +173,7 @@ fn attempt_toolchain_link(stage_path: &str) {\n     }\n \n     if !ensure_stage1_toolchain_placeholder_exists(stage_path) {\n-        println!(\n+        eprintln!(\n             \"Failed to create a template for stage 1 toolchain or confirm that it already exists\"\n         );\n         return;\n@@ -184,8 +184,8 @@ fn attempt_toolchain_link(stage_path: &str) {\n             \"Added `stage1` rustup toolchain; try `cargo +stage1 build` on a separate rust project to run a newly-built toolchain\"\n         );\n     } else {\n-        println!(\"`rustup` failed to link stage 1 build to `stage1` toolchain\");\n-        println!(\n+        eprintln!(\"`rustup` failed to link stage 1 build to `stage1` toolchain\");\n+        eprintln!(\n             \"To manually link stage 1 build to `stage1` toolchain, run:\\n\n             `rustup toolchain link stage1 {}`\",\n             &stage_path\n@@ -292,8 +292,8 @@ pub fn interactive_path() -> io::Result<Profile> {\n         break match parse_with_abbrev(&input) {\n             Ok(profile) => profile,\n             Err(err) => {\n-                println!(\"error: {}\", err);\n-                println!(\"note: press Ctrl+C to exit\");\n+                eprintln!(\"error: {}\", err);\n+                eprintln!(\"note: press Ctrl+C to exit\");\n                 continue;\n             }\n         };\n@@ -320,8 +320,8 @@ undesirable, simply delete the `pre-push` file from .git/hooks.\"\n             \"y\" | \"yes\" => true,\n             \"n\" | \"no\" | \"\" => false,\n             _ => {\n-                println!(\"error: unrecognized option '{}'\", input.trim());\n-                println!(\"note: press Ctrl+C to exit\");\n+                eprintln!(\"error: unrecognized option '{}'\", input.trim());\n+                eprintln!(\"note: press Ctrl+C to exit\");\n                 continue;\n             }\n         };\n@@ -337,7 +337,7 @@ undesirable, simply delete the `pre-push` file from .git/hooks.\"\n         ));\n         let dst = git.join(\"hooks\").join(\"pre-push\");\n         match fs::hard_link(src, &dst) {\n-            Err(e) => println!(\n+            Err(e) => eprintln!(\n                 \"error: could not create hook {}: do you already have the git hook installed?\\n{}\",\n                 dst.display(),\n                 e"}, {"sha": "f39cbb57b827100f416b2564480eeeaf0b843f6d", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2aae8020c71fec7ab5ba59c20fe0c127a06e0a64/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2aae8020c71fec7ab5ba59c20fe0c127a06e0a64/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=2aae8020c71fec7ab5ba59c20fe0c127a06e0a64", "patch": "@@ -152,43 +152,43 @@ impl Step for ToolBuild {\n         });\n \n         if is_expected && !duplicates.is_empty() {\n-            println!(\n+            eprintln!(\n                 \"duplicate artifacts found when compiling a tool, this \\\n                       typically means that something was recompiled because \\\n                       a transitive dependency has different features activated \\\n                       than in a previous build:\\n\"\n             );\n-            println!(\n+            eprintln!(\n                 \"the following dependencies are duplicated although they \\\n                       have the same features enabled:\"\n             );\n             let (same, different): (Vec<_>, Vec<_>) =\n                 duplicates.into_iter().partition(|(_, cur, prev)| cur.2 == prev.2);\n             for (id, cur, prev) in same {\n-                println!(\"  {}\", id);\n+                eprintln!(\"  {}\", id);\n                 // same features\n-                println!(\"    `{}` ({:?})\\n    `{}` ({:?})\", cur.0, cur.1, prev.0, prev.1);\n+                eprintln!(\"    `{}` ({:?})\\n    `{}` ({:?})\", cur.0, cur.1, prev.0, prev.1);\n             }\n-            println!(\"the following dependencies have different features:\");\n+            eprintln!(\"the following dependencies have different features:\");\n             for (id, cur, prev) in different {\n-                println!(\"  {}\", id);\n+                eprintln!(\"  {}\", id);\n                 let cur_features: HashSet<_> = cur.2.into_iter().collect();\n                 let prev_features: HashSet<_> = prev.2.into_iter().collect();\n-                println!(\n+                eprintln!(\n                     \"    `{}` additionally enabled features {:?} at {:?}\",\n                     cur.0,\n                     &cur_features - &prev_features,\n                     cur.1\n                 );\n-                println!(\n+                eprintln!(\n                     \"    `{}` additionally enabled features {:?} at {:?}\",\n                     prev.0,\n                     &prev_features - &cur_features,\n                     prev.1\n                 );\n             }\n-            println!();\n-            println!(\n+            eprintln!();\n+            eprintln!(\n                 \"to fix this you will probably want to edit the local \\\n                       src/tools/rustc-workspace-hack/Cargo.toml crate, as \\\n                       that will update the dependency graph to ensure that \\"}, {"sha": "848d9a7dc92ed1c19496badc68b7e37b1b64ce97", "filename": "src/bootstrap/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2aae8020c71fec7ab5ba59c20fe0c127a06e0a64/src%2Fbootstrap%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2aae8020c71fec7ab5ba59c20fe0c127a06e0a64/src%2Fbootstrap%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Futil.rs?ref=2aae8020c71fec7ab5ba59c20fe0c127a06e0a64", "patch": "@@ -455,7 +455,7 @@ fn dir_up_to_date(src: &Path, threshold: SystemTime) -> bool {\n }\n \n fn fail(s: &str) -> ! {\n-    println!(\"\\n\\n{}\\n\\n\", s);\n+    eprintln!(\"\\n\\n{}\\n\\n\", s);\n     std::process::exit(1);\n }\n "}, {"sha": "997def1657fa04676ab6c5e3349f562d81d83db7", "filename": "src/librustdoc/html/static/.eslintrc.js", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2aae8020c71fec7ab5ba59c20fe0c127a06e0a64/src%2Flibrustdoc%2Fhtml%2Fstatic%2F.eslintrc.js", "raw_url": "https://github.com/rust-lang/rust/raw/2aae8020c71fec7ab5ba59c20fe0c127a06e0a64/src%2Flibrustdoc%2Fhtml%2Fstatic%2F.eslintrc.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2F.eslintrc.js?ref=2aae8020c71fec7ab5ba59c20fe0c127a06e0a64", "patch": "@@ -54,5 +54,14 @@ module.exports = {\n         \"comma-style\": [\"error\", \"last\"],\n         \"max-len\": [\"error\", { \"code\": 100, \"tabWidth\": 4 }],\n         \"eol-last\": [\"error\", \"always\"],\n+        \"arrow-parens\": [\"error\", \"as-needed\"],\n+        \"no-unused-vars\": [\n+            \"error\",\n+            {\n+                \"argsIgnorePattern\": \"^_\",\n+                \"varsIgnorePattern\": \"^_\"\n+            }\n+        ],\n+        \"eqeqeq\": \"error\",\n     }\n };"}, {"sha": "548aeedd0338458afc0cbaa3dbc9d7a3f45ce85a", "filename": "src/librustdoc/html/static/js/main.js", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2aae8020c71fec7ab5ba59c20fe0c127a06e0a64/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/2aae8020c71fec7ab5ba59c20fe0c127a06e0a64/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js?ref=2aae8020c71fec7ab5ba59c20fe0c127a06e0a64", "patch": "@@ -97,12 +97,12 @@ function showMain() {\n //\n // So I guess you could say things are getting pretty interoperable.\n function getVirtualKey(ev) {\n-    if (\"key\" in ev && typeof ev.key != \"undefined\") {\n+    if (\"key\" in ev && typeof ev.key !== \"undefined\") {\n         return ev.key;\n     }\n \n     const c = ev.charCode || ev.keyCode;\n-    if (c == 27) {\n+    if (c === 27) {\n         return \"Escape\";\n     }\n     return String.fromCharCode(c);"}, {"sha": "c726aeeff472995a42c802965119fb165f6885a9", "filename": "src/librustdoc/html/static/js/search.js", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2aae8020c71fec7ab5ba59c20fe0c127a06e0a64/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "raw_url": "https://github.com/rust-lang/rust/raw/2aae8020c71fec7ab5ba59c20fe0c127a06e0a64/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js?ref=2aae8020c71fec7ab5ba59c20fe0c127a06e0a64", "patch": "@@ -70,7 +70,7 @@ function printTab(nb) {\n     });\n     if (foundCurrentTab && foundCurrentResultSet) {\n         searchState.currentTab = nb;\n-    } else if (nb != 0) {\n+    } else if (nb !== 0) {\n         printTab(0);\n     }\n }\n@@ -200,7 +200,7 @@ function initSearch(rawSearchIndex) {\n      * @return {boolean}\n      */\n     function isPathStart(parserState) {\n-        return parserState.userQuery.slice(parserState.pos, parserState.pos + 2) == \"::\";\n+        return parserState.userQuery.slice(parserState.pos, parserState.pos + 2) === \"::\";\n     }\n \n     /**\n@@ -211,7 +211,7 @@ function initSearch(rawSearchIndex) {\n      * @return {boolean}\n      */\n     function isReturnArrow(parserState) {\n-        return parserState.userQuery.slice(parserState.pos, parserState.pos + 2) == \"->\";\n+        return parserState.userQuery.slice(parserState.pos, parserState.pos + 2) === \"->\";\n     }\n \n     /**\n@@ -1726,7 +1726,7 @@ function initSearch(rawSearchIndex) {\n             crates = \" in <select id=\\\"crate-search\\\"><option value=\\\"All crates\\\">\" +\n                 \"All crates</option>\";\n             for (const c of window.ALL_CRATES) {\n-                crates += `<option value=\"${c}\" ${c == filterCrates && \"selected\"}>${c}</option>`;\n+                crates += `<option value=\"${c}\" ${c === filterCrates && \"selected\"}>${c}</option>`;\n             }\n             crates += \"</select>\";\n         }"}, {"sha": "356517745ffcdad739dc9bec27746e192812472e", "filename": "src/test/ui/borrowck/issue-81899.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2aae8020c71fec7ab5ba59c20fe0c127a06e0a64/src%2Ftest%2Fui%2Fborrowck%2Fissue-81899.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2aae8020c71fec7ab5ba59c20fe0c127a06e0a64/src%2Ftest%2Fui%2Fborrowck%2Fissue-81899.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-81899.rs?ref=2aae8020c71fec7ab5ba59c20fe0c127a06e0a64", "patch": "@@ -0,0 +1,13 @@\n+// Regression test for #81899.\n+// The `panic!()` below is important to trigger the fixed ICE.\n+\n+const _CONST: &[u8] = &f(&[], |_| {});\n+\n+const fn f<F>(_: &[u8], _: F) -> &[u8]\n+where\n+    F: FnMut(&u8),\n+{\n+    panic!() //~ ERROR: evaluation of constant value failed\n+}\n+\n+fn main() {}"}, {"sha": "59bf00d0012cdce674321ea2456470cb5dd16cdc", "filename": "src/test/ui/borrowck/issue-81899.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2aae8020c71fec7ab5ba59c20fe0c127a06e0a64/src%2Ftest%2Fui%2Fborrowck%2Fissue-81899.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2aae8020c71fec7ab5ba59c20fe0c127a06e0a64/src%2Ftest%2Fui%2Fborrowck%2Fissue-81899.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-81899.stderr?ref=2aae8020c71fec7ab5ba59c20fe0c127a06e0a64", "patch": "@@ -0,0 +1,17 @@\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/issue-81899.rs:10:5\n+   |\n+LL | const _CONST: &[u8] = &f(&[], |_| {});\n+   |                        -------------- inside `_CONST` at $DIR/issue-81899.rs:4:24\n+...\n+LL |     panic!()\n+   |     ^^^^^^^^\n+   |     |\n+   |     the evaluated program panicked at 'explicit panic', $DIR/issue-81899.rs:10:5\n+   |     inside `f::<[closure@$DIR/issue-81899.rs:4:31: 4:37]>` at $SRC_DIR/std/src/panic.rs:LL:COL\n+   |\n+   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "adec6c7a5c5a39114adb97815e6eccf0a36f72e7", "filename": "src/test/ui/derives/issue-97343.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2aae8020c71fec7ab5ba59c20fe0c127a06e0a64/src%2Ftest%2Fui%2Fderives%2Fissue-97343.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2aae8020c71fec7ab5ba59c20fe0c127a06e0a64/src%2Ftest%2Fui%2Fderives%2Fissue-97343.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fissue-97343.rs?ref=2aae8020c71fec7ab5ba59c20fe0c127a06e0a64", "patch": "@@ -0,0 +1,8 @@\n+use std::fmt::Debug;\n+\n+#[derive(Debug)]\n+pub struct Irrelevant<Irrelevant> { //~ ERROR type arguments are not allowed for this type\n+    irrelevant: Irrelevant,\n+}\n+\n+fn main() {}"}, {"sha": "eedd54f1e9f0c91dd71047c19c50837f241a7610", "filename": "src/test/ui/derives/issue-97343.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2aae8020c71fec7ab5ba59c20fe0c127a06e0a64/src%2Ftest%2Fui%2Fderives%2Fissue-97343.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2aae8020c71fec7ab5ba59c20fe0c127a06e0a64/src%2Ftest%2Fui%2Fderives%2Fissue-97343.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fissue-97343.stderr?ref=2aae8020c71fec7ab5ba59c20fe0c127a06e0a64", "patch": "@@ -0,0 +1,13 @@\n+error[E0109]: type arguments are not allowed for this type\n+  --> $DIR/issue-97343.rs:4:23\n+   |\n+LL | #[derive(Debug)]\n+   |          ----- in this derive macro expansion\n+LL | pub struct Irrelevant<Irrelevant> {\n+   |                       ^^^^^^^^^^ type argument not allowed\n+   |\n+   = note: this error originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0109`."}]}