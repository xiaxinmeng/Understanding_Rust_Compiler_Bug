{"sha": "c5011e9d42b9bcedf0753a108018618568700a83", "node_id": "C_kwDOAAsO6NoAKGM1MDExZTlkNDJiOWJjZWRmMDc1M2ExMDgwMTg2MTg1Njg3MDBhODM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-29T18:26:35Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-29T18:26:35Z"}, "message": "Auto merge of #10553 - Nilstrieb:better-uninit, r=Alexendoo\n\nIn uninit checking, add fallback for polymorphic types\n\nAfter #10520, we always assumed that polymorphic types do not allow to be left uninitialized. But we can do better, by peeking into polymorphic types and adding a few special cases for going through tuples, arrays (because the length may be polymorphic) and blanket allowing all unions (like MaybeUninit).\n\nfixes #10551\n\nchangelog: [uninit_vec]: fix false positive for polymorphic types\nchangelog: [uninit_assumed_init]: fix false positive for polymorphic types", "tree": {"sha": "f92c170aaeb24b5228dc037492fc5d6dd2216041", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f92c170aaeb24b5228dc037492fc5d6dd2216041"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5011e9d42b9bcedf0753a108018618568700a83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5011e9d42b9bcedf0753a108018618568700a83", "html_url": "https://github.com/rust-lang/rust/commit/c5011e9d42b9bcedf0753a108018618568700a83", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5011e9d42b9bcedf0753a108018618568700a83/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58fb8014146c22bfdf60f47c864537abc7b78486", "url": "https://api.github.com/repos/rust-lang/rust/commits/58fb8014146c22bfdf60f47c864537abc7b78486", "html_url": "https://github.com/rust-lang/rust/commit/58fb8014146c22bfdf60f47c864537abc7b78486"}, {"sha": "51b4d2a1e825c39c444be1385f3618302ef0b452", "url": "https://api.github.com/repos/rust-lang/rust/commits/51b4d2a1e825c39c444be1385f3618302ef0b452", "html_url": "https://github.com/rust-lang/rust/commit/51b4d2a1e825c39c444be1385f3618302ef0b452"}], "stats": {"total": 58, "additions": 47, "deletions": 11}, "files": [{"sha": "9449f0b55674dbf0a8560cd24342e075411bd2be", "filename": "clippy_utils/src/ty.rs", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c5011e9d42b9bcedf0753a108018618568700a83/clippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5011e9d42b9bcedf0753a108018618568700a83/clippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fty.rs?ref=c5011e9d42b9bcedf0753a108018618568700a83", "patch": "@@ -541,9 +541,25 @@ pub fn same_type_and_consts<'tcx>(a: Ty<'tcx>, b: Ty<'tcx>) -> bool {\n pub fn is_uninit_value_valid_for_ty<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool {\n     cx.tcx\n         .check_validity_requirement((ValidityRequirement::Uninit, cx.param_env.and(ty)))\n-        // For types containing generic parameters we cannot get a layout to check.\n-        // Therefore, we are conservative and assume that they don't allow uninit.\n-        .unwrap_or(false)\n+        .unwrap_or_else(|_| is_uninit_value_valid_for_ty_fallback(cx, ty))\n+}\n+\n+/// A fallback for polymorphic types, which are not supported by `check_validity_requirement`.\n+fn is_uninit_value_valid_for_ty_fallback<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool {\n+    match *ty.kind() {\n+        // The array length may be polymorphic, let's try the inner type.\n+        ty::Array(component, _) => is_uninit_value_valid_for_ty(cx, component),\n+        // Peek through tuples and try their fallbacks.\n+        ty::Tuple(types) => types.iter().all(|ty| is_uninit_value_valid_for_ty(cx, ty)),\n+        // Unions are always fine right now.\n+        // This includes MaybeUninit, the main way people use uninitialized memory.\n+        // For ADTs, we could look at all fields just like for tuples, but that's potentially\n+        // exponential, so let's avoid doing that for now. Code doing that is sketchy enough to\n+        // just use an `#[allow()]`.\n+        ty::Adt(adt, _) => adt.is_union(),\n+        // For the rest, conservatively assume that they cannot be uninit.\n+        _ => false,\n+    }\n }\n \n /// Gets an iterator over all predicates which apply to the given item."}, {"sha": "c996de89422b57a7f63f1dee5dd7fdd22b2396ae", "filename": "tests/ui/uninit.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c5011e9d42b9bcedf0753a108018618568700a83/tests%2Fui%2Funinit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5011e9d42b9bcedf0753a108018618568700a83/tests%2Fui%2Funinit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funinit.rs?ref=c5011e9d42b9bcedf0753a108018618568700a83", "patch": "@@ -1,7 +1,7 @@\n #![feature(stmt_expr_attributes)]\n #![allow(clippy::let_unit_value, invalid_value)]\n \n-use std::mem::{self, MaybeUninit};\n+use std::mem::MaybeUninit;\n \n union MyOwnMaybeUninit {\n     value: u8,\n@@ -30,12 +30,24 @@ fn main() {\n     let _: [u8; 0] = unsafe { MaybeUninit::uninit().assume_init() };\n \n     // Was a false negative.\n-    let _: usize = unsafe { mem::MaybeUninit::uninit().assume_init() };\n+    let _: usize = unsafe { MaybeUninit::uninit().assume_init() };\n \n     polymorphic::<()>();\n+    polymorphic_maybe_uninit_array::<10>();\n+    polymorphic_maybe_uninit::<u8>();\n \n     fn polymorphic<T>() {\n         // We are conservative around polymorphic types.\n-        let _: T = unsafe { mem::MaybeUninit::uninit().assume_init() };\n+        let _: T = unsafe { MaybeUninit::uninit().assume_init() };\n+    }\n+\n+    fn polymorphic_maybe_uninit_array<const N: usize>() {\n+        // While the type is polymorphic, MaybeUninit<u8> is not.\n+        let _: [MaybeUninit<u8>; N] = unsafe { MaybeUninit::uninit().assume_init() };\n+    }\n+\n+    fn polymorphic_maybe_uninit<T>() {\n+        // The entire type is polymorphic, but it's wrapped in a MaybeUninit.\n+        let _: MaybeUninit<T> = unsafe { MaybeUninit::uninit().assume_init() };\n     }\n }"}, {"sha": "248de56da76cbab3e6140038f642da1e473e5203", "filename": "tests/ui/uninit.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c5011e9d42b9bcedf0753a108018618568700a83/tests%2Fui%2Funinit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5011e9d42b9bcedf0753a108018618568700a83/tests%2Fui%2Funinit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funinit.stderr?ref=c5011e9d42b9bcedf0753a108018618568700a83", "patch": "@@ -9,14 +9,14 @@ LL |     let _: usize = unsafe { MaybeUninit::uninit().assume_init() };\n error: this call for this type may be undefined behavior\n   --> $DIR/uninit.rs:33:29\n    |\n-LL |     let _: usize = unsafe { mem::MaybeUninit::uninit().assume_init() };\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     let _: usize = unsafe { MaybeUninit::uninit().assume_init() };\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: this call for this type may be undefined behavior\n-  --> $DIR/uninit.rs:39:29\n+  --> $DIR/uninit.rs:41:29\n    |\n-LL |         let _: T = unsafe { mem::MaybeUninit::uninit().assume_init() };\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |         let _: T = unsafe { MaybeUninit::uninit().assume_init() };\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "79effc82fdf7cbf7c1003e74cf854d0473b32c7c", "filename": "tests/ui/uninit_vec.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c5011e9d42b9bcedf0753a108018618568700a83/tests%2Fui%2Funinit_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5011e9d42b9bcedf0753a108018618568700a83/tests%2Fui%2Funinit_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funinit_vec.rs?ref=c5011e9d42b9bcedf0753a108018618568700a83", "patch": "@@ -124,4 +124,12 @@ fn main() {\n             vec.set_len(10);\n         }\n     }\n+\n+    fn poly_maybe_uninit<T>() {\n+        // We are conservative around polymorphic types.\n+        let mut vec: Vec<MaybeUninit<T>> = Vec::with_capacity(1000);\n+        unsafe {\n+            vec.set_len(10);\n+        }\n+    }\n }"}]}