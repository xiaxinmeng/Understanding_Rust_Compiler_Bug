{"sha": "f04ea6c7e1cdac012b31efcd97973f426571a97a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwNGVhNmM3ZTFjZGFjMDEyYjMxZWZjZDk3OTczZjQyNjU3MWE5N2E=", "commit": {"author": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2019-09-30T17:59:32Z"}, "committer": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2019-09-30T20:00:43Z"}, "message": "Document JSON message output.", "tree": {"sha": "685b08bdc00cd9613dc7e0a3a0377b41a33223c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/685b08bdc00cd9613dc7e0a3a0377b41a33223c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f04ea6c7e1cdac012b31efcd97973f426571a97a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f04ea6c7e1cdac012b31efcd97973f426571a97a", "html_url": "https://github.com/rust-lang/rust/commit/f04ea6c7e1cdac012b31efcd97973f426571a97a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f04ea6c7e1cdac012b31efcd97973f426571a97a/comments", "author": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3c8eba643a815d720e7f20699b3dca144c845c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3c8eba643a815d720e7f20699b3dca144c845c4", "html_url": "https://github.com/rust-lang/rust/commit/f3c8eba643a815d720e7f20699b3dca144c845c4"}], "stats": {"total": 241, "additions": 240, "deletions": 1}, "files": [{"sha": "d5564fd798f39f373724269a1b029ceaf444ff98", "filename": "src/doc/rustc/src/SUMMARY.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f04ea6c7e1cdac012b31efcd97973f426571a97a/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/f04ea6c7e1cdac012b31efcd97973f426571a97a/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md?ref=f04ea6c7e1cdac012b31efcd97973f426571a97a", "patch": "@@ -10,6 +10,7 @@\n         - [Warn-by-default lints](lints/listing/warn-by-default.md)\n         - [Deny-by-default lints](lints/listing/deny-by-default.md)\n - [Codegen options](codegen-options/index.md)\n+- [JSON Output](json.md)\n - [Targets](targets/index.md)\n     - [Built-in Targets](targets/built-in.md)\n     - [Custom Targets](targets/custom.md)"}, {"sha": "b2cc65c11fd2ce5afe1444d19dcc256fc00a31ec", "filename": "src/doc/rustc/src/command-line-arguments.md", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f04ea6c7e1cdac012b31efcd97973f426571a97a/src%2Fdoc%2Frustc%2Fsrc%2Fcommand-line-arguments.md", "raw_url": "https://github.com/rust-lang/rust/raw/f04ea6c7e1cdac012b31efcd97973f426571a97a/src%2Fdoc%2Frustc%2Fsrc%2Fcommand-line-arguments.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fcommand-line-arguments.md?ref=f04ea6c7e1cdac012b31efcd97973f426571a97a", "patch": "@@ -92,6 +92,7 @@ information about editions may be found in the [edition guide].\n [edition guide]: ../edition-guide/introduction.html\n \n ## `--emit`: specifies the types of output files to generate\n+ <a id=\"option-emit\"></a>\n \n This flag controls the types of output files generated by the compiler. It\n accepts a comma-separated list of values, and may be specified multiple times.\n@@ -241,12 +242,13 @@ The \"sysroot\" is where `rustc` looks for the crates that come with the Rust\n distribution; this flag allows that to be overridden.\n \n ## `--error-format`: control how errors are produced\n+ <a id=\"option-error-format\"></a>\n \n This flag lets you control the format of messages. Messages are printed to\n stderr. The valid options are:\n \n - `human` \u2014 Human-readable output. This is the default.\n-- `json` \u2014 Structured JSON output.\n+- `json` \u2014 Structured JSON output. See [the JSON chapter] for more detail.\n - `short` \u2014 Short, one-line messages.\n \n ## `--color`: configure coloring of output\n@@ -273,6 +275,7 @@ pathname syntax. For example `--remap-path-prefix foo=bar` will match\n `foo/lib.rs` but not `./foo/lib.rs`.\n \n ## `--json`: configure json messages printed by the compiler\n+ <a id=\"option-json\"></a>\n \n When the `--error-format=json` option is passed to rustc then all of the\n compiler's diagnostic output will be emitted in the form of JSON blobs. The\n@@ -305,9 +308,13 @@ to customize the output:\n Note that it is invalid to combine the `--json` argument with the `--color`\n argument, and it is required to combine `--json` with `--error-format=json`.\n \n+See [the JSON chapter] for more detail.\n+\n ## `@path`: load command-line flags from a path\n \n If you specify `@path` on the command-line, then it will open `path` and read\n command line options from it. These options are one per line; a blank line indicates\n an empty option. The file can use Unix or Windows style line endings, and must be\n encoded as UTF-8.\n+\n+[the JSON chapter]: json.md"}, {"sha": "b737849516310478fbfad3cfa86224b9c380e13d", "filename": "src/doc/rustc/src/json.md", "status": "added", "additions": 231, "deletions": 0, "changes": 231, "blob_url": "https://github.com/rust-lang/rust/blob/f04ea6c7e1cdac012b31efcd97973f426571a97a/src%2Fdoc%2Frustc%2Fsrc%2Fjson.md", "raw_url": "https://github.com/rust-lang/rust/raw/f04ea6c7e1cdac012b31efcd97973f426571a97a/src%2Fdoc%2Frustc%2Fsrc%2Fjson.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fjson.md?ref=f04ea6c7e1cdac012b31efcd97973f426571a97a", "patch": "@@ -0,0 +1,231 @@\n+# JSON Output\n+\n+This chapter documents the JSON structures emitted by `rustc`. JSON may be\n+enabled with the [`--error-format=json` flag][option-error-format]. Additional\n+options may be specified with the [`--json` flag][option-json] which can\n+change which messages are generated, and the format of the messages.\n+\n+JSON messages are emitted one per line to stderr.\n+\n+If parsing the output with Rust, the\n+[`cargo_metadata`](https://crates.io/crates/cargo_metadata) crate provides\n+some support for parsing the messages.\n+\n+When parsing, care should be taken to be forwards-compatible with future changes\n+to the format. Optional values may be `null`. New fields may be added. Enumerated\n+fields like \"level\" or \"suggestion_applicability\" may add new values.\n+\n+## Diagnostics\n+\n+Diagnostic messages provide errors or possible concerns generated during\n+compilation. `rustc` provides detailed information about where the diagnostic\n+originates, along with hints and suggestions.\n+\n+Diagnostics are arranged in a parent/child relationship where the parent\n+diagnostic value is the core of the diagnostic, and the attached children\n+provide additional context, help, and information.\n+\n+Diagnostics have the following format:\n+\n+```javascript\n+{\n+    /* The primary message. */\n+    \"message\": \"unused variable: `x`\",\n+    /* The diagnostic code.\n+       Some messages may set this value to null.\n+    */\n+    \"code\": {\n+        /* A unique string identifying which diagnostic triggered. */\n+        \"code\": \"unused_variables\",\n+        /* An optional string explaining more detail about the diagnostic code. */\n+        \"explanation\": null\n+    },\n+    /* The severity of the diagnostic.\n+       Values may be:\n+       - \"error\": A fatal error that prevents compilation.\n+       - \"warning\": A possible error or concern.\n+       - \"note\": Additional information or context about the diagnostic.\n+       - \"help\": A suggestion on how to resolve the diagnostic.\n+       - \"failure-note\": A note attached to the message for further information.\n+       - \"error: internal compiler error\": Indicates a bug within the compiler.\n+    */\n+    \"level\": \"warning\",\n+    /* An array of source code locations to point out specific details about\n+       where the diagnostic originates from. This may be empty, for example\n+       for some global messages, or child messages attached to a parent.\n+\n+       Character offsets are offsets of Unicode Scalar Values.\n+    */\n+    \"spans\": [\n+        {\n+            /* The file where the span is located.\n+               For spans located within a macro expansion, this will be the\n+               name of the expanded macro in the format \"<MACRONAME macros>\".\n+            */\n+            \"file_name\": \"lib.rs\",\n+            /* The byte offset where the span starts (0-based, inclusive). */\n+            \"byte_start\": 21,\n+            /* The byte offset where the span ends (0-based, exclusive). */\n+            \"byte_end\": 22,\n+            /* The first line number of the span (1-based, inclusive). */\n+            \"line_start\": 2,\n+            /* The last line number of the span (1-based, inclusive). */\n+            \"line_end\": 2,\n+            /* The first character offset of the line_start (1-based, inclusive). */\n+            \"column_start\": 9,\n+            /* The last character offset of the line_end (1-based, exclusive). */\n+            \"column_end\": 10,\n+            /* Whether or not this is the \"primary\" span.\n+\n+               This indicates that this span is the focal point of the\n+               diagnostic.\n+\n+               There are rare cases where multiple spans may be marked as\n+               primary. For example, \"immutable borrow occurs here\" and\n+               \"mutable borrow ends here\" can be two separate primary spans.\n+\n+               The top (parent) message should always have at least one\n+               primary span, unless it has zero spans. Child messages may have\n+               zero or more primary spans.\n+            */\n+            \"is_primary\": true,\n+            /* An array of objects showing the original source code for this\n+               span. This shows the entire lines of text where the span is\n+               located. A span across multiple lines will have a separate\n+               value for each line.\n+            */\n+            \"text\": [\n+                {\n+                    /* The entire line of the original source code. */\n+                    \"text\": \"    let x = 123;\",\n+                    /* The first character offset of the line of\n+                       where the span covers this line (1-based, inclusive). */\n+                    \"highlight_start\": 9,\n+                    /* The last character offset of the line of\n+                       where the span covers this line (1-based, exclusive). */\n+                    \"highlight_end\": 10\n+                }\n+            ],\n+            /* An optional message to display at this span location.\n+               This is typically null for primary spans.\n+            */\n+            \"label\": null,\n+            /* An optional string of a suggested replacement for this span to\n+               solve the issue. Tools may try to replace the contents of the\n+               span with this text.\n+            */\n+            \"suggested_replacement\": null,\n+            /* An optional string that indicates the confidence of the\n+               \"suggested_replacement\". Tools may use this value to determine\n+               whether or not suggestions should be automatically applied.\n+\n+               Possible values may be:\n+               - \"MachineApplicable\": The suggestion is definitely what the\n+                 user intended. This suggestion should be automatically\n+                 applied.\n+               - \"MaybeIncorrect\": The suggestion may be what the user\n+                 intended, but it is uncertain. The suggestion should result\n+                 in valid Rust code if it is applied.\n+               - \"HasPlaceholders\": The suggestion contains placeholders like\n+                 `(...)`. The suggestion cannot be applied automatically\n+                 because it will not result in valid Rust code. The user will\n+                 need to fill in the placeholders.\n+               - \"Unspecified\": The applicability of the suggestion is unknown.\n+            */\n+            \"suggestion_applicability\": null,\n+            /* An optional object indicating the expansion of a macro within\n+               this span.\n+\n+               If a message occurs within a macro invocation, this object will\n+               provide details of where within the macro expansion the message\n+               is located.\n+            */\n+            \"expansion\": {\n+                /* The span of the macro invocation.\n+                   Uses the same span definition as the \"spans\" array.\n+                */\n+                \"span\": {/*...*/}\n+                /* Name of the macro, such as \"foo!\" or \"#[derive(Eq)]\". */\n+                \"macro_decl_name\": \"some_macro!\",\n+                /* Optional span where the relevant part of the macro is\n+                  defined. */\n+                \"def_site_span\": {/*...*/},\n+            }\n+        }\n+    ],\n+    /* Array of attached diagnostic messages.\n+       This is an array of objects using the same format as the parent\n+       message. Children are not nested (children do not themselves\n+       contain \"children\" definitions).\n+    */\n+    \"children\": [\n+        {\n+            \"message\": \"`#[warn(unused_variables)]` on by default\",\n+            \"code\": null,\n+            \"level\": \"note\",\n+            \"spans\": [],\n+            \"children\": [],\n+            \"rendered\": null\n+        },\n+        {\n+            \"message\": \"consider prefixing with an underscore\",\n+            \"code\": null,\n+            \"level\": \"help\",\n+            \"spans\": [\n+                {\n+                    \"file_name\": \"lib.rs\",\n+                    \"byte_start\": 21,\n+                    \"byte_end\": 22,\n+                    \"line_start\": 2,\n+                    \"line_end\": 2,\n+                    \"column_start\": 9,\n+                    \"column_end\": 10,\n+                    \"is_primary\": true,\n+                    \"text\": [\n+                        {\n+                            \"text\": \"    let x = 123;\",\n+                            \"highlight_start\": 9,\n+                            \"highlight_end\": 10\n+                        }\n+                    ],\n+                    \"label\": null,\n+                    \"suggested_replacement\": \"_x\",\n+                    \"suggestion_applicability\": \"MachineApplicable\",\n+                    \"expansion\": null\n+                }\n+            ],\n+            \"children\": [],\n+            \"rendered\": null\n+        }\n+    ],\n+    /* Optional string of the rendered version of the diagnostic as displayed\n+       by rustc. Note that this may be influenced by the `--json` flag.\n+    */\n+    \"rendered\": \"warning: unused variable: `x`\\n --> lib.rs:2:9\\n  |\\n2 |     let x = 123;\\n  |         ^ help: consider prefixing with an underscore: `_x`\\n  |\\n  = note: `#[warn(unused_variables)]` on by default\\n\\n\"\n+}\n+```\n+\n+## Artifact notifications\n+\n+Artifact notifications are emitted when the [`--json=artifacts`\n+flag][option-json] is used. They indicate that a file artifact has been saved\n+to disk. More information about emit kinds may be found in the [`--emit`\n+flag][option-emit] documentation.\n+\n+```javascript\n+{\n+    /* The filename that was generated. */\n+    \"artifact\": \"libfoo.rlib\",\n+    /* The kind of artifact that was generated. Possible values:\n+       - \"link\": The generated crate as specified by the crate-type.\n+       - \"dep-info\": The `.d` file with dependency information in a Makefile-like syntax.\n+       - \"metadata\": The Rust `.rmeta` file containing metadata about the crate.\n+       - \"save-analysis\": A JSON file emitted by the `-Zsave-analysis` feature.\n+    */\n+    \"emit\": \"link\"\n+}\n+```\n+\n+[option-emit]: command-line-arguments.md#option-emit\n+[option-error-format]: command-line-arguments.md#option-error-format\n+[option-json]: command-line-arguments.md#option-json"}]}