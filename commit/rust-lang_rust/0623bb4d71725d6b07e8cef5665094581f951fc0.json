{"sha": "0623bb4d71725d6b07e8cef5665094581f951fc0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2MjNiYjRkNzE3MjVkNmIwN2U4Y2VmNTY2NTA5NDU4MWY5NTFmYzA=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-03-20T14:26:42Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-03-21T12:33:06Z"}, "message": "Test for a Salsa bug", "tree": {"sha": "748724d956efcb09be31d299dcecb90e1830142b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/748724d956efcb09be31d299dcecb90e1830142b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0623bb4d71725d6b07e8cef5665094581f951fc0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0623bb4d71725d6b07e8cef5665094581f951fc0", "html_url": "https://github.com/rust-lang/rust/commit/0623bb4d71725d6b07e8cef5665094581f951fc0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0623bb4d71725d6b07e8cef5665094581f951fc0/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d40ff5e623b3670ce3e0e324ecbab3e5197aaeb", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d40ff5e623b3670ce3e0e324ecbab3e5197aaeb", "html_url": "https://github.com/rust-lang/rust/commit/0d40ff5e623b3670ce3e0e324ecbab3e5197aaeb"}], "stats": {"total": 124, "additions": 124, "deletions": 0}, "files": [{"sha": "815bb8418a39112538235f8f1e128d4a0b76a957", "filename": "crates/hir_ty/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0623bb4d71725d6b07e8cef5665094581f951fc0/crates%2Fhir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0623bb4d71725d6b07e8cef5665094581f951fc0/crates%2Fhir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flib.rs?ref=0623bb4d71725d6b07e8cef5665094581f951fc0", "patch": "@@ -106,6 +106,10 @@ impl ProjectionTy {\n         }\n     }\n \n+    pub fn self_type_parameter(&self) -> &Ty {\n+        &self.substitution[0]\n+    }\n+\n     fn trait_(&self, db: &dyn HirDatabase) -> TraitId {\n         match from_assoc_type_id(self.associated_ty_id).lookup(db.upcast()).container {\n             AssocContainerId::TraitId(it) => it,"}, {"sha": "ad283c1e04ba5ca688fe3ac39ace2a75eaf937f8", "filename": "crates/hir_ty/src/tests.rs", "status": "modified", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/0623bb4d71725d6b07e8cef5665094581f951fc0/crates%2Fhir_ty%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0623bb4d71725d6b07e8cef5665094581f951fc0/crates%2Fhir_ty%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests.rs?ref=0623bb4d71725d6b07e8cef5665094581f951fc0", "patch": "@@ -369,3 +369,72 @@ fn check_infer_with_mismatches(ra_fixture: &str, expect: Expect) {\n     actual.push('\\n');\n     expect.assert_eq(&actual);\n }\n+\n+#[test]\n+fn salsa_bug() {\n+    let (mut db, pos) = TestDB::with_position(\n+        \"\n+        //- /lib.rs\n+        trait Index {\n+            type Output;\n+        }\n+\n+        type Key<S: UnificationStoreBase> = <S as UnificationStoreBase>::Key;\n+\n+        pub trait UnificationStoreBase: Index<Output = Key<Self>> {\n+            type Key;\n+\n+            fn len(&self) -> usize;\n+        }\n+\n+        pub trait UnificationStoreMut: UnificationStoreBase {\n+            fn push(&mut self, value: Self::Key);\n+        }\n+\n+        fn main() {\n+            let x = 1;\n+            x.push(1);$0\n+        }\n+    \",\n+    );\n+\n+    let module = db.module_for_file(pos.file_id);\n+    let crate_def_map = module.def_map(&db);\n+    visit_module(&db, &crate_def_map, module.local_id, &mut |def| {\n+        db.infer(def);\n+    });\n+\n+    let new_text = \"\n+        //- /lib.rs\n+        trait Index {\n+            type Output;\n+        }\n+\n+        type Key<S: UnificationStoreBase> = <S as UnificationStoreBase>::Key;\n+\n+        pub trait UnificationStoreBase: Index<Output = Key<Self>> {\n+            type Key;\n+\n+            fn len(&self) -> usize;\n+        }\n+\n+        pub trait UnificationStoreMut: UnificationStoreBase {\n+            fn push(&mut self, value: Self::Key);\n+        }\n+\n+        fn main() {\n+\n+            let x = 1;\n+            x.push(1);\n+        }\n+    \"\n+    .to_string();\n+\n+    db.set_file_text(pos.file_id, Arc::new(new_text));\n+\n+    let module = db.module_for_file(pos.file_id);\n+    let crate_def_map = module.def_map(&db);\n+    visit_module(&db, &crate_def_map, module.local_id, &mut |def| {\n+        db.infer(def);\n+    });\n+}"}, {"sha": "1bb6dff95e708971f7f8e0f96509cf5bc9e8c1a9", "filename": "crates/hir_ty/src/tests/traits.rs", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/0623bb4d71725d6b07e8cef5665094581f951fc0/crates%2Fhir_ty%2Fsrc%2Ftests%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0623bb4d71725d6b07e8cef5665094581f951fc0/crates%2Fhir_ty%2Fsrc%2Ftests%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Ftraits.rs?ref=0623bb4d71725d6b07e8cef5665094581f951fc0", "patch": "@@ -2271,6 +2271,57 @@ fn test<T, U>() where T: Trait<U::Item>, U: Trait<T::Item> {\n     );\n }\n \n+#[test]\n+fn unselected_projection_in_trait_env_cycle_3() {\n+    // this is a cycle, although it would be possible to handle if we didn't go\n+    // into bindings when looking for traits\n+    check_types(\n+        r#\"\n+//- /main.rs\n+trait Trait {\n+    type Item;\n+    type OtherItem;\n+}\n+\n+fn test<T>() where T: Trait<OtherItem = T::Item> {\n+    let x: T::Item = no_matter;\n+}                   //^ {unknown}\n+\"#,\n+    );\n+}\n+\n+#[test]\n+fn unselected_projection_in_trait_env_no_cycle() {\n+    // this is not a cycle\n+    check_types(\n+        r#\"\n+//- /main.rs\n+trait Index {\n+    type Output;\n+}\n+\n+type Key<S: UnificationStoreBase> = <S as UnificationStoreBase>::Key;\n+\n+pub trait UnificationStoreBase: Index<Output = Key<Self>> {\n+    type Key;\n+\n+    fn len(&self) -> usize;\n+}\n+\n+pub trait UnificationStoreMut: UnificationStoreBase {\n+    fn push(&mut self, value: Self::Key);\n+}\n+\n+fn test<T>(t: T) where T: UnificationStoreMut {\n+    let x;\n+    t.push(x);\n+    let y: Key<T>;\n+    (x, y);\n+}      //^ (UnificationStoreBase::Key<T>, UnificationStoreBase::Key<T>)\n+\"#,\n+    );\n+}\n+\n #[test]\n fn inline_assoc_type_bounds_1() {\n     check_types("}]}