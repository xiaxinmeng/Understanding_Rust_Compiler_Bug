{"sha": "6918009fea0ce0f37bd81664227e006fe120949b", "node_id": "C_kwDOAAsO6NoAKDY5MTgwMDlmZWEwY2UwZjM3YmQ4MTY2NDIyN2UwMDZmZTEyMDk0OWI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-25T07:41:05Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-25T07:41:05Z"}, "message": "Auto merge of #13638 - DesmondWillowbrook:hover-rest-pat-mvp, r=Veykril\n\nfeat: adds hover hint to \"..\" in record pattern\n\nHovering on the \"rest\" pattern in struct destructuring,\n```rust\nstruct Baz {\n    a: u32,\n    b: u32,\n    c: u32,\n    d: u32\n}\n\nlet Baz { a, b, ..$0} = Baz { a: 1, b: 2, c: 3, d: 4 };\n```\nshows:\n\n```\n.., c: u32, d: u32\n```\n\nCurrently only works with struct patterns.\n\n![image](https://user-images.githubusercontent.com/51814158/202837115-f424cc26-c2d7-4027-8eea-eeb7749ad146.png)", "tree": {"sha": "e0049ecc3b8de54e81e47dd9e6a169741485565d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e0049ecc3b8de54e81e47dd9e6a169741485565d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6918009fea0ce0f37bd81664227e006fe120949b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6918009fea0ce0f37bd81664227e006fe120949b", "html_url": "https://github.com/rust-lang/rust/commit/6918009fea0ce0f37bd81664227e006fe120949b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6918009fea0ce0f37bd81664227e006fe120949b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e6a49a801708a8bcbe429ce03f614a7951bdb11", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e6a49a801708a8bcbe429ce03f614a7951bdb11", "html_url": "https://github.com/rust-lang/rust/commit/1e6a49a801708a8bcbe429ce03f614a7951bdb11"}, {"sha": "a26aef9055e116d790ea63c37118aefcf93d3d0f", "url": "https://api.github.com/repos/rust-lang/rust/commits/a26aef9055e116d790ea63c37118aefcf93d3d0f", "html_url": "https://github.com/rust-lang/rust/commit/a26aef9055e116d790ea63c37118aefcf93d3d0f"}], "stats": {"total": 184, "additions": 140, "deletions": 44}, "files": [{"sha": "9cbfed4763b092c840c554dbe1c23bdacb3366c0", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 58, "deletions": 43, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/6918009fea0ce0f37bd81664227e006fe120949b/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6918009fea0ce0f37bd81664227e006fe120949b/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=6918009fea0ce0f37bd81664227e006fe120949b", "patch": "@@ -127,6 +127,7 @@ pub(crate) fn hover(\n             original_token.parent().and_then(ast::TokenTree::cast),\n             Some(tt) if tt.syntax().ancestors().any(|it| ast::Meta::can_cast(it.kind()))\n         );\n+\n     // prefer descending the same token kind in attribute expansions, in normal macros text\n     // equivalency is more important\n     let descended = if in_attr {\n@@ -135,54 +136,67 @@ pub(crate) fn hover(\n         sema.descend_into_macros_with_same_text(original_token.clone())\n     };\n \n-    // FIXME: Definition should include known lints and the like instead of having this special case here\n-    let hovered_lint = descended.iter().find_map(|token| {\n-        let attr = token.parent_ancestors().find_map(ast::Attr::cast)?;\n-        render::try_for_lint(&attr, token)\n-    });\n-    if let Some(res) = hovered_lint {\n-        return Some(RangeInfo::new(original_token.text_range(), res));\n-    }\n-\n+    // try lint hover\n     let result = descended\n         .iter()\n-        .filter_map(|token| {\n-            let node = token.parent()?;\n-            let class = IdentClass::classify_token(sema, token)?;\n-            if let IdentClass::Operator(OperatorClass::Await(_)) = class {\n-                // It's better for us to fall back to the keyword hover here,\n-                // rendering poll is very confusing\n-                return None;\n-            }\n-            Some(class.definitions().into_iter().zip(iter::once(node).cycle()))\n+        .find_map(|token| {\n+            // FIXME: Definition should include known lints and the like instead of having this special case here\n+            let attr = token.parent_ancestors().find_map(ast::Attr::cast)?;\n+            render::try_for_lint(&attr, token)\n         })\n-        .flatten()\n-        .unique_by(|&(def, _)| def)\n-        .filter_map(|(def, node)| hover_for_definition(sema, file_id, def, &node, config))\n-        .reduce(|mut acc: HoverResult, HoverResult { markup, actions }| {\n-            acc.actions.extend(actions);\n-            acc.markup = Markup::from(format!(\"{}\\n---\\n{}\", acc.markup, markup));\n-            acc\n-        });\n+        // try item definitions\n+        .or_else(|| {\n+            descended\n+                .iter()\n+                .filter_map(|token| {\n+                    let node = token.parent()?;\n+                    let class = IdentClass::classify_token(sema, token)?;\n+                    if let IdentClass::Operator(OperatorClass::Await(_)) = class {\n+                        // It's better for us to fall back to the keyword hover here,\n+                        // rendering poll is very confusing\n+                        return None;\n+                    }\n+                    Some(class.definitions().into_iter().zip(iter::once(node).cycle()))\n+                })\n+                .flatten()\n+                .unique_by(|&(def, _)| def)\n+                .filter_map(|(def, node)| hover_for_definition(sema, file_id, def, &node, config))\n+                .reduce(|mut acc: HoverResult, HoverResult { markup, actions }| {\n+                    acc.actions.extend(actions);\n+                    acc.markup = Markup::from(format!(\"{}\\n---\\n{}\", acc.markup, markup));\n+                    acc\n+                })\n+        })\n+        // try keywords\n+        .or_else(|| descended.iter().find_map(|token| render::keyword(sema, config, token)))\n+        // try rest item hover\n+        .or_else(|| {\n+            descended.iter().find_map(|token| {\n+                if token.kind() != DOT2 {\n+                    return None;\n+                }\n \n-    if result.is_none() {\n-        // fallbacks, show keywords or types\n+                let rest_pat = token.parent().and_then(ast::RestPat::cast)?;\n+                let record_pat_field_list =\n+                    rest_pat.syntax().parent().and_then(ast::RecordPatFieldList::cast)?;\n \n-        let res = descended.iter().find_map(|token| render::keyword(sema, config, token));\n-        if let Some(res) = res {\n-            return Some(RangeInfo::new(original_token.text_range(), res));\n-        }\n-        let res = descended\n-            .iter()\n-            .find_map(|token| hover_type_fallback(sema, config, token, &original_token));\n-        if let Some(_) = res {\n-            return res;\n-        }\n-    }\n-    result.map(|mut res: HoverResult| {\n-        res.actions = dedupe_or_merge_hover_actions(res.actions);\n-        RangeInfo::new(original_token.text_range(), res)\n-    })\n+                let record_pat =\n+                    record_pat_field_list.syntax().parent().and_then(ast::RecordPat::cast)?;\n+\n+                Some(render::struct_rest_pat(sema, config, &record_pat))\n+            })\n+        });\n+\n+    result\n+        .map(|mut res: HoverResult| {\n+            res.actions = dedupe_or_merge_hover_actions(res.actions);\n+            RangeInfo::new(original_token.text_range(), res)\n+        })\n+        // fallback to type hover if there aren't any other suggestions\n+        // this finds its own range instead of using the closest token's range\n+        .or_else(|| {\n+            descended.iter().find_map(|token| hover_type_fallback(sema, config, token, &token))\n+        })\n }\n \n pub(crate) fn hover_for_definition(\n@@ -269,6 +283,7 @@ fn hover_type_fallback(\n     };\n \n     let res = render::type_info(sema, config, &expr_or_pat)?;\n+\n     let range = sema\n         .original_range_opt(&node)\n         .map(|frange| frange.range)"}, {"sha": "fb00a40f96199cdf989d72b3f41db69e07f45785", "filename": "crates/ide/src/hover/render.rs", "status": "modified", "additions": 47, "deletions": 1, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/6918009fea0ce0f37bd81664227e006fe120949b/crates%2Fide%2Fsrc%2Fhover%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6918009fea0ce0f37bd81664227e006fe120949b/crates%2Fide%2Fsrc%2Fhover%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover%2Frender.rs?ref=6918009fea0ce0f37bd81664227e006fe120949b", "patch": "@@ -14,7 +14,9 @@ use ide_db::{\n use itertools::Itertools;\n use stdx::format_to;\n use syntax::{\n-    algo, ast, match_ast, AstNode, Direction,\n+    algo,\n+    ast::{self, RecordPat},\n+    match_ast, AstNode, Direction,\n     SyntaxKind::{LET_EXPR, LET_STMT},\n     SyntaxToken, T,\n };\n@@ -250,6 +252,50 @@ pub(super) fn keyword(\n     Some(HoverResult { markup, actions })\n }\n \n+/// Returns missing types in a record pattern.\n+/// Only makes sense when there's a rest pattern in the record pattern.\n+/// i.e. `let S {a, ..} = S {a: 1, b: 2}`\n+pub(super) fn struct_rest_pat(\n+    sema: &Semantics<'_, RootDatabase>,\n+    config: &HoverConfig,\n+    pattern: &RecordPat,\n+) -> HoverResult {\n+    let missing_fields = sema.record_pattern_missing_fields(pattern);\n+\n+    // if there are no missing fields, the end result is a hover that shows \"..\"\n+    // should be left in to indicate that there are no more fields in the pattern\n+    // example, S {a: 1, b: 2, ..} when struct S {a: u32, b: u32}\n+\n+    let mut res = HoverResult::default();\n+    let mut targets: Vec<hir::ModuleDef> = Vec::new();\n+    let mut push_new_def = |item: hir::ModuleDef| {\n+        if !targets.contains(&item) {\n+            targets.push(item);\n+        }\n+    };\n+    for (_, t) in &missing_fields {\n+        walk_and_push_ty(sema.db, &t, &mut push_new_def);\n+    }\n+\n+    res.markup = {\n+        let mut s = String::from(\".., \");\n+        for (f, _) in &missing_fields {\n+            s += f.display(sema.db).to_string().as_ref();\n+            s += \", \";\n+        }\n+        // get rid of trailing comma\n+        s.truncate(s.len() - 2);\n+\n+        if config.markdown() {\n+            Markup::fenced_block(&s)\n+        } else {\n+            s.into()\n+        }\n+    };\n+    res.actions.push(HoverAction::goto_type_from_targets(sema.db, targets));\n+    res\n+}\n+\n pub(super) fn try_for_lint(attr: &ast::Attr, token: &SyntaxToken) -> Option<HoverResult> {\n     let (path, tt) = attr.as_simple_call()?;\n     if !tt.syntax().text_range().contains(token.text_range().start()) {"}, {"sha": "f8be4cfb04c2edc0c9563857ad6200004cb487a2", "filename": "crates/ide/src/hover/tests.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/6918009fea0ce0f37bd81664227e006fe120949b/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6918009fea0ce0f37bd81664227e006fe120949b/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs?ref=6918009fea0ce0f37bd81664227e006fe120949b", "patch": "@@ -5307,3 +5307,38 @@ fn main() { $0V; }\n         \"#]],\n     );\n }\n+\n+#[test]\n+fn hover_rest_pat() {\n+    check(\n+        r#\"\n+struct Struct {a: u32, b: u32, c: u8, d: u16};\n+\n+fn main() {\n+    let Struct {a, c, .$0.} = Struct {a: 1, b: 2, c: 3, d: 4};\n+}\n+\"#,\n+        expect![[r#\"\n+            *..*\n+            ```rust\n+            .., b: u32, d: u16\n+            ```\n+        \"#]],\n+    );\n+\n+    check(\n+        r#\"\n+struct Struct {a: u32, b: u32, c: u8, d: u16};\n+\n+fn main() {\n+    let Struct {a, b, c, d, .$0.} = Struct {a: 1, b: 2, c: 3, d: 4};\n+}\n+\"#,\n+        expect![[r#\"\n+            *..*\n+            ```rust\n+            ..\n+            ```\n+        \"#]],\n+    );\n+}"}]}