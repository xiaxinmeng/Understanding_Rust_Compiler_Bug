{"sha": "c7d5a5214470a697b1ba31d23ef02763b0e6a774", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3ZDVhNTIxNDQ3MGE2OTdiMWJhMzFkMjNlZjAyNzYzYjBlNmE3NzQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-10-31T11:46:34Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-10-31T11:46:34Z"}, "message": "auto merge of #10189 : alexcrichton/rust/inner-statics, r=cmr\n\nCloses #9186", "tree": {"sha": "eb95d2b8e633761e377d8805a5e702eeb91e185b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb95d2b8e633761e377d8805a5e702eeb91e185b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c7d5a5214470a697b1ba31d23ef02763b0e6a774", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c7d5a5214470a697b1ba31d23ef02763b0e6a774", "html_url": "https://github.com/rust-lang/rust/commit/c7d5a5214470a697b1ba31d23ef02763b0e6a774", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c7d5a5214470a697b1ba31d23ef02763b0e6a774/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "55eed055cfa2aaa91968685e50eab398a2bdb120", "url": "https://api.github.com/repos/rust-lang/rust/commits/55eed055cfa2aaa91968685e50eab398a2bdb120", "html_url": "https://github.com/rust-lang/rust/commit/55eed055cfa2aaa91968685e50eab398a2bdb120"}, {"sha": "0db50056aec603eadff2e7f2e8e6519824add552", "url": "https://api.github.com/repos/rust-lang/rust/commits/0db50056aec603eadff2e7f2e8e6519824add552", "html_url": "https://github.com/rust-lang/rust/commit/0db50056aec603eadff2e7f2e8e6519824add552"}], "stats": {"total": 85, "additions": 62, "deletions": 23}, "files": [{"sha": "db5b12f021e5f3cc21efa4d3c43ee8275ed8d831", "filename": "src/libextra/treemap.rs", "status": "modified", "additions": 28, "deletions": 19, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/c7d5a5214470a697b1ba31d23ef02763b0e6a774/src%2Flibextra%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7d5a5214470a697b1ba31d23ef02763b0e6a774/src%2Flibextra%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftreemap.rs?ref=c7d5a5214470a697b1ba31d23ef02763b0e6a774", "patch": "@@ -145,7 +145,7 @@ impl<K: TotalOrd, V> TreeMap<K, V> {\n     pub fn iter<'a>(&'a self) -> TreeMapIterator<'a, K, V> {\n         TreeMapIterator {\n             stack: ~[],\n-            node: &self.root,\n+            node: deref(&self.root),\n             remaining_min: self.length,\n             remaining_max: self.length\n         }\n@@ -162,7 +162,7 @@ impl<K: TotalOrd, V> TreeMap<K, V> {\n     fn iter_for_traversal<'a>(&'a self) -> TreeMapIterator<'a, K, V> {\n         TreeMapIterator {\n             stack: ~[],\n-            node: &self.root,\n+            node: deref(&self.root),\n             remaining_min: 0,\n             remaining_max: self.length\n         }\n@@ -173,8 +173,8 @@ impl<K: TotalOrd, V> TreeMap<K, V> {\n     pub fn lower_bound_iter<'a>(&'a self, k: &K) -> TreeMapIterator<'a, K, V> {\n         let mut iter: TreeMapIterator<'a, K, V> = self.iter_for_traversal();\n         loop {\n-            match *iter.node {\n-              Some(ref r) => {\n+            match iter.node {\n+              Some(r) => {\n                 match k.cmp(&r.key) {\n                   Less => iter_traverse_left(&mut iter),\n                   Greater => iter_traverse_right(&mut iter),\n@@ -197,8 +197,8 @@ impl<K: TotalOrd, V> TreeMap<K, V> {\n     pub fn upper_bound_iter<'a>(&'a self, k: &K) -> TreeMapIterator<'a, K, V> {\n         let mut iter: TreeMapIterator<'a, K, V> = self.iter_for_traversal();\n         loop {\n-            match *iter.node {\n-              Some(ref r) => {\n+            match iter.node {\n+              Some(r) => {\n                 match k.cmp(&r.key) {\n                   Less => iter_traverse_left(&mut iter),\n                   Greater => iter_traverse_right(&mut iter),\n@@ -229,24 +229,34 @@ impl<K: TotalOrd, V> TreeMap<K, V> {\n \n /// Lazy forward iterator over a map\n pub struct TreeMapIterator<'self, K, V> {\n-    priv stack: ~[&'self ~TreeNode<K, V>],\n-    priv node: &'self Option<~TreeNode<K, V>>,\n+    priv stack: ~[&'self TreeNode<K, V>],\n+    priv node: Option<&'self TreeNode<K, V>>,\n     priv remaining_min: uint,\n     priv remaining_max: uint\n }\n \n+fn deref<'a, K, V>(node: &'a Option<~TreeNode<K, V>>) -> Option<&'a TreeNode<K, V>> {\n+    match *node {\n+        Some(ref n) => {\n+            let n: &TreeNode<K, V> = *n;\n+            Some(n)\n+        }\n+        None => None\n+    }\n+}\n+\n impl<'self, K, V> TreeMapIterator<'self, K, V> {\n     #[inline(always)]\n     fn next_(&mut self, forward: bool) -> Option<(&'self K, &'self V)> {\n         while !self.stack.is_empty() || self.node.is_some() {\n-            match *self.node {\n-              Some(ref x) => {\n+            match self.node {\n+              Some(x) => {\n                 self.stack.push(x);\n-                self.node = if forward { &x.left } else { &x.right };\n+                self.node = deref(if forward { &x.left } else { &x.right });\n               }\n               None => {\n                 let res = self.stack.pop();\n-                self.node = if forward { &res.right } else { &res.left };\n+                self.node = deref(if forward { &res.right } else { &res.left });\n                 self.remaining_max -= 1;\n                 if self.remaining_min > 0 {\n                     self.remaining_min -= 1;\n@@ -302,14 +312,14 @@ impl<'self, K, V> Iterator<(&'self K, &'self V)> for TreeMapRevIterator<'self, K\n ///   - complete initialization with `iter_traverse_complete`\n #[inline]\n fn iter_traverse_left<'a, K, V>(it: &mut TreeMapIterator<'a, K, V>) {\n-    let node = it.node.get_ref();\n+    let node = it.node.unwrap();\n     it.stack.push(node);\n-    it.node = &node.left;\n+    it.node = deref(&node.left);\n }\n \n #[inline]\n fn iter_traverse_right<'a, K, V>(it: &mut TreeMapIterator<'a, K, V>) {\n-    it.node = &(it.node.get_ref().right);\n+    it.node = deref(&it.node.get_ref().right);\n }\n \n /// iter_traverse_left, iter_traverse_right and iter_traverse_complete are used to\n@@ -321,11 +331,10 @@ fn iter_traverse_right<'a, K, V>(it: &mut TreeMapIterator<'a, K, V>) {\n /// traversed left.\n #[inline]\n fn iter_traverse_complete<'a, K, V>(it: &mut TreeMapIterator<'a, K, V>) {\n-    static none: Option<~TreeNode<K, V>> = None;\n-    match *it.node {\n-        Some(ref n) => {\n+    match it.node {\n+        Some(n) => {\n             it.stack.push(n);\n-            it.node = &none;\n+            it.node = None;\n         }\n         None => ()\n     }"}, {"sha": "9f848b4c2276c335d20e8fba84dcc42d5318d691", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c7d5a5214470a697b1ba31d23ef02763b0e6a774/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7d5a5214470a697b1ba31d23ef02763b0e6a774/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=c7d5a5214470a697b1ba31d23ef02763b0e6a774", "patch": "@@ -3488,10 +3488,17 @@ impl Resolver {\n                     return None;\n                 }\n                 ConstantItemRibKind => {\n-                    // Still doesn't deal with upvars\n-                    self.resolve_error(span,\n-                                          \"attempt to use a non-constant \\\n-                                           value in a constant\");\n+                    if is_ty_param {\n+                        // see #9186\n+                        self.resolve_error(span,\n+                                              \"cannot use an outer type \\\n+                                               parameter in this context\");\n+                    } else {\n+                        // Still doesn't deal with upvars\n+                        self.resolve_error(span,\n+                                              \"attempt to use a non-constant \\\n+                                               value in a constant\");\n+                    }\n \n                 }\n             }\n@@ -3764,7 +3771,9 @@ impl Resolver {\n \n     fn with_constant_rib(&mut self, f: &fn(&mut Resolver)) {\n         self.value_ribs.push(@Rib::new(ConstantItemRibKind));\n+        self.type_ribs.push(@Rib::new(ConstantItemRibKind));\n         f(self);\n+        self.type_ribs.pop();\n         self.value_ribs.pop();\n     }\n "}, {"sha": "0ec4b62f8d2db909fba491feaa164fd908c5b757", "filename": "src/test/compile-fail/inner-static-type-parameter.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c7d5a5214470a697b1ba31d23ef02763b0e6a774/src%2Ftest%2Fcompile-fail%2Finner-static-type-parameter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7d5a5214470a697b1ba31d23ef02763b0e6a774/src%2Ftest%2Fcompile-fail%2Finner-static-type-parameter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Finner-static-type-parameter.rs?ref=c7d5a5214470a697b1ba31d23ef02763b0e6a774", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// see #9186\n+\n+enum Bar<T> { What }\n+\n+fn foo<T>() {\n+    static a: Bar<T> = What;\n+    //~^ ERROR: cannot use an outer type parameter in this context\n+}\n+\n+fn main() {\n+}"}]}