{"sha": "833785b090c30d4a359d901fb41bfafbe1607ce9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzMzc4NWIwOTBjMzBkNGEzNTlkOTAxZmI0MWJmYWZiZTE2MDdjZTk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-06T14:53:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-06T14:53:37Z"}, "message": "Auto merge of #46538 - frewsxcv:rollup, r=frewsxcv\n\nRollup of 7 pull requests\n\n- Successful merges: #46136, #46378, #46431, #46483, #46495, #46502, #46512\n- Failed merges:", "tree": {"sha": "3bae34d8913ec84c8325bd31096b16368fcdca41", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3bae34d8913ec84c8325bd31096b16368fcdca41"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/833785b090c30d4a359d901fb41bfafbe1607ce9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/833785b090c30d4a359d901fb41bfafbe1607ce9", "html_url": "https://github.com/rust-lang/rust/commit/833785b090c30d4a359d901fb41bfafbe1607ce9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/833785b090c30d4a359d901fb41bfafbe1607ce9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "632ad19135a1f38c42761270ffc8a0d977b1db4c", "url": "https://api.github.com/repos/rust-lang/rust/commits/632ad19135a1f38c42761270ffc8a0d977b1db4c", "html_url": "https://github.com/rust-lang/rust/commit/632ad19135a1f38c42761270ffc8a0d977b1db4c"}, {"sha": "bb239e294ee35aab4ddd7c7a306d0bf5bd8518b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb239e294ee35aab4ddd7c7a306d0bf5bd8518b6", "html_url": "https://github.com/rust-lang/rust/commit/bb239e294ee35aab4ddd7c7a306d0bf5bd8518b6"}], "stats": {"total": 102, "additions": 87, "deletions": 15}, "files": [{"sha": "b8fea40090fab3b172d8ee669d777b9885bbd2c4", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/833785b090c30d4a359d901fb41bfafbe1607ce9/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/833785b090c30d4a359d901fb41bfafbe1607ce9/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=833785b090c30d4a359d901fb41bfafbe1607ce9", "patch": "@@ -336,7 +336,7 @@ will run all the tests on every platform we support. If it all works out,\n \n Speaking of tests, Rust has a comprehensive test suite. More information about\n it can be found\n-[here](https://github.com/rust-lang/rust-wiki-backup/blob/master/Note-testsuite.md).\n+[here](https://github.com/rust-lang/rust/blob/master/src/test/COMPILER_TESTS.md).\n \n ### External Dependencies\n [external-dependencies]: #external-dependencies"}, {"sha": "20b9091a07bfc130edaf6a1c56b953c1d1700dc9", "filename": "src/liballoc/benches/btree/map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/833785b090c30d4a359d901fb41bfafbe1607ce9/src%2Fliballoc%2Fbenches%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/833785b090c30d4a359d901fb41bfafbe1607ce9/src%2Fliballoc%2Fbenches%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fbenches%2Fbtree%2Fmap.rs?ref=833785b090c30d4a359d901fb41bfafbe1607ce9", "patch": "@@ -12,7 +12,7 @@\n use std::iter::Iterator;\n use std::vec::Vec;\n use std::collections::BTreeMap;\n-use std::__rand::{Rng, thread_rng};\n+use rand::{Rng, thread_rng};\n use test::{Bencher, black_box};\n \n macro_rules! map_insert_rand_bench {"}, {"sha": "17538d885f8f4753f327b3a2b3bdcb812bf29338", "filename": "src/liballoc/benches/slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/833785b090c30d4a359d901fb41bfafbe1607ce9/src%2Fliballoc%2Fbenches%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/833785b090c30d4a359d901fb41bfafbe1607ce9/src%2Fliballoc%2Fbenches%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fbenches%2Fslice.rs?ref=833785b090c30d4a359d901fb41bfafbe1607ce9", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::__rand::{thread_rng};\n+use rand::{thread_rng};\n use std::mem;\n use std::ptr;\n "}, {"sha": "fe2df2261156a6299aac3a8fe238c7e045cefca0", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/833785b090c30d4a359d901fb41bfafbe1607ce9/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/833785b090c30d4a359d901fb41bfafbe1607ce9/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=833785b090c30d4a359d901fb41bfafbe1607ce9", "patch": "@@ -596,9 +596,9 @@ mod builtin {\n \n     /// Unconditionally causes compilation to fail with the given error message when encountered.\n     ///\n-    /// For more information, see the [RFC].\n+    /// For more information, see the documentation for [`std::compile_error!`].\n     ///\n-    /// [RFC]: https://github.com/rust-lang/rfcs/blob/master/text/1695-add-error-macro.md\n+    /// [`std::compile_error!`]: ../std/macro.compile_error.html\n     #[stable(feature = \"compile_error_macro\", since = \"1.20.0\")]\n     #[macro_export]\n     #[cfg(dox)]"}, {"sha": "20f054f5a77f291ea547713764f8d95bcc58406f", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 40, "deletions": 2, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/833785b090c30d4a359d901fb41bfafbe1607ce9/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/833785b090c30d4a359d901fb41bfafbe1607ce9/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=833785b090c30d4a359d901fb41bfafbe1607ce9", "patch": "@@ -91,15 +91,53 @@ pub const fn null<T>() -> *const T { 0 as *const T }\n pub const fn null_mut<T>() -> *mut T { 0 as *mut T }\n \n /// Swaps the values at two mutable locations of the same type, without\n-/// deinitializing either. They may overlap, unlike `mem::swap` which is\n-/// otherwise equivalent.\n+/// deinitializing either.\n+///\n+/// The values pointed at by `x` and `y` may overlap, unlike `mem::swap` which\n+/// is otherwise equivalent. If the values do overlap, then the overlapping\n+/// region of memory from `x` will be used. This is demonstrated in the\n+/// examples section below.\n ///\n /// # Safety\n ///\n /// This function copies the memory through the raw pointers passed to it\n /// as arguments.\n ///\n /// Ensure that these pointers are valid before calling `swap`.\n+///\n+/// # Examples\n+///\n+/// Swapping two non-overlapping regions:\n+///\n+/// ```\n+/// use std::ptr;\n+///\n+/// let mut array = [0, 1, 2, 3];\n+///\n+/// let x = array[0..].as_mut_ptr() as *mut [u32; 2];\n+/// let y = array[2..].as_mut_ptr() as *mut [u32; 2];\n+///\n+/// unsafe {\n+///     ptr::swap(x, y);\n+///     assert_eq!([2, 3, 0, 1], array);\n+/// }\n+/// ```\n+///\n+/// Swapping two overlapping regions:\n+///\n+/// ```\n+/// use std::ptr;\n+///\n+/// let mut array = [0, 1, 2, 3];\n+///\n+/// let x = array[0..].as_mut_ptr() as *mut [u32; 3];\n+/// let y = array[1..].as_mut_ptr() as *mut [u32; 3];\n+///\n+/// unsafe {\n+///     ptr::swap(x, y);\n+///     assert_eq!([1, 0, 1, 2], array);\n+/// }\n+/// ```\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub unsafe fn swap<T>(x: *mut T, y: *mut T) {"}, {"sha": "959935242dcc5978af952f2d00a3a0768fe0e297", "filename": "src/libcore/result.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/833785b090c30d4a359d901fb41bfafbe1607ce9/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/833785b090c30d4a359d901fb41bfafbe1607ce9/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=833785b090c30d4a359d901fb41bfafbe1607ce9", "patch": "@@ -153,12 +153,12 @@\n //! }\n //! ```\n //!\n-//! # The `?` syntax\n+//! # The question mark operator, `?`\n //!\n //! When writing code that calls many functions that return the\n-//! [`Result`] type, the error handling can be tedious. The [`?`]\n-//! syntax hides some of the boilerplate of propagating errors up the\n-//! call stack.\n+//! [`Result`] type, the error handling can be tedious. The question mark\n+//! operator, [`?`], hides some of the boilerplate of propagating errors\n+//! up the call stack.\n //!\n //! It replaces this:\n //!"}, {"sha": "d9b67e2d27f0c96b869032e63a51068e2be4fc4f", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/833785b090c30d4a359d901fb41bfafbe1607ce9/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/833785b090c30d4a359d901fb41bfafbe1607ce9/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=833785b090c30d4a359d901fb41bfafbe1607ce9", "patch": "@@ -982,7 +982,7 @@ Available lint options:\n     println!(\"Lint groups provided by rustc:\\n\");\n     println!(\"    {}  {}\", padded(\"name\"), \"sub-lints\");\n     println!(\"    {}  {}\", padded(\"----\"), \"---------\");\n-    println!(\"    {}  {}\", padded(\"warnings\"), \"all built-in lints\");\n+    println!(\"    {}  {}\", padded(\"warnings\"), \"all lints that are set to issue warnings\");\n \n     let print_lint_groups = |lints: Vec<(&'static str, Vec<lint::LintId>)>| {\n         for (name, to) in lints {"}, {"sha": "f32252b726c8fe23349ce86c06dc44e0afe34059", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/833785b090c30d4a359d901fb41bfafbe1607ce9/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/833785b090c30d4a359d901fb41bfafbe1607ce9/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=833785b090c30d4a359d901fb41bfafbe1607ce9", "patch": "@@ -179,7 +179,6 @@ nav.sub {\n \ttop: 0;\n \theight: 100vh;\n \toverflow: auto;\n-\tz-index: 1;\n }\n \n .sidebar .current {\n@@ -273,9 +272,19 @@ nav.sub {\n \toverflow: auto;\n \tpadding-left: 0;\n }\n+\n #search {\n \tmargin-left: 230px;\n+\tposition: relative;\n+}\n+\n+#results {\n+\tposition: absolute;\n+\tright: 0;\n+\tleft: 0;\n+\toverflow: auto;\n }\n+\n .content pre.line-numbers {\n \tfloat: left;\n \tborder: none;"}, {"sha": "b36473d9b75f07906312a012e26d412ae7621288", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 27, "deletions": 2, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/833785b090c30d4a359d901fb41bfafbe1607ce9/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/833785b090c30d4a359d901fb41bfafbe1607ce9/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=833785b090c30d4a359d901fb41bfafbe1607ce9", "patch": "@@ -282,9 +282,34 @@ pub mod builtin {\n \n     /// Unconditionally causes compilation to fail with the given error message when encountered.\n     ///\n-    /// For more information, see the [RFC].\n+    /// This macro should be used when a crate uses a conditional compilation strategy to provide\n+    /// better error messages for errornous conditions.\n     ///\n-    /// [RFC]: https://github.com/rust-lang/rfcs/blob/master/text/1695-add-error-macro.md\n+    /// # Examples\n+    ///\n+    /// Two such examples are macros and `#[cfg]` environments.\n+    ///\n+    /// Emit better compiler error if a macro is passed invalid values.\n+    ///\n+    /// ```compile_fail\n+    /// macro_rules! give_me_foo_or_bar {\n+    ///     (foo) => {};\n+    ///     (bar) => {};\n+    ///     ($x:ident) => {\n+    ///         compile_error!(\"This macro only accepts `foo` or `bar`\");\n+    ///     }\n+    /// }\n+    ///\n+    /// give_me_foo_or_bar!(neither);\n+    /// // ^ will fail at compile time with message \"This macro only accepts `foo` or `bar`\"\n+    /// ```\n+    ///\n+    /// Emit compiler error if one of a number of features isn't available.\n+    ///\n+    /// ```compile_fail\n+    /// #[cfg(not(any(feature = \"foo\", feature = \"bar\")))]\n+    /// compile_error!(\"Either feature \\\"foo\\\" or \\\"bar\\\" must be enabled for this crate.\")\n+    /// ```\n     #[stable(feature = \"compile_error_macro\", since = \"1.20.0\")]\n     #[macro_export]\n     macro_rules! compile_error { ($msg:expr) => ({ /* compiler built-in */ }) }"}]}