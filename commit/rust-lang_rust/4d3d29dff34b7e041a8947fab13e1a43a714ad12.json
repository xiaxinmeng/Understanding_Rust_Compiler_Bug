{"sha": "4d3d29dff34b7e041a8947fab13e1a43a714ad12", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkM2QyOWRmZjM0YjdlMDQxYTg5NDdmYWIxM2UxYTQzYTcxNGFkMTI=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-03-08T06:50:25Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-03-08T19:51:49Z"}, "message": "rustbuild: Refactor adding steps manually\n\nUse a macro so it automatically picks up new steps.", "tree": {"sha": "9b1c2fcee9731f7bb227fcc313bb5d64de0a53f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b1c2fcee9731f7bb227fcc313bb5d64de0a53f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d3d29dff34b7e041a8947fab13e1a43a714ad12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d3d29dff34b7e041a8947fab13e1a43a714ad12", "html_url": "https://github.com/rust-lang/rust/commit/4d3d29dff34b7e041a8947fab13e1a43a714ad12", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d3d29dff34b7e041a8947fab13e1a43a714ad12/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a541937dc314cc9e71062a82119b170dd27e995", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a541937dc314cc9e71062a82119b170dd27e995", "html_url": "https://github.com/rust-lang/rust/commit/6a541937dc314cc9e71062a82119b170dd27e995"}], "stats": {"total": 47, "additions": 27, "deletions": 20}, "files": [{"sha": "e47c7311ae41c95e89cfc65bbd76b9acff0bfcdc", "filename": "src/bootstrap/build/step.rs", "status": "modified", "additions": 27, "deletions": 20, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/4d3d29dff34b7e041a8947fab13e1a43a714ad12/src%2Fbootstrap%2Fbuild%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d3d29dff34b7e041a8947fab13e1a43a714ad12/src%2Fbootstrap%2Fbuild%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuild%2Fstep.rs?ref=4d3d29dff34b7e041a8947fab13e1a43a714ad12", "patch": "@@ -168,28 +168,35 @@ fn add_steps<'a>(build: &'a Build,\n                  host: &Step<'a>,\n                  target: &Step<'a>,\n                  targets: &mut Vec<Step<'a>>) {\n+    struct Context<'a> {\n+        stage: u32,\n+        compiler: Compiler<'a>,\n+        _dummy: (),\n+        host: &'a str,\n+    }\n     for step in build.flags.step.iter() {\n-        let compiler = host.target(&build.config.build).compiler(stage);\n-        match &step[..] {\n-            \"libstd\" => targets.push(target.libstd(stage, compiler)),\n-            \"librustc\" => targets.push(target.librustc(stage, compiler)),\n-            \"libstd-link\" => targets.push(target.libstd_link(stage, compiler,\n-                                                             host.target)),\n-            \"librustc-link\" => targets.push(target.librustc_link(stage, compiler,\n-                                                                 host.target)),\n-            \"rustc\" => targets.push(host.rustc(stage)),\n-            \"llvm\" => targets.push(target.llvm(())),\n-            \"compiler-rt\" => targets.push(target.compiler_rt(())),\n-            \"doc-style\" => targets.push(host.doc_style(stage)),\n-            \"doc-standalone\" => targets.push(host.doc_standalone(stage)),\n-            \"doc-nomicon\" => targets.push(host.doc_nomicon(stage)),\n-            \"doc-book\" => targets.push(host.doc_book(stage)),\n-            \"doc-std\" => targets.push(host.doc_std(stage)),\n-            \"doc-rustc\" => targets.push(host.doc_rustc(stage)),\n-            \"doc\" => targets.push(host.doc(stage)),\n-            \"check\" => targets.push(host.check(stage, compiler)),\n-            _ => panic!(\"unknown build target: `{}`\", step),\n+\n+        // The macro below insists on hygienic access to all local variables, so\n+        // we shove them all in a struct and subvert hygiene by accessing struct\n+        // fields instead,\n+        let cx = Context {\n+            stage: stage,\n+            compiler: host.target(&build.config.build).compiler(stage),\n+            _dummy: (),\n+            host: host.target,\n+        };\n+        macro_rules! add_step {\n+            ($(($short:ident, $name:ident { $($arg:ident: $t:ty),* }),)*) => ({$(\n+                let name = stringify!($short).replace(\"_\", \"-\");\n+                if &step[..] == &name[..] {\n+                    targets.push(target.$short($(cx.$arg),*));\n+                    continue\n+                }\n+                drop(name);\n+            )*})\n         }\n+\n+        targets!(add_step);\n     }\n }\n "}]}