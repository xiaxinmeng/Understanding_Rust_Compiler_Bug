{"sha": "0238986de7fc584d532f22c981625d666e8ea22b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyMzg5ODZkZTdmYzU4NGQ1MzJmMjJjOTgxNjI1ZDY2NmU4ZWEyMmI=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-02-20T01:11:09Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-02-21T16:29:09Z"}, "message": "Propagate RUSTDOCFLAGS in the environment when documenting\n\nPreviously, RUSTDOCFLAGS would get overriden when bootstrap set\n`RUSTDOCFLAGS` itself. Propagate the flag manually, using the same logic\nas `RUSTFLAGS`.\n\nThis also extracts the logic into a helper function to make sure it's\nthe same.", "tree": {"sha": "127b3e7600f971336b0af5b401359a52ccf70183", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/127b3e7600f971336b0af5b401359a52ccf70183"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0238986de7fc584d532f22c981625d666e8ea22b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0238986de7fc584d532f22c981625d666e8ea22b", "html_url": "https://github.com/rust-lang/rust/commit/0238986de7fc584d532f22c981625d666e8ea22b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0238986de7fc584d532f22c981625d666e8ea22b/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8599bff5a3556059817503030e248507706e96b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/8599bff5a3556059817503030e248507706e96b4", "html_url": "https://github.com/rust-lang/rust/commit/8599bff5a3556059817503030e248507706e96b4"}], "stats": {"total": 30, "additions": 21, "deletions": 9}, "files": [{"sha": "3beecb11ee9952ddca61017a4fa719c9c3b9fee8", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/0238986de7fc584d532f22c981625d666e8ea22b/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0238986de7fc584d532f22c981625d666e8ea22b/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=0238986de7fc584d532f22c981625d666e8ea22b", "patch": "@@ -938,6 +938,12 @@ impl<'a> Builder<'a> {\n         // but this breaks CI. At the very least, stage0 `rustdoc` needs `--cfg bootstrap`. See\n         // #71458.\n         let mut rustdocflags = rustflags.clone();\n+        rustdocflags.propagate_cargo_env(\"RUSTDOCFLAGS\");\n+        if stage == 0 {\n+            rustdocflags.env(\"RUSTDOCFLAGS_BOOTSTRAP\");\n+        } else {\n+            rustdocflags.env(\"RUSTDOCFLAGS_NOT_BOOTSTRAP\");\n+        }\n \n         if let Ok(s) = env::var(\"CARGOFLAGS\") {\n             cargo.args(s.split_whitespace());\n@@ -1551,21 +1557,27 @@ impl<'a> Builder<'a> {\n mod tests;\n \n #[derive(Debug, Clone)]\n-struct Rustflags(String);\n+struct Rustflags(String, TargetSelection);\n \n impl Rustflags {\n     fn new(target: TargetSelection) -> Rustflags {\n-        let mut ret = Rustflags(String::new());\n+        let mut ret = Rustflags(String::new(), target);\n+        ret.propagate_cargo_env(\"RUSTFLAGS\");\n+        ret\n+    }\n \n+    /// By default, cargo will pick up on various variables in the environment. However, bootstrap\n+    /// reuses those variables to pass additional flags to rustdoc, so by default they get overriden.\n+    /// Explicitly add back any previous value in the environment.\n+    ///\n+    /// `prefix` is usually `RUSTFLAGS` or `RUSTDOCFLAGS`.\n+    fn propagate_cargo_env(&mut self, prefix: &str) {\n         // Inherit `RUSTFLAGS` by default ...\n-        ret.env(\"RUSTFLAGS\");\n-\n-        // ... and also handle target-specific env RUSTFLAGS if they're\n-        // configured.\n-        let target_specific = format!(\"CARGO_TARGET_{}_RUSTFLAGS\", crate::envify(&target.triple));\n-        ret.env(&target_specific);\n+        self.env(prefix);\n \n-        ret\n+        // ... and also handle target-specific env RUSTFLAGS if they're configured.\n+        let target_specific = format!(\"CARGO_TARGET_{}_{}\", crate::envify(&self.1.triple), prefix);\n+        self.env(&target_specific);\n     }\n \n     fn env(&mut self, env: &str) {"}]}