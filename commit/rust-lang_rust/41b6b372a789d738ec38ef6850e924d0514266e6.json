{"sha": "41b6b372a789d738ec38ef6850e924d0514266e6", "node_id": "C_kwDOAAsO6NoAKDQxYjZiMzcyYTc4OWQ3MzhlYzM4ZWY2ODUwZTkyNGQwNTE0MjY2ZTY", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-02-23T15:45:58Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-02-23T15:45:58Z"}, "message": "fix: Resolve private fields in type inference", "tree": {"sha": "d85ace0328b043a60dbf1bb3437b81636954f20a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d85ace0328b043a60dbf1bb3437b81636954f20a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/41b6b372a789d738ec38ef6850e924d0514266e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/41b6b372a789d738ec38ef6850e924d0514266e6", "html_url": "https://github.com/rust-lang/rust/commit/41b6b372a789d738ec38ef6850e924d0514266e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/41b6b372a789d738ec38ef6850e924d0514266e6/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de0941301efd7092666911a65b43394d9653fa83", "url": "https://api.github.com/repos/rust-lang/rust/commits/de0941301efd7092666911a65b43394d9653fa83", "html_url": "https://github.com/rust-lang/rust/commit/de0941301efd7092666911a65b43394d9653fa83"}], "stats": {"total": 18, "additions": 17, "deletions": 1}, "files": [{"sha": "0a50df493fcf169198c23d5a13db8890ce1fb3b5", "filename": "crates/hir_ty/src/infer.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/41b6b372a789d738ec38ef6850e924d0514266e6/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41b6b372a789d738ec38ef6850e924d0514266e6/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer.rs?ref=41b6b372a789d738ec38ef6850e924d0514266e6", "patch": "@@ -13,8 +13,8 @@\n //! to certain types. To record this, we use the union-find implementation from\n //! the `ena` crate, which is extracted from rustc.\n \n-use std::ops::Index;\n use std::sync::Arc;\n+use std::{collections::hash_map::Entry, ops::Index};\n \n use chalk_ir::{cast::Cast, DebruijnIndex, Mutability, Safety, Scalar, TypeFlags};\n use hir_def::{\n@@ -459,6 +459,12 @@ impl<'a> InferenceContext<'a> {\n         self.result.field_resolutions.insert(expr, field);\n     }\n \n+    fn write_field_resolution_if_empty(&mut self, expr: ExprId, field: FieldId) {\n+        if let Entry::Vacant(entry) = self.result.field_resolutions.entry(expr) {\n+            entry.insert(field);\n+        }\n+    }\n+\n     fn write_variant_resolution(&mut self, id: ExprOrPatId, variant: VariantId) {\n         self.result.variant_resolutions.insert(id, variant);\n     }"}, {"sha": "b08a9618d8cc382d7476a95977f4af332b86850c", "filename": "crates/hir_ty/src/infer/expr.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/41b6b372a789d738ec38ef6850e924d0514266e6/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41b6b372a789d738ec38ef6850e924d0514266e6/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=41b6b372a789d738ec38ef6850e924d0514266e6", "patch": "@@ -532,6 +532,11 @@ impl<'a> InferenceContext<'a> {\n                                         .substitute(Interner, &parameters),\n                                 )\n                             } else {\n+                                // Write down the first field resolution even if it is not visible\n+                                // This aids IDE features for private fields like goto def and in\n+                                // case of autoderef finding an applicable field, this will be\n+                                // overwritten in a following cycle\n+                                self.write_field_resolution_if_empty(tgt_expr, field);\n                                 None\n                             }\n                         }\n@@ -546,6 +551,11 @@ impl<'a> InferenceContext<'a> {\n                                         .substitute(Interner, &parameters),\n                                 )\n                             } else {\n+                                // Write down the first field resolution even if it is not visible\n+                                // This aids IDE features for private fields like goto def and in\n+                                // case of autoderef finding an applicable field, this will be\n+                                // overwritten in a following cycle\n+                                self.write_field_resolution_if_empty(tgt_expr, field);\n                                 None\n                             }\n                         }"}]}