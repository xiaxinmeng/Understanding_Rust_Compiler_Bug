{"sha": "e8f398623e1eea678f41f89a94300c23d0510ac2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4ZjM5ODYyM2UxZWVhNjc4ZjQxZjg5YTk0MzAwYzIzZDA1MTBhYzI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-06-27T21:01:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-06-27T21:01:06Z"}, "message": "Rollup merge of #62106 - cramertj:test-await, r=centril\n\nAdd more tests for async/await\n\nI'll follow up with more of these, but here's an initial few.\n\nr? @Centril", "tree": {"sha": "b5c284f5fe731e9d4938597641a1de45d891030f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5c284f5fe731e9d4938597641a1de45d891030f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e8f398623e1eea678f41f89a94300c23d0510ac2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdFS6SCRBK7hj4Ov3rIwAAdHIIAIyCOUA91JYd4HIQsX/2FbUP\nTRnRjouniLSn3sFYwq5V1nCb+jB+LyyepFoYM81q7WCJmx0JOtjWrXkhnv45zE1A\nIswKMpsWlHpB2Bpln3O1EmPS4LpHNeai9mG0sRrAknujmLYB8fcNuxRgtHKW2paH\nFSWWiwY0arPFRfwTMurQMUAQ3Zd9St2NpxqZ2ba3s1ziGRa4CMfibSgm6RZs+OBC\nTkYSyDWmO9l8gyBTUm7RHoeejrkalEe9fELBbrDZEOHEfaIWys29m7EOMTUh8eDO\nPIIkSoeak8BxmSfQDF334gMpfxCVD8/k5ODQrF+cCJ33Qvwv40H+a2u4Adv2py4=\n=eZFo\n-----END PGP SIGNATURE-----\n", "payload": "tree b5c284f5fe731e9d4938597641a1de45d891030f\nparent 36b26e9bacb7fdb2b8a0a908878f621ed4f9a1f1\nparent ba12e7862c58df2155011bb165a8ae1186828bc4\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1561669266 +0200\ncommitter GitHub <noreply@github.com> 1561669266 +0200\n\nRollup merge of #62106 - cramertj:test-await, r=centril\n\nAdd more tests for async/await\n\nI'll follow up with more of these, but here's an initial few.\n\nr? @Centril\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e8f398623e1eea678f41f89a94300c23d0510ac2", "html_url": "https://github.com/rust-lang/rust/commit/e8f398623e1eea678f41f89a94300c23d0510ac2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e8f398623e1eea678f41f89a94300c23d0510ac2/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36b26e9bacb7fdb2b8a0a908878f621ed4f9a1f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/36b26e9bacb7fdb2b8a0a908878f621ed4f9a1f1", "html_url": "https://github.com/rust-lang/rust/commit/36b26e9bacb7fdb2b8a0a908878f621ed4f9a1f1"}, {"sha": "ba12e7862c58df2155011bb165a8ae1186828bc4", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba12e7862c58df2155011bb165a8ae1186828bc4", "html_url": "https://github.com/rust-lang/rust/commit/ba12e7862c58df2155011bb165a8ae1186828bc4"}], "stats": {"total": 338, "additions": 338, "deletions": 0}, "files": [{"sha": "612c1e29d82bd1ba2288c54e1172417649fecd17", "filename": "src/test/ui/async-await/async-fn-nonsend.rs", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/e8f398623e1eea678f41f89a94300c23d0510ac2/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-nonsend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f398623e1eea678f41f89a94300c23d0510ac2/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-nonsend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-nonsend.rs?ref=e8f398623e1eea678f41f89a94300c23d0510ac2", "patch": "@@ -0,0 +1,59 @@\n+// compile-fail\n+// edition:2018\n+// compile-flags: --crate-type lib\n+\n+#![feature(async_await)]\n+\n+use std::{\n+    cell::RefCell,\n+    fmt::Debug,\n+    rc::Rc,\n+};\n+\n+fn non_sync() -> impl Debug { RefCell::new(()) }\n+\n+fn non_send() -> impl Debug { Rc::new(()) }\n+\n+fn take_ref<T>(_: &T) {}\n+\n+async fn fut() {}\n+\n+async fn fut_arg<T>(_: T) {}\n+\n+async fn local_dropped_before_await() {\n+    // FIXME: it'd be nice for this to be allowed in a `Send` `async fn`\n+    let x = non_send();\n+    drop(x);\n+    fut().await;\n+}\n+\n+async fn non_send_temporary_in_match() {\n+    // We could theoretically make this work as well (produce a `Send` future)\n+    // for scrutinees / temporaries that can or will\n+    // be dropped prior to the match body\n+    // (e.g. `Copy` types).\n+    match Some(non_send()) {\n+        Some(_) => fut().await,\n+        None => {}\n+    }\n+}\n+\n+async fn non_sync_with_method_call() {\n+    // FIXME: it'd be nice for this to work.\n+    let f: &mut std::fmt::Formatter = panic!();\n+    if non_sync().fmt(f).unwrap() == () {\n+        fut().await;\n+    }\n+}\n+\n+fn assert_send(_: impl Send) {}\n+\n+pub fn pass_assert() {\n+    assert_send(local_dropped_before_await());\n+    //~^ ERROR `std::rc::Rc<()>` cannot be sent between threads safely\n+    assert_send(non_send_temporary_in_match());\n+    //~^ ERROR `std::rc::Rc<()>` cannot be sent between threads safely\n+    assert_send(non_sync_with_method_call());\n+    //~^ ERROR `dyn std::fmt::Write` cannot be sent between threads safely\n+    //~^^ ERROR `*mut (dyn std::ops::Fn() + 'static)` cannot be shared between threads safely\n+}"}, {"sha": "7776a36a28f2b4bb1aa93c196daf9718a01e0950", "filename": "src/test/ui/async-await/async-fn-nonsend.stderr", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/e8f398623e1eea678f41f89a94300c23d0510ac2/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-nonsend.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8f398623e1eea678f41f89a94300c23d0510ac2/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-nonsend.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-nonsend.stderr?ref=e8f398623e1eea678f41f89a94300c23d0510ac2", "patch": "@@ -0,0 +1,87 @@\n+error[E0277]: `std::rc::Rc<()>` cannot be sent between threads safely\n+  --> $DIR/async-fn-nonsend.rs:52:5\n+   |\n+LL |     assert_send(local_dropped_before_await());\n+   |     ^^^^^^^^^^^ `std::rc::Rc<()>` cannot be sent between threads safely\n+   |\n+   = help: within `impl std::future::Future`, the trait `std::marker::Send` is not implemented for `std::rc::Rc<()>`\n+   = note: required because it appears within the type `impl std::fmt::Debug`\n+   = note: required because it appears within the type `{impl std::fmt::Debug, impl std::future::Future, ()}`\n+   = note: required because it appears within the type `[static generator@$DIR/async-fn-nonsend.rs:23:39: 28:2 {impl std::fmt::Debug, impl std::future::Future, ()}]`\n+   = note: required because it appears within the type `std::future::GenFuture<[static generator@$DIR/async-fn-nonsend.rs:23:39: 28:2 {impl std::fmt::Debug, impl std::future::Future, ()}]>`\n+   = note: required because it appears within the type `impl std::future::Future`\n+   = note: required because it appears within the type `impl std::future::Future`\n+note: required by `assert_send`\n+  --> $DIR/async-fn-nonsend.rs:49:1\n+   |\n+LL | fn assert_send(_: impl Send) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0277]: `std::rc::Rc<()>` cannot be sent between threads safely\n+  --> $DIR/async-fn-nonsend.rs:54:5\n+   |\n+LL |     assert_send(non_send_temporary_in_match());\n+   |     ^^^^^^^^^^^ `std::rc::Rc<()>` cannot be sent between threads safely\n+   |\n+   = help: within `impl std::future::Future`, the trait `std::marker::Send` is not implemented for `std::rc::Rc<()>`\n+   = note: required because it appears within the type `impl std::fmt::Debug`\n+   = note: required because it appears within the type `{fn(impl std::fmt::Debug) -> std::option::Option<impl std::fmt::Debug> {std::option::Option::<impl std::fmt::Debug>::Some}, fn() -> impl std::fmt::Debug {non_send}, impl std::fmt::Debug, std::option::Option<impl std::fmt::Debug>, impl std::future::Future, ()}`\n+   = note: required because it appears within the type `[static generator@$DIR/async-fn-nonsend.rs:30:40: 39:2 {fn(impl std::fmt::Debug) -> std::option::Option<impl std::fmt::Debug> {std::option::Option::<impl std::fmt::Debug>::Some}, fn() -> impl std::fmt::Debug {non_send}, impl std::fmt::Debug, std::option::Option<impl std::fmt::Debug>, impl std::future::Future, ()}]`\n+   = note: required because it appears within the type `std::future::GenFuture<[static generator@$DIR/async-fn-nonsend.rs:30:40: 39:2 {fn(impl std::fmt::Debug) -> std::option::Option<impl std::fmt::Debug> {std::option::Option::<impl std::fmt::Debug>::Some}, fn() -> impl std::fmt::Debug {non_send}, impl std::fmt::Debug, std::option::Option<impl std::fmt::Debug>, impl std::future::Future, ()}]>`\n+   = note: required because it appears within the type `impl std::future::Future`\n+   = note: required because it appears within the type `impl std::future::Future`\n+note: required by `assert_send`\n+  --> $DIR/async-fn-nonsend.rs:49:1\n+   |\n+LL | fn assert_send(_: impl Send) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0277]: `dyn std::fmt::Write` cannot be sent between threads safely\n+  --> $DIR/async-fn-nonsend.rs:56:5\n+   |\n+LL |     assert_send(non_sync_with_method_call());\n+   |     ^^^^^^^^^^^ `dyn std::fmt::Write` cannot be sent between threads safely\n+   |\n+   = help: the trait `std::marker::Send` is not implemented for `dyn std::fmt::Write`\n+   = note: required because of the requirements on the impl of `std::marker::Send` for `&mut dyn std::fmt::Write`\n+   = note: required because it appears within the type `std::fmt::Formatter<'_>`\n+   = note: required because of the requirements on the impl of `std::marker::Send` for `&mut std::fmt::Formatter<'_>`\n+   = note: required because it appears within the type `for<'r, 's> {&'r mut std::fmt::Formatter<'s>, bool, impl std::future::Future, ()}`\n+   = note: required because it appears within the type `[static generator@$DIR/async-fn-nonsend.rs:41:38: 47:2 for<'r, 's> {&'r mut std::fmt::Formatter<'s>, bool, impl std::future::Future, ()}]`\n+   = note: required because it appears within the type `std::future::GenFuture<[static generator@$DIR/async-fn-nonsend.rs:41:38: 47:2 for<'r, 's> {&'r mut std::fmt::Formatter<'s>, bool, impl std::future::Future, ()}]>`\n+   = note: required because it appears within the type `impl std::future::Future`\n+   = note: required because it appears within the type `impl std::future::Future`\n+note: required by `assert_send`\n+  --> $DIR/async-fn-nonsend.rs:49:1\n+   |\n+LL | fn assert_send(_: impl Send) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0277]: `*mut (dyn std::ops::Fn() + 'static)` cannot be shared between threads safely\n+  --> $DIR/async-fn-nonsend.rs:56:5\n+   |\n+LL |     assert_send(non_sync_with_method_call());\n+   |     ^^^^^^^^^^^ `*mut (dyn std::ops::Fn() + 'static)` cannot be shared between threads safely\n+   |\n+   = help: within `std::fmt::ArgumentV1<'_>`, the trait `std::marker::Sync` is not implemented for `*mut (dyn std::ops::Fn() + 'static)`\n+   = note: required because it appears within the type `std::marker::PhantomData<*mut (dyn std::ops::Fn() + 'static)>`\n+   = note: required because it appears within the type `core::fmt::Void`\n+   = note: required because it appears within the type `&core::fmt::Void`\n+   = note: required because it appears within the type `std::fmt::ArgumentV1<'_>`\n+   = note: required because of the requirements on the impl of `std::marker::Send` for `std::slice::Iter<'_, std::fmt::ArgumentV1<'_>>`\n+   = note: required because it appears within the type `std::fmt::Formatter<'_>`\n+   = note: required because of the requirements on the impl of `std::marker::Send` for `&mut std::fmt::Formatter<'_>`\n+   = note: required because it appears within the type `for<'r, 's> {&'r mut std::fmt::Formatter<'s>, bool, impl std::future::Future, ()}`\n+   = note: required because it appears within the type `[static generator@$DIR/async-fn-nonsend.rs:41:38: 47:2 for<'r, 's> {&'r mut std::fmt::Formatter<'s>, bool, impl std::future::Future, ()}]`\n+   = note: required because it appears within the type `std::future::GenFuture<[static generator@$DIR/async-fn-nonsend.rs:41:38: 47:2 for<'r, 's> {&'r mut std::fmt::Formatter<'s>, bool, impl std::future::Future, ()}]>`\n+   = note: required because it appears within the type `impl std::future::Future`\n+   = note: required because it appears within the type `impl std::future::Future`\n+note: required by `assert_send`\n+  --> $DIR/async-fn-nonsend.rs:49:1\n+   |\n+LL | fn assert_send(_: impl Send) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "f07fc2fceb5b6aacd9829014e88bb8fcd8b7613c", "filename": "src/test/ui/async-await/async-fn-send-uses-nonsend.rs", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/e8f398623e1eea678f41f89a94300c23d0510ac2/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-send-uses-nonsend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f398623e1eea678f41f89a94300c23d0510ac2/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-send-uses-nonsend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-send-uses-nonsend.rs?ref=e8f398623e1eea678f41f89a94300c23d0510ac2", "patch": "@@ -0,0 +1,59 @@\n+// compile-pass\n+// edition:2018\n+// compile-flags: --crate-type lib\n+\n+#![feature(async_await)]\n+\n+use std::{\n+    cell::RefCell,\n+    fmt::Debug,\n+    rc::Rc,\n+};\n+\n+fn non_sync() -> impl Debug { RefCell::new(()) }\n+\n+fn non_send() -> impl Debug { Rc::new(()) }\n+\n+fn take_ref<T>(_: &T) {}\n+\n+async fn fut() {}\n+\n+async fn fut_arg<T>(_: T) {}\n+\n+async fn still_send() {\n+    fut().await;\n+    println!(\"{:?} {:?}\", non_send(), non_sync());\n+    fut().await;\n+    drop(non_send());\n+    drop(non_sync());\n+    fut().await;\n+    fut_arg(non_sync()).await;\n+\n+    // Note: all temporaries in `if let` and `match` scrutinee\n+    // are dropped at the *end* of the blocks, so using `non_send()`\n+    // in either of those positions with an await in the middle will\n+    // cause a `!Send` future. It might be nice in the future to allow\n+    // this for `Copy` types, since they can be \"dropped\" early without\n+    // affecting the end user.\n+    if let Some(_) = Some(non_sync()) {\n+        fut().await;\n+    }\n+    match Some(non_sync()) {\n+        Some(_) => fut().await,\n+        None => fut().await,\n+    }\n+\n+    let _ = non_send();\n+    fut().await;\n+\n+    {\n+        let _x = non_send();\n+    }\n+    fut().await;\n+}\n+\n+fn assert_send(_: impl Send) {}\n+\n+pub fn pass_assert() {\n+    assert_send(still_send());\n+}"}, {"sha": "913f1435c6adf5b77fed4a81b5ae5fe3424493cf", "filename": "src/test/ui/async-await/generics-and-bounds.rs", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/e8f398623e1eea678f41f89a94300c23d0510ac2/src%2Ftest%2Fui%2Fasync-await%2Fgenerics-and-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f398623e1eea678f41f89a94300c23d0510ac2/src%2Ftest%2Fui%2Fasync-await%2Fgenerics-and-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fgenerics-and-bounds.rs?ref=e8f398623e1eea678f41f89a94300c23d0510ac2", "patch": "@@ -0,0 +1,90 @@\n+// compile-pass\n+// edition:2018\n+// compile-flags: --crate-type lib\n+\n+#![feature(async_await)]\n+\n+use std::future::Future;\n+\n+pub async fn simple_generic<T>() {}\n+\n+pub trait Foo {\n+    fn foo(&self) {}\n+}\n+\n+struct FooType;\n+impl Foo for FooType {}\n+\n+pub async fn call_generic_bound<F: Foo>(f: F) {\n+    f.foo()\n+}\n+\n+pub async fn call_where_clause<F>(f: F)\n+where\n+    F: Foo,\n+{\n+    f.foo()\n+}\n+\n+pub async fn call_impl_trait(f: impl Foo) {\n+    f.foo()\n+}\n+\n+pub async fn call_with_ref(f: &impl Foo) {\n+    f.foo()\n+}\n+\n+pub fn async_fn_with_same_generic_params_unifies() {\n+    let mut a = call_generic_bound(FooType);\n+    a = call_generic_bound(FooType);\n+\n+    let mut b = call_where_clause(FooType);\n+    b = call_where_clause(FooType);\n+\n+    let mut c = call_impl_trait(FooType);\n+    c = call_impl_trait(FooType);\n+\n+    let f_one = FooType;\n+    let f_two = FooType;\n+    let mut d = call_with_ref(&f_one);\n+    d = call_with_ref(&f_two);\n+}\n+\n+pub fn simple_generic_block<T>() -> impl Future<Output = ()> {\n+    async move {}\n+}\n+\n+pub fn call_generic_bound_block<F: Foo>(f: F) -> impl Future<Output = ()> {\n+    async move { f.foo() }\n+}\n+\n+pub fn call_where_clause_block<F>(f: F) -> impl Future<Output = ()>\n+where\n+    F: Foo,\n+{\n+    async move { f.foo() }\n+}\n+\n+pub fn call_impl_trait_block(f: impl Foo) -> impl Future<Output = ()> {\n+    async move { f.foo() }\n+}\n+\n+pub fn call_with_ref_block<'a>(f: &'a (impl Foo + 'a)) -> impl Future<Output = ()> + 'a {\n+    async move { f.foo() }\n+}\n+\n+pub fn async_block_with_same_generic_params_unifies() {\n+    let mut a = call_generic_bound_block(FooType);\n+    a = call_generic_bound_block(FooType);\n+\n+    let mut b = call_where_clause_block(FooType);\n+    b = call_where_clause_block(FooType);\n+\n+    let mut c = call_impl_trait_block(FooType);\n+    c = call_impl_trait_block(FooType);\n+\n+    let f_one = FooType;\n+    let f_two = FooType;\n+    let mut d = call_with_ref_block(&f_one);\n+    d = call_with_ref_block(&f_two);\n+}"}, {"sha": "1db314a5aa20850470c13a6a598eaadc58c5fd52", "filename": "src/test/ui/async-await/no-async-const.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e8f398623e1eea678f41f89a94300c23d0510ac2/src%2Ftest%2Fui%2Fasync-await%2Fno-async-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f398623e1eea678f41f89a94300c23d0510ac2/src%2Ftest%2Fui%2Fasync-await%2Fno-async-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fno-async-const.rs?ref=e8f398623e1eea678f41f89a94300c23d0510ac2", "patch": "@@ -0,0 +1,8 @@\n+// compile-fail\n+// edition:2018\n+// compile-flags: --crate-type lib\n+\n+#![feature(async_await)]\n+\n+pub async const fn x() {}\n+//~^ ERROR expected one of `fn` or `unsafe`, found `const`"}, {"sha": "cdb1c6e2d7bd912d03d4c3317ffc8e1e48ef7082", "filename": "src/test/ui/async-await/no-async-const.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e8f398623e1eea678f41f89a94300c23d0510ac2/src%2Ftest%2Fui%2Fasync-await%2Fno-async-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8f398623e1eea678f41f89a94300c23d0510ac2/src%2Ftest%2Fui%2Fasync-await%2Fno-async-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fno-async-const.stderr?ref=e8f398623e1eea678f41f89a94300c23d0510ac2", "patch": "@@ -0,0 +1,8 @@\n+error: expected one of `fn` or `unsafe`, found `const`\n+  --> $DIR/no-async-const.rs:7:11\n+   |\n+LL | pub async const fn x() {}\n+   |           ^^^^^ expected one of `fn` or `unsafe` here\n+\n+error: aborting due to previous error\n+"}, {"sha": "9f09d2188c7c080f6a7e2380d2f39d42fa5fabc6", "filename": "src/test/ui/async-await/no-const-async.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e8f398623e1eea678f41f89a94300c23d0510ac2/src%2Ftest%2Fui%2Fasync-await%2Fno-const-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f398623e1eea678f41f89a94300c23d0510ac2/src%2Ftest%2Fui%2Fasync-await%2Fno-const-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fno-const-async.rs?ref=e8f398623e1eea678f41f89a94300c23d0510ac2", "patch": "@@ -0,0 +1,9 @@\n+// compile-fail\n+// edition:2018\n+// compile-flags: --crate-type lib\n+\n+#![feature(async_await)]\n+\n+pub const async fn x() {}\n+//~^ ERROR expected identifier, found reserved keyword `async`\n+//~^^ expected `:`, found keyword `fn`"}, {"sha": "693fbf186f91327bb5ad8f0d511baa1178b0fa70", "filename": "src/test/ui/async-await/no-const-async.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e8f398623e1eea678f41f89a94300c23d0510ac2/src%2Ftest%2Fui%2Fasync-await%2Fno-const-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8f398623e1eea678f41f89a94300c23d0510ac2/src%2Ftest%2Fui%2Fasync-await%2Fno-const-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fno-const-async.stderr?ref=e8f398623e1eea678f41f89a94300c23d0510ac2", "patch": "@@ -0,0 +1,18 @@\n+error: expected identifier, found reserved keyword `async`\n+  --> $DIR/no-const-async.rs:7:11\n+   |\n+LL | pub const async fn x() {}\n+   |           ^^^^^ expected identifier, found reserved keyword\n+help: you can escape reserved keywords to use them as identifiers\n+   |\n+LL | pub const r#async fn x() {}\n+   |           ^^^^^^^\n+\n+error: expected `:`, found keyword `fn`\n+  --> $DIR/no-const-async.rs:7:17\n+   |\n+LL | pub const async fn x() {}\n+   |                 ^^ expected `:`\n+\n+error: aborting due to 2 previous errors\n+"}]}