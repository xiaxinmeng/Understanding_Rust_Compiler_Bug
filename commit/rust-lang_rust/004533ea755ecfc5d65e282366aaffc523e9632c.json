{"sha": "004533ea755ecfc5d65e282366aaffc523e9632c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwNDUzM2VhNzU1ZWNmYzVkNjVlMjgyMzY2YWFmZmM1MjNlOTYzMmM=", "commit": {"author": {"name": "Murarth", "email": "murarth@gmail.com", "date": "2014-11-29T04:56:09Z"}, "committer": {"name": "Murarth", "email": "murarth@gmail.com", "date": "2014-11-29T16:50:48Z"}, "message": "Fix rustc panic on second compile_input", "tree": {"sha": "6da61627cfc0439e7eb220413eceed153be01df2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6da61627cfc0439e7eb220413eceed153be01df2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/004533ea755ecfc5d65e282366aaffc523e9632c", "comment_count": 9, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/004533ea755ecfc5d65e282366aaffc523e9632c", "html_url": "https://github.com/rust-lang/rust/commit/004533ea755ecfc5d65e282366aaffc523e9632c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/004533ea755ecfc5d65e282366aaffc523e9632c/comments", "author": {"login": "murarth", "id": 1332722, "node_id": "MDQ6VXNlcjEzMzI3MjI=", "avatar_url": "https://avatars.githubusercontent.com/u/1332722?v=4", "gravatar_id": "", "url": "https://api.github.com/users/murarth", "html_url": "https://github.com/murarth", "followers_url": "https://api.github.com/users/murarth/followers", "following_url": "https://api.github.com/users/murarth/following{/other_user}", "gists_url": "https://api.github.com/users/murarth/gists{/gist_id}", "starred_url": "https://api.github.com/users/murarth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/murarth/subscriptions", "organizations_url": "https://api.github.com/users/murarth/orgs", "repos_url": "https://api.github.com/users/murarth/repos", "events_url": "https://api.github.com/users/murarth/events{/privacy}", "received_events_url": "https://api.github.com/users/murarth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "murarth", "id": 1332722, "node_id": "MDQ6VXNlcjEzMzI3MjI=", "avatar_url": "https://avatars.githubusercontent.com/u/1332722?v=4", "gravatar_id": "", "url": "https://api.github.com/users/murarth", "html_url": "https://github.com/murarth", "followers_url": "https://api.github.com/users/murarth/followers", "following_url": "https://api.github.com/users/murarth/following{/other_user}", "gists_url": "https://api.github.com/users/murarth/gists{/gist_id}", "starred_url": "https://api.github.com/users/murarth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/murarth/subscriptions", "organizations_url": "https://api.github.com/users/murarth/orgs", "repos_url": "https://api.github.com/users/murarth/repos", "events_url": "https://api.github.com/users/murarth/events{/privacy}", "received_events_url": "https://api.github.com/users/murarth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29e928f2ba3501d37660314f6186d0e2ac18b9db", "url": "https://api.github.com/repos/rust-lang/rust/commits/29e928f2ba3501d37660314f6186d0e2ac18b9db", "html_url": "https://github.com/rust-lang/rust/commit/29e928f2ba3501d37660314f6186d0e2ac18b9db"}], "stats": {"total": 98, "additions": 98, "deletions": 0}, "files": [{"sha": "aeef16276e5b5e209396e49a9100103eae24c210", "filename": "src/librustc_trans/driver/driver.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/004533ea755ecfc5d65e282366aaffc523e9632c/src%2Flibrustc_trans%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/004533ea755ecfc5d65e282366aaffc523e9632c/src%2Flibrustc_trans%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdriver%2Fdriver.rs?ref=004533ea755ecfc5d65e282366aaffc523e9632c", "patch": "@@ -51,6 +51,12 @@ pub fn compile_input(sess: Session,\n                      outdir: &Option<Path>,\n                      output: &Option<Path>,\n                      addl_plugins: Option<Plugins>) {\n+    // These may be left in an incoherent state after a previous compile.\n+    // `clear_tables` and `get_ident_interner().clear()` can be used to free\n+    // memory, but they do not restore the initial state.\n+    syntax::ext::mtwt::reset_tables();\n+    token::reset_ident_interner();\n+\n     // We need nested scopes here, because the intermediate results can keep\n     // large chunks of memory alive and we want to free them as soon as\n     // possible to keep the peak memory usage low"}, {"sha": "6ba90bbebed01fa3928c2af41dadee177211797b", "filename": "src/libsyntax/ext/mtwt.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/004533ea755ecfc5d65e282366aaffc523e9632c/src%2Flibsyntax%2Fext%2Fmtwt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/004533ea755ecfc5d65e282366aaffc523e9632c/src%2Flibsyntax%2Fext%2Fmtwt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fmtwt.rs?ref=004533ea755ecfc5d65e282366aaffc523e9632c", "patch": "@@ -136,6 +136,16 @@ pub fn clear_tables() {\n     with_resolve_table_mut(|table| *table = HashMap::new());\n }\n \n+/// Reset the tables to their initial state\n+pub fn reset_tables() {\n+    with_sctable(|table| {\n+        *table.table.borrow_mut() = vec!(EmptyCtxt, IllegalCtxt);\n+        *table.mark_memo.borrow_mut() = HashMap::new();\n+        *table.rename_memo.borrow_mut() = HashMap::new();\n+    });\n+    with_resolve_table_mut(|table| *table = HashMap::new());\n+}\n+\n /// Add a value to the end of a vec, return its index\n fn idx_push<T>(vec: &mut Vec<T>, val: T) -> u32 {\n     vec.push(val);"}, {"sha": "37df2bf14c2e1cf6d52a37f2914b48587a64394c", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/004533ea755ecfc5d65e282366aaffc523e9632c/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/004533ea755ecfc5d65e282366aaffc523e9632c/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=004533ea755ecfc5d65e282366aaffc523e9632c", "patch": "@@ -564,6 +564,12 @@ pub fn get_ident_interner() -> Rc<IdentInterner> {\n     KEY.with(|k| k.clone())\n }\n \n+/// Reset the ident interner to its initial state.\n+pub fn reset_ident_interner() {\n+    let interner = get_ident_interner();\n+    interner.reset(mk_fresh_ident_interner());\n+}\n+\n /// Represents a string stored in the task-local interner. Because the\n /// interner lives for the life of the task, this can be safely treated as an\n /// immortal string, as long as it never crosses between tasks."}, {"sha": "590a04ce2210fca9dafa5f15b68d7eb733a8106e", "filename": "src/libsyntax/util/interner.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/004533ea755ecfc5d65e282366aaffc523e9632c/src%2Flibsyntax%2Futil%2Finterner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/004533ea755ecfc5d65e282366aaffc523e9632c/src%2Flibsyntax%2Futil%2Finterner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Finterner.rs?ref=004533ea755ecfc5d65e282366aaffc523e9632c", "patch": "@@ -214,6 +214,11 @@ impl StrInterner {\n         *self.map.borrow_mut() = HashMap::new();\n         *self.vect.borrow_mut() = Vec::new();\n     }\n+\n+    pub fn reset(&self, other: StrInterner) {\n+        *self.map.borrow_mut() = other.map.into_inner();\n+        *self.vect.borrow_mut() = other.vect.into_inner();\n+    }\n }\n \n #[cfg(test)]"}, {"sha": "9f3ec78465b259706af6e09198447078cbbfa058", "filename": "src/test/run-make/issue-19371/Makefile", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/004533ea755ecfc5d65e282366aaffc523e9632c/src%2Ftest%2Frun-make%2Fissue-19371%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/004533ea755ecfc5d65e282366aaffc523e9632c/src%2Ftest%2Frun-make%2Fissue-19371%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-19371%2FMakefile?ref=004533ea755ecfc5d65e282366aaffc523e9632c", "patch": "@@ -0,0 +1,9 @@\n+-include ../tools.mk\n+\n+# This test ensures that rustc compile_input can be called twice in one task\n+# without causing a panic.\n+# The program needs the path to rustc to get sysroot.\n+\n+all:\n+\t$(RUSTC) foo.rs\n+\t$(call RUN,foo $(TMPDIR) $(RUSTC))"}, {"sha": "715fae314b673fc2c2767ebd196956c2c0755e12", "filename": "src/test/run-make/issue-19371/foo.rs", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/004533ea755ecfc5d65e282366aaffc523e9632c/src%2Ftest%2Frun-make%2Fissue-19371%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/004533ea755ecfc5d65e282366aaffc523e9632c/src%2Ftest%2Frun-make%2Fissue-19371%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-19371%2Ffoo.rs?ref=004533ea755ecfc5d65e282366aaffc523e9632c", "patch": "@@ -0,0 +1,62 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+extern crate rustc;\n+extern crate rustc_trans;\n+extern crate syntax;\n+\n+use rustc::session::{build_session, Session};\n+use rustc::session::config::{basic_options, build_configuration, OutputTypeExe};\n+use rustc_trans::driver::driver::{Input, StrInput, compile_input};\n+use syntax::diagnostics::registry::Registry;\n+\n+fn main() {\n+    let src = r#\"\n+    fn main() {}\n+    \"#;\n+\n+    let args = std::os::args();\n+\n+    if args.len() < 4 {\n+        panic!(\"expected rustc path\");\n+    }\n+\n+    let tmpdir = Path::new(args[1].as_slice());\n+\n+    let mut sysroot = Path::new(args[3].as_slice());\n+    sysroot.pop();\n+    sysroot.pop();\n+\n+    compile(src.to_string(), tmpdir.join(\"out\"), sysroot.clone());\n+\n+    compile(src.to_string(), tmpdir.join(\"out\"), sysroot.clone());\n+}\n+\n+fn basic_sess(sysroot: Path) -> Session {\n+    let mut opts = basic_options();\n+    opts.output_types = vec![OutputTypeExe];\n+    opts.maybe_sysroot = Some(sysroot);\n+\n+    let descriptions = Registry::new(&rustc::DIAGNOSTICS);\n+    let sess = build_session(opts, None, descriptions);\n+    sess\n+}\n+\n+fn compile(code: String, output: Path, sysroot: Path) {\n+    let sess = basic_sess(sysroot);\n+    let cfg = build_configuration(&sess);\n+\n+    compile_input(sess,\n+            cfg,\n+            &StrInput(code),\n+            &None,\n+            &Some(output),\n+            None);\n+}"}]}