{"sha": "42396b1fac0435254f24e8393a27f76019b44219", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyMzk2YjFmYWMwNDM1MjU0ZjI0ZTgzOTNhMjdmNzYwMTliNDQyMTk=", "commit": {"author": {"name": "Donough Liu", "email": "ldm2993593805@163.com", "date": "2020-05-07T05:12:47Z"}, "committer": {"name": "Donough Liu", "email": "ldm2993593805@163.com", "date": "2020-05-09T03:02:31Z"}, "message": "Test for coercion between (FnDef | Closure) and (FnDef | Closure)", "tree": {"sha": "b34cf0f09da36affc619ad9c03043e0579af07b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b34cf0f09da36affc619ad9c03043e0579af07b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/42396b1fac0435254f24e8393a27f76019b44219", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/42396b1fac0435254f24e8393a27f76019b44219", "html_url": "https://github.com/rust-lang/rust/commit/42396b1fac0435254f24e8393a27f76019b44219", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/42396b1fac0435254f24e8393a27f76019b44219/comments", "author": {"login": "ldm0", "id": 31354274, "node_id": "MDQ6VXNlcjMxMzU0Mjc0", "avatar_url": "https://avatars.githubusercontent.com/u/31354274?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ldm0", "html_url": "https://github.com/ldm0", "followers_url": "https://api.github.com/users/ldm0/followers", "following_url": "https://api.github.com/users/ldm0/following{/other_user}", "gists_url": "https://api.github.com/users/ldm0/gists{/gist_id}", "starred_url": "https://api.github.com/users/ldm0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ldm0/subscriptions", "organizations_url": "https://api.github.com/users/ldm0/orgs", "repos_url": "https://api.github.com/users/ldm0/repos", "events_url": "https://api.github.com/users/ldm0/events{/privacy}", "received_events_url": "https://api.github.com/users/ldm0/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ldm0", "id": 31354274, "node_id": "MDQ6VXNlcjMxMzU0Mjc0", "avatar_url": "https://avatars.githubusercontent.com/u/31354274?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ldm0", "html_url": "https://github.com/ldm0", "followers_url": "https://api.github.com/users/ldm0/followers", "following_url": "https://api.github.com/users/ldm0/following{/other_user}", "gists_url": "https://api.github.com/users/ldm0/gists{/gist_id}", "starred_url": "https://api.github.com/users/ldm0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ldm0/subscriptions", "organizations_url": "https://api.github.com/users/ldm0/orgs", "repos_url": "https://api.github.com/users/ldm0/repos", "events_url": "https://api.github.com/users/ldm0/events{/privacy}", "received_events_url": "https://api.github.com/users/ldm0/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59cc5b1ba3e0996a6d80d1c229eb89900533cb98", "url": "https://api.github.com/repos/rust-lang/rust/commits/59cc5b1ba3e0996a6d80d1c229eb89900533cb98", "html_url": "https://github.com/rust-lang/rust/commit/59cc5b1ba3e0996a6d80d1c229eb89900533cb98"}], "stats": {"total": 449, "additions": 431, "deletions": 18}, "files": [{"sha": "9133a292103089ed8e4221aad2a9d4f8c8f0f237", "filename": "src/test/ui/closures/closure_cap_coerce_many_fail.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/42396b1fac0435254f24e8393a27f76019b44219/src%2Ftest%2Fui%2Fclosures%2Fclosure_cap_coerce_many_fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42396b1fac0435254f24e8393a27f76019b44219/src%2Ftest%2Fui%2Fclosures%2Fclosure_cap_coerce_many_fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure_cap_coerce_many_fail.rs?ref=42396b1fac0435254f24e8393a27f76019b44219", "patch": "@@ -0,0 +1,39 @@\n+fn add(a: i32, b: i32) -> i32 {\n+    a + b\n+}\n+fn main() {\n+    // We shouldn't coerce capturing closure to a function\n+    let cap = 0;\n+    let _ = match \"+\" {\n+        \"+\" => add,\n+        \"-\" => |a, b| (a - b + cap) as i32,\n+        _ => unimplemented!(),\n+    };\n+    //~^^^ ERROR `match` arms have incompatible types\n+\n+\n+    // We shouldn't coerce capturing closure to a non-capturing closure\n+    let _ = match \"+\" {\n+        \"+\" => |a, b| (a + b) as i32,\n+        \"-\" => |a, b| (a - b + cap) as i32,\n+        _ => unimplemented!(),\n+    };\n+    //~^^^ ERROR `match` arms have incompatible types\n+\n+\n+    // We shouldn't coerce non-capturing closure to a capturing closure\n+    let _ = match \"+\" {\n+        \"+\" => |a, b| (a + b + cap) as i32,\n+        \"-\" => |a, b| (a - b) as i32,\n+        _ => unimplemented!(),\n+    };\n+    //~^^^ ERROR `match` arms have incompatible types\n+\n+    // We shouldn't coerce capturing closure to a capturing closure\n+    let _ = match \"+\" {\n+        \"+\" => |a, b| (a + b + cap) as i32,\n+        \"-\" => |a, b| (a - b + cap) as i32,\n+        _ => unimplemented!(),\n+    };\n+    //~^^^ ERROR `match` arms have incompatible types\n+}"}, {"sha": "63eb0bd8fabad3d4bc4ba84bb021832474f22088", "filename": "src/test/ui/closures/closure_cap_coerce_many_fail.stderr", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/42396b1fac0435254f24e8393a27f76019b44219/src%2Ftest%2Fui%2Fclosures%2Fclosure_cap_coerce_many_fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/42396b1fac0435254f24e8393a27f76019b44219/src%2Ftest%2Fui%2Fclosures%2Fclosure_cap_coerce_many_fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure_cap_coerce_many_fail.stderr?ref=42396b1fac0435254f24e8393a27f76019b44219", "patch": "@@ -0,0 +1,73 @@\n+error[E0308]: `match` arms have incompatible types\n+  --> $DIR/closure_cap_coerce_many_fail.rs:9:16\n+   |\n+LL |       let _ = match \"+\" {\n+   |  _____________-\n+LL | |         \"+\" => add,\n+   | |                --- this is found to be of type `fn(i32, i32) -> i32 {add}`\n+LL | |         \"-\" => |a, b| (a - b + cap) as i32,\n+   | |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected fn item, found closure\n+LL | |         _ => unimplemented!(),\n+LL | |     };\n+   | |_____- `match` arms have incompatible types\n+   |\n+   = note: expected type `fn(i32, i32) -> i32 {add}`\n+           found closure `[closure@$DIR/closure_cap_coerce_many_fail.rs:9:16: 9:43 cap:_]`\n+\n+error[E0308]: `match` arms have incompatible types\n+  --> $DIR/closure_cap_coerce_many_fail.rs:18:16\n+   |\n+LL |       let _ = match \"+\" {\n+   |  _____________-\n+LL | |         \"+\" => |a, b| (a + b) as i32,\n+   | |                --------------------- this is found to be of type `[closure@$DIR/closure_cap_coerce_many_fail.rs:17:16: 17:37]`\n+LL | |         \"-\" => |a, b| (a - b + cap) as i32,\n+   | |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected closure, found a different closure\n+LL | |         _ => unimplemented!(),\n+LL | |     };\n+   | |_____- `match` arms have incompatible types\n+   |\n+   = note: expected type `[closure@$DIR/closure_cap_coerce_many_fail.rs:17:16: 17:37]`\n+           found closure `[closure@$DIR/closure_cap_coerce_many_fail.rs:18:16: 18:43 cap:_]`\n+   = note: no two closures, even if identical, have the same type\n+   = help: consider boxing your closure and/or using it as a trait object\n+\n+error[E0308]: `match` arms have incompatible types\n+  --> $DIR/closure_cap_coerce_many_fail.rs:27:16\n+   |\n+LL |       let _ = match \"+\" {\n+   |  _____________-\n+LL | |         \"+\" => |a, b| (a + b + cap) as i32,\n+   | |                --------------------------- this is found to be of type `[closure@$DIR/closure_cap_coerce_many_fail.rs:26:16: 26:43 cap:_]`\n+LL | |         \"-\" => |a, b| (a - b) as i32,\n+   | |                ^^^^^^^^^^^^^^^^^^^^^ expected closure, found a different closure\n+LL | |         _ => unimplemented!(),\n+LL | |     };\n+   | |_____- `match` arms have incompatible types\n+   |\n+   = note: expected type `[closure@$DIR/closure_cap_coerce_many_fail.rs:26:16: 26:43 cap:_]`\n+           found closure `[closure@$DIR/closure_cap_coerce_many_fail.rs:27:16: 27:37]`\n+   = note: no two closures, even if identical, have the same type\n+   = help: consider boxing your closure and/or using it as a trait object\n+\n+error[E0308]: `match` arms have incompatible types\n+  --> $DIR/closure_cap_coerce_many_fail.rs:35:16\n+   |\n+LL |       let _ = match \"+\" {\n+   |  _____________-\n+LL | |         \"+\" => |a, b| (a + b + cap) as i32,\n+   | |                --------------------------- this is found to be of type `[closure@$DIR/closure_cap_coerce_many_fail.rs:34:16: 34:43 cap:_]`\n+LL | |         \"-\" => |a, b| (a - b + cap) as i32,\n+   | |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected closure, found a different closure\n+LL | |         _ => unimplemented!(),\n+LL | |     };\n+   | |_____- `match` arms have incompatible types\n+   |\n+   = note: expected type `[closure@$DIR/closure_cap_coerce_many_fail.rs:34:16: 34:43 cap:_]`\n+           found closure `[closure@$DIR/closure_cap_coerce_many_fail.rs:35:16: 35:43 cap:_]`\n+   = note: no two closures, even if identical, have the same type\n+   = help: consider boxing your closure and/or using it as a trait object\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "ce461810ec990239c82cab6cfa126a0e11e9e45c", "filename": "src/test/ui/closures/closure_no_cap_coerce_many_check_pass.rs", "status": "added", "additions": 166, "deletions": 0, "changes": 166, "blob_url": "https://github.com/rust-lang/rust/blob/42396b1fac0435254f24e8393a27f76019b44219/src%2Ftest%2Fui%2Fclosures%2Fclosure_no_cap_coerce_many_check_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42396b1fac0435254f24e8393a27f76019b44219/src%2Ftest%2Fui%2Fclosures%2Fclosure_no_cap_coerce_many_check_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure_no_cap_coerce_many_check_pass.rs?ref=42396b1fac0435254f24e8393a27f76019b44219", "patch": "@@ -0,0 +1,166 @@\n+// check-pass\n+// Ensure non-capturing Closure passes CoerceMany.\n+fn foo(x: usize) -> usize {\n+    0\n+}\n+\n+fn bar(x: usize) -> usize {\n+    1\n+}\n+\n+fn main() {\n+    // One FnDef and one non-capturing Closure\n+    let _ = match 0 {\n+        0 => foo,\n+        2 => |a| 2,\n+        _ => unimplemented!(),\n+    };\n+\n+    let _ = match 0 {\n+        2 => |a| 2,\n+        0 => foo,\n+        _ => unimplemented!(),\n+    };\n+\n+    let _ = [foo, |a| 2];\n+    let _ = [|a| 2, foo];\n+\n+\n+\n+    // Two FnDefs and one non-capturing Closure\n+    let _ = match 0 {\n+        0 => foo,\n+        1 => bar,\n+        2 => |a| 2,\n+        _ => unimplemented!(),\n+    };\n+\n+    let _ = match 0 {\n+        0 => foo,\n+        2 => |a| 2,\n+        1 => bar,\n+        _ => unimplemented!(),\n+    };\n+\n+    let _ = match 0 {\n+        2 => |a| 2,\n+        0 => foo,\n+        1 => bar,\n+        _ => unimplemented!(),\n+    };\n+\n+    let _ = [foo, bar, |a| 2];\n+    let _ = [foo, |a| 2, bar];\n+    let _ = [|a| 2, foo, bar];\n+\n+\n+\n+    // One FnDef and two non-capturing Closures\n+    let _ = match 0 {\n+        0 => foo,\n+        1 => |a| 1,\n+        2 => |a| 2,\n+        _ => unimplemented!(),\n+    };\n+\n+    let _ = match 0 {\n+        1 => |a| 1,\n+        0 => foo,\n+        2 => |a| 2,\n+        _ => unimplemented!(),\n+    };\n+\n+    let _ = match 0 {\n+        1 => |a| 1,\n+        2 => |a| 2,\n+        0 => foo,\n+        _ => unimplemented!(),\n+    };\n+\n+    let _ = [foo, |a| 1, |a| 2];\n+    let _ = [|a| 1, foo, |a| 2];\n+    let _ = [|a| 1, |a| 2, foo];\n+\n+\n+\n+    // Three non-capturing Closures\n+    let _ = match 0 {\n+        0 => |a: usize| 0,\n+        1 => |a| 1,\n+        2 => |a| 2,\n+        _ => unimplemented!(),\n+    };\n+\n+    let _ = [|a: usize| 0, |a| 1, |a| 2];\n+\n+\n+\n+    // Three non-capturing Closures variable\n+    let clo0 = |a: usize| 0;\n+    let clo1 = |a| 1;\n+    let clo2 = |a| 2;\n+    let _ = match 0 {\n+        0 => clo0,\n+        1 => clo1,\n+        2 => clo2,\n+        _ => unimplemented!(),\n+    };\n+\n+    let clo0 = |a: usize| 0;\n+    let clo1 = |a| 1;\n+    let clo2 = |a| 2;\n+    let _ = [clo0, clo1, clo2];\n+\n+\n+\n+    // --- Function pointer related part\n+\n+    // Closure is not in a variable\n+    type FnPointer = fn(usize) -> usize;\n+\n+    let _ = match 0 {\n+        0 => foo as FnPointer,\n+        2 => |a| 2,\n+        _ => unimplemented!(),\n+    };\n+    let _ = match 0 {\n+        2 => |a| 2,\n+        0 => foo as FnPointer,\n+        _ => unimplemented!(),\n+    };\n+    let _ = [foo as FnPointer, |a| 2];\n+    let _ = [|a| 2, foo as FnPointer];\n+    let _ = [foo, bar, |x| x];\n+    let _ = [foo as FnPointer, bar, |x| x];\n+    let _ = [foo, bar as FnPointer, |x| x];\n+    let _ = [foo, bar, (|x| x) as FnPointer];\n+    let _ = [foo as FnPointer, bar as FnPointer, |x| x];\n+\n+    // Closure is in a variable\n+    let x = |a| 2;\n+    let _ = match 0 {\n+        0 => foo as FnPointer,\n+        2 => x,\n+        _ => unimplemented!(),\n+    };\n+    let x = |a| 2;\n+    let _ = match 0 {\n+        2 => x,\n+        0 => foo as FnPointer,\n+        _ => unimplemented!(),\n+    };\n+    let x = |a| 2;\n+    let _ = [foo as FnPointer, x];\n+    let _ = [x, foo as FnPointer];\n+\n+    let x = |a| 2;\n+    let _ = [foo, bar, x];\n+    let x: FnPointer = |a| 2;\n+    let _ = [foo, bar, x];\n+    let x = |a| 2;\n+    let _ = [foo, bar as FnPointer, x];\n+    let x = |a| 2;\n+    let _ = [foo as FnPointer, bar, x];\n+    let x = |a| 2;\n+    let _ = [foo as FnPointer, bar as FnPointer, x];\n+}"}, {"sha": "3c5fe8a55027656ea72970caa1eb35bb1cd01421", "filename": "src/test/ui/closures/closure_no_cap_coerce_many_run_pass.rs", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/42396b1fac0435254f24e8393a27f76019b44219/src%2Ftest%2Fui%2Fclosures%2Fclosure_no_cap_coerce_many_run_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42396b1fac0435254f24e8393a27f76019b44219/src%2Ftest%2Fui%2Fclosures%2Fclosure_no_cap_coerce_many_run_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure_no_cap_coerce_many_run_pass.rs?ref=42396b1fac0435254f24e8393a27f76019b44219", "patch": "@@ -0,0 +1,59 @@\n+// run-pass\n+// Ensure non-capturing Closure passing CoerceMany work correctly.\n+fn foo(_: usize) -> usize {\n+    0\n+}\n+\n+fn bar(_: usize) -> usize {\n+    1\n+}\n+\n+fn add(a: i32, b: i32) -> i32 {\n+    a + b\n+}\n+\n+fn main() {\n+    // Coerce result check\n+\n+    type FnPointer = fn(usize) -> usize;\n+\n+    let c = |x| x;\n+    let c_pointer: FnPointer = c;\n+    assert_eq!(c_pointer(42), 42);\n+\n+    let f = match 0 {\n+        0 => foo,\n+        1 => |_| 1,\n+        _ => unimplemented!(),\n+    };\n+    assert_eq!(f(42), 0);\n+\n+    let f = match 2 {\n+        2 => |_| 2,\n+        0 => foo,\n+        _ => unimplemented!(),\n+    };\n+    assert_eq!(f(42), 2);\n+\n+    let f = match 1 {\n+        0 => foo,\n+        1 => bar,\n+        2 => |_| 2,\n+        _ => unimplemented!(),\n+    };\n+    assert_eq!(f(42), 1);\n+\n+    let clo0 = |_: usize| 0;\n+    let clo1 = |_| 1;\n+    let clo2 = |_| 2;\n+    let f = match 0 {\n+        0 => clo0,\n+        1 => clo1,\n+        2 => clo2,\n+        _ => unimplemented!(),\n+    };\n+    assert_eq!(f(42), 0);\n+\n+    let funcs = [add, |a, b| (a - b) as i32];\n+    assert_eq!([funcs[0](5, 5), funcs[1](5, 5)], [10, 0]);\n+}"}, {"sha": "76a0f2914103d5c304b4e70402f68664bed980f8", "filename": "src/test/ui/closures/closure_no_cap_coerce_many_unsafe_0.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/42396b1fac0435254f24e8393a27f76019b44219/src%2Ftest%2Fui%2Fclosures%2Fclosure_no_cap_coerce_many_unsafe_0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42396b1fac0435254f24e8393a27f76019b44219/src%2Ftest%2Fui%2Fclosures%2Fclosure_no_cap_coerce_many_unsafe_0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure_no_cap_coerce_many_unsafe_0.rs?ref=42396b1fac0435254f24e8393a27f76019b44219", "patch": "@@ -0,0 +1,22 @@\n+// Ensure we get unsafe function after coercion\n+unsafe fn add(a: i32, b: i32) -> i32 {\n+    a + b\n+}\n+fn main() {\n+    // We can coerce non-capturing closure to unsafe function\n+    let foo = match \"+\" {\n+        \"+\" => add,\n+        \"-\" => |a, b| (a - b) as i32,\n+        _ => unimplemented!(),\n+    };\n+    let result: i32 = foo(5, 5); //~ ERROR call to unsafe function\n+\n+\n+    // We can coerce unsafe function to non-capturing closure\n+    let foo = match \"+\" {\n+        \"-\" => |a, b| (a - b) as i32,\n+        \"+\" => add,\n+        _ => unimplemented!(),\n+    };\n+    let result: i32 = foo(5, 5); //~ ERROR call to unsafe function\n+}"}, {"sha": "190b4792ebcbc5e563fb973e759584f79d179d90", "filename": "src/test/ui/closures/closure_no_cap_coerce_many_unsafe_0.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/42396b1fac0435254f24e8393a27f76019b44219/src%2Ftest%2Fui%2Fclosures%2Fclosure_no_cap_coerce_many_unsafe_0.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/42396b1fac0435254f24e8393a27f76019b44219/src%2Ftest%2Fui%2Fclosures%2Fclosure_no_cap_coerce_many_unsafe_0.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure_no_cap_coerce_many_unsafe_0.stderr?ref=42396b1fac0435254f24e8393a27f76019b44219", "patch": "@@ -0,0 +1,19 @@\n+error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+  --> $DIR/closure_no_cap_coerce_many_unsafe_0.rs:12:23\n+   |\n+LL |     let result: i32 = foo(5, 5);\n+   |                       ^^^^^^^^^ call to unsafe function\n+   |\n+   = note: consult the function's documentation for information on how to avoid undefined behavior\n+\n+error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+  --> $DIR/closure_no_cap_coerce_many_unsafe_0.rs:21:23\n+   |\n+LL |     let result: i32 = foo(5, 5);\n+   |                       ^^^^^^^^^ call to unsafe function\n+   |\n+   = note: consult the function's documentation for information on how to avoid undefined behavior\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0133`."}, {"sha": "a6d6125a1b9f9d689bb3242dac4ad04d8f5f128e", "filename": "src/test/ui/closures/closure_no_cap_coerce_many_unsafe_1.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/42396b1fac0435254f24e8393a27f76019b44219/src%2Ftest%2Fui%2Fclosures%2Fclosure_no_cap_coerce_many_unsafe_1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42396b1fac0435254f24e8393a27f76019b44219/src%2Ftest%2Fui%2Fclosures%2Fclosure_no_cap_coerce_many_unsafe_1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure_no_cap_coerce_many_unsafe_1.rs?ref=42396b1fac0435254f24e8393a27f76019b44219", "patch": "@@ -0,0 +1,23 @@\n+// run-pass\n+// Ensure we get correct unsafe function after coercion\n+unsafe fn add(a: i32, b: i32) -> i32 {\n+    a + b\n+}\n+fn main() {\n+    // We can coerce non-capturing closure to unsafe function\n+    let foo = match \"+\" {\n+        \"+\" => add,\n+        \"-\" => |a, b| (a - b) as i32,\n+        _ => unimplemented!(),\n+    };\n+    assert_eq!(unsafe { foo(5, 5) }, 10);\n+\n+\n+    // We can coerce unsafe function to non-capturing closure\n+    let foo = match \"-\" {\n+        \"-\" => |a, b| (a - b) as i32,\n+        \"+\" => add,\n+        _ => unimplemented!(),\n+    };\n+    assert_eq!(unsafe { foo(5, 5) }, 0);\n+}"}, {"sha": "cd8dc486906bbb0559a79bb3bee3b79d5fc6cd52", "filename": "src/test/ui/closures/issue-46742.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/42396b1fac0435254f24e8393a27f76019b44219/src%2Ftest%2Fui%2Fclosures%2Fissue-46742.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42396b1fac0435254f24e8393a27f76019b44219/src%2Ftest%2Fui%2Fclosures%2Fissue-46742.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fissue-46742.rs?ref=42396b1fac0435254f24e8393a27f76019b44219", "patch": "@@ -0,0 +1,9 @@\n+// check-pass\n+fn main() {\n+    let _: i32 = (match \"\" {\n+        \"+\" => ::std::ops::Add::add,\n+        \"-\" => ::std::ops::Sub::sub,\n+        \"<\" => |a,b| (a < b) as i32,\n+        _ => unimplemented!(),\n+    })(5, 5);\n+}"}, {"sha": "ce1f2a0364764b3da61064f4e79989865f0dbc86", "filename": "src/test/ui/closures/issue-48109.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/42396b1fac0435254f24e8393a27f76019b44219/src%2Ftest%2Fui%2Fclosures%2Fissue-48109.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42396b1fac0435254f24e8393a27f76019b44219/src%2Ftest%2Fui%2Fclosures%2Fissue-48109.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fissue-48109.rs?ref=42396b1fac0435254f24e8393a27f76019b44219", "patch": "@@ -0,0 +1,14 @@\n+// check-pass\n+fn useful(i: usize) -> usize {\n+    i\n+}\n+\n+fn useful2(i: usize) -> usize {\n+    i\n+}\n+\n+fn main() {\n+    for f in &[useful, useful2, |x| x] {\n+        println!(\"{}\", f(6));\n+    }\n+}"}, {"sha": "7df036c8e3a45ddbcb8b3cc1aefc57dca24d81ea", "filename": "src/test/ui/issues/issue-24036.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42396b1fac0435254f24e8393a27f76019b44219/src%2Ftest%2Fui%2Fissues%2Fissue-24036.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42396b1fac0435254f24e8393a27f76019b44219/src%2Ftest%2Fui%2Fissues%2Fissue-24036.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24036.rs?ref=42396b1fac0435254f24e8393a27f76019b44219", "patch": "@@ -10,7 +10,7 @@ fn closure_from_match() {\n         2 => |c| c - 1,\n         _ => |c| c - 1\n     };\n-    //~^^^ ERROR `match` arms have incompatible types\n+    //~^^^^ ERROR type annotations needed\n }\n \n fn main() { }"}, {"sha": "e6b8367f74fb56830708e4251c91ed79e4161d6a", "filename": "src/test/ui/issues/issue-24036.stderr", "status": "modified", "additions": 6, "deletions": 17, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/42396b1fac0435254f24e8393a27f76019b44219/src%2Ftest%2Fui%2Fissues%2Fissue-24036.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/42396b1fac0435254f24e8393a27f76019b44219/src%2Ftest%2Fui%2Fissues%2Fissue-24036.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24036.stderr?ref=42396b1fac0435254f24e8393a27f76019b44219", "patch": "@@ -11,24 +11,13 @@ LL |     x = |c| c + 1;\n    = note: no two closures, even if identical, have the same type\n    = help: consider boxing your closure and/or using it as a trait object\n \n-error[E0308]: `match` arms have incompatible types\n-  --> $DIR/issue-24036.rs:10:14\n+error[E0282]: type annotations needed\n+  --> $DIR/issue-24036.rs:9:15\n    |\n-LL |       let x = match 1usize {\n-   |  _____________-\n-LL | |         1 => |c| c + 1,\n-   | |              --------- this is found to be of type `[closure@$DIR/issue-24036.rs:9:14: 9:23]`\n-LL | |         2 => |c| c - 1,\n-   | |              ^^^^^^^^^ expected closure, found a different closure\n-LL | |         _ => |c| c - 1\n-LL | |     };\n-   | |_____- `match` arms have incompatible types\n-   |\n-   = note: expected type `[closure@$DIR/issue-24036.rs:9:14: 9:23]`\n-           found closure `[closure@$DIR/issue-24036.rs:10:14: 10:23]`\n-   = note: no two closures, even if identical, have the same type\n-   = help: consider boxing your closure and/or using it as a trait object\n+LL |         1 => |c| c + 1,\n+   |               ^ consider giving this closure parameter a type\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0308`.\n+Some errors have detailed explanations: E0282, E0308.\n+For more information about an error, try `rustc --explain E0282`."}]}