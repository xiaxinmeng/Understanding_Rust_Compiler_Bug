{"sha": "4e4306c6dfa7a8dd43a7ee9bbc531f4b14b03aec", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlNDMwNmM2ZGZhN2E4ZGQ0M2E3ZWU5YmJjNTMxZjRiMTRiMDNhZWM=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2016-08-29T04:46:55Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2016-09-01T02:55:27Z"}, "message": "Thread visibility info through save-analysis and filter save-analysis-api on it.", "tree": {"sha": "2d6aaf9bc361fbb3b20ffa025218af291d08bc8f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d6aaf9bc361fbb3b20ffa025218af291d08bc8f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e4306c6dfa7a8dd43a7ee9bbc531f4b14b03aec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e4306c6dfa7a8dd43a7ee9bbc531f4b14b03aec", "html_url": "https://github.com/rust-lang/rust/commit/4e4306c6dfa7a8dd43a7ee9bbc531f4b14b03aec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e4306c6dfa7a8dd43a7ee9bbc531f4b14b03aec/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7dfc89f854f629816253f84ac0cc15d7792d63f", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7dfc89f854f629816253f84ac0cc15d7792d63f", "html_url": "https://github.com/rust-lang/rust/commit/c7dfc89f854f629816253f84ac0cc15d7792d63f"}], "stats": {"total": 357, "additions": 235, "deletions": 122}, "files": [{"sha": "b882765788893045f4b465f9147e7019636d717f", "filename": "src/librustc_save_analysis/data.rs", "status": "modified", "additions": 43, "deletions": 4, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/4e4306c6dfa7a8dd43a7ee9bbc531f4b14b03aec/src%2Flibrustc_save_analysis%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e4306c6dfa7a8dd43a7ee9bbc531f4b14b03aec/src%2Flibrustc_save_analysis%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdata.rs?ref=4e4306c6dfa7a8dd43a7ee9bbc531f4b14b03aec", "patch": "@@ -13,8 +13,9 @@\n //! The `Dump` trait can be used together with `DumpVisitor` in order to\n //! retrieve the data from a crate.\n \n+use rustc::hir;\n use rustc::hir::def_id::DefId;\n-use syntax::ast::{CrateNum, NodeId};\n+use syntax::ast::{self, CrateNum, NodeId};\n use syntax_pos::Span;\n \n pub struct CrateData {\n@@ -76,6 +77,35 @@ pub enum Data {\n     VariableRefData(VariableRefData),\n }\n \n+#[derive(Eq, PartialEq, Clone, Copy, Debug, RustcEncodable)]\n+pub enum Visibility {\n+    Public,\n+    Restricted,\n+    Inherited,\n+}\n+\n+impl<'a> From<&'a ast::Visibility> for Visibility {\n+    fn from(v: &'a ast::Visibility) -> Visibility {\n+        match *v {\n+            ast::Visibility::Public => Visibility::Public,\n+            ast::Visibility::Crate(_) => Visibility::Restricted,\n+            ast::Visibility::Restricted { .. } => Visibility::Restricted,\n+            ast::Visibility::Inherited => Visibility::Inherited,\n+        }\n+    }\n+}\n+\n+impl<'a> From<&'a hir::Visibility> for Visibility {\n+    fn from(v: &'a hir::Visibility) -> Visibility {\n+        match *v {\n+            hir::Visibility::Public => Visibility::Public,\n+            hir::Visibility::Crate => Visibility::Restricted,\n+            hir::Visibility::Restricted { .. } => Visibility::Restricted,\n+            hir::Visibility::Inherited => Visibility::Inherited,\n+        }\n+    }\n+}\n+\n /// Data for the prelude of a crate.\n #[derive(Debug, RustcEncodable)]\n pub struct CratePreludeData {\n@@ -103,7 +133,7 @@ pub struct EnumData {\n     pub span: Span,\n     pub scope: NodeId,\n     pub variants: Vec<NodeId>,\n-\n+    pub visibility: Visibility,\n }\n \n /// Data for extern crates.\n@@ -135,6 +165,7 @@ pub struct FunctionData {\n     pub span: Span,\n     pub scope: NodeId,\n     pub value: String,\n+    pub visibility: Visibility,\n }\n \n /// Data about a function call.\n@@ -215,6 +246,7 @@ pub struct MethodData {\n     pub scope: NodeId,\n     pub value: String,\n     pub decl_id: Option<DefId>,\n+    pub visibility: Visibility,\n }\n \n /// Data for modules.\n@@ -227,6 +259,7 @@ pub struct ModData {\n     pub scope: NodeId,\n     pub filename: String,\n     pub items: Vec<NodeId>,\n+    pub visibility: Visibility,\n }\n \n /// Data for a reference to a module.\n@@ -248,6 +281,7 @@ pub struct StructData {\n     pub scope: NodeId,\n     pub value: String,\n     pub fields: Vec<NodeId>,\n+    pub visibility: Visibility,\n }\n \n #[derive(Debug, RustcEncodable)]\n@@ -270,6 +304,7 @@ pub struct TraitData {\n     pub scope: NodeId,\n     pub value: String,\n     pub items: Vec<NodeId>,\n+    pub visibility: Visibility,\n }\n \n #[derive(Debug, RustcEncodable)]\n@@ -291,6 +326,7 @@ pub struct TypeDefData {\n     pub span: Span,\n     pub qualname: String,\n     pub value: String,\n+    pub visibility: Visibility,\n }\n \n /// Data for a reference to a type or trait.\n@@ -308,15 +344,17 @@ pub struct UseData {\n     pub span: Span,\n     pub name: String,\n     pub mod_id: Option<DefId>,\n-    pub scope: NodeId\n+    pub scope: NodeId,\n+    pub visibility: Visibility,\n }\n \n #[derive(Debug, RustcEncodable)]\n pub struct UseGlobData {\n     pub id: NodeId,\n     pub span: Span,\n     pub names: Vec<String>,\n-    pub scope: NodeId\n+    pub scope: NodeId,\n+    pub visibility: Visibility,\n }\n \n /// Data for local and global variables (consts and statics).\n@@ -330,6 +368,7 @@ pub struct VariableData {\n     pub scope: NodeId,\n     pub value: String,\n     pub type_value: String,\n+    pub visibility: Visibility,\n }\n \n #[derive(Debug, RustcEncodable)]"}, {"sha": "e0475bfed931aa957bb50d1153c988c1bfe4fcbe", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 28, "deletions": 11, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/4e4306c6dfa7a8dd43a7ee9bbc531f4b14b03aec/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e4306c6dfa7a8dd43a7ee9bbc531f4b14b03aec/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=4e4306c6dfa7a8dd43a7ee9bbc531f4b14b03aec", "patch": "@@ -364,7 +364,8 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                         qualname: format!(\"{}::{}\", qualname, path_to_string(p)),\n                         type_value: typ,\n                         value: String::new(),\n-                        scope: 0\n+                        scope: 0,\n+                        visibility: Visibility::Inherited,\n                     }.lower(self.tcx));\n                 }\n             }\n@@ -376,6 +377,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                       body: Option<&ast::Block>,\n                       id: ast::NodeId,\n                       name: ast::Name,\n+                      vis: Visibility,\n                       span: Span) {\n         debug!(\"process_method: {}:{}\", id, name);\n \n@@ -416,6 +418,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                     qualname: method_data.qualname.clone(),\n                     value: sig_str,\n                     decl_id: decl_id,\n+                    visibility: vis,\n                 }.lower(self.tcx));\n             }\n \n@@ -483,7 +486,8 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                     name: name,\n                     id: param.id,\n                     qualname: qualname,\n-                    value: String::new()\n+                    value: String::new(),\n+                    visibility: Visibility::Inherited,\n                 }.lower(self.tcx));\n             }\n         }\n@@ -532,7 +536,8 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                      name: ast::Name,\n                      span: Span,\n                      typ: &ast::Ty,\n-                     expr: &ast::Expr) {\n+                     expr: &ast::Expr,\n+                     vis: Visibility) {\n         let qualname = format!(\"::{}\", self.tcx.node_path_str(id));\n \n         let sub_span = self.span.sub_span_after_keyword(span, keywords::Const);\n@@ -546,7 +551,8 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                 qualname: qualname,\n                 value: self.span.snippet(expr.span),\n                 type_value: ty_to_string(&typ),\n-                scope: self.cur_scope\n+                scope: self.cur_scope,\n+                visibility: vis,\n             }.lower(self.tcx));\n         }\n \n@@ -588,6 +594,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                 scope: self.cur_scope,\n                 value: val,\n                 fields: fields,\n+                visibility: From::from(&item.vis),\n             }.lower(self.tcx));\n         }\n \n@@ -744,6 +751,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                 scope: self.cur_scope,\n                 value: val,\n                 items: methods.iter().map(|i| i.id).collect(),\n+                visibility: From::from(&item.vis),\n             }.lower(self.tcx));\n         }\n \n@@ -989,7 +997,8 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                     qualname: format!(\"{}${}\", path_to_string(p), id),\n                     value: value,\n                     type_value: typ,\n-                    scope: 0\n+                    scope: 0,\n+                    visibility: Visibility::Inherited,\n                 }.lower(self.tcx));\n             }\n         }\n@@ -1072,7 +1081,8 @@ impl<'l, 'tcx: 'l, 'll, D: Dump +'ll> Visitor for DumpVisitor<'l, 'tcx, 'll, D>\n                                 id: item.id,\n                                 mod_id: mod_id,\n                                 name: ident.to_string(),\n-                                scope: self.cur_scope\n+                                scope: self.cur_scope,\n+                                visibility: From::from(&item.vis),\n                             }.lower(self.tcx));\n                         }\n                         self.write_sub_paths_truncated(path, true);\n@@ -1095,7 +1105,8 @@ impl<'l, 'tcx: 'l, 'll, D: Dump +'ll> Visitor for DumpVisitor<'l, 'tcx, 'll, D>\n                                 span: sub_span.expect(\"No span found for use glob\"),\n                                 id: item.id,\n                                 names: names,\n-                                scope: self.cur_scope\n+                                scope: self.cur_scope,\n+                                visibility: From::from(&item.vis),\n                             }.lower(self.tcx));\n                         }\n                         self.write_sub_paths(path, true);\n@@ -1167,7 +1178,8 @@ impl<'l, 'tcx: 'l, 'll, D: Dump +'ll> Visitor for DumpVisitor<'l, 'tcx, 'll, D>\n                         name: item.ident.to_string(),\n                         id: item.id,\n                         qualname: qualname.clone(),\n-                        value: value\n+                        value: value,\n+                        visibility: From::from(&item.vis),\n                     }.lower(self.tcx));\n                 }\n \n@@ -1200,13 +1212,15 @@ impl<'l, 'tcx: 'l, 'll, D: Dump +'ll> Visitor for DumpVisitor<'l, 'tcx, 'll, D>\n                                    trait_item.ident.name,\n                                    trait_item.span,\n                                    &ty,\n-                                   &expr);\n+                                   &expr,\n+                                   Visibility::Public);\n             }\n             ast::TraitItemKind::Method(ref sig, ref body) => {\n                 self.process_method(sig,\n                                     body.as_ref().map(|x| &**x),\n                                     trait_item.id,\n                                     trait_item.ident.name,\n+                                    Visibility::Public,\n                                     trait_item.span);\n             }\n             ast::TraitItemKind::Const(_, None) |\n@@ -1223,13 +1237,15 @@ impl<'l, 'tcx: 'l, 'll, D: Dump +'ll> Visitor for DumpVisitor<'l, 'tcx, 'll, D>\n                                    impl_item.ident.name,\n                                    impl_item.span,\n                                    &ty,\n-                                   &expr);\n+                                   &expr,\n+                                   From::from(&impl_item.vis));\n             }\n             ast::ImplItemKind::Method(ref sig, ref body) => {\n                 self.process_method(sig,\n                                     Some(body),\n                                     impl_item.id,\n                                     impl_item.ident.name,\n+                                    From::from(&impl_item.vis),\n                                     impl_item.span);\n             }\n             ast::ImplItemKind::Type(_) |\n@@ -1399,7 +1415,8 @@ impl<'l, 'tcx: 'l, 'll, D: Dump +'ll> Visitor for DumpVisitor<'l, 'tcx, 'll, D>\n                             qualname: format!(\"{}${}\", path_to_string(p), id),\n                             value: value,\n                             type_value: String::new(),\n-                            scope: 0\n+                            scope: 0,\n+                            visibility: Visibility::Inherited,\n                         }.lower(self.tcx));\n                     }\n                 }"}, {"sha": "b7dded7b6247bf301894ed2694bc811ea8dc059f", "filename": "src/librustc_save_analysis/external_data.rs", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4e4306c6dfa7a8dd43a7ee9bbc531f4b14b03aec/src%2Flibrustc_save_analysis%2Fexternal_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e4306c6dfa7a8dd43a7ee9bbc531f4b14b03aec/src%2Flibrustc_save_analysis%2Fexternal_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fexternal_data.rs?ref=4e4306c6dfa7a8dd43a7ee9bbc531f4b14b03aec", "patch": "@@ -15,7 +15,7 @@ use syntax::ast::{CrateNum, NodeId};\n use syntax::codemap::CodeMap;\n use syntax_pos::Span;\n \n-use data;\n+use data::{self, Visibility};\n \n // FIXME: this should be pub(crate), but the current snapshot doesn't allow it yet\n pub trait Lower {\n@@ -91,7 +91,8 @@ pub struct EnumData {\n     pub qualname: String,\n     pub span: SpanData,\n     pub scope: DefId,\n-    pub variants: Vec<DefId>\n+    pub variants: Vec<DefId>,\n+    pub visibility: Visibility,\n }\n \n impl Lower for data::EnumData {\n@@ -106,6 +107,7 @@ impl Lower for data::EnumData {\n             span: SpanData::from_span(self.span, tcx.sess.codemap()),\n             scope: make_def_id(self.scope, &tcx.map),\n             variants: self.variants.into_iter().map(|id| make_def_id(id, &tcx.map)).collect(),\n+            visibility: self.visibility,\n         }\n     }\n }\n@@ -166,6 +168,7 @@ pub struct FunctionData {\n     pub span: SpanData,\n     pub scope: DefId,\n     pub value: String,\n+    pub visibility: Visibility,\n }\n \n impl Lower for data::FunctionData {\n@@ -180,6 +183,7 @@ impl Lower for data::FunctionData {\n             span: SpanData::from_span(self.span, tcx.sess.codemap()),\n             scope: make_def_id(self.scope, &tcx.map),\n             value: self.value,\n+            visibility: self.visibility,\n         }\n     }\n }\n@@ -323,6 +327,7 @@ pub struct MethodData {\n     pub scope: DefId,\n     pub value: String,\n     pub decl_id: Option<DefId>,\n+    pub visibility: Visibility,\n }\n \n impl Lower for data::MethodData {\n@@ -337,6 +342,7 @@ impl Lower for data::MethodData {\n             qualname: self.qualname,\n             value: self.value,\n             decl_id: self.decl_id,\n+            visibility: self.visibility,\n         }\n     }\n }\n@@ -351,6 +357,7 @@ pub struct ModData {\n     pub scope: DefId,\n     pub filename: String,\n     pub items: Vec<DefId>,\n+    pub visibility: Visibility,\n }\n \n impl Lower for data::ModData {\n@@ -365,6 +372,7 @@ impl Lower for data::ModData {\n             scope: make_def_id(self.scope, &tcx.map),\n             filename: self.filename,\n             items: self.items.into_iter().map(|id| make_def_id(id, &tcx.map)).collect(),\n+            visibility: self.visibility,\n         }\n     }\n }\n@@ -401,6 +409,7 @@ pub struct StructData {\n     pub scope: DefId,\n     pub value: String,\n     pub fields: Vec<DefId>,\n+    pub visibility: Visibility,\n }\n \n impl Lower for data::StructData {\n@@ -416,6 +425,7 @@ impl Lower for data::StructData {\n             scope: make_def_id(self.scope, &tcx.map),\n             value: self.value,\n             fields: self.fields.into_iter().map(|id| make_def_id(id, &tcx.map)).collect(),\n+            visibility: self.visibility,\n         }\n     }\n }\n@@ -456,6 +466,7 @@ pub struct TraitData {\n     pub scope: DefId,\n     pub value: String,\n     pub items: Vec<DefId>,\n+    pub visibility: Visibility,\n }\n \n impl Lower for data::TraitData {\n@@ -470,6 +481,7 @@ impl Lower for data::TraitData {\n             scope: make_def_id(self.scope, &tcx.map),\n             value: self.value,\n             items: self.items.into_iter().map(|id| make_def_id(id, &tcx.map)).collect(),\n+            visibility: self.visibility,\n         }\n     }\n }\n@@ -509,6 +521,7 @@ pub struct TypeDefData {\n     pub span: SpanData,\n     pub qualname: String,\n     pub value: String,\n+    pub visibility: Visibility,\n }\n \n impl Lower for data::TypeDefData {\n@@ -521,6 +534,7 @@ impl Lower for data::TypeDefData {\n             span: SpanData::from_span(self.span, tcx.sess.codemap()),\n             qualname: self.qualname,\n             value: self.value,\n+            visibility: self.visibility,\n         }\n     }\n }\n@@ -553,7 +567,8 @@ pub struct UseData {\n     pub span: SpanData,\n     pub name: String,\n     pub mod_id: Option<DefId>,\n-    pub scope: DefId\n+    pub scope: DefId,\n+    pub visibility: Visibility,\n }\n \n impl Lower for data::UseData {\n@@ -566,6 +581,7 @@ impl Lower for data::UseData {\n             name: self.name,\n             mod_id: self.mod_id,\n             scope: make_def_id(self.scope, &tcx.map),\n+            visibility: self.visibility,\n         }\n     }\n }\n@@ -575,7 +591,8 @@ pub struct UseGlobData {\n     pub id: DefId,\n     pub span: SpanData,\n     pub names: Vec<String>,\n-    pub scope: DefId\n+    pub scope: DefId,\n+    pub visibility: Visibility,\n }\n \n impl Lower for data::UseGlobData {\n@@ -587,6 +604,7 @@ impl Lower for data::UseGlobData {\n             span: SpanData::from_span(self.span, tcx.sess.codemap()),\n             names: self.names,\n             scope: make_def_id(self.scope, &tcx.map),\n+            visibility: self.visibility,\n         }\n     }\n }\n@@ -602,6 +620,7 @@ pub struct VariableData {\n     pub scope: DefId,\n     pub value: String,\n     pub type_value: String,\n+    pub visibility: Visibility,\n }\n \n impl Lower for data::VariableData {\n@@ -617,6 +636,7 @@ impl Lower for data::VariableData {\n             scope: make_def_id(self.scope, &tcx.map),\n             value: self.value,\n             type_value: self.type_value,\n+            visibility: self.visibility,\n         }\n     }\n }"}, {"sha": "9cc1badf7cdd919b791d16206801fcec59b7d109", "filename": "src/librustc_save_analysis/json_api_dumper.rs", "status": "modified", "additions": 129, "deletions": 99, "changes": 228, "blob_url": "https://github.com/rust-lang/rust/blob/4e4306c6dfa7a8dd43a7ee9bbc531f4b14b03aec/src%2Flibrustc_save_analysis%2Fjson_api_dumper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e4306c6dfa7a8dd43a7ee9bbc531f4b14b03aec/src%2Flibrustc_save_analysis%2Fjson_api_dumper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fjson_api_dumper.rs?ref=4e4306c6dfa7a8dd43a7ee9bbc531f4b14b03aec", "patch": "@@ -14,7 +14,7 @@ use rustc::hir::def_id::DefId;\n use rustc_serialize::json::as_json;\n \n use external_data::*;\n-use data::VariableKind;\n+use data::{VariableKind, Visibility};\n use dump::Dump;\n \n pub struct JsonApiDumper<'b, W: Write + 'b> {\n@@ -123,24 +123,30 @@ enum ImportKind {\n \n impl From<UseData> for Option<Import> {\n     fn from(data: UseData) -> Option<Import> {\n-        Some(Import {\n-            kind: ImportKind::Use,\n-            id: From::from(data.id),\n-            span: data.span,\n-            name: data.name,\n-            value: String::new(),\n-        })\n+        match data.visibility {\n+            Visibility::Public => Some(Import {\n+                kind: ImportKind::Use,\n+                id: From::from(data.id),\n+                span: data.span,\n+                name: data.name,\n+                value: String::new(),\n+            }),\n+            _ => None,\n+        }\n     }\n }\n impl From<UseGlobData> for Option<Import> {\n     fn from(data: UseGlobData) -> Option<Import> {\n-        Some(Import {\n-            kind: ImportKind::GlobUse,\n-            id: From::from(data.id),\n-            span: data.span,\n-            name: \"*\".to_owned(),\n-            value: data.names.join(\", \"),\n-        })\n+        match data.visibility {\n+            Visibility::Public => Some(Import {\n+                kind: ImportKind::GlobUse,\n+                id: From::from(data.id),\n+                span: data.span,\n+                name: \"*\".to_owned(),\n+                value: data.names.join(\", \"),\n+            }),\n+            _ => None,\n+        }\n     }\n }\n \n@@ -185,17 +191,20 @@ enum DefKind {\n \n impl From<EnumData> for Option<Def> {\n     fn from(data: EnumData) -> Option<Def> {\n-        Some(Def {\n-            kind: DefKind::Enum,\n-            id: From::from(data.id),\n-            span: data.span,\n-            name: data.name,\n-            qualname: data.qualname,\n-            value: data.value,\n-            parent: None,\n-            children: data.variants.into_iter().map(|id| From::from(id)).collect(),\n-            decl_id: None,\n-        })\n+        match data.visibility {\n+            Visibility::Public => Some(Def {\n+                kind: DefKind::Enum,\n+                id: From::from(data.id),\n+                span: data.span,\n+                name: data.name,\n+                qualname: data.qualname,\n+                value: data.value,\n+                parent: None,\n+                children: data.variants.into_iter().map(|id| From::from(id)).collect(),\n+                decl_id: None,\n+            }),\n+            _ => None,\n+        }\n     }\n }\n \n@@ -231,7 +240,8 @@ impl From<StructVariantData> for Option<Def> {\n }\n impl From<StructData> for Option<Def> {\n     fn from(data: StructData) -> Option<Def> {\n-        Some(Def {\n+        match data.visibility {\n+            Visibility::Public => Some(Def {\n             kind: DefKind::Struct,\n             id: From::from(data.id),\n             span: data.span,\n@@ -241,52 +251,63 @@ impl From<StructData> for Option<Def> {\n             parent: None,\n             children: data.fields.into_iter().map(|id| From::from(id)).collect(),\n             decl_id: None,\n-        })\n+        }),\n+            _ => None,\n+        }\n     }\n }\n impl From<TraitData> for Option<Def> {\n     fn from(data: TraitData) -> Option<Def> {\n-        Some(Def {\n-            kind: DefKind::Trait,\n-            id: From::from(data.id),\n-            span: data.span,\n-            name: data.name,\n-            qualname: data.qualname,\n-            value: data.value,\n-            children: data.items.into_iter().map(|id| From::from(id)).collect(),\n-            parent: None,\n-            decl_id: None,\n-        })\n+        match data.visibility {\n+            Visibility::Public => Some(Def {\n+                kind: DefKind::Trait,\n+                id: From::from(data.id),\n+                span: data.span,\n+                name: data.name,\n+                qualname: data.qualname,\n+                value: data.value,\n+                children: data.items.into_iter().map(|id| From::from(id)).collect(),\n+                parent: None,\n+                decl_id: None,\n+            }),\n+            _ => None,\n+        }\n     }\n }\n impl From<FunctionData> for Option<Def> {\n     fn from(data: FunctionData) -> Option<Def> {\n-        Some(Def {\n-            kind: DefKind::Function,\n-            id: From::from(data.id),\n-            span: data.span,\n-            name: data.name,\n-            qualname: data.qualname,\n-            value: data.value,\n-            children: vec![],\n-            parent: None,\n-            decl_id: None,\n-        })\n+        match data.visibility {\n+            Visibility::Public => Some(Def {\n+                kind: DefKind::Function,\n+                id: From::from(data.id),\n+                span: data.span,\n+                name: data.name,\n+                qualname: data.qualname,\n+                value: data.value,\n+                children: vec![],\n+                parent: None,\n+                decl_id: None,\n+            }),\n+            _ => None,\n+        }\n     }\n }\n impl From<MethodData> for Option<Def> {\n     fn from(data: MethodData) -> Option<Def> {\n-        Some(Def {\n-            kind: DefKind::Method,\n-            id: From::from(data.id),\n-            span: data.span,\n-            name: data.name,\n-            qualname: data.qualname,\n-            value: data.value,\n-            children: vec![],\n-            parent: None,\n-            decl_id: data.decl_id.map(|id| From::from(id)),\n-        })\n+        match data.visibility {\n+            Visibility::Public => Some(Def {\n+                kind: DefKind::Method,\n+                id: From::from(data.id),\n+                span: data.span,\n+                name: data.name,\n+                qualname: data.qualname,\n+                value: data.value,\n+                children: vec![],\n+                parent: None,\n+                decl_id: data.decl_id.map(|id| From::from(id)),\n+            }),\n+            _ => None,\n+        }\n     }\n }\n impl From<MacroData> for Option<Def> {\n@@ -306,51 +327,60 @@ impl From<MacroData> for Option<Def> {\n }\n impl From<ModData> for Option<Def> {\n     fn from(data:ModData) -> Option<Def> {\n-        Some(Def {\n-            kind: DefKind::Mod,\n-            id: From::from(data.id),\n-            span: data.span,\n-            name: data.name,\n-            qualname: data.qualname,\n-            value: data.filename,\n-            children: data.items.into_iter().map(|id| From::from(id)).collect(),\n-            parent: None,\n-            decl_id: None,\n-        })\n+        match data.visibility {\n+            Visibility::Public => Some(Def {\n+                kind: DefKind::Mod,\n+                id: From::from(data.id),\n+                span: data.span,\n+                name: data.name,\n+                qualname: data.qualname,\n+                value: data.filename,\n+                children: data.items.into_iter().map(|id| From::from(id)).collect(),\n+                parent: None,\n+                decl_id: None,\n+            }),\n+            _ => None,\n+        }\n     }\n }\n impl From<TypeDefData> for Option<Def> {\n     fn from(data: TypeDefData) -> Option<Def> {\n-        Some(Def {\n-            kind: DefKind::Type,\n-            id: From::from(data.id),\n-            span: data.span,\n-            name: data.name,\n-            qualname: data.qualname,\n-            value: data.value,\n-            children: vec![],\n-            parent: None,\n-            decl_id: None,\n-        })\n+        match data.visibility {\n+            Visibility::Public => Some(Def {\n+                kind: DefKind::Type,\n+                id: From::from(data.id),\n+                span: data.span,\n+                name: data.name,\n+                qualname: data.qualname,\n+                value: data.value,\n+                children: vec![],\n+                parent: None,\n+                decl_id: None,\n+            }),\n+            _ => None,\n+        }\n     }\n }\n impl From<VariableData> for Option<Def> {\n     fn from(data: VariableData) -> Option<Def> {\n-        Some(Def {\n-            kind: match data.kind {\n-                VariableKind::Static => DefKind::Static,\n-                VariableKind::Const => DefKind::Const,\n-                VariableKind::Local => { return None }\n-                VariableKind::Field => DefKind::Field,\n-            },\n-            id: From::from(data.id),\n-            span: data.span,\n-            name: data.name,\n-            qualname: data.qualname,\n-            value: data.value,\n-            children: vec![],\n-            parent: None,\n-            decl_id: None,\n-        })\n+        match data.visibility {\n+            Visibility::Public => Some(Def {\n+                kind: match data.kind {\n+                    VariableKind::Static => DefKind::Static,\n+                    VariableKind::Const => DefKind::Const,\n+                    VariableKind::Local => { return None }\n+                    VariableKind::Field => DefKind::Field,\n+                },\n+                id: From::from(data.id),\n+                span: data.span,\n+                name: data.name,\n+                qualname: data.qualname,\n+                value: data.value,\n+                children: vec![],\n+                parent: None,\n+                decl_id: None,\n+            }),\n+            _ => None,\n+        }\n     }\n }"}, {"sha": "3645eb68394d95b155c63305bf378f7592afe435", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4e4306c6dfa7a8dd43a7ee9bbc531f4b14b03aec/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e4306c6dfa7a8dd43a7ee9bbc531f4b14b03aec/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=4e4306c6dfa7a8dd43a7ee9bbc531f4b14b03aec", "patch": "@@ -140,6 +140,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     span: sub_span.unwrap(),\n                     scope: self.enclosing_scope(item.id),\n                     value: make_signature(decl, generics),\n+                    visibility: From::from(&item.vis),\n                 }))\n             }\n             ast::ItemKind::Static(ref typ, mt, ref expr) => {\n@@ -164,6 +165,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     scope: self.enclosing_scope(item.id),\n                     value: value,\n                     type_value: ty_to_string(&typ),\n+                    visibility: From::from(&item.vis),\n                 }))\n             }\n             ast::ItemKind::Const(ref typ, ref expr) => {\n@@ -179,6 +181,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     scope: self.enclosing_scope(item.id),\n                     value: self.span_utils.snippet(expr.span),\n                     type_value: ty_to_string(&typ),\n+                    visibility: From::from(&item.vis),\n                 }))\n             }\n             ast::ItemKind::Mod(ref m) => {\n@@ -197,6 +200,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     scope: self.enclosing_scope(item.id),\n                     filename: filename,\n                     items: m.items.iter().map(|i| i.id).collect(),\n+                    visibility: From::from(&item.vis),\n                 }))\n             }\n             ast::ItemKind::Enum(ref def, _) => {\n@@ -217,6 +221,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     qualname: qualname,\n                     scope: self.enclosing_scope(item.id),\n                     variants: def.variants.iter().map(|v| v.node.data.id()).collect(),\n+                    visibility: From::from(&item.vis),\n                 }))\n             }\n             ast::ItemKind::Impl(_, _, _, ref trait_ref, ref typ, _) => {\n@@ -281,6 +286,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                 scope: scope,\n                 value: \"\".to_owned(),\n                 type_value: typ,\n+                visibility: From::from(&field.vis),\n             })\n         } else {\n             None\n@@ -293,7 +299,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                            name: ast::Name, span: Span) -> Option<FunctionData> {\n         // The qualname for a method is the trait name or name of the struct in an impl in\n         // which the method is declared in, followed by the method's name.\n-        let qualname = match self.tcx.impl_of_method(self.tcx.map.local_def_id(id)) {\n+        let (qualname, vis) = match self.tcx.impl_of_method(self.tcx.map.local_def_id(id)) {\n             Some(impl_id) => match self.tcx.map.get_if_local(impl_id) {\n                 Some(NodeItem(item)) => {\n                     match item.node {\n@@ -306,7 +312,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                                 result.push_str(&self.tcx.item_path_str(def_id));\n                             }\n                             result.push_str(\">\");\n-                            result\n+                            (result, From::from(&item.vis))\n                         }\n                         _ => {\n                             span_bug!(span,\n@@ -327,8 +333,8 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n             None => match self.tcx.trait_of_item(self.tcx.map.local_def_id(id)) {\n                 Some(def_id) => {\n                     match self.tcx.map.get_if_local(def_id) {\n-                        Some(NodeItem(_)) => {\n-                            format!(\"::{}\", self.tcx.item_path_str(def_id))\n+                        Some(NodeItem(item)) => {\n+                            (format!(\"::{}\", self.tcx.item_path_str(def_id)), From::from(&item.vis))\n                         }\n                         r => {\n                             span_bug!(span,\n@@ -369,6 +375,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n             scope: self.enclosing_scope(id),\n             // FIXME you get better data here by using the visitor.\n             value: String::new(),\n+            visibility: vis,\n         })\n     }\n "}]}