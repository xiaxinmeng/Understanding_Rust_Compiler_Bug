{"sha": "e29f3e837fb6262040d42d4cde8e2f775dee0fe7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyOWYzZTgzN2ZiNjI2MjA0MGQ0MmQ0Y2RlOGUyZjc3NWRlZTBmZTc=", "commit": {"author": {"name": "R\u00e9my Rakic", "email": "remy.rakic+github@gmail.com", "date": "2021-06-12T11:15:23Z"}, "committer": {"name": "R\u00e9my Rakic", "email": "remy.rakic+github@gmail.com", "date": "2021-06-13T11:11:07Z"}, "message": "Test invalid vtable size/alignment const UB errors", "tree": {"sha": "8c32f9d332518ac5e9f0b2d07c38ccdddeb465aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c32f9d332518ac5e9f0b2d07c38ccdddeb465aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e29f3e837fb6262040d42d4cde8e2f775dee0fe7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e29f3e837fb6262040d42d4cde8e2f775dee0fe7", "html_url": "https://github.com/rust-lang/rust/commit/e29f3e837fb6262040d42d4cde8e2f775dee0fe7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e29f3e837fb6262040d42d4cde8e2f775dee0fe7/comments", "author": {"login": "lqd", "id": 247183, "node_id": "MDQ6VXNlcjI0NzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/247183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lqd", "html_url": "https://github.com/lqd", "followers_url": "https://api.github.com/users/lqd/followers", "following_url": "https://api.github.com/users/lqd/following{/other_user}", "gists_url": "https://api.github.com/users/lqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lqd/subscriptions", "organizations_url": "https://api.github.com/users/lqd/orgs", "repos_url": "https://api.github.com/users/lqd/repos", "events_url": "https://api.github.com/users/lqd/events{/privacy}", "received_events_url": "https://api.github.com/users/lqd/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lqd", "id": 247183, "node_id": "MDQ6VXNlcjI0NzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/247183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lqd", "html_url": "https://github.com/lqd", "followers_url": "https://api.github.com/users/lqd/followers", "following_url": "https://api.github.com/users/lqd/following{/other_user}", "gists_url": "https://api.github.com/users/lqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lqd/subscriptions", "organizations_url": "https://api.github.com/users/lqd/orgs", "repos_url": "https://api.github.com/users/lqd/repos", "events_url": "https://api.github.com/users/lqd/events{/privacy}", "received_events_url": "https://api.github.com/users/lqd/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cae1918b2939824e4dbbba003099c0ccf21715e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/cae1918b2939824e4dbbba003099c0ccf21715e2", "html_url": "https://github.com/rust-lang/rust/commit/cae1918b2939824e4dbbba003099c0ccf21715e2"}], "stats": {"total": 156, "additions": 129, "deletions": 27}, "files": [{"sha": "a0b449657da764fff30613caccc04dd5f7732e7f", "filename": "src/test/ui/consts/const-eval/ub-incorrect-vtable.32bit.stderr", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/e29f3e837fb6262040d42d4cde8e2f775dee0fe7/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-incorrect-vtable.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e29f3e837fb6262040d42d4cde8e2f775dee0fe7/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-incorrect-vtable.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-incorrect-vtable.32bit.stderr?ref=e29f3e837fb6262040d42d4cde8e2f775dee0fe7", "patch": "@@ -0,0 +1,52 @@\n+error: any use of this value will cause an error\n+  --> $DIR/ub-incorrect-vtable.rs:19:14\n+   |\n+LL | / const INVALID_VTABLE_ALIGNMENT: &dyn Trait =\n+LL | |     unsafe { std::mem::transmute((&92u8, &[0usize, 1usize, 1000usize])) };\n+   | |______________^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^__-\n+   |                |\n+   |                invalid vtable: alignment `1000` is not a power of 2\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+error: any use of this value will cause an error\n+  --> $DIR/ub-incorrect-vtable.rs:25:14\n+   |\n+LL | / const INVALID_VTABLE_SIZE: &dyn Trait =\n+LL | |     unsafe { std::mem::transmute((&92u8, &[1usize, usize::MAX, 1usize])) };\n+   | |______________^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^__-\n+   |                |\n+   |                invalid vtable: size is bigger than largest supported object\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/ub-incorrect-vtable.rs:36:1\n+   |\n+LL | / const INVALID_VTABLE_ALIGNMENT_UB: W<&dyn Trait> =\n+LL | |     unsafe { std::mem::transmute((&92u8, &(drop_me as fn(*mut usize), 1usize, 1000usize))) };\n+   | |_____________________________________________________________________________________________^ type validation failed: encountered invalid vtable: alignment `1000` is not a power of 2 at .0\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n+   = note: the raw bytes of the constant (size: 8, align: 4) {\n+               \u257e\u2500allocN\u2500\u257c \u257e\u2500allocN\u2500\u257c                         \u2502 \u257e\u2500\u2500\u257c\u257e\u2500\u2500\u257c\n+           }\n+\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/ub-incorrect-vtable.rs:41:1\n+   |\n+LL | / const INVALID_VTABLE_SIZE_UB: W<&dyn Trait> =\n+LL | |     unsafe { std::mem::transmute((&92u8, &(drop_me as fn(*mut usize), usize::MAX, 1usize))) };\n+   | |______________________________________________________________________________________________^ type validation failed: encountered invalid vtable: size is bigger than largest supported object at .0\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n+   = note: the raw bytes of the constant (size: 8, align: 4) {\n+               \u257e\u2500allocN\u2500\u257c \u257e\u2500allocN\u2500\u257c                         \u2502 \u257e\u2500\u2500\u257c\u257e\u2500\u2500\u257c\n+           }\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "70ae5e0a8c7e2b8ef894397cd15c2c557444fe77", "filename": "src/test/ui/consts/const-eval/ub-incorrect-vtable.64bit.stderr", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/e29f3e837fb6262040d42d4cde8e2f775dee0fe7/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-incorrect-vtable.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e29f3e837fb6262040d42d4cde8e2f775dee0fe7/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-incorrect-vtable.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-incorrect-vtable.64bit.stderr?ref=e29f3e837fb6262040d42d4cde8e2f775dee0fe7", "patch": "@@ -0,0 +1,52 @@\n+error: any use of this value will cause an error\n+  --> $DIR/ub-incorrect-vtable.rs:19:14\n+   |\n+LL | / const INVALID_VTABLE_ALIGNMENT: &dyn Trait =\n+LL | |     unsafe { std::mem::transmute((&92u8, &[0usize, 1usize, 1000usize])) };\n+   | |______________^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^__-\n+   |                |\n+   |                invalid vtable: alignment `1000` is not a power of 2\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+error: any use of this value will cause an error\n+  --> $DIR/ub-incorrect-vtable.rs:25:14\n+   |\n+LL | / const INVALID_VTABLE_SIZE: &dyn Trait =\n+LL | |     unsafe { std::mem::transmute((&92u8, &[1usize, usize::MAX, 1usize])) };\n+   | |______________^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^__-\n+   |                |\n+   |                invalid vtable: size is bigger than largest supported object\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/ub-incorrect-vtable.rs:36:1\n+   |\n+LL | / const INVALID_VTABLE_ALIGNMENT_UB: W<&dyn Trait> =\n+LL | |     unsafe { std::mem::transmute((&92u8, &(drop_me as fn(*mut usize), 1usize, 1000usize))) };\n+   | |_____________________________________________________________________________________________^ type validation failed: encountered invalid vtable: alignment `1000` is not a power of 2 at .0\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n+   = note: the raw bytes of the constant (size: 16, align: 8) {\n+               \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500allocN\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500allocN\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n+           }\n+\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/ub-incorrect-vtable.rs:41:1\n+   |\n+LL | / const INVALID_VTABLE_SIZE_UB: W<&dyn Trait> =\n+LL | |     unsafe { std::mem::transmute((&92u8, &(drop_me as fn(*mut usize), usize::MAX, 1usize))) };\n+   | |______________________________________________________________________________________________^ type validation failed: encountered invalid vtable: size is bigger than largest supported object at .0\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n+   = note: the raw bytes of the constant (size: 16, align: 8) {\n+               \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500allocN\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500allocN\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n+           }\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "7c514e804e01ab1b92f82549d17e32d8a36f0a28", "filename": "src/test/ui/consts/const-eval/ub-incorrect-vtable.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e29f3e837fb6262040d42d4cde8e2f775dee0fe7/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-incorrect-vtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e29f3e837fb6262040d42d4cde8e2f775dee0fe7/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-incorrect-vtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-incorrect-vtable.rs?ref=e29f3e837fb6262040d42d4cde8e2f775dee0fe7", "patch": "@@ -3,6 +3,15 @@\n //   triggers an error\n // - a similar test that triggers a previously-untested const UB error: emitted close to the above\n //   error, it checks the correctness of the size\n+//\n+// As is, this code will only hard error when the constants are used, and the errors are emitted via\n+// the `#[allow]`-able `const_err` lint. However, if the transparent wrapper technique to prevent\n+// reborrows is used -- from `ub-wide-ptr.rs` -- these two errors reach validation and would trigger\n+// ICEs as tracked by #86193. So we also use the transparent wrapper to verify proper validation\n+// errors are emitted instead of ICEs.\n+\n+// stderr-per-bitwidth\n+// normalize-stderr-test \"alloc\\d+\" -> \"allocN\"\n \n trait Trait {}\n \n@@ -18,4 +27,20 @@ const INVALID_VTABLE_SIZE: &dyn Trait =\n //~| WARNING this was previously accepted by the compiler\n //~| invalid vtable: size is bigger than largest supported object\n \n+#[repr(transparent)]\n+struct W<T>(T);\n+\n+// The drop fn is checked before size/align are, so get ourselves a \"sufficiently valid\" drop fn\n+fn drop_me(_: *mut usize) {}\n+\n+const INVALID_VTABLE_ALIGNMENT_UB: W<&dyn Trait> =\n+    unsafe { std::mem::transmute((&92u8, &(drop_me as fn(*mut usize), 1usize, 1000usize))) };\n+//~^^ ERROR it is undefined behavior to use this value\n+//~| invalid vtable: alignment `1000` is not a power of 2\n+\n+const INVALID_VTABLE_SIZE_UB: W<&dyn Trait> =\n+    unsafe { std::mem::transmute((&92u8, &(drop_me as fn(*mut usize), usize::MAX, 1usize))) };\n+//~^^ ERROR it is undefined behavior to use this value\n+//~| invalid vtable: size is bigger than largest supported object\n+\n fn main() {}"}, {"sha": "c937d039d381e63e1c1bb0b81a927f6cfae445f9", "filename": "src/test/ui/consts/const-eval/ub-incorrect-vtable.stderr", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/cae1918b2939824e4dbbba003099c0ccf21715e2/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-incorrect-vtable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cae1918b2939824e4dbbba003099c0ccf21715e2/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-incorrect-vtable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-incorrect-vtable.stderr?ref=cae1918b2939824e4dbbba003099c0ccf21715e2", "patch": "@@ -1,27 +0,0 @@\n-error: any use of this value will cause an error\n-  --> $DIR/ub-incorrect-vtable.rs:10:14\n-   |\n-LL | / const INVALID_VTABLE_ALIGNMENT: &dyn Trait =\n-LL | |     unsafe { std::mem::transmute((&92u8, &[0usize, 1usize, 1000usize])) };\n-   | |______________^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^__-\n-   |                |\n-   |                invalid vtable: alignment `1000` is not a power of 2\n-   |\n-   = note: `#[deny(const_err)]` on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-\n-error: any use of this value will cause an error\n-  --> $DIR/ub-incorrect-vtable.rs:16:14\n-   |\n-LL | / const INVALID_VTABLE_SIZE: &dyn Trait =\n-LL | |     unsafe { std::mem::transmute((&92u8, &[1usize, usize::MAX, 1usize])) };\n-   | |______________^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^__-\n-   |                |\n-   |                invalid vtable: size is bigger than largest supported object\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-\n-error: aborting due to 2 previous errors\n-"}]}