{"sha": "df3776bc0f7f250a7650fcaea67ac4a869cbcb80", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmMzc3NmJjMGY3ZjI1MGE3NjUwZmNhZWE2N2FjNGE4NjljYmNiODA=", "commit": {"author": {"name": "Cameron Taggart", "email": "cameron.taggart@gmail.com", "date": "2020-04-21T00:09:11Z"}, "committer": {"name": "Cameron Taggart", "email": "cameron.taggart@gmail.com", "date": "2020-04-21T00:09:11Z"}, "message": "allow wasm32 compilation of librustc_data_structures/profiling.rs", "tree": {"sha": "ea27d38314e13e88c10104fc3291d1d485cd7e6a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea27d38314e13e88c10104fc3291d1d485cd7e6a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df3776bc0f7f250a7650fcaea67ac4a869cbcb80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df3776bc0f7f250a7650fcaea67ac4a869cbcb80", "html_url": "https://github.com/rust-lang/rust/commit/df3776bc0f7f250a7650fcaea67ac4a869cbcb80", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df3776bc0f7f250a7650fcaea67ac4a869cbcb80/comments", "author": {"login": "ctaggart", "id": 80104, "node_id": "MDQ6VXNlcjgwMTA0", "avatar_url": "https://avatars.githubusercontent.com/u/80104?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ctaggart", "html_url": "https://github.com/ctaggart", "followers_url": "https://api.github.com/users/ctaggart/followers", "following_url": "https://api.github.com/users/ctaggart/following{/other_user}", "gists_url": "https://api.github.com/users/ctaggart/gists{/gist_id}", "starred_url": "https://api.github.com/users/ctaggart/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ctaggart/subscriptions", "organizations_url": "https://api.github.com/users/ctaggart/orgs", "repos_url": "https://api.github.com/users/ctaggart/repos", "events_url": "https://api.github.com/users/ctaggart/events{/privacy}", "received_events_url": "https://api.github.com/users/ctaggart/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ctaggart", "id": 80104, "node_id": "MDQ6VXNlcjgwMTA0", "avatar_url": "https://avatars.githubusercontent.com/u/80104?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ctaggart", "html_url": "https://github.com/ctaggart", "followers_url": "https://api.github.com/users/ctaggart/followers", "following_url": "https://api.github.com/users/ctaggart/following{/other_user}", "gists_url": "https://api.github.com/users/ctaggart/gists{/gist_id}", "starred_url": "https://api.github.com/users/ctaggart/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ctaggart/subscriptions", "organizations_url": "https://api.github.com/users/ctaggart/orgs", "repos_url": "https://api.github.com/users/ctaggart/repos", "events_url": "https://api.github.com/users/ctaggart/events{/privacy}", "received_events_url": "https://api.github.com/users/ctaggart/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "20fc02f836f3035b86b56a7cedb97c5cd4ed9612", "url": "https://api.github.com/repos/rust-lang/rust/commits/20fc02f836f3035b86b56a7cedb97c5cd4ed9612", "html_url": "https://github.com/rust-lang/rust/commit/20fc02f836f3035b86b56a7cedb97c5cd4ed9612"}], "stats": {"total": 15, "additions": 11, "deletions": 4}, "files": [{"sha": "7377b7a6c8bb85fe367f63972ecf8319948d2b1c", "filename": "src/librustc_data_structures/profiling.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/df3776bc0f7f250a7650fcaea67ac4a869cbcb80/src%2Flibrustc_data_structures%2Fprofiling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df3776bc0f7f250a7650fcaea67ac4a869cbcb80/src%2Flibrustc_data_structures%2Fprofiling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fprofiling.rs?ref=df3776bc0f7f250a7650fcaea67ac4a869cbcb80", "patch": "@@ -99,10 +99,12 @@ use parking_lot::RwLock;\n \n /// MmapSerializatioSink is faster on macOS and Linux\n /// but FileSerializationSink is faster on Windows\n-#[cfg(not(windows))]\n+#[cfg(all(not(windows),not(target_arch=\"wasm32\")))]\n type SerializationSink = measureme::MmapSerializationSink;\n-#[cfg(windows)]\n+#[cfg(all(windows,not(target_arch=\"wasm32\")))]\n type SerializationSink = measureme::FileSerializationSink;\n+#[cfg(target_arch=\"wasm32\")]\n+type SerializationSink = measureme::ByteVecSink;\n \n type Profiler = measureme::Profiler<SerializationSink>;\n \n@@ -602,7 +604,7 @@ pub fn duration_to_secs_str(dur: std::time::Duration) -> String {\n }\n \n // Memory reporting\n-#[cfg(unix)]\n+#[cfg(all(unix,not(target_arch=\"wasm32\")))]\n fn get_resident() -> Option<usize> {\n     let field = 1;\n     let contents = fs::read(\"/proc/self/statm\").ok()?;\n@@ -612,7 +614,7 @@ fn get_resident() -> Option<usize> {\n     Some(npages * 4096)\n }\n \n-#[cfg(windows)]\n+#[cfg(all(windows,not(target_arch=\"wasm32\")))]\n fn get_resident() -> Option<usize> {\n     use std::mem::{self, MaybeUninit};\n     use winapi::shared::minwindef::DWORD;\n@@ -630,3 +632,8 @@ fn get_resident() -> Option<usize> {\n         }\n     }\n }\n+\n+#[cfg(target_arch=\"wasm32\")]\n+fn get_resident() -> Option<usize> {\n+    None\n+}"}]}