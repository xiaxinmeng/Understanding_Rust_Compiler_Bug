{"sha": "a96f1a8a1eef38f024d6fcff932f55a2a760a395", "node_id": "C_kwDOAAsO6NoAKGE5NmYxYThhMWVlZjM4ZjAyNGQ2ZmNmZjkzMmY1NWEyYTc2MGEzOTU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-10-14T21:43:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-14T21:43:46Z"}, "message": "Rollup merge of #103067 - Nilstrieb:tidy-likes-the-alphabet, r=jackh726\n\nMore alphabetical sorting\n\nSort and enforce a few more things. The biggest change here is sorting all target features.", "tree": {"sha": "18f4def75c940c970bc4066bc560f76d32e508e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18f4def75c940c970bc4066bc560f76d32e508e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a96f1a8a1eef38f024d6fcff932f55a2a760a395", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjSdgSCRBK7hj4Ov3rIwAAUKYIAHGuz2N3KbVkeYhFLSPM4sbm\nzljwbXF/CmTrd+pw8JTkt5pXcOnsCwt5jD3KbcZMCJSMFHOjKWnLiuT/Us9Xwhmw\nZPauKjVtw1dxprHk6vP6ijbTWHqW58VYrjqktlRubKtebZ7IbUTt/ACSDIZFsRUj\n1RnFr8I0QGo0L4HFKfKll57WxISiNXXEpv/WRGZrmZhF+mFegCWW2/YS/rlAevXv\nPwcd9GeaMaBr9O66kGcR2nT3hYC8qf4/RQojo8Yr1G6jkTYO4+JaDyPNESvG3v8S\nO93b0MI6+l08+30f98E4m1PY623ly9M3sStaSm2kWslTqqfTt0Z7baUCT6c1h+M=\n=+NAS\n-----END PGP SIGNATURE-----\n", "payload": "tree 18f4def75c940c970bc4066bc560f76d32e508e6\nparent 03a521b4fecf74d21278dab6a6034587da7b9dd9\nparent b00cb04037a4ace1e34887ca35568e6f0c1e807d\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1665783826 +0200\ncommitter GitHub <noreply@github.com> 1665783826 +0200\n\nRollup merge of #103067 - Nilstrieb:tidy-likes-the-alphabet, r=jackh726\n\nMore alphabetical sorting\n\nSort and enforce a few more things. The biggest change here is sorting all target features.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a96f1a8a1eef38f024d6fcff932f55a2a760a395", "html_url": "https://github.com/rust-lang/rust/commit/a96f1a8a1eef38f024d6fcff932f55a2a760a395", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a96f1a8a1eef38f024d6fcff932f55a2a760a395/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03a521b4fecf74d21278dab6a6034587da7b9dd9", "url": "https://api.github.com/repos/rust-lang/rust/commits/03a521b4fecf74d21278dab6a6034587da7b9dd9", "html_url": "https://github.com/rust-lang/rust/commit/03a521b4fecf74d21278dab6a6034587da7b9dd9"}, {"sha": "b00cb04037a4ace1e34887ca35568e6f0c1e807d", "url": "https://api.github.com/repos/rust-lang/rust/commits/b00cb04037a4ace1e34887ca35568e6f0c1e807d", "html_url": "https://github.com/rust-lang/rust/commit/b00cb04037a4ace1e34887ca35568e6f0c1e807d"}], "stats": {"total": 312, "additions": 170, "deletions": 142}, "files": [{"sha": "83407ee8f9d32e891d6584d23512115004c8f75a", "filename": "compiler/rustc_codegen_ssa/src/target_features.rs", "status": "modified", "additions": 112, "deletions": 96, "changes": 208, "blob_url": "https://github.com/rust-lang/rust/blob/a96f1a8a1eef38f024d6fcff932f55a2a760a395/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a96f1a8a1eef38f024d6fcff932f55a2a760a395/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs?ref=a96f1a8a1eef38f024d6fcff932f55a2a760a395", "patch": "@@ -13,17 +13,25 @@ pub const RUSTC_SPECIFIC_FEATURES: &[&str] = &[\"crt-static\"];\n // if it doesn't, to_llvm_feature in llvm_util in rustc_codegen_llvm needs to be adapted\n \n const ARM_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[\n+    // tidy-alphabetical-start\n     (\"aclass\", Some(sym::arm_target_feature)),\n-    (\"mclass\", Some(sym::arm_target_feature)),\n-    (\"rclass\", Some(sym::arm_target_feature)),\n-    (\"dsp\", Some(sym::arm_target_feature)),\n-    (\"neon\", Some(sym::arm_target_feature)),\n+    (\"aes\", Some(sym::arm_target_feature)),\n     (\"crc\", Some(sym::arm_target_feature)),\n     (\"crypto\", Some(sym::arm_target_feature)),\n-    (\"aes\", Some(sym::arm_target_feature)),\n-    (\"sha2\", Some(sym::arm_target_feature)),\n-    (\"i8mm\", Some(sym::arm_target_feature)),\n+    (\"d32\", Some(sym::arm_target_feature)),\n     (\"dotprod\", Some(sym::arm_target_feature)),\n+    (\"dsp\", Some(sym::arm_target_feature)),\n+    (\"fp-armv8\", Some(sym::arm_target_feature)),\n+    (\"i8mm\", Some(sym::arm_target_feature)),\n+    (\"mclass\", Some(sym::arm_target_feature)),\n+    (\"neon\", Some(sym::arm_target_feature)),\n+    (\"rclass\", Some(sym::arm_target_feature)),\n+    (\"sha2\", Some(sym::arm_target_feature)),\n+    // This is needed for inline assembly, but shouldn't be stabilized as-is\n+    // since it should be enabled per-function using #[instruction_set], not\n+    // #[target_feature].\n+    (\"thumb-mode\", Some(sym::arm_target_feature)),\n+    (\"thumb2\", Some(sym::arm_target_feature)),\n     (\"v5te\", Some(sym::arm_target_feature)),\n     (\"v6\", Some(sym::arm_target_feature)),\n     (\"v6k\", Some(sym::arm_target_feature)),\n@@ -33,118 +41,115 @@ const ARM_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[\n     (\"vfp2\", Some(sym::arm_target_feature)),\n     (\"vfp3\", Some(sym::arm_target_feature)),\n     (\"vfp4\", Some(sym::arm_target_feature)),\n-    (\"fp-armv8\", Some(sym::arm_target_feature)),\n-    // This is needed for inline assembly, but shouldn't be stabilized as-is\n-    // since it should be enabled per-function using #[instruction_set], not\n-    // #[target_feature].\n-    (\"thumb-mode\", Some(sym::arm_target_feature)),\n-    (\"thumb2\", Some(sym::arm_target_feature)),\n-    (\"d32\", Some(sym::arm_target_feature)),\n+    // tidy-alphabetical-end\n ];\n \n const AARCH64_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[\n-    // FEAT_AdvSimd & FEAT_FP\n-    (\"neon\", None),\n-    // FEAT_FP16\n-    (\"fp16\", None),\n-    // FEAT_SVE\n-    (\"sve\", None),\n+    // tidy-alphabetical-start\n+    // FEAT_AES\n+    (\"aes\", None),\n+    // FEAT_BF16\n+    (\"bf16\", None),\n+    // FEAT_BTI\n+    (\"bti\", None),\n     // FEAT_CRC\n     (\"crc\", None),\n-    // FEAT_RAS\n-    (\"ras\", None),\n-    // FEAT_LSE\n-    (\"lse\", None),\n-    // FEAT_RDM\n-    (\"rdm\", None),\n-    // FEAT_RCPC\n-    (\"rcpc\", None),\n-    // FEAT_RCPC2\n-    (\"rcpc2\", None),\n-    // FEAT_DotProd\n-    (\"dotprod\", None),\n-    // FEAT_TME\n-    (\"tme\", None),\n-    // FEAT_FHM\n-    (\"fhm\", None),\n     // FEAT_DIT\n     (\"dit\", None),\n-    // FEAT_FLAGM\n-    (\"flagm\", None),\n-    // FEAT_SSBS\n-    (\"ssbs\", None),\n-    // FEAT_SB\n-    (\"sb\", None),\n-    // FEAT_PAUTH (address authentication)\n-    (\"paca\", None),\n-    // FEAT_PAUTH (generic authentication)\n-    (\"pacg\", None),\n+    // FEAT_DotProd\n+    (\"dotprod\", None),\n     // FEAT_DPB\n     (\"dpb\", None),\n     // FEAT_DPB2\n     (\"dpb2\", None),\n-    // FEAT_SVE2\n-    (\"sve2\", None),\n-    // FEAT_SVE2_AES\n-    (\"sve2-aes\", None),\n-    // FEAT_SVE2_SM4\n-    (\"sve2-sm4\", None),\n-    // FEAT_SVE2_SHA3\n-    (\"sve2-sha3\", None),\n-    // FEAT_SVE2_BitPerm\n-    (\"sve2-bitperm\", None),\n-    // FEAT_FRINTTS\n-    (\"frintts\", None),\n-    // FEAT_I8MM\n-    (\"i8mm\", None),\n     // FEAT_F32MM\n     (\"f32mm\", None),\n     // FEAT_F64MM\n     (\"f64mm\", None),\n-    // FEAT_BF16\n-    (\"bf16\", None),\n-    // FEAT_RAND\n-    (\"rand\", None),\n-    // FEAT_BTI\n-    (\"bti\", None),\n-    // FEAT_MTE\n-    (\"mte\", None),\n-    // FEAT_JSCVT\n-    (\"jsconv\", None),\n     // FEAT_FCMA\n     (\"fcma\", None),\n-    // FEAT_AES\n-    (\"aes\", None),\n+    // FEAT_FHM\n+    (\"fhm\", None),\n+    // FEAT_FLAGM\n+    (\"flagm\", None),\n+    // FEAT_FP16\n+    (\"fp16\", None),\n+    // FEAT_FRINTTS\n+    (\"frintts\", None),\n+    // FEAT_I8MM\n+    (\"i8mm\", None),\n+    // FEAT_JSCVT\n+    (\"jsconv\", None),\n+    // FEAT_LOR\n+    (\"lor\", None),\n+    // FEAT_LSE\n+    (\"lse\", None),\n+    // FEAT_MTE\n+    (\"mte\", None),\n+    // FEAT_AdvSimd & FEAT_FP\n+    (\"neon\", None),\n+    // FEAT_PAUTH (address authentication)\n+    (\"paca\", None),\n+    // FEAT_PAUTH (generic authentication)\n+    (\"pacg\", None),\n+    // FEAT_PAN\n+    (\"pan\", None),\n+    // FEAT_PMUv3\n+    (\"pmuv3\", None),\n+    // FEAT_RAND\n+    (\"rand\", None),\n+    // FEAT_RAS\n+    (\"ras\", None),\n+    // FEAT_RCPC\n+    (\"rcpc\", None),\n+    // FEAT_RCPC2\n+    (\"rcpc2\", None),\n+    // FEAT_RDM\n+    (\"rdm\", None),\n+    // FEAT_SB\n+    (\"sb\", None),\n     // FEAT_SHA1 & FEAT_SHA256\n     (\"sha2\", None),\n     // FEAT_SHA512 & FEAT_SHA3\n     (\"sha3\", None),\n     // FEAT_SM3 & FEAT_SM4\n     (\"sm4\", None),\n-    // FEAT_PAN\n-    (\"pan\", None),\n-    // FEAT_LOR\n-    (\"lor\", None),\n-    // FEAT_VHE\n-    (\"vh\", None),\n-    // FEAT_PMUv3\n-    (\"pmuv3\", None),\n     // FEAT_SPE\n     (\"spe\", None),\n+    // FEAT_SSBS\n+    (\"ssbs\", None),\n+    // FEAT_SVE\n+    (\"sve\", None),\n+    // FEAT_SVE2\n+    (\"sve2\", None),\n+    // FEAT_SVE2_AES\n+    (\"sve2-aes\", None),\n+    // FEAT_SVE2_BitPerm\n+    (\"sve2-bitperm\", None),\n+    // FEAT_SVE2_SHA3\n+    (\"sve2-sha3\", None),\n+    // FEAT_SVE2_SM4\n+    (\"sve2-sm4\", None),\n+    // FEAT_TME\n+    (\"tme\", None),\n     (\"v8.1a\", Some(sym::aarch64_ver_target_feature)),\n     (\"v8.2a\", Some(sym::aarch64_ver_target_feature)),\n     (\"v8.3a\", Some(sym::aarch64_ver_target_feature)),\n     (\"v8.4a\", Some(sym::aarch64_ver_target_feature)),\n     (\"v8.5a\", Some(sym::aarch64_ver_target_feature)),\n     (\"v8.6a\", Some(sym::aarch64_ver_target_feature)),\n     (\"v8.7a\", Some(sym::aarch64_ver_target_feature)),\n+    // FEAT_VHE\n+    (\"vh\", None),\n+    // tidy-alphabetical-end\n ];\n \n const AARCH64_TIED_FEATURES: &[&[&str]] = &[\n     &[\"paca\", \"pacg\"], // Together these represent `pauth` in LLVM\n ];\n \n const X86_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[\n+    // tidy-alphabetical-start\n     (\"adx\", None),\n     (\"aes\", None),\n     (\"avx\", None),\n@@ -194,69 +199,80 @@ const X86_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[\n     (\"xsavec\", None),\n     (\"xsaveopt\", None),\n     (\"xsaves\", None),\n+    // tidy-alphabetical-end\n ];\n \n const HEXAGON_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[\n+    // tidy-alphabetical-start\n     (\"hvx\", Some(sym::hexagon_target_feature)),\n     (\"hvx-length128b\", Some(sym::hexagon_target_feature)),\n+    // tidy-alphabetical-end\n ];\n \n const POWERPC_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[\n+    // tidy-alphabetical-start\n     (\"altivec\", Some(sym::powerpc_target_feature)),\n     (\"power8-altivec\", Some(sym::powerpc_target_feature)),\n-    (\"power9-altivec\", Some(sym::powerpc_target_feature)),\n     (\"power8-vector\", Some(sym::powerpc_target_feature)),\n+    (\"power9-altivec\", Some(sym::powerpc_target_feature)),\n     (\"power9-vector\", Some(sym::powerpc_target_feature)),\n     (\"vsx\", Some(sym::powerpc_target_feature)),\n+    // tidy-alphabetical-end\n ];\n \n const MIPS_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[\n+    // tidy-alphabetical-start\n     (\"fp64\", Some(sym::mips_target_feature)),\n     (\"msa\", Some(sym::mips_target_feature)),\n     (\"virt\", Some(sym::mips_target_feature)),\n+    // tidy-alphabetical-end\n ];\n \n const RISCV_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[\n-    (\"m\", Some(sym::riscv_target_feature)),\n+    // tidy-alphabetical-start\n     (\"a\", Some(sym::riscv_target_feature)),\n     (\"c\", Some(sym::riscv_target_feature)),\n-    (\"f\", Some(sym::riscv_target_feature)),\n     (\"d\", Some(sym::riscv_target_feature)),\n     (\"e\", Some(sym::riscv_target_feature)),\n+    (\"f\", Some(sym::riscv_target_feature)),\n+    (\"m\", Some(sym::riscv_target_feature)),\n     (\"v\", Some(sym::riscv_target_feature)),\n-    (\"zfinx\", Some(sym::riscv_target_feature)),\n-    (\"zdinx\", Some(sym::riscv_target_feature)),\n-    (\"zhinx\", Some(sym::riscv_target_feature)),\n-    (\"zhinxmin\", Some(sym::riscv_target_feature)),\n-    (\"zfh\", Some(sym::riscv_target_feature)),\n-    (\"zfhmin\", Some(sym::riscv_target_feature)),\n     (\"zba\", Some(sym::riscv_target_feature)),\n     (\"zbb\", Some(sym::riscv_target_feature)),\n     (\"zbc\", Some(sym::riscv_target_feature)),\n-    (\"zbs\", Some(sym::riscv_target_feature)),\n     (\"zbkb\", Some(sym::riscv_target_feature)),\n     (\"zbkc\", Some(sym::riscv_target_feature)),\n     (\"zbkx\", Some(sym::riscv_target_feature)),\n+    (\"zbs\", Some(sym::riscv_target_feature)),\n+    (\"zdinx\", Some(sym::riscv_target_feature)),\n+    (\"zfh\", Some(sym::riscv_target_feature)),\n+    (\"zfhmin\", Some(sym::riscv_target_feature)),\n+    (\"zfinx\", Some(sym::riscv_target_feature)),\n+    (\"zhinx\", Some(sym::riscv_target_feature)),\n+    (\"zhinxmin\", Some(sym::riscv_target_feature)),\n+    (\"zk\", Some(sym::riscv_target_feature)),\n+    (\"zkn\", Some(sym::riscv_target_feature)),\n     (\"zknd\", Some(sym::riscv_target_feature)),\n     (\"zkne\", Some(sym::riscv_target_feature)),\n     (\"zknh\", Some(sym::riscv_target_feature)),\n-    (\"zksed\", Some(sym::riscv_target_feature)),\n-    (\"zksh\", Some(sym::riscv_target_feature)),\n     (\"zkr\", Some(sym::riscv_target_feature)),\n-    (\"zkn\", Some(sym::riscv_target_feature)),\n     (\"zks\", Some(sym::riscv_target_feature)),\n-    (\"zk\", Some(sym::riscv_target_feature)),\n+    (\"zksed\", Some(sym::riscv_target_feature)),\n+    (\"zksh\", Some(sym::riscv_target_feature)),\n     (\"zkt\", Some(sym::riscv_target_feature)),\n+    // tidy-alphabetical-end\n ];\n \n const WASM_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[\n-    (\"simd128\", None),\n+    // tidy-alphabetical-start\n     (\"atomics\", Some(sym::wasm_target_feature)),\n-    (\"nontrapping-fptoint\", Some(sym::wasm_target_feature)),\n     (\"bulk-memory\", Some(sym::wasm_target_feature)),\n     (\"mutable-globals\", Some(sym::wasm_target_feature)),\n+    (\"nontrapping-fptoint\", Some(sym::wasm_target_feature)),\n     (\"reference-types\", Some(sym::wasm_target_feature)),\n     (\"sign-ext\", Some(sym::wasm_target_feature)),\n+    (\"simd128\", None),\n+    // tidy-alphabetical-end\n ];\n \n const BPF_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[(\"alu32\", Some(sym::bpf_target_feature))];"}, {"sha": "3cabf24492eaf26216e811a85b158d25abbc136f", "filename": "library/std/src/io/error.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a96f1a8a1eef38f024d6fcff932f55a2a760a395/library%2Fstd%2Fsrc%2Fio%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a96f1a8a1eef38f024d6fcff932f55a2a760a395/library%2Fstd%2Fsrc%2Fio%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Ferror.rs?ref=a96f1a8a1eef38f024d6fcff932f55a2a760a395", "patch": "@@ -387,7 +387,7 @@ pub enum ErrorKind {\n impl ErrorKind {\n     pub(crate) fn as_str(&self) -> &'static str {\n         use ErrorKind::*;\n-        // Strictly alphabetical, please.  (Sadly rustfmt cannot do this yet.)\n+        // tidy-alphabetical-start\n         match *self {\n             AddrInUse => \"address in use\",\n             AddrNotAvailable => \"address not available\",\n@@ -431,6 +431,7 @@ impl ErrorKind {\n             WouldBlock => \"operation would block\",\n             WriteZero => \"write zero\",\n         }\n+        // tidy-alphabetical-end\n     }\n }\n "}, {"sha": "02c076f1bb5f94c0b25f93784b904dfec77bba9c", "filename": "library/std/tests/run-time-detect.rs", "status": "modified", "additions": 48, "deletions": 38, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/a96f1a8a1eef38f024d6fcff932f55a2a760a395/library%2Fstd%2Ftests%2Frun-time-detect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a96f1a8a1eef38f024d6fcff932f55a2a760a395/library%2Fstd%2Ftests%2Frun-time-detect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Ftests%2Frun-time-detect.rs?ref=a96f1a8a1eef38f024d6fcff932f55a2a760a395", "patch": "@@ -14,77 +14,85 @@\n #[cfg(all(target_arch = \"arm\", any(target_os = \"linux\", target_os = \"android\")))]\n fn arm_linux() {\n     use std::arch::is_arm_feature_detected;\n+    // tidy-alphabetical-start\n+    println!(\"aes: {}\", is_arm_feature_detected!(\"aes\"));\n+    println!(\"crc: {}\", is_arm_feature_detected!(\"crc\"));\n+    println!(\"crypto: {}\", is_arm_feature_detected!(\"crypto\"));\n     println!(\"neon: {}\", is_arm_feature_detected!(\"neon\"));\n     println!(\"pmull: {}\", is_arm_feature_detected!(\"pmull\"));\n-    println!(\"crypto: {}\", is_arm_feature_detected!(\"crypto\"));\n-    println!(\"crc: {}\", is_arm_feature_detected!(\"crc\"));\n-    println!(\"aes: {}\", is_arm_feature_detected!(\"aes\"));\n     println!(\"sha2: {}\", is_arm_feature_detected!(\"sha2\"));\n+    // tidy-alphabetical-end\n }\n \n #[test]\n #[cfg(all(target_arch = \"aarch64\", any(target_os = \"linux\", target_os = \"android\")))]\n fn aarch64_linux() {\n     use std::arch::is_aarch64_feature_detected;\n-    println!(\"neon: {}\", is_aarch64_feature_detected!(\"neon\"));\n+    // tidy-alphabetical-start\n+    println!(\"aes: {}\", is_aarch64_feature_detected!(\"aes\"));\n     println!(\"asimd: {}\", is_aarch64_feature_detected!(\"asimd\"));\n-    println!(\"pmull: {}\", is_aarch64_feature_detected!(\"pmull\"));\n-    println!(\"fp16: {}\", is_aarch64_feature_detected!(\"fp16\"));\n-    println!(\"sve: {}\", is_aarch64_feature_detected!(\"sve\"));\n+    println!(\"bf16: {}\", is_aarch64_feature_detected!(\"bf16\"));\n+    println!(\"bti: {}\", is_aarch64_feature_detected!(\"bti\"));\n     println!(\"crc: {}\", is_aarch64_feature_detected!(\"crc\"));\n-    println!(\"lse: {}\", is_aarch64_feature_detected!(\"lse\"));\n-    println!(\"lse2: {}\", is_aarch64_feature_detected!(\"lse2\"));\n-    println!(\"rdm: {}\", is_aarch64_feature_detected!(\"rdm\"));\n-    println!(\"rcpc: {}\", is_aarch64_feature_detected!(\"rcpc\"));\n-    println!(\"rcpc2: {}\", is_aarch64_feature_detected!(\"rcpc2\"));\n+    println!(\"dit: {}\", is_aarch64_feature_detected!(\"dit\"));\n     println!(\"dotprod: {}\", is_aarch64_feature_detected!(\"dotprod\"));\n-    println!(\"tme: {}\", is_aarch64_feature_detected!(\"tme\"));\n+    println!(\"dpb2: {}\", is_aarch64_feature_detected!(\"dpb2\"));\n+    println!(\"dpb: {}\", is_aarch64_feature_detected!(\"dpb\"));\n+    println!(\"f32mm: {}\", is_aarch64_feature_detected!(\"f32mm\"));\n+    println!(\"f64mm: {}\", is_aarch64_feature_detected!(\"f64mm\"));\n+    println!(\"fcma: {}\", is_aarch64_feature_detected!(\"fcma\"));\n     println!(\"fhm: {}\", is_aarch64_feature_detected!(\"fhm\"));\n-    println!(\"dit: {}\", is_aarch64_feature_detected!(\"dit\"));\n     println!(\"flagm: {}\", is_aarch64_feature_detected!(\"flagm\"));\n-    println!(\"ssbs: {}\", is_aarch64_feature_detected!(\"ssbs\"));\n-    println!(\"sb: {}\", is_aarch64_feature_detected!(\"sb\"));\n-    println!(\"paca: {}\", is_aarch64_feature_detected!(\"paca\"));\n-    println!(\"pacg: {}\", is_aarch64_feature_detected!(\"pacg\"));\n-    println!(\"dpb: {}\", is_aarch64_feature_detected!(\"dpb\"));\n-    println!(\"dpb2: {}\", is_aarch64_feature_detected!(\"dpb2\"));\n-    println!(\"sve2: {}\", is_aarch64_feature_detected!(\"sve2\"));\n-    println!(\"sve2-aes: {}\", is_aarch64_feature_detected!(\"sve2-aes\"));\n-    println!(\"sve2-sm4: {}\", is_aarch64_feature_detected!(\"sve2-sm4\"));\n-    println!(\"sve2-sha3: {}\", is_aarch64_feature_detected!(\"sve2-sha3\"));\n-    println!(\"sve2-bitperm: {}\", is_aarch64_feature_detected!(\"sve2-bitperm\"));\n+    println!(\"fp16: {}\", is_aarch64_feature_detected!(\"fp16\"));\n     println!(\"frintts: {}\", is_aarch64_feature_detected!(\"frintts\"));\n     println!(\"i8mm: {}\", is_aarch64_feature_detected!(\"i8mm\"));\n-    println!(\"f32mm: {}\", is_aarch64_feature_detected!(\"f32mm\"));\n-    println!(\"f64mm: {}\", is_aarch64_feature_detected!(\"f64mm\"));\n-    println!(\"bf16: {}\", is_aarch64_feature_detected!(\"bf16\"));\n-    println!(\"rand: {}\", is_aarch64_feature_detected!(\"rand\"));\n-    println!(\"bti: {}\", is_aarch64_feature_detected!(\"bti\"));\n-    println!(\"mte: {}\", is_aarch64_feature_detected!(\"mte\"));\n     println!(\"jsconv: {}\", is_aarch64_feature_detected!(\"jsconv\"));\n-    println!(\"fcma: {}\", is_aarch64_feature_detected!(\"fcma\"));\n-    println!(\"aes: {}\", is_aarch64_feature_detected!(\"aes\"));\n+    println!(\"lse2: {}\", is_aarch64_feature_detected!(\"lse2\"));\n+    println!(\"lse: {}\", is_aarch64_feature_detected!(\"lse\"));\n+    println!(\"mte: {}\", is_aarch64_feature_detected!(\"mte\"));\n+    println!(\"neon: {}\", is_aarch64_feature_detected!(\"neon\"));\n+    println!(\"paca: {}\", is_aarch64_feature_detected!(\"paca\"));\n+    println!(\"pacg: {}\", is_aarch64_feature_detected!(\"pacg\"));\n+    println!(\"pmull: {}\", is_aarch64_feature_detected!(\"pmull\"));\n+    println!(\"rand: {}\", is_aarch64_feature_detected!(\"rand\"));\n+    println!(\"rcpc2: {}\", is_aarch64_feature_detected!(\"rcpc2\"));\n+    println!(\"rcpc: {}\", is_aarch64_feature_detected!(\"rcpc\"));\n+    println!(\"rdm: {}\", is_aarch64_feature_detected!(\"rdm\"));\n+    println!(\"sb: {}\", is_aarch64_feature_detected!(\"sb\"));\n     println!(\"sha2: {}\", is_aarch64_feature_detected!(\"sha2\"));\n     println!(\"sha3: {}\", is_aarch64_feature_detected!(\"sha3\"));\n     println!(\"sm4: {}\", is_aarch64_feature_detected!(\"sm4\"));\n+    println!(\"ssbs: {}\", is_aarch64_feature_detected!(\"ssbs\"));\n+    println!(\"sve2-aes: {}\", is_aarch64_feature_detected!(\"sve2-aes\"));\n+    println!(\"sve2-bitperm: {}\", is_aarch64_feature_detected!(\"sve2-bitperm\"));\n+    println!(\"sve2-sha3: {}\", is_aarch64_feature_detected!(\"sve2-sha3\"));\n+    println!(\"sve2-sm4: {}\", is_aarch64_feature_detected!(\"sve2-sm4\"));\n+    println!(\"sve2: {}\", is_aarch64_feature_detected!(\"sve2\"));\n+    println!(\"sve: {}\", is_aarch64_feature_detected!(\"sve\"));\n+    println!(\"tme: {}\", is_aarch64_feature_detected!(\"tme\"));\n+    // tidy-alphabetical-end\n }\n \n #[test]\n #[cfg(all(target_arch = \"powerpc\", target_os = \"linux\"))]\n fn powerpc_linux() {\n     use std::arch::is_powerpc_feature_detected;\n+    // tidy-alphabetical-start\n     println!(\"altivec: {}\", is_powerpc_feature_detected!(\"altivec\"));\n-    println!(\"vsx: {}\", is_powerpc_feature_detected!(\"vsx\"));\n     println!(\"power8: {}\", is_powerpc_feature_detected!(\"power8\"));\n+    println!(\"vsx: {}\", is_powerpc_feature_detected!(\"vsx\"));\n+    // tidy-alphabetical-end\n }\n \n #[test]\n #[cfg(all(target_arch = \"powerpc64\", target_os = \"linux\"))]\n fn powerpc64_linux() {\n     use std::arch::is_powerpc64_feature_detected;\n+    // tidy-alphabetical-start\n     println!(\"altivec: {}\", is_powerpc64_feature_detected!(\"altivec\"));\n-    println!(\"vsx: {}\", is_powerpc64_feature_detected!(\"vsx\"));\n     println!(\"power8: {}\", is_powerpc64_feature_detected!(\"power8\"));\n+    println!(\"vsx: {}\", is_powerpc64_feature_detected!(\"vsx\"));\n+    // tidy-alphabetical-end\n }\n \n #[test]\n@@ -102,9 +110,9 @@ fn x86_all() {\n     // the below is in alphabetical order and matches\n     // the order of X86_ALLOWED_FEATURES in rustc_codegen_ssa's target_features.rs\n \n+    // tidy-alphabetical-start\n     println!(\"adx: {:?}\", is_x86_feature_detected!(\"adx\"));\n     println!(\"aes: {:?}\", is_x86_feature_detected!(\"aes\"));\n-    println!(\"avx: {:?}\", is_x86_feature_detected!(\"avx\"));\n     println!(\"avx2: {:?}\", is_x86_feature_detected!(\"avx2\"));\n     println!(\"avx512bf16: {:?}\", is_x86_feature_detected!(\"avx512bf16\"));\n     println!(\"avx512bitalg: {:?}\", is_x86_feature_detected!(\"avx512bitalg\"));\n@@ -117,13 +125,14 @@ fn x86_all() {\n     println!(\"avx512ifma: {:?}\", is_x86_feature_detected!(\"avx512ifma\"));\n     println!(\"avx512pf: {:?}\", is_x86_feature_detected!(\"avx512pf\"));\n     println!(\"avx512vaes: {:?}\", is_x86_feature_detected!(\"avx512vaes\"));\n-    println!(\"avx512vbmi: {:?}\", is_x86_feature_detected!(\"avx512vbmi\"));\n     println!(\"avx512vbmi2: {:?}\", is_x86_feature_detected!(\"avx512vbmi2\"));\n+    println!(\"avx512vbmi: {:?}\", is_x86_feature_detected!(\"avx512vbmi\"));\n     println!(\"avx512vl: {:?}\", is_x86_feature_detected!(\"avx512vl\"));\n     println!(\"avx512vnni: {:?}\", is_x86_feature_detected!(\"avx512vnni\"));\n     println!(\"avx512vp2intersect: {:?}\", is_x86_feature_detected!(\"avx512vp2intersect\"));\n     println!(\"avx512vpclmulqdq: {:?}\", is_x86_feature_detected!(\"avx512vpclmulqdq\"));\n     println!(\"avx512vpopcntdq: {:?}\", is_x86_feature_detected!(\"avx512vpopcntdq\"));\n+    println!(\"avx: {:?}\", is_x86_feature_detected!(\"avx\"));\n     println!(\"bmi1: {:?}\", is_x86_feature_detected!(\"bmi1\"));\n     println!(\"bmi2: {:?}\", is_x86_feature_detected!(\"bmi2\"));\n     println!(\"cmpxchg16b: {:?}\", is_x86_feature_detected!(\"cmpxchg16b\"));\n@@ -138,16 +147,17 @@ fn x86_all() {\n     println!(\"rdseed: {:?}\", is_x86_feature_detected!(\"rdseed\"));\n     println!(\"rtm: {:?}\", is_x86_feature_detected!(\"rtm\"));\n     println!(\"sha: {:?}\", is_x86_feature_detected!(\"sha\"));\n-    println!(\"sse: {:?}\", is_x86_feature_detected!(\"sse\"));\n     println!(\"sse2: {:?}\", is_x86_feature_detected!(\"sse2\"));\n     println!(\"sse3: {:?}\", is_x86_feature_detected!(\"sse3\"));\n     println!(\"sse4.1: {:?}\", is_x86_feature_detected!(\"sse4.1\"));\n     println!(\"sse4.2: {:?}\", is_x86_feature_detected!(\"sse4.2\"));\n     println!(\"sse4a: {:?}\", is_x86_feature_detected!(\"sse4a\"));\n+    println!(\"sse: {:?}\", is_x86_feature_detected!(\"sse\"));\n     println!(\"ssse3: {:?}\", is_x86_feature_detected!(\"ssse3\"));\n     println!(\"tbm: {:?}\", is_x86_feature_detected!(\"tbm\"));\n     println!(\"xsave: {:?}\", is_x86_feature_detected!(\"xsave\"));\n     println!(\"xsavec: {:?}\", is_x86_feature_detected!(\"xsavec\"));\n     println!(\"xsaveopt: {:?}\", is_x86_feature_detected!(\"xsaveopt\"));\n     println!(\"xsaves: {:?}\", is_x86_feature_detected!(\"xsaves\"));\n+    // tidy-alphabetical-end\n }"}, {"sha": "4c130b2ffec75a077746d201aa2da02e6acbfa67", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a96f1a8a1eef38f024d6fcff932f55a2a760a395/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a96f1a8a1eef38f024d6fcff932f55a2a760a395/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=a96f1a8a1eef38f024d6fcff932f55a2a760a395", "patch": "@@ -2540,7 +2540,7 @@ impl SubstParam {\n mod size_asserts {\n     use super::*;\n     use rustc_data_structures::static_assert_size;\n-    // These are in alphabetical order, which is easy to maintain.\n+    // tidy-alphabetical-start\n     static_assert_size!(Crate, 72); // frequently moved by-value\n     static_assert_size!(DocFragment, 32);\n     static_assert_size!(GenericArg, 48);\n@@ -2550,4 +2550,5 @@ mod size_asserts {\n     static_assert_size!(ItemKind, 88);\n     static_assert_size!(PathSegment, 40);\n     static_assert_size!(Type, 48);\n+    // tidy-alphabetical-end\n }"}, {"sha": "f913f6cde3889fd374dd91a6fb0f8251f7d283b2", "filename": "src/tools/tidy/src/alphabetical.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a96f1a8a1eef38f024d6fcff932f55a2a760a395/src%2Ftools%2Ftidy%2Fsrc%2Falphabetical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a96f1a8a1eef38f024d6fcff932f55a2a760a395/src%2Ftools%2Ftidy%2Fsrc%2Falphabetical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Falphabetical.rs?ref=a96f1a8a1eef38f024d6fcff932f55a2a760a395", "patch": "@@ -29,7 +29,8 @@ fn is_close_bracket(c: char) -> bool {\n     matches!(c, ')' | ']' | '}')\n }\n \n-const START_COMMENT: &str = \"// tidy-alphabetical-start\";\n+// Don't let tidy check this here :D\n+const START_COMMENT: &str = concat!(\"// tidy-alphabetical\", \"-start\");\n const END_COMMENT: &str = \"// tidy-alphabetical-end\";\n \n fn check_section<'a>(\n@@ -47,7 +48,7 @@ fn check_section<'a>(\n         if line.contains(START_COMMENT) {\n             tidy_error!(\n                 bad,\n-                \"{file}:{} found `// tidy-alphabetical-start` expecting `// tidy-alphabetical-end`\",\n+                \"{file}:{} found `{START_COMMENT}` expecting `{END_COMMENT}`\",\n                 line_idx\n             )\n         }\n@@ -102,10 +103,7 @@ pub fn check(path: &Path, bad: &mut bool) {\n             if line.contains(START_COMMENT) {\n                 check_section(file, &mut lines, bad);\n                 if lines.peek().is_none() {\n-                    tidy_error!(\n-                        bad,\n-                        \"{file}: reached end of file expecting `// tidy-alphabetical-end`\"\n-                    )\n+                    tidy_error!(bad, \"{file}: reached end of file expecting `{END_COMMENT}`\")\n                 }\n             }\n         }"}, {"sha": "ca785042aaa6abfa867ef058f16e15f50ddbbea1", "filename": "src/tools/tidy/src/main.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a96f1a8a1eef38f024d6fcff932f55a2a760a395/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a96f1a8a1eef38f024d6fcff932f55a2a760a395/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs?ref=a96f1a8a1eef38f024d6fcff932f55a2a760a395", "patch": "@@ -90,7 +90,9 @@ fn main() {\n         check!(edition, &compiler_path);\n         check!(edition, &library_path);\n \n+        check!(alphabetical, &src_path);\n         check!(alphabetical, &compiler_path);\n+        check!(alphabetical, &library_path);\n \n         let collected = {\n             while handles.len() >= concurrency.get() {"}]}