{"sha": "fad3d1d7fd16fea674bdafe49649fb52e15ab118", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhZDNkMWQ3ZmQxNmZlYTY3NGJkYWZlNDk2NDlmYjUyZTE1YWIxMTg=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-12-05T21:57:43Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-12-15T15:10:56Z"}, "message": "dfs.rs: rustfmt", "tree": {"sha": "06cc953e6e59ea4c38a308cea7b49a6f20bd9c6d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06cc953e6e59ea4c38a308cea7b49a6f20bd9c6d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fad3d1d7fd16fea674bdafe49649fb52e15ab118", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fad3d1d7fd16fea674bdafe49649fb52e15ab118", "html_url": "https://github.com/rust-lang/rust/commit/fad3d1d7fd16fea674bdafe49649fb52e15ab118", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fad3d1d7fd16fea674bdafe49649fb52e15ab118/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6193c5cc2acd1c427a372dfdab3d071e880ecf62", "url": "https://api.github.com/repos/rust-lang/rust/commits/6193c5cc2acd1c427a372dfdab3d071e880ecf62", "html_url": "https://github.com/rust-lang/rust/commit/6193c5cc2acd1c427a372dfdab3d071e880ecf62"}], "stats": {"total": 27, "additions": 12, "deletions": 15}, "files": [{"sha": "59860d61ab98551662b870387bb956c4c1c9bf79", "filename": "src/librustc_mir/borrow_check/nll/region_infer/dfs.rs", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/fad3d1d7fd16fea674bdafe49649fb52e15ab118/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fdfs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fad3d1d7fd16fea674bdafe49649fb52e15ab118/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fdfs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fdfs.rs?ref=fad3d1d7fd16fea674bdafe49649fb52e15ab118", "patch": "@@ -13,7 +13,8 @@\n \n use borrow_check::nll::universal_regions::UniversalRegions;\n use borrow_check::nll::region_infer::RegionInferenceContext;\n-use borrow_check::nll::region_infer::values::{RegionElementIndex, RegionValues, RegionValueElements};\n+use borrow_check::nll::region_infer::values::{RegionElementIndex, RegionValueElements,\n+                                              RegionValues};\n use rustc::mir::{Location, Mir};\n use rustc::ty::RegionVid;\n use rustc_data_structures::fx::FxHashSet;\n@@ -112,9 +113,7 @@ pub(super) trait DfsOp {\n \n     /// Adds all universal regions in the source region to the target region, returning\n     /// true if something has changed.\n-    fn add_universal_regions_outlived_by_source_to_target(\n-        &mut self,\n-    ) -> Result<bool, Self::Early>;\n+    fn add_universal_regions_outlived_by_source_to_target(&mut self) -> Result<bool, Self::Early>;\n }\n \n /// Used during inference to enforce a `R1: R2 @ P` constraint.  For\n@@ -143,16 +142,11 @@ impl<'v> DfsOp for CopyFromSourceToTarget<'v> {\n             .contains(self.source_region, point_index)\n     }\n \n-    fn add_to_target_region(\n-        &mut self,\n-        point_index: RegionElementIndex,\n-    ) -> Result<bool, !> {\n+    fn add_to_target_region(&mut self, point_index: RegionElementIndex) -> Result<bool, !> {\n         Ok(self.inferred_values.add(self.target_region, point_index))\n     }\n \n-    fn add_universal_regions_outlived_by_source_to_target(\n-        &mut self,\n-    ) -> Result<bool, !> {\n+    fn add_universal_regions_outlived_by_source_to_target(&mut self) -> Result<bool, !> {\n         Ok(\n             self.inferred_values\n                 .add_universal_regions_outlived_by(self.source_region, self.target_region),\n@@ -215,16 +209,19 @@ impl<'v, 'tcx> DfsOp for TestTargetOutlivesSource<'v, 'tcx> {\n             // (This is implied by the loop below, actually, just an\n             // irresistible micro-opt. Mm. Premature optimization. So\n             // tasty.)\n-            if self.inferred_values.contains(self.target_region, ur_in_source) {\n+            if self.inferred_values\n+                .contains(self.target_region, ur_in_source)\n+            {\n                 continue;\n             }\n \n             // If there is some other element X such that `target_region: X` and\n             // `X: ur_in_source`, OK.\n             if self.inferred_values\n-                   .universal_regions_outlived_by(self.target_region)\n-                   .any(|ur_in_target| self.universal_regions.outlives(ur_in_target, ur_in_source))\n-            {\n+                .universal_regions_outlived_by(self.target_region)\n+                .any(|ur_in_target| {\n+                    self.universal_regions.outlives(ur_in_target, ur_in_source)\n+                }) {\n                 continue;\n             }\n "}]}