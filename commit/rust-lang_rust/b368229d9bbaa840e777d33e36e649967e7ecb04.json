{"sha": "b368229d9bbaa840e777d33e36e649967e7ecb04", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzNjgyMjlkOWJiYWE4NDBlNzc3ZDMzZTM2ZTY0OTk2N2U3ZWNiMDQ=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-05-04T01:20:53Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-05-04T01:20:53Z"}, "message": "review comment: use early return", "tree": {"sha": "2cdc6f590c232bd5d9f8cadaef59950a3cecbb63", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2cdc6f590c232bd5d9f8cadaef59950a3cecbb63"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b368229d9bbaa840e777d33e36e649967e7ecb04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b368229d9bbaa840e777d33e36e649967e7ecb04", "html_url": "https://github.com/rust-lang/rust/commit/b368229d9bbaa840e777d33e36e649967e7ecb04", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b368229d9bbaa840e777d33e36e649967e7ecb04/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c872e2dc70cf20b5ac7c5ced4191824cd64bd2c", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c872e2dc70cf20b5ac7c5ced4191824cd64bd2c", "html_url": "https://github.com/rust-lang/rust/commit/3c872e2dc70cf20b5ac7c5ced4191824cd64bd2c"}], "stats": {"total": 29, "additions": 19, "deletions": 10}, "files": [{"sha": "4e1a8b0e92f13150b3ad585886496707633de077", "filename": "src/librustc_middle/ty/error.rs", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/b368229d9bbaa840e777d33e36e649967e7ecb04/src%2Flibrustc_middle%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b368229d9bbaa840e777d33e36e649967e7ecb04/src%2Flibrustc_middle%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Ferror.rs?ref=b368229d9bbaa840e777d33e36e649967e7ecb04", "patch": "@@ -609,7 +609,6 @@ impl<T> Trait<T> for X {\n             \"consider constraining the associated type `{}` to `{}`\",\n             values.expected, values.found\n         );\n-        let mut suggested = false;\n         let body_owner = self.hir().get_if_local(body_owner_def_id);\n         let current_method_ident = body_owner.and_then(|n| n.ident()).map(|i| i.name);\n \n@@ -634,7 +633,10 @@ impl<T> Trait<T> for X {\n             // type error is a comparison of an `impl` with its `trait` or when the\n             // scope is outside of a `Body`.\n         } else {\n-            suggested |= self.point_at_methods_that_satisfy_associated_type(\n+            // If we find a suitable associated function that returns the expected type, we don't\n+            // want the more general suggestion later in this method about \"consider constraining\n+            // the associated type or calling a method that returns the associated type\".\n+            let point_at_assoc_fn = self.point_at_methods_that_satisfy_associated_type(\n                 db,\n                 assoc.container.id(),\n                 current_method_ident,\n@@ -643,25 +645,32 @@ impl<T> Trait<T> for X {\n             );\n             // Possibly suggest constraining the associated type to conform to the\n             // found type.\n-            suggested |=\n-                self.suggest_constraint(db, &msg, body_owner_def_id, proj_ty, values.found);\n-        }\n-        if !suggested {\n-            suggested = self.point_at_associated_type(db, body_owner_def_id, values.found);\n+            if self.suggest_constraint(db, &msg, body_owner_def_id, proj_ty, values.found)\n+                || point_at_assoc_fn\n+            {\n+                return;\n+            }\n         }\n+\n         if let ty::Opaque(def_id, _) = proj_ty.self_ty().kind {\n             // When the expected `impl Trait` is not defined in the current item, it will come from\n             // a return type. This can occur when dealing with `TryStream` (#71035).\n-            suggested |= self.constrain_associated_type_structured_suggestion(\n+            if self.constrain_associated_type_structured_suggestion(\n                 db,\n                 self.def_span(def_id),\n                 &assoc,\n                 values.found,\n                 &msg,\n-            );\n+            ) {\n+                return;\n+            }\n+        }\n+\n+        if self.point_at_associated_type(db, body_owner_def_id, values.found) {\n+            return;\n         }\n \n-        if !suggested && !impl_comparison {\n+        if !impl_comparison {\n             // Generic suggestion when we can't be more specific.\n             if callable_scope {\n                 db.help(&format!(\"{} or calling a method that returns `{}`\", msg, values.expected));"}]}