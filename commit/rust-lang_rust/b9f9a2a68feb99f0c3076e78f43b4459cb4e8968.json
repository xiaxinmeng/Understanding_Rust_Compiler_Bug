{"sha": "b9f9a2a68feb99f0c3076e78f43b4459cb4e8968", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5ZjlhMmE2OGZlYjk5ZjBjMzA3NmU3OGY0M2I0NDU5Y2I0ZTg5Njg=", "commit": {"author": {"name": "Fran\u00e7ois Mockers", "email": "mockersf@gmail.com", "date": "2021-03-13T01:33:04Z"}, "committer": {"name": "Fran\u00e7ois Mockers", "email": "mockersf@gmail.com", "date": "2021-04-13T20:14:34Z"}, "message": "tidy format rust", "tree": {"sha": "1ab25db4f606d6201e2e5943168691051ac926e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ab25db4f606d6201e2e5943168691051ac926e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b9f9a2a68feb99f0c3076e78f43b4459cb4e8968", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b9f9a2a68feb99f0c3076e78f43b4459cb4e8968", "html_url": "https://github.com/rust-lang/rust/commit/b9f9a2a68feb99f0c3076e78f43b4459cb4e8968", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b9f9a2a68feb99f0c3076e78f43b4459cb4e8968/comments", "author": {"login": "mockersf", "id": 8672791, "node_id": "MDQ6VXNlcjg2NzI3OTE=", "avatar_url": "https://avatars.githubusercontent.com/u/8672791?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mockersf", "html_url": "https://github.com/mockersf", "followers_url": "https://api.github.com/users/mockersf/followers", "following_url": "https://api.github.com/users/mockersf/following{/other_user}", "gists_url": "https://api.github.com/users/mockersf/gists{/gist_id}", "starred_url": "https://api.github.com/users/mockersf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mockersf/subscriptions", "organizations_url": "https://api.github.com/users/mockersf/orgs", "repos_url": "https://api.github.com/users/mockersf/repos", "events_url": "https://api.github.com/users/mockersf/events{/privacy}", "received_events_url": "https://api.github.com/users/mockersf/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mockersf", "id": 8672791, "node_id": "MDQ6VXNlcjg2NzI3OTE=", "avatar_url": "https://avatars.githubusercontent.com/u/8672791?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mockersf", "html_url": "https://github.com/mockersf", "followers_url": "https://api.github.com/users/mockersf/followers", "following_url": "https://api.github.com/users/mockersf/following{/other_user}", "gists_url": "https://api.github.com/users/mockersf/gists{/gist_id}", "starred_url": "https://api.github.com/users/mockersf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mockersf/subscriptions", "organizations_url": "https://api.github.com/users/mockersf/orgs", "repos_url": "https://api.github.com/users/mockersf/repos", "events_url": "https://api.github.com/users/mockersf/events{/privacy}", "received_events_url": "https://api.github.com/users/mockersf/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df100f7c5388175605ccf8450e7077bd5939629a", "url": "https://api.github.com/repos/rust-lang/rust/commits/df100f7c5388175605ccf8450e7077bd5939629a", "html_url": "https://github.com/rust-lang/rust/commit/df100f7c5388175605ccf8450e7077bd5939629a"}], "stats": {"total": 38, "additions": 28, "deletions": 10}, "files": [{"sha": "efd453f96b8e7a6c20dec24119b0d0c13607be2f", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 28, "deletions": 10, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/b9f9a2a68feb99f0c3076e78f43b4459cb4e8968/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9f9a2a68feb99f0c3076e78f43b4459cb4e8968/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=b9f9a2a68feb99f0c3076e78f43b4459cb4e8968", "patch": "@@ -1460,18 +1460,24 @@ fn render_impl(\n                 if render_method_item {\n                     let id = cx.derive_id(format!(\"{}.{}\", item_type, name));\n                     let source_id = trait_\n-                        .and_then(|trait_| trait_\n-                            .items.iter()\n-                            .find(|item| item.name.map(|n| n.as_str().eq(&name.as_str())).unwrap_or(false))\n-                        ).map(|item| format!(\"{}.{}\", item.type_(), name));\n-                    write!(w, \"<h4 id=\\\"{}\\\" class=\\\"{}{}{}\\\">\", id, item_type, extra_class, in_trait_class);\n+                        .and_then(|trait_| {\n+                            trait_.items.iter().find(|item| {\n+                                item.name.map(|n| n.as_str().eq(&name.as_str())).unwrap_or(false)\n+                            })\n+                        })\n+                        .map(|item| format!(\"{}.{}\", item.type_(), name));\n+                    write!(\n+                        w,\n+                        \"<h4 id=\\\"{}\\\" class=\\\"{}{}{}\\\">\",\n+                        id, item_type, extra_class, in_trait_class,\n+                    );\n                     w.write_str(\"<code>\");\n                     render_assoc_item(\n                         w,\n                         item,\n                         link.anchor(source_id.as_ref().unwrap_or(&id)),\n                         ItemType::Impl,\n-                        cx\n+                        cx,\n                     );\n                     w.write_str(\"</code>\");\n                     render_stability_since_raw(\n@@ -1489,7 +1495,11 @@ fn render_impl(\n             clean::TypedefItem(ref tydef, _) => {\n                 let source_id = format!(\"{}.{}\", ItemType::AssocType, name);\n                 let id = cx.derive_id(source_id.clone());\n-                write!(w, \"<h4 id=\\\"{}\\\" class=\\\"{}{}{}\\\"><code>\", id, item_type, extra_class, in_trait_class);\n+                write!(\n+                    w,\n+                    \"<h4 id=\\\"{}\\\" class=\\\"{}{}{}\\\"><code>\",\n+                    id, item_type, extra_class, in_trait_class\n+                );\n                 assoc_type(\n                     w,\n                     item,\n@@ -1507,15 +1517,19 @@ fn render_impl(\n             clean::AssocConstItem(ref ty, ref default) => {\n                 let source_id = format!(\"{}.{}\", item_type, name);\n                 let id = cx.derive_id(source_id.clone());\n-                write!(w, \"<h4 id=\\\"{}\\\" class=\\\"{}{}{}\\\"><code>\", id, item_type, extra_class, in_trait_class);\n+                write!(\n+                    w,\n+                    \"<h4 id=\\\"{}\\\" class=\\\"{}{}{}\\\"><code>\",\n+                    id, item_type, extra_class, in_trait_class\n+                );\n                 assoc_const(\n                     w,\n                     item,\n                     ty,\n                     default.as_ref(),\n                     link.anchor(if trait_.is_some() { &source_id } else { &id }),\n                     \"\",\n-                    cx\n+                    cx,\n                 );\n                 w.write_str(\"</code>\");\n                 render_stability_since_raw(\n@@ -1532,7 +1546,11 @@ fn render_impl(\n             clean::AssocTypeItem(ref bounds, ref default) => {\n                 let source_id = format!(\"{}.{}\", item_type, name);\n                 let id = cx.derive_id(source_id.clone());\n-                write!(w, \"<h4 id=\\\"{}\\\" class=\\\"{}{}{}\\\"><code>\", id, item_type, extra_class, in_trait_class);\n+                write!(\n+                    w,\n+                    \"<h4 id=\\\"{}\\\" class=\\\"{}{}{}\\\"><code>\",\n+                    id, item_type, extra_class, in_trait_class\n+                );\n                 assoc_type(\n                     w,\n                     item,"}]}