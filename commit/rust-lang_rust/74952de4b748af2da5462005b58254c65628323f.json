{"sha": "74952de4b748af2da5462005b58254c65628323f", "node_id": "C_kwDOAAsO6NoAKDc0OTUyZGU0Yjc0OGFmMmRhNTQ2MjAwNWI1ODI1NGM2NTYyODMyM2Y", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-05-15T08:58:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-15T08:58:41Z"}, "message": "Rollup merge of #111569 - LucasFA:linkchecker-lints, r=ehuss\n\nAppease lints\n\nResolved an unnecessary drop warning that appeared when running the linkchecker. Some clippy warnings, too.\n\nEdit: Well this fired up all the CI pipeline. I hope that's not a problem.", "tree": {"sha": "5d6a75e069e6635d42cb239a5e097886ae8bb3c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d6a75e069e6635d42cb239a5e097886ae8bb3c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74952de4b748af2da5462005b58254c65628323f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkYfRBCRBK7hj4Ov3rIwAAhUIIADnP/MHjJyRQRTEluGescu0W\nLnNgLqB70ofwkPFRD7IVdz2wp5Zv9Sv/5GPacRo3paoMxDyYWsv2exz1tnJhICp9\nmjlFL0V5sKcMk9gCQbgNyciFhBBW+RReA+H8Q8fGqSDaRmp/WveWCub+gyMo1g+h\n77Rtyc32Hvvd1LsSWO/10B96Ip25O0jQOOtxja3yQXGoeiinH+w3uhHMbrYWmPrl\noF+4GgUIThyhUUYEMn3Zx/e8qtjswHWJ72Hto5U81xLfz2OLcmD543QtFFRyZv4N\n7w9++T4dmxZPXjRQZvANeTFEilR9lz5NiCFTydxf6CI/tH6wiINlICo9VFsPx0E=\n=yFI+\n-----END PGP SIGNATURE-----\n", "payload": "tree 5d6a75e069e6635d42cb239a5e097886ae8bb3c4\nparent ee914a4ee9071bc94a4d48e6b726a802bd50b3f5\nparent 044bf9d7d9f59a2917b34ff260a7bf8671506cb3\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1684141121 +0200\ncommitter GitHub <noreply@github.com> 1684141121 +0200\n\nRollup merge of #111569 - LucasFA:linkchecker-lints, r=ehuss\n\nAppease lints\n\nResolved an unnecessary drop warning that appeared when running the linkchecker. Some clippy warnings, too.\n\nEdit: Well this fired up all the CI pipeline. I hope that's not a problem.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74952de4b748af2da5462005b58254c65628323f", "html_url": "https://github.com/rust-lang/rust/commit/74952de4b748af2da5462005b58254c65628323f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74952de4b748af2da5462005b58254c65628323f/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee914a4ee9071bc94a4d48e6b726a802bd50b3f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee914a4ee9071bc94a4d48e6b726a802bd50b3f5", "html_url": "https://github.com/rust-lang/rust/commit/ee914a4ee9071bc94a4d48e6b726a802bd50b3f5"}, {"sha": "044bf9d7d9f59a2917b34ff260a7bf8671506cb3", "url": "https://api.github.com/repos/rust-lang/rust/commits/044bf9d7d9f59a2917b34ff260a7bf8671506cb3", "html_url": "https://github.com/rust-lang/rust/commit/044bf9d7d9f59a2917b34ff260a7bf8671506cb3"}], "stats": {"total": 35, "additions": 16, "deletions": 19}, "files": [{"sha": "c8a370085a045390869c6ded5c4a9f5bb44f1411", "filename": "src/tools/linkchecker/main.rs", "status": "modified", "additions": 16, "deletions": 19, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/74952de4b748af2da5462005b58254c65628323f/src%2Ftools%2Flinkchecker%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74952de4b748af2da5462005b58254c65628323f/src%2Ftools%2Flinkchecker%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Flinkchecker%2Fmain.rs?ref=74952de4b748af2da5462005b58254c65628323f", "patch": "@@ -139,18 +139,18 @@ enum FileEntry {\n type Cache = HashMap<String, FileEntry>;\n \n fn small_url_encode(s: &str) -> String {\n-    s.replace(\"<\", \"%3C\")\n-        .replace(\">\", \"%3E\")\n-        .replace(\" \", \"%20\")\n-        .replace(\"?\", \"%3F\")\n-        .replace(\"'\", \"%27\")\n-        .replace(\"&\", \"%26\")\n-        .replace(\",\", \"%2C\")\n-        .replace(\":\", \"%3A\")\n-        .replace(\";\", \"%3B\")\n-        .replace(\"[\", \"%5B\")\n-        .replace(\"]\", \"%5D\")\n-        .replace(\"\\\"\", \"%22\")\n+    s.replace('<', \"%3C\")\n+        .replace('>', \"%3E\")\n+        .replace(' ', \"%20\")\n+        .replace('?', \"%3F\")\n+        .replace('\\'', \"%27\")\n+        .replace('&', \"%26\")\n+        .replace(',', \"%2C\")\n+        .replace(':', \"%3A\")\n+        .replace(';', \"%3B\")\n+        .replace('[', \"%5B\")\n+        .replace(']', \"%5D\")\n+        .replace('\\\"', \"%22\")\n }\n \n impl Checker {\n@@ -267,7 +267,6 @@ impl Checker {\n                 FileEntry::OtherFile => return,\n                 FileEntry::Redirect { target } => {\n                     let t = target.clone();\n-                    drop(target);\n                     let (target, redir_entry) = self.load_file(&t, report);\n                     match redir_entry {\n                         FileEntry::Missing => {\n@@ -391,7 +390,7 @@ impl Checker {\n         const ERROR_INVALID_NAME: i32 = 123;\n \n         let pretty_path =\n-            file.strip_prefix(&self.root).unwrap_or(&file).to_str().unwrap().to_string();\n+            file.strip_prefix(&self.root).unwrap_or(file).to_str().unwrap().to_string();\n \n         let entry =\n             self.cache.entry(pretty_path.clone()).or_insert_with(|| match fs::metadata(file) {\n@@ -470,10 +469,8 @@ fn is_exception(file: &Path, link: &str) -> bool {\n         // NOTE: This cannot be added to `LINKCHECK_EXCEPTIONS` because the resolved path\n         // calculated in `check` function is outside `build/<triple>/doc` dir.\n         // So the `strip_prefix` method just returns the old absolute broken path.\n-        if file.ends_with(\"std/primitive.slice.html\") {\n-            if link.ends_with(\"primitive.slice.html\") {\n-                return true;\n-            }\n+        if file.ends_with(\"std/primitive.slice.html\") && link.ends_with(\"primitive.slice.html\") {\n+            return true;\n         }\n         false\n     }\n@@ -545,7 +542,7 @@ fn with_attrs_in_source<F: FnMut(&str, usize, &str)>(source: &str, attr: &str, m\n fn parse_ids(ids: &mut HashSet<String>, file: &str, source: &str, report: &mut Report) {\n     if ids.is_empty() {\n         with_attrs_in_source(source, \" id\", |fragment, i, _| {\n-            let frag = fragment.trim_start_matches(\"#\").to_owned();\n+            let frag = fragment.trim_start_matches('#').to_owned();\n             let encoded = small_url_encode(&frag);\n             if !ids.insert(frag) {\n                 report.errors += 1;"}]}