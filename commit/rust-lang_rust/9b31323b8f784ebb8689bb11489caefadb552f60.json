{"sha": "9b31323b8f784ebb8689bb11489caefadb552f60", "node_id": "C_kwDOAAsO6NoAKDliMzEzMjNiOGY3ODRlYmI4Njg5YmIxMTQ4OWNhZWZhZGI1NTJmNjA", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-06-11T15:30:46Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-06-11T16:54:20Z"}, "message": "Fix incorrectly spelled \"variadic\"", "tree": {"sha": "8ad3ee74ad79b6888a26cdcc425b531ef683b231", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ad3ee74ad79b6888a26cdcc425b531ef683b231"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b31323b8f784ebb8689bb11489caefadb552f60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b31323b8f784ebb8689bb11489caefadb552f60", "html_url": "https://github.com/rust-lang/rust/commit/9b31323b8f784ebb8689bb11489caefadb552f60", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b31323b8f784ebb8689bb11489caefadb552f60/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f6dcceef0bf2f455c29e8863413604b58e2b6b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f6dcceef0bf2f455c29e8863413604b58e2b6b5", "html_url": "https://github.com/rust-lang/rust/commit/9f6dcceef0bf2f455c29e8863413604b58e2b6b5"}], "stats": {"total": 46, "additions": 23, "deletions": 23}, "files": [{"sha": "258692a982cf79343b6b4b475fe2ef1fcc382f89", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b31323b8f784ebb8689bb11489caefadb552f60/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b31323b8f784ebb8689bb11489caefadb552f60/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=9b31323b8f784ebb8689bb11489caefadb552f60", "patch": "@@ -402,8 +402,8 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                     gate_feature_post!(self, rustdoc_internals, attr.span, msg);\n                 }\n \n-                if nested_meta.has_name(sym::tuple_varadic) {\n-                    let msg = \"`#[doc(tuple_varadic)]` is meant for internal use only\";\n+                if nested_meta.has_name(sym::tuple_variadic) {\n+                    let msg = \"`#[doc(tuple_variadic)]` is meant for internal use only\";\n                     gate_feature_post!(self, rustdoc_internals, attr.span, msg);\n                 }\n             }"}, {"sha": "7de5cb2683a9ab783dd7b3627a9346fe7aef7bc6", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9b31323b8f784ebb8689bb11489caefadb552f60/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b31323b8f784ebb8689bb11489caefadb552f60/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=9b31323b8f784ebb8689bb11489caefadb552f60", "patch": "@@ -804,7 +804,7 @@ impl CheckAttrVisitor<'_> {\n         true\n     }\n \n-    fn check_doc_tuple_varadic(&self, meta: &NestedMetaItem, hir_id: HirId) -> bool {\n+    fn check_doc_tuple_variadic(&self, meta: &NestedMetaItem, hir_id: HirId) -> bool {\n         match self.tcx.hir().find(hir_id).and_then(|node| match node {\n             hir::Node::Item(item) => Some(&item.kind),\n             _ => None,\n@@ -815,7 +815,7 @@ impl CheckAttrVisitor<'_> {\n                         .sess\n                         .struct_span_err(\n                             meta.span(),\n-                            \"`#[doc(tuple_varadic)]` can only be used on unary tuples\",\n+                            \"`#[doc(tuple_variadic)]` can only be used on unary tuples\",\n                         )\n                         .emit();\n                     return false;\n@@ -1095,9 +1095,9 @@ impl CheckAttrVisitor<'_> {\n                             is_valid = false\n                         }\n \n-                        sym::tuple_varadic\n-                            if !self.check_attr_not_crate_level(meta, hir_id, \"tuple_varadic\")\n-                                || !self.check_doc_tuple_varadic(meta, hir_id) =>\n+                        sym::tuple_variadic\n+                            if !self.check_attr_not_crate_level(meta, hir_id, \"tuple_variadic\")\n+                                || !self.check_doc_tuple_variadic(meta, hir_id) =>\n                         {\n                             is_valid = false\n                         }\n@@ -1156,7 +1156,7 @@ impl CheckAttrVisitor<'_> {\n                         | sym::notable_trait\n                         | sym::passes\n                         | sym::plugins\n-                        | sym::tuple_varadic => {}\n+                        | sym::tuple_variadic => {}\n \n                         sym::test => {\n                             if !self.check_test_attr(meta, hir_id) {"}, {"sha": "ce3efc036ae8e9a5897d8f907d385a2e8d8a072f", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b31323b8f784ebb8689bb11489caefadb552f60/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b31323b8f784ebb8689bb11489caefadb552f60/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=9b31323b8f784ebb8689bb11489caefadb552f60", "patch": "@@ -1439,7 +1439,7 @@ symbols! {\n         tuple,\n         tuple_from_req,\n         tuple_indexing,\n-        tuple_varadic,\n+        tuple_variadic,\n         two_phase,\n         ty,\n         type_alias_enum_variants,"}, {"sha": "5a9370a88eca098804b108eac8f55deab67c75fb", "filename": "library/core/src/fmt/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b31323b8f784ebb8689bb11489caefadb552f60/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b31323b8f784ebb8689bb11489caefadb552f60/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs?ref=9b31323b8f784ebb8689bb11489caefadb552f60", "patch": "@@ -2335,7 +2335,7 @@ macro_rules! tuple {\n \n macro_rules! maybe_tuple_doc {\n     ($a:ident @ #[$meta:meta] $item:item) => {\n-        #[cfg_attr(not(bootstrap), doc(tuple_varadic))]\n+        #[cfg_attr(not(bootstrap), doc(tuple_variadic))]\n         #[doc = \"This trait is implemented for tuples up to twelve items long.\"]\n         #[$meta]\n         $item"}, {"sha": "9a4c877b2d36b952b56b5fab0985fa360b52b9bc", "filename": "library/core/src/hash/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b31323b8f784ebb8689bb11489caefadb552f60/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b31323b8f784ebb8689bb11489caefadb552f60/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs?ref=9b31323b8f784ebb8689bb11489caefadb552f60", "patch": "@@ -900,7 +900,7 @@ mod impls {\n \n     macro_rules! maybe_tuple_doc {\n         ($a:ident @ #[$meta:meta] $item:item) => {\n-            #[cfg_attr(not(bootstrap), doc(tuple_varadic))]\n+            #[cfg_attr(not(bootstrap), doc(tuple_variadic))]\n             #[doc = \"This trait is implemented for tuples up to twelve items long.\"]\n             #[$meta]\n             $item"}, {"sha": "bf4431c4958e99281505c0d15506d231c661a5ba", "filename": "library/core/src/primitive_docs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b31323b8f784ebb8689bb11489caefadb552f60/library%2Fcore%2Fsrc%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b31323b8f784ebb8689bb11489caefadb552f60/library%2Fcore%2Fsrc%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fprimitive_docs.rs?ref=9b31323b8f784ebb8689bb11489caefadb552f60", "patch": "@@ -965,7 +965,7 @@ impl<T> (T,) {}\n // Fake impl that's only really used for docs.\n #[cfg(doc)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[cfg_attr(not(bootstrap), doc(tuple_varadic))]\n+#[cfg_attr(not(bootstrap), doc(tuple_variadic))]\n /// This trait is implemented on arbitrary-length tuples.\n impl<T: Clone> Clone for (T,) {\n     fn clone(&self) -> Self {\n@@ -976,7 +976,7 @@ impl<T: Clone> Clone for (T,) {\n // Fake impl that's only really used for docs.\n #[cfg(doc)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[cfg_attr(not(bootstrap), doc(tuple_varadic))]\n+#[cfg_attr(not(bootstrap), doc(tuple_variadic))]\n /// This trait is implemented on arbitrary-length tuples.\n impl<T: Copy> Copy for (T,) {\n     // empty"}, {"sha": "c6e3d045a78d3cee5a923f6caf3c68f982bc3b67", "filename": "library/core/src/tuple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b31323b8f784ebb8689bb11489caefadb552f60/library%2Fcore%2Fsrc%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b31323b8f784ebb8689bb11489caefadb552f60/library%2Fcore%2Fsrc%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftuple.rs?ref=9b31323b8f784ebb8689bb11489caefadb552f60", "patch": "@@ -105,7 +105,7 @@ macro_rules! tuple_impls {\n \n macro_rules! maybe_tuple_doc {\n     ($a:ident @ #[$meta:meta] $item:item) => {\n-        #[cfg_attr(not(bootstrap), doc(tuple_varadic))]\n+        #[cfg_attr(not(bootstrap), doc(tuple_variadic))]\n         #[doc = \"This trait is implemented for tuples up to twelve items long.\"]\n         #[$meta]\n         $item"}, {"sha": "bf4431c4958e99281505c0d15506d231c661a5ba", "filename": "library/std/src/primitive_docs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b31323b8f784ebb8689bb11489caefadb552f60/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b31323b8f784ebb8689bb11489caefadb552f60/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprimitive_docs.rs?ref=9b31323b8f784ebb8689bb11489caefadb552f60", "patch": "@@ -965,7 +965,7 @@ impl<T> (T,) {}\n // Fake impl that's only really used for docs.\n #[cfg(doc)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[cfg_attr(not(bootstrap), doc(tuple_varadic))]\n+#[cfg_attr(not(bootstrap), doc(tuple_variadic))]\n /// This trait is implemented on arbitrary-length tuples.\n impl<T: Clone> Clone for (T,) {\n     fn clone(&self) -> Self {\n@@ -976,7 +976,7 @@ impl<T: Clone> Clone for (T,) {\n // Fake impl that's only really used for docs.\n #[cfg(doc)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[cfg_attr(not(bootstrap), doc(tuple_varadic))]\n+#[cfg_attr(not(bootstrap), doc(tuple_variadic))]\n /// This trait is implemented on arbitrary-length tuples.\n impl<T: Copy> Copy for (T,) {\n     // empty"}, {"sha": "d4c38f34b5b119824c8a11882bcdfea16bff131d", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b31323b8f784ebb8689bb11489caefadb552f60/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b31323b8f784ebb8689bb11489caefadb552f60/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=9b31323b8f784ebb8689bb11489caefadb552f60", "patch": "@@ -500,7 +500,7 @@ pub(crate) fn build_impl(\n             for_,\n             items: trait_items,\n             polarity,\n-            kind: if utils::has_doc_flag(tcx, did, sym::tuple_varadic) {\n+            kind: if utils::has_doc_flag(tcx, did, sym::tuple_variadic) {\n                 ImplKind::TupleVaradic\n             } else {\n                 ImplKind::Normal"}, {"sha": "fd30691c32489ea4010b38d73ca8e60c76d51c5f", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b31323b8f784ebb8689bb11489caefadb552f60/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b31323b8f784ebb8689bb11489caefadb552f60/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=9b31323b8f784ebb8689bb11489caefadb552f60", "patch": "@@ -1999,7 +1999,7 @@ fn clean_impl<'tcx>(\n             for_,\n             items,\n             polarity: tcx.impl_polarity(def_id),\n-            kind: if utils::has_doc_flag(tcx, def_id.to_def_id(), sym::tuple_varadic) {\n+            kind: if utils::has_doc_flag(tcx, def_id.to_def_id(), sym::tuple_variadic) {\n                 ImplKind::TupleVaradic\n             } else {\n                 ImplKind::Normal"}, {"sha": "83ab9acd3005a1330bf7883fd5f2a3e6df3ff063", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b31323b8f784ebb8689bb11489caefadb552f60/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b31323b8f784ebb8689bb11489caefadb552f60/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=9b31323b8f784ebb8689bb11489caefadb552f60", "patch": "@@ -2407,7 +2407,7 @@ impl ImplKind {\n         matches!(self, ImplKind::Blanket(_))\n     }\n \n-    pub(crate) fn is_tuple_varadic(&self) -> bool {\n+    pub(crate) fn is_tuple_variadic(&self) -> bool {\n         matches!(self, ImplKind::TupleVaradic)\n     }\n "}, {"sha": "69bd0744a1096a764f710c62482bec4eb0fb921e", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b31323b8f784ebb8689bb11489caefadb552f60/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b31323b8f784ebb8689bb11489caefadb552f60/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=9b31323b8f784ebb8689bb11489caefadb552f60", "patch": "@@ -1076,7 +1076,7 @@ impl clean::Impl {\n \n             if let clean::Type::Tuple(types) = &self.for_ &&\n                 let [clean::Type::Generic(name)] = &types[..] &&\n-                (self.kind.is_tuple_varadic() || self.kind.is_auto()) {\n+                (self.kind.is_tuple_variadic() || self.kind.is_auto()) {\n                 primitive_link_fragment(f, PrimitiveType::Tuple, &format!(\"({name}, ...)\"), \"#trait-implementations-1\", cx)?;\n             } else if let Some(ty) = self.kind.as_blanket_ty() {\n                 fmt_type(ty, f, use_absolute, cx)?;"}, {"sha": "6a144412d0751541c914963d464d2bd25a6330dd", "filename": "src/test/ui/feature-gates/feature-gate-rustdoc_internals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b31323b8f784ebb8689bb11489caefadb552f60/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustdoc_internals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b31323b8f784ebb8689bb11489caefadb552f60/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustdoc_internals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustdoc_internals.rs?ref=9b31323b8f784ebb8689bb11489caefadb552f60", "patch": "@@ -4,7 +4,7 @@ mod foo {}\n \n trait Mine {}\n \n-#[doc(tuple_varadic)]  //~ ERROR: `#[doc(tuple_varadic)]` is meant for internal use only\n+#[doc(tuple_variadic)]  //~ ERROR: `#[doc(tuple_variadic)]` is meant for internal use only\n impl<T> Mine for (T,) {}\n \n fn main() {}"}, {"sha": "2b1c790e80c1748bba8b4e38281b97f82007b6b4", "filename": "src/test/ui/feature-gates/feature-gate-rustdoc_internals.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b31323b8f784ebb8689bb11489caefadb552f60/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustdoc_internals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b31323b8f784ebb8689bb11489caefadb552f60/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustdoc_internals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustdoc_internals.stderr?ref=9b31323b8f784ebb8689bb11489caefadb552f60", "patch": "@@ -7,10 +7,10 @@ LL | #[doc(keyword = \"match\")]\n    = note: see issue #90418 <https://github.com/rust-lang/rust/issues/90418> for more information\n    = help: add `#![feature(rustdoc_internals)]` to the crate attributes to enable\n \n-error[E0658]: `#[doc(tuple_varadic)]` is meant for internal use only\n+error[E0658]: `#[doc(tuple_variadic)]` is meant for internal use only\n   --> $DIR/feature-gate-rustdoc_internals.rs:7:1\n    |\n-LL | #[doc(tuple_varadic)]\n+LL | #[doc(tuple_variadic)]\n    | ^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #90418 <https://github.com/rust-lang/rust/issues/90418> for more information"}]}