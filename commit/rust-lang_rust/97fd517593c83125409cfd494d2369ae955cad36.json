{"sha": "97fd517593c83125409cfd494d2369ae955cad36", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3ZmQ1MTc1OTNjODMxMjU0MDljZmQ0OTRkMjM2OWFlOTU1Y2FkMzY=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2017-12-08T07:39:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-12-08T07:39:01Z"}, "message": "Merge pull request #2247 from topecongiro/optimize-snippet\n\nOptimize snippet()", "tree": {"sha": "9d71834d818b2b1b5d4470a5a391ea6b9222713c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d71834d818b2b1b5d4470a5a391ea6b9222713c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97fd517593c83125409cfd494d2369ae955cad36", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJaKkGVCRBK7hj4Ov3rIwAAdHIIALL+D4adLD1P3MIisDMala+b\nor+gwj2qDm0/e+Vdcmlvf1QveR47jNJotL4TSjWrB6nliAWINjcsO8mysFUhbJVr\nv7gLOtfnV8FHuQInist+a2oRmo1QPj39K453njcvBlos/pTlIaQhLFDoaOi5S6AL\nzVBtaJmfQKzIhzJp4wO9RfO3MiZIJytzPYi9Qs8bJH2eGSOipOZYvo8cKu5oPgAh\nGV+PFKyn64fxXU0ODXvfUICnrEAuyyM1BDilrF4oiCIDcZNDLhSv4lIGjH5ecAHO\nlC21IT05dK9yMlYBJQ+BEPbU2qoOJzkX55SrwSrxW4Hv0N60v9LnhhWBcylLarU=\n=eAAy\n-----END PGP SIGNATURE-----\n", "payload": "tree 9d71834d818b2b1b5d4470a5a391ea6b9222713c\nparent 5f50f423683731c24e2ffde1f4e0c9e3d7b7ca5a\nparent 3ebe0543626111475a2658c544b6d582d199d147\nauthor Nick Cameron <nrc@ncameron.org> 1512718741 +1300\ncommitter GitHub <noreply@github.com> 1512718741 +1300\n\nMerge pull request #2247 from topecongiro/optimize-snippet\n\nOptimize snippet()"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97fd517593c83125409cfd494d2369ae955cad36", "html_url": "https://github.com/rust-lang/rust/commit/97fd517593c83125409cfd494d2369ae955cad36", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97fd517593c83125409cfd494d2369ae955cad36/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f50f423683731c24e2ffde1f4e0c9e3d7b7ca5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f50f423683731c24e2ffde1f4e0c9e3d7b7ca5a", "html_url": "https://github.com/rust-lang/rust/commit/5f50f423683731c24e2ffde1f4e0c9e3d7b7ca5a"}, {"sha": "3ebe0543626111475a2658c544b6d582d199d147", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ebe0543626111475a2658c544b6d582d199d147", "html_url": "https://github.com/rust-lang/rust/commit/3ebe0543626111475a2658c544b6d582d199d147"}], "stats": {"total": 191, "additions": 116, "deletions": 75}, "files": [{"sha": "c42fbb6f7cf656b27db32c29a3c4490cd6678e9c", "filename": "src/bin/rustfmt-format-diff.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/97fd517593c83125409cfd494d2369ae955cad36/src%2Fbin%2Frustfmt-format-diff.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97fd517593c83125409cfd494d2369ae955cad36/src%2Fbin%2Frustfmt-format-diff.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Frustfmt-format-diff.rs?ref=97fd517593c83125409cfd494d2369ae955cad36", "patch": "@@ -120,7 +120,7 @@ fn run(opts: &getopts::Options) -> Result<(), FormatDiffError> {\n \n     let filter = matches\n         .opt_str(\"f\")\n-        .unwrap_or_else(|| DEFAULT_PATTERN.into());\n+        .unwrap_or_else(|| DEFAULT_PATTERN.to_owned());\n \n     let skip_prefix = matches\n         .opt_str(\"p\")\n@@ -247,19 +247,19 @@ fn scan_simple_git_diff() {\n         &ranges,\n         &[\n             Range {\n-                file: \"src/ir/item.rs\".into(),\n+                file: \"src/ir/item.rs\".to_owned(),\n                 range: [148, 158],\n             },\n             Range {\n-                file: \"src/ir/item.rs\".into(),\n+                file: \"src/ir/item.rs\".to_owned(),\n                 range: [160, 170],\n             },\n             Range {\n-                file: \"src/ir/traversal.rs\".into(),\n+                file: \"src/ir/traversal.rs\".to_owned(),\n                 range: [9, 16],\n             },\n             Range {\n-                file: \"src/ir/traversal.rs\".into(),\n+                file: \"src/ir/traversal.rs\".to_owned(),\n                 range: [35, 43],\n             }\n         ]"}, {"sha": "8cd491b6ee38cf3ed8cbf34f17d2a70b7f6b4b62", "filename": "src/comment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97fd517593c83125409cfd494d2369ae955cad36/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97fd517593c83125409cfd494d2369ae955cad36/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=97fd517593c83125409cfd494d2369ae955cad36", "patch": "@@ -918,7 +918,7 @@ pub fn recover_comment_removed(\n     let snippet = context.snippet(span);\n     if snippet != new && changed_comment_content(&snippet, &new) {\n         // We missed some comments. Keep the original text.\n-        Some(snippet)\n+        Some(snippet.to_owned())\n     } else {\n         Some(new)\n     }"}, {"sha": "259ac0007ed6315d35e0075fdb8a711be4b6caed", "filename": "src/expr.rs", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/97fd517593c83125409cfd494d2369ae955cad36/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97fd517593c83125409cfd494d2369ae955cad36/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=97fd517593c83125409cfd494d2369ae955cad36", "patch": "@@ -58,7 +58,7 @@ pub fn format_expr(\n     skip_out_of_file_lines_range!(context, expr.span);\n \n     if contains_skip(&*expr.attrs) {\n-        return Some(context.snippet(expr.span()));\n+        return Some(context.snippet(expr.span()).to_owned());\n     }\n \n     let expr_rw = match expr.node {\n@@ -168,7 +168,7 @@ pub fn format_expr(\n         ast::ExprKind::Mac(ref mac) => {\n             rewrite_macro(mac, None, context, shape, MacroPosition::Expression).or_else(|| {\n                 wrap_str(\n-                    context.snippet(expr.span),\n+                    context.snippet(expr.span).to_owned(),\n                     context.config.max_width(),\n                     shape,\n                 )\n@@ -241,7 +241,7 @@ pub fn format_expr(\n                     } else if needs_space_before_range(context, lhs) {\n                         format!(\" {}\", delim)\n                     } else {\n-                        delim.into()\n+                        delim.to_owned()\n                     };\n                     rewrite_pair(\n                         &*lhs,\n@@ -256,25 +256,25 @@ pub fn format_expr(\n                     let sp_delim = if context.config.spaces_around_ranges() {\n                         format!(\"{} \", delim)\n                     } else {\n-                        delim.into()\n+                        delim.to_owned()\n                     };\n                     rewrite_unary_prefix(context, &sp_delim, &*rhs, shape)\n                 }\n                 (Some(lhs), None) => {\n                     let sp_delim = if context.config.spaces_around_ranges() {\n                         format!(\" {}\", delim)\n                     } else {\n-                        delim.into()\n+                        delim.to_owned()\n                     };\n                     rewrite_unary_suffix(context, &sp_delim, &*lhs, shape)\n                 }\n-                (None, None) => Some(delim.into()),\n+                (None, None) => Some(delim.to_owned()),\n             }\n         }\n         // We do not format these expressions yet, but they should still\n         // satisfy our width restrictions.\n         ast::ExprKind::InPlace(..) | ast::ExprKind::InlineAsm(..) => {\n-            Some(context.snippet(expr.span))\n+            Some(context.snippet(expr.span).to_owned())\n         }\n         ast::ExprKind::Catch(ref block) => {\n             if let rw @ Some(_) = rewrite_single_line_block(context, \"do catch \", block, shape) {\n@@ -629,7 +629,7 @@ pub fn rewrite_block_with_visitor(\n         return rw;\n     }\n \n-    let mut visitor = FmtVisitor::from_codemap(context.parse_session, context.config);\n+    let mut visitor = FmtVisitor::from_context(context);\n     visitor.block_indent = shape.indent;\n     visitor.is_if_else_block = context.is_if_else_block;\n     match block.rules {\n@@ -1308,7 +1308,7 @@ fn rewrite_match(\n             Some(format!(\"match {} {{}}\", cond_str))\n         } else {\n             // Empty match with comments or inner attributes? We are not going to bother, sorry ;)\n-            Some(context.snippet(span))\n+            Some(context.snippet(span).to_owned())\n         }\n     } else {\n         Some(format!(\n@@ -1767,7 +1767,11 @@ fn can_extend_match_arm_body(body: &ast::Expr) -> bool {\n pub fn rewrite_literal(context: &RewriteContext, l: &ast::Lit, shape: Shape) -> Option<String> {\n     match l.node {\n         ast::LitKind::Str(_, ast::StrStyle::Cooked) => rewrite_string_lit(context, l.span, shape),\n-        _ => wrap_str(context.snippet(l.span), context.config.max_width(), shape),\n+        _ => wrap_str(\n+            context.snippet(l.span).to_owned(),\n+            context.config.max_width(),\n+            shape,\n+        ),\n     }\n }\n \n@@ -1798,7 +1802,7 @@ fn rewrite_string_lit(context: &RewriteContext, span: Span, shape: Shape) -> Opt\n             );\n             return wrap_str(indented_string_lit, context.config.max_width(), shape);\n         } else {\n-            return wrap_str(string_lit, context.config.max_width(), shape);\n+            return wrap_str(string_lit.to_owned(), context.config.max_width(), shape);\n         }\n     }\n \n@@ -2530,7 +2534,7 @@ pub fn rewrite_field(\n     prefix_max_width: usize,\n ) -> Option<String> {\n     if contains_skip(&field.attrs) {\n-        return Some(context.snippet(field.span()));\n+        return Some(context.snippet(field.span()).to_owned());\n     }\n     let name = &field.ident.node.to_string();\n     if field.is_shorthand {\n@@ -2738,7 +2742,7 @@ fn rewrite_assignment(\n ) -> Option<String> {\n     let operator_str = match op {\n         Some(op) => context.snippet(op.span),\n-        None => \"=\".to_owned(),\n+        None => \"=\",\n     };\n \n     // 1 = space between lhs and operator."}, {"sha": "9fbf814919a230e6148448b3307beae0f2264724", "filename": "src/imports.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/97fd517593c83125409cfd494d2369ae955cad36/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97fd517593c83125409cfd494d2369ae955cad36/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=97fd517593c83125409cfd494d2369ae955cad36", "patch": "@@ -148,7 +148,7 @@ impl Rewrite for ast::UseTree {\n                     let path_str = rewrite_prefix(&self.prefix, context, prefix_shape)?;\n                     Some(format!(\"{}::*\", path_str))\n                 } else {\n-                    Some(\"*\".into())\n+                    Some(\"*\".to_owned())\n                 }\n             }\n             ast::UseTreeKind::Simple(ident) => {\n@@ -184,7 +184,7 @@ fn rewrite_import(\n         .and_then(|shape| match tree.kind {\n             // If we have an empty nested group with no attributes, we erase it\n             ast::UseTreeKind::Nested(ref items) if items.is_empty() && attrs.is_empty() => {\n-                Some(\"\".into())\n+                Some(\"\".to_owned())\n             }\n             _ => tree.rewrite(context, shape),\n         });"}, {"sha": "b3647f26f5333ebd2f27d4a9cdb994cef07b7c3a", "filename": "src/items.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/97fd517593c83125409cfd494d2369ae955cad36/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97fd517593c83125409cfd494d2369ae955cad36/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=97fd517593c83125409cfd494d2369ae955cad36", "patch": "@@ -382,7 +382,7 @@ impl<'a> FmtVisitor<'a> {\n \n                             format_expr(e, ExprType::Statement, &self.get_context(), self.shape())\n                                 .map(|s| s + suffix)\n-                                .or_else(|| Some(self.snippet(e.span)))\n+                                .or_else(|| Some(self.snippet(e.span).to_owned()))\n                         }\n                         None => stmt.rewrite(&self.get_context(), self.shape()),\n                     }\n@@ -526,7 +526,7 @@ impl<'a> FmtVisitor<'a> {\n         if contains_skip(&field.node.attrs) {\n             let lo = field.node.attrs[0].span.lo();\n             let span = mk_sp(lo, field.span.hi());\n-            return Some(self.snippet(span));\n+            return Some(self.snippet(span).to_owned());\n         }\n \n         let context = self.get_context();\n@@ -657,7 +657,7 @@ pub fn format_impl(\n         let open_pos = snippet.find_uncommented(\"{\")? + 1;\n \n         if !items.is_empty() || contains_comment(&snippet[open_pos..]) {\n-            let mut visitor = FmtVisitor::from_codemap(context.parse_session, context.config);\n+            let mut visitor = FmtVisitor::from_context(context);\n             visitor.block_indent = offset.block_only().block_indent(context.config);\n             visitor.last_pos = item.span.lo() + BytePos(open_pos as u32);\n \n@@ -1055,7 +1055,7 @@ pub fn format_trait(context: &RewriteContext, item: &ast::Item, offset: Indent)\n         let open_pos = snippet.find_uncommented(\"{\")? + 1;\n \n         if !trait_items.is_empty() || contains_comment(&snippet[open_pos..]) {\n-            let mut visitor = FmtVisitor::from_codemap(context.parse_session, context.config);\n+            let mut visitor = FmtVisitor::from_context(context);\n             visitor.block_indent = offset.block_only().block_indent(context.config);\n             visitor.last_pos = item.span.lo() + BytePos(open_pos as u32);\n \n@@ -1427,7 +1427,8 @@ pub fn rewrite_struct_field(\n     lhs_max_width: usize,\n ) -> Option<String> {\n     if contains_skip(&field.attrs) {\n-        return Some(context.snippet(mk_sp(field.attrs[0].span.lo(), field.span.hi())));\n+        let snippet = context.snippet(mk_sp(field.attrs[0].span.lo(), field.span.hi()));\n+        return Some(snippet.to_owned());\n     }\n \n     let type_annotation_spacing = type_annotation_spacing(context.config);"}, {"sha": "f6902db969c827bb32f819f6a523fdcc6d9cf85a", "filename": "src/lib.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/97fd517593c83125409cfd494d2369ae955cad36/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97fd517593c83125409cfd494d2369ae955cad36/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=97fd517593c83125409cfd494d2369ae955cad36", "patch": "@@ -45,7 +45,7 @@ use config::Config;\n use filemap::FileMap;\n use issues::{BadIssueSeeker, Issue};\n use utils::use_colored_tty;\n-use visitor::FmtVisitor;\n+use visitor::{FmtVisitor, SnippetProvider};\n \n pub use self::summary::Summary;\n \n@@ -317,8 +317,13 @@ where\n         if config.verbose() {\n             println!(\"Formatting {}\", path_str);\n         }\n-        let mut visitor = FmtVisitor::from_codemap(parse_session, config);\n-        let filemap = visitor.codemap.lookup_char_pos(module.inner.lo()).file;\n+        let filemap = parse_session\n+            .codemap()\n+            .lookup_char_pos(module.inner.lo())\n+            .file;\n+        let big_snippet = filemap.src.as_ref().unwrap();\n+        let snippet_provider = SnippetProvider::new(filemap.start_pos, big_snippet);\n+        let mut visitor = FmtVisitor::from_codemap(parse_session, config, &snippet_provider);\n         // Format inner attributes if available.\n         if !krate.attrs.is_empty() && path == main_file {\n             visitor.skip_empty_lines(filemap.end_pos);"}, {"sha": "3c5db3c977abf1ccfb25b30faa5f259824578dce", "filename": "src/macros.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/97fd517593c83125409cfd494d2369ae955cad36/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97fd517593c83125409cfd494d2369ae955cad36/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=97fd517593c83125409cfd494d2369ae955cad36", "patch": "@@ -162,7 +162,7 @@ pub fn rewrite_macro(\n         loop {\n             match parse_macro_arg(&mut parser) {\n                 Some(arg) => arg_vec.push(arg),\n-                None => return Some(context.snippet(mac.span)),\n+                None => return Some(context.snippet(mac.span).to_owned()),\n             }\n \n             match parser.token {\n@@ -182,13 +182,13 @@ pub fn rewrite_macro(\n                                         break;\n                                     }\n                                 }\n-                                None => return Some(context.snippet(mac.span)),\n+                                None => return Some(context.snippet(mac.span).to_owned()),\n                             }\n                         }\n                     }\n-                    return Some(context.snippet(mac.span));\n+                    return Some(context.snippet(mac.span).to_owned());\n                 }\n-                _ => return Some(context.snippet(mac.span)),\n+                _ => return Some(context.snippet(mac.span).to_owned()),\n             }\n \n             parser.bump();\n@@ -271,7 +271,7 @@ pub fn rewrite_macro(\n         }\n         MacroStyle::Braces => {\n             // Skip macro invocations with braces, for now.\n-            indent_macro_snippet(context, &context.snippet(mac.span), shape.indent)\n+            indent_macro_snippet(context, context.snippet(mac.span), shape.indent)\n         }\n     }\n }"}, {"sha": "74ae537e53421da1e3979fbdbf0a53be4b71e28e", "filename": "src/patterns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97fd517593c83125409cfd494d2369ae955cad36/src%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97fd517593c83125409cfd494d2369ae955cad36/src%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpatterns.rs?ref=97fd517593c83125409cfd494d2369ae955cad36", "patch": "@@ -122,7 +122,7 @@ impl Rewrite for Pat {\n                 rewrite_struct_pat(path, fields, ellipsis, self.span, context, shape)\n             }\n             // FIXME(#819) format pattern macros.\n-            PatKind::Mac(..) => Some(context.snippet(self.span)),\n+            PatKind::Mac(..) => Some(context.snippet(self.span).to_owned()),\n         }\n     }\n }"}, {"sha": "708e31d86dd9e3d0875b2566ae8e3ea6908d81eb", "filename": "src/rewrite.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/97fd517593c83125409cfd494d2369ae955cad36/src%2Frewrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97fd517593c83125409cfd494d2369ae955cad36/src%2Frewrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frewrite.rs?ref=97fd517593c83125409cfd494d2369ae955cad36", "patch": "@@ -15,6 +15,7 @@ use syntax::parse::ParseSess;\n \n use config::{Config, IndentStyle};\n use shape::Shape;\n+use visitor::SnippetProvider;\n \n pub trait Rewrite {\n     /// Rewrite self into shape.\n@@ -34,11 +35,12 @@ pub struct RewriteContext<'a> {\n     pub is_if_else_block: bool,\n     // When rewriting chain, veto going multi line except the last element\n     pub force_one_line_chain: bool,\n+    pub snippet_provider: &'a SnippetProvider<'a>,\n }\n \n impl<'a> RewriteContext<'a> {\n-    pub fn snippet(&self, span: Span) -> String {\n-        self.codemap.span_to_snippet(span).unwrap()\n+    pub fn snippet(&self, span: Span) -> &str {\n+        self.snippet_provider.span_to_snippet(span).unwrap()\n     }\n \n     /// Return true if we should use block indent style for rewriting function call."}, {"sha": "69633568755c4f0f3bfae37f40ebf77f8f94bdbb", "filename": "src/rustfmt_diff.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/97fd517593c83125409cfd494d2369ae955cad36/src%2Frustfmt_diff.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97fd517593c83125409cfd494d2369ae955cad36/src%2Frustfmt_diff.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustfmt_diff.rs?ref=97fd517593c83125409cfd494d2369ae955cad36", "patch": "@@ -180,10 +180,10 @@ mod test {\n                 Mismatch {\n                     line_number: 2,\n                     lines: vec![\n-                        Context(\"two\".into()),\n-                        Resulting(\"three\".into()),\n-                        Expected(\"trois\".into()),\n-                        Context(\"four\".into()),\n+                        Context(\"two\".to_owned()),\n+                        Resulting(\"three\".to_owned()),\n+                        Expected(\"trois\".to_owned()),\n+                        Context(\"four\".to_owned()),\n                     ],\n                 },\n             ]\n@@ -201,18 +201,18 @@ mod test {\n                 Mismatch {\n                     line_number: 2,\n                     lines: vec![\n-                        Context(\"two\".into()),\n-                        Resulting(\"three\".into()),\n-                        Expected(\"trois\".into()),\n-                        Context(\"four\".into()),\n+                        Context(\"two\".to_owned()),\n+                        Resulting(\"three\".to_owned()),\n+                        Expected(\"trois\".to_owned()),\n+                        Context(\"four\".to_owned()),\n                     ],\n                 },\n                 Mismatch {\n                     line_number: 5,\n                     lines: vec![\n-                        Resulting(\"five\".into()),\n-                        Expected(\"cinq\".into()),\n-                        Context(\"six\".into()),\n+                        Resulting(\"five\".to_owned()),\n+                        Expected(\"cinq\".to_owned()),\n+                        Context(\"six\".to_owned()),\n                     ],\n                 },\n             ]\n@@ -229,7 +229,7 @@ mod test {\n             vec![\n                 Mismatch {\n                     line_number: 3,\n-                    lines: vec![Resulting(\"three\".into()), Expected(\"trois\".into())],\n+                    lines: vec![Resulting(\"three\".to_owned()), Expected(\"trois\".to_owned())],\n                 },\n             ]\n         );\n@@ -245,7 +245,7 @@ mod test {\n             vec![\n                 Mismatch {\n                     line_number: 5,\n-                    lines: vec![Context(\"five\".into()), Expected(\"\".into())],\n+                    lines: vec![Context(\"five\".to_owned()), Expected(\"\".to_owned())],\n                 },\n             ]\n         );"}, {"sha": "2ba0b744a5853aeddde8a9674aa0ceebe9ae7c33", "filename": "src/visitor.rs", "status": "modified", "additions": 54, "deletions": 25, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/97fd517593c83125409cfd494d2369ae955cad36/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97fd517593c83125409cfd494d2369ae955cad36/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=97fd517593c83125409cfd494d2369ae955cad36", "patch": "@@ -47,6 +47,30 @@ fn is_extern_crate(item: &ast::Item) -> bool {\n     }\n }\n \n+/// Creates a string slice corresponding to the specified span.\n+pub struct SnippetProvider<'a> {\n+    /// A pointer to the content of the file we are formatting.\n+    big_snippet: &'a str,\n+    /// A position of the start of `big_snippet`, used as an offset.\n+    start_pos: usize,\n+}\n+\n+impl<'a> SnippetProvider<'a> {\n+    pub fn span_to_snippet(&self, span: Span) -> Option<&str> {\n+        let start_index = span.lo().to_usize().checked_sub(self.start_pos)?;\n+        let end_index = span.hi().to_usize().checked_sub(self.start_pos)?;\n+        Some(&self.big_snippet[start_index..end_index])\n+    }\n+\n+    pub fn new(start_pos: BytePos, big_snippet: &'a str) -> Self {\n+        let start_pos = start_pos.to_usize();\n+        SnippetProvider {\n+            big_snippet,\n+            start_pos,\n+        }\n+    }\n+}\n+\n pub struct FmtVisitor<'a> {\n     pub parse_session: &'a ParseSess,\n     pub codemap: &'a CodeMap,\n@@ -56,9 +80,10 @@ pub struct FmtVisitor<'a> {\n     pub block_indent: Indent,\n     pub config: &'a Config,\n     pub is_if_else_block: bool,\n+    pub snippet_provider: &'a SnippetProvider<'a>,\n }\n \n-impl<'a> FmtVisitor<'a> {\n+impl<'b, 'a: 'b> FmtVisitor<'a> {\n     pub fn shape(&self) -> Shape {\n         Shape::indented(self.block_indent, self.config)\n     }\n@@ -395,7 +420,7 @@ impl<'a> FmtVisitor<'a> {\n                 self.push_rewrite(item.span, rewrite);\n             }\n             ast::ItemKind::GlobalAsm(..) => {\n-                let snippet = Some(self.snippet(item.span));\n+                let snippet = Some(self.snippet(item.span).to_owned());\n                 self.push_rewrite(item.span, snippet);\n             }\n             ast::ItemKind::MacroDef(..) => {\n@@ -496,12 +521,24 @@ impl<'a> FmtVisitor<'a> {\n \n     pub fn push_rewrite(&mut self, span: Span, rewrite: Option<String>) {\n         self.format_missing_with_indent(source!(self, span).lo());\n-        let result = rewrite.unwrap_or_else(|| self.snippet(span));\n-        self.buffer.push_str(&result);\n+        if let Some(ref s) = rewrite {\n+            self.buffer.push_str(s);\n+        } else {\n+            let snippet = self.snippet(span);\n+            self.buffer.push_str(snippet);\n+        }\n         self.last_pos = source!(self, span).hi();\n     }\n \n-    pub fn from_codemap(parse_session: &'a ParseSess, config: &'a Config) -> FmtVisitor<'a> {\n+    pub fn from_context(ctx: &'a RewriteContext) -> FmtVisitor<'a> {\n+        FmtVisitor::from_codemap(ctx.parse_session, ctx.config, ctx.snippet_provider)\n+    }\n+\n+    pub fn from_codemap(\n+        parse_session: &'a ParseSess,\n+        config: &'a Config,\n+        snippet_provider: &'a SnippetProvider,\n+    ) -> FmtVisitor<'a> {\n         FmtVisitor {\n             parse_session: parse_session,\n             codemap: parse_session.codemap(),\n@@ -510,25 +547,16 @@ impl<'a> FmtVisitor<'a> {\n             block_indent: Indent::empty(),\n             config: config,\n             is_if_else_block: false,\n+            snippet_provider: snippet_provider,\n         }\n     }\n \n-    pub fn opt_snippet(&self, span: Span) -> Option<String> {\n-        self.codemap.span_to_snippet(span).ok()\n+    pub fn opt_snippet(&'b self, span: Span) -> Option<&'a str> {\n+        self.snippet_provider.span_to_snippet(span)\n     }\n \n-    pub fn snippet(&self, span: Span) -> String {\n-        match self.codemap.span_to_snippet(span) {\n-            Ok(s) => s,\n-            Err(_) => {\n-                eprintln!(\n-                    \"Couldn't make snippet for span {:?}->{:?}\",\n-                    self.codemap.lookup_char_pos(span.lo()),\n-                    self.codemap.lookup_char_pos(span.hi())\n-                );\n-                \"\".to_owned()\n-            }\n-        }\n+    pub fn snippet(&'b self, span: Span) -> &'a str {\n+        self.opt_snippet(span).unwrap()\n     }\n \n     // Returns true if we should skip the following item.\n@@ -725,6 +753,7 @@ impl<'a> FmtVisitor<'a> {\n             use_block: false,\n             is_if_else_block: false,\n             force_one_line_chain: false,\n+            snippet_provider: &self.snippet_provider,\n         }\n     }\n }\n@@ -799,10 +828,10 @@ impl Rewrite for ast::Attribute {\n                     .unwrap_or(0),\n                 ..shape\n             };\n-            rewrite_comment(&snippet, false, doc_shape, context.config)\n+            rewrite_comment(snippet, false, doc_shape, context.config)\n         } else {\n-            if contains_comment(&snippet) {\n-                return Some(snippet);\n+            if contains_comment(snippet) {\n+                return Some(snippet.to_owned());\n             }\n             // 1 = `[`\n             let shape = shape.offset_left(prefix.len() + 1)?;\n@@ -953,7 +982,7 @@ impl<'a> Rewrite for [ast::Attribute] {\n }\n \n // Format `#[derive(..)]`, using visual indent & mixed style when we need to go multiline.\n-fn format_derive(context: &RewriteContext, derive_args: &[String], shape: Shape) -> Option<String> {\n+fn format_derive(context: &RewriteContext, derive_args: &[&str], shape: Shape) -> Option<String> {\n     let mut result = String::with_capacity(128);\n     result.push_str(\"#[derive(\");\n     // 11 = `#[derive()]`\n@@ -995,7 +1024,7 @@ fn is_derive(attr: &ast::Attribute) -> bool {\n }\n \n /// Returns the arguments of `#[derive(...)]`.\n-fn get_derive_args(context: &RewriteContext, attr: &ast::Attribute) -> Option<Vec<String>> {\n+fn get_derive_args<'a>(context: &'a RewriteContext, attr: &ast::Attribute) -> Option<Vec<&'a str>> {\n     attr.meta().and_then(|meta_item| match meta_item.node {\n         ast::MetaItemKind::List(ref args) if meta_item.name.as_str() == \"derive\" => {\n             // Every argument of `derive` should be `NestedMetaItemKind::Literal`.\n@@ -1014,7 +1043,7 @@ pub fn rewrite_extern_crate(context: &RewriteContext, item: &ast::Item) -> Optio\n     assert!(is_extern_crate(item));\n     let new_str = context.snippet(item.span);\n     Some(if contains_comment(&new_str) {\n-        new_str\n+        new_str.to_owned()\n     } else {\n         let no_whitespace = &new_str.split_whitespace().collect::<Vec<&str>>().join(\" \");\n         String::from(&*Regex::new(r\"\\s;\").unwrap().replace(no_whitespace, \";\"))"}]}