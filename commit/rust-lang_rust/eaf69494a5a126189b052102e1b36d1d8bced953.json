{"sha": "eaf69494a5a126189b052102e1b36d1d8bced953", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhZjY5NDk0YTVhMTI2MTg5YjA1MjEwMmUxYjM2ZDFkOGJjZWQ5NTM=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-22T22:34:35Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T23:54:36Z"}, "message": "librustc: De-`@mut` the loop scope in liveness", "tree": {"sha": "642500e73febb3a1547fb6672db6b2aab446ac37", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/642500e73febb3a1547fb6672db6b2aab446ac37"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eaf69494a5a126189b052102e1b36d1d8bced953", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eaf69494a5a126189b052102e1b36d1d8bced953", "html_url": "https://github.com/rust-lang/rust/commit/eaf69494a5a126189b052102e1b36d1d8bced953", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eaf69494a5a126189b052102e1b36d1d8bced953/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "298d0b870ff9201ee05c5517ade88da84a61cdf1", "url": "https://api.github.com/repos/rust-lang/rust/commits/298d0b870ff9201ee05c5517ade88da84a61cdf1", "html_url": "https://github.com/rust-lang/rust/commit/298d0b870ff9201ee05c5517ade88da84a61cdf1"}], "stats": {"total": 23, "additions": 15, "deletions": 8}, "files": [{"sha": "6fb4155b59bc13034a2bb730c6e11ea6cfe2520b", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/eaf69494a5a126189b052102e1b36d1d8bced953/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf69494a5a126189b052102e1b36d1d8bced953/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=eaf69494a5a126189b052102e1b36d1d8bced953", "patch": "@@ -594,7 +594,7 @@ pub struct Liveness {\n     users: @mut ~[Users],\n     // The list of node IDs for the nested loop scopes\n     // we're in.\n-    loop_scope: @mut ~[NodeId],\n+    loop_scope: @RefCell<~[NodeId]>,\n     // mappings from loop node ID to LiveNode\n     // (\"break\" label should map to loop node ID,\n     // it probably doesn't now)\n@@ -612,7 +612,7 @@ fn Liveness(ir: @IrMaps, specials: Specials) -> Liveness {\n         users: @mut vec::from_elem(ir.num_live_nodes.get() *\n                                    ir.num_vars.get(),\n                                    invalid_users()),\n-        loop_scope: @mut ~[],\n+        loop_scope: @RefCell::new(~[]),\n         break_ln: @RefCell::new(HashMap::new()),\n         cont_ln: @RefCell::new(HashMap::new()),\n     }\n@@ -762,7 +762,8 @@ impl Liveness {\n             None => {\n                 // Vanilla 'break' or 'loop', so use the enclosing\n                 // loop scope\n-                if self.loop_scope.len() == 0 {\n+                let loop_scope = self.loop_scope.borrow();\n+                if loop_scope.get().len() == 0 {\n                     self.tcx.sess.span_bug(sp, \"break outside loop\");\n                 } else {\n                     // FIXME(#5275): this shouldn't have to be a method...\n@@ -773,8 +774,8 @@ impl Liveness {\n     }\n \n     pub fn last_loop_scope(&self) -> NodeId {\n-        let loop_scope = &mut *self.loop_scope;\n-        *loop_scope.last()\n+        let loop_scope = self.loop_scope.borrow();\n+        *loop_scope.get().last()\n     }\n \n     pub fn ln_str(&self, ln: LiveNode) -> ~str {\n@@ -1418,16 +1419,22 @@ impl Liveness {\n                            cont_ln: LiveNode,\n                            f: || -> R)\n                            -> R {\n-      debug!(\"with_loop_nodes: {} {}\", loop_node_id, *break_ln);\n-        self.loop_scope.push(loop_node_id);\n+        debug!(\"with_loop_nodes: {} {}\", loop_node_id, *break_ln);\n+        {\n+            let mut loop_scope = self.loop_scope.borrow_mut();\n+            loop_scope.get().push(loop_node_id);\n+        }\n         {\n             let mut this_break_ln = self.break_ln.borrow_mut();\n             let mut this_cont_ln = self.cont_ln.borrow_mut();\n             this_break_ln.get().insert(loop_node_id, break_ln);\n             this_cont_ln.get().insert(loop_node_id, cont_ln);\n         }\n         let r = f();\n-        self.loop_scope.pop();\n+        {\n+            let mut loop_scope = self.loop_scope.borrow_mut();\n+            loop_scope.get().pop();\n+        }\n         r\n     }\n }"}]}