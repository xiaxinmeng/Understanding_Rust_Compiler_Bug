{"sha": "13d4eb92b8894c54dd3f35c4bc362d3d51008b76", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzZDRlYjkyYjg4OTRjNTRkZDNmMzVjNGJjMzYyZDNkNTEwMDhiNzY=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-12-30T21:07:42Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-08-22T18:23:30Z"}, "message": "Do not compute the dep_node twice.", "tree": {"sha": "77718212bdf9a89b60ae89386d38651489c8c3a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77718212bdf9a89b60ae89386d38651489c8c3a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13d4eb92b8894c54dd3f35c4bc362d3d51008b76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13d4eb92b8894c54dd3f35c4bc362d3d51008b76", "html_url": "https://github.com/rust-lang/rust/commit/13d4eb92b8894c54dd3f35c4bc362d3d51008b76", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13d4eb92b8894c54dd3f35c4bc362d3d51008b76/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "283a8e14453c9f1532087caa1aa08743c8f4c58d", "url": "https://api.github.com/repos/rust-lang/rust/commits/283a8e14453c9f1532087caa1aa08743c8f4c58d", "html_url": "https://github.com/rust-lang/rust/commit/283a8e14453c9f1532087caa1aa08743c8f4c58d"}], "stats": {"total": 54, "additions": 21, "deletions": 33}, "files": [{"sha": "aabe9973111d465212bcdfa9930b466e33eea59f", "filename": "compiler/rustc_query_system/src/query/plumbing.rs", "status": "modified", "additions": 21, "deletions": 33, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/13d4eb92b8894c54dd3f35c4bc362d3d51008b76/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13d4eb92b8894c54dd3f35c4bc362d3d51008b76/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs?ref=13d4eb92b8894c54dd3f35c4bc362d3d51008b76", "patch": "@@ -685,30 +685,6 @@ where\n     (result, dep_node_index)\n }\n \n-#[inline(never)]\n-fn get_query_impl<CTX, C>(\n-    tcx: CTX,\n-    state: &QueryState<CTX::DepKind, C::Key>,\n-    cache: &QueryCacheStore<C>,\n-    span: Span,\n-    key: C::Key,\n-    lookup: QueryLookup,\n-    query: &QueryVtable<CTX, C::Key, C::Value>,\n-    compute: fn(CTX::DepContext, C::Key) -> C::Value,\n-) -> C::Stored\n-where\n-    CTX: QueryContext,\n-    C: QueryCache,\n-    C::Key: DepNodeParams<CTX::DepContext>,\n-{\n-    let (result, dep_node_index) =\n-        try_execute_query(tcx, state, cache, span, key, lookup, None, query, compute);\n-    if let Some(dep_node_index) = dep_node_index {\n-        tcx.dep_context().dep_graph().read_index(dep_node_index)\n-    }\n-    result\n-}\n-\n /// Ensure that either this query has all green inputs or been executed.\n /// Executing `query::ensure(D)` is considered a read of the dep-node `D`.\n /// Returns true if the query should still run.\n@@ -718,13 +694,17 @@ where\n ///\n /// Note: The optimization is only available during incr. comp.\n #[inline(never)]\n-fn ensure_must_run<CTX, K, V>(tcx: CTX, key: &K, query: &QueryVtable<CTX, K, V>) -> bool\n+fn ensure_must_run<CTX, K, V>(\n+    tcx: CTX,\n+    key: &K,\n+    query: &QueryVtable<CTX, K, V>,\n+) -> (bool, Option<DepNode<CTX::DepKind>>)\n where\n     K: crate::dep_graph::DepNodeParams<CTX::DepContext>,\n     CTX: QueryContext,\n {\n     if query.eval_always {\n-        return true;\n+        return (true, None);\n     }\n \n     // Ensuring an anonymous query makes no sense\n@@ -741,12 +721,12 @@ where\n             // DepNodeIndex. We must invoke the query itself. The performance cost\n             // this introduces should be negligible as we'll immediately hit the\n             // in-memory cache, or another query down the line will.\n-            true\n+            (true, Some(dep_node))\n         }\n         Some((_, dep_node_index)) => {\n             dep_graph.read_index(dep_node_index);\n             tcx.dep_context().profiler().query_cache_hit(dep_node_index.into());\n-            false\n+            (false, None)\n         }\n     }\n }\n@@ -808,25 +788,33 @@ where\n     CTX: QueryContext,\n {\n     let query = &Q::VTABLE;\n-    if let QueryMode::Ensure = mode {\n-        if !ensure_must_run(tcx, &key, query) {\n+    let dep_node = if let QueryMode::Ensure = mode {\n+        let (must_run, dep_node) = ensure_must_run(tcx, &key, query);\n+        if !must_run {\n             return None;\n         }\n-    }\n+        dep_node\n+    } else {\n+        None\n+    };\n \n     debug!(\"ty::query::get_query<{}>(key={:?}, span={:?})\", Q::NAME, key, span);\n     let compute = Q::compute_fn(tcx, &key);\n-    let value = get_query_impl(\n+    let (result, dep_node_index) = try_execute_query(\n         tcx,\n         Q::query_state(tcx),\n         Q::query_cache(tcx),\n         span,\n         key,\n         lookup,\n+        dep_node,\n         query,\n         compute,\n     );\n-    Some(value)\n+    if let Some(dep_node_index) = dep_node_index {\n+        tcx.dep_context().dep_graph().read_index(dep_node_index)\n+    }\n+    Some(result)\n }\n \n pub fn force_query<Q, CTX>(tcx: CTX, dep_node: &DepNode<CTX::DepKind>) -> bool"}]}