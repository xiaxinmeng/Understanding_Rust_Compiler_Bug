{"sha": "e4a634189e3ef7461a40e357633bdbc98cedf5ad", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0YTYzNDE4OWUzZWY3NDYxYTQwZTM1NzYzM2JkYmM5OGNlZGY1YWQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-11-21T14:29:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-21T14:29:02Z"}, "message": "Rollup merge of #65730 - csmoe:return-lifetime, r=nikomatsakis\n\nSuggest to add lifetime constraint at explicit ouput of functions\n\nCloses #62097", "tree": {"sha": "3916d5aff87711cd1566c067d259190dbe70b1cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3916d5aff87711cd1566c067d259190dbe70b1cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e4a634189e3ef7461a40e357633bdbc98cedf5ad", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd1p8uCRBK7hj4Ov3rIwAAdHIIAJX7AwOXhlksVUpLs9Og8DP4\neypNgJpQjw7YEooGwy8TWSS3VeWbENZOLTa9Nz/rEYcRU+3pAkQSufJIABS/JCYL\nhFjGotq616vtgYNjnH6FQYdp0nPt1eQNsBF7phe32Tt2HGcGiAgzDcgHeIyyNElD\npgSoisvnow9ibfpgcxB2m4UtaZbwm1IHHDRC5ySoNytzYQziQhQl3sxSaJqQc0/L\nMQfkh3gSip+Vxrwc2Kr8ZhsZtPJOTqxu6RJ3gCayOQN6mpMTMHPSz1u1alHtXrrO\n231B7ONW4W8m1C8f/Tw3hgt+uDQWNUNITCKrOCWsnxppQcMDW+HvIKras4YX1gQ=\n=a8W1\n-----END PGP SIGNATURE-----\n", "payload": "tree 3916d5aff87711cd1566c067d259190dbe70b1cb\nparent 0828d5327b9950ef4b1fedd058bbc8eaed00f8be\nparent 9124f7a096007b5f96300e61e8f5817df10b315a\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1574346542 +0100\ncommitter GitHub <noreply@github.com> 1574346542 +0100\n\nRollup merge of #65730 - csmoe:return-lifetime, r=nikomatsakis\n\nSuggest to add lifetime constraint at explicit ouput of functions\n\nCloses #62097\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e4a634189e3ef7461a40e357633bdbc98cedf5ad", "html_url": "https://github.com/rust-lang/rust/commit/e4a634189e3ef7461a40e357633bdbc98cedf5ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e4a634189e3ef7461a40e357633bdbc98cedf5ad/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0828d5327b9950ef4b1fedd058bbc8eaed00f8be", "url": "https://api.github.com/repos/rust-lang/rust/commits/0828d5327b9950ef4b1fedd058bbc8eaed00f8be", "html_url": "https://github.com/rust-lang/rust/commit/0828d5327b9950ef4b1fedd058bbc8eaed00f8be"}, {"sha": "9124f7a096007b5f96300e61e8f5817df10b315a", "url": "https://api.github.com/repos/rust-lang/rust/commits/9124f7a096007b5f96300e61e8f5817df10b315a", "html_url": "https://github.com/rust-lang/rust/commit/9124f7a096007b5f96300e61e8f5817df10b315a"}], "stats": {"total": 132, "additions": 103, "deletions": 29}, "files": [{"sha": "ac8173f101a6559ee3d8fa8773934cbed3d239c8", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e4a634189e3ef7461a40e357633bdbc98cedf5ad/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4a634189e3ef7461a40e357633bdbc98cedf5ad/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=e4a634189e3ef7461a40e357633bdbc98cedf5ad", "patch": "@@ -2170,6 +2170,16 @@ impl<'a> LoweringContext<'a> {\n         impl_trait_return_allow: bool,\n         make_ret_async: Option<NodeId>,\n     ) -> P<hir::FnDecl> {\n+        debug!(\"lower_fn_decl(\\\n+            fn_decl: {:?}, \\\n+            in_band_ty_params: {:?}, \\\n+            impl_trait_return_allow: {}, \\\n+            make_ret_async: {:?})\",\n+            decl,\n+            in_band_ty_params,\n+            impl_trait_return_allow,\n+            make_ret_async,\n+        );\n         let lt_mode = if make_ret_async.is_some() {\n             // In `async fn`, argument-position elided lifetimes\n             // must be transformed into fresh generic parameters so that\n@@ -2462,7 +2472,7 @@ impl<'a> LoweringContext<'a> {\n \n         hir::FunctionRetTy::Return(P(hir::Ty {\n             kind: opaque_ty_ref,\n-            span,\n+            span: opaque_ty_span,\n             hir_id: self.next_id(),\n         }))\n     }\n@@ -2572,7 +2582,7 @@ impl<'a> LoweringContext<'a> {\n         hir::Lifetime {\n             hir_id: self.lower_node_id(id),\n             span,\n-            name: name,\n+            name,\n         }\n     }\n "}, {"sha": "a431b541fa42fbd4d4353b72d29876397354cebe", "filename": "src/librustc/infer/error_reporting/nice_region_error/different_lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4a634189e3ef7461a40e357633bdbc98cedf5ad/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4a634189e3ef7461a40e357633bdbc98cedf5ad/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs?ref=e4a634189e3ef7461a40e357633bdbc98cedf5ad", "patch": "@@ -45,7 +45,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n     ///\n     /// It will later be extended to trait objects.\n     pub(super) fn try_report_anon_anon_conflict(&self) -> Option<ErrorReported> {\n-        let (span, sub, sup) = self.get_regions();\n+        let (span, sub, sup) = self.regions();\n \n         // Determine whether the sub and sup consist of both anonymous (elided) regions.\n         let anon_reg_sup = self.tcx().is_suitable_region(sup)?;"}, {"sha": "09cfbf850a57dfb76d219b38991c6d2765270311", "filename": "src/librustc/infer/error_reporting/nice_region_error/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4a634189e3ef7461a40e357633bdbc98cedf5ad/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4a634189e3ef7461a40e357633bdbc98cedf5ad/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs?ref=e4a634189e3ef7461a40e357633bdbc98cedf5ad", "patch": "@@ -77,7 +77,7 @@ impl<'cx, 'tcx> NiceRegionError<'cx, 'tcx> {\n             .or_else(|| self.try_report_impl_not_conforming_to_trait())\n     }\n \n-    pub fn get_regions(&self) -> (Span, ty::Region<'tcx>, ty::Region<'tcx>) {\n+    pub fn regions(&self) -> (Span, ty::Region<'tcx>, ty::Region<'tcx>) {\n         match (&self.error, self.regions) {\n             (Some(ConcreteFailure(origin, sub, sup)), None) => (origin.span(), sub, sup),\n             (Some(SubSupConflict(_, _, origin, sub, _, sup)), None) => (origin.span(), sub, sup),"}, {"sha": "0abdeb719934452c319006fa5d33cce59d48f4da", "filename": "src/librustc/infer/error_reporting/nice_region_error/named_anon_conflict.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4a634189e3ef7461a40e357633bdbc98cedf5ad/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4a634189e3ef7461a40e357633bdbc98cedf5ad/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs?ref=e4a634189e3ef7461a40e357633bdbc98cedf5ad", "patch": "@@ -11,7 +11,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n     /// When given a `ConcreteFailure` for a function with parameters containing a named region and\n     /// an anonymous region, emit an descriptive diagnostic error.\n     pub(super) fn try_report_named_anon_conflict(&self) -> Option<DiagnosticBuilder<'a>> {\n-        let (span, sub, sup) = self.get_regions();\n+        let (span, sub, sup) = self.regions();\n \n         debug!(\n             \"try_report_named_anon_conflict(sub={:?}, sup={:?}, error={:?})\","}, {"sha": "01ba748c4e1f9a3d6dd3ce43f01afd19ce69e897", "filename": "src/librustc/infer/error_reporting/nice_region_error/static_impl_trait.rs", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/e4a634189e3ef7461a40e357633bdbc98cedf5ad/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4a634189e3ef7461a40e357633bdbc98cedf5ad/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs?ref=e4a634189e3ef7461a40e357633bdbc98cedf5ad", "patch": "@@ -20,8 +20,9 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n                 ) = error.clone()\n             {\n                 let anon_reg_sup = self.tcx().is_suitable_region(sup_r)?;\n+                let return_ty = self.tcx().return_type_impl_trait(anon_reg_sup.def_id);\n                 if sub_r == &RegionKind::ReStatic &&\n-                    self.tcx().return_type_impl_trait(anon_reg_sup.def_id).is_some()\n+                    return_ty.is_some()\n                 {\n                     let sp = var_origin.span();\n                     let return_sp = sub_origin.span();\n@@ -52,17 +53,23 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n                         }) => name.to_string(),\n                         _ => \"'_\".to_owned(),\n                     };\n-                    if let Ok(snippet) = self.tcx().sess.source_map().span_to_snippet(return_sp) {\n-                        err.span_suggestion(\n-                            return_sp,\n-                            &format!(\n-                                \"you can add a constraint to the return type to make it last \\\n+                    let fn_return_span = return_ty.unwrap().1;\n+                    if let Ok(snippet) =\n+                        self.tcx().sess.source_map().span_to_snippet(fn_return_span) {\n+                        // only apply this suggestion onto functions with\n+                        // explicit non-desugar'able return.\n+                        if fn_return_span.desugaring_kind().is_none() {\n+                            err.span_suggestion(\n+                                fn_return_span,\n+                                &format!(\n+                                    \"you can add a constraint to the return type to make it last \\\n                                  less than `'static` and match {}\",\n-                                lifetime,\n-                            ),\n-                            format!(\"{} + {}\", snippet, lifetime_name),\n-                            Applicability::Unspecified,\n-                        );\n+                                 lifetime,\n+                                ),\n+                                format!(\"{} + {}\", snippet, lifetime_name),\n+                                Applicability::Unspecified,\n+                            );\n+                        }\n                     }\n                     err.emit();\n                     return Some(ErrorReported);"}, {"sha": "954565811694fcb29350f65c62d0e795de26848a", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e4a634189e3ef7461a40e357633bdbc98cedf5ad/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4a634189e3ef7461a40e357633bdbc98cedf5ad/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=e4a634189e3ef7461a40e357633bdbc98cedf5ad", "patch": "@@ -1529,14 +1529,14 @@ impl<'tcx> TyCtxt<'tcx> {\n         return Some(FreeRegionInfo {\n             def_id: suitable_region_binding_scope,\n             boundregion: bound_region,\n-            is_impl_item: is_impl_item,\n+            is_impl_item,\n         });\n     }\n \n     pub fn return_type_impl_trait(\n         &self,\n         scope_def_id: DefId,\n-    ) -> Option<Ty<'tcx>> {\n+    ) -> Option<(Ty<'tcx>, Span)> {\n         // HACK: `type_of_def_id()` will fail on these (#55796), so return `None`.\n         let hir_id = self.hir().as_local_hir_id(scope_def_id).unwrap();\n         match self.hir().get(hir_id) {\n@@ -1557,7 +1557,8 @@ impl<'tcx> TyCtxt<'tcx> {\n                 let sig = ret_ty.fn_sig(*self);\n                 let output = self.erase_late_bound_regions(&sig.output());\n                 if output.is_impl_trait() {\n-                    Some(output)\n+                    let fn_decl = self.hir().fn_decl_by_hir_id(hir_id).unwrap();\n+                    Some((output, fn_decl.output.span()))\n                 } else {\n                     None\n                 }"}, {"sha": "e6795dbfd449ca5fda2df1bc86b943b5e2ca1332", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4a634189e3ef7461a40e357633bdbc98cedf5ad/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4a634189e3ef7461a40e357633bdbc98cedf5ad/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs?ref=e4a634189e3ef7461a40e357633bdbc98cedf5ad", "patch": "@@ -715,10 +715,10 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         if let (Some(f), Some(ty::RegionKind::ReStatic)) =\n             (self.to_error_region(fr), self.to_error_region(outlived_fr))\n         {\n-            if let Some(ty::TyS {\n+            if let Some((ty::TyS {\n                 kind: ty::Opaque(did, substs),\n                 ..\n-            }) = infcx\n+            }, _)) = infcx\n                 .tcx\n                 .is_suitable_region(f)\n                 .map(|r| r.def_id)"}, {"sha": "0c64f90cb9fae64d540934f60d741dd9c366b5e7", "filename": "src/test/ui/async-await/issues/issue-62097.nll.stderr", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/e4a634189e3ef7461a40e357633bdbc98cedf5ad/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4a634189e3ef7461a40e357633bdbc98cedf5ad/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.nll.stderr?ref=e4a634189e3ef7461a40e357633bdbc98cedf5ad", "patch": "@@ -0,0 +1,29 @@\n+error[E0373]: closure may outlive the current function, but it borrows `self`, which is owned by the current function\n+  --> $DIR/issue-62097.rs:13:13\n+   |\n+LL |         foo(|| self.bar()).await;\n+   |             ^^ ---- `self` is borrowed here\n+   |             |\n+   |             may outlive borrowed value `self`\n+   |\n+note: function requires argument type to outlive `'static`\n+  --> $DIR/issue-62097.rs:13:9\n+   |\n+LL |         foo(|| self.bar()).await;\n+   |         ^^^^^^^^^^^^^^^^^^\n+help: to force the closure to take ownership of `self` (and any other referenced variables), use the `move` keyword\n+   |\n+LL |         foo(move || self.bar()).await;\n+   |             ^^^^^^^\n+\n+error[E0521]: borrowed data escapes outside of function\n+  --> $DIR/issue-62097.rs:13:9\n+   |\n+LL |     pub async fn run_dummy_fn(&self) {\n+   |                               ----- `self` is a reference that is only valid in the function body\n+LL |         foo(|| self.bar()).await;\n+   |         ^^^^^^^^^^^^^^^^^^ `self` escapes the function body here\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0373`."}, {"sha": "ea482d3667e2b575bc5c8fb9ef9b8d76db8c296a", "filename": "src/test/ui/async-await/issues/issue-62097.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e4a634189e3ef7461a40e357633bdbc98cedf5ad/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4a634189e3ef7461a40e357633bdbc98cedf5ad/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.rs?ref=e4a634189e3ef7461a40e357633bdbc98cedf5ad", "patch": "@@ -0,0 +1,19 @@\n+// edition:2018\n+async fn foo<F>(fun: F)\n+where\n+    F: FnOnce() + 'static\n+{\n+    fun()\n+}\n+\n+struct Struct;\n+\n+impl Struct {\n+    pub async fn run_dummy_fn(&self) { //~ ERROR cannot infer\n+        foo(|| self.bar()).await;\n+    }\n+\n+    pub fn bar(&self) {}\n+}\n+\n+fn main() {}"}, {"sha": "94afccc06a9e7c1dd1d578d4f05233faefe29a06", "filename": "src/test/ui/async-await/issues/issue-62097.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e4a634189e3ef7461a40e357633bdbc98cedf5ad/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4a634189e3ef7461a40e357633bdbc98cedf5ad/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.stderr?ref=e4a634189e3ef7461a40e357633bdbc98cedf5ad", "patch": "@@ -0,0 +1,16 @@\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/issue-62097.rs:12:31\n+   |\n+LL |     pub async fn run_dummy_fn(&self) {\n+   |                               ^^^^^ ...but this borrow...\n+LL |         foo(|| self.bar()).await;\n+   |         --- this return type evaluates to the `'static` lifetime...\n+   |\n+note: ...can't outlive the lifetime `'_` as defined on the method body at 12:31\n+  --> $DIR/issue-62097.rs:12:31\n+   |\n+LL |     pub async fn run_dummy_fn(&self) {\n+   |                               ^\n+\n+error: aborting due to previous error\n+"}, {"sha": "7e45d588c6c6c31c72d7d10ea1f36d1b8fce2742", "filename": "src/test/ui/async-await/issues/issue-63388-2.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4a634189e3ef7461a40e357633bdbc98cedf5ad/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4a634189e3ef7461a40e357633bdbc98cedf5ad/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-2.stderr?ref=e4a634189e3ef7461a40e357633bdbc98cedf5ad", "patch": "@@ -20,10 +20,6 @@ note: ...can't outlive the lifetime `'_` as defined on the method body at 11:14\n    |\n LL |         foo: &dyn Foo, bar: &'a dyn Foo\n    |              ^\n-help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime `'_` as defined on the method body at 11:14\n-   |\n-LL |         foo + '_\n-   |\n \n error: aborting due to 2 previous errors\n "}, {"sha": "91075ffbdb6059eecbdfcf83b21c9c4f65b7d510", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_impl_trait-async.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4a634189e3ef7461a40e357633bdbc98cedf5ad/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4a634189e3ef7461a40e357633bdbc98cedf5ad/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.stderr?ref=e4a634189e3ef7461a40e357633bdbc98cedf5ad", "patch": "@@ -11,10 +11,6 @@ note: ...can't outlive the lifetime `'_` as defined on the method body at 8:26\n    |\n LL |     async fn f(self: Pin<&Self>) -> impl Clone { self }\n    |                          ^\n-help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime `'_` as defined on the method body at 8:26\n-   |\n-LL |     async fn f(self: Pin<&Self>) -> impl Clone + '_ { self }\n-   |                                     ^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}]}