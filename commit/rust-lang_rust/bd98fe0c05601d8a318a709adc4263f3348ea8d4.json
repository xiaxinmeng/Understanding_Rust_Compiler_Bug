{"sha": "bd98fe0c05601d8a318a709adc4263f3348ea8d4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkOThmZTBjMDU2MDFkOGEzMThhNzA5YWRjNDI2M2YzMzQ4ZWE4ZDQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-02-06T19:28:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-02-06T19:28:54Z"}, "message": "Auto merge of #48040 - kennytm:rollup, r=kennytm\n\nRollup of 7 pull requests\n\n- Successful merges: #46962, #47986, #48012, #48013, #48026, #48031, #48036\n- Failed merges:", "tree": {"sha": "6f6f45f6da609c2c34e0cedb81f08a7f5bd5a8aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6f6f45f6da609c2c34e0cedb81f08a7f5bd5a8aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd98fe0c05601d8a318a709adc4263f3348ea8d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd98fe0c05601d8a318a709adc4263f3348ea8d4", "html_url": "https://github.com/rust-lang/rust/commit/bd98fe0c05601d8a318a709adc4263f3348ea8d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd98fe0c05601d8a318a709adc4263f3348ea8d4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca7d839088cbfe5b9bf232f5c27c48703d4f1605", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca7d839088cbfe5b9bf232f5c27c48703d4f1605", "html_url": "https://github.com/rust-lang/rust/commit/ca7d839088cbfe5b9bf232f5c27c48703d4f1605"}, {"sha": "7f0e87a781b449f463b4238d5d08c59056127e3d", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f0e87a781b449f463b4238d5d08c59056127e3d", "html_url": "https://github.com/rust-lang/rust/commit/7f0e87a781b449f463b4238d5d08c59056127e3d"}], "stats": {"total": 253, "additions": 235, "deletions": 18}, "files": [{"sha": "c2ec731eeb8a20b5bc61e605096da19e05865995", "filename": "config.toml.example", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bd98fe0c05601d8a318a709adc4263f3348ea8d4/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/bd98fe0c05601d8a318a709adc4263f3348ea8d4/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=bd98fe0c05601d8a318a709adc4263f3348ea8d4", "patch": "@@ -295,7 +295,7 @@\n \n # Flag indicating whether git info will be retrieved from .git automatically.\n # Having the git information can cause a lot of rebuilds during development.\n-# Note: If this attribute is not explicity set (e.g. if left commented out) it\n+# Note: If this attribute is not explicitly set (e.g. if left commented out) it\n # will default to true if channel = \"dev\", but will default to false otherwise.\n #ignore-git = true\n \n@@ -317,8 +317,8 @@\n # bootstrap)\n #codegen-backends = [\"llvm\"]\n \n-# Flag indicating whether `libstd` calls an imported function to hande basic IO\n-# when targetting WebAssembly. Enable this to debug tests for the `wasm32-unknown-unknown`\n+# Flag indicating whether `libstd` calls an imported function to handle basic IO\n+# when targeting WebAssembly. Enable this to debug tests for the `wasm32-unknown-unknown`\n # target, as without this option the test output will not be captured.\n #wasm-syscall = false\n \n@@ -349,7 +349,7 @@\n #linker = \"cc\"\n \n # Path to the `llvm-config` binary of the installation of a custom LLVM to link\n-# against. Note that if this is specifed we don't compile LLVM at all for this\n+# against. Note that if this is specified we don't compile LLVM at all for this\n # target.\n #llvm-config = \"../path/to/llvm/root/bin/llvm-config\"\n "}, {"sha": "52ed134c01ecda147203abd9c8fd9e2493641113", "filename": "src/Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bd98fe0c05601d8a318a709adc4263f3348ea8d4/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/bd98fe0c05601d8a318a709adc4263f3348ea8d4/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=bd98fe0c05601d8a318a709adc4263f3348ea8d4", "patch": "@@ -133,6 +133,7 @@ dependencies = [\n  \"serde 1.0.27 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_derive 1.0.27 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"time 0.1.39 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"toml 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n "}, {"sha": "2d478341317848250c1b2a98571a9d67329480a7", "filename": "src/bootstrap/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bd98fe0c05601d8a318a709adc4263f3348ea8d4/src%2Fbootstrap%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/bd98fe0c05601d8a318a709adc4263f3348ea8d4/src%2Fbootstrap%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FCargo.toml?ref=bd98fe0c05601d8a318a709adc4263f3348ea8d4", "patch": "@@ -41,3 +41,4 @@ serde_derive = \"1.0.8\"\n serde_json = \"1.0.2\"\n toml = \"0.4\"\n lazy_static = \"0.2\"\n+time = \"0.1\""}, {"sha": "6717b1cb0988389aea57ef0d4cefa6350f479611", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bd98fe0c05601d8a318a709adc4263f3348ea8d4/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd98fe0c05601d8a318a709adc4263f3348ea8d4/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=bd98fe0c05601d8a318a709adc4263f3348ea8d4", "patch": "@@ -33,6 +33,7 @@ use builder::{Builder, RunConfig, ShouldRun, Step};\n use compile;\n use tool::{self, Tool};\n use cache::{INTERNER, Interned};\n+use time;\n \n pub fn pkgname(build: &Build, component: &str) -> String {\n     if component == \"cargo\" {\n@@ -445,8 +446,7 @@ impl Step for Rustc {\n             t!(fs::create_dir_all(image.join(\"share/man/man1\")));\n             let man_src = build.src.join(\"src/doc/man\");\n             let man_dst = image.join(\"share/man/man1\");\n-            let date_output = output(Command::new(\"date\").arg(\"+%B %Y\"));\n-            let month_year = date_output.trim();\n+            let month_year = t!(time::strftime(\"%B %Y\", &time::now()));\n             // don't use our `bootstrap::util::{copy, cp_r}`, because those try\n             // to hardlink, and we don't want to edit the source templates\n             for entry_result in t!(fs::read_dir(man_src)) {\n@@ -456,7 +456,7 @@ impl Step for Rustc {\n                 t!(fs::copy(&page_src, &page_dst));\n                 // template in month/year and version number\n                 replace_in_file(&page_dst,\n-                                &[(\"<INSERT DATE HERE>\", month_year),\n+                                &[(\"<INSERT DATE HERE>\", &month_year),\n                                   (\"<INSERT VERSION HERE>\", channel::CFG_RELEASE_NUM)]);\n             }\n "}, {"sha": "a84a6a8990bbd992007680df29acd344cb8775b3", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bd98fe0c05601d8a318a709adc4263f3348ea8d4/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd98fe0c05601d8a318a709adc4263f3348ea8d4/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=bd98fe0c05601d8a318a709adc4263f3348ea8d4", "patch": "@@ -130,6 +130,7 @@ extern crate cc;\n extern crate getopts;\n extern crate num_cpus;\n extern crate toml;\n+extern crate time;\n \n #[cfg(unix)]\n extern crate libc;"}, {"sha": "3b034efcce14ccbcc972b01090d564a32a630517", "filename": "src/libcore/iter/range.rs", "status": "modified", "additions": 45, "deletions": 1, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/bd98fe0c05601d8a318a709adc4263f3348ea8d4/src%2Flibcore%2Fiter%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd98fe0c05601d8a318a709adc4263f3348ea8d4/src%2Flibcore%2Fiter%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Frange.rs?ref=bd98fe0c05601d8a318a709adc4263f3348ea8d4", "patch": "@@ -10,7 +10,7 @@\n \n use convert::TryFrom;\n use mem;\n-use ops::{self, Add, Sub};\n+use ops::{self, Add, Sub, Try};\n use usize;\n \n use super::{FusedIterator, TrustedLen};\n@@ -397,6 +397,28 @@ impl<A: Step> Iterator for ops::RangeInclusive<A> {\n     fn max(mut self) -> Option<A> {\n         self.next_back()\n     }\n+\n+    #[inline]\n+    fn try_fold<B, F, R>(&mut self, init: B, mut f: F) -> R where\n+        Self: Sized, F: FnMut(B, Self::Item) -> R, R: Try<Ok=B>\n+    {\n+        let mut accum = init;\n+        if self.start <= self.end {\n+            loop {\n+                let (x, done) =\n+                    if self.start < self.end {\n+                        let n = self.start.add_one();\n+                        (mem::replace(&mut self.start, n), false)\n+                    } else {\n+                        self.end.replace_zero();\n+                        (self.start.replace_one(), true)\n+                    };\n+                accum = f(accum, x)?;\n+                if done { break }\n+            }\n+        }\n+        Try::from_ok(accum)\n+    }\n }\n \n #[unstable(feature = \"inclusive_range\", reason = \"recently added, follows RFC\", issue = \"28237\")]\n@@ -418,6 +440,28 @@ impl<A: Step> DoubleEndedIterator for ops::RangeInclusive<A> {\n             _ => None,\n         }\n     }\n+\n+    #[inline]\n+    fn try_rfold<B, F, R>(&mut self, init: B, mut f: F) -> R where\n+        Self: Sized, F: FnMut(B, Self::Item) -> R, R: Try<Ok=B>\n+    {\n+        let mut accum = init;\n+        if self.start <= self.end {\n+            loop {\n+                let (x, done) =\n+                    if self.start < self.end {\n+                        let n = self.end.sub_one();\n+                        (mem::replace(&mut self.end, n), false)\n+                    } else {\n+                        self.start.replace_one();\n+                        (self.end.replace_zero(), true)\n+                    };\n+                accum = f(accum, x)?;\n+                if done { break }\n+            }\n+        }\n+        Try::from_ok(accum)\n+    }\n }\n \n #[unstable(feature = \"fused\", issue = \"35602\")]"}, {"sha": "dc866d180bfa0c122db5b96789a010895a47cc18", "filename": "src/libcore/tests/iter.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/bd98fe0c05601d8a318a709adc4263f3348ea8d4/src%2Flibcore%2Ftests%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd98fe0c05601d8a318a709adc4263f3348ea8d4/src%2Flibcore%2Ftests%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fiter.rs?ref=bd98fe0c05601d8a318a709adc4263f3348ea8d4", "patch": "@@ -1459,6 +1459,26 @@ fn test_range_inclusive_min() {\n     assert_eq!(r.min(), None);\n }\n \n+#[test]\n+fn test_range_inclusive_folds() {\n+    assert_eq!((1..=10).sum::<i32>(), 55);\n+    assert_eq!((1..=10).rev().sum::<i32>(), 55);\n+\n+    let mut it = 40..=50;\n+    assert_eq!(it.try_fold(0, i8::checked_add), None);\n+    assert_eq!(it, 44..=50);\n+    assert_eq!(it.try_rfold(0, i8::checked_add), None);\n+    assert_eq!(it, 44..=47);\n+\n+    let mut it = 10..=20;\n+    assert_eq!(it.try_fold(0, |a,b| Some(a+b)), Some(165));\n+    assert_eq!(it, 1..=0);\n+\n+    let mut it = 10..=20;\n+    assert_eq!(it.try_rfold(0, |a,b| Some(a+b)), Some(165));\n+    assert_eq!(it, 1..=0);\n+}\n+\n #[test]\n fn test_repeat() {\n     let mut it = repeat(42);"}, {"sha": "6768e0ade43049387510f6dd65716b06917afa95", "filename": "src/libproc_macro/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd98fe0c05601d8a318a709adc4263f3348ea8d4/src%2Flibproc_macro%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd98fe0c05601d8a318a709adc4263f3348ea8d4/src%2Flibproc_macro%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Flib.rs?ref=bd98fe0c05601d8a318a709adc4263f3348ea8d4", "patch": "@@ -685,7 +685,7 @@ impl TokenTree {\n                 })\n             }\n \n-            DotEq => unreachable!(),\n+            DotEq => joint!('.', Eq),\n             OpenDelim(..) | CloseDelim(..) => unreachable!(),\n             Whitespace | Comment | Shebang(..) | Eof => unreachable!(),\n         };"}, {"sha": "4c256556191fa58f3577ef2903b976f27b291d75", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/bd98fe0c05601d8a318a709adc4263f3348ea8d4/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd98fe0c05601d8a318a709adc4263f3348ea8d4/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=bd98fe0c05601d8a318a709adc4263f3348ea8d4", "patch": "@@ -256,6 +256,28 @@ trait Foo {\n }\n ```\n \n+### The trait cannot contain associated constants\n+\n+Just like static functions, associated constants aren't stored on the method\n+table. If the trait or any subtrait contain an associated constant, they cannot\n+be made into an object.\n+\n+```compile_fail,E0038\n+trait Foo {\n+    const X: i32;\n+}\n+\n+impl Foo {}\n+```\n+\n+A simple workaround is to use a helper method instead:\n+\n+```\n+trait Foo {\n+    fn x(&self) -> i32;\n+}\n+```\n+\n ### The trait cannot use `Self` as a type parameter in the supertrait listing\n \n This is similar to the second sub-error, but subtler. It happens in situations"}, {"sha": "642fa8775a479d8a74f522a923beb734c85787e7", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bd98fe0c05601d8a318a709adc4263f3348ea8d4/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd98fe0c05601d8a318a709adc4263f3348ea8d4/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=bd98fe0c05601d8a318a709adc4263f3348ea8d4", "patch": "@@ -260,6 +260,7 @@\n #![feature(core_intrinsics)]\n #![feature(dropck_eyepatch)]\n #![feature(exact_size_is_empty)]\n+#![feature(external_doc)]\n #![feature(fs_read_write)]\n #![feature(fixed_size_array)]\n #![feature(float_from_str_radix)]"}, {"sha": "9a55767d965a658108062d721b39718978d4c5f3", "filename": "src/libstd/os/raw/char.md", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/bd98fe0c05601d8a318a709adc4263f3348ea8d4/src%2Flibstd%2Fos%2Fraw%2Fchar.md", "raw_url": "https://github.com/rust-lang/rust/raw/bd98fe0c05601d8a318a709adc4263f3348ea8d4/src%2Flibstd%2Fos%2Fraw%2Fchar.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fraw%2Fchar.md?ref=bd98fe0c05601d8a318a709adc4263f3348ea8d4", "patch": "@@ -0,0 +1,11 @@\n+Equivalent to C's `char` type.\n+\n+[C's `char` type] is completely unlike [Rust's `char` type]; while Rust's type represents a unicode scalar value, C's `char` type is just an ordinary integer. This type will always be either [`i8`] or [`u8`], as the type is defined as being one byte long.\n+\n+C chars are most commonly used to make C strings. Unlike Rust, where the length of a string is included alongside the string, C strings mark the end of a string with the character `'\\0'`. See [`CStr`] for more information.\n+\n+[C's `char` type]: https://en.wikipedia.org/wiki/C_data_types#Basic_types\n+[Rust's `char` type]: ../../primitive.char.html\n+[`CStr`]: ../../ffi/struct.CStr.html\n+[`i8`]: ../../primitive.i8.html\n+[`u8`]: ../../primitive.u8.html"}, {"sha": "6818dada317938d121b63059341104f46ccd372d", "filename": "src/libstd/os/raw/double.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bd98fe0c05601d8a318a709adc4263f3348ea8d4/src%2Flibstd%2Fos%2Fraw%2Fdouble.md", "raw_url": "https://github.com/rust-lang/rust/raw/bd98fe0c05601d8a318a709adc4263f3348ea8d4/src%2Flibstd%2Fos%2Fraw%2Fdouble.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fraw%2Fdouble.md?ref=bd98fe0c05601d8a318a709adc4263f3348ea8d4", "patch": "@@ -0,0 +1,7 @@\n+Equivalent to C's `double` type.\n+\n+This type will almost always be [`f64`], which is guaranteed to be an [IEEE-754 double-precision float] in Rust. That said, the standard technically only guarantees that it be a floating-point number with at least the precision of a [`float`], and it may be `f32` or something entirely different from the IEEE-754 standard.\n+\n+[IEEE-754 double-precision float]: https://en.wikipedia.org/wiki/IEEE_754\n+[`float`]: type.c_float.html\n+[`f64`]: ../../primitive.f64.html"}, {"sha": "57d1071d0da1787522b57a635df16ffa35fbe139", "filename": "src/libstd/os/raw/float.md", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bd98fe0c05601d8a318a709adc4263f3348ea8d4/src%2Flibstd%2Fos%2Fraw%2Ffloat.md", "raw_url": "https://github.com/rust-lang/rust/raw/bd98fe0c05601d8a318a709adc4263f3348ea8d4/src%2Flibstd%2Fos%2Fraw%2Ffloat.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fraw%2Ffloat.md?ref=bd98fe0c05601d8a318a709adc4263f3348ea8d4", "patch": "@@ -0,0 +1,6 @@\n+Equivalent to C's `float` type.\n+\n+This type will almost always be [`f32`], which is guaranteed to be an [IEEE-754 single-precision float] in Rust. That said, the standard technically only guarantees that it be a floating-point number, and it may have less precision than `f32` or not follow the IEEE-754 standard at all.\n+\n+[IEEE-754 single-precision float]: https://en.wikipedia.org/wiki/IEEE_754\n+[`f32`]: ../../primitive.f32.html"}, {"sha": "a0d25fd21d89f490347f7366ec53b330969534ab", "filename": "src/libstd/os/raw/int.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bd98fe0c05601d8a318a709adc4263f3348ea8d4/src%2Flibstd%2Fos%2Fraw%2Fint.md", "raw_url": "https://github.com/rust-lang/rust/raw/bd98fe0c05601d8a318a709adc4263f3348ea8d4/src%2Flibstd%2Fos%2Fraw%2Fint.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fraw%2Fint.md?ref=bd98fe0c05601d8a318a709adc4263f3348ea8d4", "patch": "@@ -0,0 +1,7 @@\n+Equivalent to C's `signed int` (`int`) type.\n+\n+This type will almost always be [`i32`], but may differ on some esoteric systems. The C standard technically only requires that this type be a signed integer that is at least the size of a [`short`]; some systems define it as an [`i16`], for example.\n+\n+[`short`]: type.c_short.html\n+[`i32`]: ../../primitive.i32.html\n+[`i16`]: ../../primitive.i16.html"}, {"sha": "c620b402819fddfe2cf31863bebb3bdf28ceff1d", "filename": "src/libstd/os/raw/long.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bd98fe0c05601d8a318a709adc4263f3348ea8d4/src%2Flibstd%2Fos%2Fraw%2Flong.md", "raw_url": "https://github.com/rust-lang/rust/raw/bd98fe0c05601d8a318a709adc4263f3348ea8d4/src%2Flibstd%2Fos%2Fraw%2Flong.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fraw%2Flong.md?ref=bd98fe0c05601d8a318a709adc4263f3348ea8d4", "patch": "@@ -0,0 +1,7 @@\n+Equivalent to C's `signed long` (`long`) type.\n+\n+This type will always be [`i32`] or [`i64`]. Most notably, many Linux-based systems assume an `i64`, but Windows assumes `i32`. The C standard technically only requires that this type be a signed integer that is at least 32 bits and at least the size of an [`int`], although in practice, no system would have a `long` that is neither an `i32` nor `i64`.\n+\n+[`int`]: type.c_int.html\n+[`i32`]: ../../primitive.i32.html\n+[`i64`]: ../../primitive.i64.html"}, {"sha": "ab3d6436568dfc20484d1ea935b1e2fbee2519e9", "filename": "src/libstd/os/raw/longlong.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bd98fe0c05601d8a318a709adc4263f3348ea8d4/src%2Flibstd%2Fos%2Fraw%2Flonglong.md", "raw_url": "https://github.com/rust-lang/rust/raw/bd98fe0c05601d8a318a709adc4263f3348ea8d4/src%2Flibstd%2Fos%2Fraw%2Flonglong.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fraw%2Flonglong.md?ref=bd98fe0c05601d8a318a709adc4263f3348ea8d4", "patch": "@@ -0,0 +1,7 @@\n+Equivalent to C's `signed long long` (`long long`) type.\n+\n+This type will almost always be [`i64`], but may differ on some systems. The C standard technically only requires that this type be a signed integer that is at least 64 bits and at least the size of a [`long`], although in practice, no system would have a `long long` that is not an `i64`, as most systems do not have a standardised [`i128`] type.\n+\n+[`long`]: type.c_int.html\n+[`i64`]: ../../primitive.i64.html\n+[`i128`]: ../../primitive.i128.html"}, {"sha": "d5eeb5252f0f155a59589fd4c099075d14fda114", "filename": "src/libstd/os/raw/mod.rs", "status": "renamed", "additions": 33, "deletions": 5, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/bd98fe0c05601d8a318a709adc4263f3348ea8d4/src%2Flibstd%2Fos%2Fraw%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd98fe0c05601d8a318a709adc4263f3348ea8d4/src%2Flibstd%2Fos%2Fraw%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fraw%2Fmod.rs?ref=bd98fe0c05601d8a318a709adc4263f3348ea8d4", "patch": "@@ -8,12 +8,19 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Raw OS-specific types for the current platform/architecture\n+//! Platform-specific types, as defined by C.\n+//!\n+//! Code that interacts via FFI will almost certainly be using the\n+//! base types provided by C, which aren't nearly as nicely defined\n+//! as Rust's primitive types. This module provides types which will\n+//! match those defined by C, so that code that interacts with C will\n+//! refer to the correct types.\n \n #![stable(feature = \"raw_os\", since = \"1.1.0\")]\n \n use fmt;\n \n+#[doc(include = \"os/raw/char.md\")]\n #[cfg(any(all(target_os = \"linux\", any(target_arch = \"aarch64\",\n                                        target_arch = \"arm\",\n                                        target_arch = \"powerpc\",\n@@ -25,6 +32,7 @@ use fmt;\n           all(target_os = \"openbsd\", target_arch = \"aarch64\"),\n           all(target_os = \"fuchsia\", target_arch = \"aarch64\")))]\n #[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_char = u8;\n+#[doc(include = \"os/raw/char.md\")]\n #[cfg(not(any(all(target_os = \"linux\", any(target_arch = \"aarch64\",\n                                            target_arch = \"arm\",\n                                            target_arch = \"powerpc\",\n@@ -36,30 +44,50 @@ use fmt;\n               all(target_os = \"openbsd\", target_arch = \"aarch64\"),\n               all(target_os = \"fuchsia\", target_arch = \"aarch64\"))))]\n #[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_char = i8;\n+#[doc(include = \"os/raw/schar.md\")]\n #[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_schar = i8;\n+#[doc(include = \"os/raw/uchar.md\")]\n #[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_uchar = u8;\n+#[doc(include = \"os/raw/short.md\")]\n #[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_short = i16;\n+#[doc(include = \"os/raw/ushort.md\")]\n #[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_ushort = u16;\n+#[doc(include = \"os/raw/int.md\")]\n #[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_int = i32;\n+#[doc(include = \"os/raw/uint.md\")]\n #[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_uint = u32;\n+#[doc(include = \"os/raw/long.md\")]\n #[cfg(any(target_pointer_width = \"32\", windows))]\n #[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_long = i32;\n+#[doc(include = \"os/raw/ulong.md\")]\n #[cfg(any(target_pointer_width = \"32\", windows))]\n #[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_ulong = u32;\n+#[doc(include = \"os/raw/long.md\")]\n #[cfg(all(target_pointer_width = \"64\", not(windows)))]\n #[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_long = i64;\n+#[doc(include = \"os/raw/ulong.md\")]\n #[cfg(all(target_pointer_width = \"64\", not(windows)))]\n #[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_ulong = u64;\n+#[doc(include = \"os/raw/longlong.md\")]\n #[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_longlong = i64;\n+#[doc(include = \"os/raw/ulonglong.md\")]\n #[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_ulonglong = u64;\n+#[doc(include = \"os/raw/float.md\")]\n #[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_float = f32;\n+#[doc(include = \"os/raw/double.md\")]\n #[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_double = f64;\n \n-/// Type used to construct void pointers for use with C.\n+/// Equivalent to C's `void` type when used as a [pointer].\n ///\n-/// This type is only useful as a pointer target. Do not use it as a\n-/// return type for FFI functions which have the `void` return type in\n-/// C. Use the unit type `()` or omit the return type instead.\n+/// In essence, `*const c_void` is equivalent to C's `const void*`\n+/// and `*mut c_void` is equivalent to C's `void*`. That said, this is\n+/// *not* the same as C's `void` return type, which is Rust's `()` type.\n+///\n+/// Ideally, this type would be equivalent to [`!`], but currently it may\n+/// be more ideal to use `c_void` for FFI purposes.\n+///\n+/// [`!`]: ../../primitive.never.html\n+/// [pointer]: ../../primitive.pointer.html\n // NB: For LLVM to recognize the void pointer type and by extension\n //     functions like malloc(), we need to have it represented as i8* in\n //     LLVM bitcode. The enum used here ensures this and prevents misuse", "previous_filename": "src/libstd/os/raw.rs"}, {"sha": "6aa8b1211d808d82b003cec6194fb8675ab58de6", "filename": "src/libstd/os/raw/schar.md", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bd98fe0c05601d8a318a709adc4263f3348ea8d4/src%2Flibstd%2Fos%2Fraw%2Fschar.md", "raw_url": "https://github.com/rust-lang/rust/raw/bd98fe0c05601d8a318a709adc4263f3348ea8d4/src%2Flibstd%2Fos%2Fraw%2Fschar.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fraw%2Fschar.md?ref=bd98fe0c05601d8a318a709adc4263f3348ea8d4", "patch": "@@ -0,0 +1,6 @@\n+Equivalent to C's `signed char` type.\n+\n+This type will always be [`i8`], but is included for completeness. It is defined as being a signed integer the same size as a C [`char`].\n+\n+[`char`]: type.c_char.html\n+[`i8`]: ../../primitive.i8.html"}, {"sha": "be92c6c106d598534a0f8bed771656a2f5aae5ce", "filename": "src/libstd/os/raw/short.md", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bd98fe0c05601d8a318a709adc4263f3348ea8d4/src%2Flibstd%2Fos%2Fraw%2Fshort.md", "raw_url": "https://github.com/rust-lang/rust/raw/bd98fe0c05601d8a318a709adc4263f3348ea8d4/src%2Flibstd%2Fos%2Fraw%2Fshort.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fraw%2Fshort.md?ref=bd98fe0c05601d8a318a709adc4263f3348ea8d4", "patch": "@@ -0,0 +1,6 @@\n+Equivalent to C's `signed short` (`short`) type.\n+\n+This type will almost always be [`i16`], but may differ on some esoteric systems. The C standard technically only requires that this type be a signed integer with at least 16 bits; some systems may define it as `i32`, for example.\n+\n+[`char`]: type.c_char.html\n+[`i16`]: ../../primitive.i16.html"}, {"sha": "b6ca711f869347a2b1ab44f8542c946eaf72db63", "filename": "src/libstd/os/raw/uchar.md", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bd98fe0c05601d8a318a709adc4263f3348ea8d4/src%2Flibstd%2Fos%2Fraw%2Fuchar.md", "raw_url": "https://github.com/rust-lang/rust/raw/bd98fe0c05601d8a318a709adc4263f3348ea8d4/src%2Flibstd%2Fos%2Fraw%2Fuchar.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fraw%2Fuchar.md?ref=bd98fe0c05601d8a318a709adc4263f3348ea8d4", "patch": "@@ -0,0 +1,6 @@\n+Equivalent to C's `unsigned char` type.\n+\n+This type will always be [`u8`], but is included for completeness. It is defined as being an unsigned integer the same size as a C [`char`].\n+\n+[`char`]: type.c_char.html\n+[`u8`]: ../../primitive.u8.html"}, {"sha": "6f7013a8ac18dfe20db854a2104d6960eb853c3c", "filename": "src/libstd/os/raw/uint.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bd98fe0c05601d8a318a709adc4263f3348ea8d4/src%2Flibstd%2Fos%2Fraw%2Fuint.md", "raw_url": "https://github.com/rust-lang/rust/raw/bd98fe0c05601d8a318a709adc4263f3348ea8d4/src%2Flibstd%2Fos%2Fraw%2Fuint.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fraw%2Fuint.md?ref=bd98fe0c05601d8a318a709adc4263f3348ea8d4", "patch": "@@ -0,0 +1,7 @@\n+Equivalent to C's `unsigned int` type.\n+\n+This type will almost always be [`u32`], but may differ on some esoteric systems. The C standard technically only requires that this type be an unsigned integer with the same size as an [`int`]; some systems define it as a [`u16`], for example.\n+\n+[`int`]: type.c_int.html\n+[`u32`]: ../../primitive.u32.html\n+[`u16`]: ../../primitive.u16.html"}, {"sha": "c350395080e80f429aa1ec71b42235ef9be87b64", "filename": "src/libstd/os/raw/ulong.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bd98fe0c05601d8a318a709adc4263f3348ea8d4/src%2Flibstd%2Fos%2Fraw%2Fulong.md", "raw_url": "https://github.com/rust-lang/rust/raw/bd98fe0c05601d8a318a709adc4263f3348ea8d4/src%2Flibstd%2Fos%2Fraw%2Fulong.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fraw%2Fulong.md?ref=bd98fe0c05601d8a318a709adc4263f3348ea8d4", "patch": "@@ -0,0 +1,7 @@\n+Equivalent to C's `unsigned long` type.\n+\n+This type will always be [`u32`] or [`u64`]. Most notably, many Linux-based systems assume an `u64`, but Windows assumes `u32`. The C standard technically only requires that this type be an unsigned integer with the size of a [`long`], although in practice, no system would have a `ulong` that is neither a `u32` nor `u64`.\n+\n+[`long`]: type.c_long.html\n+[`u32`]: ../../primitive.u32.html\n+[`u64`]: ../../primitive.u64.html"}, {"sha": "c41faf74c5c68243f1d84f220e021b3d231008e5", "filename": "src/libstd/os/raw/ulonglong.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bd98fe0c05601d8a318a709adc4263f3348ea8d4/src%2Flibstd%2Fos%2Fraw%2Fulonglong.md", "raw_url": "https://github.com/rust-lang/rust/raw/bd98fe0c05601d8a318a709adc4263f3348ea8d4/src%2Flibstd%2Fos%2Fraw%2Fulonglong.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fraw%2Fulonglong.md?ref=bd98fe0c05601d8a318a709adc4263f3348ea8d4", "patch": "@@ -0,0 +1,7 @@\n+Equivalent to C's `unsigned long long` type.\n+\n+This type will almost always be [`u64`], but may differ on some systems. The C standard technically only requires that this type be an unsigned integer with the size of a [`long long`], although in practice, no system would have a `long long` that is not a `u64`, as most systems do not have a standardised [`u128`] type.\n+\n+[`long long`]: type.c_longlong.html\n+[`u64`]: ../../primitive.u64.html\n+[`u128`]: ../../primitive.u128.html"}, {"sha": "d364abb3c8e0c501237e0b5363ee1482653c8992", "filename": "src/libstd/os/raw/ushort.md", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bd98fe0c05601d8a318a709adc4263f3348ea8d4/src%2Flibstd%2Fos%2Fraw%2Fushort.md", "raw_url": "https://github.com/rust-lang/rust/raw/bd98fe0c05601d8a318a709adc4263f3348ea8d4/src%2Flibstd%2Fos%2Fraw%2Fushort.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fraw%2Fushort.md?ref=bd98fe0c05601d8a318a709adc4263f3348ea8d4", "patch": "@@ -0,0 +1,6 @@\n+Equivalent to C's `unsigned short` type.\n+\n+This type will almost always be [`u16`], but may differ on some esoteric systems. The C standard technically only requires that this type be an unsigned integer with the same size as a [`short`].\n+\n+[`short`]: type.c_short.html\n+[`u16`]: ../../primitive.u16.html"}, {"sha": "9ea5f39b71feecca2ae04b27164c8c1bc2cbb6b3", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/bd98fe0c05601d8a318a709adc4263f3348ea8d4/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd98fe0c05601d8a318a709adc4263f3348ea8d4/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=bd98fe0c05601d8a318a709adc4263f3348ea8d4", "patch": "@@ -72,6 +72,7 @@ use std::sync::{Arc, Mutex};\n use std::thread;\n use std::time::{Instant, Duration};\n use std::borrow::Cow;\n+use std::process;\n \n const TEST_WARN_TIMEOUT_S: u64 = 60;\n const QUIET_MODE_MAX_COLUMN: usize = 100; // insert a '\\n' after 100 tests in quiet mode\n@@ -266,19 +267,27 @@ impl Options {\n pub fn test_main(args: &[String], tests: Vec<TestDescAndFn>, options: Options) {\n     let mut opts = match parse_opts(args) {\n         Some(Ok(o)) => o,\n-        Some(Err(msg)) => panic!(\"{:?}\", msg),\n+        Some(Err(msg)) => {\n+            eprintln!(\"error: {}\", msg);\n+            process::exit(101);\n+        },\n         None => return,\n     };\n+\n     opts.options = options;\n     if opts.list {\n         if let Err(e) = list_tests_console(&opts, tests) {\n-            panic!(\"io error when listing tests: {:?}\", e);\n+            eprintln!(\"error: io error when listing tests: {:?}\", e);\n+            process::exit(101);\n         }\n     } else {\n         match run_tests_console(&opts, tests) {\n             Ok(true) => {}\n-            Ok(false) => std::process::exit(101),\n-            Err(e) => panic!(\"io error when running tests: {:?}\", e),\n+            Ok(false) => process::exit(101),\n+            Err(e) => {\n+                eprintln!(\"error: io error when listing tests: {:?}\", e);\n+                process::exit(101);\n+            },\n         }\n     }\n }"}]}