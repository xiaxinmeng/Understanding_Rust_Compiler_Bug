{"sha": "5ca481bbdc75bd3a9dbce4c94b014bd0eb8bd9e8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjYTQ4MWJiZGM3NWJkM2E5ZGJjZTRjOTRiMDE0YmQwZWI4YmQ5ZTg=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-04-09T12:15:26Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-04-09T12:15:26Z"}, "message": "Move ToChalk -> mapping", "tree": {"sha": "bff5670807fd0cd9ce5d5f6ffaedf0c90ca02c51", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bff5670807fd0cd9ce5d5f6ffaedf0c90ca02c51"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ca481bbdc75bd3a9dbce4c94b014bd0eb8bd9e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ca481bbdc75bd3a9dbce4c94b014bd0eb8bd9e8", "html_url": "https://github.com/rust-lang/rust/commit/5ca481bbdc75bd3a9dbce4c94b014bd0eb8bd9e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ca481bbdc75bd3a9dbce4c94b014bd0eb8bd9e8/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "743faa21e74cc5b627935e2c4c3365807a5c722f", "url": "https://api.github.com/repos/rust-lang/rust/commits/743faa21e74cc5b627935e2c4c3365807a5c722f", "html_url": "https://github.com/rust-lang/rust/commit/743faa21e74cc5b627935e2c4c3365807a5c722f"}], "stats": {"total": 113, "additions": 76, "deletions": 37}, "files": [{"sha": "f5b2c5ff041e2b97c3025b172071afa89fdf4ea8", "filename": "crates/hir_ty/src/chalk_db.rs", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/5ca481bbdc75bd3a9dbce4c94b014bd0eb8bd9e8/crates%2Fhir_ty%2Fsrc%2Fchalk_db.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca481bbdc75bd3a9dbce4c94b014bd0eb8bd9e8/crates%2Fhir_ty%2Fsrc%2Fchalk_db.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fchalk_db.rs?ref=5ca481bbdc75bd3a9dbce4c94b014bd0eb8bd9e8", "patch": "@@ -1,4 +1,5 @@\n-//! Conversion code from/to Chalk.\n+//! The implementation of `RustIrDatabase` for Chalk, which provides information\n+//! about the code that Chalk needs.\n use std::sync::Arc;\n \n use log::debug;\n@@ -13,7 +14,21 @@ use hir_def::{\n };\n use hir_expand::name::name;\n \n-use crate::{AliasEq, AliasTy, BoundVar, CallableDefId, DebruijnIndex, FnDefId, Interner, ProjectionTy, Substitution, TraitRef, TraitRefExt, Ty, TyBuilder, TyExt, TyKind, WhereClause, traits::ChalkContext, db::HirDatabase, display::HirDisplay, from_assoc_type_id, make_only_type_binders, mapping::{convert_where_clauses, generic_predicate_to_inline_bound, TypeAliasAsValue}, method_resolution::{TyFingerprint, ALL_FLOAT_FPS, ALL_INT_FPS}, to_assoc_type_id, to_chalk_trait_id, utils::generics};\n+use crate::{\n+    db::HirDatabase,\n+    display::HirDisplay,\n+    from_assoc_type_id, make_only_type_binders,\n+    mapping::{\n+        convert_where_clauses, from_chalk, generic_predicate_to_inline_bound, ToChalk,\n+        TypeAliasAsValue,\n+    },\n+    method_resolution::{TyFingerprint, ALL_FLOAT_FPS, ALL_INT_FPS},\n+    to_assoc_type_id, to_chalk_trait_id,\n+    traits::ChalkContext,\n+    utils::generics,\n+    AliasEq, AliasTy, BoundVar, CallableDefId, DebruijnIndex, FnDefId, Interner, ProjectionTy,\n+    Substitution, TraitRef, TraitRefExt, Ty, TyBuilder, TyExt, TyKind, WhereClause,\n+};\n \n pub(crate) type AssociatedTyDatum = chalk_solve::rust_ir::AssociatedTyDatum<Interner>;\n pub(crate) type TraitDatum = chalk_solve::rust_ir::TraitDatum<Interner>;\n@@ -31,19 +46,6 @@ pub(crate) type AssociatedTyValue = chalk_solve::rust_ir::AssociatedTyValue<Inte\n pub(crate) type FnDefDatum = chalk_solve::rust_ir::FnDefDatum<Interner>;\n pub(crate) type Variances = chalk_ir::Variances<Interner>;\n \n-pub(crate) trait ToChalk {\n-    type Chalk;\n-    fn to_chalk(self, db: &dyn HirDatabase) -> Self::Chalk;\n-    fn from_chalk(db: &dyn HirDatabase, chalk: Self::Chalk) -> Self;\n-}\n-\n-pub(crate) fn from_chalk<T, ChalkT>(db: &dyn HirDatabase, chalk: ChalkT) -> T\n-where\n-    T: ToChalk<Chalk = ChalkT>,\n-{\n-    T::from_chalk(db, chalk)\n-}\n-\n impl<'a> chalk_solve::RustIrDatabase<Interner> for ChalkContext<'a> {\n     fn associated_ty_data(&self, id: AssocTypeId) -> Arc<AssociatedTyDatum> {\n         self.db.associated_ty_data(id)"}, {"sha": "e11fc579e6f6d24aa74820f1b30dac6c0a91c34b", "filename": "crates/hir_ty/src/db.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5ca481bbdc75bd3a9dbce4c94b014bd0eb8bd9e8/crates%2Fhir_ty%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca481bbdc75bd3a9dbce4c94b014bd0eb8bd9e8/crates%2Fhir_ty%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdb.rs?ref=5ca481bbdc75bd3a9dbce4c94b014bd0eb8bd9e8", "patch": "@@ -9,7 +9,12 @@ use hir_def::{\n };\n use la_arena::ArenaMap;\n \n-use crate::{Binders, CallableDefId, FnDefId, ImplTraitId, InferenceResult, Interner, PolyFnSig, QuantifiedWhereClause, ReturnTypeImplTraits, TraitRef, Ty, TyDefId, ValueTyDefId, chalk_db, method_resolution::{InherentImpls, TraitImpls}};\n+use crate::{\n+    chalk_db,\n+    method_resolution::{InherentImpls, TraitImpls},\n+    Binders, CallableDefId, FnDefId, ImplTraitId, InferenceResult, Interner, PolyFnSig,\n+    QuantifiedWhereClause, ReturnTypeImplTraits, TraitRef, Ty, TyDefId, ValueTyDefId,\n+};\n use hir_expand::name::Name;\n \n #[salsa::query_group(HirDatabaseStorage)]\n@@ -93,10 +98,15 @@ pub trait HirDatabase: DefDatabase + Upcast<dyn DefDatabase> {\n     fn associated_ty_data(&self, id: chalk_db::AssocTypeId) -> Arc<chalk_db::AssociatedTyDatum>;\n \n     #[salsa::invoke(chalk_db::trait_datum_query)]\n-    fn trait_datum(&self, krate: CrateId, trait_id: chalk_db::TraitId) -> Arc<chalk_db::TraitDatum>;\n+    fn trait_datum(&self, krate: CrateId, trait_id: chalk_db::TraitId)\n+        -> Arc<chalk_db::TraitDatum>;\n \n     #[salsa::invoke(chalk_db::struct_datum_query)]\n-    fn struct_datum(&self, krate: CrateId, struct_id: chalk_db::AdtId) -> Arc<chalk_db::StructDatum>;\n+    fn struct_datum(\n+        &self,\n+        krate: CrateId,\n+        struct_id: chalk_db::AdtId,\n+    ) -> Arc<chalk_db::StructDatum>;\n \n     #[salsa::invoke(chalk_db::impl_datum_query)]\n     fn impl_datum(&self, krate: CrateId, impl_id: chalk_db::ImplId) -> Arc<chalk_db::ImplDatum>;"}, {"sha": "ae3a82780888a8a5d75775770301de5c5279acbe", "filename": "crates/hir_ty/src/display.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5ca481bbdc75bd3a9dbce4c94b014bd0eb8bd9e8/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca481bbdc75bd3a9dbce4c94b014bd0eb8bd9e8/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs?ref=5ca481bbdc75bd3a9dbce4c94b014bd0eb8bd9e8", "patch": "@@ -20,11 +20,11 @@ use hir_expand::name::Name;\n \n use crate::{\n     const_from_placeholder_idx, db::HirDatabase, from_assoc_type_id, from_foreign_def_id,\n-    from_placeholder_idx, lt_from_placeholder_idx, primitive, subst_prefix, to_assoc_type_id,\n-    chalk_db::from_chalk, utils::generics, AdtId, AliasEq, AliasTy, CallableDefId,\n-    CallableSig, Const, ConstValue, DomainGoal, GenericArg, ImplTraitId, Interner, Lifetime,\n-    LifetimeData, LifetimeOutlives, Mutability, OpaqueTy, ProjectionTy, ProjectionTyExt,\n-    QuantifiedWhereClause, Scalar, TraitRef, TraitRefExt, Ty, TyExt, TyKind, WhereClause,\n+    from_placeholder_idx, lt_from_placeholder_idx, mapping::from_chalk, primitive, subst_prefix,\n+    to_assoc_type_id, utils::generics, AdtId, AliasEq, AliasTy, CallableDefId, CallableSig, Const,\n+    ConstValue, DomainGoal, GenericArg, ImplTraitId, Interner, Lifetime, LifetimeData,\n+    LifetimeOutlives, Mutability, OpaqueTy, ProjectionTy, ProjectionTyExt, QuantifiedWhereClause,\n+    Scalar, TraitRef, TraitRefExt, Ty, TyExt, TyKind, WhereClause,\n };\n \n pub struct HirFormatter<'a> {"}, {"sha": "50497eecb0255b891dfc9db3e2c7c3906d2583af", "filename": "crates/hir_ty/src/infer/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ca481bbdc75bd3a9dbce4c94b014bd0eb8bd9e8/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca481bbdc75bd3a9dbce4c94b014bd0eb8bd9e8/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=5ca481bbdc75bd3a9dbce4c94b014bd0eb8bd9e8", "patch": "@@ -17,11 +17,11 @@ use syntax::ast::RangeOp;\n use crate::{\n     autoderef, dummy_usize_const,\n     lower::lower_to_chalk_mutability,\n+    mapping::from_chalk,\n     method_resolution, op,\n     primitive::{self, UintTy},\n     static_lifetime, to_chalk_trait_id,\n     traits::FnTrait,\n-    chalk_db::from_chalk,\n     utils::{generics, Generics},\n     AdtId, Binders, CallableDefId, FnPointer, FnSig, FnSubst, InEnvironment, Interner,\n     ProjectionTyExt, Rawness, Scalar, Substitution, TraitRef, Ty, TyBuilder, TyExt, TyKind,"}, {"sha": "02e26c04ef1ffc36401e799faca425ad5b8f5fe5", "filename": "crates/hir_ty/src/interner.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5ca481bbdc75bd3a9dbce4c94b014bd0eb8bd9e8/crates%2Fhir_ty%2Fsrc%2Finterner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca481bbdc75bd3a9dbce4c94b014bd0eb8bd9e8/crates%2Fhir_ty%2Fsrc%2Finterner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finterner.rs?ref=5ca481bbdc75bd3a9dbce4c94b014bd0eb8bd9e8", "patch": "@@ -1,7 +1,7 @@\n //! Implementation of the Chalk `Interner` trait, which allows customizing the\n //! representation of the various objects Chalk deals with (types, goals etc.).\n \n-use crate::{GenericArg, tls, chalk_db};\n+use crate::{chalk_db, tls, GenericArg};\n use base_db::salsa::InternId;\n use chalk_ir::{Goal, GoalData};\n use hir_def::{\n@@ -60,15 +60,24 @@ impl chalk_ir::interner::Interner for Interner {\n     type Identifier = TypeAliasId;\n     type FnAbi = ();\n \n-    fn debug_adt_id(type_kind_id: chalk_db::AdtId, fmt: &mut fmt::Formatter<'_>) -> Option<fmt::Result> {\n+    fn debug_adt_id(\n+        type_kind_id: chalk_db::AdtId,\n+        fmt: &mut fmt::Formatter<'_>,\n+    ) -> Option<fmt::Result> {\n         tls::with_current_program(|prog| Some(prog?.debug_struct_id(type_kind_id, fmt)))\n     }\n \n-    fn debug_trait_id(type_kind_id: chalk_db::TraitId, fmt: &mut fmt::Formatter<'_>) -> Option<fmt::Result> {\n+    fn debug_trait_id(\n+        type_kind_id: chalk_db::TraitId,\n+        fmt: &mut fmt::Formatter<'_>,\n+    ) -> Option<fmt::Result> {\n         tls::with_current_program(|prog| Some(prog?.debug_trait_id(type_kind_id, fmt)))\n     }\n \n-    fn debug_assoc_type_id(id: chalk_db::AssocTypeId, fmt: &mut fmt::Formatter<'_>) -> Option<fmt::Result> {\n+    fn debug_assoc_type_id(\n+        id: chalk_db::AssocTypeId,\n+        fmt: &mut fmt::Formatter<'_>,\n+    ) -> Option<fmt::Result> {\n         tls::with_current_program(|prog| Some(prog?.debug_assoc_type_id(id, fmt)))\n     }\n "}, {"sha": "434e2e53330560361e8a05c7958bffdd6dcc76e9", "filename": "crates/hir_ty/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ca481bbdc75bd3a9dbce4c94b014bd0eb8bd9e8/crates%2Fhir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca481bbdc75bd3a9dbce4c94b014bd0eb8bd9e8/crates%2Fhir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flib.rs?ref=5ca481bbdc75bd3a9dbce4c94b014bd0eb8bd9e8", "patch": "@@ -51,13 +51,13 @@ pub use autoderef::autoderef;\n pub use builder::TyBuilder;\n pub use chalk_ext::*;\n pub use infer::{could_unify, InferenceResult};\n+pub use interner::Interner;\n pub use lower::{\n     associated_type_shorthand_candidates, callable_item_sig, CallableDefId, ImplTraitLoweringMode,\n     TyDefId, TyLoweringContext, ValueTyDefId,\n };\n pub use traits::TraitEnvironment;\n pub use walk::TypeWalk;\n-pub use interner::Interner;\n \n pub use chalk_ir::{\n     cast::Cast, AdtId, BoundVar, DebruijnIndex, Mutability, Safety, Scalar, TyVariableKind,"}, {"sha": "a035686bc9e1c80f67dcf78e4be3cd0f109ccd6f", "filename": "crates/hir_ty/src/lower.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5ca481bbdc75bd3a9dbce4c94b014bd0eb8bd9e8/crates%2Fhir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca481bbdc75bd3a9dbce4c94b014bd0eb8bd9e8/crates%2Fhir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flower.rs?ref=5ca481bbdc75bd3a9dbce4c94b014bd0eb8bd9e8", "patch": "@@ -27,14 +27,14 @@ use stdx::impl_from;\n \n use crate::{\n     db::HirDatabase,\n-    dummy_usize_const, static_lifetime, to_assoc_type_id, to_chalk_trait_id, to_placeholder_idx,\n-    chalk_db::ToChalk,\n-    Interner,\n+    dummy_usize_const,\n+    mapping::ToChalk,\n+    static_lifetime, to_assoc_type_id, to_chalk_trait_id, to_placeholder_idx,\n     utils::{\n         all_super_trait_refs, associated_type_by_name_including_super_traits, generics, Generics,\n     },\n     AliasEq, AliasTy, Binders, BoundVar, CallableSig, DebruijnIndex, DynTy, FnPointer, FnSig,\n-    FnSubst, ImplTraitId, OpaqueTy, PolyFnSig, ProjectionTy, QuantifiedWhereClause,\n+    FnSubst, ImplTraitId, Interner, OpaqueTy, PolyFnSig, ProjectionTy, QuantifiedWhereClause,\n     QuantifiedWhereClauses, ReturnTypeImplTrait, ReturnTypeImplTraits, Substitution,\n     TraitEnvironment, TraitRef, TraitRefExt, Ty, TyBuilder, TyKind, WhereClause,\n };"}, {"sha": "f57115de6a0c8239b033128e6b5f0578aa220578", "filename": "crates/hir_ty/src/mapping.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5ca481bbdc75bd3a9dbce4c94b014bd0eb8bd9e8/crates%2Fhir_ty%2Fsrc%2Fmapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca481bbdc75bd3a9dbce4c94b014bd0eb8bd9e8/crates%2Fhir_ty%2Fsrc%2Fmapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fmapping.rs?ref=5ca481bbdc75bd3a9dbce4c94b014bd0eb8bd9e8", "patch": "@@ -3,13 +3,29 @@\n //! Chalk (in both directions); plus some helper functions for more specialized\n //! conversions.\n \n-use chalk_ir::{DebruijnIndex, cast::Cast, fold::Shift};\n+use chalk_ir::{cast::Cast, fold::Shift, DebruijnIndex};\n use chalk_solve::rust_ir;\n \n use base_db::salsa::InternKey;\n use hir_def::{GenericDefId, TypeAliasId};\n \n-use crate::{AliasEq, AliasTy, CallableDefId, FnDefId, Interner, ProjectionTyExt, QuantifiedWhereClause, Substitution, Ty, WhereClause, chalk_db::{self, ToChalk}, db::HirDatabase};\n+use crate::{\n+    chalk_db, db::HirDatabase, AliasEq, AliasTy, CallableDefId, FnDefId, Interner, ProjectionTyExt,\n+    QuantifiedWhereClause, Substitution, Ty, WhereClause,\n+};\n+\n+pub(crate) trait ToChalk {\n+    type Chalk;\n+    fn to_chalk(self, db: &dyn HirDatabase) -> Self::Chalk;\n+    fn from_chalk(db: &dyn HirDatabase, chalk: Self::Chalk) -> Self;\n+}\n+\n+pub(crate) fn from_chalk<T, ChalkT>(db: &dyn HirDatabase, chalk: ChalkT) -> T\n+where\n+    T: ToChalk<Chalk = ChalkT>,\n+{\n+    T::from_chalk(db, chalk)\n+}\n \n impl ToChalk for hir_def::TraitId {\n     type Chalk = chalk_db::TraitId;"}, {"sha": "92989f11f6a8e01915ca87801a39399dafe0169b", "filename": "crates/hir_ty/src/tls.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ca481bbdc75bd3a9dbce4c94b014bd0eb8bd9e8/crates%2Fhir_ty%2Fsrc%2Ftls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca481bbdc75bd3a9dbce4c94b014bd0eb8bd9e8/crates%2Fhir_ty%2Fsrc%2Ftls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftls.rs?ref=5ca481bbdc75bd3a9dbce4c94b014bd0eb8bd9e8", "patch": "@@ -4,7 +4,9 @@ use std::fmt;\n use chalk_ir::{AliasTy, GenericArg, Goal, Goals, Lifetime, ProgramClauseImplication};\n use itertools::Itertools;\n \n-use crate::{db::HirDatabase, from_assoc_type_id, CallableDefId, chalk_db::{from_chalk, self}, Interner};\n+use crate::{\n+    chalk_db, db::HirDatabase, from_assoc_type_id, mapping::from_chalk, CallableDefId, Interner,\n+};\n use hir_def::{AdtId, AssocContainerId, Lookup, TypeAliasId};\n \n pub(crate) use unsafe_tls::{set_current_program, with_current_program};"}, {"sha": "7f77e421d4f12a695c7ae69f1ced9fad96af1b99", "filename": "crates/hir_ty/src/traits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ca481bbdc75bd3a9dbce4c94b014bd0eb8bd9e8/crates%2Fhir_ty%2Fsrc%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca481bbdc75bd3a9dbce4c94b014bd0eb8bd9e8/crates%2Fhir_ty%2Fsrc%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits.rs?ref=5ca481bbdc75bd3a9dbce4c94b014bd0eb8bd9e8", "patch": "@@ -9,7 +9,7 @@ use stdx::panic_context;\n \n use crate::{\n     db::HirDatabase, AliasEq, AliasTy, Canonical, DomainGoal, Guidance, HirDisplay, InEnvironment,\n-    Solution, TraitRefExt, Ty, TyKind, WhereClause, Interner,\n+    Interner, Solution, TraitRefExt, Ty, TyKind, WhereClause,\n };\n \n /// This controls how much 'time' we give the Chalk solver before giving up."}]}