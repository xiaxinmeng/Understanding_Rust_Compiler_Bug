{"sha": "6baaa527ce47d835e40afc238bab067ccacabe28", "node_id": "C_kwDOAAsO6NoAKDZiYWFhNTI3Y2U0N2Q4MzVlNDBhZmMyMzhiYWIwNjdjY2FjYWJlMjg", "commit": {"author": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2022-04-29T14:27:59Z"}, "committer": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2022-05-03T14:22:03Z"}, "message": "Allow inline consts to reference generic params", "tree": {"sha": "863b57428f1585e89535627a8b995b12612f2ad7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/863b57428f1585e89535627a8b995b12612f2ad7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6baaa527ce47d835e40afc238bab067ccacabe28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6baaa527ce47d835e40afc238bab067ccacabe28", "html_url": "https://github.com/rust-lang/rust/commit/6baaa527ce47d835e40afc238bab067ccacabe28", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6baaa527ce47d835e40afc238bab067ccacabe28/comments", "author": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf4d7fa43fbd4352a4c1c909b5791e2b5f0b07ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf4d7fa43fbd4352a4c1c909b5791e2b5f0b07ef", "html_url": "https://github.com/rust-lang/rust/commit/bf4d7fa43fbd4352a4c1c909b5791e2b5f0b07ef"}], "stats": {"total": 97, "additions": 91, "deletions": 6}, "files": [{"sha": "16ab22409fd70bd273e25b3acbf2630b1cac1ebb", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6baaa527ce47d835e40afc238bab067ccacabe28/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6baaa527ce47d835e40afc238bab067ccacabe28/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=6baaa527ce47d835e40afc238bab067ccacabe28", "patch": "@@ -3101,6 +3101,13 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n         );\n     }\n \n+    fn resolve_inline_const(&mut self, constant: &'ast AnonConst) {\n+        debug!(\"resolve_anon_const {constant:?}\");\n+        self.with_constant_rib(IsRepeatExpr::No, HasGenericParams::Yes, None, |this| {\n+            visit::walk_anon_const(this, constant);\n+        });\n+    }\n+\n     fn resolve_expr(&mut self, expr: &'ast Expr, parent: Option<&'ast Expr>) {\n         // First, record candidate traits for this expression if it could\n         // result in the invocation of a method call.\n@@ -3257,7 +3264,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                 });\n             }\n             ExprKind::ConstBlock(ref ct) => {\n-                self.resolve_anon_const(ct, IsRepeatExpr::No);\n+                self.resolve_inline_const(ct);\n             }\n             ExprKind::Index(ref elem, ref idx) => {\n                 self.resolve_expr(elem, Some(expr));"}, {"sha": "4e8879af54aff015e1de748d3486a56ba0252b6a", "filename": "src/test/ui/inline-const/const-expr-generic-err.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6baaa527ce47d835e40afc238bab067ccacabe28/src%2Ftest%2Fui%2Finline-const%2Fconst-expr-generic-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6baaa527ce47d835e40afc238bab067ccacabe28/src%2Ftest%2Fui%2Finline-const%2Fconst-expr-generic-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finline-const%2Fconst-expr-generic-err.rs?ref=6baaa527ce47d835e40afc238bab067ccacabe28", "patch": "@@ -0,0 +1,15 @@\n+// build-fail\n+#![feature(inline_const)]\n+\n+fn foo<T>() {\n+    const { assert!(std::mem::size_of::<T>() == 0); } //~ ERROR E0080\n+}\n+\n+fn bar<const N: usize>() -> usize {\n+    const { N - 1 } //~ ERROR E0080\n+}\n+\n+fn main() {\n+    foo::<i32>();\n+    bar::<0>();\n+}"}, {"sha": "db0d85a2d4e74c5ca4d30ddd54c7f6b677dd4346", "filename": "src/test/ui/inline-const/const-expr-generic-err.stderr", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/6baaa527ce47d835e40afc238bab067ccacabe28/src%2Ftest%2Fui%2Finline-const%2Fconst-expr-generic-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6baaa527ce47d835e40afc238bab067ccacabe28/src%2Ftest%2Fui%2Finline-const%2Fconst-expr-generic-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finline-const%2Fconst-expr-generic-err.stderr?ref=6baaa527ce47d835e40afc238bab067ccacabe28", "patch": "@@ -0,0 +1,29 @@\n+error[E0080]: evaluation of `foo::<i32>::{constant#0}` failed\n+  --> $DIR/const-expr-generic-err.rs:5:13\n+   |\n+LL |     const { assert!(std::mem::size_of::<T>() == 0); }\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'assertion failed: std::mem::size_of::<T>() == 0', $DIR/const-expr-generic-err.rs:5:13\n+   |\n+   = note: this error originates in the macro `assert` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+note: the above error was encountered while instantiating `fn foo::<i32>`\n+  --> $DIR/const-expr-generic-err.rs:13:5\n+   |\n+LL |     foo::<i32>();\n+   |     ^^^^^^^^^^^^\n+\n+error[E0080]: evaluation of `bar::<0_usize>::{constant#0}` failed\n+  --> $DIR/const-expr-generic-err.rs:9:13\n+   |\n+LL |     const { N - 1 }\n+   |             ^^^^^ attempt to compute `0_usize - 1_usize`, which would overflow\n+\n+note: the above error was encountered while instantiating `fn bar::<0_usize>`\n+  --> $DIR/const-expr-generic-err.rs:14:5\n+   |\n+LL |     bar::<0>();\n+   |     ^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "e097cbe9dd6d1d3187c09a80b1eb78271f3fa425", "filename": "src/test/ui/inline-const/const-expr-generic-err2.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6baaa527ce47d835e40afc238bab067ccacabe28/src%2Ftest%2Fui%2Finline-const%2Fconst-expr-generic-err2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6baaa527ce47d835e40afc238bab067ccacabe28/src%2Ftest%2Fui%2Finline-const%2Fconst-expr-generic-err2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finline-const%2Fconst-expr-generic-err2.rs?ref=6baaa527ce47d835e40afc238bab067ccacabe28", "patch": "@@ -0,0 +1,10 @@\n+#![feature(inline_const)]\n+\n+fn foo<T>() {\n+    let _ = [0u8; const { std::mem::size_of::<T>() }];\n+    //~^ ERROR: constant expression depends on a generic parameter\n+}\n+\n+fn main() {\n+    foo::<i32>();\n+}"}, {"sha": "00b716cd25965da94bde26294fa0065da3605db8", "filename": "src/test/ui/inline-const/const-expr-generic-err2.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6baaa527ce47d835e40afc238bab067ccacabe28/src%2Ftest%2Fui%2Finline-const%2Fconst-expr-generic-err2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6baaa527ce47d835e40afc238bab067ccacabe28/src%2Ftest%2Fui%2Finline-const%2Fconst-expr-generic-err2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finline-const%2Fconst-expr-generic-err2.stderr?ref=6baaa527ce47d835e40afc238bab067ccacabe28", "patch": "@@ -0,0 +1,10 @@\n+error: constant expression depends on a generic parameter\n+  --> $DIR/const-expr-generic-err2.rs:4:19\n+   |\n+LL |     let _ = [0u8; const { std::mem::size_of::<T>() }];\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this may fail depending on what value the parameter takes\n+\n+error: aborting due to previous error\n+"}, {"sha": "3207bfa0e89e6bfc5967ee068e8718d0af709898", "filename": "src/test/ui/inline-const/const-expr-generic.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6baaa527ce47d835e40afc238bab067ccacabe28/src%2Ftest%2Fui%2Finline-const%2Fconst-expr-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6baaa527ce47d835e40afc238bab067ccacabe28/src%2Ftest%2Fui%2Finline-const%2Fconst-expr-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finline-const%2Fconst-expr-generic.rs?ref=6baaa527ce47d835e40afc238bab067ccacabe28", "patch": "@@ -0,0 +1,15 @@\n+// check-pass\n+#![feature(inline_const)]\n+\n+fn foo<T>() -> usize {\n+    const { std::mem::size_of::<T>() }\n+}\n+\n+fn bar<const N: usize>() -> usize {\n+    const { N + 1 }\n+}\n+\n+fn main() {\n+    foo::<i32>();\n+    bar::<1>();\n+}"}, {"sha": "e1946467583e908c1ea23d85bdaacd88a9a909ac", "filename": "src/test/ui/inline-const/const-match-pat-generic.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6baaa527ce47d835e40afc238bab067ccacabe28/src%2Ftest%2Fui%2Finline-const%2Fconst-match-pat-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6baaa527ce47d835e40afc238bab067ccacabe28/src%2Ftest%2Fui%2Finline-const%2Fconst-match-pat-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finline-const%2Fconst-match-pat-generic.rs?ref=6baaa527ce47d835e40afc238bab067ccacabe28", "patch": "@@ -1,6 +1,5 @@\n #![allow(incomplete_features)]\n #![feature(inline_const_pat)]\n-#![feature(generic_const_exprs)]\n \n // rust-lang/rust#82518: ICE with inline-const in match referencing const-generic parameter\n \n@@ -16,7 +15,7 @@ const fn f(x: usize) -> usize {\n     x + 1\n }\n \n-fn bar<const V: usize>() where [(); f(V)]: {\n+fn bar<const V: usize>() {\n     match 0 {\n         const { f(V) } => {},\n         //~^ ERROR constant pattern depends on a generic parameter"}, {"sha": "ade200d99ba39c46390e7b9009866ec396c2f683", "filename": "src/test/ui/inline-const/const-match-pat-generic.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6baaa527ce47d835e40afc238bab067ccacabe28/src%2Ftest%2Fui%2Finline-const%2Fconst-match-pat-generic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6baaa527ce47d835e40afc238bab067ccacabe28/src%2Ftest%2Fui%2Finline-const%2Fconst-match-pat-generic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finline-const%2Fconst-match-pat-generic.stderr?ref=6baaa527ce47d835e40afc238bab067ccacabe28", "patch": "@@ -1,17 +1,17 @@\n error[E0158]: const parameters cannot be referenced in patterns\n-  --> $DIR/const-match-pat-generic.rs:9:9\n+  --> $DIR/const-match-pat-generic.rs:8:9\n    |\n LL |         const { V } => {},\n    |         ^^^^^^^^^^^\n \n error: constant pattern depends on a generic parameter\n-  --> $DIR/const-match-pat-generic.rs:21:9\n+  --> $DIR/const-match-pat-generic.rs:20:9\n    |\n LL |         const { f(V) } => {},\n    |         ^^^^^^^^^^^^^^\n \n error: constant pattern depends on a generic parameter\n-  --> $DIR/const-match-pat-generic.rs:21:9\n+  --> $DIR/const-match-pat-generic.rs:20:9\n    |\n LL |         const { f(V) } => {},\n    |         ^^^^^^^^^^^^^^"}]}