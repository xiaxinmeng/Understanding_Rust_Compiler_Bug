{"sha": "e07cec6f9a53238fea209c830c40ef16b9467a00", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwN2NlYzZmOWE1MzIzOGZlYTIwOWM4MzBjNDBlZjE2Yjk0NjdhMDA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-06-24T00:36:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-06-24T00:36:54Z"}, "message": "auto merge of #14885 : pcwalton/rust/struct-literal-tightening, r=alexcrichton\n\n`for...in`.\r\n\r\nCloses #14803.\r\n\r\nIf you used a structure literal after one of these keywords, surround it\r\nin parentheses.\r\n\r\n[breaking-change]\r\n\r\nr? @nick29581", "tree": {"sha": "c45e1cb80090eef5a4ee0923800cb6ca527b7164", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c45e1cb80090eef5a4ee0923800cb6ca527b7164"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e07cec6f9a53238fea209c830c40ef16b9467a00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e07cec6f9a53238fea209c830c40ef16b9467a00", "html_url": "https://github.com/rust-lang/rust/commit/e07cec6f9a53238fea209c830c40ef16b9467a00", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e07cec6f9a53238fea209c830c40ef16b9467a00/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6c1b85246f99b5485f3671bfca2a4657e0c37fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6c1b85246f99b5485f3671bfca2a4657e0c37fd", "html_url": "https://github.com/rust-lang/rust/commit/d6c1b85246f99b5485f3671bfca2a4657e0c37fd"}, {"sha": "654d6444feafaa7bae17057d8b98823c7556ea14", "url": "https://api.github.com/repos/rust-lang/rust/commits/654d6444feafaa7bae17057d8b98823c7556ea14", "html_url": "https://github.com/rust-lang/rust/commit/654d6444feafaa7bae17057d8b98823c7556ea14"}], "stats": {"total": 184, "additions": 147, "deletions": 37}, "files": [{"sha": "28ccea5ad1773370fbcd54848471988f10a8e8da", "filename": "src/doc/rust.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e07cec6f9a53238fea209c830c40ef16b9467a00/src%2Fdoc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/e07cec6f9a53238fea209c830c40ef16b9467a00/src%2Fdoc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust.md?ref=e07cec6f9a53238fea209c830c40ef16b9467a00", "patch": "@@ -3004,7 +3004,7 @@ ten_times(|j| println!(\"hello, {}\", j));\n ### While loops\n \n ~~~~ {.ebnf .gram}\n-while_expr : \"while\" expr '{' block '}' ;\n+while_expr : \"while\" no_struct_literal_expr '{' block '}' ;\n ~~~~\n \n A `while` loop begins by evaluating the boolean loop conditional expression.\n@@ -3071,7 +3071,7 @@ A `continue` expression is only permitted in the body of a loop.\n ### For expressions\n \n ~~~~ {.ebnf .gram}\n-for_expr : \"for\" pat \"in\" expr '{' block '}' ;\n+for_expr : \"for\" pat \"in\" no_struct_literal_expr '{' block '}' ;\n ~~~~\n \n A `for` expression is a syntactic construct for looping over elements\n@@ -3105,7 +3105,7 @@ for i in range(0u, 256) {\n ### If expressions\n \n ~~~~ {.ebnf .gram}\n-if_expr : \"if\" expr '{' block '}'\n+if_expr : \"if\" no_struct_literal_expr '{' block '}'\n           else_tail ? ;\n \n else_tail : \"else\" [ if_expr\n@@ -3126,7 +3126,7 @@ then any `else` block is executed.\n ### Match expressions\n \n ~~~~ {.ebnf .gram}\n-match_expr : \"match\" expr '{' match_arm * '}' ;\n+match_expr : \"match\" no_struct_literal_expr '{' match_arm * '}' ;\n \n match_arm : attribute * match_pat \"=>\" [ expr \",\" | '{' block '}' ] ;\n "}, {"sha": "e3a028ed4d6c4df659ca1d30865f6eb62e08dda5", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/e07cec6f9a53238fea209c830c40ef16b9467a00/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e07cec6f9a53238fea209c830c40ef16b9467a00/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=e07cec6f9a53238fea209c830c40ef16b9467a00", "patch": "@@ -88,6 +88,7 @@ pub enum restriction {\n     RESTRICT_STMT_EXPR,\n     RESTRICT_NO_BAR_OP,\n     RESTRICT_NO_BAR_OR_DOUBLEBAR_OP,\n+    RESTRICT_NO_STRUCT_LITERAL,\n }\n \n type ItemInfo = (Ident, Item_, Option<Vec<Attribute> >);\n@@ -2024,8 +2025,9 @@ impl<'a> Parser<'a> {\n \n                 return self.mk_mac_expr(lo, hi, MacInvocTT(pth, tts, EMPTY_CTXT));\n             } else if self.token == token::LBRACE {\n-                // This might be a struct literal.\n-                if self.looking_at_struct_literal() {\n+                // This is a struct literal, unless we're prohibited from\n+                // parsing struct literals here.\n+                if self.restriction != RESTRICT_NO_STRUCT_LITERAL {\n                     // It's a struct literal.\n                     self.bump();\n                     let mut fields = Vec::new();\n@@ -2042,6 +2044,14 @@ impl<'a> Parser<'a> {\n                                          &[token::COMMA], &[token::RBRACE]);\n                     }\n \n+                    if fields.len() == 0 && base.is_none() {\n+                        let last_span = self.last_span;\n+                        self.span_err(last_span,\n+                                      \"structure literal must either have at \\\n+                                       least one field or use functional \\\n+                                       structure update syntax\");\n+                    }\n+\n                     hi = self.span.hi;\n                     self.expect(&token::RBRACE);\n                     ex = ExprStruct(pth, fields, base);\n@@ -2548,7 +2558,7 @@ impl<'a> Parser<'a> {\n     // parse an 'if' expression ('if' token already eaten)\n     pub fn parse_if_expr(&mut self) -> Gc<Expr> {\n         let lo = self.last_span.lo;\n-        let cond = self.parse_expr();\n+        let cond = self.parse_expr_res(RESTRICT_NO_STRUCT_LITERAL);\n         let thn = self.parse_block();\n         let mut els: Option<Gc<Expr>> = None;\n         let mut hi = thn.span.hi;\n@@ -2633,7 +2643,7 @@ impl<'a> Parser<'a> {\n         let lo = self.last_span.lo;\n         let pat = self.parse_pat();\n         self.expect_keyword(keywords::In);\n-        let expr = self.parse_expr();\n+        let expr = self.parse_expr_res(RESTRICT_NO_STRUCT_LITERAL);\n         let loop_block = self.parse_block();\n         let hi = self.span.hi;\n \n@@ -2642,7 +2652,7 @@ impl<'a> Parser<'a> {\n \n     pub fn parse_while_expr(&mut self) -> Gc<Expr> {\n         let lo = self.last_span.lo;\n-        let cond = self.parse_expr();\n+        let cond = self.parse_expr_res(RESTRICT_NO_STRUCT_LITERAL);\n         let body = self.parse_block();\n         let hi = body.span.hi;\n         return self.mk_expr(lo, hi, ExprWhile(cond, body));\n@@ -2655,17 +2665,9 @@ impl<'a> Parser<'a> {\n         self.mk_expr(lo, hi, ExprLoop(body, opt_ident))\n     }\n \n-    // For distinguishing between struct literals and blocks\n-    fn looking_at_struct_literal(&mut self) -> bool {\n-        self.token == token::LBRACE &&\n-        ((self.look_ahead(1, |t| token::is_plain_ident(t)) &&\n-          self.look_ahead(2, |t| *t == token::COLON))\n-         || self.look_ahead(1, |t| *t == token::DOTDOT))\n-    }\n-\n     fn parse_match_expr(&mut self) -> Gc<Expr> {\n         let lo = self.last_span.lo;\n-        let discriminant = self.parse_expr();\n+        let discriminant = self.parse_expr_res(RESTRICT_NO_STRUCT_LITERAL);\n         self.commit_expr_expecting(discriminant, token::LBRACE);\n         let mut arms: Vec<Arm> = Vec::new();\n         while self.token != token::RBRACE {"}, {"sha": "3671cf110d81e2bb43e61117760f8bee81f03af8", "filename": "src/test/compile-fail/bind-struct-early-modifiers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e07cec6f9a53238fea209c830c40ef16b9467a00/src%2Ftest%2Fcompile-fail%2Fbind-struct-early-modifiers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e07cec6f9a53238fea209c830c40ef16b9467a00/src%2Ftest%2Fcompile-fail%2Fbind-struct-early-modifiers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbind-struct-early-modifiers.rs?ref=e07cec6f9a53238fea209c830c40ef16b9467a00", "patch": "@@ -10,7 +10,7 @@\n \n fn main() {\n     struct Foo { x: int }\n-    match Foo { x: 10 } {\n+    match (Foo { x: 10 }) {\n         Foo { ref x: ref x } => {}, //~ ERROR unexpected `:`\n         _ => {}\n     }"}, {"sha": "6b5dd570e34e250151c66b4ee5f0ce7399e8a90e", "filename": "src/test/compile-fail/borrowck-match-binding-is-assignment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e07cec6f9a53238fea209c830c40ef16b9467a00/src%2Ftest%2Fcompile-fail%2Fborrowck-match-binding-is-assignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e07cec6f9a53238fea209c830c40ef16b9467a00/src%2Ftest%2Fcompile-fail%2Fborrowck-match-binding-is-assignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-match-binding-is-assignment.rs?ref=e07cec6f9a53238fea209c830c40ef16b9467a00", "patch": "@@ -31,7 +31,7 @@ pub fn main() {\n         }\n     }\n \n-    match S { bar: 1 } {\n+    match (S { bar: 1 }) {\n         S { bar: x } => {\n             x += 1; //~ ERROR re-assignment of immutable variable `x`\n         }"}, {"sha": "167e78d7ed09ea72623cfbe681ef282e48dfe9a1", "filename": "src/test/compile-fail/borrowck-move-error-with-note.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e07cec6f9a53238fea209c830c40ef16b9467a00/src%2Ftest%2Fcompile-fail%2Fborrowck-move-error-with-note.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e07cec6f9a53238fea209c830c40ef16b9467a00/src%2Ftest%2Fcompile-fail%2Fborrowck-move-error-with-note.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-move-error-with-note.rs?ref=e07cec6f9a53238fea209c830c40ef16b9467a00", "patch": "@@ -34,7 +34,7 @@ impl Drop for S {\n }\n \n fn move_in_match() {\n-    match S {f: \"foo\".to_string(), g: \"bar\".to_string()} {\n+    match (S {f: \"foo\".to_string(), g: \"bar\".to_string()}) {\n         S {         //~ ERROR cannot move out of type `S`, which defines the `Drop` trait\n             f: _s,  //~ NOTE attempting to move value to here\n             g: _t   //~ NOTE and here"}, {"sha": "3d13cbe30c5a21c0249f39dee46732032426db85", "filename": "src/test/compile-fail/borrowck-move-out-of-struct-with-dtor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e07cec6f9a53238fea209c830c40ef16b9467a00/src%2Ftest%2Fcompile-fail%2Fborrowck-move-out-of-struct-with-dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e07cec6f9a53238fea209c830c40ef16b9467a00/src%2Ftest%2Fcompile-fail%2Fborrowck-move-out-of-struct-with-dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-move-out-of-struct-with-dtor.rs?ref=e07cec6f9a53238fea209c830c40ef16b9467a00", "patch": "@@ -14,7 +14,7 @@ impl Drop for S {\n }\n \n fn move_in_match() {\n-    match S {f:\"foo\".to_string()} {\n+    match (S {f:\"foo\".to_string()}) {\n         S {f:_s} => {}\n         //~^ ERROR cannot move out of type `S`, which defines the `Drop` trait\n     }"}, {"sha": "4956528856b66d3c85d25f10fbdd01f0b1e58b82", "filename": "src/test/compile-fail/match-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e07cec6f9a53238fea209c830c40ef16b9467a00/src%2Ftest%2Fcompile-fail%2Fmatch-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e07cec6f9a53238fea209c830c40ef16b9467a00/src%2Ftest%2Fcompile-fail%2Fmatch-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-struct.rs?ref=e07cec6f9a53238fea209c830c40ef16b9467a00", "patch": "@@ -13,7 +13,7 @@ struct S { a: int }\n enum E { C(int) }\n \n fn main() {\n-    match S { a: 1 } {\n+    match (S { a: 1 }) {\n         C(_) => (), //~ ERROR mismatched types: expected `S` but found `E`\n         _ => ()\n     }"}, {"sha": "d0f51bf2da43b8d8c0c0628061875c20a054feab", "filename": "src/test/compile-fail/non-exhaustive-pattern-witness.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e07cec6f9a53238fea209c830c40ef16b9467a00/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-pattern-witness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e07cec6f9a53238fea209c830c40ef16b9467a00/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-pattern-witness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-pattern-witness.rs?ref=e07cec6f9a53238fea209c830c40ef16b9467a00", "patch": "@@ -22,7 +22,7 @@ enum Color {\n }\n \n fn struct_with_a_nested_enum_and_vector() {\n-    match Foo { first: true, second: None } {\n+    match (Foo { first: true, second: None }) {\n     //~^ ERROR non-exhaustive patterns: `Foo{first: false, second: Some([_, _, _, _])}` not covered\n         Foo { first: true, second: None } => (),\n         Foo { first: true, second: Some(_) } => (),\n@@ -71,4 +71,4 @@ fn main() {\n     struct_with_a_nested_enum_and_vector();\n     enum_with_multiple_missing_variants();\n     enum_struct_variant();\n-}\n\\ No newline at end of file\n+}"}, {"sha": "ccd711d83758db6c9ee9383881b16565e0189fe8", "filename": "src/test/compile-fail/struct-literal-in-for.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e07cec6f9a53238fea209c830c40ef16b9467a00/src%2Ftest%2Fcompile-fail%2Fstruct-literal-in-for.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e07cec6f9a53238fea209c830c40ef16b9467a00/src%2Ftest%2Fcompile-fail%2Fstruct-literal-in-for.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstruct-literal-in-for.rs?ref=e07cec6f9a53238fea209c830c40ef16b9467a00", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct Foo {\n+    x: int,\n+}\n+\n+impl Foo {\n+    fn hi(&self) -> bool {\n+        true\n+    }\n+}\n+\n+fn main() {\n+    for x in Foo {\n+        x: 3    //~ ERROR expected one of `;`, `}`\n+    }.hi() {\n+        println!(\"yo\");\n+    }\n+}\n+"}, {"sha": "d63c216c3bee4ae89d4c6f03d5498aa6e5ea5b5f", "filename": "src/test/compile-fail/struct-literal-in-if.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e07cec6f9a53238fea209c830c40ef16b9467a00/src%2Ftest%2Fcompile-fail%2Fstruct-literal-in-if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e07cec6f9a53238fea209c830c40ef16b9467a00/src%2Ftest%2Fcompile-fail%2Fstruct-literal-in-if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstruct-literal-in-if.rs?ref=e07cec6f9a53238fea209c830c40ef16b9467a00", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct Foo {\n+    x: int,\n+}\n+\n+impl Foo {\n+    fn hi(&self) -> bool {\n+        true\n+    }\n+}\n+\n+fn main() {\n+    if Foo {\n+        x: 3    //~ ERROR expected one of `;`, `}`\n+    }.hi() {\n+        println!(\"yo\");\n+    }\n+}\n+"}, {"sha": "c740ba020629de448ccd9f9cf37fe38a53ded519", "filename": "src/test/compile-fail/struct-literal-in-match-discriminant.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e07cec6f9a53238fea209c830c40ef16b9467a00/src%2Ftest%2Fcompile-fail%2Fstruct-literal-in-match-discriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e07cec6f9a53238fea209c830c40ef16b9467a00/src%2Ftest%2Fcompile-fail%2Fstruct-literal-in-match-discriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstruct-literal-in-match-discriminant.rs?ref=e07cec6f9a53238fea209c830c40ef16b9467a00", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct Foo {\n+    x: int,\n+}\n+\n+fn main() {\n+    match Foo {\n+        x: 3    //~ ERROR expected `=>`\n+    } {\n+        Foo {\n+            x: x\n+        } => {}\n+    }\n+}\n+"}, {"sha": "7b2c11e2597a2fa55feea884ec90743d202ab61a", "filename": "src/test/compile-fail/struct-literal-in-while.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e07cec6f9a53238fea209c830c40ef16b9467a00/src%2Ftest%2Fcompile-fail%2Fstruct-literal-in-while.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e07cec6f9a53238fea209c830c40ef16b9467a00/src%2Ftest%2Fcompile-fail%2Fstruct-literal-in-while.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstruct-literal-in-while.rs?ref=e07cec6f9a53238fea209c830c40ef16b9467a00", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct Foo {\n+    x: int,\n+}\n+\n+impl Foo {\n+    fn hi(&self) -> bool {\n+        true\n+    }\n+}\n+\n+fn main() {\n+    while Foo {\n+        x: 3    //~ ERROR expected one of `;`, `}`\n+    }.hi() {\n+        println!(\"yo\");\n+    }\n+}\n+"}, {"sha": "4f973f81b1641b4e7e8635a7caa6522860ea658f", "filename": "src/test/compile-fail/struct-no-fields-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e07cec6f9a53238fea209c830c40ef16b9467a00/src%2Ftest%2Fcompile-fail%2Fstruct-no-fields-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e07cec6f9a53238fea209c830c40ef16b9467a00/src%2Ftest%2Fcompile-fail%2Fstruct-no-fields-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstruct-no-fields-2.rs?ref=e07cec6f9a53238fea209c830c40ef16b9467a00", "patch": "@@ -12,7 +12,7 @@ struct Foo;\n \n fn f2() {\n     let _end_stmt     = Foo { };\n-    //~^ ERROR: unit-like struct construction is written with no trailing `{ }`\n+    //~^ ERROR: structure literal must either have at least one field\n }\n \n fn main() {}"}, {"sha": "e594683feed173dfadc36b6658a7cbc1271b3629", "filename": "src/test/compile-fail/struct-no-fields-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e07cec6f9a53238fea209c830c40ef16b9467a00/src%2Ftest%2Fcompile-fail%2Fstruct-no-fields-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e07cec6f9a53238fea209c830c40ef16b9467a00/src%2Ftest%2Fcompile-fail%2Fstruct-no-fields-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstruct-no-fields-3.rs?ref=e07cec6f9a53238fea209c830c40ef16b9467a00", "patch": "@@ -12,7 +12,7 @@ struct Foo;\n \n fn g3() {\n     let _mid_tuple    = (Foo { }, 2);\n-    //~^ ERROR: unit-like struct construction is written with no trailing `{ }`\n+    //~^ ERROR: structure literal must either have at least one field\n }\n \n fn main() {}"}, {"sha": "60a0a85d0abf1be3298455331be6431c6dddf37c", "filename": "src/test/compile-fail/struct-no-fields-4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e07cec6f9a53238fea209c830c40ef16b9467a00/src%2Ftest%2Fcompile-fail%2Fstruct-no-fields-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e07cec6f9a53238fea209c830c40ef16b9467a00/src%2Ftest%2Fcompile-fail%2Fstruct-no-fields-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstruct-no-fields-4.rs?ref=e07cec6f9a53238fea209c830c40ef16b9467a00", "patch": "@@ -12,7 +12,7 @@ struct Foo;\n \n fn h4() {\n     let _end_of_tuple = (3, Foo { });\n-    //~^ ERROR: unit-like struct construction is written with no trailing `{ }`\n+    //~^ ERROR: structure literal must either have at least one field\n }\n \n fn main() {}"}, {"sha": "940fa9c7f273f5ec9d79078614ae62fe3ca56bf6", "filename": "src/test/compile-fail/struct-no-fields-5.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e07cec6f9a53238fea209c830c40ef16b9467a00/src%2Ftest%2Fcompile-fail%2Fstruct-no-fields-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e07cec6f9a53238fea209c830c40ef16b9467a00/src%2Ftest%2Fcompile-fail%2Fstruct-no-fields-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstruct-no-fields-5.rs?ref=e07cec6f9a53238fea209c830c40ef16b9467a00", "patch": "@@ -12,7 +12,7 @@ struct Foo;\n \n fn i5() {\n     let _end_of_block = { Foo { } };\n-    //~^ ERROR: unit-like struct construction is written with no trailing `{ }`\n+    //~^ ERROR: structure literal must either have at least one field\n }\n \n fn main() {}"}, {"sha": "b347afbbbcdb541f9a49579b9a59987061a58cdd", "filename": "src/test/debuginfo/lexical-scope-in-match.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e07cec6f9a53238fea209c830c40ef16b9467a00/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e07cec6f9a53238fea209c830c40ef16b9467a00/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-match.rs?ref=e07cec6f9a53238fea209c830c40ef16b9467a00", "patch": "@@ -105,15 +105,15 @@ fn main() {\n         _ => {}\n     }\n \n-    match Struct { x: 237, y: 238 } {\n+    match (Struct { x: 237, y: 238 }) {\n         Struct { x: shadowed, y: local_to_arm } => {\n \n             zzz();\n             sentinel();\n         }\n     }\n \n-    match Struct { x: 239, y: 240 } {\n+    match (Struct { x: 239, y: 240 }) {\n         // ignored field\n         Struct { x: shadowed, .. } => {\n \n@@ -122,7 +122,7 @@ fn main() {\n         }\n     }\n \n-    match Struct { x: 241, y: 242 } {\n+    match (Struct { x: 241, y: 242 }) {\n         // with literal\n         Struct { x: shadowed, y: 242 } => {\n "}, {"sha": "8fa4af528567b9357be38a2e7c74a231c3c47345", "filename": "src/test/run-pass/guards.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e07cec6f9a53238fea209c830c40ef16b9467a00/src%2Ftest%2Frun-pass%2Fguards.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e07cec6f9a53238fea209c830c40ef16b9467a00/src%2Ftest%2Frun-pass%2Fguards.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fguards.rs?ref=e07cec6f9a53238fea209c830c40ef16b9467a00", "patch": "@@ -16,7 +16,7 @@ pub fn main() {\n     assert_eq!(a, 2);\n \n     let b =\n-        match Pair {x: 10, y: 20} {\n+        match (Pair {x: 10, y: 20}) {\n           x if x.x < 5 && x.y < 5 => { 1 }\n           Pair {x: x, y: y} if x == 10 && y == 20 => { 2 }\n           Pair {x: _x, y: _y} => { 3 }"}, {"sha": "c30c4a714b39d92ac4257bcae36258738f36efef", "filename": "src/test/run-pass/match-in-macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e07cec6f9a53238fea209c830c40ef16b9467a00/src%2Ftest%2Frun-pass%2Fmatch-in-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e07cec6f9a53238fea209c830c40ef16b9467a00/src%2Ftest%2Frun-pass%2Fmatch-in-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-in-macro.rs?ref=e07cec6f9a53238fea209c830c40ef16b9467a00", "patch": "@@ -16,7 +16,7 @@ enum Foo {\n \n macro_rules! match_inside_expansion(\n     () => (\n-        match B { b1:29 , bb1: 100} {\n+        match (B { b1:29 , bb1: 100}) {\n             B { b1:b2 , bb1:bb2 } => b2+bb2\n         }\n     )"}, {"sha": "b2a47e0ccb88b0145113f4c17ef84dab4cc59d74", "filename": "src/test/run-pass/nested-exhaustive-match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e07cec6f9a53238fea209c830c40ef16b9467a00/src%2Ftest%2Frun-pass%2Fnested-exhaustive-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e07cec6f9a53238fea209c830c40ef16b9467a00/src%2Ftest%2Frun-pass%2Fnested-exhaustive-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnested-exhaustive-match.rs?ref=e07cec6f9a53238fea209c830c40ef16b9467a00", "patch": "@@ -11,7 +11,7 @@\n struct Foo { foo: bool, bar: Option<int>, baz: int }\n \n pub fn main() {\n-    match Foo{foo: true, bar: Some(10), baz: 20} {\n+    match (Foo{foo: true, bar: Some(10), baz: 20}) {\n       Foo{foo: true, bar: Some(_), ..} => {}\n       Foo{foo: false, bar: None, ..} => {}\n       Foo{foo: true, bar: None, ..} => {}"}, {"sha": "08816d345b400563463233cb38bee09c5176e4ea", "filename": "src/test/run-pass/nested-patterns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e07cec6f9a53238fea209c830c40ef16b9467a00/src%2Ftest%2Frun-pass%2Fnested-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e07cec6f9a53238fea209c830c40ef16b9467a00/src%2Ftest%2Frun-pass%2Fnested-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnested-patterns.rs?ref=e07cec6f9a53238fea209c830c40ef16b9467a00", "patch": "@@ -14,7 +14,7 @@ struct D { a: int, d: C }\n struct C { c: int }\n \n pub fn main() {\n-    match A {a: 10, b: 20} {\n+    match (A {a: 10, b: 20}) {\n         x@A {a, b: 20} => { assert!(x.a == 10); assert!(a == 10); }\n         A {b: _b, ..} => { fail!(); }\n     }"}, {"sha": "e7bc61c1fb99c74b259848673fd9492d25d7d07f", "filename": "src/test/run-pass/struct_variant_xc_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e07cec6f9a53238fea209c830c40ef16b9467a00/src%2Ftest%2Frun-pass%2Fstruct_variant_xc_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e07cec6f9a53238fea209c830c40ef16b9467a00/src%2Ftest%2Frun-pass%2Fstruct_variant_xc_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstruct_variant_xc_match.rs?ref=e07cec6f9a53238fea209c830c40ef16b9467a00", "patch": "@@ -14,7 +14,7 @@ extern crate struct_variant_xc_aux;\n use struct_variant_xc_aux::{StructVariant, Variant};\n \n pub fn main() {\n-    let arg = match StructVariant { arg: 42 } {\n+    let arg = match (StructVariant { arg: 42 }) {\n         Variant(_) => unreachable!(),\n         StructVariant { arg } => arg\n     };"}]}