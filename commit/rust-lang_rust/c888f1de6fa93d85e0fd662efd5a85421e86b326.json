{"sha": "c888f1de6fa93d85e0fd662efd5a85421e86b326", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4ODhmMWRlNmZhOTNkODVlMGZkNjYyZWZkNWE4NTQyMWU4NmIzMjY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-12-17T16:29:31Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-12-17T17:11:40Z"}, "message": "Rewrite doctest runnables\n\nHandle more cases in a generic way without copy-pasting code.", "tree": {"sha": "711d8244ad54a433b5102008d8a46779f0dcc55d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/711d8244ad54a433b5102008d8a46779f0dcc55d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c888f1de6fa93d85e0fd662efd5a85421e86b326", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c888f1de6fa93d85e0fd662efd5a85421e86b326", "html_url": "https://github.com/rust-lang/rust/commit/c888f1de6fa93d85e0fd662efd5a85421e86b326", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c888f1de6fa93d85e0fd662efd5a85421e86b326/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0da1532ef2ecda96612a5ccc326b8c6c070106d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/0da1532ef2ecda96612a5ccc326b8c6c070106d6", "html_url": "https://github.com/rust-lang/rust/commit/0da1532ef2ecda96612a5ccc326b8c6c070106d6"}], "stats": {"total": 190, "additions": 83, "deletions": 107}, "files": [{"sha": "522607cb7b51becd920b084dd070d8d67a9a4f1a", "filename": "crates/ide/src/display/navigation_target.rs", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c888f1de6fa93d85e0fd662efd5a85421e86b326/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c888f1de6fa93d85e0fd662efd5a85421e86b326/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=c888f1de6fa93d85e0fd662efd5a85421e86b326", "patch": "@@ -117,25 +117,6 @@ impl NavigationTarget {\n         )\n     }\n \n-    /// Allows `NavigationTarget` to be created from a `DocCommentsOwner` and a `NameOwner`\n-    pub(crate) fn from_doc_commented(\n-        db: &RootDatabase,\n-        named: InFile<&dyn ast::NameOwner>,\n-        node: InFile<&dyn ast::DocCommentsOwner>,\n-    ) -> NavigationTarget {\n-        let name =\n-            named.value.name().map(|it| it.text().clone()).unwrap_or_else(|| SmolStr::new(\"_\"));\n-        let frange = node.map(|it| it.syntax()).original_file_range(db);\n-\n-        NavigationTarget::from_syntax(\n-            frange.file_id,\n-            name,\n-            None,\n-            frange.range,\n-            node.value.syntax().kind(),\n-        )\n-    }\n-\n     fn from_syntax(\n         file_id: FileId,\n         name: SmolStr,"}, {"sha": "2f465c1951872c57206efdf3e3923acd6173dc9a", "filename": "crates/ide/src/runnables.rs", "status": "modified", "additions": 83, "deletions": 88, "changes": 171, "blob_url": "https://github.com/rust-lang/rust/blob/c888f1de6fa93d85e0fd662efd5a85421e86b326/crates%2Fide%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c888f1de6fa93d85e0fd662efd5a85421e86b326/crates%2Fide%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Frunnables.rs?ref=c888f1de6fa93d85e0fd662efd5a85421e86b326", "patch": "@@ -10,7 +10,10 @@ use syntax::{\n     match_ast, SyntaxNode,\n };\n \n-use crate::{display::ToNav, FileId, NavigationTarget};\n+use crate::{\n+    display::{ToNav, TryToNav},\n+    FileId, NavigationTarget,\n+};\n \n #[derive(Debug, Clone)]\n pub struct Runnable {\n@@ -101,117 +104,109 @@ pub(crate) fn runnable(\n     item: SyntaxNode,\n     file_id: FileId,\n ) -> Option<Runnable> {\n-    match_ast! {\n-        match item {\n-            ast::Struct(it) => runnable_struct(sema, it, file_id),\n+    let runnable_item = match_ast! {\n+        match (item.clone()) {\n             ast::Fn(it) => runnable_fn(sema, it, file_id),\n             ast::Module(it) => runnable_mod(sema, it),\n             _ => None,\n         }\n-    }\n+    };\n+    runnable_item.or_else(|| runnable_doctest(sema, item))\n }\n \n fn runnable_fn(sema: &Semantics<RootDatabase>, func: ast::Fn, file_id: FileId) -> Option<Runnable> {\n     let def = sema.to_def(&func)?;\n     let name_string = func.name()?.text().to_string();\n \n-    let attrs = def.attrs(sema.db);\n     let kind = if name_string == \"main\" {\n         RunnableKind::Bin\n     } else {\n-        let test_id = match sema.to_def(&func).map(|def| def.module(sema.db)) {\n-            Some(module) => {\n-                let def = sema.to_def(&func)?;\n-                let impl_trait_name = def.as_assoc_item(sema.db).and_then(|assoc_item| {\n-                    match assoc_item.container(sema.db) {\n-                        hir::AssocItemContainer::Trait(trait_item) => {\n-                            Some(trait_item.name(sema.db).to_string())\n-                        }\n-                        hir::AssocItemContainer::Impl(impl_def) => impl_def\n-                            .target_ty(sema.db)\n-                            .as_adt()\n-                            .map(|adt| adt.name(sema.db).to_string()),\n-                    }\n-                });\n-\n-                let path_iter = module\n-                    .path_to_root(sema.db)\n-                    .into_iter()\n-                    .rev()\n-                    .filter_map(|it| it.name(sema.db))\n-                    .map(|name| name.to_string());\n-\n-                let path = if let Some(impl_trait_name) = impl_trait_name {\n-                    path_iter\n-                        .chain(std::iter::once(impl_trait_name))\n-                        .chain(std::iter::once(name_string))\n-                        .join(\"::\")\n-                } else {\n-                    path_iter.chain(std::iter::once(name_string)).join(\"::\")\n-                };\n-\n-                TestId::Path(path)\n-            }\n-            None => TestId::Name(name_string),\n-        };\n+        let canonical_path = sema.to_def(&func).and_then(|def| {\n+            let def: hir::ModuleDef = def.into();\n+            def.canonical_path(sema.db)\n+        });\n+        let test_id = canonical_path.map(TestId::Path).unwrap_or(TestId::Name(name_string));\n \n         if test_related_attribute(&func).is_some() {\n             let attr = TestAttr::from_fn(&func);\n             RunnableKind::Test { test_id, attr }\n         } else if func.has_atom_attr(\"bench\") {\n             RunnableKind::Bench { test_id }\n-        } else if has_runnable_doc_test(&attrs) {\n-            RunnableKind::DocTest { test_id }\n         } else {\n             return None;\n         }\n     };\n \n-    let nav = if let RunnableKind::DocTest { .. } = kind {\n-        NavigationTarget::from_doc_commented(\n-            sema.db,\n-            InFile::new(file_id.into(), &func),\n-            InFile::new(file_id.into(), &func),\n-        )\n-    } else {\n-        NavigationTarget::from_named(sema.db, InFile::new(file_id.into(), &func))\n-    };\n-    Some(Runnable { nav, kind, cfg: attrs.cfg() })\n+    let nav = NavigationTarget::from_named(sema.db, InFile::new(file_id.into(), &func));\n+    let cfg = def.attrs(sema.db).cfg();\n+    Some(Runnable { nav, kind, cfg })\n }\n \n-fn runnable_struct(\n-    sema: &Semantics<RootDatabase>,\n-    strukt: ast::Struct,\n-    file_id: FileId,\n-) -> Option<Runnable> {\n-    let def = sema.to_def(&strukt)?;\n-    let name_string = strukt.name()?.text().to_string();\n+fn runnable_doctest(sema: &Semantics<RootDatabase>, item: SyntaxNode) -> Option<Runnable> {\n+    match_ast! {\n+        match item {\n+            ast::Fn(it) => module_def_doctest(sema, sema.to_def(&it)?.into()),\n+            ast::Struct(it) => module_def_doctest(sema, sema.to_def(&it)?.into()),\n+            ast::Enum(it) => module_def_doctest(sema, sema.to_def(&it)?.into()),\n+            ast::Union(it) => module_def_doctest(sema, sema.to_def(&it)?.into()),\n+            ast::Trait(it) => module_def_doctest(sema, sema.to_def(&it)?.into()),\n+            ast::Const(it) => module_def_doctest(sema, sema.to_def(&it)?.into()),\n+            ast::Static(it) => module_def_doctest(sema, sema.to_def(&it)?.into()),\n+            ast::TypeAlias(it) => module_def_doctest(sema, sema.to_def(&it)?.into()),\n+            _ => None,\n+        }\n+    }\n+}\n \n-    let attrs = def.attrs(sema.db);\n+fn module_def_doctest(sema: &Semantics<RootDatabase>, def: hir::ModuleDef) -> Option<Runnable> {\n+    let attrs = match def {\n+        hir::ModuleDef::Module(it) => it.attrs(sema.db),\n+        hir::ModuleDef::Function(it) => it.attrs(sema.db),\n+        hir::ModuleDef::Adt(it) => it.attrs(sema.db),\n+        hir::ModuleDef::EnumVariant(it) => it.attrs(sema.db),\n+        hir::ModuleDef::Const(it) => it.attrs(sema.db),\n+        hir::ModuleDef::Static(it) => it.attrs(sema.db),\n+        hir::ModuleDef::Trait(it) => it.attrs(sema.db),\n+        hir::ModuleDef::TypeAlias(it) => it.attrs(sema.db),\n+        hir::ModuleDef::BuiltinType(_) => return None,\n+    };\n     if !has_runnable_doc_test(&attrs) {\n         return None;\n     }\n-    let test_id = match sema.to_def(&strukt).map(|def| def.module(sema.db)) {\n-        Some(module) => {\n-            let path_iter = module\n-                .path_to_root(sema.db)\n-                .into_iter()\n-                .rev()\n-                .filter_map(|it| it.name(sema.db))\n-                .map(|name| name.to_string());\n-            let path = path_iter.chain(std::iter::once(name_string)).join(\"::\");\n-\n-            TestId::Path(path)\n-        }\n-        None => TestId::Name(name_string),\n-    };\n-\n-    let nav = NavigationTarget::from_doc_commented(\n-        sema.db,\n-        InFile::new(file_id.into(), &strukt),\n-        InFile::new(file_id.into(), &strukt),\n-    );\n-    Some(Runnable { nav, kind: RunnableKind::DocTest { test_id }, cfg: attrs.cfg() })\n+    let def_name = def.name(sema.db).map(|it| it.to_string());\n+    let test_id = def\n+        .canonical_path(sema.db)\n+        // This probably belongs to canonical path?\n+        .map(|path| {\n+            let assoc_def = match def {\n+                hir::ModuleDef::Function(it) => it.as_assoc_item(sema.db),\n+                hir::ModuleDef::Const(it) => it.as_assoc_item(sema.db),\n+                hir::ModuleDef::TypeAlias(it) => it.as_assoc_item(sema.db),\n+                _ => None,\n+            };\n+            // FIXME: this also looks very wrong\n+            if let Some(assoc_def) = assoc_def {\n+                if let hir::AssocItemContainer::Impl(imp) = assoc_def.container(sema.db) {\n+                    if let Some(adt) = imp.target_ty(sema.db).as_adt() {\n+                        let name = adt.name(sema.db).to_string();\n+                        let idx = path.rfind(':').unwrap_or(0);\n+                        let (prefix, suffix) = path.split_at(idx);\n+                        return format!(\"{}{}::{}\", prefix, name, suffix);\n+                    }\n+                }\n+            }\n+            path\n+        })\n+        .map(TestId::Path)\n+        .or_else(|| def_name.clone().map(TestId::Name))?;\n+\n+    let mut nav = def.try_to_nav(sema.db)?;\n+    nav.focus_range = None;\n+    nav.description = None;\n+    nav.docs = None;\n+    nav.kind = syntax::SyntaxKind::COMMENT;\n+    let res = Runnable { nav, kind: RunnableKind::DocTest { test_id }, cfg: attrs.cfg() };\n+    Some(res)\n }\n \n #[derive(Debug, Copy, Clone)]\n@@ -309,7 +304,7 @@ mod tests {\n \n     use crate::fixture;\n \n-    use super::{RunnableAction, BENCH, BIN, DOCTEST, TEST};\n+    use super::*;\n \n     fn check(\n         ra_fixture: &str,\n@@ -538,7 +533,7 @@ struct StructWithRunnable(String);\n                             full_range: 15..74,\n                             focus_range: None,\n                             name: \"should_have_runnable\",\n-                            kind: FN,\n+                            kind: COMMENT,\n                             container_name: None,\n                             description: None,\n                             docs: None,\n@@ -558,7 +553,7 @@ struct StructWithRunnable(String);\n                             full_range: 76..148,\n                             focus_range: None,\n                             name: \"should_have_runnable_1\",\n-                            kind: FN,\n+                            kind: COMMENT,\n                             container_name: None,\n                             description: None,\n                             docs: None,\n@@ -578,7 +573,7 @@ struct StructWithRunnable(String);\n                             full_range: 150..254,\n                             focus_range: None,\n                             name: \"should_have_runnable_2\",\n-                            kind: FN,\n+                            kind: COMMENT,\n                             container_name: None,\n                             description: None,\n                             docs: None,\n@@ -598,7 +593,7 @@ struct StructWithRunnable(String);\n                             full_range: 756..821,\n                             focus_range: None,\n                             name: \"StructWithRunnable\",\n-                            kind: STRUCT,\n+                            kind: COMMENT,\n                             container_name: None,\n                             description: None,\n                             docs: None,\n@@ -660,7 +655,7 @@ impl Data {\n                             full_range: 44..98,\n                             focus_range: None,\n                             name: \"foo\",\n-                            kind: FN,\n+                            kind: COMMENT,\n                             container_name: None,\n                             description: None,\n                             docs: None,"}]}