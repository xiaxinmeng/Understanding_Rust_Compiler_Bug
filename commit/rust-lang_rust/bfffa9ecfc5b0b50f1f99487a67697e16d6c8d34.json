{"sha": "bfffa9ecfc5b0b50f1f99487a67697e16d6c8d34", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmZmZhOWVjZmM1YjBiNTBmMWY5OTQ4N2E2NzY5N2UxNmQ2YzhkMzQ=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-09-29T00:18:05Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-10-08T22:53:41Z"}, "message": "Fixes to rustdoc, etc.", "tree": {"sha": "feb0158f71ffbc5f3deccdcd7f7c14d501277d0e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/feb0158f71ffbc5f3deccdcd7f7c14d501277d0e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bfffa9ecfc5b0b50f1f99487a67697e16d6c8d34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bfffa9ecfc5b0b50f1f99487a67697e16d6c8d34", "html_url": "https://github.com/rust-lang/rust/commit/bfffa9ecfc5b0b50f1f99487a67697e16d6c8d34", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bfffa9ecfc5b0b50f1f99487a67697e16d6c8d34/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f469ba6c5b0167949540d6c2afe51a0454767f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f469ba6c5b0167949540d6c2afe51a0454767f5", "html_url": "https://github.com/rust-lang/rust/commit/7f469ba6c5b0167949540d6c2afe51a0454767f5"}], "stats": {"total": 23, "additions": 16, "deletions": 7}, "files": [{"sha": "f62148c16fa5a270c2a1e054046bb92be11095e9", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bfffa9ecfc5b0b50f1f99487a67697e16d6c8d34/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfffa9ecfc5b0b50f1f99487a67697e16d6c8d34/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=bfffa9ecfc5b0b50f1f99487a67697e16d6c8d34", "patch": "@@ -19,7 +19,7 @@ use rustc::lint;\n use rustc::util::nodemap::DefIdSet;\n use rustc_trans::back::link;\n use rustc_resolve as resolve;\n-use rustc_front::lowering::lower_crate;\n+use rustc_front::lowering::{lower_crate, LoweringContext};\n \n use syntax::{ast, codemap, diagnostic};\n use syntax::feature_gate::UnstableFeatures;\n@@ -37,7 +37,7 @@ pub use rustc::session::search_paths::SearchPaths;\n /// Are we generating documentation (`Typed`) or tests (`NotTyped`)?\n pub enum MaybeTyped<'a, 'tcx: 'a> {\n     Typed(&'a ty::ctxt<'tcx>),\n-    NotTyped(session::Session)\n+    NotTyped(&'a session::Session)\n }\n \n pub type ExternalPaths = RefCell<Option<HashMap<DefId,\n@@ -135,11 +135,13 @@ pub fn run_core(search_paths: SearchPaths, cfgs: Vec<String>, externs: Externs,\n \n     let krate = driver::assign_node_ids(&sess, krate);\n     // Lower ast -> hir.\n-    let mut hir_forest = hir_map::Forest::new(lower_crate(&krate));\n+    let foo = &42;\n+    let lcx = LoweringContext::new(foo, &sess, &krate);\n+    let mut hir_forest = hir_map::Forest::new(lower_crate(&lcx, &krate));\n     let arenas = ty::CtxtArenas::new();\n     let hir_map = driver::make_map(&sess, &mut hir_forest);\n \n-    driver::phase_3_run_analysis_passes(sess,\n+    driver::phase_3_run_analysis_passes(&sess,\n                                         hir_map,\n                                         &arenas,\n                                         name,\n@@ -194,5 +196,5 @@ pub fn run_core(search_paths: SearchPaths, cfgs: Vec<String>, externs: Externs,\n         *analysis.inlined.borrow_mut() = map;\n         analysis.deref_trait_did = ctxt.deref_trait_did.get();\n         (krate, analysis)\n-    }).1\n+    })\n }"}, {"sha": "dec2ed789e0f51f0b2a51c07c0d7d8f654c95f29", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/bfffa9ecfc5b0b50f1f99487a67697e16d6c8d34/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfffa9ecfc5b0b50f1f99487a67697e16d6c8d34/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=bfffa9ecfc5b0b50f1f99487a67697e16d6c8d34", "patch": "@@ -26,7 +26,7 @@ use rustc::front::map as hir_map;\n use rustc::session::{self, config};\n use rustc::session::config::{get_unstable_features_setting, OutputType};\n use rustc::session::search_paths::{SearchPaths, PathKind};\n-use rustc_front::lowering::lower_crate;\n+use rustc_front::lowering::{lower_crate, LoweringContext};\n use rustc_back::tempdir::TempDir;\n use rustc_driver::{driver, Compilation};\n use syntax::codemap::CodeMap;\n@@ -83,16 +83,23 @@ pub fn run(input: &str,\n                                                      \"rustdoc-test\", None)\n         .expect(\"phase_2_configure_and_expand aborted in rustdoc!\");\n     let krate = driver::assign_node_ids(&sess, krate);\n-    let krate = lower_crate(&krate);\n+    let foo = &42;\n+    let lcx = LoweringContext::new(foo, &sess, &krate);\n+    let krate = lower_crate(&lcx, &krate);\n \n     let opts = scrape_test_config(&krate);\n \n     let mut forest = hir_map::Forest::new(krate);\n     let map = hir_map::map_crate(&mut forest);\n \n     let ctx = core::DocContext {\n+<<<<<<< HEAD\n         map: &map,\n         maybe_typed: core::NotTyped(sess),\n+=======\n+        krate: &krate,\n+        maybe_typed: core::NotTyped(&sess),\n+>>>>>>> Fixes to rustdoc, etc.\n         input: input,\n         external_paths: RefCell::new(Some(HashMap::new())),\n         external_traits: RefCell::new(None),"}]}