{"sha": "249d872901f9791799e1230ebdf11d4fc8df86e2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0OWQ4NzI5MDFmOTc5MTc5OWUxMjMwZWJkZjExZDRmYzhkZjg2ZTI=", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-07-04T22:13:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-04T22:13:24Z"}, "message": "Rollup merge of #86856 - jyn514:x.py-less-verbose, r=Mark-Simulacrum\n\nMake x.py less verbose on failures\n\n- Don't print the exact command run by rustbuild unless `--verbose` is set.\n  This is almost always unhelpful, since it's just cargo with a lot of\n  arguments (and you can't replicate it anyway unless you have the environment variables, which aren't printed by default).\n- Don't print \"Build completed unsuccessfully\" unless --verbose is set.\n  You can already tell the build failed by the errors above, and the\n  time isn't particularly helpful.\n- Don't print the full path to bootstrap. This is useless to everyone,\n  even including when working on x.py itself. You can still opt-in to\n  this being shown with `--verbose`, since it will throw an exception.\n\nBefore:\n\n```\nerror[E0432]: unresolved import `x`\n   --> library/std/src/lib.rs:343:5\n    |\n343 | use x;\n    |     ^ no external crate `x`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0432`.\nerror: could not compile `std`\n\nTo learn more, run the command again with --verbose.\ncommand did not execute successfully: \"/home/joshua/rustc4/build/x86_64-unknown-linux-gnu/stage0/bin/cargo\" \"check\" \"--target\" \"x86_64-unknown-linux-gnu\" \"-Zbinary-dep-depinfo\" \"-j\" \"8\" \"--release\" \"--features\" \"panic-unwind backtrace\" \"--manifest-path\" \"/home/joshua/rustc4/library/test/Cargo.toml\" \"--message-format\" \"json-render-diagnostics\"\nexpected success, got: exit status: 101\nfailed to run: /home/joshua/rustc4/build/bootstrap/debug/bootstrap check\nBuild completed unsuccessfully in 0:00:13\n```\n\nAfter:\n\n```\nerror[E0432]: unresolved import `x`\n   --> library/std/src/lib.rs:343:5\n    |\n343 | use x;\n    |     ^ no external crate `x`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0432`.\nerror: could not compile `std`\n\nTo learn more, run the command again with --verbose.\n```\n\ncc https://github.com/rust-lang/rust/issues/86854, https://github.com/rust-lang/rust/pull/86022\n\nr? `@Mark-Simulacrum`", "tree": {"sha": "92552c4af40046717ae7d1ded1cd53a5f883d15f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/92552c4af40046717ae7d1ded1cd53a5f883d15f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/249d872901f9791799e1230ebdf11d4fc8df86e2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg4jKFCRBK7hj4Ov3rIwAAaWMIADRSgE8IJXWf76frtvZNDObt\nbLFbK9A9QW4oeBNPS4/wEcWrmF+tL+qc6Ft/fRZFwjbvnfPSTPez+zkjRaj5wIZH\n2Hfr/dSCvXjJO31YFaiZlQHBFygUlG/rM6VsBUvLugr+RTUr6TkJctftdulAWlMU\n6FLSHXUHVAG6Uv6QJgBjDJnj/bOgV/RypCIn5xKsUPBYao4nPp1Rz1XZbgsoHVsT\ntD47mJ3hgEnOFb+uLM5gFwaPCElwATZelYEsPj7mffmX5pXbezjOM5ynfTT4CIuc\n2B9/reMF1jKIQMwO5B7+sjtnJlnYxoWz6UNLJbHji1aYFG7P3TUs5r/ldD0i4/4=\n=xCsi\n-----END PGP SIGNATURE-----\n", "payload": "tree 92552c4af40046717ae7d1ded1cd53a5f883d15f\nparent ac880e5e3952c09fbce4df3da86537d33ea7ece2\nparent fad1b9c3ba98f2018a33de523b241be622d32c0c\nauthor Yuki Okushi <jtitor@2k36.org> 1625436804 +0900\ncommitter GitHub <noreply@github.com> 1625436804 +0900\n\nRollup merge of #86856 - jyn514:x.py-less-verbose, r=Mark-Simulacrum\n\nMake x.py less verbose on failures\n\n- Don't print the exact command run by rustbuild unless `--verbose` is set.\n  This is almost always unhelpful, since it's just cargo with a lot of\n  arguments (and you can't replicate it anyway unless you have the environment variables, which aren't printed by default).\n- Don't print \"Build completed unsuccessfully\" unless --verbose is set.\n  You can already tell the build failed by the errors above, and the\n  time isn't particularly helpful.\n- Don't print the full path to bootstrap. This is useless to everyone,\n  even including when working on x.py itself. You can still opt-in to\n  this being shown with `--verbose`, since it will throw an exception.\n\nBefore:\n\n```\nerror[E0432]: unresolved import `x`\n   --> library/std/src/lib.rs:343:5\n    |\n343 | use x;\n    |     ^ no external crate `x`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0432`.\nerror: could not compile `std`\n\nTo learn more, run the command again with --verbose.\ncommand did not execute successfully: \"/home/joshua/rustc4/build/x86_64-unknown-linux-gnu/stage0/bin/cargo\" \"check\" \"--target\" \"x86_64-unknown-linux-gnu\" \"-Zbinary-dep-depinfo\" \"-j\" \"8\" \"--release\" \"--features\" \"panic-unwind backtrace\" \"--manifest-path\" \"/home/joshua/rustc4/library/test/Cargo.toml\" \"--message-format\" \"json-render-diagnostics\"\nexpected success, got: exit status: 101\nfailed to run: /home/joshua/rustc4/build/bootstrap/debug/bootstrap check\nBuild completed unsuccessfully in 0:00:13\n```\n\nAfter:\n\n```\nerror[E0432]: unresolved import `x`\n   --> library/std/src/lib.rs:343:5\n    |\n343 | use x;\n    |     ^ no external crate `x`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0432`.\nerror: could not compile `std`\n\nTo learn more, run the command again with --verbose.\n```\n\ncc https://github.com/rust-lang/rust/issues/86854, https://github.com/rust-lang/rust/pull/86022\n\nr? `@Mark-Simulacrum`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/249d872901f9791799e1230ebdf11d4fc8df86e2", "html_url": "https://github.com/rust-lang/rust/commit/249d872901f9791799e1230ebdf11d4fc8df86e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/249d872901f9791799e1230ebdf11d4fc8df86e2/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac880e5e3952c09fbce4df3da86537d33ea7ece2", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac880e5e3952c09fbce4df3da86537d33ea7ece2", "html_url": "https://github.com/rust-lang/rust/commit/ac880e5e3952c09fbce4df3da86537d33ea7ece2"}, {"sha": "fad1b9c3ba98f2018a33de523b241be622d32c0c", "url": "https://api.github.com/repos/rust-lang/rust/commits/fad1b9c3ba98f2018a33de523b241be622d32c0c", "html_url": "https://github.com/rust-lang/rust/commit/fad1b9c3ba98f2018a33de523b241be622d32c0c"}], "stats": {"total": 15, "additions": 11, "deletions": 4}, "files": [{"sha": "f9904cb610d2d6e3157abee34161498afd36cabf", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/249d872901f9791799e1230ebdf11d4fc8df86e2/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/249d872901f9791799e1230ebdf11d4fc8df86e2/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=249d872901f9791799e1230ebdf11d4fc8df86e2", "patch": "@@ -138,7 +138,7 @@ def unpack(tarball, tarball_suffix, dst, verbose=False, match=None):\n     shutil.rmtree(os.path.join(dst, fname))\n \n \n-def run(args, verbose=False, exception=False, **kwargs):\n+def run(args, verbose=False, exception=False, is_bootstrap=False, **kwargs):\n     \"\"\"Run a child program in a new process\"\"\"\n     if verbose:\n         print(\"running: \" + ' '.join(args))\n@@ -151,7 +151,14 @@ def run(args, verbose=False, exception=False, **kwargs):\n         err = \"failed to run: \" + ' '.join(args)\n         if verbose or exception:\n             raise RuntimeError(err)\n-        sys.exit(err)\n+        # For most failures, we definitely do want to print this error, or the user will have no\n+        # idea what went wrong. But when we've successfully built bootstrap and it failed, it will\n+        # have already printed an error above, so there's no need to print the exact command we're\n+        # running.\n+        if is_bootstrap:\n+            sys.exit(1)\n+        else:\n+            sys.exit(err)\n \n \n def require(cmd, exit=True):\n@@ -1170,7 +1177,7 @@ def bootstrap(help_triggered):\n         env[\"BOOTSTRAP_CONFIG\"] = toml_path\n     if build.rustc_commit is not None:\n         env[\"BOOTSTRAP_DOWNLOAD_RUSTC\"] = '1'\n-    run(args, env=env, verbose=build.verbose)\n+    run(args, env=env, verbose=build.verbose, is_bootstrap=True)\n \n \n def main():"}, {"sha": "1fae4bee732c01248a5a708e506afb37348f3a89", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/249d872901f9791799e1230ebdf11d4fc8df86e2/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/249d872901f9791799e1230ebdf11d4fc8df86e2/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=249d872901f9791799e1230ebdf11d4fc8df86e2", "patch": "@@ -1366,7 +1366,7 @@ pub fn stream_cargo(\n \n     // Make sure Cargo actually succeeded after we read all of its stdout.\n     let status = t!(child.wait());\n-    if !status.success() {\n+    if builder.is_verbose() && !status.success() {\n         eprintln!(\n             \"command did not execute successfully: {:?}\\n\\\n                   expected success, got: {}\","}]}