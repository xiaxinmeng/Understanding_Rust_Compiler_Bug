{"sha": "d188854e133ab704b4c122d43c4c3621cf12caf5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxODg4NTRlMTMzYWI3MDRiNGMxMjJkNDNjNGMzNjIxY2YxMmNhZjU=", "commit": {"author": {"name": "Mark Story", "email": "mark@mark-story.com", "date": "2015-12-30T04:54:35Z"}, "committer": {"name": "Mark Story", "email": "mark@mark-story.com", "date": "2016-01-14T02:01:26Z"}, "message": "Hack together checkstyle output that compiles.\n\nI'm not sure it does something useful yet though.", "tree": {"sha": "d1a51b8e8c262121e12d181dfe01b625252adcea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d1a51b8e8c262121e12d181dfe01b625252adcea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d188854e133ab704b4c122d43c4c3621cf12caf5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d188854e133ab704b4c122d43c4c3621cf12caf5", "html_url": "https://github.com/rust-lang/rust/commit/d188854e133ab704b4c122d43c4c3621cf12caf5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d188854e133ab704b4c122d43c4c3621cf12caf5/comments", "author": {"login": "markstory", "id": 24086, "node_id": "MDQ6VXNlcjI0MDg2", "avatar_url": "https://avatars.githubusercontent.com/u/24086?v=4", "gravatar_id": "", "url": "https://api.github.com/users/markstory", "html_url": "https://github.com/markstory", "followers_url": "https://api.github.com/users/markstory/followers", "following_url": "https://api.github.com/users/markstory/following{/other_user}", "gists_url": "https://api.github.com/users/markstory/gists{/gist_id}", "starred_url": "https://api.github.com/users/markstory/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/markstory/subscriptions", "organizations_url": "https://api.github.com/users/markstory/orgs", "repos_url": "https://api.github.com/users/markstory/repos", "events_url": "https://api.github.com/users/markstory/events{/privacy}", "received_events_url": "https://api.github.com/users/markstory/received_events", "type": "User", "site_admin": false}, "committer": {"login": "markstory", "id": 24086, "node_id": "MDQ6VXNlcjI0MDg2", "avatar_url": "https://avatars.githubusercontent.com/u/24086?v=4", "gravatar_id": "", "url": "https://api.github.com/users/markstory", "html_url": "https://github.com/markstory", "followers_url": "https://api.github.com/users/markstory/followers", "following_url": "https://api.github.com/users/markstory/following{/other_user}", "gists_url": "https://api.github.com/users/markstory/gists{/gist_id}", "starred_url": "https://api.github.com/users/markstory/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/markstory/subscriptions", "organizations_url": "https://api.github.com/users/markstory/orgs", "repos_url": "https://api.github.com/users/markstory/repos", "events_url": "https://api.github.com/users/markstory/events{/privacy}", "received_events_url": "https://api.github.com/users/markstory/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c9f27fe5ec8d80bbbd939a3fb30070f993d7044", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c9f27fe5ec8d80bbbd939a3fb30070f993d7044", "html_url": "https://github.com/rust-lang/rust/commit/0c9f27fe5ec8d80bbbd939a3fb30070f993d7044"}], "stats": {"total": 74, "additions": 71, "deletions": 3}, "files": [{"sha": "cecad3f847732ca436d237dd1892e05ba3d24a95", "filename": "src/filemap.rs", "status": "modified", "additions": 71, "deletions": 3, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/d188854e133ab704b4c122d43c4c3621cf12caf5/src%2Ffilemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d188854e133ab704b4c122d43c4c3621cf12caf5/src%2Ffilemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffilemap.rs?ref=d188854e133ab704b4c122d43c4c3621cf12caf5", "patch": "@@ -18,7 +18,7 @@ use std::fs::{self, File};\n use std::io::{self, Write, Read, stdout, BufWriter};\n \n use config::{NewlineStyle, Config, WriteMode};\n-use rustfmt_diff::{make_diff, print_diff};\n+use rustfmt_diff::{make_diff, print_diff, Mismatch, DiffLine};\n \n // A map of the files of a crate, with their new content\n pub type FileMap = HashMap<String, StringBuffer>;\n@@ -34,11 +34,70 @@ pub fn write_all_files(file_map: &FileMap,\n                        mode: WriteMode,\n                        config: &Config)\n                        -> Result<(), io::Error> {\n+    output_heading(&file_map, mode).ok();\n     for filename in file_map.keys() {\n         try!(write_file(&file_map[filename], filename, mode, config));\n     }\n+    output_trailing(&file_map, mode).ok();\n \n-    // Output trailers for write mode.\n+    Ok(())\n+}\n+\n+pub fn output_heading(file_map: &FileMap,\n+                      mode: WriteMode) -> Result<(), io::Error> {\n+    let stdout = stdout();\n+    let mut stdout = stdout.lock();\n+    match mode {\n+        WriteMode::Checkstyle => {\n+            let mut xml_heading = String::new();\n+            xml_heading.push_str(\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\");\n+            xml_heading.push_str(\"\\n\");\n+            xml_heading.push_str(\"<checkstyle version=\\\"4.3\\\">\");\n+            try!(write!(stdout, \"{}\", xml_heading));\n+            Ok(())\n+        }\n+        _ => {\n+            Ok(())\n+        }\n+    }\n+}\n+\n+pub fn output_trailing(file_map: &FileMap,\n+                       mode: WriteMode) -> Result<(), io::Error> {\n+    let stdout = stdout();\n+    let mut stdout = stdout.lock();\n+    match mode {\n+        WriteMode::Checkstyle => {\n+            let mut xml_tail = String::new();\n+            xml_tail.push_str(\"</checkstyle>\");\n+            try!(write!(stdout, \"{}\", xml_tail));\n+            Ok(())\n+        }\n+        _ => {\n+            Ok(())\n+        }\n+    }\n+}\n+\n+pub fn output_checkstyle_file<T>(mut writer: T,\n+                                 filename: &str,\n+                                 diff: Vec<Mismatch>) -> Result<(), io::Error>\n+    where T: Write\n+{\n+    try!(write!(writer, \"<file name=\\\"{}\\\">\", filename));\n+    for mismatch in diff {\n+        for line in mismatch.lines {\n+            match line {\n+                DiffLine::Expected(ref str) => {\n+                    try!(write!(writer, \"<error line=\\\"{}\\\" severity=\\\"error\\\" message=\\\"Should be `{}`\\\" />\", mismatch.line_number, str));\n+                }\n+                _ => {\n+                    // Do nothing with context and expected.\n+                }\n+            }\n+        }\n+    }\n+    try!(write!(writer, \"</file>\"));\n     Ok(())\n }\n \n@@ -144,9 +203,18 @@ pub fn write_file(text: &StringBuffer,\n             unreachable!(\"The WriteMode should NEVER Be default at this point!\");\n         }\n         WriteMode::Checkstyle => {\n+            let stdout = stdout();\n+            let stdout = stdout.lock();\n             // Generate the diff for the current file.\n+            let mut f = try!(File::open(filename));\n+            let mut ori_text = String::new();\n+            try!(f.read_to_string(&mut ori_text));\n+            let mut v = Vec::new();\n+            try!(write_system_newlines(&mut v, text, config));\n+            let fmt_text = String::from_utf8(v).unwrap();\n+            let diff = make_diff(&ori_text, &fmt_text, 3);\n             // Output the XML tags for the lines that are different.\n-            // Use the new text as 'should be X'.\n+            output_checkstyle_file(stdout, filename, diff).unwrap();\n         }\n         WriteMode::Return => {\n             // io::Write is not implemented for String, working around with"}]}