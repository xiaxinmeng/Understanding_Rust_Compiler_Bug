{"sha": "722baed173b41007c0d82d72b5ac4f2e375f17da", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyMmJhZWQxNzNiNDEwMDdjMGQ4MmQ3MmI1YWM0ZjJlMzc1ZjE3ZGE=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-02-08T15:19:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-02-08T15:19:55Z"}, "message": "Rollup merge of #39597 - GuillaumeGomez:correct_rustdoc_test_file, r=alexcrichton\n\nDisplay correct filename with --test option\n\nFixes #39592.\n\nWith the current files:\n\n```rust\npub mod foo;\n\n/// This is a Foo;\n///\n/// ```\n/// println!(\"baaaaaar\");\n/// ```\npub struct Foo;\n\n/// This is a Bar;\n///\n/// ```\n/// println!(\"fooooo\");\n/// ```\npub struct Bar;\n```\n\n```rust\n// note the whitespaces\n/// ```\n/// println!(\"foo\");\n/// ```\npub fn foo() {}\n```\n\nIt displays:\n\n```\n./build/x86_64-apple-darwin/stage1/bin/rustdoc --test test.rs\n\nrunning 3 tests\ntest test.rs - line 13 ... ok\ntest test.rs - line 5 ... ok\ntest foo.rs - line 2 ... ok\n\ntest result: ok. 3 passed; 0 failed; 0 ignored; 0 measured\n```\n\n```\n\n` ``\nprintln!(\"lol\");\n` ``\n\nasdjnfasd\n\nasd\n```\n\nIt displays:\n\n```\n./build/x86_64-apple-darwin/stage1/bin/rustdoc --test foo.md\n\nrunning 1 test\ntest <input> - line 3 ... ok\n\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured\n```\n\nr? @alexcrichton", "tree": {"sha": "ded25168f395b07731448843ff2af87a3bea0c54", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ded25168f395b07731448843ff2af87a3bea0c54"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/722baed173b41007c0d82d72b5ac4f2e375f17da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/722baed173b41007c0d82d72b5ac4f2e375f17da", "html_url": "https://github.com/rust-lang/rust/commit/722baed173b41007c0d82d72b5ac4f2e375f17da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/722baed173b41007c0d82d72b5ac4f2e375f17da/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "765892126773c9b9e05bbe7a833d7fd5c262f13c", "url": "https://api.github.com/repos/rust-lang/rust/commits/765892126773c9b9e05bbe7a833d7fd5c262f13c", "html_url": "https://github.com/rust-lang/rust/commit/765892126773c9b9e05bbe7a833d7fd5c262f13c"}, {"sha": "d2f8abf2549304b3b67ac6e837d046ddf02c2cd6", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2f8abf2549304b3b67ac6e837d046ddf02c2cd6", "html_url": "https://github.com/rust-lang/rust/commit/d2f8abf2549304b3b67ac6e837d046ddf02c2cd6"}], "stats": {"total": 155, "additions": 108, "deletions": 47}, "files": [{"sha": "c7c5aabab97ae8002ce57b674d6623068c5090dd", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/722baed173b41007c0d82d72b5ac4f2e375f17da/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/722baed173b41007c0d82d72b5ac4f2e375f17da/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=722baed173b41007c0d82d72b5ac4f2e375f17da", "patch": "@@ -35,6 +35,7 @@ use std::fmt::{self, Write};\n use std::slice;\n use std::str;\n use syntax::feature_gate::UnstableFeatures;\n+use syntax::codemap::Span;\n \n use html::render::derive_id;\n use html::toc::TocBuilder;\n@@ -424,7 +425,7 @@ pub fn render(w: &mut fmt::Formatter,\n     }\n }\n \n-pub fn find_testable_code(doc: &str, tests: &mut ::test::Collector, start_line: usize) {\n+pub fn find_testable_code(doc: &str, tests: &mut ::test::Collector, position: Span) {\n     extern fn block(_ob: *mut hoedown_buffer,\n                     text: *const hoedown_buffer,\n                     lang: *const hoedown_buffer,\n@@ -449,11 +450,12 @@ pub fn find_testable_code(doc: &str, tests: &mut ::test::Collector, start_line:\n             });\n             let text = lines.collect::<Vec<&str>>().join(\"\\n\");\n             let line = tests.get_line() + line;\n+            let filename = tests.get_filename();\n             tests.add_test(text.to_owned(),\n                            block_info.should_panic, block_info.no_run,\n                            block_info.ignore, block_info.test_harness,\n                            block_info.compile_fail, block_info.error_codes,\n-                           line);\n+                           line, filename);\n         }\n     }\n \n@@ -474,7 +476,7 @@ pub fn find_testable_code(doc: &str, tests: &mut ::test::Collector, start_line:\n         }\n     }\n \n-    tests.set_line(start_line);\n+    tests.set_position(position);\n     unsafe {\n         let ob = hoedown_buffer_new(DEF_OUNIT);\n         let renderer = hoedown_html_renderer_new(0, 0);"}, {"sha": "70ef7c597e4d7ba55f3c81a5f46e477f3db2ea35", "filename": "src/librustdoc/markdown.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/722baed173b41007c0d82d72b5ac4f2e375f17da/src%2Flibrustdoc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/722baed173b41007c0d82d72b5ac4f2e375f17da/src%2Flibrustdoc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown.rs?ref=722baed173b41007c0d82d72b5ac4f2e375f17da", "patch": "@@ -18,6 +18,7 @@ use getopts;\n use testing;\n use rustc::session::search_paths::SearchPaths;\n use rustc::session::config::Externs;\n+use syntax::codemap::DUMMY_SP;\n \n use externalfiles::{ExternalHtml, LoadStringError, load_string};\n \n@@ -154,9 +155,8 @@ pub fn test(input: &str, cfgs: Vec<String>, libs: SearchPaths, externs: Externs,\n     let mut opts = TestOptions::default();\n     opts.no_crate_inject = true;\n     let mut collector = Collector::new(input.to_string(), cfgs, libs, externs,\n-                                       true, opts, maybe_sysroot, \"input\".to_string(),\n-                                       None);\n-    find_testable_code(&input_str, &mut collector, 0);\n+                                       true, opts, maybe_sysroot, None);\n+    find_testable_code(&input_str, &mut collector, DUMMY_SP);\n     test_args.insert(0, \"rustdoctest\".to_string());\n     testing::test_main(&test_args, collector.tests);\n     0"}, {"sha": "930cf401e74501b202a0f49b404c07301b34cf7e", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 21, "deletions": 16, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/722baed173b41007c0d82d72b5ac4f2e375f17da/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/722baed173b41007c0d82d72b5ac4f2e375f17da/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=722baed173b41007c0d82d72b5ac4f2e375f17da", "patch": "@@ -37,7 +37,7 @@ use rustc_trans::back::link;\n use syntax::ast;\n use syntax::codemap::CodeMap;\n use syntax::feature_gate::UnstableFeatures;\n-use syntax_pos::{BytePos, DUMMY_SP, Pos};\n+use syntax_pos::{BytePos, DUMMY_SP, Pos, Span};\n use errors;\n use errors::emitter::ColorConfig;\n \n@@ -97,15 +97,13 @@ pub fn run(input: &str,\n         link::find_crate_name(None, &hir_forest.krate().attrs, &input)\n     });\n     let opts = scrape_test_config(hir_forest.krate());\n-    let filename = input_path.to_str().unwrap_or(\"\").to_owned();\n     let mut collector = Collector::new(crate_name,\n                                        cfgs,\n                                        libs,\n                                        externs,\n                                        false,\n                                        opts,\n                                        maybe_sysroot,\n-                                       filename,\n                                        Some(codemap));\n \n     {\n@@ -391,15 +389,14 @@ pub struct Collector {\n     cratename: String,\n     opts: TestOptions,\n     maybe_sysroot: Option<PathBuf>,\n-    filename: String,\n-    start_line: usize,\n+    position: Span,\n     codemap: Option<Rc<CodeMap>>,\n }\n \n impl Collector {\n     pub fn new(cratename: String, cfgs: Vec<String>, libs: SearchPaths, externs: Externs,\n                use_headers: bool, opts: TestOptions, maybe_sysroot: Option<PathBuf>,\n-               filename: String, codemap: Option<Rc<CodeMap>>) -> Collector {\n+               codemap: Option<Rc<CodeMap>>) -> Collector {\n         Collector {\n             tests: Vec::new(),\n             names: Vec::new(),\n@@ -412,17 +409,16 @@ impl Collector {\n             cratename: cratename,\n             opts: opts,\n             maybe_sysroot: maybe_sysroot,\n-            filename: filename,\n-            start_line: 0,\n+            position: DUMMY_SP,\n             codemap: codemap,\n         }\n     }\n \n     pub fn add_test(&mut self, test: String,\n                     should_panic: bool, no_run: bool, should_ignore: bool,\n                     as_test_harness: bool, compile_fail: bool, error_codes: Vec<String>,\n-                    line: usize) {\n-        let name = format!(\"{} - line {}\", self.filename, line);\n+                    line: usize, filename: String) {\n+        let name = format!(\"{} - line {}\", filename, line);\n         self.cnt += 1;\n         let cfgs = self.cfgs.clone();\n         let libs = self.libs.clone();\n@@ -467,16 +463,25 @@ impl Collector {\n     }\n \n     pub fn get_line(&self) -> usize {\n-        if let Some(ref codemap) = self.codemap{\n-            let line = codemap.lookup_char_pos(BytePos(self.start_line as u32)).line;\n+        if let Some(ref codemap) = self.codemap {\n+            let line = self.position.lo.to_usize();\n+            let line = codemap.lookup_char_pos(BytePos(line as u32)).line;\n             if line > 0 { line - 1 } else { line }\n         } else {\n-            self.start_line\n+            0\n         }\n     }\n \n-    pub fn set_line(&mut self, start_line: usize) {\n-        self.start_line = start_line;\n+    pub fn set_position(&mut self, position: Span) {\n+        self.position = position;\n+    }\n+\n+    pub fn get_filename(&self) -> String {\n+        if let Some(ref codemap) = self.codemap {\n+            codemap.span_to_filename(self.position)\n+        } else {\n+            \"<input>\".to_owned()\n+        }\n     }\n \n     pub fn register_header(&mut self, name: &str, level: u32) {\n@@ -520,7 +525,7 @@ impl<'a, 'hir> HirCollector<'a, 'hir> {\n         if let Some(doc) = attrs.doc_value() {\n             self.collector.cnt = 0;\n             markdown::find_testable_code(doc, self.collector,\n-                                         attrs.span.unwrap_or(DUMMY_SP).lo.to_usize());\n+                                         attrs.span.unwrap_or(DUMMY_SP));\n         }\n \n         nested(self);"}, {"sha": "51daa8075262228632600e6a17ce339680ac201f", "filename": "src/test/rustdoc/test_option_check/bar.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/722baed173b41007c0d82d72b5ac4f2e375f17da/src%2Ftest%2Frustdoc%2Ftest_option_check%2Fbar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/722baed173b41007c0d82d72b5ac4f2e375f17da/src%2Ftest%2Frustdoc%2Ftest_option_check%2Fbar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftest_option_check%2Fbar.rs?ref=722baed173b41007c0d82d72b5ac4f2e375f17da", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: --test\n+// check-test-line-numbers-match\n+\n+/// This looks like another awesome test!\n+///\n+/// ```\n+/// println!(\"foo?\");\n+/// ```\n+pub fn foooo() {}"}, {"sha": "a9578c5f434a23e0ecb291cc0d989699cadd7be2", "filename": "src/test/rustdoc/test_option_check/test.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/722baed173b41007c0d82d72b5ac4f2e375f17da/src%2Ftest%2Frustdoc%2Ftest_option_check%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/722baed173b41007c0d82d72b5ac4f2e375f17da/src%2Ftest%2Frustdoc%2Ftest_option_check%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftest_option_check%2Ftest.rs?ref=722baed173b41007c0d82d72b5ac4f2e375f17da", "patch": "@@ -11,6 +11,8 @@\n // compile-flags: --test\n // check-test-line-numbers-match\n \n+pub mod bar;\n+\n /// This is a Foo;\n ///\n /// ```"}, {"sha": "1a3d7a190be366bb1d655a1da9d88fc768252a5f", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 58, "deletions": 25, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/722baed173b41007c0d82d72b5ac4f2e375f17da/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/722baed173b41007c0d82d72b5ac4f2e375f17da/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=722baed173b41007c0d82d72b5ac4f2e375f17da", "patch": "@@ -30,6 +30,7 @@ use std::io::{self, BufReader};\n use std::path::{Path, PathBuf};\n use std::process::{Command, Output, ExitStatus};\n use std::str;\n+use std::collections::HashMap;\n \n use extract_gdb_version;\n \n@@ -1942,17 +1943,28 @@ actual:\\n\\\n         }\n     }\n \n-    fn check_rustdoc_test_option(&self, res: ProcRes) {\n-        let mut file = fs::File::open(&self.testpaths.file)\n+    fn get_lines<P: AsRef<Path>>(&self, path: &P,\n+                                 mut other_files: Option<&mut Vec<String>>) -> Vec<usize> {\n+        let mut file = fs::File::open(path)\n                                 .expect(\"markdown_test_output_check_entry File::open failed\");\n         let mut content = String::new();\n         file.read_to_string(&mut content)\n             .expect(\"markdown_test_output_check_entry read_to_string failed\");\n         let mut ignore = false;\n-        let mut v: Vec<usize> =\n-            content.lines()\n-                   .enumerate()\n-                   .filter_map(|(line_nb, line)| {\n+        content.lines()\n+               .enumerate()\n+               .filter_map(|(line_nb, line)| {\n+                   if (line.trim_left().starts_with(\"pub mod \") ||\n+                       line.trim_left().starts_with(\"mod \")) &&\n+                      line.ends_with(\";\") {\n+                       if let Some(ref mut other_files) = other_files {\n+                           other_files.push(line.rsplit(\"mod \")\n+                                      .next()\n+                                      .unwrap()\n+                                      .replace(\";\", \"\"));\n+                       }\n+                       None\n+                   } else {\n                        let sline = line.split(\"///\").last().unwrap_or(\"\");\n                        let line = sline.trim_left();\n                        if line.starts_with(\"```\") {\n@@ -1966,36 +1978,57 @@ actual:\\n\\\n                        } else {\n                            None\n                        }\n-                   })\n-                   .collect();\n+                   }\n+               })\n+               .collect()\n+    }\n+\n+    fn check_rustdoc_test_option(&self, res: ProcRes) {\n+        let mut other_files = Vec::new();\n+        let mut files: HashMap<String, Vec<usize>> = HashMap::new();\n+        files.insert(self.testpaths.file.to_str().unwrap().to_owned(),\n+                     self.get_lines(&self.testpaths.file, Some(&mut other_files)));\n+        for other_file in other_files {\n+            let mut path = self.testpaths.file.clone();\n+            path.set_file_name(&format!(\"{}.rs\", other_file));\n+            files.insert(path.to_str().unwrap().to_owned(), self.get_lines(&path, None));\n+        }\n \n         let mut tested = 0;\n         for _ in res.stdout.split(\"\\n\")\n                            .filter(|s| s.starts_with(\"test \"))\n                            .inspect(|s| {\n                                let tmp: Vec<&str> = s.split(\" - line \").collect();\n                                if tmp.len() == 2 {\n-                                   tested += 1;\n-                                   let line = tmp[1].split(\" ...\")\n-                                                    .next()\n-                                                    .unwrap_or(\"0\")\n-                                                    .parse()\n-                                                    .unwrap_or(0);\n-                                   if let Ok(pos) = v.binary_search(&line) {\n-                                       v.remove(pos);\n-                                   } else {\n-                                       self.fatal_proc_rec(\n-                                           &format!(\"Not found doc test: \\\"{}\\\" in {:?}\", s, v),\n-                                           &res);\n+                                   let path = tmp[0].rsplit(\"test \").next().unwrap();\n+                                   if let Some(ref mut v) = files.get_mut(path) {\n+                                       tested += 1;\n+                                       let line = tmp[1].split(\" ...\")\n+                                                        .next()\n+                                                        .unwrap_or(\"0\")\n+                                                        .parse()\n+                                                        .unwrap_or(0);\n+                                       if let Ok(pos) = v.binary_search(&line) {\n+                                           v.remove(pos);\n+                                       } else {\n+                                           self.fatal_proc_rec(\n+                                               &format!(\"Not found doc test: \\\"{}\\\" in \\\"{}\\\":{:?}\",\n+                                                        s, path, v),\n+                                               &res);\n+                                       }\n                                    }\n                                }\n                            }) {}\n         if tested == 0 {\n-            self.fatal_proc_rec(\"No test has been found\", &res);\n-        } else if v.len() != 0 {\n-            self.fatal_proc_rec(&format!(\"Not found test at line{} {:?}\",\n-                                         if v.len() > 1 { \"s\" } else { \"\" }, v),\n-                                &res);\n+            self.fatal_proc_rec(&format!(\"No test has been found... {:?}\", files), &res);\n+        } else {\n+            for (entry, v) in &files {\n+                if v.len() != 0 {\n+                    self.fatal_proc_rec(&format!(\"Not found test at line{} \\\"{}\\\":{:?}\",\n+                                                 if v.len() > 1 { \"s\" } else { \"\" }, entry, v),\n+                                        &res);\n+                }\n+            }\n         }\n     }\n "}]}