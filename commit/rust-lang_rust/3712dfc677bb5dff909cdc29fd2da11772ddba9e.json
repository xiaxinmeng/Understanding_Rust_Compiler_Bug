{"sha": "3712dfc677bb5dff909cdc29fd2da11772ddba9e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3MTJkZmM2NzdiYjVkZmY5MDljZGMyOWZkMmRhMTE3NzJkZGJhOWU=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-07-01T07:24:55Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-07-22T19:25:55Z"}, "message": "Partially account for case where used method is from trait", "tree": {"sha": "20d5925c194feb9d45f1a1015ffef1702bf6f9c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/20d5925c194feb9d45f1a1015ffef1702bf6f9c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3712dfc677bb5dff909cdc29fd2da11772ddba9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3712dfc677bb5dff909cdc29fd2da11772ddba9e", "html_url": "https://github.com/rust-lang/rust/commit/3712dfc677bb5dff909cdc29fd2da11772ddba9e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3712dfc677bb5dff909cdc29fd2da11772ddba9e/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f80743712eea6e90c4fd73b596bf45c43d9c9e58", "url": "https://api.github.com/repos/rust-lang/rust/commits/f80743712eea6e90c4fd73b596bf45c43d9c9e58", "html_url": "https://github.com/rust-lang/rust/commit/f80743712eea6e90c4fd73b596bf45c43d9c9e58"}], "stats": {"total": 26, "additions": 21, "deletions": 5}, "files": [{"sha": "18466b00da971f06c39e71e075379f73f4a86a5b", "filename": "src/librustc_infer/infer/error_reporting/nice_region_error/static_impl_trait.rs", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/3712dfc677bb5dff909cdc29fd2da11772ddba9e/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3712dfc677bb5dff909cdc29fd2da11772ddba9e/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs?ref=3712dfc677bb5dff909cdc29fd2da11772ddba9e", "patch": "@@ -340,6 +340,9 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n             _ => return false,\n         };\n \n+        let mut v = TraitObjectVisitor(vec![]);\n+        v.visit_ty(ty);\n+\n         // Get the `Ident` of the method being called and the corresponding `impl` (to point at\n         // `Bar` in `impl Foo for dyn Bar {}` and the definition of the method being called).\n         let (ident, self_ty) = match tcx.hir().get_if_local(instance.def_id()) {\n@@ -359,15 +362,30 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n                         // obligation comes from the `impl`. Find that `impl` so that we can point\n                         // at it in the suggestion.\n                         let trait_did = tcx.hir().local_def_id(parent_id).to_def_id();\n-                        match tcx.hir().trait_impls(trait_did)\n+                        match tcx\n+                            .hir()\n+                            .trait_impls(trait_did)\n                             .iter()\n                             .filter_map(|impl_node| {\n                                 let impl_did = tcx.hir().local_def_id(*impl_node);\n                                 match tcx.hir().get_if_local(impl_did.to_def_id()) {\n                                     Some(Node::Item(Item {\n-                                        kind: ItemKind::Impl { self_ty, of_trait: Some(of_trait), .. },\n+                                        kind: ItemKind::Impl { self_ty, .. },\n                                         ..\n-                                    })) if of_trait.trait_def_id() == Some(trait_did) => Some(self_ty),\n+                                    })) if v.0.iter().all(|did| {\n+                                        // FIXME: we should check `self_ty` against the receiver\n+                                        // type in the `UnifyReceiver` context, but for now, use\n+                                        // this imperfect proxy. This will fail if there are\n+                                        // multiple `impl`s for the same trait like\n+                                        // `impl Foo for Box<dyn Bar>` and `impl Foo for dyn Bar`.\n+                                        // In that case, only the first one will get suggestions.\n+                                        let mut hir_v = HirTraitObjectVisitor(vec![], *did);\n+                                        hir_v.visit_ty(self_ty);\n+                                        !hir_v.0.is_empty()\n+                                    }) =>\n+                                    {\n+                                        Some(self_ty)\n+                                    }\n                                     _ => None,\n                                 }\n                             })\n@@ -384,8 +402,6 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n         };\n \n         // Find the trait object types in the argument, so we point at *only* the trait object.\n-        let mut v = TraitObjectVisitor(vec![]);\n-        v.visit_ty(ty);\n         for found_did in &v.0 {\n             let mut hir_v = HirTraitObjectVisitor(vec![], *found_did);\n             hir_v.visit_ty(self_ty);"}]}