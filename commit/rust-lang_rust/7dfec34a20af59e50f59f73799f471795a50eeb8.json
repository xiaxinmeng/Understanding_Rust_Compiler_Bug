{"sha": "7dfec34a20af59e50f59f73799f471795a50eeb8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkZmVjMzRhMjBhZjU5ZTUwZjU5ZjczNzk5ZjQ3MTc5NWE1MGVlYjg=", "commit": {"author": {"name": "Bastian K\u00f6cher", "email": "git@kchr.de", "date": "2017-12-23T23:15:38Z"}, "committer": {"name": "Bastian K\u00f6cher", "email": "git@kchr.de", "date": "2017-12-26T11:26:39Z"}, "message": "Split `lang_start` in two functions to reduce generated code", "tree": {"sha": "a0f595b8be8c28de02b030ee3a9a46ef0fb7fee5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a0f595b8be8c28de02b030ee3a9a46ef0fb7fee5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7dfec34a20af59e50f59f73799f471795a50eeb8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7dfec34a20af59e50f59f73799f471795a50eeb8", "html_url": "https://github.com/rust-lang/rust/commit/7dfec34a20af59e50f59f73799f471795a50eeb8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7dfec34a20af59e50f59f73799f471795a50eeb8/comments", "author": {"login": "bkchr", "id": 5718007, "node_id": "MDQ6VXNlcjU3MTgwMDc=", "avatar_url": "https://avatars.githubusercontent.com/u/5718007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bkchr", "html_url": "https://github.com/bkchr", "followers_url": "https://api.github.com/users/bkchr/followers", "following_url": "https://api.github.com/users/bkchr/following{/other_user}", "gists_url": "https://api.github.com/users/bkchr/gists{/gist_id}", "starred_url": "https://api.github.com/users/bkchr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bkchr/subscriptions", "organizations_url": "https://api.github.com/users/bkchr/orgs", "repos_url": "https://api.github.com/users/bkchr/repos", "events_url": "https://api.github.com/users/bkchr/events{/privacy}", "received_events_url": "https://api.github.com/users/bkchr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bkchr", "id": 5718007, "node_id": "MDQ6VXNlcjU3MTgwMDc=", "avatar_url": "https://avatars.githubusercontent.com/u/5718007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bkchr", "html_url": "https://github.com/bkchr", "followers_url": "https://api.github.com/users/bkchr/followers", "following_url": "https://api.github.com/users/bkchr/following{/other_user}", "gists_url": "https://api.github.com/users/bkchr/gists{/gist_id}", "starred_url": "https://api.github.com/users/bkchr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bkchr/subscriptions", "organizations_url": "https://api.github.com/users/bkchr/orgs", "repos_url": "https://api.github.com/users/bkchr/repos", "events_url": "https://api.github.com/users/bkchr/events{/privacy}", "received_events_url": "https://api.github.com/users/bkchr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2f22f01a9263870d33a26e988bb13b8f622ce7a", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2f22f01a9263870d33a26e988bb13b8f622ce7a", "html_url": "https://github.com/rust-lang/rust/commit/c2f22f01a9263870d33a26e988bb13b8f622ce7a"}], "stats": {"total": 19, "additions": 14, "deletions": 5}, "files": [{"sha": "27c20be7a9a32da5a0d6737f19a769f2eb634107", "filename": "src/libstd/rt.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7dfec34a20af59e50f59f73799f471795a50eeb8/src%2Flibstd%2Frt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dfec34a20af59e50f59f73799f471795a50eeb8/src%2Flibstd%2Frt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt.rs?ref=7dfec34a20af59e50f59f73799f471795a50eeb8", "patch": "@@ -26,10 +26,11 @@\n // Reexport some of our utilities which are expected by other crates.\n pub use panicking::{begin_panic, begin_panic_fmt, update_panic_count};\n \n+// To reduce the generated code of the new `lang_start`, this function is doing\n+// the real work.\n #[cfg(not(any(test, stage0)))]\n-#[lang = \"start\"]\n-fn lang_start<T: ::termination::Termination + 'static>\n-    (main: fn() -> T, argc: isize, argv: *const *const u8) -> !\n+fn lang_start_real<F>(main: F, argc: isize, argv: *const *const u8) -> !\n+    where F: FnOnce() -> i32 + Send + ::panic::UnwindSafe + 'static\n {\n     use panic;\n     use sys;\n@@ -59,16 +60,24 @@ fn lang_start<T: ::termination::Termination + 'static>\n         // Let's run some code!\n         #[cfg(feature = \"backtrace\")]\n         let exit_code = panic::catch_unwind(|| {\n-            ::sys_common::backtrace::__rust_begin_short_backtrace(move || main().report())\n+            ::sys_common::backtrace::__rust_begin_short_backtrace(move || main())\n         });\n         #[cfg(not(feature = \"backtrace\"))]\n-        let exit_code = panic::catch_unwind(move || main().report());\n+        let exit_code = panic::catch_unwind(move || main());\n \n         sys_common::cleanup();\n         exit_code.unwrap_or(101)\n     });\n }\n \n+#[cfg(not(any(test, stage0)))]\n+#[lang = \"start\"]\n+fn lang_start<T: ::termination::Termination + 'static>\n+    (main: fn() -> T, argc: isize, argv: *const *const u8) -> !\n+{\n+    lang_start_real(move || main().report(), argc, argv)\n+}\n+\n #[cfg(all(not(test), stage0))]\n #[lang = \"start\"]\n fn lang_start(main: fn(), argc: isize, argv: *const *const u8) -> isize {"}]}