{"sha": "69d818333755d4b836a28a4498f2caad71c2d014", "node_id": "C_kwDOAAsO6NoAKDY5ZDgxODMzMzc1NWQ0YjgzNmEyOGE0NDk4ZjJjYWFkNzFjMmQwMTQ", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-03-29T22:17:41Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-04-10T11:36:06Z"}, "message": "Store LocalDefId in is_late_bound_map.\n\nThis allows to avoid looking at HIR from borrowck.", "tree": {"sha": "14e247f2edb8bb6c657e18d5d20b92610a360c0f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14e247f2edb8bb6c657e18d5d20b92610a360c0f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69d818333755d4b836a28a4498f2caad71c2d014", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69d818333755d4b836a28a4498f2caad71c2d014", "html_url": "https://github.com/rust-lang/rust/commit/69d818333755d4b836a28a4498f2caad71c2d014", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69d818333755d4b836a28a4498f2caad71c2d014/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db03a2deb090d5c24f15ef30cf4e5ccb13690b9d", "url": "https://api.github.com/repos/rust-lang/rust/commits/db03a2deb090d5c24f15ef30cf4e5ccb13690b9d", "html_url": "https://github.com/rust-lang/rust/commit/db03a2deb090d5c24f15ef30cf4e5ccb13690b9d"}], "stats": {"total": 70, "additions": 42, "deletions": 28}, "files": [{"sha": "e26adba0d3002eeb9528577f805c876e7f610bd4", "filename": "compiler/rustc_borrowck/src/universal_regions.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/69d818333755d4b836a28a4498f2caad71c2d014/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69d818333755d4b836a28a4498f2caad71c2d014/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs?ref=69d818333755d4b836a28a4498f2caad71c2d014", "patch": "@@ -828,13 +828,11 @@ fn for_each_late_bound_region_defined_on<'tcx>(\n     mut f: impl FnMut(ty::Region<'tcx>),\n ) {\n     if let Some((owner, late_bounds)) = tcx.is_late_bound_map(fn_def_id.expect_local()) {\n-        for &late_bound in late_bounds.iter() {\n-            let region_def_id =\n-                tcx.hir().local_def_id(HirId { owner, local_id: late_bound }).to_def_id();\n-            let name = tcx.item_name(region_def_id);\n+        for &region_def_id in late_bounds.iter() {\n+            let name = tcx.item_name(region_def_id.to_def_id());\n             let liberated_region = tcx.mk_region(ty::ReFree(ty::FreeRegion {\n                 scope: owner.to_def_id(),\n-                bound_region: ty::BoundRegionKind::BrNamed(region_def_id, name),\n+                bound_region: ty::BoundRegionKind::BrNamed(region_def_id.to_def_id(), name),\n             }));\n             f(liberated_region);\n         }"}, {"sha": "70586cefaeee1fea4c5158b2794c011aa67a61de", "filename": "compiler/rustc_middle/src/middle/resolve_lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69d818333755d4b836a28a4498f2caad71c2d014/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69d818333755d4b836a28a4498f2caad71c2d014/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fresolve_lifetime.rs?ref=69d818333755d4b836a28a4498f2caad71c2d014", "patch": "@@ -64,7 +64,7 @@ pub struct ResolveLifetimes {\n     /// Set of lifetime def ids that are late-bound; a region can\n     /// be late-bound if (a) it does NOT appear in a where-clause and\n     /// (b) it DOES appear in the arguments.\n-    pub late_bound: FxHashMap<LocalDefId, FxHashSet<ItemLocalId>>,\n+    pub late_bound: FxHashMap<LocalDefId, FxHashSet<LocalDefId>>,\n \n     pub late_bound_vars: FxHashMap<LocalDefId, FxHashMap<ItemLocalId, Vec<ty::BoundVariableKind>>>,\n }"}, {"sha": "f38ade1076eac3481682cd48e189df9577d68eed", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/69d818333755d4b836a28a4498f2caad71c2d014/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69d818333755d4b836a28a4498f2caad71c2d014/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=69d818333755d4b836a28a4498f2caad71c2d014", "patch": "@@ -1502,8 +1502,7 @@ rustc_queries! {\n         Option<&'tcx FxHashMap<ItemLocalId, Region>> {\n         desc { \"looking up a named region\" }\n     }\n-    query is_late_bound_map(_: LocalDefId) ->\n-        Option<(LocalDefId, &'tcx FxHashSet<ItemLocalId>)> {\n+    query is_late_bound_map(_: LocalDefId) -> Option<(LocalDefId, &'tcx FxHashSet<LocalDefId>)> {\n         desc { \"testing if a region is late bound\" }\n     }\n     /// For a given item (like a struct), gets the default lifetimes to be used"}, {"sha": "5244aaaec0a3cbff9912c151daafa37a67f08504", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/69d818333755d4b836a28a4498f2caad71c2d014/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69d818333755d4b836a28a4498f2caad71c2d014/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=69d818333755d4b836a28a4498f2caad71c2d014", "patch": "@@ -2772,11 +2772,6 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.named_region_map(id.owner).and_then(|map| map.get(&id.local_id).cloned())\n     }\n \n-    pub fn is_late_bound(self, id: HirId) -> bool {\n-        self.is_late_bound_map(id.owner)\n-            .map_or(false, |(owner, set)| owner == id.owner && set.contains(&id.local_id))\n-    }\n-\n     pub fn late_bound_vars(self, id: HirId) -> &'tcx List<ty::BoundVariableKind> {\n         self.mk_bound_variable_kinds(\n             self.late_bound_vars_map(id.owner)"}, {"sha": "2bf01146fae027709d33c1af365940c4859eeb0d", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/69d818333755d4b836a28a4498f2caad71c2d014/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69d818333755d4b836a28a4498f2caad71c2d014/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=69d818333755d4b836a28a4498f2caad71c2d014", "patch": "@@ -427,15 +427,15 @@ fn resolve_lifetimes_trait_definition(\n     tcx: TyCtxt<'_>,\n     local_def_id: LocalDefId,\n ) -> ResolveLifetimes {\n-    convert_named_region_map(do_resolve(tcx, local_def_id, true, false))\n+    convert_named_region_map(tcx, do_resolve(tcx, local_def_id, true, false))\n }\n \n /// Computes the `ResolveLifetimes` map that contains data for an entire `Item`.\n /// You should not read the result of this query directly, but rather use\n /// `named_region_map`, `is_late_bound_map`, etc.\n #[tracing::instrument(level = \"debug\", skip(tcx))]\n fn resolve_lifetimes(tcx: TyCtxt<'_>, local_def_id: LocalDefId) -> ResolveLifetimes {\n-    convert_named_region_map(do_resolve(tcx, local_def_id, false, false))\n+    convert_named_region_map(tcx, do_resolve(tcx, local_def_id, false, false))\n }\n \n fn do_resolve(\n@@ -468,7 +468,7 @@ fn do_resolve(\n     named_region_map\n }\n \n-fn convert_named_region_map(named_region_map: NamedRegionMap) -> ResolveLifetimes {\n+fn convert_named_region_map(tcx: TyCtxt<'_>, named_region_map: NamedRegionMap) -> ResolveLifetimes {\n     let mut rl = ResolveLifetimes::default();\n \n     for (hir_id, v) in named_region_map.defs {\n@@ -477,7 +477,8 @@ fn convert_named_region_map(named_region_map: NamedRegionMap) -> ResolveLifetime\n     }\n     for hir_id in named_region_map.late_bound {\n         let map = rl.late_bound.entry(hir_id.owner).or_default();\n-        map.insert(hir_id.local_id);\n+        let def_id = tcx.hir().local_def_id(hir_id);\n+        map.insert(def_id);\n     }\n     for (hir_id, v) in named_region_map.late_bound_vars {\n         let map = rl.late_bound_vars.entry(hir_id.owner).or_default();\n@@ -537,7 +538,7 @@ fn item_for(tcx: TyCtxt<'_>, local_def_id: LocalDefId) -> LocalDefId {\n fn is_late_bound_map<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     def_id: LocalDefId,\n-) -> Option<(LocalDefId, &'tcx FxHashSet<ItemLocalId>)> {\n+) -> Option<(LocalDefId, &'tcx FxHashSet<LocalDefId>)> {\n     match tcx.def_kind(def_id) {\n         DefKind::AnonConst | DefKind::InlineConst => {\n             let mut def_id = tcx\n@@ -774,8 +775,10 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                                 });\n                             }\n                             for (&owner, late_bound) in resolved_lifetimes.late_bound.iter() {\n-                                late_bound.iter().for_each(|&local_id| {\n-                                    self.map.late_bound.insert(hir::HirId { owner, local_id });\n+                                late_bound.iter().for_each(|&id| {\n+                                    let hir_id = self.tcx.local_def_id_to_hir_id(id);\n+                                    debug_assert_eq!(owner, hir_id.owner);\n+                                    self.map.late_bound.insert(hir_id);\n                                 });\n                             }\n                             for (&owner, late_bound_vars) in"}, {"sha": "153ab8d95fd4bdcec34b3046a46b9e596058f9ad", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 27, "deletions": 8, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/69d818333755d4b836a28a4498f2caad71c2d014/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69d818333755d4b836a28a4498f2caad71c2d014/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=69d818333755d4b836a28a4498f2caad71c2d014", "patch": "@@ -1388,6 +1388,7 @@ fn has_late_bound_regions<'tcx>(tcx: TyCtxt<'tcx>, node: Node<'tcx>) -> Option<S\n \n     fn has_late_bound_regions<'tcx>(\n         tcx: TyCtxt<'tcx>,\n+        def_id: LocalDefId,\n         generics: &'tcx hir::Generics<'tcx>,\n         decl: &'tcx hir::FnDecl<'tcx>,\n     ) -> Option<Span> {\n@@ -1396,9 +1397,14 @@ fn has_late_bound_regions<'tcx>(tcx: TyCtxt<'tcx>, node: Node<'tcx>) -> Option<S\n             outer_index: ty::INNERMOST,\n             has_late_bound_regions: None,\n         };\n+        let late_bound_map = tcx.is_late_bound_map(def_id);\n+        let is_late_bound = |id| {\n+            let id = tcx.hir().local_def_id(id);\n+            late_bound_map.map_or(false, |(_, set)| set.contains(&id))\n+        };\n         for param in generics.params {\n             if let GenericParamKind::Lifetime { .. } = param.kind {\n-                if tcx.is_late_bound(param.hir_id) {\n+                if is_late_bound(param.hir_id) {\n                     return Some(param.span);\n                 }\n             }\n@@ -1410,25 +1416,25 @@ fn has_late_bound_regions<'tcx>(tcx: TyCtxt<'tcx>, node: Node<'tcx>) -> Option<S\n     match node {\n         Node::TraitItem(item) => match item.kind {\n             hir::TraitItemKind::Fn(ref sig, _) => {\n-                has_late_bound_regions(tcx, &item.generics, sig.decl)\n+                has_late_bound_regions(tcx, item.def_id, &item.generics, sig.decl)\n             }\n             _ => None,\n         },\n         Node::ImplItem(item) => match item.kind {\n             hir::ImplItemKind::Fn(ref sig, _) => {\n-                has_late_bound_regions(tcx, &item.generics, sig.decl)\n+                has_late_bound_regions(tcx, item.def_id, &item.generics, sig.decl)\n             }\n             _ => None,\n         },\n         Node::ForeignItem(item) => match item.kind {\n             hir::ForeignItemKind::Fn(fn_decl, _, ref generics) => {\n-                has_late_bound_regions(tcx, generics, fn_decl)\n+                has_late_bound_regions(tcx, item.def_id, generics, fn_decl)\n             }\n             _ => None,\n         },\n         Node::Item(item) => match item.kind {\n             hir::ItemKind::Fn(ref sig, .., ref generics, _) => {\n-                has_late_bound_regions(tcx, generics, sig.decl)\n+                has_late_bound_regions(tcx, item.def_id, generics, sig.decl)\n             }\n             _ => None,\n         },\n@@ -1677,7 +1683,7 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n         params.push(opt_self);\n     }\n \n-    let early_lifetimes = early_bound_lifetimes_from_generics(tcx, ast_generics);\n+    let early_lifetimes = early_bound_lifetimes_from_generics(tcx, hir_id.owner, ast_generics);\n     params.extend(early_lifetimes.enumerate().map(|(i, param)| ty::GenericParamDef {\n         name: param.name.ident().name,\n         index: own_start + i as u32,\n@@ -2034,10 +2040,23 @@ fn impl_polarity(tcx: TyCtxt<'_>, def_id: DefId) -> ty::ImplPolarity {\n /// `resolve_lifetime::early_bound_lifetimes`.\n fn early_bound_lifetimes_from_generics<'a, 'tcx: 'a>(\n     tcx: TyCtxt<'tcx>,\n+    def_id: LocalDefId,\n     generics: &'a hir::Generics<'a>,\n ) -> impl Iterator<Item = &'a hir::GenericParam<'a>> + Captures<'tcx> {\n+    let late_bound_map = if generics.params.is_empty() {\n+        // This function may be called on `def_id == CRATE_DEF_ID`,\n+        // which makes `is_late_bound_map` ICE.  Don't even try if there\n+        // is no generic parameter.\n+        None\n+    } else {\n+        tcx.is_late_bound_map(def_id)\n+    };\n+    let is_late_bound = move |hir_id| {\n+        let id = tcx.hir().local_def_id(hir_id);\n+        late_bound_map.map_or(false, |(_, set)| set.contains(&id))\n+    };\n     generics.params.iter().filter(move |param| match param.kind {\n-        GenericParamKind::Lifetime { .. } => !tcx.is_late_bound(param.hir_id),\n+        GenericParamKind::Lifetime { .. } => !is_late_bound(param.hir_id),\n         _ => false,\n     })\n }\n@@ -2221,7 +2240,7 @@ fn gather_explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericP\n     // well. In the case of parameters declared on a fn or method, we\n     // have to be careful to only iterate over early-bound regions.\n     let mut index = parent_count + has_own_self as u32;\n-    for param in early_bound_lifetimes_from_generics(tcx, ast_generics) {\n+    for param in early_bound_lifetimes_from_generics(tcx, hir_id.owner, ast_generics) {\n         let region = tcx.mk_region(ty::ReEarlyBound(ty::EarlyBoundRegion {\n             def_id: tcx.hir().local_def_id(param.hir_id).to_def_id(),\n             index,"}]}