{"sha": "1ebfe11730191e914dcf20297cdfdac5b7c297fc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlYmZlMTE3MzAxOTFlOTE0ZGNmMjAyOTdjZGZkYWM1YjdjMjk3ZmM=", "commit": {"author": {"name": "vsrs", "email": "vit@conrlab.com", "date": "2021-04-22T13:09:46Z"}, "committer": {"name": "vsrs", "email": "vit@conrlab.com", "date": "2021-04-22T13:09:46Z"}, "message": "Add special `auto` value for `debug.sourceFileMap`", "tree": {"sha": "ae6caf9e8fd50e3eac826d0a3f0698c6e047544f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae6caf9e8fd50e3eac826d0a3f0698c6e047544f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ebfe11730191e914dcf20297cdfdac5b7c297fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ebfe11730191e914dcf20297cdfdac5b7c297fc", "html_url": "https://github.com/rust-lang/rust/commit/1ebfe11730191e914dcf20297cdfdac5b7c297fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ebfe11730191e914dcf20297cdfdac5b7c297fc/comments", "author": {"login": "vsrs", "id": 62505555, "node_id": "MDQ6VXNlcjYyNTA1NTU1", "avatar_url": "https://avatars.githubusercontent.com/u/62505555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vsrs", "html_url": "https://github.com/vsrs", "followers_url": "https://api.github.com/users/vsrs/followers", "following_url": "https://api.github.com/users/vsrs/following{/other_user}", "gists_url": "https://api.github.com/users/vsrs/gists{/gist_id}", "starred_url": "https://api.github.com/users/vsrs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vsrs/subscriptions", "organizations_url": "https://api.github.com/users/vsrs/orgs", "repos_url": "https://api.github.com/users/vsrs/repos", "events_url": "https://api.github.com/users/vsrs/events{/privacy}", "received_events_url": "https://api.github.com/users/vsrs/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vsrs", "id": 62505555, "node_id": "MDQ6VXNlcjYyNTA1NTU1", "avatar_url": "https://avatars.githubusercontent.com/u/62505555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vsrs", "html_url": "https://github.com/vsrs", "followers_url": "https://api.github.com/users/vsrs/followers", "following_url": "https://api.github.com/users/vsrs/following{/other_user}", "gists_url": "https://api.github.com/users/vsrs/gists{/gist_id}", "starred_url": "https://api.github.com/users/vsrs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vsrs/subscriptions", "organizations_url": "https://api.github.com/users/vsrs/orgs", "repos_url": "https://api.github.com/users/vsrs/repos", "events_url": "https://api.github.com/users/vsrs/events{/privacy}", "received_events_url": "https://api.github.com/users/vsrs/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f781e782c7e16aa323672620753ec31526d2b90", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f781e782c7e16aa323672620753ec31526d2b90", "html_url": "https://github.com/rust-lang/rust/commit/8f781e782c7e16aa323672620753ec31526d2b90"}], "stats": {"total": 65, "additions": 38, "deletions": 27}, "files": [{"sha": "5437a0648698bb2adb21a4c6ddadf5a3fd91637b", "filename": "editors/code/package.json", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1ebfe11730191e914dcf20297cdfdac5b7c297fc/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/1ebfe11730191e914dcf20297cdfdac5b7c297fc/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=1ebfe11730191e914dcf20297cdfdac5b7c297fc", "patch": "@@ -353,8 +353,9 @@\n                         \"Use [MS C++ tools](https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools)\"\n                     ]\n                 },\n-                \"rust-analyzer.debug.sourceFileMap\": {\n-                    \"type\": \"object\",\n+                \"rust-analyzer.debug.sourceFileMap\": {                    \n+                    \"type\": [\"object\", \"string\"],\n+                    \"const\": \"auto\",\n                     \"description\": \"Optional source file mappings passed to the debug engine.\",\n                     \"default\": {\n                         \"/rustc/<id>\": \"${env:USERPROFILE}/.rustup/toolchains/<toolchain-id>/lib/rustlib/src/rust\""}, {"sha": "603ff930d1e6e0fe7dc8ceb996376334130dd829", "filename": "editors/code/src/config.ts", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1ebfe11730191e914dcf20297cdfdac5b7c297fc/editors%2Fcode%2Fsrc%2Fconfig.ts", "raw_url": "https://github.com/rust-lang/rust/raw/1ebfe11730191e914dcf20297cdfdac5b7c297fc/editors%2Fcode%2Fsrc%2Fconfig.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fconfig.ts?ref=1ebfe11730191e914dcf20297cdfdac5b7c297fc", "patch": "@@ -134,8 +134,12 @@ export class Config {\n     }\n \n     get debug() {\n-        // \"/rustc/<id>\" used by suggestions only.\n-        const { [\"/rustc/<id>\"]: _, ...sourceFileMap } = this.get<Record<string, string>>(\"debug.sourceFileMap\");\n+        let sourceFileMap = this.get<Record<string, string> | \"auto\">(\"debug.sourceFileMap\");\n+        if (sourceFileMap !== \"auto\") {\n+            // \"/rustc/<id>\" used by suggestions only.\n+            const { [\"/rustc/<id>\"]: _, ...trimmed } = this.get<Record<string, string>>(\"debug.sourceFileMap\");\n+            sourceFileMap = trimmed;\n+        }\n \n         return {\n             engine: this.get<string>(\"debug.engine\"),"}, {"sha": "8c6969dc670e9f4b4a1c573b7c72cba32c6123db", "filename": "editors/code/src/debug.ts", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1ebfe11730191e914dcf20297cdfdac5b7c297fc/editors%2Fcode%2Fsrc%2Fdebug.ts", "raw_url": "https://github.com/rust-lang/rust/raw/1ebfe11730191e914dcf20297cdfdac5b7c297fc/editors%2Fcode%2Fsrc%2Fdebug.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fdebug.ts?ref=1ebfe11730191e914dcf20297cdfdac5b7c297fc", "patch": "@@ -3,7 +3,7 @@ import * as vscode from 'vscode';\n import * as path from 'path';\n import * as ra from './lsp_ext';\n \n-import { Cargo, sysrootForDir as getSysroot } from './toolchain';\n+import { Cargo, getSysroot } from './toolchain';\n import { Ctx } from \"./ctx\";\n import { prepareEnv } from \"./run\";\n \n@@ -105,11 +105,11 @@ async function getDebugConfiguration(ctx: Ctx, runnable: ra.Runnable): Promise<v\n     const executable = await getDebugExecutable(runnable);\n     const env = prepareEnv(runnable, ctx.config.runnableEnv);\n     let sourceFileMap = debugOptions.sourceFileMap;\n-    if ( !sourceFileMap || Object.keys(sourceFileMap).length === 0 ) {\n+    if (sourceFileMap === \"auto\") {\n         // let's try to use the default toolchain\n         const sysroot = await getSysroot(wsFolder);\n-        const rustlib_src = path.normalize(sysroot + \"/lib/rustlib/src/rust\");\n-        sourceFileMap = { \"/rustc/*\": rustlib_src };\n+        const rustlib = path.normalize(sysroot + \"/lib/rustlib/src/rust\");\n+        sourceFileMap = { \"/rustc/*\": rustlib };\n     }\n \n     const debugConfig = knownEngines[debugEngine.id](runnable, simplifyPath(executable), env, sourceFileMap);"}, {"sha": "5725bcafe2f895b73a164902c990e1751535b442", "filename": "editors/code/src/toolchain.ts", "status": "modified", "additions": 5, "deletions": 18, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1ebfe11730191e914dcf20297cdfdac5b7c297fc/editors%2Fcode%2Fsrc%2Ftoolchain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/1ebfe11730191e914dcf20297cdfdac5b7c297fc/editors%2Fcode%2Fsrc%2Ftoolchain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Ftoolchain.ts?ref=1ebfe11730191e914dcf20297cdfdac5b7c297fc", "patch": "@@ -4,7 +4,7 @@ import * as path from 'path';\n import * as fs from 'fs';\n import * as readline from 'readline';\n import { OutputChannel } from 'vscode';\n-import { log, memoize } from './util';\n+import { execute, log, memoize } from './util';\n \n interface CompilationArtifact {\n     fileName: string;\n@@ -122,24 +122,11 @@ export class Cargo {\n }\n \n /** Mirrors `project_model::sysroot::discover_sysroot_dir()` implementation*/\n-export function sysrootForDir(dir: string): Promise<string> {\n-    const rustc_path = getPathForExecutable(\"rustc\");\n-\n-    return new Promise((resolve, reject) => {\n-        cp.exec(`${rustc_path} --print sysroot`, { cwd: dir }, (err, stdout, stderr) => {\n-            if (err) {\n-                reject(err);\n-                return;\n-            }\n-\n-            if (stderr) {\n-                reject(new Error(stderr));\n-                return;\n-            }\n+export function getSysroot(dir: string): Promise<string> {\n+    const rustcPath = getPathForExecutable(\"rustc\");\n \n-            resolve(stdout.trimEnd());\n-        });\n-    });\n+    // do not memoize the result because the toolchain may change between runs\n+    return execute(`${rustcPath} --print sysroot`, { cwd: dir });\n }\n \n /** Mirrors `toolchain::cargo()` implementation */"}, {"sha": "fc5c9e94e5e49bc40730a858f31e3c0abea89b66", "filename": "editors/code/src/util.ts", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1ebfe11730191e914dcf20297cdfdac5b7c297fc/editors%2Fcode%2Fsrc%2Futil.ts", "raw_url": "https://github.com/rust-lang/rust/raw/1ebfe11730191e914dcf20297cdfdac5b7c297fc/editors%2Fcode%2Fsrc%2Futil.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Futil.ts?ref=1ebfe11730191e914dcf20297cdfdac5b7c297fc", "patch": "@@ -1,7 +1,7 @@\n import * as lc from \"vscode-languageclient/node\";\n import * as vscode from \"vscode\";\n import { strict as nativeAssert } from \"assert\";\n-import { spawnSync } from \"child_process\";\n+import { exec, ExecOptions, spawnSync } from \"child_process\";\n import { inspect } from \"util\";\n \n export function assert(condition: boolean, explanation: string): asserts condition {\n@@ -141,3 +141,22 @@ export function memoize<Ret, TThis, Param extends string>(func: (this: TThis, ar\n         return result;\n     };\n }\n+\n+/** Awaitable wrapper around `child_process.exec` */\n+export function execute(command: string, options: ExecOptions): Promise<string> {\n+    return new Promise((resolve, reject) => {\n+        exec(command, options, (err, stdout, stderr) => {\n+            if (err) {\n+                reject(err);\n+                return;\n+            }\n+\n+            if (stderr) {\n+                reject(new Error(stderr));\n+                return;\n+            }\n+\n+            resolve(stdout.trimEnd());\n+        });\n+    });\n+}\n\\ No newline at end of file"}]}