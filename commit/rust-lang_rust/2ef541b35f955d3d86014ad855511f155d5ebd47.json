{"sha": "2ef541b35f955d3d86014ad855511f155d5ebd47", "node_id": "C_kwDOAAsO6NoAKDJlZjU0MWIzNWY5NTVkM2Q4NjAxNGFkODU1NTExZjE1NWQ1ZWJkNDc", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2022-03-20T23:08:12Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2022-03-21T15:46:01Z"}, "message": "Cleanups", "tree": {"sha": "abe6af1d64161df95a3943fa929898db0d949b2d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/abe6af1d64161df95a3943fa929898db0d949b2d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ef541b35f955d3d86014ad855511f155d5ebd47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ef541b35f955d3d86014ad855511f155d5ebd47", "html_url": "https://github.com/rust-lang/rust/commit/2ef541b35f955d3d86014ad855511f155d5ebd47", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ef541b35f955d3d86014ad855511f155d5ebd47/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b632d706c76a29ccadff401549b8256c827c2278", "url": "https://api.github.com/repos/rust-lang/rust/commits/b632d706c76a29ccadff401549b8256c827c2278", "html_url": "https://github.com/rust-lang/rust/commit/b632d706c76a29ccadff401549b8256c827c2278"}], "stats": {"total": 84, "additions": 25, "deletions": 59}, "files": [{"sha": "2246e7b486a0d89a28ca2c1910f26deb5a8d7a50", "filename": "crates/hir/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ef541b35f955d3d86014ad855511f155d5ebd47/crates%2Fhir%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ef541b35f955d3d86014ad855511f155d5ebd47/crates%2Fhir%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fdiagnostics.rs?ref=2ef541b35f955d3d86014ad855511f155d5ebd47", "patch": "@@ -5,7 +5,7 @@\n //! be expressed in terms of hir types themselves.\n use cfg::{CfgExpr, CfgOptions};\n use either::Either;\n-use hir_def::{path::ModPath, type_ref::Mutability};\n+use hir_def::path::ModPath;\n use hir_expand::{name::Name, HirFileId, InFile};\n use syntax::{ast, AstPtr, SyntaxNodePtr, TextRange};\n "}, {"sha": "ba7922ef3d72098a10ef0a2cd269bfd41fb35002", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2ef541b35f955d3d86014ad855511f155d5ebd47/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ef541b35f955d3d86014ad855511f155d5ebd47/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=2ef541b35f955d3d86014ad855511f155d5ebd47", "patch": "@@ -58,7 +58,6 @@ use hir_ty::{\n     consteval::{\n         eval_const, unknown_const_as_generic, ComputedExpr, ConstEvalCtx, ConstEvalError, ConstExt,\n     },\n-    could_unify,\n     diagnostics::BodyValidationDiagnostic,\n     method_resolution::{self, TyFingerprint},\n     primitive::UintTy,\n@@ -1014,9 +1013,7 @@ impl Adt {\n                 let r = it.next().unwrap_or_else(|| TyKind::Error.intern(Interner));\n                 match x {\n                     ParamKind::Type => GenericArgData::Ty(r).intern(Interner),\n-                    ParamKind::Const(ty) => {\n-                        unknown_const_as_generic(ty.clone())\n-                    }\n+                    ParamKind::Const(ty) => unknown_const_as_generic(ty.clone()),\n                 }\n             })\n             .build();\n@@ -1329,7 +1326,6 @@ impl DefWithBody {\n                         Err(SyntheticSyntax) => (),\n                     }\n                 }\n-                _ => {} // TODO fixme\n             }\n         }\n \n@@ -2644,11 +2640,14 @@ impl Type {\n     }\n \n     pub fn reference(inner: &Type, m: Mutability) -> Type {\n-        inner.derived(TyKind::Ref(\n-            if m.is_mut() { hir_ty::Mutability::Mut } else { hir_ty::Mutability::Not },\n-            hir_ty::static_lifetime(),\n-            inner.ty.clone(),\n-        ).intern(Interner))\n+        inner.derived(\n+            TyKind::Ref(\n+                if m.is_mut() { hir_ty::Mutability::Mut } else { hir_ty::Mutability::Not },\n+                hir_ty::static_lifetime(),\n+                inner.ty.clone(),\n+            )\n+            .intern(Interner),\n+        )\n     }\n \n     fn new(db: &dyn HirDatabase, krate: CrateId, lexical_env: impl HasResolver, ty: Ty) -> Type {"}, {"sha": "71eb7e3995799e8073fc2f23c1ba32eec2d4ad49", "filename": "crates/hir_ty/src/diagnostics/expr.rs", "status": "modified", "additions": 2, "deletions": 32, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/2ef541b35f955d3d86014ad855511f155d5ebd47/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ef541b35f955d3d86014ad855511f155d5ebd47/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs?ref=2ef541b35f955d3d86014ad855511f155d5ebd47", "patch": "@@ -4,10 +4,7 @@\n \n use std::sync::Arc;\n \n-use hir_def::{\n-    expr::Statement, path::path, resolver::HasResolver, type_ref::Mutability, AssocItemId,\n-    DefWithBodyId, HasModule,\n-};\n+use hir_def::{path::path, resolver::HasResolver, AssocItemId, DefWithBodyId, HasModule};\n use hir_expand::name;\n use itertools::Either;\n use rustc_hash::FxHashSet;\n@@ -20,7 +17,7 @@ use crate::{\n         deconstruct_pat::DeconstructedPat,\n         usefulness::{compute_match_usefulness, MatchCheckCtx},\n     },\n-    AdtId, InferenceResult, Interner, Ty, TyExt, TyKind,\n+    InferenceResult, Interner, TyExt,\n };\n \n pub(crate) use hir_def::{\n@@ -428,30 +425,3 @@ fn types_of_subpatterns_do_match(pat: PatId, body: &Body, infer: &InferenceResul\n     walk(pat, body, infer, &mut has_type_mismatches);\n     !has_type_mismatches\n }\n-\n-fn check_missing_refs(\n-    infer: &InferenceResult,\n-    arg: ExprId,\n-    param: &Ty,\n-) -> Option<(ExprId, Mutability)> {\n-    let arg_ty = infer.type_of_expr.get(arg)?;\n-\n-    let reference_one = arg_ty.as_reference();\n-    let reference_two = param.as_reference();\n-\n-    match (reference_one, reference_two) {\n-        (None, Some((referenced_ty, _, mutability))) if referenced_ty == arg_ty => {\n-            Some((arg, Mutability::from_mutable(matches!(mutability, chalk_ir::Mutability::Mut))))\n-        }\n-        (None, Some((referenced_ty, _, mutability))) => match referenced_ty.kind(Interner) {\n-            TyKind::Slice(subst) if matches!(arg_ty.kind(Interner), TyKind::Array(arr_subst, _) if arr_subst == subst) => {\n-                Some((\n-                    arg,\n-                    Mutability::from_mutable(matches!(mutability, chalk_ir::Mutability::Mut)),\n-                ))\n-            }\n-            _ => None,\n-        },\n-        _ => None,\n-    }\n-}"}, {"sha": "c85112b0dbec85cd8ba6750e8be7dda095299eaa", "filename": "crates/hir_ty/src/infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ef541b35f955d3d86014ad855511f155d5ebd47/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ef541b35f955d3d86014ad855511f155d5ebd47/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer.rs?ref=2ef541b35f955d3d86014ad855511f155d5ebd47", "patch": "@@ -43,9 +43,9 @@ use crate::{\n // This lint has a false positive here. See the link below for details.\n //\n // https://github.com/rust-lang/rust/issues/57411\n+pub use coerce::could_coerce;\n #[allow(unreachable_pub)]\n pub use unify::could_unify;\n-pub use coerce::could_coerce;\n \n pub(crate) mod unify;\n mod path;"}, {"sha": "f54440bf5b372e00b8422ae4069a47d0de2f7c5f", "filename": "crates/hir_ty/src/infer/coerce.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2ef541b35f955d3d86014ad855511f155d5ebd47/crates%2Fhir_ty%2Fsrc%2Finfer%2Fcoerce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ef541b35f955d3d86014ad855511f155d5ebd47/crates%2Fhir_ty%2Fsrc%2Finfer%2Fcoerce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fcoerce.rs?ref=2ef541b35f955d3d86014ad855511f155d5ebd47", "patch": "@@ -7,19 +7,20 @@\n \n use std::{iter, sync::Arc};\n \n-use chalk_ir::{cast::Cast, Goal, Mutability, TyVariableKind, BoundVar};\n+use chalk_ir::{cast::Cast, BoundVar, Goal, Mutability, TyVariableKind};\n use hir_def::{expr::ExprId, lang_item::LangItemTarget};\n use stdx::always;\n use syntax::SmolStr;\n \n use crate::{\n     autoderef::{Autoderef, AutoderefKind},\n+    db::HirDatabase,\n     infer::{\n-        Adjust, Adjustment, AutoBorrow, InferOk, InferResult, InferenceContext, OverloadedDeref,\n-        PointerCast, TypeError, TypeMismatch,\n+        Adjust, Adjustment, AutoBorrow, InferOk, InferenceContext, OverloadedDeref, PointerCast,\n+        TypeError, TypeMismatch,\n     },\n     static_lifetime, Canonical, DomainGoal, FnPointer, FnSig, Guidance, InEnvironment, Interner,\n-    Solution, Substitution, Ty, TyBuilder, TyExt, TyKind, db::HirDatabase, TraitEnvironment, GenericArgData,\n+    Solution, Substitution, TraitEnvironment, Ty, TyBuilder, TyExt, TyKind,\n };\n \n use super::unify::InferenceTable;"}, {"sha": "84ca1660afb139f9325f8c7447c34279d94a864a", "filename": "crates/hir_ty/src/infer/unify.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2ef541b35f955d3d86014ad855511f155d5ebd47/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ef541b35f955d3d86014ad855511f155d5ebd47/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs?ref=2ef541b35f955d3d86014ad855511f155d5ebd47", "patch": "@@ -3,8 +3,8 @@\n use std::{fmt, mem, sync::Arc};\n \n use chalk_ir::{\n-    cast::Cast, fold::Fold, interner::HasInterner, zip::Zip, FloatTy, IntTy, NoSolution,\n-    TyVariableKind, UniverseIndex, CanonicalVarKind,\n+    cast::Cast, fold::Fold, interner::HasInterner, zip::Zip, CanonicalVarKind, FloatTy, IntTy,\n+    NoSolution, TyVariableKind, UniverseIndex,\n };\n use chalk_solve::infer::ParameterEnaVariableExt;\n use ena::unify::UnifyKey;\n@@ -299,14 +299,12 @@ impl<'a> InferenceTable<'a> {\n         self.resolve_with_fallback_inner(&mut Vec::new(), t, &fallback)\n     }\n \n-    pub(crate) fn fresh_subst(\n-        &mut self,\n-        binders: &[CanonicalVarKind<Interner>],\n-    ) -> Substitution {\n+    pub(crate) fn fresh_subst(&mut self, binders: &[CanonicalVarKind<Interner>]) -> Substitution {\n         Substitution::from_iter(\n             Interner,\n             binders.iter().map(|kind| {\n-                let param_infer_var = kind.map_ref(|&ui| self.var_unification_table.new_variable(ui));\n+                let param_infer_var =\n+                    kind.map_ref(|&ui| self.var_unification_table.new_variable(ui));\n                 param_infer_var.to_generic_arg(Interner)\n             }),\n         )"}, {"sha": "040dcbd1d958cdb9128be2bdd1579825e444127b", "filename": "crates/ide_diagnostics/src/handlers/type_mismatch.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2ef541b35f955d3d86014ad855511f155d5ebd47/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Ftype_mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ef541b35f955d3d86014ad855511f155d5ebd47/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Ftype_mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Ftype_mismatch.rs?ref=2ef541b35f955d3d86014ad855511f155d5ebd47", "patch": "@@ -1,13 +1,11 @@\n use hir::{db::AstDatabase, HirDisplay, Type, TypeInfo};\n use ide_db::{\n-    base_db::{FileLoader, FileRange},\n-    famous_defs::FamousDefs,\n-    source_change::SourceChange,\n+    famous_defs::FamousDefs, source_change::SourceChange,\n     syntax_helpers::node_ext::for_each_tail_expr,\n };\n use syntax::{\n     ast::{BlockExpr, ExprStmt},\n-    AstNode, TextRange, TextSize,\n+    AstNode,\n };\n use text_edit::TextEdit;\n "}]}