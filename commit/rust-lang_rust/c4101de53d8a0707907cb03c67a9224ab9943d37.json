{"sha": "c4101de53d8a0707907cb03c67a9224ab9943d37", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0MTAxZGU1M2Q4YTA3MDc5MDdjYjAzYzY3YTkyMjRhYjk5NDNkMzc=", "commit": {"author": {"name": "Marcus Klaas", "email": "mail@marcusklaas.nl", "date": "2015-07-20T21:29:25Z"}, "committer": {"name": "Marcus Klaas", "email": "mail@marcusklaas.nl", "date": "2015-07-24T17:00:14Z"}, "message": "Refactor some things; add extra tests.", "tree": {"sha": "4b28a2886c4dd0042c784e3a94ed2b5c4b552ccc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b28a2886c4dd0042c784e3a94ed2b5c4b552ccc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c4101de53d8a0707907cb03c67a9224ab9943d37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c4101de53d8a0707907cb03c67a9224ab9943d37", "html_url": "https://github.com/rust-lang/rust/commit/c4101de53d8a0707907cb03c67a9224ab9943d37", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c4101de53d8a0707907cb03c67a9224ab9943d37/comments", "author": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2fa6220f57228d149f99272a4b3f97b560359738", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fa6220f57228d149f99272a4b3f97b560359738", "html_url": "https://github.com/rust-lang/rust/commit/2fa6220f57228d149f99272a4b3f97b560359738"}], "stats": {"total": 380, "additions": 292, "deletions": 88}, "files": [{"sha": "3d41b51661e7e9c5b36743ea98a345f6bea4df45", "filename": "src/config.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c4101de53d8a0707907cb03c67a9224ab9943d37/src%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4101de53d8a0707907cb03c67a9224ab9943d37/src%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig.rs?ref=c4101de53d8a0707907cb03c67a9224ab9943d37", "patch": "@@ -14,6 +14,18 @@ use {NewlineStyle, BraceStyle, ReturnIndent, StructLitStyle};\n use lists::SeparatorTactic;\n use issues::ReportTactic;\n \n+#[derive(Copy, Clone, Eq, PartialEq, Debug)]\n+pub enum BlockIndentStyle {\n+    // Same level as parent.\n+    Inherit,\n+    // One level deeper than parent.\n+    Tabbed,\n+    // Aligned with block open.\n+    Visual,\n+}\n+\n+impl_enum_decodable!(BlockIndentStyle, Inherit, Tabbed, Visual);\n+\n #[derive(RustcDecodable, Clone)]\n pub struct Config {\n     pub max_width: usize,\n@@ -31,6 +43,7 @@ pub struct Config {\n     pub report_todo: ReportTactic,\n     pub report_fixme: ReportTactic,\n     pub reorder_imports: bool, // Alphabetically, case sensitive.\n+    pub expr_indent_style: BlockIndentStyle,\n }\n \n impl Config {"}, {"sha": "035fa21e9173cb322b61ff2f53815daf3253ca3b", "filename": "src/default.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4101de53d8a0707907cb03c67a9224ab9943d37/src%2Fdefault.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c4101de53d8a0707907cb03c67a9224ab9943d37/src%2Fdefault.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdefault.toml?ref=c4101de53d8a0707907cb03c67a9224ab9943d37", "patch": "@@ -13,3 +13,4 @@ enum_trailing_comma = true\n report_todo = \"Always\"\n report_fixme = \"Never\"\n reorder_imports = false\n+expr_indent_style = \"Tabbed\""}, {"sha": "e81314eba79f1554362ab3cf11584a484f8a5098", "filename": "src/expr.rs", "status": "modified", "additions": 139, "deletions": 80, "changes": 219, "blob_url": "https://github.com/rust-lang/rust/blob/c4101de53d8a0707907cb03c67a9224ab9943d37/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4101de53d8a0707907cb03c67a9224ab9943d37/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=c4101de53d8a0707907cb03c67a9224ab9943d37", "patch": "@@ -14,6 +14,7 @@ use string::{StringFormat, rewrite_string};\n use StructLitStyle;\n use utils::{span_after, make_indent};\n use visitor::FmtVisitor;\n+use config::BlockIndentStyle;\n \n use syntax::{ast, ptr};\n use syntax::codemap::{Pos, Span, BytePos, mk_sp};\n@@ -57,48 +58,16 @@ impl Rewrite for ast::Expr {\n                 rewrite_tuple_lit(context, items, self.span, width, offset)\n             }\n             ast::Expr_::ExprWhile(ref cond, ref block, label) => {\n-                rewrite_loop(context,\n-                             cond,\n-                             block,\n-                             label,\n-                             None,\n-                             \"while \",\n-                             \"let \",\n-                             \" = \",\n-                             width,\n-                             offset)\n+                Loop::new_while(None, cond, block, label).rewrite(context, width, offset)\n             }\n             ast::Expr_::ExprWhileLet(ref pat, ref cond, ref block, label) => {\n-                rewrite_loop(context,\n-                             cond,\n-                             block,\n-                             label,\n-                             Some(pat),\n-                             \"while \",\n-                             \"let \",\n-                             \" = \",\n-                             width,\n-                             offset)\n+                Loop::new_while(Some(pat), cond, block, label).rewrite(context, width, offset)\n             }\n             ast::Expr_::ExprForLoop(ref pat, ref cond, ref block, label) => {\n-                rewrite_loop(context,\n-                             cond,\n-                             block,\n-                             label,\n-                             Some(pat),\n-                             \"for \",\n-                             \"\",\n-                             \" in \",\n-                             width,\n-                             offset)\n+                Loop::new_for(pat, cond, block, label).rewrite(context, width, offset)\n             }\n             ast::Expr_::ExprLoop(ref block, label) => {\n-                // Of all the loops, this is the only one that does not use\n-                // rewrite_loop!\n-                // FIXME: this drops any comment between \"loop\" and the block.\n-                block.rewrite(context, width, offset).map(|result| {\n-                    format!(\"{}loop {}\", rewrite_label(label), result)\n-                })\n+                Loop::new_loop(block, label).rewrite(context, width, offset)\n             }\n             ast::Expr_::ExprBlock(ref block) => {\n                 block.rewrite(context, width, offset)\n@@ -121,7 +90,8 @@ impl Rewrite for ast::Expr {\n                                 width,\n                                 offset)\n             }\n-            // We reformat it ourselves because rustc gives us a bad span for ranges\n+            // We reformat it ourselves because rustc gives us a bad span\n+            // for ranges, see rust#27162\n             ast::Expr_::ExprRange(ref left, ref right) => {\n                 rewrite_range(context,\n                               left.as_ref().map(|e| &**e),\n@@ -161,6 +131,91 @@ impl Rewrite for ast::Pat {\n     }\n }\n \n+// Abstraction over for, while and loop expressions\n+struct Loop<'a> {\n+    cond: Option<&'a ast::Expr>,\n+    block: &'a ast::Block,\n+    label: Option<ast::Ident>,\n+    pat: Option<&'a ast::Pat>,\n+    keyword: &'a str,\n+    matcher: &'a str,\n+    connector: &'a str,\n+}\n+\n+impl<'a> Loop<'a> {\n+    fn new_loop(block: &'a ast::Block, label: Option<ast::Ident>) -> Loop<'a> {\n+        Loop {\n+            cond: None,\n+            block: block,\n+            label: label,\n+            pat: None,\n+            keyword: \"loop\",\n+            matcher: \"\",\n+            connector: \"\",\n+        }\n+    }\n+\n+    fn new_while(pat: Option<&'a ast::Pat>,\n+                 cond: &'a ast::Expr,\n+                 block: &'a ast::Block,\n+                 label: Option<ast::Ident>)\n+                 -> Loop<'a> {\n+        Loop {\n+            cond: Some(cond),\n+            block: block,\n+            label: label,\n+            pat: pat,\n+            keyword: \"while \",\n+            matcher: match pat {\n+                Some(..) => \"let \",\n+                None => \"\"\n+            },\n+            connector: \" =\",\n+        }\n+    }\n+\n+    fn new_for(pat: &'a ast::Pat,\n+               cond: &'a ast::Expr,\n+               block: &'a ast::Block,\n+               label: Option<ast::Ident>)\n+               -> Loop<'a> {\n+        Loop {\n+            cond: Some(cond),\n+            block: block,\n+            label: label,\n+            pat: Some(pat),\n+            keyword: \"for \",\n+            matcher: \"\",\n+            connector: \" in\",\n+        }\n+    }\n+}\n+\n+impl<'a> Rewrite for Loop<'a> {\n+    fn rewrite(&self, context: &RewriteContext, width: usize, offset: usize) -> Option<String> {\n+        let label_string = rewrite_label(self.label);\n+        // 2 = \" {\".len()\n+        let inner_width = width - self.keyword.len() - 2 - label_string.len();\n+        let inner_offset = offset + self.keyword.len() + label_string.len();\n+\n+        let pat_expr_string = match self.cond {\n+            Some(cond) => try_opt!(rewrite_pat_expr(context,\n+                                                    self.pat,\n+                                                    cond,\n+                                                    self.matcher,\n+                                                    self.connector,\n+                                                    inner_width,\n+                                                    inner_offset)),\n+            None => String::new()\n+        };\n+\n+        // FIXME: this drops any comment between \"loop\" and the block.\n+        self.block.rewrite(context, width, offset).map(|result| {\n+            format!(\"{}{}{} {}\", label_string, self.keyword, pat_expr_string, result)\n+        })\n+    }\n+}\n+\n fn rewrite_label(label: Option<ast::Ident>) -> String {\n     match label {\n         Some(ident) => format!(\"{}: \", ident),\n@@ -193,36 +248,8 @@ fn rewrite_range(context: &RewriteContext,\n     Some(format!(\"{}..{}\", left_string, right_string))\n }\n \n-fn rewrite_loop(context: &RewriteContext,\n-                cond: &ast::Expr,\n-                block: &ast::Block,\n-                label: Option<ast::Ident>,\n-                pat: Option<&ast::Pat>,\n-                keyword: &str,\n-                matcher: &str, // FIXME: think of better identifiers\n-                connector: &str,\n-                width: usize,\n-                offset: usize)\n-                -> Option<String> {\n-    let label_string = rewrite_label(label);\n-    // 2 = \" {\"\n-    let inner_width = width - keyword.len() - 2 - label_string.len();\n-    let inner_offset = offset + keyword.len() + label_string.len();\n-\n-    let pat_expr_string = try_opt!(rewrite_pat_expr(context,\n-                                                    pat,\n-                                                    cond,\n-                                                    matcher,\n-                                                    connector,\n-                                                    inner_width,\n-                                                    inner_offset));\n-\n-    // FIXME: this drops any comment between \"loop\" and the block.\n-    block.rewrite(context, width, offset).map(|result| {\n-        format!(\"{}{}{} {}\", label_string, keyword, pat_expr_string, result)\n-    })\n-}\n-\n+// Rewrites if-else blocks. If let Some(_) = pat, the expression is\n+// treated as an if-let-else expression.\n fn rewrite_if_else(context: &RewriteContext,\n                    cond: &ast::Expr,\n                    if_block: &ast::Block,\n@@ -236,7 +263,7 @@ fn rewrite_if_else(context: &RewriteContext,\n                                                     pat,\n                                                     cond,\n                                                     \"let \",\n-                                                    \" = \",\n+                                                    \" =\",\n                                                     width - 3 - 2,\n                                                     offset + 3));\n \n@@ -261,28 +288,49 @@ fn rewrite_pat_expr(context: &RewriteContext,\n                     width: usize,\n                     offset: usize)\n                     -> Option<String> {\n+    let pat_offset = offset + matcher.len();\n     let mut result = match pat {\n         Some(pat) => {\n             let pat_string = try_opt!(pat.rewrite(context,\n                                                   width - connector.len() - matcher.len(),\n-                                                  offset + matcher.len()));\n+                                                  pat_offset));\n             format!(\"{}{}{}\", matcher, pat_string, connector)\n         }\n         None => String::new()\n     };\n \n-    // Consider only the last line of the pat string\n+    // Consider only the last line of the pat string.\n     let extra_offset = match result.rfind('\\n') {\n         // 1 for newline character\n         Some(idx) => result.len() - idx - 1 - offset,\n         None => result.len()\n     };\n \n-    let expr_string = try_opt!(expr.rewrite(context,\n-                                            width - extra_offset,\n-                                            offset + extra_offset));\n+    // The expression may (partionally) fit on the current line.\n+    if width > extra_offset + 1 {\n+        let mut corrected_offset = extra_offset;\n \n-    result.push_str(&expr_string);\n+        if pat.is_some() {\n+            result.push(' ');\n+            corrected_offset += 1;\n+        }\n+\n+        let expr_rewrite = expr.rewrite(context,\n+                                        width - corrected_offset,\n+                                        offset + corrected_offset);\n+\n+        if let Some(expr_string) = expr_rewrite {\n+            result.push_str(&expr_string);\n+            return Some(result);\n+        }\n+    }\n+\n+    // The expression won't fit on the current line, jump to next.\n+    result.push('\\n');\n+    result.push_str(&make_indent(pat_offset));\n+\n+    let expr_rewrite = expr.rewrite(context, context.config.max_width - pat_offset, pat_offset);\n+    result.push_str(&&try_opt!(expr_rewrite));\n \n     Some(result)\n }\n@@ -333,6 +381,8 @@ fn rewrite_call(context: &RewriteContext,\n     // 2 is for parens.\n     let remaining_width = width - callee_str.len() - 2;\n     let offset = callee_str.len() + 1 + offset;\n+    let block_indent = expr_block_indent(context, offset);\n+    let inner_context = &RewriteContext { block_indent: block_indent, ..*context };\n \n     let items = itemize_list(context.codemap,\n                              Vec::new(),\n@@ -342,7 +392,7 @@ fn rewrite_call(context: &RewriteContext,\n                              |item| item.span.lo,\n                              |item| item.span.hi,\n                              // Take old span when rewrite fails.\n-                             |item| item.rewrite(context, remaining_width, offset)\n+                             |item| item.rewrite(inner_context, remaining_width, offset)\n                                         .unwrap_or(context.codemap.span_to_snippet(item.span)\n                                                                   .unwrap()),\n                              callee.span.hi + BytePos(1),\n@@ -361,6 +411,14 @@ fn rewrite_call(context: &RewriteContext,\n     Some(format!(\"{}({})\", callee_str, write_list(&items, &fmt)))\n }\n \n+fn expr_block_indent(context: &RewriteContext, offset: usize) -> usize {\n+    match context.config.expr_indent_style {\n+        BlockIndentStyle::Inherit => context.block_indent,\n+        BlockIndentStyle::Tabbed => context.block_indent + context.config.tab_spaces,\n+        BlockIndentStyle::Visual => offset,\n+    }\n+}\n+\n fn rewrite_paren(context: &RewriteContext,\n                  subexpr: &ast::Expr,\n                  width: usize,\n@@ -391,17 +449,18 @@ fn rewrite_struct_lit<'a>(context: &RewriteContext,\n     }\n \n     let path_str = pprust::path_to_string(path);\n-    let (indent, h_budget, v_budget) = match context.config.struct_lit_style {\n+    // Foo { a: Foo } - indent is +3, width is -5.\n+    let h_budget = width.checked_sub(path_str.len() + 5).unwrap_or(0);\n+    let (indent, v_budget) = match context.config.struct_lit_style {\n         StructLitStyle::VisualIndent => {\n-            // Foo { a: Foo } - indent is +3, width is -5.\n-            let budget = width - (path_str.len() + 5);\n-            (offset + path_str.len() + 3, budget, budget)\n+            (offset + path_str.len() + 3, h_budget)\n         }\n         StructLitStyle::BlockIndent => {\n             // If we are all on one line, then we'll ignore the indent, and we\n             // have a smaller budget.\n             let indent = context.block_indent + context.config.tab_spaces;\n-            (indent, width - (path_str.len() + 5), width - indent)\n+            let v_budget = context.config.max_width.checked_sub(indent).unwrap_or(0);\n+            (indent, v_budget)\n         }\n     };\n "}, {"sha": "12ce3368eb31be49205ea15c690fe2f711e56910", "filename": "src/imports.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c4101de53d8a0707907cb03c67a9224ab9943d37/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4101de53d8a0707907cb03c67a9224ab9943d37/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=c4101de53d8a0707907cb03c67a9224ab9943d37", "patch": "@@ -123,10 +123,10 @@ impl<'a> FmtVisitor<'a> {\n         let list = write_list(&items[first_index..], &fmt);\n \n         Some(if path_str.len() == 0 {\n-            format!(\"{}use {{{}}};\", vis, list)\n-        } else {\n-            format!(\"{}use {}::{{{}}};\", vis, path_str, list)\n-        })\n+                format!(\"{}use {{{}}};\", vis, list)\n+            } else {\n+                format!(\"{}use {}::{{{}}};\", vis, path_str, list)\n+            })\n     }\n }\n "}, {"sha": "7c36229e7740a254bdccb88432d828dc69eb9911", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c4101de53d8a0707907cb03c67a9224ab9943d37/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4101de53d8a0707907cb03c67a9224ab9943d37/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=c4101de53d8a0707907cb03c67a9224ab9943d37", "patch": "@@ -49,10 +49,9 @@ use changes::ChangeSet;\n use visitor::FmtVisitor;\n use config::Config;\n \n-#[macro_use]\n-mod config;\n #[macro_use]\n mod utils;\n+pub mod config;\n mod changes;\n mod visitor;\n mod items;"}, {"sha": "38a099e3bedcaf503d6544cc3264af38fa0b35eb", "filename": "tests/config/expr_visual_indent.toml", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c4101de53d8a0707907cb03c67a9224ab9943d37/tests%2Fconfig%2Fexpr_visual_indent.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c4101de53d8a0707907cb03c67a9224ab9943d37/tests%2Fconfig%2Fexpr_visual_indent.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fconfig%2Fexpr_visual_indent.toml?ref=c4101de53d8a0707907cb03c67a9224ab9943d37", "patch": "@@ -0,0 +1,16 @@\n+max_width = 100\n+ideal_width = 80\n+leeway = 5\n+tab_spaces = 4\n+newline_style = \"Unix\"\n+fn_brace_style = \"SameLineWhere\"\n+fn_return_indent = \"WithArgs\"\n+fn_args_paren_newline = true\n+struct_trailing_comma = \"Vertical\"\n+struct_lit_style = \"BlockIndent\"\n+struct_lit_trailing_comma = \"Vertical\"\n+enum_trailing_comma = true\n+report_todo = \"Always\"\n+report_fixme = \"Never\"\n+reorder_imports = false\n+expr_indent_style = \"Visual\""}, {"sha": "5b1ce49a2f23a053593bd65dd93b8d8c615f8843", "filename": "tests/config/reorder_imports.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4101de53d8a0707907cb03c67a9224ab9943d37/tests%2Fconfig%2Freorder_imports.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c4101de53d8a0707907cb03c67a9224ab9943d37/tests%2Fconfig%2Freorder_imports.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fconfig%2Freorder_imports.toml?ref=c4101de53d8a0707907cb03c67a9224ab9943d37", "patch": "@@ -13,3 +13,4 @@ enum_trailing_comma = true\n report_todo = \"Always\"\n report_fixme = \"Never\"\n reorder_imports = true\n+expr_indent_style = \"Tabbed\""}, {"sha": "b2c7f5fc43f655aee957ae0982abc480969a9848", "filename": "tests/config/small_tabs.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4101de53d8a0707907cb03c67a9224ab9943d37/tests%2Fconfig%2Fsmall_tabs.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c4101de53d8a0707907cb03c67a9224ab9943d37/tests%2Fconfig%2Fsmall_tabs.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fconfig%2Fsmall_tabs.toml?ref=c4101de53d8a0707907cb03c67a9224ab9943d37", "patch": "@@ -13,3 +13,4 @@ enum_trailing_comma = true\n report_todo = \"Always\"\n report_fixme = \"Never\"\n reorder_imports = false\n+expr_indent_style = \"Tabbed\""}, {"sha": "61bf4b0aee56f5f3e930c87191f101d811b69a94", "filename": "tests/config/visual_struct_lits.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4101de53d8a0707907cb03c67a9224ab9943d37/tests%2Fconfig%2Fvisual_struct_lits.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c4101de53d8a0707907cb03c67a9224ab9943d37/tests%2Fconfig%2Fvisual_struct_lits.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fconfig%2Fvisual_struct_lits.toml?ref=c4101de53d8a0707907cb03c67a9224ab9943d37", "patch": "@@ -13,3 +13,4 @@ enum_trailing_comma = true\n report_todo = \"Always\"\n report_fixme = \"Never\"\n reorder_imports = false\n+expr_indent_style = \"Tabbed\""}, {"sha": "c173d7bd7c4b69d929643cf4da4d42b5586e9e4d", "filename": "tests/source/expr-visual-indent.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c4101de53d8a0707907cb03c67a9224ab9943d37/tests%2Fsource%2Fexpr-visual-indent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4101de53d8a0707907cb03c67a9224ab9943d37/tests%2Fsource%2Fexpr-visual-indent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fexpr-visual-indent.rs?ref=c4101de53d8a0707907cb03c67a9224ab9943d37", "patch": "@@ -0,0 +1,9 @@\n+// rustfmt-config: expr_visual_indent.toml\n+\n+// Visual level block indentation.\n+\n+fn matcher() {\n+    Some(while true {\n+        test();\n+    })\n+}\n\\ No newline at end of file"}, {"sha": "1c063cf7f9d6839718be1e27b317add78a709ea6", "filename": "tests/source/expr.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c4101de53d8a0707907cb03c67a9224ab9943d37/tests%2Fsource%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4101de53d8a0707907cb03c67a9224ab9943d37/tests%2Fsource%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fexpr.rs?ref=c4101de53d8a0707907cb03c67a9224ab9943d37", "patch": "@@ -14,6 +14,10 @@ some_ridiculously_loooooooooooooooooooooong_function(10000 * 30000000000 + 40000\n     (((((((((aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa + a +\n              aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa + aaaaa)))))))));\n \n+    { for _ in 0..10 {} }\n+\n+    {{{{}}}}\n+\n      if  1  + 2 > 0  { let result = 5; result } else { 4};\n \n     if  let   Some(x)  =  aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa {\n@@ -30,6 +34,10 @@ some_ridiculously_loooooooooooooooooooooong_function(10000 * 30000000000 + 40000\n     if let (some_very_large,\n             tuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuple) = 1111 + 2222 {}\n \n+    if let (some_very_large, tuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuple) = 1\n+ + 2 + 3 {\n+    }\n+\n     if cond() {\n         something();\n     } else  if different_cond() {\n@@ -39,3 +47,19 @@ some_ridiculously_loooooooooooooooooooooong_function(10000 * 30000000000 + 40000\n         aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa + aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n     }\n }\n+\n+fn bar() {\n+    let range = (   111111111 + 333333333333333333 + 1111 +   400000000000000000) .. (2222 +  2333333333333333);\n+\n+    let another_range = 5..some_func( a , b /* comment */);\n+\n+    for _  in  1 ..{ call_forever(); }\n+\n+    syntactically_correct(loop { sup( '?'); }, if cond { 0 } else { 1 });\n+\n+    let third = ..10;\n+    let infi_range = ..;\n+    let foo = 1..;\n+    let bar = 5;\n+    let nonsense = (10 .. 0)..(0..10);\n+}"}, {"sha": "54f2ea5441bf28f2f8050e80b3016b017ee296f9", "filename": "tests/source/struct_lits.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c4101de53d8a0707907cb03c67a9224ab9943d37/tests%2Fsource%2Fstruct_lits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4101de53d8a0707907cb03c67a9224ab9943d37/tests%2Fsource%2Fstruct_lits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fstruct_lits.rs?ref=c4101de53d8a0707907cb03c67a9224ab9943d37", "patch": "@@ -22,6 +22,8 @@ fn main() {\n     Foo { a:Bar,\n           b:foo() };\n \n+    Quux { x: if cond { bar(); }, y: baz() };\n+\n     A { \n     // Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec a diam lectus. Sed sit amet ipsum mauris. Maecenas congue ligula ac quam viverra nec consectetur ante hendrerit. Donec et mollis dolor.\n     first: item(),\n@@ -37,3 +39,12 @@ fn main() {\n                *             o o o   o */\n               graph: G, }\n }\n+\n+fn matcher() {\n+    TagTerminatedByteMatcher {\n+        matcher: ByteMatcher {\n+        pattern: b\"<HTML\",\n+        mask: b\"\\xFF\\xDF\\xDF\\xDF\\xDF\\xFF\",\n+    },\n+    };\n+}"}, {"sha": "3488e8c93c04642ecd5d604e1c65e6df08393e94", "filename": "tests/target/expr-visual-indent.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c4101de53d8a0707907cb03c67a9224ab9943d37/tests%2Ftarget%2Fexpr-visual-indent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4101de53d8a0707907cb03c67a9224ab9943d37/tests%2Ftarget%2Fexpr-visual-indent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fexpr-visual-indent.rs?ref=c4101de53d8a0707907cb03c67a9224ab9943d37", "patch": "@@ -0,0 +1,9 @@\n+// rustfmt-config: expr_visual_indent.toml\n+\n+// Visual level block indentation.\n+\n+fn matcher() {\n+    Some(while true {\n+             test();\n+         })\n+}"}, {"sha": "9fa32048e3f2f2483b90d8db215148cc3c2d903d", "filename": "tests/target/expr.rs", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/c4101de53d8a0707907cb03c67a9224ab9943d37/tests%2Ftarget%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4101de53d8a0707907cb03c67a9224ab9943d37/tests%2Ftarget%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fexpr.rs?ref=c4101de53d8a0707907cb03c67a9224ab9943d37", "patch": "@@ -15,6 +15,20 @@ fn foo() -> bool {\n              a + aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa +\n              aaaaa)))))))));\n \n+    {\n+        for _ in 0..10 {\n+        }\n+    }\n+\n+    {\n+        {\n+            {\n+                {\n+                }\n+            }\n+        }\n+    }\n+\n     if 1 + 2 > 0 {\n         let result = 5;\n         result\n@@ -39,6 +53,10 @@ fn foo() -> bool {\n                                                                                          2222 {\n     }\n \n+    if let (some_very_large, tuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuple) =\n+           1 + 2 + 3 {\n+    }\n+\n     if cond() {\n         something();\n     } else if different_cond() {\n@@ -49,3 +67,29 @@ fn foo() -> bool {\n         aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n     }\n }\n+\n+fn bar() {\n+    let range = (111111111 + 333333333333333333 + 1111 + 400000000000000000)..(2222 +\n+                                                                               2333333333333333);\n+\n+    let another_range = 5..some_func(a, b /* comment */);\n+\n+    for _ in 1.. {\n+        call_forever();\n+    }\n+\n+    syntactically_correct(loop {\n+            sup('?');\n+        },\n+                          if cond {\n+            0\n+        } else {\n+            1\n+        });\n+\n+    let third = ..10;\n+    let infi_range = ..;\n+    let foo = 1..;\n+    let bar = 5;\n+    let nonsense = (10..0)..(0..10);\n+}"}, {"sha": "9f7ab5cb428772b162505c09daa4a83f18963ec5", "filename": "tests/target/struct_lits.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c4101de53d8a0707907cb03c67a9224ab9943d37/tests%2Ftarget%2Fstruct_lits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4101de53d8a0707907cb03c67a9224ab9943d37/tests%2Ftarget%2Fstruct_lits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fstruct_lits.rs?ref=c4101de53d8a0707907cb03c67a9224ab9943d37", "patch": "@@ -29,9 +29,16 @@ fn main() {\n \n     Foo { a: Bar, b: foo() };\n \n+    Quux {\n+        x: if cond {\n+            bar();\n+        },\n+        y: baz(),\n+    };\n+\n     A {\n-        // Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec a diam lectus. Sed\n-        // sit amet ipsum mauris. Maecenas congue ligula ac quam viverra nec consectetur ante\n+        // Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec a diam lectus. Sed sit\n+        // amet ipsum mauris. Maecenas congue ligula ac quam viverra nec consectetur ante\n         // hendrerit. Donec et mollis dolor.\n         first: item(),\n         // Praesent et diam eget libero egestas mattis sit amet vitae augue.\n@@ -48,3 +55,12 @@ fn main() {\n         graph: G,\n     }\n }\n+\n+fn matcher() {\n+    TagTerminatedByteMatcher {\n+        matcher: ByteMatcher {\n+            pattern: b\"<HTML\",\n+            mask: b\"\\xFF\\xDF\\xDF\\xDF\\xDF\\xFF\",\n+        },\n+    };\n+}"}]}