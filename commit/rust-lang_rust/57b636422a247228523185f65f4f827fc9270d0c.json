{"sha": "57b636422a247228523185f65f4f827fc9270d0c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3YjYzNjQyMmEyNDcyMjg1MjMxODVmNjVmNGY4MjdmYzkyNzBkMGM=", "commit": {"author": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2020-02-10T14:59:14Z"}, "committer": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2020-02-10T14:59:21Z"}, "message": "Rustup to rust-lang/rust#68725", "tree": {"sha": "226d2f8ea3efdf6a78271da69c01243e74e89593", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/226d2f8ea3efdf6a78271da69c01243e74e89593"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/57b636422a247228523185f65f4f827fc9270d0c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZxoS6lESXlRGMHWcaTCGhp1QZjcFAl5Bb8kACgkQaTCGhp1Q\nZjfHxhAAi2NHYgJn/X4idKix7qGWCL7jjzIz6N9seSSuvJ50/QLkd01929aH5zfG\nszI04Cmc3hrFqcjBXLfI1+WLvER81BjY0jKj1pT2Prg/UwLOqum4Oob5LX7fPLlq\nInSPK9mA+PuLtTADjPdxs3J0VgZDQQz02DlOhH/7GuK8rjDUjSXk4wGYKZDAEADc\n7Cfsyanea6ZTRV7XKd/0yGwHPHSUx9YPqOeNg1mYSP3YUnWdwLMb3BLHv/jcz3Zw\nIE8fErpTSXNbtaolcf2OIHhDKlLsfo0Hf40pzDwRiEhcTgg7RGYxxb8gmQbdpnT8\nFhg24X0KLWbvynXI8QrIV8VJ4IYsRHL+k/ebMrNw8KU5dYCggSXlLZuNWMWz517l\nFbhTdp2Pe8wSiwI33rQbB6yv62iAXx6kuwJckr/KWNVo5xFXhrx+rfHASiHKKDwB\ndDHRD2tJOwOdz4KlhY4t6Y29yHCa3DOvUsOQwNnbS5Z4ywKyV+slKA+ybgS8c5sy\nRz3TGomkgtbf8jbhbbrJA/LpqoGrYdpAo19vCakuwRGh6x5uiycYsQnre279+hme\nAb81JsxFVFnAl6BjrH6mZZ7yK4eRkA8qrsUrabauoYhseJ/LIPEix/HQIx1zTglr\nBWkAFcxwracRUIW3B58MFwuEjIDapHwkM6voJiFD8rQl5u8h1CI=\n=PmHv\n-----END PGP SIGNATURE-----", "payload": "tree 226d2f8ea3efdf6a78271da69c01243e74e89593\nparent c066807a70272a6fa9541b5cf878ef756ace2b5b\nauthor flip1995 <hello@philkrones.com> 1581346754 +0100\ncommitter flip1995 <hello@philkrones.com> 1581346761 +0100\n\nRustup to rust-lang/rust#68725\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/57b636422a247228523185f65f4f827fc9270d0c", "html_url": "https://github.com/rust-lang/rust/commit/57b636422a247228523185f65f4f827fc9270d0c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/57b636422a247228523185f65f4f827fc9270d0c/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c066807a70272a6fa9541b5cf878ef756ace2b5b", "url": "https://api.github.com/repos/rust-lang/rust/commits/c066807a70272a6fa9541b5cf878ef756ace2b5b", "html_url": "https://github.com/rust-lang/rust/commit/c066807a70272a6fa9541b5cf878ef756ace2b5b"}], "stats": {"total": 87, "additions": 48, "deletions": 39}, "files": [{"sha": "cc519d525521237899cfc7b76c28710169b13940", "filename": "clippy_lints/src/utils/diagnostics.rs", "status": "modified", "additions": 48, "deletions": 39, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/57b636422a247228523185f65f4f827fc9270d0c/clippy_lints%2Fsrc%2Futils%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57b636422a247228523185f65f4f827fc9270d0c/clippy_lints%2Fsrc%2Futils%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fdiagnostics.rs?ref=57b636422a247228523185f65f4f827fc9270d0c", "patch": "@@ -6,27 +6,16 @@ use rustc_lint::{LateContext, Lint, LintContext};\n use rustc_span::source_map::{MultiSpan, Span};\n use std::env;\n \n-/// Wrapper around `DiagnosticBuilder` that adds a link to Clippy documentation for the emitted lint\n-struct DiagnosticWrapper<'a>(DiagnosticBuilder<'a>);\n-\n-impl<'a> Drop for DiagnosticWrapper<'a> {\n-    fn drop(&mut self) {\n-        self.0.emit();\n-    }\n-}\n-\n-impl<'a> DiagnosticWrapper<'a> {\n-    fn docs_link(&mut self, lint: &'static Lint) {\n-        if env::var(\"CLIPPY_DISABLE_DOCS_LINKS\").is_err() {\n-            self.0.help(&format!(\n-                \"for further information visit https://rust-lang.github.io/rust-clippy/{}/index.html#{}\",\n-                &option_env!(\"RUST_RELEASE_NUM\").map_or(\"master\".to_string(), |n| {\n-                    // extract just major + minor version and ignore patch versions\n-                    format!(\"rust-{}\", n.rsplitn(2, '.').nth(1).unwrap())\n-                }),\n-                lint.name_lower().replacen(\"clippy::\", \"\", 1)\n-            ));\n-        }\n+fn docs_link(db: &mut DiagnosticBuilder<'_>, lint: &'static Lint) {\n+    if env::var(\"CLIPPY_DISABLE_DOCS_LINKS\").is_err() {\n+        db.help(&format!(\n+            \"for further information visit https://rust-lang.github.io/rust-clippy/{}/index.html#{}\",\n+            &option_env!(\"RUST_RELEASE_NUM\").map_or(\"master\".to_string(), |n| {\n+                // extract just major + minor version and ignore patch versions\n+                format!(\"rust-{}\", n.rsplitn(2, '.').nth(1).unwrap())\n+            }),\n+            lint.name_lower().replacen(\"clippy::\", \"\", 1)\n+        ));\n     }\n }\n \n@@ -48,7 +37,11 @@ impl<'a> DiagnosticWrapper<'a> {\n ///    |     ^^^^^^^^^^^^^^^^^^^^^^^\n /// ```\n pub fn span_lint<T: LintContext>(cx: &T, lint: &'static Lint, sp: impl Into<MultiSpan>, msg: &str) {\n-    DiagnosticWrapper(cx.struct_span_lint(lint, sp, msg)).docs_link(lint);\n+    cx.struct_span_lint(lint, sp, |ldb| {\n+        let mut db = ldb.build(msg);\n+        docs_link(&mut db, lint);\n+        db.emit();\n+    });\n }\n \n /// Same as `span_lint` but with an extra `help` message.\n@@ -70,9 +63,12 @@ pub fn span_lint<T: LintContext>(cx: &T, lint: &'static Lint, sp: impl Into<Mult\n ///    = help: Consider using `std::f64::NAN` if you would like a constant representing NaN\n /// ```\n pub fn span_lint_and_help<'a, T: LintContext>(cx: &'a T, lint: &'static Lint, span: Span, msg: &str, help: &str) {\n-    let mut db = DiagnosticWrapper(cx.struct_span_lint(lint, span, msg));\n-    db.0.help(help);\n-    db.docs_link(lint);\n+    cx.struct_span_lint(lint, span, |ldb| {\n+        let mut db = ldb.build(msg);\n+        db.help(help);\n+        docs_link(&mut db, lint);\n+        db.emit();\n+    });\n }\n \n /// Like `span_lint` but with a `note` section instead of a `help` message.\n@@ -104,26 +100,36 @@ pub fn span_lint_and_note<'a, T: LintContext>(\n     note_span: Span,\n     note: &str,\n ) {\n-    let mut db = DiagnosticWrapper(cx.struct_span_lint(lint, span, msg));\n-    if note_span == span {\n-        db.0.note(note);\n-    } else {\n-        db.0.span_note(note_span, note);\n-    }\n-    db.docs_link(lint);\n+    cx.struct_span_lint(lint, span, |ldb| {\n+        let mut db = ldb.build(msg);\n+        if note_span == span {\n+            db.note(note);\n+        } else {\n+            db.span_note(note_span, note);\n+        }\n+        docs_link(&mut db, lint);\n+        db.emit();\n+    });\n }\n \n pub fn span_lint_and_then<'a, T: LintContext, F>(cx: &'a T, lint: &'static Lint, sp: Span, msg: &str, f: F)\n where\n     F: for<'b> FnOnce(&mut DiagnosticBuilder<'b>),\n {\n-    let mut db = DiagnosticWrapper(cx.struct_span_lint(lint, sp, msg));\n-    f(&mut db.0);\n-    db.docs_link(lint);\n+    cx.struct_span_lint(lint, sp, |ldb| {\n+        let mut db = ldb.build(msg);\n+        f(&mut db);\n+        docs_link(&mut db, lint);\n+        db.emit();\n+    });\n }\n \n pub fn span_lint_hir(cx: &LateContext<'_, '_>, lint: &'static Lint, hir_id: HirId, sp: Span, msg: &str) {\n-    DiagnosticWrapper(cx.tcx.struct_span_lint_hir(lint, hir_id, sp, msg)).docs_link(lint);\n+    cx.tcx.struct_span_lint_hir(lint, hir_id, sp, |ldb| {\n+        let mut db = ldb.build(msg);\n+        docs_link(&mut db, lint);\n+        db.emit();\n+    });\n }\n \n pub fn span_lint_hir_and_then(\n@@ -134,9 +140,12 @@ pub fn span_lint_hir_and_then(\n     msg: &str,\n     f: impl FnOnce(&mut DiagnosticBuilder<'_>),\n ) {\n-    let mut db = DiagnosticWrapper(cx.tcx.struct_span_lint_hir(lint, hir_id, sp, msg));\n-    f(&mut db.0);\n-    db.docs_link(lint);\n+    cx.tcx.struct_span_lint_hir(lint, hir_id, sp, |ldb| {\n+        let mut db = ldb.build(msg);\n+        f(&mut db);\n+        docs_link(&mut db, lint);\n+        db.emit();\n+    });\n }\n \n /// Add a span lint with a suggestion on how to fix it."}]}