{"sha": "9b4db176307e91e85361270b667fb22885a21b8b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliNGRiMTc2MzA3ZTkxZTg1MzYxMjcwYjY2N2ZiMjI4ODVhMjFiOGI=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-10-01T21:34:53Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-10-01T21:36:55Z"}, "message": "libcore: Implement a sys::args() on Mac", "tree": {"sha": "aee6b14a9d5a7a2e1e5dbabe39f2147918654bf5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aee6b14a9d5a7a2e1e5dbabe39f2147918654bf5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b4db176307e91e85361270b667fb22885a21b8b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b4db176307e91e85361270b667fb22885a21b8b", "html_url": "https://github.com/rust-lang/rust/commit/9b4db176307e91e85361270b667fb22885a21b8b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b4db176307e91e85361270b667fb22885a21b8b/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1229d1c2ce7cc97ec63a86668e0b12fabaa63e06", "url": "https://api.github.com/repos/rust-lang/rust/commits/1229d1c2ce7cc97ec63a86668e0b12fabaa63e06", "html_url": "https://github.com/rust-lang/rust/commit/1229d1c2ce7cc97ec63a86668e0b12fabaa63e06"}], "stats": {"total": 41, "additions": 36, "deletions": 5}, "files": [{"sha": "0045bad07a563903567aca11b9f744c2412fa6fa", "filename": "src/libcore/os.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9b4db176307e91e85361270b667fb22885a21b8b/src%2Flibcore%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b4db176307e91e85361270b667fb22885a21b8b/src%2Flibcore%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fos.rs?ref=9b4db176307e91e85361270b667fb22885a21b8b", "patch": "@@ -732,6 +732,30 @@ pub fn set_exit_status(code: int) {\n     rustrt::rust_set_exit_status(code as libc::intptr_t);\n }\n \n+/**\n+ * Returns the command line arguments\n+ *\n+ * Returns a list of the command line arguments.\n+ */\n+#[cfg(target_os = \"macos\")]\n+pub fn args() -> ~[~str] {\n+    unsafe {\n+        let (argc, argv) = (*_NSGetArgc() as uint, *_NSGetArgv());\n+        let mut args = ~[];\n+        for uint::range(0, argc) |i| {\n+            vec::push(&mut args, str::raw::from_c_str(*argv.offset(i)));\n+        }\n+        return args;\n+    }\n+}\n+\n+#[cfg(target_os = \"macos\")]\n+extern {\n+    // These functions are in crt_externs.h.\n+    pub fn _NSGetArgc() -> *c_int;\n+    pub fn _NSGetArgv() -> ***c_char;\n+}\n+\n #[cfg(unix)]\n pub fn family() -> ~str { ~\"unix\" }\n "}, {"sha": "9f9d2eea0e67a8d768ce9972c105e6f43f66538d", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9b4db176307e91e85361270b667fb22885a21b8b/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b4db176307e91e85361270b667fb22885a21b8b/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=9b4db176307e91e85361270b667fb22885a21b8b", "patch": "@@ -47,23 +47,23 @@ pub pure fn mut_addr_of<T>(val: &T) -> *mut T {\n \n /// Calculate the offset from a pointer\n #[inline(always)]\n-pub fn offset<T>(ptr: *T, count: uint) -> *T {\n+pub pure fn offset<T>(ptr: *T, count: uint) -> *T {\n     unsafe {\n         (ptr as uint + count * sys::size_of::<T>()) as *T\n     }\n }\n \n /// Calculate the offset from a const pointer\n #[inline(always)]\n-pub fn const_offset<T>(ptr: *const T, count: uint) -> *const T {\n+pub pure fn const_offset<T>(ptr: *const T, count: uint) -> *const T {\n     unsafe {\n         (ptr as uint + count * sys::size_of::<T>()) as *T\n     }\n }\n \n /// Calculate the offset from a mut pointer\n #[inline(always)]\n-pub fn mut_offset<T>(ptr: *mut T, count: uint) -> *mut T {\n+pub pure fn mut_offset<T>(ptr: *mut T, count: uint) -> *mut T {\n     (ptr as uint + count * sys::size_of::<T>()) as *mut T\n }\n \n@@ -176,18 +176,25 @@ pub fn ref_eq<T>(thing: &a/T, other: &b/T) -> bool {\n     to_uint(thing) == to_uint(other)\n }\n \n-pub trait Ptr {\n+pub trait Ptr<T> {\n     pure fn is_null() -> bool;\n     pure fn is_not_null() -> bool;\n+    pure fn offset(count: uint) -> self;\n }\n \n /// Extension methods for pointers\n-impl<T> *T: Ptr {\n+impl<T> *T: Ptr<T> {\n     /// Returns true if the pointer is equal to the null pointer.\n+    #[inline(always)]\n     pure fn is_null() -> bool { is_null(self) }\n \n     /// Returns true if the pointer is not equal to the null pointer.\n+    #[inline(always)]\n     pure fn is_not_null() -> bool { is_not_null(self) }\n+\n+    /// Calculates the offset from a pointer.\n+    #[inline(always)]\n+    pure fn offset(count: uint) -> *T { offset(self, count) }\n }\n \n // Equality for pointers"}]}