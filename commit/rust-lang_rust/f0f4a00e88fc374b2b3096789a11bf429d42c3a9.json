{"sha": "f0f4a00e88fc374b2b3096789a11bf429d42c3a9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwZjRhMDBlODhmYzM3NGIyYjMwOTY3ODlhMTFiZjQyOWQ0MmMzYTk=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-03-25T00:35:23Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-03-25T01:40:13Z"}, "message": "smallintmap: add find_mut method", "tree": {"sha": "814ff9413332ef136f7a52f4516dbd266927bfac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/814ff9413332ef136f7a52f4516dbd266927bfac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f0f4a00e88fc374b2b3096789a11bf429d42c3a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f0f4a00e88fc374b2b3096789a11bf429d42c3a9", "html_url": "https://github.com/rust-lang/rust/commit/f0f4a00e88fc374b2b3096789a11bf429d42c3a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f0f4a00e88fc374b2b3096789a11bf429d42c3a9/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "89e2578a9d1cd18270b7148a5d5d6b8bee051ac5", "url": "https://api.github.com/repos/rust-lang/rust/commits/89e2578a9d1cd18270b7148a5d5d6b8bee051ac5", "html_url": "https://github.com/rust-lang/rust/commit/89e2578a9d1cd18270b7148a5d5d6b8bee051ac5"}], "stats": {"total": 30, "additions": 28, "deletions": 2}, "files": [{"sha": "fffd6c9ee4fe34205e8203d8d4854101a7e79d1b", "filename": "src/libstd/smallintmap.rs", "status": "modified", "additions": 28, "deletions": 2, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/f0f4a00e88fc374b2b3096789a11bf429d42c3a9/src%2Flibstd%2Fsmallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0f4a00e88fc374b2b3096789a11bf429d42c3a9/src%2Flibstd%2Fsmallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsmallintmap.rs?ref=f0f4a00e88fc374b2b3096789a11bf429d42c3a9", "patch": "@@ -86,7 +86,7 @@ impl<V> Map<uint, V> for SmallIntMap<V> {\n         self.each(|&(_, v)| blk(v))\n     }\n \n-    /// Visit all key-value pairs in order\n+    /// Iterate over the map and mutate the contained values\n     fn mutate_values(&mut self, it: &fn(&uint, &'self mut V) -> bool) {\n         for uint::range(0, self.v.len()) |i| {\n             match self.v[i] {\n@@ -96,7 +96,7 @@ impl<V> Map<uint, V> for SmallIntMap<V> {\n         }\n     }\n \n-    /// Iterate over the map and mutate the contained values\n+    /// Return a reference to the value corresponding to the key\n     fn find(&self, key: &uint) -> Option<&'self V> {\n         if *key < self.v.len() {\n             match self.v[*key] {\n@@ -140,6 +140,18 @@ pub impl<V> SmallIntMap<V> {\n     fn get(&self, key: &uint) -> &'self V {\n         self.find(key).expect(\"key not present\")\n     }\n+\n+    /// Return a mutable reference to the value corresponding to the key\n+    fn find_mut(&mut self, key: &uint) -> Option<&'self mut V> {\n+        if *key < self.v.len() {\n+            match self.v[*key] {\n+              Some(ref mut value) => Some(value),\n+              None => None\n+            }\n+        } else {\n+            None\n+        }\n+    }\n }\n \n pub impl<V:Copy> SmallIntMap<V> {\n@@ -160,6 +172,20 @@ pub impl<V:Copy> SmallIntMap<V> {\n #[cfg(test)]\n mod tests {\n     use super::SmallIntMap;\n+    use core::prelude::*;\n+\n+    #[test]\n+    fn test_find_mut() {\n+        let mut m = SmallIntMap::new();\n+        fail_unless!(m.insert(1, 12));\n+        fail_unless!(m.insert(2, 8));\n+        fail_unless!(m.insert(5, 14));\n+        let new = 100;\n+        match m.find_mut(&5) {\n+            None => fail!(), Some(x) => *x = new\n+        }\n+        assert_eq!(m.find(&5), Some(&new));\n+    }\n \n     #[test]\n     fn test_len() {"}]}