{"sha": "791cb87cdf47ddfd2a2b1a726dab3aa66ec2bff3", "node_id": "C_kwDOAAsO6NoAKDc5MWNiODdjZGY0N2RkZmQyYTJiMWE3MjZkYWIzYWE2NmVjMmJmZjM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-18T19:33:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-18T19:33:38Z"}, "message": "Auto merge of #13633 - Veykril:vscode-full-diagnostics, r=Veykril\n\nfeat: Allow viewing the full compiler diagnostic in a readonly textview\n\n![Code_y1qrash9gg](https://user-images.githubusercontent.com/3757771/202780459-f751f65d-2b1b-4dc3-9685-100d65ebf6a0.gif)\n\nAlso adds a VSCode only config that replaces the split diagnostic message with the first relevant part of the diagnostic output\n\n![Code_7k4qsMkx5e](https://user-images.githubusercontent.com/3757771/202780346-cf9137d9-eb77-46b7-aed6-c73a2e41e1c7.png)\n\nThis only affects diagnostics generated by primary spans and has no effect on other clients than VSCode.\n\nFixes https://github.com/rust-lang/rust-analyzer/issues/13574", "tree": {"sha": "ced4d9b3d3b503c2c14019cb0277649fca85e0d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ced4d9b3d3b503c2c14019cb0277649fca85e0d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/791cb87cdf47ddfd2a2b1a726dab3aa66ec2bff3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/791cb87cdf47ddfd2a2b1a726dab3aa66ec2bff3", "html_url": "https://github.com/rust-lang/rust/commit/791cb87cdf47ddfd2a2b1a726dab3aa66ec2bff3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/791cb87cdf47ddfd2a2b1a726dab3aa66ec2bff3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bee27eb4716ad9dfa0f873c46952f8a04b0ff85f", "url": "https://api.github.com/repos/rust-lang/rust/commits/bee27eb4716ad9dfa0f873c46952f8a04b0ff85f", "html_url": "https://github.com/rust-lang/rust/commit/bee27eb4716ad9dfa0f873c46952f8a04b0ff85f"}, {"sha": "8452844c2674584064d8d459e41a3a809648a62f", "url": "https://api.github.com/repos/rust-lang/rust/commits/8452844c2674584064d8d459e41a3a809648a62f", "html_url": "https://github.com/rust-lang/rust/commit/8452844c2674584064d8d459e41a3a809648a62f"}], "stats": {"total": 99, "additions": 86, "deletions": 13}, "files": [{"sha": "beb23c54c9f0fc7361bd7199073499798dc41ec3", "filename": "crates/rust-analyzer/src/diagnostics/to_proto.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/791cb87cdf47ddfd2a2b1a726dab3aa66ec2bff3/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/791cb87cdf47ddfd2a2b1a726dab3aa66ec2bff3/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs?ref=791cb87cdf47ddfd2a2b1a726dab3aa66ec2bff3", "patch": "@@ -359,14 +359,15 @@ pub(crate) fn map_rust_diagnostic_to_lsp(\n         .iter()\n         .flat_map(|primary_span| {\n             let primary_location = primary_location(config, workspace_root, primary_span, snap);\n-\n-            let mut message = message.clone();\n-            if needs_primary_span_label {\n-                if let Some(primary_span_label) = &primary_span.label {\n-                    format_to!(message, \"\\n{}\", primary_span_label);\n+            let message = {\n+                let mut message = message.clone();\n+                if needs_primary_span_label {\n+                    if let Some(primary_span_label) = &primary_span.label {\n+                        format_to!(message, \"\\n{}\", primary_span_label);\n+                    }\n                 }\n-            }\n-\n+                message\n+            };\n             // Each primary diagnostic span may result in multiple LSP diagnostics.\n             let mut diagnostics = Vec::new();\n \n@@ -417,7 +418,7 @@ pub(crate) fn map_rust_diagnostic_to_lsp(\n                     message: message.clone(),\n                     related_information: Some(information_for_additional_diagnostic),\n                     tags: if tags.is_empty() { None } else { Some(tags.clone()) },\n-                    data: None,\n+                    data: Some(serde_json::json!({ \"rendered\": rd.rendered })),\n                 };\n                 diagnostics.push(MappedRustDiagnostic {\n                     url: secondary_location.uri,\n@@ -449,7 +450,7 @@ pub(crate) fn map_rust_diagnostic_to_lsp(\n                         }\n                     },\n                     tags: if tags.is_empty() { None } else { Some(tags.clone()) },\n-                    data: None,\n+                    data: Some(serde_json::json!({ \"rendered\": rd.rendered })),\n                 },\n                 fix: None,\n             });\n@@ -534,7 +535,8 @@ mod tests {\n             Config::new(workspace_root.to_path_buf(), ClientCapabilities::default()),\n         );\n         let snap = state.snapshot();\n-        let actual = map_rust_diagnostic_to_lsp(&config, &diagnostic, workspace_root, &snap);\n+        let mut actual = map_rust_diagnostic_to_lsp(&config, &diagnostic, workspace_root, &snap);\n+        actual.iter_mut().for_each(|diag| diag.diagnostic.data = None);\n         expect.assert_debug_eq(&actual)\n     }\n "}, {"sha": "b1c3473b825df3428d26634608e795419da459b9", "filename": "editors/code/package.json", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/791cb87cdf47ddfd2a2b1a726dab3aa66ec2bff3/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/791cb87cdf47ddfd2a2b1a726dab3aa66ec2bff3/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=791cb87cdf47ddfd2a2b1a726dab3aa66ec2bff3", "patch": "@@ -396,6 +396,11 @@\n                     \"default\": true,\n                     \"type\": \"boolean\"\n                 },\n+                \"rust-analyzer.diagnostics.previewRustcOutput\": {\n+                    \"markdownDescription\": \"Whether to show the main part of the rendered rustc output of a diagnostic message.\",\n+                    \"default\": false,\n+                    \"type\": \"boolean\"\n+                },\n                 \"$generated-start\": {},\n                 \"rust-analyzer.assist.emitMustUse\": {\n                     \"markdownDescription\": \"Whether to insert #[must_use] when generating `as_` methods\\nfor enum variants.\","}, {"sha": "23e039722ee334ac1634d2c5a0093e2ce1a4ea26", "filename": "editors/code/src/client.ts", "status": "modified", "additions": 40, "deletions": 2, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/791cb87cdf47ddfd2a2b1a726dab3aa66ec2bff3/editors%2Fcode%2Fsrc%2Fclient.ts", "raw_url": "https://github.com/rust-lang/rust/raw/791cb87cdf47ddfd2a2b1a726dab3aa66ec2bff3/editors%2Fcode%2Fsrc%2Fclient.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fclient.ts?ref=791cb87cdf47ddfd2a2b1a726dab3aa66ec2bff3", "patch": "@@ -4,7 +4,7 @@ import * as ra from \"../src/lsp_ext\";\n import * as Is from \"vscode-languageclient/lib/common/utils/is\";\n import { assert } from \"./util\";\n import { WorkspaceEdit } from \"vscode\";\n-import { substituteVSCodeVariables } from \"./config\";\n+import { Config, substituteVSCodeVariables } from \"./config\";\n import { randomUUID } from \"crypto\";\n \n export interface Env {\n@@ -66,7 +66,8 @@ export async function createClient(\n     traceOutputChannel: vscode.OutputChannel,\n     outputChannel: vscode.OutputChannel,\n     initializationOptions: vscode.WorkspaceConfiguration,\n-    serverOptions: lc.ServerOptions\n+    serverOptions: lc.ServerOptions,\n+    config: Config\n ): Promise<lc.LanguageClient> {\n     const clientOptions: lc.LanguageClientOptions = {\n         documentSelector: [{ scheme: \"file\", language: \"rust\" }],\n@@ -99,6 +100,43 @@ export async function createClient(\n                     }\n                 },\n             },\n+            async handleDiagnostics(\n+                uri: vscode.Uri,\n+                diagnostics: vscode.Diagnostic[],\n+                next: lc.HandleDiagnosticsSignature\n+            ) {\n+                const preview = config.previewRustcOutput;\n+                diagnostics.forEach((diag, idx) => {\n+                    // Abuse the fact that VSCode leaks the LSP diagnostics data field through the\n+                    // Diagnostic class, if they ever break this we are out of luck and have to go\n+                    // back to the worst diagnostics experience ever:)\n+\n+                    // We encode the rendered output of a rustc diagnostic in the rendered field of\n+                    // the data payload of the lsp diagnostic. If that field exists, overwrite the\n+                    // diagnostic code such that clicking it opens the diagnostic in a readonly\n+                    // text editor for easy inspection\n+                    const rendered = (diag as unknown as { data?: { rendered?: string } }).data\n+                        ?.rendered;\n+                    if (rendered) {\n+                        if (preview) {\n+                            const index = rendered.match(/^(note|help):/m)?.index || 0;\n+                            diag.message = rendered\n+                                .substring(0, index)\n+                                .replace(/^ -->[^\\n]+\\n/m, \"\");\n+                        }\n+                        diag.code = {\n+                            target: vscode.Uri.from({\n+                                scheme: \"rust-analyzer-diagnostics-view\",\n+                                path: \"/diagnostic message\",\n+                                fragment: uri.toString(),\n+                                query: idx.toString(),\n+                            }),\n+                            value: \"Click for full compiler diagnostic\",\n+                        };\n+                    }\n+                });\n+                return next(uri, diagnostics);\n+            },\n             async provideHover(\n                 document: vscode.TextDocument,\n                 position: vscode.Position,"}, {"sha": "d8dbd1df16dfbceecee1e7249dec38046ccbe41d", "filename": "editors/code/src/config.ts", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/791cb87cdf47ddfd2a2b1a726dab3aa66ec2bff3/editors%2Fcode%2Fsrc%2Fconfig.ts", "raw_url": "https://github.com/rust-lang/rust/raw/791cb87cdf47ddfd2a2b1a726dab3aa66ec2bff3/editors%2Fcode%2Fsrc%2Fconfig.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fconfig.ts?ref=791cb87cdf47ddfd2a2b1a726dab3aa66ec2bff3", "patch": "@@ -238,6 +238,9 @@ export class Config {\n             gotoTypeDef: this.get<boolean>(\"hover.actions.gotoTypeDef.enable\"),\n         };\n     }\n+    get previewRustcOutput() {\n+        return this.get<boolean>(\"diagnostics.previewRustcOutput\");\n+    }\n }\n \n const VarRegex = new RegExp(/\\$\\{(.+?)\\}/g);"}, {"sha": "d6cee5c8fc6100926f7675edb81033759e43dfef", "filename": "editors/code/src/ctx.ts", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/791cb87cdf47ddfd2a2b1a726dab3aa66ec2bff3/editors%2Fcode%2Fsrc%2Fctx.ts", "raw_url": "https://github.com/rust-lang/rust/raw/791cb87cdf47ddfd2a2b1a726dab3aa66ec2bff3/editors%2Fcode%2Fsrc%2Fctx.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fctx.ts?ref=791cb87cdf47ddfd2a2b1a726dab3aa66ec2bff3", "patch": "@@ -179,7 +179,8 @@ export class Ctx {\n                 this.traceOutputChannel,\n                 this.outputChannel,\n                 initializationOptions,\n-                serverOptions\n+                serverOptions,\n+                this.config\n             );\n             this.pushClientCleanup(\n                 this._client.onNotification(ra.serverStatus, (params) =>"}, {"sha": "25f1e83d109cbba173e01bdb336454bb616268a9", "filename": "editors/code/src/main.ts", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/791cb87cdf47ddfd2a2b1a726dab3aa66ec2bff3/editors%2Fcode%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/791cb87cdf47ddfd2a2b1a726dab3aa66ec2bff3/editors%2Fcode%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fmain.ts?ref=791cb87cdf47ddfd2a2b1a726dab3aa66ec2bff3", "patch": "@@ -48,6 +48,30 @@ async function activateServer(ctx: Ctx): Promise<RustAnalyzerExtensionApi> {\n         ctx.pushExtCleanup(activateTaskProvider(ctx.config));\n     }\n \n+    ctx.pushExtCleanup(\n+        vscode.workspace.registerTextDocumentContentProvider(\n+            \"rust-analyzer-diagnostics-view\",\n+            new (class implements vscode.TextDocumentContentProvider {\n+                async provideTextDocumentContent(uri: vscode.Uri): Promise<string> {\n+                    const diags = ctx.client?.diagnostics?.get(\n+                        vscode.Uri.parse(uri.fragment, true)\n+                    );\n+                    if (!diags) {\n+                        return \"Unable to find original rustc diagnostic\";\n+                    }\n+\n+                    const diag = diags[parseInt(uri.query)];\n+                    if (!diag) {\n+                        return \"Unable to find original rustc diagnostic\";\n+                    }\n+                    const rendered = (diag as unknown as { data?: { rendered?: string } }).data\n+                        ?.rendered;\n+                    return rendered ?? \"Unable to find original rustc diagnostic\";\n+                }\n+            })()\n+        )\n+    );\n+\n     vscode.workspace.onDidChangeWorkspaceFolders(\n         async (_) => ctx.onWorkspaceFolderChanges(),\n         null,"}]}