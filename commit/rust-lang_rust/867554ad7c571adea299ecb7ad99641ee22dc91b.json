{"sha": "867554ad7c571adea299ecb7ad99641ee22dc91b", "node_id": "C_kwDOAAsO6NoAKDg2NzU1NGFkN2M1NzFhZGVhMjk5ZWNiN2FkOTk2NDFlZTIyZGM5MWI", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-01-13T23:44:17Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-01-14T03:45:29Z"}, "message": "Fix suggesting turbofish with lifetime arguments", "tree": {"sha": "13e5b1161c683af9530c03d4165e7fe5450f9123", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/13e5b1161c683af9530c03d4165e7fe5450f9123"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/867554ad7c571adea299ecb7ad99641ee22dc91b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/867554ad7c571adea299ecb7ad99641ee22dc91b", "html_url": "https://github.com/rust-lang/rust/commit/867554ad7c571adea299ecb7ad99641ee22dc91b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/867554ad7c571adea299ecb7ad99641ee22dc91b/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "256721ee519f6ff15dc5c1cfaf3ebf9af75efa4a", "url": "https://api.github.com/repos/rust-lang/rust/commits/256721ee519f6ff15dc5c1cfaf3ebf9af75efa4a", "html_url": "https://github.com/rust-lang/rust/commit/256721ee519f6ff15dc5c1cfaf3ebf9af75efa4a"}], "stats": {"total": 176, "additions": 115, "deletions": 61}, "files": [{"sha": "19d6de09dae422b77fd6f5d4c50795e75db52a64", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 23, "deletions": 16, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/867554ad7c571adea299ecb7ad99641ee22dc91b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/867554ad7c571adea299ecb7ad99641ee22dc91b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=867554ad7c571adea299ecb7ad99641ee22dc91b", "patch": "@@ -27,7 +27,7 @@ use std::mem::take;\n use tracing::{debug, trace};\n \n const TURBOFISH_SUGGESTION_STR: &str =\n-    \"use `::<...>` instead of `<...>` to specify type or const arguments\";\n+    \"use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\";\n \n /// Creates a placeholder argument.\n pub(super) fn dummy_arg(ident: Ident) -> Param {\n@@ -731,21 +731,28 @@ impl<'a> Parser<'a> {\n                     match x {\n                         Ok((_, _, false)) => {\n                             if self.eat(&token::Gt) {\n-                                match self.parse_expr() {\n-                                    Ok(_) => {\n-                                        e.span_suggestion_verbose(\n-                                            binop.span.shrink_to_lo(),\n-                                            TURBOFISH_SUGGESTION_STR,\n-                                            \"::\".to_string(),\n-                                            Applicability::MaybeIncorrect,\n-                                        );\n-                                        e.emit();\n-                                        *expr =\n-                                            self.mk_expr_err(expr.span.to(self.prev_token.span));\n-                                        return Ok(());\n-                                    }\n-                                    Err(mut err) => {\n-                                        err.cancel();\n+                                let turbo_err = e.span_suggestion_verbose(\n+                                    binop.span.shrink_to_lo(),\n+                                    TURBOFISH_SUGGESTION_STR,\n+                                    \"::\".to_string(),\n+                                    Applicability::MaybeIncorrect,\n+                                );\n+                                if self.check(&TokenKind::Semi) {\n+                                    turbo_err.emit();\n+                                    *expr = self.mk_expr_err(expr.span);\n+                                    return Ok(());\n+                                } else {\n+                                    match self.parse_expr() {\n+                                        Ok(_) => {\n+                                            turbo_err.emit();\n+                                            *expr = self\n+                                                .mk_expr_err(expr.span.to(self.prev_token.span));\n+                                            return Ok(());\n+                                        }\n+                                        Err(mut err) => {\n+                                            turbo_err.cancel();\n+                                            err.cancel();\n+                                        }\n                                     }\n                                 }\n                             }"}, {"sha": "6991670f8003c43834edd38647be73f7a3e8bff0", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/867554ad7c571adea299ecb7ad99641ee22dc91b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/867554ad7c571adea299ecb7ad99641ee22dc91b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=867554ad7c571adea299ecb7ad99641ee22dc91b", "patch": "@@ -1443,7 +1443,7 @@ impl<'a> Parser<'a> {\n         &mut self,\n         label: Label,\n         attrs: AttrVec,\n-        consume_colon: bool,\n+        mut consume_colon: bool,\n     ) -> PResult<'a, P<Expr>> {\n         let lo = label.ident.span;\n         let label = Some(label);\n@@ -1456,6 +1456,12 @@ impl<'a> Parser<'a> {\n             self.parse_loop_expr(label, lo, attrs)\n         } else if self.check(&token::OpenDelim(token::Brace)) || self.token.is_whole_block() {\n             self.parse_block_expr(label, lo, BlockCheckMode::Default, attrs)\n+        } else if !ate_colon && (self.check(&TokenKind::Comma) || self.check(&TokenKind::Gt)) {\n+            // We're probably inside of a `Path<'a>` that needs a turbofish, so suppress the\n+            // \"must be followed by a colon\" error.\n+            self.diagnostic().delay_span_bug(lo, \"this label wasn't parsed correctly\");\n+            consume_colon = false;\n+            Ok(self.mk_expr_err(lo))\n         } else {\n             let msg = \"expected `while`, `for`, `loop` or `{` after a label\";\n             self.struct_span_err(self.token.span, msg).span_label(self.token.span, msg).emit();"}, {"sha": "a6825b84589438743dae5df33014ae25dab58d16", "filename": "src/test/ui/const-generics/min_const_generics/const-expression-suggest-missing-braces-without-turbofish.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/867554ad7c571adea299ecb7ad99641ee22dc91b/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-expression-suggest-missing-braces-without-turbofish.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/867554ad7c571adea299ecb7ad99641ee22dc91b/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-expression-suggest-missing-braces-without-turbofish.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-expression-suggest-missing-braces-without-turbofish.stderr?ref=867554ad7c571adea299ecb7ad99641ee22dc91b", "patch": "@@ -4,7 +4,7 @@ error: comparison operators cannot be chained\n LL |     foo<BAR + 3>();\n    |        ^       ^\n    |\n-help: use `::<...>` instead of `<...>` to specify type or const arguments\n+help: use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\n    |\n LL |     foo::<BAR + 3>();\n    |        ++\n@@ -15,7 +15,7 @@ error: comparison operators cannot be chained\n LL |     foo<BAR + BAR>();\n    |        ^         ^\n    |\n-help: use `::<...>` instead of `<...>` to specify type or const arguments\n+help: use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\n    |\n LL |     foo::<BAR + BAR>();\n    |        ++\n@@ -26,7 +26,7 @@ error: comparison operators cannot be chained\n LL |     foo<3 + 3>();\n    |        ^     ^\n    |\n-help: use `::<...>` instead of `<...>` to specify type or const arguments\n+help: use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\n    |\n LL |     foo::<3 + 3>();\n    |        ++\n@@ -37,7 +37,7 @@ error: comparison operators cannot be chained\n LL |     foo<BAR - 3>();\n    |        ^       ^\n    |\n-help: use `::<...>` instead of `<...>` to specify type or const arguments\n+help: use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\n    |\n LL |     foo::<BAR - 3>();\n    |        ++\n@@ -48,7 +48,7 @@ error: comparison operators cannot be chained\n LL |     foo<BAR - BAR>();\n    |        ^         ^\n    |\n-help: use `::<...>` instead of `<...>` to specify type or const arguments\n+help: use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\n    |\n LL |     foo::<BAR - BAR>();\n    |        ++\n@@ -59,7 +59,7 @@ error: comparison operators cannot be chained\n LL |     foo<100 - BAR>();\n    |        ^         ^\n    |\n-help: use `::<...>` instead of `<...>` to specify type or const arguments\n+help: use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\n    |\n LL |     foo::<100 - BAR>();\n    |        ++\n@@ -70,7 +70,7 @@ error: comparison operators cannot be chained\n LL |     foo<bar<i32>()>();\n    |        ^   ^\n    |\n-help: use `::<...>` instead of `<...>` to specify type or const arguments\n+help: use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\n    |\n LL |     foo::<bar<i32>()>();\n    |        ++\n@@ -87,7 +87,7 @@ error: comparison operators cannot be chained\n LL |     foo<bar::<i32>()>();\n    |        ^            ^\n    |\n-help: use `::<...>` instead of `<...>` to specify type or const arguments\n+help: use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\n    |\n LL |     foo::<bar::<i32>()>();\n    |        ++\n@@ -98,7 +98,7 @@ error: comparison operators cannot be chained\n LL |     foo<bar::<i32>() + BAR>();\n    |        ^                  ^\n    |\n-help: use `::<...>` instead of `<...>` to specify type or const arguments\n+help: use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\n    |\n LL |     foo::<bar::<i32>() + BAR>();\n    |        ++\n@@ -109,7 +109,7 @@ error: comparison operators cannot be chained\n LL |     foo<bar::<i32>() - BAR>();\n    |        ^                  ^\n    |\n-help: use `::<...>` instead of `<...>` to specify type or const arguments\n+help: use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\n    |\n LL |     foo::<bar::<i32>() - BAR>();\n    |        ++\n@@ -120,7 +120,7 @@ error: comparison operators cannot be chained\n LL |     foo<BAR - bar::<i32>()>();\n    |        ^                  ^\n    |\n-help: use `::<...>` instead of `<...>` to specify type or const arguments\n+help: use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\n    |\n LL |     foo::<BAR - bar::<i32>()>();\n    |        ++\n@@ -131,7 +131,7 @@ error: comparison operators cannot be chained\n LL |     foo<BAR - bar::<i32>()>();\n    |        ^                  ^\n    |\n-help: use `::<...>` instead of `<...>` to specify type or const arguments\n+help: use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\n    |\n LL |     foo::<BAR - bar::<i32>()>();\n    |        ++"}, {"sha": "d0249efd094ffd5790382203e31222f1ee2bd88c", "filename": "src/test/ui/did_you_mean/issue-40396.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/867554ad7c571adea299ecb7ad99641ee22dc91b/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40396.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/867554ad7c571adea299ecb7ad99641ee22dc91b/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40396.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40396.stderr?ref=867554ad7c571adea299ecb7ad99641ee22dc91b", "patch": "@@ -4,7 +4,7 @@ error: comparison operators cannot be chained\n LL |     (0..13).collect<Vec<i32>>();\n    |                    ^   ^\n    |\n-help: use `::<...>` instead of `<...>` to specify type or const arguments\n+help: use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\n    |\n LL |     (0..13).collect::<Vec<i32>>();\n    |                    ++\n@@ -15,7 +15,7 @@ error: comparison operators cannot be chained\n LL |     Vec<i32>::new();\n    |        ^   ^\n    |\n-help: use `::<...>` instead of `<...>` to specify type or const arguments\n+help: use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\n    |\n LL |     Vec::<i32>::new();\n    |        ++\n@@ -26,7 +26,7 @@ error: comparison operators cannot be chained\n LL |     (0..13).collect<Vec<i32>();\n    |                    ^   ^\n    |\n-help: use `::<...>` instead of `<...>` to specify type or const arguments\n+help: use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\n    |\n LL |     (0..13).collect::<Vec<i32>();\n    |                    ++\n@@ -37,7 +37,7 @@ error: expected one of `!`, `.`, `::`, `;`, `?`, `else`, `{`, or an operator, fo\n LL |     let x = std::collections::HashMap<i128, i128>::new();\n    |                                           ^ expected one of 8 possible tokens\n    |\n-help: use `::<...>` instead of `<...>` to specify type or const arguments\n+help: use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\n    |\n LL |     let x = std::collections::HashMap::<i128, i128>::new();\n    |                                      ++\n@@ -48,7 +48,7 @@ error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found\n LL |         std::collections::HashMap<i128, i128>::new()\n    |                                       ^ expected one of 8 possible tokens\n    |\n-help: use `::<...>` instead of `<...>` to specify type or const arguments\n+help: use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\n    |\n LL |         std::collections::HashMap::<i128, i128>::new()\n    |                                  ++\n@@ -59,7 +59,7 @@ error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found\n LL |         std::collections::HashMap<i128, i128>::new();\n    |                                       ^ expected one of 8 possible tokens\n    |\n-help: use `::<...>` instead of `<...>` to specify type or const arguments\n+help: use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\n    |\n LL |         std::collections::HashMap::<i128, i128>::new();\n    |                                  ++\n@@ -70,7 +70,7 @@ error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found\n LL |         std::collections::HashMap<i128, i128>::new(1, 2);\n    |                                       ^ expected one of 8 possible tokens\n    |\n-help: use `::<...>` instead of `<...>` to specify type or const arguments\n+help: use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\n    |\n LL |         std::collections::HashMap::<i128, i128>::new(1, 2);\n    |                                  ++"}, {"sha": "68636f6b907ef7448d2dc922408ff2f544a424d8", "filename": "src/test/ui/parser/require-parens-for-chained-comparison.rs", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/867554ad7c571adea299ecb7ad99641ee22dc91b/src%2Ftest%2Fui%2Fparser%2Frequire-parens-for-chained-comparison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/867554ad7c571adea299ecb7ad99641ee22dc91b/src%2Ftest%2Fui%2Fparser%2Frequire-parens-for-chained-comparison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frequire-parens-for-chained-comparison.rs?ref=867554ad7c571adea299ecb7ad99641ee22dc91b", "patch": "@@ -1,6 +1,3 @@\n-fn f<T>() {}\n-struct X;\n-\n fn main() {\n     false == false == false;\n     //~^ ERROR comparison operators cannot be chained\n@@ -12,15 +9,26 @@ fn main() {\n \n     f<X>();\n     //~^ ERROR comparison operators cannot be chained\n-    //~| HELP use `::<...>` instead of `<...>` to specify type or const arguments\n+    //~| HELP use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\n \n     f<Result<Option<X>, Option<Option<X>>>(1, 2);\n     //~^ ERROR comparison operators cannot be chained\n-    //~| HELP use `::<...>` instead of `<...>` to specify type or const arguments\n+    //~| HELP use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\n+\n+    let _ = f<u8, i8>();\n+    //~^ ERROR expected one of\n+    //~| HELP use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\n+\n+    let _ = f<'_, i8>();\n+    //~^ ERROR expected one of\n+    //~| HELP use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\n+\n+    f<'_>();\n+    //~^ comparison operators cannot be chained\n+    //~| HELP use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\n \n-    use std::convert::identity;\n-    let _ = identity<u8>;\n+    let _ = f<u8>;\n     //~^ ERROR comparison operators cannot be chained\n-    //~| HELP use `::<...>` instead of `<...>` to specify type or const arguments\n+    //~| HELP use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\n     //~| HELP or use `(...)` if you meant to specify fn arguments\n }"}, {"sha": "cde6f8c674f4b5c53c61a5e43c70f046456a7f83", "filename": "src/test/ui/parser/require-parens-for-chained-comparison.stderr", "status": "modified", "additions": 44, "deletions": 11, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/867554ad7c571adea299ecb7ad99641ee22dc91b/src%2Ftest%2Fui%2Fparser%2Frequire-parens-for-chained-comparison.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/867554ad7c571adea299ecb7ad99641ee22dc91b/src%2Ftest%2Fui%2Fparser%2Frequire-parens-for-chained-comparison.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frequire-parens-for-chained-comparison.stderr?ref=867554ad7c571adea299ecb7ad99641ee22dc91b", "patch": "@@ -1,5 +1,5 @@\n error: comparison operators cannot be chained\n-  --> $DIR/require-parens-for-chained-comparison.rs:5:11\n+  --> $DIR/require-parens-for-chained-comparison.rs:2:11\n    |\n LL |     false == false == false;\n    |           ^^       ^^\n@@ -10,7 +10,7 @@ LL |     false == false && false == false;\n    |                    ++++++++\n \n error: comparison operators cannot be chained\n-  --> $DIR/require-parens-for-chained-comparison.rs:9:11\n+  --> $DIR/require-parens-for-chained-comparison.rs:6:11\n    |\n LL |     false == 0 < 2;\n    |           ^^   ^\n@@ -21,35 +21,68 @@ LL |     false == (0 < 2);\n    |              +     +\n \n error: comparison operators cannot be chained\n-  --> $DIR/require-parens-for-chained-comparison.rs:13:6\n+  --> $DIR/require-parens-for-chained-comparison.rs:10:6\n    |\n LL |     f<X>();\n    |      ^ ^\n    |\n-help: use `::<...>` instead of `<...>` to specify type or const arguments\n+help: use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\n    |\n LL |     f::<X>();\n    |      ++\n \n error: comparison operators cannot be chained\n-  --> $DIR/require-parens-for-chained-comparison.rs:17:6\n+  --> $DIR/require-parens-for-chained-comparison.rs:14:6\n    |\n LL |     f<Result<Option<X>, Option<Option<X>>>(1, 2);\n    |      ^      ^\n    |\n-help: use `::<...>` instead of `<...>` to specify type or const arguments\n+help: use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\n    |\n LL |     f::<Result<Option<X>, Option<Option<X>>>(1, 2);\n    |      ++\n \n+error: expected one of `!`, `.`, `::`, `;`, `?`, `else`, `{`, or an operator, found `,`\n+  --> $DIR/require-parens-for-chained-comparison.rs:18:17\n+   |\n+LL |     let _ = f<u8, i8>();\n+   |                 ^ expected one of 8 possible tokens\n+   |\n+help: use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\n+   |\n+LL |     let _ = f::<u8, i8>();\n+   |              ++\n+\n+error: expected one of `.`, `:`, `;`, `?`, `else`, `for`, `loop`, `while`, `{`, or an operator, found `,`\n+  --> $DIR/require-parens-for-chained-comparison.rs:22:17\n+   |\n+LL |     let _ = f<'_, i8>();\n+   |                 ^ expected one of 10 possible tokens\n+   |\n+help: use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\n+   |\n+LL |     let _ = f::<'_, i8>();\n+   |              ++\n+\n+error: comparison operators cannot be chained\n+  --> $DIR/require-parens-for-chained-comparison.rs:26:6\n+   |\n+LL |     f<'_>();\n+   |      ^  ^\n+   |\n+help: use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\n+   |\n+LL |     f::<'_>();\n+   |      ++\n+\n error: comparison operators cannot be chained\n-  --> $DIR/require-parens-for-chained-comparison.rs:22:21\n+  --> $DIR/require-parens-for-chained-comparison.rs:30:14\n    |\n-LL |     let _ = identity<u8>;\n-   |                     ^  ^\n+LL |     let _ = f<u8>;\n+   |              ^  ^\n    |\n-   = help: use `::<...>` instead of `<...>` to specify type or const arguments\n+   = help: use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\n    = help: or use `(...)` if you meant to specify fn arguments\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 8 previous errors\n "}, {"sha": "72f0f45fb83802ffb20250c0c63ee291e0c6b6a2", "filename": "src/test/ui/suggestions/issue-82566-1.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/867554ad7c571adea299ecb7ad99641ee22dc91b/src%2Ftest%2Fui%2Fsuggestions%2Fissue-82566-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/867554ad7c571adea299ecb7ad99641ee22dc91b/src%2Ftest%2Fui%2Fsuggestions%2Fissue-82566-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-82566-1.stderr?ref=867554ad7c571adea299ecb7ad99641ee22dc91b", "patch": "@@ -4,7 +4,7 @@ error: comparison operators cannot be chained\n LL |     T1<1>::C;\n    |       ^ ^\n    |\n-help: use `::<...>` instead of `<...>` to specify type or const arguments\n+help: use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\n    |\n LL |     T1::<1>::C;\n    |       ++\n@@ -15,7 +15,7 @@ error: expected one of `.`, `;`, `?`, `}`, or an operator, found `,`\n LL |     T2<1, 2>::C;\n    |         ^ expected one of `.`, `;`, `?`, `}`, or an operator\n    |\n-help: use `::<...>` instead of `<...>` to specify type or const arguments\n+help: use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\n    |\n LL |     T2::<1, 2>::C;\n    |       ++\n@@ -26,7 +26,7 @@ error: expected one of `.`, `;`, `?`, `}`, or an operator, found `,`\n LL |     T3<1, 2, 3>::C;\n    |         ^ expected one of `.`, `;`, `?`, `}`, or an operator\n    |\n-help: use `::<...>` instead of `<...>` to specify type or const arguments\n+help: use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\n    |\n LL |     T3::<1, 2, 3>::C;\n    |       ++"}, {"sha": "ef9a414307cc9128c4342dd641478cc0ec3a8291", "filename": "src/test/ui/suggestions/issue-82566-2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/867554ad7c571adea299ecb7ad99641ee22dc91b/src%2Ftest%2Fui%2Fsuggestions%2Fissue-82566-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/867554ad7c571adea299ecb7ad99641ee22dc91b/src%2Ftest%2Fui%2Fsuggestions%2Fissue-82566-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-82566-2.stderr?ref=867554ad7c571adea299ecb7ad99641ee22dc91b", "patch": "@@ -4,7 +4,7 @@ error: comparison operators cannot be chained\n LL | fn foo1() -> [(); Foo1<10>::SUM] {\n    |                       ^  ^\n    |\n-help: use `::<...>` instead of `<...>` to specify type or const arguments\n+help: use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\n    |\n LL | fn foo1() -> [(); Foo1::<10>::SUM] {\n    |                       ++\n@@ -15,7 +15,7 @@ error: expected one of `.`, `?`, `]`, or an operator, found `,`\n LL | fn foo2() -> [(); Foo2<10, 20>::SUM] {\n    |                          ^ expected one of `.`, `?`, `]`, or an operator\n    |\n-help: use `::<...>` instead of `<...>` to specify type or const arguments\n+help: use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\n    |\n LL | fn foo2() -> [(); Foo2::<10, 20>::SUM] {\n    |                       ++\n@@ -26,7 +26,7 @@ error: expected one of `.`, `?`, `]`, or an operator, found `,`\n LL | fn foo3() -> [(); Foo3<10, 20, 30>::SUM] {\n    |                          ^ expected one of `.`, `?`, `]`, or an operator\n    |\n-help: use `::<...>` instead of `<...>` to specify type or const arguments\n+help: use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\n    |\n LL | fn foo3() -> [(); Foo3::<10, 20, 30>::SUM] {\n    |                       ++"}]}