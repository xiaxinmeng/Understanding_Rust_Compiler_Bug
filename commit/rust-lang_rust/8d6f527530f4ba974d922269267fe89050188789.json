{"sha": "8d6f527530f4ba974d922269267fe89050188789", "node_id": "C_kwDOAAsO6NoAKDhkNmY1Mjc1MzBmNGJhOTc0ZDkyMjI2OTI2N2ZlODkwNTAxODg3ODk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-28T23:38:05Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-28T23:38:05Z"}, "message": "Auto merge of #94299 - oli-obk:stable_hash_ty, r=michaelwoerister\n\nCaching the stable hash of Ty within itself\n\nInstead of computing stable hashes on types as needed, we compute it during interning.\n\nThis way we can, when a hash is requested, just hash that hash, which is significantly faster than traversing the type itself.\n\nWe only do this for incremental for now, as incremental is the only frequent user of stable hashing.\n\nAs a next step we can try out\n\n* moving the hash and TypeFlags to Interner, so projections and regions get the same benefit (tho regions are not nested, so maybe that's not a good idea? Would be nice for dedup tho)\n* start comparing types via their stable hash instead of their address?", "tree": {"sha": "6f0eba207e82767b7b12521fa543e915a97f10fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6f0eba207e82767b7b12521fa543e915a97f10fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d6f527530f4ba974d922269267fe89050188789", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d6f527530f4ba974d922269267fe89050188789", "html_url": "https://github.com/rust-lang/rust/commit/8d6f527530f4ba974d922269267fe89050188789", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d6f527530f4ba974d922269267fe89050188789/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ce3749235fc31d15ebd444b038a9877e8c700d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ce3749235fc31d15ebd444b038a9877e8c700d7", "html_url": "https://github.com/rust-lang/rust/commit/4ce3749235fc31d15ebd444b038a9877e8c700d7"}, {"sha": "5875d7b03c4dba91be95cacd3f02bdb7ccc90a0e", "url": "https://api.github.com/repos/rust-lang/rust/commits/5875d7b03c4dba91be95cacd3f02bdb7ccc90a0e", "html_url": "https://github.com/rust-lang/rust/commit/5875d7b03c4dba91be95cacd3f02bdb7ccc90a0e"}], "stats": {"total": 80, "additions": 67, "deletions": 13}, "files": [{"sha": "f9435682e5394028a14692fea05bc7c04e8e26f9", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 34, "deletions": 5, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/8d6f527530f4ba974d922269267fe89050188789/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d6f527530f4ba974d922269267fe89050188789/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=8d6f527530f4ba974d922269267fe89050188789", "patch": "@@ -24,6 +24,7 @@ use crate::ty::{\n     RegionKind, ReprOptions, TraitObjectVisitor, Ty, TyKind, TyS, TyVar, TyVid, TypeAndMut, UintTy,\n };\n use rustc_ast as ast;\n+use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::intern::Interned;\n use rustc_data_structures::memmap::Mmap;\n@@ -58,6 +59,7 @@ use rustc_span::{Span, DUMMY_SP};\n use rustc_target::abi::{Layout, TargetDataLayout, VariantIdx};\n use rustc_target::spec::abi;\n \n+use rustc_type_ir::TypeFlags;\n use smallvec::SmallVec;\n use std::any::Any;\n use std::borrow::Borrow;\n@@ -140,16 +142,39 @@ impl<'tcx> CtxtInterners<'tcx> {\n     /// Interns a type.\n     #[allow(rustc::usage_of_ty_tykind)]\n     #[inline(never)]\n-    fn intern_ty(&self, kind: TyKind<'tcx>) -> Ty<'tcx> {\n+    fn intern_ty(\n+        &self,\n+        kind: TyKind<'tcx>,\n+        sess: &Session,\n+        resolutions: &ty::ResolverOutputs,\n+    ) -> Ty<'tcx> {\n         Ty(Interned::new_unchecked(\n             self.type_\n                 .intern(kind, |kind| {\n                     let flags = super::flags::FlagComputation::for_kind(&kind);\n \n+                    // It's impossible to hash inference regions (and will ICE), so we don't need to try to cache them.\n+                    // Without incremental, we rarely stable-hash types, so let's not do it proactively.\n+                    let stable_hash = if flags.flags.intersects(TypeFlags::HAS_RE_INFER)\n+                        || sess.opts.incremental.is_none()\n+                    {\n+                        Fingerprint::ZERO\n+                    } else {\n+                        let mut hasher = StableHasher::new();\n+                        let mut hcx = StableHashingContext::ignore_spans(\n+                            sess,\n+                            &resolutions.definitions,\n+                            &*resolutions.cstore,\n+                        );\n+                        kind.hash_stable(&mut hcx, &mut hasher);\n+                        hasher.finish()\n+                    };\n+\n                     let ty_struct = TyS {\n                         kind,\n                         flags: flags.flags,\n                         outer_exclusive_binder: flags.outer_exclusive_binder,\n+                        stable_hash,\n                     };\n \n                     InternedInSet(self.arena.alloc(ty_struct))\n@@ -887,8 +912,12 @@ pub enum UserType<'tcx> {\n }\n \n impl<'tcx> CommonTypes<'tcx> {\n-    fn new(interners: &CtxtInterners<'tcx>) -> CommonTypes<'tcx> {\n-        let mk = |ty| interners.intern_ty(ty);\n+    fn new(\n+        interners: &CtxtInterners<'tcx>,\n+        sess: &Session,\n+        resolutions: &ty::ResolverOutputs,\n+    ) -> CommonTypes<'tcx> {\n+        let mk = |ty| interners.intern_ty(ty, sess, resolutions);\n \n         CommonTypes {\n             unit: mk(Tuple(List::empty())),\n@@ -1162,7 +1191,7 @@ impl<'tcx> TyCtxt<'tcx> {\n             s.fatal(&err);\n         });\n         let interners = CtxtInterners::new(arena);\n-        let common_types = CommonTypes::new(&interners);\n+        let common_types = CommonTypes::new(&interners, s, &resolutions);\n         let common_lifetimes = CommonLifetimes::new(&interners);\n         let common_consts = CommonConsts::new(&interners, &common_types);\n \n@@ -2276,7 +2305,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     #[allow(rustc::usage_of_ty_tykind)]\n     #[inline]\n     pub fn mk_ty(self, st: TyKind<'tcx>) -> Ty<'tcx> {\n-        self.interners.intern_ty(st)\n+        self.interners.intern_ty(st, self.sess, &self.gcx.untracked_resolutions)\n     }\n \n     #[inline]"}, {"sha": "6edcfbcdc6cee4aede45772a6cc2a85bdd115107", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 29, "deletions": 4, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/8d6f527530f4ba974d922269267fe89050188789/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d6f527530f4ba974d922269267fe89050188789/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=8d6f527530f4ba974d922269267fe89050188789", "patch": "@@ -17,6 +17,7 @@ pub use self::Variance::*;\n pub use adt::*;\n pub use assoc::*;\n pub use generics::*;\n+use rustc_data_structures::fingerprint::Fingerprint;\n pub use vtable::*;\n \n use crate::metadata::ModChild;\n@@ -30,7 +31,7 @@ use rustc_ast as ast;\n use rustc_attr as attr;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexMap};\n use rustc_data_structures::intern::Interned;\n-use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n+use rustc_data_structures::stable_hasher::{HashStable, NodeIdHashingMode, StableHasher};\n use rustc_data_structures::tagged_ptr::CopyTaggedPtr;\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, CtorOf, DefKind, Res};\n@@ -424,11 +425,15 @@ crate struct TyS<'tcx> {\n     /// De Bruijn indices within the type are contained within `0..D`\n     /// (exclusive).\n     outer_exclusive_binder: ty::DebruijnIndex,\n+\n+    /// The stable hash of the type. This way hashing of types will not have to work\n+    /// on the address of the type anymore, but can instead just read this field\n+    stable_hash: Fingerprint,\n }\n \n // `TyS` is used a lot. Make sure it doesn't unintentionally get bigger.\n #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-static_assert_size!(TyS<'_>, 40);\n+static_assert_size!(TyS<'_>, 56);\n \n /// Use this rather than `TyS`, whenever possible.\n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]\n@@ -442,21 +447,41 @@ static BOOL_TYS: TyS<'static> = TyS {\n     kind: ty::Bool,\n     flags: TypeFlags::empty(),\n     outer_exclusive_binder: DebruijnIndex::from_usize(0),\n+    stable_hash: Fingerprint::ZERO,\n };\n \n impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for Ty<'tcx> {\n     fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n         let TyS {\n-            ref kind,\n+            kind,\n \n             // The other fields just provide fast access to information that is\n             // also contained in `kind`, so no need to hash them.\n             flags: _,\n \n             outer_exclusive_binder: _,\n+\n+            stable_hash,\n         } = self.0.0;\n \n-        kind.hash_stable(hcx, hasher);\n+        if *stable_hash == Fingerprint::ZERO {\n+            // No cached hash available. This can only mean that incremental is disabled.\n+            // We don't cache stable hashes in non-incremental mode, because they are used\n+            // so rarely that the performance actually suffers.\n+\n+            let stable_hash: Fingerprint = {\n+                let mut hasher = StableHasher::new();\n+                hcx.while_hashing_spans(false, |hcx| {\n+                    hcx.with_node_id_hashing_mode(NodeIdHashingMode::HashDefPath, |hcx| {\n+                        kind.hash_stable(hcx, &mut hasher)\n+                    })\n+                });\n+                hasher.finish()\n+            };\n+            stable_hash.hash_stable(hcx, hasher);\n+        } else {\n+            stable_hash.hash_stable(hcx, hasher);\n+        }\n     }\n }\n "}, {"sha": "e4d58d3ccdb29b5994582e4d4fc2eb9b7b7e5d0e", "filename": "src/test/ui/symbol-names/basic.legacy.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8d6f527530f4ba974d922269267fe89050188789/src%2Ftest%2Fui%2Fsymbol-names%2Fbasic.legacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d6f527530f4ba974d922269267fe89050188789/src%2Ftest%2Fui%2Fsymbol-names%2Fbasic.legacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fbasic.legacy.stderr?ref=8d6f527530f4ba974d922269267fe89050188789", "patch": "@@ -1,10 +1,10 @@\n-error: symbol-name(_ZN5basic4main17h611df9c6948c15f7E)\n+error: symbol-name(_ZN5basic4main17h87acd86b3a6f1754E)\n   --> $DIR/basic.rs:8:1\n    |\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(basic::main::h611df9c6948c15f7)\n+error: demangling(basic::main::h87acd86b3a6f1754)\n   --> $DIR/basic.rs:8:1\n    |\n LL | #[rustc_symbol_name]"}, {"sha": "c987ebc534302c852aec85945fbce5125aea38c5", "filename": "src/test/ui/symbol-names/issue-60925.legacy.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8d6f527530f4ba974d922269267fe89050188789/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-60925.legacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d6f527530f4ba974d922269267fe89050188789/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-60925.legacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-60925.legacy.stderr?ref=8d6f527530f4ba974d922269267fe89050188789", "patch": "@@ -1,10 +1,10 @@\n-error: symbol-name(_ZN11issue_609253foo37Foo$LT$issue_60925..llv$u6d$..Foo$GT$3foo17h5425dadb5b1e5fb6E)\n+error: symbol-name(_ZN11issue_609253foo37Foo$LT$issue_60925..llv$u6d$..Foo$GT$3foo17h8d22952c45e20d65E)\n   --> $DIR/issue-60925.rs:21:9\n    |\n LL |         #[rustc_symbol_name]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(issue_60925::foo::Foo<issue_60925::llvm::Foo>::foo::h5425dadb5b1e5fb6)\n+error: demangling(issue_60925::foo::Foo<issue_60925::llvm::Foo>::foo::h8d22952c45e20d65)\n   --> $DIR/issue-60925.rs:21:9\n    |\n LL |         #[rustc_symbol_name]"}]}