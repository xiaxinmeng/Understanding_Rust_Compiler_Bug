{"sha": "7fde08365c4c3cfc9a9f8a6a02693b789adbe6da", "node_id": "C_kwDOAAsO6NoAKDdmZGUwODM2NWM0YzNjZmM5YTlmOGE2YTAyNjkzYjc4OWFkYmU2ZGE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-20T04:08:03Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-20T04:08:03Z"}, "message": "Auto merge of #110399 - cjgillot:infer-variance, r=aliemjay\n\nAccount for opaque variance in outlives\n\nFixes https://github.com/rust-lang/rust/issues/108591\nFixes https://github.com/rust-lang/rust/issues/108592\ncc `@aliemjay`", "tree": {"sha": "daf638e8744da5d824d5f7a0b6b9cdeb3b5b8898", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/daf638e8744da5d824d5f7a0b6b9cdeb3b5b8898"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7fde08365c4c3cfc9a9f8a6a02693b789adbe6da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7fde08365c4c3cfc9a9f8a6a02693b789adbe6da", "html_url": "https://github.com/rust-lang/rust/commit/7fde08365c4c3cfc9a9f8a6a02693b789adbe6da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7fde08365c4c3cfc9a9f8a6a02693b789adbe6da/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc730521efad6acf9b31fcc99c8a26789fa9a654", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc730521efad6acf9b31fcc99c8a26789fa9a654", "html_url": "https://github.com/rust-lang/rust/commit/dc730521efad6acf9b31fcc99c8a26789fa9a654"}, {"sha": "8fc1d68413b98cd50e6e55b6e33145ccd584b6a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/8fc1d68413b98cd50e6e55b6e33145ccd584b6a1", "html_url": "https://github.com/rust-lang/rust/commit/8fc1d68413b98cd50e6e55b6e33145ccd584b6a1"}], "stats": {"total": 129, "additions": 116, "deletions": 13}, "files": [{"sha": "cb63d2f18b63485ae95ffb76303a04c221b5f2ee", "filename": "compiler/rustc_infer/src/infer/outlives/components.rs", "status": "modified", "additions": 38, "deletions": 2, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/7fde08365c4c3cfc9a9f8a6a02693b789adbe6da/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fcomponents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fde08365c4c3cfc9a9f8a6a02693b789adbe6da/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fcomponents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fcomponents.rs?ref=7fde08365c4c3cfc9a9f8a6a02693b789adbe6da", "patch": "@@ -143,7 +143,7 @@ fn compute_components<'tcx>(\n                     // through and constrain Pi.\n                     let mut subcomponents = smallvec![];\n                     let mut subvisited = SsoHashSet::new();\n-                    compute_components_recursive(tcx, ty.into(), &mut subcomponents, &mut subvisited);\n+                    compute_alias_components_recursive(tcx, ty, &mut subcomponents, &mut subvisited);\n                     out.push(Component::EscapingAlias(subcomponents.into_iter().collect()));\n                 }\n             }\n@@ -193,7 +193,43 @@ fn compute_components<'tcx>(\n ///\n /// This should not be used to get the components of `parent` itself.\n /// Use [push_outlives_components] instead.\n-pub(super) fn compute_components_recursive<'tcx>(\n+pub(super) fn compute_alias_components_recursive<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    alias_ty: Ty<'tcx>,\n+    out: &mut SmallVec<[Component<'tcx>; 4]>,\n+    visited: &mut SsoHashSet<GenericArg<'tcx>>,\n+) {\n+    let ty::Alias(kind, alias_ty) = alias_ty.kind() else { bug!() };\n+    let opt_variances = if *kind == ty::Opaque { tcx.variances_of(alias_ty.def_id) } else { &[] };\n+    for (index, child) in alias_ty.substs.iter().enumerate() {\n+        if opt_variances.get(index) == Some(&ty::Bivariant) {\n+            continue;\n+        }\n+        if !visited.insert(child) {\n+            continue;\n+        }\n+        match child.unpack() {\n+            GenericArgKind::Type(ty) => {\n+                compute_components(tcx, ty, out, visited);\n+            }\n+            GenericArgKind::Lifetime(lt) => {\n+                // Ignore late-bound regions.\n+                if !lt.is_late_bound() {\n+                    out.push(Component::Region(lt));\n+                }\n+            }\n+            GenericArgKind::Const(_) => {\n+                compute_components_recursive(tcx, child, out, visited);\n+            }\n+        }\n+    }\n+}\n+\n+/// Collect [Component]s for *all* the substs of `parent`.\n+///\n+/// This should not be used to get the components of `parent` itself.\n+/// Use [push_outlives_components] instead.\n+fn compute_components_recursive<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     parent: GenericArg<'tcx>,\n     out: &mut SmallVec<[Component<'tcx>; 4]>,"}, {"sha": "2f5e2e417a6fd44a288c15966c3c0032d5850bbb", "filename": "compiler/rustc_infer/src/infer/outlives/obligations.rs", "status": "modified", "additions": 20, "deletions": 9, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/7fde08365c4c3cfc9a9f8a6a02693b789adbe6da/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fde08365c4c3cfc9a9f8a6a02693b789adbe6da/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs?ref=7fde08365c4c3cfc9a9f8a6a02693b789adbe6da", "patch": "@@ -344,12 +344,14 @@ where\n         // the problem is to add `T: 'r`, which isn't true. So, if there are no\n         // inference variables, we use a verify constraint instead of adding\n         // edges, which winds up enforcing the same condition.\n+        let is_opaque = alias_ty.kind(self.tcx) == ty::Opaque;\n         if approx_env_bounds.is_empty()\n             && trait_bounds.is_empty()\n-            && (alias_ty.needs_infer() || alias_ty.kind(self.tcx) == ty::Opaque)\n+            && (alias_ty.needs_infer() || is_opaque)\n         {\n             debug!(\"no declared bounds\");\n-            self.substs_must_outlive(alias_ty.substs, origin, region);\n+            let opt_variances = is_opaque.then(|| self.tcx.variances_of(alias_ty.def_id));\n+            self.substs_must_outlive(alias_ty.substs, origin, region, opt_variances);\n             return;\n         }\n \n@@ -395,22 +397,31 @@ where\n         self.delegate.push_verify(origin, GenericKind::Alias(alias_ty), region, verify_bound);\n     }\n \n+    #[instrument(level = \"debug\", skip(self))]\n     fn substs_must_outlive(\n         &mut self,\n         substs: SubstsRef<'tcx>,\n         origin: infer::SubregionOrigin<'tcx>,\n         region: ty::Region<'tcx>,\n+        opt_variances: Option<&[ty::Variance]>,\n     ) {\n         let constraint = origin.to_constraint_category();\n-        for k in substs {\n+        for (index, k) in substs.iter().enumerate() {\n             match k.unpack() {\n                 GenericArgKind::Lifetime(lt) => {\n-                    self.delegate.push_sub_region_constraint(\n-                        origin.clone(),\n-                        region,\n-                        lt,\n-                        constraint,\n-                    );\n+                    let variance = if let Some(variances) = opt_variances {\n+                        variances[index]\n+                    } else {\n+                        ty::Invariant\n+                    };\n+                    if variance == ty::Invariant {\n+                        self.delegate.push_sub_region_constraint(\n+                            origin.clone(),\n+                            region,\n+                            lt,\n+                            constraint,\n+                        );\n+                    }\n                 }\n                 GenericArgKind::Type(ty) => {\n                     self.type_must_outlive(origin.clone(), ty, region, constraint);"}, {"sha": "e1cb53bc71d330072e214e9eabf6e51620e13fb6", "filename": "compiler/rustc_infer/src/infer/outlives/verify.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7fde08365c4c3cfc9a9f8a6a02693b789adbe6da/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fverify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fde08365c4c3cfc9a9f8a6a02693b789adbe6da/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fverify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fverify.rs?ref=7fde08365c4c3cfc9a9f8a6a02693b789adbe6da", "patch": "@@ -1,4 +1,4 @@\n-use crate::infer::outlives::components::{compute_components_recursive, Component};\n+use crate::infer::outlives::components::{compute_alias_components_recursive, Component};\n use crate::infer::outlives::env::RegionBoundPairs;\n use crate::infer::region_constraints::VerifyIfEq;\n use crate::infer::VerifyBound;\n@@ -130,7 +130,12 @@ impl<'cx, 'tcx> VerifyBoundCx<'cx, 'tcx> {\n         // see the extensive comment in projection_must_outlive\n         let recursive_bound = {\n             let mut components = smallvec![];\n-            compute_components_recursive(self.tcx, alias_ty_as_ty.into(), &mut components, visited);\n+            compute_alias_components_recursive(\n+                self.tcx,\n+                alias_ty_as_ty.into(),\n+                &mut components,\n+                visited,\n+            );\n             self.bound_from_components(&components, visited)\n         };\n "}, {"sha": "6b9d14941f237c11c38bbfbbda21e261a19f11d6", "filename": "tests/ui/impl-trait/issue-108591.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/7fde08365c4c3cfc9a9f8a6a02693b789adbe6da/tests%2Fui%2Fimpl-trait%2Fissue-108591.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fde08365c4c3cfc9a9f8a6a02693b789adbe6da/tests%2Fui%2Fimpl-trait%2Fissue-108591.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fissue-108591.rs?ref=7fde08365c4c3cfc9a9f8a6a02693b789adbe6da", "patch": "@@ -0,0 +1,30 @@\n+// check-pass\n+\n+#![feature(type_alias_impl_trait)]\n+\n+struct MyTy<'a>(Vec<u8>, &'a ());\n+\n+impl MyTy<'_> {\n+    fn one(&mut self) -> &mut impl Sized {\n+        &mut self.0\n+    }\n+    fn two(&mut self) -> &mut (impl Sized + 'static) {\n+        self.one()\n+    }\n+}\n+\n+type Opaque<'a> = impl Sized;\n+fn define<'a>() -> Opaque<'a> {}\n+\n+fn test<'a>() {\n+    None::<&'static Opaque<'a>>;\n+}\n+\n+fn one<'a, 'b: 'b>() -> &'a impl Sized {\n+    &()\n+}\n+fn two<'a, 'b>() {\n+    one::<'a, 'b>();\n+}\n+\n+fn main() {}"}, {"sha": "58a0ed9bf1a188b63504f136f50e99b39a5241cb", "filename": "tests/ui/impl-trait/issue-108592.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7fde08365c4c3cfc9a9f8a6a02693b789adbe6da/tests%2Fui%2Fimpl-trait%2Fissue-108592.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fde08365c4c3cfc9a9f8a6a02693b789adbe6da/tests%2Fui%2Fimpl-trait%2Fissue-108592.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fissue-108592.rs?ref=7fde08365c4c3cfc9a9f8a6a02693b789adbe6da", "patch": "@@ -0,0 +1,21 @@\n+// check-pass\n+#![feature(type_alias_impl_trait)]\n+\n+fn opaque<'a: 'a>() -> impl Sized {}\n+fn assert_static<T: 'static>(_: T) {}\n+\n+fn test_closure() {\n+    let closure = |_| {\n+        assert_static(opaque());\n+    };\n+    closure(&opaque());\n+}\n+\n+type Opaque<'a> = impl Sized;\n+fn define<'a>() -> Opaque<'a> {}\n+\n+fn test_tait(_: &Opaque<'_>) {\n+    None::<&'static Opaque<'_>>;\n+}\n+\n+fn main() {}"}]}