{"sha": "6e1f77664df56e3ebf21c35a5a8abb77e68d079c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlMWY3NzY2NGRmNTZlM2ViZjIxYzM1YTVhOGFiYjc3ZTY4ZDA3OWM=", "commit": {"author": {"name": "Marcus Klaas", "email": "mail@marcusklaas.nl", "date": "2015-11-14T20:57:31Z"}, "committer": {"name": "Marcus Klaas", "email": "mail@marcusklaas.nl", "date": "2015-11-20T20:05:18Z"}, "message": "Unwrap match arms that are simple blocks", "tree": {"sha": "52875777dea89bc2b8d4ab691976cdfbe98e8720", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52875777dea89bc2b8d4ab691976cdfbe98e8720"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e1f77664df56e3ebf21c35a5a8abb77e68d079c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e1f77664df56e3ebf21c35a5a8abb77e68d079c", "html_url": "https://github.com/rust-lang/rust/commit/6e1f77664df56e3ebf21c35a5a8abb77e68d079c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e1f77664df56e3ebf21c35a5a8abb77e68d079c/comments", "author": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f3a29d1a74c1c8b8499426d640b7a866f03fabf", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f3a29d1a74c1c8b8499426d640b7a866f03fabf", "html_url": "https://github.com/rust-lang/rust/commit/8f3a29d1a74c1c8b8499426d640b7a866f03fabf"}], "stats": {"total": 198, "additions": 64, "deletions": 134}, "files": [{"sha": "04251d09c747b68f1bf1fd0d9f0d047297ce032f", "filename": "src/bin/rustfmt.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e1f77664df56e3ebf21c35a5a8abb77e68d079c/src%2Fbin%2Frustfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e1f77664df56e3ebf21c35a5a8abb77e68d079c/src%2Fbin%2Frustfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Frustfmt.rs?ref=6e1f77664df56e3ebf21c35a5a8abb77e68d079c", "patch": "@@ -118,9 +118,7 @@ fn execute() -> i32 {\n         Operation::Stdin(input, write_mode) => {\n             // try to read config from local directory\n             let config = match lookup_and_read_project_file(&Path::new(\".\")) {\n-                Ok((_, toml)) => {\n-                    Config::from_toml(&toml)\n-                }\n+                Ok((_, toml)) => Config::from_toml(&toml),\n                 Err(_) => Default::default(),\n             };\n "}, {"sha": "a011ad2ffefd042de0d7d1808b46a0bb2874869f", "filename": "src/chains.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6e1f77664df56e3ebf21c35a5a8abb77e68d079c/src%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e1f77664df56e3ebf21c35a5a8abb77e68d079c/src%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchains.rs?ref=6e1f77664df56e3ebf21c35a5a8abb77e68d079c", "patch": "@@ -171,13 +171,9 @@ fn is_block_expr(expr: &ast::Expr, repr: &str) -> bool {\n \n fn pop_expr_chain<'a>(expr: &'a ast::Expr) -> Option<&'a ast::Expr> {\n     match expr.node {\n-        ast::Expr_::ExprMethodCall(_, _, ref expressions) => {\n-            Some(&expressions[0])\n-        }\n+        ast::Expr_::ExprMethodCall(_, _, ref expressions) => Some(&expressions[0]),\n         ast::Expr_::ExprTupField(ref subexpr, _) |\n-        ast::Expr_::ExprField(ref subexpr, _) => {\n-            Some(subexpr)\n-        }\n+        ast::Expr_::ExprField(ref subexpr, _) => Some(subexpr),\n         _ => None,\n     }\n }\n@@ -199,12 +195,8 @@ fn rewrite_chain_expr(expr: &ast::Expr,\n                                 width,\n                                 offset)\n         }\n-        ast::Expr_::ExprField(_, ref field) => {\n-            Some(format!(\".{}\", field.node))\n-        }\n-        ast::Expr_::ExprTupField(_, ref field) => {\n-            Some(format!(\".{}\", field.node))\n-        }\n+        ast::Expr_::ExprField(_, ref field) => Some(format!(\".{}\", field.node)),\n+        ast::Expr_::ExprTupField(_, ref field) => Some(format!(\".{}\", field.node)),\n         _ => unreachable!(),\n     }\n }"}, {"sha": "a0d7e08878ff2323b6c85091b09708adbed6947a", "filename": "src/expr.rs", "status": "modified", "additions": 42, "deletions": 68, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/6e1f77664df56e3ebf21c35a5a8abb77e68d079c/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e1f77664df56e3ebf21c35a5a8abb77e68d079c/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=6e1f77664df56e3ebf21c35a5a8abb77e68d079c", "patch": "@@ -58,9 +58,7 @@ impl Rewrite for ast::Expr {\n                 let inner_span = mk_sp(callee.span.hi, self.span.hi);\n                 rewrite_call(context, &**callee, args, inner_span, width, offset)\n             }\n-            ast::Expr_::ExprParen(ref subexpr) => {\n-                rewrite_paren(context, subexpr, width, offset)\n-            }\n+            ast::Expr_::ExprParen(ref subexpr) => rewrite_paren(context, subexpr, width, offset),\n             ast::Expr_::ExprBinary(ref op, ref lhs, ref rhs) => {\n                 rewrite_binary_op(context, op, lhs, rhs, width, offset)\n             }\n@@ -91,9 +89,7 @@ impl Rewrite for ast::Expr {\n             ast::Expr_::ExprLoop(ref block, label) => {\n                 Loop::new_loop(block, label).rewrite(context, width, offset)\n             }\n-            ast::Expr_::ExprBlock(ref block) => {\n-                block.rewrite(context, width, offset)\n-            }\n+            ast::Expr_::ExprBlock(ref block) => block.rewrite(context, width, offset),\n             ast::Expr_::ExprIf(ref cond, ref if_block, ref else_block) => {\n                 rewrite_if_else(context,\n                                 cond,\n@@ -145,9 +141,7 @@ impl Rewrite for ast::Expr {\n             }\n             ast::Expr_::ExprField(..) |\n             ast::Expr_::ExprTupField(..) |\n-            ast::Expr_::ExprMethodCall(..) => {\n-                rewrite_chain(self, context, width, offset)\n-            }\n+            ast::Expr_::ExprMethodCall(..) => rewrite_chain(self, context, width, offset),\n             ast::Expr_::ExprMac(ref mac) => {\n                 // Failure to rewrite a marco should not imply failure to\n                 // rewrite the expression.\n@@ -730,6 +724,14 @@ pub fn is_empty_block(block: &ast::Block, codemap: &CodeMap) -> bool {\n     block.stmts.is_empty() && block.expr.is_none() && !block_contains_comment(block, codemap)\n }\n \n+fn is_unsafe_block(block: &ast::Block) -> bool {\n+    if let ast::BlockCheckMode::UnsafeBlock(..) = block.rules {\n+        true\n+    } else {\n+        false\n+    }\n+}\n+\n // inter-match-arm-comment-rules:\n //  - all comments following a match arm before the start of the next arm\n //    are about the second arm\n@@ -911,7 +913,7 @@ impl Rewrite for ast::Arm {\n         }\n \n         let pats_width = if vertical {\n-            pat_strs[pat_strs.len() - 1].len()\n+            pat_strs.last().unwrap().len()\n         } else {\n             total_width\n         };\n@@ -938,79 +940,53 @@ impl Rewrite for ast::Arm {\n             line_start += offset.width();\n         }\n \n-        let comma = arm_comma(body);\n+        let body = match **body {\n+            ast::Expr { node: ast::ExprBlock(ref b), .. } if !is_unsafe_block(b) &&\n+                                                             is_simple_block(b,\n+                                                                             context.codemap) => {\n+                b.expr.as_ref().map(|e| &**e).unwrap()\n+            }\n+            ref x => x,\n+        };\n \n-        // let body = match *body {\n-        //     ast::ExprBlock(ref b) if is_simple_block(b, context.codemap) => b.expr,\n-        //     ref x => x,\n-        // };\n+        let comma = arm_comma(body);\n \n         // Let's try and get the arm body on the same line as the condition.\n         // 4 = ` => `.len()\n-        let same_line_body = if context.config.max_width > line_start + comma.len() + 4 {\n+        if context.config.max_width > line_start + comma.len() + 4 {\n             let budget = context.config.max_width - line_start - comma.len() - 4;\n             let offset = Indent::new(offset.block_indent, line_start + 4 - offset.block_indent);\n             let rewrite = nop_block_collapse(body.rewrite(context, budget, offset), budget);\n \n             match rewrite {\n-                Some(ref body_str) if body_str.len() <= budget || comma.is_empty() => {\n+                Some(ref body_str) if !body_str.contains('\\n') || comma.is_empty() => {\n                     return Some(format!(\"{}{} => {}{}\",\n                                         attr_str.trim_left(),\n                                         pats_str,\n                                         body_str,\n                                         comma));\n                 }\n-                _ => rewrite,\n+                _ => {}\n             }\n-        } else {\n-            None\n-        };\n-\n-        if let ast::ExprBlock(_) = body.node {\n-            // We're trying to fit a block in, but it still failed, give up.\n-            return None;\n         }\n \n-        let mut result = format!(\"{}{} =>\", attr_str.trim_left(), pats_str);\n-\n-        match same_line_body {\n-            // FIXME: also take this branch is expr is block\n-            Some(ref body) if !body.contains('\\n') => {\n-                result.push(' ');\n-                result.push_str(&body);\n-            }\n-            _ => {\n-                let body_budget = try_opt!(width.checked_sub(context.config.tab_spaces));\n-                let indent = context.block_indent.block_indent(context.config);\n-                let inner_context = &RewriteContext { block_indent: indent, ..*context };\n-                let next_line_body = try_opt!(nop_block_collapse(body.rewrite(inner_context,\n-                                                                              body_budget,\n-                                                                              indent),\n-                                                                 body_budget));\n-\n-                result.push_str(\" {\\n\");\n-                let indent_str = offset.block_indent(context.config).to_string(context.config);\n-                result.push_str(&indent_str);\n-                result.push_str(&next_line_body);\n-                result.push('\\n');\n-                result.push_str(&offset.to_string(context.config));\n-                result.push('}');\n-            }\n-        };\n-\n-        Some(result)\n-    }\n-}\n-\n-// Takes two possible rewrites for the match arm body and chooses the \"nicest\".\n-fn match_arm_heuristic<'a>(former: Option<&'a str>, latter: Option<&'a str>) -> Option<&'a str> {\n-    match (former, latter) {\n-        (f @ Some(..), None) => f,\n-        (Some(f), Some(l)) if f.chars().filter(|&c| c == '\\n').count() <=\n-                              l.chars().filter(|&c| c == '\\n').count() => {\n-            Some(f)\n-        }\n-        (_, l) => l,\n+        // FIXME: we're doing a second rewrite of the expr -- this may not be\n+        // necessary.\n+        let body_budget = try_opt!(width.checked_sub(context.config.tab_spaces));\n+        let indent = context.block_indent.block_indent(context.config);\n+        let inner_context = &RewriteContext { block_indent: indent, ..*context };\n+        let next_line_body = try_opt!(nop_block_collapse(body.rewrite(inner_context,\n+                                                                      body_budget,\n+                                                                      indent),\n+                                                         body_budget));\n+        let indent_str = offset.block_indent(context.config).to_string(context.config);\n+\n+        Some(format!(\"{}{} => {{\\n{}{}\\n{}}}\",\n+                     attr_str.trim_left(),\n+                     pats_str,\n+                     indent_str,\n+                     next_line_body,\n+                     offset.to_string(context.config)))\n     }\n }\n \n@@ -1303,9 +1279,7 @@ fn rewrite_struct_lit<'a>(context: &RewriteContext,\n     // Foo { a: Foo } - indent is +3, width is -5.\n     let h_budget = width.checked_sub(path_str.len() + 5).unwrap_or(0);\n     let (indent, v_budget) = match context.config.struct_lit_style {\n-        StructLitStyle::Visual => {\n-            (offset + path_str.len() + 3, h_budget)\n-        }\n+        StructLitStyle::Visual => (offset + path_str.len() + 3, h_budget),\n         StructLitStyle::Block => {\n             // If we are all on one line, then we'll ignore the indent, and we\n             // have a smaller budget."}, {"sha": "42d152fc6ac0b41e8b22aed1cfcb0e9e5a902a18", "filename": "src/imports.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6e1f77664df56e3ebf21c35a5a8abb77e68d079c/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e1f77664df56e3ebf21c35a5a8abb77e68d079c/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=6e1f77664df56e3ebf21c35a5a8abb77e68d079c", "patch": "@@ -74,12 +74,8 @@ fn rewrite_single_use_list(path_str: String, vpi: &ast::PathListItem) -> String\n \n fn rewrite_path_item(vpi: &&ast::PathListItem) -> Option<String> {\n     let path_item_str = match vpi.node {\n-        ast::PathListItem_::PathListIdent{ name, .. } => {\n-            name.to_string()\n-        }\n-        ast::PathListItem_::PathListMod{ .. } => {\n-            \"self\".to_owned()\n-        }\n+        ast::PathListItem_::PathListIdent{ name, .. } => name.to_string(),\n+        ast::PathListItem_::PathListMod{ .. } => \"self\".to_owned(),\n     };\n \n     Some(append_alias(path_item_str, vpi))"}, {"sha": "4f3c82ee0abb118e6ba7c5764de9c08fea0bf9fa", "filename": "src/items.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e1f77664df56e3ebf21c35a5a8abb77e68d079c/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e1f77664df56e3ebf21c35a5a8abb77e68d079c/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=6e1f77664df56e3ebf21c35a5a8abb77e68d079c", "patch": "@@ -824,9 +824,7 @@ impl<'a> FmtVisitor<'a> {\n                          offset: Indent)\n                          -> Option<String> {\n         match *struct_def {\n-            ast::VariantData::Unit(..) => {\n-                self.format_unit_struct(item_name, ident, vis)\n-            }\n+            ast::VariantData::Unit(..) => self.format_unit_struct(item_name, ident, vis),\n             ast::VariantData::Tuple(ref fields, _) => {\n                 self.format_tuple_struct(item_name, ident, vis, fields, generics, span, offset)\n             }"}, {"sha": "3923f6b742db3e5bfa98946d76f8b3bdca1c294f", "filename": "src/lib.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6e1f77664df56e3ebf21c35a5a8abb77e68d079c/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e1f77664df56e3ebf21c35a5a8abb77e68d079c/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=6e1f77664df56e3ebf21c35a5a8abb77e68d079c", "patch": "@@ -225,15 +225,9 @@ pub enum ErrorKind {\n impl fmt::Display for ErrorKind {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> Result<(), fmt::Error> {\n         match *self {\n-            ErrorKind::LineOverflow => {\n-                write!(fmt, \"line exceeded maximum length\")\n-            }\n-            ErrorKind::TrailingWhitespace => {\n-                write!(fmt, \"left behind trailing whitespace\")\n-            }\n-            ErrorKind::BadIssue(issue) => {\n-                write!(fmt, \"found {}\", issue)\n-            }\n+            ErrorKind::LineOverflow => write!(fmt, \"line exceeded maximum length\"),\n+            ErrorKind::TrailingWhitespace => write!(fmt, \"left behind trailing whitespace\"),\n+            ErrorKind::BadIssue(issue) => write!(fmt, \"found {}\", issue),\n         }\n     }\n }"}, {"sha": "ecde4f19fe44bb3218cda74b0ac98add9cd5a0a8", "filename": "src/lists.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e1f77664df56e3ebf21c35a5a8abb77e68d079c/src%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e1f77664df56e3ebf21c35a5a8abb77e68d079c/src%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flists.rs?ref=6e1f77664df56e3ebf21c35a5a8abb77e68d079c", "patch": "@@ -392,9 +392,7 @@ impl<'a, T, I, F1, F2, F3> Iterator for ListItems<'a, I, F1, F2, F3>\n                     match (block_open_index, newline_index) {\n                         // Separator before comment, with the next item on same line.\n                         // Comment belongs to next item.\n-                        (Some(i), None) if i > separator_index => {\n-                            separator_index + 1\n-                        }\n+                        (Some(i), None) if i > separator_index => separator_index + 1,\n                         // Block-style post-comment before the separator.\n                         (Some(i), None) => {\n                             cmp::max(find_comment_end(&post_snippet[i..]).unwrap() + i,"}, {"sha": "af0bd8277518d51899ac9c2db19d9f9b4f9d4fe1", "filename": "src/patterns.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6e1f77664df56e3ebf21c35a5a8abb77e68d079c/src%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e1f77664df56e3ebf21c35a5a8abb77e68d079c/src%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpatterns.rs?ref=6e1f77664df56e3ebf21c35a5a8abb77e68d079c", "patch": "@@ -21,9 +21,7 @@ use syntax::ast::{BindingMode, Pat, Pat_};\n impl Rewrite for Pat {\n     fn rewrite(&self, context: &RewriteContext, width: usize, offset: Indent) -> Option<String> {\n         match self.node {\n-            Pat_::PatBox(ref pat) => {\n-                rewrite_unary_prefix(context, \"box \", &**pat, width, offset)\n-            }\n+            Pat_::PatBox(ref pat) => rewrite_unary_prefix(context, \"box \", &**pat, width, offset),\n             Pat_::PatIdent(binding_mode, ident, None) => {\n                 let (prefix, mutability) = match binding_mode {\n                     BindingMode::BindByRef(mutability) => (\"ref \", mutability),\n@@ -50,9 +48,7 @@ impl Rewrite for Pat {\n                 let prefix = format!(\"&{}\", format_mutability(mutability));\n                 rewrite_unary_prefix(context, &prefix, &**pat, width, offset)\n             }\n-            Pat_::PatTup(ref items) => {\n-                rewrite_tuple(context, items, self.span, width, offset)\n-            }\n+            Pat_::PatTup(ref items) => rewrite_tuple(context, items, self.span, width, offset),\n             Pat_::PatEnum(ref path, Some(ref pat_vec)) => {\n                 let path_str = try_opt!(::types::rewrite_path(context,\n                                                               true,"}, {"sha": "9e693e9cff6a481ef6392c007505fdb9759f81a3", "filename": "src/types.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6e1f77664df56e3ebf21c35a5a8abb77e68d079c/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e1f77664df56e3ebf21c35a5a8abb77e68d079c/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=6e1f77664df56e3ebf21c35a5a8abb77e68d079c", "patch": "@@ -137,9 +137,7 @@ impl<'a> Rewrite for SegmentParam<'a> {\n                          width,\n                          offset)\n             }\n-            SegmentParam::Type(ref ty) => {\n-                ty.rewrite(context, width, offset)\n-            }\n+            SegmentParam::Type(ref ty) => ty.rewrite(context, width, offset),\n             SegmentParam::Binding(ref binding) => {\n                 let mut result = format!(\"{} = \", binding.ident);\n                 let budget = try_opt!(width.checked_sub(result.len()));\n@@ -479,9 +477,7 @@ impl Rewrite for ast::Ty {\n                 let budget = try_opt!(width.checked_sub(2));\n                 ty.rewrite(context, budget, offset + 1).map(|ty_str| format!(\"[{}]\", ty_str))\n             }\n-            ast::TyTup(ref items) => {\n-                rewrite_tuple(context, items, self.span, width, offset)\n-            }\n+            ast::TyTup(ref items) => rewrite_tuple(context, items, self.span, width, offset),\n             ast::TyPolyTraitRef(ref trait_ref) => trait_ref.rewrite(context, width, offset),\n             ast::TyPath(ref q_self, ref path) => {\n                 rewrite_path(context, false, q_self.as_ref(), path, width, offset)"}, {"sha": "37dfb756972548c54e596f648697e03ebbbfa5e6", "filename": "src/utils.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e1f77664df56e3ebf21c35a5a8abb77e68d079c/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e1f77664df56e3ebf21c35a5a8abb77e68d079c/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=6e1f77664df56e3ebf21c35a5a8abb77e68d079c", "patch": "@@ -75,9 +75,7 @@ pub fn last_line_width(s: &str) -> usize {\n fn is_skip(meta_item: &MetaItem) -> bool {\n     match meta_item.node {\n         MetaItem_::MetaWord(ref s) => *s == SKIP_ANNOTATION,\n-        MetaItem_::MetaList(ref s, ref l) => {\n-            *s == \"cfg_attr\" && l.len() == 2 && is_skip(&l[1])\n-        }\n+        MetaItem_::MetaList(ref s, ref l) => *s == \"cfg_attr\" && l.len() == 2 && is_skip(&l[1]),\n         _ => false,\n     }\n }"}, {"sha": "b7f41c1dd6b802bb19f8ae87d347895eab274d6d", "filename": "tests/target/match.rs", "status": "modified", "additions": 5, "deletions": 15, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6e1f77664df56e3ebf21c35a5a8abb77e68d079c/tests%2Ftarget%2Fmatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e1f77664df56e3ebf21c35a5a8abb77e68d079c/tests%2Ftarget%2Fmatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmatch.rs?ref=6e1f77664df56e3ebf21c35a5a8abb77e68d079c", "patch": "@@ -18,9 +18,7 @@ fn foo() {\n         }\n         Pattern1 | Pattern2 | Pattern3 => false,\n         Paternnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn |\n-        Paternnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn => {\n-            blah\n-        }\n+        Paternnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn => blah,\n         Patternnnnnnnnnnnnnnnnnnn |\n         Patternnnnnnnnnnnnnnnnnnn |\n         Patternnnnnnnnnnnnnnnnnnn |\n@@ -164,15 +162,9 @@ fn issue355() {\n         a => println!(\"a\", b),\n         b => vec![1, 2],\n         c => vec!(3; 4),\n-        d => {\n-            println!(\"a\", b)\n-        }\n-        e => {\n-            vec![1, 2]\n-        }\n-        f => {\n-            vec!(3; 4)\n-        }\n+        d => println!(\"a\", b),\n+        e => vec![1, 2],\n+        f => vec!(3; 4),\n         h => println!(\"a\", b), // h comment\n         i => vec![1, 2], // i comment\n         j => vec!(3; 4), // j comment\n@@ -272,9 +264,7 @@ fn issue496() {\n                 match def {\n                     def::DefConst(def_id) | def::DefAssociatedConst(def_id) => {\n                         match const_eval::lookup_const_by_id(cx.tcx, def_id, Some(self.pat.id)) {\n-                            Some(const_expr) => {\n-                                x\n-                            }\n+                            Some(const_expr) => x,\n                         }\n                     }\n                 }"}]}