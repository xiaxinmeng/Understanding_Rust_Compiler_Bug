{"sha": "a6b7274a462829f8ef08a1ddcdcec7ac80dbf3e1", "node_id": "C_kwDOAAsO6NoAKGE2YjcyNzRhNDYyODI5ZjhlZjA4YTFkZGNkY2VjN2FjODBkYmYzZTE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-10T18:42:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-10T18:42:40Z"}, "message": "Auto merge of #102596 - scottmcm:option-bool-calloc, r=Mark-Simulacrum\n\nDo the `calloc` optimization for `Option<bool>`\n\nInspired by <https://old.reddit.com/r/rust/comments/xtiqj8/why_is_this_functional_version_faster_than_my_for/iqqy37b/>.", "tree": {"sha": "aa8d4d69987868dd1f3b7e8a1dd353f87c6c223b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa8d4d69987868dd1f3b7e8a1dd353f87c6c223b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6b7274a462829f8ef08a1ddcdcec7ac80dbf3e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6b7274a462829f8ef08a1ddcdcec7ac80dbf3e1", "html_url": "https://github.com/rust-lang/rust/commit/a6b7274a462829f8ef08a1ddcdcec7ac80dbf3e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6b7274a462829f8ef08a1ddcdcec7ac80dbf3e1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0265a3e93bf1b89d97cae113ed214954d5c35e22", "url": "https://api.github.com/repos/rust-lang/rust/commits/0265a3e93bf1b89d97cae113ed214954d5c35e22", "html_url": "https://github.com/rust-lang/rust/commit/0265a3e93bf1b89d97cae113ed214954d5c35e22"}, {"sha": "31cd0aa823a379b6c0d0f66ba4172585d1780e8b", "url": "https://api.github.com/repos/rust-lang/rust/commits/31cd0aa823a379b6c0d0f66ba4172585d1780e8b", "html_url": "https://github.com/rust-lang/rust/commit/31cd0aa823a379b6c0d0f66ba4172585d1780e8b"}], "stats": {"total": 41, "additions": 40, "deletions": 1}, "files": [{"sha": "8e652d676dc010a740a44f60a92934b99bd0c11e", "filename": "library/alloc/src/vec/is_zero.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a6b7274a462829f8ef08a1ddcdcec7ac80dbf3e1/library%2Falloc%2Fsrc%2Fvec%2Fis_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6b7274a462829f8ef08a1ddcdcec7ac80dbf3e1/library%2Falloc%2Fsrc%2Fvec%2Fis_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fis_zero.rs?ref=a6b7274a462829f8ef08a1ddcdcec7ac80dbf3e1", "patch": "@@ -160,3 +160,25 @@ unsafe impl<T: IsZero> IsZero for Saturating<T> {\n         self.0.is_zero()\n     }\n }\n+\n+macro_rules! impl_for_optional_bool {\n+    ($($t:ty,)+) => {$(\n+        unsafe impl IsZero for $t {\n+            #[inline]\n+            fn is_zero(&self) -> bool {\n+                // SAFETY: This is *not* a stable layout guarantee, but\n+                // inside `core` we're allowed to rely on the current rustc\n+                // behaviour that options of bools will be one byte with\n+                // no padding, so long as they're nested less than 254 deep.\n+                let raw: u8 = unsafe { core::mem::transmute(*self) };\n+                raw == 0\n+            }\n+        }\n+    )+};\n+}\n+impl_for_optional_bool! {\n+    Option<bool>,\n+    Option<Option<bool>>,\n+    Option<Option<Option<bool>>>,\n+    // Could go further, but not worth the metadata overhead\n+}"}, {"sha": "ae6e448f172f7fcd87bd6d67cb16ea00579199f1", "filename": "src/test/codegen/vec-calloc.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a6b7274a462829f8ef08a1ddcdcec7ac80dbf3e1/src%2Ftest%2Fcodegen%2Fvec-calloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6b7274a462829f8ef08a1ddcdcec7ac80dbf3e1/src%2Ftest%2Fcodegen%2Fvec-calloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fvec-calloc.rs?ref=a6b7274a462829f8ef08a1ddcdcec7ac80dbf3e1", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -O\n+// compile-flags: -O -Z merge-functions=disabled\n // only-x86_64\n // ignore-debug\n // min-llvm-version: 15.0\n@@ -144,6 +144,23 @@ pub fn vec_non_zero_tuple(n: usize) -> Vec<(i16, u8, char)> {\n     vec![(0, 0, 'A'); n]\n }\n \n+// CHECK-LABEL: @vec_option_bool\n+#[no_mangle]\n+pub fn vec_option_bool(n: usize) -> Vec<Option<bool>> {\n+    // CHECK-NOT: call {{.*}}alloc::vec::from_elem\n+    // CHECK-NOT: call {{.*}}reserve\n+    // CHECK-NOT: call {{.*}}__rust_alloc(\n+\n+    // CHECK: call {{.*}}__rust_alloc_zeroed(\n+\n+    // CHECK-NOT: call {{.*}}alloc::vec::from_elem\n+    // CHECK-NOT: call {{.*}}reserve\n+    // CHECK-NOT: call {{.*}}__rust_alloc(\n+\n+    // CHECK: ret void\n+    vec![Some(false); n]\n+}\n+\n // Ensure that __rust_alloc_zeroed gets the right attributes for LLVM to optimize it away.\n // CHECK: declare noalias ptr @__rust_alloc_zeroed(i64, i64 allocalign) unnamed_addr [[RUST_ALLOC_ZEROED_ATTRS:#[0-9]+]]\n "}]}