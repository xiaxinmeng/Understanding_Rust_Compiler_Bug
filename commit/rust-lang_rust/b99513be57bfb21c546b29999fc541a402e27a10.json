{"sha": "b99513be57bfb21c546b29999fc541a402e27a10", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5OTUxM2JlNTdiZmIyMWM1NDZiMjk5OTlmYzU0MWE0MDJlMjdhMTA=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-11-26T21:51:02Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-11-26T21:51:02Z"}, "message": "Have Queries own the GlobalCtxt.\n\nThe construction of the GlobalCtxt is moved from a generator's stack to\nthe Queries struct.  Since the GlobalCtxt requires the HIR Forest and the\narenas to live longer, those are moved into Queries the same way.\n\nThe resulting handling of objects is more brittle, because consumers of\nthe Once objects need to be careful of their initialisation.", "tree": {"sha": "142749e00cb64c67f9175206b9e09bc298790e82", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/142749e00cb64c67f9175206b9e09bc298790e82"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b99513be57bfb21c546b29999fc541a402e27a10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b99513be57bfb21c546b29999fc541a402e27a10", "html_url": "https://github.com/rust-lang/rust/commit/b99513be57bfb21c546b29999fc541a402e27a10", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b99513be57bfb21c546b29999fc541a402e27a10/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58a9c73bbd9e115888353aa81ee59ee4862c8cf9", "url": "https://api.github.com/repos/rust-lang/rust/commits/58a9c73bbd9e115888353aa81ee59ee4862c8cf9", "html_url": "https://github.com/rust-lang/rust/commit/58a9c73bbd9e115888353aa81ee59ee4862c8cf9"}], "stats": {"total": 111, "additions": 57, "deletions": 54}, "files": [{"sha": "99945ebf8c4cfdfa7a838c31e8473aa09d98f122", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 21, "deletions": 35, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/b99513be57bfb21c546b29999fc541a402e27a10/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b99513be57bfb21c546b29999fc541a402e27a10/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=b99513be57bfb21c546b29999fc541a402e27a10", "patch": "@@ -22,7 +22,7 @@ use rustc_codegen_ssa::back::link::emit_metadata;\n use rustc_codegen_utils::codegen_backend::CodegenBackend;\n use rustc_codegen_utils::link::filename_for_metadata;\n use rustc_data_structures::{box_region_allow_access, declare_box_region_type, parallel};\n-use rustc_data_structures::sync::{Lrc, ParallelIterator, par_iter};\n+use rustc_data_structures::sync::{Lrc, Once, ParallelIterator, par_iter};\n use rustc_errors::PResult;\n use rustc_incremental;\n use rustc_metadata::cstore;\n@@ -740,44 +740,41 @@ pub fn default_provide_extern(providers: &mut ty::query::Providers<'_>) {\n     rustc_codegen_ssa::provide_extern(providers);\n }\n \n-declare_box_region_type!(\n-    pub BoxedGlobalCtxt,\n-    for('tcx),\n-    (&'tcx GlobalCtxt<'tcx>) -> ((), ())\n-);\n+pub struct BoxedGlobalCtxt<'tcx>(&'tcx GlobalCtxt<'tcx>);\n \n-impl BoxedGlobalCtxt {\n+impl<'gcx> BoxedGlobalCtxt<'gcx> {\n     pub fn enter<F, R>(&mut self, f: F) -> R\n     where\n         F: for<'tcx> FnOnce(TyCtxt<'tcx>) -> R,\n     {\n-        self.access(|gcx| ty::tls::enter_global(gcx, |tcx| f(tcx)))\n+        ty::tls::enter_global(self.0, |tcx| f(tcx))\n+    }\n+\n+    pub fn print_stats(&self) {\n+        self.0.queries.print_stats()\n     }\n }\n \n-pub fn create_global_ctxt(\n-    compiler: &Compiler,\n+pub fn create_global_ctxt<'gcx>(\n+    compiler: &'gcx Compiler,\n     lint_store: Lrc<lint::LintStore>,\n-    mut hir_forest: hir::map::Forest,\n+    hir_forest: &'gcx hir::map::Forest,\n     mut resolver_outputs: ResolverOutputs,\n     outputs: OutputFilenames,\n     crate_name: &str,\n-) -> BoxedGlobalCtxt {\n-    let sess = compiler.session().clone();\n+    global_ctxt: &'gcx Once<GlobalCtxt<'gcx>>,\n+    arenas: &'gcx Once<AllArenas>,\n+) -> BoxedGlobalCtxt<'gcx> {\n+    let sess = &compiler.session();\n     let codegen_backend = compiler.codegen_backend().clone();\n-    let crate_name = crate_name.to_string();\n     let defs = mem::take(&mut resolver_outputs.definitions);\n     let override_queries = compiler.override_queries;\n \n-    let ((), result) = BoxedGlobalCtxt::new(static move || {\n-        let sess = &*sess;\n-\n-        let global_ctxt: Option<GlobalCtxt<'_>>;\n-        let arenas = AllArenas::new();\n+        let arenas = arenas.init_locking(|| AllArenas::new());\n \n         // Construct the HIR map.\n         let hir_map = time(sess, \"indexing HIR\", || {\n-            hir::map::map_crate(sess, &*resolver_outputs.cstore, &mut hir_forest, defs)\n+            hir::map::map_crate(sess, &*resolver_outputs.cstore, &hir_forest, defs)\n         });\n \n         let query_result_on_disk_cache = time(sess, \"load query result cache\", || {\n@@ -796,7 +793,7 @@ pub fn create_global_ctxt(\n             callback(sess, &mut local_providers, &mut extern_providers);\n         }\n \n-        let gcx = TyCtxt::create_global_ctxt(\n+        let gcx = global_ctxt.init_locking(move || TyCtxt::create_global_ctxt(\n             sess,\n             lint_store,\n             local_providers,\n@@ -807,26 +804,15 @@ pub fn create_global_ctxt(\n             query_result_on_disk_cache,\n             &crate_name,\n             &outputs\n-        );\n+        ));\n \n-        global_ctxt = Some(gcx);\n-        let gcx = global_ctxt.as_ref().unwrap();\n-\n-        ty::tls::enter_global(gcx, |tcx| {\n+        ty::tls::enter_global(&gcx, |tcx| {\n             // Do some initialization of the DepGraph that can only be done with the\n             // tcx available.\n             time(tcx.sess, \"dep graph tcx init\", || rustc_incremental::dep_graph_tcx_init(tcx));\n         });\n \n-        yield BoxedGlobalCtxt::initial_yield(());\n-        box_region_allow_access!(for('tcx), (&'tcx GlobalCtxt<'tcx>), (gcx));\n-\n-        if sess.opts.debugging_opts.query_stats {\n-            gcx.queries.print_stats();\n-        }\n-    });\n-\n-    result\n+    BoxedGlobalCtxt(gcx)\n }\n \n /// Runs the resolution, type-checking, region checking and other"}, {"sha": "a90483f8c710484a9b97d045b579cba439f579df", "filename": "src/librustc_interface/queries.rs", "status": "modified", "additions": 35, "deletions": 18, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/b99513be57bfb21c546b29999fc541a402e27a10/src%2Flibrustc_interface%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b99513be57bfb21c546b29999fc541a402e27a10/src%2Flibrustc_interface%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fqueries.rs?ref=b99513be57bfb21c546b29999fc541a402e27a10", "patch": "@@ -2,7 +2,7 @@ use crate::interface::{Compiler, Result};\n use crate::passes::{self, BoxedResolver, BoxedGlobalCtxt};\n \n use rustc_incremental::DepGraphFuture;\n-use rustc_data_structures::sync::Lrc;\n+use rustc_data_structures::sync::{Lrc, Once};\n use rustc_codegen_utils::codegen_backend::CodegenBackend;\n use rustc::session::config::{OutputFilenames, OutputType};\n use rustc::util::common::{time, ErrorReported};\n@@ -12,7 +12,7 @@ use rustc::session::Session;\n use rustc::lint::LintStore;\n use rustc::hir::def_id::LOCAL_CRATE;\n use rustc::ty::steal::Steal;\n-use rustc::ty::ResolverOutputs;\n+use rustc::ty::{AllArenas, ResolverOutputs, GlobalCtxt};\n use rustc::dep_graph::DepGraph;\n use std::cell::{Ref, RefMut, RefCell};\n use std::rc::Rc;\n@@ -70,23 +70,29 @@ impl<T> Default for Query<T> {\n \n pub struct Queries<'comp> {\n     compiler: &'comp Compiler,\n+    gcx: Once<GlobalCtxt<'comp>>,\n+    arenas: Once<AllArenas>,\n+    forest: Once<hir::map::Forest>,\n \n     dep_graph_future: Query<Option<DepGraphFuture>>,\n     parse: Query<ast::Crate>,\n     crate_name: Query<String>,\n     register_plugins: Query<(ast::Crate, Lrc<LintStore>)>,\n     expansion: Query<(ast::Crate, Steal<Rc<RefCell<BoxedResolver>>>, Lrc<LintStore>)>,\n     dep_graph: Query<DepGraph>,\n-    lower_to_hir: Query<(Steal<hir::map::Forest>, Steal<ResolverOutputs>)>,\n+    lower_to_hir: Query<(&'comp hir::map::Forest, Steal<ResolverOutputs>)>,\n     prepare_outputs: Query<OutputFilenames>,\n-    global_ctxt: Query<BoxedGlobalCtxt>,\n+    global_ctxt: Query<BoxedGlobalCtxt<'comp>>,\n     ongoing_codegen: Query<Box<dyn Any>>,\n }\n \n impl<'comp> Queries<'comp> {\n     pub fn new(compiler: &'comp Compiler) -> Queries<'comp> {\n         Queries {\n             compiler,\n+            gcx: Once::new(),\n+            arenas: Once::new(),\n+            forest: Once::new(),\n             dep_graph_future: Default::default(),\n             parse: Default::default(),\n             crate_name: Default::default(),\n@@ -209,23 +215,24 @@ impl<'comp> Queries<'comp> {\n     }\n \n     pub fn lower_to_hir(\n-        &self,\n-    ) -> Result<&Query<(Steal<hir::map::Forest>, Steal<ResolverOutputs>)>> {\n+        &'comp self,\n+    ) -> Result<&Query<(&'comp hir::map::Forest, Steal<ResolverOutputs>)>> {\n         self.lower_to_hir.compute(|| {\n             let expansion_result = self.expansion()?;\n             let peeked = expansion_result.peek();\n             let krate = &peeked.0;\n             let resolver = peeked.1.steal();\n             let lint_store = &peeked.2;\n-            let hir = Steal::new(resolver.borrow_mut().access(|resolver| {\n+            let hir = resolver.borrow_mut().access(|resolver| {\n                 passes::lower_to_hir(\n                     self.session(),\n                     lint_store,\n                     resolver,\n                     &*self.dep_graph()?.peek(),\n                     &krate\n                 )\n-            })?);\n+            })?;\n+            let hir = self.forest.init_locking(|| hir);\n             Ok((hir, Steal::new(BoxedResolver::to_resolver_outputs(resolver))))\n         })\n     }\n@@ -242,25 +249,27 @@ impl<'comp> Queries<'comp> {\n         })\n     }\n \n-    pub fn global_ctxt(&self) -> Result<&Query<BoxedGlobalCtxt>> {\n+    pub fn global_ctxt(&'comp self) -> Result<&Query<BoxedGlobalCtxt<'comp>>> {\n         self.global_ctxt.compute(|| {\n             let crate_name = self.crate_name()?.peek().clone();\n             let outputs = self.prepare_outputs()?.peek().clone();\n             let lint_store = self.expansion()?.peek().2.clone();\n-            let hir = self.lower_to_hir()?;\n-            let hir = hir.peek();\n-            let (hir_forest, resolver_outputs) = &*hir;\n+            let hir = self.lower_to_hir()?.peek();\n+            let (ref hir_forest, ref resolver_outputs) = &*hir;\n             Ok(passes::create_global_ctxt(\n                 self.compiler,\n                 lint_store,\n-                hir_forest.steal(),\n+                hir_forest,\n                 resolver_outputs.steal(),\n                 outputs,\n-                &crate_name))\n+                &crate_name,\n+                &self.gcx,\n+                &self.arenas,\n+            ))\n         })\n     }\n \n-    pub fn ongoing_codegen(&self) -> Result<&Query<Box<dyn Any>>> {\n+    pub fn ongoing_codegen(&'comp self) -> Result<&Query<Box<dyn Any>>> {\n         self.ongoing_codegen.compute(|| {\n             let outputs = self.prepare_outputs()?;\n             self.global_ctxt()?.peek_mut().enter(|tcx| {\n@@ -278,7 +287,7 @@ impl<'comp> Queries<'comp> {\n         })\n     }\n \n-    pub fn linker(&self) -> Result<Linker> {\n+    pub fn linker(&'comp self) -> Result<Linker> {\n         let dep_graph = self.dep_graph()?;\n         let prepare_outputs = self.prepare_outputs()?;\n         let ongoing_codegen = self.ongoing_codegen()?;\n@@ -317,10 +326,18 @@ impl Linker {\n \n impl Compiler {\n     pub fn enter<F, T>(&self, f: F) -> T\n-        where F: FnOnce(&Queries<'_>) -> T\n+        where F: for<'tcx> FnOnce(&'tcx Queries<'tcx>) -> T\n     {\n         let queries = Queries::new(&self);\n-        f(&queries)\n+        let ret = f(&queries);\n+\n+        if self.session().opts.debugging_opts.query_stats {\n+            if let Ok(gcx) = queries.global_ctxt() {\n+                gcx.peek().print_stats();\n+            }\n+        }\n+\n+        ret\n     }\n \n     // This method is different to all the other methods in `Compiler` because"}, {"sha": "d09eb0b2fc2639b059eaa6466263c513bb267794", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b99513be57bfb21c546b29999fc541a402e27a10/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b99513be57bfb21c546b29999fc541a402e27a10/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=b99513be57bfb21c546b29999fc541a402e27a10", "patch": "@@ -88,7 +88,7 @@ pub fn run(options: Options) -> i32 {\n     let tests = interface::run_compiler(config, |compiler| compiler.enter(|queries| {\n         let lower_to_hir = queries.lower_to_hir()?;\n \n-        let mut opts = scrape_test_config(lower_to_hir.peek().0.borrow().krate());\n+        let mut opts = scrape_test_config(lower_to_hir.peek().0.krate());\n         opts.display_warnings |= options.display_warnings;\n         let enable_per_target_ignores = options.enable_per_target_ignores;\n         let mut collector = Collector::new("}]}