{"sha": "1845cf23aa61448a1996b1dca5a11a27dfdd28b0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4NDVjZjIzYWE2MTQ0OGExOTk2YjFkY2E1YTExYTI3ZGZkZDI4YjA=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-09-27T23:43:15Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-09-27T23:43:25Z"}, "message": "De-export std::{base64,cmp,par}. Part of #3583.", "tree": {"sha": "cda66718651686d1f03b3674e6b4760ecce6598f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cda66718651686d1f03b3674e6b4760ecce6598f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1845cf23aa61448a1996b1dca5a11a27dfdd28b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1845cf23aa61448a1996b1dca5a11a27dfdd28b0", "html_url": "https://github.com/rust-lang/rust/commit/1845cf23aa61448a1996b1dca5a11a27dfdd28b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1845cf23aa61448a1996b1dca5a11a27dfdd28b0/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c89e4bbdd97b7ffdb70ddf5b660c1b395697d8c", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c89e4bbdd97b7ffdb70ddf5b660c1b395697d8c", "html_url": "https://github.com/rust-lang/rust/commit/8c89e4bbdd97b7ffdb70ddf5b660c1b395697d8c"}], "stats": {"total": 20, "additions": 8, "deletions": 12}, "files": [{"sha": "995910e635d8ad17792c89b87b5841d4aa8c6c7d", "filename": "src/libstd/base64.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1845cf23aa61448a1996b1dca5a11a27dfdd28b0/src%2Flibstd%2Fbase64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1845cf23aa61448a1996b1dca5a11a27dfdd28b0/src%2Flibstd%2Fbase64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbase64.rs?ref=1845cf23aa61448a1996b1dca5a11a27dfdd28b0", "patch": "@@ -2,7 +2,7 @@\n #[forbid(deprecated_pattern)];\n use io::Reader;\n \n-trait ToBase64 {\n+pub trait ToBase64 {\n     fn to_base64() -> ~str;\n }\n \n@@ -63,7 +63,7 @@ impl &str: ToBase64 {\n     }\n }\n \n-trait FromBase64 {\n+pub trait FromBase64 {\n     fn from_base64() -> ~[u8];\n }\n "}, {"sha": "52c50a39f258c2e6fd1e2ce4a44529c6c676b634", "filename": "src/libstd/cmp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1845cf23aa61448a1996b1dca5a11a27dfdd28b0/src%2Flibstd%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1845cf23aa61448a1996b1dca5a11a27dfdd28b0/src%2Flibstd%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcmp.rs?ref=1845cf23aa61448a1996b1dca5a11a27dfdd28b0", "patch": "@@ -4,7 +4,7 @@\n \n const fuzzy_epsilon: float = 1.0e-6;\n \n-trait FuzzyEq {\n+pub trait FuzzyEq {\n     pure fn fuzzy_eq(other: &self) -> bool;\n }\n "}, {"sha": "a0c9a1b92fed8006282029d4ba3032ff0c07235e", "filename": "src/libstd/par.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1845cf23aa61448a1996b1dca5a11a27dfdd28b0/src%2Flibstd%2Fpar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1845cf23aa61448a1996b1dca5a11a27dfdd28b0/src%2Flibstd%2Fpar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpar.rs?ref=1845cf23aa61448a1996b1dca5a11a27dfdd28b0", "patch": "@@ -1,6 +1,5 @@\n use future_spawn = future::spawn;\n \n-export map, mapi, alli, any, mapi_factory;\n \n /**\n  * The maximum number of tasks this module will spawn for a single\n@@ -73,7 +72,7 @@ fn map_slices<A: Copy Send, B: Copy Send>(\n }\n \n /// A parallel version of map.\n-fn map<A: Copy Send, B: Copy Send>(xs: ~[A], f: fn~(A) -> B) -> ~[B] {\n+pub fn map<A: Copy Send, B: Copy Send>(xs: ~[A], f: fn~(A) -> B) -> ~[B] {\n     vec::concat(map_slices(xs, || {\n         fn~(_base: uint, slice : &[A], copy f) -> ~[B] {\n             vec::map(slice, |x| f(*x))\n@@ -82,7 +81,7 @@ fn map<A: Copy Send, B: Copy Send>(xs: ~[A], f: fn~(A) -> B) -> ~[B] {\n }\n \n /// A parallel version of mapi.\n-fn mapi<A: Copy Send, B: Copy Send>(xs: ~[A],\n+pub fn mapi<A: Copy Send, B: Copy Send>(xs: ~[A],\n                                     f: fn~(uint, A) -> B) -> ~[B] {\n     let slices = map_slices(xs, || {\n         fn~(base: uint, slice : &[A], copy f) -> ~[B] {\n@@ -103,7 +102,7 @@ fn mapi<A: Copy Send, B: Copy Send>(xs: ~[A],\n  * In this case, f is a function that creates functions to run over the\n  * inner elements. This is to skirt the need for copy constructors.\n  */\n-fn mapi_factory<A: Copy Send, B: Copy Send>(\n+pub fn mapi_factory<A: Copy Send, B: Copy Send>(\n     xs: &[A], f: fn() -> fn~(uint, A) -> B) -> ~[B] {\n     let slices = map_slices(xs, || {\n         let f = f();\n@@ -120,7 +119,7 @@ fn mapi_factory<A: Copy Send, B: Copy Send>(\n }\n \n /// Returns true if the function holds for all elements in the vector.\n-fn alli<A: Copy Send>(xs: ~[A], f: fn~(uint, A) -> bool) -> bool {\n+pub fn alli<A: Copy Send>(xs: ~[A], f: fn~(uint, A) -> bool) -> bool {\n     do vec::all(map_slices(xs, || {\n         fn~(base: uint, slice : &[A], copy f) -> bool {\n             vec::alli(slice, |i, x| {\n@@ -131,7 +130,7 @@ fn alli<A: Copy Send>(xs: ~[A], f: fn~(uint, A) -> bool) -> bool {\n }\n \n /// Returns true if the function holds for any elements in the vector.\n-fn any<A: Copy Send>(xs: ~[A], f: fn~(A) -> bool) -> bool {\n+pub fn any<A: Copy Send>(xs: ~[A], f: fn~(A) -> bool) -> bool {\n     do vec::any(map_slices(xs, || {\n         fn~(_base : uint, slice: &[A], copy f) -> bool {\n             vec::any(slice, |x| f(x))"}, {"sha": "2f75ae07c841609dc5b612eda4ad2704b3cccc13", "filename": "src/libstd/std.rc", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1845cf23aa61448a1996b1dca5a11a27dfdd28b0/src%2Flibstd%2Fstd.rc", "raw_url": "https://github.com/rust-lang/rust/raw/1845cf23aa61448a1996b1dca5a11a27dfdd28b0/src%2Flibstd%2Fstd.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstd.rc?ref=1845cf23aa61448a1996b1dca5a11a27dfdd28b0", "patch": "@@ -132,11 +132,8 @@ mod prettyprint;\n mod prettyprint2;\n #[legacy_exports]\n mod arena;\n-#[legacy_exports]\n mod par;\n-#[legacy_exports]\n mod cmp;\n-#[legacy_exports]\n mod base64;\n \n #[cfg(unicode)]"}]}