{"sha": "118ee14dd161e91c42de1aebcbf5a72acee79cd5", "node_id": "C_kwDOAAsO6NoAKDExOGVlMTRkZDE2MWU5MWM0MmRlMWFlYmNiZjVhNzJhY2VlNzljZDU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-11-21T23:01:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-21T23:01:09Z"}, "message": "Rollup merge of #104597 - compiler-errors:need_migrate_deref_output_trait_object-msg, r=eholk\n\nProbe + better error messsage for `need_migrate_deref_output_trait_object`\n\n1. Use `InferCtxt::probe` in `need_migrate_deref_output_trait_object` -- that normalization *could* technically do type inference as a side-effect, and this is a lint, so it should have no side-effects.\n2. Return the trait-ref so we format the error message correctly. See the UI test change -- `(dyn A + 'static)` is not a trait.", "tree": {"sha": "a46832c8dc08c333a6132e4789b90731f6f297ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a46832c8dc08c333a6132e4789b90731f6f297ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/118ee14dd161e91c42de1aebcbf5a72acee79cd5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjfAM1CRBK7hj4Ov3rIwAAkbkIAEOfQT2vcD9H8zGmwd1Vv3En\ni2U8xWsJtOJp7kiXey0XuJgMjavILGziTBXCX7mFdOcqul1I3LK9VBS27bp1QALX\njr/4jWXjHZldaEh8zcGrKEYFWZHRnvlMuls7CPPnyAiNmje+w3fSUe5vdcvK16jj\nTS2fc1dfSS+FwBvjqvv/c+DP4lXdgHOVPkvwgIyJhpVu9ByHbfqcPQWZvFMN4oYJ\nqBCDCJg/6lw+DL0z8WGB7FOAPmoQZVJQd27XmCem5aCLncfY/omCSsCOggWdR+NO\n6FsSf1zKTmoT3OJ1SA6MQYH7pWGSVLgCHfr3+oK85tkMtvUBJXqyvFkyzUhLe/c=\n=YHbP\n-----END PGP SIGNATURE-----\n", "payload": "tree a46832c8dc08c333a6132e4789b90731f6f297ef\nparent 589d843bd0ff72fd5a720bce63c2e6baa241550b\nparent 5384af01e3aa5c840cffb0e4f2cb4b1ce6a9ac4e\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1669071669 +0100\ncommitter GitHub <noreply@github.com> 1669071669 +0100\n\nRollup merge of #104597 - compiler-errors:need_migrate_deref_output_trait_object-msg, r=eholk\n\nProbe + better error messsage for `need_migrate_deref_output_trait_object`\n\n1. Use `InferCtxt::probe` in `need_migrate_deref_output_trait_object` -- that normalization *could* technically do type inference as a side-effect, and this is a lint, so it should have no side-effects.\n2. Return the trait-ref so we format the error message correctly. See the UI test change -- `(dyn A + 'static)` is not a trait.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/118ee14dd161e91c42de1aebcbf5a72acee79cd5", "html_url": "https://github.com/rust-lang/rust/commit/118ee14dd161e91c42de1aebcbf5a72acee79cd5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/118ee14dd161e91c42de1aebcbf5a72acee79cd5/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "589d843bd0ff72fd5a720bce63c2e6baa241550b", "url": "https://api.github.com/repos/rust-lang/rust/commits/589d843bd0ff72fd5a720bce63c2e6baa241550b", "html_url": "https://github.com/rust-lang/rust/commit/589d843bd0ff72fd5a720bce63c2e6baa241550b"}, {"sha": "5384af01e3aa5c840cffb0e4f2cb4b1ce6a9ac4e", "url": "https://api.github.com/repos/rust-lang/rust/commits/5384af01e3aa5c840cffb0e4f2cb4b1ce6a9ac4e", "html_url": "https://github.com/rust-lang/rust/commit/5384af01e3aa5c840cffb0e4f2cb4b1ce6a9ac4e"}], "stats": {"total": 63, "additions": 29, "deletions": 34}, "files": [{"sha": "57680669b2624fcd2db271add717ebd68dd6a45a", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 27, "deletions": 32, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/118ee14dd161e91c42de1aebcbf5a72acee79cd5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/118ee14dd161e91c42de1aebcbf5a72acee79cd5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=118ee14dd161e91c42de1aebcbf5a72acee79cd5", "patch": "@@ -8,7 +8,6 @@\n use hir::LangItem;\n use rustc_errors::DelayDm;\n use rustc_hir as hir;\n-use rustc_hir::def_id::DefId;\n use rustc_infer::traits::ObligationCause;\n use rustc_infer::traits::{Obligation, SelectionError, TraitObligation};\n use rustc_lint_defs::builtin::DEREF_INTO_DYN_SUPERTRAIT;\n@@ -707,7 +706,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         ty: Ty<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n         cause: &ObligationCause<'tcx>,\n-    ) -> Option<(Ty<'tcx>, DefId)> {\n+    ) -> Option<ty::PolyExistentialTraitRef<'tcx>> {\n         let tcx = self.tcx();\n         if tcx.features().trait_upcasting {\n             return None;\n@@ -729,27 +728,25 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             return None;\n         }\n \n-        let ty = traits::normalize_projection_type(\n-            self,\n-            param_env,\n-            ty::ProjectionTy {\n-                item_def_id: tcx.lang_items().deref_target()?,\n-                substs: trait_ref.substs,\n-            },\n-            cause.clone(),\n-            0,\n-            // We're *intentionally* throwing these away,\n-            // since we don't actually use them.\n-            &mut vec![],\n-        )\n-        .ty()\n-        .unwrap();\n-\n-        if let ty::Dynamic(data, ..) = ty.kind() {\n-            Some((ty, data.principal_def_id()?))\n-        } else {\n-            None\n-        }\n+        self.infcx.probe(|_| {\n+            let ty = traits::normalize_projection_type(\n+                self,\n+                param_env,\n+                ty::ProjectionTy {\n+                    item_def_id: tcx.lang_items().deref_target()?,\n+                    substs: trait_ref.substs,\n+                },\n+                cause.clone(),\n+                0,\n+                // We're *intentionally* throwing these away,\n+                // since we don't actually use them.\n+                &mut vec![],\n+            )\n+            .ty()\n+            .unwrap();\n+\n+            if let ty::Dynamic(data, ..) = ty.kind() { data.principal() } else { None }\n+        })\n     }\n \n     /// Searches for unsizing that might apply to `obligation`.\n@@ -811,21 +808,19 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                         let principal_a = data_a.principal().unwrap();\n                         let target_trait_did = principal_def_id_b.unwrap();\n                         let source_trait_ref = principal_a.with_self_ty(self.tcx(), source);\n-                        if let Some((deref_output_ty, deref_output_trait_did)) = self\n-                            .need_migrate_deref_output_trait_object(\n-                                source,\n-                                obligation.param_env,\n-                                &obligation.cause,\n-                            )\n-                        {\n-                            if deref_output_trait_did == target_trait_did {\n+                        if let Some(deref_trait_ref) = self.need_migrate_deref_output_trait_object(\n+                            source,\n+                            obligation.param_env,\n+                            &obligation.cause,\n+                        ) {\n+                            if deref_trait_ref.def_id() == target_trait_did {\n                                 self.tcx().struct_span_lint_hir(\n                                     DEREF_INTO_DYN_SUPERTRAIT,\n                                     obligation.cause.body_id,\n                                     obligation.cause.span,\n                                     DelayDm(|| format!(\n                                         \"`{}` implements `Deref` with supertrait `{}` as output\",\n-                                        source, deref_output_ty\n+                                        source, deref_trait_ref\n                                     )),\n                                     |lint| lint,\n                                 );"}, {"sha": "5f5a2574bab037739a29210a52a926a4bbcafb57", "filename": "src/test/ui/traits/trait-upcasting/migrate-lint-deny.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/118ee14dd161e91c42de1aebcbf5a72acee79cd5/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fmigrate-lint-deny.rs", "raw_url": "https://github.com/rust-lang/rust/raw/118ee14dd161e91c42de1aebcbf5a72acee79cd5/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fmigrate-lint-deny.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fmigrate-lint-deny.rs?ref=118ee14dd161e91c42de1aebcbf5a72acee79cd5", "patch": "@@ -18,7 +18,7 @@ fn take_a(_: &dyn A) {}\n \n fn whoops(b: &dyn B) {\n     take_a(b)\n-    //~^ ERROR `dyn B` implements `Deref` with supertrait `(dyn A + 'static)` as output\n+    //~^ ERROR `dyn B` implements `Deref` with supertrait `A` as output\n     //~^^ WARN this was previously accepted by the compiler but is being phased out;\n }\n "}, {"sha": "41381a3ffd1c607b53d5cba4c6fb82853ecb0cd6", "filename": "src/test/ui/traits/trait-upcasting/migrate-lint-deny.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/118ee14dd161e91c42de1aebcbf5a72acee79cd5/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fmigrate-lint-deny.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/118ee14dd161e91c42de1aebcbf5a72acee79cd5/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fmigrate-lint-deny.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fmigrate-lint-deny.stderr?ref=118ee14dd161e91c42de1aebcbf5a72acee79cd5", "patch": "@@ -1,4 +1,4 @@\n-error: `dyn B` implements `Deref` with supertrait `(dyn A + 'static)` as output\n+error: `dyn B` implements `Deref` with supertrait `A` as output\n   --> $DIR/migrate-lint-deny.rs:20:12\n    |\n LL |     take_a(b)"}]}