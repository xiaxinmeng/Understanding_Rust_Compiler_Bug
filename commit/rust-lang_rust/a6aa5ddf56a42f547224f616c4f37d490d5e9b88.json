{"sha": "a6aa5ddf56a42f547224f616c4f37d490d5e9b88", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2YWE1ZGRmNTZhNDJmNTQ3MjI0ZjYxNmM0ZjM3ZDQ5MGQ1ZTliODg=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2018-08-30T18:06:27Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2018-08-30T22:14:35Z"}, "message": "Run rustfmt", "tree": {"sha": "c5024c449c1c91a998e25f056dfbeea40782a5c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c5024c449c1c91a998e25f056dfbeea40782a5c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6aa5ddf56a42f547224f616c4f37d490d5e9b88", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEmNHc6jmXzkUyxd4xiMlBzaHUZDIFAluIbEsACgkQiMlBzaHU\nZDLuuRAAk6rU/NHg3QZ7wbCtKmk7ePKqRIs0RzyO5EjNyLESkHbsGkFljP6y83+g\nFgvDL4+V13QEkKPnHqGlOMWhduvtcEig98WplQ/myrQ69aFGL7QlXymGoVQjVcZR\nezYx7xs0204TL6egySot3eCQ1/My4Dgr53G3HLSZvG0X0xq6zJ2jAjizSzRD5odb\nSlK/QP1oVsc7HvKlp9Y7/kLk2IbSZAsIKMjqd2fDkmaYmpIP6X5LUcs7bGd/WPxC\nBtqC9R3oK9IKv/4FjhKpRPpuNknoLcuCwzbPM+WeN7sybwk/RI0oncdQu/rnQ/ZV\nsaIVQ9v3zf8xtGDnhGZRoXOKVHo2Dqmh3vy5et0Xawx98/c4DBIu8np2meqec/wy\nqknvb33qi6qQJLpL6TekJUR/L6R8I0+/vZIC0INDGBDv02hYijgCBI4WE2se2jSM\nmJg364wAlF3JFoJIHAJHix3JXFstjpCGjBiWCD4oQIw2LE5O0le/huom2ztHrfyI\nVmt2fB/ox2A8NEAcM2W5qPEfxrl15cJ3lv5QniRZFYuZeXPJfi5vVN6X5Z/oCvv6\n42u2juM8lQr3COwIqeFyDRFd2sxEtGSzk7cdKCpzIXcsoUw7/Gxu6kq8G1dlnQBv\nWJZQzv1eh0w45LyIkbU8hON/nj0OuHXfUlG2SgTCRXwNeqZnQVM=\n=0rUs\n-----END PGP SIGNATURE-----", "payload": "tree c5024c449c1c91a998e25f056dfbeea40782a5c3\nparent 373fc932aa7adecb9c2e78455835cb6341b73552\nauthor Santiago Pastorino <spastorino@gmail.com> 1535652387 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1535667275 -0300\n\nRun rustfmt\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6aa5ddf56a42f547224f616c4f37d490d5e9b88", "html_url": "https://github.com/rust-lang/rust/commit/a6aa5ddf56a42f547224f616c4f37d490d5e9b88", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6aa5ddf56a42f547224f616c4f37d490d5e9b88/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "373fc932aa7adecb9c2e78455835cb6341b73552", "url": "https://api.github.com/repos/rust-lang/rust/commits/373fc932aa7adecb9c2e78455835cb6341b73552", "html_url": "https://github.com/rust-lang/rust/commit/373fc932aa7adecb9c2e78455835cb6341b73552"}], "stats": {"total": 151, "additions": 84, "deletions": 67}, "files": [{"sha": "3ef8cdfd1044d0a5549bb6e09312e4092297bd77", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 46, "deletions": 33, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/a6aa5ddf56a42f547224f616c4f37d490d5e9b88/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6aa5ddf56a42f547224f616c4f37d490d5e9b88/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=a6aa5ddf56a42f547224f616c4f37d490d5e9b88", "patch": "@@ -17,17 +17,17 @@ use hir::def::CtorKind;\n use hir::def_id::DefId;\n use hir::{self, HirId, InlineAsm};\n use middle::region;\n-use mir::interpret::{EvalErrorKind, Scalar, ScalarMaybeUndef, ConstValue};\n+use mir::interpret::{ConstValue, EvalErrorKind, Scalar, ScalarMaybeUndef};\n use mir::visit::MirVisitable;\n use rustc_apfloat::ieee::{Double, Single};\n use rustc_apfloat::Float;\n use rustc_data_structures::graph::dominators::{dominators, Dominators};\n use rustc_data_structures::graph::{self, GraphPredecessors, GraphSuccessors};\n use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n-use smallvec::SmallVec;\n use rustc_data_structures::sync::Lrc;\n use rustc_data_structures::sync::ReadGuard;\n use rustc_serialize as serialize;\n+use smallvec::SmallVec;\n use std::borrow::Cow;\n use std::fmt::{self, Debug, Formatter, Write};\n use std::ops::{Index, IndexMut};\n@@ -208,9 +208,10 @@ impl<'tcx> Mir<'tcx> {\n         let if_zero_locations = if loc.statement_index == 0 {\n             let predecessor_blocks = self.predecessors_for(loc.block);\n             let num_predecessor_blocks = predecessor_blocks.len();\n-            Some((0 .. num_predecessor_blocks)\n-                .map(move |i| predecessor_blocks[i])\n-                .map(move |bb| self.terminator_loc(bb))\n+            Some(\n+                (0..num_predecessor_blocks)\n+                    .map(move |i| predecessor_blocks[i])\n+                    .map(move |bb| self.terminator_loc(bb)),\n             )\n         } else {\n             None\n@@ -219,10 +220,16 @@ impl<'tcx> Mir<'tcx> {\n         let if_not_zero_locations = if loc.statement_index == 0 {\n             None\n         } else {\n-            Some(Location { block: loc.block, statement_index: loc.statement_index - 1 })\n+            Some(Location {\n+                block: loc.block,\n+                statement_index: loc.statement_index - 1,\n+            })\n         };\n \n-        if_zero_locations.into_iter().flatten().chain(if_not_zero_locations)\n+        if_zero_locations\n+            .into_iter()\n+            .flatten()\n+            .chain(if_not_zero_locations)\n     }\n \n     #[inline]\n@@ -577,13 +584,15 @@ impl_stable_hash_for!(struct self::VarBindingForm<'tcx> {\n });\n \n mod binding_form_impl {\n-    use rustc_data_structures::stable_hasher::{HashStable, StableHasher, StableHasherResult};\n     use ich::StableHashingContext;\n+    use rustc_data_structures::stable_hasher::{HashStable, StableHasher, StableHasherResult};\n \n     impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for super::BindingForm<'tcx> {\n-        fn hash_stable<W: StableHasherResult>(&self,\n-                                            hcx: &mut StableHashingContext<'a>,\n-                                            hasher: &mut StableHasher<W>) {\n+        fn hash_stable<W: StableHasherResult>(\n+            &self,\n+            hcx: &mut StableHashingContext<'a>,\n+            hasher: &mut StableHasher<W>,\n+        ) {\n             use super::BindingForm::*;\n             ::std::mem::discriminant(self).hash_stable(hcx, hasher);\n \n@@ -1500,16 +1509,17 @@ impl<'tcx> TerminatorKind<'tcx> {\n                     .map(|&u| {\n                         let mut s = String::new();\n                         let c = ty::Const {\n-                            val: ConstValue::Scalar(Scalar::Bits {\n+                            val: ConstValue::Scalar(\n+                                Scalar::Bits {\n                                     bits: u,\n                                     size: size.bytes() as u8,\n-                                }.into()),\n+                                }.into(),\n+                            ),\n                             ty: switch_ty,\n                         };\n                         fmt_const_val(&mut s, &c).unwrap();\n                         s.into()\n-                    })\n-                    .chain(iter::once(String::from(\"otherwise\").into()))\n+                    }).chain(iter::once(String::from(\"otherwise\").into()))\n                     .collect()\n             }\n             Call {\n@@ -2039,7 +2049,13 @@ pub enum AggregateKind<'tcx> {\n     /// active field number and is present only for union expressions\n     /// -- e.g. for a union expression `SomeUnion { c: .. }`, the\n     /// active field index would identity the field `c`\n-    Adt(&'tcx AdtDef, usize, &'tcx Substs<'tcx>, Option<CanonicalTy<'tcx>>, Option<usize>),\n+    Adt(\n+        &'tcx AdtDef,\n+        usize,\n+        &'tcx Substs<'tcx>,\n+        Option<CanonicalTy<'tcx>>,\n+        Option<usize>,\n+    ),\n \n     Closure(DefId, ClosureSubsts<'tcx>),\n     Generator(DefId, GeneratorSubsts<'tcx>, hir::GeneratorMovability),\n@@ -2289,7 +2305,7 @@ pub fn fmt_const_val(f: &mut impl Write, const_val: &ty::Const) -> fmt::Result {\n                 return write!(f, \"{:?}{}\", ((bits as i128) << shift) >> shift, i);\n             }\n             Char => return write!(f, \"{:?}\", ::std::char::from_u32(bits as u32).unwrap()),\n-            _ => {},\n+            _ => {}\n         }\n     }\n     // print function definitons\n@@ -2305,14 +2321,12 @@ pub fn fmt_const_val(f: &mut impl Write, const_val: &ty::Const) -> fmt::Result {\n                         let alloc = tcx.alloc_map.lock().get(ptr.alloc_id);\n                         if let Some(interpret::AllocType::Memory(alloc)) = alloc {\n                             assert_eq!(len as usize as u128, len);\n-                            let slice = &alloc\n-                                .bytes\n-                                    [(ptr.offset.bytes() as usize)..]\n-                                    [..(len as usize)];\n+                            let slice =\n+                                &alloc.bytes[(ptr.offset.bytes() as usize)..][..(len as usize)];\n                             let s = ::std::str::from_utf8(slice).expect(\"non utf8 str from miri\");\n                             write!(f, \"{:?}\", s)\n                         } else {\n-                             write!(f, \"pointer to erroneous constant {:?}, {:?}\", ptr, len)\n+                            write!(f, \"pointer to erroneous constant {:?}, {:?}\", ptr, len)\n                         }\n                     });\n                 }\n@@ -2843,15 +2857,13 @@ impl<'tcx> TypeFoldable<'tcx> for Rvalue<'tcx> {\n                 let kind = box match **kind {\n                     AggregateKind::Array(ty) => AggregateKind::Array(ty.fold_with(folder)),\n                     AggregateKind::Tuple => AggregateKind::Tuple,\n-                    AggregateKind::Adt(def, v, substs, user_ty, n) => {\n-                        AggregateKind::Adt(\n-                            def,\n-                            v,\n-                            substs.fold_with(folder),\n-                            user_ty.fold_with(folder),\n-                            n,\n-                        )\n-                    }\n+                    AggregateKind::Adt(def, v, substs, user_ty, n) => AggregateKind::Adt(\n+                        def,\n+                        v,\n+                        substs.fold_with(folder),\n+                        user_ty.fold_with(folder),\n+                        n,\n+                    ),\n                     AggregateKind::Closure(id, substs) => {\n                         AggregateKind::Closure(id, substs.fold_with(folder))\n                     }\n@@ -2882,8 +2894,9 @@ impl<'tcx> TypeFoldable<'tcx> for Rvalue<'tcx> {\n                 (match **kind {\n                     AggregateKind::Array(ty) => ty.visit_with(visitor),\n                     AggregateKind::Tuple => false,\n-                    AggregateKind::Adt(_, _, substs, user_ty, _) =>\n-                        substs.visit_with(visitor) || user_ty.visit_with(visitor),\n+                    AggregateKind::Adt(_, _, substs, user_ty, _) => {\n+                        substs.visit_with(visitor) || user_ty.visit_with(visitor)\n+                    }\n                     AggregateKind::Closure(_, substs) => substs.visit_with(visitor),\n                     AggregateKind::Generator(_, substs, _) => substs.visit_with(visitor),\n                 }) || fields.visit_with(visitor)"}, {"sha": "a0b0aabf73e02b40a6beefdb36305933ceca53b6", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 38, "deletions": 34, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/a6aa5ddf56a42f547224f616c4f37d490d5e9b88/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6aa5ddf56a42f547224f616c4f37d490d5e9b88/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=a6aa5ddf56a42f547224f616c4f37d490d5e9b88", "patch": "@@ -26,8 +26,8 @@ use super::{Context, MirBorrowckCtxt};\n use super::{InitializationRequiringAction, PrefixSet};\n \n use dataflow::drop_flag_effects;\n-use dataflow::move_paths::MovePathIndex;\n use dataflow::move_paths::indexes::MoveOutIndex;\n+use dataflow::move_paths::MovePathIndex;\n use util::borrowck_errors::{BorrowckErrors, Origin};\n \n impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n@@ -347,10 +347,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         if issued_spans == borrow_spans {\n             borrow_spans.var_span_label(\n                 &mut err,\n-                format!(\n-                    \"borrows occur due to use of `{}` in closure\",\n-                    desc_place\n-                ),\n+                format!(\"borrows occur due to use of `{}` in closure\", desc_place),\n             );\n         } else {\n             let borrow_place = &issued_borrow.borrowed_place;\n@@ -365,7 +362,10 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n \n             borrow_spans.var_span_label(\n                 &mut err,\n-                format!(\"second borrow occurs due to use of `{}` in closure\", desc_place),\n+                format!(\n+                    \"second borrow occurs due to use of `{}` in closure\",\n+                    desc_place\n+                ),\n             );\n         }\n \n@@ -412,10 +412,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n \n         let mut err = match &self.describe_place(&borrow.borrowed_place) {\n             Some(_) if self.is_place_thread_local(root_place) => {\n-                self.report_thread_local_value_does_not_live_long_enough(\n-                    drop_span,\n-                    borrow_span,\n-                )\n+                self.report_thread_local_value_does_not_live_long_enough(drop_span, borrow_span)\n             }\n             Some(name) => self.report_local_value_does_not_live_long_enough(\n                 context,\n@@ -461,7 +458,10 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         );\n \n         let mut err = self.tcx.path_does_not_live_long_enough(\n-            borrow_span, &format!(\"`{}`\", name), Origin::Mir);\n+            borrow_span,\n+            &format!(\"`{}`\", name),\n+            Origin::Mir,\n+        );\n \n         err.span_label(borrow_span, \"borrowed value does not live long enough\");\n         err.span_label(\n@@ -485,11 +485,14 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n             drop_span, borrow_span\n         );\n \n-        let mut err = self.tcx.thread_local_value_does_not_live_long_enough(\n-            borrow_span, Origin::Mir);\n+        let mut err = self\n+            .tcx\n+            .thread_local_value_does_not_live_long_enough(borrow_span, Origin::Mir);\n \n-        err.span_label(borrow_span,\n-                       \"thread-local variables cannot be borrowed beyond the end of the function\");\n+        err.span_label(\n+            borrow_span,\n+            \"thread-local variables cannot be borrowed beyond the end of the function\",\n+        );\n         err.span_label(drop_span, \"end of enclosing function is here\");\n         err\n     }\n@@ -520,11 +523,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         err\n     }\n \n-    fn get_moved_indexes(\n-        &mut self,\n-        context: Context,\n-        mpi: MovePathIndex,\n-    ) -> Vec<MoveOutIndex> {\n+    fn get_moved_indexes(&mut self, context: Context, mpi: MovePathIndex) -> Vec<MoveOutIndex> {\n         let mir = self.mir;\n \n         let mut stack = Vec::new();\n@@ -533,16 +532,21 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         let mut visited = FxHashSet();\n         let mut result = vec![];\n \n-        'dfs:\n-        while let Some(l) = stack.pop() {\n-            debug!(\"report_use_of_moved_or_uninitialized: current_location={:?}\", l);\n+        'dfs: while let Some(l) = stack.pop() {\n+            debug!(\n+                \"report_use_of_moved_or_uninitialized: current_location={:?}\",\n+                l\n+            );\n \n             if !visited.insert(l) {\n                 continue;\n             }\n \n             // check for moves\n-            let stmt_kind = mir[l.block].statements.get(l.statement_index).map(|s| &s.kind);\n+            let stmt_kind = mir[l.block]\n+                .statements\n+                .get(l.statement_index)\n+                .map(|s| &s.kind);\n             if let Some(StatementKind::StorageDead(..)) = stmt_kind {\n                 // this analysis only tries to find moves explicitly\n                 // written by the user, so we ignore the move-outs\n@@ -578,13 +582,11 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n \n             // check for inits\n             let mut any_match = false;\n-            drop_flag_effects::for_location_inits(\n-                self.tcx,\n-                self.mir,\n-                self.move_data,\n-                l,\n-                |m| if m == mpi { any_match = true; },\n-            );\n+            drop_flag_effects::for_location_inits(self.tcx, self.mir, self.move_data, l, |m| {\n+                if m == mpi {\n+                    any_match = true;\n+                }\n+            });\n             if any_match {\n                 continue 'dfs;\n             }\n@@ -964,8 +966,10 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n             let attrs = self.tcx.get_attrs(statik.def_id);\n             let is_thread_local = attrs.iter().any(|attr| attr.check_name(\"thread_local\"));\n \n-            debug!(\"is_place_thread_local: attrs={:?} is_thread_local={:?}\",\n-                   attrs, is_thread_local);\n+            debug!(\n+                \"is_place_thread_local: attrs={:?} is_thread_local={:?}\",\n+                attrs, is_thread_local\n+            );\n             is_thread_local\n         } else {\n             debug!(\"is_place_thread_local: no\");\n@@ -983,7 +987,7 @@ pub(super) enum UseSpans {\n         // it's present.\n         args_span: Span,\n         // The span of the first use of the captured variable inside the closure.\n-        var_span: Span\n+        var_span: Span,\n     },\n     // This access has a single span associated to it: common case.\n     OtherUse(Span),"}]}