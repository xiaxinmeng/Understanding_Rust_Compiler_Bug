{"sha": "aff558998ef98b4c80cace32538ba23ee67a4d6d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmZjU1ODk5OGVmOThiNGM4MGNhY2UzMjUzOGJhMjNlZTY3YTRkNmQ=", "commit": {"author": {"name": "Dan Luu", "email": "danluu@gmail.com", "date": "2013-04-11T13:12:26Z"}, "committer": {"name": "Dan Luu", "email": "danluu@gmail.com", "date": "2013-04-11T13:12:26Z"}, "message": "Fix formatting", "tree": {"sha": "22107020306e056ba7df0d0964026c2e35655a46", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/22107020306e056ba7df0d0964026c2e35655a46"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aff558998ef98b4c80cace32538ba23ee67a4d6d", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aff558998ef98b4c80cace32538ba23ee67a4d6d", "html_url": "https://github.com/rust-lang/rust/commit/aff558998ef98b4c80cace32538ba23ee67a4d6d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aff558998ef98b4c80cace32538ba23ee67a4d6d/comments", "author": {"login": "danluu", "id": 157136, "node_id": "MDQ6VXNlcjE1NzEzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/157136?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danluu", "html_url": "https://github.com/danluu", "followers_url": "https://api.github.com/users/danluu/followers", "following_url": "https://api.github.com/users/danluu/following{/other_user}", "gists_url": "https://api.github.com/users/danluu/gists{/gist_id}", "starred_url": "https://api.github.com/users/danluu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danluu/subscriptions", "organizations_url": "https://api.github.com/users/danluu/orgs", "repos_url": "https://api.github.com/users/danluu/repos", "events_url": "https://api.github.com/users/danluu/events{/privacy}", "received_events_url": "https://api.github.com/users/danluu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "danluu", "id": 157136, "node_id": "MDQ6VXNlcjE1NzEzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/157136?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danluu", "html_url": "https://github.com/danluu", "followers_url": "https://api.github.com/users/danluu/followers", "following_url": "https://api.github.com/users/danluu/following{/other_user}", "gists_url": "https://api.github.com/users/danluu/gists{/gist_id}", "starred_url": "https://api.github.com/users/danluu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danluu/subscriptions", "organizations_url": "https://api.github.com/users/danluu/orgs", "repos_url": "https://api.github.com/users/danluu/repos", "events_url": "https://api.github.com/users/danluu/events{/privacy}", "received_events_url": "https://api.github.com/users/danluu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ccae209b0db58db1054ede13acfc79c84e0221f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/ccae209b0db58db1054ede13acfc79c84e0221f3", "html_url": "https://github.com/rust-lang/rust/commit/ccae209b0db58db1054ede13acfc79c84e0221f3"}], "stats": {"total": 74, "additions": 40, "deletions": 34}, "files": [{"sha": "c6400ccded8a675e61d19921d9136cc4b3d22685", "filename": "src/libcore/rand.rs", "status": "modified", "additions": 40, "deletions": 34, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/aff558998ef98b4c80cace32538ba23ee67a4d6d/src%2Flibcore%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aff558998ef98b4c80cace32538ba23ee67a4d6d/src%2Flibcore%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frand.rs?ref=aff558998ef98b4c80cace32538ba23ee67a4d6d", "patch": "@@ -157,11 +157,11 @@ pub trait RngUtil {\n      *\n      * ~~~\n      *\n-     * use core::rand::RngUtil;  \n+     * use core::rand::RngUtil;\n      *\n      * fn main() {\n-     *     rng = rand::Rng(); \n-     *     println(fmt!(\"%d\",rng.gen_int())); \n+     *     rng = rand::Rng();\n+     *     println(fmt!(\"%d\",rng.gen_int()));\n      * }\n      * ~~~\n      */\n@@ -197,11 +197,11 @@ pub trait RngUtil {\n      *\n      * ~~~\n      *\n-     * use core::rand::RngUtil;  \n+     * use core::rand::RngUtil;\n      *\n      * fn main() {\n-     *     rng = rand::Rng(); \n-     *     println(fmt!(\"%f\",rng.gen_float())); \n+     *     rng = rand::Rng();\n+     *     println(fmt!(\"%f\",rng.gen_float()));\n      * }\n      * ~~~\n      */\n@@ -223,10 +223,10 @@ pub trait RngUtil {\n      *\n      * ~~~\n      *\n-     * use core::rand::RngUtil;  \n+     * use core::rand::RngUtil;\n      *\n      * fn main() {\n-     *     rng = rand::Rng(); \n+     *     rng = rand::Rng();\n      *     println(fmt!(\"%b\",rng.gen_bool()));\n      * }\n      * ~~~\n@@ -239,11 +239,11 @@ pub trait RngUtil {\n      *\n      * ~~~\n      *\n-     * use core::rand::RngUtil;  \n+     * use core::rand::RngUtil;\n      *\n      * fn main() {\n-     *     rng = rand::Rng(); \n-     *     println(fmt!(\"%b\",rng.gen_weighted_bool(3))); \n+     *     rng = rand::Rng();\n+     *     println(fmt!(\"%b\",rng.gen_weighted_bool(3)));\n      * }\n      * ~~~\n      */\n@@ -255,11 +255,11 @@ pub trait RngUtil {\n      *\n      * ~~~\n      *\n-     * use core::rand::RngUtil;  \n+     * use core::rand::RngUtil;\n      *\n      * fn main() {\n-     *     rng = rand::Rng(); \n-     *     println(rng.gen_str(8)); \n+     *     rng = rand::Rng();\n+     *     println(rng.gen_str(8));\n      * }\n      * ~~~\n      */\n@@ -271,28 +271,28 @@ pub trait RngUtil {\n      *\n      * ~~~\n      *\n-     * use core::rand::RngUtil;  \n+     * use core::rand::RngUtil;\n      *\n      * fn main() {\n-     *     rng = rand::Rng(); \n-     *     println(fmt!(\"%?\",rng.gen_bytes(8))); \n+     *     rng = rand::Rng();\n+     *     println(fmt!(\"%?\",rng.gen_bytes(8)));\n      * }\n      * ~~~\n      */\n     fn gen_bytes(&self, len: uint) -> ~[u8];\n-    /// \n+    ///\n     /**\n      * Choose an item randomly, failing if values is empty\n      *\n      * *Example*\n      *\n      * ~~~\n      *\n-     * use core::rand::RngUtil;  \n+     * use core::rand::RngUtil;\n      *\n      * fn main() {\n-     *     rng = rand::Rng(); \n-     *     println(fmt!(\"%d\",rng.choose([1,2,4,8,16,32]))); \n+     *     rng = rand::Rng();\n+     *     println(fmt!(\"%d\",rng.choose([1,2,4,8,16,32])));\n      * }\n      * ~~~\n      */\n@@ -307,11 +307,13 @@ pub trait RngUtil {\n      *\n      * ~~~\n      *\n-     * use core::rand::RngUtil;  \n+     * use core::rand::RngUtil;\n      *\n      * fn main() {\n-     *     rng = rand::Rng(); \n-     *     let x = [rand::Weighted {weight: 4, item: 'a'}, rand::Weighted {weight: 2, item: 'b'}, rand::Weighted {weight: 2, item: 'c'}];\n+     *     rng = rand::Rng();\n+     *     let x = [rand::Weighted {weight: 4, item: 'a'},\n+     *              rand::Weighted {weight: 2, item: 'b'},\n+     *              rand::Weighted {weight: 2, item: 'c'}];\n      *     println(fmt!(\"%c\",rng.choose_weighted(x)));\n      * }\n      * ~~~\n@@ -325,11 +327,13 @@ pub trait RngUtil {\n      *\n      * ~~~\n      *\n-     * use core::rand::RngUtil;  \n+     * use core::rand::RngUtil;\n      *\n      * fn main() {\n-     *     rng = rand::Rng(); \n-     *     let x = [rand::Weighted {weight: 4, item: 'a'}, rand::Weighted {weight: 2, item: 'b'}, rand::Weighted {weight: 2, item: 'c'}];\n+     *     rng = rand::Rng();\n+     *     let x = [rand::Weighted {weight: 4, item: 'a'},\n+     *              rand::Weighted {weight: 2, item: 'b'},\n+     *              rand::Weighted {weight: 2, item: 'c'}];\n      *     println(fmt!(\"%?\",rng.choose_weighted_option(x)));\n      * }\n      * ~~~\n@@ -343,11 +347,13 @@ pub trait RngUtil {\n      *\n      * ~~~\n      *\n-     * use core::rand::RngUtil;  \n+     * use core::rand::RngUtil;\n      *\n      * fn main() {\n-     *     rng = rand::Rng(); \n-     *     let x = [rand::Weighted {weight: 4, item: 'a'}, rand::Weighted {weight: 2, item: 'b'}, rand::Weighted {weight: 2, item: 'c'}];\n+     *     rng = rand::Rng();\n+     *     let x = [rand::Weighted {weight: 4, item: 'a'},\n+     *              rand::Weighted {weight: 2, item: 'b'},\n+     *              rand::Weighted {weight: 2, item: 'c'}];\n      *     println(fmt!(\"%?\",rng.weighted_vec(x)));\n      * }\n      * ~~~\n@@ -360,10 +366,10 @@ pub trait RngUtil {\n      *\n      * ~~~\n      *\n-     * use core::rand::RngUtil;  \n+     * use core::rand::RngUtil;\n      *\n      * fn main() {\n-     *     rng = rand::Rng(); \n+     *     rng = rand::Rng();\n      *     println(fmt!(\"%?\",rng.shuffle([1,2,3])));\n      * }\n      * ~~~\n@@ -376,10 +382,10 @@ pub trait RngUtil {\n      *\n      * ~~~\n      *\n-     * use core::rand::RngUtil;  \n+     * use core::rand::RngUtil;\n      *\n      * fn main() {\n-     *     rng = rand::Rng(); \n+     *     rng = rand::Rng();\n      *     let mut y = [1,2,3];\n      *     rng.shuffle_mut(y);\n      *     println(fmt!(\"%?\",y));"}]}