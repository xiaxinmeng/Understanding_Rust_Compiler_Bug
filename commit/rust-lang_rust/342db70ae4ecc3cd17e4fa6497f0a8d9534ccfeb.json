{"sha": "342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0MmRiNzBhZTRlY2MzY2QxN2U0ZmE2NDk3ZjBhOGQ5NTM0Y2NmZWI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-05T14:15:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-05T14:15:19Z"}, "message": "Auto merge of #84200 - CDirkx:os, r=m-ou-se\n\nMove all `sys::ext` modules to `os`\n\nThis PR moves all `sys::ext` modules to `os`, centralizing the location of all `os` code and simplifying the dependencies between `os` and `sys`.\n\nBecause this also removes all uses `cfg_if!` on publicly exported items, where after #81969 there were still a few left, this should properly work around https://github.com/rust-analyzer/rust-analyzer/issues/6038.\n\n`@rustbot` label: +T-libs-impl", "tree": {"sha": "e18b3678cfc15269ce32a88a453f6c810a3c5194", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e18b3678cfc15269ce32a88a453f6c810a3c5194"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb", "html_url": "https://github.com/rust-lang/rust/commit/342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "24acc388da2cdbe1ec79b6933402941b6fffb26b", "url": "https://api.github.com/repos/rust-lang/rust/commits/24acc388da2cdbe1ec79b6933402941b6fffb26b", "html_url": "https://github.com/rust-lang/rust/commit/24acc388da2cdbe1ec79b6933402941b6fffb26b"}, {"sha": "2173d8dbe67790e0054876de99fcbfafdb4f8ecd", "url": "https://api.github.com/repos/rust-lang/rust/commits/2173d8dbe67790e0054876de99fcbfafdb4f8ecd", "html_url": "https://github.com/rust-lang/rust/commit/2173d8dbe67790e0054876de99fcbfafdb4f8ecd"}], "stats": {"total": 353, "additions": 162, "deletions": 191}, "files": [{"sha": "b0170e67446db4c5cb659c39bfa5ba9468aed2c7", "filename": "library/std/src/os/fortanix_sgx/arch.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb/library%2Fstd%2Fsrc%2Fos%2Ffortanix_sgx%2Farch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb/library%2Fstd%2Fsrc%2Fos%2Ffortanix_sgx%2Farch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Ffortanix_sgx%2Farch.rs?ref=342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb", "previous_filename": "library/std/src/sys/sgx/ext/arch.rs"}, {"sha": "63fc5ff2866a81c1b7f3e0de1d0c4d259199ef25", "filename": "library/std/src/os/fortanix_sgx/ffi.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb/library%2Fstd%2Fsrc%2Fos%2Ffortanix_sgx%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb/library%2Fstd%2Fsrc%2Fos%2Ffortanix_sgx%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Ffortanix_sgx%2Fffi.rs?ref=342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb", "previous_filename": "library/std/src/sys/sgx/ext/ffi.rs"}, {"sha": "7223ade68158fd1a84a489437462ae81cb73b07b", "filename": "library/std/src/os/fortanix_sgx/io.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb/library%2Fstd%2Fsrc%2Fos%2Ffortanix_sgx%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb/library%2Fstd%2Fsrc%2Fos%2Ffortanix_sgx%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Ffortanix_sgx%2Fio.rs?ref=342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb", "previous_filename": "library/std/src/sys/sgx/ext/io.rs"}, {"sha": "a40dabe190ae07d2a384e3bf589a31483356aaf2", "filename": "library/std/src/os/fortanix_sgx/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb/library%2Fstd%2Fsrc%2Fos%2Ffortanix_sgx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb/library%2Fstd%2Fsrc%2Fos%2Ffortanix_sgx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Ffortanix_sgx%2Fmod.rs?ref=342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb", "patch": "@@ -3,7 +3,7 @@\n //! This includes functions to deal with memory isolation, usercalls, and the\n //! SGX instruction set.\n \n-#![deny(missing_docs, missing_debug_implementations)]\n+#![deny(missing_docs)]\n #![unstable(feature = \"sgx_platform\", issue = \"56975\")]\n \n /// Low-level interfaces to usercalls. See the [ABI documentation] for more\n@@ -43,7 +43,9 @@ pub mod mem {\n     pub use crate::sys::abi::mem::*;\n }\n \n-pub use crate::sys::ext::{arch, ffi, io};\n+pub mod arch;\n+pub mod ffi;\n+pub mod io;\n \n /// Functions for querying thread-related information.\n pub mod thread {"}, {"sha": "07b59a02556d9f3e8ea80c4b941c593219c5b2af", "filename": "library/std/src/os/hermit/ffi.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb/library%2Fstd%2Fsrc%2Fos%2Fhermit%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb/library%2Fstd%2Fsrc%2Fos%2Fhermit%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fhermit%2Fffi.rs?ref=342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb", "previous_filename": "library/std/src/sys/hermit/ext/ffi.rs"}, {"sha": "4657b545a1bc46b7a660fed2ff5f4a5964174e5a", "filename": "library/std/src/os/hermit/mod.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb/library%2Fstd%2Fsrc%2Fos%2Fhermit%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb/library%2Fstd%2Fsrc%2Fos%2Fhermit%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fhermit%2Fmod.rs?ref=342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb", "patch": "@@ -1,5 +1,4 @@\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n-#![allow(missing_docs)]\n \n pub mod ffi;\n ", "previous_filename": "library/std/src/sys/hermit/ext/mod.rs"}, {"sha": "94438defc227077b5799267bf4de43327cc25eb0", "filename": "library/std/src/os/linux/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb/library%2Fstd%2Fsrc%2Fos%2Flinux%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb/library%2Fstd%2Fsrc%2Fos%2Flinux%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Flinux%2Fmod.rs?ref=342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb", "patch": "@@ -1,6 +1,7 @@\n //! Linux-specific definitions.\n \n #![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+#![doc(cfg(target_os = \"linux\"))]\n \n pub mod fs;\n pub mod raw;"}, {"sha": "5b68a7e126268d9c33563c2587c740b9da67aa5c", "filename": "library/std/src/os/linux/raw.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb/library%2Fstd%2Fsrc%2Fos%2Flinux%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb/library%2Fstd%2Fsrc%2Fos%2Flinux%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Flinux%2Fraw.rs?ref=342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb", "patch": "@@ -9,7 +9,6 @@\n               definitions\"\n )]\n #![allow(deprecated)]\n-#![allow(missing_debug_implementations)]\n \n use crate::os::raw::c_ulong;\n "}, {"sha": "07e29ebf3681cd6ca635738616699c60c8b4fd0c", "filename": "library/std/src/os/mod.rs", "status": "modified", "additions": 105, "deletions": 64, "changes": 169, "blob_url": "https://github.com/rust-lang/rust/blob/342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb/library%2Fstd%2Fsrc%2Fos%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb/library%2Fstd%2Fsrc%2Fos%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fmod.rs?ref=342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb", "patch": "@@ -3,78 +3,119 @@\n #![stable(feature = \"os\", since = \"1.0.0\")]\n #![allow(missing_docs, nonstandard_style, missing_debug_implementations)]\n \n-// When documenting libstd we want to show unix/windows/linux/wasi modules as these are the \"main\n-// modules\" that are used across platforms, so all modules are enabled when `cfg(doc)` is set.\n-// This should help show platform-specific functionality in a hopefully cross-platform way in the\n-// documentation.\n-// Note that we deliberately avoid `cfg_if!` here to work around a rust-analyzer bug that would make\n-// `std::os` submodules unusable: https://github.com/rust-analyzer/rust-analyzer/issues/6038\n+pub mod raw;\n \n-#[cfg(doc)]\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub use crate::sys::unix_ext as unix;\n+// The code below could be written clearer using `cfg_if!`. However, the items below are\n+// publicly exported by `std` and external tools can have trouble analysing them because of the use\n+// of a macro that is not vendored by Rust and included in the toolchain.\n+// See https://github.com/rust-analyzer/rust-analyzer/issues/6038.\n \n-#[cfg(doc)]\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub use crate::sys::windows_ext as windows;\n+#[cfg(all(\n+    doc,\n+    not(any(\n+        all(target_arch = \"wasm32\", not(target_os = \"wasi\")),\n+        all(target_vendor = \"fortanix\", target_env = \"sgx\")\n+    ))\n+))]\n+#[path = \".\"]\n+mod doc {\n+    // When documenting std we want to show the `unix`, `windows`, `linux` and `wasi`\n+    // modules as these are the \"main modules\" that are used across platforms,\n+    // so these modules are enabled when `cfg(doc)` is set.\n+    // This should help show platform-specific functionality in a hopefully cross-platform\n+    // way in the documentation.\n \n-#[cfg(doc)]\n-#[doc(cfg(target_os = \"linux\"))]\n-pub mod linux;\n+    pub mod unix;\n \n-#[cfg(doc)]\n-#[stable(feature = \"wasi_ext_doc\", since = \"1.35.0\")]\n-pub use crate::sys::wasi_ext as wasi;\n+    pub mod linux;\n \n-// If we're not documenting libstd then we just expose the main modules as we otherwise would.\n+    pub mod wasi;\n \n-#[cfg(not(doc))]\n-#[cfg(any(unix, target_os = \"hermit\"))]\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub use crate::sys::ext as unix;\n+    pub mod windows;\n+}\n+#[cfg(all(\n+    doc,\n+    any(\n+        all(target_arch = \"wasm32\", not(target_os = \"wasi\")),\n+        all(target_vendor = \"fortanix\", target_env = \"sgx\")\n+    )\n+))]\n+mod doc {\n+    // On certain platforms right now the \"main modules\" modules that are\n+    // documented don't compile (missing things in `libc` which is empty),\n+    // so just omit them with an empty module.\n \n-#[cfg(not(doc))]\n-#[cfg(windows)]\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub use crate::sys::ext as windows;\n+    #[unstable(issue = \"none\", feature = \"std_internals\")]\n+    pub mod unix {}\n \n-#[cfg(not(doc))]\n-#[cfg(any(target_os = \"linux\", target_os = \"l4re\"))]\n-pub mod linux;\n+    #[unstable(issue = \"none\", feature = \"std_internals\")]\n+    pub mod linux {}\n+\n+    #[unstable(issue = \"none\", feature = \"std_internals\")]\n+    pub mod wasi {}\n+\n+    #[unstable(issue = \"none\", feature = \"std_internals\")]\n+    pub mod windows {}\n+}\n+#[cfg(doc)]\n+#[stable(feature = \"os\", since = \"1.0.0\")]\n+pub use doc::*;\n \n #[cfg(not(doc))]\n-#[cfg(target_os = \"wasi\")]\n-pub mod wasi;\n-\n-#[cfg(target_os = \"android\")]\n-pub mod android;\n-#[cfg(target_os = \"dragonfly\")]\n-pub mod dragonfly;\n-#[cfg(target_os = \"emscripten\")]\n-pub mod emscripten;\n-#[cfg(all(target_vendor = \"fortanix\", target_env = \"sgx\"))]\n-pub mod fortanix_sgx;\n-#[cfg(target_os = \"freebsd\")]\n-pub mod freebsd;\n-#[cfg(target_os = \"fuchsia\")]\n-pub mod fuchsia;\n-#[cfg(target_os = \"haiku\")]\n-pub mod haiku;\n-#[cfg(target_os = \"illumos\")]\n-pub mod illumos;\n-#[cfg(target_os = \"ios\")]\n-pub mod ios;\n-#[cfg(target_os = \"macos\")]\n-pub mod macos;\n-#[cfg(target_os = \"netbsd\")]\n-pub mod netbsd;\n-#[cfg(target_os = \"openbsd\")]\n-pub mod openbsd;\n-#[cfg(target_os = \"redox\")]\n-pub mod redox;\n-#[cfg(target_os = \"solaris\")]\n-pub mod solaris;\n-#[cfg(target_os = \"vxworks\")]\n-pub mod vxworks;\n+#[path = \".\"]\n+mod imp {\n+    // If we're not documenting std then we only expose modules appropriate for the\n+    // current platform.\n \n-pub mod raw;\n+    #[cfg(all(target_vendor = \"fortanix\", target_env = \"sgx\"))]\n+    pub mod fortanix_sgx;\n+\n+    #[cfg(target_os = \"hermit\")]\n+    #[path = \"hermit/mod.rs\"]\n+    pub mod unix;\n+\n+    #[cfg(target_os = \"android\")]\n+    pub mod android;\n+    #[cfg(target_os = \"dragonfly\")]\n+    pub mod dragonfly;\n+    #[cfg(target_os = \"emscripten\")]\n+    pub mod emscripten;\n+    #[cfg(target_os = \"freebsd\")]\n+    pub mod freebsd;\n+    #[cfg(target_os = \"fuchsia\")]\n+    pub mod fuchsia;\n+    #[cfg(target_os = \"haiku\")]\n+    pub mod haiku;\n+    #[cfg(target_os = \"illumos\")]\n+    pub mod illumos;\n+    #[cfg(target_os = \"ios\")]\n+    pub mod ios;\n+    #[cfg(target_os = \"l4re\")]\n+    pub mod linux;\n+    #[cfg(target_os = \"linux\")]\n+    pub mod linux;\n+    #[cfg(target_os = \"macos\")]\n+    pub mod macos;\n+    #[cfg(target_os = \"netbsd\")]\n+    pub mod netbsd;\n+    #[cfg(target_os = \"openbsd\")]\n+    pub mod openbsd;\n+    #[cfg(target_os = \"redox\")]\n+    pub mod redox;\n+    #[cfg(target_os = \"solaris\")]\n+    pub mod solaris;\n+    #[cfg(unix)]\n+    pub mod unix;\n+\n+    #[cfg(target_os = \"vxworks\")]\n+    pub mod vxworks;\n+\n+    #[cfg(target_os = \"wasi\")]\n+    pub mod wasi;\n+\n+    #[cfg(windows)]\n+    pub mod windows;\n+}\n+#[cfg(not(doc))]\n+#[stable(feature = \"os\", since = \"1.0.0\")]\n+pub use imp::*;"}, {"sha": "9a6b99684c5231a1baabdf106405613a36c0878e", "filename": "library/std/src/os/redox/raw.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb/library%2Fstd%2Fsrc%2Fos%2Fredox%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb/library%2Fstd%2Fsrc%2Fos%2Fredox%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fredox%2Fraw.rs?ref=342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb", "patch": "@@ -9,7 +9,6 @@\n               definitions\"\n )]\n #![allow(deprecated)]\n-#![allow(missing_debug_implementations)]\n \n use crate::os::raw::{c_char, c_int, c_long, c_ulong, c_void};\n "}, {"sha": "123f85deaf9e3f4320bde10bd6436bb4f900d653", "filename": "library/std/src/os/unix/ffi.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb/library%2Fstd%2Fsrc%2Fos%2Funix%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb/library%2Fstd%2Fsrc%2Fos%2Funix%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fffi.rs?ref=342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb", "previous_filename": "library/std/src/sys/unix/ext/ffi.rs"}, {"sha": "9cf51be2836fb5c8276f6ee976fc50e4d4eedb73", "filename": "library/std/src/os/unix/fs.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb/library%2Fstd%2Fsrc%2Fos%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb/library%2Fstd%2Fsrc%2Fos%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Ffs.rs?ref=342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb", "previous_filename": "library/std/src/sys/unix/ext/fs.rs"}, {"sha": "07c30bfa9ed154b6b9add61ecbcbf0f7089a3d31", "filename": "library/std/src/os/unix/io.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb/library%2Fstd%2Fsrc%2Fos%2Funix%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb/library%2Fstd%2Fsrc%2Fos%2Funix%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fio.rs?ref=342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb", "previous_filename": "library/std/src/sys/unix/ext/io.rs"}, {"sha": "6fc1c89a2ba800922cea428547cc2297ca3fe518", "filename": "library/std/src/os/unix/mod.rs", "status": "renamed", "additions": 36, "deletions": 37, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb/library%2Fstd%2Fsrc%2Fos%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb/library%2Fstd%2Fsrc%2Fos%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fmod.rs?ref=342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb", "patch": "@@ -27,44 +27,43 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n #![doc(cfg(unix))]\n-#![allow(missing_docs)]\n \n-cfg_if::cfg_if! {\n-    if #[cfg(doc)] {\n-        // Use linux as the default platform when documenting on other platforms like Windows\n-        use crate::os::linux as platform;\n-    } else {\n-        #[cfg(target_os = \"android\")]\n-        use crate::os::android as platform;\n-        #[cfg(target_os = \"dragonfly\")]\n-        use crate::os::dragonfly as platform;\n-        #[cfg(target_os = \"emscripten\")]\n-        use crate::os::emscripten as platform;\n-        #[cfg(target_os = \"freebsd\")]\n-        use crate::os::freebsd as platform;\n-        #[cfg(target_os = \"fuchsia\")]\n-        use crate::os::fuchsia as platform;\n-        #[cfg(target_os = \"haiku\")]\n-        use crate::os::haiku as platform;\n-        #[cfg(target_os = \"illumos\")]\n-        use crate::os::illumos as platform;\n-        #[cfg(target_os = \"ios\")]\n-        use crate::os::ios as platform;\n-        #[cfg(any(target_os = \"linux\", target_os = \"l4re\"))]\n-        use crate::os::linux as platform;\n-        #[cfg(target_os = \"macos\")]\n-        use crate::os::macos as platform;\n-        #[cfg(target_os = \"netbsd\")]\n-        use crate::os::netbsd as platform;\n-        #[cfg(target_os = \"openbsd\")]\n-        use crate::os::openbsd as platform;\n-        #[cfg(target_os = \"redox\")]\n-        use crate::os::redox as platform;\n-        #[cfg(target_os = \"solaris\")]\n-        use crate::os::solaris as platform;\n-        #[cfg(target_os = \"vxworks\")]\n-        use crate::os::vxworks as platform;\n-    }\n+// Use linux as the default platform when documenting on other platforms like Windows\n+#[cfg(doc)]\n+use crate::os::linux as platform;\n+\n+#[cfg(not(doc))]\n+mod platform {\n+    #[cfg(target_os = \"android\")]\n+    pub use crate::os::android::*;\n+    #[cfg(target_os = \"dragonfly\")]\n+    pub use crate::os::dragonfly::*;\n+    #[cfg(target_os = \"emscripten\")]\n+    pub use crate::os::emscripten::*;\n+    #[cfg(target_os = \"freebsd\")]\n+    pub use crate::os::freebsd::*;\n+    #[cfg(target_os = \"fuchsia\")]\n+    pub use crate::os::fuchsia::*;\n+    #[cfg(target_os = \"haiku\")]\n+    pub use crate::os::haiku::*;\n+    #[cfg(target_os = \"illumos\")]\n+    pub use crate::os::illumos::*;\n+    #[cfg(target_os = \"ios\")]\n+    pub use crate::os::ios::*;\n+    #[cfg(any(target_os = \"linux\", target_os = \"l4re\"))]\n+    pub use crate::os::linux::*;\n+    #[cfg(target_os = \"macos\")]\n+    pub use crate::os::macos::*;\n+    #[cfg(target_os = \"netbsd\")]\n+    pub use crate::os::netbsd::*;\n+    #[cfg(target_os = \"openbsd\")]\n+    pub use crate::os::openbsd::*;\n+    #[cfg(target_os = \"redox\")]\n+    pub use crate::os::redox::*;\n+    #[cfg(target_os = \"solaris\")]\n+    pub use crate::os::solaris::*;\n+    #[cfg(target_os = \"vxworks\")]\n+    pub use crate::os::vxworks::*;\n }\n \n pub mod ffi;", "previous_filename": "library/std/src/sys/unix/ext/mod.rs"}, {"sha": "459f3590e647015f6edc2c1fe6f91f07a9407861", "filename": "library/std/src/os/unix/net/addr.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Faddr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Faddr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Faddr.rs?ref=342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb", "previous_filename": "library/std/src/sys/unix/ext/net/addr.rs"}, {"sha": "15ce7056fea3489a5a6ee789d8127a3e7222e659", "filename": "library/std/src/os/unix/net/ancillary.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fancillary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fancillary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fancillary.rs?ref=342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb", "previous_filename": "library/std/src/sys/unix/ext/net/ancillary.rs"}, {"sha": "9e39f70f68e698ab594df22812f5097b53d0a3eb", "filename": "library/std/src/os/unix/net/datagram.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fdatagram.rs", "raw_url": "https://github.com/rust-lang/rust/raw/342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fdatagram.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fdatagram.rs?ref=342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb", "previous_filename": "library/std/src/sys/unix/ext/net/datagram.rs"}, {"sha": "bdd08fe8380fa56e2cf5bd2a738319e43b7a0725", "filename": "library/std/src/os/unix/net/listener.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Flistener.rs", "raw_url": "https://github.com/rust-lang/rust/raw/342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Flistener.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Flistener.rs?ref=342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb", "previous_filename": "library/std/src/sys/unix/ext/net/listener.rs"}, {"sha": "3088ffb5e5c01b572a802271bc6ab94b465a9dc4", "filename": "library/std/src/os/unix/net/mod.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fmod.rs?ref=342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb", "previous_filename": "library/std/src/sys/unix/ext/net/mod.rs"}, {"sha": "b3f12844101241db0d322a28f06a07f73a3ea95c", "filename": "library/std/src/os/unix/net/raw_fd.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fraw_fd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fraw_fd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fraw_fd.rs?ref=342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb", "previous_filename": "library/std/src/sys/unix/ext/net/raw_fd.rs"}, {"sha": "a6f6e091305d51cb7c7a41f228ac248d693a1919", "filename": "library/std/src/os/unix/net/stream.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fstream.rs?ref=342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb", "previous_filename": "library/std/src/sys/unix/ext/net/stream.rs"}, {"sha": "bd9b6dd727b96a2babdd8cdfe4eeff47515f02f9", "filename": "library/std/src/os/unix/net/tests.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Ftests.rs?ref=342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb", "previous_filename": "library/std/src/sys/unix/ext/net/tests.rs"}, {"sha": "355855bcd10e203d6921f3560833bc3270fa4513", "filename": "library/std/src/os/unix/process.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb/library%2Fstd%2Fsrc%2Fos%2Funix%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb/library%2Fstd%2Fsrc%2Fos%2Funix%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fprocess.rs?ref=342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb", "previous_filename": "library/std/src/sys/unix/ext/process.rs"}, {"sha": "c292955cb4eea40213a7b6b67840c876924adc02", "filename": "library/std/src/os/unix/raw.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb/library%2Fstd%2Fsrc%2Fos%2Funix%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb/library%2Fstd%2Fsrc%2Fos%2Funix%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fraw.rs?ref=342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb", "previous_filename": "library/std/src/sys/unix/ext/raw.rs"}, {"sha": "7221da1a9a7bbc998b891b43bb8d7fbe82ed37f0", "filename": "library/std/src/os/unix/thread.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb/library%2Fstd%2Fsrc%2Fos%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb/library%2Fstd%2Fsrc%2Fos%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fthread.rs?ref=342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb", "previous_filename": "library/std/src/sys/unix/ext/thread.rs"}, {"sha": "1b4c18d3d84c420c3a20d0214f9ee3ddd68a9070", "filename": "library/std/src/os/unix/ucred.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb/library%2Fstd%2Fsrc%2Fos%2Funix%2Fucred.rs", "raw_url": "https://github.com/rust-lang/rust/raw/342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb/library%2Fstd%2Fsrc%2Fos%2Funix%2Fucred.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fucred.rs?ref=342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb", "previous_filename": "library/std/src/sys/unix/ext/ucred.rs"}, {"sha": "42d79418cf78f81bbd204accfe10ed97e06ebb59", "filename": "library/std/src/os/unix/ucred/tests.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb/library%2Fstd%2Fsrc%2Fos%2Funix%2Fucred%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb/library%2Fstd%2Fsrc%2Fos%2Funix%2Fucred%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fucred%2Ftests.rs?ref=342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb", "previous_filename": "library/std/src/sys/unix/ext/ucred/tests.rs"}, {"sha": "d25b8d39ed6807aa65d1a0f160a4d72eca1548cd", "filename": "library/std/src/os/wasi.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/24acc388da2cdbe1ec79b6933402941b6fffb26b/library%2Fstd%2Fsrc%2Fos%2Fwasi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24acc388da2cdbe1ec79b6933402941b6fffb26b/library%2Fstd%2Fsrc%2Fos%2Fwasi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwasi.rs?ref=24acc388da2cdbe1ec79b6933402941b6fffb26b", "patch": "@@ -1,6 +0,0 @@\n-//! WASI-specific definitions\n-\n-#![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub use crate::sys::ext::*;"}, {"sha": "f71f316d1ba1088b8667d495bfe401f674badde7", "filename": "library/std/src/os/wasi/ffi.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb/library%2Fstd%2Fsrc%2Fos%2Fwasi%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb/library%2Fstd%2Fsrc%2Fos%2Fwasi%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwasi%2Fffi.rs?ref=342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb", "previous_filename": "library/std/src/sys/wasi/ext/ffi.rs"}, {"sha": "ba4057bd34ca2c13881a888d2ebebe16deaefa35", "filename": "library/std/src/os/wasi/fs.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb/library%2Fstd%2Fsrc%2Fos%2Fwasi%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb/library%2Fstd%2Fsrc%2Fos%2Fwasi%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwasi%2Ffs.rs?ref=342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb", "previous_filename": "library/std/src/sys/wasi/ext/fs.rs"}, {"sha": "b2e79cc1b4a9d59c59d680e2f22aa038c0f1d97f", "filename": "library/std/src/os/wasi/io.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb/library%2Fstd%2Fsrc%2Fos%2Fwasi%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb/library%2Fstd%2Fsrc%2Fos%2Fwasi%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwasi%2Fio.rs?ref=342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb", "previous_filename": "library/std/src/sys/wasi/ext/io.rs"}, {"sha": "66edb953677b3ccdd6cb324764abbfdd166da079", "filename": "library/std/src/os/wasi/mod.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb/library%2Fstd%2Fsrc%2Fos%2Fwasi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb/library%2Fstd%2Fsrc%2Fos%2Fwasi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwasi%2Fmod.rs?ref=342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb", "patch": "@@ -25,6 +25,7 @@\n //! }\n //! ```\n \n+#![stable(feature = \"rust1\", since = \"1.0.0\")]\n #![deny(unsafe_op_in_unsafe_fn)]\n #![doc(cfg(target_os = \"wasi\"))]\n ", "previous_filename": "library/std/src/sys/wasi/ext/mod.rs"}, {"sha": "c89b9ff1efa6b98e892b510fcc0af2796bcda054", "filename": "library/std/src/os/windows/ffi.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fffi.rs?ref=342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb", "previous_filename": "library/std/src/sys/windows/ext/ffi.rs"}, {"sha": "b20eafb4d53a59396a629ea903fda96b33e5e7a0", "filename": "library/std/src/os/windows/fs.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Ffs.rs?ref=342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb", "previous_filename": "library/std/src/sys/windows/ext/fs.rs"}, {"sha": "31b5d015ed0c31a94b52f6c7b409f71d5c0c8b90", "filename": "library/std/src/os/windows/io.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio.rs?ref=342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb", "previous_filename": "library/std/src/sys/windows/ext/io.rs"}, {"sha": "52ac508f9f707a11ba139bc721eea7337d1f17de", "filename": "library/std/src/os/windows/mod.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fmod.rs?ref=342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb", "patch": "@@ -8,7 +8,6 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n #![doc(cfg(windows))]\n-#![allow(missing_docs)]\n \n pub mod ffi;\n pub mod fs;", "previous_filename": "library/std/src/sys/windows/ext/mod.rs"}, {"sha": "67756b15531bf360b9d5bc8995e240f713a29cb6", "filename": "library/std/src/os/windows/process.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fprocess.rs?ref=342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb", "previous_filename": "library/std/src/sys/windows/ext/process.rs"}, {"sha": "5014e008eb599c12d911a9b89eaf7d3d42d4388d", "filename": "library/std/src/os/windows/raw.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fraw.rs?ref=342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb", "previous_filename": "library/std/src/sys/windows/ext/raw.rs"}, {"sha": "6bd02054f7150ba5e662a1810bf3f046952fc225", "filename": "library/std/src/os/windows/thread.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fthread.rs?ref=342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb", "previous_filename": "library/std/src/sys/windows/ext/thread.rs"}, {"sha": "15a76bbd2c9e018d4139b3ee9043d0b74c00a16d", "filename": "library/std/src/sys/hermit/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fmod.rs?ref=342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb", "patch": "@@ -24,7 +24,6 @@ pub mod args;\n pub mod cmath;\n pub mod condvar;\n pub mod env;\n-pub mod ext;\n pub mod fd;\n pub mod fs;\n #[path = \"../unsupported/io.rs\"]"}, {"sha": "f813587b1b3408a41a0030b935ed4a2e4535c9f9", "filename": "library/std/src/sys/mod.rs", "status": "modified", "additions": 14, "deletions": 67, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb/library%2Fstd%2Fsrc%2Fsys%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb/library%2Fstd%2Fsrc%2Fsys%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fmod.rs?ref=342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb", "patch": "@@ -49,80 +49,27 @@ cfg_if::cfg_if! {\n     }\n }\n \n-// Import essential modules from both platforms when documenting. These are\n-// then later used in the `std::os` module when documenting, for example,\n-// Windows when we're compiling for Linux.\n+// Import essential modules from platforms used in `std::os` when documenting.\n+//\n+// Note that on some platforms those modules don't compile\n+// (missing things in `libc` which is empty), so they are not included in `std::os` and can be\n+// omitted here as well.\n \n #[cfg(doc)]\n+#[cfg(not(any(\n+    all(target_arch = \"wasm32\", not(target_os = \"wasi\")),\n+    all(target_vendor = \"fortanix\", target_env = \"sgx\")\n+)))]\n cfg_if::cfg_if! {\n-    if #[cfg(unix)] {\n-        // On unix we'll document what's already available\n-        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        pub use self::ext as unix_ext;\n-    } else if #[cfg(any(target_os = \"hermit\",\n-                        all(target_arch = \"wasm32\", not(target_os = \"wasi\")),\n-                        all(target_vendor = \"fortanix\", target_env = \"sgx\")))] {\n-        // On non-WASI wasm right now the module below doesn't compile\n-        // (missing things in `libc` which is empty) so just omit everything\n-        // with an empty module\n-        #[unstable(issue = \"none\", feature = \"std_internals\")]\n-        #[allow(missing_docs)]\n-        pub mod unix_ext {}\n-    } else {\n-        #[path = \"unix/ext/mod.rs\"]\n-        pub mod unix_ext;\n-    }\n-}\n-\n-#[cfg(doc)]\n-cfg_if::cfg_if! {\n-    if #[cfg(windows)] {\n-        // On windows we'll just be documenting what's already available\n-        #[allow(missing_docs)]\n-        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        pub use self::ext as windows_ext;\n-    } else if #[cfg(any(target_os = \"hermit\",\n-                        all(target_arch = \"wasm32\", not(target_os = \"wasi\")),\n-                        all(target_vendor = \"fortanix\", target_env = \"sgx\")))] {\n-        // On non-WASI wasm right now the shim below doesn't compile, so\n-        // just omit it\n-        #[unstable(issue = \"none\", feature = \"std_internals\")]\n-        #[allow(missing_docs)]\n-        pub mod windows_ext {}\n-    } else {\n-        // On all other platforms (aka linux/osx/etc) then pull in a \"minimal\"\n+    if #[cfg(not(windows))] {\n+        // On non-Windows platforms (aka linux/osx/etc) pull in a \"minimal\"\n         // amount of windows goop which ends up compiling\n+\n         #[macro_use]\n         #[path = \"windows/compat.rs\"]\n-        mod compat;\n+        pub mod compat;\n \n         #[path = \"windows/c.rs\"]\n-        mod c;\n-\n-        #[path = \"windows/ext/mod.rs\"]\n-        pub mod windows_ext;\n-    }\n-}\n-\n-#[cfg(doc)]\n-cfg_if::cfg_if! {\n-    if #[cfg(target_os = \"wasi\")] {\n-        // On WASI we'll document what's already available\n-        #[stable(feature = \"wasi_ext_doc\", since = \"1.35.0\")]\n-        pub use self::ext as wasi_ext;\n-    } else if #[cfg(any(target_os = \"hermit\",\n-                        target_arch = \"wasm32\",\n-                        all(target_vendor = \"fortanix\", target_env = \"sgx\")))] {\n-        // On non-WASI wasm right now the module below doesn't compile\n-        // (missing things in `libc` which is empty) so just omit everything\n-        // with an empty module\n-        #[unstable(issue = \"none\", feature = \"std_internals\")]\n-        #[allow(missing_docs)]\n-        pub mod wasi_ext {}\n-    } else {\n-        // On other platforms like Windows document the bare bones of WASI\n-        #[path = \"wasi/ext/mod.rs\"]\n-        #[stable(feature = \"wasi_ext_doc\", since = \"1.35.0\")]\n-        pub mod wasi_ext;\n+        pub mod c;\n     }\n }"}, {"sha": "258ad3cd2180ce6a1a3f63e66783be324a4e8dd2", "filename": "library/std/src/sys/sgx/ext/mod.rs", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/24acc388da2cdbe1ec79b6933402941b6fffb26b/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fext%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24acc388da2cdbe1ec79b6933402941b6fffb26b/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fext%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fext%2Fmod.rs?ref=24acc388da2cdbe1ec79b6933402941b6fffb26b", "patch": "@@ -1,5 +0,0 @@\n-#![unstable(feature = \"sgx_platform\", issue = \"56975\")]\n-\n-pub mod arch;\n-pub mod ffi;\n-pub mod io;"}, {"sha": "cdfceca19fcdc7cd1837db254ff1632b27b45a06", "filename": "library/std/src/sys/sgx/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fmod.rs?ref=342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb", "patch": "@@ -17,7 +17,6 @@ pub mod args;\n pub mod cmath;\n pub mod condvar;\n pub mod env;\n-pub mod ext;\n pub mod fd;\n #[path = \"../unsupported/fs.rs\"]\n pub mod fs;"}, {"sha": "57d91441b6fc320430e0bdda47e644b4f61aeedd", "filename": "library/std/src/sys/unix/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs?ref=342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb", "patch": "@@ -15,7 +15,6 @@ pub mod args;\n pub mod cmath;\n pub mod condvar;\n pub mod env;\n-pub mod ext;\n pub mod fd;\n pub mod fs;\n pub mod futex;"}, {"sha": "45a829c0cd212c90f04edd3ce9e44aeecf3d9c3c", "filename": "library/std/src/sys/wasi/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fmod.rs?ref=342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb", "patch": "@@ -33,7 +33,6 @@ pub mod mutex;\n pub mod net;\n pub mod os;\n pub use crate::sys_common::os_str_bytes as os_str;\n-pub mod ext;\n #[path = \"../unix/path.rs\"]\n pub mod path;\n #[path = \"../unsupported/pipe.rs\"]"}, {"sha": "cc60ca375ea39254a854bac0ff4fd25b218556be", "filename": "library/std/src/sys/windows/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fmod.rs?ref=342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb", "patch": "@@ -18,7 +18,6 @@ pub mod c;\n pub mod cmath;\n pub mod condvar;\n pub mod env;\n-pub mod ext;\n pub mod fs;\n pub mod handle;\n pub mod io;"}, {"sha": "1fa439639b24aebab5a0a4467496538faf4500dc", "filename": "src/tools/clippy/clippy_utils/src/paths.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fpaths.rs?ref=342db70ae4ecc3cd17e4fa6497f0a8d9534ccfeb", "patch": "@@ -101,7 +101,7 @@ pub const PARKING_LOT_RWLOCK_WRITE_GUARD: [&str; 2] = [\"parking_lot\", \"RwLockWri\n pub const PATH_BUF_AS_PATH: [&str; 4] = [\"std\", \"path\", \"PathBuf\", \"as_path\"];\n pub const PATH_TO_PATH_BUF: [&str; 4] = [\"std\", \"path\", \"Path\", \"to_path_buf\"];\n pub const PERMISSIONS: [&str; 3] = [\"std\", \"fs\", \"Permissions\"];\n-pub const PERMISSIONS_FROM_MODE: [&str; 7] = [\"std\", \"sys\", \"unix\", \"ext\", \"fs\", \"PermissionsExt\", \"from_mode\"];\n+pub const PERMISSIONS_FROM_MODE: [&str; 7] = [\"std\", \"os\", \"imp\", \"unix\", \"fs\", \"PermissionsExt\", \"from_mode\"];\n pub const POLL: [&str; 4] = [\"core\", \"task\", \"poll\", \"Poll\"];\n pub const POLL_PENDING: [&str; 5] = [\"core\", \"task\", \"poll\", \"Poll\", \"Pending\"];\n pub const POLL_READY: [&str; 5] = [\"core\", \"task\", \"poll\", \"Poll\", \"Ready\"];"}]}