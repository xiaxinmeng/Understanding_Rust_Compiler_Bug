{"sha": "b85042601d69d1c592b731430ef0e445c39fda56", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4NTA0MjYwMWQ2OWQxYzU5MmI3MzE0MzBlZjBlNDQ1YzM5ZmRhNTY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-10T12:08:35Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-10T12:08:35Z"}, "message": "Goto type definition works for self", "tree": {"sha": "74d4a37d0127446bb4725ee9f1d3eea05e7601a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/74d4a37d0127446bb4725ee9f1d3eea05e7601a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b85042601d69d1c592b731430ef0e445c39fda56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b85042601d69d1c592b731430ef0e445c39fda56", "html_url": "https://github.com/rust-lang/rust/commit/b85042601d69d1c592b731430ef0e445c39fda56", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b85042601d69d1c592b731430ef0e445c39fda56/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5fa8f8e3761363098c80e11842682dffcee171d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/5fa8f8e3761363098c80e11842682dffcee171d8", "html_url": "https://github.com/rust-lang/rust/commit/5fa8f8e3761363098c80e11842682dffcee171d8"}], "stats": {"total": 59, "additions": 51, "deletions": 8}, "files": [{"sha": "6b6c5e4948335cfbf3e3c7a334258bd85a95251d", "filename": "crates/ra_hir/src/semantics.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b85042601d69d1c592b731430ef0e445c39fda56/crates%2Fra_hir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b85042601d69d1c592b731430ef0e445c39fda56/crates%2Fra_hir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsemantics.rs?ref=b85042601d69d1c592b731430ef0e445c39fda56", "patch": "@@ -192,6 +192,10 @@ impl<'db, DB: HirDatabase> Semantics<'db, DB> {\n         self.imp.type_of_pat(pat)\n     }\n \n+    pub fn type_of_self(&self, param: &ast::SelfParam) -> Option<Type> {\n+        self.imp.type_of_self(param)\n+    }\n+\n     pub fn resolve_method_call(&self, call: &ast::MethodCallExpr) -> Option<Function> {\n         self.imp.resolve_method_call(call)\n     }\n@@ -216,6 +220,7 @@ impl<'db, DB: HirDatabase> Semantics<'db, DB> {\n         self.imp.resolve_path(path)\n     }\n \n+    // TODO: id\n     pub fn resolve_variant(&self, record_lit: ast::RecordLit) -> Option<VariantId> {\n         self.imp.resolve_variant(record_lit)\n     }\n@@ -377,6 +382,10 @@ impl<'db> SemanticsImpl<'db> {\n         self.analyze(pat.syntax()).type_of_pat(self.db, &pat)\n     }\n \n+    pub fn type_of_self(&self, param: &ast::SelfParam) -> Option<Type> {\n+        self.analyze(param.syntax()).type_of_self(self.db, &param)\n+    }\n+\n     pub fn resolve_method_call(&self, call: &ast::MethodCallExpr) -> Option<Function> {\n         self.analyze(call.syntax()).resolve_method_call(self.db, call)\n     }"}, {"sha": "1f1bdc0d8820aa6978b2997766846111c4225064", "filename": "crates/ra_hir/src/source_analyzer.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b85042601d69d1c592b731430ef0e445c39fda56/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b85042601d69d1c592b731430ef0e445c39fda56/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs?ref=b85042601d69d1c592b731430ef0e445c39fda56", "patch": "@@ -115,6 +115,7 @@ impl SourceAnalyzer {\n         Some(res)\n     }\n \n+    // TODO: rename\n     pub(crate) fn type_of(&self, db: &dyn HirDatabase, expr: &ast::Expr) -> Option<Type> {\n         let expr_id = self.expr_id(db, expr)?;\n         let ty = self.infer.as_ref()?[expr_id].clone();\n@@ -127,6 +128,17 @@ impl SourceAnalyzer {\n         Type::new_with_resolver(db, &self.resolver, ty)\n     }\n \n+    pub(crate) fn type_of_self(\n+        &self,\n+        db: &dyn HirDatabase,\n+        param: &ast::SelfParam,\n+    ) -> Option<Type> {\n+        let src = InFile { file_id: self.file_id, value: param };\n+        let pat_id = self.body_source_map.as_ref()?.node_self_param(src)?;\n+        let ty = self.infer.as_ref()?[pat_id].clone();\n+        Type::new_with_resolver(db, &self.resolver, ty)\n+    }\n+\n     pub(crate) fn resolve_method_call(\n         &self,\n         db: &dyn HirDatabase,"}, {"sha": "031ffe13f3b725d3e58ebf2ef9835d02f41e7cc6", "filename": "crates/ra_hir_def/src/body.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b85042601d69d1c592b731430ef0e445c39fda56/crates%2Fra_hir_def%2Fsrc%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b85042601d69d1c592b731430ef0e445c39fda56/crates%2Fra_hir_def%2Fsrc%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody.rs?ref=b85042601d69d1c592b731430ef0e445c39fda56", "patch": "@@ -302,6 +302,11 @@ impl BodySourceMap {\n         self.pat_map.get(&src).cloned()\n     }\n \n+    pub fn node_self_param(&self, node: InFile<&ast::SelfParam>) -> Option<PatId> {\n+        let src = node.map(|it| Either::Right(AstPtr::new(it)));\n+        self.pat_map.get(&src).cloned()\n+    }\n+\n     pub fn field_syntax(&self, expr: ExprId, field: usize) -> InFile<AstPtr<ast::RecordField>> {\n         self.field_map[&(expr, field)].clone()\n     }"}, {"sha": "8fc33d0311affff96c0dbe25cf614145e390b033", "filename": "crates/ra_ide/src/goto_definition.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b85042601d69d1c592b731430ef0e445c39fda56/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b85042601d69d1c592b731430ef0e445c39fda56/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs?ref=b85042601d69d1c592b731430ef0e445c39fda56", "patch": "@@ -7,7 +7,7 @@ use ra_syntax::{\n     ast::{self},\n     match_ast, AstNode,\n     SyntaxKind::*,\n-    SyntaxToken, TokenAtOffset,\n+    SyntaxToken, TokenAtOffset, T,\n };\n \n use crate::{\n@@ -32,9 +32,10 @@ pub(crate) fn goto_definition(\n     let file = sema.parse(position.file_id).syntax().clone();\n     let original_token = pick_best(file.token_at_offset(position.offset))?;\n     let token = sema.descend_into_macros(original_token.clone());\n+    let parent = token.parent();\n \n     let nav_targets = match_ast! {\n-        match (token.parent()) {\n+        match parent {\n             ast::NameRef(name_ref) => {\n                 reference_definition(&sema, &name_ref).to_vec()\n             },\n@@ -57,7 +58,7 @@ fn pick_best(tokens: TokenAtOffset<SyntaxToken>) -> Option<SyntaxToken> {\n     return tokens.max_by_key(priority);\n     fn priority(n: &SyntaxToken) -> usize {\n         match n.kind() {\n-            IDENT | INT_NUMBER => 2,\n+            IDENT | INT_NUMBER | T![self] => 2,\n             kind if kind.is_trivia() => 0,\n             _ => 1,\n         }\n@@ -121,7 +122,8 @@ mod tests {\n             data => panic!(\"bad data: {}\", data),\n         }\n \n-        let mut navs = analysis.goto_definition(position).unwrap().unwrap().info;\n+        let mut navs =\n+            analysis.goto_definition(position).unwrap().expect(\"no definition found\").info;\n         if navs.len() == 0 {\n             panic!(\"unresolved reference\")\n         }"}, {"sha": "d9cf975d458e0bfce805938f39ee4d80e149937b", "filename": "crates/ra_ide/src/goto_type_definition.rs", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b85042601d69d1c592b731430ef0e445c39fda56/crates%2Fra_ide%2Fsrc%2Fgoto_type_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b85042601d69d1c592b731430ef0e445c39fda56/crates%2Fra_ide%2Fsrc%2Fgoto_type_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fgoto_type_definition.rs?ref=b85042601d69d1c592b731430ef0e445c39fda56", "patch": "@@ -1,5 +1,5 @@\n use ra_ide_db::RootDatabase;\n-use ra_syntax::{ast, match_ast, AstNode, SyntaxKind::*, SyntaxToken, TokenAtOffset};\n+use ra_syntax::{ast, match_ast, AstNode, SyntaxKind::*, SyntaxToken, TokenAtOffset, T};\n \n use crate::{display::ToNav, FilePosition, NavigationTarget, RangeInfo};\n \n@@ -25,8 +25,9 @@ pub(crate) fn goto_type_definition(\n     let (ty, node) = sema.ancestors_with_macros(token.parent()).find_map(|node| {\n         let ty = match_ast! {\n             match node {\n-                ast::Expr(expr) => sema.type_of_expr(&expr)?,\n-                ast::Pat(pat) => sema.type_of_pat(&pat)?,\n+                ast::Expr(it) => sema.type_of_expr(&it)?,\n+                ast::Pat(it) => sema.type_of_pat(&it)?,\n+                ast::SelfParam(it) => sema.type_of_self(&it)?,\n                 _ => return None,\n             }\n         };\n@@ -44,7 +45,7 @@ fn pick_best(tokens: TokenAtOffset<SyntaxToken>) -> Option<SyntaxToken> {\n     return tokens.max_by_key(priority);\n     fn priority(n: &SyntaxToken) -> usize {\n         match n.kind() {\n-            IDENT | INT_NUMBER => 2,\n+            IDENT | INT_NUMBER | T![self] => 2,\n             kind if kind.is_trivia() => 0,\n             _ => 1,\n         }\n@@ -140,4 +141,18 @@ mod tests {\n             \"Foo STRUCT_DEF FileId(1) 0..11 7..10\",\n         );\n     }\n+\n+    #[test]\n+    fn goto_def_for_self_param() {\n+        check_goto(\n+            r#\"\n+struct Foo;\n+impl Foo {\n+   //^^^\n+    fn f(&self<|>) {}\n+}\n+\"#,\n+            \"Foo STRUCT_DEF FileId(1) 0..11 7..10\",\n+        )\n+    }\n }"}]}