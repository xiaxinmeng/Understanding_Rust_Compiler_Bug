{"sha": "0938e1680daf66ca6aad428aedf9a920a0dab5ad", "node_id": "C_kwDOAAsO6NoAKDA5MzhlMTY4MGRhZjY2Y2E2YWFkNDI4YWVkZjlhOTIwYTBkYWI1YWQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-12T21:03:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-12T21:03:47Z"}, "message": "Auto merge of #101679 - compiler-errors:rpitit-default-body, r=nikomatsakis\n\nSupport default-body trait functions with return-position `impl Trait` in traits\n\nIntroduce a new `Trait` candidate kind for the `ImplTraitInTrait` projection candidate, which just projects an RPITIT down to its opaque type form.\n\nThis is a hack until we lower RPITITs to regular associated types, after which we will need to rework how these default bodies are type-checked, so comments are left in a few places for us to clean up later.\n\nFixes #101665", "tree": {"sha": "0635a662adb77e43b06a945a6a25ac4aefece490", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0635a662adb77e43b06a945a6a25ac4aefece490"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0938e1680daf66ca6aad428aedf9a920a0dab5ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0938e1680daf66ca6aad428aedf9a920a0dab5ad", "html_url": "https://github.com/rust-lang/rust/commit/0938e1680daf66ca6aad428aedf9a920a0dab5ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0938e1680daf66ca6aad428aedf9a920a0dab5ad/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0983a9aac889d16722a12602ac678051e62c3fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0983a9aac889d16722a12602ac678051e62c3fb", "html_url": "https://github.com/rust-lang/rust/commit/c0983a9aac889d16722a12602ac678051e62c3fb"}, {"sha": "0eeeea9414d0ee5b22f6a33601282b46eca67bd6", "url": "https://api.github.com/repos/rust-lang/rust/commits/0eeeea9414d0ee5b22f6a33601282b46eca67bd6", "html_url": "https://github.com/rust-lang/rust/commit/0eeeea9414d0ee5b22f6a33601282b46eca67bd6"}], "stats": {"total": 289, "additions": 163, "deletions": 126}, "files": [{"sha": "7cee9779c5f397120abea43a62714326b009026f", "filename": "compiler/rustc_hir_analysis/src/check/check.rs", "status": "modified", "additions": 33, "deletions": 23, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/0938e1680daf66ca6aad428aedf9a920a0dab5ad/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0938e1680daf66ca6aad428aedf9a920a0dab5ad/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs?ref=0938e1680daf66ca6aad428aedf9a920a0dab5ad", "patch": "@@ -522,23 +522,33 @@ fn check_static_inhabited<'tcx>(tcx: TyCtxt<'tcx>, def_id: LocalDefId) {\n \n /// Checks that an opaque type does not contain cycles and does not use `Self` or `T::Foo`\n /// projections that would result in \"inheriting lifetimes\".\n-pub(super) fn check_opaque<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n-    def_id: LocalDefId,\n-    substs: SubstsRef<'tcx>,\n-    origin: &hir::OpaqueTyOrigin,\n-) {\n-    let span = tcx.def_span(def_id);\n-    check_opaque_for_inheriting_lifetimes(tcx, def_id, span);\n-    if tcx.type_of(def_id).references_error() {\n+fn check_opaque<'tcx>(tcx: TyCtxt<'tcx>, id: hir::ItemId) {\n+    let item = tcx.hir().item(id);\n+    let hir::ItemKind::OpaqueTy(hir::OpaqueTy { origin, .. }) = item.kind else {\n+        tcx.sess.delay_span_bug(tcx.hir().span(id.hir_id()), \"expected opaque item\");\n+        return;\n+    };\n+\n+    // HACK(jynelson): trying to infer the type of `impl trait` breaks documenting\n+    // `async-std` (and `pub async fn` in general).\n+    // Since rustdoc doesn't care about the concrete type behind `impl Trait`, just don't look at it!\n+    // See https://github.com/rust-lang/rust/issues/75100\n+    if tcx.sess.opts.actually_rustdoc {\n         return;\n     }\n-    if check_opaque_for_cycles(tcx, def_id, substs, span, origin).is_err() {\n+\n+    let substs = InternalSubsts::identity_for_item(tcx, item.def_id.to_def_id());\n+    let span = tcx.def_span(item.def_id.def_id);\n+\n+    check_opaque_for_inheriting_lifetimes(tcx, item.def_id.def_id, span);\n+    if tcx.type_of(item.def_id.def_id).references_error() {\n+        return;\n+    }\n+    if check_opaque_for_cycles(tcx, item.def_id.def_id, substs, span, &origin).is_err() {\n         return;\n     }\n-    check_opaque_meets_bounds(tcx, def_id, substs, span, origin);\n+    check_opaque_meets_bounds(tcx, item.def_id.def_id, substs, span, &origin);\n }\n-\n /// Checks that an opaque type does not use `Self` or `T::Foo` projections that would result\n /// in \"inheriting lifetimes\".\n #[instrument(level = \"debug\", skip(tcx, span))]\n@@ -857,17 +867,17 @@ fn check_item_type<'tcx>(tcx: TyCtxt<'tcx>, id: hir::ItemId) {\n             check_union(tcx, id.def_id.def_id);\n         }\n         DefKind::OpaqueTy => {\n-            let item = tcx.hir().item(id);\n-            let hir::ItemKind::OpaqueTy(hir::OpaqueTy { origin, .. }) = item.kind else {\n-                return;\n-            };\n-            // HACK(jynelson): trying to infer the type of `impl trait` breaks documenting\n-            // `async-std` (and `pub async fn` in general).\n-            // Since rustdoc doesn't care about the concrete type behind `impl Trait`, just don't look at it!\n-            // See https://github.com/rust-lang/rust/issues/75100\n-            if !tcx.sess.opts.actually_rustdoc {\n-                let substs = InternalSubsts::identity_for_item(tcx, item.def_id.to_def_id());\n-                check_opaque(tcx, item.def_id.def_id, substs, &origin);\n+            check_opaque(tcx, id);\n+        }\n+        DefKind::ImplTraitPlaceholder => {\n+            let parent = tcx.impl_trait_in_trait_parent(id.def_id.to_def_id());\n+            // Only check the validity of this opaque type if the function has a default body\n+            if let hir::Node::TraitItem(hir::TraitItem {\n+                kind: hir::TraitItemKind::Fn(_, hir::TraitFn::Provided(_)),\n+                ..\n+            }) = tcx.hir().get_by_def_id(parent.expect_local())\n+            {\n+                check_opaque(tcx, id);\n             }\n         }\n         DefKind::TyAlias => {"}, {"sha": "0aa44431c79b0586cd7583c670cc0b860937ccc5", "filename": "compiler/rustc_hir_analysis/src/collect/type_of.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0938e1680daf66ca6aad428aedf9a920a0dab5ad/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0938e1680daf66ca6aad428aedf9a920a0dab5ad/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs?ref=0938e1680daf66ca6aad428aedf9a920a0dab5ad", "patch": "@@ -340,10 +340,9 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                     ..\n                 }) => {\n                     if in_trait {\n-                        span_bug!(item.span, \"impl-trait in trait has no default\")\n-                    } else {\n-                        find_opaque_ty_constraints_for_rpit(tcx, def_id, owner)\n+                        assert!(tcx.impl_defaultness(owner).has_value());\n                     }\n+                    find_opaque_ty_constraints_for_rpit(tcx, def_id, owner)\n                 }\n                 ItemKind::Trait(..)\n                 | ItemKind::TraitAlias(..)"}, {"sha": "646369633133c77b04bd9eb663b057cb07ee5368", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0938e1680daf66ca6aad428aedf9a920a0dab5ad/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0938e1680daf66ca6aad428aedf9a920a0dab5ad/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=0938e1680daf66ca6aad428aedf9a920a0dab5ad", "patch": "@@ -1161,6 +1161,7 @@ impl<'tcx> ProjectionTy<'tcx> {\n         tcx: TyCtxt<'tcx>,\n     ) -> (ty::TraitRef<'tcx>, &'tcx [ty::GenericArg<'tcx>]) {\n         let def_id = tcx.parent(self.item_def_id);\n+        assert_eq!(tcx.def_kind(def_id), DefKind::Trait);\n         let trait_generics = tcx.generics_of(def_id);\n         (\n             ty::TraitRef { def_id, substs: self.substs.truncate_to(tcx, trait_generics) },"}, {"sha": "e904fab4d7653bb661939bbef7fc5468ba45bdee", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0938e1680daf66ca6aad428aedf9a920a0dab5ad/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0938e1680daf66ca6aad428aedf9a920a0dab5ad/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=0938e1680daf66ca6aad428aedf9a920a0dab5ad", "patch": "@@ -122,8 +122,20 @@ where\n         &mut self,\n         projection: ty::ProjectionTy<'tcx>,\n     ) -> ControlFlow<V::BreakTy> {\n-        let (trait_ref, assoc_substs) =\n-            projection.trait_ref_and_own_substs(self.def_id_visitor.tcx());\n+        let tcx = self.def_id_visitor.tcx();\n+        let (trait_ref, assoc_substs) = if tcx.def_kind(projection.item_def_id)\n+            != DefKind::ImplTraitPlaceholder\n+        {\n+            projection.trait_ref_and_own_substs(tcx)\n+        } else {\n+            // HACK(RPITIT): Remove this when RPITITs are lowered to regular assoc tys\n+            let def_id = tcx.impl_trait_in_trait_parent(projection.item_def_id);\n+            let trait_generics = tcx.generics_of(def_id);\n+            (\n+                ty::TraitRef { def_id, substs: projection.substs.truncate_to(tcx, trait_generics) },\n+                &projection.substs[trait_generics.count()..],\n+            )\n+        };\n         self.visit_trait(trait_ref)?;\n         if self.def_id_visitor.shallow() {\n             ControlFlow::CONTINUE"}, {"sha": "cd1e9a97731eee5c857e30fbfba2aca19957b26f", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 45, "deletions": 3, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/0938e1680daf66ca6aad428aedf9a920a0dab5ad/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0938e1680daf66ca6aad428aedf9a920a0dab5ad/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=0938e1680daf66ca6aad428aedf9a920a0dab5ad", "patch": "@@ -72,7 +72,15 @@ enum ProjectionCandidate<'tcx> {\n     /// From an \"impl\" (or a \"pseudo-impl\" returned by select)\n     Select(Selection<'tcx>),\n \n-    ImplTraitInTrait(ImplSourceUserDefinedData<'tcx, PredicateObligation<'tcx>>),\n+    ImplTraitInTrait(ImplTraitInTraitCandidate<'tcx>),\n+}\n+\n+#[derive(PartialEq, Eq, Debug)]\n+enum ImplTraitInTraitCandidate<'tcx> {\n+    // The `impl Trait` from a trait function's default body\n+    Trait,\n+    // A concrete type provided from a trait's `impl Trait` from an impl\n+    Impl(ImplSourceUserDefinedData<'tcx, PredicateObligation<'tcx>>),\n }\n \n enum ProjectionCandidateSet<'tcx> {\n@@ -1319,6 +1327,19 @@ fn assemble_candidate_for_impl_trait_in_trait<'cx, 'tcx>(\n     let tcx = selcx.tcx();\n     if tcx.def_kind(obligation.predicate.item_def_id) == DefKind::ImplTraitPlaceholder {\n         let trait_fn_def_id = tcx.impl_trait_in_trait_parent(obligation.predicate.item_def_id);\n+        // If we are trying to project an RPITIT with trait's default `Self` parameter,\n+        // then we must be within a default trait body.\n+        if obligation.predicate.self_ty()\n+            == ty::InternalSubsts::identity_for_item(tcx, obligation.predicate.item_def_id)\n+                .type_at(0)\n+            && tcx.associated_item(trait_fn_def_id).defaultness(tcx).has_value()\n+        {\n+            candidate_set.push_candidate(ProjectionCandidate::ImplTraitInTrait(\n+                ImplTraitInTraitCandidate::Trait,\n+            ));\n+            return;\n+        }\n+\n         let trait_def_id = tcx.parent(trait_fn_def_id);\n         let trait_substs =\n             obligation.predicate.substs.truncate_to(tcx, tcx.generics_of(trait_def_id));\n@@ -1330,7 +1351,9 @@ fn assemble_candidate_for_impl_trait_in_trait<'cx, 'tcx>(\n         let _ =\n             selcx.infcx().commit_if_ok(|_| match selcx.select(&obligation.with(trait_predicate)) {\n                 Ok(Some(super::ImplSource::UserDefined(data))) => {\n-                    candidate_set.push_candidate(ProjectionCandidate::ImplTraitInTrait(data));\n+                    candidate_set.push_candidate(ProjectionCandidate::ImplTraitInTrait(\n+                        ImplTraitInTraitCandidate::Impl(data),\n+                    ));\n                     Ok(())\n                 }\n                 Ok(None) => {\n@@ -1792,9 +1815,18 @@ fn confirm_candidate<'cx, 'tcx>(\n         ProjectionCandidate::Select(impl_source) => {\n             confirm_select_candidate(selcx, obligation, impl_source)\n         }\n-        ProjectionCandidate::ImplTraitInTrait(data) => {\n+        ProjectionCandidate::ImplTraitInTrait(ImplTraitInTraitCandidate::Impl(data)) => {\n             confirm_impl_trait_in_trait_candidate(selcx, obligation, data)\n         }\n+        // If we're projecting an RPITIT for a default trait body, that's just\n+        // the same def-id, but as an opaque type (with regular RPIT semantics).\n+        ProjectionCandidate::ImplTraitInTrait(ImplTraitInTraitCandidate::Trait) => Progress {\n+            term: selcx\n+                .tcx()\n+                .mk_opaque(obligation.predicate.item_def_id, obligation.predicate.substs)\n+                .into(),\n+            obligations: vec![],\n+        },\n     };\n \n     // When checking for cycle during evaluation, we compare predicates with\n@@ -2211,6 +2243,16 @@ fn confirm_impl_trait_in_trait_candidate<'tcx>(\n         return Progress { term: tcx.ty_error().into(), obligations };\n     }\n \n+    // Use the default `impl Trait` for the trait, e.g., for a default trait body\n+    if leaf_def.item.container == ty::AssocItemContainer::TraitContainer {\n+        return Progress {\n+            term: tcx\n+                .mk_opaque(obligation.predicate.item_def_id, obligation.predicate.substs)\n+                .into(),\n+            obligations,\n+        };\n+    }\n+\n     let impl_fn_def_id = leaf_def.item.def_id;\n     let impl_fn_substs = obligation.predicate.substs.rebase_onto(tcx, trait_fn_def_id, data.substs);\n "}, {"sha": "e2062e82725c0507fad934ec9f6720dfab28ea71", "filename": "src/test/ui/async-await/async-trait-fn.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0938e1680daf66ca6aad428aedf9a920a0dab5ad/src%2Ftest%2Fui%2Fasync-await%2Fasync-trait-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0938e1680daf66ca6aad428aedf9a920a0dab5ad/src%2Ftest%2Fui%2Fasync-await%2Fasync-trait-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-trait-fn.rs?ref=0938e1680daf66ca6aad428aedf9a920a0dab5ad", "patch": "@@ -1,11 +1,8 @@\n // edition:2018\n trait T {\n     async fn foo() {} //~ ERROR functions in traits cannot be declared `async`\n-    //~^ ERROR mismatched types\n     async fn bar(&self) {} //~ ERROR functions in traits cannot be declared `async`\n-    //~^ ERROR mismatched types\n     async fn baz() { //~ ERROR functions in traits cannot be declared `async`\n-        //~^ ERROR mismatched types\n         // Nested item must not ICE.\n         fn a() {}\n     }"}, {"sha": "afbe25cf7ab74d4c232d8c8ce16f7e1ae967e29e", "filename": "src/test/ui/async-await/async-trait-fn.stderr", "status": "modified", "additions": 4, "deletions": 52, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/0938e1680daf66ca6aad428aedf9a920a0dab5ad/src%2Ftest%2Fui%2Fasync-await%2Fasync-trait-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0938e1680daf66ca6aad428aedf9a920a0dab5ad/src%2Ftest%2Fui%2Fasync-await%2Fasync-trait-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-trait-fn.stderr?ref=0938e1680daf66ca6aad428aedf9a920a0dab5ad", "patch": "@@ -12,7 +12,7 @@ LL |     async fn foo() {}\n    = help: add `#![feature(async_fn_in_trait)]` to the crate attributes to enable\n \n error[E0706]: functions in traits cannot be declared `async`\n-  --> $DIR/async-trait-fn.rs:5:5\n+  --> $DIR/async-trait-fn.rs:4:5\n    |\n LL |     async fn bar(&self) {}\n    |     -----^^^^^^^^^^^^^^\n@@ -25,7 +25,7 @@ LL |     async fn bar(&self) {}\n    = help: add `#![feature(async_fn_in_trait)]` to the crate attributes to enable\n \n error[E0706]: functions in traits cannot be declared `async`\n-  --> $DIR/async-trait-fn.rs:7:5\n+  --> $DIR/async-trait-fn.rs:5:5\n    |\n LL |     async fn baz() {\n    |     -----^^^^^^^^^\n@@ -37,54 +37,6 @@ LL |     async fn baz() {\n    = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n    = help: add `#![feature(async_fn_in_trait)]` to the crate attributes to enable\n \n-error[E0308]: mismatched types\n-  --> $DIR/async-trait-fn.rs:3:20\n-   |\n-LL |     async fn foo() {}\n-   |                    ^^ expected associated type, found opaque type\n-   |\n-  ::: $SRC_DIR/core/src/future/mod.rs:LL:COL\n-   |\n-LL | pub const fn from_generator<T>(gen: T) -> impl Future<Output = T::Return>\n-   |                                           ------------------------------- the found opaque type\n-   |\n-   = note: expected associated type `impl Future<Output = ()>` (trait associated opaque type at <$DIR/async-trait-fn.rs:3:20>)\n-                  found opaque type `impl Future<Output = ()>` (opaque type at <$SRC_DIR/core/src/future/mod.rs:LL:COL>)\n-\n-error[E0308]: mismatched types\n-  --> $DIR/async-trait-fn.rs:5:25\n-   |\n-LL |     async fn bar(&self) {}\n-   |                         ^^ expected associated type, found opaque type\n-   |\n-  ::: $SRC_DIR/core/src/future/mod.rs:LL:COL\n-   |\n-LL | pub const fn from_generator<T>(gen: T) -> impl Future<Output = T::Return>\n-   |                                           ------------------------------- the found opaque type\n-   |\n-   = note: expected associated type `impl Future<Output = ()>` (trait associated opaque type at <$DIR/async-trait-fn.rs:5:25>)\n-                  found opaque type `impl Future<Output = ()>` (opaque type at <$SRC_DIR/core/src/future/mod.rs:LL:COL>)\n-\n-error[E0308]: mismatched types\n-  --> $DIR/async-trait-fn.rs:7:20\n-   |\n-LL |       async fn baz() {\n-   |  ____________________^\n-LL | |\n-LL | |         // Nested item must not ICE.\n-LL | |         fn a() {}\n-LL | |     }\n-   | |_____^ expected associated type, found opaque type\n-   |\n-  ::: $SRC_DIR/core/src/future/mod.rs:LL:COL\n-   |\n-LL |   pub const fn from_generator<T>(gen: T) -> impl Future<Output = T::Return>\n-   |                                             ------------------------------- the found opaque type\n-   |\n-   = note: expected associated type `impl Future<Output = ()>` (trait associated opaque type at <$DIR/async-trait-fn.rs:7:20>)\n-                  found opaque type `impl Future<Output = ()>` (opaque type at <$SRC_DIR/core/src/future/mod.rs:LL:COL>)\n-\n-error: aborting due to 6 previous errors\n+error: aborting due to 3 previous errors\n \n-Some errors have detailed explanations: E0308, E0706.\n-For more information about an error, try `rustc --explain E0308`.\n+For more information about this error, try `rustc --explain E0706`."}, {"sha": "6bd6d879a4acef4cbcd581f8729dccffe9d81fd0", "filename": "src/test/ui/async-await/edition-deny-async-fns-2015.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0938e1680daf66ca6aad428aedf9a920a0dab5ad/src%2Ftest%2Fui%2Fasync-await%2Fedition-deny-async-fns-2015.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0938e1680daf66ca6aad428aedf9a920a0dab5ad/src%2Ftest%2Fui%2Fasync-await%2Fedition-deny-async-fns-2015.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fedition-deny-async-fns-2015.rs?ref=0938e1680daf66ca6aad428aedf9a920a0dab5ad", "patch": "@@ -17,7 +17,6 @@ impl Foo {\n trait Bar {\n     async fn foo() {} //~ ERROR `async fn` is not permitted in Rust 2015\n     //~^ ERROR functions in traits cannot be declared `async`\n-    //~| ERROR mismatched types\n }\n \n fn main() {"}, {"sha": "ba918eb28def198022db11f1baba0e2201d8b583", "filename": "src/test/ui/async-await/edition-deny-async-fns-2015.stderr", "status": "modified", "additions": 6, "deletions": 20, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0938e1680daf66ca6aad428aedf9a920a0dab5ad/src%2Ftest%2Fui%2Fasync-await%2Fedition-deny-async-fns-2015.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0938e1680daf66ca6aad428aedf9a920a0dab5ad/src%2Ftest%2Fui%2Fasync-await%2Fedition-deny-async-fns-2015.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fedition-deny-async-fns-2015.stderr?ref=0938e1680daf66ca6aad428aedf9a920a0dab5ad", "patch": "@@ -53,7 +53,7 @@ LL |     async fn foo() {}\n    = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n \n error[E0670]: `async fn` is not permitted in Rust 2015\n-  --> $DIR/edition-deny-async-fns-2015.rs:37:9\n+  --> $DIR/edition-deny-async-fns-2015.rs:36:9\n    |\n LL |         async fn bar() {}\n    |         ^^^^^ to use `async fn`, switch to Rust 2018 or later\n@@ -62,7 +62,7 @@ LL |         async fn bar() {}\n    = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n \n error[E0670]: `async fn` is not permitted in Rust 2015\n-  --> $DIR/edition-deny-async-fns-2015.rs:27:9\n+  --> $DIR/edition-deny-async-fns-2015.rs:26:9\n    |\n LL |         async fn foo() {}\n    |         ^^^^^ to use `async fn`, switch to Rust 2018 or later\n@@ -71,7 +71,7 @@ LL |         async fn foo() {}\n    = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n \n error[E0670]: `async fn` is not permitted in Rust 2015\n-  --> $DIR/edition-deny-async-fns-2015.rs:32:13\n+  --> $DIR/edition-deny-async-fns-2015.rs:31:13\n    |\n LL |             async fn bar() {}\n    |             ^^^^^ to use `async fn`, switch to Rust 2018 or later\n@@ -92,21 +92,7 @@ LL |     async fn foo() {}\n    = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n    = help: add `#![feature(async_fn_in_trait)]` to the crate attributes to enable\n \n-error[E0308]: mismatched types\n-  --> $DIR/edition-deny-async-fns-2015.rs:18:20\n-   |\n-LL |     async fn foo() {}\n-   |                    ^^ expected associated type, found opaque type\n-   |\n-  ::: $SRC_DIR/core/src/future/mod.rs:LL:COL\n-   |\n-LL | pub const fn from_generator<T>(gen: T) -> impl Future<Output = T::Return>\n-   |                                           ------------------------------- the found opaque type\n-   |\n-   = note: expected associated type `impl Future<Output = ()>` (trait associated opaque type at <$DIR/edition-deny-async-fns-2015.rs:18:20>)\n-                  found opaque type `impl Future<Output = ()>` (opaque type at <$SRC_DIR/core/src/future/mod.rs:LL:COL>)\n-\n-error: aborting due to 11 previous errors\n+error: aborting due to 10 previous errors\n \n-Some errors have detailed explanations: E0308, E0670, E0706.\n-For more information about an error, try `rustc --explain E0308`.\n+Some errors have detailed explanations: E0670, E0706.\n+For more information about an error, try `rustc --explain E0670`."}, {"sha": "f0d407cd527d6fcaa04e696b6070846681c48e51", "filename": "src/test/ui/impl-trait/in-trait/default-body-with-rpit.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/0938e1680daf66ca6aad428aedf9a920a0dab5ad/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-with-rpit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0938e1680daf66ca6aad428aedf9a920a0dab5ad/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-with-rpit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-with-rpit.rs?ref=0938e1680daf66ca6aad428aedf9a920a0dab5ad", "patch": "@@ -0,0 +1,21 @@\n+// known-bug: #102688\n+// edition:2021\n+\n+#![feature(async_fn_in_trait, return_position_impl_trait_in_trait)]\n+#![allow(incomplete_features)]\n+\n+use std::fmt::Debug;\n+\n+trait Foo {\n+    async fn baz(&self) -> impl Debug {\n+        \"\"\n+    }\n+}\n+\n+struct Bar;\n+\n+impl Foo for Bar {}\n+\n+fn main() {\n+    let _ = Bar.baz();\n+}"}, {"sha": "4529d301f9e91e3c50ee151bd97a5de6e4d7a335", "filename": "src/test/ui/impl-trait/in-trait/default-body-with-rpit.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0938e1680daf66ca6aad428aedf9a920a0dab5ad/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-with-rpit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0938e1680daf66ca6aad428aedf9a920a0dab5ad/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-with-rpit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-with-rpit.stderr?ref=0938e1680daf66ca6aad428aedf9a920a0dab5ad", "patch": "@@ -0,0 +1,12 @@\n+error[E0720]: cannot resolve opaque type\n+  --> $DIR/default-body-with-rpit.rs:10:28\n+   |\n+LL |     async fn baz(&self) -> impl Debug {\n+   |                            ^^^^^^^^^^ cannot resolve opaque type\n+   |\n+   = note: these returned values have a concrete \"never\" type\n+   = help: this error will resolve once the item's body returns a concrete type\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0720`."}, {"sha": "b0baf5bb10dd2ab60e411878660b2fe125000b7b", "filename": "src/test/ui/impl-trait/in-trait/default-body.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/0938e1680daf66ca6aad428aedf9a920a0dab5ad/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0938e1680daf66ca6aad428aedf9a920a0dab5ad/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body.rs?ref=0938e1680daf66ca6aad428aedf9a920a0dab5ad", "patch": "@@ -0,0 +1,21 @@\n+// check-pass\n+// edition:2021\n+\n+#![feature(async_fn_in_trait, return_position_impl_trait_in_trait)]\n+#![allow(incomplete_features)]\n+\n+use std::fmt::Debug;\n+\n+trait Foo {\n+    async fn baz(&self) -> &str {\n+        \"\"\n+    }\n+}\n+\n+struct Bar;\n+\n+impl Foo for Bar {}\n+\n+fn main() {\n+    let _ = Bar.baz();\n+}"}, {"sha": "4559da91e47a8b37313dbd575ecbb5e4a57822fb", "filename": "src/test/ui/span/drop-location-span-error-rust-2021-incompatible-closure-captures-93117.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0938e1680daf66ca6aad428aedf9a920a0dab5ad/src%2Ftest%2Fui%2Fspan%2Fdrop-location-span-error-rust-2021-incompatible-closure-captures-93117.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0938e1680daf66ca6aad428aedf9a920a0dab5ad/src%2Ftest%2Fui%2Fspan%2Fdrop-location-span-error-rust-2021-incompatible-closure-captures-93117.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fdrop-location-span-error-rust-2021-incompatible-closure-captures-93117.rs?ref=0938e1680daf66ca6aad428aedf9a920a0dab5ad", "patch": "@@ -12,7 +12,6 @@ impl A {\n \n trait C{async fn new(val: T) {} //~ ERROR  `async fn` is not permitted in Rust 2015\n //~^ ERROR functions in traits cannot be declared `async`\n-//~| ERROR mismatched types\n //~| ERROR cannot find type `T` in this scope\n //~| WARN changes to closure capture in Rust 2021 will affect drop order [rust_2021_incompatible_closure_captures]\n "}, {"sha": "df1cafdb7d3cc12628dc0ec44594cc259be54854", "filename": "src/test/ui/span/drop-location-span-error-rust-2021-incompatible-closure-captures-93117.stderr", "status": "modified", "additions": 4, "deletions": 18, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0938e1680daf66ca6aad428aedf9a920a0dab5ad/src%2Ftest%2Fui%2Fspan%2Fdrop-location-span-error-rust-2021-incompatible-closure-captures-93117.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0938e1680daf66ca6aad428aedf9a920a0dab5ad/src%2Ftest%2Fui%2Fspan%2Fdrop-location-span-error-rust-2021-incompatible-closure-captures-93117.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fdrop-location-span-error-rust-2021-incompatible-closure-captures-93117.stderr?ref=0938e1680daf66ca6aad428aedf9a920a0dab5ad", "patch": "@@ -1,5 +1,5 @@\n error: this file contains an unclosed delimiter\n-  --> $DIR/drop-location-span-error-rust-2021-incompatible-closure-captures-93117.rs:19:53\n+  --> $DIR/drop-location-span-error-rust-2021-incompatible-closure-captures-93117.rs:18:53\n    |\n LL | trait C{async fn new(val: T) {}\n    |        - unclosed delimiter\n@@ -74,20 +74,6 @@ help: add a dummy let to cause `path` to be fully captured\n LL |     async fn create(path: impl AsRef<std::path::Path>)  { let _ = &path;\n    |                                                           ++++++++++++++\n \n-error[E0308]: mismatched types\n-  --> $DIR/drop-location-span-error-rust-2021-incompatible-closure-captures-93117.rs:13:30\n-   |\n-LL | trait C{async fn new(val: T) {}\n-   |                              ^^ expected associated type, found opaque type\n-   |\n-  ::: $SRC_DIR/core/src/future/mod.rs:LL:COL\n-   |\n-LL | pub const fn from_generator<T>(gen: T) -> impl Future<Output = T::Return>\n-   |                                           ------------------------------- the found opaque type\n-   |\n-   = note: expected associated type `impl Future<Output = ()>` (trait associated opaque type at <$DIR/drop-location-span-error-rust-2021-incompatible-closure-captures-93117.rs:13:30>)\n-                  found opaque type `impl Future<Output = ()>` (opaque type at <$SRC_DIR/core/src/future/mod.rs:LL:COL>)\n-\n warning: changes to closure capture in Rust 2021 will affect drop order\n   --> $DIR/drop-location-span-error-rust-2021-incompatible-closure-captures-93117.rs:13:30\n    |\n@@ -103,7 +89,7 @@ help: add a dummy let to cause `val` to be fully captured\n LL | trait C{async fn new(val: T) { let _ = &val;}\n    |                                +++++++++++++\n \n-error: aborting due to 7 previous errors; 2 warnings emitted\n+error: aborting due to 6 previous errors; 2 warnings emitted\n \n-Some errors have detailed explanations: E0308, E0412, E0423, E0670, E0706.\n-For more information about an error, try `rustc --explain E0308`.\n+Some errors have detailed explanations: E0412, E0423, E0670, E0706.\n+For more information about an error, try `rustc --explain E0412`."}]}