{"sha": "1e4c8173e182d6254c7faafb3d1e1020eac194c8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlNGM4MTczZTE4MmQ2MjU0YzdmYWFmYjNkMWUxMDIwZWFjMTk0Yzg=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-08-20T07:59:47Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-09-01T22:29:28Z"}, "message": "Improve diagnostics and remove dead code.", "tree": {"sha": "f26ec69d30dc3ac911c2e9048631282755c2eb56", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f26ec69d30dc3ac911c2e9048631282755c2eb56"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e4c8173e182d6254c7faafb3d1e1020eac194c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e4c8173e182d6254c7faafb3d1e1020eac194c8", "html_url": "https://github.com/rust-lang/rust/commit/1e4c8173e182d6254c7faafb3d1e1020eac194c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e4c8173e182d6254c7faafb3d1e1020eac194c8/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87ae68c1d6e55a62e1faf4ceccb5e884aa6a95d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/87ae68c1d6e55a62e1faf4ceccb5e884aa6a95d5", "html_url": "https://github.com/rust-lang/rust/commit/87ae68c1d6e55a62e1faf4ceccb5e884aa6a95d5"}], "stats": {"total": 54, "additions": 23, "deletions": 31}, "files": [{"sha": "6cf53f877fb600d447ed5488b9afe2a1f3f7769a", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 17, "deletions": 29, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/1e4c8173e182d6254c7faafb3d1e1020eac194c8/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e4c8173e182d6254c7faafb3d1e1020eac194c8/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=1e4c8173e182d6254c7faafb3d1e1020eac194c8", "patch": "@@ -1287,7 +1287,7 @@ impl<'a> Resolver<'a> {\n         while index < module_path_len {\n             let name = module_path[index];\n             match self.resolve_name_in_module(search_module, name, TypeNS, false, span) {\n-                Failed(None) => {\n+                Failed(_) => {\n                     let segment_name = name.as_str();\n                     let module_name = module_to_string(search_module);\n                     let msg = if \"???\" == &module_name {\n@@ -1314,7 +1314,6 @@ impl<'a> Resolver<'a> {\n \n                     return Failed(span.map(|span| (span, msg)));\n                 }\n-                Failed(err) => return Failed(err),\n                 Indeterminate => {\n                     debug!(\"(resolving module path for import) module resolution is \\\n                             indeterminate: {}\",\n@@ -1383,7 +1382,11 @@ impl<'a> Resolver<'a> {\n                         let ident = ast::Ident::with_empty_ctxt(module_path[0]);\n                         match self.resolve_ident_in_lexical_scope(ident, TypeNS, span)\n                                   .and_then(LexicalScopeBinding::module) {\n-                            None => return Failed(None),\n+                            None => {\n+                                let msg =\n+                                    format!(\"Use of undeclared type or module `{}`\", ident.name);\n+                                return Failed(span.map(|span| (span, msg)));\n+                            }\n                             Some(containing_module) => {\n                                 search_module = containing_module;\n                                 start_index = 1;\n@@ -2614,16 +2617,9 @@ impl<'a> Resolver<'a> {\n         let containing_module;\n         match self.resolve_module_path(&module_path, UseLexicalScope, Some(span)) {\n             Failed(err) => {\n-                let (span, msg) = match err {\n-                    Some((span, msg)) => (span, msg),\n-                    None => {\n-                        let msg = format!(\"Use of undeclared type or module `{}`\",\n-                                          names_to_string(&module_path));\n-                        (span, msg)\n-                    }\n-                };\n-\n-                resolve_error(self, span, ResolutionError::FailedToResolve(&msg));\n+                if let Some((span, msg)) = err {\n+                    resolve_error(self, span, ResolutionError::FailedToResolve(&msg));\n+                }\n                 return Err(true);\n             }\n             Indeterminate => return Err(false),\n@@ -2651,16 +2647,9 @@ impl<'a> Resolver<'a> {\n         let containing_module;\n         match self.resolve_module_path_from_root(root_module, &module_path, 0, Some(span)) {\n             Failed(err) => {\n-                let (span, msg) = match err {\n-                    Some((span, msg)) => (span, msg),\n-                    None => {\n-                        let msg = format!(\"Use of undeclared module `::{}`\",\n-                                          names_to_string(&module_path));\n-                        (span, msg)\n-                    }\n-                };\n-\n-                resolve_error(self, span, ResolutionError::FailedToResolve(&msg));\n+                if let Some((span, msg)) = err {\n+                    resolve_error(self, span, ResolutionError::FailedToResolve(&msg));\n+                }\n                 return Err(true);\n             }\n \n@@ -3270,12 +3259,11 @@ impl<'a> Resolver<'a> {\n                 path_resolution = PathResolution::new(def);\n                 ty::Visibility::Restricted(self.definitions.as_local_node_id(def.def_id()).unwrap())\n             }\n-            Failed(Some((span, msg))) => {\n-                self.session.span_err(span, &format!(\"failed to resolve module path. {}\", msg));\n-                ty::Visibility::Public\n-            }\n-            _ => {\n-                self.session.span_err(path.span, \"unresolved module path\");\n+            Indeterminate => unreachable!(),\n+            Failed(err) => {\n+                if let Some((span, msg)) = err {\n+                    self.session.span_err(span, &format!(\"failed to resolve module path. {}\", msg));\n+                }\n                 ty::Visibility::Public\n             }\n         };"}, {"sha": "6987d06ef12c3b40d0a504345ad8cc173e00cd79", "filename": "src/test/compile-fail/bad-module.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1e4c8173e182d6254c7faafb3d1e1020eac194c8/src%2Ftest%2Fcompile-fail%2Fbad-module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e4c8173e182d6254c7faafb3d1e1020eac194c8/src%2Ftest%2Fcompile-fail%2Fbad-module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-module.rs?ref=1e4c8173e182d6254c7faafb3d1e1020eac194c8", "patch": "@@ -8,6 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern: failed to resolve. Use of undeclared type or module `thing`\n+fn main() {\n+    let foo = thing::len(Vec::new());\n+    //~^ ERROR failed to resolve. Use of undeclared type or module `thing`\n \n-fn main() { let foo = thing::len(Vec::new()); }\n+    let foo = foo::bar::baz();\n+    //~^ ERROR failed to resolve. Use of undeclared type or module `foo`\n+}"}]}