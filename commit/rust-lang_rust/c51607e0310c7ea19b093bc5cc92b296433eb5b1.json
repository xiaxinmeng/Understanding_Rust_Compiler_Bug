{"sha": "c51607e0310c7ea19b093bc5cc92b296433eb5b1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1MTYwN2UwMzEwYzdlYTE5YjA5M2JjNWNjOTJiMjk2NDMzZWI1YjE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-27T00:31:20Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-27T00:31:20Z"}, "message": "Auto merge of #87062 - poliorcetics:fix-85462, r=dtolnay\n\nMake StrSearcher behave correctly on empty needle\n\nFix #85462.\n\nThis will not affect ABI since the other variant of the enum is bigger.\nIt may break some code, but that would be very strange: usually people\ndon't continue after the first `Done` (or `None` for a normal iterator).\n\n`@rustbot` label T-libs A-str A-patterns", "tree": {"sha": "7b9819dc773e96e50ccfef7a01ae540053edc777", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b9819dc773e96e50ccfef7a01ae540053edc777"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c51607e0310c7ea19b093bc5cc92b296433eb5b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c51607e0310c7ea19b093bc5cc92b296433eb5b1", "html_url": "https://github.com/rust-lang/rust/commit/c51607e0310c7ea19b093bc5cc92b296433eb5b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c51607e0310c7ea19b093bc5cc92b296433eb5b1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8bebfe5cc2db1603be0d4ad79ad17d48e3b20e54", "url": "https://api.github.com/repos/rust-lang/rust/commits/8bebfe5cc2db1603be0d4ad79ad17d48e3b20e54", "html_url": "https://github.com/rust-lang/rust/commit/8bebfe5cc2db1603be0d4ad79ad17d48e3b20e54"}, {"sha": "cd04731d3a6d86f4f9bfb2ff8fa6bf0179a379f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd04731d3a6d86f4f9bfb2ff8fa6bf0179a379f8", "html_url": "https://github.com/rust-lang/rust/commit/cd04731d3a6d86f4f9bfb2ff8fa6bf0179a379f8"}], "stats": {"total": 60, "additions": 58, "deletions": 2}, "files": [{"sha": "d3a87c056cfb1867b588ad58fd33892a23de3587", "filename": "library/alloc/tests/str.rs", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/c51607e0310c7ea19b093bc5cc92b296433eb5b1/library%2Falloc%2Ftests%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c51607e0310c7ea19b093bc5cc92b296433eb5b1/library%2Falloc%2Ftests%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fstr.rs?ref=c51607e0310c7ea19b093bc5cc92b296433eb5b1", "patch": "@@ -1873,6 +1873,47 @@ mod pattern {\n         \"* \\t\",\n         [Reject(0, 1), Reject(1, 2), Reject(2, 3),]\n     );\n+\n+    // See #85462\n+    #[test]\n+    fn str_searcher_empty_needle_after_done() {\n+        // Empty needle and haystack\n+        {\n+            let mut searcher = \"\".into_searcher(\"\");\n+\n+            assert_eq!(searcher.next(), SearchStep::Match(0, 0));\n+            assert_eq!(searcher.next(), SearchStep::Done);\n+            assert_eq!(searcher.next(), SearchStep::Done);\n+            assert_eq!(searcher.next(), SearchStep::Done);\n+\n+            let mut searcher = \"\".into_searcher(\"\");\n+\n+            assert_eq!(searcher.next_back(), SearchStep::Match(0, 0));\n+            assert_eq!(searcher.next_back(), SearchStep::Done);\n+            assert_eq!(searcher.next_back(), SearchStep::Done);\n+            assert_eq!(searcher.next_back(), SearchStep::Done);\n+        }\n+        // Empty needle and non-empty haystack\n+        {\n+            let mut searcher = \"\".into_searcher(\"a\");\n+\n+            assert_eq!(searcher.next(), SearchStep::Match(0, 0));\n+            assert_eq!(searcher.next(), SearchStep::Reject(0, 1));\n+            assert_eq!(searcher.next(), SearchStep::Match(1, 1));\n+            assert_eq!(searcher.next(), SearchStep::Done);\n+            assert_eq!(searcher.next(), SearchStep::Done);\n+            assert_eq!(searcher.next(), SearchStep::Done);\n+\n+            let mut searcher = \"\".into_searcher(\"a\");\n+\n+            assert_eq!(searcher.next_back(), SearchStep::Match(1, 1));\n+            assert_eq!(searcher.next_back(), SearchStep::Reject(0, 1));\n+            assert_eq!(searcher.next_back(), SearchStep::Match(0, 0));\n+            assert_eq!(searcher.next_back(), SearchStep::Done);\n+            assert_eq!(searcher.next_back(), SearchStep::Done);\n+            assert_eq!(searcher.next_back(), SearchStep::Done);\n+        }\n+    }\n }\n \n macro_rules! generate_iterator_test {"}, {"sha": "55ac1aa765c1fabc0cdf6166a1d9dfabfb9c032e", "filename": "library/core/src/str/pattern.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c51607e0310c7ea19b093bc5cc92b296433eb5b1/library%2Fcore%2Fsrc%2Fstr%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c51607e0310c7ea19b093bc5cc92b296433eb5b1/library%2Fcore%2Fsrc%2Fstr%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fpattern.rs?ref=c51607e0310c7ea19b093bc5cc92b296433eb5b1", "patch": "@@ -928,6 +928,8 @@ struct EmptyNeedle {\n     end: usize,\n     is_match_fw: bool,\n     is_match_bw: bool,\n+    // Needed in case of an empty haystack, see #85462\n+    is_finished: bool,\n }\n \n impl<'a, 'b> StrSearcher<'a, 'b> {\n@@ -941,6 +943,7 @@ impl<'a, 'b> StrSearcher<'a, 'b> {\n                     end: haystack.len(),\n                     is_match_fw: true,\n                     is_match_bw: true,\n+                    is_finished: false,\n                 }),\n             }\n         } else {\n@@ -966,13 +969,19 @@ unsafe impl<'a, 'b> Searcher<'a> for StrSearcher<'a, 'b> {\n     fn next(&mut self) -> SearchStep {\n         match self.searcher {\n             StrSearcherImpl::Empty(ref mut searcher) => {\n+                if searcher.is_finished {\n+                    return SearchStep::Done;\n+                }\n                 // empty needle rejects every char and matches every empty string between them\n                 let is_match = searcher.is_match_fw;\n                 searcher.is_match_fw = !searcher.is_match_fw;\n                 let pos = searcher.position;\n                 match self.haystack[pos..].chars().next() {\n                     _ if is_match => SearchStep::Match(pos, pos),\n-                    None => SearchStep::Done,\n+                    None => {\n+                        searcher.is_finished = true;\n+                        SearchStep::Done\n+                    }\n                     Some(ch) => {\n                         searcher.position += ch.len_utf8();\n                         SearchStep::Reject(pos, searcher.position)\n@@ -1045,12 +1054,18 @@ unsafe impl<'a, 'b> ReverseSearcher<'a> for StrSearcher<'a, 'b> {\n     fn next_back(&mut self) -> SearchStep {\n         match self.searcher {\n             StrSearcherImpl::Empty(ref mut searcher) => {\n+                if searcher.is_finished {\n+                    return SearchStep::Done;\n+                }\n                 let is_match = searcher.is_match_bw;\n                 searcher.is_match_bw = !searcher.is_match_bw;\n                 let end = searcher.end;\n                 match self.haystack[..end].chars().next_back() {\n                     _ if is_match => SearchStep::Match(end, end),\n-                    None => SearchStep::Done,\n+                    None => {\n+                        searcher.is_finished = true;\n+                        SearchStep::Done\n+                    }\n                     Some(ch) => {\n                         searcher.end -= ch.len_utf8();\n                         SearchStep::Reject(searcher.end, end)"}]}