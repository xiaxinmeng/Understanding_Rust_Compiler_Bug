{"sha": "9e9c4be48a2efdc1e209dbb531cabb9e81840516", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllOWM0YmU0OGEyZWZkYzFlMjA5ZGJiNTMxY2FiYjllODE4NDA1MTY=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-12-24T20:46:07Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-12-26T15:23:40Z"}, "message": "Hide completions for private struct fields", "tree": {"sha": "055a98acb14d87d362fc76ff6d9465327edd0d28", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/055a98acb14d87d362fc76ff6d9465327edd0d28"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e9c4be48a2efdc1e209dbb531cabb9e81840516", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e9c4be48a2efdc1e209dbb531cabb9e81840516", "html_url": "https://github.com/rust-lang/rust/commit/9e9c4be48a2efdc1e209dbb531cabb9e81840516", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e9c4be48a2efdc1e209dbb531cabb9e81840516/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca15cf422cb83c9657ab1db8a8165f486e4b7cde", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca15cf422cb83c9657ab1db8a8165f486e4b7cde", "html_url": "https://github.com/rust-lang/rust/commit/ca15cf422cb83c9657ab1db8a8165f486e4b7cde"}], "stats": {"total": 57, "additions": 56, "deletions": 1}, "files": [{"sha": "13546c143b301b08cc3fe1ac9d86ec6ba29ac207", "filename": "crates/ra_ide/src/completion/complete_dot.rs", "status": "modified", "additions": 56, "deletions": 1, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/9e9c4be48a2efdc1e209dbb531cabb9e81840516/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_dot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e9c4be48a2efdc1e209dbb531cabb9e81840516/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_dot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_dot.rs?ref=9e9c4be48a2efdc1e209dbb531cabb9e81840516", "patch": "@@ -1,6 +1,6 @@\n //! FIXME: write short doc here\n \n-use hir::Type;\n+use hir::{HasVisibility, Type};\n \n use crate::completion::completion_item::CompletionKind;\n use crate::{\n@@ -38,9 +38,15 @@ pub(super) fn complete_dot(acc: &mut Completions, ctx: &CompletionContext) {\n fn complete_fields(acc: &mut Completions, ctx: &CompletionContext, receiver: &Type) {\n     for receiver in receiver.autoderef(ctx.db) {\n         for (field, ty) in receiver.fields(ctx.db) {\n+            if ctx.module.map_or(false, |m| !field.visible_from(ctx.db, m)) {\n+                // Skip private field. FIXME: If the definition location of the\n+                // field is editable, we should show the completion\n+                continue;\n+            }\n             acc.add_field(ctx, field, &ty);\n         }\n         for (i, ty) in receiver.tuple_fields(ctx.db).into_iter().enumerate() {\n+            // FIXME: Handle visibility\n             acc.add_tuple_field(ctx, i, &ty);\n         }\n     }\n@@ -186,6 +192,55 @@ mod tests {\n         );\n     }\n \n+    #[test]\n+    fn test_struct_field_visibility_private() {\n+        assert_debug_snapshot!(\n+            do_ref_completion(\n+                r\"\n+            mod inner {\n+                struct A {\n+                    private_field: u32,\n+                    pub pub_field: u32,\n+                    pub(crate) crate_field: u32,\n+                    pub(super) super_field: u32,\n+                }\n+            }\n+            fn foo(a: inner::A) {\n+               a.<|>\n+            }\n+            \",\n+            ),\n+            @r###\"\n+        [\n+            CompletionItem {\n+                label: \"crate_field\",\n+                source_range: [313; 313),\n+                delete: [313; 313),\n+                insert: \"crate_field\",\n+                kind: Field,\n+                detail: \"u32\",\n+            },\n+            CompletionItem {\n+                label: \"pub_field\",\n+                source_range: [313; 313),\n+                delete: [313; 313),\n+                insert: \"pub_field\",\n+                kind: Field,\n+                detail: \"u32\",\n+            },\n+            CompletionItem {\n+                label: \"super_field\",\n+                source_range: [313; 313),\n+                delete: [313; 313),\n+                insert: \"super_field\",\n+                kind: Field,\n+                detail: \"u32\",\n+            },\n+        ]\n+        \"###\n+        );\n+    }\n+\n     #[test]\n     fn test_method_completion() {\n         assert_debug_snapshot!("}]}