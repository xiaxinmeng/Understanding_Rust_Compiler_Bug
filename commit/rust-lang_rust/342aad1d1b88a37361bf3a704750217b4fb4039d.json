{"sha": "342aad1d1b88a37361bf3a704750217b4fb4039d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0MmFhZDFkMWI4OGEzNzM2MWJmM2E3MDQ3NTAyMTdiNGZiNDAzOWQ=", "commit": {"author": {"name": "Tom Karpiniec", "email": "tom@ditto.live", "date": "2020-05-07T02:26:18Z"}, "committer": {"name": "Tom Karpiniec", "email": "tom@ditto.live", "date": "2020-05-07T05:35:48Z"}, "message": "Force embed-bitcode on non-simulator iOS/tvOS targets\n\nAt this time Apple recommends Bitcode be included for iOS apps, and\nrequires it for tvOS. It is unlikely that a developer would want to\ndisable bitcode when building for these targets, yet by default it will\nnot be generated. This presents a papercut for developers on those\nplatforms.\n\nIntroduces a new TargetOption boolean key for specific triples to\nindicate that bitcode should be generated, even if cargo attempts to\noptimise with -Cembed-bitcode=no.", "tree": {"sha": "4d8d971335a23bc9956095d223fed99053c66718", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d8d971335a23bc9956095d223fed99053c66718"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/342aad1d1b88a37361bf3a704750217b4fb4039d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/342aad1d1b88a37361bf3a704750217b4fb4039d", "html_url": "https://github.com/rust-lang/rust/commit/342aad1d1b88a37361bf3a704750217b4fb4039d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/342aad1d1b88a37361bf3a704750217b4fb4039d/comments", "author": {"login": "thombles", "id": 5511175, "node_id": "MDQ6VXNlcjU1MTExNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/5511175?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thombles", "html_url": "https://github.com/thombles", "followers_url": "https://api.github.com/users/thombles/followers", "following_url": "https://api.github.com/users/thombles/following{/other_user}", "gists_url": "https://api.github.com/users/thombles/gists{/gist_id}", "starred_url": "https://api.github.com/users/thombles/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thombles/subscriptions", "organizations_url": "https://api.github.com/users/thombles/orgs", "repos_url": "https://api.github.com/users/thombles/repos", "events_url": "https://api.github.com/users/thombles/events{/privacy}", "received_events_url": "https://api.github.com/users/thombles/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thombles", "id": 5511175, "node_id": "MDQ6VXNlcjU1MTExNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/5511175?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thombles", "html_url": "https://github.com/thombles", "followers_url": "https://api.github.com/users/thombles/followers", "following_url": "https://api.github.com/users/thombles/following{/other_user}", "gists_url": "https://api.github.com/users/thombles/gists{/gist_id}", "starred_url": "https://api.github.com/users/thombles/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thombles/subscriptions", "organizations_url": "https://api.github.com/users/thombles/orgs", "repos_url": "https://api.github.com/users/thombles/repos", "events_url": "https://api.github.com/users/thombles/events{/privacy}", "received_events_url": "https://api.github.com/users/thombles/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43271a39adc26d29350d4830b594c6435472815e", "url": "https://api.github.com/repos/rust-lang/rust/commits/43271a39adc26d29350d4830b594c6435472815e", "html_url": "https://github.com/rust-lang/rust/commit/43271a39adc26d29350d4830b594c6435472815e"}], "stats": {"total": 9, "additions": 9, "deletions": 0}, "files": [{"sha": "72c4539e82908d69e3c1dff6b33b2a3fd70cc58a", "filename": "src/librustc_codegen_ssa/back/write.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/342aad1d1b88a37361bf3a704750217b4fb4039d/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/342aad1d1b88a37361bf3a704750217b4fb4039d/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs?ref=342aad1d1b88a37361bf3a704750217b4fb4039d", "patch": "@@ -147,6 +147,8 @@ impl ModuleConfig {\n             || sess.opts.cg.linker_plugin_lto.enabled()\n         {\n             EmitObj::Bitcode\n+        } else if sess.target.target.options.forces_embed_bitcode {\n+            EmitObj::ObjectCode(BitcodeSection::Full)\n         } else if need_crate_bitcode_for_rlib(sess) {\n             let force_full = need_crate_bitcode_for_rlib(sess);\n             match sess.opts.optimize {"}, {"sha": "3ecedd769fae4f89badc72022714b2c7ec935f6c", "filename": "src/librustc_target/spec/aarch64_apple_ios.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/342aad1d1b88a37361bf3a704750217b4fb4039d/src%2Flibrustc_target%2Fspec%2Faarch64_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/342aad1d1b88a37361bf3a704750217b4fb4039d/src%2Flibrustc_target%2Fspec%2Faarch64_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Faarch64_apple_ios.rs?ref=342aad1d1b88a37361bf3a704750217b4fb4039d", "patch": "@@ -19,6 +19,7 @@ pub fn target() -> TargetResult {\n             eliminate_frame_pointer: false,\n             max_atomic_width: Some(128),\n             abi_blacklist: super::arm_base::abi_blacklist(),\n+            forces_embed_bitcode: true,\n             ..base\n         },\n     })"}, {"sha": "f1cd14ffd11a6a7ea89b8f726335636f06cd50a7", "filename": "src/librustc_target/spec/aarch64_apple_tvos.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/342aad1d1b88a37361bf3a704750217b4fb4039d/src%2Flibrustc_target%2Fspec%2Faarch64_apple_tvos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/342aad1d1b88a37361bf3a704750217b4fb4039d/src%2Flibrustc_target%2Fspec%2Faarch64_apple_tvos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Faarch64_apple_tvos.rs?ref=342aad1d1b88a37361bf3a704750217b4fb4039d", "patch": "@@ -19,6 +19,7 @@ pub fn target() -> TargetResult {\n             eliminate_frame_pointer: false,\n             max_atomic_width: Some(128),\n             abi_blacklist: super::arm_base::abi_blacklist(),\n+            forces_embed_bitcode: true,\n             ..base\n         },\n     })"}, {"sha": "8b319a0e38113f83c34c45a816f6a0e199a47414", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/342aad1d1b88a37361bf3a704750217b4fb4039d/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/342aad1d1b88a37361bf3a704750217b4fb4039d/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=342aad1d1b88a37361bf3a704750217b4fb4039d", "patch": "@@ -783,6 +783,8 @@ pub struct TargetOptions {\n     // If we give emcc .o files that are actually .bc files it\n     // will 'just work'.\n     pub obj_is_bitcode: bool,\n+    /// Whether the target requires that emitted object code includes bitcode.\n+    pub forces_embed_bitcode: bool,\n \n     /// Don't use this field; instead use the `.min_atomic_width()` method.\n     pub min_atomic_width: Option<u64>,\n@@ -939,6 +941,7 @@ impl Default for TargetOptions {\n             allow_asm: true,\n             has_elf_tls: false,\n             obj_is_bitcode: false,\n+            forces_embed_bitcode: false,\n             min_atomic_width: None,\n             max_atomic_width: None,\n             atomic_cas: true,\n@@ -1278,6 +1281,7 @@ impl Target {\n         key!(main_needs_argc_argv, bool);\n         key!(has_elf_tls, bool);\n         key!(obj_is_bitcode, bool);\n+        key!(forces_embed_bitcode, bool);\n         key!(max_atomic_width, Option<u64>);\n         key!(min_atomic_width, Option<u64>);\n         key!(atomic_cas, bool);\n@@ -1505,6 +1509,7 @@ impl ToJson for Target {\n         target_option_val!(main_needs_argc_argv);\n         target_option_val!(has_elf_tls);\n         target_option_val!(obj_is_bitcode);\n+        target_option_val!(forces_embed_bitcode);\n         target_option_val!(min_atomic_width);\n         target_option_val!(max_atomic_width);\n         target_option_val!(atomic_cas);"}]}