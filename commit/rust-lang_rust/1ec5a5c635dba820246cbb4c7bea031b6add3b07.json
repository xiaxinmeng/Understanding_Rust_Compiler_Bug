{"sha": "1ec5a5c635dba820246cbb4c7bea031b6add3b07", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlYzVhNWM2MzVkYmE4MjAyNDZjYmI0YzdiZWEwMzFiNmFkZDNiMDc=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-06-19T00:42:09Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-06-19T00:42:30Z"}, "message": "Add 'do' expressions", "tree": {"sha": "532bcd395a250706f08436d6b83e7fdba4a5c23c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/532bcd395a250706f08436d6b83e7fdba4a5c23c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ec5a5c635dba820246cbb4c7bea031b6add3b07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ec5a5c635dba820246cbb4c7bea031b6add3b07", "html_url": "https://github.com/rust-lang/rust/commit/1ec5a5c635dba820246cbb4c7bea031b6add3b07", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ec5a5c635dba820246cbb4c7bea031b6add3b07/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee9e5b9d201d876c07b00663e2df224eb170a0f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee9e5b9d201d876c07b00663e2df224eb170a0f2", "html_url": "https://github.com/rust-lang/rust/commit/ee9e5b9d201d876c07b00663e2df224eb170a0f2"}], "stats": {"total": 99, "additions": 91, "deletions": 8}, "files": [{"sha": "a356e716a9a9f2286559aa75f1952ad9d9d147f2", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ec5a5c635dba820246cbb4c7bea031b6add3b07/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ec5a5c635dba820246cbb4c7bea031b6add3b07/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=1ec5a5c635dba820246cbb4c7bea031b6add3b07", "patch": "@@ -318,6 +318,8 @@ enum expr_ {\n     // easily type this (a function returning nil on the inside but bool on\n     // the outside).\n     expr_loop_body(@expr),\n+    // Like expr_loop_body but for 'do' blocks\n+    expr_do_body(@expr),\n     expr_block(blk),\n \n     /*"}, {"sha": "7ddbfb52e945ba3018bc892509699f922acbe1fc", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1ec5a5c635dba820246cbb4c7bea031b6add3b07/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ec5a5c635dba820246cbb4c7bea031b6add3b07/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=1ec5a5c635dba820246cbb4c7bea031b6add3b07", "patch": "@@ -415,6 +415,7 @@ fn noop_fold_expr(e: expr_, fld: ast_fold) -> expr_ {\n           }\n           expr_unary(binop, ohs) { expr_unary(binop, fld.fold_expr(ohs)) }\n           expr_loop_body(f) { expr_loop_body(fld.fold_expr(f)) }\n+          expr_do_body(f) { expr_do_body(fld.fold_expr(f)) }\n           expr_lit(_) { copy e }\n           expr_cast(expr, ty) { expr_cast(fld.fold_expr(expr), ty) }\n           expr_addr_of(m, ohs) { expr_addr_of(m, fld.fold_expr(ohs)) }"}, {"sha": "45badde00169c3cc008aa7e90d03487bd45cf084", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1ec5a5c635dba820246cbb4c7bea031b6add3b07/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ec5a5c635dba820246cbb4c7bea031b6add3b07/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=1ec5a5c635dba820246cbb4c7bea031b6add3b07", "patch": "@@ -772,6 +772,8 @@ class parser {\n             ret pexpr(self.parse_if_expr());\n         } else if self.eat_keyword(\"for\") {\n             ret pexpr(self.parse_for_expr());\n+        } else if self.eat_keyword(\"do\") {\n+            ret pexpr(self.parse_do_expr());\n         } else if self.eat_keyword(\"while\") {\n             ret pexpr(self.parse_while_expr());\n         } else if self.eat_keyword(\"loop\") {\n@@ -1312,6 +1314,23 @@ class parser {\n         }\n     }\n \n+    fn parse_do_expr() -> @expr {\n+        let lo = self.last_span;\n+        let call = self.parse_expr_res(RESTRICT_STMT_EXPR);\n+        alt call.node {\n+          expr_call(f, args, true) {\n+            let b_arg = vec::last(args);\n+            let last = self.mk_expr(b_arg.span.lo, b_arg.span.hi,\n+                                    expr_do_body(b_arg));\n+            @{node: expr_call(f, vec::init(args) + [last], true)\n+              with *call}\n+          }\n+          _ {\n+            self.span_fatal(lo, \"`do` must be followed by a block call\");\n+          }\n+        }\n+    }\n+\n     fn parse_while_expr() -> @expr {\n         let lo = self.last_span.lo;\n         let cond = self.parse_expr();"}, {"sha": "ec14778dc02de04034937eb418a8f4c9f7c7c911", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ec5a5c635dba820246cbb4c7bea031b6add3b07/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ec5a5c635dba820246cbb4c7bea031b6add3b07/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=1ec5a5c635dba820246cbb4c7bea031b6add3b07", "patch": "@@ -287,7 +287,7 @@ fn restricted_keyword_table() -> hashmap<str, ()> {\n         \"assert\",\n         \"be\", \"break\",\n         \"check\", \"claim\", \"class\", \"const\", \"cont\", \"copy\", \"crust\",\n-        \"drop\",\n+        \"do\", \"drop\",\n         \"else\", \"enum\", \"export\",\n         \"fail\", \"false\", \"fn\", \"for\",\n         \"if\", \"iface\", \"impl\", \"import\","}, {"sha": "e0e30dc72fcc6dd940ef4a674f62e8b026394154", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1ec5a5c635dba820246cbb4c7bea031b6add3b07/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ec5a5c635dba820246cbb4c7bea031b6add3b07/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=1ec5a5c635dba820246cbb4c7bea031b6add3b07", "patch": "@@ -1048,6 +1048,9 @@ fn print_expr(s: ps, &&expr: @ast::expr) {\n       ast::expr_loop_body(body) {\n         print_expr(s, body);\n       }\n+      ast::expr_do_body(body) {\n+        print_expr(s, body);\n+      }\n       ast::expr_block(blk) {\n         // containing cbox, will be closed by print-block at }\n         cbox(s, indent_unit);"}, {"sha": "4a68850674d7b1c71b6ceac7eb38bd1138c71faf", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1ec5a5c635dba820246cbb4c7bea031b6add3b07/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ec5a5c635dba820246cbb4c7bea031b6add3b07/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=1ec5a5c635dba820246cbb4c7bea031b6add3b07", "patch": "@@ -382,7 +382,8 @@ fn visit_expr<E>(ex: @expr, e: E, v: vt<E>) {\n         for args.each {|eo| visit_expr_opt(eo, e, v); }\n       }\n       expr_binary(_, a, b) { v.visit_expr(a, e, v); v.visit_expr(b, e, v); }\n-      expr_addr_of(_, x) | expr_unary(_, x) | expr_loop_body(x) |\n+      expr_addr_of(_, x) | expr_unary(_, x) |\n+      expr_loop_body(x) | expr_do_body(x) |\n       expr_check(_, x) | expr_assert(x) {\n         v.visit_expr(x, e, v);\n       }"}, {"sha": "b8ec0f9c2f1f0980395d607a7fcd162774cfc70e", "filename": "src/rustc/middle/borrowck/categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ec5a5c635dba820246cbb4c7bea031b6add3b07/src%2Frustc%2Fmiddle%2Fborrowck%2Fcategorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ec5a5c635dba820246cbb4c7bea031b6add3b07/src%2Frustc%2Fmiddle%2Fborrowck%2Fcategorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fborrowck%2Fcategorization.rs?ref=1ec5a5c635dba820246cbb4c7bea031b6add3b07", "patch": "@@ -174,7 +174,7 @@ impl public_methods for borrowck_ctxt {\n           ast::expr_swap(*) | ast::expr_move(*) | ast::expr_assign(*) |\n           ast::expr_assign_op(*) | ast::expr_fn(*) | ast::expr_fn_block(*) |\n           ast::expr_assert(*) | ast::expr_check(*) | ast::expr_ret(*) |\n-          ast::expr_loop_body(*) | ast::expr_unary(*) |\n+          ast::expr_loop_body(*) | ast::expr_do_body(*) | ast::expr_unary(*) |\n           ast::expr_copy(*) | ast::expr_cast(*) | ast::expr_fail(*) |\n           ast::expr_vstore(*) | ast::expr_vec(*) | ast::expr_tup(*) |\n           ast::expr_if_check(*) | ast::expr_if(*) | ast::expr_log(*) |"}, {"sha": "981ec4d63e359e96ca0d52c8668243245c26c569", "filename": "src/rustc/middle/liveness.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1ec5a5c635dba820246cbb4c7bea031b6add3b07/src%2Frustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ec5a5c635dba820246cbb4c7bea031b6add3b07/src%2Frustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fliveness.rs?ref=1ec5a5c635dba820246cbb4c7bea031b6add3b07", "patch": "@@ -412,7 +412,8 @@ fn visit_expr(expr: @expr, &&self: @ir_maps, vt: vt<@ir_maps>) {\n       expr_vec(*) | expr_rec(*) | expr_call(*) | expr_tup(*) |\n       expr_bind(*) | expr_new(*) | expr_log(*) | expr_binary(*) |\n       expr_assert(*) | expr_check(*) | expr_addr_of(*) | expr_copy(*) |\n-      expr_loop_body(*) | expr_cast(*) | expr_unary(*) | expr_fail(*) |\n+      expr_loop_body(*) | expr_do_body(*) | expr_cast(*) |\n+      expr_unary(*) | expr_fail(*) |\n       expr_break | expr_cont | expr_lit(_) | expr_ret(*) |\n       expr_block(*) | expr_move(*) | expr_assign(*) | expr_swap(*) |\n       expr_assign_op(*) | expr_mac(*) {\n@@ -1054,6 +1055,7 @@ class liveness {\n           expr_addr_of(_, e) |\n           expr_copy(e) |\n           expr_loop_body(e) |\n+          expr_do_body(e) |\n           expr_cast(e, _) |\n           expr_unary(_, e) {\n             self.propagate_through_expr(e, succ)\n@@ -1406,7 +1408,8 @@ fn check_expr(expr: @expr, &&self: @liveness, vt: vt<@liveness>) {\n       expr_vec(*) | expr_rec(*) | expr_tup(*) |\n       expr_bind(*) | expr_new(*) | expr_log(*) | expr_binary(*) |\n       expr_assert(*) | expr_check(*) | expr_copy(*) |\n-      expr_loop_body(*) | expr_cast(*) | expr_unary(*) | expr_fail(*) |\n+      expr_loop_body(*) | expr_do_body(*) |\n+      expr_cast(*) | expr_unary(*) | expr_fail(*) |\n       expr_ret(*) | expr_break | expr_cont | expr_lit(_) |\n       expr_block(*) | expr_swap(*) | expr_mac(*) | expr_addr_of(*) {\n         visit::visit_expr(expr, self, vt);"}, {"sha": "d6520b45d4a03f41bdad9d5be1c2a9af4f727d95", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1ec5a5c635dba820246cbb4c7bea031b6add3b07/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ec5a5c635dba820246cbb4c7bea031b6add3b07/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=1ec5a5c635dba820246cbb4c7bea031b6add3b07", "patch": "@@ -3622,6 +3622,9 @@ fn trans_expr(bcx: block, e: @ast::expr, dest: dest) -> block {\n           ast::expr_loop_body(blk) {\n             ret trans_loop_body(bcx, e, none, dest);\n           }\n+          ast::expr_do_body(blk) {\n+            ret trans_expr(bcx, blk, dest);\n+          }\n           ast::expr_bind(f, args) {\n             ret closure::trans_bind(\n                 bcx, f, args, e.id, dest);"}, {"sha": "e42028fbdf6c20c3a8d1651b93bb911af0995ed6", "filename": "src/rustc/middle/trans/type_use.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1ec5a5c635dba820246cbb4c7bea031b6add3b07/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ec5a5c635dba820246cbb4c7bea031b6add3b07/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=1ec5a5c635dba820246cbb4c7bea031b6add3b07", "patch": "@@ -223,7 +223,8 @@ fn mark_for_expr(cx: ctx, e: @expr) {\n       expr_while(_, _) | expr_fail(_) | expr_break | expr_cont |\n       expr_unary(_, _) | expr_lit(_) | expr_assert(_) | expr_check(_, _) |\n       expr_if_check(_, _, _) | expr_mac(_) | expr_addr_of(_, _) |\n-      expr_ret(_) | expr_loop(_) | expr_bind(_, _) | expr_loop_body(_) {}\n+      expr_ret(_) | expr_loop(_) | expr_bind(_, _) |\n+      expr_loop_body(_) | expr_do_body(_) {}\n     }\n }\n "}, {"sha": "110989a6a7933cf2e41208ac6d1616b6209691d2", "filename": "src/rustc/middle/tstate/pre_post_conditions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ec5a5c635dba820246cbb4c7bea031b6add3b07/src%2Frustc%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ec5a5c635dba820246cbb4c7bea031b6add3b07/src%2Frustc%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs?ref=1ec5a5c635dba820246cbb4c7bea031b6add3b07", "patch": "@@ -364,7 +364,7 @@ fn find_pre_post_expr(fcx: fn_ctxt, e: @expr) {\n         } else { find_pre_post_exprs(fcx, [l, r], e.id); }\n       }\n       expr_addr_of(_, x) | expr_cast(x, _) | expr_unary(_, x) |\n-      expr_loop_body(x) | expr_assert(x) | expr_copy(x) {\n+      expr_loop_body(x) | expr_do_body(x) | expr_assert(x) | expr_copy(x) {\n         find_pre_post_expr(fcx, x);\n         copy_pre_post(fcx.ccx, e.id, x);\n       }"}, {"sha": "dfc511122a659dfda88964fa9a81502bab3090b5", "filename": "src/rustc/middle/tstate/states.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1ec5a5c635dba820246cbb4c7bea031b6add3b07/src%2Frustc%2Fmiddle%2Ftstate%2Fstates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ec5a5c635dba820246cbb4c7bea031b6add3b07/src%2Frustc%2Fmiddle%2Ftstate%2Fstates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftstate%2Fstates.rs?ref=1ec5a5c635dba820246cbb4c7bea031b6add3b07", "patch": "@@ -486,7 +486,8 @@ fn find_pre_post_state_expr(fcx: fn_ctxt, pres: prestate, e: @expr) -> bool {\n         }\n         ret changed | set_poststate_ann(fcx.ccx, e.id, a_post);\n       }\n-      expr_field(x, _, _) | expr_loop_body(x) | expr_unary(_, x) |\n+      expr_field(x, _, _) | expr_loop_body(x) | expr_do_body(x) |\n+      expr_unary(_, x) |\n       expr_addr_of(_, x) | expr_assert(x) | expr_cast(x, _) |\n       expr_copy(x) {\n         ret find_pre_post_state_sub(fcx, pres, x, e.id, none);"}, {"sha": "0ca184e5916577ae1064ae0114771d75f8407037", "filename": "src/rustc/middle/typeck/check.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1ec5a5c635dba820246cbb4c7bea031b6add3b07/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ec5a5c635dba820246cbb4c7bea031b6add3b07/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs?ref=1ec5a5c635dba820246cbb4c7bea031b6add3b07", "patch": "@@ -1364,6 +1364,32 @@ fn check_expr_with_unifier(fcx: @fn_ctxt,\n           }\n         }\n       }\n+      ast::expr_do_body(b) {\n+        let expected_sty = unpack_expected(fcx, expected, {|x|some(x)}).get();\n+        let (inner_ty, proto) = alt expected_sty {\n+          ty::ty_fn(fty) {\n+            (ty::mk_fn(tcx, fty), fty.proto)\n+          }\n+          _ {\n+            tcx.sess.span_fatal(expr.span, \"a do function's last argument \\\n+                                            should be of function type\");\n+          }\n+        };\n+        alt check b.node {\n+          ast::expr_fn_block(decl, body, cap_clause) {\n+            check_expr_fn(fcx, b, proto, decl, body, true, some(inner_ty));\n+            demand::suptype(fcx, b.span, inner_ty, fcx.expr_ty(b));\n+            capture::check_capture_clause(tcx, b.id, cap_clause);\n+          }\n+        }\n+        let block_ty = structurally_resolved_type(\n+            fcx, expr.span, fcx.node_ty(b.id));\n+        alt check ty::get(block_ty).struct {\n+          ty::ty_fn(fty) {\n+            fcx.write_ty(expr.id, ty::mk_fn(tcx, fty));\n+          }\n+        }\n+      }\n       ast::expr_block(b) {\n         // If this is an unchecked block, turn off purity-checking\n         bot = check_block(fcx, b);"}, {"sha": "76a10c6d2f161db32e70eb31f72bba197485004f", "filename": "src/test/compile-fail/do1.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1ec5a5c635dba820246cbb4c7bea031b6add3b07/src%2Ftest%2Fcompile-fail%2Fdo1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ec5a5c635dba820246cbb4c7bea031b6add3b07/src%2Ftest%2Fcompile-fail%2Fdo1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdo1.rs?ref=1ec5a5c635dba820246cbb4c7bea031b6add3b07", "patch": "@@ -0,0 +1,3 @@\n+fn main() {\n+    let x = do y; //! ERROR: `do` must be followed by a block call\n+}"}, {"sha": "8950e69e0091aefed10da60c8ec2c070edc18492", "filename": "src/test/compile-fail/do2.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1ec5a5c635dba820246cbb4c7bea031b6add3b07/src%2Ftest%2Fcompile-fail%2Fdo2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ec5a5c635dba820246cbb4c7bea031b6add3b07/src%2Ftest%2Fcompile-fail%2Fdo2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdo2.rs?ref=1ec5a5c635dba820246cbb4c7bea031b6add3b07", "patch": "@@ -0,0 +1,5 @@\n+fn f(f: fn@(int) -> bool) -> bool { f(10) }\n+\n+fn main() {\n+    assert do f() { |i| i == 10 } == 10; //! ERROR: expected `bool` but found `int`\n+}"}, {"sha": "af173d62d6a316a3d0c58f7e9ed154be7b419c41", "filename": "src/test/run-pass/do1.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1ec5a5c635dba820246cbb4c7bea031b6add3b07/src%2Ftest%2Frun-pass%2Fdo1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ec5a5c635dba820246cbb4c7bea031b6add3b07/src%2Ftest%2Frun-pass%2Fdo1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdo1.rs?ref=1ec5a5c635dba820246cbb4c7bea031b6add3b07", "patch": "@@ -0,0 +1,5 @@\n+fn f(f: fn@(int)) { f(10) }\n+\n+fn main() {\n+    do f() { |i| assert i == 10 }\n+}"}, {"sha": "c8028f806dacea1bca7449f86a0708455751a76d", "filename": "src/test/run-pass/do2.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1ec5a5c635dba820246cbb4c7bea031b6add3b07/src%2Ftest%2Frun-pass%2Fdo2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ec5a5c635dba820246cbb4c7bea031b6add3b07/src%2Ftest%2Frun-pass%2Fdo2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdo2.rs?ref=1ec5a5c635dba820246cbb4c7bea031b6add3b07", "patch": "@@ -0,0 +1,5 @@\n+fn f(f: fn@(int) -> int) -> int { f(10) }\n+\n+fn main() {\n+    assert do f() { |i| i } == 10;\n+}"}, {"sha": "c4796eb20709bfcb60ec494334f17da981ec699d", "filename": "src/test/run-pass/do3.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1ec5a5c635dba820246cbb4c7bea031b6add3b07/src%2Ftest%2Frun-pass%2Fdo3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ec5a5c635dba820246cbb4c7bea031b6add3b07/src%2Ftest%2Frun-pass%2Fdo3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdo3.rs?ref=1ec5a5c635dba820246cbb4c7bea031b6add3b07", "patch": "@@ -0,0 +1,5 @@\n+fn f(f: fn@(int) -> int) -> int { f(10) }\n+\n+fn main() {\n+    assert do f { |i| i } == 10;\n+}"}]}