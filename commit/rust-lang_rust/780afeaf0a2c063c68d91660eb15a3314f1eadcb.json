{"sha": "780afeaf0a2c063c68d91660eb15a3314f1eadcb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4MGFmZWFmMGEyYzA2M2M2OGQ5MTY2MGViMTVhMzMxNGYxZWFkY2I=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-12-13T02:06:39Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-12-25T03:59:52Z"}, "message": "std: Update std::rt::thread to specify stack sizes\n\nIt's now possible to spawn an OS thread with a stack that has a specific size.", "tree": {"sha": "5e6e5aef0ce7f4acb44ae021ab1e399c6d3df7e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e6e5aef0ce7f4acb44ae021ab1e399c6d3df7e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/780afeaf0a2c063c68d91660eb15a3314f1eadcb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/780afeaf0a2c063c68d91660eb15a3314f1eadcb", "html_url": "https://github.com/rust-lang/rust/commit/780afeaf0a2c063c68d91660eb15a3314f1eadcb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/780afeaf0a2c063c68d91660eb15a3314f1eadcb/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7554f5c58f840b648bc3c5b2d24d0df6683eed03", "url": "https://api.github.com/repos/rust-lang/rust/commits/7554f5c58f840b648bc3c5b2d24d0df6683eed03", "html_url": "https://github.com/rust-lang/rust/commit/7554f5c58f840b648bc3c5b2d24d0df6683eed03"}], "stats": {"total": 24, "additions": 16, "deletions": 8}, "files": [{"sha": "11189282f683db4ada30efccd7b4a2b59d9ede6d", "filename": "src/libstd/rt/thread.rs", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/780afeaf0a2c063c68d91660eb15a3314f1eadcb/src%2Flibstd%2Frt%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/780afeaf0a2c063c68d91660eb15a3314f1eadcb/src%2Flibstd%2Frt%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fthread.rs?ref=780afeaf0a2c063c68d91660eb15a3314f1eadcb", "patch": "@@ -33,7 +33,7 @@ pub struct Thread<T> {\n     priv packet: ~Option<T>,\n }\n \n-static DEFAULT_STACK_SIZE: libc::size_t = 1024 * 1024;\n+static DEFAULT_STACK_SIZE: uint = 1024 * 1024;\n \n // This is the starting point of rust os threads. The first thing we do\n // is make sure that we don't trigger __morestack (also why this has a\n@@ -84,7 +84,7 @@ impl Thread<()> {\n             *cast::transmute::<&~Option<T>, **mut Option<T>>(&packet)\n         };\n         let main: proc() = proc() unsafe { *packet2 = Some(main()); };\n-        let native = unsafe { imp::create(~main) };\n+        let native = unsafe { imp::create(stack, ~main) };\n \n         Thread {\n             native: native,\n@@ -100,8 +100,14 @@ impl Thread<()> {\n     /// systems. Note that platforms may not keep the main program alive even if\n     /// there are detached thread still running around.\n     pub fn spawn(main: proc()) {\n+        Thread::spawn_stack(DEFAULT_STACK_SIZE, main)\n+    }\n+\n+    /// Performs the same functionality as `spawn`, but explicitly specifies a\n+    /// stack size for the new thread.\n+    pub fn spawn_stack(stack: uint, main: proc()) {\n         unsafe {\n-            let handle = imp::create(~main);\n+            let handle = imp::create(stack, ~main);\n             imp::detach(handle);\n         }\n     }\n@@ -145,13 +151,15 @@ mod imp {\n     use libc::types::os::arch::extra::{LPSECURITY_ATTRIBUTES, SIZE_T, BOOL,\n                                        LPVOID, DWORD, LPDWORD, HANDLE};\n     use ptr;\n+    use libc;\n+    use cast;\n \n     pub type rust_thread = HANDLE;\n     pub type rust_thread_return = DWORD;\n \n-    pub unsafe fn create(p: ~proc()) -> rust_thread {\n+    pub unsafe fn create(stack: uint, p: ~proc()) -> rust_thread {\n         let arg: *mut libc::c_void = cast::transmute(p);\n-        CreateThread(ptr::mut_null(), DEFAULT_STACK_SIZE, super::thread_start,\n+        CreateThread(ptr::mut_null(), stack as libc::size_t, super::thread_start,\n                      arg, 0, ptr::mut_null())\n     }\n \n@@ -189,17 +197,17 @@ mod imp {\n     use libc::consts::os::posix01::PTHREAD_CREATE_JOINABLE;\n     use libc;\n     use ptr;\n-    use super::DEFAULT_STACK_SIZE;\n     use unstable::intrinsics;\n \n     pub type rust_thread = libc::pthread_t;\n     pub type rust_thread_return = *libc::c_void;\n \n-    pub unsafe fn create(p: ~proc()) -> rust_thread {\n+    pub unsafe fn create(stack: uint, p: ~proc()) -> rust_thread {\n         let mut native: libc::pthread_t = intrinsics::uninit();\n         let mut attr: libc::pthread_attr_t = intrinsics::uninit();\n         assert_eq!(pthread_attr_init(&mut attr), 0);\n-        assert_eq!(pthread_attr_setstacksize(&mut attr, DEFAULT_STACK_SIZE), 0);\n+        assert_eq!(pthread_attr_setstacksize(&mut attr,\n+                                             stack as libc::size_t), 0);\n         assert_eq!(pthread_attr_setdetachstate(&mut attr,\n                                                PTHREAD_CREATE_JOINABLE), 0);\n "}]}