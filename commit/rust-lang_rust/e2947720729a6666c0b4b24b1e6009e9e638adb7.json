{"sha": "e2947720729a6666c0b4b24b1e6009e9e638adb7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyOTQ3NzIwNzI5YTY2NjZjMGI0YjI0YjFlNjAwOWU5ZTYzOGFkYjc=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2014-12-07T12:55:30Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2014-12-07T12:55:30Z"}, "message": "Add enum namespacing to the Guide.\n\nCloses #19556.", "tree": {"sha": "1c3d4c4d2ac1c7a52bd4ba6b29c4df96456e0eb6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c3d4c4d2ac1c7a52bd4ba6b29c4df96456e0eb6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e2947720729a6666c0b4b24b1e6009e9e638adb7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e2947720729a6666c0b4b24b1e6009e9e638adb7", "html_url": "https://github.com/rust-lang/rust/commit/e2947720729a6666c0b4b24b1e6009e9e638adb7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e2947720729a6666c0b4b24b1e6009e9e638adb7/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f7d18b92f80e52462a5c086bb47252817e6b1b3d", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7d18b92f80e52462a5c086bb47252817e6b1b3d", "html_url": "https://github.com/rust-lang/rust/commit/f7d18b92f80e52462a5c086bb47252817e6b1b3d"}], "stats": {"total": 49, "additions": 49, "deletions": 0}, "files": [{"sha": "5e042004823394a7872a7accf0e56e98bbf6de15", "filename": "src/doc/guide.md", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/e2947720729a6666c0b4b24b1e6009e9e638adb7/src%2Fdoc%2Fguide.md", "raw_url": "https://github.com/rust-lang/rust/raw/e2947720729a6666c0b4b24b1e6009e9e638adb7/src%2Fdoc%2Fguide.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide.md?ref=e2947720729a6666c0b4b24b1e6009e9e638adb7", "patch": "@@ -1160,6 +1160,55 @@ Where a `StringResult` is either an `StringOK`, with the result of a computation\n `ErrorReason` with a `String` explaining what caused the computation to fail. These kinds of\n `enum`s are actually very useful and are even part of the standard library.\n \n+Enum variants are namespaced under the enum names. For example, here is an example of using\n+our `StringResult`:\n+\n+```rust\n+# enum StringResult {\n+#     StringOK(String),\n+#     ErrorReason(String),\n+# }\n+fn respond(greeting: &str) -> StringResult {\n+    if greeting == \"Hello\" {\n+        StringResult::StringOK(\"Good morning!\".to_string())\n+    } else {\n+        StringResult::ErrorReason(\"I didn't understand you!\".to_string())\n+    }\n+}\n+```\n+\n+Notice that we need both the enum name and the variant name: `StringResult::StringOK`, but\n+we didn't need to with `Ordering`, we just said `Greater` rather than `Ordering::Greater`.\n+There's a reason: the Rust prelude imports the variants of `Ordering` as well as the enum\n+itself. We can use the `use` keyword to do something similar with `StringResult`:\n+\n+```rust\n+use StringResult::StringOK;\n+use StringResult::ErrorReason;\n+\n+enum StringResult {\n+    StringOK(String),\n+    ErrorReason(String),\n+}\n+\n+# fn main() {}\n+\n+fn respond(greeting: &str) -> StringResult {\n+    if greeting == \"Hello\" {\n+        StringOK(\"Good morning!\".to_string())\n+    } else {\n+        ErrorReason(\"I didn't understand you!\".to_string())\n+    }\n+}\n+```\n+\n+We'll learn more about `use` later, but it's used to bring names into scope. `use` declarations\n+must come before anything else, which looks a little strange in this example, since we `use`\n+the variants before we define them. Anyway, in the body of `respond`, we can just say `StringOK`\n+now, rather than the full `StringResult::StringOK`. Importing variants can be convenient, but can\n+also cause name conflicts, so do this with caution. It's considered good style to rarely import\n+variants for this reason.\n+\n As you can see `enum`s with values are quite a powerful tool for data representation,\n and can be even more useful when they're generic across types. But before we get to\n generics, let's talk about how to use them with pattern matching, a tool that will"}]}