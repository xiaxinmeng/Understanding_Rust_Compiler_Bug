{"sha": "cbdaf2ebc7d39588a5f6efee1cd9de0a273571a9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiZGFmMmViYzdkMzk1ODhhNWY2ZWZlZTFjZDlkZTBhMjczNTcxYTk=", "commit": {"author": {"name": "Jakub Bukaj", "email": "jakub@jakub.cc", "date": "2014-11-19T21:37:07Z"}, "committer": {"name": "Jakub Bukaj", "email": "jakub@jakub.cc", "date": "2014-11-19T21:37:07Z"}, "message": "rollup merge of #18903: steveklabnik/error_handling_guide\n\nNow that we've done `fail` -> `panic`, I feel bringing back the error handling guide is a good idea. We had one long ago, but it was removed when conditions were removed.\n\nThis doesn't cover the new FromError stuff, but I feel like it's already useful in this state, so I'm sending this PR now.", "tree": {"sha": "424afd8293a6472ca54bb48ff06251a47b0f09ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/424afd8293a6472ca54bb48ff06251a47b0f09ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cbdaf2ebc7d39588a5f6efee1cd9de0a273571a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cbdaf2ebc7d39588a5f6efee1cd9de0a273571a9", "html_url": "https://github.com/rust-lang/rust/commit/cbdaf2ebc7d39588a5f6efee1cd9de0a273571a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cbdaf2ebc7d39588a5f6efee1cd9de0a273571a9/comments", "author": null, "committer": null, "parents": [{"sha": "655eb44df3a7edd87d365f64cbfca061223c5232", "url": "https://api.github.com/repos/rust-lang/rust/commits/655eb44df3a7edd87d365f64cbfca061223c5232", "html_url": "https://github.com/rust-lang/rust/commit/655eb44df3a7edd87d365f64cbfca061223c5232"}, {"sha": "16b9f67bf3bed2313eb53a3d37e5d4def1d88838", "url": "https://api.github.com/repos/rust-lang/rust/commits/16b9f67bf3bed2313eb53a3d37e5d4def1d88838", "html_url": "https://github.com/rust-lang/rust/commit/16b9f67bf3bed2313eb53a3d37e5d4def1d88838"}], "stats": {"total": 278, "additions": 231, "deletions": 47}, "files": [{"sha": "35bba159208f83e6b9a59d17dff71b273c525be6", "filename": "configure", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cbdaf2ebc7d39588a5f6efee1cd9de0a273571a9/configure", "raw_url": "https://github.com/rust-lang/rust/raw/cbdaf2ebc7d39588a5f6efee1cd9de0a273571a9/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=cbdaf2ebc7d39588a5f6efee1cd9de0a273571a9", "patch": "@@ -1031,6 +1031,7 @@ do\n     make_dir $h/test/doc-guide-tasks\n     make_dir $h/test/doc-guide-plugin\n     make_dir $h/test/doc-guide-crates\n+    make_dir $h/test/doc-guide-error-handling\n     make_dir $h/test/doc-rust\n done\n "}, {"sha": "48eb9e81c20a4d8a751e830eedc1a73beb2de635", "filename": "mk/docs.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cbdaf2ebc7d39588a5f6efee1cd9de0a273571a9/mk%2Fdocs.mk", "raw_url": "https://github.com/rust-lang/rust/raw/cbdaf2ebc7d39588a5f6efee1cd9de0a273571a9/mk%2Fdocs.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fdocs.mk?ref=cbdaf2ebc7d39588a5f6efee1cd9de0a273571a9", "patch": "@@ -27,7 +27,7 @@\n ######################################################################\n DOCS := index intro tutorial guide guide-ffi guide-macros guide-lifetimes \\\n \tguide-tasks guide-container guide-pointers guide-testing \\\n-\tguide-plugin guide-crates complement-bugreport \\\n+\tguide-plugin guide-crates complement-bugreport guide-error-handling \\\n \tcomplement-lang-faq complement-design-faq complement-project-faq \\\n     rustdoc guide-unsafe guide-strings reference\n "}, {"sha": "427ca4ba1a1635888d48a82be236d9dc27d91e79", "filename": "src/doc/guide-error-handling.md", "status": "added", "additions": 227, "deletions": 0, "changes": 227, "blob_url": "https://github.com/rust-lang/rust/blob/cbdaf2ebc7d39588a5f6efee1cd9de0a273571a9/src%2Fdoc%2Fguide-error-handling.md", "raw_url": "https://github.com/rust-lang/rust/raw/cbdaf2ebc7d39588a5f6efee1cd9de0a273571a9/src%2Fdoc%2Fguide-error-handling.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-error-handling.md?ref=cbdaf2ebc7d39588a5f6efee1cd9de0a273571a9", "patch": "@@ -0,0 +1,227 @@\n+% Error Handling in Rust\n+\n+> The best-laid plans of mice and men\n+> Often go awry\n+> \n+> \"Tae a Moose\", Robert Burns\n+\n+Sometimes, things just go wrong. It's important to have a plan for when the\n+inevitable happens. Rust has rich support for handling errors that may (let's\n+be honest: will) occur in your programs.\n+\n+There are two main kinds of errors that can occur in your programs: failures,\n+and panics. Let's talk about the difference between the two, and then discuss\n+how to handle each. Then, we'll discuss upgrading failures to panics.\n+\n+# Failure vs. Panic\n+\n+Rust uses two terms to differentiate between two forms of error: failure, and\n+panic. A **failure** is an error that can be recovered from in some way. A\n+**panic** is an error that cannot be recovered from.\n+\n+What do we mean by 'recover'? Well, in most cases, the possibility of an error\n+is expected. For example, consider the `from_str` function:\n+\n+```{rust,ignore}\n+from_str(\"5\");\n+```\n+\n+This function takes a string argument and converts it into another type. But\n+because it's a string, you can't be sure that the conversion actually works.\n+For example, what should this convert to?\n+\n+```{rust,ignore}\n+from_str(\"hello5world\");\n+```\n+\n+This won't work. So we know that this function will only work properly for some\n+inputs. It's expected behavior. We call this kind of error 'failure.'\n+\n+On the other hand, sometimes, there are errors that are unexpected, or which\n+we cannot recover from. A classic example is an `assert!`:\n+\n+```{rust,ignore}\n+assert!(x == 5);\n+```\n+\n+We use `assert!` to declare that something is true. If it's not true, something\n+is very wrong. Wrong enough that we can't continue with things in the current\n+state. Another example is using the `unreachable!()` macro\n+\n+```{rust,ignore}\n+enum Event {\n+    NewRelease,\n+}\n+\n+fn probability(_: &Event) -> f64 {\n+    // real implementation would be more complex, of course\n+    0.95\n+}\n+\n+fn descriptive_probability(event: Event) -> &'static str {\n+    match probability(&event) {\n+        1.00          => \"certain\",\n+        0.00          => \"impossible\",\n+        0.00 ... 0.25 => \"very unlikely\",\n+        0.25 ... 0.50 => \"unlikely\",\n+        0.50 ... 0.75 => \"likely\",\n+        0.75 ... 1.00  => \"very likely\",\n+    }\n+}\n+\n+fn main() {\n+    std::io::println(descriptive_probability(NewRelease));\n+}\n+```\n+\n+This will give us an error:\n+\n+```{notrust,ignore}\n+error: non-exhaustive patterns: `_` not covered [E0004]\n+```\n+\n+While we know that we've covered all possible cases, Rust can't tell. It\n+doesn't know that probability is between 0.0 and 1.0. So we add another case:\n+\n+```rust\n+enum Event {\n+    NewRelease,\n+}\n+\n+fn probability(_: &Event) -> f64 {\n+    // real implementation would be more complex, of course\n+    0.95\n+}\n+\n+fn descriptive_probability(event: Event) -> &'static str {\n+    match probability(&event) {\n+        1.00          => \"certain\",\n+        0.00          => \"impossible\",\n+        0.00 ... 0.25 => \"very unlikely\",\n+        0.25 ... 0.50 => \"unlikely\",\n+        0.50 ... 0.75 => \"likely\",\n+        0.75 ... 1.00  => \"very likely\",\n+        _ => unreachable!()\n+    }\n+}\n+\n+fn main() {\n+    std::io::println(descriptive_probability(NewRelease));\n+}\n+```\n+\n+We shouldn't ever hit the `_` case, so we use the `unreachable!()` macro to\n+indicate this. `unreachable!()` gives a different kind of error than `Result`.\n+Rust calls these sorts of errors 'panics.'\n+\n+# Handling errors with `Option` and `Result`\n+\n+The simplest way to indicate that a function may fail is to use the `Option<T>`\n+type. Remember our `from_str()` example? Here's its type signature:\n+\n+```{rust,ignore}\n+pub fn from_str<A: FromStr>(s: &str) -> Option<A>\n+```\n+\n+`from_str()` returns an `Option<A>`. If the conversion succeeds, it will return\n+`Some(value)`, and if it fails, it will return `None`.\n+\n+This is appropriate for the simplest of cases, but doesn't give us a lot of\n+information in the failure case. What if we wanted to know _why_ the conversion\n+failed? For this, we can use the `Result<T, E>` type. It looks like this:\n+\n+```rust\n+enum Result<T, E> {\n+   Ok(T),\n+   Err(E)\n+}\n+```\n+\n+This enum is provided by Rust itself, so you don't need to define it to use it\n+in your code. The `Ok(T)` variant represents a success, and the `Err(E)` variant\n+represents a failure. Returning a `Result` instead of an `Option` is recommended\n+for all but the most trivial of situations.\n+\n+Here's an example of using `Result`:\n+\n+```rust\n+#[deriving(Show)]\n+enum Version { Version1, Version2 }\n+\n+#[deriving(Show)]\n+enum ParseError { InvalidHeaderLength, InvalidVersion }\n+\n+\n+fn parse_version(header: &[u8]) -> Result<Version, ParseError> {\n+    if header.len() < 1 {\n+        return Err(InvalidHeaderLength);\n+    }\n+    match header[0] {\n+        1 => Ok(Version1),\n+        2 => Ok(Version2),\n+        _ => Err(InvalidVersion)\n+    }\n+}\n+\n+let version = parse_version(&[1, 2, 3, 4]);\n+match version {\n+    Ok(v) => {\n+        println!(\"working with version: {}\", v);\n+    }\n+    Err(e) => {\n+        println!(\"error parsing header: {}\", e);\n+    }\n+}\n+```\n+\n+This function makes use of an enum, `ParseError`, to enumerate the various\n+errors that can occur.\n+\n+# Non-recoverable errors with `panic!`\n+\n+In the case of an error that is unexpected and not recoverable, the `panic!`\n+macro will induce a panic. This will crash the current task, and give an error:\n+\n+```{rust,ignore}\n+panic!(\"boom\");\n+```\n+\n+gives\n+\n+```{notrust,ignore}\n+task '<main>' panicked at 'boom', hello.rs:2\n+```\n+\n+when you run it.\n+\n+Because these kinds of situations are relatively rare, use panics sparingly.\n+\n+# Upgrading failures to panics\n+\n+In certain circumstances, even though a function may fail, we may want to treat\n+it as a panic instead. For example, `io::stdin().read_line()` returns an\n+`IoResult<String>`, a form of `Result`, when there is an error reading the\n+line. This allows us to handle and possibly recover from this sort of error.\n+\n+If we don't want to handle this error, and would rather just abort the program,\n+we can use the `unwrap()` method:\n+\n+```{rust,ignore}\n+io::stdin().read_line().unwrap();\n+```\n+\n+`unwrap()` will `panic!` if the `Option` is `None`. This basically says \"Give\n+me the value, and if something goes wrong, just crash.\" This is less reliable\n+than matching the error and attempting to recover, but is also significantly\n+shorter. Sometimes, just crashing is appropriate.\n+\n+There's another way of doing this that's a bit nicer than `unwrap()`:\n+\n+```{rust,ignore}\n+let input = io::stdin().read_line()\n+                       .ok()\n+                       .expect(\"Failed to read line\");\n+```\n+`ok()` converts the `IoResult` into an `Option`, and `expect()` does the same\n+thing as `unwrap()`, but takes a message. This message is passed along to the\n+underlying `panic!`, providing a better error message if the code errors."}, {"sha": "7d4d48e80a38334f6e56da6ceccaec7708751432", "filename": "src/doc/index.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cbdaf2ebc7d39588a5f6efee1cd9de0a273571a9/src%2Fdoc%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/cbdaf2ebc7d39588a5f6efee1cd9de0a273571a9/src%2Fdoc%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Findex.md?ref=cbdaf2ebc7d39588a5f6efee1cd9de0a273571a9", "patch": "@@ -59,6 +59,7 @@ a guide that can help you out:\n * [References and Lifetimes](guide-lifetimes.html)\n * [Crates and modules](guide-crates.html)\n * [Tasks and Communication](guide-tasks.html)\n+* [Error Handling](guide-error-handling.html)\n * [Foreign Function Interface](guide-ffi.html)\n * [Writing Unsafe and Low-Level Code](guide-unsafe.html)\n * [Macros](guide-macros.html)"}, {"sha": "4fbb3c210165ad830847722243e52264f7b57f18", "filename": "src/doc/po4a.conf", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cbdaf2ebc7d39588a5f6efee1cd9de0a273571a9/src%2Fdoc%2Fpo4a.conf", "raw_url": "https://github.com/rust-lang/rust/raw/cbdaf2ebc7d39588a5f6efee1cd9de0a273571a9/src%2Fdoc%2Fpo4a.conf", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fpo4a.conf?ref=cbdaf2ebc7d39588a5f6efee1cd9de0a273571a9", "patch": "@@ -20,6 +20,7 @@\n [type: text] src/doc/guide-testing.md $lang:doc/l10n/$lang/guide-testing.md\n [type: text] src/doc/guide-unsafe.md $lang:doc/l10n/$lang/guide-unsafe.md\n [type: text] src/doc/guide-crates.md $lang:doc/l10n/$lang/guide-crates.md\n+[type: text] src/doc/guide-error-handling.md $lang:doc/l10n/$lang/guide-error-handling.md\n [type: text] src/doc/guide.md $lang:doc/l10n/$lang/guide.md\n [type: text] src/doc/index.md $lang:doc/l10n/$lang/index.md\n [type: text] src/doc/intro.md $lang:doc/l10n/$lang/intro.md"}, {"sha": "16798c039bac603cd49cfbf269c447844c5a195c", "filename": "src/libcore/result.rs", "status": "modified", "additions": 0, "deletions": 46, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/cbdaf2ebc7d39588a5f6efee1cd9de0a273571a9/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbdaf2ebc7d39588a5f6efee1cd9de0a273571a9/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=cbdaf2ebc7d39588a5f6efee1cd9de0a273571a9", "patch": "@@ -227,52 +227,6 @@\n //! ```\n //!\n //! `try!` is imported by the prelude, and is available everywhere.\n-//!\n-//! # `Result` and `Option`\n-//!\n-//! The `Result` and [`Option`](../option/index.html) types are\n-//! similar and complementary: they are often employed to indicate a\n-//! lack of a return value; and they are trivially converted between\n-//! each other, so `Result`s are often handled by first converting to\n-//! `Option` with the [`ok`](type.Result.html#method.ok) and\n-//! [`err`](type.Result.html#method.ok) methods.\n-//!\n-//! Whereas `Option` only indicates the lack of a value, `Result` is\n-//! specifically for error reporting, and carries with it an error\n-//! value.  Sometimes `Option` is used for indicating errors, but this\n-//! is only for simple cases and is generally discouraged. Even when\n-//! there is no useful error value to return, prefer `Result<T, ()>`.\n-//!\n-//! Converting to an `Option` with `ok()` to handle an error:\n-//!\n-//! ```\n-//! use std::io::Timer;\n-//! let mut t = Timer::new().ok().expect(\"failed to create timer!\");\n-//! ```\n-//!\n-//! # `Result` vs. `panic!`\n-//!\n-//! `Result` is for recoverable errors; `panic!` is for unrecoverable\n-//! errors. Callers should always be able to avoid panics if they\n-//! take the proper precautions, for example, calling `is_some()`\n-//! on an `Option` type before calling `unwrap`.\n-//!\n-//! The suitability of `panic!` as an error handling mechanism is\n-//! limited by Rust's lack of any way to \"catch\" and resume execution\n-//! from a thrown exception. Therefore using panics for error\n-//! handling requires encapsulating code that may panic in a task.\n-//! Calling the `panic!` macro, or invoking `panic!` indirectly should be\n-//! avoided as an error reporting strategy. Panics is only for\n-//! unrecoverable errors and a panicking task is typically the sign of\n-//! a bug.\n-//!\n-//! A module that instead returns `Results` is alerting the caller\n-//! that failure is possible, and providing precise control over how\n-//! it is handled.\n-//!\n-//! Furthermore, panics may not be recoverable at all, depending on\n-//! the context. The caller of `panic!` should assume that execution\n-//! will not resume after the panic, that a panic is catastrophic.\n \n #![stable]\n "}]}