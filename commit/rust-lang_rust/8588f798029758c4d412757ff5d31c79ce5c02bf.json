{"sha": "8588f798029758c4d412757ff5d31c79ce5c02bf", "node_id": "C_kwDOAAsO6NoAKDg1ODhmNzk4MDI5NzU4YzRkNDEyNzU3ZmY1ZDMxYzc5Y2U1YzAyYmY", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-03-17T06:05:52Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-03-27T04:11:06Z"}, "message": "Do not use ParamEnv::and to cache param-env with candidate", "tree": {"sha": "55c2deb7676cda094d34af954fece2e9c0170cd6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/55c2deb7676cda094d34af954fece2e9c0170cd6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8588f798029758c4d412757ff5d31c79ce5c02bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8588f798029758c4d412757ff5d31c79ce5c02bf", "html_url": "https://github.com/rust-lang/rust/commit/8588f798029758c4d412757ff5d31c79ce5c02bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8588f798029758c4d412757ff5d31c79ce5c02bf/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "551b4fa395fa588d91cbecfb0cdfe1baa02670cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/551b4fa395fa588d91cbecfb0cdfe1baa02670cf", "html_url": "https://github.com/rust-lang/rust/commit/551b4fa395fa588d91cbecfb0cdfe1baa02670cf"}], "stats": {"total": 32, "additions": 20, "deletions": 12}, "files": [{"sha": "ffa70cddbd59c8174ce036f79bb36d997d50dc55", "filename": "compiler/rustc_middle/src/traits/select.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8588f798029758c4d412757ff5d31c79ce5c02bf/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8588f798029758c4d412757ff5d31c79ce5c02bf/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fselect.rs?ref=8588f798029758c4d412757ff5d31c79ce5c02bf", "patch": "@@ -13,12 +13,19 @@ use rustc_hir::def_id::DefId;\n use rustc_query_system::cache::Cache;\n \n pub type SelectionCache<'tcx> = Cache<\n-    ty::ParamEnvAnd<'tcx, ty::TraitPredicate<'tcx>>,\n+    // This cache does not use `ParamEnvAnd` in its keys because `ParamEnv::and` can replace\n+    // caller bounds with an empty list if the `TraitPredicate` looks global, which may happen\n+    // after erasing lifetimes from the predicate.\n+    (ty::ParamEnv<'tcx>, ty::TraitPredicate<'tcx>),\n     SelectionResult<'tcx, SelectionCandidate<'tcx>>,\n >;\n \n-pub type EvaluationCache<'tcx> =\n-    Cache<ty::ParamEnvAnd<'tcx, ty::PolyTraitPredicate<'tcx>>, EvaluationResult>;\n+pub type EvaluationCache<'tcx> = Cache<\n+    // See above: this cache does not use `ParamEnvAnd` in its keys due to sometimes incorrectly\n+    // caching with the wrong `ParamEnv`.\n+    (ty::ParamEnv<'tcx>, ty::PolyTraitPredicate<'tcx>),\n+    EvaluationResult,\n+>;\n \n /// The selection process begins by considering all impls, where\n /// clauses, and so forth that might resolve an obligation. Sometimes"}, {"sha": "ad4eb6e21a6a8ae0da237a72c5b73fcc00178b08", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8588f798029758c4d412757ff5d31c79ce5c02bf/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8588f798029758c4d412757ff5d31c79ce5c02bf/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=8588f798029758c4d412757ff5d31c79ce5c02bf", "patch": "@@ -1046,11 +1046,11 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n         let tcx = self.tcx();\n         if self.can_use_global_caches(param_env) {\n-            if let Some(res) = tcx.evaluation_cache.get(&param_env.and(trait_pred), tcx) {\n+            if let Some(res) = tcx.evaluation_cache.get(&(param_env, trait_pred), tcx) {\n                 return Some(res);\n             }\n         }\n-        self.infcx.evaluation_cache.get(&param_env.and(trait_pred), tcx)\n+        self.infcx.evaluation_cache.get(&(param_env, trait_pred), tcx)\n     }\n \n     fn insert_evaluation_cache(\n@@ -1081,13 +1081,13 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 // FIXME: Due to #50507 this overwrites the different values\n                 // This should be changed to use HashMapExt::insert_same\n                 // when that is fixed\n-                self.tcx().evaluation_cache.insert(param_env.and(trait_pred), dep_node, result);\n+                self.tcx().evaluation_cache.insert((param_env, trait_pred), dep_node, result);\n                 return;\n             }\n         }\n \n         debug!(?trait_pred, ?result, \"insert_evaluation_cache\");\n-        self.infcx.evaluation_cache.insert(param_env.and(trait_pred), dep_node, result);\n+        self.infcx.evaluation_cache.insert((param_env, trait_pred), dep_node, result);\n     }\n \n     /// For various reasons, it's possible for a subobligation\n@@ -1297,11 +1297,11 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         pred.remap_constness(tcx, &mut param_env);\n \n         if self.can_use_global_caches(param_env) {\n-            if let Some(res) = tcx.selection_cache.get(&param_env.and(pred), tcx) {\n+            if let Some(res) = tcx.selection_cache.get(&(param_env, pred), tcx) {\n                 return Some(res);\n             }\n         }\n-        self.infcx.selection_cache.get(&param_env.and(pred), tcx)\n+        self.infcx.selection_cache.get(&(param_env, pred), tcx)\n     }\n \n     /// Determines whether can we safely cache the result\n@@ -1361,14 +1361,14 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 if !candidate.needs_infer() {\n                     debug!(?pred, ?candidate, \"insert_candidate_cache global\");\n                     // This may overwrite the cache with the same value.\n-                    tcx.selection_cache.insert(param_env.and(pred), dep_node, candidate);\n+                    tcx.selection_cache.insert((param_env, pred), dep_node, candidate);\n                     return;\n                 }\n             }\n         }\n \n         debug!(?pred, ?candidate, \"insert_candidate_cache local\");\n-        self.infcx.selection_cache.insert(param_env.and(pred), dep_node, candidate);\n+        self.infcx.selection_cache.insert((param_env, pred), dep_node, candidate);\n     }\n \n     /// Matches a predicate against the bounds of its self type."}, {"sha": "00a866f220b2e8a512e223dbeb0c2a762448edb2", "filename": "src/test/ui/higher-rank-trait-bounds/normalize-under-binder/issue-80706.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8588f798029758c4d412757ff5d31c79ce5c02bf/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-80706.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8588f798029758c4d412757ff5d31c79ce5c02bf/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-80706.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-80706.rs?ref=8588f798029758c4d412757ff5d31c79ce5c02bf", "patch": "@@ -1,4 +1,4 @@\n-// check-pass\n+// build-pass\n // edition:2018\n \n type BoxFuture<T> = std::pin::Pin<Box<dyn std::future::Future<Output=T>>>;\n@@ -65,6 +65,7 @@ async fn run<S>(dep: &str)\n where\n     S: Storage,\n     for<'a> SaveUser<'a>: StorageRequest<S>,\n+    for<'a> SaveUser<'a>: StorageRequestReturnType,\n {\n     User { dep }.save().await;\n }"}]}