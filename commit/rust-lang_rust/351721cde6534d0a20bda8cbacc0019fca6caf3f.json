{"sha": "351721cde6534d0a20bda8cbacc0019fca6caf3f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1MTcyMWNkZTY1MzRkMGEyMGJkYThjYmFjYzAwMTlmY2E2Y2FmM2Y=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-03-18T23:00:51Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-03-19T02:54:39Z"}, "message": "Small formatting fixes to fmt.rs", "tree": {"sha": "48f40d74b7c4e6b60c8d3feab6a1468e5ebdfb08", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48f40d74b7c4e6b60c8d3feab6a1468e5ebdfb08"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/351721cde6534d0a20bda8cbacc0019fca6caf3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/351721cde6534d0a20bda8cbacc0019fca6caf3f", "html_url": "https://github.com/rust-lang/rust/commit/351721cde6534d0a20bda8cbacc0019fca6caf3f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/351721cde6534d0a20bda8cbacc0019fca6caf3f/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12cb7c6a2847959460ecac75b2c983d071585472", "url": "https://api.github.com/repos/rust-lang/rust/commits/12cb7c6a2847959460ecac75b2c983d071585472", "html_url": "https://github.com/rust-lang/rust/commit/12cb7c6a2847959460ecac75b2c983d071585472"}], "stats": {"total": 45, "additions": 23, "deletions": 22}, "files": [{"sha": "fbd07e48a84dbe392810846eaf3499548da08d6f", "filename": "src/libcollections/fmt.rs", "status": "modified", "additions": 23, "deletions": 22, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/351721cde6534d0a20bda8cbacc0019fca6caf3f/src%2Flibcollections%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/351721cde6534d0a20bda8cbacc0019fca6caf3f/src%2Flibcollections%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ffmt.rs?ref=351721cde6534d0a20bda8cbacc0019fca6caf3f", "patch": "@@ -16,7 +16,7 @@\n //! This macro is implemented in the compiler to emit calls to this module in\n //! order to format arguments at runtime into strings and streams.\n //!\n-//! ## Usage\n+//! # Usage\n //!\n //! The `format!` macro is intended to be familiar to those coming from C's\n //! printf/fprintf functions or Python's `str.format` function. In its current\n@@ -41,7 +41,7 @@\n //! will then parse the format string and determine if the list of arguments\n //! provided is suitable to pass to this format string.\n //!\n-//! ### Positional parameters\n+//! ## Positional parameters\n //!\n //! Each formatting argument is allowed to specify which value argument it's\n //! referencing, and if omitted it is assumed to be \"the next argument\". For\n@@ -54,7 +54,7 @@\n //! iterator over the argument. Each time a \"next argument\" specifier is seen,\n //! the iterator advances. This leads to behavior like this:\n //!\n-//! ```rust\n+//! ```\n //! format!(\"{1} {} {0} {}\", 1, 2); // => \"2 1 1 2\"\n //! ```\n //!\n@@ -68,7 +68,7 @@\n //! compile-time error. You may refer to the same argument more than once in the\n //! format string, although it must always be referred to with the same type.\n //!\n-//! ### Named parameters\n+//! ## Named parameters\n //!\n //! Rust itself does not have a Python-like equivalent of named parameters to a\n //! function, but the `format!` macro is a syntax extension which allows it to\n@@ -91,7 +91,7 @@\n //! arguments which have names. Like with positional parameters, it is illegal\n //! to provide named parameters that are unused by the format string.\n //!\n-//! ### Argument types\n+//! ## Argument types\n //!\n //! Each argument's type is dictated by the format string. It is a requirement\n //! that every argument is only ever referred to by one type. For example, this\n@@ -116,7 +116,7 @@\n //! {:.*} {0}\n //! ```\n //!\n-//! ### Formatting traits\n+//! ## Formatting traits\n //!\n //! When requesting that an argument be formatted with a particular type, you\n //! are actually requesting that an argument ascribes to a particular trait.\n@@ -142,7 +142,7 @@\n //! When implementing a format trait for your own type, you will have to\n //! implement a method of the signature:\n //!\n-//! ```rust\n+//! ```\n //! # use std::fmt;\n //! # struct Foo; // our custom type\n //! # impl fmt::Display for Foo {\n@@ -166,7 +166,7 @@\n //! An example of implementing the formatting traits would look\n //! like:\n //!\n-//! ```rust\n+//! ```\n //! use std::fmt;\n //! use std::f64;\n //! use std::num::Float;\n@@ -211,7 +211,7 @@\n //! }\n //! ```\n //!\n-//! #### fmt::Display vs fmt::Debug\n+//! ### fmt::Display vs fmt::Debug\n //!\n //! These two formatting traits have distinct purposes:\n //!\n@@ -231,7 +231,7 @@\n //! assert_eq!(format!(\"{} {:?}\", \"foo\\n\", \"bar\\n\"), \"foo\\n \\\"bar\\\\n\\\"\");\n //! ```\n //!\n-//! ### Related macros\n+//! ## Related macros\n //!\n //! There are a number of related macros in the `format!` family. The ones that\n //! are currently implemented are:\n@@ -245,32 +245,33 @@\n //! format_args! // described below.\n //! ```\n //!\n-//! #### `write!`\n+//! ### `write!`\n //!\n //! This and `writeln` are two macros which are used to emit the format string\n //! to a specified stream. This is used to prevent intermediate allocations of\n //! format strings and instead directly write the output. Under the hood, this\n //! function is actually invoking the `write` function defined in this module.\n //! Example usage is:\n //!\n-//! ```rust\n+//! ```\n //! # #![allow(unused_must_use)]\n //! let mut w = Vec::new();\n //! write!(&mut w, \"Hello {}!\", \"world\");\n //! ```\n //!\n-//! #### `print!`\n+//! ### `print!`\n //!\n //! This and `println` emit their output to stdout. Similarly to the `write!`\n //! macro, the goal of these macros is to avoid intermediate allocations when\n //! printing output. Example usage is:\n //!\n-//! ```rust\n+//! ```\n //! print!(\"Hello {}!\", \"world\");\n //! println!(\"I have a newline {}\", \"character at the end\");\n //! ```\n //!\n-//! #### `format_args!`\n+//! ### `format_args!`\n+//!\n //! This is a curious macro which is used to safely pass around\n //! an opaque object describing the format string. This object\n //! does not require any heap allocations to create, and it only\n@@ -303,7 +304,7 @@\n //! it would internally pass around this structure until it has been determined\n //! where output should go to.\n //!\n-//! ## Syntax\n+//! # Syntax\n //!\n //! The syntax for the formatting language used is drawn from other languages,\n //! so it should not be too alien. Arguments are formatted with python-like\n@@ -326,14 +327,14 @@\n //! parameter := integer '$'\n //! ```\n //!\n-//! ## Formatting Parameters\n+//! # Formatting Parameters\n //!\n //! Each argument being formatted can be transformed by a number of formatting\n //! parameters (corresponding to `format_spec` in the syntax above). These\n //! parameters affect the string representation of what's being formatted. This\n //! syntax draws heavily from Python's, so it may seem a bit familiar.\n //!\n-//! ### Fill/Alignment\n+//! ## Fill/Alignment\n //!\n //! The fill character is provided normally in conjunction with the `width`\n //! parameter. This indicates that if the value being formatted is smaller than\n@@ -345,7 +346,7 @@\n //! * `^` - the argument is center-aligned in `width` columns\n //! * `>` - the argument is right-aligned in `width` columns\n //!\n-//! ### Sign/#/0\n+//! ## Sign/#/0\n //!\n //! These can all be interpreted as flags for a particular formatter.\n //!\n@@ -368,7 +369,7 @@\n //!         same format would yield `-0000001` for the integer `-1`. Notice that\n //!         the negative version has one fewer zero than the positive version.\n //!\n-//! ### Width\n+//! ## Width\n //!\n //! This is a parameter for the \"minimum width\" that the format should take up.\n //! If the value's string does not fill up this many characters, then the\n@@ -384,7 +385,7 @@\n //! parameters by using the `2$` syntax indicating that the second argument is a\n //! `usize` specifying the width.\n //!\n-//! ### Precision\n+//! ## Precision\n //!\n //! For non-numeric types, this can be considered a \"maximum width\". If the\n //! resulting string is longer than this width, then it is truncated down to\n@@ -395,7 +396,7 @@\n //! For floating-point types, this indicates how many digits after the decimal\n //! point should be printed.\n //!\n-//! ## Escaping\n+//! # Escaping\n //!\n //! The literal characters `{` and `}` may be included in a string by preceding\n //! them with the same character. For example, the `{` character is escaped with"}]}