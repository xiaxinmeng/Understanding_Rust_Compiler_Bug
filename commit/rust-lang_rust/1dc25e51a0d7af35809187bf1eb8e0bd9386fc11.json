{"sha": "1dc25e51a0d7af35809187bf1eb8e0bd9386fc11", "node_id": "C_kwDOAAsO6NoAKDFkYzI1ZTUxYTBkN2FmMzU4MDkxODdiZjFlYjhlMGJkOTM4NmZjMTE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-16T11:16:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-16T11:16:22Z"}, "message": "Auto merge of #12253 - Veykril:bm, r=Veykril\n\nfeat: Add binding mode inlay hints\n\n![image](https://user-images.githubusercontent.com/3757771/168427387-2f299438-a0cc-496b-a9a5-d689ef6a2b55.png)", "tree": {"sha": "a124c31df777fbec086b997272eeee38eae95e49", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a124c31df777fbec086b997272eeee38eae95e49"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1dc25e51a0d7af35809187bf1eb8e0bd9386fc11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1dc25e51a0d7af35809187bf1eb8e0bd9386fc11", "html_url": "https://github.com/rust-lang/rust/commit/1dc25e51a0d7af35809187bf1eb8e0bd9386fc11", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1dc25e51a0d7af35809187bf1eb8e0bd9386fc11/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac4ce4259b906e7998695722b5af4cf2f261b250", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac4ce4259b906e7998695722b5af4cf2f261b250", "html_url": "https://github.com/rust-lang/rust/commit/ac4ce4259b906e7998695722b5af4cf2f261b250"}, {"sha": "977f0ba968203918b135c3d99380db9f9a5c2c19", "url": "https://api.github.com/repos/rust-lang/rust/commits/977f0ba968203918b135c3d99380db9f9a5c2c19", "html_url": "https://github.com/rust-lang/rust/commit/977f0ba968203918b135c3d99380db9f9a5c2c19"}], "stats": {"total": 254, "additions": 212, "deletions": 42}, "files": [{"sha": "e00dfdf2fa74f974cba92f091a17d017547730b4", "filename": "crates/hir-ty/src/diagnostics/match_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dc25e51a0d7af35809187bf1eb8e0bd9386fc11/crates%2Fhir-ty%2Fsrc%2Fdiagnostics%2Fmatch_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dc25e51a0d7af35809187bf1eb8e0bd9386fc11/crates%2Fhir-ty%2Fsrc%2Fdiagnostics%2Fmatch_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fdiagnostics%2Fmatch_check.rs?ref=1dc25e51a0d7af35809187bf1eb8e0bd9386fc11", "patch": "@@ -105,7 +105,7 @@ impl<'a> PatCtxt<'a> {\n         self.infer.pat_adjustments.get(&pat).map(|it| &**it).unwrap_or_default().iter().rev().fold(\n             unadjusted_pat,\n             |subpattern, ref_ty| Pat {\n-                ty: ref_ty.target.clone(),\n+                ty: ref_ty.clone(),\n                 kind: Box::new(PatKind::Deref { subpattern }),\n             },\n         )"}, {"sha": "a19ff8bf60168cbf6db3302e7488674355c310be", "filename": "crates/hir-ty/src/infer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1dc25e51a0d7af35809187bf1eb8e0bd9386fc11/crates%2Fhir-ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dc25e51a0d7af35809187bf1eb8e0bd9386fc11/crates%2Fhir-ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer.rs?ref=1dc25e51a0d7af35809187bf1eb8e0bd9386fc11", "patch": "@@ -297,7 +297,7 @@ pub struct InferenceResult {\n     /// Interned Unknown to return references to.\n     standard_types: InternedStandardTypes,\n     /// Stores the types which were implicitly dereferenced in pattern binding modes.\n-    pub pat_adjustments: FxHashMap<PatId, Vec<Adjustment>>,\n+    pub pat_adjustments: FxHashMap<PatId, Vec<Ty>>,\n     pub pat_binding_modes: FxHashMap<PatId, BindingMode>,\n     pub expr_adjustments: FxHashMap<ExprId, Vec<Adjustment>>,\n }\n@@ -445,7 +445,7 @@ impl<'a> InferenceContext<'a> {\n             adjustment.target = table.resolve_completely(adjustment.target.clone());\n         }\n         for adjustment in result.pat_adjustments.values_mut().flatten() {\n-            adjustment.target = table.resolve_completely(adjustment.target.clone());\n+            *adjustment = table.resolve_completely(adjustment.clone());\n         }\n         result\n     }"}, {"sha": "f8131314c6931431bc6b1bc220813f2e893deaf5", "filename": "crates/hir-ty/src/infer/pat.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1dc25e51a0d7af35809187bf1eb8e0bd9386fc11/crates%2Fhir-ty%2Fsrc%2Finfer%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dc25e51a0d7af35809187bf1eb8e0bd9386fc11/crates%2Fhir-ty%2Fsrc%2Finfer%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer%2Fpat.rs?ref=1dc25e51a0d7af35809187bf1eb8e0bd9386fc11", "patch": "@@ -11,9 +11,7 @@ use hir_def::{\n use hir_expand::name::Name;\n \n use crate::{\n-    infer::{\n-        Adjust, Adjustment, AutoBorrow, BindingMode, Expectation, InferenceContext, TypeMismatch,\n-    },\n+    infer::{BindingMode, Expectation, InferenceContext, TypeMismatch},\n     lower::lower_to_chalk_mutability,\n     static_lifetime, ConcreteConst, ConstValue, Interner, Substitution, Ty, TyBuilder, TyExt,\n     TyKind,\n@@ -105,10 +103,7 @@ impl<'a> InferenceContext<'a> {\n         if is_non_ref_pat(&self.body, pat) {\n             let mut pat_adjustments = Vec::new();\n             while let Some((inner, _lifetime, mutability)) = expected.as_reference() {\n-                pat_adjustments.push(Adjustment {\n-                    target: expected.clone(),\n-                    kind: Adjust::Borrow(AutoBorrow::Ref(mutability)),\n-                });\n+                pat_adjustments.push(expected.clone());\n                 expected = self.resolve_ty_shallow(inner);\n                 default_bm = match default_bm {\n                     BindingMode::Move => BindingMode::Ref(mutability),"}, {"sha": "15bcbda25de3da5eaaebb7f9b6cf7f315bf00ccb", "filename": "crates/hir-ty/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1dc25e51a0d7af35809187bf1eb8e0bd9386fc11/crates%2Fhir-ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dc25e51a0d7af35809187bf1eb8e0bd9386fc11/crates%2Fhir-ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Flib.rs?ref=1dc25e51a0d7af35809187bf1eb8e0bd9386fc11", "patch": "@@ -47,7 +47,8 @@ pub use autoderef::autoderef;\n pub use builder::{ParamKind, TyBuilder};\n pub use chalk_ext::*;\n pub use infer::{\n-    could_coerce, could_unify, Adjust, Adjustment, AutoBorrow, InferenceDiagnostic, InferenceResult,\n+    could_coerce, could_unify, Adjust, Adjustment, AutoBorrow, BindingMode, InferenceDiagnostic,\n+    InferenceResult,\n };\n pub use interner::Interner;\n pub use lower::{"}, {"sha": "4f8fc6bf567404dccf306658a91910cbda0c1fc1", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1dc25e51a0d7af35809187bf1eb8e0bd9386fc11/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dc25e51a0d7af35809187bf1eb8e0bd9386fc11/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=1dc25e51a0d7af35809187bf1eb8e0bd9386fc11", "patch": "@@ -3332,6 +3332,12 @@ impl Callable {\n     }\n }\n \n+#[derive(Copy, Clone, Debug, Eq, PartialEq)]\n+pub enum BindingMode {\n+    Move,\n+    Ref(Mutability),\n+}\n+\n /// For IDE only\n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n pub enum ScopeDef {"}, {"sha": "48661ec4ebeaad6d26dc5e47ea97aaa0e403bc4c", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1dc25e51a0d7af35809187bf1eb8e0bd9386fc11/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dc25e51a0d7af35809187bf1eb8e0bd9386fc11/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=1dc25e51a0d7af35809187bf1eb8e0bd9386fc11", "patch": "@@ -30,9 +30,9 @@ use crate::{\n     db::HirDatabase,\n     semantics::source_to_def::{ChildContainer, SourceToDefCache, SourceToDefCtx},\n     source_analyzer::{resolve_hir_path, SourceAnalyzer},\n-    Access, BuiltinAttr, Callable, ConstParam, Crate, Field, Function, HasSource, HirFileId, Impl,\n-    InFile, Label, LifetimeParam, Local, Macro, Module, ModuleDef, Name, Path, ScopeDef,\n-    ToolModule, Trait, Type, TypeAlias, TypeParam, VariantDef,\n+    Access, BindingMode, BuiltinAttr, Callable, ConstParam, Crate, Field, Function, HasSource,\n+    HirFileId, Impl, InFile, Label, LifetimeParam, Local, Macro, Module, ModuleDef, Name, Path,\n+    ScopeDef, ToolModule, Trait, Type, TypeAlias, TypeParam, VariantDef,\n };\n \n #[derive(Debug, Clone, PartialEq, Eq)]\n@@ -336,6 +336,14 @@ impl<'db, DB: HirDatabase> Semantics<'db, DB> {\n         self.imp.type_of_self(param)\n     }\n \n+    pub fn pattern_adjustments(&self, pat: &ast::Pat) -> SmallVec<[Type; 1]> {\n+        self.imp.pattern_adjustments(pat)\n+    }\n+\n+    pub fn binding_mode_of_pat(&self, pat: &ast::IdentPat) -> Option<BindingMode> {\n+        self.imp.binding_mode_of_pat(pat)\n+    }\n+\n     pub fn resolve_method_call(&self, call: &ast::MethodCallExpr) -> Option<Function> {\n         self.imp.resolve_method_call(call).map(Function::from)\n     }\n@@ -951,6 +959,16 @@ impl<'db> SemanticsImpl<'db> {\n         self.analyze(param.syntax())?.type_of_self(self.db, param)\n     }\n \n+    fn pattern_adjustments(&self, pat: &ast::Pat) -> SmallVec<[Type; 1]> {\n+        self.analyze(pat.syntax())\n+            .and_then(|it| it.pattern_adjustments(self.db, pat))\n+            .unwrap_or_default()\n+    }\n+\n+    fn binding_mode_of_pat(&self, pat: &ast::IdentPat) -> Option<BindingMode> {\n+        self.analyze(pat.syntax())?.binding_mode_of_pat(self.db, pat)\n+    }\n+\n     fn resolve_method_call(&self, call: &ast::MethodCallExpr) -> Option<FunctionId> {\n         self.analyze(call.syntax())?.resolve_method_call(self.db, call).map(|(id, _)| id)\n     }"}, {"sha": "b5e6d99093dab6e99c5e34d65b9a038bcd86b2c6", "filename": "crates/hir/src/source_analyzer.rs", "status": "modified", "additions": 37, "deletions": 4, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/1dc25e51a0d7af35809187bf1eb8e0bd9386fc11/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dc25e51a0d7af35809187bf1eb8e0bd9386fc11/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs?ref=1dc25e51a0d7af35809187bf1eb8e0bd9386fc11", "patch": "@@ -34,15 +34,16 @@ use hir_ty::{\n     Adjust, Adjustment, AutoBorrow, InferenceResult, Interner, Substitution, TyExt,\n     TyLoweringContext,\n };\n+use smallvec::SmallVec;\n use syntax::{\n     ast::{self, AstNode},\n     SyntaxKind, SyntaxNode, TextRange, TextSize,\n };\n \n use crate::{\n-    db::HirDatabase, semantics::PathResolution, Adt, AssocItem, BuiltinAttr, BuiltinType, Const,\n-    Field, Function, Local, Macro, ModuleDef, Static, Struct, ToolModule, Trait, Type, TypeAlias,\n-    Variant,\n+    db::HirDatabase, semantics::PathResolution, Adt, AssocItem, BindingMode, BuiltinAttr,\n+    BuiltinType, Const, Field, Function, Local, Macro, ModuleDef, Static, Struct, ToolModule,\n+    Trait, Type, TypeAlias, Variant,\n };\n \n /// `SourceAnalyzer` is a convenience wrapper which exposes HIR API in terms of\n@@ -182,7 +183,7 @@ impl SourceAnalyzer {\n         let coerced = infer\n             .pat_adjustments\n             .get(&pat_id)\n-            .and_then(|adjusts| adjusts.last().map(|adjust| adjust.target.clone()));\n+            .and_then(|adjusts| adjusts.last().map(|adjust| adjust.clone()));\n         let ty = infer[pat_id].clone();\n         let mk_ty = |ty| Type::new_with_resolver(db, &self.resolver, ty);\n         Some((mk_ty(ty), coerced.map(mk_ty)))\n@@ -199,6 +200,38 @@ impl SourceAnalyzer {\n         Some(Type::new_with_resolver(db, &self.resolver, ty))\n     }\n \n+    pub(crate) fn binding_mode_of_pat(\n+        &self,\n+        _db: &dyn HirDatabase,\n+        pat: &ast::IdentPat,\n+    ) -> Option<BindingMode> {\n+        let pat_id = self.pat_id(&pat.clone().into())?;\n+        let infer = self.infer.as_ref()?;\n+        infer.pat_binding_modes.get(&pat_id).map(|bm| match bm {\n+            hir_ty::BindingMode::Move => BindingMode::Move,\n+            hir_ty::BindingMode::Ref(hir_ty::Mutability::Mut) => BindingMode::Ref(Mutability::Mut),\n+            hir_ty::BindingMode::Ref(hir_ty::Mutability::Not) => {\n+                BindingMode::Ref(Mutability::Shared)\n+            }\n+        })\n+    }\n+    pub(crate) fn pattern_adjustments(\n+        &self,\n+        db: &dyn HirDatabase,\n+        pat: &ast::Pat,\n+    ) -> Option<SmallVec<[Type; 1]>> {\n+        let pat_id = self.pat_id(&pat)?;\n+        let infer = self.infer.as_ref()?;\n+        Some(\n+            infer\n+                .pat_adjustments\n+                .get(&pat_id)?\n+                .iter()\n+                .map(|ty| Type::new_with_resolver(db, &self.resolver, ty.clone()))\n+                .collect(),\n+        )\n+    }\n+\n     pub(crate) fn resolve_method_call(\n         &self,\n         db: &dyn HirDatabase,"}, {"sha": "23a46c0276284e55a8ee1f116c0c756f0b1d478b", "filename": "crates/ide/src/inlay_hints.rs", "status": "modified", "additions": 107, "deletions": 7, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/1dc25e51a0d7af35809187bf1eb8e0bd9386fc11/crates%2Fide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dc25e51a0d7af35809187bf1eb8e0bd9386fc11/crates%2Fide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints.rs?ref=1dc25e51a0d7af35809187bf1eb8e0bd9386fc11", "patch": "@@ -1,5 +1,5 @@\n use either::Either;\n-use hir::{known, Callable, HasVisibility, HirDisplay, Semantics, TypeInfo};\n+use hir::{known, Callable, HasVisibility, HirDisplay, Mutability, Semantics, TypeInfo};\n use ide_db::{\n     base_db::FileRange, famous_defs::FamousDefs, syntax_helpers::node_ext::walk_ty, FxHashMap,\n     RootDatabase,\n@@ -21,6 +21,7 @@ pub struct InlayHintsConfig {\n     pub chaining_hints: bool,\n     pub reborrow_hints: ReborrowHints,\n     pub closure_return_type_hints: bool,\n+    pub binding_mode_hints: bool,\n     pub lifetime_elision_hints: LifetimeElisionHints,\n     pub param_names_for_lifetime_elision_hints: bool,\n     pub hide_named_constructor_hints: bool,\n@@ -43,10 +44,11 @@ pub enum ReborrowHints {\n \n #[derive(Clone, Debug, PartialEq, Eq)]\n pub enum InlayKind {\n+    BindingModeHint,\n     ChainingHint,\n     ClosureReturnTypeHint,\n     GenericParamListHint,\n-    ImplicitReborrow,\n+    ImplicitReborrowHint,\n     LifetimeHint,\n     ParameterHint,\n     TypeHint,\n@@ -135,8 +137,11 @@ fn hints(\n             ast::Expr::PathExpr(_) => reborrow_hints(hints, sema, config, &expr),\n             _ => None,\n         };\n-    } else if let Some(it) = ast::IdentPat::cast(node.clone()) {\n-        bind_pat_hints(hints, sema, config, &it);\n+    } else if let Some(it) = ast::Pat::cast(node.clone()) {\n+        binding_mode_hints(hints, sema, config, &it);\n+        if let ast::Pat::IdentPat(it) = it {\n+            bind_pat_hints(hints, sema, config, &it);\n+        }\n     } else if let Some(it) = ast::Fn::cast(node) {\n         lifetime_hints(hints, config, it);\n     }\n@@ -383,15 +388,17 @@ fn reborrow_hints(\n         return None;\n     }\n \n-    let mutability = sema.is_implicit_reborrow(expr)?;\n+    let descended = sema.descend_node_into_attributes(expr.clone()).pop();\n+    let desc_expr = descended.as_ref().unwrap_or(expr);\n+    let mutability = sema.is_implicit_reborrow(desc_expr)?;\n     let label = match mutability {\n         hir::Mutability::Shared if config.reborrow_hints != ReborrowHints::MutableOnly => \"&*\",\n         hir::Mutability::Mut => \"&mut *\",\n         _ => return None,\n     };\n     acc.push(InlayHint {\n         range: expr.syntax().text_range(),\n-        kind: InlayKind::ImplicitReborrow,\n+        kind: InlayKind::ImplicitReborrowHint,\n         label: SmolStr::new_inline(label),\n     });\n     Some(())\n@@ -497,6 +504,51 @@ fn param_name_hints(\n     Some(())\n }\n \n+fn binding_mode_hints(\n+    acc: &mut Vec<InlayHint>,\n+    sema: &Semantics<RootDatabase>,\n+    config: &InlayHintsConfig,\n+    pat: &ast::Pat,\n+) -> Option<()> {\n+    if !config.binding_mode_hints {\n+        return None;\n+    }\n+\n+    let range = pat.syntax().text_range();\n+    sema.pattern_adjustments(&pat).iter().for_each(|ty| {\n+        let reference = ty.is_reference();\n+        let mut_reference = ty.is_mutable_reference();\n+        let r = match (reference, mut_reference) {\n+            (true, true) => \"&mut\",\n+            (true, false) => \"&\",\n+            _ => return,\n+        };\n+        acc.push(InlayHint {\n+            range,\n+            kind: InlayKind::BindingModeHint,\n+            label: SmolStr::new_inline(r),\n+        });\n+    });\n+    match pat {\n+        ast::Pat::IdentPat(pat) if pat.ref_token().is_none() && pat.mut_token().is_none() => {\n+            let bm = sema.binding_mode_of_pat(pat)?;\n+            let bm = match bm {\n+                hir::BindingMode::Move => return None,\n+                hir::BindingMode::Ref(Mutability::Mut) => \"ref mut\",\n+                hir::BindingMode::Ref(Mutability::Shared) => \"ref\",\n+            };\n+            acc.push(InlayHint {\n+                range,\n+                kind: InlayKind::BindingModeHint,\n+                label: SmolStr::new_inline(bm),\n+            });\n+        }\n+        _ => (),\n+    }\n+\n+    Some(())\n+}\n+\n fn bind_pat_hints(\n     acc: &mut Vec<InlayHint>,\n     sema: &Semantics<RootDatabase>,\n@@ -681,6 +733,7 @@ fn should_not_display_type_hint(\n         match_ast! {\n             match node {\n                 ast::LetStmt(it) => return it.ty().is_some(),\n+                // FIXME: We might wanna show type hints in parameters for non-top level patterns as well\n                 ast::Param(it) => return it.ty().is_some(),\n                 ast::MatchArm(_) => return pat_is_enum_variant(db, bind_pat, pat_ty),\n                 ast::LetExpr(_) => return pat_is_enum_variant(db, bind_pat, pat_ty),\n@@ -866,9 +919,10 @@ mod tests {\n         parameter_hints: false,\n         chaining_hints: false,\n         lifetime_elision_hints: LifetimeElisionHints::Never,\n-        hide_named_constructor_hints: false,\n         closure_return_type_hints: false,\n         reborrow_hints: ReborrowHints::Always,\n+        binding_mode_hints: false,\n+        hide_named_constructor_hints: false,\n         param_names_for_lifetime_elision_hints: false,\n         max_length: None,\n     };\n@@ -878,6 +932,7 @@ mod tests {\n         chaining_hints: true,\n         reborrow_hints: ReborrowHints::Always,\n         closure_return_type_hints: true,\n+        binding_mode_hints: true,\n         lifetime_elision_hints: LifetimeElisionHints::Always,\n         ..DISABLED_CONFIG\n     };\n@@ -2191,6 +2246,51 @@ fn ref_mut_id(mut_ref: &mut ()) -> &mut () {\n fn ref_id(shared_ref: &()) -> &() {\n     shared_ref\n }\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn hints_binding_modes() {\n+        check_with_config(\n+            InlayHintsConfig { binding_mode_hints: true, ..DISABLED_CONFIG },\n+            r#\"\n+fn __(\n+    (x,): (u32,),\n+    (x,): &(u32,),\n+  //^^^^&\n+   //^ ref\n+    (x,): &mut (u32,)\n+  //^^^^&mut\n+   //^ ref mut\n+) {\n+    let (x,) = (0,);\n+    let (x,) = &(0,);\n+      //^^^^ &\n+       //^ ref\n+    let (x,) = &mut (0,);\n+      //^^^^ &mut\n+       //^ ref mut\n+    let &mut (x,) = &mut (0,);\n+    let (ref mut x,) = &mut (0,);\n+      //^^^^^^^^^^^^ &mut\n+    let &mut (ref mut x,) = &mut (0,);\n+    let (mut x,) = &mut (0,);\n+      //^^^^^^^^ &mut\n+    match (0,) {\n+        (x,) => ()\n+    }\n+    match &(0,) {\n+        (x,) => ()\n+      //^^^^ &\n+       //^ ref\n+    }\n+    match &mut (0,) {\n+        (x,) => ()\n+      //^^^^ &mut\n+       //^ ref mut\n+    }\n+}\n \"#,\n         );\n     }"}, {"sha": "53820860f5deb14289d10c1de08ee10b4fd7fe5c", "filename": "crates/ide/src/static_index.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1dc25e51a0d7af35809187bf1eb8e0bd9386fc11/crates%2Fide%2Fsrc%2Fstatic_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dc25e51a0d7af35809187bf1eb8e0bd9386fc11/crates%2Fide%2Fsrc%2Fstatic_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fstatic_index.rs?ref=1dc25e51a0d7af35809187bf1eb8e0bd9386fc11", "patch": "@@ -114,6 +114,7 @@ impl StaticIndex<'_> {\n                     reborrow_hints: crate::ReborrowHints::Never,\n                     hide_named_constructor_hints: false,\n                     param_names_for_lifetime_elision_hints: false,\n+                    binding_mode_hints: false,\n                     max_length: Some(25),\n                 },\n                 file_id,"}, {"sha": "623f5ec94376a8f1b2a56d2329be39b6596492d6", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1dc25e51a0d7af35809187bf1eb8e0bd9386fc11/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dc25e51a0d7af35809187bf1eb8e0bd9386fc11/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=1dc25e51a0d7af35809187bf1eb8e0bd9386fc11", "patch": "@@ -255,6 +255,8 @@ config_data! {\n         /// The path structure for newly inserted paths to use.\n         imports_prefix: ImportPrefixDef               = \"\\\"plain\\\"\",\n \n+        /// Whether to show inlay type hints for binding modes.\n+        inlayHints_bindingModeHints_enable: bool                   = \"false\",\n         /// Whether to show inlay type hints for method chains.\n         inlayHints_chainingHints_enable: bool                      = \"true\",\n         /// Whether to show inlay type hints for return types of closures with blocks.\n@@ -998,6 +1000,7 @@ impl Config {\n                 ReborrowHintsDef::Never => ide::ReborrowHints::Never,\n                 ReborrowHintsDef::Mutable => ide::ReborrowHints::MutableOnly,\n             },\n+            binding_mode_hints: self.data.inlayHints_bindingModeHints_enable,\n             param_names_for_lifetime_elision_hints: self\n                 .data\n                 .inlayHints_lifetimeElisionHints_useParameterNames,"}, {"sha": "cd9226d03da371a64d08ffff26dc5c4cb7b101b8", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 19, "deletions": 16, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/1dc25e51a0d7af35809187bf1eb8e0bd9386fc11/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dc25e51a0d7af35809187bf1eb8e0bd9386fc11/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=1dc25e51a0d7af35809187bf1eb8e0bd9386fc11", "patch": "@@ -418,9 +418,9 @@ pub(crate) fn inlay_hint(\n     lsp_types::InlayHint {\n         position: match inlay_hint.kind {\n             // before annotated thing\n-            InlayKind::ParameterHint | InlayKind::ImplicitReborrow => {\n-                position(line_index, inlay_hint.range.start())\n-            }\n+            InlayKind::ParameterHint\n+            | InlayKind::ImplicitReborrowHint\n+            | InlayKind::BindingModeHint => position(line_index, inlay_hint.range.start()),\n             // after annotated thing\n             InlayKind::ClosureReturnTypeHint\n             | InlayKind::TypeHint\n@@ -439,27 +439,30 @@ pub(crate) fn inlay_hint(\n             InlayKind::ClosureReturnTypeHint | InlayKind::TypeHint | InlayKind::ChainingHint => {\n                 Some(lsp_types::InlayHintKind::TYPE)\n             }\n-            InlayKind::GenericParamListHint\n+            InlayKind::BindingModeHint\n+            | InlayKind::GenericParamListHint\n             | InlayKind::LifetimeHint\n-            | InlayKind::ImplicitReborrow => None,\n+            | InlayKind::ImplicitReborrowHint => None,\n         },\n         tooltip: None,\n         padding_left: Some(match inlay_hint.kind {\n             InlayKind::TypeHint => !render_colons,\n-            InlayKind::ParameterHint | InlayKind::ClosureReturnTypeHint => false,\n             InlayKind::ChainingHint => true,\n-            InlayKind::GenericParamListHint => false,\n-            InlayKind::LifetimeHint => false,\n-            InlayKind::ImplicitReborrow => false,\n+            InlayKind::BindingModeHint\n+            | InlayKind::ClosureReturnTypeHint\n+            | InlayKind::GenericParamListHint\n+            | InlayKind::ImplicitReborrowHint\n+            | InlayKind::LifetimeHint\n+            | InlayKind::ParameterHint => false,\n         }),\n         padding_right: Some(match inlay_hint.kind {\n-            InlayKind::TypeHint | InlayKind::ChainingHint | InlayKind::ClosureReturnTypeHint => {\n-                false\n-            }\n-            InlayKind::ParameterHint => true,\n-            InlayKind::LifetimeHint => true,\n-            InlayKind::GenericParamListHint => false,\n-            InlayKind::ImplicitReborrow => false,\n+            InlayKind::ChainingHint\n+            | InlayKind::ClosureReturnTypeHint\n+            | InlayKind::GenericParamListHint\n+            | InlayKind::ImplicitReborrowHint\n+            | InlayKind::TypeHint => false,\n+            InlayKind::BindingModeHint => inlay_hint.label != \"&\",\n+            InlayKind::ParameterHint | InlayKind::LifetimeHint => true,\n         }),\n         text_edits: None,\n         data: None,"}, {"sha": "db66d08a73b5e7e07058bbe2ce5b4fade2858b76", "filename": "crates/syntax/src/ast/expr_ext.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dc25e51a0d7af35809187bf1eb8e0bd9386fc11/crates%2Fsyntax%2Fsrc%2Fast%2Fexpr_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dc25e51a0d7af35809187bf1eb8e0bd9386fc11/crates%2Fsyntax%2Fsrc%2Fast%2Fexpr_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fexpr_ext.rs?ref=1dc25e51a0d7af35809187bf1eb8e0bd9386fc11", "patch": "@@ -273,7 +273,7 @@ impl ast::ArrayExpr {\n     }\n \n     fn is_repeat(&self) -> bool {\n-        self.syntax().children_with_tokens().any(|it| it.kind() == T![;])\n+        self.semicolon_token().is_some()\n     }\n }\n "}, {"sha": "57f04067a3d0b1bba57ee5b24bdc7dffd761eeb1", "filename": "docs/user/generated_config.adoc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1dc25e51a0d7af35809187bf1eb8e0bd9386fc11/docs%2Fuser%2Fgenerated_config.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/1dc25e51a0d7af35809187bf1eb8e0bd9386fc11/docs%2Fuser%2Fgenerated_config.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fgenerated_config.adoc?ref=1dc25e51a0d7af35809187bf1eb8e0bd9386fc11", "patch": "@@ -345,6 +345,11 @@ Whether to allow import insertion to merge new imports into single path glob imp\n --\n The path structure for newly inserted paths to use.\n --\n+[[rust-analyzer.inlayHints.bindingModeHints.enable]]rust-analyzer.inlayHints.bindingModeHints.enable (default: `false`)::\n++\n+--\n+Whether to show inlay type hints for binding modes.\n+--\n [[rust-analyzer.inlayHints.chainingHints.enable]]rust-analyzer.inlayHints.chainingHints.enable (default: `true`)::\n +\n --"}, {"sha": "f34f9354e625273998377ade4f46b725dd71cbd6", "filename": "editors/code/package.json", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1dc25e51a0d7af35809187bf1eb8e0bd9386fc11/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/1dc25e51a0d7af35809187bf1eb8e0bd9386fc11/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=1dc25e51a0d7af35809187bf1eb8e0bd9386fc11", "patch": "@@ -782,6 +782,11 @@\n                         \"Force import paths to be absolute by always starting them with `crate` or the extern crate name they come from.\"\n                     ]\n                 },\n+                \"rust-analyzer.inlayHints.bindingModeHints.enable\": {\n+                    \"markdownDescription\": \"Whether to show inlay type hints for binding modes.\",\n+                    \"default\": false,\n+                    \"type\": \"boolean\"\n+                },\n                 \"rust-analyzer.inlayHints.chainingHints.enable\": {\n                     \"markdownDescription\": \"Whether to show inlay type hints for method chains.\",\n                     \"default\": true,"}]}