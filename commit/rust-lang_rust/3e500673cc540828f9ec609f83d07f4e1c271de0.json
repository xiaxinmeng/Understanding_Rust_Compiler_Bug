{"sha": "3e500673cc540828f9ec609f83d07f4e1c271de0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlNTAwNjczY2M1NDA4MjhmOWVjNjA5ZjgzZDA3ZjRlMWMyNzFkZTA=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-08-12T23:09:02Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-08-17T21:41:40Z"}, "message": "Fix existing tests for new `#[repr(simd)]`.", "tree": {"sha": "fc30d74313c861735beefa52d9ec0e782918b5f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc30d74313c861735beefa52d9ec0e782918b5f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e500673cc540828f9ec609f83d07f4e1c271de0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e500673cc540828f9ec609f83d07f4e1c271de0", "html_url": "https://github.com/rust-lang/rust/commit/3e500673cc540828f9ec609f83d07f4e1c271de0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e500673cc540828f9ec609f83d07f4e1c271de0/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b68f58fef4ffb833c123f057638484fa59ded76", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b68f58fef4ffb833c123f057638484fa59ded76", "html_url": "https://github.com/rust-lang/rust/commit/8b68f58fef4ffb833c123f057638484fa59ded76"}], "stats": {"total": 647, "additions": 43, "deletions": 604}, "files": [{"sha": "f7bd2fcbceb4fe42334170a2add8fafce0ac654a", "filename": "src/test/compile-fail/feature-gate-simd-ffi.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3e500673cc540828f9ec609f83d07f4e1c271de0/src%2Ftest%2Fcompile-fail%2Ffeature-gate-simd-ffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e500673cc540828f9ec609f83d07f4e1c271de0/src%2Ftest%2Fcompile-fail%2Ffeature-gate-simd-ffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-simd-ffi.rs?ref=3e500673cc540828f9ec609f83d07f4e1c271de0", "patch": "@@ -8,12 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(simd, core_simd)]\n-#![allow(dead_code)]\n+#![feature(repr_simd, core_simd)]\n+#![allow(dead_code, deprecated)]\n \n use std::simd::f32x4;\n \n-#[simd] #[derive(Copy, Clone)] #[repr(C)] struct LocalSimd(u8, u8);\n+#[repr(simd)] #[derive(Copy, Clone)] #[repr(C)] struct LocalSimd(u8, u8);\n \n extern {\n     fn foo() -> f32x4; //~ ERROR use of SIMD type"}, {"sha": "59c44bff3c79d846d1ded404a09b4c2811884daa", "filename": "src/test/compile-fail/gated-simd.rs", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8b68f58fef4ffb833c123f057638484fa59ded76/src%2Ftest%2Fcompile-fail%2Fgated-simd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b68f58fef4ffb833c123f057638484fa59ded76/src%2Ftest%2Fcompile-fail%2Fgated-simd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgated-simd.rs?ref=8b68f58fef4ffb833c123f057638484fa59ded76", "patch": "@@ -1,14 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#[simd]\n-pub struct i64x2(i64, i64); //~ ERROR: SIMD types are experimental\n-\n-fn main() {}"}, {"sha": "feffe5c0b06c8e09fc10dcd75c68c9cec4ff21f6", "filename": "src/test/compile-fail/simd-binop.rs", "status": "removed", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/8b68f58fef4ffb833c123f057638484fa59ded76/src%2Ftest%2Fcompile-fail%2Fsimd-binop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b68f58fef4ffb833c123f057638484fa59ded76/src%2Ftest%2Fcompile-fail%2Fsimd-binop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsimd-binop.rs?ref=8b68f58fef4ffb833c123f057638484fa59ded76", "patch": "@@ -1,37 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// ignore-tidy-linelength\n-\n-#![feature(core)]\n-\n-use std::simd::f32x4;\n-\n-fn main() {\n-\n-    let _ = f32x4(0.0, 0.0, 0.0, 0.0) == f32x4(0.0, 0.0, 0.0, 0.0);\n-    //~^ ERROR binary comparison operation `==` not supported for floating point SIMD vector `core::simd::f32x4`\n-\n-    let _ = f32x4(0.0, 0.0, 0.0, 0.0) != f32x4(0.0, 0.0, 0.0, 0.0);\n-    //~^ ERROR binary comparison operation `!=` not supported for floating point SIMD vector `core::simd::f32x4`\n-\n-    let _ = f32x4(0.0, 0.0, 0.0, 0.0) < f32x4(0.0, 0.0, 0.0, 0.0);\n-    //~^ ERROR binary comparison operation `<` not supported for floating point SIMD vector `core::simd::f32x4`\n-\n-    let _ = f32x4(0.0, 0.0, 0.0, 0.0) <= f32x4(0.0, 0.0, 0.0, 0.0);\n-    //~^ ERROR binary comparison operation `<=` not supported for floating point SIMD vector `core::simd::f32x4`\n-\n-    let _ = f32x4(0.0, 0.0, 0.0, 0.0) >= f32x4(0.0, 0.0, 0.0, 0.0);\n-    //~^ ERROR binary comparison operation `>=` not supported for floating point SIMD vector `core::simd::f32x4`\n-\n-    let _ = f32x4(0.0, 0.0, 0.0, 0.0) > f32x4(0.0, 0.0, 0.0, 0.0);\n-    //~^ ERROR binary comparison operation `>` not supported for floating point SIMD vector `core::simd::f32x4`\n-\n-}"}, {"sha": "cde63aa0cd1641b9f81a08c7a3e612f838c705c7", "filename": "src/test/compile-fail/simd-type.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3e500673cc540828f9ec609f83d07f4e1c271de0/src%2Ftest%2Fcompile-fail%2Fsimd-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e500673cc540828f9ec609f83d07f4e1c271de0/src%2Ftest%2Fcompile-fail%2Fsimd-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsimd-type.rs?ref=3e500673cc540828f9ec609f83d07f4e1c271de0", "patch": "@@ -8,18 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(simd)]\n+#![feature(repr_simd)]\n \n-#[simd]\n-struct vec4<T>(T, T, T, T); //~ ERROR SIMD vector cannot be generic\n-\n-#[simd]\n+#[repr(simd)]\n struct empty; //~ ERROR SIMD vector cannot be empty\n \n-#[simd]\n+#[repr(simd)]\n struct i64f64(i64, f64); //~ ERROR SIMD vector should be homogeneous\n \n-#[simd]\n+#[repr(simd)]\n struct int4(isize, isize, isize, isize); //~ ERROR SIMD vector element type should be machine type\n \n fn main() {}"}, {"sha": "a3bce00ee07cc1f9c1b5287152c08ef6587b7500", "filename": "src/test/run-fail/overflowing-simd-lsh-1.rs", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/8b68f58fef4ffb833c123f057638484fa59ded76/src%2Ftest%2Frun-fail%2Foverflowing-simd-lsh-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b68f58fef4ffb833c123f057638484fa59ded76/src%2Ftest%2Frun-fail%2Foverflowing-simd-lsh-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Foverflowing-simd-lsh-1.rs?ref=8b68f58fef4ffb833c123f057638484fa59ded76", "patch": "@@ -1,23 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// error-pattern:thread '<main>' panicked at 'shift operation overflowed'\n-// compile-flags: -C debug-assertions\n-\n-#![feature(core_simd)]\n-\n-use std::simd::i32x4;\n-\n-// (Work around constant-evaluation)\n-fn id<T>(x: T) -> T { x }\n-\n-fn main() {\n-    let _x = i32x4(1, 0, 0, 0) << id(i32x4(32, 0, 0, 0));\n-}"}, {"sha": "e119bd03c888419f1922dee450b40b1151c7a3a5", "filename": "src/test/run-fail/overflowing-simd-lsh-2.rs", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/8b68f58fef4ffb833c123f057638484fa59ded76/src%2Ftest%2Frun-fail%2Foverflowing-simd-lsh-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b68f58fef4ffb833c123f057638484fa59ded76/src%2Ftest%2Frun-fail%2Foverflowing-simd-lsh-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Foverflowing-simd-lsh-2.rs?ref=8b68f58fef4ffb833c123f057638484fa59ded76", "patch": "@@ -1,23 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// error-pattern:thread '<main>' panicked at 'shift operation overflowed'\n-// compile-flags: -C debug-assertions\n-\n-#![feature(core_simd)]\n-\n-use std::simd::i32x4;\n-\n-// (Work around constant-evaluation)\n-fn id<T>(x: T) -> T { x }\n-\n-fn main() {\n-    let _x = i32x4(1, 0, 0, 0) << id(i32x4(-1, 0, 0, 0));\n-}"}, {"sha": "4fb7fa958f041039355aa010d689dfc3331386c4", "filename": "src/test/run-fail/overflowing-simd-lsh-3.rs", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/8b68f58fef4ffb833c123f057638484fa59ded76/src%2Ftest%2Frun-fail%2Foverflowing-simd-lsh-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b68f58fef4ffb833c123f057638484fa59ded76/src%2Ftest%2Frun-fail%2Foverflowing-simd-lsh-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Foverflowing-simd-lsh-3.rs?ref=8b68f58fef4ffb833c123f057638484fa59ded76", "patch": "@@ -1,23 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// error-pattern:thread '<main>' panicked at 'shift operation overflowed'\n-// compile-flags: -C debug-assertions\n-\n-#![feature(core_simd)]\n-\n-use std::simd::u64x2;\n-\n-// (Work around constant-evaluation)\n-fn id<T>(x: T) -> T { x }\n-\n-fn main() {\n-    let _x = u64x2(1, 0) << id(u64x2(64, 0));\n-}"}, {"sha": "2fc177ced9ddb9ce08cca217e698fc2f1fd39df2", "filename": "src/test/run-fail/overflowing-simd-lsh-4.rs", "status": "removed", "additions": 0, "deletions": 49, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/8b68f58fef4ffb833c123f057638484fa59ded76/src%2Ftest%2Frun-fail%2Foverflowing-simd-lsh-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b68f58fef4ffb833c123f057638484fa59ded76/src%2Ftest%2Frun-fail%2Foverflowing-simd-lsh-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Foverflowing-simd-lsh-4.rs?ref=8b68f58fef4ffb833c123f057638484fa59ded76", "patch": "@@ -1,49 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// error-pattern:thread '<main>' panicked at 'shift operation overflowed'\n-// compile-flags: -C debug-assertions\n-\n-// This function is checking that our automatic truncation does not\n-// sidestep the overflow checking.\n-\n-#![feature(core_simd)]\n-\n-use std::simd::i8x16;\n-\n-fn eq_i8x16(i8x16(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15): i8x16,\n-            i8x16(y0, y1, y2, y3, y4, y5, y6, y7, y8, y9, y10, y11, y12, y13, y14, y15): i8x16)\n-            -> bool\n-{\n-    (x0 == y0) && (x1 == y1) && (x2 == y2) && (x3 == y3)\n-        && (x4 == y4) && (x5 == y5) && (x6 == y6) && (x7 == y7)\n-        && (x8 == y8) && (x9 == y9) && (x10 == y10) && (x11 == y11)\n-        && (x12 == y12) && (x13 == y13) && (x14 == y14) && (x15 == y15)\n-}\n-\n-// (Work around constant-evaluation)\n-fn id<T>(x: T) -> T { x }\n-\n-fn main() {\n-    // this signals overflow when checking is on\n-    let x = i8x16(1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)\n-        << id(i8x16(17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0));\n-\n-    // ... but when checking is off, the fallback will truncate the\n-    // input to its lower three bits (= 1). Note that this is *not*\n-    // the behavior of the x86 processor for 8- and 16-bit types,\n-    // but it is necessary to avoid undefined behavior from LLVM.\n-    //\n-    // We check that here, by ensuring the result has only been\n-    // shifted by one place; if overflow checking is turned off, then\n-    // this assertion will pass (and the compiletest driver will\n-    // report that the test did not produce the error expected above).\n-    assert!(eq_i8x16(x, i8x16(2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)));\n-}"}, {"sha": "dffd627a0849f3f68019491eb48a947b722ab27b", "filename": "src/test/run-fail/overflowing-simd-rsh-1.rs", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/8b68f58fef4ffb833c123f057638484fa59ded76/src%2Ftest%2Frun-fail%2Foverflowing-simd-rsh-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b68f58fef4ffb833c123f057638484fa59ded76/src%2Ftest%2Frun-fail%2Foverflowing-simd-rsh-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Foverflowing-simd-rsh-1.rs?ref=8b68f58fef4ffb833c123f057638484fa59ded76", "patch": "@@ -1,23 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// error-pattern:thread '<main>' panicked at 'shift operation overflowed'\n-// compile-flags: -C debug-assertions\n-\n-#![feature(core_simd)]\n-\n-use std::simd::i32x4;\n-\n-// (Work around constant-evaluation)\n-fn id<T>(x: T) -> T { x }\n-\n-fn main() {\n-    let _x = i32x4(-1, 0, 0, 0) >> id(i32x4(32, 0, 0, 0));\n-}"}, {"sha": "2852e147f837d5874e87823ece4627f4954e313c", "filename": "src/test/run-fail/overflowing-simd-rsh-2.rs", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/8b68f58fef4ffb833c123f057638484fa59ded76/src%2Ftest%2Frun-fail%2Foverflowing-simd-rsh-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b68f58fef4ffb833c123f057638484fa59ded76/src%2Ftest%2Frun-fail%2Foverflowing-simd-rsh-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Foverflowing-simd-rsh-2.rs?ref=8b68f58fef4ffb833c123f057638484fa59ded76", "patch": "@@ -1,23 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// error-pattern:thread '<main>' panicked at 'shift operation overflowed'\n-// compile-flags: -C debug-assertions\n-\n-#![feature(core_simd)]\n-\n-use std::simd::i32x4;\n-\n-// (Work around constant-evaluation)\n-fn id<T>(x: T) -> T { x }\n-\n-fn main() {\n-    let _x = i32x4(0, 0, 0, -1) >> id(i32x4(0, 0, 0, -1));\n-}"}, {"sha": "057eaa3f91aa0b19075f707c3ae7435478573d1f", "filename": "src/test/run-fail/overflowing-simd-rsh-3.rs", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/8b68f58fef4ffb833c123f057638484fa59ded76/src%2Ftest%2Frun-fail%2Foverflowing-simd-rsh-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b68f58fef4ffb833c123f057638484fa59ded76/src%2Ftest%2Frun-fail%2Foverflowing-simd-rsh-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Foverflowing-simd-rsh-3.rs?ref=8b68f58fef4ffb833c123f057638484fa59ded76", "patch": "@@ -1,23 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// error-pattern:thread '<main>' panicked at 'shift operation overflowed'\n-// compile-flags: -C debug-assertions\n-\n-#![feature(core_simd)]\n-\n-use std::simd::i64x2;\n-\n-// (Work around constant-evaluation)\n-fn id<T>(x: T) -> T { x }\n-\n-fn main() {\n-    let _x = i64x2(0, -1) >> id(i64x2(0, 64));\n-}"}, {"sha": "a850fff691917b9211bfa17b5ad63390a03a1ef1", "filename": "src/test/run-fail/overflowing-simd-rsh-4.rs", "status": "removed", "additions": 0, "deletions": 49, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/8b68f58fef4ffb833c123f057638484fa59ded76/src%2Ftest%2Frun-fail%2Foverflowing-simd-rsh-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b68f58fef4ffb833c123f057638484fa59ded76/src%2Ftest%2Frun-fail%2Foverflowing-simd-rsh-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Foverflowing-simd-rsh-4.rs?ref=8b68f58fef4ffb833c123f057638484fa59ded76", "patch": "@@ -1,49 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// error-pattern:thread '<main>' panicked at 'shift operation overflowed'\n-// compile-flags: -C debug-assertions\n-\n-// This function is checking that our (type-based) automatic\n-// truncation does not sidestep the overflow checking.\n-\n-#![feature(core_simd)]\n-\n-use std::simd::i8x16;\n-\n-fn eq_i8x16(i8x16(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15): i8x16,\n-            i8x16(y0, y1, y2, y3, y4, y5, y6, y7, y8, y9, y10, y11, y12, y13, y14, y15): i8x16)\n-            -> bool\n-{\n-    (x0 == y0) && (x1 == y1) && (x2 == y2) && (x3 == y3)\n-        && (x4 == y4) && (x5 == y5) && (x6 == y6) && (x7 == y7)\n-        && (x8 == y8) && (x9 == y9) && (x10 == y10) && (x11 == y11)\n-        && (x12 == y12) && (x13 == y13) && (x14 == y14) && (x15 == y15)\n-}\n-\n-// (Work around constant-evaluation)\n-fn id<T>(x: T) -> T { x }\n-\n-fn main() {\n-    // this signals overflow when checking is on\n-    let x = i8x16(2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)\n-        >> id(i8x16(17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0));\n-\n-    // ... but when checking is off, the fallback will truncate the\n-    // input to its lower three bits (= 1). Note that this is *not*\n-    // the behavior of the x86 processor for 8- and 16-bit types,\n-    // but it is necessary to avoid undefined behavior from LLVM.\n-    //\n-    // We check that here, by ensuring the result is not zero; if\n-    // overflow checking is turned off, then this assertion will pass\n-    // (and the compiletest driver will report that the test did not\n-    // produce the error expected above).\n-    assert!(eq_i8x16(x, i8x16(1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)));\n-}"}, {"sha": "c0c4b1e7f3f312e4516c38d1e2fea8368eedf4c1", "filename": "src/test/run-make/simd-ffi/simd.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3e500673cc540828f9ec609f83d07f4e1c271de0/src%2Ftest%2Frun-make%2Fsimd-ffi%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e500673cc540828f9ec609f83d07f4e1c271de0/src%2Ftest%2Frun-make%2Fsimd-ffi%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsimd-ffi%2Fsimd.rs?ref=3e500673cc540828f9ec609f83d07f4e1c271de0", "patch": "@@ -15,12 +15,12 @@\n #![feature(no_core)]\n #![no_core]\n \n-#![feature(simd, simd_ffi, link_llvm_intrinsics, lang_items)]\n+#![feature(repr_simd, simd_ffi, link_llvm_intrinsics, lang_items)]\n \n \n #[repr(C)]\n #[derive(Copy)]\n-#[simd]\n+#[repr(simd)]\n pub struct f32x4(f32, f32, f32, f32);\n \n \n@@ -35,7 +35,7 @@ pub fn foo(x: f32x4) -> f32x4 {\n \n #[repr(C)]\n #[derive(Copy)]\n-#[simd]\n+#[repr(simd)]\n pub struct i32x4(i32, i32, i32, i32);\n \n "}, {"sha": "c786064ba01ae4c9f2c5ecba52beeea9f6f95f3b", "filename": "src/test/run-pass/issue-17170.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e500673cc540828f9ec609f83d07f4e1c271de0/src%2Ftest%2Frun-pass%2Fissue-17170.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e500673cc540828f9ec609f83d07f4e1c271de0/src%2Ftest%2Frun-pass%2Fissue-17170.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-17170.rs?ref=3e500673cc540828f9ec609f83d07f4e1c271de0", "patch": "@@ -8,9 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(simd)]\n+#![feature(repr_simd)]\n \n-#[simd]\n+#[repr(simd)]\n struct T(f64, f64, f64);\n \n static X: T = T(0.0, 0.0, 0.0);"}, {"sha": "a8abbda32bdfc23a24915783aa2088c6212a04c7", "filename": "src/test/run-pass/issue-23037.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8b68f58fef4ffb833c123f057638484fa59ded76/src%2Ftest%2Frun-pass%2Fissue-23037.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b68f58fef4ffb833c123f057638484fa59ded76/src%2Ftest%2Frun-pass%2Fissue-23037.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-23037.rs?ref=8b68f58fef4ffb833c123f057638484fa59ded76", "patch": "@@ -1,19 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(core_simd)]\n-\n-use std::simd::i32x4;\n-fn main() {\n-    let foo = i32x4(1,2,3,4);\n-    let bar = i32x4(40,30,20,10);\n-    let baz = foo + bar;\n-    assert!(baz.0 == 41 && baz.1 == 32 && baz.2 == 23 && baz.3 == 14);\n-}"}, {"sha": "f56c3fefbe8f35078bcafbfcb6581db40451ec8c", "filename": "src/test/run-pass/issue-24258.rs", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/8b68f58fef4ffb833c123f057638484fa59ded76/src%2Ftest%2Frun-pass%2Fissue-24258.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b68f58fef4ffb833c123f057638484fa59ded76/src%2Ftest%2Frun-pass%2Fissue-24258.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-24258.rs?ref=8b68f58fef4ffb833c123f057638484fa59ded76", "patch": "@@ -1,26 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// compile-flags: -C debug-assertions\n-\n-#![feature(core_simd)]\n-\n-use std::simd::u32x4;\n-\n-// (Work around constant-evaluation)\n-fn id<T>(x: T) -> T { x }\n-\n-fn eq_u32x4(u32x4(x0, x1, x2, x3): u32x4, u32x4(y0, y1, y2, y3): u32x4) -> bool {\n-    (x0 == y0) && (x1 == y1) && (x2 == y2) && (x3 == y3)\n-}\n-\n-fn main() {\n-    assert!(eq_u32x4(u32x4(1, 1, 1, 1) << id(u32x4(1, 1, 1, 1)), u32x4(2, 2, 2, 2)));\n-}"}, {"sha": "4f5119f6a84e928e9a4b4a43aa2f95e3a1fbb0e3", "filename": "src/test/run-pass/simd-binop.rs", "status": "removed", "additions": 0, "deletions": 76, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/8b68f58fef4ffb833c123f057638484fa59ded76/src%2Ftest%2Frun-pass%2Fsimd-binop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b68f58fef4ffb833c123f057638484fa59ded76/src%2Ftest%2Frun-pass%2Fsimd-binop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsimd-binop.rs?ref=8b68f58fef4ffb833c123f057638484fa59ded76", "patch": "@@ -1,76 +0,0 @@\n-// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-#![feature(core_simd)]\n-\n-use std::simd::{i32x4, f32x4, u32x4};\n-\n-fn eq_u32x4(u32x4(x0, x1, x2, x3): u32x4, u32x4(y0, y1, y2, y3): u32x4) -> bool {\n-    (x0 == y0) && (x1 == y1) && (x2 == y2) && (x3 == y3)\n-}\n-\n-fn eq_f32x4(f32x4(x0, x1, x2, x3): f32x4, f32x4(y0, y1, y2, y3): f32x4) -> bool {\n-    (x0 == y0) && (x1 == y1) && (x2 == y2) && (x3 == y3)\n-}\n-\n-fn eq_i32x4(i32x4(x0, x1, x2, x3): i32x4, i32x4(y0, y1, y2, y3): i32x4) -> bool {\n-    (x0 == y0) && (x1 == y1) && (x2 == y2) && (x3 == y3)\n-}\n-\n-pub fn main() {\n-    // arithmetic operators\n-\n-    assert!(eq_u32x4(u32x4(1, 2, 3, 4) + u32x4(4, 3, 2, 1), u32x4(5, 5, 5, 5)));\n-    assert!(eq_u32x4(u32x4(4, 5, 6, 7) - u32x4(4, 3, 2, 1), u32x4(0, 2, 4, 6)));\n-    assert!(eq_u32x4(u32x4(1, 2, 3, 4) * u32x4(4, 3, 2, 1), u32x4(4, 6, 6, 4)));\n-    assert!(eq_u32x4(u32x4(1, 2, 3, 4) / u32x4(4, 3, 2, 1), u32x4(0, 0, 1, 4)));\n-    assert!(eq_u32x4(u32x4(1, 2, 3, 4) & u32x4(4, 3, 2, 1), u32x4(0, 2, 2, 0)));\n-    assert!(eq_u32x4(u32x4(1, 2, 3, 4) | u32x4(4, 3, 2, 1), u32x4(5, 3, 3, 5)));\n-    assert!(eq_u32x4(u32x4(1, 2, 3, 4) ^ u32x4(4, 3, 2, 1), u32x4(5, 1, 1, 5)));\n-    assert!(eq_u32x4(u32x4(1, 2, 3, 4) << u32x4(4, 3, 2, 1), u32x4(16, 16, 12, 8)));\n-    assert!(eq_u32x4(u32x4(1, 2, 3, 4) >> u32x4(4, 3, 2, 1), u32x4(0, 0, 0, 2)));\n-\n-    assert!(eq_i32x4(i32x4(1, 2, 3, 4) + i32x4(4, 3, 2, 1), i32x4(5, 5, 5, 5)));\n-    assert!(eq_i32x4(i32x4(1, 2, 3, 4) - i32x4(4, 3, 2, 1), i32x4(-3, -1, 1, 3)));\n-    assert!(eq_i32x4(i32x4(1, 2, 3, 4) * i32x4(4, 3, 2, 1), i32x4(4, 6, 6, 4)));\n-    assert!(eq_i32x4(i32x4(1, 2, 3, 4) / i32x4(4, 3, 2, 1), i32x4(0, 0, 1, 4)));\n-    assert!(eq_i32x4(i32x4(1, 2, 3, 4) & i32x4(4, 3, 2, 1), i32x4(0, 2, 2, 0)));\n-    assert!(eq_i32x4(i32x4(1, 2, 3, 4) | i32x4(4, 3, 2, 1), i32x4(5, 3, 3, 5)));\n-    assert!(eq_i32x4(i32x4(1, 2, 3, 4) ^ i32x4(4, 3, 2, 1), i32x4(5, 1, 1, 5)));\n-    assert!(eq_i32x4(i32x4(1, 2, 3, 4) << i32x4(4, 3, 2, 1), i32x4(16, 16, 12, 8)));\n-    assert!(eq_i32x4(i32x4(1, 2, 3, 4) >> i32x4(4, 3, 2, 1), i32x4(0, 0, 0, 2)));\n-\n-    assert!(eq_f32x4(f32x4(1.0, 2.0, 3.0, 4.0) + f32x4(4.0, 3.0, 2.0, 1.0),\n-            f32x4(5.0, 5.0, 5.0, 5.0)));\n-    assert!(eq_f32x4(f32x4(1.0, 2.0, 3.0, 4.0) - f32x4(4.0, 3.0, 2.0, 1.0),\n-            f32x4(-3.0, -1.0, 1.0, 3.0)));\n-    assert!(eq_f32x4(f32x4(1.0, 2.0, 3.0, 4.0) * f32x4(4.0, 3.0, 2.0, 1.0),\n-            f32x4(4.0, 6.0, 6.0, 4.0)));\n-    assert!(eq_f32x4(f32x4(1.0, 2.0, 3.0, 4.0) / f32x4(4.0, 4.0, 2.0, 1.0),\n-            f32x4(0.25, 0.5, 1.5, 4.0)));\n-\n-    // comparison operators\n-\n-    // check !0/-1 to ensure operators are using the correct signedness.\n-    assert!(eq_u32x4(u32x4(1, 2, 3, !0) == u32x4(3, 2, 1, 0), u32x4(0, !0, 0, 0)));\n-    assert!(eq_u32x4(u32x4(1, 2, 3, !0) != u32x4(3, 2, 1, 0), u32x4(!0, 0, !0, !0)));\n-    assert!(eq_u32x4(u32x4(1, 2, 3, !0) < u32x4(3, 2, 1, 0), u32x4(!0, 0, 0, 0)));\n-    assert!(eq_u32x4(u32x4(1, 2, 3, !0) <= u32x4(3, 2, 1, 0), u32x4(!0, !0, 0, 0)));\n-    assert!(eq_u32x4(u32x4(1, 2, 3, !0) >= u32x4(3, 2, 1, 0), u32x4(0, !0, !0, !0)));\n-    assert!(eq_u32x4(u32x4(1, 2, 3, !0) > u32x4(3, 2, 1, 0), u32x4(0, 0, !0, !0)));\n-\n-    assert!(eq_i32x4(i32x4(1, 2, 3, -1) == i32x4(3, 2, 1, 0), i32x4(0, !0, 0, 0)));\n-    assert!(eq_i32x4(i32x4(1, 2, 3, -1) != i32x4(3, 2, 1, 0), i32x4(!0, 0, !0, !0)));\n-    assert!(eq_i32x4(i32x4(1, 2, 3, -1) < i32x4(3, 2, 1, 0), i32x4(!0, 0, 0, !0)));\n-    assert!(eq_i32x4(i32x4(1, 2, 3, -1) <= i32x4(3, 2, 1, 0), i32x4(!0, !0, 0, !0)));\n-    assert!(eq_i32x4(i32x4(1, 2, 3, -1) >= i32x4(3, 2, 1, 0), i32x4(0, !0, !0, 0)));\n-    assert!(eq_i32x4(i32x4(1, 2, 3, -1) > i32x4(3, 2, 1, 0), i32x4(0, 0, !0, 0)));\n-}"}, {"sha": "ef40a6ce96bd465df56a262e3aa3bc0d648d067b", "filename": "src/test/run-pass/simd-generics.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3e500673cc540828f9ec609f83d07f4e1c271de0/src%2Ftest%2Frun-pass%2Fsimd-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e500673cc540828f9ec609f83d07f4e1c271de0/src%2Ftest%2Frun-pass%2Fsimd-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsimd-generics.rs?ref=3e500673cc540828f9ec609f83d07f4e1c271de0", "patch": "@@ -10,14 +10,18 @@\n \n \n \n-#![feature(simd)]\n+#![feature(repr_simd, platform_intrinsics)]\n \n use std::ops;\n \n-#[simd]\n+#[repr(simd)]\n #[derive(Copy, Clone)]\n struct f32x4(f32, f32, f32, f32);\n \n+extern \"platform-intrinsic\" {\n+    fn simd_add<T>(x: T, y: T) -> T;\n+}\n+\n fn add<T: ops::Add<Output=T>>(lhs: T, rhs: T) -> T {\n     lhs + rhs\n }\n@@ -26,7 +30,7 @@ impl ops::Add for f32x4 {\n     type Output = f32x4;\n \n     fn add(self, rhs: f32x4) -> f32x4 {\n-        self + rhs\n+        unsafe {simd_add(self, rhs)}\n     }\n }\n "}, {"sha": "fee4637f07f2114f9ba2119ad60f5e48254b9d5f", "filename": "src/test/run-pass/simd-shift-near-oflo.rs", "status": "removed", "additions": 0, "deletions": 154, "changes": 154, "blob_url": "https://github.com/rust-lang/rust/blob/8b68f58fef4ffb833c123f057638484fa59ded76/src%2Ftest%2Frun-pass%2Fsimd-shift-near-oflo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b68f58fef4ffb833c123f057638484fa59ded76/src%2Ftest%2Frun-pass%2Fsimd-shift-near-oflo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsimd-shift-near-oflo.rs?ref=8b68f58fef4ffb833c123f057638484fa59ded76", "patch": "@@ -1,154 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// compile-flags: -C debug-assertions\n-\n-// Check that we do *not* overflow on a number of edge cases.\n-// (compare with test/run-fail/overflowing-{lsh,rsh}*.rs)\n-\n-#![feature(core_simd)]\n-\n-use std::simd::{i8x16, i16x8, i32x4, i64x2, u8x16, u16x8, u32x4, u64x2};\n-\n-// (Work around constant-evaluation)\n-fn id<T>(x: T) -> T { x }\n-\n-fn single_i8x16(x: i8) -> i8x16 { i8x16(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x) }\n-fn single_u8x16(x: u8) -> u8x16 { u8x16(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x) }\n-fn single_i16x8(x: i16) -> i16x8 { i16x8(0, 0, 0, 0, 0, 0, 0, x) }\n-fn single_u16x8(x: u16) -> u16x8 { u16x8(0, 0, 0, 0, 0, 0, 0, x) }\n-fn single_i32x4(x: i32) -> i32x4 { i32x4(0, 0, 0, x) }\n-fn single_u32x4(x: u32) -> u32x4 { u32x4(0, 0, 0, x) }\n-fn single_i64x2(x: i64) -> i64x2 { i64x2(0, x) }\n-fn single_u64x2(x: u64) -> u64x2 { u64x2(0, x) }\n-\n-fn eq_i8x16(i8x16(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15): i8x16,\n-            i8x16(y0, y1, y2, y3, y4, y5, y6, y7, y8, y9, y10, y11, y12, y13, y14, y15): i8x16)\n-            -> bool {\n-    (x0 == y0) && (x1 == y1) && (x2 == y2) && (x3 == y3)\n-        && (x4 == y4) && (x5 == y5) && (x6 == y6) && (x7 == y7)\n-        && (x8 == y8) && (x9 == y9) && (x10 == y10) && (x11 == y11)\n-        && (x12 == y12) && (x13 == y13) && (x14 == y14) && (x15 == y15)\n-}\n-fn eq_u8x16(u8x16(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15): u8x16,\n-            u8x16(y0, y1, y2, y3, y4, y5, y6, y7, y8, y9, y10, y11, y12, y13, y14, y15): u8x16)\n-            -> bool {\n-    (x0 == y0) && (x1 == y1) && (x2 == y2) && (x3 == y3)\n-        && (x4 == y4) && (x5 == y5) && (x6 == y6) && (x7 == y7)\n-        && (x8 == y8) && (x9 == y9) && (x10 == y10) && (x11 == y11)\n-        && (x12 == y12) && (x13 == y13) && (x14 == y14) && (x15 == y15)\n-}\n-fn eq_i16x8(i16x8(x0, x1, x2, x3, x4, x5, x6, x7): i16x8,\n-            i16x8(y0, y1, y2, y3, y4, y5, y6, y7): i16x8) -> bool {\n-    (x0 == y0) && (x1 == y1) && (x2 == y2) && (x3 == y3)\n-        && (x4 == y4) && (x5 == y5) && (x6 == y6) && (x7 == y7)\n-}\n-fn eq_u16x8(u16x8(x0, x1, x2, x3, x4, x5, x6, x7): u16x8,\n-            u16x8(y0, y1, y2, y3, y4, y5, y6, y7): u16x8) -> bool {\n-    (x0 == y0) && (x1 == y1) && (x2 == y2) && (x3 == y3)\n-        && (x4 == y4) && (x5 == y5) && (x6 == y6) && (x7 == y7)\n-}\n-fn eq_i32x4(i32x4(x0, x1, x2, x3): i32x4, i32x4(y0, y1, y2, y3): i32x4) -> bool {\n-    (x0 == y0) && (x1 == y1) && (x2 == y2) && (x3 == y3)\n-}\n-fn eq_u32x4(u32x4(x0, x1, x2, x3): u32x4, u32x4(y0, y1, y2, y3): u32x4) -> bool {\n-    (x0 == y0) && (x1 == y1) && (x2 == y2) && (x3 == y3)\n-}\n-fn eq_i64x2(i64x2(x0, x1): i64x2, i64x2(y0, y1): i64x2) -> bool {\n-    (x0 == y0) && (x1 == y1)\n-}\n-fn eq_u64x2(u64x2(x0, x1): u64x2, u64x2(y0, y1): u64x2) -> bool {\n-    (x0 == y0) && (x1 == y1)\n-}\n-\n-fn main() {\n-    test_left_shift();\n-    test_right_shift();\n-}\n-\n-fn test_left_shift() {\n-    // negative rhs can panic, but values in [0,N-1] are okay for iN\n-\n-    macro_rules! tests {\n-        ($single:ident, $eq:ident, $max_rhs:expr, $expect:expr) => { {\n-            let x = $single(1) << id($single(0));\n-            assert!($eq(x, $single(1)));\n-            let x = $single(1) << id($single($max_rhs));\n-            assert!($eq(x, $single($expect)));\n-            // high-order bits on LHS are silently discarded without panic.\n-            let x = $single(3) << id($single($max_rhs));\n-            assert!($eq(x, $single($expect)));\n-        } }\n-    }\n-\n-    let x = single_i8x16(1) << id(single_i8x16(0));\n-    assert!(eq_i8x16(x, single_i8x16(1)));\n-    let x = single_u8x16(1) << id(single_u8x16(0));\n-    assert!(eq_u8x16(x, single_u8x16(1)));\n-    let x = single_i8x16(1) << id(single_i8x16(7));\n-    assert!(eq_i8x16(x, single_i8x16(std::i8::MIN)));\n-    let x = single_u8x16(1) << id(single_u8x16(7));\n-    assert!(eq_u8x16(x, single_u8x16(0x80)));\n-    // high-order bits on LHS are silently discarded without panic.\n-    let x = single_i8x16(3) << id(single_i8x16(7));\n-    assert!(eq_i8x16(x, single_i8x16(std::i8::MIN)));\n-    let x = single_u8x16(3) << id(single_u8x16(7));\n-    assert!(eq_u8x16(x, single_u8x16(0x80)));\n-\n-    // above is (approximately) expanded from:\n-    tests!(single_i8x16, eq_i8x16, 7, std::i8::MIN);\n-    tests!(single_u8x16, eq_u8x16, 7, 0x80_u8);\n-\n-    tests!(single_i16x8, eq_i16x8, 15, std::i16::MIN);\n-    tests!(single_u16x8, eq_u16x8, 15, 0x8000_u16);\n-\n-    tests!(single_i32x4, eq_i32x4, 31, std::i32::MIN);\n-    tests!(single_u32x4, eq_u32x4, 31, 0x8000_0000_u32);\n-\n-    tests!(single_i64x2, eq_i64x2, 63, std::i64::MIN);\n-    tests!(single_u64x2, eq_u64x2, 63, 0x8000_0000_0000_0000_u64);\n-}\n-\n-fn test_right_shift() {\n-    // negative rhs can panic, but values in [0,N-1] are okay for iN\n-\n-    macro_rules! tests {\n-        ($single_i:ident, $eq_i:ident, $single_u:ident, $eq_u:ident,\n-         $max_rhs:expr, $signbit_i:expr, $highbit_i:expr, $highbit_u:expr) => { {\n-            let x = $single_i(1) >> id($single_i(0));\n-            assert!($eq_i(x, $single_i(1)));\n-            let x = $single_u(1) >> id($single_u(0));\n-            assert!($eq_u(x, $single_u(1)));\n-            let x = $single_u($highbit_i) >> id($single_u($max_rhs-1));\n-            assert!($eq_u(x, $single_u(1)));\n-            let x = $single_u($highbit_u) >> id($single_u($max_rhs));\n-            assert!($eq_u(x, $single_u(1)));\n-            // sign-bit is carried by arithmetic right shift\n-            let x = $single_i($signbit_i) >> id($single_i($max_rhs));\n-            assert!($eq_i(x, $single_i(-1)));\n-            // low-order bits on LHS are silently discarded without panic.\n-            let x = $single_u($highbit_i + 1) >> id($single_u($max_rhs-1));\n-            assert!($eq_u(x, $single_u(1)));\n-            let x = $single_u($highbit_u + 1) >> id($single_u($max_rhs));\n-            assert!($eq_u(x, $single_u(1)));\n-            let x = $single_i($signbit_i + 1) >> id($single_i($max_rhs));\n-            assert!($eq_i(x, $single_i(-1)));\n-        } }\n-    }\n-\n-    tests!(single_i8x16, eq_i8x16, single_u8x16, eq_u8x16,\n-           7, std::i8::MIN, 0x40_u8, 0x80_u8);\n-    tests!(single_i16x8, eq_i16x8, single_u16x8, eq_u16x8,\n-           15, std::i16::MIN, 0x4000_u16, 0x8000_u16);\n-    tests!(single_i32x4, eq_i32x4, single_u32x4, eq_u32x4,\n-           31, std::i32::MIN, 0x4000_0000_u32, 0x8000_0000_u32);\n-    tests!(single_i64x2, eq_i64x2, single_u64x2, eq_u64x2,\n-           63, std::i64::MIN, 0x4000_0000_0000_0000_u64, 0x8000_0000_0000_0000_u64);\n-}"}, {"sha": "b8d7cd8414176964ef23a66f1609a8022cf043f2", "filename": "src/test/run-pass/simd-size-align.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/3e500673cc540828f9ec609f83d07f4e1c271de0/src%2Ftest%2Frun-pass%2Fsimd-size-align.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e500673cc540828f9ec609f83d07f4e1c271de0/src%2Ftest%2Frun-pass%2Fsimd-size-align.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsimd-size-align.rs?ref=3e500673cc540828f9ec609f83d07f4e1c271de0", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n \n-#![feature(simd)]\n+#![feature(repr_simd)]\n #![allow(non_camel_case_types)]\n \n use std::mem;\n@@ -46,26 +46,26 @@ fn main() {\n     check::<f32x8>();\n }\n \n-#[simd] struct u8x2(u8, u8);\n-#[simd] struct u8x3(u8, u8, u8);\n-#[simd] struct u8x4(u8, u8, u8, u8);\n-#[simd] struct u8x5(u8, u8, u8, u8, u8);\n-#[simd] struct u8x6(u8, u8, u8, u8, u8, u8);\n-#[simd] struct u8x7(u8, u8, u8, u8, u8, u8, u8);\n-#[simd] struct u8x8(u8, u8, u8, u8, u8, u8, u8, u8);\n+#[repr(simd)] struct u8x2(u8, u8);\n+#[repr(simd)] struct u8x3(u8, u8, u8);\n+#[repr(simd)] struct u8x4(u8, u8, u8, u8);\n+#[repr(simd)] struct u8x5(u8, u8, u8, u8, u8);\n+#[repr(simd)] struct u8x6(u8, u8, u8, u8, u8, u8);\n+#[repr(simd)] struct u8x7(u8, u8, u8, u8, u8, u8, u8);\n+#[repr(simd)] struct u8x8(u8, u8, u8, u8, u8, u8, u8, u8);\n \n-#[simd] struct i16x2(i16, i16);\n-#[simd] struct i16x3(i16, i16, i16);\n-#[simd] struct i16x4(i16, i16, i16, i16);\n-#[simd] struct i16x5(i16, i16, i16, i16, i16);\n-#[simd] struct i16x6(i16, i16, i16, i16, i16, i16);\n-#[simd] struct i16x7(i16, i16, i16, i16, i16, i16, i16);\n-#[simd] struct i16x8(i16, i16, i16, i16, i16, i16, i16, i16);\n+#[repr(simd)] struct i16x2(i16, i16);\n+#[repr(simd)] struct i16x3(i16, i16, i16);\n+#[repr(simd)] struct i16x4(i16, i16, i16, i16);\n+#[repr(simd)] struct i16x5(i16, i16, i16, i16, i16);\n+#[repr(simd)] struct i16x6(i16, i16, i16, i16, i16, i16);\n+#[repr(simd)] struct i16x7(i16, i16, i16, i16, i16, i16, i16);\n+#[repr(simd)] struct i16x8(i16, i16, i16, i16, i16, i16, i16, i16);\n \n-#[simd] struct f32x2(f32, f32);\n-#[simd] struct f32x3(f32, f32, f32);\n-#[simd] struct f32x4(f32, f32, f32, f32);\n-#[simd] struct f32x5(f32, f32, f32, f32, f32);\n-#[simd] struct f32x6(f32, f32, f32, f32, f32, f32);\n-#[simd] struct f32x7(f32, f32, f32, f32, f32, f32, f32);\n-#[simd] struct f32x8(f32, f32, f32, f32, f32, f32, f32, f32);\n+#[repr(simd)] struct f32x2(f32, f32);\n+#[repr(simd)] struct f32x3(f32, f32, f32);\n+#[repr(simd)] struct f32x4(f32, f32, f32, f32);\n+#[repr(simd)] struct f32x5(f32, f32, f32, f32, f32);\n+#[repr(simd)] struct f32x6(f32, f32, f32, f32, f32, f32);\n+#[repr(simd)] struct f32x7(f32, f32, f32, f32, f32, f32, f32);\n+#[repr(simd)] struct f32x8(f32, f32, f32, f32, f32, f32, f32, f32);"}, {"sha": "2883b80a25b9e39fc73eea490c8ed46c41761a13", "filename": "src/test/run-pass/simd-type.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e500673cc540828f9ec609f83d07f4e1c271de0/src%2Ftest%2Frun-pass%2Fsimd-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e500673cc540828f9ec609f83d07f4e1c271de0/src%2Ftest%2Frun-pass%2Fsimd-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsimd-type.rs?ref=3e500673cc540828f9ec609f83d07f4e1c271de0", "patch": "@@ -11,9 +11,9 @@\n \n // pretty-expanded FIXME #23616\n \n-#![feature(simd)]\n+#![feature(repr_simd)]\n \n-#[simd]\n+#[repr(simd)]\n struct RGBA {\n     r: f32,\n     g: f32,"}]}