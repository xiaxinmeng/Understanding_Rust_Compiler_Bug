{"sha": "f9144d5972aef3e7078b272703bf275691991297", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5MTQ0ZDU5NzJhZWYzZTcwNzhiMjcyNzAzYmYyNzU2OTE5OTEyOTc=", "commit": {"author": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2011-02-27T23:23:16Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-03-02T18:28:14Z"}, "message": "Start generating AST nodes for #fmt", "tree": {"sha": "1a23adab045d6c22ba1ea254a3f3f9a66d0847b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a23adab045d6c22ba1ea254a3f3f9a66d0847b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9144d5972aef3e7078b272703bf275691991297", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9144d5972aef3e7078b272703bf275691991297", "html_url": "https://github.com/rust-lang/rust/commit/f9144d5972aef3e7078b272703bf275691991297", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9144d5972aef3e7078b272703bf275691991297/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1badf9316a174615e9e5c60e6cfd12e4f071d623", "url": "https://api.github.com/repos/rust-lang/rust/commits/1badf9316a174615e9e5c60e6cfd12e4f071d623", "html_url": "https://github.com/rust-lang/rust/commit/1badf9316a174615e9e5c60e6cfd12e4f071d623"}], "stats": {"total": 42, "additions": 34, "deletions": 8}, "files": [{"sha": "38c2ea8cb8970896906377fe95e77e6f73c90f8c", "filename": "src/comp/front/extfmt.rs", "status": "modified", "additions": 34, "deletions": 8, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/f9144d5972aef3e7078b272703bf275691991297/src%2Fcomp%2Ffront%2Fextfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9144d5972aef3e7078b272703bf275691991297/src%2Fcomp%2Ffront%2Fextfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fextfmt.rs?ref=f9144d5972aef3e7078b272703bf275691991297", "patch": "@@ -13,7 +13,7 @@\n  * combinations at the moment.\n  */\n \n-import front.parser;\n+import util.common;\n \n import std._str;\n import std._vec;\n@@ -251,13 +251,39 @@ fn parse_type(str s, uint i, uint lim) -> tup(ty, uint) {\n }\n \n fn pieces_to_expr(vec[piece] pieces, vec[@ast.expr] args) -> @ast.expr {\n-    auto lo = args.(0).span;\n-    auto hi = args.(0).span;\n-    auto strlit = ast.lit_str(\"TODO\");\n-    auto spstrlit = @parser.spanned[ast.lit_](lo, hi, strlit);\n-    auto expr = ast.expr_lit(spstrlit, ast.ann_none);\n-    auto spexpr = @parser.spanned[ast.expr_](lo, hi, expr);\n-    ret spexpr;\n+\n+    fn make_new_str(common.span sp, str s) -> @ast.expr {\n+        auto strlit = ast.lit_str(s);\n+        auto spstrlit = @parser.spanned[ast.lit_](sp, sp, strlit);\n+        auto expr = ast.expr_lit(spstrlit, ast.ann_none);\n+        ret @parser.spanned[ast.expr_](sp, sp, expr);\n+    }\n+\n+    fn make_add_expr(common.span sp,\n+                     @ast.expr lhs, @ast.expr rhs) -> @ast.expr {\n+        auto binexpr = ast.expr_binary(ast.add, lhs, rhs, ast.ann_none);\n+        ret @parser.spanned[ast.expr_](sp, sp, binexpr);\n+    }\n+\n+    auto sp = args.(0).span;\n+    auto n = 0;\n+    auto tmp_expr = make_new_str(sp, \"whatever\");\n+\n+    for (piece p in pieces) {\n+        alt (p) {\n+            case (piece_string(?s)) {\n+                auto s_expr = make_new_str(sp, s);\n+                tmp_expr = make_add_expr(sp, tmp_expr, s_expr);\n+            }\n+            case (piece_conv(?conv)) {\n+            }\n+        }\n+    }\n+\n+    // TODO: Remove this print and return the real expanded AST\n+    log \"dumping expanded ast:\";\n+    log pretty.print_expr(tmp_expr);\n+    ret make_new_str(sp, \"TODO\");\n }\n \n //"}]}