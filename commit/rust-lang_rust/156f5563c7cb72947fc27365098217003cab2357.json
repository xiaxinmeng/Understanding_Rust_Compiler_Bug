{"sha": "156f5563c7cb72947fc27365098217003cab2357", "node_id": "C_kwDOAAsO6NoAKDE1NmY1NTYzYzdjYjcyOTQ3ZmMyNzM2NTA5ODIxNzAwM2NhYjIzNTc", "commit": {"author": {"name": "Urgau", "email": "urgau@numericable.fr", "date": "2023-03-27T18:59:59Z"}, "committer": {"name": "Urgau", "email": "urgau@numericable.fr", "date": "2023-05-10T17:36:01Z"}, "message": "Uplift clippy::drop_copy to rustc", "tree": {"sha": "ab1d7048f472913989b169a4d89ef944c6d222c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab1d7048f472913989b169a4d89ef944c6d222c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/156f5563c7cb72947fc27365098217003cab2357", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/156f5563c7cb72947fc27365098217003cab2357", "html_url": "https://github.com/rust-lang/rust/commit/156f5563c7cb72947fc27365098217003cab2357", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/156f5563c7cb72947fc27365098217003cab2357/comments", "author": {"login": "Urgau", "id": 3616612, "node_id": "MDQ6VXNlcjM2MTY2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3616612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Urgau", "html_url": "https://github.com/Urgau", "followers_url": "https://api.github.com/users/Urgau/followers", "following_url": "https://api.github.com/users/Urgau/following{/other_user}", "gists_url": "https://api.github.com/users/Urgau/gists{/gist_id}", "starred_url": "https://api.github.com/users/Urgau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Urgau/subscriptions", "organizations_url": "https://api.github.com/users/Urgau/orgs", "repos_url": "https://api.github.com/users/Urgau/repos", "events_url": "https://api.github.com/users/Urgau/events{/privacy}", "received_events_url": "https://api.github.com/users/Urgau/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Urgau", "id": 3616612, "node_id": "MDQ6VXNlcjM2MTY2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3616612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Urgau", "html_url": "https://github.com/Urgau", "followers_url": "https://api.github.com/users/Urgau/followers", "following_url": "https://api.github.com/users/Urgau/following{/other_user}", "gists_url": "https://api.github.com/users/Urgau/gists{/gist_id}", "starred_url": "https://api.github.com/users/Urgau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Urgau/subscriptions", "organizations_url": "https://api.github.com/users/Urgau/orgs", "repos_url": "https://api.github.com/users/Urgau/repos", "events_url": "https://api.github.com/users/Urgau/events{/privacy}", "received_events_url": "https://api.github.com/users/Urgau/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d1940d02e2986e161ad31236d67489dfab08ad3", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d1940d02e2986e161ad31236d67489dfab08ad3", "html_url": "https://github.com/rust-lang/rust/commit/3d1940d02e2986e161ad31236d67489dfab08ad3"}], "stats": {"total": 250, "additions": 248, "deletions": 2}, "files": [{"sha": "d52b77776904566f7bcaa614cfccc545b3a26a7d", "filename": "compiler/rustc_lint/messages.ftl", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/156f5563c7cb72947fc27365098217003cab2357/compiler%2Frustc_lint%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/156f5563c7cb72947fc27365098217003cab2357/compiler%2Frustc_lint%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fmessages.ftl?ref=156f5563c7cb72947fc27365098217003cab2357", "patch": "@@ -523,3 +523,6 @@ lint_opaque_hidden_inferred_bound_sugg = add this bound\n \n lint_drop_ref = calls to `std::mem::drop` with a reference instead of an owned value\n     .note = argument has type `{$arg_ty}`\n+\n+lint_drop_copy = calls to `std::mem::drop` with a value that implements `Copy`.\n+    .note = argument has type `{$arg_ty}`"}, {"sha": "9b667a50fe1f6d9d7f1b0665990c3c48cf021260", "filename": "compiler/rustc_lint/src/drop_forget_useless.rs", "status": "modified", "additions": 30, "deletions": 2, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/156f5563c7cb72947fc27365098217003cab2357/compiler%2Frustc_lint%2Fsrc%2Fdrop_forget_useless.rs", "raw_url": "https://github.com/rust-lang/rust/raw/156f5563c7cb72947fc27365098217003cab2357/compiler%2Frustc_lint%2Fsrc%2Fdrop_forget_useless.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fdrop_forget_useless.rs?ref=156f5563c7cb72947fc27365098217003cab2357", "patch": "@@ -1,7 +1,7 @@\n use rustc_hir::{Arm, Expr, ExprKind, Node};\n use rustc_span::sym;\n \n-use crate::{lints::DropRefDiag, LateContext, LateLintPass, LintContext};\n+use crate::{lints::{DropRefDiag, DropCopyDiag}, LateContext, LateLintPass, LintContext};\n \n declare_lint! {\n     /// The `drop_ref` lint checks for calls to `std::mem::drop` with a reference\n@@ -31,7 +31,31 @@ declare_lint! {\n     \"calls to `std::mem::drop` with a reference instead of an owned value\"\n }\n \n-declare_lint_pass!(DropForgetUseless => [DROP_REF]);\n+declare_lint! {\n+    /// The `drop_copy` lint checks for calls to `std::mem::drop` with a value\n+    /// that derives the Copy trait.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust\n+    /// let x: i32 = 42; // i32 implements Copy\n+    /// std::mem::drop(x); // A copy of x is passed to the function, leaving the\n+    ///                    // original unaffected\n+    /// ```\n+    ///\n+    /// {{produces}}\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// Calling `std::mem::drop` [does nothing for types that\n+    /// implement Copy](https://doc.rust-lang.org/std/mem/fn.drop.html), since the\n+    /// value will be copied and moved into the function on invocation.\n+    pub DROP_COPY,\n+    Warn,\n+    \"calls to `std::mem::drop` with a value that implements Copy\"\n+}\n+\n+declare_lint_pass!(DropForgetUseless => [DROP_REF, DROP_COPY]);\n \n impl<'tcx> LateLintPass<'tcx> for DropForgetUseless {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) {\n@@ -41,11 +65,15 @@ impl<'tcx> LateLintPass<'tcx> for DropForgetUseless {\n             && let Some(fn_name) = cx.tcx.get_diagnostic_name(def_id)\n         {\n             let arg_ty = cx.typeck_results().expr_ty(arg);\n+            let is_copy = arg_ty.is_copy_modulo_regions(cx.tcx, cx.param_env);\n             let drop_is_single_call_in_arm = is_single_call_in_arm(cx, arg, expr);\n             match fn_name {\n                 sym::mem_drop if arg_ty.is_ref() && !drop_is_single_call_in_arm => {\n                     cx.emit_spanned_lint(DROP_REF, expr.span, DropRefDiag { arg_ty, note: arg.span });\n                 },\n+                sym::mem_drop if is_copy && !drop_is_single_call_in_arm => {\n+                    cx.emit_spanned_lint(DROP_COPY, expr.span, DropCopyDiag { arg_ty, note: arg.span });\n+                }\n                 _ => return,\n             };\n         }"}, {"sha": "a91e20eb21856153392b0b88378f5e191d038e03", "filename": "compiler/rustc_lint/src/lints.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/156f5563c7cb72947fc27365098217003cab2357/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/156f5563c7cb72947fc27365098217003cab2357/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flints.rs?ref=156f5563c7cb72947fc27365098217003cab2357", "patch": "@@ -671,6 +671,14 @@ pub struct DropRefDiag<'a> {\n     pub note: Span,\n }\n \n+#[derive(LintDiagnostic)]\n+#[diag(lint_drop_copy)]\n+pub struct DropCopyDiag<'a> {\n+    pub arg_ty: Ty<'a>,\n+    #[note]\n+    pub note: Span,\n+}\n+\n // hidden_unicode_codepoints.rs\n #[derive(LintDiagnostic)]\n #[diag(lint_hidden_unicode_codepoints)]"}, {"sha": "0adcd34505f0b93a95029852e91a846d1331cac2", "filename": "tests/ui/lint/drop_copy.rs", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/156f5563c7cb72947fc27365098217003cab2357/tests%2Fui%2Flint%2Fdrop_copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/156f5563c7cb72947fc27365098217003cab2357/tests%2Fui%2Flint%2Fdrop_copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fdrop_copy.rs?ref=156f5563c7cb72947fc27365098217003cab2357", "patch": "@@ -0,0 +1,79 @@\n+// check-pass\n+\n+#![warn(drop_copy)]\n+\n+use std::mem::drop;\n+use std::vec::Vec;\n+\n+#[derive(Copy, Clone)]\n+struct SomeStruct;\n+\n+struct AnotherStruct {\n+    x: u8,\n+    y: u8,\n+    z: Vec<u8>,\n+}\n+\n+impl Clone for AnotherStruct {\n+    fn clone(&self) -> AnotherStruct {\n+        AnotherStruct {\n+            x: self.x,\n+            y: self.y,\n+            z: self.z.clone(),\n+        }\n+    }\n+}\n+\n+fn main() {\n+    let s1 = SomeStruct {};\n+    let s2 = s1;\n+    let s3 = &s1;\n+    let mut s4 = s1;\n+    let ref s5 = s1;\n+\n+    drop(s1); //~ WARN calls to `std::mem::drop`\n+    drop(s2); //~ WARN calls to `std::mem::drop`\n+    drop(s3); //~ WARN calls to `std::mem::drop`\n+    drop(s4); //~ WARN calls to `std::mem::drop`\n+    drop(s5); //~ WARN calls to `std::mem::drop`\n+\n+    let a1 = AnotherStruct {\n+        x: 255,\n+        y: 0,\n+        z: vec![1, 2, 3],\n+    };\n+    let a2 = &a1;\n+    let mut a3 = a1.clone();\n+    let ref a4 = a1;\n+    let a5 = a1.clone();\n+\n+    drop(a2); //~ WARN calls to `std::mem::drop`\n+    drop(a3);\n+    drop(a4); //~ WARN calls to `std::mem::drop`\n+    drop(a5);\n+}\n+\n+#[allow(unused)]\n+#[allow(clippy::unit_cmp)]\n+fn issue9482(x: u8) {\n+    fn println_and<T>(t: T) -> T {\n+        println!(\"foo\");\n+        t\n+    }\n+\n+    match x {\n+        // Don't lint (copy type), we only care about side-effects\n+        0 => drop(println_and(12)),\n+        // Don't lint (no copy type), we only care about side-effects\n+        1 => drop(println_and(String::new())),\n+        2 => {\n+            // Lint, even if we only care about the side-effect, it's already in a block\n+            drop(println_and(13)); //~ WARN calls to `std::mem::drop`\n+        },\n+         // Lint, idiomatic use is only in body of `Arm`\n+        3 if drop(println_and(14)) == () => (), //~ WARN calls to `std::mem::drop`\n+        // Lint, not a fn/method call\n+        4 => drop(2),//~ WARN calls to `std::mem::drop`\n+        _ => (),\n+    }\n+}"}, {"sha": "03d0b392e2b4b38cbcb9e1a26187638e975318c0", "filename": "tests/ui/lint/drop_copy.stderr", "status": "added", "additions": 128, "deletions": 0, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/156f5563c7cb72947fc27365098217003cab2357/tests%2Fui%2Flint%2Fdrop_copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/156f5563c7cb72947fc27365098217003cab2357/tests%2Fui%2Flint%2Fdrop_copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fdrop_copy.stderr?ref=156f5563c7cb72947fc27365098217003cab2357", "patch": "@@ -0,0 +1,128 @@\n+warning: calls to `std::mem::drop` with a value that implements `Copy`.\n+  --> $DIR/drop_copy.rs:34:5\n+   |\n+LL |     drop(s1);\n+   |     ^^^^^^^^\n+   |\n+note: argument has type `SomeStruct`\n+  --> $DIR/drop_copy.rs:34:10\n+   |\n+LL |     drop(s1);\n+   |          ^^\n+note: the lint level is defined here\n+  --> $DIR/drop_copy.rs:3:9\n+   |\n+LL | #![warn(drop_copy)]\n+   |         ^^^^^^^^^\n+\n+warning: calls to `std::mem::drop` with a value that implements `Copy`.\n+  --> $DIR/drop_copy.rs:35:5\n+   |\n+LL |     drop(s2);\n+   |     ^^^^^^^^\n+   |\n+note: argument has type `SomeStruct`\n+  --> $DIR/drop_copy.rs:35:10\n+   |\n+LL |     drop(s2);\n+   |          ^^\n+\n+warning: calls to `std::mem::drop` with a reference instead of an owned value\n+  --> $DIR/drop_copy.rs:36:5\n+   |\n+LL |     drop(s3);\n+   |     ^^^^^^^^\n+   |\n+note: argument has type `&SomeStruct`\n+  --> $DIR/drop_copy.rs:36:10\n+   |\n+LL |     drop(s3);\n+   |          ^^\n+   = note: `#[warn(drop_ref)]` on by default\n+\n+warning: calls to `std::mem::drop` with a value that implements `Copy`.\n+  --> $DIR/drop_copy.rs:37:5\n+   |\n+LL |     drop(s4);\n+   |     ^^^^^^^^\n+   |\n+note: argument has type `SomeStruct`\n+  --> $DIR/drop_copy.rs:37:10\n+   |\n+LL |     drop(s4);\n+   |          ^^\n+\n+warning: calls to `std::mem::drop` with a reference instead of an owned value\n+  --> $DIR/drop_copy.rs:38:5\n+   |\n+LL |     drop(s5);\n+   |     ^^^^^^^^\n+   |\n+note: argument has type `&SomeStruct`\n+  --> $DIR/drop_copy.rs:38:10\n+   |\n+LL |     drop(s5);\n+   |          ^^\n+\n+warning: calls to `std::mem::drop` with a reference instead of an owned value\n+  --> $DIR/drop_copy.rs:50:5\n+   |\n+LL |     drop(a2);\n+   |     ^^^^^^^^\n+   |\n+note: argument has type `&AnotherStruct`\n+  --> $DIR/drop_copy.rs:50:10\n+   |\n+LL |     drop(a2);\n+   |          ^^\n+\n+warning: calls to `std::mem::drop` with a reference instead of an owned value\n+  --> $DIR/drop_copy.rs:52:5\n+   |\n+LL |     drop(a4);\n+   |     ^^^^^^^^\n+   |\n+note: argument has type `&AnotherStruct`\n+  --> $DIR/drop_copy.rs:52:10\n+   |\n+LL |     drop(a4);\n+   |          ^^\n+\n+warning: calls to `std::mem::drop` with a value that implements `Copy`.\n+  --> $DIR/drop_copy.rs:71:13\n+   |\n+LL |             drop(println_and(13));\n+   |             ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: argument has type `i32`\n+  --> $DIR/drop_copy.rs:71:18\n+   |\n+LL |             drop(println_and(13));\n+   |                  ^^^^^^^^^^^^^^^\n+\n+warning: calls to `std::mem::drop` with a value that implements `Copy`.\n+  --> $DIR/drop_copy.rs:74:14\n+   |\n+LL |         3 if drop(println_and(14)) == () => (),\n+   |              ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: argument has type `i32`\n+  --> $DIR/drop_copy.rs:74:19\n+   |\n+LL |         3 if drop(println_and(14)) == () => (),\n+   |                   ^^^^^^^^^^^^^^^\n+\n+warning: calls to `std::mem::drop` with a value that implements `Copy`.\n+  --> $DIR/drop_copy.rs:76:14\n+   |\n+LL |         4 => drop(2),\n+   |              ^^^^^^^\n+   |\n+note: argument has type `i32`\n+  --> $DIR/drop_copy.rs:76:19\n+   |\n+LL |         4 => drop(2),\n+   |                   ^\n+\n+warning: 10 warnings emitted\n+"}]}