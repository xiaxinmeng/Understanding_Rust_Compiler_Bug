{"sha": "d236b30a1d638340aad8345fa2946cfe9543dcf0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyMzZiMzBhMWQ2MzgzNDBhYWQ4MzQ1ZmEyOTQ2Y2ZlOTU0M2RjZjA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-14T12:30:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-14T12:30:14Z"}, "message": "Auto merge of #5457 - phansch:sym, r=matthiaskrgr\n\nCleanup: Use our `sym!` macro more\n\nIt's much shorter than Symbol::intern and the effect should still be clear\n\n---\n\nchangelog: none", "tree": {"sha": "56f0019b25af3b5b79c33c544fbb0e2363944f6e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/56f0019b25af3b5b79c33c544fbb0e2363944f6e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d236b30a1d638340aad8345fa2946cfe9543dcf0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d236b30a1d638340aad8345fa2946cfe9543dcf0", "html_url": "https://github.com/rust-lang/rust/commit/d236b30a1d638340aad8345fa2946cfe9543dcf0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d236b30a1d638340aad8345fa2946cfe9543dcf0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85e8b64c82ab44ce8016b97e3a29ec3190c91445", "url": "https://api.github.com/repos/rust-lang/rust/commits/85e8b64c82ab44ce8016b97e3a29ec3190c91445", "html_url": "https://github.com/rust-lang/rust/commit/85e8b64c82ab44ce8016b97e3a29ec3190c91445"}, {"sha": "31c5664f2533057bcbe42acc71815a17f0030d74", "url": "https://api.github.com/repos/rust-lang/rust/commits/31c5664f2533057bcbe42acc71815a17f0030d74", "html_url": "https://github.com/rust-lang/rust/commit/31c5664f2533057bcbe42acc71815a17f0030d74"}], "stats": {"total": 40, "additions": 19, "deletions": 21}, "files": [{"sha": "c32e0a2290d12c10caa16f6f6e18223bd56fe421", "filename": "clippy_lints/src/get_last_with_len.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d236b30a1d638340aad8345fa2946cfe9543dcf0/clippy_lints%2Fsrc%2Fget_last_with_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d236b30a1d638340aad8345fa2946cfe9543dcf0/clippy_lints%2Fsrc%2Fget_last_with_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fget_last_with_len.rs?ref=d236b30a1d638340aad8345fa2946cfe9543dcf0", "patch": "@@ -8,7 +8,6 @@ use rustc_hir::{BinOpKind, Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Spanned;\n-use rustc_span::symbol::Symbol;\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for using `x.get(x.len() - 1)` instead of\n@@ -51,12 +50,12 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for GetLastWithLen {\n             if let ExprKind::MethodCall(ref path, _, ref args) = expr.kind;\n \n             // Method name is \"get\"\n-            if path.ident.name == Symbol::intern(\"get\");\n+            if path.ident.name == sym!(get);\n \n             // Argument 0 (the struct we're calling the method on) is a vector\n             if let Some(struct_calling_on) = args.get(0);\n             let struct_ty = cx.tables.expr_ty(struct_calling_on);\n-            if is_type_diagnostic_item(cx, struct_ty, Symbol::intern(\"vec_type\"));\n+            if is_type_diagnostic_item(cx, struct_ty, sym!(vec_type));\n \n             // Argument to \"get\" is a subtraction\n             if let Some(get_index_arg) = args.get(1);\n@@ -71,7 +70,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for GetLastWithLen {\n \n             // LHS of subtraction is \"x.len()\"\n             if let ExprKind::MethodCall(arg_lhs_path, _, lhs_args) = &lhs.kind;\n-            if arg_lhs_path.ident.name == Symbol::intern(\"len\");\n+            if arg_lhs_path.ident.name == sym!(len);\n             if let Some(arg_lhs_struct) = lhs_args.get(0);\n \n             // The two vectors referenced (x in x.get(...) and in x.len())"}, {"sha": "cc69b6194a4a60948c306fefe1e7174f7a22685a", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d236b30a1d638340aad8345fa2946cfe9543dcf0/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d236b30a1d638340aad8345fa2946cfe9543dcf0/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=d236b30a1d638340aad8345fa2946cfe9543dcf0", "patch": "@@ -28,7 +28,7 @@ use rustc_middle::middle::region;\n use rustc_middle::ty::{self, Ty};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n-use rustc_span::{BytePos, Symbol};\n+use rustc_span::BytePos;\n use rustc_typeck::expr_use_visitor::{ConsumeMode, Delegate, ExprUseVisitor, Place, PlaceBase};\n use std::iter::{once, Iterator};\n use std::mem;\n@@ -804,7 +804,7 @@ fn is_slice_like<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, ty: Ty<'_>) -> bool {\n         _ => false,\n     };\n \n-    is_slice || is_type_diagnostic_item(cx, ty, Symbol::intern(\"vec_type\")) || match_type(cx, ty, &paths::VEC_DEQUE)\n+    is_slice || is_type_diagnostic_item(cx, ty, sym!(vec_type)) || match_type(cx, ty, &paths::VEC_DEQUE)\n }\n \n fn get_fixed_offset_var<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &Expr<'_>, var: HirId) -> Option<FixedOffsetVar> {\n@@ -1955,7 +1955,7 @@ fn is_ref_iterable_type(cx: &LateContext<'_, '_>, e: &Expr<'_>) -> bool {\n     // will allow further borrows afterwards\n     let ty = cx.tables.expr_ty(e);\n     is_iterable_array(ty, cx) ||\n-    is_type_diagnostic_item(cx, ty, Symbol::intern(\"vec_type\")) ||\n+    is_type_diagnostic_item(cx, ty, sym!(vec_type)) ||\n     match_type(cx, ty, &paths::LINKED_LIST) ||\n     match_type(cx, ty, &paths::HASHMAP) ||\n     match_type(cx, ty, &paths::HASHSET) ||\n@@ -2465,7 +2465,7 @@ fn check_needless_collect<'a, 'tcx>(expr: &'tcx Expr<'_>, cx: &LateContext<'a, '\n         if let Some(GenericArg::Type(ref ty)) = generic_args.args.get(0);\n         then {\n             let ty = cx.tables.node_type(ty.hir_id);\n-            if is_type_diagnostic_item(cx, ty, Symbol::intern(\"vec_type\")) ||\n+            if is_type_diagnostic_item(cx, ty, sym!(vec_type)) ||\n                 match_type(cx, ty, &paths::VEC_DEQUE) ||\n                 match_type(cx, ty, &paths::BTREEMAP) ||\n                 match_type(cx, ty, &paths::HASHMAP) {"}, {"sha": "8b7bb37bf7dd12900ce4580d99523a42d75ce7fe", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d236b30a1d638340aad8345fa2946cfe9543dcf0/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d236b30a1d638340aad8345fa2946cfe9543dcf0/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=d236b30a1d638340aad8345fa2946cfe9543dcf0", "patch": "@@ -19,7 +19,7 @@ use rustc_middle::ty::subst::GenericArgKind;\n use rustc_middle::ty::{self, Predicate, Ty};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n-use rustc_span::symbol::{sym, Symbol, SymbolStr};\n+use rustc_span::symbol::{sym, SymbolStr};\n \n use crate::consts::{constant, Constant};\n use crate::utils::usage::mutated_variables;\n@@ -2111,7 +2111,7 @@ fn lint_iter_cloned_collect<'a, 'tcx>(\n     iter_args: &'tcx [hir::Expr<'_>],\n ) {\n     if_chain! {\n-        if is_type_diagnostic_item(cx, cx.tables.expr_ty(expr), Symbol::intern(\"vec_type\"));\n+        if is_type_diagnostic_item(cx, cx.tables.expr_ty(expr), sym!(vec_type));\n         if let Some(slice) = derefs_to_slice(cx, &iter_args[0], cx.tables.expr_ty(&iter_args[0]));\n         if let Some(to_replace) = expr.span.trim_start(slice.span.source_callsite());\n \n@@ -2240,7 +2240,7 @@ fn lint_iter_nth<'a, 'tcx>(\n     let mut_str = if is_mut { \"_mut\" } else { \"\" };\n     let caller_type = if derefs_to_slice(cx, &iter_args[0], cx.tables.expr_ty(&iter_args[0])).is_some() {\n         \"slice\"\n-    } else if is_type_diagnostic_item(cx, cx.tables.expr_ty(&iter_args[0]), Symbol::intern(\"vec_type\")) {\n+    } else if is_type_diagnostic_item(cx, cx.tables.expr_ty(&iter_args[0]), sym!(vec_type)) {\n         \"Vec\"\n     } else if match_type(cx, cx.tables.expr_ty(&iter_args[0]), &paths::VEC_DEQUE) {\n         \"VecDeque\"\n@@ -2297,7 +2297,7 @@ fn lint_get_unwrap<'a, 'tcx>(\n     let caller_type = if derefs_to_slice(cx, &get_args[0], expr_ty).is_some() {\n         needs_ref = get_args_str.parse::<usize>().is_ok();\n         \"slice\"\n-    } else if is_type_diagnostic_item(cx, expr_ty, Symbol::intern(\"vec_type\")) {\n+    } else if is_type_diagnostic_item(cx, expr_ty, sym!(vec_type)) {\n         needs_ref = get_args_str.parse::<usize>().is_ok();\n         \"Vec\"\n     } else if match_type(cx, expr_ty, &paths::VEC_DEQUE) {\n@@ -2378,7 +2378,7 @@ fn derefs_to_slice<'a, 'tcx>(\n         match ty.kind {\n             ty::Slice(_) => true,\n             ty::Adt(def, _) if def.is_box() => may_slice(cx, ty.boxed_ty()),\n-            ty::Adt(..) => is_type_diagnostic_item(cx, ty, Symbol::intern(\"vec_type\")),\n+            ty::Adt(..) => is_type_diagnostic_item(cx, ty, sym!(vec_type)),\n             ty::Array(_, size) => {\n                 if let Some(size) = size.try_eval_usize(cx.tcx, cx.param_env) {\n                     size < 32"}, {"sha": "a76776e45a818c46d20413a990843eec77a1b588", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d236b30a1d638340aad8345fa2946cfe9543dcf0/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d236b30a1d638340aad8345fa2946cfe9543dcf0/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=d236b30a1d638340aad8345fa2946cfe9543dcf0", "patch": "@@ -13,7 +13,7 @@ use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::{self, TypeFoldable};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use rustc_span::{Span, Symbol};\n+use rustc_span::Span;\n use rustc_target::spec::abi::Abi;\n use rustc_trait_selection::traits;\n use rustc_trait_selection::traits::misc::can_type_implement_copy;\n@@ -214,7 +214,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n \n                         let deref_span = spans_need_deref.get(&canonical_id);\n                         if_chain! {\n-                            if is_type_diagnostic_item(cx, ty, Symbol::intern(\"vec_type\"));\n+                            if is_type_diagnostic_item(cx, ty, sym!(vec_type));\n                             if let Some(clone_spans) =\n                                 get_spans(cx, Some(body.id()), idx, &[(\"clone\", \".to_owned()\")]);\n                             if let TyKind::Path(QPath::Resolved(_, ref path)) = input.kind;"}, {"sha": "949ad0510d34b895a058debd7b1188d48f1ce807", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d236b30a1d638340aad8345fa2946cfe9543dcf0/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d236b30a1d638340aad8345fa2946cfe9543dcf0/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=d236b30a1d638340aad8345fa2946cfe9543dcf0", "patch": "@@ -15,7 +15,7 @@ use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n-use rustc_span::{MultiSpan, Symbol};\n+use rustc_span::MultiSpan;\n use std::borrow::Cow;\n \n declare_clippy_lint! {\n@@ -153,7 +153,7 @@ fn check_fn(cx: &LateContext<'_, '_>, decl: &FnDecl<'_>, fn_id: HirId, opt_body_\n \n     for (idx, (arg, ty)) in decl.inputs.iter().zip(fn_ty.inputs()).enumerate() {\n         if let ty::Ref(_, ty, Mutability::Not) = ty.kind {\n-            if is_type_diagnostic_item(cx, ty, Symbol::intern(\"vec_type\")) {\n+            if is_type_diagnostic_item(cx, ty, sym!(vec_type)) {\n                 let mut ty_snippet = None;\n                 if_chain! {\n                     if let TyKind::Path(QPath::Resolved(_, ref path)) = walk_ptrs_hir_ty(arg).kind;"}, {"sha": "94d8296a9bedf57f56da6313825006188fbbf57e", "filename": "clippy_lints/src/swap.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d236b30a1d638340aad8345fa2946cfe9543dcf0/clippy_lints%2Fsrc%2Fswap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d236b30a1d638340aad8345fa2946cfe9543dcf0/clippy_lints%2Fsrc%2Fswap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fswap.rs?ref=d236b30a1d638340aad8345fa2946cfe9543dcf0", "patch": "@@ -9,7 +9,6 @@ use rustc_hir::{Block, Expr, ExprKind, PatKind, QPath, StmtKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use rustc_span::Symbol;\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for manual swapping.\n@@ -199,7 +198,7 @@ fn check_for_slice<'a>(cx: &LateContext<'_, '_>, lhs1: &'a Expr<'_>, lhs2: &'a E\n \n                 if matches!(ty.kind, ty::Slice(_))\n                     || matches!(ty.kind, ty::Array(_, _))\n-                    || is_type_diagnostic_item(cx, ty, Symbol::intern(\"vec_type\"))\n+                    || is_type_diagnostic_item(cx, ty, sym!(vec_type))\n                     || match_type(cx, ty, &paths::VEC_DEQUE)\n                 {\n                     return Slice::Swappable(lhs1, idx1, idx2);"}, {"sha": "28223b8835b62cff25bed1cf14c0cf7e2e45d8d6", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d236b30a1d638340aad8345fa2946cfe9543dcf0/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d236b30a1d638340aad8345fa2946cfe9543dcf0/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=d236b30a1d638340aad8345fa2946cfe9543dcf0", "patch": "@@ -21,7 +21,7 @@ use rustc_middle::ty::{self, InferTy, Ty, TyCtxt, TypeckTables};\n use rustc_session::{declare_lint_pass, declare_tool_lint, impl_lint_pass};\n use rustc_span::hygiene::{ExpnKind, MacroKind};\n use rustc_span::source_map::Span;\n-use rustc_span::symbol::{sym, Symbol};\n+use rustc_span::symbol::sym;\n use rustc_target::abi::LayoutOf;\n use rustc_target::spec::abi::Abi;\n use rustc_typeck::hir_ty_to_ty;\n@@ -384,7 +384,7 @@ impl Types {\n                             );\n                             return; // don't recurse into the type\n                         }\n-                    } else if cx.tcx.is_diagnostic_item(Symbol::intern(\"vec_type\"), def_id) {\n+                    } else if cx.tcx.is_diagnostic_item(sym!(vec_type), def_id) {\n                         if_chain! {\n                             // Get the _ part of Vec<_>\n                             if let Some(ref last) = last_path_segment(qpath).args;"}]}