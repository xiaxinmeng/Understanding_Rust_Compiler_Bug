{"sha": "c4e173472beb073ce3759525a15ed429b032787a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0ZTE3MzQ3MmJlYjA3M2NlMzc1OTUyNWExNWVkNDI5YjAzMjc4N2E=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-25T01:44:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-25T01:44:22Z"}, "message": "Auto merge of #74017 - poliorcetics:where-keyword, r=jyn514\n\nDocument the where keyword\n\nPartial fix of #34601 (and last PR for it \ud83c\udf89).\n\nThis documents the `where` keyword.\n\n@rustbot modify labels: T-doc,C-enhancement", "tree": {"sha": "ae2152dc51cb3f2525d3e82d1ae4711ce13ab41a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae2152dc51cb3f2525d3e82d1ae4711ce13ab41a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c4e173472beb073ce3759525a15ed429b032787a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c4e173472beb073ce3759525a15ed429b032787a", "html_url": "https://github.com/rust-lang/rust/commit/c4e173472beb073ce3759525a15ed429b032787a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c4e173472beb073ce3759525a15ed429b032787a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e55f584b3bfafc335a1a819ddd1ee6f97b7a59e", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e55f584b3bfafc335a1a819ddd1ee6f97b7a59e", "html_url": "https://github.com/rust-lang/rust/commit/1e55f584b3bfafc335a1a819ddd1ee6f97b7a59e"}, {"sha": "6af60d3e2434490ed0e4a4fee40435c989753a0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/6af60d3e2434490ed0e4a4fee40435c989753a0b", "html_url": "https://github.com/rust-lang/rust/commit/6af60d3e2434490ed0e4a4fee40435c989753a0b"}], "stats": {"total": 95, "additions": 93, "deletions": 2}, "files": [{"sha": "1fa438747c165ad27a9e4de5bc495c53f109ec65", "filename": "src/libstd/keyword_docs.rs", "status": "modified", "additions": 93, "deletions": 2, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/c4e173472beb073ce3759525a15ed429b032787a/src%2Flibstd%2Fkeyword_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4e173472beb073ce3759525a15ed429b032787a/src%2Flibstd%2Fkeyword_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fkeyword_docs.rs?ref=c4e173472beb073ce3759525a15ed429b032787a", "patch": "@@ -1870,9 +1870,100 @@ mod use_keyword {}\n //\n /// Add constraints that must be upheld to use an item.\n ///\n-/// The documentation for this keyword is [not yet complete]. Pull requests welcome!\n+/// `where` allows specifying constraints on lifetime and generic parameters.\n+/// The [RFC] introducing `where` contains detailed informations about the\n+/// keyword.\n ///\n-/// [not yet complete]: https://github.com/rust-lang/rust/issues/34601\n+/// # Examples\n+///\n+/// `where` can be used for constraints with traits:\n+///\n+/// ```rust\n+/// fn new<T: Default>() -> T {\n+///     T::default()\n+/// }\n+///\n+/// fn new_where<T>() -> T\n+/// where\n+///     T: Default,\n+/// {\n+///     T::default()\n+/// }\n+///\n+/// assert_eq!(0.0, new());\n+/// assert_eq!(0.0, new_where());\n+///\n+/// assert_eq!(0, new());\n+/// assert_eq!(0, new_where());\n+/// ```\n+///\n+/// `where` can also be used for lifetimes.\n+///\n+/// This compiles because `longer` outlives `shorter`, thus the constraint is\n+/// respected:\n+///\n+/// ```rust\n+/// fn select<'short, 'long>(s1: &'short str, s2: &'long str, second: bool) -> &'short str\n+/// where\n+///     'long: 'short,\n+/// {\n+///     if second { s2 } else { s1 }\n+/// }\n+///\n+/// let outer = String::from(\"Long living ref\");\n+/// let longer = &outer;\n+/// {\n+///     let inner = String::from(\"Short living ref\");\n+///     let shorter = &inner;\n+///\n+///     assert_eq!(select(shorter, longer, false), shorter);\n+///     assert_eq!(select(shorter, longer, true), longer);\n+/// }\n+/// ```\n+///\n+/// On the other hand, this will not compile because the `where 'b: 'a` clause\n+/// is missing: the `'b` lifetime is not known to live at least as long as `'a`\n+/// which means this function cannot ensure it always returns a valid reference:\n+///\n+/// ```rust,compile_fail,E0623\n+/// fn select<'a, 'b>(s1: &'a str, s2: &'b str, second: bool) -> &'a str\n+/// {\n+///     if second { s2 } else { s1 }\n+/// }\n+/// ```\n+///\n+/// `where` can also be used to express more complicated constraints that cannot\n+/// be written with the `<T: Trait>` syntax:\n+///\n+/// ```rust\n+/// fn first_or_default<I>(mut i: I) -> I::Item\n+/// where\n+///     I: Iterator,\n+///     I::Item: Default,\n+/// {\n+///     i.next().unwrap_or_else(I::Item::default)\n+/// }\n+///\n+/// assert_eq!(first_or_default(vec![1, 2, 3].into_iter()), 1);\n+/// assert_eq!(first_or_default(Vec::<i32>::new().into_iter()), 0);\n+/// ```\n+///\n+/// `where` is available anywhere generic and lifetime parameters are available,\n+/// as can be seen with the [`Cow`](crate::borrow::Cow) type from the standard\n+/// library:\n+///\n+/// ```rust\n+/// # #![allow(dead_code)]\n+/// pub enum Cow<'a, B>\n+/// where\n+///     B: 'a + ToOwned + ?Sized,\n+///  {\n+///     Borrowed(&'a B),\n+///     Owned(<B as ToOwned>::Owned),\n+/// }\n+/// ```\n+///\n+/// [RFC]: https://github.com/rust-lang/rfcs/blob/master/text/0135-where.md\n mod where_keyword {}\n \n // 2018 Edition keywords"}]}