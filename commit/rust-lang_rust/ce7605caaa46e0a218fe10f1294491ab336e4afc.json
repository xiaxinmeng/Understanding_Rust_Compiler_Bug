{"sha": "ce7605caaa46e0a218fe10f1294491ab336e4afc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlNzYwNWNhYWE0NmUwYTIxOGZlMTBmMTI5NDQ5MWFiMzM2ZTRhZmM=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-no-reply-9879165716479413131@oli-obk.de", "date": "2018-05-09T09:52:41Z"}, "committer": {"name": "Oliver Schneider", "email": "git-no-reply-9879165716479413131@oli-obk.de", "date": "2018-05-09T09:52:41Z"}, "message": "Fix some bad conversions on 32 bit emulation", "tree": {"sha": "bdaaefd804c0d2f6859cdd613d8eedbe7e7d9fdc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bdaaefd804c0d2f6859cdd613d8eedbe7e7d9fdc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce7605caaa46e0a218fe10f1294491ab336e4afc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJgBAABCgBKFiEEvpMjxK4/cnPNfesJHVy0/Fl8MAQFAlryxOksHGdpdC1uby1y\nZXBseS05ODc5MTY1NzE2NDc5NDEzMTMxQG9saS1vYmsuZGUACgkQHVy0/Fl8MARz\nQBAAqJ/tlo9EFx2H2WALGH5cM+iT7au0wsfD9YaWKVH45hHaxbaVQp8sA4YCeSns\nXTG3XzLpWZr+8x633FKH0YQP857ZwXuLRKAnQ7B7Q4I0tIeN66WRNTEPSVKqjF3P\nkxLkKAtp//izAMqVBOSzlJalZMJ8j7IhoOh5FcSkF6ql4SktW8+sI1D8F00VgwyQ\n3eu1aXfbXmRe+JsxvyDMrrnvsv3SXy5+Y2woPK67JkQ6ukaXv5tpLTutSQvwLm+m\nOVw+K1G4CmgpZe6lL+21f4G3W9JlRQuHUVsohBQHFW2mbHYQqlx06Aww7OJ33f8e\npZ2sYIpKNPWNcRZSW5QY1EQq+5OM4cU8TkD5P7IZh4g/JpEbGdy+heR4mKL6WH0b\ncEDR8QBWki4H4smYPjfvNIh0nhj5AW3Gom482gH5cHi4oSKwV2AyMq6uG2vb7DCn\nKuTiopWh3qX6EIr9fMrmf6Yx/FGm3nPpkHDymNl4eZnEwDxmTvdxEUGLhZqicAfb\nPdwk7WfVOKa5Ld6z5RlStT3EY/jmwv6dJxn0t4FpGZ22uQx3ccMT3Dgabnbs3LwL\n3yqIWY1tEvN5iEiTNiXIYfXAoudpr4yJVu7ANYoAnuBVHeL4u19J5fQZnueZDiNZ\nl+axPt1+GSP6nNI6umHlSvRmBe91yGnTyd4QneKq3L7ON60=\n=sWMk\n-----END PGP SIGNATURE-----", "payload": "tree bdaaefd804c0d2f6859cdd613d8eedbe7e7d9fdc\nparent e0e1bd7ff778e5913b566c9e03224faecc0eb486\nauthor Oliver Schneider <git-no-reply-9879165716479413131@oli-obk.de> 1525859561 +0200\ncommitter Oliver Schneider <git-no-reply-9879165716479413131@oli-obk.de> 1525859561 +0200\n\nFix some bad conversions on 32 bit emulation\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce7605caaa46e0a218fe10f1294491ab336e4afc", "html_url": "https://github.com/rust-lang/rust/commit/ce7605caaa46e0a218fe10f1294491ab336e4afc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce7605caaa46e0a218fe10f1294491ab336e4afc/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0e1bd7ff778e5913b566c9e03224faecc0eb486", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0e1bd7ff778e5913b566c9e03224faecc0eb486", "html_url": "https://github.com/rust-lang/rust/commit/e0e1bd7ff778e5913b566c9e03224faecc0eb486"}], "stats": {"total": 77, "additions": 67, "deletions": 10}, "files": [{"sha": "a7b94a656da4ab94fa196043a7360844423b5513", "filename": "miri/helpers.rs", "status": "modified", "additions": 58, "deletions": 1, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/ce7605caaa46e0a218fe10f1294491ab336e4afc/miri%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce7605caaa46e0a218fe10f1294491ab336e4afc/miri%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/miri%2Fhelpers.rs?ref=ce7605caaa46e0a218fe10f1294491ab336e4afc", "patch": "@@ -2,7 +2,8 @@ use mir;\n use rustc::ty::Ty;\n use rustc::ty::layout::LayoutOf;\n \n-use super::{Pointer, EvalResult, PrimVal, EvalContext};\n+use super::{Pointer, EvalResult, PrimVal, EvalContext, ValTy};\n+use rustc_mir::interpret::sign_extend;\n \n pub trait EvalContextExt<'tcx> {\n     fn wrapping_pointer_offset(\n@@ -18,6 +19,26 @@ pub trait EvalContextExt<'tcx> {\n         pointee_ty: Ty<'tcx>,\n         offset: i64,\n     ) -> EvalResult<'tcx, Pointer>;\n+\n+    fn value_to_isize(\n+        &self,\n+        value: ValTy<'tcx>,\n+    ) -> EvalResult<'tcx, i64>;\n+\n+    fn value_to_usize(\n+        &self,\n+        value: ValTy<'tcx>,\n+    ) -> EvalResult<'tcx, u64>;\n+\n+    fn value_to_i32(\n+        &self,\n+        value: ValTy<'tcx>,\n+    ) -> EvalResult<'tcx, i32>;\n+\n+    fn value_to_u8(\n+        &self,\n+        value: ValTy<'tcx>,\n+    ) -> EvalResult<'tcx, u8>;\n }\n \n impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for EvalContext<'a, 'mir, 'tcx, super::Evaluator<'tcx>> {\n@@ -68,4 +89,40 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for EvalContext<'a, 'mir, 'tcx, super:\n             err!(Overflow(mir::BinOp::Mul))\n         };\n     }\n+\n+    fn value_to_isize(\n+        &self,\n+        value: ValTy<'tcx>,\n+    ) -> EvalResult<'tcx, i64> {\n+        assert_eq!(value.ty, self.tcx.types.isize);\n+        let raw = self.value_to_primval(value)?.to_bytes()?;\n+        let raw = sign_extend(self.tcx.tcx, raw, self.tcx.types.isize)?;\n+        Ok(raw as i64)\n+    }\n+\n+    fn value_to_usize(\n+        &self,\n+        value: ValTy<'tcx>,\n+    ) -> EvalResult<'tcx, u64> {\n+        assert_eq!(value.ty, self.tcx.types.usize);\n+        self.value_to_primval(value)?.to_bytes().map(|v| v as u64)\n+    }\n+\n+    fn value_to_i32(\n+        &self,\n+        value: ValTy<'tcx>,\n+    ) -> EvalResult<'tcx, i32> {\n+        assert_eq!(value.ty, self.tcx.types.i32);\n+        let raw = self.value_to_primval(value)?.to_bytes()?;\n+        let raw = sign_extend(self.tcx.tcx, raw, self.tcx.types.i32)?;\n+        Ok(raw as i32)\n+    }\n+\n+    fn value_to_u8(\n+        &self,\n+        value: ValTy<'tcx>,\n+    ) -> EvalResult<'tcx, u8> {\n+        assert_eq!(value.ty, self.tcx.types.u8);\n+        self.value_to_primval(value)?.to_bytes().map(|v| v as u8)\n+    }\n }"}, {"sha": "234d1ee7848383271a36d4f4c313a68e3c11f91b", "filename": "miri/intrinsic.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ce7605caaa46e0a218fe10f1294491ab336e4afc/miri%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce7605caaa46e0a218fe10f1294491ab336e4afc/miri%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/miri%2Fintrinsic.rs?ref=ce7605caaa46e0a218fe10f1294491ab336e4afc", "patch": "@@ -70,7 +70,7 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for EvalContext<'a, 'mir, 'tcx, super:\n             }\n \n             \"arith_offset\" => {\n-                let offset = self.value_to_primval(args[1])?.to_i128()? as i64;\n+                let offset = self.value_to_isize(args[1])?;\n                 let ptr = self.into_ptr(args[0].value)?;\n                 let result_ptr = self.wrapping_pointer_offset(ptr, substs.type_at(0), offset)?;\n                 self.write_ptr(dest, result_ptr, dest_layout.ty)?;\n@@ -213,7 +213,7 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for EvalContext<'a, 'mir, 'tcx, super:\n                 let elem_ty = substs.type_at(0);\n                 let elem_layout = self.layout_of(elem_ty)?;\n                 let elem_size = elem_layout.size.bytes();\n-                let count = self.value_to_primval(args[2])?.to_u64()?;\n+                let count = self.value_to_usize(args[2])?;\n                 if count * elem_size != 0 {\n                     // TODO: We do not even validate alignment for the 0-bytes case.  libstd relies on this in vec::IntoIter::next.\n                     // Also see the write_bytes intrinsic.\n@@ -407,7 +407,7 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for EvalContext<'a, 'mir, 'tcx, super:\n             }\n \n             \"offset\" => {\n-                let offset = self.value_to_primval(args[1])?.to_i128()? as i64;\n+                let offset = self.value_to_isize(args[1])?;\n                 let ptr = self.into_ptr(args[0].value)?;\n                 let result_ptr = self.pointer_offset(ptr, substs.type_at(0), offset)?;\n                 self.write_ptr(dest, result_ptr, dest_layout.ty)?;\n@@ -498,21 +498,21 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for EvalContext<'a, 'mir, 'tcx, super:\n             \"powif32\" => {\n                 let f = self.value_to_primval(args[0])?.to_bytes()?;\n                 let f = f32::from_bits(f as u32);\n-                let i = self.value_to_primval(args[1])?.to_i128()?;\n+                let i = self.value_to_i32(args[1])?;\n                 self.write_primval(\n                     dest,\n-                    PrimVal::Bytes(f.powi(i as i32).to_bits() as u128),\n+                    PrimVal::Bytes(f.powi(i).to_bits() as u128),\n                     dest_layout.ty,\n                 )?;\n             }\n \n             \"powif64\" => {\n                 let f = self.value_to_primval(args[0])?.to_bytes()?;\n                 let f = f64::from_bits(f as u64);\n-                let i = self.value_to_primval(args[1])?.to_i128()?;\n+                let i = self.value_to_i32(args[1])?;\n                 self.write_primval(\n                     dest,\n-                    PrimVal::Bytes(f.powi(i as i32).to_bits() as u128),\n+                    PrimVal::Bytes(f.powi(i).to_bits() as u128),\n                     dest_layout.ty,\n                 )?;\n             }\n@@ -655,9 +655,9 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for EvalContext<'a, 'mir, 'tcx, super:\n             \"write_bytes\" => {\n                 let ty = substs.type_at(0);\n                 let ty_layout = self.layout_of(ty)?;\n-                let val_byte = self.value_to_primval(args[1])?.to_u128()? as u8;\n+                let val_byte = self.value_to_u8(args[1])?;\n                 let ptr = self.into_ptr(args[0].value)?;\n-                let count = self.value_to_primval(args[2])?.to_u64()?;\n+                let count = self.value_to_usize(args[2])?;\n                 if count > 0 {\n                     // HashMap relies on write_bytes on a NULL ptr with count == 0 to work\n                     // TODO: Should we, at least, validate the alignment? (Also see the copy intrinsic)"}]}