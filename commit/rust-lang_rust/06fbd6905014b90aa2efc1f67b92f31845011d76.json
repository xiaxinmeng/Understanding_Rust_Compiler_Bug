{"sha": "06fbd6905014b90aa2efc1f67b92f31845011d76", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2ZmJkNjkwNTAxNGI5MGFhMmVmYzFmNjdiOTJmMzE4NDUwMTFkNzY=", "commit": {"author": {"name": "vsrs", "email": "vit@conrlab.com", "date": "2020-09-02T13:03:05Z"}, "committer": {"name": "vsrs", "email": "vit@conrlab.com", "date": "2020-09-29T12:29:20Z"}, "message": "Make method references CodeLens lazy.", "tree": {"sha": "6d1471eeb05f7275850690b037be23e82f01263f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d1471eeb05f7275850690b037be23e82f01263f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06fbd6905014b90aa2efc1f67b92f31845011d76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06fbd6905014b90aa2efc1f67b92f31845011d76", "html_url": "https://github.com/rust-lang/rust/commit/06fbd6905014b90aa2efc1f67b92f31845011d76", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06fbd6905014b90aa2efc1f67b92f31845011d76/comments", "author": {"login": "vsrs", "id": 62505555, "node_id": "MDQ6VXNlcjYyNTA1NTU1", "avatar_url": "https://avatars.githubusercontent.com/u/62505555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vsrs", "html_url": "https://github.com/vsrs", "followers_url": "https://api.github.com/users/vsrs/followers", "following_url": "https://api.github.com/users/vsrs/following{/other_user}", "gists_url": "https://api.github.com/users/vsrs/gists{/gist_id}", "starred_url": "https://api.github.com/users/vsrs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vsrs/subscriptions", "organizations_url": "https://api.github.com/users/vsrs/orgs", "repos_url": "https://api.github.com/users/vsrs/repos", "events_url": "https://api.github.com/users/vsrs/events{/privacy}", "received_events_url": "https://api.github.com/users/vsrs/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vsrs", "id": 62505555, "node_id": "MDQ6VXNlcjYyNTA1NTU1", "avatar_url": "https://avatars.githubusercontent.com/u/62505555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vsrs", "html_url": "https://github.com/vsrs", "followers_url": "https://api.github.com/users/vsrs/followers", "following_url": "https://api.github.com/users/vsrs/following{/other_user}", "gists_url": "https://api.github.com/users/vsrs/gists{/gist_id}", "starred_url": "https://api.github.com/users/vsrs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vsrs/subscriptions", "organizations_url": "https://api.github.com/users/vsrs/orgs", "repos_url": "https://api.github.com/users/vsrs/repos", "events_url": "https://api.github.com/users/vsrs/events{/privacy}", "received_events_url": "https://api.github.com/users/vsrs/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7fda5f936737aa1111599f93cb3133fa7f65ee4", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7fda5f936737aa1111599f93cb3133fa7f65ee4", "html_url": "https://github.com/rust-lang/rust/commit/b7fda5f936737aa1111599f93cb3133fa7f65ee4"}], "stats": {"total": 99, "additions": 56, "deletions": 43}, "files": [{"sha": "286a6a110b3ee99354bc76c92ea0d7e136b95964", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/06fbd6905014b90aa2efc1f67b92f31845011d76/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06fbd6905014b90aa2efc1f67b92f31845011d76/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=06fbd6905014b90aa2efc1f67b92f31845011d76", "patch": "@@ -56,7 +56,7 @@ use ide_db::{\n     symbol_index::{self, FileSymbol},\n     LineIndexDatabase,\n };\n-use syntax::{SourceFile, TextRange, TextSize};\n+use syntax::{SourceFile, SyntaxKind, TextRange, TextSize};\n \n use crate::display::ToNav;\n \n@@ -369,6 +369,21 @@ impl Analysis {\n         })\n     }\n \n+    /// Finds all methods and free functions for the file.\n+    pub fn find_all_methods(&self, file_id: FileId) -> Cancelable<Vec<FileRange>> {\n+        let res = self\n+            .file_structure(file_id)?\n+            .into_iter()\n+            .filter(|it| match it.kind {\n+                SyntaxKind::FN => true,\n+                _ => false,\n+            })\n+            .filter_map(|it| Some(FileRange { file_id, range: it.navigation_range }))\n+            .collect();\n+\n+        Ok(res)\n+    }\n+\n     /// Returns a short text describing element at position.\n     pub fn hover(\n         &self,"}, {"sha": "1a0bee5e45caef88735aad8a32e82c5fe600235f", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 40, "deletions": 42, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/06fbd6905014b90aa2efc1f67b92f31845011d76/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06fbd6905014b90aa2efc1f67b92f31845011d76/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=06fbd6905014b90aa2efc1f67b92f31845011d76", "patch": "@@ -955,48 +955,18 @@ pub(crate) fn handle_code_lens(\n     }\n \n     if snap.config.lens.references() {\n-        let ref_lenses = snap\n-            .analysis\n-            .file_structure(file_id)?\n-            .into_iter()\n-            .filter(|it| match it.kind {\n-                SyntaxKind::FN => true,\n-                _ => false,\n-            })\n-            .filter_map(|it| {\n-                let position = FilePosition { file_id, offset: it.navigation_range.start() };\n-                let scope = None; // all references\n-\n-                snap.analysis.find_all_refs(position, scope).unwrap_or(None).map(|r| {\n-                    let mut lenses = Vec::new();\n-                    if r.len() == 1 {\n-                        // Only a declaration\n-                        return lenses;\n-                    }\n-\n-                    let uri = to_proto::url(&snap, file_id);\n-                    let range = to_proto::range(&line_index, it.node_range);\n-                    let position = to_proto::position(&line_index, position.offset);\n-\n-                    if snap.config.lens.method_refs {\n-                        let all_locations: Vec<_> = r\n-                            .references()\n-                            .iter()\n-                            .filter_map(|it| to_proto::location(&snap, it.file_range).ok())\n-                            .collect();\n-                        let title = reference_title(all_locations.len());\n-                        let all_refs =\n-                            show_references_command(title, &uri, position, all_locations);\n-                        lenses.push(CodeLens { range, command: Some(all_refs), data: None });\n-                    }\n-\n-                    lenses\n-                })\n-            })\n-            .flatten()\n-            .collect_vec();\n-\n-        lenses.extend(ref_lenses);\n+        lenses.extend(snap.analysis.find_all_methods(file_id)?.into_iter().map(|it| {\n+            let range = to_proto::range(&line_index, it.range);\n+            let position = to_proto::position(&line_index, it.range.start());\n+            let lens_params =\n+                lsp_types::TextDocumentPositionParams::new(params.text_document.clone(), position);\n+\n+            CodeLens {\n+                range,\n+                command: None,\n+                data: Some(to_value(CodeLensResolveData::References(lens_params)).unwrap()),\n+            }\n+        }));\n     }\n \n     Ok(Some(lenses))\n@@ -1006,6 +976,7 @@ pub(crate) fn handle_code_lens(\n #[serde(rename_all = \"camelCase\")]\n enum CodeLensResolveData {\n     Impls(lsp_types::request::GotoImplementationParams),\n+    References(lsp_types::TextDocumentPositionParams),\n }\n \n pub(crate) fn handle_code_lens_resolve(\n@@ -1037,6 +1008,33 @@ pub(crate) fn handle_code_lens_resolve(\n             );\n             Ok(CodeLens { range: code_lens.range, command: Some(cmd), data: None })\n         }\n+        Some(CodeLensResolveData::References(doc_position)) => {\n+            let position = from_proto::file_position(&snap, doc_position.clone())?;\n+            let locations = snap\n+                .analysis\n+                .find_all_refs(position, None)\n+                .unwrap_or(None)\n+                .map(|r| {\n+                    r.references()\n+                        .iter()\n+                        .filter_map(|it| to_proto::location(&snap, it.file_range).ok())\n+                        .collect_vec()\n+                })\n+                .unwrap_or_default();\n+\n+            let cmd = if locations.is_empty() {\n+                Command { title: \"No references\".into(), command: \"\".into(), arguments: None }\n+            } else {\n+                show_references_command(\n+                    reference_title(locations.len()),\n+                    &doc_position.text_document.uri,\n+                    code_lens.range.start,\n+                    locations,\n+                )\n+            };\n+\n+            Ok(CodeLens { range: code_lens.range, command: Some(cmd), data: None })\n+        }\n         None => Ok(CodeLens {\n             range: code_lens.range,\n             command: Some(Command { title: \"Error\".into(), ..Default::default() }),"}]}