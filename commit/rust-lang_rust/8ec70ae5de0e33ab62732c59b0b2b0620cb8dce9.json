{"sha": "8ec70ae5de0e33ab62732c59b0b2b0620cb8dce9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlYzcwYWU1ZGUwZTMzYWI2MjczMmM1OWIwYjJiMDYyMGNiOGRjZTk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-01T05:52:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-01T05:52:31Z"}, "message": "auto merge of #8162 : thestinger/rust/no-copy, r=brson", "tree": {"sha": "d3ec524a3c9192408a0400e723a5f59388774c9f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3ec524a3c9192408a0400e723a5f59388774c9f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ec70ae5de0e33ab62732c59b0b2b0620cb8dce9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ec70ae5de0e33ab62732c59b0b2b0620cb8dce9", "html_url": "https://github.com/rust-lang/rust/commit/8ec70ae5de0e33ab62732c59b0b2b0620cb8dce9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ec70ae5de0e33ab62732c59b0b2b0620cb8dce9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c716c66fbd164bf0d96a77e2c6389f8f6702b23", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c716c66fbd164bf0d96a77e2c6389f8f6702b23", "html_url": "https://github.com/rust-lang/rust/commit/0c716c66fbd164bf0d96a77e2c6389f8f6702b23"}, {"sha": "b57ffef37e6e2196ad948ab2f6944d242c3aaaf1", "url": "https://api.github.com/repos/rust-lang/rust/commits/b57ffef37e6e2196ad948ab2f6944d242c3aaaf1", "html_url": "https://github.com/rust-lang/rust/commit/b57ffef37e6e2196ad948ab2f6944d242c3aaaf1"}], "stats": {"total": 527, "additions": 242, "deletions": 285}, "files": [{"sha": "92507f9ca884dab5aacdf53ac08e17dcb70577c1", "filename": "src/libextra/crypto/digest.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8ec70ae5de0e33ab62732c59b0b2b0620cb8dce9/src%2Flibextra%2Fcrypto%2Fdigest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ec70ae5de0e33ab62732c59b0b2b0620cb8dce9/src%2Flibextra%2Fcrypto%2Fdigest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fcrypto%2Fdigest.rs?ref=8ec70ae5de0e33ab62732c59b0b2b0620cb8dce9", "patch": "@@ -65,7 +65,7 @@ pub trait DigestUtil {\n      *\n      * * in The string to feed into the digest\n      */\n-    fn input_str(&mut self, in: &str);\n+    fn input_str(&mut self, input: &str);\n \n     /**\n      * Convenience functon that retrieves the result of a digest as a\n@@ -75,8 +75,8 @@ pub trait DigestUtil {\n }\n \n impl<D: Digest> DigestUtil for D {\n-    fn input_str(&mut self, in: &str) {\n-        self.input(in.as_bytes());\n+    fn input_str(&mut self, input: &str) {\n+        self.input(input.as_bytes());\n     }\n \n     fn result_str(&mut self) -> ~str {"}, {"sha": "dfefe9779d124d3f69ecd7a401e51b18d9bb621a", "filename": "src/libextra/crypto/sha2.rs", "status": "modified", "additions": 50, "deletions": 50, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/8ec70ae5de0e33ab62732c59b0b2b0620cb8dce9/src%2Flibextra%2Fcrypto%2Fsha2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ec70ae5de0e33ab62732c59b0b2b0620cb8dce9/src%2Flibextra%2Fcrypto%2Fsha2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fcrypto%2Fsha2.rs?ref=8ec70ae5de0e33ab62732c59b0b2b0620cb8dce9", "patch": "@@ -66,34 +66,34 @@ struct Engine512 {\n }\n \n // Convert a [u8] to a u64 in big-endian format\n-fn to_u64(in: &[u8]) -> u64 {\n-    (in[0] as u64) << 56 |\n-    (in[1] as u64) << 48 |\n-    (in[2] as u64) << 40 |\n-    (in[3] as u64) << 32 |\n-    (in[4] as u64) << 24 |\n-    (in[5] as u64) << 16 |\n-    (in[6] as u64) << 8 |\n-    (in[7] as u64)\n+fn to_u64(input: &[u8]) -> u64 {\n+    (input[0] as u64) << 56 |\n+    (input[1] as u64) << 48 |\n+    (input[2] as u64) << 40 |\n+    (input[3] as u64) << 32 |\n+    (input[4] as u64) << 24 |\n+    (input[5] as u64) << 16 |\n+    (input[6] as u64) << 8 |\n+    (input[7] as u64)\n }\n \n // Convert a u64 to a [u8] in big endian format\n-fn from_u64(in: u64, out: &mut [u8]) {\n-    out[0] = (in >> 56) as u8;\n-    out[1] = (in >> 48) as u8;\n-    out[2] = (in >> 40) as u8;\n-    out[3] = (in >> 32) as u8;\n-    out[4] = (in >> 24) as u8;\n-    out[5] = (in >> 16) as u8;\n-    out[6] = (in >> 8) as u8;\n-    out[7] = in as u8;\n+fn from_u64(input: u64, out: &mut [u8]) {\n+    out[0] = (input >> 56) as u8;\n+    out[1] = (input >> 48) as u8;\n+    out[2] = (input >> 40) as u8;\n+    out[3] = (input >> 32) as u8;\n+    out[4] = (input >> 24) as u8;\n+    out[5] = (input >> 16) as u8;\n+    out[6] = (input >> 8) as u8;\n+    out[7] = input as u8;\n }\n \n impl Engine512 {\n-    fn input_byte(&mut self, in: u8) {\n+    fn input_byte(&mut self, input: u8) {\n         assert!(!self.finished)\n \n-        self.input_buffer[self.input_buffer_idx] = in;\n+        self.input_buffer[self.input_buffer_idx] = input;\n         self.input_buffer_idx += 1;\n \n         if (self.input_buffer_idx == 8) {\n@@ -105,25 +105,25 @@ impl Engine512 {\n         self.bit_counter.add_bytes(1);\n     }\n \n-    fn input_vec(&mut self, in: &[u8]) {\n+    fn input_vec(&mut self, input: &[u8]) {\n         assert!(!self.finished)\n \n         let mut i = 0;\n \n-        while i < in.len() && self.input_buffer_idx != 0 {\n-            self.input_byte(in[i]);\n+        while i < input.len() && self.input_buffer_idx != 0 {\n+            self.input_byte(input[i]);\n             i += 1;\n         }\n \n-        while in.len() - i >= 8 {\n-            let w = to_u64(in.slice(i, i + 8));\n+        while input.len() - i >= 8 {\n+            let w = to_u64(input.slice(i, i + 8));\n             self.process_word(w);\n             self.bit_counter.add_bytes(8);\n             i += 8;\n         }\n \n-        while i < in.len() {\n-            self.input_byte(in[i]);\n+        while i < input.len() {\n+            self.input_byte(input[i]);\n             i += 1;\n         }\n     }\n@@ -135,8 +135,8 @@ impl Engine512 {\n         self.W_idx = 0;\n     }\n \n-    fn process_word(&mut self, in: u64) {\n-        self.W[self.W_idx] = in;\n+    fn process_word(&mut self, input: u64) {\n+        self.W[self.W_idx] = input;\n         self.W_idx += 1;\n         if (self.W_idx == 16) {\n             self.W_idx = 0;\n@@ -356,26 +356,26 @@ struct Engine256 {\n }\n \n // Convert a [u8] to a u32 in big endian format\n-fn to_u32(in: &[u8]) -> u32 {\n-    (in[0] as u32) << 24 |\n-    (in[1] as u32) << 16 |\n-    (in[2] as u32) << 8 |\n-    (in[3] as u32)\n+fn to_u32(input: &[u8]) -> u32 {\n+    (input[0] as u32) << 24 |\n+    (input[1] as u32) << 16 |\n+    (input[2] as u32) << 8 |\n+    (input[3] as u32)\n }\n \n // Convert a u32 to a [u8] in big endian format\n-fn from_u32(in: u32, out: &mut [u8]) {\n-    out[0] = (in >> 24) as u8;\n-    out[1] = (in >> 16) as u8;\n-    out[2] = (in >> 8) as u8;\n-    out[3] = in as u8;\n+fn from_u32(input: u32, out: &mut [u8]) {\n+    out[0] = (input >> 24) as u8;\n+    out[1] = (input >> 16) as u8;\n+    out[2] = (input >> 8) as u8;\n+    out[3] = input as u8;\n }\n \n impl Engine256 {\n-    fn input_byte(&mut self, in: u8) {\n+    fn input_byte(&mut self, input: u8) {\n         assert!(!self.finished)\n \n-        self.input_buffer[self.input_buffer_idx] = in;\n+        self.input_buffer[self.input_buffer_idx] = input;\n         self.input_buffer_idx += 1;\n \n         if (self.input_buffer_idx == 4) {\n@@ -387,25 +387,25 @@ impl Engine256 {\n         self.length_bytes += 1;\n     }\n \n-    fn input_vec(&mut self, in: &[u8]) {\n+    fn input_vec(&mut self, input: &[u8]) {\n         assert!(!self.finished)\n \n         let mut i = 0;\n \n-        while i < in.len() && self.input_buffer_idx != 0 {\n-            self.input_byte(in[i]);\n+        while i < input.len() && self.input_buffer_idx != 0 {\n+            self.input_byte(input[i]);\n             i += 1;\n         }\n \n-        while in.len() - i >= 4 {\n-            let w = to_u32(in.slice(i, i + 4));\n+        while input.len() - i >= 4 {\n+            let w = to_u32(input.slice(i, i + 4));\n             self.process_word(w);\n             self.length_bytes += 4;\n             i += 4;\n         }\n \n-        while i < in.len() {\n-            self.input_byte(in[i]);\n+        while i < input.len() {\n+            self.input_byte(input[i]);\n             i += 1;\n         }\n \n@@ -418,8 +418,8 @@ impl Engine256 {\n         self.W_idx = 0;\n     }\n \n-    fn process_word(&mut self, in: u32) {\n-        self.W[self.W_idx] = in;\n+    fn process_word(&mut self, input: u32) {\n+        self.W[self.W_idx] = input;\n         self.W_idx += 1;\n         if (self.W_idx == 16) {\n             self.W_idx = 0;"}, {"sha": "d7cf217fbecd3f1c063c4685c2d151095471bee6", "filename": "src/libextra/fileinput.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8ec70ae5de0e33ab62732c59b0b2b0620cb8dce9/src%2Flibextra%2Ffileinput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ec70ae5de0e33ab62732c59b0b2b0620cb8dce9/src%2Flibextra%2Ffileinput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ffileinput.rs?ref=8ec70ae5de0e33ab62732c59b0b2b0620cb8dce9", "patch": "@@ -72,10 +72,10 @@ input, skips the current file and then numbers the remaining lines\n (where the numbers are from the start of each file, rather than the\n total line count).\n \n-    let in = FileInput::from_vec(pathify([~\"a.txt\", ~\"b.txt\", ~\"c.txt\"],\n+    let input = FileInput::from_vec(pathify([~\"a.txt\", ~\"b.txt\", ~\"c.txt\"],\n                                              true));\n \n-    for in.each_line |line| {\n+    for input.each_line |line| {\n         if line.is_empty() {\n             break\n         }\n@@ -85,9 +85,9 @@ total line count).\n     io::println(\"Continue?\");\n \n     if io::stdin().read_line() == ~\"yes\" {\n-        in.next_file(); // skip!\n+        input.next_file(); // skip!\n \n-        for in.each_line_state |line, state| {\n+        for input.each_line_state |line, state| {\n            io::println(fmt!(\"%u: %s\", state.line_num_file,\n                                       line))\n         }\n@@ -589,29 +589,29 @@ mod test {\n             make_file(filename.get_ref(), contents);\n         }\n \n-        let in = FileInput::from_vec(filenames);\n+        let input = FileInput::from_vec(filenames);\n \n         // read once from 0\n-        assert_eq!(in.read_line(), ~\"0 1\");\n-        in.next_file(); // skip the rest of 1\n+        assert_eq!(input.read_line(), ~\"0 1\");\n+        input.next_file(); // skip the rest of 1\n \n         // read all lines from 1 (but don't read any from 2),\n         for uint::range(1, 4) |i| {\n-            assert_eq!(in.read_line(), fmt!(\"1 %u\", i));\n+            assert_eq!(input.read_line(), fmt!(\"1 %u\", i));\n         }\n         // 1 is finished, but 2 hasn't been started yet, so this will\n         // just \"skip\" to the beginning of 2 (Python's fileinput does\n         // the same)\n-        in.next_file();\n+        input.next_file();\n \n-        assert_eq!(in.read_line(), ~\"2 1\");\n+        assert_eq!(input.read_line(), ~\"2 1\");\n     }\n \n     #[test]\n     #[should_fail]\n     fn test_input_vec_missing_file() {\n         for input_vec(pathify([~\"this/file/doesnt/exist\"], true)) |line| {\n-            io::println(line);\n+            println(line);\n         }\n     }\n }"}, {"sha": "57edaa53eaf3bfcc9c43f6adc98879887baf37a5", "filename": "src/libextra/flate.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8ec70ae5de0e33ab62732c59b0b2b0620cb8dce9/src%2Flibextra%2Fflate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ec70ae5de0e33ab62732c59b0b2b0620cb8dce9/src%2Flibextra%2Fflate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fflate.rs?ref=8ec70ae5de0e33ab62732c59b0b2b0620cb8dce9", "patch": "@@ -95,18 +95,18 @@ mod tests {\n             words.push(r.gen_bytes(range));\n         }\n         for 20.times {\n-            let mut in = ~[];\n+            let mut input = ~[];\n             for 2000.times {\n-                in.push_all(r.choose(words));\n+                input.push_all(r.choose(words));\n             }\n             debug!(\"de/inflate of %u bytes of random word-sequences\",\n-                   in.len());\n-            let cmp = deflate_bytes(in);\n+                   input.len());\n+            let cmp = deflate_bytes(input);\n             let out = inflate_bytes(cmp);\n             debug!(\"%u bytes deflated to %u (%.1f%% size)\",\n-                   in.len(), cmp.len(),\n-                   100.0 * ((cmp.len() as float) / (in.len() as float)));\n-            assert_eq!(in, out);\n+                   input.len(), cmp.len(),\n+                   100.0 * ((cmp.len() as float) / (input.len() as float)));\n+            assert_eq!(input, out);\n         }\n     }\n }"}, {"sha": "8c298a7373d96a71eb919a6eed3b5f33ab96fd01", "filename": "src/libextra/semver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ec70ae5de0e33ab62732c59b0b2b0620cb8dce9/src%2Flibextra%2Fsemver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ec70ae5de0e33ab62732c59b0b2b0620cb8dce9/src%2Flibextra%2Fsemver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fsemver.rs?ref=8ec70ae5de0e33ab62732c59b0b2b0620cb8dce9", "patch": "@@ -221,7 +221,7 @@ pub fn parse(s: &str) -> Option<Version> {\n     }\n     let s = s.trim();\n     let mut bad = false;\n-    do bad_parse::cond.trap(|_| { debug!(\"bad\"); bad = true }).in {\n+    do bad_parse::cond.trap(|_| { debug!(\"bad\"); bad = true }).inside {\n         do io::with_str_reader(s) |rdr| {\n             let v = parse_reader(rdr);\n             if bad || v.to_str() != s.to_owned() {"}, {"sha": "af8d5e17a7c7bde2c15b02594f965938661462e8", "filename": "src/libextra/url.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8ec70ae5de0e33ab62732c59b0b2b0620cb8dce9/src%2Flibextra%2Furl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ec70ae5de0e33ab62732c59b0b2b0620cb8dce9/src%2Flibextra%2Furl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Furl.rs?ref=8ec70ae5de0e33ab62732c59b0b2b0620cb8dce9", "patch": "@@ -407,7 +407,7 @@ fn get_authority(rawurl: &str) ->\n \n     let len = rawurl.len();\n     let mut st = Start;\n-    let mut in = Digit; // most restricted, start here.\n+    let mut input = Digit; // most restricted, start here.\n \n     let mut userinfo = None;\n     let mut host = ~\"\";\n@@ -425,13 +425,13 @@ fn get_authority(rawurl: &str) ->\n         match c {\n           '0' .. '9' => (),\n           'A' .. 'F' | 'a' .. 'f' => {\n-            if in == Digit {\n-                in = Hex;\n+            if input == Digit {\n+                input = Hex;\n             }\n           }\n           'G' .. 'Z' | 'g' .. 'z' | '-' | '.' | '_' | '~' | '%' |\n           '&' |'\\'' | '(' | ')' | '+' | '!' | '*' | ',' | ';' | '=' => {\n-            in = Unreserved;\n+            input = Unreserved;\n           }\n           ':' | '@' | '?' | '#' | '/' => {\n             // separators, don't change anything\n@@ -452,7 +452,7 @@ fn get_authority(rawurl: &str) ->\n               }\n               PassHostPort => {\n                 // multiple colons means ipv6 address.\n-                if in == Unreserved {\n+                if input == Unreserved {\n                     return Err(\n                         ~\"Illegal characters in IPv6 address.\");\n                 }\n@@ -461,13 +461,13 @@ fn get_authority(rawurl: &str) ->\n               InHost => {\n                 pos = i;\n                 // can't be sure whether this is an ipv6 address or a port\n-                if in == Unreserved {\n+                if input == Unreserved {\n                     return Err(~\"Illegal characters in authority.\");\n                 }\n                 st = Ip6Port;\n               }\n               Ip6Port => {\n-                if in == Unreserved {\n+                if input == Unreserved {\n                     return Err(~\"Illegal characters in authority.\");\n                 }\n                 st = Ip6Host;\n@@ -483,11 +483,11 @@ fn get_authority(rawurl: &str) ->\n                 return Err(~\"Invalid ':' in authority.\");\n               }\n             }\n-            in = Digit; // reset input class\n+            input = Digit; // reset input class\n           }\n \n           '@' => {\n-            in = Digit; // reset input class\n+            input = Digit; // reset input class\n             colon_count = 0; // reset count\n             match st {\n               Start => {\n@@ -535,7 +535,7 @@ fn get_authority(rawurl: &str) ->\n         }\n       }\n       PassHostPort | Ip6Port => {\n-        if in != Digit {\n+        if input != Digit {\n             return Err(~\"Non-digit characters in port.\");\n         }\n         host = rawurl.slice(begin, pos).to_owned();\n@@ -545,7 +545,7 @@ fn get_authority(rawurl: &str) ->\n         host = rawurl.slice(begin, end).to_owned();\n       }\n       InPort => {\n-        if in != Digit {\n+        if input != Digit {\n             return Err(~\"Non-digit characters in port.\");\n         }\n         port = Some(rawurl.slice(pos+1, end).to_owned());"}, {"sha": "1f01ad7a282f2d286bd44b36b24a4f311ab74b1f", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ec70ae5de0e33ab62732c59b0b2b0620cb8dce9/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ec70ae5de0e33ab62732c59b0b2b0620cb8dce9/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=8ec70ae5de0e33ab62732c59b0b2b0620cb8dce9", "patch": "@@ -706,8 +706,8 @@ fn check_item_ctypes(cx: &Context, it: &ast::item) {\n     }\n \n     fn check_foreign_fn(cx: &Context, decl: &ast::fn_decl) {\n-        for decl.inputs.iter().advance |in| {\n-            check_ty(cx, &in.ty);\n+        for decl.inputs.iter().advance |input| {\n+            check_ty(cx, &input.ty);\n         }\n         check_ty(cx, &decl.output)\n     }"}, {"sha": "9c97daec8e7a8e6206247fc0b00f7ae6a276b4f7", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ec70ae5de0e33ab62732c59b0b2b0620cb8dce9/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ec70ae5de0e33ab62732c59b0b2b0620cb8dce9/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=8ec70ae5de0e33ab62732c59b0b2b0620cb8dce9", "patch": "@@ -1461,8 +1461,8 @@ fn check_expr(expr: @expr, (this, vt): (@Liveness, vt<@Liveness>)) {\n       }\n \n       expr_inline_asm(ref ia) => {\n-        for ia.inputs.iter().advance |&(_, in)| {\n-          (vt.visit_expr)(in, (this, vt));\n+        for ia.inputs.iter().advance |&(_, input)| {\n+          (vt.visit_expr)(input, (this, vt));\n         }\n \n         // Output operands must be lvalues"}, {"sha": "323b649f81f312774985ab4a4c1d315b22b79b15", "filename": "src/librustc/middle/trans/asm.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8ec70ae5de0e33ab62732c59b0b2b0620cb8dce9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ec70ae5de0e33ab62732c59b0b2b0620cb8dce9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fasm.rs?ref=8ec70ae5de0e33ab62732c59b0b2b0620cb8dce9", "patch": "@@ -68,14 +68,14 @@ pub fn trans_inline_asm(bcx: @mut Block, ia: &ast::inline_asm) -> @mut Block {\n     cleanups.clear();\n \n     // Now the input operands\n-    let inputs = do ia.inputs.map |&(c, in)| {\n+    let inputs = do ia.inputs.map |&(c, input)| {\n         constraints.push(c);\n \n         unpack_result!(bcx, {\n             callee::trans_arg_expr(bcx,\n-                                   expr_ty(bcx, in),\n+                                   expr_ty(bcx, input),\n                                    ty::ByCopy,\n-                                   in,\n+                                   input,\n                                    &mut cleanups,\n                                    None,\n                                    callee::DontAutorefArg)"}, {"sha": "0d3a8039d90a40eca22c6383132f2646b52e9702", "filename": "src/librustc/middle/trans/type_use.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ec70ae5de0e33ab62732c59b0b2b0620cb8dce9/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ec70ae5de0e33ab62732c59b0b2b0620cb8dce9/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=8ec70ae5de0e33ab62732c59b0b2b0620cb8dce9", "patch": "@@ -388,8 +388,8 @@ pub fn mark_for_expr(cx: &Context, e: &expr) {\n       }\n \n       expr_inline_asm(ref ia) => {\n-        for ia.inputs.iter().advance |&(_, in)| {\n-          node_type_needs(cx, use_repr, in.id);\n+        for ia.inputs.iter().advance |&(_, input)| {\n+          node_type_needs(cx, use_repr, input.id);\n         }\n         for ia.outputs.iter().advance |&(_, out)| {\n           node_type_needs(cx, use_repr, out.id);"}, {"sha": "61801404148fb234d22a2e6241aaaf8ad6b801e4", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ec70ae5de0e33ab62732c59b0b2b0620cb8dce9/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ec70ae5de0e33ab62732c59b0b2b0620cb8dce9/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=8ec70ae5de0e33ab62732c59b0b2b0620cb8dce9", "patch": "@@ -2478,8 +2478,8 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n         fcx.write_ty(id, ty_param_bounds_and_ty.ty);\n       }\n       ast::expr_inline_asm(ref ia) => {\n-          for ia.inputs.iter().advance |&(_, in)| {\n-              check_expr(fcx, in);\n+          for ia.inputs.iter().advance |&(_, input)| {\n+              check_expr(fcx, input);\n           }\n           for ia.outputs.iter().advance |&(_, out)| {\n               check_expr(fcx, out);"}, {"sha": "a79f20633ad073835ec421a222db07d87ab0970a", "filename": "src/librusti/rusti.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8ec70ae5de0e33ab62732c59b0b2b0620cb8dce9/src%2Flibrusti%2Frusti.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ec70ae5de0e33ab62732c59b0b2b0620cb8dce9/src%2Flibrusti%2Frusti.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrusti%2Frusti.rs?ref=8ec70ae5de0e33ab62732c59b0b2b0620cb8dce9", "patch": "@@ -447,7 +447,7 @@ fn run_cmd(repl: &mut Repl, _in: @io::Reader, _out: @io::Writer,\n \n /// Executes a line of input, which may either be rust code or a\n /// :command. Returns a new Repl if it has changed.\n-pub fn run_line(repl: &mut Repl, in: @io::Reader, out: @io::Writer, line: ~str,\n+pub fn run_line(repl: &mut Repl, input: @io::Reader, out: @io::Writer, line: ~str,\n                 use_rl: bool) -> bool\n {\n     if line.starts_with(\":\") {\n@@ -464,11 +464,11 @@ pub fn run_line(repl: &mut Repl, in: @io::Reader, out: @io::Writer, line: ~str,\n                     split.slice(1, len).to_owned()\n                 } else { ~[] };\n \n-                match run_cmd(repl, in, out, cmd, args, use_rl) {\n+                match run_cmd(repl, input, out, cmd, args, use_rl) {\n                     action_none => { }\n                     action_run_line(multiline_cmd) => {\n                         if !multiline_cmd.is_empty() {\n-                            return run_line(repl, in, out, multiline_cmd, use_rl);\n+                            return run_line(repl, input, out, multiline_cmd, use_rl);\n                         }\n                     }\n                 }\n@@ -500,7 +500,7 @@ pub fn run_line(repl: &mut Repl, in: @io::Reader, out: @io::Writer, line: ~str,\n \n pub fn main() {\n     let args = os::args();\n-    let in = io::stdin();\n+    let input = io::stdin();\n     let out = io::stdout();\n     let mut repl = Repl {\n         prompt: ~\"rusti> \",\n@@ -542,7 +542,7 @@ pub fn main() {\n                     }\n                     loop;\n                 }\n-                run_line(&mut repl, in, out, line, istty);\n+                run_line(&mut repl, input, out, line, istty);\n             }\n         }\n     }"}, {"sha": "c5705f069a2181db006a6dcda93b1a7904ea573c", "filename": "src/librustpkg/tests.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8ec70ae5de0e33ab62732c59b0b2b0620cb8dce9/src%2Flibrustpkg%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ec70ae5de0e33ab62732c59b0b2b0620cb8dce9/src%2Flibrustpkg%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Ftests.rs?ref=8ec70ae5de0e33ab62732c59b0b2b0620cb8dce9", "patch": "@@ -485,11 +485,11 @@ fn test_install_invalid() {\n     let mut error1_occurred = false;\n     do cond1.trap(|_| {\n         error1_occurred = true;\n-    }).in {\n+    }).inside {\n         do cond.trap(|_| {\n             error_occurred = true;\n             temp_workspace.clone()\n-        }).in {\n+        }).inside {\n             ctxt.install(&temp_workspace, &pkgid);\n         }\n     }\n@@ -573,7 +573,7 @@ fn test_package_ids_must_be_relative_path_like() {\n         assert!(\"\" == p.to_str());\n         assert!(\"0-length pkgid\" == e);\n         whatever.clone()\n-    }).in {\n+    }).inside {\n         let x = PkgId::new(\"\", &os::getcwd());\n         assert_eq!(~\"foo-0.1\", x.to_str());\n     }\n@@ -582,7 +582,7 @@ fn test_package_ids_must_be_relative_path_like() {\n         assert_eq!(p.to_str(), os::make_absolute(&Path(\"foo/bar/quux\")).to_str());\n         assert!(\"absolute pkgid\" == e);\n         whatever.clone()\n-    }).in {\n+    }).inside {\n         let z = PkgId::new(os::make_absolute(&Path(\"foo/bar/quux\")).to_str(),\n                            &os::getcwd());\n         assert_eq!(~\"foo-0.1\", z.to_str());"}, {"sha": "4d8857c9d1bad04cc253b45fff8311e81c64263e", "filename": "src/libstd/condition.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8ec70ae5de0e33ab62732c59b0b2b0620cb8dce9/src%2Flibstd%2Fcondition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ec70ae5de0e33ab62732c59b0b2b0620cb8dce9/src%2Flibstd%2Fcondition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcondition.rs?ref=8ec70ae5de0e33ab62732c59b0b2b0620cb8dce9", "patch": "@@ -73,7 +73,7 @@ struct Trap<'self, T, U> {\n }\n \n impl<'self, T, U> Trap<'self, T, U> {\n-    pub fn in<V>(&self, inner: &'self fn() -> V) -> V {\n+    pub fn inside<V>(&self, inner: &'self fn() -> V) -> V {\n         let _g = Guard { cond: self.cond };\n         debug!(\"Trap: pushing handler to TLS\");\n         local_data::set(self.cond.key, self.handler);\n@@ -119,7 +119,7 @@ mod test {\n             debug!(\"nested_trap_test_inner: in handler\");\n             inner_trapped = true;\n             0\n-        }).in {\n+        }).inside {\n             debug!(\"nested_trap_test_inner: in protected block\");\n             trouble(1);\n         }\n@@ -134,7 +134,7 @@ mod test {\n         do sadness::cond.trap(|_j| {\n             debug!(\"nested_trap_test_outer: in handler\");\n             outer_trapped = true; 0\n-        }).in {\n+        }).inside {\n             debug!(\"nested_guard_test_outer: in protected block\");\n             nested_trap_test_inner();\n             trouble(1);\n@@ -152,7 +152,7 @@ mod test {\n             let i = 10;\n             debug!(\"nested_reraise_trap_test_inner: handler re-raising\");\n             sadness::cond.raise(i)\n-        }).in {\n+        }).inside {\n             debug!(\"nested_reraise_trap_test_inner: in protected block\");\n             trouble(1);\n         }\n@@ -167,7 +167,7 @@ mod test {\n         do sadness::cond.trap(|_j| {\n             debug!(\"nested_reraise_trap_test_outer: in handler\");\n             outer_trapped = true; 0\n-        }).in {\n+        }).inside {\n             debug!(\"nested_reraise_trap_test_outer: in protected block\");\n             nested_reraise_trap_test_inner();\n         }\n@@ -182,7 +182,7 @@ mod test {\n         do sadness::cond.trap(|j| {\n             debug!(\"test_default: in handler\");\n             sadness::cond.raise_default(j, || { trapped=true; 5 })\n-        }).in {\n+        }).inside {\n             debug!(\"test_default: in protected block\");\n             trouble(1);\n         }\n@@ -205,7 +205,7 @@ mod test {\n                 do sadness::cond.trap(|_| {\n                     trapped = true;\n                     0\n-                }).in {\n+                }).inside {\n                     sadness::cond.raise(0);\n                 }\n                 assert!(trapped);"}, {"sha": "2802fc30c332ed17e75778179ecaf1db1d98185f", "filename": "src/libstd/os.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/8ec70ae5de0e33ab62732c59b0b2b0620cb8dce9/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ec70ae5de0e33ab62732c59b0b2b0620cb8dce9/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=8ec70ae5de0e33ab62732c59b0b2b0620cb8dce9", "patch": "@@ -389,17 +389,17 @@ pub fn fsync_fd(fd: c_int, _l: io::fsync::Level) -> c_int {\n }\n \n pub struct Pipe {\n-    in: c_int,\n+    input: c_int,\n     out: c_int\n }\n \n #[cfg(unix)]\n pub fn pipe() -> Pipe {\n     unsafe {\n-        let mut fds = Pipe {in: 0 as c_int,\n+        let mut fds = Pipe {input: 0 as c_int,\n                             out: 0 as c_int };\n-        assert_eq!(libc::pipe(&mut fds.in), (0 as c_int));\n-        return Pipe {in: fds.in, out: fds.out};\n+        assert_eq!(libc::pipe(&mut fds.input), (0 as c_int));\n+        return Pipe {input: fds.input, out: fds.out};\n     }\n }\n \n@@ -413,14 +413,14 @@ pub fn pipe() -> Pipe {\n         // fully understand. Here we explicitly make the pipe non-inheritable,\n         // which means to pass it to a subprocess they need to be duplicated\n         // first, as in core::run.\n-        let mut fds = Pipe {in: 0 as c_int,\n+        let mut fds = Pipe {input: 0 as c_int,\n                     out: 0 as c_int };\n-        let res = libc::pipe(&mut fds.in, 1024 as ::libc::c_uint,\n+        let res = libc::pipe(&mut fds.input, 1024 as ::libc::c_uint,\n                              (libc::O_BINARY | libc::O_NOINHERIT) as c_int);\n         assert_eq!(res, 0 as c_int);\n-        assert!((fds.in != -1 as c_int && fds.in != 0 as c_int));\n-        assert!((fds.out != -1 as c_int && fds.in != 0 as c_int));\n-        return Pipe {in: fds.in, out: fds.out};\n+        assert!((fds.input != -1 as c_int && fds.input != 0 as c_int));\n+        assert!((fds.out != -1 as c_int && fds.input != 0 as c_int));\n+        return Pipe {input: fds.input, out: fds.out};\n     }\n }\n \n@@ -1931,11 +1931,11 @@ mod tests {\n           let tempdir = getcwd(); // would like to use $TMPDIR,\n                                   // doesn't seem to work on Linux\n           assert!((tempdir.to_str().len() > 0u));\n-          let in = tempdir.push(\"in.txt\");\n+          let input = tempdir.push(\"in.txt\");\n           let out = tempdir.push(\"out.txt\");\n \n           /* Write the temp input file */\n-            let ostream = do in.to_str().as_c_str |fromp| {\n+            let ostream = do input.to_str().as_c_str |fromp| {\n                 do \"w+b\".as_c_str |modebuf| {\n                     libc::fopen(fromp, modebuf)\n                 }\n@@ -1950,16 +1950,16 @@ mod tests {\n                          len as size_t)\n           }\n           assert_eq!(libc::fclose(ostream), (0u as c_int));\n-          let in_mode = in.get_mode();\n-          let rs = os::copy_file(&in, &out);\n-          if (!os::path_exists(&in)) {\n-            fail!(\"%s doesn't exist\", in.to_str());\n+          let in_mode = input.get_mode();\n+          let rs = os::copy_file(&input, &out);\n+          if (!os::path_exists(&input)) {\n+            fail!(\"%s doesn't exist\", input.to_str());\n           }\n           assert!((rs));\n-          let rslt = run::process_status(\"diff\", [in.to_str(), out.to_str()]);\n+          let rslt = run::process_status(\"diff\", [input.to_str(), out.to_str()]);\n           assert_eq!(rslt, 0);\n           assert_eq!(out.get_mode(), in_mode);\n-          assert!((remove_file(&in)));\n+          assert!((remove_file(&input)));\n           assert!((remove_file(&out)));\n         }\n     }"}, {"sha": "2d21bf0f9dcf3b32e05a9668b98ba002a58b7949", "filename": "src/libstd/rt/io/extensions.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8ec70ae5de0e33ab62732c59b0b2b0620cb8dce9/src%2Flibstd%2Frt%2Fio%2Fextensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ec70ae5de0e33ab62732c59b0b2b0620cb8dce9/src%2Flibstd%2Frt%2Fio%2Fextensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fextensions.rs?ref=8ec70ae5de0e33ab62732c59b0b2b0620cb8dce9", "patch": "@@ -330,7 +330,7 @@ impl<T: Reader> ReaderUtil for T {\n             } else {\n                 read_error::cond.raise(e)\n             }\n-        }).in {\n+        }).inside {\n             while keep_reading {\n                 self.push_bytes(&mut buf, DEFAULT_BUF_SIZE)\n             }\n@@ -640,7 +640,7 @@ mod test {\n             None\n         };\n         do read_error::cond.trap(|_| {\n-        }).in {\n+        }).inside {\n             let byte = reader.read_byte();\n             assert!(byte == None);\n         }\n@@ -679,7 +679,7 @@ mod test {\n     fn read_bytes_eof() {\n         let mut reader = MemReader::new(~[10, 11]);\n         do read_error::cond.trap(|_| {\n-        }).in {\n+        }).inside {\n             assert!(reader.read_bytes(4) == ~[10, 11]);\n         }\n     }\n@@ -720,7 +720,7 @@ mod test {\n         let mut reader = MemReader::new(~[10, 11]);\n         let mut buf = ~[8, 9];\n         do read_error::cond.trap(|_| {\n-        }).in {\n+        }).inside {\n             reader.push_bytes(&mut buf, 4);\n             assert!(buf == ~[8, 9, 10, 11]);\n         }\n@@ -743,7 +743,7 @@ mod test {\n             }\n         };\n         let mut buf = ~[8, 9];\n-        do read_error::cond.trap(|_| { } ).in {\n+        do read_error::cond.trap(|_| { } ).inside {\n             reader.push_bytes(&mut buf, 4);\n         }\n         assert!(buf == ~[8, 9, 10]);"}, {"sha": "82278875fa50af5196b8ff5c724ab4b7d03235ee", "filename": "src/libstd/rt/io/net/tcp.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8ec70ae5de0e33ab62732c59b0b2b0620cb8dce9/src%2Flibstd%2Frt%2Fio%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ec70ae5de0e33ab62732c59b0b2b0620cb8dce9/src%2Flibstd%2Frt%2Fio%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fnet%2Ftcp.rs?ref=8ec70ae5de0e33ab62732c59b0b2b0620cb8dce9", "patch": "@@ -156,7 +156,7 @@ mod test {\n             do io_error::cond.trap(|e| {\n                 assert!(e.kind == PermissionDenied);\n                 called = true;\n-            }).in {\n+            }).inside {\n                 let addr = Ipv4(0, 0, 0, 0, 1);\n                 let listener = TcpListener::bind(addr);\n                 assert!(listener.is_none());\n@@ -172,7 +172,7 @@ mod test {\n             do io_error::cond.trap(|e| {\n                 assert!(e.kind == ConnectionRefused);\n                 called = true;\n-            }).in {\n+            }).inside {\n                 let addr = Ipv4(0, 0, 0, 0, 1);\n                 let stream = TcpStream::connect(addr);\n                 assert!(stream.is_none());\n@@ -320,7 +320,7 @@ mod test {\n                         // NB: ECONNRESET on linux, EPIPE on mac\n                         assert!(e.kind == ConnectionReset || e.kind == BrokenPipe);\n                         stop = true;\n-                    }).in {\n+                    }).inside {\n                         stream.write(buf);\n                     }\n                     if stop { break }\n@@ -349,7 +349,7 @@ mod test {\n                         // NB: ECONNRESET on linux, EPIPE on mac\n                         assert!(e.kind == ConnectionReset || e.kind == BrokenPipe);\n                         stop = true;\n-                    }).in {\n+                    }).inside {\n                         stream.write(buf);\n                     }\n                     if stop { break }"}, {"sha": "d186ad15f4a4af148b3e922aec0eae4173e22afd", "filename": "src/libstd/rt/io/net/udp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ec70ae5de0e33ab62732c59b0b2b0620cb8dce9/src%2Flibstd%2Frt%2Fio%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ec70ae5de0e33ab62732c59b0b2b0620cb8dce9/src%2Flibstd%2Frt%2Fio%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fnet%2Fudp.rs?ref=8ec70ae5de0e33ab62732c59b0b2b0620cb8dce9", "patch": "@@ -117,7 +117,7 @@ mod test {\n             do io_error::cond.trap(|e| {\n                 assert!(e.kind == PermissionDenied);\n                 called = true;\n-            }).in {\n+            }).inside {\n                 let addr = Ipv4(0, 0, 0, 0, 1);\n                 let socket = UdpSocket::bind(addr);\n                 assert!(socket.is_none());"}, {"sha": "7dadc653e6cc97af409f09b0eef0381d0e400045", "filename": "src/libstd/rt/io/option.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8ec70ae5de0e33ab62732c59b0b2b0620cb8dce9/src%2Flibstd%2Frt%2Fio%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ec70ae5de0e33ab62732c59b0b2b0620cb8dce9/src%2Flibstd%2Frt%2Fio%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Foption.rs?ref=8ec70ae5de0e33ab62732c59b0b2b0620cb8dce9", "patch": "@@ -100,7 +100,7 @@ mod test {\n             do io_error::cond.trap(|err| {\n                 assert_eq!(err.kind, PreviousIoError);\n                 called = true;\n-            }).in {\n+            }).inside {\n                 writer.write([0, 0, 0]);\n             }\n             assert!(called);\n@@ -109,7 +109,7 @@ mod test {\n             do io_error::cond.trap(|err| {\n                 assert_eq!(err.kind, PreviousIoError);\n                 called = true;\n-            }).in {\n+            }).inside {\n                 writer.flush();\n             }\n             assert!(called);\n@@ -136,7 +136,7 @@ mod test {\n         do read_error::cond.trap(|err| {\n             assert_eq!(err.kind, PreviousIoError);\n             called = true;\n-        }).in {\n+        }).inside {\n             reader.read(buf);\n         }\n         assert!(called);\n@@ -145,7 +145,7 @@ mod test {\n         do io_error::cond.trap(|err| {\n             assert_eq!(err.kind, PreviousIoError);\n             called = true;\n-        }).in {\n+        }).inside {\n             assert!(reader.eof());\n         }\n         assert!(called);"}, {"sha": "122bc42c4cc83b1ca28274218d5c532a99cadca8", "filename": "src/libstd/run.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8ec70ae5de0e33ab62732c59b0b2b0620cb8dce9/src%2Flibstd%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ec70ae5de0e33ab62732c59b0b2b0620cb8dce9/src%2Flibstd%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frun.rs?ref=8ec70ae5de0e33ab62732c59b0b2b0620cb8dce9", "patch": "@@ -152,7 +152,7 @@ impl Process {\n         let (in_pipe, in_fd) = match options.in_fd {\n             None => {\n                 let pipe = os::pipe();\n-                (Some(pipe), pipe.in)\n+                (Some(pipe), pipe.input)\n             },\n             Some(fd) => (None, fd)\n         };\n@@ -175,7 +175,7 @@ impl Process {\n                                    in_fd, out_fd, err_fd);\n \n         unsafe {\n-            for in_pipe.iter().advance  |pipe| { libc::close(pipe.in); }\n+            for in_pipe.iter().advance  |pipe| { libc::close(pipe.input); }\n             for out_pipe.iter().advance |pipe| { libc::close(pipe.out); }\n             for err_pipe.iter().advance |pipe| { libc::close(pipe.out); }\n         }\n@@ -184,8 +184,8 @@ impl Process {\n             pid: res.pid,\n             handle: res.handle,\n             input: in_pipe.map(|pipe| pipe.out),\n-            output: out_pipe.map(|pipe| os::fdopen(pipe.in)),\n-            error: err_pipe.map(|pipe| os::fdopen(pipe.in)),\n+            output: out_pipe.map(|pipe| os::fdopen(pipe.input)),\n+            error: err_pipe.map(|pipe| os::fdopen(pipe.input)),\n             exit_code: None,\n         }\n     }\n@@ -1025,7 +1025,7 @@ mod tests {\n         let mut proc = run::Process::new(\"cat\", [], run::ProcessOptions {\n             dir: None,\n             env: None,\n-            in_fd: Some(pipe_in.in),\n+            in_fd: Some(pipe_in.input),\n             out_fd: Some(pipe_out.out),\n             err_fd: Some(pipe_err.out)\n         });\n@@ -1034,14 +1034,14 @@ mod tests {\n         assert!(proc.output_redirected());\n         assert!(proc.error_redirected());\n \n-        os::close(pipe_in.in);\n+        os::close(pipe_in.input);\n         os::close(pipe_out.out);\n         os::close(pipe_err.out);\n \n         let expected = ~\"test\";\n         writeclose(pipe_in.out, expected);\n-        let actual = readclose(pipe_out.in);\n-        readclose(pipe_err.in);\n+        let actual = readclose(pipe_out.input);\n+        readclose(pipe_err.input);\n         proc.finish();\n \n         assert_eq!(expected, actual);"}, {"sha": "b0ae719e00f38a08f69ba7bdced4a078fce5850e", "filename": "src/libstd/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ec70ae5de0e33ab62732c59b0b2b0620cb8dce9/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ec70ae5de0e33ab62732c59b0b2b0620cb8dce9/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=8ec70ae5de0e33ab62732c59b0b2b0620cb8dce9", "patch": "@@ -2863,7 +2863,7 @@ mod tests {\n             assert_eq!(err, ~\"from_bytes: input is not UTF-8; first bad byte is 255\");\n             error_happened = true;\n             ~\"\"\n-        }).in {\n+        }).inside {\n             from_bytes(bb)\n         };\n         assert!(error_happened);"}, {"sha": "ee0ec664e1b9ea22ea13f89f6502c9d1f24eedec", "filename": "src/libsyntax/ext/asm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ec70ae5de0e33ab62732c59b0b2b0620cb8dce9/src%2Flibsyntax%2Fext%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ec70ae5de0e33ab62732c59b0b2b0620cb8dce9/src%2Flibsyntax%2Fext%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fasm.rs?ref=8ec70ae5de0e33ab62732c59b0b2b0620cb8dce9", "patch": "@@ -95,10 +95,10 @@ pub fn expand_asm(cx: @ExtCtxt, sp: span, tts: &[ast::token_tree])\n \n                     let constraint = p.parse_str();\n                     p.expect(&token::LPAREN);\n-                    let in = p.parse_expr();\n+                    let input = p.parse_expr();\n                     p.expect(&token::RPAREN);\n \n-                    inputs.push((constraint, in));\n+                    inputs.push((constraint, input));\n                 }\n             }\n             Clobbers => {"}, {"sha": "4855911b9a8243ae35324db07da3b4e5d8cc60e1", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8ec70ae5de0e33ab62732c59b0b2b0620cb8dce9/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ec70ae5de0e33ab62732c59b0b2b0620cb8dce9/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=8ec70ae5de0e33ab62732c59b0b2b0620cb8dce9", "patch": "@@ -750,34 +750,34 @@ pub fn std_macros() -> @str {\n \n     macro_rules! condition (\n \n-        { pub $c:ident: $in:ty -> $out:ty; } => {\n+        { pub $c:ident: $input:ty -> $out:ty; } => {\n \n             pub mod $c {\n                 #[allow(non_uppercase_statics)];\n                 static key: ::std::local_data::Key<\n-                    @::std::condition::Handler<$in, $out>> =\n+                    @::std::condition::Handler<$input, $out>> =\n                     &::std::local_data::Key;\n \n                 pub static cond :\n-                    ::std::condition::Condition<$in,$out> =\n+                    ::std::condition::Condition<$input,$out> =\n                     ::std::condition::Condition {\n                         name: stringify!($c),\n                         key: key\n                     };\n             }\n         };\n \n-        { $c:ident: $in:ty -> $out:ty; } => {\n+        { $c:ident: $input:ty -> $out:ty; } => {\n \n             // FIXME (#6009): remove mod's `pub` below once variant above lands.\n             pub mod $c {\n                 #[allow(non_uppercase_statics)];\n                 static key: ::std::local_data::Key<\n-                    @::std::condition::Handler<$in, $out>> =\n+                    @::std::condition::Handler<$input, $out>> =\n                     &::std::local_data::Key;\n \n                 pub static cond :\n-                    ::std::condition::Condition<$in,$out> =\n+                    ::std::condition::Condition<$input,$out> =\n                     ::std::condition::Condition {\n                         name: stringify!($c),\n                         key: key"}, {"sha": "e3ca36ac12d9e3ff5ecc5d95695fce93478ef13e", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ec70ae5de0e33ab62732c59b0b2b0620cb8dce9/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ec70ae5de0e33ab62732c59b0b2b0620cb8dce9/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=8ec70ae5de0e33ab62732c59b0b2b0620cb8dce9", "patch": "@@ -626,7 +626,7 @@ pub fn noop_fold_expr(e: &expr_, fld: @ast_fold) -> expr_ {\n         }\n         expr_inline_asm(ref a) => {\n             expr_inline_asm(inline_asm {\n-                inputs: a.inputs.map(|&(c, in)| (c, fld.fold_expr(in))),\n+                inputs: a.inputs.map(|&(c, input)| (c, fld.fold_expr(input))),\n                 outputs: a.outputs.map(|&(c, out)| (c, fld.fold_expr(out))),\n                 .. (*a).clone()\n             })"}, {"sha": "3472b9f1d674335de3c697d7abc41c83d7a0bb4b", "filename": "src/libsyntax/parse/obsolete.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8ec70ae5de0e33ab62732c59b0b2b0620cb8dce9/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ec70ae5de0e33ab62732c59b0b2b0620cb8dce9/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fobsolete.rs?ref=8ec70ae5de0e33ab62732c59b0b2b0620cb8dce9", "patch": "@@ -30,7 +30,6 @@ use std::to_bytes;\n /// The specific types of unsupported syntax\n #[deriving(Eq)]\n pub enum ObsoleteSyntax {\n-    ObsoleteLowerCaseKindBounds,\n     ObsoleteLet,\n     ObsoleteFieldTerminator,\n     ObsoleteStructCtor,\n@@ -96,12 +95,6 @@ impl ParserObsoleteMethods for Parser {\n     /// Reports an obsolete syntax non-fatal error.\n     pub fn obsolete(&self, sp: span, kind: ObsoleteSyntax) {\n         let (kind_str, desc) = match kind {\n-            ObsoleteLowerCaseKindBounds => (\n-                \"lower-case kind bounds\",\n-                \"the `send`, `copy`, `const`, and `owned` \\\n-                 kinds are represented as traits now, and \\\n-                 should be camel cased\"\n-            ),\n             ObsoleteLet => (\n                 \"`let` in field declaration\",\n                 \"declare fields as `field: Type`\""}, {"sha": "9444c4636864c80c2b33e708a86a6064b087c3b4", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 3, "deletions": 25, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/8ec70ae5de0e33ab62732c59b0b2b0620cb8dce9/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ec70ae5de0e33ab62732c59b0b2b0620cb8dce9/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=8ec70ae5de0e33ab62732c59b0b2b0620cb8dce9", "patch": "@@ -71,7 +71,7 @@ use parse::lexer::TokenAndSpan;\n use parse::obsolete::{ObsoleteClassTraits};\n use parse::obsolete::{ObsoleteLet, ObsoleteFieldTerminator};\n use parse::obsolete::{ObsoleteMoveInit, ObsoleteBinaryMove, ObsoleteSwap};\n-use parse::obsolete::{ObsoleteSyntax, ObsoleteLowerCaseKindBounds};\n+use parse::obsolete::ObsoleteSyntax;\n use parse::obsolete::{ObsoleteUnsafeBlock, ObsoleteImplSyntax};\n use parse::obsolete::{ObsoleteMutOwnedPointer};\n use parse::obsolete::{ObsoleteMutVector, ObsoleteImplVisibility};\n@@ -3309,30 +3309,8 @@ impl Parser {\n                     self.bump();\n                 }\n                 token::MOD_SEP | token::IDENT(*) => {\n-                    let obsolete_bound = match *self.token {\n-                        token::MOD_SEP => false,\n-                        token::IDENT(sid, _) => {\n-                            match self.id_to_str(sid).as_slice() {\n-                                \"send\" |\n-                                \"copy\" |\n-                                \"const\" |\n-                                \"owned\" => {\n-                                    self.obsolete(\n-                                        *self.span,\n-                                        ObsoleteLowerCaseKindBounds);\n-                                    self.bump();\n-                                    true\n-                                }\n-                                _ => false\n-                            }\n-                        }\n-                        _ => fail!()\n-                    };\n-\n-                    if !obsolete_bound {\n-                        let tref = self.parse_trait_ref();\n-                        result.push(TraitTyParamBound(tref));\n-                    }\n+                    let tref = self.parse_trait_ref();\n+                    result.push(TraitTyParamBound(tref));\n                 }\n                 _ => break,\n             }"}, {"sha": "3365222036ca4b71997d32dbe8b0de75445cf697", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 68, "deletions": 70, "changes": 138, "blob_url": "https://github.com/rust-lang/rust/blob/8ec70ae5de0e33ab62732c59b0b2b0620cb8dce9/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ec70ae5de0e33ab62732c59b0b2b0620cb8dce9/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=8ec70ae5de0e33ab62732c59b0b2b0620cb8dce9", "patch": "@@ -125,7 +125,7 @@ pub fn binop_to_str(o: binop) -> ~str {\n     }\n }\n \n-pub fn to_str(in: @ident_interner, t: &Token) -> ~str {\n+pub fn to_str(input: @ident_interner, t: &Token) -> ~str {\n     match *t {\n       EQ => ~\"=\",\n       LT => ~\"<\",\n@@ -195,16 +195,16 @@ pub fn to_str(in: @ident_interner, t: &Token) -> ~str {\n       LIT_STR(ref s) => { fmt!(\"\\\"%s\\\"\", ident_to_str(s).escape_default()) }\n \n       /* Name components */\n-      IDENT(s, _) => in.get(s.name).to_owned(),\n-      LIFETIME(s) => fmt!(\"'%s\", in.get(s.name)),\n+      IDENT(s, _) => input.get(s.name).to_owned(),\n+      LIFETIME(s) => fmt!(\"'%s\", input.get(s.name)),\n       UNDERSCORE => ~\"_\",\n \n       /* Other */\n       DOC_COMMENT(ref s) => ident_to_str(s).to_owned(),\n       EOF => ~\"<eof>\",\n       INTERPOLATED(ref nt) => {\n         match nt {\n-            &nt_expr(e) => ::print::pprust::expr_to_str(e, in),\n+            &nt_expr(e) => ::print::pprust::expr_to_str(e, input),\n             _ => {\n                 ~\"an interpolated \" +\n                     match (*nt) {\n@@ -440,42 +440,41 @@ fn mk_fresh_ident_interner() -> @ident_interner {\n         \"as\",                 // 32\n         \"break\",              // 33\n         \"const\",              // 34\n-        \"copy\",               // 35\n-        \"do\",                 // 36\n-        \"else\",               // 37\n-        \"enum\",               // 38\n-        \"extern\",             // 39\n-        \"false\",              // 40\n-        \"fn\",                 // 41\n-        \"for\",                // 42\n-        \"if\",                 // 43\n-        \"impl\",               // 44\n-        \"let\",                // 45\n-        \"__log\",              // 46\n-        \"loop\",               // 47\n-        \"match\",              // 48\n-        \"mod\",                // 49\n-        \"mut\",                // 50\n-        \"once\",               // 51\n-        \"priv\",               // 52\n-        \"pub\",                // 53\n-        \"pure\",               // 54\n-        \"ref\",                // 55\n-        \"return\",             // 56\n+        \"do\",                 // 35\n+        \"else\",               // 36\n+        \"enum\",               // 37\n+        \"extern\",             // 38\n+        \"false\",              // 39\n+        \"fn\",                 // 40\n+        \"for\",                // 41\n+        \"if\",                 // 42\n+        \"impl\",               // 43\n+        \"let\",                // 44\n+        \"__log\",              // 45\n+        \"loop\",               // 46\n+        \"match\",              // 47\n+        \"mod\",                // 48\n+        \"mut\",                // 49\n+        \"once\",               // 50\n+        \"priv\",               // 51\n+        \"pub\",                // 52\n+        \"ref\",                // 53\n+        \"return\",             // 54\n         \"static\",             // 27 -- also a special ident\n         \"self\",               //  8 -- also a special ident\n-        \"struct\",             // 57\n-        \"super\",              // 58\n-        \"true\",               // 59\n-        \"trait\",              // 60\n-        \"type\",               // 61\n-        \"unsafe\",             // 62\n-        \"use\",                // 63\n-        \"while\",              // 64\n+        \"struct\",             // 55\n+        \"super\",              // 56\n+        \"true\",               // 57\n+        \"trait\",              // 58\n+        \"type\",               // 59\n+        \"unsafe\",             // 60\n+        \"use\",                // 61\n+        \"while\",              // 62\n+        \"in\",                 // 63\n+        \"foreach\",            // 64\n \n         \"be\",                 // 65\n-        \"in\",                 // 66\n-        \"foreach\",            // 67\n+        \"pure\",               // 66\n     ];\n \n     @ident_interner {\n@@ -609,39 +608,39 @@ pub mod keywords {\n                 As => ident { name: 32, ctxt: 0 },\n                 Break => ident { name: 33, ctxt: 0 },\n                 Const => ident { name: 34, ctxt: 0 },\n-                Do => ident { name: 36, ctxt: 0 },\n-                Else => ident { name: 37, ctxt: 0 },\n-                Enum => ident { name: 38, ctxt: 0 },\n-                Extern => ident { name: 39, ctxt: 0 },\n-                False => ident { name: 40, ctxt: 0 },\n-                Fn => ident { name: 41, ctxt: 0 },\n-                For => ident { name: 42, ctxt: 0 },\n-                ForEach => ident { name: 67, ctxt: 0 },\n-                If => ident { name: 43, ctxt: 0 },\n-                Impl => ident { name: 44, ctxt: 0 },\n-                In => ident { name: 66, ctxt: 0 },\n-                Let => ident { name: 45, ctxt: 0 },\n-                __Log => ident { name: 46, ctxt: 0 },\n-                Loop => ident { name: 47, ctxt: 0 },\n-                Match => ident { name: 48, ctxt: 0 },\n-                Mod => ident { name: 49, ctxt: 0 },\n-                Mut => ident { name: 50, ctxt: 0 },\n-                Once => ident { name: 51, ctxt: 0 },\n-                Priv => ident { name: 52, ctxt: 0 },\n-                Pub => ident { name: 53, ctxt: 0 },\n-                Pure => ident { name: 54, ctxt: 0 },\n-                Ref => ident { name: 55, ctxt: 0 },\n-                Return => ident { name: 56, ctxt: 0 },\n+                Do => ident { name: 35, ctxt: 0 },\n+                Else => ident { name: 36, ctxt: 0 },\n+                Enum => ident { name: 37, ctxt: 0 },\n+                Extern => ident { name: 38, ctxt: 0 },\n+                False => ident { name: 39, ctxt: 0 },\n+                Fn => ident { name: 40, ctxt: 0 },\n+                For => ident { name: 41, ctxt: 0 },\n+                ForEach => ident { name: 64, ctxt: 0 },\n+                If => ident { name: 42, ctxt: 0 },\n+                Impl => ident { name: 43, ctxt: 0 },\n+                In => ident { name: 63, ctxt: 0 },\n+                Let => ident { name: 44, ctxt: 0 },\n+                __Log => ident { name: 45, ctxt: 0 },\n+                Loop => ident { name: 46, ctxt: 0 },\n+                Match => ident { name: 47, ctxt: 0 },\n+                Mod => ident { name: 48, ctxt: 0 },\n+                Mut => ident { name: 49, ctxt: 0 },\n+                Once => ident { name: 50, ctxt: 0 },\n+                Priv => ident { name: 51, ctxt: 0 },\n+                Pub => ident { name: 52, ctxt: 0 },\n+                Pure => ident { name: 66, ctxt: 0 },\n+                Ref => ident { name: 53, ctxt: 0 },\n+                Return => ident { name: 54, ctxt: 0 },\n                 Static => ident { name: 27, ctxt: 0 },\n                 Self => ident { name: 8, ctxt: 0 },\n-                Struct => ident { name: 57, ctxt: 0 },\n-                Super => ident { name: 58, ctxt: 0 },\n-                True => ident { name: 59, ctxt: 0 },\n-                Trait => ident { name: 60, ctxt: 0 },\n-                Type => ident { name: 61, ctxt: 0 },\n-                Unsafe => ident { name: 62, ctxt: 0 },\n-                Use => ident { name: 63, ctxt: 0 },\n-                While => ident { name: 64, ctxt: 0 },\n+                Struct => ident { name: 55, ctxt: 0 },\n+                Super => ident { name: 56, ctxt: 0 },\n+                True => ident { name: 57, ctxt: 0 },\n+                Trait => ident { name: 58, ctxt: 0 },\n+                Type => ident { name: 59, ctxt: 0 },\n+                Unsafe => ident { name: 60, ctxt: 0 },\n+                Use => ident { name: 61, ctxt: 0 },\n+                While => ident { name: 62, ctxt: 0 },\n                 Be => ident { name: 65, ctxt: 0 },\n             }\n         }\n@@ -658,7 +657,7 @@ pub fn is_keyword(kw: keywords::Keyword, tok: &Token) -> bool {\n pub fn is_any_keyword(tok: &Token) -> bool {\n     match *tok {\n         token::IDENT(sid, false) => match sid.name {\n-            8 | 27 | 32 .. 65 => true,\n+            8 | 27 | 32 .. 66 => true,\n             _ => false,\n         },\n         _ => false\n@@ -678,14 +677,13 @@ pub fn is_strict_keyword(tok: &Token) -> bool {\n pub fn is_reserved_keyword(tok: &Token) -> bool {\n     match *tok {\n         token::IDENT(sid, false) => match sid.name {\n-            65 => true,\n+            65 .. 66 => true,\n             _ => false,\n         },\n         _ => false,\n     }\n }\n \n-\n #[cfg(test)]\n mod test {\n     use super::*;"}, {"sha": "7e0e63a29ace49f58dff93467b1117dab509ca8f", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ec70ae5de0e33ab62732c59b0b2b0620cb8dce9/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ec70ae5de0e33ab62732c59b0b2b0620cb8dce9/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=8ec70ae5de0e33ab62732c59b0b2b0620cb8dce9", "patch": "@@ -108,14 +108,14 @@ pub fn print_crate(cm: @CodeMap,\n                    span_diagnostic: @diagnostic::span_handler,\n                    crate: &ast::Crate,\n                    filename: @str,\n-                   in: @io::Reader,\n+                   input: @io::Reader,\n                    out: @io::Writer,\n                    ann: pp_ann,\n                    is_expanded: bool) {\n     let (cmnts, lits) = comments::gather_comments_and_literals(\n         span_diagnostic,\n         filename,\n-        in\n+        input\n     );\n     let s = @ps {\n         s: pp::mk_printer(out, default_columns),"}, {"sha": "07749c7254b696b8925cdb5ec9fc35022659ba89", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ec70ae5de0e33ab62732c59b0b2b0620cb8dce9/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ec70ae5de0e33ab62732c59b0b2b0620cb8dce9/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=8ec70ae5de0e33ab62732c59b0b2b0620cb8dce9", "patch": "@@ -563,8 +563,8 @@ pub fn visit_expr<E:Clone>(ex: @expr, (e, v): (E, vt<E>)) {\n         expr_mac(ref mac) => visit_mac(mac, (e.clone(), v)),\n         expr_paren(x) => (v.visit_expr)(x, (e.clone(), v)),\n         expr_inline_asm(ref a) => {\n-            for a.inputs.iter().advance |&(_, in)| {\n-                (v.visit_expr)(in, (e.clone(), v));\n+            for a.inputs.iter().advance |&(_, input)| {\n+                (v.visit_expr)(input, (e.clone(), v));\n             }\n             for a.outputs.iter().advance |&(_, out)| {\n                 (v.visit_expr)(out, (e.clone(), v));"}, {"sha": "8ba5e2815a5a9b6fec675f90ea65341b81d36035", "filename": "src/test/compile-fail/obsolete-syntax.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8ec70ae5de0e33ab62732c59b0b2b0620cb8dce9/src%2Ftest%2Fcompile-fail%2Fobsolete-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ec70ae5de0e33ab62732c59b0b2b0620cb8dce9/src%2Ftest%2Fcompile-fail%2Fobsolete-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fobsolete-syntax.rs?ref=8ec70ae5de0e33ab62732c59b0b2b0620cb8dce9", "patch": "@@ -8,18 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn f1<T:copy>() -> T { }\n-//~^ ERROR obsolete syntax: lower-case kind bounds\n-\n-fn f1<T:send>() -> T { }\n-//~^ ERROR obsolete syntax: lower-case kind bounds\n-\n-fn f1<T:const>() -> T { }\n-//~^ ERROR obsolete syntax: lower-case kind bounds\n-\n-fn f1<T:owned>() -> T { }\n-//~^ ERROR obsolete syntax: lower-case kind bounds\n-\n struct s {\n     let foo: (),\n     //~^ ERROR obsolete syntax: `let` in field declaration"}, {"sha": "48f40e2eda759af0ff8ea30a8efe06d9cb38d771", "filename": "src/test/run-pass/issue-2904.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8ec70ae5de0e33ab62732c59b0b2b0620cb8dce9/src%2Ftest%2Frun-pass%2Fissue-2904.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ec70ae5de0e33ab62732c59b0b2b0620cb8dce9/src%2Ftest%2Frun-pass%2Fissue-2904.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2904.rs?ref=8ec70ae5de0e33ab62732c59b0b2b0620cb8dce9", "patch": "@@ -62,10 +62,10 @@ fn square_from_char(c: char) -> square {\n     }\n }\n \n-fn read_board_grid<rdr:'static + io::Reader>(in: rdr) -> ~[~[square]] {\n-    let in = @in as @io::Reader;\n+fn read_board_grid<rdr:'static + io::Reader>(input: rdr) -> ~[~[square]] {\n+    let input = @input as @io::Reader;\n     let mut grid = ~[];\n-    for in.each_line |line| {\n+    for input.each_line |line| {\n         let mut row = ~[];\n         for line.iter().advance |c| {\n             row.push(square_from_char(c))"}, {"sha": "fe39d1b11d3b8d1194eb4c18f1ca999dbbc7b757", "filename": "src/test/run-pass/option_addition.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8ec70ae5de0e33ab62732c59b0b2b0620cb8dce9/src%2Ftest%2Frun-pass%2Foption_addition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ec70ae5de0e33ab62732c59b0b2b0620cb8dce9/src%2Ftest%2Frun-pass%2Foption_addition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foption_addition.rs?ref=8ec70ae5de0e33ab62732c59b0b2b0620cb8dce9", "patch": "@@ -27,11 +27,11 @@ pub fn main() {\n     assert_eq!(foobar, somefoobar.get());\n }\n \n-fn optint(in: int) -> Option<int> {\n-    if in == 0 {\n+fn optint(input: int) -> Option<int> {\n+    if input == 0 {\n         return None;\n     }\n     else {\n-        return Some(in);\n+        return Some(input);\n     }\n }"}, {"sha": "d1b15b9bb7c09d2f5f56346a39ecad2a95a5620e", "filename": "src/test/run-pass/record-pat.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ec70ae5de0e33ab62732c59b0b2b0620cb8dce9/src%2Ftest%2Frun-pass%2Frecord-pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ec70ae5de0e33ab62732c59b0b2b0620cb8dce9/src%2Ftest%2Frun-pass%2Frecord-pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frecord-pat.rs?ref=8ec70ae5de0e33ab62732c59b0b2b0620cb8dce9", "patch": "@@ -12,8 +12,8 @@ enum t1 { a(int), b(uint), }\n struct T2 {x: t1, y: int}\n enum t3 { c(T2, uint), }\n \n-fn m(in: t3) -> int {\n-    match in {\n+fn m(input: t3) -> int {\n+    match input {\n       c(T2 {x: a(m), _}, _) => { return m; }\n       c(T2 {x: b(m), y: y}, z) => { return ((m + z) as int) + y; }\n     }"}]}