{"sha": "78125ec6b393441e628f9b04b84d6d125225fe30", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4MTI1ZWM2YjM5MzQ0MWU2MjhmOWIwNGI4NGQ2ZDEyNTIyNWZlMzA=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2020-09-06T16:57:13Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2020-09-11T12:59:01Z"}, "message": "Stop implicitly appending triples to config.toml hosts and targets\n\nPreviously, the CLI --target/--host definitions and configured options differed\nin their effect: when setting these on the CLI, only the passed triples would be\ncompiled for, while in config.toml we would also compile for the build triple\nand any host triples. This is needlessly confusing; users expect --target and\n--host to be identical to editing the configuration file.\n\nThe new behavior is to respect --host and --target when passed as the *only*\nconfigured triples (no triples are implicitly added). The default for --host is\nthe build triple, and the default for --target is the host triple(s), either\nconfigured or the default build triple.", "tree": {"sha": "4552b469c0c384fa61eec294e91b16c127057613", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4552b469c0c384fa61eec294e91b16c127057613"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78125ec6b393441e628f9b04b84d6d125225fe30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78125ec6b393441e628f9b04b84d6d125225fe30", "html_url": "https://github.com/rust-lang/rust/commit/78125ec6b393441e628f9b04b84d6d125225fe30", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78125ec6b393441e628f9b04b84d6d125225fe30/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b4eb0992614acc242169154d434db658ef6790e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4eb0992614acc242169154d434db658ef6790e0", "html_url": "https://github.com/rust-lang/rust/commit/b4eb0992614acc242169154d434db658ef6790e0"}], "stats": {"total": 99, "additions": 53, "deletions": 46}, "files": [{"sha": "2d5b3136450b923130238a8c1ee2380d7f989124", "filename": "config.toml.example", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/78125ec6b393441e628f9b04b84d6d125225fe30/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/78125ec6b393441e628f9b04b84d6d125225fe30/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=78125ec6b393441e628f9b04b84d6d125225fe30", "patch": "@@ -120,19 +120,18 @@\n # Defaults to host platform\n #build = \"x86_64-unknown-linux-gnu\"\n \n-# In addition to the build triple, other triples to produce full compiler\n-# toolchains for. Each of these triples will be bootstrapped from the build\n-# triple and then will continue to bootstrap themselves. This platform must\n-# currently be able to run all of the triples provided here.\n+# Which triples to produce a compiler toolchain for. Each of these triples will\n+# be bootstrapped from the build triple themselves.\n #\n # Defaults to just the build triple\n #host = [\"x86_64-unknown-linux-gnu\"]\n \n-# In addition to all host triples, other triples to produce the standard library\n-# for. Each host triple will be used to produce a copy of the standard library\n-# for each target triple.\n+# Which triples to build libraries (core/alloc/std/test/proc_macro) for. Each of\n+# these triples will be bootstrapped from the build triple themselves.\n #\n-# Defaults to just the build triple\n+# Defaults to `host`. If you set this explicitly, you likely want to add all\n+# host triples to this list as well in order for those host toolchains to be\n+# able to compile programs for their native target.\n #target = [\"x86_64-unknown-linux-gnu\"]\n \n # Use this directory to store build artifacts."}, {"sha": "5a79d3db5c90536b73f1ed9f620bfd8ba0edde62", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 24, "deletions": 28, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/78125ec6b393441e628f9b04b84d6d125225fe30/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78125ec6b393441e628f9b04b84d6d125225fe30/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=78125ec6b393441e628f9b04b84d6d125225fe30", "patch": "@@ -273,10 +273,8 @@ struct TomlConfig {\n #[serde(deny_unknown_fields, rename_all = \"kebab-case\")]\n struct Build {\n     build: Option<String>,\n-    #[serde(default)]\n-    host: Vec<String>,\n-    #[serde(default)]\n-    target: Vec<String>,\n+    host: Option<Vec<String>>,\n+    target: Option<Vec<String>>,\n     // This is ignored, the rust code always gets the build directory from the `BUILD_DIR` env variable\n     build_dir: Option<String>,\n     cargo: Option<String>,\n@@ -505,11 +503,6 @@ impl Config {\n             config.out = dir;\n         }\n \n-        // If --target was specified but --host wasn't specified, don't run any host-only tests.\n-        let has_hosts = !flags.host.is_empty();\n-        let has_targets = !flags.target.is_empty();\n-        config.skip_only_host_steps = !has_hosts && has_targets;\n-\n         let toml = file\n             .map(|file| {\n                 let contents = t!(fs::read_to_string(&file));\n@@ -528,25 +521,28 @@ impl Config {\n             .unwrap_or_else(TomlConfig::default);\n \n         let build = toml.build.clone().unwrap_or_default();\n-        // set by bootstrap.py\n-        config.hosts.push(config.build);\n-        for host in build.host.iter().map(|h| TargetSelection::from_user(h)) {\n-            if !config.hosts.contains(&host) {\n-                config.hosts.push(host);\n-            }\n-        }\n-        for target in config\n-            .hosts\n-            .iter()\n-            .copied()\n-            .chain(build.target.iter().map(|h| TargetSelection::from_user(h)))\n-        {\n-            if !config.targets.contains(&target) {\n-                config.targets.push(target);\n-            }\n-        }\n-        config.hosts = if !flags.host.is_empty() { flags.host } else { config.hosts };\n-        config.targets = if !flags.target.is_empty() { flags.target } else { config.targets };\n+\n+        // If --target was specified but --host wasn't specified, don't run any host-only tests.\n+        let has_hosts = build.host.is_some() || flags.host.is_some();\n+        let has_targets = build.target.is_some() || flags.target.is_some();\n+        config.skip_only_host_steps = !has_hosts && has_targets;\n+\n+        config.hosts = if let Some(arg_host) = flags.host.clone() {\n+            arg_host\n+        } else if let Some(file_host) = build.host {\n+            file_host.iter().map(|h| TargetSelection::from_user(h)).collect()\n+        } else {\n+            vec![config.build]\n+        };\n+        config.targets = if let Some(arg_target) = flags.target.clone() {\n+            arg_target\n+        } else if let Some(file_target) = build.target {\n+            file_target.iter().map(|h| TargetSelection::from_user(h)).collect()\n+        } else {\n+            // If target is *not* configured, then default to the host\n+            // toolchains.\n+            config.hosts.clone()\n+        };\n \n         config.nodejs = build.nodejs.map(PathBuf::from);\n         config.gdb = build.gdb.map(PathBuf::from);"}, {"sha": "ff8468574469eefaa7deadb3fe19d79bd4be3aae", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/78125ec6b393441e628f9b04b84d6d125225fe30/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78125ec6b393441e628f9b04b84d6d125225fe30/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=78125ec6b393441e628f9b04b84d6d125225fe30", "patch": "@@ -20,8 +20,8 @@ pub struct Flags {\n     pub stage: Option<u32>,\n     pub keep_stage: Vec<u32>,\n \n-    pub host: Vec<TargetSelection>,\n-    pub target: Vec<TargetSelection>,\n+    pub host: Option<Vec<TargetSelection>>,\n+    pub target: Option<Vec<TargetSelection>>,\n     pub config: Option<PathBuf>,\n     pub jobs: Option<u32>,\n     pub cmd: Subcommand,\n@@ -526,14 +526,26 @@ Arguments:\n                 .into_iter()\n                 .map(|j| j.parse().expect(\"`keep-stage` should be a number\"))\n                 .collect(),\n-            host: split(&matches.opt_strs(\"host\"))\n-                .into_iter()\n-                .map(|x| TargetSelection::from_user(&x))\n-                .collect::<Vec<_>>(),\n-            target: split(&matches.opt_strs(\"target\"))\n-                .into_iter()\n-                .map(|x| TargetSelection::from_user(&x))\n-                .collect::<Vec<_>>(),\n+            host: if matches.opt_present(\"host\") {\n+                Some(\n+                    split(&matches.opt_strs(\"host\"))\n+                        .into_iter()\n+                        .map(|x| TargetSelection::from_user(&x))\n+                        .collect::<Vec<_>>(),\n+                )\n+            } else {\n+                None\n+            },\n+            target: if matches.opt_present(\"target\") {\n+                Some(\n+                    split(&matches.opt_strs(\"target\"))\n+                        .into_iter()\n+                        .map(|x| TargetSelection::from_user(&x))\n+                        .collect::<Vec<_>>(),\n+                )\n+            } else {\n+                None\n+            },\n             config: cfg_file,\n             jobs: matches.opt_str(\"jobs\").map(|j| j.parse().expect(\"`jobs` should be a number\")),\n             cmd,"}]}