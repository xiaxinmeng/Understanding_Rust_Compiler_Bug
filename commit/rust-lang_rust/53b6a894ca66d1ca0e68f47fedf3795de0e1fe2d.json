{"sha": "53b6a894ca66d1ca0e68f47fedf3795de0e1fe2d", "node_id": "C_kwDOAAsO6NoAKDUzYjZhODk0Y2E2NmQxY2EwZTY4ZjQ3ZmVkZjM3OTVkZTBlMWZlMmQ", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2022-11-08T19:40:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-08T19:40:50Z"}, "message": "Rollup merge of #104097 - RalfJung:miri-alloc-benches, r=thomcc\n\nrun alloc benchmarks in Miri and fix UB\n\nMiri since recently has a \"fake monotonic clock\" that works even with isolation. Its measurements are not very meaningful but it means we can run these benches and check them for UB.\n\nAnd that's a good thing since there was UB here: fixes https://github.com/rust-lang/rust/issues/104096.\n\nr? ``@thomcc``", "tree": {"sha": "e8eb2ce37369f1d706618cf1f05713fe6ee5f889", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8eb2ce37369f1d706618cf1f05713fe6ee5f889"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/53b6a894ca66d1ca0e68f47fedf3795de0e1fe2d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjarDCCRBK7hj4Ov3rIwAATwwIAE0iZFSNTDqy8gmIuJDmkPxZ\nOChnvSFdKrmi6RbD1lNkZLTnCaZbdOw4s9aEsGuF2Pv03j4oBGiO036606uHEqtI\nw//YzbehdWXR7YKxoqbdFJ/CcRGNyGsknELViEMZ4WQDXVJ83tggyPWFSZGRXr3u\nZXfovyQ1+/qF+jq45gQFt/NDG9UQ6aUZwYvVuXQbHKxtPji4VZnUpIRJLqxRRkxk\nLHeb3+t3Z5/Mqeq/hyJCmrMZWCGvf8lhR/t9/MhsovX1pF89gtlUHMGjxVEZjsLG\n3i22tsRnYLYwXQArrkaOij2iqLjQbaHwchUXozhCQUl5gqPnr9YZJzAsFbk+pws=\n=r3bz\n-----END PGP SIGNATURE-----\n", "payload": "tree e8eb2ce37369f1d706618cf1f05713fe6ee5f889\nparent afaba1997d7295243f18dc8c0dcce5108e2868bd\nparent 29d451ccb3adf8eecb42c68d532459e630e2096f\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1667936450 +0100\ncommitter GitHub <noreply@github.com> 1667936450 +0100\n\nRollup merge of #104097 - RalfJung:miri-alloc-benches, r=thomcc\n\nrun alloc benchmarks in Miri and fix UB\n\nMiri since recently has a \"fake monotonic clock\" that works even with isolation. Its measurements are not very meaningful but it means we can run these benches and check them for UB.\n\nAnd that's a good thing since there was UB here: fixes https://github.com/rust-lang/rust/issues/104096.\n\nr? ``@thomcc``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/53b6a894ca66d1ca0e68f47fedf3795de0e1fe2d", "html_url": "https://github.com/rust-lang/rust/commit/53b6a894ca66d1ca0e68f47fedf3795de0e1fe2d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/53b6a894ca66d1ca0e68f47fedf3795de0e1fe2d/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "afaba1997d7295243f18dc8c0dcce5108e2868bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/afaba1997d7295243f18dc8c0dcce5108e2868bd", "html_url": "https://github.com/rust-lang/rust/commit/afaba1997d7295243f18dc8c0dcce5108e2868bd"}, {"sha": "29d451ccb3adf8eecb42c68d532459e630e2096f", "url": "https://api.github.com/repos/rust-lang/rust/commits/29d451ccb3adf8eecb42c68d532459e630e2096f", "html_url": "https://github.com/rust-lang/rust/commit/29d451ccb3adf8eecb42c68d532459e630e2096f"}], "stats": {"total": 35, "additions": 19, "deletions": 16}, "files": [{"sha": "1a5938fd34cf17d2b58d8c836be0f7d6c387af58", "filename": "library/alloc/src/alloc/tests.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/53b6a894ca66d1ca0e68f47fedf3795de0e1fe2d/library%2Falloc%2Fsrc%2Falloc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53b6a894ca66d1ca0e68f47fedf3795de0e1fe2d/library%2Falloc%2Fsrc%2Falloc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Falloc%2Ftests.rs?ref=53b6a894ca66d1ca0e68f47fedf3795de0e1fe2d", "patch": "@@ -22,7 +22,6 @@ fn allocate_zeroed() {\n }\n \n #[bench]\n-#[cfg_attr(miri, ignore)] // isolated Miri does not support benchmarks\n fn alloc_owned_small(b: &mut Bencher) {\n     b.iter(|| {\n         let _: Box<_> = Box::new(10);"}, {"sha": "6e0f83020f9574de20c56761a70ca4978941574a", "filename": "library/alloc/src/collections/vec_deque/tests.rs", "status": "modified", "additions": 19, "deletions": 15, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/53b6a894ca66d1ca0e68f47fedf3795de0e1fe2d/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53b6a894ca66d1ca0e68f47fedf3795de0e1fe2d/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Ftests.rs?ref=53b6a894ca66d1ca0e68f47fedf3795de0e1fe2d", "patch": "@@ -3,7 +3,6 @@ use core::iter::TrustedLen;\n use super::*;\n \n #[bench]\n-#[cfg_attr(miri, ignore)] // isolated Miri does not support benchmarks\n fn bench_push_back_100(b: &mut test::Bencher) {\n     let mut deq = VecDeque::with_capacity(101);\n     b.iter(|| {\n@@ -16,7 +15,6 @@ fn bench_push_back_100(b: &mut test::Bencher) {\n }\n \n #[bench]\n-#[cfg_attr(miri, ignore)] // isolated Miri does not support benchmarks\n fn bench_push_front_100(b: &mut test::Bencher) {\n     let mut deq = VecDeque::with_capacity(101);\n     b.iter(|| {\n@@ -29,12 +27,15 @@ fn bench_push_front_100(b: &mut test::Bencher) {\n }\n \n #[bench]\n-#[cfg_attr(miri, ignore)] // isolated Miri does not support benchmarks\n fn bench_pop_back_100(b: &mut test::Bencher) {\n-    let mut deq = VecDeque::<i32>::with_capacity(101);\n+    let size = 100;\n+    let mut deq = VecDeque::<i32>::with_capacity(size + 1);\n+    // We'll mess with private state to pretend like `deq` is filled.\n+    // Make sure the buffer is initialized so that we don't read uninit memory.\n+    unsafe { deq.ptr().write_bytes(0u8, size + 1) };\n \n     b.iter(|| {\n-        deq.head = 100;\n+        deq.head = size;\n         deq.tail = 0;\n         while !deq.is_empty() {\n             test::black_box(deq.pop_back());\n@@ -43,9 +44,9 @@ fn bench_pop_back_100(b: &mut test::Bencher) {\n }\n \n #[bench]\n-#[cfg_attr(miri, ignore)] // isolated Miri does not support benchmarks\n fn bench_retain_whole_10000(b: &mut test::Bencher) {\n-    let v = (1..100000).collect::<VecDeque<u32>>();\n+    let size = if cfg!(miri) { 1000 } else { 100000 };\n+    let v = (1..size).collect::<VecDeque<u32>>();\n \n     b.iter(|| {\n         let mut v = v.clone();\n@@ -54,9 +55,9 @@ fn bench_retain_whole_10000(b: &mut test::Bencher) {\n }\n \n #[bench]\n-#[cfg_attr(miri, ignore)] // isolated Miri does not support benchmarks\n fn bench_retain_odd_10000(b: &mut test::Bencher) {\n-    let v = (1..100000).collect::<VecDeque<u32>>();\n+    let size = if cfg!(miri) { 1000 } else { 100000 };\n+    let v = (1..size).collect::<VecDeque<u32>>();\n \n     b.iter(|| {\n         let mut v = v.clone();\n@@ -65,23 +66,26 @@ fn bench_retain_odd_10000(b: &mut test::Bencher) {\n }\n \n #[bench]\n-#[cfg_attr(miri, ignore)] // isolated Miri does not support benchmarks\n fn bench_retain_half_10000(b: &mut test::Bencher) {\n-    let v = (1..100000).collect::<VecDeque<u32>>();\n+    let size = if cfg!(miri) { 1000 } else { 100000 };\n+    let v = (1..size).collect::<VecDeque<u32>>();\n \n     b.iter(|| {\n         let mut v = v.clone();\n-        v.retain(|x| *x > 50000)\n+        v.retain(|x| *x > size / 2)\n     })\n }\n \n #[bench]\n-#[cfg_attr(miri, ignore)] // isolated Miri does not support benchmarks\n fn bench_pop_front_100(b: &mut test::Bencher) {\n-    let mut deq = VecDeque::<i32>::with_capacity(101);\n+    let size = 100;\n+    let mut deq = VecDeque::<i32>::with_capacity(size + 1);\n+    // We'll mess with private state to pretend like `deq` is filled.\n+    // Make sure the buffer is initialized so that we don't read uninit memory.\n+    unsafe { deq.ptr().write_bytes(0u8, size + 1) };\n \n     b.iter(|| {\n-        deq.head = 100;\n+        deq.head = size;\n         deq.tail = 0;\n         while !deq.is_empty() {\n             test::black_box(deq.pop_front());"}]}