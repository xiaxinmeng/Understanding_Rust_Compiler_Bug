{"sha": "29987b56e1dafff4a850eef4e668a364340fc59b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5OTg3YjU2ZTFkYWZmZjRhODUwZWVmNGU2NjhhMzY0MzQwZmM1OWI=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-08-05T17:04:11Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-08-05T17:04:11Z"}, "message": "Move 'as' precedence up to just above relational; support indexing str and vec by all integral types. Closes #94.", "tree": {"sha": "6b760dd4406b6bb0087f040626f1b0e37a542f82", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b760dd4406b6bb0087f040626f1b0e37a542f82"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/29987b56e1dafff4a850eef4e668a364340fc59b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/29987b56e1dafff4a850eef4e668a364340fc59b", "html_url": "https://github.com/rust-lang/rust/commit/29987b56e1dafff4a850eef4e668a364340fc59b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/29987b56e1dafff4a850eef4e668a364340fc59b/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "718c0b5963e6513337e4fee003b34423397c2d14", "url": "https://api.github.com/repos/rust-lang/rust/commits/718c0b5963e6513337e4fee003b34423397c2d14", "html_url": "https://github.com/rust-lang/rust/commit/718c0b5963e6513337e4fee003b34423397c2d14"}], "stats": {"total": 104, "additions": 67, "deletions": 37}, "files": [{"sha": "0476240c3fc0849a44e50d8c341d43b1bb2ca587", "filename": "src/Makefile", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/29987b56e1dafff4a850eef4e668a364340fc59b/src%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/29987b56e1dafff4a850eef4e668a364340fc59b/src%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FMakefile?ref=29987b56e1dafff4a850eef4e668a364340fc59b", "patch": "@@ -464,6 +464,7 @@ TEST_XFAILS_LLVM := $(TASK_XFAILS) \\\n                       i8-incr.rs \\\n                       import.rs \\\n                       inner-module.rs \\\n+                      integral-indexing.rs \\\n                       iter-range.rs \\\n                       iter-ret.rs \\\n                       large-records.rs \\"}, {"sha": "2ec34890669121c39216cfe7e7c88df110130f95", "filename": "src/boot/be/x86.ml", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/29987b56e1dafff4a850eef4e668a364340fc59b/src%2Fboot%2Fbe%2Fx86.ml", "raw_url": "https://github.com/rust-lang/rust/raw/29987b56e1dafff4a850eef4e668a364340fc59b/src%2Fboot%2Fbe%2Fx86.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fbe%2Fx86.ml?ref=29987b56e1dafff4a850eef4e668a364340fc59b", "patch": "@@ -1936,15 +1936,20 @@ let zero (dst:Il.cell) (count:Il.operand) : Asm.frag =\n ;;\n \n let mov (signed:bool) (dst:Il.cell) (src:Il.operand) : Asm.frag =\n-  if is_ty8 (Il.cell_scalar_ty dst) || is_ty8 (Il.operand_scalar_ty src)\n+  if is_ty8 (Il.cell_scalar_ty dst)\n   then\n     begin\n-      (match dst with\n-           Il.Reg (Il.Hreg r, _)\n-           -> assert (is_ok_r8 r) | _ -> ());\n-      (match src with\n-           Il.Cell (Il.Reg (Il.Hreg r, _))\n-           -> assert (is_ok_r8 r) | _ -> ());\n+      match dst with\n+          Il.Reg (Il.Hreg r, _) -> assert (is_ok_r8 r)\n+        | _ -> ()\n+    end;\n+\n+  if is_ty8 (Il.operand_scalar_ty src)\n+  then\n+    begin\n+      match src with\n+          Il.Cell (Il.Reg (Il.Hreg r, _)) -> assert (is_ok_r8 r)\n+        | _ -> ()\n     end;\n \n   match (signed, dst, src) with"}, {"sha": "3e17e0e49e7f68a1eb814bb85c2cf68955f8be6e", "filename": "src/boot/fe/pexp.ml", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/29987b56e1dafff4a850eef4e668a364340fc59b/src%2Fboot%2Ffe%2Fpexp.ml", "raw_url": "https://github.com/rust-lang/rust/raw/29987b56e1dafff4a850eef4e668a364340fc59b/src%2Fboot%2Ffe%2Fpexp.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Ffe%2Fpexp.ml?ref=29987b56e1dafff4a850eef4e668a364340fc59b", "patch": "@@ -817,11 +817,33 @@ and parse_or_pexp (ps:pstate) : pexp =\n     step lhs\n \n \n+and parse_as_pexp (ps:pstate) : pexp =\n+  let apos = lexpos ps in\n+  let pexp = ctxt \"as pexp\" parse_or_pexp ps in\n+  let rec step accum =\n+    match peek ps with\n+        AS ->\n+          bump ps;\n+          let tapos = lexpos ps in\n+          let t = parse_ty ps in\n+          let bpos = lexpos ps in\n+          let t = span ps tapos bpos t in\n+          let node =\n+            span ps apos bpos\n+              (PEXP_unop ((Ast.UNOP_cast t), accum))\n+          in\n+            step node\n+\n+      | _ -> accum\n+  in\n+    step pexp\n+\n+\n and parse_relational_pexp (ps:pstate) : pexp =\n   let name = \"relational pexp\" in\n   let apos = lexpos ps in\n-  let lhs = ctxt (name ^ \" lhs\") parse_or_pexp ps in\n-  let build = binop_build ps name apos parse_or_pexp in\n+  let lhs = ctxt (name ^ \" lhs\") parse_as_pexp ps in\n+  let build = binop_build ps name apos parse_as_pexp in\n   let rec step accum =\n     match peek ps with\n         LT -> build accum step Ast.BINOP_lt\n@@ -883,30 +905,8 @@ and parse_oror_pexp (ps:pstate) : pexp =\n     step lhs\n \n \n-and parse_as_pexp (ps:pstate) : pexp =\n-  let apos = lexpos ps in\n-  let pexp = ctxt \"as pexp\" parse_oror_pexp ps in\n-  let rec step accum =\n-    match peek ps with\n-        AS ->\n-          bump ps;\n-          let tapos = lexpos ps in\n-          let t = parse_ty ps in\n-          let bpos = lexpos ps in\n-          let t = span ps tapos bpos t in\n-          let node =\n-            span ps apos bpos\n-              (PEXP_unop ((Ast.UNOP_cast t), accum))\n-          in\n-            step node\n-\n-      | _ -> accum\n-  in\n-    step pexp\n-\n-\n and parse_pexp (ps:pstate) : pexp =\n-  parse_as_pexp ps\n+  parse_oror_pexp ps\n \n and parse_mutable_and_pexp (ps:pstate) : (Ast.mutability * pexp) =\n   let mutability = parse_mutability ps in"}, {"sha": "f54a5d653baaaa4298785bc76576114330a0130f", "filename": "src/boot/me/trans.ml", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/29987b56e1dafff4a850eef4e668a364340fc59b/src%2Fboot%2Fme%2Ftrans.ml", "raw_url": "https://github.com/rust-lang/rust/raw/29987b56e1dafff4a850eef4e668a364340fc59b/src%2Fboot%2Fme%2Ftrans.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftrans.ml?ref=29987b56e1dafff4a850eef4e668a364340fc59b", "patch": "@@ -914,7 +914,8 @@ let trans_visitor\n       let atop = trans_atom at in\n       let unit_sz = ty_sz_in_current_frame ty in\n       let idx = next_vreg_cell word_sty in\n-        emit (Il.binary Il.UMUL idx atop unit_sz);\n+        mov idx atop;\n+        emit (Il.binary Il.UMUL idx (Il.Cell idx) unit_sz);\n         let elt_mem = trans_bounds_check (deref cell) (Il.Cell idx) in\n           (Il.Mem (elt_mem, referent_type abi ty), ty)\n     in"}, {"sha": "23210ea1ff8211a5177862120542c90f6164af0b", "filename": "src/boot/me/type.ml", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/29987b56e1dafff4a850eef4e668a364340fc59b/src%2Fboot%2Fme%2Ftype.ml", "raw_url": "https://github.com/rust-lang/rust/raw/29987b56e1dafff4a850eef4e668a364340fc59b/src%2Fboot%2Fme%2Ftype.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftype.ml?ref=29987b56e1dafff4a850eef4e668a364340fc59b", "patch": "@@ -380,19 +380,20 @@ let check_stmt (cx:Semant.ctxt) : (fn_ctx -> Ast.stmt -> unit) =\n               sprintf_itype ()\n \n         | `Type (Ast.TY_vec ty_vec), Ast.COMP_atom atom ->\n-            demand Ast.TY_int (check_atom atom);\n+            demand_integer (check_atom atom);\n             LTYPE_mono ty_vec\n \n         | `Type (Ast.TY_vec _), _ ->\n-            Common.err None \"the vector type '%a' must be indexed via an int\"\n+            Common.err None\n+              \"the vector type '%a' must be indexed by an integral type\"\n               sprintf_itype ()\n \n         | `Type Ast.TY_str, Ast.COMP_atom atom ->\n-            demand Ast.TY_int (check_atom atom);\n+            demand_integer (check_atom atom);\n             LTYPE_mono (Ast.TY_mach Common.TY_u8)\n \n         | `Type Ast.TY_str, _ ->\n-            Common.err None \"strings must be indexed via an int\"\n+            Common.err None \"strings must be indexed by an integral type\"\n \n         | `Type (Ast.TY_box ty_box), Ast.COMP_deref -> LTYPE_mono ty_box\n "}, {"sha": "fe7d147c30c1d87030db86a5b919247e13b19a5d", "filename": "src/test/run-pass/integral-indexing.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/29987b56e1dafff4a850eef4e668a364340fc59b/src%2Ftest%2Frun-pass%2Fintegral-indexing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29987b56e1dafff4a850eef4e668a364340fc59b/src%2Ftest%2Frun-pass%2Fintegral-indexing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintegral-indexing.rs?ref=29987b56e1dafff4a850eef4e668a364340fc59b", "patch": "@@ -0,0 +1,22 @@\n+// This is a testcase for issue #94.\n+\n+fn main() {\n+\n+  let vec[int] v = vec(0, 1, 2, 3, 4, 5);\n+  let str s = \"abcdef\";\n+  check (v.(3u) == 3);\n+  check (v.(3u8) == 3);\n+  check (v.(3i8) == 3);\n+  check (v.(3u32) == 3);\n+  check (v.(3i32) == 3);\n+\n+  log v.(3u8);\n+\n+  check (s.(3u) == 'd' as u8);\n+  check (s.(3u8) == 'd' as u8);\n+  check (s.(3i8) == 'd' as u8);\n+  check (s.(3u32) == 'd' as u8);\n+  check (s.(3i32) == 'd' as u8);\n+\n+  log s.(3u8);\n+}\n\\ No newline at end of file"}]}