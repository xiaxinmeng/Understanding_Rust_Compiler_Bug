{"sha": "763b13a74e02457c98a11e707548433917fdee23", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2M2IxM2E3NGUwMjQ1N2M5OGExMWU3MDc1NDg0MzM5MTdmZGVlMjM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-10-02T12:26:40Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-10-02T12:26:40Z"}, "message": "Reduce visibiity", "tree": {"sha": "fb0383f267e480b3d048f710a6877476e2492e63", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb0383f267e480b3d048f710a6877476e2492e63"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/763b13a74e02457c98a11e707548433917fdee23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/763b13a74e02457c98a11e707548433917fdee23", "html_url": "https://github.com/rust-lang/rust/commit/763b13a74e02457c98a11e707548433917fdee23", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/763b13a74e02457c98a11e707548433917fdee23/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6574a6f448e3315343c8db497b5e68033ed4d603", "url": "https://api.github.com/repos/rust-lang/rust/commits/6574a6f448e3315343c8db497b5e68033ed4d603", "html_url": "https://github.com/rust-lang/rust/commit/6574a6f448e3315343c8db497b5e68033ed4d603"}], "stats": {"total": 27, "additions": 14, "deletions": 13}, "files": [{"sha": "bab3ec1ff118938d33b47fb1711436c63e89e77e", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/763b13a74e02457c98a11e707548433917fdee23/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/763b13a74e02457c98a11e707548433917fdee23/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=763b13a74e02457c98a11e707548433917fdee23", "patch": "@@ -15,7 +15,8 @@ macro_rules! eprintln {\n     ($($tt:tt)*) => { stdx::eprintln!($($tt)*) };\n }\n \n-pub mod mock_analysis;\n+#[cfg(test)]\n+mod mock_analysis;\n \n mod markup;\n mod prime_caches;"}, {"sha": "327cdf91ebf30678b9f61789cfbfcb80fcec9617", "filename": "crates/ide/src/mock_analysis.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/763b13a74e02457c98a11e707548433917fdee23/crates%2Fide%2Fsrc%2Fmock_analysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/763b13a74e02457c98a11e707548433917fdee23/crates%2Fide%2Fsrc%2Fmock_analysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fmock_analysis.rs?ref=763b13a74e02457c98a11e707548433917fdee23", "patch": "@@ -14,7 +14,7 @@ use crate::{\n /// Mock analysis is used in test to bootstrap an AnalysisHost/Analysis\n /// from a set of in-memory files.\n #[derive(Debug, Default)]\n-pub struct MockAnalysis {\n+pub(crate) struct MockAnalysis {\n     files: Vec<Fixture>,\n }\n \n@@ -29,15 +29,15 @@ impl MockAnalysis {\n     /// //- /foo.rs\n     /// struct Baz;\n     /// ```\n-    pub fn with_files(ra_fixture: &str) -> MockAnalysis {\n+    pub(crate) fn with_files(ra_fixture: &str) -> MockAnalysis {\n         let (res, pos) = MockAnalysis::with_fixture(ra_fixture);\n         assert!(pos.is_none());\n         res\n     }\n \n     /// Same as `with_files`, but requires that a single file contains a `<|>` marker,\n     /// whose position is also returned.\n-    pub fn with_files_and_position(fixture: &str) -> (MockAnalysis, FilePosition) {\n+    pub(crate) fn with_files_and_position(fixture: &str) -> (MockAnalysis, FilePosition) {\n         let (res, position) = MockAnalysis::with_fixture(fixture);\n         let (file_id, range_or_offset) = position.expect(\"expected a marker (<|>)\");\n         let offset = match range_or_offset {\n@@ -70,12 +70,12 @@ impl MockAnalysis {\n         file_id\n     }\n \n-    pub fn id_of(&self, path: &str) -> FileId {\n+    pub(crate) fn id_of(&self, path: &str) -> FileId {\n         let (file_id, _) =\n             self.files().find(|(_, data)| path == data.path).expect(\"no file in this mock\");\n         file_id\n     }\n-    pub fn annotations(&self) -> Vec<(FileRange, String)> {\n+    pub(crate) fn annotations(&self) -> Vec<(FileRange, String)> {\n         self.files()\n             .flat_map(|(file_id, fixture)| {\n                 let annotations = extract_annotations(&fixture.text);\n@@ -85,15 +85,15 @@ impl MockAnalysis {\n             })\n             .collect()\n     }\n-    pub fn files(&self) -> impl Iterator<Item = (FileId, &Fixture)> + '_ {\n+    pub(crate) fn files(&self) -> impl Iterator<Item = (FileId, &Fixture)> + '_ {\n         self.files.iter().enumerate().map(|(idx, fixture)| (FileId(idx as u32 + 1), fixture))\n     }\n-    pub fn annotation(&self) -> (FileRange, String) {\n+    pub(crate) fn annotation(&self) -> (FileRange, String) {\n         let mut all = self.annotations();\n         assert_eq!(all.len(), 1);\n         all.pop().unwrap()\n     }\n-    pub fn analysis_host(self) -> AnalysisHost {\n+    pub(crate) fn analysis_host(self) -> AnalysisHost {\n         let mut host = AnalysisHost::default();\n         let mut change = AnalysisChange::new();\n         let mut file_set = FileSet::default();\n@@ -146,26 +146,26 @@ impl MockAnalysis {\n         host.apply_change(change);\n         host\n     }\n-    pub fn analysis(self) -> Analysis {\n+    pub(crate) fn analysis(self) -> Analysis {\n         self.analysis_host().analysis()\n     }\n }\n \n /// Creates analysis from a multi-file fixture, returns positions marked with <|>.\n-pub fn analysis_and_position(ra_fixture: &str) -> (Analysis, FilePosition) {\n+pub(crate) fn analysis_and_position(ra_fixture: &str) -> (Analysis, FilePosition) {\n     let (mock, position) = MockAnalysis::with_files_and_position(ra_fixture);\n     (mock.analysis(), position)\n }\n \n /// Creates analysis for a single file.\n-pub fn single_file(ra_fixture: &str) -> (Analysis, FileId) {\n+pub(crate) fn single_file(ra_fixture: &str) -> (Analysis, FileId) {\n     let mock = MockAnalysis::with_files(ra_fixture);\n     let file_id = mock.id_of(\"/main.rs\");\n     (mock.analysis(), file_id)\n }\n \n /// Creates analysis for a single file, returns range marked with a pair of <|>.\n-pub fn analysis_and_range(ra_fixture: &str) -> (Analysis, FileRange) {\n+pub(crate) fn analysis_and_range(ra_fixture: &str) -> (Analysis, FileRange) {\n     let (res, position) = MockAnalysis::with_fixture(ra_fixture);\n     let (file_id, range_or_offset) = position.expect(\"expected a marker (<|>)\");\n     let range = match range_or_offset {"}]}