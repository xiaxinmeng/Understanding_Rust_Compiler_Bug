{"sha": "8eee9149e87ea58d4191d04ebe6faf57ac8485a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlZWU5MTQ5ZTg3ZWE1OGQ0MTkxZDA0ZWJlNmZhZjU3YWM4NDg1YTM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-03-02T12:31:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-02T12:31:15Z"}, "message": "Merge #7848\n\n7848: Bump cargo_metadata r=matklad a=lnicola\n\n\n\nCo-authored-by: Lauren\u021biu Nicola <lnicola@dend.ro>", "tree": {"sha": "22b944216345ee0bda6f6b8beddd5122e18fa79b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/22b944216345ee0bda6f6b8beddd5122e18fa79b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8eee9149e87ea58d4191d04ebe6faf57ac8485a3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgPjATCRBK7hj4Ov3rIwAAdHIIADKuuKMYaYfyOKfJAvVm3EvJ\nhwt1rlh0HLsVQ8aUHuDjWTs6CQ47uEl8IMk8XpsYf+Ze1FjtmtoGHSr4XPl09Vnn\n3fZM5QTaPowcxHiORUcupxOXW8jRqmPmVyFztH8zIoI5SMv9H7WOy149YDdMo6zX\nQ6jrV73gRIMuAhnOD3cz/knZYqOocy1dFvqMreqXnZwDF6VJs/E8LnUI/fyXwPRa\nT340mQMKL8wa2iQXnlqf5sRaF3uIqmk7oi9hFg1JZE9LxOduoYlQd9QdPQjHEdOj\nvxJuz6BhB0WaBjNbUpqXgrR2A8J1RxH7G46Hm95rXlTJri0WjEGSvKXzG9XN2q4=\n=SbRb\n-----END PGP SIGNATURE-----\n", "payload": "tree 22b944216345ee0bda6f6b8beddd5122e18fa79b\nparent f5c25f6b83400847f26f2acaeda1dc85bacb807c\nparent b20708f6ee652310083957c519e35a4a4e73496d\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1614688275 +0000\ncommitter GitHub <noreply@github.com> 1614688275 +0000\n\nMerge #7848\n\n7848: Bump cargo_metadata r=matklad a=lnicola\n\n\n\nCo-authored-by: Lauren\u021biu Nicola <lnicola@dend.ro>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8eee9149e87ea58d4191d04ebe6faf57ac8485a3", "html_url": "https://github.com/rust-lang/rust/commit/8eee9149e87ea58d4191d04ebe6faf57ac8485a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8eee9149e87ea58d4191d04ebe6faf57ac8485a3/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f5c25f6b83400847f26f2acaeda1dc85bacb807c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5c25f6b83400847f26f2acaeda1dc85bacb807c", "html_url": "https://github.com/rust-lang/rust/commit/f5c25f6b83400847f26f2acaeda1dc85bacb807c"}, {"sha": "b20708f6ee652310083957c519e35a4a4e73496d", "url": "https://api.github.com/repos/rust-lang/rust/commits/b20708f6ee652310083957c519e35a4a4e73496d", "html_url": "https://github.com/rust-lang/rust/commit/b20708f6ee652310083957c519e35a4a4e73496d"}], "stats": {"total": 84, "additions": 47, "deletions": 37}, "files": [{"sha": "739edb93282b40d22b102e9be3768f919038ab9e", "filename": "Cargo.lock", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/8eee9149e87ea58d4191d04ebe6faf57ac8485a3/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/8eee9149e87ea58d4191d04ebe6faf57ac8485a3/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=8eee9149e87ea58d4191d04ebe6faf57ac8485a3", "patch": "@@ -111,6 +111,15 @@ version = \"1.4.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"ae44d1a3d5a19df61dd0c8beb138458ac2a53a7ac09eba97d55592540004306b\"\n \n+[[package]]\n+name = \"camino\"\n+version = \"1.0.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"9bb47ab72bdba43021afa16dc1ef4d80c980d366b17ed37ea8d2ebe2087075b9\"\n+dependencies = [\n+ \"serde\",\n+]\n+\n [[package]]\n name = \"cargo-platform\"\n version = \"0.1.1\"\n@@ -122,10 +131,11 @@ dependencies = [\n \n [[package]]\n name = \"cargo_metadata\"\n-version = \"0.12.3\"\n+version = \"0.13.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"7714a157da7991e23d90686b9524b9e12e0407a108647f52e9328f4b3d51ac7f\"\n+checksum = \"081e3f0755c1f380c2d010481b6fa2e02973586d5f2b24eebb7a2a1d98b143d8\"\n dependencies = [\n+ \"camino\",\n  \"cargo-platform\",\n  \"semver\",\n  \"semver-parser\",\n@@ -779,9 +789,9 @@ checksum = \"e2abad23fbc42b3700f2f279844dc832adb2b2eb069b2df918f455c4e18cc646\"\n \n [[package]]\n name = \"libc\"\n-version = \"0.2.86\"\n+version = \"0.2.87\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"b7282d924be3275cec7f6756ff4121987bc6481325397dde6ba3e7802b1a8b1c\"\n+checksum = \"265d751d31d6780a3f956bb5b8022feba2d94eeee5a84ba64f4212eedca42213\"\n \n [[package]]\n name = \"libloading\"\n@@ -1005,9 +1015,9 @@ checksum = \"a9a7ab5d64814df0fe4a4b5ead45ed6c5f181ee3ff04ba344313a6c80446c5d4\"\n \n [[package]]\n name = \"once_cell\"\n-version = \"1.7.0\"\n+version = \"1.7.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"10acf907b94fc1b1a152d08ef97e7759650268cf986bf127f387e602b02c7e5a\"\n+checksum = \"ea78b9742c52ac729753c1590e9adc5248ea9bdaf974597efd46c74cfaa5fb54\"\n \n [[package]]\n name = \"oorandom\"\n@@ -1116,9 +1126,9 @@ dependencies = [\n \n [[package]]\n name = \"pin-project-lite\"\n-version = \"0.2.4\"\n+version = \"0.2.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"439697af366c49a6d0a010c56a0d97685bc140ce0d377b13a2ea2aa42d64a827\"\n+checksum = \"0cf491442e4b033ed1c722cb9f0df5fcfcf4de682466c46469c36bc47dc5548a\"\n \n [[package]]\n name = \"proc-macro-hack\""}, {"sha": "2a1a21b28ba3c91c890689bb163ce3b8ba288e77", "filename": "crates/flycheck/Cargo.toml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8eee9149e87ea58d4191d04ebe6faf57ac8485a3/crates%2Fflycheck%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/8eee9149e87ea58d4191d04ebe6faf57ac8485a3/crates%2Fflycheck%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fflycheck%2FCargo.toml?ref=8eee9149e87ea58d4191d04ebe6faf57ac8485a3", "patch": "@@ -12,9 +12,9 @@ doctest = false\n [dependencies]\n crossbeam-channel = \"0.5.0\"\n log = \"0.4.8\"\n-cargo_metadata = \"0.12.2\"\n+cargo_metadata = \"0.13\"\n serde_json = \"1.0.48\"\n jod-thread = \"0.1.1\"\n \n toolchain = { path = \"../toolchain\", version = \"0.0.0\" }\n-stdx = { path = \"../stdx\", version = \"0.0.0\"  }\n+stdx = { path = \"../stdx\", version = \"0.0.0\" }"}, {"sha": "e2a59497aac108f0158c681456566065852cbdc3", "filename": "crates/flycheck/src/lib.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8eee9149e87ea58d4191d04ebe6faf57ac8485a3/crates%2Fflycheck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eee9149e87ea58d4191d04ebe6faf57ac8485a3/crates%2Fflycheck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fflycheck%2Fsrc%2Flib.rs?ref=8eee9149e87ea58d4191d04ebe6faf57ac8485a3", "patch": "@@ -194,7 +194,7 @@ impl FlycheckActor {\n                     cargo_metadata::Message::BuildScriptExecuted(_)\n                     | cargo_metadata::Message::BuildFinished(_)\n                     | cargo_metadata::Message::TextLine(_)\n-                    | cargo_metadata::Message::Unknown => {}\n+                    | _ => {}\n                 },\n             }\n         }\n@@ -329,8 +329,7 @@ impl CargoActor {\n             // Skip certain kinds of messages to only spend time on what's useful\n             match &message {\n                 cargo_metadata::Message::CompilerArtifact(artifact) if artifact.fresh => (),\n-                cargo_metadata::Message::BuildScriptExecuted(_)\n-                | cargo_metadata::Message::Unknown => (),\n+                cargo_metadata::Message::BuildScriptExecuted(_) => (),\n                 _ => self.sender.send(message).unwrap(),\n             }\n         }"}, {"sha": "4c1b3036ae98644c0b25fa34766f2038b2eaa117", "filename": "crates/proc_macro_srv/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eee9149e87ea58d4191d04ebe6faf57ac8485a3/crates%2Fproc_macro_srv%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/8eee9149e87ea58d4191d04ebe6faf57ac8485a3/crates%2Fproc_macro_srv%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_srv%2FCargo.toml?ref=8eee9149e87ea58d4191d04ebe6faf57ac8485a3", "patch": "@@ -20,7 +20,7 @@ proc_macro_api = { path = \"../proc_macro_api\", version = \"0.0.0\" }\n test_utils = { path = \"../test_utils\", version = \"0.0.0\" }\n \n [dev-dependencies]\n-cargo_metadata = \"0.12.2\"\n+cargo_metadata = \"0.13\"\n \n # used as proc macro test targets\n serde_derive = \"1.0.106\""}, {"sha": "22813052df3069228155427d15f9722949e08862", "filename": "crates/proc_macro_srv/src/tests/utils.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8eee9149e87ea58d4191d04ebe6faf57ac8485a3/crates%2Fproc_macro_srv%2Fsrc%2Ftests%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eee9149e87ea58d4191d04ebe6faf57ac8485a3/crates%2Fproc_macro_srv%2Fsrc%2Ftests%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_srv%2Fsrc%2Ftests%2Futils.rs?ref=8eee9149e87ea58d4191d04ebe6faf57ac8485a3", "patch": "@@ -8,6 +8,7 @@ use test_utils::assert_eq_text;\n \n mod fixtures {\n     use cargo_metadata::Message;\n+    use std::path::PathBuf;\n     use std::process::Command;\n \n     // Use current project metadata to get the proc-macro dylib path\n@@ -24,7 +25,7 @@ mod fixtures {\n                     if artifact.target.kind.contains(&\"proc-macro\".to_string()) {\n                         let repr = format!(\"{} {}\", crate_name, version);\n                         if artifact.package_id.repr.starts_with(&repr) {\n-                            return artifact.filenames[0].clone();\n+                            return PathBuf::from(&artifact.filenames[0]);\n                         }\n                     }\n                 }"}, {"sha": "fe3258332affeeb9fcf073637118d1391ed85aa3", "filename": "crates/project_model/Cargo.toml", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8eee9149e87ea58d4191d04ebe6faf57ac8485a3/crates%2Fproject_model%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/8eee9149e87ea58d4191d04ebe6faf57ac8485a3/crates%2Fproject_model%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2FCargo.toml?ref=8eee9149e87ea58d4191d04ebe6faf57ac8485a3", "patch": "@@ -12,7 +12,7 @@ doctest = false\n [dependencies]\n log = \"0.4.8\"\n rustc-hash = \"1.1.0\"\n-cargo_metadata = \"0.12.2\"\n+cargo_metadata = \"0.13\"\n serde = { version = \"1.0.106\", features = [\"derive\"] }\n serde_json = \"1.0.48\"\n anyhow = \"1.0.26\"\n@@ -22,7 +22,7 @@ la-arena = { version = \"0.2.0\", path = \"../../lib/arena\" }\n cfg = { path = \"../cfg\", version = \"0.0.0\" }\n base_db = { path = \"../base_db\", version = \"0.0.0\" }\n toolchain = { path = \"../toolchain\", version = \"0.0.0\" }\n-proc_macro_api =  { path = \"../proc_macro_api\", version = \"0.0.0\" }\n-paths =  { path = \"../paths\", version = \"0.0.0\" }\n-stdx =  { path = \"../stdx\", version = \"0.0.0\" }\n-profile =  { path = \"../profile\", version = \"0.0.0\" }\n+proc_macro_api = { path = \"../proc_macro_api\", version = \"0.0.0\" }\n+paths = { path = \"../paths\", version = \"0.0.0\" }\n+stdx = { path = \"../stdx\", version = \"0.0.0\" }\n+profile = { path = \"../profile\", version = \"0.0.0\" }"}, {"sha": "728a258eaeae96ed4b4b6ed8237c1ea03553d883", "filename": "crates/project_model/src/build_data.rs", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/8eee9149e87ea58d4191d04ebe6faf57ac8485a3/crates%2Fproject_model%2Fsrc%2Fbuild_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eee9149e87ea58d4191d04ebe6faf57ac8485a3/crates%2Fproject_model%2Fsrc%2Fbuild_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fbuild_data.rs?ref=8eee9149e87ea58d4191d04ebe6faf57ac8485a3", "patch": "@@ -1,14 +1,14 @@\n //! Handles build script specific information\n \n use std::{\n-    ffi::OsStr,\n     io::BufReader,\n-    path::{Path, PathBuf},\n+    path::PathBuf,\n     process::{Command, Stdio},\n     sync::Arc,\n };\n \n use anyhow::Result;\n+use cargo_metadata::camino::Utf8Path;\n use cargo_metadata::{BuildScript, Message};\n use itertools::Itertools;\n use paths::{AbsPath, AbsPathBuf};\n@@ -162,8 +162,8 @@ fn collect_from_workspace(\n                     let res = res.entry(package_id.repr.clone()).or_default();\n                     // cargo_metadata crate returns default (empty) path for\n                     // older cargos, which is not absolute, so work around that.\n-                    if out_dir != PathBuf::default() {\n-                        let out_dir = AbsPathBuf::assert(out_dir);\n+                    if !out_dir.as_str().is_empty() {\n+                        let out_dir = AbsPathBuf::assert(PathBuf::from(out_dir.into_os_string()));\n                         res.out_dir = Some(out_dir);\n                         res.cfgs = cfgs;\n                     }\n@@ -178,7 +178,7 @@ fn collect_from_workspace(\n                         // Skip rmeta file\n                         if let Some(filename) = message.filenames.iter().find(|name| is_dylib(name))\n                         {\n-                            let filename = AbsPathBuf::assert(filename.clone());\n+                            let filename = AbsPathBuf::assert(PathBuf::from(&filename));\n                             let res = res.entry(package_id.repr.clone()).or_default();\n                             res.proc_macro_dylib_path = Some(filename);\n                         }\n@@ -187,9 +187,9 @@ fn collect_from_workspace(\n                 Message::CompilerMessage(message) => {\n                     progress(message.target.name.clone());\n                 }\n-                Message::Unknown => (),\n                 Message::BuildFinished(_) => {}\n                 Message::TextLine(_) => {}\n+                _ => {}\n             }\n         }\n     }\n@@ -209,8 +209,8 @@ fn collect_from_workspace(\n }\n \n // FIXME: File a better way to know if it is a dylib\n-fn is_dylib(path: &Path) -> bool {\n-    match path.extension().and_then(OsStr::to_str).map(|it| it.to_string().to_lowercase()) {\n+fn is_dylib(path: &Utf8Path) -> bool {\n+    match path.extension().map(|e| e.to_string().to_lowercase()) {\n         None => false,\n         Some(ext) => matches!(ext.as_str(), \"dll\" | \"dylib\" | \"so\"),\n     }\n@@ -227,9 +227,7 @@ fn inject_cargo_env(package: &cargo_metadata::Package, build_data: &mut BuildDat\n \n     let mut manifest_dir = package.manifest_path.clone();\n     manifest_dir.pop();\n-    if let Some(cargo_manifest_dir) = manifest_dir.to_str() {\n-        env.push((\"CARGO_MANIFEST_DIR\".into(), cargo_manifest_dir.into()));\n-    }\n+    env.push((\"CARGO_MANIFEST_DIR\".into(), manifest_dir.into_string()));\n \n     // Not always right, but works for common cases.\n     env.push((\"CARGO\".into(), \"cargo\".into()));\n@@ -251,7 +249,6 @@ fn inject_cargo_env(package: &cargo_metadata::Package, build_data: &mut BuildDat\n     env.push((\"CARGO_PKG_REPOSITORY\".into(), package.repository.clone().unwrap_or_default()));\n     env.push((\"CARGO_PKG_LICENSE\".into(), package.license.clone().unwrap_or_default()));\n \n-    let license_file =\n-        package.license_file.as_ref().map(|buf| buf.display().to_string()).unwrap_or_default();\n+    let license_file = package.license_file.as_ref().map(|buf| buf.to_string()).unwrap_or_default();\n     env.push((\"CARGO_PKG_LICENSE_FILE\".into(), license_file));\n }"}, {"sha": "f7241b711366971aa4036365f292a0e57cc2b802", "filename": "crates/project_model/src/cargo_workspace.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8eee9149e87ea58d4191d04ebe6faf57ac8485a3/crates%2Fproject_model%2Fsrc%2Fcargo_workspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eee9149e87ea58d4191d04ebe6faf57ac8485a3/crates%2Fproject_model%2Fsrc%2Fcargo_workspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fcargo_workspace.rs?ref=8eee9149e87ea58d4191d04ebe6faf57ac8485a3", "patch": "@@ -1,5 +1,6 @@\n //! FIXME: write short doc here\n \n+use std::path::PathBuf;\n use std::{convert::TryInto, ops, process::Command, sync::Arc};\n \n use anyhow::{Context, Result};\n@@ -249,11 +250,12 @@ impl CargoWorkspace {\n             let edition = edition\n                 .parse::<Edition>()\n                 .with_context(|| format!(\"Failed to parse edition {}\", edition))?;\n+\n             let pkg = packages.alloc(PackageData {\n                 id: id.repr.clone(),\n                 name: name.clone(),\n                 version: version.to_string(),\n-                manifest: AbsPathBuf::assert(manifest_path.clone()),\n+                manifest: AbsPathBuf::assert(PathBuf::from(&manifest_path)),\n                 targets: Vec::new(),\n                 is_member,\n                 edition,\n@@ -268,7 +270,7 @@ impl CargoWorkspace {\n                 let tgt = targets.alloc(TargetData {\n                     package: pkg,\n                     name: meta_tgt.name.clone(),\n-                    root: AbsPathBuf::assert(meta_tgt.src_path.clone()),\n+                    root: AbsPathBuf::assert(PathBuf::from(&meta_tgt.src_path)),\n                     kind: TargetKind::new(meta_tgt.kind.as_slice()),\n                     is_proc_macro,\n                 });\n@@ -305,7 +307,8 @@ impl CargoWorkspace {\n             packages[source].active_features.extend(node.features);\n         }\n \n-        let workspace_root = AbsPathBuf::assert(meta.workspace_root);\n+        let workspace_root =\n+            AbsPathBuf::assert(PathBuf::from(meta.workspace_root.into_os_string()));\n         let build_data_config = BuildDataConfig::new(\n             cargo_toml.to_path_buf(),\n             config.clone(),"}, {"sha": "0ad832c0ee20186922348ff6e29837edf6336531", "filename": "crates/rust-analyzer/src/diagnostics/to_proto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eee9149e87ea58d4191d04ebe6faf57ac8485a3/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eee9149e87ea58d4191d04ebe6faf57ac8485a3/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs?ref=8eee9149e87ea58d4191d04ebe6faf57ac8485a3", "patch": "@@ -29,7 +29,7 @@ fn diagnostic_severity(\n         },\n         DiagnosticLevel::Note => lsp_types::DiagnosticSeverity::Information,\n         DiagnosticLevel::Help => lsp_types::DiagnosticSeverity::Hint,\n-        DiagnosticLevel::Unknown => return None,\n+        _ => return None,\n     };\n     Some(res)\n }"}]}