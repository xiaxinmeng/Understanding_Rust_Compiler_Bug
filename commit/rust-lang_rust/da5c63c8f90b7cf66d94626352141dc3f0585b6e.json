{"sha": "da5c63c8f90b7cf66d94626352141dc3f0585b6e", "node_id": "C_kwDOAAsO6NoAKGRhNWM2M2M4ZjkwYjdjZjY2ZDk0NjI2MzUyMTQxZGMzZjA1ODViNmU", "commit": {"author": {"name": "Ariel Davis", "email": "ariel.z.davis@icloud.com", "date": "2023-05-04T23:40:41Z"}, "committer": {"name": "Ariel Davis", "email": "ariel.z.davis@icloud.com", "date": "2023-05-06T07:49:23Z"}, "message": "Use boxed slice\n\nAs well as doing the shrink_to_fit, we also don't have to keep track of\nthe capacity anymore.", "tree": {"sha": "24aa500efc782fcbf19223a0f3ea2bd62ff9ed37", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24aa500efc782fcbf19223a0f3ea2bd62ff9ed37"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da5c63c8f90b7cf66d94626352141dc3f0585b6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da5c63c8f90b7cf66d94626352141dc3f0585b6e", "html_url": "https://github.com/rust-lang/rust/commit/da5c63c8f90b7cf66d94626352141dc3f0585b6e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da5c63c8f90b7cf66d94626352141dc3f0585b6e/comments", "author": {"login": "azdavis", "id": 6496454, "node_id": "MDQ6VXNlcjY0OTY0NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6496454?v=4", "gravatar_id": "", "url": "https://api.github.com/users/azdavis", "html_url": "https://github.com/azdavis", "followers_url": "https://api.github.com/users/azdavis/followers", "following_url": "https://api.github.com/users/azdavis/following{/other_user}", "gists_url": "https://api.github.com/users/azdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/azdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/azdavis/subscriptions", "organizations_url": "https://api.github.com/users/azdavis/orgs", "repos_url": "https://api.github.com/users/azdavis/repos", "events_url": "https://api.github.com/users/azdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/azdavis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "azdavis", "id": 6496454, "node_id": "MDQ6VXNlcjY0OTY0NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6496454?v=4", "gravatar_id": "", "url": "https://api.github.com/users/azdavis", "html_url": "https://github.com/azdavis", "followers_url": "https://api.github.com/users/azdavis/followers", "following_url": "https://api.github.com/users/azdavis/following{/other_user}", "gists_url": "https://api.github.com/users/azdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/azdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/azdavis/subscriptions", "organizations_url": "https://api.github.com/users/azdavis/orgs", "repos_url": "https://api.github.com/users/azdavis/repos", "events_url": "https://api.github.com/users/azdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/azdavis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9c88460e448efab4f784187f8bcf95c5a945673", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9c88460e448efab4f784187f8bcf95c5a945673", "html_url": "https://github.com/rust-lang/rust/commit/d9c88460e448efab4f784187f8bcf95c5a945673"}], "stats": {"total": 18, "additions": 8, "deletions": 10}, "files": [{"sha": "e31f3006e21118ce30edc743bc5d7692dca23920", "filename": "lib/line-index/src/lib.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/da5c63c8f90b7cf66d94626352141dc3f0585b6e/lib%2Fline-index%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da5c63c8f90b7cf66d94626352141dc3f0585b6e/lib%2Fline-index%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/lib%2Fline-index%2Fsrc%2Flib.rs?ref=da5c63c8f90b7cf66d94626352141dc3f0585b6e", "patch": "@@ -13,9 +13,9 @@ pub use text_size::{TextRange, TextSize};\n #[derive(Clone, Debug, PartialEq, Eq)]\n pub struct LineIndex {\n     /// Offset the beginning of each line, zero-based.\n-    newlines: Vec<TextSize>,\n+    newlines: Box<[TextSize]>,\n     /// List of non-ASCII characters on each line.\n-    line_wide_chars: IntMap<u32, Vec<WideChar>>,\n+    line_wide_chars: IntMap<u32, Box<[WideChar]>>,\n }\n \n /// Line/Column information in native, utf8 format.\n@@ -97,7 +97,8 @@ impl LineIndex {\n \n                 // Save any utf-16 characters seen in the previous line\n                 if !wide_chars.is_empty() {\n-                    line_wide_chars.insert(line, std::mem::take(&mut wide_chars));\n+                    line_wide_chars\n+                        .insert(line, std::mem::take(&mut wide_chars).into_boxed_slice());\n                 }\n \n                 // Prepare for processing the next line\n@@ -115,13 +116,10 @@ impl LineIndex {\n \n         // Save any utf-16 characters seen in the last line\n         if !wide_chars.is_empty() {\n-            line_wide_chars.insert(line, wide_chars);\n+            line_wide_chars.insert(line, wide_chars.into_boxed_slice());\n         }\n \n-        newlines.shrink_to_fit();\n-        line_wide_chars.shrink_to_fit();\n-\n-        LineIndex { newlines, line_wide_chars }\n+        LineIndex { newlines: newlines.into_boxed_slice(), line_wide_chars }\n     }\n \n     /// Transforms the `TextSize` into a `LineCol`.\n@@ -168,7 +166,7 @@ impl LineIndex {\n     fn utf8_to_wide_col(&self, enc: WideEncoding, line: u32, col: TextSize) -> usize {\n         let mut res: usize = col.into();\n         if let Some(wide_chars) = self.line_wide_chars.get(&line) {\n-            for c in wide_chars {\n+            for c in wide_chars.iter() {\n                 if c.end <= col {\n                     res -= usize::from(c.len()) - c.wide_len(enc);\n                 } else {\n@@ -183,7 +181,7 @@ impl LineIndex {\n \n     fn wide_to_utf8_col(&self, enc: WideEncoding, line: u32, mut col: u32) -> TextSize {\n         if let Some(wide_chars) = self.line_wide_chars.get(&line) {\n-            for c in wide_chars {\n+            for c in wide_chars.iter() {\n                 if col > u32::from(c.start) {\n                     col += u32::from(c.len()) - c.wide_len(enc) as u32;\n                 } else {"}]}