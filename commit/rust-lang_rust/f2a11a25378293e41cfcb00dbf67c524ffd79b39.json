{"sha": "f2a11a25378293e41cfcb00dbf67c524ffd79b39", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyYTExYTI1Mzc4MjkzZTQxY2ZjYjAwZGJmNjdjNTI0ZmZkNzliMzk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-13T14:53:55Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-13T14:53:55Z"}, "message": "Auto merge of #79017 - GuillaumeGomez:rollup-5orhudd, r=GuillaumeGomez\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #77151 (Add regression test for issue #76042)\n - #77996 (Doc change: Remove mention of `fnv` in HashMap)\n - #78463 (Add type to `ConstKind::Placeholder`)\n - #78984 (Rustdoc check option)\n - #78985 (add dropck test for const params)\n - #78996 (add explicit test for const param promotion)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "0408fb65f32c44940088084727863b4ded39c2f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0408fb65f32c44940088084727863b4ded39c2f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f2a11a25378293e41cfcb00dbf67c524ffd79b39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f2a11a25378293e41cfcb00dbf67c524ffd79b39", "html_url": "https://github.com/rust-lang/rust/commit/f2a11a25378293e41cfcb00dbf67c524ffd79b39", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f2a11a25378293e41cfcb00dbf67c524ffd79b39/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1f7ca788d28f8df9ccd161137c3429be1ed9d0e", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1f7ca788d28f8df9ccd161137c3429be1ed9d0e", "html_url": "https://github.com/rust-lang/rust/commit/a1f7ca788d28f8df9ccd161137c3429be1ed9d0e"}, {"sha": "7ea8e32adb091a7cd342208eda5559652af57da6", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ea8e32adb091a7cd342208eda5559652af57da6", "html_url": "https://github.com/rust-lang/rust/commit/7ea8e32adb091a7cd342208eda5559652af57da6"}], "stats": {"total": 348, "additions": 286, "deletions": 62}, "files": [{"sha": "f554b51800a72bc14e8c5e2d756e3f084a791e21", "filename": "compiler/rustc_infer/src/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f2a11a25378293e41cfcb00dbf67c524ffd79b39/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2a11a25378293e41cfcb00dbf67c524ffd79b39/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=f2a11a25378293e41cfcb00dbf67c524ffd79b39", "patch": "@@ -277,7 +277,7 @@ impl CanonicalizeRegionMode for CanonicalizeFreeRegionsOtherThanStatic {\n struct Canonicalizer<'cx, 'tcx> {\n     infcx: Option<&'cx InferCtxt<'cx, 'tcx>>,\n     tcx: TyCtxt<'tcx>,\n-    variables: SmallVec<[CanonicalVarInfo; 8]>,\n+    variables: SmallVec<[CanonicalVarInfo<'tcx>; 8]>,\n     query_state: &'cx mut OriginalQueryValues<'tcx>,\n     // Note that indices is only used once `var_values` is big enough to be\n     // heap-allocated.\n@@ -542,7 +542,7 @@ impl<'cx, 'tcx> Canonicalizer<'cx, 'tcx> {\n     /// or returns an existing variable if `kind` has already been\n     /// seen. `kind` is expected to be an unbound variable (or\n     /// potentially a free region).\n-    fn canonical_var(&mut self, info: CanonicalVarInfo, kind: GenericArg<'tcx>) -> BoundVar {\n+    fn canonical_var(&mut self, info: CanonicalVarInfo<'tcx>, kind: GenericArg<'tcx>) -> BoundVar {\n         let Canonicalizer { variables, query_state, indices, .. } = self;\n \n         let var_values = &mut query_state.var_values;\n@@ -621,7 +621,7 @@ impl<'cx, 'tcx> Canonicalizer<'cx, 'tcx> {\n     /// representing the region `r`; return a region referencing it.\n     fn canonical_var_for_region(\n         &mut self,\n-        info: CanonicalVarInfo,\n+        info: CanonicalVarInfo<'tcx>,\n         r: ty::Region<'tcx>,\n     ) -> ty::Region<'tcx> {\n         let var = self.canonical_var(info, r.into());\n@@ -633,7 +633,7 @@ impl<'cx, 'tcx> Canonicalizer<'cx, 'tcx> {\n     /// if `ty_var` is bound to anything; if so, canonicalize\n     /// *that*. Otherwise, create a new canonical variable for\n     /// `ty_var`.\n-    fn canonicalize_ty_var(&mut self, info: CanonicalVarInfo, ty_var: Ty<'tcx>) -> Ty<'tcx> {\n+    fn canonicalize_ty_var(&mut self, info: CanonicalVarInfo<'tcx>, ty_var: Ty<'tcx>) -> Ty<'tcx> {\n         let infcx = self.infcx.expect(\"encountered ty-var without infcx\");\n         let bound_to = infcx.shallow_resolve(ty_var);\n         if bound_to != ty_var {\n@@ -650,7 +650,7 @@ impl<'cx, 'tcx> Canonicalizer<'cx, 'tcx> {\n     /// `const_var`.\n     fn canonicalize_const_var(\n         &mut self,\n-        info: CanonicalVarInfo,\n+        info: CanonicalVarInfo<'tcx>,\n         const_var: &'tcx ty::Const<'tcx>,\n     ) -> &'tcx ty::Const<'tcx> {\n         let infcx = self.infcx.expect(\"encountered const-var without infcx\");"}, {"sha": "0c26639e9b0fec31a947e491217ac87dac5c5c61", "filename": "compiler/rustc_infer/src/infer/canonical/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f2a11a25378293e41cfcb00dbf67c524ffd79b39/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2a11a25378293e41cfcb00dbf67c524ffd79b39/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fmod.rs?ref=f2a11a25378293e41cfcb00dbf67c524ffd79b39", "patch": "@@ -82,7 +82,7 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n     fn instantiate_canonical_vars(\n         &self,\n         span: Span,\n-        variables: &List<CanonicalVarInfo>,\n+        variables: &List<CanonicalVarInfo<'tcx>>,\n         universe_map: impl Fn(ty::UniverseIndex) -> ty::UniverseIndex,\n     ) -> CanonicalVarValues<'tcx> {\n         let var_values: IndexVec<BoundVar, GenericArg<'tcx>> = variables\n@@ -100,7 +100,7 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n     fn instantiate_canonical_var(\n         &self,\n         span: Span,\n-        cv_info: CanonicalVarInfo,\n+        cv_info: CanonicalVarInfo<'tcx>,\n         universe_map: impl Fn(ty::UniverseIndex) -> ty::UniverseIndex,\n     ) -> GenericArg<'tcx> {\n         match cv_info.kind {\n@@ -154,7 +154,7 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n                 self.tcx\n                     .mk_const(ty::Const {\n                         val: ty::ConstKind::Placeholder(placeholder_mapped),\n-                        ty: self.tcx.ty_error(), // FIXME(const_generics)\n+                        ty: name.ty,\n                     })\n                     .into()\n             }"}, {"sha": "4a5fd4b2aa5c83ef18e900a59c7b2c1ed544395a", "filename": "compiler/rustc_infer/src/infer/higher_ranked/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2a11a25378293e41cfcb00dbf67c524ffd79b39/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2a11a25378293e41cfcb00dbf67c524ffd79b39/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=f2a11a25378293e41cfcb00dbf67c524ffd79b39", "patch": "@@ -95,7 +95,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             self.tcx.mk_const(ty::Const {\n                 val: ty::ConstKind::Placeholder(ty::PlaceholderConst {\n                     universe: next_universe,\n-                    name: bound_var,\n+                    name: ty::BoundConst { var: bound_var, ty },\n                 }),\n                 ty,\n             })"}, {"sha": "947b016a1fc93df413067a1a36d5730f98612424", "filename": "compiler/rustc_middle/src/infer/canonical.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f2a11a25378293e41cfcb00dbf67c524ffd79b39/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2a11a25378293e41cfcb00dbf67c524ffd79b39/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs?ref=f2a11a25378293e41cfcb00dbf67c524ffd79b39", "patch": "@@ -40,7 +40,7 @@ pub struct Canonical<'tcx, V> {\n     pub value: V,\n }\n \n-pub type CanonicalVarInfos<'tcx> = &'tcx List<CanonicalVarInfo>;\n+pub type CanonicalVarInfos<'tcx> = &'tcx List<CanonicalVarInfo<'tcx>>;\n \n /// A set of values corresponding to the canonical variables from some\n /// `Canonical`. You can give these values to\n@@ -88,11 +88,11 @@ impl Default for OriginalQueryValues<'tcx> {\n /// a copy of the canonical value in some other inference context,\n /// with fresh inference variables replacing the canonical values.\n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TyDecodable, TyEncodable, HashStable)]\n-pub struct CanonicalVarInfo {\n-    pub kind: CanonicalVarKind,\n+pub struct CanonicalVarInfo<'tcx> {\n+    pub kind: CanonicalVarKind<'tcx>,\n }\n \n-impl CanonicalVarInfo {\n+impl<'tcx> CanonicalVarInfo<'tcx> {\n     pub fn universe(&self) -> ty::UniverseIndex {\n         self.kind.universe()\n     }\n@@ -113,7 +113,7 @@ impl CanonicalVarInfo {\n /// in the type-theory sense of the term -- i.e., a \"meta\" type system\n /// that analyzes type-like values.\n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TyDecodable, TyEncodable, HashStable)]\n-pub enum CanonicalVarKind {\n+pub enum CanonicalVarKind<'tcx> {\n     /// Some kind of type inference variable.\n     Ty(CanonicalTyVarKind),\n \n@@ -132,10 +132,10 @@ pub enum CanonicalVarKind {\n     Const(ty::UniverseIndex),\n \n     /// A \"placeholder\" that represents \"any const\".\n-    PlaceholderConst(ty::PlaceholderConst),\n+    PlaceholderConst(ty::PlaceholderConst<'tcx>),\n }\n \n-impl CanonicalVarKind {\n+impl<'tcx> CanonicalVarKind<'tcx> {\n     pub fn universe(self) -> ty::UniverseIndex {\n         match self {\n             CanonicalVarKind::Ty(kind) => match kind {\n@@ -287,9 +287,11 @@ pub type QueryOutlivesConstraint<'tcx> =\n     ty::Binder<ty::OutlivesPredicate<GenericArg<'tcx>, Region<'tcx>>>;\n \n CloneTypeFoldableAndLiftImpls! {\n-    crate::infer::canonical::Certainty,\n-    crate::infer::canonical::CanonicalVarInfo,\n-    crate::infer::canonical::CanonicalVarKind,\n+    for <'tcx> {\n+        crate::infer::canonical::Certainty,\n+        crate::infer::canonical::CanonicalVarInfo<'tcx>,\n+        crate::infer::canonical::CanonicalVarKind<'tcx>,\n+    }\n }\n \n CloneTypeFoldableImpls! {"}, {"sha": "1def4936860f17f1b8b486a19548e2f89e3685ed", "filename": "compiler/rustc_middle/src/ty/codec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2a11a25378293e41cfcb00dbf67c524ffd79b39/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2a11a25378293e41cfcb00dbf67c524ffd79b39/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs?ref=f2a11a25378293e41cfcb00dbf67c524ffd79b39", "patch": "@@ -278,7 +278,7 @@ impl<'tcx, D: TyDecoder<'tcx>> Decodable<D> for ty::Region<'tcx> {\n impl<'tcx, D: TyDecoder<'tcx>> Decodable<D> for CanonicalVarInfos<'tcx> {\n     fn decode(decoder: &mut D) -> Result<Self, D::Error> {\n         let len = decoder.read_usize()?;\n-        let interned: Result<Vec<CanonicalVarInfo>, _> =\n+        let interned: Result<Vec<CanonicalVarInfo<'tcx>>, _> =\n             (0..len).map(|_| Decodable::decode(decoder)).collect();\n         Ok(decoder.tcx().intern_canonical_var_infos(interned?.as_slice()))\n     }"}, {"sha": "ca51f2a941174001d221c44284855dc29874a8c0", "filename": "compiler/rustc_middle/src/ty/consts/kind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2a11a25378293e41cfcb00dbf67c524ffd79b39/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2a11a25378293e41cfcb00dbf67c524ffd79b39/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs?ref=f2a11a25378293e41cfcb00dbf67c524ffd79b39", "patch": "@@ -23,7 +23,7 @@ pub enum ConstKind<'tcx> {\n     Bound(ty::DebruijnIndex, ty::BoundVar),\n \n     /// A placeholder const - universally quantified higher-ranked const.\n-    Placeholder(ty::PlaceholderConst),\n+    Placeholder(ty::PlaceholderConst<'tcx>),\n \n     /// Used in the HIR by using `Unevaluated` everywhere and later normalizing to one of the other\n     /// variants when the code is monomorphic enough for that."}, {"sha": "3838e1b006f70939363788281f23362f02ef2f54", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f2a11a25378293e41cfcb00dbf67c524ffd79b39/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2a11a25378293e41cfcb00dbf67c524ffd79b39/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=f2a11a25378293e41cfcb00dbf67c524ffd79b39", "patch": "@@ -83,7 +83,7 @@ pub struct CtxtInterners<'tcx> {\n     type_: InternedSet<'tcx, TyS<'tcx>>,\n     type_list: InternedSet<'tcx, List<Ty<'tcx>>>,\n     substs: InternedSet<'tcx, InternalSubsts<'tcx>>,\n-    canonical_var_infos: InternedSet<'tcx, List<CanonicalVarInfo>>,\n+    canonical_var_infos: InternedSet<'tcx, List<CanonicalVarInfo<'tcx>>>,\n     region: InternedSet<'tcx, RegionKind>,\n     existential_predicates: InternedSet<'tcx, List<ExistentialPredicate<'tcx>>>,\n     predicate: InternedSet<'tcx, PredicateInner<'tcx>>,\n@@ -1613,7 +1613,7 @@ nop_lift! {predicate; &'a PredicateInner<'a> => &'tcx PredicateInner<'tcx>}\n nop_list_lift! {type_list; Ty<'a> => Ty<'tcx>}\n nop_list_lift! {existential_predicates; ExistentialPredicate<'a> => ExistentialPredicate<'tcx>}\n nop_list_lift! {predicates; Predicate<'a> => Predicate<'tcx>}\n-nop_list_lift! {canonical_var_infos; CanonicalVarInfo => CanonicalVarInfo}\n+nop_list_lift! {canonical_var_infos; CanonicalVarInfo<'a> => CanonicalVarInfo<'tcx>}\n nop_list_lift! {projs; ProjectionKind => ProjectionKind}\n \n // This is the impl for `&'a InternalSubsts<'a>`.\n@@ -2049,7 +2049,7 @@ macro_rules! slice_interners {\n slice_interners!(\n     type_list: _intern_type_list(Ty<'tcx>),\n     substs: _intern_substs(GenericArg<'tcx>),\n-    canonical_var_infos: _intern_canonical_var_infos(CanonicalVarInfo),\n+    canonical_var_infos: _intern_canonical_var_infos(CanonicalVarInfo<'tcx>),\n     existential_predicates: _intern_existential_predicates(ExistentialPredicate<'tcx>),\n     predicates: _intern_predicates(Predicate<'tcx>),\n     projs: _intern_projs(ProjectionKind),\n@@ -2448,7 +2448,10 @@ impl<'tcx> TyCtxt<'tcx> {\n         if ts.is_empty() { List::empty() } else { self._intern_place_elems(ts) }\n     }\n \n-    pub fn intern_canonical_var_infos(self, ts: &[CanonicalVarInfo]) -> CanonicalVarInfos<'tcx> {\n+    pub fn intern_canonical_var_infos(\n+        self,\n+        ts: &[CanonicalVarInfo<'tcx>],\n+    ) -> CanonicalVarInfos<'tcx> {\n         if ts.is_empty() { List::empty() } else { self._intern_canonical_var_infos(ts) }\n     }\n "}, {"sha": "06e69a0009b1fe29c674f72dc6328b6d54efd95c", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f2a11a25378293e41cfcb00dbf67c524ffd79b39/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2a11a25378293e41cfcb00dbf67c524ffd79b39/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=f2a11a25378293e41cfcb00dbf67c524ffd79b39", "patch": "@@ -1580,11 +1580,9 @@ impl UniverseIndex {\n     }\n }\n \n-/// The \"placeholder index\" fully defines a placeholder region.\n-/// Placeholder regions are identified by both a **universe** as well\n-/// as a \"bound-region\" within that universe. The `bound_region` is\n-/// basically a name -- distinct bound regions within the same\n-/// universe are just two regions with an unknown relationship to one\n+/// The \"placeholder index\" fully defines a placeholder region, type, or const. Placeholders are\n+/// identified by both a universe, as well as a name residing within that universe. Distinct bound\n+/// regions/types/consts within the same universe simply have an unknown relationship to one\n /// another.\n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TyEncodable, TyDecodable, PartialOrd, Ord)]\n pub struct Placeholder<T> {\n@@ -1606,7 +1604,14 @@ pub type PlaceholderRegion = Placeholder<BoundRegion>;\n \n pub type PlaceholderType = Placeholder<BoundVar>;\n \n-pub type PlaceholderConst = Placeholder<BoundVar>;\n+#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, HashStable)]\n+#[derive(TyEncodable, TyDecodable, PartialOrd, Ord)]\n+pub struct BoundConst<'tcx> {\n+    pub var: BoundVar,\n+    pub ty: Ty<'tcx>,\n+}\n+\n+pub type PlaceholderConst<'tcx> = Placeholder<BoundConst<'tcx>>;\n \n /// A `DefId` which is potentially bundled with its corresponding generic parameter\n /// in case `did` is a const argument."}, {"sha": "27d90e6613748bdadf34799a91a97984324d551a", "filename": "library/std/src/collections/hash/map.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f2a11a25378293e41cfcb00dbf67c524ffd79b39/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2a11a25378293e41cfcb00dbf67c524ffd79b39/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs?ref=f2a11a25378293e41cfcb00dbf67c524ffd79b39", "patch": "@@ -34,8 +34,8 @@ use crate::sys;\n /// attacks such as HashDoS.\n ///\n /// The hashing algorithm can be replaced on a per-`HashMap` basis using the\n-/// [`default`], [`with_hasher`], and [`with_capacity_and_hasher`] methods. Many\n-/// alternative algorithms are available on crates.io, such as the [`fnv`] crate.\n+/// [`default`], [`with_hasher`], and [`with_capacity_and_hasher`] methods.\n+/// There are many alternative [hashing algorithms available on crates.io].\n ///\n /// It is required that the keys implement the [`Eq`] and [`Hash`] traits, although\n /// this can frequently be achieved by using `#[derive(PartialEq, Eq, Hash)]`.\n@@ -57,6 +57,7 @@ use crate::sys;\n /// The original C++ version of SwissTable can be found [here], and this\n /// [CppCon talk] gives an overview of how the algorithm works.\n ///\n+/// [hashing algorithms available on crates.io]: https://crates.io/keywords/hasher\n /// [SwissTable]: https://abseil.io/blog/20180927-swisstables\n /// [here]: https://github.com/abseil/abseil-cpp/blob/master/absl/container/internal/raw_hash_set.h\n /// [CppCon talk]: https://www.youtube.com/watch?v=ncHmEUmJZf4\n@@ -154,7 +155,6 @@ use crate::sys;\n /// [`default`]: Default::default\n /// [`with_hasher`]: Self::with_hasher\n /// [`with_capacity_and_hasher`]: Self::with_capacity_and_hasher\n-/// [`fnv`]: https://crates.io/crates/fnv\n ///\n /// ```\n /// use std::collections::HashMap;"}, {"sha": "c248d57a9ddf4bc4f9dc16de9b85c215ea603111", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f2a11a25378293e41cfcb00dbf67c524ffd79b39/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2a11a25378293e41cfcb00dbf67c524ffd79b39/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=f2a11a25378293e41cfcb00dbf67c524ffd79b39", "patch": "@@ -145,6 +145,9 @@ pub struct Options {\n     pub render_options: RenderOptions,\n     /// Output format rendering (used only for \"show-coverage\" option for the moment)\n     pub output_format: Option<OutputFormat>,\n+    /// If this option is set to `true`, rustdoc will only run checks and not generate\n+    /// documentation.\n+    pub run_check: bool,\n }\n \n impl fmt::Debug for Options {\n@@ -185,6 +188,7 @@ impl fmt::Debug for Options {\n             .field(\"runtool\", &self.runtool)\n             .field(\"runtool_args\", &self.runtool_args)\n             .field(\"enable-per-target-ignores\", &self.enable_per_target_ignores)\n+            .field(\"run_check\", &self.run_check)\n             .finish()\n     }\n }\n@@ -581,6 +585,7 @@ impl Options {\n         let enable_per_target_ignores = matches.opt_present(\"enable-per-target-ignores\");\n         let document_private = matches.opt_present(\"document-private-items\");\n         let document_hidden = matches.opt_present(\"document-hidden-items\");\n+        let run_check = matches.opt_present(\"check\");\n \n         let (lint_opts, describe_lints, lint_cap) = get_cmd_lint_options(matches, error_format);\n \n@@ -616,6 +621,7 @@ impl Options {\n             runtool_args,\n             enable_per_target_ignores,\n             test_builder,\n+            run_check,\n             render_options: RenderOptions {\n                 output,\n                 external_html,"}, {"sha": "a88efba77b41cc7efb0406d4971166a098c0022e", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f2a11a25378293e41cfcb00dbf67c524ffd79b39/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2a11a25378293e41cfcb00dbf67c524ffd79b39/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=f2a11a25378293e41cfcb00dbf67c524ffd79b39", "patch": "@@ -423,6 +423,7 @@ fn opts() -> Vec<RustcOptGroup> {\n                 \"specified the rustc-like binary to use as the test builder\",\n             )\n         }),\n+        unstable(\"check\", |o| o.optflag(\"\", \"check\", \"Run rustdoc checks\")),\n     ]\n }\n \n@@ -515,6 +516,7 @@ fn main_options(options: config::Options) -> MainResult {\n     // but we can't crates the Handler ahead of time because it's not Send\n     let diag_opts = (options.error_format, options.edition, options.debugging_opts.clone());\n     let show_coverage = options.show_coverage;\n+    let run_check = options.run_check;\n \n     // First, parse the crate and extract all relevant information.\n     info!(\"starting to run rustc\");\n@@ -540,6 +542,9 @@ fn main_options(options: config::Options) -> MainResult {\n         // if we ran coverage, bail early, we don't need to also generate docs at this point\n         // (also we didn't load in any of the useful passes)\n         return Ok(());\n+    } else if run_check {\n+        // Since we're in \"check\" mode, no need to generate anything beyond this point.\n+        return Ok(());\n     }\n \n     info!(\"going to format\");"}, {"sha": "291fc112c3407191e14ce33fc1f7b5798f228ce3", "filename": "src/test/rustdoc-ui/check-fail.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f2a11a25378293e41cfcb00dbf67c524ffd79b39/src%2Ftest%2Frustdoc-ui%2Fcheck-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2a11a25378293e41cfcb00dbf67c524ffd79b39/src%2Ftest%2Frustdoc-ui%2Fcheck-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcheck-fail.rs?ref=f2a11a25378293e41cfcb00dbf67c524ffd79b39", "patch": "@@ -0,0 +1,21 @@\n+// compile-flags: -Z unstable-options --check\n+\n+#![deny(missing_docs)]\n+#![deny(rustdoc)]\n+\n+//! ```rust,testharness\n+//~^ ERROR\n+//! let x = 12;\n+//! ```\n+\n+pub fn foo() {}\n+//~^ ERROR\n+//~^^ ERROR\n+\n+/// hello\n+//~^ ERROR\n+///\n+/// ```rust,testharness\n+/// let x = 12;\n+/// ```\n+pub fn bar() {}"}, {"sha": "b4f255642da5355e242ce7443f009a176de77a4d", "filename": "src/test/rustdoc-ui/check-fail.stderr", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/f2a11a25378293e41cfcb00dbf67c524ffd79b39/src%2Ftest%2Frustdoc-ui%2Fcheck-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f2a11a25378293e41cfcb00dbf67c524ffd79b39/src%2Ftest%2Frustdoc-ui%2Fcheck-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcheck-fail.stderr?ref=f2a11a25378293e41cfcb00dbf67c524ffd79b39", "patch": "@@ -0,0 +1,57 @@\n+error: missing documentation for a function\n+  --> $DIR/check-fail.rs:11:1\n+   |\n+LL | pub fn foo() {}\n+   | ^^^^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/check-fail.rs:3:9\n+   |\n+LL | #![deny(missing_docs)]\n+   |         ^^^^^^^^^^^^\n+\n+error: missing code example in this documentation\n+  --> $DIR/check-fail.rs:11:1\n+   |\n+LL | pub fn foo() {}\n+   | ^^^^^^^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/check-fail.rs:4:9\n+   |\n+LL | #![deny(rustdoc)]\n+   |         ^^^^^^^\n+   = note: `#[deny(missing_doc_code_examples)]` implied by `#[deny(rustdoc)]`\n+\n+error: unknown attribute `testharness`. Did you mean `test_harness`?\n+  --> $DIR/check-fail.rs:6:1\n+   |\n+LL | / //! ```rust,testharness\n+LL | |\n+LL | | //! let x = 12;\n+LL | | //! ```\n+   | |_______^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/check-fail.rs:4:9\n+   |\n+LL | #![deny(rustdoc)]\n+   |         ^^^^^^^\n+   = note: `#[deny(invalid_codeblock_attributes)]` implied by `#[deny(rustdoc)]`\n+   = help: the code block will either not be tested if not marked as a rust one or the code will be wrapped inside a main function\n+\n+error: unknown attribute `testharness`. Did you mean `test_harness`?\n+  --> $DIR/check-fail.rs:15:1\n+   |\n+LL | / /// hello\n+LL | |\n+LL | | ///\n+LL | | /// ```rust,testharness\n+LL | | /// let x = 12;\n+LL | | /// ```\n+   | |_______^\n+   |\n+   = help: the code block will either not be tested if not marked as a rust one or the code will be wrapped inside a main function\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "022c56214d451fafd197e8b13c21d3d27c6b1253", "filename": "src/test/rustdoc-ui/check.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f2a11a25378293e41cfcb00dbf67c524ffd79b39/src%2Ftest%2Frustdoc-ui%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2a11a25378293e41cfcb00dbf67c524ffd79b39/src%2Ftest%2Frustdoc-ui%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcheck.rs?ref=f2a11a25378293e41cfcb00dbf67c524ffd79b39", "patch": "@@ -0,0 +1,11 @@\n+// check-pass\n+// compile-flags: -Z unstable-options --check\n+\n+#![warn(missing_docs)]\n+//~^ WARN\n+//~^^ WARN\n+#![warn(rustdoc)]\n+\n+pub fn foo() {}\n+//~^ WARN\n+//~^^ WARN"}, {"sha": "27e5a736148e103d9eb1c4f223228d26afa6ee70", "filename": "src/test/rustdoc-ui/check.stderr", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/f2a11a25378293e41cfcb00dbf67c524ffd79b39/src%2Ftest%2Frustdoc-ui%2Fcheck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f2a11a25378293e41cfcb00dbf67c524ffd79b39/src%2Ftest%2Frustdoc-ui%2Fcheck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcheck.stderr?ref=f2a11a25378293e41cfcb00dbf67c524ffd79b39", "patch": "@@ -0,0 +1,49 @@\n+warning: missing documentation for the crate\n+  --> $DIR/check.rs:4:1\n+   |\n+LL | / #![warn(missing_docs)]\n+LL | |\n+LL | |\n+LL | | #![warn(rustdoc)]\n+LL | |\n+LL | | pub fn foo() {}\n+   | |_______________^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/check.rs:4:9\n+   |\n+LL | #![warn(missing_docs)]\n+   |         ^^^^^^^^^^^^\n+\n+warning: missing documentation for a function\n+  --> $DIR/check.rs:9:1\n+   |\n+LL | pub fn foo() {}\n+   | ^^^^^^^^^^^^\n+\n+warning: missing code example in this documentation\n+  --> $DIR/check.rs:4:1\n+   |\n+LL | / #![warn(missing_docs)]\n+LL | |\n+LL | |\n+LL | | #![warn(rustdoc)]\n+LL | |\n+LL | | pub fn foo() {}\n+   | |_______________^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/check.rs:7:9\n+   |\n+LL | #![warn(rustdoc)]\n+   |         ^^^^^^^\n+   = note: `#[warn(missing_doc_code_examples)]` implied by `#[warn(rustdoc)]`\n+\n+warning: missing code example in this documentation\n+  --> $DIR/check.rs:9:1\n+   |\n+LL | pub fn foo() {}\n+   | ^^^^^^^^^^^^^^^\n+\n+warning: 4 warnings emitted\n+"}, {"sha": "1fb4b35ddbe86fa33a8873201417d5db6e65234d", "filename": "src/test/rustdoc/check.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f2a11a25378293e41cfcb00dbf67c524ffd79b39/src%2Ftest%2Frustdoc%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2a11a25378293e41cfcb00dbf67c524ffd79b39/src%2Ftest%2Frustdoc%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fcheck.rs?ref=f2a11a25378293e41cfcb00dbf67c524ffd79b39", "patch": "@@ -0,0 +1,5 @@\n+// compile-flags: -Z unstable-options --check\n+\n+// @!has check/fn.foo.html\n+// @!has check/index.html\n+pub fn foo() {}"}, {"sha": "ac568bb75f002c08576e3e2ddade3c77f0402fe1", "filename": "src/test/ui/const-generics/promotion.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f2a11a25378293e41cfcb00dbf67c524ffd79b39/src%2Ftest%2Fui%2Fconst-generics%2Fpromotion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2a11a25378293e41cfcb00dbf67c524ffd79b39/src%2Ftest%2Fui%2Fconst-generics%2Fpromotion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fpromotion.rs?ref=f2a11a25378293e41cfcb00dbf67c524ffd79b39", "patch": "@@ -0,0 +1,11 @@\n+// run-pass\n+// tests that promoting expressions containing const parameters is allowed.\n+#![feature(min_const_generics)]\n+\n+fn promotion_test<const N: usize>() -> &'static usize {\n+    &(3 + N)\n+}\n+\n+fn main() {\n+    assert_eq!(promotion_test::<13>(), &16);\n+}"}, {"sha": "b0e5c371345dfe43f9b69a9ef8b4743b7cb9c9bf", "filename": "src/test/ui/dropck/issue-38868.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f2a11a25378293e41cfcb00dbf67c524ffd79b39/src%2Ftest%2Fui%2Fdropck%2Fissue-38868.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2a11a25378293e41cfcb00dbf67c524ffd79b39/src%2Ftest%2Fui%2Fdropck%2Fissue-38868.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fissue-38868.rs?ref=f2a11a25378293e41cfcb00dbf67c524ffd79b39", "previous_filename": "src/test/ui/issues/issue-38868.rs"}, {"sha": "10d1e7c4e66dc20aa908f49e9e195030a3266ebe", "filename": "src/test/ui/dropck/issue-38868.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f2a11a25378293e41cfcb00dbf67c524ffd79b39/src%2Ftest%2Fui%2Fdropck%2Fissue-38868.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f2a11a25378293e41cfcb00dbf67c524ffd79b39/src%2Ftest%2Fui%2Fdropck%2Fissue-38868.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fissue-38868.stderr?ref=f2a11a25378293e41cfcb00dbf67c524ffd79b39", "previous_filename": "src/test/ui/issues/issue-38868.stderr"}, {"sha": "02e8665cd2e3be1a67aa06a3b880cc4a87a6be42", "filename": "src/test/ui/dropck/reject-specialized-drops-8142.rs", "status": "renamed", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f2a11a25378293e41cfcb00dbf67c524ffd79b39/src%2Ftest%2Fui%2Fdropck%2Freject-specialized-drops-8142.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2a11a25378293e41cfcb00dbf67c524ffd79b39/src%2Ftest%2Fui%2Fdropck%2Freject-specialized-drops-8142.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Freject-specialized-drops-8142.rs?ref=f2a11a25378293e41cfcb00dbf67c524ffd79b39", "patch": "@@ -1,5 +1,6 @@\n // Issue 8142: Test that Drop impls cannot be specialized beyond the\n // predicates attached to the type definition itself.\n+#![feature(min_const_generics)]\n \n trait Bound { fn foo(&self) { } }\n struct K<'l1,'l2> { x: &'l1 i8, y: &'l2 u8 }\n@@ -15,6 +16,8 @@ struct T<'t,Ts:'t> { x: &'t Ts }\n struct U;\n struct V<Tva, Tvb> { x: *const Tva, y: *const Tvb }\n struct W<'l1, 'l2> { x: &'l1 i8, y: &'l2 u8 }\n+struct X<const Ca: usize>;\n+struct Y<const Ca: usize, const Cb: usize>;\n \n enum Enum<T> { Variant(T) }\n struct TupleStruct<T>(T);\n@@ -58,6 +61,12 @@ impl<One>         Drop for V<One,One>     { fn drop(&mut self) { } } // REJECT\n impl<'lw>         Drop for W<'lw,'lw>     { fn drop(&mut self) { } } // REJECT\n //~^ ERROR cannot infer an appropriate lifetime for lifetime parameter `'lw`\n \n+impl              Drop for X<3>           { fn drop(&mut self) { } } // REJECT\n+//~^ ERROR `Drop` impls cannot be specialized\n+\n+impl<const Ca: usize> Drop for Y<Ca, Ca>     { fn drop(&mut self) { } } // REJECT\n+//~^ ERROR `Drop` impls cannot be specialized\n+\n impl<AddsBnd:Bound> Drop for Enum<AddsBnd> { fn drop(&mut self) { } } // REJECT\n //~^ ERROR `Drop` impl requires `AddsBnd: Bound`\n ", "previous_filename": "src/test/ui/reject-specialized-drops-8142.rs"}, {"sha": "284cf59c822bd2b34a88eb25542ee899c98f9f63", "filename": "src/test/ui/dropck/reject-specialized-drops-8142.stderr", "status": "renamed", "additions": 52, "deletions": 28, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/f2a11a25378293e41cfcb00dbf67c524ffd79b39/src%2Ftest%2Fui%2Fdropck%2Freject-specialized-drops-8142.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f2a11a25378293e41cfcb00dbf67c524ffd79b39/src%2Ftest%2Fui%2Fdropck%2Freject-specialized-drops-8142.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Freject-specialized-drops-8142.stderr?ref=f2a11a25378293e41cfcb00dbf67c524ffd79b39", "patch": "@@ -1,151 +1,175 @@\n error[E0367]: `Drop` impl requires `'adds_bnd: 'al` but the struct it is implemented for does not\n-  --> $DIR/reject-specialized-drops-8142.rs:23:20\n+  --> $DIR/reject-specialized-drops-8142.rs:26:20\n    |\n LL | impl<'al,'adds_bnd:'al> Drop for K<'al,'adds_bnd> {                        // REJECT\n    |                    ^^^\n    |\n note: the implementor must specify the same requirement\n-  --> $DIR/reject-specialized-drops-8142.rs:5:1\n+  --> $DIR/reject-specialized-drops-8142.rs:6:1\n    |\n LL | struct K<'l1,'l2> { x: &'l1 i8, y: &'l2 u8 }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0367]: `Drop` impl requires `'adds_bnd: 'al` but the struct it is implemented for does not\n-  --> $DIR/reject-specialized-drops-8142.rs:27:67\n+  --> $DIR/reject-specialized-drops-8142.rs:30:67\n    |\n LL | impl<'al,'adds_bnd>     Drop for L<'al,'adds_bnd> where 'adds_bnd:'al {    // REJECT\n    |                                                                   ^^^\n    |\n note: the implementor must specify the same requirement\n-  --> $DIR/reject-specialized-drops-8142.rs:6:1\n+  --> $DIR/reject-specialized-drops-8142.rs:7:1\n    |\n LL | struct L<'l1,'l2> { x: &'l1 i8, y: &'l2 u8 }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/reject-specialized-drops-8142.rs:33:1\n+  --> $DIR/reject-specialized-drops-8142.rs:36:1\n    |\n LL | impl                    Drop for N<'static>     { fn drop(&mut self) { } } // REJECT\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected struct `N<'n>`\n               found struct `N<'static>`\n-note: the lifetime `'n` as defined on the struct at 8:10...\n-  --> $DIR/reject-specialized-drops-8142.rs:8:10\n+note: the lifetime `'n` as defined on the struct at 9:10...\n+  --> $DIR/reject-specialized-drops-8142.rs:9:10\n    |\n LL | struct N<'n> { x: &'n i8 }\n    |          ^^\n    = note: ...does not necessarily outlive the static lifetime\n \n error[E0366]: `Drop` impls cannot be specialized\n-  --> $DIR/reject-specialized-drops-8142.rs:40:1\n+  --> $DIR/reject-specialized-drops-8142.rs:43:1\n    |\n LL | impl              Drop for P<i8>          { fn drop(&mut self) { } } // REJECT\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: use the same sequence of generic type, lifetime and const parameters as the struct definition\n-  --> $DIR/reject-specialized-drops-8142.rs:10:1\n+  --> $DIR/reject-specialized-drops-8142.rs:11:1\n    |\n LL | struct P<Tp> { x: *const Tp }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0367]: `Drop` impl requires `AddsBnd: Bound` but the struct it is implemented for does not\n-  --> $DIR/reject-specialized-drops-8142.rs:43:14\n+  --> $DIR/reject-specialized-drops-8142.rs:46:14\n    |\n LL | impl<AddsBnd:Bound> Drop for Q<AddsBnd> { fn drop(&mut self) { } } // REJECT\n    |              ^^^^^\n    |\n note: the implementor must specify the same requirement\n-  --> $DIR/reject-specialized-drops-8142.rs:11:1\n+  --> $DIR/reject-specialized-drops-8142.rs:12:1\n    |\n LL | struct Q<Tq> { x: *const Tq }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0367]: `Drop` impl requires `AddsRBnd: 'rbnd` but the struct it is implemented for does not\n-  --> $DIR/reject-specialized-drops-8142.rs:46:21\n+  --> $DIR/reject-specialized-drops-8142.rs:49:21\n    |\n LL | impl<'rbnd,AddsRBnd:'rbnd> Drop for R<AddsRBnd> { fn drop(&mut self) { } } // REJECT\n    |                     ^^^^^\n    |\n note: the implementor must specify the same requirement\n-  --> $DIR/reject-specialized-drops-8142.rs:12:1\n+  --> $DIR/reject-specialized-drops-8142.rs:13:1\n    |\n LL | struct R<Tr> { x: *const Tr }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0366]: `Drop` impls cannot be specialized\n-  --> $DIR/reject-specialized-drops-8142.rs:55:1\n+  --> $DIR/reject-specialized-drops-8142.rs:58:1\n    |\n LL | impl<One>         Drop for V<One,One>     { fn drop(&mut self) { } } // REJECT\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: use the same sequence of generic type, lifetime and const parameters as the struct definition\n-  --> $DIR/reject-specialized-drops-8142.rs:16:1\n+  --> $DIR/reject-specialized-drops-8142.rs:17:1\n    |\n LL | struct V<Tva, Tvb> { x: *const Tva, y: *const Tvb }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'lw` due to conflicting requirements\n-  --> $DIR/reject-specialized-drops-8142.rs:58:1\n+  --> $DIR/reject-specialized-drops-8142.rs:61:1\n    |\n LL | impl<'lw>         Drop for W<'lw,'lw>     { fn drop(&mut self) { } } // REJECT\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: first, the lifetime cannot outlive the lifetime `'l1` as defined on the struct at 17:10...\n-  --> $DIR/reject-specialized-drops-8142.rs:17:10\n+note: first, the lifetime cannot outlive the lifetime `'l1` as defined on the struct at 18:10...\n+  --> $DIR/reject-specialized-drops-8142.rs:18:10\n    |\n LL | struct W<'l1, 'l2> { x: &'l1 i8, y: &'l2 u8 }\n    |          ^^^\n-note: ...but the lifetime must also be valid for the lifetime `'l2` as defined on the struct at 17:15...\n-  --> $DIR/reject-specialized-drops-8142.rs:17:15\n+note: ...but the lifetime must also be valid for the lifetime `'l2` as defined on the struct at 18:15...\n+  --> $DIR/reject-specialized-drops-8142.rs:18:15\n    |\n LL | struct W<'l1, 'l2> { x: &'l1 i8, y: &'l2 u8 }\n    |               ^^^\n note: ...so that the types are compatible\n-  --> $DIR/reject-specialized-drops-8142.rs:58:1\n+  --> $DIR/reject-specialized-drops-8142.rs:61:1\n    |\n LL | impl<'lw>         Drop for W<'lw,'lw>     { fn drop(&mut self) { } } // REJECT\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: expected `W<'l1, 'l2>`\n               found `W<'_, '_>`\n \n+error[E0366]: `Drop` impls cannot be specialized\n+  --> $DIR/reject-specialized-drops-8142.rs:64:1\n+   |\n+LL | impl              Drop for X<3>           { fn drop(&mut self) { } } // REJECT\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: use the same sequence of generic type, lifetime and const parameters as the struct definition\n+  --> $DIR/reject-specialized-drops-8142.rs:19:1\n+   |\n+LL | struct X<const Ca: usize>;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0366]: `Drop` impls cannot be specialized\n+  --> $DIR/reject-specialized-drops-8142.rs:67:1\n+   |\n+LL | impl<const Ca: usize> Drop for Y<Ca, Ca>     { fn drop(&mut self) { } } // REJECT\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: use the same sequence of generic type, lifetime and const parameters as the struct definition\n+  --> $DIR/reject-specialized-drops-8142.rs:20:1\n+   |\n+LL | struct Y<const Ca: usize, const Cb: usize>;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n error[E0367]: `Drop` impl requires `AddsBnd: Bound` but the enum it is implemented for does not\n-  --> $DIR/reject-specialized-drops-8142.rs:61:14\n+  --> $DIR/reject-specialized-drops-8142.rs:70:14\n    |\n LL | impl<AddsBnd:Bound> Drop for Enum<AddsBnd> { fn drop(&mut self) { } } // REJECT\n    |              ^^^^^\n    |\n note: the implementor must specify the same requirement\n-  --> $DIR/reject-specialized-drops-8142.rs:19:1\n+  --> $DIR/reject-specialized-drops-8142.rs:22:1\n    |\n LL | enum Enum<T> { Variant(T) }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0367]: `Drop` impl requires `AddsBnd: Bound` but the struct it is implemented for does not\n-  --> $DIR/reject-specialized-drops-8142.rs:64:14\n+  --> $DIR/reject-specialized-drops-8142.rs:73:14\n    |\n LL | impl<AddsBnd:Bound> Drop for TupleStruct<AddsBnd> { fn drop(&mut self) { } } // REJECT\n    |              ^^^^^\n    |\n note: the implementor must specify the same requirement\n-  --> $DIR/reject-specialized-drops-8142.rs:20:1\n+  --> $DIR/reject-specialized-drops-8142.rs:23:1\n    |\n LL | struct TupleStruct<T>(T);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0367]: `Drop` impl requires `AddsBnd: Bound` but the union it is implemented for does not\n-  --> $DIR/reject-specialized-drops-8142.rs:67:21\n+  --> $DIR/reject-specialized-drops-8142.rs:76:21\n    |\n LL | impl<AddsBnd:Copy + Bound> Drop for Union<AddsBnd> { fn drop(&mut self) { } } // REJECT\n    |                     ^^^^^\n    |\n note: the implementor must specify the same requirement\n-  --> $DIR/reject-specialized-drops-8142.rs:21:1\n+  --> $DIR/reject-specialized-drops-8142.rs:24:1\n    |\n LL | union Union<T: Copy> { f: T }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 11 previous errors\n+error: aborting due to 13 previous errors\n \n Some errors have detailed explanations: E0308, E0366, E0367, E0495.\n For more information about an error, try `rustc --explain E0308`.", "previous_filename": "src/test/ui/reject-specialized-drops-8142.stderr"}, {"sha": "34d5293799aa7d636b47fecead3195b2294e5a38", "filename": "src/test/ui/issues/issue-76042.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f2a11a25378293e41cfcb00dbf67c524ffd79b39/src%2Ftest%2Fui%2Fissues%2Fissue-76042.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2a11a25378293e41cfcb00dbf67c524ffd79b39/src%2Ftest%2Fui%2Fissues%2Fissue-76042.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-76042.rs?ref=f2a11a25378293e41cfcb00dbf67c524ffd79b39", "patch": "@@ -0,0 +1,16 @@\n+// run-pass\n+// compile-flags: -Coverflow-checks=off -Ccodegen-units=1 -Copt-level=0\n+\n+fn foo(a: i128, b: i128, s: u32) -> (i128, i128) {\n+    if s == 128 {\n+        (0, 0)\n+    } else {\n+        (b >> s, a >> s)\n+    }\n+}\n+fn main() {\n+    let r = foo(0, 8, 1);\n+    if r.0 != 4 {\n+        panic!();\n+    }\n+}"}]}