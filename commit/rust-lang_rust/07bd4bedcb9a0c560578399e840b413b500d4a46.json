{"sha": "07bd4bedcb9a0c560578399e840b413b500d4a46", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3YmQ0YmVkY2I5YTBjNTYwNTc4Mzk5ZTg0MGI0MTNiNTAwZDRhNDY=", "commit": {"author": {"name": "veetaha", "email": "veetaha2@gmail.com", "date": "2020-04-21T23:04:28Z"}, "committer": {"name": "veetaha", "email": "veetaha2@gmail.com", "date": "2020-04-22T09:33:11Z"}, "message": "Work around crlf in syntax tree", "tree": {"sha": "6bbbb943f1d9b3f17508d4f0ada0ed1d1bfbfa5f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6bbbb943f1d9b3f17508d4f0ada0ed1d1bfbfa5f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/07bd4bedcb9a0c560578399e840b413b500d4a46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/07bd4bedcb9a0c560578399e840b413b500d4a46", "html_url": "https://github.com/rust-lang/rust/commit/07bd4bedcb9a0c560578399e840b413b500d4a46", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/07bd4bedcb9a0c560578399e840b413b500d4a46/comments", "author": {"login": "Veetaha", "id": 36276403, "node_id": "MDQ6VXNlcjM2Mjc2NDAz", "avatar_url": "https://avatars.githubusercontent.com/u/36276403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veetaha", "html_url": "https://github.com/Veetaha", "followers_url": "https://api.github.com/users/Veetaha/followers", "following_url": "https://api.github.com/users/Veetaha/following{/other_user}", "gists_url": "https://api.github.com/users/Veetaha/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veetaha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veetaha/subscriptions", "organizations_url": "https://api.github.com/users/Veetaha/orgs", "repos_url": "https://api.github.com/users/Veetaha/repos", "events_url": "https://api.github.com/users/Veetaha/events{/privacy}", "received_events_url": "https://api.github.com/users/Veetaha/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veetaha", "id": 36276403, "node_id": "MDQ6VXNlcjM2Mjc2NDAz", "avatar_url": "https://avatars.githubusercontent.com/u/36276403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veetaha", "html_url": "https://github.com/Veetaha", "followers_url": "https://api.github.com/users/Veetaha/followers", "following_url": "https://api.github.com/users/Veetaha/following{/other_user}", "gists_url": "https://api.github.com/users/Veetaha/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veetaha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veetaha/subscriptions", "organizations_url": "https://api.github.com/users/Veetaha/orgs", "repos_url": "https://api.github.com/users/Veetaha/repos", "events_url": "https://api.github.com/users/Veetaha/events{/privacy}", "received_events_url": "https://api.github.com/users/Veetaha/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "546f9ee7a7eb1d208fe279ec469b5981d47934fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/546f9ee7a7eb1d208fe279ec469b5981d47934fc", "html_url": "https://github.com/rust-lang/rust/commit/546f9ee7a7eb1d208fe279ec469b5981d47934fc"}], "stats": {"total": 40, "additions": 38, "deletions": 2}, "files": [{"sha": "f00f46be23822f8385bcab0d7e51c3bf5cb4d0ad", "filename": "editors/code/src/commands/syntax_tree.ts", "status": "modified", "additions": 38, "deletions": 2, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/07bd4bedcb9a0c560578399e840b413b500d4a46/editors%2Fcode%2Fsrc%2Fcommands%2Fsyntax_tree.ts", "raw_url": "https://github.com/rust-lang/rust/raw/07bd4bedcb9a0c560578399e840b413b500d4a46/editors%2Fcode%2Fsrc%2Fcommands%2Fsyntax_tree.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fsyntax_tree.ts?ref=07bd4bedcb9a0c560578399e840b413b500d4a46", "patch": "@@ -198,7 +198,7 @@ class AstInspector implements vscode.HoverProvider, vscode.DefinitionProvider, D\n         return new vscode.Hover([\"```rust\\n\" + rustSourceCode + \"\\n```\"], astFileRange);\n     }\n \n-    private findAstNodeRange(astLine: vscode.TextLine) {\n+    private findAstNodeRange(astLine: vscode.TextLine): vscode.Range {\n         const lineOffset = astLine.range.start;\n         const begin = lineOffset.translate(undefined, astLine.firstNonWhitespaceCharacterIndex);\n         const end = lineOffset.translate(undefined, astLine.text.trimEnd().length);\n@@ -209,10 +209,46 @@ class AstInspector implements vscode.HoverProvider, vscode.DefinitionProvider, D\n         const parsedRange = /\\[(\\d+); (\\d+)\\)/.exec(astLine);\n         if (!parsedRange) return;\n \n-        const [begin, end] = parsedRange.slice(1).map(off => doc.positionAt(+off));\n+        const [begin, end] = parsedRange\n+            .slice(1)\n+            .map(off => this.positionAt(doc, +off));\n \n         return new vscode.Range(begin, end);\n     }\n+\n+    // Shitty memoize the last value, otherwise the CPU is at 100% single core\n+    // with quadratic lookups when we build rust2Ast cache\n+    memo?: [vscode.TextDocument, number, number];\n+\n+    positionAt(doc: vscode.TextDocument, offset: number): vscode.Position {\n+        if (doc.eol === vscode.EndOfLine.LF) {\n+            return doc.positionAt(offset);\n+        }\n+\n+        // God damn shitty workaround for crlf line endings\n+        // We are still in this prehistoric era of carriage returns here...\n+\n+        let i = 0;\n+        let curOffset = 0;\n+\n+        if (this.memo) {\n+            const [memDoc, memOffset, memI] = this.memo;\n+            if (memDoc === doc && memOffset <= offset) {\n+                curOffset = memOffset;\n+                i = memI;\n+            }\n+        }\n+\n+        while (true) {\n+            const lineLenWithLf = doc.lineAt(i).text.length + 1;\n+            curOffset += lineLenWithLf;\n+            if (curOffset > offset) {\n+                this.memo = [doc, curOffset - lineLenWithLf, i];\n+                return doc.positionAt(offset + i);\n+            }\n+            i += 1;\n+        }\n+    }\n }\n \n class Lazy<T> {"}]}