{"sha": "5d809b17640e7f20ff001a7d4c6e9ee5b1bdf4af", "node_id": "C_kwDOAAsO6NoAKDVkODA5YjE3NjQwZTdmMjBmZjAwMWE3ZDRjNmU5ZWU1YjFiZGY0YWY", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-04-19T11:52:43Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-04-24T13:53:37Z"}, "message": "Decorative changes to `IndexVec`", "tree": {"sha": "f2cefce88f8b685eede2e2aabe6100efe9f4b1a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f2cefce88f8b685eede2e2aabe6100efe9f4b1a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d809b17640e7f20ff001a7d4c6e9ee5b1bdf4af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d809b17640e7f20ff001a7d4c6e9ee5b1bdf4af", "html_url": "https://github.com/rust-lang/rust/commit/5d809b17640e7f20ff001a7d4c6e9ee5b1bdf4af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d809b17640e7f20ff001a7d4c6e9ee5b1bdf4af/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d23b5237623f5d1db9840838bbf5abfe3a14e29", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d23b5237623f5d1db9840838bbf5abfe3a14e29", "html_url": "https://github.com/rust-lang/rust/commit/7d23b5237623f5d1db9840838bbf5abfe3a14e29"}], "stats": {"total": 25, "additions": 12, "deletions": 13}, "files": [{"sha": "99e72e49f8eb8e3b2e36f39606ddac706f025046", "filename": "compiler/rustc_index/src/vec.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/5d809b17640e7f20ff001a7d4c6e9ee5b1bdf4af/compiler%2Frustc_index%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d809b17640e7f20ff001a7d4c6e9ee5b1bdf4af/compiler%2Frustc_index%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_index%2Fsrc%2Fvec.rs?ref=5d809b17640e7f20ff001a7d4c6e9ee5b1bdf4af", "patch": "@@ -27,7 +27,7 @@ pub struct IndexVec<I: Idx, T> {\n impl<I: Idx, T> IndexVec<I, T> {\n     #[inline]\n     pub const fn new() -> Self {\n-        IndexVec { raw: Vec::new(), _marker: PhantomData }\n+        IndexVec::from_raw(Vec::new())\n     }\n \n     #[inline]\n@@ -37,7 +37,7 @@ impl<I: Idx, T> IndexVec<I, T> {\n \n     #[inline]\n     pub fn with_capacity(capacity: usize) -> Self {\n-        IndexVec { raw: Vec::with_capacity(capacity), _marker: PhantomData }\n+        IndexVec::from_raw(Vec::with_capacity(capacity))\n     }\n \n     /// Creates a new vector with a copy of `elem` for each index in `universe`.\n@@ -56,24 +56,23 @@ impl<I: Idx, T> IndexVec<I, T> {\n     where\n         T: Clone,\n     {\n-        IndexVec { raw: vec![elem; universe.len()], _marker: PhantomData }\n+        IndexVec::from_raw(vec![elem; universe.len()])\n     }\n \n     #[inline]\n     pub fn from_elem_n(elem: T, n: usize) -> Self\n     where\n         T: Clone,\n     {\n-        IndexVec { raw: vec![elem; n], _marker: PhantomData }\n+        IndexVec::from_raw(vec![elem; n])\n     }\n \n     /// Create an `IndexVec` with `n` elements, where the value of each\n     /// element is the result of `func(i)`. (The underlying vector will\n     /// be allocated only once, with a capacity of at least `n`.)\n     #[inline]\n     pub fn from_fn_n(func: impl FnMut(I) -> T, n: usize) -> Self {\n-        let indices = (0..n).map(I::new);\n-        Self::from_raw(indices.map(func).collect())\n+        IndexVec::from_raw((0..n).map(I::new).map(func).collect())\n     }\n \n     #[inline]\n@@ -88,7 +87,7 @@ impl<I: Idx, T> IndexVec<I, T> {\n \n     #[inline]\n     pub fn push(&mut self, d: T) -> I {\n-        let idx = I::new(self.len());\n+        let idx = self.next_index();\n         self.raw.push(d);\n         idx\n     }\n@@ -139,7 +138,7 @@ impl<I: Idx, T> IndexVec<I, T> {\n     }\n \n     pub fn convert_index_type<Ix: Idx>(self) -> IndexVec<Ix, T> {\n-        IndexVec { raw: self.raw, _marker: PhantomData }\n+        IndexVec::from_raw(self.raw)\n     }\n \n     /// Grows the index vector so that it contains an entry for\n@@ -250,7 +249,7 @@ impl<I: Idx, T> FromIterator<T> for IndexVec<I, T> {\n     where\n         J: IntoIterator<Item = T>,\n     {\n-        IndexVec { raw: FromIterator::from_iter(iter), _marker: PhantomData }\n+        IndexVec::from_raw(Vec::from_iter(iter))\n     }\n }\n \n@@ -270,7 +269,7 @@ impl<'a, I: Idx, T> IntoIterator for &'a IndexVec<I, T> {\n \n     #[inline]\n     fn into_iter(self) -> slice::Iter<'a, T> {\n-        self.raw.iter()\n+        self.iter()\n     }\n }\n \n@@ -280,14 +279,14 @@ impl<'a, I: Idx, T> IntoIterator for &'a mut IndexVec<I, T> {\n \n     #[inline]\n     fn into_iter(self) -> slice::IterMut<'a, T> {\n-        self.raw.iter_mut()\n+        self.iter_mut()\n     }\n }\n \n impl<I: Idx, T> Default for IndexVec<I, T> {\n     #[inline]\n     fn default() -> Self {\n-        Self::new()\n+        IndexVec::new()\n     }\n }\n \n@@ -308,7 +307,7 @@ impl<S: Encoder, I: Idx, T: Encodable<S>> Encodable<S> for IndexVec<I, T> {\n #[cfg(feature = \"rustc_serialize\")]\n impl<D: Decoder, I: Idx, T: Decodable<D>> Decodable<D> for IndexVec<I, T> {\n     fn decode(d: &mut D) -> Self {\n-        IndexVec { raw: Decodable::decode(d), _marker: PhantomData }\n+        IndexVec::from_raw(Vec::<T>::decode(d))\n     }\n }\n "}]}