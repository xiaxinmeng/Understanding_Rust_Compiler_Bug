{"sha": "252083f7e02a3a9174bb39821fd20356ada3dd4a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1MjA4M2Y3ZTAyYTNhOTE3NGJiMzk4MjFmZDIwMzU2YWRhM2RkNGE=", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2020-11-16T11:44:05Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2020-11-29T22:43:23Z"}, "message": "address review comments and rebase\n\nci: always build with internal lints\ngroup up internal lints in lib.rs\ndogfood: we already pass --all-features, no need to enable internal-lints again", "tree": {"sha": "7e52cd9ec346c1644509d5fa3bd69a0f575390a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e52cd9ec346c1644509d5fa3bd69a0f575390a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/252083f7e02a3a9174bb39821fd20356ada3dd4a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/252083f7e02a3a9174bb39821fd20356ada3dd4a", "html_url": "https://github.com/rust-lang/rust/commit/252083f7e02a3a9174bb39821fd20356ada3dd4a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/252083f7e02a3a9174bb39821fd20356ada3dd4a/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b25a6df7754ed3de9914f9d03facdfb09728fbaf", "url": "https://api.github.com/repos/rust-lang/rust/commits/b25a6df7754ed3de9914f9d03facdfb09728fbaf", "html_url": "https://github.com/rust-lang/rust/commit/b25a6df7754ed3de9914f9d03facdfb09728fbaf"}], "stats": {"total": 91, "additions": 33, "deletions": 58}, "files": [{"sha": "784463fe0df9e71a3e22b871c006c106329673ee", "filename": ".github/workflows/clippy_bors.yml", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/252083f7e02a3a9174bb39821fd20356ada3dd4a/.github%2Fworkflows%2Fclippy_bors.yml", "raw_url": "https://github.com/rust-lang/rust/raw/252083f7e02a3a9174bb39821fd20356ada3dd4a/.github%2Fworkflows%2Fclippy_bors.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fclippy_bors.yml?ref=252083f7e02a3a9174bb39821fd20356ada3dd4a", "patch": "@@ -128,13 +128,6 @@ jobs:\n         SYSROOT=$(rustc --print sysroot)\n         echo \"$SYSROOT/bin\" >> $GITHUB_PATH\n \n-    - name: Build\n-      run: cargo build --features deny-warnings\n-\n-    # compiletest would panic due to \"Found multiple rlibs for crate `clippy_lints`\"\n-    - name: clean rlibs\n-      run: rm -f ./target/debug/deps/libclippy_lints*\n-\n     - name: Build with internal lints\n       run: cargo build --features deny-warnings,internal-lints\n "}, {"sha": "f51c45e9eb5931a170c16c0dd187364fc2d510c7", "filename": "clippy_dev/src/lib.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/252083f7e02a3a9174bb39821fd20356ada3dd4a/clippy_dev%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/252083f7e02a3a9174bb39821fd20356ada3dd4a/clippy_dev%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Flib.rs?ref=252083f7e02a3a9174bb39821fd20356ada3dd4a", "patch": "@@ -160,13 +160,11 @@ pub fn gen_register_lint_list<'a>(\n                 l.module,\n                 l.name.to_uppercase()\n             )\n-        })\n-        .collect::<Vec<String>>();\n+        });\n     let other_lints = usable_lints\n         .sorted_by_key(|l| format!(\"        &{}::{},\", l.module, l.name.to_uppercase()))\n         .map(|l| format!(\"        &{}::{},\", l.module, l.name.to_uppercase()))\n-        .sorted()\n-        .collect::<Vec<String>>();\n+        .sorted();\n     let mut lint_list = vec![header];\n     lint_list.extend(internal_lints);\n     lint_list.extend(other_lints);"}, {"sha": "8fbd44528b1fc1b2f8deb53f4052295cf1d926f4", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/252083f7e02a3a9174bb39821fd20356ada3dd4a/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/252083f7e02a3a9174bb39821fd20356ada3dd4a/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=252083f7e02a3a9174bb39821fd20356ada3dd4a", "patch": "@@ -939,17 +939,23 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &zero_div_zero::ZERO_DIVIDED_BY_ZERO,\n     ]);\n     // end register lints, do not remove this comment, it\u2019s used in `update_lints`\n-    store.register_late_pass(|| box await_holding_invalid::AwaitHolding);\n-    store.register_late_pass(|| box serde_api::SerdeAPI);\n+\n+    // all the internal lints\n     #[cfg(feature = \"internal-lints\")]\n     {\n+        store.register_early_pass(|| box utils::internal_lints::ClippyLintsInternal);\n+        store.register_early_pass(|| box utils::internal_lints::ProduceIce);\n+        store.register_late_pass(|| box utils::inspector::DeepCodeInspector);\n+        store.register_late_pass(|| box utils::internal_lints::CollapsibleCalls);\n         store.register_late_pass(|| box utils::internal_lints::CompilerLintFunctions::new());\n+        store.register_late_pass(|| box utils::internal_lints::InvalidPaths);\n         store.register_late_pass(|| box utils::internal_lints::LintWithoutLintPass::default());\n+        store.register_late_pass(|| box utils::internal_lints::MatchTypeOnDiagItem);\n         store.register_late_pass(|| box utils::internal_lints::OuterExpnDataPass);\n-        store.register_late_pass(|| box utils::internal_lints::InvalidPaths);\n-        store.register_late_pass(|| box utils::inspector::DeepCodeInspector);\n     }\n     store.register_late_pass(|| box utils::author::Author);\n+    store.register_late_pass(|| box await_holding_invalid::AwaitHolding);\n+    store.register_late_pass(|| box serde_api::SerdeAPI);\n     let vec_box_size_threshold = conf.vec_box_size_threshold;\n     store.register_late_pass(move || box types::Types::new(vec_box_size_threshold));\n     store.register_late_pass(|| box booleans::NonminimalBool);\n@@ -1134,8 +1140,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_early_pass(|| box literal_representation::LiteralDigitGrouping);\n     let literal_representation_threshold = conf.literal_representation_threshold;\n     store.register_early_pass(move || box literal_representation::DecimalLiteralRepresentation::new(literal_representation_threshold));\n-    #[cfg(feature = \"internal-lints\")]\n-    store.register_early_pass(|| box utils::internal_lints::ClippyLintsInternal);\n     let enum_variant_name_threshold = conf.enum_variant_name_threshold;\n     store.register_early_pass(move || box enum_variants::EnumVariantNames::new(enum_variant_name_threshold));\n     store.register_early_pass(|| box tabs_in_doc_comments::TabsInDocComments);\n@@ -1149,8 +1153,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(move || box large_const_arrays::LargeConstArrays::new(array_size_threshold));\n     store.register_late_pass(|| box floating_point_arithmetic::FloatingPointArithmetic);\n     store.register_early_pass(|| box as_conversions::AsConversions);\n-    #[cfg(feature = \"internal-lints\")]\n-    store.register_early_pass(|| box utils::internal_lints::ProduceIce);\n     store.register_late_pass(|| box let_underscore::LetUnderscore);\n     store.register_late_pass(|| box atomic_ordering::AtomicOrdering);\n     store.register_early_pass(|| box single_component_path_imports::SingleComponentPathImports);\n@@ -1166,16 +1168,13 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box dereference::Dereferencing);\n     store.register_late_pass(|| box option_if_let_else::OptionIfLetElse);\n     store.register_late_pass(|| box future_not_send::FutureNotSend);\n-    #[cfg(feature = \"internal-lints\")]\n-    store.register_late_pass(|| box utils::internal_lints::CollapsibleCalls);\n     store.register_late_pass(|| box if_let_mutex::IfLetMutex);\n     store.register_late_pass(|| box mut_mutex_lock::MutMutexLock);\n     store.register_late_pass(|| box match_on_vec_items::MatchOnVecItems);\n     store.register_late_pass(|| box manual_async_fn::ManualAsyncFn);\n     store.register_early_pass(|| box redundant_field_names::RedundantFieldNames);\n     store.register_late_pass(|| box vec_resize_to_zero::VecResizeToZero);\n     store.register_late_pass(|| box panic_in_result_fn::PanicInResultFn);\n-\n     let single_char_binding_names_threshold = conf.single_char_binding_names_threshold;\n     store.register_early_pass(move || box non_expressive_names::NonExpressiveNames {\n         single_char_binding_names_threshold,\n@@ -1192,8 +1191,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box manual_ok_or::ManualOkOr);\n     store.register_late_pass(|| box float_equality_without_abs::FloatEqualityWithoutAbs);\n     store.register_late_pass(|| box async_yields_async::AsyncYieldsAsync);\n-    #[cfg(feature = \"internal-lints\")]\n-    store.register_late_pass(|| box utils::internal_lints::MatchTypeOnDiagItem);\n     let disallowed_methods = conf.disallowed_methods.iter().cloned().collect::<FxHashSet<_>>();\n     store.register_late_pass(move || box disallowed_method::DisallowedMethod::new(&disallowed_methods));\n     store.register_early_pass(|| box asm_syntax::InlineAsmX86AttSyntax);\n@@ -1202,7 +1199,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box strings::StrToString);\n     store.register_late_pass(|| box strings::StringToString);\n \n-\n     store.register_group(true, \"clippy::restriction\", Some(\"clippy_restriction\"), vec![\n         LintId::of(&arithmetic::FLOAT_ARITHMETIC),\n         LintId::of(&arithmetic::INTEGER_ARITHMETIC),\n@@ -1333,6 +1329,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&wildcard_imports::ENUM_GLOB_USE),\n         LintId::of(&wildcard_imports::WILDCARD_IMPORTS),\n     ]);\n+\n     #[cfg(feature = \"internal-lints\")]\n     store.register_group(true, \"clippy::internal\", Some(\"clippy_internal\"), vec![\n         LintId::of(&utils::internal_lints::CLIPPY_LINTS_INTERNAL),"}, {"sha": "a6163a83d768709a562ca5a59a98b4eb92857bf4", "filename": "tests/dogfood.rs", "status": "modified", "additions": 20, "deletions": 33, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/252083f7e02a3a9174bb39821fd20356ada3dd4a/tests%2Fdogfood.rs", "raw_url": "https://github.com/rust-lang/rust/raw/252083f7e02a3a9174bb39821fd20356ada3dd4a/tests%2Fdogfood.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdogfood.rs?ref=252083f7e02a3a9174bb39821fd20356ada3dd4a", "patch": "@@ -18,39 +18,26 @@ fn dogfood_clippy() {\n     }\n     let root_dir = PathBuf::from(env!(\"CARGO_MANIFEST_DIR\"));\n \n-    let output = if cfg!(feature = \"internal-lints\") {\n-        // with internal lints and internal warnings\n-        Command::new(&*CLIPPY_PATH)\n-            .current_dir(root_dir)\n-            .env(\"CLIPPY_DOGFOOD\", \"1\")\n-            .env(\"CARGO_INCREMENTAL\", \"0\")\n-            .arg(\"clippy-preview\")\n-            .arg(\"--all-targets\")\n-            .arg(\"--all-features\")\n-            .args(&[\"--features\", \"internal-lints\"])\n-            .arg(\"--\")\n-            .args(&[\"-D\", \"clippy::all\"])\n-            .args(&[\"-D\", \"clippy::pedantic\"])\n-            .args(&[\"-D\", \"clippy::internal\"])\n-            .arg(\"-Cdebuginfo=0\") // disable debuginfo to generate less data in the target dir\n-            .output()\n-            .unwrap()\n-    } else {\n-        // without internal lints or warnings\n-        Command::new(&*CLIPPY_PATH)\n-            .current_dir(root_dir)\n-            .env(\"CLIPPY_DOGFOOD\", \"1\")\n-            .env(\"CARGO_INCREMENTAL\", \"0\")\n-            .arg(\"clippy-preview\")\n-            .arg(\"--all-targets\")\n-            .arg(\"--all-features\")\n-            .arg(\"--\")\n-            .args(&[\"-D\", \"clippy::all\"])\n-            .args(&[\"-D\", \"clippy::pedantic\"])\n-            .arg(\"-Cdebuginfo=0\") // disable debuginfo to generate less data in the target dir\n-            .output()\n-            .unwrap()\n-    };\n+    let mut command = Command::new(&*CLIPPY_PATH);\n+    command\n+        .current_dir(root_dir)\n+        .env(\"CLIPPY_DOGFOOD\", \"1\")\n+        .env(\"CARGO_INCREMENTAL\", \"0\")\n+        .arg(\"clippy-preview\")\n+        .arg(\"--all-targets\")\n+        .arg(\"--all-features\")\n+        .arg(\"--\")\n+        .args(&[\"-D\", \"clippy::all\"])\n+        .args(&[\"-D\", \"clippy::pedantic\"])\n+        .arg(\"-Cdebuginfo=0\"); // disable debuginfo to generate less data in the target dir\n+\n+    // internal lints only exist if we build with the internal-lints feature\n+    if cfg!(feature = \"internal-lints\") {\n+        command.args(&[\"-D\", \"clippy::internal\"]);\n+    }\n+\n+    let output = command.output().unwrap();\n+\n     println!(\"status: {}\", output.status);\n     println!(\"stdout: {}\", String::from_utf8_lossy(&output.stdout));\n     println!(\"stderr: {}\", String::from_utf8_lossy(&output.stderr));"}]}