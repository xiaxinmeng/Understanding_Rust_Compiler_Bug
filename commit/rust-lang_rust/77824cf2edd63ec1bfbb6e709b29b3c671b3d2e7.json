{"sha": "77824cf2edd63ec1bfbb6e709b29b3c671b3d2e7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3ODI0Y2YyZWRkNjNlYzFiZmJiNmU3MDliMjliM2M2NzFiM2QyZTc=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-01T04:54:46Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-01T04:54:46Z"}, "message": "rustdoc: Write markdown for impls", "tree": {"sha": "840815c0b24dc0319eb7158e718cb210980c2f6a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/840815c0b24dc0319eb7158e718cb210980c2f6a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/77824cf2edd63ec1bfbb6e709b29b3c671b3d2e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/77824cf2edd63ec1bfbb6e709b29b3c671b3d2e7", "html_url": "https://github.com/rust-lang/rust/commit/77824cf2edd63ec1bfbb6e709b29b3c671b3d2e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/77824cf2edd63ec1bfbb6e709b29b3c671b3d2e7/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9f938887470cbc2490d1b991ffec8713470d565", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9f938887470cbc2490d1b991ffec8713470d565", "html_url": "https://github.com/rust-lang/rust/commit/f9f938887470cbc2490d1b991ffec8713470d565"}], "stats": {"total": 97, "additions": 96, "deletions": 1}, "files": [{"sha": "4aab41e38ccc385aa3031628443bfc47f34234fb", "filename": "src/rustdoc/markdown_pass.rs", "status": "modified", "additions": 96, "deletions": 1, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/77824cf2edd63ec1bfbb6e709b29b3c671b3d2e7/src%2Frustdoc%2Fmarkdown_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77824cf2edd63ec1bfbb6e709b29b3c671b3d2e7/src%2Frustdoc%2Fmarkdown_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fmarkdown_pass.rs?ref=77824cf2edd63ec1bfbb6e709b29b3c671b3d2e7", "patch": "@@ -138,7 +138,7 @@ fn write_mod_contents(\n           doc::enumtag(enumdoc) { write_enum(ctxt, enumdoc) }\n           doc::restag(resdoc) { write_res(ctxt, resdoc) }\n           doc::ifacetag(ifacedoc) { write_iface(ctxt, ifacedoc) }\n-          doc::impltag(impldoc) { fail }\n+          doc::impltag(impldoc) { write_impl(ctxt, impldoc) }\n         }\n     }\n }\n@@ -648,6 +648,101 @@ fn should_write_iface_method_failure_conditions() {\n     assert str::contains(markdown, \"Failure conditions: nuked\");\n }\n \n+fn write_impl(ctxt: ctxt, doc: doc::impldoc) {\n+    assert option::is_some(doc.self_ty);\n+    let self_ty = option::get(doc.self_ty);\n+    alt doc.iface_ty {\n+      some(iface_ty) {\n+        write_header(ctxt, h2,\n+                     #fmt(\"Implementation `%s` of `%s` for `%s`\",\n+                          doc.name, iface_ty, self_ty));\n+      }\n+      none {\n+        write_header(ctxt, h2,\n+                     #fmt(\"Implementation `%s` for `%s`\",\n+                          doc.name, self_ty));\n+      }\n+    }\n+    write_brief(ctxt, doc.brief);\n+    write_desc(ctxt, doc.desc);\n+    write_methods(ctxt, doc.methods);\n+}\n+\n+#[test]\n+fn should_write_impl_header() {\n+    let markdown = test::render(\"impl i for int { fn a() { } }\");\n+    assert str::contains(markdown, \"## Implementation `i` for `int`\");\n+}\n+\n+#[test]\n+fn should_write_impl_header_with_iface() {\n+    let markdown = test::render(\"impl i of j for int { fn a() { } }\");\n+    assert str::contains(markdown, \"## Implementation `i` of `j` for `int`\");\n+}\n+\n+#[test]\n+fn should_write_impl_brief() {\n+    let markdown = test::render(\n+        \"#[doc(brief = \\\"brief\\\")] impl i for int { fn a() { } }\");\n+    assert str::contains(markdown, \"brief\");\n+}\n+\n+#[test]\n+fn should_write_impl_desc() {\n+    let markdown = test::render(\n+        \"#[doc(desc = \\\"desc\\\")] impl i for int { fn a() { } }\");\n+    assert str::contains(markdown, \"desc\");\n+}\n+\n+#[test]\n+fn should_write_impl_method_header() {\n+    let markdown = test::render(\n+        \"impl i for int { fn a() { } }\");\n+    assert str::contains(markdown, \"### Method `a`\");\n+}\n+\n+#[test]\n+fn should_write_impl_method_signature() {\n+    let markdown = test::render(\n+        \"impl i for int { fn a() { } }\");\n+    assert str::contains(markdown, \"\\n    fn a()\");\n+}\n+\n+#[test]\n+fn should_write_impl_method_argument_header() {\n+    let markdown = test::render(\n+        \"impl a for int { fn a(b: int) { } }\");\n+    assert str::contains(markdown, \"\\n\\nArguments:\\n\\n\");\n+}\n+\n+#[test]\n+fn should_write_impl_method_arguments() {\n+    let markdown = test::render(\n+        \"impl a for int { fn a(b: int) { } }\");\n+    assert str::contains(markdown, \"* `b`: `int`\\n\");\n+}\n+\n+#[test]\n+fn should_not_write_impl_method_arguments_if_none() {\n+    let markdown = test::render(\n+        \"impl a for int { fn a() { } }\");\n+    assert !str::contains(markdown, \"Arguments\");\n+}\n+\n+#[test]\n+fn should_write_impl_method_return_info() {\n+    let markdown = test::render(\n+        \"impl a for int { fn a() -> int { } }\");\n+    assert str::contains(markdown, \"Returns `int`\");\n+}\n+\n+#[test]\n+fn should_write_impl_method_failure_conditions() {\n+    let markdown = test::render(\n+        \"impl a for int { #[doc(failure = \\\"nuked\\\")] fn a() { } }\");\n+    assert str::contains(markdown, \"Failure conditions: nuked\");\n+}\n+\n #[cfg(test)]\n mod test {\n     fn render(source: str) -> str {"}]}