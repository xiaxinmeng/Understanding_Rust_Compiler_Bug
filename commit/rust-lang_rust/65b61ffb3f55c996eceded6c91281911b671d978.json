{"sha": "65b61ffb3f55c996eceded6c91281911b671d978", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1YjYxZmZiM2Y1NWM5OTZlY2VkZWQ2YzkxMjgxOTExYjY3MWQ5Nzg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-01-19T23:35:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-01-19T23:35:12Z"}, "message": "Auto merge of #21165 - alexcrichton:second-pass-type-id, r=aturon\n\nThis commit aims to stabilize the `TypeId` abstraction by moving it out of the\r\n`intrinsics` module into the `any` module of the standard library. Specifically,\r\n\r\n* `TypeId` is now defined at `std::any::TypeId`\r\n* `TypeId::hash` has been removed in favor of an implementation of `Hash`.\r\n\r\nThis commit also performs a final pass over the `any` module, confirming the\r\nfollowing:\r\n\r\n* `Any::get_type_id` remains unstable as *usage* of the `Any` trait will likely\r\n  never require this, and the `Any` trait does not need to be implemented for\r\n  any other types. As a result, this implementation detail can remain unstable\r\n  until associated statics are implemented.\r\n* `Any::downcast_ref` is now stable\r\n* `Any::downcast_mut` is now stable\r\n* `BoxAny` remains unstable. While a direct impl on `Box<Any>` is allowed today\r\n  it does not allow downcasting of trait objects like `Box<Any + Send>` (those\r\n  returned from `Thread::join`). This is covered by #18737.\r\n* `BoxAny::downcast` is now stable.", "tree": {"sha": "d0ab6ddb6042d3fdaf3824372a8e2d6fc9def19a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d0ab6ddb6042d3fdaf3824372a8e2d6fc9def19a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65b61ffb3f55c996eceded6c91281911b671d978", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65b61ffb3f55c996eceded6c91281911b671d978", "html_url": "https://github.com/rust-lang/rust/commit/65b61ffb3f55c996eceded6c91281911b671d978", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65b61ffb3f55c996eceded6c91281911b671d978/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f8c687fdfbf076ef1667f4d95633d4e0812b516", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f8c687fdfbf076ef1667f4d95633d4e0812b516", "html_url": "https://github.com/rust-lang/rust/commit/7f8c687fdfbf076ef1667f4d95633d4e0812b516"}, {"sha": "70f7165cc8975337964118af4d30f40b98f5edeb", "url": "https://api.github.com/repos/rust-lang/rust/commits/70f7165cc8975337964118af4d30f40b98f5edeb", "html_url": "https://github.com/rust-lang/rust/commit/70f7165cc8975337964118af4d30f40b98f5edeb"}], "stats": {"total": 213, "additions": 105, "deletions": 108}, "files": [{"sha": "a2cc98c7d01291c5141e4d97a29b5766fc1e60c1", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/65b61ffb3f55c996eceded6c91281911b671d978/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65b61ffb3f55c996eceded6c91281911b671d978/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=65b61ffb3f55c996eceded6c91281911b671d978", "patch": "@@ -125,19 +125,21 @@ impl<S: hash::Hasher, T: ?Sized + Hash<S>> Hash<S> for Box<T> {\n }\n \n /// Extension methods for an owning `Any` trait object.\n-#[unstable = \"post-DST and coherence changes, this will not be a trait but \\\n-              rather a direct `impl` on `Box<Any>`\"]\n+#[unstable = \"this trait will likely disappear once compiler bugs blocking \\\n+              a direct impl on `Box<Any>` have been fixed \"]\n+// FIXME(#18737): this should be a direct impl on `Box<Any>`. If you're\n+//                removing this please make sure that you can downcase on\n+//                `Box<Any + Send>` as well as `Box<Any>`\n pub trait BoxAny {\n     /// Returns the boxed value if it is of type `T`, or\n     /// `Err(Self)` if it isn't.\n     #[stable]\n     fn downcast<T: 'static>(self) -> Result<Box<T>, Self>;\n }\n \n+#[stable]\n impl BoxAny for Box<Any> {\n     #[inline]\n-    #[unstable = \"method may be renamed with respect to other downcasting \\\n-                  methods\"]\n     fn downcast<T: 'static>(self) -> Result<Box<T>, Box<Any>> {\n         if self.is::<T>() {\n             unsafe {"}, {"sha": "20ed2253861ce14447a50dc96b891c75211b50da", "filename": "src/libcore/any.rs", "status": "modified", "additions": 45, "deletions": 9, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/65b61ffb3f55c996eceded6c91281911b671d978/src%2Flibcore%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65b61ffb3f55c996eceded6c91281911b671d978/src%2Flibcore%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fany.rs?ref=65b61ffb3f55c996eceded6c91281911b671d978", "patch": "@@ -71,11 +71,11 @@\n \n #![stable]\n \n-use mem::{transmute};\n-use option::Option;\n-use option::Option::{Some, None};\n+use mem::transmute;\n+use option::Option::{self, Some, None};\n use raw::TraitObject;\n-use intrinsics::TypeId;\n+use intrinsics;\n+#[cfg(not(stage0))] use marker::Sized;\n \n ///////////////////////////////////////////////////////////////////////////////\n // Any trait\n@@ -99,7 +99,6 @@ impl<T: 'static> Any for T {\n \n ///////////////////////////////////////////////////////////////////////////////\n // Extension methods for Any trait objects.\n-// Implemented as three extension traits so that the methods can be generic.\n ///////////////////////////////////////////////////////////////////////////////\n \n impl Any {\n@@ -119,9 +118,9 @@ impl Any {\n \n     /// Returns some reference to the boxed value if it is of type `T`, or\n     /// `None` if it isn't.\n-    #[unstable = \"naming conventions around acquiring references may change\"]\n+    #[stable]\n     #[inline]\n-    pub fn downcast_ref<'a, T: 'static>(&'a self) -> Option<&'a T> {\n+    pub fn downcast_ref<T: 'static>(&self) -> Option<&T> {\n         if self.is::<T>() {\n             unsafe {\n                 // Get the raw representation of the trait object\n@@ -137,9 +136,9 @@ impl Any {\n \n     /// Returns some mutable reference to the boxed value if it is of type `T`, or\n     /// `None` if it isn't.\n-    #[unstable = \"naming conventions around acquiring references may change\"]\n+    #[stable]\n     #[inline]\n-    pub fn downcast_mut<'a, T: 'static>(&'a mut self) -> Option<&'a mut T> {\n+    pub fn downcast_mut<T: 'static>(&mut self) -> Option<&mut T> {\n         if self.is::<T>() {\n             unsafe {\n                 // Get the raw representation of the trait object\n@@ -153,3 +152,40 @@ impl Any {\n         }\n     }\n }\n+\n+///////////////////////////////////////////////////////////////////////////////\n+// TypeID and its methods\n+///////////////////////////////////////////////////////////////////////////////\n+\n+/// A `TypeId` represents a globally unique identifier for a type.\n+///\n+/// Each `TypeId` is an opaque object which does not allow inspection of what's\n+/// inside but does allow basic operations such as cloning, comparison,\n+/// printing, and showing.\n+///\n+/// A `TypeId` is currently only available for types which ascribe to `'static`,\n+/// but this limitation may be removed in the future.\n+#[cfg_attr(stage0, lang = \"type_id\")]\n+#[derive(Clone, Copy, PartialEq, Eq, Show, Hash)]\n+#[stable]\n+pub struct TypeId {\n+    t: u64,\n+}\n+\n+impl TypeId {\n+    /// Returns the `TypeId` of the type this generic function has been\n+    /// instantiated with\n+    #[cfg(not(stage0))]\n+    #[unstable = \"may grow a `Reflect` bound soon via marker traits\"]\n+    pub fn of<T: ?Sized + 'static>() -> TypeId {\n+        TypeId {\n+            t: unsafe { intrinsics::type_id::<T>() },\n+        }\n+    }\n+\n+    /// dox\n+    #[cfg(stage0)]\n+    pub fn of<T: 'static>() -> TypeId {\n+        unsafe { intrinsics::type_id::<T>() }\n+    }\n+}"}, {"sha": "742e62390177788ba17007aa1d5becf0e45fee8f", "filename": "src/libcore/hash/mod.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/65b61ffb3f55c996eceded6c91281911b671d978/src%2Flibcore%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65b61ffb3f55c996eceded6c91281911b671d978/src%2Flibcore%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash%2Fmod.rs?ref=65b61ffb3f55c996eceded6c91281911b671d978", "patch": "@@ -62,7 +62,6 @@ use prelude::*;\n \n use borrow::{Cow, ToOwned};\n use default::Default;\n-use intrinsics::TypeId;\n use mem;\n use num::Int;\n \n@@ -243,13 +242,6 @@ impl<S: Writer + Hasher, T> Hash<S> for *mut T {\n     }\n }\n \n-impl<S: Writer + Hasher> Hash<S> for TypeId {\n-    #[inline]\n-    fn hash(&self, state: &mut S) {\n-        self.hash().hash(state)\n-    }\n-}\n-\n impl<'a, T, B: ?Sized, S: Hasher> Hash<S> for Cow<'a, T, B>\n     where B: Hash<S> + ToOwned<T>\n {"}, {"sha": "73be68289c9b70bd1b93f6a1dea74170a4135f5c", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 6, "deletions": 18, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/65b61ffb3f55c996eceded6c91281911b671d978/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65b61ffb3f55c996eceded6c91281911b671d978/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=65b61ffb3f55c996eceded6c91281911b671d978", "patch": "@@ -44,6 +44,8 @@\n \n use marker::Sized;\n \n+#[cfg(stage0)] use any::TypeId;\n+\n pub type GlueFn = extern \"Rust\" fn(*const i8);\n \n #[lang=\"ty_desc\"]\n@@ -206,6 +208,10 @@ extern \"rust-intrinsic\" {\n     /// Gets an identifier which is globally unique to the specified type. This\n     /// function will return the same value for a type regardless of whichever\n     /// crate it is invoked in.\n+    #[cfg(not(stage0))]\n+    pub fn type_id<T: ?Sized + 'static>() -> u64;\n+\n+    #[cfg(stage0)]\n     pub fn type_id<T: ?Sized + 'static>() -> TypeId;\n \n     /// Create a value initialized to zero.\n@@ -545,21 +551,3 @@ extern \"rust-intrinsic\" {\n     /// Performs checked `u64` multiplication.\n     pub fn u64_mul_with_overflow(x: u64, y: u64) -> (u64, bool);\n }\n-\n-\n-/// `TypeId` represents a globally unique identifier for a type\n-#[lang=\"type_id\"] // This needs to be kept in lockstep with the code in trans/intrinsic.rs and\n-                  // middle/lang_items.rs\n-#[derive(Clone, Copy, PartialEq, Eq, Show)]\n-pub struct TypeId {\n-    t: u64,\n-}\n-\n-impl TypeId {\n-    /// Returns the `TypeId` of the type this generic function has been instantiated with\n-    pub fn of<T: ?Sized + 'static>() -> TypeId {\n-        unsafe { type_id::<T>() }\n-    }\n-\n-    pub fn hash(&self) -> u64 { self.t }\n-}"}, {"sha": "b836f5f3f69f4bf56836d3bef96828383323e084", "filename": "src/libcoretest/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65b61ffb3f55c996eceded6c91281911b671d978/src%2Flibcoretest%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65b61ffb3f55c996eceded6c91281911b671d978/src%2Flibcoretest%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fintrinsics.rs?ref=65b61ffb3f55c996eceded6c91281911b671d978", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::intrinsics::TypeId;\n+use core::any::TypeId;\n \n #[test]\n fn test_typeid_sized_types() {"}, {"sha": "ff79ace992409f0ae50ca7a684b031dcefb32e6b", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65b61ffb3f55c996eceded6c91281911b671d978/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65b61ffb3f55c996eceded6c91281911b671d978/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=65b61ffb3f55c996eceded6c91281911b671d978", "patch": "@@ -307,8 +307,6 @@ lets_do_this! {\n     TyDescStructLangItem,            \"ty_desc\",                 ty_desc;\n     OpaqueStructLangItem,            \"opaque\",                  opaque;\n \n-    TypeIdLangItem,                  \"type_id\",                 type_id;\n-\n     EhPersonalityLangItem,           \"eh_personality\",          eh_personality;\n \n     ExchangeHeapLangItem,            \"exchange_heap\",           exchange_heap;"}, {"sha": "771c51d629fb4e054856aaea25f4b7947356bc80", "filename": "src/librustc_trans/trans/intrinsic.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65b61ffb3f55c996eceded6c91281911b671d978/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65b61ffb3f55c996eceded6c91281911b671d978/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs?ref=65b61ffb3f55c996eceded6c91281911b671d978", "patch": "@@ -355,8 +355,6 @@ pub fn trans_intrinsic_call<'a, 'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n                 ccx.tcx(),\n                 *substs.types.get(FnSpace, 0),\n                 &ccx.link_meta().crate_hash);\n-            // NB: This needs to be kept in lockstep with the TypeId struct in\n-            //     the intrinsic module\n             C_u64(ccx, hash)\n         }\n         (_, \"init\") => {"}, {"sha": "f610456f73cf103dfdc63cbdc33e897df79f65ff", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/65b61ffb3f55c996eceded6c91281911b671d978/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65b61ffb3f55c996eceded6c91281911b671d978/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=65b61ffb3f55c996eceded6c91281911b671d978", "patch": "@@ -104,7 +104,6 @@ use rscope::RegionScope;\n use session::Session;\n use {CrateCtxt, lookup_def_ccx, no_params, require_same_types};\n use TypeAndSubsts;\n-use middle::lang_items::TypeIdLangItem;\n use lint;\n use util::common::{block_query, indenter, loop_query};\n use util::ppaux::{self, Repr};\n@@ -5239,18 +5238,7 @@ pub fn check_intrinsic_type(ccx: &CrateCtxt, it: &ast::ForeignItem) {\n               });\n               (1u, Vec::new(), td_ptr)\n             }\n-            \"type_id\" => {\n-                let langid = ccx.tcx.lang_items.require(TypeIdLangItem);\n-                match langid {\n-                    Ok(did) => (1u,\n-                                Vec::new(),\n-                                ty::mk_struct(ccx.tcx, did,\n-                                              ccx.tcx.mk_substs(subst::Substs::empty()))),\n-                    Err(msg) => {\n-                        tcx.sess.span_fatal(it.span, &msg[]);\n-                    }\n-                }\n-            },\n+            \"type_id\" => (1u, Vec::new(), ccx.tcx.types.u64),\n             \"offset\" => {\n               (1,\n                vec!("}, {"sha": "f24721adb5d968cff71300a37ba672ba71b57292", "filename": "src/test/auxiliary/issue13507.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65b61ffb3f55c996eceded6c91281911b671d978/src%2Ftest%2Fauxiliary%2Fissue13507.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65b61ffb3f55c996eceded6c91281911b671d978/src%2Ftest%2Fauxiliary%2Fissue13507.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue13507.rs?ref=65b61ffb3f55c996eceded6c91281911b671d978", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n pub mod testtypes {\n-    use std::intrinsics::TypeId;\n+    use std::any::TypeId;\n \n     pub fn type_ids() -> Vec<TypeId> {\n         let mut ids = vec!();"}, {"sha": "82f613ee117ca63966af0532f5d3473b3b46b41c", "filename": "src/test/auxiliary/typeid-intrinsic.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/65b61ffb3f55c996eceded6c91281911b671d978/src%2Ftest%2Fauxiliary%2Ftypeid-intrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65b61ffb3f55c996eceded6c91281911b671d978/src%2Ftest%2Fauxiliary%2Ftypeid-intrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Ftypeid-intrinsic.rs?ref=65b61ffb3f55c996eceded6c91281911b671d978", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::intrinsics;\n-use std::intrinsics::TypeId;\n+use std::any::TypeId;\n \n pub struct A;\n pub struct B(Option<A>);\n@@ -21,13 +20,13 @@ pub type F = Option<int>;\n pub type G = uint;\n pub type H = &'static str;\n \n-pub unsafe fn id_A() -> TypeId { intrinsics::type_id::<A>() }\n-pub unsafe fn id_B() -> TypeId { intrinsics::type_id::<B>() }\n-pub unsafe fn id_C() -> TypeId { intrinsics::type_id::<C>() }\n-pub unsafe fn id_D() -> TypeId { intrinsics::type_id::<D>() }\n-pub unsafe fn id_E() -> TypeId { intrinsics::type_id::<E>() }\n-pub unsafe fn id_F() -> TypeId { intrinsics::type_id::<F>() }\n-pub unsafe fn id_G() -> TypeId { intrinsics::type_id::<G>() }\n-pub unsafe fn id_H() -> TypeId { intrinsics::type_id::<H>() }\n+pub unsafe fn id_A() -> TypeId { TypeId::of::<A>() }\n+pub unsafe fn id_B() -> TypeId { TypeId::of::<B>() }\n+pub unsafe fn id_C() -> TypeId { TypeId::of::<C>() }\n+pub unsafe fn id_D() -> TypeId { TypeId::of::<D>() }\n+pub unsafe fn id_E() -> TypeId { TypeId::of::<E>() }\n+pub unsafe fn id_F() -> TypeId { TypeId::of::<F>() }\n+pub unsafe fn id_G() -> TypeId { TypeId::of::<G>() }\n+pub unsafe fn id_H() -> TypeId { TypeId::of::<H>() }\n \n-pub unsafe fn foo<T: 'static>() -> TypeId { intrinsics::type_id::<T>() }\n+pub unsafe fn foo<T: 'static>() -> TypeId { TypeId::of::<T>() }"}, {"sha": "82f613ee117ca63966af0532f5d3473b3b46b41c", "filename": "src/test/auxiliary/typeid-intrinsic2.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/65b61ffb3f55c996eceded6c91281911b671d978/src%2Ftest%2Fauxiliary%2Ftypeid-intrinsic2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65b61ffb3f55c996eceded6c91281911b671d978/src%2Ftest%2Fauxiliary%2Ftypeid-intrinsic2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Ftypeid-intrinsic2.rs?ref=65b61ffb3f55c996eceded6c91281911b671d978", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::intrinsics;\n-use std::intrinsics::TypeId;\n+use std::any::TypeId;\n \n pub struct A;\n pub struct B(Option<A>);\n@@ -21,13 +20,13 @@ pub type F = Option<int>;\n pub type G = uint;\n pub type H = &'static str;\n \n-pub unsafe fn id_A() -> TypeId { intrinsics::type_id::<A>() }\n-pub unsafe fn id_B() -> TypeId { intrinsics::type_id::<B>() }\n-pub unsafe fn id_C() -> TypeId { intrinsics::type_id::<C>() }\n-pub unsafe fn id_D() -> TypeId { intrinsics::type_id::<D>() }\n-pub unsafe fn id_E() -> TypeId { intrinsics::type_id::<E>() }\n-pub unsafe fn id_F() -> TypeId { intrinsics::type_id::<F>() }\n-pub unsafe fn id_G() -> TypeId { intrinsics::type_id::<G>() }\n-pub unsafe fn id_H() -> TypeId { intrinsics::type_id::<H>() }\n+pub unsafe fn id_A() -> TypeId { TypeId::of::<A>() }\n+pub unsafe fn id_B() -> TypeId { TypeId::of::<B>() }\n+pub unsafe fn id_C() -> TypeId { TypeId::of::<C>() }\n+pub unsafe fn id_D() -> TypeId { TypeId::of::<D>() }\n+pub unsafe fn id_E() -> TypeId { TypeId::of::<E>() }\n+pub unsafe fn id_F() -> TypeId { TypeId::of::<F>() }\n+pub unsafe fn id_G() -> TypeId { TypeId::of::<G>() }\n+pub unsafe fn id_H() -> TypeId { TypeId::of::<H>() }\n \n-pub unsafe fn foo<T: 'static>() -> TypeId { intrinsics::type_id::<T>() }\n+pub unsafe fn foo<T: 'static>() -> TypeId { TypeId::of::<T>() }"}, {"sha": "ade8b397e0003d0e306f145ee334f934a8850a0d", "filename": "src/test/compile-fail/extern-with-type-bounds.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/65b61ffb3f55c996eceded6c91281911b671d978/src%2Ftest%2Fcompile-fail%2Fextern-with-type-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65b61ffb3f55c996eceded6c91281911b671d978/src%2Ftest%2Fcompile-fail%2Fextern-with-type-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fextern-with-type-bounds.rs?ref=65b61ffb3f55c996eceded6c91281911b671d978", "patch": "@@ -10,11 +10,9 @@\n \n #![feature(intrinsics)]\n \n-use std::intrinsics::TypeId;\n-\n extern \"rust-intrinsic\" {\n     // Real example from libcore\n-    fn type_id<T: ?Sized + 'static>() -> TypeId;\n+    fn type_id<T: ?Sized + 'static>() -> u64;\n \n     // Silent bounds made explicit to make sure they are actually\n     // resolved."}, {"sha": "20323e99003332bda38454e693b148ed2cf09bcc", "filename": "src/test/compile-fail/issue-18389.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65b61ffb3f55c996eceded6c91281911b671d978/src%2Ftest%2Fcompile-fail%2Fissue-18389.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65b61ffb3f55c996eceded6c91281911b671d978/src%2Ftest%2Fcompile-fail%2Fissue-18389.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-18389.rs?ref=65b61ffb3f55c996eceded6c91281911b671d978", "patch": "@@ -11,7 +11,7 @@\n #![feature(unboxed_closures)]\n \n use std::any::Any;\n-use std::intrinsics::TypeId;\n+use std::any::TypeId;\n \n pub trait Pt {}\n pub trait Rt {}"}, {"sha": "1c0283070a249be5cf66c7a9240b5ea55a656c95", "filename": "src/test/run-pass/issue-13507-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65b61ffb3f55c996eceded6c91281911b671d978/src%2Ftest%2Frun-pass%2Fissue-13507-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65b61ffb3f55c996eceded6c91281911b671d978/src%2Ftest%2Frun-pass%2Fissue-13507-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-13507-2.rs?ref=65b61ffb3f55c996eceded6c91281911b671d978", "patch": "@@ -12,7 +12,7 @@\n extern crate issue13507;\n use issue13507::testtypes;\n \n-use std::intrinsics::TypeId;\n+use std::any::TypeId;\n \n pub fn type_ids() -> Vec<TypeId> {\n     let mut ids = vec!();"}, {"sha": "b114391a36db0220d7074dbf64683765e21973c7", "filename": "src/test/run-pass/type-id-higher-rank.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65b61ffb3f55c996eceded6c91281911b671d978/src%2Ftest%2Frun-pass%2Ftype-id-higher-rank.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65b61ffb3f55c996eceded6c91281911b671d978/src%2Ftest%2Frun-pass%2Ftype-id-higher-rank.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftype-id-higher-rank.rs?ref=65b61ffb3f55c996eceded6c91281911b671d978", "patch": "@@ -13,7 +13,7 @@\n \n #![feature(unboxed_closures)]\n \n-use std::intrinsics::TypeId;\n+use std::any::TypeId;\n \n fn main() {\n     // Bare fns"}, {"sha": "a251fcc7327201b51e68ebaf16fdf90505f48d1b", "filename": "src/test/run-pass/typeid-intrinsic.rs", "status": "modified", "additions": 21, "deletions": 22, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/65b61ffb3f55c996eceded6c91281911b671d978/src%2Ftest%2Frun-pass%2Ftypeid-intrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65b61ffb3f55c996eceded6c91281911b671d978/src%2Ftest%2Frun-pass%2Ftypeid-intrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftypeid-intrinsic.rs?ref=65b61ffb3f55c996eceded6c91281911b671d978", "patch": "@@ -15,41 +15,40 @@ extern crate \"typeid-intrinsic\" as other1;\n extern crate \"typeid-intrinsic2\" as other2;\n \n use std::hash::{self, SipHasher};\n-use std::intrinsics;\n-use std::intrinsics::TypeId;\n+use std::any::TypeId;\n \n struct A;\n struct Test;\n \n pub fn main() {\n     unsafe {\n-        assert_eq!(intrinsics::type_id::<other1::A>(), other1::id_A());\n-        assert_eq!(intrinsics::type_id::<other1::B>(), other1::id_B());\n-        assert_eq!(intrinsics::type_id::<other1::C>(), other1::id_C());\n-        assert_eq!(intrinsics::type_id::<other1::D>(), other1::id_D());\n-        assert_eq!(intrinsics::type_id::<other1::E>(), other1::id_E());\n-        assert_eq!(intrinsics::type_id::<other1::F>(), other1::id_F());\n-        assert_eq!(intrinsics::type_id::<other1::G>(), other1::id_G());\n-        assert_eq!(intrinsics::type_id::<other1::H>(), other1::id_H());\n+        assert_eq!(TypeId::of::<other1::A>(), other1::id_A());\n+        assert_eq!(TypeId::of::<other1::B>(), other1::id_B());\n+        assert_eq!(TypeId::of::<other1::C>(), other1::id_C());\n+        assert_eq!(TypeId::of::<other1::D>(), other1::id_D());\n+        assert_eq!(TypeId::of::<other1::E>(), other1::id_E());\n+        assert_eq!(TypeId::of::<other1::F>(), other1::id_F());\n+        assert_eq!(TypeId::of::<other1::G>(), other1::id_G());\n+        assert_eq!(TypeId::of::<other1::H>(), other1::id_H());\n \n-        assert_eq!(intrinsics::type_id::<other2::A>(), other2::id_A());\n-        assert_eq!(intrinsics::type_id::<other2::B>(), other2::id_B());\n-        assert_eq!(intrinsics::type_id::<other2::C>(), other2::id_C());\n-        assert_eq!(intrinsics::type_id::<other2::D>(), other2::id_D());\n-        assert_eq!(intrinsics::type_id::<other2::E>(), other2::id_E());\n-        assert_eq!(intrinsics::type_id::<other2::F>(), other2::id_F());\n-        assert_eq!(intrinsics::type_id::<other2::G>(), other2::id_G());\n-        assert_eq!(intrinsics::type_id::<other2::H>(), other2::id_H());\n+        assert_eq!(TypeId::of::<other2::A>(), other2::id_A());\n+        assert_eq!(TypeId::of::<other2::B>(), other2::id_B());\n+        assert_eq!(TypeId::of::<other2::C>(), other2::id_C());\n+        assert_eq!(TypeId::of::<other2::D>(), other2::id_D());\n+        assert_eq!(TypeId::of::<other2::E>(), other2::id_E());\n+        assert_eq!(TypeId::of::<other2::F>(), other2::id_F());\n+        assert_eq!(TypeId::of::<other2::G>(), other2::id_G());\n+        assert_eq!(TypeId::of::<other2::H>(), other2::id_H());\n \n         assert_eq!(other1::id_F(), other2::id_F());\n         assert_eq!(other1::id_G(), other2::id_G());\n         assert_eq!(other1::id_H(), other2::id_H());\n \n-        assert_eq!(intrinsics::type_id::<int>(), other2::foo::<int>());\n-        assert_eq!(intrinsics::type_id::<int>(), other1::foo::<int>());\n+        assert_eq!(TypeId::of::<int>(), other2::foo::<int>());\n+        assert_eq!(TypeId::of::<int>(), other1::foo::<int>());\n         assert_eq!(other2::foo::<int>(), other1::foo::<int>());\n-        assert_eq!(intrinsics::type_id::<A>(), other2::foo::<A>());\n-        assert_eq!(intrinsics::type_id::<A>(), other1::foo::<A>());\n+        assert_eq!(TypeId::of::<A>(), other2::foo::<A>());\n+        assert_eq!(TypeId::of::<A>(), other1::foo::<A>());\n         assert_eq!(other2::foo::<A>(), other1::foo::<A>());\n     }\n "}]}