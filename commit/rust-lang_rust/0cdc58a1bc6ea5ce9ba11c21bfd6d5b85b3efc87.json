{"sha": "0cdc58a1bc6ea5ce9ba11c21bfd6d5b85b3efc87", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjZGM1OGExYmM2ZWE1Y2U5YmExMWMyMWJmZDZkNWI4NWIzZWZjODc=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-09-01T16:24:02Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-09-05T14:47:27Z"}, "message": "rustc: Store InternedString in `DefPathData`\n\nPreviously a `Symbol` was stored there, but this ended up causing hash\ncollisions in situations that otherwise shouldn't have a hash collision. Only\nthe symbol's string value was hashed, but it was possible for distinct symbols\nto have the same string value, fooling various calcuations into thinking that\nthese paths *didn't* need disambiguating data when in fact they did!\n\nBy storing `InternedString` instead we're hopefully triggering all the exising\nlogic to disambiguate paths with same-name `Symbol` but actually distinct\nlocations.", "tree": {"sha": "739a1228f50ecb3fe062fdf4764a6c1f3847f113", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/739a1228f50ecb3fe062fdf4764a6c1f3847f113"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0cdc58a1bc6ea5ce9ba11c21bfd6d5b85b3efc87", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0cdc58a1bc6ea5ce9ba11c21bfd6d5b85b3efc87", "html_url": "https://github.com/rust-lang/rust/commit/0cdc58a1bc6ea5ce9ba11c21bfd6d5b85b3efc87", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0cdc58a1bc6ea5ce9ba11c21bfd6d5b85b3efc87/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a231961d59135c7dc41d9b94ffe43ecc9bbd8cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a231961d59135c7dc41d9b94ffe43ecc9bbd8cb", "html_url": "https://github.com/rust-lang/rust/commit/9a231961d59135c7dc41d9b94ffe43ecc9bbd8cb"}], "stats": {"total": 152, "additions": 77, "deletions": 75}, "files": [{"sha": "db86c4f93ee5269a6739f23e041e2539d3df9b33", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cdc58a1bc6ea5ce9ba11c21bfd6d5b85b3efc87/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cdc58a1bc6ea5ce9ba11c21bfd6d5b85b3efc87/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=0cdc58a1bc6ea5ce9ba11c21bfd6d5b85b3efc87", "patch": "@@ -2863,7 +2863,7 @@ impl<'a> LoweringContext<'a> {\n         let parent_def = self.parent_def.unwrap();\n         let def_id = {\n             let defs = self.resolver.definitions();\n-            let def_path_data = DefPathData::Binding(name);\n+            let def_path_data = DefPathData::Binding(name.as_str());\n             let def_index = defs.create_def_with_parent(parent_def,\n                                                         node_id,\n                                                         def_path_data,"}, {"sha": "af027e321c6a1da4e4f235e607d0898466eee3e0", "filename": "src/librustc/hir/map/def_collector.rs", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/0cdc58a1bc6ea5ce9ba11c21bfd6d5b85b3efc87/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cdc58a1bc6ea5ce9ba11c21bfd6d5b85b3efc87/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs?ref=0cdc58a1bc6ea5ce9ba11c21bfd6d5b85b3efc87", "patch": "@@ -104,14 +104,14 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n                 DefPathData::Impl,\n             ItemKind::Enum(..) | ItemKind::Struct(..) | ItemKind::Union(..) | ItemKind::Trait(..) |\n             ItemKind::ExternCrate(..) | ItemKind::ForeignMod(..) | ItemKind::Ty(..) =>\n-                DefPathData::TypeNs(i.ident.name),\n+                DefPathData::TypeNs(i.ident.name.as_str()),\n             ItemKind::Mod(..) if i.ident == keywords::Invalid.ident() => {\n                 return visit::walk_item(self, i);\n             }\n-            ItemKind::Mod(..) => DefPathData::Module(i.ident.name),\n+            ItemKind::Mod(..) => DefPathData::Module(i.ident.name.as_str()),\n             ItemKind::Static(..) | ItemKind::Const(..) | ItemKind::Fn(..) =>\n-                DefPathData::ValueNs(i.ident.name),\n-            ItemKind::MacroDef(..) => DefPathData::MacroDef(i.ident.name),\n+                DefPathData::ValueNs(i.ident.name.as_str()),\n+            ItemKind::MacroDef(..) => DefPathData::MacroDef(i.ident.name.as_str()),\n             ItemKind::Mac(..) => return self.visit_macro_invoc(i.id, false),\n             ItemKind::GlobalAsm(..) => DefPathData::Misc,\n             ItemKind::Use(ref view_path) => {\n@@ -139,13 +139,15 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n                     for v in &enum_definition.variants {\n                         let variant_def_index =\n                             this.create_def(v.node.data.id(),\n-                                            DefPathData::EnumVariant(v.node.name.name),\n+                                            DefPathData::EnumVariant(v.node.name.name.as_str()),\n                                             REGULAR_SPACE);\n                         this.with_parent(variant_def_index, |this| {\n                             for (index, field) in v.node.data.fields().iter().enumerate() {\n                                 let name = field.ident.map(|ident| ident.name)\n                                     .unwrap_or_else(|| Symbol::intern(&index.to_string()));\n-                                this.create_def(field.id, DefPathData::Field(name), REGULAR_SPACE);\n+                                this.create_def(field.id,\n+                                                DefPathData::Field(name.as_str()),\n+                                                REGULAR_SPACE);\n                             }\n \n                             if let Some(ref expr) = v.node.disr_expr {\n@@ -165,7 +167,7 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n                     for (index, field) in struct_def.fields().iter().enumerate() {\n                         let name = field.ident.map(|ident| ident.name)\n                             .unwrap_or_else(|| Symbol::intern(&index.to_string()));\n-                        this.create_def(field.id, DefPathData::Field(name), REGULAR_SPACE);\n+                        this.create_def(field.id, DefPathData::Field(name.as_str()), REGULAR_SPACE);\n                     }\n                 }\n                 _ => {}\n@@ -176,7 +178,7 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n \n     fn visit_foreign_item(&mut self, foreign_item: &'a ForeignItem) {\n         let def = self.create_def(foreign_item.id,\n-                                  DefPathData::ValueNs(foreign_item.ident.name),\n+                                  DefPathData::ValueNs(foreign_item.ident.name.as_str()),\n                                   REGULAR_SPACE);\n \n         self.with_parent(def, |this| {\n@@ -187,7 +189,7 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n     fn visit_generics(&mut self, generics: &'a Generics) {\n         for ty_param in generics.ty_params.iter() {\n             self.create_def(ty_param.id,\n-                            DefPathData::TypeParam(ty_param.ident.name),\n+                            DefPathData::TypeParam(ty_param.ident.name.as_str()),\n                             REGULAR_SPACE);\n         }\n \n@@ -197,8 +199,8 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n     fn visit_trait_item(&mut self, ti: &'a TraitItem) {\n         let def_data = match ti.node {\n             TraitItemKind::Method(..) | TraitItemKind::Const(..) =>\n-                DefPathData::ValueNs(ti.ident.name),\n-            TraitItemKind::Type(..) => DefPathData::TypeNs(ti.ident.name),\n+                DefPathData::ValueNs(ti.ident.name.as_str()),\n+            TraitItemKind::Type(..) => DefPathData::TypeNs(ti.ident.name.as_str()),\n             TraitItemKind::Macro(..) => return self.visit_macro_invoc(ti.id, false),\n         };\n \n@@ -215,8 +217,8 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n     fn visit_impl_item(&mut self, ii: &'a ImplItem) {\n         let def_data = match ii.node {\n             ImplItemKind::Method(..) | ImplItemKind::Const(..) =>\n-                DefPathData::ValueNs(ii.ident.name),\n-            ImplItemKind::Type(..) => DefPathData::TypeNs(ii.ident.name),\n+                DefPathData::ValueNs(ii.ident.name.as_str()),\n+            ImplItemKind::Type(..) => DefPathData::TypeNs(ii.ident.name.as_str()),\n             ImplItemKind::Macro(..) => return self.visit_macro_invoc(ii.id, false),\n         };\n \n@@ -237,7 +239,7 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n             PatKind::Mac(..) => return self.visit_macro_invoc(pat.id, false),\n             PatKind::Ident(_, id, _) => {\n                 let def = self.create_def(pat.id,\n-                                          DefPathData::Binding(id.node.name),\n+                                          DefPathData::Binding(id.node.name.as_str()),\n                                           REGULAR_SPACE);\n                 self.parent_def = Some(def);\n             }\n@@ -282,7 +284,7 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n \n     fn visit_lifetime_def(&mut self, def: &'a LifetimeDef) {\n         self.create_def(def.lifetime.id,\n-                        DefPathData::LifetimeDef(def.lifetime.ident.name),\n+                        DefPathData::LifetimeDef(def.lifetime.ident.name.as_str()),\n                         REGULAR_SPACE);\n     }\n "}, {"sha": "7bd2e5eceaec6faa8c974236e83323e1a26cc288", "filename": "src/librustc/hir/map/definitions.rs", "status": "modified", "additions": 19, "deletions": 17, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/0cdc58a1bc6ea5ce9ba11c21bfd6d5b85b3efc87/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cdc58a1bc6ea5ce9ba11c21bfd6d5b85b3efc87/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs?ref=0cdc58a1bc6ea5ce9ba11c21bfd6d5b85b3efc87", "patch": "@@ -80,8 +80,10 @@ impl DefPathTable {\n \n     #[inline(always)]\n     pub fn def_path_hash(&self, index: DefIndex) -> DefPathHash {\n-        self.def_path_hashes[index.address_space().index()]\n-                            [index.as_array_index()]\n+        let ret = self.def_path_hashes[index.address_space().index()]\n+                                      [index.as_array_index()];\n+        debug!(\"def_path_hash({:?}) = {:?}\", index, ret);\n+        return ret\n     }\n \n     pub fn add_def_path_hashes_to(&self,\n@@ -213,7 +215,7 @@ impl DefKey {\n             DefPathData::Binding(name) |\n             DefPathData::Field(name) |\n             DefPathData::GlobalMetaData(name) => {\n-                (*name.as_str()).hash(&mut hasher);\n+                name.hash(&mut hasher);\n             }\n \n             DefPathData::Impl |\n@@ -347,31 +349,31 @@ pub enum DefPathData {\n     /// An impl\n     Impl,\n     /// Something in the type NS\n-    TypeNs(Symbol),\n+    TypeNs(InternedString),\n     /// Something in the value NS\n-    ValueNs(Symbol),\n+    ValueNs(InternedString),\n     /// A module declaration\n-    Module(Symbol),\n+    Module(InternedString),\n     /// A macro rule\n-    MacroDef(Symbol),\n+    MacroDef(InternedString),\n     /// A closure expression\n     ClosureExpr,\n \n     // Subportions of items\n     /// A type parameter (generic parameter)\n-    TypeParam(Symbol),\n+    TypeParam(InternedString),\n     /// A lifetime definition\n-    LifetimeDef(Symbol),\n+    LifetimeDef(InternedString),\n     /// A variant of a enum\n-    EnumVariant(Symbol),\n+    EnumVariant(InternedString),\n     /// A struct field\n-    Field(Symbol),\n+    Field(InternedString),\n     /// Implicit ctor for a tuple-like struct\n     StructCtor,\n     /// Initializer for a const\n     Initializer,\n     /// Pattern binding\n-    Binding(Symbol),\n+    Binding(InternedString),\n     /// An `impl Trait` type node.\n     ImplTrait,\n     /// A `typeof` type node.\n@@ -380,7 +382,7 @@ pub enum DefPathData {\n     /// GlobalMetaData identifies a piece of crate metadata that is global to\n     /// a whole crate (as opposed to just one item). GlobalMetaData components\n     /// are only supposed to show up right below the crate root.\n-    GlobalMetaData(Symbol)\n+    GlobalMetaData(InternedString)\n }\n \n #[derive(Copy, Clone, Hash, PartialEq, Eq, PartialOrd, Ord, Debug,\n@@ -601,7 +603,7 @@ impl Definitions {\n }\n \n impl DefPathData {\n-    pub fn get_opt_name(&self) -> Option<Symbol> {\n+    pub fn get_opt_name(&self) -> Option<InternedString> {\n         use self::DefPathData::*;\n         match *self {\n             TypeNs(name) |\n@@ -639,7 +641,7 @@ impl DefPathData {\n             Binding(name) |\n             Field(name) |\n             GlobalMetaData(name) => {\n-                return name.as_str();\n+                return name\n             }\n \n             // note that this does not show up in user printouts\n@@ -684,7 +686,7 @@ macro_rules! define_global_metadata_kind {\n                     definitions.create_def_with_parent(\n                         CRATE_DEF_INDEX,\n                         ast::DUMMY_NODE_ID,\n-                        DefPathData::GlobalMetaData(instance.name()),\n+                        DefPathData::GlobalMetaData(instance.name().as_str()),\n                         GLOBAL_MD_ADDRESS_SPACE,\n                         Mark::root()\n                     );\n@@ -698,7 +700,7 @@ macro_rules! define_global_metadata_kind {\n                 let def_key = DefKey {\n                     parent: Some(CRATE_DEF_INDEX),\n                     disambiguated_data: DisambiguatedDefPathData {\n-                        data: DefPathData::GlobalMetaData(self.name()),\n+                        data: DefPathData::GlobalMetaData(self.name().as_str()),\n                         disambiguator: 0,\n                     }\n                 };"}, {"sha": "cfbd4ba055e3c3827e27fa68319ba19f2a194a33", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cdc58a1bc6ea5ce9ba11c21bfd6d5b85b3efc87/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cdc58a1bc6ea5ce9ba11c21bfd6d5b85b3efc87/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=0cdc58a1bc6ea5ce9ba11c21bfd6d5b85b3efc87", "patch": "@@ -348,7 +348,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             //\n             // Currently I'm leaving it for what I need for `try`.\n             if self.tcx.trait_of_item(item) == Some(trait_ref.def_id) {\n-                method = self.tcx.item_name(item).as_str();\n+                method = self.tcx.item_name(item);\n                 flags.push((\"from_method\", None));\n                 flags.push((\"from_method\", Some(&*method)));\n             }"}, {"sha": "94f6efcad4adc7efdee2cd0ed6e47edf74f229f4", "filename": "src/librustc/traits/on_unimplemented.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0cdc58a1bc6ea5ce9ba11c21bfd6d5b85b3efc87/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cdc58a1bc6ea5ce9ba11c21bfd6d5b85b3efc87/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs?ref=0cdc58a1bc6ea5ce9ba11c21bfd6d5b85b3efc87", "patch": "@@ -227,7 +227,7 @@ impl<'a, 'gcx, 'tcx> OnUnimplementedFormatString {\n               span: Span)\n               -> Result<(), ErrorReported>\n     {\n-        let name = tcx.item_name(trait_def_id).as_str();\n+        let name = tcx.item_name(trait_def_id);\n         let generics = tcx.generics_of(trait_def_id);\n         let parser = Parser::new(&self.0);\n         let types = &generics.types;\n@@ -272,7 +272,7 @@ impl<'a, 'gcx, 'tcx> OnUnimplementedFormatString {\n                   trait_ref: ty::TraitRef<'tcx>)\n                   -> String\n     {\n-        let name = tcx.item_name(trait_ref.def_id).as_str();\n+        let name = tcx.item_name(trait_ref.def_id);\n         let trait_str = tcx.item_path_str(trait_ref.def_id);\n         let generics = tcx.generics_of(trait_ref.def_id);\n         let generic_map = generics.types.iter().map(|param| {"}, {"sha": "d9d311b14a36ec78f36c0238ff3f6b08cc94410a", "filename": "src/librustc/ty/item_path.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0cdc58a1bc6ea5ce9ba11c21bfd6d5b85b3efc87/src%2Flibrustc%2Fty%2Fitem_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cdc58a1bc6ea5ce9ba11c21bfd6d5b85b3efc87/src%2Flibrustc%2Fty%2Fitem_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fitem_path.rs?ref=0cdc58a1bc6ea5ce9ba11c21bfd6d5b85b3efc87", "patch": "@@ -13,6 +13,7 @@ use hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use ty::{self, Ty, TyCtxt};\n use syntax::ast;\n use syntax::symbol::Symbol;\n+use syntax::symbol::InternedString;\n \n use std::cell::Cell;\n \n@@ -130,20 +131,20 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     {\n         let visible_parent_map = self.visible_parent_map(LOCAL_CRATE);\n \n-        let (mut cur_def, mut cur_path) = (external_def_id, Vec::<ast::Name>::new());\n+        let (mut cur_def, mut cur_path) = (external_def_id, Vec::<InternedString>::new());\n         loop {\n             // If `cur_def` is a direct or injected extern crate, push the path to the crate\n             // followed by the path to the item within the crate and return.\n             if cur_def.index == CRATE_DEF_INDEX {\n                 match *self.extern_crate(cur_def) {\n                     Some(ref extern_crate) if extern_crate.direct => {\n                         self.push_item_path(buffer, extern_crate.def_id);\n-                        cur_path.iter().rev().map(|segment| buffer.push(&segment.as_str())).count();\n+                        cur_path.iter().rev().map(|segment| buffer.push(&segment)).count();\n                         return true;\n                     }\n                     None => {\n                         buffer.push(&self.crate_name(cur_def.krate).as_str());\n-                        cur_path.iter().rev().map(|segment| buffer.push(&segment.as_str())).count();\n+                        cur_path.iter().rev().map(|segment| buffer.push(&segment)).count();\n                         return true;\n                     }\n                     _ => {},\n@@ -152,7 +153,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n \n             cur_path.push(self.sess.cstore.def_key(cur_def)\n                               .disambiguated_data.data.get_opt_name().unwrap_or_else(||\n-                Symbol::intern(\"<unnamed>\")));\n+                Symbol::intern(\"<unnamed>\").as_str()));\n             match visible_parent_map.get(&cur_def) {\n                 Some(&def) => cur_def = def,\n                 None => return false,"}, {"sha": "29e5e4e3431346e674466b57374a749c709ffd10", "filename": "src/librustc/ty/maps.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0cdc58a1bc6ea5ce9ba11c21bfd6d5b85b3efc87/src%2Flibrustc%2Fty%2Fmaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cdc58a1bc6ea5ce9ba11c21bfd6d5b85b3efc87/src%2Flibrustc%2Fty%2Fmaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps.rs?ref=0cdc58a1bc6ea5ce9ba11c21bfd6d5b85b3efc87", "patch": "@@ -20,7 +20,6 @@ use middle::cstore::{ExternCrate, LinkagePreference, NativeLibrary};\n use middle::cstore::{NativeLibraryKind, DepKind, CrateSource};\n use middle::privacy::AccessLevels;\n use middle::region;\n-use middle::region::RegionMaps;\n use middle::resolve_lifetime::{Region, ObjectLifetimeDefault};\n use middle::stability::{self, DeprecationEntry};\n use middle::lang_items::{LanguageItems, LangItem};"}, {"sha": "ef0d844be957f0569062d667770e96d540eded3c", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0cdc58a1bc6ea5ce9ba11c21bfd6d5b85b3efc87/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cdc58a1bc6ea5ce9ba11c21bfd6d5b85b3efc87/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=0cdc58a1bc6ea5ce9ba11c21bfd6d5b85b3efc87", "patch": "@@ -2206,11 +2206,11 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         }\n     }\n \n-    pub fn item_name(self, id: DefId) -> ast::Name {\n+    pub fn item_name(self, id: DefId) -> InternedString {\n         if let Some(id) = self.hir.as_local_node_id(id) {\n-            self.hir.name(id)\n+            self.hir.name(id).as_str()\n         } else if id.index == CRATE_DEF_INDEX {\n-            self.original_crate_name(id.krate)\n+            self.original_crate_name(id.krate).as_str()\n         } else {\n             let def_key = self.sess.cstore.def_key(id);\n             // The name of a StructCtor is that of its struct parent."}, {"sha": "ea6e1d4cddcca8b5d8dd7caab5213e7fd25130ca", "filename": "src/librustc_const_eval/eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cdc58a1bc6ea5ce9ba11c21bfd6d5b85b3efc87/src%2Flibrustc_const_eval%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cdc58a1bc6ea5ce9ba11c21bfd6d5b85b3efc87/src%2Flibrustc_const_eval%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Feval.rs?ref=0cdc58a1bc6ea5ce9ba11c21bfd6d5b85b3efc87", "patch": "@@ -327,7 +327,7 @@ fn eval_const_expr_partial<'a, 'tcx>(cx: &ConstContext<'a, 'tcx>,\n                     ConstEvalErr { span: e.span, kind: LayoutError(err) }\n                 })\n             };\n-            match &tcx.item_name(def_id).as_str()[..] {\n+            match &tcx.item_name(def_id)[..] {\n                 \"size_of\" => {\n                     let size = layout_of(substs.type_at(0))?.size(tcx);\n                     return Ok(Integral(Usize(ConstUsize::new(size.bytes(),"}, {"sha": "de710942ca189595855fb2f205fd6555fc1ab7fe", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0cdc58a1bc6ea5ce9ba11c21bfd6d5b85b3efc87/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cdc58a1bc6ea5ce9ba11c21bfd6d5b85b3efc87/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=0cdc58a1bc6ea5ce9ba11c21bfd6d5b85b3efc87", "patch": "@@ -18,7 +18,6 @@ use rustc_trans;\n use rustc::middle::free_region::FreeRegionMap;\n use rustc::middle::region;\n use rustc::middle::resolve_lifetime;\n-use rustc::middle::stability;\n use rustc::ty::subst::{Kind, Subst};\n use rustc::traits::{ObligationCause, Reveal};\n use rustc::ty::{self, Ty, TyCtxt, TypeFoldable};\n@@ -140,7 +139,6 @@ fn test_env<F>(source_string: &str,\n \n     // run just enough stuff to build a tcx:\n     let named_region_map = resolve_lifetime::krate(&sess, &hir_map);\n-    let index = stability::Index::new(&sess);\n     TyCtxt::create_and_enter(&sess,\n                              ty::maps::Providers::default(),\n                              ty::maps::Providers::default(),\n@@ -150,7 +148,6 @@ fn test_env<F>(source_string: &str,\n                              resolutions,\n                              named_region_map.unwrap(),\n                              hir_map,\n-                             index,\n                              \"test_crate\",\n                              |tcx| {\n         tcx.infer_ctxt().enter(|infcx| {"}, {"sha": "61881bc033bea6fbc1fe69fd52ff612b3501f4bf", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0cdc58a1bc6ea5ce9ba11c21bfd6d5b85b3efc87/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cdc58a1bc6ea5ce9ba11c21bfd6d5b85b3efc87/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=0cdc58a1bc6ea5ce9ba11c21bfd6d5b85b3efc87", "patch": "@@ -40,7 +40,6 @@ use syntax::parse::filemap_to_stream;\n use syntax::symbol::Symbol;\n use syntax_pos::{Span, NO_EXPANSION};\n use rustc_data_structures::indexed_set::IdxSetBuf;\n-use rustc::hir::svh::Svh;\n use rustc::hir;\n \n macro_rules! provide {\n@@ -469,7 +468,7 @@ impl CrateStore for cstore::CStore {\n             .insert(local_span, (name.to_string(), data.get_span(id.index, sess)));\n \n         LoadedMacro::MacroDef(ast::Item {\n-            ident: ast::Ident::with_empty_ctxt(name),\n+            ident: ast::Ident::from_str(&name),\n             id: ast::DUMMY_NODE_ID,\n             span: local_span,\n             attrs: attrs.iter().cloned().collect(),"}, {"sha": "324bab369dc7d1dc38eb463133c84eeb5cb31f97", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/0cdc58a1bc6ea5ce9ba11c21bfd6d5b85b3efc87/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cdc58a1bc6ea5ce9ba11c21bfd6d5b85b3efc87/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=0cdc58a1bc6ea5ce9ba11c21bfd6d5b85b3efc87", "patch": "@@ -41,6 +41,7 @@ use rustc_serialize::{Decodable, Decoder, SpecializedDecoder, opaque};\n use syntax::attr;\n use syntax::ast::{self, Ident};\n use syntax::codemap;\n+use syntax::symbol::{InternedString, Symbol};\n use syntax::ext::base::MacroKind;\n use syntax_pos::{self, Span, BytePos, Pos, DUMMY_SP, NO_EXPANSION};\n \n@@ -473,7 +474,7 @@ impl<'a, 'tcx> CrateMetadata {\n         }\n     }\n \n-    pub fn item_name(&self, item_index: DefIndex) -> ast::Name {\n+    pub fn item_name(&self, item_index: DefIndex) -> InternedString {\n         self.def_key(item_index)\n             .disambiguated_data\n             .data\n@@ -520,12 +521,12 @@ impl<'a, 'tcx> CrateMetadata {\n \n         ty::VariantDef {\n             did: self.local_def_id(data.struct_ctor.unwrap_or(index)),\n-            name: self.item_name(index),\n+            name: Symbol::intern(&self.item_name(index)),\n             fields: item.children.decode(self).map(|index| {\n                 let f = self.entry(index);\n                 ty::FieldDef {\n                     did: self.local_def_id(index),\n-                    name: self.item_name(index),\n+                    name: Symbol::intern(&self.item_name(index)),\n                     vis: f.visibility.decode(self)\n                 }\n             }).collect(),\n@@ -705,7 +706,7 @@ impl<'a, 'tcx> CrateMetadata {\n                             if let Some(def) = self.get_def(child_index) {\n                                 callback(def::Export {\n                                     def,\n-                                    ident: Ident::with_empty_ctxt(self.item_name(child_index)),\n+                                    ident: Ident::from_str(&self.item_name(child_index)),\n                                     span: self.entry(child_index).span.decode((self, sess)),\n                                 });\n                             }\n@@ -722,7 +723,7 @@ impl<'a, 'tcx> CrateMetadata {\n                 let span = child.span.decode((self, sess));\n                 if let (Some(def), Some(name)) =\n                     (self.get_def(child_index), def_key.disambiguated_data.data.get_opt_name()) {\n-                    let ident = Ident::with_empty_ctxt(name);\n+                    let ident = Ident::from_str(&name);\n                     callback(def::Export { def: def, ident: ident, span: span });\n                     // For non-reexport structs and variants add their constructors to children.\n                     // Reexport lists automatically contain constructors when necessary.\n@@ -836,7 +837,7 @@ impl<'a, 'tcx> CrateMetadata {\n         };\n \n         ty::AssociatedItem {\n-            name,\n+            name: Symbol::intern(&name),\n             kind,\n             vis: item.visibility.decode(self),\n             defaultness: container.defaultness(),\n@@ -906,7 +907,7 @@ impl<'a, 'tcx> CrateMetadata {\n         self.entry(id)\n             .children\n             .decode(self)\n-            .map(|index| self.item_name(index))\n+            .map(|index| Symbol::intern(&self.item_name(index)))\n             .collect()\n     }\n \n@@ -1038,7 +1039,7 @@ impl<'a, 'tcx> CrateMetadata {\n             .collect()\n     }\n \n-    pub fn get_macro(&self, id: DefIndex) -> (ast::Name, MacroDef) {\n+    pub fn get_macro(&self, id: DefIndex) -> (InternedString, MacroDef) {\n         let entry = self.entry(id);\n         match entry.kind {\n             EntryKind::MacroDef(macro_def) => (self.item_name(id), macro_def.decode(self)),"}, {"sha": "ec06e474980a63478a68a681e3a2f30dab256ad7", "filename": "src/librustc_mir/build/expr/into.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cdc58a1bc6ea5ce9ba11c21bfd6d5b85b3efc87/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cdc58a1bc6ea5ce9ba11c21bfd6d5b85b3efc87/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs?ref=0cdc58a1bc6ea5ce9ba11c21bfd6d5b85b3efc87", "patch": "@@ -209,7 +209,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                         let f = ty.fn_sig(this.hir.tcx());\n                         if f.abi() == Abi::RustIntrinsic ||\n                            f.abi() == Abi::PlatformIntrinsic {\n-                            Some(this.hir.tcx().item_name(def_id).as_str())\n+                            Some(this.hir.tcx().item_name(def_id))\n                         } else {\n                             None\n                         }"}, {"sha": "ec545443bcd9040629bbbea6b2521e3b827ec57b", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cdc58a1bc6ea5ce9ba11c21bfd6d5b85b3efc87/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cdc58a1bc6ea5ce9ba11c21bfd6d5b85b3efc87/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=0cdc58a1bc6ea5ce9ba11c21bfd6d5b85b3efc87", "patch": "@@ -100,7 +100,7 @@ fn make_shim<'a, 'tcx>(tcx: ty::TyCtxt<'a, 'tcx, 'tcx>,\n             build_drop_shim(tcx, def_id, ty)\n         }\n         ty::InstanceDef::CloneShim(def_id, ty) => {\n-            let name = tcx.item_name(def_id).as_str();\n+            let name = tcx.item_name(def_id);\n             if name == \"clone\" {\n                 build_clone_shim(tcx, def_id, ty)\n             } else if name == \"clone_from\" {"}, {"sha": "ded97275468b9170d0ae2cb45a025ac285f5d804", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cdc58a1bc6ea5ce9ba11c21bfd6d5b85b3efc87/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cdc58a1bc6ea5ce9ba11c21bfd6d5b85b3efc87/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=0cdc58a1bc6ea5ce9ba11c21bfd6d5b85b3efc87", "patch": "@@ -824,7 +824,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                     Abi::RustIntrinsic |\n                     Abi::PlatformIntrinsic => {\n                         assert!(!self.tcx.is_const_fn(def_id));\n-                        match &self.tcx.item_name(def_id).as_str()[..] {\n+                        match &self.tcx.item_name(def_id)[..] {\n                             \"size_of\" | \"min_align_of\" => is_const_fn = true,\n \n                             name if name.starts_with(\"simd_shuffle\") => {"}, {"sha": "35e7522db0184435b6a2aedc1ca408d765add146", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0cdc58a1bc6ea5ce9ba11c21bfd6d5b85b3efc87/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cdc58a1bc6ea5ce9ba11c21bfd6d5b85b3efc87/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=0cdc58a1bc6ea5ce9ba11c21bfd6d5b85b3efc87", "patch": "@@ -42,6 +42,7 @@ use syntax::ext::hygiene::Mark;\n use syntax::ext::tt::macro_rules;\n use syntax::parse::token;\n use syntax::symbol::keywords;\n+use syntax::symbol::Symbol;\n use syntax::visit::{self, Visitor};\n \n use syntax_pos::{Span, DUMMY_SP};\n@@ -522,14 +523,14 @@ impl<'a> Resolver<'a> {\n         }\n \n         let (name, parent) = if def_id.index == CRATE_DEF_INDEX {\n-            (self.session.cstore.crate_name_untracked(def_id.krate), None)\n+            (self.session.cstore.crate_name_untracked(def_id.krate).as_str(), None)\n         } else {\n             let def_key = self.session.cstore.def_key(def_id);\n             (def_key.disambiguated_data.data.get_opt_name().unwrap(),\n              Some(self.get_module(DefId { index: def_key.parent.unwrap(), ..def_id })))\n         };\n \n-        let kind = ModuleKind::Def(Def::Mod(def_id), name);\n+        let kind = ModuleKind::Def(Def::Mod(def_id), Symbol::intern(&name));\n         let module =\n             self.arenas.alloc_module(ModuleData::new(parent, kind, def_id, Mark::root(), DUMMY_SP));\n         self.extern_module_map.insert((def_id, macros_only), module);"}, {"sha": "abeb2568cbe1eea17f1645ace755b12fa35d7055", "filename": "src/librustc_trans/back/symbol_names.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0cdc58a1bc6ea5ce9ba11c21bfd6d5b85b3efc87/src%2Flibrustc_trans%2Fback%2Fsymbol_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cdc58a1bc6ea5ce9ba11c21bfd6d5b85b3efc87/src%2Flibrustc_trans%2Fback%2Fsymbol_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fsymbol_names.rs?ref=0cdc58a1bc6ea5ce9ba11c21bfd6d5b85b3efc87", "patch": "@@ -242,7 +242,7 @@ fn compute_symbol_name<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, instance: Instance\n             return name.to_string();\n         }\n         // Don't mangle foreign items.\n-        return tcx.item_name(def_id).as_str().to_string();\n+        return tcx.item_name(def_id).to_string();\n     }\n \n     if let Some(name) = attr::find_export_name_attr(tcx.sess.diagnostic(), &attrs) {\n@@ -252,7 +252,7 @@ fn compute_symbol_name<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, instance: Instance\n \n     if attr::contains_name(&attrs, \"no_mangle\") {\n         // Don't mangle\n-        return tcx.item_name(def_id).as_str().to_string();\n+        return tcx.item_name(def_id).to_string();\n     }\n \n     // We want to compute the \"type\" of this item. Unfortunately, some"}, {"sha": "8bd835ac5d114564f1f53b3c572e9a27ed653e08", "filename": "src/librustc_trans/debuginfo/metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cdc58a1bc6ea5ce9ba11c21bfd6d5b85b3efc87/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cdc58a1bc6ea5ce9ba11c21bfd6d5b85b3efc87/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs?ref=0cdc58a1bc6ea5ce9ba11c21bfd6d5b85b3efc87", "patch": "@@ -1612,7 +1612,7 @@ fn prepare_enum_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n     fn get_enum_discriminant_name(cx: &CrateContext,\n                                   def_id: DefId)\n                                   -> InternedString {\n-        cx.tcx().item_name(def_id).as_str()\n+        cx.tcx().item_name(def_id)\n     }\n }\n "}, {"sha": "6eda86575193371c4baf04f53212eb1a8dc74450", "filename": "src/librustc_trans/debuginfo/type_names.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cdc58a1bc6ea5ce9ba11c21bfd6d5b85b3efc87/src%2Flibrustc_trans%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cdc58a1bc6ea5ce9ba11c21bfd6d5b85b3efc87/src%2Flibrustc_trans%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Ftype_names.rs?ref=0cdc58a1bc6ea5ce9ba11c21bfd6d5b85b3efc87", "patch": "@@ -189,7 +189,7 @@ pub fn push_debuginfo_type_name<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                 output.push_str(&path_element.data.as_interned_str());\n             }\n         } else {\n-            output.push_str(&cx.tcx().item_name(def_id).as_str());\n+            output.push_str(&cx.tcx().item_name(def_id));\n         }\n     }\n "}, {"sha": "8f968a8a6c60977779d028fcc726d2d16741b4a9", "filename": "src/librustc_trans/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cdc58a1bc6ea5ce9ba11c21bfd6d5b85b3efc87/src%2Flibrustc_trans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cdc58a1bc6ea5ce9ba11c21bfd6d5b85b3efc87/src%2Flibrustc_trans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fintrinsic.rs?ref=0cdc58a1bc6ea5ce9ba11c21bfd6d5b85b3efc87", "patch": "@@ -104,7 +104,7 @@ pub fn trans_intrinsic_call<'a, 'tcx>(bcx: &Builder<'a, 'tcx>,\n     let sig = tcx.erase_late_bound_regions_and_normalize(&sig);\n     let arg_tys = sig.inputs();\n     let ret_ty = sig.output();\n-    let name = &*tcx.item_name(def_id).as_str();\n+    let name = &*tcx.item_name(def_id);\n \n     let llret_ty = type_of::type_of(ccx, ret_ty);\n "}, {"sha": "0f42a244a1ff906ef4e6a543c66eb5b6ef612f6a", "filename": "src/librustc_trans/mir/block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cdc58a1bc6ea5ce9ba11c21bfd6d5b85b3efc87/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cdc58a1bc6ea5ce9ba11c21bfd6d5b85b3efc87/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fblock.rs?ref=0cdc58a1bc6ea5ce9ba11c21bfd6d5b85b3efc87", "patch": "@@ -445,7 +445,7 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n                 // Handle intrinsics old trans wants Expr's for, ourselves.\n                 let intrinsic = match def {\n                     Some(ty::InstanceDef::Intrinsic(def_id))\n-                        => Some(bcx.tcx().item_name(def_id).as_str()),\n+                        => Some(bcx.tcx().item_name(def_id)),\n                     _ => None\n                 };\n                 let intrinsic = intrinsic.as_ref().map(|s| &s[..]);"}, {"sha": "1109f34a1482e16a834a5f3ad1b6aaedc98ecfd5", "filename": "src/librustc_trans/mir/constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cdc58a1bc6ea5ce9ba11c21bfd6d5b85b3efc87/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cdc58a1bc6ea5ce9ba11c21bfd6d5b85b3efc87/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fconstant.rs?ref=0cdc58a1bc6ea5ce9ba11c21bfd6d5b85b3efc87", "patch": "@@ -365,7 +365,7 @@ impl<'a, 'tcx> MirConstContext<'a, 'tcx> {\n                     }\n                     if let Some((ref dest, target)) = *destination {\n                         let result = if fn_ty.fn_sig(tcx).abi() == Abi::RustIntrinsic {\n-                            match &tcx.item_name(def_id).as_str()[..] {\n+                            match &tcx.item_name(def_id)[..] {\n                                 \"size_of\" => {\n                                     let llval = C_uint(self.ccx,\n                                         self.ccx.size_of(substs.type_at(0)));"}, {"sha": "e8927e28d753b9b001a2f36a49e0ae01e51d3cc1", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0cdc58a1bc6ea5ce9ba11c21bfd6d5b85b3efc87/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cdc58a1bc6ea5ce9ba11c21bfd6d5b85b3efc87/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=0cdc58a1bc6ea5ce9ba11c21bfd6d5b85b3efc87", "patch": "@@ -672,7 +672,7 @@ impl TyParamBound {\n     fn maybe_sized(cx: &DocContext) -> TyParamBound {\n         let did = cx.tcx.require_lang_item(lang_items::SizedTraitLangItem);\n         let empty = cx.tcx.intern_substs(&[]);\n-        let path = external_path(cx, &cx.tcx.item_name(did).as_str(),\n+        let path = external_path(cx, &cx.tcx.item_name(did),\n             Some(did), false, vec![], empty);\n         inline::record_extern_fqn(cx, did, TypeKind::Trait);\n         TraitBound(PolyTrait {\n@@ -763,7 +763,7 @@ fn external_path(cx: &DocContext, name: &str, trait_did: Option<DefId>, has_self\n impl<'tcx> Clean<TyParamBound> for ty::TraitRef<'tcx> {\n     fn clean(&self, cx: &DocContext) -> TyParamBound {\n         inline::record_extern_fqn(cx, self.def_id, TypeKind::Trait);\n-        let path = external_path(cx, &cx.tcx.item_name(self.def_id).as_str(),\n+        let path = external_path(cx, &cx.tcx.item_name(self.def_id),\n                                  Some(self.def_id), true, vec![], self.substs);\n \n         debug!(\"ty::TraitRef\\n  subst: {:?}\\n\", self.substs);\n@@ -1915,7 +1915,7 @@ impl<'tcx> Clean<Type> for ty::Ty<'tcx> {\n                     AdtKind::Enum => TypeKind::Enum,\n                 };\n                 inline::record_extern_fqn(cx, did, kind);\n-                let path = external_path(cx, &cx.tcx.item_name(did).as_str(),\n+                let path = external_path(cx, &cx.tcx.item_name(did),\n                                          None, false, vec![], substs);\n                 ResolvedPath {\n                     path,\n@@ -1933,7 +1933,7 @@ impl<'tcx> Clean<Type> for ty::Ty<'tcx> {\n                     reg.clean(cx).map(|b| typarams.push(RegionBound(b)));\n                     for did in obj.auto_traits() {\n                         let empty = cx.tcx.intern_substs(&[]);\n-                        let path = external_path(cx, &cx.tcx.item_name(did).as_str(),\n+                        let path = external_path(cx, &cx.tcx.item_name(did),\n                             Some(did), false, vec![], empty);\n                         inline::record_extern_fqn(cx, did, TypeKind::Trait);\n                         let bound = TraitBound(PolyTrait {\n@@ -1956,7 +1956,7 @@ impl<'tcx> Clean<Type> for ty::Ty<'tcx> {\n                         });\n                     }\n \n-                    let path = external_path(cx, &cx.tcx.item_name(did).as_str(), Some(did),\n+                    let path = external_path(cx, &cx.tcx.item_name(did), Some(did),\n                         false, bindings, principal.0.substs);\n                     ResolvedPath {\n                         path,"}]}