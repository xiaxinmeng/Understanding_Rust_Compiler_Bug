{"sha": "9b648f7088cc6336a70ce65d86af10930212253c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliNjQ4ZjcwODhjYzYzMzZhNzBjZTY1ZDg2YWYxMDkzMDIxMjI1M2M=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-12-01T15:23:32Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2019-05-23T16:51:50Z"}, "message": "Update upvars and module_exports", "tree": {"sha": "5a4d6ad736ad4ae0a6212c0eff912e76fe39ca7c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a4d6ad736ad4ae0a6212c0eff912e76fe39ca7c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b648f7088cc6336a70ce65d86af10930212253c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b648f7088cc6336a70ce65d86af10930212253c", "html_url": "https://github.com/rust-lang/rust/commit/9b648f7088cc6336a70ce65d86af10930212253c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b648f7088cc6336a70ce65d86af10930212253c/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f808f6588c3e66d9e578d039dd77f0eb0ea053b", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f808f6588c3e66d9e578d039dd77f0eb0ea053b", "html_url": "https://github.com/rust-lang/rust/commit/5f808f6588c3e66d9e578d039dd77f0eb0ea053b"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "4de259a5b9d7464688b65e72dd1eaae247c23245", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b648f7088cc6336a70ce65d86af10930212253c/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b648f7088cc6336a70ce65d86af10930212253c/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=9b648f7088cc6336a70ce65d86af10930212253c", "patch": "@@ -644,7 +644,7 @@ rustc_queries! {\n     }\n \n     Other {\n-        query module_exports(_: DefId) -> Option<Lrc<Vec<Export<hir::HirId>>>> {\n+        query module_exports(_: DefId) -> Option<&'tcx [Export<hir::HirId>]> {\n             eval_always\n         }\n     }\n@@ -822,7 +822,7 @@ rustc_queries! {\n             desc { \"generating a postorder list of CrateNums\" }\n         }\n \n-        query upvars(_: DefId) -> Option<Lrc<Vec<hir::Upvar>>> {\n+        query upvars(_: DefId) -> Option<&'tcx [hir::Upvar]> {\n             eval_always\n         }\n         query maybe_unused_trait_import(_: DefId) -> bool {"}, {"sha": "87f6f9f070ed1310447c4c0bc271e1b7af1e10eb", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9b648f7088cc6336a70ce65d86af10930212253c/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b648f7088cc6336a70ce65d86af10930212253c/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=9b648f7088cc6336a70ce65d86af10930212253c", "patch": "@@ -1068,7 +1068,7 @@ pub struct GlobalCtxt<'tcx> {\n                                    StableVec<TraitCandidate>>>,\n \n     /// Export map produced by name resolution.\n-    export_map: FxHashMap<DefId, Lrc<Vec<Export<hir::HirId>>>>,\n+    export_map: FxHashMap<DefId, Vec<Export<hir::HirId>>>,\n \n     hir_map: hir_map::Map<'tcx>,\n \n@@ -1081,7 +1081,7 @@ pub struct GlobalCtxt<'tcx> {\n     // Records the captured variables referenced by every closure\n     // expression. Do not track deps for this, just recompute it from\n     // scratch every time.\n-    upvars: FxHashMap<DefId, Lrc<Vec<hir::Upvar>>>,\n+    upvars: FxHashMap<DefId, Vec<hir::Upvar>>,\n \n     maybe_unused_trait_imports: FxHashSet<DefId>,\n     maybe_unused_extern_crates: Vec<(DefId, Span)>,\n@@ -1328,13 +1328,13 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                 let exports: Vec<_> = v.into_iter().map(|e| {\n                     e.map_id(|id| hir.node_to_hir_id(id))\n                 }).collect();\n-                (k, Lrc::new(exports))\n+                (k, exports)\n             }).collect(),\n             upvars: resolutions.upvars.into_iter().map(|(k, v)| {\n                 let vars: Vec<_> = v.into_iter().map(|e| {\n                     e.map_id(|id| hir.node_to_hir_id(id))\n                 }).collect();\n-                (hir.local_def_id(k), Lrc::new(vars))\n+                (hir.local_def_id(k), vars)\n             }).collect(),\n             maybe_unused_trait_imports:\n                 resolutions.maybe_unused_trait_imports\n@@ -3053,7 +3053,7 @@ fn ptr_eq<T, U>(t: *const T, u: *const U) -> bool {\n \n pub fn provide(providers: &mut ty::query::Providers<'_>) {\n     providers.in_scope_traits_map = |tcx, id| tcx.gcx.trait_map.get(&id);\n-    providers.module_exports = |tcx, id| tcx.gcx.export_map.get(&id).cloned();\n+    providers.module_exports = |tcx, id| tcx.gcx.export_map.get(&id).map(|v| &v[..]);\n     providers.crate_name = |tcx, id| {\n         assert_eq!(id, LOCAL_CRATE);\n         tcx.crate_name\n@@ -3066,7 +3066,7 @@ pub fn provide(providers: &mut ty::query::Providers<'_>) {\n         assert_eq!(id, LOCAL_CRATE);\n         Lrc::new(middle::lang_items::collect(tcx))\n     };\n-    providers.upvars = |tcx, id| tcx.gcx.upvars.get(&id).cloned();\n+    providers.upvars = |tcx, id| tcx.gcx.upvars.get(&id).map(|v| &v[..]);\n     providers.maybe_unused_trait_import = |tcx, id| {\n         tcx.maybe_unused_trait_imports.contains(&id)\n     };"}, {"sha": "1a9d996131dc0ee9325c99e0fcd94696cfd9ae80", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b648f7088cc6336a70ce65d86af10930212253c/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b648f7088cc6336a70ce65d86af10930212253c/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=9b648f7088cc6336a70ce65d86af10930212253c", "patch": "@@ -673,7 +673,7 @@ impl EncodeContext<'_, 'tcx> {\n \n         let data = ModData {\n             reexports: match tcx.module_exports(def_id) {\n-                Some(ref exports) => self.lazy_seq_ref(&exports[..]),\n+                Some(exports) => self.lazy_seq_ref(exports),\n                 _ => LazySeq::empty(),\n             },\n         };"}]}