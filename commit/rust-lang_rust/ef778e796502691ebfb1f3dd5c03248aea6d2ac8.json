{"sha": "ef778e796502691ebfb1f3dd5c03248aea6d2ac8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmNzc4ZTc5NjUwMjY5MWViZmIxZjNkZDVjMDMyNDhhZWE2ZDJhYzg=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-02-14T17:14:23Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-02-14T17:14:23Z"}, "message": "Fix span in non_fmt_panic for panic!(some_macro!()).", "tree": {"sha": "5ac094546ff4db983fd24942a078f501c852f4b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ac094546ff4db983fd24942a078f501c852f4b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef778e796502691ebfb1f3dd5c03248aea6d2ac8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef778e796502691ebfb1f3dd5c03248aea6d2ac8", "html_url": "https://github.com/rust-lang/rust/commit/ef778e796502691ebfb1f3dd5c03248aea6d2ac8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef778e796502691ebfb1f3dd5c03248aea6d2ac8/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07194ffcd25b0871ce560b9f702e52db27ac9f77", "url": "https://api.github.com/repos/rust-lang/rust/commits/07194ffcd25b0871ce560b9f702e52db27ac9f77", "html_url": "https://github.com/rust-lang/rust/commit/07194ffcd25b0871ce560b9f702e52db27ac9f77"}], "stats": {"total": 19, "additions": 15, "deletions": 4}, "files": [{"sha": "0c5456cf619d10a142247753445a6e847fe28249", "filename": "compiler/rustc_lint/src/non_fmt_panic.rs", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ef778e796502691ebfb1f3dd5c03248aea6d2ac8/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef778e796502691ebfb1f3dd5c03248aea6d2ac8/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs?ref=ef778e796502691ebfb1f3dd5c03248aea6d2ac8", "patch": "@@ -69,19 +69,30 @@ fn check_panic<'tcx>(cx: &LateContext<'tcx>, f: &'tcx hir::Expr<'tcx>, arg: &'tc\n \n     let (span, panic) = panic_call(cx, f);\n \n-    cx.struct_span_lint(NON_FMT_PANIC, arg.span, |lint| {\n+    // Find the span of the argument to `panic!()`, before expansion in the\n+    // case of `panic!(some_macro!())`.\n+    let mut arg_span = arg.span;\n+    while !span.contains(arg_span) {\n+        let expn = arg_span.ctxt().outer_expn_data();\n+        if expn.is_root() {\n+            break;\n+        }\n+        arg_span = expn.call_site;\n+    }\n+\n+    cx.struct_span_lint(NON_FMT_PANIC, arg_span, |lint| {\n         let mut l = lint.build(\"panic message is not a string literal\");\n         l.note(\"this is no longer accepted in Rust 2021\");\n-        if span.contains(arg.span) {\n+        if span.contains(arg_span) {\n             l.span_suggestion_verbose(\n-                arg.span.shrink_to_lo(),\n+                arg_span.shrink_to_lo(),\n                 \"add a \\\"{}\\\" format string to Display the message\",\n                 \"\\\"{}\\\", \".into(),\n                 Applicability::MaybeIncorrect,\n             );\n             if panic == sym::std_panic_macro {\n                 l.span_suggestion_verbose(\n-                    span.until(arg.span),\n+                    span.until(arg_span),\n                     \"or use std::panic::panic_any instead\",\n                     \"std::panic::panic_any(\".into(),\n                     Applicability::MachineApplicable,"}]}