{"sha": "cb8ca2dafdbcdedcaeb2573dccd3b3e4a26cae44", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiOGNhMmRhZmRiY2RlZGNhZWIyNTczZGNjZDNiM2U0YTI2Y2FlNDQ=", "commit": {"author": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2014-06-17T22:47:31Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-06-19T00:01:34Z"}, "message": "Shorten endian conversion method names\n\nThe consensus on #14917 was that the proposed names were too long.", "tree": {"sha": "09546de154e03eb8ea3a47865128700ef130c3e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09546de154e03eb8ea3a47865128700ef130c3e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb8ca2dafdbcdedcaeb2573dccd3b3e4a26cae44", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb8ca2dafdbcdedcaeb2573dccd3b3e4a26cae44", "html_url": "https://github.com/rust-lang/rust/commit/cb8ca2dafdbcdedcaeb2573dccd3b3e4a26cae44", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb8ca2dafdbcdedcaeb2573dccd3b3e4a26cae44/comments", "author": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "779ca97525176bc1d764f1b88906363290fcf851", "url": "https://api.github.com/repos/rust-lang/rust/commits/779ca97525176bc1d764f1b88906363290fcf851", "html_url": "https://github.com/rust-lang/rust/commit/779ca97525176bc1d764f1b88906363290fcf851"}], "stats": {"total": 168, "additions": 84, "deletions": 84}, "files": [{"sha": "a0c0c9f97357816edc7470a674a78e1fb82ba6fb", "filename": "src/libcollections/hash/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb8ca2dafdbcdedcaeb2573dccd3b3e4a26cae44/src%2Flibcollections%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb8ca2dafdbcdedcaeb2573dccd3b3e4a26cae44/src%2Flibcollections%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fhash%2Fmod.rs?ref=cb8ca2dafdbcdedcaeb2573dccd3b3e4a26cae44", "patch": "@@ -104,7 +104,7 @@ macro_rules! impl_hash {\n             #[inline]\n             fn hash(&self, state: &mut S) {\n                 let a: [u8, ..::core::$ty::BYTES] = unsafe {\n-                    mem::transmute((*self as $uty).to_little_endian() as $ty)\n+                    mem::transmute((*self as $uty).to_le() as $ty)\n                 };\n                 state.write(a.as_slice())\n             }"}, {"sha": "5280ac0d64fb22c10eec5f9bd6ebae6235e90a9f", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/cb8ca2dafdbcdedcaeb2573dccd3b3e4a26cae44/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb8ca2dafdbcdedcaeb2573dccd3b3e4a26cae44/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=cb8ca2dafdbcdedcaeb2573dccd3b3e4a26cae44", "patch": "@@ -173,85 +173,85 @@ pub unsafe fn move_val_init<T>(dst: &mut T, src: T) {\n ///\n /// On little endian, this is a no-op.  On big endian, the bytes are swapped.\n #[inline]\n-#[deprecated = \"use `Int::to_little_endian` instead\"]\n-pub fn to_le16(x: u16) -> u16 { x.to_little_endian() }\n+#[deprecated = \"use `Int::to_le` instead\"]\n+pub fn to_le16(x: u16) -> u16 { x.to_le() }\n \n /// Convert an u32 to little endian from the target's endianness.\n ///\n /// On little endian, this is a no-op.  On big endian, the bytes are swapped.\n #[inline]\n-#[deprecated = \"use `Int::to_little_endian` instead\"]\n-pub fn to_le32(x: u32) -> u32 { x.to_little_endian() }\n+#[deprecated = \"use `Int::to_le` instead\"]\n+pub fn to_le32(x: u32) -> u32 { x.to_le() }\n \n /// Convert an u64 to little endian from the target's endianness.\n ///\n /// On little endian, this is a no-op.  On big endian, the bytes are swapped.\n #[inline]\n-#[deprecated = \"use `Int::to_little_endian` instead\"]\n-pub fn to_le64(x: u64) -> u64 { x.to_little_endian() }\n+#[deprecated = \"use `Int::to_le` instead\"]\n+pub fn to_le64(x: u64) -> u64 { x.to_le() }\n \n /// Convert an u16 to big endian from the target's endianness.\n ///\n /// On big endian, this is a no-op.  On little endian, the bytes are swapped.\n #[inline]\n-#[deprecated = \"use `Int::to_big_endian` instead\"]\n-pub fn to_be16(x: u16) -> u16 { x.to_big_endian() }\n+#[deprecated = \"use `Int::to_be` instead\"]\n+pub fn to_be16(x: u16) -> u16 { x.to_be() }\n \n /// Convert an u32 to big endian from the target's endianness.\n ///\n /// On big endian, this is a no-op.  On little endian, the bytes are swapped.\n #[inline]\n-#[deprecated = \"use `Int::to_big_endian` instead\"]\n-pub fn to_be32(x: u32) -> u32 { x.to_big_endian() }\n+#[deprecated = \"use `Int::to_be` instead\"]\n+pub fn to_be32(x: u32) -> u32 { x.to_be() }\n \n /// Convert an u64 to big endian from the target's endianness.\n ///\n /// On big endian, this is a no-op.  On little endian, the bytes are swapped.\n #[inline]\n-#[deprecated = \"use `Int::to_big_endian` instead\"]\n-pub fn to_be64(x: u64) -> u64 { x.to_big_endian() }\n+#[deprecated = \"use `Int::to_be` instead\"]\n+pub fn to_be64(x: u64) -> u64 { x.to_be() }\n \n /// Convert an u16 from little endian to the target's endianness.\n ///\n /// On little endian, this is a no-op.  On big endian, the bytes are swapped.\n #[inline]\n-#[deprecated = \"use `Int::from_little_endian` instead\"]\n-pub fn from_le16(x: u16) -> u16 { Int::from_little_endian(x) }\n+#[deprecated = \"use `Int::from_le` instead\"]\n+pub fn from_le16(x: u16) -> u16 { Int::from_le(x) }\n \n /// Convert an u32 from little endian to the target's endianness.\n ///\n /// On little endian, this is a no-op.  On big endian, the bytes are swapped.\n #[inline]\n-#[deprecated = \"use `Int::from_little_endian` instead\"]\n-pub fn from_le32(x: u32) -> u32 { Int::from_little_endian(x) }\n+#[deprecated = \"use `Int::from_le` instead\"]\n+pub fn from_le32(x: u32) -> u32 { Int::from_le(x) }\n \n /// Convert an u64 from little endian to the target's endianness.\n ///\n /// On little endian, this is a no-op.  On big endian, the bytes are swapped.\n #[inline]\n-#[deprecated = \"use `Int::from_little_endian` instead\"]\n-pub fn from_le64(x: u64) -> u64 { Int::from_little_endian(x) }\n+#[deprecated = \"use `Int::from_le` instead\"]\n+pub fn from_le64(x: u64) -> u64 { Int::from_le(x) }\n \n /// Convert an u16 from big endian to the target's endianness.\n ///\n /// On big endian, this is a no-op.  On little endian, the bytes are swapped.\n #[inline]\n-#[deprecated = \"use `Int::from_big_endian` instead\"]\n-pub fn from_be16(x: u16) -> u16 { Int::from_big_endian(x) }\n+#[deprecated = \"use `Int::from_be` instead\"]\n+pub fn from_be16(x: u16) -> u16 { Int::from_be(x) }\n \n /// Convert an u32 from big endian to the target's endianness.\n ///\n /// On big endian, this is a no-op.  On little endian, the bytes are swapped.\n #[inline]\n-#[deprecated = \"use `Int::from_big_endian` instead\"]\n-pub fn from_be32(x: u32) -> u32 { Int::from_big_endian(x) }\n+#[deprecated = \"use `Int::from_be` instead\"]\n+pub fn from_be32(x: u32) -> u32 { Int::from_be(x) }\n \n /// Convert an u64 from big endian to the target's endianness.\n ///\n /// On big endian, this is a no-op.  On little endian, the bytes are swapped.\n #[inline]\n-#[deprecated = \"use `Int::from_big_endian` instead\"]\n-pub fn from_be64(x: u64) -> u64 { Int::from_big_endian(x) }\n+#[deprecated = \"use `Int::from_be` instead\"]\n+pub fn from_be64(x: u64) -> u64 { Int::from_be(x) }\n \n /// Swap the values at two mutable locations of the same type, without\n /// deinitialising or copying either one."}, {"sha": "79734324706b26e08dcffc1cb16bcdf061791763", "filename": "src/libcore/num/int_macros.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/cb8ca2dafdbcdedcaeb2573dccd3b3e4a26cae44/src%2Flibcore%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb8ca2dafdbcdedcaeb2573dccd3b3e4a26cae44/src%2Flibcore%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fint_macros.rs?ref=cb8ca2dafdbcdedcaeb2573dccd3b3e4a26cae44", "patch": "@@ -147,25 +147,25 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_little_endian() {\n-        assert_eq!(Int::from_little_endian(A.to_little_endian()), A);\n-        assert_eq!(Int::from_little_endian(B.to_little_endian()), B);\n-        assert_eq!(Int::from_little_endian(C.to_little_endian()), C);\n-        assert_eq!(Int::from_little_endian(_0), _0);\n-        assert_eq!(Int::from_little_endian(_1), _1);\n-        assert_eq!(_0.to_little_endian(), _0);\n-        assert_eq!(_1.to_little_endian(), _1);\n+    fn test_le() {\n+        assert_eq!(Int::from_le(A.to_le()), A);\n+        assert_eq!(Int::from_le(B.to_le()), B);\n+        assert_eq!(Int::from_le(C.to_le()), C);\n+        assert_eq!(Int::from_le(_0), _0);\n+        assert_eq!(Int::from_le(_1), _1);\n+        assert_eq!(_0.to_le(), _0);\n+        assert_eq!(_1.to_le(), _1);\n     }\n \n     #[test]\n-    fn test_big_endian() {\n-        assert_eq!(Int::from_big_endian(A.to_big_endian()), A);\n-        assert_eq!(Int::from_big_endian(B.to_big_endian()), B);\n-        assert_eq!(Int::from_big_endian(C.to_big_endian()), C);\n-        assert_eq!(Int::from_big_endian(_0), _0);\n-        assert_eq!(Int::from_big_endian(_1), _1);\n-        assert_eq!(_0.to_big_endian(), _0);\n-        assert_eq!(_1.to_big_endian(), _1);\n+    fn test_be() {\n+        assert_eq!(Int::from_be(A.to_be()), A);\n+        assert_eq!(Int::from_be(B.to_be()), B);\n+        assert_eq!(Int::from_be(C.to_be()), C);\n+        assert_eq!(Int::from_be(_0), _0);\n+        assert_eq!(Int::from_be(_1), _1);\n+        assert_eq!(_0.to_be(), _0);\n+        assert_eq!(_1.to_be(), _1);\n     }\n \n     #[test]"}, {"sha": "dd32a6da1063b5e661b5b6707cb13da9d771ec19", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/cb8ca2dafdbcdedcaeb2573dccd3b3e4a26cae44/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb8ca2dafdbcdedcaeb2573dccd3b3e4a26cae44/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=cb8ca2dafdbcdedcaeb2573dccd3b3e4a26cae44", "patch": "@@ -498,13 +498,13 @@ pub trait Int: Primitive\n     /// let n = 0x0123456789ABCDEFu64;\n     ///\n     /// if cfg!(target_endian = \"big\") {\n-    ///     assert_eq!(Int::from_big_endian(n), n)\n+    ///     assert_eq!(Int::from_be(n), n)\n     /// } else {\n-    ///     assert_eq!(Int::from_big_endian(n), n.swap_bytes())\n+    ///     assert_eq!(Int::from_be(n), n.swap_bytes())\n     /// }\n     /// ```\n     #[inline]\n-    fn from_big_endian(x: Self) -> Self {\n+    fn from_be(x: Self) -> Self {\n         if cfg!(target_endian = \"big\") { x } else { x.swap_bytes() }\n     }\n \n@@ -518,13 +518,13 @@ pub trait Int: Primitive\n     /// let n = 0x0123456789ABCDEFu64;\n     ///\n     /// if cfg!(target_endian = \"little\") {\n-    ///     assert_eq!(Int::from_little_endian(n), n)\n+    ///     assert_eq!(Int::from_le(n), n)\n     /// } else {\n-    ///     assert_eq!(Int::from_little_endian(n), n.swap_bytes())\n+    ///     assert_eq!(Int::from_le(n), n.swap_bytes())\n     /// }\n     /// ```\n     #[inline]\n-    fn from_little_endian(x: Self) -> Self {\n+    fn from_le(x: Self) -> Self {\n         if cfg!(target_endian = \"little\") { x } else { x.swap_bytes() }\n     }\n \n@@ -538,13 +538,13 @@ pub trait Int: Primitive\n     /// let n = 0x0123456789ABCDEFu64;\n     ///\n     /// if cfg!(target_endian = \"big\") {\n-    ///     assert_eq!(n.to_big_endian(), n)\n+    ///     assert_eq!(n.to_be(), n)\n     /// } else {\n-    ///     assert_eq!(n.to_big_endian(), n.swap_bytes())\n+    ///     assert_eq!(n.to_be(), n.swap_bytes())\n     /// }\n     /// ```\n     #[inline]\n-    fn to_big_endian(self) -> Self {\n+    fn to_be(self) -> Self { // or not to be?\n         if cfg!(target_endian = \"big\") { self } else { self.swap_bytes() }\n     }\n \n@@ -558,13 +558,13 @@ pub trait Int: Primitive\n     /// let n = 0x0123456789ABCDEFu64;\n     ///\n     /// if cfg!(target_endian = \"little\") {\n-    ///     assert_eq!(n.to_little_endian(), n)\n+    ///     assert_eq!(n.to_le(), n)\n     /// } else {\n-    ///     assert_eq!(n.to_little_endian(), n.swap_bytes())\n+    ///     assert_eq!(n.to_le(), n.swap_bytes())\n     /// }\n     /// ```\n     #[inline]\n-    fn to_little_endian(self) -> Self {\n+    fn to_le(self) -> Self {\n         if cfg!(target_endian = \"little\") { self } else { self.swap_bytes() }\n     }\n }"}, {"sha": "be1f960bcc3dffc50a8e0e1028d6bb94c82822df", "filename": "src/libcore/num/uint_macros.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/cb8ca2dafdbcdedcaeb2573dccd3b3e4a26cae44/src%2Flibcore%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb8ca2dafdbcdedcaeb2573dccd3b3e4a26cae44/src%2Flibcore%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fuint_macros.rs?ref=cb8ca2dafdbcdedcaeb2573dccd3b3e4a26cae44", "patch": "@@ -98,25 +98,25 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_little_endian() {\n-        assert_eq!(Int::from_little_endian(A.to_little_endian()), A);\n-        assert_eq!(Int::from_little_endian(B.to_little_endian()), B);\n-        assert_eq!(Int::from_little_endian(C.to_little_endian()), C);\n-        assert_eq!(Int::from_little_endian(_0), _0);\n-        assert_eq!(Int::from_little_endian(_1), _1);\n-        assert_eq!(_0.to_little_endian(), _0);\n-        assert_eq!(_1.to_little_endian(), _1);\n+    fn test_le() {\n+        assert_eq!(Int::from_le(A.to_le()), A);\n+        assert_eq!(Int::from_le(B.to_le()), B);\n+        assert_eq!(Int::from_le(C.to_le()), C);\n+        assert_eq!(Int::from_le(_0), _0);\n+        assert_eq!(Int::from_le(_1), _1);\n+        assert_eq!(_0.to_le(), _0);\n+        assert_eq!(_1.to_le(), _1);\n     }\n \n     #[test]\n-    fn test_big_endian() {\n-        assert_eq!(Int::from_big_endian(A.to_big_endian()), A);\n-        assert_eq!(Int::from_big_endian(B.to_big_endian()), B);\n-        assert_eq!(Int::from_big_endian(C.to_big_endian()), C);\n-        assert_eq!(Int::from_big_endian(_0), _0);\n-        assert_eq!(Int::from_big_endian(_1), _1);\n-        assert_eq!(_0.to_big_endian(), _0);\n-        assert_eq!(_1.to_big_endian(), _1);\n+    fn test_be() {\n+        assert_eq!(Int::from_be(A.to_be()), A);\n+        assert_eq!(Int::from_be(B.to_be()), B);\n+        assert_eq!(Int::from_be(C.to_be()), C);\n+        assert_eq!(Int::from_be(_0), _0);\n+        assert_eq!(Int::from_be(_1), _1);\n+        assert_eq!(_0.to_be(), _0);\n+        assert_eq!(_1.to_be(), _1);\n     }\n \n     #[test]"}, {"sha": "5dfae8d9efe649b5221b176dad416371c3504952", "filename": "src/libnative/io/net.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cb8ca2dafdbcdedcaeb2573dccd3b3e4a26cae44/src%2Flibnative%2Fio%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb8ca2dafdbcdedcaeb2573dccd3b3e4a26cae44/src%2Flibnative%2Fio%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fnet.rs?ref=cb8ca2dafdbcdedcaeb2573dccd3b3e4a26cae44", "patch": "@@ -27,10 +27,10 @@ use super::util;\n #[cfg(unix)]    pub type sock_t = super::file::fd_t;\n \n pub fn htons(u: u16) -> u16 {\n-    u.to_big_endian()\n+    u.to_be()\n }\n pub fn ntohs(u: u16) -> u16 {\n-    Int::from_big_endian(u)\n+    Int::from_be(u)\n }\n \n enum InAddr {\n@@ -46,7 +46,7 @@ fn ip_to_inaddr(ip: rtio::IpAddr) -> InAddr {\n                      (c as u32 <<  8) |\n                      (d as u32 <<  0);\n             InAddr(libc::in_addr {\n-                s_addr: Int::from_big_endian(ip)\n+                s_addr: Int::from_be(ip)\n             })\n         }\n         rtio::Ipv6Addr(a, b, c, d, e, f, g, h) => {\n@@ -180,7 +180,7 @@ pub fn sockaddr_to_addr(storage: &libc::sockaddr_storage,\n             let storage: &libc::sockaddr_in = unsafe {\n                 mem::transmute(storage)\n             };\n-            let ip = (storage.sin_addr.s_addr as u32).to_big_endian();\n+            let ip = (storage.sin_addr.s_addr as u32).to_be();\n             let a = (ip >> 24) as u8;\n             let b = (ip >> 16) as u8;\n             let c = (ip >>  8) as u8;"}, {"sha": "82693acb1e9dc9573698ad23540aec33b5ec76e1", "filename": "src/librustuv/net.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cb8ca2dafdbcdedcaeb2573dccd3b3e4a26cae44/src%2Flibrustuv%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb8ca2dafdbcdedcaeb2573dccd3b3e4a26cae44/src%2Flibrustuv%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fnet.rs?ref=cb8ca2dafdbcdedcaeb2573dccd3b3e4a26cae44", "patch": "@@ -30,8 +30,8 @@ use uvll;\n /// Generic functions related to dealing with sockaddr things\n ////////////////////////////////////////////////////////////////////////////////\n \n-pub fn htons(u: u16) -> u16 { u.to_big_endian() }\n-pub fn ntohs(u: u16) -> u16 { Int::from_big_endian(u) }\n+pub fn htons(u: u16) -> u16 { u.to_be() }\n+pub fn ntohs(u: u16) -> u16 { Int::from_be(u) }\n \n pub fn sockaddr_to_addr(storage: &libc::sockaddr_storage,\n                         len: uint) -> rtio::SocketAddr {\n@@ -41,7 +41,7 @@ pub fn sockaddr_to_addr(storage: &libc::sockaddr_storage,\n             let storage: &libc::sockaddr_in = unsafe {\n                 mem::transmute(storage)\n             };\n-            let ip = (storage.sin_addr.s_addr as u32).to_big_endian();\n+            let ip = (storage.sin_addr.s_addr as u32).to_be();\n             let a = (ip >> 24) as u8;\n             let b = (ip >> 16) as u8;\n             let c = (ip >>  8) as u8;\n@@ -89,7 +89,7 @@ fn addr_to_sockaddr(addr: rtio::SocketAddr) -> (libc::sockaddr_storage, uint) {\n                 (*storage).sin_family = libc::AF_INET as libc::sa_family_t;\n                 (*storage).sin_port = htons(addr.port);\n                 (*storage).sin_addr = libc::in_addr {\n-                    s_addr: Int::from_big_endian(ip),\n+                    s_addr: Int::from_be(ip),\n \n                 };\n                 mem::size_of::<libc::sockaddr_in>()"}, {"sha": "12c5a3493c17bcd1091f4f8fff583eb8f18ae508", "filename": "src/libserialize/ebml.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb8ca2dafdbcdedcaeb2573dccd3b3e4a26cae44/src%2Flibserialize%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb8ca2dafdbcdedcaeb2573dccd3b3e4a26cae44/src%2Flibserialize%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Febml.rs?ref=cb8ca2dafdbcdedcaeb2573dccd3b3e4a26cae44", "patch": "@@ -183,7 +183,7 @@ pub mod reader {\n \n         unsafe {\n             let ptr = data.as_ptr().offset(start as int) as *u32;\n-            let val = Int::from_big_endian(*ptr);\n+            let val = Int::from_be(*ptr);\n \n             let i = (val >> 28u) as uint;\n             let (shift, mask) = SHIFT_MASK_TABLE[i];"}, {"sha": "b68b435da4bb0a7d427504083e4586d6fa4a5fce", "filename": "src/libuuid/lib.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cb8ca2dafdbcdedcaeb2573dccd3b3e4a26cae44/src%2Flibuuid%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb8ca2dafdbcdedcaeb2573dccd3b3e4a26cae44/src%2Flibuuid%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibuuid%2Flib.rs?ref=cb8ca2dafdbcdedcaeb2573dccd3b3e4a26cae44", "patch": "@@ -217,9 +217,9 @@ impl Uuid {\n                 data4: [0, ..8]\n         };\n \n-        fields.data1 = d1.to_big_endian();\n-        fields.data2 = d2.to_big_endian();\n-        fields.data3 = d3.to_big_endian();\n+        fields.data1 = d1.to_be();\n+        fields.data2 = d2.to_be();\n+        fields.data3 = d3.to_be();\n         slice::bytes::copy_memory(fields.data4, d4);\n \n         unsafe {\n@@ -339,9 +339,9 @@ impl Uuid {\n         unsafe {\n             uf = transmute_copy(&self.bytes);\n         }\n-        uf.data1 = uf.data1.to_big_endian();\n-        uf.data2 = uf.data2.to_big_endian();\n-        uf.data3 = uf.data3.to_big_endian();\n+        uf.data1 = uf.data1.to_be();\n+        uf.data2 = uf.data2.to_be();\n+        uf.data3 = uf.data3.to_be();\n         let s = format!(\"{:08x}-{:04x}-{:04x}-{:02x}{:02x}-\\\n                          {:02x}{:02x}{:02x}{:02x}{:02x}{:02x}\",\n             uf.data1,"}]}