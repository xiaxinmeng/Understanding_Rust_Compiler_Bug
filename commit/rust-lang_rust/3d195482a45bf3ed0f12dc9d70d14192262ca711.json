{"sha": "3d195482a45bf3ed0f12dc9d70d14192262ca711", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkMTk1NDgyYTQ1YmYzZWQwZjEyZGM5ZDcwZDE0MTkyMjYyY2E3MTE=", "commit": {"author": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2014-10-15T22:45:59Z"}, "committer": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2014-11-09T04:40:38Z"}, "message": "Runtime removal: refactor helper threads\n\nThis patch continues the runtime removal by moving\nlibnative::io::helper_thread into sys::helper_signal and\nsys_common::helper_thread\n\nBecause this eliminates APIs in `libnative` and `librustrt`, it is a:\n\n[breaking-change]\n\nThis functionality is likely to be available publicly, in some form,\nfrom `std` in the future.", "tree": {"sha": "d9cf1a93cc1e862e641cd17fdb41ebe93d22bfea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d9cf1a93cc1e862e641cd17fdb41ebe93d22bfea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d195482a45bf3ed0f12dc9d70d14192262ca711", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d195482a45bf3ed0f12dc9d70d14192262ca711", "html_url": "https://github.com/rust-lang/rust/commit/3d195482a45bf3ed0f12dc9d70d14192262ca711", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d195482a45bf3ed0f12dc9d70d14192262ca711/comments", "author": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d34b1b0ca9bf5e0d7cd30952f5de0ab09ed57b41", "url": "https://api.github.com/repos/rust-lang/rust/commits/d34b1b0ca9bf5e0d7cd30952f5de0ab09ed57b41", "html_url": "https://github.com/rust-lang/rust/commit/d34b1b0ca9bf5e0d7cd30952f5de0ab09ed57b41"}], "stats": {"total": 167, "additions": 96, "deletions": 71}, "files": [{"sha": "1d0b9f40d07487d1668e07bf212498e1930ec400", "filename": "src/libnative/io/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d195482a45bf3ed0f12dc9d70d14192262ca711/src%2Flibnative%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d195482a45bf3ed0f12dc9d70d14192262ca711/src%2Flibnative%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fmod.rs?ref=3d195482a45bf3ed0f12dc9d70d14192262ca711", "patch": "@@ -32,8 +32,6 @@ use std::num;\n // Local re-exports\n pub use self::process::Process;\n \n-mod helper_thread;\n-\n // Native I/O implementations\n pub mod process;\n mod util;"}, {"sha": "8c8ec4466a7c4ef58ea5568e25e69f9ae558342b", "filename": "src/libstd/sys/common/helper_thread.rs", "status": "renamed", "additions": 14, "deletions": 69, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/3d195482a45bf3ed0f12dc9d70d14192262ca711/src%2Flibstd%2Fsys%2Fcommon%2Fhelper_thread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d195482a45bf3ed0f12dc9d70d14192262ca711/src%2Flibstd%2Fsys%2Fcommon%2Fhelper_thread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fhelper_thread.rs?ref=3d195482a45bf3ed0f12dc9d70d14192262ca711", "patch": "@@ -22,14 +22,15 @@\n \n #![macro_escape]\n \n-use std::cell::UnsafeCell;\n-use std::mem;\n-use std::rt::bookkeeping;\n-use std::rt::mutex::StaticNativeMutex;\n-use std::rt;\n-use std::task::TaskBuilder;\n+use mem;\n+use rt::bookkeeping;\n+use rt::mutex::StaticNativeMutex;\n+use rt;\n+use cell::UnsafeCell;\n+use sys::helper_signal;\n+use prelude::*;\n \n-use NativeTaskBuilder;\n+use task;\n \n /// A structure for management of a helper thread.\n ///\n@@ -77,17 +78,17 @@ impl<M: Send> Helper<M> {\n     /// This function is safe to be called many times.\n     pub fn boot<T: Send>(&'static self,\n                          f: || -> T,\n-                         helper: fn(imp::signal, Receiver<M>, T)) {\n+                         helper: fn(helper_signal::signal, Receiver<M>, T)) {\n         unsafe {\n             let _guard = self.lock.lock();\n             if !*self.initialized.get() {\n                 let (tx, rx) = channel();\n                 *self.chan.get() = mem::transmute(box tx);\n-                let (receive, send) = imp::new();\n+                let (receive, send) = helper_signal::new();\n                 *self.signal.get() = send as uint;\n \n                 let t = f();\n-                TaskBuilder::new().native().spawn(proc() {\n+                task::spawn(proc() {\n                     bookkeeping::decrement();\n                     helper(receive, rx, t);\n                     self.lock.lock().signal()\n@@ -111,7 +112,7 @@ impl<M: Send> Helper<M> {\n             // send the message.\n             assert!(!self.chan.get().is_null());\n             (**self.chan.get()).send(msg);\n-            imp::signal(*self.signal.get() as imp::signal);\n+            helper_signal::signal(*self.signal.get() as helper_signal::signal);\n         }\n     }\n \n@@ -126,72 +127,16 @@ impl<M: Send> Helper<M> {\n             let chan: Box<Sender<M>> = mem::transmute(*self.chan.get());\n             *self.chan.get() = 0 as *mut Sender<M>;\n             drop(chan);\n-            imp::signal(*self.signal.get() as imp::signal);\n+            helper_signal::signal(*self.signal.get() as helper_signal::signal);\n \n             // Wait for the child to exit\n             guard.wait();\n             drop(guard);\n \n             // Clean up after ourselves\n             self.lock.destroy();\n-            imp::close(*self.signal.get() as imp::signal);\n+            helper_signal::close(*self.signal.get() as helper_signal::signal);\n             *self.signal.get() = 0;\n         }\n     }\n }\n-\n-#[cfg(unix)]\n-mod imp {\n-    use libc;\n-    use std::os;\n-\n-    use io::file::FileDesc;\n-\n-    pub type signal = libc::c_int;\n-\n-    pub fn new() -> (signal, signal) {\n-        let os::Pipe { reader, writer } = unsafe { os::pipe().unwrap() };\n-        (reader, writer)\n-    }\n-\n-    pub fn signal(fd: libc::c_int) {\n-        FileDesc::new(fd, false).inner_write([0]).ok().unwrap();\n-    }\n-\n-    pub fn close(fd: libc::c_int) {\n-        let _fd = FileDesc::new(fd, true);\n-    }\n-}\n-\n-#[cfg(windows)]\n-mod imp {\n-    use libc::{BOOL, LPCSTR, HANDLE, LPSECURITY_ATTRIBUTES, CloseHandle};\n-    use std::ptr;\n-    use libc;\n-\n-    pub type signal = HANDLE;\n-\n-    pub fn new() -> (HANDLE, HANDLE) {\n-        unsafe {\n-            let handle = CreateEventA(ptr::null_mut(), libc::FALSE, libc::FALSE,\n-                                      ptr::null());\n-            (handle, handle)\n-        }\n-    }\n-\n-    pub fn signal(handle: HANDLE) {\n-        assert!(unsafe { SetEvent(handle) != 0 });\n-    }\n-\n-    pub fn close(handle: HANDLE) {\n-        assert!(unsafe { CloseHandle(handle) != 0 });\n-    }\n-\n-    extern \"system\" {\n-        fn CreateEventA(lpSecurityAttributes: LPSECURITY_ATTRIBUTES,\n-                        bManualReset: BOOL,\n-                        bInitialState: BOOL,\n-                        lpName: LPCSTR) -> HANDLE;\n-        fn SetEvent(hEvent: HANDLE) -> BOOL;\n-    }\n-}", "previous_filename": "src/libnative/io/helper_thread.rs"}, {"sha": "75c2987078dc372385eddef318fc3f6265235d88", "filename": "src/libstd/sys/common/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3d195482a45bf3ed0f12dc9d70d14192262ca711/src%2Flibstd%2Fsys%2Fcommon%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d195482a45bf3ed0f12dc9d70d14192262ca711/src%2Flibstd%2Fsys%2Fcommon%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fmod.rs?ref=3d195482a45bf3ed0f12dc9d70d14192262ca711", "patch": "@@ -20,6 +20,7 @@ use path::BytesContainer;\n use collections;\n \n pub mod net;\n+pub mod helper_thread;\n \n // common error constructors\n "}, {"sha": "7c44142d93cdb83afee4d6f44b6bd092f4f97837", "filename": "src/libstd/sys/common/net.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d195482a45bf3ed0f12dc9d70d14192262ca711/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d195482a45bf3ed0f12dc9d70d14192262ca711/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs?ref=3d195482a45bf3ed0f12dc9d70d14192262ca711", "patch": "@@ -24,6 +24,8 @@ use prelude::*;\n use cmp;\n use io;\n \n+// FIXME: move uses of Arc and deadline tracking to std::io\n+\n #[deriving(Show)]\n pub enum SocketStatus {\n     Readable,"}, {"sha": "a806bea2568d2512859f77d5dfd1ffd8d92826bf", "filename": "src/libstd/sys/unix/helper_signal.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/3d195482a45bf3ed0f12dc9d70d14192262ca711/src%2Flibstd%2Fsys%2Funix%2Fhelper_signal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d195482a45bf3ed0f12dc9d70d14192262ca711/src%2Flibstd%2Fsys%2Funix%2Fhelper_signal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fhelper_signal.rs?ref=3d195482a45bf3ed0f12dc9d70d14192262ca711", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use libc;\n+use os;\n+\n+use sys::fs::FileDesc;\n+\n+pub type signal = libc::c_int;\n+\n+pub fn new() -> (signal, signal) {\n+    let os::Pipe { reader, writer } = unsafe { os::pipe().unwrap() };\n+    (reader, writer)\n+}\n+\n+pub fn signal(fd: libc::c_int) {\n+    FileDesc::new(fd, false).write([0]).ok().unwrap();\n+}\n+\n+pub fn close(fd: libc::c_int) {\n+    let _fd = FileDesc::new(fd, true);\n+}"}, {"sha": "6295864e0e1076b83b2918bb83ce198aad2deb07", "filename": "src/libstd/sys/unix/mod.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3d195482a45bf3ed0f12dc9d70d14192262ca711/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d195482a45bf3ed0f12dc9d70d14192262ca711/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fmod.rs?ref=3d195482a45bf3ed0f12dc9d70d14192262ca711", "patch": "@@ -17,12 +17,23 @@ use prelude::*;\n use io::{mod, IoResult, IoError};\n use sys_common::mkerr_libc;\n \n+\n+macro_rules! helper_init( (static $name:ident: Helper<$m:ty>) => (\n+    static $name: Helper<$m> = Helper {\n+        lock: ::rt::mutex::NATIVE_MUTEX_INIT,\n+        chan: ::cell::UnsafeCell { value: 0 as *mut Sender<$m> },\n+        signal: ::cell::UnsafeCell { value: 0 },\n+        initialized: ::cell::UnsafeCell { value: false },\n+    };\n+) )\n+\n pub mod c;\n pub mod fs;\n pub mod os;\n pub mod tcp;\n pub mod udp;\n pub mod pipe;\n+pub mod helper_signal;\n \n pub mod addrinfo {\n     pub use sys_common::net::get_host_addresses;"}, {"sha": "c547c79e83a13a5e75c66777e6c8b21226f22312", "filename": "src/libstd/sys/windows/helper_signal.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/3d195482a45bf3ed0f12dc9d70d14192262ca711/src%2Flibstd%2Fsys%2Fwindows%2Fhelper_signal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d195482a45bf3ed0f12dc9d70d14192262ca711/src%2Flibstd%2Fsys%2Fwindows%2Fhelper_signal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fhelper_signal.rs?ref=3d195482a45bf3ed0f12dc9d70d14192262ca711", "patch": "@@ -0,0 +1,38 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use libc::{mod, BOOL, LPCSTR, HANDLE, LPSECURITY_ATTRIBUTES, CloseHandle};\n+use ptr;\n+\n+pub type signal = HANDLE;\n+\n+pub fn new() -> (HANDLE, HANDLE) {\n+    unsafe {\n+        let handle = CreateEventA(ptr::null_mut(), libc::FALSE, libc::FALSE,\n+                                  ptr::null());\n+        (handle, handle)\n+    }\n+}\n+\n+pub fn signal(handle: HANDLE) {\n+    assert!(unsafe { SetEvent(handle) != 0 });\n+}\n+\n+pub fn close(handle: HANDLE) {\n+    assert!(unsafe { CloseHandle(handle) != 0 });\n+}\n+\n+extern \"system\" {\n+    fn CreateEventA(lpSecurityAttributes: LPSECURITY_ATTRIBUTES,\n+                    bManualReset: BOOL,\n+                    bInitialState: BOOL,\n+                    lpName: LPCSTR) -> HANDLE;\n+    fn SetEvent(hEvent: HANDLE) -> BOOL;\n+}"}, {"sha": "6f6ca3f2e625857e6b5665c510c1f7cb1e732d7e", "filename": "src/libstd/sys/windows/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3d195482a45bf3ed0f12dc9d70d14192262ca711/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d195482a45bf3ed0f12dc9d70d14192262ca711/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs?ref=3d195482a45bf3ed0f12dc9d70d14192262ca711", "patch": "@@ -39,6 +39,7 @@ pub mod os;\n pub mod tcp;\n pub mod udp;\n pub mod pipe;\n+pub mod helper_signal;\n \n pub mod addrinfo {\n     pub use sys_common::net::get_host_addresses;"}]}