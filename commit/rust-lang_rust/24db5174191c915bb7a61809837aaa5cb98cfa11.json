{"sha": "24db5174191c915bb7a61809837aaa5cb98cfa11", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0ZGI1MTc0MTkxYzkxNWJiN2E2MTgwOTgzN2FhYTVjYjk4Y2ZhMTE=", "commit": {"author": {"name": "gnzlbg", "email": "gonzalobg88@gmail.com", "date": "2019-03-25T17:11:42Z"}, "committer": {"name": "gnzlbg", "email": "gonzalobg88@gmail.com", "date": "2019-03-25T17:43:51Z"}, "message": "black_box should use inline assembly on wasm32", "tree": {"sha": "ce9295c723ae99e7f0923b95e74a1850afb5b352", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce9295c723ae99e7f0923b95e74a1850afb5b352"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/24db5174191c915bb7a61809837aaa5cb98cfa11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/24db5174191c915bb7a61809837aaa5cb98cfa11", "html_url": "https://github.com/rust-lang/rust/commit/24db5174191c915bb7a61809837aaa5cb98cfa11", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/24db5174191c915bb7a61809837aaa5cb98cfa11/comments", "author": {"login": "gnzlbg", "id": 904614, "node_id": "MDQ6VXNlcjkwNDYxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/904614?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gnzlbg", "html_url": "https://github.com/gnzlbg", "followers_url": "https://api.github.com/users/gnzlbg/followers", "following_url": "https://api.github.com/users/gnzlbg/following{/other_user}", "gists_url": "https://api.github.com/users/gnzlbg/gists{/gist_id}", "starred_url": "https://api.github.com/users/gnzlbg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gnzlbg/subscriptions", "organizations_url": "https://api.github.com/users/gnzlbg/orgs", "repos_url": "https://api.github.com/users/gnzlbg/repos", "events_url": "https://api.github.com/users/gnzlbg/events{/privacy}", "received_events_url": "https://api.github.com/users/gnzlbg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gnzlbg", "id": 904614, "node_id": "MDQ6VXNlcjkwNDYxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/904614?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gnzlbg", "html_url": "https://github.com/gnzlbg", "followers_url": "https://api.github.com/users/gnzlbg/followers", "following_url": "https://api.github.com/users/gnzlbg/following{/other_user}", "gists_url": "https://api.github.com/users/gnzlbg/gists{/gist_id}", "starred_url": "https://api.github.com/users/gnzlbg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gnzlbg/subscriptions", "organizations_url": "https://api.github.com/users/gnzlbg/orgs", "repos_url": "https://api.github.com/users/gnzlbg/repos", "events_url": "https://api.github.com/users/gnzlbg/events{/privacy}", "received_events_url": "https://api.github.com/users/gnzlbg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cfa76c438a907bf223e4487ab4da2500277474cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/cfa76c438a907bf223e4487ab4da2500277474cc", "html_url": "https://github.com/rust-lang/rust/commit/cfa76c438a907bf223e4487ab4da2500277474cc"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "e73a1a28793471ca2d433b22df82e8b655b50f50", "filename": "src/libcore/hint.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/24db5174191c915bb7a61809837aaa5cb98cfa11/src%2Flibcore%2Fhint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24db5174191c915bb7a61809837aaa5cb98cfa11/src%2Flibcore%2Fhint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhint.rs?ref=24db5174191c915bb7a61809837aaa5cb98cfa11", "patch": "@@ -99,17 +99,17 @@ pub fn spin_loop() {\n /// This function is a no-op, and does not even read from `dummy`.\n #[unstable(feature = \"test\", issue = \"27812\")]\n pub fn black_box<T>(dummy: T) -> T {\n-    #[cfg(not(any(target_arch = \"asmjs\", target_arch = \"wasm32\")))] {\n+    #[cfg(not(target_arch = \"asmjs\"))] {\n         // we need to \"use\" the argument in some way LLVM can't\n         // introspect.\n         unsafe { asm!(\"\" : : \"r\"(&dummy)) }\n         dummy\n     }\n-    #[cfg(any(target_arch = \"asmjs\", target_arch = \"wasm32\"))] {\n+    #[cfg(target_arch = \"asmjs\")] {\n         unsafe {\n             let ret = crate::ptr::read_volatile(&dummy);\n             crate::mem::forget(dummy);\n             ret\n         }\n-   }\n+    }\n }"}]}