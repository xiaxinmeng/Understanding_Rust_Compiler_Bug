{"sha": "e5fa59735bdc6624a4489b82801c4dc44998f81b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1ZmE1OTczNWJkYzY2MjRhNDQ4OWI4MjgwMWM0ZGM0NDk5OGY4MWI=", "commit": {"author": {"name": "Josh Stone", "email": "cuviper@gmail.com", "date": "2019-03-28T01:15:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-03-28T01:15:24Z"}, "message": "Rollup merge of #59268 - estebank:from-string, r=QuietMisdreavus\n\nAdd suggestion to use `&*var` when `&str: From<String>` is expected\n\nFix #53879.", "tree": {"sha": "a48fbd1828f081d4bf52fc2a3625c8ef0fc33ea0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a48fbd1828f081d4bf52fc2a3625c8ef0fc33ea0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e5fa59735bdc6624a4489b82801c4dc44998f81b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcnCAsCRBK7hj4Ov3rIwAAdHIIAAS6fis9BianDx7WGJ7w/UMB\njNiK7+mX8nQgeUlqygad7hIaPHMxOOwepKkIFRWHEDDEpnxFdRzN4WHDBhslNrK5\nRt4TVZjUoKCp2vDOtyqxtCNagWRxwpsQypMoEXs+3a8cKn4hATjIekG+bM7qfLRW\n3VeM9c3uG+/KWfOPLaYGAKrCdunKKeBzgT5RoVUHpb1na4AESnzf/UbVTOudfIpk\nNNVCSTbL/aaJbBqC9+GA7+dP/zxKt/sgfAw5qYjBxBATUdyRUDMwAcVvIvhDGJz4\nNbgI/frjUD8tD2z7qnvftJNGrGjIBmLUKlngSV3jwn4LzeQwo/5v4/cn5W+NxgQ=\n=13Dm\n-----END PGP SIGNATURE-----\n", "payload": "tree a48fbd1828f081d4bf52fc2a3625c8ef0fc33ea0\nparent ecf63630cfbeeb62764a9b417f29258d6abdd2df\nparent e929d19edc99e5eb7af319709247470cff99719b\nauthor Josh Stone <cuviper@gmail.com> 1553735724 -0700\ncommitter GitHub <noreply@github.com> 1553735724 -0700\n\nRollup merge of #59268 - estebank:from-string, r=QuietMisdreavus\n\nAdd suggestion to use `&*var` when `&str: From<String>` is expected\n\nFix #53879.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e5fa59735bdc6624a4489b82801c4dc44998f81b", "html_url": "https://github.com/rust-lang/rust/commit/e5fa59735bdc6624a4489b82801c4dc44998f81b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e5fa59735bdc6624a4489b82801c4dc44998f81b/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ecf63630cfbeeb62764a9b417f29258d6abdd2df", "url": "https://api.github.com/repos/rust-lang/rust/commits/ecf63630cfbeeb62764a9b417f29258d6abdd2df", "html_url": "https://github.com/rust-lang/rust/commit/ecf63630cfbeeb62764a9b417f29258d6abdd2df"}, {"sha": "e929d19edc99e5eb7af319709247470cff99719b", "url": "https://api.github.com/repos/rust-lang/rust/commits/e929d19edc99e5eb7af319709247470cff99719b", "html_url": "https://github.com/rust-lang/rust/commit/e929d19edc99e5eb7af319709247470cff99719b"}], "stats": {"total": 42, "additions": 42, "deletions": 0}, "files": [{"sha": "a770ab65c26f80d97e1de7ed2f9f9f578af6d458", "filename": "src/doc/unstable-book/src/language-features/on-unimplemented.md", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e5fa59735bdc6624a4489b82801c4dc44998f81b/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fon-unimplemented.md", "raw_url": "https://github.com/rust-lang/rust/raw/e5fa59735bdc6624a4489b82801c4dc44998f81b/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fon-unimplemented.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fon-unimplemented.md?ref=e5fa59735bdc6624a4489b82801c4dc44998f81b", "patch": "@@ -138,3 +138,16 @@ error[E0277]: `&str` is not an iterator\n   = help: the trait `std::iter::Iterator` is not implemented for `&str`\n   = note: required by `std::iter::IntoIterator::into_iter`\n ```\n+\n+If you need to filter on multiple attributes, you can use `all`, `any` or\n+`not` in the following way:\n+\n+```rust,compile_fail\n+#[rustc_on_unimplemented(\n+    on(\n+        all(_Self=\"&str\", T=\"std::string::String\"),\n+        note=\"you can coerce a `{T}` into a `{Self}` by writing `&*variable`\"\n+    )\n+)]\n+pub trait From<T>: Sized { /* ... */ }\n+```"}, {"sha": "a6c65e890a5ed73bd7679e0ab8b47c94d81fc65d", "filename": "src/libcore/convert.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e5fa59735bdc6624a4489b82801c4dc44998f81b/src%2Flibcore%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5fa59735bdc6624a4489b82801c4dc44998f81b/src%2Flibcore%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fconvert.rs?ref=e5fa59735bdc6624a4489b82801c4dc44998f81b", "patch": "@@ -363,6 +363,12 @@ pub trait Into<T>: Sized {\n /// [`from`]: trait.From.html#tymethod.from\n /// [book]: ../../book/ch09-00-error-handling.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_on_unimplemented(\n+    on(\n+        all(_Self=\"&str\", T=\"std::string::String\"),\n+        note=\"to coerce a `{T}` into a `{Self}`, use `&*` as a prefix\",\n+    )\n+)]\n pub trait From<T>: Sized {\n     /// Performs the conversion.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "9793ee801d185cfb5be7e09a50c6b3dd70d4a0a0", "filename": "src/test/ui/suggestions/into-str.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e5fa59735bdc6624a4489b82801c4dc44998f81b/src%2Ftest%2Fui%2Fsuggestions%2Finto-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5fa59735bdc6624a4489b82801c4dc44998f81b/src%2Ftest%2Fui%2Fsuggestions%2Finto-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Finto-str.rs?ref=e5fa59735bdc6624a4489b82801c4dc44998f81b", "patch": "@@ -0,0 +1,6 @@\n+fn foo<'a, T>(_t: T) where T: Into<&'a str> {}\n+\n+fn main() {\n+    foo(String::new());\n+    //~^ ERROR the trait bound `&str: std::convert::From<std::string::String>` is not satisfied\n+}"}, {"sha": "3e28700ce9552e36590a7db415b53ad4d039237a", "filename": "src/test/ui/suggestions/into-str.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e5fa59735bdc6624a4489b82801c4dc44998f81b/src%2Ftest%2Fui%2Fsuggestions%2Finto-str.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5fa59735bdc6624a4489b82801c4dc44998f81b/src%2Ftest%2Fui%2Fsuggestions%2Finto-str.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Finto-str.stderr?ref=e5fa59735bdc6624a4489b82801c4dc44998f81b", "patch": "@@ -0,0 +1,17 @@\n+error[E0277]: the trait bound `&str: std::convert::From<std::string::String>` is not satisfied\n+  --> $DIR/into-str.rs:4:5\n+   |\n+LL |     foo(String::new());\n+   |     ^^^ the trait `std::convert::From<std::string::String>` is not implemented for `&str`\n+   |\n+   = note: to coerce a `std::string::String` into a `&str`, use `&*` as a prefix\n+   = note: required because of the requirements on the impl of `std::convert::Into<&str>` for `std::string::String`\n+note: required by `foo`\n+  --> $DIR/into-str.rs:1:1\n+   |\n+LL | fn foo<'a, T>(_t: T) where T: Into<&'a str> {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}]}