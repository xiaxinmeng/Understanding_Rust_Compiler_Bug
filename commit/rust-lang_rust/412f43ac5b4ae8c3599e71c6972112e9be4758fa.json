{"sha": "412f43ac5b4ae8c3599e71c6972112e9be4758fa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxMmY0M2FjNWI0YWU4YzM1OTllNzFjNjk3MjExMmU5YmU0NzU4ZmE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-24T18:16:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-24T18:16:43Z"}, "message": "Auto merge of #66647 - petrochenkov:nosynt, r=Centril\n\nrustc_plugin: Remove support for syntactic plugins\n\nThis part of the plugin interface was successfully replaced by token-based procedural macros in theory and in practice.\n\ncc https://github.com/rust-lang/rust/issues/29597\ncc https://github.com/rust-lang/rust/pull/64675\nr? @Centril", "tree": {"sha": "7f16e3e176d04fdf5d57e209a0aececa09fd57d8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f16e3e176d04fdf5d57e209a0aececa09fd57d8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/412f43ac5b4ae8c3599e71c6972112e9be4758fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/412f43ac5b4ae8c3599e71c6972112e9be4758fa", "html_url": "https://github.com/rust-lang/rust/commit/412f43ac5b4ae8c3599e71c6972112e9be4758fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/412f43ac5b4ae8c3599e71c6972112e9be4758fa/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a1d028d4c8fc15473dc10473c38df162daa7b41", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a1d028d4c8fc15473dc10473c38df162daa7b41", "html_url": "https://github.com/rust-lang/rust/commit/5a1d028d4c8fc15473dc10473c38df162daa7b41"}, {"sha": "f89e6c881175503fd96a21e77691955ec90b5274", "url": "https://api.github.com/repos/rust-lang/rust/commits/f89e6c881175503fd96a21e77691955ec90b5274", "html_url": "https://github.com/rust-lang/rust/commit/f89e6c881175503fd96a21e77691955ec90b5274"}], "stats": {"total": 579, "additions": 56, "deletions": 523}, "files": [{"sha": "07133f2362bb750efa9b6eb9f56662abd570f0cc", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/412f43ac5b4ae8c3599e71c6972112e9be4758fa/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/412f43ac5b4ae8c3599e71c6972112e9be4758fa/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=412f43ac5b4ae8c3599e71c6972112e9be4758fa", "patch": "@@ -3802,7 +3802,6 @@ dependencies = [\n  \"rustc_error_codes\",\n  \"rustc_metadata\",\n  \"syntax\",\n- \"syntax_expand\",\n  \"syntax_pos\",\n ]\n "}, {"sha": "cd1137e762e6b7b4d736f2ab8d5cee325a471772", "filename": "src/doc/unstable-book/src/language-features/plugin.md", "status": "modified", "additions": 1, "deletions": 129, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/412f43ac5b4ae8c3599e71c6972112e9be4758fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fplugin.md", "raw_url": "https://github.com/rust-lang/rust/raw/412f43ac5b4ae8c3599e71c6972112e9be4758fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fplugin.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fplugin.md?ref=412f43ac5b4ae8c3599e71c6972112e9be4758fa", "patch": "@@ -13,7 +13,7 @@ This feature is part of \"compiler plugins.\" It will often be used with the\n ------------------------\n \n `rustc` can load compiler plugins, which are user-provided libraries that\n-extend the compiler's behavior with new syntax extensions, lint checks, etc.\n+extend the compiler's behavior with new lint checks, etc.\n \n A plugin is a dynamic library crate with a designated *registrar* function that\n registers extensions with `rustc`. Other crates can load these extensions using\n@@ -35,134 +35,6 @@ The usual practice is to put compiler plugins in their own crate, separate from\n any `macro_rules!` macros or ordinary Rust code meant to be used by consumers\n of a library.\n \n-# Syntax extensions\n-\n-Plugins can extend Rust's syntax in various ways. One kind of syntax extension\n-is the procedural macro. These are invoked the same way as [ordinary\n-macros](../../book/macros.md), but the expansion is performed by arbitrary Rust\n-code that manipulates syntax trees at\n-compile time.\n-\n-Let's write a plugin\n-[`roman_numerals.rs`](https://github.com/rust-lang/rust/blob/master/src/test/ui-fulldeps/auxiliary/roman_numerals.rs)\n-that implements Roman numeral integer literals.\n-\n-```rust,ignore\n-#![crate_type=\"dylib\"]\n-#![feature(plugin_registrar, rustc_private)]\n-\n-extern crate syntax;\n-extern crate syntax_pos;\n-extern crate rustc;\n-extern crate rustc_driver;\n-\n-use syntax::parse::token::{self, Token};\n-use syntax::tokenstream::{TokenTree, TokenStream};\n-use syntax::ext::base::{ExtCtxt, MacResult, DummyResult, MacEager};\n-use syntax_pos::Span;\n-use rustc_driver::plugin::Registry;\n-\n-fn expand_rn(cx: &mut ExtCtxt, sp: Span, args: TokenStream)\n-        -> Box<dyn MacResult + 'static> {\n-\n-    static NUMERALS: &'static [(&'static str, usize)] = &[\n-        (\"M\", 1000), (\"CM\", 900), (\"D\", 500), (\"CD\", 400),\n-        (\"C\",  100), (\"XC\",  90), (\"L\",  50), (\"XL\",  40),\n-        (\"X\",   10), (\"IX\",   9), (\"V\",   5), (\"IV\",   4),\n-        (\"I\",    1)];\n-\n-    if args.len() != 1 {\n-        cx.span_err(\n-            sp,\n-            &format!(\"argument should be a single identifier, but got {} arguments\", args.len()));\n-        return DummyResult::any(sp);\n-    }\n-\n-    let text = match args.into_trees().next().unwrap() {\n-        TokenTree::Token(Token { kind: token::Ident(s, _), .. }) => s.to_string(),\n-        _ => {\n-            cx.span_err(sp, \"argument should be a single identifier\");\n-            return DummyResult::any(sp);\n-        }\n-    };\n-\n-    let mut text = &*text;\n-    let mut total = 0;\n-    while !text.is_empty() {\n-        match NUMERALS.iter().find(|&&(rn, _)| text.starts_with(rn)) {\n-            Some(&(rn, val)) => {\n-                total += val;\n-                text = &text[rn.len()..];\n-            }\n-            None => {\n-                cx.span_err(sp, \"invalid Roman numeral\");\n-                return DummyResult::any(sp);\n-            }\n-        }\n-    }\n-\n-    MacEager::expr(cx.expr_usize(sp, total))\n-}\n-\n-#[plugin_registrar]\n-pub fn plugin_registrar(reg: &mut Registry) {\n-    reg.register_macro(\"rn\", expand_rn);\n-}\n-```\n-\n-Then we can use `rn!()` like any other macro:\n-\n-```rust,ignore\n-#![feature(plugin)]\n-#![plugin(roman_numerals)]\n-\n-fn main() {\n-    assert_eq!(rn!(MMXV), 2015);\n-}\n-```\n-\n-The advantages over a simple `fn(&str) -> u32` are:\n-\n-* The (arbitrarily complex) conversion is done at compile time.\n-* Input validation is also performed at compile time.\n-* It can be extended to allow use in patterns, which effectively gives\n-  a way to define new literal syntax for any data type.\n-\n-In addition to procedural macros, you can define new\n-[`derive`](../../reference/attributes/derive.md)-like attributes and other kinds\n-of extensions.  See `Registry::register_syntax_extension` and the\n-`SyntaxExtension` struct.  For a more involved macro example, see\n-[`regex_macros`](https://github.com/rust-lang/regex/blob/master/regex_macros/src/lib.rs).\n-\n-\n-## Tips and tricks\n-\n-You can use `syntax::parse` to turn token trees into\n-higher-level syntax elements like expressions:\n-\n-```rust,ignore\n-fn expand_foo(cx: &mut ExtCtxt, sp: Span, args: &[TokenTree])\n-        -> Box<MacResult+'static> {\n-\n-    let mut parser = cx.new_parser_from_tts(args);\n-\n-    let expr: P<Expr> = parser.parse_expr();\n-```\n-\n-Looking through [`libsyntax` parser\n-code](https://github.com/rust-lang/rust/blob/master/src/libsyntax/parse/parser.rs)\n-will give you a feel for how the parsing infrastructure works.\n-\n-Keep the `Span`s of everything you parse, for better error reporting. You can\n-wrap `Spanned` around your custom data structures.\n-\n-Calling `ExtCtxt::span_fatal` will immediately abort compilation. It's better to\n-instead call `ExtCtxt::span_err` and return `DummyResult` so that the compiler\n-can continue and find further errors.\n-\n-To print syntax fragments for debugging, you can use `span_note` together with\n-`syntax::print::pprust::*_to_string`.\n-\n # Lint plugins\n \n Plugins can extend [Rust's lint"}, {"sha": "13829b842fd5fa5ebab7bae771d5bf4a0cf01d9f", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/412f43ac5b4ae8c3599e71c6972112e9be4758fa/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/412f43ac5b4ae8c3599e71c6972112e9be4758fa/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=412f43ac5b4ae8c3599e71c6972112e9be4758fa", "patch": "@@ -322,7 +322,7 @@ pub fn run_compiler(\n         }\n \n         {\n-            let (_, _, lint_store) = &*compiler.register_plugins()?.peek();\n+            let (_, lint_store) = &*compiler.register_plugins()?.peek();\n \n             // Lint plugins are registered; now we can process command line flags.\n             if sess.opts.describe_lints {"}, {"sha": "a745d63426b7ac0cfcc8176a75d8e63eca93b715", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/412f43ac5b4ae8c3599e71c6972112e9be4758fa/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/412f43ac5b4ae8c3599e71c6972112e9be4758fa/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=412f43ac5b4ae8c3599e71c6972112e9be4758fa", "patch": "@@ -37,7 +37,7 @@ use rustc_traits;\n use rustc_typeck as typeck;\n use syntax::{self, ast, visit};\n use syntax::early_buffered_lints::BufferedEarlyLint;\n-use syntax_expand::base::{NamedSyntaxExtension, ExtCtxt};\n+use syntax_expand::base::ExtCtxt;\n use syntax::mut_visit::MutVisitor;\n use syntax::util::node_count::NodeCounter;\n use syntax::symbol::Symbol;\n@@ -119,7 +119,6 @@ pub fn configure_and_expand(\n     metadata_loader: Box<MetadataLoaderDyn>,\n     krate: ast::Crate,\n     crate_name: &str,\n-    plugin_info: PluginInfo,\n ) -> Result<(ast::Crate, BoxedResolver)> {\n     // Currently, we ignore the name resolution data structures for the purposes of dependency\n     // tracking. Instead we will run name resolution and include its output in the hash of each\n@@ -137,7 +136,6 @@ pub fn configure_and_expand(\n             &crate_name,\n             &resolver_arenas,\n             &*metadata_loader,\n-            plugin_info,\n         );\n         let mut resolver = match res {\n             Err(v) => {\n@@ -164,17 +162,13 @@ impl BoxedResolver {\n     }\n }\n \n-pub struct PluginInfo {\n-    syntax_exts: Vec<NamedSyntaxExtension>,\n-}\n-\n pub fn register_plugins<'a>(\n     sess: &'a Session,\n     metadata_loader: &'a dyn MetadataLoader,\n     register_lints: impl Fn(&Session, &mut lint::LintStore),\n     mut krate: ast::Crate,\n     crate_name: &str,\n-) -> Result<(ast::Crate, PluginInfo, Lrc<lint::LintStore>)> {\n+) -> Result<(ast::Crate, Lrc<lint::LintStore>)> {\n     krate = time(sess, \"attributes injection\", || {\n         syntax_ext::cmdline_attrs::inject(\n             krate, &sess.parse_sess, &sess.opts.debugging_opts.crate_attr\n@@ -240,10 +234,9 @@ pub fn register_plugins<'a>(\n         }\n     });\n \n-    let Registry { syntax_exts, llvm_passes, .. } = registry;\n-    *sess.plugin_llvm_passes.borrow_mut() = llvm_passes;\n+    *sess.plugin_llvm_passes.borrow_mut() = registry.llvm_passes;\n \n-    Ok((krate, PluginInfo { syntax_exts }, Lrc::new(lint_store)))\n+    Ok((krate, Lrc::new(lint_store)))\n }\n \n fn configure_and_expand_inner<'a>(\n@@ -253,7 +246,6 @@ fn configure_and_expand_inner<'a>(\n     crate_name: &str,\n     resolver_arenas: &'a ResolverArenas<'a>,\n     metadata_loader: &'a MetadataLoaderDyn,\n-    plugin_info: PluginInfo,\n ) -> Result<(ast::Crate, Resolver<'a>)> {\n     time(sess, \"pre-AST-expansion lint checks\", || {\n         lint::check_ast_crate(\n@@ -290,10 +282,6 @@ fn configure_and_expand_inner<'a>(\n \n     util::check_attr_crate_type(&krate.attrs, &mut resolver.lint_buffer());\n \n-    syntax_ext::plugin_macro_defs::inject(\n-        &mut krate, &mut resolver, plugin_info.syntax_exts, sess.edition()\n-    );\n-\n     // Expand all macros\n     krate = time(sess, \"expansion\", || {\n         let _prof_timer = sess.prof.generic_activity(\"macro_expand_crate\");"}, {"sha": "9094f36d44e5e0d9d04802f53f4c9556b244707a", "filename": "src/librustc_interface/queries.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/412f43ac5b4ae8c3599e71c6972112e9be4758fa/src%2Flibrustc_interface%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/412f43ac5b4ae8c3599e71c6972112e9be4758fa/src%2Flibrustc_interface%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fqueries.rs?ref=412f43ac5b4ae8c3599e71c6972112e9be4758fa", "patch": "@@ -1,5 +1,5 @@\n use crate::interface::{Compiler, Result};\n-use crate::passes::{self, BoxedResolver, BoxedGlobalCtxt, PluginInfo};\n+use crate::passes::{self, BoxedResolver, BoxedGlobalCtxt};\n \n use rustc_incremental::DepGraphFuture;\n use rustc_data_structures::sync::Lrc;\n@@ -79,7 +79,7 @@ pub(crate) struct Queries {\n     dep_graph_future: Query<Option<DepGraphFuture>>,\n     parse: Query<ast::Crate>,\n     crate_name: Query<String>,\n-    register_plugins: Query<(ast::Crate, PluginInfo, Lrc<LintStore>)>,\n+    register_plugins: Query<(ast::Crate, Lrc<LintStore>)>,\n     expansion: Query<(ast::Crate, Steal<Rc<RefCell<BoxedResolver>>>, Lrc<LintStore>)>,\n     dep_graph: Query<DepGraph>,\n     lower_to_hir: Query<(Steal<hir::map::Forest>, Steal<ResolverOutputs>)>,\n@@ -111,7 +111,7 @@ impl Compiler {\n         })\n     }\n \n-    pub fn register_plugins(&self) -> Result<&Query<(ast::Crate, PluginInfo, Lrc<LintStore>)>> {\n+    pub fn register_plugins(&self) -> Result<&Query<(ast::Crate, Lrc<LintStore>)>> {\n         self.queries.register_plugins.compute(|| {\n             let crate_name = self.crate_name()?.peek().clone();\n             let krate = self.parse()?.take();\n@@ -161,14 +161,13 @@ impl Compiler {\n     ) -> Result<&Query<(ast::Crate, Steal<Rc<RefCell<BoxedResolver>>>, Lrc<LintStore>)>> {\n         self.queries.expansion.compute(|| {\n             let crate_name = self.crate_name()?.peek().clone();\n-            let (krate, plugin_info, lint_store) = self.register_plugins()?.take();\n+            let (krate, lint_store) = self.register_plugins()?.take();\n             passes::configure_and_expand(\n                 self.sess.clone(),\n                 lint_store.clone(),\n                 self.codegen_backend().metadata_loader(),\n                 krate,\n                 &crate_name,\n-                plugin_info,\n             ).map(|(krate, resolver)| {\n                 (krate, Steal::new(Rc::new(RefCell::new(resolver))), lint_store)\n             })"}, {"sha": "d57a58b433f484abfe7d87cd4edf7283e33635dd", "filename": "src/librustc_plugin_impl/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/412f43ac5b4ae8c3599e71c6972112e9be4758fa/src%2Flibrustc_plugin_impl%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/412f43ac5b4ae8c3599e71c6972112e9be4758fa/src%2Flibrustc_plugin_impl%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin_impl%2FCargo.toml?ref=412f43ac5b4ae8c3599e71c6972112e9be4758fa", "patch": "@@ -14,6 +14,5 @@ doctest = false\n rustc = { path = \"../librustc\" }\n rustc_metadata = { path = \"../librustc_metadata\" }\n syntax = { path = \"../libsyntax\" }\n-syntax_expand = { path = \"../libsyntax_expand\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n rustc_error_codes = { path = \"../librustc_error_codes\" }"}, {"sha": "f4e90b7b7da3d143394391c8393dba94fe5f272f", "filename": "src/librustc_plugin_impl/lib.rs", "status": "modified", "additions": 2, "deletions": 47, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/412f43ac5b4ae8c3599e71c6972112e9be4758fa/src%2Flibrustc_plugin_impl%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/412f43ac5b4ae8c3599e71c6972112e9be4758fa/src%2Flibrustc_plugin_impl%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin_impl%2Flib.rs?ref=412f43ac5b4ae8c3599e71c6972112e9be4758fa", "patch": "@@ -1,55 +1,10 @@\n //! Infrastructure for compiler plugins.\n //!\n-//! Plugins are Rust libraries which extend the behavior of `rustc`\n-//! in various ways.\n-//!\n-//! Plugin authors will use the `Registry` type re-exported by\n-//! this module, along with its methods. The rest of the module\n-//! is for use by `rustc` itself.\n-//!\n-//! To define a plugin, build a dylib crate with a\n-//! `#[plugin_registrar]` function:\n-//!\n-//! ```no_run\n-//! #![crate_name = \"myplugin\"]\n-//! #![crate_type = \"dylib\"]\n-//! #![feature(plugin_registrar)]\n-//! #![feature(rustc_private)]\n-//!\n-//! extern crate rustc_driver;\n-//! extern crate syntax;\n-//! extern crate syntax_pos;\n-//!\n-//! use rustc_driver::plugin::Registry;\n-//! use syntax_expand::base::{ExtCtxt, MacResult};\n-//! use syntax_pos::Span;\n-//! use syntax::tokenstream::TokenTree;\n-//!\n-//! #[plugin_registrar]\n-//! pub fn plugin_registrar(reg: &mut Registry) {\n-//!     reg.register_macro(\"mymacro\", expand_mymacro);\n-//! }\n-//!\n-//! fn expand_mymacro(cx: &mut ExtCtxt, span: Span, tt: &[TokenTree]) -> Box<MacResult> {\n-//!     unimplemented!()\n-//! }\n-//!\n-//! # fn main() {}\n-//! ```\n-//!\n-//! WARNING: We currently don't check that the registrar function\n-//! has the appropriate type!\n-//!\n-//! To use a plugin while compiling another crate:\n-//!\n-//! ```rust\n-//! #![feature(plugin)]\n-//! #![plugin(myplugin)]\n-//! ```\n+//! Plugins are a deprecated way to extend the behavior of `rustc` in various ways.\n //!\n //! See the [`plugin`\n //! feature](https://doc.rust-lang.org/nightly/unstable-book/language-features/plugin.html)\n-//! of the Unstable Book for more examples.\n+//! of the Unstable Book for some examples.\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n "}, {"sha": "bc684d59e5a99d375c844c5e401847f1b4065cea", "filename": "src/librustc_plugin_impl/registry.rs", "status": "modified", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/412f43ac5b4ae8c3599e71c6972112e9be4758fa/src%2Flibrustc_plugin_impl%2Fregistry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/412f43ac5b4ae8c3599e71c6972112e9be4758fa/src%2Flibrustc_plugin_impl%2Fregistry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin_impl%2Fregistry.rs?ref=412f43ac5b4ae8c3599e71c6972112e9be4758fa", "patch": "@@ -2,10 +2,6 @@\n \n use rustc::lint::LintStore;\n use rustc::session::Session;\n-\n-use syntax_expand::base::{SyntaxExtension, SyntaxExtensionKind, NamedSyntaxExtension};\n-use syntax_expand::base::MacroExpanderFn;\n-use syntax::symbol::Symbol;\n use syntax::ast;\n use syntax_pos::Span;\n \n@@ -33,9 +29,6 @@ pub struct Registry<'a> {\n     #[doc(hidden)]\n     pub krate_span: Span,\n \n-    #[doc(hidden)]\n-    pub syntax_exts: Vec<NamedSyntaxExtension>,\n-\n     #[doc(hidden)]\n     pub llvm_passes: Vec<String>,\n }\n@@ -48,7 +41,6 @@ impl<'a> Registry<'a> {\n             lint_store,\n             args_hidden: None,\n             krate_span,\n-            syntax_exts: vec![],\n             llvm_passes: vec![],\n         }\n     }\n@@ -67,24 +59,6 @@ impl<'a> Registry<'a> {\n         self.args_hidden.as_ref().map(|v| &v[..]).unwrap_or(&[])\n     }\n \n-    /// Register a syntax extension of any kind.\n-    ///\n-    /// This is the most general hook into `libsyntax`'s expansion behavior.\n-    pub fn register_syntax_extension(&mut self, name: ast::Name, extension: SyntaxExtension) {\n-        self.syntax_exts.push((name, extension));\n-    }\n-\n-    /// Register a macro of the usual kind.\n-    ///\n-    /// This is a convenience wrapper for `register_syntax_extension`.\n-    /// It builds for you a `SyntaxExtensionKind::LegacyBang` that calls `expander`,\n-    /// and also takes care of interning the macro's name.\n-    pub fn register_macro(&mut self, name: &str, expander: MacroExpanderFn) {\n-        let kind = SyntaxExtensionKind::LegacyBang(Box::new(expander));\n-        let ext = SyntaxExtension::default(kind, self.sess.edition());\n-        self.register_syntax_extension(Symbol::intern(name), ext);\n-    }\n-\n     /// Register an LLVM pass.\n     ///\n     /// Registration with LLVM itself is handled through static C++ objects with"}, {"sha": "21c24f9da1c16b0924c40818c622af46d77b18e9", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/412f43ac5b4ae8c3599e71c6972112e9be4758fa/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/412f43ac5b4ae8c3599e71c6972112e9be4758fa/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=412f43ac5b4ae8c3599e71c6972112e9be4758fa", "patch": "@@ -880,8 +880,8 @@ impl<'a> Resolver<'a> {\n         }\n     }\n \n-    /// Compile the macro into a `SyntaxExtension` and possibly replace it with a pre-defined\n-    /// extension partially or entirely for built-in macros and legacy plugin macros.\n+    /// Compile the macro into a `SyntaxExtension` and possibly replace\n+    /// its expander to a pre-defined one for built-in macros.\n     crate fn compile_macro(&mut self, item: &ast::Item, edition: Edition) -> SyntaxExtension {\n         let mut result = compile_declarative_macro(\n             &self.session.parse_sess, self.session.features_untracked(), item, edition\n@@ -890,14 +890,9 @@ impl<'a> Resolver<'a> {\n         if result.is_builtin {\n             // The macro was marked with `#[rustc_builtin_macro]`.\n             if let Some(ext) = self.builtin_macros.remove(&item.ident.name) {\n-                if ext.is_builtin {\n-                    // The macro is a built-in, replace only the expander function.\n-                    result.kind = ext.kind;\n-                } else {\n-                    // The macro is from a plugin, the in-source definition is dummy,\n-                    // take all the data from the resolver.\n-                    result = ext;\n-                }\n+                // The macro is a built-in, replace its expander function\n+                // while still taking everything else from the source code.\n+                result.kind = ext.kind;\n             } else {\n                 let msg = format!(\"cannot find a built-in macro with name `{}`\", item.ident);\n                 self.session.span_err(item.span, &msg);"}, {"sha": "50b69f1587848b300fb99ca60812ce79d0f46410", "filename": "src/libsyntax_expand/base.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/412f43ac5b4ae8c3599e71c6972112e9be4758fa/src%2Flibsyntax_expand%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/412f43ac5b4ae8c3599e71c6972112e9be4758fa/src%2Flibsyntax_expand%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fbase.rs?ref=412f43ac5b4ae8c3599e71c6972112e9be4758fa", "patch": "@@ -825,8 +825,6 @@ impl SyntaxExtension {\n     }\n }\n \n-pub type NamedSyntaxExtension = (Name, SyntaxExtension);\n-\n /// Result of resolving a macro invocation.\n pub enum InvocationRes {\n     Single(Lrc<SyntaxExtension>),"}, {"sha": "b9287d2fe7062ed1f3cd742225b748b84bd00340", "filename": "src/libsyntax_ext/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/412f43ac5b4ae8c3599e71c6972112e9be4758fa/src%2Flibsyntax_ext%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/412f43ac5b4ae8c3599e71c6972112e9be4758fa/src%2Flibsyntax_ext%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Flib.rs?ref=412f43ac5b4ae8c3599e71c6972112e9be4758fa", "patch": "@@ -38,7 +38,6 @@ mod trace_macros;\n mod util;\n \n pub mod cmdline_attrs;\n-pub mod plugin_macro_defs;\n pub mod proc_macro_harness;\n pub mod standard_library_imports;\n pub mod test_harness;"}, {"sha": "cee1b97af55b21489a5966a63111c03c1caa2368", "filename": "src/libsyntax_ext/plugin_macro_defs.rs", "status": "removed", "additions": 0, "deletions": 58, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/5a1d028d4c8fc15473dc10473c38df162daa7b41/src%2Flibsyntax_ext%2Fplugin_macro_defs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a1d028d4c8fc15473dc10473c38df162daa7b41/src%2Flibsyntax_ext%2Fplugin_macro_defs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fplugin_macro_defs.rs?ref=5a1d028d4c8fc15473dc10473c38df162daa7b41", "patch": "@@ -1,58 +0,0 @@\n-//! Each macro must have a definition, so `#[plugin]` attributes\n-//! inject a dummy `macro_rules` item for each macro they define.\n-\n-use syntax::ast::*;\n-use syntax::attr;\n-use syntax::edition::Edition;\n-use syntax::ptr::P;\n-use syntax::source_map::respan;\n-use syntax::symbol::sym;\n-use syntax::token;\n-use syntax::tokenstream::*;\n-use syntax_expand::base::{Resolver, NamedSyntaxExtension};\n-use syntax_pos::{Span, DUMMY_SP};\n-use syntax_pos::hygiene::{ExpnData, ExpnKind, AstPass};\n-\n-use std::mem;\n-\n-fn plugin_macro_def(name: Name, span: Span) -> P<Item> {\n-    let rustc_builtin_macro = attr::mk_attr_outer(\n-        attr::mk_word_item(Ident::new(sym::rustc_builtin_macro, span)));\n-\n-    let parens: TreeAndJoint = TokenTree::Delimited(\n-        DelimSpan::from_single(span), token::Paren, TokenStream::default()\n-    ).into();\n-    let trees = vec![parens.clone(), TokenTree::token(token::FatArrow, span).into(), parens];\n-\n-    P(Item {\n-        ident: Ident::new(name, span),\n-        attrs: vec![rustc_builtin_macro],\n-        id: DUMMY_NODE_ID,\n-        kind: ItemKind::MacroDef(MacroDef { tokens: TokenStream::new(trees), legacy: true }),\n-        vis: respan(span, VisibilityKind::Inherited),\n-        span: span,\n-        tokens: None,\n-    })\n-}\n-\n-pub fn inject(\n-    krate: &mut Crate,\n-    resolver: &mut dyn Resolver,\n-    named_exts: Vec<NamedSyntaxExtension>,\n-    edition: Edition,\n-) {\n-    if !named_exts.is_empty() {\n-        let mut extra_items = Vec::new();\n-        let span = DUMMY_SP.fresh_expansion(ExpnData::allow_unstable(\n-            ExpnKind::AstPass(AstPass::PluginMacroDefs), DUMMY_SP, edition,\n-            [sym::rustc_attrs][..].into(),\n-        ));\n-        for (name, ext) in named_exts {\n-            resolver.register_builtin_macro(Ident::with_dummy_span(name), ext);\n-            extra_items.push(plugin_macro_def(name, span));\n-        }\n-        // The `macro_rules` items must be inserted before any other items.\n-        mem::swap(&mut extra_items, &mut krate.module.items);\n-        krate.module.items.append(&mut extra_items);\n-    }\n-}"}, {"sha": "583c81143a52da1aa11f219707e20cf30aa5e9dd", "filename": "src/libsyntax_pos/hygiene.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/412f43ac5b4ae8c3599e71c6972112e9be4758fa/src%2Flibsyntax_pos%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/412f43ac5b4ae8c3599e71c6972112e9be4758fa/src%2Flibsyntax_pos%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fhygiene.rs?ref=412f43ac5b4ae8c3599e71c6972112e9be4758fa", "patch": "@@ -750,7 +750,6 @@ pub enum AstPass {\n     StdImports,\n     TestHarness,\n     ProcMacroHarness,\n-    PluginMacroDefs,\n }\n \n impl AstPass {\n@@ -759,7 +758,6 @@ impl AstPass {\n             AstPass::StdImports => \"standard library imports\",\n             AstPass::TestHarness => \"test harness\",\n             AstPass::ProcMacroHarness => \"proc macro harness\",\n-            AstPass::PluginMacroDefs => \"plugin macro definitions\",\n         }\n     }\n }"}, {"sha": "b17c6a939655c45620dca7fcf073191e307e6696", "filename": "src/test/ui-fulldeps/auxiliary/attr-plugin-test.rs", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5a1d028d4c8fc15473dc10473c38df162daa7b41/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Fattr-plugin-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a1d028d4c8fc15473dc10473c38df162daa7b41/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Fattr-plugin-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Fattr-plugin-test.rs?ref=5a1d028d4c8fc15473dc10473c38df162daa7b41", "patch": "@@ -1,20 +0,0 @@\n-// force-host\n-\n-#![feature(plugin_registrar)]\n-#![feature(rustc_private)]\n-\n-extern crate rustc_driver;\n-extern crate syntax;\n-extern crate syntax_expand;\n-\n-use rustc_driver::plugin::Registry;\n-use syntax_expand::base::SyntaxExtension;\n-use syntax::feature_gate::AttributeType;\n-use syntax::symbol::Symbol;\n-\n-#[plugin_registrar]\n-pub fn plugin_registrar(reg: &mut Registry) {\n-    reg.register_syntax_extension(\n-        Symbol::intern(\"mac\"), SyntaxExtension::dummy_bang(reg.sess.edition())\n-    );\n-}"}, {"sha": "66fc245bdf59369c6ad4b1dff609f5b64004f36a", "filename": "src/test/ui-fulldeps/auxiliary/empty-plugin.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/412f43ac5b4ae8c3599e71c6972112e9be4758fa/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Fempty-plugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/412f43ac5b4ae8c3599e71c6972112e9be4758fa/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Fempty-plugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Fempty-plugin.rs?ref=412f43ac5b4ae8c3599e71c6972112e9be4758fa", "patch": "@@ -0,0 +1,10 @@\n+// force-host\n+\n+#![feature(plugin_registrar)]\n+#![feature(rustc_private)]\n+\n+extern crate rustc_driver;\n+use rustc_driver::plugin::Registry;\n+\n+#[plugin_registrar]\n+pub fn plugin_registrar(_: &mut Registry) {}"}, {"sha": "cccdfea208327ff66b9f19676d0652aa9d11f6af", "filename": "src/test/ui-fulldeps/auxiliary/plugin-args.rs", "status": "removed", "additions": 0, "deletions": 43, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/5a1d028d4c8fc15473dc10473c38df162daa7b41/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Fplugin-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a1d028d4c8fc15473dc10473c38df162daa7b41/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Fplugin-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Fplugin-args.rs?ref=5a1d028d4c8fc15473dc10473c38df162daa7b41", "patch": "@@ -1,43 +0,0 @@\n-// force-host\n-\n-#![feature(plugin_registrar)]\n-#![feature(box_syntax, rustc_private)]\n-\n-extern crate syntax;\n-extern crate syntax_expand;\n-extern crate syntax_pos;\n-extern crate rustc;\n-extern crate rustc_driver;\n-\n-use std::borrow::ToOwned;\n-use syntax::ast;\n-use syntax_expand::base::{SyntaxExtension, SyntaxExtensionKind};\n-use syntax_expand::base::{TTMacroExpander, ExtCtxt, MacResult, MacEager};\n-use syntax::print::pprust;\n-use syntax::symbol::Symbol;\n-use syntax_pos::Span;\n-use syntax::tokenstream::TokenStream;\n-use rustc_driver::plugin::Registry;\n-\n-struct Expander {\n-    args: Vec<ast::NestedMetaItem>,\n-}\n-\n-impl TTMacroExpander for Expander {\n-    fn expand<'cx>(&self,\n-                   ecx: &'cx mut ExtCtxt,\n-                   sp: Span,\n-                   _: TokenStream) -> Box<dyn MacResult+'cx> {\n-        let args = self.args.iter().map(|i| pprust::meta_list_item_to_string(i))\n-            .collect::<Vec<_>>().join(\", \");\n-        MacEager::expr(ecx.expr_str(sp, Symbol::intern(&args)))\n-    }\n-}\n-\n-#[plugin_registrar]\n-pub fn plugin_registrar(reg: &mut Registry) {\n-    let args = reg.args().to_owned();\n-    reg.register_syntax_extension(Symbol::intern(\"plugin_args\"), SyntaxExtension::default(\n-        SyntaxExtensionKind::LegacyBang(Box::new(Expander { args })), reg.sess.edition()\n-    ));\n-}"}, {"sha": "520347faa15aa8e13e8a6357e593954b0351dca7", "filename": "src/test/ui-fulldeps/auxiliary/roman-numerals.rs", "status": "removed", "additions": 0, "deletions": 69, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/5a1d028d4c8fc15473dc10473c38df162daa7b41/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Froman-numerals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a1d028d4c8fc15473dc10473c38df162daa7b41/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Froman-numerals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Froman-numerals.rs?ref=5a1d028d4c8fc15473dc10473c38df162daa7b41", "patch": "@@ -1,69 +0,0 @@\n-// WARNING WARNING WARNING WARNING WARNING\n-// =======================================\n-//\n-// This code also appears in src/doc/unstable-book/src/language-features/plugin.md.\n-// Please keep the two copies in sync!  FIXME: have rustdoc read this file\n-\n-// force-host\n-\n-#![crate_type=\"dylib\"]\n-#![feature(plugin_registrar, rustc_private)]\n-\n-extern crate syntax;\n-extern crate syntax_expand;\n-extern crate syntax_pos;\n-extern crate rustc;\n-extern crate rustc_driver;\n-\n-use syntax::token::{self, Token};\n-use syntax::tokenstream::{TokenTree, TokenStream};\n-use syntax_expand::base::{ExtCtxt, MacResult, DummyResult, MacEager};\n-use syntax_pos::Span;\n-use rustc_driver::plugin::Registry;\n-\n-fn expand_rn(cx: &mut ExtCtxt, sp: Span, args: TokenStream)\n-        -> Box<dyn MacResult + 'static> {\n-\n-    static NUMERALS: &'static [(&'static str, usize)] = &[\n-        (\"M\", 1000), (\"CM\", 900), (\"D\", 500), (\"CD\", 400),\n-        (\"C\",  100), (\"XC\",  90), (\"L\",  50), (\"XL\",  40),\n-        (\"X\",   10), (\"IX\",   9), (\"V\",   5), (\"IV\",   4),\n-        (\"I\",    1)];\n-\n-    if args.len() != 1 {\n-        cx.span_err(\n-            sp,\n-            &format!(\"argument should be a single identifier, but got {} arguments\", args.len()));\n-        return DummyResult::any(sp);\n-    }\n-\n-    let text = match args.into_trees().next().unwrap() {\n-        TokenTree::Token(Token { kind: token::Ident(s, _), .. }) => s.to_string(),\n-        _ => {\n-            cx.span_err(sp, \"argument should be a single identifier\");\n-            return DummyResult::any(sp);\n-        }\n-    };\n-\n-    let mut text = &*text;\n-    let mut total = 0;\n-    while !text.is_empty() {\n-        match NUMERALS.iter().find(|&&(rn, _)| text.starts_with(rn)) {\n-            Some(&(rn, val)) => {\n-                total += val;\n-                text = &text[rn.len()..];\n-            }\n-            None => {\n-                cx.span_err(sp, \"invalid Roman numeral\");\n-                return DummyResult::any(sp);\n-            }\n-        }\n-    }\n-\n-    MacEager::expr(cx.expr_usize(sp, total))\n-}\n-\n-#[plugin_registrar]\n-pub fn plugin_registrar(reg: &mut Registry) {\n-    reg.register_macro(\"rn\", expand_rn);\n-}"}, {"sha": "445469f8733fbbe7782f33e44c06063f712b94b1", "filename": "src/test/ui-fulldeps/gated-plugin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/412f43ac5b4ae8c3599e71c6972112e9be4758fa/src%2Ftest%2Fui-fulldeps%2Fgated-plugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/412f43ac5b4ae8c3599e71c6972112e9be4758fa/src%2Ftest%2Fui-fulldeps%2Fgated-plugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fgated-plugin.rs?ref=412f43ac5b4ae8c3599e71c6972112e9be4758fa", "patch": "@@ -1,6 +1,6 @@\n-// aux-build:attr-plugin-test.rs\n+// aux-build:empty-plugin.rs\n \n-#![plugin(attr_plugin_test)]\n+#![plugin(empty_plugin)]\n //~^ ERROR compiler plugins are deprecated\n //~| WARN use of deprecated attribute `plugin`: compiler plugins are deprecated\n "}, {"sha": "c35863e6bc59756a64d8c2fbe330afd10075c5ee", "filename": "src/test/ui-fulldeps/gated-plugin.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/412f43ac5b4ae8c3599e71c6972112e9be4758fa/src%2Ftest%2Fui-fulldeps%2Fgated-plugin.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/412f43ac5b4ae8c3599e71c6972112e9be4758fa/src%2Ftest%2Fui-fulldeps%2Fgated-plugin.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fgated-plugin.stderr?ref=412f43ac5b4ae8c3599e71c6972112e9be4758fa", "patch": "@@ -1,17 +1,17 @@\n error[E0658]: compiler plugins are deprecated\n   --> $DIR/gated-plugin.rs:3:1\n    |\n-LL | #![plugin(attr_plugin_test)]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #![plugin(empty_plugin)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29597\n    = help: add `#![feature(plugin)]` to the crate attributes to enable\n \n warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n   --> $DIR/gated-plugin.rs:3:1\n    |\n-LL | #![plugin(attr_plugin_test)]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: may be removed in a future compiler version\n+LL | #![plugin(empty_plugin)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^ help: may be removed in a future compiler version\n    |\n    = note: `#[warn(deprecated)]` on by default\n "}, {"sha": "1865819053ef624a1b97fdec9102d48c8d7bbfde", "filename": "src/test/ui-fulldeps/plugin-args-1.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/412f43ac5b4ae8c3599e71c6972112e9be4758fa/src%2Ftest%2Fui-fulldeps%2Fplugin-args-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/412f43ac5b4ae8c3599e71c6972112e9be4758fa/src%2Ftest%2Fui-fulldeps%2Fplugin-args-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fplugin-args-1.rs?ref=412f43ac5b4ae8c3599e71c6972112e9be4758fa", "patch": "@@ -1,10 +1,8 @@\n-// run-pass\n-// aux-build:plugin-args.rs\n+// check-pass\n+// aux-build:empty-plugin.rs\n // ignore-stage1\n \n #![feature(plugin)]\n-#![plugin(plugin_args)] //~ WARNING compiler plugins are deprecated\n+#![plugin(empty_plugin)] //~ WARNING compiler plugins are deprecated\n \n-fn main() {\n-    assert_eq!(plugin_args!(), \"\");\n-}\n+fn main() {}"}, {"sha": "4e82961acc218c3551d474c5e0c2bd7a5d68accc", "filename": "src/test/ui-fulldeps/plugin-args-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/412f43ac5b4ae8c3599e71c6972112e9be4758fa/src%2Ftest%2Fui-fulldeps%2Fplugin-args-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/412f43ac5b4ae8c3599e71c6972112e9be4758fa/src%2Ftest%2Fui-fulldeps%2Fplugin-args-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fplugin-args-1.stderr?ref=412f43ac5b4ae8c3599e71c6972112e9be4758fa", "patch": "@@ -1,8 +1,8 @@\n warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n   --> $DIR/plugin-args-1.rs:6:1\n    |\n-LL | #![plugin(plugin_args)]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^ help: may be removed in a future compiler version\n+LL | #![plugin(empty_plugin)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^ help: may be removed in a future compiler version\n    |\n    = note: `#[warn(deprecated)]` on by default\n "}, {"sha": "c4bd1916b854255aa55dd6318a50eeb57b017325", "filename": "src/test/ui-fulldeps/plugin-args-2.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/412f43ac5b4ae8c3599e71c6972112e9be4758fa/src%2Ftest%2Fui-fulldeps%2Fplugin-args-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/412f43ac5b4ae8c3599e71c6972112e9be4758fa/src%2Ftest%2Fui-fulldeps%2Fplugin-args-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fplugin-args-2.rs?ref=412f43ac5b4ae8c3599e71c6972112e9be4758fa", "patch": "@@ -1,10 +1,8 @@\n-// run-pass\n-// aux-build:plugin-args.rs\n+// check-pass\n+// aux-build:empty-plugin.rs\n // ignore-stage1\n \n #![feature(plugin)]\n-#![plugin(plugin_args())] //~ WARNING compiler plugins are deprecated\n+#![plugin(empty_plugin())] //~ WARNING compiler plugins are deprecated\n \n-fn main() {\n-    assert_eq!(plugin_args!(), \"\");\n-}\n+fn main() {}"}, {"sha": "92bd69b0e4b3267519ce696612a14c53ffc862b8", "filename": "src/test/ui-fulldeps/plugin-args-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/412f43ac5b4ae8c3599e71c6972112e9be4758fa/src%2Ftest%2Fui-fulldeps%2Fplugin-args-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/412f43ac5b4ae8c3599e71c6972112e9be4758fa/src%2Ftest%2Fui-fulldeps%2Fplugin-args-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fplugin-args-2.stderr?ref=412f43ac5b4ae8c3599e71c6972112e9be4758fa", "patch": "@@ -1,8 +1,8 @@\n warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n   --> $DIR/plugin-args-2.rs:6:1\n    |\n-LL | #![plugin(plugin_args())]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^ help: may be removed in a future compiler version\n+LL | #![plugin(empty_plugin())]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: may be removed in a future compiler version\n    |\n    = note: `#[warn(deprecated)]` on by default\n "}, {"sha": "c8818cc6c3178b33d02811586140ffe96c4e03ff", "filename": "src/test/ui-fulldeps/plugin-args-3.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/412f43ac5b4ae8c3599e71c6972112e9be4758fa/src%2Ftest%2Fui-fulldeps%2Fplugin-args-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/412f43ac5b4ae8c3599e71c6972112e9be4758fa/src%2Ftest%2Fui-fulldeps%2Fplugin-args-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fplugin-args-3.rs?ref=412f43ac5b4ae8c3599e71c6972112e9be4758fa", "patch": "@@ -1,10 +1,8 @@\n-// run-pass\n-// aux-build:plugin-args.rs\n+// check-pass\n+// aux-build:empty-plugin.rs\n // ignore-stage1\n \n #![feature(plugin)]\n-#![plugin(plugin_args(hello(there), how(are=\"you\")))] //~ WARNING compiler plugins are deprecated\n+#![plugin(empty_plugin(hello(there), how(are=\"you\")))] //~ WARNING compiler plugins are deprecated\n \n-fn main() {\n-    assert_eq!(plugin_args!(), \"hello(there), how(are = \\\"you\\\")\");\n-}\n+fn main() {}"}, {"sha": "278853e0881ba7dac601fceceee7a1f9253897e1", "filename": "src/test/ui-fulldeps/plugin-args-3.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/412f43ac5b4ae8c3599e71c6972112e9be4758fa/src%2Ftest%2Fui-fulldeps%2Fplugin-args-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/412f43ac5b4ae8c3599e71c6972112e9be4758fa/src%2Ftest%2Fui-fulldeps%2Fplugin-args-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fplugin-args-3.stderr?ref=412f43ac5b4ae8c3599e71c6972112e9be4758fa", "patch": "@@ -1,8 +1,8 @@\n warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n   --> $DIR/plugin-args-3.rs:6:1\n    |\n-LL | #![plugin(plugin_args(hello(there), how(are=\"you\")))]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: may be removed in a future compiler version\n+LL | #![plugin(empty_plugin(hello(there), how(are=\"you\")))]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: may be removed in a future compiler version\n    |\n    = note: `#[warn(deprecated)]` on by default\n "}, {"sha": "fa7826c9df76e3c114f80f18002cec14492e11e8", "filename": "src/test/ui-fulldeps/plugin-as-extern-crate.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/412f43ac5b4ae8c3599e71c6972112e9be4758fa/src%2Ftest%2Fui-fulldeps%2Fplugin-as-extern-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/412f43ac5b4ae8c3599e71c6972112e9be4758fa/src%2Ftest%2Fui-fulldeps%2Fplugin-as-extern-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fplugin-as-extern-crate.rs?ref=412f43ac5b4ae8c3599e71c6972112e9be4758fa", "patch": "@@ -1,11 +1,11 @@\n-// aux-build:attr-plugin-test.rs\n+// aux-build:empty-plugin.rs\n // ignore-cross-compile\n //\n-// attr_plugin_test will not compile on a cross-compiled target because\n+// empty_plugin will not compile on a cross-compiled target because\n // libsyntax is not compiled for it.\n \n #![deny(plugin_as_library)]\n \n-extern crate attr_plugin_test; //~ ERROR compiler plugin used as an ordinary library\n+extern crate empty_plugin; //~ ERROR compiler plugin used as an ordinary library\n \n fn main() { }"}, {"sha": "d2fbb5d35172c5dfaa8f7f04c9ef319161be242e", "filename": "src/test/ui-fulldeps/plugin-as-extern-crate.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/412f43ac5b4ae8c3599e71c6972112e9be4758fa/src%2Ftest%2Fui-fulldeps%2Fplugin-as-extern-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/412f43ac5b4ae8c3599e71c6972112e9be4758fa/src%2Ftest%2Fui-fulldeps%2Fplugin-as-extern-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fplugin-as-extern-crate.stderr?ref=412f43ac5b4ae8c3599e71c6972112e9be4758fa", "patch": "@@ -1,8 +1,8 @@\n error: compiler plugin used as an ordinary library\n   --> $DIR/plugin-as-extern-crate.rs:9:1\n    |\n-LL | extern crate attr_plugin_test;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | extern crate empty_plugin;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: lint level defined here\n   --> $DIR/plugin-as-extern-crate.rs:7:9"}, {"sha": "e92b020c0b41359732673d7bfaa3256b23e5d65f", "filename": "src/test/ui-fulldeps/plugin-reexport.rs", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5a1d028d4c8fc15473dc10473c38df162daa7b41/src%2Ftest%2Fui-fulldeps%2Fplugin-reexport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a1d028d4c8fc15473dc10473c38df162daa7b41/src%2Ftest%2Fui-fulldeps%2Fplugin-reexport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fplugin-reexport.rs?ref=5a1d028d4c8fc15473dc10473c38df162daa7b41", "patch": "@@ -1,11 +0,0 @@\n-// edition:2018\n-// aux-build:attr-plugin-test.rs\n-// ignore-stage1\n-\n-#![feature(plugin)]\n-#![plugin(attr_plugin_test)]\n-//~^ WARN use of deprecated attribute `plugin`\n-\n-pub use mac as reexport; //~ ERROR `mac` is private, and cannot be re-exported\n-\n-fn main() {}"}, {"sha": "365b26d131e79bff90ffc83b087023d0f690b3bf", "filename": "src/test/ui-fulldeps/plugin-reexport.stderr", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/5a1d028d4c8fc15473dc10473c38df162daa7b41/src%2Ftest%2Fui-fulldeps%2Fplugin-reexport.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a1d028d4c8fc15473dc10473c38df162daa7b41/src%2Ftest%2Fui-fulldeps%2Fplugin-reexport.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fplugin-reexport.stderr?ref=5a1d028d4c8fc15473dc10473c38df162daa7b41", "patch": "@@ -1,23 +0,0 @@\n-error[E0364]: `mac` is private, and cannot be re-exported\n-  --> $DIR/plugin-reexport.rs:9:9\n-   |\n-LL | pub use mac as reexport;\n-   |         ^^^^^^^^^^^^^^^\n-   |\n-note: consider marking `mac` as `pub` in the imported module\n-  --> $DIR/plugin-reexport.rs:9:9\n-   |\n-LL | pub use mac as reexport;\n-   |         ^^^^^^^^^^^^^^^\n-\n-warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n-  --> $DIR/plugin-reexport.rs:6:1\n-   |\n-LL | #![plugin(attr_plugin_test)]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: may be removed in a future compiler version\n-   |\n-   = note: `#[warn(deprecated)]` on by default\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0364`."}, {"sha": "b5823ea3047a52d52454b7b5a4fecb64e28860a6", "filename": "src/test/ui-fulldeps/roman-numerals-macro.rs", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5a1d028d4c8fc15473dc10473c38df162daa7b41/src%2Ftest%2Fui-fulldeps%2Froman-numerals-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a1d028d4c8fc15473dc10473c38df162daa7b41/src%2Ftest%2Fui-fulldeps%2Froman-numerals-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Froman-numerals-macro.rs?ref=5a1d028d4c8fc15473dc10473c38df162daa7b41", "patch": "@@ -1,15 +0,0 @@\n-// run-pass\n-// aux-build:roman-numerals.rs\n-// ignore-stage1\n-\n-#![feature(plugin)]\n-#![plugin(roman_numerals)] //~ WARNING compiler plugins are deprecated\n-\n-pub fn main() {\n-    assert_eq!(rn!(MMXV), 2015);\n-    assert_eq!(rn!(MCMXCIX), 1999);\n-    assert_eq!(rn!(XXV), 25);\n-    assert_eq!(rn!(MDCLXVI), 1666);\n-    assert_eq!(rn!(MMMDCCCLXXXVIII), 3888);\n-    assert_eq!(rn!(MMXIV), 2014);\n-}"}, {"sha": "8f3f558e91df55b37d10d7e6bbc8f5ea1309af3c", "filename": "src/test/ui-fulldeps/roman-numerals-macro.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5a1d028d4c8fc15473dc10473c38df162daa7b41/src%2Ftest%2Fui-fulldeps%2Froman-numerals-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a1d028d4c8fc15473dc10473c38df162daa7b41/src%2Ftest%2Fui-fulldeps%2Froman-numerals-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Froman-numerals-macro.stderr?ref=5a1d028d4c8fc15473dc10473c38df162daa7b41", "patch": "@@ -1,8 +0,0 @@\n-warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n-  --> $DIR/roman-numerals-macro.rs:6:1\n-   |\n-LL | #![plugin(roman_numerals)]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: may be removed in a future compiler version\n-   |\n-   = note: `#[warn(deprecated)]` on by default\n-"}]}