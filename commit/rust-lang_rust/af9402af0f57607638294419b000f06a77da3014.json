{"sha": "af9402af0f57607638294419b000f06a77da3014", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmOTQwMmFmMGY1NzYwNzYzODI5NDQxOWIwMDBmMDZhNzdkYTMwMTQ=", "commit": {"author": {"name": "LingMan", "email": "LingMan@users.noreply.github.com", "date": "2020-12-08T01:40:14Z"}, "committer": {"name": "LingMan", "email": "LingMan@users.noreply.github.com", "date": "2020-12-08T01:40:14Z"}, "message": "Replace simple `if let` constructs with Option::map\n\nReplaces a few constructs of the form\n\nif let Some(x) = var {\n    Some(...)\n} else {\n    None\n}\n\nwith calls to Option::map.", "tree": {"sha": "fe7378af575afacf2068bade0a11c33a35ee1efb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe7378af575afacf2068bade0a11c33a35ee1efb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af9402af0f57607638294419b000f06a77da3014", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af9402af0f57607638294419b000f06a77da3014", "html_url": "https://github.com/rust-lang/rust/commit/af9402af0f57607638294419b000f06a77da3014", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af9402af0f57607638294419b000f06a77da3014/comments", "author": {"login": "LingMan", "id": 18645382, "node_id": "MDQ6VXNlcjE4NjQ1Mzgy", "avatar_url": "https://avatars.githubusercontent.com/u/18645382?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LingMan", "html_url": "https://github.com/LingMan", "followers_url": "https://api.github.com/users/LingMan/followers", "following_url": "https://api.github.com/users/LingMan/following{/other_user}", "gists_url": "https://api.github.com/users/LingMan/gists{/gist_id}", "starred_url": "https://api.github.com/users/LingMan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LingMan/subscriptions", "organizations_url": "https://api.github.com/users/LingMan/orgs", "repos_url": "https://api.github.com/users/LingMan/repos", "events_url": "https://api.github.com/users/LingMan/events{/privacy}", "received_events_url": "https://api.github.com/users/LingMan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LingMan", "id": 18645382, "node_id": "MDQ6VXNlcjE4NjQ1Mzgy", "avatar_url": "https://avatars.githubusercontent.com/u/18645382?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LingMan", "html_url": "https://github.com/LingMan", "followers_url": "https://api.github.com/users/LingMan/followers", "following_url": "https://api.github.com/users/LingMan/following{/other_user}", "gists_url": "https://api.github.com/users/LingMan/gists{/gist_id}", "starred_url": "https://api.github.com/users/LingMan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LingMan/subscriptions", "organizations_url": "https://api.github.com/users/LingMan/orgs", "repos_url": "https://api.github.com/users/LingMan/repos", "events_url": "https://api.github.com/users/LingMan/events{/privacy}", "received_events_url": "https://api.github.com/users/LingMan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d6705aa5abffe94c83bf09af8c3ba3c599845fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d6705aa5abffe94c83bf09af8c3ba3c599845fc", "html_url": "https://github.com/rust-lang/rust/commit/3d6705aa5abffe94c83bf09af8c3ba3c599845fc"}], "stats": {"total": 54, "additions": 13, "deletions": 41}, "files": [{"sha": "763e4d651a2e955024b0eb0407f61a030607187a", "filename": "compiler/rustc_typeck/src/check/demand.rs", "status": "modified", "additions": 13, "deletions": 41, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/af9402af0f57607638294419b000f06a77da3014/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af9402af0f57607638294419b000f06a77da3014/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs?ref=af9402af0f57607638294419b000f06a77da3014", "patch": "@@ -361,11 +361,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     }\n \n     fn replace_prefix(&self, s: &str, old: &str, new: &str) -> Option<String> {\n-        if let Some(stripped) = s.strip_prefix(old) {\n-            Some(new.to_string() + stripped)\n-        } else {\n-            None\n-        }\n+        s.strip_prefix(old).map(|stripped| new.to_string() + stripped)\n     }\n \n     /// This function is used to determine potential \"simple\" improvements or users' errors and\n@@ -587,47 +583,23 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                 hir::Mutability::Mut => {\n                                     let new_prefix = \"&mut \".to_owned() + derefs;\n                                     match mutbl_a {\n-                                        hir::Mutability::Mut => {\n-                                            if let Some(s) =\n-                                                self.replace_prefix(&src, \"&mut \", &new_prefix)\n-                                            {\n-                                                Some((s, Applicability::MachineApplicable))\n-                                            } else {\n-                                                None\n-                                            }\n-                                        }\n-                                        hir::Mutability::Not => {\n-                                            if let Some(s) =\n-                                                self.replace_prefix(&src, \"&\", &new_prefix)\n-                                            {\n-                                                Some((s, Applicability::Unspecified))\n-                                            } else {\n-                                                None\n-                                            }\n-                                        }\n+                                        hir::Mutability::Mut => self\n+                                            .replace_prefix(&src, \"&mut \", &new_prefix)\n+                                            .map(|s| (s, Applicability::MachineApplicable)),\n+                                        hir::Mutability::Not => self\n+                                            .replace_prefix(&src, \"&\", &new_prefix)\n+                                            .map(|s| (s, Applicability::Unspecified)),\n                                     }\n                                 }\n                                 hir::Mutability::Not => {\n                                     let new_prefix = \"&\".to_owned() + derefs;\n                                     match mutbl_a {\n-                                        hir::Mutability::Mut => {\n-                                            if let Some(s) =\n-                                                self.replace_prefix(&src, \"&mut \", &new_prefix)\n-                                            {\n-                                                Some((s, Applicability::MachineApplicable))\n-                                            } else {\n-                                                None\n-                                            }\n-                                        }\n-                                        hir::Mutability::Not => {\n-                                            if let Some(s) =\n-                                                self.replace_prefix(&src, \"&\", &new_prefix)\n-                                            {\n-                                                Some((s, Applicability::MachineApplicable))\n-                                            } else {\n-                                                None\n-                                            }\n-                                        }\n+                                        hir::Mutability::Mut => self\n+                                            .replace_prefix(&src, \"&mut \", &new_prefix)\n+                                            .map(|s| (s, Applicability::MachineApplicable)),\n+                                        hir::Mutability::Not => self\n+                                            .replace_prefix(&src, \"&\", &new_prefix)\n+                                            .map(|s| (s, Applicability::MachineApplicable)),\n                                     }\n                                 }\n                             } {"}]}