{"sha": "5be8bf1de710338c464a8c107f959ebae4c78a6a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViZThiZjFkZTcxMDMzOGM0NjRhOGMxMDdmOTU5ZWJhZTRjNzhhNmE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-05-18T04:53:49Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-05-18T17:38:18Z"}, "message": "use -Z to distinguish internal debugging options", "tree": {"sha": "53514c24dfe340ea9b4ac601bac4b1db57e366ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/53514c24dfe340ea9b4ac601bac4b1db57e366ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5be8bf1de710338c464a8c107f959ebae4c78a6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5be8bf1de710338c464a8c107f959ebae4c78a6a", "html_url": "https://github.com/rust-lang/rust/commit/5be8bf1de710338c464a8c107f959ebae4c78a6a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5be8bf1de710338c464a8c107f959ebae4c78a6a/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0eef34bacb3cfe0c6bee9946ec1d85444fb7424a", "url": "https://api.github.com/repos/rust-lang/rust/commits/0eef34bacb3cfe0c6bee9946ec1d85444fb7424a", "html_url": "https://github.com/rust-lang/rust/commit/0eef34bacb3cfe0c6bee9946ec1d85444fb7424a"}], "stats": {"total": 175, "additions": 98, "deletions": 77}, "files": [{"sha": "06288dede01d70e80cd9aa7799fcddefe11a2513", "filename": "Makefile.in", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5be8bf1de710338c464a8c107f959ebae4c78a6a/Makefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/5be8bf1de710338c464a8c107f959ebae4c78a6a/Makefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Makefile.in?ref=5be8bf1de710338c464a8c107f959ebae4c78a6a", "patch": "@@ -91,14 +91,11 @@ endif\n ifdef SAVE_TEMPS\n   CFG_RUSTC_FLAGS += --save-temps\n endif\n-ifdef ENFORCE_MUT_VARS\n-  CFG_RUSTC_FLAGS += --enforce-mut-vars\n-endif\n ifdef TIME_PASSES\n-  CFG_RUSTC_FLAGS += --time-passes\n+  CFG_RUSTC_FLAGS += -Z time-passes\n endif\n ifdef TIME_LLVM_PASSES\n-  CFG_RUSTC_FLAGS += --time-llvm-passes\n+  CFG_RUSTC_FLAGS += -Z time-llvm-passes\n endif\n \n # platform-specific auto-configuration"}, {"sha": "bac4e14fcd45a483bbbf62eb38fbe8081a694f61", "filename": "src/rustc/back/link.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5be8bf1de710338c464a8c107f959ebae4c78a6a/src%2Frustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5be8bf1de710338c464a8c107f959ebae4c78a6a/src%2Frustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fback%2Flink.rs?ref=5be8bf1de710338c464a8c107f959ebae4c78a6a", "patch": "@@ -53,7 +53,7 @@ mod write {\n \n     fn run_passes(sess: session, llmod: ModuleRef, output: str) {\n         let opts = sess.opts;\n-        if opts.time_llvm_passes { llvm::LLVMRustEnableTimePasses(); }\n+        if sess.time_llvm_passes() { llvm::LLVMRustEnableTimePasses(); }\n         let mut pm = mk_pass_manager();\n         let td = mk_target_data(\n             sess.targ_cfg.target_strs.data_layout);\n@@ -84,7 +84,7 @@ mod write {\n               }\n             }\n         }\n-        if opts.verify { llvm::LLVMAddVerifierPass(pm.llpm); }\n+        if !sess.no_verify() { llvm::LLVMAddVerifierPass(pm.llpm); }\n         // FIXME: This is mostly a copy of the bits of opt's -O2 that are\n         // available in the C api.\n         // FIXME2: We might want to add optimization levels like -O1, -O2,\n@@ -125,7 +125,7 @@ mod write {\n \n             llvm::LLVMPassManagerBuilderDispose(MPMB);\n         }\n-        if opts.verify { llvm::LLVMAddVerifierPass(pm.llpm); }\n+        if !sess.no_verify() { llvm::LLVMAddVerifierPass(pm.llpm); }\n         if is_object_or_assembly_or_exe(opts.output_type) {\n             let LLVMOptNone       = 0 as c_int; // -O0\n             let LLVMOptLess       = 1 as c_int; // -O1\n@@ -214,7 +214,7 @@ mod write {\n             // Clean up and return\n \n             llvm::LLVMDisposeModule(llmod);\n-            if opts.time_llvm_passes { llvm::LLVMRustPrintPassTimings(); }\n+            if sess.time_llvm_passes() { llvm::LLVMRustPrintPassTimings(); }\n             ret;\n         }\n \n@@ -231,7 +231,7 @@ mod write {\n         }\n \n         llvm::LLVMDisposeModule(llmod);\n-        if opts.time_llvm_passes { llvm::LLVMRustPrintPassTimings(); }\n+        if sess.time_llvm_passes() { llvm::LLVMRustPrintPassTimings(); }\n     }\n }\n "}, {"sha": "ad669c1a4e4d5d106a92cc5d570628364af730a4", "filename": "src/rustc/driver/driver.rs", "status": "modified", "additions": 22, "deletions": 23, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/5be8bf1de710338c464a8c107f959ebae4c78a6a/src%2Frustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5be8bf1de710338c464a8c107f959ebae4c78a6a/src%2Frustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fdriver%2Fdriver.rs?ref=5be8bf1de710338c464a8c107f959ebae4c78a6a", "patch": "@@ -129,7 +129,7 @@ fn compile_upto(sess: session, cfg: ast::crate_cfg,\n                 input: input, upto: compile_upto,\n                 outputs: option<output_filenames>)\n     -> {crate: @ast::crate, tcx: option<ty::ctxt>} {\n-    let time_passes = sess.opts.time_passes;\n+    let time_passes = sess.time_passes();\n     let mut crate = time(time_passes, \"parsing\",\n                          bind parse_input(sess, cfg, input));\n     if upto == cu_parse { ret {crate: crate, tcx: none}; }\n@@ -404,6 +404,21 @@ fn build_session_options(match: getopts::match,\n         }\n     };\n \n+    let mut debugging_opts = 0u;\n+    let debug_flags = getopts::opt_strs(match, \"Z\");\n+    let debug_map = session::debugging_opts_map();\n+    for debug_flags.each { |debug_flag|\n+        let mut this_bit = 0u;\n+        for debug_map.each { |pair|\n+            let (name, _, bit) = pair;\n+            if name == debug_flag { this_bit = bit; break; }\n+        }\n+        if this_bit == 0u {\n+            early_error(demitter, #fmt(\"unknown debug flag: %s\", debug_flag))\n+        }\n+        debugging_opts |= this_bit;\n+    }\n+\n     let output_type =\n         if parse_only || no_trans {\n             link::output_type_none\n@@ -416,18 +431,11 @@ fn build_session_options(match: getopts::match,\n         } else if opt_present(match, \"emit-llvm\") {\n             link::output_type_bitcode\n         } else { link::output_type_exe };\n-    let verify = !opt_present(match, \"no-verify\");\n-    let save_temps = opt_present(match, \"save-temps\");\n     let extra_debuginfo = opt_present(match, \"xg\");\n     let debuginfo = opt_present(match, \"g\") || extra_debuginfo;\n-    let stats = opt_present(match, \"stats\");\n-    let time_passes = opt_present(match, \"time-passes\");\n-    let time_llvm_passes = opt_present(match, \"time-llvm-passes\");\n-    let count_llvm_insns = opt_present(match, \"count-llvm-insns\");\n     let sysroot_opt = getopts::opt_maybe_str(match, \"sysroot\");\n     let target_opt = getopts::opt_maybe_str(match, \"target\");\n-    let mut no_asm_comments = getopts::opt_present(match, \"no-asm-comments\");\n-    let debug_rustc = getopts::opt_present(match, \"debug-rustc\");\n+    let save_temps = getopts::opt_present(match, \"save-temps\");\n     let borrowck = alt getopts::opt_maybe_str(match, \"borrowck\") {\n       none { 0u }\n       some(\"warn\") { 1u }\n@@ -439,7 +447,7 @@ fn build_session_options(match: getopts::match,\n     alt output_type {\n       // unless we're emitting huamn-readable assembly, omit comments.\n       link::output_type_llvm_assembly | link::output_type_assembly {}\n-      _ { no_asm_comments = true; }\n+      _ { debugging_opts |= session::no_asm_comments; }\n     }\n     let opt_level: uint =\n         if opt_present(match, \"O\") {\n@@ -474,13 +482,8 @@ fn build_session_options(match: getopts::match,\n           optimize: opt_level,\n           debuginfo: debuginfo,\n           extra_debuginfo: extra_debuginfo,\n-          verify: verify,\n           lint_opts: lint_opts,\n           save_temps: save_temps,\n-          stats: stats,\n-          time_passes: time_passes,\n-          count_llvm_insns: count_llvm_insns,\n-          time_llvm_passes: time_llvm_passes,\n           output_type: output_type,\n           addl_lib_search_paths: addl_lib_search_paths,\n           maybe_sysroot: sysroot_opt,\n@@ -489,8 +492,7 @@ fn build_session_options(match: getopts::match,\n           test: test,\n           parse_only: parse_only,\n           no_trans: no_trans,\n-          no_asm_comments: no_asm_comments,\n-          debug_rustc: debug_rustc,\n+          debugging_opts: debugging_opts,\n           borrowck: borrowck};\n     ret sopts;\n }\n@@ -559,17 +561,14 @@ fn opts() -> [getopts::opt] {\n          optflag(\"O\"), optopt(\"opt-level\"), optmulti(\"L\"), optflag(\"S\"),\n          optopt(\"o\"), optopt(\"out-dir\"), optflag(\"xg\"),\n          optflag(\"c\"), optflag(\"g\"), optflag(\"save-temps\"),\n-         optopt(\"sysroot\"), optopt(\"target\"), optflag(\"stats\"),\n-         optflag(\"time-passes\"), optflag(\"time-llvm-passes\"),\n-         optflag(\"count-llvm-insns\"),\n-         optflag(\"no-verify\"),\n+         optopt(\"sysroot\"), optopt(\"target\"),\n \n          optmulti(\"W\"), optmulti(\"warn\"),\n \n+         optmulti(\"Z\"),\n+\n          optmulti(\"cfg\"), optflag(\"test\"),\n          optflag(\"lib\"), optflag(\"bin\"), optflag(\"static\"), optflag(\"gc\"),\n-         optflag(\"no-asm-comments\"),\n-         optflag(\"debug-rustc\"),\n          optopt(\"borrowck\")];\n }\n "}, {"sha": "9826d65270a5b67db905755b974f8f177d9a2910", "filename": "src/rustc/driver/rustc.rs", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/5be8bf1de710338c464a8c107f959ebae4c78a6a/src%2Frustc%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5be8bf1de710338c464a8c107f959ebae4c78a6a/src%2Frustc%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fdriver%2Frustc.rs?ref=5be8bf1de710338c464a8c107f959ebae4c78a6a", "patch": "@@ -14,7 +14,7 @@ import std::map::hashmap;\n import getopts::{opt_present};\n import rustc::driver::driver::*;\n import syntax::codemap;\n-import rustc::driver::diagnostic;\n+import rustc::driver::{diagnostic, session};\n import rustc::middle::lint;\n import io::reader_util;\n \n@@ -41,10 +41,7 @@ Options:\n     -L <path>          Add a directory to the library search path\n     --lib              Compile a library crate\n     --ls               List the symbols defined by a compiled library crate\n-    --no-asm-comments  Do not add comments into the assembly source\n     --no-trans         Run all passes except translation; no output\n-    --no-verify        Suppress LLVM verification step (slight speedup)\n-                       (see http://llvm.org/docs/Passes.html for detail)\n     -O                 Equivalent to --opt-level=2\n     -o <filename>      Write output to <filename>\n     --opt-level <lvl>  Optimize with possible levels 0-3\n@@ -66,18 +63,13 @@ Options:\n                        (default: host triple)\n                        (see http://sources.redhat.com/autobook/autobook/\n                        autobook_17.html for detail)\n-    --debug-rustc      enables different output that helps in debugging rustc,\n-                       but may be less clear for normal use\n \n     -W <foo>           enable warning <foo>\n     -W no-<foo>        disable warning <foo>\n     -W err-<foo>       enable warning <foo> as an error\n-\n     -W help            Print available warnings and default settings\n \n-    --time-passes      Time the individual phases of the compiler\n-    --time-llvm-passes Time the individual phases of the LLVM backend\n-    --count-llvm-insns Count and categorize generated LLVM instructions\n+    -Z help            list internal options for debugging rustc\n \n     -v --version       Print version info and exit\n \");\n@@ -107,6 +99,14 @@ fn describe_warnings() {\n     io::println(\"\");\n }\n \n+fn describe_debug_flags() {\n+    io::println(#fmt(\"\\nAvailable debug options:\\n\"));\n+    for session::debugging_opts_map().each { |pair|\n+        let (name, desc, _) = pair;\n+        io::println(#fmt(\"    -Z%-20s -- %s\", name, desc));\n+    }\n+}\n+\n fn run_compiler(args: [str], demitter: diagnostic::emitter) {\n     // Don't display log spew by default. Can override with RUST_LOG.\n     logging::console_off();\n@@ -136,6 +136,11 @@ fn run_compiler(args: [str], demitter: diagnostic::emitter) {\n         ret;\n     }\n \n+    if getopts::opt_strs(match, \"Z\").contains(\"help\") {\n+        describe_debug_flags();\n+        ret;\n+    }\n+\n     if opt_present(match, \"v\") || opt_present(match, \"version\") {\n         version(binary);\n         ret;"}, {"sha": "d6f82059771ba1789202b52dbad8ee72c4c434d9", "filename": "src/rustc/driver/session.rs", "status": "modified", "additions": 33, "deletions": 14, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/5be8bf1de710338c464a8c107f959ebae4c78a6a/src%2Frustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5be8bf1de710338c464a8c107f959ebae4c78a6a/src%2Frustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fdriver%2Fsession.rs?ref=5be8bf1de710338c464a8c107f959ebae4c78a6a", "patch": "@@ -23,6 +23,26 @@ type config =\n      uint_type: uint_ty,\n      float_type: float_ty};\n \n+const ppregions: uint = 1u;\n+const time_passes: uint = 2u;\n+const count_llvm_insns: uint = 4u;\n+const time_llvm_passes: uint = 8u;\n+const stats: uint = 16u;\n+const no_asm_comments: uint = 32u;\n+const no_verify: uint = 64u;\n+\n+fn debugging_opts_map() -> [(str, str, uint)] {\n+    [(\"ppregions\", \"prettyprint regions with \\\n+                    internal repr details\", ppregions),\n+     (\"time-passes\", \"measure time of each rustc pass\", time_passes),\n+     (\"count-llvm-insns\", \"count where LLVM \\\n+                           instrs originate\", count_llvm_insns),\n+     (\"time-llvm-passes\", \"measure time of each LLVM pass\", time_llvm_passes),\n+     (\"stats\", \"gather trans statistics\", stats),\n+     (\"no-asm-comments\", \"omit comments when using -S\", no_asm_comments),\n+     (\"no-verify\", \"skip LLVM verification\", no_verify)]\n+}\n+\n type options =\n     // The crate config requested for the session, which may be combined\n     // with additional crate configurations during the compile process\n@@ -31,13 +51,8 @@ type options =\n      optimize: uint,\n      debuginfo: bool,\n      extra_debuginfo: bool,\n-     verify: bool,\n      lint_opts: [(lint::lint, lint::level)],\n      save_temps: bool,\n-     stats: bool,\n-     time_passes: bool,\n-     count_llvm_insns: bool,\n-     time_llvm_passes: bool,\n      output_type: back::link::output_type,\n      addl_lib_search_paths: [str],\n      maybe_sysroot: option<str>,\n@@ -46,8 +61,8 @@ type options =\n      test: bool,\n      parse_only: bool,\n      no_trans: bool,\n-     no_asm_comments: bool,\n-     debug_rustc: bool,\n+\n+     debugging_opts: uint,\n \n      // temporary hack: 0=off,1=warn,2=err --> if 2, alias is disabled\n      borrowck: uint,\n@@ -116,6 +131,16 @@ impl session for session {\n     fn diagnostic() -> diagnostic::span_handler {\n         self.span_diagnostic\n     }\n+    fn debugging_opt(opt: uint) -> bool {\n+        (self.opts.debugging_opts & opt) != 0u\n+    }\n+    fn ppregions() -> bool { self.debugging_opt(ppregions) }\n+    fn time_passes() -> bool { self.debugging_opt(time_passes) }\n+    fn count_llvm_insns() -> bool { self.debugging_opt(count_llvm_insns) }\n+    fn time_llvm_passes() -> bool { self.debugging_opt(time_llvm_passes) }\n+    fn stats() -> bool { self.debugging_opt(stats) }\n+    fn no_asm_comments() -> bool { self.debugging_opt(no_asm_comments) }\n+    fn no_verify() -> bool { self.debugging_opt(no_verify) }\n }\n \n #[doc = \"Some reasonable defaults\"]\n@@ -126,13 +151,8 @@ fn basic_options() -> @options {\n         optimize: 0u,\n         debuginfo: false,\n         extra_debuginfo: false,\n-        verify: false,\n         lint_opts: [],\n         save_temps: false,\n-        stats: false,\n-        time_passes: false,\n-        count_llvm_insns: false,\n-        time_llvm_passes: false,\n         output_type: link::output_type_exe,\n         addl_lib_search_paths: [],\n         maybe_sysroot: none,\n@@ -141,8 +161,7 @@ fn basic_options() -> @options {\n         test: false,\n         parse_only: false,\n         no_trans: false,\n-        no_asm_comments: false,\n-        debug_rustc: false,\n+        debugging_opts: 0u,\n         borrowck: 0u,\n     }\n }"}, {"sha": "73cc03b96c36ce113efb41e10a5242e196569c41", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5be8bf1de710338c464a8c107f959ebae4c78a6a/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5be8bf1de710338c464a8c107f959ebae4c78a6a/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=5be8bf1de710338c464a8c107f959ebae4c78a6a", "patch": "@@ -82,15 +82,15 @@ fn dup_for_join(dest: dest) -> dest {\n }\n \n resource icx_popper(ccx: @crate_ctxt) {\n-    if (ccx.sess.opts.count_llvm_insns) {\n+    if ccx.sess.count_llvm_insns() {\n         vec::pop(*ccx.stats.llvm_insn_ctxt);\n     }\n }\n \n impl ccx_icx for @crate_ctxt {\n     fn insn_ctxt(s: str) -> icx_popper {\n         #debug(\"new insn_ctxt: %s\", s);\n-        if (self.sess.opts.count_llvm_insns) {\n+        if self.sess.count_llvm_insns() {\n             *self.stats.llvm_insn_ctxt += [s];\n         }\n         icx_popper(self)\n@@ -522,7 +522,7 @@ fn make_generic_glue(ccx: @crate_ctxt, t: ty::t, llfn: ValueRef,\n                      helper: glue_helper, name: str)\n     -> ValueRef {\n     let _icx = ccx.insn_ctxt(\"make_generic_glue\");\n-    if !ccx.sess.opts.stats {\n+    if !ccx.sess.stats() {\n         ret make_generic_glue_inner(ccx, t, llfn, helper);\n     }\n \n@@ -1698,7 +1698,7 @@ fn autoderef(cx: block, e_id: ast::node_id,\n         alt cx.ccx().maps.root_map.find({id:e_id, derefs:derefs}) {\n           none {}\n           some(scope_id) {\n-            if !cx.sess().opts.no_asm_comments {\n+            if !cx.sess().no_asm_comments() {\n                 add_comment(cx, #fmt[\"preserving until end of scope %d\",\n                                      scope_id]);\n             }\n@@ -2495,7 +2495,7 @@ fn trans_lval(cx: block, e: @ast::expr) -> lval_result {\n       some(scope_id) {\n         let lv = unrooted(cx, e);\n \n-        if !cx.sess().opts.no_asm_comments {\n+        if !cx.sess().no_asm_comments() {\n             add_comment(cx, #fmt[\"preserving until end of scope %d\",\n                                  scope_id]);\n         }\n@@ -3336,7 +3336,7 @@ fn trans_expr(bcx: block, e: @ast::expr, dest: dest) -> block {\n         let root_loc = alloca(bcx, type_of(bcx.ccx(), ty));\n         let bcx = unrooted(bcx, e, save_in(root_loc));\n \n-        if !bcx.sess().opts.no_asm_comments {\n+        if !bcx.sess().no_asm_comments() {\n             add_comment(bcx, #fmt[\"preserving until end of scope %d\",\n                                   scope_id]);\n         }\n@@ -3889,7 +3889,7 @@ fn trans_stmt(cx: block, s: ast::stmt) -> block {\n     let _icx = cx.insn_ctxt(\"trans_stmt\");\n     #debug[\"trans_stmt(%s)\", stmt_to_str(s)];\n \n-    if (!cx.sess().opts.no_asm_comments) {\n+    if !cx.sess().no_asm_comments() {\n         add_span_comment(cx, s.span, stmt_to_str(s));\n     }\n \n@@ -4035,7 +4035,7 @@ fn cleanup_and_leave(bcx: block, upto: option<BasicBlockRef>,\n     loop {\n         #debug[\"cleanup_and_leave: leaving %s\", cur.to_str()];\n \n-        if !bcx.sess().opts.no_asm_comments {\n+        if !bcx.sess().no_asm_comments() {\n             add_comment(bcx, #fmt[\"cleanup_and_leave(%s)\", cur.to_str()]);\n         }\n \n@@ -4386,7 +4386,7 @@ fn trans_fn(ccx: @crate_ctxt,\n             ty_self: self_arg,\n             param_substs: option<param_substs>,\n             id: ast::node_id) {\n-    let do_time = ccx.sess.opts.stats;\n+    let do_time = ccx.sess.stats();\n     let start = if do_time { time::get_time() }\n                 else { {sec: 0i64, nsec: 0i32} };\n     let _icx = ccx.insn_ctxt(\"trans_fn\");\n@@ -5397,7 +5397,7 @@ fn trans_crate(sess: session::session, crate: @ast::crate, tcx: ty::ctxt,\n \n     // Translate the metadata.\n     write_metadata(ccx, crate);\n-    if ccx.sess.opts.stats {\n+    if ccx.sess.stats() {\n         io::println(\"--- trans stats ---\");\n         io::println(#fmt(\"n_static_tydescs: %u\",\n                          ccx.stats.n_static_tydescs));\n@@ -5415,7 +5415,7 @@ fn trans_crate(sess: session::session, crate: @ast::crate, tcx: ty::ctxt,\n         }\n     }\n \n-    if ccx.sess.opts.count_llvm_insns {\n+    if ccx.sess.count_llvm_insns() {\n         for ccx.stats.llvm_insns.each { |k, v|\n             io::println(#fmt(\"%-7u %s\", v, k));\n         }"}, {"sha": "a257cdcf8a7ea29c7a917cc2e9ed776312c5d306", "filename": "src/rustc/middle/trans/build.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5be8bf1de710338c464a8c107f959ebae4c78a6a/src%2Frustc%2Fmiddle%2Ftrans%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5be8bf1de710338c464a8c107f959ebae4c78a6a/src%2Frustc%2Fmiddle%2Ftrans%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbuild.rs?ref=5be8bf1de710338c464a8c107f959ebae4c78a6a", "patch": "@@ -7,6 +7,7 @@ import lib::llvm::{ValueRef, TypeRef, BasicBlockRef, BuilderRef, ModuleRef};\n import lib::llvm::{Opcode, IntPredicate, RealPredicate, True, False,\n         CallConv, TypeKind};\n import common::*;\n+import driver::session::session;\n \n fn B(cx: block) -> BuilderRef {\n     let b = *cx.fcx.ccx.builder;\n@@ -15,7 +16,7 @@ fn B(cx: block) -> BuilderRef {\n }\n \n fn count_insn(cx: block, category: str) {\n-    if (cx.ccx().sess.opts.count_llvm_insns) {\n+    if cx.ccx().sess.count_llvm_insns() {\n \n         let h = cx.ccx().stats.llvm_insns;\n         let v = cx.ccx().stats.llvm_insn_ctxt;\n@@ -640,7 +641,7 @@ fn _UndefReturn(cx: block, Fn: ValueRef) -> ValueRef {\n \n fn add_span_comment(bcx: block, sp: span, text: str) {\n     let ccx = bcx.ccx();\n-    if !ccx.sess.opts.no_asm_comments {\n+    if !ccx.sess.no_asm_comments() {\n         let s = text + \" (\" + codemap::span_to_str(sp, ccx.sess.codemap)\n             + \")\";\n         log(debug, s);\n@@ -650,7 +651,7 @@ fn add_span_comment(bcx: block, sp: span, text: str) {\n \n fn add_comment(bcx: block, text: str) {\n     let ccx = bcx.ccx();\n-    if (!ccx.sess.opts.no_asm_comments) {\n+    if !ccx.sess.no_asm_comments() {\n         let sanitized = str::replace(text, \"$\", \"\");\n         let comment_text = \"# \" + sanitized;\n         let asm = str::as_c_str(comment_text, {|c|"}, {"sha": "e5d471a9ae1e8b544d10a5b1485ca536b09fbea2", "filename": "src/rustc/middle/trans/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5be8bf1de710338c464a8c107f959ebae4c78a6a/src%2Frustc%2Fmiddle%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5be8bf1de710338c464a8c107f959ebae4c78a6a/src%2Frustc%2Fmiddle%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fclosure.rs?ref=5be8bf1de710338c464a8c107f959ebae4c78a6a", "patch": "@@ -237,7 +237,7 @@ fn store_environment(bcx: block,\n     vec::iteri(bound_values) { |i, bv|\n         #debug[\"Copy %s into closure\", ev_to_str(ccx, bv)];\n \n-        if (!ccx.sess.opts.no_asm_comments) {\n+        if !ccx.sess.no_asm_comments() {\n             add_comment(bcx, #fmt(\"Copy %s into closure\",\n                                   ev_to_str(ccx, bv)));\n         }"}, {"sha": "a4fabfb9ad1a41ba84ebe1a35b562d829731c8f4", "filename": "src/rustc/util/ppaux.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5be8bf1de710338c464a8c107f959ebae4c78a6a/src%2Frustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5be8bf1de710338c464a8c107f959ebae4c78a6a/src%2Frustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Futil%2Fppaux.rs?ref=5be8bf1de710338c464a8c107f959ebae4c78a6a", "patch": "@@ -12,10 +12,10 @@ import driver::session::session;\n \n fn bound_region_to_str(cx: ctxt, br: bound_region) -> str {\n     alt br {\n-      br_anon                             { \"&\" }\n-      br_named(str)                       { #fmt[\"&%s\", str] }\n-      br_self if cx.sess.opts.debug_rustc { \"&<self>\" }\n-      br_self                             { \"&self\" }\n+      br_anon                        { \"&\" }\n+      br_named(str)                  { #fmt[\"&%s\", str] }\n+      br_self if cx.sess.ppregions() { \"&<self>\" }\n+      br_self                        { \"&self\" }\n     }\n }\n \n@@ -51,7 +51,7 @@ fn region_to_str(cx: ctxt, region: region) -> str {\n       re_scope(node_id) { #fmt[\"&%s\", re_scope_id_to_str(cx, node_id)] }\n       re_bound(br) { bound_region_to_str(cx, br) }\n       re_free(id, br) {\n-        if cx.sess.opts.debug_rustc {\n+        if cx.sess.ppregions() {\n             // For debugging, this version is sometimes helpful:\n             #fmt[\"{%d} %s\", id, bound_region_to_str(cx, br)]\n         } else {"}]}