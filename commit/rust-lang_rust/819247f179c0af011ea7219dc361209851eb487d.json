{"sha": "819247f179c0af011ea7219dc361209851eb487d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxOTI0N2YxNzljMGFmMDExZWE3MjE5ZGMzNjEyMDk4NTFlYjQ4N2Q=", "commit": {"author": {"name": "\u00d6mer Sinan A\u011facan", "email": "omeragacan@gmail.com", "date": "2021-03-26T08:23:51Z"}, "committer": {"name": "\u00d6mer Sinan A\u011facan", "email": "omeragacan@gmail.com", "date": "2021-03-26T08:23:51Z"}, "message": "Update char::escape_debug_ext to handle different escapes in strings vs. chars\n\nFixes #83046\n\nThe program\n\n    fn main() {\n        println!(\"{:?}\", '\"');\n        println!(\"{:?}\", \"'\");\n    }\n\nwould previously print\n\n    '\\\"'\n    \"\\'\"\n\nWith this patch it now prints:\n\n    '\"'\n    \"'\"", "tree": {"sha": "0f618628aaebca74325a1e12d08dc997a9ccc12c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f618628aaebca74325a1e12d08dc997a9ccc12c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/819247f179c0af011ea7219dc361209851eb487d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/819247f179c0af011ea7219dc361209851eb487d", "html_url": "https://github.com/rust-lang/rust/commit/819247f179c0af011ea7219dc361209851eb487d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/819247f179c0af011ea7219dc361209851eb487d/comments", "author": {"login": "osa1", "id": 448274, "node_id": "MDQ6VXNlcjQ0ODI3NA==", "avatar_url": "https://avatars.githubusercontent.com/u/448274?v=4", "gravatar_id": "", "url": "https://api.github.com/users/osa1", "html_url": "https://github.com/osa1", "followers_url": "https://api.github.com/users/osa1/followers", "following_url": "https://api.github.com/users/osa1/following{/other_user}", "gists_url": "https://api.github.com/users/osa1/gists{/gist_id}", "starred_url": "https://api.github.com/users/osa1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/osa1/subscriptions", "organizations_url": "https://api.github.com/users/osa1/orgs", "repos_url": "https://api.github.com/users/osa1/repos", "events_url": "https://api.github.com/users/osa1/events{/privacy}", "received_events_url": "https://api.github.com/users/osa1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "osa1", "id": 448274, "node_id": "MDQ6VXNlcjQ0ODI3NA==", "avatar_url": "https://avatars.githubusercontent.com/u/448274?v=4", "gravatar_id": "", "url": "https://api.github.com/users/osa1", "html_url": "https://github.com/osa1", "followers_url": "https://api.github.com/users/osa1/followers", "following_url": "https://api.github.com/users/osa1/following{/other_user}", "gists_url": "https://api.github.com/users/osa1/gists{/gist_id}", "starred_url": "https://api.github.com/users/osa1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/osa1/subscriptions", "organizations_url": "https://api.github.com/users/osa1/orgs", "repos_url": "https://api.github.com/users/osa1/repos", "events_url": "https://api.github.com/users/osa1/events{/privacy}", "received_events_url": "https://api.github.com/users/osa1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7637fd588bfee93d627474a18dcbf11a81803665", "url": "https://api.github.com/repos/rust-lang/rust/commits/7637fd588bfee93d627474a18dcbf11a81803665", "html_url": "https://github.com/rust-lang/rust/commit/7637fd588bfee93d627474a18dcbf11a81803665"}], "stats": {"total": 73, "additions": 54, "deletions": 19}, "files": [{"sha": "a121c54428ca428760fd4c737406301cdfb354dc", "filename": "library/alloc/tests/fmt.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/819247f179c0af011ea7219dc361209851eb487d/library%2Falloc%2Ftests%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/819247f179c0af011ea7219dc361209851eb487d/library%2Falloc%2Ftests%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Ffmt.rs?ref=819247f179c0af011ea7219dc361209851eb487d", "patch": "@@ -68,10 +68,7 @@ fn test_format_macro_interface() {\n     t!(format!(\"{:?}\", 10_usize), \"10\");\n     t!(format!(\"{:?}\", \"true\"), \"\\\"true\\\"\");\n     t!(format!(\"{:?}\", \"foo\\nbar\"), \"\\\"foo\\\\nbar\\\"\");\n-    t!(\n-        format!(\"{:?}\", \"foo\\n\\\"bar\\\"\\r\\n\\'baz\\'\\t\\\\qux\\\\\"),\n-        r#\"\"foo\\n\\\"bar\\\"\\r\\n\\'baz\\'\\t\\\\qux\\\\\"\"#\n-    );\n+    t!(format!(\"{:?}\", \"foo\\n\\\"bar\\\"\\r\\n\\'baz\\'\\t\\\\qux\\\\\"), r#\"\"foo\\n\\\"bar\\\"\\r\\n'baz'\\t\\\\qux\\\\\"\"#);\n     t!(format!(\"{:?}\", \"foo\\0bar\\x01baz\\u{7f}q\\u{75}x\"), r#\"\"foo\\u{0}bar\\u{1}baz\\u{7f}qux\"\"#);\n     t!(format!(\"{:o}\", 10_usize), \"12\");\n     t!(format!(\"{:x}\", 10_usize), \"a\");"}, {"sha": "dcab2cd2d9db1d38c4fdf6fa529019a097489881", "filename": "library/core/src/char/methods.rs", "status": "modified", "additions": 29, "deletions": 6, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/819247f179c0af011ea7219dc361209851eb487d/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/819247f179c0af011ea7219dc361209851eb487d/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs?ref=819247f179c0af011ea7219dc361209851eb487d", "patch": "@@ -403,16 +403,20 @@ impl char {\n     }\n \n     /// An extended version of `escape_debug` that optionally permits escaping\n-    /// Extended Grapheme codepoints. This allows us to format characters like\n-    /// nonspacing marks better when they're at the start of a string.\n+    /// Extended Grapheme codepoints, single quotes, and double quotes. This\n+    /// allows us to format characters like nonspacing marks better when they're\n+    /// at the start of a string, and allows escaping single quotes in\n+    /// characters, and double quotes in strings.\n     #[inline]\n-    pub(crate) fn escape_debug_ext(self, escape_grapheme_extended: bool) -> EscapeDebug {\n+    pub(crate) fn escape_debug_ext(self, args: EscapeDebugExtArgs) -> EscapeDebug {\n         let init_state = match self {\n             '\\t' => EscapeDefaultState::Backslash('t'),\n             '\\r' => EscapeDefaultState::Backslash('r'),\n             '\\n' => EscapeDefaultState::Backslash('n'),\n-            '\\\\' | '\\'' | '\"' => EscapeDefaultState::Backslash(self),\n-            _ if escape_grapheme_extended && self.is_grapheme_extended() => {\n+            '\\\\' => EscapeDefaultState::Backslash(self),\n+            '\"' if args.escape_double_quote => EscapeDefaultState::Backslash(self),\n+            '\\'' if args.escape_single_quote => EscapeDefaultState::Backslash(self),\n+            _ if args.escape_grapheme_extended && self.is_grapheme_extended() => {\n                 EscapeDefaultState::Unicode(self.escape_unicode())\n             }\n             _ if is_printable(self) => EscapeDefaultState::Char(self),\n@@ -458,7 +462,7 @@ impl char {\n     #[stable(feature = \"char_escape_debug\", since = \"1.20.0\")]\n     #[inline]\n     pub fn escape_debug(self) -> EscapeDebug {\n-        self.escape_debug_ext(true)\n+        self.escape_debug_ext(EscapeDebugExtArgs::ESCAPE_ALL)\n     }\n \n     /// Returns an iterator that yields the literal escape code of a character\n@@ -1565,6 +1569,25 @@ impl char {\n     }\n }\n \n+pub(crate) struct EscapeDebugExtArgs {\n+    /// Escape Extended Grapheme codepoints?\n+    pub(crate) escape_grapheme_extended: bool,\n+\n+    /// Escape single quotes?\n+    pub(crate) escape_single_quote: bool,\n+\n+    /// Escape double quotes?\n+    pub(crate) escape_double_quote: bool,\n+}\n+\n+impl EscapeDebugExtArgs {\n+    pub(crate) const ESCAPE_ALL: Self = Self {\n+        escape_grapheme_extended: true,\n+        escape_single_quote: true,\n+        escape_double_quote: true,\n+    };\n+}\n+\n #[inline]\n const fn len_utf8(code: u32) -> usize {\n     if code < MAX_ONE_B {"}, {"sha": "25a7c1de9de4bddcbf7ad56918fd573990e9848b", "filename": "library/core/src/char/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/819247f179c0af011ea7219dc361209851eb487d/library%2Fcore%2Fsrc%2Fchar%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/819247f179c0af011ea7219dc361209851eb487d/library%2Fcore%2Fsrc%2Fchar%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fmod.rs?ref=819247f179c0af011ea7219dc361209851eb487d", "patch": "@@ -45,6 +45,8 @@ pub use self::methods::encode_utf8_raw;\n use crate::fmt::{self, Write};\n use crate::iter::FusedIterator;\n \n+pub(crate) use self::methods::EscapeDebugExtArgs;\n+\n // UTF-8 ranges and tags for encoding characters\n const TAG_CONT: u8 = 0b1000_0000;\n const TAG_TWO_B: u8 = 0b1100_0000;"}, {"sha": "d211ad4b2f7f4a2df5808d9d7f0a372b743407df", "filename": "library/core/src/fmt/mod.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/819247f179c0af011ea7219dc361209851eb487d/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/819247f179c0af011ea7219dc361209851eb487d/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs?ref=819247f179c0af011ea7219dc361209851eb487d", "patch": "@@ -3,6 +3,7 @@\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n use crate::cell::{Cell, Ref, RefCell, RefMut, UnsafeCell};\n+use crate::char::EscapeDebugExtArgs;\n use crate::marker::PhantomData;\n use crate::mem;\n use crate::num::flt2dec;\n@@ -2054,7 +2055,11 @@ impl Debug for str {\n         f.write_char('\"')?;\n         let mut from = 0;\n         for (i, c) in self.char_indices() {\n-            let esc = c.escape_debug();\n+            let esc = c.escape_debug_ext(EscapeDebugExtArgs {\n+                escape_grapheme_extended: true,\n+                escape_single_quote: false,\n+                escape_double_quote: true,\n+            });\n             // If char needs escaping, flush backlog so far and write, else skip\n             if esc.len() != 1 {\n                 f.write_str(&self[from..i])?;\n@@ -2080,7 +2085,11 @@ impl Display for str {\n impl Debug for char {\n     fn fmt(&self, f: &mut Formatter<'_>) -> Result {\n         f.write_char('\\'')?;\n-        for c in self.escape_debug() {\n+        for c in self.escape_debug_ext(EscapeDebugExtArgs {\n+            escape_grapheme_extended: true,\n+            escape_single_quote: true,\n+            escape_double_quote: false,\n+        }) {\n             f.write_char(c)?\n         }\n         f.write_char('\\'')"}, {"sha": "95dd54976b2c02e2554cc0748e9784faf11e21ee", "filename": "library/core/src/str/mod.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/819247f179c0af011ea7219dc361209851eb487d/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/819247f179c0af011ea7219dc361209851eb487d/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs?ref=819247f179c0af011ea7219dc361209851eb487d", "patch": "@@ -15,7 +15,7 @@ mod validations;\n use self::pattern::Pattern;\n use self::pattern::{DoubleEndedSearcher, ReverseSearcher, Searcher};\n \n-use crate::char;\n+use crate::char::{self, EscapeDebugExtArgs};\n use crate::mem;\n use crate::slice::{self, SliceIndex};\n \n@@ -2342,7 +2342,7 @@ impl str {\n         EscapeDebug {\n             inner: chars\n                 .next()\n-                .map(|first| first.escape_debug_ext(true))\n+                .map(|first| first.escape_debug_ext(EscapeDebugExtArgs::ESCAPE_ALL))\n                 .into_iter()\n                 .flatten()\n                 .chain(chars.flat_map(CharEscapeDebugContinue)),\n@@ -2460,7 +2460,11 @@ impl_fn_for_zst! {\n \n     #[derive(Clone)]\n     struct CharEscapeDebugContinue impl Fn = |c: char| -> char::EscapeDebug {\n-        c.escape_debug_ext(false)\n+        c.escape_debug_ext(EscapeDebugExtArgs {\n+            escape_grapheme_extended: false,\n+            escape_single_quote: true,\n+            escape_double_quote: true\n+        })\n     };\n \n     #[derive(Clone)]"}, {"sha": "250568be3333f2abfe25f7e33fd26df4be768dd9", "filename": "src/test/rustdoc-ui/check-doc-alias-attr.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/819247f179c0af011ea7219dc361209851eb487d/src%2Ftest%2Frustdoc-ui%2Fcheck-doc-alias-attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/819247f179c0af011ea7219dc361209851eb487d/src%2Ftest%2Frustdoc-ui%2Fcheck-doc-alias-attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcheck-doc-alias-attr.stderr?ref=819247f179c0af011ea7219dc361209851eb487d", "patch": "@@ -10,7 +10,7 @@ error: doc alias attribute expects a string `#[doc(alias = \"a\")]` or a list of s\n LL | #[doc(alias = 0)]\n    |       ^^^^^^^^^\n \n-error: '\\\"' character isn't allowed in `#[doc(alias = \"...\")]`\n+error: '\"' character isn't allowed in `#[doc(alias = \"...\")]`\n   --> $DIR/check-doc-alias-attr.rs:9:15\n    |\n LL | #[doc(alias = \"\\\"\")]\n@@ -60,7 +60,7 @@ error: `#[doc(alias(\"a\"))]` expects string literals\n LL | #[doc(alias(0))]\n    |             ^\n \n-error: '\\\"' character isn't allowed in `#[doc(alias(\"...\"))]`\n+error: '\"' character isn't allowed in `#[doc(alias(\"...\"))]`\n   --> $DIR/check-doc-alias-attr.rs:20:13\n    |\n LL | #[doc(alias(\"\\\"\"))]"}, {"sha": "250568be3333f2abfe25f7e33fd26df4be768dd9", "filename": "src/test/ui/rustdoc/check-doc-alias-attr.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/819247f179c0af011ea7219dc361209851eb487d/src%2Ftest%2Fui%2Frustdoc%2Fcheck-doc-alias-attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/819247f179c0af011ea7219dc361209851eb487d/src%2Ftest%2Fui%2Frustdoc%2Fcheck-doc-alias-attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frustdoc%2Fcheck-doc-alias-attr.stderr?ref=819247f179c0af011ea7219dc361209851eb487d", "patch": "@@ -10,7 +10,7 @@ error: doc alias attribute expects a string `#[doc(alias = \"a\")]` or a list of s\n LL | #[doc(alias = 0)]\n    |       ^^^^^^^^^\n \n-error: '\\\"' character isn't allowed in `#[doc(alias = \"...\")]`\n+error: '\"' character isn't allowed in `#[doc(alias = \"...\")]`\n   --> $DIR/check-doc-alias-attr.rs:9:15\n    |\n LL | #[doc(alias = \"\\\"\")]\n@@ -60,7 +60,7 @@ error: `#[doc(alias(\"a\"))]` expects string literals\n LL | #[doc(alias(0))]\n    |             ^\n \n-error: '\\\"' character isn't allowed in `#[doc(alias(\"...\"))]`\n+error: '\"' character isn't allowed in `#[doc(alias(\"...\"))]`\n   --> $DIR/check-doc-alias-attr.rs:20:13\n    |\n LL | #[doc(alias(\"\\\"\"))]"}]}