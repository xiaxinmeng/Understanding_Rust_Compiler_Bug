{"sha": "25eb1fd3c9d997e460dff3e03d87e398e616c726", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1ZWIxZmQzYzlkOTk3ZTQ2MGRmZjNlMDNkODdlMzk4ZTYxNmM3MjY=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@pobox.com", "date": "2010-06-24T17:34:47Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@pobox.com", "date": "2010-06-24T17:34:47Z"}, "message": "Add fmt module, move out some common format helpers, add instruction-selection tracing and make selection use queues rather than list refs.", "tree": {"sha": "fb8919376fe8a1f180f69bf4704bb71668881aab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb8919376fe8a1f180f69bf4704bb71668881aab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/25eb1fd3c9d997e460dff3e03d87e398e616c726", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/25eb1fd3c9d997e460dff3e03d87e398e616c726", "html_url": "https://github.com/rust-lang/rust/commit/25eb1fd3c9d997e460dff3e03d87e398e616c726", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/25eb1fd3c9d997e460dff3e03d87e398e616c726/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a1f86ccd7e823f63d12208baef79b1e74479203", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a1f86ccd7e823f63d12208baef79b1e74479203", "html_url": "https://github.com/rust-lang/rust/commit/4a1f86ccd7e823f63d12208baef79b1e74479203"}], "stats": {"total": 407, "additions": 265, "deletions": 142}, "files": [{"sha": "c2064a1e554765619d85322d64443cc51bab908e", "filename": "src/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25eb1fd3c9d997e460dff3e03d87e398e616c726/src%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/25eb1fd3c9d997e460dff3e03d87e398e616c726/src%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FMakefile?ref=25eb1fd3c9d997e460dff3e03d87e398e616c726", "patch": "@@ -205,7 +205,7 @@ endif\n # List them in link order.\n # Nobody calculates the link-order DAG automatically, sadly.\n \n-UTIL_BOT_MLS := $(addprefix boot/util/, common.ml bits.ml)\n+UTIL_BOT_MLS := $(addprefix boot/util/, fmt.ml common.ml bits.ml)\n DRIVER_BOT_MLS := $(addprefix boot/driver/, session.ml)\n BE_MLS := $(addprefix boot/be/, x86.ml ra.ml pe.ml elf.ml \\\n           macho.ml)"}, {"sha": "4b05e347ea6896ee2531a2850067d1878f0a9a7c", "filename": "src/boot/be/asm.ml", "status": "modified", "additions": 76, "deletions": 1, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/25eb1fd3c9d997e460dff3e03d87e398e616c726/src%2Fboot%2Fbe%2Fasm.ml", "raw_url": "https://github.com/rust-lang/rust/raw/25eb1fd3c9d997e460dff3e03d87e398e616c726/src%2Fboot%2Fbe%2Fasm.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fbe%2Fasm.ml?ref=25eb1fd3c9d997e460dff3e03d87e398e616c726", "patch": "@@ -62,7 +62,7 @@\n *)\n \n open Common;;\n-\n+open Fmt;;\n \n let log (sess:Session.sess) =\n   Session.log \"asm\"\n@@ -201,6 +201,41 @@ let rec eval64 (e:expr64)\n     | EXT e -> Int64.of_int32 (eval32 e)\n ;;\n \n+let rec string_of_expr64 (e64:expr64) : string =\n+  let bin op a b =\n+    Printf.sprintf \"(%s %s %s)\" (string_of_expr64 a) op (string_of_expr64 b)\n+  in\n+  let bini op a b =\n+    Printf.sprintf \"(%s %s %d)\" (string_of_expr64 a) op b\n+  in\n+    match e64 with\n+        IMM i when (i64_lt i 0L) -> Printf.sprintf \"-0x%Lx\" (Int64.neg i)\n+      | IMM i -> Printf.sprintf \"0x%Lx\" i\n+      | ADD (a,b) -> bin \"+\" a b\n+      | SUB (a,b) -> bin \"-\" a b\n+      | MUL (a,b) -> bin \"*\" a b\n+      | DIV (a,b) -> bin \"/\" a b\n+      | REM (a,b) -> bin \"%\" a b\n+      | MAX (a,b) ->\n+          Printf.sprintf \"(max %s %s)\"\n+            (string_of_expr64 a) (string_of_expr64 b)\n+      | ALIGN (a,b) ->\n+          Printf.sprintf \"(align %s %s)\"\n+            (string_of_expr64 a) (string_of_expr64 b)\n+      | SLL (a,b) -> bini \"<<\" a b\n+      | SLR (a,b) -> bini \">>\" a b\n+      | SAR (a,b) -> bini \">>>\" a b\n+      | AND (a,b) -> bin \"&\" a b\n+      | XOR (a,b) -> bin \"xor\" a b\n+      | OR (a,b) -> bin \"|\" a b\n+      | NOT a -> Printf.sprintf \"(not %s)\" (string_of_expr64 a)\n+      | NEG a -> Printf.sprintf \"-%s\" (string_of_expr64 a)\n+      | F_POS f -> Printf.sprintf \"<%s>.fpos\" f.fixup_name\n+      | F_SZ f -> Printf.sprintf \"<%s>.fsz\" f.fixup_name\n+      | M_POS f -> Printf.sprintf \"<%s>.mpos\" f.fixup_name\n+      | M_SZ f -> Printf.sprintf \"<%s>.msz\" f.fixup_name\n+      | EXT _ -> \"??ext??\"\n+;;\n \n type frag =\n     MARK  (* MARK == 'PAD (IMM 0L)' *)\n@@ -226,6 +261,46 @@ and relaxation =\n       relax_choice: int ref; }\n ;;\n \n+\n+let rec fmt_frag (ff:Format.formatter) (f:frag) : unit =\n+  match f with\n+    MARK -> fmt ff \"MARK\"\n+  | SEQ fs -> fmt_bracketed_arr_sep \"[\" \"]\" \", \" fmt_frag ff fs\n+  | PAD i -> fmt ff \"PAD(%d)\" i\n+  | BSS i -> fmt ff \"BSZ(%Ld)\" i\n+  | MEMPOS i -> fmt ff \"MEMPOS(%Ld)\" i\n+  | BYTE i -> fmt ff \"0x%x\" i\n+  | BYTES iz ->\n+      fmt ff \"BYTES\";\n+      fmt_bracketed_arr_sep \"(\" \")\" \", \"\n+        (fun ff i -> fmt ff \"0x%x\" i) ff iz\n+  | CHAR c -> fmt ff \"CHAR(%s)\" (Char.escaped c)\n+  | STRING s -> fmt ff \"STRING(%s)\" (String.escaped s)\n+  | ZSTRING s -> fmt ff \"ZSTRING(%s)\" (String.escaped s)\n+  | ULEB128 e -> fmt ff \"ULEB128(%s)\" (string_of_expr64 e)\n+  | SLEB128 e -> fmt ff \"SLEB128(%s)\" (string_of_expr64 e)\n+  | WORD (tm, e) ->\n+      fmt ff \"%s:%s\"\n+        (string_of_ty_mach tm) (string_of_expr64 e)\n+  | ALIGN_FILE (i, f) ->\n+      fmt ff \"ALIGN_FILE(%d, \" i;\n+      fmt_frag ff f;\n+      fmt ff \")\"\n+  | ALIGN_MEM (i, f) ->\n+      fmt ff \"ALIGN_MEM(%d, \" i;\n+      fmt_frag ff f;\n+      fmt ff \")\"\n+  | DEF (fix, f) ->\n+      fmt ff \"DEF(%s, \" fix.fixup_name;\n+      fmt_frag ff f;\n+      fmt ff \")\"\n+  | RELAX r ->\n+      fmt ff \"RELAX(\";\n+      fmt_arr_sep \", \" fmt_frag ff r.relax_options\n+;;\n+\n+let sprintf_frag = Fmt.sprintf_fmt fmt_frag;;\n+\n exception Relax_more of relaxation;;\n \n let new_relaxation (frags:frag array) ="}, {"sha": "b77516b74dc8fe5a5c2f196b5dc031a0b9e059e6", "filename": "src/boot/be/il.ml", "status": "modified", "additions": 5, "deletions": 40, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/25eb1fd3c9d997e460dff3e03d87e398e616c726/src%2Fboot%2Fbe%2Fil.ml", "raw_url": "https://github.com/rust-lang/rust/raw/25eb1fd3c9d997e460dff3e03d87e398e616c726/src%2Fboot%2Fbe%2Fil.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fbe%2Fil.ml?ref=25eb1fd3c9d997e460dff3e03d87e398e616c726", "patch": "@@ -522,54 +522,18 @@ let string_of_reg (f:hreg_formatter) (r:reg) : string =\n     | Hreg i -> f i\n ;;\n \n-let rec string_of_expr64 (e64:Asm.expr64) : string =\n-  let bin op a b =\n-    Printf.sprintf \"(%s %s %s)\" (string_of_expr64 a) op (string_of_expr64 b)\n-  in\n-  let bini op a b =\n-    Printf.sprintf \"(%s %s %d)\" (string_of_expr64 a) op b\n-  in\n-    match e64 with\n-        Asm.IMM i when (i64_lt i 0L) -> Printf.sprintf \"-0x%Lx\" (Int64.neg i)\n-      | Asm.IMM i -> Printf.sprintf \"0x%Lx\" i\n-      | Asm.ADD (a,b) -> bin \"+\" a b\n-      | Asm.SUB (a,b) -> bin \"-\" a b\n-      | Asm.MUL (a,b) -> bin \"*\" a b\n-      | Asm.DIV (a,b) -> bin \"/\" a b\n-      | Asm.REM (a,b) -> bin \"%\" a b\n-      | Asm.MAX (a,b) ->\n-          Printf.sprintf \"(max %s %s)\"\n-            (string_of_expr64 a) (string_of_expr64 b)\n-      | Asm.ALIGN (a,b) ->\n-          Printf.sprintf \"(align %s %s)\"\n-            (string_of_expr64 a) (string_of_expr64 b)\n-      | Asm.SLL (a,b) -> bini \"<<\" a b\n-      | Asm.SLR (a,b) -> bini \">>\" a b\n-      | Asm.SAR (a,b) -> bini \">>>\" a b\n-      | Asm.AND (a,b) -> bin \"&\" a b\n-      | Asm.XOR (a,b) -> bin \"xor\" a b\n-      | Asm.OR (a,b) -> bin \"|\" a b\n-      | Asm.NOT a -> Printf.sprintf \"(not %s)\" (string_of_expr64 a)\n-      | Asm.NEG a -> Printf.sprintf \"-%s\" (string_of_expr64 a)\n-      | Asm.F_POS f -> Printf.sprintf \"<%s>.fpos\" f.fixup_name\n-      | Asm.F_SZ f -> Printf.sprintf \"<%s>.fsz\" f.fixup_name\n-      | Asm.M_POS f -> Printf.sprintf \"<%s>.mpos\" f.fixup_name\n-      | Asm.M_SZ f -> Printf.sprintf \"<%s>.msz\" f.fixup_name\n-      | Asm.EXT _ -> \"??ext??\"\n-;;\n-\n let string_of_off (e:Asm.expr64 option) : string =\n   match e with\n       None -> \"\"\n     | Some (Asm.IMM i) when (i64_lt i 0L) ->\n         Printf.sprintf \" - 0x%Lx\" (Int64.neg i)\n-    | Some e' -> \" + \" ^ (string_of_expr64 e')\n+    | Some e' -> \" + \" ^ (Asm.string_of_expr64 e')\n ;;\n \n let string_of_mem (f:hreg_formatter) (a:mem) : string =\n   match a with\n       Abs e ->\n-        Printf.sprintf \"[%s]\" (string_of_expr64 e)\n+        Printf.sprintf \"[%s]\" (Asm.string_of_expr64 e)\n     | RegIn (r, off) ->\n         Printf.sprintf \"[%s%s]\" (string_of_reg f r) (string_of_off off)\n     | Spill i ->\n@@ -605,9 +569,10 @@ let string_of_operand (f:hreg_formatter) (op:operand) : string =\n     | Imm (i, ty) ->\n         if !log_iltypes\n         then\n-          Printf.sprintf \"$%s:%s\" (string_of_expr64 i) (string_of_ty_mach ty)\n+          Printf.sprintf \"$%s:%s\"\n+            (Asm.string_of_expr64 i) (string_of_ty_mach ty)\n         else\n-          Printf.sprintf \"$%s\" (string_of_expr64 i)\n+          Printf.sprintf \"$%s\" (Asm.string_of_expr64 i)\n ;;\n \n "}, {"sha": "a1770d06d1adcc7f367bfc934a0b79ca527f91a3", "filename": "src/boot/be/x86.ml", "status": "modified", "additions": 55, "deletions": 31, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/25eb1fd3c9d997e460dff3e03d87e398e616c726/src%2Fboot%2Fbe%2Fx86.ml", "raw_url": "https://github.com/rust-lang/rust/raw/25eb1fd3c9d997e460dff3e03d87e398e616c726/src%2Fboot%2Fbe%2Fx86.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fbe%2Fx86.ml?ref=25eb1fd3c9d997e460dff3e03d87e398e616c726", "patch": "@@ -73,6 +73,19 @@\n  *\n  *)\n \n+\n+let log (sess:Session.sess) =\n+  Session.log \"insn\"\n+    sess.Session.sess_log_insn\n+    sess.Session.sess_log_out\n+;;\n+\n+let iflog (sess:Session.sess) (thunk:(unit -> unit)) : unit =\n+  if sess.Session.sess_log_insn\n+  then thunk ()\n+  else ()\n+;;\n+\n open Common;;\n \n exception Unrecognized\n@@ -2147,44 +2160,55 @@ let new_emitter_without_vregs _ : Il.emitter =\n     false None\n ;;\n \n-let select_insns (sess:Session.sess) (q:Il.quads) : Asm.frag =\n+let select_insns (sess:Session.sess) (qs:Il.quads) : Asm.frag =\n   let scopes = Stack.create () in\n   let fixups = Stack.create () in\n+  let append frag =\n+    Queue.add frag (Stack.top scopes)\n+  in\n   let pop_frags _ =\n-    Asm.SEQ (Array.of_list\n-               (List.rev\n-                  (!(Stack.pop scopes))))\n+    Asm.SEQ (queue_to_arr (Stack.pop scopes))\n   in\n-    ignore (Stack.push (ref []) scopes);\n-    for i = 0 to (Array.length q) - 1 do\n-      let append frag =\n-        let frags = Stack.top scopes in\n-          frags := frag :: (!frags)\n-      in\n-        begin\n-          match q.(i).Il.quad_fixup with\n-              None -> ()\n-            | Some f -> append (Asm.DEF (f, Asm.MARK))\n-        end;\n-        begin\n-          match q.(i).Il.quad_body with\n-              Il.Enter f ->\n-                Stack.push f fixups;\n-                Stack.push (ref []) scopes;\n-            | Il.Leave ->\n-                append (Asm.DEF (Stack.pop fixups, pop_frags ()))\n-            | _ ->\n-                try\n-                  append (select_insn q.(i))\n-                with\n+    ignore (Stack.push (Queue.create()) scopes);\n+    Array.iteri\n+      begin\n+        fun i q ->\n+          begin\n+            match q.Il.quad_fixup with\n+                None -> ()\n+              | Some f -> append (Asm.DEF (f, Asm.MARK))\n+          end;\n+          begin\n+            let qstr _ = Il.string_of_quad reg_str q in\n+              match q.Il.quad_body with\n+                  Il.Enter f ->\n+                    Stack.push f fixups;\n+                    Stack.push (Queue.create()) scopes;\n+                | Il.Leave ->\n+                    append (Asm.DEF (Stack.pop fixups, pop_frags ()))\n+                | _ ->\n+                    try\n+                      let _ =\n+                        iflog sess (fun _ ->\n+                                      log sess \"quad %d: %s\" i (qstr()))\n+                      in\n+                      let frag = select_insn q in\n+                      let _ =\n+                        iflog sess (fun _ ->\n+                                      log sess \"frag %d: %a\" i\n+                                        Asm.sprintf_frag frag)\n+                      in\n+                        append frag\n+                    with\n                     Unrecognized ->\n                       Session.fail sess\n-                        \"E:Assembly error: unrecognized quad: %s\\n%!\"\n-                        (Il.string_of_quad reg_str q.(i));\n+                        \"E:Assembly error: unrecognized quad %d: %s\\n%!\"\n+                        i (qstr());\n                       ()\n-        end\n-    done;\n-    pop_frags()\n+          end\n+      end\n+      qs;\n+      pop_frags()\n ;;\n \n let frags_of_emitted_quads (sess:Session.sess) (e:Il.emitter) : Asm.frag ="}, {"sha": "1841659095f5783d511a864c81bc3ad10d704672", "filename": "src/boot/driver/main.ml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/25eb1fd3c9d997e460dff3e03d87e398e616c726/src%2Fboot%2Fdriver%2Fmain.ml", "raw_url": "https://github.com/rust-lang/rust/raw/25eb1fd3c9d997e460dff3e03d87e398e616c726/src%2Fboot%2Fdriver%2Fmain.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fdriver%2Fmain.ml?ref=25eb1fd3c9d997e460dff3e03d87e398e616c726", "patch": "@@ -90,7 +90,7 @@ let set_default_output_filename (sess:Session.sess) : unit =\n let dump_sig (filename:filename) : unit =\n   let items =\n     Lib.get_file_mod sess abi filename (ref (Node 0)) (ref (Opaque 0)) in\n-    Printf.fprintf stdout \"%s\\n\" (Ast.fmt_to_str Ast.fmt_mod_items items);\n+    Printf.fprintf stdout \"%s\\n\" (Fmt.fmt_to_str Ast.fmt_mod_items items);\n     exit 0\n ;;\n \n@@ -289,7 +289,7 @@ then\n   begin\n     Printf.fprintf stdout \"Post-parse AST:\\n\";\n     Format.set_margin 80;\n-    Printf.fprintf stdout \"%s\\n\" (Ast.fmt_to_str Ast.fmt_crate crate)\n+    Printf.fprintf stdout \"%s\\n\" (Fmt.fmt_to_str Ast.fmt_crate crate)\n   end\n \n let list_to_seq ls = Asm.SEQ (Array.of_list ls);;"}, {"sha": "0903751066c33a4f6b45c0755987cc805c0b9e62", "filename": "src/boot/fe/ast.ml", "status": "modified", "additions": 1, "deletions": 25, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/25eb1fd3c9d997e460dff3e03d87e398e616c726/src%2Fboot%2Ffe%2Fast.ml", "raw_url": "https://github.com/rust-lang/rust/raw/25eb1fd3c9d997e460dff3e03d87e398e616c726/src%2Fboot%2Ffe%2Fast.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Ffe%2Fast.ml?ref=25eb1fd3c9d997e460dff3e03d87e398e616c726", "patch": "@@ -7,6 +7,7 @@\n  *)\n \n open Common;;\n+open Fmt;;\n \n (*\n  * Slot names are given by a dot-separated path within the current\n@@ -464,8 +465,6 @@ let sane_name (n:name) : bool =\n \n (* FIXME (issue #19): finish all parts with ?foo? as their output. *)\n \n-let fmt = Format.fprintf;;\n-\n let fmt_ident (ff:Format.formatter) (i:ident) : unit =\n   fmt ff  \"%s\" i\n \n@@ -700,13 +699,6 @@ and fmt_carg (ff:Format.formatter) (ca:carg) : unit =\n       CARG_path cp -> fmt_carg_path ff cp\n     | CARG_lit lit -> fmt_lit ff lit\n \n-and fmt_obox ff = Format.pp_open_box ff 4\n-and fmt_obox_3 ff = Format.pp_open_box ff 3\n-and fmt_cbox ff = Format.pp_close_box ff ()\n-and fmt_obr ff = fmt ff \"{\"\n-and fmt_cbr ff = fmt ff \"@\\n}\"\n-and fmt_cbb ff = (fmt_cbox ff; fmt_cbr ff)\n-\n and fmt_stmts (ff:Format.formatter) (ss:stmt array) : unit =\n   Array.iter (fmt_stmt ff) ss;\n \n@@ -1316,22 +1308,6 @@ and fmt_crate (ff:Format.formatter) (c:crate) : unit =\n     fmt_mod_view ff view;\n     fmt_mod_items ff items\n \n-\n-let fmt_to_str (f:Format.formatter -> 'a -> unit) (v:'a) : string =\n-  let buf = Buffer.create 16 in\n-  let bf = Format.formatter_of_buffer buf in\n-    begin\n-      f bf v;\n-      Format.pp_print_flush bf ();\n-      Buffer.contents buf\n-    end\n-\n-let sprintf_fmt\n-    (f:Format.formatter -> 'a -> unit)\n-    : (unit -> 'a -> string) =\n-  (fun _ -> fmt_to_str f)\n-\n-\n let sprintf_expr = sprintf_fmt fmt_expr;;\n let sprintf_name = sprintf_fmt fmt_name;;\n let sprintf_lval = sprintf_fmt fmt_lval;;"}, {"sha": "13d6d2b593d26005a335593ffab20b87b99aa6e8", "filename": "src/boot/fe/pexp.ml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25eb1fd3c9d997e460dff3e03d87e398e616c726/src%2Fboot%2Ffe%2Fpexp.ml", "raw_url": "https://github.com/rust-lang/rust/raw/25eb1fd3c9d997e460dff3e03d87e398e616c726/src%2Fboot%2Ffe%2Fpexp.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Ffe%2Fpexp.ml?ref=25eb1fd3c9d997e460dff3e03d87e398e616c726", "patch": "@@ -975,7 +975,7 @@ let expand_pexp_custom\n     (args:token array)\n     (body:string option)\n     : pexp' =\n-  let nstr = Ast.fmt_to_str Ast.fmt_name name in\n+  let nstr = Fmt.fmt_to_str Ast.fmt_name name in\n     match (nstr, (Array.length args), body) with\n \n         (\"shell\", 0, Some cmd) ->"}, {"sha": "a3278fcda708932c7da6ac4b6df278c226e5a8db", "filename": "src/boot/llvm/lltrans.ml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25eb1fd3c9d997e460dff3e03d87e398e616c726/src%2Fboot%2Fllvm%2Flltrans.ml", "raw_url": "https://github.com/rust-lang/rust/raw/25eb1fd3c9d997e460dff3e03d87e398e616c726/src%2Fboot%2Fllvm%2Flltrans.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fllvm%2Flltrans.ml?ref=25eb1fd3c9d997e460dff3e03d87e398e616c726", "patch": "@@ -831,7 +831,7 @@ let trans_crate\n               | Ast.STMT_check_expr expr ->\n                   let llexpr = trans_expr expr in\n                   let (llfail, llfailbuilder) = new_block None \"fail\" in\n-                  let reason = Ast.fmt_to_str Ast.fmt_expr expr in\n+                  let reason = Fmt.fmt_to_str Ast.fmt_expr expr in\n                   trans_fail llfailbuilder lltask reason head.id;\n                   let (llok, llokbuilder) = new_block None \"ok\" in\n                   ignore (Llvm.build_cond_br llexpr llok llfail llbuilder);"}, {"sha": "56b66f70811100bc2be74fd5af8f9af59bcbf83e", "filename": "src/boot/me/dwarf.ml", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/25eb1fd3c9d997e460dff3e03d87e398e616c726/src%2Fboot%2Fme%2Fdwarf.ml", "raw_url": "https://github.com/rust-lang/rust/raw/25eb1fd3c9d997e460dff3e03d87e398e616c726/src%2Fboot%2Fme%2Fdwarf.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Fdwarf.ml?ref=25eb1fd3c9d997e460dff3e03d87e398e616c726", "patch": "@@ -1428,7 +1428,7 @@ let dwarf_visitor\n       | Il.Bits64 -> TY_i64\n   in\n \n-  let path_name _ = Ast.fmt_to_str Ast.fmt_name (Walk.path_to_name path) in\n+  let path_name _ = Fmt.fmt_to_str Ast.fmt_name (Walk.path_to_name path) in\n \n   let (abbrev_table:(abbrev, int) Hashtbl.t) = Hashtbl.create 0 in\n \n@@ -2496,29 +2496,29 @@ let fmt_dies\n     : unit =\n   let ((root:int),(dies:(int,die) Hashtbl.t)) = dies in\n   let rec fmt_die die =\n-    Ast.fmt ff \"@\\nDIE <0x%x> %s\" die.die_off (dw_tag_to_string die.die_tag);\n+    Fmt.fmt ff \"@\\nDIE <0x%x> %s\" die.die_off (dw_tag_to_string die.die_tag);\n     Array.iter\n       begin\n         fun (at,(form,data)) ->\n-          Ast.fmt ff \"@\\n  %s = \" (dw_at_to_string at);\n+          Fmt.fmt ff \"@\\n  %s = \" (dw_at_to_string at);\n           begin\n             match data with\n-                DATA_num n -> Ast.fmt ff \"0x%x\"  n\n-              | DATA_str s -> Ast.fmt ff \"\\\"%s\\\"\" s\n-              | DATA_other -> Ast.fmt ff \"<other>\"\n+                DATA_num n -> Fmt.fmt ff \"0x%x\"  n\n+              | DATA_str s -> Fmt.fmt ff \"\\\"%s\\\"\" s\n+              | DATA_other -> Fmt.fmt ff \"<other>\"\n           end;\n-          Ast.fmt ff \"  (%s)\" (dw_form_to_string form)\n+          Fmt.fmt ff \"  (%s)\" (dw_form_to_string form)\n       end\n       die.die_attrs;\n     if (Array.length die.die_children) != 0\n     then\n       begin\n-        Ast.fmt ff \"@\\n\";\n-        Ast.fmt_obox ff;\n-        Ast.fmt ff \"  children: \";\n-        Ast.fmt_obr ff;\n+        Fmt.fmt ff \"@\\n\";\n+        Fmt.fmt_obox ff;\n+        Fmt.fmt ff \"  children: \";\n+        Fmt.fmt_obr ff;\n         Array.iter fmt_die die.die_children;\n-        Ast.fmt_cbb ff\n+        Fmt.fmt_cbb ff\n       end;\n   in\n     fmt_die (Hashtbl.find dies root)\n@@ -2613,7 +2613,7 @@ let read_dies\n       begin\n         fun _ ->\n           log sess \"read DIEs:\";\n-          log sess \"%s\" (Ast.fmt_to_str fmt_dies (root, all_dies));\n+          log sess \"%s\" (Fmt.fmt_to_str fmt_dies (root, all_dies));\n       end;\n     (root, all_dies)\n ;;"}, {"sha": "2c71877819742e16313ef98aec6f62e4413d4a34", "filename": "src/boot/me/resolve.ml", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/25eb1fd3c9d997e460dff3e03d87e398e616c726/src%2Fboot%2Fme%2Fresolve.ml", "raw_url": "https://github.com/rust-lang/rust/raw/25eb1fd3c9d997e460dff3e03d87e398e616c726/src%2Fboot%2Fme%2Fresolve.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Fresolve.ml?ref=25eb1fd3c9d997e460dff3e03d87e398e616c726", "patch": "@@ -445,9 +445,9 @@ and lookup_type_by_name\n                 log cx \"applying %d type args to %d params\"\n                   (Array.length args) (Array.length params);\n                 log cx \"params: %s\"\n-                  (Ast.fmt_to_str Ast.fmt_decl_params params);\n+                  (Fmt.fmt_to_str Ast.fmt_decl_params params);\n                 log cx \"args: %s\"\n-                  (Ast.fmt_to_str Ast.fmt_app_args args);\n+                  (Fmt.fmt_to_str Ast.fmt_app_args args);\n             end;\n           let ty = rebuild_ty_under_params ty params args true in\n             iflog cx (fun _ -> log cx \"--- lookup_type_by_name %a ==> %a\"\n@@ -538,7 +538,7 @@ let type_resolving_visitor\n       log cx \"collected resolved slot #%d with type %s\" (int_of_node slot.id)\n         (match slot.node.Ast.slot_ty with\n              None -> \"??\"\n-           | Some t -> (Ast.fmt_to_str Ast.fmt_ty t));\n+           | Some t -> (Fmt.fmt_to_str Ast.fmt_ty t));\n       inner.Walk.visit_slot_identified_pre slot\n   in\n "}, {"sha": "d33eb6d9020fdf85b75659bcec1625399549c28c", "filename": "src/boot/me/semant.ml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25eb1fd3c9d997e460dff3e03d87e398e616c726/src%2Fboot%2Fme%2Fsemant.ml", "raw_url": "https://github.com/rust-lang/rust/raw/25eb1fd3c9d997e460dff3e03d87e398e616c726/src%2Fboot%2Fme%2Fsemant.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Fsemant.ml?ref=25eb1fd3c9d997e460dff3e03d87e398e616c726", "patch": "@@ -65,7 +65,7 @@ type file_code = (node_id, item_code) Hashtbl.t;;\n type data_frags = (data, (fixup * Asm.frag)) Hashtbl.t;;\n \n let string_of_name (n:Ast.name) : string =\n-  Ast.fmt_to_str Ast.fmt_name n\n+  Fmt.fmt_to_str Ast.fmt_name n\n ;;\n \n (* The only need for a carg is to uniquely identify a constraint-arg"}, {"sha": "7cb77e0cec51fd473d53ab0fe02a67a840db5910", "filename": "src/boot/me/trans.ml", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/25eb1fd3c9d997e460dff3e03d87e398e616c726/src%2Fboot%2Fme%2Ftrans.ml", "raw_url": "https://github.com/rust-lang/rust/raw/25eb1fd3c9d997e460dff3e03d87e398e616c726/src%2Fboot%2Fme%2Ftrans.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftrans.ml?ref=25eb1fd3c9d997e460dff3e03d87e398e616c726", "patch": "@@ -812,7 +812,7 @@ let trans_visitor\n                                         (Printf.sprintf\n                                            \"access outer frame slot #%d = %s\"\n                                            (int_of_node slot_id)\n-                                           (Ast.fmt_to_str\n+                                           (Fmt.fmt_to_str\n                                               Ast.fmt_slot_key k))\n                                 end\n                             in\n@@ -1214,7 +1214,7 @@ let trans_visitor\n     iflog\n       begin\n         fun _ ->\n-          annotate (Ast.fmt_to_str Ast.fmt_atom atom)\n+          annotate (Fmt.fmt_to_str Ast.fmt_atom atom)\n       end;\n \n     match atom with\n@@ -1788,7 +1788,7 @@ let trans_visitor\n       iflog\n         begin\n           fun _ ->\n-            annotate ((Ast.fmt_to_str Ast.fmt_expr expr) ^\n+            annotate ((Fmt.fmt_to_str Ast.fmt_expr expr) ^\n                         \": cond, finale\")\n         end\n     in\n@@ -1875,7 +1875,7 @@ let trans_visitor\n       iflog\n         begin\n           fun _ ->\n-            annotate ((Ast.fmt_to_str Ast.fmt_expr expr) ^\n+            annotate ((Fmt.fmt_to_str Ast.fmt_expr expr) ^\n                         \": plain exit, finale\")\n         end\n     in\n@@ -2037,7 +2037,7 @@ let trans_visitor\n \n   and trans_check_expr (e:Ast.expr) : unit =\n     let fwd_jmps = trans_cond false e in\n-      trans_cond_fail (Ast.fmt_to_str Ast.fmt_expr e) fwd_jmps\n+      trans_cond_fail (Fmt.fmt_to_str Ast.fmt_expr e) fwd_jmps\n \n   and trans_malloc (dst:Il.cell) (nbytes:Il.operand) : unit =\n     trans_upcall \"upcall_malloc\" dst [| nbytes |]\n@@ -2489,7 +2489,7 @@ let trans_visitor\n       : unit =\n     iflog (fun _ ->\n              annotate (\"copy_ty: referent data of type \" ^\n-                         (Ast.fmt_to_str Ast.fmt_ty ty)));\n+                         (Fmt.fmt_to_str Ast.fmt_ty ty)));\n     match ty with\n         Ast.TY_nil\n       | Ast.TY_bool\n@@ -2626,7 +2626,7 @@ let trans_visitor\n         | MEM_interior when type_is_structured ty ->\n             (iflog (fun _ ->\n                       annotate (\"mark interior slot \" ^\n-                                  (Ast.fmt_to_str Ast.fmt_slot slot))));\n+                                  (Fmt.fmt_to_str Ast.fmt_slot slot))));\n             let (mem, _) = need_mem_cell cell in\n             let tmp = next_vreg_cell Il.voidptr_t in\n             let ty = maybe_iso curr_iso ty in\n@@ -2750,7 +2750,7 @@ let trans_visitor\n         | MEM_interior when type_is_structured ty ->\n             (iflog (fun _ ->\n                       annotate (\"drop interior slot \" ^\n-                                  (Ast.fmt_to_str Ast.fmt_slot slot))));\n+                                  (Fmt.fmt_to_str Ast.fmt_slot slot))));\n             let (mem, _) = need_mem_cell cell in\n             let vr = next_vreg_cell Il.voidptr_t in\n               lea vr mem;\n@@ -2767,7 +2767,7 @@ let trans_visitor\n     if cx.ctxt_sess.Session.sess_trace_drop ||\n       cx.ctxt_sess.Session.sess_log_trans\n     then\n-      let slotstr = Ast.fmt_to_str Ast.fmt_ty ty in\n+      let slotstr = Fmt.fmt_to_str Ast.fmt_ty ty in\n       let str = step ^ \" \" ^ slotstr in\n         begin\n           annotate str;\n@@ -2785,7 +2785,7 @@ let trans_visitor\n           | MEM_rc_opaque -> \"MEM_rc_struct\"\n           | MEM_interior -> \"MEM_rc_struct\"\n       in\n-      let slotstr = Ast.fmt_to_str Ast.fmt_slot slot in\n+      let slotstr = Fmt.fmt_to_str Ast.fmt_slot slot in\n       let str = step ^ \" \" ^ mctrl_str ^ \" \" ^ slotstr in\n         begin\n           annotate str;\n@@ -3733,7 +3733,7 @@ let trans_visitor\n     iflog (fun _ ->\n              annotate (Printf.sprintf \"callee_drop_slot %d = %s \"\n                          (int_of_node slot_id)\n-                         (Ast.fmt_to_str Ast.fmt_slot_key k)));\n+                         (Fmt.fmt_to_str Ast.fmt_slot_key k)));\n     drop_slot_in_current_frame (cell_of_block_slot slot_id) slot None\n \n \n@@ -3829,7 +3829,7 @@ let trans_visitor\n                                (Printf.sprintf\n                                   \"post-stmt, drop_slot %d = %s \"\n                                   (int_of_node slot_id)\n-                                  (Ast.fmt_to_str Ast.fmt_slot_key k)));\n+                                  (Fmt.fmt_to_str Ast.fmt_slot_key k)));\n                     drop_slot_in_current_frame\n                       (cell_of_block_slot slot_id) slot None\n               end\n@@ -3841,7 +3841,7 @@ let trans_visitor\n       iflog\n         begin\n           fun _ ->\n-            let s = Ast.fmt_to_str Ast.fmt_stmt_body stmt in\n+            let s = Fmt.fmt_to_str Ast.fmt_stmt_body stmt in\n               log cx \"translating stmt: %s\" s;\n               annotate s;\n         end;\n@@ -4910,7 +4910,7 @@ let fixup_assigning_visitor\n     : Walk.visitor =\n \n   let path_name (_:unit) : string =\n-    Ast.fmt_to_str Ast.fmt_name (Walk.path_to_name path)\n+    Fmt.fmt_to_str Ast.fmt_name (Walk.path_to_name path)\n   in\n \n   let enter_file_for id ="}, {"sha": "1824a56d8741297ef46daf80beac5123dcf22a50", "filename": "src/boot/me/typestate.ml", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/25eb1fd3c9d997e460dff3e03d87e398e616c726/src%2Fboot%2Fme%2Ftypestate.ml", "raw_url": "https://github.com/rust-lang/rust/raw/25eb1fd3c9d997e460dff3e03d87e398e616c726/src%2Fboot%2Fme%2Ftypestate.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftypestate.ml?ref=25eb1fd3c9d997e460dff3e03d87e398e616c726", "patch": "@@ -91,27 +91,27 @@ let fmt_constr_key cx ckey =\n         let fmt_constr_arg carg =\n           match carg with\n               Constr_arg_lit lit ->\n-                Ast.fmt_to_str Ast.fmt_lit lit\n+                Fmt.fmt_to_str Ast.fmt_lit lit\n             | Constr_arg_node (id, pth) ->\n                 let rec fmt_pth pth =\n                   match pth with\n                       Ast.CARG_base _ ->\n                         if referent_is_slot cx id\n                         then\n                           let key = Hashtbl.find cx.ctxt_slot_keys id in\n-                            Ast.fmt_to_str Ast.fmt_slot_key key\n+                            Fmt.fmt_to_str Ast.fmt_slot_key key\n                         else\n                           let n = Hashtbl.find cx.ctxt_all_item_names id in\n-                            Ast.fmt_to_str Ast.fmt_name n\n+                            Fmt.fmt_to_str Ast.fmt_name n\n                     | Ast.CARG_ext (pth, nc) ->\n                         let b = fmt_pth pth in\n-                          b ^ (Ast.fmt_to_str Ast.fmt_name_component nc)\n+                          b ^ (Fmt.fmt_to_str Ast.fmt_name_component nc)\n                 in\n                   fmt_pth pth\n         in\n         let pred_name = Hashtbl.find cx.ctxt_all_item_names cid in\n           Printf.sprintf \"%s(%s)\"\n-            (Ast.fmt_to_str Ast.fmt_name pred_name)\n+            (Fmt.fmt_to_str Ast.fmt_name pred_name)\n             (String.concat \", \"\n                (List.map\n                   fmt_constr_arg\n@@ -120,7 +120,7 @@ let fmt_constr_key cx ckey =\n     | Constr_init n when Hashtbl.mem cx.ctxt_slot_keys n ->\n         Printf.sprintf \"<init #%d = %s>\"\n           (int_of_node n)\n-          (Ast.fmt_to_str Ast.fmt_slot_key (Hashtbl.find cx.ctxt_slot_keys n))\n+          (Fmt.fmt_to_str Ast.fmt_slot_key (Hashtbl.find cx.ctxt_slot_keys n))\n     | Constr_init n ->\n         Printf.sprintf \"<init #%d>\" (int_of_node n)\n ;;\n@@ -820,7 +820,7 @@ let run_dataflow cx graph : unit =\n               iflog cx (fun _ -> log cx \"stmt %d: '%s'\" (int_of_node node)\n                        (match htab_search cx.ctxt_all_stmts node with\n                             None -> \"??\"\n-                          | Some stmt -> Ast.fmt_to_str Ast.fmt_stmt stmt));\n+                          | Some stmt -> Fmt.fmt_to_str Ast.fmt_stmt stmt));\n               iflog cx (fun _ -> log cx \"stmt %d:\" (int_of_node node));\n               iflog cx (fun _ -> log cx\n                           \"    prestate %s\" (fmt_constr_bitv prestate));\n@@ -875,7 +875,7 @@ let typestate_verify_visitor\n                  \"Unsatisfied precondition constraint %s at stmt %d: %s\"\n                  constr_str\n                  (int_of_node s.id)\n-                 (Ast.fmt_to_str Ast.fmt_stmt\n+                 (Fmt.fmt_to_str Ast.fmt_stmt\n                     (Hashtbl.find cx.ctxt_all_stmts s.id)))\n         (Bits.to_list precond);\n       inner.Walk.visit_stmt_pre s"}, {"sha": "30b30e32e537c26723414f13615424c4a6aaa43b", "filename": "src/boot/me/walk.ml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25eb1fd3c9d997e460dff3e03d87e398e616c726/src%2Fboot%2Fme%2Fwalk.ml", "raw_url": "https://github.com/rust-lang/rust/raw/25eb1fd3c9d997e460dff3e03d87e398e616c726/src%2Fboot%2Fme%2Fwalk.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Fwalk.ml?ref=25eb1fd3c9d997e460dff3e03d87e398e616c726", "patch": "@@ -145,7 +145,7 @@ let mod_item_logging_visitor\n     (path:Ast.name_component Stack.t)\n     (inner:visitor)\n     : visitor =\n-  let path_name _ = Ast.fmt_to_str Ast.fmt_name (path_to_name path) in\n+  let path_name _ = Fmt.fmt_to_str Ast.fmt_name (path_to_name path) in\n   let visit_mod_item_pre name params item =\n     logfn (Printf.sprintf \"entering %s\" (path_name()));\n     inner.visit_mod_item_pre name params item;"}, {"sha": "650224ba42b03a4d8bcc174b46a39670afd1ad72", "filename": "src/boot/util/fmt.ml", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/25eb1fd3c9d997e460dff3e03d87e398e616c726/src%2Fboot%2Futil%2Ffmt.ml", "raw_url": "https://github.com/rust-lang/rust/raw/25eb1fd3c9d997e460dff3e03d87e398e616c726/src%2Fboot%2Futil%2Ffmt.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Futil%2Ffmt.ml?ref=25eb1fd3c9d997e460dff3e03d87e398e616c726", "patch": "@@ -0,0 +1,83 @@\n+(*\n+ * Common formatting helpers.\n+ *)\n+\n+let fmt = Format.fprintf\n+;;\n+\n+let fmt_str ff = fmt ff \"%s\"\n+;;\n+\n+let fmt_obox ff = Format.pp_open_box ff 4;;\n+let fmt_obox_3 ff = Format.pp_open_box ff 3;;\n+let fmt_cbox ff = Format.pp_close_box ff ();;\n+let fmt_obr ff = fmt ff \"{\";;\n+let fmt_cbr ff = fmt ff \"@\\n}\";;\n+let fmt_cbb ff = (fmt_cbox ff; fmt_cbr ff);;\n+\n+let fmt_bracketed\n+    (bra:string)\n+    (ket:string)\n+    (inner:Format.formatter -> 'a -> unit)\n+    (ff:Format.formatter)\n+    (a:'a)\n+    : unit =\n+  fmt_str ff bra;\n+  inner ff a;\n+  fmt_str ff ket\n+;;\n+\n+let fmt_arr_sep\n+    (sep:string)\n+    (inner:Format.formatter -> 'a -> unit)\n+    (ff:Format.formatter)\n+    (az:'a array)\n+    : unit =\n+  Array.iteri\n+    begin\n+      fun i a ->\n+        if i <> 0\n+        then fmt_str ff sep;\n+        inner ff a\n+    end\n+    az\n+;;\n+\n+let fmt_bracketed_arr_sep\n+    (bra:string)\n+    (ket:string)\n+    (sep:string)\n+    (inner:Format.formatter -> 'a -> unit)\n+    (ff:Format.formatter)\n+    (az:'a array)\n+    : unit =\n+  fmt_bracketed bra ket\n+    (fmt_arr_sep sep inner)\n+    ff az\n+;;\n+\n+let fmt_to_str (f:Format.formatter -> 'a -> unit) (v:'a) : string =\n+  let buf = Buffer.create 16 in\n+  let bf = Format.formatter_of_buffer buf in\n+    begin\n+      f bf v;\n+      Format.pp_print_flush bf ();\n+      Buffer.contents buf\n+    end\n+;;\n+\n+let sprintf_fmt\n+    (f:Format.formatter -> 'a -> unit)\n+    : (unit -> 'a -> string) =\n+  (fun _ -> fmt_to_str f)\n+;;\n+\n+\n+(*\n+ * Local Variables:\n+ * fill-column: 78;\n+ * indent-tabs-mode: nil\n+ * buffer-file-coding-system: utf-8-unix\n+ * compile-command: \"make -k -C ../.. 2>&1 | sed -e 's/\\\\/x\\\\//x:\\\\//g'\";\n+ * End:\n+ *)"}]}