{"sha": "6eb05c4a14bf233b1a6774074b526b54420deb9d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlYjA1YzRhMTRiZjIzM2IxYTY3NzQwNzRiNTI2YjU0NDIwZGViOWQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-03-13T17:02:04Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-03-13T17:02:04Z"}, "message": "Simplify", "tree": {"sha": "97487f9714a7efffc51a7ae6172e3bda79e2303b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/97487f9714a7efffc51a7ae6172e3bda79e2303b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6eb05c4a14bf233b1a6774074b526b54420deb9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6eb05c4a14bf233b1a6774074b526b54420deb9d", "html_url": "https://github.com/rust-lang/rust/commit/6eb05c4a14bf233b1a6774074b526b54420deb9d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6eb05c4a14bf233b1a6774074b526b54420deb9d/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6638af4a60688c970ac9bafdf3c2d79aa1bc13c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6638af4a60688c970ac9bafdf3c2d79aa1bc13c", "html_url": "https://github.com/rust-lang/rust/commit/a6638af4a60688c970ac9bafdf3c2d79aa1bc13c"}], "stats": {"total": 13, "additions": 5, "deletions": 8}, "files": [{"sha": "45558c4487b44bd1db5e42775b659290df0d60be", "filename": "crates/ra_assists/src/ast_transform.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6eb05c4a14bf233b1a6774074b526b54420deb9d/crates%2Fra_assists%2Fsrc%2Fast_transform.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6eb05c4a14bf233b1a6774074b526b54420deb9d/crates%2Fra_assists%2Fsrc%2Fast_transform.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fast_transform.rs?ref=6eb05c4a14bf233b1a6774074b526b54420deb9d", "patch": "@@ -37,15 +37,14 @@ pub struct SubstituteTypeParams<'a> {\n impl<'a> SubstituteTypeParams<'a> {\n     pub fn for_trait_impl(\n         source_scope: &'a SemanticsScope<'a, RootDatabase>,\n-        db: &'a RootDatabase,\n         // FIXME: there's implicit invariant that `trait_` and  `source_scope` match...\n         trait_: hir::Trait,\n         impl_def: ast::ImplDef,\n     ) -> SubstituteTypeParams<'a> {\n         let substs = get_syntactic_substs(impl_def).unwrap_or_default();\n         let generic_def: hir::GenericDef = trait_.into();\n         let substs_by_param: FxHashMap<_, _> = generic_def\n-            .params(db)\n+            .params(source_scope.db)\n             .into_iter()\n             // this is a trait impl, so we need to skip the first type parameter -- this is a bit hacky\n             .skip(1)\n@@ -104,17 +103,15 @@ impl<'a> AstTransform<'a> for SubstituteTypeParams<'a> {\n pub struct QualifyPaths<'a> {\n     target_scope: &'a SemanticsScope<'a, RootDatabase>,\n     source_scope: &'a SemanticsScope<'a, RootDatabase>,\n-    db: &'a RootDatabase,\n     previous: Box<dyn AstTransform<'a> + 'a>,\n }\n \n impl<'a> QualifyPaths<'a> {\n     pub fn new(\n         target_scope: &'a SemanticsScope<'a, RootDatabase>,\n         source_scope: &'a SemanticsScope<'a, RootDatabase>,\n-        db: &'a RootDatabase,\n     ) -> Self {\n-        Self { target_scope, source_scope, db, previous: Box::new(NullTransformer) }\n+        Self { target_scope, source_scope, previous: Box::new(NullTransformer) }\n     }\n \n     fn get_substitution_inner(\n@@ -132,7 +129,7 @@ impl<'a> QualifyPaths<'a> {\n         let resolution = self.source_scope.resolve_hir_path(&hir_path?)?;\n         match resolution {\n             PathResolution::Def(def) => {\n-                let found_path = from.find_use_path(self.db, def)?;\n+                let found_path = from.find_use_path(self.source_scope.db, def)?;\n                 let mut path = path_to_ast(found_path);\n \n                 let type_args = p"}, {"sha": "e5920b6f67f25c159d819fd24e1724fdec17e796", "filename": "crates/ra_assists/src/handlers/add_missing_impl_members.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6eb05c4a14bf233b1a6774074b526b54420deb9d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6eb05c4a14bf233b1a6774074b526b54420deb9d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs?ref=6eb05c4a14bf233b1a6774074b526b54420deb9d", "patch": "@@ -142,8 +142,8 @@ fn add_missing_impl_members_inner(\n         let n_existing_items = impl_item_list.impl_items().count();\n         let source_scope = sema.scope_for_def(trait_);\n         let target_scope = sema.scope(impl_item_list.syntax());\n-        let ast_transform = QualifyPaths::new(&target_scope, &source_scope, sema.db)\n-            .or(SubstituteTypeParams::for_trait_impl(&source_scope, sema.db, trait_, impl_node));\n+        let ast_transform = QualifyPaths::new(&target_scope, &source_scope)\n+            .or(SubstituteTypeParams::for_trait_impl(&source_scope, trait_, impl_node));\n         let items = missing_items\n             .into_iter()\n             .map(|it| ast_transform::apply(&*ast_transform, it))"}]}