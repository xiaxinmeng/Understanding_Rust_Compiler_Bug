{"sha": "ad32667bc8bb6ca96e3591ccc1f4daef4bf67028", "node_id": "C_kwDOAAsO6NoAKGFkMzI2NjdiYzhiYjZjYTk2ZTM1OTFjY2MxZjRkYWVmNGJmNjcwMjg", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-07-26T08:57:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-26T08:57:00Z"}, "message": "Rollup merge of #99748 - compiler-errors:better-impl-trait-printing, r=fee1-dead\n\nUse full type name instead of just saying `impl Trait` in \"captures lifetime\" error\n\nI think this is very useful, especially when there's >1 `impl Trait`, and it just means passing around a bit more info that we already have access to.", "tree": {"sha": "32feb61883acec33947a50f21536b8c399a243ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/32feb61883acec33947a50f21536b8c399a243ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad32667bc8bb6ca96e3591ccc1f4daef4bf67028", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi36xcCRBK7hj4Ov3rIwAAv/8IAH/wK5e5Thxq/vHiWX8HJasq\nFA7LM7YD8/GChr2xy8gK0xGFFW/YKeeOzspYunw512RyJwjCZ056QRaJrhfgUZJI\nbJRXlGtS8pqKOmEMqE5Qv9Lz1v40YB876B+8JEkGeWOs4FStYWowWplHYzxeewtt\nHpXLXqMZ3p6/FqJKH4fd/0+Qk2IrUUSiJUCgU1YEfGD+LN54U6uGDtsCh7ddegmg\nBZum7xg8JPNbc4UDal94b5XnHae5oNRVPD6S3l0a9QSh3Nk4zcTxESgcNn0eHFAk\nzZGVWzWtNmffFHVJ2AnnpSRXo23+lwi6qnsh20VXXm4bIoQsEmixvy7jPix5ZHw=\n=mBRl\n-----END PGP SIGNATURE-----\n", "payload": "tree 32feb61883acec33947a50f21536b8c399a243ec\nparent 962da8bdcef3c200d6e27550fc83145204cf30ac\nparent d3492ca85205182e30e9baf06e9b1db08e501f56\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1658825820 +0530\ncommitter GitHub <noreply@github.com> 1658825820 +0530\n\nRollup merge of #99748 - compiler-errors:better-impl-trait-printing, r=fee1-dead\n\nUse full type name instead of just saying `impl Trait` in \"captures lifetime\" error\n\nI think this is very useful, especially when there's >1 `impl Trait`, and it just means passing around a bit more info that we already have access to.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad32667bc8bb6ca96e3591ccc1f4daef4bf67028", "html_url": "https://github.com/rust-lang/rust/commit/ad32667bc8bb6ca96e3591ccc1f4daef4bf67028", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad32667bc8bb6ca96e3591ccc1f4daef4bf67028/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "962da8bdcef3c200d6e27550fc83145204cf30ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/962da8bdcef3c200d6e27550fc83145204cf30ac", "html_url": "https://github.com/rust-lang/rust/commit/962da8bdcef3c200d6e27550fc83145204cf30ac"}, {"sha": "d3492ca85205182e30e9baf06e9b1db08e501f56", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3492ca85205182e30e9baf06e9b1db08e501f56", "html_url": "https://github.com/rust-lang/rust/commit/d3492ca85205182e30e9baf06e9b1db08e501f56"}], "stats": {"total": 102, "additions": 52, "deletions": 50}, "files": [{"sha": "176090c3b7a14e9dd78caccfad7a10bca07c4d66", "filename": "compiler/rustc_borrowck/src/diagnostics/region_errors.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ad32667bc8bb6ca96e3591ccc1f4daef4bf67028/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad32667bc8bb6ca96e3591ccc1f4daef4bf67028/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs?ref=ad32667bc8bb6ca96e3591ccc1f4daef4bf67028", "patch": "@@ -78,6 +78,8 @@ pub(crate) enum RegionErrorKind<'tcx> {\n         span: Span,\n         /// The hidden type.\n         hidden_ty: Ty<'tcx>,\n+        /// The opaque type.\n+        key: ty::OpaqueTypeKey<'tcx>,\n         /// The unexpected region.\n         member_region: ty::Region<'tcx>,\n     },\n@@ -205,14 +207,16 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                     }\n                 }\n \n-                RegionErrorKind::UnexpectedHiddenRegion { span, hidden_ty, member_region } => {\n+                RegionErrorKind::UnexpectedHiddenRegion { span, hidden_ty, key, member_region } => {\n                     let named_ty = self.regioncx.name_regions(self.infcx.tcx, hidden_ty);\n+                    let named_key = self.regioncx.name_regions(self.infcx.tcx, key);\n                     let named_region = self.regioncx.name_regions(self.infcx.tcx, member_region);\n                     self.buffer_error(unexpected_hidden_region_diagnostic(\n                         self.infcx.tcx,\n                         span,\n                         named_ty,\n                         named_region,\n+                        named_key,\n                     ));\n                 }\n "}, {"sha": "43253a2aab00cfdd52515ff260643c096acda344", "filename": "compiler/rustc_borrowck/src/member_constraints.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ad32667bc8bb6ca96e3591ccc1f4daef4bf67028/compiler%2Frustc_borrowck%2Fsrc%2Fmember_constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad32667bc8bb6ca96e3591ccc1f4daef4bf67028/compiler%2Frustc_borrowck%2Fsrc%2Fmember_constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fmember_constraints.rs?ref=ad32667bc8bb6ca96e3591ccc1f4daef4bf67028", "patch": "@@ -38,6 +38,8 @@ pub(crate) struct NllMemberConstraint<'tcx> {\n     /// The hidden type in which `R0` appears. (Used in error reporting.)\n     pub(crate) hidden_ty: Ty<'tcx>,\n \n+    pub(crate) key: ty::OpaqueTypeKey<'tcx>,\n+\n     /// The region `R0`.\n     pub(crate) member_region_vid: ty::RegionVid,\n \n@@ -90,6 +92,7 @@ impl<'tcx> MemberConstraintSet<'tcx, ty::RegionVid> {\n             member_region_vid,\n             definition_span: m_c.definition_span,\n             hidden_ty: m_c.hidden_ty,\n+            key: m_c.key,\n             start_index,\n             end_index,\n         });"}, {"sha": "2894c6d29ec43978ec1e5fac7ee3de67e8e1cb56", "filename": "compiler/rustc_borrowck/src/region_infer/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad32667bc8bb6ca96e3591ccc1f4daef4bf67028/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad32667bc8bb6ca96e3591ccc1f4daef4bf67028/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs?ref=ad32667bc8bb6ca96e3591ccc1f4daef4bf67028", "patch": "@@ -1763,6 +1763,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             errors_buffer.push(RegionErrorKind::UnexpectedHiddenRegion {\n                 span: m_c.definition_span,\n                 hidden_ty: m_c.hidden_ty,\n+                key: m_c.key,\n                 member_region,\n             });\n         }"}, {"sha": "d6712b6a4799c9cc1fbe6e885b7e86461f89c3b8", "filename": "compiler/rustc_borrowck/src/region_infer/opaque_types.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ad32667bc8bb6ca96e3591ccc1f4daef4bf67028/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad32667bc8bb6ca96e3591ccc1f4daef4bf67028/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs?ref=ad32667bc8bb6ca96e3591ccc1f4daef4bf67028", "patch": "@@ -246,7 +246,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         // after producing an error for each of them.\n         let definition_ty = instantiated_ty.ty.fold_with(&mut ReverseMapper::new(\n             self.tcx,\n-            def_id,\n+            opaque_type_key,\n             map,\n             instantiated_ty.ty,\n             instantiated_ty.span,\n@@ -429,7 +429,7 @@ fn check_opaque_type_parameter_valid(\n struct ReverseMapper<'tcx> {\n     tcx: TyCtxt<'tcx>,\n \n-    opaque_type_def_id: LocalDefId,\n+    key: ty::OpaqueTypeKey<'tcx>,\n     map: FxHashMap<GenericArg<'tcx>, GenericArg<'tcx>>,\n     map_missing_regions_to_empty: bool,\n \n@@ -443,14 +443,14 @@ struct ReverseMapper<'tcx> {\n impl<'tcx> ReverseMapper<'tcx> {\n     fn new(\n         tcx: TyCtxt<'tcx>,\n-        opaque_type_def_id: LocalDefId,\n+        key: ty::OpaqueTypeKey<'tcx>,\n         map: FxHashMap<GenericArg<'tcx>, GenericArg<'tcx>>,\n         hidden_ty: Ty<'tcx>,\n         span: Span,\n     ) -> Self {\n         Self {\n             tcx,\n-            opaque_type_def_id,\n+            key,\n             map,\n             map_missing_regions_to_empty: false,\n             hidden_ty: Some(hidden_ty),\n@@ -504,7 +504,7 @@ impl<'tcx> TypeFolder<'tcx> for ReverseMapper<'tcx> {\n             }\n         }\n \n-        let generics = self.tcx().generics_of(self.opaque_type_def_id);\n+        let generics = self.tcx().generics_of(self.key.def_id);\n         match self.map.get(&r.into()).map(|k| k.unpack()) {\n             Some(GenericArgKind::Lifetime(r1)) => r1,\n             Some(u) => panic!(\"region mapped to unexpected kind: {:?}\", u),\n@@ -513,9 +513,10 @@ impl<'tcx> TypeFolder<'tcx> for ReverseMapper<'tcx> {\n                 if let Some(hidden_ty) = self.hidden_ty.take() {\n                     unexpected_hidden_region_diagnostic(\n                         self.tcx,\n-                        self.tcx.def_span(self.opaque_type_def_id),\n+                        self.tcx.def_span(self.key.def_id),\n                         hidden_ty,\n                         r,\n+                        self.key,\n                     )\n                     .emit();\n                 }"}, {"sha": "be764cfe83bc3eceea37cc88803a5709423a524f", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad32667bc8bb6ca96e3591ccc1f4daef4bf67028/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad32667bc8bb6ca96e3591ccc1f4daef4bf67028/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=ad32667bc8bb6ca96e3591ccc1f4daef4bf67028", "patch": "@@ -237,12 +237,14 @@ pub fn unexpected_hidden_region_diagnostic<'tcx>(\n     span: Span,\n     hidden_ty: Ty<'tcx>,\n     hidden_region: ty::Region<'tcx>,\n+    opaque_ty: ty::OpaqueTypeKey<'tcx>,\n ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n+    let opaque_ty = tcx.mk_opaque(opaque_ty.def_id.to_def_id(), opaque_ty.substs);\n     let mut err = struct_span_err!(\n         tcx.sess,\n         span,\n         E0700,\n-        \"hidden type for `impl Trait` captures lifetime that does not appear in bounds\",\n+        \"hidden type for `{opaque_ty}` captures lifetime that does not appear in bounds\",\n     );\n \n     // Explain the region we are capturing."}, {"sha": "0ac6e8c541b5511e9c81cad62e10ae5456f5f519", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad32667bc8bb6ca96e3591ccc1f4daef4bf67028/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad32667bc8bb6ca96e3591ccc1f4daef4bf67028/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=ad32667bc8bb6ca96e3591ccc1f4daef4bf67028", "patch": "@@ -966,14 +966,14 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     #[instrument(skip(self), level = \"debug\")]\n     pub fn member_constraint(\n         &self,\n-        opaque_type_def_id: LocalDefId,\n+        key: ty::OpaqueTypeKey<'tcx>,\n         definition_span: Span,\n         hidden_ty: Ty<'tcx>,\n         region: ty::Region<'tcx>,\n         in_regions: &Lrc<Vec<ty::Region<'tcx>>>,\n     ) {\n         self.inner.borrow_mut().unwrap_region_constraints().member_constraint(\n-            opaque_type_def_id,\n+            key,\n             definition_span,\n             hidden_ty,\n             region,"}, {"sha": "a6c5ed579c73656f6a157136bbb7da86f4920504", "filename": "compiler/rustc_infer/src/infer/opaque_types.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ad32667bc8bb6ca96e3591ccc1f4daef4bf67028/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad32667bc8bb6ca96e3591ccc1f4daef4bf67028/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs?ref=ad32667bc8bb6ca96e3591ccc1f4daef4bf67028", "patch": "@@ -394,15 +394,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         );\n \n         concrete_ty.visit_with(&mut ConstrainOpaqueTypeRegionVisitor {\n-            op: |r| {\n-                self.member_constraint(\n-                    opaque_type_key.def_id,\n-                    span,\n-                    concrete_ty,\n-                    r,\n-                    &choice_regions,\n-                )\n-            },\n+            op: |r| self.member_constraint(opaque_type_key, span, concrete_ty, r, &choice_regions),\n         });\n     }\n "}, {"sha": "0d4472a1cfd9c11944821f2992dca524e9458c39", "filename": "compiler/rustc_infer/src/infer/region_constraints/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ad32667bc8bb6ca96e3591ccc1f4daef4bf67028/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad32667bc8bb6ca96e3591ccc1f4daef4bf67028/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs?ref=ad32667bc8bb6ca96e3591ccc1f4daef4bf67028", "patch": "@@ -12,7 +12,6 @@ use rustc_data_structures::intern::Interned;\n use rustc_data_structures::sync::Lrc;\n use rustc_data_structures::undo_log::UndoLogs;\n use rustc_data_structures::unify as ut;\n-use rustc_hir::def_id::LocalDefId;\n use rustc_index::vec::IndexVec;\n use rustc_middle::infer::unify_key::{RegionVidKey, UnifiedRegion};\n use rustc_middle::ty::ReStatic;\n@@ -533,7 +532,7 @@ impl<'tcx> RegionConstraintCollector<'_, 'tcx> {\n \n     pub fn member_constraint(\n         &mut self,\n-        opaque_type_def_id: LocalDefId,\n+        key: ty::OpaqueTypeKey<'tcx>,\n         definition_span: Span,\n         hidden_ty: Ty<'tcx>,\n         member_region: ty::Region<'tcx>,\n@@ -546,7 +545,7 @@ impl<'tcx> RegionConstraintCollector<'_, 'tcx> {\n         }\n \n         self.data.member_constraints.push(MemberConstraint {\n-            opaque_type_def_id,\n+            key,\n             definition_span,\n             hidden_ty,\n             member_region,"}, {"sha": "38868c210495374dacfdec9431410001cad04000", "filename": "compiler/rustc_middle/src/infer/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ad32667bc8bb6ca96e3591ccc1f4daef4bf67028/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad32667bc8bb6ca96e3591ccc1f4daef4bf67028/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fmod.rs?ref=ad32667bc8bb6ca96e3591ccc1f4daef4bf67028", "patch": "@@ -2,9 +2,8 @@ pub mod canonical;\n pub mod unify_key;\n \n use crate::ty::Region;\n-use crate::ty::Ty;\n+use crate::ty::{OpaqueTypeKey, Ty};\n use rustc_data_structures::sync::Lrc;\n-use rustc_hir::def_id::LocalDefId;\n use rustc_span::Span;\n \n /// Requires that `region` must be equal to one of the regions in `choice_regions`.\n@@ -15,8 +14,9 @@ use rustc_span::Span;\n /// ```\n #[derive(Debug, Clone, HashStable, TypeFoldable, TypeVisitable, Lift)]\n pub struct MemberConstraint<'tcx> {\n-    /// The `DefId` of the opaque type causing this constraint: used for error reporting.\n-    pub opaque_type_def_id: LocalDefId,\n+    /// The `DefId` and substs of the opaque type causing this constraint.\n+    /// Used for error reporting.\n+    pub key: OpaqueTypeKey<'tcx>,\n \n     /// The span where the hidden type was instantiated.\n     pub definition_span: Span,"}, {"sha": "3128b4df4e2d1248874d54199e1ab66f109d9095", "filename": "src/test/ui/async-await/multiple-lifetimes/ret-impl-trait-one.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad32667bc8bb6ca96e3591ccc1f4daef4bf67028/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad32667bc8bb6ca96e3591ccc1f4daef4bf67028/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.stderr?ref=ad32667bc8bb6ca96e3591ccc1f4daef4bf67028", "patch": "@@ -13,7 +13,7 @@ LL | | }\n    |\n    = help: consider adding the following bound: `'a: 'b`\n \n-error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+error[E0700]: hidden type for `impl Trait<'a>` captures lifetime that does not appear in bounds\n   --> $DIR/ret-impl-trait-one.rs:16:80\n    |\n LL |   async fn async_ret_impl_trait1<'a, 'b>(a: &'a u8, b: &'b u8) -> impl Trait<'a> {"}, {"sha": "efc228de58be5d482c231114cc102698ea53366b", "filename": "src/test/ui/impl-trait/hidden-lifetimes.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad32667bc8bb6ca96e3591ccc1f4daef4bf67028/src%2Ftest%2Fui%2Fimpl-trait%2Fhidden-lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad32667bc8bb6ca96e3591ccc1f4daef4bf67028/src%2Ftest%2Fui%2Fimpl-trait%2Fhidden-lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fhidden-lifetimes.stderr?ref=ad32667bc8bb6ca96e3591ccc1f4daef4bf67028", "patch": "@@ -1,4 +1,4 @@\n-error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+error[E0700]: hidden type for `impl Swap` captures lifetime that does not appear in bounds\n   --> $DIR/hidden-lifetimes.rs:29:5\n    |\n LL | fn hide_ref<'a, 'b, T: 'static>(x: &'a mut &'b T) -> impl Swap + 'a {\n@@ -11,7 +11,7 @@ help: to declare that the `impl Trait` captures `'b`, you can add an explicit `'\n LL | fn hide_ref<'a, 'b, T: 'static>(x: &'a mut &'b T) -> impl Swap + 'a + 'b {\n    |                                                                     ++++\n \n-error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+error[E0700]: hidden type for `impl Swap` captures lifetime that does not appear in bounds\n   --> $DIR/hidden-lifetimes.rs:46:5\n    |\n LL | fn hide_rc_refcell<'a, 'b: 'a, T: 'static>(x: Rc<RefCell<&'b T>>) -> impl Swap + 'a {"}, {"sha": "2a2be6b7429926c9604f9e102f439f3cffb6942a", "filename": "src/test/ui/impl-trait/multiple-lifetimes/error-handling-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad32667bc8bb6ca96e3591ccc1f4daef4bf67028/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad32667bc8bb6ca96e3591ccc1f4daef4bf67028/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling-2.rs?ref=ad32667bc8bb6ca96e3591ccc1f4daef4bf67028", "patch": "@@ -20,7 +20,7 @@ fn foo<'a: 'b, 'b, 'c>(x: &'static i32, mut y: &'a i32) -> E<'b, 'c> {\n         let _: &'b i32 = *u.0;\n     }\n     u.0\n-    //~^ ERROR hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+    //~^ ERROR hidden type for `E<'b, 'c>` captures lifetime that does not appear in bounds\n }\n \n fn main() {}"}, {"sha": "90875708094049b19c3d45e6aa547e81a8c418a1", "filename": "src/test/ui/impl-trait/multiple-lifetimes/error-handling-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad32667bc8bb6ca96e3591ccc1f4daef4bf67028/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad32667bc8bb6ca96e3591ccc1f4daef4bf67028/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling-2.stderr?ref=ad32667bc8bb6ca96e3591ccc1f4daef4bf67028", "patch": "@@ -1,4 +1,4 @@\n-error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+error[E0700]: hidden type for `E<'b, 'c>` captures lifetime that does not appear in bounds\n   --> $DIR/error-handling-2.rs:22:5\n    |\n LL | fn foo<'a: 'b, 'b, 'c>(x: &'static i32, mut y: &'a i32) -> E<'b, 'c> {"}, {"sha": "c6eea5323fd80f521780625cf3092fef5fbda1e9", "filename": "src/test/ui/impl-trait/multiple-lifetimes/ordinary-bounds-unrelated.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad32667bc8bb6ca96e3591ccc1f4daef4bf67028/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unrelated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad32667bc8bb6ca96e3591ccc1f4daef4bf67028/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unrelated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unrelated.rs?ref=ad32667bc8bb6ca96e3591ccc1f4daef4bf67028", "patch": "@@ -26,7 +26,7 @@ where\n     // 'a in ['d, 'e]\n     // ```\n     if condition() { a } else { b }\n-    //~^ ERROR hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+    //~^ ERROR hidden type for `impl Trait<'d, 'e>` captures lifetime that does not appear in bounds\n }\n \n fn condition() -> bool {"}, {"sha": "cb1dc0b7d50ae3cf7061270fb5eec23bf2c7fdc5", "filename": "src/test/ui/impl-trait/multiple-lifetimes/ordinary-bounds-unrelated.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad32667bc8bb6ca96e3591ccc1f4daef4bf67028/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unrelated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad32667bc8bb6ca96e3591ccc1f4daef4bf67028/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unrelated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unrelated.stderr?ref=ad32667bc8bb6ca96e3591ccc1f4daef4bf67028", "patch": "@@ -1,4 +1,4 @@\n-error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+error[E0700]: hidden type for `impl Trait<'d, 'e>` captures lifetime that does not appear in bounds\n   --> $DIR/ordinary-bounds-unrelated.rs:28:33\n    |\n LL | fn upper_bounds<'a, 'b, 'c, 'd, 'e>(a: Ordinary<'a>, b: Ordinary<'b>) -> impl Trait<'d, 'e>"}, {"sha": "adcbca2a438b4132d12c5b2e31e11e6f983b2ce9", "filename": "src/test/ui/impl-trait/multiple-lifetimes/ordinary-bounds-unsuited.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad32667bc8bb6ca96e3591ccc1f4daef4bf67028/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unsuited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad32667bc8bb6ca96e3591ccc1f4daef4bf67028/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unsuited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unsuited.rs?ref=ad32667bc8bb6ca96e3591ccc1f4daef4bf67028", "patch": "@@ -29,7 +29,7 @@ fn upper_bounds<'a, 'b>(a: Ordinary<'a>, b: Ordinary<'b>) -> impl Trait<'a, 'b>\n     //\n     // We are forced to pick that '0 = 'e, because only 'e is outlived by *both* 'a and 'b.\n     if condition() { a } else { b }\n-    //~^ ERROR hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+    //~^ ERROR hidden type for `impl Trait<'a, 'b>` captures lifetime that does not appear in bounds\n }\n \n fn condition() -> bool {"}, {"sha": "4388e6601a6cf3d5cb092f506555c89364395af6", "filename": "src/test/ui/impl-trait/multiple-lifetimes/ordinary-bounds-unsuited.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad32667bc8bb6ca96e3591ccc1f4daef4bf67028/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unsuited.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad32667bc8bb6ca96e3591ccc1f4daef4bf67028/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unsuited.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unsuited.stderr?ref=ad32667bc8bb6ca96e3591ccc1f4daef4bf67028", "patch": "@@ -1,4 +1,4 @@\n-error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+error[E0700]: hidden type for `impl Trait<'a, 'b>` captures lifetime that does not appear in bounds\n   --> $DIR/ordinary-bounds-unsuited.rs:31:33\n    |\n LL | fn upper_bounds<'a, 'b>(a: Ordinary<'a>, b: Ordinary<'b>) -> impl Trait<'a, 'b>"}, {"sha": "16767abd72241be5988d25e8dc2593e51aa5aa5a", "filename": "src/test/ui/impl-trait/must_outlive_least_region_or_bound.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ad32667bc8bb6ca96e3591ccc1f4daef4bf67028/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad32667bc8bb6ca96e3591ccc1f4daef4bf67028/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr?ref=ad32667bc8bb6ca96e3591ccc1f4daef4bf67028", "patch": "@@ -1,4 +1,4 @@\n-error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+error[E0700]: hidden type for `impl Copy` captures lifetime that does not appear in bounds\n   --> $DIR/must_outlive_least_region_or_bound.rs:3:35\n    |\n LL | fn elided(x: &i32) -> impl Copy { x }\n@@ -11,7 +11,7 @@ help: to declare that the `impl Trait` captures `'_`, you can add an explicit `'\n LL | fn elided(x: &i32) -> impl Copy + '_ { x }\n    |                                 ++++\n \n-error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+error[E0700]: hidden type for `impl Copy` captures lifetime that does not appear in bounds\n   --> $DIR/must_outlive_least_region_or_bound.rs:6:44\n    |\n LL | fn explicit<'a>(x: &'a i32) -> impl Copy { x }\n@@ -96,7 +96,7 @@ help: alternatively, add an explicit `'static` bound to this reference\n LL | fn with_bound<'a>(x: &'static i32) -> impl LifetimeTrait<'a> + 'static { x }\n    |                      ~~~~~~~~~~~~\n \n-error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+error[E0700]: hidden type for `impl Fn(&'a u32)` captures lifetime that does not appear in bounds\n   --> $DIR/must_outlive_least_region_or_bound.rs:38:5\n    |\n LL | fn move_lifetime_into_fn<'a, 'b>(x: &'a u32, y: &'b u32) -> impl Fn(&'a u32) {"}, {"sha": "fe60c76ca1755049314923ecddb553e30b05c77b", "filename": "src/test/ui/impl-trait/region-escape-via-bound.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad32667bc8bb6ca96e3591ccc1f4daef4bf67028/src%2Ftest%2Fui%2Fimpl-trait%2Fregion-escape-via-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad32667bc8bb6ca96e3591ccc1f4daef4bf67028/src%2Ftest%2Fui%2Fimpl-trait%2Fregion-escape-via-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fregion-escape-via-bound.rs?ref=ad32667bc8bb6ca96e3591ccc1f4daef4bf67028", "patch": "@@ -15,7 +15,7 @@ fn foo<'x, 'y>(x: Cell<&'x u32>) -> impl Trait<'y>\n where 'x: 'y\n {\n     x\n-    //~^ ERROR hidden type for `impl Trait` captures lifetime that does not appear in bounds [E0700]\n+    //~^ ERROR hidden type for `impl Trait<'y>` captures lifetime that does not appear in bounds [E0700]\n }\n \n fn main() { }"}, {"sha": "fdb2fe022b4d250d77cd044dda70677cfe347983", "filename": "src/test/ui/impl-trait/region-escape-via-bound.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad32667bc8bb6ca96e3591ccc1f4daef4bf67028/src%2Ftest%2Fui%2Fimpl-trait%2Fregion-escape-via-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad32667bc8bb6ca96e3591ccc1f4daef4bf67028/src%2Ftest%2Fui%2Fimpl-trait%2Fregion-escape-via-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fregion-escape-via-bound.stderr?ref=ad32667bc8bb6ca96e3591ccc1f4daef4bf67028", "patch": "@@ -1,4 +1,4 @@\n-error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+error[E0700]: hidden type for `impl Trait<'y>` captures lifetime that does not appear in bounds\n   --> $DIR/region-escape-via-bound.rs:17:5\n    |\n LL | fn foo<'x, 'y>(x: Cell<&'x u32>) -> impl Trait<'y>"}, {"sha": "b86815231550367968001756baaf66b79fafe9c3", "filename": "src/test/ui/impl-trait/static-return-lifetime-infered.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ad32667bc8bb6ca96e3591ccc1f4daef4bf67028/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad32667bc8bb6ca96e3591ccc1f4daef4bf67028/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.stderr?ref=ad32667bc8bb6ca96e3591ccc1f4daef4bf67028", "patch": "@@ -1,4 +1,4 @@\n-error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+error[E0700]: hidden type for `impl Iterator<Item = u32>` captures lifetime that does not appear in bounds\n   --> $DIR/static-return-lifetime-infered.rs:7:9\n    |\n LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> {\n@@ -11,7 +11,7 @@ help: to declare that the `impl Trait` captures `'_`, you can add an explicit `'\n LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> + '_ {\n    |                                                           ++++\n \n-error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+error[E0700]: hidden type for `impl Iterator<Item = u32>` captures lifetime that does not appear in bounds\n   --> $DIR/static-return-lifetime-infered.rs:7:9\n    |\n LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> {\n@@ -24,7 +24,7 @@ help: to declare that the `impl Trait` captures `'_`, you can add an explicit `'\n LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> + '_ {\n    |                                                           ++++\n \n-error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+error[E0700]: hidden type for `impl Iterator<Item = u32>` captures lifetime that does not appear in bounds\n   --> $DIR/static-return-lifetime-infered.rs:12:9\n    |\n LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> {\n@@ -37,7 +37,7 @@ help: to declare that the `impl Trait` captures `'a`, you can add an explicit `'\n LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> + 'a {\n    |                                                             ++++\n \n-error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+error[E0700]: hidden type for `impl Iterator<Item = u32>` captures lifetime that does not appear in bounds\n   --> $DIR/static-return-lifetime-infered.rs:12:9\n    |\n LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> {"}, {"sha": "260b9b59772ef789dce466859d8b913896e7ec65", "filename": "src/test/ui/nll/issue-73159-rpit-static.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad32667bc8bb6ca96e3591ccc1f4daef4bf67028/src%2Ftest%2Fui%2Fnll%2Fissue-73159-rpit-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad32667bc8bb6ca96e3591ccc1f4daef4bf67028/src%2Ftest%2Fui%2Fnll%2Fissue-73159-rpit-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-73159-rpit-static.stderr?ref=ad32667bc8bb6ca96e3591ccc1f4daef4bf67028", "patch": "@@ -1,4 +1,4 @@\n-error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+error[E0700]: hidden type for `impl Iterator<Item = u8>` captures lifetime that does not appear in bounds\n   --> $DIR/issue-73159-rpit-static.rs:8:9\n    |\n LL | impl<'a> Foo<'a> {"}, {"sha": "330c6fafa2d61a86eec9139b953d195909120a1c", "filename": "src/test/ui/nll/ty-outlives/impl-trait-captures.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad32667bc8bb6ca96e3591ccc1f4daef4bf67028/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-captures.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad32667bc8bb6ca96e3591ccc1f4daef4bf67028/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-captures.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-captures.stderr?ref=ad32667bc8bb6ca96e3591ccc1f4daef4bf67028", "patch": "@@ -1,4 +1,4 @@\n-error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+error[E0700]: hidden type for `Opaque(DefId(0:11 ~ impl_trait_captures[1afc]::foo::{opaque#0}), [ReStatic, T, ReEarlyBound(0, 'a)])` captures lifetime that does not appear in bounds\n   --> $DIR/impl-trait-captures.rs:11:5\n    |\n LL | fn foo<'a, T>(x: &T) -> impl Foo<'a> {"}, {"sha": "7e7d60d0ff90aef2027871ce6ede64c0200cbab6", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_impl_trait-async.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad32667bc8bb6ca96e3591ccc1f4daef4bf67028/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad32667bc8bb6ca96e3591ccc1f4daef4bf67028/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.stderr?ref=ad32667bc8bb6ca96e3591ccc1f4daef4bf67028", "patch": "@@ -1,4 +1,4 @@\n-error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+error[E0700]: hidden type for `impl Clone` captures lifetime that does not appear in bounds\n   --> $DIR/arbitrary_self_types_pin_lifetime_impl_trait-async.rs:8:48\n    |\n LL |     async fn f(self: Pin<&Self>) -> impl Clone { self }"}, {"sha": "30d2250c0c81df7df862e1a5cef0def48e0f6377", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_impl_trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad32667bc8bb6ca96e3591ccc1f4daef4bf67028/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad32667bc8bb6ca96e3591ccc1f4daef4bf67028/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.stderr?ref=ad32667bc8bb6ca96e3591ccc1f4daef4bf67028", "patch": "@@ -1,4 +1,4 @@\n-error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+error[E0700]: hidden type for `impl Clone` captures lifetime that does not appear in bounds\n   --> $DIR/arbitrary_self_types_pin_lifetime_impl_trait.rs:6:44\n    |\n LL |     fn f(self: Pin<&Self>) -> impl Clone { self }"}, {"sha": "b641f5941dcef64708f90cc6cdc2843bf40489cf", "filename": "src/test/ui/suggestions/lifetimes/missing-lifetimes-in-signature.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad32667bc8bb6ca96e3591ccc1f4daef4bf67028/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad32667bc8bb6ca96e3591ccc1f4daef4bf67028/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.rs?ref=ad32667bc8bb6ca96e3591ccc1f4daef4bf67028", "patch": "@@ -17,7 +17,7 @@ where\n     G: Get<T>,\n {\n     move || {\n-        //~^ ERROR hidden type for `impl Trait` captures lifetime\n+        //~^ ERROR hidden type for `impl FnOnce()` captures lifetime\n         *dest = g.get();\n     }\n }"}, {"sha": "0d749f04bea770154c7c43b7b1b85e4de6a8cef3", "filename": "src/test/ui/suggestions/lifetimes/missing-lifetimes-in-signature.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad32667bc8bb6ca96e3591ccc1f4daef4bf67028/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad32667bc8bb6ca96e3591ccc1f4daef4bf67028/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.stderr?ref=ad32667bc8bb6ca96e3591ccc1f4daef4bf67028", "patch": "@@ -6,7 +6,7 @@ LL | fn baz<G: 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n    |        |\n    |        help: consider introducing lifetime `'a` here: `'a,`\n \n-error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+error[E0700]: hidden type for `impl FnOnce()` captures lifetime that does not appear in bounds\n   --> $DIR/missing-lifetimes-in-signature.rs:19:5\n    |\n LL |   fn foo<G, T>(g: G, dest: &mut T) -> impl FnOnce()"}]}