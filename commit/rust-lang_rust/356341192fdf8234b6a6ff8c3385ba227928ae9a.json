{"sha": "356341192fdf8234b6a6ff8c3385ba227928ae9a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1NjM0MTE5MmZkZjgyMzRiNmE2ZmY4YzMzODViYTIyNzkyOGFlOWE=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2013-08-13T00:49:30Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2013-08-15T02:06:17Z"}, "message": "Ported check_loop from oldvisit to <V:Visit> trait API.", "tree": {"sha": "5b3fb1b5fadbe6deb4f30ed027e506ca6ee59767", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b3fb1b5fadbe6deb4f30ed027e506ca6ee59767"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/356341192fdf8234b6a6ff8c3385ba227928ae9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/356341192fdf8234b6a6ff8c3385ba227928ae9a", "html_url": "https://github.com/rust-lang/rust/commit/356341192fdf8234b6a6ff8c3385ba227928ae9a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/356341192fdf8234b6a6ff8c3385ba227928ae9a/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4127c67406d305f6c4fc452787d0a5ca8a3de049", "url": "https://api.github.com/repos/rust-lang/rust/commits/4127c67406d305f6c4fc452787d0a5ca8a3de049", "html_url": "https://github.com/rust-lang/rust/commit/4127c67406d305f6c4fc452787d0a5ca8a3de049"}], "stats": {"total": 54, "additions": 30, "deletions": 24}, "files": [{"sha": "35705dff6ef98118bb50b9f9ea0a59e00499dfeb", "filename": "src/librustc/middle/check_loop.rs", "status": "modified", "additions": 30, "deletions": 24, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/356341192fdf8234b6a6ff8c3385ba227928ae9a/src%2Flibrustc%2Fmiddle%2Fcheck_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/356341192fdf8234b6a6ff8c3385ba227928ae9a/src%2Flibrustc%2Fmiddle%2Fcheck_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_loop.rs?ref=356341192fdf8234b6a6ff8c3385ba227928ae9a", "patch": "@@ -12,58 +12,64 @@\n use middle::ty;\n \n use syntax::ast::*;\n-use syntax::oldvisit;\n+use syntax::visit;\n+use syntax::visit::Visitor;\n \n #[deriving(Clone)]\n pub struct Context {\n     in_loop: bool,\n     can_ret: bool\n }\n \n+struct CheckLoopVisitor {\n+    tcx: ty::ctxt,\n+}\n+\n pub fn check_crate(tcx: ty::ctxt, crate: &Crate) {\n-    oldvisit::visit_crate(crate,\n-                          (Context { in_loop: false, can_ret: true },\n-                          oldvisit::mk_vt(@oldvisit::Visitor {\n-        visit_item: |i, (_cx, v)| {\n-            oldvisit::visit_item(i, (Context {\n+    visit::walk_crate(&mut CheckLoopVisitor { tcx: tcx },\n+                      crate,\n+                      Context { in_loop: false, can_ret: true });\n+}\n+\n+impl Visitor<Context> for CheckLoopVisitor {\n+    fn visit_item(&mut self, i:@item, _cx:Context) {\n+        visit::walk_item(self, i, Context {\n                                     in_loop: false,\n                                     can_ret: true\n-                                 }, v));\n-        },\n-        visit_expr: |e: @expr, (cx, v): (Context, oldvisit::vt<Context>)| {\n+                                  });\n+    }\n+\n+    fn visit_expr(&mut self, e:@expr, cx:Context) {\n+\n             match e.node {\n               expr_while(e, ref b) => {\n-                (v.visit_expr)(e, (cx, v));\n-                (v.visit_block)(b, (Context { in_loop: true,.. cx }, v));\n+                self.visit_expr(e, cx);\n+                self.visit_block(b, Context { in_loop: true,.. cx });\n               }\n               expr_loop(ref b, _) => {\n-                (v.visit_block)(b, (Context { in_loop: true,.. cx }, v));\n+                self.visit_block(b, Context { in_loop: true,.. cx });\n               }\n               expr_fn_block(_, ref b) => {\n-                (v.visit_block)(b, (Context {\n-                                         in_loop: false,\n-                                         can_ret: false\n-                                      }, v));\n+                self.visit_block(b, Context { in_loop: false, can_ret: false });\n               }\n               expr_break(_) => {\n                 if !cx.in_loop {\n-                    tcx.sess.span_err(e.span, \"`break` outside of loop\");\n+                    self.tcx.sess.span_err(e.span, \"`break` outside of loop\");\n                 }\n               }\n               expr_again(_) => {\n                 if !cx.in_loop {\n-                    tcx.sess.span_err(e.span, \"`loop` outside of loop\");\n+                    self.tcx.sess.span_err(e.span, \"`loop` outside of loop\");\n                 }\n               }\n               expr_ret(oe) => {\n                 if !cx.can_ret {\n-                    tcx.sess.span_err(e.span, \"`return` in block function\");\n+                    self.tcx.sess.span_err(e.span, \"`return` in block function\");\n                 }\n-                oldvisit::visit_expr_opt(oe, (cx, v));\n+                visit::walk_expr_opt(self, oe, cx);\n               }\n-              _ => oldvisit::visit_expr(e, (cx, v))\n+              _ => visit::walk_expr(self, e, cx)\n             }\n-        },\n-        .. *oldvisit::default_visitor()\n-    })));\n+\n+    }\n }"}]}