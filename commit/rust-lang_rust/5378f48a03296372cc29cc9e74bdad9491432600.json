{"sha": "5378f48a03296372cc29cc9e74bdad9491432600", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzNzhmNDhhMDMyOTYzNzJjYzI5Y2M5ZTc0YmRhZDk0OTE0MzI2MDA=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2011-06-10T21:57:39Z"}, "committer": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2011-06-14T23:09:17Z"}, "message": "Remove vec_append_glue from the compiler.", "tree": {"sha": "f934a24a4309c910fd74b7b335b6c87bfdd59fd1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f934a24a4309c910fd74b7b335b6c87bfdd59fd1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5378f48a03296372cc29cc9e74bdad9491432600", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5378f48a03296372cc29cc9e74bdad9491432600", "html_url": "https://github.com/rust-lang/rust/commit/5378f48a03296372cc29cc9e74bdad9491432600", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5378f48a03296372cc29cc9e74bdad9491432600/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95def699f10b9ec92721d6057a86c454c3c64122", "url": "https://api.github.com/repos/rust-lang/rust/commits/95def699f10b9ec92721d6057a86c454c3c64122", "html_url": "https://github.com/rust-lang/rust/commit/95def699f10b9ec92721d6057a86c454c3c64122"}], "stats": {"total": 43, "additions": 4, "deletions": 39}, "files": [{"sha": "107905f50851e3ddc711fdac472ea442979eb148", "filename": "src/comp/back/abi.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5378f48a03296372cc29cc9e74bdad9491432600/src%2Fcomp%2Fback%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5378f48a03296372cc29cc9e74bdad9491432600/src%2Fcomp%2Fback%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Fabi.rs?ref=5378f48a03296372cc29cc9e74bdad9491432600", "patch": "@@ -88,8 +88,8 @@ fn bzero_glue_name() -> str {\n     ret \"rust_bzero_glue\";\n }\n \n-fn vec_append_glue_name() -> str {\n-    ret \"rust_vec_append_glue\";\n+fn yield_glue_name() -> str {\n+    ret \"rust_yield_glue\";\n }\n \n fn no_op_type_glue_name() -> str {"}, {"sha": "02e981d45271b1fb9380fc6804c898d8e84942d1", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 2, "deletions": 37, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/5378f48a03296372cc29cc9e74bdad9491432600/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5378f48a03296372cc29cc9e74bdad9491432600/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=5378f48a03296372cc29cc9e74bdad9491432600", "patch": "@@ -85,8 +85,7 @@ state obj namegen(mutable int i) {\n \n type derived_tydesc_info = rec(ValueRef lltydesc, bool escapes);\n \n-type glue_fns = rec(ValueRef no_op_type_glue,\n-                    ValueRef vec_append_glue);\n+type glue_fns = rec(ValueRef no_op_type_glue);\n \n type tydesc_info = rec(ty::t ty,\n                        ValueRef tydesc,\n@@ -8724,39 +8723,6 @@ fn make_no_op_type_glue(ValueRef fun) {\n     new_builder(llbb).RetVoid();\n }\n \n-fn make_vec_append_glue(ModuleRef llmod, type_names tn) -> ValueRef {\n-    /*\n-     * Args to vec_append_glue:\n-     *\n-     *   0. (Implicit) task ptr\n-     *\n-     *   1. Pointer to the tydesc of the vec, so that we can tell if it's gc\n-     *      mem, and have a tydesc to pass to malloc if we're allocating anew.\n-     *\n-     *   2. Pointer to the tydesc of the vec's stored element type, so that\n-     *      elements can be copied to a newly alloc'ed vec if one must be\n-     *      created.\n-     *\n-     *   3. Dst vec ptr (i.e. ptr to ptr to rust_vec).\n-     *\n-     *   4. Src vec (i.e. ptr to rust_vec).\n-     *\n-     *   5. Flag indicating whether to skip trailing null on dst.\n-     *\n-     */\n-\n-    auto ty = T_fn([T_taskptr(tn),\n-                       T_ptr(T_tydesc(tn)),\n-                       T_ptr(T_tydesc(tn)),\n-                       T_ptr(T_opaque_vec_ptr()),\n-                       T_opaque_vec_ptr(), T_bool()],\n-                   T_void());\n-\n-    auto llfn = decl_fastcall_fn(llmod, abi::vec_append_glue_name(), ty);\n-    ret llfn;\n-}\n-\n-\n fn vec_fill(&@block_ctxt bcx, ValueRef v) -> ValueRef {\n     ret bcx.build.Load(bcx.build.GEP(v, [C_int(0),\n                                             C_int(abi::vec_elt_fill)]));\n@@ -8769,8 +8735,7 @@ fn vec_p0(&@block_ctxt bcx, ValueRef v) -> ValueRef {\n }\n \n fn make_glues(ModuleRef llmod, &type_names tn) -> @glue_fns {\n-    ret @rec(no_op_type_glue = decl_no_op_type_glue(llmod, tn),\n-             vec_append_glue = make_vec_append_glue(llmod, tn));\n+    ret @rec(no_op_type_glue = decl_no_op_type_glue(llmod, tn));\n }\n \n fn make_common_glue(&session::session sess, &str output) {"}]}