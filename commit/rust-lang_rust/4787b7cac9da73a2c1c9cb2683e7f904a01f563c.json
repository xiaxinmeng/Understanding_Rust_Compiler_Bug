{"sha": "4787b7cac9da73a2c1c9cb2683e7f904a01f563c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3ODdiN2NhYzlkYTczYTJjMWM5Y2IyNjgzZTdmOTA0YTAxZjU2M2M=", "commit": {"author": {"name": "Denis Merigoux", "email": "denis.merigoux@gmail.com", "date": "2018-09-06T23:04:20Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-11-16T12:11:59Z"}, "message": "Removed phantomdata no longer necessary\nBecause CodegenContext doesn't implement Backend anymore", "tree": {"sha": "0064102c97d347aa09fdf5315b8c943d00e08de5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0064102c97d347aa09fdf5315b8c943d00e08de5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4787b7cac9da73a2c1c9cb2683e7f904a01f563c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4787b7cac9da73a2c1c9cb2683e7f904a01f563c", "html_url": "https://github.com/rust-lang/rust/commit/4787b7cac9da73a2c1c9cb2683e7f904a01f563c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4787b7cac9da73a2c1c9cb2683e7f904a01f563c/comments", "author": {"login": "denismerigoux", "id": 1766128, "node_id": "MDQ6VXNlcjE3NjYxMjg=", "avatar_url": "https://avatars.githubusercontent.com/u/1766128?v=4", "gravatar_id": "", "url": "https://api.github.com/users/denismerigoux", "html_url": "https://github.com/denismerigoux", "followers_url": "https://api.github.com/users/denismerigoux/followers", "following_url": "https://api.github.com/users/denismerigoux/following{/other_user}", "gists_url": "https://api.github.com/users/denismerigoux/gists{/gist_id}", "starred_url": "https://api.github.com/users/denismerigoux/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/denismerigoux/subscriptions", "organizations_url": "https://api.github.com/users/denismerigoux/orgs", "repos_url": "https://api.github.com/users/denismerigoux/repos", "events_url": "https://api.github.com/users/denismerigoux/events{/privacy}", "received_events_url": "https://api.github.com/users/denismerigoux/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1d0d4f9439640d8694ebb7fa905f4e328d5febd", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1d0d4f9439640d8694ebb7fa905f4e328d5febd", "html_url": "https://github.com/rust-lang/rust/commit/a1d0d4f9439640d8694ebb7fa905f4e328d5febd"}], "stats": {"total": 34, "additions": 12, "deletions": 22}, "files": [{"sha": "60b06c579cb402e66066338e52d55eb5b93579d2", "filename": "src/librustc_codegen_llvm/back/lto.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4787b7cac9da73a2c1c9cb2683e7f904a01f563c/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4787b7cac9da73a2c1c9cb2683e7f904a01f563c/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs?ref=4787b7cac9da73a2c1c9cb2683e7f904a01f563c", "patch": "@@ -26,7 +26,6 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_codegen_utils::symbol_export;\n use time_graph::Timeline;\n use {ModuleCodegen, ModuleLlvm, ModuleKind};\n-use std::marker::PhantomData;\n \n use libc;\n \n@@ -768,7 +767,6 @@ impl ThinModule {\n                 llmod_raw,\n                 llcx,\n                 tm,\n-                phantom: PhantomData\n             },\n             name: self.name().to_string(),\n             kind: ModuleKind::Regular,"}, {"sha": "bb490c582858c8ba289df10a2d672ea8a8d5a2e7", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4787b7cac9da73a2c1c9cb2683e7f904a01f563c/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4787b7cac9da73a2c1c9cb2683e7f904a01f563c/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=4787b7cac9da73a2c1c9cb2683e7f904a01f563c", "patch": "@@ -49,7 +49,6 @@ use context::{is_pie_binary, get_reloc_model};\n use common;\n use jobserver::{Client, Acquired};\n use rustc_demangle;\n-use std::marker::PhantomData;\n \n use std::any::Any;\n use std::ffi::{CString, CStr};\n@@ -352,7 +351,7 @@ struct AssemblerCommand {\n \n /// Additional resources used by optimize_and_codegen (not module specific)\n #[derive(Clone)]\n-pub struct CodegenContext<'ll> {\n+pub struct CodegenContext {\n     // Resources needed when running LTO\n     pub time_passes: bool,\n     pub lto: Lto,\n@@ -393,13 +392,10 @@ pub struct CodegenContext<'ll> {\n     // measuring is disabled.\n     time_graph: Option<TimeGraph>,\n     // The assembler command if no_integrated_as option is enabled, None otherwise\n-    assembler_cmd: Option<Arc<AssemblerCommand>>,\n-    // This field is used to give a lifetime parameter to the struct so that it can implement\n-    // the Backend trait.\n-    phantom: PhantomData<&'ll ()>\n+    assembler_cmd: Option<Arc<AssemblerCommand>>\n }\n \n-impl CodegenContext<'ll> {\n+impl CodegenContext {\n     pub fn create_diag_handler(&self) -> Handler {\n         Handler::with_emitter(true, false, Box::new(self.diag_emitter.clone()))\n     }\n@@ -428,12 +424,12 @@ impl CodegenContext<'ll> {\n }\n \n pub struct DiagnosticHandlers<'a> {\n-    data: *mut (&'a CodegenContext<'a>, &'a Handler),\n+    data: *mut (&'a CodegenContext, &'a Handler),\n     llcx: &'a llvm::Context,\n }\n \n impl<'a> DiagnosticHandlers<'a> {\n-    pub fn new(cgcx: &'a CodegenContext<'a>,\n+    pub fn new(cgcx: &'a CodegenContext,\n                handler: &'a Handler,\n                llcx: &'a llvm::Context) -> Self {\n         let data = Box::into_raw(Box::new((cgcx, handler)));\n@@ -1618,7 +1614,6 @@ fn start_executing_work(tcx: TyCtxt,\n         target_pointer_width: tcx.sess.target.target.target_pointer_width.clone(),\n         debuginfo: tcx.sess.opts.debuginfo,\n         assembler_cmd,\n-        phantom: PhantomData\n     };\n \n     // This is the \"main loop\" of parallel work happening for parallel codegen.\n@@ -2113,7 +2108,7 @@ pub const CODEGEN_WORK_PACKAGE_KIND: time_graph::WorkPackageKind =\n const LLVM_WORK_PACKAGE_KIND: time_graph::WorkPackageKind =\n     time_graph::WorkPackageKind(&[\"#7DB67A\", \"#C6EEC4\", \"#ACDAAA\", \"#579354\", \"#3E6F3C\"]);\n \n-fn spawn_work(cgcx: CodegenContext<'static>, work: WorkItem) {\n+fn spawn_work(cgcx: CodegenContext, work: WorkItem) {\n     let depth = time_depth();\n \n     thread::spawn(move || {"}, {"sha": "43942b0db85c32cef6d42d3f0460abd1078a416a", "filename": "src/librustc_codegen_llvm/lib.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4787b7cac9da73a2c1c9cb2683e7f904a01f563c/src%2Flibrustc_codegen_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4787b7cac9da73a2c1c9cb2683e7f904a01f563c/src%2Flibrustc_codegen_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Flib.rs?ref=4787b7cac9da73a2c1c9cb2683e7f904a01f563c", "patch": "@@ -72,7 +72,6 @@ use back::bytecode::RLIB_BYTECODE_EXTENSION;\n pub use llvm_util::target_features;\n use std::any::Any;\n use std::sync::mpsc;\n-use std::marker::PhantomData;\n use rustc_data_structures::sync::Lrc;\n \n use rustc::dep_graph::DepGraph;\n@@ -274,7 +273,7 @@ struct ModuleCodegen {\n     /// as the crate name and disambiguator.\n     /// We currently generate these names via CodegenUnit::build_cgu_name().\n     name: String,\n-    module_llvm: ModuleLlvm<'static>,\n+    module_llvm: ModuleLlvm,\n     kind: ModuleKind,\n }\n \n@@ -316,17 +315,16 @@ impl ModuleCodegen {\n     }\n }\n \n-struct ModuleLlvm<'ll> {\n+struct ModuleLlvm {\n     llcx: &'static mut llvm::Context,\n     llmod_raw: *const llvm::Module,\n     tm: &'static mut llvm::TargetMachine,\n-    phantom: PhantomData<&'ll ()>\n }\n \n-unsafe impl Send for ModuleLlvm<'ll> { }\n-unsafe impl Sync for ModuleLlvm<'ll> { }\n+unsafe impl Send for ModuleLlvm { }\n+unsafe impl Sync for ModuleLlvm { }\n \n-impl ModuleLlvm<'ll> {\n+impl ModuleLlvm {\n     fn new(sess: &Session, mod_name: &str) -> Self {\n         unsafe {\n             let llcx = llvm::LLVMRustContextCreate(sess.fewer_names());\n@@ -336,7 +334,6 @@ impl ModuleLlvm<'ll> {\n                 llmod_raw,\n                 llcx,\n                 tm: create_target_machine(sess, false),\n-                phantom: PhantomData\n             }\n         }\n     }\n@@ -348,7 +345,7 @@ impl ModuleLlvm<'ll> {\n     }\n }\n \n-impl Drop for ModuleLlvm<'ll> {\n+impl Drop for ModuleLlvm {\n     fn drop(&mut self) {\n         unsafe {\n             llvm::LLVMContextDispose(&mut *(self.llcx as *mut _));"}]}