{"sha": "59e285ff34796585a61a711e11a056c2999368ea", "node_id": "C_kwDOAAsO6NoAKDU5ZTI4NWZmMzQ3OTY1ODVhNjFhNzExZTExYTA1NmMyOTk5MzY4ZWE", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-09-23T08:00:02Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-09-23T08:00:02Z"}, "message": "Report diagnostics at the actually actionable site", "tree": {"sha": "691718510295b821f8bcb848053a2f27ff9344ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/691718510295b821f8bcb848053a2f27ff9344ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/59e285ff34796585a61a711e11a056c2999368ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/59e285ff34796585a61a711e11a056c2999368ea", "html_url": "https://github.com/rust-lang/rust/commit/59e285ff34796585a61a711e11a056c2999368ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/59e285ff34796585a61a711e11a056c2999368ea/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e237aaef25db05a7f18c1a32b248fdaa06ff8669", "url": "https://api.github.com/repos/rust-lang/rust/commits/e237aaef25db05a7f18c1a32b248fdaa06ff8669", "html_url": "https://github.com/rust-lang/rust/commit/e237aaef25db05a7f18c1a32b248fdaa06ff8669"}], "stats": {"total": 64, "additions": 43, "deletions": 21}, "files": [{"sha": "e33035381e0a989817bfabd044d32c53370df63a", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/59e285ff34796585a61a711e11a056c2999368ea/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59e285ff34796585a61a711e11a056c2999368ea/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=59e285ff34796585a61a711e11a056c2999368ea", "patch": "@@ -2314,7 +2314,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         &self,\n         generic_param_scope: LocalDefId,\n         span: Span,\n-        mut origin: Option<SubregionOrigin<'tcx>>,\n+        origin: Option<SubregionOrigin<'tcx>>,\n         bound_kind: GenericKind<'tcx>,\n         sub: Region<'tcx>,\n     ) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n@@ -2349,14 +2349,6 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     None\n                 }\n             }\n-            GenericKind::Opaque(def_id, _substs) => {\n-                // Avoid emitting a `... so that the type` message at the error site.\n-                // It would be out of order for return position impl trait\n-                origin = None;\n-                // Make sure the lifetime suggestion is on the RPIT instead of proposing\n-                // to add a bound for opaque types (which isn't possible)\n-                Some((self.tcx.def_span(def_id).shrink_to_hi(), true))\n-            }\n             _ => None,\n         };\n "}, {"sha": "229b69b92e68e31f3b48f5190319c16885a6300d", "filename": "compiler/rustc_infer/src/infer/outlives/obligations.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/59e285ff34796585a61a711e11a056c2999368ea/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59e285ff34796585a61a711e11a056c2999368ea/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs?ref=59e285ff34796585a61a711e11a056c2999368ea", "patch": "@@ -336,6 +336,7 @@ where\n             GenericKind::Opaque(def_id, substs),\n             def_id,\n             substs,\n+            true,\n             |ty| match *ty.kind() {\n                 ty::Opaque(def_id, substs) => (def_id, substs),\n                 _ => bug!(\"expected only projection types from env, not {:?}\", ty),\n@@ -356,6 +357,7 @@ where\n             GenericKind::Projection(projection_ty),\n             projection_ty.item_def_id,\n             projection_ty.substs,\n+            false,\n             |ty| match ty.kind() {\n                 ty::Projection(projection_ty) => (projection_ty.item_def_id, projection_ty.substs),\n                 _ => bug!(\"expected only projection types from env, not {:?}\", ty),\n@@ -371,6 +373,7 @@ where\n         generic: GenericKind<'tcx>,\n         def_id: DefId,\n         substs: SubstsRef<'tcx>,\n+        is_opaque: bool,\n         filter: impl Fn(Ty<'tcx>) -> (DefId, SubstsRef<'tcx>),\n     ) {\n         // An optimization for a common case with opaque types.\n@@ -437,7 +440,7 @@ where\n         // inference variables, we use a verify constraint instead of adding\n         // edges, which winds up enforcing the same condition.\n         let needs_infer = substs.needs_infer();\n-        if approx_env_bounds.is_empty() && trait_bounds.is_empty() && needs_infer {\n+        if approx_env_bounds.is_empty() && trait_bounds.is_empty() && (needs_infer || is_opaque) {\n             debug!(\"no declared bounds\");\n \n             self.substs_must_outlive(substs, origin, region);"}, {"sha": "6c2505177fef83b2bd96501dccd51a7f99c75d80", "filename": "src/test/ui/impl-trait/unactionable_diagnostic.fixed", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/59e285ff34796585a61a711e11a056c2999368ea/src%2Ftest%2Fui%2Fimpl-trait%2Funactionable_diagnostic.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/59e285ff34796585a61a711e11a056c2999368ea/src%2Ftest%2Fui%2Fimpl-trait%2Funactionable_diagnostic.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Funactionable_diagnostic.fixed?ref=59e285ff34796585a61a711e11a056c2999368ea", "patch": "@@ -0,0 +1,25 @@\n+// run-rustfix\n+\n+pub trait Trait {}\n+\n+pub struct Foo;\n+\n+impl Trait for Foo {}\n+\n+fn foo<'x, P>(\n+    _post: P,\n+    x: &'x Foo,\n+) -> &'x impl Trait {\n+    x\n+}\n+\n+pub fn bar<'t, T: 't>(\n+    //~^ HELP: consider adding an explicit lifetime bound...\n+    post: T,\n+    x: &'t Foo,\n+) -> &'t impl Trait {\n+    foo(post, x)\n+    //~^ ERROR: the parameter type `T` may not live long enough\n+}\n+\n+fn main() {}"}, {"sha": "bce35cbdd0d385b80bf6e1275f37acfc50f1eb26", "filename": "src/test/ui/impl-trait/unactionable_diagnostic.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/59e285ff34796585a61a711e11a056c2999368ea/src%2Ftest%2Fui%2Fimpl-trait%2Funactionable_diagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59e285ff34796585a61a711e11a056c2999368ea/src%2Ftest%2Fui%2Fimpl-trait%2Funactionable_diagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Funactionable_diagnostic.rs?ref=59e285ff34796585a61a711e11a056c2999368ea", "patch": "@@ -1,23 +1,25 @@\n-trait Trait {}\n+// run-rustfix\n \n-struct Foo;\n+pub trait Trait {}\n+\n+pub struct Foo;\n \n impl Trait for Foo {}\n \n fn foo<'x, P>(\n-    post: P,\n+    _post: P,\n     x: &'x Foo,\n ) -> &'x impl Trait {\n-    //~^ HELP: consider adding an explicit lifetime bound...\n     x\n }\n \n-fn bar<'t, T>(\n+pub fn bar<'t, T>(\n+    //~^ HELP: consider adding an explicit lifetime bound...\n     post: T,\n     x: &'t Foo,\n ) -> &'t impl Trait {\n     foo(post, x)\n-    //~^ ERROR: the opaque type `foo<T>::{opaque#0}` may not live long enough\n+    //~^ ERROR: the parameter type `T` may not live long enough\n }\n \n fn main() {}"}, {"sha": "a32004cda1a6f00c976720d04f27c4aa8c12e2b0", "filename": "src/test/ui/impl-trait/unactionable_diagnostic.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/59e285ff34796585a61a711e11a056c2999368ea/src%2Ftest%2Fui%2Fimpl-trait%2Funactionable_diagnostic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59e285ff34796585a61a711e11a056c2999368ea/src%2Ftest%2Fui%2Fimpl-trait%2Funactionable_diagnostic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Funactionable_diagnostic.stderr?ref=59e285ff34796585a61a711e11a056c2999368ea", "patch": "@@ -1,13 +1,13 @@\n-error[E0309]: the opaque type `foo<T>::{opaque#0}` may not live long enough\n-  --> $DIR/unactionable_diagnostic.rs:19:5\n+error[E0309]: the parameter type `T` may not live long enough\n+  --> $DIR/unactionable_diagnostic.rs:21:5\n    |\n LL |     foo(post, x)\n-   |     ^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n    |\n help: consider adding an explicit lifetime bound...\n    |\n-LL | ) -> &'x impl Trait + 't {\n-   |                     ++++\n+LL | pub fn bar<'t, T: 't>(\n+   |                 ++++\n \n error: aborting due to previous error\n "}]}