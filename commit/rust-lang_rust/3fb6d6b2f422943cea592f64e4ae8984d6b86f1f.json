{"sha": "3fb6d6b2f422943cea592f64e4ae8984d6b86f1f", "node_id": "C_kwDOAAsO6NoAKDNmYjZkNmIyZjQyMjk0M2NlYTU5MmY2NGU0YWU4OTg0ZDZiODZmMWY", "commit": {"author": {"name": "IQuant", "email": "quant3234@gmail.com", "date": "2023-04-04T16:18:34Z"}, "committer": {"name": "IQuant", "email": "quant3234@gmail.com", "date": "2023-04-04T16:18:34Z"}, "message": "Now passes tests", "tree": {"sha": "ec91dca9b9bfd03591c41fce8ec1e28ae6efbbdf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec91dca9b9bfd03591c41fce8ec1e28ae6efbbdf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3fb6d6b2f422943cea592f64e4ae8984d6b86f1f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3fb6d6b2f422943cea592f64e4ae8984d6b86f1f", "html_url": "https://github.com/rust-lang/rust/commit/3fb6d6b2f422943cea592f64e4ae8984d6b86f1f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3fb6d6b2f422943cea592f64e4ae8984d6b86f1f/comments", "author": {"login": "IntQuant", "id": 25219447, "node_id": "MDQ6VXNlcjI1MjE5NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/25219447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/IntQuant", "html_url": "https://github.com/IntQuant", "followers_url": "https://api.github.com/users/IntQuant/followers", "following_url": "https://api.github.com/users/IntQuant/following{/other_user}", "gists_url": "https://api.github.com/users/IntQuant/gists{/gist_id}", "starred_url": "https://api.github.com/users/IntQuant/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/IntQuant/subscriptions", "organizations_url": "https://api.github.com/users/IntQuant/orgs", "repos_url": "https://api.github.com/users/IntQuant/repos", "events_url": "https://api.github.com/users/IntQuant/events{/privacy}", "received_events_url": "https://api.github.com/users/IntQuant/received_events", "type": "User", "site_admin": false}, "committer": {"login": "IntQuant", "id": 25219447, "node_id": "MDQ6VXNlcjI1MjE5NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/25219447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/IntQuant", "html_url": "https://github.com/IntQuant", "followers_url": "https://api.github.com/users/IntQuant/followers", "following_url": "https://api.github.com/users/IntQuant/following{/other_user}", "gists_url": "https://api.github.com/users/IntQuant/gists{/gist_id}", "starred_url": "https://api.github.com/users/IntQuant/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/IntQuant/subscriptions", "organizations_url": "https://api.github.com/users/IntQuant/orgs", "repos_url": "https://api.github.com/users/IntQuant/repos", "events_url": "https://api.github.com/users/IntQuant/events{/privacy}", "received_events_url": "https://api.github.com/users/IntQuant/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "467d367df75121dd305626ea2fb4459af588d29c", "url": "https://api.github.com/repos/rust-lang/rust/commits/467d367df75121dd305626ea2fb4459af588d29c", "html_url": "https://github.com/rust-lang/rust/commit/467d367df75121dd305626ea2fb4459af588d29c"}], "stats": {"total": 3, "additions": 2, "deletions": 1}, "files": [{"sha": "34dfcea81d180f1e3cf7498204e96b2741662ef0", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3fb6d6b2f422943cea592f64e4ae8984d6b86f1f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fb6d6b2f422943cea592f64e4ae8984d6b86f1f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=3fb6d6b2f422943cea592f64e4ae8984d6b86f1f", "patch": "@@ -1928,7 +1928,8 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n         use crate::traits::ObligationCauseCode::MatchExpressionArm;\n         let mut suggestions = Vec::new();\n         let span = trace.cause.span();\n-        if let Some((expected, found)) = trace.values.ty() {\n+        let values = self.resolve_vars_if_possible(trace.values);\n+        if let Some((expected, found)) = values.ty() {\n             match (expected.kind(), found.kind()) {\n                 (ty::Tuple(_), ty::Tuple(_)) => {}\n                 // If a tuple of length one was expected and the found expression has"}]}