{"sha": "d799f2deb10e98cab17439ad4f38204cc3dc406c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3OTlmMmRlYjEwZTk4Y2FiMTc0MzlhZDRmMzgyMDRjYzNkYzQwNmM=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-02-26T14:34:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-26T14:34:32Z"}, "message": "Rollup merge of #69381 - QuiltOS:no-std-from-config, r=Mark-Simulacrum\n\nAllow getting `no_std` from the config file\n\nCurrently, it is only set correctly in the sanity checking implicit\ndefault fallback code. Having a config file at all will for force\n`no_std = false`.", "tree": {"sha": "c6482eb8cc340951a26ebe84d5fdfbbc26013e7e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c6482eb8cc340951a26ebe84d5fdfbbc26013e7e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d799f2deb10e98cab17439ad4f38204cc3dc406c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeVoH4CRBK7hj4Ov3rIwAAdHIIABr6LD+QnYyd528Duo+BsDet\n5YN+i1KTqdA+AbHk2Sicexi6DRYc+1UiHBkHyzhl7XhY0zUpw7DTy4/3SG40FGRI\nJEXxoTTOqsOzNl/hCCNd4cffNJILtDwy9+qE7Hj1f0OSrnsm1iGNEqrhhpl4xqU0\nxIB8ZHGe6Vl3v6XJMe2fBEWA+NBge61Bwb5+fdDD9FNaRqYXmIAhyrNN/KTg8IW+\ncAcWljkG04+1zHaWc3hm50DCjKj9CWXtXcNjbrz2BL1d40txjIlY+3H0db8NN8TJ\nEdaBZhVVKgFzeP6DgXFFFE340+pjx41OSPx0IdKyLznEFGvt43gE/Lov1l2UtNs=\n=+QWF\n-----END PGP SIGNATURE-----\n", "payload": "tree c6482eb8cc340951a26ebe84d5fdfbbc26013e7e\nparent e028f26e1df27c257e5007390d1787a256b6eee7\nparent 4f15867faf2797257cbeb9e4a38ae8dc87dcf2e9\nauthor Dylan DPC <dylan.dpc@gmail.com> 1582727672 +0100\ncommitter GitHub <noreply@github.com> 1582727672 +0100\n\nRollup merge of #69381 - QuiltOS:no-std-from-config, r=Mark-Simulacrum\n\nAllow getting `no_std` from the config file\n\nCurrently, it is only set correctly in the sanity checking implicit\ndefault fallback code. Having a config file at all will for force\n`no_std = false`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d799f2deb10e98cab17439ad4f38204cc3dc406c", "html_url": "https://github.com/rust-lang/rust/commit/d799f2deb10e98cab17439ad4f38204cc3dc406c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d799f2deb10e98cab17439ad4f38204cc3dc406c/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e028f26e1df27c257e5007390d1787a256b6eee7", "url": "https://api.github.com/repos/rust-lang/rust/commits/e028f26e1df27c257e5007390d1787a256b6eee7", "html_url": "https://github.com/rust-lang/rust/commit/e028f26e1df27c257e5007390d1787a256b6eee7"}, {"sha": "4f15867faf2797257cbeb9e4a38ae8dc87dcf2e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f15867faf2797257cbeb9e4a38ae8dc87dcf2e9", "html_url": "https://github.com/rust-lang/rust/commit/4f15867faf2797257cbeb9e4a38ae8dc87dcf2e9"}], "stats": {"total": 24, "additions": 17, "deletions": 7}, "files": [{"sha": "746cddbabd6397469cf9292d9618eee52cf722a3", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d799f2deb10e98cab17439ad4f38204cc3dc406c/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d799f2deb10e98cab17439ad4f38204cc3dc406c/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=d799f2deb10e98cab17439ad4f38204cc3dc406c", "patch": "@@ -177,6 +177,15 @@ pub struct Target {\n     pub no_std: bool,\n }\n \n+impl Target {\n+    pub fn from_triple(triple: &str) -> Self {\n+        let mut target: Self = Default::default();\n+        if triple.contains(\"-none-\") || triple.contains(\"nvptx\") {\n+            target.no_std = true;\n+        }\n+        target\n+    }\n+}\n /// Structure of the `config.toml` file that configuration is read from.\n ///\n /// This structure uses `Decodable` to automatically decode a TOML configuration\n@@ -353,6 +362,7 @@ struct TomlTarget {\n     musl_root: Option<String>,\n     wasi_root: Option<String>,\n     qemu_rootfs: Option<String>,\n+    no_std: Option<bool>,\n }\n \n impl Config {\n@@ -595,7 +605,7 @@ impl Config {\n \n         if let Some(ref t) = toml.target {\n             for (triple, cfg) in t {\n-                let mut target = Target::default();\n+                let mut target = Target::from_triple(triple);\n \n                 if let Some(ref s) = cfg.llvm_config {\n                     target.llvm_config = Some(config.src.join(s));\n@@ -606,6 +616,9 @@ impl Config {\n                 if let Some(ref s) = cfg.android_ndk {\n                     target.ndk = Some(config.src.join(s));\n                 }\n+                if let Some(s) = cfg.no_std {\n+                    target.no_std = s;\n+                }\n                 target.cc = cfg.cc.clone().map(PathBuf::from);\n                 target.cxx = cfg.cxx.clone().map(PathBuf::from);\n                 target.ar = cfg.ar.clone().map(PathBuf::from);"}, {"sha": "530e74da8cac0d9b4703a39effd2c836e9b4aa1d", "filename": "src/bootstrap/sanity.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d799f2deb10e98cab17439ad4f38204cc3dc406c/src%2Fbootstrap%2Fsanity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d799f2deb10e98cab17439ad4f38204cc3dc406c/src%2Fbootstrap%2Fsanity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fsanity.rs?ref=d799f2deb10e98cab17439ad4f38204cc3dc406c", "patch": "@@ -17,6 +17,7 @@ use std::process::Command;\n \n use build_helper::{output, t};\n \n+use crate::config::Target;\n use crate::Build;\n \n struct Finder {\n@@ -192,13 +193,9 @@ pub fn check(build: &mut Build) {\n             panic!(\"the iOS target is only supported on macOS\");\n         }\n \n-        if target.contains(\"-none-\") || target.contains(\"nvptx\") {\n-            if build.no_std(*target).is_none() {\n-                let target = build.config.target_config.entry(target.clone()).or_default();\n-\n-                target.no_std = true;\n-            }\n+        build.config.target_config.entry(target.clone()).or_insert(Target::from_triple(target));\n \n+        if target.contains(\"-none-\") || target.contains(\"nvptx\") {\n             if build.no_std(*target) == Some(false) {\n                 panic!(\"All the *-none-* and nvptx* targets are no-std targets\")\n             }"}]}