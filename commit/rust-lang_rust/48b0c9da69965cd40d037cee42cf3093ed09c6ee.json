{"sha": "48b0c9da69965cd40d037cee42cf3093ed09c6ee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4YjBjOWRhNjk5NjVjZDQwZDAzN2NlZTQyY2YzMDkzZWQwOWM2ZWU=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2019-02-11T18:29:10Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2019-02-11T18:29:10Z"}, "message": "Only suggest imports if not imported.\n\nThis commit modifies name resolution error reporting so that if a name\nis in scope and has been imported then we do not suggest importing it.\n\nThis can occur when we add a label about constructors not being visible\ndue to private fields. In these cases, we know that the struct/variant\nhas been imported and we should silence any suggestions to import the\nstruct/variant.", "tree": {"sha": "0344c160bbf7495809ad76c96bf38a5f27caf25c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0344c160bbf7495809ad76c96bf38a5f27caf25c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/48b0c9da69965cd40d037cee42cf3093ed09c6ee", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEWwgxPGhT5b/6kagXAXYLT59T8VQFAlxhvxUACgkQAXYLT59T\n8VQJBw/+OC/3a76zHMH/uKWOK0GAcrdl2LkJ7kPPTYTirzicg5hvfQIZShIFYUds\n5w6jbgv+ZRRoXw9DgoKm0g8j5OxcEDRhdsHKtxeSRC+vjX9rjjoWKx3zYwNDY2fT\nYKzCtqqUoDtztzgAdBAYUtrTaRid+AxmPpZ6UW8SNH7MGVI0PrGIzPRKBNRR7++R\nmIX916/7Q7/ilsHb6tBBiV7hRX8YSLzgCR4Y2XLTMADzwTlxtzsGPHR16PO+BdYf\n7C35w410OAWufZGHTB9MAaGxyW/h38qRILySXT3z8l7caX+39hRjTkhYqEuiFEgh\nunDKvlmmI5spRdkNvOHy3GiLFP4PEkPS6sg6xlYK7ZvdR9FFA9R19R6Cb0kgLiaQ\nVRyEWGWzJoda2nVMSR+GJMh/W+6was+c+yR6upJDi2PWF4oEuqMhtV6bvOFx82FV\ndBy/evMwEFkNX5a4YFU6EReATjWb4K9PCQfM7/padFfoA3yGJmS2lo5yXhUKUxED\nqIqte3Nu4ukSYx0/JWvP6WrQsqeFNoiMUrBObwclGPPDm0a5ftg6bHrQZKPpdSL5\nTOBMFgofUCdKSfFeeWOCBxgiMd5BEVliBMkYlGViQbH9A4WbCEfybFAstjg2pakT\nmGN1MoLOFNzm7UaU6OvEqSpdRVm2LTKt2vkLa9jfmGZNNXQ31a4=\n=V9ME\n-----END PGP SIGNATURE-----", "payload": "tree 0344c160bbf7495809ad76c96bf38a5f27caf25c\nparent de111e6367b065fd5f8cee59b64eefefd8272f44\nauthor David Wood <david@davidtw.co> 1549909750 +0100\ncommitter David Wood <david@davidtw.co> 1549909750 +0100\n\nOnly suggest imports if not imported.\n\nThis commit modifies name resolution error reporting so that if a name\nis in scope and has been imported then we do not suggest importing it.\n\nThis can occur when we add a label about constructors not being visible\ndue to private fields. In these cases, we know that the struct/variant\nhas been imported and we should silence any suggestions to import the\nstruct/variant.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/48b0c9da69965cd40d037cee42cf3093ed09c6ee", "html_url": "https://github.com/rust-lang/rust/commit/48b0c9da69965cd40d037cee42cf3093ed09c6ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/48b0c9da69965cd40d037cee42cf3093ed09c6ee/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de111e6367b065fd5f8cee59b64eefefd8272f44", "url": "https://api.github.com/repos/rust-lang/rust/commits/de111e6367b065fd5f8cee59b64eefefd8272f44", "html_url": "https://github.com/rust-lang/rust/commit/de111e6367b065fd5f8cee59b64eefefd8272f44"}], "stats": {"total": 80, "additions": 63, "deletions": 17}, "files": [{"sha": "a6e27c0a1aee776461e1f37d255c8346f0cffe7f", "filename": "src/librustc_resolve/error_reporting.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/48b0c9da69965cd40d037cee42cf3093ed09c6ee/src%2Flibrustc_resolve%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48b0c9da69965cd40d037cee42cf3093ed09c6ee/src%2Flibrustc_resolve%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Ferror_reporting.rs?ref=48b0c9da69965cd40d037cee42cf3093ed09c6ee", "patch": "@@ -106,7 +106,15 @@ impl<'a> Resolver<'a> {\n \n         // Try to lookup name in more relaxed fashion for better error reporting.\n         let ident = path.last().unwrap().ident;\n-        let candidates = self.lookup_import_candidates(ident, ns, is_expected);\n+        let candidates = self.lookup_import_candidates(ident, ns, is_expected)\n+            .drain(..)\n+            .filter(|ImportSuggestion { did, .. }| {\n+                match (did, def.and_then(|def| def.opt_def_id())) {\n+                    (Some(suggestion_did), Some(actual_did)) => *suggestion_did != actual_did,\n+                    _ => true,\n+                }\n+            })\n+            .collect::<Vec<_>>();\n         if candidates.is_empty() && is_expected(Def::Enum(DefId::local(CRATE_DEF_INDEX))) {\n             let enum_candidates =\n                 self.lookup_import_candidates(ident, ns, is_enum_variant);"}, {"sha": "428d0bd4c2bf5a499f90c5b9419e2f510b70c333", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/48b0c9da69965cd40d037cee42cf3093ed09c6ee/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48b0c9da69965cd40d037cee42cf3093ed09c6ee/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=48b0c9da69965cd40d037cee42cf3093ed09c6ee", "patch": "@@ -25,7 +25,7 @@ use rustc::hir::def::*;\n use rustc::hir::def::Namespace::*;\n use rustc::hir::def_id::{CRATE_DEF_INDEX, LOCAL_CRATE, DefId};\n use rustc::hir::{Freevar, FreevarMap, TraitCandidate, TraitMap, GlobMap};\n-use rustc::ty;\n+use rustc::ty::{self, DefIdTree};\n use rustc::util::nodemap::{NodeMap, NodeSet, FxHashMap, FxHashSet, DefIdMap};\n use rustc::{bug, span_bug};\n \n@@ -93,6 +93,7 @@ enum ScopeSet {\n \n /// A free importable items suggested in case of resolution failure.\n struct ImportSuggestion {\n+    did: Option<DefId>,\n     path: Path,\n }\n \n@@ -4392,7 +4393,8 @@ impl<'a> Resolver<'a> {\n \n                 // collect results based on the filter function\n                 if ident.name == lookup_ident.name && ns == namespace {\n-                    if filter_fn(name_binding.def()) {\n+                    let def = name_binding.def();\n+                    if filter_fn(def) {\n                         // create the path\n                         let mut segms = path_segments.clone();\n                         if lookup_ident.span.rust_2018() {\n@@ -4416,7 +4418,12 @@ impl<'a> Resolver<'a> {\n                         // declared as public (due to pruning, we don't explore\n                         // outside crate private modules => no need to check this)\n                         if !in_module_is_extern || name_binding.vis == ty::Visibility::Public {\n-                            candidates.push(ImportSuggestion { path });\n+                            let did = match def {\n+                                Def::StructCtor(did, _) | Def::VariantCtor(did, _) =>\n+                                    self.parent(did),\n+                                _ => def.opt_def_id(),\n+                            };\n+                            candidates.push(ImportSuggestion { did, path });\n                         }\n                     }\n                 }\n@@ -4513,7 +4520,8 @@ impl<'a> Resolver<'a> {\n                             span: name_binding.span,\n                             segments: path_segments,\n                         };\n-                        result = Some((module, ImportSuggestion { path }));\n+                        let did = module.def().and_then(|def| def.opt_def_id());\n+                        result = Some((module, ImportSuggestion { did, path }));\n                     } else {\n                         // add the module to the lookup\n                         if seen_modules.insert(module.def_id().unwrap()) {"}, {"sha": "9d746673f4dae41791c7bae84c1b23e386ed2817", "filename": "src/test/ui/issue-42944.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/48b0c9da69965cd40d037cee42cf3093ed09c6ee/src%2Ftest%2Fui%2Fissue-42944.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48b0c9da69965cd40d037cee42cf3093ed09c6ee/src%2Ftest%2Fui%2Fissue-42944.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-42944.rs?ref=48b0c9da69965cd40d037cee42cf3093ed09c6ee", "patch": "@@ -0,0 +1,19 @@\n+mod foo {\n+    pub struct B(());\n+}\n+\n+mod bar {\n+    use foo::B;\n+\n+    fn foo() {\n+        B(()); //~ ERROR expected function, found struct `B` [E0423]\n+    }\n+}\n+\n+mod baz {\n+    fn foo() {\n+        B(()); //~ ERROR cannot find function `B` in this scope [E0425]\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "43fd0ffb72439d3c17426ff114cb4631de02be0f", "filename": "src/test/ui/issue-42944.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/48b0c9da69965cd40d037cee42cf3093ed09c6ee/src%2Ftest%2Fui%2Fissue-42944.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/48b0c9da69965cd40d037cee42cf3093ed09c6ee/src%2Ftest%2Fui%2Fissue-42944.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-42944.stderr?ref=48b0c9da69965cd40d037cee42cf3093ed09c6ee", "patch": "@@ -0,0 +1,20 @@\n+error[E0423]: expected function, found struct `B`\n+  --> $DIR/issue-42944.rs:9:9\n+   |\n+LL |         B(()); //~ ERROR expected function, found struct `B` [E0423]\n+   |         ^ constructor is not visible here due to private fields\n+\n+error[E0425]: cannot find function `B` in this scope\n+  --> $DIR/issue-42944.rs:15:9\n+   |\n+LL |         B(()); //~ ERROR cannot find function `B` in this scope [E0425]\n+   |         ^ not found in this scope\n+help: possible candidate is found in another module, you can import it into scope\n+   |\n+LL |     use foo::B;\n+   |\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors occurred: E0423, E0425.\n+For more information about an error, try `rustc --explain E0423`."}, {"sha": "519e74d9f631583dd55586e43a830183ac254168", "filename": "src/test/ui/resolve/privacy-struct-ctor.stderr", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/48b0c9da69965cd40d037cee42cf3093ed09c6ee/src%2Ftest%2Fui%2Fresolve%2Fprivacy-struct-ctor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/48b0c9da69965cd40d037cee42cf3093ed09c6ee/src%2Ftest%2Fui%2Fresolve%2Fprivacy-struct-ctor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fprivacy-struct-ctor.stderr?ref=48b0c9da69965cd40d037cee42cf3093ed09c6ee", "patch": "@@ -2,25 +2,16 @@ error[E0423]: expected value, found struct `Z`\n   --> $DIR/privacy-struct-ctor.rs:20:9\n    |\n LL |         Z;\n-   |         ^ constructor is not visible here due to private fields\n-help: a tuple struct with a similar name exists\n-   |\n-LL |         S;\n    |         ^\n-help: possible better candidate is found in another module, you can import it into scope\n-   |\n-LL |     use m::n::Z;\n-   |\n+   |         |\n+   |         constructor is not visible here due to private fields\n+   |         help: a tuple struct with a similar name exists: `S`\n \n error[E0423]: expected value, found struct `S`\n   --> $DIR/privacy-struct-ctor.rs:33:5\n    |\n LL |     S;\n    |     ^ constructor is not visible here due to private fields\n-help: possible better candidate is found in another module, you can import it into scope\n-   |\n-LL | use m::S;\n-   |\n \n error[E0423]: expected value, found struct `S2`\n   --> $DIR/privacy-struct-ctor.rs:38:5"}]}