{"sha": "294cae22ee473f34928f5b24ec977132011e3699", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5NGNhZTIyZWU0NzNmMzQ5MjhmNWIyNGVjOTc3MTMyMDExZTM2OTk=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-04-10T09:55:18Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-04-23T17:28:14Z"}, "message": "first draft of `program_clauses_for_env`\n\nThis computes the transitive closure of traits that appear in the\nenvironment and then appends their clauses. It needs some work, but\nit's in the right direction.", "tree": {"sha": "41dcfc6f0ca74c434943da5ccd1bed7d3e783c80", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/41dcfc6f0ca74c434943da5ccd1bed7d3e783c80"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/294cae22ee473f34928f5b24ec977132011e3699", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/294cae22ee473f34928f5b24ec977132011e3699", "html_url": "https://github.com/rust-lang/rust/commit/294cae22ee473f34928f5b24ec977132011e3699", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/294cae22ee473f34928f5b24ec977132011e3699/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7173fd78c62c84dffbf0c05c895a2ec57fe170af", "url": "https://api.github.com/repos/rust-lang/rust/commits/7173fd78c62c84dffbf0c05c895a2ec57fe170af", "html_url": "https://github.com/rust-lang/rust/commit/7173fd78c62c84dffbf0c05c895a2ec57fe170af"}], "stats": {"total": 163, "additions": 145, "deletions": 18}, "files": [{"sha": "18bf54297afc6b3d100e6835c5baf647a0aa0819", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/294cae22ee473f34928f5b24ec977132011e3699/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/294cae22ee473f34928f5b24ec977132011e3699/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=294cae22ee473f34928f5b24ec977132011e3699", "patch": "@@ -655,6 +655,7 @@ define_dep_nodes!( <'tcx>\n     [input] Features,\n \n     [] ProgramClausesFor(DefId),\n+    [] ProgramClausesForEnv(ParamEnv<'tcx>),\n     [] WasmImportModuleMap(CrateNum),\n     [] ForeignModules(CrateNum),\n "}, {"sha": "735fe06560f5f3a765fbc561bc7085c0859a489f", "filename": "src/librustc/ty/maps/config.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/294cae22ee473f34928f5b24ec977132011e3699/src%2Flibrustc%2Fty%2Fmaps%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/294cae22ee473f34928f5b24ec977132011e3699/src%2Flibrustc%2Fty%2Fmaps%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fconfig.rs?ref=294cae22ee473f34928f5b24ec977132011e3699", "patch": "@@ -717,6 +717,12 @@ impl<'tcx> QueryDescription<'tcx> for queries::program_clauses_for<'tcx> {\n     }\n }\n \n+impl<'tcx> QueryDescription<'tcx> for queries::program_clauses_for_env<'tcx> {\n+    fn describe(_tcx: TyCtxt, _: ty::ParamEnv<'tcx>) -> String {\n+        format!(\"generating chalk-style clauses for param env\")\n+    }\n+}\n+\n impl<'tcx> QueryDescription<'tcx> for queries::wasm_import_module_map<'tcx> {\n     fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n         format!(\"wasm import module map\")"}, {"sha": "72f2cb49abc0e73f837476907d7331f1a55ba656", "filename": "src/librustc/ty/maps/keys.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/294cae22ee473f34928f5b24ec977132011e3699/src%2Flibrustc%2Fty%2Fmaps%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/294cae22ee473f34928f5b24ec977132011e3699/src%2Flibrustc%2Fty%2Fmaps%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fkeys.rs?ref=294cae22ee473f34928f5b24ec977132011e3699", "patch": "@@ -154,6 +154,15 @@ impl<'tcx> Key for Ty<'tcx> {\n     }\n }\n \n+impl<'tcx> Key for ty::ParamEnv<'tcx> {\n+    fn map_crate(&self) -> CrateNum {\n+        LOCAL_CRATE\n+    }\n+    fn default_span(&self, _: TyCtxt) -> Span {\n+        DUMMY_SP\n+    }\n+}\n+\n impl<'tcx, T: Key> Key for ty::ParamEnvAnd<'tcx, T> {\n     fn map_crate(&self) -> CrateNum {\n         self.value.map_crate()"}, {"sha": "368e9dc0fadca780d3b93628a5642ff060ecb1ab", "filename": "src/librustc/ty/maps/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/294cae22ee473f34928f5b24ec977132011e3699/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/294cae22ee473f34928f5b24ec977132011e3699/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs?ref=294cae22ee473f34928f5b24ec977132011e3699", "patch": "@@ -447,6 +447,10 @@ define_maps! { <'tcx>\n \n     [] fn program_clauses_for: ProgramClausesFor(DefId) -> Lrc<&'tcx Slice<Clause<'tcx>>>,\n \n+    [] fn program_clauses_for_env: ProgramClausesForEnv(\n+        ty::ParamEnv<'tcx>\n+    ) -> Lrc<&'tcx Slice<Clause<'tcx>>>,\n+\n     [] fn wasm_custom_sections: WasmCustomSections(CrateNum) -> Lrc<Vec<DefId>>,\n     [] fn wasm_import_module_map: WasmImportModuleMap(CrateNum)\n         -> Lrc<FxHashMap<DefId, String>>,"}, {"sha": "70fbd17e6cbb0fbce9b04dc3ed5d02c62543a301", "filename": "src/librustc/ty/maps/plumbing.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/294cae22ee473f34928f5b24ec977132011e3699/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/294cae22ee473f34928f5b24ec977132011e3699/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs?ref=294cae22ee473f34928f5b24ec977132011e3699", "patch": "@@ -978,6 +978,7 @@ pub fn force_from_dep_node<'a, 'gcx, 'lcx>(tcx: TyCtxt<'a, 'gcx, 'lcx>,\n         DepKind::DropckOutlives |\n         DepKind::SubstituteNormalizeAndTestPredicates |\n         DepKind::InstanceDefSizeEstimate |\n+        DepKind::ProgramClausesForEnv |\n \n         // This one should never occur in this context\n         DepKind::Null => {"}, {"sha": "1524d4b9e7f62bd44411b8f9280c09cef9147145", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/294cae22ee473f34928f5b24ec977132011e3699/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/294cae22ee473f34928f5b24ec977132011e3699/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=294cae22ee473f34928f5b24ec977132011e3699", "patch": "@@ -1138,6 +1138,11 @@ pub struct ProjectionPredicate<'tcx> {\n pub type PolyProjectionPredicate<'tcx> = Binder<ProjectionPredicate<'tcx>>;\n \n impl<'tcx> PolyProjectionPredicate<'tcx> {\n+    /// Returns the def-id of the associated item being projected.\n+    pub fn item_def_id(&self) -> DefId {\n+        self.skip_binder().projection_ty.item_def_id\n+    }\n+\n     pub fn to_poly_trait_ref(&self, tcx: TyCtxt) -> PolyTraitRef<'tcx> {\n         // Note: unlike with TraitRef::to_poly_trait_ref(),\n         // self.0.trait_ref is permitted to have escaping regions."}, {"sha": "90c870096e179f711af17cac046249fbc2a7d2e5", "filename": "src/librustc_traits/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/294cae22ee473f34928f5b24ec977132011e3699/src%2Flibrustc_traits%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/294cae22ee473f34928f5b24ec977132011e3699/src%2Flibrustc_traits%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flib.rs?ref=294cae22ee473f34928f5b24ec977132011e3699", "patch": "@@ -37,6 +37,7 @@ pub fn provide(p: &mut Providers) {\n         normalize_ty_after_erasing_regions:\n             normalize_erasing_regions::normalize_ty_after_erasing_regions,\n         program_clauses_for: lowering::program_clauses_for,\n+        program_clauses_for_env: lowering::program_clauses_for_env,\n         ..*p\n     };\n }"}, {"sha": "25a3621fd00b6f031f4b5fc502a50be1d983f362", "filename": "src/librustc_traits/lowering.rs", "status": "modified", "additions": 70, "deletions": 18, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/294cae22ee473f34928f5b24ec977132011e3699/src%2Flibrustc_traits%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/294cae22ee473f34928f5b24ec977132011e3699/src%2Flibrustc_traits%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flowering.rs?ref=294cae22ee473f34928f5b24ec977132011e3699", "patch": "@@ -10,11 +10,14 @@\n \n use rustc::hir::def_id::DefId;\n use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use rustc::hir::map::definitions::DefPathData;\n+use rustc::hir::{self, ImplPolarity};\n use rustc::traits::{Clause, DomainGoal, Goal, PolyDomainGoal, ProgramClause, WhereClauseAtom};\n use rustc::ty::subst::Substs;\n use rustc::ty::{self, Slice, TyCtxt};\n+use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::sync::Lrc;\n-use syntax::ast;\n+use std::mem;\n use syntax::ast;\n \n use std::iter;\n@@ -120,24 +123,73 @@ crate fn program_clauses_for<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     def_id: DefId,\n ) -> Lrc<&'tcx Slice<Clause<'tcx>>> {\n-    let node_id = tcx.hir.as_local_node_id(def_id).unwrap();\n-    let node = tcx.hir.find(node_id).unwrap();\n-    match node {\n-        hir::map::Node::NodeItem(item) => match item.node {\n-            hir::ItemTrait(..) => program_clauses_for_trait(tcx, def_id),\n-            hir::ItemImpl(..) => program_clauses_for_impl(tcx, def_id),\n-            _ => Lrc::new(tcx.mk_clauses(iter::empty::<Clause>())),\n-        },\n-        hir::map::Node::NodeImplItem(item) => {\n-            if let hir::ImplItemKind::Type(..) = item.node {\n-                program_clauses_for_associated_type_value(tcx, def_id)\n-            } else {\n-                Lrc::new(tcx.mk_clauses(iter::empty::<Clause>()))\n-            }\n-        }\n+    match tcx.def_key(def_id).disambiguated_data.data {\n+        DefPathData::Trait(_) => program_clauses_for_trait(tcx, def_id),\n+        DefPathData::Impl => program_clauses_for_impl(tcx, def_id),\n+        DefPathData::AssocTypeInImpl(..) => program_clauses_for_associated_type_value(tcx, def_id),\n+        _ => Lrc::new(Slice::empty()),\n+    }\n+}\n+\n+crate fn program_clauses_for_env<'a, 'tcx>(\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    param_env: ty::ParamEnv<'tcx>,\n+) -> Lrc<&'tcx Slice<Clause<'tcx>>> {\n+    debug!(\"program_clauses_for_env(param_env={:?})\", param_env);\n+\n+    let mut last_round = FxHashSet();\n+    last_round.extend(\n+        param_env\n+            .caller_bounds\n+            .iter()\n+            .flat_map(|&p| predicate_def_id(p)),\n+    );\n+\n+    let mut closure = last_round.clone();\n+    let mut next_round = FxHashSet();\n+    while !last_round.is_empty() {\n+        next_round.extend(\n+            last_round\n+                .drain()\n+                .flat_map(|def_id| {\n+                    tcx.predicates_of(def_id)\n+                        .instantiate_identity(tcx)\n+                        .predicates\n+                })\n+                .flat_map(|p| predicate_def_id(p))\n+                .filter(|&def_id| closure.insert(def_id)),\n+        );\n+        mem::swap(&mut next_round, &mut last_round);\n+    }\n+\n+    debug!(\"program_clauses_for_env: closure = {:#?}\", closure);\n \n-        // FIXME: other constructions e.g. traits, associated types...\n-        _ => Lrc::new(tcx.mk_clauses(iter::empty::<Clause>())),\n+    return Lrc::new(\n+        tcx.mk_clauses(\n+            closure\n+                .into_iter()\n+                .flat_map(|def_id| tcx.program_clauses_for(def_id).iter().cloned()),\n+        ),\n+    );\n+\n+    /// Given that `predicate` is in the environment, returns the\n+    /// def-id of something (e.g., a trait, associated item, etc)\n+    /// whose predicates can also be assumed to be true. We will\n+    /// compute the transitive closure of such things.\n+    fn predicate_def_id<'tcx>(predicate: ty::Predicate<'tcx>) -> Option<DefId> {\n+        match predicate {\n+            ty::Predicate::Trait(predicate) => Some(predicate.def_id()),\n+\n+            ty::Predicate::Projection(projection) => Some(projection.item_def_id()),\n+\n+            ty::Predicate::WellFormed(..)\n+            | ty::Predicate::RegionOutlives(..)\n+            | ty::Predicate::TypeOutlives(..)\n+            | ty::Predicate::ObjectSafe(..)\n+            | ty::Predicate::ClosureKind(..)\n+            | ty::Predicate::Subtype(..)\n+            | ty::Predicate::ConstEvaluatable(..) => None,\n+        }\n     }\n }\n "}, {"sha": "fc20ad0e08b2a40afd3419c964831d965ba29fea", "filename": "src/test/ui/chalkify/lower_env1.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/294cae22ee473f34928f5b24ec977132011e3699/src%2Ftest%2Fui%2Fchalkify%2Flower_env1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/294cae22ee473f34928f5b24ec977132011e3699/src%2Ftest%2Fui%2Fchalkify%2Flower_env1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Flower_env1.rs?ref=294cae22ee473f34928f5b24ec977132011e3699", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(rustc_attrs)]\n+#![allow(dead_code)]\n+\n+trait Foo { }\n+\n+#[rustc_dump_program_clauses] //~ ERROR program clause dump\n+trait Bar where Self: Foo { }\n+\n+#[rustc_dump_env_program_clauses] //~ ERROR program clause dump\n+fn bar<T: Bar>() {\n+}\n+\n+fn main() {\n+}"}, {"sha": "aaf74f1095a4bc2bd22efd79b743fe51cd40e837", "filename": "src/test/ui/chalkify/lower_env1.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/294cae22ee473f34928f5b24ec977132011e3699/src%2Ftest%2Fui%2Fchalkify%2Flower_env1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/294cae22ee473f34928f5b24ec977132011e3699/src%2Ftest%2Fui%2Fchalkify%2Flower_env1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Flower_env1.stderr?ref=294cae22ee473f34928f5b24ec977132011e3699", "patch": "@@ -0,0 +1,24 @@\n+error: program clause dump\n+  --> $DIR/lower_env1.rs:16:1\n+   |\n+LL | #[rustc_dump_program_clauses] //~ ERROR program clause dump\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: Implemented(Self: Bar) :- FromEnv(Self: Bar).\n+   = note: FromEnv(Self: Bar) :- FromEnv(Self: Bar).\n+   = note: FromEnv(Self: Foo) :- FromEnv(Self: Bar).\n+\n+error: program clause dump\n+  --> $DIR/lower_env1.rs:19:1\n+   |\n+LL | #[rustc_dump_env_program_clauses] //~ ERROR program clause dump\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: Implemented(Self: std::marker::Sized) :- FromEnv(Self: std::marker::Sized).\n+   = note: Implemented(Self: Bar) :- FromEnv(Self: Bar).\n+   = note: FromEnv(Self: Bar) :- FromEnv(Self: Bar).\n+   = note: FromEnv(Self: Foo) :- FromEnv(Self: Bar).\n+   = note: Implemented(Self: Foo) :- FromEnv(Self: Foo).\n+\n+error: aborting due to 2 previous errors\n+"}]}