{"sha": "d7b4ee8a324545981063bc8eef5dc5efa88791a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3YjRlZThhMzI0NTQ1OTgxMDYzYmM4ZWVmNWRjNWVmYTg4NzkxYTc=", "commit": {"author": {"name": "Aman Arora", "email": "me@aman-arora.com", "date": "2021-08-23T22:47:38Z"}, "committer": {"name": "Aman Arora", "email": "me@aman-arora.com", "date": "2021-08-23T22:47:38Z"}, "message": "2229: Consider varaiables mentioned in closure as used", "tree": {"sha": "fa4a1f9709c4579a1f1ac9a35caf9cf06d06bf91", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa4a1f9709c4579a1f1ac9a35caf9cf06d06bf91"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7b4ee8a324545981063bc8eef5dc5efa88791a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7b4ee8a324545981063bc8eef5dc5efa88791a7", "html_url": "https://github.com/rust-lang/rust/commit/d7b4ee8a324545981063bc8eef5dc5efa88791a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7b4ee8a324545981063bc8eef5dc5efa88791a7/comments", "author": {"login": "arora-aman", "id": 4193035, "node_id": "MDQ6VXNlcjQxOTMwMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4193035?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arora-aman", "html_url": "https://github.com/arora-aman", "followers_url": "https://api.github.com/users/arora-aman/followers", "following_url": "https://api.github.com/users/arora-aman/following{/other_user}", "gists_url": "https://api.github.com/users/arora-aman/gists{/gist_id}", "starred_url": "https://api.github.com/users/arora-aman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arora-aman/subscriptions", "organizations_url": "https://api.github.com/users/arora-aman/orgs", "repos_url": "https://api.github.com/users/arora-aman/repos", "events_url": "https://api.github.com/users/arora-aman/events{/privacy}", "received_events_url": "https://api.github.com/users/arora-aman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arora-aman", "id": 4193035, "node_id": "MDQ6VXNlcjQxOTMwMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4193035?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arora-aman", "html_url": "https://github.com/arora-aman", "followers_url": "https://api.github.com/users/arora-aman/followers", "following_url": "https://api.github.com/users/arora-aman/following{/other_user}", "gists_url": "https://api.github.com/users/arora-aman/gists{/gist_id}", "starred_url": "https://api.github.com/users/arora-aman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arora-aman/subscriptions", "organizations_url": "https://api.github.com/users/arora-aman/orgs", "repos_url": "https://api.github.com/users/arora-aman/repos", "events_url": "https://api.github.com/users/arora-aman/events{/privacy}", "received_events_url": "https://api.github.com/users/arora-aman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9583fd1bdd0127328e25e5b8c24dff575ec2c86b", "url": "https://api.github.com/repos/rust-lang/rust/commits/9583fd1bdd0127328e25e5b8c24dff575ec2c86b", "html_url": "https://github.com/rust-lang/rust/commit/9583fd1bdd0127328e25e5b8c24dff575ec2c86b"}], "stats": {"total": 73, "additions": 10, "deletions": 63}, "files": [{"sha": "87c14d9c395f117d3f440bb6ac4ef0f27ef46385", "filename": "compiler/rustc_passes/src/liveness.rs", "status": "modified", "additions": 6, "deletions": 30, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/d7b4ee8a324545981063bc8eef5dc5efa88791a7/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b4ee8a324545981063bc8eef5dc5efa88791a7/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs?ref=d7b4ee8a324545981063bc8eef5dc5efa88791a7", "patch": "@@ -337,8 +337,8 @@ impl<'tcx> Visitor<'tcx> for IrMaps<'tcx> {\n             return;\n         }\n \n-        if let Some(captures) = maps.tcx.typeck(local_def_id).closure_min_captures.get(&def_id) {\n-            for &var_hir_id in captures.keys() {\n+        if let Some(upvars) = maps.tcx.upvars_mentioned(def_id) {\n+            for &var_hir_id in upvars.keys() {\n                 let var_name = maps.tcx.hir().name(var_hir_id);\n                 maps.add_variable(Upvar(var_hir_id, var_name));\n             }\n@@ -405,21 +405,14 @@ impl<'tcx> Visitor<'tcx> for IrMaps<'tcx> {\n                 // breaks or continues)\n                 self.add_live_node_for_node(expr.hir_id, ExprNode(expr.span));\n \n-                // Make a live_node for each captured variable, with the span\n+                // Make a live_node for each mentioned variable, with the span\n                 // being the location that the variable is used.  This results\n                 // in better error messages than just pointing at the closure\n                 // construction site.\n                 let mut call_caps = Vec::new();\n                 let closure_def_id = self.tcx.hir().local_def_id(expr.hir_id);\n-                if let Some(captures) = self\n-                    .tcx\n-                    .typeck(closure_def_id)\n-                    .closure_min_captures\n-                    .get(&closure_def_id.to_def_id())\n-                {\n-                    // If closure_min_captures is Some, upvars_mentioned must also be Some\n-                    let upvars = self.tcx.upvars_mentioned(closure_def_id).unwrap();\n-                    call_caps.extend(captures.keys().map(|var_id| {\n+                if let Some(upvars) = self.tcx.upvars_mentioned(closure_def_id) {\n+                    call_caps.extend(upvars.keys().map(|var_id| {\n                         let upvar = upvars[var_id];\n                         let upvar_ln = self.add_live_node(UpvarNode(upvar.span));\n                         CaptureInfo { ln: upvar_ln, var_hid: *var_id }\n@@ -494,7 +487,6 @@ struct Liveness<'a, 'tcx> {\n     ir: &'a mut IrMaps<'tcx>,\n     typeck_results: &'a ty::TypeckResults<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n-    upvars: Option<&'tcx FxIndexMap<hir::HirId, hir::Upvar>>,\n     closure_min_captures: Option<&'tcx RootVariableMinCaptureList<'tcx>>,\n     successors: IndexVec<LiveNode, Option<LiveNode>>,\n     rwu_table: rwu_table::RWUTable,\n@@ -518,7 +510,6 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n     fn new(ir: &'a mut IrMaps<'tcx>, body_owner: LocalDefId) -> Liveness<'a, 'tcx> {\n         let typeck_results = ir.tcx.typeck(body_owner);\n         let param_env = ir.tcx.param_env(body_owner);\n-        let upvars = ir.tcx.upvars_mentioned(body_owner);\n         let closure_min_captures = typeck_results.closure_min_captures.get(&body_owner.to_def_id());\n         let closure_ln = ir.add_live_node(ClosureNode);\n         let exit_ln = ir.add_live_node(ExitNode);\n@@ -530,7 +521,6 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n             ir,\n             typeck_results,\n             param_env,\n-            upvars,\n             closure_min_captures,\n             successors: IndexVec::from_elem_n(None, num_live_nodes),\n             rwu_table: rwu_table::RWUTable::new(num_live_nodes, num_vars),\n@@ -1234,21 +1224,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n         acc: u32,\n     ) -> LiveNode {\n         match path.res {\n-            Res::Local(hid) => {\n-                let in_upvars = self.upvars.map_or(false, |u| u.contains_key(&hid));\n-                let in_captures = self.closure_min_captures.map_or(false, |c| c.contains_key(&hid));\n-\n-                match (in_upvars, in_captures) {\n-                    (false, _) | (true, true) => self.access_var(hir_id, hid, succ, acc, path.span),\n-                    (true, false) => {\n-                        // This case is possible when with RFC-2229, a wild pattern\n-                        // is used within a closure.\n-                        // eg: `let _ = x`. The closure doesn't capture x here,\n-                        // even though it's mentioned in the closure.\n-                        succ\n-                    }\n-                }\n-            }\n+            Res::Local(hid) => self.access_var(hir_id, hid, succ, acc, path.span),\n             _ => succ,\n         }\n     }"}, {"sha": "d4f243ee3475f42c8f49829dd2acc741c7733094", "filename": "src/test/ui/closures/2229_closure_analysis/issue-87987.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7b4ee8a324545981063bc8eef5dc5efa88791a7/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fissue-87987.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b4ee8a324545981063bc8eef5dc5efa88791a7/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fissue-87987.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fissue-87987.rs?ref=d7b4ee8a324545981063bc8eef5dc5efa88791a7", "patch": "@@ -8,7 +8,7 @@ struct Props {\n \n fn main() {\n     // Test 1\n-    let props_2 = Props { //~ WARNING: unused variable: `props_2`\n+    let props_2 = Props {\n         field_1: 1,\n         field_2: 1,\n     };"}, {"sha": "5828295fae33a77c9850839f04b2ff5c5a50d1c7", "filename": "src/test/ui/closures/2229_closure_analysis/issue-87987.stderr", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d7b4ee8a324545981063bc8eef5dc5efa88791a7/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fissue-87987.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d7b4ee8a324545981063bc8eef5dc5efa88791a7/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fissue-87987.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fissue-87987.stderr?ref=d7b4ee8a324545981063bc8eef5dc5efa88791a7", "patch": "@@ -1,11 +1,3 @@\n-warning: unused variable: `props_2`\n-  --> $DIR/issue-87987.rs:11:9\n-   |\n-LL |     let props_2 = Props {\n-   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_props_2`\n-   |\n-   = note: `#[warn(unused_variables)]` on by default\n-\n warning: field is never read: `field_1`\n   --> $DIR/issue-87987.rs:5:5\n    |\n@@ -20,5 +12,5 @@ warning: field is never read: `field_2`\n LL |     field_2: u32,\n    |     ^^^^^^^^^^^^\n \n-warning: 3 warnings emitted\n+warning: 2 warnings emitted\n "}, {"sha": "dacc2c616b8b6936dedeedabd2d30f5a0946cdd3", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/destructure_patterns.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7b4ee8a324545981063bc8eef5dc5efa88791a7/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fdestructure_patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b4ee8a324545981063bc8eef5dc5efa88791a7/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fdestructure_patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fdestructure_patterns.rs?ref=d7b4ee8a324545981063bc8eef5dc5efa88791a7", "patch": "@@ -43,7 +43,6 @@ fn test3() {\n \n fn test4() {\n     let t = (String::from(\"Hello\"), String::from(\"World\"));\n-    //~^ WARN unused variable: `t`\n \n     let c = ||  {\n         let (_, _) = t;\n@@ -81,9 +80,7 @@ fn test7() {\n \n fn test8() {\n     let x = 0;\n-    //~^ WARN unused variable: `x`\n     let tup = (1, 2);\n-    //~^ WARN unused variable: `tup`\n     let p = Point { x: 10, y: 20 };\n \n     let c = || {"}, {"sha": "7706f68ba5b44ba22d74805093db8c0e68877c62", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/destructure_patterns.stderr", "status": "modified", "additions": 2, "deletions": 20, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d7b4ee8a324545981063bc8eef5dc5efa88791a7/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fdestructure_patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d7b4ee8a324545981063bc8eef5dc5efa88791a7/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fdestructure_patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fdestructure_patterns.stderr?ref=d7b4ee8a324545981063bc8eef5dc5efa88791a7", "patch": "@@ -29,29 +29,11 @@ warning: unused variable: `t2`\n LL |         let (_, t2) = t;\n    |                 ^^ help: if this is intentional, prefix it with an underscore: `_t2`\n \n-warning: unused variable: `t`\n-  --> $DIR/destructure_patterns.rs:45:9\n-   |\n-LL |     let t = (String::from(\"Hello\"), String::from(\"World\"));\n-   |         ^ help: if this is intentional, prefix it with an underscore: `_t`\n-\n warning: unused variable: `x`\n-  --> $DIR/destructure_patterns.rs:91:21\n+  --> $DIR/destructure_patterns.rs:88:21\n    |\n LL |         let Point { x, y } = p;\n    |                     ^ help: try ignoring the field: `x: _`\n \n-warning: unused variable: `x`\n-  --> $DIR/destructure_patterns.rs:83:9\n-   |\n-LL |     let x = 0;\n-   |         ^ help: if this is intentional, prefix it with an underscore: `_x`\n-\n-warning: unused variable: `tup`\n-  --> $DIR/destructure_patterns.rs:85:9\n-   |\n-LL |     let tup = (1, 2);\n-   |         ^^^ help: if this is intentional, prefix it with an underscore: `_tup`\n-\n-warning: 8 warnings emitted\n+warning: 5 warnings emitted\n "}]}