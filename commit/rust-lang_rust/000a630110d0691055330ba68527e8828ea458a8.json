{"sha": "000a630110d0691055330ba68527e8828ea458a8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwMGE2MzAxMTBkMDY5MTA1NTMzMGJhNjg1MjdlODgyOGVhNDU4YTg=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-04-25T21:15:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-25T21:15:18Z"}, "message": "Rollup merge of #84547 - RalfJung:max_const_fn, r=oli-obk\n\nGet rid of is_min_const_fn\n\nThis removes the last trace of the min_const_fn mechanism by making the unsafety checker agnostic about whether something is a min or \"non-min\" const fn. It seems this distinction was used to disallow some features inside `const fn`, but that is the responsibility of the const checker, not of the unsafety checker. No test seems to even notice this change in the unsafety checker so I guess we are good...\n\nr? `@oli-obk`\nCc https://github.com/rust-lang/rust/issues/84510", "tree": {"sha": "eb478abf69b70d7bff4daee42f4a360ee5200aba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb478abf69b70d7bff4daee42f4a360ee5200aba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/000a630110d0691055330ba68527e8828ea458a8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJghdvmCRBK7hj4Ov3rIwAAk9kIAAW0GvTHKZI+6PNrahTW2TgW\n3I1pBinUGwsVuvF459mP6wpl3EiJ74SO0ZNVvGS3wRddZnqy8dBesusYf3Y0l60G\nmTtmgEOS1XWFK8+FTcQ73Aqta2EEW5RxiyWmMBidSPCYzr1HVlUGp+i9sD+CVj3m\nlPf1PyVjP/PZZPkqvshukzfUlxQlEwpmymRUFg1IImGiTaQL4bUQJE/RsuajIPAw\nSH/nFmVr7iEnGe9IPyJLAdN6Iit3s15R4Tu42CrGsfzipayHZdHdj4M+kZCo4voL\nwdyGzC6JtI3xS+VGn1SEt+ehs7VHsb0sJA9A7EOcxfA8cfN/wG619WdL9KJtNAQ=\n=T0KV\n-----END PGP SIGNATURE-----\n", "payload": "tree eb478abf69b70d7bff4daee42f4a360ee5200aba\nparent 25508ebe680dc5ff9a2aa0e6f4c47e9757edd1c9\nparent 588530d09635bdcdb972c0bc4fa99b983e9368ec\nauthor Dylan DPC <dylan.dpc@gmail.com> 1619385318 +0200\ncommitter GitHub <noreply@github.com> 1619385318 +0200\n\nRollup merge of #84547 - RalfJung:max_const_fn, r=oli-obk\n\nGet rid of is_min_const_fn\n\nThis removes the last trace of the min_const_fn mechanism by making the unsafety checker agnostic about whether something is a min or \"non-min\" const fn. It seems this distinction was used to disallow some features inside `const fn`, but that is the responsibility of the const checker, not of the unsafety checker. No test seems to even notice this change in the unsafety checker so I guess we are good...\n\nr? `@oli-obk`\nCc https://github.com/rust-lang/rust/issues/84510\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/000a630110d0691055330ba68527e8828ea458a8", "html_url": "https://github.com/rust-lang/rust/commit/000a630110d0691055330ba68527e8828ea458a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/000a630110d0691055330ba68527e8828ea458a8/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25508ebe680dc5ff9a2aa0e6f4c47e9757edd1c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/25508ebe680dc5ff9a2aa0e6f4c47e9757edd1c9", "html_url": "https://github.com/rust-lang/rust/commit/25508ebe680dc5ff9a2aa0e6f4c47e9757edd1c9"}, {"sha": "588530d09635bdcdb972c0bc4fa99b983e9368ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/588530d09635bdcdb972c0bc4fa99b983e9368ec", "html_url": "https://github.com/rust-lang/rust/commit/588530d09635bdcdb972c0bc4fa99b983e9368ec"}], "stats": {"total": 244, "additions": 102, "deletions": 142}, "files": [{"sha": "fdd874c6f68224064e486c8cfe8a3ee9c46f3907", "filename": "compiler/rustc_middle/src/mir/query.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/000a630110d0691055330ba68527e8828ea458a8/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/000a630110d0691055330ba68527e8828ea458a8/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs?ref=000a630110d0691055330ba68527e8828ea458a8", "patch": "@@ -19,10 +19,8 @@ use super::{Field, SourceInfo};\n \n #[derive(Copy, Clone, PartialEq, TyEncodable, TyDecodable, HashStable, Debug)]\n pub enum UnsafetyViolationKind {\n-    /// Only permitted in regular `fn`s, prohibited in `const fn`s.\n+    /// Unsafe operation outside `unsafe`.\n     General,\n-    /// Permitted both in `const fn`s and regular `fn`s.\n-    GeneralAndConstFn,\n     /// Unsafe operation in an `unsafe fn` but outside an `unsafe` block.\n     /// Has to be handled as a lint for backwards compatibility.\n     UnsafeFn,"}, {"sha": "40419a4d201ac0b198ab799ebf509a020ea23b7e", "filename": "compiler/rustc_mir/src/const_eval/fn_queries.rs", "status": "modified", "additions": 0, "deletions": 49, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/000a630110d0691055330ba68527e8828ea458a8/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Ffn_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/000a630110d0691055330ba68527e8828ea458a8/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Ffn_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Ffn_queries.rs?ref=000a630110d0691055330ba68527e8828ea458a8", "patch": "@@ -1,4 +1,3 @@\n-use rustc_attr as attr;\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_middle::hir::map::blocks::FnLikeNode;\n@@ -34,54 +33,6 @@ pub fn is_unstable_const_fn(tcx: TyCtxt<'_>, def_id: DefId) -> Option<Symbol> {\n     }\n }\n \n-/// Returns `true` if this function must conform to `min_const_fn`\n-pub fn is_min_const_fn(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n-    // Bail out if the signature doesn't contain `const`\n-    if !tcx.is_const_fn_raw(def_id) {\n-        return false;\n-    }\n-\n-    if tcx.features().staged_api {\n-        // In order for a libstd function to be considered min_const_fn\n-        // it needs to be stable and have no `rustc_const_unstable` attribute.\n-        match tcx.lookup_const_stability(def_id) {\n-            // `rustc_const_unstable` functions don't need to conform.\n-            Some(&attr::ConstStability { ref level, .. }) if level.is_unstable() => false,\n-            None => {\n-                if let Some(stab) = tcx.lookup_stability(def_id) {\n-                    if stab.level.is_stable() {\n-                        tcx.sess.delay_span_bug(\n-                            tcx.def_span(def_id),\n-                            \"stable const functions must have either `rustc_const_stable` or \\\n-                             `rustc_const_unstable` attribute\",\n-                        );\n-                        // While we errored above, because we don't know if we need to conform, we\n-                        // err on the \"safe\" side and require min_const_fn.\n-                        true\n-                    } else {\n-                        // Unstable functions need not conform to min_const_fn.\n-                        false\n-                    }\n-                } else {\n-                    // Internal functions are forced to conform to min_const_fn.\n-                    // Annotate the internal function with a const stability attribute if\n-                    // you need to use unstable features.\n-                    // Note: this is an arbitrary choice that does not affect stability or const\n-                    // safety or anything, it just changes whether we need to annotate some\n-                    // internal functions with `rustc_const_stable` or with `rustc_const_unstable`\n-                    true\n-                }\n-            }\n-            // Everything else needs to conform, because it would be callable from\n-            // other `min_const_fn` functions.\n-            _ => true,\n-        }\n-    } else {\n-        // users enabling the `const_fn` feature gate can do what they want\n-        !tcx.features().const_fn\n-    }\n-}\n-\n pub fn is_parent_const_impl_raw(tcx: TyCtxt<'_>, hir_id: hir::HirId) -> bool {\n     let parent_id = tcx.hir().get_parent_did(hir_id);\n     if !parent_id.is_top_level_module() { is_const_impl_raw(tcx, parent_id) } else { false }"}, {"sha": "955be8cc81e18285502b650f541130e7db5375b6", "filename": "compiler/rustc_mir/src/transform/check_unsafety.rs", "status": "modified", "additions": 17, "deletions": 50, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/000a630110d0691055330ba68527e8828ea458a8/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/000a630110d0691055330ba68527e8828ea458a8/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_unsafety.rs?ref=000a630110d0691055330ba68527e8828ea458a8", "patch": "@@ -15,13 +15,10 @@ use rustc_session::lint::Level;\n \n use std::ops::Bound;\n \n-use crate::const_eval::is_min_const_fn;\n-\n pub struct UnsafetyChecker<'a, 'tcx> {\n     body: &'a Body<'tcx>,\n     body_did: LocalDefId,\n     const_context: bool,\n-    min_const_fn: bool,\n     violations: Vec<UnsafetyViolation>,\n     source_info: SourceInfo,\n     tcx: TyCtxt<'tcx>,\n@@ -34,21 +31,15 @@ pub struct UnsafetyChecker<'a, 'tcx> {\n impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n     fn new(\n         const_context: bool,\n-        min_const_fn: bool,\n         body: &'a Body<'tcx>,\n         body_did: LocalDefId,\n         tcx: TyCtxt<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n     ) -> Self {\n-        // sanity check\n-        if min_const_fn {\n-            assert!(const_context);\n-        }\n         Self {\n             body,\n             body_did,\n             const_context,\n-            min_const_fn,\n             violations: vec![],\n             source_info: SourceInfo::outermost(body.span),\n             tcx,\n@@ -84,7 +75,7 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                 let sig = func_ty.fn_sig(self.tcx);\n                 if let hir::Unsafety::Unsafe = sig.unsafety() {\n                     self.require_unsafe(\n-                        UnsafetyViolationKind::GeneralAndConstFn,\n+                        UnsafetyViolationKind::General,\n                         UnsafetyViolationDetails::CallToUnsafeFunction,\n                     )\n                 }\n@@ -134,7 +125,7 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                     match self.tcx.layout_scalar_valid_range(def.did) {\n                         (Bound::Unbounded, Bound::Unbounded) => {}\n                         _ => self.require_unsafe(\n-                            UnsafetyViolationKind::GeneralAndConstFn,\n+                            UnsafetyViolationKind::General,\n                             UnsafetyViolationDetails::InitializingTypeWith,\n                         ),\n                     }\n@@ -213,7 +204,7 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                 let base_ty = base.ty(self.body, self.tcx).ty;\n                 if base_ty.is_unsafe_ptr() {\n                     self.require_unsafe(\n-                        UnsafetyViolationKind::GeneralAndConstFn,\n+                        UnsafetyViolationKind::General,\n                         UnsafetyViolationDetails::DerefOfRawPointer,\n                     )\n                 }\n@@ -258,15 +249,15 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                         );\n                     if !nodrop {\n                         self.require_unsafe(\n-                            UnsafetyViolationKind::GeneralAndConstFn,\n+                            UnsafetyViolationKind::General,\n                             UnsafetyViolationDetails::AssignToDroppingUnionField,\n                         );\n                     } else {\n                         // write to non-drop union field, safe\n                     }\n                 } else {\n                     self.require_unsafe(\n-                        UnsafetyViolationKind::GeneralAndConstFn,\n+                        UnsafetyViolationKind::General,\n                         UnsafetyViolationDetails::AccessToUnionField,\n                     )\n                 }\n@@ -277,6 +268,9 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n \n impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n     fn require_unsafe(&mut self, kind: UnsafetyViolationKind, details: UnsafetyViolationDetails) {\n+        // Violations can turn out to be `UnsafeFn` during analysis, but they should not start out as such.\n+        assert_ne!(kind, UnsafetyViolationKind::UnsafeFn);\n+\n         let source_info = self.source_info;\n         let lint_root = self.body.source_scopes[self.source_info.scope]\n             .local_data\n@@ -304,8 +298,7 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n             Safety::Safe => {\n                 for violation in violations {\n                     match violation.kind {\n-                        UnsafetyViolationKind::GeneralAndConstFn\n-                        | UnsafetyViolationKind::General => {}\n+                        UnsafetyViolationKind::General => {}\n                         UnsafetyViolationKind::UnsafeFn => {\n                             bug!(\"`UnsafetyViolationKind::UnsafeFn` in an `Safe` context\")\n                         }\n@@ -334,29 +327,6 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n                 if !violations.is_empty() {\n                     self.used_unsafe.insert(hir_id);\n                 }\n-                // only some unsafety is allowed in const fn\n-                if self.min_const_fn {\n-                    for violation in violations {\n-                        match violation.kind {\n-                            // these unsafe things are stable in const fn\n-                            UnsafetyViolationKind::GeneralAndConstFn => {}\n-                            // these things are forbidden in const fns\n-                            UnsafetyViolationKind::General => {\n-                                let mut violation = *violation;\n-                                // const fns don't need to be backwards compatible and can\n-                                // emit these violations as a hard error instead of a backwards\n-                                // compat lint\n-                                violation.kind = UnsafetyViolationKind::General;\n-                                if !self.violations.contains(&violation) {\n-                                    self.violations.push(violation)\n-                                }\n-                            }\n-                            UnsafetyViolationKind::UnsafeFn => bug!(\n-                                \"`UnsafetyViolationKind::UnsafeFn` in an `ExplicitUnsafe` context\"\n-                            ),\n-                        }\n-                    }\n-                }\n                 true\n             }\n         };\n@@ -394,7 +364,7 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n                             } else {\n                                 continue;\n                             };\n-                            self.require_unsafe(UnsafetyViolationKind::GeneralAndConstFn, details);\n+                            self.require_unsafe(UnsafetyViolationKind::General, details);\n                         }\n                     }\n                 }\n@@ -412,7 +382,7 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n         // Is `callee_features` a subset of `calling_features`?\n         if !callee_features.iter().all(|feature| self_features.contains(feature)) {\n             self.require_unsafe(\n-                UnsafetyViolationKind::GeneralAndConstFn,\n+                UnsafetyViolationKind::General,\n                 UnsafetyViolationDetails::CallToFunctionWith,\n             )\n         }\n@@ -494,15 +464,12 @@ fn unsafety_check_result<'tcx>(\n     let param_env = tcx.param_env(def.did);\n \n     let id = tcx.hir().local_def_id_to_hir_id(def.did);\n-    let (const_context, min_const_fn) = match tcx.hir().body_owner_kind(id) {\n-        hir::BodyOwnerKind::Closure => (false, false),\n-        hir::BodyOwnerKind::Fn => {\n-            (tcx.is_const_fn_raw(def.did.to_def_id()), is_min_const_fn(tcx, def.did.to_def_id()))\n-        }\n-        hir::BodyOwnerKind::Const | hir::BodyOwnerKind::Static(_) => (true, false),\n+    let const_context = match tcx.hir().body_owner_kind(id) {\n+        hir::BodyOwnerKind::Closure => false,\n+        hir::BodyOwnerKind::Fn => tcx.is_const_fn_raw(def.did.to_def_id()),\n+        hir::BodyOwnerKind::Const | hir::BodyOwnerKind::Static(_) => true,\n     };\n-    let mut checker =\n-        UnsafetyChecker::new(const_context, min_const_fn, body, def.did, tcx, param_env);\n+    let mut checker = UnsafetyChecker::new(const_context, body, def.did, tcx, param_env);\n     checker.visit_body(&body);\n \n     check_unused_unsafe(tcx, def.did, &checker.used_unsafe, &mut checker.inherited_blocks);\n@@ -577,7 +544,7 @@ pub fn check_unsafety(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n             if unsafe_op_in_unsafe_fn_allowed(tcx, lint_root) { \" function or\" } else { \"\" };\n \n         match kind {\n-            UnsafetyViolationKind::GeneralAndConstFn | UnsafetyViolationKind::General => {\n+            UnsafetyViolationKind::General => {\n                 // once\n                 struct_span_err!(\n                     tcx.sess,"}, {"sha": "fe87a97bac1284bc690c9879fcd0474200cbf70d", "filename": "library/alloc/src/raw_vec.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/000a630110d0691055330ba68527e8828ea458a8/library%2Falloc%2Fsrc%2Fraw_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/000a630110d0691055330ba68527e8828ea458a8/library%2Falloc%2Fsrc%2Fraw_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fraw_vec.rs?ref=000a630110d0691055330ba68527e8828ea458a8", "patch": "@@ -53,17 +53,11 @@ pub struct RawVec<T, A: Allocator = Global> {\n }\n \n impl<T> RawVec<T, Global> {\n-    /// HACK(Centril): This exists because `#[unstable]` `const fn`s needn't conform\n-    /// to `min_const_fn` and so they cannot be called in `min_const_fn`s either.\n+    /// HACK(Centril): This exists because stable `const fn` can only call stable `const fn`, so\n+    /// they cannot call `Self::new()`.\n     ///\n-    /// If you change `RawVec<T>::new` or dependencies, please take care to not\n-    /// introduce anything that would truly violate `min_const_fn`.\n-    ///\n-    /// NOTE: We could avoid this hack and check conformance with some\n-    /// `#[rustc_force_min_const_fn]` attribute which requires conformance\n-    /// with `min_const_fn` but does not necessarily allow calling it in\n-    /// `stable(...) const fn` / user code not enabling `foo` when\n-    /// `#[rustc_const_unstable(feature = \"foo\", issue = \"01234\")]` is present.\n+    /// If you change `RawVec<T>::new` or dependencies, please take care to not introduce anything\n+    /// that would truly const-call something unstable.\n     pub const NEW: Self = Self::new();\n \n     /// Creates the biggest possible `RawVec` (on the system heap)"}, {"sha": "3986167bac8d3f7b3a52d4489d2275d6c5623e67", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/000a630110d0691055330ba68527e8828ea458a8/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/000a630110d0691055330ba68527e8828ea458a8/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=000a630110d0691055330ba68527e8828ea458a8", "patch": "@@ -10,7 +10,6 @@ use rustc_hir::def_id::DefId;\n use rustc_hir::Mutability;\n use rustc_metadata::creader::LoadedMacro;\n use rustc_middle::ty::{self, TyCtxt};\n-use rustc_mir::const_eval::is_min_const_fn;\n use rustc_span::hygiene::MacroKind;\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::Span;\n@@ -210,7 +209,7 @@ fn build_external_function(cx: &mut DocContext<'_>, did: DefId) -> clean::Functi\n     let sig = cx.tcx.fn_sig(did);\n \n     let constness =\n-        if is_min_const_fn(cx.tcx, did) { hir::Constness::Const } else { hir::Constness::NotConst };\n+        if cx.tcx.is_const_fn_raw(did) { hir::Constness::Const } else { hir::Constness::NotConst };\n     let asyncness = cx.tcx.asyncness(did);\n     let predicates = cx.tcx.predicates_of(did);\n     let (generics, decl) = clean::enter_impl_trait(cx, |cx| {"}, {"sha": "6b04157d9530fa26dc2858b02637e654d1891fc2", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/000a630110d0691055330ba68527e8828ea458a8/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/000a630110d0691055330ba68527e8828ea458a8/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=000a630110d0691055330ba68527e8828ea458a8", "patch": "@@ -22,7 +22,7 @@ use rustc_middle::middle::resolve_lifetime as rl;\n use rustc_middle::ty::fold::TypeFolder;\n use rustc_middle::ty::subst::{InternalSubsts, Subst};\n use rustc_middle::ty::{self, AdtKind, Lift, Ty, TyCtxt};\n-use rustc_mir::const_eval::{is_const_fn, is_min_const_fn, is_unstable_const_fn};\n+use rustc_mir::const_eval::{is_const_fn, is_unstable_const_fn};\n use rustc_span::hygiene::{AstPass, MacroKind};\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{self, ExpnKind};\n@@ -1048,7 +1048,7 @@ impl Clean<Item> for ty::AssocItem {\n                     ty::TraitContainer(_) => self.defaultness.has_value(),\n                 };\n                 if provided {\n-                    let constness = if is_min_const_fn(tcx, self.def_id) {\n+                    let constness = if tcx.is_const_fn_raw(self.def_id) {\n                         hir::Constness::Const\n                     } else {\n                         hir::Constness::NotConst"}, {"sha": "aed099a53eaf4b2f3295bf9bb75bcaf800767697", "filename": "src/test/ui/cast/cast-ptr-to-int-const.rs", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/000a630110d0691055330ba68527e8828ea458a8/src%2Ftest%2Fui%2Fcast%2Fcast-ptr-to-int-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/000a630110d0691055330ba68527e8828ea458a8/src%2Ftest%2Fui%2Fcast%2Fcast-ptr-to-int-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast%2Fcast-ptr-to-int-const.rs?ref=000a630110d0691055330ba68527e8828ea458a8", "patch": "@@ -1,11 +1,25 @@\n // gate-test-const_raw_ptr_to_usize_cast\n+// revisions: with_feature without_feature\n+\n+#![cfg_attr(with_feature, feature(const_raw_ptr_to_usize_cast))]\n \n fn main() {\n-    const X: u32 = unsafe {\n-        main as u32 //~ ERROR casting pointers to integers in constants is unstable\n+    const X: usize = unsafe {\n+        main as usize //[without_feature]~ ERROR casting pointers to integers in constants is unstable\n     };\n     const Y: u32 = 0;\n-    const Z: u32 = unsafe {\n-        &Y as *const u32 as u32 //~ ERROR is unstable\n+    const Z: usize = unsafe {\n+        &Y as *const u32 as usize //[without_feature]~ ERROR is unstable\n+    };\n+    // Cast in `const` without `unsafe` block\n+    const SAFE: usize = {\n+        &Y as *const u32 as usize //[without_feature]~ ERROR is unstable\n+        //[with_feature]~^ ERROR cast of pointer to int is unsafe and requires unsafe\n     };\n }\n+\n+// Cast in `const fn` without `unsafe` block\n+const fn test() -> usize {\n+    &0 as *const i32 as usize //[without_feature]~ ERROR is unstable\n+    //[with_feature]~^ ERROR cast of pointer to int is unsafe and requires unsafe\n+}"}, {"sha": "f523b14a98c00dac52140e64b0b59b27138ea9b3", "filename": "src/test/ui/cast/cast-ptr-to-int-const.stderr", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/25508ebe680dc5ff9a2aa0e6f4c47e9757edd1c9/src%2Ftest%2Fui%2Fcast%2Fcast-ptr-to-int-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25508ebe680dc5ff9a2aa0e6f4c47e9757edd1c9/src%2Ftest%2Fui%2Fcast%2Fcast-ptr-to-int-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast%2Fcast-ptr-to-int-const.stderr?ref=25508ebe680dc5ff9a2aa0e6f4c47e9757edd1c9", "patch": "@@ -1,21 +0,0 @@\n-error[E0658]: casting pointers to integers in constants is unstable\n-  --> $DIR/cast-ptr-to-int-const.rs:5:9\n-   |\n-LL |         main as u32\n-   |         ^^^^^^^^^^^\n-   |\n-   = note: see issue #51910 <https://github.com/rust-lang/rust/issues/51910> for more information\n-   = help: add `#![feature(const_raw_ptr_to_usize_cast)]` to the crate attributes to enable\n-\n-error[E0658]: casting pointers to integers in constants is unstable\n-  --> $DIR/cast-ptr-to-int-const.rs:9:9\n-   |\n-LL |         &Y as *const u32 as u32\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #51910 <https://github.com/rust-lang/rust/issues/51910> for more information\n-   = help: add `#![feature(const_raw_ptr_to_usize_cast)]` to the crate attributes to enable\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "8282bc3db05073882bca837ac9fc7f19c0e7ff29", "filename": "src/test/ui/cast/cast-ptr-to-int-const.with_feature.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/000a630110d0691055330ba68527e8828ea458a8/src%2Ftest%2Fui%2Fcast%2Fcast-ptr-to-int-const.with_feature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/000a630110d0691055330ba68527e8828ea458a8/src%2Ftest%2Fui%2Fcast%2Fcast-ptr-to-int-const.with_feature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast%2Fcast-ptr-to-int-const.with_feature.stderr?ref=000a630110d0691055330ba68527e8828ea458a8", "patch": "@@ -0,0 +1,19 @@\n+error[E0133]: cast of pointer to int is unsafe and requires unsafe function or block\n+  --> $DIR/cast-ptr-to-int-const.rs:16:9\n+   |\n+LL |         &Y as *const u32 as usize\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^ cast of pointer to int\n+   |\n+   = note: casting pointers to integers in constants\n+\n+error[E0133]: cast of pointer to int is unsafe and requires unsafe function or block\n+  --> $DIR/cast-ptr-to-int-const.rs:23:5\n+   |\n+LL |     &0 as *const i32 as usize\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ cast of pointer to int\n+   |\n+   = note: casting pointers to integers in constants\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0133`."}, {"sha": "c87fa1a14a4c87a33ea29dba24cc6d387ab3946a", "filename": "src/test/ui/cast/cast-ptr-to-int-const.without_feature.stderr", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/000a630110d0691055330ba68527e8828ea458a8/src%2Ftest%2Fui%2Fcast%2Fcast-ptr-to-int-const.without_feature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/000a630110d0691055330ba68527e8828ea458a8/src%2Ftest%2Fui%2Fcast%2Fcast-ptr-to-int-const.without_feature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast%2Fcast-ptr-to-int-const.without_feature.stderr?ref=000a630110d0691055330ba68527e8828ea458a8", "patch": "@@ -0,0 +1,39 @@\n+error[E0658]: casting pointers to integers in constants is unstable\n+  --> $DIR/cast-ptr-to-int-const.rs:8:9\n+   |\n+LL |         main as usize\n+   |         ^^^^^^^^^^^^^\n+   |\n+   = note: see issue #51910 <https://github.com/rust-lang/rust/issues/51910> for more information\n+   = help: add `#![feature(const_raw_ptr_to_usize_cast)]` to the crate attributes to enable\n+\n+error[E0658]: casting pointers to integers in constants is unstable\n+  --> $DIR/cast-ptr-to-int-const.rs:12:9\n+   |\n+LL |         &Y as *const u32 as usize\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #51910 <https://github.com/rust-lang/rust/issues/51910> for more information\n+   = help: add `#![feature(const_raw_ptr_to_usize_cast)]` to the crate attributes to enable\n+\n+error[E0658]: casting pointers to integers in constants is unstable\n+  --> $DIR/cast-ptr-to-int-const.rs:16:9\n+   |\n+LL |         &Y as *const u32 as usize\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #51910 <https://github.com/rust-lang/rust/issues/51910> for more information\n+   = help: add `#![feature(const_raw_ptr_to_usize_cast)]` to the crate attributes to enable\n+\n+error[E0658]: casting pointers to integers in constant functions is unstable\n+  --> $DIR/cast-ptr-to-int-const.rs:23:5\n+   |\n+LL |     &0 as *const i32 as usize\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #51910 <https://github.com/rust-lang/rust/issues/51910> for more information\n+   = help: add `#![feature(const_raw_ptr_to_usize_cast)]` to the crate attributes to enable\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "60425ff853b7ea4690ecd404e38d42b799227ffb", "filename": "src/tools/clippy/clippy_lints/src/missing_const_for_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/000a630110d0691055330ba68527e8828ea458a8/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/000a630110d0691055330ba68527e8828ea458a8/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_const_for_fn.rs?ref=000a630110d0691055330ba68527e8828ea458a8", "patch": "@@ -139,7 +139,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingConstForFn {\n         let mir = cx.tcx.optimized_mir(def_id);\n \n         if let Err((span, err)) = is_min_const_fn(cx.tcx, mir, self.msrv.as_ref()) {\n-            if rustc_mir::const_eval::is_min_const_fn(cx.tcx, def_id.to_def_id()) {\n+            if cx.tcx.is_const_fn_raw(def_id.to_def_id()) {\n                 cx.tcx.sess.span_err(span, &err);\n             }\n         } else {"}]}