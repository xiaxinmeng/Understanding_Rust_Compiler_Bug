{"sha": "230355f25f10306211a80040bec1561545715383", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzMDM1NWYyNWYxMDMwNjIxMWE4MDA0MGJlYzE1NjE1NDU3MTUzODM=", "commit": {"author": {"name": "Gus Wynn", "email": "guswynn@gmail.com", "date": "2020-09-16T19:32:10Z"}, "committer": {"name": "Gus Wynn", "email": "guswynn@gmail.com", "date": "2020-09-16T19:32:10Z"}, "message": "comments and factor to own method", "tree": {"sha": "05f2da3215ffe903137dfeaae1a8a49920fa27b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05f2da3215ffe903137dfeaae1a8a49920fa27b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/230355f25f10306211a80040bec1561545715383", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/230355f25f10306211a80040bec1561545715383", "html_url": "https://github.com/rust-lang/rust/commit/230355f25f10306211a80040bec1561545715383", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/230355f25f10306211a80040bec1561545715383/comments", "author": {"login": "guswynn", "id": 5404303, "node_id": "MDQ6VXNlcjU0MDQzMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/5404303?v=4", "gravatar_id": "", "url": "https://api.github.com/users/guswynn", "html_url": "https://github.com/guswynn", "followers_url": "https://api.github.com/users/guswynn/followers", "following_url": "https://api.github.com/users/guswynn/following{/other_user}", "gists_url": "https://api.github.com/users/guswynn/gists{/gist_id}", "starred_url": "https://api.github.com/users/guswynn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/guswynn/subscriptions", "organizations_url": "https://api.github.com/users/guswynn/orgs", "repos_url": "https://api.github.com/users/guswynn/repos", "events_url": "https://api.github.com/users/guswynn/events{/privacy}", "received_events_url": "https://api.github.com/users/guswynn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "guswynn", "id": 5404303, "node_id": "MDQ6VXNlcjU0MDQzMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/5404303?v=4", "gravatar_id": "", "url": "https://api.github.com/users/guswynn", "html_url": "https://github.com/guswynn", "followers_url": "https://api.github.com/users/guswynn/followers", "following_url": "https://api.github.com/users/guswynn/following{/other_user}", "gists_url": "https://api.github.com/users/guswynn/gists{/gist_id}", "starred_url": "https://api.github.com/users/guswynn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/guswynn/subscriptions", "organizations_url": "https://api.github.com/users/guswynn/orgs", "repos_url": "https://api.github.com/users/guswynn/repos", "events_url": "https://api.github.com/users/guswynn/events{/privacy}", "received_events_url": "https://api.github.com/users/guswynn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d930483247bac3dd7df3470abd5432d198fe755", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d930483247bac3dd7df3470abd5432d198fe755", "html_url": "https://github.com/rust-lang/rust/commit/1d930483247bac3dd7df3470abd5432d198fe755"}], "stats": {"total": 74, "additions": 38, "deletions": 36}, "files": [{"sha": "713717cfe1a54353517c9005932f5ebadd5e03f5", "filename": "compiler/rustc_typeck/src/check/pat.rs", "status": "modified", "additions": 36, "deletions": 34, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/230355f25f10306211a80040bec1561545715383/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/230355f25f10306211a80040bec1561545715383/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs?ref=230355f25f10306211a80040bec1561545715383", "patch": "@@ -1,5 +1,6 @@\n use crate::check::FnCtxt;\n use rustc_ast as ast;\n+\n use rustc_ast::util::lev_distance::find_best_match_for_name;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder};\n@@ -740,6 +741,40 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         pat_ty\n     }\n \n+    fn maybe_suggest_range_literal(\n+        &self,\n+        e: &mut DiagnosticBuilder<'_>,\n+        opt_def_id: Option<hir::def_id::DefId>,\n+        ident: Ident,\n+    ) -> bool {\n+        match opt_def_id {\n+            Some(def_id) => match self.tcx.hir().get_if_local(def_id) {\n+                Some(hir::Node::Item(hir::Item {\n+                    kind: hir::ItemKind::Const(_, body_id), ..\n+                })) => match self.tcx.hir().get(body_id.hir_id) {\n+                    hir::Node::Expr(expr) => {\n+                        if hir::is_range_literal(expr) {\n+                            let span = self.tcx.hir().span(body_id.hir_id);\n+                            if let Ok(snip) = self.tcx.sess.source_map().span_to_snippet(span) {\n+                                e.span_suggestion_verbose(\n+                                    ident.span,\n+                                    \"you may want to move the range into the match block\",\n+                                    snip,\n+                                    Applicability::MachineApplicable,\n+                                );\n+                                return true;\n+                            }\n+                        }\n+                    }\n+                    _ => (),\n+                },\n+                _ => (),\n+            },\n+            _ => (),\n+        }\n+        false\n+    }\n+\n     fn emit_bad_pat_path(\n         &self,\n         mut e: DiagnosticBuilder<'_>,\n@@ -789,40 +824,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             self.tcx.lang_items().range_to_inclusive_struct(),\n                         ];\n                         if type_def_id != None && ranges.contains(&type_def_id) {\n-                            let generic_message = match item_def_id {\n-                                Some(def_id) => match self.tcx.hir().get_if_local(def_id) {\n-                                    Some(hir::Node::Item(hir::Item {\n-                                        kind: hir::ItemKind::Const(_, body_id),\n-                                        ..\n-                                    })) => match self.tcx.hir().get(body_id.hir_id) {\n-                                        hir::Node::Expr(expr) => {\n-                                            if hir::is_range_literal(expr) {\n-                                                let span = self.tcx.hir().span(body_id.hir_id);\n-                                                if let Ok(snip) =\n-                                                    self.tcx.sess.source_map().span_to_snippet(span)\n-                                                {\n-                                                    e.span_suggestion_verbose(\n-                                                    span,\n-                                                    \"you may want to move the range into the match block\", \n-                                                    snip,\n-                                                    Applicability::MachineApplicable\n-                                                );\n-                                                    false\n-                                                } else {\n-                                                    true\n-                                                }\n-                                            } else {\n-                                                true\n-                                            }\n-                                        }\n-                                        _ => true,\n-                                    },\n-                                    _ => true,\n-                                },\n-                                _ => true,\n-                            };\n-\n-                            if generic_message {\n+                            if !self.maybe_suggest_range_literal(&mut e, item_def_id, *ident) {\n                                 let msg = \"constants only support matching by type, \\\n                                     if you meant to match against a range of values, \\\n                                     consider using a range pattern like `min ..= max` in the match block\";"}, {"sha": "bdcd2fe1adc5a727636cea40fc055b4a0687ad3d", "filename": "src/test/ui/issues/issue-76191.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/230355f25f10306211a80040bec1561545715383/src%2Ftest%2Fui%2Fissues%2Fissue-76191.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/230355f25f10306211a80040bec1561545715383/src%2Ftest%2Fui%2Fissues%2Fissue-76191.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-76191.stderr?ref=230355f25f10306211a80040bec1561545715383", "patch": "@@ -16,8 +16,8 @@ LL |         RANGE => {}\n             found struct `RangeInclusive<i32>`\n help: you may want to move the range into the match block\n    |\n-LL | const RANGE: RangeInclusive<i32> = 0..=255;\n-   |                                    ^^^^^^^\n+LL |         0..=255 => {}\n+   |         ^^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/issue-76191.rs:15:9"}]}