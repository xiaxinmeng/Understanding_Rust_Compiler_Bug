{"sha": "7380b1ce7f7538ca6f6f61cc442f45e64622b902", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczODBiMWNlN2Y3NTM4Y2E2ZjZmNjFjYzQ0MmY0NWU2NDYyMmI5MDI=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-09-11T02:03:35Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-09-13T01:54:12Z"}, "message": "std: Add Option.unwrap_or_else and a couple tests", "tree": {"sha": "c0bcbcfca6f6898f68ba1fa4185ecbcfdc6bddc6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c0bcbcfca6f6898f68ba1fa4185ecbcfdc6bddc6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7380b1ce7f7538ca6f6f61cc442f45e64622b902", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7380b1ce7f7538ca6f6f61cc442f45e64622b902", "html_url": "https://github.com/rust-lang/rust/commit/7380b1ce7f7538ca6f6f61cc442f45e64622b902", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7380b1ce7f7538ca6f6f61cc442f45e64622b902/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2bd87ad432901f3baeab2fc1f2aa8aa328f04ea7", "url": "https://api.github.com/repos/rust-lang/rust/commits/2bd87ad432901f3baeab2fc1f2aa8aa328f04ea7", "html_url": "https://github.com/rust-lang/rust/commit/2bd87ad432901f3baeab2fc1f2aa8aa328f04ea7"}], "stats": {"total": 47, "additions": 47, "deletions": 0}, "files": [{"sha": "55d5cb279238dbec3b36f1ac17804ef8653f1869", "filename": "src/libstd/option.rs", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/7380b1ce7f7538ca6f6f61cc442f45e64622b902/src%2Flibstd%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7380b1ce7f7538ca6f6f61cc442f45e64622b902/src%2Flibstd%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Foption.rs?ref=7380b1ce7f7538ca6f6f61cc442f45e64622b902", "patch": "@@ -340,6 +340,15 @@ impl<T> Option<T> {\n         }\n     }\n \n+    /// Returns the contained value or computes it from a closure\n+    #[inline]\n+    pub fn unwrap_or_else(self, f: &fn() -> T) -> T {\n+        match self {\n+            Some(x) => x,\n+            None => f()\n+        }\n+    }\n+\n     /// Applies a function zero or more times until the result is `None`.\n     #[inline]\n     pub fn while_some(self, blk: &fn(v: T) -> Option<T>) {\n@@ -514,6 +523,44 @@ mod tests {\n         assert_eq!(i, 11);\n     }\n \n+    #[test]\n+    fn test_unwrap() {\n+        assert_eq!(Some(1).unwrap(), 1);\n+        assert_eq!(Some(~\"hello\").unwrap(), ~\"hello\");\n+    }\n+\n+    #[test]\n+    #[should_fail]\n+    fn test_unwrap_fail1() {\n+        let x: Option<int> = None;\n+        x.unwrap();\n+    }\n+\n+    #[test]\n+    #[should_fail]\n+    fn test_unwrap_fail2() {\n+        let x: Option<~str> = None;\n+        x.unwrap();\n+    }\n+\n+    #[test]\n+    fn test_unwrap_or() {\n+        let x: Option<int> = Some(1);\n+        assert_eq!(x.unwrap_or(2), 1);\n+\n+        let x: Option<int> = None;\n+        assert_eq!(x.unwrap_or(2), 2);\n+    }\n+\n+    #[test]\n+    fn test_unwrap_or_else() {\n+        let x: Option<int> = Some(1);\n+        assert_eq!(x.unwrap_or_else(|| 2), 1);\n+\n+        let x: Option<int> = None;\n+        assert_eq!(x.unwrap_or_else(|| 2), 2);\n+    }\n+\n     #[test]\n     fn test_unwrap_or_zero() {\n         let some_stuff = Some(42);"}]}