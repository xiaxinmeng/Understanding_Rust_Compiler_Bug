{"sha": "9a6b75515e64d943d0812c4ace5eab570dfded78", "node_id": "C_kwDOAAsO6NoAKDlhNmI3NTUxNWU2NGQ5NDNkMDgxMmM0YWNlNWVhYjU3MGRmZGVkNzg", "commit": {"author": {"name": "Antoni Boucher", "email": "bouanto@zoho.com", "date": "2022-08-27T13:22:17Z"}, "committer": {"name": "Antoni Boucher", "email": "bouanto@zoho.com", "date": "2022-08-27T13:50:38Z"}, "message": "Fix merge conflicts", "tree": {"sha": "05c1770d3f7553f52bf987e106106f8f8de99f7a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05c1770d3f7553f52bf987e106106f8f8de99f7a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a6b75515e64d943d0812c4ace5eab570dfded78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a6b75515e64d943d0812c4ace5eab570dfded78", "html_url": "https://github.com/rust-lang/rust/commit/9a6b75515e64d943d0812c4ace5eab570dfded78", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a6b75515e64d943d0812c4ace5eab570dfded78/comments", "author": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "081eb744d23def41b3a6800c0e8448c180f4eb99", "url": "https://api.github.com/repos/rust-lang/rust/commits/081eb744d23def41b3a6800c0e8448c180f4eb99", "html_url": "https://github.com/rust-lang/rust/commit/081eb744d23def41b3a6800c0e8448c180f4eb99"}], "stats": {"total": 95, "additions": 69, "deletions": 26}, "files": [{"sha": "8b36fa0c1c7c35e54444ee55f23b9b5ed100adaa", "filename": ".github/workflows/ci.yml", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9a6b75515e64d943d0812c4ace5eab570dfded78/.github%2Fworkflows%2Fci.yml", "raw_url": "https://github.com/rust-lang/rust/raw/9a6b75515e64d943d0812c4ace5eab570dfded78/.github%2Fworkflows%2Fci.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fci.yml?ref=9a6b75515e64d943d0812c4ace5eab570dfded78", "patch": "@@ -56,11 +56,13 @@ jobs:\n           echo $(readlink -f gcc-build) > gcc_path\n           # NOTE: the filename is still libgccjit.so even when the artifact name is different.\n           ln gcc-build/libgccjit.so gcc-build/libgccjit.so.0\n+\n     - name: Set env\n       run: |\n         echo \"LIBRARY_PATH=$(cat gcc_path)\" >> $GITHUB_ENV\n         echo \"LD_LIBRARY_PATH=$(cat gcc_path)\" >> $GITHUB_ENV\n         echo \"workspace=\"$GITHUB_WORKSPACE >> $GITHUB_ENV\n+\n     - name: Set RUST_COMPILER_RT_ROOT\n       run: echo \"RUST_COMPILER_RT_ROOT=\"${{ env.workspace }}/llvm/compiler-rt >> $GITHUB_ENV\n \n@@ -108,11 +110,13 @@ jobs:\n         ./build.sh ${{ matrix.libgccjit_version.extra }}\n         cargo test ${{ matrix.libgccjit_version.extra }}\n         ./clean_all.sh\n+\n     - name: Prepare dependencies\n       run: |\n         git config --global user.email \"user@example.com\"\n         git config --global user.name \"User\"\n         ./prepare.sh\n+\n     # Compile is a separate step, as the actions-rs/cargo action supports error annotations\n     - name: Compile\n       uses: actions-rs/cargo@v1.0.3\n@@ -127,6 +131,7 @@ jobs:\n     - name: Run tests\n       run: |\n         ./test.sh --release --clean --build-sysroot ${{ matrix.commands }} ${{ matrix.libgccjit_version.extra }}\n+\n   duplicates:\n     runs-on: ubuntu-latest\n     steps:"}, {"sha": "b23ecda35d3e3e0144ec9711ecc065a99fecf436", "filename": "example/mini_core.rs", "status": "modified", "additions": 40, "deletions": 15, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/9a6b75515e64d943d0812c4ace5eab570dfded78/example%2Fmini_core.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a6b75515e64d943d0812c4ace5eab570dfded78/example%2Fmini_core.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fmini_core.rs?ref=9a6b75515e64d943d0812c4ace5eab570dfded78", "patch": "@@ -1,6 +1,6 @@\n #![feature(\n     no_core, lang_items, intrinsics, unboxed_closures, type_ascription, extern_types,\n-    untagged_unions, decl_macro, rustc_attrs, transparent_unions, auto_traits,\n+    decl_macro, rustc_attrs, transparent_unions, auto_traits,\n     thread_local\n )]\n #![no_core]\n@@ -39,14 +39,14 @@ impl<'a, T: ?Sized+Unsize<U>, U: ?Sized> DispatchFromDyn<&'a mut U> for &'a mut\n impl<T: ?Sized+Unsize<U>, U: ?Sized> DispatchFromDyn<*const U> for *const T {}\n // *mut T -> *mut U\n impl<T: ?Sized+Unsize<U>, U: ?Sized> DispatchFromDyn<*mut U> for *mut T {}\n-impl<T: ?Sized + Unsize<U>, U: ?Sized> DispatchFromDyn<Box<U>> for Box<T> {}\n+impl<T: ?Sized + Unsize<U>, U: ?Sized> DispatchFromDyn<Box<U, ()>> for Box<T, ()> {}\n \n #[lang = \"receiver\"]\n pub trait Receiver {}\n \n impl<T: ?Sized> Receiver for &T {}\n impl<T: ?Sized> Receiver for &mut T {}\n-impl<T: ?Sized> Receiver for Box<T> {}\n+impl<T: ?Sized, A: Allocator> Receiver for Box<T, A> {}\n \n #[lang = \"copy\"]\n pub unsafe trait Copy {}\n@@ -411,7 +411,15 @@ pub trait FnMut<Args>: FnOnce<Args> {\n \n #[lang = \"panic\"]\n #[track_caller]\n-pub fn panic(_msg: &str) -> ! {\n+pub fn panic(_msg: &'static str) -> ! {\n+    unsafe {\n+        libc::puts(\"Panicking\\n\\0\" as *const str as *const u8);\n+        intrinsics::abort();\n+    }\n+}\n+\n+#[lang = \"panic_no_unwind\"]\n+fn panic_no_unwind() -> ! {\n     unsafe {\n         libc::puts(\"Panicking\\n\\0\" as *const str as *const u8);\n         intrinsics::abort();\n@@ -450,25 +458,40 @@ pub trait Deref {\n pub trait Allocator {\n }\n \n+impl Allocator for () {}\n+\n pub struct Global;\n \n impl Allocator for Global {}\n \n+#[repr(transparent)]\n+#[rustc_layout_scalar_valid_range_start(1)]\n+#[rustc_nonnull_optimization_guaranteed]\n+pub struct NonNull<T: ?Sized>(pub *const T);\n+\n+impl<T: ?Sized, U: ?Sized> CoerceUnsized<NonNull<U>> for NonNull<T> where T: Unsize<U> {}\n+impl<T: ?Sized, U: ?Sized> DispatchFromDyn<NonNull<U>> for NonNull<T> where T: Unsize<U> {}\n+\n+pub struct Unique<T: ?Sized> {\n+    pub pointer: NonNull<T>,\n+    pub _marker: PhantomData<T>,\n+}\n+\n+impl<T: ?Sized, U: ?Sized> CoerceUnsized<Unique<U>> for Unique<T> where T: Unsize<U> {}\n+impl<T: ?Sized, U: ?Sized> DispatchFromDyn<Unique<U>> for Unique<T> where T: Unsize<U> {}\n+\n #[lang = \"owned_box\"]\n-pub struct Box<\n-    T: ?Sized,\n-    A: Allocator = Global,\n->(*mut T, A);\n+pub struct Box<T: ?Sized, A: Allocator = Global>(Unique<T>, A);\n \n-impl<T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<Box<U>> for Box<T> {}\n+impl<T: ?Sized + Unsize<U>, U: ?Sized, A: Allocator> CoerceUnsized<Box<U, A>> for Box<T, A> {}\n \n impl<T: ?Sized, A: Allocator> Drop for Box<T, A> {\n     fn drop(&mut self) {\n         // drop is currently performed by compiler.\n     }\n }\n \n-impl<T> Deref for Box<T> {\n+impl<T: ?Sized, A: Allocator> Deref for Box<T, A> {\n     type Target = T;\n \n     fn deref(&self) -> &Self::Target {\n@@ -482,8 +505,8 @@ unsafe fn allocate(size: usize, _align: usize) -> *mut u8 {\n }\n \n #[lang = \"box_free\"]\n-unsafe fn box_free<T: ?Sized, A: Allocator>(ptr: *mut T, alloc: A) {\n-    libc::free(ptr as *mut u8);\n+unsafe fn box_free<T: ?Sized>(ptr: Unique<T>, _alloc: ()) {\n+    libc::free(ptr.pointer.0 as *mut u8);\n }\n \n #[lang = \"drop\"]\n@@ -505,16 +528,18 @@ pub union MaybeUninit<T> {\n }\n \n pub mod intrinsics {\n+    use crate::Sized;\n+\n     extern \"rust-intrinsic\" {\n         pub fn abort() -> !;\n         pub fn size_of<T>() -> usize;\n-        pub fn size_of_val<T: ?::Sized>(val: *const T) -> usize;\n+        pub fn size_of_val<T: ?Sized>(val: *const T) -> usize;\n         pub fn min_align_of<T>() -> usize;\n-        pub fn min_align_of_val<T: ?::Sized>(val: *const T) -> usize;\n+        pub fn min_align_of_val<T: ?Sized>(val: *const T) -> usize;\n         pub fn copy<T>(src: *const T, dst: *mut T, count: usize);\n         pub fn transmute<T, U>(e: T) -> U;\n         pub fn ctlz_nonzero<T>(x: T) -> T;\n-        pub fn needs_drop<T: ?::Sized>() -> bool;\n+        pub fn needs_drop<T: ?Sized>() -> bool;\n         pub fn bitreverse<T>(x: T) -> T;\n         pub fn bswap<T>(x: T) -> T;\n         pub fn write_bytes<T>(dst: *mut T, val: u8, count: usize);"}, {"sha": "7ea0eebe6a128c64f1f8918009f080099eb83222", "filename": "patches/0024-core-Disable-portable-simd-test.patch", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9a6b75515e64d943d0812c4ace5eab570dfded78/patches%2F0024-core-Disable-portable-simd-test.patch", "raw_url": "https://github.com/rust-lang/rust/raw/9a6b75515e64d943d0812c4ace5eab570dfded78/patches%2F0024-core-Disable-portable-simd-test.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/patches%2F0024-core-Disable-portable-simd-test.patch?ref=9a6b75515e64d943d0812c4ace5eab570dfded78", "patch": "@@ -1,28 +1,32 @@\n-From b1ae000f6da1abd3b8e9b80c40bc11c89b8ae93c Mon Sep 17 00:00:00 2001\n-From: bjorn3 <bjorn3@users.noreply.github.com>\n-Date: Thu, 30 Dec 2021 16:54:40 +0100\n-Subject: [PATCH] [core] Disable portable-simd test\n+From f845df4056f5ba16b9f5bd703460c4ac40ea03b9 Mon Sep 17 00:00:00 2001\n+From: Antoni Boucher <bouanto@zoho.com>\n+Date: Fri, 26 Aug 2022 20:38:58 -0400\n+Subject: [PATCH] Edit\n \n ---\n- library/core/tests/lib.rs | 1 -\n- 1 file changed, 1 deletion(-)\n+ library/core/tests/lib.rs | 2 --\n+ 1 file changed, 2 deletions(-)\n \n diff --git a/library/core/tests/lib.rs b/library/core/tests/lib.rs\n-index 06c7be0..359e2e7 100644\n+index 59510d3..179bf26 100644\n --- a/library/core/tests/lib.rs\n +++ b/library/core/tests/lib.rs\n-@@ -75,7 +75,6 @@\n- #![feature(never_type)]\n+@@ -77,7 +77,6 @@\n  #![feature(unwrap_infallible)]\n+ #![feature(result_into_ok_or_err)]\n+ #![feature(pointer_byte_offsets)]\n -#![feature(portable_simd)]\n  #![feature(ptr_metadata)]\n  #![feature(once_cell)]\n  #![feature(option_result_contains)]\n-@@ -127,7 +126,6 @@ mod pin;\n+@@ -135,7 +134,6 @@ mod pin;\n  mod pin_macro;\n  mod ptr;\n  mod result;\n -mod simd;\n  mod slice;\n  mod str;\n  mod str_lossy;\n+-- \n+2.26.2.7.g19db9cfb68.dirty\n+"}, {"sha": "775d9906bf4113fd2cb4290db9bf1bd152e12637", "filename": "rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a6b75515e64d943d0812c4ace5eab570dfded78/rust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/9a6b75515e64d943d0812c4ace5eab570dfded78/rust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-toolchain?ref=9a6b75515e64d943d0812c4ace5eab570dfded78", "patch": "@@ -1,3 +1,3 @@\n [toolchain]\n-channel = \"nightly-2022-06-06\"\n+channel = \"nightly-2022-08-26\"\n components = [\"rust-src\", \"rustc-dev\", \"llvm-tools-preview\"]"}, {"sha": "41df7e647b5fc44d898b828e5c347677f0e6dec9", "filename": "src/builder.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9a6b75515e64d943d0812c4ace5eab570dfded78/src%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a6b75515e64d943d0812c4ace5eab570dfded78/src%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbuilder.rs?ref=9a6b75515e64d943d0812c4ace5eab570dfded78", "patch": "@@ -1185,6 +1185,15 @@ impl<'a, 'gcc, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'gcc, 'tcx> {\n     fn atomic_cmpxchg(&mut self, dst: RValue<'gcc>, cmp: RValue<'gcc>, src: RValue<'gcc>, order: AtomicOrdering, failure_order: AtomicOrdering, weak: bool) -> RValue<'gcc> {\n         let expected = self.current_func().new_local(None, cmp.get_type(), \"expected\");\n         self.llbb().add_assignment(None, expected, cmp);\n+        // NOTE: gcc doesn't support a failure memory model that is stronger than the success\n+        // memory model.\n+        let order =\n+            if failure_order as i32 > order as i32 {\n+                failure_order\n+            }\n+            else {\n+                order\n+            };\n         let success = self.compare_exchange(dst, expected, src, order, failure_order, weak);\n \n         let pair_type = self.cx.type_struct(&[src.get_type(), self.bool_type], false);"}]}