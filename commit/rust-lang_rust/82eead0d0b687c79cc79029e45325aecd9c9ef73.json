{"sha": "82eead0d0b687c79cc79029e45325aecd9c9ef73", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyZWVhZDBkMGI2ODdjNzljYzc5MDI5ZTQ1MzI1YWVjZDljOWVmNzM=", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2017-01-24T19:49:33Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2017-04-18T00:43:16Z"}, "message": "Return Err(()) when trying to convert sNaN representation to float", "tree": {"sha": "b0807ee0c7502255dbcc8fc12d3d2a56443046d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b0807ee0c7502255dbcc8fc12d3d2a56443046d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/82eead0d0b687c79cc79029e45325aecd9c9ef73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/82eead0d0b687c79cc79029e45325aecd9c9ef73", "html_url": "https://github.com/rust-lang/rust/commit/82eead0d0b687c79cc79029e45325aecd9c9ef73", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/82eead0d0b687c79cc79029e45325aecd9c9ef73/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32a43da68ae26bc3e22dbaca12ebb02ddc742cc7", "url": "https://api.github.com/repos/rust-lang/rust/commits/32a43da68ae26bc3e22dbaca12ebb02ddc742cc7", "html_url": "https://github.com/rust-lang/rust/commit/32a43da68ae26bc3e22dbaca12ebb02ddc742cc7"}], "stats": {"total": 48, "additions": 34, "deletions": 14}, "files": [{"sha": "ec0547662ccca070db7b3095e261a05ef2a36f94", "filename": "src/libstd/f32.rs", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/82eead0d0b687c79cc79029e45325aecd9c9ef73/src%2Flibstd%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82eead0d0b687c79cc79029e45325aecd9c9ef73/src%2Flibstd%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ff32.rs?ref=82eead0d0b687c79cc79029e45325aecd9c9ef73", "patch": "@@ -1254,16 +1254,26 @@ impl f32 {\n     ///\n     /// Note that this function is distinct from casting.\n     ///\n+    /// Returns `Err(())` if the representation of a signaling NaN \"sNaN\"\n+    /// float, is passed to the function.\n+    ///\n     /// ```\n     /// #![feature(float_bits_conv)]\n     /// use std::f32;\n-    /// let difference = (f32::from_bits(0x41480000) - 12.5).abs();\n+    /// let v = f32::from_bits(0x41480000).unwrap();\n+    /// let difference = (v - 12.5).abs();\n     /// assert!(difference <= 1e-5);\n+    /// // Example for a signaling NaN value:\n+    /// assert_eq!(f32::from_bits(0x7F800001), Err(()));\n     /// ```\n     #[unstable(feature = \"float_bits_conv\", reason = \"recently added\", issue = \"0\")]\n     #[inline]\n-    pub fn from_bits(v: u32) -> Self {\n-        unsafe { ::mem::transmute(v) }\n+    pub fn from_bits(v: u32) -> Result<Self, ()> {\n+        match v {\n+            0x7F800001 ... 0x7FBFFFFF |\n+            0xFF800001 ... 0xFFBFFFFF => Err(()),\n+            _ => Ok(unsafe { ::mem::transmute(v) }),\n+        }\n     }\n }\n \n@@ -1916,9 +1926,9 @@ mod tests {\n         assert_eq!((12.5f32).to_bits(), 0x41480000);\n         assert_eq!((1337f32).to_bits(), 0x44a72000);\n         assert_eq!((-14.25f32).to_bits(), 0xc1640000);\n-        assert_approx_eq!(f32::from_bits(0x3f800000), 1.0);\n-        assert_approx_eq!(f32::from_bits(0x41480000), 12.5);\n-        assert_approx_eq!(f32::from_bits(0x44a72000), 1337.0);\n-        assert_approx_eq!(f32::from_bits(0xc1640000), -14.25);\n+        assert_approx_eq!(f32::from_bits(0x3f800000).unwrap(), 1.0);\n+        assert_approx_eq!(f32::from_bits(0x41480000).unwrap(), 12.5);\n+        assert_approx_eq!(f32::from_bits(0x44a72000).unwrap(), 1337.0);\n+        assert_approx_eq!(f32::from_bits(0xc1640000).unwrap(), -14.25);\n     }\n }"}, {"sha": "456ea9c14112dd47d0e9025d79c12c493fbec90a", "filename": "src/libstd/f64.rs", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/82eead0d0b687c79cc79029e45325aecd9c9ef73/src%2Flibstd%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82eead0d0b687c79cc79029e45325aecd9c9ef73/src%2Flibstd%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ff64.rs?ref=82eead0d0b687c79cc79029e45325aecd9c9ef73", "patch": "@@ -1146,16 +1146,26 @@ impl f64 {\n     ///\n     /// Note that this function is distinct from casting.\n     ///\n+    /// Returns `Err(())` if the representation of a signaling NaN \"sNaN\"\n+    /// float, is passed to the function.\n+    ///\n     /// ```\n     /// #![feature(float_bits_conv)]\n     /// use std::f64;\n-    /// let difference = (f64::from_bits(0x4029000000000000) - 12.5).abs();\n+    /// let v = f64::from_bits(0x4029000000000000).unwrap();\n+    /// let difference = (v - 12.5).abs();\n     /// assert!(difference <= 1e-5);\n+    /// // Example for a signaling NaN value:\n+    /// assert_eq!(f64::from_bits(0x7FF0000000000001), Err(()));\n     /// ```\n     #[unstable(feature = \"float_bits_conv\", reason = \"recently added\", issue = \"0\")]\n     #[inline]\n-    pub fn from_bits(v: u64) -> Self {\n-        unsafe { ::mem::transmute(v) }\n+    pub fn from_bits(v: u64) -> Result<Self, ()> {\n+        match v {\n+            0x7FF0000000000001 ... 0x7FF7FFFFFFFFFFFF |\n+            0xFFF0000000000001 ... 0xFFF7FFFFFFFFFFFF => Err(()),\n+            _ => Ok(unsafe { ::mem::transmute(v) }),\n+        }\n     }\n }\n \n@@ -1801,9 +1811,9 @@ mod tests {\n         assert_eq!((12.5f64).to_bits(), 0x4029000000000000);\n         assert_eq!((1337f64).to_bits(), 0x4094e40000000000);\n         assert_eq!((-14.25f64).to_bits(), 0xc02c800000000000);\n-        assert_approx_eq!(f64::from_bits(0x3ff0000000000000), 1.0);\n-        assert_approx_eq!(f64::from_bits(0x4029000000000000), 12.5);\n-        assert_approx_eq!(f64::from_bits(0x4094e40000000000), 1337.0);\n-        assert_approx_eq!(f64::from_bits(0xc02c800000000000), -14.25);\n+        assert_approx_eq!(f64::from_bits(0x3ff0000000000000).unwrap(), 1.0);\n+        assert_approx_eq!(f64::from_bits(0x4029000000000000).unwrap(), 12.5);\n+        assert_approx_eq!(f64::from_bits(0x4094e40000000000).unwrap(), 1337.0);\n+        assert_approx_eq!(f64::from_bits(0xc02c800000000000).unwrap(), -14.25);\n     }\n }"}]}