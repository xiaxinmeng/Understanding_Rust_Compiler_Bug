{"sha": "d997a6291f42c9315f9ddd8d4044e8910ced8745", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5OTdhNjI5MWY0MmM5MzE1ZjlkZGQ4ZDQwNDRlODkxMGNlZDg3NDU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2016-09-25T20:47:00Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2016-09-30T21:02:57Z"}, "message": "Call emcc with ERROR_ON_UNDEFINED_SYMBOLS", "tree": {"sha": "56bcd87c44834f55a189b0aafae3823f76c79656", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/56bcd87c44834f55a189b0aafae3823f76c79656"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d997a6291f42c9315f9ddd8d4044e8910ced8745", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d997a6291f42c9315f9ddd8d4044e8910ced8745", "html_url": "https://github.com/rust-lang/rust/commit/d997a6291f42c9315f9ddd8d4044e8910ced8745", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d997a6291f42c9315f9ddd8d4044e8910ced8745/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "834bbab11b5b9535cbbec8b02149157fff764bf1", "url": "https://api.github.com/repos/rust-lang/rust/commits/834bbab11b5b9535cbbec8b02149157fff764bf1", "html_url": "https://github.com/rust-lang/rust/commit/834bbab11b5b9535cbbec8b02149157fff764bf1"}], "stats": {"total": 36, "additions": 28, "deletions": 8}, "files": [{"sha": "0bca616ea9abcc99e5fc604ee4d91f2472b2985d", "filename": "src/libcoretest/num/flt2dec/estimator.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d997a6291f42c9315f9ddd8d4044e8910ced8745/src%2Flibcoretest%2Fnum%2Fflt2dec%2Festimator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d997a6291f42c9315f9ddd8d4044e8910ced8745/src%2Flibcoretest%2Fnum%2Fflt2dec%2Festimator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fnum%2Fflt2dec%2Festimator.rs?ref=d997a6291f42c9315f9ddd8d4044e8910ced8745", "patch": "@@ -8,11 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// FIXME https://github.com/kripken/emscripten/issues/4563\n+// NB we have to actually not compile this test to avoid\n+// an undefined symbol error\n+#![cfg(not(target_os = \"emscripten\"))]\n+\n use core::num::flt2dec::estimator::*;\n \n #[test]\n-// FIXME https://github.com/kripken/emscripten/issues/4563\n-#[cfg_attr(target_os = \"emscripten\", ignore)]\n fn test_estimate_scaling_factor() {\n     macro_rules! assert_almost_eq {\n         ($actual:expr, $expected:expr) => ({"}, {"sha": "667f7cf2c214a9defc7c7b01c0d0f60addf59e91", "filename": "src/librustc_back/target/asmjs_unknown_emscripten.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d997a6291f42c9315f9ddd8d4044e8910ced8745/src%2Flibrustc_back%2Ftarget%2Fasmjs_unknown_emscripten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d997a6291f42c9315f9ddd8d4044e8910ced8745/src%2Flibrustc_back%2Ftarget%2Fasmjs_unknown_emscripten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fasmjs_unknown_emscripten.rs?ref=d997a6291f42c9315f9ddd8d4044e8910ced8745", "patch": "@@ -22,6 +22,7 @@ pub fn target() -> Result<Target, String> {\n         allow_asm: false,\n         obj_is_bitcode: true,\n         max_atomic_width: 32,\n+        post_link_args: vec![\"-s\".to_string(), \"ERROR_ON_UNDEFINED_SYMBOLS=1\".to_string()],\n         .. Default::default()\n     };\n     Ok(Target {"}, {"sha": "2923f2eb92e452fb520b5fd30903d86b891798c3", "filename": "src/librustc_back/target/wasm32_unknown_emscripten.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d997a6291f42c9315f9ddd8d4044e8910ced8745/src%2Flibrustc_back%2Ftarget%2Fwasm32_unknown_emscripten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d997a6291f42c9315f9ddd8d4044e8910ced8745/src%2Flibrustc_back%2Ftarget%2Fwasm32_unknown_emscripten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fwasm32_unknown_emscripten.rs?ref=d997a6291f42c9315f9ddd8d4044e8910ced8745", "patch": "@@ -24,7 +24,8 @@ pub fn target() -> Result<Target, String> {\n         allow_asm: false,\n         obj_is_bitcode: true,\n         max_atomic_width: 32,\n-        post_link_args: vec![\"-s\".to_string(), \"BINARYEN=1\".to_string()],\n+        post_link_args: vec![\"-s\".to_string(), \"BINARYEN=1\".to_string(),\n+                             \"-s\".to_string(), \"ERROR_ON_UNDEFINED_SYMBOLS=1\".to_string()],\n         .. Default::default()\n     };\n     Ok(Target {"}, {"sha": "dafc11d9cc8e9c7b01b01f1aeb0968d1254b9a3c", "filename": "src/libstd/sys/unix/process.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d997a6291f42c9315f9ddd8d4044e8910ced8745/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d997a6291f42c9315f9ddd8d4044e8910ced8745/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs?ref=d997a6291f42c9315f9ddd8d4044e8910ced8745", "patch": "@@ -369,7 +369,7 @@ impl Command {\n         }\n \n         // NaCl has no signal support.\n-        if cfg!(not(target_os = \"nacl\")) {\n+        if cfg!(not(any(target_os = \"nacl\", target_os = \"emscripten\"))) {\n             // Reset signal handling so the child process starts in a\n             // standardized state. libstd ignores SIGPIPE, and signal-handling\n             // libraries often set a mask. Child processes inherit ignored\n@@ -589,7 +589,7 @@ impl Process {\n     }\n }\n \n-#[cfg(test)]\n+#[cfg(all(test, not(target_os = \"emscripten\")))]\n mod tests {\n     use super::*;\n \n@@ -630,7 +630,6 @@ mod tests {\n     #[test]\n     #[cfg_attr(target_os = \"macos\", ignore)]\n     #[cfg_attr(target_os = \"nacl\", ignore)] // no signals on NaCl.\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn test_process_mask() {\n         unsafe {\n             // Test to make sure that a signal mask does not get inherited."}, {"sha": "1e879117f73abf2e185c0d7b57a05ad38aaed1f3", "filename": "src/libstd/sys/unix/thread.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d997a6291f42c9315f9ddd8d4044e8910ced8745/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d997a6291f42c9315f9ddd8d4044e8910ced8745/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fthread.rs?ref=d997a6291f42c9315f9ddd8d4044e8910ced8745", "patch": "@@ -29,6 +29,20 @@ pub struct Thread {\n unsafe impl Send for Thread {}\n unsafe impl Sync for Thread {}\n \n+// The pthread_attr_setstacksize symbol doesn't exist in the emscripten libc,\n+// so we have to not link to it to satisfy emcc's ERROR_ON_UNDEFINED_SYMBOLS.\n+#[cfg(not(target_os = \"emscripten\"))]\n+unsafe fn pthread_attr_setstacksize(attr: *mut libc::pthread_attr_t,\n+                                    stack_size: libc::size_t) -> libc::c_int {\n+    libc::pthread_attr_setstacksize(attr, stack_size)\n+}\n+\n+#[cfg(target_os = \"emscripten\")]\n+unsafe fn pthread_attr_setstacksize(_attr: *mut libc::pthread_attr_t,\n+                                    _stack_size: libc::size_t) -> libc::c_int {\n+    panic!()\n+}\n+\n impl Thread {\n     pub unsafe fn new<'a>(stack: usize, p: Box<FnBox() + 'a>)\n                           -> io::Result<Thread> {\n@@ -38,8 +52,8 @@ impl Thread {\n         assert_eq!(libc::pthread_attr_init(&mut attr), 0);\n \n         let stack_size = cmp::max(stack, min_stack_size(&attr));\n-        match libc::pthread_attr_setstacksize(&mut attr,\n-                                              stack_size as libc::size_t) {\n+        match pthread_attr_setstacksize(&mut attr,\n+                                        stack_size as libc::size_t) {\n             0 => {}\n             n => {\n                 assert_eq!(n, libc::EINVAL);"}, {"sha": "1b9b4ab32ca40cb1cb1f767ef4cf565721470b7e", "filename": "src/test/run-pass/format-no-std.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d997a6291f42c9315f9ddd8d4044e8910ced8745/src%2Ftest%2Frun-pass%2Fformat-no-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d997a6291f42c9315f9ddd8d4044e8910ced8745/src%2Ftest%2Frun-pass%2Fformat-no-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fformat-no-std.rs?ref=d997a6291f42c9315f9ddd8d4044e8910ced8745", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-emscripten missing rust_begin_unwind\n+\n #![feature(lang_items, start, collections)]\n #![no_std]\n "}]}