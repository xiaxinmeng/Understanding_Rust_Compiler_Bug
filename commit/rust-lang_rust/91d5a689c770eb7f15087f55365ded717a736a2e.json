{"sha": "91d5a689c770eb7f15087f55365ded717a736a2e", "node_id": "C_kwDOAAsO6NoAKDkxZDVhNjg5Yzc3MGViN2YxNTA4N2Y1NTM2NWRlZDcxN2E3MzZhMmU", "commit": {"author": {"name": "Lukas Wirth", "email": "lukas.wirth@ferrous-systems.com", "date": "2023-05-11T07:55:30Z"}, "committer": {"name": "Lukas Wirth", "email": "lukas.wirth@ferrous-systems.com", "date": "2023-05-11T08:01:38Z"}, "message": "Add config for disabling non standard lsp highlight tokens", "tree": {"sha": "dd36bb2a1f9af09f23245e4d6e5453e211fe30f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd36bb2a1f9af09f23245e4d6e5453e211fe30f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91d5a689c770eb7f15087f55365ded717a736a2e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91d5a689c770eb7f15087f55365ded717a736a2e", "html_url": "https://github.com/rust-lang/rust/commit/91d5a689c770eb7f15087f55365ded717a736a2e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91d5a689c770eb7f15087f55365ded717a736a2e/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b42acf617d05005cc678bcdaec5123d8429cb63", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b42acf617d05005cc678bcdaec5123d8429cb63", "html_url": "https://github.com/rust-lang/rust/commit/4b42acf617d05005cc678bcdaec5123d8429cb63"}], "stats": {"total": 90, "additions": 70, "deletions": 20}, "files": [{"sha": "e73a2d5c7705c62e5738b4d668adcb8ab1bbd673", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/91d5a689c770eb7f15087f55365ded717a736a2e/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91d5a689c770eb7f15087f55365ded717a736a2e/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=91d5a689c770eb7f15087f55365ded717a736a2e", "patch": "@@ -483,6 +483,8 @@ config_data! {\n         /// When enabled, rust-analyzer will highlight rust source in doc comments as well as intra\n         /// doc links.\n         semanticHighlighting_doc_comment_inject_enable: bool = \"true\",\n+        /// Whether the server is allowed to emit non-standard tokens and modifiers.\n+        semanticHighlighting_nonStandardTokens: bool = \"true\",\n         /// Use semantic tokens for operators.\n         ///\n         /// When disabled, rust-analyzer will emit semantic tokens only for operator tokens when\n@@ -1464,6 +1466,10 @@ impl Config {\n         }\n     }\n \n+    pub fn highlighting_non_standard_tokens(&self) -> bool {\n+        self.data.semanticHighlighting_nonStandardTokens\n+    }\n+\n     pub fn highlighting_config(&self) -> HighlightConfig {\n         HighlightConfig {\n             strings: self.data.semanticHighlighting_strings_enable,"}, {"sha": "e540b281e13ce4fdf81008a186f604fd884ab836", "filename": "crates/rust-analyzer/src/handlers/request.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/91d5a689c770eb7f15087f55365ded717a736a2e/crates%2Frust-analyzer%2Fsrc%2Fhandlers%2Frequest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91d5a689c770eb7f15087f55365ded717a736a2e/crates%2Frust-analyzer%2Fsrc%2Fhandlers%2Frequest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers%2Frequest.rs?ref=91d5a689c770eb7f15087f55365ded717a736a2e", "patch": "@@ -1477,6 +1477,7 @@ pub(crate) fn handle_semantic_tokens_full(\n         &line_index,\n         highlights,\n         snap.config.semantics_tokens_augments_syntax_tokens(),\n+        snap.config.highlighting_non_standard_tokens(),\n     );\n \n     // Unconditionally cache the tokens\n@@ -1506,6 +1507,7 @@ pub(crate) fn handle_semantic_tokens_full_delta(\n         &line_index,\n         highlights,\n         snap.config.semantics_tokens_augments_syntax_tokens(),\n+        snap.config.highlighting_non_standard_tokens(),\n     );\n \n     let mut cache = snap.semantic_tokens_cache.lock();\n@@ -1545,6 +1547,7 @@ pub(crate) fn handle_semantic_tokens_range(\n         &line_index,\n         highlights,\n         snap.config.semantics_tokens_augments_syntax_tokens(),\n+        snap.config.highlighting_non_standard_tokens(),\n     );\n     Ok(Some(semantic_tokens.into()))\n }"}, {"sha": "e5b43c5a10c33832d83d81d7ad50a260fdb325af", "filename": "crates/rust-analyzer/src/semantic_tokens.rs", "status": "modified", "additions": 40, "deletions": 18, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/91d5a689c770eb7f15087f55365ded717a736a2e/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91d5a689c770eb7f15087f55365ded717a736a2e/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs?ref=91d5a689c770eb7f15087f55365ded717a736a2e", "patch": "@@ -13,7 +13,7 @@ macro_rules! define_semantic_token_types {\n             $($standard:ident),*$(,)?\n         }\n         custom {\n-            $(($custom:ident, $string:literal)),*$(,)?\n+            $(($custom:ident, $string:literal) $(=> $fallback:ident)?),*$(,)?\n         }\n \n     ) => {\n@@ -24,6 +24,15 @@ macro_rules! define_semantic_token_types {\n             $(SemanticTokenType::$standard,)*\n             $($custom),*\n         ];\n+\n+        pub(crate) fn standard_fallback_type(token: SemanticTokenType) -> Option<SemanticTokenType> {\n+            $(\n+                if token == $custom {\n+                    None $(.or(Some(SemanticTokenType::$fallback)))?\n+                } else\n+            )*\n+            { Some(token )}\n+        }\n     };\n }\n \n@@ -51,42 +60,46 @@ define_semantic_token_types![\n \n     custom {\n         (ANGLE, \"angle\"),\n-        (ARITHMETIC, \"arithmetic\"),\n-        (ATTRIBUTE, \"attribute\"),\n-        (ATTRIBUTE_BRACKET, \"attributeBracket\"),\n-        (BITWISE, \"bitwise\"),\n+        (ARITHMETIC, \"arithmetic\") => OPERATOR,\n+        (ATTRIBUTE, \"attribute\") => DECORATOR,\n+        (ATTRIBUTE_BRACKET, \"attributeBracket\") => DECORATOR,\n+        (BITWISE, \"bitwise\") => OPERATOR,\n         (BOOLEAN, \"boolean\"),\n         (BRACE, \"brace\"),\n         (BRACKET, \"bracket\"),\n-        (BUILTIN_ATTRIBUTE, \"builtinAttribute\"),\n+        (BUILTIN_ATTRIBUTE, \"builtinAttribute\") => DECORATOR,\n         (BUILTIN_TYPE, \"builtinType\"),\n-        (CHAR, \"character\"),\n+        (CHAR, \"character\") => STRING,\n         (COLON, \"colon\"),\n         (COMMA, \"comma\"),\n-        (COMPARISON, \"comparison\"),\n+        (COMPARISON, \"comparison\") => OPERATOR,\n         (CONST_PARAMETER, \"constParameter\"),\n-        (DERIVE, \"derive\"),\n-        (DERIVE_HELPER, \"deriveHelper\"),\n+        (DERIVE, \"derive\") => DECORATOR,\n+        (DERIVE_HELPER, \"deriveHelper\") => DECORATOR,\n         (DOT, \"dot\"),\n-        (ESCAPE_SEQUENCE, \"escapeSequence\"),\n-        (FORMAT_SPECIFIER, \"formatSpecifier\"),\n-        (GENERIC, \"generic\"),\n+        (ESCAPE_SEQUENCE, \"escapeSequence\") => STRING,\n+        (FORMAT_SPECIFIER, \"formatSpecifier\") => STRING,\n+        (GENERIC, \"generic\") => TYPE_PARAMETER,\n         (LABEL, \"label\"),\n         (LIFETIME, \"lifetime\"),\n-        (LOGICAL, \"logical\"),\n-        (MACRO_BANG, \"macroBang\"),\n+        (LOGICAL, \"logical\") => OPERATOR,\n+        (MACRO_BANG, \"macroBang\") => MACRO,\n         (PARENTHESIS, \"parenthesis\"),\n         (PUNCTUATION, \"punctuation\"),\n-        (SELF_KEYWORD, \"selfKeyword\"),\n-        (SELF_TYPE_KEYWORD, \"selfTypeKeyword\"),\n+        (SELF_KEYWORD, \"selfKeyword\") => KEYWORD,\n+        (SELF_TYPE_KEYWORD, \"selfTypeKeyword\") => KEYWORD,\n         (SEMICOLON, \"semicolon\"),\n         (TYPE_ALIAS, \"typeAlias\"),\n-        (TOOL_MODULE, \"toolModule\"),\n+        (TOOL_MODULE, \"toolModule\") => DECORATOR,\n         (UNION, \"union\"),\n         (UNRESOLVED_REFERENCE, \"unresolvedReference\"),\n     }\n ];\n \n+macro_rules! count_tts {\n+    () => {0usize};\n+    ($_head:tt $($tail:tt)*) => {1usize + count_tts!($($tail)*)};\n+}\n macro_rules! define_semantic_token_modifiers {\n     (\n         standard {\n@@ -105,6 +118,8 @@ macro_rules! define_semantic_token_modifiers {\n             $(SemanticTokenModifier::$standard,)*\n             $($custom),*\n         ];\n+\n+        const LAST_STANDARD_MOD: usize = count_tts!($($standard)*);\n     };\n }\n \n@@ -137,6 +152,13 @@ define_semantic_token_modifiers![\n #[derive(Default)]\n pub(crate) struct ModifierSet(pub(crate) u32);\n \n+impl ModifierSet {\n+    pub(crate) fn standard_fallback(&mut self) {\n+        // Remove all non standard modifiers\n+        self.0 = self.0 & !(!0u32 << LAST_STANDARD_MOD)\n+    }\n+}\n+\n impl ops::BitOrAssign<SemanticTokenModifier> for ModifierSet {\n     fn bitor_assign(&mut self, rhs: SemanticTokenModifier) {\n         let idx = SUPPORTED_MODIFIERS.iter().position(|it| it == &rhs).unwrap();"}, {"sha": "616bdddd92bb060503ce01cfa5cbe81b2582303e", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/91d5a689c770eb7f15087f55365ded717a736a2e/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91d5a689c770eb7f15087f55365ded717a736a2e/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=91d5a689c770eb7f15087f55365ded717a736a2e", "patch": "@@ -24,7 +24,7 @@ use crate::{\n     line_index::{LineEndings, LineIndex, PositionEncoding},\n     lsp_ext,\n     lsp_utils::invalid_params_error,\n-    semantic_tokens,\n+    semantic_tokens::{self, standard_fallback_type},\n };\n \n pub(crate) fn position(line_index: &LineIndex, offset: TextSize) -> lsp_types::Position {\n@@ -587,6 +587,7 @@ pub(crate) fn semantic_tokens(\n     line_index: &LineIndex,\n     highlights: Vec<HlRange>,\n     semantics_tokens_augments_syntax_tokens: bool,\n+    non_standard_tokens: bool,\n ) -> lsp_types::SemanticTokens {\n     let id = TOKEN_RESULT_COUNTER.fetch_add(1, Ordering::SeqCst).to_string();\n     let mut builder = semantic_tokens::SemanticTokensBuilder::new(id);\n@@ -616,7 +617,15 @@ pub(crate) fn semantic_tokens(\n             }\n         }\n \n-        let (ty, mods) = semantic_token_type_and_modifiers(highlight_range.highlight);\n+        let (mut ty, mut mods) = semantic_token_type_and_modifiers(highlight_range.highlight);\n+\n+        if !non_standard_tokens {\n+            ty = match standard_fallback_type(ty) {\n+                Some(ty) => ty,\n+                None => continue,\n+            };\n+            mods.standard_fallback();\n+        }\n         let token_index = semantic_tokens::type_index(ty);\n         let modifier_bitset = mods.0;\n "}, {"sha": "c2f8c6c754f082dfa402c46ee4891b02ac513b89", "filename": "docs/user/generated_config.adoc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/91d5a689c770eb7f15087f55365ded717a736a2e/docs%2Fuser%2Fgenerated_config.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/91d5a689c770eb7f15087f55365ded717a736a2e/docs%2Fuser%2Fgenerated_config.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fgenerated_config.adoc?ref=91d5a689c770eb7f15087f55365ded717a736a2e", "patch": "@@ -753,6 +753,11 @@ Inject additional highlighting into doc comments.\n When enabled, rust-analyzer will highlight rust source in doc comments as well as intra\n doc links.\n --\n+[[rust-analyzer.semanticHighlighting.nonStandardTokens]]rust-analyzer.semanticHighlighting.nonStandardTokens (default: `true`)::\n++\n+--\n+Whether the server is allowed to emit non-standard tokens and modifiers.\n+--\n [[rust-analyzer.semanticHighlighting.operator.enable]]rust-analyzer.semanticHighlighting.operator.enable (default: `true`)::\n +\n --"}, {"sha": "b4620243c9fef8e1c8544edfd6774a8fae9a8d49", "filename": "editors/code/package.json", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/91d5a689c770eb7f15087f55365ded717a736a2e/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/91d5a689c770eb7f15087f55365ded717a736a2e/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=91d5a689c770eb7f15087f55365ded717a736a2e", "patch": "@@ -1395,6 +1395,11 @@\n                     \"default\": true,\n                     \"type\": \"boolean\"\n                 },\n+                \"rust-analyzer.semanticHighlighting.nonStandardTokens\": {\n+                    \"markdownDescription\": \"Whether the server is allowed to emit non-standard tokens and modifiers.\",\n+                    \"default\": true,\n+                    \"type\": \"boolean\"\n+                },\n                 \"rust-analyzer.semanticHighlighting.operator.enable\": {\n                     \"markdownDescription\": \"Use semantic tokens for operators.\\n\\nWhen disabled, rust-analyzer will emit semantic tokens only for operator tokens when\\nthey are tagged with modifiers.\",\n                     \"default\": true,"}]}