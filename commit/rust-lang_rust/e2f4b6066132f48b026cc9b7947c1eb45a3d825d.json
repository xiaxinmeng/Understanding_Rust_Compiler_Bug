{"sha": "e2f4b6066132f48b026cc9b7947c1eb45a3d825d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyZjRiNjA2NjEzMmY0OGIwMjZjYzliNzk0N2MxZWI0NWEzZDgyNWQ=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2019-09-25T11:31:46Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2019-09-25T21:45:18Z"}, "message": "Split map_entry tests into fixable and unfixable", "tree": {"sha": "da09bed3478696dd3273312c6c5ed7b5c88cf306", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da09bed3478696dd3273312c6c5ed7b5c88cf306"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e2f4b6066132f48b026cc9b7947c1eb45a3d825d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e2f4b6066132f48b026cc9b7947c1eb45a3d825d", "html_url": "https://github.com/rust-lang/rust/commit/e2f4b6066132f48b026cc9b7947c1eb45a3d825d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e2f4b6066132f48b026cc9b7947c1eb45a3d825d/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d445bf2e898e231e52388f036aee9156ad33ebb1", "url": "https://api.github.com/repos/rust-lang/rust/commits/d445bf2e898e231e52388f036aee9156ad33ebb1", "html_url": "https://github.com/rust-lang/rust/commit/d445bf2e898e231e52388f036aee9156ad33ebb1"}], "stats": {"total": 111, "additions": 49, "deletions": 62}, "files": [{"sha": "82267cf34a783de5947215b05c65e4f8aed6bcea", "filename": "tests/ui/entry_fixable.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e2f4b6066132f48b026cc9b7947c1eb45a3d825d/tests%2Fui%2Fentry_fixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2f4b6066132f48b026cc9b7947c1eb45a3d825d/tests%2Fui%2Fentry_fixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fentry_fixable.rs?ref=e2f4b6066132f48b026cc9b7947c1eb45a3d825d", "patch": "@@ -0,0 +1,21 @@\n+#![allow(unused, clippy::needless_pass_by_value)]\n+#![warn(clippy::map_entry)]\n+\n+use std::collections::{BTreeMap, HashMap};\n+use std::hash::Hash;\n+\n+fn foo() {}\n+\n+fn insert_if_absent0<K: Eq + Hash, V>(m: &mut HashMap<K, V>, k: K, v: V) {\n+    if !m.contains_key(&k) {\n+        m.insert(k, v);\n+    }\n+}\n+\n+fn insert_other_if_absent<K: Eq + Hash, V>(m: &mut HashMap<K, V>, k: K, o: K, v: V) {\n+    if !m.contains_key(&k) {\n+        m.insert(o, v);\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "59a20e5c00b8783c4a2d80eb4fdac79634f8f777", "filename": "tests/ui/entry_fixable.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e2f4b6066132f48b026cc9b7947c1eb45a3d825d/tests%2Fui%2Fentry_fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2f4b6066132f48b026cc9b7947c1eb45a3d825d/tests%2Fui%2Fentry_fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fentry_fixable.stderr?ref=e2f4b6066132f48b026cc9b7947c1eb45a3d825d", "patch": "@@ -0,0 +1,12 @@\n+error: usage of `contains_key` followed by `insert` on a `HashMap`\n+  --> $DIR/entry_fixable.rs:10:5\n+   |\n+LL | /     if !m.contains_key(&k) {\n+LL | |         m.insert(k, v);\n+LL | |     }\n+   | |_____^ help: consider using: `m.entry(k).or_insert(v)`\n+   |\n+   = note: `-D clippy::map-entry` implied by `-D warnings`\n+\n+error: aborting due to previous error\n+"}, {"sha": "8859a3a2f9b4c8c2180c8aef239eecbd490c7f17", "filename": "tests/ui/entry_unfixable.rs", "status": "renamed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e2f4b6066132f48b026cc9b7947c1eb45a3d825d/tests%2Fui%2Fentry_unfixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2f4b6066132f48b026cc9b7947c1eb45a3d825d/tests%2Fui%2Fentry_unfixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fentry_unfixable.rs?ref=e2f4b6066132f48b026cc9b7947c1eb45a3d825d", "patch": "@@ -6,19 +6,6 @@ use std::hash::Hash;\n \n fn foo() {}\n \n-fn insert_if_absent0<K: Eq + Hash, V>(m: &mut HashMap<K, V>, k: K, v: V) {\n-    if !m.contains_key(&k) {\n-        m.insert(k, v);\n-    }\n-}\n-\n-fn insert_if_absent1<K: Eq + Hash, V>(m: &mut HashMap<K, V>, k: K, v: V) {\n-    if !m.contains_key(&k) {\n-        foo();\n-        m.insert(k, v);\n-    }\n-}\n-\n fn insert_if_absent2<K: Eq + Hash, V>(m: &mut HashMap<K, V>, k: K, v: V) {\n     if !m.contains_key(&k) {\n         m.insert(k, v)\n@@ -62,12 +49,6 @@ fn insert_in_btreemap<K: Ord, V>(m: &mut BTreeMap<K, V>, k: K, v: V) {\n     };\n }\n \n-fn insert_other_if_absent<K: Eq + Hash, V>(m: &mut HashMap<K, V>, k: K, o: K, v: V) {\n-    if !m.contains_key(&k) {\n-        m.insert(o, v);\n-    }\n-}\n-\n // should not trigger, because the one uses different HashMap from another one\n fn insert_from_different_map<K: Eq + Hash, V>(m: HashMap<K, V>, n: &mut HashMap<K, V>, k: K, v: V) {\n     if !m.contains_key(&k) {", "previous_filename": "tests/ui/entry.rs"}, {"sha": "ab655fcfead6c55f589d4c2d2a31a21929d3ef60", "filename": "tests/ui/entry_unfixable.stderr", "status": "renamed", "additions": 12, "deletions": 39, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/e2f4b6066132f48b026cc9b7947c1eb45a3d825d/tests%2Fui%2Fentry_unfixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2f4b6066132f48b026cc9b7947c1eb45a3d825d/tests%2Fui%2Fentry_unfixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fentry_unfixable.stderr?ref=e2f4b6066132f48b026cc9b7947c1eb45a3d825d", "patch": "@@ -1,33 +1,5 @@\n error: usage of `contains_key` followed by `insert` on a `HashMap`\n-  --> $DIR/entry.rs:10:5\n-   |\n-LL | /     if !m.contains_key(&k) {\n-LL | |         m.insert(k, v);\n-LL | |     }\n-   | |_____^ help: consider using: `m.entry(k).or_insert(v)`\n-   |\n-   = note: `-D clippy::map-entry` implied by `-D warnings`\n-\n-error: usage of `contains_key` followed by `insert` on a `HashMap`\n-  --> $DIR/entry.rs:16:5\n-   |\n-LL | /     if !m.contains_key(&k) {\n-LL | |         foo();\n-LL | |         m.insert(k, v);\n-LL | |     }\n-   | |_____^\n-   |\n-help: consider using `m.entry(k)`\n-  --> $DIR/entry.rs:16:5\n-   |\n-LL | /     if !m.contains_key(&k) {\n-LL | |         foo();\n-LL | |         m.insert(k, v);\n-LL | |     }\n-   | |_____^\n-\n-error: usage of `contains_key` followed by `insert` on a `HashMap`\n-  --> $DIR/entry.rs:23:5\n+  --> $DIR/entry_unfixable.rs:10:5\n    |\n LL | /     if !m.contains_key(&k) {\n LL | |         m.insert(k, v)\n@@ -36,8 +8,9 @@ LL | |         None\n LL | |     };\n    | |_____^\n    |\n+   = note: `-D clippy::map-entry` implied by `-D warnings`\n help: consider using `m.entry(k)`\n-  --> $DIR/entry.rs:23:5\n+  --> $DIR/entry_unfixable.rs:10:5\n    |\n LL | /     if !m.contains_key(&k) {\n LL | |         m.insert(k, v)\n@@ -47,7 +20,7 @@ LL | |     };\n    | |_____^\n \n error: usage of `contains_key` followed by `insert` on a `HashMap`\n-  --> $DIR/entry.rs:31:5\n+  --> $DIR/entry_unfixable.rs:18:5\n    |\n LL | /     if m.contains_key(&k) {\n LL | |         None\n@@ -57,7 +30,7 @@ LL | |     };\n    | |_____^\n    |\n help: consider using `m.entry(k)`\n-  --> $DIR/entry.rs:31:5\n+  --> $DIR/entry_unfixable.rs:18:5\n    |\n LL | /     if m.contains_key(&k) {\n LL | |         None\n@@ -67,7 +40,7 @@ LL | |     };\n    | |_____^\n \n error: usage of `contains_key` followed by `insert` on a `HashMap`\n-  --> $DIR/entry.rs:39:5\n+  --> $DIR/entry_unfixable.rs:26:5\n    |\n LL | /     if !m.contains_key(&k) {\n LL | |         foo();\n@@ -78,7 +51,7 @@ LL | |     };\n    | |_____^\n    |\n help: consider using `m.entry(k)`\n-  --> $DIR/entry.rs:39:5\n+  --> $DIR/entry_unfixable.rs:26:5\n    |\n LL | /     if !m.contains_key(&k) {\n LL | |         foo();\n@@ -89,7 +62,7 @@ LL | |     };\n    | |_____^\n \n error: usage of `contains_key` followed by `insert` on a `HashMap`\n-  --> $DIR/entry.rs:48:5\n+  --> $DIR/entry_unfixable.rs:35:5\n    |\n LL | /     if m.contains_key(&k) {\n LL | |         None\n@@ -100,7 +73,7 @@ LL | |     };\n    | |_____^\n    |\n help: consider using `m.entry(k)`\n-  --> $DIR/entry.rs:48:5\n+  --> $DIR/entry_unfixable.rs:35:5\n    |\n LL | /     if m.contains_key(&k) {\n LL | |         None\n@@ -111,7 +84,7 @@ LL | |     };\n    | |_____^\n \n error: usage of `contains_key` followed by `insert` on a `BTreeMap`\n-  --> $DIR/entry.rs:57:5\n+  --> $DIR/entry_unfixable.rs:44:5\n    |\n LL | /     if !m.contains_key(&k) {\n LL | |         foo();\n@@ -122,7 +95,7 @@ LL | |     };\n    | |_____^\n    |\n help: consider using `m.entry(k)`\n-  --> $DIR/entry.rs:57:5\n+  --> $DIR/entry_unfixable.rs:44:5\n    |\n LL | /     if !m.contains_key(&k) {\n LL | |         foo();\n@@ -132,5 +105,5 @@ LL | |         None\n LL | |     };\n    | |_____^\n \n-error: aborting due to 7 previous errors\n+error: aborting due to 5 previous errors\n ", "previous_filename": "tests/ui/entry.stderr"}, {"sha": "c8d1479f1206daba3a9b4c3dcd0cd1cbb13800b0", "filename": "tests/ui/string_lit_as_bytes.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2f4b6066132f48b026cc9b7947c1eb45a3d825d/tests%2Fui%2Fstring_lit_as_bytes.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e2f4b6066132f48b026cc9b7947c1eb45a3d825d/tests%2Fui%2Fstring_lit_as_bytes.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstring_lit_as_bytes.fixed?ref=e2f4b6066132f48b026cc9b7947c1eb45a3d825d", "patch": "@@ -14,7 +14,7 @@ fn str_lit_as_bytes() {\n \n     let strify = stringify!(foobar).as_bytes();\n \n-    let includestr = include_bytes!(\"entry.rs\");\n+    let includestr = include_bytes!(\"entry_unfixable.rs\");\n }\n \n fn main() {}"}, {"sha": "f0066d5d177b5f32256a37af151d780ff5dbdbd8", "filename": "tests/ui/string_lit_as_bytes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2f4b6066132f48b026cc9b7947c1eb45a3d825d/tests%2Fui%2Fstring_lit_as_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2f4b6066132f48b026cc9b7947c1eb45a3d825d/tests%2Fui%2Fstring_lit_as_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstring_lit_as_bytes.rs?ref=e2f4b6066132f48b026cc9b7947c1eb45a3d825d", "patch": "@@ -14,7 +14,7 @@ fn str_lit_as_bytes() {\n \n     let strify = stringify!(foobar).as_bytes();\n \n-    let includestr = include_str!(\"entry.rs\").as_bytes();\n+    let includestr = include_str!(\"entry_unfixable.rs\").as_bytes();\n }\n \n fn main() {}"}, {"sha": "d6c6c52709f8c4aa01b7ac1e22e424b0aea93769", "filename": "tests/ui/string_lit_as_bytes.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2f4b6066132f48b026cc9b7947c1eb45a3d825d/tests%2Fui%2Fstring_lit_as_bytes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2f4b6066132f48b026cc9b7947c1eb45a3d825d/tests%2Fui%2Fstring_lit_as_bytes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstring_lit_as_bytes.stderr?ref=e2f4b6066132f48b026cc9b7947c1eb45a3d825d", "patch": "@@ -15,8 +15,8 @@ LL |     let bs = r###\"raw string with 3# plus \" \"\"###.as_bytes();\n error: calling `as_bytes()` on `include_str!(..)`\n   --> $DIR/string_lit_as_bytes.rs:17:22\n    |\n-LL |     let includestr = include_str!(\"entry.rs\").as_bytes();\n-   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `include_bytes!(..)` instead: `include_bytes!(\"entry.rs\")`\n+LL |     let includestr = include_str!(\"entry_unfixable.rs\").as_bytes();\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `include_bytes!(..)` instead: `include_bytes!(\"entry_unfixable.rs\")`\n \n error: aborting due to 3 previous errors\n "}]}