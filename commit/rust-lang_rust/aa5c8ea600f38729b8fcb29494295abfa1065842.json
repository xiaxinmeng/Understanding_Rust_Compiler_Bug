{"sha": "aa5c8ea600f38729b8fcb29494295abfa1065842", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhNWM4ZWE2MDBmMzg3MjliOGZjYjI5NDk0Mjk1YWJmYTEwNjU4NDI=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2014-03-12T22:51:20Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2014-03-19T23:11:31Z"}, "message": "Fix spans for enum-struct match arms\n\nCorrect spans for fields in enum struct arms where the field and variable are unified", "tree": {"sha": "5be51f8a858090655a375e77de0815537872b62e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5be51f8a858090655a375e77de0815537872b62e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa5c8ea600f38729b8fcb29494295abfa1065842", "comment_count": 9, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa5c8ea600f38729b8fcb29494295abfa1065842", "html_url": "https://github.com/rust-lang/rust/commit/aa5c8ea600f38729b8fcb29494295abfa1065842", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa5c8ea600f38729b8fcb29494295abfa1065842/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ca51aeea7187a63b987129d67cf7d348b6c60a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ca51aeea7187a63b987129d67cf7d348b6c60a9", "html_url": "https://github.com/rust-lang/rust/commit/4ca51aeea7187a63b987129d67cf7d348b6c60a9"}], "stats": {"total": 18, "additions": 8, "deletions": 10}, "files": [{"sha": "3e94c179dd4d04c11b559da20446dc07d5a1deba", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/aa5c8ea600f38729b8fcb29494295abfa1065842/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa5c8ea600f38729b8fcb29494295abfa1065842/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=aa5c8ea600f38729b8fcb29494295abfa1065842", "patch": "@@ -2781,7 +2781,6 @@ impl<'a> Parser<'a> {\n                 break;\n             }\n \n-            let lo1 = self.last_span.lo;\n             let bind_type = if self.eat_keyword(keywords::Mut) {\n                 BindByValue(MutMutable)\n             } else if self.eat_keyword(keywords::Ref) {\n@@ -2791,11 +2790,8 @@ impl<'a> Parser<'a> {\n             };\n \n             let fieldname = self.parse_ident();\n-            let hi1 = self.last_span.lo;\n-            let fieldpath = ast_util::ident_to_path(mk_sp(lo1, hi1),\n-                                                    fieldname);\n-            let subpat;\n-            if self.token == token::COLON {\n+\n+            let subpat = if self.token == token::COLON {\n                 match bind_type {\n                     BindByRef(..) | BindByValue(MutMutable) => {\n                         let token_str = self.this_token_to_str();\n@@ -2805,14 +2801,16 @@ impl<'a> Parser<'a> {\n                 }\n \n                 self.bump();\n-                subpat = self.parse_pat();\n+                self.parse_pat()\n             } else {\n-                subpat = @ast::Pat {\n+                let fieldpath = ast_util::ident_to_path(self.last_span,\n+                                                        fieldname);\n+                @ast::Pat {\n                     id: ast::DUMMY_NODE_ID,\n                     node: PatIdent(bind_type, fieldpath, None),\n                     span: self.last_span\n-                };\n-            }\n+                }\n+            };\n             fields.push(ast::FieldPat { ident: fieldname, pat: subpat });\n         }\n         return (fields, etc);"}]}