{"sha": "d945f9860f7ccfe45516c0ee2085e31c8767b0a4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5NDVmOTg2MGY3Y2NmZTQ1NTE2YzBlZTIwODVlMzFjODc2N2IwYTQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-10-11T21:48:16Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-10-19T11:25:46Z"}, "message": "move parse_cfgspecs to rustc_interface", "tree": {"sha": "520a181e2edf370d073ee39c8d011972984b9186", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/520a181e2edf370d073ee39c8d011972984b9186"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d945f9860f7ccfe45516c0ee2085e31c8767b0a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d945f9860f7ccfe45516c0ee2085e31c8767b0a4", "html_url": "https://github.com/rust-lang/rust/commit/d945f9860f7ccfe45516c0ee2085e31c8767b0a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d945f9860f7ccfe45516c0ee2085e31c8767b0a4/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9578272d681c8691ca2ff3f5c4230b491bc1c694", "url": "https://api.github.com/repos/rust-lang/rust/commits/9578272d681c8691ca2ff3f5c4230b491bc1c694", "html_url": "https://github.com/rust-lang/rust/commit/9578272d681c8691ca2ff3f5c4230b491bc1c694"}], "stats": {"total": 217, "additions": 109, "deletions": 108}, "files": [{"sha": "ebe0807611ae692c91d8af408e576f6de18b4da0", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d945f9860f7ccfe45516c0ee2085e31c8767b0a4/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/d945f9860f7ccfe45516c0ee2085e31c8767b0a4/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=d945f9860f7ccfe45516c0ee2085e31c8767b0a4", "patch": "@@ -3556,6 +3556,7 @@ dependencies = [\n  \"rustc_plugin_impl\",\n  \"rustc_privacy\",\n  \"rustc_resolve\",\n+ \"rustc_target\",\n  \"rustc_traits\",\n  \"rustc_typeck\",\n  \"serialize\","}, {"sha": "651f9393a31baee519ae539b436feff6e36434ea", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 2, "deletions": 63, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/d945f9860f7ccfe45516c0ee2085e31c8767b0a4/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d945f9860f7ccfe45516c0ee2085e31c8767b0a4/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=d945f9860f7ccfe45516c0ee2085e31c8767b0a4", "patch": "@@ -7,24 +7,19 @@ use crate::session::{early_error, early_warn, Session};\n use crate::session::search_paths::SearchPath;\n \n use rustc_data_structures::fx::FxHashSet;\n-use rustc_data_structures::sync::Lrc;\n \n use rustc_target::spec::{LinkerFlavor, MergeFunctions, PanicStrategy, RelroLevel};\n use rustc_target::spec::{Target, TargetTriple};\n \n use syntax;\n-use syntax::ast::{self, IntTy, UintTy, MetaItemKind};\n+use syntax::ast::{self, IntTy, UintTy};\n use syntax::source_map::{FileName, FilePathMapping};\n use syntax::edition::{Edition, EDITION_NAME_LIST, DEFAULT_EDITION};\n-use syntax::parse::new_parser_from_source_str;\n-use syntax::parse::token;\n-use syntax::sess::ParseSess;\n use syntax::symbol::{sym, Symbol};\n use syntax::feature_gate::UnstableFeatures;\n-use syntax::source_map::SourceMap;\n \n use errors::emitter::HumanReadableErrorType;\n-use errors::{ColorConfig, FatalError, Handler, SourceMapperDyn};\n+use errors::{ColorConfig, FatalError, Handler};\n \n use getopts;\n \n@@ -1854,59 +1849,6 @@ pub fn rustc_optgroups() -> Vec<RustcOptGroup> {\n     opts\n }\n \n-struct NullEmitter;\n-\n-impl errors::emitter::Emitter for NullEmitter {\n-    fn emit_diagnostic(&mut self, _: &errors::Diagnostic) {}\n-    fn source_map(&self) -> Option<&Lrc<SourceMapperDyn>> { None }\n-}\n-\n-// Converts strings provided as `--cfg [cfgspec]` into a `crate_cfg`.\n-pub fn parse_cfgspecs(cfgspecs: Vec<String>) -> FxHashSet<(String, Option<String>)> {\n-    syntax::with_default_globals(move || {\n-        let cfg = cfgspecs.into_iter().map(|s| {\n-\n-            let cm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n-            let handler = Handler::with_emitter(false, None, Box::new(NullEmitter));\n-            let sess = ParseSess::with_span_handler(handler, cm);\n-            let filename = FileName::cfg_spec_source_code(&s);\n-            let mut parser = new_parser_from_source_str(&sess, filename, s.to_string());\n-\n-            macro_rules! error {($reason: expr) => {\n-                early_error(ErrorOutputType::default(),\n-                            &format!(concat!(\"invalid `--cfg` argument: `{}` (\", $reason, \")\"), s));\n-            }}\n-\n-            match &mut parser.parse_meta_item() {\n-                Ok(meta_item) if parser.token == token::Eof => {\n-                    if meta_item.path.segments.len() != 1 {\n-                        error!(\"argument key must be an identifier\");\n-                    }\n-                    match &meta_item.kind {\n-                        MetaItemKind::List(..) => {\n-                            error!(r#\"expected `key` or `key=\"value\"`\"#);\n-                        }\n-                        MetaItemKind::NameValue(lit) if !lit.kind.is_str() => {\n-                            error!(\"argument value must be a string\");\n-                        }\n-                        MetaItemKind::NameValue(..) | MetaItemKind::Word => {\n-                            let ident = meta_item.ident().expect(\"multi-segment cfg key\");\n-                            return (ident.name, meta_item.value_str());\n-                        }\n-                    }\n-                }\n-                Ok(..) => {}\n-                Err(err) => err.cancel(),\n-            }\n-\n-            error!(r#\"expected `key` or `key=\"value\"`\"#);\n-        }).collect::<ast::CrateConfig>();\n-        cfg.into_iter().map(|(a, b)| {\n-            (a.to_string(), b.map(|b| b.to_string()))\n-        }).collect()\n-    })\n-}\n-\n pub fn get_cmd_lint_options(matches: &getopts::Matches,\n                             error_format: ErrorOutputType)\n                             -> (Vec<(String, lint::Level)>, bool, Option<lint::Level>) {\n@@ -2877,6 +2819,3 @@ mod dep_tracking {\n         }\n     }\n }\n-\n-#[cfg(test)]\n-mod tests;"}, {"sha": "bfcbec8b78f3773493df44b4edab3fda7bd08b96", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d945f9860f7ccfe45516c0ee2085e31c8767b0a4/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d945f9860f7ccfe45516c0ee2085e31c8767b0a4/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=d945f9860f7ccfe45516c0ee2085e31c8767b0a4", "patch": "@@ -167,7 +167,7 @@ pub fn run_compiler(\n     };\n \n     let sopts = config::build_session_options(&matches);\n-    let cfg = config::parse_cfgspecs(matches.opt_strs(\"cfg\"));\n+    let cfg = interface::parse_cfgspecs(matches.opt_strs(\"cfg\"));\n \n     let mut dummy_config = |sopts, cfg, diagnostic_output| {\n         let mut config = interface::Config {"}, {"sha": "0d8d765a572c29d78f87bc875d319345b54680d5", "filename": "src/librustc_interface/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d945f9860f7ccfe45516c0ee2085e31c8767b0a4/src%2Flibrustc_interface%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d945f9860f7ccfe45516c0ee2085e31c8767b0a4/src%2Flibrustc_interface%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2FCargo.toml?ref=d945f9860f7ccfe45516c0ee2085e31c8767b0a4", "patch": "@@ -27,6 +27,7 @@ rustc_codegen_utils = { path = \"../librustc_codegen_utils\" }\n rustc_metadata = { path = \"../librustc_metadata\" }\n rustc_mir = { path = \"../librustc_mir\" }\n rustc_passes = { path = \"../librustc_passes\" }\n+rustc_target = { path = \"../librustc_target\" }\n rustc_typeck = { path = \"../librustc_typeck\" }\n rustc_lint = { path = \"../librustc_lint\" }\n rustc_errors = { path = \"../librustc_errors\" }"}, {"sha": "5e1ad3e61dd185040f3f12b23766997715fc4173", "filename": "src/librustc_interface/interface.rs", "status": "modified", "additions": 60, "deletions": 3, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/d945f9860f7ccfe45516c0ee2085e31c8767b0a4/src%2Flibrustc_interface%2Finterface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d945f9860f7ccfe45516c0ee2085e31c8767b0a4/src%2Flibrustc_interface%2Finterface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Finterface.rs?ref=d945f9860f7ccfe45516c0ee2085e31c8767b0a4", "patch": "@@ -3,7 +3,8 @@ use crate::util;\n pub use crate::passes::BoxedResolver;\n \n use rustc::lint;\n-use rustc::session::config::{self, Input};\n+use rustc::session::early_error;\n+use rustc::session::config::{self, Input, ErrorOutputType};\n use rustc::session::{DiagnosticOutput, Session};\n use rustc::util::common::ErrorReported;\n use rustc_codegen_utils::codegen_backend::CodegenBackend;\n@@ -14,9 +15,13 @@ use rustc_metadata::cstore::CStore;\n use std::path::PathBuf;\n use std::result;\n use std::sync::{Arc, Mutex};\n-use syntax;\n-use syntax::source_map::{FileLoader, SourceMap};\n+use syntax::{self, parse};\n+use syntax::ast::{self, MetaItemKind};\n+use syntax::parse::token;\n+use syntax::source_map::{FileName, FilePathMapping, FileLoader, SourceMap};\n+use syntax::sess::ParseSess;\n use syntax_pos::edition;\n+use rustc_errors::{Diagnostic, emitter::Emitter, Handler, SourceMapperDyn};\n \n pub type Result<T> = result::Result<T, ErrorReported>;\n \n@@ -60,6 +65,58 @@ impl Compiler {\n     }\n }\n \n+/// Converts strings provided as `--cfg [cfgspec]` into a `crate_cfg`.\n+pub fn parse_cfgspecs(cfgspecs: Vec<String>) -> FxHashSet<(String, Option<String>)> {\n+    struct NullEmitter;\n+    impl Emitter for NullEmitter {\n+        fn emit_diagnostic(&mut self, _: &Diagnostic) {}\n+        fn source_map(&self) -> Option<&Lrc<SourceMapperDyn>> { None }\n+    }\n+\n+    syntax::with_default_globals(move || {\n+        let cfg = cfgspecs.into_iter().map(|s| {\n+\n+            let cm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n+            let handler = Handler::with_emitter(false, None, Box::new(NullEmitter));\n+            let sess = ParseSess::with_span_handler(handler, cm);\n+            let filename = FileName::cfg_spec_source_code(&s);\n+            let mut parser = parse::new_parser_from_source_str(&sess, filename, s.to_string());\n+\n+            macro_rules! error {($reason: expr) => {\n+                early_error(ErrorOutputType::default(),\n+                            &format!(concat!(\"invalid `--cfg` argument: `{}` (\", $reason, \")\"), s));\n+            }}\n+\n+            match &mut parser.parse_meta_item() {\n+                Ok(meta_item) if parser.token == token::Eof => {\n+                    if meta_item.path.segments.len() != 1 {\n+                        error!(\"argument key must be an identifier\");\n+                    }\n+                    match &meta_item.kind {\n+                        MetaItemKind::List(..) => {\n+                            error!(r#\"expected `key` or `key=\"value\"`\"#);\n+                        }\n+                        MetaItemKind::NameValue(lit) if !lit.kind.is_str() => {\n+                            error!(\"argument value must be a string\");\n+                        }\n+                        MetaItemKind::NameValue(..) | MetaItemKind::Word => {\n+                            let ident = meta_item.ident().expect(\"multi-segment cfg key\");\n+                            return (ident.name, meta_item.value_str());\n+                        }\n+                    }\n+                }\n+                Ok(..) => {}\n+                Err(err) => err.cancel(),\n+            }\n+\n+            error!(r#\"expected `key` or `key=\"value\"`\"#);\n+        }).collect::<ast::CrateConfig>();\n+        cfg.into_iter().map(|(a, b)| {\n+            (a.to_string(), b.map(|b| b.to_string()))\n+        }).collect()\n+    })\n+}\n+\n /// The compiler configuration\n pub struct Config {\n     /// Command line options"}, {"sha": "53baf6556fb5bdb4abff7bcebef08a7c17227a38", "filename": "src/librustc_interface/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d945f9860f7ccfe45516c0ee2085e31c8767b0a4/src%2Flibrustc_interface%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d945f9860f7ccfe45516c0ee2085e31c8767b0a4/src%2Flibrustc_interface%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Flib.rs?ref=d945f9860f7ccfe45516c0ee2085e31c8767b0a4", "patch": "@@ -18,3 +18,6 @@ pub mod util;\n mod proc_macro_decls;\n \n pub use interface::{run_compiler, Config};\n+\n+#[cfg(test)]\n+mod tests;"}, {"sha": "7a57605da58b82974c7d2ffa5fa1f917af22919c", "filename": "src/librustc_interface/tests.rs", "status": "renamed", "additions": 39, "deletions": 39, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/d945f9860f7ccfe45516c0ee2085e31c8767b0a4/src%2Flibrustc_interface%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d945f9860f7ccfe45516c0ee2085e31c8767b0a4/src%2Flibrustc_interface%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Ftests.rs?ref=d945f9860f7ccfe45516c0ee2085e31c8767b0a4", "patch": "@@ -1,25 +1,24 @@\n-use getopts;\n-use crate::lint;\n-use crate::middle::cstore;\n-use crate::session::config::{\n-    build_configuration,\n-    build_session_options,\n-    to_crate_config,\n-    parse_cfgspecs,\n-};\n-use crate::session::config::{LtoCli, LinkerPluginLto, SwitchWithOptPath, ExternEntry};\n-use crate::session::build_session;\n-use crate::session::search_paths::SearchPath;\n+extern crate getopts;\n+\n+use crate::interface::parse_cfgspecs;\n+\n+use rustc::lint;\n+use rustc::middle::cstore;\n+use rustc::session::config::{build_configuration, build_session_options, to_crate_config};\n+use rustc::session::config::{LtoCli, LinkerPluginLto, SwitchWithOptPath, ExternEntry};\n+use rustc::session::config::{Externs, OutputType, OutputTypes, SymbolManglingVersion};\n+use rustc::session::config::{rustc_optgroups, Options, ErrorOutputType, Passes};\n+use rustc::session::build_session;\n+use rustc::session::search_paths::SearchPath;\n use std::collections::{BTreeMap, BTreeSet};\n use std::iter::FromIterator;\n use std::path::PathBuf;\n-use super::{Externs, OutputType, OutputTypes, SymbolManglingVersion};\n use rustc_target::spec::{MergeFunctions, PanicStrategy, RelroLevel};\n use syntax::symbol::sym;\n use syntax::edition::{Edition, DEFAULT_EDITION};\n use syntax;\n-use super::Options;\n use rustc_data_structures::fx::FxHashSet;\n+use rustc_errors::{ColorConfig, emitter::HumanReadableErrorType, registry};\n \n pub fn build_session_options_and_crate_config(\n     matches: &getopts::Matches,\n@@ -30,22 +29,23 @@ pub fn build_session_options_and_crate_config(\n     )\n }\n \n-impl ExternEntry {\n-    fn new_public<S: Into<String>,\n-                  I: IntoIterator<Item = Option<S>>>(locations: I) -> ExternEntry {\n-        let locations: BTreeSet<_> = locations.into_iter().map(|o| o.map(|s| s.into()))\n-            .collect();\n-\n-        ExternEntry {\n-            locations,\n-            is_private_dep: false\n-        }\n+fn new_public_extern_entry<S, I>(locations: I) -> ExternEntry\n+where\n+    S: Into<String>,\n+    I: IntoIterator<Item = Option<S>>,\n+{\n+    let locations: BTreeSet<_> = locations.into_iter().map(|o| o.map(|s| s.into()))\n+        .collect();\n+\n+    ExternEntry {\n+        locations,\n+        is_private_dep: false\n     }\n }\n \n fn optgroups() -> getopts::Options {\n     let mut opts = getopts::Options::new();\n-    for group in super::rustc_optgroups() {\n+    for group in rustc_optgroups() {\n         (group.apply)(&mut opts);\n     }\n     return opts;\n@@ -63,7 +63,7 @@ fn test_switch_implies_cfg_test() {\n             Ok(m) => m,\n             Err(f) => panic!(\"test_switch_implies_cfg_test: {}\", f),\n         };\n-        let registry = errors::registry::Registry::new(&[]);\n+        let registry = registry::Registry::new(&[]);\n         let (sessopts, cfg) = build_session_options_and_crate_config(matches);\n         let sess = build_session(sessopts, None, registry);\n         let cfg = build_configuration(&sess, to_crate_config(cfg));\n@@ -81,7 +81,7 @@ fn test_switch_implies_cfg_test_unless_cfg_test() {\n             Ok(m) => m,\n             Err(f) => panic!(\"test_switch_implies_cfg_test_unless_cfg_test: {}\", f),\n         };\n-        let registry = errors::registry::Registry::new(&[]);\n+        let registry = registry::Registry::new(&[]);\n         let (sessopts, cfg) = build_session_options_and_crate_config(matches);\n         let sess = build_session(sessopts, None, registry);\n         let cfg = build_configuration(&sess, to_crate_config(cfg));\n@@ -95,7 +95,7 @@ fn test_switch_implies_cfg_test_unless_cfg_test() {\n fn test_can_print_warnings() {\n     syntax::with_default_globals(|| {\n         let matches = optgroups().parse(&[\"-Awarnings\".to_string()]).unwrap();\n-        let registry = errors::registry::Registry::new(&[]);\n+        let registry = registry::Registry::new(&[]);\n         let (sessopts, _) = build_session_options_and_crate_config(&matches);\n         let sess = build_session(sessopts, None, registry);\n         assert!(!sess.diagnostic().can_emit_warnings());\n@@ -105,15 +105,15 @@ fn test_can_print_warnings() {\n         let matches = optgroups()\n             .parse(&[\"-Awarnings\".to_string(), \"-Dwarnings\".to_string()])\n             .unwrap();\n-        let registry = errors::registry::Registry::new(&[]);\n+        let registry = registry::Registry::new(&[]);\n         let (sessopts, _) = build_session_options_and_crate_config(&matches);\n         let sess = build_session(sessopts, None, registry);\n         assert!(sess.diagnostic().can_emit_warnings());\n     });\n \n     syntax::with_default_globals(|| {\n         let matches = optgroups().parse(&[\"-Adead_code\".to_string()]).unwrap();\n-        let registry = errors::registry::Registry::new(&[]);\n+        let registry = registry::Registry::new(&[]);\n         let (sessopts, _) = build_session_options_and_crate_config(&matches);\n         let sess = build_session(sessopts, None, registry);\n         assert!(sess.diagnostic().can_emit_warnings());\n@@ -172,33 +172,33 @@ fn test_externs_tracking_hash_different_construction_order() {\n     v1.externs = Externs::new(mk_map(vec![\n         (\n             String::from(\"a\"),\n-            ExternEntry::new_public(vec![Some(\"b\"), Some(\"c\")])\n+            new_public_extern_entry(vec![Some(\"b\"), Some(\"c\")])\n         ),\n         (\n             String::from(\"d\"),\n-            ExternEntry::new_public(vec![Some(\"e\"), Some(\"f\")])\n+            new_public_extern_entry(vec![Some(\"e\"), Some(\"f\")])\n         ),\n     ]));\n \n     v2.externs = Externs::new(mk_map(vec![\n         (\n             String::from(\"d\"),\n-            ExternEntry::new_public(vec![Some(\"e\"), Some(\"f\")])\n+            new_public_extern_entry(vec![Some(\"e\"), Some(\"f\")])\n         ),\n         (\n             String::from(\"a\"),\n-            ExternEntry::new_public(vec![Some(\"b\"), Some(\"c\")])\n+            new_public_extern_entry(vec![Some(\"b\"), Some(\"c\")])\n         ),\n     ]));\n \n     v3.externs = Externs::new(mk_map(vec![\n         (\n             String::from(\"a\"),\n-            ExternEntry::new_public(vec![Some(\"b\"), Some(\"c\")])\n+            new_public_extern_entry(vec![Some(\"b\"), Some(\"c\")])\n         ),\n         (\n             String::from(\"d\"),\n-            ExternEntry::new_public(vec![Some(\"f\"), Some(\"e\")])\n+            new_public_extern_entry(vec![Some(\"f\"), Some(\"e\")])\n         ),\n     ]));\n \n@@ -282,9 +282,9 @@ fn test_search_paths_tracking_hash_different_order() {\n     let mut v3 = Options::default();\n     let mut v4 = Options::default();\n \n-    const JSON: super::ErrorOutputType = super::ErrorOutputType::Json {\n+    const JSON: ErrorOutputType = ErrorOutputType::Json {\n         pretty: false,\n-        json_rendered: super::HumanReadableErrorType::Default(super::ColorConfig::Never),\n+        json_rendered: HumanReadableErrorType::Default(ColorConfig::Never),\n     };\n \n     // Reference\n@@ -455,7 +455,7 @@ fn test_codegen_options_tracking_hash() {\n     opts.cg.codegen_units = Some(42);\n     assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n \n-    opts.cg.remark = super::Passes::Some(vec![String::from(\"pass1\"), String::from(\"pass2\")]);\n+    opts.cg.remark = Passes::Some(vec![String::from(\"pass1\"), String::from(\"pass2\")]);\n     assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n \n     opts.cg.save_temps = true;", "previous_filename": "src/librustc/session/config/tests.rs"}, {"sha": "2337ec5a52cccb2f011547988ac20ab02520d88b", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d945f9860f7ccfe45516c0ee2085e31c8767b0a4/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d945f9860f7ccfe45516c0ee2085e31c8767b0a4/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=d945f9860f7ccfe45516c0ee2085e31c8767b0a4", "patch": "@@ -329,7 +329,7 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n \n     let config = interface::Config {\n         opts: sessopts,\n-        crate_cfg: config::parse_cfgspecs(cfgs),\n+        crate_cfg: interface::parse_cfgspecs(cfgs),\n         input,\n         input_path: cpath,\n         output_file: None,"}, {"sha": "01b897ab364406d5f208aaa613cf60ddaf79f307", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d945f9860f7ccfe45516c0ee2085e31c8767b0a4/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d945f9860f7ccfe45516c0ee2085e31c8767b0a4/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=d945f9860f7ccfe45516c0ee2085e31c8767b0a4", "patch": "@@ -67,7 +67,7 @@ pub fn run(options: Options) -> i32 {\n     cfgs.push(\"doctest\".to_owned());\n     let config = interface::Config {\n         opts: sessopts,\n-        crate_cfg: config::parse_cfgspecs(cfgs),\n+        crate_cfg: interface::parse_cfgspecs(cfgs),\n         input,\n         input_path: None,\n         output_file: None,"}]}