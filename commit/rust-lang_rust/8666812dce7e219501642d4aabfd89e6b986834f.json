{"sha": "8666812dce7e219501642d4aabfd89e6b986834f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2NjY4MTJkY2U3ZTIxOTUwMTY0MmQ0YWFiZmQ4OWU2Yjk4NjgzNGY=", "commit": {"author": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2014-11-09T05:48:49Z"}, "committer": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2014-11-12T15:02:43Z"}, "message": "Take parameters by-value in Signed trait", "tree": {"sha": "69b3de1b79f7ba2e4b9b18b7b1fe7008e5f502fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/69b3de1b79f7ba2e4b9b18b7b1fe7008e5f502fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8666812dce7e219501642d4aabfd89e6b986834f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8666812dce7e219501642d4aabfd89e6b986834f", "html_url": "https://github.com/rust-lang/rust/commit/8666812dce7e219501642d4aabfd89e6b986834f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8666812dce7e219501642d4aabfd89e6b986834f/comments", "author": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4ead7b034c96b705ec34b8325f5f9f778f1cbb9", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4ead7b034c96b705ec34b8325f5f9f778f1cbb9", "html_url": "https://github.com/rust-lang/rust/commit/e4ead7b034c96b705ec34b8325f5f9f778f1cbb9"}], "stats": {"total": 102, "additions": 51, "deletions": 51}, "files": [{"sha": "86ac4ea79ced7ad0e8d4dcb7aa6234b72c89360f", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/8666812dce7e219501642d4aabfd89e6b986834f/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8666812dce7e219501642d4aabfd89e6b986834f/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=8666812dce7e219501642d4aabfd89e6b986834f", "patch": "@@ -162,13 +162,13 @@ pub trait Signed: Num + Neg<Self> {\n     /// For `f32` and `f64`, `NaN` will be returned if the number is `NaN`.\n     ///\n     /// For signed integers, `::MIN` will be returned if the number is `::MIN`.\n-    fn abs(&self) -> Self;\n+    fn abs(self) -> Self;\n \n     /// The positive difference of two numbers.\n     ///\n     /// Returns `zero` if the number is less than or equal to `other`, otherwise the difference\n     /// between `self` and `other` is returned.\n-    fn abs_sub(&self, other: &Self) -> Self;\n+    fn abs_sub(self, other: Self) -> Self;\n \n     /// Returns the sign of the number.\n     ///\n@@ -183,64 +183,64 @@ pub trait Signed: Num + Neg<Self> {\n     /// * `0` if the number is zero\n     /// * `1` if the number is positive\n     /// * `-1` if the number is negative\n-    fn signum(&self) -> Self;\n+    fn signum(self) -> Self;\n \n     /// Returns true if the number is positive and false if the number is zero or negative.\n-    fn is_positive(&self) -> bool;\n+    fn is_positive(self) -> bool;\n \n     /// Returns true if the number is negative and false if the number is zero or positive.\n-    fn is_negative(&self) -> bool;\n+    fn is_negative(self) -> bool;\n }\n \n macro_rules! signed_impl(\n-    ($($t:ty)*) => ($(\n-        impl Signed for $t {\n+    ($($T:ty)*) => ($(\n+        impl Signed for $T {\n             #[inline]\n-            fn abs(&self) -> $t {\n-                if self.is_negative() { -*self } else { *self }\n+            fn abs(self) -> $T {\n+                if self.is_negative() { -self } else { self }\n             }\n \n             #[inline]\n-            fn abs_sub(&self, other: &$t) -> $t {\n-                if *self <= *other { 0 } else { *self - *other }\n+            fn abs_sub(self, other: $T) -> $T {\n+                if self <= other { 0 } else { self - other }\n             }\n \n             #[inline]\n-            fn signum(&self) -> $t {\n-                match *self {\n+            fn signum(self) -> $T {\n+                match self {\n                     n if n > 0 => 1,\n                     0 => 0,\n                     _ => -1,\n                 }\n             }\n \n             #[inline]\n-            fn is_positive(&self) -> bool { *self > 0 }\n+            fn is_positive(self) -> bool { self > 0 }\n \n             #[inline]\n-            fn is_negative(&self) -> bool { *self < 0 }\n+            fn is_negative(self) -> bool { self < 0 }\n         }\n     )*)\n )\n \n signed_impl!(int i8 i16 i32 i64)\n \n macro_rules! signed_float_impl(\n-    ($t:ty, $nan:expr, $inf:expr, $neg_inf:expr, $fabs:path, $fcopysign:path, $fdim:ident) => {\n-        impl Signed for $t {\n+    ($T:ty, $nan:expr, $inf:expr, $neg_inf:expr, $fabs:path, $fcopysign:path, $fdim:ident) => {\n+        impl Signed for $T {\n             /// Computes the absolute value. Returns `NAN` if the number is `NAN`.\n             #[inline]\n-            fn abs(&self) -> $t {\n-                unsafe { $fabs(*self) }\n+            fn abs(self) -> $T {\n+                unsafe { $fabs(self) }\n             }\n \n             /// The positive difference of two numbers. Returns `0.0` if the number is\n             /// less than or equal to `other`, otherwise the difference between`self`\n             /// and `other` is returned.\n             #[inline]\n-            fn abs_sub(&self, other: &$t) -> $t {\n-                extern { fn $fdim(a: $t, b: $t) -> $t; }\n-                unsafe { $fdim(*self, *other) }\n+            fn abs_sub(self, other: $T) -> $T {\n+                extern { fn $fdim(a: $T, b: $T) -> $T; }\n+                unsafe { $fdim(self, other) }\n             }\n \n             /// # Returns\n@@ -249,19 +249,19 @@ macro_rules! signed_float_impl(\n             /// - `-1.0` if the number is negative, `-0.0` or `NEG_INFINITY`\n             /// - `NAN` if the number is NaN\n             #[inline]\n-            fn signum(&self) -> $t {\n+            fn signum(self) -> $T {\n                 if self != self { $nan } else {\n-                    unsafe { $fcopysign(1.0, *self) }\n+                    unsafe { $fcopysign(1.0, self) }\n                 }\n             }\n \n             /// Returns `true` if the number is positive, including `+0.0` and `INFINITY`\n             #[inline]\n-            fn is_positive(&self) -> bool { *self > 0.0 || (1.0 / *self) == $inf }\n+            fn is_positive(self) -> bool { self > 0.0 || (1.0 / self) == $inf }\n \n             /// Returns `true` if the number is negative, including `-0.0` and `NEG_INFINITY`\n             #[inline]\n-            fn is_negative(&self) -> bool { *self < 0.0 || (1.0 / *self) == $neg_inf }\n+            fn is_negative(self) -> bool { self < 0.0 || (1.0 / self) == $neg_inf }\n         }\n     }\n )\n@@ -287,7 +287,7 @@ pub fn abs<T: Signed>(value: T) -> T {\n /// between `x` and `y` is returned.\n #[inline(always)]\n pub fn abs_sub<T: Signed>(x: T, y: T) -> T {\n-    x.abs_sub(&y)\n+    x.abs_sub(y)\n }\n \n /// Returns the sign of the number."}, {"sha": "1b3dd8ffa5e15ec52b65814946274b56f79f6c8b", "filename": "src/libcoretest/num/int_macros.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8666812dce7e219501642d4aabfd89e6b986834f/src%2Flibcoretest%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8666812dce7e219501642d4aabfd89e6b986834f/src%2Flibcoretest%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fnum%2Fint_macros.rs?ref=8666812dce7e219501642d4aabfd89e6b986834f", "patch": "@@ -39,10 +39,10 @@ mod tests {\n \n     #[test]\n     fn test_abs_sub() {\n-        assert!((-1 as $T).abs_sub(&(1 as $T)) == 0 as $T);\n-        assert!((1 as $T).abs_sub(&(1 as $T)) == 0 as $T);\n-        assert!((1 as $T).abs_sub(&(0 as $T)) == 1 as $T);\n-        assert!((1 as $T).abs_sub(&(-1 as $T)) == 2 as $T);\n+        assert!((-1 as $T).abs_sub(1 as $T) == 0 as $T);\n+        assert!((1 as $T).abs_sub(1 as $T) == 0 as $T);\n+        assert!((1 as $T).abs_sub(0 as $T) == 1 as $T);\n+        assert!((1 as $T).abs_sub(-1 as $T) == 2 as $T);\n     }\n \n     #[test]"}, {"sha": "175b1612b7edc6b1fcd7df8dd9d3e843afbae99f", "filename": "src/libstd/num/f32.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8666812dce7e219501642d4aabfd89e6b986834f/src%2Flibstd%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8666812dce7e219501642d4aabfd89e6b986834f/src%2Flibstd%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff32.rs?ref=8666812dce7e219501642d4aabfd89e6b986834f", "patch": "@@ -593,20 +593,20 @@ mod tests {\n \n     #[test]\n     fn test_abs_sub() {\n-        assert_eq!((-1f32).abs_sub(&1f32), 0f32);\n-        assert_eq!(1f32.abs_sub(&1f32), 0f32);\n-        assert_eq!(1f32.abs_sub(&0f32), 1f32);\n-        assert_eq!(1f32.abs_sub(&-1f32), 2f32);\n-        assert_eq!(NEG_INFINITY.abs_sub(&0f32), 0f32);\n-        assert_eq!(INFINITY.abs_sub(&1f32), INFINITY);\n-        assert_eq!(0f32.abs_sub(&NEG_INFINITY), INFINITY);\n-        assert_eq!(0f32.abs_sub(&INFINITY), 0f32);\n+        assert_eq!((-1f32).abs_sub(1f32), 0f32);\n+        assert_eq!(1f32.abs_sub(1f32), 0f32);\n+        assert_eq!(1f32.abs_sub(0f32), 1f32);\n+        assert_eq!(1f32.abs_sub(-1f32), 2f32);\n+        assert_eq!(NEG_INFINITY.abs_sub(0f32), 0f32);\n+        assert_eq!(INFINITY.abs_sub(1f32), INFINITY);\n+        assert_eq!(0f32.abs_sub(NEG_INFINITY), INFINITY);\n+        assert_eq!(0f32.abs_sub(INFINITY), 0f32);\n     }\n \n     #[test]\n     fn test_abs_sub_nowin() {\n-        assert!(NAN.abs_sub(&-1f32).is_nan());\n-        assert!(1f32.abs_sub(&NAN).is_nan());\n+        assert!(NAN.abs_sub(-1f32).is_nan());\n+        assert!(1f32.abs_sub(NAN).is_nan());\n     }\n \n     #[test]"}, {"sha": "eb8e8db798cd9759aa6ae62dd496f43ba43b3167", "filename": "src/libstd/num/f64.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8666812dce7e219501642d4aabfd89e6b986834f/src%2Flibstd%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8666812dce7e219501642d4aabfd89e6b986834f/src%2Flibstd%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff64.rs?ref=8666812dce7e219501642d4aabfd89e6b986834f", "patch": "@@ -591,20 +591,20 @@ mod tests {\n \n     #[test]\n     fn test_abs_sub() {\n-        assert_eq!((-1f64).abs_sub(&1f64), 0f64);\n-        assert_eq!(1f64.abs_sub(&1f64), 0f64);\n-        assert_eq!(1f64.abs_sub(&0f64), 1f64);\n-        assert_eq!(1f64.abs_sub(&-1f64), 2f64);\n-        assert_eq!(NEG_INFINITY.abs_sub(&0f64), 0f64);\n-        assert_eq!(INFINITY.abs_sub(&1f64), INFINITY);\n-        assert_eq!(0f64.abs_sub(&NEG_INFINITY), INFINITY);\n-        assert_eq!(0f64.abs_sub(&INFINITY), 0f64);\n+        assert_eq!((-1f64).abs_sub(1f64), 0f64);\n+        assert_eq!(1f64.abs_sub(1f64), 0f64);\n+        assert_eq!(1f64.abs_sub(0f64), 1f64);\n+        assert_eq!(1f64.abs_sub(-1f64), 2f64);\n+        assert_eq!(NEG_INFINITY.abs_sub(0f64), 0f64);\n+        assert_eq!(INFINITY.abs_sub(1f64), INFINITY);\n+        assert_eq!(0f64.abs_sub(NEG_INFINITY), INFINITY);\n+        assert_eq!(0f64.abs_sub(INFINITY), 0f64);\n     }\n \n     #[test]\n     fn test_abs_sub_nowin() {\n-        assert!(NAN.abs_sub(&-1f64).is_nan());\n-        assert!(1f64.abs_sub(&NAN).is_nan());\n+        assert!(NAN.abs_sub(-1f64).is_nan());\n+        assert!(1f64.abs_sub(NAN).is_nan());\n     }\n \n     #[test]"}]}