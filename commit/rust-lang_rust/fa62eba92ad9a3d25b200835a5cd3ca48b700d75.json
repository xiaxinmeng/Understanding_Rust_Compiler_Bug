{"sha": "fa62eba92ad9a3d25b200835a5cd3ca48b700d75", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhNjJlYmE5MmFkOWEzZDI1YjIwMDgzNWE1Y2QzY2E0OGI3MDBkNzU=", "commit": {"author": {"name": "C Jones", "email": "code@calebjones.net", "date": "2018-05-01T04:21:30Z"}, "committer": {"name": "C Jones", "email": "code@calebjones.net", "date": "2018-05-08T02:14:34Z"}, "message": "Don't drop the shared static node\n\nWe modify the drop implementation in IntoIter to not drop the shared root", "tree": {"sha": "2768bec247d65703d575f03ba7052dcbe6f9dc18", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2768bec247d65703d575f03ba7052dcbe6f9dc18"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa62eba92ad9a3d25b200835a5cd3ca48b700d75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa62eba92ad9a3d25b200835a5cd3ca48b700d75", "html_url": "https://github.com/rust-lang/rust/commit/fa62eba92ad9a3d25b200835a5cd3ca48b700d75", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa62eba92ad9a3d25b200835a5cd3ca48b700d75/comments", "author": {"login": "porglezomp", "id": 1690225, "node_id": "MDQ6VXNlcjE2OTAyMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1690225?v=4", "gravatar_id": "", "url": "https://api.github.com/users/porglezomp", "html_url": "https://github.com/porglezomp", "followers_url": "https://api.github.com/users/porglezomp/followers", "following_url": "https://api.github.com/users/porglezomp/following{/other_user}", "gists_url": "https://api.github.com/users/porglezomp/gists{/gist_id}", "starred_url": "https://api.github.com/users/porglezomp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/porglezomp/subscriptions", "organizations_url": "https://api.github.com/users/porglezomp/orgs", "repos_url": "https://api.github.com/users/porglezomp/repos", "events_url": "https://api.github.com/users/porglezomp/events{/privacy}", "received_events_url": "https://api.github.com/users/porglezomp/received_events", "type": "User", "site_admin": false}, "committer": {"login": "porglezomp", "id": 1690225, "node_id": "MDQ6VXNlcjE2OTAyMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1690225?v=4", "gravatar_id": "", "url": "https://api.github.com/users/porglezomp", "html_url": "https://github.com/porglezomp", "followers_url": "https://api.github.com/users/porglezomp/followers", "following_url": "https://api.github.com/users/porglezomp/following{/other_user}", "gists_url": "https://api.github.com/users/porglezomp/gists{/gist_id}", "starred_url": "https://api.github.com/users/porglezomp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/porglezomp/subscriptions", "organizations_url": "https://api.github.com/users/porglezomp/orgs", "repos_url": "https://api.github.com/users/porglezomp/repos", "events_url": "https://api.github.com/users/porglezomp/events{/privacy}", "received_events_url": "https://api.github.com/users/porglezomp/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef6060c863c86e1422baa2cc85ae75af22feaf51", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef6060c863c86e1422baa2cc85ae75af22feaf51", "html_url": "https://github.com/rust-lang/rust/commit/ef6060c863c86e1422baa2cc85ae75af22feaf51"}], "stats": {"total": 21, "additions": 13, "deletions": 8}, "files": [{"sha": "a88631b1e6751864869c062d466efc63decf433f", "filename": "src/liballoc/btree/map.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fa62eba92ad9a3d25b200835a5cd3ca48b700d75/src%2Fliballoc%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa62eba92ad9a3d25b200835a5cd3ca48b700d75/src%2Fliballoc%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fbtree%2Fmap.rs?ref=fa62eba92ad9a3d25b200835a5cd3ca48b700d75", "patch": "@@ -686,10 +686,6 @@ impl<K: Ord, V> BTreeMap<K, V> {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn insert(&mut self, key: K, value: V) -> Option<V> {\n-        if self.root.is_shared_root() {\n-            self.root = node::Root::new_leaf();\n-        }\n-\n         match self.entry(key) {\n             Occupied(mut entry) => Some(entry.insert(value)),\n             Vacant(entry) => {\n@@ -1301,6 +1297,10 @@ impl<K, V> Drop for IntoIter<K, V> {\n         self.for_each(drop);\n         unsafe {\n             let leaf_node = ptr::read(&self.front).into_node();\n+            if leaf_node.is_shared_root() {\n+                return;\n+            }\n+\n             if let Some(first_parent) = leaf_node.deallocate_and_ascend() {\n                 let mut cur_node = first_parent.into_node();\n                 while let Some(parent) = cur_node.deallocate_and_ascend() {"}, {"sha": "79615e11c672430d2f97e13d8d82d3ea50e40202", "filename": "src/liballoc/btree/node.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/fa62eba92ad9a3d25b200835a5cd3ca48b700d75/src%2Fliballoc%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa62eba92ad9a3d25b200835a5cd3ca48b700d75/src%2Fliballoc%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fbtree%2Fnode.rs?ref=fa62eba92ad9a3d25b200835a5cd3ca48b700d75", "patch": "@@ -101,6 +101,10 @@ impl<K, V> LeafNode<K, V> {\n             len: 0\n         }\n     }\n+\n+    fn is_shared_root(&self) -> bool {\n+        self as *const _ == &EMPTY_ROOT_NODE as *const _ as *const LeafNode<K, V>\n+    }\n }\n \n // We need to implement Sync here in order to make a static instance\n@@ -185,10 +189,7 @@ unsafe impl<K: Send, V: Send> Send for Root<K, V> { }\n \n impl<K, V> Root<K, V> {\n     pub fn is_shared_root(&self) -> bool {\n-        ptr::eq(\n-            self.node.as_ptr().as_ptr(),\n-            &EMPTY_ROOT_NODE as *const _ as *const LeafNode<K, V>,\n-        )\n+        self.as_ref().is_shared_root()\n     }\n \n     pub fn shared_empty_root() -> Self {\n@@ -387,6 +388,10 @@ impl<BorrowType, K, V, Type> NodeRef<BorrowType, K, V, Type> {\n         }\n     }\n \n+    pub fn is_shared_root(&self) -> bool {\n+        self.as_leaf().is_shared_root()\n+    }\n+\n     pub fn keys(&self) -> &[K] {\n         self.reborrow().into_slices().0\n     }"}]}