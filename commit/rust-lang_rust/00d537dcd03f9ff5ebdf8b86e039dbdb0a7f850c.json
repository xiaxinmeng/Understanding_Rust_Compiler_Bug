{"sha": "00d537dcd03f9ff5ebdf8b86e039dbdb0a7f850c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwZDUzN2RjZDAzZjlmZjVlYmRmOGI4NmUwMzlkYmRiMGE3Zjg1MGM=", "commit": {"author": {"name": "Marcel Hellwig", "email": "git@cookiesoft.de", "date": "2020-07-02T07:32:41Z"}, "committer": {"name": "Marcel Hellwig", "email": "git@cookiesoft.de", "date": "2020-08-11T07:22:27Z"}, "message": "deny(unsafe_op_in_unsafe_fn) in libstd/path.rs", "tree": {"sha": "b22af5b6259b85402668b17d81abf43d9cf6ae18", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b22af5b6259b85402668b17d81abf43d9cf6ae18"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/00d537dcd03f9ff5ebdf8b86e039dbdb0a7f850c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/00d537dcd03f9ff5ebdf8b86e039dbdb0a7f850c", "html_url": "https://github.com/rust-lang/rust/commit/00d537dcd03f9ff5ebdf8b86e039dbdb0a7f850c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/00d537dcd03f9ff5ebdf8b86e039dbdb0a7f850c/comments", "author": {"login": "hellow554", "id": 921462, "node_id": "MDQ6VXNlcjkyMTQ2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/921462?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hellow554", "html_url": "https://github.com/hellow554", "followers_url": "https://api.github.com/users/hellow554/followers", "following_url": "https://api.github.com/users/hellow554/following{/other_user}", "gists_url": "https://api.github.com/users/hellow554/gists{/gist_id}", "starred_url": "https://api.github.com/users/hellow554/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hellow554/subscriptions", "organizations_url": "https://api.github.com/users/hellow554/orgs", "repos_url": "https://api.github.com/users/hellow554/repos", "events_url": "https://api.github.com/users/hellow554/events{/privacy}", "received_events_url": "https://api.github.com/users/hellow554/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hellow554", "id": 921462, "node_id": "MDQ6VXNlcjkyMTQ2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/921462?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hellow554", "html_url": "https://github.com/hellow554", "followers_url": "https://api.github.com/users/hellow554/followers", "following_url": "https://api.github.com/users/hellow554/following{/other_user}", "gists_url": "https://api.github.com/users/hellow554/gists{/gist_id}", "starred_url": "https://api.github.com/users/hellow554/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hellow554/subscriptions", "organizations_url": "https://api.github.com/users/hellow554/orgs", "repos_url": "https://api.github.com/users/hellow554/repos", "events_url": "https://api.github.com/users/hellow554/events{/privacy}", "received_events_url": "https://api.github.com/users/hellow554/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9025c571e81ea9adad4dbee0614f1ca37338328", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9025c571e81ea9adad4dbee0614f1ca37338328", "html_url": "https://github.com/rust-lang/rust/commit/a9025c571e81ea9adad4dbee0614f1ca37338328"}], "stats": {"total": 39, "additions": 19, "deletions": 20}, "files": [{"sha": "92c0f61972c83326c437f408c41173730fa0c23f", "filename": "library/std/src/path.rs", "status": "modified", "additions": 19, "deletions": 20, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/00d537dcd03f9ff5ebdf8b86e039dbdb0a7f850c/library%2Fstd%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00d537dcd03f9ff5ebdf8b86e039dbdb0a7f850c/library%2Fstd%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpath.rs?ref=00d537dcd03f9ff5ebdf8b86e039dbdb0a7f850c", "patch": "@@ -60,6 +60,7 @@\n //! [`push`]: PathBuf::push\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n+#![deny(unsafe_op_in_unsafe_fn)]\n \n use crate::borrow::{Borrow, Cow};\n use crate::cmp;\n@@ -293,7 +294,8 @@ fn os_str_as_u8_slice(s: &OsStr) -> &[u8] {\n     unsafe { &*(s as *const OsStr as *const [u8]) }\n }\n unsafe fn u8_slice_as_os_str(s: &[u8]) -> &OsStr {\n-    &*(s as *const [u8] as *const OsStr)\n+    // SAFETY: see the comment of `os_str_as_u8_slice`\n+    unsafe { &*(s as *const [u8] as *const OsStr) }\n }\n \n // Detect scheme on Redox\n@@ -313,24 +315,21 @@ fn has_physical_root(s: &[u8], prefix: Option<Prefix<'_>>) -> bool {\n \n // basic workhorse for splitting stem and extension\n fn split_file_at_dot(file: &OsStr) -> (Option<&OsStr>, Option<&OsStr>) {\n-    unsafe {\n-        if os_str_as_u8_slice(file) == b\"..\" {\n-            return (Some(file), None);\n-        }\n-\n-        // The unsafety here stems from converting between &OsStr and &[u8]\n-        // and back. This is safe to do because (1) we only look at ASCII\n-        // contents of the encoding and (2) new &OsStr values are produced\n-        // only from ASCII-bounded slices of existing &OsStr values.\n-\n-        let mut iter = os_str_as_u8_slice(file).rsplitn(2, |b| *b == b'.');\n-        let after = iter.next();\n-        let before = iter.next();\n-        if before == Some(b\"\") {\n-            (Some(file), None)\n-        } else {\n-            (before.map(|s| u8_slice_as_os_str(s)), after.map(|s| u8_slice_as_os_str(s)))\n-        }\n+    if os_str_as_u8_slice(file) == b\"..\" {\n+        return (Some(file), None);\n+    }\n+\n+    // The unsafety here stems from converting between &OsStr and &[u8]\n+    // and back. This is safe to do because (1) we only look at ASCII\n+    // contents of the encoding and (2) new &OsStr values are produced\n+    // only from ASCII-bounded slices of existing &OsStr values.\n+    let mut iter = os_str_as_u8_slice(file).rsplitn(2, |b| *b == b'.');\n+    let after = iter.next();\n+    let before = iter.next();\n+    if before == Some(b\"\") {\n+        (Some(file), None)\n+    } else {\n+        unsafe { (before.map(|s| u8_slice_as_os_str(s)), after.map(|s| u8_slice_as_os_str(s))) }\n     }\n }\n \n@@ -1701,7 +1700,7 @@ impl Path {\n     // The following (private!) function allows construction of a path from a u8\n     // slice, which is only safe when it is known to follow the OsStr encoding.\n     unsafe fn from_u8_slice(s: &[u8]) -> &Path {\n-        Path::new(u8_slice_as_os_str(s))\n+        unsafe { Path::new(u8_slice_as_os_str(s)) }\n     }\n     // The following (private!) function reveals the byte encoding used for OsStr.\n     fn as_u8_slice(&self) -> &[u8] {"}]}