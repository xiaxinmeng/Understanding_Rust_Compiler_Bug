{"sha": "32168faf9f7a9e634647b86c1a671ae68dbe9c9d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyMTY4ZmFmOWY3YTllNjM0NjQ3Yjg2YzFhNjcxYWU2OGRiZTljOWQ=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-01T19:29:47Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-14T01:15:39Z"}, "message": "libstd: convert `BitFlags` binops to by value", "tree": {"sha": "dbd6f98a364da350618ce66e7bc9ad1869875e94", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dbd6f98a364da350618ce66e7bc9ad1869875e94"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/32168faf9f7a9e634647b86c1a671ae68dbe9c9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/32168faf9f7a9e634647b86c1a671ae68dbe9c9d", "html_url": "https://github.com/rust-lang/rust/commit/32168faf9f7a9e634647b86c1a671ae68dbe9c9d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/32168faf9f7a9e634647b86c1a671ae68dbe9c9d/comments", "author": null, "committer": null, "parents": [{"sha": "baf79d4a118c42f9ac0a7df3ff9b566d1450140d", "url": "https://api.github.com/repos/rust-lang/rust/commits/baf79d4a118c42f9ac0a7df3ff9b566d1450140d", "html_url": "https://github.com/rust-lang/rust/commit/baf79d4a118c42f9ac0a7df3ff9b566d1450140d"}], "stats": {"total": 44, "additions": 44, "deletions": 0}, "files": [{"sha": "38bb32ea775ab28464d7ce9e3de698336d59fd81", "filename": "src/libstd/bitflags.rs", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/32168faf9f7a9e634647b86c1a671ae68dbe9c9d/src%2Flibstd%2Fbitflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32168faf9f7a9e634647b86c1a671ae68dbe9c9d/src%2Flibstd%2Fbitflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbitflags.rs?ref=32168faf9f7a9e634647b86c1a671ae68dbe9c9d", "patch": "@@ -209,6 +209,8 @@ macro_rules! bitflags {\n             }\n         }\n \n+        // NOTE(stage0): Remove impl after a snapshot\n+        #[cfg(stage0)]\n         impl BitOr<$BitFlags, $BitFlags> for $BitFlags {\n             /// Returns the union of the two sets of flags.\n             #[inline]\n@@ -217,6 +219,17 @@ macro_rules! bitflags {\n             }\n         }\n \n+        #[cfg(not(stage0))]  // NOTE(stage0): Remove cfg after a snapshot\n+        impl BitOr<$BitFlags, $BitFlags> for $BitFlags {\n+            /// Returns the union of the two sets of flags.\n+            #[inline]\n+            fn bitor(self, other: $BitFlags) -> $BitFlags {\n+                $BitFlags { bits: self.bits | other.bits }\n+            }\n+        }\n+\n+        // NOTE(stage0): Remove impl after a snapshot\n+        #[cfg(stage0)]\n         impl BitXor<$BitFlags, $BitFlags> for $BitFlags {\n             /// Returns the left flags, but with all the right flags toggled.\n             #[inline]\n@@ -225,6 +238,17 @@ macro_rules! bitflags {\n             }\n         }\n \n+        #[cfg(not(stage0))]  // NOTE(stage0): Remove cfg after a snapshot\n+        impl BitXor<$BitFlags, $BitFlags> for $BitFlags {\n+            /// Returns the left flags, but with all the right flags toggled.\n+            #[inline]\n+            fn bitxor(self, other: $BitFlags) -> $BitFlags {\n+                $BitFlags { bits: self.bits ^ other.bits }\n+            }\n+        }\n+\n+        // NOTE(stage0): Remove impl after a snapshot\n+        #[cfg(stage0)]\n         impl BitAnd<$BitFlags, $BitFlags> for $BitFlags {\n             /// Returns the intersection between the two sets of flags.\n             #[inline]\n@@ -233,6 +257,17 @@ macro_rules! bitflags {\n             }\n         }\n \n+        #[cfg(not(stage0))]  // NOTE(stage0): Remove cfg after a snapshot\n+        impl BitAnd<$BitFlags, $BitFlags> for $BitFlags {\n+            /// Returns the intersection between the two sets of flags.\n+            #[inline]\n+            fn bitand(self, other: $BitFlags) -> $BitFlags {\n+                $BitFlags { bits: self.bits & other.bits }\n+            }\n+        }\n+\n+        // NOTE(stage0): Remove impl after a snapshot\n+        #[cfg(stage0)]\n         impl Sub<$BitFlags, $BitFlags> for $BitFlags {\n             /// Returns the set difference of the two sets of flags.\n             #[inline]\n@@ -241,6 +276,15 @@ macro_rules! bitflags {\n             }\n         }\n \n+        #[cfg(not(stage0))]  // NOTE(stage0): Remove cfg after a snapshot\n+        impl Sub<$BitFlags, $BitFlags> for $BitFlags {\n+            /// Returns the set difference of the two sets of flags.\n+            #[inline]\n+            fn sub(self, other: $BitFlags) -> $BitFlags {\n+                $BitFlags { bits: self.bits & !other.bits }\n+            }\n+        }\n+\n         impl Not<$BitFlags> for $BitFlags {\n             /// Returns the complement of this set of flags.\n             #[inline]"}]}