{"sha": "096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5NmEyODYwN2ZiODBjOTFlNmUyY2E2NGQ5ZWY0NGM0ZTU1MGU5NmM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-12-06T01:01:33Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-12-08T18:47:44Z"}, "message": "librustc: Make `Copy` opt-in.\n\nThis change makes the compiler no longer infer whether types (structures\nand enumerations) implement the `Copy` trait (and thus are implicitly\ncopyable). Rather, you must implement `Copy` yourself via `impl Copy for\nMyType {}`.\n\nA new warning has been added, `missing_copy_implementations`, to warn\nyou if a non-generic public type has been added that could have\nimplemented `Copy` but didn't.\n\nFor convenience, you may *temporarily* opt out of this behavior by using\n`#![feature(opt_out_copy)]`. Note though that this feature gate will never be\naccepted and will be removed by the time that 1.0 is released, so you should\ntransition your code away from using it.\n\nThis breaks code like:\n\n    #[deriving(Show)]\n    struct Point2D {\n        x: int,\n        y: int,\n    }\n\n    fn main() {\n        let mypoint = Point2D {\n            x: 1,\n            y: 1,\n        };\n        let otherpoint = mypoint;\n        println!(\"{}{}\", mypoint, otherpoint);\n    }\n\nChange this code to:\n\n    #[deriving(Show)]\n    struct Point2D {\n        x: int,\n        y: int,\n    }\n\n    impl Copy for Point2D {}\n\n    fn main() {\n        let mypoint = Point2D {\n            x: 1,\n            y: 1,\n        };\n        let otherpoint = mypoint;\n        println!(\"{}{}\", mypoint, otherpoint);\n    }\n\nThis is the backwards-incompatible part of #13231.\n\nPart of RFC #3.\n\n[breaking-change]", "tree": {"sha": "82c4ee8f20df133305959d507ec76adb4db5e324", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82c4ee8f20df133305959d507ec76adb4db5e324"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "html_url": "https://github.com/rust-lang/rust/commit/096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7a9b49d1b5d4e520f25355f26a93dfac4ffa146", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7a9b49d1b5d4e520f25355f26a93dfac4ffa146", "html_url": "https://github.com/rust-lang/rust/commit/c7a9b49d1b5d4e520f25355f26a93dfac4ffa146"}], "stats": {"total": 2695, "additions": 2182, "deletions": 513}, "files": [{"sha": "62b757529dc9f46c6781f14fedae18ec45f636e7", "filename": "src/compiletest/common.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Fcompiletest%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Fcompiletest%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcommon.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -25,6 +25,8 @@ pub enum Mode {\n     Codegen\n }\n \n+impl Copy for Mode {}\n+\n impl FromStr for Mode {\n     fn from_str(s: &str) -> Option<Mode> {\n         match s {"}, {"sha": "bda1b34563208e0317b958b1b1f9e029b7b1d902", "filename": "src/doc/guide-unsafe.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Fdoc%2Fguide-unsafe.md", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Fdoc%2Fguide-unsafe.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-unsafe.md?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -661,6 +661,9 @@ extern {\n     fn abort() -> !;\n }\n \n+#[lang = \"owned_box\"]\n+pub struct Box<T>(*mut T);\n+\n #[lang=\"exchange_malloc\"]\n unsafe fn allocate(size: uint, _align: uint) -> *mut u8 {\n     let p = libc::malloc(size as libc::size_t) as *mut u8;"}, {"sha": "f6ee5cadbc6087a0cc29078cbf77072f1574decc", "filename": "src/doc/reference.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -1660,6 +1660,7 @@ Implementations are defined with the keyword `impl`.\n \n ```\n # struct Point {x: f64, y: f64};\n+# impl Copy for Point {}\n # type Surface = int;\n # struct BoundingBox {x: f64, y: f64, width: f64, height: f64};\n # trait Shape { fn draw(&self, Surface); fn bounding_box(&self) -> BoundingBox; }\n@@ -1669,6 +1670,8 @@ struct Circle {\n     center: Point,\n }\n \n+impl Copy for Circle {}\n+\n impl Shape for Circle {\n     fn draw(&self, s: Surface) { do_draw_circle(s, *self); }\n     fn bounding_box(&self) -> BoundingBox {\n@@ -1791,6 +1794,7 @@ default visibility with the `priv` keyword. When an item is declared as `pub`,\n it can be thought of as being accessible to the outside world. For example:\n \n ```\n+# #![allow(missing_copy_implementations)]\n # fn main() {}\n // Declare a private struct\n struct Foo;"}, {"sha": "95c4dff323ef0635d713e7be853dda967e345086", "filename": "src/libarena/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibarena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibarena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibarena%2Flib.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -466,7 +466,7 @@ impl<T> TypedArena<T> {\n         }\n \n         let ptr: &mut T = unsafe {\n-            let ptr: &mut T = mem::transmute(self.ptr);\n+            let ptr: &mut T = mem::transmute(self.ptr.clone());\n             ptr::write(ptr, object);\n             self.ptr.set(self.ptr.get().offset(1));\n             ptr"}, {"sha": "a4722c340dd7f60dd3a104210ef211f9cb60f6bc", "filename": "src/libcollections/binary_heap.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbinary_heap.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -35,6 +35,8 @@\n //!     position: uint\n //! }\n //!\n+//! impl Copy for State {}\n+//!\n //! // The priority queue depends on `Ord`.\n //! // Explicitly implement the trait so the queue becomes a min-heap\n //! // instead of a max-heap."}, {"sha": "4309e96bec4827bf4fea61d15d6f171f78fa7ac1", "filename": "src/libcollections/dlist.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibcollections%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibcollections%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fdlist.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -39,7 +39,12 @@ pub struct DList<T> {\n }\n \n type Link<T> = Option<Box<Node<T>>>;\n-struct Rawlink<T> { p: *mut T }\n+\n+struct Rawlink<T> {\n+    p: *mut T,\n+}\n+\n+impl<T> Copy for Rawlink<T> {}\n \n struct Node<T> {\n     next: Link<T>,\n@@ -59,6 +64,8 @@ impl<'a, T> Clone for Items<'a, T> {\n     fn clone(&self) -> Items<'a, T> { *self }\n }\n \n+impl<'a,T> Copy for Items<'a,T> {}\n+\n /// An iterator over mutable references to the items of a `DList`.\n pub struct MutItems<'a, T:'a> {\n     list: &'a mut DList<T>,"}, {"sha": "28514b991921180d81fdcab2905dd4a84eda197c", "filename": "src/libcollections/enum_set.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibcollections%2Fenum_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibcollections%2Fenum_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fenum_set.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -27,6 +27,8 @@ pub struct EnumSet<E> {\n     bits: uint\n }\n \n+impl<E> Copy for EnumSet<E> {}\n+\n impl<E:CLike+fmt::Show> fmt::Show for EnumSet<E> {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n         try!(write!(fmt, \"{{\"));\n@@ -269,6 +271,8 @@ mod test {\n         A, B, C\n     }\n \n+    impl Copy for Foo {}\n+\n     impl CLike for Foo {\n         fn to_uint(&self) -> uint {\n             *self as uint\n@@ -477,6 +481,9 @@ mod test {\n             V50, V51, V52, V53, V54, V55, V56, V57, V58, V59,\n             V60, V61, V62, V63, V64, V65, V66, V67, V68, V69,\n         }\n+\n+        impl Copy for Bar {}\n+\n         impl CLike for Bar {\n             fn to_uint(&self) -> uint {\n                 *self as uint"}, {"sha": "9a7aa8c20d3a1c85bc70aa1fff586fc2f2fa4b45", "filename": "src/libcollections/hash/sip.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibcollections%2Fhash%2Fsip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibcollections%2Fhash%2Fsip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fhash%2Fsip.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -43,6 +43,8 @@ pub struct SipState {\n     ntail: uint,  // how many bytes in tail are valid\n }\n \n+impl Copy for SipState {}\n+\n // sadly, these macro definitions can't appear later,\n // because they're needed in the following defs;\n // this design could be improved.\n@@ -211,6 +213,7 @@ impl Default for SipState {\n \n /// `SipHasher` computes the SipHash algorithm from a stream of bytes.\n #[deriving(Clone)]\n+#[allow(missing_copy_implementations)]\n pub struct SipHasher {\n     k0: u64,\n     k1: u64,"}, {"sha": "c230c48d222bd1b93ded13ab143c5c9dc514948c", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -91,7 +91,7 @@ use self::Direction::*;\n use alloc::boxed::Box;\n use core::borrow::{BorrowFrom, BorrowFromMut, ToOwned};\n use core::cmp;\n-use core::kinds::Sized;\n+use core::kinds::{Copy, Sized};\n use core::mem::size_of;\n use core::mem;\n use core::prelude::{Clone, Greater, Iterator, IteratorExt, Less, None, Option};\n@@ -177,12 +177,16 @@ impl ElementSwaps {\n \n enum Direction { Pos, Neg }\n \n+impl Copy for Direction {}\n+\n /// An `Index` and `Direction` together.\n struct SizeDirection {\n     size: uint,\n     dir: Direction,\n }\n \n+impl Copy for SizeDirection {}\n+\n impl Iterator<(uint, uint)> for ElementSwaps {\n     #[inline]\n     fn next(&mut self) -> Option<(uint, uint)> {\n@@ -1482,11 +1486,17 @@ mod tests {\n             fn clone(&self) -> S {\n                 self.f.set(self.f.get() + 1);\n                 if self.f.get() == 10 { panic!() }\n-                S { f: self.f, boxes: self.boxes.clone() }\n+                S {\n+                    f: self.f.clone(),\n+                    boxes: self.boxes.clone(),\n+                }\n             }\n         }\n \n-        let s = S { f: Cell::new(0), boxes: (box 0, Rc::new(0)) };\n+        let s = S {\n+            f: Cell::new(0),\n+            boxes: (box 0, Rc::new(0)),\n+        };\n         let _ = Vec::from_elem(100, s);\n     }\n "}, {"sha": "419d7f270adf197e8eea9f2035a7c4f4f7a54991", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 21, "deletions": 13, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -228,24 +228,32 @@ impl<'a> Iterator<char> for Decompositions<'a> {\n             _ => self.sorted = false\n         }\n \n-        let decomposer = match self.kind {\n-            Canonical => unicode::char::decompose_canonical,\n-            Compatible => unicode::char::decompose_compatible\n-        };\n-\n         if !self.sorted {\n             for ch in self.iter {\n                 let buffer = &mut self.buffer;\n                 let sorted = &mut self.sorted;\n-                decomposer(ch, |d| {\n-                    let class = unicode::char::canonical_combining_class(d);\n-                    if class == 0 && !*sorted {\n-                        canonical_sort(buffer.as_mut_slice());\n-                        *sorted = true;\n+                {\n+                    let callback = |d| {\n+                        let class =\n+                            unicode::char::canonical_combining_class(d);\n+                        if class == 0 && !*sorted {\n+                            canonical_sort(buffer.as_mut_slice());\n+                            *sorted = true;\n+                        }\n+                        buffer.push((d, class));\n+                    };\n+                    match self.kind {\n+                        Canonical => {\n+                            unicode::char::decompose_canonical(ch, callback)\n+                        }\n+                        Compatible => {\n+                            unicode::char::decompose_compatible(ch, callback)\n+                        }\n                     }\n-                    buffer.push((d, class));\n-                });\n-                if *sorted { break }\n+                }\n+                if *sorted {\n+                    break\n+                }\n             }\n         }\n "}, {"sha": "748f5d774a4bbf9121c9e52a444c3fd6bc102a54", "filename": "src/libcore/atomic.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibcore%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibcore%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fatomic.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -17,6 +17,7 @@ pub use self::Ordering::*;\n use intrinsics;\n use std::kinds::marker;\n use cell::UnsafeCell;\n+use kinds::Copy;\n \n /// A boolean type which can be safely shared between threads.\n #[stable]\n@@ -81,6 +82,8 @@ pub enum Ordering {\n     SeqCst,\n }\n \n+impl Copy for Ordering {}\n+\n /// An `AtomicBool` initialized to `false`.\n #[unstable = \"may be renamed, pending conventions for static initalizers\"]\n pub const INIT_ATOMIC_BOOL: AtomicBool ="}, {"sha": "8485e40819b5b1f1df668d83163b254a21c9f503", "filename": "src/libcore/char.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -519,3 +519,4 @@ impl Iterator<char> for DefaultEscapedChars {\n         }\n     }\n }\n+"}, {"sha": "87fa44cea664f37f35eafcaf9303bc7ef0567282", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -43,9 +43,8 @@\n \n pub use self::Ordering::*;\n \n-use kinds::Sized;\n-use option::Option;\n-use option::Option::{Some, None};\n+use kinds::{Copy, Sized};\n+use option::{Option, Some, None};\n \n /// Trait for values that can be compared for equality and inequality.\n ///\n@@ -106,6 +105,8 @@ pub enum Ordering {\n    Greater = 1i,\n }\n \n+impl Copy for Ordering {}\n+\n impl Ordering {\n     /// Reverse the `Ordering`, so that `Less` becomes `Greater` and\n     /// vice versa."}, {"sha": "88ea811cfd694b25eaeae7e920872d424f860f4e", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -46,6 +46,8 @@ pub type Result = result::Result<(), Error>;\n #[experimental = \"core and I/O reconciliation may alter this definition\"]\n pub struct Error;\n \n+impl Copy for Error {}\n+\n /// A collection of methods that are required to format a message into a stream.\n ///\n /// This trait is the type which this modules requires when formatting\n@@ -135,6 +137,8 @@ impl<'a> Argument<'a> {\n     }\n }\n \n+impl<'a> Copy for Argument<'a> {}\n+\n impl<'a> Arguments<'a> {\n     /// When using the format_args!() macro, this function is used to generate the\n     /// Arguments structure."}, {"sha": "fa6f48326b56b02e64179c598c2a4cc959601c1b", "filename": "src/libcore/fmt/num.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibcore%2Ffmt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibcore%2Ffmt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fnum.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -16,6 +16,7 @@\n \n use fmt;\n use iter::DoubleEndedIteratorExt;\n+use kinds::Copy;\n use num::{Int, cast};\n use slice::SlicePrelude;\n \n@@ -114,6 +115,8 @@ pub struct Radix {\n     base: u8,\n }\n \n+impl Copy for Radix {}\n+\n impl Radix {\n     fn new(base: u8) -> Radix {\n         assert!(2 <= base && base <= 36, \"the base must be in the range of 2..36: {}\", base);\n@@ -136,6 +139,8 @@ impl GenericRadix for Radix {\n #[unstable = \"may be renamed or move to a different module\"]\n pub struct RadixFmt<T, R>(T, R);\n \n+impl<T,R> Copy for RadixFmt<T,R> where T: Copy, R: Copy {}\n+\n /// Constructs a radix formatter in the range of `2..36`.\n ///\n /// # Example"}, {"sha": "748bd0bc4bd0019ceaf404ccf9a519478716941c", "filename": "src/libcore/fmt/rt.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibcore%2Ffmt%2Frt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibcore%2Ffmt%2Frt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Frt.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -20,13 +20,16 @@ pub use self::Alignment::*;\n pub use self::Count::*;\n pub use self::Position::*;\n pub use self::Flag::*;\n+use kinds::Copy;\n \n #[doc(hidden)]\n pub struct Argument<'a> {\n     pub position: Position,\n     pub format: FormatSpec,\n }\n \n+impl<'a> Copy for Argument<'a> {}\n+\n #[doc(hidden)]\n pub struct FormatSpec {\n     pub fill: char,\n@@ -36,6 +39,8 @@ pub struct FormatSpec {\n     pub width: Count,\n }\n \n+impl Copy for FormatSpec {}\n+\n /// Possible alignments that can be requested as part of a formatting directive.\n #[deriving(PartialEq)]\n pub enum Alignment {\n@@ -49,16 +54,22 @@ pub enum Alignment {\n     AlignUnknown,\n }\n \n+impl Copy for Alignment {}\n+\n #[doc(hidden)]\n pub enum Count {\n     CountIs(uint), CountIsParam(uint), CountIsNextParam, CountImplied,\n }\n \n+impl Copy for Count {}\n+\n #[doc(hidden)]\n pub enum Position {\n     ArgumentNext, ArgumentIs(uint)\n }\n \n+impl Copy for Position {}\n+\n /// Flags which can be passed to formatting via a directive.\n ///\n /// These flags are discovered through the `flags` field of the `Formatter`\n@@ -78,3 +89,5 @@ pub enum Flag {\n     /// being aware of the sign to be printed.\n     FlagSignAwareZeroPad,\n }\n+\n+impl Copy for Flag {}"}, {"sha": "2fc4d23e7fd748968c3d153ef0a54c39a1b91db4", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -42,6 +42,8 @@\n #![experimental]\n #![allow(missing_docs)]\n \n+use kinds::Copy;\n+\n pub type GlueFn = extern \"Rust\" fn(*const i8);\n \n #[lang=\"ty_desc\"]\n@@ -59,6 +61,8 @@ pub struct TyDesc {\n     pub name: &'static str,\n }\n \n+impl Copy for TyDesc {}\n+\n extern \"rust-intrinsic\" {\n \n     // NB: These intrinsics take unsafe pointers because they mutate aliased\n@@ -539,6 +543,8 @@ pub struct TypeId {\n     t: u64,\n }\n \n+impl Copy for TypeId {}\n+\n impl TypeId {\n     /// Returns the `TypeId` of the type this generic function has been instantiated with\n     pub fn of<T: 'static>() -> TypeId {"}, {"sha": "ddca9d36bed7ecfc2d1ecb7a5d43d6277fce3254", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -59,6 +59,7 @@ pub use self::MinMaxResult::*;\n use clone::Clone;\n use cmp;\n use cmp::Ord;\n+use kinds::Copy;\n use mem;\n use num::{ToPrimitive, Int};\n use ops::{Add, Deref};\n@@ -1166,7 +1167,8 @@ pub struct Cycle<T> {\n     iter: T,\n }\n \n-#[unstable = \"trait is unstable\"]\n+impl<T:Copy> Copy for Cycle<T> {}\n+\n impl<A, T: Clone + Iterator<A>> Iterator<A> for Cycle<T> {\n     #[inline]\n     fn next(&mut self) -> Option<A> {\n@@ -1576,7 +1578,8 @@ pub struct Peekable<A, T> {\n     peeked: Option<A>,\n }\n \n-#[unstable = \"trait is unstable\"]\n+impl<T:Copy,A:Copy> Copy for Peekable<A,T> {}\n+\n impl<A, T: Iterator<A>> Iterator<A> for Peekable<A, T> {\n     #[inline]\n     fn next(&mut self) -> Option<A> {\n@@ -2115,6 +2118,8 @@ pub struct Counter<A> {\n     step: A,\n }\n \n+impl<A:Copy> Copy for Counter<A> {}\n+\n /// Creates a new counter with the specified start/step\n #[inline]\n #[unstable = \"may be renamed\"]\n@@ -2146,6 +2151,8 @@ pub struct Range<A> {\n     one: A,\n }\n \n+impl<A:Copy> Copy for Range<A> {}\n+\n /// Returns an iterator over the given range [start, stop) (that is, starting\n /// at start (inclusive), and ending at stop (exclusive)).\n ///"}, {"sha": "f932acffd3c2ddd9a012922eba0acfb4626edbf8", "filename": "src/libcore/kinds.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibcore%2Fkinds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibcore%2Fkinds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fkinds.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -91,6 +91,8 @@ pub trait Sync for Sized? {\n /// implemented using unsafe code. In that case, you may want to embed\n /// some of the marker types below into your type.\n pub mod marker {\n+    use super::Copy;\n+\n     /// A marker type whose type parameter `T` is considered to be\n     /// covariant with respect to the type itself. This is (typically)\n     /// used to indicate that an instance of the type `T` is being stored\n@@ -132,6 +134,8 @@ pub mod marker {\n     #[deriving(Clone, PartialEq, Eq, PartialOrd, Ord)]\n     pub struct CovariantType<T>;\n \n+    impl<T> Copy for CovariantType<T> {}\n+\n     /// A marker type whose type parameter `T` is considered to be\n     /// contravariant with respect to the type itself. This is (typically)\n     /// used to indicate that an instance of the type `T` will be consumed\n@@ -175,6 +179,8 @@ pub mod marker {\n     #[deriving(Clone, PartialEq, Eq, PartialOrd, Ord)]\n     pub struct ContravariantType<T>;\n \n+    impl<T> Copy for ContravariantType<T> {}\n+\n     /// A marker type whose type parameter `T` is considered to be\n     /// invariant with respect to the type itself. This is (typically)\n     /// used to indicate that instances of the type `T` may be read or\n@@ -200,6 +206,8 @@ pub mod marker {\n     #[deriving(Clone, PartialEq, Eq, PartialOrd, Ord)]\n     pub struct InvariantType<T>;\n \n+    impl<T> Copy for InvariantType<T> {}\n+\n     /// As `CovariantType`, but for lifetime parameters. Using\n     /// `CovariantLifetime<'a>` indicates that it is ok to substitute\n     /// a *longer* lifetime for `'a` than the one you originally\n@@ -220,6 +228,8 @@ pub mod marker {\n     #[deriving(Clone, PartialEq, Eq, PartialOrd, Ord)]\n     pub struct CovariantLifetime<'a>;\n \n+    impl<'a> Copy for CovariantLifetime<'a> {}\n+\n     /// As `ContravariantType`, but for lifetime parameters. Using\n     /// `ContravariantLifetime<'a>` indicates that it is ok to\n     /// substitute a *shorter* lifetime for `'a` than the one you\n@@ -236,6 +246,8 @@ pub mod marker {\n     #[deriving(Clone, PartialEq, Eq, PartialOrd, Ord)]\n     pub struct ContravariantLifetime<'a>;\n \n+    impl<'a> Copy for ContravariantLifetime<'a> {}\n+\n     /// As `InvariantType`, but for lifetime parameters. Using\n     /// `InvariantLifetime<'a>` indicates that it is not ok to\n     /// substitute any other lifetime for `'a` besides its original\n@@ -253,25 +265,30 @@ pub mod marker {\n     /// their instances remain thread-local.\n     #[lang=\"no_send_bound\"]\n     #[deriving(Clone, PartialEq, Eq, PartialOrd, Ord)]\n+    #[allow(missing_copy_implementations)]\n     pub struct NoSend;\n \n     /// A type which is considered \"not POD\", meaning that it is not\n     /// implicitly copyable. This is typically embedded in other types to\n     /// ensure that they are never copied, even if they lack a destructor.\n     #[lang=\"no_copy_bound\"]\n     #[deriving(Clone, PartialEq, Eq, PartialOrd, Ord)]\n+    #[allow(missing_copy_implementations)]\n     pub struct NoCopy;\n \n     /// A type which is considered \"not sync\", meaning that\n     /// its contents are not threadsafe, hence they cannot be\n     /// shared between tasks.\n     #[lang=\"no_sync_bound\"]\n     #[deriving(Clone, PartialEq, Eq, PartialOrd, Ord)]\n+    #[allow(missing_copy_implementations)]\n     pub struct NoSync;\n \n     /// A type which is considered managed by the GC. This is typically\n     /// embedded in other types.\n     #[lang=\"managed_bound\"]\n     #[deriving(Clone, PartialEq, Eq, PartialOrd, Ord)]\n+    #[allow(missing_copy_implementations)]\n     pub struct Managed;\n }\n+"}, {"sha": "09d5061a02fd5f5520cadf0e0c73f467b2f9d617", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -56,7 +56,7 @@\n        html_playground_url = \"http://play.rust-lang.org/\")]\n \n #![no_std]\n-#![allow(unknown_features)]\n+#![allow(unknown_features, raw_pointer_deriving)]\n #![feature(globs, intrinsics, lang_items, macro_rules, phase)]\n #![feature(simd, unsafe_destructor, slicing_syntax)]\n #![feature(default_type_params)]"}, {"sha": "3c9b68b350b6b7a21d6de8eddd172090b01ee6d0", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -1240,6 +1240,8 @@ pub enum FPCategory {\n     FPNormal,\n }\n \n+impl Copy for FPCategory {}\n+\n /// A built-in floating point number.\n // FIXME(#5527): In a future version of Rust, many of these functions will\n //               become constants."}, {"sha": "e16b24923a808f772d14ea060664944de1f513f0", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -90,6 +90,8 @@ pub trait Drop {\n /// ```rust\n /// struct Foo;\n ///\n+/// impl Copy for Foo {}\n+///\n /// impl Add<Foo, Foo> for Foo {\n ///     fn add(&self, _rhs: &Foo) -> Foo {\n ///       println!(\"Adding!\");\n@@ -128,6 +130,8 @@ add_impl!(uint u8 u16 u32 u64 int i8 i16 i32 i64 f32 f64)\n /// ```rust\n /// struct Foo;\n ///\n+/// impl Copy for Foo {}\n+///\n /// impl Sub<Foo, Foo> for Foo {\n ///     fn sub(&self, _rhs: &Foo) -> Foo {\n ///         println!(\"Subtracting!\");\n@@ -166,6 +170,8 @@ sub_impl!(uint u8 u16 u32 u64 int i8 i16 i32 i64 f32 f64)\n /// ```rust\n /// struct Foo;\n ///\n+/// impl Copy for Foo {}\n+///\n /// impl Mul<Foo, Foo> for Foo {\n ///     fn mul(&self, _rhs: &Foo) -> Foo {\n ///         println!(\"Multiplying!\");\n@@ -204,6 +210,8 @@ mul_impl!(uint u8 u16 u32 u64 int i8 i16 i32 i64 f32 f64)\n /// ```\n /// struct Foo;\n ///\n+/// impl Copy for Foo {}\n+///\n /// impl Div<Foo, Foo> for Foo {\n ///     fn div(&self, _rhs: &Foo) -> Foo {\n ///         println!(\"Dividing!\");\n@@ -242,6 +250,8 @@ div_impl!(uint u8 u16 u32 u64 int i8 i16 i32 i64 f32 f64)\n /// ```\n /// struct Foo;\n ///\n+/// impl Copy for Foo {}\n+///\n /// impl Rem<Foo, Foo> for Foo {\n ///     fn rem(&self, _rhs: &Foo) -> Foo {\n ///         println!(\"Remainder-ing!\");\n@@ -294,6 +304,8 @@ rem_float_impl!(f64, fmod)\n /// ```\n /// struct Foo;\n ///\n+/// impl Copy for Foo {}\n+///\n /// impl Neg<Foo> for Foo {\n ///     fn neg(&self) -> Foo {\n ///         println!(\"Negating!\");\n@@ -348,6 +360,8 @@ neg_uint_impl!(u64, i64)\n /// ```\n /// struct Foo;\n ///\n+/// impl Copy for Foo {}\n+///\n /// impl Not<Foo> for Foo {\n ///     fn not(&self) -> Foo {\n ///         println!(\"Not-ing!\");\n@@ -387,6 +401,8 @@ not_impl!(bool uint u8 u16 u32 u64 int i8 i16 i32 i64)\n /// ```\n /// struct Foo;\n ///\n+/// impl Copy for Foo {}\n+///\n /// impl BitAnd<Foo, Foo> for Foo {\n ///     fn bitand(&self, _rhs: &Foo) -> Foo {\n ///         println!(\"Bitwise And-ing!\");\n@@ -425,6 +441,8 @@ bitand_impl!(bool uint u8 u16 u32 u64 int i8 i16 i32 i64)\n /// ```\n /// struct Foo;\n ///\n+/// impl Copy for Foo {}\n+///\n /// impl BitOr<Foo, Foo> for Foo {\n ///     fn bitor(&self, _rhs: &Foo) -> Foo {\n ///         println!(\"Bitwise Or-ing!\");\n@@ -463,6 +481,8 @@ bitor_impl!(bool uint u8 u16 u32 u64 int i8 i16 i32 i64)\n /// ```\n /// struct Foo;\n ///\n+/// impl Copy for Foo {}\n+///\n /// impl BitXor<Foo, Foo> for Foo {\n ///     fn bitxor(&self, _rhs: &Foo) -> Foo {\n ///         println!(\"Bitwise Xor-ing!\");\n@@ -501,6 +521,8 @@ bitxor_impl!(bool uint u8 u16 u32 u64 int i8 i16 i32 i64)\n /// ```\n /// struct Foo;\n ///\n+/// impl Copy for Foo {}\n+///\n /// impl Shl<Foo, Foo> for Foo {\n ///     fn shl(&self, _rhs: &Foo) -> Foo {\n ///         println!(\"Shifting left!\");\n@@ -541,6 +563,8 @@ shl_impl!(uint u8 u16 u32 u64 int i8 i16 i32 i64)\n /// ```\n /// struct Foo;\n ///\n+/// impl Copy for Foo {}\n+///\n /// impl Shr<Foo, Foo> for Foo {\n ///     fn shr(&self, _rhs: &Foo) -> Foo {\n ///         println!(\"Shifting right!\");\n@@ -580,6 +604,8 @@ shr_impl!(uint u8 u16 u32 u64 int i8 i16 i32 i64)\n /// ```\n /// struct Foo;\n ///\n+/// impl Copy for Foo {}\n+///\n /// impl Index<Foo, Foo> for Foo {\n ///     fn index<'a>(&'a self, _index: &Foo) -> &'a Foo {\n ///         println!(\"Indexing!\");\n@@ -608,6 +634,8 @@ pub trait Index<Sized? Index, Sized? Result> for Sized? {\n /// ```\n /// struct Foo;\n ///\n+/// impl Copy for Foo {}\n+///\n /// impl IndexMut<Foo, Foo> for Foo {\n ///     fn index_mut<'a>(&'a mut self, _index: &Foo) -> &'a mut Foo {\n ///         println!(\"Indexing!\");\n@@ -636,6 +664,8 @@ pub trait IndexMut<Sized? Index, Sized? Result> for Sized? {\n /// ```ignore\n /// struct Foo;\n ///\n+/// impl Copy for Foo {}\n+///\n /// impl Slice<Foo, Foo> for Foo {\n ///     fn as_slice_<'a>(&'a self) -> &'a Foo {\n ///         println!(\"Slicing!\");\n@@ -682,6 +712,8 @@ pub trait Slice<Sized? Idx, Sized? Result> for Sized? {\n /// ```ignore\n /// struct Foo;\n ///\n+/// impl Copy for Foo {}\n+///\n /// impl SliceMut<Foo, Foo> for Foo {\n ///     fn as_mut_slice_<'a>(&'a mut self) -> &'a mut Foo {\n ///         println!(\"Slicing!\");"}, {"sha": "0a8fa28e52c577784a8139fceeebcf644bcd834c", "filename": "src/libcore/option.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -147,7 +147,9 @@ pub use self::Option::*;\n \n use cmp::{Eq, Ord};\n use default::Default;\n-use iter::{Iterator, IteratorExt, DoubleEndedIterator, FromIterator, ExactSizeIterator};\n+use iter::{Iterator, IteratorExt, DoubleEndedIterator, FromIterator};\n+use iter::{ExactSizeIterator};\n+use kinds::Copy;\n use mem;\n use result::Result;\n use result::Result::{Ok, Err};\n@@ -857,3 +859,6 @@ impl<A, V: FromIterator<A>> FromIterator<Option<A>> for Option<V> {\n         }\n     }\n }\n+\n+impl<T:Copy> Copy for Option<T> {}\n+"}, {"sha": "5c61a1ed103687ba65c8804b85465ab000c197d3", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -437,3 +437,4 @@ impl<T> PartialOrd for *mut T {\n     #[inline]\n     fn ge(&self, other: &*mut T) -> bool { *self >= *other }\n }\n+"}, {"sha": "db1be94b2b83feb53c684e4c367d9347a359af37", "filename": "src/libcore/raw.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibcore%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibcore%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fraw.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -18,6 +18,7 @@\n //!\n //! Their definition should always match the ABI defined in `rustc::back::abi`.\n \n+use kinds::Copy;\n use mem;\n use kinds::Sized;\n \n@@ -28,20 +29,26 @@ pub struct Slice<T> {\n     pub len: uint,\n }\n \n+impl<T> Copy for Slice<T> {}\n+\n /// The representation of a Rust closure\n #[repr(C)]\n pub struct Closure {\n     pub code: *mut (),\n     pub env: *mut (),\n }\n \n+impl Copy for Closure {}\n+\n /// The representation of a Rust procedure (`proc()`)\n #[repr(C)]\n pub struct Procedure {\n     pub code: *mut (),\n     pub env: *mut (),\n }\n \n+impl Copy for Procedure {}\n+\n /// The representation of a Rust trait object.\n ///\n /// This struct does not have a `Repr` implementation\n@@ -52,6 +59,8 @@ pub struct TraitObject {\n     pub vtable: *mut (),\n }\n \n+impl Copy for TraitObject {}\n+\n /// This trait is meant to map equivalences between raw structs and their\n /// corresponding rust values.\n pub trait Repr<T> for Sized? {"}, {"sha": "c5d69b169872cdb1cef3d96ff02830d090896b04", "filename": "src/libcore/result.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -232,6 +232,7 @@\n \n pub use self::Result::*;\n \n+use kinds::Copy;\n use std::fmt::Show;\n use slice;\n use slice::AsSlice;\n@@ -916,3 +917,7 @@ pub fn fold<T,\n     }\n     Ok(init)\n }\n+\n+#[cfg(not(stage0))]\n+impl<T:Copy,U:Copy> Copy for Result<T,U> {}\n+"}, {"sha": "369a7106583070e701c3d695f073a7bcefc58bfa", "filename": "src/libcore/simd.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibcore%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibcore%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsimd.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -37,6 +37,8 @@\n #![allow(non_camel_case_types)]\n #![allow(missing_docs)]\n \n+use kinds::Copy;\n+\n #[experimental]\n #[simd]\n #[deriving(Show)]\n@@ -46,25 +48,33 @@ pub struct i8x16(pub i8, pub i8, pub i8, pub i8,\n                  pub i8, pub i8, pub i8, pub i8,\n                  pub i8, pub i8, pub i8, pub i8);\n \n+impl Copy for i8x16 {}\n+\n #[experimental]\n #[simd]\n #[deriving(Show)]\n #[repr(C)]\n pub struct i16x8(pub i16, pub i16, pub i16, pub i16,\n                  pub i16, pub i16, pub i16, pub i16);\n \n+impl Copy for i16x8 {}\n+\n #[experimental]\n #[simd]\n #[deriving(Show)]\n #[repr(C)]\n pub struct i32x4(pub i32, pub i32, pub i32, pub i32);\n \n+impl Copy for i32x4 {}\n+\n #[experimental]\n #[simd]\n #[deriving(Show)]\n #[repr(C)]\n pub struct i64x2(pub i64, pub i64);\n \n+impl Copy for i64x2 {}\n+\n #[experimental]\n #[simd]\n #[deriving(Show)]\n@@ -74,33 +84,46 @@ pub struct u8x16(pub u8, pub u8, pub u8, pub u8,\n                  pub u8, pub u8, pub u8, pub u8,\n                  pub u8, pub u8, pub u8, pub u8);\n \n+impl Copy for u8x16 {}\n+\n #[experimental]\n #[simd]\n #[deriving(Show)]\n #[repr(C)]\n pub struct u16x8(pub u16, pub u16, pub u16, pub u16,\n                  pub u16, pub u16, pub u16, pub u16);\n \n+impl Copy for u16x8 {}\n+\n #[experimental]\n #[simd]\n #[deriving(Show)]\n #[repr(C)]\n pub struct u32x4(pub u32, pub u32, pub u32, pub u32);\n \n+impl Copy for u32x4 {}\n+\n #[experimental]\n #[simd]\n #[deriving(Show)]\n #[repr(C)]\n pub struct u64x2(pub u64, pub u64);\n \n+impl Copy for u64x2 {}\n+\n #[experimental]\n #[simd]\n #[deriving(Show)]\n #[repr(C)]\n pub struct f32x4(pub f32, pub f32, pub f32, pub f32);\n \n+impl Copy for f32x4 {}\n+\n #[experimental]\n #[simd]\n #[deriving(Show)]\n #[repr(C)]\n pub struct f64x2(pub f64, pub f64);\n+\n+impl Copy for f64x2 {}\n+"}, {"sha": "4e3007b55fe04cf0406eecd0f2bf45741ccc15e3", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -41,6 +41,7 @@ use cmp::Ordering::{Less, Equal, Greater};\n use cmp;\n use default::Default;\n use iter::*;\n+use kinds::Copy;\n use num::Int;\n use ops;\n use option::Option;\n@@ -1157,6 +1158,8 @@ impl<'a, T> Items<'a, T> {\n     }\n }\n \n+impl<'a,T> Copy for Items<'a,T> {}\n+\n iterator!{struct Items -> *const T, &'a T}\n \n #[experimental = \"needs review\"]\n@@ -1607,6 +1610,8 @@ pub enum BinarySearchResult {\n     NotFound(uint)\n }\n \n+impl Copy for BinarySearchResult {}\n+\n #[experimental = \"needs review\"]\n impl BinarySearchResult {\n     /// Converts a `Found` to `Some`, `NotFound` to `None`.\n@@ -1920,3 +1925,4 @@ impl_int_slice!(u16,  i16)\n impl_int_slice!(u32,  i32)\n impl_int_slice!(u64,  i64)\n impl_int_slice!(uint, int)\n+"}, {"sha": "8f9eeaddfb5230d78651d502cd4c430904cf873d", "filename": "src/libcore/str.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -26,7 +26,7 @@ use default::Default;\n use iter::{Map, Iterator, IteratorExt, DoubleEndedIterator};\n use iter::{DoubleEndedIteratorExt, ExactSizeIterator};\n use iter::range;\n-use kinds::Sized;\n+use kinds::{Copy, Sized};\n use mem;\n use num::Int;\n use option::Option;\n@@ -176,6 +176,8 @@ pub struct Chars<'a> {\n     iter: slice::Items<'a, u8>\n }\n \n+impl<'a> Copy for Chars<'a> {}\n+\n // Return the initial codepoint accumulator for the first byte.\n // The first byte is special, only want bottom 5 bits for width 2, 4 bits\n // for width 3, and 3 bits for width 4\n@@ -996,6 +998,8 @@ pub enum Utf16Item {\n     LoneSurrogate(u16)\n }\n \n+impl Copy for Utf16Item {}\n+\n impl Utf16Item {\n     /// Convert `self` to a `char`, taking `LoneSurrogate`s to the\n     /// replacement character (U+FFFD).\n@@ -1139,6 +1143,8 @@ pub struct CharRange {\n     pub next: uint,\n }\n \n+impl Copy for CharRange {}\n+\n /// Mask of the value bits of a continuation byte\n const CONT_MASK: u8 = 0b0011_1111u8;\n /// Value of the tag bits (tag mask is !CONT_MASK) of a continuation byte\n@@ -2315,3 +2321,4 @@ impl StrPrelude for str {\n impl<'a> Default for &'a str {\n     fn default() -> &'a str { \"\" }\n }\n+"}, {"sha": "db389457a1e4759821cde69ed9cfa39487c7f6d7", "filename": "src/libfmt_macros/lib.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibfmt_macros%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibfmt_macros%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfmt_macros%2Flib.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -44,6 +44,8 @@ pub enum Piece<'a> {\n     NextArgument(Argument<'a>),\n }\n \n+impl<'a> Copy for Piece<'a> {}\n+\n /// Representation of an argument specification.\n #[deriving(PartialEq)]\n pub struct Argument<'a> {\n@@ -53,6 +55,8 @@ pub struct Argument<'a> {\n     pub format: FormatSpec<'a>,\n }\n \n+impl<'a> Copy for Argument<'a> {}\n+\n /// Specification for the formatting of an argument in the format string.\n #[deriving(PartialEq)]\n pub struct FormatSpec<'a> {\n@@ -72,6 +76,8 @@ pub struct FormatSpec<'a> {\n     pub ty: &'a str\n }\n \n+impl<'a> Copy for FormatSpec<'a> {}\n+\n /// Enum describing where an argument for a format can be located.\n #[deriving(PartialEq)]\n pub enum Position<'a> {\n@@ -83,6 +89,8 @@ pub enum Position<'a> {\n     ArgumentNamed(&'a str),\n }\n \n+impl<'a> Copy for Position<'a> {}\n+\n /// Enum of alignments which are supported.\n #[deriving(PartialEq)]\n pub enum Alignment {\n@@ -96,6 +104,8 @@ pub enum Alignment {\n     AlignUnknown,\n }\n \n+impl Copy for Alignment {}\n+\n /// Various flags which can be applied to format strings. The meaning of these\n /// flags is defined by the formatters themselves.\n #[deriving(PartialEq)]\n@@ -112,6 +122,8 @@ pub enum Flag {\n     FlagSignAwareZeroPad,\n }\n \n+impl Copy for Flag {}\n+\n /// A count is used for the precision and width parameters of an integer, and\n /// can reference either an argument or a literal integer.\n #[deriving(PartialEq)]\n@@ -128,6 +140,8 @@ pub enum Count<'a> {\n     CountImplied,\n }\n \n+impl<'a> Copy for Count<'a> {}\n+\n /// The parser structure for interpreting the input format string. This is\n /// modelled as an iterator over `Piece` structures to form a stream of tokens\n /// being output."}, {"sha": "9174f8e8456f33908d4ccc2d906f7045b480af9a", "filename": "src/libgetopts/lib.rs", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibgetopts%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibgetopts%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgetopts%2Flib.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -97,6 +97,9 @@ use self::HasArg::*;\n use self::Occur::*;\n use self::Fail::*;\n use self::Optval::*;\n+use self::SplitWithinState::*;\n+use self::Whitespace::*;\n+use self::LengthLimit::*;\n \n use std::fmt;\n use std::result::Result::{Err, Ok};\n@@ -125,6 +128,8 @@ pub enum HasArg {\n     Maybe,\n }\n \n+impl Copy for HasArg {}\n+\n /// Describes how often an option may occur.\n #[deriving(Clone, PartialEq, Eq)]\n pub enum Occur {\n@@ -136,6 +141,8 @@ pub enum Occur {\n     Multi,\n }\n \n+impl Copy for Occur {}\n+\n /// A description of a possible option.\n #[deriving(Clone, PartialEq, Eq)]\n pub struct Opt {\n@@ -203,6 +210,19 @@ pub enum Fail {\n     UnexpectedArgument(String),\n }\n \n+/// The type of failure that occurred.\n+#[deriving(PartialEq, Eq)]\n+#[allow(missing_docs)]\n+pub enum FailType {\n+    ArgumentMissing_,\n+    UnrecognizedOption_,\n+    OptionMissing_,\n+    OptionDuplicated_,\n+    UnexpectedArgument_,\n+}\n+\n+impl Copy for FailType {}\n+\n /// The result of parsing a command line with a set of options.\n pub type Result = result::Result<Matches, Fail>;\n \n@@ -824,14 +844,17 @@ enum SplitWithinState {\n     B,  // words\n     C,  // internal and trailing whitespace\n }\n+impl Copy for SplitWithinState {}\n enum Whitespace {\n     Ws, // current char is whitespace\n     Cr  // current char is not whitespace\n }\n+impl Copy for Whitespace {}\n enum LengthLimit {\n     UnderLim, // current char makes current substring still fit in limit\n     OverLim   // current char makes current substring no longer fit in limit\n }\n+impl Copy for LengthLimit {}\n \n \n /// Splits a string into substrings with possibly internal whitespace,\n@@ -847,9 +870,6 @@ enum LengthLimit {\n /// sequence longer than the limit.\n fn each_split_within<'a>(ss: &'a str, lim: uint, it: |&'a str| -> bool)\n                      -> bool {\n-    use self::SplitWithinState::*;\n-    use self::Whitespace::*;\n-    use self::LengthLimit::*;\n     // Just for fun, let's write this as a state machine:\n \n     let mut slice_start = 0;"}, {"sha": "8825099e36c35b071d3b16a3deef0c19b78815db", "filename": "src/liblibc/lib.rs", "status": "modified", "additions": 135, "deletions": 113, "changes": 248, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Fliblibc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Fliblibc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc%2Flib.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -76,6 +76,7 @@\n #![allow(non_upper_case_globals)]\n #![allow(missing_docs)]\n #![allow(non_snake_case)]\n+#![allow(raw_pointer_deriving)]\n \n extern crate core;\n \n@@ -340,12 +341,15 @@ pub mod types {\n             /// variants, because the compiler complains about the repr attribute\n             /// otherwise.\n             #[repr(u8)]\n+            #[allow(missing_copy_implementations)]\n             pub enum c_void {\n                 __variant1,\n                 __variant2,\n             }\n \n+            #[allow(missing_copy_implementations)]\n             pub enum FILE {}\n+            #[allow(missing_copy_implementations)]\n             pub enum fpos_t {}\n         }\n         pub mod c99 {\n@@ -359,7 +363,9 @@ pub mod types {\n             pub type uint64_t = u64;\n         }\n         pub mod posix88 {\n+            #[allow(missing_copy_implementations)]\n             pub enum DIR {}\n+            #[allow(missing_copy_implementations)]\n             pub enum dirent_t {}\n         }\n         pub mod posix01 {}\n@@ -380,7 +386,7 @@ pub mod types {\n                 pub type pthread_t = c_ulong;\n \n                 #[repr(C)]\n-                pub struct glob_t {\n+                #[deriving(Copy)] pub struct glob_t {\n                     pub gl_pathc: size_t,\n                     pub gl_pathv: *mut *mut c_char,\n                     pub gl_offs:  size_t,\n@@ -393,18 +399,18 @@ pub mod types {\n                 }\n \n                 #[repr(C)]\n-                pub struct timeval {\n+                #[deriving(Copy)] pub struct timeval {\n                     pub tv_sec: time_t,\n                     pub tv_usec: suseconds_t,\n                 }\n \n                 #[repr(C)]\n-                pub struct timespec {\n+                #[deriving(Copy)] pub struct timespec {\n                     pub tv_sec: time_t,\n                     pub tv_nsec: c_long,\n                 }\n \n-                pub enum timezone {}\n+                #[deriving(Copy)] pub enum timezone {}\n \n                 pub type sighandler_t = size_t;\n             }\n@@ -417,51 +423,51 @@ pub mod types {\n                 pub type in_port_t = u16;\n                 pub type in_addr_t = u32;\n                 #[repr(C)]\n-                pub struct sockaddr {\n+                #[deriving(Copy)] pub struct sockaddr {\n                     pub sa_family: sa_family_t,\n                     pub sa_data: [u8, ..14],\n                 }\n                 #[repr(C)]\n-                pub struct sockaddr_storage {\n+                #[deriving(Copy)] pub struct sockaddr_storage {\n                     pub ss_family: sa_family_t,\n                     pub __ss_align: i64,\n                     pub __ss_pad2: [u8, ..112],\n                 }\n                 #[repr(C)]\n-                pub struct sockaddr_in {\n+                #[deriving(Copy)] pub struct sockaddr_in {\n                     pub sin_family: sa_family_t,\n                     pub sin_port: in_port_t,\n                     pub sin_addr: in_addr,\n                     pub sin_zero: [u8, ..8],\n                 }\n                 #[repr(C)]\n-                pub struct in_addr {\n+                #[deriving(Copy)] pub struct in_addr {\n                     pub s_addr: in_addr_t,\n                 }\n                 #[repr(C)]\n-                pub struct sockaddr_in6 {\n+                #[deriving(Copy)] pub struct sockaddr_in6 {\n                     pub sin6_family: sa_family_t,\n                     pub sin6_port: in_port_t,\n                     pub sin6_flowinfo: u32,\n                     pub sin6_addr: in6_addr,\n                     pub sin6_scope_id: u32,\n                 }\n                 #[repr(C)]\n-                pub struct in6_addr {\n+                #[deriving(Copy)] pub struct in6_addr {\n                     pub s6_addr: [u16, ..8]\n                 }\n                 #[repr(C)]\n-                pub struct ip_mreq {\n+                #[deriving(Copy)] pub struct ip_mreq {\n                     pub imr_multiaddr: in_addr,\n                     pub imr_interface: in_addr,\n                 }\n                 #[repr(C)]\n-                pub struct ip6_mreq {\n+                #[deriving(Copy)] pub struct ip6_mreq {\n                     pub ipv6mr_multiaddr: in6_addr,\n                     pub ipv6mr_interface: c_uint,\n                 }\n                 #[repr(C)]\n-                pub struct addrinfo {\n+                #[deriving(Copy)] pub struct addrinfo {\n                     pub ai_flags: c_int,\n                     pub ai_family: c_int,\n                     pub ai_socktype: c_int,\n@@ -483,13 +489,13 @@ pub mod types {\n                     pub ai_next: *mut addrinfo,\n                 }\n                 #[repr(C)]\n-                pub struct sockaddr_un {\n+                #[deriving(Copy)] pub struct sockaddr_un {\n                     pub sun_family: sa_family_t,\n                     pub sun_path: [c_char, ..108]\n                 }\n \n                 #[repr(C)]\n-                pub struct ifaddrs {\n+                #[deriving(Copy)] pub struct ifaddrs {\n                     pub ifa_next: *mut ifaddrs,\n                     pub ifa_name: *mut c_char,\n                     pub ifa_flags: c_uint,\n@@ -572,7 +578,7 @@ pub mod types {\n                 pub type blkcnt_t = i32;\n \n                 #[repr(C)]\n-                pub struct stat {\n+                #[deriving(Copy)] pub struct stat {\n                     pub st_dev: dev_t,\n                     pub __pad1: c_short,\n                     pub st_ino: ino_t,\n@@ -596,13 +602,13 @@ pub mod types {\n                 }\n \n                 #[repr(C)]\n-                pub struct utimbuf {\n+                #[deriving(Copy)] pub struct utimbuf {\n                     pub actime: time_t,\n                     pub modtime: time_t,\n                 }\n \n                 #[repr(C)]\n-                pub struct pthread_attr_t {\n+                #[deriving(Copy)] pub struct pthread_attr_t {\n                     pub __size: [u32, ..9]\n                 }\n             }\n@@ -617,7 +623,7 @@ pub mod types {\n                 pub type blkcnt_t = u32;\n \n                 #[repr(C)]\n-                pub struct stat {\n+                #[deriving(Copy)] pub struct stat {\n                     pub st_dev: c_ulonglong,\n                     pub __pad0: [c_uchar, ..4],\n                     pub __st_ino: ino_t,\n@@ -640,13 +646,13 @@ pub mod types {\n                 }\n \n                 #[repr(C)]\n-                pub struct utimbuf {\n+                #[deriving(Copy)] pub struct utimbuf {\n                     pub actime: time_t,\n                     pub modtime: time_t,\n                 }\n \n                 #[repr(C)]\n-                pub struct pthread_attr_t {\n+                #[deriving(Copy)] pub struct pthread_attr_t {\n                     pub __size: [u32, ..9]\n                 }\n             }\n@@ -662,7 +668,7 @@ pub mod types {\n                 pub type blkcnt_t = i32;\n \n                 #[repr(C)]\n-                pub struct stat {\n+                #[deriving(Copy)] pub struct stat {\n                     pub st_dev: c_ulong,\n                     pub st_pad1: [c_long, ..3],\n                     pub st_ino: ino_t,\n@@ -686,13 +692,13 @@ pub mod types {\n                 }\n \n                 #[repr(C)]\n-                pub struct utimbuf {\n+                #[deriving(Copy)] pub struct utimbuf {\n                     pub actime: time_t,\n                     pub modtime: time_t,\n                 }\n \n                 #[repr(C)]\n-                pub struct pthread_attr_t {\n+                #[deriving(Copy)] pub struct pthread_attr_t {\n                     pub __size: [u32, ..9]\n                 }\n             }\n@@ -701,7 +707,7 @@ pub mod types {\n             pub mod extra {\n                 use types::os::arch::c95::{c_ushort, c_int, c_uchar};\n                 #[repr(C)]\n-                pub struct sockaddr_ll {\n+                #[deriving(Copy)] pub struct sockaddr_ll {\n                     pub sll_family: c_ushort,\n                     pub sll_protocol: c_ushort,\n                     pub sll_ifindex: c_int,\n@@ -764,7 +770,7 @@ pub mod types {\n                 pub type blksize_t = i64;\n                 pub type blkcnt_t = i64;\n                 #[repr(C)]\n-                pub struct stat {\n+                #[deriving(Copy)] pub struct stat {\n                     pub st_dev: dev_t,\n                     pub st_ino: ino_t,\n                     pub st_nlink: nlink_t,\n@@ -786,13 +792,13 @@ pub mod types {\n                 }\n \n                 #[repr(C)]\n-                pub struct utimbuf {\n+                #[deriving(Copy)] pub struct utimbuf {\n                     pub actime: time_t,\n                     pub modtime: time_t,\n                 }\n \n                 #[repr(C)]\n-                pub struct pthread_attr_t {\n+                #[deriving(Copy)] pub struct pthread_attr_t {\n                     pub __size: [u64, ..7]\n                 }\n             }\n@@ -802,7 +808,7 @@ pub mod types {\n             }\n             pub mod extra {\n                 use types::os::arch::c95::{c_ushort, c_int, c_uchar};\n-                pub struct sockaddr_ll {\n+                #[deriving(Copy)] pub struct sockaddr_ll {\n                     pub sll_family: c_ushort,\n                     pub sll_protocol: c_ushort,\n                     pub sll_ifindex: c_int,\n@@ -828,7 +834,7 @@ pub mod types {\n                 pub type pthread_t = uintptr_t;\n \n                 #[repr(C)]\n-                pub struct glob_t {\n+                #[deriving(Copy)] pub struct glob_t {\n                     pub gl_pathc:  size_t,\n                     pub __unused1: size_t,\n                     pub gl_offs:   size_t,\n@@ -845,18 +851,18 @@ pub mod types {\n                 }\n \n                 #[repr(C)]\n-                pub struct timeval {\n+                #[deriving(Copy)] pub struct timeval {\n                     pub tv_sec: time_t,\n                     pub tv_usec: suseconds_t,\n                 }\n \n                 #[repr(C)]\n-                pub struct timespec {\n+                #[deriving(Copy)] pub struct timespec {\n                     pub tv_sec: time_t,\n                     pub tv_nsec: c_long,\n                 }\n \n-                pub enum timezone {}\n+                #[deriving(Copy)] pub enum timezone {}\n \n                 pub type sighandler_t = size_t;\n             }\n@@ -869,33 +875,33 @@ pub mod types {\n                 pub type in_port_t = u16;\n                 pub type in_addr_t = u32;\n                 #[repr(C)]\n-                pub struct sockaddr {\n+                #[deriving(Copy)] pub struct sockaddr {\n                     pub sa_len: u8,\n                     pub sa_family: sa_family_t,\n                     pub sa_data: [u8, ..14],\n                 }\n                 #[repr(C)]\n-                pub struct sockaddr_storage {\n+                #[deriving(Copy)] pub struct sockaddr_storage {\n                     pub ss_len: u8,\n                     pub ss_family: sa_family_t,\n                     pub __ss_pad1: [u8, ..6],\n                     pub __ss_align: i64,\n                     pub __ss_pad2: [u8, ..112],\n                 }\n                 #[repr(C)]\n-                pub struct sockaddr_in {\n+                #[deriving(Copy)] pub struct sockaddr_in {\n                     pub sin_len: u8,\n                     pub sin_family: sa_family_t,\n                     pub sin_port: in_port_t,\n                     pub sin_addr: in_addr,\n                     pub sin_zero: [u8, ..8],\n                 }\n                 #[repr(C)]\n-                pub struct in_addr {\n+                #[deriving(Copy)] pub struct in_addr {\n                     pub s_addr: in_addr_t,\n                 }\n                 #[repr(C)]\n-                pub struct sockaddr_in6 {\n+                #[deriving(Copy)] pub struct sockaddr_in6 {\n                     pub sin6_len: u8,\n                     pub sin6_family: sa_family_t,\n                     pub sin6_port: in_port_t,\n@@ -904,21 +910,21 @@ pub mod types {\n                     pub sin6_scope_id: u32,\n                 }\n                 #[repr(C)]\n-                pub struct in6_addr {\n+                #[deriving(Copy)] pub struct in6_addr {\n                     pub s6_addr: [u16, ..8]\n                 }\n                 #[repr(C)]\n-                pub struct ip_mreq {\n+                #[deriving(Copy)] pub struct ip_mreq {\n                     pub imr_multiaddr: in_addr,\n                     pub imr_interface: in_addr,\n                 }\n                 #[repr(C)]\n-                pub struct ip6_mreq {\n+                #[deriving(Copy)] pub struct ip6_mreq {\n                     pub ipv6mr_multiaddr: in6_addr,\n                     pub ipv6mr_interface: c_uint,\n                 }\n                 #[repr(C)]\n-                pub struct addrinfo {\n+                #[deriving(Copy)] pub struct addrinfo {\n                     pub ai_flags: c_int,\n                     pub ai_family: c_int,\n                     pub ai_socktype: c_int,\n@@ -929,13 +935,13 @@ pub mod types {\n                     pub ai_next: *mut addrinfo,\n                 }\n                 #[repr(C)]\n-                pub struct sockaddr_un {\n+                #[deriving(Copy)] pub struct sockaddr_un {\n                     pub sun_len: u8,\n                     pub sun_family: sa_family_t,\n                     pub sun_path: [c_char, ..104]\n                 }\n                 #[repr(C)]\n-                pub struct ifaddrs {\n+                #[deriving(Copy)] pub struct ifaddrs {\n                     pub ifa_next: *mut ifaddrs,\n                     pub ifa_name: *mut c_char,\n                     pub ifa_flags: c_uint,\n@@ -1002,7 +1008,7 @@ pub mod types {\n                 pub type blkcnt_t = i64;\n                 pub type fflags_t = u32;\n                 #[repr(C)]\n-                pub struct stat {\n+                #[deriving(Copy)] pub struct stat {\n                     pub st_dev: dev_t,\n                     pub st_ino: ino_t,\n                     pub st_mode: mode_t,\n@@ -1028,7 +1034,7 @@ pub mod types {\n                 }\n \n                 #[repr(C)]\n-                pub struct utimbuf {\n+                #[deriving(Copy)] pub struct utimbuf {\n                     pub actime: time_t,\n                     pub modtime: time_t,\n                 }\n@@ -1056,7 +1062,7 @@ pub mod types {\n                 pub type pthread_t = uintptr_t;\n \n                 #[repr(C)]\n-                pub struct glob_t {\n+                #[deriving(Copy)] pub struct glob_t {\n                     pub gl_pathc:  size_t,\n                     pub __unused1: size_t,\n                     pub gl_offs:   size_t,\n@@ -1073,18 +1079,18 @@ pub mod types {\n                 }\n \n                 #[repr(C)]\n-                pub struct timeval {\n+                #[deriving(Copy)] pub struct timeval {\n                     pub tv_sec: time_t,\n                     pub tv_usec: suseconds_t,\n                 }\n \n                 #[repr(C)]\n-                pub struct timespec {\n+                #[deriving(Copy)] pub struct timespec {\n                     pub tv_sec: time_t,\n                     pub tv_nsec: c_long,\n                 }\n \n-                pub enum timezone {}\n+                #[deriving(Copy)] pub enum timezone {}\n \n                 pub type sighandler_t = size_t;\n             }\n@@ -1096,33 +1102,33 @@ pub mod types {\n                 pub type in_port_t = u16;\n                 pub type in_addr_t = u32;\n                 #[repr(C)]\n-                pub struct sockaddr {\n+                #[deriving(Copy)] pub struct sockaddr {\n                     pub sa_len: u8,\n                     pub sa_family: sa_family_t,\n                     pub sa_data: [u8, ..14],\n                 }\n                 #[repr(C)]\n-                pub struct sockaddr_storage {\n+                #[deriving(Copy)] pub struct sockaddr_storage {\n                     pub ss_len: u8,\n                     pub ss_family: sa_family_t,\n                     pub __ss_pad1: [u8, ..6],\n                     pub __ss_align: i64,\n                     pub __ss_pad2: [u8, ..112],\n                 }\n                 #[repr(C)]\n-                pub struct sockaddr_in {\n+                #[deriving(Copy)] pub struct sockaddr_in {\n                     pub sin_len: u8,\n                     pub sin_family: sa_family_t,\n                     pub sin_port: in_port_t,\n                     pub sin_addr: in_addr,\n                     pub sin_zero: [u8, ..8],\n                 }\n                 #[repr(C)]\n-                pub struct in_addr {\n+                #[deriving(Copy)] pub struct in_addr {\n                     pub s_addr: in_addr_t,\n                 }\n                 #[repr(C)]\n-                pub struct sockaddr_in6 {\n+                #[deriving(Copy)] pub struct sockaddr_in6 {\n                     pub sin6_len: u8,\n                     pub sin6_family: sa_family_t,\n                     pub sin6_port: in_port_t,\n@@ -1131,21 +1137,21 @@ pub mod types {\n                     pub sin6_scope_id: u32,\n                 }\n                 #[repr(C)]\n-                pub struct in6_addr {\n+                #[deriving(Copy)] pub struct in6_addr {\n                     pub s6_addr: [u16, ..8]\n                 }\n                 #[repr(C)]\n-                pub struct ip_mreq {\n+                #[deriving(Copy)] pub struct ip_mreq {\n                     pub imr_multiaddr: in_addr,\n                     pub imr_interface: in_addr,\n                 }\n                 #[repr(C)]\n-                pub struct ip6_mreq {\n+                #[deriving(Copy)] pub struct ip6_mreq {\n                     pub ipv6mr_multiaddr: in6_addr,\n                     pub ipv6mr_interface: c_uint,\n                 }\n                 #[repr(C)]\n-                pub struct addrinfo {\n+                #[deriving(Copy)] pub struct addrinfo {\n                     pub ai_flags: c_int,\n                     pub ai_family: c_int,\n                     pub ai_socktype: c_int,\n@@ -1156,7 +1162,7 @@ pub mod types {\n                     pub ai_next: *mut addrinfo,\n                 }\n                 #[repr(C)]\n-                pub struct sockaddr_un {\n+                #[deriving(Copy)] pub struct sockaddr_un {\n                     pub sun_len: u8,\n                     pub sun_family: sa_family_t,\n                     pub sun_path: [c_char, ..104]\n@@ -1219,7 +1225,7 @@ pub mod types {\n                 pub type fflags_t = u32;\n \n                 #[repr(C)]\n-                pub struct stat {\n+                #[deriving(Copy)] pub struct stat {\n                     pub st_ino: ino_t,\n                     pub st_nlink: nlink_t,\n                     pub st_dev: dev_t,\n@@ -1244,7 +1250,7 @@ pub mod types {\n                     pub st_qspare2: int64_t,\n                 }\n                 #[repr(C)]\n-                pub struct utimbuf {\n+                #[deriving(Copy)] pub struct utimbuf {\n                     pub actime: time_t,\n                     pub modtime: time_t,\n                 }\n@@ -1271,7 +1277,7 @@ pub mod types {\n                 // pub Note: this is the struct called stat64 in Windows. Not stat,\n                 // nor stati64.\n                 #[repr(C)]\n-                pub struct stat {\n+                #[deriving(Copy)] pub struct stat {\n                     pub st_dev: dev_t,\n                     pub st_ino: ino_t,\n                     pub st_mode: u16,\n@@ -1287,24 +1293,24 @@ pub mod types {\n \n                 // note that this is called utimbuf64 in Windows\n                 #[repr(C)]\n-                pub struct utimbuf {\n+                #[deriving(Copy)] pub struct utimbuf {\n                     pub actime: time64_t,\n                     pub modtime: time64_t,\n                 }\n \n                 #[repr(C)]\n-                pub struct timeval {\n+                #[deriving(Copy)] pub struct timeval {\n                     pub tv_sec: c_long,\n                     pub tv_usec: c_long,\n                 }\n \n                 #[repr(C)]\n-                pub struct timespec {\n+                #[deriving(Copy)] pub struct timespec {\n                     pub tv_sec: time_t,\n                     pub tv_nsec: c_long,\n                 }\n \n-                pub enum timezone {}\n+                #[deriving(Copy)] pub enum timezone {}\n             }\n \n             pub mod bsd44 {\n@@ -1317,52 +1323,52 @@ pub mod types {\n                 pub type in_port_t = u16;\n                 pub type in_addr_t = u32;\n                 #[repr(C)]\n-                pub struct sockaddr {\n+                #[deriving(Copy)] pub struct sockaddr {\n                     pub sa_family: sa_family_t,\n                     pub sa_data: [u8, ..14],\n                 }\n                 #[repr(C)]\n-                pub struct sockaddr_storage {\n+                #[deriving(Copy)] pub struct sockaddr_storage {\n                     pub ss_family: sa_family_t,\n                     pub __ss_pad1: [u8, ..6],\n                     pub __ss_align: i64,\n                     pub __ss_pad2: [u8, ..112],\n                 }\n                 #[repr(C)]\n-                pub struct sockaddr_in {\n+                #[deriving(Copy)] pub struct sockaddr_in {\n                     pub sin_family: sa_family_t,\n                     pub sin_port: in_port_t,\n                     pub sin_addr: in_addr,\n                     pub sin_zero: [u8, ..8],\n                 }\n                 #[repr(C)]\n-                pub struct in_addr {\n+                #[deriving(Copy)] pub struct in_addr {\n                     pub s_addr: in_addr_t,\n                 }\n                 #[repr(C)]\n-                pub struct sockaddr_in6 {\n+                #[deriving(Copy)] pub struct sockaddr_in6 {\n                     pub sin6_family: sa_family_t,\n                     pub sin6_port: in_port_t,\n                     pub sin6_flowinfo: u32,\n                     pub sin6_addr: in6_addr,\n                     pub sin6_scope_id: u32,\n                 }\n                 #[repr(C)]\n-                pub struct in6_addr {\n+                #[deriving(Copy)] pub struct in6_addr {\n                     pub s6_addr: [u16, ..8]\n                 }\n                 #[repr(C)]\n-                pub struct ip_mreq {\n+                #[deriving(Copy)] pub struct ip_mreq {\n                     pub imr_multiaddr: in_addr,\n                     pub imr_interface: in_addr,\n                 }\n                 #[repr(C)]\n-                pub struct ip6_mreq {\n+                #[deriving(Copy)] pub struct ip6_mreq {\n                     pub ipv6mr_multiaddr: in6_addr,\n                     pub ipv6mr_interface: c_uint,\n                 }\n                 #[repr(C)]\n-                pub struct addrinfo {\n+                #[deriving(Copy)] pub struct addrinfo {\n                     pub ai_flags: c_int,\n                     pub ai_family: c_int,\n                     pub ai_socktype: c_int,\n@@ -1373,7 +1379,7 @@ pub mod types {\n                     pub ai_next: *mut addrinfo,\n                 }\n                 #[repr(C)]\n-                pub struct sockaddr_un {\n+                #[deriving(Copy)] pub struct sockaddr_un {\n                     pub sun_family: sa_family_t,\n                     pub sun_path: [c_char, ..108]\n                 }\n@@ -1501,7 +1507,7 @@ pub mod types {\n                 pub type LPCH = *mut CHAR;\n \n                 #[repr(C)]\n-                pub struct SECURITY_ATTRIBUTES {\n+                #[deriving(Copy)] pub struct SECURITY_ATTRIBUTES {\n                     pub nLength: DWORD,\n                     pub lpSecurityDescriptor: LPVOID,\n                     pub bInheritHandle: BOOL,\n@@ -1525,7 +1531,7 @@ pub mod types {\n                 pub type int64 = i64;\n \n                 #[repr(C)]\n-                pub struct STARTUPINFO {\n+                #[deriving(Copy)] pub struct STARTUPINFO {\n                     pub cb: DWORD,\n                     pub lpReserved: LPWSTR,\n                     pub lpDesktop: LPWSTR,\n@@ -1548,7 +1554,7 @@ pub mod types {\n                 pub type LPSTARTUPINFO = *mut STARTUPINFO;\n \n                 #[repr(C)]\n-                pub struct PROCESS_INFORMATION {\n+                #[deriving(Copy)] pub struct PROCESS_INFORMATION {\n                     pub hProcess: HANDLE,\n                     pub hThread: HANDLE,\n                     pub dwProcessId: DWORD,\n@@ -1557,7 +1563,7 @@ pub mod types {\n                 pub type LPPROCESS_INFORMATION = *mut PROCESS_INFORMATION;\n \n                 #[repr(C)]\n-                pub struct SYSTEM_INFO {\n+                #[deriving(Copy)] pub struct SYSTEM_INFO {\n                     pub wProcessorArchitecture: WORD,\n                     pub wReserved: WORD,\n                     pub dwPageSize: DWORD,\n@@ -1573,7 +1579,7 @@ pub mod types {\n                 pub type LPSYSTEM_INFO = *mut SYSTEM_INFO;\n \n                 #[repr(C)]\n-                pub struct MEMORY_BASIC_INFORMATION {\n+                #[deriving(Copy)] pub struct MEMORY_BASIC_INFORMATION {\n                     pub BaseAddress: LPVOID,\n                     pub AllocationBase: LPVOID,\n                     pub AllocationProtect: DWORD,\n@@ -1585,7 +1591,7 @@ pub mod types {\n                 pub type LPMEMORY_BASIC_INFORMATION = *mut MEMORY_BASIC_INFORMATION;\n \n                 #[repr(C)]\n-                pub struct OVERLAPPED {\n+                #[deriving(Copy)] pub struct OVERLAPPED {\n                     pub Internal: *mut c_ulong,\n                     pub InternalHigh: *mut c_ulong,\n                     pub Offset: DWORD,\n@@ -1596,31 +1602,31 @@ pub mod types {\n                 pub type LPOVERLAPPED = *mut OVERLAPPED;\n \n                 #[repr(C)]\n-                pub struct FILETIME {\n+                #[deriving(Copy)] pub struct FILETIME {\n                     pub dwLowDateTime: DWORD,\n                     pub dwHighDateTime: DWORD,\n                 }\n \n                 pub type LPFILETIME = *mut FILETIME;\n \n                 #[repr(C)]\n-                pub struct GUID {\n+                #[deriving(Copy)] pub struct GUID {\n                     pub Data1: DWORD,\n                     pub Data2: WORD,\n                     pub Data3: WORD,\n                     pub Data4: [BYTE, ..8],\n                 }\n \n                 #[repr(C)]\n-                pub struct WSAPROTOCOLCHAIN {\n+                #[deriving(Copy)] pub struct WSAPROTOCOLCHAIN {\n                     pub ChainLen: c_int,\n                     pub ChainEntries: [DWORD, ..MAX_PROTOCOL_CHAIN as uint],\n                 }\n \n                 pub type LPWSAPROTOCOLCHAIN = *mut WSAPROTOCOLCHAIN;\n \n                 #[repr(C)]\n-                pub struct WSAPROTOCOL_INFO {\n+                #[deriving(Copy)] pub struct WSAPROTOCOL_INFO {\n                     pub dwServiceFlags1: DWORD,\n                     pub dwServiceFlags2: DWORD,\n                     pub dwServiceFlags3: DWORD,\n@@ -1648,7 +1654,7 @@ pub mod types {\n                 pub type GROUP = c_uint;\n \n                 #[repr(C)]\n-                pub struct WIN32_FIND_DATAW {\n+                #[deriving(Copy)] pub struct WIN32_FIND_DATAW {\n                     pub dwFileAttributes: DWORD,\n                     pub ftCreationTime: FILETIME,\n                     pub ftLastAccessTime: FILETIME,\n@@ -1671,14 +1677,14 @@ pub mod types {\n         pub mod common {\n             pub mod posix01 {\n                 use types::common::c95::c_void;\n-                use types::os::arch::c95::{c_char, c_int, size_t,\n-                                                 time_t, suseconds_t, c_long};\n+                use types::os::arch::c95::{c_char, c_int, size_t, time_t};\n+                use types::os::arch::c95::{suseconds_t, c_long};\n                 use types::os::arch::c99::{uintptr_t};\n \n                 pub type pthread_t = uintptr_t;\n \n                 #[repr(C)]\n-                pub struct glob_t {\n+                #[deriving(Copy)] pub struct glob_t {\n                     pub gl_pathc:  size_t,\n                     pub __unused1: c_int,\n                     pub gl_offs:   size_t,\n@@ -1695,18 +1701,18 @@ pub mod types {\n                 }\n \n                 #[repr(C)]\n-                pub struct timeval {\n+                #[deriving(Copy)] pub struct timeval {\n                     pub tv_sec: time_t,\n                     pub tv_usec: suseconds_t,\n                 }\n \n                 #[repr(C)]\n-                pub struct timespec {\n+                #[deriving(Copy)] pub struct timespec {\n                     pub tv_sec: time_t,\n                     pub tv_nsec: c_long,\n                 }\n \n-                pub enum timezone {}\n+                #[deriving(Copy)] pub enum timezone {}\n \n                 pub type sighandler_t = size_t;\n             }\n@@ -1720,56 +1726,64 @@ pub mod types {\n                 pub type in_port_t = u16;\n                 pub type in_addr_t = u32;\n                 #[repr(C)]\n-                pub struct sockaddr {\n+                #[deriving(Copy)] pub struct sockaddr {\n                     pub sa_len: u8,\n                     pub sa_family: sa_family_t,\n                     pub sa_data: [u8, ..14],\n                 }\n+\n                 #[repr(C)]\n-                pub struct sockaddr_storage {\n+                #[deriving(Copy)] pub struct sockaddr_storage {\n                     pub ss_len: u8,\n                     pub ss_family: sa_family_t,\n                     pub __ss_pad1: [u8, ..6],\n                     pub __ss_align: i64,\n                     pub __ss_pad2: [u8, ..112],\n                 }\n+\n                 #[repr(C)]\n-                pub struct sockaddr_in {\n+                #[deriving(Copy)] pub struct sockaddr_in {\n                     pub sin_len: u8,\n                     pub sin_family: sa_family_t,\n                     pub sin_port: in_port_t,\n                     pub sin_addr: in_addr,\n                     pub sin_zero: [u8, ..8],\n                 }\n+\n                 #[repr(C)]\n-                pub struct in_addr {\n+                #[deriving(Copy)] pub struct in_addr {\n                     pub s_addr: in_addr_t,\n                 }\n+\n                 #[repr(C)]\n-                pub struct sockaddr_in6 {\n+                #[deriving(Copy)] pub struct sockaddr_in6 {\n                     pub sin6_len: u8,\n                     pub sin6_family: sa_family_t,\n                     pub sin6_port: in_port_t,\n                     pub sin6_flowinfo: u32,\n                     pub sin6_addr: in6_addr,\n                     pub sin6_scope_id: u32,\n                 }\n+\n                 #[repr(C)]\n-                pub struct in6_addr {\n+                #[deriving(Copy)] pub struct in6_addr {\n                     pub s6_addr: [u16, ..8]\n                 }\n+\n                 #[repr(C)]\n-                pub struct ip_mreq {\n+                #[deriving(Copy)] pub struct ip_mreq {\n                     pub imr_multiaddr: in_addr,\n                     pub imr_interface: in_addr,\n                 }\n+\n                 #[repr(C)]\n-                pub struct ip6_mreq {\n+                #[deriving(Copy)] pub struct ip6_mreq {\n                     pub ipv6mr_multiaddr: in6_addr,\n                     pub ipv6mr_interface: c_uint,\n                 }\n+\n                 #[repr(C)]\n-                pub struct addrinfo {\n+                #[deriving(Copy)] pub struct addrinfo {\n                     pub ai_flags: c_int,\n                     pub ai_family: c_int,\n                     pub ai_socktype: c_int,\n@@ -1779,14 +1793,16 @@ pub mod types {\n                     pub ai_addr: *mut sockaddr,\n                     pub ai_next: *mut addrinfo,\n                 }\n+\n                 #[repr(C)]\n-                pub struct sockaddr_un {\n+                #[deriving(Copy)] pub struct sockaddr_un {\n                     pub sun_len: u8,\n                     pub sun_family: sa_family_t,\n                     pub sun_path: [c_char, ..104]\n                 }\n+\n                 #[repr(C)]\n-                pub struct ifaddrs {\n+                #[deriving(Copy)] pub struct ifaddrs {\n                     pub ifa_next: *mut ifaddrs,\n                     pub ifa_name: *mut c_char,\n                     pub ifa_flags: c_uint,\n@@ -1849,7 +1865,7 @@ pub mod types {\n                 pub type blkcnt_t = i32;\n \n                 #[repr(C)]\n-                pub struct stat {\n+                #[deriving(Copy)] pub struct stat {\n                     pub st_dev: dev_t,\n                     pub st_mode: mode_t,\n                     pub st_nlink: nlink_t,\n@@ -1875,13 +1891,13 @@ pub mod types {\n                 }\n \n                 #[repr(C)]\n-                pub struct utimbuf {\n+                #[deriving(Copy)] pub struct utimbuf {\n                     pub actime: time_t,\n                     pub modtime: time_t,\n                 }\n \n                 #[repr(C)]\n-                pub struct pthread_attr_t {\n+                #[deriving(Copy)] pub struct pthread_attr_t {\n                     pub __sig: c_long,\n                     pub __opaque: [c_char, ..36]\n                 }\n@@ -1892,7 +1908,7 @@ pub mod types {\n             }\n             pub mod extra {\n                 #[repr(C)]\n-                pub struct mach_timebase_info {\n+                #[deriving(Copy)] pub struct mach_timebase_info {\n                     pub numer: u32,\n                     pub denom: u32,\n                 }\n@@ -1953,7 +1969,7 @@ pub mod types {\n                 pub type blkcnt_t = i32;\n \n                 #[repr(C)]\n-                pub struct stat {\n+                #[deriving(Copy)] pub struct stat {\n                     pub st_dev: dev_t,\n                     pub st_mode: mode_t,\n                     pub st_nlink: nlink_t,\n@@ -1979,13 +1995,13 @@ pub mod types {\n                 }\n \n                 #[repr(C)]\n-                pub struct utimbuf {\n+                #[deriving(Copy)] pub struct utimbuf {\n                     pub actime: time_t,\n                     pub modtime: time_t,\n                 }\n \n                 #[repr(C)]\n-                pub struct pthread_attr_t {\n+                #[deriving(Copy)] pub struct pthread_attr_t {\n                     pub __sig: c_long,\n                     pub __opaque: [c_char, ..56]\n                 }\n@@ -1996,7 +2012,7 @@ pub mod types {\n             }\n             pub mod extra {\n                 #[repr(C)]\n-                pub struct mach_timebase_info {\n+                #[deriving(Copy)] pub struct mach_timebase_info {\n                     pub numer: u32,\n                     pub denom: u32,\n                 }\n@@ -4990,3 +5006,9 @@ pub mod funcs {\n pub fn issue_14344_workaround() {} // FIXME #14344 force linkage to happen correctly\n \n #[test] fn work_on_windows() { } // FIXME #10872 needed for a happy windows\n+\n+#[doc(hidden)]\n+#[cfg(not(test))]\n+mod std {\n+    pub use core::kinds;\n+}"}, {"sha": "8b79078eac6ad1548f53f6434bf22588138ea30b", "filename": "src/liblog/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Fliblog%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Fliblog%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblog%2Flib.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -234,6 +234,8 @@ struct DefaultLogger {\n #[deriving(PartialEq, PartialOrd)]\n pub struct LogLevel(pub u32);\n \n+impl Copy for LogLevel {}\n+\n impl fmt::Show for LogLevel {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n         let LogLevel(level) = *self;\n@@ -344,6 +346,8 @@ pub struct LogLocation {\n     pub line: uint,\n }\n \n+impl Copy for LogLocation {}\n+\n /// Tests whether a given module's name is enabled for a particular level of\n /// logging. This is the second layer of defense about determining whether a\n /// module's log statement should be emitted or not."}, {"sha": "83a410674eefa3c3ca65002d0679929374a24abf", "filename": "src/librand/chacha.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrand%2Fchacha.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrand%2Fchacha.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fchacha.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -35,6 +35,8 @@ pub struct ChaChaRng {\n     index:   uint,                 // Index into state\n }\n \n+impl Copy for ChaChaRng {}\n+\n static EMPTY: ChaChaRng = ChaChaRng {\n     buffer:  [0, ..STATE_WORDS],\n     state:   [0, ..STATE_WORDS],"}, {"sha": "9a9f31e9339c8e5240c693ab07e8320e8228f0a4", "filename": "src/librand/distributions/exponential.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrand%2Fdistributions%2Fexponential.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrand%2Fdistributions%2Fexponential.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fexponential.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -10,6 +10,7 @@\n \n //! The exponential distribution.\n \n+use core::kinds::Copy;\n use core::num::Float;\n \n use {Rng, Rand};\n@@ -31,6 +32,8 @@ use distributions::{ziggurat, ziggurat_tables, Sample, IndependentSample};\n /// College, Oxford\n pub struct Exp1(pub f64);\n \n+impl Copy for Exp1 {}\n+\n // This could be done via `-rng.gen::<f64>().ln()` but that is slower.\n impl Rand for Exp1 {\n     #[inline]\n@@ -71,6 +74,8 @@ pub struct Exp {\n     lambda_inverse: f64\n }\n \n+impl Copy for Exp {}\n+\n impl Exp {\n     /// Construct a new `Exp` with the given shape parameter\n     /// `lambda`. Panics if `lambda <= 0`."}, {"sha": "f5261f1db82ee7b7ca08ea03e8539fa29aa0beec", "filename": "src/librand/distributions/normal.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrand%2Fdistributions%2Fnormal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrand%2Fdistributions%2Fnormal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fnormal.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -10,6 +10,7 @@\n \n //! The normal and derived distributions.\n \n+use core::kinds::Copy;\n use core::num::Float;\n \n use {Rng, Rand, Open01};\n@@ -30,6 +31,8 @@ use distributions::{ziggurat, ziggurat_tables, Sample, IndependentSample};\n /// College, Oxford\n pub struct StandardNormal(pub f64);\n \n+impl Copy for StandardNormal {}\n+\n impl Rand for StandardNormal {\n     fn rand<R:Rng>(rng: &mut R) -> StandardNormal {\n         #[inline]\n@@ -88,6 +91,8 @@ pub struct Normal {\n     std_dev: f64,\n }\n \n+impl Copy for Normal {}\n+\n impl Normal {\n     /// Construct a new `Normal` distribution with the given mean and\n     /// standard deviation.\n@@ -134,6 +139,8 @@ pub struct LogNormal {\n     norm: Normal\n }\n \n+impl Copy for LogNormal {}\n+\n impl LogNormal {\n     /// Construct a new `LogNormal` distribution with the given mean\n     /// and standard deviation."}, {"sha": "2c1853b195151a2214c8536255fa3d85f8708212", "filename": "src/librand/isaac.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrand%2Fisaac.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrand%2Fisaac.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fisaac.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -37,6 +37,9 @@ pub struct IsaacRng {\n     b: u32,\n     c: u32\n }\n+\n+impl Copy for IsaacRng {}\n+\n static EMPTY: IsaacRng = IsaacRng {\n     cnt: 0,\n     rsl: [0, ..RAND_SIZE_UINT],\n@@ -271,6 +274,8 @@ pub struct Isaac64Rng {\n     c: u64,\n }\n \n+impl Copy for Isaac64Rng {}\n+\n static EMPTY_64: Isaac64Rng = Isaac64Rng {\n     cnt: 0,\n     rsl: [0, .. RAND_SIZE_64],"}, {"sha": "d357f247f1b74eb68a66329e68282ab5234bb06d", "filename": "src/librand/lib.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrand%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrand%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Flib.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -377,13 +377,25 @@ pub trait SeedableRng<Seed>: Rng {\n /// [1]: Marsaglia, George (July 2003). [\"Xorshift\n /// RNGs\"](http://www.jstatsoft.org/v08/i14/paper). *Journal of\n /// Statistical Software*. Vol. 8 (Issue 14).\n+#[allow(missing_copy_implementations)]\n pub struct XorShiftRng {\n     x: u32,\n     y: u32,\n     z: u32,\n     w: u32,\n }\n \n+impl Clone for XorShiftRng {\n+    fn clone(&self) -> XorShiftRng {\n+        XorShiftRng {\n+            x: self.x,\n+            y: self.y,\n+            z: self.z,\n+            w: self.w,\n+        }\n+    }\n+}\n+\n impl XorShiftRng {\n     /// Creates a new XorShiftRng instance which is not seeded.\n     ///"}, {"sha": "88c870579e69002d40fe8fe3f0db849fa5ee1e4d", "filename": "src/librand/reseeding.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrand%2Freseeding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrand%2Freseeding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Freseeding.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -135,6 +135,8 @@ pub trait Reseeder<R> {\n /// replacing the RNG with the result of a `Default::default` call.\n pub struct ReseedWithDefault;\n \n+impl Copy for ReseedWithDefault {}\n+\n impl<R: Rng + Default> Reseeder<R> for ReseedWithDefault {\n     fn reseed(&mut self, rng: &mut R) {\n         *rng = Default::default();"}, {"sha": "426a987d25d1c535165da970919eadc4e602c744", "filename": "src/librbml/lib.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrbml%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrbml%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrbml%2Flib.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -47,6 +47,8 @@ pub struct Doc<'a> {\n     pub end: uint,\n }\n \n+impl<'doc> Copy for Doc<'doc> {}\n+\n impl<'doc> Doc<'doc> {\n     pub fn new(data: &'doc [u8]) -> Doc<'doc> {\n         Doc { data: data, start: 0u, end: data.len() }\n@@ -104,6 +106,8 @@ pub enum EbmlEncoderTag {\n     EsLabel, // Used only when debugging\n }\n \n+impl Copy for EbmlEncoderTag {}\n+\n #[deriving(Show)]\n pub enum Error {\n     IntTooBig(uint),\n@@ -151,6 +155,8 @@ pub mod reader {\n         pub next: uint\n     }\n \n+    impl Copy for Res {}\n+\n     #[inline(never)]\n     fn vuint_at_slow(data: &[u8], start: uint) -> DecodeResult<Res> {\n         let a = data[start];"}, {"sha": "55e533aadee7ffc913f789f52570c2eacc872846", "filename": "src/libregex/parse.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibregex%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibregex%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibregex%2Fparse.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -83,6 +83,8 @@ pub enum Greed {\n     Ungreedy,\n }\n \n+impl Copy for Greed {}\n+\n impl Greed {\n     pub fn is_greedy(&self) -> bool {\n         match *self {"}, {"sha": "2a1fda06431c896944b9f40784fd6fae97cc896a", "filename": "src/libregex/re.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibregex%2Fre.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibregex%2Fre.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibregex%2Fre.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -135,8 +135,12 @@ pub struct ExNative {\n     pub prog: fn(MatchKind, &str, uint, uint) -> Vec<Option<uint>>\n }\n \n+impl Copy for ExNative {}\n+\n impl Clone for ExNative {\n-    fn clone(&self) -> ExNative { *self }\n+    fn clone(&self) -> ExNative {\n+        *self\n+    }\n }\n \n impl fmt::Show for Regex {\n@@ -917,7 +921,7 @@ fn exec_slice(re: &Regex, which: MatchKind,\n               input: &str, s: uint, e: uint) -> CaptureLocs {\n     match *re {\n         Dynamic(ExDynamic { ref prog, .. }) => vm::run(which, prog, input, s, e),\n-        Native(ExNative { prog, .. }) => prog(which, input, s, e),\n+        Native(ExNative { ref prog, .. }) => (*prog)(which, input, s, e),\n     }\n }\n "}, {"sha": "44cf2249b8e9b836f7e7cd126e8f97592416584e", "filename": "src/libregex/vm.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibregex%2Fvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibregex%2Fvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibregex%2Fvm.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -60,6 +60,8 @@ pub enum MatchKind {\n     Submatches,\n }\n \n+impl Copy for MatchKind {}\n+\n /// Runs an NFA simulation on the compiled expression given on the search text\n /// `input`. The search begins at byte index `start` and ends at byte index\n /// `end`. (The range is specified here so that zero-width assertions will work\n@@ -107,6 +109,8 @@ pub enum StepState {\n     StepContinue,\n }\n \n+impl Copy for StepState {}\n+\n impl<'r, 't> Nfa<'r, 't> {\n     fn run(&mut self) -> CaptureLocs {\n         let ncaps = match self.which {"}, {"sha": "e19fa01b2e4e88866385374969884ef4d648bd6f", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 101, "deletions": 1, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -28,6 +28,7 @@ use self::MethodContext::*;\n \n use metadata::csearch;\n use middle::def::*;\n+use middle::subst::Substs;\n use middle::ty::{mod, Ty};\n use middle::{def, pat_util, stability};\n use middle::const_eval::{eval_const_expr_partial, const_int, const_uint};\n@@ -40,11 +41,12 @@ use std::collections::hash_map::{Occupied, Vacant};\n use std::num::SignedInt;\n use std::{i8, i16, i32, i64, u8, u16, u32, u64, f32, f64};\n use syntax::{abi, ast, ast_map};\n-use syntax::ast_util::{mod, is_shift_binop};\n+use syntax::ast_util::is_shift_binop;\n use syntax::attr::{mod, AttrMetaMethods};\n use syntax::codemap::{Span, DUMMY_SP};\n use syntax::parse::token;\n use syntax::ast::{TyI, TyU, TyI8, TyU8, TyI16, TyU16, TyI32, TyU32, TyI64, TyU64};\n+use syntax::ast_util;\n use syntax::ptr::P;\n use syntax::visit::{mod, Visitor};\n \n@@ -53,6 +55,8 @@ declare_lint!(WHILE_TRUE, Warn,\n \n pub struct WhileTrue;\n \n+impl Copy for WhileTrue {}\n+\n impl LintPass for WhileTrue {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(WHILE_TRUE)\n@@ -75,6 +79,8 @@ declare_lint!(UNUSED_TYPECASTS, Allow,\n \n pub struct UnusedCasts;\n \n+impl Copy for UnusedCasts {}\n+\n impl LintPass for UnusedCasts {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(UNUSED_TYPECASTS)\n@@ -107,6 +113,8 @@ pub struct TypeLimits {\n     negated_expr_id: ast::NodeId,\n }\n \n+impl Copy for TypeLimits {}\n+\n impl TypeLimits {\n     pub fn new() -> TypeLimits {\n         TypeLimits {\n@@ -415,6 +423,8 @@ impl<'a, 'tcx, 'v> Visitor<'v> for ImproperCTypesVisitor<'a, 'tcx> {\n \n pub struct ImproperCTypes;\n \n+impl Copy for ImproperCTypes {}\n+\n impl LintPass for ImproperCTypes {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(IMPROPER_CTYPES)\n@@ -454,6 +464,8 @@ declare_lint!(BOX_POINTERS, Allow,\n \n pub struct BoxPointers;\n \n+impl Copy for BoxPointers {}\n+\n impl BoxPointers {\n     fn check_heap_type<'a, 'tcx>(&self, cx: &Context<'a, 'tcx>,\n                                  span: Span, ty: Ty<'tcx>) {\n@@ -587,6 +599,8 @@ declare_lint!(UNUSED_ATTRIBUTES, Warn,\n \n pub struct UnusedAttributes;\n \n+impl Copy for UnusedAttributes {}\n+\n impl LintPass for UnusedAttributes {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(UNUSED_ATTRIBUTES)\n@@ -666,6 +680,8 @@ declare_lint!(pub PATH_STATEMENTS, Warn,\n \n pub struct PathStatements;\n \n+impl Copy for PathStatements {}\n+\n impl LintPass for PathStatements {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(PATH_STATEMENTS)\n@@ -693,6 +709,8 @@ declare_lint!(pub UNUSED_RESULTS, Allow,\n \n pub struct UnusedResults;\n \n+impl Copy for UnusedResults {}\n+\n impl LintPass for UnusedResults {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(UNUSED_MUST_USE, UNUSED_RESULTS)\n@@ -757,6 +775,8 @@ declare_lint!(pub NON_CAMEL_CASE_TYPES, Warn,\n \n pub struct NonCamelCaseTypes;\n \n+impl Copy for NonCamelCaseTypes {}\n+\n impl NonCamelCaseTypes {\n     fn check_case(&self, cx: &Context, sort: &str, ident: ast::Ident, span: Span) {\n         fn is_camel_case(ident: ast::Ident) -> bool {\n@@ -876,6 +896,8 @@ declare_lint!(pub NON_SNAKE_CASE, Warn,\n \n pub struct NonSnakeCase;\n \n+impl Copy for NonSnakeCase {}\n+\n impl NonSnakeCase {\n     fn check_snake_case(&self, cx: &Context, sort: &str, ident: ast::Ident, span: Span) {\n         fn is_snake_case(ident: ast::Ident) -> bool {\n@@ -985,6 +1007,8 @@ declare_lint!(pub NON_UPPER_CASE_GLOBALS, Warn,\n \n pub struct NonUpperCaseGlobals;\n \n+impl Copy for NonUpperCaseGlobals {}\n+\n impl LintPass for NonUpperCaseGlobals {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(NON_UPPER_CASE_GLOBALS)\n@@ -1034,6 +1058,8 @@ declare_lint!(UNUSED_PARENS, Warn,\n \n pub struct UnusedParens;\n \n+impl Copy for UnusedParens {}\n+\n impl UnusedParens {\n     fn check_unused_parens_core(&self, cx: &Context, value: &ast::Expr, msg: &str,\n                                      struct_lit_needs_parens: bool) {\n@@ -1124,6 +1150,8 @@ declare_lint!(UNUSED_IMPORT_BRACES, Allow,\n \n pub struct UnusedImportBraces;\n \n+impl Copy for UnusedImportBraces {}\n+\n impl LintPass for UnusedImportBraces {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(UNUSED_IMPORT_BRACES)\n@@ -1159,6 +1187,8 @@ declare_lint!(NON_SHORTHAND_FIELD_PATTERNS, Warn,\n \n pub struct NonShorthandFieldPatterns;\n \n+impl Copy for NonShorthandFieldPatterns {}\n+\n impl LintPass for NonShorthandFieldPatterns {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(NON_SHORTHAND_FIELD_PATTERNS)\n@@ -1188,6 +1218,8 @@ declare_lint!(pub UNUSED_UNSAFE, Warn,\n \n pub struct UnusedUnsafe;\n \n+impl Copy for UnusedUnsafe {}\n+\n impl LintPass for UnusedUnsafe {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(UNUSED_UNSAFE)\n@@ -1209,6 +1241,8 @@ declare_lint!(UNSAFE_BLOCKS, Allow,\n \n pub struct UnsafeBlocks;\n \n+impl Copy for UnsafeBlocks {}\n+\n impl LintPass for UnsafeBlocks {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(UNSAFE_BLOCKS)\n@@ -1229,6 +1263,8 @@ declare_lint!(pub UNUSED_MUT, Warn,\n \n pub struct UnusedMut;\n \n+impl Copy for UnusedMut {}\n+\n impl UnusedMut {\n     fn check_unused_mut_pat(&self, cx: &Context, pats: &[P<ast::Pat>]) {\n         // collect all mutable pattern and group their NodeIDs by their Identifier to\n@@ -1294,6 +1330,8 @@ declare_lint!(UNUSED_ALLOCATION, Warn,\n \n pub struct UnusedAllocation;\n \n+impl Copy for UnusedAllocation {}\n+\n impl LintPass for UnusedAllocation {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(UNUSED_ALLOCATION)\n@@ -1479,6 +1517,61 @@ impl LintPass for MissingDoc {\n     }\n }\n \n+pub struct MissingCopyImplementations;\n+\n+impl Copy for MissingCopyImplementations {}\n+\n+impl LintPass for MissingCopyImplementations {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(MISSING_COPY_IMPLEMENTATIONS)\n+    }\n+\n+    fn check_item(&mut self, cx: &Context, item: &ast::Item) {\n+        if !cx.exported_items.contains(&item.id) {\n+            return\n+        }\n+        if cx.tcx\n+             .destructor_for_type\n+             .borrow()\n+             .contains_key(&ast_util::local_def(item.id)) {\n+            return\n+        }\n+        let ty = match item.node {\n+            ast::ItemStruct(_, ref ast_generics) => {\n+                if ast_generics.is_parameterized() {\n+                    return\n+                }\n+                ty::mk_struct(cx.tcx,\n+                              ast_util::local_def(item.id),\n+                              Substs::empty())\n+            }\n+            ast::ItemEnum(_, ref ast_generics) => {\n+                if ast_generics.is_parameterized() {\n+                    return\n+                }\n+                ty::mk_enum(cx.tcx,\n+                            ast_util::local_def(item.id),\n+                            Substs::empty())\n+            }\n+            _ => return,\n+        };\n+        let parameter_environment = ty::empty_parameter_environment();\n+        if !ty::type_moves_by_default(cx.tcx,\n+                                      ty,\n+                                      &parameter_environment) {\n+            return\n+        }\n+        if ty::can_type_implement_copy(cx.tcx,\n+                                       ty,\n+                                       &parameter_environment).is_ok() {\n+            cx.span_lint(MISSING_COPY_IMPLEMENTATIONS,\n+                         item.span,\n+                         \"type could implement `Copy`; consider adding `impl \\\n+                          Copy`\")\n+        }\n+    }\n+}\n+\n declare_lint!(DEPRECATED, Warn,\n               \"detects use of #[deprecated] items\")\n \n@@ -1493,6 +1586,8 @@ declare_lint!(UNSTABLE, Allow,\n /// `#[unstable]` attributes, or no stability attribute.\n pub struct Stability;\n \n+impl Copy for Stability {}\n+\n impl Stability {\n     fn lint(&self, cx: &Context, id: ast::DefId, span: Span) {\n         let stability = stability::lookup(cx.tcx, id);\n@@ -1682,10 +1777,15 @@ declare_lint!(pub VARIANT_SIZE_DIFFERENCES, Allow,\n declare_lint!(pub FAT_PTR_TRANSMUTES, Allow,\n               \"detects transmutes of fat pointers\")\n \n+declare_lint!(pub MISSING_COPY_IMPLEMENTATIONS, Warn,\n+              \"detects potentially-forgotten implementations of `Copy`\")\n+\n /// Does nothing as a lint pass, but registers some `Lint`s\n /// which are used by other parts of the compiler.\n pub struct HardwiredLints;\n \n+impl Copy for HardwiredLints {}\n+\n impl LintPass for HardwiredLints {\n     fn get_lints(&self) -> LintArray {\n         lint_array!("}, {"sha": "153a00e56177637caf88b220f08747fbdccdc462", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -204,6 +204,7 @@ impl LintStore {\n                      UnusedMut,\n                      UnusedAllocation,\n                      Stability,\n+                     MissingCopyImplementations,\n         )\n \n         add_builtin_with_new!(sess,"}, {"sha": "4b4ba2ab94cd25a8e9d7e63fe92736233af32fd7", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -64,6 +64,8 @@ pub struct Lint {\n     pub desc: &'static str,\n }\n \n+impl Copy for Lint {}\n+\n impl Lint {\n     /// Get the lint's name, with ASCII letters converted to lowercase.\n     pub fn name_lower(&self) -> String {\n@@ -179,6 +181,8 @@ pub struct LintId {\n     lint: &'static Lint,\n }\n \n+impl Copy for LintId {}\n+\n impl PartialEq for LintId {\n     fn eq(&self, other: &LintId) -> bool {\n         (self.lint as *const Lint) == (other.lint as *const Lint)\n@@ -214,6 +218,8 @@ pub enum Level {\n     Allow, Warn, Deny, Forbid\n }\n \n+impl Copy for Level {}\n+\n impl Level {\n     /// Convert a level to a lower-case string.\n     pub fn as_str(self) -> &'static str {\n@@ -251,6 +257,8 @@ pub enum LintSource {\n     CommandLine,\n }\n \n+impl Copy for LintSource {}\n+\n pub type LevelSource = (Level, LintSource);\n \n pub mod builtin;"}, {"sha": "315e0eea9b763efe21221a80bb3716b6cbd11485", "filename": "src/librustc/metadata/common.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcommon.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -144,6 +144,8 @@ pub enum astencode_tag { // Reserves 0x40 -- 0x5f\n     tag_table_capture_modes = 0x56,\n     tag_table_object_cast_map = 0x57,\n }\n+\n+impl Copy for astencode_tag {}\n static first_astencode_tag: uint = tag_ast as uint;\n static last_astencode_tag: uint = tag_table_object_cast_map as uint;\n impl astencode_tag {"}, {"sha": "9e87153e64a1580d71faaf8dcb025a202a37e88f", "filename": "src/librustc/metadata/creader.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcreader.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -275,8 +275,10 @@ fn visit_item(e: &Env, i: &ast::Item) {\n     }\n }\n \n-fn register_native_lib(sess: &Session, span: Option<Span>, name: String,\n-                       kind: cstore::NativeLibaryKind) {\n+fn register_native_lib(sess: &Session,\n+                       span: Option<Span>,\n+                       name: String,\n+                       kind: cstore::NativeLibraryKind) {\n     if name.is_empty() {\n         match span {\n             Some(span) => {"}, {"sha": "b864dc39603644486733f83ab58570fc2a41a75d", "filename": "src/librustc/metadata/csearch.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcsearch.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -40,6 +40,8 @@ pub struct MethodInfo {\n     pub vis: ast::Visibility,\n }\n \n+impl Copy for MethodInfo {}\n+\n pub fn get_symbol(cstore: &cstore::CStore, def: ast::DefId) -> String {\n     let cdata = cstore.get_crate_data(def.krate);\n     decoder::get_symbol(cdata.data(), def.node)\n@@ -273,9 +275,8 @@ pub fn get_impl_vtables<'tcx>(tcx: &ty::ctxt<'tcx>,\n     decoder::get_impl_vtables(&*cdata, def.node, tcx)\n }\n \n-pub fn get_native_libraries(cstore: &cstore::CStore,\n-                            crate_num: ast::CrateNum)\n-                                -> Vec<(cstore::NativeLibaryKind, String)> {\n+pub fn get_native_libraries(cstore: &cstore::CStore, crate_num: ast::CrateNum)\n+                            -> Vec<(cstore::NativeLibraryKind, String)> {\n     let cdata = cstore.get_crate_data(crate_num);\n     decoder::get_native_libraries(&*cdata)\n }"}, {"sha": "91f360a7a38c8f1e06d46b9677ad9bf480b6c3bc", "filename": "src/librustc/metadata/cstore.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc%2Fmetadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc%2Fmetadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcstore.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -15,7 +15,7 @@\n \n pub use self::MetadataBlob::*;\n pub use self::LinkagePreference::*;\n-pub use self::NativeLibaryKind::*;\n+pub use self::NativeLibraryKind::*;\n \n use back::svh::Svh;\n use metadata::decoder;\n@@ -54,13 +54,17 @@ pub enum LinkagePreference {\n     RequireStatic,\n }\n \n-#[deriving(PartialEq, FromPrimitive, Clone)]\n-pub enum NativeLibaryKind {\n+impl Copy for LinkagePreference {}\n+\n+#[deriving(Clone, PartialEq, FromPrimitive)]\n+pub enum NativeLibraryKind {\n     NativeStatic,    // native static library (.a archive)\n     NativeFramework, // OSX-specific\n     NativeUnknown,   // default way to specify a dynamic library\n }\n \n+impl Copy for NativeLibraryKind {}\n+\n // Where a crate came from on the local filesystem. One of these two options\n // must be non-None.\n #[deriving(PartialEq, Clone)]\n@@ -75,7 +79,7 @@ pub struct CStore {\n     /// Map from NodeId's of local extern crate statements to crate numbers\n     extern_mod_crate_map: RefCell<NodeMap<ast::CrateNum>>,\n     used_crate_sources: RefCell<Vec<CrateSource>>,\n-    used_libraries: RefCell<Vec<(String, NativeLibaryKind)>>,\n+    used_libraries: RefCell<Vec<(String, NativeLibraryKind)>>,\n     used_link_args: RefCell<Vec<String>>,\n     pub intr: Rc<IdentInterner>,\n }\n@@ -186,13 +190,14 @@ impl CStore {\n         libs\n     }\n \n-    pub fn add_used_library(&self, lib: String, kind: NativeLibaryKind) {\n+    pub fn add_used_library(&self, lib: String, kind: NativeLibraryKind) {\n         assert!(!lib.is_empty());\n         self.used_libraries.borrow_mut().push((lib, kind));\n     }\n \n     pub fn get_used_libraries<'a>(&'a self)\n-                              -> &'a RefCell<Vec<(String, NativeLibaryKind)> > {\n+                              -> &'a RefCell<Vec<(String,\n+                                                  NativeLibraryKind)>> {\n         &self.used_libraries\n     }\n "}, {"sha": "0d51e044de9cc2015df1df1b944448b7de107ece", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -442,6 +442,8 @@ pub enum DefLike {\n     DlField\n }\n \n+impl Copy for DefLike {}\n+\n /// Iterates over the language items in the given crate.\n pub fn each_lang_item(cdata: Cmd, f: |ast::NodeId, uint| -> bool) -> bool {\n     let root = rbml::Doc::new(cdata.data());\n@@ -1267,14 +1269,14 @@ pub fn get_trait_of_item(cdata: Cmd, id: ast::NodeId, tcx: &ty::ctxt)\n \n \n pub fn get_native_libraries(cdata: Cmd)\n-                            -> Vec<(cstore::NativeLibaryKind, String)> {\n+                            -> Vec<(cstore::NativeLibraryKind, String)> {\n     let libraries = reader::get_doc(rbml::Doc::new(cdata.data()),\n                                     tag_native_libraries);\n     let mut result = Vec::new();\n     reader::tagged_docs(libraries, tag_native_libraries_lib, |lib_doc| {\n         let kind_doc = reader::get_doc(lib_doc, tag_native_libraries_kind);\n         let name_doc = reader::get_doc(lib_doc, tag_native_libraries_name);\n-        let kind: cstore::NativeLibaryKind =\n+        let kind: cstore::NativeLibraryKind =\n             FromPrimitive::from_u32(reader::doc_as_u32(kind_doc)).unwrap();\n         let name = name_doc.as_str().to_string();\n         result.push((kind, name));"}, {"sha": "2d23a61813a9c2a4d9223cf5cb468967c475218a", "filename": "src/librustc/metadata/filesearch.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -20,7 +20,12 @@ use std::os;\n \n use util::fs as myfs;\n \n-pub enum FileMatch { FileMatches, FileDoesntMatch }\n+pub enum FileMatch {\n+    FileMatches,\n+    FileDoesntMatch,\n+}\n+\n+impl Copy for FileMatch {}\n \n // A module for searching for libraries\n // FIXME (#2658): I'm not happy how this module turned out. Should"}, {"sha": "e29741fb4a1298d18df59ab82135958aabc6d983", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -61,6 +61,8 @@ pub enum DefIdSource {\n     // Identifies an unboxed closure\n     UnboxedClosureSource\n }\n+\n+impl Copy for DefIdSource {}\n pub type conv_did<'a> =\n     |source: DefIdSource, ast::DefId|: 'a -> ast::DefId;\n "}, {"sha": "5f030324d421e1fdf0efa587102e85b281c7a303", "filename": "src/librustc/middle/borrowck/check_loans.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -24,7 +24,9 @@ use middle::borrowck::LoanPathKind::*;\n use middle::expr_use_visitor as euv;\n use middle::mem_categorization as mc;\n use middle::region;\n+use middle::ty::ParameterEnvironment;\n use middle::ty;\n+use syntax::ast::NodeId;\n use syntax::ast;\n use syntax::codemap::Span;\n use util::ppaux::Repr;\n@@ -89,6 +91,7 @@ struct CheckLoanCtxt<'a, 'tcx: 'a> {\n     dfcx_loans: &'a LoanDataFlow<'a, 'tcx>,\n     move_data: move_data::FlowedMoveData<'a, 'tcx>,\n     all_loans: &'a [Loan<'tcx>],\n+    param_env: &'a ParameterEnvironment<'tcx>,\n }\n \n impl<'a, 'tcx> euv::Delegate<'tcx> for CheckLoanCtxt<'a, 'tcx> {\n@@ -193,19 +196,25 @@ pub fn check_loans<'a, 'b, 'c, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,\n                                      dfcx_loans: &LoanDataFlow<'b, 'tcx>,\n                                      move_data: move_data::FlowedMoveData<'c, 'tcx>,\n                                      all_loans: &[Loan<'tcx>],\n+                                     fn_id: NodeId,\n                                      decl: &ast::FnDecl,\n                                      body: &ast::Block) {\n     debug!(\"check_loans(body id={})\", body.id);\n \n+    let param_env = ParameterEnvironment::for_item(bccx.tcx, fn_id);\n+\n     let mut clcx = CheckLoanCtxt {\n         bccx: bccx,\n         dfcx_loans: dfcx_loans,\n         move_data: move_data,\n         all_loans: all_loans,\n+        param_env: &param_env,\n     };\n \n     {\n-        let mut euv = euv::ExprUseVisitor::new(&mut clcx, bccx.tcx);\n+        let mut euv = euv::ExprUseVisitor::new(&mut clcx,\n+                                               bccx.tcx,\n+                                               param_env.clone());\n         euv.walk_fn(decl, body);\n     }\n }\n@@ -700,7 +709,8 @@ impl<'a, 'tcx> CheckLoanCtxt<'a, 'tcx> {\n                 use_kind,\n                 &**lp,\n                 the_move,\n-                moved_lp);\n+                moved_lp,\n+                self.param_env);\n             false\n         });\n     }"}, {"sha": "ca9d4b512b301d5bb86b41367c8c1f7019187a2d", "filename": "src/librustc/middle/borrowck/gather_loans/mod.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -22,6 +22,7 @@ use middle::borrowck::move_data::MoveData;\n use middle::expr_use_visitor as euv;\n use middle::mem_categorization as mc;\n use middle::region;\n+use middle::ty::ParameterEnvironment;\n use middle::ty;\n use util::ppaux::{Repr};\n \n@@ -37,10 +38,11 @@ mod gather_moves;\n mod move_error;\n \n pub fn gather_loans_in_fn<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,\n+                                    fn_id: NodeId,\n                                     decl: &ast::FnDecl,\n                                     body: &ast::Block)\n-                                    -> (Vec<Loan<'tcx>>, move_data::MoveData<'tcx>)\n-{\n+                                    -> (Vec<Loan<'tcx>>,\n+                                        move_data::MoveData<'tcx>) {\n     let mut glcx = GatherLoanCtxt {\n         bccx: bccx,\n         all_loans: Vec::new(),\n@@ -49,8 +51,12 @@ pub fn gather_loans_in_fn<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,\n         move_error_collector: move_error::MoveErrorCollector::new(),\n     };\n \n+    let param_env = ParameterEnvironment::for_item(bccx.tcx, fn_id);\n+\n     {\n-        let mut euv = euv::ExprUseVisitor::new(&mut glcx, bccx.tcx);\n+        let mut euv = euv::ExprUseVisitor::new(&mut glcx,\n+                                               bccx.tcx,\n+                                               param_env);\n         euv.walk_fn(decl, body);\n     }\n "}, {"sha": "32fa5f8c3a9f2063767850031a69888bacbbb047", "filename": "src/librustc/middle/borrowck/graphviz.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgraphviz.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -34,6 +34,8 @@ pub enum Variant {\n     Assigns,\n }\n \n+impl Copy for Variant {}\n+\n impl Variant {\n     pub fn short_name(&self) -> &'static str {\n         match *self {"}, {"sha": "e90de1b69120453e797aa95b6c5cba86fbce2397", "filename": "src/librustc/middle/borrowck/mod.rs", "status": "modified", "additions": 28, "deletions": 9, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -25,7 +25,7 @@ use middle::dataflow::DataFlowOperator;\n use middle::expr_use_visitor as euv;\n use middle::mem_categorization as mc;\n use middle::region;\n-use middle::ty::{mod, Ty};\n+use middle::ty::{mod, ParameterEnvironment, Ty};\n use util::ppaux::{note_and_explain_region, Repr, UserString};\n \n use std::rc::Rc;\n@@ -62,6 +62,8 @@ pub mod move_data;\n #[deriving(Clone)]\n pub struct LoanDataFlowOperator;\n \n+impl Copy for LoanDataFlowOperator {}\n+\n pub type LoanDataFlow<'a, 'tcx> = DataFlowContext<'a, 'tcx, LoanDataFlowOperator>;\n \n impl<'a, 'tcx, 'v> Visitor<'v> for BorrowckCtxt<'a, 'tcx> {\n@@ -146,8 +148,13 @@ fn borrowck_fn(this: &mut BorrowckCtxt,\n     move_data::fragments::instrument_move_fragments(&flowed_moves.move_data,\n                                                     this.tcx, sp, id);\n \n-    check_loans::check_loans(this, &loan_dfcx, flowed_moves,\n-                             all_loans.as_slice(), decl, body);\n+    check_loans::check_loans(this,\n+                             &loan_dfcx,\n+                             flowed_moves,\n+                             all_loans.as_slice(),\n+                             id,\n+                             decl,\n+                             body);\n \n     visit::walk_fn(this, fk, decl, body, sp);\n }\n@@ -162,7 +169,7 @@ fn build_borrowck_dataflow_data<'a, 'tcx>(this: &mut BorrowckCtxt<'a, 'tcx>,\n     // Check the body of fn items.\n     let id_range = ast_util::compute_id_range_for_fn_body(fk, decl, body, sp, id);\n     let (all_loans, move_data) =\n-        gather_loans::gather_loans_in_fn(this, decl, body);\n+        gather_loans::gather_loans_in_fn(this, id, decl, body);\n \n     let mut loan_dfcx =\n         DataFlowContext::new(this.tcx,\n@@ -339,6 +346,8 @@ pub enum LoanPathElem {\n     LpInterior(mc::InteriorKind) // `LV.f` in doc.rs\n }\n \n+impl Copy for LoanPathElem {}\n+\n pub fn closure_to_block(closure_id: ast::NodeId,\n                         tcx: &ty::ctxt) -> ast::NodeId {\n     match tcx.map.get(closure_id) {\n@@ -484,6 +493,7 @@ pub fn opt_loan_path<'tcx>(cmt: &mc::cmt<'tcx>) -> Option<Rc<LoanPath<'tcx>>> {\n \n // Errors that can occur\n #[deriving(PartialEq)]\n+#[allow(missing_copy_implementations)]\n pub enum bckerr_code {\n     err_mutbl,\n     err_out_of_scope(ty::Region, ty::Region), // superscope, subscope\n@@ -505,12 +515,16 @@ pub enum AliasableViolationKind {\n     BorrowViolation(euv::LoanCause)\n }\n \n+impl Copy for AliasableViolationKind {}\n+\n #[deriving(Show)]\n pub enum MovedValueUseKind {\n     MovedInUse,\n     MovedInCapture,\n }\n \n+impl Copy for MovedValueUseKind {}\n+\n ///////////////////////////////////////////////////////////////////////////\n // Misc\n \n@@ -545,7 +559,8 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                                      use_kind: MovedValueUseKind,\n                                      lp: &LoanPath<'tcx>,\n                                      the_move: &move_data::Move,\n-                                     moved_lp: &LoanPath<'tcx>) {\n+                                     moved_lp: &LoanPath<'tcx>,\n+                                     param_env: &ParameterEnvironment<'tcx>) {\n         let verb = match use_kind {\n             MovedInUse => \"use\",\n             MovedInCapture => \"capture\",\n@@ -621,7 +636,7 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                                                   r).as_slice())\n                     }\n                 };\n-                let (suggestion, _) = move_suggestion(self.tcx, expr_ty,\n+                let (suggestion, _) = move_suggestion(self.tcx, param_env, expr_ty,\n                         (\"moved by default\", \"\"));\n                 self.tcx.sess.span_note(\n                     expr_span,\n@@ -659,7 +674,9 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                                                   r).as_slice())\n                     }\n                 };\n-                let (suggestion, help) = move_suggestion(self.tcx, expr_ty,\n+                let (suggestion, help) = move_suggestion(self.tcx,\n+                                                         param_env,\n+                                                         expr_ty,\n                         (\"moved by default\", \"make a copy and \\\n                          capture that instead to override\"));\n                 self.tcx.sess.span_note(\n@@ -674,7 +691,9 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n             }\n         }\n \n-        fn move_suggestion<'tcx>(tcx: &ty::ctxt<'tcx>, ty: Ty<'tcx>,\n+        fn move_suggestion<'tcx>(tcx: &ty::ctxt<'tcx>,\n+                                 param_env: &ty::ParameterEnvironment<'tcx>,\n+                                 ty: Ty<'tcx>,\n                                  default_msgs: (&'static str, &'static str))\n                                  -> (&'static str, &'static str) {\n             match ty.sty {\n@@ -684,7 +703,7 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                     }) =>\n                     (\"a non-copyable stack closure\",\n                      \"capture it in a new closure, e.g. `|x| f(x)`, to override\"),\n-                _ if ty::type_moves_by_default(tcx, ty) =>\n+                _ if ty::type_moves_by_default(tcx, ty, param_env) =>\n                     (\"non-copyable\",\n                      \"perhaps you meant to use `clone()`?\"),\n                 _ => default_msgs,"}, {"sha": "3bb6145c5ca34ad5634c183133eb808420166bcc", "filename": "src/librustc/middle/borrowck/move_data.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmove_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmove_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmove_data.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -81,6 +81,8 @@ pub struct FlowedMoveData<'a, 'tcx: 'a> {\n #[deriving(PartialEq, Eq, PartialOrd, Ord, Show)]\n pub struct MovePathIndex(uint);\n \n+impl Copy for MovePathIndex {}\n+\n impl MovePathIndex {\n     fn get(&self) -> uint {\n         let MovePathIndex(v) = *self; v\n@@ -101,6 +103,8 @@ static InvalidMovePathIndex: MovePathIndex =\n #[deriving(PartialEq)]\n pub struct MoveIndex(uint);\n \n+impl Copy for MoveIndex {}\n+\n impl MoveIndex {\n     fn get(&self) -> uint {\n         let MoveIndex(v) = *self; v\n@@ -138,6 +142,8 @@ pub enum MoveKind {\n     Captured    // Closure creation that moves a value\n }\n \n+impl Copy for MoveKind {}\n+\n pub struct Move {\n     /// Path being moved.\n     pub path: MovePathIndex,\n@@ -152,6 +158,8 @@ pub struct Move {\n     pub next_move: MoveIndex\n }\n \n+impl Copy for Move {}\n+\n pub struct Assignment {\n     /// Path being assigned.\n     pub path: MovePathIndex,\n@@ -163,6 +171,8 @@ pub struct Assignment {\n     pub span: Span,\n }\n \n+impl Copy for Assignment {}\n+\n pub struct VariantMatch {\n     /// downcast to the variant.\n     pub path: MovePathIndex,\n@@ -177,14 +187,20 @@ pub struct VariantMatch {\n     pub mode: euv::MatchMode\n }\n \n+impl Copy for VariantMatch {}\n+\n #[deriving(Clone)]\n pub struct MoveDataFlowOperator;\n \n+impl Copy for MoveDataFlowOperator {}\n+\n pub type MoveDataFlow<'a, 'tcx> = DataFlowContext<'a, 'tcx, MoveDataFlowOperator>;\n \n #[deriving(Clone)]\n pub struct AssignDataFlowOperator;\n \n+impl Copy for AssignDataFlowOperator {}\n+\n pub type AssignDataFlow<'a, 'tcx> = DataFlowContext<'a, 'tcx, AssignDataFlowOperator>;\n \n fn loan_path_is_precise(loan_path: &LoanPath) -> bool {"}, {"sha": "0dcb78f6bb04c3e7100deb322a1993f403a67a99", "filename": "src/librustc/middle/cfg/construct.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -32,6 +32,8 @@ struct LoopScope {\n     break_index: CFGIndex,    // where to go on a `break\n }\n \n+impl Copy for LoopScope {}\n+\n pub fn construct(tcx: &ty::ctxt,\n                  blk: &ast::Block) -> CFG {\n     let mut graph = graph::Graph::new();"}, {"sha": "bc512a73a4bd8af664038b90f72c71e8a28995b8", "filename": "src/librustc/middle/cfg/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc%2Fmiddle%2Fcfg%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc%2Fmiddle%2Fcfg%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcfg%2Fmod.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -30,6 +30,8 @@ pub struct CFGNodeData {\n     pub id: ast::NodeId\n }\n \n+impl Copy for CFGNodeData {}\n+\n pub struct CFGEdgeData {\n     pub exiting_scopes: Vec<ast::NodeId>\n }"}, {"sha": "eb073e07b02f1429eac02989b277867d3d89d1d9", "filename": "src/librustc/middle/check_loop.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc%2Fmiddle%2Fcheck_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc%2Fmiddle%2Fcheck_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_loop.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -21,11 +21,15 @@ enum Context {\n     Normal, Loop, Closure\n }\n \n+impl Copy for Context {}\n+\n struct CheckLoopVisitor<'a> {\n     sess: &'a Session,\n     cx: Context\n }\n \n+impl<'a> Copy for CheckLoopVisitor<'a> {}\n+\n pub fn check_crate(sess: &Session, krate: &ast::Crate) {\n     visit::walk_crate(&mut CheckLoopVisitor { sess: sess, cx: Normal }, krate)\n }"}, {"sha": "2c437ae046b46deee7f56efc4b3164e5c364dabb", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -99,7 +99,8 @@ impl<'a> FromIterator<Vec<&'a Pat>> for Matrix<'a> {\n }\n \n pub struct MatchCheckCtxt<'a, 'tcx: 'a> {\n-    pub tcx: &'a ty::ctxt<'tcx>\n+    pub tcx: &'a ty::ctxt<'tcx>,\n+    pub param_env: ParameterEnvironment<'tcx>,\n }\n \n #[deriving(Clone, PartialEq)]\n@@ -131,6 +132,8 @@ enum WitnessPreference {\n     LeaveOutWitness\n }\n \n+impl Copy for WitnessPreference {}\n+\n impl<'a, 'tcx, 'v> Visitor<'v> for MatchCheckCtxt<'a, 'tcx> {\n     fn visit_expr(&mut self, ex: &ast::Expr) {\n         check_expr(self, ex);\n@@ -145,7 +148,10 @@ impl<'a, 'tcx, 'v> Visitor<'v> for MatchCheckCtxt<'a, 'tcx> {\n }\n \n pub fn check_crate(tcx: &ty::ctxt) {\n-    visit::walk_crate(&mut MatchCheckCtxt { tcx: tcx }, tcx.map.krate());\n+    visit::walk_crate(&mut MatchCheckCtxt {\n+        tcx: tcx,\n+        param_env: ty::empty_parameter_environment(),\n+    }, tcx.map.krate());\n     tcx.sess.abort_if_errors();\n }\n \n@@ -954,8 +960,14 @@ fn check_fn(cx: &mut MatchCheckCtxt,\n             decl: &ast::FnDecl,\n             body: &ast::Block,\n             sp: Span,\n-            _: NodeId) {\n+            fn_id: NodeId) {\n+    match kind {\n+        visit::FkFnBlock => {}\n+        _ => cx.param_env = ParameterEnvironment::for_item(cx.tcx, fn_id),\n+    }\n+\n     visit::walk_fn(cx, kind, decl, body, sp);\n+\n     for input in decl.inputs.iter() {\n         is_refutable(cx, &*input.pat, |pat| {\n             span_err!(cx.tcx.sess, input.pat.span, E0006,\n@@ -1020,7 +1032,9 @@ fn check_legality_of_move_bindings(cx: &MatchCheckCtxt,\n                 match p.node {\n                     ast::PatIdent(ast::BindByValue(_), _, ref sub) => {\n                         let pat_ty = ty::node_id_to_type(tcx, p.id);\n-                        if ty::type_moves_by_default(tcx, pat_ty) {\n+                        if ty::type_moves_by_default(tcx,\n+                                                      pat_ty,\n+                                                      &cx.param_env) {\n                             check_move(p, sub.as_ref().map(|p| &**p));\n                         }\n                     }\n@@ -1048,7 +1062,9 @@ fn check_for_mutation_in_guard<'a, 'tcx>(cx: &'a MatchCheckCtxt<'a, 'tcx>,\n     let mut checker = MutationChecker {\n         cx: cx,\n     };\n-    let mut visitor = ExprUseVisitor::new(&mut checker, checker.cx.tcx);\n+    let mut visitor = ExprUseVisitor::new(&mut checker,\n+                                          checker.cx.tcx,\n+                                          cx.param_env.clone());\n     visitor.walk_expr(guard);\n }\n "}, {"sha": "a14307b90ee837f21677e48f508a9fa1f7e3784b", "filename": "src/librustc/middle/check_rvalues.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc%2Fmiddle%2Fcheck_rvalues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc%2Fmiddle%2Fcheck_rvalues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_rvalues.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -13,6 +13,7 @@\n \n use middle::expr_use_visitor as euv;\n use middle::mem_categorization as mc;\n+use middle::ty::ParameterEnvironment;\n use middle::ty;\n use util::ppaux::ty_to_string;\n \n@@ -36,9 +37,10 @@ impl<'a, 'tcx, 'v> visit::Visitor<'v> for RvalueContext<'a, 'tcx> {\n                 fd: &'v ast::FnDecl,\n                 b: &'v ast::Block,\n                 s: Span,\n-                _: ast::NodeId) {\n+                fn_id: ast::NodeId) {\n         {\n-            let mut euv = euv::ExprUseVisitor::new(self, self.tcx);\n+            let param_env = ParameterEnvironment::for_item(self.tcx, fn_id);\n+            let mut euv = euv::ExprUseVisitor::new(self, self.tcx, param_env);\n             euv.walk_fn(fd, b);\n         }\n         visit::walk_fn(self, fk, fd, b, s)"}, {"sha": "a495d1e049d17601ac8386d4983d27de20dbfe6d", "filename": "src/librustc/middle/check_static.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc%2Fmiddle%2Fcheck_static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc%2Fmiddle%2Fcheck_static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_static.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -47,13 +47,16 @@ enum Mode {\n     InNothing,\n }\n \n+impl Copy for Mode {}\n+\n struct CheckStaticVisitor<'a, 'tcx: 'a> {\n     tcx: &'a ty::ctxt<'tcx>,\n     mode: Mode,\n     checker: &'a mut GlobalChecker,\n }\n \n-struct GlobalVisitor<'a, 'b, 'tcx: 'b>(euv::ExprUseVisitor<'a, 'b, 'tcx, ty::ctxt<'tcx>>);\n+struct GlobalVisitor<'a,'b,'tcx:'a+'b>(\n+    euv::ExprUseVisitor<'a,'b,'tcx,ty::ctxt<'tcx>>);\n struct GlobalChecker {\n     static_consumptions: NodeSet,\n     const_borrows: NodeSet,\n@@ -69,7 +72,8 @@ pub fn check_crate(tcx: &ty::ctxt) {\n         static_local_borrows: NodeSet::new(),\n     };\n     {\n-        let visitor = euv::ExprUseVisitor::new(&mut checker, tcx);\n+        let param_env = ty::empty_parameter_environment();\n+        let visitor = euv::ExprUseVisitor::new(&mut checker, tcx, param_env);\n         visit::walk_crate(&mut GlobalVisitor(visitor), tcx.map.krate());\n     }\n     visit::walk_crate(&mut CheckStaticVisitor {\n@@ -242,7 +246,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for CheckStaticVisitor<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'b, 't, 'v> Visitor<'v> for GlobalVisitor<'a, 'b, 't> {\n+impl<'a,'b,'t,'v> Visitor<'v> for GlobalVisitor<'a,'b,'t> {\n     fn visit_item(&mut self, item: &ast::Item) {\n         match item.node {\n             ast::ItemConst(_, ref e) |"}, {"sha": "150bcbdd6886783fdb14aca98e8c95f086ce803c", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -68,6 +68,8 @@ pub enum constness {\n     non_const\n }\n \n+impl Copy for constness {}\n+\n type constness_cache = DefIdMap<constness>;\n \n pub fn join(a: constness, b: constness) -> constness {"}, {"sha": "db8fd999f380bb605ae596189e46aadd3891d48b", "filename": "src/librustc/middle/dataflow.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdataflow.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -28,7 +28,12 @@ use syntax::print::{pp, pprust};\n use util::nodemap::NodeMap;\n \n #[deriving(Show)]\n-pub enum EntryOrExit { Entry, Exit }\n+pub enum EntryOrExit {\n+    Entry,\n+    Exit,\n+}\n+\n+impl Copy for EntryOrExit {}\n \n #[deriving(Clone)]\n pub struct DataFlowContext<'a, 'tcx: 'a, O> {"}, {"sha": "b3e4dd25adc7aaa78a0e6956dd85c7d5bd8c4b1c", "filename": "src/librustc/middle/def.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc%2Fmiddle%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc%2Fmiddle%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdef.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -52,6 +52,8 @@ pub enum Def {\n     DefMethod(ast::DefId /* method */, Option<ast::DefId> /* trait */, MethodProvenance),\n }\n \n+impl Copy for Def {}\n+\n #[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub enum MethodProvenance {\n     FromTrait(ast::DefId),\n@@ -67,6 +69,8 @@ impl MethodProvenance {\n     }\n }\n \n+impl Copy for MethodProvenance {}\n+\n impl Def {\n     pub fn def_id(&self) -> ast::DefId {\n         match *self {"}, {"sha": "8bf43c70c26d91cac9af4cb4cf39c6dd4b2ea2db", "filename": "src/librustc/middle/effect.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc%2Fmiddle%2Feffect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc%2Fmiddle%2Feffect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Feffect.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -30,6 +30,8 @@ enum UnsafeContext {\n     UnsafeBlock(ast::NodeId),\n }\n \n+impl Copy for UnsafeContext {}\n+\n fn type_is_unsafe_function(ty: Ty) -> bool {\n     match ty.sty {\n         ty::ty_bare_fn(ref f) => f.fn_style == ast::UnsafeFn,"}, {"sha": "8e00c96535b1e2c79a54db5491c85753f4ddcde0", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 55, "deletions": 14, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -23,12 +23,13 @@ use self::OverloadedCallType::*;\n use middle::{def, region, pat_util};\n use middle::mem_categorization as mc;\n use middle::mem_categorization::Typer;\n-use middle::ty::{mod, Ty};\n+use middle::ty::{mod, ParameterEnvironment, Ty};\n use middle::ty::{MethodCall, MethodObject, MethodTraitObject};\n use middle::ty::{MethodOrigin, MethodParam, MethodTypeParam};\n use middle::ty::{MethodStatic, MethodStaticUnboxedClosure};\n use util::ppaux::Repr;\n \n+use std::kinds;\n use syntax::ast;\n use syntax::ptr::P;\n use syntax::codemap::Span;\n@@ -106,19 +107,25 @@ pub enum LoanCause {\n     MatchDiscriminant\n }\n \n+impl kinds::Copy for LoanCause {}\n+\n #[deriving(PartialEq, Show)]\n pub enum ConsumeMode {\n     Copy,                // reference to x where x has a type that copies\n     Move(MoveReason),    // reference to x where x has a type that moves\n }\n \n+impl kinds::Copy for ConsumeMode {}\n+\n #[deriving(PartialEq,Show)]\n pub enum MoveReason {\n     DirectRefMove,\n     PatBindingMove,\n     CaptureMove,\n }\n \n+impl kinds::Copy for MoveReason {}\n+\n #[deriving(PartialEq,Show)]\n pub enum MatchMode {\n     NonBindingMatch,\n@@ -127,11 +134,17 @@ pub enum MatchMode {\n     MovingMatch,\n }\n \n+impl kinds::Copy for MatchMode {}\n+\n #[deriving(PartialEq,Show)]\n enum TrackMatchMode<T> {\n-    Unknown, Definite(MatchMode), Conflicting,\n+    Unknown,\n+    Definite(MatchMode),\n+    Conflicting,\n }\n \n+impl<T> kinds::Copy for TrackMatchMode<T> {}\n+\n impl<T> TrackMatchMode<T> {\n     // Builds up the whole match mode for a pattern from its constituent\n     // parts.  The lattice looks like this:\n@@ -199,12 +212,16 @@ pub enum MutateMode {\n     WriteAndRead, // x += y\n }\n \n+impl kinds::Copy for MutateMode {}\n+\n enum OverloadedCallType {\n     FnOverloadedCall,\n     FnMutOverloadedCall,\n     FnOnceOverloadedCall,\n }\n \n+impl kinds::Copy for OverloadedCallType {}\n+\n impl OverloadedCallType {\n     fn from_trait_id(tcx: &ty::ctxt, trait_id: ast::DefId)\n                      -> OverloadedCallType {\n@@ -293,6 +310,7 @@ pub struct ExprUseVisitor<'d,'t,'tcx,TYPER:'t> {\n     typer: &'t TYPER,\n     mc: mc::MemCategorizationContext<'t,TYPER>,\n     delegate: &'d mut (Delegate<'tcx>+'d),\n+    param_env: ParameterEnvironment<'tcx>,\n }\n \n // If the TYPER results in an error, it's because the type check\n@@ -313,11 +331,15 @@ macro_rules! return_if_err(\n \n impl<'d,'t,'tcx,TYPER:mc::Typer<'tcx>> ExprUseVisitor<'d,'t,'tcx,TYPER> {\n     pub fn new(delegate: &'d mut Delegate<'tcx>,\n-               typer: &'t TYPER)\n+               typer: &'t TYPER,\n+               param_env: ParameterEnvironment<'tcx>)\n                -> ExprUseVisitor<'d,'t,'tcx,TYPER> {\n-        ExprUseVisitor { typer: typer,\n-                         mc: mc::MemCategorizationContext::new(typer),\n-                         delegate: delegate }\n+        ExprUseVisitor {\n+            typer: typer,\n+            mc: mc::MemCategorizationContext::new(typer),\n+            delegate: delegate,\n+            param_env: param_env,\n+        }\n     }\n \n     pub fn walk_fn(&mut self,\n@@ -352,7 +374,10 @@ impl<'d,'t,'tcx,TYPER:mc::Typer<'tcx>> ExprUseVisitor<'d,'t,'tcx,TYPER> {\n                         consume_id: ast::NodeId,\n                         consume_span: Span,\n                         cmt: mc::cmt<'tcx>) {\n-        let mode = copy_or_move(self.tcx(), cmt.ty, DirectRefMove);\n+        let mode = copy_or_move(self.tcx(),\n+                                cmt.ty,\n+                                &self.param_env,\n+                                DirectRefMove);\n         self.delegate.consume(consume_id, consume_span, cmt, mode);\n     }\n \n@@ -954,7 +979,10 @@ impl<'d,'t,'tcx,TYPER:mc::Typer<'tcx>> ExprUseVisitor<'d,'t,'tcx,TYPER> {\n                     ast::PatIdent(ast::BindByRef(_), _, _) =>\n                         mode.lub(BorrowingMatch),\n                     ast::PatIdent(ast::BindByValue(_), _, _) => {\n-                        match copy_or_move(tcx, cmt_pat.ty, PatBindingMove) {\n+                        match copy_or_move(tcx,\n+                                           cmt_pat.ty,\n+                                           &self.param_env,\n+                                           PatBindingMove) {\n                             Copy => mode.lub(CopyingMatch),\n                             Move(_) => mode.lub(MovingMatch),\n                         }\n@@ -984,7 +1012,7 @@ impl<'d,'t,'tcx,TYPER:mc::Typer<'tcx>> ExprUseVisitor<'d,'t,'tcx,TYPER> {\n         let tcx = typer.tcx();\n         let def_map = &self.typer.tcx().def_map;\n         let delegate = &mut self.delegate;\n-\n+        let param_env = &mut self.param_env;\n         return_if_err!(mc.cat_pattern(cmt_discr.clone(), pat, |mc, cmt_pat, pat| {\n             if pat_util::pat_is_binding(def_map, pat) {\n                 let tcx = typer.tcx();\n@@ -1018,7 +1046,10 @@ impl<'d,'t,'tcx,TYPER:mc::Typer<'tcx>> ExprUseVisitor<'d,'t,'tcx,TYPER> {\n                                              r, bk, RefBinding);\n                     }\n                     ast::PatIdent(ast::BindByValue(_), _, _) => {\n-                        let mode = copy_or_move(typer.tcx(), cmt_pat.ty, PatBindingMove);\n+                        let mode = copy_or_move(typer.tcx(),\n+                                                cmt_pat.ty,\n+                                                param_env,\n+                                                PatBindingMove);\n                         debug!(\"walk_pat binding consuming pat\");\n                         delegate.consume_pat(pat, cmt_pat, mode);\n                     }\n@@ -1211,7 +1242,10 @@ impl<'d,'t,'tcx,TYPER:mc::Typer<'tcx>> ExprUseVisitor<'d,'t,'tcx,TYPER> {\n             let cmt_var = return_if_err!(self.cat_captured_var(closure_expr.id,\n                                                                closure_expr.span,\n                                                                freevar.def));\n-            let mode = copy_or_move(self.tcx(), cmt_var.ty, CaptureMove);\n+            let mode = copy_or_move(self.tcx(),\n+                                    cmt_var.ty,\n+                                    &self.param_env,\n+                                    CaptureMove);\n             self.delegate.consume(closure_expr.id, freevar.span, cmt_var, mode);\n         }\n     }\n@@ -1229,8 +1263,15 @@ impl<'d,'t,'tcx,TYPER:mc::Typer<'tcx>> ExprUseVisitor<'d,'t,'tcx,TYPER> {\n     }\n }\n \n-fn copy_or_move<'tcx>(tcx: &ty::ctxt<'tcx>, ty: Ty<'tcx>,\n-                      move_reason: MoveReason) -> ConsumeMode {\n-    if ty::type_moves_by_default(tcx, ty) { Move(move_reason) } else { Copy }\n+fn copy_or_move<'tcx>(tcx: &ty::ctxt<'tcx>,\n+                      ty: Ty<'tcx>,\n+                      param_env: &ParameterEnvironment<'tcx>,\n+                      move_reason: MoveReason)\n+                      -> ConsumeMode {\n+    if ty::type_moves_by_default(tcx, ty, param_env) {\n+        Move(move_reason)\n+    } else {\n+        Copy\n+    }\n }\n "}, {"sha": "6780177933fd1179ea1bc9e23bdb32c8b53094f3", "filename": "src/librustc/middle/fast_reject.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc%2Fmiddle%2Ffast_reject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc%2Fmiddle%2Ffast_reject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ffast_reject.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -33,6 +33,8 @@ pub enum SimplifiedType {\n     ParameterSimplifiedType,\n }\n \n+impl Copy for SimplifiedType {}\n+\n /// Tries to simplify a type by dropping type parameters, deref'ing away any reference types, etc.\n /// The idea is to get something simple that we can use to quickly decide if two types could unify\n /// during method lookup."}, {"sha": "e45232a3c303879ef35972346e07e4fccc240f0a", "filename": "src/librustc/middle/graph.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc%2Fmiddle%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc%2Fmiddle%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fgraph.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -65,11 +65,15 @@ pub struct NodeIndex(pub uint);\n #[allow(non_upper_case_globals)]\n pub const InvalidNodeIndex: NodeIndex = NodeIndex(uint::MAX);\n \n+impl Copy for NodeIndex {}\n+\n #[deriving(PartialEq, Show)]\n pub struct EdgeIndex(pub uint);\n #[allow(non_upper_case_globals)]\n pub const InvalidEdgeIndex: EdgeIndex = EdgeIndex(uint::MAX);\n \n+impl Copy for EdgeIndex {}\n+\n // Use a private field here to guarantee no more instances are created:\n #[deriving(Show)]\n pub struct Direction { repr: uint }\n@@ -78,6 +82,8 @@ pub const Outgoing: Direction = Direction { repr: 0 };\n #[allow(non_upper_case_globals)]\n pub const Incoming: Direction = Direction { repr: 1 };\n \n+impl Copy for Direction {}\n+\n impl NodeIndex {\n     fn get(&self) -> uint { let NodeIndex(v) = *self; v }\n     /// Returns unique id (unique with respect to the graph holding associated node)."}, {"sha": "81cd8dd20d20c6c0761a8b403feac54817941c4f", "filename": "src/librustc/middle/infer/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -132,6 +132,8 @@ pub enum TypeOrigin {\n     IfExpressionWithNoElse(Span)\n }\n \n+impl Copy for TypeOrigin {}\n+\n /// See `error_reporting.rs` for more details\n #[deriving(Clone, Show)]\n pub enum ValuePairs<'tcx> {\n@@ -237,6 +239,8 @@ pub enum LateBoundRegionConversionTime {\n     HigherRankedType,\n }\n \n+impl Copy for LateBoundRegionConversionTime {}\n+\n /// Reasons to create a region inference variable\n ///\n /// See `error_reporting.rs` for more details\n@@ -280,6 +284,8 @@ pub enum fixup_err {\n     unresolved_ty(TyVid)\n }\n \n+impl Copy for fixup_err {}\n+\n pub fn fixup_err_to_string(f: fixup_err) -> String {\n     match f {\n       unresolved_int_ty(_) => {"}, {"sha": "391e37e8b9c965398612b8b206aeca67e902a46f", "filename": "src/librustc/middle/infer/region_inference/mod.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fmod.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -51,6 +51,8 @@ pub enum Constraint {\n     ConstrainVarSubReg(RegionVid, Region),\n }\n \n+impl Copy for Constraint {}\n+\n // Something we have to verify after region inference is done, but\n // which does not directly influence the inference process\n pub enum Verify<'tcx> {\n@@ -72,6 +74,8 @@ pub struct TwoRegions {\n     b: Region,\n }\n \n+impl Copy for TwoRegions {}\n+\n #[deriving(PartialEq)]\n pub enum UndoLogEntry {\n     OpenSnapshot,\n@@ -84,11 +88,15 @@ pub enum UndoLogEntry {\n     AddCombination(CombineMapType, TwoRegions)\n }\n \n+impl Copy for UndoLogEntry {}\n+\n #[deriving(PartialEq)]\n pub enum CombineMapType {\n     Lub, Glb\n }\n \n+impl Copy for CombineMapType {}\n+\n #[deriving(Clone, Show)]\n pub enum RegionResolutionError<'tcx> {\n     /// `ConcreteFailure(o, a, b)`:\n@@ -220,11 +228,15 @@ pub struct RegionSnapshot {\n     length: uint\n }\n \n+impl Copy for RegionSnapshot {}\n+\n #[deriving(Show)]\n pub struct RegionMark {\n     length: uint\n }\n \n+impl Copy for RegionMark {}\n+\n impl<'a, 'tcx> RegionVarBindings<'a, 'tcx> {\n     pub fn new(tcx: &'a ty::ctxt<'tcx>) -> RegionVarBindings<'a, 'tcx> {\n         RegionVarBindings {\n@@ -926,8 +938,12 @@ impl<'a, 'tcx> RegionVarBindings<'a, 'tcx> {\n #[deriving(PartialEq, Show)]\n enum Classification { Expanding, Contracting }\n \n+impl Copy for Classification {}\n+\n pub enum VarValue { NoValue, Value(Region), ErrorValue }\n \n+impl Copy for VarValue {}\n+\n struct VarData {\n     classification: Classification,\n     value: VarValue,"}, {"sha": "766e930486ca2de76b1a0cc7c0e9ffbb149d38ac", "filename": "src/librustc/middle/infer/type_variable.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc%2Fmiddle%2Finfer%2Ftype_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc%2Fmiddle%2Finfer%2Ftype_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Ftype_variable.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -49,6 +49,8 @@ pub enum RelationDir {\n     SubtypeOf, SupertypeOf, EqTo\n }\n \n+impl Copy for RelationDir {}\n+\n impl RelationDir {\n     fn opposite(self) -> RelationDir {\n         match self {"}, {"sha": "a2dd4d62913523a33c3231bbb9b5ea00bbbb3dca", "filename": "src/librustc/middle/infer/unify.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc%2Fmiddle%2Finfer%2Funify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc%2Fmiddle%2Finfer%2Funify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Funify.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -92,6 +92,8 @@ pub struct Node<K,V> {\n \n pub struct Delegate;\n \n+impl Copy for Delegate {}\n+\n // We can't use V:LatticeValue, much as I would like to,\n // because frequently the pattern is that V=Option<U> for some\n // other type parameter U, and we have no way to say"}, {"sha": "4a20c92d8e21e5bc3002b61e6b1b6dc0a1301ae0", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -50,6 +50,8 @@ pub enum LangItem {\n     $($variant),*\n }\n \n+impl Copy for LangItem {}\n+\n pub struct LanguageItems {\n     pub items: Vec<Option<ast::DefId>>,\n     pub missing: Vec<LangItem>,"}, {"sha": "5edbafc4e0bee4e7bf47b95451662c20b364f892", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -137,9 +137,14 @@ enum LoopKind<'a> {\n \n #[deriving(PartialEq)]\n struct Variable(uint);\n+\n+impl Copy for Variable {}\n+\n #[deriving(PartialEq)]\n struct LiveNode(uint);\n \n+impl Copy for LiveNode {}\n+\n impl Variable {\n     fn get(&self) -> uint { let Variable(v) = *self; v }\n }\n@@ -162,6 +167,8 @@ enum LiveNodeKind {\n     ExitNode\n }\n \n+impl Copy for LiveNodeKind {}\n+\n fn live_node_kind_to_string(lnk: LiveNodeKind, cx: &ty::ctxt) -> String {\n     let cm = cx.sess.codemap();\n     match lnk {\n@@ -246,6 +253,8 @@ struct LocalInfo {\n     ident: ast::Ident\n }\n \n+impl Copy for LocalInfo {}\n+\n #[deriving(Show)]\n enum VarKind {\n     Arg(NodeId, ast::Ident),\n@@ -254,6 +263,8 @@ enum VarKind {\n     CleanExit\n }\n \n+impl Copy for VarKind {}\n+\n struct IrMaps<'a, 'tcx: 'a> {\n     tcx: &'a ty::ctxt<'tcx>,\n \n@@ -532,6 +543,8 @@ struct Users {\n     used: bool\n }\n \n+impl Copy for Users {}\n+\n fn invalid_users() -> Users {\n     Users {\n         reader: invalid_node(),\n@@ -547,6 +560,8 @@ struct Specials {\n     clean_exit_var: Variable\n }\n \n+impl Copy for Specials {}\n+\n static ACC_READ: uint = 1u;\n static ACC_WRITE: uint = 2u;\n static ACC_USE: uint = 4u;"}, {"sha": "302fbd53dd5302f1fce3a6daa4738ba997967614", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -110,6 +110,8 @@ pub struct Upvar {\n     pub is_unboxed: bool\n }\n \n+impl Copy for Upvar {}\n+\n // different kinds of pointers:\n #[deriving(Clone, PartialEq, Eq, Hash, Show)]\n pub enum PointerKind {\n@@ -119,6 +121,8 @@ pub enum PointerKind {\n     UnsafePtr(ast::Mutability)\n }\n \n+impl Copy for PointerKind {}\n+\n // We use the term \"interior\" to mean \"something reachable from the\n // base without a pointer dereference\", e.g. a field\n #[deriving(Clone, PartialEq, Eq, Hash, Show)]\n@@ -127,25 +131,33 @@ pub enum InteriorKind {\n     InteriorElement(ElementKind),\n }\n \n+impl Copy for InteriorKind {}\n+\n #[deriving(Clone, PartialEq, Eq, Hash, Show)]\n pub enum FieldName {\n     NamedField(ast::Name),\n     PositionalField(uint)\n }\n \n+impl Copy for FieldName {}\n+\n #[deriving(Clone, PartialEq, Eq, Hash, Show)]\n pub enum ElementKind {\n     VecElement,\n     OtherElement,\n }\n \n+impl Copy for ElementKind {}\n+\n #[deriving(Clone, PartialEq, Eq, Hash, Show)]\n pub enum MutabilityCategory {\n     McImmutable, // Immutable.\n     McDeclared,  // Directly declared as mutable.\n     McInherited, // Inherited from the fact that owner is mutable.\n }\n \n+impl Copy for MutabilityCategory {}\n+\n // A note about the provenance of a `cmt`.  This is used for\n // special-case handling of upvars such as mutability inference.\n // Upvar categorization can generate a variable number of nested\n@@ -158,6 +170,8 @@ pub enum Note {\n     NoteNone                     // Nothing special\n }\n \n+impl Copy for Note {}\n+\n // `cmt`: \"Category, Mutability, and Type\".\n //\n // a complete categorization of a value indicating where it originated\n@@ -191,6 +205,8 @@ pub enum deref_kind {\n     deref_interior(InteriorKind),\n }\n \n+impl Copy for deref_kind {}\n+\n // Categorizes a derefable type.  Note that we include vectors and strings as\n // derefable (we model an index as the combination of a deref and then a\n // pointer adjustment).\n@@ -261,6 +277,8 @@ pub struct MemCategorizationContext<'t,TYPER:'t> {\n     typer: &'t TYPER\n }\n \n+impl<'t,TYPER:'t> Copy for MemCategorizationContext<'t,TYPER> {}\n+\n pub type McResult<T> = Result<T, ()>;\n \n /// The `Typer` trait provides the interface for the mem-categorization\n@@ -1384,6 +1402,8 @@ pub enum InteriorSafety {\n     InteriorSafe\n }\n \n+impl Copy for InteriorSafety {}\n+\n pub enum AliasableReason {\n     AliasableBorrowed,\n     AliasableClosure(ast::NodeId), // Aliasable due to capture Fn closure env\n@@ -1392,6 +1412,8 @@ pub enum AliasableReason {\n     AliasableStaticMut(InteriorSafety),\n }\n \n+impl Copy for AliasableReason {}\n+\n impl<'tcx> cmt_<'tcx> {\n     pub fn guarantor(&self) -> cmt<'tcx> {\n         //! Returns `self` after stripping away any owned pointer derefs or"}, {"sha": "370097004e92c54d5b445c662d741cd7ae7307a3", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -41,6 +41,8 @@ pub enum CodeExtent {\n     Misc(ast::NodeId)\n }\n \n+impl Copy for CodeExtent {}\n+\n impl CodeExtent {\n     /// Creates a scope that represents the dynamic extent associated\n     /// with `node_id`.\n@@ -120,6 +122,8 @@ pub struct Context {\n     parent: Option<ast::NodeId>,\n }\n \n+impl Copy for Context {}\n+\n struct RegionResolutionVisitor<'a> {\n     sess: &'a Session,\n "}, {"sha": "36b87bbd42392081592acb0511a5ee165130eee3", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -94,6 +94,8 @@ struct binding_info {\n     binding_mode: BindingMode,\n }\n \n+impl Copy for binding_info {}\n+\n // Map from the name in a pattern to its binding mode.\n type BindingMap = HashMap<Name,binding_info>;\n \n@@ -130,19 +132,25 @@ pub enum LastPrivate {\n                type_used: ImportUse},\n }\n \n+impl Copy for LastPrivate {}\n+\n #[deriving(Show)]\n pub enum PrivateDep {\n     AllPublic,\n     DependsOn(DefId),\n }\n \n+impl Copy for PrivateDep {}\n+\n // How an import is used.\n #[deriving(PartialEq, Show)]\n pub enum ImportUse {\n     Unused,       // The import is not used.\n     Used,         // The import is used.\n }\n \n+impl Copy for ImportUse {}\n+\n impl LastPrivate {\n     fn or(self, other: LastPrivate) -> LastPrivate {\n         match (self, other) {\n@@ -159,12 +167,16 @@ enum PatternBindingMode {\n     ArgumentIrrefutableMode,\n }\n \n+impl Copy for PatternBindingMode {}\n+\n #[deriving(PartialEq, Eq, Hash, Show)]\n enum Namespace {\n     TypeNS,\n     ValueNS\n }\n \n+impl Copy for Namespace {}\n+\n #[deriving(PartialEq)]\n enum NamespaceError {\n     NoError,\n@@ -173,6 +185,8 @@ enum NamespaceError {\n     ValueError\n }\n \n+impl Copy for NamespaceError {}\n+\n /// A NamespaceResult represents the result of resolving an import in\n /// a particular namespace. The result is either definitely-resolved,\n /// definitely- unresolved, or unknown.\n@@ -238,6 +252,8 @@ enum ImportDirectiveSubclass {\n     GlobImport\n }\n \n+impl Copy for ImportDirectiveSubclass {}\n+\n /// The context that we thread through while building the reduced graph.\n #[deriving(Clone)]\n enum ReducedGraphParent {\n@@ -294,6 +310,8 @@ enum TypeParameters<'a> {\n         RibKind)\n }\n \n+impl<'a> Copy for TypeParameters<'a> {}\n+\n // The rib kind controls the translation of local\n // definitions (`DefLocal`) to upvars (`DefUpvar`).\n \n@@ -319,17 +337,23 @@ enum RibKind {\n     ConstantItemRibKind\n }\n \n+impl Copy for RibKind {}\n+\n // Methods can be required or provided. RequiredMethod methods only occur in traits.\n enum MethodSort {\n     RequiredMethod,\n     ProvidedMethod(NodeId)\n }\n \n+impl Copy for MethodSort {}\n+\n enum UseLexicalScopeFlag {\n     DontUseLexicalScope,\n     UseLexicalScope\n }\n \n+impl Copy for UseLexicalScopeFlag {}\n+\n enum ModulePrefixResult {\n     NoPrefixFound,\n     PrefixFound(Rc<Module>, uint)\n@@ -342,6 +366,8 @@ pub enum TraitItemKind {\n     TypeTraitItemKind,\n }\n \n+impl Copy for TraitItemKind {}\n+\n impl TraitItemKind {\n     pub fn from_explicit_self_category(explicit_self_category:\n                                        ExplicitSelfCategory)\n@@ -364,12 +390,16 @@ enum NameSearchType {\n     PathSearch,\n }\n \n+impl Copy for NameSearchType {}\n+\n enum BareIdentifierPatternResolution {\n     FoundStructOrEnumVariant(Def, LastPrivate),\n     FoundConst(Def, LastPrivate),\n     BareIdentifierPatternUnresolved\n }\n \n+impl Copy for BareIdentifierPatternResolution {}\n+\n // Specifies how duplicates should be handled when adding a child item if\n // another item exists with the same name in some namespace.\n #[deriving(PartialEq)]\n@@ -381,6 +411,8 @@ enum DuplicateCheckingMode {\n     OverwriteDuplicates\n }\n \n+impl Copy for DuplicateCheckingMode {}\n+\n /// One local scope.\n struct Rib {\n     bindings: HashMap<Name, DefLike>,\n@@ -518,6 +550,8 @@ enum ModuleKind {\n     AnonymousModuleKind,\n }\n \n+impl Copy for ModuleKind {}\n+\n /// One node in the tree of modules.\n struct Module {\n     parent_link: ParentLink,\n@@ -599,6 +633,8 @@ bitflags! {\n     }\n }\n \n+impl Copy for DefModifiers {}\n+\n // Records a possibly-private type definition.\n #[deriving(Clone)]\n struct TypeNsDef {\n@@ -616,6 +652,8 @@ struct ValueNsDef {\n     value_span: Option<Span>,\n }\n \n+impl Copy for ValueNsDef {}\n+\n // Records the definitions (at most one for each namespace) that a name is\n // bound to.\n struct NameBindings {\n@@ -632,6 +670,8 @@ enum TraitReferenceType {\n     TraitQPath,                      // <T as SomeTrait>::\n }\n \n+impl Copy for TraitReferenceType {}\n+\n impl NameBindings {\n     fn new() -> NameBindings {\n         NameBindings {"}, {"sha": "2ba9ba5631d6a5aa41bacc43b6123dc9e8dc0692", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -46,6 +46,8 @@ pub enum DefRegion {\n                   /* lifetime decl */ ast::NodeId),\n }\n \n+impl Copy for DefRegion {}\n+\n // maps the id of each lifetime reference to the lifetime decl\n // that it corresponds to\n pub type NamedRegionMap = NodeMap<DefRegion>;"}, {"sha": "bcc762a9640f7310e12baca0b047d5f78b7981cc", "filename": "src/librustc/middle/subst.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc%2Fmiddle%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc%2Fmiddle%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fsubst.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -190,6 +190,8 @@ pub enum ParamSpace {\n     FnSpace,    // Type parameters attached to a method or fn\n }\n \n+impl Copy for ParamSpace {}\n+\n impl ParamSpace {\n     pub fn all() -> [ParamSpace, ..4] {\n         [TypeSpace, SelfSpace, AssocSpace, FnSpace]"}, {"sha": "d410a456dc913d01e8df8853c13a12daae78e7cd", "filename": "src/librustc/middle/traits/mod.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -60,6 +60,8 @@ pub struct ObligationCause<'tcx> {\n     pub code: ObligationCauseCode<'tcx>\n }\n \n+impl<'tcx> Copy for ObligationCause<'tcx> {}\n+\n #[deriving(Clone)]\n pub enum ObligationCauseCode<'tcx> {\n     /// Not well classified or should be obvious from span.\n@@ -95,6 +97,8 @@ pub enum ObligationCauseCode<'tcx> {\n \n pub type Obligations<'tcx> = subst::VecPerParamSpace<Obligation<'tcx>>;\n \n+impl<'tcx> Copy for ObligationCauseCode<'tcx> {}\n+\n pub type Selection<'tcx> = Vtable<'tcx, Obligation<'tcx>>;\n \n #[deriving(Clone,Show)]\n@@ -338,7 +342,7 @@ impl<'tcx, N> Vtable<'tcx, N> {\n             VtableFnPointer(ref sig) => VtableFnPointer((*sig).clone()),\n             VtableUnboxedClosure(d, ref s) => VtableUnboxedClosure(d, s.clone()),\n             VtableParam(ref p) => VtableParam((*p).clone()),\n-            VtableBuiltin(ref i) => VtableBuiltin(i.map_nested(op)),\n+            VtableBuiltin(ref b) => VtableBuiltin(b.map_nested(op)),\n         }\n     }\n \n@@ -348,7 +352,7 @@ impl<'tcx, N> Vtable<'tcx, N> {\n             VtableFnPointer(sig) => VtableFnPointer(sig),\n             VtableUnboxedClosure(d, s) => VtableUnboxedClosure(d, s),\n             VtableParam(p) => VtableParam(p),\n-            VtableBuiltin(i) => VtableBuiltin(i.map_move_nested(op)),\n+            VtableBuiltin(no) => VtableBuiltin(no.map_move_nested(op)),\n         }\n     }\n }"}, {"sha": "5ad0d17ad13cab9a2e4d10263dc8d50356496660", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -80,6 +80,7 @@ struct ObligationStack<'prev, 'tcx: 'prev> {\n     previous: Option<&'prev ObligationStack<'prev, 'tcx>>\n }\n \n+#[deriving(Clone)]\n pub struct SelectionCache<'tcx> {\n     hashmap: RefCell<HashMap<Rc<ty::TraitRef<'tcx>>,\n                              SelectionResult<'tcx, Candidate<'tcx>>>>,\n@@ -102,6 +103,8 @@ pub enum MethodMatchedData {\n     CoerciveMethodMatch(/* impl we matched */ ast::DefId)\n }\n \n+impl Copy for MethodMatchedData {}\n+\n /// The selection process begins by considering all impls, where\n /// clauses, and so forth that might resolve an obligation.  Sometimes\n /// we'll be able to say definitively that (e.g.) an impl does not\n@@ -918,20 +921,31 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         // and applicable impls. There is a certain set of precedence rules here.\n \n         match self.tcx().lang_items.to_builtin_kind(obligation.trait_ref.def_id) {\n-            Some(bound) => {\n-                try!(self.assemble_builtin_bound_candidates(bound, stack, &mut candidates));\n+            Some(ty::BoundCopy) => {\n+                debug!(\"obligation self ty is {}\",\n+                       obligation.self_ty().repr(self.tcx()));\n+                try!(self.assemble_candidates_from_impls(obligation, &mut candidates));\n+                try!(self.assemble_builtin_bound_candidates(ty::BoundCopy,\n+                                                            stack,\n+                                                            &mut candidates));\n             }\n \n             None => {\n-                // For the time being, we ignore user-defined impls for builtin-bounds.\n+                // For the time being, we ignore user-defined impls for builtin-bounds, other than\n+                // `Copy`.\n                 // (And unboxed candidates only apply to the Fn/FnMut/etc traits.)\n                 try!(self.assemble_unboxed_closure_candidates(obligation, &mut candidates));\n                 try!(self.assemble_fn_pointer_candidates(obligation, &mut candidates));\n                 try!(self.assemble_candidates_from_impls(obligation, &mut candidates));\n             }\n+\n+            Some(bound) => {\n+                try!(self.assemble_builtin_bound_candidates(bound, stack, &mut candidates));\n+            }\n         }\n \n         try!(self.assemble_candidates_from_caller_bounds(obligation, &mut candidates));\n+        debug!(\"candidate list size: {}\", candidates.vec.len());\n         Ok(candidates)\n     }\n \n@@ -1519,13 +1533,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 }\n \n                 ty::BoundCopy => {\n-                    if\n-                        Some(def_id) == tcx.lang_items.no_copy_bound() ||\n-                        Some(def_id) == tcx.lang_items.managed_bound() ||\n-                        ty::has_dtor(tcx, def_id)\n-                    {\n-                        return Err(Unimplemented);\n-                    }\n+                    // This is an Opt-In Built-In Trait.\n+                    return Ok(ParameterBuiltin)\n                 }\n \n                 ty::BoundSync => {"}, {"sha": "4c4b5d07f50ac21892065addc9bbd83954fa2ed4", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 186, "deletions": 43, "changes": 229, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -38,6 +38,7 @@ pub use self::IntVarValue::*;\n pub use self::ExprAdjustment::*;\n pub use self::vtable_origin::*;\n pub use self::MethodOrigin::*;\n+pub use self::CopyImplementationError::*;\n \n use back::svh::Svh;\n use session::Session;\n@@ -52,8 +53,10 @@ use middle::mem_categorization as mc;\n use middle::region;\n use middle::resolve;\n use middle::resolve_lifetime;\n+use middle::infer;\n use middle::stability;\n use middle::subst::{mod, Subst, Substs, VecPerParamSpace};\n+use middle::traits::ObligationCause;\n use middle::traits;\n use middle::ty;\n use middle::ty_fold::{mod, TypeFoldable, TypeFolder, HigherRankedFoldable};\n@@ -72,7 +75,7 @@ use std::hash::{Hash, sip, Writer};\n use std::mem;\n use std::ops;\n use std::rc::Rc;\n-use std::collections::hash_map::{Occupied, Vacant};\n+use std::collections::hash_map::{HashMap, Occupied, Vacant};\n use arena::TypedArena;\n use syntax::abi;\n use syntax::ast::{CrateNum, DefId, FnStyle, Ident, ItemTrait, LOCAL_CRATE};\n@@ -81,7 +84,7 @@ use syntax::ast::{Onceness, StmtExpr, StmtSemi, StructField, UnnamedField};\n use syntax::ast::{Visibility};\n use syntax::ast_util::{mod, is_local, lit_is_str, local_def, PostExpansionMethod};\n use syntax::attr::{mod, AttrMetaMethods};\n-use syntax::codemap::Span;\n+use syntax::codemap::{DUMMY_SP, Span};\n use syntax::parse::token::{mod, InternedString};\n use syntax::{ast, ast_map};\n use std::collections::enum_set::{EnumSet, CLike};\n@@ -109,12 +112,16 @@ pub struct field<'tcx> {\n     pub mt: mt<'tcx>\n }\n \n+impl<'tcx> Copy for field<'tcx> {}\n+\n #[deriving(Clone, Show)]\n pub enum ImplOrTraitItemContainer {\n     TraitContainer(ast::DefId),\n     ImplContainer(ast::DefId),\n }\n \n+impl Copy for ImplOrTraitItemContainer {}\n+\n impl ImplOrTraitItemContainer {\n     pub fn id(&self) -> ast::DefId {\n         match *self {\n@@ -175,6 +182,8 @@ pub enum ImplOrTraitItemId {\n     TypeTraitItemId(ast::DefId),\n }\n \n+impl Copy for ImplOrTraitItemId {}\n+\n impl ImplOrTraitItemId {\n     pub fn def_id(&self) -> ast::DefId {\n         match *self {\n@@ -236,12 +245,16 @@ pub struct AssociatedType {\n     pub container: ImplOrTraitItemContainer,\n }\n \n+impl Copy for AssociatedType {}\n+\n #[deriving(Clone, PartialEq, Eq, Hash, Show)]\n pub struct mt<'tcx> {\n     pub ty: Ty<'tcx>,\n     pub mutbl: ast::Mutability,\n }\n \n+impl<'tcx> Copy for mt<'tcx> {}\n+\n #[deriving(Clone, PartialEq, Eq, Hash, Encodable, Decodable, Show)]\n pub enum TraitStore {\n     /// Box<Trait>\n@@ -250,6 +263,8 @@ pub enum TraitStore {\n     RegionTraitStore(Region, ast::Mutability),\n }\n \n+impl Copy for TraitStore {}\n+\n #[deriving(Clone, Show)]\n pub struct field_ty {\n     pub name: Name,\n@@ -258,6 +273,8 @@ pub struct field_ty {\n     pub origin: ast::DefId,  // The DefId of the struct in which the field is declared.\n }\n \n+impl Copy for field_ty {}\n+\n // Contains information needed to resolve types and (in the future) look up\n // the types of AST nodes.\n #[deriving(PartialEq, Eq, Hash)]\n@@ -267,11 +284,15 @@ pub struct creader_cache_key {\n     pub len: uint\n }\n \n+impl Copy for creader_cache_key {}\n+\n pub enum ast_ty_to_ty_cache_entry<'tcx> {\n     atttce_unresolved,  /* not resolved yet */\n     atttce_resolved(Ty<'tcx>)  /* resolved to a type, irrespective of region */\n }\n \n+impl<'tcx> Copy for ast_ty_to_ty_cache_entry<'tcx> {}\n+\n #[deriving(Clone, PartialEq, Decodable, Encodable)]\n pub struct ItemVariances {\n     pub types: VecPerParamSpace<Variance>,\n@@ -286,6 +307,8 @@ pub enum Variance {\n     Bivariant,      // T<A> <: T<B>            -- e.g., unused type parameter\n }\n \n+impl Copy for Variance {}\n+\n #[deriving(Clone, Show)]\n pub enum AutoAdjustment<'tcx> {\n     AdjustAddEnv(ty::TraitStore),\n@@ -431,6 +454,8 @@ pub struct param_index {\n     pub index: uint\n }\n \n+impl Copy for param_index {}\n+\n #[deriving(Clone, Show)]\n pub enum MethodOrigin<'tcx> {\n     // fully statically resolved method\n@@ -485,6 +510,8 @@ pub struct MethodCallee<'tcx> {\n     pub substs: subst::Substs<'tcx>\n }\n \n+impl Copy for MethodCall {}\n+\n /// With method calls, we store some extra information in\n /// side tables (i.e method_map). We use\n /// MethodCall as a key to index into these tables instead of\n@@ -510,6 +537,8 @@ pub enum ExprAdjustment {\n     AutoObject\n }\n \n+impl Copy for ExprAdjustment {}\n+\n impl MethodCall {\n     pub fn expr(id: ast::NodeId) -> MethodCall {\n         MethodCall {\n@@ -594,6 +623,8 @@ pub struct TransmuteRestriction<'tcx> {\n     pub id: ast::NodeId,\n }\n \n+impl<'tcx> Copy for TransmuteRestriction<'tcx> {}\n+\n /// The data structure to keep track of all the information that typechecker\n /// generates so that so that it can be reused and doesn't have to be redone\n /// later on.\n@@ -746,6 +777,9 @@ pub struct ctxt<'tcx> {\n \n     /// Caches the representation hints for struct definitions.\n     pub repr_hint_cache: RefCell<DefIdMap<Rc<Vec<attr::ReprAttr>>>>,\n+\n+    /// Caches whether types move by default.\n+    pub type_moves_by_default_cache: RefCell<HashMap<Ty<'tcx>,bool>>,\n }\n \n // Flags that we track on types. These flags are propagated upwards\n@@ -766,6 +800,8 @@ bitflags! {\n     }\n }\n \n+impl Copy for TypeFlags {}\n+\n #[deriving(Show)]\n pub struct TyS<'tcx> {\n     pub sty: sty<'tcx>,\n@@ -807,6 +843,7 @@ impl<'tcx> PartialEq for InternedTy<'tcx> {\n         self.ty.sty == other.ty.sty\n     }\n }\n+\n impl<'tcx> Eq for InternedTy<'tcx> {}\n \n impl<'tcx, S: Writer> Hash<S> for InternedTy<'tcx> {\n@@ -900,6 +937,8 @@ impl<'tcx> FnOutput<'tcx> {\n     }\n }\n \n+impl<'tcx> Copy for FnOutput<'tcx> {}\n+\n /// Signature of a function type, which I have arbitrarily\n /// decided to use to refer to the input/output types.\n ///\n@@ -924,6 +963,8 @@ pub struct ParamTy {\n     pub def_id: DefId\n }\n \n+impl Copy for ParamTy {}\n+\n /// A [De Bruijn index][dbi] is a standard means of representing\n /// regions (and perhaps later types) in a higher-ranked setting. In\n /// particular, imagine a type like this:\n@@ -1018,6 +1059,8 @@ pub struct UpvarId {\n     pub closure_expr_id: ast::NodeId,\n }\n \n+impl Copy for UpvarId {}\n+\n #[deriving(Clone, PartialEq, Eq, Hash, Show, Encodable, Decodable)]\n pub enum BorrowKind {\n     /// Data must be immutable and is aliasable.\n@@ -1064,6 +1107,8 @@ pub enum BorrowKind {\n     MutBorrow\n }\n \n+impl Copy for BorrowKind {}\n+\n /// Information describing the borrowing of an upvar. This is computed\n /// during `typeck`, specifically by `regionck`. The general idea is\n /// that the compiler analyses treat closures like:\n@@ -1119,6 +1164,8 @@ pub struct UpvarBorrow {\n \n pub type UpvarBorrowMap = FnvHashMap<UpvarId, UpvarBorrow>;\n \n+impl Copy for UpvarBorrow {}\n+\n impl Region {\n     pub fn is_bound(&self) -> bool {\n         match *self {\n@@ -1136,6 +1183,8 @@ impl Region {\n     }\n }\n \n+impl Copy for Region {}\n+\n #[deriving(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, Encodable, Decodable, Show)]\n /// A \"free\" region `fr` can be interpreted as \"some region\n /// at least as big as the scope `fr.scope`\".\n@@ -1144,6 +1193,8 @@ pub struct FreeRegion {\n     pub bound_region: BoundRegion\n }\n \n+impl Copy for FreeRegion {}\n+\n #[deriving(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, Encodable, Decodable, Show)]\n pub enum BoundRegion {\n     /// An anonymous region parameter for a given fn (&T)\n@@ -1163,6 +1214,8 @@ pub enum BoundRegion {\n     BrEnv\n }\n \n+impl Copy for BoundRegion {}\n+\n #[inline]\n pub fn mk_prim_t<'tcx>(primitive: &'tcx TyS<'static>) -> Ty<'tcx> {\n     // FIXME(#17596) Ty<'tcx> is incorrectly invariant w.r.t 'tcx.\n@@ -1302,6 +1355,8 @@ pub enum IntVarValue {\n     UintType(ast::UintTy),\n }\n \n+impl Copy for IntVarValue {}\n+\n #[deriving(Clone, Show)]\n pub enum terr_vstore_kind {\n     terr_vec,\n@@ -1310,12 +1365,16 @@ pub enum terr_vstore_kind {\n     terr_trait\n }\n \n+impl Copy for terr_vstore_kind {}\n+\n #[deriving(Clone, Show)]\n pub struct expected_found<T> {\n     pub expected: T,\n     pub found: T\n }\n \n+impl<T:Copy> Copy for expected_found<T> {}\n+\n // Data structures used in type unification\n #[deriving(Clone, Show)]\n pub enum type_err<'tcx> {\n@@ -1350,6 +1409,8 @@ pub enum type_err<'tcx> {\n     terr_convergence_mismatch(expected_found<bool>)\n }\n \n+impl<'tcx> Copy for type_err<'tcx> {}\n+\n /// Bounds suitable for a named type parameter like `A` in `fn foo<A>`\n /// as well as the existential type parameter in an object type.\n #[deriving(PartialEq, Eq, Hash, Clone, Show)]\n@@ -1370,6 +1431,8 @@ pub struct ExistentialBounds {\n     pub builtin_bounds: BuiltinBounds\n }\n \n+impl Copy for ExistentialBounds {}\n+\n pub type BuiltinBounds = EnumSet<BuiltinBound>;\n \n #[deriving(Clone, Encodable, PartialEq, Eq, Decodable, Hash, Show)]\n@@ -1381,6 +1444,8 @@ pub enum BuiltinBound {\n     BoundSync,\n }\n \n+impl Copy for BuiltinBound {}\n+\n pub fn empty_builtin_bounds() -> BuiltinBounds {\n     EnumSet::new()\n }\n@@ -1413,21 +1478,29 @@ pub struct TyVid {\n     pub index: uint\n }\n \n+impl Copy for TyVid {}\n+\n #[deriving(Clone, PartialEq, Eq, Hash)]\n pub struct IntVid {\n     pub index: uint\n }\n \n+impl Copy for IntVid {}\n+\n #[deriving(Clone, PartialEq, Eq, Hash)]\n pub struct FloatVid {\n     pub index: uint\n }\n \n+impl Copy for FloatVid {}\n+\n #[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash)]\n pub struct RegionVid {\n     pub index: uint\n }\n \n+impl Copy for RegionVid {}\n+\n #[deriving(Clone, PartialEq, Eq, Hash)]\n pub enum InferTy {\n     TyVar(TyVid),\n@@ -1441,12 +1514,16 @@ pub enum InferTy {\n     SkolemizedIntTy(uint),\n }\n \n+impl Copy for InferTy {}\n+\n #[deriving(Clone, Encodable, Decodable, Eq, Hash, Show)]\n pub enum InferRegion {\n     ReVar(RegionVid),\n     ReSkolemized(uint, BoundRegion)\n }\n \n+impl Copy for InferRegion {}\n+\n impl cmp::PartialEq for InferRegion {\n     fn eq(&self, other: &InferRegion) -> bool {\n         match ((*self), *other) {\n@@ -1642,6 +1719,7 @@ impl<'tcx> TraitRef<'tcx> {\n /// bound lifetime parameters are replaced with free ones, but in the\n /// future I hope to refine the representation of types so as to make\n /// more distinctions clearer.\n+#[deriving(Clone)]\n pub struct ParameterEnvironment<'tcx> {\n     /// A substitution that can be applied to move from\n     /// the \"outer\" view of a type or method to the \"inner\" view.\n@@ -1690,14 +1768,14 @@ impl<'tcx> ParameterEnvironment<'tcx> {\n                             }\n                             TypeTraitItem(_) => {\n                                 cx.sess\n-                                  .bug(\"ParameterEnvironment::from_item(): \\\n+                                  .bug(\"ParameterEnvironment::for_item(): \\\n                                         can't create a parameter environment \\\n                                         for type trait items\")\n                             }\n                         }\n                     }\n                     ast::TypeImplItem(_) => {\n-                        cx.sess.bug(\"ParameterEnvironment::from_item(): \\\n+                        cx.sess.bug(\"ParameterEnvironment::for_item(): \\\n                                      can't create a parameter environment \\\n                                      for type impl items\")\n                     }\n@@ -1707,7 +1785,7 @@ impl<'tcx> ParameterEnvironment<'tcx> {\n                 match *trait_method {\n                     ast::RequiredMethod(ref required) => {\n                         cx.sess.span_bug(required.span,\n-                                         \"ParameterEnvironment::from_item():\n+                                         \"ParameterEnvironment::for_item():\n                                           can't create a parameter \\\n                                           environment for required trait \\\n                                           methods\")\n@@ -1725,7 +1803,7 @@ impl<'tcx> ParameterEnvironment<'tcx> {\n                             }\n                             TypeTraitItem(_) => {\n                                 cx.sess\n-                                  .bug(\"ParameterEnvironment::from_item(): \\\n+                                  .bug(\"ParameterEnvironment::for_item(): \\\n                                         can't create a parameter environment \\\n                                         for type trait items\")\n                             }\n@@ -1768,6 +1846,10 @@ impl<'tcx> ParameterEnvironment<'tcx> {\n                     }\n                 }\n             }\n+            Some(ast_map::NodeExpr(..)) => {\n+                // This is a convenience to allow closures to work.\n+                ParameterEnvironment::for_item(cx, cx.map.get_parent(id))\n+            }\n             _ => {\n                 cx.sess.bug(format!(\"ParameterEnvironment::from_item(): \\\n                                      `{}` is not an item\",\n@@ -1825,6 +1907,8 @@ pub enum UnboxedClosureKind {\n     FnOnceUnboxedClosureKind,\n }\n \n+impl Copy for UnboxedClosureKind {}\n+\n impl UnboxedClosureKind {\n     pub fn trait_did(&self, cx: &ctxt) -> ast::DefId {\n         let result = match *self {\n@@ -1909,6 +1993,7 @@ pub fn mk_ctxt<'tcx>(s: Session,\n         associated_types: RefCell::new(DefIdMap::new()),\n         selection_cache: traits::SelectionCache::new(),\n         repr_hint_cache: RefCell::new(DefIdMap::new()),\n+        type_moves_by_default_cache: RefCell::new(HashMap::new()),\n    }\n }\n \n@@ -2604,6 +2689,8 @@ pub struct TypeContents {\n     pub bits: u64\n }\n \n+impl Copy for TypeContents {}\n+\n macro_rules! def_type_content_sets(\n     (mod $mname:ident { $($name:ident = $bits:expr),+ }) => {\n         #[allow(non_snake_case)]\n@@ -2630,7 +2717,6 @@ def_type_content_sets!(\n         OwnsOwned                           = 0b0000_0000__0000_0001__0000,\n         OwnsDtor                            = 0b0000_0000__0000_0010__0000,\n         OwnsManaged /* see [1] below */     = 0b0000_0000__0000_0100__0000,\n-        OwnsAffine                          = 0b0000_0000__0000_1000__0000,\n         OwnsAll                             = 0b0000_0000__1111_1111__0000,\n \n         // Things that are reachable by the value in any way (fourth nibble):\n@@ -2640,24 +2726,12 @@ def_type_content_sets!(\n         ReachesFfiUnsafe                    = 0b0010_0000__0000_0000__0000,\n         ReachesAll                          = 0b0011_1111__0000_0000__0000,\n \n-        // Things that cause values to *move* rather than *copy*. This\n-        // is almost the same as the `Copy` trait, but for managed\n-        // data -- atm, we consider managed data to copy, not move,\n-        // but it does not impl Copy as a pure memcpy is not good\n-        // enough. Yuck.\n-        Moves                               = 0b0000_0000__0000_1011__0000,\n-\n         // Things that mean drop glue is necessary\n         NeedsDrop                           = 0b0000_0000__0000_0111__0000,\n \n         // Things that prevent values from being considered sized\n         Nonsized                            = 0b0000_0000__0000_0000__0001,\n \n-        // Things that make values considered not POD (would be same\n-        // as `Moves`, but for the fact that managed data `@` is\n-        // not considered POD)\n-        Noncopy                              = 0b0000_0000__0000_1111__0000,\n-\n         // Bits to set when a managed value is encountered\n         //\n         // [1] Do not set the bits TC::OwnsManaged or\n@@ -2699,10 +2773,6 @@ impl TypeContents {\n         self.intersects(TC::InteriorUnsized)\n     }\n \n-    pub fn moves_by_default(&self, _: &ctxt) -> bool {\n-        self.intersects(TC::Moves)\n-    }\n-\n     pub fn needs_drop(&self, _: &ctxt) -> bool {\n         self.intersects(TC::NeedsDrop)\n     }\n@@ -2987,15 +3057,10 @@ pub fn type_contents<'tcx>(cx: &ctxt<'tcx>, ty: Ty<'tcx>) -> TypeContents {\n         mc | tc_ty(cx, mt.ty, cache)\n     }\n \n-    fn apply_lang_items(cx: &ctxt,\n-                        did: ast::DefId,\n-                        tc: TypeContents)\n-                        -> TypeContents\n-    {\n+    fn apply_lang_items(cx: &ctxt, did: ast::DefId, tc: TypeContents)\n+                        -> TypeContents {\n         if Some(did) == cx.lang_items.managed_bound() {\n             tc | TC::Managed\n-        } else if Some(did) == cx.lang_items.no_copy_bound() {\n-            tc | TC::OwnsAffine\n         } else if Some(did) == cx.lang_items.unsafe_type() {\n             tc | TC::InteriorUnsafe\n         } else {\n@@ -3008,7 +3073,7 @@ pub fn type_contents<'tcx>(cx: &ctxt<'tcx>, ty: Ty<'tcx>) -> TypeContents {\n                          mutbl: ast::Mutability)\n                          -> TypeContents {\n         let b = match mutbl {\n-            ast::MutMutable => TC::ReachesMutable | TC::OwnsAffine,\n+            ast::MutMutable => TC::ReachesMutable,\n             ast::MutImmutable => TC::None,\n         };\n         b | (TC::ReachesBorrowed).when(region != ty::ReStatic)\n@@ -3028,14 +3093,7 @@ pub fn type_contents<'tcx>(cx: &ctxt<'tcx>, ty: Ty<'tcx>) -> TypeContents {\n             }\n         };\n \n-        // This also prohibits \"@once fn\" from being copied, which allows it to\n-        // be called. Neither way really makes much sense.\n-        let ot = match cty.onceness {\n-            ast::Once => TC::OwnsAffine,\n-            ast::Many => TC::None,\n-        };\n-\n-        st | ot\n+        st\n     }\n \n     fn object_contents(cx: &ctxt,\n@@ -3053,9 +3111,8 @@ pub fn type_contents<'tcx>(cx: &ctxt<'tcx>, ty: Ty<'tcx>) -> TypeContents {\n         let mut tc = TC::All;\n         each_inherited_builtin_bound(cx, bounds, traits, |bound| {\n             tc = tc - match bound {\n-                BoundSync | BoundSend => TC::None,\n+                BoundSync | BoundSend | BoundCopy => TC::None,\n                 BoundSized => TC::Nonsized,\n-                BoundCopy => TC::Noncopy,\n             };\n         });\n         return tc;\n@@ -3081,8 +3138,38 @@ pub fn type_contents<'tcx>(cx: &ctxt<'tcx>, ty: Ty<'tcx>) -> TypeContents {\n     }\n }\n \n-pub fn type_moves_by_default<'tcx>(cx: &ctxt<'tcx>, ty: Ty<'tcx>) -> bool {\n-    type_contents(cx, ty).moves_by_default(cx)\n+pub fn type_moves_by_default<'tcx>(cx: &ctxt<'tcx>,\n+                                   ty: Ty<'tcx>,\n+                                   param_env: &ParameterEnvironment<'tcx>)\n+                                    -> bool {\n+    if !type_has_params(ty) && !type_has_self(ty) {\n+        match cx.type_moves_by_default_cache.borrow().get(&ty) {\n+            None => {}\n+            Some(&result) => {\n+                debug!(\"determined whether {} moves by default (cached): {}\",\n+                       ty_to_string(cx, ty),\n+                       result);\n+                return result\n+            }\n+        }\n+    }\n+\n+    let infcx = infer::new_infer_ctxt(cx);\n+    let mut fulfill_cx = traits::FulfillmentContext::new();\n+    let obligation = traits::obligation_for_builtin_bound(\n+        cx,\n+        ObligationCause::misc(DUMMY_SP),\n+        ty,\n+        ty::BoundCopy).unwrap();\n+    fulfill_cx.register_obligation(cx, obligation);\n+    let result = !fulfill_cx.select_all_or_error(&infcx,\n+                                                 param_env,\n+                                                 cx).is_ok();\n+    cx.type_moves_by_default_cache.borrow_mut().insert(ty, result);\n+    debug!(\"determined whether {} moves by default: {}\",\n+           ty_to_string(cx, ty),\n+           result);\n+    result\n }\n \n pub fn is_ffi_safe<'tcx>(cx: &ctxt<'tcx>, ty: Ty<'tcx>) -> bool {\n@@ -3214,6 +3301,8 @@ pub enum Representability {\n     SelfRecursive,\n }\n \n+impl Copy for Representability {}\n+\n /// Check whether a type is representable. This means it cannot contain unboxed\n /// structural recursion. This check is needed for structs and enums.\n pub fn is_type_representable<'tcx>(cx: &ctxt<'tcx>, sp: Span, ty: Ty<'tcx>)\n@@ -3996,6 +4085,8 @@ pub enum ExprKind {\n     RvalueStmtExpr\n }\n \n+impl Copy for ExprKind {}\n+\n pub fn expr_kind(tcx: &ctxt, expr: &ast::Expr) -> ExprKind {\n     if tcx.method_map.borrow().contains_key(&MethodCall::expr(expr.id)) {\n         // Overloaded operations are generally calls, and hence they are\n@@ -4555,6 +4646,8 @@ pub struct AssociatedTypeInfo {\n     pub name: ast::Name,\n }\n \n+impl Copy for AssociatedTypeInfo {}\n+\n impl PartialOrd for AssociatedTypeInfo {\n     fn partial_cmp(&self, other: &AssociatedTypeInfo) -> Option<Ordering> {\n         Some(self.index.cmp(&other.index))\n@@ -4738,6 +4831,8 @@ pub enum DtorKind {\n     TraitDtor(DefId, bool)\n }\n \n+impl Copy for DtorKind {}\n+\n impl DtorKind {\n     pub fn is_present(&self) -> bool {\n         match *self {\n@@ -5125,6 +5220,8 @@ pub struct UnboxedClosureUpvar<'tcx> {\n     pub ty: Ty<'tcx>,\n }\n \n+impl<'tcx> Copy for UnboxedClosureUpvar<'tcx> {}\n+\n // Returns a list of `UnboxedClosureUpvar`s for each upvar.\n pub fn unboxed_closure_upvars<'tcx>(tcx: &ctxt<'tcx>, closure_id: ast::DefId, substs: &Substs<'tcx>)\n                                     -> Vec<UnboxedClosureUpvar<'tcx>> {\n@@ -5954,6 +6051,8 @@ pub enum ExplicitSelfCategory {\n     ByBoxExplicitSelfCategory,\n }\n \n+impl Copy for ExplicitSelfCategory {}\n+\n /// Pushes all the lifetimes in the given type onto the given list. A\n /// \"lifetime in a type\" is a lifetime specified by a reference or a lifetime\n /// in a list of type substitutions. This does *not* traverse into nominal\n@@ -6023,6 +6122,8 @@ pub struct Freevar {\n     pub span: Span\n }\n \n+impl Copy for Freevar {}\n+\n pub type FreevarMap = NodeMap<Vec<Freevar>>;\n \n pub type CaptureModeMap = NodeMap<ast::CaptureClause>;\n@@ -6122,6 +6223,8 @@ impl DebruijnIndex {\n     }\n }\n \n+impl Copy for DebruijnIndex {}\n+\n impl<'tcx> Repr<'tcx> for AutoAdjustment<'tcx> {\n     fn repr(&self, tcx: &ctxt<'tcx>) -> String {\n         match *self {\n@@ -6229,3 +6332,43 @@ pub fn make_substs_for_receiver_types<'tcx>(tcx: &ty::ctxt<'tcx>,\n     trait_ref.substs.clone().with_method(meth_tps, meth_regions)\n }\n \n+pub enum CopyImplementationError {\n+    FieldDoesNotImplementCopy(ast::Name),\n+    VariantDoesNotImplementCopy(ast::Name),\n+    TypeIsStructural,\n+}\n+\n+impl Copy for CopyImplementationError {}\n+\n+pub fn can_type_implement_copy<'tcx>(tcx: &ctxt<'tcx>,\n+                                     self_type: Ty<'tcx>,\n+                                     param_env: &ParameterEnvironment<'tcx>)\n+                                     -> Result<(),CopyImplementationError> {\n+    match self_type.sty {\n+        ty::ty_struct(struct_did, ref substs) => {\n+            let fields = ty::struct_fields(tcx, struct_did, substs);\n+            for field in fields.iter() {\n+                if type_moves_by_default(tcx, field.mt.ty, param_env) {\n+                    return Err(FieldDoesNotImplementCopy(field.name))\n+                }\n+            }\n+        }\n+        ty::ty_enum(enum_did, ref substs) => {\n+            let enum_variants = ty::enum_variants(tcx, enum_did);\n+            for variant in enum_variants.iter() {\n+                for variant_arg_type in variant.args.iter() {\n+                    let substd_arg_type =\n+                        variant_arg_type.subst(tcx, substs);\n+                    if type_moves_by_default(tcx,\n+                                             substd_arg_type,\n+                                             param_env) {\n+                        return Err(VariantDoesNotImplementCopy(variant.name))\n+                    }\n+                }\n+            }\n+        }\n+        _ => return Err(TypeIsStructural),\n+    }\n+\n+    Ok(())\n+}"}, {"sha": "c7b5e1e8de9a5a629c59a01e9da82ebf07a74995", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -55,13 +55,17 @@ pub enum OptLevel {\n     Aggressive // -O3\n }\n \n+impl Copy for OptLevel {}\n+\n #[deriving(Clone, PartialEq)]\n pub enum DebugInfoLevel {\n     NoDebugInfo,\n     LimitedDebugInfo,\n     FullDebugInfo,\n }\n \n+impl Copy for DebugInfoLevel {}\n+\n #[deriving(Clone, PartialEq, PartialOrd, Ord, Eq)]\n pub enum OutputType {\n     OutputTypeBitcode,\n@@ -71,6 +75,8 @@ pub enum OutputType {\n     OutputTypeExe,\n }\n \n+impl Copy for OutputType {}\n+\n #[deriving(Clone)]\n pub struct Options {\n     // The crate config requested for the session, which may be combined\n@@ -87,7 +93,7 @@ pub struct Options {\n     // parsed code. It remains mutable in case its replacements wants to use\n     // this.\n     pub addl_lib_search_paths: RefCell<Vec<Path>>,\n-    pub libs: Vec<(String, cstore::NativeLibaryKind)>,\n+    pub libs: Vec<(String, cstore::NativeLibraryKind)>,\n     pub maybe_sysroot: Option<Path>,\n     pub target_triple: String,\n     // User-specified cfg meta items. The compiler itself will add additional\n@@ -221,6 +227,8 @@ pub enum EntryFnType {\n     EntryNone,\n }\n \n+impl Copy for EntryFnType {}\n+\n #[deriving(PartialEq, PartialOrd, Clone, Ord, Eq, Hash)]\n pub enum CrateType {\n     CrateTypeExecutable,\n@@ -229,6 +237,8 @@ pub enum CrateType {\n     CrateTypeStaticlib,\n }\n \n+impl Copy for CrateType {}\n+\n macro_rules! debugging_opts(\n     ([ $opt:ident ] $cnt:expr ) => (\n         pub const $opt: u64 = 1 << $cnt;"}, {"sha": "30318cc129cacb2ef1f7f36af510bee471d16873", "filename": "src/librustc/util/common.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fcommon.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -25,6 +25,8 @@ use syntax::visit::Visitor;\n #[deriving(Clone,Show)]\n pub struct ErrorReported;\n \n+impl Copy for ErrorReported {}\n+\n pub fn time<T, U>(do_it: bool, what: &str, u: U, f: |U| -> T) -> T {\n     thread_local!(static DEPTH: Cell<uint> = Cell::new(0));\n     if !do_it { return f(u); }"}, {"sha": "d1816c655fa5fef0e22057b826a9e9c32334933e", "filename": "src/librustc/util/nodemap.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc%2Futil%2Fnodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc%2Futil%2Fnodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fnodemap.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -71,6 +71,9 @@ pub mod DefIdSet {\n #[deriving(Clone, Default)]\n pub struct FnvHasher;\n \n+impl Copy for FnvHasher {}\n+\n+#[allow(missing_copy_implementations)]\n pub struct FnvState(u64);\n \n impl Hasher<FnvState> for FnvHasher {"}, {"sha": "d143d05acfe4b9b5ec05c489e0e1ff34398d02bf", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -49,12 +49,16 @@ pub enum PpSourceMode {\n     PpmExpandedHygiene,\n }\n \n+impl Copy for PpSourceMode {}\n+\n #[deriving(PartialEq, Show)]\n pub enum PpMode {\n     PpmSource(PpSourceMode),\n     PpmFlowGraph,\n }\n \n+impl Copy for PpMode {}\n+\n pub fn parse_pretty(sess: &Session, name: &str) -> (PpMode, Option<UserIdentifiedItem>) {\n     let mut split = name.splitn(1, '=');\n     let first = split.next().unwrap();"}, {"sha": "04196feafd22b525be2fec61daa6c89508cfa2f8", "filename": "src/librustc_llvm/diagnostic.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc_llvm%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc_llvm%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fdiagnostic.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -24,6 +24,8 @@ pub enum OptimizationDiagnosticKind {\n     OptimizationFailure,\n }\n \n+impl Copy for OptimizationDiagnosticKind {}\n+\n impl OptimizationDiagnosticKind {\n     pub fn describe(self) -> &'static str {\n         match self {\n@@ -43,6 +45,8 @@ pub struct OptimizationDiagnostic {\n     pub message: TwineRef,\n }\n \n+impl Copy for OptimizationDiagnostic {}\n+\n impl OptimizationDiagnostic {\n     unsafe fn unpack(kind: OptimizationDiagnosticKind, di: DiagnosticInfoRef)\n             -> OptimizationDiagnostic {\n@@ -72,6 +76,8 @@ pub enum Diagnostic {\n     UnknownDiagnostic(DiagnosticInfoRef),\n }\n \n+impl Copy for Diagnostic {}\n+\n impl Diagnostic {\n     pub unsafe fn unpack(di: DiagnosticInfoRef) -> Diagnostic {\n         let kind = super::LLVMGetDiagInfoKind(di);"}, {"sha": "23dad21e5303f8c179e64f992243d30c244a7178", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -77,12 +77,16 @@ pub enum CallConv {\n     X86_64_Win64 = 79,\n }\n \n+impl Copy for CallConv {}\n+\n pub enum Visibility {\n     LLVMDefaultVisibility = 0,\n     HiddenVisibility = 1,\n     ProtectedVisibility = 2,\n }\n \n+impl Copy for Visibility {}\n+\n // This enum omits the obsolete (and no-op) linkage types DLLImportLinkage,\n // DLLExportLinkage, GhostLinkage and LinkOnceODRAutoHideLinkage.\n // LinkerPrivateLinkage and LinkerPrivateWeakLinkage are not included either;\n@@ -101,6 +105,8 @@ pub enum Linkage {\n     CommonLinkage = 14,\n }\n \n+impl Copy for Linkage {}\n+\n #[repr(C)]\n #[deriving(Show)]\n pub enum DiagnosticSeverity {\n@@ -110,6 +116,8 @@ pub enum DiagnosticSeverity {\n     Note,\n }\n \n+impl Copy for DiagnosticSeverity {}\n+\n bitflags! {\n     flags Attribute : u32 {\n         const ZExtAttribute = 1 << 0,\n@@ -141,6 +149,8 @@ bitflags! {\n     }\n }\n \n+impl Copy for Attribute {}\n+\n #[repr(u64)]\n pub enum OtherAttribute {\n     // The following are not really exposed in\n@@ -162,16 +172,22 @@ pub enum OtherAttribute {\n     NonNullAttribute = 1 << 44,\n }\n \n+impl Copy for OtherAttribute {}\n+\n pub enum SpecialAttribute {\n     DereferenceableAttribute(u64)\n }\n \n+impl Copy for SpecialAttribute {}\n+\n #[repr(C)]\n pub enum AttributeSet {\n     ReturnIndex = 0,\n     FunctionIndex = !0\n }\n \n+impl Copy for AttributeSet {}\n+\n pub trait AttrHelper {\n     fn apply_llfn(&self, idx: c_uint, llfn: ValueRef);\n     fn apply_callsite(&self, idx: c_uint, callsite: ValueRef);\n@@ -271,6 +287,8 @@ pub enum IntPredicate {\n     IntSLE = 41,\n }\n \n+impl Copy for IntPredicate {}\n+\n // enum for the LLVM RealPredicate type\n pub enum RealPredicate {\n     RealPredicateFalse = 0,\n@@ -291,6 +309,8 @@ pub enum RealPredicate {\n     RealPredicateTrue = 15,\n }\n \n+impl Copy for RealPredicate {}\n+\n // The LLVM TypeKind type - must stay in sync with the def of\n // LLVMTypeKind in llvm/include/llvm-c/Core.h\n #[deriving(PartialEq)]\n@@ -314,6 +334,8 @@ pub enum TypeKind {\n     X86_MMX   = 15,\n }\n \n+impl Copy for TypeKind {}\n+\n #[repr(C)]\n pub enum AtomicBinOp {\n     AtomicXchg = 0,\n@@ -329,6 +351,8 @@ pub enum AtomicBinOp {\n     AtomicUMin = 10,\n }\n \n+impl Copy for AtomicBinOp {}\n+\n #[repr(C)]\n pub enum AtomicOrdering {\n     NotAtomic = 0,\n@@ -341,13 +365,17 @@ pub enum AtomicOrdering {\n     SequentiallyConsistent = 7\n }\n \n+impl Copy for AtomicOrdering {}\n+\n // Consts for the LLVMCodeGenFileType type (in include/llvm/c/TargetMachine.h)\n #[repr(C)]\n pub enum FileType {\n     AssemblyFileType = 0,\n     ObjectFileType = 1\n }\n \n+impl Copy for FileType {}\n+\n pub enum MetadataType {\n     MD_dbg = 0,\n     MD_tbaa = 1,\n@@ -357,12 +385,16 @@ pub enum MetadataType {\n     MD_tbaa_struct = 5\n }\n \n+impl Copy for MetadataType {}\n+\n // Inline Asm Dialect\n pub enum AsmDialect {\n     AD_ATT   = 0,\n     AD_Intel = 1\n }\n \n+impl Copy for AsmDialect {}\n+\n #[deriving(PartialEq, Clone)]\n #[repr(C)]\n pub enum CodeGenOptLevel {\n@@ -372,6 +404,8 @@ pub enum CodeGenOptLevel {\n     CodeGenLevelAggressive = 3,\n }\n \n+impl Copy for CodeGenOptLevel {}\n+\n #[deriving(PartialEq)]\n #[repr(C)]\n pub enum RelocMode {\n@@ -381,6 +415,8 @@ pub enum RelocMode {\n     RelocDynamicNoPic = 3,\n }\n \n+impl Copy for RelocMode {}\n+\n #[repr(C)]\n pub enum CodeGenModel {\n     CodeModelDefault = 0,\n@@ -391,6 +427,8 @@ pub enum CodeGenModel {\n     CodeModelLarge = 5,\n }\n \n+impl Copy for CodeGenModel {}\n+\n #[repr(C)]\n pub enum DiagnosticKind {\n     DK_InlineAsm = 0,\n@@ -403,47 +441,70 @@ pub enum DiagnosticKind {\n     DK_OptimizationFailure,\n }\n \n+impl Copy for DiagnosticKind {}\n+\n // Opaque pointer types\n+#[allow(missing_copy_implementations)]\n pub enum Module_opaque {}\n pub type ModuleRef = *mut Module_opaque;\n+#[allow(missing_copy_implementations)]\n pub enum Context_opaque {}\n pub type ContextRef = *mut Context_opaque;\n+#[allow(missing_copy_implementations)]\n pub enum Type_opaque {}\n pub type TypeRef = *mut Type_opaque;\n+#[allow(missing_copy_implementations)]\n pub enum Value_opaque {}\n pub type ValueRef = *mut Value_opaque;\n+#[allow(missing_copy_implementations)]\n pub enum BasicBlock_opaque {}\n pub type BasicBlockRef = *mut BasicBlock_opaque;\n+#[allow(missing_copy_implementations)]\n pub enum Builder_opaque {}\n pub type BuilderRef = *mut Builder_opaque;\n+#[allow(missing_copy_implementations)]\n pub enum ExecutionEngine_opaque {}\n pub type ExecutionEngineRef = *mut ExecutionEngine_opaque;\n+#[allow(missing_copy_implementations)]\n pub enum MemoryBuffer_opaque {}\n pub type MemoryBufferRef = *mut MemoryBuffer_opaque;\n+#[allow(missing_copy_implementations)]\n pub enum PassManager_opaque {}\n pub type PassManagerRef = *mut PassManager_opaque;\n+#[allow(missing_copy_implementations)]\n pub enum PassManagerBuilder_opaque {}\n pub type PassManagerBuilderRef = *mut PassManagerBuilder_opaque;\n+#[allow(missing_copy_implementations)]\n pub enum Use_opaque {}\n pub type UseRef = *mut Use_opaque;\n+#[allow(missing_copy_implementations)]\n pub enum TargetData_opaque {}\n pub type TargetDataRef = *mut TargetData_opaque;\n+#[allow(missing_copy_implementations)]\n pub enum ObjectFile_opaque {}\n pub type ObjectFileRef = *mut ObjectFile_opaque;\n+#[allow(missing_copy_implementations)]\n pub enum SectionIterator_opaque {}\n pub type SectionIteratorRef = *mut SectionIterator_opaque;\n+#[allow(missing_copy_implementations)]\n pub enum Pass_opaque {}\n pub type PassRef = *mut Pass_opaque;\n+#[allow(missing_copy_implementations)]\n pub enum TargetMachine_opaque {}\n pub type TargetMachineRef = *mut TargetMachine_opaque;\n+#[allow(missing_copy_implementations)]\n pub enum Archive_opaque {}\n pub type ArchiveRef = *mut Archive_opaque;\n+#[allow(missing_copy_implementations)]\n pub enum Twine_opaque {}\n pub type TwineRef = *mut Twine_opaque;\n+#[allow(missing_copy_implementations)]\n pub enum DiagnosticInfo_opaque {}\n pub type DiagnosticInfoRef = *mut DiagnosticInfo_opaque;\n+#[allow(missing_copy_implementations)]\n pub enum DebugLoc_opaque {}\n pub type DebugLocRef = *mut DebugLoc_opaque;\n+#[allow(missing_copy_implementations)]\n pub enum SMDiagnostic_opaque {}\n pub type SMDiagnosticRef = *mut SMDiagnostic_opaque;\n \n@@ -454,6 +515,7 @@ pub mod debuginfo {\n     pub use self::DIDescriptorFlags::*;\n     use super::{ValueRef};\n \n+    #[allow(missing_copy_implementations)]\n     pub enum DIBuilder_opaque {}\n     pub type DIBuilderRef = *mut DIBuilder_opaque;\n \n@@ -490,6 +552,8 @@ pub mod debuginfo {\n       FlagLValueReference    = 1 << 14,\n       FlagRValueReference    = 1 << 15\n     }\n+\n+    impl Copy for DIDescriptorFlags {}\n }\n \n \n@@ -2123,6 +2187,7 @@ pub fn get_param(llfn: ValueRef, index: c_uint) -> ValueRef {\n     }\n }\n \n+#[allow(missing_copy_implementations)]\n pub enum RustString_opaque {}\n pub type RustStringRef = *mut RustString_opaque;\n type RustStringRepr = *mut RefCell<Vec<u8>>;"}, {"sha": "0ed6ae311711fc747b79cd4ddbcdb1f37a5138da", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -33,6 +33,17 @@ use std::sync::{Arc, Mutex};\n use std::task::TaskBuilder;\n use libc::{c_uint, c_int, c_void};\n \n+#[deriving(Clone, PartialEq, PartialOrd, Ord, Eq)]\n+pub enum OutputType {\n+    OutputTypeBitcode,\n+    OutputTypeAssembly,\n+    OutputTypeLlvmAssembly,\n+    OutputTypeObject,\n+    OutputTypeExe,\n+}\n+\n+impl Copy for OutputType {}\n+\n pub fn llvm_err(handler: &diagnostic::Handler, msg: String) -> ! {\n     unsafe {\n         let cstr = llvm::LLVMRustGetLastError();"}, {"sha": "2a698a898fe871a91d390def4097447100eafc28", "filename": "src/librustc_trans/save/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fmod.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -249,7 +249,7 @@ impl <'l, 'tcx> DxrVisitor<'l, 'tcx> {\n             self.collecting = true;\n             self.visit_pat(&*arg.pat);\n             self.collecting = false;\n-            let span_utils = self.span;\n+            let span_utils = self.span.clone();\n             for &(id, ref p, _, _) in self.collected_paths.iter() {\n                 let typ = ppaux::ty_to_string(&self.analysis.ty_cx,\n                     (*self.analysis.ty_cx.node_types.borrow())[id]);"}, {"sha": "c15ff1d7f0a9d2fc00098d5766dc64ae6be60446", "filename": "src/librustc_trans/save/recorder.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc_trans%2Fsave%2Frecorder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc_trans%2Fsave%2Frecorder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Frecorder.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -87,6 +87,8 @@ pub enum Row {\n     FnRef,\n }\n \n+impl Copy for Row {}\n+\n impl<'a> FmtStrs<'a> {\n     pub fn new(rec: Box<Recorder>, span: SpanUtils<'a>, krate: String) -> FmtStrs<'a> {\n         FmtStrs {\n@@ -223,7 +225,10 @@ impl<'a> FmtStrs<'a> {\n \n         if self.recorder.dump_spans {\n             if dump_spans {\n-                self.recorder.dump_span(self.span, label, span, Some(sub_span));\n+                self.recorder.dump_span(self.span.clone(),\n+                                        label,\n+                                        span,\n+                                        Some(sub_span));\n             }\n             return;\n         }"}, {"sha": "49e8e0fd3471421f3640ae12a866662a6d00e7a7", "filename": "src/librustc_trans/save/span_utils.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc_trans%2Fsave%2Fspan_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc_trans%2Fsave%2Fspan_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fspan_utils.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -21,6 +21,7 @@ use syntax::parse::lexer::{Reader,StringReader};\n use syntax::parse::token;\n use syntax::parse::token::{keywords, Token};\n \n+#[deriving(Clone)]\n pub struct SpanUtils<'a> {\n     pub sess: &'a Session,\n     pub err_count: Cell<int>,"}, {"sha": "1ed06938e95c878e8fcc1044aa6465676bb81105", "filename": "src/librustc_trans/trans/_match.rs", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2F_match.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -231,6 +231,8 @@ use syntax::ptr::P;\n #[deriving(Show)]\n struct ConstantExpr<'a>(&'a ast::Expr);\n \n+impl<'a> Copy for ConstantExpr<'a> {}\n+\n impl<'a> ConstantExpr<'a> {\n     fn eq(self, other: ConstantExpr<'a>, tcx: &ty::ctxt) -> bool {\n         let ConstantExpr(expr) = self;\n@@ -308,6 +310,8 @@ pub enum BranchKind {\n     CompareSliceLength\n }\n \n+impl Copy for BranchKind {}\n+\n pub enum OptResult<'blk, 'tcx: 'blk> {\n     SingleResult(Result<'blk, 'tcx>),\n     RangeResult(Result<'blk, 'tcx>, Result<'blk, 'tcx>),\n@@ -321,6 +325,8 @@ pub enum TransBindingMode {\n     TrByRef,\n }\n \n+impl Copy for TransBindingMode {}\n+\n /// Information about a pattern binding:\n /// - `llmatch` is a pointer to a stack slot.  The stack slot contains a\n ///   pointer into the value being matched.  Hence, llmatch has type `T**`\n@@ -337,6 +343,8 @@ pub struct BindingInfo<'tcx> {\n     pub ty: Ty<'tcx>,\n }\n \n+impl<'tcx> Copy for BindingInfo<'tcx> {}\n+\n type BindingsMap<'tcx> = FnvHashMap<Ident, BindingInfo<'tcx>>;\n \n struct ArmData<'p, 'blk, 'tcx: 'blk> {\n@@ -543,7 +551,11 @@ fn enter_opt<'a, 'p, 'blk, 'tcx>(\n             check_match::Constructor::Variant(def_id)\n     };\n \n-    let mcx = check_match::MatchCheckCtxt { tcx: bcx.tcx() };\n+    let param_env = ty::empty_parameter_environment();\n+    let mcx = check_match::MatchCheckCtxt {\n+        tcx: bcx.tcx(),\n+        param_env: param_env,\n+    };\n     enter_match(bcx, dm, m, col, val, |pats|\n         check_match::specialize(&mcx, pats.as_slice(), &ctor, col, variant_size)\n     )\n@@ -1001,7 +1013,10 @@ fn compile_submatch_continue<'a, 'p, 'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n         node_id_type(bcx, pat_id)\n     };\n \n-    let mcx = check_match::MatchCheckCtxt { tcx: bcx.tcx() };\n+    let mcx = check_match::MatchCheckCtxt {\n+        tcx: bcx.tcx(),\n+        param_env: ty::empty_parameter_environment(),\n+    };\n     let adt_vals = if any_irrefutable_adt_pat(bcx.tcx(), m, col) {\n         let repr = adt::represent_type(bcx.ccx(), left_ty);\n         let arg_count = adt::num_args(&*repr, 0);\n@@ -1254,7 +1269,8 @@ fn is_discr_reassigned(bcx: Block, discr: &ast::Expr, body: &ast::Expr) -> bool\n         reassigned: false\n     };\n     {\n-        let mut visitor = euv::ExprUseVisitor::new(&mut rc, bcx);\n+        let param_env = ty::empty_parameter_environment();\n+        let mut visitor = euv::ExprUseVisitor::new(&mut rc, bcx, param_env);\n         visitor.walk_expr(body);\n     }\n     rc.reassigned\n@@ -1312,12 +1328,15 @@ fn create_bindings_map<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, pat: &ast::Pat,\n         let variable_ty = node_id_type(bcx, p_id);\n         let llvariable_ty = type_of::type_of(ccx, variable_ty);\n         let tcx = bcx.tcx();\n+        let param_env = ty::empty_parameter_environment();\n \n         let llmatch;\n         let trmode;\n         match bm {\n             ast::BindByValue(_)\n-                if !ty::type_moves_by_default(tcx, variable_ty) || reassigned => {\n+                if !ty::type_moves_by_default(tcx,\n+                                              variable_ty,\n+                                              &param_env) || reassigned => {\n                 llmatch = alloca_no_lifetime(bcx,\n                                  llvariable_ty.ptr_to(),\n                                  \"__llmatch\");"}, {"sha": "e273a56ce025b2b33f616b4f63cbde4373ab833a", "filename": "src/librustc_trans/trans/adt.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc_trans%2Ftrans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc_trans%2Ftrans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fadt.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -287,8 +287,11 @@ pub enum PointerField {\n     FatPointer(uint)\n }\n \n+impl Copy for PointerField {}\n+\n impl<'tcx> Case<'tcx> {\n-    fn is_zerolen<'a>(&self, cx: &CrateContext<'a, 'tcx>, scapegoat: Ty<'tcx>) -> bool {\n+    fn is_zerolen<'a>(&self, cx: &CrateContext<'a, 'tcx>, scapegoat: Ty<'tcx>)\n+                      -> bool {\n         mk_struct(cx, self.tys.as_slice(), false, scapegoat).size == 0\n     }\n "}, {"sha": "cef12616cf267178b2301fc5c196488ffdd02afc", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -90,6 +90,7 @@ use libc::{c_uint, uint64_t};\n use std::c_str::ToCStr;\n use std::cell::{Cell, RefCell};\n use std::collections::HashSet;\n+use std::mem;\n use std::rc::Rc;\n use std::{i8, i16, i32, i64};\n use syntax::abi::{Rust, RustCall, RustIntrinsic, Abi};\n@@ -562,6 +563,8 @@ pub fn maybe_name_value(cx: &CrateContext, v: ValueRef, s: &str) {\n // Used only for creating scalar comparison glue.\n pub enum scalar_type { nil_type, signed_int, unsigned_int, floating_point, }\n \n+impl Copy for scalar_type {}\n+\n pub fn compare_scalar_types<'blk, 'tcx>(cx: Block<'blk, 'tcx>,\n                                         lhs: ValueRef,\n                                         rhs: ValueRef,\n@@ -813,7 +816,10 @@ pub fn iter_structural_ty<'a, 'blk, 'tcx>(cx: Block<'blk, 'tcx>,\n                                       in iter_structural_ty\")\n           }\n       }\n-      _ => cx.sess().unimpl(\"type in iter_structural_ty\")\n+      _ => {\n+          cx.sess().unimpl(format!(\"type in iter_structural_ty: {}\",\n+                                   ty_to_string(cx.tcx(), t)).as_slice())\n+      }\n     }\n     return cx;\n }\n@@ -1778,6 +1784,14 @@ pub fn build_return_block<'blk, 'tcx>(fcx: &FunctionContext<'blk, 'tcx>,\n     }\n }\n \n+#[deriving(Clone, Eq, PartialEq)]\n+pub enum IsUnboxedClosureFlag {\n+    NotUnboxedClosure,\n+    IsUnboxedClosure,\n+}\n+\n+impl Copy for IsUnboxedClosureFlag {}\n+\n // trans_closure: Builds an LLVM function out of a source function.\n // If the function closes over its environment a closure will be\n // returned.\n@@ -2182,6 +2196,8 @@ pub enum ValueOrigin {\n     InlinedCopy,\n }\n \n+impl Copy for ValueOrigin {}\n+\n /// Set the appropriate linkage for an LLVM `ValueRef` (function or global).\n /// If the `llval` is the direct translation of a specific Rust item, `id`\n /// should be set to the `NodeId` of that item.  (This mapping should be\n@@ -3036,7 +3052,11 @@ fn internalize_symbols(cx: &SharedCrateContext, reachable: &HashSet<String>) {\n         fn next(&mut self) -> Option<ValueRef> {\n             let old = self.cur;\n             if !old.is_null() {\n-                self.cur = unsafe { (self.step)(old) };\n+                self.cur = unsafe {\n+                    let step: unsafe extern \"C\" fn(ValueRef) -> ValueRef =\n+                        mem::transmute_copy(&self.step);\n+                    step(old)\n+                };\n                 Some(old)\n             } else {\n                 None"}, {"sha": "b55c268d9a909d22191bcb726012a559a34b9932", "filename": "src/librustc_trans/trans/basic_block.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc_trans%2Ftrans%2Fbasic_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc_trans%2Ftrans%2Fbasic_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbasic_block.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -15,6 +15,8 @@ use std::iter::{Filter, Map};\n \n pub struct BasicBlock(pub BasicBlockRef);\n \n+impl Copy for BasicBlock {}\n+\n pub type Preds<'a> = Map<'a, Value, BasicBlock, Filter<'a, Value, Users>>;\n \n /// Wrapper for LLVM BasicBlockRef"}, {"sha": "7aabd998f7aaeac5cd2021ce8735ede3d2c1c7e7", "filename": "src/librustc_trans/trans/cabi.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc_trans%2Ftrans%2Fcabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc_trans%2Ftrans%2Fcabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcabi.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -31,6 +31,8 @@ pub enum ArgKind {\n     Ignore,\n }\n \n+impl Copy for ArgKind {}\n+\n /// Information about how a specific C type\n /// should be passed to or returned from a function\n ///\n@@ -48,6 +50,8 @@ pub struct ArgType {\n     pub attr: option::Option<Attribute>\n }\n \n+impl Copy for ArgType {}\n+\n impl ArgType {\n     pub fn direct(ty: Type, cast: option::Option<Type>,\n                             pad: option::Option<Type>,"}, {"sha": "00c91ddebb38ebf31331f1974d1f0bbbd534c95e", "filename": "src/librustc_trans/trans/cabi_x86_64.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc_trans%2Ftrans%2Fcabi_x86_64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc_trans%2Ftrans%2Fcabi_x86_64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcabi_x86_64.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -40,6 +40,8 @@ enum RegClass {\n     Memory\n }\n \n+impl Copy for RegClass {}\n+\n trait TypeMethods {\n     fn is_reg_ty(&self) -> bool;\n }"}, {"sha": "ff7ab91c39a58edbecc42b4d0466b96eb97937fa", "filename": "src/librustc_trans/trans/callee.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -63,6 +63,8 @@ pub struct MethodData {\n     pub llself: ValueRef,\n }\n \n+impl Copy for MethodData {}\n+\n pub enum CalleeData<'tcx> {\n     Closure(Datum<'tcx, Lvalue>),\n \n@@ -1200,6 +1202,8 @@ pub enum AutorefArg {\n     DoAutorefArg(ast::NodeId)\n }\n \n+impl Copy for AutorefArg {}\n+\n pub fn trans_arg_datum<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                                    formal_arg_ty: Ty<'tcx>,\n                                    arg_datum: Datum<'tcx, Expr>,"}, {"sha": "ba3e70fe036fc475720784055f64b2c34b82cf23", "filename": "src/librustc_trans/trans/cleanup.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc_trans%2Ftrans%2Fcleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc_trans%2Ftrans%2Fcleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcleanup.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -55,6 +55,8 @@ pub struct CustomScopeIndex {\n     index: uint\n }\n \n+impl Copy for CustomScopeIndex {}\n+\n pub const EXIT_BREAK: uint = 0;\n pub const EXIT_LOOP: uint = 1;\n pub const EXIT_MAX: uint = 2;\n@@ -88,11 +90,15 @@ pub enum EarlyExitLabel {\n     LoopExit(ast::NodeId, uint)\n }\n \n+impl Copy for EarlyExitLabel {}\n+\n pub struct CachedEarlyExit {\n     label: EarlyExitLabel,\n     cleanup_block: BasicBlockRef,\n }\n \n+impl Copy for CachedEarlyExit {}\n+\n pub trait Cleanup<'tcx> {\n     fn must_unwind(&self) -> bool;\n     fn clean_on_unwind(&self) -> bool;\n@@ -111,6 +117,8 @@ pub enum ScopeId {\n     CustomScope(CustomScopeIndex)\n }\n \n+impl Copy for ScopeId {}\n+\n impl<'blk, 'tcx> CleanupMethods<'blk, 'tcx> for FunctionContext<'blk, 'tcx> {\n     /// Invoked when we start to trans the code contained within a new cleanup scope.\n     fn push_ast_cleanup_scope(&self, debug_loc: NodeInfo) {\n@@ -876,6 +884,8 @@ pub struct DropValue<'tcx> {\n     zero: bool\n }\n \n+impl<'tcx> Copy for DropValue<'tcx> {}\n+\n impl<'tcx> Cleanup<'tcx> for DropValue<'tcx> {\n     fn must_unwind(&self) -> bool {\n         self.must_unwind\n@@ -910,12 +920,16 @@ pub enum Heap {\n     HeapExchange\n }\n \n+impl Copy for Heap {}\n+\n pub struct FreeValue<'tcx> {\n     ptr: ValueRef,\n     heap: Heap,\n     content_ty: Ty<'tcx>\n }\n \n+impl<'tcx> Copy for FreeValue<'tcx> {}\n+\n impl<'tcx> Cleanup<'tcx> for FreeValue<'tcx> {\n     fn must_unwind(&self) -> bool {\n         true\n@@ -950,6 +964,8 @@ pub struct FreeSlice {\n     heap: Heap,\n }\n \n+impl Copy for FreeSlice {}\n+\n impl<'tcx> Cleanup<'tcx> for FreeSlice {\n     fn must_unwind(&self) -> bool {\n         true\n@@ -981,6 +997,8 @@ pub struct LifetimeEnd {\n     ptr: ValueRef,\n }\n \n+impl Copy for LifetimeEnd {}\n+\n impl<'tcx> Cleanup<'tcx> for LifetimeEnd {\n     fn must_unwind(&self) -> bool {\n         false"}, {"sha": "b03f5ff8ecc9c13b8b1c99aa86743b34f1a476cd", "filename": "src/librustc_trans/trans/closure.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -107,6 +107,8 @@ pub struct EnvValue<'tcx> {\n     datum: Datum<'tcx, Lvalue>\n }\n \n+impl<'tcx> Copy for EnvValue<'tcx> {}\n+\n impl<'tcx> EnvValue<'tcx> {\n     pub fn to_string<'a>(&self, ccx: &CrateContext<'a, 'tcx>) -> String {\n         format!(\"{}({})\", self.action, self.datum.to_string(ccx))"}, {"sha": "77412b00299ba672ef2a38676498d68e09ca521f", "filename": "src/librustc_trans/trans/common.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -127,6 +127,8 @@ pub struct tydesc_info<'tcx> {\n     pub name: ValueRef,\n }\n \n+impl<'tcx> Copy for tydesc_info<'tcx> {}\n+\n /*\n  * A note on nomenclature of linking: \"extern\", \"foreign\", and \"upcall\".\n  *\n@@ -158,6 +160,8 @@ pub struct NodeInfo {\n     pub span: Span,\n }\n \n+impl Copy for NodeInfo {}\n+\n pub fn expr_info(expr: &ast::Expr) -> NodeInfo {\n     NodeInfo { id: expr.id, span: expr.span }\n }\n@@ -867,10 +871,11 @@ pub enum ExprOrMethodCall {\n     MethodCall(ty::MethodCall)\n }\n \n+impl Copy for ExprOrMethodCall {}\n+\n pub fn node_id_substs<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                                   node: ExprOrMethodCall)\n-                                  -> subst::Substs<'tcx>\n-{\n+                                  -> subst::Substs<'tcx> {\n     let tcx = bcx.tcx();\n \n     let substs = match node {"}, {"sha": "23a261842b2d57443889fbf4a787674c8fb277b7", "filename": "src/librustc_trans/trans/datum.rs", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc_trans%2Ftrans%2Fdatum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc_trans%2Ftrans%2Fdatum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdatum.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -46,6 +46,8 @@ pub struct Datum<'tcx, K> {\n     pub kind: K,\n }\n \n+impl<'tcx,K:Copy> Copy for Datum<'tcx,K> {}\n+\n pub struct DatumBlock<'blk, 'tcx: 'blk, K> {\n     pub bcx: Block<'blk, 'tcx>,\n     pub datum: Datum<'tcx, K>,\n@@ -66,6 +68,8 @@ pub enum Expr {\n #[deriving(Clone, Show)]\n pub struct Lvalue;\n \n+impl Copy for Lvalue {}\n+\n #[deriving(Show)]\n pub struct Rvalue {\n     pub mode: RvalueMode\n@@ -91,6 +95,8 @@ pub enum RvalueMode {\n     ByValue,\n }\n \n+impl Copy for RvalueMode {}\n+\n pub fn immediate_rvalue<'tcx>(val: ValueRef, ty: Ty<'tcx>) -> Datum<'tcx, Rvalue> {\n     return Datum::new(val, ty, Rvalue::new(ByValue));\n }\n@@ -529,11 +535,19 @@ impl<'tcx, K: KindOps + fmt::Show> Datum<'tcx, K> {\n     /// Copies the value into a new location. This function always preserves the existing datum as\n     /// a valid value. Therefore, it does not consume `self` and, also, cannot be applied to affine\n     /// values (since they must never be duplicated).\n-    pub fn shallow_copy<'blk>(&self,\n-                              bcx: Block<'blk, 'tcx>,\n-                              dst: ValueRef)\n-                              -> Block<'blk, 'tcx> {\n-        assert!(!ty::type_moves_by_default(bcx.tcx(), self.ty));\n+    pub fn shallow_copy<'blk, 'tcx>(&self,\n+                                    bcx: Block<'blk, 'tcx>,\n+                                    dst: ValueRef)\n+                                    -> Block<'blk, 'tcx> {\n+        /*!\n+         * Copies the value into a new location. This function always\n+         * preserves the existing datum as a valid value. Therefore,\n+         * it does not consume `self` and, also, cannot be applied to\n+         * affine values (since they must never be duplicated).\n+         */\n+\n+        let param_env = ty::empty_parameter_environment();\n+        assert!(!ty::type_moves_by_default(bcx.tcx(), self.ty, &param_env));\n         self.shallow_copy_raw(bcx, dst)\n     }\n "}, {"sha": "88a66320c0e4869fcd0dcf625a1fb0dfd0b4cd42", "filename": "src/librustc_trans/trans/debuginfo.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -251,6 +251,8 @@ static FLAGS_NONE: c_uint = 0;\n #[deriving(Show, Hash, Eq, PartialEq, Clone)]\n struct UniqueTypeId(ast::Name);\n \n+impl Copy for UniqueTypeId {}\n+\n // The TypeMap is where the CrateDebugContext holds the type metadata nodes\n // created so far. The metadata nodes are indexed by UniqueTypeId, and, for\n // faster lookup, also by Ty. The TypeMap is responsible for creating\n@@ -2323,6 +2325,8 @@ enum EnumDiscriminantInfo {\n     NoDiscriminant\n }\n \n+impl Copy for EnumDiscriminantInfo {}\n+\n // Returns a tuple of (1) type_metadata_stub of the variant, (2) the llvm_type\n // of the variant, and (3) a MemberDescriptionFactory for producing the\n // descriptions of the fields of the variant. This is a rudimentary version of a\n@@ -3048,6 +3052,8 @@ enum DebugLocation {\n     UnknownLocation\n }\n \n+impl Copy for DebugLocation {}\n+\n impl DebugLocation {\n     fn new(scope: DIScope, line: uint, col: uint) -> DebugLocation {\n         KnownLocation {"}, {"sha": "e3e6fff723410ad29d4caacd8028aacaa59b2b01", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -79,6 +79,8 @@ pub enum Dest {\n     Ignore,\n }\n \n+impl Copy for Dest {}\n+\n impl Dest {\n     pub fn to_string(&self, ccx: &CrateContext) -> String {\n         match *self {\n@@ -1882,6 +1884,8 @@ pub enum cast_kind {\n     cast_other,\n }\n \n+impl Copy for cast_kind {}\n+\n pub fn cast_type_kind<'tcx>(tcx: &ty::ctxt<'tcx>, t: Ty<'tcx>) -> cast_kind {\n     match t.sty {\n         ty::ty_char        => cast_integral,"}, {"sha": "9234dfc48bd66dee344d6f4c5c8ff38278103bc1", "filename": "src/librustc_trans/trans/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc_trans%2Ftrans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc_trans%2Ftrans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmod.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -59,6 +59,8 @@ pub struct ModuleTranslation {\n     pub llmod: ModuleRef,\n }\n \n+impl Copy for ModuleTranslation {}\n+\n pub struct CrateTranslation {\n     pub modules: Vec<ModuleTranslation>,\n     pub metadata_module: ModuleTranslation,"}, {"sha": "18ea8055a4eb5367d2b719ecf78387d20cd92f08", "filename": "src/librustc_trans/trans/tvec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc_trans%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc_trans%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Ftvec.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -96,6 +96,8 @@ pub struct VecTypes<'tcx> {\n     pub llunit_alloc_size: u64\n }\n \n+impl<'tcx> Copy for VecTypes<'tcx> {}\n+\n impl<'tcx> VecTypes<'tcx> {\n     pub fn to_string<'a>(&self, ccx: &CrateContext<'a, 'tcx>) -> String {\n         format!(\"VecTypes {{unit_ty={}, llunit_ty={}, \\\n@@ -301,8 +303,6 @@ pub fn write_content<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                         1 => expr::trans_into(bcx, &**element, SaveIn(lldest)),\n                         count => {\n                             let elem = unpack_datum!(bcx, expr::trans(bcx, &**element));\n-                            assert!(!ty::type_moves_by_default(bcx.tcx(), elem.ty));\n-\n                             let bcx = iter_vec_loop(bcx, lldest, vt,\n                                                     C_uint(bcx.ccx(), count),\n                                                     |set_bcx, lleltptr, _| {"}, {"sha": "387af7390b209ec844917ee29f8f389d618bfd57", "filename": "src/librustc_trans/trans/type_.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc_trans%2Ftrans%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc_trans%2Ftrans%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Ftype_.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -31,6 +31,8 @@ pub struct Type {\n     rf: TypeRef\n }\n \n+impl Copy for Type {}\n+\n macro_rules! ty (\n     ($e:expr) => ( Type::from_ref(unsafe { $e }))\n )"}, {"sha": "adc919c91bf36b8556b627d0ff71a81e47c6f809", "filename": "src/librustc_trans/trans/type_of.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -449,12 +449,13 @@ pub enum named_ty {\n     an_unboxed_closure,\n }\n \n+impl Copy for named_ty {}\n+\n pub fn llvm_type_name<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                                 what: named_ty,\n                                 did: ast::DefId,\n                                 tps: &[Ty<'tcx>])\n-                                -> String\n-{\n+                                -> String {\n     let name = match what {\n         a_struct => \"struct\",\n         an_enum => \"enum\","}, {"sha": "fa06e039023e1b7596e708689ba2bca231d06ba2", "filename": "src/librustc_trans/trans/value.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc_trans%2Ftrans%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc_trans%2Ftrans%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fvalue.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -16,6 +16,8 @@ use libc::c_uint;\n \n pub struct Value(pub ValueRef);\n \n+impl Copy for Value {}\n+\n macro_rules! opt_val ( ($e:expr) => (\n     unsafe {\n         match $e {\n@@ -123,9 +125,14 @@ impl Value {\n     }\n }\n \n+/// Wrapper for LLVM UseRef\n pub struct Use(UseRef);\n \n-/// Wrapper for LLVM UseRef\n+impl Copy for Use {}\n+\n+/**\n+ * Wrapper for LLVM UseRef\n+ */\n impl Use {\n     pub fn get(&self) -> UseRef {\n         let Use(v) = *self; v\n@@ -148,6 +155,7 @@ impl Use {\n }\n \n /// Iterator for the users of a value\n+#[allow(missing_copy_implementations)]\n pub struct Users {\n     next: Option<Use>\n }"}, {"sha": "b6c9d8b2d2176fcb8438706b201ad0b3bd0e66b1", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -52,6 +52,8 @@ pub enum CandidateSource {\n     TraitSource(/* trait id */ ast::DefId),\n }\n \n+impl Copy for CandidateSource {}\n+\n type MethodIndex = uint; // just for doc purposes\n \n /// Determines whether the type `self_ty` supports a method name `method_name` or not."}, {"sha": "e42c9c200116167a919694718e215e39ed675042", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -209,13 +209,17 @@ enum Expectation<'tcx> {\n     ExpectCastableToType(Ty<'tcx>),\n }\n \n+impl<'tcx> Copy for Expectation<'tcx> {}\n+\n #[deriving(Clone)]\n pub struct FnStyleState {\n     pub def: ast::NodeId,\n     pub fn_style: ast::FnStyle,\n     from_fn: bool\n }\n \n+impl Copy for FnStyleState {}\n+\n impl FnStyleState {\n     pub fn function(fn_style: ast::FnStyle, def: ast::NodeId) -> FnStyleState {\n         FnStyleState { def: def, fn_style: fn_style, from_fn: true }\n@@ -2117,6 +2121,8 @@ pub enum LvaluePreference {\n     NoPreference\n }\n \n+impl Copy for LvaluePreference {}\n+\n /// Executes an autoderef loop for the type `t`. At each step, invokes `should_stop` to decide\n /// whether to terminate the loop. Returns the final type and number of derefs that it performed.\n ///\n@@ -2993,6 +2999,8 @@ pub enum DerefArgs {\n     DoDerefArgs\n }\n \n+impl Copy for DerefArgs {}\n+\n /// Controls whether the arguments are tupled. This is used for the call\n /// operator.\n ///"}, {"sha": "a011982a1fc53b2613e412ed1c2636e5c66909aa", "filename": "src/librustc_typeck/check/wf.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -203,6 +203,11 @@ impl<'ccx, 'tcx> CheckTypeWellFormedVisitor<'ccx, 'tcx> {\n                 }\n             }\n \n+            if fcx.tcx().lang_items.copy_trait() == Some(trait_ref.def_id) {\n+                // This is checked in coherence.\n+                return\n+            }\n+\n             // We are stricter on the trait-ref in an impl than the\n             // self-type.  In particular, we enforce region\n             // relationships. The reason for this is that (at least"}, {"sha": "48f1ef8da1d54672cc6fb4b1264f6d1aab3cbc82", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -354,6 +354,8 @@ enum ResolveReason {\n     ResolvingUnboxedClosure(ast::DefId),\n }\n \n+impl Copy for ResolveReason {}\n+\n impl ResolveReason {\n     fn span(&self, tcx: &ty::ctxt) -> Span {\n         match *self {"}, {"sha": "578ed916541e4c94eb3870989db33e19fe9eb1f2", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 73, "deletions": 7, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -18,17 +18,15 @@\n \n use metadata::csearch::{each_impl, get_impl_trait};\n use metadata::csearch;\n-use middle::subst;\n+use middle::subst::{mod, Subst};\n use middle::ty::{ImplContainer, ImplOrTraitItemId, MethodTraitItemId};\n-use middle::ty::{TypeTraitItemId, lookup_item_type};\n-use middle::ty::{Ty, ty_bool, ty_char, ty_enum, ty_err};\n-use middle::ty::{ty_str, ty_vec, ty_float, ty_infer, ty_int, ty_open};\n+use middle::ty::{ParameterEnvironment, TypeTraitItemId, lookup_item_type};\n+use middle::ty::{Ty, ty_bool, ty_char, ty_closure, ty_enum, ty_err};\n use middle::ty::{ty_param, Polytype, ty_ptr};\n use middle::ty::{ty_rptr, ty_struct, ty_trait, ty_tup};\n+use middle::ty::{ty_str, ty_vec, ty_float, ty_infer, ty_int, ty_open};\n use middle::ty::{ty_uint, ty_unboxed_closure, ty_uniq, ty_bare_fn};\n-use middle::ty::{ty_closure};\n-use middle::ty::type_is_ty_var;\n-use middle::subst::Subst;\n+use middle::ty::{type_is_ty_var};\n use middle::ty;\n use CrateCtxt;\n use middle::infer::combine::Combine;\n@@ -190,6 +188,9 @@ impl<'a, 'tcx> CoherenceChecker<'a, 'tcx> {\n         // do this here, but it's actually the most convenient place, since\n         // the coherence tables contain the trait -> type mappings.\n         self.populate_destructor_table();\n+\n+        // Check to make sure implementations of `Copy` are legal.\n+        self.check_implementations_of_copy();\n     }\n \n     fn check_implementation(&self,\n@@ -474,6 +475,71 @@ impl<'a, 'tcx> CoherenceChecker<'a, 'tcx> {\n             }\n         }\n     }\n+\n+    /// Ensures that implementations of the built-in trait `Copy` are legal.\n+    fn check_implementations_of_copy(&self) {\n+        let tcx = self.crate_context.tcx;\n+        let copy_trait = match tcx.lang_items.copy_trait() {\n+            Some(id) => id,\n+            None => return,\n+        };\n+\n+        let trait_impls = match tcx.trait_impls\n+                                   .borrow()\n+                                   .get(&copy_trait)\n+                                   .cloned() {\n+            None => {\n+                debug!(\"check_implementations_of_copy(): no types with \\\n+                        implementations of `Copy` found\");\n+                return\n+            }\n+            Some(found_impls) => found_impls\n+        };\n+\n+        // Clone first to avoid a double borrow error.\n+        let trait_impls = trait_impls.borrow().clone();\n+\n+        for &impl_did in trait_impls.iter() {\n+            if impl_did.krate != ast::LOCAL_CRATE {\n+                debug!(\"check_implementations_of_copy(): impl not in this \\\n+                        crate\");\n+                continue\n+            }\n+\n+            let self_type = self.get_self_type_for_implementation(impl_did);\n+            let span = tcx.map.span(impl_did.node);\n+            let param_env = ParameterEnvironment::for_item(tcx,\n+                                                           impl_did.node);\n+            let self_type = self_type.ty.subst(tcx, &param_env.free_substs);\n+\n+            match ty::can_type_implement_copy(tcx, self_type, &param_env) {\n+                Ok(()) => {}\n+                Err(ty::FieldDoesNotImplementCopy(name)) => {\n+                    tcx.sess\n+                       .span_err(span,\n+                                 format!(\"the trait `Copy` may not be \\\n+                                          implemented for this type; field \\\n+                                          `{}` does not implement `Copy`\",\n+                                         token::get_name(name)).as_slice())\n+                }\n+                Err(ty::VariantDoesNotImplementCopy(name)) => {\n+                    tcx.sess\n+                       .span_err(span,\n+                                 format!(\"the trait `Copy` may not be \\\n+                                          implemented for this type; variant \\\n+                                          `{}` does not implement `Copy`\",\n+                                         token::get_name(name)).as_slice())\n+                }\n+                Err(ty::TypeIsStructural) => {\n+                    tcx.sess\n+                       .span_err(span,\n+                                 \"the trait `Copy` may not be implemented \\\n+                                  for this type; type is not a structure or \\\n+                                  enumeration\")\n+                }\n+            }\n+        }\n+    }\n }\n \n fn subst_receiver_types_in_method_ty<'tcx>(tcx: &ty::ctxt<'tcx>,"}, {"sha": "74ac9c480defecc280fecc9305903a370895a168", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -499,6 +499,8 @@ enum ConvertMethodContext<'a> {\n     TraitConvertMethodContext(ast::DefId, &'a [ast::TraitItem]),\n }\n \n+impl<'a> Copy for ConvertMethodContext<'a> {}\n+\n fn convert_methods<'a,'tcx,'i,I>(ccx: &CrateCtxt<'a, 'tcx>,\n                                  convert_method_context: ConvertMethodContext,\n                                  container: ImplOrTraitItemContainer,"}, {"sha": "39c7a87837ca100359af572691b0bcc518a9f61e", "filename": "src/librustc_typeck/rscope.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc_typeck%2Frscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc_typeck%2Frscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Frscope.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -38,6 +38,8 @@ pub trait RegionScope {\n // for types that appear in structs and so on.\n pub struct ExplicitRscope;\n \n+impl Copy for ExplicitRscope {}\n+\n impl RegionScope for ExplicitRscope {\n     fn default_region_bound(&self, _span: Span) -> Option<ty::Region> {\n         None\n@@ -77,6 +79,7 @@ impl RegionScope for UnelidableRscope {\n // A scope in which any omitted region defaults to `default`. This is\n // used after the `->` in function signatures, but also for backwards\n // compatibility with object types. The latter use may go away.\n+#[allow(missing_copy_implementations)]\n pub struct SpecificRscope {\n     default: ty::Region\n }"}, {"sha": "56f974ad665c6a27cfef5a721ebb136c938e5589", "filename": "src/librustc_typeck/variance.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc_typeck%2Fvariance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustc_typeck%2Fvariance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -232,12 +232,16 @@ type VarianceTermPtr<'a> = &'a VarianceTerm<'a>;\n #[deriving(Show)]\n struct InferredIndex(uint);\n \n+impl Copy for InferredIndex {}\n+\n enum VarianceTerm<'a> {\n     ConstantTerm(ty::Variance),\n     TransformTerm(VarianceTermPtr<'a>, VarianceTermPtr<'a>),\n     InferredTerm(InferredIndex),\n }\n \n+impl<'a> Copy for VarianceTerm<'a> {}\n+\n impl<'a> fmt::Show for VarianceTerm<'a> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n@@ -270,6 +274,8 @@ enum ParamKind {\n     RegionParam\n }\n \n+impl Copy for ParamKind {}\n+\n struct InferredInfo<'a> {\n     item_id: ast::NodeId,\n     kind: ParamKind,\n@@ -426,6 +432,8 @@ struct Constraint<'a> {\n     variance: &'a VarianceTerm<'a>,\n }\n \n+impl<'a> Copy for Constraint<'a> {}\n+\n fn add_constraints_from_crate<'a, 'tcx>(terms_cx: TermsContext<'a, 'tcx>,\n                                         krate: &ast::Crate)\n                                         -> ConstraintContext<'a, 'tcx> {\n@@ -1015,7 +1023,7 @@ impl<'a, 'tcx> SolveContext<'a, 'tcx> {\n \n             while index < num_inferred &&\n                   inferred_infos[index].item_id == item_id {\n-                let info = inferred_infos[index];\n+                let info = &inferred_infos[index];\n                 let variance = solutions[index];\n                 debug!(\"Index {} Info {} / {} / {} Variance {}\",\n                        index, info.index, info.kind, info.space, variance);"}, {"sha": "df7b922bd1abc31a4884633a13d4e6c433affb4a", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -1178,6 +1178,8 @@ pub enum PrimitiveType {\n     PrimitiveTuple,\n }\n \n+impl Copy for PrimitiveType {}\n+\n #[deriving(Clone, Encodable, Decodable)]\n pub enum TypeKind {\n     TypeEnum,\n@@ -1190,6 +1192,8 @@ pub enum TypeKind {\n     TypeTypedef,\n }\n \n+impl Copy for TypeKind {}\n+\n impl PrimitiveType {\n     fn from_str(s: &str) -> Option<PrimitiveType> {\n         match s.as_slice() {\n@@ -1843,6 +1847,8 @@ pub enum Mutability {\n     Immutable,\n }\n \n+impl Copy for Mutability {}\n+\n impl Clean<Mutability> for ast::Mutability {\n     fn clean(&self, _: &DocContext) -> Mutability {\n         match self {"}, {"sha": "1aac91c4a5c7ac96b8a71a6c0ad29432260ba7f4", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -82,6 +82,8 @@ pub enum StructType {\n     Unit\n }\n \n+impl Copy for StructType {}\n+\n pub enum TypeBound {\n     RegionBound,\n     TraitBound(ast::TraitRef)"}, {"sha": "68ff2ddbcb0e194440e174e5a2c8adff4fec142b", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -48,6 +48,11 @@ pub struct WhereClause<'a>(pub &'a clean::Generics);\n /// Wrapper struct for emitting type parameter bounds.\n pub struct TyParamBounds<'a>(pub &'a [clean::TyParamBound]);\n \n+impl Copy for VisSpace {}\n+impl Copy for FnStyleSpace {}\n+impl Copy for MutableSpace {}\n+impl Copy for RawMutableSpace {}\n+\n impl VisSpace {\n     pub fn get(&self) -> Option<ast::Visibility> {\n         let VisSpace(v) = *self; v"}, {"sha": "86787e5c805484c6f8c3ca91104e3dc31d47126f", "filename": "src/librustdoc/html/item_type.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -41,6 +41,8 @@ pub enum ItemType {\n     Constant        = 18,\n }\n \n+impl Copy for ItemType {}\n+\n impl ItemType {\n     pub fn from_item(item: &clean::Item) -> ItemType {\n         match item.inner {"}, {"sha": "296493f3ba30012d052b8b2097016056ff1a4b3f", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -225,7 +225,13 @@ struct Source<'a>(&'a str);\n // Helper structs for rendering items/sidebars and carrying along contextual\n // information\n \n-struct Item<'a> { cx: &'a Context, item: &'a clean::Item, }\n+struct Item<'a> {\n+    cx: &'a Context,\n+    item: &'a clean::Item,\n+}\n+\n+impl<'a> Copy for Item<'a> {}\n+\n struct Sidebar<'a> { cx: &'a Context, item: &'a clean::Item, }\n \n /// Struct representing one entry in the JS search index. These are all emitted"}, {"sha": "881270afe140c304a14c1108b6e2e5712328939b", "filename": "src/librustdoc/stability_summary.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustdoc%2Fstability_summary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustdoc%2Fstability_summary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fstability_summary.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -39,6 +39,8 @@ pub struct Counts {\n     pub unmarked: uint,\n }\n \n+impl Copy for Counts {}\n+\n impl Add<Counts, Counts> for Counts {\n     fn add(&self, other: &Counts) -> Counts {\n         Counts {"}, {"sha": "e918a496d55316d3e5ada32472b58c2aed098139", "filename": "src/librustrt/bookkeeping.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustrt%2Fbookkeeping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustrt%2Fbookkeeping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Fbookkeeping.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -26,6 +26,7 @@ use mutex::{StaticNativeMutex, NATIVE_MUTEX_INIT};\n static TASK_COUNT: atomic::AtomicUint = atomic::INIT_ATOMIC_UINT;\n static TASK_LOCK: StaticNativeMutex = NATIVE_MUTEX_INIT;\n \n+#[allow(missing_copy_implementations)]\n pub struct Token { _private: () }\n \n impl Drop for Token {"}, {"sha": "07094f08c5de9684bf7986b5d76d803f72ddbaea", "filename": "src/librustrt/c_str.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustrt%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustrt%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Fc_str.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -85,6 +85,7 @@ use libc;\n ///\n /// This structure wraps a `*libc::c_char`, and will automatically free the\n /// memory it is pointing to when it goes out of scope.\n+#[allow(missing_copy_implementations)]\n pub struct CString {\n     buf: *const libc::c_char,\n     owns_buffer_: bool,"}, {"sha": "5b58ec8fd3a8bb4e834cdeff52cdfebc27bca8e5", "filename": "src/librustrt/mutex.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustrt%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustrt%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Fmutex.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -361,6 +361,7 @@ mod imp {\n \n     #[cfg(any(target_os = \"macos\", target_os = \"ios\"))]\n     mod os {\n+        use core::kinds::Copy;\n         use libc;\n \n         #[cfg(target_arch = \"x86_64\")]\n@@ -384,12 +385,17 @@ mod imp {\n             __sig: libc::c_long,\n             __opaque: [u8, ..__PTHREAD_MUTEX_SIZE__],\n         }\n+\n+        impl Copy for pthread_mutex_t {}\n+\n         #[repr(C)]\n         pub struct pthread_cond_t {\n             __sig: libc::c_long,\n             __opaque: [u8, ..__PTHREAD_COND_SIZE__],\n         }\n \n+        impl Copy for pthread_cond_t {}\n+\n         pub const PTHREAD_MUTEX_INITIALIZER: pthread_mutex_t = pthread_mutex_t {\n             __sig: _PTHREAD_MUTEX_SIG_INIT,\n             __opaque: [0, ..__PTHREAD_MUTEX_SIZE__],\n@@ -402,6 +408,7 @@ mod imp {\n \n     #[cfg(target_os = \"linux\")]\n     mod os {\n+        use core::kinds::Copy;\n         use libc;\n \n         // minus 8 because we have an 'align' field\n@@ -431,12 +438,17 @@ mod imp {\n             __align: libc::c_longlong,\n             size: [u8, ..__SIZEOF_PTHREAD_MUTEX_T],\n         }\n+\n+        impl Copy for pthread_mutex_t {}\n+\n         #[repr(C)]\n         pub struct pthread_cond_t {\n             __align: libc::c_longlong,\n             size: [u8, ..__SIZEOF_PTHREAD_COND_T],\n         }\n \n+        impl Copy for pthread_cond_t {}\n+\n         pub const PTHREAD_MUTEX_INITIALIZER: pthread_mutex_t = pthread_mutex_t {\n             __align: 0,\n             size: [0, ..__SIZEOF_PTHREAD_MUTEX_T],"}, {"sha": "714d30ae4b13e5cad8c18781a75a4356e7cdf106", "filename": "src/librustrt/unwind.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustrt%2Funwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustrt%2Funwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Funwind.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -77,6 +77,7 @@ use task::Task;\n \n use libunwind as uw;\n \n+#[allow(missing_copy_implementations)]\n pub struct Unwinder {\n     unwinding: bool,\n }"}, {"sha": "fd30c3a48d2d5e8870703617990c745179f51984", "filename": "src/librustrt/util.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustrt%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibrustrt%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Futil.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -29,6 +29,9 @@ pub const ENFORCE_SANITY: bool = true || !cfg!(rtopt) || cfg!(rtdebug) ||\n pub struct Stdio(libc::c_int);\n \n #[allow(non_upper_case_globals)]\n+impl Copy for Stdio {}\n+\n+#[allow(non_uppercase_statics)]\n pub const Stdout: Stdio = Stdio(libc::STDOUT_FILENO);\n #[allow(non_upper_case_globals)]\n pub const Stderr: Stdio = Stdio(libc::STDERR_FILENO);"}, {"sha": "dd5039c9b828317a20d20365422022e982497803", "filename": "src/libserialize/base64.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibserialize%2Fbase64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibserialize%2Fbase64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fbase64.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -26,6 +26,8 @@ pub enum CharacterSet {\n     UrlSafe\n }\n \n+impl Copy for CharacterSet {}\n+\n /// Contains configuration parameters for `to_base64`.\n pub struct Config {\n     /// Character set to use\n@@ -36,6 +38,8 @@ pub struct Config {\n     pub line_length: Option<uint>\n }\n \n+impl Copy for Config {}\n+\n /// Configuration for RFC 4648 standard base64 encoding\n pub static STANDARD: Config =\n     Config {char_set: Standard, pad: true, line_length: None};\n@@ -168,6 +172,8 @@ pub enum FromBase64Error {\n     InvalidBase64Length,\n }\n \n+impl Copy for FromBase64Error {}\n+\n impl fmt::Show for FromBase64Error {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {"}, {"sha": "22392056ddf21d29fdd7d691b587328abb67afee", "filename": "src/libserialize/hex.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibserialize%2Fhex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibserialize%2Fhex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fhex.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -68,6 +68,8 @@ pub enum FromHexError {\n     InvalidHexLength,\n }\n \n+impl Copy for FromHexError {}\n+\n impl fmt::Show for FromHexError {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {"}, {"sha": "318c21234f587a316b475c15c36bad503996619c", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -247,13 +247,17 @@ pub enum ErrorCode {\n     NotUtf8,\n }\n \n+impl Copy for ErrorCode {}\n+\n #[deriving(Clone, PartialEq, Show)]\n pub enum ParserError {\n     /// msg, line, col\n     SyntaxError(ErrorCode, uint, uint),\n     IoError(io::IoErrorKind, &'static str),\n }\n \n+impl Copy for ParserError {}\n+\n // Builder and Parser have the same errors.\n pub type BuilderError = ParserError;\n "}, {"sha": "23eb367dbd10a94d9f292fb9b8b8dfb25c78a9e1", "filename": "src/libstd/ascii.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibstd%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibstd%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fascii.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -18,6 +18,7 @@\n use core::kinds::Sized;\n use fmt;\n use iter::IteratorExt;\n+use kinds::Copy;\n use mem;\n use option::Option;\n use option::Option::{Some, None};\n@@ -30,6 +31,8 @@ use vec::Vec;\n #[deriving(Clone, PartialEq, PartialOrd, Ord, Eq, Hash)]\n pub struct Ascii { chr: u8 }\n \n+impl Copy for Ascii {}\n+\n impl Ascii {\n     /// Converts an ascii character into a `u8`.\n     #[inline]"}, {"sha": "ffcd6505dadd1cab7a67fe42553de9c6f8e2dc10", "filename": "src/libstd/bitflags.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibstd%2Fbitflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibstd%2Fbitflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbitflags.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -33,6 +33,8 @@\n ///     }\n /// }\n ///\n+/// impl Copy for Flags {}\n+///\n /// fn main() {\n ///     let e1 = FLAG_A | FLAG_C;\n ///     let e2 = FLAG_B | FLAG_C;\n@@ -55,6 +57,8 @@\n ///     }\n /// }\n ///\n+/// impl Copy for Flags {}\n+///\n /// impl Flags {\n ///     pub fn clear(&mut self) {\n ///         self.bits = 0;  // The `bits` field can be accessed from within the\n@@ -260,6 +264,7 @@ macro_rules! bitflags {\n #[cfg(test)]\n #[allow(non_upper_case_globals)]\n mod tests {\n+    use kinds::Copy;\n     use hash;\n     use option::Option::{Some, None};\n     use ops::{BitOr, BitAnd, BitXor, Sub, Not};\n@@ -283,12 +288,16 @@ mod tests {\n         }\n     }\n \n+    impl Copy for Flags {}\n+\n     bitflags! {\n         flags AnotherSetOfFlags: i8 {\n             const AnotherFlag = -1_i8,\n         }\n     }\n \n+    impl Copy for AnotherSetOfFlags {}\n+\n     #[test]\n     fn test_bits(){\n         assert_eq!(Flags::empty().bits(), 0x00000000);"}, {"sha": "ef4cabedc474ea34b789a4bc9108a13331c22e54", "filename": "src/libstd/collections/hash/table.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -16,7 +16,7 @@ use clone::Clone;\n use cmp;\n use hash::{Hash, Hasher};\n use iter::{Iterator, count};\n-use kinds::{Sized, marker};\n+use kinds::{Copy, Sized, marker};\n use mem::{min_align_of, size_of};\n use mem;\n use num::{Int, UnsignedInt};\n@@ -81,12 +81,16 @@ struct RawBucket<K, V> {\n     val:  *mut V\n }\n \n+impl<K,V> Copy for RawBucket<K,V> {}\n+\n pub struct Bucket<K, V, M> {\n     raw:   RawBucket<K, V>,\n     idx:   uint,\n     table: M\n }\n \n+impl<K,V,M:Copy> Copy for Bucket<K,V,M> {}\n+\n pub struct EmptyBucket<K, V, M> {\n     raw:   RawBucket<K, V>,\n     idx:   uint,"}, {"sha": "6cff5a3dd239dd15586491116bd1da1c79678008", "filename": "src/libstd/comm/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibstd%2Fcomm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibstd%2Fcomm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcomm%2Fmod.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -405,6 +405,8 @@ pub enum TryRecvError {\n     Disconnected,\n }\n \n+impl Copy for TryRecvError {}\n+\n /// This enumeration is the list of the possible error outcomes for the\n /// `SyncSender::try_send` method.\n #[deriving(PartialEq, Clone, Show)]"}, {"sha": "5609fbf16cdc744351e1492a353c00988f0b5b92", "filename": "src/libstd/dynamic_lib.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibstd%2Fdynamic_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibstd%2Fdynamic_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdynamic_lib.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -29,7 +29,10 @@ use str;\n use string::String;\n use vec::Vec;\n \n-pub struct DynamicLibrary { handle: *mut u8 }\n+#[allow(missing_copy_implementations)]\n+pub struct DynamicLibrary {\n+    handle: *mut u8\n+}\n \n impl Drop for DynamicLibrary {\n     fn drop(&mut self) {\n@@ -210,6 +213,7 @@ pub mod dl {\n \n     use c_str::{CString, ToCStr};\n     use libc;\n+    use kinds::Copy;\n     use ptr;\n     use result::*;\n     use string::String;\n@@ -262,6 +266,8 @@ pub mod dl {\n         Local = 0,\n     }\n \n+    impl Copy for Rtld {}\n+\n     #[link_name = \"dl\"]\n     extern {\n         fn dlopen(filename: *const libc::c_char,"}, {"sha": "dc212e7cab3aed33a3c88b10e0acecb322f3f331", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -231,6 +231,7 @@ use error::{FromError, Error};\n use fmt;\n use int;\n use iter::{Iterator, IteratorExt};\n+use kinds::Copy;\n use mem::transmute;\n use ops::{BitOr, BitXor, BitAnd, Sub, Not};\n use option::Option;\n@@ -420,6 +421,8 @@ pub enum IoErrorKind {\n     NoProgress,\n }\n \n+impl Copy for IoErrorKind {}\n+\n /// A trait that lets you add a `detail` to an IoError easily\n trait UpdateIoError<T> {\n     /// Returns an IoError with updated description and detail\n@@ -1560,6 +1563,8 @@ pub enum SeekStyle {\n     SeekCur,\n }\n \n+impl Copy for SeekStyle {}\n+\n /// An object implementing `Seek` internally has some form of cursor which can\n /// be moved within a stream of bytes. The stream typically has a fixed size,\n /// allowing seeking relative to either end.\n@@ -1682,6 +1687,8 @@ pub enum FileMode {\n     Truncate,\n }\n \n+impl Copy for FileMode {}\n+\n /// Access permissions with which the file should be opened. `File`s\n /// opened with `Read` will return an error if written to.\n pub enum FileAccess {\n@@ -1693,6 +1700,8 @@ pub enum FileAccess {\n     ReadWrite,\n }\n \n+impl Copy for FileAccess {}\n+\n /// Different kinds of files which can be identified by a call to stat\n #[deriving(PartialEq, Show, Hash, Clone)]\n pub enum FileType {\n@@ -1715,6 +1724,8 @@ pub enum FileType {\n     Unknown,\n }\n \n+impl Copy for FileType {}\n+\n /// A structure used to describe metadata information about a file. This\n /// structure is created through the `stat` method on a `Path`.\n ///\n@@ -1766,6 +1777,8 @@ pub struct FileStat {\n     pub unstable: UnstableFileStat,\n }\n \n+impl Copy for FileStat {}\n+\n /// This structure represents all of the possible information which can be\n /// returned from a `stat` syscall which is not contained in the `FileStat`\n /// structure. This information is not necessarily platform independent, and may\n@@ -1795,6 +1808,8 @@ pub struct UnstableFileStat {\n     pub gen: u64,\n }\n \n+impl Copy for UnstableFileStat {}\n+\n bitflags! {\n     #[doc = \"A set of permissions for a file or directory is represented\"]\n     #[doc = \"by a set of flags which are or'd together.\"]\n@@ -1889,6 +1904,8 @@ bitflags! {\n     }\n }\n \n+impl Copy for FilePermission {}\n+\n impl Default for FilePermission {\n     #[inline]\n     fn default() -> FilePermission { FilePermission::empty() }"}, {"sha": "fc81ab7b57a3ef34076a83acaa0c9a59e3546ab6", "filename": "src/libstd/io/net/addrinfo.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibstd%2Fio%2Fnet%2Faddrinfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibstd%2Fio%2Fnet%2Faddrinfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Faddrinfo.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -22,6 +22,7 @@ pub use self::Protocol::*;\n use iter::IteratorExt;\n use io::{IoResult};\n use io::net::ip::{SocketAddr, IpAddr};\n+use kinds::Copy;\n use option::Option;\n use option::Option::{Some, None};\n use sys;\n@@ -32,6 +33,8 @@ pub enum SocketType {\n     Stream, Datagram, Raw\n }\n \n+impl Copy for SocketType {}\n+\n /// Flags which can be or'd into the `flags` field of a `Hint`. These are used\n /// to manipulate how a query is performed.\n ///\n@@ -46,12 +49,16 @@ pub enum Flag {\n     V4Mapped,\n }\n \n+impl Copy for Flag {}\n+\n /// A transport protocol associated with either a hint or a return value of\n /// `lookup`\n pub enum Protocol {\n     TCP, UDP\n }\n \n+impl Copy for Protocol {}\n+\n /// This structure is used to provide hints when fetching addresses for a\n /// remote host to control how the lookup is performed.\n ///\n@@ -64,6 +71,8 @@ pub struct Hint {\n     pub flags: uint,\n }\n \n+impl Copy for Hint {}\n+\n pub struct Info {\n     pub address: SocketAddr,\n     pub family: uint,\n@@ -72,6 +81,8 @@ pub struct Info {\n     pub flags: uint,\n }\n \n+impl Copy for Info {}\n+\n /// Easy name resolution. Given a hostname, returns the list of IP addresses for\n /// that hostname.\n pub fn get_host_addresses(host: &str) -> IoResult<Vec<IpAddr>> {"}, {"sha": "f59dd37c0da16cb493c3be5681e6f28924744ccf", "filename": "src/libstd/io/net/ip.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibstd%2Fio%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibstd%2Fio%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Fip.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -18,6 +18,7 @@\n pub use self::IpAddr::*;\n \n use fmt;\n+use kinds::Copy;\n use io::{mod, IoResult, IoError};\n use io::net;\n use iter::{Iterator, IteratorExt};\n@@ -36,6 +37,8 @@ pub enum IpAddr {\n     Ipv6Addr(u16, u16, u16, u16, u16, u16, u16, u16)\n }\n \n+impl Copy for IpAddr {}\n+\n impl fmt::Show for IpAddr {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n@@ -67,6 +70,8 @@ pub struct SocketAddr {\n     pub port: Port,\n }\n \n+impl Copy for SocketAddr {}\n+\n impl fmt::Show for SocketAddr {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match self.ip {"}, {"sha": "c46a6e82e448661d3181b0f29535377fc1498760", "filename": "src/libstd/io/process.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibstd%2Fio%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibstd%2Fio%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fprocess.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -480,6 +480,8 @@ pub enum StdioContainer {\n     CreatePipe(bool /* readable */, bool /* writable */),\n }\n \n+impl Copy for StdioContainer {}\n+\n /// Describes the result of a process after it has terminated.\n /// Note that Windows have no signals, so the result is usually ExitStatus.\n #[deriving(PartialEq, Eq, Clone)]\n@@ -491,6 +493,8 @@ pub enum ProcessExit {\n     ExitSignal(int),\n }\n \n+impl Copy for ProcessExit {}\n+\n impl fmt::Show for ProcessExit {\n     /// Format a ProcessExit enum, to nicely present the information.\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {"}, {"sha": "faa52226a03b7f996448b5eaa7b3650ad2ce83b0", "filename": "src/libstd/io/util.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibstd%2Fio%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibstd%2Fio%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Futil.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -83,6 +83,8 @@ impl<R: Buffer> Buffer for LimitReader<R> {\n /// A `Writer` which ignores bytes written to it, like /dev/null.\n pub struct NullWriter;\n \n+impl Copy for NullWriter {}\n+\n impl Writer for NullWriter {\n     #[inline]\n     fn write(&mut self, _buf: &[u8]) -> io::IoResult<()> { Ok(()) }\n@@ -91,6 +93,8 @@ impl Writer for NullWriter {\n /// A `Reader` which returns an infinite stream of 0 bytes, like /dev/zero.\n pub struct ZeroReader;\n \n+impl Copy for ZeroReader {}\n+\n impl Reader for ZeroReader {\n     #[inline]\n     fn read(&mut self, buf: &mut [u8]) -> io::IoResult<uint> {\n@@ -111,6 +115,8 @@ impl Buffer for ZeroReader {\n /// A `Reader` which is always at EOF, like /dev/null.\n pub struct NullReader;\n \n+impl Copy for NullReader {}\n+\n impl Reader for NullReader {\n     #[inline]\n     fn read(&mut self, _buf: &mut [u8]) -> io::IoResult<uint> {"}, {"sha": "1c9826ff5aca38be186c4d65b544b405ca73cd1c", "filename": "src/libstd/num/strconv.rs", "status": "modified", "additions": 32, "deletions": 19, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibstd%2Fnum%2Fstrconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibstd%2Fnum%2Fstrconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fstrconv.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -18,6 +18,7 @@ pub use self::SignFormat::*;\n \n use char;\n use char::Char;\n+use kinds::Copy;\n use num;\n use num::{Int, Float, FPNaN, FPInfinite, ToPrimitive};\n use slice::{SlicePrelude, CloneSliceAllocPrelude};\n@@ -38,6 +39,8 @@ pub enum ExponentFormat {\n     ExpBin,\n }\n \n+impl Copy for ExponentFormat {}\n+\n /// The number of digits used for emitting the fractional part of a number, if\n /// any.\n pub enum SignificantDigits {\n@@ -55,6 +58,8 @@ pub enum SignificantDigits {\n     DigExact(uint)\n }\n \n+impl Copy for SignificantDigits {}\n+\n /// How to emit the sign of a number.\n pub enum SignFormat {\n     /// No sign will be printed. The exponent sign will also be emitted.\n@@ -67,25 +72,33 @@ pub enum SignFormat {\n     SignAll,\n }\n \n-/// Converts an integral number to its string representation as a byte vector.\n-/// This is meant to be a common base implementation for all integral string\n-/// conversion functions like `to_string()` or `to_str_radix()`.\n-///\n-/// # Arguments\n-///\n-/// - `num`           - The number to convert. Accepts any number that\n-///                     implements the numeric traits.\n-/// - `radix`         - Base to use. Accepts only the values 2-36.\n-/// - `sign`          - How to emit the sign. Options are:\n-///     - `SignNone`: No sign at all. Basically emits `abs(num)`.\n-///     - `SignNeg`:  Only `-` on negative values.\n-///     - `SignAll`:  Both `+` on positive, and `-` on negative numbers.\n-/// - `f`             - a callback which will be invoked for each ascii character\n-///                     which composes the string representation of this integer\n-///\n-/// # Panics\n-///\n-/// - Panics if `radix` < 2 or `radix` > 36.\n+impl Copy for SignFormat {}\n+\n+/**\n+ * Converts an integral number to its string representation as a byte vector.\n+ * This is meant to be a common base implementation for all integral string\n+ * conversion functions like `to_string()` or `to_str_radix()`.\n+ *\n+ * # Arguments\n+ * - `num`           - The number to convert. Accepts any number that\n+ *                     implements the numeric traits.\n+ * - `radix`         - Base to use. Accepts only the values 2-36.\n+ * - `sign`          - How to emit the sign. Options are:\n+ *     - `SignNone`: No sign at all. Basically emits `abs(num)`.\n+ *     - `SignNeg`:  Only `-` on negative values.\n+ *     - `SignAll`:  Both `+` on positive, and `-` on negative numbers.\n+ * - `f`             - a callback which will be invoked for each ascii character\n+ *                     which composes the string representation of this integer\n+ *\n+ * # Return value\n+ * A tuple containing the byte vector, and a boolean flag indicating\n+ * whether it represents a special value like `inf`, `-inf`, `NaN` or not.\n+ * It returns a tuple because there can be ambiguity between a special value\n+ * and a number representation at higher bases.\n+ *\n+ * # Failure\n+ * - Fails if `radix` < 2 or `radix` > 36.\n+ */\n fn int_to_str_bytes_common<T: Int>(num: T, radix: uint, sign: SignFormat, f: |u8|) {\n     assert!(2 <= radix && radix <= 36);\n "}, {"sha": "f298ec74f6a2b846df02534297e55f4f44d914e6", "filename": "src/libstd/os.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -36,6 +36,7 @@ use error::{FromError, Error};\n use fmt;\n use io::{IoResult, IoError};\n use iter::{Iterator, IteratorExt};\n+use kinds::Copy;\n use libc::{c_void, c_int};\n use libc;\n use boxed::Box;\n@@ -619,6 +620,8 @@ pub struct Pipe {\n     pub writer: c_int,\n }\n \n+impl Copy for Pipe {}\n+\n /// Creates a new low-level OS in-memory pipe.\n ///\n /// This function can fail to succeed if there are no more resources available\n@@ -1185,6 +1188,9 @@ pub struct MemoryMap {\n     kind: MemoryMapKind,\n }\n \n+#[cfg(not(stage0))]\n+impl Copy for MemoryMap {}\n+\n /// Type of memory map\n pub enum MemoryMapKind {\n     /// Virtual memory map. Usually used to change the permissions of a given\n@@ -1196,6 +1202,8 @@ pub enum MemoryMapKind {\n     MapVirtual\n }\n \n+impl Copy for MemoryMapKind {}\n+\n /// Options the memory map is created with\n pub enum MapOption {\n     /// The memory should be readable\n@@ -1219,6 +1227,8 @@ pub enum MapOption {\n     MapNonStandardFlags(c_int),\n }\n \n+impl Copy for MapOption {}\n+\n /// Possible errors when creating a map.\n pub enum MapError {\n     /// ## The following are POSIX-specific\n@@ -1264,6 +1274,8 @@ pub enum MapError {\n     ErrMapViewOfFile(uint)\n }\n \n+impl Copy for MapError {}\n+\n impl fmt::Show for MapError {\n     fn fmt(&self, out: &mut fmt::Formatter) -> fmt::Result {\n         let str = match *self {"}, {"sha": "ea522536d22fd5f9b78fc839c5dd10466be8309e", "filename": "src/libstd/path/windows.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibstd%2Fpath%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibstd%2Fpath%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fwindows.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -22,6 +22,7 @@ use hash;\n use io::Writer;\n use iter::{AdditiveIterator, DoubleEndedIteratorExt, Extend};\n use iter::{Iterator, IteratorExt, Map};\n+use kinds::Copy;\n use mem;\n use option::Option;\n use option::Option::{Some, None};\n@@ -985,6 +986,8 @@ pub enum PathPrefix {\n     DiskPrefix\n }\n \n+impl Copy for PathPrefix {}\n+\n fn parse_prefix<'a>(mut path: &'a str) -> Option<PathPrefix> {\n     if path.starts_with(\"\\\\\\\\\") {\n         // \\\\"}, {"sha": "a359fcf7a9f3e5614d422bc680df1cce75a0ec91", "filename": "src/libstd/rand/mod.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibstd%2Frand%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibstd%2Frand%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fmod.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -225,6 +225,7 @@ use cell::RefCell;\n use clone::Clone;\n use io::IoResult;\n use iter::{Iterator, IteratorExt};\n+use kinds::Copy;\n use mem;\n use rc::Rc;\n use result::Result::{Ok, Err};\n@@ -245,7 +246,11 @@ pub mod reader;\n \n /// The standard RNG. This is designed to be efficient on the current\n /// platform.\n-pub struct StdRng { rng: IsaacWordRng }\n+pub struct StdRng {\n+    rng: IsaacWordRng,\n+}\n+\n+impl Copy for StdRng {}\n \n impl StdRng {\n     /// Create a randomly seeded instance of `StdRng`."}, {"sha": "7e6065129a384ad81bfe36ae5b973a23034b55cc", "filename": "src/libstd/time/duration.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibstd%2Ftime%2Fduration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibstd%2Ftime%2Fduration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime%2Fduration.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -13,6 +13,7 @@\n #![experimental]\n \n use {fmt, i64};\n+use kinds::Copy;\n use ops::{Add, Sub, Mul, Div, Neg};\n use option::Option;\n use option::Option::{Some, None};\n@@ -64,6 +65,8 @@ pub const MAX: Duration = Duration {\n     nanos: (i64::MAX % MILLIS_PER_SEC) as i32 * NANOS_PER_MILLI\n };\n \n+impl Copy for Duration {}\n+\n impl Duration {\n     /// Makes a new `Duration` with given number of weeks.\n     /// Equivalent to `Duration::seconds(weeks * 7 * 24 * 60 * 60), with overflow checks."}, {"sha": "71d29bca401ccf9a401a0cef22312d455afe0883", "filename": "src/libsyntax/abi.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibsyntax%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibsyntax%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fabi.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -16,8 +16,17 @@ pub use self::AbiArchitecture::*;\n use std::fmt;\n \n #[deriving(PartialEq)]\n-pub enum Os { OsWindows, OsMacos, OsLinux, OsAndroid, OsFreebsd, OsiOS,\n-              OsDragonfly }\n+pub enum Os {\n+    OsWindows,\n+    OsMacos,\n+    OsLinux,\n+    OsAndroid,\n+    OsFreebsd,\n+    OsiOS,\n+    OsDragonfly,\n+}\n+\n+impl Copy for Os {}\n \n #[deriving(PartialEq, Eq, Hash, Encodable, Decodable, Clone)]\n pub enum Abi {\n@@ -39,6 +48,8 @@ pub enum Abi {\n     RustCall,\n }\n \n+impl Copy for Abi {}\n+\n #[allow(non_camel_case_types)]\n #[deriving(PartialEq)]\n pub enum Architecture {\n@@ -49,13 +60,17 @@ pub enum Architecture {\n     Mipsel\n }\n \n+impl Copy for Architecture {}\n+\n pub struct AbiData {\n     abi: Abi,\n \n     // Name of this ABI as we like it called.\n     name: &'static str,\n }\n \n+impl Copy for AbiData {}\n+\n pub enum AbiArchitecture {\n     /// Not a real ABI (e.g., intrinsic)\n     RustArch,\n@@ -65,6 +80,9 @@ pub enum AbiArchitecture {\n     Archs(u32)\n }\n \n+#[allow(non_upper_case_globals)]\n+impl Copy for AbiArchitecture {}\n+\n #[allow(non_upper_case_globals)]\n static AbiDatas: &'static [AbiData] = &[\n     // Platform-specific ABIs"}, {"sha": "0a04a953b314fdd465637117e1adfef90a2b8a28", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 64, "deletions": 1, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -86,6 +86,8 @@ pub struct Ident {\n     pub ctxt: SyntaxContext\n }\n \n+impl Copy for Ident {}\n+\n impl Ident {\n     /// Construct an identifier with the given name and an empty context:\n     pub fn new(name: Name) -> Ident { Ident {name: name, ctxt: EMPTY_CTXT}}\n@@ -161,6 +163,8 @@ pub const ILLEGAL_CTXT : SyntaxContext = 1;\n #[deriving(Eq, Ord, PartialEq, PartialOrd, Hash, Encodable, Decodable, Clone)]\n pub struct Name(pub u32);\n \n+impl Copy for Name {}\n+\n impl Name {\n     pub fn as_str<'a>(&'a self) -> &'a str {\n         unsafe {\n@@ -204,6 +208,8 @@ pub struct Lifetime {\n     pub name: Name\n }\n \n+impl Copy for Lifetime {}\n+\n #[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub struct LifetimeDef {\n     pub lifetime: Lifetime,\n@@ -338,6 +344,8 @@ pub struct DefId {\n     pub node: NodeId,\n }\n \n+impl Copy for DefId {}\n+\n /// Item definitions in the currently-compiled crate would have the CrateNum\n /// LOCAL_CRATE in their DefId.\n pub const LOCAL_CRATE: CrateNum = 0;\n@@ -482,6 +490,8 @@ pub enum BindingMode {\n     BindByValue(Mutability),\n }\n \n+impl Copy for BindingMode {}\n+\n #[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub enum PatWildKind {\n     /// Represents the wildcard pattern `_`\n@@ -491,6 +501,8 @@ pub enum PatWildKind {\n     PatWildMulti,\n }\n \n+impl Copy for PatWildKind {}\n+\n #[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub enum Pat_ {\n     /// Represents a wildcard pattern (either `_` or `..`)\n@@ -526,6 +538,8 @@ pub enum Mutability {\n     MutImmutable,\n }\n \n+impl Copy for Mutability {}\n+\n #[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub enum BinOp {\n     BiAdd,\n@@ -548,6 +562,9 @@ pub enum BinOp {\n     BiGt,\n }\n \n+#[cfg(not(stage0))]\n+impl Copy for BinOp {}\n+\n #[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub enum UnOp {\n     UnUniq,\n@@ -556,6 +573,8 @@ pub enum UnOp {\n     UnNeg\n }\n \n+impl Copy for UnOp {}\n+\n pub type Stmt = Spanned<Stmt_>;\n \n #[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n@@ -581,6 +600,8 @@ pub enum LocalSource {\n     LocalFor,\n }\n \n+impl Copy for LocalSource {}\n+\n // FIXME (pending discussion of #1697, #2178...): local should really be\n // a refinement on pat.\n /// Local represents a `let` statement, e.g., `let <pat>:<ty> = <expr>;`\n@@ -628,12 +649,16 @@ pub enum BlockCheckMode {\n     UnsafeBlock(UnsafeSource),\n }\n \n+impl Copy for BlockCheckMode {}\n+\n #[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub enum UnsafeSource {\n     CompilerGenerated,\n     UserProvided,\n }\n \n+impl Copy for UnsafeSource {}\n+\n #[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub struct Expr {\n     pub id: NodeId,\n@@ -718,12 +743,16 @@ pub enum MatchSource {\n     MatchWhileLetDesugar,\n }\n \n+impl Copy for MatchSource {}\n+\n #[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub enum CaptureClause {\n     CaptureByValue,\n     CaptureByRef,\n }\n \n+impl Copy for CaptureClause {}\n+\n /// A delimited sequence of token trees\n #[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub struct Delimited {\n@@ -780,6 +809,8 @@ pub enum KleeneOp {\n     OneOrMore,\n }\n \n+impl Copy for KleeneOp {}\n+\n /// When the main rust parser encounters a syntax-extension invocation, it\n /// parses the arguments to the invocation as a token-tree. This is a very\n /// loose structure, such that all sorts of different AST-fragments can\n@@ -895,6 +926,8 @@ pub enum StrStyle {\n     RawStr(uint)\n }\n \n+impl Copy for StrStyle {}\n+\n pub type Lit = Spanned<Lit_>;\n \n #[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n@@ -903,7 +936,9 @@ pub enum Sign {\n     Plus\n }\n \n-impl<T: Int> Sign {\n+impl Copy for Sign {}\n+\n+impl<T> Sign where T: Int {\n     pub fn new(n: T) -> Sign {\n         if n < Int::zero() {\n             Minus\n@@ -920,6 +955,8 @@ pub enum LitIntType {\n     UnsuffixedIntLit(Sign)\n }\n \n+impl Copy for LitIntType {}\n+\n impl LitIntType {\n     pub fn suffix_len(&self) -> uint {\n         match *self {\n@@ -1015,6 +1052,8 @@ pub enum IntTy {\n     TyI64,\n }\n \n+impl Copy for IntTy {}\n+\n impl fmt::Show for IntTy {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(f, \"{}\", ast_util::int_ty_to_string(*self, None))\n@@ -1040,6 +1079,8 @@ pub enum UintTy {\n     TyU64,\n }\n \n+impl Copy for UintTy {}\n+\n impl UintTy {\n     pub fn suffix_len(&self) -> uint {\n         match *self {\n@@ -1062,6 +1103,8 @@ pub enum FloatTy {\n     TyF64,\n }\n \n+impl Copy for FloatTy {}\n+\n impl fmt::Show for FloatTy {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(f, \"{}\", ast_util::float_ty_to_string(*self))\n@@ -1095,12 +1138,16 @@ pub enum PrimTy {\n     TyChar\n }\n \n+impl Copy for PrimTy {}\n+\n #[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash)]\n pub enum Onceness {\n     Once,\n     Many\n }\n \n+impl Copy for Onceness {}\n+\n impl fmt::Show for Onceness {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n@@ -1171,6 +1218,8 @@ pub enum AsmDialect {\n     AsmIntel\n }\n \n+impl Copy for AsmDialect {}\n+\n #[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub struct InlineAsm {\n     pub asm: InternedString,\n@@ -1228,6 +1277,8 @@ pub enum FnStyle {\n     NormalFn,\n }\n \n+impl Copy for FnStyle {}\n+\n impl fmt::Show for FnStyle {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n@@ -1345,6 +1396,8 @@ pub enum PathListItem_ {\n     PathListMod { id: NodeId }\n }\n \n+impl Copy for PathListItem_ {}\n+\n impl PathListItem_ {\n     pub fn id(&self) -> NodeId {\n         match *self {\n@@ -1404,9 +1457,13 @@ pub enum AttrStyle {\n     AttrInner,\n }\n \n+impl Copy for AttrStyle {}\n+\n #[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub struct AttrId(pub uint);\n \n+impl Copy for AttrId {}\n+\n /// Doc-comments are promoted to attributes that have is_sugared_doc = true\n #[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub struct Attribute_ {\n@@ -1442,6 +1499,8 @@ pub enum Visibility {\n     Inherited,\n }\n \n+impl Copy for Visibility {}\n+\n impl Visibility {\n     pub fn inherit_from(&self, parent_visibility: Visibility) -> Visibility {\n         match self {\n@@ -1477,6 +1536,8 @@ pub enum StructFieldKind {\n     UnnamedField(Visibility),\n }\n \n+impl Copy for StructFieldKind {}\n+\n impl StructFieldKind {\n     pub fn is_unnamed(&self) -> bool {\n         match *self {\n@@ -1583,6 +1644,8 @@ pub enum UnboxedClosureKind {\n     FnOnceUnboxedClosureKind,\n }\n \n+impl Copy for UnboxedClosureKind {}\n+\n /// The data we save and restore about an inlined item or method.  This is not\n /// part of the AST that we parse from a file, but it becomes part of the tree\n /// that we trans."}, {"sha": "639a33a806395ed967212a87d58541a0fb1e1020", "filename": "src/libsyntax/ast_map/blocks.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibsyntax%2Fast_map%2Fblocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibsyntax%2Fast_map%2Fblocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map%2Fblocks.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -43,6 +43,8 @@ use visit;\n /// To construct one, use the `Code::from_node` function.\n pub struct FnLikeNode<'a> { node: ast_map::Node<'a> }\n \n+impl<'a> Copy for FnLikeNode<'a> {}\n+\n /// MaybeFnLike wraps a method that indicates if an object\n /// corresponds to some FnLikeNode.\n pub trait MaybeFnLike { fn is_fn_like(&self) -> bool; }\n@@ -85,6 +87,8 @@ pub enum Code<'a> {\n     BlockCode(&'a Block),\n }\n \n+impl<'a> Copy for Code<'a> {}\n+\n impl<'a> Code<'a> {\n     pub fn id(&self) -> ast::NodeId {\n         match *self {"}, {"sha": "2c985f403f8516a452aebefb1dad39ac0f7c0930", "filename": "src/libsyntax/ast_map/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibsyntax%2Fast_map%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibsyntax%2Fast_map%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map%2Fmod.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -38,6 +38,8 @@ pub enum PathElem {\n     PathName(Name)\n }\n \n+impl Copy for PathElem {}\n+\n impl PathElem {\n     pub fn name(&self) -> Name {\n         match *self {\n@@ -120,6 +122,8 @@ pub enum Node<'ast> {\n     NodeLifetime(&'ast Lifetime),\n }\n \n+impl<'ast> Copy for Node<'ast> {}\n+\n /// Represents an entry and its parent Node ID\n /// The odd layout is to bring down the total size.\n #[deriving(Show)]\n@@ -147,6 +151,8 @@ enum MapEntry<'ast> {\n     RootInlinedParent(&'ast InlinedParent)\n }\n \n+impl<'ast> Copy for MapEntry<'ast> {}\n+\n impl<'ast> Clone for MapEntry<'ast> {\n     fn clone(&self) -> MapEntry<'ast> {\n         *self"}, {"sha": "7dba6a57fc4c9ee2ae4dc8afaeb37ab4c2f0c0eb", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -315,6 +315,8 @@ pub struct IdRange {\n     pub max: NodeId,\n }\n \n+impl Copy for IdRange {}\n+\n impl IdRange {\n     pub fn max() -> IdRange {\n         IdRange {"}, {"sha": "5894a88ece65ab8fb326d50208784ffebfd182a1", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -282,6 +282,8 @@ pub enum InlineAttr {\n     InlineNever,\n }\n \n+impl Copy for InlineAttr {}\n+\n /// Determine what `#[inline]` attribute is present in `attrs`, if any.\n pub fn find_inline_attr(attrs: &[Attribute]) -> InlineAttr {\n     // FIXME (#2809)---validate the usage of #[inline] and #[inline]\n@@ -354,6 +356,8 @@ pub enum StabilityLevel {\n     Locked\n }\n \n+impl Copy for StabilityLevel {}\n+\n pub fn find_stability_generic<'a,\n                               AM: AttrMetaMethods,\n                               I: Iterator<&'a AM>>\n@@ -469,6 +473,8 @@ pub enum ReprAttr {\n     ReprPacked,\n }\n \n+impl Copy for ReprAttr {}\n+\n impl ReprAttr {\n     pub fn is_ffi_safe(&self) -> bool {\n         match *self {\n@@ -486,6 +492,8 @@ pub enum IntType {\n     UnsignedInt(ast::UintTy)\n }\n \n+impl Copy for IntType {}\n+\n impl IntType {\n     #[inline]\n     pub fn is_signed(self) -> bool {"}, {"sha": "50b4f3423688cdf71e5ebcf48628955afa5c2602", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -34,12 +34,16 @@ pub trait Pos {\n #[deriving(Clone, PartialEq, Eq, Hash, PartialOrd, Show)]\n pub struct BytePos(pub u32);\n \n+impl Copy for BytePos {}\n+\n /// A character offset. Because of multibyte utf8 characters, a byte offset\n /// is not equivalent to a character offset. The CodeMap will convert BytePos\n /// values to CharPos values as necessary.\n #[deriving(PartialEq, Hash, PartialOrd, Show)]\n pub struct CharPos(pub uint);\n \n+impl Copy for CharPos {}\n+\n // FIXME: Lots of boilerplate in these impls, but so far my attempts to fix\n // have been unsuccessful\n \n@@ -90,6 +94,8 @@ pub struct Span {\n     pub expn_id: ExpnId\n }\n \n+impl Copy for Span {}\n+\n pub const DUMMY_SP: Span = Span { lo: BytePos(0), hi: BytePos(0), expn_id: NO_EXPANSION };\n \n #[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n@@ -98,6 +104,8 @@ pub struct Spanned<T> {\n     pub span: Span,\n }\n \n+impl<T:Copy> Copy for Spanned<T> {}\n+\n impl PartialEq for Span {\n     fn eq(&self, other: &Span) -> bool {\n         return (*self).lo == (*other).lo && (*self).hi == (*other).hi;\n@@ -183,6 +191,8 @@ pub enum MacroFormat {\n     MacroBang\n }\n \n+impl Copy for MacroFormat {}\n+\n #[deriving(Clone, Hash, Show)]\n pub struct NameAndSpan {\n     /// The name of the macro that was invoked to create the thing\n@@ -221,6 +231,8 @@ pub struct ExpnInfo {\n #[deriving(PartialEq, Eq, Clone, Show, Hash, Encodable, Decodable)]\n pub struct ExpnId(u32);\n \n+impl Copy for ExpnId {}\n+\n pub const NO_EXPANSION: ExpnId = ExpnId(-1);\n \n impl ExpnId {\n@@ -249,6 +261,8 @@ pub struct MultiByteChar {\n     pub bytes: uint,\n }\n \n+impl Copy for MultiByteChar {}\n+\n /// A single source in the CodeMap\n pub struct FileMap {\n     /// The name of the file that the source came from, source that doesn't"}, {"sha": "bbda80bd96c33c461e9b7e2352cc79b86a9793ef", "filename": "src/libsyntax/diagnostic.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibsyntax%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibsyntax%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -40,6 +40,8 @@ pub enum RenderSpan {\n     FileLine(Span),\n }\n \n+impl Copy for RenderSpan {}\n+\n impl RenderSpan {\n     fn span(self) -> Span {\n         match self {\n@@ -61,6 +63,8 @@ pub enum ColorConfig {\n     Never\n }\n \n+impl Copy for ColorConfig {}\n+\n pub trait Emitter {\n     fn emit(&mut self, cmsp: Option<(&codemap::CodeMap, Span)>,\n             msg: &str, code: Option<&str>, lvl: Level);\n@@ -73,10 +77,14 @@ pub trait Emitter {\n /// how a rustc task died (if so desired).\n pub struct FatalError;\n \n+impl Copy for FatalError {}\n+\n /// Signifies that the compiler died with an explicit call to `.bug`\n /// or `.span_bug` rather than a failed assertion, etc.\n pub struct ExplicitBug;\n \n+impl Copy for ExplicitBug {}\n+\n /// A span-handler is like a handler but also\n /// accepts span information for source-location\n /// reporting.\n@@ -230,6 +238,8 @@ pub enum Level {\n     Help,\n }\n \n+impl Copy for Level {}\n+\n impl fmt::Show for Level {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         use std::fmt::Show;"}, {"sha": "3c7a4a81d208fa9012360d77ec0d228fbfa70b88", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -57,7 +57,7 @@ impl ItemDecorator for fn(&mut ExtCtxt, Span, &ast::MetaItem, &ast::Item, |P<ast\n               meta_item: &ast::MetaItem,\n               item: &ast::Item,\n               push: |P<ast::Item>|) {\n-        (*self)(ecx, sp, meta_item, item, push)\n+        self.clone()(ecx, sp, meta_item, item, push)\n     }\n }\n \n@@ -77,7 +77,7 @@ impl ItemModifier for fn(&mut ExtCtxt, Span, &ast::MetaItem, P<ast::Item>) -> P<\n               meta_item: &ast::MetaItem,\n               item: P<ast::Item>)\n               -> P<ast::Item> {\n-        (*self)(ecx, span, meta_item, item)\n+        self.clone()(ecx, span, meta_item, item)\n     }\n }\n \n@@ -99,7 +99,7 @@ impl TTMacroExpander for MacroExpanderFn {\n                    span: Span,\n                    token_tree: &[ast::TokenTree])\n                    -> Box<MacResult+'cx> {\n-        (*self)(ecx, span, token_tree)\n+        self.clone()(ecx, span, token_tree)\n     }\n }\n \n@@ -122,7 +122,7 @@ impl IdentMacroExpander for IdentMacroExpanderFn {\n                    ident: ast::Ident,\n                    token_tree: Vec<ast::TokenTree> )\n                    -> Box<MacResult+'cx> {\n-        (*self)(cx, sp, ident, token_tree)\n+        self.clone()(cx, sp, ident, token_tree)\n     }\n }\n \n@@ -228,6 +228,8 @@ pub struct DummyResult {\n     span: Span\n }\n \n+impl Copy for DummyResult {}\n+\n impl DummyResult {\n     /// Create a default MacResult that can be anything.\n     ///"}, {"sha": "1bd55b5d5045130a66e3a8b2beced966f2052b05", "filename": "src/libsyntax/ext/deriving/cmp/ord.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -85,6 +85,8 @@ pub enum OrderingOp {\n     PartialCmpOp, LtOp, LeOp, GtOp, GeOp,\n }\n \n+impl Copy for OrderingOp {}\n+\n pub fn some_ordering_collapsed(cx: &mut ExtCtxt,\n                                span: Span,\n                                op: OrderingOp,"}, {"sha": "48120b575acd2fd10d4344c217a057b31aa8bb82", "filename": "src/libsyntax/ext/mtwt.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibsyntax%2Fext%2Fmtwt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibsyntax%2Fext%2Fmtwt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fmtwt.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -56,6 +56,8 @@ pub enum SyntaxContext_ {\n     IllegalCtxt\n }\n \n+impl Copy for SyntaxContext_ {}\n+\n /// A list of ident->name renamings\n pub type RenameList = Vec<(Ident, Name)>;\n "}, {"sha": "ac36e508f3bdb4325708aafa523be27d489516c0", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -103,6 +103,8 @@ pub struct Features {\n     pub quote: bool,\n }\n \n+impl Copy for Features {}\n+\n impl Features {\n     pub fn new() -> Features {\n         Features {"}, {"sha": "a17d66476c08c632b38d6d3ce72cae597b1c03f8", "filename": "src/libsyntax/parse/lexer/comments.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibsyntax%2Fparse%2Flexer%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibsyntax%2Fparse%2Flexer%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fcomments.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -36,6 +36,8 @@ pub enum CommentStyle {\n     BlankLine,\n }\n \n+impl Copy for CommentStyle {}\n+\n #[deriving(Clone)]\n pub struct Comment {\n     pub style: CommentStyle,"}, {"sha": "2a2bb42cef012de88234cdcc487b8f74b44f45f1", "filename": "src/libsyntax/parse/obsolete.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fobsolete.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -34,6 +34,8 @@ pub enum ObsoleteSyntax {\n     ObsoleteExternCrateRenaming,\n }\n \n+impl Copy for ObsoleteSyntax {}\n+\n pub trait ParserObsoleteMethods {\n     /// Reports an obsolete syntax non-fatal error.\n     fn obsolete(&mut self, sp: Span, kind: ObsoleteSyntax);"}, {"sha": "4929ee885acf972bb9d3324ed59507a8193695b2", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -98,6 +98,8 @@ bitflags! {\n     }\n }\n \n+impl Copy for Restrictions {}\n+\n type ItemInfo = (Ident, Item_, Option<Vec<Attribute> >);\n \n /// How to parse a path. There are four different kinds of paths, all of which\n@@ -114,6 +116,8 @@ pub enum PathParsingMode {\n     LifetimeAndTypesWithColons,\n }\n \n+impl Copy for PathParsingMode {}\n+\n enum ItemOrViewItem {\n     /// Indicates a failure to parse any kind of item. The attributes are\n     /// returned."}, {"sha": "4b1e9482a7d4981fd14c82953630f8a8abea7fd8", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -42,6 +42,8 @@ pub enum BinOpToken {\n     Shr,\n }\n \n+impl Copy for BinOpToken {}\n+\n /// A delimeter token\n #[deriving(Clone, Encodable, Decodable, PartialEq, Eq, Hash, Show)]\n pub enum DelimToken {\n@@ -53,6 +55,8 @@ pub enum DelimToken {\n     Brace,\n }\n \n+impl Copy for DelimToken {}\n+\n #[deriving(Clone, Encodable, Decodable, PartialEq, Eq, Hash, Show)]\n pub enum IdentStyle {\n     /// `::` follows the identifier with no whitespace in-between.\n@@ -85,6 +89,12 @@ impl Lit {\n     }\n }\n \n+#[cfg(not(stage0))]\n+impl Copy for Lit {}\n+\n+#[cfg(not(stage0))]\n+impl Copy for IdentStyle {}\n+\n #[allow(non_camel_case_types)]\n #[deriving(Clone, Encodable, Decodable, PartialEq, Eq, Hash, Show)]\n pub enum Token {\n@@ -435,6 +445,8 @@ macro_rules! declare_special_idents_and_keywords {(\n             $( $rk_variant, )*\n         }\n \n+        impl Copy for Keyword {}\n+\n         impl Keyword {\n             pub fn to_name(&self) -> ast::Name {\n                 match *self {"}, {"sha": "c4e040a0f7c1aafd6df28d104e151491c792ea6f", "filename": "src/libsyntax/print/pp.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibsyntax%2Fprint%2Fpp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibsyntax%2Fprint%2Fpp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpp.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -72,18 +72,24 @@ pub enum Breaks {\n     Inconsistent,\n }\n \n+impl Copy for Breaks {}\n+\n #[deriving(Clone)]\n pub struct BreakToken {\n     offset: int,\n     blank_space: int\n }\n \n+impl Copy for BreakToken {}\n+\n #[deriving(Clone)]\n pub struct BeginToken {\n     offset: int,\n     breaks: Breaks\n }\n \n+impl Copy for BeginToken {}\n+\n #[deriving(Clone)]\n pub enum Token {\n     String(string::String, int),\n@@ -152,11 +158,15 @@ pub enum PrintStackBreak {\n     Broken(Breaks),\n }\n \n+impl Copy for PrintStackBreak {}\n+\n pub struct PrintStackElem {\n     offset: int,\n     pbreak: PrintStackBreak\n }\n \n+impl Copy for PrintStackElem {}\n+\n static SIZE_INFINITY: int = 0xffff;\n \n pub fn mk_printer(out: Box<io::Writer+'static>, linewidth: uint) -> Printer {"}, {"sha": "eab03f73091744a046d265ad8439a57852e2c2e9", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -47,13 +47,17 @@ pub trait PpAnn {\n \n pub struct NoAnn;\n \n+impl Copy for NoAnn {}\n+\n impl PpAnn for NoAnn {}\n \n pub struct CurrentCommentAndLiteral {\n     cur_cmnt: uint,\n     cur_lit: uint,\n }\n \n+impl Copy for CurrentCommentAndLiteral {}\n+\n pub struct State<'a> {\n     pub s: pp::Printer,\n     cm: Option<&'a CodeMap>,"}, {"sha": "f5e89dd61ff7ef041a755f5aef76d1a9e5d4674c", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -44,6 +44,8 @@ pub enum FnKind<'a> {\n     FkFnBlock,\n }\n \n+impl<'a> Copy for FnKind<'a> {}\n+\n /// Each method of the Visitor trait is a hook to be potentially\n /// overridden.  Each method's default implementation recursively visits\n /// the substructure of the input via the corresponding `walk` method;"}, {"sha": "575ec860f973ee16da5a4e675009705cba185dfb", "filename": "src/libterm/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibterm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibterm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Flib.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -165,6 +165,7 @@ pub mod color {\n /// Terminal attributes\n pub mod attr {\n     pub use self::Attr::*;\n+    use std::kinds::Copy;\n \n     /// Terminal attributes for use with term.attr().\n     ///\n@@ -193,6 +194,8 @@ pub mod attr {\n         /// Convenience attribute to set the background color\n         BackgroundColor(super::color::Color)\n     }\n+\n+    impl Copy for Attr {}\n }\n \n /// A terminal with similar capabilities to an ANSI Terminal"}, {"sha": "c81bff6a1aeb3897fa8a00ba4762a47c40bd463e", "filename": "src/libterm/terminfo/parm.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibterm%2Fterminfo%2Fparm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibterm%2Fterminfo%2Fparm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fterminfo%2Fparm.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -33,13 +33,17 @@ enum States {\n     SeekIfEndPercent(int)\n }\n \n+impl Copy for States {}\n+\n #[deriving(PartialEq)]\n enum FormatState {\n     FormatStateFlags,\n     FormatStateWidth,\n     FormatStatePrecision\n }\n \n+impl Copy for FormatState {}\n+\n /// Types of parameters a capability can use\n #[allow(missing_docs)]\n #[deriving(Clone)]\n@@ -452,6 +456,8 @@ struct Flags {\n     space: bool\n }\n \n+impl Copy for Flags {}\n+\n impl Flags {\n     fn new() -> Flags {\n         Flags{ width: 0, precision: 0, alternate: false,\n@@ -467,6 +473,8 @@ enum FormatOp {\n     FormatString\n }\n \n+impl Copy for FormatOp {}\n+\n impl FormatOp {\n     fn from_char(c: char) -> FormatOp {\n         match c {"}, {"sha": "ffc26738dd7b2d7ca23d73eb9f98d08e833751c8", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -109,7 +109,13 @@ impl Show for TestName {\n }\n \n #[deriving(Clone)]\n-enum NamePadding { PadNone, PadOnLeft, PadOnRight }\n+enum NamePadding {\n+    PadNone,\n+    PadOnLeft,\n+    PadOnRight,\n+}\n+\n+impl Copy for NamePadding {}\n \n impl TestDesc {\n     fn padded_name(&self, column_count: uint, align: NamePadding) -> String {\n@@ -179,13 +185,14 @@ impl fmt::Show for TestFn {\n /// This is feed into functions marked with `#[bench]` to allow for\n /// set-up & tear-down before running a piece of code repeatedly via a\n /// call to `iter`.\n+#[deriving(Copy)]\n pub struct Bencher {\n     iterations: u64,\n     dur: Duration,\n     pub bytes: u64,\n }\n \n-#[deriving(Clone, Show, PartialEq, Eq, Hash)]\n+#[deriving(Copy, Clone, Show, PartialEq, Eq, Hash)]\n pub enum ShouldFail {\n     No,\n     Yes(Option<&'static str>)\n@@ -212,6 +219,8 @@ pub struct Metric {\n     noise: f64\n }\n \n+impl Copy for Metric {}\n+\n impl Metric {\n     pub fn new(value: f64, noise: f64) -> Metric {\n         Metric {value: value, noise: noise}\n@@ -238,6 +247,8 @@ pub enum MetricChange {\n     Regression(f64)\n }\n \n+impl Copy for MetricChange {}\n+\n pub type MetricDiff = TreeMap<String,MetricChange>;\n \n // The default console test runner. It accepts the command line\n@@ -280,6 +291,8 @@ pub enum ColorConfig {\n     NeverColor,\n }\n \n+impl Copy for ColorConfig {}\n+\n pub struct TestOpts {\n     pub filter: Option<Regex>,\n     pub run_ignored: bool,\n@@ -1135,7 +1148,7 @@ pub fn run_test(opts: &TestOpts,\n             return;\n         }\n         StaticBenchFn(benchfn) => {\n-            let bs = ::bench::benchmark(|harness| benchfn(harness));\n+            let bs = ::bench::benchmark(|harness| (benchfn.clone())(harness));\n             monitor_ch.send((desc, TrBench(bs), Vec::new()));\n             return;\n         }"}, {"sha": "e293c547944d535a204b08f9e439228ee52d502f", "filename": "src/libtime/lib.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibtime%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibtime%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtime%2Flib.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -77,7 +77,13 @@ mod imp {\n \n /// A record specifying a time value in seconds and nanoseconds.\n #[deriving(Clone, PartialEq, Eq, PartialOrd, Ord, Encodable, Decodable, Show)]\n-pub struct Timespec { pub sec: i64, pub nsec: i32 }\n+pub struct Timespec {\n+    pub sec: i64,\n+    pub nsec: i32,\n+}\n+\n+impl Copy for Timespec {}\n+\n /*\n  * Timespec assumes that pre-epoch Timespecs have negative sec and positive\n  * nsec fields. Darwin's and Linux's struct timespec functions handle pre-\n@@ -269,6 +275,8 @@ pub struct Tm {\n     pub tm_nsec: i32,\n }\n \n+impl Copy for Tm {}\n+\n pub fn empty_tm() -> Tm {\n     Tm {\n         tm_sec: 0_i32,\n@@ -428,6 +436,8 @@ pub enum ParseError {\n     UnexpectedCharacter(char, char),\n }\n \n+impl Copy for ParseError {}\n+\n impl Show for ParseError {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {"}, {"sha": "54f7b3501b805be56c6fac62871cf0b186283fa2", "filename": "src/libunicode/tables.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibunicode%2Ftables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Flibunicode%2Ftables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunicode%2Ftables.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -7138,6 +7138,7 @@ pub mod charwidth {\n pub mod grapheme {\n     pub use self::GraphemeCat::*;\n     use core::slice::SlicePrelude;\n+    use core::kinds::Copy;\n     use core::slice;\n \n     #[allow(non_camel_case_types)]\n@@ -7155,6 +7156,8 @@ pub mod grapheme {\n         GC_Any,\n     }\n \n+    impl Copy for GraphemeCat {}\n+\n     fn bsearch_range_value_table(c: char, r: &'static [(char, char, GraphemeCat)]) -> GraphemeCat {\n         use core::cmp::Ordering::{Equal, Less, Greater};\n         match r.binary_search(|&(lo, hi, _)| {"}, {"sha": "9ecb1195de00ae88cc30dcf2d927f9d0a2c47c29", "filename": "src/test/auxiliary/issue-14422.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Fauxiliary%2Fissue-14422.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Fauxiliary%2Fissue-14422.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-14422.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -25,6 +25,8 @@ mod src {\n \n         pub struct A;\n \n+        impl Copy for A {}\n+\n         pub fn make() -> B { A }\n \n         impl A {"}, {"sha": "cf8d0c167a1ceb784f18a15e7375d5923bbaa90e", "filename": "src/test/auxiliary/issue13213aux.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Fauxiliary%2Fissue13213aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Fauxiliary%2Fissue13213aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue13213aux.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -22,6 +22,10 @@ mod private {\n         p: i32,\n     }\n     pub const THREE: P = P { p: 3 };\n+    impl Copy for P {}\n }\n \n pub static A: S = S { p: private::THREE };\n+\n+impl Copy for S {}\n+"}, {"sha": "e6bae4628874c46b5ad0daf800589b32835786a0", "filename": "src/test/auxiliary/lang-item-public.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Fauxiliary%2Flang-item-public.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Fauxiliary%2Flang-item-public.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Flang-item-public.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -22,3 +22,8 @@ extern fn stack_exhausted() {}\n \n #[lang = \"eh_personality\"]\n extern fn eh_personality() {}\n+\n+#[lang=\"copy\"]\n+pub trait Copy {}\n+\n+"}, {"sha": "37022131c3d94de15f7a118344a38ad436a1e726", "filename": "src/test/auxiliary/method_self_arg1.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Fauxiliary%2Fmethod_self_arg1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Fauxiliary%2Fmethod_self_arg1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fmethod_self_arg1.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -16,6 +16,8 @@ pub fn get_count() -> u64 { unsafe { COUNT } }\n \n pub struct Foo;\n \n+impl Copy for Foo {}\n+\n impl Foo {\n     pub fn foo(self, x: &Foo) {\n         unsafe { COUNT *= 2; }"}, {"sha": "e1e79b59e3e443926edf30c942edb2560e7a03bb", "filename": "src/test/auxiliary/method_self_arg2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Fauxiliary%2Fmethod_self_arg2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Fauxiliary%2Fmethod_self_arg2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fmethod_self_arg2.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -16,6 +16,8 @@ pub fn get_count() -> u64 { unsafe { COUNT } }\n \n pub struct Foo;\n \n+impl Copy for Foo {}\n+\n impl Foo {\n     pub fn run_trait(self) {\n         unsafe { COUNT *= 17; }"}, {"sha": "5a918db1cfa20a04e5816517974da2c2b1a32d5d", "filename": "src/test/auxiliary/xcrate_unit_struct.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Fauxiliary%2Fxcrate_unit_struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Fauxiliary%2Fxcrate_unit_struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fxcrate_unit_struct.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -14,20 +14,31 @@\n \n pub struct Struct;\n \n+impl Copy for Struct {}\n+\n pub enum Unit {\n     UnitVariant,\n     Argument(Struct)\n }\n \n+impl Copy for Unit {}\n+\n pub struct TupleStruct(pub uint, pub &'static str);\n \n+impl Copy for TupleStruct {}\n+\n // used by the cfail test\n \n pub struct StructWithFields {\n     foo: int,\n }\n \n+impl Copy for StructWithFields {}\n+\n pub enum EnumWithVariants {\n     EnumVariant,\n     EnumVariantArg(int)\n }\n+\n+impl Copy for EnumWithVariants {}\n+"}, {"sha": "025f8467d206770d9dac925306b04d2e2e554a38", "filename": "src/test/bench/noise.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Fbench%2Fnoise.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Fbench%2Fnoise.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fnoise.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -21,6 +21,8 @@ struct Vec2 {\n     y: f32,\n }\n \n+impl Copy for Vec2 {}\n+\n fn lerp(a: f32, b: f32, v: f32) -> f32 { a * (1.0 - v) + b * v }\n \n fn smooth(v: f32) -> f32 { v * v * (3.0 - 2.0 * v) }"}, {"sha": "e954d0fed5e593e323a1a07757bc97ed7e6d7b4c", "filename": "src/test/bench/shootout-chameneos-redux.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -53,7 +53,14 @@ fn print_complements() {\n     }\n }\n \n-enum Color { Red, Yellow, Blue }\n+enum Color {\n+    Red,\n+    Yellow,\n+    Blue,\n+}\n+\n+impl Copy for Color {}\n+\n impl fmt::Show for Color {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         let str = match *self {\n@@ -70,6 +77,8 @@ struct CreatureInfo {\n     color: Color\n }\n \n+impl Copy for CreatureInfo {}\n+\n fn show_color_list(set: Vec<Color>) -> String {\n     let mut out = String::new();\n     for col in set.iter() {"}, {"sha": "4b890bbd8d30e94cf18d4c2daa014e936203ceb2", "filename": "src/test/bench/shootout-fannkuch-redux.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Fbench%2Fshootout-fannkuch-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Fbench%2Fshootout-fannkuch-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fannkuch-redux.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -67,6 +67,8 @@ struct P {\n     p: [i32, .. 16],\n }\n \n+impl Copy for P {}\n+\n struct Perm {\n     cnt: [i32, .. 16],\n     fact: [u32, .. 16],\n@@ -75,6 +77,8 @@ struct Perm {\n     perm: P,\n }\n \n+impl Copy for Perm {}\n+\n impl Perm {\n     fn new(n: u32) -> Perm {\n         let mut fact = [1, .. 16];"}, {"sha": "afffbe5bed4e42dfff0f2c2eb0d7331c6ea3264c", "filename": "src/test/bench/shootout-fasta-redux.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Fbench%2Fshootout-fasta-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Fbench%2Fshootout-fasta-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fasta-redux.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -109,6 +109,8 @@ struct AminoAcid {\n     p: f32,\n }\n \n+impl Copy for AminoAcid {}\n+\n struct RepeatFasta<'a, W:'a> {\n     alu: &'static str,\n     out: &'a mut W"}, {"sha": "847ae2c1c88cc0722ec0275a9109edc0280e97c9", "filename": "src/test/bench/shootout-k-nucleotide.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -62,6 +62,8 @@ static OCCURRENCES: [&'static str, ..5] = [\n #[deriving(PartialEq, PartialOrd, Ord, Eq)]\n struct Code(u64);\n \n+impl Copy for Code {}\n+\n impl Code {\n     fn hash(&self) -> u64 {\n         let Code(ret) = *self;"}, {"sha": "3f36c16aff63fd9f58e82071e01c915bf5ebd5b3", "filename": "src/test/bench/shootout-nbody.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-nbody.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -100,6 +100,8 @@ struct Planet {\n     mass: f64,\n }\n \n+impl Copy for Planet {}\n+\n fn advance(bodies: &mut [Planet, ..N_BODIES], dt: f64, steps: int) {\n     for _ in range(0, steps) {\n         let mut b_slice = bodies.as_mut_slice();"}, {"sha": "d5998c8ca99358231c21903f5ba4555018c50ae4", "filename": "src/test/compile-fail/borrowck-borrow-from-owned-ptr.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-from-owned-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-from-owned-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-from-owned-ptr.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -14,11 +14,15 @@ struct Foo {\n   bar2: Bar\n }\n \n+impl Copy for Foo {}\n+\n struct Bar {\n   int1: int,\n   int2: int,\n }\n \n+impl Copy for Bar {}\n+\n fn make_foo() -> Box<Foo> { panic!() }\n \n fn borrow_same_field_twice_mut_mut() {"}, {"sha": "d252d442297925941d725a9bd973f6a23a34fc41", "filename": "src/test/compile-fail/borrowck-borrow-from-stack-variable.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-from-stack-variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-from-stack-variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-from-stack-variable.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -13,11 +13,15 @@ struct Foo {\n   bar2: Bar\n }\n \n+impl Copy for Foo {}\n+\n struct Bar {\n   int1: int,\n   int2: int,\n }\n \n+impl Copy for Bar {}\n+\n fn make_foo() -> Foo { panic!() }\n \n fn borrow_same_field_twice_mut_mut() {"}, {"sha": "2063d7388a9ddddd7d1ac83471b25d97205143ec", "filename": "src/test/compile-fail/borrowck-loan-local-as-both-mut-and-imm.rs", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/c7a9b49d1b5d4e520f25355f26a93dfac4ffa146/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-local-as-both-mut-and-imm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7a9b49d1b5d4e520f25355f26a93dfac4ffa146/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-local-as-both-mut-and-imm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-local-as-both-mut-and-imm.rs?ref=c7a9b49d1b5d4e520f25355f26a93dfac4ffa146", "patch": "@@ -1,35 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-enum Either<T, U> { Left(T), Right(U) }\n-\n-    fn f(x: &mut Either<int,f64>, y: &Either<int,f64>) -> int {\n-        match *y {\n-            Either::Left(ref z) => {\n-                *x = Either::Right(1.0);\n-                *z\n-            }\n-            _ => panic!()\n-        }\n-    }\n-\n-    fn g() {\n-        let mut x: Either<int,f64> = Either::Left(3);\n-        println!(\"{}\", f(&mut x, &x)); //~ ERROR cannot borrow\n-    }\n-\n-    fn h() {\n-        let mut x: Either<int,f64> = Either::Left(3);\n-        let y: &Either<int, f64> = &x;\n-        let z: &mut Either<int, f64> = &mut x; //~ ERROR cannot borrow\n-        *z = *y;\n-    }\n-\n-    fn main() {}"}, {"sha": "0d27473cb2d02547edd87a916f56c69a0b3fcde4", "filename": "src/test/compile-fail/borrowck-use-mut-borrow.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Fcompile-fail%2Fborrowck-use-mut-borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Fcompile-fail%2Fborrowck-use-mut-borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-use-mut-borrow.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -9,6 +9,9 @@\n // except according to those terms.\n \n struct A { a: int, b: int }\n+\n+impl Copy for A {}\n+\n struct B { a: int, b: Box<int> }\n \n fn var_copy_after_var_borrow() {"}, {"sha": "af97c864dc81a9b88a2bbbc060b4cbff3b555d07", "filename": "src/test/compile-fail/dst-index.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Fcompile-fail%2Fdst-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Fcompile-fail%2Fdst-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-index.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -16,6 +16,8 @@ use std::fmt::Show;\n \n struct S;\n \n+impl Copy for S {}\n+\n impl Index<uint, str> for S {\n     fn index<'a>(&'a self, _: &uint) -> &'a str {\n         \"hello\"\n@@ -24,6 +26,8 @@ impl Index<uint, str> for S {\n \n struct T;\n \n+impl Copy for T {}\n+\n impl Index<uint, Show + 'static> for T {\n     fn index<'a>(&'a self, idx: &uint) -> &'a (Show + 'static) {\n         static x: uint = 42;\n@@ -33,7 +37,8 @@ impl Index<uint, Show + 'static> for T {\n \n fn main() {\n     S[0];\n-    //~^ ERROR E0161\n+    //~^ ERROR cannot move out of dereference\n+    //~^^ ERROR E0161\n     T[0];\n     //~^ ERROR cannot move out of dereference\n     //~^^ ERROR E0161"}, {"sha": "4c1dafd8c1a49c0be7c4ab63bce76e4efc6784f1", "filename": "src/test/compile-fail/dst-rvalue.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Fcompile-fail%2Fdst-rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Fcompile-fail%2Fdst-rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-rvalue.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -13,8 +13,10 @@\n pub fn main() {\n     let _x: Box<str> = box *\"hello world\";\n     //~^ ERROR E0161\n+    //~^^ ERROR cannot move out of dereference\n \n     let array: &[int] = &[1, 2, 3];\n     let _x: Box<[int]> = box *array;\n     //~^ ERROR E0161\n+    //~^^ ERROR cannot move out of dereference\n }"}, {"sha": "ab396edddf49c1031dce42f0a69a9a6d1ff952f0", "filename": "src/test/compile-fail/issue-17651.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Fcompile-fail%2Fissue-17651.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Fcompile-fail%2Fissue-17651.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17651.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -13,5 +13,6 @@\n \n fn main() {\n     (|| box *[0u].as_slice())();\n-    //~^ ERROR cannot move a value of type [uint]\n+    //~^ ERROR cannot move out of dereference\n+    //~^^ ERROR cannot move a value of type [uint]\n }"}, {"sha": "8868c7f8256da5b646386e049ae389a028c9de66", "filename": "src/test/compile-fail/kindck-copy.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Fcompile-fail%2Fkindck-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Fcompile-fail%2Fkindck-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-copy.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -14,13 +14,16 @@\n use std::rc::Rc;\n \n fn assert_copy<T:Copy>() { }\n+\n trait Dummy { }\n \n struct MyStruct {\n     x: int,\n     y: int,\n }\n \n+impl Copy for MyStruct {}\n+\n struct MyNoncopyStruct {\n     x: Box<char>,\n }"}, {"sha": "9e5f15c2721961797f1de9864751670fcda937f9", "filename": "src/test/compile-fail/lint-dead-code-1.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Fcompile-fail%2Flint-dead-code-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Fcompile-fail%2Flint-dead-code-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-dead-code-1.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -12,6 +12,7 @@\n #![allow(unused_variables)]\n #![allow(non_camel_case_types)]\n #![allow(non_upper_case_globals)]\n+#![allow(missing_copy_implementations)]\n #![deny(dead_code)]\n \n #![crate_type=\"lib\"]"}, {"sha": "b73c3fa26105081355f4f5027eec7df989dbc76f", "filename": "src/test/compile-fail/lint-missing-doc.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Fcompile-fail%2Flint-missing-doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Fcompile-fail%2Flint-missing-doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-missing-doc.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -13,6 +13,7 @@\n #![feature(globs)]\n #![deny(missing_docs)]\n #![allow(dead_code)]\n+#![allow(missing_copy_implementations)]\n \n //! Some garbage docs for the crate here\n #![doc=\"More garbage\"]"}, {"sha": "56f71c844ac2935aa9dc942bec03b4896399251d", "filename": "src/test/compile-fail/opt-in-copy.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Fcompile-fail%2Fopt-in-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Fcompile-fail%2Fopt-in-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fopt-in-copy.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -0,0 +1,33 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct CantCopyThis;\n+\n+struct IWantToCopyThis {\n+    but_i_cant: CantCopyThis,\n+}\n+\n+impl Copy for IWantToCopyThis {}\n+//~^ ERROR the trait `Copy` may not be implemented for this type\n+\n+enum CantCopyThisEither {\n+    A,\n+    B,\n+}\n+\n+enum IWantToCopyThisToo {\n+    ButICant(CantCopyThisEither),\n+}\n+\n+impl Copy for IWantToCopyThisToo {}\n+//~^ ERROR the trait `Copy` may not be implemented for this type\n+\n+fn main() {}\n+"}, {"sha": "1d1b244ab5aeb51a031c23a1c31b0aaee78c3943", "filename": "src/test/compile-fail/stage0-clone-contravariant-lifetime.rs", "status": "removed", "additions": 0, "deletions": 43, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/c7a9b49d1b5d4e520f25355f26a93dfac4ffa146/src%2Ftest%2Fcompile-fail%2Fstage0-clone-contravariant-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7a9b49d1b5d4e520f25355f26a93dfac4ffa146/src%2Ftest%2Fcompile-fail%2Fstage0-clone-contravariant-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstage0-clone-contravariant-lifetime.rs?ref=c7a9b49d1b5d4e520f25355f26a93dfac4ffa146", "patch": "@@ -1,43 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// A zero-dependency test that covers some basic traits, default\n-// methods, etc.  When mucking about with basic type system stuff I\n-// often encounter problems in the iterator trait, so it's useful to\n-// have hanging around. -nmatsakis\n-\n-// error-pattern: requires `start` lang_item\n-\n-#![no_std]\n-#![feature(lang_items)]\n-\n-#[lang = \"sized\"]\n-pub trait Sized for Sized? {\n-    // Empty.\n-}\n-\n-pub mod std {\n-    pub mod clone {\n-        pub trait Clone {\n-            fn clone(&self) -> Self;\n-        }\n-    }\n-}\n-\n-pub struct ContravariantLifetime<'a>;\n-\n-impl <'a> ::std::clone::Clone for ContravariantLifetime<'a> {\n-    #[inline]\n-    fn clone(&self) -> ContravariantLifetime<'a> {\n-        match *self { ContravariantLifetime => ContravariantLifetime, }\n-    }\n-}\n-\n-fn main() { }"}, {"sha": "f68eb6400fa8d3e159afc1cb07e84cac49881724", "filename": "src/test/compile-fail/stage0-cmp.rs", "status": "removed", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/c7a9b49d1b5d4e520f25355f26a93dfac4ffa146/src%2Ftest%2Fcompile-fail%2Fstage0-cmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7a9b49d1b5d4e520f25355f26a93dfac4ffa146/src%2Ftest%2Fcompile-fail%2Fstage0-cmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstage0-cmp.rs?ref=c7a9b49d1b5d4e520f25355f26a93dfac4ffa146", "patch": "@@ -1,39 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-// A zero-dependency test that covers some basic traits, default\n-// methods, etc.  When mucking about with basic type system stuff I\n-// often encounter problems in the iterator trait, so it's useful to\n-// have hanging around. -nmatsakis\n-\n-// error-pattern: requires `start` lang_item\n-\n-#![no_std]\n-#![feature(lang_items)]\n-\n-#[lang = \"sized\"]\n-pub trait Sized for Sized? {\n-    // Empty.\n-}\n-\n-#[unstable = \"Definition may change slightly after trait reform\"]\n-pub trait PartialEq for Sized? {\n-    /// This method tests for `self` and `other` values to be equal, and is used by `==`.\n-    fn eq(&self, other: &Self) -> bool;\n-}\n-\n-#[unstable = \"Trait is unstable.\"]\n-impl<'a, Sized? T: PartialEq> PartialEq for &'a T {\n-    #[inline]\n-    fn eq(&self, other: & &'a T) -> bool { PartialEq::eq(*self, *other) }\n-}\n-\n-fn main() { }"}, {"sha": "b0a0142f6dd556eb2de16434a6e3d02501e20c79", "filename": "src/test/debuginfo/c-style-enum.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Fdebuginfo%2Fc-style-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Fdebuginfo%2Fc-style-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fc-style-enum.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -104,18 +104,21 @@ use self::AutoDiscriminant::{One, Two, Three};\n use self::ManualDiscriminant::{OneHundred, OneThousand, OneMillion};\n use self::SingleVariant::TheOnlyVariant;\n \n+#[deriving(Copy)]\n enum AutoDiscriminant {\n     One,\n     Two,\n     Three\n }\n \n+#[deriving(Copy)]\n enum ManualDiscriminant {\n     OneHundred = 100,\n     OneThousand = 1000,\n     OneMillion = 1000000\n }\n \n+#[deriving(Copy)]\n enum SingleVariant {\n     TheOnlyVariant\n }"}, {"sha": "4c0c82efea35d33873f78142ac1c2aaccc2e2e37", "filename": "src/test/debuginfo/generic-method-on-generic-struct.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Fdebuginfo%2Fgeneric-method-on-generic-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Fdebuginfo%2Fgeneric-method-on-generic-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgeneric-method-on-generic-struct.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -147,3 +147,6 @@ fn main() {\n }\n \n fn zzz() {()}\n+\n+impl<T:Copy> Copy for Struct<T> {}\n+"}, {"sha": "8cb8fae75cf062bbd9819228ee838ece8bf95c1e", "filename": "src/test/debuginfo/method-on-enum.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Fdebuginfo%2Fmethod-on-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Fdebuginfo%2Fmethod-on-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmethod-on-enum.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -148,3 +148,6 @@ fn main() {\n }\n \n fn zzz() {()}\n+\n+impl Copy for Enum {}\n+"}, {"sha": "d4244ee27d4c20b696d5d09c4d22be690ef2bbcd", "filename": "src/test/debuginfo/method-on-generic-struct.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Fdebuginfo%2Fmethod-on-generic-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Fdebuginfo%2Fmethod-on-generic-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmethod-on-generic-struct.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -147,3 +147,6 @@ fn main() {\n }\n \n fn zzz() {()}\n+\n+impl<T:Copy> Copy for Struct<T> {}\n+"}, {"sha": "ca00587ba445d81ca4e797b2532f06f79eca204c", "filename": "src/test/debuginfo/method-on-struct.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Fdebuginfo%2Fmethod-on-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Fdebuginfo%2Fmethod-on-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmethod-on-struct.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -146,3 +146,6 @@ fn main() {\n }\n \n fn zzz() {()}\n+\n+impl Copy for Struct {}\n+"}, {"sha": "e70f86a53679ea555b34b6110a0204fe7102eee4", "filename": "src/test/debuginfo/method-on-trait.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Fdebuginfo%2Fmethod-on-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Fdebuginfo%2Fmethod-on-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmethod-on-trait.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -152,3 +152,6 @@ fn main() {\n }\n \n fn zzz() {()}\n+\n+impl Copy for Struct {}\n+"}, {"sha": "31bdd20e409db8eb2d8e6027142b9bb32d922934", "filename": "src/test/debuginfo/method-on-tuple-struct.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Fdebuginfo%2Fmethod-on-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Fdebuginfo%2Fmethod-on-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmethod-on-tuple-struct.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -144,3 +144,6 @@ fn main() {\n }\n \n fn zzz() {()}\n+\n+impl Copy for TupleStruct {}\n+"}, {"sha": "87fdb2c42c8f86956905346f0946c1b1af4170a7", "filename": "src/test/debuginfo/self-in-default-method.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Fdebuginfo%2Fself-in-default-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Fdebuginfo%2Fself-in-default-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fself-in-default-method.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -148,3 +148,6 @@ fn main() {\n }\n \n fn zzz() {()}\n+\n+impl Copy for Struct {}\n+"}, {"sha": "6f488230521eb066d4e423b0c0a9ff7ac33f81e4", "filename": "src/test/debuginfo/self-in-generic-default-method.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Fdebuginfo%2Fself-in-generic-default-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Fdebuginfo%2Fself-in-generic-default-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fself-in-generic-default-method.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -149,3 +149,6 @@ fn main() {\n }\n \n fn zzz() {()}\n+\n+impl Copy for Struct {}\n+"}, {"sha": "db01bc94e32b81fe65ceb1d259d3bb310620cc94", "filename": "src/test/pretty/block-disambig.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Fpretty%2Fblock-disambig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Fpretty%2Fblock-disambig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fblock-disambig.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -21,6 +21,8 @@ fn test2() -> int { let val = &0i; { } *val }\n \n struct S { eax: int }\n \n+impl Copy for S {}\n+\n fn test3() {\n     let regs = &Cell::new(S {eax: 0});\n     match true { true => { } _ => { } }"}, {"sha": "12d961bd59ebfce516a701ca53e19de16546ef9d", "filename": "src/test/run-make/extern-fn-with-packed-struct/test.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-make%2Fextern-fn-with-packed-struct%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-make%2Fextern-fn-with-packed-struct%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fextern-fn-with-packed-struct%2Ftest.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -16,6 +16,8 @@ struct Foo {\n     c: i8\n }\n \n+impl Copy for Foo {}\n+\n #[link(name = \"test\", kind = \"static\")]\n extern {\n     fn foo(f: Foo) -> Foo;"}, {"sha": "cab98204b17d76ddeb02de086840b877a39f8f70", "filename": "src/test/run-make/target-specs/foo.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-make%2Ftarget-specs%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-make%2Ftarget-specs%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Ftarget-specs%2Ffoo.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -11,6 +11,9 @@\n #![feature(lang_items)]\n #![no_std]\n \n+#[lang=\"copy\"]\n+trait Copy { }\n+\n #[lang=\"sized\"]\n trait Sized { }\n "}, {"sha": "df4106c98446c4344ba05945833721d4923ce964", "filename": "src/test/run-pass/borrowck-univariant-enum.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Fborrowck-univariant-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Fborrowck-univariant-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-univariant-enum.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -15,6 +15,8 @@ enum newtype {\n     newvar(int)\n }\n \n+impl Copy for newtype {}\n+\n pub fn main() {\n \n     // Test that borrowck treats enums with a single variant"}, {"sha": "382caa83c61c71cb1b4acac82aab30c0c8d15ca8", "filename": "src/test/run-pass/builtin-superkinds-in-metadata.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-in-metadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-in-metadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-in-metadata.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -19,10 +19,12 @@ use trait_superkinds_in_metadata::{RequiresCopy};\n \n struct X<T>(T);\n \n-impl <T:Sync> RequiresShare for X<T> { }\n+impl<T:Copy> Copy for X<T> {}\n \n-impl <T:Sync+Send> RequiresRequiresShareAndSend for X<T> { }\n+impl<T:Sync> RequiresShare for X<T> { }\n \n-impl <T:Copy> RequiresCopy for X<T> { }\n+impl<T:Sync+Send> RequiresRequiresShareAndSend for X<T> { }\n+\n+impl<T:Copy> RequiresCopy for X<T> { }\n \n pub fn main() { }"}, {"sha": "6455f1e4bb2b96e68314ad32ee6be3eb45422213", "filename": "src/test/run-pass/cell-does-not-clone.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Fcell-does-not-clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Fcell-does-not-clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcell-does-not-clone.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -24,6 +24,8 @@ impl Clone for Foo {\n     }\n }\n \n+impl Copy for Foo {}\n+\n pub fn main() {\n     let x = Cell::new(Foo { x: 22 });\n     let _y = x.get();"}, {"sha": "2a9756d7714cdd508769bcbc749ba5dfdc7bae7a", "filename": "src/test/run-pass/class-impl-very-parameterized-trait.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -14,6 +14,8 @@ use std::cmp;\n #[deriving(Show)]\n enum cat_type { tuxedo, tabby, tortoiseshell }\n \n+impl Copy for cat_type {}\n+\n impl cmp::PartialEq for cat_type {\n     fn eq(&self, other: &cat_type) -> bool {\n         ((*self) as uint) == ((*other) as uint)"}, {"sha": "df0012e07ec72ede9248e4d04d8e1602ced66979", "filename": "src/test/run-pass/coherence-impl-in-fn.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Fcoherence-impl-in-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Fcoherence-impl-in-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoherence-impl-in-fn.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -10,6 +10,7 @@\n \n pub fn main() {\n     enum x { foo }\n+    impl Copy for x {}\n     impl ::std::cmp::PartialEq for x {\n         fn eq(&self, other: &x) -> bool {\n             (*self) as int == (*other) as int"}, {"sha": "e0d9d569d175ddac43baa1183b0152078c485c37", "filename": "src/test/run-pass/coherence-where-clause.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Fcoherence-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Fcoherence-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoherence-where-clause.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -28,6 +28,8 @@ struct MyType {\n     dummy: uint\n }\n \n+impl Copy for MyType {}\n+\n impl MyTrait for MyType {\n     fn get(&self) -> MyType { (*self).clone() }\n }"}, {"sha": "9a1a5de936005a01357432f7ce5b9cef56fbe5e9", "filename": "src/test/run-pass/const-nullary-univariant-enum.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Fconst-nullary-univariant-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Fconst-nullary-univariant-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-nullary-univariant-enum.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -12,6 +12,8 @@ enum Foo {\n     Bar = 0xDEADBEE\n }\n \n+impl Copy for Foo {}\n+\n static X: Foo = Foo::Bar;\n \n pub fn main() {"}, {"sha": "26cb27cc653925b576e27eb874eb2dc9f28242ed", "filename": "src/test/run-pass/dst-struct-sole.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Fdst-struct-sole.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Fdst-struct-sole.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdst-struct-sole.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -33,6 +33,8 @@ fn foo2<T:ToBar>(x: &Fat<[T]>) {\n #[deriving(PartialEq,Eq)]\n struct Bar;\n \n+impl Copy for Bar {}\n+\n trait ToBar {\n     fn to_bar(&self) -> Bar;\n }"}, {"sha": "bf5b300f7cf0aa72be0b5337fc8ff5de6187bb3b", "filename": "src/test/run-pass/dst-struct.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Fdst-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Fdst-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdst-struct.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -49,6 +49,8 @@ fn foo3(x: &Fat<Fat<[int]>>) {\n #[deriving(PartialEq,Eq)]\n struct Bar;\n \n+impl Copy for Bar {}\n+\n trait ToBar {\n     fn to_bar(&self) -> Bar;\n }"}, {"sha": "907c7810736ba98f2291fca3f316d86fd53a501b", "filename": "src/test/run-pass/dst-trait.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Fdst-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Fdst-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdst-trait.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -17,11 +17,15 @@ struct Fat<Sized? T> {\n #[deriving(PartialEq,Eq)]\n struct Bar;\n \n+impl Copy for Bar {}\n+\n #[deriving(PartialEq,Eq)]\n struct Bar1 {\n     f: int\n }\n \n+impl Copy for Bar1 {}\n+\n trait ToBar {\n     fn to_bar(&self) -> Bar;\n     fn to_val(&self) -> int;"}, {"sha": "e5d11ac1adb2aeebfe2863c9be7701c1c20af482", "filename": "src/test/run-pass/empty-tag.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Fempty-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Fempty-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fempty-tag.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -11,6 +11,8 @@\n #[deriving(Show)]\n enum chan { chan_t, }\n \n+impl Copy for chan {}\n+\n impl PartialEq for chan {\n     fn eq(&self, other: &chan) -> bool {\n         ((*self) as uint) == ((*other) as uint)"}, {"sha": "cf8e742947d1da7ff299c78f3cb1d12e4d1e3a14", "filename": "src/test/run-pass/enum-discrim-width-stuff.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Fenum-discrim-width-stuff.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Fenum-discrim-width-stuff.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenum-discrim-width-stuff.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -20,6 +20,7 @@ macro_rules! check {\n                 A = 0\n             }\n             static C: E = E::V;\n+            impl Copy for E {}\n             pub fn check() {\n                 assert_eq!(size_of::<E>(), size_of::<$t>());\n                 assert_eq!(E::V as $t, $v as $t);"}, {"sha": "eeda299c71fa6105234824ee21325b7765a3408d", "filename": "src/test/run-pass/explicit-self-generic.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Fexplicit-self-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Fexplicit-self-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexplicit-self-generic.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -18,10 +18,14 @@ type EqFn<K> = proc(K, K):'static -> bool;\n \n struct LM { resize_at: uint, size: uint }\n \n+impl Copy for LM {}\n+\n enum HashMap<K,V> {\n     HashMap_(LM)\n }\n \n+impl<K,V> Copy for HashMap<K,V> {}\n+\n fn linear_map<K,V>() -> HashMap<K,V> {\n     HashMap::HashMap_(LM{\n         resize_at: 32,"}, {"sha": "48e9d9dea22cdae0e3ee69cb0c9ac7f5addbf011", "filename": "src/test/run-pass/export-unexported-dep.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Fexport-unexported-dep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Fexport-unexported-dep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexport-unexported-dep.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -15,6 +15,8 @@ mod foo {\n     // not exported\n     enum t { t1, t2, }\n \n+    impl Copy for t {}\n+\n     impl PartialEq for t {\n         fn eq(&self, other: &t) -> bool {\n             ((*self) as uint) == ((*other) as uint)"}, {"sha": "6e9ba4f8f41f1b2ab0bbe3c31df589d48866de5e", "filename": "src/test/run-pass/expr-copy.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Fexpr-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Fexpr-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-copy.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -15,6 +15,8 @@ fn f(arg: &mut A) {\n \n struct A { a: int }\n \n+impl Copy for A {}\n+\n pub fn main() {\n     let mut x = A {a: 10};\n     f(&mut x);"}, {"sha": "c95ca3fff8c564eae1e8fa8426b8bf95b34c2df5", "filename": "src/test/run-pass/expr-if-struct.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Fexpr-if-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Fexpr-if-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-if-struct.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -16,6 +16,8 @@\n \n struct I { i: int }\n \n+impl Copy for I {}\n+\n fn test_rec() {\n     let rs = if true { I {i: 100} } else { I {i: 101} };\n     assert_eq!(rs.i, 100);\n@@ -24,6 +26,8 @@ fn test_rec() {\n #[deriving(Show)]\n enum mood { happy, sad, }\n \n+impl Copy for mood {}\n+\n impl PartialEq for mood {\n     fn eq(&self, other: &mood) -> bool {\n         ((*self) as uint) == ((*other) as uint)"}, {"sha": "83101a3d2cc3a2130e3e5364aaeb1fc59d9858dc", "filename": "src/test/run-pass/expr-match-struct.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Fexpr-match-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Fexpr-match-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-match-struct.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -15,6 +15,8 @@\n // Tests for match as expressions resulting in struct types\n struct R { i: int }\n \n+impl Copy for R {}\n+\n fn test_rec() {\n     let rs = match true { true => R {i: 100}, _ => panic!() };\n     assert_eq!(rs.i, 100);\n@@ -23,6 +25,8 @@ fn test_rec() {\n #[deriving(Show)]\n enum mood { happy, sad, }\n \n+impl Copy for mood {}\n+\n impl PartialEq for mood {\n     fn eq(&self, other: &mood) -> bool {\n         ((*self) as uint) == ((*other) as uint)"}, {"sha": "2ca5f430a2a37e2c58a740761baffc30ed9a8079", "filename": "src/test/run-pass/exterior.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Fexterior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Fexterior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexterior.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -13,6 +13,8 @@ use std::cell::Cell;\n \n struct Point {x: int, y: int, z: int}\n \n+impl Copy for Point {}\n+\n fn f(p: &Cell<Point>) {\n     assert!((p.get().z == 12));\n     p.set(Point {x: 10, y: 11, z: 13});"}, {"sha": "2b80a4040362612364a4bf090f3b91d57c4f80b8", "filename": "src/test/run-pass/extern-pass-TwoU16s.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU16s.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU16s.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU16s.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -16,6 +16,8 @@ pub struct TwoU16s {\n     one: u16, two: u16\n }\n \n+impl Copy for TwoU16s {}\n+\n #[link(name = \"rust_test_helpers\")]\n extern {\n     pub fn rust_dbg_extern_identity_TwoU16s(v: TwoU16s) -> TwoU16s;"}, {"sha": "be4998c86fddfe3e82ce41ce5e6d293110d2e3e9", "filename": "src/test/run-pass/extern-pass-TwoU32s.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU32s.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU32s.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU32s.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -16,6 +16,8 @@ pub struct TwoU32s {\n     one: u32, two: u32\n }\n \n+impl Copy for TwoU32s {}\n+\n #[link(name = \"rust_test_helpers\")]\n extern {\n     pub fn rust_dbg_extern_identity_TwoU32s(v: TwoU32s) -> TwoU32s;"}, {"sha": "e8d91815bf9d73c8b4ef75ed8b78cc539d45bbf3", "filename": "src/test/run-pass/extern-pass-TwoU64s.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU64s.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU64s.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU64s.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -16,6 +16,8 @@ pub struct TwoU64s {\n     one: u64, two: u64\n }\n \n+impl Copy for TwoU64s {}\n+\n #[link(name = \"rust_test_helpers\")]\n extern {\n     pub fn rust_dbg_extern_identity_TwoU64s(v: TwoU64s) -> TwoU64s;"}, {"sha": "7aa710df80058af2a0e5780d76d48ca1565804e9", "filename": "src/test/run-pass/extern-pass-TwoU8s.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU8s.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU8s.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU8s.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -16,6 +16,8 @@ pub struct TwoU8s {\n     one: u8, two: u8\n }\n \n+impl Copy for TwoU8s {}\n+\n #[link(name = \"rust_test_helpers\")]\n extern {\n     pub fn rust_dbg_extern_identity_TwoU8s(v: TwoU8s) -> TwoU8s;"}, {"sha": "5d6815fc3c7a49b76440f979cb099ac4e9d7c3f2", "filename": "src/test/run-pass/foreign-fn-with-byval.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Fforeign-fn-with-byval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Fforeign-fn-with-byval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-fn-with-byval.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -14,6 +14,8 @@ pub struct S {\n     z: u64,\n }\n \n+impl Copy for S {}\n+\n #[link(name = \"rust_test_helpers\")]\n extern {\n     pub fn get_x(x: S) -> u64;"}, {"sha": "a341bfe22eb918a3d7575693c6b2a5d723193d73", "filename": "src/test/run-pass/generic-fn.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Fgeneric-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Fgeneric-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-fn.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -14,6 +14,8 @@ fn id<T>(x: T) -> T { return x; }\n \n struct Triple {x: int, y: int, z: int}\n \n+impl Copy for Triple {}\n+\n pub fn main() {\n     let mut x = 62;\n     let mut y = 63;"}, {"sha": "b1bc40b662de1f6a0e135fe43133dab8739d75a2", "filename": "src/test/run-pass/guards-not-exhaustive.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Fguards-not-exhaustive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Fguards-not-exhaustive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fguards-not-exhaustive.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -10,6 +10,8 @@\n \n enum Q { R(Option<uint>) }\n \n+impl Copy for Q {}\n+\n fn xyzzy(q: Q) -> uint {\n     match q {\n         Q::R(S) if S.is_some() => { 0 }"}, {"sha": "0157423863c2aa595a831eb5f74b29560efbd037", "filename": "src/test/run-pass/guards.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Fguards.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Fguards.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fguards.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -10,6 +10,8 @@\n \n struct Pair { x: int, y: int }\n \n+impl Copy for Pair {}\n+\n pub fn main() {\n     let a: int =\n         match 10i { x if x < 7 => { 1i } x if x < 11 => { 2i } 10 => { 3i } _ => { 4i } };"}, {"sha": "1caa04ae0b16d2af0da3f3c14951519bf37fe4a6", "filename": "src/test/run-pass/issue-12860.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Fissue-12860.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Fissue-12860.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-12860.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -20,6 +20,8 @@ struct XYZ {\n     z: int\n }\n \n+impl Copy for XYZ {}\n+\n fn main() {\n     let mut connected = HashSet::new();\n     let mut border = HashSet::new();"}, {"sha": "0ebd3ae8d97693294e350f84c3c585da43f17d9d", "filename": "src/test/run-pass/issue-19100.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Fissue-19100.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Fissue-19100.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-19100.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -13,6 +13,8 @@ enum Foo {\n     Baz\n }\n \n+impl Copy for Foo {}\n+\n impl Foo {\n     fn foo(&self) {\n         match self {"}, {"sha": "1f371f0a1c204c8f22212f0026fbda5106f64100", "filename": "src/test/run-pass/issue-2288.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Fissue-2288.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Fissue-2288.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2288.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -12,10 +12,13 @@\n trait clam<A> {\n   fn chowder(&self, y: A);\n }\n+\n struct foo<A> {\n   x: A,\n }\n \n+impl<A:Copy> Copy for foo<A> {}\n+\n impl<A> clam<A> for foo<A> {\n   fn chowder(&self, _y: A) {\n   }"}, {"sha": "bc014f699c731f15965679bdc2ae895e58a07d98", "filename": "src/test/run-pass/issue-2633.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Fissue-2633.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Fissue-2633.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2633.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -12,6 +12,8 @@ struct cat {\n     meow: extern \"Rust\" fn(),\n }\n \n+impl Copy for cat {}\n+\n fn meow() {\n     println!(\"meow\")\n }\n@@ -24,6 +26,8 @@ fn cat() -> cat {\n \n struct KittyInfo {kitty: cat}\n \n+impl Copy for KittyInfo {}\n+\n // Code compiles and runs successfully if we add a + before the first arg\n fn nyan(kitty: cat, _kitty_info: KittyInfo) {\n     (kitty.meow)();"}, {"sha": "9e9d611f1a320eb994688c45e8a4ab858322782e", "filename": "src/test/run-pass/issue-3121.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Fissue-3121.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Fissue-3121.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3121.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -13,6 +13,10 @@ enum side { mayo, catsup, vinegar }\n enum order { hamburger, fries(side), shake }\n enum meal { to_go(order), for_here(order) }\n \n+impl Copy for side {}\n+impl Copy for order {}\n+impl Copy for meal {}\n+\n fn foo(m: Box<meal>, cond: bool) {\n     match *m {\n       meal::to_go(_) => { }"}, {"sha": "d04d8f92ac40d62dbc1783e05b4a4bc21ef2fd31", "filename": "src/test/run-pass/issue-3563-3.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -29,18 +29,24 @@ struct Point {\n     y: int,\n }\n \n+impl Copy for Point {}\n+\n // Represents an offset on a canvas. (This has the same structure as a Point.\n // but different semantics).\n struct Size {\n     width: int,\n     height: int,\n }\n \n+impl Copy for Size {}\n+\n struct Rect {\n     top_left: Point,\n     size: Size,\n }\n \n+impl Copy for Rect {}\n+\n // Contains the information needed to do shape rendering via ASCII art.\n struct AsciiArt {\n     width: uint,"}, {"sha": "ada3e37c092a7a92d28bb4c43126ad21099c66b8", "filename": "src/test/run-pass/issue-3743.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Fissue-3743.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Fissue-3743.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3743.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -13,6 +13,8 @@ struct Vec2 {\n     y: f64\n }\n \n+impl Copy for Vec2 {}\n+\n // methods we want to export as methods as well as operators\n impl Vec2 {\n #[inline(always)]"}, {"sha": "de6926e551296629acee1e0f522db302aaefc104", "filename": "src/test/run-pass/issue-3753.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Fissue-3753.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Fissue-3753.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3753.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -19,11 +19,15 @@ pub struct Point {\n     y: f64\n }\n \n+impl Copy for Point {}\n+\n pub enum Shape {\n     Circle(Point, f64),\n     Rectangle(Point, Point)\n }\n \n+impl Copy for Shape {}\n+\n impl Shape {\n     pub fn area(&self, sh: Shape) -> f64 {\n         match sh {"}, {"sha": "0a13e001fabf5895f91d217e21d2f487913a11ea", "filename": "src/test/run-pass/issue-5688.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Fissue-5688.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Fissue-5688.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5688.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -18,7 +18,11 @@ failed to typecheck correctly.\n */\n \n struct X { vec: &'static [int] }\n+\n+impl Copy for X {}\n+\n static V: &'static [X] = &[X { vec: &[1, 2, 3] }];\n+\n pub fn main() {\n     for &v in V.iter() {\n         println!(\"{}\", v.vec);"}, {"sha": "81774c73c392c914a7eaa893887a9f2044f28d1b", "filename": "src/test/run-pass/lang-item-public.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Flang-item-public.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Flang-item-public.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flang-item-public.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -13,6 +13,7 @@\n // ignore-windows #13361\n \n #![no_std]\n+#![feature(lang_items)]\n \n extern crate \"lang-item-public\" as lang_lib;\n "}, {"sha": "400aab64b4cdb4460a5f8e68a1650f1ab66ca8f8", "filename": "src/test/run-pass/match-arm-statics.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Fmatch-arm-statics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Fmatch-arm-statics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-arm-statics.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -38,6 +38,8 @@ const VARIANT2_NORTH: EnumWithStructVariants = EnumWithStructVariants::Variant2\n pub mod glfw {\n     pub struct InputState(uint);\n \n+    impl Copy for InputState {}\n+\n     pub const RELEASE  : InputState = InputState(0);\n     pub const PRESS    : InputState = InputState(1);\n     pub const REPEAT   : InputState = InputState(2);"}, {"sha": "36dfe83a9ebae13080e0eaebbc2b7f7da3da59e1", "filename": "src/test/run-pass/method-self-arg-trait.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Fmethod-self-arg-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Fmethod-self-arg-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmethod-self-arg-trait.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -14,6 +14,8 @@ static mut COUNT: u64 = 1;\n \n struct Foo;\n \n+impl Copy for Foo {}\n+\n trait Bar {\n     fn foo1(&self);\n     fn foo2(self);"}, {"sha": "788a25efcf9872a8c7b0fe1757ac640ae8f5e222", "filename": "src/test/run-pass/method-self-arg.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Fmethod-self-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Fmethod-self-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmethod-self-arg.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -14,6 +14,8 @@ static mut COUNT: uint = 1;\n \n struct Foo;\n \n+impl Copy for Foo {}\n+\n impl Foo {\n     fn foo(self, x: &Foo) {\n         unsafe { COUNT *= 2; }"}, {"sha": "f5b51cd423301175c94e6b0102b72bd87c1aab13", "filename": "src/test/run-pass/monomorphize-abi-alignment.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Fmonomorphize-abi-alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Fmonomorphize-abi-alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmonomorphize-abi-alignment.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -19,12 +19,25 @@\n  */\n \n struct S<T> { i:u8, t:T }\n-impl<T> S<T> { fn unwrap(self) -> T { self.t } }\n+\n+impl<T:Copy> Copy for S<T> {}\n+\n+impl<T> S<T> {\n+    fn unwrap(self) -> T {\n+        self.t\n+    }\n+}\n+\n #[deriving(PartialEq, Show)]\n struct A((u32, u32));\n+\n+impl Copy for A {}\n+\n #[deriving(PartialEq, Show)]\n struct B(u64);\n \n+impl Copy for B {}\n+\n pub fn main() {\n     static Ca: S<A> = S { i: 0, t: A((13, 104)) };\n     static Cb: S<B> = S { i: 0, t: B(31337) };"}, {"sha": "87d188418bdd3ee353dfe487b6bb97e238924eef", "filename": "src/test/run-pass/multidispatch1.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Fmultidispatch1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Fmultidispatch1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmultidispatch1.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -18,6 +18,8 @@ struct MyType {\n     dummy: uint\n }\n \n+impl Copy for MyType {}\n+\n impl MyTrait<uint> for MyType {\n     fn get(&self) -> uint { self.dummy }\n }"}, {"sha": "1aa15cc5983491a023195e2b0e66da9b65fa1bb9", "filename": "src/test/run-pass/multidispatch2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Fmultidispatch2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Fmultidispatch2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmultidispatch2.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -27,6 +27,8 @@ struct MyType {\n     dummy: uint\n }\n \n+impl Copy for MyType {}\n+\n impl MyTrait<uint> for MyType {\n     fn get(&self) -> uint { self.dummy }\n }"}, {"sha": "093fd6c81cc637a3a13c049307381cc1a2f2feca", "filename": "src/test/run-pass/newtype.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Fnewtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Fnewtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnewtype.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -10,7 +10,14 @@\n \n struct mytype(Mytype);\n \n-struct Mytype {compute: fn(mytype) -> int, val: int}\n+impl Copy for mytype {}\n+\n+struct Mytype {\n+    compute: fn(mytype) -> int,\n+    val: int,\n+}\n+\n+impl Copy for Mytype {}\n \n fn compute(i: mytype) -> int {\n     let mytype(m) = i;"}, {"sha": "5f399deb885302aa8d3a05b87bfa917951941cd1", "filename": "src/test/run-pass/out-pointer-aliasing.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Fout-pointer-aliasing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Fout-pointer-aliasing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fout-pointer-aliasing.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -13,6 +13,8 @@ pub struct Foo {\n     _f2: int,\n }\n \n+impl Copy for Foo {}\n+\n #[inline(never)]\n pub fn foo(f: &mut Foo) -> Foo {\n     let ret = *f;"}, {"sha": "f0daf371ca79e90d791b99ce4f25caa7ce6020c5", "filename": "src/test/run-pass/overloaded-autoderef-order.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Foverloaded-autoderef-order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Foverloaded-autoderef-order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-autoderef-order.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -15,6 +15,8 @@ struct DerefWrapper<X, Y> {\n     y: Y\n }\n \n+impl<X:Copy,Y:Copy> Copy for DerefWrapper<X,Y> {}\n+\n impl<X, Y> DerefWrapper<X, Y> {\n     fn get_x(self) -> X {\n         self.x\n@@ -33,6 +35,8 @@ mod priv_test {\n         pub y: Y\n     }\n \n+    impl<X:Copy,Y:Copy> Copy for DerefWrapperHideX<X,Y> {}\n+\n     impl<X, Y> DerefWrapperHideX<X, Y> {\n         pub fn new(x: X, y: Y) -> DerefWrapperHideX<X, Y> {\n             DerefWrapperHideX {"}, {"sha": "59bb5678b6936e5a490a2a0b48a027c78f4bd29f", "filename": "src/test/run-pass/packed-struct-vec.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Fpacked-struct-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Fpacked-struct-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpacked-struct-vec.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -19,6 +19,8 @@ struct Foo {\n     baz: u64\n }\n \n+impl Copy for Foo {}\n+\n pub fn main() {\n     let foos = [Foo { bar: 1, baz: 2 }, .. 10];\n "}, {"sha": "8adad012ec69b2e51cb392928be26e9c6772a8bf", "filename": "src/test/run-pass/rec-tup.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Frec-tup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Frec-tup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frec-tup.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -10,6 +10,8 @@\n \n struct Point {x: int, y: int}\n \n+impl Copy for Point {}\n+\n type rect = (Point, Point);\n \n fn fst(r: rect) -> Point { let (fst, _) = r; return fst; }"}, {"sha": "02fcf1ad0689ed6996a753a6b2cca42f6f01dd26", "filename": "src/test/run-pass/rec.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Frec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Frec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frec.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -13,6 +13,8 @@\n \n struct Rect {x: int, y: int, w: int, h: int}\n \n+impl Copy for Rect {}\n+\n fn f(r: Rect, x: int, y: int, w: int, h: int) {\n     assert_eq!(r.x, x);\n     assert_eq!(r.y, y);"}, {"sha": "79f8ca48882cfb4a8881b75ed9b64e69023461c4", "filename": "src/test/run-pass/regions-dependent-addr-of.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Fregions-dependent-addr-of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Fregions-dependent-addr-of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-dependent-addr-of.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -29,6 +29,8 @@ struct C {\n     f: int\n }\n \n+impl Copy for C {}\n+\n fn get_v1(a: &A) -> &int {\n     // Region inferencer must deduce that &v < L2 < L1\n     let foo = &a.value; // L1"}, {"sha": "5b4169a4e84624b56253c881f9dfa463fcbd317b", "filename": "src/test/run-pass/regions-early-bound-used-in-bound-method.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Fregions-early-bound-used-in-bound-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Fregions-early-bound-used-in-bound-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-early-bound-used-in-bound-method.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -19,6 +19,8 @@ struct Box<'a> {\n     t: &'a int\n }\n \n+impl<'a> Copy for Box<'a> {}\n+\n impl<'a> GetRef<'a> for Box<'a> {\n     fn get(&self) -> &'a int {\n         self.t"}, {"sha": "73eb7ca71882cece3aa3b81ae22c9f9ea37ef19a", "filename": "src/test/run-pass/regions-early-bound-used-in-bound.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Fregions-early-bound-used-in-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Fregions-early-bound-used-in-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-early-bound-used-in-bound.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -19,6 +19,8 @@ struct Box<'a, T:'a> {\n     t: &'a T\n }\n \n+impl<'a,T:'a> Copy for Box<'a,T> {}\n+\n impl<'a,T:Clone> GetRef<'a,T> for Box<'a,T> {\n     fn get(&self) -> &'a T {\n         self.t"}, {"sha": "622f820971ffb03863982c45d29e331dbe4ee6af", "filename": "src/test/run-pass/regions-early-bound-used-in-type-param.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Fregions-early-bound-used-in-type-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Fregions-early-bound-used-in-type-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-early-bound-used-in-type-param.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -19,6 +19,8 @@ struct Box<T> {\n     t: T\n }\n \n+impl<T:Copy> Copy for Box<T> {}\n+\n impl<T:Clone> Get<T> for Box<T> {\n     fn get(&self) -> T {\n         self.t.clone()"}, {"sha": "e10c12a603729f94feaeedff384c21f136a2a396", "filename": "src/test/run-pass/regions-mock-tcx.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Fregions-mock-tcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Fregions-mock-tcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-mock-tcx.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -32,6 +32,9 @@ enum TypeStructure<'tcx> {\n     TypeInt,\n     TypeFunction(Type<'tcx>, Type<'tcx>),\n }\n+\n+impl<'tcx> Copy for TypeStructure<'tcx> {}\n+\n impl<'tcx> PartialEq for TypeStructure<'tcx> {\n     fn eq(&self, other: &TypeStructure<'tcx>) -> bool {\n         match (*self, *other) {\n@@ -93,19 +96,25 @@ struct NodeId {\n     id: uint\n }\n \n+impl Copy for NodeId {}\n+\n type Ast<'ast> = &'ast AstStructure<'ast>;\n \n struct AstStructure<'ast> {\n     id: NodeId,\n     kind: AstKind<'ast>\n }\n \n+impl<'ast> Copy for AstStructure<'ast> {}\n+\n enum AstKind<'ast> {\n     ExprInt,\n     ExprVar(uint),\n     ExprLambda(Ast<'ast>),\n }\n \n+impl<'ast> Copy for AstKind<'ast> {}\n+\n fn compute_types<'tcx,'ast>(tcx: &mut TypeContext<'tcx,'ast>,\n                             ast: Ast<'ast>) -> Type<'tcx>\n {"}, {"sha": "1603f7f9763fb037ef4fc8ff18b0fa0fb20c44fc", "filename": "src/test/run-pass/self-in-mut-slot-immediate-value.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Fself-in-mut-slot-immediate-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Fself-in-mut-slot-immediate-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fself-in-mut-slot-immediate-value.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -15,6 +15,8 @@ struct Value {\n     n: int\n }\n \n+impl Copy for Value {}\n+\n impl Value {\n     fn squared(mut self) -> Value {\n         self.n *= self.n;"}, {"sha": "930364c0e22c8c6be2359cf77f736d36efc08cb6", "filename": "src/test/run-pass/shape_intrinsic_tag_then_rec.rs", "status": "removed", "additions": 0, "deletions": 67, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/c7a9b49d1b5d4e520f25355f26a93dfac4ffa146/src%2Ftest%2Frun-pass%2Fshape_intrinsic_tag_then_rec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7a9b49d1b5d4e520f25355f26a93dfac4ffa146/src%2Ftest%2Frun-pass%2Fshape_intrinsic_tag_then_rec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fshape_intrinsic_tag_then_rec.rs?ref=c7a9b49d1b5d4e520f25355f26a93dfac4ffa146", "patch": "@@ -1,67 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-// Exercises a bug in the shape code that was exposed\n-// on x86_64: when there is an enum embedded in an\n-// interior record which is then itself interior to\n-// something else, shape calculations were off.\n-\n-#[deriving(Clone, Show)]\n-enum opt_span {\n-    //hack (as opposed to option), to make `span` compile\n-    os_none,\n-    os_some(Box<Span>),\n-}\n-\n-#[deriving(Clone, Show)]\n-struct Span {\n-    lo: uint,\n-    hi: uint,\n-    expanded_from: opt_span,\n-}\n-\n-#[deriving(Clone, Show)]\n-struct Spanned<T> {\n-    data: T,\n-    span: Span,\n-}\n-\n-type ty_ = uint;\n-\n-#[deriving(Clone, Show)]\n-struct Path_ {\n-    global: bool,\n-    idents: Vec<String> ,\n-    types: Vec<Box<ty>>,\n-}\n-\n-type path = Spanned<Path_>;\n-type ty = Spanned<ty_>;\n-\n-#[deriving(Clone, Show)]\n-struct X {\n-    sp: Span,\n-    path: path,\n-}\n-\n-pub fn main() {\n-    let sp: Span = Span {lo: 57451u, hi: 57542u, expanded_from: opt_span::os_none};\n-    let t: Box<ty> = box Spanned { data: 3u, span: sp.clone() };\n-    let p_: Path_ = Path_ {\n-        global: true,\n-        idents: vec!(\"hi\".to_string()),\n-        types: vec!(t),\n-    };\n-    let p: path = Spanned { data: p_, span: sp.clone() };\n-    let x = X { sp: sp, path: p };\n-    println!(\"{}\", x.path.clone());\n-    println!(\"{}\", x.clone());\n-}"}, {"sha": "31c29b615fc0938474c3bf836338f6f659ce1ad8", "filename": "src/test/run-pass/simd-generics.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Fsimd-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Fsimd-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsimd-generics.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -15,6 +15,8 @@ use std::ops;\n \n #[simd] struct f32x4(f32, f32, f32, f32);\n \n+impl Copy for f32x4 {}\n+\n fn add<T: ops::Add<T, T>>(lhs: T, rhs: T) -> T {\n     lhs + rhs\n }"}, {"sha": "de38a553e123f1b49b8798653ad82f28d6ce7c9f", "filename": "src/test/run-pass/small-enum-range-edge.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Fsmall-enum-range-edge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Fsmall-enum-range-edge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsmall-enum-range-edge.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -14,11 +14,17 @@\n \n #[repr(u8)]\n enum Eu { Lu = 0, Hu = 255 }\n+\n+impl Copy for Eu {}\n+\n static CLu: Eu = Eu::Lu;\n static CHu: Eu = Eu::Hu;\n \n #[repr(i8)]\n enum Es { Ls = -128, Hs = 127 }\n+\n+impl Copy for Es {}\n+\n static CLs: Es = Es::Ls;\n static CHs: Es = Es::Hs;\n "}, {"sha": "bb06aec23f6bcf8e6b52de2a3861eaeabe2fc775", "filename": "src/test/run-pass/struct-return.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Fstruct-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Fstruct-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstruct-return.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -11,8 +11,13 @@\n // ignore-lexer-test FIXME #15883\n \n pub struct Quad { a: u64, b: u64, c: u64, d: u64 }\n+\n+impl Copy for Quad {}\n+\n pub struct Floats { a: f64, b: u8, c: f64 }\n \n+impl Copy for Floats {}\n+\n mod rustrt {\n     use super::{Floats, Quad};\n "}, {"sha": "d0446d83d2e013f85bce953af6ec85eb05213169", "filename": "src/test/run-pass/structured-compare.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Fstructured-compare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Fstructured-compare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstructured-compare.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -13,6 +13,8 @@\n #[deriving(Show)]\n enum foo { large, small, }\n \n+impl Copy for foo {}\n+\n impl PartialEq for foo {\n     fn eq(&self, other: &foo) -> bool {\n         ((*self) as uint) == ((*other) as uint)"}, {"sha": "cf53c1a912a54082c65673cda989dbe0d5ce962b", "filename": "src/test/run-pass/tag-variant-disr-val.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Ftag-variant-disr-val.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Ftag-variant-disr-val.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftag-variant-disr-val.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -20,6 +20,8 @@ enum color {\n     orange = 8 >> 1\n }\n \n+impl Copy for color {}\n+\n impl PartialEq for color {\n     fn eq(&self, other: &color) -> bool {\n         ((*self) as uint) == ((*other) as uint)"}, {"sha": "7d924f977cbef33f9a726572bd86a73508a98979", "filename": "src/test/run-pass/trait-coercion-generic.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Ftrait-coercion-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Ftrait-coercion-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-coercion-generic.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -18,6 +18,8 @@ struct Struct {\n     y: int,\n }\n \n+impl Copy for Struct {}\n+\n impl Trait<&'static str> for Struct {\n     fn f(&self, x: &'static str) {\n         println!(\"Hi, {}!\", x);"}, {"sha": "37d69ddfe07660a97e42c2c55ab54a76408a32de", "filename": "src/test/run-pass/trait-coercion.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Ftrait-coercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Ftrait-coercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-coercion.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -19,6 +19,8 @@ struct Struct {\n     y: int,\n }\n \n+impl Copy for Struct {}\n+\n impl Trait for Struct {\n     fn f(&self) {\n         println!(\"Hi!\");"}, {"sha": "6b00a8b5c2d9fab720eed3442e3ae763bf6fd88c", "filename": "src/test/run-pass/typeclasses-eq-example-static.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Ftypeclasses-eq-example-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Ftypeclasses-eq-example-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftypeclasses-eq-example-static.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -18,8 +18,11 @@ trait Equal {\n     fn isEq(a: &Self, b: &Self) -> bool;\n }\n \n+#[deriving(Clone)]\n enum Color { cyan, magenta, yellow, black }\n \n+impl Copy for Color {}\n+\n impl Equal for Color {\n     fn isEq(a: &Color, b: &Color) -> bool {\n         match (*a, *b) {\n@@ -32,6 +35,7 @@ impl Equal for Color {\n     }\n }\n \n+#[deriving(Clone)]\n enum ColorTree {\n     leaf(Color),\n     branch(Box<ColorTree>, Box<ColorTree>)\n@@ -40,9 +44,12 @@ enum ColorTree {\n impl Equal for ColorTree {\n     fn isEq(a: &ColorTree, b: &ColorTree) -> bool {\n         match (a, b) {\n-          (&leaf(x), &leaf(y)) => { Equal::isEq(&x, &y) }\n+          (&leaf(ref x), &leaf(ref y)) => {\n+              Equal::isEq(&(*x).clone(), &(*y).clone())\n+          }\n           (&branch(ref l1, ref r1), &branch(ref l2, ref r2)) => {\n-            Equal::isEq(&**l1, &**l2) && Equal::isEq(&**r1, &**r2)\n+            Equal::isEq(&(**l1).clone(), &(**l2).clone()) &&\n+                Equal::isEq(&(**r1).clone(), &(**r2).clone())\n           }\n           _ => { false }\n         }"}, {"sha": "e4b7d2eb60bd33d8d502ea9319f3e1413d854714", "filename": "src/test/run-pass/typeclasses-eq-example.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Ftypeclasses-eq-example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Ftypeclasses-eq-example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftypeclasses-eq-example.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -17,8 +17,11 @@ trait Equal {\n     fn isEq(&self, a: &Self) -> bool;\n }\n \n+#[deriving(Clone)]\n enum Color { cyan, magenta, yellow, black }\n \n+impl Copy for Color {}\n+\n impl Equal for Color {\n     fn isEq(&self, a: &Color) -> bool {\n         match (*self, *a) {\n@@ -31,6 +34,7 @@ impl Equal for Color {\n     }\n }\n \n+#[deriving(Clone)]\n enum ColorTree {\n     leaf(Color),\n     branch(Box<ColorTree>, Box<ColorTree>)\n@@ -39,9 +43,9 @@ enum ColorTree {\n impl Equal for ColorTree {\n     fn isEq(&self, a: &ColorTree) -> bool {\n         match (self, a) {\n-          (&leaf(x), &leaf(y)) => { x.isEq(&y) }\n+          (&leaf(ref x), &leaf(ref y)) => { x.isEq(&(*y).clone()) }\n           (&branch(ref l1, ref r1), &branch(ref l2, ref r2)) => {\n-            (&**l1).isEq(&**l2) && (&**r1).isEq(&**r2)\n+            (*l1).isEq(&(**l2).clone()) && (*r1).isEq(&(**r2).clone())\n           }\n           _ => { false }\n         }"}, {"sha": "b6b9fb67f90538a323d9537a1216eca11fb3f9c4", "filename": "src/test/run-pass/ufcs-explicit-self.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Fufcs-explicit-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Fufcs-explicit-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fufcs-explicit-self.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -12,6 +12,8 @@ struct Foo {\n     f: int,\n }\n \n+impl Copy for Foo {}\n+\n impl Foo {\n     fn foo(self: Foo, x: int) -> int {\n         self.f + x\n@@ -28,6 +30,8 @@ struct Bar<T> {\n     f: T,\n }\n \n+impl<T:Copy> Copy for Bar<T> {}\n+\n impl<T> Bar<T> {\n     fn foo(self: Bar<T>, x: int) -> int {\n         x"}, {"sha": "cd97fd96fa3bbd963d1dfed4294a5503aeeafb72", "filename": "src/test/run-pass/unboxed-closures-monomorphization.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Funboxed-closures-monomorphization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a28607fb80c91e6e2ca64d9ef44c4e550e96c/src%2Ftest%2Frun-pass%2Funboxed-closures-monomorphization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-monomorphization.rs?ref=096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "patch": "@@ -30,6 +30,9 @@ fn main(){\n \n     #[deriving(Show, PartialEq)]\n     struct Foo(uint, &'static str);\n+\n+    impl Copy for Foo {}\n+\n     let x = Foo(42, \"forty-two\");\n     let f = bar(x);\n     assert_eq!(f.call_once(()), x);"}]}