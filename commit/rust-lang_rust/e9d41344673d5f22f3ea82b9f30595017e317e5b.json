{"sha": "e9d41344673d5f22f3ea82b9f30595017e317e5b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5ZDQxMzQ0NjczZDVmMjJmM2VhODJiOWYzMDU5NTAxN2UzMTdlNWI=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-07-23T07:42:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-23T07:42:18Z"}, "message": "Rollup merge of #74654 - lcnr:default-no-more, r=varkor\n\nrequire type defaults to be after const generic parameters\n\nFrom current discussions it seems like the goal here is for type and const parameters to be unordered and allow things like `struct Foo<const N: usize, T = u32>(T)` and `struct Foo<T, const N: usize = 7>` this way.\n\nNote: This means that using `min_const_generics` it will not be possible for an adt to have both type defaults and const parameters.\n\ncloses #70471\n\nr? @varkor @eddyb", "tree": {"sha": "618083433907394f4f0f29a1ddd78c5b50728fb3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/618083433907394f4f0f29a1ddd78c5b50728fb3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e9d41344673d5f22f3ea82b9f30595017e317e5b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfGT9aCRBK7hj4Ov3rIwAAdHIIAJqO6Q7FwAU/9+osU6dpxpAi\n25577NbjF9iMRGSr1bG54BuP+BK29wTC9nvkf8sLqarw0lCHR0yqS7jd7aV8Mb1f\n6BFAQUVxfE3Ub9nuSNRVErH9zLD8Tukb8pyA6BCKOutvNMTK1W1xMzbNN4yK04Le\nHMYn/3yD6cUTN2lDzUJM3wkxuQFSecbYf2Ufpd2802C3delSoylaPcxQRNcJJTa+\nAgDMAGM2FOP9G2sUJbDvgvzlLAiUY99cDaWv13YjxDPBx4mAJWk8wGP1M4+b0yeK\ncauIDyx2Gsx5mS6CFlsRrZElDsCfoL5P9Y6cVKOmO7geAmso86fA3f6e513uW0I=\n=J69T\n-----END PGP SIGNATURE-----\n", "payload": "tree 618083433907394f4f0f29a1ddd78c5b50728fb3\nparent 9f2ef3f62d445a5871745ea02297644ca249a7b1\nparent 2f565967b056335659ff1dfc2108c746f4ac8af3\nauthor Manish Goregaokar <manishsmail@gmail.com> 1595490138 -0700\ncommitter GitHub <noreply@github.com> 1595490138 -0700\n\nRollup merge of #74654 - lcnr:default-no-more, r=varkor\n\nrequire type defaults to be after const generic parameters\n\nFrom current discussions it seems like the goal here is for type and const parameters to be unordered and allow things like `struct Foo<const N: usize, T = u32>(T)` and `struct Foo<T, const N: usize = 7>` this way.\n\nNote: This means that using `min_const_generics` it will not be possible for an adt to have both type defaults and const parameters.\n\ncloses #70471\n\nr? @varkor @eddyb\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e9d41344673d5f22f3ea82b9f30595017e317e5b", "html_url": "https://github.com/rust-lang/rust/commit/e9d41344673d5f22f3ea82b9f30595017e317e5b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e9d41344673d5f22f3ea82b9f30595017e317e5b/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f2ef3f62d445a5871745ea02297644ca249a7b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f2ef3f62d445a5871745ea02297644ca249a7b1", "html_url": "https://github.com/rust-lang/rust/commit/9f2ef3f62d445a5871745ea02297644ca249a7b1"}, {"sha": "2f565967b056335659ff1dfc2108c746f4ac8af3", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f565967b056335659ff1dfc2108c746f4ac8af3", "html_url": "https://github.com/rust-lang/rust/commit/2f565967b056335659ff1dfc2108c746f4ac8af3"}], "stats": {"total": 52, "additions": 46, "deletions": 6}, "files": [{"sha": "daf3e23d6a1234c2196fe76286000f792f60976c", "filename": "src/librustc_ast_passes/ast_validation.rs", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e9d41344673d5f22f3ea82b9f30595017e317e5b/src%2Flibrustc_ast_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9d41344673d5f22f3ea82b9f30595017e317e5b/src%2Flibrustc_ast_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2Fast_validation.rs?ref=e9d41344673d5f22f3ea82b9f30595017e317e5b", "patch": "@@ -1118,13 +1118,26 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n     fn visit_generics(&mut self, generics: &'a Generics) {\n         let mut prev_ty_default = None;\n         for param in &generics.params {\n-            if let GenericParamKind::Type { ref default, .. } = param.kind {\n-                if default.is_some() {\n+            match param.kind {\n+                GenericParamKind::Lifetime => (),\n+                GenericParamKind::Type { default: Some(_), .. } => {\n                     prev_ty_default = Some(param.ident.span);\n-                } else if let Some(span) = prev_ty_default {\n-                    self.err_handler()\n-                        .span_err(span, \"type parameters with a default must be trailing\");\n-                    break;\n+                }\n+                GenericParamKind::Type { .. } | GenericParamKind::Const { .. } => {\n+                    if let Some(span) = prev_ty_default {\n+                        let mut err = self.err_handler().struct_span_err(\n+                            span,\n+                            \"type parameters with a default must be trailing\",\n+                        );\n+                        if matches!(param.kind, GenericParamKind::Const { .. }) {\n+                            err.note(\n+                                \"using type defaults and const parameters \\\n+                                 in the same parameter list is currently not permitted\",\n+                            );\n+                        }\n+                        err.emit();\n+                        break;\n+                    }\n                 }\n             }\n         }"}, {"sha": "7f17c6358b7b6c8e21bdead470a1579912b9d872", "filename": "src/test/ui/const-generics/defaults/wrong-order.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e9d41344673d5f22f3ea82b9f30595017e317e5b/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwrong-order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9d41344673d5f22f3ea82b9f30595017e317e5b/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwrong-order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwrong-order.rs?ref=e9d41344673d5f22f3ea82b9f30595017e317e5b", "patch": "@@ -0,0 +1,8 @@\n+#![feature(const_generics)] //~ WARN the feature `const_generics` is incomplete\n+\n+struct A<T = u32, const N: usize> {\n+    //~^ ERROR type parameters with a default must be trailing\n+    arg: T,\n+}\n+\n+fn main() {}"}, {"sha": "283f6656121c3192cb8a4b1726de0da0c532fe51", "filename": "src/test/ui/const-generics/defaults/wrong-order.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e9d41344673d5f22f3ea82b9f30595017e317e5b/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwrong-order.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9d41344673d5f22f3ea82b9f30595017e317e5b/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwrong-order.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwrong-order.stderr?ref=e9d41344673d5f22f3ea82b9f30595017e317e5b", "patch": "@@ -0,0 +1,19 @@\n+error: type parameters with a default must be trailing\n+  --> $DIR/wrong-order.rs:3:10\n+   |\n+LL | struct A<T = u32, const N: usize> {\n+   |          ^\n+   |\n+   = note: using type defaults and const parameters in the same parameter list is currently not permitted\n+\n+warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/wrong-order.rs:1:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}]}