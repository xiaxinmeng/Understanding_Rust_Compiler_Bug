{"sha": "8b57f689d54ff70d13e500e4d6e40c67b21e149e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiNTdmNjg5ZDU0ZmY3MGQxM2U1MDBlNGQ2ZTQwYzY3YjIxZTE0OWU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-07-28T03:06:20Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-07-28T04:33:54Z"}, "message": "Use const generics for some Vec/CCow impls.", "tree": {"sha": "62544c6793f52dac30d6bbe88717d6dd54e450ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/62544c6793f52dac30d6bbe88717d6dd54e450ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b57f689d54ff70d13e500e4d6e40c67b21e149e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b57f689d54ff70d13e500e4d6e40c67b21e149e", "html_url": "https://github.com/rust-lang/rust/commit/8b57f689d54ff70d13e500e4d6e40c67b21e149e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b57f689d54ff70d13e500e4d6e40c67b21e149e/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c798dffac9dc8c82374db48f5b474690cc6e9686", "url": "https://api.github.com/repos/rust-lang/rust/commits/c798dffac9dc8c82374db48f5b474690cc6e9686", "html_url": "https://github.com/rust-lang/rust/commit/c798dffac9dc8c82374db48f5b474690cc6e9686"}], "stats": {"total": 58, "additions": 25, "deletions": 33}, "files": [{"sha": "e42d64347254641aaab6fbb163fb21f92d049f67", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b57f689d54ff70d13e500e4d6e40c67b21e149e/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b57f689d54ff70d13e500e4d6e40c67b21e149e/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=8b57f689d54ff70d13e500e4d6e40c67b21e149e", "patch": "@@ -78,6 +78,8 @@\n #![feature(cfg_target_has_atomic)]\n #![feature(coerce_unsized)]\n #![cfg_attr(not(bootstrap), feature(const_in_array_repeat_expressions))]\n+#![feature(const_generic_impls_guard)]\n+#![feature(const_generics)]\n #![feature(dispatch_from_dyn)]\n #![feature(core_intrinsics)]\n #![feature(dropck_eyepatch)]"}, {"sha": "dac04e4e624032be1d6222e1bcc019d6400e6939", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 23, "deletions": 33, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/8b57f689d54ff70d13e500e4d6e40c67b21e149e/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b57f689d54ff70d13e500e4d6e40c67b21e149e/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=8b57f689d54ff70d13e500e4d6e40c67b21e149e", "patch": "@@ -56,6 +56,7 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n+use core::array::LengthAtMost32;\n use core::cmp::{self, Ordering};\n use core::fmt;\n use core::hash::{self, Hash};\n@@ -2171,47 +2172,36 @@ impl<'a, T: 'a + Copy> Extend<&'a T> for Vec<T> {\n }\n \n macro_rules! __impl_slice_eq1 {\n-    ($Lhs: ty, $Rhs: ty) => {\n-        __impl_slice_eq1! { $Lhs, $Rhs, Sized }\n-    };\n-    ($Lhs: ty, $Rhs: ty, $Bound: ident) => {\n+    ([$($vars:tt)*] $lhs:ty, $rhs:ty, $($constraints:tt)*) => {\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        impl<'a, 'b, A: $Bound, B> PartialEq<$Rhs> for $Lhs where A: PartialEq<B> {\n+        impl<A, B, $($vars)*> PartialEq<$rhs> for $lhs\n+        where\n+            A: PartialEq<B>,\n+            $($constraints)*\n+        {\n             #[inline]\n-            fn eq(&self, other: &$Rhs) -> bool { self[..] == other[..] }\n+            fn eq(&self, other: &$rhs) -> bool { self[..] == other[..] }\n             #[inline]\n-            fn ne(&self, other: &$Rhs) -> bool { self[..] != other[..] }\n+            fn ne(&self, other: &$rhs) -> bool { self[..] != other[..] }\n         }\n     }\n }\n \n-__impl_slice_eq1! { Vec<A>, Vec<B> }\n-__impl_slice_eq1! { Vec<A>, &'b [B] }\n-__impl_slice_eq1! { Vec<A>, &'b mut [B] }\n-__impl_slice_eq1! { Cow<'a, [A]>, &'b [B], Clone }\n-__impl_slice_eq1! { Cow<'a, [A]>, &'b mut [B], Clone }\n-__impl_slice_eq1! { Cow<'a, [A]>, Vec<B>, Clone }\n+__impl_slice_eq1! { [] Vec<A>, Vec<B>, }\n+__impl_slice_eq1! { [] Vec<A>, &[B], }\n+__impl_slice_eq1! { [] Vec<A>, &mut [B], }\n+__impl_slice_eq1! { [] Cow<'_, [A]>, &[B], A: Clone }\n+__impl_slice_eq1! { [] Cow<'_, [A]>, &mut [B], A: Clone }\n+__impl_slice_eq1! { [] Cow<'_, [A]>, Vec<B>, A: Clone }\n+__impl_slice_eq1! { [const N: usize] Vec<A>, [B; N], [B; N]: LengthAtMost32 }\n+__impl_slice_eq1! { [const N: usize] Vec<A>, &[B; N], [B; N]: LengthAtMost32 }\n \n-macro_rules! array_impls {\n-    ($($N: expr)+) => {\n-        $(\n-            // NOTE: some less important impls are omitted to reduce code bloat\n-            __impl_slice_eq1! { Vec<A>, [B; $N] }\n-            __impl_slice_eq1! { Vec<A>, &'b [B; $N] }\n-            // __impl_slice_eq1! { Vec<A>, &'b mut [B; $N] }\n-            // __impl_slice_eq1! { Cow<'a, [A]>, [B; $N], Clone }\n-            // __impl_slice_eq1! { Cow<'a, [A]>, &'b [B; $N], Clone }\n-            // __impl_slice_eq1! { Cow<'a, [A]>, &'b mut [B; $N], Clone }\n-        )+\n-    }\n-}\n-\n-array_impls! {\n-     0  1  2  3  4  5  6  7  8  9\n-    10 11 12 13 14 15 16 17 18 19\n-    20 21 22 23 24 25 26 27 28 29\n-    30 31 32\n-}\n+// NOTE: some less important impls are omitted to reduce code bloat\n+// FIXME(Centril): Reconsider this?\n+//__impl_slice_eq1! { [const N: usize] Vec<A>, &mut [B; N], [B; N]: LengthAtMost32 }\n+//__impl_slice_eq1! { [const N: usize] Cow<'a, [A]>, [B; N], [B; N]: LengthAtMost32 }\n+//__impl_slice_eq1! { [const N: usize] Cow<'a, [A]>, &[B; N], [B; N]: LengthAtMost32 }\n+//__impl_slice_eq1! { [const N: usize] Cow<'a, [A]>, &mut [B; N], [B; N]: LengthAtMost32 }\n \n /// Implements comparison of vectors, lexicographically.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}]}