{"sha": "04064416644eba7351b1a457c1de27d28a750c95", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0MDY0NDE2NjQ0ZWJhNzM1MWIxYTQ1N2MxZGUyN2QyOGE3NTBjOTU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-12T00:14:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-12T00:14:46Z"}, "message": "Auto merge of #80928 - JohnTitor:rollup-sgerm3j, r=JohnTitor\n\nRollup of 9 pull requests\n\nSuccessful merges:\n\n - #79997 (Emit a reactor for cdylib target on wasi)\n - #79998 (Use correct ABI for wasm32 by default)\n - #80042 (Split a func into cold/hot parts, reducing binary size)\n - #80324 (Explain method-call move errors in loops)\n - #80864 (std/core docs: fix wrong link in PartialEq)\n - #80870 (resolve: Simplify built-in macro table)\n - #80885 (rustdoc: Resolve `&str` as `str`)\n - #80904 (Fix small typo)\n - #80923 (Merge different function exits)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "83afe56809318a1f13765b1a23c6347d91bdee08", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/83afe56809318a1f13765b1a23c6347d91bdee08"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/04064416644eba7351b1a457c1de27d28a750c95", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/04064416644eba7351b1a457c1de27d28a750c95", "html_url": "https://github.com/rust-lang/rust/commit/04064416644eba7351b1a457c1de27d28a750c95", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/04064416644eba7351b1a457c1de27d28a750c95/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe531d5a5f1404281e3fb237daaf87b8180bd13d", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe531d5a5f1404281e3fb237daaf87b8180bd13d", "html_url": "https://github.com/rust-lang/rust/commit/fe531d5a5f1404281e3fb237daaf87b8180bd13d"}, {"sha": "4e69c5d0fad5877e3db28a94fbf6185f1f536cb6", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e69c5d0fad5877e3db28a94fbf6185f1f536cb6", "html_url": "https://github.com/rust-lang/rust/commit/4e69c5d0fad5877e3db28a94fbf6185f1f536cb6"}], "stats": {"total": 384, "additions": 231, "deletions": 153}, "files": [{"sha": "635890644d067875b4792d7860064e01017dd966", "filename": "compiler/rustc_builtin_macros/src/lib.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/04064416644eba7351b1a457c1de27d28a750c95/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04064416644eba7351b1a457c1de27d28a750c95/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs?ref=04064416644eba7351b1a457c1de27d28a750c95", "patch": "@@ -14,10 +14,9 @@ extern crate proc_macro;\n \n use crate::deriving::*;\n \n-use rustc_expand::base::{MacroExpanderFn, ResolverExpand, SyntaxExtension, SyntaxExtensionKind};\n+use rustc_expand::base::{MacroExpanderFn, ResolverExpand, SyntaxExtensionKind};\n use rustc_expand::proc_macro::BangProcMacro;\n-use rustc_span::edition::Edition;\n-use rustc_span::symbol::{sym, Ident};\n+use rustc_span::symbol::sym;\n \n mod asm;\n mod assert;\n@@ -44,13 +43,8 @@ pub mod proc_macro_harness;\n pub mod standard_library_imports;\n pub mod test_harness;\n \n-pub fn register_builtin_macros(resolver: &mut dyn ResolverExpand, edition: Edition) {\n-    let mut register = |name, kind| {\n-        resolver.register_builtin_macro(\n-            Ident::with_dummy_span(name),\n-            SyntaxExtension::default(kind, edition),\n-        )\n-    };\n+pub fn register_builtin_macros(resolver: &mut dyn ResolverExpand) {\n+    let mut register = |name, kind| resolver.register_builtin_macro(name, kind);\n     macro register_bang($($name:ident: $f:expr,)*) {\n         $(register(sym::$name, SyntaxExtensionKind::LegacyBang(Box::new($f as MacroExpanderFn)));)*\n     }"}, {"sha": "728795cf50b8597ddc716cedf03a7b62b0448929", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04064416644eba7351b1a457c1de27d28a750c95/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04064416644eba7351b1a457c1de27d28a750c95/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=04064416644eba7351b1a457c1de27d28a750c95", "patch": "@@ -1276,6 +1276,7 @@ fn exec_linker(\n \n fn link_output_kind(sess: &Session, crate_type: CrateType) -> LinkOutputKind {\n     let kind = match (crate_type, sess.crt_static(Some(crate_type)), sess.relocation_model()) {\n+        (CrateType::Executable, _, _) if sess.is_wasi_reactor() => LinkOutputKind::WasiReactorExe,\n         (CrateType::Executable, false, RelocModel::Pic) => LinkOutputKind::DynamicPicExe,\n         (CrateType::Executable, false, _) => LinkOutputKind::DynamicNoPicExe,\n         (CrateType::Executable, true, RelocModel::Pic) => LinkOutputKind::StaticPicExe,"}, {"sha": "bb35e7ec8943955f45f67c955f9989ea735e1083", "filename": "compiler/rustc_codegen_ssa/src/back/linker.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/04064416644eba7351b1a457c1de27d28a750c95/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04064416644eba7351b1a457c1de27d28a750c95/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs?ref=04064416644eba7351b1a457c1de27d28a750c95", "patch": "@@ -314,6 +314,10 @@ impl<'a> Linker for GccLinker<'a> {\n                 self.cmd.arg(\"-static\");\n                 self.build_dylib(out_filename);\n             }\n+            LinkOutputKind::WasiReactorExe => {\n+                self.linker_arg(\"--entry\");\n+                self.linker_arg(\"_initialize\");\n+            }\n         }\n         // VxWorks compiler driver introduced `--static-crt` flag specifically for rustc,\n         // it switches linking for libc and similar system libraries to static without using\n@@ -662,6 +666,9 @@ impl<'a> Linker for MsvcLinker<'a> {\n                 arg.push(out_filename.with_extension(\"dll.lib\"));\n                 self.cmd.arg(arg);\n             }\n+            LinkOutputKind::WasiReactorExe => {\n+                panic!(\"can't link as reactor on non-wasi target\");\n+            }\n         }\n     }\n \n@@ -1085,6 +1092,10 @@ impl<'a> Linker for WasmLd<'a> {\n             LinkOutputKind::DynamicDylib | LinkOutputKind::StaticDylib => {\n                 self.cmd.arg(\"--no-entry\");\n             }\n+            LinkOutputKind::WasiReactorExe => {\n+                self.cmd.arg(\"--entry\");\n+                self.cmd.arg(\"_initialize\");\n+            }\n         }\n     }\n "}, {"sha": "2f43940a9dcbb1c7236b231c39f40a28bf0eb3fc", "filename": "compiler/rustc_expand/src/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04064416644eba7351b1a457c1de27d28a750c95/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04064416644eba7351b1a457c1de27d28a750c95/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbase.rs?ref=04064416644eba7351b1a457c1de27d28a750c95", "patch": "@@ -868,7 +868,7 @@ pub trait ResolverExpand {\n \n     fn resolve_dollar_crates(&mut self);\n     fn visit_ast_fragment_with_placeholders(&mut self, expn_id: ExpnId, fragment: &AstFragment);\n-    fn register_builtin_macro(&mut self, ident: Ident, ext: SyntaxExtension);\n+    fn register_builtin_macro(&mut self, name: Symbol, ext: SyntaxExtensionKind);\n \n     fn expansion_for_ast_pass(\n         &mut self,"}, {"sha": "b67704119bccc5696f4b5f1c5f1753a04c246bca", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04064416644eba7351b1a457c1de27d28a750c95/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04064416644eba7351b1a457c1de27d28a750c95/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=04064416644eba7351b1a457c1de27d28a750c95", "patch": "@@ -236,7 +236,7 @@ fn configure_and_expand_inner<'a>(\n     pre_expansion_lint(sess, lint_store, &krate);\n \n     let mut resolver = Resolver::new(sess, &krate, crate_name, metadata_loader, &resolver_arenas);\n-    rustc_builtin_macros::register_builtin_macros(&mut resolver, sess.edition());\n+    rustc_builtin_macros::register_builtin_macros(&mut resolver);\n \n     krate = sess.time(\"crate_injection\", || {\n         let alt_std_name = sess.opts.alt_std_name.as_ref().map(|s| Symbol::intern(s));"}, {"sha": "55d521a9b5ff50434ca5a6b31f196c449c354210", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/04064416644eba7351b1a457c1de27d28a750c95/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04064416644eba7351b1a457c1de27d28a750c95/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=04064416644eba7351b1a457c1de27d28a750c95", "patch": "@@ -7,7 +7,7 @@ use rustc_session::config::{build_configuration, build_session_options, to_crate\n use rustc_session::config::{rustc_optgroups, ErrorOutputType, ExternLocation, Options, Passes};\n use rustc_session::config::{CFGuard, ExternEntry, LinkerPluginLto, LtoCli, SwitchWithOptPath};\n use rustc_session::config::{\n-    Externs, OutputType, OutputTypes, SanitizerSet, SymbolManglingVersion,\n+    Externs, OutputType, OutputTypes, SanitizerSet, SymbolManglingVersion, WasiExecModel,\n };\n use rustc_session::lint::Level;\n use rustc_session::search_paths::SearchPath;\n@@ -597,6 +597,7 @@ fn test_debugging_options_tracking_hash() {\n     tracked!(unleash_the_miri_inside_of_you, true);\n     tracked!(use_ctors_section, Some(true));\n     tracked!(verify_llvm_ir, true);\n+    tracked!(wasi_exec_model, Some(WasiExecModel::Reactor));\n }\n \n #[test]"}, {"sha": "eb6aded9cb3bd9dcf1050097467d433c64711044", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/04064416644eba7351b1a457c1de27d28a750c95/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04064416644eba7351b1a457c1de27d28a750c95/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=04064416644eba7351b1a457c1de27d28a750c95", "patch": "@@ -710,15 +710,10 @@ impl<'hir> Map<'hir> {\n         let mut scope = id;\n         loop {\n             scope = self.get_enclosing_scope(scope).unwrap_or(CRATE_HIR_ID);\n-            if scope == CRATE_HIR_ID {\n-                return CRATE_HIR_ID;\n-            }\n-            match self.get(scope) {\n-                Node::Block(_) => {}\n-                _ => break,\n+            if scope == CRATE_HIR_ID || !matches!(self.get(scope), Node::Block(_)) {\n+                return scope;\n             }\n         }\n-        scope\n     }\n \n     pub fn get_parent_did(&self, id: HirId) -> LocalDefId {"}, {"sha": "db02ee67910b2ab59e940da0ed7cf120fcda4de9", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/conflict_errors.rs", "status": "modified", "additions": 68, "deletions": 74, "changes": 142, "blob_url": "https://github.com/rust-lang/rust/blob/04064416644eba7351b1a457c1de27d28a750c95/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04064416644eba7351b1a457c1de27d28a750c95/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs?ref=04064416644eba7351b1a457c1de27d28a750c95", "patch": "@@ -151,95 +151,88 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n \n                 let move_msg = if move_spans.for_closure() { \" into closure\" } else { \"\" };\n \n+                let loop_message = if location == move_out.source || move_site.traversed_back_edge {\n+                    \", in previous iteration of loop\"\n+                } else {\n+                    \"\"\n+                };\n+\n                 if location == move_out.source {\n-                    err.span_label(\n-                        span,\n-                        format!(\n-                            \"value {}moved{} here, in previous iteration of loop\",\n-                            partially_str, move_msg\n-                        ),\n-                    );\n                     is_loop_move = true;\n-                } else if move_site.traversed_back_edge {\n-                    err.span_label(\n-                        move_span,\n-                        format!(\n-                            \"value {}moved{} here, in previous iteration of loop\",\n-                            partially_str, move_msg\n-                        ),\n-                    );\n-                } else {\n-                    if let UseSpans::FnSelfUse { var_span, fn_call_span, fn_span, kind } =\n-                        move_spans\n-                    {\n-                        let place_name = self\n-                            .describe_place(moved_place.as_ref())\n-                            .map(|n| format!(\"`{}`\", n))\n-                            .unwrap_or_else(|| \"value\".to_owned());\n-                        match kind {\n-                            FnSelfUseKind::FnOnceCall => {\n+                }\n+\n+                if let UseSpans::FnSelfUse { var_span, fn_call_span, fn_span, kind } = move_spans {\n+                    let place_name = self\n+                        .describe_place(moved_place.as_ref())\n+                        .map(|n| format!(\"`{}`\", n))\n+                        .unwrap_or_else(|| \"value\".to_owned());\n+                    match kind {\n+                        FnSelfUseKind::FnOnceCall => {\n+                            err.span_label(\n+                                fn_call_span,\n+                                &format!(\n+                                    \"{} {}moved due to this call{}\",\n+                                    place_name, partially_str, loop_message\n+                                ),\n+                            );\n+                            err.span_note(\n+                                var_span,\n+                                \"this value implements `FnOnce`, which causes it to be moved when called\",\n+                            );\n+                        }\n+                        FnSelfUseKind::Operator { self_arg } => {\n+                            err.span_label(\n+                                fn_call_span,\n+                                &format!(\n+                                    \"{} {}moved due to usage in operator{}\",\n+                                    place_name, partially_str, loop_message\n+                                ),\n+                            );\n+                            if self.fn_self_span_reported.insert(fn_span) {\n+                                err.span_note(\n+                                    self_arg.span,\n+                                    \"calling this operator moves the left-hand side\",\n+                                );\n+                            }\n+                        }\n+                        FnSelfUseKind::Normal { self_arg, implicit_into_iter } => {\n+                            if implicit_into_iter {\n                                 err.span_label(\n                                     fn_call_span,\n                                     &format!(\n-                                        \"{} {}moved due to this call\",\n-                                        place_name, partially_str\n+                                        \"{} {}moved due to this implicit call to `.into_iter()`{}\",\n+                                        place_name, partially_str, loop_message\n                                     ),\n                                 );\n-                                err.span_note(\n-                                    var_span,\n-                                    \"this value implements `FnOnce`, which causes it to be moved when called\",\n-                                );\n-                            }\n-                            FnSelfUseKind::Operator { self_arg } => {\n+                            } else {\n                                 err.span_label(\n                                     fn_call_span,\n                                     &format!(\n-                                        \"{} {}moved due to usage in operator\",\n-                                        place_name, partially_str\n+                                        \"{} {}moved due to this method call{}\",\n+                                        place_name, partially_str, loop_message\n                                     ),\n                                 );\n-                                if self.fn_self_span_reported.insert(fn_span) {\n-                                    err.span_note(\n-                                        self_arg.span,\n-                                        \"calling this operator moves the left-hand side\",\n-                                    );\n-                                }\n                             }\n-                            FnSelfUseKind::Normal { self_arg, implicit_into_iter } => {\n-                                if implicit_into_iter {\n-                                    err.span_label(\n-                                        fn_call_span,\n-                                        &format!(\n-                                            \"{} {}moved due to this implicit call to `.into_iter()`\",\n-                                            place_name, partially_str\n-                                        ),\n-                                    );\n-                                } else {\n-                                    err.span_label(\n-                                        fn_call_span,\n-                                        &format!(\n-                                            \"{} {}moved due to this method call\",\n-                                            place_name, partially_str\n-                                        ),\n-                                    );\n-                                }\n-                                // Avoid pointing to the same function in multiple different\n-                                // error messages\n-                                if self.fn_self_span_reported.insert(self_arg.span) {\n-                                    err.span_note(\n-                                        self_arg.span,\n-                                        &format!(\"this function consumes the receiver `self` by taking ownership of it, which moves {}\", place_name)\n-                                    );\n-                                }\n+                            // Avoid pointing to the same function in multiple different\n+                            // error messages\n+                            if self.fn_self_span_reported.insert(self_arg.span) {\n+                                err.span_note(\n+                                    self_arg.span,\n+                                    &format!(\"this function takes ownership of the receiver `self`, which moves {}\", place_name)\n+                                );\n                             }\n-                            // Deref::deref takes &self, which cannot cause a move\n-                            FnSelfUseKind::DerefCoercion { .. } => unreachable!(),\n                         }\n-                    } else {\n-                        err.span_label(\n-                            move_span,\n-                            format!(\"value {}moved{} here\", partially_str, move_msg),\n-                        );\n+                        // Deref::deref takes &self, which cannot cause a move\n+                        FnSelfUseKind::DerefCoercion { .. } => unreachable!(),\n+                    }\n+                } else {\n+                    err.span_label(\n+                        move_span,\n+                        format!(\"value {}moved{} here{}\", partially_str, move_msg, loop_message),\n+                    );\n+                    // If the move error occurs due to a loop, don't show\n+                    // another message for the same span\n+                    if loop_message.is_empty() {\n                         move_spans.var_span_label(\n                             &mut err,\n                             format!(\n@@ -250,6 +243,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                         );\n                     }\n                 }\n+\n                 if let UseSpans::PatUse(span) = move_spans {\n                     err.span_suggestion_verbose(\n                         span.shrink_to_lo(),"}, {"sha": "ee90e9c54f69d4e484b112fbdd3b7435ec1491dd", "filename": "compiler/rustc_passes/src/intrinsicck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04064416644eba7351b1a457c1de27d28a750c95/compiler%2Frustc_passes%2Fsrc%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04064416644eba7351b1a457c1de27d28a750c95/compiler%2Frustc_passes%2Fsrc%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fintrinsicck.rs?ref=04064416644eba7351b1a457c1de27d28a750c95", "patch": "@@ -78,7 +78,7 @@ impl ExprVisitor<'tcx> {\n                 return;\n             }\n \n-            // Special-case transmutting from `typeof(function)` and\n+            // Special-case transmuting from `typeof(function)` and\n             // `Option<typeof(function)>` to present a clearer error.\n             let from = unpack_option_like(self.tcx, from);\n             if let (&ty::FnDef(..), SizeSkeleton::Known(size_to)) = (from.kind(), sk_to) {"}, {"sha": "fb364053e241eb216113d2f644fc1626527ee415", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/04064416644eba7351b1a457c1de27d28a750c95/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04064416644eba7351b1a457c1de27d28a750c95/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=04064416644eba7351b1a457c1de27d28a750c95", "patch": "@@ -33,7 +33,7 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexMap};\n use rustc_data_structures::ptr_key::PtrKey;\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder};\n-use rustc_expand::base::SyntaxExtension;\n+use rustc_expand::base::{SyntaxExtension, SyntaxExtensionKind};\n use rustc_hir::def::Namespace::*;\n use rustc_hir::def::{self, CtorOf, DefKind, NonMacroAttrKind, PartialRes};\n use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, LocalDefId, CRATE_DEF_INDEX};\n@@ -874,7 +874,7 @@ pub struct ExternPreludeEntry<'a> {\n \n /// Used for better errors for E0773\n enum BuiltinMacroState {\n-    NotYetSeen(SyntaxExtension),\n+    NotYetSeen(SyntaxExtensionKind),\n     AlreadySeen(Span),\n }\n "}, {"sha": "5c74094ecd3ee9946690a25d9559b5c98da191f6", "filename": "compiler/rustc_resolve/src/macros.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/04064416644eba7351b1a457c1de27d28a750c95/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04064416644eba7351b1a457c1de27d28a750c95/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs?ref=04064416644eba7351b1a457c1de27d28a750c95", "patch": "@@ -14,7 +14,8 @@ use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::ptr_key::PtrKey;\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::struct_span_err;\n-use rustc_expand::base::{Indeterminate, InvocationRes, ResolverExpand, SyntaxExtension};\n+use rustc_expand::base::{Indeterminate, InvocationRes, ResolverExpand};\n+use rustc_expand::base::{SyntaxExtension, SyntaxExtensionKind};\n use rustc_expand::compile_declarative_macro;\n use rustc_expand::expand::{AstFragment, Invocation, InvocationKind};\n use rustc_feature::is_builtin_attr_name;\n@@ -176,10 +177,11 @@ impl<'a> ResolverExpand for Resolver<'a> {\n         parent_scope.module.unexpanded_invocations.borrow_mut().remove(&expansion);\n     }\n \n-    fn register_builtin_macro(&mut self, ident: Ident, ext: SyntaxExtension) {\n-        if self.builtin_macros.insert(ident.name, BuiltinMacroState::NotYetSeen(ext)).is_some() {\n+    fn register_builtin_macro(&mut self, name: Symbol, ext: SyntaxExtensionKind) {\n+        if self.builtin_macros.insert(name, BuiltinMacroState::NotYetSeen(ext)).is_some() {\n             self.session\n-                .span_err(ident.span, &format!(\"built-in macro `{}` was already defined\", ident));\n+                .diagnostic()\n+                .bug(&format!(\"built-in macro `{}` was already registered\", name));\n         }\n     }\n \n@@ -1097,7 +1099,7 @@ impl<'a> Resolver<'a> {\n                 // while still taking everything else from the source code.\n                 // If we already loaded this builtin macro, give a better error message than 'no such builtin macro'.\n                 match mem::replace(builtin_macro, BuiltinMacroState::AlreadySeen(item.span)) {\n-                    BuiltinMacroState::NotYetSeen(ext) => result.kind = ext.kind,\n+                    BuiltinMacroState::NotYetSeen(ext) => result.kind = ext,\n                     BuiltinMacroState::AlreadySeen(span) => {\n                         struct_span_err!(\n                             self.session,"}, {"sha": "0cafdec1495bb4e309322dc65080c56ce98ded5c", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04064416644eba7351b1a457c1de27d28a750c95/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04064416644eba7351b1a457c1de27d28a750c95/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=04064416644eba7351b1a457c1de27d28a750c95", "patch": "@@ -2172,6 +2172,7 @@ crate mod dep_tracking {\n         SymbolManglingVersion, TrimmedDefPaths,\n     };\n     use crate::lint;\n+    use crate::options::WasiExecModel;\n     use crate::utils::NativeLibKind;\n     use rustc_feature::UnstableFeatures;\n     use rustc_span::edition::Edition;\n@@ -2227,6 +2228,7 @@ crate mod dep_tracking {\n     impl_dep_tracking_hash_via_hash!(Option<RelocModel>);\n     impl_dep_tracking_hash_via_hash!(Option<CodeModel>);\n     impl_dep_tracking_hash_via_hash!(Option<TlsModel>);\n+    impl_dep_tracking_hash_via_hash!(Option<WasiExecModel>);\n     impl_dep_tracking_hash_via_hash!(Option<PanicStrategy>);\n     impl_dep_tracking_hash_via_hash!(Option<RelroLevel>);\n     impl_dep_tracking_hash_via_hash!(Option<lint::Level>);"}, {"sha": "30af65e49a075fd73e8cc929b1433620a863e399", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/04064416644eba7351b1a457c1de27d28a750c95/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04064416644eba7351b1a457c1de27d28a750c95/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=04064416644eba7351b1a457c1de27d28a750c95", "patch": "@@ -279,6 +279,7 @@ macro_rules! options {\n         pub const parse_tls_model: &str =\n             \"one of supported TLS models (`rustc --print tls-models`)\";\n         pub const parse_target_feature: &str = parse_string;\n+        pub const parse_wasi_exec_model: &str = \"either `command` or `reactor`\";\n     }\n \n     #[allow(dead_code)]\n@@ -722,6 +723,15 @@ macro_rules! options {\n                 None => false,\n             }\n         }\n+\n+        fn parse_wasi_exec_model(slot: &mut Option<WasiExecModel>, v: Option<&str>) -> bool {\n+            match v {\n+                Some(\"command\")  => *slot = Some(WasiExecModel::Command),\n+                Some(\"reactor\") => *slot = Some(WasiExecModel::Reactor),\n+                _ => return false,\n+            }\n+            true\n+        }\n     }\n ) }\n \n@@ -1166,9 +1176,17 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"in general, enable more debug printouts (default: no)\"),\n     verify_llvm_ir: bool = (false, parse_bool, [TRACKED],\n         \"verify LLVM IR (default: no)\"),\n+    wasi_exec_model: Option<WasiExecModel> = (None, parse_wasi_exec_model, [TRACKED],\n+        \"whether to build a wasi command or reactor\"),\n \n     // This list is in alphabetical order.\n     //\n     // If you add a new option, please update:\n-    // - src/librustc_interface/tests.rs\n+    // - compiler/rustc_interface/src/tests.rs\n+}\n+\n+#[derive(Clone, Hash)]\n+pub enum WasiExecModel {\n+    Command,\n+    Reactor,\n }"}, {"sha": "1f9a1af0f687224ccf85e83a80494358e3e53de9", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/04064416644eba7351b1a457c1de27d28a750c95/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04064416644eba7351b1a457c1de27d28a750c95/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=04064416644eba7351b1a457c1de27d28a750c95", "patch": "@@ -796,6 +796,14 @@ impl Session {\n         self.opts.debugging_opts.tls_model.unwrap_or(self.target.tls_model)\n     }\n \n+    pub fn is_wasi_reactor(&self) -> bool {\n+        self.target.options.os == \"wasi\"\n+            && matches!(\n+                self.opts.debugging_opts.wasi_exec_model,\n+                Some(config::WasiExecModel::Reactor)\n+            )\n+    }\n+\n     pub fn must_not_eliminate_frame_pointers(&self) -> bool {\n         // \"mcount\" function relies on stack pointer.\n         // See <https://sourceware.org/binutils/docs/gprof/Implementation.html>."}, {"sha": "a9e595d11e75976aec0b2e8bc039b4c187e858b6", "filename": "compiler/rustc_target/src/abi/call/mod.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/04064416644eba7351b1a457c1de27d28a750c95/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04064416644eba7351b1a457c1de27d28a750c95/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs?ref=04064416644eba7351b1a457c1de27d28a750c95", "patch": "@@ -605,10 +605,11 @@ impl<'a, Ty> FnAbi<'a, Ty> {\n             \"nvptx64\" => nvptx64::compute_abi_info(self),\n             \"hexagon\" => hexagon::compute_abi_info(self),\n             \"riscv32\" | \"riscv64\" => riscv::compute_abi_info(cx, self),\n-            \"wasm32\" if cx.target_spec().os != \"emscripten\" => {\n-                wasm32_bindgen_compat::compute_abi_info(self)\n-            }\n-            \"wasm32\" | \"asmjs\" => wasm32::compute_abi_info(cx, self),\n+            \"wasm32\" => match cx.target_spec().os.as_str() {\n+                \"emscripten\" | \"wasi\" => wasm32::compute_abi_info(cx, self),\n+                _ => wasm32_bindgen_compat::compute_abi_info(self),\n+            },\n+            \"asmjs\" => wasm32::compute_abi_info(cx, self),\n             a => return Err(format!(\"unrecognized arch \\\"{}\\\" in target specification\", a)),\n         }\n "}, {"sha": "93868bed9b98edc33f6f707a5b69527735179e46", "filename": "compiler/rustc_target/src/abi/mod.rs", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/04064416644eba7351b1a457c1de27d28a750c95/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04064416644eba7351b1a457c1de27d28a750c95/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs?ref=04064416644eba7351b1a457c1de27d28a750c95", "patch": "@@ -271,22 +271,38 @@ impl ToJson for Endian {\n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, Encodable, Decodable)]\n #[derive(HashStable_Generic)]\n pub struct Size {\n+    // The top 3 bits are ALWAYS zero.\n     raw: u64,\n }\n \n impl Size {\n     pub const ZERO: Size = Size { raw: 0 };\n \n-    #[inline]\n+    /// Rounds `bits` up to the next-higher byte boundary, if `bits` is\n+    /// is not aligned.\n     pub fn from_bits(bits: impl TryInto<u64>) -> Size {\n         let bits = bits.try_into().ok().unwrap();\n+\n+        #[cold]\n+        fn overflow(bits: u64) -> ! {\n+            panic!(\"Size::from_bits({}) has overflowed\", bits);\n+        }\n+\n+        // This is the largest value of `bits` that does not cause overflow\n+        // during rounding, and guarantees that the resulting number of bytes\n+        // cannot cause overflow when multiplied by 8.\n+        if bits > 0xffff_ffff_ffff_fff8 {\n+            overflow(bits);\n+        }\n+\n         // Avoid potential overflow from `bits + 7`.\n-        Size::from_bytes(bits / 8 + ((bits % 8) + 7) / 8)\n+        Size { raw: bits / 8 + ((bits % 8) + 7) / 8 }\n     }\n \n     #[inline]\n     pub fn from_bytes(bytes: impl TryInto<u64>) -> Size {\n-        Size { raw: bytes.try_into().ok().unwrap() }\n+        let bytes: u64 = bytes.try_into().ok().unwrap();\n+        Size { raw: bytes }\n     }\n \n     #[inline]\n@@ -301,9 +317,7 @@ impl Size {\n \n     #[inline]\n     pub fn bits(self) -> u64 {\n-        self.bytes().checked_mul(8).unwrap_or_else(|| {\n-            panic!(\"Size::bits: {} bytes in bits doesn't fit in u64\", self.bytes())\n-        })\n+        self.raw << 3\n     }\n \n     #[inline]"}, {"sha": "32da16a2d8ca83381034d3e0d3ebdd2025a97721", "filename": "compiler/rustc_target/src/spec/crt_objects.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/04064416644eba7351b1a457c1de27d28a750c95/compiler%2Frustc_target%2Fsrc%2Fspec%2Fcrt_objects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04064416644eba7351b1a457c1de27d28a750c95/compiler%2Frustc_target%2Fsrc%2Fspec%2Fcrt_objects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fcrt_objects.rs?ref=04064416644eba7351b1a457c1de27d28a750c95", "patch": "@@ -5,15 +5,16 @@\n //! The `crtx` ones are generally distributed with libc and the `begin/end` ones with gcc.\n //! See <https://dev.gentoo.org/~vapier/crt.txt> for some more details.\n //!\n-//! | Pre-link CRT objects | glibc                  | musl                   | bionic           | mingw             | wasi |\n-//! |----------------------|------------------------|------------------------|------------------|-------------------|------|\n-//! | dynamic-nopic-exe    | crt1, crti, crtbegin   | crt1, crti, crtbegin   | crtbegin_dynamic | crt2, crtbegin    | crt1 |\n-//! | dynamic-pic-exe      | Scrt1, crti, crtbeginS | Scrt1, crti, crtbeginS | crtbegin_dynamic | crt2, crtbegin    | crt1 |\n-//! | static-nopic-exe     | crt1, crti, crtbeginT  | crt1, crti, crtbegin   | crtbegin_static  | crt2, crtbegin    | crt1 |\n-//! | static-pic-exe       | rcrt1, crti, crtbeginS | rcrt1, crti, crtbeginS | crtbegin_dynamic | crt2, crtbegin    | crt1 |\n-//! | dynamic-dylib        | crti, crtbeginS        | crti, crtbeginS        | crtbegin_so      | dllcrt2, crtbegin | -    |\n-//! | static-dylib (gcc)   | crti, crtbeginT        | crti, crtbeginS        | crtbegin_so      | dllcrt2, crtbegin | -    |\n-//! | static-dylib (clang) | crti, crtbeginT        | N/A                    | crtbegin_static  | dllcrt2, crtbegin | -    |\n+//! | Pre-link CRT objects | glibc                  | musl                   | bionic           | mingw             | wasi         |\n+//! |----------------------|------------------------|------------------------|------------------|-------------------|--------------|\n+//! | dynamic-nopic-exe    | crt1, crti, crtbegin   | crt1, crti, crtbegin   | crtbegin_dynamic | crt2, crtbegin    | crt1         |\n+//! | dynamic-pic-exe      | Scrt1, crti, crtbeginS | Scrt1, crti, crtbeginS | crtbegin_dynamic | crt2, crtbegin    | crt1         |\n+//! | static-nopic-exe     | crt1, crti, crtbeginT  | crt1, crti, crtbegin   | crtbegin_static  | crt2, crtbegin    | crt1         |\n+//! | static-pic-exe       | rcrt1, crti, crtbeginS | rcrt1, crti, crtbeginS | crtbegin_dynamic | crt2, crtbegin    | crt1         |\n+//! | dynamic-dylib        | crti, crtbeginS        | crti, crtbeginS        | crtbegin_so      | dllcrt2, crtbegin | -            |\n+//! | static-dylib (gcc)   | crti, crtbeginT        | crti, crtbeginS        | crtbegin_so      | dllcrt2, crtbegin | -            |\n+//! | static-dylib (clang) | crti, crtbeginT        | N/A                    | crtbegin_static  | dllcrt2, crtbegin | -            |\n+//! | wasi-reactor-exe     | N/A                    | N/A                    | N/A              | N/A               | crt1-reactor |\n //!\n //! | Post-link CRT objects | glibc         | musl          | bionic         | mingw  | wasi |\n //! |-----------------------|---------------|---------------|----------------|--------|------|\n@@ -105,6 +106,7 @@ pub(super) fn pre_wasi_fallback() -> CrtObjects {\n         (LinkOutputKind::DynamicPicExe, &[\"crt1.o\"]),\n         (LinkOutputKind::StaticNoPicExe, &[\"crt1.o\"]),\n         (LinkOutputKind::StaticPicExe, &[\"crt1.o\"]),\n+        (LinkOutputKind::WasiReactorExe, &[\"crt1-reactor.o\"]),\n     ])\n }\n "}, {"sha": "d283c2548864f995b0841bc31fed75f2c0c0e7af", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/04064416644eba7351b1a457c1de27d28a750c95/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04064416644eba7351b1a457c1de27d28a750c95/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=04064416644eba7351b1a457c1de27d28a750c95", "patch": "@@ -408,6 +408,8 @@ pub enum LinkOutputKind {\n     DynamicDylib,\n     /// Dynamic library with bundled libc (\"statically linked\").\n     StaticDylib,\n+    /// WASI module with a lifetime past the _initialize entry point\n+    WasiReactorExe,\n }\n \n impl LinkOutputKind {\n@@ -419,6 +421,7 @@ impl LinkOutputKind {\n             LinkOutputKind::StaticPicExe => \"static-pic-exe\",\n             LinkOutputKind::DynamicDylib => \"dynamic-dylib\",\n             LinkOutputKind::StaticDylib => \"static-dylib\",\n+            LinkOutputKind::WasiReactorExe => \"wasi-reactor-exe\",\n         }\n     }\n \n@@ -430,6 +433,7 @@ impl LinkOutputKind {\n             \"static-pic-exe\" => LinkOutputKind::StaticPicExe,\n             \"dynamic-dylib\" => LinkOutputKind::DynamicDylib,\n             \"static-dylib\" => LinkOutputKind::StaticDylib,\n+            \"wasi-reactor-exe\" => LinkOutputKind::WasiReactorExe,\n             _ => return None,\n         })\n     }\n@@ -1378,7 +1382,7 @@ impl Target {\n                         let kind = LinkOutputKind::from_str(&k).ok_or_else(|| {\n                             format!(\"{}: '{}' is not a valid value for CRT object kind. \\\n                                      Use '(dynamic,static)-(nopic,pic)-exe' or \\\n-                                     '(dynamic,static)-dylib'\", name, k)\n+                                     '(dynamic,static)-dylib' or 'wasi-reactor-exe'\", name, k)\n                         })?;\n \n                         let v = v.as_array().ok_or_else(||"}, {"sha": "38c6bfb0ef361285abc75f701af6f095b6e42fbe", "filename": "library/core/src/cmp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04064416644eba7351b1a457c1de27d28a750c95/library%2Fcore%2Fsrc%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04064416644eba7351b1a457c1de27d28a750c95/library%2Fcore%2Fsrc%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcmp.rs?ref=04064416644eba7351b1a457c1de27d28a750c95", "patch": "@@ -29,7 +29,7 @@ use self::Ordering::*;\n ///\n /// This trait allows for partial equality, for types that do not have a full\n /// equivalence relation. For example, in floating point numbers `NaN != NaN`,\n-/// so floating point types implement `PartialEq` but not [`Eq`].\n+/// so floating point types implement `PartialEq` but not [`trait@Eq`].\n ///\n /// Formally, the equality must be (for all `a`, `b` and `c`):\n ///"}, {"sha": "39700c087a20d55ed333abd80cff85729e24fea9", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/04064416644eba7351b1a457c1de27d28a750c95/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04064416644eba7351b1a457c1de27d28a750c95/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=04064416644eba7351b1a457c1de27d28a750c95", "patch": "@@ -188,14 +188,16 @@ fn copy_self_contained_objects(\n         }\n     } else if target.ends_with(\"-wasi\") {\n         let srcdir = builder.wasi_root(target).unwrap().join(\"lib/wasm32-wasi\");\n-        copy_and_stamp(\n-            builder,\n-            &libdir_self_contained,\n-            &srcdir,\n-            \"crt1.o\",\n-            &mut target_deps,\n-            DependencyType::TargetSelfContained,\n-        );\n+        for &obj in &[\"crt1.o\", \"crt1-reactor.o\"] {\n+            copy_and_stamp(\n+                builder,\n+                &libdir_self_contained,\n+                &srcdir,\n+                obj,\n+                &mut target_deps,\n+                DependencyType::TargetSelfContained,\n+            );\n+        }\n     } else if target.contains(\"windows-gnu\") {\n         for obj in [\"crt2.o\", \"dllcrt2.o\"].iter() {\n             let src = compiler_file(builder, builder.cc(target), target, obj);"}, {"sha": "708d7710058d5e19c745c7f8ec409b6ba924c9fa", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04064416644eba7351b1a457c1de27d28a750c95/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04064416644eba7351b1a457c1de27d28a750c95/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=04064416644eba7351b1a457c1de27d28a750c95", "patch": "@@ -2085,7 +2085,7 @@ fn resolve_primitive(path_str: &str, ns: Namespace) -> Option<Res> {\n         \"f64\" => F64,\n         \"char\" => Char,\n         \"bool\" | \"true\" | \"false\" => Bool,\n-        \"str\" => Str,\n+        \"str\" | \"&str\" => Str,\n         // See #80181 for why these don't have symbols associated.\n         \"slice\" => Slice,\n         \"array\" => Array,"}, {"sha": "2c7e7b5c48c59f4afe1518d125ff316faa4e5a30", "filename": "src/test/rustdoc/intra-doc/non-path-primitives.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/04064416644eba7351b1a457c1de27d28a750c95/src%2Ftest%2Frustdoc%2Fintra-doc%2Fnon-path-primitives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04064416644eba7351b1a457c1de27d28a750c95/src%2Ftest%2Frustdoc%2Fintra-doc%2Fnon-path-primitives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fnon-path-primitives.rs?ref=04064416644eba7351b1a457c1de27d28a750c95", "patch": "@@ -8,6 +8,15 @@\n // @has - '//a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html#method.map\"]' 'array::map'\n //! [array::map]\n \n+// @has - '//a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\"]' 'owned str'\n+// @has - '//a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\"]' 'str ref'\n+// @has - '//a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html#method.is_empty\"]' 'str::is_empty'\n+// @has - '//a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html#method.len\"]' '&str::len'\n+//! [owned str][str]\n+//! [str ref][&str]\n+//! [str::is_empty]\n+//! [&str::len]\n+\n // @has - '//a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html#method.is_null\"]' 'pointer::is_null'\n // @has - '//a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html#method.is_null\"]' '*const::is_null'\n // @has - '//a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html#method.is_null\"]' '*mut::is_null'"}, {"sha": "e067dbbf85bddbfcb03004c38991f4f29f202f5b", "filename": "src/test/ui/codemap_tests/tab_3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04064416644eba7351b1a457c1de27d28a750c95/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab_3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/04064416644eba7351b1a457c1de27d28a750c95/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab_3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab_3.stderr?ref=04064416644eba7351b1a457c1de27d28a750c95", "patch": "@@ -9,7 +9,7 @@ LL |     {\n LL |         println!(\"{:?}\", some_vec);\n    |                          ^^^^^^^^ value borrowed here after move\n    |\n-note: this function consumes the receiver `self` by taking ownership of it, which moves `some_vec`\n+note: this function takes ownership of the receiver `self`, which moves `some_vec`\n   --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n    |\n LL |     fn into_iter(self) -> Self::IntoIter;"}, {"sha": "b14faff8f7b8d52cb07535df2a36698e4194d47c", "filename": "src/test/ui/issues/issue-34721.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04064416644eba7351b1a457c1de27d28a750c95/src%2Ftest%2Fui%2Fissues%2Fissue-34721.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/04064416644eba7351b1a457c1de27d28a750c95/src%2Ftest%2Fui%2Fissues%2Fissue-34721.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34721.stderr?ref=04064416644eba7351b1a457c1de27d28a750c95", "patch": "@@ -13,7 +13,7 @@ LL |         };\n LL |         x.zero()\n    |         ^ value used here after move\n    |\n-note: this function consumes the receiver `self` by taking ownership of it, which moves `x`\n+note: this function takes ownership of the receiver `self`, which moves `x`\n   --> $DIR/issue-34721.rs:4:13\n    |\n LL |     fn zero(self) -> Self;"}, {"sha": "fb242f738c87e4877b356a9419af9dd367423633", "filename": "src/test/ui/issues/issue-61108.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04064416644eba7351b1a457c1de27d28a750c95/src%2Ftest%2Fui%2Fissues%2Fissue-61108.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/04064416644eba7351b1a457c1de27d28a750c95/src%2Ftest%2Fui%2Fissues%2Fissue-61108.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-61108.stderr?ref=04064416644eba7351b1a457c1de27d28a750c95", "patch": "@@ -12,7 +12,7 @@ LL |     for l in bad_letters {\n LL |     bad_letters.push('s');\n    |     ^^^^^^^^^^^ value borrowed here after move\n    |\n-note: this function consumes the receiver `self` by taking ownership of it, which moves `bad_letters`\n+note: this function takes ownership of the receiver `self`, which moves `bad_letters`\n   --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n    |\n LL |     fn into_iter(self) -> Self::IntoIter;"}, {"sha": "e0da3fd5195cb26df853777f30ee45abfcc9dd61", "filename": "src/test/ui/issues/issue-64559.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04064416644eba7351b1a457c1de27d28a750c95/src%2Ftest%2Fui%2Fissues%2Fissue-64559.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/04064416644eba7351b1a457c1de27d28a750c95/src%2Ftest%2Fui%2Fissues%2Fissue-64559.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-64559.stderr?ref=04064416644eba7351b1a457c1de27d28a750c95", "patch": "@@ -13,7 +13,7 @@ LL |     let _closure = || orig;\n    |                    |\n    |                    value used here after move\n    |\n-note: this function consumes the receiver `self` by taking ownership of it, which moves `orig`\n+note: this function takes ownership of the receiver `self`, which moves `orig`\n   --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n    |\n LL |     fn into_iter(self) -> Self::IntoIter;"}, {"sha": "946642ef6f3ad30a4ce1afb1ec289e533dcbfdff", "filename": "src/test/ui/moves/move-fn-self-receiver.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/04064416644eba7351b1a457c1de27d28a750c95/src%2Ftest%2Fui%2Fmoves%2Fmove-fn-self-receiver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04064416644eba7351b1a457c1de27d28a750c95/src%2Ftest%2Fui%2Fmoves%2Fmove-fn-self-receiver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmove-fn-self-receiver.rs?ref=04064416644eba7351b1a457c1de27d28a750c95", "patch": "@@ -69,6 +69,11 @@ fn move_out(val: Container) {\n     let container = Container(vec![]);\n     for _val in container.custom_into_iter() {}\n     container; //~ ERROR use of moved\n+\n+    let foo2 = Foo;\n+    loop {\n+        foo2.use_self(); //~ ERROR use of moved\n+    }\n }\n \n fn main() {}"}, {"sha": "eca6bb9296ddc91e989b16aa26ef65b732d38b28", "filename": "src/test/ui/moves/move-fn-self-receiver.stderr", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/04064416644eba7351b1a457c1de27d28a750c95/src%2Ftest%2Fui%2Fmoves%2Fmove-fn-self-receiver.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/04064416644eba7351b1a457c1de27d28a750c95/src%2Ftest%2Fui%2Fmoves%2Fmove-fn-self-receiver.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmove-fn-self-receiver.stderr?ref=04064416644eba7351b1a457c1de27d28a750c95", "patch": "@@ -6,7 +6,7 @@ LL |     val.0.into_iter().next();\n LL |     val.0;\n    |     ^^^^^ value used here after move\n    |\n-note: this function consumes the receiver `self` by taking ownership of it, which moves `val.0`\n+note: this function takes ownership of the receiver `self`, which moves `val.0`\n   --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n    |\n LL |     fn into_iter(self) -> Self::IntoIter;\n@@ -23,7 +23,7 @@ LL |     foo.use_self();\n LL |     foo;\n    |     ^^^ value used here after move\n    |\n-note: this function consumes the receiver `self` by taking ownership of it, which moves `foo`\n+note: this function takes ownership of the receiver `self`, which moves `foo`\n   --> $DIR/move-fn-self-receiver.rs:13:17\n    |\n LL |     fn use_self(self) {}\n@@ -49,7 +49,7 @@ LL |     boxed_foo.use_box_self();\n LL |     boxed_foo;\n    |     ^^^^^^^^^ value used here after move\n    |\n-note: this function consumes the receiver `self` by taking ownership of it, which moves `boxed_foo`\n+note: this function takes ownership of the receiver `self`, which moves `boxed_foo`\n   --> $DIR/move-fn-self-receiver.rs:14:21\n    |\n LL |     fn use_box_self(self: Box<Self>) {}\n@@ -65,7 +65,7 @@ LL |     pin_box_foo.use_pin_box_self();\n LL |     pin_box_foo;\n    |     ^^^^^^^^^^^ value used here after move\n    |\n-note: this function consumes the receiver `self` by taking ownership of it, which moves `pin_box_foo`\n+note: this function takes ownership of the receiver `self`, which moves `pin_box_foo`\n   --> $DIR/move-fn-self-receiver.rs:15:25\n    |\n LL |     fn use_pin_box_self(self: Pin<Box<Self>>) {}\n@@ -91,7 +91,7 @@ LL |     rc_foo.use_rc_self();\n LL |     rc_foo;\n    |     ^^^^^^ value used here after move\n    |\n-note: this function consumes the receiver `self` by taking ownership of it, which moves `rc_foo`\n+note: this function takes ownership of the receiver `self`, which moves `rc_foo`\n   --> $DIR/move-fn-self-receiver.rs:16:20\n    |\n LL |     fn use_rc_self(self: Rc<Self>) {}\n@@ -146,13 +146,22 @@ LL |     for _val in container.custom_into_iter() {}\n LL |     container;\n    |     ^^^^^^^^^ value used here after move\n    |\n-note: this function consumes the receiver `self` by taking ownership of it, which moves `container`\n+note: this function takes ownership of the receiver `self`, which moves `container`\n   --> $DIR/move-fn-self-receiver.rs:23:25\n    |\n LL |     fn custom_into_iter(self) -> impl Iterator<Item = bool> {\n    |                         ^^^^\n \n-error: aborting due to 11 previous errors\n+error[E0382]: use of moved value: `foo2`\n+  --> $DIR/move-fn-self-receiver.rs:75:9\n+   |\n+LL |     let foo2 = Foo;\n+   |         ---- move occurs because `foo2` has type `Foo`, which does not implement the `Copy` trait\n+LL |     loop {\n+LL |         foo2.use_self();\n+   |         ^^^^ ---------- `foo2` moved due to this method call, in previous iteration of loop\n+\n+error: aborting due to 12 previous errors\n \n Some errors have detailed explanations: E0382, E0505.\n For more information about an error, try `rustc --explain E0382`."}, {"sha": "3cc8ca29144ca6a49dc8bede2fdf0d4f26b4374f", "filename": "src/test/ui/moves/moves-based-on-type-access-to-field.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04064416644eba7351b1a457c1de27d28a750c95/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-access-to-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/04064416644eba7351b1a457c1de27d28a750c95/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-access-to-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-access-to-field.stderr?ref=04064416644eba7351b1a457c1de27d28a750c95", "patch": "@@ -8,7 +8,7 @@ LL |     consume(x.into_iter().next().unwrap());\n LL |     touch(&x[0]);\n    |            ^ value borrowed here after move\n    |\n-note: this function consumes the receiver `self` by taking ownership of it, which moves `x`\n+note: this function takes ownership of the receiver `self`, which moves `x`\n   --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n    |\n LL |     fn into_iter(self) -> Self::IntoIter;"}, {"sha": "9bcec36740d6245ba901feb26a5ea7b4647a896f", "filename": "src/test/ui/moves/moves-based-on-type-exprs.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/04064416644eba7351b1a457c1de27d28a750c95/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-exprs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/04064416644eba7351b1a457c1de27d28a750c95/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-exprs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-exprs.stderr?ref=04064416644eba7351b1a457c1de27d28a750c95", "patch": "@@ -108,7 +108,7 @@ LL |     let _y = x.into_iter().next().unwrap();\n LL |     touch(&x);\n    |           ^^ value borrowed here after move\n    |\n-note: this function consumes the receiver `self` by taking ownership of it, which moves `x`\n+note: this function takes ownership of the receiver `self`, which moves `x`\n   --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n    |\n LL |     fn into_iter(self) -> Self::IntoIter;\n@@ -124,7 +124,7 @@ LL |     let _y = [x.into_iter().next().unwrap(); 1];\n LL |     touch(&x);\n    |           ^^ value borrowed here after move\n    |\n-note: this function consumes the receiver `self` by taking ownership of it, which moves `x`\n+note: this function takes ownership of the receiver `self`, which moves `x`\n   --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n    |\n LL |     fn into_iter(self) -> Self::IntoIter;"}, {"sha": "28c319b659765ccbf1bef51cde2b85e12017a248", "filename": "src/test/ui/suggestions/borrow-for-loop-head.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/04064416644eba7351b1a457c1de27d28a750c95/src%2Ftest%2Fui%2Fsuggestions%2Fborrow-for-loop-head.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/04064416644eba7351b1a457c1de27d28a750c95/src%2Ftest%2Fui%2Fsuggestions%2Fborrow-for-loop-head.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fborrow-for-loop-head.stderr?ref=04064416644eba7351b1a457c1de27d28a750c95", "patch": "@@ -15,8 +15,14 @@ LL |     for i in &a {\n LL |         for j in a {\n    |                  ^\n    |                  |\n-   |                  value moved here, in previous iteration of loop\n+   |                  `a` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |                  help: consider borrowing to avoid moving into the for loop: `&a`\n+   |\n+note: this function takes ownership of the receiver `self`, which moves `a`\n+  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n+   |\n+LL |     fn into_iter(self) -> Self::IntoIter;\n+   |                  ^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "4f2bc06d4ab8e5177bf5cf821136fe1eb2e51c09", "filename": "src/test/ui/unsized-locals/borrow-after-move.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04064416644eba7351b1a457c1de27d28a750c95/src%2Ftest%2Fui%2Funsized-locals%2Fborrow-after-move.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/04064416644eba7351b1a457c1de27d28a750c95/src%2Ftest%2Fui%2Funsized-locals%2Fborrow-after-move.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Fborrow-after-move.stderr?ref=04064416644eba7351b1a457c1de27d28a750c95", "patch": "@@ -51,7 +51,7 @@ LL |         y.foo();\n LL |         println!(\"{}\", &y);\n    |                        ^^ value borrowed here after move\n    |\n-note: this function consumes the receiver `self` by taking ownership of it, which moves `y`\n+note: this function takes ownership of the receiver `self`, which moves `y`\n   --> $DIR/borrow-after-move.rs:5:12\n    |\n LL |     fn foo(self) -> String;"}, {"sha": "4bb2ad88faf3b7c7916c9a5267f8b0347bfee961", "filename": "src/test/ui/unsized-locals/double-move.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04064416644eba7351b1a457c1de27d28a750c95/src%2Ftest%2Fui%2Funsized-locals%2Fdouble-move.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/04064416644eba7351b1a457c1de27d28a750c95/src%2Ftest%2Fui%2Funsized-locals%2Fdouble-move.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Fdouble-move.stderr?ref=04064416644eba7351b1a457c1de27d28a750c95", "patch": "@@ -47,7 +47,7 @@ LL |         y.foo();\n LL |         y.foo();\n    |         ^ value used here after move\n    |\n-note: this function consumes the receiver `self` by taking ownership of it, which moves `y`\n+note: this function takes ownership of the receiver `self`, which moves `y`\n   --> $DIR/double-move.rs:5:12\n    |\n LL |     fn foo(self) -> String;"}, {"sha": "7fdc4ab251fe8ad5b2f93102c959ecb7c1f5346a", "filename": "src/test/ui/use/use-after-move-self-based-on-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04064416644eba7351b1a457c1de27d28a750c95/src%2Ftest%2Fui%2Fuse%2Fuse-after-move-self-based-on-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/04064416644eba7351b1a457c1de27d28a750c95/src%2Ftest%2Fui%2Fuse%2Fuse-after-move-self-based-on-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fuse%2Fuse-after-move-self-based-on-type.stderr?ref=04064416644eba7351b1a457c1de27d28a750c95", "patch": "@@ -8,7 +8,7 @@ LL |         self.bar();\n LL |         return self.x;\n    |                ^^^^^^ value used here after move\n    |\n-note: this function consumes the receiver `self` by taking ownership of it, which moves `self`\n+note: this function takes ownership of the receiver `self`, which moves `self`\n   --> $DIR/use-after-move-self-based-on-type.rs:15:16\n    |\n LL |     pub fn bar(self) {}"}, {"sha": "073deee63b98c763a35049c2a377af3925f3a5eb", "filename": "src/test/ui/use/use-after-move-self.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04064416644eba7351b1a457c1de27d28a750c95/src%2Ftest%2Fui%2Fuse%2Fuse-after-move-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/04064416644eba7351b1a457c1de27d28a750c95/src%2Ftest%2Fui%2Fuse%2Fuse-after-move-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fuse%2Fuse-after-move-self.stderr?ref=04064416644eba7351b1a457c1de27d28a750c95", "patch": "@@ -8,7 +8,7 @@ LL |         self.bar();\n LL |         return *self.x;\n    |                ^^^^^^^ value used here after move\n    |\n-note: this function consumes the receiver `self` by taking ownership of it, which moves `self`\n+note: this function takes ownership of the receiver `self`, which moves `self`\n   --> $DIR/use-after-move-self.rs:13:16\n    |\n LL |     pub fn bar(self) {}"}, {"sha": "cda08b0f4e09cc6c1404a2389535e1b39f83c42e", "filename": "src/test/ui/walk-struct-literal-with.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04064416644eba7351b1a457c1de27d28a750c95/src%2Ftest%2Fui%2Fwalk-struct-literal-with.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/04064416644eba7351b1a457c1de27d28a750c95/src%2Ftest%2Fui%2Fwalk-struct-literal-with.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwalk-struct-literal-with.stderr?ref=04064416644eba7351b1a457c1de27d28a750c95", "patch": "@@ -8,7 +8,7 @@ LL |     let end = Mine{other_val:1, ..start.make_string_bar()};\n LL |     println!(\"{}\", start.test);\n    |                    ^^^^^^^^^^ value borrowed here after move\n    |\n-note: this function consumes the receiver `self` by taking ownership of it, which moves `start`\n+note: this function takes ownership of the receiver `self`, which moves `start`\n   --> $DIR/walk-struct-literal-with.rs:7:28\n    |\n LL |     fn make_string_bar(mut self) -> Mine{"}]}