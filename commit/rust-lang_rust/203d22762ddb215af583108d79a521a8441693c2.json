{"sha": "203d22762ddb215af583108d79a521a8441693c2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwM2QyMjc2MmRkYjIxNWFmNTgzMTA4ZDc5YTUyMWE4NDQxNjkzYzI=", "commit": {"author": {"name": "Jonas Bushart", "email": "jonas@bushart.org", "date": "2017-02-23T22:24:12Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-03-10T16:02:24Z"}, "message": "Store attributes as strings\n\nRemove the AST structure", "tree": {"sha": "3c0e5ac7b4129230c3860e6e19e3497ed7e97fce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c0e5ac7b4129230c3860e6e19e3497ed7e97fce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/203d22762ddb215af583108d79a521a8441693c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/203d22762ddb215af583108d79a521a8441693c2", "html_url": "https://github.com/rust-lang/rust/commit/203d22762ddb215af583108d79a521a8441693c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/203d22762ddb215af583108d79a521a8441693c2/comments", "author": {"login": "jonasbb", "id": 273459, "node_id": "MDQ6VXNlcjI3MzQ1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/273459?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonasbb", "html_url": "https://github.com/jonasbb", "followers_url": "https://api.github.com/users/jonasbb/followers", "following_url": "https://api.github.com/users/jonasbb/following{/other_user}", "gists_url": "https://api.github.com/users/jonasbb/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonasbb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonasbb/subscriptions", "organizations_url": "https://api.github.com/users/jonasbb/orgs", "repos_url": "https://api.github.com/users/jonasbb/repos", "events_url": "https://api.github.com/users/jonasbb/events{/privacy}", "received_events_url": "https://api.github.com/users/jonasbb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a07c9a20b721554d23c45499a753bf4fdfdc7474", "url": "https://api.github.com/repos/rust-lang/rust/commits/a07c9a20b721554d23c45499a753bf4fdfdc7474", "html_url": "https://github.com/rust-lang/rust/commit/a07c9a20b721554d23c45499a753bf4fdfdc7474"}], "stats": {"total": 85, "additions": 11, "deletions": 74}, "files": [{"sha": "38d1df2abb8881015b1c94baa27b7845f0d7f68c", "filename": "src/librustc_save_analysis/external_data.rs", "status": "modified", "additions": 11, "deletions": 74, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/203d22762ddb215af583108d79a521a8441693c2/src%2Flibrustc_save_analysis%2Fexternal_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/203d22762ddb215af583108d79a521a8441693c2/src%2Flibrustc_save_analysis%2Fexternal_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fexternal_data.rs?ref=203d22762ddb215af583108d79a521a8441693c2", "patch": "@@ -11,8 +11,9 @@\n use rustc::hir::def_id::{CrateNum, DefId, DefIndex};\n use rustc::hir::map::Map;\n use rustc::ty::TyCtxt;\n-use syntax::ast::{self, LitKind, NodeId, StrStyle};\n+use syntax::ast::{self, NodeId};\n use syntax::codemap::CodeMap;\n+use syntax::print::pprust;\n use syntax_pos::Span;\n \n use data::{self, Visibility, SigElement};\n@@ -67,16 +68,22 @@ impl SpanData {\n /// Represent an arbitrary attribute on a code element\n #[derive(Clone, Debug, RustcEncodable)]\n pub struct Attribute {\n-    value: AttributeItem,\n+    value: String,\n     span: SpanData,\n }\n \n impl Lower for ast::Attribute {\n     type Target = Attribute;\n \n-    fn lower(self, tcx: TyCtxt) -> Attribute {\n+    fn lower(mut self, tcx: TyCtxt) -> Attribute {\n+        // strip #[] and #![] from the original attributes\n+        self.style = ast::AttrStyle::Outer;\n+        let value = pprust::attribute_to_string(&self);\n+        // #[] are all ASCII which makes this slice save\n+        let value = value[2..value.len()-1].to_string();\n+\n         Attribute {\n-            value: self.value.lower(tcx),\n+            value: value,\n             span: SpanData::from_span(self.span, tcx.sess.codemap()),\n         }\n     }\n@@ -90,76 +97,6 @@ impl Lower for Vec<ast::Attribute> {\n     }\n }\n \n-/// A single item as part of an attribute\n-#[derive(Clone, Debug, RustcEncodable)]\n-pub struct AttributeItem {\n-    name: LitKind,\n-    kind: AttributeItemKind,\n-    span: SpanData,\n-}\n-\n-impl Lower for ast::MetaItem {\n-    type Target = AttributeItem;\n-\n-    fn lower(self, tcx: TyCtxt) -> AttributeItem {\n-        AttributeItem {\n-            name: LitKind::Str(self.name, StrStyle::Cooked),\n-            kind: self.node.lower(tcx),\n-            span: SpanData::from_span(self.span, tcx.sess.codemap()),\n-        }\n-    }\n-}\n-\n-impl Lower for ast::NestedMetaItem {\n-    type Target = AttributeItem;\n-\n-    fn lower(self, tcx: TyCtxt) -> AttributeItem {\n-        match self.node {\n-            ast::NestedMetaItemKind::MetaItem(item) => item.lower(tcx),\n-            ast::NestedMetaItemKind::Literal(lit) => {\n-                AttributeItem {\n-                    name: lit.node,\n-                    kind: AttributeItemKind::Literal,\n-                    span: SpanData::from_span(lit.span, tcx.sess.codemap()),\n-                }\n-            }\n-        }\n-    }\n-}\n-\n-#[derive(Clone, Debug, RustcEncodable)]\n-pub enum AttributeItemKind {\n-    /// Word meta item.\n-    ///\n-    /// E.g. `test` as in `#[test]`\n-    Literal,\n-    /// Name value meta item.\n-    ///\n-    /// E.g. `feature = \"foo\"` as in `#[feature = \"foo\"]`\n-    NameValue(LitKind, SpanData),\n-    /// List meta item.\n-    ///\n-    /// E.g. the `derive(..)` as in `#[derive(..)]`\n-    List(Vec<AttributeItem>),\n-}\n-\n-impl Lower for ast::MetaItemKind {\n-    type Target = AttributeItemKind;\n-\n-    fn lower(self, tcx: TyCtxt) -> AttributeItemKind {\n-        match self {\n-            ast::MetaItemKind::Word => AttributeItemKind::Literal,\n-            ast::MetaItemKind::List(items) => {\n-                AttributeItemKind::List(items.into_iter().map(|x| x.lower(tcx)).collect())\n-            }\n-            ast::MetaItemKind::NameValue(lit) => {\n-                let span = SpanData::from_span(lit.span, tcx.sess.codemap());\n-                AttributeItemKind::NameValue(lit.node, span)\n-            }\n-        }\n-    }\n-}\n-\n #[derive(Debug, RustcEncodable)]\n pub struct CratePreludeData {\n     pub crate_name: String,"}]}