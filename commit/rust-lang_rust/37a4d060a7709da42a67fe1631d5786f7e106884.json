{"sha": "37a4d060a7709da42a67fe1631d5786f7e106884", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3YTRkMDYwYTc3MDlkYTQyYTY3ZmUxNjMxZDU3ODZmN2UxMDY4ODQ=", "commit": {"author": {"name": "Zac Pullar-Strecker", "email": "zacmps@gmail.com", "date": "2020-09-03T09:27:46Z"}, "committer": {"name": "Zac Pullar-Strecker", "email": "zacmps@gmail.com", "date": "2020-10-08T02:04:57Z"}, "message": "Add tests", "tree": {"sha": "4e0154278babc86bdee1ee00496c5cdd8756b1b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e0154278babc86bdee1ee00496c5cdd8756b1b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37a4d060a7709da42a67fe1631d5786f7e106884", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37a4d060a7709da42a67fe1631d5786f7e106884", "html_url": "https://github.com/rust-lang/rust/commit/37a4d060a7709da42a67fe1631d5786f7e106884", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37a4d060a7709da42a67fe1631d5786f7e106884/comments", "author": {"login": "zacps", "id": 9827696, "node_id": "MDQ6VXNlcjk4Mjc2OTY=", "avatar_url": "https://avatars.githubusercontent.com/u/9827696?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zacps", "html_url": "https://github.com/zacps", "followers_url": "https://api.github.com/users/zacps/followers", "following_url": "https://api.github.com/users/zacps/following{/other_user}", "gists_url": "https://api.github.com/users/zacps/gists{/gist_id}", "starred_url": "https://api.github.com/users/zacps/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zacps/subscriptions", "organizations_url": "https://api.github.com/users/zacps/orgs", "repos_url": "https://api.github.com/users/zacps/repos", "events_url": "https://api.github.com/users/zacps/events{/privacy}", "received_events_url": "https://api.github.com/users/zacps/received_events", "type": "User", "site_admin": false}, "committer": {"login": "zacps", "id": 9827696, "node_id": "MDQ6VXNlcjk4Mjc2OTY=", "avatar_url": "https://avatars.githubusercontent.com/u/9827696?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zacps", "html_url": "https://github.com/zacps", "followers_url": "https://api.github.com/users/zacps/followers", "following_url": "https://api.github.com/users/zacps/following{/other_user}", "gists_url": "https://api.github.com/users/zacps/gists{/gist_id}", "starred_url": "https://api.github.com/users/zacps/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zacps/subscriptions", "organizations_url": "https://api.github.com/users/zacps/orgs", "repos_url": "https://api.github.com/users/zacps/repos", "events_url": "https://api.github.com/users/zacps/events{/privacy}", "received_events_url": "https://api.github.com/users/zacps/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec75d8bd75b2b54138d6a46d0a800c92ac07cfe5", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec75d8bd75b2b54138d6a46d0a800c92ac07cfe5", "html_url": "https://github.com/rust-lang/rust/commit/ec75d8bd75b2b54138d6a46d0a800c92ac07cfe5"}], "stats": {"total": 96, "additions": 94, "deletions": 2}, "files": [{"sha": "b9d53bcd49ac073fcf4e80e1ef8747bb85c43f05", "filename": "crates/ide/src/doc_links.rs", "status": "modified", "additions": 94, "deletions": 2, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/37a4d060a7709da42a67fe1631d5786f7e106884/crates%2Fide%2Fsrc%2Fdoc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a4d060a7709da42a67fe1631d5786f7e106884/crates%2Fide%2Fsrc%2Fdoc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdoc_links.rs?ref=37a4d060a7709da42a67fe1631d5786f7e106884", "patch": "@@ -112,6 +112,7 @@ pub fn get_doc_link<T: Resolvable + Clone>(db: &dyn HirDatabase, definition: &T)\n // version of import map which follows the same process as rustdoc. Otherwise there'll always be some\n // edge cases where we select the wrong import path.\n fn get_doc_link(db: &RootDatabase, definition: Definition) -> Option<String> {\n+    eprintln!(\"enter\");\n     // Get the outermost definition for the moduledef. This is used to resolve the public path to the type,\n     // then we can join the method, field, etc onto it if required.\n     let target_def: ModuleDef = match definition {\n@@ -131,8 +132,8 @@ fn get_doc_link(db: &RootDatabase, definition: Definition) -> Option<String> {\n     let module = definition.module(db)?;\n     let krate = module.krate();\n     let import_map = db.import_map(krate.into());\n-    let base = once(krate.display_name(db).unwrap())\n-        .chain(import_map.path_of(ns).unwrap().segments.iter().map(|name| format!(\"{}\", name)))\n+    let base = once(krate.display_name(db)?)\n+        .chain(import_map.path_of(ns)?.segments.iter().map(|name| format!(\"{}\", name)))\n         .join(\"/\");\n \n     let filename = get_symbol_filename(db, &target_def);\n@@ -152,6 +153,7 @@ fn get_doc_link(db: &RootDatabase, definition: Definition) -> Option<String> {\n         Definition::Field(field) => get_symbol_fragment(db, &FieldOrAssocItem::Field(field)),\n         _ => None,\n     };\n+    eprintln!(\"end-ish\");\n \n     get_doc_url(db, &krate)\n         .and_then(|url| url.join(&base).ok())\n@@ -430,3 +432,93 @@ fn pick_best(tokens: TokenAtOffset<SyntaxToken>) -> Option<SyntaxToken> {\n         }\n     }\n }\n+\n+#[cfg(test)]\n+mod tests {\n+    use expect_test::{expect, Expect};\n+\n+    use crate::mock_analysis::analysis_and_position;\n+\n+    fn check(ra_fixture: &str, expect: Expect) {\n+        let (analysis, position) = analysis_and_position(ra_fixture);\n+        let url = analysis.external_docs(position).unwrap().unwrap();\n+\n+        expect.assert_eq(&url)\n+    }\n+\n+    #[test]\n+    fn test_doc_url_struct() {\n+        check(\n+            r#\"\n+pub struct Fo<|>o;\n+\"#,\n+            expect![[r#\"https://docs.rs/test/*/test/struct.Foo.html\"#]],\n+        );\n+    }\n+\n+    // TODO: Fix this test. Fails on `import_map.path_of(ns)`\n+    #[test]\n+    fn test_doc_url_fn() {\n+        check(\n+            r#\"\n+pub fn fo<|>o() {}\n+\"#,\n+            expect![[r#\"\"#]],\n+        );\n+    }\n+\n+    #[test]\n+    fn test_doc_url_inherent_method() {\n+        check(\n+            r#\"\n+pub struct Foo;\n+\n+impl Foo {\n+    pub fn met<|>hod() {}\n+}\n+\n+\"#,\n+            expect![[r##\"https://docs.rs/test/*/test/struct.Foo.html#method.method\"##]],\n+        );\n+    }\n+\n+    #[test]\n+    fn test_doc_url_trait_provided_method() {\n+        check(\n+            r#\"\n+pub trait Bar {\n+    fn met<|>hod() {}\n+}\n+\n+\"#,\n+            expect![[r##\"https://docs.rs/test/*/test/trait.Bar.html#method.method\"##]],\n+        );\n+    }\n+\n+    #[test]\n+    fn test_doc_url_trait_required_method() {\n+        check(\n+            r#\"\n+pub trait Foo {\n+    fn met<|>hod();\n+}\n+\n+\"#,\n+            expect![[r##\"https://docs.rs/test/*/test/trait.Foo.html#tymethod.method\"##]],\n+        );\n+    }\n+\n+\n+    #[test]\n+    fn test_doc_url_field() {\n+        check(\n+            r#\"\n+pub struct Foo {\n+    pub fie<|>ld: ()\n+}\n+\n+\"#,\n+            expect![[r##\"https://docs.rs/test/*/test/struct.Foo.html#structfield.field\"##]],\n+        );\n+    }\n+}"}]}