{"sha": "01d78aa21aee98ccf5b71a2ee9a136aa9e5f290c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxZDc4YWEyMWFlZTk4Y2NmNWI3MWEyZWU5YTEzNmFhOWU1ZjI5MGM=", "commit": {"author": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2021-04-17T01:32:45Z"}, "committer": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2021-04-17T01:32:45Z"}, "message": "Update docs", "tree": {"sha": "e64ca18ad12b41e2dc2301afd2c03cf1cabe6b71", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e64ca18ad12b41e2dc2301afd2c03cf1cabe6b71"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01d78aa21aee98ccf5b71a2ee9a136aa9e5f290c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01d78aa21aee98ccf5b71a2ee9a136aa9e5f290c", "html_url": "https://github.com/rust-lang/rust/commit/01d78aa21aee98ccf5b71a2ee9a136aa9e5f290c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01d78aa21aee98ccf5b71a2ee9a136aa9e5f290c/comments", "author": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e12758670900aa079b4151bb262d7e4dc0f375c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/e12758670900aa079b4151bb262d7e4dc0f375c6", "html_url": "https://github.com/rust-lang/rust/commit/e12758670900aa079b4151bb262d7e4dc0f375c6"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "e1fc82e328ad1daf5c4139e534ae35320d279ece", "filename": "crates/core_simd/src/reduction.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/01d78aa21aee98ccf5b71a2ee9a136aa9e5f290c/crates%2Fcore_simd%2Fsrc%2Freduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01d78aa21aee98ccf5b71a2ee9a136aa9e5f290c/crates%2Fcore_simd%2Fsrc%2Freduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Freduction.rs?ref=01d78aa21aee98ccf5b71a2ee9a136aa9e5f290c", "patch": "@@ -4,46 +4,46 @@ macro_rules! impl_integer_reductions {\n         where\n             Self: crate::LanesAtMost32\n         {\n-            /// Horizontal wrapping add.  Computes the sum of the lanes of the vector, with wrapping addition.\n+            /// Horizontal wrapping add.  Returns the sum of the lanes of the vector, with wrapping addition.\n             #[inline]\n             pub fn wrapping_sum(self) -> $scalar {\n                 unsafe { crate::intrinsics::simd_reduce_add_ordered(self, 0) }\n             }\n \n-            /// Horizontal wrapping multiply.  Computes the product of the lanes of the vector, with wrapping multiplication.\n+            /// Horizontal wrapping multiply.  Returns the product of the lanes of the vector, with wrapping multiplication.\n             #[inline]\n             pub fn wrapping_product(self) -> $scalar {\n                 unsafe { crate::intrinsics::simd_reduce_mul_ordered(self, 1) }\n             }\n \n-            /// Horizontal bitwise \"and\".  Computes the cumulative bitwise \"and\" across the lanes of\n+            /// Horizontal bitwise \"and\".  Returns the cumulative bitwise \"and\" across the lanes of\n             /// the vector.\n             #[inline]\n             pub fn horizontal_and(self) -> $scalar {\n                 unsafe { crate::intrinsics::simd_reduce_and(self) }\n             }\n \n-            /// Horizontal bitwise \"or\".  Computes the cumulative bitwise \"or\" across the lanes of\n+            /// Horizontal bitwise \"or\".  Returns the cumulative bitwise \"or\" across the lanes of\n             /// the vector.\n             #[inline]\n             pub fn horizontal_or(self) -> $scalar {\n                 unsafe { crate::intrinsics::simd_reduce_or(self) }\n             }\n \n-            /// Horizontal bitwise \"xor\".  Computes the cumulative bitwise \"xor\" across the lanes of\n+            /// Horizontal bitwise \"xor\".  Returns the cumulative bitwise \"xor\" across the lanes of\n             /// the vector.\n             #[inline]\n             pub fn horizontal_xor(self) -> $scalar {\n                 unsafe { crate::intrinsics::simd_reduce_xor(self) }\n             }\n \n-            /// Horizontal maximum.  Computes the maximum lane in the vector.\n+            /// Horizontal maximum.  Returns the maximum lane in the vector.\n             #[inline]\n             pub fn horizontal_max(self) -> $scalar {\n                 unsafe { crate::intrinsics::simd_reduce_max(self) }\n             }\n \n-            /// Horizontal minimum.  Computes the minimum lane in the vector.\n+            /// Horizontal minimum.  Returns the minimum lane in the vector.\n             #[inline]\n             pub fn horizontal_min(self) -> $scalar {\n                 unsafe { crate::intrinsics::simd_reduce_min(self) }\n@@ -59,7 +59,7 @@ macro_rules! impl_float_reductions {\n             Self: crate::LanesAtMost32\n         {\n \n-            /// Horizontal add.  Computes the sum of the lanes of the vector.\n+            /// Horizontal add.  Returns the sum of the lanes of the vector.\n             #[inline]\n             pub fn sum(self) -> $scalar {\n                 // LLVM sum is inaccurate on i586\n@@ -70,7 +70,7 @@ macro_rules! impl_float_reductions {\n                 }\n             }\n \n-            /// Horizontal multiply.  Computes the sum of the lanes of the vector.\n+            /// Horizontal multiply.  Returns the product of the lanes of the vector.\n             #[inline]\n             pub fn product(self) -> $scalar {\n                 // LLVM product is inaccurate on i586\n@@ -81,7 +81,7 @@ macro_rules! impl_float_reductions {\n                 }\n             }\n \n-            /// Horizontal maximum.  Computes the maximum lane in the vector.\n+            /// Horizontal maximum.  Returns the maximum lane in the vector.\n             ///\n             /// Returns values based on equality, so a vector containing both `0.` and `-0.` may\n             /// return either.  This function will not return `NaN` unless all lanes are `NaN`.\n@@ -90,7 +90,7 @@ macro_rules! impl_float_reductions {\n                 unsafe { crate::intrinsics::simd_reduce_max(self) }\n             }\n \n-            /// Horizontal minimum.  Computes the minimum lane in the vector.\n+            /// Horizontal minimum.  Returns the minimum lane in the vector.\n             ///\n             /// Returns values based on equality, so a vector containing both `0.` and `-0.` may\n             /// return either.  This function will not return `NaN` unless all lanes are `NaN`."}]}