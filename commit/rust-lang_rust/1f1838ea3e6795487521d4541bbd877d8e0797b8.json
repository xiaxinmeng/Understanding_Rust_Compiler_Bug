{"sha": "1f1838ea3e6795487521d4541bbd877d8e0797b8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmMTgzOGVhM2U2Nzk1NDg3NTIxZDQ1NDFiYmQ4NzdkOGUwNzk3Yjg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-06T22:26:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-06T22:26:38Z"}, "message": "auto merge of #11123 : alan-andrade/rust/move_wiki_to_internal_docs, r=brson\n\nThis is not done yet but I'm posting it to get feedback.\r\n\r\nThe wiki has a ton of different tutorials/manuals/faq and so forth. Instead of migrating all of them right now, I just migrated the following:\r\n\r\n* The general main wiki page\r\n* Language FAQ\r\n* Project FAQ\r\n\r\nIf this feels reasonable, please comment so that I can continue with confidence.", "tree": {"sha": "9a2934b731b2c1114a1946509f8d95f51e75ce9d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a2934b731b2c1114a1946509f8d95f51e75ce9d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f1838ea3e6795487521d4541bbd877d8e0797b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f1838ea3e6795487521d4541bbd877d8e0797b8", "html_url": "https://github.com/rust-lang/rust/commit/1f1838ea3e6795487521d4541bbd877d8e0797b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f1838ea3e6795487521d4541bbd877d8e0797b8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "400070ae55f78f9a7a66caf880207473ebc5aa93", "url": "https://api.github.com/repos/rust-lang/rust/commits/400070ae55f78f9a7a66caf880207473ebc5aa93", "html_url": "https://github.com/rust-lang/rust/commit/400070ae55f78f9a7a66caf880207473ebc5aa93"}, {"sha": "7de2379013f4d8a1e08347ab91a029fb8082c9e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/7de2379013f4d8a1e08347ab91a029fb8082c9e5", "html_url": "https://github.com/rust-lang/rust/commit/7de2379013f4d8a1e08347ab91a029fb8082c9e5"}], "stats": {"total": 894, "additions": 848, "deletions": 46}, "files": [{"sha": "15f655ac5e3e060d6746396ece93a01cf58f9816", "filename": "doc/complement-bugreport.md", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/1f1838ea3e6795487521d4541bbd877d8e0797b8/doc%2Fcomplement-bugreport.md", "raw_url": "https://github.com/rust-lang/rust/raw/1f1838ea3e6795487521d4541bbd877d8e0797b8/doc%2Fcomplement-bugreport.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fcomplement-bugreport.md?ref=1f1838ea3e6795487521d4541bbd877d8e0797b8", "patch": "@@ -0,0 +1,48 @@\n+% HOWTO submit a RUST bug report\n+\n+# I think I found a bug in the compiler!\n+\n+   If you see this message: ''error: internal compiler error: unexpected failure'',\n+then you have definitely found a bug in the compiler. It's also possible that\n+your code is not well-typed, but if you saw this message, it's still a bug in\n+error reporting.\n+\n+   If you see a message about an LLVM assertion failure, then you have also\n+definitely found a bug in the compiler. In both of these cases, it's not your\n+fault and you should report a bug!\n+\n+   If you see a compiler error message that you think is meant for users to see,\n+but it confuses you, *that's a bug too*. If it wasn't clear to you, then it's\n+an error message we want to improve, so please report it so that we can try\n+to make it better.\n+\n+# I don't want to waste the Rust devs' time! How do I know the bug I found isn't a bug that already exists in the issue tracker?\n+\n+   If you don't have much time, then don't worry about that. Just submit the bug.\n+If it's a duplicate, somebody will notice that and close it. No one will laugh\n+at you, we promise (and if someone did, they would be violating the Rust\n+[code of conduct](https://github.com/mozilla/rust/wiki/Note-development-policy code of conduct)).\n+\n+   If you have more time, it's very helpful if you can type the text of the error\n+message you got [into the issue tracker search box](https://github.com/mozilla/rust/issues)\n+to see if there's an existing bug that resembles your problem. If there is,\n+and it's an open bug, you can comment on that issue and say you ran into it too.\n+This will encourage devs to fix it. But again, don't let this stop you from\n+submitting a bug. We'd rather have to do the work of closing duplicates than\n+miss out on valid bug reports.\n+\n+# What information should I include in a bug report?\n+\n+    It's helpful to include your specific OS (for example: Mac OS X 10.8.3,\n+Windows 7, Ubuntu 12.0.4) and your hardware architecture (for example: i686, x86_64).\n+It's also helpful to copy/paste the output of re-running the erroneous rustc\n+commmand with the `-v` flag. Finally, if you can run the offending command under gdb,\n+pasting a stack trace can be useful; to do so, you will need to set a breakpoint on `rust_begin_unwind`.\n+\n+# I submitted a bug, but nobody has commented on it! I'm sad.\n+\n+   This is sad, but does happen sometimes, since we're short-staffed. If you\n+submit a bug and you haven't received a comment on it within 3 business days,\n+it's entirely reasonable to either ask on the #rust IRC channel,\n+or post on the [rust-dev mailing list](https://mail.mozilla.org/listinfo/rust-dev)\n+to ask what the status of the bug is."}, {"sha": "073a5c6d6ea9073fd578455d8334750fc32c3bcd", "filename": "doc/complement-cheatsheet.md", "status": "added", "additions": 203, "deletions": 0, "changes": 203, "blob_url": "https://github.com/rust-lang/rust/blob/1f1838ea3e6795487521d4541bbd877d8e0797b8/doc%2Fcomplement-cheatsheet.md", "raw_url": "https://github.com/rust-lang/rust/raw/1f1838ea3e6795487521d4541bbd877d8e0797b8/doc%2Fcomplement-cheatsheet.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fcomplement-cheatsheet.md?ref=1f1838ea3e6795487521d4541bbd877d8e0797b8", "patch": "@@ -0,0 +1,203 @@\n+% Rust Cheatsheet\n+\n+# How do I convert *X* to *Y*?\n+\n+**Int to string**\n+\n+Use [`ToStr`](http://static.rust-lang.org/doc/master/std/to_str/trait.ToStr.html).\n+\n+```rust\n+let x: int = 42;\n+let y: ~str = x.to_str();\n+```\n+\n+**String to int**\n+\n+Use [`FromStr`](http://static.rust-lang.org/doc/master/std/from_str/trait.FromStr.html), and its helper function, [`from_str`](http://static.rust-lang.org/doc/master/std/from_str/fn.from_str.html).\n+\n+```rust\n+let x: Option<int> = from_str(\"42\");\n+let y: int = x.unwrap();\n+```\n+\n+**Int to string, in non-base-10**\n+\n+Use [`ToStrRadix`](http://static.rust-lang.org/doc/master/std/num/trait.ToStrRadix.html).\n+\n+```rust\n+use std::num::ToStrRadix;\n+\n+let x: int = 42;\n+let y: ~str = x.to_str_radix(16);\n+```\n+\n+**String to int, in non-base-10**\n+\n+Use [`FromStrRadix`](http://static.rust-lang.org/doc/master/std/num/trait.FromStrRadix.html), and its helper function, [`from_str_radix`](http://static.rust-lang.org/doc/master/std/num/fn.from_str_radix.html).\n+\n+```rust\n+use std::num::from_str_radix;\n+\n+let x: Option<int> = from_str_radix(\"deadbeef\", 16);\n+let y: int = x.unwrap();\n+```\n+\n+# File operations\n+\n+## How do I read from a file?\n+\n+Use [`File::open`](http://static.rust-lang.org/doc/master/std/io/fs/struct.File.html#method.open) to create a [`File`](http://static.rust-lang.org/doc/master/std/io/fs/struct.File.html) struct, which implements the [`Reader`](http://static.rust-lang.org/doc/master/std/io/trait.Reader.html) trait.\n+\n+```rust\n+use std::path::Path;\n+use std::io::fs::File;\n+\n+let path : Path   = Path::new(\"Doc-FAQ-Cheatsheet.md\");\n+let on_error      = || fail!(\"open of {:?} failed\", path);\n+let reader : File = File::open(&path).unwrap_or_else(on_error);\n+```\n+\n+## How do I iterate over the lines in a file?\n+\n+Use the [`lines`](http://static.rust-lang.org/doc/master/std/io/trait.Buffer.html#method.lines) method on a [`BufferedReader`](http://static.rust-lang.org/doc/master/std/io/buffered/struct.BufferedReader.html).\n+\n+```rust\n+use std::io::buffered::BufferedReader;\n+\n+let mut reader = BufferedReader::new(reader);\n+for line in reader.lines() {\n+    print!(\"line: {}\", line);\n+}\n+```\n+\n+# String operations\n+\n+## How do I search for a substring?\n+\n+Use the [`find_str`](http://static.rust-lang.org/doc/master/std/str/trait.StrSlice.html#tymethod.find_str) method.\n+\n+```rust\n+let str = \"Hello, this is some random string\";\n+let index: Option<uint> = str.find_str(\"rand\");\n+```\n+\n+# Containers\n+\n+## How do I get the length of a vector?\n+\n+The [`Container`](http://static.rust-lang.org/doc/master/std/container/trait.Container.html) trait provides the `len` method.\n+\n+```rust\n+let u: ~[u32] = ~[0, 1, 2];\n+let v: &[u32] = &[0, 1, 2, 3];\n+let w: [u32, .. 5] = [0, 1, 2, 3, 4];\n+\n+println!(\"u: {}, v: {}, w: {}\", u.len(), v.len(), w.len()); // 3, 4, 5\n+```\n+\n+## How do I iterate over a vector?\n+\n+Use the [`iter`](http://static.rust-lang.org/doc/master/std/vec/trait.ImmutableVector.html#tymethod.iter) method.\n+\n+```rust\n+let values: ~[int] = ~[1, 2, 3, 4, 5];\n+for value in values.iter() {  // value: &int\n+    println!(\"{}\", *value);\n+}\n+```\n+\n+(See also [`mut_iter`](http://static.rust-lang.org/doc/master/std/vec/trait.MutableVector.html#tymethod.mut_iter) which yields `&mut int` and [`move_iter`](http://static.rust-lang.org/doc/master/std/vec/trait.OwnedVector.html#tymethod.move_iter) which yields `int` while consuming the `values` vector.)\n+\n+# Type system\n+\n+## How do I store a function in a struct?\n+\n+```rust\n+struct Foo {\n+    myfunc: fn(int, uint) -> i32\n+}\n+\n+struct FooClosure<'a> {\n+    myfunc: 'a |int, uint| -> i32\n+}\n+\n+fn a(a: int, b: uint) -> i32 {\n+    (a as uint + b) as i32\n+}\n+\n+fn main() {\n+    let f = Foo { myfunc: a };\n+    let g = FooClosure { myfunc: |a, b|  { (a - b as int) as i32 } };\n+    println!(\"{}\", (f.myfunc)(1, 2));\n+    println!(\"{}\", (g.myfunc)(3, 4));\n+}\n+```\n+\n+Note that the parenthesis surrounding `f.myfunc` are necessary: they are how Rust disambiguates field lookup and method call. The `'a` on `FooClosure` is the lifetime of the closure's environment pointer.\n+\n+## How do I express phantom types?\n+\n+[Phantom types](http://www.haskell.org/haskellwiki/Phantom_type) are those that cannot be constructed at compile time. To express these in Rust, zero-variant `enum`s can be used:\n+\n+```rust\n+enum Open {}\n+enum Closed {}\n+```\n+\n+Phantom types are useful for enforcing state at compile time. For example:\n+\n+```rust\n+struct Door<State>(~str);\n+\n+fn close(Door(name): Door<Open>) -> Door<Closed> {\n+    Door::<Closed>(name)\n+}\n+\n+fn open(Door(name): Door<Closed>) -> Door<Open> {\n+    Door::<Open>(name)\n+}\n+\n+let _ = close(Door::<Open>(~\"front\"));   // ok\n+let _ = close(Door::<Closed>(~\"front\")); // error: mismatched types: expected `main::Door<main::Open>` but found `main::Door<main::Closed>`\n+```\n+\n+# FFI (Foreign Function Interface)\n+\n+## C function signature conversions\n+\n+Description           | C signature                                  | Equivalent Rust signature\n+----------------------|----------------------------------------------|------------------------------------------\n+no parameters         | `void foo(void);`                            | `fn foo();`\n+return value          | `int foo(void);`                             | `fn foo() -> c_int;`\n+function parameters   | `void foo(int x, int y);`                    | `fn foo(x: int, y: int);`\n+in-out pointers       | `void foo(const int* in_ptr, int* out_ptr);` | `fn foo(in_ptr: *c_int, out_ptr: *mut c_int);`\n+\n+Note: The Rust signatures should be wrapped in an `extern \"ABI\" { ... }` block.\n+\n+### Representing opaque handles\n+\n+You might see things like this in C APIs:\n+\n+```c\n+typedef struct Window Window;\n+Window* createWindow(int width, int height);\n+```\n+\n+You can use a zero-element `enum` ([phantom type](#how-do-i-express-phantom-types)) to represent the opaque object handle. The FFI would look like this:\n+\n+```rust\n+enum Window {}\n+extern \"C\" {\n+    fn createWindow(width: c_int, height: c_int) -> *Window;\n+}\n+```\n+\n+Using a phantom type ensures that the handles cannot be (safely) constructed in client code.\n+\n+# Contributing to this page\n+\n+For small examples, have full type annotations, as much as is reasonable, to keep it clear what, exactly, everything is doing. Try to link to the API docs, as well.\n+\n+Similar documents for other programming languages:\n+\n+  * [http://pleac.sourceforge.net/](http://pleac.sourceforge.net)  "}, {"sha": "38536a732490e7359f42712d7dc54b62432839c8", "filename": "doc/complement-lang-faq.md", "status": "added", "additions": 247, "deletions": 0, "changes": 247, "blob_url": "https://github.com/rust-lang/rust/blob/1f1838ea3e6795487521d4541bbd877d8e0797b8/doc%2Fcomplement-lang-faq.md", "raw_url": "https://github.com/rust-lang/rust/raw/1f1838ea3e6795487521d4541bbd877d8e0797b8/doc%2Fcomplement-lang-faq.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fcomplement-lang-faq.md?ref=1f1838ea3e6795487521d4541bbd877d8e0797b8", "patch": "@@ -0,0 +1,247 @@\n+% Language FAQ\n+\n+# General language issues\n+\n+## Safety oriented\n+\n+* Memory safe: no null pointers, dangling pointers, use-before-initialize or use-after-move\n+* Expressive mutability control. Immutable by default, statically verified freezing for Owned types\n+* No shared mutable state across tasks\n+* Dynamic execution safety: task failure / unwinding, trapping, RAII / dtors\n+* Safe interior pointer types with lifetime analysis\n+\n+## Concurrency and efficiency oriented\n+\n+* Lightweight tasks (coroutines) with expanding stacks\n+* Fast asynchronous, copyless message passing\n+* Optional garbage collected pointers\n+* All types may be explicitly allocated on the stack or interior to other types\n+* Static, native compilation using LLVM\n+* Direct and simple interface to C code\n+\n+## Practicality oriented\n+\n+* Multi-paradigm: pure-functional, concurrent-actor, imperative-procedural, OO\n+ * First-class functions, cheap non-escaping closures\n+ * Algebraic data types (called enums) with pattern matching\n+ * Method implementations on any type\n+ * Traits, which share aspects of type classes and interfaces\n+* Multi-platform. Developed on Windows, Linux, OS X\n+* UTF-8 strings, assortment of machine-level types\n+* Works with existing native toolchains, GDB, Valgrind, Instruments, etc\n+* Rule-breaking is allowed if explicit about where and how\n+\n+## What does it look like?\n+\n+The syntax is still evolving, but here's a snippet from the hash map in core::hashmap.\n+\n+~~~\n+struct LinearMap<K,V> {\n+    k0: u64,\n+    k1: u64,\n+    resize_at: uint,\n+    size: uint,\n+    buckets: ~[Option<Bucket<K,V>>],\n+}\n+\n+enum SearchResult {\n+    FoundEntry(uint), FoundHole(uint), TableFull\n+}\n+\n+fn linear_map_with_capacity<K:Eq + Hash,V>(capacity: uint) -> LinearMap<K,V> {\n+    let r = rand::Rng();\n+    linear_map_with_capacity_and_keys(r.gen_u64(), r.gen_u64(), capacity)\n+}\n+\n+impl<K:Hash + IterBytes + Eq, V> LinearMap<K,V> {\n+\n+    fn contains_key(&self, k: &K) -> bool {\n+        match self.bucket_for_key(self.buckets, k) {\n+            FoundEntry(_) => true,\n+            TableFull | FoundHole(_) => false\n+        }\n+    }\n+\n+    fn clear(&mut self) {\n+        for bkt in self.buckets.mut_iter() {\n+            *bkt = None;\n+        }\n+        self.size = 0;\n+    }\n+\n+...\n+}\n+~~~\n+\n+## Are there any big programs written in it yet? I want to read big samples.\n+\n+There aren't many large programs yet. The Rust [compiler][rustc], 60,000+ lines at the time of writing, is written in Rust. As the oldest body of Rust code it has gone through many iterations of the language, and some parts are nicer to look at than others. It may not be the best code to learn from, but [borrowck] and [resolve] were written recently.\n+\n+[rustc]: https://github.com/mozilla/rust/tree/master/src/librustc\n+[resolve]: https://github.com/mozilla/rust/blob/master/src/librustc/middle/resolve.rs\n+[borrowck]: https://github.com/mozilla/rust/blob/master/src/librustc/middle/borrowck/\n+\n+A research browser engine called [Servo][servo], currently 30,000+ lines across more than a dozen crates, will be exercising a lot of Rust's distinctive type-system and concurrency features, and integrating many native libraries.\n+\n+[servo]: https://github.com/mozilla/servo\n+\n+Some examples that demonstrate different aspects of the language:\n+\n+* [sprocketnes], an NES emulator with no GC, using modern Rust conventions\n+* The language's general-purpose [hash] function, SipHash-2-4. Bit twiddling, OO, macros\n+* The standard library's [HashMap], a sendable hash map in an OO style\n+* The extra library's [json] module. Enums and pattern matching\n+\n+[sprocketnes]: https://github.com/pcwalton/sprocketnes\n+[hash]: https://github.com/mozilla/rust/blob/master/src/libstd/hash.rs\n+[HashMap]: https://github.com/mozilla/rust/blob/master/src/libstd/hashmap.rs\n+[json]: https://github.com/mozilla/rust/blob/master/src/libextra/json.rs\n+\n+You may also be interested in browsing [GitHub's Rust][github-rust] page.\n+\n+[github-rust]: https://github.com/languages/Rust\n+\n+## Does it run on Windows?\n+\n+Yes. All development happens in lock-step on all 3 target platforms. Using MinGW, not Cygwin. Note that the windows implementation currently has some limitations: in particular tasks [cannot unwind on windows][unwind], and all Rust executables [require a MinGW installation at runtime][libgcc].\n+\n+[unwind]: https://github.com/mozilla/rust/issues/908\n+[libgcc]: https://github.com/mozilla/rust/issues/1603\n+\n+## Have you seen this Google language, Go? How does Rust compare?\n+\n+Rust and Go have similar syntax and task models, but they have very different type systems. Rust is distinguished by greater type safety and memory safety guarantees, more control over memory layout, and robust generics.\n+\n+Rust has several key features that aren't shared by Go:\n+\n+* No shared mutable state - Shared mutable state allows data races, a large class of bad bugs. In Rust there is no sharing of mutable data, but ownership of data can be efficiently transferred between tasks.\n+* Minimal GC impact - By not having shared mutable data, Rust can avoid global GC, hence Rust never stops the world to collect garbage. With multiple allocation options, individual tasks can completely avoid GC.\n+* No null pointers - Accidentally dereferencing null pointers is a big bummer, so Rust doesn't have them.\n+* Type parametric code - Generics prove useful time and again, though they are inevitably complex to greater or lesser degrees.\n+\n+Some of Rust's advantages come at the cost of a more intricate type system than Go's.\n+\n+Go has its own strengths and in particular has a great user experience that Rust still lacks.\n+\n+## I like the language but it really needs _$somefeature_.\n+\n+At this point we are focusing on removing and stabilizing features rather than adding them. File a bug if you think it's important in terms of meeting the existing goals or making the language passably usable. Reductions are more interesting than additions, though.\n+\n+# Specific language issues\n+\n+## Is it OO? How do I do this thing I normally do in an OO language?\n+\n+It is multi-paradigm. Not everything is shoe-horned into a single abstraction. Many things you can do in OO languages you can do in Rust, but not everything, and not always using the same abstraction you're accustomed to.\n+\n+## How do you get away with \"no null pointers\"?\n+\n+Data values in the language can only be constructed through a fixed set of initializer forms. Each of those forms requires that its inputs already be initialized. A liveness analysis ensures that local variables are initialized before use.\n+\n+## What is the relationship between a module and a crate?\n+\n+* A crate is a top-level compilation unit that corresponds to a single loadable object.\n+* A module is a (possibly nested) unit of name-management inside a crate.\n+* A crate contains an implicit, un-named top-level module.\n+* Recursive definitions can span modules, but not crates.\n+* Crates do not have global names, only a set of non-unique metadata tags.\n+* There is no global inter-crate namespace; all name management occurs within a crate.\n+ * Using another crate binds the root of _its_ namespace into the user's namespace.\n+\n+## Why is failure unwinding non-recoverable within a task? Why not try to \"catch exceptions\"?\n+\n+In short, because too few guarantees could be made about the dynamic environment of the catch block, as well as invariants holding in the unwound heap, to be able to safely resume; we believe that other methods of signalling and logging errors are more appropriate, with tasks playing the role of a \"hard\" isolation boundary between separate heaps.\n+\n+Rust provides, instead, three predictable and well-defined options for handling any combination of the three main categories of \"catch\" logic:\n+\n+* Failure _logging_ is done by the integrated logging subsystem.\n+* _Recovery_ after a failure is done by trapping a task failure from _outside_ the task, where other tasks are known to be unaffected.\n+* _Cleanup_ of resources is done by RAII-style objects with destructors.\n+\n+Cleanup through RAII-style destructors is more likely to work than in catch blocks anyways, since it will be better tested (part of the non-error control paths, so executed all the time).\n+\n+## Why aren't modules type-parametric?\n+\n+We want to maintain the option to parametrize at runtime. We may make eventually change this limitation, but initially this is how type parameters were implemented.\n+\n+## Why aren't values type-parametric? Why only items?\n+\n+Doing so would make type inference much more complex, and require the implementation strategy of runtime parametrization.\n+\n+## Why are enumerations nominal and closed?\n+\n+We don't know if there's an obvious, easy, efficient, stock-textbook way of supporting open or structural disjoint unions. We prefer to stick to language features that have an obvious and well-explored semantics.\n+\n+## Why aren't channels synchronous?\n+\n+There's a lot of debate on this topic; it's easy to find a proponent of default-sync or default-async communication, and there are good reasons for either. Our choice rests on the following arguments:\n+\n+* Part of the point of isolating tasks is to decouple tasks from one another, such that assumptions in one task do not cause undue constraints (or bugs, if violated!) in another. Temporal coupling is as real as any other kind; async-by-default relaxes the default case to only _causal_ coupling.\n+* Default-async supports buffering and batching communication, reducing the frequency and severity of task-switching and inter-task / inter-domain synchronization.\n+* Default-async with transmittable channels is the lowest-level building block on which more-complex synchronization topologies and strategies can be built; it is not clear to us that the majority of cases fit the 2-party full-synchronization pattern rather than some more complex multi-party or multi-stage scenario. We did not want to force all programs to pay for wiring the former assumption into all communications.\n+\n+## Why are channels half-duplex (one-way)?\n+\n+Similar to the reasoning about default-sync: it wires fewer assumptions into the implementation, that would have to be paid by all use-cases even if they actually require a more complex communication topology.\n+\n+## Why are strings UTF-8 by default? Why not UCS2 or UCS4?\n+\n+The `str` type is UTF-8 because we observe more text in the wild in this encoding -- particularly in network transmissions, which are endian-agnostic -- and we think it's best that the default treatment of I/O not involve having to recode codepoints in each direction.\n+\n+This does mean that indexed access to a Unicode codepoint inside a `str` value is an O(n) operation. On the one hand, this is clearly undesirable; on the other hand, this problem is full of trade-offs and we'd like to point a few important qualifications:\n+\n+* Scanning a `str` for ASCII-range codepoints can still be done safely octet-at-a-time, with each indexing operation pulling out a `u8` costing only O(1) and producing a value that can be cast and compared to an ASCII-range `char`. So if you're (say) line-breaking on `'\\n'`, octet-based treatment still works. UTF8 was well-designed this way.\n+* Most \"character oriented\" operations on text only work under very restricted language assumptions sets such as \"ASCII-range codepoints only\". Outside ASCII-range, you tend to have to use a complex (non-constant-time) algorithm for determining linguistic-unit (glyph, word, paragraph) boundaries anyways. We recommend using an \"honest\" linguistically-aware, Unicode-approved algorithm.\n+* The `char` type is UCS4. If you honestly need to do a codepoint-at-a-time algorithm, it's trivial to write a `type wstr = [char]`, and unpack a `str` into it in a single pass, then work with the `wstr`. In other words: the fact that the language is not \"decoding to UCS4 by default\" shouldn't stop you from decoding (or re-encoding any other way) if you need to work with that encoding.\n+\n+## Why are strings, vectors etc. built-in types rather than (say) special kinds of trait/impl?\n+\n+In each case there is one or more operator, literal constructor, overloaded use or integration with a built-in control structure that makes us think it would be awkward to phrase the type in terms of more-general type constructors. Same as, say, with numbers! But this is partly an aesthetic call, and we'd be willing to look at a worked-out proposal for eliminating or rephrasing these special cases.\n+\n+## Can Rust code call C code?\n+\n+Yes. Since C code typically expects a larger stack than Rust code does, the stack may grow before the call. The Rust domain owning the task that makes the call will block for the duration of the call, so if the call is likely to be long-lasting, you should consider putting the task in its own domain (thread or process).\n+\n+## Can C code call Rust code?\n+\n+Yes. The Rust code has to be exposed via an `extern` declaration, which makes it C-ABI compatible. Its address can then be taken and passed to C code. When C calls Rust back, the callback occurs in very restricted circumstances.\n+\n+## How do Rust's task stacks work?\n+\n+They start small (ideally in the hundreds of bytes) and expand dynamically by calling through special frames that allocate new stack segments. This is known as the \"spaghetti stack\" approach.\n+\n+## What is the difference between a managed box pointer (`@`) and an owned box pointer (`~`)?\n+\n+* Managed boxes live in the garbage collected task-local heap\n+* Owned boxes live in the global exchange heap\n+* Managed boxes may be referred to by multiple managed box references\n+* Owned boxes have unique ownership and there may only be a single unique pointer to a unique box at a time\n+* Managed boxes may not be shared between tasks\n+* Owned boxes may be transferred (moved) between tasks\n+\n+## What is the difference between a borrowed pointer (`&`) and managed and owned boxes?\n+\n+* Borrowed pointers point to the interior of a stack _or_ heap allocation\n+* Borrowed pointers can only be formed when it will provably be outlived by the referent\n+* Borrowed pointers to managed box pointers keep the managed boxes alive\n+* Borrowed pointers to owned boxes prevent their ownership from being transferred\n+* Borrowed pointers employ region-based alias analysis to ensure correctness\n+\n+## Why aren't function signatures inferred? Why only local slots?\n+\n+* Mechanically, it simplifies the inference algorithm; inference only requires looking at one function at a time.\n+* The same simplification goes double for human readers. A reader does not need an IDE running an inference algorithm across an entire crate to be able to guess at a function's argument types; it's always explicit and nearby.\n+* Parameters in Rust can be passed by reference or by value. We can't automatically infer which one the programmer means.\n+\n+## Why does a type parameter need explicit trait bounds to invoke methods on it, when C++ templates do not?\n+\n+* Requiring explicit bounds means that the compiler can type-check the code at the point where the type-parametric item is *defined*, rather than delaying to when its type parameters are instantiated.  You know that *any* set of type parameters fulfilling the bounds listed in the API will compile. It's an enforced minimal level of documentation, and results in very clean error messages.\n+\n+* Scoping of methods is also a problem.  C++ needs [Koenig (argument dependent) lookup](http://en.wikipedia.org/wiki/Argument-dependent_name_lookup), which comes with its own host of problems. Explicit bounds avoid this issue: traits are explicitly imported and then used as bounds on type parameters, so there is a clear mapping from the method to its implementation (via the trait and the instantiated type).  \n+\n+  * Related to the above point: since a parameter explicitly names its trait bounds, a single type is able to implement traits whose sets of method names overlap, cleanly and unambiguously.\n+\n+* There is further discussion on [this thread on the Rust mailing list](https://mail.mozilla.org/pipermail/rust-dev/2013-September/005603.html).\n+\n+## Will Rust implement automatic semicolon insertion, like in Go?\n+\n+For simplicity, we do not plan to do so. Implementing automatic semicolon insertion for Rust would be tricky because the absence of a trailing semicolon means \"return a value\"."}, {"sha": "066434cd833b537d9b36b28ffab8585913e03573", "filename": "doc/complement-project-faq.md", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/1f1838ea3e6795487521d4541bbd877d8e0797b8/doc%2Fcomplement-project-faq.md", "raw_url": "https://github.com/rust-lang/rust/raw/1f1838ea3e6795487521d4541bbd877d8e0797b8/doc%2Fcomplement-project-faq.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fcomplement-project-faq.md?ref=1f1838ea3e6795487521d4541bbd877d8e0797b8", "patch": "@@ -0,0 +1,68 @@\n+% Project FAQ\n+\n+# What is this project's goal, in one sentence?\n+\n+To design and implement a safe, concurrent, practical, static systems language.\n+\n+# Why are you doing this?\n+\n+Existing languages at this level of abstraction and efficiency are unsatisfactory. In particular:\n+\n+* Too little attention paid to safety.\n+* Poor concurrency support.\n+* Lack of practical affordances, too dogmatic about paradigm.\n+\n+# What are some non-goals?\n+\n+* To employ any particularly cutting-edge technologies. Old, established techniques are better.\n+* To prize expressiveness, minimalism or elegance above other goals. These are desirable but subordinate goals. \n+* To cover the \"systems language\" part all the way down to \"writing an OS kernel\".\n+* To cover the complete feature-set of C++, or any other language. It should provide majority-case features.\n+* To be 100% static, 100% safe, 100% reflective, or too dogmatic in any other sense. Trade-offs exist.\n+* To run on \"every possible platform\". It must eventually work without unnecessary compromises on widely-used hardware and software platforms.\n+\n+# Is any part of this thing production-ready?\n+\n+No. Feel free to play around, but don't expect completeness or stability yet. Expect incompleteness and breakage.\n+\n+What exists presently is:\n+\n+* A self-hosted (written in Rust) compiler, which uses LLVM as a backend.\n+* A runtime library.\n+* An evolving standard library.\n+* Documentation for the language and libraries.\n+* Incomplete tools for packaging and documentation.\n+* A test suite covering the compiler and libraries.\n+\n+# Is this a completely Mozilla-planned and orchestrated thing?\n+\n+No. It started as a part-time side project in 2006 and remained so for over 3 years. Mozilla got involved in 2009 once the language was mature enough to run some basic tests and demonstrate the idea.\n+\n+# Why did you do so much work in private?\n+\n+* A certain amount of shyness. Language work is somewhat political and flame-inducing.\n+* Languages designed by committee have a poor track record. Design coherence is important. There were a lot of details to work out and the initial developer (Graydon) had this full time job thing eating up most days.\n+\n+# Why publish it now?\n+\n+* The design is stable enough. All the major pieces have reached non-imaginary, initial implementation status. It seems to hold together ok.\n+* Languages solely implemented and supported by one person _also_ have a poor track record. To survive it'll need help.\n+\n+# What will Mozilla use Rust for?\n+\n+Mozilla intends to use Rust as a platform for prototyping experimental browser architectures. Specifically, the hope is to develop a browser that is more amenable to parallelization than existing ones, while also being less prone to common C++ coding errors. The name of that project is _[Servo](http://github.com/mozilla/servo)_.\n+\n+# Are you going to use this to suddenly rewrite the browser and change everything? Is the Mozilla Corporation trying to force the community to use a new language?\n+\n+No. This is a research project. The point is to explore ideas. There is no plan to incorporate any Rust-based technology into Firefox.\n+\n+# Why GitHub rather than the normal Mozilla setup (Mercurial / Bugzilla / Tinderbox)?\n+\n+* This is a fresh codebase and has no existing ties to Mozilla infrastructure; there is no particular advantage to (re)using any of the above infrastructure, it would all have to be upgraded and adapted to our needs.\n+* Git has been progressing rapidly in the years since Mozilla picked Mercurial for its main development needs, and appears to be both more widely known and more accessible at this point.\n+* This reduces the administrative requirements for contributing to merely establishing a paper trail via a contributor agreement. There is no need for vouching, granting commit access to Mozilla facilities, or setting up Mozilla user accounts.\n+\n+# Why a BSD-style license rather than MPL or tri-license?\n+\n+* Partly due to preference of the original developer (Graydon).\n+* Partly due to the fact that languages tend to have a wider audience and more diverse set of possible embeddings and end-uses than focused, coherent products such as web browsers. We'd like to appeal to as many of those potential contributors as possible."}, {"sha": "42bc979e5f1361dac6913683808db6b1df3a0e97", "filename": "doc/complement-usage-faq.md", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/1f1838ea3e6795487521d4541bbd877d8e0797b8/doc%2Fcomplement-usage-faq.md", "raw_url": "https://github.com/rust-lang/rust/raw/1f1838ea3e6795487521d4541bbd877d8e0797b8/doc%2Fcomplement-usage-faq.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fcomplement-usage-faq.md?ref=1f1838ea3e6795487521d4541bbd877d8e0797b8", "patch": "@@ -0,0 +1,35 @@\n+% Usage FAQ\n+\n+# How do I get my program to display the output of `log` statements?\n+\n+**Short answer** set the RUST_LOG environment variable to the name of your source file, sans extension.\n+\n+```sh\n+rustc hello.rs\n+export RUST_LOG=hello\n+./hello\n+```\n+\n+**Long answer** RUST_LOG takes a 'logging spec' that consists of a comma-separated list of paths, where a path consists of the crate name and sequence of module names, each separated by double-colons. For standalone .rs files the crate is implicitly named after the source file, so in the above example we were setting RUST_LOG to the name of the hello crate. Multiple paths can be combined to control the exact logging you want to see. For example, when debugging linking in the compiler you might set `RUST_LOG=rustc::metadata::creader,rustc::util::filesearch,rustc::back::rpath`\n+\n+If you aren't sure which paths you need, try setting RUST_LOG to `::help` and running your program. This will print a list of paths available for logging. For a full description see [the language reference][1].\n+\n+[1]:http://doc.rust-lang.org/doc/master/rust.html#logging-system\n+\n+# How do I get my program to display the output of `debug!` statements?\n+\n+This is much like the answer for `log` statements, except that you also need to compile your program in debug mode (that is, pass `--cfg debug` to `rustc`).  Note that if you want to see the instrumentation of the `debug!` statements within `rustc` itself, you need a debug version of `rustc`; you can get one by invoking `configure` with the `--enable-debug` option.\n+\n+# What does it mean when a program exits with `leaked memory in rust main loop (2 objects)' failed, rt/memory_region.cpp:99 2 objects`?\n+\n+This message indicates a memory leak, and is mostly likely to happen on rarely exercised failure paths. Note that failure unwinding is not yet implemented on windows so this is expected. If you see this on Linux or Mac it's a compiler bug; please report it.\n+\n+# Why do gdb backtraces end with the error 'previous frame inner to this frame (corrupt stack?)'?\n+\n+**Short answer** your gdb is too old to understand our hip new stacks. Upgrade to a newer version (7.3.1 is known to work).\n+\n+**Long answer** Rust uses 'spaghetti stacks' (a linked list of stacks) to allow tasks to start very small but recurse arbitrarily deep when necessary. As a result, new frames don't always decrease the stack pointer like gdb expects but instead may jump around the heap to different stack segments. Newer versions of gdb recognize that the special function called __morestack may change the stack pointer to a different stack.\n+\n+# Why did my build create a bunch of zero-length files in my lib directory?\n+\n+This is a normal part of the Rust build process. The build system uses these zero-length files for dependency tracking, as the actual names of the Rust libraries contain hashes that can't be guessed easily by the Makefiles."}, {"sha": "35681f1796d8bce3c01a18e4f2a502c6afdcf3f2", "filename": "doc/full-toc.inc", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f1838ea3e6795487521d4541bbd877d8e0797b8/doc%2Ffull-toc.inc", "raw_url": "https://github.com/rust-lang/rust/raw/1f1838ea3e6795487521d4541bbd877d8e0797b8/doc%2Ffull-toc.inc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ffull-toc.inc?ref=1f1838ea3e6795487521d4541bbd877d8e0797b8", "patch": "@@ -7,4 +7,4 @@\n   #influences blockquote p:last-child {\n     color: #999;\n   }\n-</style>\n\\ No newline at end of file\n+</style>", "previous_filename": "doc/manual.inc"}, {"sha": "3e5f2909a779148eae2a421eb10cdbd4ab007528", "filename": "doc/index.md", "status": "added", "additions": 157, "deletions": 0, "changes": 157, "blob_url": "https://github.com/rust-lang/rust/blob/1f1838ea3e6795487521d4541bbd877d8e0797b8/doc%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/1f1838ea3e6795487521d4541bbd877d8e0797b8/doc%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Findex.md?ref=1f1838ea3e6795487521d4541bbd877d8e0797b8", "patch": "@@ -0,0 +1,157 @@\n+% Rust documentation\n+\n+# Reference docs\n+\n+**Current (0.9)**\n+\n+* [Tutorial](http://doc.rust-lang.org/doc/0.9/tutorial.html)  \n+* Guides\n+    * [borrowed pointers](http://doc.rust-lang.org/doc/0.9/guide-borrowed-ptr.html) \n+    * [conditions](http://doc.rust-lang.org/doc/0.9/guide-conditions.html) \n+    * [containers & iterators](http://doc.rust-lang.org/doc/0.9/guide-container.html) \n+    * [ffi](http://doc.rust-lang.org/doc/0.9/guide-ffi.html) \n+    * [macros](http://doc.rust-lang.org/doc/0.9/guide-macros.html) \n+    * [rustpkg](http://doc.rust-lang.org/doc/0.9/guide-rustpkg.html) \n+    * [tasks](http://doc.rust-lang.org/doc/0.9/guide-tasks.html) \n+    * [testing](http://doc.rust-lang.org/doc/0.9/guide-testing.html)\n+* [Manual](http://doc.rust-lang.org/doc/0.9/rust.html) ([PDF](http://doc.rust-lang.org/doc/0.9/rust.pdf))  \n+* [Standard library](http://doc.rust-lang.org/doc/0.9/std/index.html)  \n+* [Extra library](http://doc.rust-lang.org/doc/0.9/extra/index.html)\n+* [Package manager](http://doc.rust-lang.org/doc/0.9/rustpkg.html)\n+\n+**In-development (git master)**\n+\n+* [Tutorial](http://doc.rust-lang.org/doc/master/tutorial.html) ([PDF](http://doc.rust-lang.org/doc/master/tutorial.pdf))  \n+* Guides\n+    * [borrowed pointers](http://doc.rust-lang.org/doc/master/guide-borrowed-ptr.html)  \n+    * [conditions](http://doc.rust-lang.org/doc/master/guide-conditions.html) \n+    * [containers & iterators](http://doc.rust-lang.org/doc/master/guide-container.html) \n+    * [ffi](http://doc.rust-lang.org/doc/master/guide-ffi.html) \n+    * [macros](http://doc.rust-lang.org/doc/master/guide-macros.html) \n+    * [rustpkg](http://doc.rust-lang.org/doc/master/guide-rustpkg.html) \n+    * [tasks](http://doc.rust-lang.org/doc/master/guide-tasks.html) \n+    * [testing](http://doc.rust-lang.org/doc/master/guide-testing.html)\n+* [Manual](http://doc.rust-lang.org/doc/master/rust.html) ([PDF](http://doc.rust-lang.org/doc/master/rust.pdf))  \n+* [Standard library](http://doc.rust-lang.org/doc/master/std/index.html)  \n+* [Extra library](http://doc.rust-lang.org/doc/master/extra/index.html)\n+* [libgreen](http://static.rust-lang.org/doc/master/green/index.html)\n+* [libnative](http://static.rust-lang.org/doc/master/native/index.html)\n+* [Package manager](http://doc.rust-lang.org/doc/master/rustpkg.html)\n+\n+# FAQs\n+\n+* [Language FAQ][lang-faq]  \n+* [Project FAQ][project-faq]\n+* [Usage FAQ][usage-faq]\n+* [Code cheatsheet][cheatsheet] - \"How do I do X?\"\n+* [HOWTO submit a bug report][bugreport]\n+\n+[lang-faq]: complement-lang-faq.html\n+[project-faq]: complement-project-faq.html\n+[usage-faq]: complement-usage-faq.html\n+[cheatsheet]: complement-cheatsheet.html\n+[bugreport]: complement-bugreport.html\n+\n+# Community\n+\n+\n+  > **Note** that to guard against botnet attacks we occasionally turn on moderation, disallowing\n+  > unregistered users from joining or talking. You may need to [register](https://wiki.mozilla.org/IRC#Register_your_nickname) your nickname. Sorry for the inconvenience.*\n+\n+* IRC\n+    * [#rust on irc.mozilla.org][pound-rust] - Main Rust channel - general discussion\n+    * [#rust-internals on irc.mozilla.org][pound-rust-internals] - Rust compiler and library development\n+    * [#rust-gamedev on irc.mozilla.org][pound-rust-gamedev] - game development in Rust\n+    * [#rust-osdev on irc.mozill.org][pound-rust-osdev] - OS development in Rust\n+    * [#rust on irc.ozinger.org][pound-rust-korea] - Korean Rust community\n+\n+* Mailing list [rust-dev]\n+* Reddit's [r/rust]\n+* User groups\n+    * [Rust Bay Area][rust-bay-area]\n+    * [Rust Korea][rust-korea]\n+    * [Rust Sk\u00e5ne][rust-skane]\n+    * [Rust \u4e2d\u6587\u5708][rust-zh] (on Google+)\n+\n+[pound-rust]: http://chat.mibbit.com/?server=irc.mozilla.org&channel=%23rust\n+[pound-rust-internals]: http://chat.mibbit.com/?server=irc.mozilla.org&channel=%23rust-internals\n+[pound-rust-gamedev]: http://chat.mibbit.com/?server=irc.mozilla.org&channel=%23rust-gamedev\n+[pound-rust-osdev]: http://chat.mibbit.com/?server=irc.mozilla.org&channel=%23rust-osdev\n+[pound-rust-korea]: http://chat.mibbit.com/?server=irc.ozinger.org&channel=%23rust\n+[rust-dev]: https://mail.mozilla.org/listinfo/rust-dev\n+[r/rust]: http://reddit.com/r/rust\n+[rust-bay-area]: http://www.meetup.com/Rust-Bay-Area/\n+[rust-korea]: http://rust-kr.org/\n+[rust-skane]: http://www.meetup.com/rust-skane/\n+[rust-zh]: https://plus.google.com/communities/100629002107624231185/\n+\n+# Specialized documentation\n+\n+[Releases][release-notes] - Links to current and old releases and documentation  \n+[Detailed release notes][detailed-release-notes] - Further explanation of language changes  \n+[Rust for C++ programmers][rust-for-c] - A cheat sheet  \n+[Rusticon][rust-icon] - A glossary of terms commonly used in Rust and Rust tools.  \n+[Unit testing][unit-testing] - Writing tests and running them with the built-in test driver  \n+[Using rustpkg][rustpkg] - Managing packages  \n+[Using rustdoc][rustdoc] - How to extract Markdown and HTML documentation from code  \n+[Package documentation](http://docs.octayn.net/) - Documentation for rust packages  \n+[Continuous integration][ci] - Test your GitHub-hosted packages with Travis CI  \n+[Reading and writing files][doc-rw]\n+[Attributes][doc-attributes] - The role of metadata in Rust code, with descriptions of many applications  \n+[Packages, editors, and other tools][tools]  \n+[Packaging Terminology][doc-terminology] \n+[Crate Hashes][crate-hashes] - How Rust generates crate filenames, versions symbols, and why  \n+[Computer Graphics and Game Development][game-dev] - Libraries and example projects  \n+[Pr&eacute;sentation du langage Rust](http://lea-linux.org/documentations/Rust) - Detailed documentation in French, with examples  \n+[Building for Android][building-android]  \n+[Building for iOS][building-ios]  \n+\n+[release-notes]: https://github.com/mozilla/rust/wiki/Doc-releases\n+[detailed-release-notes]: https://github.com/mozilla/rust/wiki/Doc-detailed-release-notes\n+[rust-for-c]: https://github.com/mozilla/rust/wiki/Rust-for-CXX-programmers\n+[rust-icon]: https://github.com/mozilla/rust/wiki/The-Rusticon\n+[unit-testing]: https://github.com/mozilla/rust/wiki/Doc-unit-testing\n+[rustpkg]: https://github.com/mozilla/rust/wiki/Rustpkg\n+[rustdoc]: https://github.com/mozilla/rust/wiki/Doc-using-rustdoc\n+[ci]: https://github.com/mozilla/rust/wiki/Doc-continuous-integration\n+[doc-rw]: https://github.com/mozilla/rust/wiki/Doc-reading-and-writing-files\n+[doc-attributes]: https://github.com/mozilla/rust/wiki/Doc-attributes\n+[tools]: https://github.com/mozilla/rust/wiki/Doc-packages%2C-editors%2C-and-other-tools\n+[doc-terminology]: https://github.com/mozilla/rust/wiki/Doc-packaging-terminology\n+[crate-hashes]: https://github.com/mozilla/rust/wiki/Doc-crate-hashes\n+[game-dev]: https://github.com/mozilla/rust/wiki/Computer-Graphics-and-Game-Development\n+[building-android]: https://github.com/mozilla/rust/wiki/Doc-building-for-android\n+[building-ios]: https://github.com/mozilla/rust/wiki/Doc-building-for-ios\n+\n+Some Rust classics:\n+\n+* [Pointers in Rust: A Guide](http://words.steveklabnik.com/pointers-in-rust-a-guide)\n+* [A taste of Rust](https://lwn.net/Articles/547145/)\n+* [An overview of memory management in Rust](http://pcwalton.github.com/blog/2013/03/18/an-overview-of-memory-management-in-rust/)\n+* [Which pointer should I use?](http://pcwalton.github.com/blog/2013/03/09/which-pointer-should-i-use/)\n+* [Lifetimes explained](http://maikklein.github.io/2013/08/27/lifetimes-explained/)\n+* [Little things that matter in language design](http://lwn.net/Articles/553131/)\n+* [Operator overloading in Rust](http://maniagnosis.crsr.net/2013/04/operator-overloading-in-rust.html)\n+* [Embedding Rust in Ruby](http://brson.github.com/2013/03/10/embedding-rust-in-ruby/)\n+* [A first parallel program in Rust](http://blog.leahhanson.us/a-first-parallel-program-in-rust.html)\n+* [FizzBuzz revisited](http://composition.al/blog/2013/03/02/fizzbuzz-revisited/)\n+* [Ownership types in Rust, and whether they're worth it](http://tim.dreamwidth.org/1784423.html)\n+* [Reasoning about the heap in Rust](http://johnbender.us/2013/04/30/reasoning-about-the-heap-in-rust)\n+* [The Option Type](http://nickdesaulniers.github.io/blog/2013/05/07/rust-pattern-matching-and-the-option-type/)\n+* [How I got started hacking rustc](http://cmr.github.io/blog/2013/06/23/how-i-got-started-with-rust/)\n+* [Abstraction penalties, stack allocation, and ownership types](http://robert.ocallahan.org/2007/10/abstraction-penalties-stack-allocation_23.html)\n+* [Pr\u00e9sentation de Rust 0.8](http://linuxfr.org/news/presentation-de-rust-0-8) - A very detailed article about Rust 0.8, in French!\n+\n+# Presentations\n+\n+* [John Clements, 10-minute talk (video)](http://www.youtube.com/watch?v=_KgXy7jnwhY) at SoCal PLS on Rust, Macros, and Hygiene. December 2013.\n+* [Felix's Codemesh 2013 slides](http://pnkfelix.github.io/present-rust-codemesh2013/fklock-rust-codemesh2013.pdf)\n+* Geoffroy Couprie's [Scala.IO 2013 slides](http://dev.unhandledexpression.com/slides/rust-scalaio/)\n+* Steve's presentation at RuPy 2013 \"Nobody Knows Rust.\" [slides](http://steveklabnik.github.io/nobody_knows_rust/#/), video to come soon\n+* [Tim's presentation at OS Bridge 2013](http://opensourcebridge.org/sessions/970) - And [slides](http://opensourcebridge.org/wiki/2013/Rust%3A_A_Friendly_Introduction)\n+* [Niko's presentation at Northeastern](http://smallcultfollowing.com/babysteps/blog/2013/07/18/rust-presentation-at-northeastern/) - Slides only\n+* [An I/O system for Rust](https://air.mozilla.org/intern-presentations-reed/) - Eric Reed's intern presentation on I/O\n+* [Types of Types](https://air.mozilla.org/ben-blum-from-the-research-team-presents-types-of-types-in-rust/) - Ben Blum's intern presentation on 'kinds'\n+* [Default methods in Rust](https://air.mozilla.org/intern-presentation-sullivan/) - Michael Sullivan's intern presentation on default methods\n+* [A work stealing runtime for Rust](https://air.mozilla.org/2013-intern-todd/) - Aaron Todd's intern presentation on the Rust scheduler\n+* [Dave Herman's StrangeLoop 2012 talk](http://www.infoq.com/presentations/Rust)"}, {"sha": "194a401395fdb1554c67f95ae0f4a24201f4f6f2", "filename": "doc/rust.css", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1f1838ea3e6795487521d4541bbd877d8e0797b8/doc%2Frust.css", "raw_url": "https://github.com/rust-lang/rust/raw/1f1838ea3e6795487521d4541bbd877d8e0797b8/doc%2Frust.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.css?ref=1f1838ea3e6795487521d4541bbd877d8e0797b8", "patch": "@@ -216,6 +216,7 @@ dd {\n     list-style-type: none;\n     padding-left: 0px;\n }\n+\n /* Only display one level of hierarchy in the TOC */\n #TOC ul ul {\n     display: none;\n@@ -235,6 +236,21 @@ hr {\n     border-top: 1px solid #eeeeee;\n }\n \n+table {\n+    border-collapse: collapse;\n+    border-spacing: 0;\n+}\n+\n+table tr.odd {\n+    background: #eee;\n+}\n+\n+table td,\n+table th {\n+    border: 1px solid #ddd;\n+    padding: 5px;\n+}\n+\n @media print {\n     * {\n         text-shadow: none !important;"}, {"sha": "2f017c77c0ba46ab412d6624e7bb31ca03b97c37", "filename": "doc/tutorial.md", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f1838ea3e6795487521d4541bbd877d8e0797b8/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/1f1838ea3e6795487521d4541bbd877d8e0797b8/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=1f1838ea3e6795487521d4541bbd877d8e0797b8", "patch": "@@ -3275,8 +3275,7 @@ guides on individual topics.\n * [Documenting Rust code][rustdoc]\n * [Testing Rust code][testing]\n \n-There is further documentation on the [wiki], however those tend to be even\n-more out of date than this document.\n+There is further documentation on the [Main Page](index.html).\n \n [borrow]: guide-borrowed-ptr.html\n [tasks]: guide-tasks.html\n@@ -3288,5 +3287,4 @@ more out of date than this document.\n [testing]: guide-testing.html\n [rustdoc]: rustdoc.html\n \n-[wiki]: https://github.com/mozilla/rust/wiki/Docs\n [wiki-packages]: https://github.com/mozilla/rust/wiki/Doc-packages,-editors,-and-other-tools"}, {"sha": "b27c8f2315171a363b36d66fa8764a071e68d7c6", "filename": "mk/docs.mk", "status": "modified", "additions": 72, "deletions": 42, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/1f1838ea3e6795487521d4541bbd877d8e0797b8/mk%2Fdocs.mk", "raw_url": "https://github.com/rust-lang/rust/raw/1f1838ea3e6795487521d4541bbd877d8e0797b8/mk%2Fdocs.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fdocs.mk?ref=1f1838ea3e6795487521d4541bbd877d8e0797b8", "patch": "@@ -15,28 +15,46 @@\n DOCS :=\n CDOCS :=\n DOCS_L10N :=\n+HTML_DEPS :=\n \n BASE_DOC_OPTS := --from=markdown --standalone --toc --number-sections\n-\n HTML_OPTS = $(BASE_DOC_OPTS) \t--to=html5  --section-divs --css=rust.css  \\\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t--include-before-body=doc/version_info.html \\\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t--include-in-header=doc/favicon.inc\n-\n TEX_OPTS = $(BASE_DOC_OPTS) --to=latex\n EPUB_OPTS = $(BASE_DOC_OPTS) --to=epub\n \n+######################################################################\n+# Rust version\n+######################################################################\n+doc/version.md: $(MKFILE_DEPS) $(wildcard $(S)doc/*.*)\n+\t@$(call E, version-stamp: $@)\n+\t$(Q)echo \"$(CFG_VERSION)\" >$@\n+\n+HTML_DEPS += doc/version_info.html\n+doc/version_info.html: version_info.html.template $(MKFILE_DEPS) \\\n+                       $(wildcard $(S)doc/*.*)\n+\t@$(call E, version-info: $@)\n+\tsed -e \"s/VERSION/$(CFG_RELEASE)/; s/SHORT_HASH/$(shell echo \\\n+                    $(CFG_VER_HASH) | head -c 8)/;\\\n+                s/STAMP/$(CFG_VER_HASH)/;\" $< >$@\n+\n+GENERATED += doc/version.md doc/version_info.html\n+\n ######################################################################\n # Docs, from pandoc, rustdoc (which runs pandoc), and node\n ######################################################################\n \n+HTML_DEPS += doc/rust.css\n doc/rust.css: rust.css\n \t@$(call E, cp: $@)\n \t$(Q)cp -a $< $@ 2> /dev/null\n \n-doc/manual.inc: manual.inc\n+doc/full-toc.inc: full-toc.inc\n \t@$(call E, cp: $@)\n \t$(Q)cp -a $< $@ 2> /dev/null\n \n+HTML_DEPS += doc/favicon.inc\n doc/favicon.inc: favicon.inc\n \t@$(call E, cp: $@)\n \t$(Q)cp -a $< $@ 2> /dev/null\n@@ -54,11 +72,10 @@ endif\n ifneq ($(NO_DOCS),1)\n \n DOCS += doc/rust.html\n-doc/rust.html: rust.md doc/version_info.html doc/rust.css doc/manual.inc \\\n-\t\t\t\tdoc/favicon.inc\n+doc/rust.html: rust.md doc/full-toc.inc $(HTML_DEPS) \n \t@$(call E, pandoc: $@)\n \t$(Q)$(CFG_NODE) $(S)doc/prep.js --highlight $< | \\\n-\t$(CFG_PANDOC) $(HTML_OPTS) --include-in-header=doc/manual.inc --output=$@\n+\t$(CFG_PANDOC) $(HTML_OPTS) --include-in-header=doc/full-toc.inc --output=$@\n \n DOCS += doc/rust.tex\n doc/rust.tex: rust.md doc/version.md\n@@ -73,22 +90,19 @@ doc/rust.epub: rust.md doc/version_info.html doc/rust.css\n \t$(CFG_PANDOC) $(EPUB_OPTS) --output=$@\n \n DOCS += doc/rustpkg.html\n-doc/rustpkg.html: rustpkg.md doc/version_info.html doc/rust.css \\\n-\t\t\t\tdoc/favicon.inc\n+doc/rustpkg.html: rustpkg.md $(HTML_DEPS)\n \t@$(call E, pandoc: $@)\n \t$(Q)$(CFG_NODE) $(S)doc/prep.js --highlight $< | \\\n \t$(CFG_PANDOC) $(HTML_OPTS) --output=$@\n \n DOCS += doc/rustdoc.html\n-doc/rustdoc.html: rustdoc.md doc/version_info.html doc/rust.css \\\n-\t\t\t\tdoc/favicon.inc\n+doc/rustdoc.html: rustdoc.md $(HTML_DEPS)\n \t@$(call E, pandoc: $@)\n \t$(Q)$(CFG_NODE) $(S)doc/prep.js --highlight $< | \\\n \t$(CFG_PANDOC) $(HTML_OPTS) --output=$@\n \n DOCS += doc/tutorial.html\n-doc/tutorial.html: tutorial.md doc/version_info.html doc/rust.css \\\n-\t\t\t\tdoc/favicon.inc\n+doc/tutorial.html: tutorial.md $(HTML_DEPS)\n \t@$(call E, pandoc: $@)\n \t$(Q)$(CFG_NODE) $(S)doc/prep.js --highlight $< | \\\n \t$(CFG_PANDOC) $(HTML_OPTS) --output=$@\n@@ -116,60 +130,90 @@ doc/l10n/ja/tutorial.html: doc/l10n/ja/tutorial.md doc/version_info.html doc/rus\n            --include-before-body=doc/version_info.html \\\n            --output=$@\n \n+# Complementary documentation\n+#\n+DOCS += doc/index.html\n+doc/index.html: index.md $(HTML_DEPS)\n+\t@$(call E, pandoc: $@)\n+\t$(Q)$(CFG_NODE) $(S)doc/prep.js --highlight $< | \\\n+\t$(CFG_PANDOC) $(HTML_OPTS) --output=$@\n+\n+DOCS += doc/complement-lang-faq.html\n+doc/complement-lang-faq.html: $(S)doc/complement-lang-faq.md doc/full-toc.inc $(HTML_DEPS)\n+\t@$(call E, pandoc: $@)\n+\t$(Q)$(CFG_NODE) $(S)doc/prep.js --highlight $< | \\\n+\t$(CFG_PANDOC) $(HTML_OPTS) --include-in-header=doc/full-toc.inc --output=$@\n+\n+DOCS += doc/complement-project-faq.html\n+doc/complement-project-faq.html: $(S)doc/complement-project-faq.md $(HTML_DEPS)\n+\t@$(call E, pandoc: $@)\n+\t$(Q)$(CFG_NODE) $(S)doc/prep.js --highlight $< | \\\n+\t$(CFG_PANDOC) $(HTML_OPTS) --output=$@\n+\n+DOCS += doc/complement-usage-faq.html\n+doc/complement-usage-faq.html: $(S)doc/complement-usage-faq.md $(HTML_DEPS)\n+\t@$(call E, pandoc: $@)\n+\t$(Q)$(CFG_NODE) $(S)doc/prep.js --highlight $< | \\\n+\t$(CFG_PANDOC) $(HTML_OPTS) --output=$@\n+\n+DOCS += doc/complement-cheatsheet.html\n+doc/complement-cheatsheet.html: $(S)doc/complement-cheatsheet.md doc/full-toc.inc $(HTML_DEPS)\n+\t@$(call E, pandoc: $@)\n+\t$(Q)$(CFG_NODE) $(S)doc/prep.js --highlight $< | \\\n+\t$(CFG_PANDOC) $(HTML_OPTS) --include-in-header=doc/full-toc.inc --output=$@\n+\n+DOCS += doc/complement-bugreport.html\n+doc/complement-bugreport.html: $(S)doc/complement-bugreport.md $(HTML_DEPS)\n+\t@$(call E, pandoc: $@)\n+\t$(Q)$(CFG_NODE) $(S)doc/prep.js --highlight $< | \\\n+\t$(CFG_PANDOC) $(HTML_OPTS) --output=$@\n+\n # Guides\n \n DOCS += doc/guide-macros.html\n-doc/guide-macros.html: $(S)doc/guide-macros.md doc/version_info.html doc/rust.css \\\n-\t\t\t\tdoc/favicon.inc\n+doc/guide-macros.html: $(S)doc/guide-macros.md $(HTML_DEPS)\n \t@$(call E, pandoc: $@)\n \t$(Q)$(CFG_NODE) $(S)doc/prep.js --highlight $< | \\\n \t$(CFG_PANDOC) $(HTML_OPTS) --output=$@\n \n DOCS += doc/guide-container.html\n-doc/guide-container.html: $(S)doc/guide-container.md doc/version_info.html doc/rust.css \\\n-\t\t\t\tdoc/favicon.inc\n+doc/guide-container.html: $(S)doc/guide-container.md $(HTML_DEPS)\n \t@$(call E, pandoc: $@)\n \t$(Q)$(CFG_NODE) $(S)doc/prep.js --highlight $< | \\\n \t$(CFG_PANDOC) $(HTML_OPTS) --output=$@\n \n DOCS += doc/guide-ffi.html\n-doc/guide-ffi.html: $(S)doc/guide-ffi.md doc/version_info.html doc/rust.css \\\n-\t\t\t\tdoc/favicon.inc\n+doc/guide-ffi.html: $(S)doc/guide-ffi.md $(HTML_DEPS)\n \t@$(call E, pandoc: $@)\n \t$(Q)$(CFG_NODE) $(S)doc/prep.js --highlight $< | \\\n \t$(CFG_PANDOC) $(HTML_OPTS) --output=$@\n \n DOCS += doc/guide-testing.html\n-doc/guide-testing.html: $(S)doc/guide-testing.md doc/version_info.html doc/rust.css \\\n-\t\t\t\tdoc/favicon.inc\n+doc/guide-testing.html: $(S)doc/guide-testing.md $(HTML_DEPS)\n \t@$(call E, pandoc: $@)\n \t$(Q)$(CFG_NODE) $(S)doc/prep.js --highlight $< | \\\n \t$(CFG_PANDOC) $(HTML_OPTS) --output=$@\n \n DOCS += doc/guide-borrowed-ptr.html\n-doc/guide-borrowed-ptr.html: $(S)doc/guide-borrowed-ptr.md doc/version_info.html doc/rust.css \\\n-\t\t\t\tdoc/favicon.inc\n+doc/guide-borrowed-ptr.html: $(S)doc/guide-borrowed-ptr.md $(HTML_DEPS)\n \t@$(call E, pandoc: $@)\n \t$(Q)$(CFG_NODE) $(S)doc/prep.js --highlight $< | \\\n \t$(CFG_PANDOC) $(HTML_OPTS) --output=$@\n \n DOCS += doc/guide-tasks.html\n-doc/guide-tasks.html: $(S)doc/guide-tasks.md doc/version_info.html doc/rust.css \\\n-\t\t\t\tdoc/favicon.inc\n+doc/guide-tasks.html: $(S)doc/guide-tasks.md $(HTML_DEPS)\n \t@$(call E, pandoc: $@)\n \t$(Q)$(CFG_NODE) $(S)doc/prep.js --highlight $< | \\\n \t$(CFG_PANDOC) $(HTML_OPTS) --output=$@\n \n DOCS += doc/guide-conditions.html\n-doc/guide-conditions.html: $(S)doc/guide-conditions.md doc/version_info.html doc/rust.css \\\n-\t\t\t\tdoc/favicon.inc\n+doc/guide-conditions.html: $(S)doc/guide-conditions.md $(HTML_DEPS)\n \t@$(call E, pandoc: $@)\n \t$(Q)$(CFG_NODE) $(S)doc/prep.js --highlight $< | \\\n \t$(CFG_PANDOC) $(HTML_OPTS) --output=$@\n \n DOCS += doc/guide-rustpkg.html\n-doc/guide-rustpkg.html: $(S)doc/guide-rustpkg.md doc/version_info.html doc/rust.css \\\n-\t\t\t\tdoc/favicon.inc\n+doc/guide-rustpkg.html: $(S)doc/guide-rustpkg.md $(HTML_DEPS)\n \t@$(call E, pandoc: $@)\n \t$(Q)$(CFG_NODE) $(S)doc/prep.js --highlight $< | \\\n \t$(CFG_PANDOC) $(HTML_OPTS) --output=$@\n@@ -268,20 +312,6 @@ ifdef CFG_DISABLE_DOCS\n   DOCS :=\n endif\n \n-\n-doc/version.md: $(MKFILE_DEPS) $(wildcard $(S)doc/*.*)\n-\t@$(call E, version-stamp: $@)\n-\t$(Q)echo \"$(CFG_VERSION)\" >$@\n-\n-doc/version_info.html: version_info.html.template $(MKFILE_DEPS) \\\n-                       $(wildcard $(S)doc/*.*)\n-\t@$(call E, version-info: $@)\n-\tsed -e \"s/VERSION/$(CFG_RELEASE)/; s/SHORT_HASH/$(shell echo \\\n-                    $(CFG_VER_HASH) | head -c 8)/;\\\n-                s/STAMP/$(CFG_VER_HASH)/;\" $< >$@\n-\n-GENERATED += doc/version.md doc/version_info.html\n-\n docs: $(DOCS)\n compiler-docs: $(CDOCS)\n "}]}