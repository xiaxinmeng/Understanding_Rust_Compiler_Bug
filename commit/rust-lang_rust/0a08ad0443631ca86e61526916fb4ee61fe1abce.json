{"sha": "0a08ad0443631ca86e61526916fb4ee61fe1abce", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhMDhhZDA0NDM2MzFjYTg2ZTYxNTI2OTE2ZmI0ZWU2MWZlMWFiY2U=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2017-06-28T23:03:35Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2017-07-22T18:38:16Z"}, "message": "Rename {NonZero,Shared,Unique}::new to new_unchecked", "tree": {"sha": "c8dd36ae38044adabc45b83e84d08333eb118dd7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c8dd36ae38044adabc45b83e84d08333eb118dd7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a08ad0443631ca86e61526916fb4ee61fe1abce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a08ad0443631ca86e61526916fb4ee61fe1abce", "html_url": "https://github.com/rust-lang/rust/commit/0a08ad0443631ca86e61526916fb4ee61fe1abce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a08ad0443631ca86e61526916fb4ee61fe1abce/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9af03a22279b62ded4c7ea897d5ac3a9b54728c", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9af03a22279b62ded4c7ea897d5ac3a9b54728c", "html_url": "https://github.com/rust-lang/rust/commit/e9af03a22279b62ded4c7ea897d5ac3a9b54728c"}], "stats": {"total": 94, "additions": 47, "deletions": 47}, "files": [{"sha": "f8fd6710399a1a557155cb5be4922fe6a6f694c0", "filename": "src/doc/nomicon", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon?ref=0a08ad0443631ca86e61526916fb4ee61fe1abce", "patch": "@@ -1 +1 @@\n-Subproject commit 81134a4dff811403b3b2f349b0c59a819f0fe0c1\n+Subproject commit f8fd6710399a1a557155cb5be4922fe6a6f694c0"}, {"sha": "efc59d2cbc86f9a586ccadcf8e78038b3c50fdca", "filename": "src/liballoc/allocator.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0a08ad0443631ca86e61526916fb4ee61fe1abce/src%2Fliballoc%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a08ad0443631ca86e61526916fb4ee61fe1abce/src%2Fliballoc%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fallocator.rs?ref=0a08ad0443631ca86e61526916fb4ee61fe1abce", "patch": "@@ -892,7 +892,7 @@ pub unsafe trait Alloc {\n     {\n         let k = Layout::new::<T>();\n         if k.size() > 0 {\n-            unsafe { self.alloc(k).map(|p| Unique::new(p as *mut T)) }\n+            unsafe { self.alloc(k).map(|p| Unique::new_unchecked(p as *mut T)) }\n         } else {\n             Err(AllocErr::invalid_input(\"zero-sized type invalid for alloc_one\"))\n         }\n@@ -963,7 +963,7 @@ pub unsafe trait Alloc {\n                 unsafe {\n                     self.alloc(layout.clone())\n                         .map(|p| {\n-                            Unique::new(p as *mut T)\n+                            Unique::new_unchecked(p as *mut T)\n                         })\n                 }\n             }\n@@ -1012,7 +1012,7 @@ pub unsafe trait Alloc {\n         match (Layout::array::<T>(n_old), Layout::array::<T>(n_new), ptr.as_ptr()) {\n             (Some(ref k_old), Some(ref k_new), ptr) if k_old.size() > 0 && k_new.size() > 0 => {\n                 self.realloc(ptr as *mut u8, k_old.clone(), k_new.clone())\n-                    .map(|p|Unique::new(p as *mut T))\n+                    .map(|p|Unique::new_unchecked(p as *mut T))\n             }\n             _ => {\n                 Err(AllocErr::invalid_input(\"invalid layout for realloc_array\"))"}, {"sha": "cc792c9f83f798110f864ef6f67e514bc9a7e231", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0a08ad0443631ca86e61526916fb4ee61fe1abce/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a08ad0443631ca86e61526916fb4ee61fe1abce/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=0a08ad0443631ca86e61526916fb4ee61fe1abce", "patch": "@@ -280,7 +280,7 @@ impl<T> Arc<T> {\n             weak: atomic::AtomicUsize::new(1),\n             data: data,\n         };\n-        Arc { ptr: unsafe { Shared::new(Box::into_raw(x)) } }\n+        Arc { ptr: unsafe { Shared::new_unchecked(Box::into_raw(x)) } }\n     }\n \n     /// Returns the contained value, if the `Arc` has exactly one strong reference.\n@@ -382,7 +382,7 @@ impl<T> Arc<T> {\n         // `data` field from the pointer.\n         let ptr = (ptr as *const u8).offset(-offset_of!(ArcInner<T>, data));\n         Arc {\n-            ptr: Shared::new(ptr as *mut u8 as *mut _),\n+            ptr: Shared::new_unchecked(ptr as *mut u8 as *mut _),\n         }\n     }\n }\n@@ -842,7 +842,7 @@ impl<T> Weak<T> {\n     pub fn new() -> Weak<T> {\n         unsafe {\n             Weak {\n-                ptr: Shared::new(Box::into_raw(box ArcInner {\n+                ptr: Shared::new_unchecked(Box::into_raw(box ArcInner {\n                     strong: atomic::AtomicUsize::new(0),\n                     weak: atomic::AtomicUsize::new(1),\n                     data: uninitialized(),"}, {"sha": "0a752702b1213d8db26e464e176746e03e6b2acf", "filename": "src/liballoc/btree/node.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0a08ad0443631ca86e61526916fb4ee61fe1abce/src%2Fliballoc%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a08ad0443631ca86e61526916fb4ee61fe1abce/src%2Fliballoc%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fbtree%2Fnode.rs?ref=0a08ad0443631ca86e61526916fb4ee61fe1abce", "patch": "@@ -141,23 +141,23 @@ struct BoxedNode<K, V> {\n impl<K, V> BoxedNode<K, V> {\n     fn from_leaf(node: Box<LeafNode<K, V>>) -> Self {\n         unsafe {\n-            BoxedNode { ptr: Unique::new(Box::into_raw(node)) }\n+            BoxedNode { ptr: Unique::new_unchecked(Box::into_raw(node)) }\n         }\n     }\n \n     fn from_internal(node: Box<InternalNode<K, V>>) -> Self {\n         unsafe {\n-            BoxedNode { ptr: Unique::new(Box::into_raw(node) as *mut LeafNode<K, V>) }\n+            BoxedNode { ptr: Unique::new_unchecked(Box::into_raw(node) as *mut LeafNode<K, V>) }\n         }\n     }\n \n     unsafe fn from_ptr(ptr: NonZero<*const LeafNode<K, V>>) -> Self {\n-        BoxedNode { ptr: Unique::new(ptr.get() as *mut LeafNode<K, V>) }\n+        BoxedNode { ptr: Unique::new_unchecked(ptr.get() as *mut LeafNode<K, V>) }\n     }\n \n     fn as_ptr(&self) -> NonZero<*const LeafNode<K, V>> {\n         unsafe {\n-            NonZero::new(self.ptr.as_ptr())\n+            NonZero::new_unchecked(self.ptr.as_ptr())\n         }\n     }\n }\n@@ -391,7 +391,7 @@ impl<BorrowType, K, V, Type> NodeRef<BorrowType, K, V, Type> {\n                 node: NodeRef {\n                     height: self.height + 1,\n                     node: unsafe {\n-                        NonZero::new(self.as_leaf().parent as *mut LeafNode<K, V>)\n+                        NonZero::new_unchecked(self.as_leaf().parent as *mut LeafNode<K, V>)\n                     },\n                     root: self.root,\n                     _marker: PhantomData"}, {"sha": "08d6fac3849ba117ebe321f1bae34c5511042330", "filename": "src/liballoc/linked_list.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0a08ad0443631ca86e61526916fb4ee61fe1abce/src%2Fliballoc%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a08ad0443631ca86e61526916fb4ee61fe1abce/src%2Fliballoc%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flinked_list.rs?ref=0a08ad0443631ca86e61526916fb4ee61fe1abce", "patch": "@@ -157,7 +157,7 @@ impl<T> LinkedList<T> {\n         unsafe {\n             node.next = self.head;\n             node.prev = None;\n-            let node = Some(Shared::new(Box::into_raw(node)));\n+            let node = Some(Shared::new_unchecked(Box::into_raw(node)));\n \n             match self.head {\n                 None => self.tail = node,\n@@ -192,7 +192,7 @@ impl<T> LinkedList<T> {\n         unsafe {\n             node.next = None;\n             node.prev = self.tail;\n-            let node = Some(Shared::new(Box::into_raw(node)));\n+            let node = Some(Shared::new_unchecked(Box::into_raw(node)));\n \n             match self.tail {\n                 None => self.head = node,\n@@ -921,7 +921,7 @@ impl<'a, T> IterMut<'a, T> {\n                     Some(prev) => prev,\n                 };\n \n-                let node = Some(Shared::new(Box::into_raw(box Node {\n+                let node = Some(Shared::new_unchecked(Box::into_raw(box Node {\n                     next: Some(head),\n                     prev: Some(prev),\n                     element: element,"}, {"sha": "ca55831220da6ba72530d9ffa7499b409a4c6c7f", "filename": "src/liballoc/raw_vec.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0a08ad0443631ca86e61526916fb4ee61fe1abce/src%2Fliballoc%2Fraw_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a08ad0443631ca86e61526916fb4ee61fe1abce/src%2Fliballoc%2Fraw_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fraw_vec.rs?ref=0a08ad0443631ca86e61526916fb4ee61fe1abce", "patch": "@@ -104,7 +104,7 @@ impl<T, A: Alloc> RawVec<T, A> {\n             };\n \n             RawVec {\n-                ptr: Unique::new(ptr as *mut _),\n+                ptr: Unique::new_unchecked(ptr as *mut _),\n                 cap: cap,\n                 a: a,\n             }\n@@ -159,7 +159,7 @@ impl<T, A: Alloc> RawVec<T, A> {\n     /// If the ptr and capacity come from a RawVec created via `a`, then this is guaranteed.\n     pub unsafe fn from_raw_parts_in(ptr: *mut T, cap: usize, a: A) -> Self {\n         RawVec {\n-            ptr: Unique::new(ptr),\n+            ptr: Unique::new_unchecked(ptr),\n             cap: cap,\n             a: a,\n         }\n@@ -176,7 +176,7 @@ impl<T> RawVec<T, Heap> {\n     /// If the ptr and capacity come from a RawVec, then this is guaranteed.\n     pub unsafe fn from_raw_parts(ptr: *mut T, cap: usize) -> Self {\n         RawVec {\n-            ptr: Unique::new(ptr),\n+            ptr: Unique::new_unchecked(ptr),\n             cap: cap,\n             a: Heap,\n         }"}, {"sha": "6ff6b6b037256d66fc4986f5cd9674a5d226e9f7", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0a08ad0443631ca86e61526916fb4ee61fe1abce/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a08ad0443631ca86e61526916fb4ee61fe1abce/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=0a08ad0443631ca86e61526916fb4ee61fe1abce", "patch": "@@ -309,7 +309,7 @@ impl<T> Rc<T> {\n                 // pointers, which ensures that the weak destructor never frees\n                 // the allocation while the strong destructor is running, even\n                 // if the weak pointer is stored inside the strong one.\n-                ptr: Shared::new(Box::into_raw(box RcBox {\n+                ptr: Shared::new_unchecked(Box::into_raw(box RcBox {\n                     strong: Cell::new(1),\n                     weak: Cell::new(1),\n                     value: value,\n@@ -418,7 +418,7 @@ impl<T> Rc<T> {\n \n         let ptr = (ptr as *const u8).offset(-offset_of!(RcBox<T>, value));\n         Rc {\n-            ptr: Shared::new(ptr as *mut u8 as *mut _)\n+            ptr: Shared::new_unchecked(ptr as *mut u8 as *mut _)\n         }\n     }\n }\n@@ -443,7 +443,7 @@ impl Rc<str> {\n             // Combine the allocation address and the string length into a fat pointer to `RcBox`.\n             let rcbox_ptr: *mut RcBox<str> = mem::transmute([ptr as usize, value.len()]);\n             assert!(aligned_len * size_of::<usize>() == size_of_val(&*rcbox_ptr));\n-            Rc { ptr: Shared::new(rcbox_ptr) }\n+            Rc { ptr: Shared::new_unchecked(rcbox_ptr) }\n         }\n     }\n }\n@@ -476,7 +476,7 @@ impl<T> Rc<[T]> {\n             // Free the original allocation without freeing its (moved) contents.\n             box_free(Box::into_raw(value));\n \n-            Rc { ptr: Shared::new(ptr as *mut _) }\n+            Rc { ptr: Shared::new_unchecked(ptr as *mut _) }\n         }\n     }\n }\n@@ -1016,7 +1016,7 @@ impl<T> Weak<T> {\n     pub fn new() -> Weak<T> {\n         unsafe {\n             Weak {\n-                ptr: Shared::new(Box::into_raw(box RcBox {\n+                ptr: Shared::new_unchecked(Box::into_raw(box RcBox {\n                     strong: Cell::new(0),\n                     weak: Cell::new(1),\n                     value: uninitialized(),"}, {"sha": "bc1521c4069671764ad3d2eef7f8e83293c5d5c2", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a08ad0443631ca86e61526916fb4ee61fe1abce/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a08ad0443631ca86e61526916fb4ee61fe1abce/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=0a08ad0443631ca86e61526916fb4ee61fe1abce", "patch": "@@ -1126,7 +1126,7 @@ impl<T> Vec<T> {\n                 tail_start: end,\n                 tail_len: len - end,\n                 iter: range_slice.iter(),\n-                vec: Shared::new(self as *mut _),\n+                vec: Shared::new_unchecked(self as *mut _),\n             }\n         }\n     }\n@@ -1727,7 +1727,7 @@ impl<T> IntoIterator for Vec<T> {\n             let cap = self.buf.cap();\n             mem::forget(self);\n             IntoIter {\n-                buf: Shared::new(begin),\n+                buf: Shared::new_unchecked(begin),\n                 cap: cap,\n                 ptr: begin,\n                 end: end,"}, {"sha": "a99b7bbe0539dd4be9758a4d7a04de7d79d76954", "filename": "src/liballoc/vec_deque.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a08ad0443631ca86e61526916fb4ee61fe1abce/src%2Fliballoc%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a08ad0443631ca86e61526916fb4ee61fe1abce/src%2Fliballoc%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec_deque.rs?ref=0a08ad0443631ca86e61526916fb4ee61fe1abce", "patch": "@@ -893,7 +893,7 @@ impl<T> VecDeque<T> {\n         self.head = drain_tail;\n \n         Drain {\n-            deque: unsafe { Shared::new(self as *mut _) },\n+            deque: unsafe { Shared::new_unchecked(self as *mut _) },\n             after_tail: drain_head,\n             after_head: head,\n             iter: Iter {"}, {"sha": "6acdcad8763919a34ee01befc43f8d42e3167275", "filename": "src/libcore/nonzero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a08ad0443631ca86e61526916fb4ee61fe1abce/src%2Flibcore%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a08ad0443631ca86e61526916fb4ee61fe1abce/src%2Flibcore%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnonzero.rs?ref=0a08ad0443631ca86e61526916fb4ee61fe1abce", "patch": "@@ -69,7 +69,7 @@ impl<T: Zeroable> NonZero<T> {\n     /// Creates an instance of NonZero with the provided value.\n     /// You must indeed ensure that the value is actually \"non-zero\".\n     #[inline]\n-    pub const unsafe fn new(inner: T) -> Self {\n+    pub const unsafe fn new_unchecked(inner: T) -> Self {\n         NonZero(inner)\n     }\n "}, {"sha": "5ece63e23b11d0cd70524dee62d36370992b38ff", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0a08ad0443631ca86e61526916fb4ee61fe1abce/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a08ad0443631ca86e61526916fb4ee61fe1abce/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=0a08ad0443631ca86e61526916fb4ee61fe1abce", "patch": "@@ -1098,7 +1098,7 @@ impl<T: Sized> Unique<T> {\n     pub fn empty() -> Self {\n         unsafe {\n             let ptr = mem::align_of::<T>() as *mut T;\n-            Unique::new(ptr)\n+            Unique::new_unchecked(ptr)\n         }\n     }\n }\n@@ -1110,8 +1110,8 @@ impl<T: ?Sized> Unique<T> {\n     /// # Safety\n     ///\n     /// `ptr` must be non-null.\n-    pub const unsafe fn new(ptr: *mut T) -> Self {\n-        Unique { pointer: NonZero::new(ptr), _marker: PhantomData }\n+    pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {\n+        Unique { pointer: NonZero::new_unchecked(ptr), _marker: PhantomData }\n     }\n \n     /// Creates a new `Unique` if `ptr` is non-null.\n@@ -1217,7 +1217,7 @@ impl<T: Sized> Shared<T> {\n     pub fn empty() -> Self {\n         unsafe {\n             let ptr = mem::align_of::<T>() as *mut T;\n-            Shared::new(ptr)\n+            Shared::new_unchecked(ptr)\n         }\n     }\n }\n@@ -1229,8 +1229,8 @@ impl<T: ?Sized> Shared<T> {\n     /// # Safety\n     ///\n     /// `ptr` must be non-null.\n-    pub const unsafe fn new(ptr: *mut T) -> Self {\n-        Shared { pointer: NonZero::new(ptr), _marker: PhantomData }\n+    pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {\n+        Shared { pointer: NonZero::new_unchecked(ptr), _marker: PhantomData }\n     }\n \n     /// Creates a new `Shared` if `ptr` is non-null."}, {"sha": "a795dd575043dd883d2f1e00576eca63cecbc570", "filename": "src/libcore/tests/nonzero.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0a08ad0443631ca86e61526916fb4ee61fe1abce/src%2Flibcore%2Ftests%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a08ad0443631ca86e61526916fb4ee61fe1abce/src%2Flibcore%2Ftests%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fnonzero.rs?ref=0a08ad0443631ca86e61526916fb4ee61fe1abce", "patch": "@@ -16,7 +16,7 @@ use std::mem::size_of;\n #[test]\n fn test_create_nonzero_instance() {\n     let _a = unsafe {\n-        NonZero::new(21)\n+        NonZero::new_unchecked(21)\n     };\n }\n \n@@ -28,14 +28,14 @@ fn test_size_nonzero_in_option() {\n #[test]\n fn test_match_on_nonzero_option() {\n     let a = Some(unsafe {\n-        NonZero::new(42)\n+        NonZero::new_unchecked(42)\n     });\n     match a {\n         Some(val) => assert_eq!(val.get(), 42),\n         None => panic!(\"unexpected None while matching on Some(NonZero(_))\")\n     }\n \n-    match unsafe { Some(NonZero::new(43)) } {\n+    match unsafe { Some(NonZero::new_unchecked(43)) } {\n         Some(val) => assert_eq!(val.get(), 43),\n         None => panic!(\"unexpected None while matching on Some(NonZero(_))\")\n     }"}, {"sha": "c2d53840f8f570e572c6fc48ba5114bb4fb577b8", "filename": "src/libcore/tests/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a08ad0443631ca86e61526916fb4ee61fe1abce/src%2Flibcore%2Ftests%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a08ad0443631ca86e61526916fb4ee61fe1abce/src%2Flibcore%2Ftests%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fptr.rs?ref=0a08ad0443631ca86e61526916fb4ee61fe1abce", "patch": "@@ -167,7 +167,7 @@ fn test_set_memory() {\n #[test]\n fn test_unsized_unique() {\n     let xs: &[i32] = &[1, 2, 3];\n-    let ptr = unsafe { Unique::new(xs as *const [i32] as *mut [i32]) };\n+    let ptr = unsafe { Unique::new_unchecked(xs as *const [i32] as *mut [i32]) };\n     let ys = unsafe { ptr.as_ref() };\n     let zs: &[i32] = &[1, 2, 3];\n     assert!(ys == zs);"}, {"sha": "e2881ac9b798e81ccf56db8b9aac588cc2608eb9", "filename": "src/librustc/ty/subst.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a08ad0443631ca86e61526916fb4ee61fe1abce/src%2Flibrustc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a08ad0443631ca86e61526916fb4ee61fe1abce/src%2Flibrustc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsubst.rs?ref=0a08ad0443631ca86e61526916fb4ee61fe1abce", "patch": "@@ -47,7 +47,7 @@ impl<'tcx> From<Ty<'tcx>> for Kind<'tcx> {\n         let ptr = ty as *const _ as usize;\n         Kind {\n             ptr: unsafe {\n-                NonZero::new(ptr | TYPE_TAG)\n+                NonZero::new_unchecked(ptr | TYPE_TAG)\n             },\n             marker: PhantomData\n         }\n@@ -62,7 +62,7 @@ impl<'tcx> From<ty::Region<'tcx>> for Kind<'tcx> {\n         let ptr = r as *const _ as usize;\n         Kind {\n             ptr: unsafe {\n-                NonZero::new(ptr | REGION_TAG)\n+                NonZero::new_unchecked(ptr | REGION_TAG)\n             },\n             marker: PhantomData\n         }"}, {"sha": "de028f61090463a0fe40cc5d5a64757b061f2e2c", "filename": "src/librustc_data_structures/array_vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a08ad0443631ca86e61526916fb4ee61fe1abce/src%2Flibrustc_data_structures%2Farray_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a08ad0443631ca86e61526916fb4ee61fe1abce/src%2Flibrustc_data_structures%2Farray_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Farray_vec.rs?ref=0a08ad0443631ca86e61526916fb4ee61fe1abce", "patch": "@@ -146,7 +146,7 @@ impl<A: Array> ArrayVec<A> {\n                 tail_start: end,\n                 tail_len: len - end,\n                 iter: range_slice.iter(),\n-                array_vec: Shared::new(self as *mut _),\n+                array_vec: Shared::new_unchecked(self as *mut _),\n             }\n         }\n     }"}, {"sha": "9fa6045146dcc108f8470df105c1c1c203cd1788", "filename": "src/librustc_data_structures/obligation_forest/node_index.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a08ad0443631ca86e61526916fb4ee61fe1abce/src%2Flibrustc_data_structures%2Fobligation_forest%2Fnode_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a08ad0443631ca86e61526916fb4ee61fe1abce/src%2Flibrustc_data_structures%2Fobligation_forest%2Fnode_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fobligation_forest%2Fnode_index.rs?ref=0a08ad0443631ca86e61526916fb4ee61fe1abce", "patch": "@@ -19,7 +19,7 @@ pub struct NodeIndex {\n impl NodeIndex {\n     pub fn new(value: usize) -> NodeIndex {\n         assert!(value < (u32::MAX as usize));\n-        unsafe { NodeIndex { index: NonZero::new((value as u32) + 1) } }\n+        unsafe { NodeIndex { index: NonZero::new_unchecked((value as u32) + 1) } }\n     }\n \n     pub fn get(self) -> usize {"}, {"sha": "63c204fbdcda22e33232e35061e3009e114d8490", "filename": "src/librustc_mir/dataflow/move_paths/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a08ad0443631ca86e61526916fb4ee61fe1abce/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a08ad0443631ca86e61526916fb4ee61fe1abce/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs?ref=0a08ad0443631ca86e61526916fb4ee61fe1abce", "patch": "@@ -42,7 +42,7 @@ pub(crate) mod indexes {\n \n             impl Idx for $Index {\n                 fn new(idx: usize) -> Self {\n-                    unsafe { $Index(NonZero::new(idx + 1)) }\n+                    unsafe { $Index(NonZero::new_unchecked(idx + 1)) }\n                 }\n                 fn index(self) -> usize {\n                     self.0.get() - 1"}, {"sha": "f3aec589e7d2744584b53124afd8fbaf5e8143c0", "filename": "src/libstd/collections/hash/table.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0a08ad0443631ca86e61526916fb4ee61fe1abce/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a08ad0443631ca86e61526916fb4ee61fe1abce/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs?ref=0a08ad0443631ca86e61526916fb4ee61fe1abce", "patch": "@@ -44,7 +44,7 @@ impl TaggedHashUintPtr {\n     #[inline]\n     unsafe fn new(ptr: *mut HashUint) -> Self {\n         debug_assert!(ptr as usize & 1 == 0 || ptr as usize == EMPTY as usize);\n-        TaggedHashUintPtr(Unique::new(ptr))\n+        TaggedHashUintPtr(Unique::new_unchecked(ptr))\n     }\n \n     #[inline]\n@@ -56,7 +56,7 @@ impl TaggedHashUintPtr {\n             } else {\n                 usize_ptr &= !1;\n             }\n-            self.0 = Unique::new(usize_ptr as *mut HashUint)\n+            self.0 = Unique::new_unchecked(usize_ptr as *mut HashUint)\n         }\n     }\n \n@@ -877,7 +877,7 @@ impl<K, V> RawTable<K, V> {\n                 elems_left: elems_left,\n                 marker: marker::PhantomData,\n             },\n-            table: unsafe { Shared::new(self) },\n+            table: unsafe { Shared::new_unchecked(self) },\n             marker: marker::PhantomData,\n         }\n     }"}, {"sha": "6c4c425cb8e0212ae8cc427f8c36904074aff47c", "filename": "src/test/run-pass/issue-23433.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a08ad0443631ca86e61526916fb4ee61fe1abce/src%2Ftest%2Frun-pass%2Fissue-23433.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a08ad0443631ca86e61526916fb4ee61fe1abce/src%2Ftest%2Frun-pass%2Fissue-23433.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-23433.rs?ref=0a08ad0443631ca86e61526916fb4ee61fe1abce", "patch": "@@ -16,7 +16,7 @@ use std::ptr::Unique;\n \n fn main() {\n     let mut a = [0u8; 5];\n-    let b: Option<Unique<[u8]>> = unsafe { Some(Unique::new(&mut a)) };\n+    let b: Option<Unique<[u8]>> = unsafe { Some(Unique::new_unchecked(&mut a)) };\n     match b {\n         Some(_) => println!(\"Got `Some`\"),\n         None => panic!(\"Unexpected `None`\"),"}, {"sha": "df5c53daf7e1e8f1fc7bd5a7b0f8016e750f8295", "filename": "src/test/ui/print_type_sizes/nullable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a08ad0443631ca86e61526916fb4ee61fe1abce/src%2Ftest%2Fui%2Fprint_type_sizes%2Fnullable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a08ad0443631ca86e61526916fb4ee61fe1abce/src%2Ftest%2Fui%2Fprint_type_sizes%2Fnullable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fnullable.rs?ref=0a08ad0443631ca86e61526916fb4ee61fe1abce", "patch": "@@ -57,7 +57,7 @@ pub struct NestedNonZero<T: Zeroable> {\n impl<T: Zeroable+Default> Default for NestedNonZero<T> {\n     fn default() -> Self {\n         unsafe {\n-            NestedNonZero { pre: 0, val: NonZero::new(Default::default()), post: 0 }\n+            NestedNonZero { pre: 0, val: NonZero::new_unchecked(Default::default()), post: 0 }\n         }\n     }\n }"}]}