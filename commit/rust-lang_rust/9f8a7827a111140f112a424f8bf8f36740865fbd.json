{"sha": "9f8a7827a111140f112a424f8bf8f36740865fbd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmOGE3ODI3YTExMTE0MGYxMTJhNDI0ZjhiZjhmMzY3NDA4NjVmYmQ=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2020-09-10T19:20:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-10T19:20:02Z"}, "message": "Rollup merge of #76524 - davidtwco:issue-76077-inaccessible-private-fields, r=estebank\n\ntypeck: don't suggest inaccessible private fields\n\nFixes #76077.\n\nThis PR adjusts the missing field diagnostic logic in typeck so that when none of the missing fields in a struct expr are accessible then the error is less confusing.\n\nr? @estebank", "tree": {"sha": "33c93968ad3f60e8474e2993ce0c7a81cf3f004c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/33c93968ad3f60e8474e2993ce0c7a81cf3f004c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f8a7827a111140f112a424f8bf8f36740865fbd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfWnxjCRBK7hj4Ov3rIwAAdHIIALAvTxQRRI04x1IseuPjsFi7\nSXYjTkZPtT2LqmV0HAQ08UCwZdktkrYLc3L1PxQfYHqObBnoDlqIutvi7Wycs5DA\npwLlZ9BkTzN+Edfpal4oayy482g3mOmZBBeMdqufY9+pYJP5L1LTo5MMQvnHayGR\n2XCFGU+3SKHCdVli7cUDyivZCy8ZJKm2LxCtyo1Xrv+OiyPWjzepGCAvTJDxx2in\nWnleEnBBlS1ntME41vhQUMsRq+1AIXkZbWIN2K3r95E6vXkjQcunFn+J5V2+QbOR\naFd9gHtnM6l5Mm7cmJiPIuIGMHQuGEOX00phNkRbGy/tPaz7IIlWMeKzUM/b4j8=\n=lALq\n-----END PGP SIGNATURE-----\n", "payload": "tree 33c93968ad3f60e8474e2993ce0c7a81cf3f004c\nparent 7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc\nparent 409c14197372495b26fa8ee9f4b812492a7fb75a\nauthor Tyler Mandry <tmandry@gmail.com> 1599765602 -0700\ncommitter GitHub <noreply@github.com> 1599765602 -0700\n\nRollup merge of #76524 - davidtwco:issue-76077-inaccessible-private-fields, r=estebank\n\ntypeck: don't suggest inaccessible private fields\n\nFixes #76077.\n\nThis PR adjusts the missing field diagnostic logic in typeck so that when none of the missing fields in a struct expr are accessible then the error is less confusing.\n\nr? @estebank\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f8a7827a111140f112a424f8bf8f36740865fbd", "html_url": "https://github.com/rust-lang/rust/commit/9f8a7827a111140f112a424f8bf8f36740865fbd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f8a7827a111140f112a424f8bf8f36740865fbd/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc", "url": "https://api.github.com/repos/rust-lang/rust/commits/7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc", "html_url": "https://github.com/rust-lang/rust/commit/7565ccc32cbfaa3835ae4c27b7fb71bc61922bfc"}, {"sha": "409c14197372495b26fa8ee9f4b812492a7fb75a", "url": "https://api.github.com/repos/rust-lang/rust/commits/409c14197372495b26fa8ee9f4b812492a7fb75a", "html_url": "https://github.com/rust-lang/rust/commit/409c14197372495b26fa8ee9f4b812492a7fb75a"}], "stats": {"total": 286, "additions": 244, "deletions": 42}, "files": [{"sha": "dba46f35dca925643b36c860a55d04473b409db7", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 85, "deletions": 33, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/9f8a7827a111140f112a424f8bf8f36740865fbd/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f8a7827a111140f112a424f8bf8f36740865fbd/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=9f8a7827a111140f112a424f8bf8f36740865fbd", "patch": "@@ -1241,42 +1241,21 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 tcx.sess.span_err(span, \"union expressions should have exactly one field\");\n             }\n         } else if check_completeness && !error_happened && !remaining_fields.is_empty() {\n-            let len = remaining_fields.len();\n-\n-            let mut displayable_field_names =\n-                remaining_fields.keys().map(|ident| ident.as_str()).collect::<Vec<_>>();\n-\n-            displayable_field_names.sort();\n+            let no_accessible_remaining_fields = remaining_fields\n+                .iter()\n+                .filter(|(_, (_, field))| {\n+                    field.vis.is_accessible_from(tcx.parent_module(expr_id).to_def_id(), tcx)\n+                })\n+                .next()\n+                .is_none();\n \n-            let truncated_fields_error = if len <= 3 {\n-                String::new()\n+            if no_accessible_remaining_fields {\n+                self.report_no_accessible_fields(adt_ty, span);\n             } else {\n-                format!(\" and {} other field{}\", (len - 3), if len - 3 == 1 { \"\" } else { \"s\" })\n-            };\n-\n-            let remaining_fields_names = displayable_field_names\n-                .iter()\n-                .take(3)\n-                .map(|n| format!(\"`{}`\", n))\n-                .collect::<Vec<_>>()\n-                .join(\", \");\n-\n-            struct_span_err!(\n-                tcx.sess,\n-                span,\n-                E0063,\n-                \"missing field{} {}{} in initializer of `{}`\",\n-                pluralize!(remaining_fields.len()),\n-                remaining_fields_names,\n-                truncated_fields_error,\n-                adt_ty\n-            )\n-            .span_label(\n-                span,\n-                format!(\"missing {}{}\", remaining_fields_names, truncated_fields_error),\n-            )\n-            .emit();\n+                self.report_missing_field(adt_ty, span, remaining_fields);\n+            }\n         }\n+\n         error_happened\n     }\n \n@@ -1293,6 +1272,79 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n+    /// Report an error for a struct field expression when there are fields which aren't provided.\n+    ///\n+    /// ```ignore (diagnostic)\n+    /// error: missing field `you_can_use_this_field` in initializer of `foo::Foo`\n+    ///  --> src/main.rs:8:5\n+    ///   |\n+    /// 8 |     foo::Foo {};\n+    ///   |     ^^^^^^^^ missing `you_can_use_this_field`\n+    ///\n+    /// error: aborting due to previous error\n+    /// ```\n+    fn report_missing_field(\n+        &self,\n+        adt_ty: Ty<'tcx>,\n+        span: Span,\n+        remaining_fields: FxHashMap<Ident, (usize, &ty::FieldDef)>,\n+    ) {\n+        let tcx = self.tcx;\n+        let len = remaining_fields.len();\n+\n+        let mut displayable_field_names =\n+            remaining_fields.keys().map(|ident| ident.as_str()).collect::<Vec<_>>();\n+\n+        displayable_field_names.sort();\n+\n+        let truncated_fields_error = if len <= 3 {\n+            String::new()\n+        } else {\n+            format!(\" and {} other field{}\", (len - 3), if len - 3 == 1 { \"\" } else { \"s\" })\n+        };\n+\n+        let remaining_fields_names = displayable_field_names\n+            .iter()\n+            .take(3)\n+            .map(|n| format!(\"`{}`\", n))\n+            .collect::<Vec<_>>()\n+            .join(\", \");\n+\n+        struct_span_err!(\n+            tcx.sess,\n+            span,\n+            E0063,\n+            \"missing field{} {}{} in initializer of `{}`\",\n+            pluralize!(remaining_fields.len()),\n+            remaining_fields_names,\n+            truncated_fields_error,\n+            adt_ty\n+        )\n+        .span_label(span, format!(\"missing {}{}\", remaining_fields_names, truncated_fields_error))\n+        .emit();\n+    }\n+\n+    /// Report an error for a struct field expression when there are no visible fields.\n+    ///\n+    /// ```ignore (diagnostic)\n+    /// error: cannot construct `Foo` with struct literal syntax due to inaccessible fields\n+    ///  --> src/main.rs:8:5\n+    ///   |\n+    /// 8 |     foo::Foo {};\n+    ///   |     ^^^^^^^^\n+    ///\n+    /// error: aborting due to previous error\n+    /// ```\n+    fn report_no_accessible_fields(&self, adt_ty: Ty<'tcx>, span: Span) {\n+        self.tcx.sess.span_err(\n+            span,\n+            &format!(\n+                \"cannot construct `{}` with struct literal syntax due to inaccessible fields\",\n+                adt_ty,\n+            ),\n+        );\n+    }\n+\n     fn report_unknown_field(\n         &self,\n         ty: Ty<'tcx>,"}, {"sha": "1896155e327d83946f0ac306ed01aec31e2ed2fa", "filename": "compiler/rustc_typeck/src/check/pat.rs", "status": "modified", "additions": 81, "deletions": 9, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/9f8a7827a111140f112a424f8bf8f36740865fbd/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f8a7827a111140f112a424f8bf8f36740865fbd/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs?ref=9f8a7827a111140f112a424f8bf8f36740865fbd", "patch": "@@ -1078,8 +1078,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let mut unmentioned_fields = variant\n             .fields\n             .iter()\n-            .map(|field| field.ident.normalize_to_macros_2_0())\n-            .filter(|ident| !used_fields.contains_key(&ident))\n+            .map(|field| (field, field.ident.normalize_to_macros_2_0()))\n+            .filter(|(_, ident)| !used_fields.contains_key(&ident))\n             .collect::<Vec<_>>();\n \n         let inexistent_fields_err = if !(inexistent_fields.is_empty() || variant.is_recovered()) {\n@@ -1110,7 +1110,19 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 tcx.sess.struct_span_err(pat.span, \"`..` cannot be used in union patterns\").emit();\n             }\n         } else if !etc && !unmentioned_fields.is_empty() {\n-            unmentioned_err = Some(self.error_unmentioned_fields(pat, &unmentioned_fields));\n+            let no_accessible_unmentioned_fields = unmentioned_fields\n+                .iter()\n+                .filter(|(field, _)| {\n+                    field.vis.is_accessible_from(tcx.parent_module(pat.hir_id).to_def_id(), tcx)\n+                })\n+                .next()\n+                .is_none();\n+\n+            if no_accessible_unmentioned_fields {\n+                unmentioned_err = Some(self.error_no_accessible_fields(pat, &fields));\n+            } else {\n+                unmentioned_err = Some(self.error_unmentioned_fields(pat, &unmentioned_fields));\n+            }\n         }\n         match (inexistent_fields_err, unmentioned_err) {\n             (Some(mut i), Some(mut u)) => {\n@@ -1173,7 +1185,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         &self,\n         kind_name: &str,\n         inexistent_fields: &[Ident],\n-        unmentioned_fields: &mut Vec<Ident>,\n+        unmentioned_fields: &mut Vec<(&ty::FieldDef, Ident)>,\n         variant: &ty::VariantDef,\n     ) -> DiagnosticBuilder<'tcx> {\n         let tcx = self.tcx;\n@@ -1215,7 +1227,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 ),\n             );\n             if plural == \"\" {\n-                let input = unmentioned_fields.iter().map(|field| &field.name);\n+                let input = unmentioned_fields.iter().map(|(_, field)| &field.name);\n                 let suggested_name = find_best_match_for_name(input, ident.name, None);\n                 if let Some(suggested_name) = suggested_name {\n                     err.span_suggestion(\n@@ -1232,7 +1244,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     // `smart_resolve_context_dependent_help`.\n                     if suggested_name.to_ident_string().parse::<usize>().is_err() {\n                         // We don't want to throw `E0027` in case we have thrown `E0026` for them.\n-                        unmentioned_fields.retain(|&x| x.name != suggested_name);\n+                        unmentioned_fields.retain(|&(_, x)| x.name != suggested_name);\n                     }\n                 }\n             }\n@@ -1300,17 +1312,77 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         None\n     }\n \n+    /// Returns a diagnostic reporting a struct pattern which is missing an `..` due to\n+    /// inaccessible fields.\n+    ///\n+    /// ```ignore (diagnostic)\n+    /// error: pattern requires `..` due to inaccessible fields\n+    ///   --> src/main.rs:10:9\n+    ///    |\n+    /// LL |     let foo::Foo {} = foo::Foo::default();\n+    ///    |         ^^^^^^^^^^^\n+    ///    |\n+    /// help: add a `..`\n+    ///    |\n+    /// LL |     let foo::Foo { .. } = foo::Foo::default();\n+    ///    |                  ^^^^^^\n+    /// ```\n+    fn error_no_accessible_fields(\n+        &self,\n+        pat: &Pat<'_>,\n+        fields: &'tcx [hir::FieldPat<'tcx>],\n+    ) -> DiagnosticBuilder<'tcx> {\n+        let mut err = self\n+            .tcx\n+            .sess\n+            .struct_span_err(pat.span, \"pattern requires `..` due to inaccessible fields\");\n+\n+        if let Some(field) = fields.last() {\n+            err.span_suggestion_verbose(\n+                field.span.shrink_to_hi(),\n+                \"ignore the inaccessible and unused fields\",\n+                \", ..\".to_string(),\n+                Applicability::MachineApplicable,\n+            );\n+        } else {\n+            let qpath_span = if let PatKind::Struct(qpath, ..) = &pat.kind {\n+                qpath.span()\n+            } else {\n+                bug!(\"`error_no_accessible_fields` called on non-struct pattern\");\n+            };\n+\n+            // Shrink the span to exclude the `foo:Foo` in `foo::Foo { }`.\n+            let span = pat.span.with_lo(qpath_span.shrink_to_hi().hi());\n+            err.span_suggestion_verbose(\n+                span,\n+                \"ignore the inaccessible and unused fields\",\n+                \" { .. }\".to_string(),\n+                Applicability::MachineApplicable,\n+            );\n+        }\n+        err\n+    }\n+\n+    /// Returns a diagnostic reporting a struct pattern which does not mention some fields.\n+    ///\n+    /// ```ignore (diagnostic)\n+    /// error[E0027]: pattern does not mention field `you_cant_use_this_field`\n+    ///   --> src/main.rs:15:9\n+    ///    |\n+    /// LL |     let foo::Foo {} = foo::Foo::new();\n+    ///    |         ^^^^^^^^^^^ missing field `you_cant_use_this_field`\n+    /// ```\n     fn error_unmentioned_fields(\n         &self,\n         pat: &Pat<'_>,\n-        unmentioned_fields: &[Ident],\n+        unmentioned_fields: &[(&ty::FieldDef, Ident)],\n     ) -> DiagnosticBuilder<'tcx> {\n         let field_names = if unmentioned_fields.len() == 1 {\n-            format!(\"field `{}`\", unmentioned_fields[0])\n+            format!(\"field `{}`\", unmentioned_fields[0].1)\n         } else {\n             let fields = unmentioned_fields\n                 .iter()\n-                .map(|name| format!(\"`{}`\", name))\n+                .map(|(_, name)| format!(\"`{}`\", name))\n                 .collect::<Vec<String>>()\n                 .join(\", \");\n             format!(\"fields {}\", fields)"}, {"sha": "8103a7ca47d4eff5aece8d46c859e2501517dd6f", "filename": "src/test/ui/issues/issue-76077-1.fixed", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9f8a7827a111140f112a424f8bf8f36740865fbd/src%2Ftest%2Fui%2Fissues%2Fissue-76077-1.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/9f8a7827a111140f112a424f8bf8f36740865fbd/src%2Ftest%2Fui%2Fissues%2Fissue-76077-1.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-76077-1.fixed?ref=9f8a7827a111140f112a424f8bf8f36740865fbd", "patch": "@@ -0,0 +1,18 @@\n+// run-rustfix\n+#![allow(dead_code, unused_variables)]\n+\n+pub mod foo {\n+    #[derive(Default)]\n+    pub struct Foo { invisible: bool, }\n+\n+    #[derive(Default)]\n+    pub struct Bar { pub visible: bool, invisible: bool, }\n+}\n+\n+fn main() {\n+    let foo::Foo { .. } = foo::Foo::default();\n+    //~^ ERROR pattern requires `..` due to inaccessible fields\n+\n+    let foo::Bar { visible, .. } = foo::Bar::default();\n+    //~^ ERROR pattern requires `..` due to inaccessible fields\n+}"}, {"sha": "730332853c124bad17d776e1be9ec79895dbe4ce", "filename": "src/test/ui/issues/issue-76077-1.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9f8a7827a111140f112a424f8bf8f36740865fbd/src%2Ftest%2Fui%2Fissues%2Fissue-76077-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f8a7827a111140f112a424f8bf8f36740865fbd/src%2Ftest%2Fui%2Fissues%2Fissue-76077-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-76077-1.rs?ref=9f8a7827a111140f112a424f8bf8f36740865fbd", "patch": "@@ -0,0 +1,18 @@\n+// run-rustfix\n+#![allow(dead_code, unused_variables)]\n+\n+pub mod foo {\n+    #[derive(Default)]\n+    pub struct Foo { invisible: bool, }\n+\n+    #[derive(Default)]\n+    pub struct Bar { pub visible: bool, invisible: bool, }\n+}\n+\n+fn main() {\n+    let foo::Foo {} = foo::Foo::default();\n+    //~^ ERROR pattern requires `..` due to inaccessible fields\n+\n+    let foo::Bar { visible } = foo::Bar::default();\n+    //~^ ERROR pattern requires `..` due to inaccessible fields\n+}"}, {"sha": "4557595529fa23bf1387753ac683f21f0f15b8d7", "filename": "src/test/ui/issues/issue-76077-1.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9f8a7827a111140f112a424f8bf8f36740865fbd/src%2Ftest%2Fui%2Fissues%2Fissue-76077-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f8a7827a111140f112a424f8bf8f36740865fbd/src%2Ftest%2Fui%2Fissues%2Fissue-76077-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-76077-1.stderr?ref=9f8a7827a111140f112a424f8bf8f36740865fbd", "patch": "@@ -0,0 +1,24 @@\n+error: pattern requires `..` due to inaccessible fields\n+  --> $DIR/issue-76077-1.rs:13:9\n+   |\n+LL |     let foo::Foo {} = foo::Foo::default();\n+   |         ^^^^^^^^^^^\n+   |\n+help: ignore the inaccessible and unused fields\n+   |\n+LL |     let foo::Foo { .. } = foo::Foo::default();\n+   |                  ^^^^^^\n+\n+error: pattern requires `..` due to inaccessible fields\n+  --> $DIR/issue-76077-1.rs:16:9\n+   |\n+LL |     let foo::Bar { visible } = foo::Bar::default();\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: ignore the inaccessible and unused fields\n+   |\n+LL |     let foo::Bar { visible, .. } = foo::Bar::default();\n+   |                           ^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "1ecd37de2e14ab85877115e96d7e43e8cc473da5", "filename": "src/test/ui/issues/issue-76077.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9f8a7827a111140f112a424f8bf8f36740865fbd/src%2Ftest%2Fui%2Fissues%2Fissue-76077.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f8a7827a111140f112a424f8bf8f36740865fbd/src%2Ftest%2Fui%2Fissues%2Fissue-76077.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-76077.rs?ref=9f8a7827a111140f112a424f8bf8f36740865fbd", "patch": "@@ -0,0 +1,10 @@\n+pub mod foo {\n+    pub struct Foo {\n+        you_cant_use_this_field: bool,\n+    }\n+}\n+\n+fn main() {\n+    foo::Foo {};\n+    //~^ ERROR cannot construct `Foo` with struct literal syntax due to inaccessible fields\n+}"}, {"sha": "d834ec5e0edd2a8a482044c57e9e6357a5b59a81", "filename": "src/test/ui/issues/issue-76077.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9f8a7827a111140f112a424f8bf8f36740865fbd/src%2Ftest%2Fui%2Fissues%2Fissue-76077.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f8a7827a111140f112a424f8bf8f36740865fbd/src%2Ftest%2Fui%2Fissues%2Fissue-76077.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-76077.stderr?ref=9f8a7827a111140f112a424f8bf8f36740865fbd", "patch": "@@ -0,0 +1,8 @@\n+error: cannot construct `Foo` with struct literal syntax due to inaccessible fields\n+  --> $DIR/issue-76077.rs:8:5\n+   |\n+LL |     foo::Foo {};\n+   |     ^^^^^^^^\n+\n+error: aborting due to previous error\n+"}]}