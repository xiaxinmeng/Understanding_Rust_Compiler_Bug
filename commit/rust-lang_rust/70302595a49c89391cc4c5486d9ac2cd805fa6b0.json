{"sha": "70302595a49c89391cc4c5486d9ac2cd805fa6b0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwMzAyNTk1YTQ5Yzg5MzkxY2M0YzU0ODZkOWFjMmNkODA1ZmE2YjA=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2018-01-19T11:10:24Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2018-01-19T11:10:24Z"}, "message": "Merge branch 'master' of github.com:Manishearth/rust-clippy into fold_any", "tree": {"sha": "0f3559ca53e6db36724e18df4d8672e31bf05ea3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f3559ca53e6db36724e18df4d8672e31bf05ea3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70302595a49c89391cc4c5486d9ac2cd805fa6b0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAlph0iIACgkQpp+NIls6\n19kPdw//ctQFdHYr+v6ksxgru5uDSKs9IzHNgdPAg2t/jr5tNVJ+2kEJj/sU/eVI\nxlnvS6Wn9qzYIMW1a781ea7cV/MbcpU7fuF2GyqYcpnLuSkmgNerXwg2B/l24U9e\nJaLah5c9AYK4nJJKhiML378QzK275nsiuq+PMGeiOu3U3C+69fc8bDstc4TIRKco\nK2IU9BsEGCl58bCvtXTlRxfp7zAcaf3CDph/aFrHNX6Hi+aBLE8Al6ymEiqt92vU\nAcJxqONGXjeSuOOqOVaGPn2OcMF5Dy0sw82x3yhP/aQsM4OLKXIQnG3ZE9KSvdDg\nkAwhK+zDepH7pPsBJXZD+rdsInuU1hhTd0LuNnFZb/rRrqm7p+xQfVPjpZKXMxJW\nYbo24s6YBl1nvUxsKykl573wuPBKauch30bQbF49AidBLWiR2I1jIv/3Oro7xteQ\n8lxRI8ohybEQ5k0QqSZHcwGumTbAw9O+0QsoEyjKhvbMg5ohgG5SbPXZhTh1feS4\nYHwhQq/3FR4WRoCyQkneO63r01dLEp6apBwGNwQI5hwxzJW6jc0sSdcfFNVVfqMR\nud+9ZAOeS3RDY602KrE2dj/aOcKYZgiP+78F5JEvuKWT9w2oCK8VCmfbkzVH3dwH\nc52a7MNZP6OWAtIOvyLfA3znsiJ17DIlTrMoo0lVXhcZv3SW55w=\n=2j67\n-----END PGP SIGNATURE-----", "payload": "tree 0f3559ca53e6db36724e18df4d8672e31bf05ea3\nparent a324a2bc38738f288b1fd0bd39c1d203aef88bd4\nparent 9a2c50f3d6b74f4edbff80cb3d1de5f3485428c0\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1516360224 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1516360224 +0100\n\nMerge branch 'master' of github.com:Manishearth/rust-clippy into fold_any\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70302595a49c89391cc4c5486d9ac2cd805fa6b0", "html_url": "https://github.com/rust-lang/rust/commit/70302595a49c89391cc4c5486d9ac2cd805fa6b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70302595a49c89391cc4c5486d9ac2cd805fa6b0/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a324a2bc38738f288b1fd0bd39c1d203aef88bd4", "url": "https://api.github.com/repos/rust-lang/rust/commits/a324a2bc38738f288b1fd0bd39c1d203aef88bd4", "html_url": "https://github.com/rust-lang/rust/commit/a324a2bc38738f288b1fd0bd39c1d203aef88bd4"}, {"sha": "9a2c50f3d6b74f4edbff80cb3d1de5f3485428c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a2c50f3d6b74f4edbff80cb3d1de5f3485428c0", "html_url": "https://github.com/rust-lang/rust/commit/9a2c50f3d6b74f4edbff80cb3d1de5f3485428c0"}], "stats": {"total": 1987, "additions": 1429, "deletions": 558}, "files": [{"sha": "29879e44755e5df83c56ea0ff78689d309d7f489", "filename": ".travis.yml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -4,7 +4,7 @@ rust: nightly\n \n os:\n   - linux\n-  - osx\n+  # - osx # doesn't even start atm. Not sure what travis is up to. Disabling to reduce the noise\n \n sudo: false\n "}, {"sha": "7af39eda8ec10291c0e03feb8fcfe54030687c9e", "filename": "CHANGELOG.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -1,6 +1,9 @@\n # Change Log\n All notable changes to this project will be documented in this file.\n \n+## 0.0.180\n+* Rustup to *rustc 1.25.0-nightly (3f92e8d89 2018-01-14)*\n+\n ## 0.0.179\n * Rustup to *rustc 1.25.0-nightly (61452e506 2018-01-09)*\n \n@@ -580,6 +583,7 @@ All notable changes to this project will be documented in this file.\n [`ineffective_bit_mask`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#ineffective_bit_mask\n [`infinite_iter`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#infinite_iter\n [`inline_always`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#inline_always\n+[`inline_fn_without_body`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#inline_fn_without_body\n [`int_plus_one`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#int_plus_one\n [`integer_arithmetic`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#integer_arithmetic\n [`invalid_ref`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#invalid_ref\n@@ -670,6 +674,7 @@ All notable changes to this project will be documented in this file.\n [`redundant_closure_call`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#redundant_closure_call\n [`redundant_pattern`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#redundant_pattern\n [`regex_macro`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#regex_macro\n+[`replace_consts`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#replace_consts\n [`result_map_unwrap_or_else`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#result_map_unwrap_or_else\n [`result_unwrap_used`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#result_unwrap_used\n [`reverse_range_loop`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#reverse_range_loop"}, {"sha": "040cb78d1c633da24d2ad3c90c3f17c0494677d1", "filename": "Cargo.toml", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -1,6 +1,6 @@\n [package]\n name = \"clippy\"\n-version = \"0.0.179\"\n+version = \"0.0.180\"\n authors = [\n \t\"Manish Goregaokar <manishsmail@gmail.com>\",\n \t\"Andre Bogus <bogusandre@gmail.com>\",\n@@ -37,13 +37,13 @@ path = \"src/driver.rs\"\n \n [dependencies]\n # begin automatic update\n-clippy_lints = { version = \"0.0.179\", path = \"clippy_lints\" }\n+clippy_lints = { version = \"0.0.180\", path = \"clippy_lints\" }\n # end automatic update\n cargo_metadata = \"0.2\"\n regex = \"0.2\"\n \n [dev-dependencies]\n-compiletest_rs = \"0.3\"\n+compiletest_rs = \"0.3.5\"\n duct = \"0.8.2\"\n lazy_static = \"1.0\"\n serde_derive = \"1.0\""}, {"sha": "87d7c7aee66e071447d688b687cd1a815471667d", "filename": "clippy_lints/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/clippy_lints%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/clippy_lints%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2FCargo.toml?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -1,7 +1,7 @@\n [package]\n name = \"clippy_lints\"\n # begin automatic update\n-version = \"0.0.179\"\n+version = \"0.0.180\"\n # end automatic update\n authors = [\n \t\"Manish Goregaokar <manishsmail@gmail.com>\","}, {"sha": "293d63daaaa12f181760854b4a06233b945b170b", "filename": "clippy_lints/src/const_static_lifetime.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/clippy_lints%2Fsrc%2Fconst_static_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/clippy_lints%2Fsrc%2Fconst_static_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fconst_static_lifetime.rs?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -1,6 +1,6 @@\n use syntax::ast::{Item, ItemKind, Ty, TyKind};\n use rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n-use utils::{in_macro, span_lint_and_then};\n+use utils::{in_macro, snippet, span_lint_and_then};\n \n /// **What it does:** Checks for constants with an explicit `'static` lifetime.\n ///\n@@ -51,14 +51,15 @@ impl StaticConst {\n                         TyKind::Path(..) | TyKind::Slice(..) | TyKind::Array(..) |\n                         TyKind::Tup(..) => {\n                             if lifetime.ident.name == \"'static\" {\n-                                let mut sug: String = String::new();\n+                                let snip = snippet(cx, borrow_type.ty.span, \"<type>\");\n+                                let sugg = format!(\"&{}\", snip);\n                                 span_lint_and_then(\n                                     cx,\n                                     CONST_STATIC_LIFETIME,\n                                     lifetime.span,\n                                     \"Constants have by default a `'static` lifetime\",\n                                     |db| {\n-                                        db.span_suggestion(lifetime.span, \"consider removing `'static`\", sug);\n+                                        db.span_suggestion(ty.span, \"consider removing `'static`\", sugg);\n                                     },\n                                 );\n                             }"}, {"sha": "b354fe7059600bdb191e1bce95be866421733e54", "filename": "clippy_lints/src/else_if_without_else.rs", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/clippy_lints%2Fsrc%2Felse_if_without_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/clippy_lints%2Fsrc%2Felse_if_without_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Felse_if_without_else.rs?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -0,0 +1,70 @@\n+//! lint on if expressions with an else if, but without a final else branch\n+\n+use rustc::lint::*;\n+use syntax::ast::*;\n+\n+use utils::{in_external_macro, span_lint_and_sugg};\n+\n+/// **What it does:** Checks for usage of if expressions with an `else if` branch,\n+/// but without a final `else` branch.\n+///\n+/// **Why is this bad?** Some coding guidelines require this (e.g. MISRA-C:2004 Rule 14.10).\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ```rust\n+/// if x.is_positive() {\n+///     a();\n+/// } else if x.is_negative() {\n+///     b();\n+/// }\n+/// ```\n+///\n+/// Could be written:\n+///\n+/// ```rust\n+/// if x.is_positive() {\n+///     a();\n+/// } else if x.is_negative() {\n+///     b();\n+/// } else {\n+///     // we don't care about zero\n+/// }\n+/// ```\n+declare_restriction_lint! {\n+    pub ELSE_IF_WITHOUT_ELSE,\n+    \"if expression with an `else if`, but without a final `else` branch\"\n+}\n+\n+#[derive(Copy, Clone)]\n+pub struct ElseIfWithoutElse;\n+\n+impl LintPass for ElseIfWithoutElse {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(ELSE_IF_WITHOUT_ELSE)\n+    }\n+}\n+\n+impl EarlyLintPass for ElseIfWithoutElse {\n+    fn check_expr(&mut self, cx: &EarlyContext, mut item: &Expr) {\n+        if in_external_macro(cx, item.span) {\n+            return;\n+        }\n+\n+        while let ExprKind::If(_, _, Some(ref els)) = item.node {\n+            if let ExprKind::If(_, _, None) = els.node {\n+                span_lint_and_sugg(\n+                    cx,\n+                    ELSE_IF_WITHOUT_ELSE,\n+                    els.span,\n+                    \"if expression with an `else if`, but without a final `else`\",\n+                    \"add an `else` block here\",\n+                    \"\".to_string()\n+                );\n+            }\n+\n+            item = els;\n+        }\n+    }\n+}"}, {"sha": "3df037f332974cfd56880908556babf588c0cc6c", "filename": "clippy_lints/src/functions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/clippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/clippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions.rs?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -86,7 +86,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Functions {\n         use rustc::hir::map::Node::*;\n \n         let is_impl = if let Some(NodeItem(item)) = cx.tcx.hir.find(cx.tcx.hir.get_parent_node(nodeid)) {\n-            matches!(item.node, hir::ItemImpl(_, _, _, _, Some(_), _, _) | hir::ItemAutoImpl(..))\n+            matches!(item.node, hir::ItemImpl(_, _, _, _, Some(_), _, _))\n         } else {\n             false\n         };"}, {"sha": "1bb9519d304c33fbe626a352933fb56f34c7f31b", "filename": "clippy_lints/src/inline_fn_without_body.rs", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/clippy_lints%2Fsrc%2Finline_fn_without_body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/clippy_lints%2Fsrc%2Finline_fn_without_body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finline_fn_without_body.rs?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -0,0 +1,65 @@\n+//! checks for `#[inline]` on trait methods without bodies\n+\n+use rustc::lint::*;\n+use rustc::hir::*;\n+use syntax::ast::{Attribute, Name};\n+use utils::span_lint_and_then;\n+use utils::sugg::DiagnosticBuilderExt;\n+\n+/// **What it does:** Checks for `#[inline]` on trait methods without bodies\n+///\n+/// **Why is this bad?** Only implementations of trait methods may be inlined.\n+/// The inline attribute is ignored for trait methods without bodies.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ```rust\n+/// trait Animal {\n+///     #[inline]\n+///     fn name(&self) -> &'static str;\n+/// }\n+/// ```\n+declare_lint! {\n+    pub INLINE_FN_WITHOUT_BODY,\n+    Warn,\n+    \"use of `#[inline]` on trait methods without bodies\"\n+}\n+\n+#[derive(Copy, Clone)]\n+pub struct Pass;\n+\n+impl LintPass for Pass {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(INLINE_FN_WITHOUT_BODY)\n+    }\n+}\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n+    fn check_trait_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx TraitItem) {\n+        match item.node {\n+            TraitItemKind::Method(_, TraitMethod::Required(_)) => {\n+                check_attrs(cx, &item.name, &item.attrs);\n+            },\n+            _ => {},\n+        }\n+    }\n+}\n+\n+fn check_attrs(cx: &LateContext, name: &Name, attrs: &[Attribute]) {\n+    for attr in attrs {\n+        if attr.name().map_or(true, |n| n != \"inline\") {\n+            continue;\n+        }\n+\n+        span_lint_and_then(\n+            cx,\n+            INLINE_FN_WITHOUT_BODY,\n+            attr.span,\n+            &format!(\"use of `#[inline]` on trait method `{}` which has no body\", name),\n+            |db| {\n+                db.suggest_remove_item(cx, attr.span, \"remove\");\n+            },\n+        );\n+    }\n+}"}, {"sha": "90e2ef760f752171f5e38cb6dfb505463dd3a066", "filename": "clippy_lints/src/is_unit_expr.rs", "status": "removed", "additions": 0, "deletions": 140, "changes": 140, "blob_url": "https://github.com/rust-lang/rust/blob/a324a2bc38738f288b1fd0bd39c1d203aef88bd4/clippy_lints%2Fsrc%2Fis_unit_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a324a2bc38738f288b1fd0bd39c1d203aef88bd4/clippy_lints%2Fsrc%2Fis_unit_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fis_unit_expr.rs?ref=a324a2bc38738f288b1fd0bd39c1d203aef88bd4", "patch": "@@ -1,140 +0,0 @@\n-use rustc::lint::*;\n-use syntax::ast::*;\n-use syntax::ext::quote::rt::Span;\n-use utils::{span_lint, span_note_and_lint};\n-\n-/// **What it does:** Checks for\n-///  - () being assigned to a variable\n-///  - () being passed to a function\n-///\n-/// **Why is this bad?** It is extremely unlikely that a user intended to\n-/// assign '()' to valiable. Instead,\n-/// Unit is what a block evaluates to when it returns nothing. This is\n-/// typically caused by a trailing\n-///   unintended semicolon.\n-///\n-/// **Known problems:** None.\n-///\n-/// **Example:**\n-/// * `let x = {\"foo\" ;}` when the user almost certainly intended `let x\n-/// ={\"foo\"}`\n-declare_lint! {\n-    pub UNIT_EXPR,\n-    Warn,\n-    \"unintended assignment or use of a unit typed value\"\n-}\n-\n-#[derive(Copy, Clone)]\n-enum UnitCause {\n-    SemiColon,\n-    EmptyBlock,\n-}\n-\n-#[derive(Copy, Clone)]\n-pub struct UnitExpr;\n-\n-impl LintPass for UnitExpr {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(UNIT_EXPR)\n-    }\n-}\n-\n-impl EarlyLintPass for UnitExpr {\n-    fn check_expr(&mut self, cx: &EarlyContext, expr: &Expr) {\n-        if let ExprKind::Assign(ref _left, ref right) = expr.node {\n-            check_for_unit(cx, right);\n-        }\n-        if let ExprKind::MethodCall(ref _left, ref args) = expr.node {\n-            for arg in args {\n-                check_for_unit(cx, arg);\n-            }\n-        }\n-        if let ExprKind::Call(_, ref args) = expr.node {\n-            for arg in args {\n-                check_for_unit(cx, arg);\n-            }\n-        }\n-    }\n-\n-    fn check_stmt(&mut self, cx: &EarlyContext, stmt: &Stmt) {\n-        if let StmtKind::Local(ref local) = stmt.node {\n-            if local.pat.node == PatKind::Wild {\n-                return;\n-            }\n-            if let Some(ref expr) = local.init {\n-                check_for_unit(cx, expr);\n-            }\n-        }\n-    }\n-}\n-\n-fn check_for_unit(cx: &EarlyContext, expr: &Expr) {\n-    match is_unit_expr(expr) {\n-        Some((span, UnitCause::SemiColon)) => span_note_and_lint(\n-            cx,\n-            UNIT_EXPR,\n-            expr.span,\n-            \"This expression evaluates to the Unit type ()\",\n-            span,\n-            \"Consider removing the trailing semicolon\",\n-        ),\n-        Some((_span, UnitCause::EmptyBlock)) => span_lint(\n-            cx,\n-            UNIT_EXPR,\n-            expr.span,\n-            \"This expression evaluates to the Unit type ()\",\n-        ),\n-        None => (),\n-    }\n-}\n-\n-fn is_unit_expr(expr: &Expr) -> Option<(Span, UnitCause)> {\n-    match expr.node {\n-        ExprKind::Block(ref block) => match check_last_stmt_in_block(block) {\n-            Some(UnitCause::SemiColon) =>\n-                Some((block.stmts[block.stmts.len() - 1].span, UnitCause::SemiColon)),\n-            Some(UnitCause::EmptyBlock) =>\n-                Some((block.span, UnitCause::EmptyBlock)),\n-            None => None\n-        }\n-        ExprKind::If(_, ref then, ref else_) => {\n-            let check_then = check_last_stmt_in_block(then);\n-            if let Some(ref else_) = *else_ {\n-                let check_else = is_unit_expr(else_);\n-                if let Some(ref expr_else) = check_else {\n-                    return Some(*expr_else);\n-                }\n-            }\n-            match check_then {\n-                Some(c) => Some((expr.span, c)),\n-                None => None,\n-            }\n-        },\n-        ExprKind::Match(ref _pattern, ref arms) => {\n-            for arm in arms {\n-                if let Some(r) = is_unit_expr(&arm.body) {\n-                    return Some(r);\n-                }\n-            }\n-            None\n-        },\n-        _ => None,\n-    }\n-}\n-\n-fn check_last_stmt_in_block(block: &Block) -> Option<UnitCause> {\n-    if block.stmts.is_empty() { return Some(UnitCause::EmptyBlock); }\n-    let final_stmt = &block.stmts[block.stmts.len() - 1];\n-\n-\n-    // Made a choice here to risk false positives on divergent macro invocations\n-    // like `panic!()`\n-    match final_stmt.node {\n-        StmtKind::Expr(_) => None,\n-        StmtKind::Semi(ref expr) => match expr.node {\n-            ExprKind::Break(_, _) | ExprKind::Continue(_) | ExprKind::Ret(_) => None,\n-            _ => Some(UnitCause::SemiColon),\n-        },\n-        _ => Some(UnitCause::SemiColon), // not sure what's happening here\n-    }\n-}"}, {"sha": "ee59745353b8095bcb7914684d09c2ff925ddd64", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -88,6 +88,7 @@ pub mod derive;\n pub mod doc;\n pub mod double_parens;\n pub mod drop_forget_ref;\n+pub mod else_if_without_else;\n pub mod empty_enum;\n pub mod entry;\n pub mod enum_clike;\n@@ -108,9 +109,9 @@ pub mod identity_op;\n pub mod if_let_redundant_pattern_matching;\n pub mod if_not_else;\n pub mod infinite_iter;\n+pub mod inline_fn_without_body;\n pub mod int_plus_one;\n pub mod invalid_ref;\n-pub mod is_unit_expr;\n pub mod items_after_statements;\n pub mod large_enum_variant;\n pub mod len_zero;\n@@ -247,6 +248,10 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         \"string_to_string\",\n         \"using `string::to_string` is common even today and specialization will likely happen soon\",\n     );\n+    store.register_removed(\n+        \"unit_expr\",\n+        \"superseded by `let_unit_value` and `unit_arg`\",\n+    );\n     // end deprecated lints, do not remove this comment, it\u2019s used in `update_lints`\n \n     reg.register_late_lint_pass(box serde_api::Serde);\n@@ -267,7 +272,6 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n     reg.register_late_lint_pass(box approx_const::Pass);\n     reg.register_late_lint_pass(box misc::Pass);\n     reg.register_early_lint_pass(box precedence::Precedence);\n-    reg.register_early_lint_pass(box is_unit_expr::UnitExpr);\n     reg.register_early_lint_pass(box needless_continue::NeedlessContinue);\n     reg.register_late_lint_pass(box eta_reduction::EtaPass);\n     reg.register_late_lint_pass(box identity_op::IdentityOp);\n@@ -329,6 +333,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n     reg.register_early_lint_pass(box formatting::Formatting);\n     reg.register_late_lint_pass(box swap::Swap);\n     reg.register_early_lint_pass(box if_not_else::IfNotElse);\n+    reg.register_early_lint_pass(box else_if_without_else::ElseIfWithoutElse);\n     reg.register_early_lint_pass(box int_plus_one::IntPlusOne);\n     reg.register_late_lint_pass(box overflow_check_conditional::OverflowCheckConditional);\n     reg.register_late_lint_pass(box unused_label::UnusedLabel);\n@@ -357,18 +362,21 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n     reg.register_late_lint_pass(box use_self::UseSelf);\n     reg.register_late_lint_pass(box bytecount::ByteCount);\n     reg.register_late_lint_pass(box infinite_iter::Pass);\n+    reg.register_late_lint_pass(box inline_fn_without_body::Pass);\n     reg.register_late_lint_pass(box invalid_ref::InvalidRef);\n     reg.register_late_lint_pass(box identity_conversion::IdentityConversion::default());\n     reg.register_late_lint_pass(box types::ImplicitHasher);\n     reg.register_early_lint_pass(box const_static_lifetime::StaticConst);\n     reg.register_late_lint_pass(box fallible_impl_from::FallibleImplFrom);\n     reg.register_late_lint_pass(box replace_consts::ReplaceConsts);\n+    reg.register_late_lint_pass(box types::UnitArg);\n \n     reg.register_lint_group(\"clippy_restrictions\", vec![\n         arithmetic::FLOAT_ARITHMETIC,\n         arithmetic::INTEGER_ARITHMETIC,\n         array_indexing::INDEXING_SLICING,\n         assign_ops::ASSIGN_OPS,\n+        else_if_without_else::ELSE_IF_WITHOUT_ELSE,\n         misc::FLOAT_CMP_CONST,\n     ]);\n \n@@ -474,8 +482,8 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         identity_op::IDENTITY_OP,\n         if_let_redundant_pattern_matching::IF_LET_REDUNDANT_PATTERN_MATCHING,\n         infinite_iter::INFINITE_ITER,\n+        inline_fn_without_body::INLINE_FN_WITHOUT_BODY,\n         invalid_ref::INVALID_REF,\n-        is_unit_expr::UNIT_EXPR,\n         large_enum_variant::LARGE_ENUM_VARIANT,\n         len_zero::LEN_WITHOUT_IS_EMPTY,\n         len_zero::LEN_ZERO,\n@@ -602,8 +610,10 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         types::IMPLICIT_HASHER,\n         types::LET_UNIT_VALUE,\n         types::LINKEDLIST,\n+        types::OPTION_OPTION,\n         types::TYPE_COMPLEXITY,\n         types::UNIT_CMP,\n+        types::UNIT_ARG,\n         types::UNNECESSARY_CAST,\n         unicode::ZERO_WIDTH_SPACE,\n         unsafe_removed_from_name::UNSAFE_REMOVED_FROM_NAME,"}, {"sha": "4eeaf675c88b906c026856e525cf2dd552d04357", "filename": "clippy_lints/src/map_clone.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/clippy_lints%2Fsrc%2Fmap_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/clippy_lints%2Fsrc%2Fmap_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_clone.rs?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -10,7 +10,9 @@ use utils::{get_arg_name, is_adjusted, iter_input_pats, match_qpath, match_trait\n /// **Why is this bad?** It makes the code less readable than using the\n /// `.cloned()` adapter.\n ///\n-/// **Known problems:** None.\n+/// **Known problems:** Sometimes `.cloned()` requires stricter trait\n+/// bound than `.map(|e| e.clone())` (which works because of the coercion).\n+/// See [#498](https://github.com/rust-lang-nursery/rust-clippy/issues/498).\n ///\n /// **Example:**\n /// ```rust"}, {"sha": "d9b61a9e5cdcc8ebb767b2385166ffa7a864aadb", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 20, "deletions": 19, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -361,9 +361,8 @@ declare_lint! {\n /// ```rust\n /// x.clone()\n /// ```\n-declare_lint! {\n+declare_restriction_lint! {\n     pub CLONE_ON_REF_PTR,\n-    Warn,\n     \"using 'clone' on a ref-counted pointer\"\n }\n \n@@ -1039,24 +1038,26 @@ fn lint_clone_on_copy(cx: &LateContext, expr: &hir::Expr, arg: &hir::Expr, arg_t\n fn lint_clone_on_ref_ptr(cx: &LateContext, expr: &hir::Expr, arg: &hir::Expr) {\n     let (obj_ty, _) = walk_ptrs_ty_depth(cx.tables.expr_ty(arg));\n \n-    let caller_type = if match_type(cx, obj_ty, &paths::RC) {\n-        \"Rc\"\n-    } else if match_type(cx, obj_ty, &paths::ARC) {\n-        \"Arc\"\n-    } else if match_type(cx, obj_ty, &paths::WEAK_RC) || match_type(cx, obj_ty, &paths::WEAK_ARC) {\n-        \"Weak\"\n-    } else {\n-        return;\n-    };\n+    if let ty::TyAdt(_, subst) = obj_ty.sty {\n+        let caller_type = if match_type(cx, obj_ty, &paths::RC) {\n+            \"Rc\"\n+        } else if match_type(cx, obj_ty, &paths::ARC) {\n+            \"Arc\"\n+        } else if match_type(cx, obj_ty, &paths::WEAK_RC) || match_type(cx, obj_ty, &paths::WEAK_ARC) {\n+            \"Weak\"\n+        } else {\n+            return;\n+        };\n \n-    span_lint_and_sugg(\n-        cx,\n-        CLONE_ON_REF_PTR,\n-        expr.span,\n-        \"using '.clone()' on a ref-counted pointer\",\n-        \"try this\",\n-        format!(\"{}::clone(&{})\", caller_type, snippet(cx, arg.span, \"_\")),\n-    );\n+        span_lint_and_sugg(\n+            cx,\n+            CLONE_ON_REF_PTR,\n+            expr.span,\n+            \"using '.clone()' on a ref-counted pointer\",\n+            \"try this\",\n+            format!(\"{}::<{}>::clone(&{})\", caller_type, subst.type_at(0), snippet(cx, arg.span, \"_\")),\n+        );\n+    }\n }\n \n "}, {"sha": "82df78ec23483fd90e26d4276560ffb527279a69", "filename": "clippy_lints/src/missing_doc.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/clippy_lints%2Fsrc%2Fmissing_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/clippy_lints%2Fsrc%2Fmissing_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_doc.rs?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -124,7 +124,17 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingDoc {\n         let desc = match it.node {\n             hir::ItemConst(..) => \"a constant\",\n             hir::ItemEnum(..) => \"an enum\",\n-            hir::ItemFn(..) => \"a function\",\n+            hir::ItemFn(..) => {\n+                // ignore main()\n+                if it.name == \"main\" {\n+                    let def_id = cx.tcx.hir.local_def_id(it.id);\n+                    let def_key = cx.tcx.hir.def_key(def_id);\n+                    if def_key.parent == Some(hir::def_id::CRATE_DEF_INDEX) {\n+                        return;\n+                    }\n+                }\n+                \"a function\"\n+            },\n             hir::ItemMod(..) => \"a module\",\n             hir::ItemStatic(..) => \"a static\",\n             hir::ItemStruct(..) => \"a struct\",\n@@ -133,7 +143,6 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingDoc {\n             hir::ItemGlobalAsm(..) => \"an assembly blob\",\n             hir::ItemTy(..) => \"a type alias\",\n             hir::ItemUnion(..) => \"a union\",\n-            hir::ItemAutoImpl(..) |\n             hir::ItemExternCrate(..) |\n             hir::ItemForeignMod(..) |\n             hir::ItemImpl(..) |"}, {"sha": "21a7542e6c766a65a10459d12d819673ded75605", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 26, "deletions": 10, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -6,6 +6,7 @@ use rustc::ty::{self, RegionKind, TypeFoldable};\n use rustc::traits;\n use rustc::middle::expr_use_visitor as euv;\n use rustc::middle::mem_categorization as mc;\n+use syntax::abi::Abi;\n use syntax::ast::NodeId;\n use syntax_pos::Span;\n use syntax::errors::DiagnosticBuilder;\n@@ -71,13 +72,18 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n         }\n \n         match kind {\n-            FnKind::ItemFn(.., attrs) => for a in attrs {\n-                if_chain! {\n-                    if a.meta_item_list().is_some();\n-                    if let Some(name) = a.name();\n-                    if name == \"proc_macro_derive\";\n-                    then {\n-                        return;\n+            FnKind::ItemFn(.., abi, _, attrs) => {\n+                if abi != Abi::Rust {\n+                    return;\n+                }\n+                for a in attrs {\n+                    if_chain! {\n+                        if a.meta_item_list().is_some();\n+                        if let Some(name) = a.name();\n+                        if name == \"proc_macro_derive\";\n+                        then {\n+                            return;\n+                        }\n                     }\n                 }\n             },\n@@ -87,7 +93,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n \n         // Exclude non-inherent impls\n         if let Some(NodeItem(item)) = cx.tcx.hir.find(cx.tcx.hir.get_parent_node(node_id)) {\n-            if matches!(item.node, ItemImpl(_, _, _, _, Some(_), _, _) | ItemAutoImpl(..) |\n+            if matches!(item.node, ItemImpl(_, _, _, _, Some(_), _, _) |\n                 ItemTrait(..))\n             {\n                 return;\n@@ -96,10 +102,11 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n \n         // Allow `Borrow` or functions to be taken by value\n         let borrow_trait = need!(get_trait_def_id(cx, &paths::BORROW_TRAIT));\n-        let fn_traits = [\n+        let whitelisted_traits = [\n             need!(cx.tcx.lang_items().fn_trait()),\n             need!(cx.tcx.lang_items().fn_once_trait()),\n             need!(cx.tcx.lang_items().fn_mut_trait()),\n+            need!(get_trait_def_id(cx, &paths::RANGE_ARGUMENT_TRAIT))\n         ];\n \n         let sized_trait = need!(cx.tcx.lang_items().sized_trait());\n@@ -183,7 +190,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n                 if !is_self(arg);\n                 if !ty.is_mutable_pointer();\n                 if !is_copy(cx, ty);\n-                if !fn_traits.iter().any(|&t| implements_trait(cx, ty, t, &[]));\n+                if !whitelisted_traits.iter().any(|&t| implements_trait(cx, ty, t, &[]));\n                 if !implements_borrow_trait;\n                 if !all_borrowable_trait;\n \n@@ -196,6 +203,15 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n \n                     // Dereference suggestion\n                     let sugg = |db: &mut DiagnosticBuilder| {\n+                        if let ty::TypeVariants::TyAdt(ref def, ..) = ty.sty {\n+                            if let Some(span) = cx.tcx.hir.span_if_local(def.did) {\n+                                let param_env = ty::ParamEnv::empty(traits::Reveal::UserFacing);\n+                                if param_env.can_type_implement_copy(cx.tcx, ty, span).is_ok() {\n+                                    db.span_help(span, \"consider marking this type as Copy\");\n+                                }\n+                            }\n+                        }\n+\n                         let deref_span = spans_need_deref.get(&canonical_id);\n                         if_chain! {\n                             if match_type(cx, ty, &paths::VEC);"}, {"sha": "5d56a927bc0f7ed2e14d755be85d6e41ad719237", "filename": "clippy_lints/src/precedence.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/clippy_lints%2Fsrc%2Fprecedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/clippy_lints%2Fsrc%2Fprecedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fprecedence.rs?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -1,7 +1,7 @@\n use rustc::lint::*;\n use syntax::ast::*;\n use syntax::codemap::Spanned;\n-use utils::{snippet, span_lint_and_sugg};\n+use utils::{in_macro, snippet, span_lint_and_sugg};\n \n /// **What it does:** Checks for operations where precedence may be unclear\n /// and suggests to add parentheses. Currently it catches the following:\n@@ -37,6 +37,10 @@ impl LintPass for Precedence {\n \n impl EarlyLintPass for Precedence {\n     fn check_expr(&mut self, cx: &EarlyContext, expr: &Expr) {\n+        if in_macro(expr.span) {\n+            return;\n+        }\n+\n         if let ExprKind::Binary(Spanned { node: op, .. }, ref left, ref right) = expr.node {\n             let span_sugg = |expr: &Expr, sugg| {\n                 span_lint_and_sugg("}, {"sha": "c7e724625be37d5737f51d0f2e5adb01df880f7b", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 200, "deletions": 58, "changes": 258, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -50,6 +50,26 @@ declare_lint! {\n     \"usage of `Box<Vec<T>>`, vector elements are already on the heap\"\n }\n \n+/// **What it does:** Checks for use of `Option<Option<_>>` in function signatures and type\n+/// definitions\n+///\n+/// **Why is this bad?** `Option<_>` represents an optional value. `Option<Option<_>>`\n+/// represents an optional optional value which is logically the same thing as an optional\n+/// value but has an unneeded extra level of wrapping.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example**\n+/// ```rust\n+/// fn x() -> Option<Option<u32>> {\n+///     None\n+/// }\n+declare_lint! {\n+    pub OPTION_OPTION,\n+    Warn,\n+    \"usage of `Option<Option<T>>`\"\n+}\n+\n /// **What it does:** Checks for usage of any `LinkedList`, suggesting to use a\n /// `Vec` or a `VecDeque` (formerly called `RingBuf`).\n ///\n@@ -111,7 +131,7 @@ declare_lint! {\n \n impl LintPass for TypePass {\n     fn get_lints(&self) -> LintArray {\n-        lint_array!(BOX_VEC, LINKEDLIST, BORROWED_BOX)\n+        lint_array!(BOX_VEC, OPTION_OPTION, LINKEDLIST, BORROWED_BOX)\n     }\n }\n \n@@ -156,6 +176,23 @@ fn check_fn_decl(cx: &LateContext, decl: &FnDecl) {\n     }\n }\n \n+/// Check if `qpath` has last segment with type parameter matching `path`\n+fn match_type_parameter(cx: &LateContext, qpath: &QPath, path: &[&str]) -> bool {\n+    let last = last_path_segment(qpath);\n+    if_chain! {\n+        if let Some(ref params) = last.parameters;\n+        if !params.parenthesized;\n+        if let Some(ty) = params.types.get(0);\n+        if let TyPath(ref qpath) = ty.node;\n+        if let Some(did) = opt_def_id(cx.tables.qpath_def(qpath, cx.tcx.hir.node_to_hir_id(ty.id)));\n+        if match_def_path(cx.tcx, did, path);\n+        then {\n+            return true;\n+        }\n+    }\n+    false\n+}\n+\n /// Recursively check for `TypePass` lints in the given type. Stop at the first\n /// lint found.\n ///\n@@ -171,24 +208,26 @@ fn check_ty(cx: &LateContext, ast_ty: &hir::Ty, is_local: bool) {\n             let def = cx.tables.qpath_def(qpath, hir_id);\n             if let Some(def_id) = opt_def_id(def) {\n                 if Some(def_id) == cx.tcx.lang_items().owned_box() {\n-                    let last = last_path_segment(qpath);\n-                    if_chain! {\n-                        if let Some(ref params) = last.parameters;\n-                        if !params.parenthesized;\n-                        if let Some(vec) = params.types.get(0);\n-                        if let TyPath(ref qpath) = vec.node;\n-                        if let Some(did) = opt_def_id(cx.tables.qpath_def(qpath, cx.tcx.hir.node_to_hir_id(vec.id)));\n-                        if match_def_path(cx.tcx, did, &paths::VEC);\n-                        then {\n-                            span_help_and_lint(\n-                                cx,\n-                                BOX_VEC,\n-                                ast_ty.span,\n-                                \"you seem to be trying to use `Box<Vec<T>>`. Consider using just `Vec<T>`\",\n-                                \"`Vec<T>` is already on the heap, `Box<Vec<T>>` makes an extra allocation.\",\n-                            );\n-                            return; // don't recurse into the type\n-                        }\n+                    if match_type_parameter(cx, qpath, &paths::VEC) {\n+                        span_help_and_lint(\n+                            cx,\n+                            BOX_VEC,\n+                            ast_ty.span,\n+                            \"you seem to be trying to use `Box<Vec<T>>`. Consider using just `Vec<T>`\",\n+                            \"`Vec<T>` is already on the heap, `Box<Vec<T>>` makes an extra allocation.\",\n+                        );\n+                        return; // don't recurse into the type\n+                    }\n+                } else if match_def_path(cx.tcx, def_id, &paths::OPTION) {\n+                    if match_type_parameter(cx, qpath, &paths::OPTION) {\n+                        span_lint(\n+                            cx,\n+                            OPTION_OPTION,\n+                            ast_ty.span,\n+                            \"consider using `Option<T>` instead of `Option<Option<T>>` or a custom \\\n+                            enum if you need to distinguish all 3 cases\",\n+                        );\n+                        return; // don't recurse into the type\n                     }\n                 } else if match_def_path(cx.tcx, def_id, &paths::LINKED_LIST) {\n                     span_help_and_lint(\n@@ -322,25 +361,22 @@ declare_lint! {\n \n fn check_let_unit(cx: &LateContext, decl: &Decl) {\n     if let DeclLocal(ref local) = decl.node {\n-        match cx.tables.pat_ty(&local.pat).sty {\n-            ty::TyTuple(slice, _) if slice.is_empty() => {\n-                if in_external_macro(cx, decl.span) || in_macro(local.pat.span) {\n-                    return;\n-                }\n-                if higher::is_from_for_desugar(decl) {\n-                    return;\n-                }\n-                span_lint(\n-                    cx,\n-                    LET_UNIT_VALUE,\n-                    decl.span,\n-                    &format!(\n-                        \"this let-binding has unit value. Consider omitting `let {} =`\",\n-                        snippet(cx, local.pat.span, \"..\")\n-                    ),\n-                );\n-            },\n-            _ => (),\n+        if is_unit(cx.tables.pat_ty(&local.pat)) {\n+            if in_external_macro(cx, decl.span) || in_macro(local.pat.span) {\n+                return;\n+            }\n+            if higher::is_from_for_desugar(decl) {\n+                return;\n+            }\n+            span_lint(\n+                cx,\n+                LET_UNIT_VALUE,\n+                decl.span,\n+                &format!(\n+                    \"this let-binding has unit value. Consider omitting `let {} =`\",\n+                    snippet(cx, local.pat.span, \"..\")\n+                ),\n+            );\n         }\n     }\n }\n@@ -395,31 +431,118 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnitCmp {\n         }\n         if let ExprBinary(ref cmp, ref left, _) = expr.node {\n             let op = cmp.node;\n-            if op.is_comparison() {\n-                match cx.tables.expr_ty(left).sty {\n-                    ty::TyTuple(slice, _) if slice.is_empty() => {\n-                        let result = match op {\n-                            BiEq | BiLe | BiGe => \"true\",\n-                            _ => \"false\",\n-                        };\n-                        span_lint(\n-                            cx,\n-                            UNIT_CMP,\n-                            expr.span,\n-                            &format!(\n-                                \"{}-comparison of unit values detected. This will always be {}\",\n-                                op.as_str(),\n-                                result\n-                            ),\n-                        );\n-                    },\n-                    _ => (),\n-                }\n+            if op.is_comparison() && is_unit(cx.tables.expr_ty(left)) {\n+                let result = match op {\n+                    BiEq | BiLe | BiGe => \"true\",\n+                    _ => \"false\",\n+                };\n+                span_lint(\n+                    cx,\n+                    UNIT_CMP,\n+                    expr.span,\n+                    &format!(\n+                        \"{}-comparison of unit values detected. This will always be {}\",\n+                        op.as_str(),\n+                        result\n+                    ),\n+                );\n             }\n         }\n     }\n }\n \n+/// **What it does:** Checks for passing a unit value as an argument to a function without using a unit literal (`()`).\n+///\n+/// **Why is this bad?** This is likely the result of an accidental semicolon.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ```rust\n+/// foo({\n+///   let a = bar();\n+///   baz(a);\n+/// })\n+/// ```\n+declare_lint! {\n+    pub UNIT_ARG,\n+    Warn,\n+    \"passing unit to a function\"\n+}\n+\n+pub struct UnitArg;\n+\n+impl LintPass for UnitArg {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(UNIT_ARG)\n+    }\n+}\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnitArg {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n+        if in_macro(expr.span) {\n+            return;\n+        }\n+        match expr.node {\n+            ExprCall(_, ref args) | ExprMethodCall(_, _, ref args) => {\n+                for arg in args {\n+                    if is_unit(cx.tables.expr_ty(arg)) && !is_unit_literal(arg) {\n+                        let map = &cx.tcx.hir;\n+                        // apparently stuff in the desugaring of `?` can trigger this\n+                        // so check for that here\n+                        // only the calls to `Try::from_error` is marked as desugared,\n+                        // so we need to check both the current Expr and its parent.\n+                        if !is_questionmark_desugar_marked_call(expr) {\n+                            if_chain!{\n+                                let opt_parent_node = map.find(map.get_parent_node(expr.id));\n+                                if let Some(hir::map::NodeExpr(parent_expr)) = opt_parent_node;\n+                                if is_questionmark_desugar_marked_call(parent_expr);\n+                                then {}\n+                                else {\n+                                    // `expr` and `parent_expr` where _both_ not from\n+                                    // desugaring `?`, so lint\n+                                    span_lint_and_sugg(\n+                                        cx,\n+                                        UNIT_ARG,\n+                                        arg.span,\n+                                        \"passing a unit value to a function\",\n+                                        \"if you intended to pass a unit value, use a unit literal instead\",\n+                                        \"()\".to_string(),\n+                                    );\n+                                }\n+                            }\n+                        }\n+                    }\n+                }\n+            },\n+            _ => (),\n+        }\n+    }\n+}\n+\n+fn is_questionmark_desugar_marked_call(expr: &Expr) -> bool {\n+    use syntax_pos::hygiene::CompilerDesugaringKind;\n+    if let ExprCall(ref callee, _) = expr.node {\n+        callee.span.is_compiler_desugaring(CompilerDesugaringKind::QuestionMark)\n+    } else {\n+        false\n+    }\n+}\n+\n+fn is_unit(ty: Ty) -> bool {\n+    match ty.sty {\n+        ty::TyTuple(slice, _) if slice.is_empty() => true,\n+        _ => false,\n+    }\n+}\n+\n+fn is_unit_literal(expr: &Expr) -> bool {\n+    match expr.node {\n+        ExprTup(ref slice) if slice.is_empty() => true,\n+        _ => false,\n+    }\n+}\n+\n pub struct CastPass;\n \n /// **What it does:** Checks for casts from any numerical to a float type where\n@@ -1106,6 +1229,20 @@ enum AbsurdComparisonResult {\n }\n \n \n+fn is_cast_between_fixed_and_target<'a, 'tcx>(\n+    cx: &LateContext<'a, 'tcx>,\n+    expr: &'tcx Expr\n+) -> bool {\n+\n+    if let ExprCast(ref cast_exp, _) = expr.node {\n+        let precast_ty = cx.tables.expr_ty(cast_exp);\n+        let cast_ty = cx.tables.expr_ty(expr);\n+\n+        return is_isize_or_usize(precast_ty) != is_isize_or_usize(cast_ty)\n+    }\n+\n+    return false;\n+}\n \n fn detect_absurd_comparison<'a, 'tcx>(\n     cx: &LateContext<'a, 'tcx>,\n@@ -1123,6 +1260,11 @@ fn detect_absurd_comparison<'a, 'tcx>(\n         return None;\n     }\n \n+    // comparisons between fix sized types and target sized types are considered unanalyzable\n+    if is_cast_between_fixed_and_target(cx, lhs) || is_cast_between_fixed_and_target(cx, rhs) {\n+        return None;\n+    }\n+\n     let normalized = normalize_comparison(op, lhs, rhs);\n     let (rel, normalized_lhs, normalized_rhs) = if let Some(val) = normalized {\n         val"}, {"sha": "9ade2778e0c1059b472a09b1e9d27fe2be7af90c", "filename": "clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -406,9 +406,6 @@ fn print_item(cx: &LateContext, item: &hir::Item) {\n         hir::ItemTraitAlias(..) => {\n             println!(\"trait alias\");\n         }\n-        hir::ItemAutoImpl(_, ref _trait_ref) => {\n-            println!(\"auto impl\");\n-        },\n         hir::ItemImpl(_, _, _, _, Some(ref _trait_ref), _, _) => {\n             println!(\"trait impl\");\n         },"}, {"sha": "20244a19f4f08d9080c62eaf43c15329eda54687", "filename": "clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -55,6 +55,7 @@ pub const OPTION_SOME: [&str; 4] = [\"core\", \"option\", \"Option\", \"Some\"];\n pub const PTR_NULL: [&str; 2] = [\"ptr\", \"null\"];\n pub const PTR_NULL_MUT: [&str; 2] = [\"ptr\", \"null_mut\"];\n pub const RANGE: [&str; 3] = [\"core\", \"ops\", \"Range\"];\n+pub const RANGE_ARGUMENT_TRAIT: [&str; 3] = [\"alloc\", \"range\", \"RangeArgument\"];\n pub const RANGE_FROM: [&str; 3] = [\"core\", \"ops\", \"RangeFrom\"];\n pub const RANGE_FROM_STD: [&str; 3] = [\"std\", \"ops\", \"RangeFrom\"];\n pub const RANGE_FULL: [&str; 3] = [\"core\", \"ops\", \"RangeFull\"];"}, {"sha": "2f651917bc157c128ffe292f5646985d296b7ab1", "filename": "clippy_lints/src/utils/sugg.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fsugg.rs?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -15,6 +15,7 @@ use syntax::print::pprust::token_to_string;\n use syntax::util::parser::AssocOp;\n use syntax::ast;\n use utils::{higher, snippet, snippet_opt};\n+use syntax_pos::{BytePos, Pos};\n \n /// A helper type to build suggestion correctly handling parenthesis.\n pub enum Sugg<'a> {\n@@ -454,6 +455,19 @@ pub trait DiagnosticBuilderExt<'a, T: LintContext<'a>> {\n     /// }\");\n     /// ```\n     fn suggest_prepend_item(&mut self, cx: &T, item: Span, msg: &str, new_item: &str);\n+\n+    /// Suggest to completely remove an item.\n+    ///\n+    /// This will remove an item and all following whitespace until the next non-whitespace\n+    /// character. This should work correctly if item is on the same indentation level as the\n+    /// following item.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```rust,ignore\n+    /// db.suggest_remove_item(cx, item, \"remove this\")\n+    /// ```\n+    fn suggest_remove_item(&mut self, cx: &T, item: Span, msg: &str);\n }\n \n impl<'a, 'b, 'c, T: LintContext<'c>> DiagnosticBuilderExt<'c, T> for rustc_errors::DiagnosticBuilder<'b> {\n@@ -485,4 +499,21 @@ impl<'a, 'b, 'c, T: LintContext<'c>> DiagnosticBuilderExt<'c, T> for rustc_error\n             self.span_suggestion(span, msg, format!(\"{}\\n{}\", new_item, indent));\n         }\n     }\n+\n+    fn suggest_remove_item(&mut self, cx: &T, item: Span, msg: &str) {\n+        let mut remove_span = item;\n+        let fmpos = cx.sess()\n+            .codemap()\n+            .lookup_byte_offset(remove_span.next_point().hi());\n+\n+        if let Some(ref src) = fmpos.fm.src {\n+            let non_whitespace_offset = src[fmpos.pos.to_usize()..].find(|c| c != ' ' && c != '\\t' && c != '\\n');\n+\n+            if let Some(non_whitespace_offset) = non_whitespace_offset {\n+                remove_span = remove_span.with_hi(remove_span.hi() + BytePos(non_whitespace_offset as u32))\n+            }\n+        }\n+\n+        self.span_suggestion(remove_span, msg, String::new());\n+    }\n }"}, {"sha": "c5f9f914d330b3c6b79f628870eb5a91bc944bcb", "filename": "main", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/main", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/main", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/main?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0"}, {"sha": "bc766496cfb91801d3244152559c9fd2b7a9e6bc", "filename": "src/driver.rs", "status": "modified", "additions": 40, "deletions": 43, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/src%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/src%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver.rs?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -12,7 +12,7 @@ extern crate rustc_plugin;\n extern crate syntax;\n \n use rustc_driver::{driver, Compilation, CompilerCalls, RustcDefaultCalls};\n-use rustc::session::{config, CompileIncomplete, Session};\n+use rustc::session::{config, Session};\n use rustc::session::config::{ErrorOutputType, Input};\n use std::path::PathBuf;\n use std::process::Command;\n@@ -153,47 +153,44 @@ pub fn main() {\n         })\n         .expect(\"need to specify SYSROOT env var during clippy compilation, or use rustup or multirust\");\n \n-    rustc_driver::in_rustc_thread(|| {\n-        // Setting RUSTC_WRAPPER causes Cargo to pass 'rustc' as the first argument.\n-        // We're invoking the compiler programmatically, so we ignore this/\n-        let mut orig_args: Vec<String> = env::args().collect();\n-        if orig_args.len() <= 1 {\n-            std::process::exit(1);\n-        }\n-        if orig_args[1] == \"rustc\" {\n-            // we still want to be able to invoke it normally though\n-            orig_args.remove(1);\n-        }\n-        // this conditional check for the --sysroot flag is there so users can call\n-        // `clippy_driver` directly\n-        // without having to pass --sysroot or anything\n-        let mut args: Vec<String> = if orig_args.iter().any(|s| s == \"--sysroot\") {\n-            orig_args.clone()\n-        } else {\n-            orig_args\n-                .clone()\n-                .into_iter()\n-                .chain(Some(\"--sysroot\".to_owned()))\n-                .chain(Some(sys_root))\n-                .collect()\n-        };\n-\n-        // this check ensures that dependencies are built but not linted and the final\n-        // crate is\n-        // linted but not built\n-        let clippy_enabled = env::var(\"CLIPPY_TESTS\")\n-            .ok()\n-            .map_or(false, |val| val == \"true\")\n-            || orig_args.iter().any(|s| s == \"--emit=metadata\");\n-\n-        if clippy_enabled {\n-            args.extend_from_slice(&[\"--cfg\".to_owned(), r#\"feature=\"cargo-clippy\"\"#.to_owned()]);\n-        }\n+    // Setting RUSTC_WRAPPER causes Cargo to pass 'rustc' as the first argument.\n+    // We're invoking the compiler programmatically, so we ignore this/\n+    let mut orig_args: Vec<String> = env::args().collect();\n+    if orig_args.len() <= 1 {\n+        std::process::exit(1);\n+    }\n+    if orig_args[1] == \"rustc\" {\n+        // we still want to be able to invoke it normally though\n+        orig_args.remove(1);\n+    }\n+    // this conditional check for the --sysroot flag is there so users can call\n+    // `clippy_driver` directly\n+    // without having to pass --sysroot or anything\n+    let mut args: Vec<String> = if orig_args.iter().any(|s| s == \"--sysroot\") {\n+        orig_args.clone()\n+    } else {\n+        orig_args\n+            .clone()\n+            .into_iter()\n+            .chain(Some(\"--sysroot\".to_owned()))\n+            .chain(Some(sys_root))\n+            .collect()\n+    };\n+\n+    // this check ensures that dependencies are built but not linted and the final\n+    // crate is\n+    // linted but not built\n+    let clippy_enabled = env::var(\"CLIPPY_TESTS\")\n+        .ok()\n+        .map_or(false, |val| val == \"true\")\n+        || orig_args.iter().any(|s| s == \"--emit=metadata\");\n+\n+    if clippy_enabled {\n+        args.extend_from_slice(&[\"--cfg\".to_owned(), r#\"feature=\"cargo-clippy\"\"#.to_owned()]);\n+    }\n \n-        let mut ccc = ClippyCompilerCalls::new(clippy_enabled);\n-        let (result, _) = rustc_driver::run_compiler(&args, &mut ccc, None, None);\n-        if let Err(CompileIncomplete::Errored(_)) = result {\n-            std::process::exit(1);\n-        }\n-    }).expect(\"rustc_thread failed\");\n+    let mut ccc = ClippyCompilerCalls::new(clippy_enabled);\n+    rustc_driver::run(move || {\n+        rustc_driver::run_compiler(&args, &mut ccc, None, None)\n+    });\n }"}, {"sha": "2b0fea0f8b9f0746e9f0496b70d36ad594044719", "filename": "tests/compile-test.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fcompile-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fcompile-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-test.rs?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -46,7 +46,9 @@ fn config(dir: &'static str, mode: &'static str) -> compiletest::Config {\n     config.target_rustcflags = Some(format!(\"-L {0} -L {0}/deps -Dwarnings\", host_libs().display()));\n \n     config.mode = cfg_mode;\n-    config.build_base = {\n+    config.build_base = if rustc_test_suite().is_some() {\n+        PathBuf::from(\"/tmp/clippy_test_build_base\")\n+    } else {\n         let mut path = std::env::current_dir().unwrap();\n         path.push(\"target/debug/test_build_base\");\n         path"}, {"sha": "8ca9b5c92a4c3f485ae6dfebdcb3656f8591e82a", "filename": "tests/dogfood.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fdogfood.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fdogfood.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdogfood.rs?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -1,5 +1,8 @@\n #[test]\n fn dogfood() {\n+    if option_env!(\"RUSTC_TEST_SUITE\").is_some() {\n+        return;\n+    }\n     let root_dir = std::env::current_dir().unwrap();\n     for d in &[\".\", \"clippy_lints\"] {\n         std::env::set_current_dir(root_dir.join(d)).unwrap();"}, {"sha": "8c036e6c072557c3a4c257a39dc7098a19cf01c9", "filename": "tests/ui/absurd-extreme-comparisons.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fabsurd-extreme-comparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fabsurd-extreme-comparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fabsurd-extreme-comparisons.rs?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -50,3 +50,8 @@ impl PartialOrd<u32> for U {\n pub fn foo(val: U) -> bool {\n     val > std::u32::MAX\n }\n+\n+pub fn bar(len: u64) -> bool {\n+    // This is OK as we are casting from target sized to fixed size\n+    len >= std::usize::MAX as u64\n+}"}, {"sha": "2b1e9ad66feb58340e3ad72412cfccace7ea8564", "filename": "tests/ui/absurd-extreme-comparisons.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fabsurd-extreme-comparisons.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fabsurd-extreme-comparisons.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fabsurd-extreme-comparisons.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -143,3 +143,5 @@ error: <-comparison of unit values detected. This will always be false\n    |\n    = note: `-D unit-cmp` implied by `-D warnings`\n \n+error: aborting due to 18 previous errors\n+"}, {"sha": "dda28433d7a9afdefc49cbfa9ed773151159c2ba", "filename": "tests/ui/approx_const.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fapprox_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fapprox_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fapprox_const.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -114,3 +114,5 @@ error: approximate value of `f{32, 64}::consts::SQRT_2` found. Consider using it\n 55 |     let my_sq2 = 1.4142;\n    |                  ^^^^^^\n \n+error: aborting due to 19 previous errors\n+"}, {"sha": "ad4a02e219012c65a916b14139e91dd8a66f070e", "filename": "tests/ui/arithmetic.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Farithmetic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Farithmetic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Farithmetic.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -69,3 +69,5 @@ error: floating-point arithmetic detected\n 29 |     -f;\n    |     ^^\n \n+error: aborting due to 11 previous errors\n+"}, {"sha": "d730b012932ac5f317f9b05585ef963e44e6c92b", "filename": "tests/ui/array_indexing.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Farray_indexing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Farray_indexing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Farray_indexing.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -116,3 +116,5 @@ error: range is out of bounds\n 44 |     &empty[..4];\n    |      ^^^^^^^^^^\n \n+error: aborting due to 19 previous errors\n+"}, {"sha": "2123507e2ef6dbded32d0f203517b93ba6bbe778", "filename": "tests/ui/assign_ops.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fassign_ops.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fassign_ops.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassign_ops.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -134,3 +134,5 @@ error: manual implementation of an assign operation\n 40 |     s = s + \"bla\";\n    |     ^^^^^^^^^^^^^ help: replace it with: `s += \"bla\"`\n \n+error: aborting due to 22 previous errors\n+"}, {"sha": "0ff211259c036f16cf525e3b5031540b39973324", "filename": "tests/ui/assign_ops2.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fassign_ops2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fassign_ops2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassign_ops2.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -48,3 +48,5 @@ error: variable appears on both sides of an assignment operation\n 15 |     a &= a & 1;\n    |     ^^^^^^^^^^ help: replace it with: `a &= 1`\n \n+error: aborting due to 8 previous errors\n+"}, {"sha": "f743399a6069e341f3267fdb5ec0dbff7e784735", "filename": "tests/ui/attrs.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fattrs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fattrs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fattrs.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -20,3 +20,5 @@ error: the since field must contain a semver-compliant version\n 30 | #[deprecated(since = \"1\")]\n    |              ^^^^^^^^^^^\n \n+error: aborting due to 3 previous errors\n+"}, {"sha": "6aad98ff528821bddb6130405c3d3ff1c952fdad", "filename": "tests/ui/bit_masks.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fbit_masks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fbit_masks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbit_masks.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -106,3 +106,5 @@ error: ineffective bit mask: `x | 1` compared to `8`, is the same as x compared\n 55 |     x | 1 >= 8;\n    |     ^^^^^^^^^^\n \n+error: aborting due to 17 previous errors\n+"}, {"sha": "68fbe27a01eec0cf5c361e886d289e361c3d31b8", "filename": "tests/ui/blacklisted_name.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fblacklisted_name.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fblacklisted_name.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fblacklisted_name.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -84,3 +84,5 @@ error: use of a blacklisted/placeholder name `baz`\n 35 |     if let Some(ref mut baz) = Some(42) {}\n    |                         ^^^\n \n+error: aborting due to 14 previous errors\n+"}, {"sha": "4b7d12598ecfa346dc411622215c115385a1ff3c", "filename": "tests/ui/block_in_if_condition.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fblock_in_if_condition.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fblock_in_if_condition.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fblock_in_if_condition.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -50,3 +50,5 @@ error: this boolean expression can be simplified\n    |\n    = note: `-D nonminimal-bool` implied by `-D warnings`\n \n+error: aborting due to 5 previous errors\n+"}, {"sha": "4436980bc117fd222c98dbf99ef065c7de907b26", "filename": "tests/ui/bool_comparison.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fbool_comparison.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fbool_comparison.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbool_comparison.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -24,3 +24,5 @@ error: equality checks against false can be replaced by a negation\n 10 |     if false == x { \"yes\" } else { \"no\" };\n    |        ^^^^^^^^^^ help: try simplifying it as shown: `!x`\n \n+error: aborting due to 4 previous errors\n+"}, {"sha": "c88a7a7be608fb307625d7f5c83d7d7752569aff", "filename": "tests/ui/booleans.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fbooleans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fbooleans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbooleans.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -175,3 +175,5 @@ error: this boolean expression can be simplified\n 58 |     let _ = !c ^ c || !a.is_some();\n    |             ^^^^^^^^^^^^^^^^^^^^^^ help: try: `!c ^ c || a.is_none()`\n \n+error: aborting due to 21 previous errors\n+"}, {"sha": "2cf0ea79626c91cc4d28aed099a2803c7f18996d", "filename": "tests/ui/borrow_box.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fborrow_box.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fborrow_box.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrow_box.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -28,3 +28,5 @@ error: you seem to be trying to use `&Box<T>`. Consider using just `&T`\n 22 |     fn test4(a: &Box<bool>);\n    |                 ^^^^^^^^^^ help: try: `&bool`\n \n+error: aborting due to 4 previous errors\n+"}, {"sha": "254d07713862eb9515164423889bfbc775552e1b", "filename": "tests/ui/box_vec.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fbox_vec.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fbox_vec.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox_vec.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -7,3 +7,5 @@ error: you seem to be trying to use `Box<Vec<T>>`. Consider using just `Vec<T>`\n    = note: `-D box-vec` implied by `-D warnings`\n    = help: `Vec<T>` is already on the heap, `Box<Vec<T>>` makes an extra allocation.\n \n+error: aborting due to previous error\n+"}, {"sha": "eb4c73b65c69782d6cd841fa366b564337b1cb48", "filename": "tests/ui/builtin-type-shadow.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fbuiltin-type-shadow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fbuiltin-type-shadow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbuiltin-type-shadow.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -17,3 +17,5 @@ error[E0308]: mismatched types\n   = note: expected type `u32`\n              found type `{integer}`\n \n+error: aborting due to 2 previous errors\n+"}, {"sha": "307edecfde1a097b5ed07b9536bc61f77b562213", "filename": "tests/ui/bytecount.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fbytecount.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fbytecount.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbytecount.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -22,3 +22,5 @@ error: You appear to be counting bytes the naive way\n 22 |     let _ = x.iter().filter(|a| b + 1 == **a).count(); // naive byte count\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: Consider using the bytecount crate: `bytecount::count(x, b + 1)`\n \n+error: aborting due to 3 previous errors\n+"}, {"sha": "0a008cb68bb3d0cd62f17dfb8a5d556b3966a867", "filename": "tests/ui/cast.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fcast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fcast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -178,3 +178,5 @@ error: casting to the same type is unnecessary (`bool` -> `bool`)\n 39 |     false as bool;\n    |     ^^^^^^^^^^^^^\n \n+error: aborting due to 28 previous errors\n+"}, {"sha": "a60f838fae86b2485ef05112eff8772526b3e686", "filename": "tests/ui/cast_lossless_float.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fcast_lossless_float.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fcast_lossless_float.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_lossless_float.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -60,3 +60,5 @@ error: casting u32 to f64 may become silently lossy if types change\n 14 |     1u32 as f64;\n    |     ^^^^^^^^^^^ help: try: `f64::from(1u32)`\n \n+error: aborting due to 10 previous errors\n+"}, {"sha": "19d6176193c76fb681f92b186820cd1bb1eaa87d", "filename": "tests/ui/cast_lossless_integer.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fcast_lossless_integer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fcast_lossless_integer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_lossless_integer.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -108,3 +108,5 @@ error: casting u32 to u64 may become silently lossy if types change\n 23 |     1u32 as u64;\n    |     ^^^^^^^^^^^ help: try: `u64::from(1u32)`\n \n+error: aborting due to 18 previous errors\n+"}, {"sha": "1c4b12bcebf8d0f9cf1e52ad6f6f033c4d1e9167", "filename": "tests/ui/cast_size.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fcast_size.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fcast_size.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_size.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -120,3 +120,5 @@ error: casting i32 to usize may lose the sign of the value\n 22 |     1i32 as usize;\n    |     ^^^^^^^^^^^^^\n \n+error: aborting due to 19 previous errors\n+"}, {"sha": "fcf038fe002db9d32e7fb59641416203cdb210f2", "filename": "tests/ui/char_lit_as_u8.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fchar_lit_as_u8.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fchar_lit_as_u8.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fchar_lit_as_u8.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -8,3 +8,5 @@ error: casting character literal to u8. `char`s are 4 bytes wide in rust, so cas\n   = help: Consider using a byte literal instead:\n           b'a'\n \n+error: aborting due to previous error\n+"}, {"sha": "46f3d3d57e0c7fbd8429091b872a5312bc2d5dc9", "filename": "tests/ui/cmp_nan.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fcmp_nan.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fcmp_nan.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcmp_nan.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -72,3 +72,5 @@ error: doomed comparison with NAN, use `std::{f32,f64}::is_nan()` instead\n 21 |     y >= std::f64::NAN;\n    |     ^^^^^^^^^^^^^^^^^^\n \n+error: aborting due to 12 previous errors\n+"}, {"sha": "481a4d0f9420586a868c16b7077cd2d6bbf1fa7f", "filename": "tests/ui/cmp_null.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fcmp_null.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fcmp_null.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcmp_null.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -12,3 +12,5 @@ error: Comparing with null is better expressed by the .is_null() method\n 16 |     if m == ptr::null_mut() {\n    |        ^^^^^^^^^^^^^^^^^^^^\n \n+error: aborting due to 2 previous errors\n+"}, {"sha": "d40fb4b8add877faa25126d3efe775dcc435e751", "filename": "tests/ui/cmp_owned.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fcmp_owned.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fcmp_owned.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcmp_owned.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -36,3 +36,5 @@ error: this creates an owned instance just for comparison\n 30 |         self.to_owned() == *other\n    |         ^^^^^^^^^^^^^^^ try calling implementing the comparison without allocating\n \n+error: aborting due to 6 previous errors\n+"}, {"sha": "69f2013c1dc847f05293ff40369d97ffc1ca3310", "filename": "tests/ui/collapsible_if.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fcollapsible_if.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fcollapsible_if.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcollapsible_if.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -240,3 +240,5 @@ help: try\n 112 | }\n     |\n \n+error: aborting due to 13 previous errors\n+"}, {"sha": "829a22c233f036334a04fbd4c2ff88b283c50eef", "filename": "tests/ui/complex_types.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fcomplex_types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fcomplex_types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcomplex_types.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -90,3 +90,5 @@ error: very complex type used. Consider factoring parts into `type` definitions\n 40 |     let _y: Vec<Vec<Box<(u32, u32, u32, u32)>>> = vec![];\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+error: aborting due to 15 previous errors\n+"}, {"sha": "bc44cebdbbbf06fa1d3628aa670a45f19701018c", "filename": "tests/ui/conf_bad_arg.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fconf_bad_arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fconf_bad_arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconf_bad_arg.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -1,8 +1,10 @@\n-error: compiler plugins are experimental and possibly buggy (see issue #29597)\n+error[E0658]: compiler plugins are experimental and possibly buggy (see issue #29597)\n  --> $DIR/conf_bad_arg.rs:4:1\n   |\n 4 | #![plugin(clippy(conf_file))]\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: add #![feature(plugin)] to the crate attributes to enable\n \n+error: aborting due to previous error\n+"}, {"sha": "d42369265229e254583efe8a56e3a23070c8a921", "filename": "tests/ui/conf_bad_toml.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fconf_bad_toml.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fconf_bad_toml.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconf_bad_toml.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -1,8 +1,10 @@\n-error: compiler plugins are experimental and possibly buggy (see issue #29597)\n+error[E0658]: compiler plugins are experimental and possibly buggy (see issue #29597)\n  --> $DIR/conf_bad_toml.rs:4:1\n   |\n 4 | #![plugin(clippy(conf_file=\"../ui/conf_bad_toml.toml\"))]\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: add #![feature(plugin)] to the crate attributes to enable\n \n+error: aborting due to previous error\n+"}, {"sha": "440437d140e298fe0f86b24b568595b07a429cfe", "filename": "tests/ui/conf_bad_type.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fconf_bad_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fconf_bad_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconf_bad_type.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -1,8 +1,10 @@\n-error: compiler plugins are experimental and possibly buggy (see issue #29597)\n+error[E0658]: compiler plugins are experimental and possibly buggy (see issue #29597)\n  --> $DIR/conf_bad_type.rs:4:1\n   |\n 4 | #![plugin(clippy(conf_file=\"../ui/conf_bad_type.toml\"))]\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: add #![feature(plugin)] to the crate attributes to enable\n \n+error: aborting due to previous error\n+"}, {"sha": "19c8e5c977787bd793db5533c76a95792605a067", "filename": "tests/ui/conf_french_blacklisted_name.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fconf_french_blacklisted_name.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fconf_french_blacklisted_name.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconf_french_blacklisted_name.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -1,8 +1,10 @@\n-error: compiler plugins are experimental and possibly buggy (see issue #29597)\n+error[E0658]: compiler plugins are experimental and possibly buggy (see issue #29597)\n  --> $DIR/conf_french_blacklisted_name.rs:2:1\n   |\n 2 | #![plugin(clippy(conf_file=\"../auxiliary/conf_french_blacklisted_name.toml\"))]\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: add #![feature(plugin)] to the crate attributes to enable\n \n+error: aborting due to previous error\n+"}, {"sha": "7a0aebb572eb959c220e0f0d05b9ca8d0078a1c2", "filename": "tests/ui/conf_path_non_string.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fconf_path_non_string.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fconf_path_non_string.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconf_path_non_string.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -1,8 +1,10 @@\n-error: compiler plugins are experimental and possibly buggy (see issue #29597)\n+error[E0658]: compiler plugins are experimental and possibly buggy (see issue #29597)\n  --> $DIR/conf_path_non_string.rs:3:1\n   |\n 3 | #![plugin(clippy(conf_file=42))]\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: add #![feature(plugin)] to the crate attributes to enable\n \n+error: aborting due to previous error\n+"}, {"sha": "d1957c311adaab1f7119899b433b4514f36433a9", "filename": "tests/ui/conf_unknown_key.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fconf_unknown_key.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fconf_unknown_key.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconf_unknown_key.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -1,8 +1,10 @@\n-error: compiler plugins are experimental and possibly buggy (see issue #29597)\n+error[E0658]: compiler plugins are experimental and possibly buggy (see issue #29597)\n  --> $DIR/conf_unknown_key.rs:4:1\n   |\n 4 | #![plugin(clippy(conf_file=\"../auxiliary/conf_unknown_key.toml\"))]\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: add #![feature(plugin)] to the crate attributes to enable\n \n+error: aborting due to previous error\n+"}, {"sha": "db33744c7a9bf857bf2169f3167cc0d4dd5c144f", "filename": "tests/ui/const_static_lifetime.stderr", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fconst_static_lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fconst_static_lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst_static_lifetime.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -2,79 +2,81 @@ error: Constants have by default a `'static` lifetime\n  --> $DIR/const_static_lifetime.rs:4:17\n   |\n 4 | const VAR_ONE: &'static str = \"Test constant #1\"; // ERROR Consider removing 'static.\n-  |                 ^^^^^^^ help: consider removing `'static`\n+  |                -^^^^^^^---- help: consider removing `'static`: `&str`\n   |\n   = note: `-D const-static-lifetime` implied by `-D warnings`\n \n error: Constants have by default a `'static` lifetime\n  --> $DIR/const_static_lifetime.rs:8:21\n   |\n 8 | const VAR_THREE: &[&'static str] = &[\"one\", \"two\"]; // ERROR Consider removing 'static\n-  |                     ^^^^^^^ help: consider removing `'static`\n+  |                    -^^^^^^^---- help: consider removing `'static`: `&str`\n \n error: Constants have by default a `'static` lifetime\n   --> $DIR/const_static_lifetime.rs:10:32\n    |\n 10 | const VAR_FOUR: (&str, (&str, &'static str), &'static str) = (\"on\", (\"th\", \"th\"), \"on\"); // ERROR Consider removing 'static\n-   |                                ^^^^^^^ help: consider removing `'static`\n+   |                               -^^^^^^^---- help: consider removing `'static`: `&str`\n \n error: Constants have by default a `'static` lifetime\n   --> $DIR/const_static_lifetime.rs:10:47\n    |\n 10 | const VAR_FOUR: (&str, (&str, &'static str), &'static str) = (\"on\", (\"th\", \"th\"), \"on\"); // ERROR Consider removing 'static\n-   |                                               ^^^^^^^ help: consider removing `'static`\n+   |                                              -^^^^^^^---- help: consider removing `'static`: `&str`\n \n error: Constants have by default a `'static` lifetime\n   --> $DIR/const_static_lifetime.rs:12:18\n    |\n 12 | const VAR_FIVE: &'static [&[&'static str]] = &[&[\"test\"], &[\"other one\"]]; // ERROR Consider removing 'static\n-   |                  ^^^^^^^ help: consider removing `'static`\n+   |                 -^^^^^^^------------------ help: consider removing `'static`: `&[&[&'static str]]`\n \n error: Constants have by default a `'static` lifetime\n   --> $DIR/const_static_lifetime.rs:12:30\n    |\n 12 | const VAR_FIVE: &'static [&[&'static str]] = &[&[\"test\"], &[\"other one\"]]; // ERROR Consider removing 'static\n-   |                              ^^^^^^^ help: consider removing `'static`\n+   |                             -^^^^^^^---- help: consider removing `'static`: `&str`\n \n error: Constants have by default a `'static` lifetime\n   --> $DIR/const_static_lifetime.rs:14:17\n    |\n 14 | const VAR_SIX: &'static u8 = &5;\n-   |                 ^^^^^^^ help: consider removing `'static`\n+   |                -^^^^^^^--- help: consider removing `'static`: `&u8`\n \n error: Constants have by default a `'static` lifetime\n   --> $DIR/const_static_lifetime.rs:16:29\n    |\n 16 | const VAR_SEVEN: &[&(&str, &'static [&'static str])] = &[&(\"one\", &[\"other one\"])];\n-   |                             ^^^^^^^ help: consider removing `'static`\n+   |                            -^^^^^^^--------------- help: consider removing `'static`: `&[&'static str]`\n \n error: Constants have by default a `'static` lifetime\n   --> $DIR/const_static_lifetime.rs:16:39\n    |\n 16 | const VAR_SEVEN: &[&(&str, &'static [&'static str])] = &[&(\"one\", &[\"other one\"])];\n-   |                                       ^^^^^^^ help: consider removing `'static`\n+   |                                      -^^^^^^^---- help: consider removing `'static`: `&str`\n \n error: Constants have by default a `'static` lifetime\n   --> $DIR/const_static_lifetime.rs:18:20\n    |\n 18 | const VAR_HEIGHT: &'static Foo = &Foo {};\n-   |                    ^^^^^^^ help: consider removing `'static`\n+   |                   -^^^^^^^---- help: consider removing `'static`: `&Foo`\n \n error: Constants have by default a `'static` lifetime\n   --> $DIR/const_static_lifetime.rs:20:19\n    |\n 20 | const VAR_SLICE: &'static [u8] = b\"Test constant #1\"; // ERROR Consider removing 'static.\n-   |                   ^^^^^^^ help: consider removing `'static`\n+   |                  -^^^^^^^----- help: consider removing `'static`: `&[u8]`\n \n error: Constants have by default a `'static` lifetime\n   --> $DIR/const_static_lifetime.rs:22:19\n    |\n 22 | const VAR_TUPLE: &'static (u8, u8) = &(1, 2); // ERROR Consider removing 'static.\n-   |                   ^^^^^^^ help: consider removing `'static`\n+   |                  -^^^^^^^--------- help: consider removing `'static`: `&(u8, u8)`\n \n error: Constants have by default a `'static` lifetime\n   --> $DIR/const_static_lifetime.rs:24:19\n    |\n 24 | const VAR_ARRAY: &'static [u8; 1] = b\"T\"; // ERROR Consider removing 'static.\n-   |                   ^^^^^^^ help: consider removing `'static`\n+   |                  -^^^^^^^-------- help: consider removing `'static`: `&[u8; 1]`\n+\n+error: aborting due to 13 previous errors\n "}, {"sha": "9accb310d121337aea7e37ffc024ba640793d126", "filename": "tests/ui/copies.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fcopies.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fcopies.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcopies.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -33,3 +33,5 @@ error: This else block is redundant.\n             }\n             \n \n+error: aborting due to 2 previous errors\n+"}, {"sha": "973f26a96db4ecafc1048a03ebd55b44d8b27d7f", "filename": "tests/ui/cstring.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fcstring.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fcstring.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcstring.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -12,3 +12,5 @@ help: assign the `CString` to a variable to extend its lifetime\n 7 |     CString::new(\"foo\").unwrap().as_ptr();\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+error: aborting due to previous error\n+"}, {"sha": "43676762d6c04094be8c2d7b6f2da552023e3c7c", "filename": "tests/ui/cyclomatic_complexity.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fcyclomatic_complexity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fcyclomatic_complexity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcyclomatic_complexity.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -269,3 +269,5 @@ error: the function has a cyclomatic complexity of 8\n     |\n     = help: you could split it up into multiple smaller functions\n \n+error: aborting due to 20 previous errors\n+"}, {"sha": "e671b34393b539dbc2d11a44e6e2ad96ad818ec0", "filename": "tests/ui/cyclomatic_complexity_attr_used.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fcyclomatic_complexity_attr_used.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fcyclomatic_complexity_attr_used.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcyclomatic_complexity_attr_used.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -13,3 +13,5 @@ error: the function has a cyclomatic complexity of 3\n    = note: `-D cyclomatic-complexity` implied by `-D warnings`\n    = help: you could split it up into multiple smaller functions\n \n+error: aborting due to previous error\n+"}, {"sha": "7d5d594cfa1c53911318ca175f0b0eee44f288b6", "filename": "tests/ui/deprecated.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fdeprecated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fdeprecated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdeprecated.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -24,3 +24,5 @@ error: lint unstable_as_mut_slice has been removed: `Vec::as_mut_slice` has been\n 10 | #[warn(unstable_as_mut_slice)]\n    |        ^^^^^^^^^^^^^^^^^^^^^\n \n+error: aborting due to 4 previous errors\n+"}, {"sha": "ffeed948ba55c6eea704aa069d4af62d9baa7c8d", "filename": "tests/ui/derive.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fderive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fderive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderive.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -106,3 +106,5 @@ note: consider deriving `Clone` or removing `Copy`\n 87 | | }\n    | |_^\n \n+error: aborting due to 7 previous errors\n+"}, {"sha": "0d7b1ca6fd66ca3488f08eba0daaae89e6cdcffb", "filename": "tests/ui/diverging_sub_expression.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fdiverging_sub_expression.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fdiverging_sub_expression.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdiverging_sub_expression.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -36,3 +36,5 @@ error: sub-expression diverges\n 37 |             _ => true || break,\n    |                          ^^^^^\n \n+error: aborting due to 6 previous errors\n+"}, {"sha": "de0422e17eddacff89b120df1e45d772680ad042", "filename": "tests/ui/dlist.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fdlist.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fdlist.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdlist.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -47,3 +47,5 @@ error: I see you're using a LinkedList! Perhaps you meant some other data struct\n    |\n    = help: a VecDeque might work\n \n+error: aborting due to 6 previous errors\n+"}, {"sha": "f38678e89aac234b8488534a00cc05f3ff97ea52", "filename": "tests/ui/doc.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fdoc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fdoc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdoc.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -180,3 +180,5 @@ error: you should put bare URLs between `<`/`>` or make a proper Markdown link\n 168 | /// Not ok: http://www.unicode.org/reports/tr9/#Reordering_Resolved_Levels\n     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+error: aborting due to 30 previous errors\n+"}, {"sha": "fd4da8820a24cefc6a79bfde38a4eb539e581ad9", "filename": "tests/ui/double_neg.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fdouble_neg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fdouble_neg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdouble_neg.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -6,3 +6,5 @@ error: `--x` could be misinterpreted as pre-decrement by C programmers, is usual\n   |\n   = note: `-D double-neg` implied by `-D warnings`\n \n+error: aborting due to previous error\n+"}, {"sha": "a77b08528c497ba1a741e71a2fe78b56843eab6b", "filename": "tests/ui/double_parens.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fdouble_parens.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fdouble_parens.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdouble_parens.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -30,3 +30,5 @@ error: Consider removing unnecessary double parentheses\n 32 |     (())\n    |     ^^^^\n \n+error: aborting due to 5 previous errors\n+"}, {"sha": "3ea7bf9735af14cfb4e49f6fd7fde33b9038cb2c", "filename": "tests/ui/drop_forget_copy.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fdrop_forget_copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fdrop_forget_copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdrop_forget_copy.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -72,3 +72,5 @@ note: argument has type SomeStruct\n 42 |     forget(s4);\n    |            ^^\n \n+error: aborting due to 6 previous errors\n+"}, {"sha": "1654fdd2861ad7301f3533948589c749033a0038", "filename": "tests/ui/drop_forget_ref.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fdrop_forget_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fdrop_forget_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdrop_forget_ref.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -216,3 +216,5 @@ note: argument has type &SomeStruct\n 59 |     std::mem::forget(&SomeStruct);\n    |                      ^^^^^^^^^^^\n \n+error: aborting due to 18 previous errors\n+"}, {"sha": "c926f57f154f900a6c5a4531d52660141d408fd7", "filename": "tests/ui/duplicate_underscore_argument.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fduplicate_underscore_argument.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fduplicate_underscore_argument.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fduplicate_underscore_argument.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -6,3 +6,5 @@ error: `darth` already exists, having another argument having almost the same na\n   |\n   = note: `-D duplicate-underscore-argument` implied by `-D warnings`\n \n+error: aborting due to previous error\n+"}, {"sha": "4f019819effc00e266def274169b56ddcead578f", "filename": "tests/ui/else_if_without_else.rs", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Felse_if_without_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Felse_if_without_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Felse_if_without_else.rs?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -0,0 +1,50 @@\n+#![warn(clippy)]\n+#![warn(else_if_without_else)]\n+\n+fn bla1() -> bool { unimplemented!() }\n+fn bla2() -> bool { unimplemented!() }\n+fn bla3() -> bool { unimplemented!() }\n+\n+fn main() {\n+    if bla1() {\n+        println!(\"if\");\n+    }\n+\n+    if bla1() {\n+        println!(\"if\");\n+    } else {\n+        println!(\"else\");\n+    }\n+\n+    if bla1() {\n+        println!(\"if\");\n+    } else if bla2() {\n+        println!(\"else if\");\n+    } else {\n+        println!(\"else\")\n+    }\n+\n+    if bla1() {\n+        println!(\"if\");\n+    } else if bla2() {\n+        println!(\"else if 1\");\n+    } else if bla3() {\n+        println!(\"else if 2\");\n+    } else {\n+        println!(\"else\")\n+    }\n+\n+    if bla1() {\n+        println!(\"if\");\n+    } else if bla2() { //~ ERROR else if without else\n+        println!(\"else if\");\n+    }\n+\n+    if bla1() {\n+        println!(\"if\");\n+    } else if bla2() {\n+        println!(\"else if 1\");\n+    } else if bla3() { //~ ERROR else if without else\n+        println!(\"else if 2\");\n+    }\n+}"}, {"sha": "b8a5031fbcff60e236c207eac3536fbd8d471ff7", "filename": "tests/ui/else_if_without_else.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Felse_if_without_else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Felse_if_without_else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Felse_if_without_else.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -0,0 +1,22 @@\n+error: if expression with an `else if`, but without a final `else`\n+  --> $DIR/else_if_without_else.rs:39:12\n+   |\n+39 |       } else if bla2() { //~ ERROR else if without else\n+   |  ____________^\n+40 | |         println!(\"else if\");\n+41 | |     }\n+   | |_____^ help: add an `else` block here\n+   |\n+   = note: `-D else-if-without-else` implied by `-D warnings`\n+\n+error: if expression with an `else if`, but without a final `else`\n+  --> $DIR/else_if_without_else.rs:47:12\n+   |\n+47 |       } else if bla3() { //~ ERROR else if without else\n+   |  ____________^\n+48 | |         println!(\"else if 2\");\n+49 | |     }\n+   | |_____^ help: add an `else` block here\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "ca377cee822153808cabe921037c03485452d2ad", "filename": "tests/ui/empty_enum.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fempty_enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fempty_enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fempty_enum.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -11,3 +11,5 @@ help: consider using the uninhabited type `!` or a wrapper around it\n 7 | enum Empty {}\n   | ^^^^^^^^^^^^^\n \n+error: aborting due to previous error\n+"}, {"sha": "09c4a8822802a0ab01ebfd386abe70ccce98c834", "filename": "tests/ui/entry.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fentry.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fentry.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fentry.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -42,3 +42,5 @@ error: usage of `contains_key` followed by `insert` on a `BTreeMap`\n 37 |     if !m.contains_key(&k) { foo(); m.insert(k, v) } else { None };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `m.entry(k)`\n \n+error: aborting due to 7 previous errors\n+"}, {"sha": "2d53618c1b18dfe73078c225f96a09887fbc613f", "filename": "tests/ui/enum_glob_use.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fenum_glob_use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fenum_glob_use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fenum_glob_use.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -12,3 +12,5 @@ error: don't use glob imports for enum variants\n 12 | use self::Enum::*;\n    | ^^^^^^^^^^^^^^^^^^\n \n+error: aborting due to 2 previous errors\n+"}, {"sha": "e33e29ec78e1228452a834d1d42f93c01f0b48dd", "filename": "tests/ui/enum_variants.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fenum_variants.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fenum_variants.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fenum_variants.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -97,3 +97,5 @@ error: All variants have the same prefix: `With`\n    = note: `-D pub-enum-variant-names` implied by `-D warnings`\n    = help: remove the prefixes and use full paths to the variants instead of glob imports\n \n+error: aborting due to 10 previous errors\n+"}, {"sha": "d6a137c6fe4dfb84af5c1c1ece94ca4bb20a3902", "filename": "tests/ui/enums_clike.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fenums_clike.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fenums_clike.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fenums_clike.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -48,3 +48,5 @@ error: Clike enum variant discriminant is not portable to 32-bit targets\n 37 |     A = 0x1_0000_0000,\n    |     ^^^^^^^^^^^^^^^^^\n \n+error: aborting due to 8 previous errors\n+"}, {"sha": "46c0ac108cda2c3944993967db11877a1c789698", "filename": "tests/ui/eq_op.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Feq_op.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Feq_op.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feq_op.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -204,3 +204,5 @@ error: taken reference of right operand\n    |\n    = note: `-D op-ref` implied by `-D warnings`\n \n+error: aborting due to 33 previous errors\n+"}, {"sha": "310c41c541bc0ad9f624890edd3f92a352d1eb21", "filename": "tests/ui/erasing_op.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Ferasing_op.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Ferasing_op.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferasing_op.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -18,3 +18,5 @@ error: this operation will always return zero. This is likely not the intended o\n 11 |     0 / x;\n    |     ^^^^^\n \n+error: aborting due to 3 previous errors\n+"}, {"sha": "5dca265c2a400c4bb2a3d01b9c5b479f80d4d5fc", "filename": "tests/ui/eta.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Feta.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Feta.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feta.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -32,3 +32,5 @@ error: redundant closure found\n 18 |     let e = Some(1u8).map(|a| generic(a));\n    |                           ^^^^^^^^^^^^^^ help: remove closure as shown: `generic`\n \n+error: aborting due to 5 previous errors\n+"}, {"sha": "2e01a167c01b3a9969c310e23d8d054419759748", "filename": "tests/ui/eval_order_dependence.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Feval_order_dependence.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Feval_order_dependence.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feval_order_dependence.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -47,3 +47,5 @@ note: whether read occurs before this write depends on evaluation order\n 21 |         x += { x = 20; 2 };\n    |                ^^^^^^\n \n+error: aborting due to 4 previous errors\n+"}, {"sha": "7a2a0c66f2378e8be9d954f1ce8c4677db2cccf1", "filename": "tests/ui/explicit_write.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fexplicit_write.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fexplicit_write.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexplicit_write.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -36,3 +36,5 @@ error: use of `stderr().write_fmt(...).unwrap()`. Consider using `eprint!` inste\n 21 |         std::io::stderr().write_fmt(format_args!(\"test\")).unwrap();\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+error: aborting due to 6 previous errors\n+"}, {"sha": "c8af77ecab3c4543b90f87f3a4e858b1ebf5b970", "filename": "tests/ui/fallible_impl_from.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Ffallible_impl_from.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Ffallible_impl_from.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffallible_impl_from.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -89,3 +89,5 @@ note: potential failure(s)\n    |             ^^^^^^^^^^^^^^^^^^\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n+error: aborting due to 4 previous errors\n+"}, {"sha": "cec03a47bfdebfd8cd0dc939fff6e01865b4201c", "filename": "tests/ui/filter_methods.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Ffilter_methods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Ffilter_methods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffilter_methods.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -36,3 +36,5 @@ error: called `filter_map(p).map(q)` on an `Iterator`. This is more succinctly e\n 25 | |                                 .map(|x| x.checked_mul(2))\n    | |__________________________________________________________^\n \n+error: aborting due to 4 previous errors\n+"}, {"sha": "a764403d0397b40fc1aba4d76e0c0b993858d052", "filename": "tests/ui/float_cmp.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Ffloat_cmp.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Ffloat_cmp.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloat_cmp.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -95,3 +95,5 @@ note: std::f32::EPSILON and std::f64::EPSILON are available.\n 57 |     twice(x) != twice(ONE as f64);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+error: aborting due to 8 previous errors\n+"}, {"sha": "6367ec73c963083b41f7181c8f7cf869c020da4a", "filename": "tests/ui/float_cmp_const.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Ffloat_cmp_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Ffloat_cmp_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloat_cmp_const.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -83,3 +83,5 @@ note: std::f32::EPSILON and std::f64::EPSILON are available.\n 25 |     v != ONE;\n    |     ^^^^^^^^\n \n+error: aborting due to 7 previous errors\n+"}, {"sha": "1e7ff40e1aca40daf264cb27720fbc5a1e74e4ab", "filename": "tests/ui/for_loop.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Ffor_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Ffor_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loop.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -565,3 +565,5 @@ error: it looks like you're manually copying between slices\n 549 | |     }\n     | |_____^ help: try replacing the loop by: `dst[..src.len()].clone_from_slice(&src[..])`\n \n+error: aborting due to 59 previous errors\n+"}, {"sha": "5f5bdc02a59209f7d4353c63ee8adf8a5f35bc5a", "filename": "tests/ui/format.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fformat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fformat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fformat.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -6,3 +6,5 @@ error: useless use of `format!`\n   |\n   = note: `-D useless-format` implied by `-D warnings`\n \n+error: aborting due to previous error\n+"}, {"sha": "266de262ea0aa94bcae4ae45e88b2484eda999dd", "filename": "tests/ui/formatting.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fformatting.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fformatting.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fformatting.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -86,3 +86,5 @@ error: possibly missing a comma here\n    |\n    = note: to remove this lint, add a comma or write the expr in a single line\n \n+error: aborting due to 10 previous errors\n+"}, {"sha": "0a97748954f348f10b35342505f34f846b6e0382", "filename": "tests/ui/functions.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Ffunctions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Ffunctions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffunctions.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -75,3 +75,5 @@ error: this public function dereferences a raw pointer but is not marked `unsafe\n 63 |         unsafe { std::ptr::read(p) };\n    |                                 ^\n \n+error: aborting due to 12 previous errors\n+"}, {"sha": "b5ada86253199fdca77a44534cf4bc3f5fe243d3", "filename": "tests/ui/get_unwrap.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fget_unwrap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fget_unwrap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fget_unwrap.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -60,3 +60,5 @@ error: called `.get_mut().unwrap()` on a VecDeque. Using `[]` is more clear and\n 40 |         *some_vecdeque.get_mut(0).unwrap() = 1;\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&mut some_vecdeque[0]`\n \n+error: aborting due to 10 previous errors\n+"}, {"sha": "1ae3f229dd88c7fb08b5279217ce9e1ab08a3ddd", "filename": "tests/ui/identity_conversion.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fidentity_conversion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fidentity_conversion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fidentity_conversion.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -40,3 +40,5 @@ error: identical conversion\n 39 |     let _ = String::from(\"foo\".to_string());\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `String::from()`: `\"foo\".to_string()`\n \n+error: aborting due to 6 previous errors\n+"}, {"sha": "45f579ce832f97f4eeb80f73987ce2c220084b1c", "filename": "tests/ui/identity_op.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fidentity_op.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fidentity_op.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fidentity_op.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -48,3 +48,5 @@ error: the operation is ineffective. Consider reducing it to `u`\n 32 |     u & 255;\n    |     ^^^^^^^\n \n+error: aborting due to 8 previous errors\n+"}, {"sha": "e7bfd0275d8e46d912ad1b293f4bdd3d7683e0a8", "filename": "tests/ui/if_let_redundant_pattern_matching.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fif_let_redundant_pattern_matching.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fif_let_redundant_pattern_matching.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_let_redundant_pattern_matching.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -24,3 +24,5 @@ error: redundant pattern matching, consider using `is_some()`\n 17 |     if let Some(_) = Some(42) {\n    |     -------^^^^^^^----------- help: try this: `if Some(42).is_some()`\n \n+error: aborting due to 4 previous errors\n+"}, {"sha": "b920ef3b625065e1a6af856927da59d0579af81e", "filename": "tests/ui/if_not_else.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fif_not_else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fif_not_else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_not_else.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -23,3 +23,5 @@ error: Unnecessary `!=` operation\n    |\n    = help: change to `==` and swap the blocks of the if/else\n \n+error: aborting due to 2 previous errors\n+"}, {"sha": "cdba5372b3c815c3329775fa8ecf651dbf2e40a5", "filename": "tests/ui/implicit_hasher.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fimplicit_hasher.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fimplicit_hasher.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimplicit_hasher.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -133,3 +133,5 @@ help: consider adding a type parameter\n 78 |         pub fn $name<S: ::std::hash::BuildHasher>(_map: &mut HashMap<i32, i32>, _set: &mut HashSet<i32, S>) {\n    |\n \n+error: aborting due to 10 previous errors\n+"}, {"sha": "12d9e3cf0fd7ff8c4858b3cfef994cc6abc641a0", "filename": "tests/ui/inconsistent_digit_grouping.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Finconsistent_digit_grouping.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Finconsistent_digit_grouping.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finconsistent_digit_grouping.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -39,3 +39,5 @@ error: digits grouped inconsistently by underscores\n   |\n   = help: consider: 1.234_567_8_f32\n \n+error: aborting due to 5 previous errors\n+"}, {"sha": "f79db778488450be59bd5c6af100e049b1163c6c", "filename": "tests/ui/infinite_iter.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Finfinite_iter.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Finfinite_iter.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finfinite_iter.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -96,3 +96,5 @@ error: possible infinite iteration detected\n 30 |     (0..).all(|x| x == 24); // maybe infinite iter\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n+error: aborting due to 14 previous errors\n+"}, {"sha": "82e073184d3541f222488cdfba405f9710e9abde", "filename": "tests/ui/inline_fn_without_body.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Finline_fn_without_body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Finline_fn_without_body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finline_fn_without_body.rs?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -0,0 +1,23 @@\n+\n+\n+\n+#![warn(inline_fn_without_body)]\n+#![allow(inline_always)]\n+\n+trait Foo {\n+    #[inline]\n+    fn default_inline();\n+\n+    #[inline(always)]fn always_inline();\n+\n+    #[inline(never)]\n+\n+    fn never_inline();\n+\n+    #[inline]\n+    fn has_body() {\n+    }\n+}\n+\n+fn main() {\n+}"}, {"sha": "fd26013d11ea9049820d893cd1b4f77810a80fa2", "filename": "tests/ui/inline_fn_without_body.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Finline_fn_without_body.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Finline_fn_without_body.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finline_fn_without_body.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -0,0 +1,27 @@\n+error: use of `#[inline]` on trait method `default_inline` which has no body\n+ --> $DIR/inline_fn_without_body.rs:8:5\n+  |\n+8 |       #[inline]\n+  |  _____-^^^^^^^^\n+9 | |     fn default_inline();\n+  | |____- help: remove\n+  |\n+  = note: `-D inline-fn-without-body` implied by `-D warnings`\n+\n+error: use of `#[inline]` on trait method `always_inline` which has no body\n+  --> $DIR/inline_fn_without_body.rs:11:5\n+   |\n+11 |     #[inline(always)]fn always_inline();\n+   |     ^^^^^^^^^^^^^^^^^ help: remove\n+\n+error: use of `#[inline]` on trait method `never_inline` which has no body\n+  --> $DIR/inline_fn_without_body.rs:13:5\n+   |\n+13 |       #[inline(never)]\n+   |  _____-^^^^^^^^^^^^^^^\n+14 | |\n+15 | |     fn never_inline();\n+   | |____- help: remove\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "deecaffa1cf1235a4b014e5f33abfaf55f630a29", "filename": "tests/ui/int_plus_one.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fint_plus_one.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fint_plus_one.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fint_plus_one.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -40,3 +40,5 @@ help: change `>= y + 1` to `> y` as shown\n 14 |     y < x;\n    |     ^^^^^\n \n+error: aborting due to 4 previous errors\n+"}, {"sha": "420fed017444c39375792948c409e1755bb4746b", "filename": "tests/ui/invalid_ref.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Finvalid_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Finvalid_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finvalid_ref.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -47,3 +47,5 @@ error: reference to uninitialized memory\n    |\n    = help: Creation of a null reference is undefined behavior; see https://doc.rust-lang.org/reference/behavior-considered-undefined.html\n \n+error: aborting due to 6 previous errors\n+"}, {"sha": "eb46802899e71692ddbac225cd278e9d4dd93fc1", "filename": "tests/ui/invalid_upcast_comparisons.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Finvalid_upcast_comparisons.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Finvalid_upcast_comparisons.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finvalid_upcast_comparisons.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -162,3 +162,5 @@ error: because of the numeric bounds on `u8` prior to casting, this expression i\n 78 |     -5 >= (u8 as i32);\n    |     ^^^^^^^^^^^^^^^^^\n \n+error: aborting due to 27 previous errors\n+"}, {"sha": "6c8f108d9f6e4089db623854e38a7c4515ca6115", "filename": "tests/ui/is_unit_expr.rs", "status": "removed", "additions": 0, "deletions": 79, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/a324a2bc38738f288b1fd0bd39c1d203aef88bd4/tests%2Fui%2Fis_unit_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a324a2bc38738f288b1fd0bd39c1d203aef88bd4/tests%2Fui%2Fis_unit_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fis_unit_expr.rs?ref=a324a2bc38738f288b1fd0bd39c1d203aef88bd4", "patch": "@@ -1,79 +0,0 @@\n-\n-\n-#![warn(unit_expr)]\n-#[allow(unused_variables)]\n-\n-fn main() {\n-    // lint should note removing the semicolon from \"baz\"\n-    let x = {\n-        \"foo\";\n-        \"baz\";\n-    };\n-\n-\n-    // lint should ignore false positive.\n-    let y = if true {\n-        \"foo\"\n-    } else {\n-        return;\n-    };\n-\n-    // lint should note removing semicolon from \"bar\"\n-    let z = if true {\n-        \"foo\";\n-    } else {\n-        \"bar\";\n-    };\n-\n-\n-    let a1 = Some(5);\n-\n-    // lint should ignore false positive\n-    let a2 = match a1 {\n-        Some(x) => x,\n-        _ => {\n-            return;\n-        },\n-    };\n-\n-    // lint should note removing the semicolon after `x;`\n-    let a3 = match a1 {\n-        Some(x) => {\n-            x;\n-        },\n-        _ => {\n-            0;\n-        },\n-    };\n-    \n-    loop {\n-        let a2 = match a1 {\n-            Some(x) => x,\n-            _ => {\n-                break;\n-            },\n-        };\n-        let a2 = match a1 {\n-            Some(x) => x,\n-            _ => {\n-                continue;\n-            },\n-        };\n-    }\n-}\n-\n-pub fn foo() -> i32 {\n-    let a2 = match None {\n-        Some(x) => x,\n-        _ => {\n-            return 42;\n-        },\n-    };\n-    55\n-}\n-\n-pub fn issue_2160() {\n-    let x1 = {};\n-    let x2 = if true {} else {};\n-    let x3 = match None { Some(_) => {}, None => {}, };\n-}"}, {"sha": "64a7ad86b7065d3dcc5944a1bbd8c2a612879dd2", "filename": "tests/ui/is_unit_expr.stderr", "status": "removed", "additions": 0, "deletions": 71, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/a324a2bc38738f288b1fd0bd39c1d203aef88bd4/tests%2Fui%2Fis_unit_expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a324a2bc38738f288b1fd0bd39c1d203aef88bd4/tests%2Fui%2Fis_unit_expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fis_unit_expr.stderr?ref=a324a2bc38738f288b1fd0bd39c1d203aef88bd4", "patch": "@@ -1,71 +0,0 @@\n-error: This expression evaluates to the Unit type ()\n-  --> $DIR/is_unit_expr.rs:8:13\n-   |\n-8  |       let x = {\n-   |  _____________^\n-9  | |         \"foo\";\n-10 | |         \"baz\";\n-11 | |     };\n-   | |_____^\n-   |\n-   = note: `-D unit-expr` implied by `-D warnings`\n-note: Consider removing the trailing semicolon\n-  --> $DIR/is_unit_expr.rs:10:9\n-   |\n-10 |         \"baz\";\n-   |         ^^^^^^\n-\n-error: This expression evaluates to the Unit type ()\n-  --> $DIR/is_unit_expr.rs:22:13\n-   |\n-22 |       let z = if true {\n-   |  _____________^\n-23 | |         \"foo\";\n-24 | |     } else {\n-25 | |         \"bar\";\n-26 | |     };\n-   | |_____^\n-   |\n-note: Consider removing the trailing semicolon\n-  --> $DIR/is_unit_expr.rs:25:9\n-   |\n-25 |         \"bar\";\n-   |         ^^^^^^\n-\n-error: This expression evaluates to the Unit type ()\n-  --> $DIR/is_unit_expr.rs:40:14\n-   |\n-40 |       let a3 = match a1 {\n-   |  ______________^\n-41 | |         Some(x) => {\n-42 | |             x;\n-43 | |         },\n-...  |\n-46 | |         },\n-47 | |     };\n-   | |_____^\n-   |\n-note: Consider removing the trailing semicolon\n-  --> $DIR/is_unit_expr.rs:42:13\n-   |\n-42 |             x;\n-   |             ^^\n-\n-error: This expression evaluates to the Unit type ()\n-  --> $DIR/is_unit_expr.rs:76:14\n-   |\n-76 |     let x1 = {};\n-   |              ^^\n-\n-error: This expression evaluates to the Unit type ()\n-  --> $DIR/is_unit_expr.rs:77:14\n-   |\n-77 |     let x2 = if true {} else {};\n-   |              ^^^^^^^^^^^^^^^^^^\n-\n-error: This expression evaluates to the Unit type ()\n-  --> $DIR/is_unit_expr.rs:78:14\n-   |\n-78 |     let x3 = match None { Some(_) => {}, None => {}, };\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-"}, {"sha": "ec1296caf83efbca8fe8a4ce6ea3b1c3cad3dfe9", "filename": "tests/ui/item_after_statement.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fitem_after_statement.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fitem_after_statement.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fitem_after_statement.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -12,3 +12,5 @@ error: adding items after statements is confusing, since items exist from the st\n 17 |     fn foo() { println!(\"foo\"); }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+error: aborting due to 2 previous errors\n+"}, {"sha": "6fc285274a0ba2e855b44766268b4b76d71bbec9", "filename": "tests/ui/large_digit_groups.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Flarge_digit_groups.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Flarge_digit_groups.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flarge_digit_groups.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -47,3 +47,5 @@ error: digit groups should be smaller\n   |\n   = help: consider: 123_456.123_456_f32\n \n+error: aborting due to 6 previous errors\n+"}, {"sha": "5e938337bc004864d69a0d53284aacfc682e4ef0", "filename": "tests/ui/large_enum_variant.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Flarge_enum_variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Flarge_enum_variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flarge_enum_variant.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -66,3 +66,5 @@ help: consider boxing the large fields to reduce the total size of the enum\n 49 |     StructLikeLarge2 { x: Box<[i32; 8000]> },\n    |                           ^^^^^^^^^^^^^^^^\n \n+error: aborting due to 6 previous errors\n+"}, {"sha": "6e3cf1b3ca1d96484d671681a7af1f7ce3802ae8", "filename": "tests/ui/len_zero.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Flen_zero.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Flen_zero.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flen_zero.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -94,3 +94,5 @@ error: trait `DependsOnFoo` has a `len` method but no (possibly inherited) `is_e\n 191 | | }\n     | |_^\n \n+error: aborting due to 12 previous errors\n+"}, {"sha": "b912373f95c67b7af710ede2e4455260f490c543", "filename": "tests/ui/let_if_seq.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Flet_if_seq.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Flet_if_seq.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_if_seq.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -46,3 +46,5 @@ error: `if _ { .. } else { .. }` is an expression\n     |\n     = note: you might not need `mut` at all\n \n+error: aborting due to 4 previous errors\n+"}, {"sha": "459b2eafa26f8e1060fd5ac8ced57c2211c718c5", "filename": "tests/ui/let_return.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Flet_return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Flet_return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_return.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -23,3 +23,5 @@ note: this expression can be directly returned\n 15 |         let x = 5;\n    |                 ^\n \n+error: aborting due to 2 previous errors\n+"}, {"sha": "da579ec80f315eba317a32ebf597c9ed40e1c574", "filename": "tests/ui/let_unit.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Flet_unit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Flet_unit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_unit.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -12,3 +12,5 @@ error: this let-binding has unit value. Consider omitting `let _a =`\n 18 |         let _a = ();\n    |         ^^^^^^^^^^^^\n \n+error: aborting due to 2 previous errors\n+"}, {"sha": "23b353d13d2ee2d53103c7612f8ef64166d8c54f", "filename": "tests/ui/lifetimes.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Flifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Flifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flifetimes.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -86,3 +86,5 @@ error: explicit lifetimes given in parameter types where they could be elided\n 120 | fn trait_bound_ok<'a, T: WithLifetime<'static>>(_: &'a u8, _: T) { unimplemented!() }\n     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+error: aborting due to 14 previous errors\n+"}, {"sha": "2f9a6813b96d097a1ac7a86fe4774e26130ccd3f", "filename": "tests/ui/lint_pass.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Flint_pass.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Flint_pass.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint_pass.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -6,3 +6,5 @@ error: the lint `MISSING_LINT` is not added to any `LintPass`\n    |\n    = note: `-D lint-without-lint-pass` implied by `-D warnings`\n \n+error: aborting due to previous error\n+"}, {"sha": "92540b7346265488b55fd16741e0559cef6f5644", "filename": "tests/ui/literals.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fliterals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fliterals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fliterals.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -86,3 +86,5 @@ help: if you mean to use an octal constant, use `0o`\n 30 |     let fail8 = 0o123;\n    |                 ^^^^^\n \n+error: aborting due to 11 previous errors\n+"}, {"sha": "c29f37918517634cf66b958b42dbe7997ec906a5", "filename": "tests/ui/map_clone.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fmap_clone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fmap_clone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_clone.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -98,3 +98,5 @@ error: you seem to be using .map() to clone the contents of an Option, consider\n    = help: try\n            x.as_ref().cloned()\n \n+error: aborting due to 11 previous errors\n+"}, {"sha": "fd22247cb1f53dc2eff6467edb9879750d9cc60d", "filename": "tests/ui/matches.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fmatches.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fmatches.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatches.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -448,3 +448,5 @@ error: use as_mut() instead\n 329 | |     };\n     | |_____^ help: try this: `mut_owned.as_mut()`\n \n+error: aborting due to 37 previous errors\n+"}, {"sha": "6e7a44694e14f8c3d176d07d190c4ddebf9e4072", "filename": "tests/ui/mem_forget.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fmem_forget.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fmem_forget.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmem_forget.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -18,3 +18,5 @@ error: usage of mem::forget on Drop type\n 24 |     forgetSomething(eight);\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n+error: aborting due to 3 previous errors\n+"}, {"sha": "149fa4c17966395d2f9d43bea5b274950c81503b", "filename": "tests/ui/methods.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fmethods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fmethods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -533,3 +533,5 @@ error: used unwrap() on an Option value. If you don't want to handle the None ca\n     |\n     = note: `-D option-unwrap-used` implied by `-D warnings`\n \n+error: aborting due to 66 previous errors\n+"}, {"sha": "de4c4e16fa036b99f5f4eb135071d32ee2fa0e5c", "filename": "tests/ui/min_max.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fmin_max.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fmin_max.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmin_max.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -42,3 +42,5 @@ error: this min/max combination leads to constant result\n 30 |     max(min(s, \"Apple\"), \"Zoo\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+error: aborting due to 7 previous errors\n+"}, {"sha": "54834f9021c9c9904c95ebaf69edb65abf553039", "filename": "tests/ui/missing-doc.stderr", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fmissing-doc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fmissing-doc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing-doc.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -264,9 +264,5 @@ error: missing documentation for a function\n 191 |         fn also_undocumented2() {}\n     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: missing documentation for a function\n-   --> $DIR/missing-doc.rs:202:1\n-    |\n-202 | fn main() {}\n-    | ^^^^^^^^^^^^\n+error: aborting due to 39 previous errors\n "}, {"sha": "c9d3319db1b6a1aa6c187298414a3cb22b8faeff", "filename": "tests/ui/module_inception.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fmodule_inception.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fmodule_inception.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmodule_inception.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -16,3 +16,5 @@ error: module has the same name as its containing module\n 14 | |     }\n    | |_____^\n \n+error: aborting due to 2 previous errors\n+"}, {"sha": "ccfca7154e042deaf5c844636f5f5d455d705534", "filename": "tests/ui/modulo_one.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fmodulo_one.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fmodulo_one.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmodulo_one.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -6,3 +6,5 @@ error: any number modulo 1 will be 0\n   |\n   = note: `-D modulo-one` implied by `-D warnings`\n \n+error: aborting due to previous error\n+"}, {"sha": "a7cbc0b7a096fc00718347eebb8070b1a6835e6e", "filename": "tests/ui/mut_from_ref.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fmut_from_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fmut_from_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmut_from_ref.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -59,3 +59,5 @@ note: immutable borrow here\n 32 | fn fail_double<'a, 'b>(x: &'a u32, y: &'a u32, z: &'b mut u32) -> &'a mut u32 {\n    |                           ^^^^^^^     ^^^^^^^\n \n+error: aborting due to 5 previous errors\n+"}, {"sha": "d1f05ea8091fb448256b00b93d7d95367a489ddb", "filename": "tests/ui/mut_mut.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fmut_mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fmut_mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmut_mut.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -57,3 +57,5 @@ error: generally you want to avoid `&mut &mut _` if possible\n 35 |         let y : &mut &mut &mut u32 = &mut &mut &mut 2;\n    |                      ^^^^^^^^^^^^^\n \n+error: aborting due to 9 previous errors\n+"}, {"sha": "d7be7ae1e6fc89c07fa9146791fc8df80a31bcb9", "filename": "tests/ui/mut_range_bound.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fmut_range_bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fmut_range_bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmut_range_bound.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -30,3 +30,5 @@ error: attempt to mutate range bound within loop; note that the range of the loo\n 40 |         let n = &mut m;  // warning\n    |                      ^\n \n+error: aborting due to 5 previous errors\n+"}, {"sha": "73df19bf1583986de94f7bb945ccc655cbeef9c9", "filename": "tests/ui/mut_reference.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fmut_reference.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fmut_reference.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmut_reference.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -18,3 +18,5 @@ error: The function/method `takes_an_immutable_reference` doesn't need a mutable\n 28 |     my_struct.takes_an_immutable_reference(&mut 42);\n    |                                            ^^^^^^^\n \n+error: aborting due to 3 previous errors\n+"}, {"sha": "354f9891c1788b0089c05340e24c58c25f523ae3", "filename": "tests/ui/mutex_atomic.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fmutex_atomic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fmutex_atomic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmutex_atomic.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -44,3 +44,5 @@ error: Consider using an AtomicIsize instead of a Mutex here. If you just want t\n 16 |     Mutex::new(0i32);\n    |     ^^^^^^^^^^^^^^^^\n \n+error: aborting due to 7 previous errors\n+"}, {"sha": "63e0632445f69429278ad1650900a97e09701bb9", "filename": "tests/ui/needless_bool.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fneedless_bool.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fneedless_bool.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_bool.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -66,3 +66,5 @@ error: this if-then-else expression returns a bool literal\n 50 |     if x && y { return false } else { return true };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: you can reduce it to: `return !(x && y)`\n \n+error: aborting due to 11 previous errors\n+"}, {"sha": "fde38508b32333eec5f9b47629805d4ca6617562", "filename": "tests/ui/needless_borrow.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fneedless_borrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fneedless_borrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_borrow.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -38,3 +38,5 @@ error: this pattern creates a reference to a reference\n 50 |     let _ = v.iter().filter(|&ref a| a.is_empty());\n    |                               ^^^^^ help: change this to: `a`\n \n+error: aborting due to 6 previous errors\n+"}, {"sha": "2a8cf4348d395d692efb34cdfe218bc82b68c211", "filename": "tests/ui/needless_borrowed_ref.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fneedless_borrowed_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fneedless_borrowed_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_borrowed_ref.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -24,3 +24,5 @@ error: this pattern takes a reference on something that is being de-referenced\n 42 |         (&Animal::Cat(v), &ref k) | (&ref k, &Animal::Cat(v)) => (), // lifetime mismatch error if there is no '&ref'\n    |                                      ^^^^^^ help: try removing the `&ref` part and just keep: `k`\n \n+error: aborting due to 4 previous errors\n+"}, {"sha": "3e0368892a43104f546639381fede9b134080ded", "filename": "tests/ui/needless_continue.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fneedless_continue.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fneedless_continue.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_continue.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -55,3 +55,5 @@ error: There is no need for an explicit `else` block for this `if` expression\n            println!(\"Jabber\");\n            ...\n \n+error: aborting due to 2 previous errors\n+"}, {"sha": "3459d3820b71e8d94d68e60c9490524d29d36d55", "filename": "tests/ui/needless_pass_by_value.rs", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_pass_by_value.rs?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -2,7 +2,9 @@\n \n \n #![warn(needless_pass_by_value)]\n-#![allow(dead_code, single_match, if_let_redundant_pattern_matching, many_single_char_names)]\n+#![allow(dead_code, single_match, if_let_redundant_pattern_matching, many_single_char_names, option_option)]\n+\n+#![feature(collections_range)]\n \n use std::borrow::Borrow;\n use std::convert::AsRef;\n@@ -110,4 +112,29 @@ trait FalsePositive {\n     }\n }\n \n+// shouldn't warn on extern funcs\n+extern \"C\" fn ext(x: String) -> usize { x.len() }\n+\n+// whitelist RangeArgument\n+fn range<T: ::std::collections::range::RangeArgument<usize>>(range: T) {\n+    let _ = range.start();\n+}\n+\n+struct CopyWrapper(u32);\n+\n+fn bar_copy(x: u32, y: CopyWrapper) {\n+    assert_eq!(x, 42);\n+    assert_eq!(y.0, 42);\n+}\n+\n+// x and y should be warned, but z is ok\n+fn test_destructure_copy(x: CopyWrapper, y: CopyWrapper, z: CopyWrapper) {\n+    let CopyWrapper(s) = z; // moved\n+    let CopyWrapper(ref t) = y; // not moved\n+    let CopyWrapper(_) = y; // still not moved\n+\n+    assert_eq!(x.0, s);\n+    println!(\"{}\", t);\n+}\n+\n fn main() {}"}, {"sha": "469c16fa3d5bf080b4bf9d242049b3fcd6502759", "filename": "tests/ui/needless_pass_by_value.stderr", "status": "modified", "additions": 104, "deletions": 42, "changes": 146, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fneedless_pass_by_value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fneedless_pass_by_value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_pass_by_value.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -1,126 +1,188 @@\n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:12:23\n+  --> $DIR/needless_pass_by_value.rs:14:23\n    |\n-12 | fn foo<T: Default>(v: Vec<T>, w: Vec<T>, mut x: Vec<T>, y: Vec<T>) -> Vec<T> {\n+14 | fn foo<T: Default>(v: Vec<T>, w: Vec<T>, mut x: Vec<T>, y: Vec<T>) -> Vec<T> {\n    |                       ^^^^^^ help: consider changing the type to: `&[T]`\n    |\n    = note: `-D needless-pass-by-value` implied by `-D warnings`\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:26:11\n+  --> $DIR/needless_pass_by_value.rs:28:11\n    |\n-26 | fn bar(x: String, y: Wrapper) {\n+28 | fn bar(x: String, y: Wrapper) {\n    |           ^^^^^^ help: consider changing the type to: `&str`\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:26:22\n+  --> $DIR/needless_pass_by_value.rs:28:22\n    |\n-26 | fn bar(x: String, y: Wrapper) {\n+28 | fn bar(x: String, y: Wrapper) {\n    |                      ^^^^^^^ help: consider taking a reference instead: `&Wrapper`\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:32:71\n+  --> $DIR/needless_pass_by_value.rs:34:71\n    |\n-32 | fn test_borrow_trait<T: Borrow<str>, U: AsRef<str>, V>(t: T, u: U, v: V) {\n+34 | fn test_borrow_trait<T: Borrow<str>, U: AsRef<str>, V>(t: T, u: U, v: V) {\n    |                                                                       ^ help: consider taking a reference instead: `&V`\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:44:18\n+  --> $DIR/needless_pass_by_value.rs:46:18\n    |\n-44 | fn test_match(x: Option<Option<String>>, y: Option<Option<String>>) {\n+46 | fn test_match(x: Option<Option<String>>, y: Option<Option<String>>) {\n    |                  ^^^^^^^^^^^^^^^^^^^^^^\n help: consider taking a reference instead\n    |\n-44 | fn test_match(x: &Option<Option<String>>, y: Option<Option<String>>) {\n-45 |     match *x {\n+46 | fn test_match(x: &Option<Option<String>>, y: Option<Option<String>>) {\n+47 |     match *x {\n    |\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:57:24\n+  --> $DIR/needless_pass_by_value.rs:59:24\n    |\n-57 | fn test_destructure(x: Wrapper, y: Wrapper, z: Wrapper) {\n+59 | fn test_destructure(x: Wrapper, y: Wrapper, z: Wrapper) {\n    |                        ^^^^^^^ help: consider taking a reference instead: `&Wrapper`\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:57:36\n+  --> $DIR/needless_pass_by_value.rs:59:36\n    |\n-57 | fn test_destructure(x: Wrapper, y: Wrapper, z: Wrapper) {\n+59 | fn test_destructure(x: Wrapper, y: Wrapper, z: Wrapper) {\n    |                                    ^^^^^^^\n help: consider taking a reference instead\n    |\n-57 | fn test_destructure(x: Wrapper, y: &Wrapper, z: Wrapper) {\n-58 |     let Wrapper(s) = z; // moved\n-59 |     let Wrapper(ref t) = *y; // not moved\n-60 |     let Wrapper(_) = *y; // still not moved\n+59 | fn test_destructure(x: Wrapper, y: &Wrapper, z: Wrapper) {\n+60 |     let Wrapper(s) = z; // moved\n+61 |     let Wrapper(ref t) = *y; // not moved\n+62 |     let Wrapper(_) = *y; // still not moved\n    |\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:73:49\n+  --> $DIR/needless_pass_by_value.rs:75:49\n    |\n-73 | fn test_blanket_ref<T: Foo, S: Serialize>(_foo: T, _serializable: S) {}\n+75 | fn test_blanket_ref<T: Foo, S: Serialize>(_foo: T, _serializable: S) {}\n    |                                                 ^ help: consider taking a reference instead: `&T`\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:75:18\n+  --> $DIR/needless_pass_by_value.rs:77:18\n    |\n-75 | fn issue_2114(s: String, t: String, u: Vec<i32>, v: Vec<i32>) {\n+77 | fn issue_2114(s: String, t: String, u: Vec<i32>, v: Vec<i32>) {\n    |                  ^^^^^^ help: consider taking a reference instead: `&String`\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:75:29\n+  --> $DIR/needless_pass_by_value.rs:77:29\n    |\n-75 | fn issue_2114(s: String, t: String, u: Vec<i32>, v: Vec<i32>) {\n+77 | fn issue_2114(s: String, t: String, u: Vec<i32>, v: Vec<i32>) {\n    |                             ^^^^^^\n help: consider changing the type to\n    |\n-75 | fn issue_2114(s: String, t: &str, u: Vec<i32>, v: Vec<i32>) {\n+77 | fn issue_2114(s: String, t: &str, u: Vec<i32>, v: Vec<i32>) {\n    |                             ^^^^\n help: change `t.clone()` to\n    |\n-77 |     let _ = t.to_string();\n+79 |     let _ = t.to_string();\n    |             ^^^^^^^^^^^^^\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:75:40\n+  --> $DIR/needless_pass_by_value.rs:77:40\n    |\n-75 | fn issue_2114(s: String, t: String, u: Vec<i32>, v: Vec<i32>) {\n+77 | fn issue_2114(s: String, t: String, u: Vec<i32>, v: Vec<i32>) {\n    |                                        ^^^^^^^^ help: consider taking a reference instead: `&Vec<i32>`\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:75:53\n+  --> $DIR/needless_pass_by_value.rs:77:53\n    |\n-75 | fn issue_2114(s: String, t: String, u: Vec<i32>, v: Vec<i32>) {\n+77 | fn issue_2114(s: String, t: String, u: Vec<i32>, v: Vec<i32>) {\n    |                                                     ^^^^^^^^\n help: consider changing the type to\n    |\n-75 | fn issue_2114(s: String, t: String, u: Vec<i32>, v: &[i32]) {\n+77 | fn issue_2114(s: String, t: String, u: Vec<i32>, v: &[i32]) {\n    |                                                     ^^^^^^\n help: change `v.clone()` to\n    |\n-79 |     let _ = v.to_owned();\n+81 |     let _ = v.to_owned();\n    |             ^^^^^^^^^^^^\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:87:12\n+  --> $DIR/needless_pass_by_value.rs:89:12\n    |\n-87 |         s: String,\n+89 |         s: String,\n    |            ^^^^^^ help: consider changing the type to: `&str`\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:88:12\n+  --> $DIR/needless_pass_by_value.rs:90:12\n    |\n-88 |         t: String,\n+90 |         t: String,\n    |            ^^^^^^ help: consider taking a reference instead: `&String`\n \n error: this argument is passed by value, but not consumed in the function body\n-   --> $DIR/needless_pass_by_value.rs:100:13\n+   --> $DIR/needless_pass_by_value.rs:102:13\n     |\n-100 |         _u: U,\n+102 |         _u: U,\n     |             ^ help: consider taking a reference instead: `&U`\n \n error: this argument is passed by value, but not consumed in the function body\n-   --> $DIR/needless_pass_by_value.rs:101:13\n+   --> $DIR/needless_pass_by_value.rs:103:13\n     |\n-101 |         _s: Self,\n+103 |         _s: Self,\n     |             ^^^^ help: consider taking a reference instead: `&Self`\n \n+error: this argument is passed by value, but not consumed in the function body\n+   --> $DIR/needless_pass_by_value.rs:125:24\n+    |\n+125 | fn bar_copy(x: u32, y: CopyWrapper) {\n+    |                        ^^^^^^^^^^^ help: consider taking a reference instead: `&CopyWrapper`\n+    |\n+help: consider marking this type as Copy\n+   --> $DIR/needless_pass_by_value.rs:123:1\n+    |\n+123 | struct CopyWrapper(u32);\n+    | ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: this argument is passed by value, but not consumed in the function body\n+   --> $DIR/needless_pass_by_value.rs:131:29\n+    |\n+131 | fn test_destructure_copy(x: CopyWrapper, y: CopyWrapper, z: CopyWrapper) {\n+    |                             ^^^^^^^^^^^ help: consider taking a reference instead: `&CopyWrapper`\n+    |\n+help: consider marking this type as Copy\n+   --> $DIR/needless_pass_by_value.rs:123:1\n+    |\n+123 | struct CopyWrapper(u32);\n+    | ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: this argument is passed by value, but not consumed in the function body\n+   --> $DIR/needless_pass_by_value.rs:131:45\n+    |\n+131 | fn test_destructure_copy(x: CopyWrapper, y: CopyWrapper, z: CopyWrapper) {\n+    |                                             ^^^^^^^^^^^\n+    |\n+help: consider marking this type as Copy\n+   --> $DIR/needless_pass_by_value.rs:123:1\n+    |\n+123 | struct CopyWrapper(u32);\n+    | ^^^^^^^^^^^^^^^^^^^^^^^^\n+help: consider taking a reference instead\n+    |\n+131 | fn test_destructure_copy(x: CopyWrapper, y: &CopyWrapper, z: CopyWrapper) {\n+132 |     let CopyWrapper(s) = z; // moved\n+133 |     let CopyWrapper(ref t) = *y; // not moved\n+134 |     let CopyWrapper(_) = *y; // still not moved\n+    |\n+\n+error: this argument is passed by value, but not consumed in the function body\n+   --> $DIR/needless_pass_by_value.rs:131:61\n+    |\n+131 | fn test_destructure_copy(x: CopyWrapper, y: CopyWrapper, z: CopyWrapper) {\n+    |                                                             ^^^^^^^^^^^\n+    |\n+help: consider marking this type as Copy\n+   --> $DIR/needless_pass_by_value.rs:123:1\n+    |\n+123 | struct CopyWrapper(u32);\n+    | ^^^^^^^^^^^^^^^^^^^^^^^^\n+help: consider taking a reference instead\n+    |\n+131 | fn test_destructure_copy(x: CopyWrapper, y: CopyWrapper, z: &CopyWrapper) {\n+132 |     let CopyWrapper(s) = *z; // moved\n+    |\n+\n+error: aborting due to 20 previous errors\n+"}, {"sha": "7fb4571e0c3fbee46bff8854236685bdd46a56e7", "filename": "tests/ui/needless_range_loop.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fneedless_range_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fneedless_range_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_range_loop.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -37,3 +37,5 @@ help: consider using an iterator\n 35 |     for <item> in &mut ms {\n    |\n \n+error: aborting due to 3 previous errors\n+"}, {"sha": "42dc6e6594c5b6c1c528e2d6eba12dc0c4f0c614", "filename": "tests/ui/needless_return.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fneedless_return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fneedless_return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_return.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -48,3 +48,5 @@ error: unneeded return statement\n 39 |     let _ = || return true;\n    |                ^^^^^^^^^^^ help: remove `return` as shown: `true`\n \n+error: aborting due to 8 previous errors\n+"}, {"sha": "3e509870d00f89a37c02bbab12d2ed08b545105e", "filename": "tests/ui/needless_update.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fneedless_update.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fneedless_update.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_update.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -6,3 +6,5 @@ error: struct update has no effect, all the fields in the struct have already be\n    |\n    = note: `-D needless-update` implied by `-D warnings`\n \n+error: aborting due to previous error\n+"}, {"sha": "1d52ba16eae8e5fd9d99fd507251eb9acc6ea50d", "filename": "tests/ui/neg_multiply.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fneg_multiply.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fneg_multiply.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneg_multiply.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -12,3 +12,5 @@ error: Negation by multiplying with -1\n 32 |     -1 * x;\n    |     ^^^^^^\n \n+error: aborting due to 2 previous errors\n+"}, {"sha": "83c10c9b19315adebf330e7e85f4f6ae5771d1a5", "filename": "tests/ui/never_loop.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fnever_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fnever_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnever_loop.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -90,3 +90,5 @@ error: this loop never actually loops\n 160 | |         }\n     | |_________^\n \n+error: aborting due to 9 previous errors\n+"}, {"sha": "335e60404fab195730fe0b39ed7d6058f45c385e", "filename": "tests/ui/new_without_default.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fnew_without_default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fnew_without_default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnew_without_default.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -36,3 +36,5 @@ help: try this\n 67 | }\n    |\n \n+error: aborting due to 3 previous errors\n+"}, {"sha": "5bcab9f2b5e3329c8155d99f9775199fed093106", "filename": "tests/ui/no_effect.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fno_effect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fno_effect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fno_effect.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -278,3 +278,5 @@ error: statement can be reduced\n 115 |     FooString { s: String::from(\"blah\"), };\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `String::from(\"blah\");`\n \n+error: aborting due to 46 previous errors\n+"}, {"sha": "850a3ccd9512909310a454d1febcc22b74328bdf", "filename": "tests/ui/non_expressive_names.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fnon_expressive_names.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fnon_expressive_names.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnon_expressive_names.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -149,3 +149,5 @@ error: consider choosing a more descriptive name\n 141 |     let __1___2 = 12; //~ERROR Consider a more descriptive name\n     |         ^^^^^^^\n \n+error: aborting due to 14 previous errors\n+"}, {"sha": "da2d3b9500fedc01a2c87f1897a459a04f875c87", "filename": "tests/ui/ok_expect.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fok_expect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fok_expect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fok_expect.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -30,3 +30,5 @@ error: called `ok().expect()` on a Result value. You can call `expect` directly\n 26 |     res6.ok().expect(\"meh\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n \n+error: aborting due to 5 previous errors\n+"}, {"sha": "e1371d924eb6673fca9860aee08e66db738ad752", "filename": "tests/ui/ok_if_let.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fok_if_let.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fok_if_let.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fok_if_let.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -11,3 +11,5 @@ error: Matching on `Some` with `ok()` is redundant\n    = note: `-D if-let-some-result` implied by `-D warnings`\n    = help: Consider matching on `Ok(y)` and removing the call to `ok` instead\n \n+error: aborting due to previous error\n+"}, {"sha": "a4f7b3c67612f0b31b83d6ca353a46631adb21c4", "filename": "tests/ui/op_ref.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fop_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fop_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fop_ref.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -10,3 +10,5 @@ help: use the values directly\n 13 |     let foo = 5 - 6;\n    |\n \n+error: aborting due to previous error\n+"}, {"sha": "f0d419041523d89f8ebe4f5305649cc3812b168a", "filename": "tests/ui/open_options.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fopen_options.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fopen_options.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fopen_options.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -42,3 +42,5 @@ error: the method \"truncate\" is called more than once\n 15 |     OpenOptions::new().truncate(true).truncate(false).open(\"foo.txt\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+error: aborting due to 7 previous errors\n+"}, {"sha": "249745c6a4504c68b1f2aa63ad0f8c629c2a496d", "filename": "tests/ui/option_option.rs", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Foption_option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Foption_option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_option.rs?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -0,0 +1,63 @@\n+fn input(_: Option<Option<u8>>) {\n+}\n+\n+fn output() -> Option<Option<u8>> {\n+    None\n+}\n+\n+fn output_nested() -> Vec<Option<Option<u8>>> {\n+    vec![None]\n+}\n+\n+// The lint only generates one warning for this\n+fn output_nested_nested() -> Option<Option<Option<u8>>> {\n+    None\n+}\n+\n+struct Struct {\n+    x: Option<Option<u8>>,\n+}\n+\n+impl Struct {\n+    fn struct_fn() -> Option<Option<u8>> {\n+        None\n+    }\n+}\n+\n+trait Trait {\n+    fn trait_fn() -> Option<Option<u8>>;\n+}\n+\n+enum Enum {\n+    Tuple(Option<Option<u8>>),\n+    Struct{x: Option<Option<u8>>},\n+}\n+\n+// The lint allows this\n+type OptionOption = Option<Option<u32>>;\n+\n+// The lint allows this\n+fn output_type_alias() -> OptionOption {\n+    None\n+}\n+\n+// The line allows this\n+impl Trait for Struct {\n+    fn trait_fn() -> Option<Option<u8>> {\n+        None\n+    }\n+}\n+\n+fn main() {\n+    input(None);\n+    output();\n+    output_nested();\n+\n+    // The lint allows this\n+    let local: Option<Option<u8>> = None;\n+\n+    // The lint allows this\n+    let expr = Some(Some(true));\n+}\n+\n+"}, {"sha": "19e00efae7188d9d2c2277d31f71aa6a05b2b0fe", "filename": "tests/ui/option_option.stderr", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Foption_option.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Foption_option.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_option.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -0,0 +1,58 @@\n+error: consider using `Option<T>` instead of `Option<Option<T>>` or a custom enum if you need to distinguish all 3 cases\n+ --> $DIR/option_option.rs:1:13\n+  |\n+1 | fn input(_: Option<Option<u8>>) {\n+  |             ^^^^^^^^^^^^^^^^^^\n+  |\n+  = note: `-D option-option` implied by `-D warnings`\n+\n+error: consider using `Option<T>` instead of `Option<Option<T>>` or a custom enum if you need to distinguish all 3 cases\n+ --> $DIR/option_option.rs:4:16\n+  |\n+4 | fn output() -> Option<Option<u8>> {\n+  |                ^^^^^^^^^^^^^^^^^^\n+\n+error: consider using `Option<T>` instead of `Option<Option<T>>` or a custom enum if you need to distinguish all 3 cases\n+ --> $DIR/option_option.rs:8:27\n+  |\n+8 | fn output_nested() -> Vec<Option<Option<u8>>> {\n+  |                           ^^^^^^^^^^^^^^^^^^\n+\n+error: consider using `Option<T>` instead of `Option<Option<T>>` or a custom enum if you need to distinguish all 3 cases\n+  --> $DIR/option_option.rs:13:30\n+   |\n+13 | fn output_nested_nested() -> Option<Option<Option<u8>>> {\n+   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: consider using `Option<T>` instead of `Option<Option<T>>` or a custom enum if you need to distinguish all 3 cases\n+  --> $DIR/option_option.rs:18:8\n+   |\n+18 |     x: Option<Option<u8>>,\n+   |        ^^^^^^^^^^^^^^^^^^\n+\n+error: consider using `Option<T>` instead of `Option<Option<T>>` or a custom enum if you need to distinguish all 3 cases\n+  --> $DIR/option_option.rs:22:23\n+   |\n+22 |     fn struct_fn() -> Option<Option<u8>> {\n+   |                       ^^^^^^^^^^^^^^^^^^\n+\n+error: consider using `Option<T>` instead of `Option<Option<T>>` or a custom enum if you need to distinguish all 3 cases\n+  --> $DIR/option_option.rs:28:22\n+   |\n+28 |     fn trait_fn() -> Option<Option<u8>>;\n+   |                      ^^^^^^^^^^^^^^^^^^\n+\n+error: consider using `Option<T>` instead of `Option<Option<T>>` or a custom enum if you need to distinguish all 3 cases\n+  --> $DIR/option_option.rs:32:11\n+   |\n+32 |     Tuple(Option<Option<u8>>),\n+   |           ^^^^^^^^^^^^^^^^^^\n+\n+error: consider using `Option<T>` instead of `Option<Option<T>>` or a custom enum if you need to distinguish all 3 cases\n+  --> $DIR/option_option.rs:33:15\n+   |\n+33 |     Struct{x: Option<Option<u8>>},\n+   |               ^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 9 previous errors\n+"}, {"sha": "adf353a1c4bc11f50a4b8d43431aad51293dd96a", "filename": "tests/ui/overflow_check_conditional.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Foverflow_check_conditional.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Foverflow_check_conditional.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foverflow_check_conditional.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -48,3 +48,5 @@ error: You are trying to use classic C underflow conditions that will fail in Ru\n 32 |     if a < a - b {\n    |        ^^^^^^^^^\n \n+error: aborting due to 8 previous errors\n+"}, {"sha": "25113ed80b6e08f2f0d29916d68560bd120c7c5e", "filename": "tests/ui/panic.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fpanic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fpanic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpanic.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -18,3 +18,5 @@ error: you probably are missing some parameter in your format string\n 12 |         assert!(true, \"here be missing values: {}\");\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+error: aborting due to 3 previous errors\n+"}, {"sha": "5e536cc51d28e722a7a5a2b41f186ba39fc48bee", "filename": "tests/ui/partialeq_ne_impl.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fpartialeq_ne_impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fpartialeq_ne_impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpartialeq_ne_impl.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -6,3 +6,5 @@ error: re-implementing `PartialEq::ne` is unnecessary\n    |\n    = note: `-D partialeq-ne-impl` implied by `-D warnings`\n \n+error: aborting due to previous error\n+"}, {"sha": "59bce3a9a8f6d427d3e0f606f1b0ff3ce5ad4e5f", "filename": "tests/ui/patterns.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fpatterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fpatterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpatterns.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -6,3 +6,5 @@ error: the `y @ _` pattern can be written as just `y`\n    |\n    = note: `-D redundant-pattern` implied by `-D warnings`\n \n+error: aborting due to previous error\n+"}, {"sha": "aacd90cdf92b73e0bd8a6a8cc67c6935523ce76d", "filename": "tests/ui/precedence.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fprecedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fprecedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprecedence.rs?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -4,6 +4,16 @@\n #[warn(precedence)]\n #[allow(identity_op)]\n #[allow(eq_op)]\n+\n+macro_rules! trip {\n+   ($a:expr) => {\n+    match $a & 0b1111_1111i8 {\n+        0 => println!(\"a is zero ({})\", $a),\n+        _ => println!(\"a is {}\", $a),\n+    }\n+   };\n+}\n+\n fn main() {\n     1 << 2 + 3;\n     1 + 2 << 3;\n@@ -22,4 +32,7 @@ fn main() {\n     let _ = -(1f32).abs();\n     let _ = -(1i32.abs());\n     let _ = -(1f32.abs());\n+\n+    let b = 3;\n+    trip!(b * 8);\n }"}, {"sha": "92c1364746e8fe4d8f848685341f2c154253f519", "filename": "tests/ui/precedence.stderr", "status": "modified", "additions": 26, "deletions": 24, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fprecedence.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fprecedence.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprecedence.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -1,56 +1,58 @@\n error: operator precedence can trip the unwary\n- --> $DIR/precedence.rs:8:5\n-  |\n-8 |     1 << 2 + 3;\n-  |     ^^^^^^^^^^ help: consider parenthesizing your expression: `1 << (2 + 3)`\n-  |\n-  = note: `-D precedence` implied by `-D warnings`\n+  --> $DIR/precedence.rs:18:5\n+   |\n+18 |     1 << 2 + 3;\n+   |     ^^^^^^^^^^ help: consider parenthesizing your expression: `1 << (2 + 3)`\n+   |\n+   = note: `-D precedence` implied by `-D warnings`\n \n error: operator precedence can trip the unwary\n- --> $DIR/precedence.rs:9:5\n-  |\n-9 |     1 + 2 << 3;\n-  |     ^^^^^^^^^^ help: consider parenthesizing your expression: `(1 + 2) << 3`\n+  --> $DIR/precedence.rs:19:5\n+   |\n+19 |     1 + 2 << 3;\n+   |     ^^^^^^^^^^ help: consider parenthesizing your expression: `(1 + 2) << 3`\n \n error: operator precedence can trip the unwary\n-  --> $DIR/precedence.rs:10:5\n+  --> $DIR/precedence.rs:20:5\n    |\n-10 |     4 >> 1 + 1;\n+20 |     4 >> 1 + 1;\n    |     ^^^^^^^^^^ help: consider parenthesizing your expression: `4 >> (1 + 1)`\n \n error: operator precedence can trip the unwary\n-  --> $DIR/precedence.rs:11:5\n+  --> $DIR/precedence.rs:21:5\n    |\n-11 |     1 + 3 >> 2;\n+21 |     1 + 3 >> 2;\n    |     ^^^^^^^^^^ help: consider parenthesizing your expression: `(1 + 3) >> 2`\n \n error: operator precedence can trip the unwary\n-  --> $DIR/precedence.rs:12:5\n+  --> $DIR/precedence.rs:22:5\n    |\n-12 |     1 ^ 1 - 1;\n+22 |     1 ^ 1 - 1;\n    |     ^^^^^^^^^ help: consider parenthesizing your expression: `1 ^ (1 - 1)`\n \n error: operator precedence can trip the unwary\n-  --> $DIR/precedence.rs:13:5\n+  --> $DIR/precedence.rs:23:5\n    |\n-13 |     3 | 2 - 1;\n+23 |     3 | 2 - 1;\n    |     ^^^^^^^^^ help: consider parenthesizing your expression: `3 | (2 - 1)`\n \n error: operator precedence can trip the unwary\n-  --> $DIR/precedence.rs:14:5\n+  --> $DIR/precedence.rs:24:5\n    |\n-14 |     3 & 5 - 2;\n+24 |     3 & 5 - 2;\n    |     ^^^^^^^^^ help: consider parenthesizing your expression: `3 & (5 - 2)`\n \n error: unary minus has lower precedence than method call\n-  --> $DIR/precedence.rs:15:5\n+  --> $DIR/precedence.rs:25:5\n    |\n-15 |     -1i32.abs();\n+25 |     -1i32.abs();\n    |     ^^^^^^^^^^^ help: consider adding parentheses to clarify your intent: `-(1i32.abs())`\n \n error: unary minus has lower precedence than method call\n-  --> $DIR/precedence.rs:16:5\n+  --> $DIR/precedence.rs:26:5\n    |\n-16 |     -1f32.abs();\n+26 |     -1f32.abs();\n    |     ^^^^^^^^^^^ help: consider adding parentheses to clarify your intent: `-(1f32.abs())`\n \n+error: aborting due to 9 previous errors\n+"}, {"sha": "789e1218b7804521360c16411bebb41af47ec468", "filename": "tests/ui/print.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fprint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fprint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprint.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -50,3 +50,5 @@ error: use of `Debug`-based formatting\n 31 |     print!(\"Hello {:#?}\", \"#orld\");\n    |                           ^^^^^^^\n \n+error: aborting due to 8 previous errors\n+"}, {"sha": "4f32d1b2a2d45a1b705072e066d1e65aeb425b1a", "filename": "tests/ui/print_with_newline.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fprint_with_newline.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fprint_with_newline.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprint_with_newline.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -6,3 +6,5 @@ error: using `print!()` with a format string that ends in a newline, consider us\n   |\n   = note: `-D print-with-newline` implied by `-D warnings`\n \n+error: aborting due to previous error\n+"}, {"sha": "f70b056e562639e18bfb92c8164e2c4f3269576a", "filename": "tests/ui/println_empty_string.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fprintln_empty_string.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fprintln_empty_string.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprintln_empty_string.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -6,3 +6,5 @@ error: using `println!(\"\")`\n   |\n   = note: `-D print-with-newline` implied by `-D warnings`\n \n+error: aborting due to previous error\n+"}, {"sha": "bf8608111cf273f5ef9604feddf05d9ffd50ab87", "filename": "tests/ui/ptr_arg.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fptr_arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fptr_arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fptr_arg.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -76,3 +76,5 @@ help: change `y.as_str()` to\n 62 |     let c = y;\n    |             ^\n \n+error: aborting due to 6 previous errors\n+"}, {"sha": "fc51f1a07f07741d2dfa559606622cc4b52dd930", "filename": "tests/ui/range.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Frange.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Frange.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frange.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -38,3 +38,5 @@ error: Iterator::step_by(0) will panic at runtime\n 33 |     let _ = v1.iter().step_by(2/3);\n    |             ^^^^^^^^^^^^^^^^^^^^^^\n \n+error: aborting due to 6 previous errors\n+"}, {"sha": "cc0038c344283d469efb7d39801848569e33fe9d", "filename": "tests/ui/range_plus_minus_one.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Frange_plus_minus_one.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Frange_plus_minus_one.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frange_plus_minus_one.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -65,3 +65,5 @@ error: an inclusive range would be more readable\n    |             help: use: `(f()+1)..=f()`\n    |             in this macro invocation\n \n+error: aborting due to 7 previous errors\n+"}, {"sha": "d2b5616a4811ef3c261c6352827d85d2cbb99177", "filename": "tests/ui/redundant_closure_call.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fredundant_closure_call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fredundant_closure_call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_closure_call.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -30,3 +30,5 @@ error: Try not to call a closure in the expression where it is declared.\n 12 |     k = (|a,b| a*b)(1,5);\n    |         ^^^^^^^^^^^^^^^^\n \n+error: aborting due to 5 previous errors\n+"}, {"sha": "741c0cc103857b69f4c72e2ee73aeb1a27092999", "filename": "tests/ui/reference.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Freference.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Freference.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Freference.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -66,3 +66,5 @@ error: immediately dereferencing a reference\n 53 |         let y = **&mut &mut x;\n    |                  ^^^^^^^^^^^^ help: try this: `&mut x`\n \n+error: aborting due to 11 previous errors\n+"}, {"sha": "433061e41fbaaacfc40c2c7ec402cca35aa32c77", "filename": "tests/ui/regex.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fregex.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fregex.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fregex.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -149,3 +149,5 @@ error: trivial regex\n    |\n    = help: consider using consider using `str::is_empty`\n \n+error: aborting due to 21 previous errors\n+"}, {"sha": "fb2e71db17144b0f0ee836169097171e9cea91e6", "filename": "tests/ui/replace_consts.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Freplace_consts.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Freplace_consts.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Freplace_consts.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -214,3 +214,5 @@ error: using `MAX`\n 47 |     { let foo = std::u128::MAX; };\n    |                 ^^^^^^^^^^^^^^ help: try this: `u128::max_value()`\n \n+error: aborting due to 35 previous errors\n+"}, {"sha": "58667e0f820b73eec81d7465c9db83dc8927f2ee", "filename": "tests/ui/serde.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fserde.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fserde.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fserde.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -10,3 +10,5 @@ error: you should not implement `visit_string` without also implementing `visit_\n    |\n    = note: `-D serde-api-misuse` implied by `-D warnings`\n \n+error: aborting due to previous error\n+"}, {"sha": "0eb5e5b2a2b30d49a42810abd9d1c51675778318", "filename": "tests/ui/shadow.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fshadow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fshadow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fshadow.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -134,3 +134,5 @@ note: previous binding is here\n 21 |     let x = y;\n    |         ^\n \n+error: aborting due to 9 previous errors\n+"}, {"sha": "7697cbd1c64c032c249536f6bb9342527967ed46", "filename": "tests/ui/short_circuit_statement.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fshort_circuit_statement.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fshort_circuit_statement.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fshort_circuit_statement.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -18,3 +18,5 @@ error: boolean short circuit operator in statement may be clearer using an expli\n 9 |     1 == 2 || g();\n   |     ^^^^^^^^^^^^^^ help: replace it with: `if !(1 == 2) { g(); }`\n \n+error: aborting due to 3 previous errors\n+"}, {"sha": "42ee2b9fef479f4a20f7bdce9f473e7ba0c36e21", "filename": "tests/ui/single_char_pattern.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fsingle_char_pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fsingle_char_pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_char_pattern.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -102,3 +102,5 @@ error: single-character string constant used as pattern\n 37 |     x.trim_right_matches(\"x\");\n    |     ---------------------^^^- help: try using a char instead: `x.trim_right_matches('x')`\n \n+error: aborting due to 17 previous errors\n+"}, {"sha": "7d73f201b692404d5250061459ff47cd97ff3947", "filename": "tests/ui/starts_ends_with.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fstarts_ends_with.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fstarts_ends_with.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstarts_ends_with.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -74,3 +74,5 @@ error: you should use the `ends_with` method\n 38 |     Some(' ') != \"\".chars().next_back();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: like this: `!\"\".ends_with(' ')`\n \n+error: aborting due to 12 previous errors\n+"}, {"sha": "4be2037ad31bbb915076214e79373575efff1975", "filename": "tests/ui/string_extend.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fstring_extend.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fstring_extend.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstring_extend.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -18,3 +18,5 @@ error: calling `.extend(_.chars())`\n 22 |     s.extend(def.chars());\n    |     ^^^^^^^^^^^^^^^^^^^^^ help: try this: `s.push_str(&def)`\n \n+error: aborting due to 3 previous errors\n+"}, {"sha": "d098ce9df5eaf0969ca7565aa0e05bd0489834e9", "filename": "tests/ui/strings.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fstrings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fstrings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstrings.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -72,3 +72,5 @@ error: manual implementation of an assign operation\n 65 |     ; x = x + 1;\n    |       ^^^^^^^^^ help: replace it with: `x += 1`\n \n+error: aborting due to 11 previous errors\n+"}, {"sha": "25e857991b8a3a221b45ee531d7215a169803441", "filename": "tests/ui/stutter.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fstutter.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fstutter.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstutter.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -30,3 +30,5 @@ error: item name starts with its containing module's name\n 12 |     pub struct Foo7Bar;\n    |     ^^^^^^^^^^^^^^^^^^^\n \n+error: aborting due to 5 previous errors\n+"}, {"sha": "a01ec375e639e7ccda1823d891f7ab8f2192bad0", "filename": "tests/ui/swap.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fswap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fswap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fswap.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -65,3 +65,5 @@ error: this looks like you are trying to swap `c.0` and `a`\n    |\n    = note: or maybe you should use `std::mem::replace`?\n \n+error: aborting due to 7 previous errors\n+"}, {"sha": "979720c914d16e49299a341b44cd1d28c1ff2862", "filename": "tests/ui/temporary_assignment.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Ftemporary_assignment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Ftemporary_assignment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftemporary_assignment.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -12,3 +12,5 @@ error: assignment to temporary\n 30 |     (0, 0).0 = 1;\n    |     ^^^^^^^^^^^^\n \n+error: aborting due to 2 previous errors\n+"}, {"sha": "f360e85329f50729f17bc498ba0bee3e8b7336cc", "filename": "tests/ui/toplevel_ref_arg.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Ftoplevel_ref_arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Ftoplevel_ref_arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftoplevel_ref_arg.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -30,3 +30,5 @@ error: `ref` on an entire `let` pattern is discouraged, take a reference with `&\n 24 |   let ref mut z = 1 + 2;\n    |   ----^^^^^^^^^--------- help: try: `let z = &mut (1 + 2);`\n \n+error: aborting due to 5 previous errors\n+"}, {"sha": "91e4d59da9867aeac4b3b2f55127aeccd428cb36", "filename": "tests/ui/trailing_zeros.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Ftrailing_zeros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Ftrailing_zeros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrailing_zeros.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -12,3 +12,5 @@ error: bit mask could be simplified with a call to `trailing_zeros`\n 8 |     let _ = x & 0b1_1111 == 0; // suggest trailing_zeros\n   |             ^^^^^^^^^^^^^^^^^ help: try: `x.trailing_zeros() >= 5`\n \n+error: aborting due to 2 previous errors\n+"}, {"sha": "f3ac9a101ae1ba7464b4171a57c2e1a35e749d90", "filename": "tests/ui/transmute.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Ftransmute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Ftransmute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -204,3 +204,5 @@ error: transmute from a `&mut [u8]` to a `&mut str`\n 140 |     let _: &mut str = unsafe { std::mem::transmute(mb) };\n     |                                ^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::str::from_utf8_mut(mb).unwrap()`\n \n+error: aborting due to 32 previous errors\n+"}, {"sha": "3a6a6e73f575e4044ae4038a2b0f4b75de87fae1", "filename": "tests/ui/transmute_64bit.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Ftransmute_64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Ftransmute_64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute_64bit.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -12,3 +12,5 @@ error: transmute from a `f64` to a pointer\n 11 |         let _: *mut usize = std::mem::transmute(6.0f64);\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+error: aborting due to 2 previous errors\n+"}, {"sha": "b41bff7a9b06b3ad9ecf5b533961dbb06d0f018b", "filename": "tests/ui/types.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Ftypes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Ftypes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypes.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -6,3 +6,5 @@ error: casting i32 to i64 may become silently lossy if types change\n   |\n   = note: `-D cast-lossless` implied by `-D warnings`\n \n+error: aborting due to previous error\n+"}, {"sha": "9e99a44bb60c17384c2d953cf418c52a8e00467a", "filename": "tests/ui/unicode.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Funicode.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Funicode.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funicode.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -28,3 +28,5 @@ error: literal non-ASCII character detected\n    = help: Consider replacing the string with:\n            \"\"/u{dc}ben!\"\"\n \n+error: aborting due to 3 previous errors\n+"}, {"sha": "8f290446b5e42a990fec717fbc0ed1e3a0861773", "filename": "tests/ui/unit_arg.rs", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Funit_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Funit_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funit_arg.rs?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -0,0 +1,55 @@\n+#![warn(unit_arg)]\n+#![allow(no_effect)]\n+\n+use std::fmt::Debug;\n+\n+fn foo<T: Debug>(t: T) {\n+    println!(\"{:?}\", t);\n+}\n+\n+fn foo3<T1: Debug, T2: Debug, T3: Debug>(t1: T1, t2: T2, t3: T3) {\n+    println!(\"{:?}, {:?}, {:?}\", t1, t2, t3);\n+}\n+\n+struct Bar;\n+\n+impl Bar {\n+    fn bar<T: Debug>(&self, t: T) {\n+        println!(\"{:?}\", t);\n+    }\n+}\n+\n+fn bad() {\n+    foo({});\n+    foo({ 1; });\n+    foo(foo(1));\n+    foo({\n+        foo(1);\n+        foo(2);\n+    });\n+    foo3({}, 2, 2);\n+    let b = Bar;\n+    b.bar({ 1; });\n+}\n+\n+fn ok() {\n+    foo(());\n+    foo(1);\n+    foo({ 1 });\n+    foo3(\"a\", 3, vec![3]);\n+    let b = Bar;\n+    b.bar({ 1 });\n+    b.bar(());\n+    question_mark();\n+}\n+\n+fn question_mark() -> Result<(), ()> {\n+    Ok(Ok(())?)?;\n+    Ok(Ok(()))??;\n+    Ok(())\n+}\n+\n+fn main() {\n+    bad();\n+    ok();\n+}"}, {"sha": "ca48f39263bf5539b33f02441c1e80cb15561893", "filename": "tests/ui/unit_arg.stderr", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Funit_arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Funit_arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funit_arg.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -0,0 +1,68 @@\n+error: passing a unit value to a function\n+  --> $DIR/unit_arg.rs:23:9\n+   |\n+23 |     foo({});\n+   |         ^^\n+   |\n+   = note: `-D unit-arg` implied by `-D warnings`\n+help: if you intended to pass a unit value, use a unit literal instead\n+   |\n+23 |     foo(());\n+   |         ^^\n+\n+error: passing a unit value to a function\n+  --> $DIR/unit_arg.rs:24:9\n+   |\n+24 |     foo({ 1; });\n+   |         ^^^^^^\n+help: if you intended to pass a unit value, use a unit literal instead\n+   |\n+24 |     foo(());\n+   |         ^^\n+\n+error: passing a unit value to a function\n+  --> $DIR/unit_arg.rs:25:9\n+   |\n+25 |     foo(foo(1));\n+   |         ^^^^^^\n+help: if you intended to pass a unit value, use a unit literal instead\n+   |\n+25 |     foo(());\n+   |         ^^\n+\n+error: passing a unit value to a function\n+  --> $DIR/unit_arg.rs:26:9\n+   |\n+26 |       foo({\n+   |  _________^\n+27 | |         foo(1);\n+28 | |         foo(2);\n+29 | |     });\n+   | |_____^\n+help: if you intended to pass a unit value, use a unit literal instead\n+   |\n+26 |     foo(());\n+   |         ^^\n+\n+error: passing a unit value to a function\n+  --> $DIR/unit_arg.rs:30:10\n+   |\n+30 |     foo3({}, 2, 2);\n+   |          ^^\n+help: if you intended to pass a unit value, use a unit literal instead\n+   |\n+30 |     foo3((), 2, 2);\n+   |          ^^\n+\n+error: passing a unit value to a function\n+  --> $DIR/unit_arg.rs:32:11\n+   |\n+32 |     b.bar({ 1; });\n+   |           ^^^^^^\n+help: if you intended to pass a unit value, use a unit literal instead\n+   |\n+32 |     b.bar(());\n+   |           ^^\n+\n+error: aborting due to 6 previous errors\n+"}, {"sha": "51ad3fca94793772efb38f3a3cc11ae09e4888a5", "filename": "tests/ui/unit_cmp.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Funit_cmp.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Funit_cmp.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funit_cmp.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -12,3 +12,5 @@ error: >-comparison of unit values detected. This will always be false\n 19 |     if { true; } > { false; } {\n    |        ^^^^^^^^^^^^^^^^^^^^^^\n \n+error: aborting due to 2 previous errors\n+"}, {"sha": "96166ed4f139aa5c2e518bbbaa13f983d4772cdf", "filename": "tests/ui/unnecessary_clone.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Funnecessary_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Funnecessary_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_clone.rs?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -1,10 +1,15 @@\n+#![warn(clone_on_ref_ptr)]\n #![allow(unused)]\n \n use std::collections::HashSet;\n use std::collections::VecDeque;\n use std::rc::{self, Rc};\n use std::sync::{self, Arc};\n \n+trait SomeTrait {}\n+struct SomeImpl;\n+impl SomeTrait for SomeImpl {}\n+\n fn main() {}\n \n fn clone_on_copy() {\n@@ -34,7 +39,8 @@ fn clone_on_ref_ptr() {\n     arc_weak.clone();\n     sync::Weak::clone(&arc_weak);\n \n-\n+    let x = Arc::new(SomeImpl);\n+    let _: Arc<SomeTrait> = x.clone(); \n }\n \n fn clone_on_copy_generic<T: Copy>(t: T) {"}, {"sha": "486d2e350f27ec23acff12337324beeda782b6d1", "filename": "tests/ui/unnecessary_clone.stderr", "status": "modified", "additions": 34, "deletions": 26, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Funnecessary_clone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Funnecessary_clone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_clone.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -1,76 +1,84 @@\n error: using `clone` on a `Copy` type\n-  --> $DIR/unnecessary_clone.rs:11:5\n+  --> $DIR/unnecessary_clone.rs:16:5\n    |\n-11 |     42.clone();\n+16 |     42.clone();\n    |     ^^^^^^^^^^ help: try removing the `clone` call: `42`\n    |\n    = note: `-D clone-on-copy` implied by `-D warnings`\n \n error: using `clone` on a `Copy` type\n-  --> $DIR/unnecessary_clone.rs:15:5\n+  --> $DIR/unnecessary_clone.rs:20:5\n    |\n-15 |     (&42).clone();\n+20 |     (&42).clone();\n    |     ^^^^^^^^^^^^^ help: try dereferencing it: `*(&42)`\n \n error: using '.clone()' on a ref-counted pointer\n-  --> $DIR/unnecessary_clone.rs:25:5\n+  --> $DIR/unnecessary_clone.rs:30:5\n    |\n-25 |     rc.clone();\n-   |     ^^^^^^^^^^ help: try this: `Rc::clone(&rc)`\n+30 |     rc.clone();\n+   |     ^^^^^^^^^^ help: try this: `Rc::<bool>::clone(&rc)`\n    |\n    = note: `-D clone-on-ref-ptr` implied by `-D warnings`\n \n error: using '.clone()' on a ref-counted pointer\n-  --> $DIR/unnecessary_clone.rs:28:5\n+  --> $DIR/unnecessary_clone.rs:33:5\n    |\n-28 |     arc.clone();\n-   |     ^^^^^^^^^^^ help: try this: `Arc::clone(&arc)`\n+33 |     arc.clone();\n+   |     ^^^^^^^^^^^ help: try this: `Arc::<bool>::clone(&arc)`\n \n error: using '.clone()' on a ref-counted pointer\n-  --> $DIR/unnecessary_clone.rs:31:5\n+  --> $DIR/unnecessary_clone.rs:36:5\n    |\n-31 |     rcweak.clone();\n-   |     ^^^^^^^^^^^^^^ help: try this: `Weak::clone(&rcweak)`\n+36 |     rcweak.clone();\n+   |     ^^^^^^^^^^^^^^ help: try this: `Weak::<bool>::clone(&rcweak)`\n \n error: using '.clone()' on a ref-counted pointer\n-  --> $DIR/unnecessary_clone.rs:34:5\n+  --> $DIR/unnecessary_clone.rs:39:5\n    |\n-34 |     arc_weak.clone();\n-   |     ^^^^^^^^^^^^^^^^ help: try this: `Weak::clone(&arc_weak)`\n+39 |     arc_weak.clone();\n+   |     ^^^^^^^^^^^^^^^^ help: try this: `Weak::<bool>::clone(&arc_weak)`\n+\n+error: using '.clone()' on a ref-counted pointer\n+  --> $DIR/unnecessary_clone.rs:43:29\n+   |\n+43 |     let _: Arc<SomeTrait> = x.clone(); \n+   |                             ^^^^^^^^^ help: try this: `Arc::<SomeImpl>::clone(&x)`\n \n error: using `clone` on a `Copy` type\n-  --> $DIR/unnecessary_clone.rs:41:5\n+  --> $DIR/unnecessary_clone.rs:47:5\n    |\n-41 |     t.clone();\n+47 |     t.clone();\n    |     ^^^^^^^^^ help: try removing the `clone` call: `t`\n \n error: using `clone` on a `Copy` type\n-  --> $DIR/unnecessary_clone.rs:43:5\n+  --> $DIR/unnecessary_clone.rs:49:5\n    |\n-43 |     Some(t).clone();\n+49 |     Some(t).clone();\n    |     ^^^^^^^^^^^^^^^ help: try removing the `clone` call: `Some(t)`\n \n error: using `clone` on a double-reference; this will copy the reference instead of cloning the inner type\n-  --> $DIR/unnecessary_clone.rs:49:22\n+  --> $DIR/unnecessary_clone.rs:55:22\n    |\n-49 |     let z: &Vec<_> = y.clone();\n+55 |     let z: &Vec<_> = y.clone();\n    |                      ^^^^^^^^^\n    |\n    = note: `-D clone-double-ref` implied by `-D warnings`\n help: try dereferencing it\n    |\n-49 |     let z: &Vec<_> = &(*y).clone();\n+55 |     let z: &Vec<_> = &(*y).clone();\n    |                      ^^^^^^^^^^^^^\n help: or try being explicit about what type to clone\n    |\n-49 |     let z: &Vec<_> = &std::vec::Vec<i32>::clone(y);\n+55 |     let z: &Vec<_> = &std::vec::Vec<i32>::clone(y);\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `cloned().collect()` on a slice to create a `Vec`. Calling `to_vec()` is both faster and more readable\n-  --> $DIR/unnecessary_clone.rs:56:27\n+  --> $DIR/unnecessary_clone.rs:62:27\n    |\n-56 |     let v2 : Vec<isize> = v.iter().cloned().collect();\n+62 |     let v2 : Vec<isize> = v.iter().cloned().collect();\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D iter-cloned-collect` implied by `-D warnings`\n \n+error: aborting due to 11 previous errors\n+"}, {"sha": "7e4c3a6cb9cb5e07ecfaff789dd91d40a3414d62", "filename": "tests/ui/unneeded_field_pattern.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Funneeded_field_pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Funneeded_field_pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funneeded_field_pattern.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -15,3 +15,5 @@ error: All the struct fields are matched to a wildcard pattern, consider using `\n    |\n    = help: Try with `Foo { .. }` instead\n \n+error: aborting due to 2 previous errors\n+"}, {"sha": "72cb160fafcb5a0cd8b7b67538c9b126a60269b4", "filename": "tests/ui/unreadable_literal.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Funreadable_literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Funreadable_literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funreadable_literal.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -31,3 +31,5 @@ error: long literal lacking separators\n   |\n   = help: consider: 1.234_56_f32\n \n+error: aborting due to 4 previous errors\n+"}, {"sha": "93f2ddd533fea547b3df4dad229cab21401a8524", "filename": "tests/ui/unsafe_removed_from_name.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Funsafe_removed_from_name.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Funsafe_removed_from_name.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funsafe_removed_from_name.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -18,3 +18,5 @@ error: removed \"unsafe\" from the name of `Unsafe` in use as `LieAboutModSafety`\n 23 | use mod_with_some_unsafe_things::Unsafe as LieAboutModSafety;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+error: aborting due to 3 previous errors\n+"}, {"sha": "5114d375fffeb136fb8a039af64119e163d06657", "filename": "tests/ui/unused_io_amount.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Funused_io_amount.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Funused_io_amount.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funused_io_amount.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -39,3 +39,5 @@ error: handle read amount returned or use `Read::read_exact` instead\n 27 |     s.read(&mut buf).unwrap();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+error: aborting due to 6 previous errors\n+"}, {"sha": "19c91e2a6a3cae6f406352a64ba37bfb56cbf5fc", "filename": "tests/ui/unused_labels.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Funused_labels.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Funused_labels.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funused_labels.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -22,3 +22,5 @@ error: unused label `'same_label_in_two_fns`\n 34 | |     }\n    | |_____^\n \n+error: aborting due to 3 previous errors\n+"}, {"sha": "b1fcebe6eed5bf440666ca953a12d05376152a14", "filename": "tests/ui/unused_lt.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Funused_lt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Funused_lt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funused_lt.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -18,3 +18,5 @@ error: this lifetime isn't used in the function definition\n 50 |     fn x<'a>(&self) {}\n    |          ^^\n \n+error: aborting due to 3 previous errors\n+"}, {"sha": "bfd334335d88d010846f04111f43ccc3a0922a04", "filename": "tests/ui/use_self.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fuse_self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fuse_self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -36,3 +36,5 @@ error: unnecessary structure name repetition\n 24 |             Foo::new()\n    |             ^^^^^^^^ help: use the applicable keyword: `Self`\n \n+error: aborting due to 6 previous errors\n+"}, {"sha": "712f81c1b6ff8d4f17e33875c372c9ed8f447ea6", "filename": "tests/ui/used_underscore_binding.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fused_underscore_binding.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fused_underscore_binding.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fused_underscore_binding.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -30,3 +30,5 @@ error: used binding `_underscore_field` which is prefixed with an underscore. A\n 36 |     s._underscore_field += 1;\n    |     ^^^^^^^^^^^^^^^^^^^\n \n+error: aborting due to 5 previous errors\n+"}, {"sha": "875d830a35341a8325e6f79d27c7b20c86391794", "filename": "tests/ui/useless_asref.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fuseless_asref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fuseless_asref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuseless_asref.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -70,3 +70,5 @@ error: this call to `as_ref` does nothing\n 106 |     foo_rt(mrt.as_ref());\n     |            ^^^^^^^^^^^^ help: try this: `mrt`\n \n+error: aborting due to 11 previous errors\n+"}, {"sha": "707a11d55cc684d8c5b52f5d708b91303187e518", "filename": "tests/ui/useless_attribute.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fuseless_attribute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fuseless_attribute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuseless_attribute.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -6,3 +6,5 @@ error: useless lint attribute\n   |\n   = note: `-D useless-attribute` implied by `-D warnings`\n \n+error: aborting due to previous error\n+"}, {"sha": "6a47eb5b064ea559bbdb6b9372762630ce6a631f", "filename": "tests/ui/vec.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fvec.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fvec.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fvec.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -36,3 +36,5 @@ error: useless use of `vec!`\n 49 |     for a in vec![1, 2, 3] {\n    |              ^^^^^^^^^^^^^ help: you can use a slice directly: `&[1, 2, 3]`\n \n+error: aborting due to 6 previous errors\n+"}, {"sha": "689c92d6fb694bd06dcfaa55f0d4045d222c7a32", "filename": "tests/ui/while_loop.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fwhile_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fwhile_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwhile_loop.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -110,3 +110,5 @@ error: this loop could be written as a `for` loop\n 184 | |         }\n     | |_________^ help: try: `for v in y { .. }`\n \n+error: aborting due to 11 previous errors\n+"}, {"sha": "216fd0bb82b8907fe9b2795951a1e28996ceeea3", "filename": "tests/ui/wrong_self_convention.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fwrong_self_convention.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fwrong_self_convention.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwrong_self_convention.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -72,3 +72,5 @@ error: methods called `from_*` usually take no self; consider choosing a less am\n 54 |     pub fn from_i64(self) {}\n    |                     ^^^^\n \n+error: aborting due to 12 previous errors\n+"}, {"sha": "b81e59c07f1529f0dc865f223aba5bed14417938", "filename": "tests/ui/zero_div_zero.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fzero_div_zero.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fzero_div_zero.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fzero_div_zero.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -57,3 +57,5 @@ error: constant division of 0.0 with 0.0 will always result in NaN\n    |\n    = help: Consider using `std::f64::NAN` if you would like a constant representing NaN\n \n+error: aborting due to 8 previous errors\n+"}, {"sha": "5155dc401bd112ae61ee9863588dce6e7dad8873", "filename": "tests/ui/zero_ptr.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fzero_ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70302595a49c89391cc4c5486d9ac2cd805fa6b0/tests%2Fui%2Fzero_ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fzero_ptr.stderr?ref=70302595a49c89391cc4c5486d9ac2cd805fa6b0", "patch": "@@ -12,3 +12,5 @@ error: `0 as *mut _` detected. Consider using `ptr::null_mut()`\n 7 |     let y = 0 as *mut f64;\n   |             ^^^^^^^^^^^^^\n \n+error: aborting due to 2 previous errors\n+"}]}