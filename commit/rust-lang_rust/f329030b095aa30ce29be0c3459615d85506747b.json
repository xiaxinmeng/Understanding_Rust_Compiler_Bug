{"sha": "f329030b095aa30ce29be0c3459615d85506747b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzMjkwMzBiMDk1YWEzMGNlMjliZTBjMzQ1OTYxNWQ4NTUwNjc0N2I=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-04-10T23:05:09Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-04-10T23:07:46Z"}, "message": "std: Stabilize the Utf8Error type\n\nThe meaning of each variant of this enum was somewhat ambiguous and it's uncler\nthat we wouldn't even want to add more enumeration values in the future. As a\nresult this error has been altered to instead become an opaque structure.\nLearning about the \"first invalid byte index\" is still an unstable feature, but\nthe type itself is now stable.", "tree": {"sha": "5b6274f806573e059f79bd3c4aa67633cb30f8a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b6274f806573e059f79bd3c4aa67633cb30f8a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f329030b095aa30ce29be0c3459615d85506747b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f329030b095aa30ce29be0c3459615d85506747b", "html_url": "https://github.com/rust-lang/rust/commit/f329030b095aa30ce29be0c3459615d85506747b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f329030b095aa30ce29be0c3459615d85506747b/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "url": "https://api.github.com/repos/rust-lang/rust/commits/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "html_url": "https://github.com/rust-lang/rust/commit/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7"}], "stats": {"total": 64, "additions": 26, "deletions": 38}, "files": [{"sha": "5179b04f8824dcb6152362eeb9453cb7f44f5f6b", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f329030b095aa30ce29be0c3459615d85506747b/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f329030b095aa30ce29be0c3459615d85506747b/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=f329030b095aa30ce29be0c3459615d85506747b", "patch": "@@ -40,6 +40,7 @@\n #![feature(str_char)]\n #![feature(slice_patterns)]\n #![feature(debug_builders)]\n+#![feature(utf8_error)]\n #![cfg_attr(test, feature(rand, rustc_private, test, hash, collections))]\n #![cfg_attr(test, allow(deprecated))] // rand\n "}, {"sha": "9c9f2d628b829d39c52b7376e321cc41654e5bf8", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f329030b095aa30ce29be0c3459615d85506747b/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f329030b095aa30ce29be0c3459615d85506747b/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=f329030b095aa30ce29be0c3459615d85506747b", "patch": "@@ -132,7 +132,7 @@ impl String {\n     ///\n     /// let invalid_vec = vec![240, 144, 128];\n     /// let s = String::from_utf8(invalid_vec).err().unwrap();\n-    /// assert_eq!(s.utf8_error(), Utf8Error::TooShort);\n+    /// let err = s.utf8_error();\n     /// assert_eq!(s.into_bytes(), [240, 144, 128]);\n     /// ```\n     #[inline]\n@@ -156,14 +156,10 @@ impl String {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn from_utf8_lossy<'a>(v: &'a [u8]) -> Cow<'a, str> {\n-        let mut i = 0;\n+        let mut i;\n         match str::from_utf8(v) {\n             Ok(s) => return Cow::Borrowed(s),\n-            Err(e) => {\n-                if let Utf8Error::InvalidByte(firstbad) = e {\n-                    i = firstbad;\n-                }\n-            }\n+            Err(e) => i = e.valid_up_to(),\n         }\n \n         const TAG_CONT_U8: u8 = 128;\n@@ -188,9 +184,9 @@ impl String {\n             };\n         }\n \n-        // subseqidx is the index of the first byte of the subsequence we're looking at.\n-        // It's used to copy a bunch of contiguous good codepoints at once instead of copying\n-        // them one by one.\n+        // subseqidx is the index of the first byte of the subsequence we're\n+        // looking at.  It's used to copy a bunch of contiguous good codepoints\n+        // at once instead of copying them one by one.\n         let mut subseqidx = i;\n \n         while i < total {"}, {"sha": "cacafab4e3c19f69f975b104bb89226686936f2b", "filename": "src/libcollectionstest/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f329030b095aa30ce29be0c3459615d85506747b/src%2Flibcollectionstest%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f329030b095aa30ce29be0c3459615d85506747b/src%2Flibcollectionstest%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fstr.rs?ref=f329030b095aa30ce29be0c3459615d85506747b", "patch": "@@ -1502,7 +1502,7 @@ fn test_str_from_utf8() {\n     assert_eq!(from_utf8(xs), Ok(\"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\"));\n \n     let xs = b\"hello\\xFF\";\n-    assert_eq!(from_utf8(xs), Err(Utf8Error::TooShort));\n+    assert!(from_utf8(xs).is_err());\n }\n \n #[test]"}, {"sha": "3184f842e9ae9799f3230702eaf55e96be4d5731", "filename": "src/libcollectionstest/string.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f329030b095aa30ce29be0c3459615d85506747b/src%2Flibcollectionstest%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f329030b095aa30ce29be0c3459615d85506747b/src%2Flibcollectionstest%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fstring.rs?ref=f329030b095aa30ce29be0c3459615d85506747b", "patch": "@@ -45,7 +45,6 @@ fn test_from_utf8() {\n \n     let xs = b\"hello\\xFF\".to_vec();\n     let err = String::from_utf8(xs).err().unwrap();\n-    assert_eq!(err.utf8_error(), Utf8Error::TooShort);\n     assert_eq!(err.into_bytes(), b\"hello\\xff\".to_vec());\n }\n "}, {"sha": "fc623f21167c798c95a94cc4ca6e8316f9ca3799", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 17, "deletions": 22, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/f329030b095aa30ce29be0c3459615d85506747b/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f329030b095aa30ce29be0c3459615d85506747b/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=f329030b095aa30ce29be0c3459615d85506747b", "patch": "@@ -106,19 +106,19 @@ Section: Creating a string\n \n /// Errors which can occur when attempting to interpret a byte slice as a `str`.\n #[derive(Copy, Eq, PartialEq, Clone, Debug)]\n-#[unstable(feature = \"core\",\n-           reason = \"error enumeration recently added and definitions may be refined\")]\n-pub enum Utf8Error {\n-    /// An invalid byte was detected at the byte offset given.\n-    ///\n-    /// The offset is guaranteed to be in bounds of the slice in question, and\n-    /// the byte at the specified offset was the first invalid byte in the\n-    /// sequence detected.\n-    InvalidByte(usize),\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+pub struct Utf8Error {\n+    valid_up_to: usize,\n+}\n \n-    /// The byte slice was invalid because more bytes were needed but no more\n-    /// bytes were available.\n-    TooShort,\n+impl Utf8Error {\n+    /// Returns the index in the given string up to which valid UTF-8 was\n+    /// verified.\n+    ///\n+    /// Starting at the index provided, but not necessarily at it precisely, an\n+    /// invalid UTF-8 encoding sequence was found.\n+    #[unstable(feature = \"utf8_error\", reason = \"method just added\")]\n+    pub fn valid_up_to(&self) -> usize { self.valid_up_to }\n }\n \n /// Converts a slice of bytes to a string slice without performing any\n@@ -147,14 +147,7 @@ pub unsafe fn from_utf8_unchecked<'a>(v: &'a [u8]) -> &'a str {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl fmt::Display for Utf8Error {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        match *self {\n-            Utf8Error::InvalidByte(n) => {\n-                write!(f, \"invalid utf-8: invalid byte at index {}\", n)\n-            }\n-            Utf8Error::TooShort => {\n-                write!(f, \"invalid utf-8: byte slice too short\")\n-            }\n-        }\n+        write!(f, \"invalid utf-8: invalid byte near index {}\", self.valid_up_to)\n     }\n }\n \n@@ -1218,14 +1211,16 @@ fn run_utf8_validation_iterator(iter: &mut slice::Iter<u8>)\n         // restore the iterator we had at the start of this codepoint.\n         macro_rules! err { () => {{\n             *iter = old.clone();\n-            return Err(Utf8Error::InvalidByte(whole.len() - iter.as_slice().len()))\n+            return Err(Utf8Error {\n+                valid_up_to: whole.len() - iter.as_slice().len()\n+            })\n         }}}\n \n         macro_rules! next { () => {\n             match iter.next() {\n                 Some(a) => *a,\n                 // we needed data, but there was none: error!\n-                None => return Err(Utf8Error::TooShort),\n+                None => err!(),\n             }\n         }}\n "}, {"sha": "96087bf1183dfd6e686dc2e1b730e3061ac0149d", "filename": "src/libstd/error.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f329030b095aa30ce29be0c3459615d85506747b/src%2Flibstd%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f329030b095aa30ce29be0c3459615d85506747b/src%2Flibstd%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ferror.rs?ref=f329030b095aa30ce29be0c3459615d85506747b", "patch": "@@ -122,10 +122,7 @@ impl Error for str::ParseBoolError {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Error for str::Utf8Error {\n     fn description(&self) -> &str {\n-        match *self {\n-            str::Utf8Error::TooShort => \"invalid utf-8: not enough bytes\",\n-            str::Utf8Error::InvalidByte(..) => \"invalid utf-8: corrupt contents\",\n-        }\n+        \"invalid utf-8: corrupt contents\"\n     }\n }\n "}]}