{"sha": "ff6b0aac6a63157c1af4e6a3723ed98cd8c3d14f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmNmIwYWFjNmE2MzE1N2MxYWY0ZTZhMzcyM2VkOThjZDhjM2QxNGY=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-01-21T20:22:01Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-01-21T20:22:01Z"}, "message": "resolve: Fix variant namespacing", "tree": {"sha": "9622dc9a47e9a3e297dd5e10cc02630cab41242c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9622dc9a47e9a3e297dd5e10cc02630cab41242c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff6b0aac6a63157c1af4e6a3723ed98cd8c3d14f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff6b0aac6a63157c1af4e6a3723ed98cd8c3d14f", "html_url": "https://github.com/rust-lang/rust/commit/ff6b0aac6a63157c1af4e6a3723ed98cd8c3d14f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff6b0aac6a63157c1af4e6a3723ed98cd8c3d14f/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "340e7eb2a7330fd73e6ae745690fb7d92ddba4d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/340e7eb2a7330fd73e6ae745690fb7d92ddba4d4", "html_url": "https://github.com/rust-lang/rust/commit/340e7eb2a7330fd73e6ae745690fb7d92ddba4d4"}], "stats": {"total": 108, "additions": 85, "deletions": 23}, "files": [{"sha": "22c18c9d6a43cdab32f32031ca611b20a435ec9b", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ff6b0aac6a63157c1af4e6a3723ed98cd8c3d14f/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff6b0aac6a63157c1af4e6a3723ed98cd8c3d14f/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=ff6b0aac6a63157c1af4e6a3723ed98cd8c3d14f", "patch": "@@ -510,9 +510,9 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n             self.structs.insert(variant_def_id, Vec::new());\n         }\n \n+        // Variants are always treated as importable to allow them to be glob used.\n+        // All variants are defined in both type and value namespaces as future-proofing.\n         let child = self.add_child(name, parent, ForbidDuplicateTypesAndValues, variant.span);\n-        // variants are always treated as importable to allow them to be glob\n-        // used\n         child.define_value(Def::Variant(item_id, self.ast_map.local_def_id(variant.node.data.id())),\n                            variant.span,\n                            DefModifiers::PUBLIC | DefModifiers::IMPORTABLE | variant_modifiers);\n@@ -618,15 +618,14 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n             Def::Variant(_, variant_id) => {\n                 debug!(\"(building reduced graph for external crate) building variant {}\",\n                        final_ident);\n-                // variants are always treated as importable to allow them to be\n-                // glob used\n+                // Variants are always treated as importable to allow them to be glob used.\n+                // All variants are defined in both type and value namespaces as future-proofing.\n                 let modifiers = DefModifiers::PUBLIC | DefModifiers::IMPORTABLE;\n+                child_name_bindings.define_type(def, DUMMY_SP, modifiers);\n+                child_name_bindings.define_value(def, DUMMY_SP, modifiers);\n                 if self.session.cstore.variant_kind(variant_id) == Some(VariantKind::Struct) {\n-                    child_name_bindings.define_type(def, DUMMY_SP, modifiers);\n                     // Not adding fields for variants as they are not accessed with a self receiver\n                     self.structs.insert(variant_id, Vec::new());\n-                } else {\n-                    child_name_bindings.define_value(def, DUMMY_SP, modifiers);\n                 }\n             }\n             Def::Fn(..) |"}, {"sha": "d7fd2968495243697084ac438629d7d0e265d799", "filename": "src/test/auxiliary/variant-namespacing.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ff6b0aac6a63157c1af4e6a3723ed98cd8c3d14f/src%2Ftest%2Fauxiliary%2Fvariant-namespacing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff6b0aac6a63157c1af4e6a3723ed98cd8c3d14f/src%2Ftest%2Fauxiliary%2Fvariant-namespacing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fvariant-namespacing.rs?ref=ff6b0aac6a63157c1af4e6a3723ed98cd8c3d14f", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub enum XE {\n+    XStruct { a: u8 },\n+    XTuple(u8),\n+    XUnit,\n+}"}, {"sha": "4dd256c68bf759697ebc553273f7a888770a4f8a", "filename": "src/test/compile-fail/empty-struct-braces-pat-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff6b0aac6a63157c1af4e6a3723ed98cd8c3d14f/src%2Ftest%2Fcompile-fail%2Fempty-struct-braces-pat-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff6b0aac6a63157c1af4e6a3723ed98cd8c3d14f/src%2Ftest%2Fcompile-fail%2Fempty-struct-braces-pat-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fempty-struct-braces-pat-1.rs?ref=ff6b0aac6a63157c1af4e6a3723ed98cd8c3d14f", "patch": "@@ -39,6 +39,6 @@ fn main() {\n         XEmpty1 => () // Not an error, `XEmpty1` is interpreted as a new binding\n     }\n     match xe3 {\n-        XE::XEmpty3 => () //~ ERROR no associated item named `XEmpty3` found for type\n+        XE::XEmpty3 => () //~ ERROR `XE::XEmpty3` does not name a tuple variant or a tuple struct\n     }\n }"}, {"sha": "c973049184fc4424cdc966c25df6da3fde5ac6e3", "filename": "src/test/compile-fail/empty-struct-braces-pat-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff6b0aac6a63157c1af4e6a3723ed98cd8c3d14f/src%2Ftest%2Fcompile-fail%2Fempty-struct-braces-pat-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff6b0aac6a63157c1af4e6a3723ed98cd8c3d14f/src%2Ftest%2Fcompile-fail%2Fempty-struct-braces-pat-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fempty-struct-braces-pat-3.rs?ref=ff6b0aac6a63157c1af4e6a3723ed98cd8c3d14f", "patch": "@@ -36,6 +36,6 @@ fn main() {\n         E::Empty3(..) => () //~ ERROR `E::Empty3` does not name a tuple variant or a tuple struct\n     }\n     match xe3 {\n-        XE::XEmpty3(..) => () //~ ERROR no associated item named `XEmpty3` found for type\n+        XE::XEmpty3(..) => () //~ ERROR `XE::XEmpty3` does not name a tuple variant or a tuple\n     }\n }"}, {"sha": "75869d700d35d6c886b2bff53512a5d3aba13a60", "filename": "src/test/compile-fail/variant-namespacing.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/ff6b0aac6a63157c1af4e6a3723ed98cd8c3d14f/src%2Ftest%2Fcompile-fail%2Fvariant-namespacing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff6b0aac6a63157c1af4e6a3723ed98cd8c3d14f/src%2Ftest%2Fcompile-fail%2Fvariant-namespacing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvariant-namespacing.rs?ref=ff6b0aac6a63157c1af4e6a3723ed98cd8c3d14f", "patch": "@@ -0,0 +1,49 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:variant-namespacing.rs\n+\n+extern crate variant_namespacing;\n+pub use variant_namespacing::XE::*;\n+//~^ ERROR import `XStruct` conflicts with type in this module\n+//~| ERROR import `XStruct` conflicts with value in this module\n+//~| ERROR import `XTuple` conflicts with type in this module\n+//~| ERROR import `XTuple` conflicts with value in this module\n+//~| ERROR import `XUnit` conflicts with type in this module\n+//~| ERROR import `XUnit` conflicts with value in this module\n+pub use E::*;\n+//~^ ERROR import `Struct` conflicts with type in this module\n+//~| ERROR import `Struct` conflicts with value in this module\n+//~| ERROR import `Tuple` conflicts with type in this module\n+//~| ERROR import `Tuple` conflicts with value in this module\n+//~| ERROR import `Unit` conflicts with type in this module\n+//~| ERROR import `Unit` conflicts with value in this module\n+\n+enum E {\n+    Struct { a: u8 },\n+    Tuple(u8),\n+    Unit,\n+}\n+\n+type Struct = u8;\n+type Tuple = u8;\n+type Unit = u8;\n+type XStruct = u8;\n+type XTuple = u8;\n+type XUnit = u8;\n+\n+const Struct: u8 = 0;\n+const Tuple: u8 = 0;\n+const Unit: u8 = 0;\n+const XStruct: u8 = 0;\n+const XTuple: u8 = 0;\n+const XUnit: u8 = 0;\n+\n+fn main() {}"}, {"sha": "8d6f4d4c30a286dba66eab4ecc09db217c57fb26", "filename": "src/test/run-pass/empty-struct-braces.rs", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/ff6b0aac6a63157c1af4e6a3723ed98cd8c3d14f/src%2Ftest%2Frun-pass%2Fempty-struct-braces.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff6b0aac6a63157c1af4e6a3723ed98cd8c3d14f/src%2Ftest%2Frun-pass%2Fempty-struct-braces.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fempty-struct-braces.rs?ref=ff6b0aac6a63157c1af4e6a3723ed98cd8c3d14f", "patch": "@@ -95,8 +95,7 @@ fn xcrate() {\n     let e2: XEmpty2 = XEmpty2 {};\n     let e2: XEmpty2 = XEmpty2;\n     let e3: XE = XE::XEmpty3 {};\n-    // FIXME: Commented out tests are waiting for PR 30882 (fixes for variant namespaces)\n-    // let e4: XE = XE::XEmpty4 {};\n+    let e4: XE = XE::XEmpty4 {};\n     let e4: XE = XE::XEmpty4;\n \n     match e1 {\n@@ -109,10 +108,10 @@ fn xcrate() {\n         XE::XEmpty3 {} => {}\n         _ => {}\n     }\n-    // match e4 {\n-    //     XE::XEmpty4 {} => {}\n-    //     _ => {}\n-    // }\n+    match e4 {\n+        XE::XEmpty4 {} => {}\n+        _ => {}\n+    }\n \n     match e1 {\n         XEmpty1 { .. } => {}\n@@ -124,18 +123,18 @@ fn xcrate() {\n         XE::XEmpty3 { .. } => {}\n         _ => {}\n     }\n-    // match e4 {\n-    //     XE::XEmpty4 { .. } => {}\n-    //     _ => {}\n-    // }\n+    match e4 {\n+        XE::XEmpty4 { .. } => {}\n+        _ => {}\n+    }\n \n     match e2 {\n         XEmpty2 => {}\n     }\n-    // match e4 {\n-    //     XE::XEmpty4 => {}\n-    //     _ => {}\n-    // }\n+    match e4 {\n+        XE::XEmpty4 => {}\n+        _ => {}\n+    }\n \n     let e11: XEmpty1 = XEmpty1 { ..e1 };\n     let e22: XEmpty2 = XEmpty2 { ..e2 };"}]}