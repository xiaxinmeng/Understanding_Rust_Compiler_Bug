{"sha": "ec29011346ac91f2acdc0455ad6dc19a6f9614ca", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjMjkwMTEzNDZhYzkxZjJhY2RjMDQ1NWFkNmRjMTlhNmY5NjE0Y2E=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2017-01-21T08:32:11Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2017-01-22T07:21:14Z"}, "message": "Remove duplicate `TokenStream` quoter tests (modulo imports).", "tree": {"sha": "70996beeb65b16d6b122e6bb381e46160da9511d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/70996beeb65b16d6b122e6bb381e46160da9511d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec29011346ac91f2acdc0455ad6dc19a6f9614ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec29011346ac91f2acdc0455ad6dc19a6f9614ca", "html_url": "https://github.com/rust-lang/rust/commit/ec29011346ac91f2acdc0455ad6dc19a6f9614ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec29011346ac91f2acdc0455ad6dc19a6f9614ca/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5b0829bb06969b69a82527253a393e5c500c324", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5b0829bb06969b69a82527253a393e5c500c324", "html_url": "https://github.com/rust-lang/rust/commit/e5b0829bb06969b69a82527253a393e5c500c324"}], "stats": {"total": 233, "additions": 0, "deletions": 233}, "files": [{"sha": "664bb9da89a5765fa19fb4dd4a94f3f5930dcd06", "filename": "src/test/run-pass-fulldeps/auxiliary/cond_noprelude_plugin.rs", "status": "removed", "additions": 0, "deletions": 65, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/e5b0829bb06969b69a82527253a393e5c500c324/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fcond_noprelude_plugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5b0829bb06969b69a82527253a393e5c500c324/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fcond_noprelude_plugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fcond_noprelude_plugin.rs?ref=e5b0829bb06969b69a82527253a393e5c500c324", "patch": "@@ -1,65 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![allow(unused_parens)]\n-#![feature(plugin)]\n-#![feature(plugin_registrar)]\n-#![feature(rustc_private)]\n-#![plugin(proc_macro_plugin)]\n-\n-extern crate rustc_plugin;\n-extern crate proc_macro_tokens;\n-extern crate syntax;\n-\n-use proc_macro_tokens::build::ident_eq;\n-\n-use syntax::ast::Ident;\n-use syntax::ext::base::{ExtCtxt, MacResult};\n-use syntax::ext::proc_macro_shim::build_block_emitter;\n-use syntax::tokenstream::{TokenTree, TokenStream};\n-use syntax::codemap::Span;\n-\n-use rustc_plugin::Registry;\n-\n-#[plugin_registrar]\n-pub fn plugin_registrar(reg: &mut Registry) {\n-    reg.register_macro(\"cond\", cond);\n-}\n-\n-fn cond<'cx>(cx: &'cx mut ExtCtxt, sp: Span, tts: &[TokenTree]) -> Box<MacResult + 'cx> {\n-    let output = cond_rec(TokenStream::from_tts(tts.clone().to_owned()));\n-    build_block_emitter(cx, sp, output)\n-}\n-\n-fn cond_rec(input: TokenStream) -> TokenStream {\n-  if input.is_empty() {\n-      return qquote!();\n-  }\n-\n-  let next = input.slice(0..1);\n-  let rest = input.slice_from(1..);\n-\n-  let clause : TokenStream = match next.maybe_delimited() {\n-    Some(ts) => ts,\n-    _ => panic!(\"Invalid input\"),\n-  };\n-\n-  // clause is ([test]) [rhs]\n-  if clause.len() < 2 { panic!(\"Invalid macro usage in cond: {:?}\", clause) }\n-\n-  let test: TokenStream = clause.slice(0..1);\n-  let rhs: TokenStream = clause.slice_from(1..);\n-\n-  if ident_eq(&test[0], Ident::from_str(\"else\")) || rest.is_empty() {\n-    qquote!({unquote(rhs)})\n-  } else {\n-    qquote!({if unquote(test) { unquote(rhs) } else { cond!(unquote(rest)) } })\n-  }\n-}"}, {"sha": "6a2d159a4bdd96e774025f72df238e7ddac836ae", "filename": "src/test/run-pass-fulldeps/auxiliary/cond_prelude_plugin.rs", "status": "removed", "additions": 0, "deletions": 60, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/e5b0829bb06969b69a82527253a393e5c500c324/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fcond_prelude_plugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5b0829bb06969b69a82527253a393e5c500c324/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fcond_prelude_plugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fcond_prelude_plugin.rs?ref=e5b0829bb06969b69a82527253a393e5c500c324", "patch": "@@ -1,60 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![allow(unused_parens)]\n-#![feature(plugin)]\n-#![feature(plugin_registrar)]\n-#![feature(rustc_private)]\n-#![plugin(proc_macro_plugin)]\n-\n-extern crate rustc_plugin;\n-extern crate proc_macro_tokens;\n-extern crate syntax;\n-\n-use syntax::ext::proc_macro_shim::prelude::*;\n-use proc_macro_tokens::prelude::*;\n-\n-use rustc_plugin::Registry;\n-\n-#[plugin_registrar]\n-pub fn plugin_registrar(reg: &mut Registry) {\n-    reg.register_macro(\"cond\", cond);\n-}\n-\n-fn cond<'cx>(cx: &'cx mut ExtCtxt, sp: Span, tts: &[TokenTree]) -> Box<MacResult + 'cx> {\n-    let output = cond_rec(TokenStream::from_tts(tts.clone().to_owned()));\n-    build_block_emitter(cx, sp, output)\n-}\n-\n-fn cond_rec(input: TokenStream) -> TokenStream {\n-  if input.is_empty() {\n-      return qquote!();\n-  }\n-\n-  let next = input.slice(0..1);\n-  let rest = input.slice_from(1..);\n-\n-  let clause : TokenStream = match next.maybe_delimited() {\n-    Some(ts) => ts,\n-    _ => panic!(\"Invalid input\"),\n-  };\n-\n-  // clause is ([test]) [rhs]\n-  if clause.len() < 2 { panic!(\"Invalid macro usage in cond: {:?}\", clause) }\n-\n-  let test: TokenStream = clause.slice(0..1);\n-  let rhs: TokenStream = clause.slice_from(1..);\n-\n-  if ident_eq(&test[0], Ident::from_str(\"else\")) || rest.is_empty() {\n-    qquote!({unquote(rhs)})\n-  } else {\n-    qquote!({if unquote(test) { unquote(rhs) } else { cond!(unquote(rest)) } })\n-  }\n-}"}, {"sha": "4184ca7be372f94f59b111c82dc6347fe2b3a92d", "filename": "src/test/run-pass-fulldeps/macro-quote-noprelude.rs", "status": "removed", "additions": 0, "deletions": 54, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/e5b0829bb06969b69a82527253a393e5c500c324/src%2Ftest%2Frun-pass-fulldeps%2Fmacro-quote-noprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5b0829bb06969b69a82527253a393e5c500c324/src%2Ftest%2Frun-pass-fulldeps%2Fmacro-quote-noprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fmacro-quote-noprelude.rs?ref=e5b0829bb06969b69a82527253a393e5c500c324", "patch": "@@ -1,54 +0,0 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// aux-build:cond_noprelude_plugin.rs\n-// ignore-stage1\n-\n-#![feature(plugin)]\n-#![feature(rustc_private)]\n-#![plugin(cond_noprelude_plugin)]\n-\n-fn fact(n : i64) -> i64 {\n-    if n == 0 {\n-        1\n-    } else {\n-        n * fact(n - 1)\n-    }\n-}\n-\n-fn fact_cond(n : i64) -> i64 {\n-  cond!(\n-    ((n == 0) 1)\n-    (else (n * fact_cond(n-1)))\n-  )\n-}\n-\n-fn fib(n : i64) -> i64 {\n-  if n == 0 || n == 1 {\n-      1\n-  } else {\n-      fib(n-1) + fib(n-2)\n-  }\n-}\n-\n-fn fib_cond(n : i64) -> i64 {\n-  cond!(\n-    ((n == 0) 1)\n-    ((n == 1) 1)\n-    (else (fib_cond(n-1) + fib_cond(n-2)))\n-  )\n-}\n-\n-fn main() {\n-    assert_eq!(fact(3), fact_cond(3));\n-    assert_eq!(fact(5), fact_cond(5));\n-    assert_eq!(fib(5), fib_cond(5));\n-    assert_eq!(fib(8), fib_cond(8));\n-}"}, {"sha": "5b703a5bc2668a2a76c6155ce9a123bb82323179", "filename": "src/test/run-pass-fulldeps/macro-quote-prelude.rs", "status": "removed", "additions": 0, "deletions": 54, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/e5b0829bb06969b69a82527253a393e5c500c324/src%2Ftest%2Frun-pass-fulldeps%2Fmacro-quote-prelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5b0829bb06969b69a82527253a393e5c500c324/src%2Ftest%2Frun-pass-fulldeps%2Fmacro-quote-prelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fmacro-quote-prelude.rs?ref=e5b0829bb06969b69a82527253a393e5c500c324", "patch": "@@ -1,54 +0,0 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// aux-build:cond_prelude_plugin.rs\n-// ignore-stage1\n-\n-#![feature(plugin)]\n-#![feature(rustc_private)]\n-#![plugin(cond_prelude_plugin)]\n-\n-fn fact(n : i64) -> i64 {\n-    if n == 0 {\n-        1\n-    } else {\n-        n * fact(n - 1)\n-    }\n-}\n-\n-fn fact_cond(n : i64) -> i64 {\n-  cond!(\n-    ((n == 0) 1)\n-    (else (n * fact_cond(n-1)))\n-  )\n-}\n-\n-fn fib(n : i64) -> i64 {\n-  if n == 0 || n == 1 {\n-      1\n-  } else {\n-      fib(n-1) + fib(n-2)\n-  }\n-}\n-\n-fn fib_cond(n : i64) -> i64 {\n-  cond!(\n-    ((n == 0) 1)\n-    ((n == 1) 1)\n-    (else (fib_cond(n-1) + fib_cond(n-2)))\n-  )\n-}\n-\n-fn main() {\n-    assert_eq!(fact(3), fact_cond(3));\n-    assert_eq!(fact(5), fact_cond(5));\n-    assert_eq!(fib(5), fib_cond(5));\n-    assert_eq!(fib(8), fib_cond(8));\n-}"}]}