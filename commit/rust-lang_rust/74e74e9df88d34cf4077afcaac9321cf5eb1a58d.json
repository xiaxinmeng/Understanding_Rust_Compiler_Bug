{"sha": "74e74e9df88d34cf4077afcaac9321cf5eb1a58d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0ZTc0ZTlkZjg4ZDM0Y2Y0MDc3YWZjYWFjOTMyMWNmNWViMWE1OGQ=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2021-03-09T23:01:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-09T23:01:27Z"}, "message": "Rollup merge of #82411 - ijackson:fix-exitstatus, r=dtolnay\n\nFixes to ExitStatus and its docs\n\n* On Unix, properly display every possible wait status (and don't panic on weird values)\n* In the documentation, be clear and consistent about \"exit status\" vs \"wait status\".", "tree": {"sha": "0041741f8e77641978715c0d2d1e502e88be4326", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0041741f8e77641978715c0d2d1e502e88be4326"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74e74e9df88d34cf4077afcaac9321cf5eb1a58d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgR/5ICRBK7hj4Ov3rIwAAdHIIAFgWRbmV01O0ItjfeSjIVopq\n2hSfKBYcZJ9j7oTCXhpzBrobmdCI/ucPNH/ZtjJ0I+ivboNue4zeBpOCzTr2lXEo\nrlbri9QW8ZIGVdRHt6KTFTVU3uK9uhW2ojby+IEemywvRtVQx9gdvjCNAN1oW4nW\nm7inQQ0yOR9yFaMx901T74CeVrTlwMTzdLYolPyj9Uxqn+YmxOzqRmcfx/2bzpR1\nLvX+hBLBJ6Qh6MCmsLBlrualUDunQ9Om/Icna1vXij3AvR4/ScdqJ6+Ee/FwV4tV\nbIzKF3DcjumAaA0dgR4RISUngz+/vz868vKAtI7Nh5y40UF1K2m/sRuvt75TZR4=\n=rutr\n-----END PGP SIGNATURE-----\n", "payload": "tree 0041741f8e77641978715c0d2d1e502e88be4326\nparent c46f948a8056c9da728969dcc30e4c132d4b4bbb\nparent 11ca64401a5d562898e8b5f46bd36d6d1c6dc3ef\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1615330887 +0900\ncommitter GitHub <noreply@github.com> 1615330887 +0900\n\nRollup merge of #82411 - ijackson:fix-exitstatus, r=dtolnay\n\nFixes to ExitStatus and its docs\n\n* On Unix, properly display every possible wait status (and don't panic on weird values)\n* In the documentation, be clear and consistent about \"exit status\" vs \"wait status\".\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74e74e9df88d34cf4077afcaac9321cf5eb1a58d", "html_url": "https://github.com/rust-lang/rust/commit/74e74e9df88d34cf4077afcaac9321cf5eb1a58d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74e74e9df88d34cf4077afcaac9321cf5eb1a58d/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c46f948a8056c9da728969dcc30e4c132d4b4bbb", "url": "https://api.github.com/repos/rust-lang/rust/commits/c46f948a8056c9da728969dcc30e4c132d4b4bbb", "html_url": "https://github.com/rust-lang/rust/commit/c46f948a8056c9da728969dcc30e4c132d4b4bbb"}, {"sha": "11ca64401a5d562898e8b5f46bd36d6d1c6dc3ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/11ca64401a5d562898e8b5f46bd36d6d1c6dc3ef", "html_url": "https://github.com/rust-lang/rust/commit/11ca64401a5d562898e8b5f46bd36d6d1c6dc3ef"}], "stats": {"total": 86, "additions": 75, "deletions": 11}, "files": [{"sha": "15ac9e402c589243b2b8720efbba4f186bb4496e", "filename": "library/std/src/process.rs", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/74e74e9df88d34cf4077afcaac9321cf5eb1a58d/library%2Fstd%2Fsrc%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74e74e9df88d34cf4077afcaac9321cf5eb1a58d/library%2Fstd%2Fsrc%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprocess.rs?ref=74e74e9df88d34cf4077afcaac9321cf5eb1a58d", "patch": "@@ -885,7 +885,7 @@ impl Command {\n     }\n \n     /// Executes a command as a child process, waiting for it to finish and\n-    /// collecting its exit status.\n+    /// collecting its status.\n     ///\n     /// By default, stdin, stdout and stderr are inherited from the parent.\n     ///\n@@ -899,7 +899,7 @@ impl Command {\n     ///                      .status()\n     ///                      .expect(\"failed to execute process\");\n     ///\n-    /// println!(\"process exited with: {}\", status);\n+    /// println!(\"process finished with: {}\", status);\n     ///\n     /// assert!(status.success());\n     /// ```\n@@ -1368,11 +1368,17 @@ impl From<fs::File> for Stdio {\n \n /// Describes the result of a process after it has terminated.\n ///\n-/// This `struct` is used to represent the exit status of a child process.\n+/// This `struct` is used to represent the exit status or other termination of a child process.\n /// Child processes are created via the [`Command`] struct and their exit\n /// status is exposed through the [`status`] method, or the [`wait`] method\n /// of a [`Child`] process.\n ///\n+/// An `ExitStatus` represents every possible disposition of a process.  On Unix this\n+/// is the **wait status**.  It is *not* simply an *exit status* (a value passed to `exit`).\n+///\n+/// For proper error reporting of failed processes, print the value of `ExitStatus` using its\n+/// implementation of [`Display`](crate::fmt::Display).\n+///\n /// [`status`]: Command::status\n /// [`wait`]: Child::wait\n #[derive(PartialEq, Eq, Clone, Copy, Debug)]\n@@ -1400,7 +1406,7 @@ impl ExitStatus {\n     /// if status.success() {\n     ///     println!(\"'projects/' directory created\");\n     /// } else {\n-    ///     println!(\"failed to create 'projects/' directory\");\n+    ///     println!(\"failed to create 'projects/' directory: {}\", status);\n     /// }\n     /// ```\n     #[stable(feature = \"process\", since = \"1.0.0\")]\n@@ -1410,9 +1416,14 @@ impl ExitStatus {\n \n     /// Returns the exit code of the process, if any.\n     ///\n-    /// On Unix, this will return `None` if the process was terminated\n-    /// by a signal; `std::os::unix` provides an extension trait for\n-    /// extracting the signal and other details from the `ExitStatus`.\n+    /// In Unix terms the return value is the **exit status**: the value passed to `exit`, if the\n+    /// process finished by calling `exit`.  Note that on Unix the exit status is truncated to 8\n+    /// bits, and that values that didn't come from a program's call to `exit` may be invented the\n+    /// runtime system (often, for example, 255, 254, 127 or 126).\n+    ///\n+    /// On Unix, this will return `None` if the process was terminated by a signal.\n+    /// [`ExitStatusExt`](crate::os::unix::process::ExitStatusExt) is an\n+    /// extension trait for extracting any such signal, and other details, from the `ExitStatus`.\n     ///\n     /// # Examples\n     ///"}, {"sha": "4e170a8bb1cb3adf8819ccfc09f745c4c3168b33", "filename": "library/std/src/sys/unix/ext/process.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/74e74e9df88d34cf4077afcaac9321cf5eb1a58d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74e74e9df88d34cf4077afcaac9321cf5eb1a58d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fprocess.rs?ref=74e74e9df88d34cf4077afcaac9321cf5eb1a58d", "patch": "@@ -188,12 +188,20 @@ impl CommandExt for process::Command {\n \n /// Unix-specific extensions to [`process::ExitStatus`].\n ///\n+/// On Unix, `ExitStatus` **does not necessarily represent an exit status**, as passed to the\n+/// `exit` system call or returned by [`ExitStatus::code()`](crate::process::ExitStatus::code).\n+/// It represents **any wait status**, as returned by one of the `wait` family of system calls.\n+///\n+/// This is because a Unix wait status (a Rust `ExitStatus`) can represent a Unix exit status, but\n+/// can also represent other kinds of process event.\n+///\n /// This trait is sealed: it cannot be implemented outside the standard library.\n /// This is so that future additional methods are not breaking changes.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait ExitStatusExt: Sealed {\n-    /// Creates a new `ExitStatus` from the raw underlying `i32` return value of\n-    /// a process.\n+    /// Creates a new `ExitStatus` from the raw underlying integer status value from `wait`\n+    ///\n+    /// The value should be a **wait status, not an exit status**.\n     #[stable(feature = \"exit_status_from\", since = \"1.12.0\")]\n     fn from_raw(raw: i32) -> Self;\n \n@@ -222,6 +230,8 @@ pub trait ExitStatusExt: Sealed {\n     fn continued(&self) -> bool;\n \n     /// Returns the underlying raw `wait` status.\n+    ///\n+    /// The returned integer is a **wait status, not an exit status**.\n     #[unstable(feature = \"unix_process_wait_more\", issue = \"80695\")]\n     fn into_raw(self) -> i32;\n }"}, {"sha": "2fdbabae2775fb7575150add9c722e7e215b0c7c", "filename": "library/std/src/sys/unix/process/process_unix.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/74e74e9df88d34cf4077afcaac9321cf5eb1a58d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74e74e9df88d34cf4077afcaac9321cf5eb1a58d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs?ref=74e74e9df88d34cf4077afcaac9321cf5eb1a58d", "patch": "@@ -527,9 +527,22 @@ impl fmt::Display for ExitStatus {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         if let Some(code) = self.code() {\n             write!(f, \"exit code: {}\", code)\n+        } else if let Some(signal) = self.signal() {\n+            if self.core_dumped() {\n+                write!(f, \"signal: {} (core dumped)\", signal)\n+            } else {\n+                write!(f, \"signal: {}\", signal)\n+            }\n+        } else if let Some(signal) = self.stopped_signal() {\n+            write!(f, \"stopped (not terminated) by signal: {}\", signal)\n+        } else if self.continued() {\n+            write!(f, \"continued (WIFCONTINUED)\")\n         } else {\n-            let signal = self.signal().unwrap();\n-            write!(f, \"signal: {}\", signal)\n+            write!(f, \"unrecognised wait status: {} {:#x}\", self.0, self.0)\n         }\n     }\n }\n+\n+#[cfg(test)]\n+#[path = \"process_unix/tests.rs\"]\n+mod tests;"}, {"sha": "5819d2c2a5a26944784b787c13356f7fea1be449", "filename": "library/std/src/sys/unix/process/process_unix/tests.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/74e74e9df88d34cf4077afcaac9321cf5eb1a58d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74e74e9df88d34cf4077afcaac9321cf5eb1a58d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix%2Ftests.rs?ref=74e74e9df88d34cf4077afcaac9321cf5eb1a58d", "patch": "@@ -0,0 +1,30 @@\n+#[test]\n+fn exitstatus_display_tests() {\n+    // In practice this is the same on every Unix.\n+    // If some weird platform turns out to be different, and this test fails, use #[cfg].\n+    use crate::os::unix::process::ExitStatusExt;\n+    use crate::process::ExitStatus;\n+\n+    let t = |v, s| assert_eq!(s, format!(\"{}\", <ExitStatus as ExitStatusExt>::from_raw(v)));\n+\n+    t(0x0000f, \"signal: 15\");\n+    t(0x0008b, \"signal: 11 (core dumped)\");\n+    t(0x00000, \"exit code: 0\");\n+    t(0x0ff00, \"exit code: 255\");\n+\n+    // On MacOS, 0x0137f is WIFCONTINUED, not WIFSTOPPED.  Probably *BSD is similar.\n+    //   https://github.com/rust-lang/rust/pull/82749#issuecomment-790525956\n+    // The purpose of this test is to test our string formatting, not our understanding of the wait\n+    // status magic numbers.  So restrict these to Linux.\n+    if cfg!(target_os = \"linux\") {\n+        t(0x0137f, \"stopped (not terminated) by signal: 19\");\n+        t(0x0ffff, \"continued (WIFCONTINUED)\");\n+    }\n+\n+    // Testing \"unrecognised wait status\" is hard because the wait.h macros typically\n+    // assume that the value came from wait and isn't mad.  With the glibc I have here\n+    // this works:\n+    if cfg!(all(target_os = \"linux\", target_env = \"gnu\")) {\n+        t(0x000ff, \"unrecognised wait status: 255 0xff\");\n+    }\n+}"}]}