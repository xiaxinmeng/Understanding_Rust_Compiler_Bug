{"sha": "cf8ea64d9dd9f8925ce328523e075be5f18efeaf", "node_id": "C_kwDOAAsO6NoAKGNmOGVhNjRkOWRkOWY4OTI1Y2UzMjg1MjNlMDc1YmU1ZjE4ZWZlYWY", "commit": {"author": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-05-08T05:17:58Z"}, "committer": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-05-11T02:47:18Z"}, "message": "Introduce EarlyBinder", "tree": {"sha": "2152e87755fcd15a3344d0027bb9d0cdae4fc766", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2152e87755fcd15a3344d0027bb9d0cdae4fc766"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf8ea64d9dd9f8925ce328523e075be5f18efeaf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf8ea64d9dd9f8925ce328523e075be5f18efeaf", "html_url": "https://github.com/rust-lang/rust/commit/cf8ea64d9dd9f8925ce328523e075be5f18efeaf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf8ea64d9dd9f8925ce328523e075be5f18efeaf/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "670bc53c0350b461b0d9bdb9451261c0d805ecef", "url": "https://api.github.com/repos/rust-lang/rust/commits/670bc53c0350b461b0d9bdb9451261c0d805ecef", "html_url": "https://github.com/rust-lang/rust/commit/670bc53c0350b461b0d9bdb9451261c0d805ecef"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "b7776b3f0c38bdd10db744344743a82f87323d81", "filename": "clippy_lints/src/eta_reduction.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cf8ea64d9dd9f8925ce328523e075be5f18efeaf/clippy_lints%2Fsrc%2Feta_reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8ea64d9dd9f8925ce328523e075be5f18efeaf/clippy_lints%2Fsrc%2Feta_reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feta_reduction.rs?ref=cf8ea64d9dd9f8925ce328523e075be5f18efeaf", "patch": "@@ -12,7 +12,7 @@ use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::adjustment::{Adjust, Adjustment, AutoBorrow};\n use rustc_middle::ty::binding::BindingMode;\n use rustc_middle::ty::subst::Subst;\n-use rustc_middle::ty::{self, ClosureKind, Ty, TypeFoldable};\n+use rustc_middle::ty::{self, ClosureKind, EarlyBinder, Ty, TypeFoldable};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::symbol::sym;\n \n@@ -150,7 +150,7 @@ impl<'tcx> LateLintPass<'tcx> for EtaReduction {\n             if check_inputs(cx, body.params, args);\n             let method_def_id = cx.typeck_results().type_dependent_def_id(body.value.hir_id).unwrap();\n             let substs = cx.typeck_results().node_substs(body.value.hir_id);\n-            let call_ty = cx.tcx.type_of(method_def_id).subst(cx.tcx, substs);\n+            let call_ty = EarlyBinder(cx.tcx.type_of(method_def_id)).subst(cx.tcx, substs);\n             if check_sig(cx, closure_ty, call_ty);\n             then {\n                 span_lint_and_then(cx, REDUNDANT_CLOSURE_FOR_METHOD_CALLS, expr.span, \"redundant closure\", |diag| {"}, {"sha": "5c46d6c7df7056856ed7afcd3d37f09b70cd2808", "filename": "clippy_lints/src/future_not_send.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cf8ea64d9dd9f8925ce328523e075be5f18efeaf/clippy_lints%2Fsrc%2Ffuture_not_send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8ea64d9dd9f8925ce328523e075be5f18efeaf/clippy_lints%2Fsrc%2Ffuture_not_send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffuture_not_send.rs?ref=cf8ea64d9dd9f8925ce328523e075be5f18efeaf", "patch": "@@ -5,7 +5,7 @@ use rustc_hir::{Body, FnDecl, HirId};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::subst::Subst;\n-use rustc_middle::ty::{Opaque, PredicateKind::Trait};\n+use rustc_middle::ty::{EarlyBinder, Opaque, PredicateKind::Trait};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::{sym, Span};\n use rustc_trait_selection::traits::error_reporting::suggestions::InferCtxtExt;\n@@ -67,7 +67,7 @@ impl<'tcx> LateLintPass<'tcx> for FutureNotSend {\n             let preds = cx.tcx.explicit_item_bounds(id);\n             let mut is_future = false;\n             for &(p, _span) in preds {\n-                let p = p.subst(cx.tcx, subst);\n+                let p = EarlyBinder(p).subst(cx.tcx, subst);\n                 if let Some(trait_pred) = p.to_opt_poly_trait_pred() {\n                     if Some(trait_pred.skip_binder().trait_ref.def_id) == cx.tcx.lang_items().future_trait() {\n                         is_future = true;"}, {"sha": "a323737ae404e9399bf04bc2c2b64a63b2d45916", "filename": "clippy_lints/src/mut_reference.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cf8ea64d9dd9f8925ce328523e075be5f18efeaf/clippy_lints%2Fsrc%2Fmut_reference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8ea64d9dd9f8925ce328523e075be5f18efeaf/clippy_lints%2Fsrc%2Fmut_reference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_reference.rs?ref=cf8ea64d9dd9f8925ce328523e075be5f18efeaf", "patch": "@@ -2,7 +2,7 @@ use clippy_utils::diagnostics::span_lint;\n use rustc_hir::{BorrowKind, Expr, ExprKind, Mutability};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::subst::Subst;\n-use rustc_middle::ty::{self, Ty};\n+use rustc_middle::ty::{self, EarlyBinder, Ty};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use std::iter;\n \n@@ -48,7 +48,7 @@ impl<'tcx> LateLintPass<'tcx> for UnnecessaryMutPassed {\n             ExprKind::MethodCall(path, arguments, _) => {\n                 let def_id = cx.typeck_results().type_dependent_def_id(e.hir_id).unwrap();\n                 let substs = cx.typeck_results().node_substs(e.hir_id);\n-                let method_type = cx.tcx.type_of(def_id).subst(cx.tcx, substs);\n+                let method_type = EarlyBinder(cx.tcx.type_of(def_id)).subst(cx.tcx, substs);\n                 check_arguments(cx, arguments, method_type, path.ident.as_str(), \"method\");\n             },\n             _ => (),"}, {"sha": "0bb577b7620b130abb46bd0569d337c0abab76ae", "filename": "clippy_lints/src/transmute/transmute_undefined_repr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cf8ea64d9dd9f8925ce328523e075be5f18efeaf/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_undefined_repr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8ea64d9dd9f8925ce328523e075be5f18efeaf/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_undefined_repr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_undefined_repr.rs?ref=cf8ea64d9dd9f8925ce328523e075be5f18efeaf", "patch": "@@ -4,7 +4,7 @@ use clippy_utils::ty::is_c_void;\n use rustc_hir::Expr;\n use rustc_lint::LateContext;\n use rustc_middle::ty::subst::{Subst, SubstsRef};\n-use rustc_middle::ty::{self, IntTy, Ty, TypeAndMut, UintTy};\n+use rustc_middle::ty::{self, EarlyBinder, IntTy, Ty, TypeAndMut, UintTy};\n use rustc_span::Span;\n \n #[allow(clippy::too_many_lines)]\n@@ -307,7 +307,7 @@ fn reduce_ty<'tcx>(cx: &LateContext<'tcx>, mut ty: Ty<'tcx>) -> ReducedTy<'tcx>\n                     .non_enum_variant()\n                     .fields\n                     .iter()\n-                    .map(|f| cx.tcx.type_of(f.did).subst(cx.tcx, substs));\n+                    .map(|f| EarlyBinder(cx.tcx.type_of(f.did)).subst(cx.tcx, substs));\n                 let Some(sized_ty) = iter.find(|&ty| !is_zero_sized_ty(cx, ty)) else {\n                     return ReducedTy::TypeErasure;\n                 };"}, {"sha": "a80c7ee4929584d3885810b7050972aa208f28bb", "filename": "clippy_utils/src/consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cf8ea64d9dd9f8925ce328523e075be5f18efeaf/clippy_utils%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8ea64d9dd9f8925ce328523e075be5f18efeaf/clippy_utils%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fconsts.rs?ref=cf8ea64d9dd9f8925ce328523e075be5f18efeaf", "patch": "@@ -9,7 +9,7 @@ use rustc_hir::{BinOp, BinOpKind, Block, Expr, ExprKind, HirId, Item, ItemKind,\n use rustc_lint::LateContext;\n use rustc_middle::mir::interpret::Scalar;\n use rustc_middle::ty::subst::{Subst, SubstsRef};\n-use rustc_middle::ty::{self, FloatTy, ScalarInt, Ty, TyCtxt};\n+use rustc_middle::ty::{self, EarlyBinder, FloatTy, ScalarInt, Ty, TyCtxt};\n use rustc_middle::{bug, span_bug};\n use rustc_span::symbol::Symbol;\n use std::cmp::Ordering::{self, Equal};\n@@ -420,7 +420,7 @@ impl<'a, 'tcx> ConstEvalLateContext<'a, 'tcx> {\n                 let substs = if self.substs.is_empty() {\n                     substs\n                 } else {\n-                    substs.subst(self.lcx.tcx, self.substs)\n+                    EarlyBinder(substs).subst(self.lcx.tcx, self.substs)\n                 };\n \n                 let result = self"}, {"sha": "b46a7b86a7590928640b38af872b45283e33d4e1", "filename": "clippy_utils/src/ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cf8ea64d9dd9f8925ce328523e075be5f18efeaf/clippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8ea64d9dd9f8925ce328523e075be5f18efeaf/clippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fty.rs?ref=cf8ea64d9dd9f8925ce328523e075be5f18efeaf", "patch": "@@ -13,7 +13,7 @@ use rustc_lint::LateContext;\n use rustc_middle::mir::interpret::{ConstValue, Scalar};\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind, Subst};\n use rustc_middle::ty::{\n-    self, AdtDef, Binder, FnSig, IntTy, Predicate, PredicateKind, Ty, TyCtxt, TypeFoldable, UintTy, VariantDiscr,\n+    self, AdtDef, Binder, EarlyBinder, FnSig, IntTy, Predicate, PredicateKind, Ty, TyCtxt, TypeFoldable, UintTy, VariantDiscr,\n };\n use rustc_span::symbol::Ident;\n use rustc_span::{sym, Span, Symbol, DUMMY_SP};\n@@ -520,7 +520,7 @@ pub fn expr_sig<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'_>) -> Option<ExprFnS\n         let ty = cx.typeck_results().expr_ty_adjusted(expr).peel_refs();\n         match *ty.kind() {\n             ty::Closure(_, subs) => Some(ExprFnSig::Closure(subs.as_closure().sig())),\n-            ty::FnDef(id, subs) => Some(ExprFnSig::Sig(cx.tcx.fn_sig(id).subst(cx.tcx, subs))),\n+            ty::FnDef(id, subs) => Some(ExprFnSig::Sig(EarlyBinder(cx.tcx.fn_sig(id)).subst(cx.tcx, subs))),\n             ty::FnPtr(sig) => Some(ExprFnSig::Sig(sig)),\n             ty::Dynamic(bounds, _) => {\n                 let lang_items = cx.tcx.lang_items();"}]}