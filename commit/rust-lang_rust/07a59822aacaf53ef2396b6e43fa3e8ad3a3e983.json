{"sha": "07a59822aacaf53ef2396b6e43fa3e8ad3a3e983", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3YTU5ODIyYWFjYWY1M2VmMjM5NmI2ZTQzZmEzZThhZDNhM2U5ODM=", "commit": {"author": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2020-12-18T12:43:55Z"}, "committer": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2020-12-18T12:43:55Z"}, "message": "Improve comment and move code up", "tree": {"sha": "78194cad51d449b207c046515bcba3d5aa933832", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/78194cad51d449b207c046515bcba3d5aa933832"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/07a59822aacaf53ef2396b6e43fa3e8ad3a3e983", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/07a59822aacaf53ef2396b6e43fa3e8ad3a3e983", "html_url": "https://github.com/rust-lang/rust/commit/07a59822aacaf53ef2396b6e43fa3e8ad3a3e983", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/07a59822aacaf53ef2396b6e43fa3e8ad3a3e983/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aeb3061c40593e9cfbb52a1d5c8dafb1bd3e6a18", "url": "https://api.github.com/repos/rust-lang/rust/commits/aeb3061c40593e9cfbb52a1d5c8dafb1bd3e6a18", "html_url": "https://github.com/rust-lang/rust/commit/aeb3061c40593e9cfbb52a1d5c8dafb1bd3e6a18"}], "stats": {"total": 21, "additions": 11, "deletions": 10}, "files": [{"sha": "18ef5d42084b8f572039112d28a8940b01325362", "filename": "compiler/rustc_middle/src/mir/mono.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/07a59822aacaf53ef2396b6e43fa3e8ad3a3e983/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07a59822aacaf53ef2396b6e43fa3e8ad3a3e983/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs?ref=07a59822aacaf53ef2396b6e43fa3e8ad3a3e983", "patch": "@@ -78,14 +78,6 @@ impl<'tcx> MonoItem<'tcx> {\n     }\n \n     pub fn instantiation_mode(&self, tcx: TyCtxt<'tcx>) -> InstantiationMode {\n-        let generate_cgu_internal_copies = tcx\n-            .sess\n-            .opts\n-            .debugging_opts\n-            .inline_in_all_cgus\n-            .unwrap_or_else(|| tcx.sess.opts.optimize != OptLevel::No)\n-            && !tcx.sess.link_dead_code();\n-\n         match *self {\n             MonoItem::Fn(ref instance) => {\n                 let entry_def_id = tcx.entry_fn(LOCAL_CRATE).map(|(id, _)| id);\n@@ -98,9 +90,18 @@ impl<'tcx> MonoItem<'tcx> {\n                     return InstantiationMode::GloballyShared { may_conflict: false };\n                 }\n \n+                let generate_cgu_internal_copies = tcx\n+                    .sess\n+                    .opts\n+                    .debugging_opts\n+                    .inline_in_all_cgus\n+                    .unwrap_or_else(|| tcx.sess.opts.optimize != OptLevel::No)\n+                    && !tcx.sess.link_dead_code();\n+\n                 // At this point we don't have explicit linkage and we're an\n-                // inlined function. If we're inlining into all CGUs then we'll\n-                // be creating a local copy per CGU.\n+                // inlined function. If we should generate local copies for each CGU,\n+                // then return `LocalCopy`, otherwise we'll just generate one copy\n+                // and share it with all CGUs in this crate.\n                 if generate_cgu_internal_copies {\n                     InstantiationMode::LocalCopy\n                 } else {"}]}