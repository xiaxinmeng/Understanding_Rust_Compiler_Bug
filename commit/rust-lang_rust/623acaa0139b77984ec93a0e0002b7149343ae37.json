{"sha": "623acaa0139b77984ec93a0e0002b7149343ae37", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyM2FjYWEwMTM5Yjc3OTg0ZWM5M2EwZTAwMDJiNzE0OTM0M2FlMzc=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-05-25T04:48:40Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-05-25T04:50:35Z"}, "message": "std: Remove unused args from run_high_level_loop", "tree": {"sha": "12c83ca6cd2da32cd2f45f009dac87db127d5993", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12c83ca6cd2da32cd2f45f009dac87db127d5993"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/623acaa0139b77984ec93a0e0002b7149343ae37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/623acaa0139b77984ec93a0e0002b7149343ae37", "html_url": "https://github.com/rust-lang/rust/commit/623acaa0139b77984ec93a0e0002b7149343ae37", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/623acaa0139b77984ec93a0e0002b7149343ae37/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "444ff687a299721247ae008abdeca9b32fc958dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/444ff687a299721247ae008abdeca9b32fc958dd", "html_url": "https://github.com/rust-lang/rust/commit/444ff687a299721247ae008abdeca9b32fc958dd"}], "stats": {"total": 77, "additions": 19, "deletions": 58}, "files": [{"sha": "377ba190825c98066b33e61076eee12d62ffcb09", "filename": "src/libstd/uv_global_loop.rs", "status": "modified", "additions": 8, "deletions": 23, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/623acaa0139b77984ec93a0e0002b7149343ae37/src%2Flibstd%2Fuv_global_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/623acaa0139b77984ec93a0e0002b7149343ae37/src%2Flibstd%2Fuv_global_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_global_loop.rs?ref=623acaa0139b77984ec93a0e0002b7149343ae37", "patch": "@@ -103,29 +103,14 @@ fn spawn_high_level_loop() -> hl::high_level_loop unsafe {\n             #debug(\"global libuv task is now weak %?\", weak_exit_po);\n             let loop_msg_po = port::<hl::high_level_msg>();\n             let loop_msg_ch = loop_msg_po.chan();\n-            hl::run_high_level_loop(\n-                loop_msg_po,\n-                // before_run\n-                {|async_handle|\n-                    #debug(\"global libuv: before_run %?\", async_handle);\n-                    let hll = hl::high_level_loop({\n-                        async_handle: async_handle,\n-                        op_chan: loop_msg_ch\n-                    });\n-                    exit_ch.send(hll);\n-                },\n-                // before_msg_process\n-                {|async_handle, loop_active|\n-                    #debug(\"global libuv: before_msg_drain %? %?\",\n-                           async_handle, loop_active);\n-                    true\n-                },\n-                // before_tear_down\n-                {|async_handle|\n-                    #debug(\"libuv task: before_tear_down %?\",\n-                           async_handle);\n-                }\n-            );\n+            hl::run_high_level_loop(loop_msg_po) {|async_handle|\n+                #debug(\"global libuv: before_run %?\", async_handle);\n+                let hll = hl::high_level_loop({\n+                    async_handle: async_handle,\n+                    op_chan: loop_msg_ch\n+                });\n+                exit_ch.send(hll);\n+            }\n             #debug(\"global libuv task is leaving weakened state\");\n         };\n         #debug(\"global libuv task exiting\");"}, {"sha": "b366311604213e661aaea7eddce256e03c4bf5a1", "filename": "src/libstd/uv_hl.rs", "status": "modified", "additions": 11, "deletions": 35, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/623acaa0139b77984ec93a0e0002b7149343ae37/src%2Flibstd%2Fuv_hl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/623acaa0139b77984ec93a0e0002b7149343ae37/src%2Flibstd%2Fuv_hl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_hl.rs?ref=623acaa0139b77984ec93a0e0002b7149343ae37", "patch": "@@ -61,10 +61,7 @@ the loop's msg port\n provided `async_handle`. `uv_run` should return shortly after\n \"]\n unsafe fn run_high_level_loop(msg_po: port<high_level_msg>,\n-                              before_run: fn~(*ll::uv_async_t),\n-                              before_msg_process:\n-                                fn~(*ll::uv_async_t, bool) -> bool,\n-                              before_tear_down: fn~(*ll::uv_async_t)) {\n+                              before_run: fn~(*ll::uv_async_t)) {\n     let loop_ptr = ll::loop_new();\n     // set up the special async handle we'll use to allow multi-task\n     // communication with this loop\n@@ -77,8 +74,6 @@ unsafe fn run_high_level_loop(msg_po: port<high_level_msg>,\n     let data: hl_loop_data = {\n         async_handle: async_handle,\n         mut active: true,\n-        before_msg_process: before_msg_process,\n-        before_tear_down: before_tear_down,\n         msg_po_ptr: addr_of(msg_po)\n     };\n     ll::set_data_for_uv_handle(async_handle, addr_of(data));\n@@ -130,8 +125,6 @@ fn exit(hl_loop: high_level_loop) unsafe {\n type hl_loop_data = {\n     async_handle: *ll::uv_async_t,\n     mut active: bool,\n-    before_msg_process: fn~(*ll::uv_async_t, bool) -> bool,\n-    before_tear_down: fn~(*ll::uv_async_t),\n     msg_po_ptr: *port<high_level_msg>\n };\n \n@@ -160,8 +153,6 @@ crust fn high_level_wake_up_cb(async_handle: *ll::uv_async_t,\n             if (*data).active {\n                 alt msg {\n                   interaction(cb) {\n-                    (*data).before_msg_process(async_handle,\n-                                               (*data).active);\n                     cb(loop_ptr);\n                   }\n                   teardown_loop {\n@@ -189,7 +180,6 @@ fn begin_teardown(data: *hl_loop_data) unsafe {\n     log(debug, \"high_level_tear_down() called, close async_handle\");\n     // call user-suppled before_tear_down cb\n     let async_handle = (*data).async_handle;\n-    (*data).before_tear_down(async_handle);\n     ll::close(async_handle as *c_void, tear_down_close_cb);\n }\n \n@@ -236,30 +226,16 @@ mod test {\n         task::spawn_sched(task::manual_threads(1u)) {||\n             let msg_po = comm::port::<high_level_msg>();\n             let msg_ch = comm::chan(msg_po);\n-            run_high_level_loop(\n-                msg_po,\n-                // before_run\n-                {|async_handle|\n-                    log(debug,#fmt(\"hltest before_run: async_handle %?\",\n-                                  async_handle));\n-                    // do an async_send with it\n-                    ll::async_send(async_handle);\n-                    comm::send(hl_loop_ch, high_level_loop({\n-                       async_handle: async_handle,\n-                       op_chan: msg_ch\n-                    }));\n-                },\n-                // before_msg_drain\n-                {|async_handle, status|\n-                    log(debug,#fmt(\"hltest before_msg_drain: handle %? %?\",\n-                                  async_handle, status));\n-                    true\n-                },\n-                // before_tear_down\n-                {|async_handle|\n-                    log(debug,#fmt(\"hl test_loop b4_tear_down: async %?\",\n-                                  async_handle));\n-            });\n+            run_high_level_loop(msg_po) {|async_handle|\n+                log(debug,#fmt(\"hltest before_run: async_handle %?\",\n+                               async_handle));\n+                // do an async_send with it\n+                ll::async_send(async_handle);\n+                comm::send(hl_loop_ch, high_level_loop({\n+                    async_handle: async_handle,\n+                    op_chan: msg_ch\n+                }));\n+            }\n             comm::send(exit_ch, ());\n         };\n         ret comm::recv(hl_loop_port);"}]}