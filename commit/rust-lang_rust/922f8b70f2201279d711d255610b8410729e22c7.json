{"sha": "922f8b70f2201279d711d255610b8410729e22c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyMmY4YjcwZjIyMDEyNzlkNzExZDI1NTYxMGI4NDEwNzI5ZTIyYzc=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-01-07T16:38:38Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-01-08T21:01:07Z"}, "message": "intravisit: use walk_list! more", "tree": {"sha": "2ed1d63710bc3eb1667fe7334854eaeec017d276", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ed1d63710bc3eb1667fe7334854eaeec017d276"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/922f8b70f2201279d711d255610b8410729e22c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/922f8b70f2201279d711d255610b8410729e22c7", "html_url": "https://github.com/rust-lang/rust/commit/922f8b70f2201279d711d255610b8410729e22c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/922f8b70f2201279d711d255610b8410729e22c7/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37d76dc2f793ba6317efbcd45f2d998565bfa0d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/37d76dc2f793ba6317efbcd45f2d998565bfa0d6", "html_url": "https://github.com/rust-lang/rust/commit/37d76dc2f793ba6317efbcd45f2d998565bfa0d6"}], "stats": {"total": 36, "additions": 9, "deletions": 27}, "files": [{"sha": "4664340b15fb7d6222ebd74f7942f324adbe2671", "filename": "src/librustc_hir/intravisit.rs", "status": "modified", "additions": 9, "deletions": 27, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/922f8b70f2201279d711d255610b8410729e22c7/src%2Flibrustc_hir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/922f8b70f2201279d711d255610b8410729e22c7/src%2Flibrustc_hir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fintravisit.rs?ref=922f8b70f2201279d711d255610b8410729e22c7", "patch": "@@ -234,9 +234,7 @@ pub trait Visitor<'v>: Sized {\n     #[allow(unused_variables)]\n     fn visit_nested_item(&mut self, id: ItemId) {\n         let opt_item = self.nested_visit_map().inter().map(|map| map.item(id.id));\n-        if let Some(item) = opt_item {\n-            self.visit_item(item);\n-        }\n+        walk_list!(self, visit_item, opt_item);\n     }\n \n     /// Like `visit_nested_item()`, but for trait items. See\n@@ -245,9 +243,7 @@ pub trait Visitor<'v>: Sized {\n     #[allow(unused_variables)]\n     fn visit_nested_trait_item(&mut self, id: TraitItemId) {\n         let opt_item = self.nested_visit_map().inter().map(|map| map.trait_item(id));\n-        if let Some(item) = opt_item {\n-            self.visit_trait_item(item);\n-        }\n+        walk_list!(self, visit_trait_item, opt_item);\n     }\n \n     /// Like `visit_nested_item()`, but for impl items. See\n@@ -256,9 +252,7 @@ pub trait Visitor<'v>: Sized {\n     #[allow(unused_variables)]\n     fn visit_nested_impl_item(&mut self, id: ImplItemId) {\n         let opt_item = self.nested_visit_map().inter().map(|map| map.impl_item(id));\n-        if let Some(item) = opt_item {\n-            self.visit_impl_item(item);\n-        }\n+        walk_list!(self, visit_impl_item, opt_item);\n     }\n \n     /// Invoked to visit the body of a function, method or closure. Like\n@@ -267,9 +261,7 @@ pub trait Visitor<'v>: Sized {\n     /// the body.\n     fn visit_nested_body(&mut self, id: BodyId) {\n         let opt_body = self.nested_visit_map().intra().map(|map| map.body(id));\n-        if let Some(body) = opt_body {\n-            self.visit_body(body);\n-        }\n+        walk_list!(self, visit_body, opt_body);\n     }\n \n     fn visit_param(&mut self, param: &'v Param<'v>) {\n@@ -690,9 +682,7 @@ pub fn walk_qpath<'v, V: Visitor<'v>>(\n ) {\n     match *qpath {\n         QPath::Resolved(ref maybe_qself, ref path) => {\n-            if let Some(ref qself) = *maybe_qself {\n-                visitor.visit_ty(qself);\n-            }\n+            walk_list!(visitor, visit_ty, maybe_qself);\n             visitor.visit_path(path, id)\n         }\n         QPath::TypeRelative(ref qself, ref segment) => {\n@@ -714,9 +704,7 @@ pub fn walk_path_segment<'v, V: Visitor<'v>>(\n     segment: &'v PathSegment<'v>,\n ) {\n     visitor.visit_ident(segment.ident);\n-    if let Some(id) = segment.hir_id {\n-        visitor.visit_id(id);\n-    }\n+    walk_list!(visitor, visit_id, segment.hir_id);\n     if let Some(ref args) = segment.args {\n         visitor.visit_generic_args(path_span, args);\n     }\n@@ -1005,9 +993,7 @@ pub fn walk_struct_def<'v, V: Visitor<'v>>(\n     visitor: &mut V,\n     struct_definition: &'v VariantData<'v>,\n ) {\n-    if let Some(ctor_hir_id) = struct_definition.ctor_hir_id() {\n-        visitor.visit_id(ctor_hir_id);\n-    }\n+    walk_list!(visitor, visit_id, struct_definition.ctor_hir_id());\n     walk_list!(visitor, visit_struct_field, struct_definition.fields());\n }\n \n@@ -1127,15 +1113,11 @@ pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr<'v>)\n             visitor.visit_qpath(qpath, expression.hir_id, expression.span);\n         }\n         ExprKind::Break(ref destination, ref opt_expr) => {\n-            if let Some(ref label) = destination.label {\n-                visitor.visit_label(label);\n-            }\n+            walk_list!(visitor, visit_label, &destination.label);\n             walk_list!(visitor, visit_expr, opt_expr);\n         }\n         ExprKind::Continue(ref destination) => {\n-            if let Some(ref label) = destination.label {\n-                visitor.visit_label(label);\n-            }\n+            walk_list!(visitor, visit_label, &destination.label);\n         }\n         ExprKind::Ret(ref optional_expression) => {\n             walk_list!(visitor, visit_expr, optional_expression);"}]}