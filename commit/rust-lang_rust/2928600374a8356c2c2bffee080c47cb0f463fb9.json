{"sha": "2928600374a8356c2c2bffee080c47cb0f463fb9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5Mjg2MDAzNzRhODM1NmMyYzJiZmZlZTA4MGM0N2NiMGY0NjNmYjk=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2020-06-24T14:50:23Z"}, "committer": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2020-06-24T14:54:21Z"}, "message": "Reorder items", "tree": {"sha": "a21d348fbfa2d06f1fba77622c5417383938e6fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a21d348fbfa2d06f1fba77622c5417383938e6fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2928600374a8356c2c2bffee080c47cb0f463fb9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2928600374a8356c2c2bffee080c47cb0f463fb9", "html_url": "https://github.com/rust-lang/rust/commit/2928600374a8356c2c2bffee080c47cb0f463fb9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2928600374a8356c2c2bffee080c47cb0f463fb9/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6fd7809b016787e8a23f443b1b626840c4ea5c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6fd7809b016787e8a23f443b1b626840c4ea5c7", "html_url": "https://github.com/rust-lang/rust/commit/d6fd7809b016787e8a23f443b1b626840c4ea5c7"}], "stats": {"total": 152, "additions": 76, "deletions": 76}, "files": [{"sha": "d7bc64e6ca6dd05f501849c991b4169bc28f2162", "filename": "crates/ra_hir_def/src/item_tree.rs", "status": "modified", "additions": 76, "deletions": 76, "changes": 152, "blob_url": "https://github.com/rust-lang/rust/blob/2928600374a8356c2c2bffee080c47cb0f463fb9/crates%2Fra_hir_def%2Fsrc%2Fitem_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2928600374a8356c2c2bffee080c47cb0f463fb9/crates%2Fra_hir_def%2Fsrc%2Fitem_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_tree.rs?ref=2928600374a8356c2c2bffee080c47cb0f463fb9", "patch": "@@ -23,6 +23,7 @@ use hir_expand::{\n use ra_arena::{Arena, Idx, RawId};\n use ra_syntax::{ast, match_ast};\n use rustc_hash::FxHashMap;\n+use smallvec::SmallVec;\n use test_utils::mark;\n \n use crate::{\n@@ -33,26 +34,6 @@ use crate::{\n     type_ref::{Mutability, TypeBound, TypeRef},\n     visibility::RawVisibility,\n };\n-use smallvec::SmallVec;\n-\n-#[derive(Default, Debug, Eq, PartialEq)]\n-struct ItemVisibilities {\n-    arena: Arena<RawVisibility>,\n-}\n-\n-impl ItemVisibilities {\n-    fn alloc(&mut self, vis: RawVisibility) -> RawVisibilityId {\n-        match &vis {\n-            RawVisibility::Public => RawVisibilityId::PUB,\n-            RawVisibility::Module(path) if path.segments.is_empty() => match &path.kind {\n-                PathKind::Super(0) => RawVisibilityId::PRIV,\n-                PathKind::Crate => RawVisibilityId::PUB_CRATE,\n-                _ => RawVisibilityId(self.arena.alloc(vis).into_raw().into()),\n-            },\n-            _ => RawVisibilityId(self.arena.alloc(vis).into_raw().into()),\n-        }\n-    }\n-}\n \n #[derive(Copy, Clone, Eq, PartialEq)]\n pub struct RawVisibilityId(u32);\n@@ -76,69 +57,13 @@ impl fmt::Debug for RawVisibilityId {\n     }\n }\n \n-#[derive(Default, Debug, Eq, PartialEq)]\n-struct GenericParamsStorage {\n-    arena: Arena<GenericParams>,\n-}\n-\n-impl GenericParamsStorage {\n-    fn alloc(&mut self, params: GenericParams) -> GenericParamsId {\n-        if params.types.is_empty() && params.where_predicates.is_empty() {\n-            return GenericParamsId::EMPTY;\n-        }\n-\n-        GenericParamsId(self.arena.alloc(params).into_raw().into())\n-    }\n-}\n-\n #[derive(Debug, Copy, Clone, Eq, PartialEq)]\n pub struct GenericParamsId(u32);\n \n impl GenericParamsId {\n     pub const EMPTY: Self = GenericParamsId(u32::max_value());\n }\n \n-static VIS_PUB: RawVisibility = RawVisibility::Public;\n-static VIS_PRIV: RawVisibility =\n-    RawVisibility::Module(ModPath { kind: PathKind::Super(0), segments: Vec::new() });\n-static VIS_PUB_CRATE: RawVisibility =\n-    RawVisibility::Module(ModPath { kind: PathKind::Crate, segments: Vec::new() });\n-\n-static EMPTY_GENERICS: GenericParams =\n-    GenericParams { types: Arena::new(), where_predicates: Vec::new() };\n-\n-#[derive(Default, Debug, Eq, PartialEq)]\n-struct ItemTreeData {\n-    imports: Arena<Import>,\n-    extern_crates: Arena<ExternCrate>,\n-    functions: Arena<Function>,\n-    structs: Arena<Struct>,\n-    fields: Arena<Field>,\n-    unions: Arena<Union>,\n-    enums: Arena<Enum>,\n-    variants: Arena<Variant>,\n-    consts: Arena<Const>,\n-    statics: Arena<Static>,\n-    traits: Arena<Trait>,\n-    impls: Arena<Impl>,\n-    type_aliases: Arena<TypeAlias>,\n-    mods: Arena<Mod>,\n-    macro_calls: Arena<MacroCall>,\n-    exprs: Arena<Expr>,\n-\n-    vis: ItemVisibilities,\n-    generics: GenericParamsStorage,\n-}\n-\n-#[derive(Debug, Eq, PartialEq, Hash)]\n-enum AttrOwner {\n-    /// Attributes on an item.\n-    ModItem(ModItem),\n-    /// Inner attributes of the source file.\n-    TopLevel,\n-    // FIXME: Store variant and field attrs, and stop reparsing them in `attrs_query`.\n-}\n-\n /// The item tree of a source file.\n #[derive(Debug, Eq, PartialEq)]\n pub struct ItemTree {\n@@ -290,6 +215,81 @@ impl ItemTree {\n     }\n }\n \n+#[derive(Default, Debug, Eq, PartialEq)]\n+struct ItemVisibilities {\n+    arena: Arena<RawVisibility>,\n+}\n+\n+impl ItemVisibilities {\n+    fn alloc(&mut self, vis: RawVisibility) -> RawVisibilityId {\n+        match &vis {\n+            RawVisibility::Public => RawVisibilityId::PUB,\n+            RawVisibility::Module(path) if path.segments.is_empty() => match &path.kind {\n+                PathKind::Super(0) => RawVisibilityId::PRIV,\n+                PathKind::Crate => RawVisibilityId::PUB_CRATE,\n+                _ => RawVisibilityId(self.arena.alloc(vis).into_raw().into()),\n+            },\n+            _ => RawVisibilityId(self.arena.alloc(vis).into_raw().into()),\n+        }\n+    }\n+}\n+\n+static VIS_PUB: RawVisibility = RawVisibility::Public;\n+static VIS_PRIV: RawVisibility =\n+    RawVisibility::Module(ModPath { kind: PathKind::Super(0), segments: Vec::new() });\n+static VIS_PUB_CRATE: RawVisibility =\n+    RawVisibility::Module(ModPath { kind: PathKind::Crate, segments: Vec::new() });\n+\n+#[derive(Default, Debug, Eq, PartialEq)]\n+struct GenericParamsStorage {\n+    arena: Arena<GenericParams>,\n+}\n+\n+impl GenericParamsStorage {\n+    fn alloc(&mut self, params: GenericParams) -> GenericParamsId {\n+        if params.types.is_empty() && params.where_predicates.is_empty() {\n+            return GenericParamsId::EMPTY;\n+        }\n+\n+        GenericParamsId(self.arena.alloc(params).into_raw().into())\n+    }\n+}\n+\n+static EMPTY_GENERICS: GenericParams =\n+    GenericParams { types: Arena::new(), where_predicates: Vec::new() };\n+\n+#[derive(Default, Debug, Eq, PartialEq)]\n+struct ItemTreeData {\n+    imports: Arena<Import>,\n+    extern_crates: Arena<ExternCrate>,\n+    functions: Arena<Function>,\n+    structs: Arena<Struct>,\n+    fields: Arena<Field>,\n+    unions: Arena<Union>,\n+    enums: Arena<Enum>,\n+    variants: Arena<Variant>,\n+    consts: Arena<Const>,\n+    statics: Arena<Static>,\n+    traits: Arena<Trait>,\n+    impls: Arena<Impl>,\n+    type_aliases: Arena<TypeAlias>,\n+    mods: Arena<Mod>,\n+    macro_calls: Arena<MacroCall>,\n+    exprs: Arena<Expr>,\n+\n+    vis: ItemVisibilities,\n+    generics: GenericParamsStorage,\n+}\n+\n+#[derive(Debug, Eq, PartialEq, Hash)]\n+enum AttrOwner {\n+    /// Attributes on an item.\n+    ModItem(ModItem),\n+    /// Inner attributes of the source file.\n+    TopLevel,\n+    // FIXME: Store variant and field attrs, and stop reparsing them in `attrs_query`.\n+}\n+\n /// Trait implemented by all nodes in the item tree.\n pub trait ItemTreeNode: Clone {\n     type Source: AstNode + Into<ast::ModuleItem>;"}]}