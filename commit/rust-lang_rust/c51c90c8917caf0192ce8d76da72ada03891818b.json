{"sha": "c51c90c8917caf0192ce8d76da72ada03891818b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1MWM5MGM4OTE3Y2FmMDE5MmNlOGQ3NmRhNzJhZGEwMzg5MTgxOGI=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2019-03-08T08:42:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-03-08T08:42:12Z"}, "message": "Rollup merge of #58970 - pnkfelix:issue-58158-size-of-assoc-type-ice, r=petrochenkov\n\ndelay_span_bug in wfcheck's ty.lift_to_tcx unwrap\n\nFix #58158", "tree": {"sha": "28c0d01c8bc2b2bfe798e314561fb340a0c60221", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28c0d01c8bc2b2bfe798e314561fb340a0c60221"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c51c90c8917caf0192ce8d76da72ada03891818b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcgirkCRBK7hj4Ov3rIwAAdHIIADmWgx6WN1aEBWVz7VXkM3gE\ncZWGm+msfXPgMxJugYObSYa314DgGt5bi7B85BrRWlSNrTzFrf1QhDaZ9a8WLAcV\n2Nf2uRK5bRSlb3QWrbVHjEDBSUuFKskZMu9OP1CVdJO8AzR+qz02b9Y8RJOWf5lr\nsW3KXkWAsIbIRPkm04Knfu4nAvXMlVQiwyJyy+M5NLDcR+cOzT8ZNQIEyvJjVUae\nzwH4vZXi0u3jZ+aJaAQaLysbax6+6skmlNZ4xRajiqLluoqR4CpOuPohevz1xHVG\nJlHOJuy/4WRgEMc14PyqYWe9l4e6rnMKJ0uMgedWS10HqE3zS8pq3XnOj/r0ZaA=\n=9Vp8\n-----END PGP SIGNATURE-----\n", "payload": "tree 28c0d01c8bc2b2bfe798e314561fb340a0c60221\nparent 378a0118f36f99425773bbd3b6dd9db571616f5c\nparent 533f011d46c7759b04976339ab98cfb3cf7bb058\nauthor Pietro Albini <pietro@pietroalbini.org> 1552034532 +0100\ncommitter GitHub <noreply@github.com> 1552034532 +0100\n\nRollup merge of #58970 - pnkfelix:issue-58158-size-of-assoc-type-ice, r=petrochenkov\n\ndelay_span_bug in wfcheck's ty.lift_to_tcx unwrap\n\nFix #58158\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c51c90c8917caf0192ce8d76da72ada03891818b", "html_url": "https://github.com/rust-lang/rust/commit/c51c90c8917caf0192ce8d76da72ada03891818b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c51c90c8917caf0192ce8d76da72ada03891818b/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "378a0118f36f99425773bbd3b6dd9db571616f5c", "url": "https://api.github.com/repos/rust-lang/rust/commits/378a0118f36f99425773bbd3b6dd9db571616f5c", "html_url": "https://github.com/rust-lang/rust/commit/378a0118f36f99425773bbd3b6dd9db571616f5c"}, {"sha": "533f011d46c7759b04976339ab98cfb3cf7bb058", "url": "https://api.github.com/repos/rust-lang/rust/commits/533f011d46c7759b04976339ab98cfb3cf7bb058", "html_url": "https://github.com/rust-lang/rust/commit/533f011d46c7759b04976339ab98cfb3cf7bb058"}], "stats": {"total": 51, "additions": 47, "deletions": 4}, "files": [{"sha": "339a117cd64a7303bf0e3c6779ee1196c64da07c", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c51c90c8917caf0192ce8d76da72ada03891818b/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c51c90c8917caf0192ce8d76da72ada03891818b/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=c51c90c8917caf0192ce8d76da72ada03891818b", "patch": "@@ -251,11 +251,14 @@ fn check_type_defn<'a, 'tcx, F>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             let needs_drop_copy = || {\n                 packed && {\n                     let ty = variant.fields.last().unwrap().ty;\n-                    let ty = fcx.tcx.erase_regions(&ty).lift_to_tcx(fcx_tcx)\n+                    fcx.tcx.erase_regions(&ty).lift_to_tcx(fcx_tcx)\n+                        .map(|ty| ty.needs_drop(fcx_tcx, fcx_tcx.param_env(def_id)))\n                         .unwrap_or_else(|| {\n-                            span_bug!(item.span, \"inference variables in {:?}\", ty)\n-                        });\n-                    ty.needs_drop(fcx_tcx, fcx_tcx.param_env(def_id))\n+                            fcx_tcx.sess.delay_span_bug(\n+                                item.span, &format!(\"inference variables in {:?}\", ty));\n+                            // Just treat unresolved type expression as if it needs drop.\n+                            true\n+                        })\n                 }\n             };\n             let all_sized ="}, {"sha": "d0167c8c268cf21502acf627c8df3f15da421f40", "filename": "src/test/ui/wf/wf-packed-on-proj-of-type-as-unimpl-trait.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/c51c90c8917caf0192ce8d76da72ada03891818b/src%2Ftest%2Fui%2Fwf%2Fwf-packed-on-proj-of-type-as-unimpl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c51c90c8917caf0192ce8d76da72ada03891818b/src%2Ftest%2Fui%2Fwf%2Fwf-packed-on-proj-of-type-as-unimpl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-packed-on-proj-of-type-as-unimpl-trait.rs?ref=c51c90c8917caf0192ce8d76da72ada03891818b", "patch": "@@ -0,0 +1,31 @@\n+// rust-lang/rust#58158: We have special-case code to deal with case\n+// when a type is both packed and needs drop glue, (we move the fields\n+// out of their potentially unaligned locations before dropping them,\n+// which requires they be Sized; see PR #44884).\n+//\n+// So, we need to check if a given type needs drop-glue. That requires\n+// that we actually know that the concrete type, and we guard against\n+// the type having unknown parts (i.e. type variables) by ICE'ing in\n+// that scenario.\n+//\n+// But in a case where we have a projection (`Type as Trait::Assoc`)\n+// where `Type` does not actually implement `Trait`, we of course\n+// cannot have a concrete type, because there is no impl to look up\n+// the concrete type for the associated type `Assoc`.\n+//\n+// So, this test is just making sure that in such a case that we do\n+// not immediately ICE, and instead allow the underlying type error to\n+// surface.\n+\n+pub struct Matrix<S>(S);\n+pub struct DefaultAllocator;\n+\n+pub trait Allocator { type Buffer; }\n+\n+// impl Allocator for DefaultAllocator { type Buffer = (); }\n+\n+#[repr(packed)]\n+struct Foo(Matrix<<DefaultAllocator as Allocator>::Buffer>);\n+//~^ ERROR the trait bound `DefaultAllocator: Allocator` is not satisfied\n+\n+fn main() { }"}, {"sha": "e460cdcd3f3e5be1e222ad60fde5835f8e22a195", "filename": "src/test/ui/wf/wf-packed-on-proj-of-type-as-unimpl-trait.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c51c90c8917caf0192ce8d76da72ada03891818b/src%2Ftest%2Fui%2Fwf%2Fwf-packed-on-proj-of-type-as-unimpl-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c51c90c8917caf0192ce8d76da72ada03891818b/src%2Ftest%2Fui%2Fwf%2Fwf-packed-on-proj-of-type-as-unimpl-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-packed-on-proj-of-type-as-unimpl-trait.stderr?ref=c51c90c8917caf0192ce8d76da72ada03891818b", "patch": "@@ -0,0 +1,9 @@\n+error[E0277]: the trait bound `DefaultAllocator: Allocator` is not satisfied\n+  --> $DIR/wf-packed-on-proj-of-type-as-unimpl-trait.rs:28:12\n+   |\n+LL | struct Foo(Matrix<<DefaultAllocator as Allocator>::Buffer>);\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Allocator` is not implemented for `DefaultAllocator`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}]}