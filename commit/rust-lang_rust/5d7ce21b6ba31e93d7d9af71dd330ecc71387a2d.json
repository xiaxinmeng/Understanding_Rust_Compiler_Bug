{"sha": "5d7ce21b6ba31e93d7d9af71dd330ecc71387a2d", "node_id": "C_kwDOAAsO6NoAKDVkN2NlMjFiNmJhMzFlOTNkN2Q5YWY3MWRkMzMwZWNjNzEzODdhMmQ", "commit": {"author": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2022-07-29T16:52:38Z"}, "committer": {"name": "nils", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2022-08-22T13:19:40Z"}, "message": "bless mir-opt tests", "tree": {"sha": "fec64bd2e1228a8d1ae0573f2110cc8905e4378d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fec64bd2e1228a8d1ae0573f2110cc8905e4378d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d7ce21b6ba31e93d7d9af71dd330ecc71387a2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d7ce21b6ba31e93d7d9af71dd330ecc71387a2d", "html_url": "https://github.com/rust-lang/rust/commit/5d7ce21b6ba31e93d7d9af71dd330ecc71387a2d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d7ce21b6ba31e93d7d9af71dd330ecc71387a2d/comments", "author": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3ee0eaa3f26a13088ed7323ebe729f1f25963df", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3ee0eaa3f26a13088ed7323ebe729f1f25963df", "html_url": "https://github.com/rust-lang/rust/commit/d3ee0eaa3f26a13088ed7323ebe729f1f25963df"}], "stats": {"total": 768, "additions": 384, "deletions": 384}, "files": [{"sha": "bde2f04fac9f057564f1fc73822bfd21f8f9dca0", "filename": "src/test/mir-opt/combine_clone_of_primitives.{impl#0}-clone.InstCombine.diff", "status": "modified", "additions": 37, "deletions": 37, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/5d7ce21b6ba31e93d7d9af71dd330ecc71387a2d/src%2Ftest%2Fmir-opt%2Fcombine_clone_of_primitives.%7Bimpl%230%7D-clone.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5d7ce21b6ba31e93d7d9af71dd330ecc71387a2d/src%2Ftest%2Fmir-opt%2Fcombine_clone_of_primitives.%7Bimpl%230%7D-clone.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fcombine_clone_of_primitives.%7Bimpl%230%7D-clone.InstCombine.diff?ref=5d7ce21b6ba31e93d7d9af71dd330ecc71387a2d", "patch": "@@ -4,63 +4,63 @@\n   fn <impl at $DIR/combine_clone_of_primitives.rs:6:10: 6:15>::clone(_1: &MyThing<T>) -> MyThing<T> {\n       debug self => _1;                    // in scope 0 at $DIR/combine_clone_of_primitives.rs:+0:10: +0:15\n       let mut _0: MyThing<T>;              // return place in scope 0 at $DIR/combine_clone_of_primitives.rs:+0:10: +0:15\n-      let mut _2: T;                       // in scope 0 at $DIR/combine_clone_of_primitives.rs:+2:5: +2:9\n-      let mut _3: &T;                      // in scope 0 at $DIR/combine_clone_of_primitives.rs:+2:5: +2:9\n-      let _4: &T;                          // in scope 0 at $DIR/combine_clone_of_primitives.rs:+2:5: +2:9\n-      let mut _5: u64;                     // in scope 0 at $DIR/combine_clone_of_primitives.rs:+3:5: +3:11\n-      let mut _6: &u64;                    // in scope 0 at $DIR/combine_clone_of_primitives.rs:+3:5: +3:11\n-      let _7: &u64;                        // in scope 0 at $DIR/combine_clone_of_primitives.rs:+3:5: +3:11\n-      let mut _8: [f32; 3];                // in scope 0 at $DIR/combine_clone_of_primitives.rs:+4:5: +4:16\n-      let mut _9: &[f32; 3];               // in scope 0 at $DIR/combine_clone_of_primitives.rs:+4:5: +4:16\n-      let _10: &[f32; 3];                  // in scope 0 at $DIR/combine_clone_of_primitives.rs:+4:5: +4:16\n+      let mut _2: T;                       // in scope 0 at $DIR/combine_clone_of_primitives.rs:8:5: 8:9\n+      let mut _3: &T;                      // in scope 0 at $DIR/combine_clone_of_primitives.rs:8:5: 8:9\n+      let _4: &T;                          // in scope 0 at $DIR/combine_clone_of_primitives.rs:8:5: 8:9\n+      let mut _5: u64;                     // in scope 0 at $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n+      let mut _6: &u64;                    // in scope 0 at $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n+      let _7: &u64;                        // in scope 0 at $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n+      let mut _8: [f32; 3];                // in scope 0 at $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n+      let mut _9: &[f32; 3];               // in scope 0 at $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n+      let _10: &[f32; 3];                  // in scope 0 at $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:+2:5: +2:9\n-          StorageLive(_3);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:+2:5: +2:9\n-          StorageLive(_4);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:+2:5: +2:9\n-          _4 = &((*_1).0: T);              // scope 0 at $DIR/combine_clone_of_primitives.rs:+2:5: +2:9\n--         _3 = &(*_4);                     // scope 0 at $DIR/combine_clone_of_primitives.rs:+2:5: +2:9\n-+         _3 = _4;                         // scope 0 at $DIR/combine_clone_of_primitives.rs:+2:5: +2:9\n-          _2 = <T as Clone>::clone(move _3) -> bb1; // scope 0 at $DIR/combine_clone_of_primitives.rs:+2:5: +2:9\n+          StorageLive(_2);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:8:5: 8:9\n+          StorageLive(_3);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:8:5: 8:9\n+          StorageLive(_4);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:8:5: 8:9\n+          _4 = &((*_1).0: T);              // scope 0 at $DIR/combine_clone_of_primitives.rs:8:5: 8:9\n+-         _3 = &(*_4);                     // scope 0 at $DIR/combine_clone_of_primitives.rs:8:5: 8:9\n++         _3 = _4;                         // scope 0 at $DIR/combine_clone_of_primitives.rs:8:5: 8:9\n+          _2 = <T as Clone>::clone(move _3) -> bb1; // scope 0 at $DIR/combine_clone_of_primitives.rs:8:5: 8:9\n                                            // mir::Constant\n                                            // + span: $DIR/combine_clone_of_primitives.rs:8:5: 8:9\n                                            // + literal: Const { ty: for<'r> fn(&'r T) -> T {<T as Clone>::clone}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n-          StorageDead(_3);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:+2:8: +2:9\n-          StorageLive(_5);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:+3:5: +3:11\n-          StorageLive(_6);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:+3:5: +3:11\n-          StorageLive(_7);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:+3:5: +3:11\n-          _7 = &((*_1).1: u64);            // scope 0 at $DIR/combine_clone_of_primitives.rs:+3:5: +3:11\n--         _6 = &(*_7);                     // scope 0 at $DIR/combine_clone_of_primitives.rs:+3:5: +3:11\n--         _5 = <u64 as Clone>::clone(move _6) -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/combine_clone_of_primitives.rs:+3:5: +3:11\n+          StorageDead(_3);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:8:8: 8:9\n+          StorageLive(_5);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n+          StorageLive(_6);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n+          StorageLive(_7);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n+          _7 = &((*_1).1: u64);            // scope 0 at $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n+-         _6 = &(*_7);                     // scope 0 at $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n+-         _5 = <u64 as Clone>::clone(move _6) -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n -                                          // mir::Constant\n -                                          // + span: $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n -                                          // + literal: Const { ty: for<'r> fn(&'r u64) -> u64 {<u64 as Clone>::clone}, val: Value(<ZST>) }\n-+         _6 = _7;                         // scope 0 at $DIR/combine_clone_of_primitives.rs:+3:5: +3:11\n-+         _5 = (*_6);                      // scope 0 at $DIR/combine_clone_of_primitives.rs:+3:5: +3:11\n-+         goto -> bb2;                     // scope 0 at $DIR/combine_clone_of_primitives.rs:+3:5: +3:11\n++         _6 = _7;                         // scope 0 at $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n++         _5 = (*_6);                      // scope 0 at $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n++         goto -> bb2;                     // scope 0 at $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n       }\n   \n       bb2: {\n-          StorageDead(_6);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:+3:10: +3:11\n-          StorageLive(_8);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:+4:5: +4:16\n-          StorageLive(_9);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:+4:5: +4:16\n-          StorageLive(_10);                // scope 0 at $DIR/combine_clone_of_primitives.rs:+4:5: +4:16\n-          _10 = &((*_1).2: [f32; 3]);      // scope 0 at $DIR/combine_clone_of_primitives.rs:+4:5: +4:16\n--         _9 = &(*_10);                    // scope 0 at $DIR/combine_clone_of_primitives.rs:+4:5: +4:16\n--         _8 = <[f32; 3] as Clone>::clone(move _9) -> [return: bb3, unwind: bb4]; // scope 0 at $DIR/combine_clone_of_primitives.rs:+4:5: +4:16\n+          StorageDead(_6);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:9:10: 9:11\n+          StorageLive(_8);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n+          StorageLive(_9);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n+          StorageLive(_10);                // scope 0 at $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n+          _10 = &((*_1).2: [f32; 3]);      // scope 0 at $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n+-         _9 = &(*_10);                    // scope 0 at $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n+-         _8 = <[f32; 3] as Clone>::clone(move _9) -> [return: bb3, unwind: bb4]; // scope 0 at $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n -                                          // mir::Constant\n -                                          // + span: $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n -                                          // + literal: Const { ty: for<'r> fn(&'r [f32; 3]) -> [f32; 3] {<[f32; 3] as Clone>::clone}, val: Value(<ZST>) }\n-+         _9 = _10;                        // scope 0 at $DIR/combine_clone_of_primitives.rs:+4:5: +4:16\n-+         _8 = (*_9);                      // scope 0 at $DIR/combine_clone_of_primitives.rs:+4:5: +4:16\n-+         goto -> bb3;                     // scope 0 at $DIR/combine_clone_of_primitives.rs:+4:5: +4:16\n++         _9 = _10;                        // scope 0 at $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n++         _8 = (*_9);                      // scope 0 at $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n++         goto -> bb3;                     // scope 0 at $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n       }\n   \n       bb3: {\n-          StorageDead(_9);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:+4:15: +4:16\n+          StorageDead(_9);                 // scope 0 at $DIR/combine_clone_of_primitives.rs:10:15: 10:16\n           Deinit(_0);                      // scope 0 at $DIR/combine_clone_of_primitives.rs:+0:10: +0:15\n           (_0.0: T) = move _2;             // scope 0 at $DIR/combine_clone_of_primitives.rs:+0:10: +0:15\n           (_0.1: u64) = move _5;           // scope 0 at $DIR/combine_clone_of_primitives.rs:+0:10: +0:15"}, {"sha": "b5439d9d23934aab7f3529c1450fc9cdefd445a4", "filename": "src/test/mir-opt/const_promotion_extern_static.BAR.PromoteTemps.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5d7ce21b6ba31e93d7d9af71dd330ecc71387a2d/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BAR.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5d7ce21b6ba31e93d7d9af71dd330ecc71387a2d/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BAR.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BAR.PromoteTemps.diff?ref=5d7ce21b6ba31e93d7d9af71dd330ecc71387a2d", "patch": "@@ -40,11 +40,11 @@\n -         StorageDead(_5);                 // scope 0 at $DIR/const-promotion-extern-static.rs:+0:43: +0:44\n -         StorageDead(_3);                 // scope 0 at $DIR/const-promotion-extern-static.rs:+0:43: +0:44\n           StorageDead(_1);                 // scope 0 at $DIR/const-promotion-extern-static.rs:+0:43: +0:44\n-          return;                          // scope 0 at $DIR/const-promotion-extern-static.rs:+0:1: +0:28\n+          return;                          // scope 0 at $DIR/const-promotion-extern-static.rs:+0:1: +0:44\n       }\n   \n       bb2 (cleanup): {\n-          resume;                          // scope 0 at $DIR/const-promotion-extern-static.rs:+0:1: +0:28\n+          resume;                          // scope 0 at $DIR/const-promotion-extern-static.rs:+0:1: +0:44\n       }\n - }\n - "}, {"sha": "20d73afda271e0ee6ad396a4721367c7e9f71bec", "filename": "src/test/mir-opt/const_promotion_extern_static.BOP.mir_map.0.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d7ce21b6ba31e93d7d9af71dd330ecc71387a2d/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BOP.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/5d7ce21b6ba31e93d7d9af71dd330ecc71387a2d/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BOP.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BOP.mir_map.0.mir?ref=5d7ce21b6ba31e93d7d9af71dd330ecc71387a2d", "patch": "@@ -12,6 +12,6 @@ static BOP: &i32 = {\n         _1 = &_2;                        // scope 0 at $DIR/const-promotion-extern-static.rs:+0:20: +0:23\n         _0 = &(*_1);                     // scope 0 at $DIR/const-promotion-extern-static.rs:+0:20: +0:23\n         StorageDead(_1);                 // scope 0 at $DIR/const-promotion-extern-static.rs:+0:22: +0:23\n-        return;                          // scope 0 at $DIR/const-promotion-extern-static.rs:+0:1: +0:17\n+        return;                          // scope 0 at $DIR/const-promotion-extern-static.rs:+0:1: +0:23\n     }\n }"}, {"sha": "4df4c9636a543805b0ab1c18f55fb9eaa43b5a51", "filename": "src/test/mir-opt/const_promotion_extern_static.FOO.PromoteTemps.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5d7ce21b6ba31e93d7d9af71dd330ecc71387a2d/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5d7ce21b6ba31e93d7d9af71dd330ecc71387a2d/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO.PromoteTemps.diff?ref=5d7ce21b6ba31e93d7d9af71dd330ecc71387a2d", "patch": "@@ -42,11 +42,11 @@\n -         StorageDead(_5);                 // scope 0 at $DIR/const-promotion-extern-static.rs:+0:54: +0:55\n -         StorageDead(_3);                 // scope 0 at $DIR/const-promotion-extern-static.rs:+0:54: +0:55\n           StorageDead(_1);                 // scope 0 at $DIR/const-promotion-extern-static.rs:+0:54: +0:55\n-          return;                          // scope 0 at $DIR/const-promotion-extern-static.rs:+0:1: +0:28\n+          return;                          // scope 0 at $DIR/const-promotion-extern-static.rs:+0:1: +0:55\n       }\n   \n       bb2 (cleanup): {\n-          resume;                          // scope 0 at $DIR/const-promotion-extern-static.rs:+0:1: +0:28\n+          resume;                          // scope 0 at $DIR/const-promotion-extern-static.rs:+0:1: +0:55\n       }\n   }\n - "}, {"sha": "0d10f9b5ffb4da68eba657c4d8f70a49f23caa79", "filename": "src/test/mir-opt/generator_drop_cleanup.main-{closure#0}.generator_drop.0.mir", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/5d7ce21b6ba31e93d7d9af71dd330ecc71387a2d/src%2Ftest%2Fmir-opt%2Fgenerator_drop_cleanup.main-%7Bclosure%230%7D.generator_drop.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/5d7ce21b6ba31e93d7d9af71dd330ecc71387a2d/src%2Ftest%2Fmir-opt%2Fgenerator_drop_cleanup.main-%7Bclosure%230%7D.generator_drop.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgenerator_drop_cleanup.main-%7Bclosure%230%7D.generator_drop.0.mir?ref=5d7ce21b6ba31e93d7d9af71dd330ecc71387a2d", "patch": "@@ -17,14 +17,14 @@\n fn main::{closure#0}(_1: *mut [generator@$DIR/generator-drop-cleanup.rs:10:15: 10:17]) -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/generator-drop-cleanup.rs:+0:15: +0:17\n     let mut _2: ();                      // in scope 0 at $DIR/generator-drop-cleanup.rs:+0:15: +0:17\n-    let _3: std::string::String;         // in scope 0 at $DIR/generator-drop-cleanup.rs:+1:13: +1:15\n-    let _4: ();                          // in scope 0 at $DIR/generator-drop-cleanup.rs:+2:9: +2:14\n-    let mut _5: ();                      // in scope 0 at $DIR/generator-drop-cleanup.rs:+2:9: +2:14\n-    let mut _6: ();                      // in scope 0 at $DIR/generator-drop-cleanup.rs:+0:18: +0:18\n+    let _3: std::string::String;         // in scope 0 at $DIR/generator-drop-cleanup.rs:11:13: 11:15\n+    let _4: ();                          // in scope 0 at $DIR/generator-drop-cleanup.rs:12:9: 12:14\n+    let mut _5: ();                      // in scope 0 at $DIR/generator-drop-cleanup.rs:12:9: 12:14\n+    let mut _6: ();                      // in scope 0 at $DIR/generator-drop-cleanup.rs:10:18: 10:18\n     let mut _7: ();                      // in scope 0 at $DIR/generator-drop-cleanup.rs:+0:15: +0:17\n     let mut _8: u32;                     // in scope 0 at $DIR/generator-drop-cleanup.rs:+0:15: +0:17\n     scope 1 {\n-        debug _s => (((*_1) as variant#3).0: std::string::String); // in scope 1 at $DIR/generator-drop-cleanup.rs:+1:13: +1:15\n+        debug _s => (((*_1) as variant#3).0: std::string::String); // in scope 1 at $DIR/generator-drop-cleanup.rs:11:13: 11:15\n     }\n \n     bb0: {\n@@ -33,14 +33,14 @@ fn main::{closure#0}(_1: *mut [generator@$DIR/generator-drop-cleanup.rs:10:15: 1\n     }\n \n     bb1: {\n-        StorageDead(_5);                 // scope 1 at $DIR/generator-drop-cleanup.rs:+2:13: +2:14\n-        StorageDead(_4);                 // scope 1 at $DIR/generator-drop-cleanup.rs:+2:14: +2:15\n-        drop((((*_1) as variant#3).0: std::string::String)) -> [return: bb2, unwind: bb5]; // scope 0 at $DIR/generator-drop-cleanup.rs:+3:5: +3:6\n+        StorageDead(_5);                 // scope 1 at $DIR/generator-drop-cleanup.rs:12:13: 12:14\n+        StorageDead(_4);                 // scope 1 at $DIR/generator-drop-cleanup.rs:12:14: 12:15\n+        drop((((*_1) as variant#3).0: std::string::String)) -> [return: bb2, unwind: bb5]; // scope 0 at $DIR/generator-drop-cleanup.rs:13:5: 13:6\n     }\n \n     bb2: {\n-        nop;                             // scope 0 at $DIR/generator-drop-cleanup.rs:+3:5: +3:6\n-        goto -> bb8;                     // scope 0 at $DIR/generator-drop-cleanup.rs:+3:5: +3:6\n+        nop;                             // scope 0 at $DIR/generator-drop-cleanup.rs:13:5: 13:6\n+        goto -> bb8;                     // scope 0 at $DIR/generator-drop-cleanup.rs:13:5: 13:6\n     }\n \n     bb3: {\n@@ -52,8 +52,8 @@ fn main::{closure#0}(_1: *mut [generator@$DIR/generator-drop-cleanup.rs:10:15: 1\n     }\n \n     bb5 (cleanup): {\n-        nop;                             // scope 0 at $DIR/generator-drop-cleanup.rs:+3:5: +3:6\n-        goto -> bb4;                     // scope 0 at $DIR/generator-drop-cleanup.rs:+3:5: +3:6\n+        nop;                             // scope 0 at $DIR/generator-drop-cleanup.rs:13:5: 13:6\n+        goto -> bb4;                     // scope 0 at $DIR/generator-drop-cleanup.rs:13:5: 13:6\n     }\n \n     bb6: {\n@@ -65,7 +65,7 @@ fn main::{closure#0}(_1: *mut [generator@$DIR/generator-drop-cleanup.rs:10:15: 1\n     }\n \n     bb8: {\n-        goto -> bb3;                     // scope 0 at $DIR/generator-drop-cleanup.rs:+3:5: +3:6\n+        goto -> bb3;                     // scope 0 at $DIR/generator-drop-cleanup.rs:13:5: 13:6\n     }\n \n     bb9: {"}, {"sha": "5f677eafeb7f29e19a6b9c272ae8d030788df503", "filename": "src/test/mir-opt/generator_storage_dead_unwind.main-{closure#0}.StateTransform.before.mir", "status": "modified", "additions": 54, "deletions": 54, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/5d7ce21b6ba31e93d7d9af71dd330ecc71387a2d/src%2Ftest%2Fmir-opt%2Fgenerator_storage_dead_unwind.main-%7Bclosure%230%7D.StateTransform.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/5d7ce21b6ba31e93d7d9af71dd330ecc71387a2d/src%2Ftest%2Fmir-opt%2Fgenerator_storage_dead_unwind.main-%7Bclosure%230%7D.StateTransform.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgenerator_storage_dead_unwind.main-%7Bclosure%230%7D.StateTransform.before.mir?ref=5d7ce21b6ba31e93d7d9af71dd330ecc71387a2d", "patch": "@@ -3,112 +3,112 @@\n fn main::{closure#0}(_1: [generator@$DIR/generator-storage-dead-unwind.rs:22:16: 22:18], _2: ()) -> ()\n yields ()\n  {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/generator-storage-dead-unwind.rs:+0:19: +0:19\n-    let _3: Foo;                         // in scope 0 at $DIR/generator-storage-dead-unwind.rs:+1:13: +1:14\n-    let _5: ();                          // in scope 0 at $DIR/generator-storage-dead-unwind.rs:+3:9: +3:14\n-    let mut _6: ();                      // in scope 0 at $DIR/generator-storage-dead-unwind.rs:+3:9: +3:14\n-    let _7: ();                          // in scope 0 at $DIR/generator-storage-dead-unwind.rs:+4:9: +4:16\n-    let mut _8: Foo;                     // in scope 0 at $DIR/generator-storage-dead-unwind.rs:+4:14: +4:15\n-    let _9: ();                          // in scope 0 at $DIR/generator-storage-dead-unwind.rs:+5:9: +5:16\n-    let mut _10: Bar;                    // in scope 0 at $DIR/generator-storage-dead-unwind.rs:+5:14: +5:15\n+    let mut _0: ();                      // return place in scope 0 at $DIR/generator-storage-dead-unwind.rs:22:19: 22:19\n+    let _3: Foo;                         // in scope 0 at $DIR/generator-storage-dead-unwind.rs:23:13: 23:14\n+    let _5: ();                          // in scope 0 at $DIR/generator-storage-dead-unwind.rs:25:9: 25:14\n+    let mut _6: ();                      // in scope 0 at $DIR/generator-storage-dead-unwind.rs:25:9: 25:14\n+    let _7: ();                          // in scope 0 at $DIR/generator-storage-dead-unwind.rs:26:9: 26:16\n+    let mut _8: Foo;                     // in scope 0 at $DIR/generator-storage-dead-unwind.rs:26:14: 26:15\n+    let _9: ();                          // in scope 0 at $DIR/generator-storage-dead-unwind.rs:27:9: 27:16\n+    let mut _10: Bar;                    // in scope 0 at $DIR/generator-storage-dead-unwind.rs:27:14: 27:15\n     scope 1 {\n-        debug a => _3;                   // in scope 1 at $DIR/generator-storage-dead-unwind.rs:+1:13: +1:14\n-        let _4: Bar;                     // in scope 1 at $DIR/generator-storage-dead-unwind.rs:+2:13: +2:14\n+        debug a => _3;                   // in scope 1 at $DIR/generator-storage-dead-unwind.rs:23:13: 23:14\n+        let _4: Bar;                     // in scope 1 at $DIR/generator-storage-dead-unwind.rs:24:13: 24:14\n         scope 2 {\n-            debug b => _4;               // in scope 2 at $DIR/generator-storage-dead-unwind.rs:+2:13: +2:14\n+            debug b => _4;               // in scope 2 at $DIR/generator-storage-dead-unwind.rs:24:13: 24:14\n         }\n     }\n \n     bb0: {\n-        StorageLive(_3);                 // scope 0 at $DIR/generator-storage-dead-unwind.rs:+1:13: +1:14\n-        Deinit(_3);                      // scope 0 at $DIR/generator-storage-dead-unwind.rs:+1:17: +1:23\n-        (_3.0: i32) = const 5_i32;       // scope 0 at $DIR/generator-storage-dead-unwind.rs:+1:17: +1:23\n-        StorageLive(_4);                 // scope 1 at $DIR/generator-storage-dead-unwind.rs:+2:13: +2:14\n-        Deinit(_4);                      // scope 1 at $DIR/generator-storage-dead-unwind.rs:+2:17: +2:23\n-        (_4.0: i32) = const 6_i32;       // scope 1 at $DIR/generator-storage-dead-unwind.rs:+2:17: +2:23\n-        StorageLive(_5);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:+3:9: +3:14\n-        StorageLive(_6);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:+3:9: +3:14\n-        Deinit(_6);                      // scope 2 at $DIR/generator-storage-dead-unwind.rs:+3:9: +3:14\n-        _5 = yield(move _6) -> [resume: bb1, drop: bb5]; // scope 2 at $DIR/generator-storage-dead-unwind.rs:+3:9: +3:14\n+        StorageLive(_3);                 // scope 0 at $DIR/generator-storage-dead-unwind.rs:23:13: 23:14\n+        Deinit(_3);                      // scope 0 at $DIR/generator-storage-dead-unwind.rs:23:17: 23:23\n+        (_3.0: i32) = const 5_i32;       // scope 0 at $DIR/generator-storage-dead-unwind.rs:23:17: 23:23\n+        StorageLive(_4);                 // scope 1 at $DIR/generator-storage-dead-unwind.rs:24:13: 24:14\n+        Deinit(_4);                      // scope 1 at $DIR/generator-storage-dead-unwind.rs:24:17: 24:23\n+        (_4.0: i32) = const 6_i32;       // scope 1 at $DIR/generator-storage-dead-unwind.rs:24:17: 24:23\n+        StorageLive(_5);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:25:9: 25:14\n+        StorageLive(_6);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:25:9: 25:14\n+        Deinit(_6);                      // scope 2 at $DIR/generator-storage-dead-unwind.rs:25:9: 25:14\n+        _5 = yield(move _6) -> [resume: bb1, drop: bb5]; // scope 2 at $DIR/generator-storage-dead-unwind.rs:25:9: 25:14\n     }\n \n     bb1: {\n-        StorageDead(_6);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:+3:13: +3:14\n-        StorageDead(_5);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:+3:14: +3:15\n-        StorageLive(_7);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:+4:9: +4:16\n-        StorageLive(_8);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:+4:14: +4:15\n-        _8 = move _3;                    // scope 2 at $DIR/generator-storage-dead-unwind.rs:+4:14: +4:15\n-        _7 = take::<Foo>(move _8) -> [return: bb2, unwind: bb9]; // scope 2 at $DIR/generator-storage-dead-unwind.rs:+4:9: +4:16\n+        StorageDead(_6);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:25:13: 25:14\n+        StorageDead(_5);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:25:14: 25:15\n+        StorageLive(_7);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:26:9: 26:16\n+        StorageLive(_8);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:26:14: 26:15\n+        _8 = move _3;                    // scope 2 at $DIR/generator-storage-dead-unwind.rs:26:14: 26:15\n+        _7 = take::<Foo>(move _8) -> [return: bb2, unwind: bb9]; // scope 2 at $DIR/generator-storage-dead-unwind.rs:26:9: 26:16\n                                          // mir::Constant\n                                          // + span: $DIR/generator-storage-dead-unwind.rs:26:9: 26:13\n                                          // + literal: Const { ty: fn(Foo) {take::<Foo>}, val: Value(<ZST>) }\n     }\n \n     bb2: {\n-        StorageDead(_8);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:+4:15: +4:16\n-        StorageDead(_7);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:+4:16: +4:17\n-        StorageLive(_9);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:+5:9: +5:16\n-        StorageLive(_10);                // scope 2 at $DIR/generator-storage-dead-unwind.rs:+5:14: +5:15\n-        _10 = move _4;                   // scope 2 at $DIR/generator-storage-dead-unwind.rs:+5:14: +5:15\n-        _9 = take::<Bar>(move _10) -> [return: bb3, unwind: bb8]; // scope 2 at $DIR/generator-storage-dead-unwind.rs:+5:9: +5:16\n+        StorageDead(_8);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:26:15: 26:16\n+        StorageDead(_7);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:26:16: 26:17\n+        StorageLive(_9);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:9: 27:16\n+        StorageLive(_10);                // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:14: 27:15\n+        _10 = move _4;                   // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:14: 27:15\n+        _9 = take::<Bar>(move _10) -> [return: bb3, unwind: bb8]; // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:9: 27:16\n                                          // mir::Constant\n                                          // + span: $DIR/generator-storage-dead-unwind.rs:27:9: 27:13\n                                          // + literal: Const { ty: fn(Bar) {take::<Bar>}, val: Value(<ZST>) }\n     }\n \n     bb3: {\n-        StorageDead(_10);                // scope 2 at $DIR/generator-storage-dead-unwind.rs:+5:15: +5:16\n-        StorageDead(_9);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:+5:16: +5:17\n-        _0 = const ();                   // scope 0 at $DIR/generator-storage-dead-unwind.rs:+0:19: +6:6\n-        StorageDead(_4);                 // scope 1 at $DIR/generator-storage-dead-unwind.rs:+6:5: +6:6\n-        StorageDead(_3);                 // scope 0 at $DIR/generator-storage-dead-unwind.rs:+6:5: +6:6\n-        drop(_1) -> [return: bb4, unwind: bb11]; // scope 0 at $DIR/generator-storage-dead-unwind.rs:+6:5: +6:6\n+        StorageDead(_10);                // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:15: 27:16\n+        StorageDead(_9);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:16: 27:17\n+        _0 = const ();                   // scope 0 at $DIR/generator-storage-dead-unwind.rs:22:19: 28:6\n+        StorageDead(_4);                 // scope 1 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n+        StorageDead(_3);                 // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n+        drop(_1) -> [return: bb4, unwind: bb11]; // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n     }\n \n     bb4: {\n         return;                          // scope 0 at $DIR/generator-storage-dead-unwind.rs:+0:18: +0:18\n     }\n \n     bb5: {\n-        StorageDead(_6);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:+3:13: +3:14\n-        StorageDead(_5);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:+3:14: +3:15\n-        StorageDead(_4);                 // scope 1 at $DIR/generator-storage-dead-unwind.rs:+6:5: +6:6\n-        drop(_3) -> [return: bb6, unwind: bb12]; // scope 0 at $DIR/generator-storage-dead-unwind.rs:+6:5: +6:6\n+        StorageDead(_6);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:25:13: 25:14\n+        StorageDead(_5);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:25:14: 25:15\n+        StorageDead(_4);                 // scope 1 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n+        drop(_3) -> [return: bb6, unwind: bb12]; // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n     }\n \n     bb6: {\n-        StorageDead(_3);                 // scope 0 at $DIR/generator-storage-dead-unwind.rs:+6:5: +6:6\n-        drop(_1) -> [return: bb7, unwind: bb11]; // scope 0 at $DIR/generator-storage-dead-unwind.rs:+6:5: +6:6\n+        StorageDead(_3);                 // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n+        drop(_1) -> [return: bb7, unwind: bb11]; // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n     }\n \n     bb7: {\n         generator_drop;                  // scope 0 at $DIR/generator-storage-dead-unwind.rs:+0:16: +0:18\n     }\n \n     bb8 (cleanup): {\n-        StorageDead(_10);                // scope 2 at $DIR/generator-storage-dead-unwind.rs:+5:15: +5:16\n-        StorageDead(_9);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:+5:16: +5:17\n+        StorageDead(_10);                // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:15: 27:16\n+        StorageDead(_9);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:16: 27:17\n         goto -> bb10;                    // scope 2 at no-location\n     }\n \n     bb9 (cleanup): {\n-        StorageDead(_8);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:+4:15: +4:16\n-        StorageDead(_7);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:+4:16: +4:17\n+        StorageDead(_8);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:26:15: 26:16\n+        StorageDead(_7);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:26:16: 26:17\n         goto -> bb10;                    // scope 2 at no-location\n     }\n \n     bb10 (cleanup): {\n-        StorageDead(_4);                 // scope 1 at $DIR/generator-storage-dead-unwind.rs:+6:5: +6:6\n-        StorageDead(_3);                 // scope 0 at $DIR/generator-storage-dead-unwind.rs:+6:5: +6:6\n-        drop(_1) -> bb11;                // scope 0 at $DIR/generator-storage-dead-unwind.rs:+6:5: +6:6\n+        StorageDead(_4);                 // scope 1 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n+        StorageDead(_3);                 // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n+        drop(_1) -> bb11;                // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n     }\n \n     bb11 (cleanup): {\n         resume;                          // scope 0 at $DIR/generator-storage-dead-unwind.rs:+0:16: +0:18\n     }\n \n     bb12 (cleanup): {\n-        StorageDead(_3);                 // scope 0 at $DIR/generator-storage-dead-unwind.rs:+6:5: +6:6\n-        drop(_1) -> bb11;                // scope 0 at $DIR/generator-storage-dead-unwind.rs:+6:5: +6:6\n+        StorageDead(_3);                 // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n+        drop(_1) -> bb11;                // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n     }\n }"}, {"sha": "1917f757b6f0f4e8976a0ac560853365fd6cfc12", "filename": "src/test/mir-opt/generator_tiny.main-{closure#0}.generator_resume.0.mir", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/5d7ce21b6ba31e93d7d9af71dd330ecc71387a2d/src%2Ftest%2Fmir-opt%2Fgenerator_tiny.main-%7Bclosure%230%7D.generator_resume.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/5d7ce21b6ba31e93d7d9af71dd330ecc71387a2d/src%2Ftest%2Fmir-opt%2Fgenerator_tiny.main-%7Bclosure%230%7D.generator_resume.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgenerator_tiny.main-%7Bclosure%230%7D.generator_resume.0.mir?ref=5d7ce21b6ba31e93d7d9af71dd330ecc71387a2d", "patch": "@@ -17,17 +17,17 @@\n fn main::{closure#0}(_1: Pin<&mut [generator@$DIR/generator-tiny.rs:19:16: 19:24]>, _2: u8) -> GeneratorState<(), ()> {\n     debug _x => _10;                     // in scope 0 at $DIR/generator-tiny.rs:+0:17: +0:19\n     let mut _0: std::ops::GeneratorState<(), ()>; // return place in scope 0 at $DIR/generator-tiny.rs:+0:16: +0:24\n-    let _3: HasDrop;                     // in scope 0 at $DIR/generator-tiny.rs:+1:13: +1:15\n-    let mut _4: !;                       // in scope 0 at $DIR/generator-tiny.rs:+2:9: +5:10\n+    let _3: HasDrop;                     // in scope 0 at $DIR/generator-tiny.rs:20:13: 20:15\n+    let mut _4: !;                       // in scope 0 at $DIR/generator-tiny.rs:21:9: 24:10\n     let mut _5: ();                      // in scope 0 at $DIR/generator-tiny.rs:+0:16: +0:24\n-    let _6: u8;                          // in scope 0 at $DIR/generator-tiny.rs:+3:13: +3:18\n-    let mut _7: ();                      // in scope 0 at $DIR/generator-tiny.rs:+3:13: +3:18\n-    let _8: ();                          // in scope 0 at $DIR/generator-tiny.rs:+4:13: +4:21\n-    let mut _9: ();                      // in scope 0 at $DIR/generator-tiny.rs:+0:25: +0:25\n+    let _6: u8;                          // in scope 0 at $DIR/generator-tiny.rs:22:13: 22:18\n+    let mut _7: ();                      // in scope 0 at $DIR/generator-tiny.rs:22:13: 22:18\n+    let _8: ();                          // in scope 0 at $DIR/generator-tiny.rs:23:13: 23:21\n+    let mut _9: ();                      // in scope 0 at $DIR/generator-tiny.rs:19:25: 19:25\n     let _10: u8;                         // in scope 0 at $DIR/generator-tiny.rs:+0:17: +0:19\n     let mut _11: u32;                    // in scope 0 at $DIR/generator-tiny.rs:+0:16: +0:24\n     scope 1 {\n-        debug _d => (((*(_1.0: &mut [generator@$DIR/generator-tiny.rs:19:16: 19:24])) as variant#3).0: HasDrop); // in scope 1 at $DIR/generator-tiny.rs:+1:13: +1:15\n+        debug _d => (((*(_1.0: &mut [generator@$DIR/generator-tiny.rs:19:16: 19:24])) as variant#3).0: HasDrop); // in scope 1 at $DIR/generator-tiny.rs:20:13: 20:15\n     }\n \n     bb0: {\n@@ -37,37 +37,37 @@ fn main::{closure#0}(_1: Pin<&mut [generator@$DIR/generator-tiny.rs:19:16: 19:24\n \n     bb1: {\n         _10 = move _2;                   // scope 0 at $DIR/generator-tiny.rs:+0:16: +0:24\n-        nop;                             // scope 0 at $DIR/generator-tiny.rs:+1:13: +1:15\n-        Deinit((((*(_1.0: &mut [generator@$DIR/generator-tiny.rs:19:16: 19:24])) as variant#3).0: HasDrop)); // scope 0 at $DIR/generator-tiny.rs:+1:18: +1:25\n-        StorageLive(_4);                 // scope 1 at $DIR/generator-tiny.rs:+2:9: +5:10\n-        goto -> bb2;                     // scope 1 at $DIR/generator-tiny.rs:+2:9: +5:10\n+        nop;                             // scope 0 at $DIR/generator-tiny.rs:20:13: 20:15\n+        Deinit((((*(_1.0: &mut [generator@$DIR/generator-tiny.rs:19:16: 19:24])) as variant#3).0: HasDrop)); // scope 0 at $DIR/generator-tiny.rs:20:18: 20:25\n+        StorageLive(_4);                 // scope 1 at $DIR/generator-tiny.rs:21:9: 24:10\n+        goto -> bb2;                     // scope 1 at $DIR/generator-tiny.rs:21:9: 24:10\n     }\n \n     bb2: {\n-        StorageLive(_6);                 // scope 1 at $DIR/generator-tiny.rs:+3:13: +3:18\n-        StorageLive(_7);                 // scope 1 at $DIR/generator-tiny.rs:+3:13: +3:18\n-        Deinit(_7);                      // scope 1 at $DIR/generator-tiny.rs:+3:13: +3:18\n-        Deinit(_0);                      // scope 1 at $DIR/generator-tiny.rs:+3:13: +3:18\n-        ((_0 as Yielded).0: ()) = move _7; // scope 1 at $DIR/generator-tiny.rs:+3:13: +3:18\n-        discriminant(_0) = 0;            // scope 1 at $DIR/generator-tiny.rs:+3:13: +3:18\n-        discriminant((*(_1.0: &mut [generator@$DIR/generator-tiny.rs:19:16: 19:24]))) = 3; // scope 1 at $DIR/generator-tiny.rs:+3:13: +3:18\n-        return;                          // scope 1 at $DIR/generator-tiny.rs:+3:13: +3:18\n+        StorageLive(_6);                 // scope 1 at $DIR/generator-tiny.rs:22:13: 22:18\n+        StorageLive(_7);                 // scope 1 at $DIR/generator-tiny.rs:22:13: 22:18\n+        Deinit(_7);                      // scope 1 at $DIR/generator-tiny.rs:22:13: 22:18\n+        Deinit(_0);                      // scope 1 at $DIR/generator-tiny.rs:22:13: 22:18\n+        ((_0 as Yielded).0: ()) = move _7; // scope 1 at $DIR/generator-tiny.rs:22:13: 22:18\n+        discriminant(_0) = 0;            // scope 1 at $DIR/generator-tiny.rs:22:13: 22:18\n+        discriminant((*(_1.0: &mut [generator@$DIR/generator-tiny.rs:19:16: 19:24]))) = 3; // scope 1 at $DIR/generator-tiny.rs:22:13: 22:18\n+        return;                          // scope 1 at $DIR/generator-tiny.rs:22:13: 22:18\n     }\n \n     bb3: {\n-        StorageDead(_7);                 // scope 1 at $DIR/generator-tiny.rs:+3:17: +3:18\n-        StorageDead(_6);                 // scope 1 at $DIR/generator-tiny.rs:+3:18: +3:19\n-        StorageLive(_8);                 // scope 1 at $DIR/generator-tiny.rs:+4:13: +4:21\n-        _8 = callee() -> bb4;            // scope 1 at $DIR/generator-tiny.rs:+4:13: +4:21\n+        StorageDead(_7);                 // scope 1 at $DIR/generator-tiny.rs:22:17: 22:18\n+        StorageDead(_6);                 // scope 1 at $DIR/generator-tiny.rs:22:18: 22:19\n+        StorageLive(_8);                 // scope 1 at $DIR/generator-tiny.rs:23:13: 23:21\n+        _8 = callee() -> bb4;            // scope 1 at $DIR/generator-tiny.rs:23:13: 23:21\n                                          // mir::Constant\n                                          // + span: $DIR/generator-tiny.rs:23:13: 23:19\n                                          // + literal: Const { ty: fn() {callee}, val: Value(<ZST>) }\n     }\n \n     bb4: {\n-        StorageDead(_8);                 // scope 1 at $DIR/generator-tiny.rs:+4:21: +4:22\n-        _5 = const ();                   // scope 1 at $DIR/generator-tiny.rs:+2:14: +5:10\n-        goto -> bb2;                     // scope 1 at $DIR/generator-tiny.rs:+2:9: +5:10\n+        StorageDead(_8);                 // scope 1 at $DIR/generator-tiny.rs:23:21: 23:22\n+        _5 = const ();                   // scope 1 at $DIR/generator-tiny.rs:21:14: 24:10\n+        goto -> bb2;                     // scope 1 at $DIR/generator-tiny.rs:21:9: 24:10\n     }\n \n     bb5: {"}, {"sha": "5f3ee467c88cb026144d63eff156b74d19306742", "filename": "src/test/mir-opt/inline/cycle.g.Inline.diff", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/5d7ce21b6ba31e93d7d9af71dd330ecc71387a2d/src%2Ftest%2Fmir-opt%2Finline%2Fcycle.g.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5d7ce21b6ba31e93d7d9af71dd330ecc71387a2d/src%2Ftest%2Fmir-opt%2Finline%2Fcycle.g.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fcycle.g.Inline.diff?ref=5d7ce21b6ba31e93d7d9af71dd330ecc71387a2d", "patch": "@@ -6,10 +6,10 @@\n       let _1: ();                          // in scope 0 at $DIR/cycle.rs:+1:5: +1:12\n +     let mut _2: fn() {main};             // in scope 0 at $DIR/cycle.rs:+1:5: +1:12\n +     scope 1 (inlined f::<fn() {main}>) { // at $DIR/cycle.rs:12:5: 12:12\n-+         debug g => _2;                   // in scope 1 at $DIR/cycle.rs:+0:6: +0:7\n-+         let _3: ();                      // in scope 1 at $DIR/cycle.rs:+0:5: +0:8\n-+         let mut _4: &fn() {main};        // in scope 1 at $DIR/cycle.rs:+0:5: +0:6\n-+         let mut _5: ();                  // in scope 1 at $DIR/cycle.rs:+0:5: +0:8\n++         debug g => _2;                   // in scope 1 at $DIR/cycle.rs:5:6: 5:7\n++         let _3: ();                      // in scope 1 at $DIR/cycle.rs:6:5: 6:8\n++         let mut _4: &fn() {main};        // in scope 1 at $DIR/cycle.rs:6:5: 6:6\n++         let mut _5: ();                  // in scope 1 at $DIR/cycle.rs:6:5: 6:8\n +         scope 2 (inlined <fn() {main} as Fn<()>>::call - shim(fn() {main})) { // at $DIR/cycle.rs:6:5: 6:8\n +         }\n +     }\n@@ -25,10 +25,10 @@\n -                                          // mir::Constant\n                                            // + span: $DIR/cycle.rs:12:7: 12:11\n                                            // + literal: Const { ty: fn() {main}, val: Value(<ZST>) }\n-+         StorageLive(_3);                 // scope 1 at $DIR/cycle.rs:+0:5: +0:8\n-+         StorageLive(_4);                 // scope 1 at $DIR/cycle.rs:+0:5: +0:6\n-+         _4 = &_2;                        // scope 1 at $DIR/cycle.rs:+0:5: +0:6\n-+         StorageLive(_5);                 // scope 1 at $DIR/cycle.rs:+0:5: +0:8\n++         StorageLive(_3);                 // scope 1 at $DIR/cycle.rs:6:5: 6:8\n++         StorageLive(_4);                 // scope 1 at $DIR/cycle.rs:6:5: 6:6\n++         _4 = &_2;                        // scope 1 at $DIR/cycle.rs:6:5: 6:6\n++         StorageLive(_5);                 // scope 1 at $DIR/cycle.rs:6:5: 6:8\n +         _3 = move (*_4)() -> [return: bb4, unwind: bb2]; // scope 2 at $SRC_DIR/core/src/ops/function.rs:LL:COL\n       }\n   \n@@ -40,18 +40,18 @@\n +     }\n + \n +     bb2 (cleanup): {\n-+         drop(_2) -> bb3;                 // scope 1 at $DIR/cycle.rs:+0:1: +0:2\n++         drop(_2) -> bb3;                 // scope 1 at $DIR/cycle.rs:7:1: 7:2\n +     }\n + \n +     bb3 (cleanup): {\n-+         resume;                          // scope 1 at $DIR/cycle.rs:+0:1: +0:2\n++         resume;                          // scope 1 at $DIR/cycle.rs:5:1: 7:2\n +     }\n + \n +     bb4: {\n-+         StorageDead(_5);                 // scope 1 at $DIR/cycle.rs:+0:7: +0:8\n-+         StorageDead(_4);                 // scope 1 at $DIR/cycle.rs:+0:7: +0:8\n-+         StorageDead(_3);                 // scope 1 at $DIR/cycle.rs:+0:8: +0:9\n-+         drop(_2) -> bb1;                 // scope 1 at $DIR/cycle.rs:+0:1: +0:2\n++         StorageDead(_5);                 // scope 1 at $DIR/cycle.rs:6:7: 6:8\n++         StorageDead(_4);                 // scope 1 at $DIR/cycle.rs:6:7: 6:8\n++         StorageDead(_3);                 // scope 1 at $DIR/cycle.rs:6:8: 6:9\n++         drop(_2) -> bb1;                 // scope 1 at $DIR/cycle.rs:7:1: 7:2\n       }\n   }\n   "}, {"sha": "8b4099b9d9f71b10dfe6d17630dc5d2b861f418f", "filename": "src/test/mir-opt/inline/cycle.main.Inline.diff", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/5d7ce21b6ba31e93d7d9af71dd330ecc71387a2d/src%2Ftest%2Fmir-opt%2Finline%2Fcycle.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5d7ce21b6ba31e93d7d9af71dd330ecc71387a2d/src%2Ftest%2Fmir-opt%2Finline%2Fcycle.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fcycle.main.Inline.diff?ref=5d7ce21b6ba31e93d7d9af71dd330ecc71387a2d", "patch": "@@ -6,17 +6,17 @@\n       let _1: ();                          // in scope 0 at $DIR/cycle.rs:+1:5: +1:9\n +     let mut _2: fn() {g};                // in scope 0 at $DIR/cycle.rs:+1:5: +1:9\n +     scope 1 (inlined f::<fn() {g}>) {    // at $DIR/cycle.rs:17:5: 17:9\n-+         debug g => _2;                   // in scope 1 at $DIR/cycle.rs:+0:6: +0:7\n-+         let _3: ();                      // in scope 1 at $DIR/cycle.rs:+0:5: +0:8\n-+         let mut _4: &fn() {g};           // in scope 1 at $DIR/cycle.rs:+0:5: +0:6\n-+         let mut _5: ();                  // in scope 1 at $DIR/cycle.rs:+0:5: +0:8\n++         debug g => _2;                   // in scope 1 at $DIR/cycle.rs:5:6: 5:7\n++         let _3: ();                      // in scope 1 at $DIR/cycle.rs:6:5: 6:8\n++         let mut _4: &fn() {g};           // in scope 1 at $DIR/cycle.rs:6:5: 6:6\n++         let mut _5: ();                  // in scope 1 at $DIR/cycle.rs:6:5: 6:8\n +         scope 2 (inlined <fn() {g} as Fn<()>>::call - shim(fn() {g})) { // at $DIR/cycle.rs:6:5: 6:8\n +             scope 3 (inlined g) {        // at $SRC_DIR/core/src/ops/function.rs:LL:COL\n-+                 let mut _6: fn() {main}; // in scope 3 at $DIR/cycle.rs:+0:5: +0:12\n++                 let mut _6: fn() {main}; // in scope 3 at $DIR/cycle.rs:12:5: 12:12\n +                 scope 4 (inlined f::<fn() {main}>) { // at $DIR/cycle.rs:12:5: 12:12\n-+                     debug g => _6;       // in scope 4 at $DIR/cycle.rs:+0:6: +0:7\n-+                     let _7: ();          // in scope 4 at $DIR/cycle.rs:+0:5: +0:8\n-+                     let mut _8: &fn() {main}; // in scope 4 at $DIR/cycle.rs:+0:5: +0:6\n++                     debug g => _6;       // in scope 4 at $DIR/cycle.rs:5:6: 5:7\n++                     let _7: ();          // in scope 4 at $DIR/cycle.rs:6:5: 6:8\n++                     let mut _8: &fn() {main}; // in scope 4 at $DIR/cycle.rs:6:5: 6:6\n +                     scope 5 (inlined <fn() {main} as Fn<()>>::call - shim(fn() {main})) { // at $DIR/cycle.rs:6:5: 6:8\n +                     }\n +                 }\n@@ -35,14 +35,14 @@\n -                                          // mir::Constant\n                                            // + span: $DIR/cycle.rs:17:7: 17:8\n                                            // + literal: Const { ty: fn() {g}, val: Value(<ZST>) }\n-+         StorageLive(_3);                 // scope 1 at $DIR/cycle.rs:+0:5: +0:8\n-+         StorageLive(_4);                 // scope 1 at $DIR/cycle.rs:+0:5: +0:6\n-+         _4 = &_2;                        // scope 1 at $DIR/cycle.rs:+0:5: +0:6\n-+         StorageLive(_5);                 // scope 1 at $DIR/cycle.rs:+0:5: +0:8\n-+         StorageLive(_6);                 // scope 3 at $DIR/cycle.rs:+0:5: +0:12\n-+         StorageLive(_7);                 // scope 4 at $DIR/cycle.rs:+0:5: +0:8\n-+         StorageLive(_8);                 // scope 4 at $DIR/cycle.rs:+0:5: +0:6\n-+         _8 = &_6;                        // scope 4 at $DIR/cycle.rs:+0:5: +0:6\n++         StorageLive(_3);                 // scope 1 at $DIR/cycle.rs:6:5: 6:8\n++         StorageLive(_4);                 // scope 1 at $DIR/cycle.rs:6:5: 6:6\n++         _4 = &_2;                        // scope 1 at $DIR/cycle.rs:6:5: 6:6\n++         StorageLive(_5);                 // scope 1 at $DIR/cycle.rs:6:5: 6:8\n++         StorageLive(_6);                 // scope 3 at $DIR/cycle.rs:12:5: 12:12\n++         StorageLive(_7);                 // scope 4 at $DIR/cycle.rs:6:5: 6:8\n++         StorageLive(_8);                 // scope 4 at $DIR/cycle.rs:6:5: 6:6\n++         _8 = &_6;                        // scope 4 at $DIR/cycle.rs:6:5: 6:6\n +         _7 = move (*_8)() -> [return: bb4, unwind: bb2]; // scope 5 at $SRC_DIR/core/src/ops/function.rs:LL:COL\n       }\n   \n@@ -54,21 +54,21 @@\n +     }\n + \n +     bb2 (cleanup): {\n-+         drop(_2) -> bb3;                 // scope 1 at $DIR/cycle.rs:+0:1: +0:2\n++         drop(_2) -> bb3;                 // scope 1 at $DIR/cycle.rs:7:1: 7:2\n +     }\n + \n +     bb3 (cleanup): {\n-+         resume;                          // scope 1 at $DIR/cycle.rs:+0:1: +0:2\n++         resume;                          // scope 1 at $DIR/cycle.rs:5:1: 7:2\n +     }\n + \n +     bb4: {\n-+         StorageDead(_8);                 // scope 4 at $DIR/cycle.rs:+0:7: +0:8\n-+         StorageDead(_7);                 // scope 4 at $DIR/cycle.rs:+0:8: +0:9\n-+         StorageDead(_6);                 // scope 3 at $DIR/cycle.rs:+0:5: +0:12\n-+         StorageDead(_5);                 // scope 1 at $DIR/cycle.rs:+0:7: +0:8\n-+         StorageDead(_4);                 // scope 1 at $DIR/cycle.rs:+0:7: +0:8\n-+         StorageDead(_3);                 // scope 1 at $DIR/cycle.rs:+0:8: +0:9\n-+         drop(_2) -> bb1;                 // scope 1 at $DIR/cycle.rs:+0:1: +0:2\n++         StorageDead(_8);                 // scope 4 at $DIR/cycle.rs:6:7: 6:8\n++         StorageDead(_7);                 // scope 4 at $DIR/cycle.rs:6:8: 6:9\n++         StorageDead(_6);                 // scope 3 at $DIR/cycle.rs:12:5: 12:12\n++         StorageDead(_5);                 // scope 1 at $DIR/cycle.rs:6:7: 6:8\n++         StorageDead(_4);                 // scope 1 at $DIR/cycle.rs:6:7: 6:8\n++         StorageDead(_3);                 // scope 1 at $DIR/cycle.rs:6:8: 6:9\n++         drop(_2) -> bb1;                 // scope 1 at $DIR/cycle.rs:7:1: 7:2\n       }\n   }\n   "}, {"sha": "4b50ba9501c1a0d4e30d259568c478701368f8a8", "filename": "src/test/mir-opt/inline/dyn_trait.get_query.Inline.diff", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/5d7ce21b6ba31e93d7d9af71dd330ecc71387a2d/src%2Ftest%2Fmir-opt%2Finline%2Fdyn_trait.get_query.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5d7ce21b6ba31e93d7d9af71dd330ecc71387a2d/src%2Ftest%2Fmir-opt%2Finline%2Fdyn_trait.get_query.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fdyn_trait.get_query.Inline.diff?ref=5d7ce21b6ba31e93d7d9af71dd330ecc71387a2d", "patch": "@@ -10,12 +10,12 @@\n       scope 1 {\n           debug c => _2;                   // in scope 1 at $DIR/dyn-trait.rs:+1:9: +1:10\n +         scope 2 (inlined try_execute_query::<<Q as Query>::C>) { // at $DIR/dyn-trait.rs:34:5: 34:25\n-+             debug c => _4;               // in scope 2 at $DIR/dyn-trait.rs:+0:36: +0:37\n-+             let mut _5: &dyn Cache<V = <Q as Query>::V>; // in scope 2 at $DIR/dyn-trait.rs:+0:14: +0:15\n-+             let mut _6: &<Q as Query>::C; // in scope 2 at $DIR/dyn-trait.rs:+0:14: +0:15\n++             debug c => _4;               // in scope 2 at $DIR/dyn-trait.rs:26:36: 26:37\n++             let mut _5: &dyn Cache<V = <Q as Query>::V>; // in scope 2 at $DIR/dyn-trait.rs:27:14: 27:15\n++             let mut _6: &<Q as Query>::C; // in scope 2 at $DIR/dyn-trait.rs:27:14: 27:15\n +             scope 3 (inlined mk_cycle::<<Q as Query>::V>) { // at $DIR/dyn-trait.rs:27:5: 27:16\n-+                 debug c => _5;           // in scope 3 at $DIR/dyn-trait.rs:+0:27: +0:28\n-+                 let mut _7: &dyn Cache<V = <Q as Query>::V>; // in scope 3 at $DIR/dyn-trait.rs:+0:5: +0:22\n++                 debug c => _5;           // in scope 3 at $DIR/dyn-trait.rs:20:27: 20:28\n++                 let mut _7: &dyn Cache<V = <Q as Query>::V>; // in scope 3 at $DIR/dyn-trait.rs:21:5: 21:22\n +             }\n +         }\n       }\n@@ -36,14 +36,14 @@\n           StorageLive(_4);                 // scope 1 at $DIR/dyn-trait.rs:+2:23: +2:24\n           _4 = &(*_2);                     // scope 1 at $DIR/dyn-trait.rs:+2:23: +2:24\n -         _0 = try_execute_query::<<Q as Query>::C>(move _4) -> bb2; // scope 1 at $DIR/dyn-trait.rs:+2:5: +2:25\n-+         StorageLive(_5);                 // scope 2 at $DIR/dyn-trait.rs:+0:14: +0:15\n-+         StorageLive(_6);                 // scope 2 at $DIR/dyn-trait.rs:+0:14: +0:15\n-+         _6 = _4;                         // scope 2 at $DIR/dyn-trait.rs:+0:14: +0:15\n-+         _5 = move _6 as &dyn Cache<V = <Q as Query>::V> (Pointer(Unsize)); // scope 2 at $DIR/dyn-trait.rs:+0:14: +0:15\n-+         StorageDead(_6);                 // scope 2 at $DIR/dyn-trait.rs:+0:14: +0:15\n-+         StorageLive(_7);                 // scope 3 at $DIR/dyn-trait.rs:+0:5: +0:22\n-+         _7 = _5;                         // scope 3 at $DIR/dyn-trait.rs:+0:5: +0:22\n-+         _0 = <dyn Cache<V = <Q as Query>::V> as Cache>::store_nocache(move _7) -> bb2; // scope 3 at $DIR/dyn-trait.rs:+0:5: +0:22\n++         StorageLive(_5);                 // scope 2 at $DIR/dyn-trait.rs:27:14: 27:15\n++         StorageLive(_6);                 // scope 2 at $DIR/dyn-trait.rs:27:14: 27:15\n++         _6 = _4;                         // scope 2 at $DIR/dyn-trait.rs:27:14: 27:15\n++         _5 = move _6 as &dyn Cache<V = <Q as Query>::V> (Pointer(Unsize)); // scope 2 at $DIR/dyn-trait.rs:27:14: 27:15\n++         StorageDead(_6);                 // scope 2 at $DIR/dyn-trait.rs:27:14: 27:15\n++         StorageLive(_7);                 // scope 3 at $DIR/dyn-trait.rs:21:5: 21:22\n++         _7 = _5;                         // scope 3 at $DIR/dyn-trait.rs:21:5: 21:22\n++         _0 = <dyn Cache<V = <Q as Query>::V> as Cache>::store_nocache(move _7) -> bb2; // scope 3 at $DIR/dyn-trait.rs:21:5: 21:22\n                                            // mir::Constant\n -                                          // + span: $DIR/dyn-trait.rs:34:5: 34:22\n -                                          // + literal: Const { ty: for<'r> fn(&'r <Q as Query>::C) {try_execute_query::<<Q as Query>::C>}, val: Value(<ZST>) }\n@@ -52,8 +52,8 @@\n       }\n   \n       bb2: {\n-+         StorageDead(_7);                 // scope 3 at $DIR/dyn-trait.rs:+0:21: +0:22\n-+         StorageDead(_5);                 // scope 2 at $DIR/dyn-trait.rs:+0:15: +0:16\n++         StorageDead(_7);                 // scope 3 at $DIR/dyn-trait.rs:21:21: 21:22\n++         StorageDead(_5);                 // scope 2 at $DIR/dyn-trait.rs:27:15: 27:16\n           StorageDead(_4);                 // scope 1 at $DIR/dyn-trait.rs:+2:24: +2:25\n           StorageDead(_2);                 // scope 0 at $DIR/dyn-trait.rs:+3:1: +3:2\n           return;                          // scope 0 at $DIR/dyn-trait.rs:+3:2: +3:2"}, {"sha": "58c05b9f564df50e91e55ee1e3522966684548ac", "filename": "src/test/mir-opt/inline/dyn_trait.try_execute_query.Inline.diff", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5d7ce21b6ba31e93d7d9af71dd330ecc71387a2d/src%2Ftest%2Fmir-opt%2Finline%2Fdyn_trait.try_execute_query.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5d7ce21b6ba31e93d7d9af71dd330ecc71387a2d/src%2Ftest%2Fmir-opt%2Finline%2Fdyn_trait.try_execute_query.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fdyn_trait.try_execute_query.Inline.diff?ref=5d7ce21b6ba31e93d7d9af71dd330ecc71387a2d", "patch": "@@ -7,8 +7,8 @@\n       let mut _2: &dyn Cache<V = <C as Cache>::V>; // in scope 0 at $DIR/dyn-trait.rs:+1:14: +1:15\n       let mut _3: &C;                      // in scope 0 at $DIR/dyn-trait.rs:+1:14: +1:15\n +     scope 1 (inlined mk_cycle::<<C as Cache>::V>) { // at $DIR/dyn-trait.rs:27:5: 27:16\n-+         debug c => _2;                   // in scope 1 at $DIR/dyn-trait.rs:+0:27: +0:28\n-+         let mut _4: &dyn Cache<V = <C as Cache>::V>; // in scope 1 at $DIR/dyn-trait.rs:+0:5: +0:22\n++         debug c => _2;                   // in scope 1 at $DIR/dyn-trait.rs:20:27: 20:28\n++         let mut _4: &dyn Cache<V = <C as Cache>::V>; // in scope 1 at $DIR/dyn-trait.rs:21:5: 21:22\n +     }\n   \n       bb0: {\n@@ -18,9 +18,9 @@\n           _2 = move _3 as &dyn Cache<V = <C as Cache>::V> (Pointer(Unsize)); // scope 0 at $DIR/dyn-trait.rs:+1:14: +1:15\n           StorageDead(_3);                 // scope 0 at $DIR/dyn-trait.rs:+1:14: +1:15\n -         _0 = mk_cycle::<<C as Cache>::V>(move _2) -> bb1; // scope 0 at $DIR/dyn-trait.rs:+1:5: +1:16\n-+         StorageLive(_4);                 // scope 1 at $DIR/dyn-trait.rs:+0:5: +0:22\n-+         _4 = _2;                         // scope 1 at $DIR/dyn-trait.rs:+0:5: +0:22\n-+         _0 = <dyn Cache<V = <C as Cache>::V> as Cache>::store_nocache(move _4) -> bb1; // scope 1 at $DIR/dyn-trait.rs:+0:5: +0:22\n++         StorageLive(_4);                 // scope 1 at $DIR/dyn-trait.rs:21:5: 21:22\n++         _4 = _2;                         // scope 1 at $DIR/dyn-trait.rs:21:5: 21:22\n++         _0 = <dyn Cache<V = <C as Cache>::V> as Cache>::store_nocache(move _4) -> bb1; // scope 1 at $DIR/dyn-trait.rs:21:5: 21:22\n                                            // mir::Constant\n -                                          // + span: $DIR/dyn-trait.rs:27:5: 27:13\n -                                          // + literal: Const { ty: for<'r> fn(&'r (dyn Cache<V = <C as Cache>::V> + 'r)) {mk_cycle::<<C as Cache>::V>}, val: Value(<ZST>) }\n@@ -29,7 +29,7 @@\n       }\n   \n       bb1: {\n-+         StorageDead(_4);                 // scope 1 at $DIR/dyn-trait.rs:+0:21: +0:22\n++         StorageDead(_4);                 // scope 1 at $DIR/dyn-trait.rs:21:21: 21:22\n           StorageDead(_2);                 // scope 0 at $DIR/dyn-trait.rs:+1:15: +1:16\n           return;                          // scope 0 at $DIR/dyn-trait.rs:+2:2: +2:2\n       }"}, {"sha": "b27425fb18c28059d2ac9197d0db278fb399001e", "filename": "src/test/mir-opt/inline/inline_any_operand.bar.Inline.after.mir", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5d7ce21b6ba31e93d7d9af71dd330ecc71387a2d/src%2Ftest%2Fmir-opt%2Finline%2Finline_any_operand.bar.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/5d7ce21b6ba31e93d7d9af71dd330ecc71387a2d/src%2Ftest%2Fmir-opt%2Finline%2Finline_any_operand.bar.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_any_operand.bar.Inline.after.mir?ref=5d7ce21b6ba31e93d7d9af71dd330ecc71387a2d", "patch": "@@ -9,10 +9,10 @@ fn bar() -> bool {\n     scope 1 {\n         debug f => _1;                   // in scope 1 at $DIR/inline-any-operand.rs:+1:9: +1:10\n         scope 2 (inlined foo) {          // at $DIR/inline-any-operand.rs:12:5: 12:13\n-            debug x => _3;               // in scope 2 at $DIR/inline-any-operand.rs:+6:8: +6:9\n-            debug y => _4;               // in scope 2 at $DIR/inline-any-operand.rs:+6:16: +6:17\n-            let mut _5: i32;             // in scope 2 at $DIR/inline-any-operand.rs:+7:5: +7:6\n-            let mut _6: i32;             // in scope 2 at $DIR/inline-any-operand.rs:+7:10: +7:11\n+            debug x => _3;               // in scope 2 at $DIR/inline-any-operand.rs:16:8: 16:9\n+            debug y => _4;               // in scope 2 at $DIR/inline-any-operand.rs:16:16: 16:17\n+            let mut _5: i32;             // in scope 2 at $DIR/inline-any-operand.rs:17:5: 17:6\n+            let mut _6: i32;             // in scope 2 at $DIR/inline-any-operand.rs:17:10: 17:11\n         }\n     }\n \n@@ -28,13 +28,13 @@ fn bar() -> bool {\n         _3 = const 1_i32;                // scope 1 at $DIR/inline-any-operand.rs:+2:5: +2:13\n         StorageLive(_4);                 // scope 1 at $DIR/inline-any-operand.rs:+2:5: +2:13\n         _4 = const -1_i32;               // scope 1 at $DIR/inline-any-operand.rs:+2:5: +2:13\n-        StorageLive(_5);                 // scope 2 at $DIR/inline-any-operand.rs:+7:5: +7:6\n-        _5 = _3;                         // scope 2 at $DIR/inline-any-operand.rs:+7:5: +7:6\n-        StorageLive(_6);                 // scope 2 at $DIR/inline-any-operand.rs:+7:10: +7:11\n-        _6 = _4;                         // scope 2 at $DIR/inline-any-operand.rs:+7:10: +7:11\n-        _0 = Eq(move _5, move _6);       // scope 2 at $DIR/inline-any-operand.rs:+7:5: +7:11\n-        StorageDead(_6);                 // scope 2 at $DIR/inline-any-operand.rs:+7:10: +7:11\n-        StorageDead(_5);                 // scope 2 at $DIR/inline-any-operand.rs:+7:10: +7:11\n+        StorageLive(_5);                 // scope 2 at $DIR/inline-any-operand.rs:17:5: 17:6\n+        _5 = _3;                         // scope 2 at $DIR/inline-any-operand.rs:17:5: 17:6\n+        StorageLive(_6);                 // scope 2 at $DIR/inline-any-operand.rs:17:10: 17:11\n+        _6 = _4;                         // scope 2 at $DIR/inline-any-operand.rs:17:10: 17:11\n+        _0 = Eq(move _5, move _6);       // scope 2 at $DIR/inline-any-operand.rs:17:5: 17:11\n+        StorageDead(_6);                 // scope 2 at $DIR/inline-any-operand.rs:17:10: 17:11\n+        StorageDead(_5);                 // scope 2 at $DIR/inline-any-operand.rs:17:10: 17:11\n         StorageDead(_4);                 // scope 1 at $DIR/inline-any-operand.rs:+2:5: +2:13\n         StorageDead(_3);                 // scope 1 at $DIR/inline-any-operand.rs:+2:5: +2:13\n         StorageDead(_2);                 // scope 1 at $DIR/inline-any-operand.rs:+2:12: +2:13"}, {"sha": "a4d706de0ba58abef12b39aedf27c24a1dac6bad", "filename": "src/test/mir-opt/inline/inline_cycle.one.Inline.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d7ce21b6ba31e93d7d9af71dd330ecc71387a2d/src%2Ftest%2Fmir-opt%2Finline%2Finline_cycle.one.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5d7ce21b6ba31e93d7d9af71dd330ecc71387a2d/src%2Ftest%2Fmir-opt%2Finline%2Finline_cycle.one.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_cycle.one.Inline.diff?ref=5d7ce21b6ba31e93d7d9af71dd330ecc71387a2d", "patch": "@@ -14,7 +14,7 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/inline-cycle.rs:+1:5: +1:24\n -         _1 = <C as Call>::call() -> bb1; // scope 0 at $DIR/inline-cycle.rs:+1:5: +1:24\n-+         _1 = <C as Call>::call() -> bb1; // scope 3 at $DIR/inline-cycle.rs:+23:9: +23:28\n++         _1 = <C as Call>::call() -> bb1; // scope 3 at $DIR/inline-cycle.rs:36:9: 36:28\n                                            // mir::Constant\n -                                          // + span: $DIR/inline-cycle.rs:14:5: 14:22\n +                                          // + span: $DIR/inline-cycle.rs:36:9: 36:26"}, {"sha": "b1a5b62ef1d364629a29a6f77cad015125085100", "filename": "src/test/mir-opt/inline/inline_cycle.two.Inline.diff", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/5d7ce21b6ba31e93d7d9af71dd330ecc71387a2d/src%2Ftest%2Fmir-opt%2Finline%2Finline_cycle.two.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5d7ce21b6ba31e93d7d9af71dd330ecc71387a2d/src%2Ftest%2Fmir-opt%2Finline%2Finline_cycle.two.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_cycle.two.Inline.diff?ref=5d7ce21b6ba31e93d7d9af71dd330ecc71387a2d", "patch": "@@ -6,13 +6,13 @@\n       let _1: ();                          // in scope 0 at $DIR/inline-cycle.rs:+1:5: +1:12\n +     let mut _2: fn() {f};                // in scope 0 at $DIR/inline-cycle.rs:+1:5: +1:12\n +     scope 1 (inlined call::<fn() {f}>) { // at $DIR/inline-cycle.rs:49:5: 49:12\n-+         debug f => _2;                   // in scope 1 at $DIR/inline-cycle.rs:+5:22: +5:23\n-+         let _3: ();                      // in scope 1 at $DIR/inline-cycle.rs:+6:5: +6:8\n-+         let mut _4: fn() {f};            // in scope 1 at $DIR/inline-cycle.rs:+6:5: +6:6\n-+         let mut _5: ();                  // in scope 1 at $DIR/inline-cycle.rs:+6:5: +6:8\n++         debug f => _2;                   // in scope 1 at $DIR/inline-cycle.rs:53:22: 53:23\n++         let _3: ();                      // in scope 1 at $DIR/inline-cycle.rs:54:5: 54:8\n++         let mut _4: fn() {f};            // in scope 1 at $DIR/inline-cycle.rs:54:5: 54:6\n++         let mut _5: ();                  // in scope 1 at $DIR/inline-cycle.rs:54:5: 54:8\n +         scope 2 (inlined <fn() {f} as FnOnce<()>>::call_once - shim(fn() {f})) { // at $DIR/inline-cycle.rs:54:5: 54:8\n +             scope 3 (inlined f) {        // at $SRC_DIR/core/src/ops/function.rs:LL:COL\n-+                 let _6: ();              // in scope 3 at $DIR/inline-cycle.rs:+11:5: +11:12\n++                 let _6: ();              // in scope 3 at $DIR/inline-cycle.rs:59:5: 59:12\n +             }\n +         }\n +     }\n@@ -26,12 +26,12 @@\n -                                          // + span: $DIR/inline-cycle.rs:49:5: 49:9\n +                                          // + span: $DIR/inline-cycle.rs:49:10: 49:11\n +                                          // + literal: Const { ty: fn() {f}, val: Value(<ZST>) }\n-+         StorageLive(_3);                 // scope 1 at $DIR/inline-cycle.rs:+6:5: +6:8\n-+         StorageLive(_4);                 // scope 1 at $DIR/inline-cycle.rs:+6:5: +6:6\n-+         _4 = move _2;                    // scope 1 at $DIR/inline-cycle.rs:+6:5: +6:6\n-+         StorageLive(_5);                 // scope 1 at $DIR/inline-cycle.rs:+6:5: +6:8\n-+         StorageLive(_6);                 // scope 3 at $DIR/inline-cycle.rs:+11:5: +11:12\n-+         _6 = call::<fn() {f}>(f) -> bb1; // scope 3 at $DIR/inline-cycle.rs:+11:5: +11:12\n++         StorageLive(_3);                 // scope 1 at $DIR/inline-cycle.rs:54:5: 54:8\n++         StorageLive(_4);                 // scope 1 at $DIR/inline-cycle.rs:54:5: 54:6\n++         _4 = move _2;                    // scope 1 at $DIR/inline-cycle.rs:54:5: 54:6\n++         StorageLive(_5);                 // scope 1 at $DIR/inline-cycle.rs:54:5: 54:8\n++         StorageLive(_6);                 // scope 3 at $DIR/inline-cycle.rs:59:5: 59:12\n++         _6 = call::<fn() {f}>(f) -> bb1; // scope 3 at $DIR/inline-cycle.rs:59:5: 59:12\n +                                          // mir::Constant\n +                                          // + span: $DIR/inline-cycle.rs:59:5: 59:9\n                                            // + literal: Const { ty: fn(fn() {f}) {call::<fn() {f}>}, val: Value(<ZST>) }\n@@ -42,10 +42,10 @@\n       }\n   \n       bb1: {\n-+         StorageDead(_6);                 // scope 3 at $DIR/inline-cycle.rs:+11:12: +11:13\n-+         StorageDead(_5);                 // scope 1 at $DIR/inline-cycle.rs:+6:7: +6:8\n-+         StorageDead(_4);                 // scope 1 at $DIR/inline-cycle.rs:+6:7: +6:8\n-+         StorageDead(_3);                 // scope 1 at $DIR/inline-cycle.rs:+6:8: +6:9\n++         StorageDead(_6);                 // scope 3 at $DIR/inline-cycle.rs:59:12: 59:13\n++         StorageDead(_5);                 // scope 1 at $DIR/inline-cycle.rs:54:7: 54:8\n++         StorageDead(_4);                 // scope 1 at $DIR/inline-cycle.rs:54:7: 54:8\n++         StorageDead(_3);                 // scope 1 at $DIR/inline-cycle.rs:54:8: 54:9\n +         StorageDead(_2);                 // scope 0 at $DIR/inline-cycle.rs:+1:5: +1:12\n           StorageDead(_1);                 // scope 0 at $DIR/inline-cycle.rs:+1:12: +1:13\n           _0 = const ();                   // scope 0 at $DIR/inline-cycle.rs:+0:10: +2:2"}, {"sha": "fc5d57ce8bf2f70cbd826864314bbbb3da07a44e", "filename": "src/test/mir-opt/inline/inline_cycle_generic.main.Inline.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d7ce21b6ba31e93d7d9af71dd330ecc71387a2d/src%2Ftest%2Fmir-opt%2Finline%2Finline_cycle_generic.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5d7ce21b6ba31e93d7d9af71dd330ecc71387a2d/src%2Ftest%2Fmir-opt%2Finline%2Finline_cycle_generic.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_cycle_generic.main.Inline.diff?ref=5d7ce21b6ba31e93d7d9af71dd330ecc71387a2d", "patch": "@@ -16,7 +16,7 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/inline-cycle-generic.rs:+1:5: +1:24\n -         _1 = <C as Call>::call() -> bb1; // scope 0 at $DIR/inline-cycle-generic.rs:+1:5: +1:24\n-+         _1 = <C as Call>::call() -> bb1; // scope 4 at $DIR/inline-cycle-generic.rs:+23:9: +23:28\n++         _1 = <C as Call>::call() -> bb1; // scope 4 at $DIR/inline-cycle-generic.rs:31:9: 31:28\n                                            // mir::Constant\n -                                          // + span: $DIR/inline-cycle-generic.rs:9:5: 9:22\n +                                          // + span: $DIR/inline-cycle-generic.rs:31:9: 31:26"}, {"sha": "cef4cfc67ab29c11623e5263cce441c75ff150d7", "filename": "src/test/mir-opt/inline/inline_diverging.f.Inline.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d7ce21b6ba31e93d7d9af71dd330ecc71387a2d/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.f.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5d7ce21b6ba31e93d7d9af71dd330ecc71387a2d/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.f.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.f.Inline.diff?ref=5d7ce21b6ba31e93d7d9af71dd330ecc71387a2d", "patch": "@@ -18,7 +18,7 @@\n +     }\n + \n +     bb1: {\n-+         goto -> bb1;                     // scope 1 at $DIR/inline-diverging.rs:+32:5: +32:12\n++         goto -> bb1;                     // scope 1 at $DIR/inline-diverging.rs:39:5: 39:12\n       }\n   }\n   "}, {"sha": "6569ab24c381493135241e0d096025b5a5840418", "filename": "src/test/mir-opt/inline/inline_diverging.h.Inline.diff", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/5d7ce21b6ba31e93d7d9af71dd330ecc71387a2d/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.h.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5d7ce21b6ba31e93d7d9af71dd330ecc71387a2d/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.h.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.h.Inline.diff?ref=5d7ce21b6ba31e93d7d9af71dd330ecc71387a2d", "patch": "@@ -6,19 +6,19 @@\n       let _1: (!, !);                      // in scope 0 at $DIR/inline-diverging.rs:+1:5: +1:22\n +     let mut _2: fn() -> ! {sleep};       // in scope 0 at $DIR/inline-diverging.rs:+1:5: +1:22\n +     scope 1 (inlined call_twice::<!, fn() -> ! {sleep}>) { // at $DIR/inline-diverging.rs:22:5: 22:22\n-+         debug f => _2;                   // in scope 1 at $DIR/inline-diverging.rs:+5:36: +5:37\n-+         let _3: !;                       // in scope 1 at $DIR/inline-diverging.rs:+6:9: +6:10\n-+         let mut _4: &fn() -> ! {sleep};  // in scope 1 at $DIR/inline-diverging.rs:+6:13: +6:14\n-+         let mut _5: ();                  // in scope 1 at $DIR/inline-diverging.rs:+6:13: +6:16\n-+         let mut _7: &fn() -> ! {sleep};  // in scope 1 at $DIR/inline-diverging.rs:+7:13: +7:14\n-+         let mut _8: ();                  // in scope 1 at $DIR/inline-diverging.rs:+7:13: +7:16\n-+         let mut _9: !;                   // in scope 1 at $DIR/inline-diverging.rs:+8:6: +8:7\n-+         let mut _10: !;                  // in scope 1 at $DIR/inline-diverging.rs:+8:9: +8:10\n++         debug f => _2;                   // in scope 1 at $DIR/inline-diverging.rs:26:36: 26:37\n++         let _3: !;                       // in scope 1 at $DIR/inline-diverging.rs:27:9: 27:10\n++         let mut _4: &fn() -> ! {sleep};  // in scope 1 at $DIR/inline-diverging.rs:27:13: 27:14\n++         let mut _5: ();                  // in scope 1 at $DIR/inline-diverging.rs:27:13: 27:16\n++         let mut _7: &fn() -> ! {sleep};  // in scope 1 at $DIR/inline-diverging.rs:28:13: 28:14\n++         let mut _8: ();                  // in scope 1 at $DIR/inline-diverging.rs:28:13: 28:16\n++         let mut _9: !;                   // in scope 1 at $DIR/inline-diverging.rs:29:6: 29:7\n++         let mut _10: !;                  // in scope 1 at $DIR/inline-diverging.rs:29:9: 29:10\n +         scope 2 {\n-+             debug a => _3;               // in scope 2 at $DIR/inline-diverging.rs:+6:9: +6:10\n-+             let _6: !;                   // in scope 2 at $DIR/inline-diverging.rs:+7:9: +7:10\n++             debug a => _3;               // in scope 2 at $DIR/inline-diverging.rs:27:9: 27:10\n++             let _6: !;                   // in scope 2 at $DIR/inline-diverging.rs:28:9: 28:10\n +             scope 3 {\n-+                 debug b => _6;           // in scope 3 at $DIR/inline-diverging.rs:+7:9: +7:10\n++                 debug b => _6;           // in scope 3 at $DIR/inline-diverging.rs:28:9: 28:10\n +             }\n +             scope 6 (inlined <fn() -> ! {sleep} as Fn<()>>::call - shim(fn() -> ! {sleep})) { // at $DIR/inline-diverging.rs:28:13: 28:16\n +                 scope 7 (inlined sleep) { // at $SRC_DIR/core/src/ops/function.rs:LL:COL\n@@ -42,15 +42,15 @@\n -                                          // mir::Constant\n                                            // + span: $DIR/inline-diverging.rs:22:16: 22:21\n                                            // + literal: Const { ty: fn() -> ! {sleep}, val: Value(<ZST>) }\n-+         StorageLive(_3);                 // scope 1 at $DIR/inline-diverging.rs:+6:9: +6:10\n-+         StorageLive(_4);                 // scope 1 at $DIR/inline-diverging.rs:+6:13: +6:14\n-+         _4 = &_2;                        // scope 1 at $DIR/inline-diverging.rs:+6:13: +6:14\n-+         StorageLive(_5);                 // scope 1 at $DIR/inline-diverging.rs:+6:13: +6:16\n-+         goto -> bb1;                     // scope 5 at $DIR/inline-diverging.rs:+18:5: +18:12\n++         StorageLive(_3);                 // scope 1 at $DIR/inline-diverging.rs:27:9: 27:10\n++         StorageLive(_4);                 // scope 1 at $DIR/inline-diverging.rs:27:13: 27:14\n++         _4 = &_2;                        // scope 1 at $DIR/inline-diverging.rs:27:13: 27:14\n++         StorageLive(_5);                 // scope 1 at $DIR/inline-diverging.rs:27:13: 27:16\n++         goto -> bb1;                     // scope 5 at $DIR/inline-diverging.rs:39:5: 39:12\n +     }\n + \n +     bb1: {\n-+         goto -> bb1;                     // scope 5 at $DIR/inline-diverging.rs:+18:5: +18:12\n++         goto -> bb1;                     // scope 5 at $DIR/inline-diverging.rs:39:5: 39:12\n       }\n   }\n   "}, {"sha": "fd97d8bf3335ecd61351333ef21a38f68b8ff07a", "filename": "src/test/mir-opt/inline/inline_generator.main.Inline.diff", "status": "modified", "additions": 47, "deletions": 47, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/5d7ce21b6ba31e93d7d9af71dd330ecc71387a2d/src%2Ftest%2Fmir-opt%2Finline%2Finline_generator.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5d7ce21b6ba31e93d7d9af71dd330ecc71387a2d/src%2Ftest%2Fmir-opt%2Finline%2Finline_generator.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_generator.main.Inline.diff?ref=5d7ce21b6ba31e93d7d9af71dd330ecc71387a2d", "patch": "@@ -24,15 +24,15 @@\n +         }\n +     }\n +     scope 6 (inlined g::{closure#0}) {   // at $DIR/inline-generator.rs:9:14: 9:46\n-+         debug a => _11;                  // in scope 6 at $DIR/inline-generator.rs:+7:6: +7:7\n-+         let mut _8: i32;                 // in scope 6 at $DIR/inline-generator.rs:+7:17: +7:39\n-+         let mut _9: bool;                // in scope 6 at $DIR/inline-generator.rs:+7:20: +7:21\n-+         let mut _10: bool;               // in scope 6 at $DIR/inline-generator.rs:+7:9: +7:9\n-+         let _11: bool;                   // in scope 6 at $DIR/inline-generator.rs:+7:6: +7:7\n-+         let mut _12: u32;                // in scope 6 at $DIR/inline-generator.rs:+7:5: +7:8\n-+         let mut _13: &mut [generator@$DIR/inline-generator.rs:15:5: 15:8]; // in scope 6 at $DIR/inline-generator.rs:+7:5: +7:8\n-+         let mut _14: &mut [generator@$DIR/inline-generator.rs:15:5: 15:8]; // in scope 6 at $DIR/inline-generator.rs:+7:5: +7:8\n-+         let mut _15: &mut [generator@$DIR/inline-generator.rs:15:5: 15:8]; // in scope 6 at $DIR/inline-generator.rs:+7:5: +7:8\n++         debug a => _11;                  // in scope 6 at $DIR/inline-generator.rs:15:6: 15:7\n++         let mut _8: i32;                 // in scope 6 at $DIR/inline-generator.rs:15:17: 15:39\n++         let mut _9: bool;                // in scope 6 at $DIR/inline-generator.rs:15:20: 15:21\n++         let mut _10: bool;               // in scope 6 at $DIR/inline-generator.rs:15:9: 15:9\n++         let _11: bool;                   // in scope 6 at $DIR/inline-generator.rs:15:6: 15:7\n++         let mut _12: u32;                // in scope 6 at $DIR/inline-generator.rs:15:5: 15:8\n++         let mut _13: &mut [generator@$DIR/inline-generator.rs:15:5: 15:8]; // in scope 6 at $DIR/inline-generator.rs:15:5: 15:8\n++         let mut _14: &mut [generator@$DIR/inline-generator.rs:15:5: 15:8]; // in scope 6 at $DIR/inline-generator.rs:15:5: 15:8\n++         let mut _15: &mut [generator@$DIR/inline-generator.rs:15:5: 15:8]; // in scope 6 at $DIR/inline-generator.rs:15:5: 15:8\n +     }\n   \n       bb0: {\n@@ -47,8 +47,8 @@\n -     }\n - \n -     bb1: {\n-+         Deinit(_4);                      // scope 2 at $DIR/inline-generator.rs:+7:5: +7:41\n-+         discriminant(_4) = 0;            // scope 2 at $DIR/inline-generator.rs:+7:5: +7:41\n++         Deinit(_4);                      // scope 2 at $DIR/inline-generator.rs:15:5: 15:41\n++         discriminant(_4) = 0;            // scope 2 at $DIR/inline-generator.rs:15:5: 15:41\n           _3 = &mut _4;                    // scope 0 at $DIR/inline-generator.rs:+1:23: +1:31\n -         _2 = Pin::<&mut [generator@$DIR/inline-generator.rs:15:5: 15:8]>::new(move _3) -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/inline-generator.rs:+1:14: +1:32\n -                                          // mir::Constant\n@@ -76,11 +76,11 @@\n +         StorageLive(_10);                // scope 0 at $DIR/inline-generator.rs:+1:14: +1:46\n +         StorageLive(_11);                // scope 0 at $DIR/inline-generator.rs:+1:14: +1:46\n +         StorageLive(_12);                // scope 0 at $DIR/inline-generator.rs:+1:14: +1:46\n-+         StorageLive(_13);                // scope 6 at $DIR/inline-generator.rs:+7:5: +7:8\n-+         _13 = deref_copy (_2.0: &mut [generator@$DIR/inline-generator.rs:15:5: 15:8]); // scope 6 at $DIR/inline-generator.rs:+7:5: +7:8\n-+         _12 = discriminant((*_13));      // scope 6 at $DIR/inline-generator.rs:+7:5: +7:8\n-+         StorageDead(_13);                // scope 6 at $DIR/inline-generator.rs:+7:5: +7:8\n-+         switchInt(move _12) -> [0_u32: bb3, 1_u32: bb8, 3_u32: bb7, otherwise: bb9]; // scope 6 at $DIR/inline-generator.rs:+7:5: +7:8\n++         StorageLive(_13);                // scope 6 at $DIR/inline-generator.rs:15:5: 15:8\n++         _13 = deref_copy (_2.0: &mut [generator@$DIR/inline-generator.rs:15:5: 15:8]); // scope 6 at $DIR/inline-generator.rs:15:5: 15:8\n++         _12 = discriminant((*_13));      // scope 6 at $DIR/inline-generator.rs:15:5: 15:8\n++         StorageDead(_13);                // scope 6 at $DIR/inline-generator.rs:15:5: 15:8\n++         switchInt(move _12) -> [0_u32: bb3, 1_u32: bb8, 3_u32: bb7, otherwise: bb9]; // scope 6 at $DIR/inline-generator.rs:15:5: 15:8\n       }\n   \n -     bb3: {\n@@ -102,55 +102,55 @@\n +     }\n + \n +     bb3: {\n-+         _11 = move _7;                   // scope 6 at $DIR/inline-generator.rs:+7:5: +7:8\n-+         StorageLive(_8);                 // scope 6 at $DIR/inline-generator.rs:+7:17: +7:39\n-+         StorageLive(_9);                 // scope 6 at $DIR/inline-generator.rs:+7:20: +7:21\n-+         _9 = _11;                        // scope 6 at $DIR/inline-generator.rs:+7:20: +7:21\n-+         switchInt(move _9) -> [false: bb5, otherwise: bb4]; // scope 6 at $DIR/inline-generator.rs:+7:20: +7:21\n++         _11 = move _7;                   // scope 6 at $DIR/inline-generator.rs:15:5: 15:8\n++         StorageLive(_8);                 // scope 6 at $DIR/inline-generator.rs:15:17: 15:39\n++         StorageLive(_9);                 // scope 6 at $DIR/inline-generator.rs:15:20: 15:21\n++         _9 = _11;                        // scope 6 at $DIR/inline-generator.rs:15:20: 15:21\n++         switchInt(move _9) -> [false: bb5, otherwise: bb4]; // scope 6 at $DIR/inline-generator.rs:15:20: 15:21\n +     }\n + \n +     bb4: {\n-+         _8 = const 7_i32;                // scope 6 at $DIR/inline-generator.rs:+7:24: +7:25\n-+         goto -> bb6;                     // scope 6 at $DIR/inline-generator.rs:+7:17: +7:39\n++         _8 = const 7_i32;                // scope 6 at $DIR/inline-generator.rs:15:24: 15:25\n++         goto -> bb6;                     // scope 6 at $DIR/inline-generator.rs:15:17: 15:39\n +     }\n + \n +     bb5: {\n-+         _8 = const 13_i32;               // scope 6 at $DIR/inline-generator.rs:+7:35: +7:37\n-+         goto -> bb6;                     // scope 6 at $DIR/inline-generator.rs:+7:17: +7:39\n++         _8 = const 13_i32;               // scope 6 at $DIR/inline-generator.rs:15:35: 15:37\n++         goto -> bb6;                     // scope 6 at $DIR/inline-generator.rs:15:17: 15:39\n +     }\n + \n +     bb6: {\n-+         StorageDead(_9);                 // scope 6 at $DIR/inline-generator.rs:+7:38: +7:39\n-+         Deinit(_1);                      // scope 6 at $DIR/inline-generator.rs:+7:11: +7:39\n-+         ((_1 as Yielded).0: i32) = move _8; // scope 6 at $DIR/inline-generator.rs:+7:11: +7:39\n-+         discriminant(_1) = 0;            // scope 6 at $DIR/inline-generator.rs:+7:11: +7:39\n-+         StorageLive(_14);                // scope 6 at $DIR/inline-generator.rs:+7:11: +7:39\n-+         _14 = deref_copy (_2.0: &mut [generator@$DIR/inline-generator.rs:15:5: 15:8]); // scope 6 at $DIR/inline-generator.rs:+7:11: +7:39\n-+         discriminant((*_14)) = 3;        // scope 6 at $DIR/inline-generator.rs:+7:11: +7:39\n-+         StorageDead(_14);                // scope 6 at $DIR/inline-generator.rs:+7:11: +7:39\n-+         goto -> bb1;                     // scope 0 at $DIR/inline-generator.rs:+7:11: +7:39\n++         StorageDead(_9);                 // scope 6 at $DIR/inline-generator.rs:15:38: 15:39\n++         Deinit(_1);                      // scope 6 at $DIR/inline-generator.rs:15:11: 15:39\n++         ((_1 as Yielded).0: i32) = move _8; // scope 6 at $DIR/inline-generator.rs:15:11: 15:39\n++         discriminant(_1) = 0;            // scope 6 at $DIR/inline-generator.rs:15:11: 15:39\n++         StorageLive(_14);                // scope 6 at $DIR/inline-generator.rs:15:11: 15:39\n++         _14 = deref_copy (_2.0: &mut [generator@$DIR/inline-generator.rs:15:5: 15:8]); // scope 6 at $DIR/inline-generator.rs:15:11: 15:39\n++         discriminant((*_14)) = 3;        // scope 6 at $DIR/inline-generator.rs:15:11: 15:39\n++         StorageDead(_14);                // scope 6 at $DIR/inline-generator.rs:15:11: 15:39\n++         goto -> bb1;                     // scope 0 at $DIR/inline-generator.rs:15:11: 15:39\n +     }\n + \n +     bb7: {\n-+         StorageLive(_8);                 // scope 6 at $DIR/inline-generator.rs:+7:5: +7:8\n-+         _10 = move _7;                   // scope 6 at $DIR/inline-generator.rs:+7:5: +7:8\n-+         StorageDead(_8);                 // scope 6 at $DIR/inline-generator.rs:+7:38: +7:39\n-+         Deinit(_1);                      // scope 6 at $DIR/inline-generator.rs:+7:8: +7:8\n-+         ((_1 as Complete).0: bool) = move _10; // scope 6 at $DIR/inline-generator.rs:+7:8: +7:8\n-+         discriminant(_1) = 1;            // scope 6 at $DIR/inline-generator.rs:+7:8: +7:8\n-+         StorageLive(_15);                // scope 6 at $DIR/inline-generator.rs:+7:8: +7:8\n-+         _15 = deref_copy (_2.0: &mut [generator@$DIR/inline-generator.rs:15:5: 15:8]); // scope 6 at $DIR/inline-generator.rs:+7:8: +7:8\n-+         discriminant((*_15)) = 1;        // scope 6 at $DIR/inline-generator.rs:+7:8: +7:8\n-+         StorageDead(_15);                // scope 6 at $DIR/inline-generator.rs:+7:8: +7:8\n-+         goto -> bb1;                     // scope 0 at $DIR/inline-generator.rs:+7:8: +7:8\n++         StorageLive(_8);                 // scope 6 at $DIR/inline-generator.rs:15:5: 15:8\n++         _10 = move _7;                   // scope 6 at $DIR/inline-generator.rs:15:5: 15:8\n++         StorageDead(_8);                 // scope 6 at $DIR/inline-generator.rs:15:38: 15:39\n++         Deinit(_1);                      // scope 6 at $DIR/inline-generator.rs:15:8: 15:8\n++         ((_1 as Complete).0: bool) = move _10; // scope 6 at $DIR/inline-generator.rs:15:8: 15:8\n++         discriminant(_1) = 1;            // scope 6 at $DIR/inline-generator.rs:15:8: 15:8\n++         StorageLive(_15);                // scope 6 at $DIR/inline-generator.rs:15:8: 15:8\n++         _15 = deref_copy (_2.0: &mut [generator@$DIR/inline-generator.rs:15:5: 15:8]); // scope 6 at $DIR/inline-generator.rs:15:8: 15:8\n++         discriminant((*_15)) = 1;        // scope 6 at $DIR/inline-generator.rs:15:8: 15:8\n++         StorageDead(_15);                // scope 6 at $DIR/inline-generator.rs:15:8: 15:8\n++         goto -> bb1;                     // scope 0 at $DIR/inline-generator.rs:15:8: 15:8\n +     }\n + \n +     bb8: {\n-+         assert(const false, \"generator resumed after completion\") -> [success: bb8, unwind: bb2]; // scope 6 at $DIR/inline-generator.rs:+7:5: +7:8\n++         assert(const false, \"generator resumed after completion\") -> [success: bb8, unwind: bb2]; // scope 6 at $DIR/inline-generator.rs:15:5: 15:8\n +     }\n + \n +     bb9: {\n-+         unreachable;                     // scope 6 at $DIR/inline-generator.rs:+7:5: +7:8\n++         unreachable;                     // scope 6 at $DIR/inline-generator.rs:15:5: 15:8\n       }\n   }\n   "}, {"sha": "361b02715266fb3ba1884d5857ee45db4e189900", "filename": "src/test/mir-opt/inline/inline_options.main.Inline.after.mir", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5d7ce21b6ba31e93d7d9af71dd330ecc71387a2d/src%2Ftest%2Fmir-opt%2Finline%2Finline_options.main.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/5d7ce21b6ba31e93d7d9af71dd330ecc71387a2d/src%2Ftest%2Fmir-opt%2Finline%2Finline_options.main.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_options.main.Inline.after.mir?ref=5d7ce21b6ba31e93d7d9af71dd330ecc71387a2d", "patch": "@@ -5,9 +5,9 @@ fn main() -> () {\n     let _1: ();                          // in scope 0 at $DIR/inline-options.rs:+1:5: +1:18\n     let _2: ();                          // in scope 0 at $DIR/inline-options.rs:+2:5: +2:21\n     scope 1 (inlined inlined::<u32>) {   // at $DIR/inline-options.rs:10:5: 10:21\n-        let _3: ();                      // in scope 1 at $DIR/inline-options.rs:+8:23: +8:26\n-        let _4: ();                      // in scope 1 at $DIR/inline-options.rs:+8:28: +8:31\n-        let _5: ();                      // in scope 1 at $DIR/inline-options.rs:+8:33: +8:36\n+        let _3: ();                      // in scope 1 at $DIR/inline-options.rs:16:23: 16:26\n+        let _4: ();                      // in scope 1 at $DIR/inline-options.rs:16:28: 16:31\n+        let _5: ();                      // in scope 1 at $DIR/inline-options.rs:16:33: 16:36\n     }\n \n     bb0: {\n@@ -21,33 +21,33 @@ fn main() -> () {\n     bb1: {\n         StorageDead(_1);                 // scope 0 at $DIR/inline-options.rs:+1:18: +1:19\n         StorageLive(_2);                 // scope 0 at $DIR/inline-options.rs:+2:5: +2:21\n-        StorageLive(_3);                 // scope 1 at $DIR/inline-options.rs:+8:23: +8:26\n-        _3 = g() -> bb2;                 // scope 1 at $DIR/inline-options.rs:+8:23: +8:26\n+        StorageLive(_3);                 // scope 1 at $DIR/inline-options.rs:16:23: 16:26\n+        _3 = g() -> bb2;                 // scope 1 at $DIR/inline-options.rs:16:23: 16:26\n                                          // mir::Constant\n                                          // + span: $DIR/inline-options.rs:16:23: 16:24\n                                          // + literal: Const { ty: fn() {g}, val: Value(<ZST>) }\n     }\n \n     bb2: {\n-        StorageDead(_3);                 // scope 1 at $DIR/inline-options.rs:+8:26: +8:27\n-        StorageLive(_4);                 // scope 1 at $DIR/inline-options.rs:+8:28: +8:31\n-        _4 = g() -> bb3;                 // scope 1 at $DIR/inline-options.rs:+8:28: +8:31\n+        StorageDead(_3);                 // scope 1 at $DIR/inline-options.rs:16:26: 16:27\n+        StorageLive(_4);                 // scope 1 at $DIR/inline-options.rs:16:28: 16:31\n+        _4 = g() -> bb3;                 // scope 1 at $DIR/inline-options.rs:16:28: 16:31\n                                          // mir::Constant\n                                          // + span: $DIR/inline-options.rs:16:28: 16:29\n                                          // + literal: Const { ty: fn() {g}, val: Value(<ZST>) }\n     }\n \n     bb3: {\n-        StorageDead(_4);                 // scope 1 at $DIR/inline-options.rs:+8:31: +8:32\n-        StorageLive(_5);                 // scope 1 at $DIR/inline-options.rs:+8:33: +8:36\n-        _5 = g() -> bb4;                 // scope 1 at $DIR/inline-options.rs:+8:33: +8:36\n+        StorageDead(_4);                 // scope 1 at $DIR/inline-options.rs:16:31: 16:32\n+        StorageLive(_5);                 // scope 1 at $DIR/inline-options.rs:16:33: 16:36\n+        _5 = g() -> bb4;                 // scope 1 at $DIR/inline-options.rs:16:33: 16:36\n                                          // mir::Constant\n                                          // + span: $DIR/inline-options.rs:16:33: 16:34\n                                          // + literal: Const { ty: fn() {g}, val: Value(<ZST>) }\n     }\n \n     bb4: {\n-        StorageDead(_5);                 // scope 1 at $DIR/inline-options.rs:+8:36: +8:37\n+        StorageDead(_5);                 // scope 1 at $DIR/inline-options.rs:16:36: 16:37\n         StorageDead(_2);                 // scope 0 at $DIR/inline-options.rs:+2:21: +2:22\n         _0 = const ();                   // scope 0 at $DIR/inline-options.rs:+0:11: +3:2\n         return;                          // scope 0 at $DIR/inline-options.rs:+3:2: +3:2"}, {"sha": "989fe2785869c7b17a901f1740e44a350e0e1ae4", "filename": "src/test/mir-opt/inline/inline_retag.bar.Inline.after.mir", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/5d7ce21b6ba31e93d7d9af71dd330ecc71387a2d/src%2Ftest%2Fmir-opt%2Finline%2Finline_retag.bar.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/5d7ce21b6ba31e93d7d9af71dd330ecc71387a2d/src%2Ftest%2Fmir-opt%2Finline%2Finline_retag.bar.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_retag.bar.Inline.after.mir?ref=5d7ce21b6ba31e93d7d9af71dd330ecc71387a2d", "patch": "@@ -15,10 +15,10 @@ fn bar() -> bool {\n         let mut _9: &i32;                // in scope 1 at $DIR/inline-retag.rs:+2:11: +2:14\n         let mut _10: &i32;               // in scope 1 at $DIR/inline-retag.rs:+2:7: +2:9\n         scope 2 (inlined foo) {          // at $DIR/inline-retag.rs:12:5: 12:15\n-            debug x => _3;               // in scope 2 at $DIR/inline-retag.rs:+6:8: +6:9\n-            debug y => _6;               // in scope 2 at $DIR/inline-retag.rs:+6:17: +6:18\n-            let mut _11: i32;            // in scope 2 at $DIR/inline-retag.rs:+7:5: +7:7\n-            let mut _12: i32;            // in scope 2 at $DIR/inline-retag.rs:+7:11: +7:13\n+            debug x => _3;               // in scope 2 at $DIR/inline-retag.rs:16:8: 16:9\n+            debug y => _6;               // in scope 2 at $DIR/inline-retag.rs:16:17: 16:18\n+            let mut _11: i32;            // in scope 2 at $DIR/inline-retag.rs:17:5: 17:7\n+            let mut _12: i32;            // in scope 2 at $DIR/inline-retag.rs:17:11: 17:13\n         }\n     }\n \n@@ -52,15 +52,15 @@ fn bar() -> bool {\n         Retag(_7);                       // scope 1 at $DIR/inline-retag.rs:+2:11: +2:14\n         _6 = &(*_7);                     // scope 1 at $DIR/inline-retag.rs:+2:11: +2:14\n         Retag(_6);                       // scope 1 at $DIR/inline-retag.rs:+2:11: +2:14\n-        Retag(_3);                       // scope 2 at $DIR/inline-retag.rs:+6:1: +8:2\n-        Retag(_6);                       // scope 2 at $DIR/inline-retag.rs:+6:1: +8:2\n-        StorageLive(_11);                // scope 2 at $DIR/inline-retag.rs:+7:5: +7:7\n-        _11 = (*_3);                     // scope 2 at $DIR/inline-retag.rs:+7:5: +7:7\n-        StorageLive(_12);                // scope 2 at $DIR/inline-retag.rs:+7:11: +7:13\n-        _12 = (*_6);                     // scope 2 at $DIR/inline-retag.rs:+7:11: +7:13\n-        _0 = Eq(move _11, move _12);     // scope 2 at $DIR/inline-retag.rs:+7:5: +7:13\n-        StorageDead(_12);                // scope 2 at $DIR/inline-retag.rs:+7:12: +7:13\n-        StorageDead(_11);                // scope 2 at $DIR/inline-retag.rs:+7:12: +7:13\n+        Retag(_3);                       // scope 2 at $DIR/inline-retag.rs:16:1: 18:2\n+        Retag(_6);                       // scope 2 at $DIR/inline-retag.rs:16:1: 18:2\n+        StorageLive(_11);                // scope 2 at $DIR/inline-retag.rs:17:5: 17:7\n+        _11 = (*_3);                     // scope 2 at $DIR/inline-retag.rs:17:5: 17:7\n+        StorageLive(_12);                // scope 2 at $DIR/inline-retag.rs:17:11: 17:13\n+        _12 = (*_6);                     // scope 2 at $DIR/inline-retag.rs:17:11: 17:13\n+        _0 = Eq(move _11, move _12);     // scope 2 at $DIR/inline-retag.rs:17:5: 17:13\n+        StorageDead(_12);                // scope 2 at $DIR/inline-retag.rs:17:12: 17:13\n+        StorageDead(_11);                // scope 2 at $DIR/inline-retag.rs:17:12: 17:13\n         StorageDead(_6);                 // scope 1 at $DIR/inline-retag.rs:+2:14: +2:15\n         StorageDead(_3);                 // scope 1 at $DIR/inline-retag.rs:+2:14: +2:15\n         StorageDead(_2);                 // scope 1 at $DIR/inline-retag.rs:+2:14: +2:15"}, {"sha": "fdf2a1e1ff93fe92c1877b07a8298303af064ac5", "filename": "src/test/mir-opt/inline/inline_specialization.main.Inline.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d7ce21b6ba31e93d7d9af71dd330ecc71387a2d/src%2Ftest%2Fmir-opt%2Finline%2Finline_specialization.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5d7ce21b6ba31e93d7d9af71dd330ecc71387a2d/src%2Ftest%2Fmir-opt%2Finline%2Finline_specialization.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_specialization.main.Inline.diff?ref=5d7ce21b6ba31e93d7d9af71dd330ecc71387a2d", "patch": "@@ -19,7 +19,7 @@\n -     }\n - \n -     bb1: {\n-+         _1 = const 123_u32;              // scope 2 at $DIR/inline-specialization.rs:+10:31: +10:34\n++         _1 = const 123_u32;              // scope 2 at $DIR/inline-specialization.rs:14:31: 14:34\n           _0 = const ();                   // scope 0 at $DIR/inline-specialization.rs:+0:11: +2:2\n           StorageDead(_1);                 // scope 0 at $DIR/inline-specialization.rs:+2:1: +2:2\n           return;                          // scope 0 at $DIR/inline-specialization.rs:+2:2: +2:2"}, {"sha": "b8896430d221a8b73fc971c635b42743ead184f9", "filename": "src/test/mir-opt/inline/inline_trait_method_2.test2.Inline.after.mir", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5d7ce21b6ba31e93d7d9af71dd330ecc71387a2d/src%2Ftest%2Fmir-opt%2Finline%2Finline_trait_method_2.test2.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/5d7ce21b6ba31e93d7d9af71dd330ecc71387a2d/src%2Ftest%2Fmir-opt%2Finline%2Finline_trait_method_2.test2.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_trait_method_2.test2.Inline.after.mir?ref=5d7ce21b6ba31e93d7d9af71dd330ecc71387a2d", "patch": "@@ -6,8 +6,8 @@ fn test2(_1: &dyn X) -> bool {\n     let mut _2: &dyn X;                  // in scope 0 at $DIR/inline-trait-method_2.rs:+1:10: +1:11\n     let mut _3: &dyn X;                  // in scope 0 at $DIR/inline-trait-method_2.rs:+1:10: +1:11\n     scope 1 (inlined test) {             // at $DIR/inline-trait-method_2.rs:5:5: 5:12\n-        debug x => _2;                   // in scope 1 at $DIR/inline-trait-method_2.rs:+5:9: +5:10\n-        let mut _4: &dyn X;              // in scope 1 at $DIR/inline-trait-method_2.rs:+6:5: +6:10\n+        debug x => _2;                   // in scope 1 at $DIR/inline-trait-method_2.rs:9:9: 9:10\n+        let mut _4: &dyn X;              // in scope 1 at $DIR/inline-trait-method_2.rs:10:5: 10:10\n     }\n \n     bb0: {\n@@ -16,16 +16,16 @@ fn test2(_1: &dyn X) -> bool {\n         _3 = &(*_1);                     // scope 0 at $DIR/inline-trait-method_2.rs:+1:10: +1:11\n         _2 = move _3 as &dyn X (Pointer(Unsize)); // scope 0 at $DIR/inline-trait-method_2.rs:+1:10: +1:11\n         StorageDead(_3);                 // scope 0 at $DIR/inline-trait-method_2.rs:+1:10: +1:11\n-        StorageLive(_4);                 // scope 1 at $DIR/inline-trait-method_2.rs:+6:5: +6:10\n-        _4 = _2;                         // scope 1 at $DIR/inline-trait-method_2.rs:+6:5: +6:10\n-        _0 = <dyn X as X>::y(move _4) -> bb1; // scope 1 at $DIR/inline-trait-method_2.rs:+6:5: +6:10\n+        StorageLive(_4);                 // scope 1 at $DIR/inline-trait-method_2.rs:10:5: 10:10\n+        _4 = _2;                         // scope 1 at $DIR/inline-trait-method_2.rs:10:5: 10:10\n+        _0 = <dyn X as X>::y(move _4) -> bb1; // scope 1 at $DIR/inline-trait-method_2.rs:10:5: 10:10\n                                          // mir::Constant\n                                          // + span: $DIR/inline-trait-method_2.rs:10:7: 10:8\n                                          // + literal: Const { ty: for<'r> fn(&'r dyn X) -> bool {<dyn X as X>::y}, val: Value(<ZST>) }\n     }\n \n     bb1: {\n-        StorageDead(_4);                 // scope 1 at $DIR/inline-trait-method_2.rs:+6:9: +6:10\n+        StorageDead(_4);                 // scope 1 at $DIR/inline-trait-method_2.rs:10:9: 10:10\n         StorageDead(_2);                 // scope 0 at $DIR/inline-trait-method_2.rs:+1:11: +1:12\n         return;                          // scope 0 at $DIR/inline-trait-method_2.rs:+2:2: +2:2\n     }"}, {"sha": "2a9a099a38d9cc6456e0b5de8204f8659c0535da", "filename": "src/test/mir-opt/lower_intrinsics.f_u64.PreCodegen.before.mir", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5d7ce21b6ba31e93d7d9af71dd330ecc71387a2d/src%2Ftest%2Fmir-opt%2Flower_intrinsics.f_u64.PreCodegen.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/5d7ce21b6ba31e93d7d9af71dd330ecc71387a2d/src%2Ftest%2Fmir-opt%2Flower_intrinsics.f_u64.PreCodegen.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_intrinsics.f_u64.PreCodegen.before.mir?ref=5d7ce21b6ba31e93d7d9af71dd330ecc71387a2d", "patch": "@@ -4,28 +4,28 @@ fn f_u64() -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/lower_intrinsics.rs:+0:16: +0:16\n     let mut _1: u64;                     // in scope 0 at $DIR/lower_intrinsics.rs:+1:5: +1:21\n     scope 1 (inlined f_dispatch::<u64>) { // at $DIR/lower_intrinsics.rs:40:5: 40:21\n-        debug t => _1;                   // in scope 1 at $DIR/lower_intrinsics.rs:+5:22: +5:23\n-        let _2: ();                      // in scope 1 at $DIR/lower_intrinsics.rs:+9:9: +9:21\n-        let mut _3: u64;                 // in scope 1 at $DIR/lower_intrinsics.rs:+9:19: +9:20\n+        debug t => _1;                   // in scope 1 at $DIR/lower_intrinsics.rs:44:22: 44:23\n+        let _2: ();                      // in scope 1 at $DIR/lower_intrinsics.rs:48:9: 48:21\n+        let mut _3: u64;                 // in scope 1 at $DIR/lower_intrinsics.rs:48:19: 48:20\n         scope 2 (inlined std::mem::size_of::<u64>) { // at $DIR/lower_intrinsics.rs:45:8: 45:32\n         }\n     }\n \n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/lower_intrinsics.rs:+1:5: +1:21\n         _1 = const 0_u64;                // scope 0 at $DIR/lower_intrinsics.rs:+1:5: +1:21\n-        StorageLive(_2);                 // scope 1 at $DIR/lower_intrinsics.rs:+9:9: +9:21\n-        StorageLive(_3);                 // scope 1 at $DIR/lower_intrinsics.rs:+9:19: +9:20\n-        _3 = move _1;                    // scope 1 at $DIR/lower_intrinsics.rs:+9:19: +9:20\n-        _2 = f_non_zst::<u64>(move _3) -> bb1; // scope 1 at $DIR/lower_intrinsics.rs:+9:9: +9:21\n+        StorageLive(_2);                 // scope 1 at $DIR/lower_intrinsics.rs:48:9: 48:21\n+        StorageLive(_3);                 // scope 1 at $DIR/lower_intrinsics.rs:48:19: 48:20\n+        _3 = move _1;                    // scope 1 at $DIR/lower_intrinsics.rs:48:19: 48:20\n+        _2 = f_non_zst::<u64>(move _3) -> bb1; // scope 1 at $DIR/lower_intrinsics.rs:48:9: 48:21\n                                          // mir::Constant\n                                          // + span: $DIR/lower_intrinsics.rs:48:9: 48:18\n                                          // + literal: Const { ty: fn(u64) {f_non_zst::<u64>}, val: Value(<ZST>) }\n     }\n \n     bb1: {\n-        StorageDead(_3);                 // scope 1 at $DIR/lower_intrinsics.rs:+9:20: +9:21\n-        StorageDead(_2);                 // scope 1 at $DIR/lower_intrinsics.rs:+9:21: +9:22\n+        StorageDead(_3);                 // scope 1 at $DIR/lower_intrinsics.rs:48:20: 48:21\n+        StorageDead(_2);                 // scope 1 at $DIR/lower_intrinsics.rs:48:21: 48:22\n         StorageDead(_1);                 // scope 0 at $DIR/lower_intrinsics.rs:+1:5: +1:21\n         return;                          // scope 0 at $DIR/lower_intrinsics.rs:+2:2: +2:2\n     }"}, {"sha": "5783822f6b54485f0db291e21d62d340a2d40d3f", "filename": "src/test/mir-opt/lower_intrinsics.f_unit.PreCodegen.before.mir", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5d7ce21b6ba31e93d7d9af71dd330ecc71387a2d/src%2Ftest%2Fmir-opt%2Flower_intrinsics.f_unit.PreCodegen.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/5d7ce21b6ba31e93d7d9af71dd330ecc71387a2d/src%2Ftest%2Fmir-opt%2Flower_intrinsics.f_unit.PreCodegen.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_intrinsics.f_unit.PreCodegen.before.mir?ref=5d7ce21b6ba31e93d7d9af71dd330ecc71387a2d", "patch": "@@ -4,26 +4,26 @@ fn f_unit() -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/lower_intrinsics.rs:+0:17: +0:17\n     let mut _1: ();                      // in scope 0 at $DIR/lower_intrinsics.rs:+1:16: +1:18\n     scope 1 (inlined f_dispatch::<()>) { // at $DIR/lower_intrinsics.rs:34:5: 34:19\n-        debug t => _1;                   // in scope 1 at $DIR/lower_intrinsics.rs:+11:22: +11:23\n-        let _2: ();                      // in scope 1 at $DIR/lower_intrinsics.rs:+13:9: +13:17\n-        let mut _3: ();                  // in scope 1 at $DIR/lower_intrinsics.rs:+13:15: +13:16\n+        debug t => _1;                   // in scope 1 at $DIR/lower_intrinsics.rs:44:22: 44:23\n+        let _2: ();                      // in scope 1 at $DIR/lower_intrinsics.rs:46:9: 46:17\n+        let mut _3: ();                  // in scope 1 at $DIR/lower_intrinsics.rs:46:15: 46:16\n         scope 2 (inlined std::mem::size_of::<()>) { // at $DIR/lower_intrinsics.rs:45:8: 45:32\n         }\n     }\n \n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/lower_intrinsics.rs:+1:16: +1:18\n-        StorageLive(_2);                 // scope 1 at $DIR/lower_intrinsics.rs:+13:9: +13:17\n-        StorageLive(_3);                 // scope 1 at $DIR/lower_intrinsics.rs:+13:15: +13:16\n-        _2 = f_zst::<()>(move _3) -> bb1; // scope 1 at $DIR/lower_intrinsics.rs:+13:9: +13:17\n+        StorageLive(_2);                 // scope 1 at $DIR/lower_intrinsics.rs:46:9: 46:17\n+        StorageLive(_3);                 // scope 1 at $DIR/lower_intrinsics.rs:46:15: 46:16\n+        _2 = f_zst::<()>(move _3) -> bb1; // scope 1 at $DIR/lower_intrinsics.rs:46:9: 46:17\n                                          // mir::Constant\n                                          // + span: $DIR/lower_intrinsics.rs:46:9: 46:14\n                                          // + literal: Const { ty: fn(()) {f_zst::<()>}, val: Value(<ZST>) }\n     }\n \n     bb1: {\n-        StorageDead(_3);                 // scope 1 at $DIR/lower_intrinsics.rs:+13:16: +13:17\n-        StorageDead(_2);                 // scope 1 at $DIR/lower_intrinsics.rs:+13:17: +13:18\n+        StorageDead(_3);                 // scope 1 at $DIR/lower_intrinsics.rs:46:16: 46:17\n+        StorageDead(_2);                 // scope 1 at $DIR/lower_intrinsics.rs:46:17: 46:18\n         StorageDead(_1);                 // scope 0 at $DIR/lower_intrinsics.rs:+1:18: +1:19\n         return;                          // scope 0 at $DIR/lower_intrinsics.rs:+2:2: +2:2\n     }"}, {"sha": "faaacc67ea81fbd0e2d2587b46cd8573b05d3d03", "filename": "src/test/mir-opt/retag.main-{closure#0}.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5d7ce21b6ba31e93d7d9af71dd330ecc71387a2d/src%2Ftest%2Fmir-opt%2Fretag.main-%7Bclosure%230%7D.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/5d7ce21b6ba31e93d7d9af71dd330ecc71387a2d/src%2Ftest%2Fmir-opt%2Fretag.main-%7Bclosure%230%7D.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretag.main-%7Bclosure%230%7D.SimplifyCfg-elaborate-drops.after.mir?ref=5d7ce21b6ba31e93d7d9af71dd330ecc71387a2d", "patch": "@@ -3,20 +3,20 @@\n fn main::{closure#0}(_1: &[closure@main::{closure#0}], _2: &i32) -> &i32 {\n     debug x => _2;                       // in scope 0 at $DIR/retag.rs:+0:32: +0:33\n     let mut _0: &i32;                    // return place in scope 0 at $DIR/retag.rs:+0:44: +0:48\n-    let _3: &i32;                        // in scope 0 at $DIR/retag.rs:+1:13: +1:15\n+    let _3: &i32;                        // in scope 0 at $DIR/retag.rs:42:13: 42:15\n     scope 1 {\n-        debug _y => _3;                  // in scope 1 at $DIR/retag.rs:+1:13: +1:15\n+        debug _y => _3;                  // in scope 1 at $DIR/retag.rs:42:13: 42:15\n     }\n \n     bb0: {\n         Retag([fn entry] _1);            // scope 0 at $DIR/retag.rs:+0:31: +0:48\n         Retag([fn entry] _2);            // scope 0 at $DIR/retag.rs:+0:31: +0:48\n-        StorageLive(_3);                 // scope 0 at $DIR/retag.rs:+1:13: +1:15\n-        _3 = _2;                         // scope 0 at $DIR/retag.rs:+1:18: +1:19\n-        Retag(_3);                       // scope 0 at $DIR/retag.rs:+1:18: +1:19\n-        _0 = _2;                         // scope 1 at $DIR/retag.rs:+2:9: +2:10\n-        Retag(_0);                       // scope 1 at $DIR/retag.rs:+2:9: +2:10\n-        StorageDead(_3);                 // scope 0 at $DIR/retag.rs:+3:5: +3:6\n+        StorageLive(_3);                 // scope 0 at $DIR/retag.rs:42:13: 42:15\n+        _3 = _2;                         // scope 0 at $DIR/retag.rs:42:18: 42:19\n+        Retag(_3);                       // scope 0 at $DIR/retag.rs:42:18: 42:19\n+        _0 = _2;                         // scope 1 at $DIR/retag.rs:43:9: 43:10\n+        Retag(_0);                       // scope 1 at $DIR/retag.rs:43:9: 43:10\n+        StorageDead(_3);                 // scope 0 at $DIR/retag.rs:44:5: 44:6\n         return;                          // scope 0 at $DIR/retag.rs:+0:48: +0:48\n     }\n }"}, {"sha": "cff9afc38f057715bd1ba0635f7c6658c8d98982", "filename": "src/test/mir-opt/simplify_arm.id_try.SimplifyArmIdentity.diff", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5d7ce21b6ba31e93d7d9af71dd330ecc71387a2d/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_try.SimplifyArmIdentity.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5d7ce21b6ba31e93d7d9af71dd330ecc71387a2d/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_try.SimplifyArmIdentity.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_try.SimplifyArmIdentity.diff?ref=5d7ce21b6ba31e93d7d9af71dd330ecc71387a2d", "patch": "@@ -23,22 +23,22 @@\n               debug t => _9;               // in scope 5 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n           }\n           scope 6 (inlined from_error::<u8, i32>) { // at $DIR/simplify-arm.rs:37:26: 37:51\n-              debug e => _8;               // in scope 6 at $DIR/simplify-arm.rs:+0:21: +0:22\n+              debug e => _8;               // in scope 6 at $DIR/simplify-arm.rs:27:21: 27:22\n           }\n       }\n       scope 3 {\n           debug v => _10;                  // in scope 3 at $DIR/simplify-arm.rs:+3:12: +3:13\n       }\n       scope 4 (inlined into_result::<u8, i32>) { // at $DIR/simplify-arm.rs:36:19: 36:33\n-          debug r => _4;                   // in scope 4 at $DIR/simplify-arm.rs:+0:22: +0:23\n+          debug r => _4;                   // in scope 4 at $DIR/simplify-arm.rs:23:22: 23:23\n       }\n   \n       bb0: {\n           StorageLive(_2);                 // scope 0 at $DIR/simplify-arm.rs:+1:9: +1:10\n           StorageLive(_3);                 // scope 0 at $DIR/simplify-arm.rs:+1:19: +1:33\n           StorageLive(_4);                 // scope 0 at $DIR/simplify-arm.rs:+1:31: +1:32\n           _4 = _1;                         // scope 0 at $DIR/simplify-arm.rs:+1:31: +1:32\n-          _3 = move _4;                    // scope 4 at $DIR/simplify-arm.rs:+0:5: +0:6\n+          _3 = move _4;                    // scope 4 at $DIR/simplify-arm.rs:24:5: 24:6\n           StorageDead(_4);                 // scope 0 at $DIR/simplify-arm.rs:+1:32: +1:33\n           _5 = discriminant(_3);           // scope 0 at $DIR/simplify-arm.rs:+1:19: +1:33\n           switchInt(move _5) -> [0_isize: bb1, 1_isize: bb3, otherwise: bb2]; // scope 0 at $DIR/simplify-arm.rs:+1:13: +1:33\n@@ -72,9 +72,9 @@\n           _9 = _6;                         // scope 2 at $DIR/simplify-arm.rs:+2:48: +2:49\n           _8 = move _9;                    // scope 5 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n           StorageDead(_9);                 // scope 2 at $DIR/simplify-arm.rs:+2:49: +2:50\n-          ((_0 as Err).0: i32) = move _8;  // scope 6 at $DIR/simplify-arm.rs:+0:9: +0:10\n-          Deinit(_0);                      // scope 6 at $DIR/simplify-arm.rs:+0:5: +0:11\n-          discriminant(_0) = 1;            // scope 6 at $DIR/simplify-arm.rs:+0:5: +0:11\n+          ((_0 as Err).0: i32) = move _8;  // scope 6 at $DIR/simplify-arm.rs:28:9: 28:10\n+          Deinit(_0);                      // scope 6 at $DIR/simplify-arm.rs:28:5: 28:11\n+          discriminant(_0) = 1;            // scope 6 at $DIR/simplify-arm.rs:28:5: 28:11\n           StorageDead(_8);                 // scope 2 at $DIR/simplify-arm.rs:+2:50: +2:51\n           StorageDead(_6);                 // scope 0 at $DIR/simplify-arm.rs:+2:50: +2:51\n           StorageDead(_3);                 // scope 0 at $DIR/simplify-arm.rs:+4:6: +4:7"}, {"sha": "9d38b93508cef1b995b693014788dac39d5f059c", "filename": "src/test/mir-opt/simplify_arm.id_try.SimplifyBranchSame.diff", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5d7ce21b6ba31e93d7d9af71dd330ecc71387a2d/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_try.SimplifyBranchSame.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5d7ce21b6ba31e93d7d9af71dd330ecc71387a2d/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_try.SimplifyBranchSame.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_try.SimplifyBranchSame.diff?ref=5d7ce21b6ba31e93d7d9af71dd330ecc71387a2d", "patch": "@@ -23,22 +23,22 @@\n               debug t => _9;               // in scope 5 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n           }\n           scope 6 (inlined from_error::<u8, i32>) { // at $DIR/simplify-arm.rs:37:26: 37:51\n-              debug e => _8;               // in scope 6 at $DIR/simplify-arm.rs:+0:21: +0:22\n+              debug e => _8;               // in scope 6 at $DIR/simplify-arm.rs:27:21: 27:22\n           }\n       }\n       scope 3 {\n           debug v => _10;                  // in scope 3 at $DIR/simplify-arm.rs:+3:12: +3:13\n       }\n       scope 4 (inlined into_result::<u8, i32>) { // at $DIR/simplify-arm.rs:36:19: 36:33\n-          debug r => _4;                   // in scope 4 at $DIR/simplify-arm.rs:+0:22: +0:23\n+          debug r => _4;                   // in scope 4 at $DIR/simplify-arm.rs:23:22: 23:23\n       }\n   \n       bb0: {\n           StorageLive(_2);                 // scope 0 at $DIR/simplify-arm.rs:+1:9: +1:10\n           StorageLive(_3);                 // scope 0 at $DIR/simplify-arm.rs:+1:19: +1:33\n           StorageLive(_4);                 // scope 0 at $DIR/simplify-arm.rs:+1:31: +1:32\n           _4 = _1;                         // scope 0 at $DIR/simplify-arm.rs:+1:31: +1:32\n-          _3 = move _4;                    // scope 4 at $DIR/simplify-arm.rs:+0:5: +0:6\n+          _3 = move _4;                    // scope 4 at $DIR/simplify-arm.rs:24:5: 24:6\n           StorageDead(_4);                 // scope 0 at $DIR/simplify-arm.rs:+1:32: +1:33\n           _5 = discriminant(_3);           // scope 0 at $DIR/simplify-arm.rs:+1:19: +1:33\n           switchInt(move _5) -> [0_isize: bb1, 1_isize: bb3, otherwise: bb2]; // scope 0 at $DIR/simplify-arm.rs:+1:13: +1:33\n@@ -72,9 +72,9 @@\n           _9 = _6;                         // scope 2 at $DIR/simplify-arm.rs:+2:48: +2:49\n           _8 = move _9;                    // scope 5 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n           StorageDead(_9);                 // scope 2 at $DIR/simplify-arm.rs:+2:49: +2:50\n-          ((_0 as Err).0: i32) = move _8;  // scope 6 at $DIR/simplify-arm.rs:+0:9: +0:10\n-          Deinit(_0);                      // scope 6 at $DIR/simplify-arm.rs:+0:5: +0:11\n-          discriminant(_0) = 1;            // scope 6 at $DIR/simplify-arm.rs:+0:5: +0:11\n+          ((_0 as Err).0: i32) = move _8;  // scope 6 at $DIR/simplify-arm.rs:28:9: 28:10\n+          Deinit(_0);                      // scope 6 at $DIR/simplify-arm.rs:28:5: 28:11\n+          discriminant(_0) = 1;            // scope 6 at $DIR/simplify-arm.rs:28:5: 28:11\n           StorageDead(_8);                 // scope 2 at $DIR/simplify-arm.rs:+2:50: +2:51\n           StorageDead(_6);                 // scope 0 at $DIR/simplify-arm.rs:+2:50: +2:51\n           StorageDead(_3);                 // scope 0 at $DIR/simplify-arm.rs:+4:6: +4:7"}, {"sha": "fe69d320384b024117ab58733eaf5418d2c18980", "filename": "src/test/mir-opt/simplify_try.try_identity.DestinationPropagation.diff", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5d7ce21b6ba31e93d7d9af71dd330ecc71387a2d/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.DestinationPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5d7ce21b6ba31e93d7d9af71dd330ecc71387a2d/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.DestinationPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.DestinationPropagation.diff?ref=5d7ce21b6ba31e93d7d9af71dd330ecc71387a2d", "patch": "@@ -24,30 +24,30 @@\n               debug t => _9;               // in scope 5 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n           }\n           scope 6 (inlined from_error::<u32, i32>) { // at $DIR/simplify_try.rs:22:26: 22:51\n-              debug e => _8;               // in scope 6 at $DIR/simplify_try.rs:+0:21: +0:22\n+              debug e => _8;               // in scope 6 at $DIR/simplify_try.rs:12:21: 12:22\n           }\n       }\n       scope 3 {\n -         debug v => _10;                  // in scope 3 at $DIR/simplify_try.rs:+3:12: +3:13\n +         debug v => ((_0 as Ok).0: u32);  // in scope 3 at $DIR/simplify_try.rs:+3:12: +3:13\n       }\n       scope 4 (inlined into_result::<u32, i32>) { // at $DIR/simplify_try.rs:21:19: 21:33\n--         debug r => _4;                   // in scope 4 at $DIR/simplify_try.rs:+0:22: +0:23\n-+         debug r => _3;                   // in scope 4 at $DIR/simplify_try.rs:+0:22: +0:23\n+-         debug r => _4;                   // in scope 4 at $DIR/simplify_try.rs:8:22: 8:23\n++         debug r => _3;                   // in scope 4 at $DIR/simplify_try.rs:8:22: 8:23\n       }\n   \n       bb0: {\n -         StorageLive(_2);                 // scope 0 at $DIR/simplify_try.rs:+1:9: +1:10\n -         StorageLive(_3);                 // scope 0 at $DIR/simplify_try.rs:+1:19: +1:33\n -         StorageLive(_4);                 // scope 0 at $DIR/simplify_try.rs:+1:31: +1:32\n -         _4 = _1;                         // scope 0 at $DIR/simplify_try.rs:+1:31: +1:32\n--         _3 = move _4;                    // scope 4 at $DIR/simplify_try.rs:+0:5: +0:6\n+-         _3 = move _4;                    // scope 4 at $DIR/simplify_try.rs:9:5: 9:6\n -         StorageDead(_4);                 // scope 0 at $DIR/simplify_try.rs:+1:32: +1:33\n +         nop;                             // scope 0 at $DIR/simplify_try.rs:+1:9: +1:10\n +         nop;                             // scope 0 at $DIR/simplify_try.rs:+1:19: +1:33\n +         nop;                             // scope 0 at $DIR/simplify_try.rs:+1:31: +1:32\n +         _3 = _1;                         // scope 0 at $DIR/simplify_try.rs:+1:31: +1:32\n-+         nop;                             // scope 4 at $DIR/simplify_try.rs:+0:5: +0:6\n++         nop;                             // scope 4 at $DIR/simplify_try.rs:9:5: 9:6\n +         nop;                             // scope 0 at $DIR/simplify_try.rs:+1:32: +1:33\n           _5 = discriminant(_3);           // scope 0 at $DIR/simplify_try.rs:+1:19: +1:33\n           switchInt(move _5) -> [0_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/simplify_try.rs:+1:13: +1:33\n@@ -87,9 +87,9 @@\n           nop;                             // scope 2 at $DIR/simplify_try.rs:+2:48: +2:49\n           nop;                             // scope 5 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n           StorageDead(_9);                 // scope 2 at $DIR/simplify_try.rs:+2:49: +2:50\n-          nop;                             // scope 6 at $DIR/simplify_try.rs:+0:9: +0:10\n-          Deinit(_0);                      // scope 6 at $DIR/simplify_try.rs:+0:5: +0:11\n-          discriminant(_0) = 1;            // scope 6 at $DIR/simplify_try.rs:+0:5: +0:11\n+          nop;                             // scope 6 at $DIR/simplify_try.rs:13:9: 13:10\n+          Deinit(_0);                      // scope 6 at $DIR/simplify_try.rs:13:5: 13:11\n+          discriminant(_0) = 1;            // scope 6 at $DIR/simplify_try.rs:13:5: 13:11\n           StorageDead(_8);                 // scope 2 at $DIR/simplify_try.rs:+2:50: +2:51\n           StorageDead(_6);                 // scope 0 at $DIR/simplify_try.rs:+2:50: +2:51\n -         StorageDead(_3);                 // scope 0 at $DIR/simplify_try.rs:+4:6: +4:7"}, {"sha": "e2cdcafc0ba52372c2a103383ab5732ad0706980", "filename": "src/test/mir-opt/simplify_try.try_identity.SimplifyArmIdentity.diff", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5d7ce21b6ba31e93d7d9af71dd330ecc71387a2d/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyArmIdentity.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5d7ce21b6ba31e93d7d9af71dd330ecc71387a2d/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyArmIdentity.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyArmIdentity.diff?ref=5d7ce21b6ba31e93d7d9af71dd330ecc71387a2d", "patch": "@@ -23,22 +23,22 @@\n               debug t => _9;               // in scope 5 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n           }\n           scope 6 (inlined from_error::<u32, i32>) { // at $DIR/simplify_try.rs:22:26: 22:51\n-              debug e => _8;               // in scope 6 at $DIR/simplify_try.rs:+0:21: +0:22\n+              debug e => _8;               // in scope 6 at $DIR/simplify_try.rs:12:21: 12:22\n           }\n       }\n       scope 3 {\n           debug v => _10;                  // in scope 3 at $DIR/simplify_try.rs:+3:12: +3:13\n       }\n       scope 4 (inlined into_result::<u32, i32>) { // at $DIR/simplify_try.rs:21:19: 21:33\n-          debug r => _4;                   // in scope 4 at $DIR/simplify_try.rs:+0:22: +0:23\n+          debug r => _4;                   // in scope 4 at $DIR/simplify_try.rs:8:22: 8:23\n       }\n   \n       bb0: {\n           StorageLive(_2);                 // scope 0 at $DIR/simplify_try.rs:+1:9: +1:10\n           StorageLive(_3);                 // scope 0 at $DIR/simplify_try.rs:+1:19: +1:33\n           StorageLive(_4);                 // scope 0 at $DIR/simplify_try.rs:+1:31: +1:32\n           _4 = _1;                         // scope 0 at $DIR/simplify_try.rs:+1:31: +1:32\n-          _3 = move _4;                    // scope 4 at $DIR/simplify_try.rs:+0:5: +0:6\n+          _3 = move _4;                    // scope 4 at $DIR/simplify_try.rs:9:5: 9:6\n           StorageDead(_4);                 // scope 0 at $DIR/simplify_try.rs:+1:32: +1:33\n           _5 = discriminant(_3);           // scope 0 at $DIR/simplify_try.rs:+1:19: +1:33\n           switchInt(move _5) -> [0_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/simplify_try.rs:+1:13: +1:33\n@@ -68,9 +68,9 @@\n           _9 = _6;                         // scope 2 at $DIR/simplify_try.rs:+2:48: +2:49\n           _8 = move _9;                    // scope 5 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n           StorageDead(_9);                 // scope 2 at $DIR/simplify_try.rs:+2:49: +2:50\n-          ((_0 as Err).0: i32) = move _8;  // scope 6 at $DIR/simplify_try.rs:+0:9: +0:10\n-          Deinit(_0);                      // scope 6 at $DIR/simplify_try.rs:+0:5: +0:11\n-          discriminant(_0) = 1;            // scope 6 at $DIR/simplify_try.rs:+0:5: +0:11\n+          ((_0 as Err).0: i32) = move _8;  // scope 6 at $DIR/simplify_try.rs:13:9: 13:10\n+          Deinit(_0);                      // scope 6 at $DIR/simplify_try.rs:13:5: 13:11\n+          discriminant(_0) = 1;            // scope 6 at $DIR/simplify_try.rs:13:5: 13:11\n           StorageDead(_8);                 // scope 2 at $DIR/simplify_try.rs:+2:50: +2:51\n           StorageDead(_6);                 // scope 0 at $DIR/simplify_try.rs:+2:50: +2:51\n           StorageDead(_3);                 // scope 0 at $DIR/simplify_try.rs:+4:6: +4:7"}, {"sha": "165d47158ac542f1968c14578ba761b6f307caf9", "filename": "src/test/mir-opt/simplify_try.try_identity.SimplifyBranchSame.after.mir", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5d7ce21b6ba31e93d7d9af71dd330ecc71387a2d/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyBranchSame.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/5d7ce21b6ba31e93d7d9af71dd330ecc71387a2d/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyBranchSame.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyBranchSame.after.mir?ref=5d7ce21b6ba31e93d7d9af71dd330ecc71387a2d", "patch": "@@ -22,22 +22,22 @@ fn try_identity(_1: Result<u32, i32>) -> Result<u32, i32> {\n             debug t => _9;               // in scope 5 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n         }\n         scope 6 (inlined from_error::<u32, i32>) { // at $DIR/simplify_try.rs:22:26: 22:51\n-            debug e => _8;               // in scope 6 at $DIR/simplify_try.rs:+0:21: +0:22\n+            debug e => _8;               // in scope 6 at $DIR/simplify_try.rs:12:21: 12:22\n         }\n     }\n     scope 3 {\n         debug v => _10;                  // in scope 3 at $DIR/simplify_try.rs:+3:12: +3:13\n     }\n     scope 4 (inlined into_result::<u32, i32>) { // at $DIR/simplify_try.rs:21:19: 21:33\n-        debug r => _4;                   // in scope 4 at $DIR/simplify_try.rs:+0:22: +0:23\n+        debug r => _4;                   // in scope 4 at $DIR/simplify_try.rs:8:22: 8:23\n     }\n \n     bb0: {\n         StorageLive(_2);                 // scope 0 at $DIR/simplify_try.rs:+1:9: +1:10\n         StorageLive(_3);                 // scope 0 at $DIR/simplify_try.rs:+1:19: +1:33\n         StorageLive(_4);                 // scope 0 at $DIR/simplify_try.rs:+1:31: +1:32\n         _4 = _1;                         // scope 0 at $DIR/simplify_try.rs:+1:31: +1:32\n-        _3 = move _4;                    // scope 4 at $DIR/simplify_try.rs:+0:5: +0:6\n+        _3 = move _4;                    // scope 4 at $DIR/simplify_try.rs:9:5: 9:6\n         StorageDead(_4);                 // scope 0 at $DIR/simplify_try.rs:+1:32: +1:33\n         _5 = discriminant(_3);           // scope 0 at $DIR/simplify_try.rs:+1:19: +1:33\n         switchInt(move _5) -> [0_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/simplify_try.rs:+1:13: +1:33\n@@ -67,9 +67,9 @@ fn try_identity(_1: Result<u32, i32>) -> Result<u32, i32> {\n         _9 = _6;                         // scope 2 at $DIR/simplify_try.rs:+2:48: +2:49\n         _8 = move _9;                    // scope 5 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n         StorageDead(_9);                 // scope 2 at $DIR/simplify_try.rs:+2:49: +2:50\n-        ((_0 as Err).0: i32) = move _8;  // scope 6 at $DIR/simplify_try.rs:+0:9: +0:10\n-        Deinit(_0);                      // scope 6 at $DIR/simplify_try.rs:+0:5: +0:11\n-        discriminant(_0) = 1;            // scope 6 at $DIR/simplify_try.rs:+0:5: +0:11\n+        ((_0 as Err).0: i32) = move _8;  // scope 6 at $DIR/simplify_try.rs:13:9: 13:10\n+        Deinit(_0);                      // scope 6 at $DIR/simplify_try.rs:13:5: 13:11\n+        discriminant(_0) = 1;            // scope 6 at $DIR/simplify_try.rs:13:5: 13:11\n         StorageDead(_8);                 // scope 2 at $DIR/simplify_try.rs:+2:50: +2:51\n         StorageDead(_6);                 // scope 0 at $DIR/simplify_try.rs:+2:50: +2:51\n         StorageDead(_3);                 // scope 0 at $DIR/simplify_try.rs:+4:6: +4:7"}, {"sha": "273f0ab32ee03786786061172ec3b280a79d58e1", "filename": "src/test/mir-opt/simplify_try.try_identity.SimplifyLocals.after.mir", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5d7ce21b6ba31e93d7d9af71dd330ecc71387a2d/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyLocals.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/5d7ce21b6ba31e93d7d9af71dd330ecc71387a2d/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyLocals.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyLocals.after.mir?ref=5d7ce21b6ba31e93d7d9af71dd330ecc71387a2d", "patch": "@@ -17,14 +17,14 @@ fn try_identity(_1: Result<u32, i32>) -> Result<u32, i32> {\n             debug t => _6;               // in scope 5 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n         }\n         scope 6 (inlined from_error::<u32, i32>) { // at $DIR/simplify_try.rs:22:26: 22:51\n-            debug e => _5;               // in scope 6 at $DIR/simplify_try.rs:+0:21: +0:22\n+            debug e => _5;               // in scope 6 at $DIR/simplify_try.rs:12:21: 12:22\n         }\n     }\n     scope 3 {\n         debug v => ((_0 as Ok).0: u32);  // in scope 3 at $DIR/simplify_try.rs:+3:12: +3:13\n     }\n     scope 4 (inlined into_result::<u32, i32>) { // at $DIR/simplify_try.rs:21:19: 21:33\n-        debug r => _2;                   // in scope 4 at $DIR/simplify_try.rs:+0:22: +0:23\n+        debug r => _2;                   // in scope 4 at $DIR/simplify_try.rs:8:22: 8:23\n     }\n \n     bb0: {\n@@ -45,8 +45,8 @@ fn try_identity(_1: Result<u32, i32>) -> Result<u32, i32> {\n         StorageLive(_5);                 // scope 2 at $DIR/simplify_try.rs:+2:37: +2:50\n         StorageLive(_6);                 // scope 2 at $DIR/simplify_try.rs:+2:48: +2:49\n         StorageDead(_6);                 // scope 2 at $DIR/simplify_try.rs:+2:49: +2:50\n-        Deinit(_0);                      // scope 6 at $DIR/simplify_try.rs:+0:5: +0:11\n-        discriminant(_0) = 1;            // scope 6 at $DIR/simplify_try.rs:+0:5: +0:11\n+        Deinit(_0);                      // scope 6 at $DIR/simplify_try.rs:13:5: 13:11\n+        discriminant(_0) = 1;            // scope 6 at $DIR/simplify_try.rs:13:5: 13:11\n         StorageDead(_5);                 // scope 2 at $DIR/simplify_try.rs:+2:50: +2:51\n         StorageDead(_4);                 // scope 0 at $DIR/simplify_try.rs:+2:50: +2:51\n         return;                          // scope 0 at $DIR/simplify_try.rs:+6:2: +6:2"}, {"sha": "4127a0c9555eaa52b71e67f40f50f06f323a9fd1", "filename": "src/test/mir-opt/storage_live_dead_in_statics.XXX.mir_map.0.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d7ce21b6ba31e93d7d9af71dd330ecc71387a2d/src%2Ftest%2Fmir-opt%2Fstorage_live_dead_in_statics.XXX.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/5d7ce21b6ba31e93d7d9af71dd330ecc71387a2d/src%2Ftest%2Fmir-opt%2Fstorage_live_dead_in_statics.XXX.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fstorage_live_dead_in_statics.XXX.mir_map.0.mir?ref=5d7ce21b6ba31e93d7d9af71dd330ecc71387a2d", "patch": "@@ -198,6 +198,6 @@ static XXX: &Foo = {\n         _0 = &(*_1);                     // scope 0 at $DIR/storage_live_dead_in_statics.rs:+0:28: +18:2\n         StorageDead(_5);                 // scope 0 at $DIR/storage_live_dead_in_statics.rs:+18:1: +18:2\n         StorageDead(_1);                 // scope 0 at $DIR/storage_live_dead_in_statics.rs:+18:1: +18:2\n-        return;                          // scope 0 at $DIR/storage_live_dead_in_statics.rs:+0:1: +0:25\n+        return;                          // scope 0 at $DIR/storage_live_dead_in_statics.rs:+0:1: +18:2\n     }\n }"}, {"sha": "e2633f61b5fe435b1f288c3277201be1312cafc3", "filename": "src/test/mir-opt/unusual_item_types.{impl#0}-ASSOCIATED_CONSTANT.mir_map.0.32bit.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d7ce21b6ba31e93d7d9af71dd330ecc71387a2d/src%2Ftest%2Fmir-opt%2Funusual_item_types.%7Bimpl%230%7D-ASSOCIATED_CONSTANT.mir_map.0.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/5d7ce21b6ba31e93d7d9af71dd330ecc71387a2d/src%2Ftest%2Fmir-opt%2Funusual_item_types.%7Bimpl%230%7D-ASSOCIATED_CONSTANT.mir_map.0.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual_item_types.%7Bimpl%230%7D-ASSOCIATED_CONSTANT.mir_map.0.32bit.mir?ref=5d7ce21b6ba31e93d7d9af71dd330ecc71387a2d", "patch": "@@ -5,6 +5,6 @@ const <impl at $DIR/unusual-item-types.rs:9:1: 9:7>::ASSOCIATED_CONSTANT: i32 =\n \n     bb0: {\n         _0 = const 2_i32;                // scope 0 at $DIR/unusual-item-types.rs:+0:38: +0:39\n-        return;                          // scope 0 at $DIR/unusual-item-types.rs:+0:5: +0:35\n+        return;                          // scope 0 at $DIR/unusual-item-types.rs:+0:5: +0:39\n     }\n }"}, {"sha": "e2633f61b5fe435b1f288c3277201be1312cafc3", "filename": "src/test/mir-opt/unusual_item_types.{impl#0}-ASSOCIATED_CONSTANT.mir_map.0.64bit.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d7ce21b6ba31e93d7d9af71dd330ecc71387a2d/src%2Ftest%2Fmir-opt%2Funusual_item_types.%7Bimpl%230%7D-ASSOCIATED_CONSTANT.mir_map.0.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/5d7ce21b6ba31e93d7d9af71dd330ecc71387a2d/src%2Ftest%2Fmir-opt%2Funusual_item_types.%7Bimpl%230%7D-ASSOCIATED_CONSTANT.mir_map.0.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual_item_types.%7Bimpl%230%7D-ASSOCIATED_CONSTANT.mir_map.0.64bit.mir?ref=5d7ce21b6ba31e93d7d9af71dd330ecc71387a2d", "patch": "@@ -5,6 +5,6 @@ const <impl at $DIR/unusual-item-types.rs:9:1: 9:7>::ASSOCIATED_CONSTANT: i32 =\n \n     bb0: {\n         _0 = const 2_i32;                // scope 0 at $DIR/unusual-item-types.rs:+0:38: +0:39\n-        return;                          // scope 0 at $DIR/unusual-item-types.rs:+0:5: +0:35\n+        return;                          // scope 0 at $DIR/unusual-item-types.rs:+0:5: +0:39\n     }\n }"}]}