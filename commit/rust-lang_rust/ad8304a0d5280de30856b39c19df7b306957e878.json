{"sha": "ad8304a0d5280de30856b39c19df7b306957e878", "node_id": "C_kwDOAAsO6NoAKGFkODMwNGEwZDUyODBkZTMwODU2YjM5YzE5ZGY3YjMwNjk1N2U4Nzg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-31T13:47:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-31T13:47:36Z"}, "message": "Auto merge of #111076 - notriddle:notriddle/silence-private-dep-trait-impl-suggestions, r=cjgillot\n\ndiagnostics: exclude indirect private deps from trait impl suggest\n\nFixes #88696", "tree": {"sha": "4c5167ddcf79cb528d67dcee35082adb7e38f980", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c5167ddcf79cb528d67dcee35082adb7e38f980"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad8304a0d5280de30856b39c19df7b306957e878", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad8304a0d5280de30856b39c19df7b306957e878", "html_url": "https://github.com/rust-lang/rust/commit/ad8304a0d5280de30856b39c19df7b306957e878", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad8304a0d5280de30856b39c19df7b306957e878/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4f7ad8e68206fa54372535b5c04d7ddbaea43be", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4f7ad8e68206fa54372535b5c04d7ddbaea43be", "html_url": "https://github.com/rust-lang/rust/commit/e4f7ad8e68206fa54372535b5c04d7ddbaea43be"}, {"sha": "52bd82f522c4f3d9bd0dc534c06169285afbc23b", "url": "https://api.github.com/repos/rust-lang/rust/commits/52bd82f522c4f3d9bd0dc534c06169285afbc23b", "html_url": "https://github.com/rust-lang/rust/commit/52bd82f522c4f3d9bd0dc534c06169285afbc23b"}], "stats": {"total": 167, "additions": 136, "deletions": 31}, "files": [{"sha": "25a08237346dd9cb02a42e8e565ecaeb996f45af", "filename": "compiler/rustc_data_structures/src/sync.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ad8304a0d5280de30856b39c19df7b306957e878/compiler%2Frustc_data_structures%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad8304a0d5280de30856b39c19df7b306957e878/compiler%2Frustc_data_structures%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsync.rs?ref=ad8304a0d5280de30856b39c19df7b306957e878", "patch": "@@ -139,9 +139,14 @@ cfg_if! {\n \n         impl Atomic<bool> {\n             pub fn fetch_or(&self, val: bool, _: Ordering) -> bool {\n-                let result = self.0.get() | val;\n-                self.0.set(val);\n-                result\n+                let old = self.0.get();\n+                self.0.set(val | old);\n+                old\n+            }\n+            pub fn fetch_and(&self, val: bool, _: Ordering) -> bool {\n+                let old = self.0.get();\n+                self.0.set(val & old);\n+                old\n             }\n         }\n "}, {"sha": "b3976d756eb0ffdfc3b4d83c09c7d90297b36768", "filename": "compiler/rustc_metadata/src/creader.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ad8304a0d5280de30856b39c19df7b306957e878/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad8304a0d5280de30856b39c19df7b306957e878/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs?ref=ad8304a0d5280de30856b39c19df7b306957e878", "patch": "@@ -365,15 +365,21 @@ impl<'a, 'tcx> CrateLoader<'a, 'tcx> {\n         lib: Library,\n         dep_kind: CrateDepKind,\n         name: Symbol,\n+        private_dep: Option<bool>,\n     ) -> Result<CrateNum, CrateError> {\n         let _prof_timer = self.sess.prof.generic_activity(\"metadata_register_crate\");\n \n         let Library { source, metadata } = lib;\n         let crate_root = metadata.get_root();\n         let host_hash = host_lib.as_ref().map(|lib| lib.metadata.get_root().hash());\n \n-        let private_dep =\n-            self.sess.opts.externs.get(name.as_str()).is_some_and(|e| e.is_private_dep);\n+        let private_dep = self\n+            .sess\n+            .opts\n+            .externs\n+            .get(name.as_str())\n+            .map_or(private_dep.unwrap_or(false), |e| e.is_private_dep)\n+            && private_dep.unwrap_or(true);\n \n         // Claim this crate number and cache it\n         let cnum = self.cstore.intern_stable_crate_id(&crate_root)?;\n@@ -518,15 +524,16 @@ impl<'a, 'tcx> CrateLoader<'a, 'tcx> {\n         if !name.as_str().is_ascii() {\n             return Err(CrateError::NonAsciiName(name));\n         }\n-        let (root, hash, host_hash, extra_filename, path_kind) = match dep {\n+        let (root, hash, host_hash, extra_filename, path_kind, private_dep) = match dep {\n             Some((root, dep)) => (\n                 Some(root),\n                 Some(dep.hash),\n                 dep.host_hash,\n                 Some(&dep.extra_filename[..]),\n                 PathKind::Dependency,\n+                Some(dep.is_private),\n             ),\n-            None => (None, None, None, None, PathKind::Crate),\n+            None => (None, None, None, None, PathKind::Crate, None),\n         };\n         let result = if let Some(cnum) = self.existing_match(name, hash, path_kind) {\n             (LoadResult::Previous(cnum), None)\n@@ -562,10 +569,13 @@ impl<'a, 'tcx> CrateLoader<'a, 'tcx> {\n                     dep_kind = CrateDepKind::MacrosOnly;\n                 }\n                 data.update_dep_kind(|data_dep_kind| cmp::max(data_dep_kind, dep_kind));\n+                if let Some(private_dep) = private_dep {\n+                    data.update_and_private_dep(private_dep);\n+                }\n                 Ok(cnum)\n             }\n             (LoadResult::Loaded(library), host_library) => {\n-                self.register_crate(host_library, root, library, dep_kind, name)\n+                self.register_crate(host_library, root, library, dep_kind, name, private_dep)\n             }\n             _ => panic!(),\n         }"}, {"sha": "8f883bdcf12b83c7ee67864ec1d6aa4a39fae533", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ad8304a0d5280de30856b39c19df7b306957e878/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad8304a0d5280de30856b39c19df7b306957e878/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=ad8304a0d5280de30856b39c19df7b306957e878", "patch": "@@ -9,7 +9,7 @@ use rustc_data_structures::captures::Captures;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::owned_slice::OwnedSlice;\n use rustc_data_structures::svh::Svh;\n-use rustc_data_structures::sync::{AppendOnlyVec, Lock, Lrc, OnceCell};\n+use rustc_data_structures::sync::{AppendOnlyVec, AtomicBool, Lock, Lrc, OnceCell};\n use rustc_data_structures::unhash::UnhashMap;\n use rustc_expand::base::{SyntaxExtension, SyntaxExtensionKind};\n use rustc_expand::proc_macro::{AttrProcMacro, BangProcMacro, DeriveProcMacro};\n@@ -40,6 +40,7 @@ use proc_macro::bridge::client::ProcMacro;\n use std::iter::TrustedLen;\n use std::num::NonZeroUsize;\n use std::path::Path;\n+use std::sync::atomic::Ordering;\n use std::{io, iter, mem};\n \n pub(super) use cstore_impl::provide;\n@@ -112,9 +113,10 @@ pub(crate) struct CrateMetadata {\n     dep_kind: Lock<CrateDepKind>,\n     /// Filesystem location of this crate.\n     source: Lrc<CrateSource>,\n-    /// Whether or not this crate should be consider a private dependency\n-    /// for purposes of the 'exported_private_dependencies' lint\n-    private_dep: bool,\n+    /// Whether or not this crate should be consider a private dependency.\n+    /// Used by the 'exported_private_dependencies' lint, and for determining\n+    /// whether to emit suggestions that reference this crate.\n+    private_dep: AtomicBool,\n     /// The hash for the host proc macro. Used to support `-Z dual-proc-macro`.\n     host_hash: Option<Svh>,\n \n@@ -701,12 +703,13 @@ impl MetadataBlob {\n         writeln!(out, \"=External Dependencies=\")?;\n \n         for (i, dep) in root.crate_deps.decode(self).enumerate() {\n-            let CrateDep { name, extra_filename, hash, host_hash, kind } = dep;\n+            let CrateDep { name, extra_filename, hash, host_hash, kind, is_private } = dep;\n             let number = i + 1;\n \n             writeln!(\n                 out,\n-                \"{number} {name}{extra_filename} hash {hash} host_hash {host_hash:?} kind {kind:?}\"\n+                \"{number} {name}{extra_filename} hash {hash} host_hash {host_hash:?} kind {kind:?} {privacy}\",\n+                privacy = if is_private { \"private\" } else { \"public\" }\n             )?;\n         }\n         write!(out, \"\\n\")?;\n@@ -1624,7 +1627,7 @@ impl CrateMetadata {\n             dependencies,\n             dep_kind: Lock::new(dep_kind),\n             source: Lrc::new(source),\n-            private_dep,\n+            private_dep: AtomicBool::new(private_dep),\n             host_hash,\n             extern_crate: Lock::new(None),\n             hygiene_context: Default::default(),\n@@ -1672,6 +1675,10 @@ impl CrateMetadata {\n         self.dep_kind.with_lock(|dep_kind| *dep_kind = f(*dep_kind))\n     }\n \n+    pub(crate) fn update_and_private_dep(&self, private_dep: bool) {\n+        self.private_dep.fetch_and(private_dep, Ordering::SeqCst);\n+    }\n+\n     pub(crate) fn required_panic_strategy(&self) -> Option<PanicStrategy> {\n         self.root.required_panic_strategy\n     }"}, {"sha": "a15307e4345c179c5dc7d7bc0907aa59090ea3c4", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ad8304a0d5280de30856b39c19df7b306957e878/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad8304a0d5280de30856b39c19df7b306957e878/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=ad8304a0d5280de30856b39c19df7b306957e878", "patch": "@@ -285,7 +285,13 @@ provide! { tcx, def_id, other, cdata,\n     is_ctfe_mir_available => { cdata.is_ctfe_mir_available(def_id.index) }\n \n     dylib_dependency_formats => { cdata.get_dylib_dependency_formats(tcx) }\n-    is_private_dep => { cdata.private_dep }\n+    is_private_dep => {\n+        // Parallel compiler needs to synchronize type checking and linting (which use this flag)\n+        // so that they happen strictly crate loading. Otherwise, the full list of available\n+        // impls aren't loaded yet.\n+        use std::sync::atomic::Ordering;\n+        cdata.private_dep.load(Ordering::Acquire)\n+    }\n     is_panic_runtime => { cdata.root.panic_runtime }\n     is_compiler_builtins => { cdata.root.compiler_builtins }\n     has_global_allocator => { cdata.root.has_global_allocator }"}, {"sha": "6ceb61e793e534cc2ab71774650d2aa0d49e7bb6", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad8304a0d5280de30856b39c19df7b306957e878/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad8304a0d5280de30856b39c19df7b306957e878/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=ad8304a0d5280de30856b39c19df7b306957e878", "patch": "@@ -1883,6 +1883,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                     host_hash: self.tcx.crate_host_hash(cnum),\n                     kind: self.tcx.dep_kind(cnum),\n                     extra_filename: self.tcx.extra_filename(cnum).clone(),\n+                    is_private: self.tcx.is_private_dep(cnum),\n                 };\n                 (cnum, dep)\n             })"}, {"sha": "2da888f4468c06e7507f44c9f1c1300f63f6b69c", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad8304a0d5280de30856b39c19df7b306957e878/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad8304a0d5280de30856b39c19df7b306957e878/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=ad8304a0d5280de30856b39c19df7b306957e878", "patch": "@@ -322,6 +322,7 @@ pub(crate) struct CrateDep {\n     pub host_hash: Option<Svh>,\n     pub kind: CrateDepKind,\n     pub extra_filename: String,\n+    pub is_private: bool,\n }\n \n #[derive(MetadataEncodable, MetadataDecodable)]"}, {"sha": "dce2f5545f51d51861a5ff0eee5b3ffc259654c6", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ad8304a0d5280de30856b39c19df7b306957e878/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad8304a0d5280de30856b39c19df7b306957e878/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=ad8304a0d5280de30856b39c19df7b306957e878", "patch": "@@ -15,7 +15,7 @@ use rustc_data_structures::stable_hasher::{Hash64, HashStable, StableHasher};\n use rustc_errors::ErrorGuaranteed;\n use rustc_hir as hir;\n use rustc_hir::def::{CtorOf, DefKind, Res};\n-use rustc_hir::def_id::{DefId, LocalDefId};\n+use rustc_hir::def_id::{CrateNum, DefId, LocalDefId};\n use rustc_index::bit_set::GrowableBitSet;\n use rustc_index::{Idx, IndexVec};\n use rustc_macros::HashStable;\n@@ -857,6 +857,26 @@ impl<'tcx> TyCtxt<'tcx> {\n             _ => def_kind.article(),\n         }\n     }\n+\n+    /// Return `true` if the supplied `CrateNum` is \"user-visible,\" meaning either a [public]\n+    /// dependency, or a [direct] private dependency. This is used to decide whether the crate can\n+    /// be shown in `impl` suggestions.\n+    ///\n+    /// [public]: TyCtxt::is_private_dep\n+    /// [direct]: rustc_session::cstore::ExternCrate::is_direct\n+    pub fn is_user_visible_dep(self, key: CrateNum) -> bool {\n+        // | Private | Direct | Visible |                    |\n+        // |---------|--------|---------|--------------------|\n+        // | Yes     | Yes    | Yes     | !true || true   |\n+        // | No      | Yes    | Yes     | !false || true  |\n+        // | Yes     | No     | No      | !true || false  |\n+        // | No      | No     | Yes     | !false || false |\n+        !self.is_private_dep(key)\n+            // If `extern_crate` is `None`, then the crate was injected (e.g., by the allocator).\n+            // Treat that kind of crate as \"indirect\", since it's an implementation detail of\n+            // the language.\n+            || self.extern_crate(key.as_def_id()).map_or(false, |e| e.is_direct())\n+    }\n }\n \n struct OpaqueTypeExpander<'tcx> {"}, {"sha": "1470dc452a18d24e8acc180859fab56fe6f9ed6b", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad8304a0d5280de30856b39c19df7b306957e878/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad8304a0d5280de30856b39c19df7b306957e878/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=ad8304a0d5280de30856b39c19df7b306957e878", "patch": "@@ -1776,6 +1776,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                     || !trait_pred\n                         .skip_binder()\n                         .is_constness_satisfied_by(self.tcx.constness(def_id))\n+                    || !self.tcx.is_user_visible_dep(def_id.krate)\n                 {\n                     return None;\n                 }"}, {"sha": "72d910bf957469544561abf0d2865e4633d06c5f", "filename": "library/std/Cargo.toml", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ad8304a0d5280de30856b39c19df7b306957e878/library%2Fstd%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ad8304a0d5280de30856b39c19df7b306957e878/library%2Fstd%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2FCargo.toml?ref=ad8304a0d5280de30856b39c19df7b306957e878", "patch": "@@ -1,3 +1,5 @@\n+cargo-features = [\"public-dependency\"]\n+\n [package]\n name = \"std\"\n version = \"0.0.0\"\n@@ -10,12 +12,12 @@ edition = \"2021\"\n crate-type = [\"dylib\", \"rlib\"]\n \n [dependencies]\n-alloc = { path = \"../alloc\" }\n+alloc = { path = \"../alloc\", public = true }\n cfg-if = { version = \"1.0\", features = ['rustc-dep-of-std'] }\n panic_unwind = { path = \"../panic_unwind\", optional = true }\n panic_abort = { path = \"../panic_abort\" }\n-core = { path = \"../core\" }\n-libc = { version = \"0.2.143\", default-features = false, features = ['rustc-dep-of-std'] }\n+core = { path = \"../core\", public = true }\n+libc = { version = \"0.2.143\", default-features = false, features = ['rustc-dep-of-std'], public = true }\n compiler_builtins = { version = \"0.1.92\" }\n profiler_builtins = { path = \"../profiler_builtins\", optional = true }\n unwind = { path = \"../unwind\" }\n@@ -25,7 +27,7 @@ std_detect = { path = \"../stdarch/crates/std_detect\", default-features = false,\n # Dependencies of the `backtrace` crate\n addr2line = { version = \"0.19.0\", optional = true, default-features = false }\n rustc-demangle = { version = \"0.1.21\", features = ['rustc-dep-of-std'] }\n-miniz_oxide = { version = \"0.6.0\", optional = true, default-features = false }\n+miniz_oxide = { version = \"0.6.0\", optional = true, default-features = false, public = false }\n [dependencies.object]\n version = \"0.30.0\"\n optional = true\n@@ -40,7 +42,7 @@ rand_xorshift = \"0.3.0\"\n dlmalloc = { version = \"0.2.3\", features = ['rustc-dep-of-std'] }\n \n [target.x86_64-fortanix-unknown-sgx.dependencies]\n-fortanix-sgx-abi = { version = \"0.5.0\", features = ['rustc-dep-of-std'] }\n+fortanix-sgx-abi = { version = \"0.5.0\", features = ['rustc-dep-of-std'], public = true }\n \n [target.'cfg(target_os = \"hermit\")'.dependencies]\n hermit-abi = { version = \"0.3.0\", features = ['rustc-dep-of-std'] }"}, {"sha": "1b50c2ea6dd57c2e86b84d2882208be6158ec02a", "filename": "library/std/src/sys/wasi/fd.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ad8304a0d5280de30856b39c19df7b306957e878/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad8304a0d5280de30856b39c19df7b306957e878/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ffd.rs?ref=ad8304a0d5280de30856b39c19df7b306957e878", "patch": "@@ -96,7 +96,7 @@ impl WasiFd {\n         unsafe { wasi::fd_sync(self.as_raw_fd() as wasi::Fd).map_err(err2io) }\n     }\n \n-    pub fn advise(&self, offset: u64, len: u64, advice: wasi::Advice) -> io::Result<()> {\n+    pub(crate) fn advise(&self, offset: u64, len: u64, advice: wasi::Advice) -> io::Result<()> {\n         unsafe {\n             wasi::fd_advise(self.as_raw_fd() as wasi::Fd, offset, len, advice).map_err(err2io)\n         }\n@@ -179,7 +179,7 @@ impl WasiFd {\n         }\n     }\n \n-    pub fn filestat_get(&self) -> io::Result<wasi::Filestat> {\n+    pub(crate) fn filestat_get(&self) -> io::Result<wasi::Filestat> {\n         unsafe { wasi::fd_filestat_get(self.as_raw_fd() as wasi::Fd).map_err(err2io) }\n     }\n \n@@ -199,7 +199,7 @@ impl WasiFd {\n         unsafe { wasi::fd_filestat_set_size(self.as_raw_fd() as wasi::Fd, size).map_err(err2io) }\n     }\n \n-    pub fn path_filestat_get(\n+    pub(crate) fn path_filestat_get(\n         &self,\n         flags: wasi::Lookupflags,\n         path: &str,"}, {"sha": "437aae3ae7f7f5808dad81a9eb29d8207749ebce", "filename": "library/std/src/sys/wasi/fs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad8304a0d5280de30856b39c19df7b306957e878/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad8304a0d5280de30856b39c19df7b306957e878/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ffs.rs?ref=ad8304a0d5280de30856b39c19df7b306957e878", "patch": "@@ -104,7 +104,7 @@ impl FileAttr {\n         Ok(SystemTime::from_wasi_timestamp(self.meta.ctim))\n     }\n \n-    pub fn as_wasi(&self) -> &wasi::Filestat {\n+    pub(crate) fn as_wasi(&self) -> &wasi::Filestat {\n         &self.meta\n     }\n }\n@@ -142,7 +142,7 @@ impl FileType {\n         self.bits == wasi::FILETYPE_SYMBOLIC_LINK\n     }\n \n-    pub fn bits(&self) -> wasi::Filetype {\n+    pub(crate) fn bits(&self) -> wasi::Filetype {\n         self.bits\n     }\n }"}, {"sha": "358c2c3f9b2f3971180f6cabd1499ce76a475293", "filename": "library/std/tests/common/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ad8304a0d5280de30856b39c19df7b306957e878/library%2Fstd%2Ftests%2Fcommon%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad8304a0d5280de30856b39c19df7b306957e878/library%2Fstd%2Ftests%2Fcommon%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Ftests%2Fcommon%2Fmod.rs?ref=ad8304a0d5280de30856b39c19df7b306957e878", "patch": "@@ -20,15 +20,15 @@ pub(crate) fn test_rng() -> rand_xorshift::XorShiftRng {\n }\n \n // Copied from std::sys_common::io\n-pub struct TempDir(PathBuf);\n+pub(crate) struct TempDir(PathBuf);\n \n impl TempDir {\n-    pub fn join(&self, path: &str) -> PathBuf {\n+    pub(crate) fn join(&self, path: &str) -> PathBuf {\n         let TempDir(ref p) = *self;\n         p.join(path)\n     }\n \n-    pub fn path(&self) -> &Path {\n+    pub(crate) fn path(&self) -> &Path {\n         let TempDir(ref p) = *self;\n         p\n     }\n@@ -49,7 +49,7 @@ impl Drop for TempDir {\n }\n \n #[track_caller] // for `test_rng`\n-pub fn tmpdir() -> TempDir {\n+pub(crate) fn tmpdir() -> TempDir {\n     let p = env::temp_dir();\n     let mut r = test_rng();\n     let ret = p.join(&format!(\"rust-{}\", r.next_u32()));"}, {"sha": "6a2409a0fbfc67e4d242ba3ef417563bbcda0a0b", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ad8304a0d5280de30856b39c19df7b306957e878/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad8304a0d5280de30856b39c19df7b306957e878/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=ad8304a0d5280de30856b39c19df7b306957e878", "patch": "@@ -1009,6 +1009,9 @@ impl Step for PlainSourceTarball {\n                 .arg(builder.src.join(\"./compiler/rustc_codegen_cranelift/Cargo.toml\"))\n                 .arg(\"--sync\")\n                 .arg(builder.src.join(\"./src/bootstrap/Cargo.toml\"))\n+                // Will read the libstd Cargo.toml\n+                // which uses the unstable `public-dependency` feature.\n+                .env(\"RUSTC_BOOTSTRAP\", \"1\")\n                 .current_dir(&plain_dst_src);\n \n             let config = if !builder.config.dry_run() {"}, {"sha": "3b20ceac8759ff74ecef14eb6c7afac2882ee331", "filename": "src/bootstrap/metadata.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ad8304a0d5280de30856b39c19df7b306957e878/src%2Fbootstrap%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad8304a0d5280de30856b39c19df7b306957e878/src%2Fbootstrap%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fmetadata.rs?ref=ad8304a0d5280de30856b39c19df7b306957e878", "patch": "@@ -74,6 +74,9 @@ fn workspace_members(build: &Build) -> impl Iterator<Item = Package> {\n     let collect_metadata = |manifest_path| {\n         let mut cargo = Command::new(&build.initial_cargo);\n         cargo\n+            // Will read the libstd Cargo.toml\n+            // which uses the unstable `public-dependency` feature.\n+            .env(\"RUSTC_BOOTSTRAP\", \"1\")\n             .arg(\"metadata\")\n             .arg(\"--format-version\")\n             .arg(\"1\")"}, {"sha": "6e573c2284e5cded9d6500d869446b8055263d32", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ad8304a0d5280de30856b39c19df7b306957e878/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad8304a0d5280de30856b39c19df7b306957e878/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=ad8304a0d5280de30856b39c19df7b306957e878", "patch": "@@ -2499,6 +2499,9 @@ impl Step for Distcheck {\n         let toml = dir.join(\"rust-src/lib/rustlib/src/rust/library/std/Cargo.toml\");\n         builder.run(\n             Command::new(&builder.initial_cargo)\n+                // Will read the libstd Cargo.toml\n+                // which uses the unstable `public-dependency` feature.\n+                .env(\"RUSTC_BOOTSTRAP\", \"1\")\n                 .arg(\"generate-lockfile\")\n                 .arg(\"--manifest-path\")\n                 .arg(&toml)"}, {"sha": "01e5a00af4a23a69de2be5107810836b0ba7fcc6", "filename": "src/tools/rust-installer/combine-installers.sh", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad8304a0d5280de30856b39c19df7b306957e878/src%2Ftools%2Frust-installer%2Fcombine-installers.sh", "raw_url": "https://github.com/rust-lang/rust/raw/ad8304a0d5280de30856b39c19df7b306957e878/src%2Ftools%2Frust-installer%2Fcombine-installers.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-installer%2Fcombine-installers.sh?ref=ad8304a0d5280de30856b39c19df7b306957e878", "patch": "@@ -11,5 +11,9 @@ abs_path() {\n     (unset CDPATH && cd \"$path\" > /dev/null && pwd)\n }\n \n+# Running cargo will read the libstd Cargo.toml\n+# which uses the unstable `public-dependency` feature.\n+export RUSTC_BOOTSTRAP=1\n+\n src_dir=\"$(abs_path $(dirname \"$0\"))\"\n $CARGO run --manifest-path=\"$src_dir/Cargo.toml\" -- combine \"$@\""}, {"sha": "cc45b5e0803f762137005a51ce8e959dc4ab2ff5", "filename": "src/tools/rust-installer/gen-installer.sh", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad8304a0d5280de30856b39c19df7b306957e878/src%2Ftools%2Frust-installer%2Fgen-installer.sh", "raw_url": "https://github.com/rust-lang/rust/raw/ad8304a0d5280de30856b39c19df7b306957e878/src%2Ftools%2Frust-installer%2Fgen-installer.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-installer%2Fgen-installer.sh?ref=ad8304a0d5280de30856b39c19df7b306957e878", "patch": "@@ -11,5 +11,9 @@ abs_path() {\n     (unset CDPATH && cd \"$path\" > /dev/null && pwd)\n }\n \n+# Running cargo will read the libstd Cargo.toml\n+# which uses the unstable `public-dependency` feature.\n+export RUSTC_BOOTSTRAP=1\n+\n src_dir=\"$(abs_path $(dirname \"$0\"))\"\n $CARGO run --manifest-path=\"$src_dir/Cargo.toml\" -- generate \"$@\""}, {"sha": "374e103e89ca618e684514fa3d9b1c2fee3f2417", "filename": "src/tools/rust-installer/make-tarballs.sh", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad8304a0d5280de30856b39c19df7b306957e878/src%2Ftools%2Frust-installer%2Fmake-tarballs.sh", "raw_url": "https://github.com/rust-lang/rust/raw/ad8304a0d5280de30856b39c19df7b306957e878/src%2Ftools%2Frust-installer%2Fmake-tarballs.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-installer%2Fmake-tarballs.sh?ref=ad8304a0d5280de30856b39c19df7b306957e878", "patch": "@@ -11,5 +11,9 @@ abs_path() {\n     (unset CDPATH && cd \"$path\" > /dev/null && pwd)\n }\n \n+# Running cargo will read the libstd Cargo.toml\n+# which uses the unstable `public-dependency` feature.\n+export RUSTC_BOOTSTRAP=1\n+\n src_dir=\"$(abs_path $(dirname \"$0\"))\"\n $CARGO run --manifest-path=\"$src_dir/Cargo.toml\" -- tarball \"$@\""}, {"sha": "e21068490b61a501c7c8177db819c60af7d58488", "filename": "src/tools/tidy/src/main.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ad8304a0d5280de30856b39c19df7b306957e878/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad8304a0d5280de30856b39c19df7b306957e878/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs?ref=ad8304a0d5280de30856b39c19df7b306957e878", "patch": "@@ -16,6 +16,12 @@ use std::sync::atomic::{AtomicBool, Ordering};\n use std::thread::{self, scope, ScopedJoinHandle};\n \n fn main() {\n+    // Running Cargo will read the libstd Cargo.toml\n+    // which uses the unstable `public-dependency` feature.\n+    //\n+    // `setenv` might not be thread safe, so run it before using multiple threads.\n+    env::set_var(\"RUSTC_BOOTSTRAP\", \"1\");\n+\n     let root_path: PathBuf = env::args_os().nth(1).expect(\"need path to root of repo\").into();\n     let cargo: PathBuf = env::args_os().nth(2).expect(\"need path to cargo\").into();\n     let output_directory: PathBuf ="}, {"sha": "745fdef154632c355143f8db9fcbb32422b2f1c2", "filename": "tests/ui/suggestions/issue-88696.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ad8304a0d5280de30856b39c19df7b306957e878/tests%2Fui%2Fsuggestions%2Fissue-88696.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad8304a0d5280de30856b39c19df7b306957e878/tests%2Fui%2Fsuggestions%2Fissue-88696.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fissue-88696.rs?ref=ad8304a0d5280de30856b39c19df7b306957e878", "patch": "@@ -0,0 +1,14 @@\n+// This test case should ensure that miniz_oxide isn't\n+// suggested, since it's not a direct dependency.\n+\n+fn a() -> Result<u64, i32> {\n+    Err(1)\n+}\n+\n+fn b() -> Result<u32, i32> {\n+    a().into() //~ERROR [E0277]\n+}\n+\n+fn main() {\n+    let _ = dbg!(b());\n+}"}, {"sha": "4947269d75934c372dc26a350555a9218094d8a8", "filename": "tests/ui/suggestions/issue-88696.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ad8304a0d5280de30856b39c19df7b306957e878/tests%2Fui%2Fsuggestions%2Fissue-88696.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad8304a0d5280de30856b39c19df7b306957e878/tests%2Fui%2Fsuggestions%2Fissue-88696.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fissue-88696.stderr?ref=ad8304a0d5280de30856b39c19df7b306957e878", "patch": "@@ -0,0 +1,11 @@\n+error[E0277]: the trait bound `Result<u32, i32>: From<Result<u64, i32>>` is not satisfied\n+  --> $DIR/issue-88696.rs:9:9\n+   |\n+LL |     a().into()\n+   |         ^^^^ the trait `From<Result<u64, i32>>` is not implemented for `Result<u32, i32>`\n+   |\n+   = note: required for `Result<u64, i32>` to implement `Into<Result<u32, i32>>`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}]}