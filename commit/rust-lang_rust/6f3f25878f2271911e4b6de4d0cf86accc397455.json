{"sha": "6f3f25878f2271911e4b6de4d0cf86accc397455", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmM2YyNTg3OGYyMjcxOTExZTRiNmRlNGQwY2Y4NmFjY2MzOTc0NTU=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2018-03-16T11:50:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-03-16T11:50:34Z"}, "message": "Merge pull request #2533 from mati865/dogfood\n\nCode cleanup", "tree": {"sha": "872e83ba66a6d5dfe98734f5471673ec329845d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/872e83ba66a6d5dfe98734f5471673ec329845d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f3f25878f2271911e4b6de4d0cf86accc397455", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJaq6+KCRBK7hj4Ov3rIwAAdHIIAK6zMZLw20r3CDjk5od5ZjZO\nvSGF7IOIEa0BXClfX51vXOVz8jrdxGzOzVWKoJXT00Op3YYTLmuhADo2WR6poHLD\nPg6TIBrI33ysgmgA6EWxmWIxhWgOz8NTMvNsW86VcJIwr2uHcfSHGTqWBLkBnBUQ\nvFDhlN1uXJrpSXEvyaSB1BmY3g7CnnrpoMz5BYxChiwo3wYEsCd/nW+EB3sCYGuF\nQEQHLcRsnU8CJlE9DOFmY8Q9GROEvAXdF4m4Km3rLAVZyknd4uh4wj3dDGdpvMGC\n/JqS7SEsw6xSiA90KSiwhQ1qKs86usU5AgY6o9Vl9TIHDlZfZEOmp92sdxp0Gxw=\n=ZbxN\n-----END PGP SIGNATURE-----\n", "payload": "tree 872e83ba66a6d5dfe98734f5471673ec329845d1\nparent 874992797330c201aa17eda4fd36c1f0dbd5060a\nparent 3b387eaabed1ed47503f44fd9fd54979b4024b64\nauthor Oliver Schneider <oli-obk@users.noreply.github.com> 1521201034 +0100\ncommitter GitHub <noreply@github.com> 1521201034 +0100\n\nMerge pull request #2533 from mati865/dogfood\n\nCode cleanup"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f3f25878f2271911e4b6de4d0cf86accc397455", "html_url": "https://github.com/rust-lang/rust/commit/6f3f25878f2271911e4b6de4d0cf86accc397455", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f3f25878f2271911e4b6de4d0cf86accc397455/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "874992797330c201aa17eda4fd36c1f0dbd5060a", "url": "https://api.github.com/repos/rust-lang/rust/commits/874992797330c201aa17eda4fd36c1f0dbd5060a", "html_url": "https://github.com/rust-lang/rust/commit/874992797330c201aa17eda4fd36c1f0dbd5060a"}, {"sha": "3b387eaabed1ed47503f44fd9fd54979b4024b64", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b387eaabed1ed47503f44fd9fd54979b4024b64", "html_url": "https://github.com/rust-lang/rust/commit/3b387eaabed1ed47503f44fd9fd54979b4024b64"}], "stats": {"total": 265, "additions": 136, "deletions": 129}, "files": [{"sha": "a3d9d5cbba8621a6675fc9bacba52b45606fbaa2", "filename": "clippy_lints/src/assign_ops.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6f3f25878f2271911e4b6de4d0cf86accc397455/clippy_lints%2Fsrc%2Fassign_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f3f25878f2271911e4b6de4d0cf86accc397455/clippy_lints%2Fsrc%2Fassign_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fassign_ops.rs?ref=6f3f25878f2271911e4b6de4d0cf86accc397455", "patch": "@@ -202,9 +202,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AssignOps {\n                     };\n \n                     let mut visitor = ExprVisitor {\n-                        assignee: assignee,\n+                        assignee,\n                         counter: 0,\n-                        cx: cx\n+                        cx\n                     };\n \n                     walk_expr(&mut visitor, e);\n@@ -253,7 +253,7 @@ struct ExprVisitor<'a, 'tcx: 'a> {\n \n impl<'a, 'tcx: 'a> Visitor<'tcx> for ExprVisitor<'a, 'tcx> {\n     fn visit_expr(&mut self, expr: &'tcx hir::Expr) {\n-        if SpanlessEq::new(self.cx).ignore_fn().eq_expr(self.assignee, &expr) {\n+        if SpanlessEq::new(self.cx).ignore_fn().eq_expr(self.assignee, expr) {\n             self.counter += 1;\n         }\n "}, {"sha": "8989c5ca8cffee7fd8927dc62ab5daab46863b3f", "filename": "clippy_lints/src/bit_mask.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f3f25878f2271911e4b6de4d0cf86accc397455/clippy_lints%2Fsrc%2Fbit_mask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f3f25878f2271911e4b6de4d0cf86accc397455/clippy_lints%2Fsrc%2Fbit_mask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbit_mask.rs?ref=6f3f25878f2271911e4b6de4d0cf86accc397455", "patch": "@@ -96,7 +96,7 @@ pub struct BitMask {\n impl BitMask {\n     pub fn new(verbose_bit_mask_threshold: u64) -> Self {\n         Self {\n-            verbose_bit_mask_threshold: verbose_bit_mask_threshold,\n+            verbose_bit_mask_threshold,\n         }\n     }\n }"}, {"sha": "dd5bf968bb36de556d8cc4b6d5757c0eca46808c", "filename": "clippy_lints/src/blacklisted_name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f3f25878f2271911e4b6de4d0cf86accc397455/clippy_lints%2Fsrc%2Fblacklisted_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f3f25878f2271911e4b6de4d0cf86accc397455/clippy_lints%2Fsrc%2Fblacklisted_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fblacklisted_name.rs?ref=6f3f25878f2271911e4b6de4d0cf86accc397455", "patch": "@@ -28,7 +28,7 @@ pub struct BlackListedName {\n impl BlackListedName {\n     pub fn new(blacklist: Vec<String>) -> Self {\n         Self {\n-            blacklist: blacklist,\n+            blacklist,\n         }\n     }\n }"}, {"sha": "0afb8a73dfeb5e5d083940732a06ac5d7d494c36", "filename": "clippy_lints/src/block_in_if_condition.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f3f25878f2271911e4b6de4d0cf86accc397455/clippy_lints%2Fsrc%2Fblock_in_if_condition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f3f25878f2271911e4b6de4d0cf86accc397455/clippy_lints%2Fsrc%2Fblock_in_if_condition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fblock_in_if_condition.rs?ref=6f3f25878f2271911e4b6de4d0cf86accc397455", "patch": "@@ -124,7 +124,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for BlockInIfCondition {\n             } else {\n                 let mut visitor = ExVisitor {\n                     found_block: None,\n-                    cx: cx,\n+                    cx,\n                 };\n                 walk_expr(&mut visitor, check);\n                 if let Some(block) = visitor.found_block {"}, {"sha": "cec569ec061b98436854dc91caf4cd4d5eb85acc", "filename": "clippy_lints/src/booleans.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6f3f25878f2271911e4b6de4d0cf86accc397455/clippy_lints%2Fsrc%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f3f25878f2271911e4b6de4d0cf86accc397455/clippy_lints%2Fsrc%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbooleans.rs?ref=6f3f25878f2271911e4b6de4d0cf86accc397455", "patch": "@@ -69,7 +69,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NonminimalBool {\n         _: Span,\n         _: NodeId,\n     ) {\n-        NonminimalBoolVisitor { cx: cx }.visit_body(body)\n+        NonminimalBoolVisitor { cx }.visit_body(body)\n     }\n }\n \n@@ -261,8 +261,8 @@ impl<'a, 'tcx, 'v> SuggestContext<'a, 'tcx, 'v> {\n // The boolean part of the return indicates whether some simplifications have been applied.\n fn suggest(cx: &LateContext, suggestion: &Bool, terminals: &[&Expr]) -> (String, bool) {\n     let mut suggest_context = SuggestContext {\n-        terminals: terminals,\n-        cx: cx,\n+        terminals,\n+        cx,\n         output: String::new(),\n         simplified: false,\n     };"}, {"sha": "675342645b89efe49fddca5bfa8586ba96be9386", "filename": "clippy_lints/src/consts.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6f3f25878f2271911e4b6de4d0cf86accc397455/clippy_lints%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f3f25878f2271911e4b6de4d0cf86accc397455/clippy_lints%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fconsts.rs?ref=6f3f25878f2271911e4b6de4d0cf86accc397455", "patch": "@@ -1,4 +1,5 @@\n #![allow(cast_possible_truncation)]\n+#![allow(float_cmp)]\n \n use rustc::lint::LateContext;\n use rustc::hir::def::Def;\n@@ -73,7 +74,7 @@ impl PartialEq for Constant {\n                 // we want `Fw32 == FwAny` and `FwAny == Fw64`, by transitivity we must have\n                 // `Fw32 == Fw64` so don\u2019t compare them\n                 // mem::transmute is required to catch non-matching 0.0, -0.0, and NaNs\n-                unsafe { mem::transmute::<f64, u64>(l as f64) == mem::transmute::<f64, u64>(r as f64) }\n+                unsafe { mem::transmute::<f64, u64>(f64::from(l)) == mem::transmute::<f64, u64>(f64::from(r)) }\n             },\n             (&Constant::Bool(l), &Constant::Bool(r)) => l == r,\n             (&Constant::Vec(ref l), &Constant::Vec(ref r)) | (&Constant::Tuple(ref l), &Constant::Tuple(ref r)) => l == r,\n@@ -102,7 +103,7 @@ impl Hash for Constant {\n                 i.hash(state);\n             },\n             Constant::F32(f) => {\n-                unsafe { mem::transmute::<f64, u64>(f as f64) }.hash(state);\n+                unsafe { mem::transmute::<f64, u64>(f64::from(f)) }.hash(state);\n             },\n             Constant::F64(f) => {\n                 unsafe { mem::transmute::<f64, u64>(f) }.hash(state);\n@@ -143,12 +144,12 @@ impl PartialOrd for Constant {\n }\n \n /// parse a `LitKind` to a `Constant`\n-pub fn lit_to_constant<'a, 'tcx>(lit: &LitKind, ty: Ty<'tcx>) -> Constant {\n+pub fn lit_to_constant<'tcx>(lit: &LitKind, ty: Ty<'tcx>) -> Constant {\n     use syntax::ast::*;\n \n     match *lit {\n         LitKind::Str(ref is, _) => Constant::Str(is.to_string()),\n-        LitKind::Byte(b) => Constant::Int(b as u128),\n+        LitKind::Byte(b) => Constant::Int(u128::from(b)),\n         LitKind::ByteStr(ref s) => Constant::Binary(Rc::clone(s)),\n         LitKind::Char(c) => Constant::Char(c),\n         LitKind::Int(n, _) => Constant::Int(n),\n@@ -177,7 +178,7 @@ pub fn constant_simple(lcx: &LateContext, e: &Expr) -> Option<Constant> {\n     constant(lcx, e).and_then(|(cst, res)| if res { None } else { Some(cst) })\n }\n \n-/// Creates a ConstEvalLateContext from the given LateContext and TypeckTables\n+/// Creates a `ConstEvalLateContext` from the given `LateContext` and `TypeckTables`\n pub fn constant_context<'c, 'cc>(lcx: &LateContext<'c, 'cc>, tables: &'cc ty::TypeckTables<'cc>) -> ConstEvalLateContext<'c, 'cc> {\n     ConstEvalLateContext {\n         tcx: lcx.tcx,\n@@ -215,7 +216,7 @@ impl<'c, 'cc> ConstEvalLateContext<'c, 'cc> {\n             },\n             ExprUnary(op, ref operand) => self.expr(operand).and_then(|o| match op {\n                 UnNot => self.constant_not(&o, self.tables.expr_ty(e)),\n-                UnNeg => self.constant_negate(o, self.tables.expr_ty(e)),\n+                UnNeg => self.constant_negate(&o, self.tables.expr_ty(e)),\n                 UnDeref => Some(o),\n             }),\n             ExprBinary(op, ref left, ref right) => self.binop(op, left, right),\n@@ -240,9 +241,9 @@ impl<'c, 'cc> ConstEvalLateContext<'c, 'cc> {\n         }\n     }\n \n-    fn constant_negate(&self, o: Constant, ty: ty::Ty) -> Option<Constant> {\n+    fn constant_negate(&self, o: &Constant, ty: ty::Ty) -> Option<Constant> {\n         use self::Constant::*;\n-        match o {\n+        match *o {\n             Int(value) => {\n                 let ity = match ty.sty {\n                     ty::TyInt(ity) => ity,\n@@ -377,7 +378,7 @@ impl<'c, 'cc> ConstEvalLateContext<'c, 'cc> {\n                 BiSub => Some(Constant::F32(l - r)),\n                 BiMul => Some(Constant::F32(l * r)),\n                 BiDiv => Some(Constant::F32(l / r)),\n-                BiRem => Some(Constant::F32(l * r)),\n+                BiRem => Some(Constant::F32(l % r)),\n                 BiEq => Some(Constant::Bool(l == r)),\n                 BiNe => Some(Constant::Bool(l != r)),\n                 BiLt => Some(Constant::Bool(l < r)),\n@@ -391,7 +392,7 @@ impl<'c, 'cc> ConstEvalLateContext<'c, 'cc> {\n                 BiSub => Some(Constant::F64(l - r)),\n                 BiMul => Some(Constant::F64(l * r)),\n                 BiDiv => Some(Constant::F64(l / r)),\n-                BiRem => Some(Constant::F64(l * r)),\n+                BiRem => Some(Constant::F64(l % r)),\n                 BiEq => Some(Constant::Bool(l == r)),\n                 BiNe => Some(Constant::Bool(l != r)),\n                 BiLt => Some(Constant::Bool(l < r)),"}, {"sha": "751fc13292c77c3aaf002d54970f71f8eefe9158", "filename": "clippy_lints/src/cyclomatic_complexity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f3f25878f2271911e4b6de4d0cf86accc397455/clippy_lints%2Fsrc%2Fcyclomatic_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f3f25878f2271911e4b6de4d0cf86accc397455/clippy_lints%2Fsrc%2Fcyclomatic_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcyclomatic_complexity.rs?ref=6f3f25878f2271911e4b6de4d0cf86accc397455", "patch": "@@ -63,7 +63,7 @@ impl CyclomaticComplexity {\n             divergence: 0,\n             short_circuits: 0,\n             returns: 0,\n-            cx: cx,\n+            cx,\n         };\n         helper.visit_expr(expr);\n         let CCHelper {"}, {"sha": "3e2c56f5fb9caed5656c36b2231d35ffc0873391", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f3f25878f2271911e4b6de4d0cf86accc397455/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f3f25878f2271911e4b6de4d0cf86accc397455/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=6f3f25878f2271911e4b6de4d0cf86accc397455", "patch": "@@ -39,7 +39,7 @@ pub struct Doc {\n impl Doc {\n     pub fn new(valid_idents: Vec<String>) -> Self {\n         Self {\n-            valid_idents: valid_idents,\n+            valid_idents,\n         }\n     }\n }\n@@ -66,7 +66,7 @@ struct Parser<'a> {\n \n impl<'a> Parser<'a> {\n     fn new(parser: pulldown_cmark::Parser<'a>) -> Self {\n-        Self { parser: parser }\n+        Self { parser }\n     }\n }\n "}, {"sha": "aeae5fc6ced8a64e4a09a56e4beadd963ac2b3a2", "filename": "clippy_lints/src/entry.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6f3f25878f2271911e4b6de4d0cf86accc397455/clippy_lints%2Fsrc%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f3f25878f2271911e4b6de4d0cf86accc397455/clippy_lints%2Fsrc%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fentry.rs?ref=6f3f25878f2271911e4b6de4d0cf86accc397455", "patch": "@@ -55,24 +55,24 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for HashMapLint {\n                     };\n \n                     let mut visitor = InsertVisitor {\n-                        cx: cx,\n+                        cx,\n                         span: expr.span,\n-                        ty: ty,\n-                        map: map,\n-                        key: key,\n-                        sole_expr: sole_expr,\n+                        ty,\n+                        map,\n+                        key,\n+                        sole_expr,\n                     };\n \n                     walk_expr(&mut visitor, &**then_block);\n                 }\n             } else if let Some(ref else_block) = *else_block {\n                 if let Some((ty, map, key)) = check_cond(cx, check) {\n                     let mut visitor = InsertVisitor {\n-                        cx: cx,\n+                        cx,\n                         span: expr.span,\n-                        ty: ty,\n-                        map: map,\n-                        key: key,\n+                        ty,\n+                        map,\n+                        key,\n                         sole_expr: false,\n                     };\n "}, {"sha": "f1572043024f69a76067feeb60ee50a1f00bb4f9", "filename": "clippy_lints/src/enum_clike.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f3f25878f2271911e4b6de4d0cf86accc397455/clippy_lints%2Fsrc%2Fenum_clike.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f3f25878f2271911e4b6de4d0cf86accc397455/clippy_lints%2Fsrc%2Fenum_clike.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_clike.rs?ref=6f3f25878f2271911e4b6de4d0cf86accc397455", "patch": "@@ -70,11 +70,11 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnportableVariant {\n                         match ty.sty {\n                             ty::TyInt(IntTy::Isize) => {\n                                 let val = ((val as i128) << 64) >> 64;\n-                                if val <= i32::max_value() as i128 && val >= i32::min_value() as i128 {\n+                                if val <= i128::from(i32::max_value()) && val >= i128::from(i32::min_value()) {\n                                     continue;\n                                 }\n                             }\n-                            ty::TyUint(UintTy::Usize) if val > u32::max_value() as u128 => {},\n+                            ty::TyUint(UintTy::Usize) if val > u128::from(u32::max_value()) => {},\n                             _ => continue,\n                         }\n                         span_lint("}, {"sha": "4a5dc1cc2862f2b80ceb1c4daa606398f2eaf0f5", "filename": "clippy_lints/src/enum_variants.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f3f25878f2271911e4b6de4d0cf86accc397455/clippy_lints%2Fsrc%2Fenum_variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f3f25878f2271911e4b6de4d0cf86accc397455/clippy_lints%2Fsrc%2Fenum_variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_variants.rs?ref=6f3f25878f2271911e4b6de4d0cf86accc397455", "patch": "@@ -107,7 +107,7 @@ impl EnumVariantNames {\n     pub fn new(threshold: u64) -> Self {\n         Self {\n             modules: Vec::new(),\n-            threshold: threshold,\n+            threshold,\n         }\n     }\n }"}, {"sha": "8cd0aaee9afb984aaaa6d4b6915c086666ae13c7", "filename": "clippy_lints/src/escape.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f3f25878f2271911e4b6de4d0cf86accc397455/clippy_lints%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f3f25878f2271911e4b6de4d0cf86accc397455/clippy_lints%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fescape.rs?ref=6f3f25878f2271911e4b6de4d0cf86accc397455", "patch": "@@ -66,7 +66,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n     ) {\n         let fn_def_id = cx.tcx.hir.local_def_id(node_id);\n         let mut v = EscapeDelegate {\n-            cx: cx,\n+            cx,\n             set: NodeSet(),\n             too_large_for_stack: self.too_large_for_stack,\n         };"}, {"sha": "1ca15e4d24f916ee0130a8e95ec85c114647d8a3", "filename": "clippy_lints/src/eval_order_dependence.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6f3f25878f2271911e4b6de4d0cf86accc397455/clippy_lints%2Fsrc%2Feval_order_dependence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f3f25878f2271911e4b6de4d0cf86accc397455/clippy_lints%2Fsrc%2Feval_order_dependence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feval_order_dependence.rs?ref=6f3f25878f2271911e4b6de4d0cf86accc397455", "patch": "@@ -67,8 +67,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for EvalOrderDependence {\n                     if path.segments.len() == 1 {\n                         if let def::Def::Local(var) = cx.tables.qpath_def(qpath, lhs.hir_id) {\n                             let mut visitor = ReadVisitor {\n-                                cx: cx,\n-                                var: var,\n+                                cx,\n+                                var,\n                                 write_expr: expr,\n                                 last_expr: expr,\n                             };\n@@ -82,13 +82,13 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for EvalOrderDependence {\n     }\n     fn check_stmt(&mut self, cx: &LateContext<'a, 'tcx>, stmt: &'tcx Stmt) {\n         match stmt.node {\n-            StmtExpr(ref e, _) | StmtSemi(ref e, _) => DivergenceVisitor { cx: cx }.maybe_walk_expr(e),\n+            StmtExpr(ref e, _) | StmtSemi(ref e, _) => DivergenceVisitor { cx }.maybe_walk_expr(e),\n             StmtDecl(ref d, _) => if let DeclLocal(ref local) = d.node {\n                 if let Local {\n                     init: Some(ref e), ..\n                 } = **local\n                 {\n-                    DivergenceVisitor { cx: cx }.visit_expr(e);\n+                    DivergenceVisitor { cx }.visit_expr(e);\n                 }\n             },\n         }"}, {"sha": "4bf4aafcc4eed818878b9b1a2505aa8526b20399", "filename": "clippy_lints/src/functions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f3f25878f2271911e4b6de4d0cf86accc397455/clippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f3f25878f2271911e4b6de4d0cf86accc397455/clippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions.rs?ref=6f3f25878f2271911e4b6de4d0cf86accc397455", "patch": "@@ -62,7 +62,7 @@ pub struct Functions {\n impl Functions {\n     pub fn new(threshold: u64) -> Self {\n         Self {\n-            threshold: threshold,\n+            threshold,\n         }\n     }\n }\n@@ -156,7 +156,7 @@ impl<'a, 'tcx> Functions {\n             if !raw_ptrs.is_empty() {\n                 let tables = cx.tcx.body_tables(body.id());\n                 let mut v = DerefVisitor {\n-                    cx: cx,\n+                    cx,\n                     ptrs: raw_ptrs,\n                     tables,\n                 };"}, {"sha": "99b7812472a79dfed760aa4b1f3f12966f797772", "filename": "clippy_lints/src/inline_fn_without_body.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6f3f25878f2271911e4b6de4d0cf86accc397455/clippy_lints%2Fsrc%2Finline_fn_without_body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f3f25878f2271911e4b6de4d0cf86accc397455/clippy_lints%2Fsrc%2Finline_fn_without_body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finline_fn_without_body.rs?ref=6f3f25878f2271911e4b6de4d0cf86accc397455", "patch": "@@ -37,11 +37,8 @@ impl LintPass for Pass {\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n     fn check_trait_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx TraitItem) {\n-        match item.node {\n-            TraitItemKind::Method(_, TraitMethod::Required(_)) => {\n-                check_attrs(cx, &item.name, &item.attrs);\n-            },\n-            _ => {},\n+        if let TraitItemKind::Method(_, TraitMethod::Required(_)) = item.node {\n+            check_attrs(cx, &item.name, &item.attrs);\n         }\n     }\n }"}, {"sha": "668e8e992ec43a5b32ca9dcf76fe38ee10fef038", "filename": "clippy_lints/src/large_enum_variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f3f25878f2271911e4b6de4d0cf86accc397455/clippy_lints%2Fsrc%2Flarge_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f3f25878f2271911e4b6de4d0cf86accc397455/clippy_lints%2Fsrc%2Flarge_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flarge_enum_variant.rs?ref=6f3f25878f2271911e4b6de4d0cf86accc397455", "patch": "@@ -35,7 +35,7 @@ pub struct LargeEnumVariant {\n impl LargeEnumVariant {\n     pub fn new(maximum_size_difference_allowed: u64) -> Self {\n         Self {\n-            maximum_size_difference_allowed: maximum_size_difference_allowed,\n+            maximum_size_difference_allowed,\n         }\n     }\n }"}, {"sha": "257f619ec29c06991db0434a9d9bcc2397f3c3e3", "filename": "clippy_lints/src/let_if_seq.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6f3f25878f2271911e4b6de4d0cf86accc397455/clippy_lints%2Fsrc%2Flet_if_seq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f3f25878f2271911e4b6de4d0cf86accc397455/clippy_lints%2Fsrc%2Flet_if_seq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_if_seq.rs?ref=6f3f25878f2271911e4b6de4d0cf86accc397455", "patch": "@@ -170,7 +170,7 @@ fn check_assign<'a, 'tcx>(\n         if decl == local_id;\n         then {\n             let mut v = UsedVisitor {\n-                cx: cx,\n+                cx,\n                 id: decl,\n                 used: false,\n             };\n@@ -192,8 +192,8 @@ fn check_assign<'a, 'tcx>(\n \n fn used_in_expr<'a, 'tcx: 'a>(cx: &LateContext<'a, 'tcx>, id: ast::NodeId, expr: &'tcx hir::Expr) -> bool {\n     let mut v = UsedVisitor {\n-        cx: cx,\n-        id: id,\n+        cx,\n+        id,\n         used: false,\n     };\n     hir::intravisit::walk_expr(&mut v, expr);"}, {"sha": "d508a17a2645c4e6e1ca1b7cae01e0a5632853d1", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6f3f25878f2271911e4b6de4d0cf86accc397455/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f3f25878f2271911e4b6de4d0cf86accc397455/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=6f3f25878f2271911e4b6de4d0cf86accc397455", "patch": "@@ -8,9 +8,8 @@\n #![feature(slice_patterns)]\n #![feature(stmt_expr_attributes)]\n #![feature(conservative_impl_trait)]\n-#![feature(inclusive_range_syntax, range_contains)]\n+#![feature(range_contains)]\n #![feature(macro_vis_matcher)]\n-#![feature(dotdoteq_in_patterns)]\n #![allow(unknown_lints, indexing_slicing, shadow_reuse, missing_docs_in_private_items)]\n #![recursion_limit = \"256\"]\n "}, {"sha": "f2381cc39eb690ef698527f3b99a3430e0aedcc6", "filename": "clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f3f25878f2271911e4b6de4d0cf86accc397455/clippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f3f25878f2271911e4b6de4d0cf86accc397455/clippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flifetimes.rs?ref=6f3f25878f2271911e4b6de4d0cf86accc397455", "patch": "@@ -261,7 +261,7 @@ struct RefVisitor<'a, 'tcx: 'a> {\n impl<'v, 't> RefVisitor<'v, 't> {\n     fn new(cx: &'v LateContext<'v, 't>) -> Self {\n         Self {\n-            cx: cx,\n+            cx,\n             lts: Vec::new(),\n             abort: false,\n         }"}, {"sha": "b505a4c30a5a9a7f5c886ca1db6bbe4dcfcb036d", "filename": "clippy_lints/src/literal_representation.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6f3f25878f2271911e4b6de4d0cf86accc397455/clippy_lints%2Fsrc%2Fliteral_representation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f3f25878f2271911e4b6de4d0cf86accc397455/clippy_lints%2Fsrc%2Fliteral_representation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fliteral_representation.rs?ref=6f3f25878f2271911e4b6de4d0cf86accc397455", "patch": "@@ -138,11 +138,11 @@ impl<'a> DigitInfo<'a> {\n                 let suffix_start = if last_d == '_' { d_idx - 1 } else { d_idx };\n                 let (digits, suffix) = sans_prefix.split_at(suffix_start);\n                 return Self {\n-                    digits: digits,\n-                    radix: radix,\n-                    prefix: prefix,\n+                    digits,\n+                    radix,\n+                    prefix,\n                     suffix: Some(suffix),\n-                    float: float,\n+                    float,\n                 };\n             }\n             last_d = d\n@@ -151,10 +151,10 @@ impl<'a> DigitInfo<'a> {\n         // No suffix found\n         Self {\n             digits: sans_prefix,\n-            radix: radix,\n-            prefix: prefix,\n+            radix,\n+            prefix,\n             suffix: None,\n-            float: float,\n+            float,\n         }\n     }\n \n@@ -426,7 +426,7 @@ impl EarlyLintPass for LiteralRepresentation {\n impl LiteralRepresentation {\n     pub fn new(threshold: u64) -> Self {\n         Self {\n-            threshold: threshold,\n+            threshold,\n         }\n     }\n     fn check_lit(&self, cx: &EarlyContext, lit: &Lit) {\n@@ -444,7 +444,7 @@ impl LiteralRepresentation {\n                         .filter(|&c| c != '_')\n                         .collect::<String>()\n                         .parse::<u128>().unwrap();\n-                    if val < self.threshold as u128 {\n+                    if val < u128::from(self.threshold) {\n                         return\n                     }\n                     let hex = format!(\"{:#X}\", val);"}, {"sha": "7bf814afa3df171cbb4e602cb30d1c6707e67146", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6f3f25878f2271911e4b6de4d0cf86accc397455/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f3f25878f2271911e4b6de4d0cf86accc397455/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=6f3f25878f2271911e4b6de4d0cf86accc397455", "patch": "@@ -975,7 +975,7 @@ fn check_for_loop_range<'a, 'tcx>(\n         // the var must be a single name\n         if let PatKind::Binding(_, canonical_id, ref ident, _) = pat.node {\n             let mut visitor = VarVisitor {\n-                cx: cx,\n+                cx,\n                 var: canonical_id,\n                 indexed_mut: HashSet::new(),\n                 indexed_indirectly: HashMap::new(),\n@@ -1289,7 +1289,7 @@ fn check_for_loop_explicit_counter<'a, 'tcx>(\n ) {\n     // Look for variables that are incremented once per loop iteration.\n     let mut visitor = IncrementVisitor {\n-        cx: cx,\n+        cx,\n         states: HashMap::new(),\n         depth: 0,\n         done: false,\n@@ -1309,7 +1309,7 @@ fn check_for_loop_explicit_counter<'a, 'tcx>(\n                 .filter(|&(_, v)| *v == VarState::IncrOnce)\n             {\n                 let mut visitor2 = InitializeVisitor {\n-                    cx: cx,\n+                    cx,\n                     end_expr: expr,\n                     var_id: *id,\n                     state: VarState::IncrOnce,\n@@ -1728,8 +1728,8 @@ fn is_iterator_used_after_while_let<'a, 'tcx: 'a>(cx: &LateContext<'a, 'tcx>, it\n         None => return false,\n     };\n     let mut visitor = VarUsedAfterLoopVisitor {\n-        cx: cx,\n-        def_id: def_id,\n+        cx,\n+        def_id,\n         iter_expr_id: iter_expr.id,\n         past_while_let: false,\n         var_used_after_while_let: false,\n@@ -2048,7 +2048,7 @@ fn is_loop_nested(cx: &LateContext, loop_expr: &Expr, iter_expr: &Expr) -> bool\n             },\n             Some(NodeBlock(block)) => {\n                 let mut block_visitor = LoopNestVisitor {\n-                    id: id,\n+                    id,\n                     iterator: iter_name,\n                     nesting: Unknown,\n                 };\n@@ -2189,7 +2189,7 @@ struct MutableVarsVisitor<'a, 'tcx: 'a> {\n impl<'a, 'tcx> Visitor<'tcx> for MutableVarsVisitor<'a, 'tcx> {\n     fn visit_expr(&mut self, ex: &'tcx Expr) {\n         match ex.node {\n-            ExprPath(_) => if let Some(node_id) = check_for_mutability(self.cx, &ex) {\n+            ExprPath(_) => if let Some(node_id) = check_for_mutability(self.cx, ex) {\n                 self.ids.insert(node_id, None);\n             },\n \n@@ -2213,7 +2213,7 @@ struct MutVarsDelegate {\n \n impl<'tcx> MutVarsDelegate {\n     fn update(&mut self, cat: &'tcx Categorization, sp: Span) {\n-        if let &Categorization::Local(id) = cat {\n+        if let Categorization::Local(id) = *cat {\n             if let Some(span) = self.mut_spans.get_mut(&id) {    \n                 *span = Some(sp)\n             }"}, {"sha": "2c401bd499431fa6be5e4281f886e1f213cf4c1e", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f3f25878f2271911e4b6de4d0cf86accc397455/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f3f25878f2271911e4b6de4d0cf86accc397455/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=6f3f25878f2271911e4b6de4d0cf86accc397455", "patch": "@@ -760,7 +760,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n             },\n             hir::ExprBinary(op, ref lhs, ref rhs) if op.node == hir::BiEq || op.node == hir::BiNe => {\n                 let mut info = BinaryExprInfo {\n-                    expr: expr,\n+                    expr,\n                     chain: lhs,\n                     other: rhs,\n                     eq: op.node == hir::BiEq,"}, {"sha": "ca1592271b378bf9754e92fb030780891184c705", "filename": "clippy_lints/src/mut_mut.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f3f25878f2271911e4b6de4d0cf86accc397455/clippy_lints%2Fsrc%2Fmut_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f3f25878f2271911e4b6de4d0cf86accc397455/clippy_lints%2Fsrc%2Fmut_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_mut.rs?ref=6f3f25878f2271911e4b6de4d0cf86accc397455", "patch": "@@ -33,13 +33,13 @@ impl LintPass for MutMut {\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MutMut {\n     fn check_block(&mut self, cx: &LateContext<'a, 'tcx>, block: &'tcx hir::Block) {\n-        intravisit::walk_block(&mut MutVisitor { cx: cx }, block);\n+        intravisit::walk_block(&mut MutVisitor { cx }, block);\n     }\n \n     fn check_ty(&mut self, cx: &LateContext<'a, 'tcx>, ty: &'tcx hir::Ty) {\n         use rustc::hir::intravisit::Visitor;\n \n-        MutVisitor { cx: cx }.visit_ty(ty);\n+        MutVisitor { cx }.visit_ty(ty);\n     }\n }\n "}, {"sha": "9c801ba7495876697675482fc0c153b117808ece", "filename": "clippy_lints/src/needless_continue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f3f25878f2271911e4b6de4d0cf86accc397455/clippy_lints%2Fsrc%2Fneedless_continue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f3f25878f2271911e4b6de4d0cf86accc397455/clippy_lints%2Fsrc%2Fneedless_continue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_continue.rs?ref=6f3f25878f2271911e4b6de4d0cf86accc397455", "patch": "@@ -337,10 +337,10 @@ fn check_and_warn<'a>(ctx: &EarlyContext, expr: &'a ast::Expr) {\n             with_if_expr(stmt, |if_expr, cond, then_block, else_expr| {\n                 let data = &LintData {\n                     stmt_idx: i,\n-                    if_expr: if_expr,\n+                    if_expr,\n                     if_cond: cond,\n                     if_block: then_block,\n-                    else_expr: else_expr,\n+                    else_expr,\n                     block_stmts: &loop_block.stmts,\n                 };\n                 if needless_continue_in_else(else_expr) {"}, {"sha": "b189fcbff4f4173f9011288640a9e17d73619a68", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f3f25878f2271911e4b6de4d0cf86accc397455/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f3f25878f2271911e4b6de4d0cf86accc397455/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=6f3f25878f2271911e4b6de4d0cf86accc397455", "patch": "@@ -203,7 +203,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n \n                     // Dereference suggestion\n                     let sugg = |db: &mut DiagnosticBuilder| {\n-                        if let ty::TypeVariants::TyAdt(ref def, ..) = ty.sty {\n+                        if let ty::TypeVariants::TyAdt(def, ..) = ty.sty {\n                             if let Some(span) = cx.tcx.hir.span_if_local(def.did) {\n                                 let param_env = ty::ParamEnv::empty();\n                                 if param_env.can_type_implement_copy(cx.tcx, ty, span).is_ok() {\n@@ -307,7 +307,7 @@ struct MovedVariablesCtxt<'a, 'tcx: 'a> {\n impl<'a, 'tcx> MovedVariablesCtxt<'a, 'tcx> {\n     fn new(cx: &'a LateContext<'a, 'tcx>) -> Self {\n         Self {\n-            cx: cx,\n+            cx,\n             moved_vars: HashSet::new(),\n             spans_need_deref: HashMap::new(),\n         }"}, {"sha": "a267900fcbbf5f4573f9309c27c5d2a342284a62", "filename": "clippy_lints/src/non_expressive_names.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6f3f25878f2271911e4b6de4d0cf86accc397455/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f3f25878f2271911e4b6de4d0cf86accc397455/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_expressive_names.rs?ref=6f3f25878f2271911e4b6de4d0cf86accc397455", "patch": "@@ -267,7 +267,7 @@ impl<'a, 'tcx, 'b> SimilarNamesNameVisitor<'a, 'tcx, 'b> {\n         self.0.names.push(ExistingName {\n             whitelist: get_whitelist(&interned_name).unwrap_or(&[]),\n             interned: interned_name,\n-            span: span,\n+            span,\n             len: count,\n         });\n     }\n@@ -329,8 +329,8 @@ fn do_check(lint: &mut NonExpressiveNames, cx: &EarlyContext, attrs: &[Attribute\n     if !attr::contains_name(attrs, \"test\") {\n         let mut visitor = SimilarNamesLocalVisitor {\n             names: Vec::new(),\n-            cx: cx,\n-            lint: lint,\n+            cx,\n+            lint,\n             single_char_names: Vec::new(),\n         };\n         // initialize with function arguments"}, {"sha": "435812bf96229a87cc682d5517bb09c3d8e68ed3", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/6f3f25878f2271911e4b6de4d0cf86accc397455/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f3f25878f2271911e4b6de4d0cf86accc397455/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=6f3f25878f2271911e4b6de4d0cf86accc397455", "patch": "@@ -225,19 +225,16 @@ fn check_fn(cx: &LateContext, decl: &FnDecl, fn_id: NodeId, opt_body_id: Option<\n                     if let [ref inner] = *params.types;\n                     then {\n                         let replacement = snippet_opt(cx, inner.span);\n-                        match replacement {\n-                            Some(r) => {\n-                                span_lint_and_then(\n-                                    cx,\n-                                    PTR_ARG,\n-                                    arg.span,\n-                                    \"using a reference to `Cow` is not recommended.\",\n-                                    |db| {\n-                                        db.span_suggestion(arg.span, \"change this to\", \"&\".to_owned() + &r);\n-                                    },\n-                                );\n-                            },\n-                            None => (),\n+                        if let Some(r) = replacement {\n+                            span_lint_and_then(\n+                                cx,\n+                                PTR_ARG,\n+                                arg.span,\n+                                \"using a reference to `Cow` is not recommended.\",\n+                                |db| {\n+                                    db.span_suggestion(arg.span, \"change this to\", \"&\".to_owned() + &r);\n+                                },\n+                            );\n                         }\n                     }\n                 }"}, {"sha": "39fcc2b1b8f829a224d13b4208cfdab98c54f135", "filename": "clippy_lints/src/question_mark.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6f3f25878f2271911e4b6de4d0cf86accc397455/clippy_lints%2Fsrc%2Fquestion_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f3f25878f2271911e4b6de4d0cf86accc397455/clippy_lints%2Fsrc%2Fquestion_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fquestion_mark.rs?ref=6f3f25878f2271911e4b6de4d0cf86accc397455", "patch": "@@ -55,7 +55,7 @@ impl QuestionMarkPass {\n             if let ExprIf(ref if_expr, ref body, _) = expr.node;\n             if let ExprMethodCall(ref segment, _, ref args) = if_expr.node;\n             if segment.name == \"is_none\";\n-            if Self::expression_returns_none(cx, &body);\n+            if Self::expression_returns_none(cx, body);\n             if let Some(subject) = args.get(0);\n             if Self::is_option(cx, subject);\n \n@@ -64,7 +64,7 @@ impl QuestionMarkPass {\n                     cx,\n                     QUESTION_MARK,\n                     expr.span,\n-                    &format!(\"this block may be rewritten with the `?` operator\"),\n+                    \"this block may be rewritten with the `?` operator\",\n                     |db| {\n                         let receiver_str = &Sugg::hir(cx, subject, \"..\");\n \n@@ -82,7 +82,7 @@ impl QuestionMarkPass {\n     fn is_option(cx: &LateContext, expression: &Expr) -> bool {\n         let expr_ty = cx.tables.expr_ty(expression);\n \n-        return match_type(cx, expr_ty, &OPTION);\n+        match_type(cx, expr_ty, &OPTION)\n     }\n \n     fn expression_returns_none(cx: &LateContext, expression: &Expr) -> bool {\n@@ -127,7 +127,7 @@ impl QuestionMarkPass {\n             return Some(ret_expr.clone());\n         }\n \n-        return None;\n+        None\n     }\n }\n "}, {"sha": "82a1799ffd8656bad3e80383d0b6742c66171b5c", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6f3f25878f2271911e4b6de4d0cf86accc397455/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f3f25878f2271911e4b6de4d0cf86accc397455/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=6f3f25878f2271911e4b6de4d0cf86accc397455", "patch": "@@ -985,7 +985,7 @@ pub struct TypeComplexityPass {\n impl TypeComplexityPass {\n     pub fn new(threshold: u64) -> Self {\n         Self {\n-            threshold: threshold,\n+            threshold,\n         }\n     }\n }\n@@ -1241,7 +1241,7 @@ fn is_cast_between_fixed_and_target<'a, 'tcx>(\n         return is_isize_or_usize(precast_ty) != is_isize_or_usize(cast_ty)\n     }\n \n-    return false;\n+    false\n }\n \n fn detect_absurd_comparison<'a, 'tcx>(\n@@ -1315,8 +1315,8 @@ fn detect_extreme_expr<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) -\n         _ => return None,\n     };\n     Some(ExtremeExpr {\n-        which: which,\n-        expr: expr,\n+        which,\n+        expr,\n     })\n }\n "}, {"sha": "ee708eb13aead2b92f9da1e22d46946099635bf9", "filename": "clippy_lints/src/unused_label.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f3f25878f2271911e4b6de4d0cf86accc397455/clippy_lints%2Fsrc%2Funused_label.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f3f25878f2271911e4b6de4d0cf86accc397455/clippy_lints%2Fsrc%2Funused_label.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_label.rs?ref=6f3f25878f2271911e4b6de4d0cf86accc397455", "patch": "@@ -55,7 +55,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedLabel {\n         }\n \n         let mut v = UnusedLabelVisitor {\n-            cx: cx,\n+            cx,\n             labels: HashMap::new(),\n         };\n         walk_fn(&mut v, kind, decl, body.id(), span, fn_id);"}, {"sha": "a1390596cda769eea098a1847524ef291319e7c3", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f3f25878f2271911e4b6de4d0cf86accc397455/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f3f25878f2271911e4b6de4d0cf86accc397455/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=6f3f25878f2271911e4b6de4d0cf86accc397455", "patch": "@@ -66,8 +66,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UseSelf {\n                 };\n                 if should_check {\n                     let visitor = &mut UseSelfVisitor {\n-                        item_path: item_path,\n-                        cx: cx,\n+                        item_path,\n+                        cx,\n                     };\n                     for impl_item_ref in refs {\n                         visitor.visit_impl_item(cx.tcx.hir.impl_item(impl_item_ref.id));"}, {"sha": "44e5e84c4a06342220419cf70b1279d399d37185", "filename": "clippy_lints/src/utils/author.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f3f25878f2271911e4b6de4d0cf86accc397455/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f3f25878f2271911e4b6de4d0cf86accc397455/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=6f3f25878f2271911e4b6de4d0cf86accc397455", "patch": "@@ -274,7 +274,7 @@ impl<'tcx> Visitor<'tcx> for PrintVisitor {\n                 if let Ty_::TyPath(ref qp) = ty.node {\n                     println!(\"    if let Ty_::TyPath(ref {}) = {}.node;\", qp_label, cast_ty);\n                     self.current = qp_label;\n-                    self.print_qpath(&qp);\n+                    self.print_qpath(qp);\n                 }\n                 self.current = cast_pat;\n                 self.visit_expr(expr);"}, {"sha": "e790184a7ababf959565d0e69216d2614de4ffde", "filename": "clippy_lints/src/utils/hir_utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f3f25878f2271911e4b6de4d0cf86accc397455/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f3f25878f2271911e4b6de4d0cf86accc397455/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs?ref=6f3f25878f2271911e4b6de4d0cf86accc397455", "patch": "@@ -24,7 +24,7 @@ pub struct SpanlessEq<'a, 'tcx: 'a> {\n impl<'a, 'tcx: 'a> SpanlessEq<'a, 'tcx> {\n     pub fn new(cx: &'a LateContext<'a, 'tcx>) -> Self {\n         Self {\n-            cx: cx,\n+            cx,\n             ignore_fn: false,\n         }\n     }\n@@ -295,7 +295,7 @@ pub struct SpanlessHash<'a, 'tcx: 'a> {\n impl<'a, 'tcx: 'a> SpanlessHash<'a, 'tcx> {\n     pub fn new(cx: &'a LateContext<'a, 'tcx>) -> Self {\n         Self {\n-            cx: cx,\n+            cx,\n             s: DefaultHasher::new(),\n         }\n     }"}, {"sha": "625ef63a3dc67c2e53b80ec2b909940955e9e4df", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f3f25878f2271911e4b6de4d0cf86accc397455/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f3f25878f2271911e4b6de4d0cf86accc397455/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=6f3f25878f2271911e4b6de4d0cf86accc397455", "patch": "@@ -123,7 +123,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LintWithoutLintPass {\n             } else if is_lint_array_type(ty) && item.vis == Visibility::Inherited && item.name == \"ARRAY\" {\n                 let mut collector = LintCollector {\n                     output: &mut self.registered_lints,\n-                    cx: cx,\n+                    cx,\n                 };\n                 collector.visit_expr(&cx.tcx.hir.body(body_id).value);\n             }"}, {"sha": "125602319f7bc2a619542a50e0baf5ea377c34ea", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f3f25878f2271911e4b6de4d0cf86accc397455/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f3f25878f2271911e4b6de4d0cf86accc397455/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=6f3f25878f2271911e4b6de4d0cf86accc397455", "patch": "@@ -390,7 +390,7 @@ impl<'tcx> Visitor<'tcx> for ContainsName {\n /// check if an `Expr` contains a certain name\n pub fn contains_name(name: Name, expr: &Expr) -> bool {\n     let mut cn = ContainsName {\n-        name: name,\n+        name,\n         result: false,\n     };\n     cn.visit_expr(expr);"}, {"sha": "4ca6e5cbf730169c54287674b237e1808b0f29eb", "filename": "clippy_lints/src/utils/sugg.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f3f25878f2271911e4b6de4d0cf86accc397455/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f3f25878f2271911e4b6de4d0cf86accc397455/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fsugg.rs?ref=6f3f25878f2271911e4b6de4d0cf86accc397455", "patch": "@@ -220,8 +220,8 @@ impl<T> ParenHelper<T> {\n     /// Build a `ParenHelper`.\n     fn new(paren: bool, wrapped: T) -> Self {\n         Self {\n-            paren: paren,\n-            wrapped: wrapped,\n+            paren,\n+            wrapped,\n         }\n     }\n }"}, {"sha": "78bccb74ab9c3027599dd7b03d04aae1994c1c5c", "filename": "src/driver.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f3f25878f2271911e4b6de4d0cf86accc397455/src%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f3f25878f2271911e4b6de4d0cf86accc397455/src%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver.rs?ref=6f3f25878f2271911e4b6de4d0cf86accc397455", "patch": "@@ -193,7 +193,5 @@ pub fn main() {\n     }\n \n     let mut ccc = ClippyCompilerCalls::new(clippy_enabled);\n-    rustc_driver::run(move || {\n-        rustc_driver::run_compiler(&args, &mut ccc, None, None)\n-    });\n+    rustc_driver::run(move || rustc_driver::run_compiler(&args, &mut ccc, None, None));\n }"}, {"sha": "95e1fc0c28c0c05997da9ae3bf3737732e826d7e", "filename": "src/main.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6f3f25878f2271911e4b6de4d0cf86accc397455/src%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f3f25878f2271911e4b6de4d0cf86accc397455/src%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmain.rs?ref=6f3f25878f2271911e4b6de4d0cf86accc397455", "patch": "@@ -67,7 +67,10 @@ pub fn main() {\n     let mut metadata = if let Ok(metadata) = cargo_metadata::metadata(manifest_path_arg.as_ref().map(AsRef::as_ref)) {\n         metadata\n     } else {\n-        println!(\"{:?}\", cargo_metadata::metadata(manifest_path_arg.as_ref().map(AsRef::as_ref)));\n+        println!(\n+            \"{:?}\",\n+            cargo_metadata::metadata(manifest_path_arg.as_ref().map(AsRef::as_ref))\n+        );\n         let _ = io::stderr().write_fmt(format_args!(\"error: Could not obtain cargo metadata.\\n\"));\n         process::exit(101);\n     };"}, {"sha": "9b9820f2b521894e44c64e33f9532c5fb232fa19", "filename": "tests/compile-test.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6f3f25878f2271911e4b6de4d0cf86accc397455/tests%2Fcompile-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f3f25878f2271911e4b6de4d0cf86accc397455/tests%2Fcompile-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-test.rs?ref=6f3f25878f2271911e4b6de4d0cf86accc397455", "patch": "@@ -3,7 +3,7 @@\n extern crate compiletest_rs as compiletest;\n extern crate test;\n \n-use std::path::{PathBuf, Path};\n+use std::path::{Path, PathBuf};\n use std::env::{set_var, var};\n \n fn clippy_driver_path() -> PathBuf {\n@@ -43,7 +43,10 @@ fn config(dir: &'static str, mode: &'static str) -> compiletest::Config {\n         config.run_lib_path = rustc_lib_path();\n         config.compile_lib_path = rustc_lib_path();\n     }\n-    config.target_rustcflags = Some(format!(\"-L {0} -L {0}/deps -Dwarnings\", host_libs().display()));\n+    config.target_rustcflags = Some(format!(\n+        \"-L {0} -L {0}/deps -Dwarnings\",\n+        host_libs().display()\n+    ));\n \n     config.mode = cfg_mode;\n     config.build_base = if rustc_test_suite().is_some() {"}, {"sha": "ed6451a3eb68e0c2dced9c4bf3046ef0a3d68aae", "filename": "tests/dogfood.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6f3f25878f2271911e4b6de4d0cf86accc397455/tests%2Fdogfood.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f3f25878f2271911e4b6de4d0cf86accc397455/tests%2Fdogfood.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdogfood.rs?ref=6f3f25878f2271911e4b6de4d0cf86accc397455", "patch": "@@ -11,9 +11,12 @@ fn dogfood() {\n         std::env::set_current_dir(root_dir.join(d)).unwrap();\n         let output = std::process::Command::new(\"cargo\")\n             .arg(\"run\")\n-            .arg(\"--bin\").arg(\"cargo-clippy\")\n-            .arg(\"--manifest-path\").arg(root_dir.join(\"Cargo.toml\"))\n-            .output().unwrap();\n+            .arg(\"--bin\")\n+            .arg(\"cargo-clippy\")\n+            .arg(\"--manifest-path\")\n+            .arg(root_dir.join(\"Cargo.toml\"))\n+            .output()\n+            .unwrap();\n         println!(\"status: {}\", output.status);\n         println!(\"stdout: {}\", String::from_utf8_lossy(&output.stdout));\n         println!(\"stderr: {}\", String::from_utf8_lossy(&output.stderr));"}, {"sha": "8dfb8e42d6f029f44372dfa3ecec44ff4a81cbc0", "filename": "tests/matches.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6f3f25878f2271911e4b6de4d0cf86accc397455/tests%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f3f25878f2271911e4b6de4d0cf86accc397455/tests%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmatches.rs?ref=6f3f25878f2271911e4b6de4d0cf86accc397455", "patch": "@@ -9,16 +9,17 @@ fn test_overlapping() {\n     use clippy_lints::matches::overlapping;\n     use syntax::codemap::DUMMY_SP;\n \n-    let sp = |s, e| {\n-        clippy_lints::matches::SpannedRange {\n-            span: DUMMY_SP,\n-            node: (s, e),\n-        }\n+    let sp = |s, e| clippy_lints::matches::SpannedRange {\n+        span: DUMMY_SP,\n+        node: (s, e),\n     };\n \n     assert_eq!(None, overlapping::<u8>(&[]));\n     assert_eq!(None, overlapping(&[sp(1, Bound::Included(4))]));\n-    assert_eq!(None, overlapping(&[sp(1, Bound::Included(4)), sp(5, Bound::Included(6))]));\n+    assert_eq!(\n+        None,\n+        overlapping(&[sp(1, Bound::Included(4)), sp(5, Bound::Included(6))])\n+    );\n     assert_eq!(\n         None,\n         overlapping(&["}, {"sha": "588dc741d03c9276a56e96fd27778ab5e50a9bc7", "filename": "tests/needless_continue_helpers.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6f3f25878f2271911e4b6de4d0cf86accc397455/tests%2Fneedless_continue_helpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f3f25878f2271911e4b6de4d0cf86accc397455/tests%2Fneedless_continue_helpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fneedless_continue_helpers.rs?ref=6f3f25878f2271911e4b6de4d0cf86accc397455", "patch": "@@ -69,7 +69,6 @@ fn test_erode_from_front_no_brace() {\n     assert_eq!(expected, got);\n }\n \n-\n #[test]\n #[cfg_attr(rustfmt, rustfmt_skip)]\n fn test_erode_block() {"}, {"sha": "ff4af08a8a01e27718eb93f8f2fada82494122cc", "filename": "tests/versioncheck.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6f3f25878f2271911e4b6de4d0cf86accc397455/tests%2Fversioncheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f3f25878f2271911e4b6de4d0cf86accc397455/tests%2Fversioncheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fversioncheck.rs?ref=6f3f25878f2271911e4b6de4d0cf86accc397455", "patch": "@@ -7,10 +7,16 @@ fn check_that_clippy_lints_has_the_same_version_as_clippy() {\n     let clippy_meta = cargo_metadata::metadata(None).expect(\"could not obtain cargo metadata\");\n     std::env::set_current_dir(std::env::current_dir().unwrap().join(\"clippy_lints\")).unwrap();\n     let clippy_lints_meta = cargo_metadata::metadata(None).expect(\"could not obtain cargo metadata\");\n-    assert_eq!(clippy_lints_meta.packages[0].version, clippy_meta.packages[0].version);\n+    assert_eq!(\n+        clippy_lints_meta.packages[0].version,\n+        clippy_meta.packages[0].version\n+    );\n     for package in &clippy_meta.packages[0].dependencies {\n         if package.name == \"clippy_lints\" {\n-            assert_eq!(VersionReq::parse(&clippy_lints_meta.packages[0].version).unwrap(), package.req);\n+            assert_eq!(\n+                VersionReq::parse(&clippy_lints_meta.packages[0].version).unwrap(),\n+                package.req\n+            );\n             return;\n         }\n     }"}]}