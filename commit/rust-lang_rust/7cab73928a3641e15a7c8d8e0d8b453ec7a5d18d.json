{"sha": "7cab73928a3641e15a7c8d8e0d8b453ec7a5d18d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjYWI3MzkyOGEzNjQxZTE1YTdjOGQ4ZTBkOGI0NTNlYzdhNWQxOGQ=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-07-24T22:20:15Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-07-25T00:03:44Z"}, "message": "Don't treat git repos as non-existent when `ignore_git` is set\n\nThe new submodule handling depends on `is_git()` to be accurate to\ndecide whether it should handle submodules at all or not. Unfortunately,\n`is_git()` treated \"this directory does not have a git repository\" and\n\"this repository should not be used for SHA/version/commit date info\"\nthe same. This changes it to distinguish the two.\n\nTo clarify: ignore_get is set by default whenever channel == \"dev\", which it is by default whenever you're compiling locally. So basically everyone would hit this, not just people who had explicitly configured ignore_git.\n\nHere's an example of an error this fixes:\n\n```\n$ x build\nUpdating only changed submodules\nSubmodules updated in 0.01 seconds\n    Finished dev [unoptimized + debuginfo] target(s) in 0.17s\nwarning: x.py has made several changes recently you may want to look at\nhelp: consider looking at the changes in `src/bootstrap/CHANGELOG.md`\nnote: to silence this warning, add `changelog-seen = 2` at the top of `config.toml`\nBuilding stage0 std artifacts (x86_64-unknown-linux-gnu -> x86_64-unknown-linux-gnu)\n    Finished release [optimized] target(s) in 0.16s\nCopying stage0 std from stage0 (x86_64-unknown-linux-gnu -> x86_64-unknown-linux-gnu / x86_64-unknown-linux-gnu)\nBuilding LLVM for x86_64-unknown-linux-gnu\ndetected home dir change, cleaning out entire build directory\nrunning: \"cmake\" \"/home/joshua/rustc3/src/llvm-project/llvm\" \"-G\" \"Ninja\" \"-DLLVM_ENABLE_ASSERTIONS=OFF\" \"-DLLVM_TARGETS_TO_BUILD=AArch64;ARM;BPF;Hexagon;MSP430;Mips;NVPTX;PowerPC;RISCV;Sparc;SystemZ;WebAssembly;X86\" \"-DLLVM_EXPERIMENTAL_TARGETS_TO_BUILD=AVR\" \"-DLLVM_INCLUDE_EXAMPLES=OFF\" \"-DLLVM_INCLUDE_DOCS=OFF\" \"-DLLVM_INCLUDE_BENCHMARKS=OFF\" \"-DLLVM_ENABLE_TERMINFO=OFF\" \"-DLLVM_ENABLE_LIBEDIT=OFF\" \"-DLLVM_ENABLE_BINDINGS=OFF\" \"-DLLVM_ENABLE_Z3_SOLVER=OFF\" \"-DLLVM_PARALLEL_COMPILE_JOBS=48\" \"-DLLVM_TARGET_ARCH=x86_64\" \"-DLLVM_DEFAULT_TARGET_TRIPLE=x86_64-unknown-linux-gnu\" \"-DLLVM_ENABLE_ZLIB=ON\" \"-DLLVM_ENABLE_LIBXML2=OFF\" \"-DLLVM_VERSION_SUFFIX=-rust-dev\" \"-DCMAKE_INSTALL_MESSAGE=LAZY\" \"-DCMAKE_C_COMPILER=gcc\" \"-DCMAKE_CXX_COMPILER=g++\" \"-DCMAKE_ASM_COMPILER=gcc\" \"-DCMAKE_C_FLAGS=-ffunction-sections -fdata-sections -fPIC -m64\" \"-DCMAKE_CXX_FLAGS=-ffunction-sections -fdata-sections -fPIC -m64\" \"-DCMAKE_INSTALL_PREFIX=/home/joshua/rustc3/build/x86_64-unknown-linux-gnu/llvm\" \"-DCMAKE_ASM_FLAGS= -ffunction-sections -fdata-sections -fPIC -m64\" \"-DCMAKE_BUILD_TYPE=Release\"\nCMake Error: The source directory \"/home/joshua/rustc3/src/llvm-project/llvm\" does not exist.\nSpecify --help for usage, or press the help button on the CMake GUI.\nthread 'main' panicked at '\ncommand did not execute successfully, got: exit status: 1\n\nbuild script failed, must exit now', /home/joshua/.local/lib/cargo/registry/src/github.com-1ecc6299db9ec823/cmake-0.1.44/src/lib.rs:885:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n\tfinished in 0.783 seconds\nBuild completed unsuccessfully in 0:00:01\n```", "tree": {"sha": "ee1c767e716d4d40d7face6a76ef2f4c0a65dc53", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee1c767e716d4d40d7face6a76ef2f4c0a65dc53"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7cab73928a3641e15a7c8d8e0d8b453ec7a5d18d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7cab73928a3641e15a7c8d8e0d8b453ec7a5d18d", "html_url": "https://github.com/rust-lang/rust/commit/7cab73928a3641e15a7c8d8e0d8b453ec7a5d18d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7cab73928a3641e15a7c8d8e0d8b453ec7a5d18d/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18840b0719aa766a1bc49ea2eb5dc2e4cde7da3f", "url": "https://api.github.com/repos/rust-lang/rust/commits/18840b0719aa766a1bc49ea2eb5dc2e4cde7da3f", "html_url": "https://github.com/rust-lang/rust/commit/18840b0719aa766a1bc49ea2eb5dc2e4cde7da3f"}], "stats": {"total": 55, "additions": 37, "deletions": 18}, "files": [{"sha": "6478578c3c402cd3ab6625d8cb60729aa50b7c4a", "filename": "src/bootstrap/channel.rs", "status": "modified", "additions": 36, "deletions": 17, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/7cab73928a3641e15a7c8d8e0d8b453ec7a5d18d/src%2Fbootstrap%2Fchannel.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cab73928a3641e15a7c8d8e0d8b453ec7a5d18d/src%2Fbootstrap%2Fchannel.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fchannel.rs?ref=7cab73928a3641e15a7c8d8e0d8b453ec7a5d18d", "patch": "@@ -12,11 +12,16 @@ use build_helper::output;\n \n use crate::Build;\n \n-pub struct GitInfo {\n-    inner: Option<Info>,\n+pub enum GitInfo {\n+    /// This is not a git repository.\n+    Absent,\n+    /// This is a git repository.\n+    /// If the info should be used (`ignore_git` is false), this will be\n+    /// `Some`, otherwise it will be `None`.\n+    Present(Option<Info>),\n }\n \n-struct Info {\n+pub struct Info {\n     commit_date: String,\n     sha: String,\n     short_sha: String,\n@@ -25,14 +30,20 @@ struct Info {\n impl GitInfo {\n     pub fn new(ignore_git: bool, dir: &Path) -> GitInfo {\n         // See if this even begins to look like a git dir\n-        if ignore_git || !dir.join(\".git\").exists() {\n-            return GitInfo { inner: None };\n+        if !dir.join(\".git\").exists() {\n+            return GitInfo::Absent;\n         }\n \n         // Make sure git commands work\n         match Command::new(\"git\").arg(\"rev-parse\").current_dir(dir).output() {\n             Ok(ref out) if out.status.success() => {}\n-            _ => return GitInfo { inner: None },\n+            _ => return GitInfo::Absent,\n+        }\n+\n+        // If we're ignoring the git info, we don't actually need to collect it, just make sure this\n+        // was a git repo in the first place.\n+        if ignore_git {\n+            return GitInfo::Present(None);\n         }\n \n         // Ok, let's scrape some info\n@@ -48,30 +59,35 @@ impl GitInfo {\n         let short_ver_hash = output(\n             Command::new(\"git\").current_dir(dir).arg(\"rev-parse\").arg(\"--short=9\").arg(\"HEAD\"),\n         );\n-        GitInfo {\n-            inner: Some(Info {\n-                commit_date: ver_date.trim().to_string(),\n-                sha: ver_hash.trim().to_string(),\n-                short_sha: short_ver_hash.trim().to_string(),\n-            }),\n+        GitInfo::Present(Some(Info {\n+            commit_date: ver_date.trim().to_string(),\n+            sha: ver_hash.trim().to_string(),\n+            short_sha: short_ver_hash.trim().to_string(),\n+        }))\n+    }\n+\n+    fn info(&self) -> Option<&Info> {\n+        match self {\n+            GitInfo::Present(info) => info.as_ref(),\n+            GitInfo::Absent => None,\n         }\n     }\n \n     pub fn sha(&self) -> Option<&str> {\n-        self.inner.as_ref().map(|s| &s.sha[..])\n+        self.info().map(|s| &s.sha[..])\n     }\n \n     pub fn sha_short(&self) -> Option<&str> {\n-        self.inner.as_ref().map(|s| &s.short_sha[..])\n+        self.info().map(|s| &s.short_sha[..])\n     }\n \n     pub fn commit_date(&self) -> Option<&str> {\n-        self.inner.as_ref().map(|s| &s.commit_date[..])\n+        self.info().map(|s| &s.commit_date[..])\n     }\n \n     pub fn version(&self, build: &Build, num: &str) -> String {\n         let mut version = build.release(num);\n-        if let Some(ref inner) = self.inner {\n+        if let Some(ref inner) = self.info() {\n             version.push_str(\" (\");\n             version.push_str(&inner.short_sha);\n             version.push(' ');\n@@ -82,6 +98,9 @@ impl GitInfo {\n     }\n \n     pub fn is_git(&self) -> bool {\n-        self.inner.is_some()\n+        match self {\n+            GitInfo::Absent => false,\n+            GitInfo::Present(_) => true,\n+        }\n     }\n }"}, {"sha": "3d56650f7752ad70f8d851af2739ecca63931f6c", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7cab73928a3641e15a7c8d8e0d8b453ec7a5d18d/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cab73928a3641e15a7c8d8e0d8b453ec7a5d18d/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=7cab73928a3641e15a7c8d8e0d8b453ec7a5d18d", "patch": "@@ -1145,7 +1145,7 @@ impl Build {\n         match &self.config.channel[..] {\n             \"stable\" => num.to_string(),\n             \"beta\" => {\n-                if self.rust_info.is_git() {\n+                if self.rust_info.is_git() && !self.config.ignore_git {\n                     format!(\"{}-beta.{}\", num, self.beta_prerelease_version())\n                 } else {\n                     format!(\"{}-beta\", num)"}]}