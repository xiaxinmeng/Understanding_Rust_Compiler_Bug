{"sha": "741fc8fbfc10445ef90c8234e042d688d8bc293b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0MWZjOGZiZmMxMDQ0NWVmOTBjODIzNGUwNDJkNjg4ZDhiYzI5M2I=", "commit": {"author": {"name": "Unreal Hoang", "email": "unrealhoang@gmail.com", "date": "2019-07-08T15:45:12Z"}, "committer": {"name": "Unreal Hoang", "email": "unrealhoang@gmail.com", "date": "2019-07-08T16:00:47Z"}, "message": "use namespaced consts for KnownName", "tree": {"sha": "bfcc9feb3c06368a59ec23f2bdf75093d9b8b803", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bfcc9feb3c06368a59ec23f2bdf75093d9b8b803"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/741fc8fbfc10445ef90c8234e042d688d8bc293b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE5FNMeJ7UuhhqQiT99mIXvcbzfPoFAl0jaLYACgkQ9mIXvcbz\nfPr7vA/+PE28JHuL/spuJCKFrBAKu21hXp6zVxi3XB+418Mqh/JqUhgJq35A92Q+\nzK/IzF6ZdDfYI9rNP6N7BbwLAQnEQ8t71il0dC9wwlxoC6+9PReeEfwyoLiZiT1w\nmkyc6R78NtbvedQC+7FFpQ6EWIDUa2ZSn//DS1buWao24KvlOZmEApK2xAxNTEFm\naF9v4pzD9721gPbP8YNPifsAAhM/fPSHbj83kURnrT4bOmjifPRex/BzIf/fNQ6F\nsVIT4/MlZbUFMLZW1KtURo2aWTcD2ZFNHmV0eA3tYW4UC7NWF6weucvv++WimW5Y\naTdY/8ukh9UiIO+ednQeposZDvv1SrzwFQgAyXOt8llv8dn33dzYSoGQFV0zWJEM\nrVWz3vCOXJ8r3IFk0LXLqXIkAhW0v0sbqLcp+ud5NoyI7XnaJuyWvbXf2R7a0EKC\nYn/e2xktM3peWnlXsSIRwN0dtsTu6NpDJa4LrlaTsHAygum2sBaxX6TPvNg9KTrH\newm14UUwnZmn7ZRFEGAsm/k0XfQronKf4T/3h9usptk4I9Pb0rW54qaiO7bk9iIR\n+10uHtJdzi/70epX1zUNcWWVKn7niEtX8Gt8I7RXWnSK1jc5GiwP2tJnETVL9xye\nFCrvnLNaKWA4xYK0nhBfL6OKJ5F351x9nmC0AwgLxyLMSKeNl7Q=\n=J1fb\n-----END PGP SIGNATURE-----", "payload": "tree bfcc9feb3c06368a59ec23f2bdf75093d9b8b803\nparent 944f71afc692733cbc151bb3113d45a8159de132\nauthor Unreal Hoang <unrealhoang@gmail.com> 1562600712 +0900\ncommitter Unreal Hoang <unrealhoang@gmail.com> 1562601647 +0900\n\nuse namespaced consts for KnownName\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/741fc8fbfc10445ef90c8234e042d688d8bc293b", "html_url": "https://github.com/rust-lang/rust/commit/741fc8fbfc10445ef90c8234e042d688d8bc293b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/741fc8fbfc10445ef90c8234e042d688d8bc293b/comments", "author": {"login": "unrealhoang", "id": 1218094, "node_id": "MDQ6VXNlcjEyMTgwOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1218094?v=4", "gravatar_id": "", "url": "https://api.github.com/users/unrealhoang", "html_url": "https://github.com/unrealhoang", "followers_url": "https://api.github.com/users/unrealhoang/followers", "following_url": "https://api.github.com/users/unrealhoang/following{/other_user}", "gists_url": "https://api.github.com/users/unrealhoang/gists{/gist_id}", "starred_url": "https://api.github.com/users/unrealhoang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/unrealhoang/subscriptions", "organizations_url": "https://api.github.com/users/unrealhoang/orgs", "repos_url": "https://api.github.com/users/unrealhoang/repos", "events_url": "https://api.github.com/users/unrealhoang/events{/privacy}", "received_events_url": "https://api.github.com/users/unrealhoang/received_events", "type": "User", "site_admin": false}, "committer": {"login": "unrealhoang", "id": 1218094, "node_id": "MDQ6VXNlcjEyMTgwOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1218094?v=4", "gravatar_id": "", "url": "https://api.github.com/users/unrealhoang", "html_url": "https://github.com/unrealhoang", "followers_url": "https://api.github.com/users/unrealhoang/followers", "following_url": "https://api.github.com/users/unrealhoang/following{/other_user}", "gists_url": "https://api.github.com/users/unrealhoang/gists{/gist_id}", "starred_url": "https://api.github.com/users/unrealhoang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/unrealhoang/subscriptions", "organizations_url": "https://api.github.com/users/unrealhoang/orgs", "repos_url": "https://api.github.com/users/unrealhoang/repos", "events_url": "https://api.github.com/users/unrealhoang/events{/privacy}", "received_events_url": "https://api.github.com/users/unrealhoang/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "944f71afc692733cbc151bb3113d45a8159de132", "url": "https://api.github.com/repos/rust-lang/rust/commits/944f71afc692733cbc151bb3113d45a8159de132", "html_url": "https://github.com/rust-lang/rust/commit/944f71afc692733cbc151bb3113d45a8159de132"}], "stats": {"total": 22, "additions": 10, "deletions": 12}, "files": [{"sha": "827addddd2e2f841931ce2847618e43746fe39bc", "filename": "crates/ra_hir/src/ty/infer.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/741fc8fbfc10445ef90c8234e042d688d8bc293b/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/741fc8fbfc10445ef90c8234e042d688d8bc293b/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs?ref=741fc8fbfc10445ef90c8234e042d688d8bc293b", "patch": "@@ -40,7 +40,7 @@ use crate::{\n         PatId, Statement, UnaryOp,\n     },\n     generics::{GenericParams, HasGenericParams},\n-    name::{INTO_ITERATOR, ITEM, ITER, SELF_TYPE, STD},\n+    name,\n     nameres::{Namespace, PerNs},\n     path::{GenericArg, GenericArgs, PathKind, PathSegment},\n     resolve::{\n@@ -843,7 +843,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n         // Parent arguments are unknown, except for the receiver type\n         if let Some(parent_generics) = def_generics.and_then(|p| p.parent_params.clone()) {\n             for param in &parent_generics.params {\n-                if param.name == SELF_TYPE {\n+                if param.name == name::SELF_TYPE {\n                     substs.push(receiver_ty.clone());\n                 } else {\n                     substs.push(Ty::Unknown);\n@@ -1362,35 +1362,33 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n         let into_iter_path = Path {\n             kind: PathKind::Abs,\n             segments: vec![\n-                PathSegment { name: STD, args_and_bindings: None },\n-                PathSegment { name: ITER, args_and_bindings: None },\n-                PathSegment { name: INTO_ITERATOR, args_and_bindings: None },\n+                PathSegment { name: name::STD, args_and_bindings: None },\n+                PathSegment { name: name::ITER, args_and_bindings: None },\n+                PathSegment { name: name::INTO_ITERATOR, args_and_bindings: None },\n             ],\n         };\n \n         match self.resolver.resolve_path_segments(self.db, &into_iter_path).into_fully_resolved() {\n             PerNs { types: Some(Def(Trait(trait_))), .. } => {\n-                Some(trait_.associated_type_by_name(self.db, ITEM)?)\n+                Some(trait_.associated_type_by_name(self.db, name::ITEM)?)\n             }\n             _ => None,\n         }\n     }\n \n     fn resolve_ops_try_ok(&self) -> Option<TypeAlias> {\n-        use crate::name::{OK, OPS, TRY};\n-\n         let ops_try_path = Path {\n             kind: PathKind::Abs,\n             segments: vec![\n-                PathSegment { name: STD, args_and_bindings: None },\n-                PathSegment { name: OPS, args_and_bindings: None },\n-                PathSegment { name: TRY, args_and_bindings: None },\n+                PathSegment { name: name::STD, args_and_bindings: None },\n+                PathSegment { name: name::OPS, args_and_bindings: None },\n+                PathSegment { name: name::TRY, args_and_bindings: None },\n             ],\n         };\n \n         match self.resolver.resolve_path_segments(self.db, &ops_try_path).into_fully_resolved() {\n             PerNs { types: Some(Def(Trait(trait_))), .. } => {\n-                Some(trait_.associated_type_by_name(self.db, OK)?)\n+                Some(trait_.associated_type_by_name(self.db, name::OK)?)\n             }\n             _ => None,\n         }"}]}