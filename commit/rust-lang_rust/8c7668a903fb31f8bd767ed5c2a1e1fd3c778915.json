{"sha": "8c7668a903fb31f8bd767ed5c2a1e1fd3c778915", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjNzY2OGE5MDNmYjMxZjhiZDc2N2VkNWMyYTFlMWZkM2M3Nzg5MTU=", "commit": {"author": {"name": "ubsan", "email": "npmazzuca@gmail.com", "date": "2016-07-05T22:15:33Z"}, "committer": {"name": "ubsan", "email": "npmazzuca@gmail.com", "date": "2016-07-05T22:15:33Z"}, "message": "Fix nits", "tree": {"sha": "adb9a13f5091f6539c253ce8b85dce3f1ac693ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/adb9a13f5091f6539c253ce8b85dce3f1ac693ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c7668a903fb31f8bd767ed5c2a1e1fd3c778915", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c7668a903fb31f8bd767ed5c2a1e1fd3c778915", "html_url": "https://github.com/rust-lang/rust/commit/8c7668a903fb31f8bd767ed5c2a1e1fd3c778915", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c7668a903fb31f8bd767ed5c2a1e1fd3c778915/comments", "author": {"login": "ubsan", "id": 60298436, "node_id": "MDQ6VXNlcjYwMjk4NDM2", "avatar_url": "https://avatars.githubusercontent.com/u/60298436?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubsan", "html_url": "https://github.com/ubsan", "followers_url": "https://api.github.com/users/ubsan/followers", "following_url": "https://api.github.com/users/ubsan/following{/other_user}", "gists_url": "https://api.github.com/users/ubsan/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubsan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubsan/subscriptions", "organizations_url": "https://api.github.com/users/ubsan/orgs", "repos_url": "https://api.github.com/users/ubsan/repos", "events_url": "https://api.github.com/users/ubsan/events{/privacy}", "received_events_url": "https://api.github.com/users/ubsan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubsan", "id": 60298436, "node_id": "MDQ6VXNlcjYwMjk4NDM2", "avatar_url": "https://avatars.githubusercontent.com/u/60298436?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubsan", "html_url": "https://github.com/ubsan", "followers_url": "https://api.github.com/users/ubsan/followers", "following_url": "https://api.github.com/users/ubsan/following{/other_user}", "gists_url": "https://api.github.com/users/ubsan/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubsan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubsan/subscriptions", "organizations_url": "https://api.github.com/users/ubsan/orgs", "repos_url": "https://api.github.com/users/ubsan/repos", "events_url": "https://api.github.com/users/ubsan/events{/privacy}", "received_events_url": "https://api.github.com/users/ubsan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ec44e6c7b0e5fb2ddbc281aa74b515f8ea4e16b", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ec44e6c7b0e5fb2ddbc281aa74b515f8ea4e16b", "html_url": "https://github.com/rust-lang/rust/commit/7ec44e6c7b0e5fb2ddbc281aa74b515f8ea4e16b"}], "stats": {"total": 41, "additions": 25, "deletions": 16}, "files": [{"sha": "1ccdbb3411c8db66f1868dafcb159a9e9170e9d6", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 25, "deletions": 16, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/8c7668a903fb31f8bd767ed5c2a1e1fd3c778915/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c7668a903fb31f8bd767ed5c2a1e1fd3c778915/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=8c7668a903fb31f8bd767ed5c2a1e1fd3c778915", "patch": "@@ -312,30 +312,34 @@ extern \"rust-intrinsic\" {\n     /// are as follows:\n     ///\n     /// Turning a pointer into a `usize`:\n+    ///\n     /// ```\n     /// let ptr = &0;\n     /// let ptr_num_transmute = mem::transmute::<&i32, usize>(ptr);\n-    /// // Use `as` casts instead\n+    /// // Use an `as` cast instead\n     /// let ptr_num_cast = ptr as *const i32 as usize;\n     /// ```\n     ///\n     /// Turning a `*mut T` into an `&mut T`:\n+    ///\n     /// ```\n     /// let ptr: *mut i32 = &mut 0;\n     /// let ref_transmuted = mem::transmute::<*mut i32, &mut i32>(ptr);\n-    /// // Use reborrows\n+    /// // Use a reborrow instead\n     /// let ref_casted = &mut *ptr;\n     /// ```\n     ///\n     /// Turning an `&mut T` into an `&mut U`:\n+    ///\n     /// ```\n     /// let ptr = &mut 0;\n     /// let val_transmuted = mem::transmute::<&mut i32, &mut u32>(ptr);\n-    /// // Now let's put together `as` and reborrowing\n+    /// // Now, put together `as` and reborrowing\n     /// let val_casts = &mut *(ptr as *mut i32 as *mut u32);\n     /// ```\n     ///\n     /// Turning an `&str` into an `&[u8]`:\n+    ///\n     /// ```\n     /// // this is not a good way to do this.\n     /// let slice = unsafe { mem::transmute::<&str, &[u8]>(\"Rust\") };\n@@ -349,20 +353,21 @@ extern \"rust-intrinsic\" {\n     /// ```\n     ///\n     /// Turning a `Vec<&T>` into a `Vec<Option<&T>>`:\n+    ///\n     /// ```\n     /// let store = [0, 1, 2, 3];\n     /// let v_orig = store.iter().collect::<Vec<&i32>>();\n-    /// // Using transmute: this is Undefined Behavior, and a bad idea\n-    /// // However, it is no-copy\n+    /// // Using transmute: this is Undefined Behavior, and a bad idea.\n+    /// // However, it is no-copy.\n     /// let v_transmuted = mem::transmute::<Vec<&i32>, Vec<Option<&i32>>>(\n     ///     v_orig.clone());\n-    /// // This is the suggested, safe way\n-    /// // It does copy the entire Vector, though, into a new array\n+    /// // This is the suggested, safe way.\n+    /// // It does copy the entire Vector, though, into a new array.\n     /// let v_collected = v_orig.clone()\n     ///                         .into_iter()\n     ///                         .map(|r| Some(r))\n     ///                         .collect::<Vec<Option<&i32>>>();\n-    /// // The no-copy, unsafe way, still using transmute, but not UB\n+    /// // The no-copy, unsafe way, still using transmute, but not UB.\n     /// // This is equivalent to the original, but safer, and reuses the\n     /// // same Vec internals. Therefore the new inner type must have the\n     /// // exact same size, and the same or lesser alignment, as the old\n@@ -375,11 +380,12 @@ extern \"rust-intrinsic\" {\n     /// mem::forget(v_orig);\n     /// ```\n     ///\n-    /// Implemententing `split_at_mut`:\n+    /// Implementing `split_at_mut`:\n+    ///\n     /// ```\n     /// use std::{slice, mem};\n     /// // There are multiple ways to do this; and there are multiple problems\n-    /// // with the following, transmute, way\n+    /// // with the following, transmute, way.\n     /// fn split_at_mut_transmute<T>(slice: &mut [T], index: usize)\n     ///                              -> (&mut [T], &mut [T]) {\n     ///     let len = slice.len();\n@@ -388,20 +394,20 @@ extern \"rust-intrinsic\" {\n     ///         let slice2 = mem::transmute::<&mut [T], &mut [T]>(slice);\n     ///         // first: transmute is not typesafe; all it checks is that T and\n     ///         // U are of the same size. Second, right here, you have two\n-    ///         // mutable references pointing to the same memory\n+    ///         // mutable references pointing to the same memory.\n     ///         (&mut slice[0..index], &mut slice2[index..len])\n     ///     }\n     /// }\n     /// // This gets rid of the typesafety problems; `&mut *` will *only* give\n-    /// // you an &mut T from an &mut T or *mut T\n+    /// // you an `&mut T` from an `&mut T` or `*mut T`.\n     /// fn split_at_mut_casts<T>(slice: &mut [T], index: usize)\n     ///                          -> (&mut [T], &mut [T]) {\n     ///     let len = slice.len();\n     ///     assert!(index < len);\n     ///     unsafe {\n     ///         let slice2 = &mut *(slice as *mut [T]);\n     ///         // however, you still have two mutable references pointing to\n-    ///         // the same memory\n+    ///         // the same memory.\n     ///         (&mut slice[0..index], &mut slice2[index..len])\n     ///     }\n     /// }\n@@ -415,9 +421,9 @@ extern \"rust-intrinsic\" {\n     ///         assert!(mid <= len);\n     ///         // This now has three mutable references pointing at the same\n     ///         // memory. `slice`, the rvalue ret.0, and the rvalue ret.1.\n-    ///         // However, `slice` is never used after `let ptr = ...`, and so\n-    ///         // one can treat it as \"dead\", and therefore, you only have two\n-    ///         // real mutable slices.\n+    ///         // `slice` is never used after `let ptr = ...`, and so one can\n+    ///         // treat it as \"dead\", and therefore, you only have two real\n+    ///         // mutable slices.\n     ///         (slice::from_raw_parts_mut(ptr, mid),\n     ///          slice::from_raw_parts_mut(ptr.offset(mid as isize), len - mid))\n     ///     }\n@@ -429,13 +435,15 @@ extern \"rust-intrinsic\" {\n     /// There are valid uses of transmute, though they are few and far between.\n     ///\n     /// Getting the bitpattern of a floating point type:\n+    ///\n     /// ```\n     /// let bitpattern = std::mem::transmute::<f32, u32>(1.0);\n     /// assert_eq!(bitpattern, 0x3F800000);\n     /// ```\n     ///\n     /// Turning a pointer into a function pointer (this isn't guaranteed to\n     /// work in Rust, although, for example, Linux does make this guarantee):\n+    ///\n     /// ```\n     /// fn foo() -> i32 {\n     ///     0\n@@ -447,6 +455,7 @@ extern \"rust-intrinsic\" {\n     ///\n     /// Extending a lifetime, or shortening an invariant an invariant lifetime;\n     /// this is advanced, very unsafe rust:\n+    ///\n     /// ```\n     /// use std::mem;\n     ///"}]}