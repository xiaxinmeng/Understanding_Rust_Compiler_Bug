{"sha": "fb507cadf32e1eacccc07c1c3511636fd6378f7b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiNTA3Y2FkZjMyZTFlYWNjY2MwN2MxYzM1MTE2MzZmZDYzNzhmN2I=", "commit": {"author": {"name": "tinaun", "email": "tinagma@gmail.com", "date": "2018-06-09T03:24:52Z"}, "committer": {"name": "tinaun", "email": "tinagma@gmail.com", "date": "2018-06-09T04:38:11Z"}, "message": "add inherent methods to Poll", "tree": {"sha": "845ac44091cd890ef5b452797fccb243d96aac18", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/845ac44091cd890ef5b452797fccb243d96aac18"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb507cadf32e1eacccc07c1c3511636fd6378f7b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb507cadf32e1eacccc07c1c3511636fd6378f7b", "html_url": "https://github.com/rust-lang/rust/commit/fb507cadf32e1eacccc07c1c3511636fd6378f7b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb507cadf32e1eacccc07c1c3511636fd6378f7b/comments", "author": {"login": "tinaun", "id": 2565671, "node_id": "MDQ6VXNlcjI1NjU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/2565671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tinaun", "html_url": "https://github.com/tinaun", "followers_url": "https://api.github.com/users/tinaun/followers", "following_url": "https://api.github.com/users/tinaun/following{/other_user}", "gists_url": "https://api.github.com/users/tinaun/gists{/gist_id}", "starred_url": "https://api.github.com/users/tinaun/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tinaun/subscriptions", "organizations_url": "https://api.github.com/users/tinaun/orgs", "repos_url": "https://api.github.com/users/tinaun/repos", "events_url": "https://api.github.com/users/tinaun/events{/privacy}", "received_events_url": "https://api.github.com/users/tinaun/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tinaun", "id": 2565671, "node_id": "MDQ6VXNlcjI1NjU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/2565671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tinaun", "html_url": "https://github.com/tinaun", "followers_url": "https://api.github.com/users/tinaun/followers", "following_url": "https://api.github.com/users/tinaun/following{/other_user}", "gists_url": "https://api.github.com/users/tinaun/gists{/gist_id}", "starred_url": "https://api.github.com/users/tinaun/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tinaun/subscriptions", "organizations_url": "https://api.github.com/users/tinaun/orgs", "repos_url": "https://api.github.com/users/tinaun/repos", "events_url": "https://api.github.com/users/tinaun/events{/privacy}", "received_events_url": "https://api.github.com/users/tinaun/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "49eb754cc0108d8546eae70cdcebf81aaddbece3", "url": "https://api.github.com/repos/rust-lang/rust/commits/49eb754cc0108d8546eae70cdcebf81aaddbece3", "html_url": "https://github.com/rust-lang/rust/commit/49eb754cc0108d8546eae70cdcebf81aaddbece3"}], "stats": {"total": 51, "additions": 50, "deletions": 1}, "files": [{"sha": "bef6d3677d0a37232e7b27310340d1c45caaae80", "filename": "src/libcore/task.rs", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/fb507cadf32e1eacccc07c1c3511636fd6378f7b/src%2Flibcore%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb507cadf32e1eacccc07c1c3511636fd6378f7b/src%2Flibcore%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask.rs?ref=fb507cadf32e1eacccc07c1c3511636fd6378f7b", "patch": "@@ -32,6 +32,55 @@ pub enum Poll<T> {\n     Pending,\n }\n \n+impl<T> Poll<T> {\n+    /// Change the ready value of this `Poll` with the closure provided\n+    pub fn map<U, F>(self, f: F) -> Poll<U>\n+        where F: FnOnce(T) -> U\n+    {\n+        match self {\n+            Poll::Ready(t) => Poll::Ready(f(t)),\n+            Poll::Pending => Poll::Pending,\n+        }\n+    }\n+\n+    /// Returns whether this is `Poll::Ready`\n+    pub fn is_ready(&self) -> bool {\n+        match *self {\n+            Poll::Ready(_) => true,\n+            Poll::Pending => false,\n+        }\n+    }\n+\n+    /// Returns whether this is `Poll::Pending`\n+    pub fn is_pending(&self) -> bool {\n+        !self.is_ready()\n+    }\n+}\n+\n+impl<T, E> Poll<Result<T, E>> {\n+    /// Change the success value of this `Poll` with the closure provided\n+    pub fn map_ok<U, F>(self, f: F) -> Poll<Result<U, E>>\n+        where F: FnOnce(T) -> U\n+    {\n+        match self {\n+            Poll::Ready(Ok(t)) => Poll::Ready(Ok(f(t))),\n+            Poll::Ready(Err(e)) => Poll::Ready(Err(e)),\n+            Poll::Pending => Poll::Pending,\n+        }\n+    }\n+\n+    /// Change the error value of this `Poll` with the closure provided\n+    pub fn map_err<U, F>(self, f: F) -> Poll<Result<T, U>>\n+        where F: FnOnce(E) -> U\n+    {\n+        match self {\n+            Poll::Ready(Ok(t)) => Poll::Ready(Ok(t)),\n+            Poll::Ready(Err(e)) => Poll::Ready(Err(f(e))),\n+            Poll::Pending => Poll::Pending,\n+        }\n+    }\n+}\n+\n impl<T> From<T> for Poll<T> {\n     fn from(t: T) -> Poll<T> {\n         Poll::Ready(t)"}, {"sha": "4b5a063ea73aa2a5b823be0667a874022da31ef6", "filename": "src/libstd/panic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb507cadf32e1eacccc07c1c3511636fd6378f7b/src%2Flibstd%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb507cadf32e1eacccc07c1c3511636fd6378f7b/src%2Flibstd%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanic.rs?ref=fb507cadf32e1eacccc07c1c3511636fd6378f7b", "patch": "@@ -327,7 +327,7 @@ impl<'a, F: Future> Future for AssertUnwindSafe<F> {\n             let pinned_field = PinMut::new_unchecked(\n                 &mut PinMut::get_mut(self.reborrow()).0\n             );\n-            \n+\n             pinned_field.poll(cx)\n         }\n     }"}]}