{"sha": "30b471bf23f171645fcb61b2c677c6d12061f05b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwYjQ3MWJmMjNmMTcxNjQ1ZmNiNjFiMmM2NzdjNmQxMjA2MWYwNWI=", "commit": {"author": {"name": "James Miller", "email": "bladeon@gmail.com", "date": "2013-05-26T00:39:53Z"}, "committer": {"name": "James Miller", "email": "bladeon@gmail.com", "date": "2013-05-26T00:39:53Z"}, "message": "Add AtomicOption type", "tree": {"sha": "8b47e3ed99a43f4489fd9030acb28c2ce357de1e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b47e3ed99a43f4489fd9030acb28c2ce357de1e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/30b471bf23f171645fcb61b2c677c6d12061f05b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/30b471bf23f171645fcb61b2c677c6d12061f05b", "html_url": "https://github.com/rust-lang/rust/commit/30b471bf23f171645fcb61b2c677c6d12061f05b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/30b471bf23f171645fcb61b2c677c6d12061f05b/comments", "author": null, "committer": null, "parents": [{"sha": "008e6e5e7e4d2e102d7048a948e9fcac82e1e210", "url": "https://api.github.com/repos/rust-lang/rust/commits/008e6e5e7e4d2e102d7048a948e9fcac82e1e210", "html_url": "https://github.com/rust-lang/rust/commit/008e6e5e7e4d2e102d7048a948e9fcac82e1e210"}], "stats": {"total": 124, "additions": 91, "deletions": 33}, "files": [{"sha": "fce8e003e901d62075d5ebb0a6a021e5f8c5679f", "filename": "src/libstd/unstable/atomics.rs", "status": "modified", "additions": 91, "deletions": 33, "changes": 124, "blob_url": "https://github.com/rust-lang/rust/blob/30b471bf23f171645fcb61b2c677c6d12061f05b/src%2Flibstd%2Funstable%2Fatomics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30b471bf23f171645fcb61b2c677c6d12061f05b/src%2Flibstd%2Funstable%2Fatomics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fatomics.rs?ref=30b471bf23f171645fcb61b2c677c6d12061f05b", "patch": "@@ -15,6 +15,8 @@\n use unstable::intrinsics;\n use cast;\n use option::{Option,Some,None};\n+use libc::c_void;\n+use ops::Drop;\n \n pub struct AtomicFlag {\n     priv v: int\n@@ -36,6 +38,10 @@ pub struct AtomicPtr<T> {\n     priv p: *mut T\n }\n \n+pub struct AtomicOption<T> {\n+    priv p: *mut c_void\n+}\n+\n pub enum Ordering {\n     Release,\n     Acquire,\n@@ -53,7 +59,7 @@ impl AtomicFlag {\n      * Clears the atomic flag\n      */\n     #[inline(always)]\n-    fn clear(&mut self, order:Ordering) {\n+    fn clear(&mut self, order: Ordering) {\n         unsafe {atomic_store(&mut self.v, 0, order)}\n     }\n \n@@ -62,37 +68,37 @@ impl AtomicFlag {\n      * Sets the flag if it was previously unset, returns the previous value of the\n      * flag.\n      */\n-    fn test_and_set(&mut self, order:Ordering) -> bool {\n+    fn test_and_set(&mut self, order: Ordering) -> bool {\n         unsafe {atomic_compare_and_swap(&mut self.v, 0, 1, order) > 0}\n     }\n }\n \n impl AtomicBool {\n-    fn new(v:bool) -> AtomicBool {\n+    fn new(v: bool) -> AtomicBool {\n         AtomicBool { v: if v { 1 } else { 0 } }\n     }\n \n     #[inline(always)]\n-    fn load(&self, order:Ordering) -> bool {\n+    fn load(&self, order: Ordering) -> bool {\n         unsafe { atomic_load(&self.v, order) > 0 }\n     }\n \n     #[inline(always)]\n-    fn store(&mut self, val:bool, order:Ordering) {\n+    fn store(&mut self, val: bool, order: Ordering) {\n         let val = if val { 1 } else { 0 };\n \n         unsafe { atomic_store(&mut self.v, val, order); }\n     }\n \n     #[inline(always)]\n-    fn swap(&mut self, val:bool, order:Ordering) -> bool {\n+    fn swap(&mut self, val: bool, order: Ordering) -> bool {\n         let val = if val { 1 } else { 0 };\n \n         unsafe { atomic_swap(&mut self.v, val, order) > 0}\n     }\n \n     #[inline(always)]\n-    fn compare_and_swap(&mut self, old: bool, new: bool, order:Ordering) -> bool {\n+    fn compare_and_swap(&mut self, old: bool, new: bool, order: Ordering) -> bool {\n         let old = if old { 1 } else { 0 };\n         let new = if new { 1 } else { 0 };\n \n@@ -101,100 +107,153 @@ impl AtomicBool {\n }\n \n impl AtomicInt {\n-    fn new(v:int) -> AtomicInt {\n+    fn new(v: int) -> AtomicInt {\n         AtomicInt { v:v }\n     }\n \n     #[inline(always)]\n-    fn load(&self, order:Ordering) -> int {\n+    fn load(&self, order: Ordering) -> int {\n         unsafe { atomic_load(&self.v, order) }\n     }\n \n     #[inline(always)]\n-    fn store(&mut self, val:int, order:Ordering) {\n+    fn store(&mut self, val: int, order: Ordering) {\n         unsafe { atomic_store(&mut self.v, val, order); }\n     }\n \n     #[inline(always)]\n-    fn swap(&mut self, val:int, order:Ordering) -> int {\n+    fn swap(&mut self, val: int, order: Ordering) -> int {\n         unsafe { atomic_swap(&mut self.v, val, order) }\n     }\n \n     #[inline(always)]\n-    fn compare_and_swap(&mut self, old: int, new: int, order:Ordering) -> int {\n+    fn compare_and_swap(&mut self, old: int, new: int, order: Ordering) -> int {\n         unsafe { atomic_compare_and_swap(&mut self.v, old, new, order) }\n     }\n \n     #[inline(always)]\n-    fn fetch_add(&mut self, val:int, order:Ordering) -> int {\n+    fn fetch_add(&mut self, val: int, order: Ordering) -> int {\n         unsafe { atomic_add(&mut self.v, val, order) }\n     }\n \n     #[inline(always)]\n-    fn fetch_sub(&mut self, val:int, order:Ordering) -> int {\n+    fn fetch_sub(&mut self, val: int, order: Ordering) -> int {\n         unsafe { atomic_sub(&mut self.v, val, order) }\n     }\n }\n \n impl AtomicUint {\n-    fn new(v:uint) -> AtomicUint {\n+    fn new(v: uint) -> AtomicUint {\n         AtomicUint { v:v }\n     }\n \n     #[inline(always)]\n-    fn load(&self, order:Ordering) -> uint {\n+    fn load(&self, order: Ordering) -> uint {\n         unsafe { atomic_load(&self.v, order) }\n     }\n \n     #[inline(always)]\n-    fn store(&mut self, val:uint, order:Ordering) {\n+    fn store(&mut self, val: uint, order: Ordering) {\n         unsafe { atomic_store(&mut self.v, val, order); }\n     }\n \n     #[inline(always)]\n-    fn swap(&mut self, val:uint, order:Ordering) -> uint {\n+    fn swap(&mut self, val: uint, order: Ordering) -> uint {\n         unsafe { atomic_swap(&mut self.v, val, order) }\n     }\n \n     #[inline(always)]\n-    fn compare_and_swap(&mut self, old: uint, new: uint, order:Ordering) -> uint {\n+    fn compare_and_swap(&mut self, old: uint, new: uint, order: Ordering) -> uint {\n         unsafe { atomic_compare_and_swap(&mut self.v, old, new, order) }\n     }\n \n     #[inline(always)]\n-    fn fetch_add(&mut self, val:uint, order:Ordering) -> uint {\n+    fn fetch_add(&mut self, val: uint, order: Ordering) -> uint {\n         unsafe { atomic_add(&mut self.v, val, order) }\n     }\n \n     #[inline(always)]\n-    fn fetch_sub(&mut self, val:uint, order:Ordering) -> uint {\n+    fn fetch_sub(&mut self, val: uint, order: Ordering) -> uint {\n         unsafe { atomic_sub(&mut self.v, val, order) }\n     }\n }\n \n impl<T> AtomicPtr<T> {\n-    fn new(p:*mut T) -> AtomicPtr<T> {\n+    fn new(p: *mut T) -> AtomicPtr<T> {\n         AtomicPtr { p:p }\n     }\n \n     #[inline(always)]\n-    fn load(&self, order:Ordering) -> *mut T {\n+    fn load(&self, order: Ordering) -> *mut T {\n         unsafe { atomic_load(&self.p, order) }\n     }\n \n     #[inline(always)]\n-    fn store(&mut self, ptr:*mut T, order:Ordering) {\n+    fn store(&mut self, ptr: *mut T, order: Ordering) {\n         unsafe { atomic_store(&mut self.p, ptr, order); }\n     }\n \n     #[inline(always)]\n-    fn swap(&mut self, ptr:*mut T, order:Ordering) -> *mut T {\n+    fn swap(&mut self, ptr: *mut T, order: Ordering) -> *mut T {\n         unsafe { atomic_swap(&mut self.p, ptr, order) }\n     }\n \n     #[inline(always)]\n-    fn compare_and_swap(&mut self, old: *mut T, new: *mut T, order:Ordering) -> *mut T {\n-        unsafe { atomic_compare_and_swap(&mut self.v, old, new, order) }\n+    fn compare_and_swap(&mut self, old: *mut T, new: *mut T, order: Ordering) -> *mut T {\n+        unsafe { atomic_compare_and_swap(&mut self.p, old, new, order) }\n+    }\n+}\n+\n+impl<T> AtomicOption<T> {\n+    fn new(p: ~T) -> AtomicOption<T> {\n+        unsafe {\n+            AtomicOption {\n+                p: cast::transmute(p)\n+            }\n+        }\n+    }\n+\n+    fn empty() -> AtomicOption<T> {\n+        unsafe {\n+            AtomicOption {\n+                p: cast::transmute(0)\n+            }\n+        }\n+    }\n+\n+    #[inline(always)]\n+    fn swap(&mut self, val: ~T, order: Ordering) -> Option<~T> {\n+        unsafe {\n+            let val = cast::transmute(val);\n+\n+            let p = atomic_swap(&mut self.p, val, order);\n+            let pv : &uint = cast::transmute(&p);\n+\n+            if *pv == 0 {\n+                None\n+            } else {\n+                Some(cast::transmute(p))\n+            }\n+        }\n+    }\n+\n+    #[inline(always)]\n+    fn take(&mut self, order: Ordering) -> Option<~T> {\n+        unsafe {\n+            self.swap(cast::transmute(0), order)\n+        }\n+    }\n+}\n+\n+#[unsafe_destructor]\n+impl<T> Drop for AtomicOption<T> {\n+    fn finalize(&self) {\n+        // This will ensure that the contained data is\n+        // destroyed, unless it's null.\n+        unsafe {\n+            let this : &mut AtomicOption<T> = cast::transmute(self);\n+            let _ = this.take(SeqCst);\n+        }\n     }\n }\n \n@@ -284,8 +343,8 @@ mod test {\n     }\n \n     #[test]\n-    fn pointer_swap() {\n-        let mut p = AtomicPtr::new(~1);\n+    fn option_swap() {\n+        let mut p = AtomicOption::new(~1);\n         let a = ~2;\n \n         let b = p.swap(a, SeqCst);\n@@ -295,15 +354,14 @@ mod test {\n     }\n \n     #[test]\n-    fn pointer_take() {\n-        let mut p = AtomicPtr::new(~1);\n+    fn option_take() {\n+        let mut p = AtomicOption::new(~1);\n \n         assert_eq!(p.take(SeqCst), Some(~1));\n         assert_eq!(p.take(SeqCst), None);\n-        assert!(p.taken(SeqCst));\n \n         let p2 = ~2;\n-        p.give(p2, SeqCst);\n+        p.swap(p2, SeqCst);\n \n         assert_eq!(p.take(SeqCst), Some(~2));\n     }"}]}