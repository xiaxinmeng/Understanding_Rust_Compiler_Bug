{"sha": "fce76cc79a409629eca5536cf407bf95af1eee8b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjZTc2Y2M3OWE0MDk2MjllY2E1NTM2Y2Y0MDdiZjk1YWYxZWVlOGI=", "commit": {"author": {"name": "Daniel McNab", "email": "36049421+DJMcNab@users.noreply.github.com", "date": "2018-10-04T20:45:39Z"}, "committer": {"name": "Daniel McNab", "email": "36049421+DJMcNab@users.noreply.github.com", "date": "2018-10-04T20:45:39Z"}, "message": "Reformat CONTRIBUTING.md\n\nThis uses:\n`prettier --prose-wrap always ./CONTRIBUTING.md --write`", "tree": {"sha": "c4b954d6a1d1553322508c7c7d224873aa8ae562", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c4b954d6a1d1553322508c7c7d224873aa8ae562"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fce76cc79a409629eca5536cf407bf95af1eee8b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fce76cc79a409629eca5536cf407bf95af1eee8b", "html_url": "https://github.com/rust-lang/rust/commit/fce76cc79a409629eca5536cf407bf95af1eee8b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fce76cc79a409629eca5536cf407bf95af1eee8b/comments", "author": {"login": "DJMcNab", "id": 36049421, "node_id": "MDQ6VXNlcjM2MDQ5NDIx", "avatar_url": "https://avatars.githubusercontent.com/u/36049421?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DJMcNab", "html_url": "https://github.com/DJMcNab", "followers_url": "https://api.github.com/users/DJMcNab/followers", "following_url": "https://api.github.com/users/DJMcNab/following{/other_user}", "gists_url": "https://api.github.com/users/DJMcNab/gists{/gist_id}", "starred_url": "https://api.github.com/users/DJMcNab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DJMcNab/subscriptions", "organizations_url": "https://api.github.com/users/DJMcNab/orgs", "repos_url": "https://api.github.com/users/DJMcNab/repos", "events_url": "https://api.github.com/users/DJMcNab/events{/privacy}", "received_events_url": "https://api.github.com/users/DJMcNab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "DJMcNab", "id": 36049421, "node_id": "MDQ6VXNlcjM2MDQ5NDIx", "avatar_url": "https://avatars.githubusercontent.com/u/36049421?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DJMcNab", "html_url": "https://github.com/DJMcNab", "followers_url": "https://api.github.com/users/DJMcNab/followers", "following_url": "https://api.github.com/users/DJMcNab/following{/other_user}", "gists_url": "https://api.github.com/users/DJMcNab/gists{/gist_id}", "starred_url": "https://api.github.com/users/DJMcNab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DJMcNab/subscriptions", "organizations_url": "https://api.github.com/users/DJMcNab/orgs", "repos_url": "https://api.github.com/users/DJMcNab/repos", "events_url": "https://api.github.com/users/DJMcNab/events{/privacy}", "received_events_url": "https://api.github.com/users/DJMcNab/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80eefcbc0517d24dafa8f349f2c0f20d396a6c4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/80eefcbc0517d24dafa8f349f2c0f20d396a6c4d", "html_url": "https://github.com/rust-lang/rust/commit/80eefcbc0517d24dafa8f349f2c0f20d396a6c4d"}], "stats": {"total": 91, "additions": 46, "deletions": 45}, "files": [{"sha": "c952078cfe1891b561a3819fc1286b04550954f6", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 46, "deletions": 45, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/fce76cc79a409629eca5536cf407bf95af1eee8b/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/fce76cc79a409629eca5536cf407bf95af1eee8b/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=fce76cc79a409629eca5536cf407bf95af1eee8b", "patch": "@@ -1,57 +1,58 @@\n-The project is in its early stages: contributions are welcome and\n-would be **very** helpful, but the project is not *yet* optimized for\n-contribution. Moreover, it is doubly experimental, so there's no\n-guarantee that any work here would reach production. That said, here\n-are some areas where contributions would be **especially** welcome:\n-\n-\n-* Designing internal data structures: RFC only outlines the\n-  constraints, it's an open question how to satisfy them in the\n-  optimal way. See `ARCHITECTURE.md` for current design questions.\n-\n-* Porting libsyntax parser to rust-analyzer: currently rust-analyzer parses\n-  only a tiny subset of Rust. This should be fixed by porting parsing\n-  functions from libsyntax one by one. Take a look at the\n-  [libsyntax parser]\n-  for \"what to port\" and at the\n-  [Kotlin parser]\n-  for \"how to port\".\n-\n-* Writing validators: by design, rust-analyzer is very lax about the\n-  input. For example, the lexer happily accepts unclosed strings. The\n-  idea is that there should be a higher level visitor, which walks the\n-  syntax tree after parsing and produces all the warnings. Alas,\n-  there's no such visitor yet :( Would you like to write one? :)\n-\n-* Creating tests: it would be tremendously helpful to read each of\n-  libsyntax and rust-analyzer parser functions and crate a small separate\n-  test cases to cover each and every edge case.\n-\n-* Building stuff with rust-analyzer: it would be really cool to compile\n-  rust-analyzer to WASM and add *client side* syntax validation to rust\n+The project is in its early stages: contributions are welcome and would be\n+**very** helpful, but the project is not _yet_ optimized for contribution.\n+Moreover, it is doubly experimental, so there's no guarantee that any work here\n+would reach production. That said, here are some areas where contributions would\n+be **especially** welcome:\n+\n+- Designing internal data structures: RFC only outlines the constraints, it's an\n+  open question how to satisfy them in the optimal way. See `ARCHITECTURE.md`\n+  for current design questions.\n+\n+- Porting libsyntax parser to rust-analyzer: currently rust-analyzer parses only\n+  a tiny subset of Rust. This should be fixed by porting parsing functions from\n+  libsyntax one by one. Take a look at the [libsyntax parser] for \"what to port\"\n+  and at the [Kotlin parser] for \"how to port\".\n+\n+- Writing validators: by design, rust-analyzer is very lax about the input. For\n+  example, the lexer happily accepts unclosed strings. The idea is that there\n+  should be a higher level visitor, which walks the syntax tree after parsing\n+  and produces all the warnings. Alas, there's no such visitor yet :( Would you\n+  like to write one? :)\n+\n+- Creating tests: it would be tremendously helpful to read each of libsyntax and\n+  rust-analyzer parser functions and crate a small separate test cases to cover\n+  each and every edge case.\n+\n+- Building stuff with rust-analyzer: it would be really cool to compile\n+  rust-analyzer to WASM and add _client side_ syntax validation to rust\n   playground!\n \n-\n Do take a look at the issue tracker.\n \n-If you don't know where to start, or have *any* questions or suggestions,\n-don't hesitate to chat at [Gitter]!\n+If you don't know where to start, or have _any_ questions or suggestions, don't\n+hesitate to chat at [Gitter]!\n \n # Code generation\n \n-Some of the components of this repository are generated through automatic processes. These are outlined below:\n-\n- - `gen-kinds`: The kinds of tokens are reused in several places, so a generator is used.\n-   This process uses [tera] to generate, using data in [grammar.ron], the files:  \n-   - [ast/generated.rs][ast generated] in `ra_syntax` based on [ast/generated.tera.rs][ast source]\n-   - [syntax_kinds/generated.rs][syntax_kinds generated] in `ra_syntax` based on [syntax_kinds/generated.tera.rs][syntax_kinds source]\n-\n-[libsyntax parser]: https://github.com/rust-lang/rust/blob/6b99adeb11313197f409b4f7c4083c2ceca8a4fe/src/libsyntax/parse/parser.rs\n-[Kotlin parser]: https://github.com/JetBrains/kotlin/blob/4d951de616b20feca92f3e9cc9679b2de9e65195/compiler/frontend/src/org/jetbrains/kotlin/parsing/KotlinParsing.java\n-[Gitter]: https://gitter.im/libsyntax2/Lobby\n+Some of the components of this repository are generated through automatic\n+processes. These are outlined below:\n+\n+- `gen-kinds`: The kinds of tokens are reused in several places, so a generator\n+  is used. This process uses [tera] to generate, using data in [grammar.ron],\n+  the files:\n+  - [ast/generated.rs][ast generated] in `ra_syntax` based on\n+    [ast/generated.tera.rs][ast source]\n+  - [syntax_kinds/generated.rs][syntax_kinds generated] in `ra_syntax` based on\n+    [syntax_kinds/generated.tera.rs][syntax_kinds source]\n+\n+[libsyntax parser]:\n+  https://github.com/rust-lang/rust/blob/6b99adeb11313197f409b4f7c4083c2ceca8a4fe/src/libsyntax/parse/parser.rs\n+[kotlin parser]:\n+  https://github.com/JetBrains/kotlin/blob/4d951de616b20feca92f3e9cc9679b2de9e65195/compiler/frontend/src/org/jetbrains/kotlin/parsing/KotlinParsing.java\n+[gitter]: https://gitter.im/libsyntax2/Lobby\n [tera]: https://tera.netlify.com/\n [grammar.ron]: ./crates/ra_syntax/src/grammar.ron\n [ast generated]: ./crates/ra_syntax/src/ast/generated.rs\n [ast source]: ./crates/ra_syntax/src/ast/generated.tera.rs\n [syntax_kinds generated]: ./crates/ra_syntax/src/syntax_kinds/generated.rs\n-[syntax_kinds source]: ./crates/ra_syntax/src/syntax_kinds/generated.tera.rs\n\\ No newline at end of file\n+[syntax_kinds source]: ./crates/ra_syntax/src/syntax_kinds/generated.tera.rs"}]}