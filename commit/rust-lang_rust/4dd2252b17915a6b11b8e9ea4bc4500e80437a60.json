{"sha": "4dd2252b17915a6b11b8e9ea4bc4500e80437a60", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkZDIyNTJiMTc5MTVhNmIxMWI4ZTllYTRiYzQ1MDBlODA0MzdhNjA=", "commit": {"author": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2020-02-21T09:15:38Z"}, "committer": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2020-02-21T10:14:19Z"}, "message": "Fix suggestion for weird formattings", "tree": {"sha": "1b9569d4cc1a9f45f25396c827e5241472cbea82", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b9569d4cc1a9f45f25396c827e5241472cbea82"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4dd2252b17915a6b11b8e9ea4bc4500e80437a60", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZxoS6lESXlRGMHWcaTCGhp1QZjcFAl5PrXsACgkQaTCGhp1Q\nZjfdFg/+PftZSw/7Zbxd7bIwcX9QpCMehrHAeuBuvm0qvCghxB3uF3Lc26MOX+p8\n4siwIMMZyI9xCRPIHUwQ7C9SzzdFmhkPOWGWFkBfwx2CsW84vUPnAp7tsUIxfsjH\nuWxiMBbFPdza2xauKFv45Isf8SxClKaPmQQHN1uu2xV55xr52f/ITjhMEUgaufvE\n5ZHcep7qSaBg92/HJ2p6O7LnbjfuX44QZgVO63KWLcf7KlSAzo0wZvNPJqBC/nGx\nkay6qii6KB0/y00XWuMAO6OdrIp0im5ZCgihFvGAEuJ8wDElS7F8Fgk8TsgFMhYr\nCN4iQ+mKi6L7UqWYE2q+oxATkpXP1JFzAQ3lBG61/A8/UC4daz7U4aLN4vJGoCpM\nPNB+xh+dTNzeX422ZpN77EFxW38LJTUFgW92MTJJpjcUKq89fSTQhklgxnKC5qBY\nnw2QdaToTOwv2HMKANIPZKQaFqEA4O3TrCqN4hXtXnMPqu8FkNuREHbTs4tDgooz\n20/+WVTAZTiMAmHVeyZ5GykKPBLjw6qhAekrZrZGgruY/BcZRl1lI/MgwIQ+svk/\nnAjZ6oSmstuiL2QP0mU7BRpuoRTeuIyq/bmJJhE1dAMtmusDUU9Me6e0rX/btn5h\njThR7B5Qbcx2fjSC8DBiATm66G8DboqQBHXMxtyi7vAGKgPbK60=\n=X0XV\n-----END PGP SIGNATURE-----", "payload": "tree 1b9569d4cc1a9f45f25396c827e5241472cbea82\nparent b562a519e69847d918d117dd9b729f92c7749d34\nauthor flip1995 <hello@philkrones.com> 1582276538 +0100\ncommitter flip1995 <hello@philkrones.com> 1582280059 +0100\n\nFix suggestion for weird formattings\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4dd2252b17915a6b11b8e9ea4bc4500e80437a60", "html_url": "https://github.com/rust-lang/rust/commit/4dd2252b17915a6b11b8e9ea4bc4500e80437a60", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4dd2252b17915a6b11b8e9ea4bc4500e80437a60/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b562a519e69847d918d117dd9b729f92c7749d34", "url": "https://api.github.com/repos/rust-lang/rust/commits/b562a519e69847d918d117dd9b729f92c7749d34", "html_url": "https://github.com/rust-lang/rust/commit/b562a519e69847d918d117dd9b729f92c7749d34"}], "stats": {"total": 61, "additions": 54, "deletions": 7}, "files": [{"sha": "17e067a095dedf562244982688198e16a92ef370", "filename": "clippy_lints/src/wildcard_imports.rs", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/4dd2252b17915a6b11b8e9ea4bc4500e80437a60/clippy_lints%2Fsrc%2Fwildcard_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dd2252b17915a6b11b8e9ea4bc4500e80437a60/clippy_lints%2Fsrc%2Fwildcard_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwildcard_imports.rs?ref=4dd2252b17915a6b11b8e9ea4bc4500e80437a60", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::{in_macro, snippet_with_applicability, span_lint_and_sugg};\n+use crate::utils::{in_macro, snippet, snippet_with_applicability, span_lint_and_sugg};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{\n@@ -46,6 +46,9 @@ declare_clippy_lint! {\n     /// **Known problems:** If macros are imported through the wildcard, this macro is not included\n     /// by the suggestion and has to be added by hand.\n     ///\n+    /// Applying the suggestion when explicit imports of the things imported with a glob import\n+    /// exist, may result in `unused_imports` warnings.\n+    ///\n     /// **Example:**\n     ///\n     /// Bad:\n@@ -82,16 +85,27 @@ impl LateLintPass<'_, '_> for WildcardImports {\n             if !used_imports.is_empty(); // Already handled by `unused_imports`\n             then {\n                 let mut applicability = Applicability::MachineApplicable;\n-                let import_source = snippet_with_applicability(cx, use_path.span, \"..\", &mut applicability);\n-                let (span, braced_glob) = if import_source.is_empty() {\n+                let import_source_snippet = snippet_with_applicability(cx, use_path.span, \"..\", &mut applicability);\n+                let (span, braced_glob) = if import_source_snippet.is_empty() {\n                     // This is a `_::{_, *}` import\n+                    // In this case `use_path.span` is empty and ends directly in front of the `*`,\n+                    // so we need to extend it by one byte.\n                     (\n                         use_path.span.with_hi(use_path.span.hi() + BytePos(1)),\n                         true,\n                     )\n                 } else {\n+                    // In this case, the `use_path.span` ends right before the `::*`, so we need to\n+                    // extend it up to the `*`. Since it is hard to find the `*` in weird\n+                    // formattings like `use _ ::  *;`, we extend it up to, but not including the\n+                    // `;`. In nested imports, like `use _::{inner::*, _}` there is no `;` and we\n+                    // can just use the end of the item span\n+                    let mut span = use_path.span.with_hi(item.span.hi());\n+                    if snippet(cx, span, \"\").ends_with(';') {\n+                        span = use_path.span.with_hi(item.span.hi() - BytePos(1));\n+                    }\n                     (\n-                        use_path.span.with_hi(use_path.span.hi() + BytePos(3)),\n+                        span,\n                         false,\n                     )\n                 };\n@@ -111,10 +125,10 @@ impl LateLintPass<'_, '_> for WildcardImports {\n                     }\n                 };\n \n-                let sugg = if import_source.is_empty() {\n+                let sugg = if braced_glob {\n                     imports_string\n                 } else {\n-                    format!(\"{}::{}\", import_source, imports_string)\n+                    format!(\"{}::{}\", import_source_snippet, imports_string)\n                 };\n \n                 let (lint, message) = if let Res::Def(DefKind::Enum, _) = use_path.res {"}, {"sha": "f447a92715dc5b1476c70b023c8b281b833c9346", "filename": "tests/ui/wildcard_imports.fixed", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4dd2252b17915a6b11b8e9ea4bc4500e80437a60/tests%2Fui%2Fwildcard_imports.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/4dd2252b17915a6b11b8e9ea4bc4500e80437a60/tests%2Fui%2Fwildcard_imports.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwildcard_imports.fixed?ref=4dd2252b17915a6b11b8e9ea4bc4500e80437a60", "patch": "@@ -145,3 +145,12 @@ fn test_reexported() {\n     let _ = ExportedStruct;\n     let _ = ExportedEnum::A;\n }\n+\n+#[rustfmt::skip]\n+fn test_weird_formatting() {\n+    use crate:: in_fn_test::exported;\n+    use crate:: fn_mod::foo;\n+\n+    exported();\n+    foo();\n+}"}, {"sha": "3fd66763a9fc70202ba5e2b10c38be018fc9f13d", "filename": "tests/ui/wildcard_imports.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4dd2252b17915a6b11b8e9ea4bc4500e80437a60/tests%2Fui%2Fwildcard_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dd2252b17915a6b11b8e9ea4bc4500e80437a60/tests%2Fui%2Fwildcard_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwildcard_imports.rs?ref=4dd2252b17915a6b11b8e9ea4bc4500e80437a60", "patch": "@@ -145,3 +145,13 @@ fn test_reexported() {\n     let _ = ExportedStruct;\n     let _ = ExportedEnum::A;\n }\n+\n+#[rustfmt::skip]\n+fn test_weird_formatting() {\n+    use crate:: in_fn_test::  * ;\n+    use crate:: fn_mod::\n+        *;\n+\n+    exported();\n+    foo();\n+}"}, {"sha": "bebd9c1f85209f43d5b3b60677e4abc71e91d65a", "filename": "tests/ui/wildcard_imports.stderr", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4dd2252b17915a6b11b8e9ea4bc4500e80437a60/tests%2Fui%2Fwildcard_imports.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4dd2252b17915a6b11b8e9ea4bc4500e80437a60/tests%2Fui%2Fwildcard_imports.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwildcard_imports.stderr?ref=4dd2252b17915a6b11b8e9ea4bc4500e80437a60", "patch": "@@ -78,5 +78,19 @@ error: usage of wildcard import\n LL |     use crate::in_fn_test::*;\n    |         ^^^^^^^^^^^^^^^^^^^^ help: try: `crate::in_fn_test::{ExportedEnum, ExportedStruct, exported}`\n \n-error: aborting due to 13 previous errors\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports.rs:151:9\n+   |\n+LL |     use crate:: in_fn_test::  * ;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `crate:: in_fn_test::exported`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports.rs:152:9\n+   |\n+LL |       use crate:: fn_mod::\n+   |  _________^\n+LL | |         *;\n+   | |_________^ help: try: `crate:: fn_mod::foo`\n+\n+error: aborting due to 15 previous errors\n "}]}