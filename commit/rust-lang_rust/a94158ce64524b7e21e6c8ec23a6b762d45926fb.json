{"sha": "a94158ce64524b7e21e6c8ec23a6b762d45926fb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5NDE1OGNlNjQ1MjRiN2UyMWU2YzhlYzIzYTZiNzYyZDQ1OTI2ZmI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-27T01:46:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-27T01:46:10Z"}, "message": "auto merge of #9504 : brson/rust/continue, r=alexcrichton", "tree": {"sha": "910767022dcecd289d5725833b1150054be5ef68", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/910767022dcecd289d5725833b1150054be5ef68"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a94158ce64524b7e21e6c8ec23a6b762d45926fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a94158ce64524b7e21e6c8ec23a6b762d45926fb", "html_url": "https://github.com/rust-lang/rust/commit/a94158ce64524b7e21e6c8ec23a6b762d45926fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a94158ce64524b7e21e6c8ec23a6b762d45926fb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1434b4bfcafe90cffa6627e3be18a9e5b6501ad1", "url": "https://api.github.com/repos/rust-lang/rust/commits/1434b4bfcafe90cffa6627e3be18a9e5b6501ad1", "html_url": "https://github.com/rust-lang/rust/commit/1434b4bfcafe90cffa6627e3be18a9e5b6501ad1"}, {"sha": "c1d64297f071ea166ffbe5aea4fa5f94da3b3622", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1d64297f071ea166ffbe5aea4fa5f94da3b3622", "html_url": "https://github.com/rust-lang/rust/commit/c1d64297f071ea166ffbe5aea4fa5f94da3b3622"}], "stats": {"total": 102, "additions": 60, "deletions": 42}, "files": [{"sha": "bad1ea510be2b09dc80e544a668707adecb80522", "filename": "src/etc/emacs/rust-mode.el", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a94158ce64524b7e21e6c8ec23a6b762d45926fb/src%2Fetc%2Femacs%2Frust-mode.el", "raw_url": "https://github.com/rust-lang/rust/raw/a94158ce64524b7e21e6c8ec23a6b762d45926fb/src%2Fetc%2Femacs%2Frust-mode.el", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Femacs%2Frust-mode.el?ref=a94158ce64524b7e21e6c8ec23a6b762d45926fb", "patch": "@@ -127,6 +127,7 @@\n (defconst rust-mode-keywords\n   '(\"as\"\n     \"break\"\n+    \"continue\"\n     \"do\"\n     \"else\" \"enum\" \"extern\"\n     \"false\" \"fn\" \"for\""}, {"sha": "1869024e20b0c3531ab831d7c293d17ca68ae3ee", "filename": "src/etc/gedit/share/gtksourceview-3.0/language-specs/rust.lang", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a94158ce64524b7e21e6c8ec23a6b762d45926fb/src%2Fetc%2Fgedit%2Fshare%2Fgtksourceview-3.0%2Flanguage-specs%2Frust.lang", "raw_url": "https://github.com/rust-lang/rust/raw/a94158ce64524b7e21e6c8ec23a6b762d45926fb/src%2Fetc%2Fgedit%2Fshare%2Fgtksourceview-3.0%2Flanguage-specs%2Frust.lang", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fgedit%2Fshare%2Fgtksourceview-3.0%2Flanguage-specs%2Frust.lang?ref=a94158ce64524b7e21e6c8ec23a6b762d45926fb", "patch": "@@ -39,6 +39,7 @@\n \t\t<keyword>assert</keyword>\n \t\t<keyword>break</keyword>\n \t\t<keyword>const</keyword>\n+\t\t<keyword>continue</keyword>\n \t\t<keyword>do</keyword>\n \t\t<keyword>drop</keyword>\n \t\t<keyword>else</keyword>"}, {"sha": "ba6b9630c3b0a8cda43822253784d98af1acf0aa", "filename": "src/etc/kate/rust.xml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a94158ce64524b7e21e6c8ec23a6b762d45926fb/src%2Fetc%2Fkate%2Frust.xml", "raw_url": "https://github.com/rust-lang/rust/raw/a94158ce64524b7e21e6c8ec23a6b762d45926fb/src%2Fetc%2Fkate%2Frust.xml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fkate%2Frust.xml?ref=a94158ce64524b7e21e6c8ec23a6b762d45926fb", "patch": "@@ -18,6 +18,7 @@\n \t<list name=\"keywords\">\n \t\t<item> as </item>\n \t\t<item> break </item>\n+\t\t<item> continue </item>\n \t\t<item> do </item>\n \t\t<item> drop </item>\n \t\t<item> else </item>"}, {"sha": "c465f076c74aba37bca10e04687b83df160107df", "filename": "src/etc/vim/syntax/rust.vim", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a94158ce64524b7e21e6c8ec23a6b762d45926fb/src%2Fetc%2Fvim%2Fsyntax%2Frust.vim", "raw_url": "https://github.com/rust-lang/rust/raw/a94158ce64524b7e21e6c8ec23a6b762d45926fb/src%2Fetc%2Fvim%2Fsyntax%2Frust.vim", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fvim%2Fsyntax%2Frust.vim?ref=a94158ce64524b7e21e6c8ec23a6b762d45926fb", "patch": "@@ -18,7 +18,7 @@ syn keyword   rustOperator    as\n \n syn match     rustAssert      \"\\<assert\\(\\w\\)*!\" contained\n syn match     rustFail        \"\\<fail\\(\\w\\)*!\" contained\n-syn keyword   rustKeyword     break do extern\n+syn keyword   rustKeyword     break continue do extern\n syn keyword   rustKeyword     in if impl let log\n syn keyword   rustKeyword     for impl let log\n syn keyword   rustKeyword     loop mod once priv pub"}, {"sha": "69b3c79d1a9aa3b0d50ea8006b5d00e2e29dc233", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a94158ce64524b7e21e6c8ec23a6b762d45926fb/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a94158ce64524b7e21e6c8ec23a6b762d45926fb/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=a94158ce64524b7e21e6c8ec23a6b762d45926fb", "patch": "@@ -564,19 +564,19 @@ impl<'self> EachItemContext<'self> {\n             }\n         }\n \n-        let mut continue = (self.callback)(*self.path_builder, def_like, vis);\n+        let mut continue_ = (self.callback)(*self.path_builder, def_like, vis);\n \n         let family = item_family(doc);\n         if family == ForeignMod {\n             // These are unnamed; pop the name now.\n             self.pop_name(old_len)\n         }\n \n-        if continue {\n+        if continue_ {\n             // Recurse if necessary.\n             match family {\n                 Mod | ForeignMod | Trait | Impl => {\n-                    continue = self.each_item_of_module(def_id);\n+                    continue_ = self.each_item_of_module(def_id);\n                 }\n                 ImmStatic | MutStatic | Struct | UnsafeFn | Fn | ForeignFn |\n                 UnsafeStaticMethod | StaticMethod | Type | ForeignType |\n@@ -589,7 +589,7 @@ impl<'self> EachItemContext<'self> {\n             self.pop_name(old_len)\n         }\n \n-        continue\n+        continue_\n     }\n \n     fn each_item_of_module(&mut self, def_id: ast::DefId) -> bool {\n@@ -612,7 +612,7 @@ impl<'self> EachItemContext<'self> {\n     }\n \n     fn each_child_of_module_or_crate(&mut self, item_doc: ebml::Doc) -> bool {\n-        let mut continue = true;\n+        let mut continue_ = true;\n \n         // Iterate over all children.\n         do reader::tagged_docs(item_doc, tag_mod_child) |child_info_doc| {\n@@ -654,16 +654,16 @@ impl<'self> EachItemContext<'self> {\n                     // Process this item.\n \n                     let vis = item_visibility(child_item_doc);\n-                    continue = self.process_item_and_pop_name(child_item_doc,\n+                    continue_ = self.process_item_and_pop_name(child_item_doc,\n                                                               child_def_id,\n                                                               old_len,\n                                                               vis);\n                 }\n             }\n-            continue\n+            continue_\n         };\n \n-        if !continue {\n+        if !continue_ {\n             return false\n         }\n \n@@ -705,18 +705,18 @@ impl<'self> EachItemContext<'self> {\n             match maybe_find_item(def_id.node, other_crates_items) {\n                 None => { self.pop_name(old_len); }\n                 Some(reexported_item_doc) => {\n-                    continue = self.process_item_and_pop_name(\n+                    continue_ = self.process_item_and_pop_name(\n                         reexported_item_doc,\n                         def_id,\n                         old_len,\n                         ast::public);\n                 }\n             }\n \n-            continue\n+            continue_\n         };\n \n-        continue\n+        continue_\n     }\n }\n "}, {"sha": "e3cc155b01343cb62b9d48f718e26ac7906e7b71", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a94158ce64524b7e21e6c8ec23a6b762d45926fb/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a94158ce64524b7e21e6c8ec23a6b762d45926fb/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=a94158ce64524b7e21e6c8ec23a6b762d45926fb", "patch": "@@ -521,12 +521,12 @@ fn encode_reexported_static_methods(ecx: &EncodeContext,\n /// * For newtype structs, iterates through the node ID of the constructor.\n fn each_auxiliary_node_id(item: @item, callback: &fn(NodeId) -> bool)\n                           -> bool {\n-    let mut continue = true;\n+    let mut continue_ = true;\n     match item.node {\n         item_enum(ref enum_def, _) => {\n             for variant in enum_def.variants.iter() {\n-                continue = callback(variant.node.id);\n-                if !continue {\n+                continue_ = callback(variant.node.id);\n+                if !continue_ {\n                     break\n                 }\n             }\n@@ -537,15 +537,15 @@ fn each_auxiliary_node_id(item: @item, callback: &fn(NodeId) -> bool)\n                 Some(ctor_id) if struct_def.fields.len() > 0 &&\n                         struct_def.fields[0].node.kind ==\n                         ast::unnamed_field => {\n-                    continue = callback(ctor_id);\n+                    continue_ = callback(ctor_id);\n                 }\n                 _ => {}\n             }\n         }\n         _ => {}\n     }\n \n-    continue\n+    continue_\n }\n \n fn encode_reexports(ecx: &EncodeContext,"}, {"sha": "d47435dab56107c5d983f6e55aad9fd71811d287", "filename": "src/libsyntax/ext/asm.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a94158ce64524b7e21e6c8ec23a6b762d45926fb/src%2Flibsyntax%2Fext%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a94158ce64524b7e21e6c8ec23a6b762d45926fb/src%2Flibsyntax%2Fext%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fasm.rs?ref=a94158ce64524b7e21e6c8ec23a6b762d45926fb", "patch": "@@ -54,8 +54,8 @@ pub fn expand_asm(cx: @ExtCtxt, sp: Span, tts: &[ast::token_tree])\n     let mut state = Asm;\n \n     // Not using labeled break to get us through one round of bootstrapping.\n-    let mut continue = true;\n-    while continue {\n+    let mut continue_ = true;\n+    while continue_ {\n         match state {\n             Asm => {\n                 asm = expr_to_str(cx, p.parse_expr(),\n@@ -142,7 +142,7 @@ pub fn expand_asm(cx: @ExtCtxt, sp: Span, tts: &[ast::token_tree])\n                 match next_state(state) {\n                     Some(x) => x,\n                     None    => {\n-                        continue = false;\n+                        continue_ = false;\n                         break\n                     }\n                 }\n@@ -151,19 +151,19 @@ pub fn expand_asm(cx: @ExtCtxt, sp: Span, tts: &[ast::token_tree])\n                 let s = match next_state(state) {\n                     Some(x) => x,\n                     None    => {\n-                        continue = false;\n+                        continue_ = false;\n                         break\n                     }\n                 };\n                 match next_state(s) {\n                     Some(x) => x,\n                     None    => {\n-                        continue = false;\n+                        continue_ = false;\n                         break\n                     }\n                 }\n             } else if *p.token == token::EOF {\n-                continue = false;\n+                continue_ = false;\n                 break;\n             } else {\n                state"}, {"sha": "d9fb53b4677fc8d6dfe2b31272be2ece3eecff57", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a94158ce64524b7e21e6c8ec23a6b762d45926fb/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a94158ce64524b7e21e6c8ec23a6b762d45926fb/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=a94158ce64524b7e21e6c8ec23a6b762d45926fb", "patch": "@@ -1786,6 +1786,17 @@ impl Parser {\n             }\n         } else if self.eat_keyword(keywords::Loop) {\n             return self.parse_loop_expr(None);\n+        } else if self.eat_keyword(keywords::Continue) {\n+            let lo = self.span.lo;\n+            let ex = if self.token_is_lifetime(&*self.token) {\n+                let lifetime = self.get_lifetime(&*self.token);\n+                self.bump();\n+                ExprAgain(Some(lifetime.name))\n+            } else {\n+                ExprAgain(None)\n+            };\n+            let hi = self.span.hi;\n+            return self.mk_expr(lo, hi, ex);\n         } else if self.eat_keyword(keywords::Match) {\n             return self.parse_match_expr();\n         } else if self.eat_keyword(keywords::Unsafe) {\n@@ -2578,6 +2589,7 @@ impl Parser {\n             return self.mk_expr(lo, hi, ExprLoop(body, opt_ident));\n         } else {\n             // This is a 'continue' expression\n+            // FIXME #9467 rm support for 'loop' here after snapshot\n             if opt_ident.is_some() {\n                 self.span_err(*self.last_span,\n                               \"a label may not be used with a `loop` expression\");"}, {"sha": "eec4a81b2cfeb4e7f14f06278af826531f0a7960", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 21, "deletions": 18, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/a94158ce64524b7e21e6c8ec23a6b762d45926fb/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a94158ce64524b7e21e6c8ec23a6b762d45926fb/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=a94158ce64524b7e21e6c8ec23a6b762d45926fb", "patch": "@@ -477,14 +477,15 @@ fn mk_fresh_ident_interner() -> @ident_interner {\n         \"use\",                // 61\n         \"while\",              // 62\n         \"in\",                 // 63\n-\n-        \"be\",                 // 64\n-        \"pure\",               // 65\n-        \"yield\",              // 66\n-        \"typeof\",             // 67\n-        \"alignof\",            // 68\n-        \"offsetof\",           // 69\n-        \"sizeof\",             // 70\n+        \"continue\",           // 64\n+\n+        \"be\",                 // 65\n+        \"pure\",               // 66\n+        \"yield\",              // 67\n+        \"typeof\",             // 68\n+        \"alignof\",            // 69\n+        \"offsetof\",           // 70\n+        \"sizeof\",             // 71\n     ];\n \n     @interner::StrInterner::prefill(init_vec)\n@@ -628,6 +629,7 @@ pub mod keywords {\n         Unsafe,\n         Use,\n         While,\n+        Continue,\n \n         // Reserved keywords\n         Alignof,\n@@ -676,14 +678,15 @@ pub mod keywords {\n                 Unsafe => Ident { name: 60, ctxt: 0 },\n                 Use => Ident { name: 61, ctxt: 0 },\n                 While => Ident { name: 62, ctxt: 0 },\n-\n-                Alignof => Ident { name: 68, ctxt: 0 },\n-                Be => Ident { name: 64, ctxt: 0 },\n-                Offsetof => Ident { name: 69, ctxt: 0 },\n-                Pure => Ident { name: 65, ctxt: 0 },\n-                Sizeof => Ident { name: 70, ctxt: 0 },\n-                Typeof => Ident { name: 67, ctxt: 0 },\n-                Yield => Ident { name: 66, ctxt: 0 },\n+                Continue => Ident { name: 64, ctxt: 0 },\n+\n+                Alignof => Ident { name: 69, ctxt: 0 },\n+                Be => Ident { name: 65, ctxt: 0 },\n+                Offsetof => Ident { name: 70, ctxt: 0 },\n+                Pure => Ident { name: 66, ctxt: 0 },\n+                Sizeof => Ident { name: 71, ctxt: 0 },\n+                Typeof => Ident { name: 68, ctxt: 0 },\n+                Yield => Ident { name: 67, ctxt: 0 },\n             }\n         }\n     }\n@@ -709,7 +712,7 @@ pub fn is_any_keyword(tok: &Token) -> bool {\n pub fn is_strict_keyword(tok: &Token) -> bool {\n     match *tok {\n         token::IDENT(sid, false) => match sid.name {\n-            8 | 27 | 32 .. 63 => true,\n+            8 | 27 | 32 .. 64 => true,\n             _ => false,\n         },\n         _ => false,\n@@ -719,7 +722,7 @@ pub fn is_strict_keyword(tok: &Token) -> bool {\n pub fn is_reserved_keyword(tok: &Token) -> bool {\n     match *tok {\n         token::IDENT(sid, false) => match sid.name {\n-            64 .. 70 => true,\n+            65 .. 71 => true,\n             _ => false,\n         },\n         _ => false,"}, {"sha": "f0e6d4b45a5c442779da024b64543d24563727a9", "filename": "src/test/run-pass/while-cont.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a94158ce64524b7e21e6c8ec23a6b762d45926fb/src%2Ftest%2Frun-pass%2Fwhile-cont.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a94158ce64524b7e21e6c8ec23a6b762d45926fb/src%2Ftest%2Frun-pass%2Fwhile-cont.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fwhile-cont.rs?ref=a94158ce64524b7e21e6c8ec23a6b762d45926fb", "patch": "@@ -15,6 +15,6 @@ pub fn main() {\n         assert!((i > 0));\n         info!(i);\n         i -= 1;\n-        loop;\n+        continue;\n     }\n }"}]}