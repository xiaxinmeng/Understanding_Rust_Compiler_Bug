{"sha": "8147d17d8e3ac5c5dc9562862050f0876c556e88", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxNDdkMTdkOGUzYWM1YzVkYzk1NjI4NjIwNTBmMDg3NmM1NTZlODg=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-06-06T13:52:26Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-06-26T14:31:49Z"}, "message": "make `normalize` take ownership of the thing to be normalized", "tree": {"sha": "b43a33b4530b709117f27271e44b4692be76020d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b43a33b4530b709117f27271e44b4692be76020d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8147d17d8e3ac5c5dc9562862050f0876c556e88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8147d17d8e3ac5c5dc9562862050f0876c556e88", "html_url": "https://github.com/rust-lang/rust/commit/8147d17d8e3ac5c5dc9562862050f0876c556e88", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8147d17d8e3ac5c5dc9562862050f0876c556e88/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "214d7650c91e777c445a8ef0733c8553e34b2658", "url": "https://api.github.com/repos/rust-lang/rust/commits/214d7650c91e777c445a8ef0733c8553e34b2658", "html_url": "https://github.com/rust-lang/rust/commit/214d7650c91e777c445a8ef0733c8553e34b2658"}], "stats": {"total": 23, "additions": 12, "deletions": 11}, "files": [{"sha": "708ff4aa2ba8ea175e2376ac6445c0cac53a60cb", "filename": "src/librustc_mir/borrow_check/nll/type_check/input_output.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8147d17d8e3ac5c5dc9562862050f0876c556e88/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Finput_output.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8147d17d8e3ac5c5dc9562862050f0876c556e88/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Finput_output.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Finput_output.rs?ref=8147d17d8e3ac5c5dc9562862050f0876c556e88", "patch": "@@ -51,7 +51,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n         // Equate expected input tys with those in the MIR.\n         let argument_locals = (1..).map(Local::new);\n         for (&unnormalized_input_ty, local) in unnormalized_input_tys.iter().zip(argument_locals) {\n-            let input_ty = self.normalize(&unnormalized_input_ty, Locations::All);\n+            let input_ty = self.normalize(unnormalized_input_ty, Locations::All);\n             let mir_input_ty = mir.local_decls[local].ty;\n             self.equate_normalized_input_or_output(input_ty, mir_input_ty);\n         }\n@@ -71,7 +71,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n             \"equate_inputs_and_outputs: unnormalized_output_ty={:?}\",\n             unnormalized_output_ty\n         );\n-        let output_ty = self.normalize(&unnormalized_output_ty, Locations::All);\n+        let output_ty = self.normalize(unnormalized_output_ty, Locations::All);\n         debug!(\n             \"equate_inputs_and_outputs: normalized output_ty={:?}\",\n             output_ty"}, {"sha": "d9e3ecb8f8537a50cd81e25c18af2b20d289d0b5", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8147d17d8e3ac5c5dc9562862050f0876c556e88/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8147d17d8e3ac5c5dc9562862050f0876c556e88/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=8147d17d8e3ac5c5dc9562862050f0876c556e88", "patch": "@@ -289,7 +289,7 @@ impl<'a, 'b, 'gcx, 'tcx> TypeVerifier<'a, 'b, 'gcx, 'tcx> {\n                     let instantiated_predicates =\n                         tcx.predicates_of(def_id).instantiate(tcx, substs);\n                     let predicates =\n-                        type_checker.normalize(&instantiated_predicates.predicates, location);\n+                        type_checker.normalize(instantiated_predicates.predicates, location);\n                     type_checker.prove_predicates(predicates, location);\n                 }\n \n@@ -346,7 +346,7 @@ impl<'a, 'b, 'gcx, 'tcx> TypeVerifier<'a, 'b, 'gcx, 'tcx> {\n             Place::Static(box Static { def_id, ty: sty }) => {\n                 let sty = self.sanitize_type(place, sty);\n                 let ty = self.tcx().type_of(def_id);\n-                let ty = self.cx.normalize(&ty, location);\n+                let ty = self.cx.normalize(ty, location);\n                 if let Err(terr) = self.cx.eq_types(ty, sty, location.at_self()) {\n                     span_mirbug!(\n                         self,\n@@ -1023,7 +1023,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                     LateBoundRegionConversionTime::FnCall,\n                     &sig,\n                 );\n-                let sig = self.normalize(&sig, term_location);\n+                let sig = self.normalize(sig, term_location);\n                 self.check_call_dest(mir, term, &sig, destination, term_location);\n \n                 self.prove_predicates(\n@@ -1311,7 +1311,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                 let variant = &def.variants[variant_index];\n                 let adj_field_index = active_field_index.unwrap_or(field_index);\n                 if let Some(field) = variant.fields.get(adj_field_index) {\n-                    Ok(self.normalize(&field.ty(tcx, substs), location))\n+                    Ok(self.normalize(field.ty(tcx, substs), location))\n                 } else {\n                     Err(FieldAccessError::OutOfRange {\n                         field_count: variant.fields.len(),\n@@ -1385,7 +1385,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                     // function definition. When we extract the\n                     // signature, it comes from the `fn_sig` query,\n                     // and hence may contain unnormalized results.\n-                    let fn_sig = self.normalize(&fn_sig, location);\n+                    let fn_sig = self.normalize(fn_sig, location);\n \n                     let ty_fn_ptr_from = tcx.mk_fn_ptr(fn_sig);\n \n@@ -1430,7 +1430,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                     // function definition. When we extract the\n                     // signature, it comes from the `fn_sig` query,\n                     // and hence may contain unnormalized results.\n-                    let fn_sig = self.normalize(&fn_sig, location);\n+                    let fn_sig = self.normalize(fn_sig, location);\n \n                     let ty_fn_ptr_from = tcx.safe_to_unsafe_fn_ty(fn_sig);\n \n@@ -1576,7 +1576,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n             AggregateKind::Array(_) | AggregateKind::Tuple => ty::InstantiatedPredicates::empty(),\n         };\n \n-        let predicates = self.normalize(&instantiated_predicates.predicates, location);\n+        let predicates = self.normalize(instantiated_predicates.predicates, location);\n         debug!(\"prove_aggregate_predicates: predicates={:?}\", predicates);\n         self.prove_predicates(predicates, location);\n     }\n@@ -1644,7 +1644,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n         }\n     }\n \n-    fn normalize<T>(&mut self, value: &T, location: impl ToLocations) -> T\n+    fn normalize<T>(&mut self, value: T, location: impl ToLocations) -> T\n     where\n         T: fmt::Debug + TypeFoldable<'tcx>,\n     {\n@@ -1661,7 +1661,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                 let Normalized { value, obligations } = this\n                     .infcx\n                     .at(&ObligationCause::dummy(), this.param_env)\n-                    .normalize(value)\n+                    .normalize(&value)\n                     .unwrap_or_else(|NoSolution| {\n                         span_bug!(\n                             this.last_span,"}, {"sha": "602abbdd4e7a42adab1396777494b58d6953ced1", "filename": "src/librustc_mir/borrow_check/nll/type_check/type_op.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8147d17d8e3ac5c5dc9562862050f0876c556e88/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Ftype_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8147d17d8e3ac5c5dc9562862050f0876c556e88/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Ftype_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Ftype_op.rs?ref=8147d17d8e3ac5c5dc9562862050f0876c556e88", "patch": "@@ -19,6 +19,7 @@ pub(super) trait TypeOp<'gcx, 'tcx> {\n     /// Micro-optimization point: true if this is trivially true.\n     fn trivial_noop(&self) -> Option<Self::Output>;\n \n+    /// Produce a description of the operation for the debug logs.\n     fn perform(\n         self,\n         type_checker: &mut TypeChecker<'_, 'gcx, 'tcx>,"}]}