{"sha": "46063ed23fbcd50a7723ee6008e6d63605789e24", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2MDYzZWQyM2ZiY2Q1MGE3NzIzZWU2MDA4ZTZkNjM2MDU3ODllMjQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-10-29T03:08:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-29T03:08:23Z"}, "message": "Rollup merge of #65809 - roblabla:eficall-abi, r=nagisa\n\nAdd new EFIAPI ABI\n\nFixes #54527\n\nAdds a new ABI, \"efiapi\", which reflects the calling convention as specified by [the current spec UEFI spec](https://uefi.org/sites/default/files/resources/UEFI%20Spec%202_7_A%20Sept%206.pdf#G6.999903). When compiling for x86_64, we should select the `win64` ABI, while on all other architectures (Itanium, x86, ARM and ARM64 and RISC-V), we should select the `C` ABI.\n\nCurrently, this is done by just turning it into the C ABI everywhere except on x86_64, where it's turned into the win64 ABI. Should we prevent this ABI from being used on unsupported architectures, and if so, how would this be done?", "tree": {"sha": "3fe15cf8b6933e3d09330cf8f17516a5abe0803c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3fe15cf8b6933e3d09330cf8f17516a5abe0803c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/46063ed23fbcd50a7723ee6008e6d63605789e24", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdt60nCRBK7hj4Ov3rIwAAdHIIAEmOGTR0enj7Bx7OlQJV6rZU\nW28jPFSeXMRb9uLQRh3a1Q/GTFLay/UMS0KHAmj3lVDOJaYH3ozOXA5mFDSXfAqF\nX+Mp6MMIin6fJr2EwvC4SjAQBAVlcXgD4PXRut+OuWht/zYFiSerOznVtlcPnBwb\nnVs8DLxJxgYBsEU+p3g2F4MpPl+hgBawWaX6tFO5ty4ImiTJgxk8wxhyVwIzOoYZ\n8YMyzD2lCuudjNZolj1th4+6mcxNeXqH+cVw+8M86gAyNQALH/q6Hle6vGtUAO/S\nEoOQEaZ2epRsDJgVnhs6ogwpcxDza5GEHgkgMk35x+92xmXKyX8Bz1z43ba0VmU=\n=z12V\n-----END PGP SIGNATURE-----\n", "payload": "tree 3fe15cf8b6933e3d09330cf8f17516a5abe0803c\nparent 9c5b6b2201a3af818a6efb0650b1622a342f40f5\nparent 1099826efa725b5de7833d42f2b96a53881e2118\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1572318503 +0100\ncommitter GitHub <noreply@github.com> 1572318503 +0100\n\nRollup merge of #65809 - roblabla:eficall-abi, r=nagisa\n\nAdd new EFIAPI ABI\n\nFixes #54527\n\nAdds a new ABI, \"efiapi\", which reflects the calling convention as specified by [the current spec UEFI spec](https://uefi.org/sites/default/files/resources/UEFI%20Spec%202_7_A%20Sept%206.pdf#G6.999903). When compiling for x86_64, we should select the `win64` ABI, while on all other architectures (Itanium, x86, ARM and ARM64 and RISC-V), we should select the `C` ABI.\n\nCurrently, this is done by just turning it into the C ABI everywhere except on x86_64, where it's turned into the win64 ABI. Should we prevent this ABI from being used on unsupported architectures, and if so, how would this be done?\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/46063ed23fbcd50a7723ee6008e6d63605789e24", "html_url": "https://github.com/rust-lang/rust/commit/46063ed23fbcd50a7723ee6008e6d63605789e24", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/46063ed23fbcd50a7723ee6008e6d63605789e24/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c5b6b2201a3af818a6efb0650b1622a342f40f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c5b6b2201a3af818a6efb0650b1622a342f40f5", "html_url": "https://github.com/rust-lang/rust/commit/9c5b6b2201a3af818a6efb0650b1622a342f40f5"}, {"sha": "1099826efa725b5de7833d42f2b96a53881e2118", "url": "https://api.github.com/repos/rust-lang/rust/commits/1099826efa725b5de7833d42f2b96a53881e2118", "html_url": "https://github.com/rust-lang/rust/commit/1099826efa725b5de7833d42f2b96a53881e2118"}], "stats": {"total": 285, "additions": 203, "deletions": 82}, "files": [{"sha": "4fd4e25f641108cbaac4b06ec3b679b4f8877998", "filename": "src/librustc/ich/impls_syntax.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/46063ed23fbcd50a7723ee6008e6d63605789e24/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46063ed23fbcd50a7723ee6008e6d63605789e24/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_syntax.rs?ref=46063ed23fbcd50a7723ee6008e6d63605789e24", "patch": "@@ -80,6 +80,7 @@ impl_stable_hash_for!(enum ::rustc_target::spec::abi::Abi {\n     Msp430Interrupt,\n     X86Interrupt,\n     AmdGpuKernel,\n+    EfiApi,\n     Rust,\n     C,\n     System,"}, {"sha": "e82232ac10f7bbc1f15f6eb9b1687629666b9606", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/46063ed23fbcd50a7723ee6008e6d63605789e24/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46063ed23fbcd50a7723ee6008e6d63605789e24/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=46063ed23fbcd50a7723ee6008e6d63605789e24", "patch": "@@ -2596,6 +2596,7 @@ where\n \n             // It's the ABI's job to select this, not ours.\n             System => bug!(\"system abi should be selected elsewhere\"),\n+            EfiApi => bug!(\"eficall abi should be selected elsewhere\"),\n \n             Stdcall => Conv::X86Stdcall,\n             Fastcall => Conv::X86Fastcall,"}, {"sha": "3a24d30966f638be5c3e6ba824c29e923e716e3a", "filename": "src/librustc_target/spec/abi.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46063ed23fbcd50a7723ee6008e6d63605789e24/src%2Flibrustc_target%2Fspec%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46063ed23fbcd50a7723ee6008e6d63605789e24/src%2Flibrustc_target%2Fspec%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fabi.rs?ref=46063ed23fbcd50a7723ee6008e6d63605789e24", "patch": "@@ -21,6 +21,7 @@ pub enum Abi {\n     Msp430Interrupt,\n     X86Interrupt,\n     AmdGpuKernel,\n+    EfiApi,\n \n     // Multiplatform / generic ABIs\n     Rust,\n@@ -58,6 +59,7 @@ const AbiDatas: &[AbiData] = &[\n     AbiData {abi: Abi::Msp430Interrupt, name: \"msp430-interrupt\", generic: false },\n     AbiData {abi: Abi::X86Interrupt, name: \"x86-interrupt\", generic: false },\n     AbiData {abi: Abi::AmdGpuKernel, name: \"amdgpu-kernel\", generic: false },\n+    AbiData {abi: Abi::EfiApi, name: \"efiapi\", generic: false },\n \n     // Cross-platform ABIs\n     AbiData {abi: Abi::Rust, name: \"Rust\", generic: true },"}, {"sha": "6033d52c4411239ea8e73efe302dec443d222dff", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/46063ed23fbcd50a7723ee6008e6d63605789e24/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46063ed23fbcd50a7723ee6008e6d63605789e24/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=46063ed23fbcd50a7723ee6008e6d63605789e24", "patch": "@@ -905,6 +905,13 @@ impl Target {\n                     abi\n                 }\n             },\n+            Abi::EfiApi => {\n+                if self.arch == \"x86_64\" {\n+                    Abi::Win64\n+                } else {\n+                    Abi::C\n+                }\n+            },\n             abi => abi\n         }\n     }"}, {"sha": "22638a1376c72cab90b979f054742e37074eb04a", "filename": "src/libsyntax/feature_gate/active.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/46063ed23fbcd50a7723ee6008e6d63605789e24/src%2Flibsyntax%2Ffeature_gate%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46063ed23fbcd50a7723ee6008e6d63605789e24/src%2Flibsyntax%2Ffeature_gate%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Factive.rs?ref=46063ed23fbcd50a7723ee6008e6d63605789e24", "patch": "@@ -533,6 +533,9 @@ declare_features! (\n     /// casts in safe Rust to `dyn Trait` for such a `Trait` is also forbidden.\n     (active, object_safe_for_dispatch, \"1.40.0\", Some(43561), None),\n \n+    /// Allows using the `efiapi` ABI.\n+    (active, abi_efiapi, \"1.40.0\", Some(65815), None),\n+\n     // -------------------------------------------------------------------------\n     // feature-group-end: actual feature gates\n     // -------------------------------------------------------------------------"}, {"sha": "97b99b9392f3f0ab3dfd47815dd9f76228f63e88", "filename": "src/libsyntax/feature_gate/check.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/46063ed23fbcd50a7723ee6008e6d63605789e24/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46063ed23fbcd50a7723ee6008e6d63605789e24/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs?ref=46063ed23fbcd50a7723ee6008e6d63605789e24", "patch": "@@ -227,6 +227,10 @@ impl<'a> PostExpansionVisitor<'a> {\n                 gate_feature_post!(&self, abi_amdgpu_kernel, span,\n                                    \"amdgpu-kernel ABI is experimental and subject to change\");\n             },\n+            Abi::EfiApi => {\n+                gate_feature_post!(&self, abi_efiapi, span,\n+                                   \"efiapi ABI is experimental and subject to change\");\n+            },\n             // Stable\n             Abi::Cdecl |\n             Abi::Stdcall |"}, {"sha": "8ba161f55c1fff6b759185db0976df8a07c67490", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/46063ed23fbcd50a7723ee6008e6d63605789e24/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46063ed23fbcd50a7723ee6008e6d63605789e24/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=46063ed23fbcd50a7723ee6008e6d63605789e24", "patch": "@@ -110,6 +110,7 @@ symbols! {\n         aarch64_target_feature,\n         abi,\n         abi_amdgpu_kernel,\n+        abi_efiapi,\n         abi_msp430_interrupt,\n         abi_ptx,\n         abi_sysv64,"}, {"sha": "72adb95e96af9954f27552bde49ce60bb48fbc03", "filename": "src/test/codegen/abi-efiapi.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/46063ed23fbcd50a7723ee6008e6d63605789e24/src%2Ftest%2Fcodegen%2Fabi-efiapi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46063ed23fbcd50a7723ee6008e6d63605789e24/src%2Ftest%2Fcodegen%2Fabi-efiapi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fabi-efiapi.rs?ref=46063ed23fbcd50a7723ee6008e6d63605789e24", "patch": "@@ -0,0 +1,31 @@\n+// Checks if the correct annotation for the efiapi ABI is passed to llvm.\n+\n+// revisions:x86_64 i686 aarch64 arm riscv\n+\n+// min-llvm-version 9.0\n+\n+//[x86_64] compile-flags: --target x86_64-unknown-uefi\n+//[i686] compile-flags: --target i686-unknown-linux-musl\n+//[aarch64] compile-flags: --target aarch64-unknown-none\n+//[arm] compile-flags: --target armv7r-none-eabi\n+//[riscv] compile-flags: --target riscv64gc-unknown-none-elf\n+// compile-flags: -C no-prepopulate-passes\n+\n+#![crate_type = \"lib\"]\n+#![feature(no_core, lang_items, abi_efiapi)]\n+#![no_core]\n+\n+#[lang=\"sized\"]\n+trait Sized { }\n+#[lang=\"freeze\"]\n+trait Freeze { }\n+#[lang=\"copy\"]\n+trait Copy { }\n+\n+//x86_64: define win64cc void @has_efiapi\n+//i686: define void @has_efiapi\n+//aarch64: define void @has_efiapi\n+//arm: define void @has_efiapi\n+//riscv: define void @has_efiapi\n+#[no_mangle]\n+pub extern \"efiapi\" fn has_efiapi() {}"}, {"sha": "fc2a0b5950e7dd8c42e79863062d7b907f3a7726", "filename": "src/test/ui/codemap_tests/unicode.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46063ed23fbcd50a7723ee6008e6d63605789e24/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46063ed23fbcd50a7723ee6008e6d63605789e24/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode.stderr?ref=46063ed23fbcd50a7723ee6008e6d63605789e24", "patch": "@@ -4,7 +4,7 @@ error[E0703]: invalid ABI: found `\u8def\u6feb\u72fc\u00e1\u0301\u0301`\n LL | extern \"\u8def\u6feb\u72fc\u00e1\u0301\u0301\" fn foo() {}\n    |        ^^^^^^^^^ invalid ABI\n    |\n-   = help: valid ABIs: cdecl, stdcall, fastcall, vectorcall, thiscall, aapcs, win64, sysv64, ptx-kernel, msp430-interrupt, x86-interrupt, amdgpu-kernel, Rust, C, system, rust-intrinsic, rust-call, platform-intrinsic, unadjusted\n+   = help: valid ABIs: cdecl, stdcall, fastcall, vectorcall, thiscall, aapcs, win64, sysv64, ptx-kernel, msp430-interrupt, x86-interrupt, amdgpu-kernel, efiapi, Rust, C, system, rust-intrinsic, rust-call, platform-intrinsic, unadjusted\n \n error: aborting due to previous error\n "}, {"sha": "e89dc4d5a05a572207d8f683b5f74124277edaf8", "filename": "src/test/ui/feature-gates/feature-gate-abi.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/46063ed23fbcd50a7723ee6008e6d63605789e24/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46063ed23fbcd50a7723ee6008e6d63605789e24/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi.rs?ref=46063ed23fbcd50a7723ee6008e6d63605789e24", "patch": "@@ -7,6 +7,7 @@\n // gate-test-abi_ptx\n // gate-test-abi_x86_interrupt\n // gate-test-abi_amdgpu_kernel\n+// gate-test-abi_efiapi\n \n // Functions\n extern \"rust-intrinsic\" fn f1() {} //~ ERROR intrinsics are subject to change\n@@ -20,6 +21,7 @@ extern \"ptx-kernel\" fn f6() {} //~ ERROR PTX ABIs are experimental and subject t\n extern \"x86-interrupt\" fn f7() {} //~ ERROR x86-interrupt ABI is experimental\n extern \"thiscall\" fn f8() {} //~ ERROR thiscall is experimental and subject to change\n extern \"amdgpu-kernel\" fn f9() {} //~ ERROR amdgpu-kernel ABI is experimental and subject to change\n+extern \"efiapi\" fn f10() {} //~ ERROR efiapi ABI is experimental and subject to change\n \n // Methods in trait definition\n trait Tr {\n@@ -34,6 +36,7 @@ trait Tr {\n     extern \"x86-interrupt\" fn m7(); //~ ERROR x86-interrupt ABI is experimental\n     extern \"thiscall\" fn m8(); //~ ERROR thiscall is experimental and subject to change\n     extern \"amdgpu-kernel\" fn m9(); //~ ERROR amdgpu-kernel ABI is experimental and subject to change\n+    extern \"efiapi\" fn m10(); //~ ERROR efiapi ABI is experimental and subject to change\n \n     extern \"vectorcall\" fn dm3() {} //~ ERROR vectorcall is experimental and subject to change\n     extern \"rust-call\" fn dm4() {} //~ ERROR rust-call ABI is subject to change\n@@ -42,6 +45,7 @@ trait Tr {\n     extern \"x86-interrupt\" fn dm7() {} //~ ERROR x86-interrupt ABI is experimental\n     extern \"thiscall\" fn dm8() {} //~ ERROR thiscall is experimental and subject to change\n     extern \"amdgpu-kernel\" fn dm9() {} //~ ERROR amdgpu-kernel ABI is experimental and subject to change\n+    extern \"efiapi\" fn dm10() {} //~ ERROR efiapi ABI is experimental and subject to change\n }\n \n struct S;\n@@ -59,6 +63,7 @@ impl Tr for S {\n     extern \"x86-interrupt\" fn m7() {} //~ ERROR x86-interrupt ABI is experimental\n     extern \"thiscall\" fn m8() {} //~ ERROR thiscall is experimental and subject to change\n     extern \"amdgpu-kernel\" fn m9() {} //~ ERROR amdgpu-kernel ABI is experimental and subject to change\n+    extern \"efiapi\" fn m10() {} //~ ERROR efiapi ABI is experimental and subject to change\n }\n \n // Methods in inherent impl\n@@ -74,6 +79,7 @@ impl S {\n     extern \"x86-interrupt\" fn im7() {} //~ ERROR x86-interrupt ABI is experimental\n     extern \"thiscall\" fn im8() {} //~ ERROR thiscall is experimental and subject to change\n     extern \"amdgpu-kernel\" fn im9() {} //~ ERROR amdgpu-kernel ABI is experimental and subject to change\n+    extern \"efiapi\" fn im10() {} //~ ERROR efiapi ABI is experimental and subject to change\n }\n \n // Function pointer types\n@@ -86,6 +92,7 @@ type A6 = extern \"ptx-kernel\" fn (); //~ ERROR PTX ABIs are experimental and sub\n type A7 = extern \"x86-interrupt\" fn(); //~ ERROR x86-interrupt ABI is experimental\n type A8 = extern \"thiscall\" fn(); //~ ERROR thiscall is experimental and subject to change\n type A9 = extern \"amdgpu-kernel\" fn(); //~ ERROR amdgpu-kernel ABI is experimental and subject to change\n+type A10 = extern \"efiapi\" fn(); //~ ERROR efiapi ABI is experimental and subject to change\n \n // Foreign modules\n extern \"rust-intrinsic\" {} //~ ERROR intrinsics are subject to change\n@@ -97,5 +104,6 @@ extern \"ptx-kernel\" {} //~ ERROR PTX ABIs are experimental and subject to change\n extern \"x86-interrupt\" {} //~ ERROR x86-interrupt ABI is experimental\n extern \"thiscall\" {} //~ ERROR thiscall is experimental and subject to change\n extern \"amdgpu-kernel\" {} //~ ERROR amdgpu-kernel ABI is experimental and subject to change\n+extern \"efiapi\" {} //~ ERROR efiapi ABI is experimental and subject to change\n \n fn main() {}"}, {"sha": "0f2622f1065953aeef557df8e9a6971c2e38c7c1", "filename": "src/test/ui/feature-gates/feature-gate-abi.stderr", "status": "modified", "additions": 133, "deletions": 70, "changes": 203, "blob_url": "https://github.com/rust-lang/rust/blob/46063ed23fbcd50a7723ee6008e6d63605789e24/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46063ed23fbcd50a7723ee6008e6d63605789e24/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi.stderr?ref=46063ed23fbcd50a7723ee6008e6d63605789e24", "patch": "@@ -1,13 +1,13 @@\n error[E0658]: intrinsics are subject to change\n-  --> $DIR/feature-gate-abi.rs:12:1\n+  --> $DIR/feature-gate-abi.rs:13:1\n    |\n LL | extern \"rust-intrinsic\" fn f1() {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(intrinsics)]` to the crate attributes to enable\n \n error[E0658]: platform intrinsics are experimental and possibly buggy\n-  --> $DIR/feature-gate-abi.rs:14:1\n+  --> $DIR/feature-gate-abi.rs:15:1\n    |\n LL | extern \"platform-intrinsic\" fn f2() {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -16,15 +16,15 @@ LL | extern \"platform-intrinsic\" fn f2() {}\n    = help: add `#![feature(platform_intrinsics)]` to the crate attributes to enable\n \n error[E0658]: vectorcall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:16:1\n+  --> $DIR/feature-gate-abi.rs:17:1\n    |\n LL | extern \"vectorcall\" fn f3() {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_vectorcall)]` to the crate attributes to enable\n \n error[E0658]: rust-call ABI is subject to change\n-  --> $DIR/feature-gate-abi.rs:17:1\n+  --> $DIR/feature-gate-abi.rs:18:1\n    |\n LL | extern \"rust-call\" fn f4() {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -33,7 +33,7 @@ LL | extern \"rust-call\" fn f4() {}\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error[E0658]: msp430-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:18:1\n+  --> $DIR/feature-gate-abi.rs:19:1\n    |\n LL | extern \"msp430-interrupt\" fn f5() {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -42,7 +42,7 @@ LL | extern \"msp430-interrupt\" fn f5() {}\n    = help: add `#![feature(abi_msp430_interrupt)]` to the crate attributes to enable\n \n error[E0658]: PTX ABIs are experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:19:1\n+  --> $DIR/feature-gate-abi.rs:20:1\n    |\n LL | extern \"ptx-kernel\" fn f6() {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -51,7 +51,7 @@ LL | extern \"ptx-kernel\" fn f6() {}\n    = help: add `#![feature(abi_ptx)]` to the crate attributes to enable\n \n error[E0658]: x86-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:20:1\n+  --> $DIR/feature-gate-abi.rs:21:1\n    |\n LL | extern \"x86-interrupt\" fn f7() {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -60,32 +60,41 @@ LL | extern \"x86-interrupt\" fn f7() {}\n    = help: add `#![feature(abi_x86_interrupt)]` to the crate attributes to enable\n \n error[E0658]: thiscall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:21:1\n+  --> $DIR/feature-gate-abi.rs:22:1\n    |\n LL | extern \"thiscall\" fn f8() {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_thiscall)]` to the crate attributes to enable\n \n error[E0658]: amdgpu-kernel ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:22:1\n+  --> $DIR/feature-gate-abi.rs:23:1\n    |\n LL | extern \"amdgpu-kernel\" fn f9() {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/51575\n    = help: add `#![feature(abi_amdgpu_kernel)]` to the crate attributes to enable\n \n+error[E0658]: efiapi ABI is experimental and subject to change\n+  --> $DIR/feature-gate-abi.rs:24:1\n+   |\n+LL | extern \"efiapi\" fn f10() {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/65815\n+   = help: add `#![feature(abi_efiapi)]` to the crate attributes to enable\n+\n error[E0658]: intrinsics are subject to change\n-  --> $DIR/feature-gate-abi.rs:26:5\n+  --> $DIR/feature-gate-abi.rs:28:5\n    |\n LL |     extern \"rust-intrinsic\" fn m1();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(intrinsics)]` to the crate attributes to enable\n \n error[E0658]: platform intrinsics are experimental and possibly buggy\n-  --> $DIR/feature-gate-abi.rs:28:5\n+  --> $DIR/feature-gate-abi.rs:30:5\n    |\n LL |     extern \"platform-intrinsic\" fn m2();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -94,15 +103,15 @@ LL |     extern \"platform-intrinsic\" fn m2();\n    = help: add `#![feature(platform_intrinsics)]` to the crate attributes to enable\n \n error[E0658]: vectorcall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:30:5\n+  --> $DIR/feature-gate-abi.rs:32:5\n    |\n LL |     extern \"vectorcall\" fn m3();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_vectorcall)]` to the crate attributes to enable\n \n error[E0658]: rust-call ABI is subject to change\n-  --> $DIR/feature-gate-abi.rs:31:5\n+  --> $DIR/feature-gate-abi.rs:33:5\n    |\n LL |     extern \"rust-call\" fn m4();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -111,7 +120,7 @@ LL |     extern \"rust-call\" fn m4();\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error[E0658]: msp430-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:32:5\n+  --> $DIR/feature-gate-abi.rs:34:5\n    |\n LL |     extern \"msp430-interrupt\" fn m5();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -120,7 +129,7 @@ LL |     extern \"msp430-interrupt\" fn m5();\n    = help: add `#![feature(abi_msp430_interrupt)]` to the crate attributes to enable\n \n error[E0658]: PTX ABIs are experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:33:5\n+  --> $DIR/feature-gate-abi.rs:35:5\n    |\n LL |     extern \"ptx-kernel\" fn m6();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -129,7 +138,7 @@ LL |     extern \"ptx-kernel\" fn m6();\n    = help: add `#![feature(abi_ptx)]` to the crate attributes to enable\n \n error[E0658]: x86-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:34:5\n+  --> $DIR/feature-gate-abi.rs:36:5\n    |\n LL |     extern \"x86-interrupt\" fn m7();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -138,32 +147,41 @@ LL |     extern \"x86-interrupt\" fn m7();\n    = help: add `#![feature(abi_x86_interrupt)]` to the crate attributes to enable\n \n error[E0658]: thiscall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:35:5\n+  --> $DIR/feature-gate-abi.rs:37:5\n    |\n LL |     extern \"thiscall\" fn m8();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_thiscall)]` to the crate attributes to enable\n \n error[E0658]: amdgpu-kernel ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:36:5\n+  --> $DIR/feature-gate-abi.rs:38:5\n    |\n LL |     extern \"amdgpu-kernel\" fn m9();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/51575\n    = help: add `#![feature(abi_amdgpu_kernel)]` to the crate attributes to enable\n \n+error[E0658]: efiapi ABI is experimental and subject to change\n+  --> $DIR/feature-gate-abi.rs:39:5\n+   |\n+LL |     extern \"efiapi\" fn m10();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/65815\n+   = help: add `#![feature(abi_efiapi)]` to the crate attributes to enable\n+\n error[E0658]: vectorcall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:38:5\n+  --> $DIR/feature-gate-abi.rs:41:5\n    |\n LL |     extern \"vectorcall\" fn dm3() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_vectorcall)]` to the crate attributes to enable\n \n error[E0658]: rust-call ABI is subject to change\n-  --> $DIR/feature-gate-abi.rs:39:5\n+  --> $DIR/feature-gate-abi.rs:42:5\n    |\n LL |     extern \"rust-call\" fn dm4() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -172,7 +190,7 @@ LL |     extern \"rust-call\" fn dm4() {}\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error[E0658]: msp430-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:40:5\n+  --> $DIR/feature-gate-abi.rs:43:5\n    |\n LL |     extern \"msp430-interrupt\" fn dm5() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -181,7 +199,7 @@ LL |     extern \"msp430-interrupt\" fn dm5() {}\n    = help: add `#![feature(abi_msp430_interrupt)]` to the crate attributes to enable\n \n error[E0658]: PTX ABIs are experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:41:5\n+  --> $DIR/feature-gate-abi.rs:44:5\n    |\n LL |     extern \"ptx-kernel\" fn dm6() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -190,7 +208,7 @@ LL |     extern \"ptx-kernel\" fn dm6() {}\n    = help: add `#![feature(abi_ptx)]` to the crate attributes to enable\n \n error[E0658]: x86-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:42:5\n+  --> $DIR/feature-gate-abi.rs:45:5\n    |\n LL |     extern \"x86-interrupt\" fn dm7() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -199,32 +217,41 @@ LL |     extern \"x86-interrupt\" fn dm7() {}\n    = help: add `#![feature(abi_x86_interrupt)]` to the crate attributes to enable\n \n error[E0658]: thiscall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:43:5\n+  --> $DIR/feature-gate-abi.rs:46:5\n    |\n LL |     extern \"thiscall\" fn dm8() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_thiscall)]` to the crate attributes to enable\n \n error[E0658]: amdgpu-kernel ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:44:5\n+  --> $DIR/feature-gate-abi.rs:47:5\n    |\n LL |     extern \"amdgpu-kernel\" fn dm9() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/51575\n    = help: add `#![feature(abi_amdgpu_kernel)]` to the crate attributes to enable\n \n+error[E0658]: efiapi ABI is experimental and subject to change\n+  --> $DIR/feature-gate-abi.rs:48:5\n+   |\n+LL |     extern \"efiapi\" fn dm10() {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/65815\n+   = help: add `#![feature(abi_efiapi)]` to the crate attributes to enable\n+\n error[E0658]: intrinsics are subject to change\n-  --> $DIR/feature-gate-abi.rs:51:5\n+  --> $DIR/feature-gate-abi.rs:55:5\n    |\n LL |     extern \"rust-intrinsic\" fn m1() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(intrinsics)]` to the crate attributes to enable\n \n error[E0658]: platform intrinsics are experimental and possibly buggy\n-  --> $DIR/feature-gate-abi.rs:53:5\n+  --> $DIR/feature-gate-abi.rs:57:5\n    |\n LL |     extern \"platform-intrinsic\" fn m2() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -233,15 +260,15 @@ LL |     extern \"platform-intrinsic\" fn m2() {}\n    = help: add `#![feature(platform_intrinsics)]` to the crate attributes to enable\n \n error[E0658]: vectorcall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:55:5\n+  --> $DIR/feature-gate-abi.rs:59:5\n    |\n LL |     extern \"vectorcall\" fn m3() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_vectorcall)]` to the crate attributes to enable\n \n error[E0658]: rust-call ABI is subject to change\n-  --> $DIR/feature-gate-abi.rs:56:5\n+  --> $DIR/feature-gate-abi.rs:60:5\n    |\n LL |     extern \"rust-call\" fn m4() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -250,7 +277,7 @@ LL |     extern \"rust-call\" fn m4() {}\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error[E0658]: msp430-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:57:5\n+  --> $DIR/feature-gate-abi.rs:61:5\n    |\n LL |     extern \"msp430-interrupt\" fn m5() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -259,7 +286,7 @@ LL |     extern \"msp430-interrupt\" fn m5() {}\n    = help: add `#![feature(abi_msp430_interrupt)]` to the crate attributes to enable\n \n error[E0658]: PTX ABIs are experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:58:5\n+  --> $DIR/feature-gate-abi.rs:62:5\n    |\n LL |     extern \"ptx-kernel\" fn m6() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -268,7 +295,7 @@ LL |     extern \"ptx-kernel\" fn m6() {}\n    = help: add `#![feature(abi_ptx)]` to the crate attributes to enable\n \n error[E0658]: x86-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:59:5\n+  --> $DIR/feature-gate-abi.rs:63:5\n    |\n LL |     extern \"x86-interrupt\" fn m7() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -277,32 +304,41 @@ LL |     extern \"x86-interrupt\" fn m7() {}\n    = help: add `#![feature(abi_x86_interrupt)]` to the crate attributes to enable\n \n error[E0658]: thiscall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:60:5\n+  --> $DIR/feature-gate-abi.rs:64:5\n    |\n LL |     extern \"thiscall\" fn m8() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_thiscall)]` to the crate attributes to enable\n \n error[E0658]: amdgpu-kernel ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:61:5\n+  --> $DIR/feature-gate-abi.rs:65:5\n    |\n LL |     extern \"amdgpu-kernel\" fn m9() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/51575\n    = help: add `#![feature(abi_amdgpu_kernel)]` to the crate attributes to enable\n \n-error[E0658]: intrinsics are subject to change\n+error[E0658]: efiapi ABI is experimental and subject to change\n   --> $DIR/feature-gate-abi.rs:66:5\n    |\n+LL |     extern \"efiapi\" fn m10() {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/65815\n+   = help: add `#![feature(abi_efiapi)]` to the crate attributes to enable\n+\n+error[E0658]: intrinsics are subject to change\n+  --> $DIR/feature-gate-abi.rs:71:5\n+   |\n LL |     extern \"rust-intrinsic\" fn im1() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(intrinsics)]` to the crate attributes to enable\n \n error[E0658]: platform intrinsics are experimental and possibly buggy\n-  --> $DIR/feature-gate-abi.rs:68:5\n+  --> $DIR/feature-gate-abi.rs:73:5\n    |\n LL |     extern \"platform-intrinsic\" fn im2() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -311,15 +347,15 @@ LL |     extern \"platform-intrinsic\" fn im2() {}\n    = help: add `#![feature(platform_intrinsics)]` to the crate attributes to enable\n \n error[E0658]: vectorcall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:70:5\n+  --> $DIR/feature-gate-abi.rs:75:5\n    |\n LL |     extern \"vectorcall\" fn im3() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_vectorcall)]` to the crate attributes to enable\n \n error[E0658]: rust-call ABI is subject to change\n-  --> $DIR/feature-gate-abi.rs:71:5\n+  --> $DIR/feature-gate-abi.rs:76:5\n    |\n LL |     extern \"rust-call\" fn im4() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -328,7 +364,7 @@ LL |     extern \"rust-call\" fn im4() {}\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error[E0658]: msp430-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:72:5\n+  --> $DIR/feature-gate-abi.rs:77:5\n    |\n LL |     extern \"msp430-interrupt\" fn im5() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -337,7 +373,7 @@ LL |     extern \"msp430-interrupt\" fn im5() {}\n    = help: add `#![feature(abi_msp430_interrupt)]` to the crate attributes to enable\n \n error[E0658]: PTX ABIs are experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:73:5\n+  --> $DIR/feature-gate-abi.rs:78:5\n    |\n LL |     extern \"ptx-kernel\" fn im6() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -346,7 +382,7 @@ LL |     extern \"ptx-kernel\" fn im6() {}\n    = help: add `#![feature(abi_ptx)]` to the crate attributes to enable\n \n error[E0658]: x86-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:74:5\n+  --> $DIR/feature-gate-abi.rs:79:5\n    |\n LL |     extern \"x86-interrupt\" fn im7() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -355,32 +391,41 @@ LL |     extern \"x86-interrupt\" fn im7() {}\n    = help: add `#![feature(abi_x86_interrupt)]` to the crate attributes to enable\n \n error[E0658]: thiscall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:75:5\n+  --> $DIR/feature-gate-abi.rs:80:5\n    |\n LL |     extern \"thiscall\" fn im8() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_thiscall)]` to the crate attributes to enable\n \n error[E0658]: amdgpu-kernel ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:76:5\n+  --> $DIR/feature-gate-abi.rs:81:5\n    |\n LL |     extern \"amdgpu-kernel\" fn im9() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/51575\n    = help: add `#![feature(abi_amdgpu_kernel)]` to the crate attributes to enable\n \n+error[E0658]: efiapi ABI is experimental and subject to change\n+  --> $DIR/feature-gate-abi.rs:82:5\n+   |\n+LL |     extern \"efiapi\" fn im10() {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/65815\n+   = help: add `#![feature(abi_efiapi)]` to the crate attributes to enable\n+\n error[E0658]: intrinsics are subject to change\n-  --> $DIR/feature-gate-abi.rs:80:11\n+  --> $DIR/feature-gate-abi.rs:86:11\n    |\n LL | type A1 = extern \"rust-intrinsic\" fn();\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(intrinsics)]` to the crate attributes to enable\n \n error[E0658]: platform intrinsics are experimental and possibly buggy\n-  --> $DIR/feature-gate-abi.rs:81:11\n+  --> $DIR/feature-gate-abi.rs:87:11\n    |\n LL | type A2 = extern \"platform-intrinsic\" fn();\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -389,15 +434,15 @@ LL | type A2 = extern \"platform-intrinsic\" fn();\n    = help: add `#![feature(platform_intrinsics)]` to the crate attributes to enable\n \n error[E0658]: vectorcall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:82:11\n+  --> $DIR/feature-gate-abi.rs:88:11\n    |\n LL | type A3 = extern \"vectorcall\" fn();\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_vectorcall)]` to the crate attributes to enable\n \n error[E0658]: rust-call ABI is subject to change\n-  --> $DIR/feature-gate-abi.rs:83:11\n+  --> $DIR/feature-gate-abi.rs:89:11\n    |\n LL | type A4 = extern \"rust-call\" fn();\n    |           ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -406,7 +451,7 @@ LL | type A4 = extern \"rust-call\" fn();\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error[E0658]: msp430-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:84:11\n+  --> $DIR/feature-gate-abi.rs:90:11\n    |\n LL | type A5 = extern \"msp430-interrupt\" fn();\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -415,7 +460,7 @@ LL | type A5 = extern \"msp430-interrupt\" fn();\n    = help: add `#![feature(abi_msp430_interrupt)]` to the crate attributes to enable\n \n error[E0658]: PTX ABIs are experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:85:11\n+  --> $DIR/feature-gate-abi.rs:91:11\n    |\n LL | type A6 = extern \"ptx-kernel\" fn ();\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -424,7 +469,7 @@ LL | type A6 = extern \"ptx-kernel\" fn ();\n    = help: add `#![feature(abi_ptx)]` to the crate attributes to enable\n \n error[E0658]: x86-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:86:11\n+  --> $DIR/feature-gate-abi.rs:92:11\n    |\n LL | type A7 = extern \"x86-interrupt\" fn();\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -433,32 +478,41 @@ LL | type A7 = extern \"x86-interrupt\" fn();\n    = help: add `#![feature(abi_x86_interrupt)]` to the crate attributes to enable\n \n error[E0658]: thiscall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:87:11\n+  --> $DIR/feature-gate-abi.rs:93:11\n    |\n LL | type A8 = extern \"thiscall\" fn();\n    |           ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_thiscall)]` to the crate attributes to enable\n \n error[E0658]: amdgpu-kernel ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:88:11\n+  --> $DIR/feature-gate-abi.rs:94:11\n    |\n LL | type A9 = extern \"amdgpu-kernel\" fn();\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/51575\n    = help: add `#![feature(abi_amdgpu_kernel)]` to the crate attributes to enable\n \n+error[E0658]: efiapi ABI is experimental and subject to change\n+  --> $DIR/feature-gate-abi.rs:95:12\n+   |\n+LL | type A10 = extern \"efiapi\" fn();\n+   |            ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/65815\n+   = help: add `#![feature(abi_efiapi)]` to the crate attributes to enable\n+\n error[E0658]: intrinsics are subject to change\n-  --> $DIR/feature-gate-abi.rs:91:1\n+  --> $DIR/feature-gate-abi.rs:98:1\n    |\n LL | extern \"rust-intrinsic\" {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(intrinsics)]` to the crate attributes to enable\n \n error[E0658]: platform intrinsics are experimental and possibly buggy\n-  --> $DIR/feature-gate-abi.rs:92:1\n+  --> $DIR/feature-gate-abi.rs:99:1\n    |\n LL | extern \"platform-intrinsic\" {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -467,15 +521,15 @@ LL | extern \"platform-intrinsic\" {}\n    = help: add `#![feature(platform_intrinsics)]` to the crate attributes to enable\n \n error[E0658]: vectorcall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:93:1\n+  --> $DIR/feature-gate-abi.rs:100:1\n    |\n LL | extern \"vectorcall\" {}\n    | ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_vectorcall)]` to the crate attributes to enable\n \n error[E0658]: rust-call ABI is subject to change\n-  --> $DIR/feature-gate-abi.rs:94:1\n+  --> $DIR/feature-gate-abi.rs:101:1\n    |\n LL | extern \"rust-call\" {}\n    | ^^^^^^^^^^^^^^^^^^^^^\n@@ -484,7 +538,7 @@ LL | extern \"rust-call\" {}\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error[E0658]: msp430-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:95:1\n+  --> $DIR/feature-gate-abi.rs:102:1\n    |\n LL | extern \"msp430-interrupt\" {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -493,7 +547,7 @@ LL | extern \"msp430-interrupt\" {}\n    = help: add `#![feature(abi_msp430_interrupt)]` to the crate attributes to enable\n \n error[E0658]: PTX ABIs are experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:96:1\n+  --> $DIR/feature-gate-abi.rs:103:1\n    |\n LL | extern \"ptx-kernel\" {}\n    | ^^^^^^^^^^^^^^^^^^^^^^\n@@ -502,7 +556,7 @@ LL | extern \"ptx-kernel\" {}\n    = help: add `#![feature(abi_ptx)]` to the crate attributes to enable\n \n error[E0658]: x86-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:97:1\n+  --> $DIR/feature-gate-abi.rs:104:1\n    |\n LL | extern \"x86-interrupt\" {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -511,70 +565,79 @@ LL | extern \"x86-interrupt\" {}\n    = help: add `#![feature(abi_x86_interrupt)]` to the crate attributes to enable\n \n error[E0658]: thiscall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:98:1\n+  --> $DIR/feature-gate-abi.rs:105:1\n    |\n LL | extern \"thiscall\" {}\n    | ^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_thiscall)]` to the crate attributes to enable\n \n error[E0658]: amdgpu-kernel ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:99:1\n+  --> $DIR/feature-gate-abi.rs:106:1\n    |\n LL | extern \"amdgpu-kernel\" {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/51575\n    = help: add `#![feature(abi_amdgpu_kernel)]` to the crate attributes to enable\n \n+error[E0658]: efiapi ABI is experimental and subject to change\n+  --> $DIR/feature-gate-abi.rs:107:1\n+   |\n+LL | extern \"efiapi\" {}\n+   | ^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/65815\n+   = help: add `#![feature(abi_efiapi)]` to the crate attributes to enable\n+\n error: intrinsic must be in `extern \"rust-intrinsic\" { ... }` block\n-  --> $DIR/feature-gate-abi.rs:26:32\n+  --> $DIR/feature-gate-abi.rs:28:32\n    |\n LL |     extern \"rust-intrinsic\" fn m1();\n    |                                ^^\n \n error: intrinsic must be in `extern \"rust-intrinsic\" { ... }` block\n-  --> $DIR/feature-gate-abi.rs:28:36\n+  --> $DIR/feature-gate-abi.rs:30:36\n    |\n LL |     extern \"platform-intrinsic\" fn m2();\n    |                                    ^^\n \n error: intrinsic must be in `extern \"rust-intrinsic\" { ... }` block\n-  --> $DIR/feature-gate-abi.rs:12:33\n+  --> $DIR/feature-gate-abi.rs:13:33\n    |\n LL | extern \"rust-intrinsic\" fn f1() {}\n    |                                 ^^\n \n error: intrinsic must be in `extern \"rust-intrinsic\" { ... }` block\n-  --> $DIR/feature-gate-abi.rs:14:37\n+  --> $DIR/feature-gate-abi.rs:15:37\n    |\n LL | extern \"platform-intrinsic\" fn f2() {}\n    |                                     ^^\n \n error: intrinsic must be in `extern \"rust-intrinsic\" { ... }` block\n-  --> $DIR/feature-gate-abi.rs:51:37\n+  --> $DIR/feature-gate-abi.rs:55:37\n    |\n LL |     extern \"rust-intrinsic\" fn m1() {}\n    |                                     ^^\n \n error: intrinsic must be in `extern \"rust-intrinsic\" { ... }` block\n-  --> $DIR/feature-gate-abi.rs:53:41\n+  --> $DIR/feature-gate-abi.rs:57:41\n    |\n LL |     extern \"platform-intrinsic\" fn m2() {}\n    |                                         ^^\n \n error: intrinsic must be in `extern \"rust-intrinsic\" { ... }` block\n-  --> $DIR/feature-gate-abi.rs:66:38\n+  --> $DIR/feature-gate-abi.rs:71:38\n    |\n LL |     extern \"rust-intrinsic\" fn im1() {}\n    |                                      ^^\n \n error: intrinsic must be in `extern \"rust-intrinsic\" { ... }` block\n-  --> $DIR/feature-gate-abi.rs:68:42\n+  --> $DIR/feature-gate-abi.rs:73:42\n    |\n LL |     extern \"platform-intrinsic\" fn im2() {}\n    |                                          ^^\n \n-error: aborting due to 69 previous errors\n+error: aborting due to 76 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "b20226f87e8f8e1f761b823b2a73d7506b3e6793", "filename": "src/test/ui/parser/issue-8537.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46063ed23fbcd50a7723ee6008e6d63605789e24/src%2Ftest%2Fui%2Fparser%2Fissue-8537.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46063ed23fbcd50a7723ee6008e6d63605789e24/src%2Ftest%2Fui%2Fparser%2Fissue-8537.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-8537.stderr?ref=46063ed23fbcd50a7723ee6008e6d63605789e24", "patch": "@@ -4,7 +4,7 @@ error[E0703]: invalid ABI: found `invalid-ab_isize`\n LL |   \"invalid-ab_isize\"\n    |   ^^^^^^^^^^^^^^^^^^ invalid ABI\n    |\n-   = help: valid ABIs: cdecl, stdcall, fastcall, vectorcall, thiscall, aapcs, win64, sysv64, ptx-kernel, msp430-interrupt, x86-interrupt, amdgpu-kernel, Rust, C, system, rust-intrinsic, rust-call, platform-intrinsic, unadjusted\n+   = help: valid ABIs: cdecl, stdcall, fastcall, vectorcall, thiscall, aapcs, win64, sysv64, ptx-kernel, msp430-interrupt, x86-interrupt, amdgpu-kernel, efiapi, Rust, C, system, rust-intrinsic, rust-call, platform-intrinsic, unadjusted\n \n error: aborting due to previous error\n "}, {"sha": "52e777285eb30caa25cddee7db2687a3a84920e3", "filename": "src/test/ui/symbol-names/basic.legacy.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/46063ed23fbcd50a7723ee6008e6d63605789e24/src%2Ftest%2Fui%2Fsymbol-names%2Fbasic.legacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46063ed23fbcd50a7723ee6008e6d63605789e24/src%2Ftest%2Fui%2Fsymbol-names%2Fbasic.legacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fbasic.legacy.stderr?ref=46063ed23fbcd50a7723ee6008e6d63605789e24", "patch": "@@ -1,10 +1,10 @@\n-error: symbol-name(_ZN5basic4main17hd72940ef9669d526E)\n+error: symbol-name(_ZN5basic4main17h81759b0695851718E)\n   --> $DIR/basic.rs:7:1\n    |\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(basic::main::hd72940ef9669d526)\n+error: demangling(basic::main::h81759b0695851718)\n   --> $DIR/basic.rs:7:1\n    |\n LL | #[rustc_symbol_name]"}, {"sha": "b27df10e7503b6ae1bfc11e4c314bb3c466273cd", "filename": "src/test/ui/symbol-names/impl1.legacy.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/46063ed23fbcd50a7723ee6008e6d63605789e24/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.legacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46063ed23fbcd50a7723ee6008e6d63605789e24/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.legacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.legacy.stderr?ref=46063ed23fbcd50a7723ee6008e6d63605789e24", "patch": "@@ -1,10 +1,10 @@\n-error: symbol-name(_ZN5impl13foo3Foo3bar17he53b9bee7600ed8dE)\n+error: symbol-name(_ZN5impl13foo3Foo3bar17h92cf46db76791039E)\n   --> $DIR/impl1.rs:13:9\n    |\n LL |         #[rustc_symbol_name]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(impl1::foo::Foo::bar::he53b9bee7600ed8d)\n+error: demangling(impl1::foo::Foo::bar::h92cf46db76791039)\n   --> $DIR/impl1.rs:13:9\n    |\n LL |         #[rustc_symbol_name]\n@@ -22,13 +22,13 @@ error: def-path(foo::Foo::bar)\n LL |         #[rustc_def_path]\n    |         ^^^^^^^^^^^^^^^^^\n \n-error: symbol-name(_ZN5impl13bar33_$LT$impl$u20$impl1..foo..Foo$GT$3baz17h86c41f0462d901d4E)\n+error: symbol-name(_ZN5impl13bar33_$LT$impl$u20$impl1..foo..Foo$GT$3baz17h90c4a800b1aa0df0E)\n   --> $DIR/impl1.rs:31:9\n    |\n LL |         #[rustc_symbol_name]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(impl1::bar::<impl impl1::foo::Foo>::baz::h86c41f0462d901d4)\n+error: demangling(impl1::bar::<impl impl1::foo::Foo>::baz::h90c4a800b1aa0df0)\n   --> $DIR/impl1.rs:31:9\n    |\n LL |         #[rustc_symbol_name]\n@@ -46,13 +46,13 @@ error: def-path(bar::<impl foo::Foo>::baz)\n LL |         #[rustc_def_path]\n    |         ^^^^^^^^^^^^^^^^^\n \n-error: symbol-name(_ZN209_$LT$$u5b$$RF$dyn$u20$impl1..Foo$u2b$Assoc$u20$$u3d$$u20$extern$u20$$u22$C$u22$$u20$fn$LP$$RF$u8$C$$u20$...$RP$$u2b$impl1..AutoTrait$u3b$$u20$_$u5d$$u20$as$u20$impl1..main..$u7b$$u7b$closure$u7d$$u7d$..Bar$GT$6method17h636bc933fc62ee2fE)\n+error: symbol-name(_ZN209_$LT$$u5b$$RF$dyn$u20$impl1..Foo$u2b$Assoc$u20$$u3d$$u20$extern$u20$$u22$C$u22$$u20$fn$LP$$RF$u8$C$$u20$...$RP$$u2b$impl1..AutoTrait$u3b$$u20$_$u5d$$u20$as$u20$impl1..main..$u7b$$u7b$closure$u7d$$u7d$..Bar$GT$6method17h61b0fcb05ebeeb79E)\n   --> $DIR/impl1.rs:61:13\n    |\n LL |             #[rustc_symbol_name]\n    |             ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(<[&dyn impl1::Foo+Assoc = extern \"C\" fn(&u8, ::.)+impl1::AutoTrait; _] as impl1::main::{{closure}}::Bar>::method::h636bc933fc62ee2f)\n+error: demangling(<[&dyn impl1::Foo+Assoc = extern \"C\" fn(&u8, ::.)+impl1::AutoTrait; _] as impl1::main::{{closure}}::Bar>::method::h61b0fcb05ebeeb79)\n   --> $DIR/impl1.rs:61:13\n    |\n LL |             #[rustc_symbol_name]"}, {"sha": "19d9740fb16bef46f6ec13c9d6c5c84f2d2efb8a", "filename": "src/test/ui/symbol-names/issue-60925.legacy.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/46063ed23fbcd50a7723ee6008e6d63605789e24/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-60925.legacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46063ed23fbcd50a7723ee6008e6d63605789e24/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-60925.legacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-60925.legacy.stderr?ref=46063ed23fbcd50a7723ee6008e6d63605789e24", "patch": "@@ -1,10 +1,10 @@\n-error: symbol-name(_ZN11issue_609253foo37Foo$LT$issue_60925..llv$u6d$..Foo$GT$3foo17h059a991a004536adE)\n+error: symbol-name(_ZN11issue_609253foo37Foo$LT$issue_60925..llv$u6d$..Foo$GT$3foo17hc86312d25b60f6eeE)\n   --> $DIR/issue-60925.rs:21:9\n    |\n LL |         #[rustc_symbol_name]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(issue_60925::foo::Foo<issue_60925::llvm::Foo>::foo::h059a991a004536ad)\n+error: demangling(issue_60925::foo::Foo<issue_60925::llvm::Foo>::foo::hc86312d25b60f6ee)\n   --> $DIR/issue-60925.rs:21:9\n    |\n LL |         #[rustc_symbol_name]"}]}