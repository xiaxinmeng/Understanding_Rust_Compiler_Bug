{"sha": "2cb129355b93b8f5d932120a2f002fb59d1344fd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjYjEyOTM1NWI5M2I4ZjVkOTMyMTIwYTJmMDAyZmI1OWQxMzQ0ZmQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-07-06T00:01:23Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-07-06T00:25:18Z"}, "message": "Change ast::meta_name_value to accept any literal, not just string\n\nThis isn't useful for much of anything yet, since metadata::encoder doesn't\nknow how to handle the non-string variants.\n\nIssue #611", "tree": {"sha": "350360e3634b1fa47d1f9aa4d7e6da9f759baa56", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/350360e3634b1fa47d1f9aa4d7e6da9f759baa56"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2cb129355b93b8f5d932120a2f002fb59d1344fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2cb129355b93b8f5d932120a2f002fb59d1344fd", "html_url": "https://github.com/rust-lang/rust/commit/2cb129355b93b8f5d932120a2f002fb59d1344fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2cb129355b93b8f5d932120a2f002fb59d1344fd/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8261d2e6fb32dd4e811d33b3ef40abde8e67ae3d", "url": "https://api.github.com/repos/rust-lang/rust/commits/8261d2e6fb32dd4e811d33b3ef40abde8e67ae3d", "html_url": "https://github.com/rust-lang/rust/commit/8261d2e6fb32dd4e811d33b3ef40abde8e67ae3d"}], "stats": {"total": 145, "additions": 94, "deletions": 51}, "files": [{"sha": "5c9c10ec3bfd5f1b92131d310a5e5aeacea20042", "filename": "src/comp/back/link.rs", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/2cb129355b93b8f5d932120a2f002fb59d1344fd/src%2Fcomp%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cb129355b93b8f5d932120a2f002fb59d1344fd/src%2Fcomp%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Flink.rs?ref=2cb129355b93b8f5d932120a2f002fb59d1344fd", "patch": "@@ -14,6 +14,7 @@ import std::sha1::sha1;\n import std::sort;\n import trans::crate_ctxt;\n import syntax::ast;\n+import syntax::print::pprust;\n import lib::llvm::llvm::ModuleRef;\n import lib::llvm::llvm::ValueRef;\n import lib::llvm::mk_pass_manager;\n@@ -294,16 +295,18 @@ fn build_link_meta(&session::session sess, &ast::crate c,\n         auto linkage_metas = attr::find_linkage_metas(c.node.attrs);\n         attr::require_unique_names(sess, linkage_metas);\n         for (@ast::meta_item meta in linkage_metas) {\n-            alt (meta.node) {\n-                case (ast::meta_name_value(\"name\", ?v)) {\n-                    name = some(v);\n+            if (attr::get_meta_item_name(meta) == \"name\") {\n+                alt (attr::get_meta_item_value_str(meta)) {\n+                    case (some(?v)) { name = some(v); }\n+                    case (none) { cmh_items += [meta]; }\n                 }\n-                case (ast::meta_name_value(\"vers\", ?v)) {\n-                    vers = some(v);\n-                }\n-                case (_) {\n-                    cmh_items += [meta];\n+            } else if (attr::get_meta_item_name(meta) == \"vers\") {\n+                alt (attr::get_meta_item_value_str(meta)) {\n+                    case (some(?v)) { vers = some(v); }\n+                    case (none) { cmh_items += [meta]; }\n                 }\n+            } else {\n+                cmh_items += [meta];\n             }\n         }\n         ret rec(name = name,\n@@ -317,6 +320,10 @@ fn build_link_meta(&session::session sess, &ast::crate c,\n         fn len_and_str(&str s) -> str {\n             ret #fmt(\"%u_%s\", str::byte_len(s), s);\n         }\n+\n+        fn len_and_str_lit(&ast::lit l) -> str {\n+            ret len_and_str(pprust::lit_to_str(@l));\n+        }\n     \n         auto cmh_items = attr::sort_meta_items(metas.cmh_items);\n \n@@ -326,7 +333,7 @@ fn build_link_meta(&session::session sess, &ast::crate c,\n             alt (m.node) {\n                 case (ast::meta_name_value(?key, ?value)) {\n                     sha.input_str(len_and_str(key));\n-                    sha.input_str(len_and_str(value));\n+                    sha.input_str(len_and_str_lit(value));\n                 }\n                 case (ast::meta_word(?name)) {\n                     sha.input_str(len_and_str(name));"}, {"sha": "5f410678fdf4993c61115febed487e818b8d88e4", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2cb129355b93b8f5d932120a2f002fb59d1344fd/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cb129355b93b8f5d932120a2f002fb59d1344fd/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=2cb129355b93b8f5d932120a2f002fb59d1344fd", "patch": "@@ -48,7 +48,7 @@ fn default_configuration(session::session sess, str argv0, str input) ->\n             case (_) { \"libc.so\" }\n         };\n \n-    auto mk = attr::mk_name_value_item;\n+    auto mk = attr::mk_name_value_item_str;\n \n     ret [ // Target bindings.\n          mk(\"target_os\", std::os::target_os()),"}, {"sha": "37bcd0bb8b821223c5cc41cd6557bd6c90317f6f", "filename": "src/comp/front/attr.rs", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/2cb129355b93b8f5d932120a2f002fb59d1344fd/src%2Fcomp%2Ffront%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cb129355b93b8f5d932120a2f002fb59d1344fd/src%2Fcomp%2Ffront%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fattr.rs?ref=2cb129355b93b8f5d932120a2f002fb59d1344fd", "patch": "@@ -8,6 +8,7 @@ import syntax::ast;\n import util::common;\n import driver::session;\n \n+export attr_meta;\n export attr_metas;\n export find_linkage_metas;\n export find_attrs_by_name;\n@@ -17,6 +18,9 @@ export sort_meta_items;\n export remove_meta_items_by_name;\n export require_unique_names;\n export get_attr_name;\n+export get_meta_item_name;\n+export get_meta_item_value_str;\n+export mk_name_value_item_str;\n export mk_name_value_item;\n export mk_list_item;\n export mk_word_item;\n@@ -78,9 +82,25 @@ fn get_meta_item_name(&@ast::meta_item meta) -> ast::ident {\n     }\n }\n \n+// Gets the string value if the meta_item is a meta_name_value variant\n+// containing a string, otherwise none\n+fn get_meta_item_value_str(&@ast::meta_item meta) -> option::t[str] {\n+    alt (meta.node) {\n+        case (ast::meta_name_value(_, ?v)) {\n+            alt (v.node) {\n+                case (ast::lit_str(?s, _)) {\n+                    option::some(s)\n+                }\n+                case (_) { option::none }\n+            }\n+        }\n+        case (_) { option::none }\n+    }\n+}\n+\n fn attr_meta(&ast::attribute attr) -> @ast::meta_item { @attr.node.value }\n \n-// Get the meta_items from inside an attribute\n+// Get the meta_items from inside a vector of attributes\n fn attr_metas(&vec[ast::attribute] attrs) -> vec[@ast::meta_item] {\n     ret vec::map(attr_meta, attrs);\n }\n@@ -95,7 +115,9 @@ fn eq(@ast::meta_item a, @ast::meta_item b) -> bool {\n         }\n         case (ast::meta_name_value(?na, ?va)) {\n             alt (b.node) {\n-                case (ast::meta_name_value(?nb, ?vb)) { na == nb && va == vb }\n+                case (ast::meta_name_value(?nb, ?vb)) {\n+                    na == nb && va.node == vb.node\n+                }\n                 case (_) { false }\n             }\n         }\n@@ -188,7 +210,12 @@ fn span[T](&T item) -> ast::spanned[T] {\n     ret rec(node=item, span=rec(lo=0u, hi=0u));\n }\n \n-fn mk_name_value_item(ast::ident name, str value) -> @ast::meta_item {\n+fn mk_name_value_item_str(ast::ident name, str value) -> @ast::meta_item {\n+    auto value_lit = span(ast::lit_str(value, ast::sk_rc));\n+    ret mk_name_value_item(name, value_lit);\n+}\n+\n+fn mk_name_value_item(ast::ident name, ast::lit value) -> @ast::meta_item {\n     ret @span(ast::meta_name_value(name, value));\n }\n "}, {"sha": "f2f9a358713b27c3c1398caae4b9e71f51d20dcc", "filename": "src/comp/metadata/creader.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2cb129355b93b8f5d932120a2f002fb59d1344fd/src%2Fcomp%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cb129355b93b8f5d932120a2f002fb59d1344fd/src%2Fcomp%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fcreader.rs?ref=2cb129355b93b8f5d932120a2f002fb59d1344fd", "patch": "@@ -64,8 +64,8 @@ fn find_library_crate(&session::session sess, &ast::ident ident,\n         auto name_items = attr::find_meta_items_by_name(metas, \"name\");\n         alt (vec::last(name_items)) {\n             case (some(?i)) {\n-                alt (i.node) {\n-                    case (ast::meta_name_value(_, ?v)) { v }\n+                alt (attr::get_meta_item_value_str(i)) {\n+                    case (some(?n)) { n }\n                     case (_) {\n                         // FIXME: Probably want a warning here since the user\n                         // is using the wrong type of meta item\n@@ -180,17 +180,13 @@ fn visit_item(env e, &@ast::item i) {\n             if (!e.sess.add_used_library(m.native_name)) {\n                 ret;\n             }\n-            for (ast::attribute a in i.attrs) {\n-                auto v = a.node.value.node;\n-                alt (v) {\n-                    case (ast::meta_name_value(?i, ?s)) {\n-                        if (i != \"link_args\") {\n-                            cont;\n-                        }\n-                        e.sess.add_used_link_args(s);\n-                    }\n-                    case (_) {\n+            for (ast::attribute a in\n+                     attr::find_attrs_by_name(i.attrs, \"link_args\")) {\n+                alt (attr::get_meta_item_value_str(attr::attr_meta(a))) {\n+                    case (some(?linkarg)) {\n+                        e.sess.add_used_link_args(linkarg);\n                     }\n+                    case (none) { /* fallthrough */ }\n                 }\n             }\n         }"}, {"sha": "7bcb9e48bf8633e6733d21c6c4effb6eb2a59857", "filename": "src/comp/metadata/decoder.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2cb129355b93b8f5d932120a2f002fb59d1344fd/src%2Fcomp%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cb129355b93b8f5d932120a2f002fb59d1344fd/src%2Fcomp%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fdecoder.rs?ref=2cb129355b93b8f5d932120a2f002fb59d1344fd", "patch": "@@ -276,7 +276,9 @@ fn get_meta_items(&ebml::doc md) -> vec[@ast::meta_item] {\n         auto vd = ebml::get_doc(meta_item_doc, tag_meta_item_value);\n         auto n = str::unsafe_from_bytes(ebml::doc_data(nd));\n         auto v = str::unsafe_from_bytes(ebml::doc_data(vd));\n-        items += [attr::mk_name_value_item(n, v)];\n+        // FIXME (#611): Should be able to decode meta_name_value variants,\n+        // but currently they can't be encoded\n+        items += [attr::mk_name_value_item_str(n, v)];\n     }\n     for each (ebml::doc meta_item_doc in\n               ebml::tagged_docs(md, tag_meta_item_list)) {"}, {"sha": "cc3d44399c8b9e2d207478082c8249a7dd1195d4", "filename": "src/comp/metadata/encoder.rs", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/2cb129355b93b8f5d932120a2f002fb59d1344fd/src%2Fcomp%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cb129355b93b8f5d932120a2f002fb59d1344fd/src%2Fcomp%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fencoder.rs?ref=2cb129355b93b8f5d932120a2f002fb59d1344fd", "patch": "@@ -429,14 +429,19 @@ fn encode_meta_item(&ebml::writer ebml_w, &meta_item mi) {\n             ebml::end_tag(ebml_w);\n         }\n         case (meta_name_value(?name, ?value)) {\n-            ebml::start_tag(ebml_w, tag_meta_item_name_value);\n-            ebml::start_tag(ebml_w, tag_meta_item_name);\n-            ebml_w.writer.write(str::bytes(name));\n-            ebml::end_tag(ebml_w);\n-            ebml::start_tag(ebml_w, tag_meta_item_value);\n-            ebml_w.writer.write(str::bytes(value));\n-            ebml::end_tag(ebml_w);\n-            ebml::end_tag(ebml_w);\n+            alt (value.node) {\n+                case (lit_str(?value, _)) {\n+                    ebml::start_tag(ebml_w, tag_meta_item_name_value);\n+                    ebml::start_tag(ebml_w, tag_meta_item_name);\n+                    ebml_w.writer.write(str::bytes(name));\n+                    ebml::end_tag(ebml_w);\n+                    ebml::start_tag(ebml_w, tag_meta_item_value);\n+                    ebml_w.writer.write(str::bytes(value));\n+                    ebml::end_tag(ebml_w);\n+                    ebml::end_tag(ebml_w);\n+                }\n+                case (_) { /* FIXME (#611) */ }\n+            }\n         }\n         case (meta_list(?name, ?items)) {\n             ebml::start_tag(ebml_w, tag_meta_item_list);\n@@ -475,10 +480,10 @@ fn synthesize_crate_attrs(&@crate_ctxt cx,\n         assert cx.link_meta.name != \"\";\n         assert cx.link_meta.vers != \"\";\n \n-        auto name_item = attr::mk_name_value_item(\"name\",\n-                                                  cx.link_meta.name);\n-        auto vers_item = attr::mk_name_value_item(\"vers\",\n-                                                  cx.link_meta.vers);\n+        auto name_item = attr::mk_name_value_item_str(\"name\",\n+                                                      cx.link_meta.name);\n+        auto vers_item = attr::mk_name_value_item_str(\"vers\",\n+                                                      cx.link_meta.vers);\n \n         auto other_items = {\n             auto tmp = attr::remove_meta_items_by_name(items, \"name\");"}, {"sha": "5f8e301d6e2018676e11280ac2e7f0ef80439d3f", "filename": "src/comp/syntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2cb129355b93b8f5d932120a2f002fb59d1344fd/src%2Fcomp%2Fsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cb129355b93b8f5d932120a2f002fb59d1344fd/src%2Fcomp%2Fsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast.rs?ref=2cb129355b93b8f5d932120a2f002fb59d1344fd", "patch": "@@ -104,7 +104,7 @@ type meta_item = spanned[meta_item_];\n tag meta_item_ {\n     meta_word(ident);\n     meta_list(ident, vec[@meta_item]);\n-    meta_name_value(ident, str);\n+    meta_name_value(ident, lit);\n }\n \n type block = spanned[block_];"}, {"sha": "b671e9eaa69beb8fe37f0a32b6f393a59eb8ec43", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2cb129355b93b8f5d932120a2f002fb59d1344fd/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cb129355b93b8f5d932120a2f002fb59d1344fd/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=2cb129355b93b8f5d932120a2f002fb59d1344fd", "patch": "@@ -2172,17 +2172,9 @@ fn parse_meta_item(&parser p) -> @ast::meta_item {\n     alt (p.peek()) {\n         case (token::EQ) {\n             p.bump();\n-            alt (p.peek()) {\n-                case (token::LIT_STR(?s)) {\n-                    p.bump();\n-                    auto value = p.get_str(s);\n-                    auto hi = p.get_hi_pos();\n-                    ret @spanned(lo, hi, ast::meta_name_value(ident, value));\n-                }\n-                case (_) {\n-                    p.fatal(\"Metadata items must be string literals\");\n-                }\n-            }\n+            auto lit = parse_lit(p);\n+            auto hi = p.get_hi_pos();\n+            ret @spanned(lo, hi, ast::meta_name_value(ident, lit));\n         }\n         case (token::LPAREN) {\n             auto inner_items = parse_meta_seq(p);"}, {"sha": "b5f83c2009c7a377c401fd617b8845eb12660d95", "filename": "src/comp/syntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2cb129355b93b8f5d932120a2f002fb59d1344fd/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cb129355b93b8f5d932120a2f002fb59d1344fd/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs?ref=2cb129355b93b8f5d932120a2f002fb59d1344fd", "patch": "@@ -1103,7 +1103,7 @@ fn print_meta_item(&ps s, &@ast::meta_item item) {\n         case (ast::meta_name_value(?name, ?value)) {\n             word_space(s, name);\n             word_space(s, \"=\");\n-            print_string(s, value);\n+            print_literal(s, @value);\n         }\n         case (ast::meta_list(?name, ?items)) {\n             word(s.s, name);"}, {"sha": "be43623d8a8311e41aa53398b0a4fe81ed781738", "filename": "src/test/run-pass/item-attributes.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2cb129355b93b8f5d932120a2f002fb59d1344fd/src%2Ftest%2Frun-pass%2Fitem-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cb129355b93b8f5d932120a2f002fb59d1344fd/src%2Ftest%2Frun-pass%2Fitem-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fitem-attributes.rs?ref=2cb129355b93b8f5d932120a2f002fb59d1344fd", "patch": "@@ -204,6 +204,20 @@ mod test_native_items {\n     }\n }\n \n+mod test_literals {\n+    #[str = \"s\"];\n+    #[char = 'c'];\n+    #[int = 100];\n+    #[uint = 100u];\n+    #[mach_int = 100u32];\n+    #[float = 1.0];\n+    #[mach_float = 1.0f32];\n+    // FIXME (#622): Can't parse a nil literal here\n+    //#[nil = ()];\n+    #[bool = true];\n+    mod m {}\n+}\n+\n fn main() {\n }\n "}]}