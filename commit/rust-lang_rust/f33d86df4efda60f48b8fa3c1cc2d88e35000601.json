{"sha": "f33d86df4efda60f48b8fa3c1cc2d88e35000601", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzM2Q4NmRmNGVmZGE2MGY0OGI4ZmEzYzFjYzJkODhlMzUwMDA2MDE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-26T21:25:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-26T21:25:19Z"}, "message": "Auto merge of #7137 - camsteffen:msrv-mod, r=llogiq\n\nRefactor MSRV aliases\n\nchangelog: Remove MSRV from `needless_question_mark` and change MSRV for `missing_const_for_fn` from 1.37.0 to 1.46.0.\n\nFirst [mentioned on Zulip](https://rust-lang.zulipchat.com/#narrow/stream/257328-clippy/topic/Better.20MSRV.20testing.20idea/near/236215074).\n\n* Moves MSRV constants into `clippy_utils::msrvs`. Now they are named to represent a stabilized feature flag or library item that is required for a lint's suggestion.\n* `needless_question_mark` no longer has MSRV. Not needed since it does not suggest adding `?`.\n* `missing_const_for_fn` MSRV was changed from 1.37.0 to 1.46.0. This seems to be a past mistake.", "tree": {"sha": "26836a970f38c25cc6a0b422730abd6881aa4610", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26836a970f38c25cc6a0b422730abd6881aa4610"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f33d86df4efda60f48b8fa3c1cc2d88e35000601", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f33d86df4efda60f48b8fa3c1cc2d88e35000601", "html_url": "https://github.com/rust-lang/rust/commit/f33d86df4efda60f48b8fa3c1cc2d88e35000601", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f33d86df4efda60f48b8fa3c1cc2d88e35000601/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a362a4d1d0edb66aef186c1d27b28c60573078f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/a362a4d1d0edb66aef186c1d27b28c60573078f4", "html_url": "https://github.com/rust-lang/rust/commit/a362a4d1d0edb66aef186c1d27b28c60573078f4"}, {"sha": "3a8e759d8a6250b77c37fd43a13aab34b82bbfbb", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a8e759d8a6250b77c37fd43a13aab34b82bbfbb", "html_url": "https://github.com/rust-lang/rust/commit/3a8e759d8a6250b77c37fd43a13aab34b82bbfbb"}], "stats": {"total": 401, "additions": 108, "deletions": 293}, "files": [{"sha": "3132d3a5cf0976d7dece539347c09c9f61832871", "filename": "clippy_lints/src/casts/ptr_as_ptr.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f33d86df4efda60f48b8fa3c1cc2d88e35000601/clippy_lints%2Fsrc%2Fcasts%2Fptr_as_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f33d86df4efda60f48b8fa3c1cc2d88e35000601/clippy_lints%2Fsrc%2Fcasts%2Fptr_as_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fptr_as_ptr.rs?ref=f33d86df4efda60f48b8fa3c1cc2d88e35000601", "patch": "@@ -1,8 +1,8 @@\n use std::borrow::Cow;\n \n use clippy_utils::diagnostics::span_lint_and_sugg;\n-use clippy_utils::meets_msrv;\n use clippy_utils::sugg::Sugg;\n+use clippy_utils::{meets_msrv, msrvs};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{Expr, ExprKind, Mutability, TyKind};\n@@ -12,10 +12,8 @@ use rustc_semver::RustcVersion;\n \n use super::PTR_AS_PTR;\n \n-const PTR_AS_PTR_MSRV: RustcVersion = RustcVersion::new(1, 38, 0);\n-\n pub(super) fn check(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, msrv: &Option<RustcVersion>) {\n-    if !meets_msrv(msrv.as_ref(), &PTR_AS_PTR_MSRV) {\n+    if !meets_msrv(msrv.as_ref(), &msrvs::POINTER_CAST) {\n         return;\n     }\n "}, {"sha": "8d3123e1ec8eefa00ee7e5a4b4ba65fd82314066", "filename": "clippy_lints/src/checked_conversions.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f33d86df4efda60f48b8fa3c1cc2d88e35000601/clippy_lints%2Fsrc%2Fchecked_conversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f33d86df4efda60f48b8fa3c1cc2d88e35000601/clippy_lints%2Fsrc%2Fchecked_conversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fchecked_conversions.rs?ref=f33d86df4efda60f48b8fa3c1cc2d88e35000601", "patch": "@@ -2,7 +2,7 @@\n \n use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::source::snippet_with_applicability;\n-use clippy_utils::{meets_msrv, SpanlessEq};\n+use clippy_utils::{meets_msrv, msrvs, SpanlessEq};\n use if_chain::if_chain;\n use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;\n@@ -12,8 +12,6 @@ use rustc_middle::lint::in_external_macro;\n use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n \n-const CHECKED_CONVERSIONS_MSRV: RustcVersion = RustcVersion::new(1, 34, 0);\n-\n declare_clippy_lint! {\n     /// **What it does:** Checks for explicit bounds checking when casting.\n     ///\n@@ -58,7 +56,7 @@ impl_lint_pass!(CheckedConversions => [CHECKED_CONVERSIONS]);\n \n impl<'tcx> LateLintPass<'tcx> for CheckedConversions {\n     fn check_expr(&mut self, cx: &LateContext<'_>, item: &Expr<'_>) {\n-        if !meets_msrv(self.msrv.as_ref(), &CHECKED_CONVERSIONS_MSRV) {\n+        if !meets_msrv(self.msrv.as_ref(), &msrvs::TRY_FROM) {\n             return;\n         }\n "}, {"sha": "3560672a7481208b238a5cc8d96925f6ae267515", "filename": "clippy_lints/src/from_over_into.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f33d86df4efda60f48b8fa3c1cc2d88e35000601/clippy_lints%2Fsrc%2Ffrom_over_into.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f33d86df4efda60f48b8fa3c1cc2d88e35000601/clippy_lints%2Fsrc%2Ffrom_over_into.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffrom_over_into.rs?ref=f33d86df4efda60f48b8fa3c1cc2d88e35000601", "patch": "@@ -1,14 +1,12 @@\n use clippy_utils::diagnostics::span_lint_and_help;\n use clippy_utils::paths::INTO;\n-use clippy_utils::{match_def_path, meets_msrv};\n+use clippy_utils::{match_def_path, meets_msrv, msrvs};\n use if_chain::if_chain;\n use rustc_hir as hir;\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n \n-const FROM_OVER_INTO_MSRV: RustcVersion = RustcVersion::new(1, 41, 0);\n-\n declare_clippy_lint! {\n     /// **What it does:** Searches for implementations of the `Into<..>` trait and suggests to implement `From<..>` instead.\n     ///\n@@ -57,7 +55,7 @@ impl_lint_pass!(FromOverInto => [FROM_OVER_INTO]);\n \n impl LateLintPass<'_> for FromOverInto {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::Item<'_>) {\n-        if !meets_msrv(self.msrv.as_ref(), &FROM_OVER_INTO_MSRV) {\n+        if !meets_msrv(self.msrv.as_ref(), &msrvs::RE_REBALANCING_COHERENCE) {\n             return;\n         }\n "}, {"sha": "eadcd0867a8809c841f167dfcf7c397bf1d3d6e4", "filename": "clippy_lints/src/if_then_some_else_none.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f33d86df4efda60f48b8fa3c1cc2d88e35000601/clippy_lints%2Fsrc%2Fif_then_some_else_none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f33d86df4efda60f48b8fa3c1cc2d88e35000601/clippy_lints%2Fsrc%2Fif_then_some_else_none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fif_then_some_else_none.rs?ref=f33d86df4efda60f48b8fa3c1cc2d88e35000601", "patch": "@@ -1,6 +1,6 @@\n use clippy_utils::diagnostics::span_lint_and_help;\n use clippy_utils::source::snippet_with_macro_callsite;\n-use clippy_utils::{is_else_clause, is_lang_ctor, meets_msrv};\n+use clippy_utils::{is_else_clause, is_lang_ctor, meets_msrv, msrvs};\n use if_chain::if_chain;\n use rustc_hir::LangItem::{OptionNone, OptionSome};\n use rustc_hir::{Expr, ExprKind};\n@@ -9,8 +9,6 @@ use rustc_middle::lint::in_external_macro;\n use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n \n-const IF_THEN_SOME_ELSE_NONE_MSRV: RustcVersion = RustcVersion::new(1, 50, 0);\n-\n declare_clippy_lint! {\n     /// **What it does:** Checks for if-else that could be written to `bool::then`.\n     ///\n@@ -59,7 +57,7 @@ impl_lint_pass!(IfThenSomeElseNone => [IF_THEN_SOME_ELSE_NONE]);\n \n impl LateLintPass<'_> for IfThenSomeElseNone {\n     fn check_expr(&mut self, cx: &LateContext<'_>, expr: &'tcx Expr<'_>) {\n-        if !meets_msrv(self.msrv.as_ref(), &IF_THEN_SOME_ELSE_NONE_MSRV) {\n+        if !meets_msrv(self.msrv.as_ref(), &msrvs::BOOL_THEN) {\n             return;\n         }\n "}, {"sha": "c84890299df09aaf38bf2237244b0f211c3154eb", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f33d86df4efda60f48b8fa3c1cc2d88e35000601/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f33d86df4efda60f48b8fa3c1cc2d88e35000601/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=f33d86df4efda60f48b8fa3c1cc2d88e35000601", "patch": "@@ -1076,7 +1076,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(move || box from_over_into::FromOverInto::new(msrv));\n     store.register_late_pass(move || box use_self::UseSelf::new(msrv));\n     store.register_late_pass(move || box missing_const_for_fn::MissingConstForFn::new(msrv));\n-    store.register_late_pass(move || box needless_question_mark::NeedlessQuestionMark::new(msrv));\n+    store.register_late_pass(move || box needless_question_mark::NeedlessQuestionMark);\n     store.register_late_pass(move || box casts::Casts::new(msrv));\n     store.register_early_pass(move || box unnested_or_patterns::UnnestedOrPatterns::new(msrv));\n "}, {"sha": "54f714b54b657f6f6e2f25040d2e2e3afd4f1b4d", "filename": "clippy_lints/src/manual_non_exhaustive.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f33d86df4efda60f48b8fa3c1cc2d88e35000601/clippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f33d86df4efda60f48b8fa3c1cc2d88e35000601/clippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs?ref=f33d86df4efda60f48b8fa3c1cc2d88e35000601", "patch": "@@ -1,7 +1,7 @@\n use clippy_utils::attrs::is_doc_hidden;\n use clippy_utils::diagnostics::span_lint_and_then;\n-use clippy_utils::meets_msrv;\n use clippy_utils::source::snippet_opt;\n+use clippy_utils::{meets_msrv, msrvs};\n use if_chain::if_chain;\n use rustc_ast::ast::{FieldDef, Item, ItemKind, Variant, VariantData, VisibilityKind};\n use rustc_errors::Applicability;\n@@ -10,8 +10,6 @@ use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::{sym, Span};\n \n-const MANUAL_NON_EXHAUSTIVE_MSRV: RustcVersion = RustcVersion::new(1, 40, 0);\n-\n declare_clippy_lint! {\n     /// **What it does:** Checks for manual implementations of the non-exhaustive pattern.\n     ///\n@@ -76,7 +74,7 @@ impl_lint_pass!(ManualNonExhaustive => [MANUAL_NON_EXHAUSTIVE]);\n \n impl EarlyLintPass for ManualNonExhaustive {\n     fn check_item(&mut self, cx: &EarlyContext<'_>, item: &Item) {\n-        if !meets_msrv(self.msrv.as_ref(), &MANUAL_NON_EXHAUSTIVE_MSRV) {\n+        if !meets_msrv(self.msrv.as_ref(), &msrvs::NON_EXHAUSTIVE) {\n             return;\n         }\n "}, {"sha": "23428524dee976f8a9994ba50fd4cdbe335023f0", "filename": "clippy_lints/src/manual_strip.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f33d86df4efda60f48b8fa3c1cc2d88e35000601/clippy_lints%2Fsrc%2Fmanual_strip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f33d86df4efda60f48b8fa3c1cc2d88e35000601/clippy_lints%2Fsrc%2Fmanual_strip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_strip.rs?ref=f33d86df4efda60f48b8fa3c1cc2d88e35000601", "patch": "@@ -2,7 +2,7 @@ use crate::consts::{constant, Constant};\n use clippy_utils::diagnostics::{multispan_sugg, span_lint_and_then};\n use clippy_utils::source::snippet;\n use clippy_utils::usage::mutated_variables;\n-use clippy_utils::{eq_expr_value, higher, match_def_path, meets_msrv, paths};\n+use clippy_utils::{eq_expr_value, higher, match_def_path, meets_msrv, msrvs, paths};\n use if_chain::if_chain;\n use rustc_ast::ast::LitKind;\n use rustc_hir::def::Res;\n@@ -17,8 +17,6 @@ use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::source_map::Spanned;\n use rustc_span::Span;\n \n-const MANUAL_STRIP_MSRV: RustcVersion = RustcVersion::new(1, 45, 0);\n-\n declare_clippy_lint! {\n     /// **What it does:**\n     /// Suggests using `strip_{prefix,suffix}` over `str::{starts,ends}_with` and slicing using\n@@ -74,7 +72,7 @@ enum StripKind {\n \n impl<'tcx> LateLintPass<'tcx> for ManualStrip {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n-        if !meets_msrv(self.msrv.as_ref(), &MANUAL_STRIP_MSRV) {\n+        if !meets_msrv(self.msrv.as_ref(), &msrvs::STR_STRIP_PREFIX) {\n             return;\n         }\n "}, {"sha": "13b2a834b0a962ac4db369573dab48ddfc9bda16", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f33d86df4efda60f48b8fa3c1cc2d88e35000601/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f33d86df4efda60f48b8fa3c1cc2d88e35000601/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=f33d86df4efda60f48b8fa3c1cc2d88e35000601", "patch": "@@ -7,8 +7,9 @@ use clippy_utils::sugg::Sugg;\n use clippy_utils::ty::{implements_trait, is_type_diagnostic_item, match_type, peel_mid_ty_refs};\n use clippy_utils::visitors::LocalUsedVisitor;\n use clippy_utils::{\n-    get_parent_expr, in_macro, is_allowed, is_expn_of, is_lang_ctor, is_refutable, is_wild, meets_msrv, path_to_local,\n-    path_to_local_id, peel_hir_pat_refs, peel_n_hir_expr_refs, recurse_or_patterns, remove_blocks, strip_pat_refs,\n+    get_parent_expr, in_macro, is_allowed, is_expn_of, is_lang_ctor, is_refutable, is_wild, meets_msrv, msrvs,\n+    path_to_local, path_to_local_id, peel_hir_pat_refs, peel_n_hir_expr_refs, recurse_or_patterns, remove_blocks,\n+    strip_pat_refs,\n };\n use clippy_utils::{paths, search_same, SpanlessEq, SpanlessHash};\n use if_chain::if_chain;\n@@ -578,8 +579,6 @@ impl_lint_pass!(Matches => [\n     MATCH_SAME_ARMS,\n ]);\n \n-const MATCH_LIKE_MATCHES_MACRO_MSRV: RustcVersion = RustcVersion::new(1, 42, 0);\n-\n impl<'tcx> LateLintPass<'tcx> for Matches {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n         if in_external_macro(cx.sess(), expr.span) || in_macro(expr.span) {\n@@ -588,7 +587,7 @@ impl<'tcx> LateLintPass<'tcx> for Matches {\n \n         redundant_pattern_match::check(cx, expr);\n \n-        if meets_msrv(self.msrv.as_ref(), &MATCH_LIKE_MATCHES_MACRO_MSRV) {\n+        if meets_msrv(self.msrv.as_ref(), &msrvs::MATCHES_MACRO) {\n             if !check_match_like_matches(cx, expr) {\n                 lint_match_arms(cx, expr);\n             }"}, {"sha": "183daee36177489843452fb7ce3350a2a6c742ff", "filename": "clippy_lints/src/mem_replace.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f33d86df4efda60f48b8fa3c1cc2d88e35000601/clippy_lints%2Fsrc%2Fmem_replace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f33d86df4efda60f48b8fa3c1cc2d88e35000601/clippy_lints%2Fsrc%2Fmem_replace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmem_replace.rs?ref=f33d86df4efda60f48b8fa3c1cc2d88e35000601", "patch": "@@ -1,6 +1,6 @@\n use clippy_utils::diagnostics::{span_lint_and_help, span_lint_and_sugg, span_lint_and_then};\n use clippy_utils::source::{snippet, snippet_with_applicability};\n-use clippy_utils::{in_macro, is_diag_trait_item, is_lang_ctor, match_def_path, meets_msrv, paths};\n+use clippy_utils::{in_macro, is_diag_trait_item, is_lang_ctor, match_def_path, meets_msrv, msrvs, paths};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::def_id::DefId;\n@@ -256,8 +256,6 @@ fn check_replace_with_default(cx: &LateContext<'_>, src: &Expr<'_>, dest: &Expr<\n     }\n }\n \n-const MEM_REPLACE_WITH_DEFAULT_MSRV: RustcVersion = RustcVersion::new(1, 40, 0);\n-\n pub struct MemReplace {\n     msrv: Option<RustcVersion>,\n }\n@@ -281,7 +279,7 @@ impl<'tcx> LateLintPass<'tcx> for MemReplace {\n             then {\n                 check_replace_option_with_none(cx, src, dest, expr.span);\n                 check_replace_with_uninit(cx, src, dest, expr.span);\n-                if meets_msrv(self.msrv.as_ref(), &MEM_REPLACE_WITH_DEFAULT_MSRV) {\n+                if meets_msrv(self.msrv.as_ref(), &msrvs::MEM_TAKE) {\n                     check_replace_with_default(cx, src, dest, expr.span);\n                 }\n             }"}, {"sha": "ecec6da3aa0f62e6ad3be7317edb5bca59114f46", "filename": "clippy_lints/src/methods/cloned_instead_of_copied.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f33d86df4efda60f48b8fa3c1cc2d88e35000601/clippy_lints%2Fsrc%2Fmethods%2Fcloned_instead_of_copied.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f33d86df4efda60f48b8fa3c1cc2d88e35000601/clippy_lints%2Fsrc%2Fmethods%2Fcloned_instead_of_copied.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fcloned_instead_of_copied.rs?ref=f33d86df4efda60f48b8fa3c1cc2d88e35000601", "patch": "@@ -1,6 +1,6 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::ty::{get_iterator_item_ty, is_copy};\n-use clippy_utils::{is_trait_method, meets_msrv};\n+use clippy_utils::{is_trait_method, meets_msrv, msrvs};\n use rustc_errors::Applicability;\n use rustc_hir::Expr;\n use rustc_lint::LateContext;\n@@ -10,19 +10,16 @@ use rustc_span::{sym, Span};\n \n use super::CLONED_INSTEAD_OF_COPIED;\n \n-const ITERATOR_COPIED_MSRV: RustcVersion = RustcVersion::new(1, 36, 0);\n-const OPTION_COPIED_MSRV: RustcVersion = RustcVersion::new(1, 35, 0);\n-\n pub fn check(cx: &LateContext<'_>, expr: &Expr<'_>, recv: &Expr<'_>, span: Span, msrv: Option<&RustcVersion>) {\n     let recv_ty = cx.typeck_results().expr_ty_adjusted(recv);\n     let inner_ty = match recv_ty.kind() {\n         // `Option<T>` -> `T`\n         ty::Adt(adt, subst)\n-            if cx.tcx.is_diagnostic_item(sym::option_type, adt.did) && meets_msrv(msrv, &OPTION_COPIED_MSRV) =>\n+            if cx.tcx.is_diagnostic_item(sym::option_type, adt.did) && meets_msrv(msrv, &msrvs::OPTION_COPIED) =>\n         {\n             subst.type_at(0)\n         },\n-        _ if is_trait_method(cx, expr, sym::Iterator) && meets_msrv(msrv, &ITERATOR_COPIED_MSRV) => {\n+        _ if is_trait_method(cx, expr, sym::Iterator) && meets_msrv(msrv, &msrvs::ITERATOR_COPIED) => {\n             match get_iterator_item_ty(cx, recv_ty) {\n                 // <T as Iterator>::Item\n                 Some(ty) => ty,"}, {"sha": "f0d69a1f42e7b911a6c39e34ce4cb1091eeedb95", "filename": "clippy_lints/src/methods/filter_map_next.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f33d86df4efda60f48b8fa3c1cc2d88e35000601/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map_next.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f33d86df4efda60f48b8fa3c1cc2d88e35000601/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map_next.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map_next.rs?ref=f33d86df4efda60f48b8fa3c1cc2d88e35000601", "patch": "@@ -1,6 +1,6 @@\n use clippy_utils::diagnostics::{span_lint, span_lint_and_sugg};\n use clippy_utils::source::snippet;\n-use clippy_utils::{is_trait_method, meets_msrv};\n+use clippy_utils::{is_trait_method, meets_msrv, msrvs};\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_lint::LateContext;\n@@ -9,8 +9,6 @@ use rustc_span::sym;\n \n use super::FILTER_MAP_NEXT;\n \n-const FILTER_MAP_NEXT_MSRV: RustcVersion = RustcVersion::new(1, 30, 0);\n-\n pub(super) fn check<'tcx>(\n     cx: &LateContext<'tcx>,\n     expr: &'tcx hir::Expr<'_>,\n@@ -19,7 +17,7 @@ pub(super) fn check<'tcx>(\n     msrv: Option<&RustcVersion>,\n ) {\n     if is_trait_method(cx, expr, sym::Iterator) {\n-        if !meets_msrv(msrv, &FILTER_MAP_NEXT_MSRV) {\n+        if !meets_msrv(msrv, &msrvs::ITERATOR_FIND_MAP) {\n             return;\n         }\n "}, {"sha": "4d8365fcda12681f72a45fd48e961c2e54ab8b23", "filename": "clippy_lints/src/methods/map_unwrap_or.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f33d86df4efda60f48b8fa3c1cc2d88e35000601/clippy_lints%2Fsrc%2Fmethods%2Fmap_unwrap_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f33d86df4efda60f48b8fa3c1cc2d88e35000601/clippy_lints%2Fsrc%2Fmethods%2Fmap_unwrap_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmap_unwrap_or.rs?ref=f33d86df4efda60f48b8fa3c1cc2d88e35000601", "patch": "@@ -1,8 +1,8 @@\n use clippy_utils::diagnostics::{span_lint, span_lint_and_sugg};\n-use clippy_utils::meets_msrv;\n use clippy_utils::source::snippet;\n use clippy_utils::ty::is_type_diagnostic_item;\n use clippy_utils::usage::mutated_variables;\n+use clippy_utils::{meets_msrv, msrvs};\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_lint::LateContext;\n@@ -11,8 +11,6 @@ use rustc_span::symbol::sym;\n \n use super::MAP_UNWRAP_OR;\n \n-const MAP_UNWRAP_OR_MSRV: RustcVersion = RustcVersion::new(1, 41, 0);\n-\n /// lint use of `map().unwrap_or_else()` for `Option`s and `Result`s\n /// Return true if lint triggered\n pub(super) fn check<'tcx>(\n@@ -23,13 +21,14 @@ pub(super) fn check<'tcx>(\n     unwrap_arg: &'tcx hir::Expr<'_>,\n     msrv: Option<&RustcVersion>,\n ) -> bool {\n-    if !meets_msrv(msrv, &MAP_UNWRAP_OR_MSRV) {\n-        return false;\n-    }\n     // lint if the caller of `map()` is an `Option`\n     let is_option = is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(recv), sym::option_type);\n     let is_result = is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(recv), sym::result_type);\n \n+    if is_result && !meets_msrv(msrv, &msrvs::RESULT_MAP_OR_ELSE) {\n+        return false;\n+    }\n+\n     if is_option || is_result {\n         // Don't make a suggestion that may fail to compile due to mutably borrowing\n         // the same variable twice."}, {"sha": "5a57135038fdc8beac4206c401c6e8167f176c3c", "filename": "clippy_lints/src/methods/option_as_ref_deref.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f33d86df4efda60f48b8fa3c1cc2d88e35000601/clippy_lints%2Fsrc%2Fmethods%2Foption_as_ref_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f33d86df4efda60f48b8fa3c1cc2d88e35000601/clippy_lints%2Fsrc%2Fmethods%2Foption_as_ref_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Foption_as_ref_deref.rs?ref=f33d86df4efda60f48b8fa3c1cc2d88e35000601", "patch": "@@ -1,7 +1,7 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::source::snippet;\n use clippy_utils::ty::is_type_diagnostic_item;\n-use clippy_utils::{match_def_path, meets_msrv, path_to_local_id, paths, remove_blocks};\n+use clippy_utils::{match_def_path, meets_msrv, msrvs, path_to_local_id, paths, remove_blocks};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n@@ -12,8 +12,6 @@ use rustc_span::sym;\n \n use super::OPTION_AS_REF_DEREF;\n \n-const OPTION_AS_REF_DEREF_MSRV: RustcVersion = RustcVersion::new(1, 40, 0);\n-\n /// lint use of `_.as_ref().map(Deref::deref)` for `Option`s\n pub(super) fn check<'tcx>(\n     cx: &LateContext<'tcx>,\n@@ -23,7 +21,7 @@ pub(super) fn check<'tcx>(\n     is_mut: bool,\n     msrv: Option<&RustcVersion>,\n ) {\n-    if !meets_msrv(msrv, &OPTION_AS_REF_DEREF_MSRV) {\n+    if !meets_msrv(msrv, &msrvs::OPTION_AS_DEREF) {\n         return;\n     }\n "}, {"sha": "27b5a07c1bc24ca5b85f1ebf8a72585f151922bb", "filename": "clippy_lints/src/missing_const_for_fn.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f33d86df4efda60f48b8fa3c1cc2d88e35000601/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f33d86df4efda60f48b8fa3c1cc2d88e35000601/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs?ref=f33d86df4efda60f48b8fa3c1cc2d88e35000601", "patch": "@@ -1,7 +1,7 @@\n use clippy_utils::diagnostics::span_lint;\n use clippy_utils::qualify_min_const_fn::is_min_const_fn;\n use clippy_utils::ty::has_drop;\n-use clippy_utils::{fn_has_unsatisfiable_preds, is_entrypoint_fn, meets_msrv, trait_ref_of_method};\n+use clippy_utils::{fn_has_unsatisfiable_preds, is_entrypoint_fn, meets_msrv, msrvs, trait_ref_of_method};\n use rustc_hir as hir;\n use rustc_hir::intravisit::FnKind;\n use rustc_hir::{Body, Constness, FnDecl, GenericParamKind, HirId};\n@@ -12,8 +12,6 @@ use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::Span;\n use rustc_typeck::hir_ty_to_ty;\n \n-const MISSING_CONST_FOR_FN_MSRV: RustcVersion = RustcVersion::new(1, 37, 0);\n-\n declare_clippy_lint! {\n     /// **What it does:**\n     ///\n@@ -97,7 +95,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingConstForFn {\n         span: Span,\n         hir_id: HirId,\n     ) {\n-        if !meets_msrv(self.msrv.as_ref(), &MISSING_CONST_FOR_FN_MSRV) {\n+        if !meets_msrv(self.msrv.as_ref(), &msrvs::CONST_IF_MATCH) {\n             return;\n         }\n "}, {"sha": "7b156a8c49dd9d93aec449e7898ce3acb7c09dba", "filename": "clippy_lints/src/needless_question_mark.rs", "status": "modified", "additions": 9, "deletions": 33, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/f33d86df4efda60f48b8fa3c1cc2d88e35000601/clippy_lints%2Fsrc%2Fneedless_question_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f33d86df4efda60f48b8fa3c1cc2d88e35000601/clippy_lints%2Fsrc%2Fneedless_question_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_question_mark.rs?ref=f33d86df4efda60f48b8fa3c1cc2d88e35000601", "patch": "@@ -1,15 +1,13 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n-use clippy_utils::is_lang_ctor;\n use clippy_utils::source::snippet;\n use clippy_utils::ty::is_type_diagnostic_item;\n-use clippy_utils::{differing_macro_contexts, meets_msrv};\n+use clippy_utils::{differing_macro_contexts, is_lang_ctor};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::LangItem::{OptionSome, ResultOk};\n use rustc_hir::{Body, Expr, ExprKind, LangItem, MatchSource, QPath};\n-use rustc_lint::{LateContext, LateLintPass, LintContext};\n-use rustc_semver::RustcVersion;\n-use rustc_session::{declare_tool_lint, impl_lint_pass};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::sym;\n \n declare_clippy_lint! {\n@@ -63,21 +61,7 @@ declare_clippy_lint! {\n     \"Suggest `value.inner_option` instead of `Some(value.inner_option?)`. The same goes for `Result<T, E>`.\"\n }\n \n-const NEEDLESS_QUESTION_MARK_RESULT_MSRV: RustcVersion = RustcVersion::new(1, 13, 0);\n-const NEEDLESS_QUESTION_MARK_OPTION_MSRV: RustcVersion = RustcVersion::new(1, 22, 0);\n-\n-pub struct NeedlessQuestionMark {\n-    msrv: Option<RustcVersion>,\n-}\n-\n-impl NeedlessQuestionMark {\n-    #[must_use]\n-    pub fn new(msrv: Option<RustcVersion>) -> Self {\n-        Self { msrv }\n-    }\n-}\n-\n-impl_lint_pass!(NeedlessQuestionMark => [NEEDLESS_QUESTION_MARK]);\n+declare_lint_pass!(NeedlessQuestionMark => [NEEDLESS_QUESTION_MARK]);\n \n #[derive(Debug)]\n enum SomeOkCall<'a> {\n@@ -111,7 +95,7 @@ impl LateLintPass<'_> for NeedlessQuestionMark {\n             _ => return,\n         };\n \n-        if let Some(ok_some_call) = is_some_or_ok_call(self, cx, e) {\n+        if let Some(ok_some_call) = is_some_or_ok_call(cx, e) {\n             emit_lint(cx, &ok_some_call);\n         }\n     }\n@@ -127,14 +111,12 @@ impl LateLintPass<'_> for NeedlessQuestionMark {\n \n         if_chain! {\n             if let Some(expr) = expr_opt;\n-            if let Some(ok_some_call) = is_some_or_ok_call(self, cx, expr);\n+            if let Some(ok_some_call) = is_some_or_ok_call(cx, expr);\n             then {\n                 emit_lint(cx, &ok_some_call);\n             }\n         };\n     }\n-\n-    extract_msrv_attr!(LateContext);\n }\n \n fn emit_lint(cx: &LateContext<'_>, expr: &SomeOkCall<'_>) {\n@@ -153,11 +135,7 @@ fn emit_lint(cx: &LateContext<'_>, expr: &SomeOkCall<'_>) {\n     );\n }\n \n-fn is_some_or_ok_call<'a>(\n-    nqml: &NeedlessQuestionMark,\n-    cx: &'a LateContext<'_>,\n-    expr: &'a Expr<'_>,\n-) -> Option<SomeOkCall<'a>> {\n+fn is_some_or_ok_call<'a>(cx: &'a LateContext<'_>, expr: &'a Expr<'_>) -> Option<SomeOkCall<'a>> {\n     if_chain! {\n         // Check outer expression matches CALL_IDENT(ARGUMENT) format\n         if let ExprKind::Call(path, args) = &expr.kind;\n@@ -188,8 +166,7 @@ fn is_some_or_ok_call<'a>(\n             let inner_is_some = is_type_diagnostic_item(cx, inner_ty, sym::option_type);\n \n             // Check for Option MSRV\n-            let meets_option_msrv = meets_msrv(nqml.msrv.as_ref(), &NEEDLESS_QUESTION_MARK_OPTION_MSRV);\n-            if outer_is_some && inner_is_some && meets_option_msrv {\n+            if outer_is_some && inner_is_some {\n                 return Some(SomeOkCall::SomeCall(expr, inner_expr));\n             }\n \n@@ -202,8 +179,7 @@ fn is_some_or_ok_call<'a>(\n             let does_not_call_from = !has_implicit_error_from(cx, expr, inner_expr);\n \n             // Must meet Result MSRV\n-            let meets_result_msrv = meets_msrv(nqml.msrv.as_ref(), &NEEDLESS_QUESTION_MARK_RESULT_MSRV);\n-            if outer_is_result && inner_is_result && does_not_call_from && meets_result_msrv {\n+            if outer_is_result && inner_is_result && does_not_call_from {\n                 return Some(SomeOkCall::OkCall(expr, inner_expr));\n             }\n         }"}, {"sha": "7169f96eaf1f3c9160b3e87a5188bfdde3040bec", "filename": "clippy_lints/src/ranges.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f33d86df4efda60f48b8fa3c1cc2d88e35000601/clippy_lints%2Fsrc%2Franges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f33d86df4efda60f48b8fa3c1cc2d88e35000601/clippy_lints%2Fsrc%2Franges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Franges.rs?ref=f33d86df4efda60f48b8fa3c1cc2d88e35000601", "patch": "@@ -2,7 +2,7 @@ use crate::consts::{constant, Constant};\n use clippy_utils::diagnostics::{span_lint, span_lint_and_sugg, span_lint_and_then};\n use clippy_utils::source::{snippet, snippet_opt, snippet_with_applicability};\n use clippy_utils::sugg::Sugg;\n-use clippy_utils::{get_parent_expr, in_constant, is_integer_const, meets_msrv, single_segment_path};\n+use clippy_utils::{get_parent_expr, in_constant, is_integer_const, meets_msrv, msrvs, single_segment_path};\n use clippy_utils::{higher, SpanlessEq};\n use if_chain::if_chain;\n use rustc_ast::ast::RangeLimits;\n@@ -159,8 +159,6 @@ declare_clippy_lint! {\n     \"manually reimplementing {`Range`, `RangeInclusive`}`::contains`\"\n }\n \n-const MANUAL_RANGE_CONTAINS_MSRV: RustcVersion = RustcVersion::new(1, 35, 0);\n-\n pub struct Ranges {\n     msrv: Option<RustcVersion>,\n }\n@@ -187,7 +185,7 @@ impl<'tcx> LateLintPass<'tcx> for Ranges {\n                 check_range_zip_with_len(cx, path, args, expr.span);\n             },\n             ExprKind::Binary(ref op, l, r) => {\n-                if meets_msrv(self.msrv.as_ref(), &MANUAL_RANGE_CONTAINS_MSRV) {\n+                if meets_msrv(self.msrv.as_ref(), &msrvs::RANGE_CONTAINS) {\n                     check_possible_range_contains(cx, op.node, l, r, expr);\n                 }\n             },"}, {"sha": "d5ee8d3468deb84aca1ad7017d66765a1d181b15", "filename": "clippy_lints/src/redundant_field_names.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f33d86df4efda60f48b8fa3c1cc2d88e35000601/clippy_lints%2Fsrc%2Fredundant_field_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f33d86df4efda60f48b8fa3c1cc2d88e35000601/clippy_lints%2Fsrc%2Fredundant_field_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_field_names.rs?ref=f33d86df4efda60f48b8fa3c1cc2d88e35000601", "patch": "@@ -1,14 +1,12 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n-use clippy_utils::meets_msrv;\n+use clippy_utils::{meets_msrv, msrvs};\n use rustc_ast::ast::{Expr, ExprKind};\n use rustc_errors::Applicability;\n use rustc_lint::{EarlyContext, EarlyLintPass};\n use rustc_middle::lint::in_external_macro;\n use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n \n-const REDUNDANT_FIELD_NAMES_MSRV: RustcVersion = RustcVersion::new(1, 17, 0);\n-\n declare_clippy_lint! {\n     /// **What it does:** Checks for fields in struct literals where shorthands\n     /// could be used.\n@@ -52,7 +50,7 @@ impl_lint_pass!(RedundantFieldNames => [REDUNDANT_FIELD_NAMES]);\n \n impl EarlyLintPass for RedundantFieldNames {\n     fn check_expr(&mut self, cx: &EarlyContext<'_>, expr: &Expr) {\n-        if !meets_msrv(self.msrv.as_ref(), &REDUNDANT_FIELD_NAMES_MSRV) {\n+        if !meets_msrv(self.msrv.as_ref(), &msrvs::FIELD_INIT_SHORTHAND) {\n             return;\n         }\n "}, {"sha": "48107d9c037db3abdae9caa08930c1cbbb2d9321", "filename": "clippy_lints/src/redundant_static_lifetimes.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f33d86df4efda60f48b8fa3c1cc2d88e35000601/clippy_lints%2Fsrc%2Fredundant_static_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f33d86df4efda60f48b8fa3c1cc2d88e35000601/clippy_lints%2Fsrc%2Fredundant_static_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_static_lifetimes.rs?ref=f33d86df4efda60f48b8fa3c1cc2d88e35000601", "patch": "@@ -1,14 +1,12 @@\n use clippy_utils::diagnostics::span_lint_and_then;\n-use clippy_utils::meets_msrv;\n use clippy_utils::source::snippet;\n+use clippy_utils::{meets_msrv, msrvs};\n use rustc_ast::ast::{Item, ItemKind, Ty, TyKind};\n use rustc_errors::Applicability;\n use rustc_lint::{EarlyContext, EarlyLintPass};\n use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n \n-const REDUNDANT_STATIC_LIFETIMES_MSRV: RustcVersion = RustcVersion::new(1, 17, 0);\n-\n declare_clippy_lint! {\n     /// **What it does:** Checks for constants and statics with an explicit `'static` lifetime.\n     ///\n@@ -100,7 +98,7 @@ impl RedundantStaticLifetimes {\n \n impl EarlyLintPass for RedundantStaticLifetimes {\n     fn check_item(&mut self, cx: &EarlyContext<'_>, item: &Item) {\n-        if !meets_msrv(self.msrv.as_ref(), &REDUNDANT_STATIC_LIFETIMES_MSRV) {\n+        if !meets_msrv(self.msrv.as_ref(), &msrvs::STATIC_IN_CONST) {\n             return;\n         }\n "}, {"sha": "3e985fa72b8fe77583ed58223778bf464a2eb04c", "filename": "clippy_lints/src/unnested_or_patterns.rs", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f33d86df4efda60f48b8fa3c1cc2d88e35000601/clippy_lints%2Fsrc%2Funnested_or_patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f33d86df4efda60f48b8fa3c1cc2d88e35000601/clippy_lints%2Fsrc%2Funnested_or_patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funnested_or_patterns.rs?ref=f33d86df4efda60f48b8fa3c1cc2d88e35000601", "patch": "@@ -1,11 +1,8 @@\n #![allow(clippy::wildcard_imports, clippy::enum_glob_use)]\n \n+use clippy_utils::ast_utils::{eq_field_pat, eq_id, eq_pat, eq_path};\n use clippy_utils::diagnostics::span_lint_and_then;\n-use clippy_utils::over;\n-use clippy_utils::{\n-    ast_utils::{eq_field_pat, eq_id, eq_pat, eq_path},\n-    meets_msrv,\n-};\n+use clippy_utils::{meets_msrv, msrvs, over};\n use rustc_ast::mut_visit::*;\n use rustc_ast::ptr::P;\n use rustc_ast::{self as ast, Pat, PatKind, PatKind::*, DUMMY_NODE_ID};\n@@ -54,8 +51,6 @@ declare_clippy_lint! {\n     \"unnested or-patterns, e.g., `Foo(Bar) | Foo(Baz) instead of `Foo(Bar | Baz)`\"\n }\n \n-const UNNESTED_OR_PATTERNS_MSRV: RustcVersion = RustcVersion::new(1, 53, 0);\n-\n #[derive(Clone, Copy)]\n pub struct UnnestedOrPatterns {\n     msrv: Option<RustcVersion>,\n@@ -72,27 +67,27 @@ impl_lint_pass!(UnnestedOrPatterns => [UNNESTED_OR_PATTERNS]);\n \n impl EarlyLintPass for UnnestedOrPatterns {\n     fn check_arm(&mut self, cx: &EarlyContext<'_>, a: &ast::Arm) {\n-        if meets_msrv(self.msrv.as_ref(), &UNNESTED_OR_PATTERNS_MSRV) {\n+        if meets_msrv(self.msrv.as_ref(), &msrvs::OR_PATTERNS) {\n             lint_unnested_or_patterns(cx, &a.pat);\n         }\n     }\n \n     fn check_expr(&mut self, cx: &EarlyContext<'_>, e: &ast::Expr) {\n-        if meets_msrv(self.msrv.as_ref(), &UNNESTED_OR_PATTERNS_MSRV) {\n+        if meets_msrv(self.msrv.as_ref(), &msrvs::OR_PATTERNS) {\n             if let ast::ExprKind::Let(pat, _) = &e.kind {\n                 lint_unnested_or_patterns(cx, pat);\n             }\n         }\n     }\n \n     fn check_param(&mut self, cx: &EarlyContext<'_>, p: &ast::Param) {\n-        if meets_msrv(self.msrv.as_ref(), &UNNESTED_OR_PATTERNS_MSRV) {\n+        if meets_msrv(self.msrv.as_ref(), &msrvs::OR_PATTERNS) {\n             lint_unnested_or_patterns(cx, &p.pat);\n         }\n     }\n \n     fn check_local(&mut self, cx: &EarlyContext<'_>, l: &ast::Local) {\n-        if meets_msrv(self.msrv.as_ref(), &UNNESTED_OR_PATTERNS_MSRV) {\n+        if meets_msrv(self.msrv.as_ref(), &msrvs::OR_PATTERNS) {\n             lint_unnested_or_patterns(cx, &l.pat);\n         }\n     }"}, {"sha": "aa4d16633ff80f3937f576017e3ad2d3ec689a19", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f33d86df4efda60f48b8fa3c1cc2d88e35000601/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f33d86df4efda60f48b8fa3c1cc2d88e35000601/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=f33d86df4efda60f48b8fa3c1cc2d88e35000601", "patch": "@@ -1,6 +1,6 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::source::snippet_opt;\n-use clippy_utils::{in_macro, meets_msrv};\n+use clippy_utils::{in_macro, meets_msrv, msrvs};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n@@ -62,8 +62,6 @@ pub struct UseSelf {\n     stack: Vec<StackItem>,\n }\n \n-const USE_SELF_MSRV: RustcVersion = RustcVersion::new(1, 37, 0);\n-\n impl UseSelf {\n     #[must_use]\n     pub fn new(msrv: Option<RustcVersion>) -> Self {\n@@ -236,7 +234,10 @@ impl<'tcx> LateLintPass<'tcx> for UseSelf {\n     }\n \n     fn check_ty(&mut self, cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>) {\n-        if in_macro(hir_ty.span) | in_impl(cx, hir_ty) | !meets_msrv(self.msrv.as_ref(), &USE_SELF_MSRV) {\n+        if in_macro(hir_ty.span)\n+            || in_impl(cx, hir_ty)\n+            || !meets_msrv(self.msrv.as_ref(), &msrvs::TYPE_ALIAS_ENUM_VARIANTS)\n+        {\n             return;\n         }\n \n@@ -288,7 +289,7 @@ impl<'tcx> LateLintPass<'tcx> for UseSelf {\n             }\n         }\n \n-        if in_macro(expr.span) | !meets_msrv(self.msrv.as_ref(), &USE_SELF_MSRV) {\n+        if in_macro(expr.span) || !meets_msrv(self.msrv.as_ref(), &msrvs::TYPE_ALIAS_ENUM_VARIANTS) {\n             return;\n         }\n "}, {"sha": "d56855a71c159b2e1cdc351d7708e9f8371b3e46", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f33d86df4efda60f48b8fa3c1cc2d88e35000601/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f33d86df4efda60f48b8fa3c1cc2d88e35000601/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=f33d86df4efda60f48b8fa3c1cc2d88e35000601", "patch": "@@ -106,7 +106,7 @@ macro_rules! define_Conf {\n \n pub use self::helpers::Conf;\n define_Conf! {\n-    /// Lint: CLONED_INSTEAD_OF_COPIED, REDUNDANT_FIELD_NAMES, REDUNDANT_STATIC_LIFETIMES, FILTER_MAP_NEXT, CHECKED_CONVERSIONS, MANUAL_RANGE_CONTAINS, USE_SELF, MEM_REPLACE_WITH_DEFAULT, MANUAL_NON_EXHAUSTIVE, OPTION_AS_REF_DEREF, MAP_UNWRAP_OR, MATCH_LIKE_MATCHES_MACRO, MANUAL_STRIP, MISSING_CONST_FOR_FN, UNNESTED_OR_PATTERNS, FROM_OVER_INTO, NEEDLESS_QUESTION_MARK, PTR_AS_PTR. The minimum rust version that the project supports\n+    /// Lint: CLONED_INSTEAD_OF_COPIED, REDUNDANT_FIELD_NAMES, REDUNDANT_STATIC_LIFETIMES, FILTER_MAP_NEXT, CHECKED_CONVERSIONS, MANUAL_RANGE_CONTAINS, USE_SELF, MEM_REPLACE_WITH_DEFAULT, MANUAL_NON_EXHAUSTIVE, OPTION_AS_REF_DEREF, MAP_UNWRAP_OR, MATCH_LIKE_MATCHES_MACRO, MANUAL_STRIP, MISSING_CONST_FOR_FN, UNNESTED_OR_PATTERNS, FROM_OVER_INTO, PTR_AS_PTR. The minimum rust version that the project supports\n     (msrv, \"msrv\": Option<String>, None),\n     /// Lint: BLACKLISTED_NAME. The list of blacklisted names to lint about. NB: `bar` is not here since it has legitimate uses\n     (blacklisted_names, \"blacklisted_names\": Vec<String>, [\"foo\", \"baz\", \"quux\"].iter().map(ToString::to_string).collect()),"}, {"sha": "9b60c92bca1bea53bcbc29d78763b0920bd1992b", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f33d86df4efda60f48b8fa3c1cc2d88e35000601/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f33d86df4efda60f48b8fa3c1cc2d88e35000601/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=f33d86df4efda60f48b8fa3c1cc2d88e35000601", "patch": "@@ -38,6 +38,7 @@ pub mod diagnostics;\n pub mod eager_or_lazy;\n pub mod higher;\n mod hir_utils;\n+pub mod msrvs;\n pub mod numeric_literal;\n pub mod paths;\n pub mod ptr;"}, {"sha": "00df04c0144c18b97650f0f9bc128de9d47f9219", "filename": "clippy_utils/src/msrvs.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/f33d86df4efda60f48b8fa3c1cc2d88e35000601/clippy_utils%2Fsrc%2Fmsrvs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f33d86df4efda60f48b8fa3c1cc2d88e35000601/clippy_utils%2Fsrc%2Fmsrvs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fmsrvs.rs?ref=f33d86df4efda60f48b8fa3c1cc2d88e35000601", "patch": "@@ -0,0 +1,29 @@\n+use rustc_semver::RustcVersion;\n+\n+macro_rules! msrv_aliases {\n+    ($($major:literal,$minor:literal,$patch:literal {\n+        $($name:ident),* $(,)?\n+    })*) => {\n+        $($(\n+        pub const $name: RustcVersion = RustcVersion::new($major, $minor, $patch);\n+        )*)*\n+    };\n+}\n+\n+// names may refer to stabilized feature flags or library items\n+msrv_aliases! {\n+    1,53,0 { OR_PATTERNS }\n+    1,50,0 { BOOL_THEN }\n+    1,46,0 { CONST_IF_MATCH }\n+    1,45,0 { STR_STRIP_PREFIX }\n+    1,42,0 { MATCHES_MACRO }\n+    1,41,0 { RE_REBALANCING_COHERENCE, RESULT_MAP_OR_ELSE }\n+    1,40,0 { MEM_TAKE, NON_EXHAUSTIVE, OPTION_AS_DEREF }\n+    1,38,0 { POINTER_CAST }\n+    1,37,0 { TYPE_ALIAS_ENUM_VARIANTS }\n+    1,36,0 { ITERATOR_COPIED }\n+    1,35,0 { OPTION_COPIED, RANGE_CONTAINS }\n+    1,34,0 { TRY_FROM }\n+    1,30,0 { ITERATOR_FIND_MAP }\n+    1,17,0 { FIELD_INIT_SHORTHAND, STATIC_IN_CONST }\n+}"}, {"sha": "d6cc6d0c2c76394842dd80d085e811bf96b78725", "filename": "doc/adding_lints.md", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f33d86df4efda60f48b8fa3c1cc2d88e35000601/doc%2Fadding_lints.md", "raw_url": "https://github.com/rust-lang/rust/raw/f33d86df4efda60f48b8fa3c1cc2d88e35000601/doc%2Fadding_lints.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fadding_lints.md?ref=f33d86df4efda60f48b8fa3c1cc2d88e35000601", "patch": "@@ -390,17 +390,23 @@ pass.\n \n ## Specifying the lint's minimum supported Rust version (MSRV)\n \n-Projects supporting older versions of Rust would need to disable a lint if it\n-targets features present in later versions. Support for this can be added by\n-specifying an MSRV in your lint like so,\n+Sometimes a lint makes suggestions that require a certain version of Rust. For example, the `manual_strip` lint suggests\n+using `str::strip_prefix` and `str::strip_suffix` which is only available after Rust 1.45. In such cases, you need to\n+ensure that the MSRV configured for the project is >= the MSRV of the required Rust feature. If multiple features are\n+required, just use the one with a lower MSRV.\n+\n+First, add an MSRV alias for the required feature in [`clippy_utils::msrvs`](/clippy_utils/src/msrvs.rs). This can be\n+accessed later as `msrvs::STR_STRIP_PREFIX`, for example.\n \n ```rust\n-const MANUAL_STRIP_MSRV: RustcVersion = RustcVersion::new(1, 45, 0);\n+msrv_aliases! {\n+    ..\n+    1,45,0 { STR_STRIP_PREFIX }\n+}\n ```\n \n-The project's MSRV will also have to be an attribute in the lint so you'll have\n-to add a struct and constructor for your lint. The project's MSRV needs to be\n-passed when the lint is registered in `lib.rs`\n+In order to access the project-configured MSRV, you need to have an `msrv` field in the LintPass struct, and a\n+constructor to initialize the field. The `msrv` value is passed to the constructor in `clippy_lints/lib.rs`.\n \n ```rust\n pub struct ManualStrip {\n@@ -415,11 +421,11 @@ impl ManualStrip {\n }\n ```\n \n-The project's MSRV can then be matched against the lint's `msrv` in the LintPass\n+The project's MSRV can then be matched against the feature MSRV in the LintPass\n using the `meets_msrv` utility function.\n \n ``` rust\n-if !meets_msrv(self.msrv.as_ref(), &MANUAL_STRIP_MSRV) {\n+if !meets_msrv(self.msrv.as_ref(), &msrvs::STR_STRIP_PREFIX) {\n     return;\n }\n ```"}, {"sha": "52ddd9d2dc8266ac128e0c9bcc17f9d7394ecd21", "filename": "tests/ui/needless_question_mark.fixed", "status": "modified", "additions": 0, "deletions": 72, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/f33d86df4efda60f48b8fa3c1cc2d88e35000601/tests%2Fui%2Fneedless_question_mark.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f33d86df4efda60f48b8fa3c1cc2d88e35000601/tests%2Fui%2Fneedless_question_mark.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_question_mark.fixed?ref=f33d86df4efda60f48b8fa3c1cc2d88e35000601", "patch": "@@ -96,78 +96,6 @@ where\n \n fn main() {}\n \n-mod question_mark_none {\n-    #![clippy::msrv = \"1.12.0\"]\n-    fn needless_question_mark_option() -> Option<usize> {\n-        struct TO {\n-            magic: Option<usize>,\n-        }\n-        let to = TO { magic: None };\n-        Some(to.magic?) // should not be triggered\n-    }\n-\n-    fn needless_question_mark_result() -> Result<usize, bool> {\n-        struct TO {\n-            magic: Result<usize, bool>,\n-        }\n-        let to = TO { magic: Ok(1_usize) };\n-        Ok(to.magic?) // should not be triggered\n-    }\n-\n-    fn main() {\n-        needless_question_mark_option();\n-        needless_question_mark_result();\n-    }\n-}\n-\n-mod question_mark_result {\n-    #![clippy::msrv = \"1.21.0\"]\n-    fn needless_question_mark_option() -> Option<usize> {\n-        struct TO {\n-            magic: Option<usize>,\n-        }\n-        let to = TO { magic: None };\n-        Some(to.magic?) // should not be triggered\n-    }\n-\n-    fn needless_question_mark_result() -> Result<usize, bool> {\n-        struct TO {\n-            magic: Result<usize, bool>,\n-        }\n-        let to = TO { magic: Ok(1_usize) };\n-        to.magic // should be triggered\n-    }\n-\n-    fn main() {\n-        needless_question_mark_option();\n-        needless_question_mark_result();\n-    }\n-}\n-\n-mod question_mark_both {\n-    #![clippy::msrv = \"1.22.0\"]\n-    fn needless_question_mark_option() -> Option<usize> {\n-        struct TO {\n-            magic: Option<usize>,\n-        }\n-        let to = TO { magic: None };\n-        to.magic // should be triggered\n-    }\n-\n-    fn needless_question_mark_result() -> Result<usize, bool> {\n-        struct TO {\n-            magic: Result<usize, bool>,\n-        }\n-        let to = TO { magic: Ok(1_usize) };\n-        to.magic // should be triggered\n-    }\n-\n-    fn main() {\n-        needless_question_mark_option();\n-        needless_question_mark_result();\n-    }\n-}\n-\n // #6921 if a macro wraps an expr in Some(  ) and the ? is in the macro use,\n // the suggestion fails to apply; do not lint\n macro_rules! some_in_macro {"}, {"sha": "1ea4ba0d83fd76da23c3ac13bb4dcb3caf9cc801", "filename": "tests/ui/needless_question_mark.rs", "status": "modified", "additions": 0, "deletions": 72, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/f33d86df4efda60f48b8fa3c1cc2d88e35000601/tests%2Fui%2Fneedless_question_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f33d86df4efda60f48b8fa3c1cc2d88e35000601/tests%2Fui%2Fneedless_question_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_question_mark.rs?ref=f33d86df4efda60f48b8fa3c1cc2d88e35000601", "patch": "@@ -96,78 +96,6 @@ where\n \n fn main() {}\n \n-mod question_mark_none {\n-    #![clippy::msrv = \"1.12.0\"]\n-    fn needless_question_mark_option() -> Option<usize> {\n-        struct TO {\n-            magic: Option<usize>,\n-        }\n-        let to = TO { magic: None };\n-        Some(to.magic?) // should not be triggered\n-    }\n-\n-    fn needless_question_mark_result() -> Result<usize, bool> {\n-        struct TO {\n-            magic: Result<usize, bool>,\n-        }\n-        let to = TO { magic: Ok(1_usize) };\n-        Ok(to.magic?) // should not be triggered\n-    }\n-\n-    fn main() {\n-        needless_question_mark_option();\n-        needless_question_mark_result();\n-    }\n-}\n-\n-mod question_mark_result {\n-    #![clippy::msrv = \"1.21.0\"]\n-    fn needless_question_mark_option() -> Option<usize> {\n-        struct TO {\n-            magic: Option<usize>,\n-        }\n-        let to = TO { magic: None };\n-        Some(to.magic?) // should not be triggered\n-    }\n-\n-    fn needless_question_mark_result() -> Result<usize, bool> {\n-        struct TO {\n-            magic: Result<usize, bool>,\n-        }\n-        let to = TO { magic: Ok(1_usize) };\n-        Ok(to.magic?) // should be triggered\n-    }\n-\n-    fn main() {\n-        needless_question_mark_option();\n-        needless_question_mark_result();\n-    }\n-}\n-\n-mod question_mark_both {\n-    #![clippy::msrv = \"1.22.0\"]\n-    fn needless_question_mark_option() -> Option<usize> {\n-        struct TO {\n-            magic: Option<usize>,\n-        }\n-        let to = TO { magic: None };\n-        Some(to.magic?) // should be triggered\n-    }\n-\n-    fn needless_question_mark_result() -> Result<usize, bool> {\n-        struct TO {\n-            magic: Result<usize, bool>,\n-        }\n-        let to = TO { magic: Ok(1_usize) };\n-        Ok(to.magic?) // should be triggered\n-    }\n-\n-    fn main() {\n-        needless_question_mark_option();\n-        needless_question_mark_result();\n-    }\n-}\n-\n // #6921 if a macro wraps an expr in Some(  ) and the ? is in the macro use,\n // the suggestion fails to apply; do not lint\n macro_rules! some_in_macro {"}, {"sha": "afd68d91e51fe54c022487f30388a72ea434511e", "filename": "tests/ui/needless_question_mark.stderr", "status": "modified", "additions": 2, "deletions": 20, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f33d86df4efda60f48b8fa3c1cc2d88e35000601/tests%2Fui%2Fneedless_question_mark.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f33d86df4efda60f48b8fa3c1cc2d88e35000601/tests%2Fui%2Fneedless_question_mark.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_question_mark.stderr?ref=f33d86df4efda60f48b8fa3c1cc2d88e35000601", "patch": "@@ -67,25 +67,7 @@ LL |         return Ok(t.magic?);\n    |                ^^^^^^^^^^^^ help: try: `t.magic`\n \n error: question mark operator is useless here\n-  --> $DIR/needless_question_mark.rs:138:9\n-   |\n-LL |         Ok(to.magic?) // should be triggered\n-   |         ^^^^^^^^^^^^^ help: try: `to.magic`\n-\n-error: question mark operator is useless here\n-  --> $DIR/needless_question_mark.rs:154:9\n-   |\n-LL |         Some(to.magic?) // should be triggered\n-   |         ^^^^^^^^^^^^^^^ help: try: `to.magic`\n-\n-error: question mark operator is useless here\n-  --> $DIR/needless_question_mark.rs:162:9\n-   |\n-LL |         Ok(to.magic?) // should be triggered\n-   |         ^^^^^^^^^^^^^ help: try: `to.magic`\n-\n-error: question mark operator is useless here\n-  --> $DIR/needless_question_mark.rs:187:27\n+  --> $DIR/needless_question_mark.rs:115:27\n    |\n LL |         || -> Option<_> { Some(Some($expr)?) }()\n    |                           ^^^^^^^^^^^^^^^^^^ help: try: `Some($expr)`\n@@ -95,5 +77,5 @@ LL |     let _x = some_and_qmark_in_macro!(x?);\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to 15 previous errors\n+error: aborting due to 12 previous errors\n "}]}