{"sha": "47b99485a391e21caf3e0312969ed00ccbc6c167", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3Yjk5NDg1YTM5MWUyMWNhZjNlMDMxMjk2OWVkMDBjY2JjNmMxNjc=", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2021-04-26T05:02:48Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2021-05-06T18:37:45Z"}, "message": "mir-opt & codegen test updates\n\n`SimplifyArm` and such are currently in `-Zunsound-mir-opts` and thus weren't running by default, so having something like them for the new desugar shouldn't be necessary for switching.", "tree": {"sha": "86bcceae0b8d41db37cdc215a30116afaf272f87", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86bcceae0b8d41db37cdc215a30116afaf272f87"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/47b99485a391e21caf3e0312969ed00ccbc6c167", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/47b99485a391e21caf3e0312969ed00ccbc6c167", "html_url": "https://github.com/rust-lang/rust/commit/47b99485a391e21caf3e0312969ed00ccbc6c167", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/47b99485a391e21caf3e0312969ed00ccbc6c167/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "266a72637a5bb79eeaaa741950a6f9501bfd2f8d", "url": "https://api.github.com/repos/rust-lang/rust/commits/266a72637a5bb79eeaaa741950a6f9501bfd2f8d", "html_url": "https://github.com/rust-lang/rust/commit/266a72637a5bb79eeaaa741950a6f9501bfd2f8d"}], "stats": {"total": 695, "additions": 349, "deletions": 346}, "files": [{"sha": "78da06b2fe44045a7dfcfdfb2ca13e9cc775f6a2", "filename": "src/test/codegen/try_identity.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/47b99485a391e21caf3e0312969ed00ccbc6c167/src%2Ftest%2Fcodegen%2Ftry_identity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47b99485a391e21caf3e0312969ed00ccbc6c167/src%2Ftest%2Fcodegen%2Ftry_identity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Ftry_identity.rs?ref=47b99485a391e21caf3e0312969ed00ccbc6c167", "patch": "@@ -7,11 +7,28 @@\n \n type R = Result<u64, i32>;\n \n+// This was written to the `?` from `try_trait`,\n+// but `try_trait_v2` uses a different structure,\n+// so the relevant desugar is copied inline\n+// in order to keep the test testing the same thing.\n #[no_mangle]\n-fn try_identity(x: R) -> R {\n+pub fn try_identity(x: R) -> R {\n // CHECK: start:\n // CHECK-NOT: br {{.*}}\n // CHECK ret void\n-    let y = x?;\n+    let y = match into_result(x) {\n+        Err(e) => return from_error(From::from(e)),\n+        Ok(v) => v,\n+    };\n     Ok(y)\n }\n+\n+#[inline]\n+fn into_result<T, E>(r: Result<T, E>) -> Result<T, E> {\n+    r\n+}\n+\n+#[inline]\n+fn from_error<T, E>(e: E) -> Result<T, E> {\n+    Err(e)\n+}"}, {"sha": "ba17a45f984ef403d6220c99866984ace687d64e", "filename": "src/test/mir-opt/issue_62289.test.ElaborateDrops.before.mir", "status": "modified", "additions": 30, "deletions": 40, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/47b99485a391e21caf3e0312969ed00ccbc6c167/src%2Ftest%2Fmir-opt%2Fissue_62289.test.ElaborateDrops.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/47b99485a391e21caf3e0312969ed00ccbc6c167/src%2Ftest%2Fmir-opt%2Fissue_62289.test.ElaborateDrops.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_62289.test.ElaborateDrops.before.mir?ref=47b99485a391e21caf3e0312969ed00ccbc6c167", "patch": "@@ -4,21 +4,20 @@ fn test() -> Option<Box<u32>> {\n     let mut _0: std::option::Option<std::boxed::Box<u32>>; // return place in scope 0 at $DIR/issue-62289.rs:8:14: 8:30\n     let mut _1: std::boxed::Box<u32>;    // in scope 0 at $DIR/issue-62289.rs:9:10: 9:21\n     let mut _2: std::boxed::Box<u32>;    // in scope 0 at $DIR/issue-62289.rs:9:10: 9:21\n-    let mut _3: std::result::Result<u32, std::option::NoneError>; // in scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n+    let mut _3: std::ops::ControlFlow<std::option::Option<std::convert::Infallible>, u32>; // in scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n     let mut _4: std::option::Option<u32>; // in scope 0 at $DIR/issue-62289.rs:9:15: 9:19\n     let mut _5: isize;                   // in scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n-    let _6: std::option::NoneError;      // in scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n+    let _6: std::option::Option<std::convert::Infallible>; // in scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n     let mut _7: !;                       // in scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n-    let mut _8: std::option::NoneError;  // in scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n-    let mut _9: std::option::NoneError;  // in scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n-    let _10: u32;                        // in scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n+    let mut _8: std::option::Option<std::convert::Infallible>; // in scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n+    let _9: u32;                         // in scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n     scope 1 {\n-        debug err => _6;                 // in scope 1 at $DIR/issue-62289.rs:9:19: 9:20\n+        debug residual => _6;            // in scope 1 at $DIR/issue-62289.rs:9:19: 9:20\n         scope 2 {\n         }\n     }\n     scope 3 {\n-        debug val => _10;                // in scope 3 at $DIR/issue-62289.rs:9:15: 9:20\n+        debug val => _9;                 // in scope 3 at $DIR/issue-62289.rs:9:15: 9:20\n         scope 4 {\n         }\n     }\n@@ -30,10 +29,10 @@ fn test() -> Option<Box<u32>> {\n         StorageLive(_3);                 // scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n         StorageLive(_4);                 // scope 0 at $DIR/issue-62289.rs:9:15: 9:19\n         _4 = Option::<u32>::None;        // scope 0 at $DIR/issue-62289.rs:9:15: 9:19\n-        _3 = <Option<u32> as Try>::into_result(move _4) -> [return: bb1, unwind: bb12]; // scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n+        _3 = <Option<u32> as Try>::branch(move _4) -> [return: bb1, unwind: bb11]; // scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n                                          // mir::Constant\n                                          // + span: $DIR/issue-62289.rs:9:15: 9:20\n-                                         // + literal: Const { ty: fn(std::option::Option<u32>) -> std::result::Result<<std::option::Option<u32> as std::ops::Try>::Ok, <std::option::Option<u32> as std::ops::Try>::Error> {<std::option::Option<u32> as std::ops::Try>::into_result}, val: Value(Scalar(<ZST>)) }\n+                                         // + literal: Const { ty: fn(std::option::Option<u32>) -> std::ops::ControlFlow<<std::option::Option<u32> as std::ops::Try>::Residual, <std::option::Option<u32> as std::ops::Try>::Output> {<std::option::Option<u32> as std::ops::Try>::branch}, val: Value(Scalar(<ZST>)) }\n     }\n \n     bb1: {\n@@ -43,12 +42,12 @@ fn test() -> Option<Box<u32>> {\n     }\n \n     bb2: {\n-        StorageLive(_10);                // scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n-        _10 = ((_3 as Ok).0: u32);       // scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n-        (*_2) = _10;                     // scope 4 at $DIR/issue-62289.rs:9:15: 9:20\n-        StorageDead(_10);                // scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n+        StorageLive(_9);                 // scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n+        _9 = ((_3 as Continue).0: u32);  // scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n+        (*_2) = _9;                      // scope 4 at $DIR/issue-62289.rs:9:15: 9:20\n+        StorageDead(_9);                 // scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n         _1 = move _2;                    // scope 0 at $DIR/issue-62289.rs:9:10: 9:21\n-        drop(_2) -> [return: bb7, unwind: bb11]; // scope 0 at $DIR/issue-62289.rs:9:20: 9:21\n+        drop(_2) -> [return: bb6, unwind: bb10]; // scope 0 at $DIR/issue-62289.rs:9:20: 9:21\n     }\n \n     bb3: {\n@@ -57,62 +56,53 @@ fn test() -> Option<Box<u32>> {\n \n     bb4: {\n         StorageLive(_6);                 // scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n-        _6 = ((_3 as Err).0: std::option::NoneError); // scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n+        _6 = ((_3 as Break).0: std::option::Option<std::convert::Infallible>); // scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n         StorageLive(_8);                 // scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n-        StorageLive(_9);                 // scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n-        _9 = _6;                         // scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n-        _8 = <NoneError as From<NoneError>>::from(move _9) -> [return: bb5, unwind: bb12]; // scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n+        _8 = _6;                         // scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n+        _0 = <Option<Box<u32>> as FromResidual<Option<Infallible>>>::from_residual(move _8) -> [return: bb5, unwind: bb11]; // scope 2 at $DIR/issue-62289.rs:9:15: 9:20\n                                          // mir::Constant\n                                          // + span: $DIR/issue-62289.rs:9:19: 9:20\n-                                         // + literal: Const { ty: fn(std::option::NoneError) -> std::option::NoneError {<std::option::NoneError as std::convert::From<std::option::NoneError>>::from}, val: Value(Scalar(<ZST>)) }\n+                                         // + literal: Const { ty: fn(std::option::Option<std::convert::Infallible>) -> std::option::Option<std::boxed::Box<u32>> {<std::option::Option<std::boxed::Box<u32>> as std::ops::FromResidual<std::option::Option<std::convert::Infallible>>>::from_residual}, val: Value(Scalar(<ZST>)) }\n     }\n \n     bb5: {\n-        StorageDead(_9);                 // scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n-        _0 = <Option<Box<u32>> as Try>::from_error(move _8) -> [return: bb6, unwind: bb12]; // scope 2 at $DIR/issue-62289.rs:9:15: 9:20\n-                                         // mir::Constant\n-                                         // + span: $DIR/issue-62289.rs:9:15: 9:20\n-                                         // + literal: Const { ty: fn(<std::option::Option<std::boxed::Box<u32>> as std::ops::Try>::Error) -> std::option::Option<std::boxed::Box<u32>> {<std::option::Option<std::boxed::Box<u32>> as std::ops::Try>::from_error}, val: Value(Scalar(<ZST>)) }\n-    }\n-\n-    bb6: {\n         StorageDead(_8);                 // scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n         StorageDead(_6);                 // scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n-        drop(_2) -> bb9;                 // scope 0 at $DIR/issue-62289.rs:9:20: 9:21\n+        drop(_2) -> bb8;                 // scope 0 at $DIR/issue-62289.rs:9:20: 9:21\n     }\n \n-    bb7: {\n+    bb6: {\n         StorageDead(_2);                 // scope 0 at $DIR/issue-62289.rs:9:20: 9:21\n         _0 = Option::<Box<u32>>::Some(move _1); // scope 0 at $DIR/issue-62289.rs:9:5: 9:22\n-        drop(_1) -> bb8;                 // scope 0 at $DIR/issue-62289.rs:9:21: 9:22\n+        drop(_1) -> bb7;                 // scope 0 at $DIR/issue-62289.rs:9:21: 9:22\n     }\n \n-    bb8: {\n+    bb7: {\n         StorageDead(_1);                 // scope 0 at $DIR/issue-62289.rs:9:21: 9:22\n         StorageDead(_3);                 // scope 0 at $DIR/issue-62289.rs:10:1: 10:2\n-        goto -> bb10;                    // scope 0 at $DIR/issue-62289.rs:10:2: 10:2\n+        goto -> bb9;                     // scope 0 at $DIR/issue-62289.rs:10:2: 10:2\n     }\n \n-    bb9: {\n+    bb8: {\n         StorageDead(_2);                 // scope 0 at $DIR/issue-62289.rs:9:20: 9:21\n         StorageDead(_1);                 // scope 0 at $DIR/issue-62289.rs:9:21: 9:22\n         StorageDead(_3);                 // scope 0 at $DIR/issue-62289.rs:10:1: 10:2\n-        goto -> bb10;                    // scope 0 at $DIR/issue-62289.rs:10:2: 10:2\n+        goto -> bb9;                     // scope 0 at $DIR/issue-62289.rs:10:2: 10:2\n     }\n \n-    bb10: {\n+    bb9: {\n         return;                          // scope 0 at $DIR/issue-62289.rs:10:2: 10:2\n     }\n \n-    bb11 (cleanup): {\n-        drop(_1) -> bb13;                // scope 0 at $DIR/issue-62289.rs:9:21: 9:22\n+    bb10 (cleanup): {\n+        drop(_1) -> bb12;                // scope 0 at $DIR/issue-62289.rs:9:21: 9:22\n     }\n \n-    bb12 (cleanup): {\n-        drop(_2) -> bb13;                // scope 0 at $DIR/issue-62289.rs:9:20: 9:21\n+    bb11 (cleanup): {\n+        drop(_2) -> bb12;                // scope 0 at $DIR/issue-62289.rs:9:20: 9:21\n     }\n \n-    bb13 (cleanup): {\n+    bb12 (cleanup): {\n         resume;                          // scope 0 at $DIR/issue-62289.rs:8:1: 10:2\n     }\n }"}, {"sha": "b789b87f6c2dc943904bd446b3e024d3e4280de2", "filename": "src/test/mir-opt/simplify-arm.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/47b99485a391e21caf3e0312969ed00ccbc6c167/src%2Ftest%2Fmir-opt%2Fsimplify-arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47b99485a391e21caf3e0312969ed00ccbc6c167/src%2Ftest%2Fmir-opt%2Fsimplify-arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify-arm.rs?ref=47b99485a391e21caf3e0312969ed00ccbc6c167", "patch": "@@ -20,8 +20,23 @@ fn id_result(r: Result<u8, i32>) -> Result<u8, i32> {\n     }\n }\n \n+fn into_result<T, E>(r: Result<T, E>) -> Result<T, E> {\n+    r\n+}\n+\n+fn from_error<T, E>(e: E) -> Result<T, E> {\n+    Err(e)\n+}\n+\n+// This was written to the `?` from `try_trait`,\n+// but `try_trait_v2` uses a different structure,\n+// so the relevant desugar is copied inline\n+// in order to keep the test testing the same thing.\n fn id_try(r: Result<u8, i32>) -> Result<u8, i32> {\n-    let x = r?;\n+    let x = match into_result(r) {\n+        Err(e) => return from_error(From::from(e)),\n+        Ok(v) => v,\n+    };\n     Ok(x)\n }\n "}, {"sha": "a3bad4f0c623deec6f12bee391a01d1a0cdfc94d", "filename": "src/test/mir-opt/simplify_arm.id_try.SimplifyArmIdentity.diff", "status": "modified", "additions": 66, "deletions": 74, "changes": 140, "blob_url": "https://github.com/rust-lang/rust/blob/47b99485a391e21caf3e0312969ed00ccbc6c167/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_try.SimplifyArmIdentity.diff", "raw_url": "https://github.com/rust-lang/rust/raw/47b99485a391e21caf3e0312969ed00ccbc6c167/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_try.SimplifyArmIdentity.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_try.SimplifyArmIdentity.diff?ref=47b99485a391e21caf3e0312969ed00ccbc6c167", "patch": "@@ -2,101 +2,93 @@\n + // MIR for `id_try` after SimplifyArmIdentity\n   \n   fn id_try(_1: Result<u8, i32>) -> Result<u8, i32> {\n-      debug r => _1;                       // in scope 0 at $DIR/simplify-arm.rs:23:11: 23:12\n-      let mut _0: std::result::Result<u8, i32>; // return place in scope 0 at $DIR/simplify-arm.rs:23:34: 23:49\n-      let _2: u8;                          // in scope 0 at $DIR/simplify-arm.rs:24:9: 24:10\n-      let mut _3: std::result::Result<u8, i32>; // in scope 0 at $DIR/simplify-arm.rs:24:13: 24:15\n-      let mut _4: std::result::Result<u8, i32>; // in scope 0 at $DIR/simplify-arm.rs:24:13: 24:14\n-      let mut _5: isize;                   // in scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n-      let _6: i32;                         // in scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n-      let mut _7: !;                       // in scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n-      let mut _8: i32;                     // in scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n-      let mut _9: i32;                     // in scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n-      let _10: u8;                         // in scope 0 at $DIR/simplify-arm.rs:24:13: 24:15\n-      let mut _11: u8;                     // in scope 0 at $DIR/simplify-arm.rs:25:8: 25:9\n+      debug r => _1;                       // in scope 0 at $DIR/simplify-arm.rs:35:11: 35:12\n+      let mut _0: std::result::Result<u8, i32>; // return place in scope 0 at $DIR/simplify-arm.rs:35:34: 35:49\n+      let _2: u8;                          // in scope 0 at $DIR/simplify-arm.rs:36:9: 36:10\n+      let mut _3: std::result::Result<u8, i32>; // in scope 0 at $DIR/simplify-arm.rs:36:19: 36:33\n+      let mut _4: std::result::Result<u8, i32>; // in scope 0 at $DIR/simplify-arm.rs:36:31: 36:32\n+      let mut _5: isize;                   // in scope 0 at $DIR/simplify-arm.rs:37:9: 37:15\n+      let _6: i32;                         // in scope 0 at $DIR/simplify-arm.rs:37:13: 37:14\n+      let mut _7: !;                       // in scope 0 at $DIR/simplify-arm.rs:37:19: 37:51\n+      let mut _8: i32;                     // in scope 0 at $DIR/simplify-arm.rs:37:37: 37:50\n+      let mut _9: i32;                     // in scope 0 at $DIR/simplify-arm.rs:37:48: 37:49\n+      let _10: u8;                         // in scope 0 at $DIR/simplify-arm.rs:38:12: 38:13\n+      let mut _11: u8;                     // in scope 0 at $DIR/simplify-arm.rs:40:8: 40:9\n       scope 1 {\n--         debug x => _2;                   // in scope 1 at $DIR/simplify-arm.rs:24:9: 24:10\n-+         debug x => ((_0 as Ok).0: u8);   // in scope 1 at $DIR/simplify-arm.rs:24:9: 24:10\n+-         debug x => _2;                   // in scope 1 at $DIR/simplify-arm.rs:36:9: 36:10\n++         debug x => ((_0 as Ok).0: u8);   // in scope 1 at $DIR/simplify-arm.rs:36:9: 36:10\n       }\n       scope 2 {\n--         debug err => _6;                 // in scope 2 at $DIR/simplify-arm.rs:24:14: 24:15\n-+         debug err => ((_0 as Err).0: i32); // in scope 2 at $DIR/simplify-arm.rs:24:14: 24:15\n-          scope 3 {\n-              scope 7 (inlined <i32 as From<i32>>::from) { // at $DIR/simplify-arm.rs:24:14: 24:15\n--                 debug t => _9;           // in scope 7 at $DIR/simplify-arm.rs:24:14: 24:15\n-+                 debug t => ((_0 as Err).0: i32); // in scope 7 at $DIR/simplify-arm.rs:24:14: 24:15\n-              }\n-              scope 8 (inlined <Result<u8, i32> as Try>::from_error) { // at $DIR/simplify-arm.rs:24:13: 24:15\n--                 debug v => _8;           // in scope 8 at $DIR/simplify-arm.rs:24:13: 24:15\n-+                 debug v => ((_0 as Err).0: i32); // in scope 8 at $DIR/simplify-arm.rs:24:13: 24:15\n-                  let mut _12: i32;        // in scope 8 at $DIR/simplify-arm.rs:24:13: 24:15\n-              }\n+-         debug e => _6;                   // in scope 2 at $DIR/simplify-arm.rs:37:13: 37:14\n++         debug e => ((_0 as Err).0: i32); // in scope 2 at $DIR/simplify-arm.rs:37:13: 37:14\n+          scope 5 (inlined <i32 as From<i32>>::from) { // at $DIR/simplify-arm.rs:37:37: 37:50\n+-             debug t => _9;               // in scope 5 at $DIR/simplify-arm.rs:37:37: 37:50\n++             debug t => ((_0 as Err).0: i32); // in scope 5 at $DIR/simplify-arm.rs:37:37: 37:50\n           }\n-      }\n-      scope 4 {\n--         debug val => _10;                // in scope 4 at $DIR/simplify-arm.rs:24:13: 24:15\n-+         debug val => ((_0 as Ok).0: u8); // in scope 4 at $DIR/simplify-arm.rs:24:13: 24:15\n-          scope 5 {\n+          scope 6 (inlined from_error::<u8, i32>) { // at $DIR/simplify-arm.rs:37:26: 37:51\n+-             debug e => _8;               // in scope 6 at $DIR/simplify-arm.rs:37:26: 37:51\n++             debug e => ((_0 as Err).0: i32); // in scope 6 at $DIR/simplify-arm.rs:37:26: 37:51\n           }\n       }\n-      scope 6 (inlined <Result<u8, i32> as Try>::into_result) { // at $DIR/simplify-arm.rs:24:13: 24:15\n-          debug self => _4;                // in scope 6 at $DIR/simplify-arm.rs:24:13: 24:15\n+      scope 3 {\n+-         debug v => _10;                  // in scope 3 at $DIR/simplify-arm.rs:38:12: 38:13\n++         debug v => ((_0 as Ok).0: u8);   // in scope 3 at $DIR/simplify-arm.rs:38:12: 38:13\n+      }\n+      scope 4 (inlined into_result::<u8, i32>) { // at $DIR/simplify-arm.rs:36:19: 36:33\n+          debug r => _4;                   // in scope 4 at $DIR/simplify-arm.rs:36:19: 36:33\n       }\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/simplify-arm.rs:24:9: 24:10\n-          StorageLive(_3);                 // scope 0 at $DIR/simplify-arm.rs:24:13: 24:15\n-          StorageLive(_4);                 // scope 0 at $DIR/simplify-arm.rs:24:13: 24:14\n-          _4 = _1;                         // scope 0 at $DIR/simplify-arm.rs:24:13: 24:14\n-          _3 = move _4;                    // scope 6 at $DIR/simplify-arm.rs:24:13: 24:15\n-          StorageDead(_4);                 // scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n-          _5 = discriminant(_3);           // scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n-          switchInt(move _5) -> [0_isize: bb1, 1_isize: bb3, otherwise: bb2]; // scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n+          StorageLive(_2);                 // scope 0 at $DIR/simplify-arm.rs:36:9: 36:10\n+          StorageLive(_3);                 // scope 0 at $DIR/simplify-arm.rs:36:19: 36:33\n+          StorageLive(_4);                 // scope 0 at $DIR/simplify-arm.rs:36:31: 36:32\n+          _4 = _1;                         // scope 0 at $DIR/simplify-arm.rs:36:31: 36:32\n+          _3 = move _4;                    // scope 4 at $DIR/simplify-arm.rs:36:19: 36:33\n+          StorageDead(_4);                 // scope 0 at $DIR/simplify-arm.rs:36:32: 36:33\n+          _5 = discriminant(_3);           // scope 0 at $DIR/simplify-arm.rs:37:9: 37:15\n+          switchInt(move _5) -> [0_isize: bb1, 1_isize: bb3, otherwise: bb2]; // scope 0 at $DIR/simplify-arm.rs:37:9: 37:15\n       }\n   \n       bb1: {\n--         StorageLive(_10);                // scope 0 at $DIR/simplify-arm.rs:24:13: 24:15\n--         _10 = ((_3 as Ok).0: u8);        // scope 0 at $DIR/simplify-arm.rs:24:13: 24:15\n--         _2 = _10;                        // scope 5 at $DIR/simplify-arm.rs:24:13: 24:15\n--         StorageDead(_10);                // scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n-+         _0 = move _3;                    // scope 1 at $DIR/simplify-arm.rs:25:5: 25:10\n-          StorageDead(_3);                 // scope 0 at $DIR/simplify-arm.rs:24:15: 24:16\n--         StorageLive(_11);                // scope 1 at $DIR/simplify-arm.rs:25:8: 25:9\n--         _11 = _2;                        // scope 1 at $DIR/simplify-arm.rs:25:8: 25:9\n--         ((_0 as Ok).0: u8) = move _11;   // scope 1 at $DIR/simplify-arm.rs:25:5: 25:10\n--         discriminant(_0) = 0;            // scope 1 at $DIR/simplify-arm.rs:25:5: 25:10\n--         StorageDead(_11);                // scope 1 at $DIR/simplify-arm.rs:25:9: 25:10\n-          StorageDead(_2);                 // scope 0 at $DIR/simplify-arm.rs:26:1: 26:2\n-          goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:26:2: 26:2\n+-         StorageLive(_10);                // scope 0 at $DIR/simplify-arm.rs:38:12: 38:13\n+-         _10 = ((_3 as Ok).0: u8);        // scope 0 at $DIR/simplify-arm.rs:38:12: 38:13\n+-         _2 = _10;                        // scope 3 at $DIR/simplify-arm.rs:38:18: 38:19\n+-         StorageDead(_10);                // scope 0 at $DIR/simplify-arm.rs:38:18: 38:19\n++         _0 = move _3;                    // scope 1 at $DIR/simplify-arm.rs:40:5: 40:10\n+          StorageDead(_3);                 // scope 0 at $DIR/simplify-arm.rs:39:6: 39:7\n+-         StorageLive(_11);                // scope 1 at $DIR/simplify-arm.rs:40:8: 40:9\n+-         _11 = _2;                        // scope 1 at $DIR/simplify-arm.rs:40:8: 40:9\n+-         ((_0 as Ok).0: u8) = move _11;   // scope 1 at $DIR/simplify-arm.rs:40:5: 40:10\n+-         discriminant(_0) = 0;            // scope 1 at $DIR/simplify-arm.rs:40:5: 40:10\n+-         StorageDead(_11);                // scope 1 at $DIR/simplify-arm.rs:40:9: 40:10\n+          StorageDead(_2);                 // scope 0 at $DIR/simplify-arm.rs:41:1: 41:2\n+          goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:41:2: 41:2\n       }\n   \n       bb2: {\n-          unreachable;                     // scope 0 at $DIR/simplify-arm.rs:24:13: 24:15\n+          unreachable;                     // scope 0 at $DIR/simplify-arm.rs:36:19: 36:33\n       }\n   \n       bb3: {\n--         StorageLive(_6);                 // scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n--         _6 = ((_3 as Err).0: i32);       // scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n--         StorageLive(_8);                 // scope 3 at $DIR/simplify-arm.rs:24:14: 24:15\n--         StorageLive(_9);                 // scope 3 at $DIR/simplify-arm.rs:24:14: 24:15\n--         _9 = _6;                         // scope 3 at $DIR/simplify-arm.rs:24:14: 24:15\n--         _8 = move _9;                    // scope 7 at $DIR/simplify-arm.rs:24:14: 24:15\n--         StorageDead(_9);                 // scope 3 at $DIR/simplify-arm.rs:24:14: 24:15\n--         StorageLive(_12);                // scope 8 at $DIR/simplify-arm.rs:24:13: 24:15\n--         _12 = move _8;                   // scope 8 at $DIR/simplify-arm.rs:24:13: 24:15\n--         ((_0 as Err).0: i32) = move _12; // scope 8 at $DIR/simplify-arm.rs:24:13: 24:15\n--         discriminant(_0) = 1;            // scope 8 at $DIR/simplify-arm.rs:24:13: 24:15\n--         StorageDead(_12);                // scope 8 at $DIR/simplify-arm.rs:24:13: 24:15\n--         StorageDead(_8);                 // scope 3 at $DIR/simplify-arm.rs:24:14: 24:15\n--         StorageDead(_6);                 // scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n-+         _0 = move _3;                    // scope 8 at $DIR/simplify-arm.rs:24:13: 24:15\n-          StorageDead(_3);                 // scope 0 at $DIR/simplify-arm.rs:24:15: 24:16\n-          StorageDead(_2);                 // scope 0 at $DIR/simplify-arm.rs:26:1: 26:2\n-          goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:26:2: 26:2\n+-         StorageLive(_6);                 // scope 0 at $DIR/simplify-arm.rs:37:13: 37:14\n+-         _6 = ((_3 as Err).0: i32);       // scope 0 at $DIR/simplify-arm.rs:37:13: 37:14\n+-         StorageLive(_8);                 // scope 2 at $DIR/simplify-arm.rs:37:37: 37:50\n+-         StorageLive(_9);                 // scope 2 at $DIR/simplify-arm.rs:37:48: 37:49\n+-         _9 = _6;                         // scope 2 at $DIR/simplify-arm.rs:37:48: 37:49\n+-         _8 = move _9;                    // scope 5 at $DIR/simplify-arm.rs:37:37: 37:50\n+-         StorageDead(_9);                 // scope 2 at $DIR/simplify-arm.rs:37:49: 37:50\n+-         ((_0 as Err).0: i32) = move _8;  // scope 6 at $DIR/simplify-arm.rs:37:26: 37:51\n+-         discriminant(_0) = 1;            // scope 6 at $DIR/simplify-arm.rs:37:26: 37:51\n+-         StorageDead(_8);                 // scope 2 at $DIR/simplify-arm.rs:37:50: 37:51\n+-         StorageDead(_6);                 // scope 0 at $DIR/simplify-arm.rs:37:50: 37:51\n++         _0 = move _3;                    // scope 6 at $DIR/simplify-arm.rs:37:26: 37:51\n+          StorageDead(_3);                 // scope 0 at $DIR/simplify-arm.rs:39:6: 39:7\n+          StorageDead(_2);                 // scope 0 at $DIR/simplify-arm.rs:41:1: 41:2\n+          goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:41:2: 41:2\n       }\n   \n       bb4: {\n-          return;                          // scope 0 at $DIR/simplify-arm.rs:26:2: 26:2\n+          return;                          // scope 0 at $DIR/simplify-arm.rs:41:2: 41:2\n       }\n   }\n   "}, {"sha": "b6b7511b3f597aaf947ef78c8b876babaa1b40d4", "filename": "src/test/mir-opt/simplify_arm.id_try.SimplifyBranchSame.diff", "status": "modified", "additions": 43, "deletions": 48, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/47b99485a391e21caf3e0312969ed00ccbc6c167/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_try.SimplifyBranchSame.diff", "raw_url": "https://github.com/rust-lang/rust/raw/47b99485a391e21caf3e0312969ed00ccbc6c167/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_try.SimplifyBranchSame.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_try.SimplifyBranchSame.diff?ref=47b99485a391e21caf3e0312969ed00ccbc6c167", "patch": "@@ -2,75 +2,70 @@\n + // MIR for `id_try` after SimplifyBranchSame\n   \n   fn id_try(_1: Result<u8, i32>) -> Result<u8, i32> {\n-      debug r => _1;                       // in scope 0 at $DIR/simplify-arm.rs:23:11: 23:12\n-      let mut _0: std::result::Result<u8, i32>; // return place in scope 0 at $DIR/simplify-arm.rs:23:34: 23:49\n-      let _2: u8;                          // in scope 0 at $DIR/simplify-arm.rs:24:9: 24:10\n-      let mut _3: std::result::Result<u8, i32>; // in scope 0 at $DIR/simplify-arm.rs:24:13: 24:15\n-      let mut _4: std::result::Result<u8, i32>; // in scope 0 at $DIR/simplify-arm.rs:24:13: 24:14\n-      let mut _5: isize;                   // in scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n-      let _6: i32;                         // in scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n-      let mut _7: !;                       // in scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n-      let mut _8: i32;                     // in scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n-      let mut _9: i32;                     // in scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n-      let _10: u8;                         // in scope 0 at $DIR/simplify-arm.rs:24:13: 24:15\n-      let mut _11: u8;                     // in scope 0 at $DIR/simplify-arm.rs:25:8: 25:9\n+      debug r => _1;                       // in scope 0 at $DIR/simplify-arm.rs:35:11: 35:12\n+      let mut _0: std::result::Result<u8, i32>; // return place in scope 0 at $DIR/simplify-arm.rs:35:34: 35:49\n+      let _2: u8;                          // in scope 0 at $DIR/simplify-arm.rs:36:9: 36:10\n+      let mut _3: std::result::Result<u8, i32>; // in scope 0 at $DIR/simplify-arm.rs:36:19: 36:33\n+      let mut _4: std::result::Result<u8, i32>; // in scope 0 at $DIR/simplify-arm.rs:36:31: 36:32\n+      let mut _5: isize;                   // in scope 0 at $DIR/simplify-arm.rs:37:9: 37:15\n+      let _6: i32;                         // in scope 0 at $DIR/simplify-arm.rs:37:13: 37:14\n+      let mut _7: !;                       // in scope 0 at $DIR/simplify-arm.rs:37:19: 37:51\n+      let mut _8: i32;                     // in scope 0 at $DIR/simplify-arm.rs:37:37: 37:50\n+      let mut _9: i32;                     // in scope 0 at $DIR/simplify-arm.rs:37:48: 37:49\n+      let _10: u8;                         // in scope 0 at $DIR/simplify-arm.rs:38:12: 38:13\n+      let mut _11: u8;                     // in scope 0 at $DIR/simplify-arm.rs:40:8: 40:9\n       scope 1 {\n-          debug x => ((_0 as Ok).0: u8);   // in scope 1 at $DIR/simplify-arm.rs:24:9: 24:10\n+          debug x => ((_0 as Ok).0: u8);   // in scope 1 at $DIR/simplify-arm.rs:36:9: 36:10\n       }\n       scope 2 {\n-          debug err => ((_0 as Err).0: i32); // in scope 2 at $DIR/simplify-arm.rs:24:14: 24:15\n-          scope 3 {\n-              scope 7 (inlined <i32 as From<i32>>::from) { // at $DIR/simplify-arm.rs:24:14: 24:15\n-                  debug t => ((_0 as Err).0: i32); // in scope 7 at $DIR/simplify-arm.rs:24:14: 24:15\n-              }\n-              scope 8 (inlined <Result<u8, i32> as Try>::from_error) { // at $DIR/simplify-arm.rs:24:13: 24:15\n-                  debug v => ((_0 as Err).0: i32); // in scope 8 at $DIR/simplify-arm.rs:24:13: 24:15\n-                  let mut _12: i32;        // in scope 8 at $DIR/simplify-arm.rs:24:13: 24:15\n-              }\n+          debug e => ((_0 as Err).0: i32); // in scope 2 at $DIR/simplify-arm.rs:37:13: 37:14\n+          scope 5 (inlined <i32 as From<i32>>::from) { // at $DIR/simplify-arm.rs:37:37: 37:50\n+              debug t => ((_0 as Err).0: i32); // in scope 5 at $DIR/simplify-arm.rs:37:37: 37:50\n           }\n-      }\n-      scope 4 {\n-          debug val => ((_0 as Ok).0: u8); // in scope 4 at $DIR/simplify-arm.rs:24:13: 24:15\n-          scope 5 {\n+          scope 6 (inlined from_error::<u8, i32>) { // at $DIR/simplify-arm.rs:37:26: 37:51\n+              debug e => ((_0 as Err).0: i32); // in scope 6 at $DIR/simplify-arm.rs:37:26: 37:51\n           }\n       }\n-      scope 6 (inlined <Result<u8, i32> as Try>::into_result) { // at $DIR/simplify-arm.rs:24:13: 24:15\n-          debug self => _4;                // in scope 6 at $DIR/simplify-arm.rs:24:13: 24:15\n+      scope 3 {\n+          debug v => ((_0 as Ok).0: u8);   // in scope 3 at $DIR/simplify-arm.rs:38:12: 38:13\n+      }\n+      scope 4 (inlined into_result::<u8, i32>) { // at $DIR/simplify-arm.rs:36:19: 36:33\n+          debug r => _4;                   // in scope 4 at $DIR/simplify-arm.rs:36:19: 36:33\n       }\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/simplify-arm.rs:24:9: 24:10\n-          StorageLive(_3);                 // scope 0 at $DIR/simplify-arm.rs:24:13: 24:15\n-          StorageLive(_4);                 // scope 0 at $DIR/simplify-arm.rs:24:13: 24:14\n-          _4 = _1;                         // scope 0 at $DIR/simplify-arm.rs:24:13: 24:14\n-          _3 = move _4;                    // scope 6 at $DIR/simplify-arm.rs:24:13: 24:15\n-          StorageDead(_4);                 // scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n-          _5 = discriminant(_3);           // scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n--         switchInt(move _5) -> [0_isize: bb1, 1_isize: bb3, otherwise: bb2]; // scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n-+         goto -> bb1;                     // scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n+          StorageLive(_2);                 // scope 0 at $DIR/simplify-arm.rs:36:9: 36:10\n+          StorageLive(_3);                 // scope 0 at $DIR/simplify-arm.rs:36:19: 36:33\n+          StorageLive(_4);                 // scope 0 at $DIR/simplify-arm.rs:36:31: 36:32\n+          _4 = _1;                         // scope 0 at $DIR/simplify-arm.rs:36:31: 36:32\n+          _3 = move _4;                    // scope 4 at $DIR/simplify-arm.rs:36:19: 36:33\n+          StorageDead(_4);                 // scope 0 at $DIR/simplify-arm.rs:36:32: 36:33\n+          _5 = discriminant(_3);           // scope 0 at $DIR/simplify-arm.rs:37:9: 37:15\n+-         switchInt(move _5) -> [0_isize: bb1, 1_isize: bb3, otherwise: bb2]; // scope 0 at $DIR/simplify-arm.rs:37:9: 37:15\n++         goto -> bb1;                     // scope 0 at $DIR/simplify-arm.rs:37:9: 37:15\n       }\n   \n       bb1: {\n-          _0 = move _3;                    // scope 1 at $DIR/simplify-arm.rs:25:5: 25:10\n-          StorageDead(_3);                 // scope 0 at $DIR/simplify-arm.rs:24:15: 24:16\n-          StorageDead(_2);                 // scope 0 at $DIR/simplify-arm.rs:26:1: 26:2\n--         goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:26:2: 26:2\n-+         goto -> bb2;                     // scope 0 at $DIR/simplify-arm.rs:26:2: 26:2\n+          _0 = move _3;                    // scope 1 at $DIR/simplify-arm.rs:40:5: 40:10\n+          StorageDead(_3);                 // scope 0 at $DIR/simplify-arm.rs:39:6: 39:7\n+          StorageDead(_2);                 // scope 0 at $DIR/simplify-arm.rs:41:1: 41:2\n+-         goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:41:2: 41:2\n++         goto -> bb2;                     // scope 0 at $DIR/simplify-arm.rs:41:2: 41:2\n       }\n   \n       bb2: {\n--         unreachable;                     // scope 0 at $DIR/simplify-arm.rs:24:13: 24:15\n+-         unreachable;                     // scope 0 at $DIR/simplify-arm.rs:36:19: 36:33\n -     }\n - \n -     bb3: {\n--         _0 = move _3;                    // scope 8 at $DIR/simplify-arm.rs:24:13: 24:15\n--         StorageDead(_3);                 // scope 0 at $DIR/simplify-arm.rs:24:15: 24:16\n--         StorageDead(_2);                 // scope 0 at $DIR/simplify-arm.rs:26:1: 26:2\n--         goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:26:2: 26:2\n+-         _0 = move _3;                    // scope 6 at $DIR/simplify-arm.rs:37:26: 37:51\n+-         StorageDead(_3);                 // scope 0 at $DIR/simplify-arm.rs:39:6: 39:7\n+-         StorageDead(_2);                 // scope 0 at $DIR/simplify-arm.rs:41:1: 41:2\n+-         goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:41:2: 41:2\n -     }\n - \n -     bb4: {\n-          return;                          // scope 0 at $DIR/simplify-arm.rs:26:2: 26:2\n+          return;                          // scope 0 at $DIR/simplify-arm.rs:41:2: 41:2\n       }\n   }\n   "}, {"sha": "a95cb665a97f371f54cd023c087e6526178ef43a", "filename": "src/test/mir-opt/simplify_try.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/47b99485a391e21caf3e0312969ed00ccbc6c167/src%2Ftest%2Fmir-opt%2Fsimplify_try.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47b99485a391e21caf3e0312969ed00ccbc6c167/src%2Ftest%2Fmir-opt%2Fsimplify_try.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try.rs?ref=47b99485a391e21caf3e0312969ed00ccbc6c167", "patch": "@@ -4,8 +4,24 @@\n // EMIT_MIR simplify_try.try_identity.SimplifyLocals.after.mir\n // EMIT_MIR simplify_try.try_identity.DestinationPropagation.diff\n \n+\n+fn into_result<T, E>(r: Result<T, E>) -> Result<T, E> {\n+    r\n+}\n+\n+fn from_error<T, E>(e: E) -> Result<T, E> {\n+    Err(e)\n+}\n+\n+// This was written to the `?` from `try_trait`,\n+// but `try_trait_v2` uses a different structure,\n+// so the relevant desugar is copied inline\n+// in order to keep the test testing the same thing.\n fn try_identity(x: Result<u32, i32>) -> Result<u32, i32> {\n-    let y = x?;\n+    let y = match into_result(x) {\n+        Err(e) => return from_error(From::from(e)),\n+        Ok(v) => v,\n+    };\n     Ok(y)\n }\n "}, {"sha": "e09b8cb39bd510bb06c97949d336ce2ac98fe508", "filename": "src/test/mir-opt/simplify_try.try_identity.DestinationPropagation.diff", "status": "modified", "additions": 44, "deletions": 49, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/47b99485a391e21caf3e0312969ed00ccbc6c167/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.DestinationPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/47b99485a391e21caf3e0312969ed00ccbc6c167/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.DestinationPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.DestinationPropagation.diff?ref=47b99485a391e21caf3e0312969ed00ccbc6c167", "patch": "@@ -2,67 +2,62 @@\n + // MIR for `try_identity` after DestinationPropagation\n   \n   fn try_identity(_1: Result<u32, i32>) -> Result<u32, i32> {\n-      debug x => _1;                       // in scope 0 at $DIR/simplify_try.rs:7:17: 7:18\n-      let mut _0: std::result::Result<u32, i32>; // return place in scope 0 at $DIR/simplify_try.rs:7:41: 7:57\n-      let _2: u32;                         // in scope 0 at $DIR/simplify_try.rs:8:9: 8:10\n-      let mut _3: std::result::Result<u32, i32>; // in scope 0 at $DIR/simplify_try.rs:8:13: 8:15\n-      let mut _4: std::result::Result<u32, i32>; // in scope 0 at $DIR/simplify_try.rs:8:13: 8:14\n-      let mut _5: isize;                   // in scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n-      let _6: i32;                         // in scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n-      let mut _7: !;                       // in scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n-      let mut _8: i32;                     // in scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n-      let mut _9: i32;                     // in scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n-      let _10: u32;                        // in scope 0 at $DIR/simplify_try.rs:8:13: 8:15\n-      let mut _11: u32;                    // in scope 0 at $DIR/simplify_try.rs:9:8: 9:9\n+      debug x => _1;                       // in scope 0 at $DIR/simplify_try.rs:20:17: 20:18\n+      let mut _0: std::result::Result<u32, i32>; // return place in scope 0 at $DIR/simplify_try.rs:20:41: 20:57\n+      let _2: u32;                         // in scope 0 at $DIR/simplify_try.rs:21:9: 21:10\n+      let mut _3: std::result::Result<u32, i32>; // in scope 0 at $DIR/simplify_try.rs:21:19: 21:33\n+      let mut _4: std::result::Result<u32, i32>; // in scope 0 at $DIR/simplify_try.rs:21:31: 21:32\n+      let mut _5: isize;                   // in scope 0 at $DIR/simplify_try.rs:22:9: 22:15\n+      let _6: i32;                         // in scope 0 at $DIR/simplify_try.rs:22:13: 22:14\n+      let mut _7: !;                       // in scope 0 at $DIR/simplify_try.rs:22:19: 22:51\n+      let mut _8: i32;                     // in scope 0 at $DIR/simplify_try.rs:22:37: 22:50\n+      let mut _9: i32;                     // in scope 0 at $DIR/simplify_try.rs:22:48: 22:49\n+      let _10: u32;                        // in scope 0 at $DIR/simplify_try.rs:23:12: 23:13\n+      let mut _11: u32;                    // in scope 0 at $DIR/simplify_try.rs:25:8: 25:9\n       scope 1 {\n-          debug y => ((_0 as Ok).0: u32);  // in scope 1 at $DIR/simplify_try.rs:8:9: 8:10\n+          debug y => ((_0 as Ok).0: u32);  // in scope 1 at $DIR/simplify_try.rs:21:9: 21:10\n       }\n       scope 2 {\n-          debug err => ((_0 as Err).0: i32); // in scope 2 at $DIR/simplify_try.rs:8:14: 8:15\n-          scope 3 {\n-              scope 7 (inlined <i32 as From<i32>>::from) { // at $DIR/simplify_try.rs:8:14: 8:15\n-                  debug t => ((_0 as Err).0: i32); // in scope 7 at $DIR/simplify_try.rs:8:14: 8:15\n-              }\n-              scope 8 (inlined <Result<u32, i32> as Try>::from_error) { // at $DIR/simplify_try.rs:8:13: 8:15\n-                  debug v => ((_0 as Err).0: i32); // in scope 8 at $DIR/simplify_try.rs:8:13: 8:15\n-                  let mut _12: i32;        // in scope 8 at $DIR/simplify_try.rs:8:13: 8:15\n-              }\n+          debug e => ((_0 as Err).0: i32); // in scope 2 at $DIR/simplify_try.rs:22:13: 22:14\n+          scope 5 (inlined <i32 as From<i32>>::from) { // at $DIR/simplify_try.rs:22:37: 22:50\n+              debug t => ((_0 as Err).0: i32); // in scope 5 at $DIR/simplify_try.rs:22:37: 22:50\n           }\n-      }\n-      scope 4 {\n-          debug val => ((_0 as Ok).0: u32); // in scope 4 at $DIR/simplify_try.rs:8:13: 8:15\n-          scope 5 {\n+          scope 6 (inlined from_error::<u32, i32>) { // at $DIR/simplify_try.rs:22:26: 22:51\n+              debug e => ((_0 as Err).0: i32); // in scope 6 at $DIR/simplify_try.rs:22:26: 22:51\n           }\n       }\n-      scope 6 (inlined <Result<u32, i32> as Try>::into_result) { // at $DIR/simplify_try.rs:8:13: 8:15\n--         debug self => _4;                // in scope 6 at $DIR/simplify_try.rs:8:13: 8:15\n-+         debug self => _0;                // in scope 6 at $DIR/simplify_try.rs:8:13: 8:15\n+      scope 3 {\n+          debug v => ((_0 as Ok).0: u32);  // in scope 3 at $DIR/simplify_try.rs:23:12: 23:13\n+      }\n+      scope 4 (inlined into_result::<u32, i32>) { // at $DIR/simplify_try.rs:21:19: 21:33\n+-         debug r => _4;                   // in scope 4 at $DIR/simplify_try.rs:21:19: 21:33\n++         debug r => _0;                   // in scope 4 at $DIR/simplify_try.rs:21:19: 21:33\n       }\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/simplify_try.rs:8:9: 8:10\n--         StorageLive(_3);                 // scope 0 at $DIR/simplify_try.rs:8:13: 8:15\n--         StorageLive(_4);                 // scope 0 at $DIR/simplify_try.rs:8:13: 8:14\n--         _4 = _1;                         // scope 0 at $DIR/simplify_try.rs:8:13: 8:14\n--         _3 = move _4;                    // scope 6 at $DIR/simplify_try.rs:8:13: 8:15\n--         StorageDead(_4);                 // scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n--         _5 = discriminant(_3);           // scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n-+         nop;                             // scope 0 at $DIR/simplify_try.rs:8:13: 8:15\n-+         nop;                             // scope 0 at $DIR/simplify_try.rs:8:13: 8:14\n-+         _0 = _1;                         // scope 0 at $DIR/simplify_try.rs:8:13: 8:14\n-+         nop;                             // scope 6 at $DIR/simplify_try.rs:8:13: 8:15\n-+         nop;                             // scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n-+         _5 = discriminant(_0);           // scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n-          goto -> bb1;                     // scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n+          StorageLive(_2);                 // scope 0 at $DIR/simplify_try.rs:21:9: 21:10\n+-         StorageLive(_3);                 // scope 0 at $DIR/simplify_try.rs:21:19: 21:33\n+-         StorageLive(_4);                 // scope 0 at $DIR/simplify_try.rs:21:31: 21:32\n+-         _4 = _1;                         // scope 0 at $DIR/simplify_try.rs:21:31: 21:32\n+-         _3 = move _4;                    // scope 4 at $DIR/simplify_try.rs:21:19: 21:33\n+-         StorageDead(_4);                 // scope 0 at $DIR/simplify_try.rs:21:32: 21:33\n+-         _5 = discriminant(_3);           // scope 0 at $DIR/simplify_try.rs:22:9: 22:15\n++         nop;                             // scope 0 at $DIR/simplify_try.rs:21:19: 21:33\n++         nop;                             // scope 0 at $DIR/simplify_try.rs:21:31: 21:32\n++         _0 = _1;                         // scope 0 at $DIR/simplify_try.rs:21:31: 21:32\n++         nop;                             // scope 4 at $DIR/simplify_try.rs:21:19: 21:33\n++         nop;                             // scope 0 at $DIR/simplify_try.rs:21:32: 21:33\n++         _5 = discriminant(_0);           // scope 0 at $DIR/simplify_try.rs:22:9: 22:15\n+          goto -> bb1;                     // scope 0 at $DIR/simplify_try.rs:22:9: 22:15\n       }\n   \n       bb1: {\n--         _0 = move _3;                    // scope 1 at $DIR/simplify_try.rs:9:5: 9:10\n--         StorageDead(_3);                 // scope 0 at $DIR/simplify_try.rs:8:15: 8:16\n-+         nop;                             // scope 1 at $DIR/simplify_try.rs:9:5: 9:10\n-+         nop;                             // scope 0 at $DIR/simplify_try.rs:8:15: 8:16\n-          StorageDead(_2);                 // scope 0 at $DIR/simplify_try.rs:10:1: 10:2\n-          return;                          // scope 0 at $DIR/simplify_try.rs:10:2: 10:2\n+-         _0 = move _3;                    // scope 1 at $DIR/simplify_try.rs:25:5: 25:10\n+-         StorageDead(_3);                 // scope 0 at $DIR/simplify_try.rs:24:6: 24:7\n++         nop;                             // scope 1 at $DIR/simplify_try.rs:25:5: 25:10\n++         nop;                             // scope 0 at $DIR/simplify_try.rs:24:6: 24:7\n+          StorageDead(_2);                 // scope 0 at $DIR/simplify_try.rs:26:1: 26:2\n+          return;                          // scope 0 at $DIR/simplify_try.rs:26:2: 26:2\n       }\n   }\n   "}, {"sha": "488ad33f80a2dc2ae2206179643924cd9d3760a4", "filename": "src/test/mir-opt/simplify_try.try_identity.SimplifyArmIdentity.diff", "status": "modified", "additions": 64, "deletions": 72, "changes": 136, "blob_url": "https://github.com/rust-lang/rust/blob/47b99485a391e21caf3e0312969ed00ccbc6c167/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyArmIdentity.diff", "raw_url": "https://github.com/rust-lang/rust/raw/47b99485a391e21caf3e0312969ed00ccbc6c167/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyArmIdentity.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyArmIdentity.diff?ref=47b99485a391e21caf3e0312969ed00ccbc6c167", "patch": "@@ -2,93 +2,85 @@\n + // MIR for `try_identity` after SimplifyArmIdentity\n   \n   fn try_identity(_1: Result<u32, i32>) -> Result<u32, i32> {\n-      debug x => _1;                       // in scope 0 at $DIR/simplify_try.rs:7:17: 7:18\n-      let mut _0: std::result::Result<u32, i32>; // return place in scope 0 at $DIR/simplify_try.rs:7:41: 7:57\n-      let _2: u32;                         // in scope 0 at $DIR/simplify_try.rs:8:9: 8:10\n-      let mut _3: std::result::Result<u32, i32>; // in scope 0 at $DIR/simplify_try.rs:8:13: 8:15\n-      let mut _4: std::result::Result<u32, i32>; // in scope 0 at $DIR/simplify_try.rs:8:13: 8:14\n-      let mut _5: isize;                   // in scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n-      let _6: i32;                         // in scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n-      let mut _7: !;                       // in scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n-      let mut _8: i32;                     // in scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n-      let mut _9: i32;                     // in scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n-      let _10: u32;                        // in scope 0 at $DIR/simplify_try.rs:8:13: 8:15\n-      let mut _11: u32;                    // in scope 0 at $DIR/simplify_try.rs:9:8: 9:9\n+      debug x => _1;                       // in scope 0 at $DIR/simplify_try.rs:20:17: 20:18\n+      let mut _0: std::result::Result<u32, i32>; // return place in scope 0 at $DIR/simplify_try.rs:20:41: 20:57\n+      let _2: u32;                         // in scope 0 at $DIR/simplify_try.rs:21:9: 21:10\n+      let mut _3: std::result::Result<u32, i32>; // in scope 0 at $DIR/simplify_try.rs:21:19: 21:33\n+      let mut _4: std::result::Result<u32, i32>; // in scope 0 at $DIR/simplify_try.rs:21:31: 21:32\n+      let mut _5: isize;                   // in scope 0 at $DIR/simplify_try.rs:22:9: 22:15\n+      let _6: i32;                         // in scope 0 at $DIR/simplify_try.rs:22:13: 22:14\n+      let mut _7: !;                       // in scope 0 at $DIR/simplify_try.rs:22:19: 22:51\n+      let mut _8: i32;                     // in scope 0 at $DIR/simplify_try.rs:22:37: 22:50\n+      let mut _9: i32;                     // in scope 0 at $DIR/simplify_try.rs:22:48: 22:49\n+      let _10: u32;                        // in scope 0 at $DIR/simplify_try.rs:23:12: 23:13\n+      let mut _11: u32;                    // in scope 0 at $DIR/simplify_try.rs:25:8: 25:9\n       scope 1 {\n--         debug y => _2;                   // in scope 1 at $DIR/simplify_try.rs:8:9: 8:10\n-+         debug y => ((_0 as Ok).0: u32);  // in scope 1 at $DIR/simplify_try.rs:8:9: 8:10\n+-         debug y => _2;                   // in scope 1 at $DIR/simplify_try.rs:21:9: 21:10\n++         debug y => ((_0 as Ok).0: u32);  // in scope 1 at $DIR/simplify_try.rs:21:9: 21:10\n       }\n       scope 2 {\n--         debug err => _6;                 // in scope 2 at $DIR/simplify_try.rs:8:14: 8:15\n-+         debug err => ((_0 as Err).0: i32); // in scope 2 at $DIR/simplify_try.rs:8:14: 8:15\n-          scope 3 {\n-              scope 7 (inlined <i32 as From<i32>>::from) { // at $DIR/simplify_try.rs:8:14: 8:15\n--                 debug t => _9;           // in scope 7 at $DIR/simplify_try.rs:8:14: 8:15\n-+                 debug t => ((_0 as Err).0: i32); // in scope 7 at $DIR/simplify_try.rs:8:14: 8:15\n-              }\n-              scope 8 (inlined <Result<u32, i32> as Try>::from_error) { // at $DIR/simplify_try.rs:8:13: 8:15\n--                 debug v => _8;           // in scope 8 at $DIR/simplify_try.rs:8:13: 8:15\n-+                 debug v => ((_0 as Err).0: i32); // in scope 8 at $DIR/simplify_try.rs:8:13: 8:15\n-                  let mut _12: i32;        // in scope 8 at $DIR/simplify_try.rs:8:13: 8:15\n-              }\n+-         debug e => _6;                   // in scope 2 at $DIR/simplify_try.rs:22:13: 22:14\n++         debug e => ((_0 as Err).0: i32); // in scope 2 at $DIR/simplify_try.rs:22:13: 22:14\n+          scope 5 (inlined <i32 as From<i32>>::from) { // at $DIR/simplify_try.rs:22:37: 22:50\n+-             debug t => _9;               // in scope 5 at $DIR/simplify_try.rs:22:37: 22:50\n++             debug t => ((_0 as Err).0: i32); // in scope 5 at $DIR/simplify_try.rs:22:37: 22:50\n           }\n-      }\n-      scope 4 {\n--         debug val => _10;                // in scope 4 at $DIR/simplify_try.rs:8:13: 8:15\n-+         debug val => ((_0 as Ok).0: u32); // in scope 4 at $DIR/simplify_try.rs:8:13: 8:15\n-          scope 5 {\n+          scope 6 (inlined from_error::<u32, i32>) { // at $DIR/simplify_try.rs:22:26: 22:51\n+-             debug e => _8;               // in scope 6 at $DIR/simplify_try.rs:22:26: 22:51\n++             debug e => ((_0 as Err).0: i32); // in scope 6 at $DIR/simplify_try.rs:22:26: 22:51\n           }\n       }\n-      scope 6 (inlined <Result<u32, i32> as Try>::into_result) { // at $DIR/simplify_try.rs:8:13: 8:15\n-          debug self => _4;                // in scope 6 at $DIR/simplify_try.rs:8:13: 8:15\n+      scope 3 {\n+-         debug v => _10;                  // in scope 3 at $DIR/simplify_try.rs:23:12: 23:13\n++         debug v => ((_0 as Ok).0: u32);  // in scope 3 at $DIR/simplify_try.rs:23:12: 23:13\n+      }\n+      scope 4 (inlined into_result::<u32, i32>) { // at $DIR/simplify_try.rs:21:19: 21:33\n+          debug r => _4;                   // in scope 4 at $DIR/simplify_try.rs:21:19: 21:33\n       }\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/simplify_try.rs:8:9: 8:10\n-          StorageLive(_3);                 // scope 0 at $DIR/simplify_try.rs:8:13: 8:15\n-          StorageLive(_4);                 // scope 0 at $DIR/simplify_try.rs:8:13: 8:14\n-          _4 = _1;                         // scope 0 at $DIR/simplify_try.rs:8:13: 8:14\n-          _3 = move _4;                    // scope 6 at $DIR/simplify_try.rs:8:13: 8:15\n-          StorageDead(_4);                 // scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n-          _5 = discriminant(_3);           // scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n-          switchInt(move _5) -> [0_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n+          StorageLive(_2);                 // scope 0 at $DIR/simplify_try.rs:21:9: 21:10\n+          StorageLive(_3);                 // scope 0 at $DIR/simplify_try.rs:21:19: 21:33\n+          StorageLive(_4);                 // scope 0 at $DIR/simplify_try.rs:21:31: 21:32\n+          _4 = _1;                         // scope 0 at $DIR/simplify_try.rs:21:31: 21:32\n+          _3 = move _4;                    // scope 4 at $DIR/simplify_try.rs:21:19: 21:33\n+          StorageDead(_4);                 // scope 0 at $DIR/simplify_try.rs:21:32: 21:33\n+          _5 = discriminant(_3);           // scope 0 at $DIR/simplify_try.rs:22:9: 22:15\n+          switchInt(move _5) -> [0_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/simplify_try.rs:22:9: 22:15\n       }\n   \n       bb1: {\n--         StorageLive(_10);                // scope 0 at $DIR/simplify_try.rs:8:13: 8:15\n--         _10 = ((_3 as Ok).0: u32);       // scope 0 at $DIR/simplify_try.rs:8:13: 8:15\n--         _2 = _10;                        // scope 5 at $DIR/simplify_try.rs:8:13: 8:15\n--         StorageDead(_10);                // scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n-+         _0 = move _3;                    // scope 1 at $DIR/simplify_try.rs:9:5: 9:10\n-          StorageDead(_3);                 // scope 0 at $DIR/simplify_try.rs:8:15: 8:16\n--         StorageLive(_11);                // scope 1 at $DIR/simplify_try.rs:9:8: 9:9\n--         _11 = _2;                        // scope 1 at $DIR/simplify_try.rs:9:8: 9:9\n--         ((_0 as Ok).0: u32) = move _11;  // scope 1 at $DIR/simplify_try.rs:9:5: 9:10\n--         discriminant(_0) = 0;            // scope 1 at $DIR/simplify_try.rs:9:5: 9:10\n--         StorageDead(_11);                // scope 1 at $DIR/simplify_try.rs:9:9: 9:10\n-          StorageDead(_2);                 // scope 0 at $DIR/simplify_try.rs:10:1: 10:2\n-          return;                          // scope 0 at $DIR/simplify_try.rs:10:2: 10:2\n+-         StorageLive(_10);                // scope 0 at $DIR/simplify_try.rs:23:12: 23:13\n+-         _10 = ((_3 as Ok).0: u32);       // scope 0 at $DIR/simplify_try.rs:23:12: 23:13\n+-         _2 = _10;                        // scope 3 at $DIR/simplify_try.rs:23:18: 23:19\n+-         StorageDead(_10);                // scope 0 at $DIR/simplify_try.rs:23:18: 23:19\n++         _0 = move _3;                    // scope 1 at $DIR/simplify_try.rs:25:5: 25:10\n+          StorageDead(_3);                 // scope 0 at $DIR/simplify_try.rs:24:6: 24:7\n+-         StorageLive(_11);                // scope 1 at $DIR/simplify_try.rs:25:8: 25:9\n+-         _11 = _2;                        // scope 1 at $DIR/simplify_try.rs:25:8: 25:9\n+-         ((_0 as Ok).0: u32) = move _11;  // scope 1 at $DIR/simplify_try.rs:25:5: 25:10\n+-         discriminant(_0) = 0;            // scope 1 at $DIR/simplify_try.rs:25:5: 25:10\n+-         StorageDead(_11);                // scope 1 at $DIR/simplify_try.rs:25:9: 25:10\n+          StorageDead(_2);                 // scope 0 at $DIR/simplify_try.rs:26:1: 26:2\n+          return;                          // scope 0 at $DIR/simplify_try.rs:26:2: 26:2\n       }\n   \n       bb2: {\n--         StorageLive(_6);                 // scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n--         _6 = ((_3 as Err).0: i32);       // scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n--         StorageLive(_8);                 // scope 3 at $DIR/simplify_try.rs:8:14: 8:15\n--         StorageLive(_9);                 // scope 3 at $DIR/simplify_try.rs:8:14: 8:15\n--         _9 = _6;                         // scope 3 at $DIR/simplify_try.rs:8:14: 8:15\n--         _8 = move _9;                    // scope 7 at $DIR/simplify_try.rs:8:14: 8:15\n--         StorageDead(_9);                 // scope 3 at $DIR/simplify_try.rs:8:14: 8:15\n--         StorageLive(_12);                // scope 8 at $DIR/simplify_try.rs:8:13: 8:15\n--         _12 = move _8;                   // scope 8 at $DIR/simplify_try.rs:8:13: 8:15\n--         ((_0 as Err).0: i32) = move _12; // scope 8 at $DIR/simplify_try.rs:8:13: 8:15\n--         discriminant(_0) = 1;            // scope 8 at $DIR/simplify_try.rs:8:13: 8:15\n--         StorageDead(_12);                // scope 8 at $DIR/simplify_try.rs:8:13: 8:15\n--         StorageDead(_8);                 // scope 3 at $DIR/simplify_try.rs:8:14: 8:15\n--         StorageDead(_6);                 // scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n-+         _0 = move _3;                    // scope 8 at $DIR/simplify_try.rs:8:13: 8:15\n-          StorageDead(_3);                 // scope 0 at $DIR/simplify_try.rs:8:15: 8:16\n-          StorageDead(_2);                 // scope 0 at $DIR/simplify_try.rs:10:1: 10:2\n-          return;                          // scope 0 at $DIR/simplify_try.rs:10:2: 10:2\n+-         StorageLive(_6);                 // scope 0 at $DIR/simplify_try.rs:22:13: 22:14\n+-         _6 = ((_3 as Err).0: i32);       // scope 0 at $DIR/simplify_try.rs:22:13: 22:14\n+-         StorageLive(_8);                 // scope 2 at $DIR/simplify_try.rs:22:37: 22:50\n+-         StorageLive(_9);                 // scope 2 at $DIR/simplify_try.rs:22:48: 22:49\n+-         _9 = _6;                         // scope 2 at $DIR/simplify_try.rs:22:48: 22:49\n+-         _8 = move _9;                    // scope 5 at $DIR/simplify_try.rs:22:37: 22:50\n+-         StorageDead(_9);                 // scope 2 at $DIR/simplify_try.rs:22:49: 22:50\n+-         ((_0 as Err).0: i32) = move _8;  // scope 6 at $DIR/simplify_try.rs:22:26: 22:51\n+-         discriminant(_0) = 1;            // scope 6 at $DIR/simplify_try.rs:22:26: 22:51\n+-         StorageDead(_8);                 // scope 2 at $DIR/simplify_try.rs:22:50: 22:51\n+-         StorageDead(_6);                 // scope 0 at $DIR/simplify_try.rs:22:50: 22:51\n++         _0 = move _3;                    // scope 6 at $DIR/simplify_try.rs:22:26: 22:51\n+          StorageDead(_3);                 // scope 0 at $DIR/simplify_try.rs:24:6: 24:7\n+          StorageDead(_2);                 // scope 0 at $DIR/simplify_try.rs:26:1: 26:2\n+          return;                          // scope 0 at $DIR/simplify_try.rs:26:2: 26:2\n       }\n   }\n   "}, {"sha": "5d829f859e9d9afafe5a9f959f349f59fb7a7fa8", "filename": "src/test/mir-opt/simplify_try.try_identity.SimplifyBranchSame.after.mir", "status": "modified", "additions": 35, "deletions": 40, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/47b99485a391e21caf3e0312969ed00ccbc6c167/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyBranchSame.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/47b99485a391e21caf3e0312969ed00ccbc6c167/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyBranchSame.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyBranchSame.after.mir?ref=47b99485a391e21caf3e0312969ed00ccbc6c167", "patch": "@@ -1,57 +1,52 @@\n // MIR for `try_identity` after SimplifyBranchSame\n \n fn try_identity(_1: Result<u32, i32>) -> Result<u32, i32> {\n-    debug x => _1;                       // in scope 0 at $DIR/simplify_try.rs:7:17: 7:18\n-    let mut _0: std::result::Result<u32, i32>; // return place in scope 0 at $DIR/simplify_try.rs:7:41: 7:57\n-    let _2: u32;                         // in scope 0 at $DIR/simplify_try.rs:8:9: 8:10\n-    let mut _3: std::result::Result<u32, i32>; // in scope 0 at $DIR/simplify_try.rs:8:13: 8:15\n-    let mut _4: std::result::Result<u32, i32>; // in scope 0 at $DIR/simplify_try.rs:8:13: 8:14\n-    let mut _5: isize;                   // in scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n-    let _6: i32;                         // in scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n-    let mut _7: !;                       // in scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n-    let mut _8: i32;                     // in scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n-    let mut _9: i32;                     // in scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n-    let _10: u32;                        // in scope 0 at $DIR/simplify_try.rs:8:13: 8:15\n-    let mut _11: u32;                    // in scope 0 at $DIR/simplify_try.rs:9:8: 9:9\n+    debug x => _1;                       // in scope 0 at $DIR/simplify_try.rs:20:17: 20:18\n+    let mut _0: std::result::Result<u32, i32>; // return place in scope 0 at $DIR/simplify_try.rs:20:41: 20:57\n+    let _2: u32;                         // in scope 0 at $DIR/simplify_try.rs:21:9: 21:10\n+    let mut _3: std::result::Result<u32, i32>; // in scope 0 at $DIR/simplify_try.rs:21:19: 21:33\n+    let mut _4: std::result::Result<u32, i32>; // in scope 0 at $DIR/simplify_try.rs:21:31: 21:32\n+    let mut _5: isize;                   // in scope 0 at $DIR/simplify_try.rs:22:9: 22:15\n+    let _6: i32;                         // in scope 0 at $DIR/simplify_try.rs:22:13: 22:14\n+    let mut _7: !;                       // in scope 0 at $DIR/simplify_try.rs:22:19: 22:51\n+    let mut _8: i32;                     // in scope 0 at $DIR/simplify_try.rs:22:37: 22:50\n+    let mut _9: i32;                     // in scope 0 at $DIR/simplify_try.rs:22:48: 22:49\n+    let _10: u32;                        // in scope 0 at $DIR/simplify_try.rs:23:12: 23:13\n+    let mut _11: u32;                    // in scope 0 at $DIR/simplify_try.rs:25:8: 25:9\n     scope 1 {\n-        debug y => ((_0 as Ok).0: u32);  // in scope 1 at $DIR/simplify_try.rs:8:9: 8:10\n+        debug y => ((_0 as Ok).0: u32);  // in scope 1 at $DIR/simplify_try.rs:21:9: 21:10\n     }\n     scope 2 {\n-        debug err => ((_0 as Err).0: i32); // in scope 2 at $DIR/simplify_try.rs:8:14: 8:15\n-        scope 3 {\n-            scope 7 (inlined <i32 as From<i32>>::from) { // at $DIR/simplify_try.rs:8:14: 8:15\n-                debug t => ((_0 as Err).0: i32); // in scope 7 at $DIR/simplify_try.rs:8:14: 8:15\n-            }\n-            scope 8 (inlined <Result<u32, i32> as Try>::from_error) { // at $DIR/simplify_try.rs:8:13: 8:15\n-                debug v => ((_0 as Err).0: i32); // in scope 8 at $DIR/simplify_try.rs:8:13: 8:15\n-                let mut _12: i32;        // in scope 8 at $DIR/simplify_try.rs:8:13: 8:15\n-            }\n+        debug e => ((_0 as Err).0: i32); // in scope 2 at $DIR/simplify_try.rs:22:13: 22:14\n+        scope 5 (inlined <i32 as From<i32>>::from) { // at $DIR/simplify_try.rs:22:37: 22:50\n+            debug t => ((_0 as Err).0: i32); // in scope 5 at $DIR/simplify_try.rs:22:37: 22:50\n         }\n-    }\n-    scope 4 {\n-        debug val => ((_0 as Ok).0: u32); // in scope 4 at $DIR/simplify_try.rs:8:13: 8:15\n-        scope 5 {\n+        scope 6 (inlined from_error::<u32, i32>) { // at $DIR/simplify_try.rs:22:26: 22:51\n+            debug e => ((_0 as Err).0: i32); // in scope 6 at $DIR/simplify_try.rs:22:26: 22:51\n         }\n     }\n-    scope 6 (inlined <Result<u32, i32> as Try>::into_result) { // at $DIR/simplify_try.rs:8:13: 8:15\n-        debug self => _4;                // in scope 6 at $DIR/simplify_try.rs:8:13: 8:15\n+    scope 3 {\n+        debug v => ((_0 as Ok).0: u32);  // in scope 3 at $DIR/simplify_try.rs:23:12: 23:13\n+    }\n+    scope 4 (inlined into_result::<u32, i32>) { // at $DIR/simplify_try.rs:21:19: 21:33\n+        debug r => _4;                   // in scope 4 at $DIR/simplify_try.rs:21:19: 21:33\n     }\n \n     bb0: {\n-        StorageLive(_2);                 // scope 0 at $DIR/simplify_try.rs:8:9: 8:10\n-        StorageLive(_3);                 // scope 0 at $DIR/simplify_try.rs:8:13: 8:15\n-        StorageLive(_4);                 // scope 0 at $DIR/simplify_try.rs:8:13: 8:14\n-        _4 = _1;                         // scope 0 at $DIR/simplify_try.rs:8:13: 8:14\n-        _3 = move _4;                    // scope 6 at $DIR/simplify_try.rs:8:13: 8:15\n-        StorageDead(_4);                 // scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n-        _5 = discriminant(_3);           // scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n-        goto -> bb1;                     // scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n+        StorageLive(_2);                 // scope 0 at $DIR/simplify_try.rs:21:9: 21:10\n+        StorageLive(_3);                 // scope 0 at $DIR/simplify_try.rs:21:19: 21:33\n+        StorageLive(_4);                 // scope 0 at $DIR/simplify_try.rs:21:31: 21:32\n+        _4 = _1;                         // scope 0 at $DIR/simplify_try.rs:21:31: 21:32\n+        _3 = move _4;                    // scope 4 at $DIR/simplify_try.rs:21:19: 21:33\n+        StorageDead(_4);                 // scope 0 at $DIR/simplify_try.rs:21:32: 21:33\n+        _5 = discriminant(_3);           // scope 0 at $DIR/simplify_try.rs:22:9: 22:15\n+        goto -> bb1;                     // scope 0 at $DIR/simplify_try.rs:22:9: 22:15\n     }\n \n     bb1: {\n-        _0 = move _3;                    // scope 1 at $DIR/simplify_try.rs:9:5: 9:10\n-        StorageDead(_3);                 // scope 0 at $DIR/simplify_try.rs:8:15: 8:16\n-        StorageDead(_2);                 // scope 0 at $DIR/simplify_try.rs:10:1: 10:2\n-        return;                          // scope 0 at $DIR/simplify_try.rs:10:2: 10:2\n+        _0 = move _3;                    // scope 1 at $DIR/simplify_try.rs:25:5: 25:10\n+        StorageDead(_3);                 // scope 0 at $DIR/simplify_try.rs:24:6: 24:7\n+        StorageDead(_2);                 // scope 0 at $DIR/simplify_try.rs:26:1: 26:2\n+        return;                          // scope 0 at $DIR/simplify_try.rs:26:2: 26:2\n     }\n }"}, {"sha": "1b5232422b6c3fa6cac072bb5480c2472f796a5c", "filename": "src/test/mir-opt/simplify_try.try_identity.SimplifyLocals.after.mir", "status": "modified", "additions": 15, "deletions": 19, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/47b99485a391e21caf3e0312969ed00ccbc6c167/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyLocals.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/47b99485a391e21caf3e0312969ed00ccbc6c167/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyLocals.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyLocals.after.mir?ref=47b99485a391e21caf3e0312969ed00ccbc6c167", "patch": "@@ -1,33 +1,29 @@\n // MIR for `try_identity` after SimplifyLocals\n \n fn try_identity(_1: Result<u32, i32>) -> Result<u32, i32> {\n-    debug x => _1;                       // in scope 0 at $DIR/simplify_try.rs:7:17: 7:18\n-    let mut _0: std::result::Result<u32, i32>; // return place in scope 0 at $DIR/simplify_try.rs:7:41: 7:57\n+    debug x => _1;                       // in scope 0 at $DIR/simplify_try.rs:20:17: 20:18\n+    let mut _0: std::result::Result<u32, i32>; // return place in scope 0 at $DIR/simplify_try.rs:20:41: 20:57\n     scope 1 {\n-        debug y => ((_0 as Ok).0: u32);  // in scope 1 at $DIR/simplify_try.rs:8:9: 8:10\n+        debug y => ((_0 as Ok).0: u32);  // in scope 1 at $DIR/simplify_try.rs:21:9: 21:10\n     }\n     scope 2 {\n-        debug err => ((_0 as Err).0: i32); // in scope 2 at $DIR/simplify_try.rs:8:14: 8:15\n-        scope 3 {\n-            scope 7 (inlined <i32 as From<i32>>::from) { // at $DIR/simplify_try.rs:8:14: 8:15\n-                debug t => ((_0 as Err).0: i32); // in scope 7 at $DIR/simplify_try.rs:8:14: 8:15\n-            }\n-            scope 8 (inlined <Result<u32, i32> as Try>::from_error) { // at $DIR/simplify_try.rs:8:13: 8:15\n-                debug v => ((_0 as Err).0: i32); // in scope 8 at $DIR/simplify_try.rs:8:13: 8:15\n-            }\n+        debug e => ((_0 as Err).0: i32); // in scope 2 at $DIR/simplify_try.rs:22:13: 22:14\n+        scope 5 (inlined <i32 as From<i32>>::from) { // at $DIR/simplify_try.rs:22:37: 22:50\n+            debug t => ((_0 as Err).0: i32); // in scope 5 at $DIR/simplify_try.rs:22:37: 22:50\n         }\n-    }\n-    scope 4 {\n-        debug val => ((_0 as Ok).0: u32); // in scope 4 at $DIR/simplify_try.rs:8:13: 8:15\n-        scope 5 {\n+        scope 6 (inlined from_error::<u32, i32>) { // at $DIR/simplify_try.rs:22:26: 22:51\n+            debug e => ((_0 as Err).0: i32); // in scope 6 at $DIR/simplify_try.rs:22:26: 22:51\n         }\n     }\n-    scope 6 (inlined <Result<u32, i32> as Try>::into_result) { // at $DIR/simplify_try.rs:8:13: 8:15\n-        debug self => _0;                // in scope 6 at $DIR/simplify_try.rs:8:13: 8:15\n+    scope 3 {\n+        debug v => ((_0 as Ok).0: u32);  // in scope 3 at $DIR/simplify_try.rs:23:12: 23:13\n+    }\n+    scope 4 (inlined into_result::<u32, i32>) { // at $DIR/simplify_try.rs:21:19: 21:33\n+        debug r => _0;                   // in scope 4 at $DIR/simplify_try.rs:21:19: 21:33\n     }\n \n     bb0: {\n-        _0 = _1;                         // scope 0 at $DIR/simplify_try.rs:8:13: 8:14\n-        return;                          // scope 0 at $DIR/simplify_try.rs:10:2: 10:2\n+        _0 = _1;                         // scope 0 at $DIR/simplify_try.rs:21:31: 21:32\n+        return;                          // scope 0 at $DIR/simplify_try.rs:26:2: 26:2\n     }\n }"}]}