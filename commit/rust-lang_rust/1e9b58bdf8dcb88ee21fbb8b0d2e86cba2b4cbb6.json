{"sha": "1e9b58bdf8dcb88ee21fbb8b0d2e86cba2b4cbb6", "node_id": "C_kwDOAAsO6NoAKDFlOWI1OGJkZjhkY2I4OGVlMjFmYmI4YjBkMmU4NmNiYTJiNGNiYjY", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-03-05T14:49:33Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-03-05T16:08:06Z"}, "message": "Use the correct bound vars in return type suggestion.", "tree": {"sha": "e5791282d04a4176f16c1ba1ff6f71956b26b2c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e5791282d04a4176f16c1ba1ff6f71956b26b2c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e9b58bdf8dcb88ee21fbb8b0d2e86cba2b4cbb6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e9b58bdf8dcb88ee21fbb8b0d2e86cba2b4cbb6", "html_url": "https://github.com/rust-lang/rust/commit/1e9b58bdf8dcb88ee21fbb8b0d2e86cba2b4cbb6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e9b58bdf8dcb88ee21fbb8b0d2e86cba2b4cbb6/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0fbfc3e76916521b509b63286296dd0762170d34", "url": "https://api.github.com/repos/rust-lang/rust/commits/0fbfc3e76916521b509b63286296dd0762170d34", "html_url": "https://github.com/rust-lang/rust/commit/0fbfc3e76916521b509b63286296dd0762170d34"}], "stats": {"total": 63, "additions": 39, "deletions": 24}, "files": [{"sha": "2c9d908166fa3c97262ad873ada33127cc328f97", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/suggestions.rs", "status": "modified", "additions": 21, "deletions": 24, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/1e9b58bdf8dcb88ee21fbb8b0d2e86cba2b4cbb6/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e9b58bdf8dcb88ee21fbb8b0d2e86cba2b4cbb6/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs?ref=1e9b58bdf8dcb88ee21fbb8b0d2e86cba2b4cbb6", "patch": "@@ -669,6 +669,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// This routine checks if the return type is left as default, the method is not part of an\n     /// `impl` block and that it isn't the `main` method. If so, it suggests setting the return\n     /// type.\n+    #[instrument(level = \"trace\", skip(self, err))]\n     pub(in super::super) fn suggest_missing_return_type(\n         &self,\n         err: &mut Diagnostic,\n@@ -705,28 +706,24 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     return true\n                 }\n             }\n-            hir::FnRetTy::Return(ty) => {\n-                let span = ty.span;\n-\n-                if let hir::TyKind::OpaqueDef(item_id, ..) = ty.kind\n-                && let hir::Node::Item(hir::Item {\n-                    kind: hir::ItemKind::OpaqueTy(op_ty),\n-                    ..\n-                }) = self.tcx.hir().get(item_id.hir_id())\n-                && let hir::OpaqueTy {\n-                    bounds: [bound], ..\n-                } = op_ty\n-                && let hir::GenericBound::LangItemTrait(\n-                    hir::LangItem::Future, _, _, generic_args) = bound\n-                && let hir::GenericArgs { bindings: [ty_binding], .. } = generic_args\n-                && let hir::TypeBinding { kind, .. } = ty_binding\n-                && let hir::TypeBindingKind::Equality { term } = kind\n-                && let hir::Term::Ty(term_ty) = term {\n+            hir::FnRetTy::Return(hir_ty) => {\n+                let span = hir_ty.span;\n+\n+                if let hir::TyKind::OpaqueDef(item_id, ..) = hir_ty.kind\n+                    && let hir::Node::Item(hir::Item {\n+                        kind: hir::ItemKind::OpaqueTy(op_ty),\n+                        ..\n+                    }) = self.tcx.hir().get(item_id.hir_id())\n+                    && let [hir::GenericBound::LangItemTrait(\n+                        hir::LangItem::Future, _, _, generic_args)] = op_ty.bounds\n+                    && let hir::GenericArgs { bindings: [ty_binding], .. } = generic_args\n+                    && let hir::TypeBindingKind::Equality { term: hir::Term::Ty(term) } = ty_binding.kind\n+                {\n                     // Check if async function's return type was omitted.\n                     // Don't emit suggestions if the found type is `impl Future<...>`.\n-                    debug!(\"suggest_missing_return_type: found = {:?}\", found);\n+                    debug!(?found);\n                     if found.is_suggestable(self.tcx, false) {\n-                        if term_ty.span.is_empty() {\n+                        if term.span.is_empty() {\n                             err.subdiagnostic(AddReturnTypeSuggestion::Add { span, found: found.to_string() });\n                             return true;\n                         } else {\n@@ -737,11 +734,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n                 // Only point to return type if the expected type is the return type, as if they\n                 // are not, the expectation must have been caused by something else.\n-                debug!(\"suggest_missing_return_type: return type {:?} node {:?}\", ty, ty.kind);\n-                let ty = self.astconv().ast_ty_to_ty(ty);\n-                debug!(\"suggest_missing_return_type: return type {:?}\", ty);\n-                debug!(\"suggest_missing_return_type: expected type {:?}\", ty);\n-                let bound_vars = self.tcx.late_bound_vars(fn_id);\n+                debug!(\"return type {:?}\", hir_ty);\n+                let ty = self.astconv().ast_ty_to_ty(hir_ty);\n+                debug!(\"return type {:?}\", ty);\n+                debug!(\"expected type {:?}\", expected);\n+                let bound_vars = self.tcx.late_bound_vars(hir_ty.hir_id.owner.into());\n                 let ty = Binder::bind_with_vars(ty, bound_vars);\n                 let ty = self.normalize(span, ty);\n                 let ty = self.tcx.erase_late_bound_regions(ty);"}, {"sha": "a6449cd44d0f8dade937382c7267fb7bc8ad08ba", "filename": "tests/ui/suggestions/issue-107860.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1e9b58bdf8dcb88ee21fbb8b0d2e86cba2b4cbb6/tests%2Fui%2Fsuggestions%2Fissue-107860.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e9b58bdf8dcb88ee21fbb8b0d2e86cba2b4cbb6/tests%2Fui%2Fsuggestions%2Fissue-107860.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fissue-107860.rs?ref=1e9b58bdf8dcb88ee21fbb8b0d2e86cba2b4cbb6", "patch": "@@ -0,0 +1,6 @@\n+// edition: 2021\n+\n+async fn str<T>(T: &str) -> &str { &str }\n+//~^ ERROR mismatched types\n+\n+fn main() {}"}, {"sha": "92e3cf8c43b3bff49ef086a45bc870c834e8ca61", "filename": "tests/ui/suggestions/issue-107860.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1e9b58bdf8dcb88ee21fbb8b0d2e86cba2b4cbb6/tests%2Fui%2Fsuggestions%2Fissue-107860.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1e9b58bdf8dcb88ee21fbb8b0d2e86cba2b4cbb6/tests%2Fui%2Fsuggestions%2Fissue-107860.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fissue-107860.stderr?ref=1e9b58bdf8dcb88ee21fbb8b0d2e86cba2b4cbb6", "patch": "@@ -0,0 +1,12 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-107860.rs:3:36\n+   |\n+LL | async fn str<T>(T: &str) -> &str { &str }\n+   |                                    ^^^^ expected `&str`, found `&fn(&str) -> ... {str::<...>}`\n+   |\n+   = note: expected reference `&str`\n+              found reference `&for<'a> fn(&'a str) -> impl Future<Output = &'a str> {str::<_>}`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}]}