{"sha": "2afd277bc3ad53ddb6064b7f2a739583e8b4820a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhZmQyNzdiYzNhZDUzZGRiNjA2NGI3ZjJhNzM5NTgzZThiNDgyMGE=", "commit": {"author": {"name": "ben", "email": "benlewisj@gmail.com", "date": "2019-10-01T04:55:26Z"}, "committer": {"name": "ben", "email": "benlewisj@gmail.com", "date": "2019-10-08T16:10:00Z"}, "message": "Fix calling function pointer const parameters. Also fixes inference of\nfunction pointer const parameters.", "tree": {"sha": "dd7d43db310357a596e14a573a55aea4090c2a55", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd7d43db310357a596e14a573a55aea4090c2a55"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2afd277bc3ad53ddb6064b7f2a739583e8b4820a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2afd277bc3ad53ddb6064b7f2a739583e8b4820a", "html_url": "https://github.com/rust-lang/rust/commit/2afd277bc3ad53ddb6064b7f2a739583e8b4820a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2afd277bc3ad53ddb6064b7f2a739583e8b4820a/comments", "author": {"login": "BenLewis-Seequent", "id": 7391596, "node_id": "MDQ6VXNlcjczOTE1OTY=", "avatar_url": "https://avatars.githubusercontent.com/u/7391596?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BenLewis-Seequent", "html_url": "https://github.com/BenLewis-Seequent", "followers_url": "https://api.github.com/users/BenLewis-Seequent/followers", "following_url": "https://api.github.com/users/BenLewis-Seequent/following{/other_user}", "gists_url": "https://api.github.com/users/BenLewis-Seequent/gists{/gist_id}", "starred_url": "https://api.github.com/users/BenLewis-Seequent/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BenLewis-Seequent/subscriptions", "organizations_url": "https://api.github.com/users/BenLewis-Seequent/orgs", "repos_url": "https://api.github.com/users/BenLewis-Seequent/repos", "events_url": "https://api.github.com/users/BenLewis-Seequent/events{/privacy}", "received_events_url": "https://api.github.com/users/BenLewis-Seequent/received_events", "type": "User", "site_admin": false}, "committer": {"login": "BenLewis-Seequent", "id": 7391596, "node_id": "MDQ6VXNlcjczOTE1OTY=", "avatar_url": "https://avatars.githubusercontent.com/u/7391596?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BenLewis-Seequent", "html_url": "https://github.com/BenLewis-Seequent", "followers_url": "https://api.github.com/users/BenLewis-Seequent/followers", "following_url": "https://api.github.com/users/BenLewis-Seequent/following{/other_user}", "gists_url": "https://api.github.com/users/BenLewis-Seequent/gists{/gist_id}", "starred_url": "https://api.github.com/users/BenLewis-Seequent/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BenLewis-Seequent/subscriptions", "organizations_url": "https://api.github.com/users/BenLewis-Seequent/orgs", "repos_url": "https://api.github.com/users/BenLewis-Seequent/repos", "events_url": "https://api.github.com/users/BenLewis-Seequent/events{/privacy}", "received_events_url": "https://api.github.com/users/BenLewis-Seequent/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec557aa8180ca08ff749793b3d42383618b96044", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec557aa8180ca08ff749793b3d42383618b96044", "html_url": "https://github.com/rust-lang/rust/commit/ec557aa8180ca08ff749793b3d42383618b96044"}], "stats": {"total": 175, "additions": 145, "deletions": 30}, "files": [{"sha": "2d811a83c10c1e5c4c93635f93be54e7ccb29e24", "filename": "src/librustc/ty/relate.rs", "status": "modified", "additions": 38, "deletions": 28, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/2afd277bc3ad53ddb6064b7f2a739583e8b4820a/src%2Flibrustc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2afd277bc3ad53ddb6064b7f2a739583e8b4820a/src%2Flibrustc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Frelate.rs?ref=2afd277bc3ad53ddb6064b7f2a739583e8b4820a", "patch": "@@ -8,7 +8,7 @@ use crate::hir::def_id::DefId;\n use crate::ty::subst::{GenericArg, GenericArgKind, SubstsRef};\n use crate::ty::{self, Ty, TyCtxt, TypeFoldable};\n use crate::ty::error::{ExpectedFound, TypeError};\n-use crate::mir::interpret::{ConstValue, get_slice_bytes, Scalar};\n+use crate::mir::interpret::{ConstValue, get_slice_bytes, Scalar, GlobalAlloc};\n use std::rc::Rc;\n use std::iter;\n use rustc_target::spec::abi;\n@@ -561,37 +561,47 @@ pub fn super_relate_consts<R: TypeRelation<'tcx>>(\n     // implement both `PartialEq` and `Eq`, corresponding to\n     // `structural_match` types.\n     // FIXME(const_generics): check for `structural_match` synthetic attribute.\n-    match (eagerly_eval(a), eagerly_eval(b)) {\n+    let new_const_val = match (eagerly_eval(a), eagerly_eval(b)) {\n         (ConstValue::Infer(_), _) | (_, ConstValue::Infer(_)) => {\n             // The caller should handle these cases!\n             bug!(\"var types encountered in super_relate_consts: {:?} {:?}\", a, b)\n         }\n         (ConstValue::Param(a_p), ConstValue::Param(b_p)) if a_p.index == b_p.index => {\n-            Ok(a)\n+            return Ok(a);\n         }\n         (ConstValue::Placeholder(p1), ConstValue::Placeholder(p2)) if p1 == p2 => {\n-            Ok(a)\n+            return Ok(a);\n         }\n-        (a_val @ ConstValue::Scalar(Scalar::Raw { .. }), b_val @ _)\n-            if a.ty == b.ty && a_val == b_val =>\n-        {\n-            Ok(tcx.mk_const(ty::Const {\n-                val: a_val,\n-                ty: a.ty,\n-            }))\n+        (ConstValue::Scalar(a_val), ConstValue::Scalar(b_val)) if a.ty == b.ty => {\n+            if a_val == b_val {\n+                Ok(ConstValue::Scalar(a_val))\n+            } else if let ty::FnPtr(_) = a.ty.kind {\n+                let alloc_map = tcx.alloc_map.lock();\n+                let get_fn_instance = |val: Scalar| {\n+                    let ptr = val.to_ptr().unwrap();\n+                    if let Some(GlobalAlloc::Function(instance)) = alloc_map.get(ptr.alloc_id) {\n+                        instance\n+                    } else {\n+                        bug!(\"Allocation for FnPtr isn't a function\");\n+                    }\n+                };\n+                let a_instance = get_fn_instance(a_val);\n+                let b_instance = get_fn_instance(b_val);\n+                if a_instance == b_instance {\n+                    Ok(ConstValue::Scalar(a_val))\n+                } else {\n+                    Err(TypeError::ConstMismatch(expected_found(relation, &a, &b)))\n+                }\n+            } else {\n+                Err(TypeError::ConstMismatch(expected_found(relation, &a, &b)))\n+            }\n         }\n \n-        // FIXME(const_generics): we should either handle `Scalar::Ptr` or add a comment\n-        // saying that we're not handling it intentionally.\n-\n         (a_val @ ConstValue::Slice { .. }, b_val @ ConstValue::Slice { .. }) => {\n             let a_bytes = get_slice_bytes(&tcx, a_val);\n             let b_bytes = get_slice_bytes(&tcx, b_val);\n             if a_bytes == b_bytes {\n-                Ok(tcx.mk_const(ty::Const {\n-                    val: a_val,\n-                    ty: a.ty,\n-                }))\n+                Ok(a_val)\n             } else {\n                 Err(TypeError::ConstMismatch(expected_found(relation, &a, &b)))\n             }\n@@ -602,16 +612,16 @@ pub fn super_relate_consts<R: TypeRelation<'tcx>>(\n         // FIXME(const_generics): this is wrong, as it is a projection\n         (ConstValue::Unevaluated(a_def_id, a_substs),\n             ConstValue::Unevaluated(b_def_id, b_substs)) if a_def_id == b_def_id => {\n-                let substs =\n-                    relation.relate_with_variance(ty::Variance::Invariant, &a_substs, &b_substs)?;\n-                Ok(tcx.mk_const(ty::Const {\n-                    val: ConstValue::Unevaluated(a_def_id, &substs),\n-                    ty: a.ty,\n-                }))\n-            }\n-\n-        _ => Err(TypeError::ConstMismatch(expected_found(relation, &a, &b))),\n-    }\n+            let substs =\n+                relation.relate_with_variance(ty::Variance::Invariant, &a_substs, &b_substs)?;\n+            Ok(ConstValue::Unevaluated(a_def_id, &substs))\n+        }\n+        _ =>  Err(TypeError::ConstMismatch(expected_found(relation, &a, &b))),\n+    };\n+    new_const_val.map(|val| tcx.mk_const(ty::Const {\n+        val,\n+        ty: a.ty,\n+    }))\n }\n \n impl<'tcx> Relate<'tcx> for &'tcx ty::List<ty::ExistentialPredicate<'tcx>> {"}, {"sha": "a0c3ae82bcc3875ec86727012f9378c996e881a8", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2afd277bc3ad53ddb6064b7f2a739583e8b4820a/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2afd277bc3ad53ddb6064b7f2a739583e8b4820a/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=2afd277bc3ad53ddb6064b7f2a739583e8b4820a", "patch": "@@ -1265,7 +1265,13 @@ fn collect_const<'tcx>(\n ) {\n     debug!(\"visiting const {:?}\", constant);\n \n-    match constant.val {\n+    let substituted_constant = if let ConstValue::Param(param) = constant.val {\n+        param_substs.const_at(param.index as usize)\n+    } else {\n+        constant\n+    };\n+\n+    match substituted_constant.val {\n         ConstValue::Scalar(Scalar::Ptr(ptr)) =>\n             collect_miri(tcx, ptr.alloc_id, output),\n         ConstValue::Slice { data: alloc, start: _, end: _ } |\n@@ -1297,7 +1303,7 @@ fn collect_const<'tcx>(\n                     tcx.def_span(def_id), \"collection encountered polymorphic constant\",\n                 ),\n             }\n-        }\n+        },\n         _ => {},\n     }\n }"}, {"sha": "9f64d4bd086dd1fbb47342819e5a4ee8e752e776", "filename": "src/test/ui/const-generics/fn-const-param-call.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2afd277bc3ad53ddb6064b7f2a739583e8b4820a/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2afd277bc3ad53ddb6064b7f2a739583e8b4820a/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-call.rs?ref=2afd277bc3ad53ddb6064b7f2a739583e8b4820a", "patch": "@@ -0,0 +1,20 @@\n+// run-pass\n+\n+#![feature(const_generics)]\n+//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+\n+fn function() -> u32 {\n+    17\n+}\n+\n+struct Wrapper<const F: fn() -> u32>;\n+\n+impl<const F: fn() -> u32> Wrapper<{F}> {\n+    fn call() -> u32 {\n+        F()\n+    }\n+}\n+\n+fn main() {\n+    assert_eq!(Wrapper::<{function}>::call(), 17);\n+}\n\\ No newline at end of file"}, {"sha": "88d7700680b19a0307202ede44292e7a80a20c0b", "filename": "src/test/ui/const-generics/fn-const-param-call.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2afd277bc3ad53ddb6064b7f2a739583e8b4820a/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2afd277bc3ad53ddb6064b7f2a739583e8b4820a/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-call.stderr?ref=2afd277bc3ad53ddb6064b7f2a739583e8b4820a", "patch": "@@ -0,0 +1,8 @@\n+warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+  --> $DIR/fn-const-param-call.rs:3:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+"}, {"sha": "ac48ccc26e136e76f01d7964f2d468f2db95cf18", "filename": "src/test/ui/const-generics/fn-const-param-infer.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/2afd277bc3ad53ddb6064b7f2a739583e8b4820a/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2afd277bc3ad53ddb6064b7f2a739583e8b4820a/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.rs?ref=2afd277bc3ad53ddb6064b7f2a739583e8b4820a", "patch": "@@ -0,0 +1,26 @@\n+#![feature(const_generics)]\n+//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+\n+struct Checked<const F: fn(usize) -> bool>;\n+\n+fn not_one(val: usize) -> bool { val != 1 }\n+fn not_two(val: usize) -> bool { val != 2 }\n+\n+fn generic_arg<T>(val: T) -> bool { true }\n+\n+fn generic<T>(val: usize) -> bool { val != 1 }\n+\n+fn main() {\n+    let _: Option<Checked<{not_one}>> = None;\n+    let _: Checked<{not_one}> = Checked::<{not_one}>;\n+    let _: Checked<{not_one}> = Checked::<{not_two}>; //~ mismatched types\n+\n+    let _ = Checked::<{generic_arg}>;\n+    let _ = Checked::<{generic_arg::<usize>}>;\n+    let _ = Checked::<{generic_arg::<u32>}>;  //~ mismatched types\n+\n+    let _ = Checked::<{generic}>; //~ type annotations needed\n+    let _ = Checked::<{generic::<u16>}>;\n+    let _: Checked<{generic::<u16>}> = Checked::<{generic::<u16>}>;\n+    let _: Checked<{generic::<u32>}> = Checked::<{generic::<u16>}>; //~ mismatched types\n+}\n\\ No newline at end of file"}, {"sha": "4ef55fd22d46ef1f2201a694844f364c88f39987", "filename": "src/test/ui/const-generics/fn-const-param-infer.stderr", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/2afd277bc3ad53ddb6064b7f2a739583e8b4820a/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2afd277bc3ad53ddb6064b7f2a739583e8b4820a/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.stderr?ref=2afd277bc3ad53ddb6064b7f2a739583e8b4820a", "patch": "@@ -0,0 +1,45 @@\n+warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+  --> $DIR/fn-const-param-infer.rs:1:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error[E0308]: mismatched types\n+  --> $DIR/fn-const-param-infer.rs:16:33\n+   |\n+LL |     let _: Checked<{not_one}> = Checked::<{not_two}>;\n+   |                                 ^^^^^^^^^^^^^^^^^^^^ expected `Scalar(AllocId(1).0x0) : fn(usize) -> bool`, found `Scalar(AllocId(10).0x0) : fn(usize) -> bool`\n+   |\n+   = note: expected type `Checked<>`\n+              found type `Checked<>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/fn-const-param-infer.rs:20:24\n+   |\n+LL |     let _ = Checked::<{generic_arg::<u32>}>;\n+   |                        ^^^^^^^^^^^^^^^^^^ expected usize, found u32\n+   |\n+   = note: expected type `fn(usize) -> bool`\n+              found type `fn(u32) -> bool {generic_arg::<u32>}`\n+\n+error[E0282]: type annotations needed\n+  --> $DIR/fn-const-param-infer.rs:22:24\n+   |\n+LL |     let _ = Checked::<{generic}>;\n+   |                        ^^^^^^^ cannot infer type for `T`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/fn-const-param-infer.rs:25:40\n+   |\n+LL |     let _: Checked<{generic::<u32>}> = Checked::<{generic::<u16>}>;\n+   |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Scalar(AllocId(7).0x0) : fn(usize) -> bool`, found `Scalar(AllocId(20).0x0) : fn(usize) -> bool`\n+   |\n+   = note: expected type `Checked<>`\n+              found type `Checked<>`\n+\n+error: aborting due to 4 previous errors\n+\n+Some errors have detailed explanations: E0282, E0308.\n+For more information about an error, try `rustc --explain E0282`."}]}