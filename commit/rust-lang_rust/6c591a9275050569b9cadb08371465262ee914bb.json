{"sha": "6c591a9275050569b9cadb08371465262ee914bb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjNTkxYTkyNzUwNTA1NjliOWNhZGIwODM3MTQ2NTI2MmVlOTE0YmI=", "commit": {"author": {"name": "patrick-gu", "email": "55641350+patrick-gu@users.noreply.github.com", "date": "2021-07-14T19:00:48Z"}, "committer": {"name": "patrick-gu", "email": "55641350+patrick-gu@users.noreply.github.com", "date": "2021-07-14T19:02:38Z"}, "message": "fix: Single-line and nested blocks in unwrap_block\n\nRework the system for stripping whitespace and braces in the\nunwrap_block assist to allow correct unwrapping of `{$0 { 0 } }`", "tree": {"sha": "9544422be7bb5c4676af8a696f6ce4de71e69b2e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9544422be7bb5c4676af8a696f6ce4de71e69b2e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c591a9275050569b9cadb08371465262ee914bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c591a9275050569b9cadb08371465262ee914bb", "html_url": "https://github.com/rust-lang/rust/commit/6c591a9275050569b9cadb08371465262ee914bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c591a9275050569b9cadb08371465262ee914bb/comments", "author": {"login": "patrick-gu", "id": 55641350, "node_id": "MDQ6VXNlcjU1NjQxMzUw", "avatar_url": "https://avatars.githubusercontent.com/u/55641350?v=4", "gravatar_id": "", "url": "https://api.github.com/users/patrick-gu", "html_url": "https://github.com/patrick-gu", "followers_url": "https://api.github.com/users/patrick-gu/followers", "following_url": "https://api.github.com/users/patrick-gu/following{/other_user}", "gists_url": "https://api.github.com/users/patrick-gu/gists{/gist_id}", "starred_url": "https://api.github.com/users/patrick-gu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/patrick-gu/subscriptions", "organizations_url": "https://api.github.com/users/patrick-gu/orgs", "repos_url": "https://api.github.com/users/patrick-gu/repos", "events_url": "https://api.github.com/users/patrick-gu/events{/privacy}", "received_events_url": "https://api.github.com/users/patrick-gu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "patrick-gu", "id": 55641350, "node_id": "MDQ6VXNlcjU1NjQxMzUw", "avatar_url": "https://avatars.githubusercontent.com/u/55641350?v=4", "gravatar_id": "", "url": "https://api.github.com/users/patrick-gu", "html_url": "https://github.com/patrick-gu", "followers_url": "https://api.github.com/users/patrick-gu/followers", "following_url": "https://api.github.com/users/patrick-gu/following{/other_user}", "gists_url": "https://api.github.com/users/patrick-gu/gists{/gist_id}", "starred_url": "https://api.github.com/users/patrick-gu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/patrick-gu/subscriptions", "organizations_url": "https://api.github.com/users/patrick-gu/orgs", "repos_url": "https://api.github.com/users/patrick-gu/repos", "events_url": "https://api.github.com/users/patrick-gu/events{/privacy}", "received_events_url": "https://api.github.com/users/patrick-gu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "111d0798d622ceef65cc112e93eda87f3b9c760c", "url": "https://api.github.com/repos/rust-lang/rust/commits/111d0798d622ceef65cc112e93eda87f3b9c760c", "html_url": "https://github.com/rust-lang/rust/commit/111d0798d622ceef65cc112e93eda87f3b9c760c"}], "stats": {"total": 128, "additions": 112, "deletions": 16}, "files": [{"sha": "cd6084f6b306a54f5073904207ac2c173ac3098f", "filename": "crates/ide_assists/src/handlers/unwrap_block.rs", "status": "modified", "additions": 112, "deletions": 16, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/6c591a9275050569b9cadb08371465262ee914bb/crates%2Fide_assists%2Fsrc%2Fhandlers%2Funwrap_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c591a9275050569b9cadb08371465262ee914bb/crates%2Fide_assists%2Fsrc%2Fhandlers%2Funwrap_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Funwrap_block.rs?ref=6c591a9275050569b9cadb08371465262ee914bb", "patch": "@@ -39,10 +39,7 @@ pub(crate) fn unwrap_block(acc: &mut Assists, ctx: &AssistContext) -> Option<()>\n \n     if matches!(parent.kind(), SyntaxKind::BLOCK_EXPR | SyntaxKind::EXPR_STMT) {\n         return acc.add(assist_id, assist_label, target, |builder| {\n-            builder.replace(\n-                block.syntax().text_range(),\n-                update_expr_string(block.to_string(), &[' ', '{', '\\n']),\n-            );\n+            builder.replace(block.syntax().text_range(), update_expr_string(block.to_string()));\n         });\n     }\n \n@@ -72,7 +69,7 @@ pub(crate) fn unwrap_block(acc: &mut Assists, ctx: &AssistContext) -> Option<()>\n                         edit.delete(range_to_del_else_if);\n                         edit.replace(\n                             target,\n-                            update_expr_string(then_branch.to_string(), &[' ', '{']),\n+                            update_expr_string_without_newline(then_branch.to_string()),\n                         );\n                     });\n                 }\n@@ -84,7 +81,7 @@ pub(crate) fn unwrap_block(acc: &mut Assists, ctx: &AssistContext) -> Option<()>\n                     );\n \n                     edit.delete(range_to_del);\n-                    edit.replace(target, update_expr_string(block.to_string(), &[' ', '{']));\n+                    edit.replace(target, update_expr_string_without_newline(block.to_string()));\n                 });\n             }\n         }\n@@ -93,20 +90,31 @@ pub(crate) fn unwrap_block(acc: &mut Assists, ctx: &AssistContext) -> Option<()>\n \n     let unwrapped = unwrap_trivial_block(block);\n     acc.add(assist_id, assist_label, target, |builder| {\n-        builder.replace(\n-            parent.syntax().text_range(),\n-            update_expr_string(unwrapped.to_string(), &[' ', '{', '\\n']),\n-        );\n+        builder.replace(parent.syntax().text_range(), update_expr_string(unwrapped.to_string()));\n     })\n }\n \n-fn update_expr_string(expr_str: String, trim_start_pat: &[char]) -> String {\n-    let expr_string = expr_str.trim_start_matches(trim_start_pat);\n-    let mut expr_string_lines: Vec<&str> = expr_string.lines().collect();\n-    expr_string_lines.pop(); // Delete last line\n+fn update_expr_string(expr_string: String) -> String {\n+    update_expr_string_with_pat(expr_string, &[' ', '\\n'])\n+}\n+\n+fn update_expr_string_without_newline(expr_string: String) -> String {\n+    update_expr_string_with_pat(expr_string, &[' '])\n+}\n+\n+fn update_expr_string_with_pat(expr_str: String, whitespace_pat: &[char]) -> String {\n+    // Remove leading whitespace, index [1..] to remove the leading '{',\n+    // then continue to remove leading whitespace.\n+    let expr_str =\n+        expr_str.trim_start_matches(whitespace_pat)[1..].trim_start_matches(whitespace_pat);\n \n-    expr_string_lines\n-        .into_iter()\n+    // Remove trailing whitespace, index [..expr_str.len() - 1] to remove the trailing '}',\n+    // then continue to remove trailing whitespace.\n+    let expr_str = expr_str.trim_end_matches(whitespace_pat);\n+    let expr_str = expr_str[..expr_str.len() - 1].trim_end_matches(whitespace_pat);\n+\n+    expr_str\n+        .lines()\n         .map(|line| line.replacen(\"    \", \"\", 1)) // Delete indentation\n         .collect::<Vec<String>>()\n         .join(\"\\n\")\n@@ -576,6 +584,94 @@ fn main() {\n         }\n     }\n }\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn simple_single_line() {\n+        check_assist(\n+            unwrap_block,\n+            r#\"\n+fn main() {\n+    {$0 0 }\n+}\n+\"#,\n+            r#\"\n+fn main() {\n+    0\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn simple_nested_block() {\n+        check_assist(\n+            unwrap_block,\n+            r#\"\n+fn main() {\n+    $0{\n+        {\n+            3\n+        }\n+    }\n+}\n+\"#,\n+            r#\"\n+fn main() {\n+    {\n+        3\n+    }\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn nested_single_line() {\n+        check_assist(\n+            unwrap_block,\n+            r#\"\n+fn main() {\n+    {$0 { println!(\"foo\"); } }\n+}\n+\"#,\n+            r#\"\n+fn main() {\n+    { println!(\"foo\"); }\n+}\n+\"#,\n+        );\n+\n+        check_assist(\n+            unwrap_block,\n+            r#\"\n+fn main() {\n+    {$0 { 0 } }\n+}\n+\"#,\n+            r#\"\n+fn main() {\n+    { 0 }\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn simple_if_single_line() {\n+        check_assist(\n+            unwrap_block,\n+            r#\"\n+fn main() {\n+    if true {$0 /* foo */ foo() } else { bar() /* bar */}\n+}\n+\"#,\n+            r#\"\n+fn main() {\n+    /* foo */ foo()\n+}\n \"#,\n         );\n     }"}]}