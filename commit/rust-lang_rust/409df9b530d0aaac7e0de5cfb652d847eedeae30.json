{"sha": "409df9b530d0aaac7e0de5cfb652d847eedeae30", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwOWRmOWI1MzBkMGFhYWM3ZTBkZTVjZmI2NTJkODQ3ZWVkZWFlMzA=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-14T20:56:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-08-14T20:56:25Z"}, "message": "Rollup merge of #63528 - petrochenkov:anyany, r=estebank\n\nsyntax: Remove `DummyResult::expr_only`\n\nThe effect is that if a built-in macro both returns an erroneous AST fragment and is used in unexpected position, then the incorrect position error won't be reported.\n\nThis combination of two errors should be rare and isn't worth an extra field that makes people ask questions in comments.\n(There wasn't even a test making sure it worked.)\n\nAddresses https://github.com/rust-lang/rust/pull/63468#discussion_r313504644\nr? @estebank", "tree": {"sha": "a9a2cae18938c9931057cd3860af8cf4bf5da959", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a9a2cae18938c9931057cd3860af8cf4bf5da959"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/409df9b530d0aaac7e0de5cfb652d847eedeae30", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdVHV5CRBK7hj4Ov3rIwAAdHIIAEF6mtUrA2qxBUC1YIdeAr8m\nqFaGmW7Oz7ADgvnF1TY7SXNFlwG7zHbVqHvHfKC2ZfqzsxjoLhw7808J3XQ+Qc77\n8BLCQPEacMKgwTItoVwVV2SMQdFDFuINsjaFkMsFqI/L0w+aTZCfIvfPYGA6qiJK\ndCNjnVYyKMYZLDtUuXLlXDRJ1xZ5XG9CucOcVXcHco/9U/df44pQG+zQdEoVMAkT\nDMQZoqX1DNEzoEMNkCojU8TuVyJbBPeAFtytPiHgE8LrfH/mwaRXewrq70a+IDqH\nJAB++edyh5H30+jRFV+egERXa/zFPVxvc5gLK1FP7/kAOAY1WQqJ+REJMQA8oCc=\n=dZb/\n-----END PGP SIGNATURE-----\n", "payload": "tree a9a2cae18938c9931057cd3860af8cf4bf5da959\nparent 02e2a57f262256fda9a8e3c89cfb18fe6b64ee01\nparent 376636e51719588edba82fc284328e14ce1f2d74\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1565816185 +0200\ncommitter GitHub <noreply@github.com> 1565816185 +0200\n\nRollup merge of #63528 - petrochenkov:anyany, r=estebank\n\nsyntax: Remove `DummyResult::expr_only`\n\nThe effect is that if a built-in macro both returns an erroneous AST fragment and is used in unexpected position, then the incorrect position error won't be reported.\n\nThis combination of two errors should be rare and isn't worth an extra field that makes people ask questions in comments.\n(There wasn't even a test making sure it worked.)\n\nAddresses https://github.com/rust-lang/rust/pull/63468#discussion_r313504644\nr? @estebank\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/409df9b530d0aaac7e0de5cfb652d847eedeae30", "html_url": "https://github.com/rust-lang/rust/commit/409df9b530d0aaac7e0de5cfb652d847eedeae30", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/409df9b530d0aaac7e0de5cfb652d847eedeae30/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02e2a57f262256fda9a8e3c89cfb18fe6b64ee01", "url": "https://api.github.com/repos/rust-lang/rust/commits/02e2a57f262256fda9a8e3c89cfb18fe6b64ee01", "html_url": "https://github.com/rust-lang/rust/commit/02e2a57f262256fda9a8e3c89cfb18fe6b64ee01"}, {"sha": "376636e51719588edba82fc284328e14ce1f2d74", "url": "https://api.github.com/repos/rust-lang/rust/commits/376636e51719588edba82fc284328e14ce1f2d74", "html_url": "https://github.com/rust-lang/rust/commit/376636e51719588edba82fc284328e14ce1f2d74"}], "stats": {"total": 81, "additions": 27, "deletions": 54}, "files": [{"sha": "11544d43ac3e3fa4984dc4873c29b4397a1006c2", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 6, "deletions": 33, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/409df9b530d0aaac7e0de5cfb652d847eedeae30/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409df9b530d0aaac7e0de5cfb652d847eedeae30/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=409df9b530d0aaac7e0de5cfb652d847eedeae30", "patch": "@@ -405,7 +405,6 @@ impl MacResult for MacEager {\n /// after hitting errors.\n #[derive(Copy, Clone)]\n pub struct DummyResult {\n-    expr_only: bool,\n     is_error: bool,\n     span: Span,\n }\n@@ -416,21 +415,12 @@ impl DummyResult {\n     /// Use this as a return value after hitting any errors and\n     /// calling `span_err`.\n     pub fn any(span: Span) -> Box<dyn MacResult+'static> {\n-        Box::new(DummyResult { expr_only: false, is_error: true, span })\n+        Box::new(DummyResult { is_error: true, span })\n     }\n \n     /// Same as `any`, but must be a valid fragment, not error.\n     pub fn any_valid(span: Span) -> Box<dyn MacResult+'static> {\n-        Box::new(DummyResult { expr_only: false, is_error: false, span })\n-    }\n-\n-    /// Creates a default MacResult that can only be an expression.\n-    ///\n-    /// Use this for macros that must expand to an expression, so even\n-    /// if an error is encountered internally, the user will receive\n-    /// an error that they also used it in the wrong place.\n-    pub fn expr(span: Span) -> Box<dyn MacResult+'static> {\n-        Box::new(DummyResult { expr_only: true, is_error: true, span })\n+        Box::new(DummyResult { is_error: false, span })\n     }\n \n     /// A plain dummy expression.\n@@ -472,36 +462,19 @@ impl MacResult for DummyResult {\n     }\n \n     fn make_items(self: Box<DummyResult>) -> Option<SmallVec<[P<ast::Item>; 1]>> {\n-        // this code needs a comment... why not always just return the Some() ?\n-        if self.expr_only {\n-            None\n-        } else {\n-            Some(SmallVec::new())\n-        }\n+        Some(SmallVec::new())\n     }\n \n     fn make_impl_items(self: Box<DummyResult>) -> Option<SmallVec<[ast::ImplItem; 1]>> {\n-        if self.expr_only {\n-            None\n-        } else {\n-            Some(SmallVec::new())\n-        }\n+        Some(SmallVec::new())\n     }\n \n     fn make_trait_items(self: Box<DummyResult>) -> Option<SmallVec<[ast::TraitItem; 1]>> {\n-        if self.expr_only {\n-            None\n-        } else {\n-            Some(SmallVec::new())\n-        }\n+        Some(SmallVec::new())\n     }\n \n     fn make_foreign_items(self: Box<Self>) -> Option<SmallVec<[ast::ForeignItem; 1]>> {\n-        if self.expr_only {\n-            None\n-        } else {\n-            Some(SmallVec::new())\n-        }\n+        Some(SmallVec::new())\n     }\n \n     fn make_stmts(self: Box<DummyResult>) -> Option<SmallVec<[ast::Stmt; 1]>> {"}, {"sha": "950166f9260e2358f58a6956d2266c28de3ae30f", "filename": "src/libsyntax_ext/asm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/409df9b530d0aaac7e0de5cfb652d847eedeae30/src%2Flibsyntax_ext%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409df9b530d0aaac7e0de5cfb652d847eedeae30/src%2Flibsyntax_ext%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fasm.rs?ref=409df9b530d0aaac7e0de5cfb652d847eedeae30", "patch": "@@ -47,10 +47,10 @@ pub fn expand_asm<'cx>(cx: &'cx mut ExtCtxt<'_>,\n                        -> Box<dyn base::MacResult + 'cx> {\n     let mut inline_asm = match parse_inline_asm(cx, sp, tts) {\n         Ok(Some(inline_asm)) => inline_asm,\n-        Ok(None) => return DummyResult::expr(sp),\n+        Ok(None) => return DummyResult::any(sp),\n         Err(mut err) => {\n             err.emit();\n-            return DummyResult::expr(sp);\n+            return DummyResult::any(sp);\n         }\n     };\n "}, {"sha": "e3ef39075e236c1e99bb05b4bc935b6dea3380d1", "filename": "src/libsyntax_ext/assert.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/409df9b530d0aaac7e0de5cfb652d847eedeae30/src%2Flibsyntax_ext%2Fassert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409df9b530d0aaac7e0de5cfb652d847eedeae30/src%2Flibsyntax_ext%2Fassert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fassert.rs?ref=409df9b530d0aaac7e0de5cfb652d847eedeae30", "patch": "@@ -20,7 +20,7 @@ pub fn expand_assert<'cx>(\n         Ok(assert) => assert,\n         Err(mut err) => {\n             err.emit();\n-            return DummyResult::expr(sp);\n+            return DummyResult::any(sp);\n         }\n     };\n "}, {"sha": "0e52c1af9086f019edcbd572a18f878b4d4d2895", "filename": "src/libsyntax_ext/cfg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/409df9b530d0aaac7e0de5cfb652d847eedeae30/src%2Flibsyntax_ext%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409df9b530d0aaac7e0de5cfb652d847eedeae30/src%2Flibsyntax_ext%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fcfg.rs?ref=409df9b530d0aaac7e0de5cfb652d847eedeae30", "patch": "@@ -25,7 +25,7 @@ pub fn expand_cfg(\n         }\n         Err(mut err) => {\n             err.emit();\n-            DummyResult::expr(sp)\n+            DummyResult::any(sp)\n         }\n     }\n }"}, {"sha": "4cd17531a4500ba8dfbbfb3781d47f16d0c70905", "filename": "src/libsyntax_ext/concat.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/409df9b530d0aaac7e0de5cfb652d847eedeae30/src%2Flibsyntax_ext%2Fconcat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409df9b530d0aaac7e0de5cfb652d847eedeae30/src%2Flibsyntax_ext%2Fconcat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fconcat.rs?ref=409df9b530d0aaac7e0de5cfb652d847eedeae30", "patch": "@@ -1,5 +1,5 @@\n use syntax::ast;\n-use syntax::ext::base;\n+use syntax::ext::base::{self, DummyResult};\n use syntax::symbol::Symbol;\n use syntax::tokenstream;\n \n@@ -12,7 +12,7 @@ pub fn expand_syntax_ext(\n ) -> Box<dyn base::MacResult + 'static> {\n     let es = match base::get_exprs_from_tts(cx, sp, tts) {\n         Some(e) => e,\n-        None => return base::DummyResult::expr(sp),\n+        None => return DummyResult::any(sp),\n     };\n     let mut accumulator = String::new();\n     let mut missing_literal = vec![];\n@@ -55,9 +55,9 @@ pub fn expand_syntax_ext(\n         let mut err = cx.struct_span_err(missing_literal, \"expected a literal\");\n         err.note(\"only literals (like `\\\"foo\\\"`, `42` and `3.14`) can be passed to `concat!()`\");\n         err.emit();\n-        return base::DummyResult::expr(sp);\n+        return DummyResult::any(sp);\n     } else if has_errors {\n-        return base::DummyResult::expr(sp);\n+        return DummyResult::any(sp);\n     }\n     let sp = sp.apply_mark(cx.current_expansion.id);\n     base::MacEager::expr(cx.expr_str(sp, Symbol::intern(&accumulator)))"}, {"sha": "442f27c78218564a32a9f7d1705a57909bb9675f", "filename": "src/libsyntax_ext/env.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/409df9b530d0aaac7e0de5cfb652d847eedeae30/src%2Flibsyntax_ext%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409df9b530d0aaac7e0de5cfb652d847eedeae30/src%2Flibsyntax_ext%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fenv.rs?ref=409df9b530d0aaac7e0de5cfb652d847eedeae30", "patch": "@@ -16,7 +16,7 @@ pub fn expand_option_env<'cx>(cx: &'cx mut ExtCtxt<'_>,\n                               tts: &[tokenstream::TokenTree])\n                               -> Box<dyn base::MacResult + 'cx> {\n     let var = match get_single_str_from_tts(cx, sp, tts, \"option_env!\") {\n-        None => return DummyResult::expr(sp),\n+        None => return DummyResult::any(sp),\n         Some(v) => v,\n     };\n \n@@ -50,35 +50,35 @@ pub fn expand_env<'cx>(cx: &'cx mut ExtCtxt<'_>,\n     let mut exprs = match get_exprs_from_tts(cx, sp, tts) {\n         Some(ref exprs) if exprs.is_empty() => {\n             cx.span_err(sp, \"env! takes 1 or 2 arguments\");\n-            return DummyResult::expr(sp);\n+            return DummyResult::any(sp);\n         }\n-        None => return DummyResult::expr(sp),\n+        None => return DummyResult::any(sp),\n         Some(exprs) => exprs.into_iter(),\n     };\n \n     let var = match expr_to_string(cx, exprs.next().unwrap(), \"expected string literal\") {\n-        None => return DummyResult::expr(sp),\n+        None => return DummyResult::any(sp),\n         Some((v, _style)) => v,\n     };\n     let msg = match exprs.next() {\n         None => Symbol::intern(&format!(\"environment variable `{}` not defined\", var)),\n         Some(second) => {\n             match expr_to_string(cx, second, \"expected string literal\") {\n-                None => return DummyResult::expr(sp),\n+                None => return DummyResult::any(sp),\n                 Some((s, _style)) => s,\n             }\n         }\n     };\n \n     if exprs.next().is_some() {\n         cx.span_err(sp, \"env! takes 1 or 2 arguments\");\n-        return DummyResult::expr(sp);\n+        return DummyResult::any(sp);\n     }\n \n     let e = match env::var(&*var.as_str()) {\n         Err(_) => {\n             cx.span_err(sp, &msg.as_str());\n-            return DummyResult::expr(sp);\n+            return DummyResult::any(sp);\n         }\n         Ok(s) => cx.expr_str(sp, Symbol::intern(&s)),\n     };"}, {"sha": "d699b3b1a90c2fcf4eaa8c16b1e5c8ce32ea7f8b", "filename": "src/libsyntax_ext/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/409df9b530d0aaac7e0de5cfb652d847eedeae30/src%2Flibsyntax_ext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409df9b530d0aaac7e0de5cfb652d847eedeae30/src%2Flibsyntax_ext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat.rs?ref=409df9b530d0aaac7e0de5cfb652d847eedeae30", "patch": "@@ -805,7 +805,7 @@ fn expand_format_args_impl<'cx>(\n         }\n         Err(mut err) => {\n             err.emit();\n-            DummyResult::expr(sp)\n+            DummyResult::any(sp)\n         }\n     }\n }"}, {"sha": "cbc01b48afd03644d30b10105f9fc4e86307c274", "filename": "src/libsyntax_ext/source_util.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/409df9b530d0aaac7e0de5cfb652d847eedeae30/src%2Flibsyntax_ext%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409df9b530d0aaac7e0de5cfb652d847eedeae30/src%2Flibsyntax_ext%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fsource_util.rs?ref=409df9b530d0aaac7e0de5cfb652d847eedeae30", "patch": "@@ -111,7 +111,7 @@ pub fn expand_include_str(cx: &mut ExtCtxt<'_>, sp: Span, tts: &[tokenstream::To\n                           -> Box<dyn base::MacResult+'static> {\n     let file = match get_single_str_from_tts(cx, sp, tts, \"include_str!\") {\n         Some(f) => f,\n-        None => return DummyResult::expr(sp)\n+        None => return DummyResult::any(sp)\n     };\n     let file = cx.resolve_path(file, sp);\n     match fs::read_to_string(&file) {\n@@ -126,11 +126,11 @@ pub fn expand_include_str(cx: &mut ExtCtxt<'_>, sp: Span, tts: &[tokenstream::To\n         },\n         Err(ref e) if e.kind() == ErrorKind::InvalidData => {\n             cx.span_err(sp, &format!(\"{} wasn't a utf-8 file\", file.display()));\n-            DummyResult::expr(sp)\n+            DummyResult::any(sp)\n         }\n         Err(e) => {\n             cx.span_err(sp, &format!(\"couldn't read {}: {}\", file.display(), e));\n-            DummyResult::expr(sp)\n+            DummyResult::any(sp)\n         }\n     }\n }\n@@ -139,7 +139,7 @@ pub fn expand_include_bytes(cx: &mut ExtCtxt<'_>, sp: Span, tts: &[tokenstream::\n                             -> Box<dyn base::MacResult+'static> {\n     let file = match get_single_str_from_tts(cx, sp, tts, \"include_bytes!\") {\n         Some(f) => f,\n-        None => return DummyResult::expr(sp)\n+        None => return DummyResult::any(sp)\n     };\n     let file = cx.resolve_path(file, sp);\n     match fs::read(&file) {\n@@ -158,7 +158,7 @@ pub fn expand_include_bytes(cx: &mut ExtCtxt<'_>, sp: Span, tts: &[tokenstream::\n         },\n         Err(e) => {\n             cx.span_err(sp, &format!(\"couldn't read {}: {}\", file.display(), e));\n-            DummyResult::expr(sp)\n+            DummyResult::any(sp)\n         }\n     }\n }"}]}