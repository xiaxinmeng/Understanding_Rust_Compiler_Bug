{"sha": "c3b22a2a85466a9aacfc291a38f3addc2bd0aee7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzYjIyYTJhODU0NjZhOWFhY2ZjMjkxYTM4ZjNhZGRjMmJkMGFlZTc=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2017-08-13T21:52:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-08-13T21:52:28Z"}, "message": "Merge pull request #1829 from topecongiro/issue-1046\n\nAllow attributes to stay on the same line with fields", "tree": {"sha": "6ea240e29c8621d5377a8510d6c3b1719ba4eb49", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ea240e29c8621d5377a8510d6c3b1719ba4eb49"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c3b22a2a85466a9aacfc291a38f3addc2bd0aee7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c3b22a2a85466a9aacfc291a38f3addc2bd0aee7", "html_url": "https://github.com/rust-lang/rust/commit/c3b22a2a85466a9aacfc291a38f3addc2bd0aee7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c3b22a2a85466a9aacfc291a38f3addc2bd0aee7/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ee76bec0f6a76b7b26eebdbd5700e9c727a96b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ee76bec0f6a76b7b26eebdbd5700e9c727a96b3", "html_url": "https://github.com/rust-lang/rust/commit/0ee76bec0f6a76b7b26eebdbd5700e9c727a96b3"}, {"sha": "a763f3b75b5e1cecedef5f20fc0e24f1cae7802c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a763f3b75b5e1cecedef5f20fc0e24f1cae7802c", "html_url": "https://github.com/rust-lang/rust/commit/a763f3b75b5e1cecedef5f20fc0e24f1cae7802c"}], "stats": {"total": 496, "additions": 278, "deletions": 218}, "files": [{"sha": "16796b8e93519650cda53413aff733afbee191b0", "filename": "Cargo.lock", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c3b22a2a85466a9aacfc291a38f3addc2bd0aee7/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/c3b22a2a85466a9aacfc291a38f3addc2bd0aee7/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=c3b22a2a85466a9aacfc291a38f3addc2bd0aee7", "patch": "@@ -6,15 +6,15 @@ dependencies = [\n  \"env_logger 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"getopts 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.28 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.29 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_derive 1.0.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"strings 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"term 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"toml 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"toml 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-segmentation 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -72,7 +72,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"libc\"\n-version = \"0.2.28\"\n+version = \"0.2.29\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n@@ -85,7 +85,7 @@ name = \"memchr\"\n version = \"1.0.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"libc 0.2.28 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.29 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -117,12 +117,12 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"serde\"\n-version = \"1.0.10\"\n+version = \"1.0.11\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"serde_derive\"\n-version = \"1.0.10\"\n+version = \"1.0.11\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"quote 0.3.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -147,7 +147,7 @@ dependencies = [\n  \"dtoa 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"itoa 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"num-traits 0.1.40 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -196,10 +196,10 @@ dependencies = [\n \n [[package]]\n name = \"toml\"\n-version = \"0.4.2\"\n+version = \"0.4.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"serde 1.0.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -249,23 +249,23 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum itoa 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"eb2f404fbc66fd9aac13e998248505e7ecb2ad8e44ab6388684c5fb11c6c251c\"\n \"checksum kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7507624b29483431c0ba2d82aece8ca6cdba9382bff4ddd0f7490560c056098d\"\n \"checksum lazy_static 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3b37545ab726dd833ec6420aaba8231c5b320814b9029ad585555d2a03e94fbf\"\n-\"checksum libc 0.2.28 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bb7b49972ee23d8aa1026c365a5b440ba08e35075f18c459980c7395c221ec48\"\n+\"checksum libc 0.2.29 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8a014d9226c2cc402676fbe9ea2e15dd5222cd1dd57f576b5b283178c944a264\"\n \"checksum log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"880f77541efa6e5cc74e76910c9884d9859683118839d6a1dc3b11e63512565b\"\n \"checksum memchr 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1dbccc0e46f1ea47b9f17e6d67c5a96bd27030519c519c9c91327e31275a47b4\"\n \"checksum num-traits 0.1.40 (registry+https://github.com/rust-lang/crates.io-index)\" = \"99843c856d68d8b4313b03a17e33c4bb42ae8f6610ea81b28abe076ac721b9b0\"\n \"checksum quote 0.3.15 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7a6e920b65c65f10b2ae65c831a81a073a89edd28c7cce89475bff467ab4167a\"\n \"checksum regex 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1731164734096285ec2a5ec7fea5248ae2f5485b3feeb0115af4fda2183b2d1b\"\n \"checksum regex-syntax 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ad890a5eef7953f55427c50575c680c42841653abd2b028b68cd223d157f62db\"\n-\"checksum serde 1.0.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"433d7d9f8530d5a939ad5e0e72a6243d2e42a24804f70bf592c679363dcacb2f\"\n-\"checksum serde_derive 1.0.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7b707cf0d4cab852084f573058def08879bb467fda89d99052485e7d00edd624\"\n+\"checksum serde 1.0.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f7726f29ddf9731b17ff113c461e362c381d9d69433f79de4f3dd572488823e9\"\n+\"checksum serde_derive 1.0.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cf823e706be268e73e7747b147aa31c8f633ab4ba31f115efb57e5047c3a76dd\"\n \"checksum serde_derive_internals 0.15.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"37aee4e0da52d801acfbc0cc219eb1eda7142112339726e427926a6f6ee65d3a\"\n \"checksum serde_json 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"48b04779552e92037212c3615370f6bd57a40ebba7f20e554ff9f55e41a69a7b\"\n \"checksum strings 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"da75d8bf2c4d210d63dd09581a041b036001f9f6e03d9b151dbff810fb7ba26a\"\n \"checksum syn 0.11.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d3b891b9015c88c576343b9b3e41c2c11a51c219ef067b264bd9c8aa9b441dad\"\n \"checksum synom 0.11.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a393066ed9010ebaed60b9eafa373d4b1baac186dd7e008555b0f702b51945b6\"\n \"checksum term 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"fa63644f74ce96fbeb9b794f66aff2a52d601cbd5e80f4b97123e3899f4570f1\"\n \"checksum thread_local 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1697c4b57aeeb7a536b647165a2825faddffb1d3bad386d507709bd51a90bb14\"\n-\"checksum toml 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b0601da6c97135c8d330c7a13a013ca6cd4143221b01de2f8d4edc50a9e551c7\"\n+\"checksum toml 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3e5e16033aacf7eead46cbcb62d06cf9d1c2aa1b12faa4039072f7ae5921103b\"\n \"checksum unicode-segmentation 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a8083c594e02b8ae1654ae26f0ade5158b119bd88ad0e8227a5d8fcd72407946\"\n \"checksum unicode-xid 0.0.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8c1f860d7d29cf02cb2f3f359fd35991af3d30bac52c57d265a3c461074cb4dc\"\n \"checksum unreachable 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"382810877fe448991dfc7f0dd6e3ae5d58088fd0ea5e35189655f84e6814fa56\""}, {"sha": "0a716aa308c17adff41acb33da32efb3749dea4d", "filename": "src/comment.rs", "status": "modified", "additions": 88, "deletions": 1, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/c3b22a2a85466a9aacfc291a38f3addc2bd0aee7/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b22a2a85466a9aacfc291a38f3addc2bd0aee7/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=c3b22a2a85466a9aacfc291a38f3addc2bd0aee7", "patch": "@@ -18,7 +18,7 @@ use {Indent, Shape};\n use config::Config;\n use rewrite::RewriteContext;\n use string::{rewrite_string, StringFormat};\n-use utils::wrap_str;\n+use utils::{first_line_width, last_line_width, wrap_str};\n \n fn is_custom_comment(comment: &str) -> bool {\n     if !comment.starts_with(\"//\") {\n@@ -136,6 +136,93 @@ fn comment_style(orig: &str, normalize_comments: bool) -> CommentStyle {\n     }\n }\n \n+pub fn combine_strs_with_missing_comments(\n+    context: &RewriteContext,\n+    prev_str: &str,\n+    next_str: &str,\n+    span: Span,\n+    shape: Shape,\n+    allow_extend: bool,\n+) -> Option<String> {\n+    let mut allow_one_line = !prev_str.contains('\\n') && !next_str.contains('\\n');\n+    let first_sep = if prev_str.is_empty() || next_str.is_empty() {\n+        \"\"\n+    } else {\n+        \" \"\n+    };\n+    let mut one_line_width =\n+        last_line_width(prev_str) + first_line_width(next_str) + first_sep.len();\n+\n+    let original_snippet = context.snippet(span);\n+    let trimmed_snippet = original_snippet.trim();\n+    let indent_str = shape.indent.to_string(context.config);\n+\n+    if trimmed_snippet.is_empty() {\n+        if allow_extend && prev_str.len() + first_sep.len() + next_str.len() <= shape.width {\n+            return Some(format!(\"{}{}{}\", prev_str, first_sep, next_str));\n+        } else {\n+            let sep = if prev_str.is_empty() {\n+                String::new()\n+            } else {\n+                String::from(\"\\n\") + &indent_str\n+            };\n+            return Some(format!(\"{}{}{}\", prev_str, sep, next_str));\n+        }\n+    }\n+\n+    // We have a missing comment between the first expression and the second expression.\n+\n+    // Peek the the original source code and find out whether there is a newline between the first\n+    // expression and the second expression or the missing comment. We will preserve the orginal\n+    // layout whenever possible.\n+    let prefer_same_line = if let Some(pos) = original_snippet.chars().position(|c| c == '/') {\n+        !original_snippet[..pos].contains('\\n')\n+    } else {\n+        !original_snippet.contains('\\n')\n+    };\n+\n+    let missing_comment = try_opt!(rewrite_comment(\n+        trimmed_snippet,\n+        false,\n+        shape,\n+        context.config\n+    ));\n+    one_line_width -= first_sep.len();\n+    let first_sep = if prev_str.is_empty() || missing_comment.is_empty() {\n+        String::new()\n+    } else {\n+        let one_line_width = last_line_width(prev_str) + first_line_width(&missing_comment) + 1;\n+        if prefer_same_line && one_line_width <= shape.width {\n+            String::from(\" \")\n+        } else {\n+            format!(\"\\n{}\", indent_str)\n+        }\n+    };\n+    let second_sep = if missing_comment.is_empty() || next_str.is_empty() {\n+        String::new()\n+    } else {\n+        if missing_comment.starts_with(\"//\") {\n+            format!(\"\\n{}\", indent_str)\n+        } else {\n+            one_line_width += missing_comment.len() + first_sep.len() + 1;\n+            allow_one_line &= !missing_comment.starts_with(\"//\") && !missing_comment.contains('\\n');\n+            if prefer_same_line && allow_one_line && one_line_width <= shape.width {\n+                String::from(\" \")\n+            } else {\n+                format!(\"\\n{}\", indent_str)\n+            }\n+        }\n+    };\n+    Some(format!(\n+        \"{}{}{}{}{}\",\n+        prev_str,\n+        first_sep,\n+        missing_comment,\n+        second_sep,\n+        next_str,\n+    ))\n+}\n+\n pub fn rewrite_comment(\n     orig: &str,\n     block_style: bool,"}, {"sha": "c785f4883c4e895e6d54eca5c816efc432618d58", "filename": "src/expr.rs", "status": "modified", "additions": 9, "deletions": 57, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/c3b22a2a85466a9aacfc291a38f3addc2bd0aee7/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b22a2a85466a9aacfc291a38f3addc2bd0aee7/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=c3b22a2a85466a9aacfc291a38f3addc2bd0aee7", "patch": "@@ -19,7 +19,8 @@ use syntax::parse::classify;\n use {Indent, Shape, Spanned};\n use chains::rewrite_chain;\n use codemap::{LineRangeUtils, SpanUtils};\n-use comment::{contains_comment, recover_comment_removed, rewrite_comment, FindUncommented};\n+use comment::{combine_strs_with_missing_comments, contains_comment, recover_comment_removed,\n+              rewrite_comment, FindUncommented};\n use config::{Config, ControlBraceStyle, IndentStyle, MultilineStyle, Style};\n use items::{span_hi_for_arg, span_lo_for_arg};\n use lists::{definitive_tactic, itemize_list, shape_for_tactic, struct_lit_formatting,\n@@ -49,61 +50,6 @@ pub enum ExprType {\n     SubExpression,\n }\n \n-fn combine_attr_and_expr(\n-    context: &RewriteContext,\n-    shape: Shape,\n-    expr: &ast::Expr,\n-    expr_str: &str,\n-) -> Option<String> {\n-    let attrs = outer_attributes(&expr.attrs);\n-    let attr_str = try_opt!(attrs.rewrite(context, shape));\n-    let separator = if attr_str.is_empty() {\n-        String::new()\n-    } else {\n-        // Try to recover comments between the attributes and the expression if available.\n-        let missing_snippet = context.snippet(mk_sp(attrs[attrs.len() - 1].span.hi, expr.span.lo));\n-        let comment_opening_pos = missing_snippet.chars().position(|c| c == '/');\n-        let prefer_same_line = if let Some(pos) = comment_opening_pos {\n-            !missing_snippet[..pos].contains('\\n')\n-        } else {\n-            !missing_snippet.contains('\\n')\n-        };\n-\n-        let trimmed = missing_snippet.trim();\n-        let missing_comment = if trimmed.is_empty() {\n-            String::new()\n-        } else {\n-            try_opt!(rewrite_comment(&trimmed, false, shape, context.config))\n-        };\n-\n-        // 2 = ` ` + ` `\n-        let one_line_width =\n-            attr_str.len() + missing_comment.len() + 2 + first_line_width(expr_str);\n-        let attr_expr_separator = if prefer_same_line && !missing_comment.starts_with(\"//\") &&\n-            one_line_width <= shape.width\n-        {\n-            String::from(\" \")\n-        } else {\n-            format!(\"\\n{}\", shape.indent.to_string(context.config))\n-        };\n-\n-        if missing_comment.is_empty() {\n-            attr_expr_separator\n-        } else {\n-            // 1 = ` `\n-            let one_line_width =\n-                last_line_width(&attr_str) + 1 + first_line_width(&missing_comment);\n-            let attr_comment_separator = if prefer_same_line && one_line_width <= shape.width {\n-                String::from(\" \")\n-            } else {\n-                format!(\"\\n{}\", shape.indent.to_string(context.config))\n-            };\n-            attr_comment_separator + &missing_comment + &attr_expr_separator\n-        }\n-    };\n-    Some(format!(\"{}{}{}\", attr_str, separator, expr_str))\n-}\n-\n pub fn format_expr(\n     expr: &ast::Expr,\n     expr_type: ExprType,\n@@ -355,7 +301,13 @@ pub fn format_expr(\n             recover_comment_removed(expr_str, expr.span, context, shape)\n         })\n         .and_then(|expr_str| {\n-            combine_attr_and_expr(context, shape, expr, &expr_str)\n+            let attrs = outer_attributes(&expr.attrs);\n+            let attrs_str = try_opt!(attrs.rewrite(context, shape));\n+            let span = mk_sp(\n+                attrs.last().map_or(expr.span.lo, |attr| attr.span.hi),\n+                expr.span.lo,\n+            );\n+            combine_strs_with_missing_comments(context, &attrs_str, &expr_str, span, shape, false)\n         })\n }\n "}, {"sha": "302d15ee8aaadb36419b76678ba7b4cef6289b11", "filename": "src/items.rs", "status": "modified", "additions": 86, "deletions": 115, "changes": 201, "blob_url": "https://github.com/rust-lang/rust/blob/c3b22a2a85466a9aacfc291a38f3addc2bd0aee7/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b22a2a85466a9aacfc291a38f3addc2bd0aee7/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=c3b22a2a85466a9aacfc291a38f3addc2bd0aee7", "patch": "@@ -18,7 +18,8 @@ use syntax::codemap::{BytePos, Span};\n \n use {Indent, Shape, Spanned};\n use codemap::{LineRangeUtils, SpanUtils};\n-use comment::{contains_comment, recover_comment_removed, rewrite_comment, FindUncommented};\n+use comment::{combine_strs_with_missing_comments, contains_comment, recover_comment_removed,\n+              rewrite_comment, FindUncommented};\n use config::{BraceStyle, Config, Density, IndentStyle, ReturnIndent, Style};\n use expr::{format_expr, is_empty_block, is_simple_block_stmt, rewrite_assign_rhs,\n            rewrite_call_inner, ExprType};\n@@ -28,8 +29,9 @@ use rewrite::{Rewrite, RewriteContext};\n use types::join_bounds;\n use utils::{colon_spaces, contains_skip, end_typaram, first_line_width, format_abi,\n             format_constness, format_defaultness, format_mutability, format_unsafety,\n-            format_visibility, last_line_used_width, last_line_width, mk_sp, semicolon_for_expr,\n-            stmt_expr, trim_newlines, trimmed_last_line_width, wrap_str};\n+            format_visibility, is_attributes_extendable, last_line_contains_single_line_comment,\n+            last_line_used_width, last_line_width, mk_sp, semicolon_for_expr, stmt_expr,\n+            trim_newlines, trimmed_last_line_width, wrap_str};\n use vertical::rewrite_with_alignment;\n use visitor::FmtVisitor;\n \n@@ -501,32 +503,19 @@ impl<'a> FmtVisitor<'a> {\n \n         let context = self.get_context();\n         let indent = self.block_indent;\n-        let mut result = try_opt!(\n-            field\n-                .node\n-                .attrs\n-                .rewrite(&context, Shape::indented(indent, self.config))\n-        );\n-        if !result.is_empty() {\n-            let shape = Shape {\n-                width: context.config.max_width(),\n-                indent: self.block_indent,\n-                offset: self.block_indent.alignment,\n-            };\n-            let missing_comment = rewrite_missing_comment_on_field(\n-                &context,\n-                shape,\n-                field.node.attrs[field.node.attrs.len() - 1].span.hi,\n-                field.span.lo,\n-                &mut result,\n-            ).unwrap_or(String::new());\n-            result.push_str(&missing_comment);\n-        }\n+        let shape = Shape::indented(indent, self.config);\n+        let attrs_str = try_opt!(field.node.attrs.rewrite(&context, shape));\n+        let lo = field\n+            .node\n+            .attrs\n+            .last()\n+            .map_or(field.span.lo, |attr| attr.span.hi);\n+        let span = mk_sp(lo, field.span.lo);\n \n         let variant_body = match field.node.data {\n             ast::VariantData::Tuple(..) | ast::VariantData::Struct(..) => {\n                 // FIXME: Should limit the width, as we have a trailing comma\n-                format_struct(\n+                try_opt!(format_struct(\n                     &context,\n                     \"\",\n                     field.node.name,\n@@ -536,29 +525,37 @@ impl<'a> FmtVisitor<'a> {\n                     field.span,\n                     indent,\n                     Some(self.config.struct_variant_width()),\n-                )\n+                ))\n             }\n-            ast::VariantData::Unit(..) => {\n-                let tag = if let Some(ref expr) = field.node.disr_expr {\n+            ast::VariantData::Unit(..) => if let Some(ref expr) = field.node.disr_expr {\n+                let one_line_width =\n+                    field.node.name.to_string().len() + self.snippet(expr.span).len() + 3;\n+                if one_line_width <= shape.width {\n                     format!(\"{} = {}\", field.node.name, self.snippet(expr.span))\n                 } else {\n-                    field.node.name.to_string()\n-                };\n-\n-                wrap_str(\n-                    tag,\n-                    self.config.max_width(),\n-                    Shape::indented(indent, self.config),\n-                )\n-            }\n+                    format!(\n+                        \"{}\\n{}{}\",\n+                        field.node.name,\n+                        shape\n+                            .indent\n+                            .block_indent(self.config)\n+                            .to_string(self.config),\n+                        self.snippet(expr.span)\n+                    )\n+                }\n+            } else {\n+                String::from(field.node.name.to_string())\n+            },\n         };\n \n-        if let Some(variant_str) = variant_body {\n-            result.push_str(&variant_str);\n-            Some(result)\n-        } else {\n-            None\n-        }\n+        combine_strs_with_missing_comments(\n+            &context,\n+            &attrs_str,\n+            &variant_body,\n+            span,\n+            shape,\n+            is_attributes_extendable(&attrs_str),\n+        )\n     }\n }\n \n@@ -1369,68 +1366,15 @@ fn type_annotation_spacing(config: &Config) -> (&str, &str) {\n     )\n }\n \n-fn rewrite_missing_comment_on_field(\n-    context: &RewriteContext,\n-    shape: Shape,\n-    lo: BytePos,\n-    hi: BytePos,\n-    result: &mut String,\n-) -> Option<String> {\n-    let possibly_comment_snippet = context.snippet(mk_sp(lo, hi));\n-    let newline_index = possibly_comment_snippet.find('\\n');\n-    let comment_index = possibly_comment_snippet.find('/');\n-    match (newline_index, comment_index) {\n-        (Some(i), Some(j)) if i > j => result.push(' '),\n-        _ => {\n-            result.push('\\n');\n-            result.push_str(&shape.indent.to_string(context.config));\n-        }\n-    }\n-    let trimmed = possibly_comment_snippet.trim();\n-    if trimmed.is_empty() {\n-        None\n-    } else {\n-        rewrite_comment(trimmed, false, shape, context.config).map(|s| {\n-            format!(\"{}\\n{}\", s, shape.indent.to_string(context.config))\n-        })\n-    }\n-}\n-\n pub fn rewrite_struct_field_prefix(\n     context: &RewriteContext,\n     field: &ast::StructField,\n-    shape: Shape,\n ) -> Option<String> {\n     let vis = format_visibility(&field.vis);\n-    let mut attr_str = try_opt!(\n-        field\n-            .attrs\n-            .rewrite(context, Shape::indented(shape.indent, context.config))\n-    );\n-    // Try format missing comments after attributes\n-    let missing_comment = if !field.attrs.is_empty() {\n-        rewrite_missing_comment_on_field(\n-            context,\n-            shape,\n-            field.attrs[field.attrs.len() - 1].span.hi,\n-            field.span.lo,\n-            &mut attr_str,\n-        ).unwrap_or(String::new())\n-    } else {\n-        String::new()\n-    };\n-\n     let type_annotation_spacing = type_annotation_spacing(context.config);\n     Some(match field.ident {\n-        Some(name) => format!(\n-            \"{}{}{}{}{}:\",\n-            attr_str,\n-            missing_comment,\n-            vis,\n-            name,\n-            type_annotation_spacing.0\n-        ),\n-        None => format!(\"{}{}{}\", attr_str, missing_comment, vis),\n+        Some(name) => format!(\"{}{}{}:\", vis, name, type_annotation_spacing.0),\n+        None => format!(\"{}\", vis),\n     })\n }\n \n@@ -1466,55 +1410,86 @@ pub fn rewrite_struct_field(\n     }\n \n     let type_annotation_spacing = type_annotation_spacing(context.config);\n-    let prefix = try_opt!(rewrite_struct_field_prefix(context, field, shape));\n+    let prefix = try_opt!(rewrite_struct_field_prefix(context, field));\n \n-    // Try to put everything on a single line.\n-    let last_line_width = last_line_width(&prefix);\n+    let attrs_str = try_opt!(field.attrs.rewrite(context, shape));\n+    let missing_span = if field.attrs.is_empty() {\n+        mk_sp(field.span.lo, field.span.lo)\n+    } else {\n+        mk_sp(field.attrs.last().unwrap().span.hi, field.span.lo)\n+    };\n     let mut spacing = String::from(if field.ident.is_some() {\n         type_annotation_spacing.1\n     } else {\n         \"\"\n     });\n-    let lhs_offset = lhs_max_width.checked_sub(last_line_width).unwrap_or(0);\n+    // Try to put everything on a single line.\n+    let attr_prefix = try_opt!(combine_strs_with_missing_comments(\n+        context,\n+        &attrs_str,\n+        &prefix,\n+        missing_span,\n+        shape,\n+        is_attributes_extendable(&attrs_str),\n+    ));\n+    let overhead = last_line_width(&attr_prefix);\n+    let lhs_offset = lhs_max_width.checked_sub(overhead).unwrap_or(0);\n     for _ in 0..lhs_offset {\n         spacing.push(' ');\n     }\n-    let ty_rewritten = rewrite_struct_field_type(context, last_line_width, field, &spacing, shape);\n+    // In this extreme case we will be missing a space betweeen an attribute and a field.\n+    if prefix.is_empty() && !attrs_str.is_empty() && is_attributes_extendable(&attrs_str) &&\n+        spacing.is_empty()\n+    {\n+        spacing.push(' ');\n+    }\n+    let ty_rewritten = rewrite_struct_field_type(context, overhead, field, &spacing, shape);\n     if let Some(ref ty) = ty_rewritten {\n         if !ty.contains('\\n') {\n-            return Some(prefix + &ty);\n+            return Some(attr_prefix + &ty);\n         }\n     }\n \n     // We must use multiline.\n+    let last_line_width = last_line_width(&prefix);\n+    let ty_rewritten = rewrite_struct_field_type(context, last_line_width, field, &spacing, shape);\n+\n     let type_offset = shape.indent.block_indent(context.config);\n     let rewrite_type_in_next_line = || {\n         field\n             .ty\n             .rewrite(context, Shape::indented(type_offset, context.config))\n     };\n \n-    match ty_rewritten {\n+    let field_str = match ty_rewritten {\n         // If we start from the next line and type fits in a single line, then do so.\n         Some(ref ty) => match rewrite_type_in_next_line() {\n-            Some(ref new_ty) if !new_ty.contains('\\n') => Some(format!(\n+            Some(ref new_ty) if !new_ty.contains('\\n') => format!(\n                 \"{}\\n{}{}\",\n                 prefix,\n                 type_offset.to_string(&context.config),\n                 &new_ty\n-            )),\n-            _ => Some(prefix + &ty),\n+            ),\n+            _ => prefix + &ty,\n         },\n         _ => {\n             let ty = try_opt!(rewrite_type_in_next_line());\n-            Some(format!(\n+            format!(\n                 \"{}\\n{}{}\",\n                 prefix,\n                 type_offset.to_string(&context.config),\n                 &ty\n-            ))\n+            )\n         }\n-    }\n+    };\n+    combine_strs_with_missing_comments(\n+        context,\n+        &attrs_str,\n+        &field_str,\n+        missing_span,\n+        shape,\n+        is_attributes_extendable(&attrs_str),\n+    )\n }\n \n pub fn rewrite_static(\n@@ -2148,10 +2123,6 @@ impl WhereClauseOption {\n     }\n }\n \n-fn last_line_contains_single_line_comment(s: &str) -> bool {\n-    s.lines().last().map_or(false, |l| l.contains(\"//\"))\n-}\n-\n fn rewrite_args(\n     context: &RewriteContext,\n     args: &[ast::Arg],"}, {"sha": "d5d2db33fc522602a798197c2e37fd3cb4c5773d", "filename": "src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c3b22a2a85466a9aacfc291a38f3addc2bd0aee7/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b22a2a85466a9aacfc291a38f3addc2bd0aee7/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=c3b22a2a85466a9aacfc291a38f3addc2bd0aee7", "patch": "@@ -535,7 +535,7 @@ impl fmt::Display for FormatReport {\n // Formatting which depends on the AST.\n fn format_ast<F>(\n     krate: &ast::Crate,\n-    mut parse_session: &mut ParseSess,\n+    parse_session: &mut ParseSess,\n     main_file: &Path,\n     config: &Config,\n     codemap: &Rc<CodeMap>,\n@@ -796,7 +796,7 @@ pub enum Input {\n }\n \n pub fn run(input: Input, config: &Config) -> Summary {\n-    let mut out = &mut stdout();\n+    let out = &mut stdout();\n     output_header(out, config.write_mode()).ok();\n     match format_input(input, config, Some(out)) {\n         Ok((summary, _, report)) => {"}, {"sha": "ae2a16510b8eb76b0a3f81683752202970f38416", "filename": "src/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3b22a2a85466a9aacfc291a38f3addc2bd0aee7/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b22a2a85466a9aacfc291a38f3addc2bd0aee7/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=c3b22a2a85466a9aacfc291a38f3addc2bd0aee7", "patch": "@@ -68,7 +68,7 @@ pub fn rewrite_macro(\n     shape: Shape,\n     position: MacroPosition,\n ) -> Option<String> {\n-    let mut context = &mut context.clone();\n+    let context = &mut context.clone();\n     context.inside_macro = true;\n     if context.config.use_try_shorthand() {\n         if let Some(expr) = convert_try_mac(mac, context) {"}, {"sha": "9a31289e8eb209729abd5987a6160abadb0928bb", "filename": "src/utils.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c3b22a2a85466a9aacfc291a38f3addc2bd0aee7/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b22a2a85466a9aacfc291a38f3addc2bd0aee7/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=c3b22a2a85466a9aacfc291a38f3addc2bd0aee7", "patch": "@@ -116,6 +116,16 @@ pub fn outer_attributes(attrs: &[ast::Attribute]) -> Vec<ast::Attribute> {\n     filter_attributes(attrs, ast::AttrStyle::Outer)\n }\n \n+#[inline]\n+pub fn last_line_contains_single_line_comment(s: &str) -> bool {\n+    s.lines().last().map_or(false, |l| l.contains(\"//\"))\n+}\n+\n+#[inline]\n+pub fn is_attributes_extendable(attrs_str: &str) -> bool {\n+    !attrs_str.contains('\\n') && !last_line_contains_single_line_comment(&attrs_str)\n+}\n+\n // The width of the first line in s.\n #[inline]\n pub fn first_line_width(s: &str) -> usize {"}, {"sha": "1a62cad77570dc218eddae1082ea096c6c486f52", "filename": "src/vertical.rs", "status": "modified", "additions": 32, "deletions": 8, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/c3b22a2a85466a9aacfc291a38f3addc2bd0aee7/src%2Fvertical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b22a2a85466a9aacfc291a38f3addc2bd0aee7/src%2Fvertical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvertical.rs?ref=c3b22a2a85466a9aacfc291a38f3addc2bd0aee7", "patch": "@@ -17,12 +17,12 @@ use syntax::codemap::{BytePos, Span};\n \n use {Indent, Shape, Spanned};\n use codemap::SpanUtils;\n-use comment::contains_comment;\n+use comment::{combine_strs_with_missing_comments, contains_comment};\n use expr::rewrite_field;\n use items::{rewrite_struct_field, rewrite_struct_field_prefix};\n use lists::{definitive_tactic, itemize_list, write_list, ListFormatting, ListTactic, Separator};\n use rewrite::{Rewrite, RewriteContext};\n-use utils::{contains_skip, mk_sp};\n+use utils::{contains_skip, is_attributes_extendable, mk_sp};\n \n pub trait AlignedItem {\n     fn skip(&self) -> bool;\n@@ -46,7 +46,22 @@ impl AlignedItem for ast::StructField {\n     }\n \n     fn rewrite_prefix(&self, context: &RewriteContext, shape: Shape) -> Option<String> {\n-        rewrite_struct_field_prefix(context, self, shape)\n+        let attrs_str = try_opt!(self.attrs.rewrite(context, shape));\n+        let missing_span = if self.attrs.is_empty() {\n+            mk_sp(self.span.lo, self.span.lo)\n+        } else {\n+            mk_sp(self.attrs.last().unwrap().span.hi, self.span.lo)\n+        };\n+        rewrite_struct_field_prefix(context, self).and_then(|field_str| {\n+            combine_strs_with_missing_comments(\n+                context,\n+                &attrs_str,\n+                &field_str,\n+                missing_span,\n+                shape,\n+                is_attributes_extendable(&attrs_str),\n+            )\n+        })\n     }\n \n     fn rewrite_aligned_item(\n@@ -69,12 +84,21 @@ impl AlignedItem for ast::Field {\n     }\n \n     fn rewrite_prefix(&self, context: &RewriteContext, shape: Shape) -> Option<String> {\n-        let mut attrs_str = try_opt!(self.attrs.rewrite(context, shape));\n-        if !attrs_str.is_empty() {\n-            attrs_str.push_str(&format!(\"\\n{}\", shape.indent.to_string(context.config)));\n-        };\n+        let attrs_str = try_opt!(self.attrs.rewrite(context, shape));\n         let name = &self.ident.node.to_string();\n-        Some(format!(\"{}{}\", attrs_str, name))\n+        let missing_span = if self.attrs.is_empty() {\n+            mk_sp(self.span.lo, self.span.lo)\n+        } else {\n+            mk_sp(self.attrs.last().unwrap().span.hi, self.span.lo)\n+        };\n+        combine_strs_with_missing_comments(\n+            context,\n+            &attrs_str,\n+            name,\n+            missing_span,\n+            shape,\n+            is_attributes_extendable(&attrs_str),\n+        )\n     }\n \n     fn rewrite_aligned_item("}, {"sha": "0c8ed5536ecda9459706c8693d69fcc31086bfc6", "filename": "tests/source/enum.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c3b22a2a85466a9aacfc291a38f3addc2bd0aee7/tests%2Fsource%2Fenum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b22a2a85466a9aacfc291a38f3addc2bd0aee7/tests%2Fsource%2Fenum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fenum.rs?ref=c3b22a2a85466a9aacfc291a38f3addc2bd0aee7", "patch": "@@ -125,3 +125,14 @@ enum Loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n enum Looooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong {}\n enum Loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong {}\n enum Loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong { Foo }\n+\n+// #1046\n+pub enum Entry<'a, K: 'a, V: 'a> {\n+    Vacant(\n+        #[ stable( feature = \"rust1\", since = \"1.0.0\" ) ]   VacantEntry<'a, K, V>,\n+    ),\n+    Occupied(\n+        #[ stable( feature = \"rust1\", since = \"1.0.0\" ) ]\n+         OccupiedEntry<'a, K, V>,\n+    ),\n+}"}, {"sha": "fc2dfc11ad97de4f7693cb86f72479e136b28c53", "filename": "tests/target/attrib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c3b22a2a85466a9aacfc291a38f3addc2bd0aee7/tests%2Ftarget%2Fattrib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b22a2a85466a9aacfc291a38f3addc2bd0aee7/tests%2Ftarget%2Fattrib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fattrib.rs?ref=c3b22a2a85466a9aacfc291a38f3addc2bd0aee7", "patch": "@@ -45,8 +45,7 @@ impl Bar {\n \n // #984\n struct Foo {\n-    #[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]\n-    foo: usize,\n+    #[derive(Clone, PartialEq, Debug, Deserialize, Serialize)] foo: usize,\n }\n \n // #1668"}, {"sha": "da933a75c7d300755ba07bebf3999d7f0d39d13b", "filename": "tests/target/configs-struct_field_align_threshold-20.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c3b22a2a85466a9aacfc291a38f3addc2bd0aee7/tests%2Ftarget%2Fconfigs-struct_field_align_threshold-20.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b22a2a85466a9aacfc291a38f3addc2bd0aee7/tests%2Ftarget%2Fconfigs-struct_field_align_threshold-20.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-struct_field_align_threshold-20.rs?ref=c3b22a2a85466a9aacfc291a38f3addc2bd0aee7", "patch": "@@ -40,8 +40,7 @@ pub struct Foo {\n     f :   SomeType, // Comment beside a field\n     f: SomeType, // Comment beside a field\n     // Comment on a field\n-    #[AnAttribute]\n-    g: SomeOtherType,\n+    #[AnAttribute] g: SomeOtherType,\n     /// A doc comment on a field\n     h: AThirdType,\n     pub i: TypeForPublicField,"}, {"sha": "393ae5232ec0a41665f420a17004420e6a582e42", "filename": "tests/target/enum.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c3b22a2a85466a9aacfc291a38f3addc2bd0aee7/tests%2Ftarget%2Fenum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b22a2a85466a9aacfc291a38f3addc2bd0aee7/tests%2Ftarget%2Fenum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fenum.rs?ref=c3b22a2a85466a9aacfc291a38f3addc2bd0aee7", "patch": "@@ -24,8 +24,7 @@ enum EmtpyWithComment {\n // C-style enum\n enum Bar {\n     A = 1,\n-    #[someAttr(test)]\n-    B = 2, // comment\n+    #[someAttr(test)] B = 2, // comment\n     C,\n }\n \n@@ -43,8 +42,7 @@ enum StructLikeVariants {\n     StructLike {\n         x: i32, // Test comment\n         // Pre-comment\n-        #[Attr50]\n-        y: SomeType, // Aanother Comment\n+        #[Attr50] y: SomeType, // Aanother Comment\n     },\n     SL { a: A },\n }\n@@ -98,7 +96,7 @@ enum EmtpyWithComment {\n }\n \n enum TestFormatFails {\n-    AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n+    AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA,\n }\n \n fn nested_enum_test() {\n@@ -127,7 +125,7 @@ fn nested_enum_test() {\n                   * AAAAAAAAAAAAAAAAAA */\n         }\n         enum TestNestedFormatFail {\n-            AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n+            AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA,\n         }\n     }\n }\n@@ -169,3 +167,13 @@ enum Loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n {\n     Foo,\n }\n+\n+// #1046\n+pub enum Entry<'a, K: 'a, V: 'a> {\n+    Vacant(\n+        #[stable(feature = \"rust1\", since = \"1.0.0\")] VacantEntry<'a, K, V>,\n+    ),\n+    Occupied(\n+        #[stable(feature = \"rust1\", since = \"1.0.0\")] OccupiedEntry<'a, K, V>,\n+    ),\n+}"}, {"sha": "f80f6843fe253ccb75938796b067e98e4d4b9d25", "filename": "tests/target/macros.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c3b22a2a85466a9aacfc291a38f3addc2bd0aee7/tests%2Ftarget%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b22a2a85466a9aacfc291a38f3addc2bd0aee7/tests%2Ftarget%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmacros.rs?ref=c3b22a2a85466a9aacfc291a38f3addc2bd0aee7", "patch": "@@ -141,7 +141,10 @@ fn issue1178() {\n         (#[$attr:meta] $name:ident) => {}\n     }\n \n-    foo!(#[doc = \"bar\"] baz);\n+    foo!(\n+        #[doc = \"bar\"]\n+        baz\n+    );\n }\n fn issue1739() {\n     sql_function!("}, {"sha": "0a863ca4979721e3f5df2ff14ac68df7e9787bd9", "filename": "tests/target/struct-field-attributes.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c3b22a2a85466a9aacfc291a38f3addc2bd0aee7/tests%2Ftarget%2Fstruct-field-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b22a2a85466a9aacfc291a38f3addc2bd0aee7/tests%2Ftarget%2Fstruct-field-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fstruct-field-attributes.rs?ref=c3b22a2a85466a9aacfc291a38f3addc2bd0aee7", "patch": "@@ -4,8 +4,7 @@\n struct Foo {\n     bar: u64,\n \n-    #[cfg(test)]\n-    qux: u64,\n+    #[cfg(test)] qux: u64,\n }\n \n fn do_something() -> Foo {\n@@ -24,8 +23,7 @@ fn main() {\n // #1462\n struct Foo {\n     foo: usize,\n-    #[cfg(feature = \"include-bar\")]\n-    bar: usize,\n+    #[cfg(feature = \"include-bar\")] bar: usize,\n }\n \n fn new_foo() -> Foo {"}, {"sha": "a4c26269f8e03758a68e8b1f56ed445590f14096", "filename": "tests/target/structs.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c3b22a2a85466a9aacfc291a38f3addc2bd0aee7/tests%2Ftarget%2Fstructs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b22a2a85466a9aacfc291a38f3addc2bd0aee7/tests%2Ftarget%2Fstructs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fstructs.rs?ref=c3b22a2a85466a9aacfc291a38f3addc2bd0aee7", "patch": "@@ -8,8 +8,7 @@ pub struct Foo {\n     f :   SomeType, // Comment beside a field\n     f: SomeType, // Comment beside a field\n     // Comment on a field\n-    #[AnAttribute]\n-    g: SomeOtherType,\n+    #[AnAttribute] g: SomeOtherType,\n     /// A doc comment on a field\n     h: AThirdType,\n     pub i: TypeForPublicField,"}, {"sha": "cff00d064ff495f2a63e7a4536331f71e520ae94", "filename": "tests/target/unions.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c3b22a2a85466a9aacfc291a38f3addc2bd0aee7/tests%2Ftarget%2Funions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b22a2a85466a9aacfc291a38f3addc2bd0aee7/tests%2Ftarget%2Funions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Funions.rs?ref=c3b22a2a85466a9aacfc291a38f3addc2bd0aee7", "patch": "@@ -8,8 +8,7 @@ pub union Foo {\n     f :   SomeType, // Comment beside a field\n     f: SomeType, // Comment beside a field\n     // Comment on a field\n-    #[AnAttribute]\n-    g: SomeOtherType,\n+    #[AnAttribute] g: SomeOtherType,\n     /// A doc comment on a field\n     h: AThirdType,\n     pub i: TypeForPublicField,"}]}