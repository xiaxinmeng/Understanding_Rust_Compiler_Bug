{"sha": "15df2289ea1b9e90eaa37890dcecc155946bb6ac", "node_id": "C_kwDOAAsO6NoAKDE1ZGYyMjg5ZWExYjllOTBlYWEzNzg5MGRjZWNjMTU1OTQ2YmI2YWM", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-02-07T15:29:45Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-06-28T16:48:49Z"}, "message": "Code cleanup", "tree": {"sha": "c5942a9bde0ecb55efe25fb3e104f5180d3c0dee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c5942a9bde0ecb55efe25fb3e104f5180d3c0dee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15df2289ea1b9e90eaa37890dcecc155946bb6ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15df2289ea1b9e90eaa37890dcecc155946bb6ac", "html_url": "https://github.com/rust-lang/rust/commit/15df2289ea1b9e90eaa37890dcecc155946bb6ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15df2289ea1b9e90eaa37890dcecc155946bb6ac/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9788107931ed6d86fc14cebca3d15b7da0d082c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/9788107931ed6d86fc14cebca3d15b7da0d082c4", "html_url": "https://github.com/rust-lang/rust/commit/9788107931ed6d86fc14cebca3d15b7da0d082c4"}], "stats": {"total": 69, "additions": 29, "deletions": 40}, "files": [{"sha": "e80ee6af65020928cee8ab681007f492dc18f143", "filename": "clippy_lints/src/dereference.rs", "status": "modified", "additions": 26, "deletions": 31, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/15df2289ea1b9e90eaa37890dcecc155946bb6ac/clippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15df2289ea1b9e90eaa37890dcecc155946bb6ac/clippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdereference.rs?ref=15df2289ea1b9e90eaa37890dcecc155946bb6ac", "patch": "@@ -6,8 +6,9 @@ use clippy_utils::{get_parent_expr, is_lint_allowed, path_to_local, walk_to_expr\n use rustc_ast::util::parser::{PREC_POSTFIX, PREC_PREFIX};\n use rustc_data_structures::fx::FxIndexMap;\n use rustc_errors::Applicability;\n+use rustc_hir::intravisit::{walk_ty, Visitor};\n use rustc_hir::{\n-    self as hir, BindingAnnotation, Body, BodyId, BorrowKind, Expr, ExprKind, FnRetTy, GenericArg, HirId, ImplItem,\n+    self as hir, BindingAnnotation, Body, BodyId, BorrowKind, Expr, ExprKind, GenericArg, HirId, ImplItem,\n     ImplItemKind, Item, ItemKind, Local, MatchSource, Mutability, Node, Pat, PatKind, Path, QPath, TraitItem,\n     TraitItemKind, TyKind, UnOp,\n };\n@@ -870,38 +871,32 @@ fn binding_ty_auto_deref_stability(ty: &hir::Ty<'_>, precedence: i8) -> Position\n // Checks whether a type is inferred at some point.\n // e.g. `_`, `Box<_>`, `[_]`\n fn ty_contains_infer(ty: &hir::Ty<'_>) -> bool {\n-    match &ty.kind {\n-        TyKind::Slice(ty) | TyKind::Array(ty, _) => ty_contains_infer(ty),\n-        TyKind::Ptr(ty) | TyKind::Rptr(_, ty) => ty_contains_infer(ty.ty),\n-        TyKind::Tup(tys) => tys.iter().any(ty_contains_infer),\n-        TyKind::BareFn(ty) => {\n-            if ty.decl.inputs.iter().any(ty_contains_infer) {\n-                return true;\n-            }\n-            if let FnRetTy::Return(ty) = &ty.decl.output {\n-                ty_contains_infer(ty)\n+    struct V(bool);\n+    impl Visitor<'_> for V {\n+        fn visit_ty(&mut self, ty: &hir::Ty<'_>) {\n+            if self.0\n+                || matches!(\n+                    ty.kind,\n+                    TyKind::OpaqueDef(..) | TyKind::Infer | TyKind::Typeof(_) | TyKind::Err\n+                )\n+            {\n+                self.0 = true;\n             } else {\n-                false\n+                walk_ty(self, ty);\n             }\n-        },\n-        &TyKind::Path(\n-            QPath::TypeRelative(_, path)\n-            | QPath::Resolved(\n-                _,\n-                Path {\n-                    segments: [.., path], ..\n-                },\n-            ),\n-        ) => path.args.map_or(false, |args| {\n-            args.args.iter().any(|arg| match arg {\n-                GenericArg::Infer(_) => true,\n-                GenericArg::Type(ty) => ty_contains_infer(ty),\n-                _ => false,\n-            })\n-        }),\n-        TyKind::Path(_) | TyKind::OpaqueDef(..) | TyKind::Infer | TyKind::Typeof(_) | TyKind::Err => true,\n-        TyKind::Never | TyKind::TraitObject(..) => false,\n+        }\n+\n+        fn visit_generic_arg(&mut self, arg: &GenericArg<'_>) {\n+            if self.0 || matches!(arg, GenericArg::Infer(_)) {\n+                self.0 = true;\n+            } else if let GenericArg::Type(ty) = arg {\n+                self.visit_ty(ty);\n+            }\n+        }\n     }\n+    let mut v = V(false);\n+    v.visit_ty(ty);\n+    v.0\n }\n \n // Checks whether a type is stable when switching to auto dereferencing,\n@@ -951,7 +946,7 @@ fn param_auto_deref_stability(ty: Ty<'_>, precedence: i8) -> Position {\n \n fn ty_contains_field(ty: Ty<'_>, name: Symbol) -> bool {\n     if let ty::Adt(adt, _) = *ty.kind() {\n-        adt.is_struct() && adt.non_enum_variant().fields.iter().any(|f| f.name == name)\n+        adt.is_struct() && adt.all_fields().any(|f| f.name == name)\n     } else {\n         false\n     }"}, {"sha": "a2772edf73836bcd8439381cda6bac25167ad83c", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/15df2289ea1b9e90eaa37890dcecc155946bb6ac/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15df2289ea1b9e90eaa37890dcecc155946bb6ac/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=15df2289ea1b9e90eaa37890dcecc155946bb6ac", "patch": "@@ -2215,19 +2215,12 @@ pub fn walk_to_expr_usage<'tcx, T>(\n             _ => return None,\n         };\n         match parent.kind {\n-            ExprKind::If(child, ..) | ExprKind::Match(child, ..) if child.hir_id != child_id => {\n-                child_id = parent_id;\n-                continue;\n-            },\n+            ExprKind::If(child, ..) | ExprKind::Match(child, ..) if child.hir_id != child_id => child_id = parent_id,\n             ExprKind::Break(Destination { target_id: Ok(id), .. }, _) => {\n                 child_id = id;\n                 iter = map.parent_iter(id);\n-                continue;\n-            },\n-            ExprKind::Block(..) => {\n-                child_id = parent_id;\n-                continue;\n             },\n+            ExprKind::Block(..) => child_id = parent_id,\n             _ => return None,\n         }\n     }"}, {"sha": "6ca36eed4e654b7c8144a1ce618ad45b43f19944", "filename": "clippy_utils/src/ty.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/15df2289ea1b9e90eaa37890dcecc155946bb6ac/clippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15df2289ea1b9e90eaa37890dcecc155946bb6ac/clippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fty.rs?ref=15df2289ea1b9e90eaa37890dcecc155946bb6ac", "patch": "@@ -775,6 +775,7 @@ pub fn for_each_top_level_late_bound_region<B>(\n     ty.visit_with(&mut V { index: 0, f })\n }\n \n+/// Gets the struct or enum variant from the given `Res`\n pub fn variant_of_res<'tcx>(cx: &LateContext<'tcx>, res: Res) -> Option<&'tcx VariantDef> {\n     match res {\n         Res::Def(DefKind::Struct, id) => Some(cx.tcx.adt_def(id).non_enum_variant()),"}]}