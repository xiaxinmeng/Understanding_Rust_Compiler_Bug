{"sha": "2bb8c45026f0bfc244390f2d6cecc05cfa1f1171", "node_id": "C_kwDOAAsO6NoAKDJiYjhjNDUwMjZmMGJmYzI0NDM5MGYyZDZjZWNjMDVjZmExZjExNzE", "commit": {"author": {"name": "kyoto7250", "email": "50972773+kyoto7250@users.noreply.github.com", "date": "2022-06-12T12:30:55Z"}, "committer": {"name": "kyoto7250", "email": "50972773+kyoto7250@users.noreply.github.com", "date": "2022-06-17T12:34:36Z"}, "message": "feat(lint): add default_iter_empty\n\nUpdate description in clippy_lints/src/default_iter_empty.rs\n\nCo-authored-by: Fridtjof Stoldt <xFrednet@gmail.com>\n\nUpdate clippy_lints/src/default_iter_empty.rs\n\nCo-authored-by: Alex Macleod <alex@macleod.io>\n\nUpdate clippy_lints/src/default_iter_empty.rs\n\nCo-authored-by: Alex Macleod <alex@macleod.io>\n\nrenamed default_iter_empty to default_instead_of_iter_empty\n\nAvoid duplicate messages\n\nadd tests for regression\n\nrewrite 'Why is this bad?'\n\ncargo dev fmt\n\ndelete default_iter_empty lint in renamed_lint.rs\n\nrewrite a message in the suggestion\n\ncargo dev update_lints --check", "tree": {"sha": "06b85865045d2f3928536668b893fb8751f2cdd6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06b85865045d2f3928536668b893fb8751f2cdd6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2bb8c45026f0bfc244390f2d6cecc05cfa1f1171", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2bb8c45026f0bfc244390f2d6cecc05cfa1f1171", "html_url": "https://github.com/rust-lang/rust/commit/2bb8c45026f0bfc244390f2d6cecc05cfa1f1171", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2bb8c45026f0bfc244390f2d6cecc05cfa1f1171/comments", "author": {"login": "kyoto7250", "id": 50972773, "node_id": "MDQ6VXNlcjUwOTcyNzcz", "avatar_url": "https://avatars.githubusercontent.com/u/50972773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kyoto7250", "html_url": "https://github.com/kyoto7250", "followers_url": "https://api.github.com/users/kyoto7250/followers", "following_url": "https://api.github.com/users/kyoto7250/following{/other_user}", "gists_url": "https://api.github.com/users/kyoto7250/gists{/gist_id}", "starred_url": "https://api.github.com/users/kyoto7250/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kyoto7250/subscriptions", "organizations_url": "https://api.github.com/users/kyoto7250/orgs", "repos_url": "https://api.github.com/users/kyoto7250/repos", "events_url": "https://api.github.com/users/kyoto7250/events{/privacy}", "received_events_url": "https://api.github.com/users/kyoto7250/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kyoto7250", "id": 50972773, "node_id": "MDQ6VXNlcjUwOTcyNzcz", "avatar_url": "https://avatars.githubusercontent.com/u/50972773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kyoto7250", "html_url": "https://github.com/kyoto7250", "followers_url": "https://api.github.com/users/kyoto7250/followers", "following_url": "https://api.github.com/users/kyoto7250/following{/other_user}", "gists_url": "https://api.github.com/users/kyoto7250/gists{/gist_id}", "starred_url": "https://api.github.com/users/kyoto7250/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kyoto7250/subscriptions", "organizations_url": "https://api.github.com/users/kyoto7250/orgs", "repos_url": "https://api.github.com/users/kyoto7250/repos", "events_url": "https://api.github.com/users/kyoto7250/events{/privacy}", "received_events_url": "https://api.github.com/users/kyoto7250/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "844c06a7c7c01c6d0f6fc36e34eb5d630a8d1380", "url": "https://api.github.com/repos/rust-lang/rust/commits/844c06a7c7c01c6d0f6fc36e34eb5d630a8d1380", "html_url": "https://github.com/rust-lang/rust/commit/844c06a7c7c01c6d0f6fc36e34eb5d630a8d1380"}], "stats": {"total": 139, "additions": 139, "deletions": 0}, "files": [{"sha": "d64dd772ac549dc2a472e1ba222d18281389ab3c", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2bb8c45026f0bfc244390f2d6cecc05cfa1f1171/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/2bb8c45026f0bfc244390f2d6cecc05cfa1f1171/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=2bb8c45026f0bfc244390f2d6cecc05cfa1f1171", "patch": "@@ -3348,6 +3348,7 @@ Released 2018-09-13\n [`debug_assert_with_mut_call`]: https://rust-lang.github.io/rust-clippy/master/index.html#debug_assert_with_mut_call\n [`decimal_literal_representation`]: https://rust-lang.github.io/rust-clippy/master/index.html#decimal_literal_representation\n [`declare_interior_mutable_const`]: https://rust-lang.github.io/rust-clippy/master/index.html#declare_interior_mutable_const\n+[`default_instead_of_iter_empty`]: https://rust-lang.github.io/rust-clippy/master/index.html#default_instead_of_iter_empty\n [`default_numeric_fallback`]: https://rust-lang.github.io/rust-clippy/master/index.html#default_numeric_fallback\n [`default_trait_access`]: https://rust-lang.github.io/rust-clippy/master/index.html#default_trait_access\n [`default_union_representation`]: https://rust-lang.github.io/rust-clippy/master/index.html#default_union_representation"}, {"sha": "3c996d3d2aeeeed8340af9d1328d5ac8b5309ad3", "filename": "clippy_lints/src/default_instead_of_iter_empty.rs", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/2bb8c45026f0bfc244390f2d6cecc05cfa1f1171/clippy_lints%2Fsrc%2Fdefault_instead_of_iter_empty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bb8c45026f0bfc244390f2d6cecc05cfa1f1171/clippy_lints%2Fsrc%2Fdefault_instead_of_iter_empty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdefault_instead_of_iter_empty.rs?ref=2bb8c45026f0bfc244390f2d6cecc05cfa1f1171", "patch": "@@ -0,0 +1,68 @@\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::last_path_segment;\n+use clippy_utils::source::snippet_with_applicability;\n+use clippy_utils::{match_def_path, paths};\n+use rustc_errors::Applicability;\n+use rustc_hir::{def, Expr, ExprKind, GenericArg, QPath, TyKind};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// It checks for `std::iter::Empty::default()` and suggests replacing it with\n+    /// `std::iter::empty()`.\n+    /// ### Why is this bad?\n+    /// `std::iter::empty()` is the more idiomatic way.\n+    /// ### Example\n+    /// ```rust\n+    /// let _ = std::iter::Empty::<usize>::default();\n+    /// let iter: std::iter::Empty<usize> = std::iter::Empty::default();\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// let _ = std::iter::empty::<usize>();\n+    /// let iter: std::iter::Empty<usize> = std::iter::empty();\n+    /// ```\n+    #[clippy::version = \"1.63.0\"]\n+    pub DEFAULT_INSTEAD_OF_ITER_EMPTY,\n+    style,\n+    \"check `std::iter::Empty::default()` and replace with `std::iter::empty()`\"\n+}\n+declare_lint_pass!(DefaultIterEmpty => [DEFAULT_INSTEAD_OF_ITER_EMPTY]);\n+\n+impl<'tcx> LateLintPass<'tcx> for DefaultIterEmpty {\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n+        if let ExprKind::Call(iter_expr, []) = &expr.kind\n+            && let ExprKind::Path(QPath::TypeRelative(ty, _)) = &iter_expr.kind\n+            && let TyKind::Path(ty_path) = &ty.kind\n+            && let QPath::Resolved(None, path) = ty_path\n+            && let def::Res::Def(_, def_id) = &path.res\n+            && match_def_path(cx, *def_id, &paths::ITER_EMPTY)\n+        {\n+            let mut applicability = Applicability::MachineApplicable;\n+            let sugg = make_sugg(cx, ty_path, &mut applicability);\n+            span_lint_and_sugg(\n+                cx,\n+                DEFAULT_INSTEAD_OF_ITER_EMPTY,\n+                expr.span,\n+                \"`std::iter::empty()` is the more idiomatic way\",\n+                \"try\",\n+                sugg,\n+                applicability,\n+            );\n+        }\n+    }\n+}\n+\n+fn make_sugg(cx: &LateContext<'_>, ty_path: &rustc_hir::QPath<'_>, applicability: &mut Applicability) -> String {\n+    if let Some(last) = last_path_segment(ty_path).args\n+        && let Some(iter_ty) = last.args.iter().find_map(|arg| match arg {\n+            GenericArg::Type(ty) => Some(ty),\n+            _ => None,\n+        })\n+    {\n+        format!(\"std::iter::empty::<{}>()\", snippet_with_applicability(cx, iter_ty.span, \"..\", applicability))\n+    } else {\n+        \"std::iter::empty()\".to_owned()\n+    }\n+}"}, {"sha": "7876f21f6e6a9ff6affccc4fec941ffe1eda13a6", "filename": "clippy_lints/src/lib.register_all.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2bb8c45026f0bfc244390f2d6cecc05cfa1f1171/clippy_lints%2Fsrc%2Flib.register_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bb8c45026f0bfc244390f2d6cecc05cfa1f1171/clippy_lints%2Fsrc%2Flib.register_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_all.rs?ref=2bb8c45026f0bfc244390f2d6cecc05cfa1f1171", "patch": "@@ -43,6 +43,7 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(copies::IF_SAME_THEN_ELSE),\n     LintId::of(crate_in_macro_def::CRATE_IN_MACRO_DEF),\n     LintId::of(default::FIELD_REASSIGN_WITH_DEFAULT),\n+    LintId::of(default_instead_of_iter_empty::DEFAULT_INSTEAD_OF_ITER_EMPTY),\n     LintId::of(dereference::NEEDLESS_BORROW),\n     LintId::of(derivable_impls::DERIVABLE_IMPLS),\n     LintId::of(derive::DERIVE_HASH_XOR_EQ),"}, {"sha": "de22f50cf943896a9b8b957489b124d81d148274", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2bb8c45026f0bfc244390f2d6cecc05cfa1f1171/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bb8c45026f0bfc244390f2d6cecc05cfa1f1171/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=2bb8c45026f0bfc244390f2d6cecc05cfa1f1171", "patch": "@@ -105,6 +105,7 @@ store.register_lints(&[\n     dbg_macro::DBG_MACRO,\n     default::DEFAULT_TRAIT_ACCESS,\n     default::FIELD_REASSIGN_WITH_DEFAULT,\n+    default_instead_of_iter_empty::DEFAULT_INSTEAD_OF_ITER_EMPTY,\n     default_numeric_fallback::DEFAULT_NUMERIC_FALLBACK,\n     default_union_representation::DEFAULT_UNION_REPRESENTATION,\n     dereference::EXPLICIT_DEREF_METHODS,"}, {"sha": "d52ec50e5422afbf3b3b1caa4502baf9331f26b7", "filename": "clippy_lints/src/lib.register_style.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2bb8c45026f0bfc244390f2d6cecc05cfa1f1171/clippy_lints%2Fsrc%2Flib.register_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bb8c45026f0bfc244390f2d6cecc05cfa1f1171/clippy_lints%2Fsrc%2Flib.register_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_style.rs?ref=2bb8c45026f0bfc244390f2d6cecc05cfa1f1171", "patch": "@@ -14,6 +14,7 @@ store.register_group(true, \"clippy::style\", Some(\"clippy_style\"), vec![\n     LintId::of(collapsible_if::COLLAPSIBLE_IF),\n     LintId::of(comparison_chain::COMPARISON_CHAIN),\n     LintId::of(default::FIELD_REASSIGN_WITH_DEFAULT),\n+    LintId::of(default_instead_of_iter_empty::DEFAULT_INSTEAD_OF_ITER_EMPTY),\n     LintId::of(dereference::NEEDLESS_BORROW),\n     LintId::of(derive::DERIVE_PARTIAL_EQ_WITHOUT_EQ),\n     LintId::of(disallowed_methods::DISALLOWED_METHODS),"}, {"sha": "dcee11cc28cfe5a031f8cdc1543eaa2cdb55a18c", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2bb8c45026f0bfc244390f2d6cecc05cfa1f1171/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bb8c45026f0bfc244390f2d6cecc05cfa1f1171/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=2bb8c45026f0bfc244390f2d6cecc05cfa1f1171", "patch": "@@ -199,6 +199,7 @@ mod crate_in_macro_def;\n mod create_dir;\n mod dbg_macro;\n mod default;\n+mod default_instead_of_iter_empty;\n mod default_numeric_fallback;\n mod default_union_representation;\n mod dereference;\n@@ -910,6 +911,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| Box::new(mismatching_type_param_order::TypeParamMismatch));\n     store.register_late_pass(|| Box::new(as_underscore::AsUnderscore));\n     store.register_late_pass(|| Box::new(read_zero_byte_vec::ReadZeroByteVec));\n+    store.register_late_pass(|| Box::new(default_instead_of_iter_empty::DefaultIterEmpty));\n     // add lints here, do not remove this comment, it's used in `new_lint`\n }\n "}, {"sha": "b31e2c1cdb1b21a570b79f9fdfe2738b8c5152e0", "filename": "clippy_utils/src/paths.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2bb8c45026f0bfc244390f2d6cecc05cfa1f1171/clippy_utils%2Fsrc%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bb8c45026f0bfc244390f2d6cecc05cfa1f1171/clippy_utils%2Fsrc%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fpaths.rs?ref=2bb8c45026f0bfc244390f2d6cecc05cfa1f1171", "patch": "@@ -62,6 +62,7 @@ pub const IO_WRITE: [&str; 3] = [\"std\", \"io\", \"Write\"];\n pub const IPADDR_V4: [&str; 5] = [\"std\", \"net\", \"ip\", \"IpAddr\", \"V4\"];\n pub const IPADDR_V6: [&str; 5] = [\"std\", \"net\", \"ip\", \"IpAddr\", \"V6\"];\n pub const ITER_COUNT: [&str; 6] = [\"core\", \"iter\", \"traits\", \"iterator\", \"Iterator\", \"count\"];\n+pub const ITER_EMPTY: [&str; 5] = [\"core\", \"iter\", \"sources\", \"empty\", \"Empty\"];\n pub const ITER_REPEAT: [&str; 5] = [\"core\", \"iter\", \"sources\", \"repeat\", \"repeat\"];\n #[expect(clippy::invalid_paths)] // internal lints do not know about all external crates\n pub const ITERTOOLS_NEXT_TUPLE: [&str; 3] = [\"itertools\", \"Itertools\", \"next_tuple\"];"}, {"sha": "f1abfdcd6ce69406a065b0fdbde61eca82ec23b5", "filename": "tests/ui/default_instead_of_iter_empty.fixed", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2bb8c45026f0bfc244390f2d6cecc05cfa1f1171/tests%2Fui%2Fdefault_instead_of_iter_empty.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/2bb8c45026f0bfc244390f2d6cecc05cfa1f1171/tests%2Fui%2Fdefault_instead_of_iter_empty.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_instead_of_iter_empty.fixed?ref=2bb8c45026f0bfc244390f2d6cecc05cfa1f1171", "patch": "@@ -0,0 +1,21 @@\n+// run-rustfix\n+#![warn(clippy::default_instead_of_iter_empty)]\n+#![allow(dead_code)]\n+use std::collections::HashMap;\n+\n+#[derive(Default)]\n+struct Iter {\n+    iter: std::iter::Empty<usize>,\n+}\n+\n+fn main() {\n+    // Do lint.\n+    let _ = std::iter::empty::<usize>();\n+    let _ = std::iter::empty::<HashMap<usize, usize>>();\n+    let _foo: std::iter::Empty<usize> = std::iter::empty();\n+\n+    // Do not lint.\n+    let _ = Vec::<usize>::default();\n+    let _ = String::default();\n+    let _ = Iter::default();\n+}"}, {"sha": "2630519c46da4677db9a92504dd0fef1dcd380e7", "filename": "tests/ui/default_instead_of_iter_empty.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2bb8c45026f0bfc244390f2d6cecc05cfa1f1171/tests%2Fui%2Fdefault_instead_of_iter_empty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bb8c45026f0bfc244390f2d6cecc05cfa1f1171/tests%2Fui%2Fdefault_instead_of_iter_empty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_instead_of_iter_empty.rs?ref=2bb8c45026f0bfc244390f2d6cecc05cfa1f1171", "patch": "@@ -0,0 +1,21 @@\n+// run-rustfix\n+#![warn(clippy::default_instead_of_iter_empty)]\n+#![allow(dead_code)]\n+use std::collections::HashMap;\n+\n+#[derive(Default)]\n+struct Iter {\n+    iter: std::iter::Empty<usize>,\n+}\n+\n+fn main() {\n+    // Do lint.\n+    let _ = std::iter::Empty::<usize>::default();\n+    let _ = std::iter::Empty::<HashMap<usize, usize>>::default();\n+    let _foo: std::iter::Empty<usize> = std::iter::Empty::default();\n+\n+    // Do not lint.\n+    let _ = Vec::<usize>::default();\n+    let _ = String::default();\n+    let _ = Iter::default();\n+}"}, {"sha": "460fc84def8a525e23f0e0022219c46dd60391a3", "filename": "tests/ui/default_instead_of_iter_empty.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2bb8c45026f0bfc244390f2d6cecc05cfa1f1171/tests%2Fui%2Fdefault_instead_of_iter_empty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bb8c45026f0bfc244390f2d6cecc05cfa1f1171/tests%2Fui%2Fdefault_instead_of_iter_empty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_instead_of_iter_empty.stderr?ref=2bb8c45026f0bfc244390f2d6cecc05cfa1f1171", "patch": "@@ -0,0 +1,22 @@\n+error: `std::iter::empty()` is the more idiomatic way\n+  --> $DIR/default_instead_of_iter_empty.rs:13:13\n+   |\n+LL |     let _ = std::iter::Empty::<usize>::default();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::iter::empty::<usize>()`\n+   |\n+   = note: `-D clippy::default-instead-of-iter-empty` implied by `-D warnings`\n+\n+error: `std::iter::empty()` is the more idiomatic way\n+  --> $DIR/default_instead_of_iter_empty.rs:14:13\n+   |\n+LL |     let _ = std::iter::Empty::<HashMap<usize, usize>>::default();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::iter::empty::<HashMap<usize, usize>>()`\n+\n+error: `std::iter::empty()` is the more idiomatic way\n+  --> $DIR/default_instead_of_iter_empty.rs:15:41\n+   |\n+LL |     let _foo: std::iter::Empty<usize> = std::iter::Empty::default();\n+   |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::iter::empty()`\n+\n+error: aborting due to 3 previous errors\n+"}]}