{"sha": "723d27934bcf7b8ded74c8a90298fdaece99ebd2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyM2QyNzkzNGJjZjdiOGRlZDc0YzhhOTAyOThmZGFlY2U5OWViZDI=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-09-17T15:41:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-09-17T15:41:18Z"}, "message": "Rollup merge of #88953 - joshtriplett:chown, r=dtolnay\n\nAdd chown functions to std::os::unix::fs to change the owner and group of files\n\nThis is a straightforward wrapper that uses the existing helpers for C\nstring handling and errno handling.\n\nHaving this available is convenient for UNIX utility programs written in\nRust, and avoids having to call unsafe functions like `libc::chown`\ndirectly and handle errors manually, in a program that may otherwise be\nentirely safe code.\n\nIn addition, these functions provide a more Rustic interface by\naccepting appropriate traits and using `None` rather than `-1`.", "tree": {"sha": "bf6fa85463a0f428c8f68b268e97b544bf52fe0a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf6fa85463a0f428c8f68b268e97b544bf52fe0a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/723d27934bcf7b8ded74c8a90298fdaece99ebd2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhRLceCRBK7hj4Ov3rIwAA1V0IAGM7pC0IA549FdLYe1x+JbvX\nSqa/xZRW/IzL+pxo+tf/h85NhYmoNm1y5QC36SL0VVPqRc3lzhapUAhV5yOXWetJ\nxCsPenCfXeoi+Pptf+pPCVi/DSyy++Jp/q4qNg/dUMJQxVGdn5vtnQruaxm/r98i\n0uHqbwLMs2yJ6q4QyUMEzUmmSuw79DtBFQWpwsmtFDUBkFSZkNn6Nij8eHoT1o2Z\nKSGUGsFCjGZPrk7y91mH7nbQwGrbC8pueLz32wUZoqOanqc/mMBHRQ/gNP6/t8oT\nGb2Y85VfkoboNfGkmYFjroWPQ3E2P0PGYhWYHkJ8gYTnpNfHdod65axhEg3526w=\n=oIF4\n-----END PGP SIGNATURE-----\n", "payload": "tree bf6fa85463a0f428c8f68b268e97b544bf52fe0a\nparent 6f5c09849ed46b767922675d18e9d7fcbfbb69e2\nparent 862d89e3b5ba092d95586fc2a33b23d1c8672087\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1631893278 +0200\ncommitter GitHub <noreply@github.com> 1631893278 +0200\n\nRollup merge of #88953 - joshtriplett:chown, r=dtolnay\n\nAdd chown functions to std::os::unix::fs to change the owner and group of files\n\nThis is a straightforward wrapper that uses the existing helpers for C\nstring handling and errno handling.\n\nHaving this available is convenient for UNIX utility programs written in\nRust, and avoids having to call unsafe functions like `libc::chown`\ndirectly and handle errors manually, in a program that may otherwise be\nentirely safe code.\n\nIn addition, these functions provide a more Rustic interface by\naccepting appropriate traits and using `None` rather than `-1`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/723d27934bcf7b8ded74c8a90298fdaece99ebd2", "html_url": "https://github.com/rust-lang/rust/commit/723d27934bcf7b8ded74c8a90298fdaece99ebd2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/723d27934bcf7b8ded74c8a90298fdaece99ebd2/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f5c09849ed46b767922675d18e9d7fcbfbb69e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f5c09849ed46b767922675d18e9d7fcbfbb69e2", "html_url": "https://github.com/rust-lang/rust/commit/6f5c09849ed46b767922675d18e9d7fcbfbb69e2"}, {"sha": "862d89e3b5ba092d95586fc2a33b23d1c8672087", "url": "https://api.github.com/repos/rust-lang/rust/commits/862d89e3b5ba092d95586fc2a33b23d1c8672087", "html_url": "https://github.com/rust-lang/rust/commit/862d89e3b5ba092d95586fc2a33b23d1c8672087"}], "stats": {"total": 87, "additions": 87, "deletions": 0}, "files": [{"sha": "30eead9b05901db9db936a01dacb370080669b55", "filename": "library/std/src/os/unix/fs.rs", "status": "modified", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/723d27934bcf7b8ded74c8a90298fdaece99ebd2/library%2Fstd%2Fsrc%2Fos%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/723d27934bcf7b8ded74c8a90298fdaece99ebd2/library%2Fstd%2Fsrc%2Fos%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Ffs.rs?ref=723d27934bcf7b8ded74c8a90298fdaece99ebd2", "patch": "@@ -5,6 +5,7 @@\n use super::platform::fs::MetadataExt as _;\n use crate::fs::{self, OpenOptions, Permissions};\n use crate::io;\n+use crate::os::unix::io::{AsFd, AsRawFd};\n use crate::path::Path;\n use crate::sys;\n use crate::sys_common::{AsInner, AsInnerMut, FromInner};\n@@ -924,6 +925,75 @@ impl DirBuilderExt for fs::DirBuilder {\n     }\n }\n \n+/// Change the owner and group of the specified path.\n+///\n+/// Specifying either the uid or gid as `None` will leave it unchanged.\n+///\n+/// Changing the owner typically requires privileges, such as root or a specific capability.\n+/// Changing the group typically requires either being the owner and a member of the group, or\n+/// having privileges.\n+///\n+/// If called on a symbolic link, this will change the owner and group of the link target. To\n+/// change the owner and group of the link itself, see [`lchown`].\n+///\n+/// # Examples\n+///\n+/// ```no_run\n+/// #![feature(unix_chown)]\n+/// use std::os::unix::fs;\n+///\n+/// fn main() -> std::io::Result<()> {\n+///     fs::chown(\"/sandbox\", Some(0), Some(0))?;\n+///     Ok(())\n+/// }\n+/// ```\n+#[unstable(feature = \"unix_chown\", issue = \"88989\")]\n+pub fn chown<P: AsRef<Path>>(dir: P, uid: Option<u32>, gid: Option<u32>) -> io::Result<()> {\n+    sys::fs::chown(dir.as_ref(), uid.unwrap_or(u32::MAX), gid.unwrap_or(u32::MAX))\n+}\n+\n+/// Change the owner and group of the file referenced by the specified open file descriptor.\n+///\n+/// For semantics and required privileges, see [`chown`].\n+///\n+/// # Examples\n+///\n+/// ```no_run\n+/// #![feature(unix_chown)]\n+/// use std::os::unix::fs;\n+///\n+/// fn main() -> std::io::Result<()> {\n+///     let f = std::fs::File::open(\"/file\")?;\n+///     fs::fchown(f, Some(0), Some(0))?;\n+///     Ok(())\n+/// }\n+/// ```\n+#[unstable(feature = \"unix_chown\", issue = \"88989\")]\n+pub fn fchown<F: AsFd>(fd: F, uid: Option<u32>, gid: Option<u32>) -> io::Result<()> {\n+    sys::fs::fchown(fd.as_fd().as_raw_fd(), uid.unwrap_or(u32::MAX), gid.unwrap_or(u32::MAX))\n+}\n+\n+/// Change the owner and group of the specified path, without dereferencing symbolic links.\n+///\n+/// Identical to [`chown`], except that if called on a symbolic link, this will change the owner\n+/// and group of the link itself rather than the owner and group of the link target.\n+///\n+/// # Examples\n+///\n+/// ```no_run\n+/// #![feature(unix_chown)]\n+/// use std::os::unix::fs;\n+///\n+/// fn main() -> std::io::Result<()> {\n+///     fs::lchown(\"/symlink\", Some(0), Some(0))?;\n+///     Ok(())\n+/// }\n+/// ```\n+#[unstable(feature = \"unix_chown\", issue = \"88989\")]\n+pub fn lchown<P: AsRef<Path>>(dir: P, uid: Option<u32>, gid: Option<u32>) -> io::Result<()> {\n+    sys::fs::lchown(dir.as_ref(), uid.unwrap_or(u32::MAX), gid.unwrap_or(u32::MAX))\n+}\n+\n /// Change the root directory of the current process to the specified path.\n ///\n /// This typically requires privileges, such as root or a specific capability."}, {"sha": "a4fff9b2e64731c7f775fcff82075bbf3b2c3784", "filename": "library/std/src/sys/unix/fs.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/723d27934bcf7b8ded74c8a90298fdaece99ebd2/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/723d27934bcf7b8ded74c8a90298fdaece99ebd2/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs?ref=723d27934bcf7b8ded74c8a90298fdaece99ebd2", "patch": "@@ -1416,6 +1416,23 @@ pub fn copy(from: &Path, to: &Path) -> io::Result<u64> {\n     Ok(bytes_copied as u64)\n }\n \n+pub fn chown(path: &Path, uid: u32, gid: u32) -> io::Result<()> {\n+    let path = cstr(path)?;\n+    cvt(unsafe { libc::chown(path.as_ptr(), uid as libc::uid_t, gid as libc::gid_t) })?;\n+    Ok(())\n+}\n+\n+pub fn fchown(fd: c_int, uid: u32, gid: u32) -> io::Result<()> {\n+    cvt(unsafe { libc::fchown(fd, uid as libc::uid_t, gid as libc::gid_t) })?;\n+    Ok(())\n+}\n+\n+pub fn lchown(path: &Path, uid: u32, gid: u32) -> io::Result<()> {\n+    let path = cstr(path)?;\n+    cvt(unsafe { libc::lchown(path.as_ptr(), uid as libc::uid_t, gid as libc::gid_t) })?;\n+    Ok(())\n+}\n+\n #[cfg(not(any(target_os = \"fuchsia\", target_os = \"vxworks\")))]\n pub fn chroot(dir: &Path) -> io::Result<()> {\n     let dir = cstr(dir)?;"}]}