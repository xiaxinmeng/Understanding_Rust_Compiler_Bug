{"sha": "9f50c49117684c2806c54e94ee6aff7d11ca724f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmNTBjNDkxMTc2ODRjMjgwNmM1NGU5NGVlNmFmZjdkMTFjYTcyNGY=", "commit": {"author": {"name": "marmeladema", "email": "xademax@gmail.com", "date": "2020-08-31T21:57:48Z"}, "committer": {"name": "marmeladema", "email": "xademax@gmail.com", "date": "2020-09-25T21:46:15Z"}, "message": "Implement `Display` for `DisambiguatedDefPathData` and `DefPathData`", "tree": {"sha": "5f6aba78d5cc5bcb3c73e28c6c68fac93cfb552d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f6aba78d5cc5bcb3c73e28c6c68fac93cfb552d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f50c49117684c2806c54e94ee6aff7d11ca724f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f50c49117684c2806c54e94ee6aff7d11ca724f", "html_url": "https://github.com/rust-lang/rust/commit/9f50c49117684c2806c54e94ee6aff7d11ca724f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f50c49117684c2806c54e94ee6aff7d11ca724f/comments", "author": {"login": "marmeladema", "id": 1629419, "node_id": "MDQ6VXNlcjE2Mjk0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1629419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marmeladema", "html_url": "https://github.com/marmeladema", "followers_url": "https://api.github.com/users/marmeladema/followers", "following_url": "https://api.github.com/users/marmeladema/following{/other_user}", "gists_url": "https://api.github.com/users/marmeladema/gists{/gist_id}", "starred_url": "https://api.github.com/users/marmeladema/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marmeladema/subscriptions", "organizations_url": "https://api.github.com/users/marmeladema/orgs", "repos_url": "https://api.github.com/users/marmeladema/repos", "events_url": "https://api.github.com/users/marmeladema/events{/privacy}", "received_events_url": "https://api.github.com/users/marmeladema/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marmeladema", "id": 1629419, "node_id": "MDQ6VXNlcjE2Mjk0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1629419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marmeladema", "html_url": "https://github.com/marmeladema", "followers_url": "https://api.github.com/users/marmeladema/followers", "following_url": "https://api.github.com/users/marmeladema/following{/other_user}", "gists_url": "https://api.github.com/users/marmeladema/gists{/gist_id}", "starred_url": "https://api.github.com/users/marmeladema/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marmeladema/subscriptions", "organizations_url": "https://api.github.com/users/marmeladema/orgs", "repos_url": "https://api.github.com/users/marmeladema/repos", "events_url": "https://api.github.com/users/marmeladema/events{/privacy}", "received_events_url": "https://api.github.com/users/marmeladema/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1878d19faf9472f8860a3ff4fe605fdf93cef2c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1878d19faf9472f8860a3ff4fe605fdf93cef2c", "html_url": "https://github.com/rust-lang/rust/commit/f1878d19faf9472f8860a3ff4fe605fdf93cef2c"}], "stats": {"total": 91, "additions": 33, "deletions": 58}, "files": [{"sha": "4b803447eed99412fd855c2aef196b9e3377cc58", "filename": "compiler/rustc_hir/src/definitions.rs", "status": "modified", "additions": 26, "deletions": 39, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/9f50c49117684c2806c54e94ee6aff7d11ca724f/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f50c49117684c2806c54e94ee6aff7d11ca724f/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs?ref=9f50c49117684c2806c54e94ee6aff7d11ca724f", "patch": "@@ -15,7 +15,7 @@ use rustc_index::vec::IndexVec;\n use rustc_span::hygiene::ExpnId;\n use rustc_span::symbol::{kw, sym, Symbol};\n \n-use std::fmt::Write;\n+use std::fmt::{self, Write};\n use std::hash::Hash;\n use tracing::debug;\n \n@@ -155,6 +155,23 @@ pub struct DisambiguatedDefPathData {\n     pub disambiguator: u32,\n }\n \n+impl fmt::Display for DisambiguatedDefPathData {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        match self.data.get_name() {\n+            DefPathDataName::Named(name) => {\n+                if self.disambiguator == 0 {\n+                    f.write_str(&name.as_str())\n+                } else {\n+                    write!(f, \"{}#{}\", name, self.disambiguator)\n+                }\n+            }\n+            DefPathDataName::Anon { namespace } => {\n+                write!(f, \"{{{}#{}}}\", namespace, self.disambiguator)\n+            }\n+        }\n+    }\n+}\n+\n #[derive(Clone, Debug, Encodable, Decodable)]\n pub struct DefPath {\n     /// The path leading from the crate root to the item.\n@@ -202,35 +219,7 @@ impl DefPath {\n         let mut s = String::with_capacity(self.data.len() * 16);\n \n         for component in &self.data {\n-            match component.data.get_name() {\n-                DefPathDataName::Named(name) => write!(s, \"::{}\", name).unwrap(),\n-                DefPathDataName::Anon { namespace } => {\n-                    write!(s, \"::{{{}#{}}}\", namespace, component.disambiguator).unwrap()\n-                }\n-            }\n-        }\n-\n-        s\n-    }\n-\n-    /// Returns a filename-friendly string for the `DefPath`, with the\n-    /// crate-prefix.\n-    pub fn to_string_friendly<F>(&self, crate_imported_name: F) -> String\n-    where\n-        F: FnOnce(CrateNum) -> Symbol,\n-    {\n-        let crate_name_str = crate_imported_name(self.krate).as_str();\n-        let mut s = String::with_capacity(crate_name_str.len() + self.data.len() * 16);\n-\n-        write!(s, \"::{}\", crate_name_str).unwrap();\n-\n-        for component in &self.data {\n-            match component.data.get_name() {\n-                DefPathDataName::Named(name) => write!(s, \"::{}\", name).unwrap(),\n-                DefPathDataName::Anon { namespace } => {\n-                    write!(s, \"{{{}#{}}}\", namespace, component.disambiguator).unwrap()\n-                }\n-            }\n+            write!(s, \"::{}\", component).unwrap();\n         }\n \n         s\n@@ -246,13 +235,9 @@ impl DefPath {\n         for component in &self.data {\n             s.extend(opt_delimiter);\n             opt_delimiter = Some('-');\n-            match component.data.get_name() {\n-                DefPathDataName::Named(name) => write!(s, \"{}\", name).unwrap(),\n-                DefPathDataName::Anon { namespace } => {\n-                    write!(s, \"{{{}#{}}}\", namespace, component.disambiguator).unwrap()\n-                }\n-            }\n+            write!(s, \"{}\", component).unwrap();\n         }\n+\n         s\n     }\n }\n@@ -465,11 +450,13 @@ impl DefPathData {\n             ImplTrait => DefPathDataName::Anon { namespace: sym::opaque },\n         }\n     }\n+}\n \n-    pub fn to_string(&self) -> String {\n+impl fmt::Display for DefPathData {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self.get_name() {\n-            DefPathDataName::Named(name) => name.to_string(),\n-            DefPathDataName::Anon { namespace } => format!(\"{{{{{}}}}}\", namespace),\n+            DefPathDataName::Named(name) => f.write_str(&name.as_str()),\n+            DefPathDataName::Anon { namespace } => write!(f, \"{{{{{}}}}}\", namespace),\n         }\n     }\n }"}, {"sha": "795c5a64d26b72e44b6b1c2d15dbed318f907b14", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f50c49117684c2806c54e94ee6aff7d11ca724f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f50c49117684c2806c54e94ee6aff7d11ca724f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=9f50c49117684c2806c54e94ee6aff7d11ca724f", "patch": "@@ -531,7 +531,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 disambiguated_data: &DisambiguatedDefPathData,\n             ) -> Result<Self::Path, Self::Error> {\n                 let mut path = print_prefix(self)?;\n-                path.push(disambiguated_data.data.to_string());\n+                path.push(disambiguated_data.to_string());\n                 Ok(path)\n             }\n             fn path_generic_args("}, {"sha": "ceb873adf5cb6fcf766f484f4d725f40d7c85373", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9f50c49117684c2806c54e94ee6aff7d11ca724f/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f50c49117684c2806c54e94ee6aff7d11ca724f/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=9f50c49117684c2806c54e94ee6aff7d11ca724f", "patch": "@@ -1002,11 +1002,7 @@ fn hir_id_to_string(map: &Map<'_>, id: HirId) -> String {\n                 let def_id = map.local_def_id(id);\n                 tcx.def_path_str(def_id.to_def_id())\n             } else if let Some(path) = map.def_path_from_hir_id(id) {\n-                path.data\n-                    .into_iter()\n-                    .map(|elem| elem.data.to_string())\n-                    .collect::<Vec<_>>()\n-                    .join(\"::\")\n+                path.data.into_iter().map(|elem| elem.to_string()).collect::<Vec<_>>().join(\"::\")\n             } else {\n                 String::from(\"<missing path>\")\n             }"}, {"sha": "554ada1ab254cfe0969fe763650f2b6975ee4aa6", "filename": "compiler/rustc_mir/src/interpret/intrinsics/type_name.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9f50c49117684c2806c54e94ee6aff7d11ca724f/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics%2Ftype_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f50c49117684c2806c54e94ee6aff7d11ca724f/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics%2Ftype_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics%2Ftype_name.rs?ref=9f50c49117684c2806c54e94ee6aff7d11ca724f", "patch": "@@ -1,5 +1,5 @@\n use rustc_hir::def_id::CrateNum;\n-use rustc_hir::definitions::{DefPathData, DefPathDataName, DisambiguatedDefPathData};\n+use rustc_hir::definitions::{DefPathData, DisambiguatedDefPathData};\n use rustc_middle::mir::interpret::Allocation;\n use rustc_middle::ty::{\n     self,\n@@ -132,14 +132,8 @@ impl<'tcx> Printer<'tcx> for AbsolutePathPrinter<'tcx> {\n             return Ok(self);\n         }\n \n-        self.path.push_str(\"::\");\n+        write!(self.path, \"::{}\", disambiguated_data.data).unwrap();\n \n-        match disambiguated_data.data.get_name() {\n-            DefPathDataName::Named(name) => self.path.write_str(&name.as_str()).unwrap(),\n-            DefPathDataName::Anon { namespace } => {\n-                write!(self.path, \"{{{{{}}}}}\", namespace).unwrap()\n-            }\n-        }\n         Ok(self)\n     }\n "}, {"sha": "b96e318bd3ea1a83cfe691c54aa083f1d002cc82", "filename": "compiler/rustc_symbol_mangling/src/legacy.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9f50c49117684c2806c54e94ee6aff7d11ca724f/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f50c49117684c2806c54e94ee6aff7d11ca724f/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs?ref=9f50c49117684c2806c54e94ee6aff7d11ca724f", "patch": "@@ -1,6 +1,6 @@\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_hir::def_id::CrateNum;\n-use rustc_hir::definitions::{DefPathData, DefPathDataName, DisambiguatedDefPathData};\n+use rustc_hir::definitions::{DefPathData, DisambiguatedDefPathData};\n use rustc_middle::ich::NodeIdHashingMode;\n use rustc_middle::mir::interpret::{ConstValue, Scalar};\n use rustc_middle::ty::print::{PrettyPrinter, Print, Printer};\n@@ -316,10 +316,8 @@ impl Printer<'tcx> for SymbolPrinter<'tcx> {\n             self.path.finalize_pending_component();\n         }\n \n-        match disambiguated_data.data.get_name() {\n-            DefPathDataName::Named(name) => self.write_str(&name.as_str())?,\n-            DefPathDataName::Anon { namespace } => write!(self, \"{{{{{}}}}}\", namespace)?,\n-        }\n+        write!(self, \"{}\", disambiguated_data.data)?;\n+\n         Ok(self)\n     }\n     fn path_generic_args("}]}