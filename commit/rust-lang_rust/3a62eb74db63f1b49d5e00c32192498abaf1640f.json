{"sha": "3a62eb74db63f1b49d5e00c32192498abaf1640f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhNjJlYjc0ZGI2M2YxYjQ5ZDVlMDBjMzIxOTI0OThhYmFmMTY0MGY=", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2020-08-09T23:57:35Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2021-03-08T07:18:46Z"}, "message": "Emit the lint level of the unused-crate-dependencies\n\nAlso, turn off the lint when the unused dependencies json flag\nis specified so that cargo doesn't have to supress the lint", "tree": {"sha": "c2a613beba8ecc96f290450a442fc654fb1549b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c2a613beba8ecc96f290450a442fc654fb1549b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a62eb74db63f1b49d5e00c32192498abaf1640f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a62eb74db63f1b49d5e00c32192498abaf1640f", "html_url": "https://github.com/rust-lang/rust/commit/3a62eb74db63f1b49d5e00c32192498abaf1640f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a62eb74db63f1b49d5e00c32192498abaf1640f/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13371b59ee918445ede03cebb741539db807e0e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/13371b59ee918445ede03cebb741539db807e0e7", "html_url": "https://github.com/rust-lang/rust/commit/13371b59ee918445ede03cebb741539db807e0e7"}], "stats": {"total": 85, "additions": 66, "deletions": 19}, "files": [{"sha": "2b6dec905f14209d6217ef818332396c07e1055b", "filename": "compiler/rustc_errors/src/emitter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a62eb74db63f1b49d5e00c32192498abaf1640f/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a62eb74db63f1b49d5e00c32192498abaf1640f/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Femitter.rs?ref=3a62eb74db63f1b49d5e00c32192498abaf1640f", "patch": "@@ -196,7 +196,7 @@ pub trait Emitter {\n     fn emit_future_breakage_report(&mut self, _diags: Vec<(FutureBreakage, Diagnostic)>) {}\n \n     /// Emit list of unused externs\n-    fn emit_unused_externs(&mut self, _unused_externs: &[&str]) {}\n+    fn emit_unused_externs(&mut self, _lint_level: &str, _unused_externs: &[&str]) {}\n \n     /// Checks if should show explanations about \"rustc --explain\"\n     fn should_show_explain(&self) -> bool {"}, {"sha": "8511b51e3bffa21f707c4f135dcb1fa78ba987ac", "filename": "compiler/rustc_errors/src/json.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3a62eb74db63f1b49d5e00c32192498abaf1640f/compiler%2Frustc_errors%2Fsrc%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a62eb74db63f1b49d5e00c32192498abaf1640f/compiler%2Frustc_errors%2Fsrc%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fjson.rs?ref=3a62eb74db63f1b49d5e00c32192498abaf1640f", "patch": "@@ -159,8 +159,8 @@ impl Emitter for JsonEmitter {\n         }\n     }\n \n-    fn emit_unused_externs(&mut self, unused_externs: &[&str]) {\n-        let data = UnusedExterns { unused_extern_names: unused_externs };\n+    fn emit_unused_externs(&mut self, lint_level: &str, unused_externs: &[&str]) {\n+        let data = UnusedExterns { lint_level, unused_extern_names: unused_externs };\n         let result = if self.pretty {\n             writeln!(&mut self.dst, \"{}\", as_pretty_json(&data))\n         } else {\n@@ -336,9 +336,11 @@ struct FutureIncompatReport {\n }\n \n #[derive(Encodable)]\n-struct UnusedExterns<'a, 'b> {\n+struct UnusedExterns<'a, 'b, 'c> {\n+    /// The severity level of the unused dependencies lint\n+    lint_level: &'a str,\n     /// List of unused externs by their names.\n-    unused_extern_names: &'a [&'b str],\n+    unused_extern_names: &'b [&'c str],\n }\n \n impl Diagnostic {"}, {"sha": "533c32b32c620e3ef5d79506d1f617fe373a26cc", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3a62eb74db63f1b49d5e00c32192498abaf1640f/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a62eb74db63f1b49d5e00c32192498abaf1640f/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=3a62eb74db63f1b49d5e00c32192498abaf1640f", "patch": "@@ -767,8 +767,8 @@ impl Handler {\n         self.inner.borrow_mut().emitter.emit_future_breakage_report(diags)\n     }\n \n-    pub fn emit_unused_externs(&self, unused_externs: &[&str]) {\n-        self.inner.borrow_mut().emit_unused_externs(unused_externs)\n+    pub fn emit_unused_externs(&self, lint_level: &str, unused_externs: &[&str]) {\n+        self.inner.borrow_mut().emit_unused_externs(lint_level, unused_externs)\n     }\n \n     pub fn delay_as_bug(&self, diagnostic: Diagnostic) {\n@@ -845,8 +845,8 @@ impl HandlerInner {\n         self.emitter.emit_artifact_notification(path, artifact_type);\n     }\n \n-    fn emit_unused_externs(&mut self, unused_externs: &[&str]) {\n-        self.emitter.emit_unused_externs(unused_externs);\n+    fn emit_unused_externs(&mut self, lint_level: &str, unused_externs: &[&str]) {\n+        self.emitter.emit_unused_externs(lint_level, unused_externs);\n     }\n \n     fn treat_err_as_bug(&self) -> bool {"}, {"sha": "717f4d5a3ba689738e0448cb3ea717e212324ed0", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3a62eb74db63f1b49d5e00c32192498abaf1640f/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a62eb74db63f1b49d5e00c32192498abaf1640f/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=3a62eb74db63f1b49d5e00c32192498abaf1640f", "patch": "@@ -17,6 +17,7 @@ use rustc_hir::definitions::Definitions;\n use rustc_hir::Crate;\n use rustc_index::vec::IndexVec;\n use rustc_lint::LintStore;\n+use rustc_metadata::creader::CStore;\n use rustc_middle::arena::Arena;\n use rustc_middle::dep_graph::DepGraph;\n use rustc_middle::middle;\n@@ -836,6 +837,12 @@ fn analysis(tcx: TyCtxt<'_>, cnum: CrateNum) -> Result<()> {\n                 });\n \n                 sess.time(\"looking_for_derive_registrar\", || proc_macro_decls::find(tcx));\n+\n+                let cstore = tcx\n+                    .cstore_as_any()\n+                    .downcast_ref::<CStore>()\n+                    .expect(\"`tcx.cstore` is not a `CStore`\");\n+                cstore.report_unused_deps(tcx);\n             },\n             {\n                 par_iter(&tcx.hir().krate().modules).for_each(|(&module, _)| {"}, {"sha": "9e3f121378cbafc6b4ed714e2dc3df11a8ac4d3a", "filename": "compiler/rustc_metadata/src/creader.rs", "status": "modified", "additions": 28, "deletions": 8, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/3a62eb74db63f1b49d5e00c32192498abaf1640f/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a62eb74db63f1b49d5e00c32192498abaf1640f/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs?ref=3a62eb74db63f1b49d5e00c32192498abaf1640f", "patch": "@@ -46,6 +46,9 @@ pub struct CStore {\n     /// This map is used to verify we get no hash conflicts between\n     /// `StableCrateId` values.\n     stable_crate_ids: FxHashMap<StableCrateId, CrateNum>,\n+\n+    /// Unused externs of the crate\n+    unused_externs: Vec<Symbol>,\n }\n \n pub struct CrateLoader<'a> {\n@@ -190,6 +193,21 @@ impl CStore {\n     crate fn has_global_allocator(&self) -> bool {\n         self.has_global_allocator\n     }\n+\n+    pub fn report_unused_deps(&self, tcx: TyCtxt<'_>) {\n+        let level = tcx\n+            .lint_level_at_node(lint::builtin::UNUSED_CRATE_DEPENDENCIES, rustc_hir::CRATE_HIR_ID)\n+            .0;\n+        if level != lint::Level::Allow && tcx.sess.opts.json_unused_externs {\n+            let unused_externs =\n+                self.unused_externs.iter().map(|ident| ident.to_ident_string()).collect::<Vec<_>>();\n+            let unused_externs = unused_externs.iter().map(String::as_str).collect::<Vec<&str>>();\n+            tcx.sess\n+                .parse_sess\n+                .span_diagnostic\n+                .emit_unused_externs(level.as_str(), &unused_externs);\n+        }\n+    }\n }\n \n impl<'a> CrateLoader<'a> {\n@@ -217,6 +235,7 @@ impl<'a> CrateLoader<'a> {\n                 allocator_kind: None,\n                 has_global_allocator: false,\n                 stable_crate_ids,\n+                unused_externs: Vec::new(),\n             },\n             used_extern_options: Default::default(),\n         }\n@@ -893,18 +912,23 @@ impl<'a> CrateLoader<'a> {\n     fn report_unused_deps(&mut self, krate: &ast::Crate) {\n         // Make a point span rather than covering the whole file\n         let span = krate.span.shrink_to_lo();\n-        let mut unused_externs = Vec::new();\n         // Complain about anything left over\n         for (name, entry) in self.sess.opts.externs.iter() {\n             if let ExternLocation::FoundInLibrarySearchDirectories = entry.location {\n                 // Don't worry about pathless `--extern foo` sysroot references\n                 continue;\n             }\n-            if self.used_extern_options.contains(&Symbol::intern(name)) {\n+            let name_interned = Symbol::intern(name);\n+            if self.used_extern_options.contains(&name_interned) {\n                 continue;\n             }\n \n             // Got a real unused --extern\n+            if self.sess.opts.json_unused_externs {\n+                self.cstore.unused_externs.push(name_interned);\n+                continue;\n+            }\n+\n             let diag = match self.sess.opts.extern_dep_specs.get(name) {\n                 Some(loc) => BuiltinLintDiagnostics::ExternDepSpec(name.clone(), loc.into()),\n                 None => {\n@@ -918,7 +942,6 @@ impl<'a> CrateLoader<'a> {\n                     )\n                 }\n             };\n-            unused_externs.push(name as &str);\n             self.sess.parse_sess.buffer_lint_with_diagnostic(\n                     lint::builtin::UNUSED_CRATE_DEPENDENCIES,\n                     span,\n@@ -931,19 +954,16 @@ impl<'a> CrateLoader<'a> {\n                     diag,\n                 );\n         }\n-        if self.sess.opts.json_unused_externs {\n-            self.sess.parse_sess.span_diagnostic.emit_unused_externs(&unused_externs);\n-        }\n     }\n \n     pub fn postprocess(&mut self, krate: &ast::Crate) {\n         self.inject_profiler_runtime(krate);\n         self.inject_allocator_crate(krate);\n         self.inject_panic_runtime(krate);\n \n-        info!(\"{:?}\", CrateDump(&self.cstore));\n-\n         self.report_unused_deps(krate);\n+\n+        info!(\"{:?}\", CrateDump(&self.cstore));\n     }\n \n     pub fn process_extern_crate("}, {"sha": "116b3aad61eb45ba0a65581cd371a89b4c9c7630", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3a62eb74db63f1b49d5e00c32192498abaf1640f/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a62eb74db63f1b49d5e00c32192498abaf1640f/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=3a62eb74db63f1b49d5e00c32192498abaf1640f", "patch": "@@ -188,8 +188,23 @@ crate fn run(options: Options) -> Result<(), ErrorReported> {\n                 .map(|v| (*v).clone())\n                 .collect::<Vec<String>>();\n             unused_extern_names.sort();\n-            let unused_extern_json =\n-                serde_json::to_string(&UnusedExterns { unused_extern_names }).unwrap();\n+            // Take the most severe lint level\n+            let lint_level = unused_extern_reports\n+                .iter()\n+                .map(|uexts| uexts.lint_level.as_str())\n+                .max_by_key(|v| match *v {\n+                    \"warn\" => 1,\n+                    \"deny\" => 2,\n+                    \"forbid\" => 3,\n+                    // The allow lint level is not expected,\n+                    // as if allow is specified, no message\n+                    // is to be emitted.\n+                    v => unreachable!(\"Invalid lint level '{}'\", v),\n+                })\n+                .unwrap_or(\"warn\")\n+                .to_string();\n+            let uext = UnusedExterns { lint_level, unused_extern_names };\n+            let unused_extern_json = serde_json::to_string(&uext).unwrap();\n             eprintln!(\"{}\", unused_extern_json);\n         }\n     }\n@@ -265,6 +280,8 @@ impl DirState {\n \n #[derive(serde::Serialize, serde::Deserialize)]\n struct UnusedExterns {\n+    /// Lint level of the unused_crate_dependencies lint\n+    lint_level: String,\n     /// List of unused externs by their names.\n     unused_extern_names: Vec<String>,\n }\n@@ -317,6 +334,7 @@ fn run_test(\n         compiler.arg(\"--error-format=json\");\n         compiler.arg(\"--json\").arg(\"unused-externs\");\n         compiler.arg(\"-Z\").arg(\"unstable-options\");\n+        compiler.arg(\"-W\").arg(\"unused_crate_dependencies\");\n     }\n     for lib_str in &options.lib_strs {\n         compiler.arg(\"-L\").arg(&lib_str);"}]}