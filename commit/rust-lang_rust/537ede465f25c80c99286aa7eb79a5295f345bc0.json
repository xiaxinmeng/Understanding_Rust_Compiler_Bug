{"sha": "537ede465f25c80c99286aa7eb79a5295f345bc0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzN2VkZTQ2NWYyNWM4MGM5OTI4NmFhN2ViNzlhNTI5NWYzNDViYzA=", "commit": {"author": {"name": "ecstatic-morse", "email": "ecstaticmorse@gmail.com", "date": "2020-09-22T03:40:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-22T03:40:49Z"}, "message": "Rollup merge of #76655 - CDirkx:const-pin, r=ecstatic-morse\n\nMake some methods of `Pin` unstable const\n\nMake the following methods unstable const under the `const_pin` feature:\n- `new`\n- `new_unchecked`\n- `into_inner`\n- `into_inner_unchecked`\n- `get_ref`\n- `into_ref`\n- `get_mut`\n- `get_unchecked_mut`\n\nOf these, `into_inner` and `into_inner_unchecked` require the unstable `const_precise_live_drops`.\n\nAlso adds tests for these methods in a const context.\n\nTracking issue: #76654\n\nr? @ecstatic-morse", "tree": {"sha": "222beb8230abb27c65d75a3a984368dfdb63b0b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/222beb8230abb27c65d75a3a984368dfdb63b0b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/537ede465f25c80c99286aa7eb79a5295f345bc0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfaXJCCRBK7hj4Ov3rIwAAdHIIADtId0ovq+Au6eOWnIs/K1ZJ\naUUSuOH0eBksandDySvuKSjbp8CD2UXZQZBJP1ddvegzAsx+DtBwuDFd4LUHz4ag\ntqEjWxXXWaA8PoCIgb4h+zHhwA7JzxAV5CMRhS5BohYnkHIqn9lXI54ssTIX7VyC\nKPH3tbQp8uIZ28XdNM5NM54bDX0N+E73KtafYKxu3nsPzcxgtM9dYvuqE4wMvIK8\nmipY582uXIO413WNbHT4wP02R4E/2iZw9rzCODSj0v/G4qLNh6MSkNe/Nd0DY7bh\nfXfxIgeVQjGdbWCtIZL5cpiRfyOi9UAw9wZIA/ELBPVNKLVHLMZsYQTQ1MoG5Z0=\n=8R9E\n-----END PGP SIGNATURE-----\n", "payload": "tree 222beb8230abb27c65d75a3a984368dfdb63b0b7\nparent 30f1bab7e6282a8e5ab644be15d12d5a5ca26e37\nparent e3c6e46168758642f0bab64da374f93ed21b1cd0\nauthor ecstatic-morse <ecstaticmorse@gmail.com> 1600746049 -0700\ncommitter GitHub <noreply@github.com> 1600746049 -0700\n\nRollup merge of #76655 - CDirkx:const-pin, r=ecstatic-morse\n\nMake some methods of `Pin` unstable const\n\nMake the following methods unstable const under the `const_pin` feature:\n- `new`\n- `new_unchecked`\n- `into_inner`\n- `into_inner_unchecked`\n- `get_ref`\n- `into_ref`\n- `get_mut`\n- `get_unchecked_mut`\n\nOf these, `into_inner` and `into_inner_unchecked` require the unstable `const_precise_live_drops`.\n\nAlso adds tests for these methods in a const context.\n\nTracking issue: #76654\n\nr? @ecstatic-morse\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/537ede465f25c80c99286aa7eb79a5295f345bc0", "html_url": "https://github.com/rust-lang/rust/commit/537ede465f25c80c99286aa7eb79a5295f345bc0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/537ede465f25c80c99286aa7eb79a5295f345bc0/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30f1bab7e6282a8e5ab644be15d12d5a5ca26e37", "url": "https://api.github.com/repos/rust-lang/rust/commits/30f1bab7e6282a8e5ab644be15d12d5a5ca26e37", "html_url": "https://github.com/rust-lang/rust/commit/30f1bab7e6282a8e5ab644be15d12d5a5ca26e37"}, {"sha": "e3c6e46168758642f0bab64da374f93ed21b1cd0", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3c6e46168758642f0bab64da374f93ed21b1cd0", "html_url": "https://github.com/rust-lang/rust/commit/e3c6e46168758642f0bab64da374f93ed21b1cd0"}], "stats": {"total": 75, "additions": 59, "deletions": 16}, "files": [{"sha": "9de0f76cbdd2cdb565add1abd273b7263d7a4e68", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/537ede465f25c80c99286aa7eb79a5295f345bc0/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/537ede465f25c80c99286aa7eb79a5295f345bc0/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=537ede465f25c80c99286aa7eb79a5295f345bc0", "patch": "@@ -78,6 +78,7 @@\n #![feature(const_int_pow)]\n #![feature(constctlz)]\n #![feature(const_panic)]\n+#![feature(const_pin)]\n #![feature(const_fn_union)]\n #![feature(const_generics)]\n #![feature(const_option)]"}, {"sha": "9f0284d5d95425e0fd6a3d68ac1a23fd63dd47c5", "filename": "library/core/src/pin.rs", "status": "modified", "additions": 24, "deletions": 16, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/537ede465f25c80c99286aa7eb79a5295f345bc0/library%2Fcore%2Fsrc%2Fpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/537ede465f25c80c99286aa7eb79a5295f345bc0/library%2Fcore%2Fsrc%2Fpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fpin.rs?ref=537ede465f25c80c99286aa7eb79a5295f345bc0", "patch": "@@ -471,9 +471,10 @@ impl<P: Deref<Target: Unpin>> Pin<P> {\n     ///\n     /// Unlike `Pin::new_unchecked`, this method is safe because the pointer\n     /// `P` dereferences to an [`Unpin`] type, which cancels the pinning guarantees.\n-    #[stable(feature = \"pin\", since = \"1.33.0\")]\n     #[inline(always)]\n-    pub fn new(pointer: P) -> Pin<P> {\n+    #[rustc_const_unstable(feature = \"const_pin\", issue = \"76654\")]\n+    #[stable(feature = \"pin\", since = \"1.33.0\")]\n+    pub const fn new(pointer: P) -> Pin<P> {\n         // SAFETY: the value pointed to is `Unpin`, and so has no requirements\n         // around pinning.\n         unsafe { Pin::new_unchecked(pointer) }\n@@ -483,9 +484,10 @@ impl<P: Deref<Target: Unpin>> Pin<P> {\n     ///\n     /// This requires that the data inside this `Pin` is [`Unpin`] so that we\n     /// can ignore the pinning invariants when unwrapping it.\n-    #[stable(feature = \"pin_into_inner\", since = \"1.39.0\")]\n     #[inline(always)]\n-    pub fn into_inner(pin: Pin<P>) -> P {\n+    #[rustc_const_unstable(feature = \"const_pin\", issue = \"76654\")]\n+    #[stable(feature = \"pin_into_inner\", since = \"1.39.0\")]\n+    pub const fn into_inner(pin: Pin<P>) -> P {\n         pin.pointer\n     }\n }\n@@ -556,9 +558,10 @@ impl<P: Deref> Pin<P> {\n     ///\n     /// [`mem::swap`]: crate::mem::swap\n     #[lang = \"new_unchecked\"]\n-    #[stable(feature = \"pin\", since = \"1.33.0\")]\n     #[inline(always)]\n-    pub unsafe fn new_unchecked(pointer: P) -> Pin<P> {\n+    #[rustc_const_unstable(feature = \"const_pin\", issue = \"76654\")]\n+    #[stable(feature = \"pin\", since = \"1.33.0\")]\n+    pub const unsafe fn new_unchecked(pointer: P) -> Pin<P> {\n         Pin { pointer }\n     }\n \n@@ -589,9 +592,10 @@ impl<P: Deref> Pin<P> {\n     ///\n     /// If the underlying data is [`Unpin`], [`Pin::into_inner`] should be used\n     /// instead.\n-    #[stable(feature = \"pin_into_inner\", since = \"1.39.0\")]\n     #[inline(always)]\n-    pub unsafe fn into_inner_unchecked(pin: Pin<P>) -> P {\n+    #[rustc_const_unstable(feature = \"const_pin\", issue = \"76654\")]\n+    #[stable(feature = \"pin_into_inner\", since = \"1.39.0\")]\n+    pub const unsafe fn into_inner_unchecked(pin: Pin<P>) -> P {\n         pin.pointer\n     }\n }\n@@ -693,18 +697,20 @@ impl<'a, T: ?Sized> Pin<&'a T> {\n     /// with the same lifetime as the original `Pin`.\n     ///\n     /// [\"pinning projections\"]: self#projections-and-structural-pinning\n-    #[stable(feature = \"pin\", since = \"1.33.0\")]\n     #[inline(always)]\n-    pub fn get_ref(self) -> &'a T {\n+    #[rustc_const_unstable(feature = \"const_pin\", issue = \"76654\")]\n+    #[stable(feature = \"pin\", since = \"1.33.0\")]\n+    pub const fn get_ref(self) -> &'a T {\n         self.pointer\n     }\n }\n \n impl<'a, T: ?Sized> Pin<&'a mut T> {\n     /// Converts this `Pin<&mut T>` into a `Pin<&T>` with the same lifetime.\n-    #[stable(feature = \"pin\", since = \"1.33.0\")]\n     #[inline(always)]\n-    pub fn into_ref(self) -> Pin<&'a T> {\n+    #[rustc_const_unstable(feature = \"const_pin\", issue = \"76654\")]\n+    #[stable(feature = \"pin\", since = \"1.33.0\")]\n+    pub const fn into_ref(self) -> Pin<&'a T> {\n         Pin { pointer: self.pointer }\n     }\n \n@@ -717,9 +723,10 @@ impl<'a, T: ?Sized> Pin<&'a mut T> {\n     /// that lives for as long as the borrow of the `Pin`, not the lifetime of\n     /// the `Pin` itself. This method allows turning the `Pin` into a reference\n     /// with the same lifetime as the original `Pin`.\n-    #[stable(feature = \"pin\", since = \"1.33.0\")]\n     #[inline(always)]\n-    pub fn get_mut(self) -> &'a mut T\n+    #[stable(feature = \"pin\", since = \"1.33.0\")]\n+    #[rustc_const_unstable(feature = \"const_pin\", issue = \"76654\")]\n+    pub const fn get_mut(self) -> &'a mut T\n     where\n         T: Unpin,\n     {\n@@ -736,9 +743,10 @@ impl<'a, T: ?Sized> Pin<&'a mut T> {\n     ///\n     /// If the underlying data is `Unpin`, `Pin::get_mut` should be used\n     /// instead.\n-    #[stable(feature = \"pin\", since = \"1.33.0\")]\n     #[inline(always)]\n-    pub unsafe fn get_unchecked_mut(self) -> &'a mut T {\n+    #[stable(feature = \"pin\", since = \"1.33.0\")]\n+    #[rustc_const_unstable(feature = \"const_pin\", issue = \"76654\")]\n+    pub const unsafe fn get_unchecked_mut(self) -> &'a mut T {\n         self.pointer\n     }\n "}, {"sha": "7e75c7cf47bf6b251cfc29ecb309b07c7acb0131", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/537ede465f25c80c99286aa7eb79a5295f345bc0/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/537ede465f25c80c99286aa7eb79a5295f345bc0/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=537ede465f25c80c99286aa7eb79a5295f345bc0", "patch": "@@ -43,6 +43,8 @@\n #![feature(iter_order_by)]\n #![feature(cmp_min_max_by)]\n #![feature(iter_map_while)]\n+#![feature(const_mut_refs)]\n+#![feature(const_pin)]\n #![feature(const_slice_from_raw_parts)]\n #![feature(const_raw_ptr_deref)]\n #![feature(never_type)]\n@@ -79,6 +81,7 @@ mod num;\n mod ops;\n mod option;\n mod pattern;\n+mod pin;\n mod ptr;\n mod result;\n mod slice;"}, {"sha": "6f617c8d0c2970b54d87a3038d07e1d837b85123", "filename": "library/core/tests/pin.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/537ede465f25c80c99286aa7eb79a5295f345bc0/library%2Fcore%2Ftests%2Fpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/537ede465f25c80c99286aa7eb79a5295f345bc0/library%2Fcore%2Ftests%2Fpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fpin.rs?ref=537ede465f25c80c99286aa7eb79a5295f345bc0", "patch": "@@ -0,0 +1,31 @@\n+use core::pin::Pin;\n+\n+#[test]\n+fn pin_const() {\n+    // test that the methods of `Pin` are usable in a const context\n+\n+    const POINTER: &'static usize = &2;\n+\n+    const PINNED: Pin<&'static usize> = Pin::new(POINTER);\n+    const PINNED_UNCHECKED: Pin<&'static usize> = unsafe { Pin::new_unchecked(POINTER) };\n+    assert_eq!(PINNED_UNCHECKED, PINNED);\n+\n+    const INNER: &'static usize = Pin::into_inner(PINNED);\n+    assert_eq!(INNER, POINTER);\n+\n+    const INNER_UNCHECKED: &'static usize = unsafe { Pin::into_inner_unchecked(PINNED) };\n+    assert_eq!(INNER_UNCHECKED, POINTER);\n+\n+    const REF: &'static usize = PINNED.get_ref();\n+    assert_eq!(REF, POINTER);\n+\n+    // Note: `pin_mut_const` tests that the methods of `Pin<&mut T>` are usable in a const context.\n+    // A const fn is used because `&mut` is not (yet) usable in constants.\n+    const fn pin_mut_const() {\n+        let _ = Pin::new(&mut 2).into_ref();\n+        let _ = Pin::new(&mut 2).get_mut();\n+        let _ = unsafe { Pin::new(&mut 2).get_unchecked_mut() };\n+    }\n+\n+    pin_mut_const();\n+}"}]}