{"sha": "3b14f25868dd0423b03b41ff413470866f774280", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiMTRmMjU4NjhkZDA0MjNiMDNiNDFmZjQxMzQ3MDg2NmY3NzQyODA=", "commit": {"author": {"name": "Seo Sanghyeon", "email": "sanxiyn@gmail.com", "date": "2013-12-09T14:18:24Z"}, "committer": {"name": "Seo Sanghyeon", "email": "sanxiyn@gmail.com", "date": "2013-12-09T16:17:32Z"}, "message": "Extend allocation lint for boxing expressions", "tree": {"sha": "471cc0ef630310f577e3bda8523cee2cee4bfe4c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/471cc0ef630310f577e3bda8523cee2cee4bfe4c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b14f25868dd0423b03b41ff413470866f774280", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b14f25868dd0423b03b41ff413470866f774280", "html_url": "https://github.com/rust-lang/rust/commit/3b14f25868dd0423b03b41ff413470866f774280", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b14f25868dd0423b03b41ff413470866f774280/comments", "author": {"login": "sanxiyn", "id": 45249, "node_id": "MDQ6VXNlcjQ1MjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/45249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanxiyn", "html_url": "https://github.com/sanxiyn", "followers_url": "https://api.github.com/users/sanxiyn/followers", "following_url": "https://api.github.com/users/sanxiyn/following{/other_user}", "gists_url": "https://api.github.com/users/sanxiyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanxiyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanxiyn/subscriptions", "organizations_url": "https://api.github.com/users/sanxiyn/orgs", "repos_url": "https://api.github.com/users/sanxiyn/repos", "events_url": "https://api.github.com/users/sanxiyn/events{/privacy}", "received_events_url": "https://api.github.com/users/sanxiyn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sanxiyn", "id": 45249, "node_id": "MDQ6VXNlcjQ1MjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/45249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanxiyn", "html_url": "https://github.com/sanxiyn", "followers_url": "https://api.github.com/users/sanxiyn/followers", "following_url": "https://api.github.com/users/sanxiyn/following{/other_user}", "gists_url": "https://api.github.com/users/sanxiyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanxiyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanxiyn/subscriptions", "organizations_url": "https://api.github.com/users/sanxiyn/orgs", "repos_url": "https://api.github.com/users/sanxiyn/repos", "events_url": "https://api.github.com/users/sanxiyn/events{/privacy}", "received_events_url": "https://api.github.com/users/sanxiyn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5f20212028fd6cb5161dbb2c0f14c9d94f1caea", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5f20212028fd6cb5161dbb2c0f14c9d94f1caea", "html_url": "https://github.com/rust-lang/rust/commit/e5f20212028fd6cb5161dbb2c0f14c9d94f1caea"}], "stats": {"total": 85, "additions": 62, "deletions": 23}, "files": [{"sha": "8ec0674f74f69f7f7dbf954ed55ea0f4a48dae13", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b14f25868dd0423b03b41ff413470866f774280/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b14f25868dd0423b03b41ff413470866f774280/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=3b14f25868dd0423b03b41ff413470866f774280", "patch": "@@ -428,7 +428,7 @@ pub fn build_link_meta(sess: Session,\n         }\n \n         fn len_and_str_lit(l: ast::lit) -> ~str {\n-            len_and_str(pprust::lit_to_str(@l))\n+            len_and_str(pprust::lit_to_str(&l))\n         }\n \n         let cmh_items = attr::sort_meta_items(cmh_items);"}, {"sha": "192249d6435d554c5b3495027002faf91830c433", "filename": "src/librustc/front/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b14f25868dd0423b03b41ff413470866f774280/src%2Flibrustc%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b14f25868dd0423b03b41ff413470866f774280/src%2Flibrustc%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Ftest.rs?ref=3b14f25868dd0423b03b41ff413470866f774280", "patch": "@@ -330,7 +330,7 @@ fn mk_test_module(cx: &TestCtxt) -> @ast::item {\n      };\n \n     debug!(\"Synthetic test module:\\n{}\\n\",\n-           pprust::item_to_str(@item.clone(), cx.sess.intr()));\n+           pprust::item_to_str(&item, cx.sess.intr()));\n \n     return @item;\n }"}, {"sha": "2a69b8226ae9192c75911e9c657036afd936de04", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 29, "deletions": 9, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/3b14f25868dd0423b03b41ff413470866f774280/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b14f25868dd0423b03b41ff413470866f774280/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=3b14f25868dd0423b03b41ff413470866f774280", "patch": "@@ -1028,27 +1028,47 @@ fn check_unused_mut_pat(cx: &Context, p: &ast::Pat) {\n     }\n }\n \n+enum Allocation {\n+    VectorAllocation,\n+    BoxAllocation\n+}\n+\n fn check_unnecessary_allocation(cx: &Context, e: &ast::Expr) {\n-    // Warn if string and vector literals with sigils are immediately borrowed.\n-    // Those can have the sigil removed.\n-    match e.node {\n+    // Warn if string and vector literals with sigils, or boxing expressions,\n+    // are immediately borrowed.\n+    let allocation = match e.node {\n         ast::ExprVstore(e2, ast::ExprVstoreUniq) |\n         ast::ExprVstore(e2, ast::ExprVstoreBox) => {\n             match e2.node {\n                 ast::ExprLit(@codemap::Spanned{node: ast::lit_str(..), ..}) |\n-                ast::ExprVec(..) => {}\n+                ast::ExprVec(..) => VectorAllocation,\n                 _ => return\n             }\n         }\n+        ast::ExprUnary(_, ast::UnUniq, _) |\n+        ast::ExprUnary(_, ast::UnBox(..), _) => BoxAllocation,\n \n         _ => return\n-    }\n+    };\n+\n+    let report = |msg| {\n+        cx.span_lint(unnecessary_allocation, e.span, msg);\n+    };\n \n     match cx.tcx.adjustments.find_copy(&e.id) {\n-        Some(@ty::AutoDerefRef(ty::AutoDerefRef {\n-            autoref: Some(ty::AutoBorrowVec(..)), .. })) => {\n-            cx.span_lint(unnecessary_allocation, e.span,\n-                         \"unnecessary allocation, the sigil can be removed\");\n+        Some(@ty::AutoDerefRef(ty::AutoDerefRef { autoref, .. })) => {\n+            match (allocation, autoref) {\n+                (VectorAllocation, Some(ty::AutoBorrowVec(..))) => {\n+                    report(\"unnecessary allocation, the sigil can be removed\");\n+                }\n+                (BoxAllocation, Some(ty::AutoPtr(_, ast::MutImmutable))) => {\n+                    report(\"unnecessary allocation, use & instead\");\n+                }\n+                (BoxAllocation, Some(ty::AutoPtr(_, ast::MutMutable))) => {\n+                    report(\"unnecessary allocation, use &mut instead\");\n+                }\n+                _ => ()\n+            }\n         }\n \n         _ => ()"}, {"sha": "451e6683f0cd3b3e2558cbc0a0bf522d991e3305", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3b14f25868dd0423b03b41ff413470866f774280/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b14f25868dd0423b03b41ff413470866f774280/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=3b14f25868dd0423b03b41ff413470866f774280", "patch": "@@ -119,78 +119,78 @@ pub mod rt {\n     impl<'self> ToSource for &'self str {\n         fn to_source(&self) -> @str {\n             let lit = dummy_spanned(ast::lit_str(self.to_managed(), ast::CookedStr));\n-            pprust::lit_to_str(@lit).to_managed()\n+            pprust::lit_to_str(&lit).to_managed()\n         }\n     }\n \n     impl ToSource for int {\n         fn to_source(&self) -> @str {\n             let lit = dummy_spanned(ast::lit_int(*self as i64, ast::ty_i));\n-            pprust::lit_to_str(@lit).to_managed()\n+            pprust::lit_to_str(&lit).to_managed()\n         }\n     }\n \n     impl ToSource for i8 {\n         fn to_source(&self) -> @str {\n             let lit = dummy_spanned(ast::lit_int(*self as i64, ast::ty_i8));\n-            pprust::lit_to_str(@lit).to_managed()\n+            pprust::lit_to_str(&lit).to_managed()\n         }\n     }\n \n     impl ToSource for i16 {\n         fn to_source(&self) -> @str {\n             let lit = dummy_spanned(ast::lit_int(*self as i64, ast::ty_i16));\n-            pprust::lit_to_str(@lit).to_managed()\n+            pprust::lit_to_str(&lit).to_managed()\n         }\n     }\n \n \n     impl ToSource for i32 {\n         fn to_source(&self) -> @str {\n             let lit = dummy_spanned(ast::lit_int(*self as i64, ast::ty_i32));\n-            pprust::lit_to_str(@lit).to_managed()\n+            pprust::lit_to_str(&lit).to_managed()\n         }\n     }\n \n     impl ToSource for i64 {\n         fn to_source(&self) -> @str {\n             let lit = dummy_spanned(ast::lit_int(*self as i64, ast::ty_i64));\n-            pprust::lit_to_str(@lit).to_managed()\n+            pprust::lit_to_str(&lit).to_managed()\n         }\n     }\n \n     impl ToSource for uint {\n         fn to_source(&self) -> @str {\n             let lit = dummy_spanned(ast::lit_uint(*self as u64, ast::ty_u));\n-            pprust::lit_to_str(@lit).to_managed()\n+            pprust::lit_to_str(&lit).to_managed()\n         }\n     }\n \n     impl ToSource for u8 {\n         fn to_source(&self) -> @str {\n             let lit = dummy_spanned(ast::lit_uint(*self as u64, ast::ty_u8));\n-            pprust::lit_to_str(@lit).to_managed()\n+            pprust::lit_to_str(&lit).to_managed()\n         }\n     }\n \n     impl ToSource for u16 {\n         fn to_source(&self) -> @str {\n             let lit = dummy_spanned(ast::lit_uint(*self as u64, ast::ty_u16));\n-            pprust::lit_to_str(@lit).to_managed()\n+            pprust::lit_to_str(&lit).to_managed()\n         }\n     }\n \n     impl ToSource for u32 {\n         fn to_source(&self) -> @str {\n             let lit = dummy_spanned(ast::lit_uint(*self as u64, ast::ty_u32));\n-            pprust::lit_to_str(@lit).to_managed()\n+            pprust::lit_to_str(&lit).to_managed()\n         }\n     }\n \n     impl ToSource for u64 {\n         fn to_source(&self) -> @str {\n             let lit = dummy_spanned(ast::lit_uint(*self as u64, ast::ty_u64));\n-            pprust::lit_to_str(@lit).to_managed()\n+            pprust::lit_to_str(&lit).to_managed()\n         }\n     }\n "}, {"sha": "ea382e1cefef8298196dc40b6f9fccf092afa530", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b14f25868dd0423b03b41ff413470866f774280/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b14f25868dd0423b03b41ff413470866f774280/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=3b14f25868dd0423b03b41ff413470866f774280", "patch": "@@ -1902,7 +1902,7 @@ pub fn print_meta_item(s: @ps, item: &ast::MetaItem) {\n       ast::MetaNameValue(name, value) => {\n         word_space(s, name);\n         word_space(s, \"=\");\n-        print_literal(s, @value);\n+        print_literal(s, &value);\n       }\n       ast::MetaList(name, ref items) => {\n         word(s.s, name);"}, {"sha": "608cb7fd4a53e2c3c677875f0c3f2a1ff812712c", "filename": "src/test/compile-fail/lint-allocation.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3b14f25868dd0423b03b41ff413470866f774280/src%2Ftest%2Fcompile-fail%2Flint-allocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b14f25868dd0423b03b41ff413470866f774280/src%2Ftest%2Fcompile-fail%2Flint-allocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-allocation.rs?ref=3b14f25868dd0423b03b41ff413470866f774280", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[deny(unnecessary_allocation)];\n+\n+fn f(_: &int) {}\n+fn g(_: &mut int) {}\n+\n+fn main() {\n+    f(~1); //~ ERROR unnecessary allocation, use & instead\n+    g(~1); //~ ERROR unnecessary allocation, use &mut instead\n+}"}]}