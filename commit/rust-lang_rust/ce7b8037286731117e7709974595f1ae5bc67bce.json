{"sha": "ce7b8037286731117e7709974595f1ae5bc67bce", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlN2I4MDM3Mjg2NzMxMTE3ZTc3MDk5NzQ1OTVmMWFlNWJjNjdiY2U=", "commit": {"author": {"name": "Lindsey Kuper", "email": "lindsey@rockstargirl.org", "date": "2012-06-22T23:00:14Z"}, "committer": {"name": "Lindsey Kuper", "email": "lindsey@rockstargirl.org", "date": "2012-06-22T23:48:03Z"}, "message": "Minor capitalization/punctuation fixes in error messages", "tree": {"sha": "688b7a35d8f84fd4eb78e3a469f7adb14a8abebe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/688b7a35d8f84fd4eb78e3a469f7adb14a8abebe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce7b8037286731117e7709974595f1ae5bc67bce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce7b8037286731117e7709974595f1ae5bc67bce", "html_url": "https://github.com/rust-lang/rust/commit/ce7b8037286731117e7709974595f1ae5bc67bce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce7b8037286731117e7709974595f1ae5bc67bce/comments", "author": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "46809f7ab7e2276d004da3476074a0489de996f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/46809f7ab7e2276d004da3476074a0489de996f8", "html_url": "https://github.com/rust-lang/rust/commit/46809f7ab7e2276d004da3476074a0489de996f8"}], "stats": {"total": 41, "additions": 21, "deletions": 20}, "files": [{"sha": "e03967af79eeeedb9e3f370373435f58f07b8623", "filename": "src/rustc/middle/typeck/check.rs", "status": "modified", "additions": 17, "deletions": 16, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/ce7b8037286731117e7709974595f1ae5bc67bce/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce7b8037286731117e7709974595f1ae5bc67bce/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs?ref=ce7b8037286731117e7709974595f1ae5bc67bce", "patch": "@@ -385,7 +385,7 @@ fn check_item(ccx: @crate_ctxt, it: @ast::item) {\n           // Check that there's at least one field\n           let (fields,_) = split_class_items(members);\n           if fields.len() < 1u {\n-              ccx.tcx.sess.span_err(it.span, \"A class must have at least one \\\n+              ccx.tcx.sess.span_err(it.span, \"a class must have at least one \\\n                 field\");\n           }\n           // Check that the class is instantiable\n@@ -942,7 +942,7 @@ fn check_expr_with_unifier(fcx: @fn_ctxt,\n                 // separate case below.\n                 tcx.sess.span_bug(\n                     expr.span,\n-                    #fmt[\"Comparison operator in expr_binop: %s\",\n+                    #fmt[\"comparison operator in expr_binop: %s\",\n                          ast_util::binop_to_str(op)]);\n               }\n               _ { lhs_t }\n@@ -1221,7 +1221,7 @@ fn check_expr_with_unifier(fcx: @fn_ctxt,\n               result::ok(_) { /* fall through */ }\n               result::err(_) {\n                 tcx.sess.span_err(expr.span,\n-                                  \"ret; in function returning non-nil\"); }\n+                                  \"`ret;` in function returning non-nil\"); }\n             }\n           }\n           some(e) { check_expr_with(fcx, e, ret_ty); }\n@@ -1303,16 +1303,17 @@ fn check_expr_with_unifier(fcx: @fn_ctxt,\n               result::ok(_) {}\n               result::err(err) {\n                 tcx.sess.span_fatal(\n-                    expr.span, #fmt(\"a loop function's last argument \\\n+                    expr.span, #fmt(\"a `loop` function's last argument \\\n                                      should return `bool`, not `%s`\",\n                                     fcx.infcx.ty_to_str(fty.output)));\n               }\n             }\n             (ty::mk_fn(tcx, {output: ty::mk_nil(tcx) with fty}), fty.proto)\n           }\n           _ {\n-            tcx.sess.span_fatal(expr.span, \"a loop function's last argument \\\n-                                            should be of function type\");\n+            tcx.sess.span_fatal(expr.span, \"a `loop` function's last \\\n+                                            argument should be of function \\\n+                                            type\");\n           }\n         };\n         alt check b.node {\n@@ -1338,7 +1339,7 @@ fn check_expr_with_unifier(fcx: @fn_ctxt,\n             (ty::mk_fn(tcx, fty), fty.proto)\n           }\n           _ {\n-            tcx.sess.span_fatal(expr.span, \"a do function's last argument \\\n+            tcx.sess.span_fatal(expr.span, \"a `do` function's last argument \\\n                                             should be of function type\");\n           }\n         };\n@@ -1786,8 +1787,8 @@ fn check_instantiable(tcx: ty::ctxt,\n     let rty = ty::node_id_to_type(tcx, item_id);\n     if !ty::is_instantiable(tcx, rty) {\n         tcx.sess.span_err(sp, #fmt[\"this type cannot be instantiated \\\n-                                    without an instance of itself. \\\n-                                    Consider using option<%s>.\",\n+                                    without an instance of itself; \\\n+                                    consider using `option<%s>`\",\n                                    ty_to_str(tcx, rty)]);\n     }\n }\n@@ -1826,7 +1827,7 @@ fn check_enum_variants(ccx: @crate_ctxt,\n         }\n         if vec::contains(disr_vals, disr_val) {\n             ccx.tcx.sess.span_err(v.span,\n-                                  \"discriminator value already exists.\");\n+                                  \"discriminator value already exists\");\n         }\n         disr_vals += [disr_val];\n         let ctor_ty = ty::node_id_to_type(ccx.tcx, v.node.id);\n@@ -1853,7 +1854,7 @@ fn check_enum_variants(ccx: @crate_ctxt,\n           _ { false }\n         }\n     }) {\n-        ccx.tcx.sess.span_err(sp, \"illegal recursive enum type. \\\n+        ccx.tcx.sess.span_err(sp, \"illegal recursive enum type; \\\n                                    wrap the inner value in a box to \\\n                                    make it representable\");\n     }\n@@ -2200,13 +2201,13 @@ fn check_bounds_are_used(ccx: @crate_ctxt,\n     if !r_used {\n         ccx.tcx.sess.span_err(\n             span, \"lifetime `self` unused inside \\\n-                   reference-parameterized type.\");\n+                   reference-parameterized type\");\n     }\n \n     for tps_used.eachi { |i, b|\n         if !b {\n             ccx.tcx.sess.span_err(\n-                span, #fmt[\"Type parameter %s is unused.\", *tps[i].ident]);\n+                span, #fmt[\"type parameter `%s` is unused\", *tps[i].ident]);\n         }\n     }\n }\n@@ -2273,13 +2274,13 @@ fn check_intrinsic_type(ccx: @crate_ctxt, it: @ast::native_item) {\n     let i_n_tps = (*i_ty.bounds).len();\n     if i_n_tps != n_tps {\n         tcx.sess.span_err(it.span, #fmt(\"intrinsic has wrong number \\\n-                                         of type parameters. found %u, \\\n+                                         of type parameters: found %u, \\\n                                          expected %u\", i_n_tps, n_tps));\n     } else {\n         require_same_types(\n             tcx, none, it.span, i_ty.ty, fty,\n-            {|| #fmt[\"intrinsic has wrong type. \\\n-                      expected %s\",\n+            {|| #fmt[\"intrinsic has wrong type: \\\n+                      expected `%s`\",\n                      ty_to_str(ccx.tcx, fty)]});\n     }\n }"}, {"sha": "17510164a5f9e92e85bab28f65c0e0e9efb82264", "filename": "src/test/compile-fail/issue-1763.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce7b8037286731117e7709974595f1ae5bc67bce/src%2Ftest%2Fcompile-fail%2Fissue-1763.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce7b8037286731117e7709974595f1ae5bc67bce/src%2Ftest%2Fcompile-fail%2Fissue-1763.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-1763.rs?ref=ce7b8037286731117e7709974595f1ae5bc67bce", "patch": "@@ -1,6 +1,6 @@\n // Issue #1763 - infer types correctly\n \n-type actor<T> = { //! ERROR Type parameter T is unused.\n+type actor<T> = { //! ERROR type parameter `T` is unused\n     unused: bool\n };\n "}, {"sha": "69970f8dc950e24c0148cac26be8961243c42261", "filename": "src/test/compile-fail/issue-2509-a.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce7b8037286731117e7709974595f1ae5bc67bce/src%2Ftest%2Fcompile-fail%2Fissue-2509-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce7b8037286731117e7709974595f1ae5bc67bce/src%2Ftest%2Fcompile-fail%2Fissue-2509-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2509-a.rs?ref=ce7b8037286731117e7709974595f1ae5bc67bce", "patch": "@@ -1,4 +1,4 @@\n-class c { //! ERROR A class must have at least one field\n+class c { //! ERROR a class must have at least one field\n     new() { }\n }\n "}, {"sha": "4153f413dc034bddcb5baf4ae0d02ecbf742ab3d", "filename": "src/test/compile-fail/ret-non-nil.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce7b8037286731117e7709974595f1ae5bc67bce/src%2Ftest%2Fcompile-fail%2Fret-non-nil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce7b8037286731117e7709974595f1ae5bc67bce/src%2Ftest%2Fcompile-fail%2Fret-non-nil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fret-non-nil.rs?ref=ce7b8037286731117e7709974595f1ae5bc67bce", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern: ret; in function returning non-nil\n+// error-pattern: `ret;` in function returning non-nil\n \n fn f() { ret; }\n "}, {"sha": "7eb7e118b39f0465ccc181d1bbdbeab9ec6c2195", "filename": "src/test/compile-fail/vec-field.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce7b8037286731117e7709974595f1ae5bc67bce/src%2Ftest%2Fcompile-fail%2Fvec-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce7b8037286731117e7709974595f1ae5bc67bce/src%2Ftest%2Fcompile-fail%2Fvec-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvec-field.rs?ref=ce7b8037286731117e7709974595f1ae5bc67bce", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern:attempted access of field `some_field_name` on type `[int]`\n+// error-pattern:attempted access of field `some_field_name` on type `[int]/~`\n // issue #367\n \n fn f() {"}]}