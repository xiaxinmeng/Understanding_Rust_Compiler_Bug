{"sha": "0b82e03a88af4fccfd64a62288a9066cadc2e603", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiODJlMDNhODhhZjRmY2NmZDY0YTYyMjg4YTkwNjZjYWRjMmU2MDM=", "commit": {"author": {"name": "OCTronics", "email": "octronics@riseup.net", "date": "2018-10-19T10:00:45Z"}, "committer": {"name": "OCTronics", "email": "octronics@riseup.net", "date": "2018-10-24T20:02:32Z"}, "message": "Documents `From` implementations for `Stdio`\n\nAdd a basic summary and an example to From `ChildStdin`, `ChildStdout`,\n`ChildStderr`, `File` implementations.", "tree": {"sha": "2afab703f3a5ca70f70408e7bea80fbbb2814e40", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2afab703f3a5ca70f70408e7bea80fbbb2814e40"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b82e03a88af4fccfd64a62288a9066cadc2e603", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b82e03a88af4fccfd64a62288a9066cadc2e603", "html_url": "https://github.com/rust-lang/rust/commit/0b82e03a88af4fccfd64a62288a9066cadc2e603", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b82e03a88af4fccfd64a62288a9066cadc2e603/comments", "author": {"login": "octronics", "id": 43217372, "node_id": "MDQ6VXNlcjQzMjE3Mzcy", "avatar_url": "https://avatars.githubusercontent.com/u/43217372?v=4", "gravatar_id": "", "url": "https://api.github.com/users/octronics", "html_url": "https://github.com/octronics", "followers_url": "https://api.github.com/users/octronics/followers", "following_url": "https://api.github.com/users/octronics/following{/other_user}", "gists_url": "https://api.github.com/users/octronics/gists{/gist_id}", "starred_url": "https://api.github.com/users/octronics/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/octronics/subscriptions", "organizations_url": "https://api.github.com/users/octronics/orgs", "repos_url": "https://api.github.com/users/octronics/repos", "events_url": "https://api.github.com/users/octronics/events{/privacy}", "received_events_url": "https://api.github.com/users/octronics/received_events", "type": "User", "site_admin": false}, "committer": {"login": "octronics", "id": 43217372, "node_id": "MDQ6VXNlcjQzMjE3Mzcy", "avatar_url": "https://avatars.githubusercontent.com/u/43217372?v=4", "gravatar_id": "", "url": "https://api.github.com/users/octronics", "html_url": "https://github.com/octronics", "followers_url": "https://api.github.com/users/octronics/followers", "following_url": "https://api.github.com/users/octronics/following{/other_user}", "gists_url": "https://api.github.com/users/octronics/gists{/gist_id}", "starred_url": "https://api.github.com/users/octronics/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/octronics/subscriptions", "organizations_url": "https://api.github.com/users/octronics/orgs", "repos_url": "https://api.github.com/users/octronics/repos", "events_url": "https://api.github.com/users/octronics/events{/privacy}", "received_events_url": "https://api.github.com/users/octronics/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f99911a4a0bead7dd1f9ef2f90442844434cc391", "url": "https://api.github.com/repos/rust-lang/rust/commits/f99911a4a0bead7dd1f9ef2f90442844434cc391", "html_url": "https://github.com/rust-lang/rust/commit/f99911a4a0bead7dd1f9ef2f90442844434cc391"}], "stats": {"total": 88, "additions": 88, "deletions": 0}, "files": [{"sha": "a9219f75362db4dddb74cb879b98b305d05d5731", "filename": "src/libstd/process.rs", "status": "modified", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/0b82e03a88af4fccfd64a62288a9066cadc2e603/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b82e03a88af4fccfd64a62288a9066cadc2e603/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=0b82e03a88af4fccfd64a62288a9066cadc2e603", "patch": "@@ -1016,27 +1016,115 @@ impl fmt::Debug for Stdio {\n \n #[stable(feature = \"stdio_from\", since = \"1.20.0\")]\n impl From<ChildStdin> for Stdio {\n+    /// Converts a `ChildStdin` into a `Stdio`\n+    ///\n+    /// # Examples\n+    ///\n+    /// `ChildStdin` will be converted to `Stdio` using `Stdio::from` under the hood.\n+    ///\n+    /// ```rust\n+    /// use std::process::{Command, Stdio};\n+    ///\n+    /// let reverse = Command::new(\"rev\")\n+    ///     .stdin(Stdio::piped())\n+    ///     .spawn()\n+    ///     .expect(\"failed reverse command\");\n+    ///\n+    /// let _echo = Command::new(\"echo\")\n+    ///     .arg(\"Hello, world!\")\n+    ///     .stdout(reverse.stdin.unwrap()) // Converted into a Stdio here\n+    ///     .output()\n+    ///     .expect(\"failed echo command\");\n+    ///\n+    /// // \"!dlrow ,olleH\" echoed to console\n+    /// ```\n     fn from(child: ChildStdin) -> Stdio {\n         Stdio::from_inner(child.into_inner().into())\n     }\n }\n \n #[stable(feature = \"stdio_from\", since = \"1.20.0\")]\n impl From<ChildStdout> for Stdio {\n+    /// Converts a `ChildStdout` into a `Stdio`\n+    ///\n+    /// # Examples\n+    ///\n+    /// `ChildStdout` will be converted to `Stdio` using `Stdio::from` under the hood.\n+    ///\n+    /// ```rust\n+    /// use std::process::{Command, Stdio};\n+    ///\n+    /// let hello = Command::new(\"echo\")\n+    ///     .arg(\"Hello, world!\")\n+    ///     .stdout(Stdio::piped())\n+    ///     .spawn()\n+    ///     .expect(\"failed echo command\");\n+    ///\n+    /// let reverse = Command::new(\"rev\")\n+    ///     .stdin(hello.stdout.unwrap())  // Converted into a Stdio here\n+    ///     .output()\n+    ///     .expect(\"failed reverse command\");\n+    ///\n+    /// assert_eq!(reverse.stdout, b\"!dlrow ,olleH\\n\");\n+    /// ```\n     fn from(child: ChildStdout) -> Stdio {\n         Stdio::from_inner(child.into_inner().into())\n     }\n }\n \n #[stable(feature = \"stdio_from\", since = \"1.20.0\")]\n impl From<ChildStderr> for Stdio {\n+    /// Converts a `ChildStderr` into a `Stdio`\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```rust,no_run\n+    /// use std::process::{Command, Stdio};\n+    ///\n+    /// let reverse = Command::new(\"rev\")\n+    ///     .arg(\"non_existing_file.txt\")\n+    ///     .stderr(Stdio::piped())\n+    ///     .spawn()\n+    ///     .expect(\"failed reverse command\");\n+    ///\n+    /// let cat = Command::new(\"cat\")\n+    ///     .arg(\"-\")\n+    ///     .stdin(reverse.stderr.unwrap()) // Converted into a Stdio here\n+    ///     .output()\n+    ///     .expect(\"failed echo command\");\n+    ///\n+    /// assert_eq!(\n+    ///     String::from_utf8_lossy(&cat.stdout),\n+    ///     \"rev: cannot open non_existing_file.txt: No such file or directory\\n\"\n+    /// );\n+    /// ```\n     fn from(child: ChildStderr) -> Stdio {\n         Stdio::from_inner(child.into_inner().into())\n     }\n }\n \n #[stable(feature = \"stdio_from\", since = \"1.20.0\")]\n impl From<fs::File> for Stdio {\n+    /// Converts a `File` into a `Stdio`\n+    ///\n+    /// # Examples\n+    ///\n+    /// `File` will be converted to `Stdio` using `Stdio::from` under the hood.\n+    ///\n+    /// ```rust,no_run\n+    /// use std::fs::File;\n+    /// use std::process::Command;\n+    ///\n+    /// // With the `foo.txt` file containing `Hello, world!\"\n+    /// let file = File::open(\"foo.txt\").unwrap();\n+    ///\n+    /// let reverse = Command::new(\"rev\")\n+    ///     .stdin(file)  // Implicit File convertion into a Stdio\n+    ///     .output()\n+    ///     .expect(\"failed reverse command\");\n+    ///\n+    /// assert_eq!(reverse.stdout, b\"!dlrow ,olleH\");\n+    /// ```\n     fn from(file: fs::File) -> Stdio {\n         Stdio::from_inner(file.into_inner().into())\n     }"}]}