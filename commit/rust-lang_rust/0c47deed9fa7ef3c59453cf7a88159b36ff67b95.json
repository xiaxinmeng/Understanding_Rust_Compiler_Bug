{"sha": "0c47deed9fa7ef3c59453cf7a88159b36ff67b95", "node_id": "C_kwDOAAsO6NoAKDBjNDdkZWVkOWZhN2VmM2M1OTQ1M2NmN2E4ODE1OWIzNmZmNjdiOTU", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-11-17T09:03:27Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-11-21T20:28:48Z"}, "message": "Reduce the amount of passed-around arguments that will get merged into one later anyway", "tree": {"sha": "2f561fdbdef76fa03d2fe43fb7e0da9b8459c68a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f561fdbdef76fa03d2fe43fb7e0da9b8459c68a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c47deed9fa7ef3c59453cf7a88159b36ff67b95", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c47deed9fa7ef3c59453cf7a88159b36ff67b95", "html_url": "https://github.com/rust-lang/rust/commit/0c47deed9fa7ef3c59453cf7a88159b36ff67b95", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c47deed9fa7ef3c59453cf7a88159b36ff67b95/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1cbc45942d5c0f6eb5d94e3b10762ba541958035", "url": "https://api.github.com/repos/rust-lang/rust/commits/1cbc45942d5c0f6eb5d94e3b10762ba541958035", "html_url": "https://github.com/rust-lang/rust/commit/1cbc45942d5c0f6eb5d94e3b10762ba541958035"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "458cbfa6e35cf8cde91de31d1c68190130365fe4", "filename": "compiler/rustc_middle/src/ty/adjustment.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0c47deed9fa7ef3c59453cf7a88159b36ff67b95/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadjustment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c47deed9fa7ef3c59453cf7a88159b36ff67b95/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadjustment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadjustment.rs?ref=0c47deed9fa7ef3c59453cf7a88159b36ff67b95", "patch": "@@ -1,7 +1,5 @@\n-use crate::ty::subst::SubstsRef;\n use crate::ty::{self, Ty, TyCtxt};\n use rustc_hir as hir;\n-use rustc_hir::def_id::DefId;\n use rustc_hir::lang_items::LangItem;\n use rustc_macros::HashStable;\n use rustc_span::Span;\n@@ -121,7 +119,8 @@ pub struct OverloadedDeref<'tcx> {\n }\n \n impl<'tcx> OverloadedDeref<'tcx> {\n-    pub fn method_call(&self, tcx: TyCtxt<'tcx>, source: Ty<'tcx>) -> (DefId, SubstsRef<'tcx>) {\n+    /// Get the zst function item type for this method call.\n+    pub fn method_call(&self, tcx: TyCtxt<'tcx>, source: Ty<'tcx>) -> Ty<'tcx> {\n         let trait_def_id = match self.mutbl {\n             hir::Mutability::Not => tcx.require_lang_item(LangItem::Deref, None),\n             hir::Mutability::Mut => tcx.require_lang_item(LangItem::DerefMut, None),\n@@ -132,7 +131,7 @@ impl<'tcx> OverloadedDeref<'tcx> {\n             .find(|m| m.kind == ty::AssocKind::Fn)\n             .unwrap()\n             .def_id;\n-        (method_def_id, tcx.mk_substs_trait(source, &[]))\n+        tcx.mk_fn_def(method_def_id, tcx.mk_substs_trait(source, &[]))\n     }\n }\n "}, {"sha": "60e64b45963c3b500e4188786fc44697590b14e3", "filename": "compiler/rustc_mir_build/src/thir/cx/expr.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/0c47deed9fa7ef3c59453cf7a88159b36ff67b95/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c47deed9fa7ef3c59453cf7a88159b36ff67b95/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs?ref=0c47deed9fa7ef3c59453cf7a88159b36ff67b95", "patch": "@@ -14,11 +14,10 @@ use rustc_middle::thir::*;\n use rustc_middle::ty::adjustment::{\n     Adjust, Adjustment, AutoBorrow, AutoBorrowMutability, PointerCast,\n };\n-use rustc_middle::ty::subst::{InternalSubsts, SubstsRef};\n+use rustc_middle::ty::subst::InternalSubsts;\n use rustc_middle::ty::{\n     self, AdtKind, InlineConstSubsts, InlineConstSubstsParts, ScalarInt, Ty, UpvarSubsts, UserType,\n };\n-use rustc_span::def_id::DefId;\n use rustc_span::Span;\n use rustc_target::abi::VariantIdx;\n \n@@ -806,23 +805,25 @@ impl<'tcx> Cx<'tcx> {\n         &mut self,\n         expr: &hir::Expr<'_>,\n         span: Span,\n-        overloaded_callee: Option<(DefId, SubstsRef<'tcx>)>,\n+        overloaded_callee: Option<Ty<'tcx>>,\n     ) -> Expr<'tcx> {\n         let temp_lifetime =\n             self.rvalue_scopes.temporary_scope(self.region_scope_tree, expr.hir_id.local_id);\n-        let (def_id, substs, user_ty) = match overloaded_callee {\n-            Some((def_id, substs)) => (def_id, substs, None),\n+        let (ty, user_ty) = match overloaded_callee {\n+            Some(fn_def) => (fn_def, None),\n             None => {\n                 let (kind, def_id) =\n                     self.typeck_results().type_dependent_def(expr.hir_id).unwrap_or_else(|| {\n                         span_bug!(expr.span, \"no type-dependent def for method callee\")\n                     });\n                 let user_ty = self.user_substs_applied_to_res(expr.hir_id, Res::Def(kind, def_id));\n                 debug!(\"method_callee: user_ty={:?}\", user_ty);\n-                (def_id, self.typeck_results().node_substs(expr.hir_id), user_ty)\n+                (\n+                    self.tcx().mk_fn_def(def_id, self.typeck_results().node_substs(expr.hir_id)),\n+                    user_ty,\n+                )\n             }\n         };\n-        let ty = self.tcx().mk_fn_def(def_id, substs);\n         Expr { temp_lifetime, ty, span, kind: ExprKind::ZstLiteral { user_ty } }\n     }\n \n@@ -957,7 +958,7 @@ impl<'tcx> Cx<'tcx> {\n         &mut self,\n         expr: &'tcx hir::Expr<'tcx>,\n         place_ty: Ty<'tcx>,\n-        overloaded_callee: Option<(DefId, SubstsRef<'tcx>)>,\n+        overloaded_callee: Option<Ty<'tcx>>,\n         args: Box<[ExprId]>,\n         span: Span,\n     ) -> ExprKind<'tcx> {"}]}