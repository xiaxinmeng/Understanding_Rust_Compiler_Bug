{"sha": "7a3dca69bb706a015cf220a80ca35234dd2aeee6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhM2RjYTY5YmI3MDZhMDE1Y2YyMjBhODBjYTM1MjM0ZGQyYWVlZTY=", "commit": {"author": {"name": "Remy Rakic", "email": "remy.rakic@gmail.com", "date": "2019-11-19T15:58:09Z"}, "committer": {"name": "Remy Rakic", "email": "remy.rakic@gmail.com", "date": "2019-12-06T10:50:01Z"}, "message": "Polonius: emit `placeholder` and `known_subset` facts, as inputs to the subset error computation", "tree": {"sha": "73f9e287396a4db45f6e2736baa49d0a59a90150", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/73f9e287396a4db45f6e2736baa49d0a59a90150"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a3dca69bb706a015cf220a80ca35234dd2aeee6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a3dca69bb706a015cf220a80ca35234dd2aeee6", "html_url": "https://github.com/rust-lang/rust/commit/7a3dca69bb706a015cf220a80ca35234dd2aeee6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a3dca69bb706a015cf220a80ca35234dd2aeee6/comments", "author": {"login": "lqd", "id": 247183, "node_id": "MDQ6VXNlcjI0NzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/247183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lqd", "html_url": "https://github.com/lqd", "followers_url": "https://api.github.com/users/lqd/followers", "following_url": "https://api.github.com/users/lqd/following{/other_user}", "gists_url": "https://api.github.com/users/lqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lqd/subscriptions", "organizations_url": "https://api.github.com/users/lqd/orgs", "repos_url": "https://api.github.com/users/lqd/repos", "events_url": "https://api.github.com/users/lqd/events{/privacy}", "received_events_url": "https://api.github.com/users/lqd/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lqd", "id": 247183, "node_id": "MDQ6VXNlcjI0NzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/247183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lqd", "html_url": "https://github.com/lqd", "followers_url": "https://api.github.com/users/lqd/followers", "following_url": "https://api.github.com/users/lqd/following{/other_user}", "gists_url": "https://api.github.com/users/lqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lqd/subscriptions", "organizations_url": "https://api.github.com/users/lqd/orgs", "repos_url": "https://api.github.com/users/lqd/repos", "events_url": "https://api.github.com/users/lqd/events{/privacy}", "received_events_url": "https://api.github.com/users/lqd/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4dd6292c3c563e53732672d878930a9c26d512fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/4dd6292c3c563e53732672d878930a9c26d512fc", "html_url": "https://github.com/rust-lang/rust/commit/4dd6292c3c563e53732672d878930a9c26d512fc"}], "stats": {"total": 32, "additions": 32, "deletions": 0}, "files": [{"sha": "a16c36d749f0d704d0d86a6987585d394417d734", "filename": "src/librustc_mir/borrow_check/nll/facts.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a3dca69bb706a015cf220a80ca35234dd2aeee6/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ffacts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3dca69bb706a015cf220a80ca35234dd2aeee6/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ffacts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ffacts.rs?ref=7a3dca69bb706a015cf220a80ca35234dd2aeee6", "patch": "@@ -66,6 +66,7 @@ impl AllFactsExt for AllFacts {\n             wr.write_facts_to_path(self.[\n                 borrow_region,\n                 universal_region,\n+                placeholder,\n                 cfg_edge,\n                 killed,\n                 outlives,\n@@ -80,6 +81,7 @@ impl AllFactsExt for AllFacts {\n                 initialized_at,\n                 moved_out_at,\n                 path_accessed_at,\n+                known_subset,\n             ])\n         }\n         Ok(())"}, {"sha": "ffd9c011717dfbc03d7c742fc5a49dc3f514f513", "filename": "src/librustc_mir/borrow_check/nll/mod.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/7a3dca69bb706a015cf220a80ca35234dd2aeee6/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3dca69bb706a015cf220a80ca35234dd2aeee6/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs?ref=7a3dca69bb706a015cf220a80ca35234dd2aeee6", "patch": "@@ -209,6 +209,36 @@ pub(in crate::borrow_check) fn compute_regions<'cx, 'tcx>(\n             .universal_region\n             .extend(universal_regions.universal_regions());\n         populate_polonius_move_facts(all_facts, move_data, location_table, &body);\n+\n+        // Emit universal regions facts, and their relations, for Polonius.\n+        //\n+        // 1: universal regions are modeled in Polonius as a pair:\n+        // - the universal region vid itself.\n+        // - a \"placeholder loan\" associated to this universal region. Since they don't exist in\n+        //   the `borrow_set`, their `BorrowIndex` are synthesized as the universal region index\n+        //   added to the existing number of loans, as if they succeeded them in the set.\n+        //\n+        let borrow_count = borrow_set.borrows.len();\n+        debug!(\n+            \"compute_regions: polonius placeholders, num_universals={}, borrow_count={}\",\n+            universal_regions.len(),\n+            borrow_count\n+        );\n+\n+        for universal_region in universal_regions.universal_regions() {\n+            let universal_region_idx = universal_region.index();\n+            let placeholder_loan_idx = borrow_count + universal_region_idx;\n+            all_facts.placeholder.push((universal_region, placeholder_loan_idx.into()));\n+        }\n+\n+        // 2: the universal region relations `outlives` constraints are emitted as\n+        //  `known_subset` facts.\n+        for (fr1, fr2) in universal_region_relations.known_outlives() {\n+            if fr1 != fr2 {\n+                debug!(\"compute_regions: emitting polonius `known_subset` fr1={:?}, fr2={:?}\", fr1, fr2);\n+                all_facts.known_subset.push((*fr1, *fr2));\n+            }\n+        }\n     }\n \n     // Create the region inference context, taking ownership of the"}]}