{"sha": "db4826dd6ca48663a0b4c5ab0681258999017c7d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiNDgyNmRkNmNhNDg2NjNhMGI0YzVhYjA2ODEyNTg5OTkwMTdjN2Q=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-06-11T15:50:34Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-06-20T13:34:51Z"}, "message": "Move bounds on associated types to the type\n\nGiven `trait X { type U; }` the bound `<Self as X>::U` now lives\non the type, rather than the trait. This is feature gated on\n`feature(generic_associated_types)` for now until more testing can\nbe done.\n\nThe also enabled type-generic associated types since we no longer\nneed \"implies bounds\".", "tree": {"sha": "ea86c5d311b4663aa2544433855f3be0dd5f9be9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea86c5d311b4663aa2544433855f3be0dd5f9be9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db4826dd6ca48663a0b4c5ab0681258999017c7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db4826dd6ca48663a0b4c5ab0681258999017c7d", "html_url": "https://github.com/rust-lang/rust/commit/db4826dd6ca48663a0b4c5ab0681258999017c7d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db4826dd6ca48663a0b4c5ab0681258999017c7d/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9818bc08d314708da38d1f67b6de75c60a3a6ebf", "url": "https://api.github.com/repos/rust-lang/rust/commits/9818bc08d314708da38d1f67b6de75c60a3a6ebf", "html_url": "https://github.com/rust-lang/rust/commit/9818bc08d314708da38d1f67b6de75c60a3a6ebf"}], "stats": {"total": 837, "additions": 342, "deletions": 495}, "files": [{"sha": "383979f8640759e97640a69ee1d5db5a3652d226", "filename": "src/librustc_infer/infer/outlives/verify.rs", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/db4826dd6ca48663a0b4c5ab0681258999017c7d/src%2Flibrustc_infer%2Finfer%2Foutlives%2Fverify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db4826dd6ca48663a0b4c5ab0681258999017c7d/src%2Flibrustc_infer%2Finfer%2Foutlives%2Fverify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Foutlives%2Fverify.rs?ref=db4826dd6ca48663a0b4c5ab0681258999017c7d", "patch": "@@ -1,9 +1,8 @@\n use crate::infer::outlives::env::RegionBoundPairs;\n use crate::infer::{GenericKind, VerifyBound};\n-use crate::traits;\n use rustc_data_structures::captures::Captures;\n use rustc_hir::def_id::DefId;\n-use rustc_middle::ty::subst::{GenericArg, GenericArgKind, InternalSubsts, Subst};\n+use rustc_middle::ty::subst::{GenericArg, GenericArgKind, Subst};\n use rustc_middle::ty::{self, Ty, TyCtxt};\n \n /// The `TypeOutlives` struct has the job of \"lowering\" a `T: 'a`\n@@ -311,18 +310,14 @@ impl<'cx, 'tcx> VerifyBoundCx<'cx, 'tcx> {\n     fn region_bounds_declared_on_associated_item(\n         &self,\n         assoc_item_def_id: DefId,\n-    ) -> impl Iterator<Item = ty::Region<'tcx>> + 'cx + Captures<'tcx> {\n+    ) -> impl Iterator<Item = ty::Region<'tcx>> {\n         let tcx = self.tcx;\n-        let assoc_item = tcx.associated_item(assoc_item_def_id);\n-        let trait_def_id = assoc_item.container.assert_trait();\n-        let trait_predicates = tcx.predicates_of(trait_def_id).predicates.iter().map(|(p, _)| *p);\n-        let identity_substs = InternalSubsts::identity_for_item(tcx, assoc_item_def_id);\n-        let identity_proj = tcx.mk_projection(assoc_item_def_id, identity_substs);\n-        self.collect_outlives_from_predicate_list(\n-            move |ty| ty == identity_proj,\n-            traits::elaborate_predicates(tcx, trait_predicates).map(|o| o.predicate),\n-        )\n-        .map(|b| b.1)\n+        let predicates = tcx.projection_predicates(assoc_item_def_id);\n+        predicates\n+            .into_iter()\n+            .filter_map(|p| p.to_opt_type_outlives())\n+            .filter_map(|p| p.no_bound_vars())\n+            .map(|b| b.1)\n     }\n \n     /// Searches through a predicate list for a predicate `T: 'a`."}, {"sha": "43b6d8da03a79b6e9d734f2a02040f14ea10ed30", "filename": "src/librustc_infer/traits/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db4826dd6ca48663a0b4c5ab0681258999017c7d/src%2Flibrustc_infer%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db4826dd6ca48663a0b4c5ab0681258999017c7d/src%2Flibrustc_infer%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Fmod.rs?ref=db4826dd6ca48663a0b4c5ab0681258999017c7d", "patch": "@@ -25,8 +25,6 @@ pub use self::project::{\n     Normalized, NormalizedTy, ProjectionCache, ProjectionCacheEntry, ProjectionCacheKey,\n     ProjectionCacheStorage, Reveal,\n };\n-crate use self::util::elaborate_predicates;\n-\n pub use rustc_middle::traits::*;\n \n /// An `Obligation` represents some trait reference (e.g., `int: Eq`) for"}, {"sha": "ca51d5b949c06a072beeb67fa5b7bcaaddb7809f", "filename": "src/librustc_middle/query/mod.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/db4826dd6ca48663a0b4c5ab0681258999017c7d/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db4826dd6ca48663a0b4c5ab0681258999017c7d/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fquery%2Fmod.rs?ref=db4826dd6ca48663a0b4c5ab0681258999017c7d", "patch": "@@ -136,6 +136,16 @@ rustc_queries! {\n         /// Returns the list of predicates that can be used for\n         /// `SelectionCandidate::ProjectionCandidate` and\n         /// `ProjectionTyCandidate::TraitDef`.\n+        /// Specifically this is the bounds (equivalent to) those\n+        /// written on the trait's type definition, or those\n+        /// after the `impl` keyword\n+        ///\n+        /// type X: Bound + 'lt\n+        ///         ^^^^^^^^^^^\n+        /// impl Debug + Display\n+        ///      ^^^^^^^^^^^^^^^\n+        ///\n+        /// `key` is the `DefId` of the associated type or opaque type.\n         query projection_predicates(key: DefId) -> &'tcx ty::List<ty::Predicate<'tcx>> {\n             desc { |tcx| \"finding projection predicates for `{}`\", tcx.def_path_str(key) }\n         }"}, {"sha": "595992d01dd2d00f43096896ae8de9e538b845e5", "filename": "src/librustc_ty/ty.rs", "status": "modified", "additions": 42, "deletions": 15, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/db4826dd6ca48663a0b4c5ab0681258999017c7d/src%2Flibrustc_ty%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db4826dd6ca48663a0b4c5ab0681258999017c7d/src%2Flibrustc_ty%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ty%2Fty.rs?ref=db4826dd6ca48663a0b4c5ab0681258999017c7d", "patch": "@@ -371,34 +371,45 @@ fn asyncness(tcx: TyCtxt<'_>, def_id: DefId) -> hir::IsAsync {\n /// (`type X: Trait`) to be used as candidates. We also allow the same bounds\n /// when desugared as bounds on the trait `where Self::X: Trait`.\n ///\n-/// Note that this filtering is done with the trait's identity substs to\n+/// Note that this filtering is done with the items identity substs to\n /// simplify checking that these bounds are met in impls. This means that\n /// a bound such as `for<'b> <Self as X<'b>>::U: Clone` can't be used, as in\n /// `hr-associated-type-bound-1.rs`.\n fn associated_type_projection_predicates(\n     tcx: TyCtxt<'_>,\n-    def_id: DefId,\n+    assoc_item_def_id: DefId,\n ) -> &'_ ty::List<ty::Predicate<'_>> {\n-    let trait_id = tcx.associated_item(def_id).container.id();\n-    let trait_substs = InternalSubsts::identity_for_item(tcx, trait_id);\n-\n-    let generic_trait_bounds = tcx.predicates_of(trait_id);\n-    let trait_bounds = generic_trait_bounds.instantiate_identity(tcx);\n-    let trait_predicates = util::elaborate_predicates(tcx, trait_bounds.predicates.into_iter());\n+    let generic_trait_bounds = tcx.predicates_of(assoc_item_def_id);\n+    // We include predicates from the trait as well to handle\n+    // `where Self::X: Trait`.\n+    let item_bounds = generic_trait_bounds.instantiate_identity(tcx);\n+    let item_predicates = util::elaborate_predicates(tcx, item_bounds.predicates.into_iter());\n+\n+    let assoc_item_ty = ty::ProjectionTy {\n+        item_def_id: assoc_item_def_id,\n+        substs: InternalSubsts::identity_for_item(tcx, assoc_item_def_id),\n+    };\n \n-    let predicates = trait_predicates.filter_map(|obligation| {\n+    let predicates = item_predicates.filter_map(|obligation| {\n         let pred = obligation.predicate;\n         match pred.kind() {\n             ty::PredicateKind::Trait(tr, _) => {\n                 if let ty::Projection(p) = tr.skip_binder().self_ty().kind {\n-                    if p.item_def_id == def_id && p.substs.starts_with(trait_substs) {\n+                    if p == assoc_item_ty {\n                         return Some(pred);\n                     }\n                 }\n             }\n             ty::PredicateKind::Projection(proj) => {\n                 if let ty::Projection(p) = proj.skip_binder().projection_ty.self_ty().kind {\n-                    if p.item_def_id == def_id && p.substs.starts_with(trait_substs) {\n+                    if p == assoc_item_ty {\n+                        return Some(pred);\n+                    }\n+                }\n+            }\n+            ty::PredicateKind::TypeOutlives(outlives) => {\n+                if let ty::Projection(p) = outlives.skip_binder().0.kind {\n+                    if p == assoc_item_ty {\n                         return Some(pred);\n                     }\n                 }\n@@ -409,7 +420,11 @@ fn associated_type_projection_predicates(\n     });\n \n     let result = tcx.mk_predicates(predicates);\n-    debug!(\"associated_type_projection_predicates({}) = {:?}\", tcx.def_path_str(def_id), result);\n+    debug!(\n+        \"associated_type_projection_predicates({}) = {:?}\",\n+        tcx.def_path_str(assoc_item_def_id),\n+        result\n+    );\n     result\n }\n \n@@ -422,9 +437,9 @@ fn opaque_type_projection_predicates(\n ) -> &'_ ty::List<ty::Predicate<'_>> {\n     let substs = InternalSubsts::identity_for_item(tcx, def_id);\n \n-    let generics_bounds = tcx.predicates_of(def_id);\n-    let bounds = generics_bounds.instantiate_identity(tcx);\n-    let predicates = util::elaborate_predicates(tcx, bounds.predicates.into_iter());\n+    let bounds = tcx.predicates_of(def_id);\n+    let predicates =\n+        util::elaborate_predicates(tcx, bounds.predicates.into_iter().map(|&(pred, _)| pred));\n \n     let filtered_predicates = predicates.filter_map(|obligation| {\n         let pred = obligation.predicate;\n@@ -445,6 +460,18 @@ fn opaque_type_projection_predicates(\n                     }\n                 }\n             }\n+            ty::PredicateKind::TypeOutlives(outlives) => {\n+                if let ty::Opaque(opaque_def_id, opaque_substs) = outlives.skip_binder().0.kind {\n+                    if opaque_def_id == def_id && opaque_substs == substs {\n+                        return Some(pred);\n+                    }\n+                } else {\n+                    // These can come from elaborating other predicates\n+                    return None;\n+                }\n+            }\n+            // These can come from elaborating other predicates\n+            ty::PredicateKind::RegionOutlives(_) => return None,\n             _ => {}\n         }\n         tcx.sess.delay_span_bug("}, {"sha": "3a292993e398526c3bdf84e2007a7292fd261a53", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 13, "deletions": 29, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/db4826dd6ca48663a0b4c5ab0681258999017c7d/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db4826dd6ca48663a0b4c5ab0681258999017c7d/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=db4826dd6ca48663a0b4c5ab0681258999017c7d", "patch": "@@ -1189,16 +1189,18 @@ fn compare_projection_bounds<'tcx>(\n     impl_ty_span: Span,\n     impl_trait_ref: ty::TraitRef<'tcx>,\n ) -> Result<(), ErrorReported> {\n-    let is_gat = !tcx.generics_of(impl_ty.def_id).params.is_empty();\n-    if impl_ty.defaultness.is_final() && !is_gat {\n+    let have_gats = tcx.features().generic_associated_types;\n+    if impl_ty.defaultness.is_final() && !have_gats {\n         // For \"final\", non-generic associate type implementations, we\n         // don't need this as described above.\n         return Ok(());\n     }\n \n     let param_env = tcx.param_env(impl_ty.def_id);\n \n-    let impl_substs = InternalSubsts::identity_for_item(tcx, impl_ty.container.id());\n+    let impl_ty_substs = InternalSubsts::identity_for_item(tcx, impl_ty.def_id);\n+    let rebased_substs =\n+        impl_ty_substs.rebase_onto(tcx, impl_ty.container.id(), impl_trait_ref.substs);\n     let impl_ty_value = tcx.type_of(impl_ty.def_id);\n \n     // Map the predicate from the trait to the corresponding one for the impl.\n@@ -1211,32 +1213,9 @@ fn compare_projection_bounds<'tcx>(\n     // function would translate and partially normalize\n     // `[<Self as X<A>>::Y<'a>, A]` to `[&'a u32, &'x u32]`.\n     let translate_predicate_substs = move |predicate_substs: SubstsRef<'tcx>| {\n-        let normalized_self = if !is_gat {\n-            // projection_predicates only includes projections where the\n-            // substs of the trait ref are exactly the trait's identity\n-            // substs, so we can simply return the value from the impl.\n-            impl_ty_value\n-        } else {\n-            let predicate_self_ty = predicate_substs.type_at(0);\n-            let impl_ty_substs = if let ty::Projection(p) = predicate_self_ty.kind {\n-                assert!(\n-                    p.item_def_id == trait_ty.def_id,\n-                    \"projection_predicates returned predicate for the wrong type: {}\",\n-                    predicate_self_ty,\n-                );\n-                p.substs.rebase_onto(tcx, impl_trait_ref.def_id, impl_substs)\n-            } else {\n-                bug!(\n-                    \"projection_predicates returned predicate for the wrong type `{}`\",\n-                    predicate_self_ty,\n-                );\n-            };\n-            impl_ty_value.subst(tcx, impl_ty_substs)\n-        };\n-\n         tcx.mk_substs(\n-            iter::once(normalized_self.into())\n-                .chain(predicate_substs[1..].iter().map(|s| s.subst(tcx, impl_trait_ref.substs))),\n+            iter::once(impl_ty_value.into())\n+                .chain(predicate_substs[1..].iter().map(|s| s.subst(tcx, rebased_substs))),\n         )\n     };\n \n@@ -1275,10 +1254,15 @@ fn compare_projection_bounds<'tcx>(\n                                 substs: projection_substs,\n                                 item_def_id: projection.projection_ty.item_def_id,\n                             },\n-                            ty: projection.ty.subst(tcx, impl_trait_ref.substs),\n+                            ty: projection.ty.subst(tcx, rebased_substs),\n                         }\n                     })\n                     .to_predicate(tcx),\n+                ty::PredicateKind::TypeOutlives(poly_outlives) => poly_outlives\n+                    .map_bound(|outlives| {\n+                        ty::OutlivesPredicate(impl_ty_value, outlives.1.subst(tcx, rebased_substs))\n+                    })\n+                    .to_predicate(tcx),\n                 _ => bug!(\"unexepected projection predicate kind: `{:?}`\", predicate),\n             };\n "}, {"sha": "054165f2b09773d8ab62c9692f837b408b18ba9a", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 47, "deletions": 82, "changes": 129, "blob_url": "https://github.com/rust-lang/rust/blob/db4826dd6ca48663a0b4c5ab0681258999017c7d/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db4826dd6ca48663a0b4c5ab0681258999017c7d/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=db4826dd6ca48663a0b4c5ab0681258999017c7d", "patch": "@@ -35,7 +35,7 @@ use rustc_middle::hir::map::Map;\n use rustc_middle::middle::codegen_fn_attrs::{CodegenFnAttrFlags, CodegenFnAttrs};\n use rustc_middle::mir::mono::Linkage;\n use rustc_middle::ty::query::Providers;\n-use rustc_middle::ty::subst::{InternalSubsts, Subst};\n+use rustc_middle::ty::subst::InternalSubsts;\n use rustc_middle::ty::util::Discr;\n use rustc_middle::ty::util::IntTypeExt;\n use rustc_middle::ty::{self, AdtKind, Const, ToPolyTraitRef, Ty, TyCtxt};\n@@ -1692,6 +1692,7 @@ fn explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericPredicat\n \n     let mut is_trait = None;\n     let mut is_default_impl_trait = None;\n+    let mut is_trait_associated_type = None;\n \n     let icx = ItemCtxt::new(tcx, def_id);\n     let constness = icx.default_constness_for_trait_bounds();\n@@ -1701,7 +1702,12 @@ fn explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericPredicat\n     let mut predicates = UniquePredicates::new();\n \n     let ast_generics = match node {\n-        Node::TraitItem(item) => &item.generics,\n+        Node::TraitItem(item) => {\n+            if let hir::TraitItemKind::Type(bounds, _) = item.kind {\n+                is_trait_associated_type = Some((bounds, item.span));\n+            }\n+            &item.generics\n+        }\n \n         Node::ImplItem(item) => &item.generics,\n \n@@ -1925,10 +1931,21 @@ fn explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericPredicat\n         }\n     }\n \n-    // Add predicates from associated type bounds.\n-    if let Some((self_trait_ref, trait_items)) = is_trait {\n+    // Add predicates from associated type bounds (`type X: Bound`)\n+    if tcx.features().generic_associated_types {\n+        // New behavior: bounds declared on associate type are predicates of that\n+        // associated type. Not the default because it needs more testing.\n+        if let Some((bounds, span)) = is_trait_associated_type {\n+            let projection_ty =\n+                tcx.mk_projection(def_id, InternalSubsts::identity_for_item(tcx, def_id));\n+\n+            predicates.extend(associated_item_bounds(tcx, def_id, bounds, projection_ty, span))\n+        }\n+    } else if let Some((self_trait_ref, trait_items)) = is_trait {\n+        // Current behavior: bounds declared on associate type are predicates\n+        // of its parent trait.\n         predicates.extend(trait_items.iter().flat_map(|trait_item_ref| {\n-            associated_item_predicates(tcx, def_id, self_trait_ref, trait_item_ref)\n+            trait_associated_item_predicates(tcx, def_id, self_trait_ref, trait_item_ref)\n         }))\n     }\n \n@@ -1958,7 +1975,7 @@ fn explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericPredicat\n     result\n }\n \n-fn associated_item_predicates(\n+fn trait_associated_item_predicates(\n     tcx: TyCtxt<'tcx>,\n     def_id: DefId,\n     self_trait_ref: ty::TraitRef<'tcx>,\n@@ -1971,92 +1988,40 @@ fn associated_item_predicates(\n         _ => return Vec::new(),\n     };\n \n-    let is_gat = !tcx.generics_of(item_def_id).params.is_empty();\n-\n-    let mut had_error = false;\n-\n-    let mut unimplemented_error = |arg_kind: &str| {\n-        if !had_error {\n-            tcx.sess\n-                .struct_span_err(\n-                    trait_item.span,\n-                    &format!(\"{}-generic associated types are not yet implemented\", arg_kind),\n-                )\n-                .note(\n-                    \"for more information, see issue #44265 \\\n-                     <https://github.com/rust-lang/rust/issues/44265> for more information\",\n-                )\n-                .emit();\n-            had_error = true;\n-        }\n-    };\n-\n-    let mk_bound_param = |param: &ty::GenericParamDef, _: &_| {\n-        match param.kind {\n-            ty::GenericParamDefKind::Lifetime => tcx\n-                .mk_region(ty::RegionKind::ReLateBound(\n-                    ty::INNERMOST,\n-                    ty::BoundRegion::BrNamed(param.def_id, param.name),\n-                ))\n-                .into(),\n-            // FIXME(generic_associated_types): Use bound types and constants\n-            // once they are handled by the trait system.\n-            ty::GenericParamDefKind::Type { .. } => {\n-                unimplemented_error(\"type\");\n-                tcx.ty_error().into()\n-            }\n-            ty::GenericParamDefKind::Const => {\n-                unimplemented_error(\"const\");\n-                tcx.const_error(tcx.type_of(param.def_id)).into()\n-            }\n-        }\n-    };\n+    if !tcx.generics_of(item_def_id).params.is_empty() {\n+        // For GATs the substs provided to the mk_projection call below are\n+        // wrong. We should emit a feature gate error if we get here so skip\n+        // this type.\n+        tcx.sess.delay_span_bug(trait_item.span, \"gats used without feature gate\");\n+        return Vec::new();\n+    }\n \n-    let bound_substs = if is_gat {\n-        // Given:\n-        //\n-        // trait X<'a, B, const C: usize> {\n-        //     type T<'d, E, const F: usize>: Default;\n-        // }\n-        //\n-        // We need to create predicates on the trait:\n-        //\n-        // for<'d, E, const F: usize>\n-        // <Self as X<'a, B, const C: usize>>::T<'d, E, const F: usize>: Sized + Default\n-        //\n-        // We substitute escaping bound parameters for the generic\n-        // arguments to the associated type which are then bound by\n-        // the `Binder` around the the predicate.\n-        //\n-        // FIXME(generic_associated_types): Currently only lifetimes are handled.\n-        self_trait_ref.substs.extend_to(tcx, item_def_id.to_def_id(), mk_bound_param)\n-    } else {\n-        self_trait_ref.substs\n-    };\n+    let assoc_ty = tcx.mk_projection(\n+        tcx.hir().local_def_id(trait_item.hir_id).to_def_id(),\n+        self_trait_ref.substs,\n+    );\n \n-    let assoc_ty =\n-        tcx.mk_projection(tcx.hir().local_def_id(trait_item.hir_id).to_def_id(), bound_substs);\n+    associated_item_bounds(tcx, def_id, bounds, assoc_ty, trait_item.span)\n+}\n \n+fn associated_item_bounds(\n+    tcx: TyCtxt<'tcx>,\n+    def_id: DefId,\n+    bounds: &'tcx [hir::GenericBound<'tcx>],\n+    projection_ty: Ty<'tcx>,\n+    span: Span,\n+) -> Vec<(ty::Predicate<'tcx>, Span)> {\n     let bounds = AstConv::compute_bounds(\n         &ItemCtxt::new(tcx, def_id),\n-        assoc_ty,\n+        projection_ty,\n         bounds,\n         SizedByDefault::Yes,\n-        trait_item.span,\n+        span,\n     );\n \n-    let predicates = bounds.predicates(tcx, assoc_ty);\n+    let predicates = bounds.predicates(tcx, projection_ty);\n \n-    if is_gat {\n-        // We use shifts to get the regions that we're substituting to\n-        // be bound by the binders in the `Predicate`s rather that\n-        // escaping.\n-        let shifted_in = ty::fold::shift_vars(tcx, &predicates, 1);\n-        let substituted = shifted_in.subst(tcx, bound_substs);\n-        ty::fold::shift_out_vars(tcx, &substituted, 1)\n-    } else {\n-        predicates\n-    }\n+    predicates\n }\n \n /// Converts a specific `GenericBound` from the AST into a set of"}, {"sha": "17548d7b9e88c5551bf7a8b49b2cd132146c7eab", "filename": "src/test/ui/feature-gates/feature-gate-generic_associated_types.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db4826dd6ca48663a0b4c5ab0681258999017c7d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generic_associated_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db4826dd6ca48663a0b4c5ab0681258999017c7d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generic_associated_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generic_associated_types.rs?ref=db4826dd6ca48663a0b4c5ab0681258999017c7d", "patch": "@@ -3,11 +3,9 @@ use std::ops::Deref;\n trait PointerFamily<U> {\n     type Pointer<T>: Deref<Target = T>;\n     //~^ ERROR generic associated types are unstable\n-    //~| ERROR type-generic associated types are not yet implemented\n     type Pointer2<T>: Deref<Target = T> where T: Clone, U: Clone;\n     //~^ ERROR generic associated types are unstable\n     //~| ERROR where clauses on associated types are unstable\n-    //~| ERROR type-generic associated types are not yet implemented\n }\n \n struct Foo;"}, {"sha": "8499b1ab70f5d02a4bcbf7bef7d713ac5083064a", "filename": "src/test/ui/feature-gates/feature-gate-generic_associated_types.stderr", "status": "modified", "additions": 7, "deletions": 23, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/db4826dd6ca48663a0b4c5ab0681258999017c7d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generic_associated_types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db4826dd6ca48663a0b4c5ab0681258999017c7d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generic_associated_types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generic_associated_types.stderr?ref=db4826dd6ca48663a0b4c5ab0681258999017c7d", "patch": "@@ -8,7 +8,7 @@ LL |     type Pointer<T>: Deref<Target = T>;\n    = help: add `#![feature(generic_associated_types)]` to the crate attributes to enable\n \n error[E0658]: generic associated types are unstable\n-  --> $DIR/feature-gate-generic_associated_types.rs:7:5\n+  --> $DIR/feature-gate-generic_associated_types.rs:6:5\n    |\n LL |     type Pointer2<T>: Deref<Target = T> where T: Clone, U: Clone;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -17,7 +17,7 @@ LL |     type Pointer2<T>: Deref<Target = T> where T: Clone, U: Clone;\n    = help: add `#![feature(generic_associated_types)]` to the crate attributes to enable\n \n error[E0658]: where clauses on associated types are unstable\n-  --> $DIR/feature-gate-generic_associated_types.rs:7:5\n+  --> $DIR/feature-gate-generic_associated_types.rs:6:5\n    |\n LL |     type Pointer2<T>: Deref<Target = T> where T: Clone, U: Clone;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -26,7 +26,7 @@ LL |     type Pointer2<T>: Deref<Target = T> where T: Clone, U: Clone;\n    = help: add `#![feature(generic_associated_types)]` to the crate attributes to enable\n \n error[E0658]: generic associated types are unstable\n-  --> $DIR/feature-gate-generic_associated_types.rs:16:5\n+  --> $DIR/feature-gate-generic_associated_types.rs:14:5\n    |\n LL |     type Pointer<Usize> = Box<Usize>;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -35,7 +35,7 @@ LL |     type Pointer<Usize> = Box<Usize>;\n    = help: add `#![feature(generic_associated_types)]` to the crate attributes to enable\n \n error[E0658]: generic associated types are unstable\n-  --> $DIR/feature-gate-generic_associated_types.rs:18:5\n+  --> $DIR/feature-gate-generic_associated_types.rs:16:5\n    |\n LL |     type Pointer2<U32> = Box<U32>;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -44,7 +44,7 @@ LL |     type Pointer2<U32> = Box<U32>;\n    = help: add `#![feature(generic_associated_types)]` to the crate attributes to enable\n \n error[E0658]: where clauses on associated types are unstable\n-  --> $DIR/feature-gate-generic_associated_types.rs:23:5\n+  --> $DIR/feature-gate-generic_associated_types.rs:21:5\n    |\n LL |     type Assoc where Self: Sized;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -53,30 +53,14 @@ LL |     type Assoc where Self: Sized;\n    = help: add `#![feature(generic_associated_types)]` to the crate attributes to enable\n \n error[E0658]: where clauses on associated types are unstable\n-  --> $DIR/feature-gate-generic_associated_types.rs:28:5\n+  --> $DIR/feature-gate-generic_associated_types.rs:26:5\n    |\n LL |     type Assoc where Self: Sized = Foo;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n    = help: add `#![feature(generic_associated_types)]` to the crate attributes to enable\n \n-error: type-generic associated types are not yet implemented\n-  --> $DIR/feature-gate-generic_associated_types.rs:4:5\n-   |\n-LL |     type Pointer<T>: Deref<Target = T>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: for more information, see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n-\n-error: type-generic associated types are not yet implemented\n-  --> $DIR/feature-gate-generic_associated_types.rs:7:5\n-   |\n-LL |     type Pointer2<T>: Deref<Target = T> where T: Clone, U: Clone;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: for more information, see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n-\n-error: aborting due to 9 previous errors\n+error: aborting due to 7 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "5fbae02573c62a31a95e8e9c16cfd633bf6e74e7", "filename": "src/test/ui/generic-associated-types/collections-project-default.rs", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/db4826dd6ca48663a0b4c5ab0681258999017c7d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcollections-project-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db4826dd6ca48663a0b4c5ab0681258999017c7d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcollections-project-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcollections-project-default.rs?ref=db4826dd6ca48663a0b4c5ab0681258999017c7d", "patch": "@@ -0,0 +1,72 @@\n+#![allow(incomplete_features)]\n+#![feature(generic_associated_types)]\n+#![feature(associated_type_defaults)]\n+\n+// A Collection trait and collection families. Based on\n+// http://smallcultfollowing.com/babysteps/blog/2016/11/03/\n+// associated-type-constructors-part-2-family-traits/\n+\n+// check that we don't normalize with trait defaults.\n+\n+trait Collection<T> {\n+    type Iter<'iter>: Iterator<Item=&'iter T> where T: 'iter;\n+    type Family: CollectionFamily;\n+    // Test associated type defaults with parameters\n+    type Sibling<U>: Collection<U> =\n+        <<Self as Collection<T>>::Family as CollectionFamily>::Member<U>;\n+\n+    fn empty() -> Self;\n+\n+    fn add(&mut self, value: T);\n+\n+    fn iterate<'iter>(&'iter self) -> Self::Iter<'iter>;\n+}\n+\n+trait CollectionFamily {\n+    type Member<T>: Collection<T, Family = Self>;\n+}\n+\n+struct VecFamily;\n+\n+impl CollectionFamily for VecFamily {\n+    type Member<T> = Vec<T>;\n+}\n+\n+impl<T> Collection<T> for Vec<T> {\n+    type Iter<'iter> where T: 'iter = std::slice::Iter<'iter, T>;\n+    type Family = VecFamily;\n+\n+    fn empty() -> Self {\n+        Vec::new()\n+    }\n+\n+    fn add(&mut self, value: T) {\n+        self.push(value)\n+    }\n+\n+    fn iterate<'iter>(&'iter self) -> Self::Iter<'iter> {\n+        self.iter()\n+    }\n+}\n+\n+fn floatify_sibling<C>(ints: &C) -> <C as Collection<i32>>::Sibling<f32>\n+where\n+    C: Collection<i32>,\n+{\n+    let mut res = <C::Family as CollectionFamily>::Member::<f32>::empty();\n+    for &v in ints.iterate() {\n+        res.add(v as f32);\n+    }\n+    res\n+    //~^ ERROR mismatched types\n+}\n+\n+fn use_floatify() {\n+    let a = vec![1i32, 2, 3];\n+    let c = floatify_sibling(&a);\n+    assert_eq!(Some(&1.0), c.iterate().next());\n+}\n+\n+fn main() {\n+    use_floatify();\n+}"}, {"sha": "ca02b2603ba64703160e84ad0e93e0fcf13d2308", "filename": "src/test/ui/generic-associated-types/collections-project-default.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/db4826dd6ca48663a0b4c5ab0681258999017c7d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcollections-project-default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db4826dd6ca48663a0b4c5ab0681258999017c7d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcollections-project-default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcollections-project-default.stderr?ref=db4826dd6ca48663a0b4c5ab0681258999017c7d", "patch": "@@ -0,0 +1,15 @@\n+error[E0308]: mismatched types\n+  --> $DIR/collections-project-default.rs:60:5\n+   |\n+LL | fn floatify_sibling<C>(ints: &C) -> <C as Collection<i32>>::Sibling<f32>\n+   |                                     ------------------------------------ expected `<C as Collection<i32>>::Sibling<f32>` because of return type\n+...\n+LL |     res\n+   |     ^^^ expected Collection::Sibling, found CollectionFamily::Member\n+   |\n+   = note: expected associated type `<C as Collection<i32>>::Sibling<f32>`\n+              found associated type `<<C as Collection<i32>>::Family as CollectionFamily>::Member<f32>`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "1b5b9c181fb612ea83926eee74f460b1d9f4a7ea", "filename": "src/test/ui/generic-associated-types/collections.rs", "status": "modified", "additions": 11, "deletions": 22, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/db4826dd6ca48663a0b4c5ab0681258999017c7d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcollections.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db4826dd6ca48663a0b4c5ab0681258999017c7d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcollections.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcollections.rs?ref=db4826dd6ca48663a0b4c5ab0681258999017c7d", "patch": "@@ -6,13 +6,14 @@\n // http://smallcultfollowing.com/babysteps/blog/2016/11/03/\n // associated-type-constructors-part-2-family-traits/\n \n+// run-pass\n+\n trait Collection<T> {\n-    type Iter<'iter>: Iterator<Item=&'iter T>;\n+    type Iter<'iter>: Iterator<Item=&'iter T> where T: 'iter;\n     type Family: CollectionFamily;\n     // Test associated type defaults with parameters\n     type Sibling<U>: Collection<U> =\n         <<Self as Collection<T>>::Family as CollectionFamily>::Member<U>;\n-    //~^^ ERROR type-generic associated types are not yet implemented\n \n     fn empty() -> Self;\n \n@@ -23,7 +24,6 @@ trait Collection<T> {\n \n trait CollectionFamily {\n     type Member<T>: Collection<T, Family = Self>;\n-    //~^ ERROR type-generic associated types are not yet implemented\n }\n \n struct VecFamily;\n@@ -33,7 +33,7 @@ impl CollectionFamily for VecFamily {\n }\n \n impl<T> Collection<T> for Vec<T> {\n-    type Iter<'iter> = std::slice::Iter<'iter, T>;\n+    type Iter<'iter> where T: 'iter = std::slice::Iter<'iter, T>;\n     type Family = VecFamily;\n \n     fn empty() -> Self {\n@@ -53,30 +53,19 @@ fn floatify<C>(ints: &C) -> <<C as Collection<i32>>::Family as CollectionFamily>\n where\n     C: Collection<i32>,\n {\n-    let mut res = C::Family::Member::<f32>::empty();\n-    for &v in ints.iterate() {\n-        res.add(v as f32);\n-    }\n-    res\n-}\n-\n-fn floatify_sibling<C>(ints: &C) -> <C as Collection<i32>>::Sibling<f32>\n-where\n-    C: Collection<i32>,\n-{\n-    let mut res = C::Family::Member::<f32>::empty();\n+    let mut res = <C::Family as CollectionFamily>::Member::<f32>::empty();\n     for &v in ints.iterate() {\n         res.add(v as f32);\n     }\n     res\n }\n \n fn use_floatify() {\n-    let a = vec![1i32, 2, 3];\n-    let b = floatify(a);\n-    println!(\"{}\", b.iterate().next());\n-    let c = floatify_sibling(a);\n-    println!(\"{}\", c.iterate().next());\n+    let a = vec![1, 2, 3];\n+    let b = floatify(&a);\n+    assert_eq!(Some(&1.0), b.iterate().next());\n }\n \n-fn main() {}\n+fn main() {\n+    use_floatify();\n+}"}, {"sha": "fb06d5e49a3916a2483989b7f646042eb0fde91a", "filename": "src/test/ui/generic-associated-types/collections.stderr", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9818bc08d314708da38d1f67b6de75c60a3a6ebf/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcollections.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9818bc08d314708da38d1f67b6de75c60a3a6ebf/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcollections.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcollections.stderr?ref=9818bc08d314708da38d1f67b6de75c60a3a6ebf", "patch": "@@ -1,19 +0,0 @@\n-error: type-generic associated types are not yet implemented\n-  --> $DIR/collections.rs:13:5\n-   |\n-LL | /     type Sibling<U>: Collection<U> =\n-LL | |         <<Self as Collection<T>>::Family as CollectionFamily>::Member<U>;\n-   | |_________________________________________________________________________^\n-   |\n-   = note: for more information, see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n-\n-error: type-generic associated types are not yet implemented\n-  --> $DIR/collections.rs:25:5\n-   |\n-LL |     type Member<T>: Collection<T, Family = Self>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: for more information, see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n-\n-error: aborting due to 2 previous errors\n-"}, {"sha": "ff9d61658f4eb2a1da4aad9ebad725cb0ce66881", "filename": "src/test/ui/generic-associated-types/construct_with_other_type.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/db4826dd6ca48663a0b4c5ab0681258999017c7d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconstruct_with_other_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db4826dd6ca48663a0b4c5ab0681258999017c7d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconstruct_with_other_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconstruct_with_other_type.rs?ref=db4826dd6ca48663a0b4c5ab0681258999017c7d", "patch": "@@ -1,7 +1,7 @@\n #![allow(incomplete_features)]\n #![feature(generic_associated_types)]\n \n-// FIXME(#30472) normalize enough to handle this.\n+// check-pass\n \n use std::ops::Deref;\n \n@@ -17,7 +17,6 @@ trait Baz {\n }\n \n impl<T> Baz for T where T: Foo {\n-//~^ ERROR type mismatch resolving\n     type Quux<'a> where T: 'a = T;\n \n     type Baa<'a> where T: 'a = &'a <T as Foo>::Bar<'a, 'static>;"}, {"sha": "b9468b3330b44e5b4a794fe2a7b2824b837dbe34", "filename": "src/test/ui/generic-associated-types/construct_with_other_type.stderr", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9818bc08d314708da38d1f67b6de75c60a3a6ebf/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconstruct_with_other_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9818bc08d314708da38d1f67b6de75c60a3a6ebf/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconstruct_with_other_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconstruct_with_other_type.stderr?ref=9818bc08d314708da38d1f67b6de75c60a3a6ebf", "patch": "@@ -1,18 +0,0 @@\n-error[E0271]: type mismatch resolving `for<'a> <<T as Baz>::Baa<'a> as std::ops::Deref>::Target == <<T as Baz>::Quux<'a> as Foo>::Bar<'a, 'static>`\n-  --> $DIR/construct_with_other_type.rs:19:9\n-   |\n-LL | impl<T> Baz for T where T: Foo {\n-   |      -  ^^^ expected type parameter `T`, found associated type\n-   |      |\n-   |      this type parameter\n-   |\n-   = note: expected associated type `<T as Foo>::Bar<'_, 'static>`\n-              found associated type `<<T as Baz>::Quux<'_> as Foo>::Bar<'_, 'static>`\n-help: consider further restricting this bound\n-   |\n-LL | impl<T> Baz for T where T: Foo + Baz<Quux = T> {\n-   |                                ^^^^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0271`."}, {"sha": "c1d68812e9356e269a24e2f06a1b16d790522d7b", "filename": "src/test/ui/generic-associated-types/gat-dont-ice-on-absent-feature-2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/db4826dd6ca48663a0b4c5ab0681258999017c7d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-dont-ice-on-absent-feature-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db4826dd6ca48663a0b4c5ab0681258999017c7d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-dont-ice-on-absent-feature-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-dont-ice-on-absent-feature-2.rs?ref=db4826dd6ca48663a0b4c5ab0681258999017c7d", "patch": "@@ -6,7 +6,6 @@ struct Foo;\n trait MyTrait {\n     type Item<T>;\n     //~^ ERROR generic associated types are unstable [E0658]\n-    //~| ERROR type-generic associated types are not yet implemented\n }\n \n impl MyTrait for Foo {"}, {"sha": "34f536dbe8f647b3a96aa8fa9506e0d4325e5561", "filename": "src/test/ui/generic-associated-types/gat-dont-ice-on-absent-feature-2.stderr", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/db4826dd6ca48663a0b4c5ab0681258999017c7d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-dont-ice-on-absent-feature-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db4826dd6ca48663a0b4c5ab0681258999017c7d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-dont-ice-on-absent-feature-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-dont-ice-on-absent-feature-2.stderr?ref=db4826dd6ca48663a0b4c5ab0681258999017c7d", "patch": "@@ -8,22 +8,14 @@ LL |     type Item<T>;\n    = help: add `#![feature(generic_associated_types)]` to the crate attributes to enable\n \n error[E0658]: generic associated types are unstable\n-  --> $DIR/gat-dont-ice-on-absent-feature-2.rs:13:5\n+  --> $DIR/gat-dont-ice-on-absent-feature-2.rs:12:5\n    |\n LL |     type Item<T> = T;\n    |     ^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n    = help: add `#![feature(generic_associated_types)]` to the crate attributes to enable\n \n-error: type-generic associated types are not yet implemented\n-  --> $DIR/gat-dont-ice-on-absent-feature-2.rs:7:5\n-   |\n-LL |     type Item<T>;\n-   |     ^^^^^^^^^^^^^\n-   |\n-   = note: for more information, see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n-\n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "1a94796535c14b1f444097f7c8cca8a624e9aada", "filename": "src/test/ui/generic-associated-types/generic-associated-types-where.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/db4826dd6ca48663a0b4c5ab0681258999017c7d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric-associated-types-where.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db4826dd6ca48663a0b4c5ab0681258999017c7d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric-associated-types-where.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric-associated-types-where.rs?ref=db4826dd6ca48663a0b4c5ab0681258999017c7d", "patch": "@@ -9,11 +9,8 @@ use std::fmt::{Display, Debug};\n trait Foo {\n     type Assoc where Self: Sized;\n     type Assoc2<T> where T: Display;\n-    //~^ ERROR type-generic associated types are not yet implemented\n     type Assoc3<T>;\n-    //~^ ERROR type-generic associated types are not yet implemented\n-    type WithDefault<'a, T: Debug + 'a> = dyn Iterator<Item=T>;\n-    //~^ ERROR type-generic associated types are not yet implemented\n+    type WithDefault<'a, T: Debug + 'a>: ?Sized = dyn Iterator<Item=T>;\n     type NoGenerics;\n }\n \n@@ -23,6 +20,7 @@ impl Foo for Bar {\n     type Assoc = usize;\n     type Assoc2<T> = Vec<T>;\n     type Assoc3<T> where T: Iterator = Vec<T>;\n+    //~^ impl has stricter requirements than trait\n     type WithDefault<'a, T: Debug + 'a> = &'a dyn Iterator<Item=T>;\n     type NoGenerics = ::std::cell::Cell<i32>;\n }"}, {"sha": "4d02f2c46a6d062af9f07e308c9f106d6274ddc1", "filename": "src/test/ui/generic-associated-types/generic-associated-types-where.stderr", "status": "modified", "additions": 8, "deletions": 22, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/db4826dd6ca48663a0b4c5ab0681258999017c7d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric-associated-types-where.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db4826dd6ca48663a0b4c5ab0681258999017c7d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric-associated-types-where.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric-associated-types-where.stderr?ref=db4826dd6ca48663a0b4c5ab0681258999017c7d", "patch": "@@ -1,26 +1,12 @@\n-error: type-generic associated types are not yet implemented\n-  --> $DIR/generic-associated-types-where.rs:11:5\n-   |\n-LL |     type Assoc2<T> where T: Display;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: for more information, see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n-\n-error: type-generic associated types are not yet implemented\n-  --> $DIR/generic-associated-types-where.rs:13:5\n+error[E0276]: impl has stricter requirements than trait\n+  --> $DIR/generic-associated-types-where.rs:22:5\n    |\n LL |     type Assoc3<T>;\n-   |     ^^^^^^^^^^^^^^^\n-   |\n-   = note: for more information, see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n-\n-error: type-generic associated types are not yet implemented\n-  --> $DIR/generic-associated-types-where.rs:15:5\n-   |\n-LL |     type WithDefault<'a, T: Debug + 'a> = dyn Iterator<Item=T>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: for more information, see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n+   |     --------------- definition of `Assoc3` from trait\n+...\n+LL |     type Assoc3<T> where T: Iterator = Vec<T>;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `T: std::iter::Iterator`\n \n-error: aborting due to 3 previous errors\n+error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0276`."}, {"sha": "de2b978460f7f19020cc78d6e99384733d0dd405", "filename": "src/test/ui/generic-associated-types/issue-47206-where-clause.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db4826dd6ca48663a0b4c5ab0681258999017c7d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-47206-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db4826dd6ca48663a0b4c5ab0681258999017c7d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-47206-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-47206-where-clause.rs?ref=db4826dd6ca48663a0b4c5ab0681258999017c7d", "patch": "@@ -5,13 +5,13 @@\n \n trait Foo {\n     type Assoc3<T>;\n-    //~^ type-generic associated types are not yet implemented\n }\n \n struct Bar;\n \n impl Foo for Bar {\n     type Assoc3<T> where T: Iterator = Vec<T>;\n+    //~^ ERROR impl has stricter requirements than trait\n }\n \n fn main() {}"}, {"sha": "bc5c40ff029f9d3c8cf71e51c875a48d73675c6d", "filename": "src/test/ui/generic-associated-types/issue-47206-where-clause.stderr", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/db4826dd6ca48663a0b4c5ab0681258999017c7d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-47206-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db4826dd6ca48663a0b4c5ab0681258999017c7d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-47206-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-47206-where-clause.stderr?ref=db4826dd6ca48663a0b4c5ab0681258999017c7d", "patch": "@@ -1,10 +1,12 @@\n-error: type-generic associated types are not yet implemented\n-  --> $DIR/issue-47206-where-clause.rs:7:5\n+error[E0276]: impl has stricter requirements than trait\n+  --> $DIR/issue-47206-where-clause.rs:13:5\n    |\n LL |     type Assoc3<T>;\n-   |     ^^^^^^^^^^^^^^^\n-   |\n-   = note: for more information, see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n+   |     --------------- definition of `Assoc3` from trait\n+...\n+LL |     type Assoc3<T> where T: Iterator = Vec<T>;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `T: std::iter::Iterator`\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0276`."}, {"sha": "404be59a36d9258b2da2fb91976e7ba41a0c8c64", "filename": "src/test/ui/generic-associated-types/issue-62326-parameter-out-of-range.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/db4826dd6ca48663a0b4c5ab0681258999017c7d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-62326-parameter-out-of-range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db4826dd6ca48663a0b4c5ab0681258999017c7d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-62326-parameter-out-of-range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-62326-parameter-out-of-range.rs?ref=db4826dd6ca48663a0b4c5ab0681258999017c7d", "patch": "@@ -1,11 +1,14 @@\n #![allow(incomplete_features)]\n #![feature(generic_associated_types)]\n \n-// FIXME(generic-associated-types) Investigate why this doesn't compile.\n+// check-pass\n \n trait Iterator {\n     type Item<'a>: 'a;\n-    //~^ ERROR the requirement `for<'a> <Self as Iterator>::Item<'a>: 'a` is not satisfied\n+}\n+\n+impl Iterator for () {\n+    type Item<'a> = &'a ();\n }\n \n fn main() {}"}, {"sha": "4b06baa09ffbfa574c57475a7a3d5dcdec8556e4", "filename": "src/test/ui/generic-associated-types/issue-62326-parameter-out-of-range.stderr", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9818bc08d314708da38d1f67b6de75c60a3a6ebf/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-62326-parameter-out-of-range.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9818bc08d314708da38d1f67b6de75c60a3a6ebf/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-62326-parameter-out-of-range.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-62326-parameter-out-of-range.stderr?ref=9818bc08d314708da38d1f67b6de75c60a3a6ebf", "patch": "@@ -1,10 +0,0 @@\n-error[E0280]: the requirement `for<'a> <Self as Iterator>::Item<'a>: 'a` is not satisfied\n-  --> $DIR/issue-62326-parameter-out-of-range.rs:7:20\n-   |\n-LL | trait Iterator {\n-   |       -------- required by a bound in this\n-LL |     type Item<'a>: 'a;\n-   |                    ^^ required by this bound in `Iterator`\n-\n-error: aborting due to previous error\n-"}, {"sha": "fa35a3e8b04d1f609078d4aa5a47944d34d7d0d2", "filename": "src/test/ui/generic-associated-types/issue-67424.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/db4826dd6ca48663a0b4c5ab0681258999017c7d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-67424.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db4826dd6ca48663a0b4c5ab0681258999017c7d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-67424.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-67424.rs?ref=db4826dd6ca48663a0b4c5ab0681258999017c7d", "patch": "@@ -7,7 +7,6 @@ trait Trait1 {\n trait Trait2 {\n     type Type1<B>: Trait1<A=B>;\n     //~^ ERROR: generic associated types are unstable\n-    //~| ERROR: type-generic associated types are not yet implemented\n }\n \n fn main() {}"}, {"sha": "bbb7d56f5928e071a8e82d8e628f7bb7e89424fc", "filename": "src/test/ui/generic-associated-types/issue-67424.stderr", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/db4826dd6ca48663a0b4c5ab0681258999017c7d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-67424.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db4826dd6ca48663a0b4c5ab0681258999017c7d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-67424.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-67424.stderr?ref=db4826dd6ca48663a0b4c5ab0681258999017c7d", "patch": "@@ -7,14 +7,6 @@ LL |     type Type1<B>: Trait1<A=B>;\n    = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n    = help: add `#![feature(generic_associated_types)]` to the crate attributes to enable\n \n-error: type-generic associated types are not yet implemented\n-  --> $DIR/issue-67424.rs:8:5\n-   |\n-LL |     type Type1<B>: Trait1<A=B>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: for more information, see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "834bc3b7878f20759228a7bb2fe2411cdf1e282a", "filename": "src/test/ui/generic-associated-types/issue-68641-check-gat-bounds.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/db4826dd6ca48663a0b4c5ab0681258999017c7d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68641-check-gat-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db4826dd6ca48663a0b4c5ab0681258999017c7d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68641-check-gat-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68641-check-gat-bounds.stderr?ref=db4826dd6ca48663a0b4c5ab0681258999017c7d", "patch": "@@ -10,8 +10,8 @@ LL | #![feature(generic_associated_types)]\n error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n   --> $DIR/issue-68641-check-gat-bounds.rs:15:5\n    |\n-LL | trait UnsafeCopy {\n-   | ---------------- required by `UnsafeCopy`\n+LL |     type Item<'a>: Copy;\n+   |     -------------------- required by `UnsafeCopy::Item`\n ...\n LL |     type Item<'a> = T;\n    |     ^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`"}, {"sha": "89cc5dfd06018fdc4502f744a271ed9b5e8e70a9", "filename": "src/test/ui/generic-associated-types/issue-68642-broken-llvm-ir.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/db4826dd6ca48663a0b4c5ab0681258999017c7d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68642-broken-llvm-ir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db4826dd6ca48663a0b4c5ab0681258999017c7d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68642-broken-llvm-ir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68642-broken-llvm-ir.stderr?ref=db4826dd6ca48663a0b4c5ab0681258999017c7d", "patch": "@@ -10,8 +10,8 @@ LL | #![feature(generic_associated_types)]\n error[E0277]: expected a `std::ops::Fn<()>` closure, found `T`\n   --> $DIR/issue-68642-broken-llvm-ir.rs:15:5\n    |\n-LL | trait Fun {\n-   | --------- required by `Fun`\n+LL |     type F<'a>: Fn() -> u32;\n+   |     ------------------------ required by `Fun::F`\n ...\n LL |     type F<'a> = Self;\n    |     ^^^^^^^^^^^^^^^^^^ expected an `Fn<()>` closure, found `T`"}, {"sha": "efd3287853f0302d0285a9f910a5a59c94d15d27", "filename": "src/test/ui/generic-associated-types/issue-68643-broken-mir.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/db4826dd6ca48663a0b4c5ab0681258999017c7d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68643-broken-mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db4826dd6ca48663a0b4c5ab0681258999017c7d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68643-broken-mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68643-broken-mir.stderr?ref=db4826dd6ca48663a0b4c5ab0681258999017c7d", "patch": "@@ -10,8 +10,8 @@ LL | #![feature(generic_associated_types)]\n error[E0277]: expected a `std::ops::Fn<()>` closure, found `T`\n   --> $DIR/issue-68643-broken-mir.rs:15:5\n    |\n-LL | trait Fun {\n-   | --------- required by `Fun`\n+LL |     type F<'a>: Fn() -> u32;\n+   |     ------------------------ required by `Fun::F`\n ...\n LL |     type F<'a> = Self;\n    |     ^^^^^^^^^^^^^^^^^^ expected an `Fn<()>` closure, found `T`"}, {"sha": "5da924a512f0099b9952652d3a462286377dd239", "filename": "src/test/ui/generic-associated-types/issue-68644-codegen-selection.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/db4826dd6ca48663a0b4c5ab0681258999017c7d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68644-codegen-selection.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db4826dd6ca48663a0b4c5ab0681258999017c7d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68644-codegen-selection.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68644-codegen-selection.stderr?ref=db4826dd6ca48663a0b4c5ab0681258999017c7d", "patch": "@@ -10,8 +10,8 @@ LL | #![feature(generic_associated_types)]\n error[E0277]: expected a `std::ops::Fn<()>` closure, found `T`\n   --> $DIR/issue-68644-codegen-selection.rs:15:5\n    |\n-LL | trait Fun {\n-   | --------- required by `Fun`\n+LL |     type F<'a>: Fn() -> u32;\n+   |     ------------------------ required by `Fun::F`\n ...\n LL |     type F<'a> = Self;\n    |     ^^^^^^^^^^^^^^^^^^ expected an `Fn<()>` closure, found `T`"}, {"sha": "12d84ab6a369b4d234167159022b7c2850c0a7e6", "filename": "src/test/ui/generic-associated-types/issue-68645-codegen-fulfillment.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/db4826dd6ca48663a0b4c5ab0681258999017c7d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68645-codegen-fulfillment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db4826dd6ca48663a0b4c5ab0681258999017c7d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68645-codegen-fulfillment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68645-codegen-fulfillment.stderr?ref=db4826dd6ca48663a0b4c5ab0681258999017c7d", "patch": "@@ -10,8 +10,8 @@ LL | #![feature(generic_associated_types)]\n error[E0277]: expected a `std::ops::Fn<()>` closure, found `T`\n   --> $DIR/issue-68645-codegen-fulfillment.rs:15:5\n    |\n-LL | trait Fun {\n-   | --------- required by `Fun`\n+LL |     type F<'a>: Fn() -> u32;\n+   |     ------------------------ required by `Fun::F`\n ...\n LL |     type F<'a> = Self;\n    |     ^^^^^^^^^^^^^^^^^^ expected an `Fn<()>` closure, found `T`"}, {"sha": "e1ceeac3196a8900388bb51396a87a498ca235e0", "filename": "src/test/ui/generic-associated-types/issue-68656-unsized-values.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/db4826dd6ca48663a0b4c5ab0681258999017c7d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68656-unsized-values.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db4826dd6ca48663a0b4c5ab0681258999017c7d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68656-unsized-values.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68656-unsized-values.stderr?ref=db4826dd6ca48663a0b4c5ab0681258999017c7d", "patch": "@@ -10,8 +10,8 @@ LL | #![feature(generic_associated_types)]\n error[E0271]: type mismatch resolving `<T as std::ops::Deref>::Target == T`\n   --> $DIR/issue-68656-unsized-values.rs:16:5\n    |\n-LL | trait UnsafeCopy<T: Copy> {\n-   | ------------------------- required by `UnsafeCopy`\n+LL |     type Item<'a>: std::ops::Deref<Target = T>;\n+   |     ------------------------------------------- required by `UnsafeCopy::Item`\n ...\n LL | impl<T: Copy + std::ops::Deref> UnsafeCopy<T> for T {\n    |      - this type parameter"}, {"sha": "600a69006c1ea6184a008166e2796f4777a7993f", "filename": "src/test/ui/generic-associated-types/iterable.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/db4826dd6ca48663a0b4c5ab0681258999017c7d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fiterable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db4826dd6ca48663a0b4c5ab0681258999017c7d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fiterable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fiterable.rs?ref=db4826dd6ca48663a0b4c5ab0681258999017c7d", "patch": "@@ -1,7 +1,7 @@\n #![allow(incomplete_features)]\n #![feature(generic_associated_types)]\n \n-// FIXME(#30472) normalize enough to handle this.\n+// run-pass\n \n trait Iterable {\n     type Item<'a> where Self: 'a;\n@@ -13,39 +13,35 @@ trait Iterable {\n // Impl for struct type\n impl<T> Iterable for Vec<T> {\n     type Item<'a> where T: 'a = <std::slice::Iter<'a, T> as Iterator>::Item;\n-    //~^ ERROR type mismatch resolving\n     type Iter<'a> where T: 'a = std::slice::Iter<'a, T>;\n \n     fn iter<'a>(&'a self) -> Self::Iter<'a> {\n-    //~^ ERROR type mismatch resolving\n-        self.iter()\n+        self[..].iter()\n     }\n }\n \n // Impl for a primitive type\n impl<T> Iterable for [T] {\n     type Item<'a> where T: 'a = <std::slice::Iter<'a, T> as Iterator>::Item;\n-    //~^ ERROR type mismatch resolving\n     type Iter<'a> where T: 'a = std::slice::Iter<'a, T>;\n \n     fn iter<'a>(&'a self) -> Self::Iter<'a> {\n-    //~^ ERROR type mismatch resolving\n         self.iter()\n     }\n }\n \n-fn make_iter<'a, I: Iterable>(it: &'a I) -> I::Iter<'a> {\n+fn make_iter<'a, I: Iterable + ?Sized>(it: &'a I) -> I::Iter<'a> {\n     it.iter()\n }\n \n-fn get_first<'a, I: Iterable>(it: &'a I) -> Option<I::Item<'a>> {\n+fn get_first<'a, I: Iterable + ?Sized>(it: &'a I) -> Option<I::Item<'a>> {\n     it.iter().next()\n }\n \n fn main() {\n     let v = vec![1, 2, 3];\n-    assert_eq!(v, make_iter(&v).copied().collect());\n-    assert_eq!(v, make_iter(&*v).copied().collect());\n-    assert_eq!(1, get_first(&v));\n-    assert_eq!(1, get_first(&*v));\n+    assert_eq!(v, make_iter(&v).copied().collect::<Vec<_>>());\n+    assert_eq!(v, make_iter(&*v).copied().collect::<Vec<_>>());\n+    assert_eq!(Some(&1), get_first(&v));\n+    assert_eq!(Some(&1), get_first(&*v));\n }"}, {"sha": "6e75462122513fae82463f1fc6c527b28bafeb90", "filename": "src/test/ui/generic-associated-types/iterable.stderr", "status": "removed", "additions": 0, "deletions": 59, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/9818bc08d314708da38d1f67b6de75c60a3a6ebf/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fiterable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9818bc08d314708da38d1f67b6de75c60a3a6ebf/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fiterable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fiterable.stderr?ref=9818bc08d314708da38d1f67b6de75c60a3a6ebf", "patch": "@@ -1,59 +0,0 @@\n-error[E0271]: type mismatch resolving `for<'a> <<std::vec::Vec<T> as Iterable>::Iter<'a> as std::iter::Iterator>::Item == <std::vec::Vec<T> as Iterable>::Item<'a>`\n-  --> $DIR/iterable.rs:15:33\n-   |\n-LL |     type Item<'a> where T: 'a = <std::slice::Iter<'a, T> as Iterator>::Item;\n-   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected reference, found associated type\n-   |\n-   = note:    expected reference `&T`\n-           found associated type `<std::vec::Vec<T> as Iterable>::Item<'_>`\n-   = help: consider constraining the associated type `<std::vec::Vec<T> as Iterable>::Item<'_>` to `&_`\n-   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n-\n-error[E0271]: type mismatch resolving `for<'a> <<[T] as Iterable>::Iter<'a> as std::iter::Iterator>::Item == <[T] as Iterable>::Item<'a>`\n-  --> $DIR/iterable.rs:27:33\n-   |\n-LL |     type Item<'a> where T: 'a = <std::slice::Iter<'a, T> as Iterator>::Item;\n-   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected reference, found associated type\n-   |\n-   = note:    expected reference `&T`\n-           found associated type `<[T] as Iterable>::Item<'_>`\n-   = help: consider constraining the associated type `<[T] as Iterable>::Item<'_>` to `&_`\n-   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n-\n-error[E0271]: type mismatch resolving `for<'a> <<std::vec::Vec<T> as Iterable>::Iter<'a> as std::iter::Iterator>::Item == <std::vec::Vec<T> as Iterable>::Item<'a>`\n-  --> $DIR/iterable.rs:19:30\n-   |\n-LL | trait Iterable {\n-   |       -------- required by a bound in this\n-LL |     type Item<'a> where Self: 'a;\n-LL |     type Iter<'a>: Iterator<Item = Self::Item<'a>> where Self: 'a;\n-   |                             --------------------- required by this bound in `Iterable`\n-...\n-LL |     fn iter<'a>(&'a self) -> Self::Iter<'a> {\n-   |                              ^^^^^^^^^^^^^^ expected associated type, found reference\n-   |\n-   = note: expected associated type `<std::vec::Vec<T> as Iterable>::Item<'_>`\n-                    found reference `&T`\n-   = help: consider constraining the associated type `<std::vec::Vec<T> as Iterable>::Item<'_>` to `&_` or calling a method that returns `<std::vec::Vec<T> as Iterable>::Item<'_>`\n-   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n-\n-error[E0271]: type mismatch resolving `for<'a> <<[T] as Iterable>::Iter<'a> as std::iter::Iterator>::Item == <[T] as Iterable>::Item<'a>`\n-  --> $DIR/iterable.rs:31:30\n-   |\n-LL | trait Iterable {\n-   |       -------- required by a bound in this\n-LL |     type Item<'a> where Self: 'a;\n-LL |     type Iter<'a>: Iterator<Item = Self::Item<'a>> where Self: 'a;\n-   |                             --------------------- required by this bound in `Iterable`\n-...\n-LL |     fn iter<'a>(&'a self) -> Self::Iter<'a> {\n-   |                              ^^^^^^^^^^^^^^ expected associated type, found reference\n-   |\n-   = note: expected associated type `<[T] as Iterable>::Item<'_>`\n-                    found reference `&T`\n-   = help: consider constraining the associated type `<[T] as Iterable>::Item<'_>` to `&_` or calling a method that returns `<[T] as Iterable>::Item<'_>`\n-   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n-\n-error: aborting due to 4 previous errors\n-\n-For more information about this error, try `rustc --explain E0271`."}, {"sha": "3ba7d043d0759a636d402cea317b26ee3c6a2b9a", "filename": "src/test/ui/generic-associated-types/missing-bounds.fixed", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/db4826dd6ca48663a0b4c5ab0681258999017c7d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing-bounds.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/db4826dd6ca48663a0b4c5ab0681258999017c7d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing-bounds.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing-bounds.fixed?ref=db4826dd6ca48663a0b4c5ab0681258999017c7d", "patch": "@@ -34,12 +34,11 @@ impl<B: std::ops::Add<Output = B>> Add for D<B> {\n \n struct E<B>(B);\n \n-impl<B: Add> Add for E<B> where B: Add<Output = B>, B: std::ops::Add<Output = B> {\n-    //~^ ERROR equality constraints are not yet supported in `where` clauses\n+impl<B: Add> Add for E<B> where B: Add<Output = B> {\n     type Output = Self;\n \n     fn add(self, rhs: Self) -> Self {\n-        Self(self.0 + rhs.0) //~ ERROR mismatched types\n+        Self(self.0 + rhs.0)\n     }\n }\n "}, {"sha": "962d2db9476bd73a0b690c940831ec83d567d308", "filename": "src/test/ui/generic-associated-types/missing-bounds.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/db4826dd6ca48663a0b4c5ab0681258999017c7d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db4826dd6ca48663a0b4c5ab0681258999017c7d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing-bounds.rs?ref=db4826dd6ca48663a0b4c5ab0681258999017c7d", "patch": "@@ -34,12 +34,11 @@ impl<B> Add for D<B> {\n \n struct E<B>(B);\n \n-impl<B: Add> Add for E<B> where <B as Add>::Output = B {\n-    //~^ ERROR equality constraints are not yet supported in `where` clauses\n+impl<B: Add> Add for E<B> where B: Add<Output = B> {\n     type Output = Self;\n \n     fn add(self, rhs: Self) -> Self {\n-        Self(self.0 + rhs.0) //~ ERROR mismatched types\n+        Self(self.0 + rhs.0)\n     }\n }\n "}, {"sha": "630ceac093ef29764728918fdc1b96b2b78362ee", "filename": "src/test/ui/generic-associated-types/missing-bounds.stderr", "status": "modified", "additions": 1, "deletions": 29, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/db4826dd6ca48663a0b4c5ab0681258999017c7d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db4826dd6ca48663a0b4c5ab0681258999017c7d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing-bounds.stderr?ref=db4826dd6ca48663a0b4c5ab0681258999017c7d", "patch": "@@ -1,15 +1,3 @@\n-error: equality constraints are not yet supported in `where` clauses\n-  --> $DIR/missing-bounds.rs:37:33\n-   |\n-LL | impl<B: Add> Add for E<B> where <B as Add>::Output = B {\n-   |                                 ^^^^^^^^^^^^^^^^^^^^^^ not supported\n-   |\n-   = note: see issue #20041 <https://github.com/rust-lang/rust/issues/20041> for more information\n-help: if `Output` is an associated type you're trying to set, use the associated type binding syntax\n-   |\n-LL | impl<B: Add> Add for E<B> where B: Add<Output = B> {\n-   |                                 ^^^^^^^^^^^^^^^^^^\n-\n error[E0308]: mismatched types\n   --> $DIR/missing-bounds.rs:11:11\n    |\n@@ -55,23 +43,7 @@ help: consider restricting type parameter `B`\n LL | impl<B: std::ops::Add<Output = B>> Add for D<B> {\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0308]: mismatched types\n-  --> $DIR/missing-bounds.rs:42:14\n-   |\n-LL | impl<B: Add> Add for E<B> where <B as Add>::Output = B {\n-   |      - this type parameter\n-...\n-LL |         Self(self.0 + rhs.0)\n-   |              ^^^^^^^^^^^^^^ expected type parameter `B`, found associated type\n-   |\n-   = note: expected type parameter `B`\n-             found associated type `<B as std::ops::Add>::Output`\n-help: consider further restricting type parameter `B`\n-   |\n-LL | impl<B: Add> Add for E<B> where <B as Add>::Output = B, B: std::ops::Add<Output = B> {\n-   |                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to 5 previous errors\n+error: aborting due to 3 previous errors\n \n Some errors have detailed explanations: E0308, E0369.\n For more information about an error, try `rustc --explain E0308`."}, {"sha": "f4d09fc1539da658835677719c8b349770930930", "filename": "src/test/ui/generic-associated-types/parameter_number_and_kind.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/db4826dd6ca48663a0b4c5ab0681258999017c7d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparameter_number_and_kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db4826dd6ca48663a0b4c5ab0681258999017c7d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparameter_number_and_kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparameter_number_and_kind.rs?ref=db4826dd6ca48663a0b4c5ab0681258999017c7d", "patch": "@@ -7,18 +7,14 @@ trait Foo {\n     type B<'a, 'b>;\n     type C;\n     type D<T>;\n-    //~^ ERROR type-generic associated types are not yet implemented\n     type E<'a, T>;\n-    //~^ ERROR type-generic associated types are not yet implemented\n     // Test parameters in default values\n     type FOk<T> = Self::E<'static, T>;\n-    //~^ ERROR type-generic associated types are not yet implemented\n     type FErr1 = Self::E<'static, 'static>;\n     //~^ ERROR wrong number of lifetime arguments: expected 1, found 2\n     //~| ERROR wrong number of type arguments: expected 1, found 0\n     type FErr2<T> = Self::E<'static, T, u32>;\n-    //~^ ERROR type-generic associated types are not yet implemented\n-    //~| ERROR wrong number of type arguments: expected 1, found 2\n+    //~^ ERROR wrong number of type arguments: expected 1, found 2\n }\n \n fn main() {}"}, {"sha": "ed090e302cefacb513de11b64e4b8f82e1af296e", "filename": "src/test/ui/generic-associated-types/parameter_number_and_kind.stderr", "status": "modified", "additions": 4, "deletions": 36, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/db4826dd6ca48663a0b4c5ab0681258999017c7d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparameter_number_and_kind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db4826dd6ca48663a0b4c5ab0681258999017c7d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparameter_number_and_kind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparameter_number_and_kind.stderr?ref=db4826dd6ca48663a0b4c5ab0681258999017c7d", "patch": "@@ -1,53 +1,21 @@\n-error: type-generic associated types are not yet implemented\n-  --> $DIR/parameter_number_and_kind.rs:9:5\n-   |\n-LL |     type D<T>;\n-   |     ^^^^^^^^^^\n-   |\n-   = note: for more information, see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n-\n-error: type-generic associated types are not yet implemented\n-  --> $DIR/parameter_number_and_kind.rs:11:5\n-   |\n-LL |     type E<'a, T>;\n-   |     ^^^^^^^^^^^^^^\n-   |\n-   = note: for more information, see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n-\n-error: type-generic associated types are not yet implemented\n-  --> $DIR/parameter_number_and_kind.rs:14:5\n-   |\n-LL |     type FOk<T> = Self::E<'static, T>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: for more information, see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n-\n-error: type-generic associated types are not yet implemented\n-  --> $DIR/parameter_number_and_kind.rs:19:5\n-   |\n-LL |     type FErr2<T> = Self::E<'static, T, u32>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: for more information, see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n-\n error[E0107]: wrong number of lifetime arguments: expected 1, found 2\n-  --> $DIR/parameter_number_and_kind.rs:16:35\n+  --> $DIR/parameter_number_and_kind.rs:13:35\n    |\n LL |     type FErr1 = Self::E<'static, 'static>;\n    |                                   ^^^^^^^ unexpected lifetime argument\n \n error[E0107]: wrong number of type arguments: expected 1, found 0\n-  --> $DIR/parameter_number_and_kind.rs:16:18\n+  --> $DIR/parameter_number_and_kind.rs:13:18\n    |\n LL |     type FErr1 = Self::E<'static, 'static>;\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^ expected 1 type argument\n \n error[E0107]: wrong number of type arguments: expected 1, found 2\n-  --> $DIR/parameter_number_and_kind.rs:19:41\n+  --> $DIR/parameter_number_and_kind.rs:16:41\n    |\n LL |     type FErr2<T> = Self::E<'static, T, u32>;\n    |                                         ^^^ unexpected type argument\n \n-error: aborting due to 7 previous errors\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0107`."}, {"sha": "b322b752a156738a349bb866f9ef1a837fdb678c", "filename": "src/test/ui/generic-associated-types/pointer_family.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/db4826dd6ca48663a0b4c5ab0681258999017c7d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fpointer_family.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db4826dd6ca48663a0b4c5ab0681258999017c7d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fpointer_family.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fpointer_family.rs?ref=db4826dd6ca48663a0b4c5ab0681258999017c7d", "patch": "@@ -1,15 +1,14 @@\n #![allow(incomplete_features)]\n #![feature(generic_associated_types)]\n \n-// FIXME(#44265): allow type-generic associated types.\n+// check-pass\n \n use std::rc::Rc;\n use std::sync::Arc;\n use std::ops::Deref;\n \n trait PointerFamily {\n     type Pointer<T>: Deref<Target = T>;\n-    //~^ ERROR type-generic associated types are not yet implemented\n     fn new<T>(value: T) -> Self::Pointer<T>;\n }\n "}, {"sha": "83fe992fcb571dcff6fa1af506545a6614c22b9d", "filename": "src/test/ui/generic-associated-types/pointer_family.stderr", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9818bc08d314708da38d1f67b6de75c60a3a6ebf/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fpointer_family.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9818bc08d314708da38d1f67b6de75c60a3a6ebf/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fpointer_family.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fpointer_family.stderr?ref=9818bc08d314708da38d1f67b6de75c60a3a6ebf", "patch": "@@ -1,10 +0,0 @@\n-error: type-generic associated types are not yet implemented\n-  --> $DIR/pointer_family.rs:11:5\n-   |\n-LL |     type Pointer<T>: Deref<Target = T>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: for more information, see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n-\n-error: aborting due to previous error\n-"}, {"sha": "44528ca1da36e40f37c198167f0b2d087b3c24d2", "filename": "src/test/ui/generic-associated-types/shadowing.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db4826dd6ca48663a0b4c5ab0681258999017c7d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fshadowing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db4826dd6ca48663a0b4c5ab0681258999017c7d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fshadowing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fshadowing.rs?ref=db4826dd6ca48663a0b4c5ab0681258999017c7d", "patch": "@@ -18,12 +18,10 @@ impl<'a> NoShadow<'a> for &'a u32 {\n trait ShadowT<T> {\n     type Bar<T>;\n     //~^ ERROR the name `T` is already used\n-    //~| ERROR type-generic associated types are not yet implemented\n }\n \n trait NoShadowT<T> {\n     type Bar<U>; // OK\n-    //~^ ERROR type-generic associated types are not yet implemented\n }\n \n impl<T> NoShadowT<T> for Option<T> {"}, {"sha": "d51c29080a0c9f662836e24671b1763ea6820bd0", "filename": "src/test/ui/generic-associated-types/shadowing.stderr", "status": "modified", "additions": 2, "deletions": 18, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/db4826dd6ca48663a0b4c5ab0681258999017c7d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fshadowing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db4826dd6ca48663a0b4c5ab0681258999017c7d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fshadowing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fshadowing.stderr?ref=db4826dd6ca48663a0b4c5ab0681258999017c7d", "patch": "@@ -7,7 +7,7 @@ LL |     type Bar<T>;\n    |              ^ already used\n \n error[E0403]: the name `T` is already used for a generic parameter in this item's generic parameters\n-  --> $DIR/shadowing.rs:30:14\n+  --> $DIR/shadowing.rs:28:14\n    |\n LL | impl<T> NoShadowT<T> for Option<T> {\n    |      - first use of `T`\n@@ -30,23 +30,7 @@ LL | impl<'a> NoShadow<'a> for &'a u32 {\n LL |     type Bar<'a> = i32;\n    |              ^^ lifetime 'a already in scope\n \n-error: type-generic associated types are not yet implemented\n-  --> $DIR/shadowing.rs:19:5\n-   |\n-LL |     type Bar<T>;\n-   |     ^^^^^^^^^^^^\n-   |\n-   = note: for more information, see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n-\n-error: type-generic associated types are not yet implemented\n-  --> $DIR/shadowing.rs:25:5\n-   |\n-LL |     type Bar<U>; // OK\n-   |     ^^^^^^^^^^^^\n-   |\n-   = note: for more information, see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n-\n-error: aborting due to 6 previous errors\n+error: aborting due to 4 previous errors\n \n Some errors have detailed explanations: E0403, E0496.\n For more information about an error, try `rustc --explain E0403`."}, {"sha": "7510c58d57489aa76158811c06c3ae1fd8bcdfd1", "filename": "src/test/ui/generic-associated-types/unsatisfied-outlives-bound.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/db4826dd6ca48663a0b4c5ab0681258999017c7d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Funsatisfied-outlives-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db4826dd6ca48663a0b4c5ab0681258999017c7d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Funsatisfied-outlives-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Funsatisfied-outlives-bound.rs?ref=db4826dd6ca48663a0b4c5ab0681258999017c7d", "patch": "@@ -0,0 +1,22 @@\n+#![allow(incomplete_features)]\n+#![feature(generic_associated_types)]\n+\n+trait ATy {\n+    type Item<'a>: 'a;\n+}\n+\n+impl<'b> ATy for &'b () {\n+    type Item<'a> = &'b ();\n+    //~^ ERROR does not fulfill the required lifetime\n+}\n+\n+trait StaticTy {\n+    type Item<'a>: 'static;\n+}\n+\n+impl StaticTy for () {\n+    type Item<'a> = &'a ();\n+    //~^ ERROR does not fulfill the required lifetime\n+}\n+\n+fn main() {}"}, {"sha": "5d612284a21873ebef696a19e25ac31a8ab9c65f", "filename": "src/test/ui/generic-associated-types/unsatisfied-outlives-bound.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/db4826dd6ca48663a0b4c5ab0681258999017c7d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Funsatisfied-outlives-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db4826dd6ca48663a0b4c5ab0681258999017c7d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Funsatisfied-outlives-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Funsatisfied-outlives-bound.stderr?ref=db4826dd6ca48663a0b4c5ab0681258999017c7d", "patch": "@@ -0,0 +1,23 @@\n+error[E0477]: the type `&'b ()` does not fulfill the required lifetime\n+  --> $DIR/unsatisfied-outlives-bound.rs:9:5\n+   |\n+LL |     type Item<'a> = &'b ();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: type must outlive the lifetime `'a` as defined on the associated item at 9:15\n+  --> $DIR/unsatisfied-outlives-bound.rs:9:15\n+   |\n+LL |     type Item<'a> = &'b ();\n+   |               ^^\n+\n+error[E0477]: the type `&'a ()` does not fulfill the required lifetime\n+  --> $DIR/unsatisfied-outlives-bound.rs:18:5\n+   |\n+LL |     type Item<'a> = &'a ();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: type must satisfy the static lifetime\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0477`."}, {"sha": "81beec80263149ad690fd3dfef4a328be12e469c", "filename": "src/test/ui/issues/issue-38091.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/db4826dd6ca48663a0b4c5ab0681258999017c7d/src%2Ftest%2Fui%2Fissues%2Fissue-38091.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db4826dd6ca48663a0b4c5ab0681258999017c7d/src%2Ftest%2Fui%2Fissues%2Fissue-38091.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-38091.stderr?ref=db4826dd6ca48663a0b4c5ab0681258999017c7d", "patch": "@@ -1,5 +1,5 @@\n warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-38091.rs:2:12\n+  --> $DIR/issue-38091.rs:1:12\n    |\n LL | #![feature(specialization)]\n    |            ^^^^^^^^^^^^^^\n@@ -8,14 +8,14 @@ LL | #![feature(specialization)]\n    = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n \n error[E0277]: the trait bound `(): Valid` is not satisfied\n-  --> $DIR/issue-38091.rs:8:5\n+  --> $DIR/issue-38091.rs:9:5\n    |\n-LL | trait Iterate<'a> {\n-   | ----------------- required by `Iterate`\n+LL |     type Ty: Valid;\n+   |     --------------- required by `Iterate::Ty`\n ...\n LL |     default type Ty = ();\n    |     ^^^^^^^^^^^^^^^^^^^^^ the trait `Valid` is not implemented for `()`\n \n-error: aborting due to previous error\n+error: aborting due to previous error; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "90ad5d4c1559b5ad8e0ea229ce5aff7f2bbe5003", "filename": "src/test/ui/specialization/deafult-associated-type-bound-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/db4826dd6ca48663a0b4c5ab0681258999017c7d/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-associated-type-bound-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db4826dd6ca48663a0b4c5ab0681258999017c7d/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-associated-type-bound-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-associated-type-bound-1.stderr?ref=db4826dd6ca48663a0b4c5ab0681258999017c7d", "patch": "@@ -10,8 +10,8 @@ LL | #![feature(specialization)]\n error[E0277]: the trait bound `str: std::clone::Clone` is not satisfied\n   --> $DIR/deafult-associated-type-bound-1.rs:18:5\n    |\n-LL | trait X {\n-   | ------- required by `X`\n+LL |     type U: Clone;\n+   |     -------------- required by `X::U`\n ...\n LL |     default type U = str;\n    |     ^^^^^^^^^^^^^^^^^^^^^ the trait `std::clone::Clone` is not implemented for `str`"}, {"sha": "ea40f846e3665a672742bf8b5261b15e6a261760", "filename": "src/test/ui/specialization/deafult-associated-type-bound-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/db4826dd6ca48663a0b4c5ab0681258999017c7d/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-associated-type-bound-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db4826dd6ca48663a0b4c5ab0681258999017c7d/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-associated-type-bound-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-associated-type-bound-2.stderr?ref=db4826dd6ca48663a0b4c5ab0681258999017c7d", "patch": "@@ -10,8 +10,8 @@ LL | #![feature(specialization)]\n error[E0277]: can't compare `&'static B` with `B`\n   --> $DIR/deafult-associated-type-bound-2.rs:16:5\n    |\n-LL | trait X<T> {\n-   | ---------- required by `X`\n+LL |     type U: PartialEq<T>;\n+   |     --------------------- required by `X::U`\n ...\n LL |     default type U = &'static B;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no implementation for `&'static B == B`"}, {"sha": "7f3c49e753fd7e4ebc0f8a7e5f23f0d532e3c32a", "filename": "src/test/ui/specialization/deafult-generic-associated-type-bound.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/db4826dd6ca48663a0b4c5ab0681258999017c7d/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-generic-associated-type-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db4826dd6ca48663a0b4c5ab0681258999017c7d/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-generic-associated-type-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-generic-associated-type-bound.stderr?ref=db4826dd6ca48663a0b4c5ab0681258999017c7d", "patch": "@@ -18,14 +18,14 @@ LL | #![feature(generic_associated_types)]\n error[E0277]: can't compare `T` with `T`\n   --> $DIR/deafult-generic-associated-type-bound.rs:19:5\n    |\n-LL | trait X {\n-   | ------- required by `X`\n+LL |     type U<'a>: PartialEq<&'a Self>;\n+   |     -------------------------------- required by `X::U`\n ...\n LL |     default type U<'a> = &'a T;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ no implementation for `T == T`\n    |\n    = help: the trait `std::cmp::PartialEq` is not implemented for `T`\n-   = note: required because of the requirements on the impl of `for<'a> std::cmp::PartialEq` for `&'a T`\n+   = note: required because of the requirements on the impl of `std::cmp::PartialEq` for `&'a T`\n help: consider further restricting this bound\n    |\n LL | impl<T: 'static + std::cmp::PartialEq> X for T {"}]}