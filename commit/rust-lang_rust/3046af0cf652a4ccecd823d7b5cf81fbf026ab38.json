{"sha": "3046af0cf652a4ccecd823d7b5cf81fbf026ab38", "node_id": "C_kwDOAAsO6NoAKDMwNDZhZjBjZjY1MmE0Y2NlY2Q4MjNkN2I1Y2Y4MWZiZjAyNmFiMzg", "commit": {"author": {"name": "Mahmoud Mazouz", "email": "mazouz.mahmoud@outlook.com", "date": "2022-11-19T17:54:19Z"}, "committer": {"name": "Mahmoud Mazouz", "email": "mazouz.mahmoud@outlook.com", "date": "2022-11-19T17:54:19Z"}, "message": "Add a UI test to ensure rustc doesn't do arithmetic overflows\n\nThis relies on the CI testing a rustc that's compiled with overflow-checks = true", "tree": {"sha": "cc4867a49a89658eb1f39b883177be8e7d90998d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc4867a49a89658eb1f39b883177be8e7d90998d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3046af0cf652a4ccecd823d7b5cf81fbf026ab38", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQTUuoS0kyRuvN+ae2xn7OcLyP9/LwUCY3kYTQAKCRBn7OcLyP9/\nL8anAQCHOxzV0xwZNKzbUo3r4s0missqsq7k1nRCPYv8gNwSSQEAsCZPCT9X9fjp\nYr7koZ+oI/IFqEZ1nmRsIsYw7nB+rwY=\n=cXv4\n-----END PGP SIGNATURE-----", "payload": "tree cc4867a49a89658eb1f39b883177be8e7d90998d\nparent 01f2a1542006631d6644ac767926e3bd3324f3c0\nauthor Mahmoud Mazouz <mazouz.mahmoud@outlook.com> 1668880459 +0100\ncommitter Mahmoud Mazouz <mazouz.mahmoud@outlook.com> 1668880459 +0100\n\nAdd a UI test to ensure rustc doesn't do arithmetic overflows\n\nThis relies on the CI testing a rustc that's compiled with overflow-checks = true\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3046af0cf652a4ccecd823d7b5cf81fbf026ab38", "html_url": "https://github.com/rust-lang/rust/commit/3046af0cf652a4ccecd823d7b5cf81fbf026ab38", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3046af0cf652a4ccecd823d7b5cf81fbf026ab38/comments", "author": {"login": "fuzzypixelz", "id": 22870404, "node_id": "MDQ6VXNlcjIyODcwNDA0", "avatar_url": "https://avatars.githubusercontent.com/u/22870404?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fuzzypixelz", "html_url": "https://github.com/fuzzypixelz", "followers_url": "https://api.github.com/users/fuzzypixelz/followers", "following_url": "https://api.github.com/users/fuzzypixelz/following{/other_user}", "gists_url": "https://api.github.com/users/fuzzypixelz/gists{/gist_id}", "starred_url": "https://api.github.com/users/fuzzypixelz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fuzzypixelz/subscriptions", "organizations_url": "https://api.github.com/users/fuzzypixelz/orgs", "repos_url": "https://api.github.com/users/fuzzypixelz/repos", "events_url": "https://api.github.com/users/fuzzypixelz/events{/privacy}", "received_events_url": "https://api.github.com/users/fuzzypixelz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fuzzypixelz", "id": 22870404, "node_id": "MDQ6VXNlcjIyODcwNDA0", "avatar_url": "https://avatars.githubusercontent.com/u/22870404?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fuzzypixelz", "html_url": "https://github.com/fuzzypixelz", "followers_url": "https://api.github.com/users/fuzzypixelz/followers", "following_url": "https://api.github.com/users/fuzzypixelz/following{/other_user}", "gists_url": "https://api.github.com/users/fuzzypixelz/gists{/gist_id}", "starred_url": "https://api.github.com/users/fuzzypixelz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fuzzypixelz/subscriptions", "organizations_url": "https://api.github.com/users/fuzzypixelz/orgs", "repos_url": "https://api.github.com/users/fuzzypixelz/repos", "events_url": "https://api.github.com/users/fuzzypixelz/events{/privacy}", "received_events_url": "https://api.github.com/users/fuzzypixelz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01f2a1542006631d6644ac767926e3bd3324f3c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/01f2a1542006631d6644ac767926e3bd3324f3c0", "html_url": "https://github.com/rust-lang/rust/commit/01f2a1542006631d6644ac767926e3bd3324f3c0"}], "stats": {"total": 45, "additions": 45, "deletions": 0}, "files": [{"sha": "b7601a548b9981cf5540f43b7866e3f6c9084722", "filename": "src/test/ui/suggestions/issue-104287.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3046af0cf652a4ccecd823d7b5cf81fbf026ab38/src%2Ftest%2Fui%2Fsuggestions%2Fissue-104287.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3046af0cf652a4ccecd823d7b5cf81fbf026ab38/src%2Ftest%2Fui%2Fsuggestions%2Fissue-104287.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-104287.rs?ref=3046af0cf652a4ccecd823d7b5cf81fbf026ab38", "patch": "@@ -0,0 +1,9 @@\n+// The purpose of this test is not to validate the output of the compiler.\n+// Instead, it ensures the suggestion is generated without performing an arithmetic overflow.\n+\n+fn main() {\n+    let x = not_found; //~ ERROR cannot find value `not_found` in this scope\n+    simd_gt::<()>(x);\n+    //~^ ERROR this associated function takes 0 generic arguments but 1 generic argument was supplied\n+    //~| ERROR cannot find function `simd_gt` in this scope\n+}"}, {"sha": "4b302dd6509192f79b5367406b2594e248ac4f2a", "filename": "src/test/ui/suggestions/issue-104287.stderr", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/3046af0cf652a4ccecd823d7b5cf81fbf026ab38/src%2Ftest%2Fui%2Fsuggestions%2Fissue-104287.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3046af0cf652a4ccecd823d7b5cf81fbf026ab38/src%2Ftest%2Fui%2Fsuggestions%2Fissue-104287.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-104287.stderr?ref=3046af0cf652a4ccecd823d7b5cf81fbf026ab38", "patch": "@@ -0,0 +1,36 @@\n+error[E0425]: cannot find value `not_found` in this scope\n+  --> $DIR/issue-104287.rs:5:13\n+   |\n+LL |     let x = not_found;\n+   |             ^^^^^^^^^ not found in this scope\n+\n+error[E0107]: this associated function takes 0 generic arguments but 1 generic argument was supplied\n+  --> $DIR/issue-104287.rs:6:5\n+   |\n+LL |     simd_gt::<()>(x);\n+   |     ^^^^^^^------ help: remove these generics\n+   |     |\n+   |     expected 0 generic arguments\n+   |\n+note: associated function defined here, with 0 generic parameters\n+  --> $SRC_DIR/core/src/../../portable-simd/crates/core_simd/src/ord.rs:LL:COL\n+   |\n+LL |     fn simd_gt(self, other: Self) -> Self::Mask;\n+   |        ^^^^^^^\n+\n+error[E0425]: cannot find function `simd_gt` in this scope\n+  --> $DIR/issue-104287.rs:6:5\n+   |\n+LL |     simd_gt::<()>(x);\n+   |     ^^^^^^^ not found in this scope\n+   |\n+help: use the `.` operator to call the method `SimdPartialOrd::simd_gt` on `[type error]`\n+   |\n+LL -     simd_gt::<()>(x);\n+LL +     x.simd_gt();\n+   |\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors have detailed explanations: E0107, E0425.\n+For more information about an error, try `rustc --explain E0107`."}]}