{"sha": "c2bb2f08372ad6e688ea0b7915d003cd4053cfec", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyYmIyZjA4MzcyYWQ2ZTY4OGVhMGI3OTE1ZDAwM2NkNDA1M2NmZWM=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-08-03T01:11:29Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-08-03T04:44:14Z"}, "message": "When checking loop bodies and do-expr bodies, don't require the expected type to exist\n\nIf the expected type is none (due to a type error), we shouldn't fail with an ICE, but\nrather, just print out another type error. Changed the do-expr type error message to\nmake sense in this context (see the test case for how it works).\n\nCloses #3044.", "tree": {"sha": "6a6889c010b1d40256683455dcf1e844cf856b59", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a6889c010b1d40256683455dcf1e844cf856b59"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c2bb2f08372ad6e688ea0b7915d003cd4053cfec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c2bb2f08372ad6e688ea0b7915d003cd4053cfec", "html_url": "https://github.com/rust-lang/rust/commit/c2bb2f08372ad6e688ea0b7915d003cd4053cfec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c2bb2f08372ad6e688ea0b7915d003cd4053cfec/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9c3a49bfccf03e53f70cfaaaa85a622c50e5d2b", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9c3a49bfccf03e53f70cfaaaa85a622c50e5d2b", "html_url": "https://github.com/rust-lang/rust/commit/c9c3a49bfccf03e53f70cfaaaa85a622c50e5d2b"}], "stats": {"total": 31, "additions": 21, "deletions": 10}, "files": [{"sha": "c6856d10dc5f72412de6b2a70099c02097dfff08", "filename": "src/rustc/middle/typeck/check.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c2bb2f08372ad6e688ea0b7915d003cd4053cfec/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2bb2f08372ad6e688ea0b7915d003cd4053cfec/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs?ref=c2bb2f08372ad6e688ea0b7915d003cd4053cfec", "patch": "@@ -1316,7 +1316,7 @@ fn check_expr_with_unifier(fcx: @fn_ctxt,\n                   _ { none }\n                 }\n               }\n-              ast::not | ast::neg { some(expected.get()) }\n+              ast::not | ast::neg { expected }\n               ast::deref { none }\n             }\n         };\n@@ -1475,10 +1475,11 @@ fn check_expr_with_unifier(fcx: @fn_ctxt,\n         capture::check_capture_clause(tcx, expr.id, cap_clause);\n       }\n       ast::expr_fn_block(decl, body, cap_clause) {\n+          let proto = unpack_expected(fcx, expected, |sty|\n+              alt sty { ty::ty_fn({proto, _}) { some(proto) } _ { none } }\n+          ).get_default(ast::proto_box);\n         // Take the prototype from the expected type, but default to block:\n-        let proto = unpack_expected(fcx, expected, |sty|\n-            alt sty { ty::ty_fn({proto, _}) { some(proto) } _ { none } }\n-        ).get_default(ast::proto_box);\n+          let proto = proto_1.get_default(ast::proto_box);\n         check_expr_fn(fcx, expr, proto, decl, body, false, expected);\n         capture::check_capture_clause(tcx, expr.id, cap_clause);\n       }\n@@ -1489,9 +1490,9 @@ fn check_expr_with_unifier(fcx: @fn_ctxt,\n         // parameter. The catch here is that we need to validate two things:\n         // 1. a closure that returns a bool is expected\n         // 2. the cloure that was given returns unit\n-        let expected_sty = unpack_expected(fcx, expected, |x| some(x)).get();\n+        let expected_sty = unpack_expected(fcx, expected, |x| some(x));\n         let (inner_ty, proto) = alt expected_sty {\n-          ty::ty_fn(fty) {\n+          some(ty::ty_fn(fty)) {\n             alt infer::mk_subty(fcx.infcx, fty.output, ty::mk_bool(tcx)) {\n               result::ok(_) {}\n               result::err(err) {\n@@ -1526,14 +1527,15 @@ fn check_expr_with_unifier(fcx: @fn_ctxt,\n         }\n       }\n       ast::expr_do_body(b) {\n-        let expected_sty = unpack_expected(fcx, expected, |x| some(x)).get();\n+        let expected_sty = unpack_expected(fcx, expected, |x| some(x));\n         let (inner_ty, proto) = alt expected_sty {\n-          ty::ty_fn(fty) {\n+          some(ty::ty_fn(fty)) {\n             (ty::mk_fn(tcx, fty), fty.proto)\n           }\n           _ {\n-            tcx.sess.span_fatal(expr.span, ~\"a `do` function's last argument \\\n-                                            should be of function type\");\n+            tcx.sess.span_fatal(expr.span, ~\"Non-function passed to a `do` \\\n+              function as its last argument, or wrong number of arguments \\\n+              passed to a `do` function\");\n           }\n         };\n         alt check b.node {"}, {"sha": "5898e7242c7243a440c61aae1f7bf379be76eee0", "filename": "src/test/compile-fail/issue-3044.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c2bb2f08372ad6e688ea0b7915d003cd4053cfec/src%2Ftest%2Fcompile-fail%2Fissue-3044.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2bb2f08372ad6e688ea0b7915d003cd4053cfec/src%2Ftest%2Fcompile-fail%2Fissue-3044.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3044.rs?ref=c2bb2f08372ad6e688ea0b7915d003cd4053cfec", "patch": "@@ -0,0 +1,9 @@\n+// error-pattern: Non-function passed to a `do` function as its last argument, or wrong number of arguments passed to a `do` function\n+fn main() {\n+    let needlesArr: ~[char] = ~['a', 'f'];\n+    do vec::foldr(needlesArr) |x, y| {\n+    }\n+// for some reason if I use the new error syntax for the two error messages this generates,\n+// the test runner gets confused -- tjc\n+}\n+"}]}