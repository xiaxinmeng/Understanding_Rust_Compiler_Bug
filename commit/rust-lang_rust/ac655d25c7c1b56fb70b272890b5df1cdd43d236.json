{"sha": "ac655d25c7c1b56fb70b272890b5df1cdd43d236", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjNjU1ZDI1YzdjMWI1NmZiNzBiMjcyODkwYjVkZjFjZGQ0M2QyMzY=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-03-27T18:45:24Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-03-27T21:56:30Z"}, "message": "rustdoc: Include associated type bounds when cleaning foreign impl traits", "tree": {"sha": "39c9b75fca4eea46b362891c02ffa748ed78543d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/39c9b75fca4eea46b362891c02ffa748ed78543d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac655d25c7c1b56fb70b272890b5df1cdd43d236", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac655d25c7c1b56fb70b272890b5df1cdd43d236", "html_url": "https://github.com/rust-lang/rust/commit/ac655d25c7c1b56fb70b272890b5df1cdd43d236", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac655d25c7c1b56fb70b272890b5df1cdd43d236/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37fa6f8b12b9bcbd8fb663a6c1a6c5b98aa052fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/37fa6f8b12b9bcbd8fb663a6c1a6c5b98aa052fe", "html_url": "https://github.com/rust-lang/rust/commit/37fa6f8b12b9bcbd8fb663a6c1a6c5b98aa052fe"}], "stats": {"total": 46, "additions": 38, "deletions": 8}, "files": [{"sha": "875ed12718fa340f58875651de0d0bcf92606b4f", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 38, "deletions": 8, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/ac655d25c7c1b56fb70b272890b5df1cdd43d236/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac655d25c7c1b56fb70b272890b5df1cdd43d236/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=ac655d25c7c1b56fb70b272890b5df1cdd43d236", "patch": "@@ -1379,17 +1379,18 @@ fn external_path(cx: &DocContext, name: &str, trait_did: Option<DefId>, has_self\n     }\n }\n \n-impl<'tcx> Clean<TyParamBound> for ty::TraitRef<'tcx> {\n+impl<'a, 'tcx> Clean<TyParamBound> for (&'a ty::TraitRef<'tcx>, Vec<TypeBinding>) {\n     fn clean(&self, cx: &DocContext) -> TyParamBound {\n-        inline::record_extern_fqn(cx, self.def_id, TypeKind::Trait);\n-        let path = external_path(cx, &cx.tcx.item_name(self.def_id),\n-                                 Some(self.def_id), true, vec![], self.substs);\n+        let (trait_ref, ref bounds) = *self;\n+        inline::record_extern_fqn(cx, trait_ref.def_id, TypeKind::Trait);\n+        let path = external_path(cx, &cx.tcx.item_name(trait_ref.def_id),\n+                                 Some(trait_ref.def_id), true, bounds.clone(), trait_ref.substs);\n \n-        debug!(\"ty::TraitRef\\n  subst: {:?}\\n\", self.substs);\n+        debug!(\"ty::TraitRef\\n  subst: {:?}\\n\", trait_ref.substs);\n \n         // collect any late bound regions\n         let mut late_bounds = vec![];\n-        for ty_s in self.input_types().skip(1) {\n+        for ty_s in trait_ref.input_types().skip(1) {\n             if let ty::TyTuple(ts) = ty_s.sty {\n                 for &ty_s in ts {\n                     if let ty::TyRef(ref reg, _) = ty_s.sty {\n@@ -1409,7 +1410,7 @@ impl<'tcx> Clean<TyParamBound> for ty::TraitRef<'tcx> {\n                 trait_: ResolvedPath {\n                     path,\n                     typarams: None,\n-                    did: self.def_id,\n+                    did: trait_ref.def_id,\n                     is_generic: false,\n                 },\n                 generic_params: late_bounds,\n@@ -1419,6 +1420,12 @@ impl<'tcx> Clean<TyParamBound> for ty::TraitRef<'tcx> {\n     }\n }\n \n+impl<'tcx> Clean<TyParamBound> for ty::TraitRef<'tcx> {\n+    fn clean(&self, cx: &DocContext) -> TyParamBound {\n+        (self, vec![]).clean(cx)\n+    }\n+}\n+\n impl<'tcx> Clean<Option<Vec<TyParamBound>>> for Substs<'tcx> {\n     fn clean(&self, cx: &DocContext) -> Option<Vec<TyParamBound>> {\n         let mut v = Vec::new();\n@@ -2757,7 +2764,30 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n                 let substs = cx.tcx.lift(&substs).unwrap();\n                 let bounds = predicates_of.instantiate(cx.tcx, substs);\n                 ImplTrait(bounds.predicates.iter().filter_map(|predicate| {\n-                    predicate.to_opt_poly_trait_ref().clean(cx)\n+                    let trait_ref = if let Some(tr) = predicate.to_opt_poly_trait_ref() {\n+                        tr\n+                    } else {\n+                        return None;\n+                    };\n+\n+                    let bounds = bounds.predicates.iter().filter_map(|pred|\n+                        if let ty::Predicate::Projection(proj) = *pred {\n+                            let proj = proj.skip_binder();\n+                            if proj.projection_ty.trait_ref(cx.tcx) == *trait_ref.skip_binder() {\n+                                Some(TypeBinding {\n+                                    name: cx.tcx.associated_item(proj.projection_ty.item_def_id)\n+                                                .name.clean(cx),\n+                                    ty: proj.ty.clean(cx),\n+                                })\n+                            } else {\n+                                None\n+                            }\n+                        } else {\n+                            None\n+                        }\n+                    ).collect();\n+\n+                    Some((trait_ref.skip_binder(), bounds).clean(cx))\n                 }).collect())\n             }\n "}]}