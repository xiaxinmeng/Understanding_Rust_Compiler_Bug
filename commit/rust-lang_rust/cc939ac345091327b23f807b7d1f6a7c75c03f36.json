{"sha": "cc939ac345091327b23f807b7d1f6a7c75c03f36", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjOTM5YWMzNDUwOTEzMjdiMjNmODA3YjdkMWY2YTdjNzVjMDNmMzY=", "commit": {"author": {"name": "Mike Hommey", "email": "mh@glandium.org", "date": "2018-03-30T07:10:47Z"}, "committer": {"name": "Mike Hommey", "email": "mh@glandium.org", "date": "2018-04-02T01:10:12Z"}, "message": "Add vec![ptr::null{,_mut}(); n] optimization, like vec![0; n]\n\nvec![0; n], via implementations of SpecFromElem, has an optimization\nthat uses with_capacity_zeroed instead of with_capacity, which will use\ncalloc instead of malloc, and avoid an extra memset.\n\nThis adds the same optimization for vec![ptr::null(); n] and\nvec![ptr::null_mut(); n], assuming their bit value is 0 (which is true\non all currently supported platforms).\n\nThis does so by adding an intermediate trait IsZero, which looks very\nmuch like nonzero::Zeroable, but that one is on the way out, and doesn't\napply to pointers anyways.\n\nAdding such a trait allows to avoid repeating the logic using\nwith_capacity_zeroed or with_capacity, or making the macro more complex\nto support generics.", "tree": {"sha": "ad2c1f70d3c5f7390371ed42271dd526bbe59044", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad2c1f70d3c5f7390371ed42271dd526bbe59044"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc939ac345091327b23f807b7d1f6a7c75c03f36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc939ac345091327b23f807b7d1f6a7c75c03f36", "html_url": "https://github.com/rust-lang/rust/commit/cc939ac345091327b23f807b7d1f6a7c75c03f36", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc939ac345091327b23f807b7d1f6a7c75c03f36/comments", "author": {"login": "glandium", "id": 1038527, "node_id": "MDQ6VXNlcjEwMzg1Mjc=", "avatar_url": "https://avatars.githubusercontent.com/u/1038527?v=4", "gravatar_id": "", "url": "https://api.github.com/users/glandium", "html_url": "https://github.com/glandium", "followers_url": "https://api.github.com/users/glandium/followers", "following_url": "https://api.github.com/users/glandium/following{/other_user}", "gists_url": "https://api.github.com/users/glandium/gists{/gist_id}", "starred_url": "https://api.github.com/users/glandium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/glandium/subscriptions", "organizations_url": "https://api.github.com/users/glandium/orgs", "repos_url": "https://api.github.com/users/glandium/repos", "events_url": "https://api.github.com/users/glandium/events{/privacy}", "received_events_url": "https://api.github.com/users/glandium/received_events", "type": "User", "site_admin": false}, "committer": {"login": "glandium", "id": 1038527, "node_id": "MDQ6VXNlcjEwMzg1Mjc=", "avatar_url": "https://avatars.githubusercontent.com/u/1038527?v=4", "gravatar_id": "", "url": "https://api.github.com/users/glandium", "html_url": "https://github.com/glandium", "followers_url": "https://api.github.com/users/glandium/followers", "following_url": "https://api.github.com/users/glandium/following{/other_user}", "gists_url": "https://api.github.com/users/glandium/gists{/gist_id}", "starred_url": "https://api.github.com/users/glandium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/glandium/subscriptions", "organizations_url": "https://api.github.com/users/glandium/orgs", "repos_url": "https://api.github.com/users/glandium/repos", "events_url": "https://api.github.com/users/glandium/events{/privacy}", "received_events_url": "https://api.github.com/users/glandium/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "06fa27d7c84a21af8449e06f3c50b243c4d5a7ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/06fa27d7c84a21af8449e06f3c50b243c4d5a7ad", "html_url": "https://github.com/rust-lang/rust/commit/06fa27d7c84a21af8449e06f3c50b243c4d5a7ad"}], "stats": {"total": 79, "additions": 53, "deletions": 26}, "files": [{"sha": "512c74d9d770469e7ef4d61dd33a9dc44a7a1851", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 53, "deletions": 26, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/cc939ac345091327b23f807b7d1f6a7c75c03f36/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc939ac345091327b23f807b7d1f6a7c75c03f36/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=cc939ac345091327b23f807b7d1f6a7c75c03f36", "patch": "@@ -1567,40 +1567,67 @@ impl SpecFromElem for u8 {\n     }\n }\n \n-macro_rules! impl_spec_from_elem {\n+impl<T: Clone + IsZero> SpecFromElem for T {\n+    #[inline]\n+    fn from_elem(elem: T, n: usize) -> Vec<T> {\n+        if elem.is_zero() {\n+            return Vec {\n+                buf: RawVec::with_capacity_zeroed(n),\n+                len: n,\n+            }\n+        }\n+        let mut v = Vec::with_capacity(n);\n+        v.extend_with(n, ExtendElement(elem));\n+        v\n+    }\n+}\n+\n+unsafe trait IsZero {\n+    /// Whether this value is zero\n+    fn is_zero(&self) -> bool;\n+}\n+\n+macro_rules! impl_is_zero {\n     ($t: ty, $is_zero: expr) => {\n-        impl SpecFromElem for $t {\n+        unsafe impl IsZero for $t {\n             #[inline]\n-            fn from_elem(elem: $t, n: usize) -> Vec<$t> {\n-                if $is_zero(elem) {\n-                    return Vec {\n-                        buf: RawVec::with_capacity_zeroed(n),\n-                        len: n,\n-                    }\n-                }\n-                let mut v = Vec::with_capacity(n);\n-                v.extend_with(n, ExtendElement(elem));\n-                v\n+            fn is_zero(&self) -> bool {\n+                $is_zero(*self)\n             }\n         }\n-    };\n+    }\n }\n \n-impl_spec_from_elem!(i8, |x| x == 0);\n-impl_spec_from_elem!(i16, |x| x == 0);\n-impl_spec_from_elem!(i32, |x| x == 0);\n-impl_spec_from_elem!(i64, |x| x == 0);\n-impl_spec_from_elem!(i128, |x| x == 0);\n-impl_spec_from_elem!(isize, |x| x == 0);\n+impl_is_zero!(i8, |x| x == 0);\n+impl_is_zero!(i16, |x| x == 0);\n+impl_is_zero!(i32, |x| x == 0);\n+impl_is_zero!(i64, |x| x == 0);\n+impl_is_zero!(i128, |x| x == 0);\n+impl_is_zero!(isize, |x| x == 0);\n \n-impl_spec_from_elem!(u16, |x| x == 0);\n-impl_spec_from_elem!(u32, |x| x == 0);\n-impl_spec_from_elem!(u64, |x| x == 0);\n-impl_spec_from_elem!(u128, |x| x == 0);\n-impl_spec_from_elem!(usize, |x| x == 0);\n+impl_is_zero!(u16, |x| x == 0);\n+impl_is_zero!(u32, |x| x == 0);\n+impl_is_zero!(u64, |x| x == 0);\n+impl_is_zero!(u128, |x| x == 0);\n+impl_is_zero!(usize, |x| x == 0);\n+\n+impl_is_zero!(f32, |x: f32| x.to_bits() == 0);\n+impl_is_zero!(f64, |x: f64| x.to_bits() == 0);\n+\n+unsafe impl<T: ?Sized> IsZero for *const T {\n+    #[inline]\n+    fn is_zero(&self) -> bool {\n+        (*self).is_null()\n+    }\n+}\n+\n+unsafe impl<T: ?Sized> IsZero for *mut T {\n+    #[inline]\n+    fn is_zero(&self) -> bool {\n+        (*self).is_null()\n+    }\n+}\n \n-impl_spec_from_elem!(f32, |x: f32| x.to_bits() == 0);\n-impl_spec_from_elem!(f64, |x: f64| x.to_bits() == 0);\n \n ////////////////////////////////////////////////////////////////////////////////\n // Common trait implementations for Vec"}]}