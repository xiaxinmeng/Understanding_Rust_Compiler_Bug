{"sha": "ab38d52df75f4fefbecb1156ff96d7c0728cced8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiMzhkNTJkZjc1ZjRmZWZiZWNiMTE1NmZmOTZkN2MwNzI4Y2NlZDg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-10-01T17:17:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-10-01T17:17:20Z"}, "message": "Auto merge of #36885 - Manishearth:rollup, r=Manishearth\n\nRollup of 6 pull requests\n\n- Successful merges: #36865, #36872, #36873, #36877, #36880, #36882\n- Failed merges:", "tree": {"sha": "8aeb0aa2dfd84b33bf7cbad2b9e60a57c7f99ebd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8aeb0aa2dfd84b33bf7cbad2b9e60a57c7f99ebd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab38d52df75f4fefbecb1156ff96d7c0728cced8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab38d52df75f4fefbecb1156ff96d7c0728cced8", "html_url": "https://github.com/rust-lang/rust/commit/ab38d52df75f4fefbecb1156ff96d7c0728cced8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab38d52df75f4fefbecb1156ff96d7c0728cced8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df9fa1a51e9e9570c30b98be2409964313f5d607", "url": "https://api.github.com/repos/rust-lang/rust/commits/df9fa1a51e9e9570c30b98be2409964313f5d607", "html_url": "https://github.com/rust-lang/rust/commit/df9fa1a51e9e9570c30b98be2409964313f5d607"}, {"sha": "8457ab61f67a463366c3de0e2de177ed5b306434", "url": "https://api.github.com/repos/rust-lang/rust/commits/8457ab61f67a463366c3de0e2de177ed5b306434", "html_url": "https://github.com/rust-lang/rust/commit/8457ab61f67a463366c3de0e2de177ed5b306434"}], "stats": {"total": 238, "additions": 150, "deletions": 88}, "files": [{"sha": "9aba6703386a2ec2c04e6c245a13d04c4fbbe6df", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ab38d52df75f4fefbecb1156ff96d7c0728cced8/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab38d52df75f4fefbecb1156ff96d7c0728cced8/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=ab38d52df75f4fefbecb1156ff96d7c0728cced8", "patch": "@@ -1566,11 +1566,11 @@ floating! { f64 }\n // Implementation of Display/Debug for various core types\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T> Debug for *const T {\n+impl<T: ?Sized> Debug for *const T {\n     fn fmt(&self, f: &mut Formatter) -> Result { Pointer::fmt(self, f) }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T> Debug for *mut T {\n+impl<T: ?Sized> Debug for *mut T {\n     fn fmt(&self, f: &mut Formatter) -> Result { Pointer::fmt(self, f) }\n }\n "}, {"sha": "4404af1970e77857423c39d13a864fb503a36a54", "filename": "src/librustc_back/target/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ab38d52df75f4fefbecb1156ff96d7c0728cced8/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab38d52df75f4fefbecb1156ff96d7c0728cced8/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmod.rs?ref=ab38d52df75f4fefbecb1156ff96d7c0728cced8", "patch": "@@ -168,8 +168,8 @@ supported_targets! {\n     (\"x86_64-unknown-netbsd\", x86_64_unknown_netbsd),\n     (\"x86_64-rumprun-netbsd\", x86_64_rumprun_netbsd),\n \n-    (\"i686_unknown_haiku\", i686_unknown_haiku),\n-    (\"x86_64_unknown_haiku\", x86_64_unknown_haiku),\n+    (\"i686-unknown-haiku\", i686_unknown_haiku),\n+    (\"x86_64-unknown-haiku\", x86_64_unknown_haiku),\n \n     (\"x86_64-apple-darwin\", x86_64_apple_darwin),\n     (\"i686-apple-darwin\", i686_apple_darwin),"}, {"sha": "4d18462848e5d84c6f1b5ea608b43fd3c6fb1f70", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab38d52df75f4fefbecb1156ff96d7c0728cced8/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab38d52df75f4fefbecb1156ff96d7c0728cced8/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=ab38d52df75f4fefbecb1156ff96d7c0728cced8", "patch": "@@ -1288,7 +1288,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         let link_meta = self.link_meta;\n         let is_rustc_macro = tcx.sess.crate_types.borrow().contains(&CrateTypeRustcMacro);\n         let root = self.lazy(&CrateRoot {\n-            rustc_version: RUSTC_VERSION.to_string(),\n+            rustc_version: rustc_version(),\n             name: link_meta.crate_name.clone(),\n             triple: tcx.sess.opts.target_triple.clone(),\n             hash: link_meta.crate_hash,"}, {"sha": "75242fc36db762bf592c4fc4ce2084049cb077cb", "filename": "src/librustc_metadata/loader.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ab38d52df75f4fefbecb1156ff96d7c0728cced8/src%2Flibrustc_metadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab38d52df75f4fefbecb1156ff96d7c0728cced8/src%2Flibrustc_metadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Floader.rs?ref=ab38d52df75f4fefbecb1156ff96d7c0728cced8", "patch": "@@ -213,7 +213,7 @@\n //! metadata::loader or metadata::creader for all the juicy details!\n \n use cstore::MetadataBlob;\n-use schema::{METADATA_HEADER, RUSTC_VERSION};\n+use schema::{METADATA_HEADER, rustc_version};\n \n use rustc::hir::svh::Svh;\n use rustc::session::Session;\n@@ -382,7 +382,7 @@ impl<'a> Context<'a> {\n         }\n         if !self.rejected_via_version.is_empty() {\n             err.help(&format!(\"please recompile that crate using this compiler ({})\",\n-                              RUSTC_VERSION));\n+                              rustc_version()));\n             let mismatches = self.rejected_via_version.iter();\n             for (i, &CrateMismatch { ref path, ref got }) in mismatches.enumerate() {\n                 err.note(&format!(\"crate `{}` path #{}: {} compiled by {:?}\",\n@@ -597,9 +597,10 @@ impl<'a> Context<'a> {\n \n     fn crate_matches(&mut self, metadata: &MetadataBlob, libpath: &Path) -> Option<Svh> {\n         let root = metadata.get_root();\n-        if root.rustc_version != RUSTC_VERSION {\n+        let rustc_version = rustc_version();\n+        if root.rustc_version != rustc_version {\n             info!(\"Rejecting via version: expected {} got {}\",\n-                  RUSTC_VERSION, root.rustc_version);\n+                  rustc_version, root.rustc_version);\n             self.rejected_via_version.push(CrateMismatch {\n                 path: libpath.to_path_buf(),\n                 got: root.rustc_version"}, {"sha": "1a46315e9cd7ac7a2da4395412568520b19c97ff", "filename": "src/librustc_metadata/schema.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ab38d52df75f4fefbecb1156ff96d7c0728cced8/src%2Flibrustc_metadata%2Fschema.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab38d52df75f4fefbecb1156ff96d7c0728cced8/src%2Flibrustc_metadata%2Fschema.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fschema.rs?ref=ab38d52df75f4fefbecb1156ff96d7c0728cced8", "patch": "@@ -26,11 +26,9 @@ use syntax_pos::{self, Span};\n \n use std::marker::PhantomData;\n \n-#[cfg(not(test))]\n-pub const RUSTC_VERSION: &'static str = concat!(\"rustc \", env!(\"CFG_VERSION\"));\n-\n-#[cfg(test)]\n-pub const RUSTC_VERSION: &'static str = \"rustc 0.0.0-unit-test\";\n+pub fn rustc_version() -> String {\n+    format!(\"rustc {}\", option_env!(\"CFG_VERSION\").unwrap_or(\"unknown version\"))\n+}\n \n /// Metadata encoding version.\n /// NB: increment this if you change the format of metadata such that"}, {"sha": "d1bfb7d786eb3192c5a58d2380bc34d0cc01a33c", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab38d52df75f4fefbecb1156ff96d7c0728cced8/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab38d52df75f4fefbecb1156ff96d7c0728cced8/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=ab38d52df75f4fefbecb1156ff96d7c0728cced8", "patch": "@@ -3534,7 +3534,7 @@ fn module_to_string(module: Module) -> String {\n         } else {\n             // danger, shouldn't be ident?\n             names.push(token::intern(\"<opaque>\"));\n-            collect_mod(names, module);\n+            collect_mod(names, module.parent.unwrap());\n         }\n     }\n     collect_mod(&mut names, module);"}, {"sha": "e81bca3c171839b2e67e671abeedb34716d829ab", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ab38d52df75f4fefbecb1156ff96d7c0728cced8/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab38d52df75f4fefbecb1156ff96d7c0728cced8/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=ab38d52df75f4fefbecb1156ff96d7c0728cced8", "patch": "@@ -312,13 +312,25 @@ impl<'a, 'gcx, 'tcx> ConfirmContext<'a, 'gcx, 'tcx> {\n \n         if num_supplied_types > 0 && num_supplied_types != num_method_types {\n             if num_method_types == 0 {\n-                span_err!(self.tcx.sess, self.span, E0035,\n-                    \"does not take type parameters\");\n+                struct_span_err!(self.tcx.sess, self.span, E0035,\n+                                 \"does not take type parameters\")\n+                    .span_label(self.span, &\"called with unneeded type parameters\")\n+                    .emit();\n             } else {\n-                span_err!(self.tcx.sess, self.span, E0036,\n+                struct_span_err!(self.tcx.sess, self.span, E0036,\n                     \"incorrect number of type parameters given for this method: \\\n                      expected {}, found {}\",\n-                    num_method_types, num_supplied_types);\n+                    num_method_types, num_supplied_types)\n+                    .span_label(self.span,\n+                                &format!(\"Passed {} type argument{}, expected {}\",\n+                                         num_supplied_types,\n+                                         if num_supplied_types != 1 {\n+                                            \"s\"\n+                                         } else {\n+                                            \"\"\n+                                         },\n+                                         num_method_types))\n+                    .emit();\n             }\n             supplied_method_types = vec![self.tcx.types.err; num_method_types];\n         }"}, {"sha": "cdd7bef2c7fb92c6325194f76f297044dee47dea", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ab38d52df75f4fefbecb1156ff96d7c0728cced8/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab38d52df75f4fefbecb1156ff96d7c0728cced8/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=ab38d52df75f4fefbecb1156ff96d7c0728cced8", "patch": "@@ -1164,10 +1164,12 @@ fn convert_enum_def<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n         } else if let Some(disr) = repr_type.disr_incr(tcx, prev_disr) {\n             Some(disr)\n         } else {\n-            span_err!(tcx.sess, v.span, E0370,\n-                      \"enum discriminant overflowed on value after {}; \\\n-                       set explicitly via {} = {} if that is desired outcome\",\n-                      prev_disr.unwrap(), v.node.name, wrapped_disr);\n+            struct_span_err!(tcx.sess, v.span, E0370,\n+                             \"enum discriminant overflowed\")\n+                .span_label(v.span, &format!(\"overflowed on value after {}\", prev_disr.unwrap()))\n+                .note(&format!(\"explicitly set `{} = {}` if that is desired outcome\",\n+                               v.node.name, wrapped_disr))\n+                .emit();\n             None\n         }.unwrap_or(wrapped_disr);\n         prev_disr = Some(disr);"}, {"sha": "c1ee4e61c5c72b45bf8d827c6f4def8a2ea0f56e", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/ab38d52df75f4fefbecb1156ff96d7c0728cced8/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab38d52df75f4fefbecb1156ff96d7c0728cced8/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=ab38d52df75f4fefbecb1156ff96d7c0728cced8", "patch": "@@ -283,34 +283,34 @@ impl Item {\n         }\n     }\n     pub fn is_mod(&self) -> bool {\n-        ItemType::from(self) == ItemType::Module\n+        self.type_() == ItemType::Module\n     }\n     pub fn is_trait(&self) -> bool {\n-        ItemType::from(self) == ItemType::Trait\n+        self.type_() == ItemType::Trait\n     }\n     pub fn is_struct(&self) -> bool {\n-        ItemType::from(self) == ItemType::Struct\n+        self.type_() == ItemType::Struct\n     }\n     pub fn is_enum(&self) -> bool {\n-        ItemType::from(self) == ItemType::Module\n+        self.type_() == ItemType::Module\n     }\n     pub fn is_fn(&self) -> bool {\n-        ItemType::from(self) == ItemType::Function\n+        self.type_() == ItemType::Function\n     }\n     pub fn is_associated_type(&self) -> bool {\n-        ItemType::from(self) == ItemType::AssociatedType\n+        self.type_() == ItemType::AssociatedType\n     }\n     pub fn is_associated_const(&self) -> bool {\n-        ItemType::from(self) == ItemType::AssociatedConst\n+        self.type_() == ItemType::AssociatedConst\n     }\n     pub fn is_method(&self) -> bool {\n-        ItemType::from(self) == ItemType::Method\n+        self.type_() == ItemType::Method\n     }\n     pub fn is_ty_method(&self) -> bool {\n-        ItemType::from(self) == ItemType::TyMethod\n+        self.type_() == ItemType::TyMethod\n     }\n     pub fn is_primitive(&self) -> bool {\n-        ItemType::from(self) == ItemType::Primitive\n+        self.type_() == ItemType::Primitive\n     }\n     pub fn is_stripped(&self) -> bool {\n         match self.inner { StrippedItem(..) => true, _ => false }\n@@ -342,6 +342,11 @@ impl Item {\n     pub fn stable_since(&self) -> Option<&str> {\n         self.stability.as_ref().map(|s| &s.since[..])\n     }\n+\n+    /// Returns a documentation-level item type from the item.\n+    pub fn type_(&self) -> ItemType {\n+        ItemType::from(self)\n+    }\n }\n \n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]"}, {"sha": "46461226381a3e04b5fb314f94fdc9a92d7d45ea", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 32, "deletions": 39, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/ab38d52df75f4fefbecb1156ff96d7c0728cced8/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab38d52df75f4fefbecb1156ff96d7c0728cced8/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=ab38d52df75f4fefbecb1156ff96d7c0728cced8", "patch": "@@ -89,9 +89,6 @@ pub struct Context {\n     /// Current hierarchy of components leading down to what's currently being\n     /// rendered\n     pub current: Vec<String>,\n-    /// String representation of how to get back to the root path of the 'doc/'\n-    /// folder in terms of a relative URL.\n-    pub root_path: String,\n     /// The current destination folder of where HTML artifacts should be placed.\n     /// This changes as the context descends into the module hierarchy.\n     pub dst: PathBuf,\n@@ -496,7 +493,6 @@ pub fn run(mut krate: clean::Crate,\n     krate = render_sources(&dst, &mut scx, krate)?;\n     let cx = Context {\n         current: Vec::new(),\n-        root_path: String::new(),\n         dst: dst,\n         render_redirect_pages: false,\n         shared: Arc::new(scx),\n@@ -591,7 +587,7 @@ fn build_index(krate: &clean::Crate, cache: &mut Cache) -> String {\n     for &(did, ref item) in orphan_impl_items {\n         if let Some(&(ref fqp, _)) = paths.get(&did) {\n             search_index.push(IndexItem {\n-                ty: item_type(item),\n+                ty: item.type_(),\n                 name: item.name.clone().unwrap(),\n                 path: fqp[..fqp.len() - 1].join(\"::\"),\n                 desc: Escape(&shorter(item.doc_value())).to_string(),\n@@ -835,11 +831,6 @@ fn mkdir(path: &Path) -> io::Result<()> {\n     }\n }\n \n-/// Returns a documentation-level item type from the item.\n-fn item_type(item: &clean::Item) -> ItemType {\n-    ItemType::from(item)\n-}\n-\n /// Takes a path to a source file and cleans the path to it. This canonicalizes\n /// things like \"..\" to components which preserve the \"top down\" hierarchy of a\n /// static HTML tree. Each component in the cleaned path will be passed as an\n@@ -1075,7 +1066,7 @@ impl DocFolder for Cache {\n                     // inserted later on when serializing the search-index.\n                     if item.def_id.index != CRATE_DEF_INDEX {\n                         self.search_index.push(IndexItem {\n-                            ty: item_type(&item),\n+                            ty: item.type_(),\n                             name: s.to_string(),\n                             path: path.join(\"::\").to_string(),\n                             desc: Escape(&shorter(item.doc_value())).to_string(),\n@@ -1122,7 +1113,7 @@ impl DocFolder for Cache {\n                     self.access_levels.is_public(item.def_id)\n                 {\n                     self.paths.insert(item.def_id,\n-                                      (self.stack.clone(), item_type(&item)));\n+                                      (self.stack.clone(), item.type_()));\n                 }\n             }\n             // link variants to their parent enum because pages aren't emitted\n@@ -1135,7 +1126,7 @@ impl DocFolder for Cache {\n \n             clean::PrimitiveItem(..) if item.visibility.is_some() => {\n                 self.paths.insert(item.def_id, (self.stack.clone(),\n-                                                item_type(&item)));\n+                                                item.type_()));\n             }\n \n             _ => {}\n@@ -1230,6 +1221,12 @@ impl<'a> Cache {\n }\n \n impl Context {\n+    /// String representation of how to get back to the root path of the 'doc/'\n+    /// folder in terms of a relative URL.\n+    fn root_path(&self) -> String {\n+        repeat(\"../\").take(self.current.len()).collect::<String>()\n+    }\n+\n     /// Recurse in the directory structure and change the \"root path\" to make\n     /// sure it always points to the top (relatively)\n     fn recurse<T, F>(&mut self, s: String, f: F) -> T where\n@@ -1240,7 +1237,6 @@ impl Context {\n         }\n         let prev = self.dst.clone();\n         self.dst.push(&s);\n-        self.root_path.push_str(\"../\");\n         self.current.push(s);\n \n         info!(\"Recursing into {}\", self.dst.display());\n@@ -1251,8 +1247,6 @@ impl Context {\n \n         // Go back to where we were at\n         self.dst = prev;\n-        let len = self.root_path.len();\n-        self.root_path.truncate(len - 3);\n         self.current.pop().unwrap();\n \n         return ret;\n@@ -1304,7 +1298,7 @@ impl Context {\n             title.push_str(it.name.as_ref().unwrap());\n         }\n         title.push_str(\" - Rust\");\n-        let tyname = item_type(it).css_class();\n+        let tyname = it.type_().css_class();\n         let desc = if it.is_crate() {\n             format!(\"API documentation for the Rust `{}` crate.\",\n                     self.shared.layout.krate)\n@@ -1315,7 +1309,7 @@ impl Context {\n         let keywords = make_item_keywords(it);\n         let page = layout::Page {\n             css_class: tyname,\n-            root_path: &self.root_path,\n+            root_path: &self.root_path(),\n             title: &title,\n             description: &desc,\n             keywords: &keywords,\n@@ -1329,8 +1323,7 @@ impl Context {\n                            &Item{ cx: self, item: it },\n                            self.shared.css_file_extension.is_some())?;\n         } else {\n-            let mut url = repeat(\"../\").take(self.current.len())\n-                                       .collect::<String>();\n+            let mut url = self.root_path();\n             if let Some(&(ref names, ty)) = cache().paths.get(&it.def_id) {\n                 for name in &names[..names.len() - 1] {\n                     url.push_str(name);\n@@ -1407,7 +1400,7 @@ impl Context {\n             // buf will be empty if the item is stripped and there is no redirect for it\n             if !buf.is_empty() {\n                 let name = item.name.as_ref().unwrap();\n-                let item_type = item_type(&item);\n+                let item_type = item.type_();\n                 let file_name = &item_path(item_type, name);\n                 let joint_dst = self.dst.join(file_name);\n                 try_err!(fs::create_dir_all(&self.dst), &self.dst);\n@@ -1444,7 +1437,7 @@ impl Context {\n         for item in &m.items {\n             if maybe_ignore_item(item) { continue }\n \n-            let short = item_type(item).css_class();\n+            let short = item.type_().css_class();\n             let myname = match item.name {\n                 None => continue,\n                 Some(ref s) => s.to_string(),\n@@ -1492,7 +1485,7 @@ impl<'a> Item<'a> {\n             }).map(|l| &l.1);\n             let root = match root {\n                 Some(&Remote(ref s)) => s.to_string(),\n-                Some(&Local) => self.cx.root_path.clone(),\n+                Some(&Local) => self.cx.root_path(),\n                 None | Some(&Unknown) => return None,\n             };\n             Some(format!(\"{root}/{krate}/macro.{name}.html?gotomacrosrc=1\",\n@@ -1507,7 +1500,7 @@ impl<'a> Item<'a> {\n             let path = PathBuf::from(&self.item.source.filename);\n             self.cx.shared.local_sources.get(&path).map(|path| {\n                 format!(\"{root}src/{krate}/{path}#{href}\",\n-                        root = self.cx.root_path,\n+                        root = self.cx.root_path(),\n                         krate = self.cx.shared.layout.krate,\n                         path = path,\n                         href = href)\n@@ -1531,7 +1524,7 @@ impl<'a> Item<'a> {\n             };\n             let mut path = match cache.extern_locations.get(&self.item.def_id.krate) {\n                 Some(&(_, Remote(ref s))) => s.to_string(),\n-                Some(&(_, Local)) => self.cx.root_path.clone(),\n+                Some(&(_, Local)) => self.cx.root_path(),\n                 Some(&(_, Unknown)) => return None,\n                 None => return None,\n             };\n@@ -1541,7 +1534,7 @@ impl<'a> Item<'a> {\n             }\n             Some(format!(\"{path}{file}?gotosrc={goto}\",\n                          path = path,\n-                         file = item_path(item_type(self.item), external_path.last().unwrap()),\n+                         file = item_path(self.item.type_(), external_path.last().unwrap()),\n                          goto = self.item.def_id.index.as_usize()))\n         }\n     }\n@@ -1586,7 +1579,7 @@ impl<'a> fmt::Display for Item<'a> {\n             }\n         }\n         write!(fmt, \"<a class='{}' href=''>{}</a>\",\n-               item_type(self.item), self.item.name.as_ref().unwrap())?;\n+               self.item.type_(), self.item.name.as_ref().unwrap())?;\n \n         write!(fmt, \"</span>\")?; // in-band\n         write!(fmt, \"<span class='out-of-band'>\")?;\n@@ -1739,8 +1732,8 @@ fn item_module(w: &mut fmt::Formatter, cx: &Context,\n     }\n \n     fn cmp(i1: &clean::Item, i2: &clean::Item, idx1: usize, idx2: usize) -> Ordering {\n-        let ty1 = item_type(i1);\n-        let ty2 = item_type(i2);\n+        let ty1 = i1.type_();\n+        let ty2 = i2.type_();\n         if ty1 != ty2 {\n             return (reorder(ty1), idx1).cmp(&(reorder(ty2), idx2))\n         }\n@@ -1764,7 +1757,7 @@ fn item_module(w: &mut fmt::Formatter, cx: &Context,\n             continue;\n         }\n \n-        let myty = Some(item_type(myitem));\n+        let myty = Some(myitem.type_());\n         if curty == Some(ItemType::ExternCrate) && myty == Some(ItemType::Import) {\n             // Put `extern crate` and `use` re-exports in the same section.\n             curty = myty;\n@@ -1851,9 +1844,9 @@ fn item_module(w: &mut fmt::Formatter, cx: &Context,\n                        name = *myitem.name.as_ref().unwrap(),\n                        stab_docs = stab_docs,\n                        docs = shorter(Some(&Markdown(doc_value).to_string())),\n-                       class = item_type(myitem),\n+                       class = myitem.type_(),\n                        stab = myitem.stability_class(),\n-                       href = item_path(item_type(myitem), myitem.name.as_ref().unwrap()),\n+                       href = item_path(myitem.type_(), myitem.name.as_ref().unwrap()),\n                        title = full_path(cx, myitem))?;\n             }\n         }\n@@ -2059,7 +2052,7 @@ fn item_trait(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n     fn trait_item(w: &mut fmt::Formatter, cx: &Context, m: &clean::Item, t: &clean::Item)\n                   -> fmt::Result {\n         let name = m.name.as_ref().unwrap();\n-        let item_type = item_type(m);\n+        let item_type = m.type_();\n         let id = derive_id(format!(\"{}.{}\", item_type, name));\n         let ns_id = derive_id(format!(\"{}.{}\", name, item_type.name_space()));\n         write!(w, \"<h3 id='{id}' class='method stab {stab}'>\\\n@@ -2145,7 +2138,7 @@ fn item_trait(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n                let (ref path, _) = cache.external_paths[&it.def_id];\n                path[..path.len() - 1].join(\"/\")\n            },\n-           ty = item_type(it).css_class(),\n+           ty = it.type_().css_class(),\n            name = *it.name.as_ref().unwrap())?;\n     Ok(())\n }\n@@ -2154,7 +2147,7 @@ fn naive_assoc_href(it: &clean::Item, link: AssocItemLink) -> String {\n     use html::item_type::ItemType::*;\n \n     let name = it.name.as_ref().unwrap();\n-    let ty = match item_type(it) {\n+    let ty = match it.type_() {\n         Typedef | AssociatedType => AssociatedType,\n         s@_ => s,\n     };\n@@ -2232,7 +2225,7 @@ fn render_assoc_item(w: &mut fmt::Formatter,\n               link: AssocItemLink)\n               -> fmt::Result {\n         let name = meth.name.as_ref().unwrap();\n-        let anchor = format!(\"#{}.{}\", item_type(meth), name);\n+        let anchor = format!(\"#{}.{}\", meth.type_(), name);\n         let href = match link {\n             AssocItemLink::Anchor(Some(ref id)) => format!(\"#{}\", id),\n             AssocItemLink::Anchor(None) => anchor,\n@@ -2740,7 +2733,7 @@ fn render_impl(w: &mut fmt::Formatter, cx: &Context, i: &Impl, link: AssocItemLi\n                      link: AssocItemLink, render_mode: RenderMode,\n                      is_default_item: bool, outer_version: Option<&str>,\n                      trait_: Option<&clean::Trait>) -> fmt::Result {\n-        let item_type = item_type(item);\n+        let item_type = item.type_();\n         let name = item.name.as_ref().unwrap();\n \n         let render_method_item: bool = match render_mode {\n@@ -2918,7 +2911,7 @@ impl<'a> fmt::Display for Sidebar<'a> {\n                 write!(fmt, \"::<wbr>\")?;\n             }\n             write!(fmt, \"<a href='{}index.html'>{}</a>\",\n-                   &cx.root_path[..(cx.current.len() - i - 1) * 3],\n+                   &cx.root_path()[..(cx.current.len() - i - 1) * 3],\n                    *name)?;\n         }\n         write!(fmt, \"</p>\")?;\n@@ -2932,7 +2925,7 @@ impl<'a> fmt::Display for Sidebar<'a> {\n                    relpath: '{path}'\\\n                 }};</script>\",\n                name = it.name.as_ref().map(|x| &x[..]).unwrap_or(\"\"),\n-               ty = item_type(it).css_class(),\n+               ty = it.type_().css_class(),\n                path = relpath)?;\n         if parentlen == 0 {\n             // there is no sidebar-items.js beyond the crate root path"}, {"sha": "9322d21d2a88d325d5913cd989aa93eae3fe4223", "filename": "src/test/compile-fail/E0035.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ab38d52df75f4fefbecb1156ff96d7c0728cced8/src%2Ftest%2Fcompile-fail%2FE0035.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab38d52df75f4fefbecb1156ff96d7c0728cced8/src%2Ftest%2Fcompile-fail%2FE0035.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0035.rs?ref=ab38d52df75f4fefbecb1156ff96d7c0728cced8", "patch": "@@ -17,4 +17,5 @@ impl Test {\n fn main() {\n     let x = Test;\n     x.method::<i32>(); //~ ERROR E0035\n+                       //~| NOTE called with unneeded type parameters\n }"}, {"sha": "ecb6dac66f218f138ec68d2d1029091438669ffe", "filename": "src/test/compile-fail/E0036.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ab38d52df75f4fefbecb1156ff96d7c0728cced8/src%2Ftest%2Fcompile-fail%2FE0036.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab38d52df75f4fefbecb1156ff96d7c0728cced8/src%2Ftest%2Fcompile-fail%2FE0036.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0036.rs?ref=ab38d52df75f4fefbecb1156ff96d7c0728cced8", "patch": "@@ -20,4 +20,5 @@ fn main() {\n     let x = Test;\n     let v = &[0];\n     x.method::<i32, i32>(v); //~ ERROR E0036\n+                             //~| NOTE Passed 2 type arguments, expected 1\n }"}, {"sha": "213683b5808838f2fdd50d497fa0bbd13fbd4a9d", "filename": "src/test/compile-fail/discrim-overflow-2.rs", "status": "modified", "additions": 24, "deletions": 8, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/ab38d52df75f4fefbecb1156ff96d7c0728cced8/src%2Ftest%2Fcompile-fail%2Fdiscrim-overflow-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab38d52df75f4fefbecb1156ff96d7c0728cced8/src%2Ftest%2Fcompile-fail%2Fdiscrim-overflow-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdiscrim-overflow-2.rs?ref=ab38d52df75f4fefbecb1156ff96d7c0728cced8", "patch": "@@ -24,7 +24,9 @@ fn f_i8() {\n     enum A {\n         Ok = i8::MAX - 1,\n         Ok2,\n-        OhNo, //~ ERROR enum discriminant overflowed on value after 127i8; set explicitly via OhNo = -128i8 if that is desired outcome\n+        OhNo, //~ ERROR enum discriminant overflowed [E0370]\n+              //~| NOTE overflowed on value after 127i8\n+              //~| NOTE explicitly set `OhNo = -128i8` if that is desired outcome\n     }\n }\n \n@@ -33,7 +35,9 @@ fn f_u8() {\n     enum A {\n         Ok = u8::MAX - 1,\n         Ok2,\n-        OhNo, //~ ERROR enum discriminant overflowed on value after 255u8; set explicitly via OhNo = 0u8 if that is desired outcome\n+        OhNo, //~ ERROR enum discriminant overflowed [E0370]\n+              //~| NOTE overflowed on value after 255u8\n+              //~| NOTE explicitly set `OhNo = 0u8` if that is desired outcome\n     }\n }\n \n@@ -42,7 +46,9 @@ fn f_i16() {\n     enum A {\n         Ok = i16::MAX - 1,\n         Ok2,\n-        OhNo, //~ ERROR enum discriminant overflowed\n+        OhNo, //~ ERROR enum discriminant overflowed [E0370]\n+              //~| NOTE overflowed on value after 32767i16\n+              //~| NOTE explicitly set `OhNo = -32768i16` if that is desired outcome\n     }\n }\n \n@@ -51,7 +57,9 @@ fn f_u16() {\n     enum A {\n         Ok = u16::MAX - 1,\n         Ok2,\n-        OhNo, //~ ERROR enum discriminant overflowed\n+        OhNo, //~ ERROR enum discriminant overflowed [E0370]\n+              //~| NOTE overflowed on value after 65535u16\n+              //~| NOTE explicitly set `OhNo = 0u16` if that is desired outcome\n     }\n }\n \n@@ -60,7 +68,9 @@ fn f_i32() {\n     enum A {\n         Ok = i32::MAX - 1,\n         Ok2,\n-        OhNo, //~ ERROR enum discriminant overflowed\n+        OhNo, //~ ERROR enum discriminant overflowed [E0370]\n+              //~| NOTE overflowed on value after 2147483647i32\n+              //~| NOTE explicitly set `OhNo = -2147483648i32` if that is desired outcome\n     }\n }\n \n@@ -69,7 +79,9 @@ fn f_u32() {\n     enum A {\n         Ok = u32::MAX - 1,\n         Ok2,\n-        OhNo, //~ ERROR enum discriminant overflowed\n+        OhNo, //~ ERROR enum discriminant overflowed [E0370]\n+              //~| NOTE overflowed on value after 4294967295u32\n+              //~| NOTE explicitly set `OhNo = 0u32` if that is desired outcome\n     }\n }\n \n@@ -78,7 +90,9 @@ fn f_i64() {\n     enum A {\n         Ok = i64::MAX - 1,\n         Ok2,\n-        OhNo, //~ ERROR enum discriminant overflowed\n+        OhNo, //~ ERROR enum discriminant overflowed [E0370]\n+              //~| NOTE overflowed on value after 9223372036854775807i64\n+              //~| NOTE explicitly set `OhNo = -9223372036854775808i64` if that is desired outcome\n     }\n }\n \n@@ -87,7 +101,9 @@ fn f_u64() {\n     enum A {\n         Ok = u64::MAX - 1,\n         Ok2,\n-        OhNo, //~ ERROR enum discriminant overflowed\n+        OhNo, //~ ERROR enum discriminant overflowed [E0370]\n+              //~| NOTE overflowed on value after 18446744073709551615u64\n+              //~| NOTE explicitly set `OhNo = 0u64` if that is desired outcome\n     }\n }\n "}, {"sha": "a3039b8d9573adafb1093d06efc0fb058e4f308c", "filename": "src/test/compile-fail/discrim-overflow.rs", "status": "modified", "additions": 24, "deletions": 8, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/ab38d52df75f4fefbecb1156ff96d7c0728cced8/src%2Ftest%2Fcompile-fail%2Fdiscrim-overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab38d52df75f4fefbecb1156ff96d7c0728cced8/src%2Ftest%2Fcompile-fail%2Fdiscrim-overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdiscrim-overflow.rs?ref=ab38d52df75f4fefbecb1156ff96d7c0728cced8", "patch": "@@ -22,7 +22,9 @@ fn f_i8() {\n     enum A {\n         Ok = i8::MAX - 1,\n         Ok2,\n-        OhNo, //~ ERROR enum discriminant overflowed on value after 127i8; set explicitly via OhNo = -128i8 if that is desired outcome\n+        OhNo, //~ ERROR enum discriminant overflowed [E0370]\n+              //~| NOTE overflowed on value after 127i8\n+              //~| NOTE explicitly set `OhNo = -128i8` if that is desired outcome\n     }\n \n     let x = A::Ok;\n@@ -33,7 +35,9 @@ fn f_u8() {\n     enum A {\n         Ok = u8::MAX - 1,\n         Ok2,\n-        OhNo, //~ ERROR enum discriminant overflowed on value after 255u8; set explicitly via OhNo = 0u8 if that is desired outcome\n+        OhNo, //~ ERROR enum discriminant overflowed [E0370]\n+              //~| NOTE overflowed on value after 255u8\n+              //~| NOTE explicitly set `OhNo = 0u8` if that is desired outcome\n     }\n \n     let x = A::Ok;\n@@ -44,7 +48,9 @@ fn f_i16() {\n     enum A {\n         Ok = i16::MAX - 1,\n         Ok2,\n-        OhNo, //~ ERROR enum discriminant overflowed\n+        OhNo, //~ ERROR enum discriminant overflowed [E0370]\n+              //~| NOTE overflowed on value after 32767i16\n+              //~| NOTE explicitly set `OhNo = -32768i16` if that is desired outcome\n     }\n \n     let x = A::Ok;\n@@ -55,7 +61,9 @@ fn f_u16() {\n     enum A {\n         Ok = u16::MAX - 1,\n         Ok2,\n-        OhNo, //~ ERROR enum discriminant overflowed\n+        OhNo, //~ ERROR enum discriminant overflowed [E0370]\n+              //~| overflowed on value after 65535u16\n+              //~| NOTE explicitly set `OhNo = 0u16` if that is desired outcome\n     }\n \n     let x = A::Ok;\n@@ -66,7 +74,9 @@ fn f_i32() {\n     enum A {\n         Ok = i32::MAX - 1,\n         Ok2,\n-        OhNo, //~ ERROR enum discriminant overflowed\n+        OhNo, //~ ERROR enum discriminant overflowed [E0370]\n+              //~| overflowed on value after 2147483647i32\n+              //~| NOTE explicitly set `OhNo = -2147483648i32` if that is desired outcome\n     }\n \n     let x = A::Ok;\n@@ -77,7 +87,9 @@ fn f_u32() {\n     enum A {\n         Ok = u32::MAX - 1,\n         Ok2,\n-        OhNo, //~ ERROR enum discriminant overflowed\n+        OhNo, //~ ERROR enum discriminant overflowed [E0370]\n+              //~| overflowed on value after 4294967295u32\n+              //~| NOTE explicitly set `OhNo = 0u32` if that is desired outcome\n     }\n \n     let x = A::Ok;\n@@ -88,7 +100,9 @@ fn f_i64() {\n     enum A {\n         Ok = i64::MAX - 1,\n         Ok2,\n-        OhNo, //~ ERROR enum discriminant overflowed\n+        OhNo, //~ ERROR enum discriminant overflowed [E0370]\n+              //~| overflowed on value after 9223372036854775807i64\n+              //~| NOTE explicitly set `OhNo = -9223372036854775808i64` if that is desired outcome\n     }\n \n     let x = A::Ok;\n@@ -99,7 +113,9 @@ fn f_u64() {\n     enum A {\n         Ok = u64::MAX - 1,\n         Ok2,\n-        OhNo, //~ ERROR enum discriminant overflowed\n+        OhNo, //~ ERROR enum discriminant overflowed [E0370]\n+              //~| overflowed on value after 18446744073709551615u64\n+              //~| NOTE explicitly set `OhNo = 0u64` if that is desired outcome\n     }\n \n     let x = A::Ok;"}, {"sha": "cca20e968e0c466016a00ca6a5e4fbe8ba4bb31a", "filename": "src/test/compile-fail/issue-36881.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ab38d52df75f4fefbecb1156ff96d7c0728cced8/src%2Ftest%2Fcompile-fail%2Fissue-36881.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab38d52df75f4fefbecb1156ff96d7c0728cced8/src%2Ftest%2Fcompile-fail%2Fissue-36881.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-36881.rs?ref=ab38d52df75f4fefbecb1156ff96d7c0728cced8", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    extern crate rand;\n+    use rand::Rng; //~ ERROR unresolved import\n+}"}, {"sha": "e858ba8c823b8537d0d26d71b8cc3e8c50cce10f", "filename": "src/test/run-pass/deriving-show.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ab38d52df75f4fefbecb1156ff96d7c0728cced8/src%2Ftest%2Frun-pass%2Fderiving-show.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab38d52df75f4fefbecb1156ff96d7c0728cced8/src%2Ftest%2Frun-pass%2Fderiving-show.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-show.rs?ref=ab38d52df75f4fefbecb1156ff96d7c0728cced8", "patch": "@@ -24,6 +24,9 @@ enum Enum {\n     StructVariant { x: isize, y : usize }\n }\n \n+#[derive(Debug)]\n+struct Pointers(*const Send, *mut Sync);\n+\n macro_rules! t {\n     ($x:expr, $expected:expr) => {\n         assert_eq!(format!(\"{:?}\", $x), $expected.to_string())"}]}