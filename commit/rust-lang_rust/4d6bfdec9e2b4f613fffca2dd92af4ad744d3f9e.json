{"sha": "4d6bfdec9e2b4f613fffca2dd92af4ad744d3f9e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkNmJmZGVjOWUyYjRmNjEzZmZmY2EyZGQ5MmFmNGFkNzQ0ZDNmOWU=", "commit": {"author": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2021-08-21T14:47:24Z"}, "committer": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2021-08-21T14:47:24Z"}, "message": "Improve error message when _ is used for in/inout asm operands", "tree": {"sha": "2b074acac60bab581c07f01059097d621c062707", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b074acac60bab581c07f01059097d621c062707"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d6bfdec9e2b4f613fffca2dd92af4ad744d3f9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d6bfdec9e2b4f613fffca2dd92af4ad744d3f9e", "html_url": "https://github.com/rust-lang/rust/commit/4d6bfdec9e2b4f613fffca2dd92af4ad744d3f9e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d6bfdec9e2b4f613fffca2dd92af4ad744d3f9e/comments", "author": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7f7fe462a54b1caeb804a974cd43ba9fd7bee5c", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7f7fe462a54b1caeb804a974cd43ba9fd7bee5c", "html_url": "https://github.com/rust-lang/rust/commit/e7f7fe462a54b1caeb804a974cd43ba9fd7bee5c"}], "stats": {"total": 86, "additions": 61, "deletions": 25}, "files": [{"sha": "fd5cff31587ff230a4dbfeb9116db7f7bb192855", "filename": "compiler/rustc_builtin_macros/src/asm.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4d6bfdec9e2b4f613fffca2dd92af4ad744d3f9e/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d6bfdec9e2b4f613fffca2dd92af4ad744d3f9e/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs?ref=4d6bfdec9e2b4f613fffca2dd92af4ad744d3f9e", "patch": "@@ -117,6 +117,10 @@ fn parse_args<'a>(\n         let mut explicit_reg = false;\n         let op = if !is_global_asm && p.eat_keyword(kw::In) {\n             let reg = parse_reg(&mut p, &mut explicit_reg)?;\n+            if p.eat_keyword(kw::Underscore) {\n+                let err = ecx.struct_span_err(p.token.span, \"_ cannot be used for input operands\");\n+                return Err(err);\n+            }\n             let expr = p.parse_expr()?;\n             ast::InlineAsmOperand::In { reg, expr }\n         } else if !is_global_asm && p.eat_keyword(sym::out) {\n@@ -129,6 +133,10 @@ fn parse_args<'a>(\n             ast::InlineAsmOperand::Out { reg, expr, late: true }\n         } else if !is_global_asm && p.eat_keyword(sym::inout) {\n             let reg = parse_reg(&mut p, &mut explicit_reg)?;\n+            if p.eat_keyword(kw::Underscore) {\n+                let err = ecx.struct_span_err(p.token.span, \"_ cannot be used for input operands\");\n+                return Err(err);\n+            }\n             let expr = p.parse_expr()?;\n             if p.eat(&token::FatArrow) {\n                 let out_expr =\n@@ -139,6 +147,10 @@ fn parse_args<'a>(\n             }\n         } else if !is_global_asm && p.eat_keyword(sym::inlateout) {\n             let reg = parse_reg(&mut p, &mut explicit_reg)?;\n+            if p.eat_keyword(kw::Underscore) {\n+                let err = ecx.struct_span_err(p.token.span, \"_ cannot be used for input operands\");\n+                return Err(err);\n+            }\n             let expr = p.parse_expr()?;\n             if p.eat(&token::FatArrow) {\n                 let out_expr ="}, {"sha": "fa14c52cf0ad7f9fcd43549989d2bbf52d14b4e1", "filename": "src/test/ui/asm/parse-error.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4d6bfdec9e2b4f613fffca2dd92af4ad744d3f9e/src%2Ftest%2Fui%2Fasm%2Fparse-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d6bfdec9e2b4f613fffca2dd92af4ad744d3f9e/src%2Ftest%2Fui%2Fasm%2Fparse-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fparse-error.rs?ref=4d6bfdec9e2b4f613fffca2dd92af4ad744d3f9e", "patch": "@@ -76,6 +76,12 @@ fn main() {\n         //~^ ERROR asm template must be a string literal\n         asm!(\"{1}\", format!(\"{{{}}}\", 0), in(reg) foo, out(reg) bar);\n         //~^ ERROR asm template must be a string literal\n+        asm!(\"{}\", in(reg) _);\n+        //~^ ERROR _ cannot be used for input operands\n+        asm!(\"{}\", inout(reg) _);\n+        //~^ ERROR _ cannot be used for input operands\n+        asm!(\"{}\", inlateout(reg) _);\n+        //~^ ERROR _ cannot be used for input operands\n     }\n }\n "}, {"sha": "78d342cc1daf79f6fbf455b234501276d0a83858", "filename": "src/test/ui/asm/parse-error.stderr", "status": "modified", "additions": 43, "deletions": 25, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/4d6bfdec9e2b4f613fffca2dd92af4ad744d3f9e/src%2Ftest%2Fui%2Fasm%2Fparse-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d6bfdec9e2b4f613fffca2dd92af4ad744d3f9e/src%2Ftest%2Fui%2Fasm%2Fparse-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fparse-error.stderr?ref=4d6bfdec9e2b4f613fffca2dd92af4ad744d3f9e", "patch": "@@ -214,162 +214,180 @@ LL |         asm!(\"{1}\", format!(\"{{{}}}\", 0), in(reg) foo, out(reg) bar);\n    |\n    = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n+error: _ cannot be used for input operands\n+  --> $DIR/parse-error.rs:79:28\n+   |\n+LL |         asm!(\"{}\", in(reg) _);\n+   |                            ^\n+\n+error: _ cannot be used for input operands\n+  --> $DIR/parse-error.rs:81:31\n+   |\n+LL |         asm!(\"{}\", inout(reg) _);\n+   |                               ^\n+\n+error: _ cannot be used for input operands\n+  --> $DIR/parse-error.rs:83:35\n+   |\n+LL |         asm!(\"{}\", inlateout(reg) _);\n+   |                                   ^\n+\n error: requires at least a template string argument\n-  --> $DIR/parse-error.rs:84:1\n+  --> $DIR/parse-error.rs:90:1\n    |\n LL | global_asm!();\n    | ^^^^^^^^^^^^^^\n \n error: asm template must be a string literal\n-  --> $DIR/parse-error.rs:86:13\n+  --> $DIR/parse-error.rs:92:13\n    |\n LL | global_asm!(FOO);\n    |             ^^^\n \n error: expected token: `,`\n-  --> $DIR/parse-error.rs:88:18\n+  --> $DIR/parse-error.rs:94:18\n    |\n LL | global_asm!(\"{}\" FOO);\n    |                  ^^^ expected `,`\n \n error: expected operand, options, or additional template string\n-  --> $DIR/parse-error.rs:90:19\n+  --> $DIR/parse-error.rs:96:19\n    |\n LL | global_asm!(\"{}\", FOO);\n    |                   ^^^ expected operand, options, or additional template string\n \n error: expected expression, found end of macro arguments\n-  --> $DIR/parse-error.rs:92:24\n+  --> $DIR/parse-error.rs:98:24\n    |\n LL | global_asm!(\"{}\", const);\n    |                        ^ expected expression\n \n error: expected one of `,`, `.`, `?`, or an operator, found `FOO`\n-  --> $DIR/parse-error.rs:94:30\n+  --> $DIR/parse-error.rs:100:30\n    |\n LL | global_asm!(\"{}\", const(reg) FOO);\n    |                              ^^^ expected one of `,`, `.`, `?`, or an operator\n \n error: expected one of `)`, `att_syntax`, or `raw`, found `FOO`\n-  --> $DIR/parse-error.rs:96:25\n+  --> $DIR/parse-error.rs:102:25\n    |\n LL | global_asm!(\"\", options(FOO));\n    |                         ^^^ expected one of `)`, `att_syntax`, or `raw`\n \n error: expected one of `)`, `att_syntax`, or `raw`, found `nomem`\n-  --> $DIR/parse-error.rs:98:25\n+  --> $DIR/parse-error.rs:104:25\n    |\n LL | global_asm!(\"\", options(nomem FOO));\n    |                         ^^^^^ expected one of `)`, `att_syntax`, or `raw`\n \n error: expected one of `)`, `att_syntax`, or `raw`, found `nomem`\n-  --> $DIR/parse-error.rs:100:25\n+  --> $DIR/parse-error.rs:106:25\n    |\n LL | global_asm!(\"\", options(nomem, FOO));\n    |                         ^^^^^ expected one of `)`, `att_syntax`, or `raw`\n \n error: arguments are not allowed after options\n-  --> $DIR/parse-error.rs:102:30\n+  --> $DIR/parse-error.rs:108:30\n    |\n LL | global_asm!(\"{}\", options(), const FOO);\n    |                   ---------  ^^^^^^^^^ argument\n    |                   |\n    |                   previous options\n \n error: expected string literal\n-  --> $DIR/parse-error.rs:104:29\n+  --> $DIR/parse-error.rs:110:29\n    |\n LL | global_asm!(\"\", clobber_abi(FOO));\n    |                             ^^^ not a string literal\n \n error: expected `)`, found `FOO`\n-  --> $DIR/parse-error.rs:106:33\n+  --> $DIR/parse-error.rs:112:33\n    |\n LL | global_asm!(\"\", clobber_abi(\"C\" FOO));\n    |                                 ^^^ expected `)`\n \n error: expected `)`, found `,`\n-  --> $DIR/parse-error.rs:108:32\n+  --> $DIR/parse-error.rs:114:32\n    |\n LL | global_asm!(\"\", clobber_abi(\"C\", FOO));\n    |                                ^ expected `)`\n \n error: arguments are not allowed after clobber_abi\n-  --> $DIR/parse-error.rs:110:37\n+  --> $DIR/parse-error.rs:116:37\n    |\n LL | global_asm!(\"{}\", clobber_abi(\"C\"), const FOO);\n    |                   ----------------  ^^^^^^^^^ argument\n    |                   |\n    |                   clobber_abi\n \n error: `clobber_abi` cannot be used with `global_asm!`\n-  --> $DIR/parse-error.rs:110:19\n+  --> $DIR/parse-error.rs:116:19\n    |\n LL | global_asm!(\"{}\", clobber_abi(\"C\"), const FOO);\n    |                   ^^^^^^^^^^^^^^^^\n \n error: clobber_abi is not allowed after options\n-  --> $DIR/parse-error.rs:113:28\n+  --> $DIR/parse-error.rs:119:28\n    |\n LL | global_asm!(\"\", options(), clobber_abi(\"C\"));\n    |                 ---------  ^^^^^^^^^^^^^^^^\n    |                 |\n    |                 options\n \n error: clobber_abi is not allowed after options\n-  --> $DIR/parse-error.rs:115:30\n+  --> $DIR/parse-error.rs:121:30\n    |\n LL | global_asm!(\"{}\", options(), clobber_abi(\"C\"), const FOO);\n    |                   ---------  ^^^^^^^^^^^^^^^^\n    |                   |\n    |                   options\n \n error: clobber_abi specified multiple times\n-  --> $DIR/parse-error.rs:117:35\n+  --> $DIR/parse-error.rs:123:35\n    |\n LL | global_asm!(\"\", clobber_abi(\"C\"), clobber_abi(\"C\"));\n    |                 ----------------  ^^^^^^^^^^^^^^^^\n    |                 |\n    |                 clobber_abi previously specified here\n \n error: duplicate argument named `a`\n-  --> $DIR/parse-error.rs:119:35\n+  --> $DIR/parse-error.rs:125:35\n    |\n LL | global_asm!(\"{a}\", a = const FOO, a = const BAR);\n    |                    -------------  ^^^^^^^^^^^^^ duplicate argument\n    |                    |\n    |                    previously here\n \n error: argument never used\n-  --> $DIR/parse-error.rs:119:35\n+  --> $DIR/parse-error.rs:125:35\n    |\n LL | global_asm!(\"{a}\", a = const FOO, a = const BAR);\n    |                                   ^^^^^^^^^^^^^ argument never used\n    |\n    = help: if this argument is intentionally unused, consider using it in an asm comment: `\"/* {1} */\"`\n \n error: expected one of `clobber_abi`, `const`, or `options`, found `\"\"`\n-  --> $DIR/parse-error.rs:122:28\n+  --> $DIR/parse-error.rs:128:28\n    |\n LL | global_asm!(\"\", options(), \"\");\n    |                            ^^ expected one of `clobber_abi`, `const`, or `options`\n \n error: expected one of `clobber_abi`, `const`, or `options`, found `\"{}\"`\n-  --> $DIR/parse-error.rs:124:30\n+  --> $DIR/parse-error.rs:130:30\n    |\n LL | global_asm!(\"{}\", const FOO, \"{}\", const FOO);\n    |                              ^^^^ expected one of `clobber_abi`, `const`, or `options`\n \n error: asm template must be a string literal\n-  --> $DIR/parse-error.rs:126:13\n+  --> $DIR/parse-error.rs:132:13\n    |\n LL | global_asm!(format!(\"{{{}}}\", 0), const FOO);\n    |             ^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: asm template must be a string literal\n-  --> $DIR/parse-error.rs:128:20\n+  --> $DIR/parse-error.rs:134:20\n    |\n LL | global_asm!(\"{1}\", format!(\"{{{}}}\", 0), const FOO, const BAR);\n    |                    ^^^^^^^^^^^^^^^^^^^^\n@@ -439,6 +457,6 @@ LL |     let mut bar = 0;\n LL |         asm!(\"{1}\", in(\"eax\") foo, const bar);\n    |                                          ^^^ non-constant value\n \n-error: aborting due to 63 previous errors\n+error: aborting due to 66 previous errors\n \n For more information about this error, try `rustc --explain E0435`."}]}