{"sha": "1c359ab634edb81b51e3c7eadfb83d46c926e890", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjMzU5YWI2MzRlZGI4MWI1MWUzYzdlYWRmYjgzZDQ2YzkyNmU4OTA=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-08-12T13:04:06Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-08-12T13:04:06Z"}, "message": "Replace SepBy with Itertools", "tree": {"sha": "e098f492ffc5c2408642fb112a37dc31962fdd79", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e098f492ffc5c2408642fb112a37dc31962fdd79"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c359ab634edb81b51e3c7eadfb83d46c926e890", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c359ab634edb81b51e3c7eadfb83d46c926e890", "html_url": "https://github.com/rust-lang/rust/commit/1c359ab634edb81b51e3c7eadfb83d46c926e890", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c359ab634edb81b51e3c7eadfb83d46c926e890/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42a16926293ff5cb4da7d7dddebc2f4aea445c94", "url": "https://api.github.com/repos/rust-lang/rust/commits/42a16926293ff5cb4da7d7dddebc2f4aea445c94", "html_url": "https://github.com/rust-lang/rust/commit/42a16926293ff5cb4da7d7dddebc2f4aea445c94"}], "stats": {"total": 124, "additions": 30, "deletions": 94}, "files": [{"sha": "ebdf00e676c7b63d5eee14221065c626861609cd", "filename": "crates/ra_assists/src/handlers/add_custom_impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c359ab634edb81b51e3c7eadfb83d46c926e890/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_custom_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c359ab634edb81b51e3c7eadfb83d46c926e890/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_custom_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_custom_impl.rs?ref=1c359ab634edb81b51e3c7eadfb83d46c926e890", "patch": "@@ -1,10 +1,10 @@\n+use itertools::Itertools;\n use ra_syntax::{\n     ast::{self, AstNode},\n     Direction, SmolStr,\n     SyntaxKind::{IDENT, WHITESPACE},\n     TextRange, TextSize,\n };\n-use stdx::SepBy;\n \n use crate::{\n     assist_context::{AssistContext, Assists},\n@@ -61,9 +61,9 @@ pub(crate) fn add_custom_impl(acc: &mut Assists, ctx: &AssistContext) -> Option<\n             .filter(|t| t != trait_token.text())\n             .collect::<Vec<SmolStr>>();\n         let has_more_derives = !new_attr_input.is_empty();\n-        let new_attr_input = new_attr_input.iter().sep_by(\", \").surround_with(\"(\", \")\").to_string();\n \n         if has_more_derives {\n+            let new_attr_input = format!(\"({})\", new_attr_input.iter().format(\", \"));\n             builder.replace(input.syntax().text_range(), new_attr_input);\n         } else {\n             let attr_range = attr.syntax().text_range();"}, {"sha": "7162dc184868c9b1e48664479e1a5cc506b587a7", "filename": "crates/ra_assists/src/handlers/generate_impl.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1c359ab634edb81b51e3c7eadfb83d46c926e890/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fgenerate_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c359ab634edb81b51e3c7eadfb83d46c926e890/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fgenerate_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fgenerate_impl.rs?ref=1c359ab634edb81b51e3c7eadfb83d46c926e890", "patch": "@@ -1,5 +1,6 @@\n+use itertools::Itertools;\n use ra_syntax::ast::{self, AstNode, GenericParamsOwner, NameOwner};\n-use stdx::{format_to, SepBy};\n+use stdx::format_to;\n \n use crate::{AssistContext, AssistId, AssistKind, Assists};\n \n@@ -50,7 +51,7 @@ pub(crate) fn generate_impl(acc: &mut Assists, ctx: &AssistContext) -> Option<()\n                     .filter_map(|it| it.name())\n                     .map(|it| it.text().clone());\n \n-                let generic_params = lifetime_params.chain(type_params).sep_by(\", \");\n+                let generic_params = lifetime_params.chain(type_params).format(\", \");\n                 format_to!(buf, \"<{}>\", generic_params)\n             }\n             match ctx.config.snippet_cap {"}, {"sha": "32dfed274adc1262975f3ab6669495a0e6851701", "filename": "crates/ra_assists/src/handlers/generate_new.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1c359ab634edb81b51e3c7eadfb83d46c926e890/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fgenerate_new.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c359ab634edb81b51e3c7eadfb83d46c926e890/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fgenerate_new.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fgenerate_new.rs?ref=1c359ab634edb81b51e3c7eadfb83d46c926e890", "patch": "@@ -1,9 +1,10 @@\n use hir::Adt;\n+use itertools::Itertools;\n use ra_syntax::{\n     ast::{self, AstNode, GenericParamsOwner, NameOwner, StructKind, VisibilityOwner},\n     T,\n };\n-use stdx::{format_to, SepBy};\n+use stdx::format_to;\n \n use crate::{AssistContext, AssistId, AssistKind, Assists};\n \n@@ -52,8 +53,8 @@ pub(crate) fn generate_new(acc: &mut Assists, ctx: &AssistContext) -> Option<()>\n         let params = field_list\n             .fields()\n             .filter_map(|f| Some(format!(\"{}: {}\", f.name()?.syntax(), f.ty()?.syntax())))\n-            .sep_by(\", \");\n-        let fields = field_list.fields().filter_map(|f| f.name()).sep_by(\", \");\n+            .format(\", \");\n+        let fields = field_list.fields().filter_map(|f| f.name()).format(\", \");\n \n         format_to!(buf, \"    {}fn new({}) -> Self {{ Self {{ {} }} }}\", vis, params, fields);\n \n@@ -102,7 +103,7 @@ fn generate_impl_text(strukt: &ast::Struct, code: &str) -> String {\n             .map(|it| it.text().clone());\n         let type_params =\n             type_params.type_params().filter_map(|it| it.name()).map(|it| it.text().clone());\n-        format_to!(buf, \"<{}>\", lifetime_params.chain(type_params).sep_by(\", \"))\n+        format_to!(buf, \"<{}>\", lifetime_params.chain(type_params).format(\", \"))\n     }\n \n     format_to!(buf, \" {{\\n{}\\n}}\\n\", code);"}, {"sha": "59f1b14246f0dc8f55ac6f7edbe3ab191a07eb4c", "filename": "crates/ra_ide/src/completion/presentation.rs", "status": "modified", "additions": 15, "deletions": 16, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/1c359ab634edb81b51e3c7eadfb83d46c926e890/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c359ab634edb81b51e3c7eadfb83d46c926e890/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs?ref=1c359ab634edb81b51e3c7eadfb83d46c926e890", "patch": "@@ -2,8 +2,8 @@\n //! It also handles scoring (sorting) completions.\n \n use hir::{Docs, HasAttrs, HasSource, HirDisplay, ModPath, ScopeDef, StructKind, Type};\n+use itertools::Itertools;\n use ra_syntax::ast::NameOwner;\n-use stdx::SepBy;\n use test_utils::mark;\n \n use crate::{\n@@ -289,16 +289,16 @@ impl Completions {\n             .map(|field| (field.name(ctx.db), field.signature_ty(ctx.db)));\n         let variant_kind = variant.kind(ctx.db);\n         let detail = match variant_kind {\n-            StructKind::Tuple | StructKind::Unit => detail_types\n-                .map(|(_, t)| t.display(ctx.db).to_string())\n-                .sep_by(\", \")\n-                .surround_with(\"(\", \")\")\n-                .to_string(),\n-            StructKind::Record => detail_types\n-                .map(|(n, t)| format!(\"{}: {}\", n, t.display(ctx.db).to_string()))\n-                .sep_by(\", \")\n-                .surround_with(\"{ \", \" }\")\n-                .to_string(),\n+            StructKind::Tuple | StructKind::Unit => format!(\n+                \"({})\",\n+                detail_types.map(|(_, t)| t.display(ctx.db).to_string()).format(\", \")\n+            ),\n+            StructKind::Record => format!(\n+                \"{{ {} }}\",\n+                detail_types\n+                    .map(|(n, t)| format!(\"{}: {}\", n, t.display(ctx.db).to_string()))\n+                    .format(\", \")\n+            ),\n         };\n         let mut res = CompletionItem::new(\n             CompletionKind::Reference,\n@@ -412,11 +412,10 @@ impl Builder {\n             self = self.trigger_call_info();\n             let snippet = match (ctx.config.add_call_argument_snippets, params) {\n                 (true, Params::Named(params)) => {\n-                    let function_params_snippet = params\n-                        .iter()\n-                        .enumerate()\n-                        .map(|(index, param_name)| format!(\"${{{}:{}}}\", index + 1, param_name))\n-                        .sep_by(\", \");\n+                    let function_params_snippet =\n+                        params.iter().enumerate().format_with(\", \", |(index, param_name), f| {\n+                            f(&format_args!(\"${{{}:{}}}\", index + 1, param_name))\n+                        });\n                     format!(\"{}({})$0\", name, function_params_snippet)\n                 }\n                 _ => {"}, {"sha": "6046643ef1ed1a3788e4cb64fc5b5197ba2b4bcf", "filename": "crates/ra_ide/src/syntax_highlighting/injection.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1c359ab634edb81b51e3c7eadfb83d46c926e890/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Finjection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c359ab634edb81b51e3c7eadfb83d46c926e890/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Finjection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Finjection.rs?ref=1c359ab634edb81b51e3c7eadfb83d46c926e890", "patch": "@@ -4,8 +4,8 @@ use std::{collections::BTreeMap, convert::TryFrom};\n \n use ast::{HasQuotes, HasStringValue};\n use hir::Semantics;\n+use itertools::Itertools;\n use ra_syntax::{ast, AstToken, SyntaxNode, SyntaxToken, TextRange, TextSize};\n-use stdx::SepBy;\n \n use crate::{\n     call_info::ActiveParameter, Analysis, Highlight, HighlightModifier, HighlightTag,\n@@ -129,8 +129,7 @@ pub(super) fn extract_doc_comments(\n \n             line[pos..].to_owned()\n         })\n-        .sep_by(\"\\n\")\n-        .to_string();\n+        .join(\"\\n\");\n \n     if doctest.is_empty() {\n         return None;"}, {"sha": "0bdc22d953fcabd696949cdd42d392eef493d554", "filename": "crates/ra_syntax/src/ast/traits.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1c359ab634edb81b51e3c7eadfb83d46c926e890/crates%2Fra_syntax%2Fsrc%2Fast%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c359ab634edb81b51e3c7eadfb83d46c926e890/crates%2Fra_syntax%2Fsrc%2Fast%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Ftraits.rs?ref=1c359ab634edb81b51e3c7eadfb83d46c926e890", "patch": "@@ -1,7 +1,7 @@\n //! Various traits that are implemented by ast nodes.\n //!\n //! The implementations are usually trivial, and live in generated.rs\n-use stdx::SepBy;\n+use itertools::Itertools;\n \n use crate::{\n     ast::{self, support, AstChildren, AstNode, AstToken},\n@@ -119,8 +119,7 @@ impl CommentIter {\n                 // of a line in markdown.\n                 line[pos..end].to_owned()\n             })\n-            .sep_by(\"\\n\")\n-            .to_string();\n+            .join(\"\\n\");\n \n         if has_comments {\n             Some(docs)"}, {"sha": "3c5027fe570613787d2e9eb531ab83f11c95267d", "filename": "crates/stdx/src/lib.rs", "status": "modified", "additions": 1, "deletions": 64, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/1c359ab634edb81b51e3c7eadfb83d46c926e890/crates%2Fstdx%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c359ab634edb81b51e3c7eadfb83d46c926e890/crates%2Fstdx%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fstdx%2Fsrc%2Flib.rs?ref=1c359ab634edb81b51e3c7eadfb83d46c926e890", "patch": "@@ -1,5 +1,5 @@\n //! Missing batteries for standard libraries.\n-use std::{cell::Cell, fmt, time::Instant};\n+use std::time::Instant;\n \n mod macros;\n \n@@ -8,69 +8,6 @@ pub fn is_ci() -> bool {\n     option_env!(\"CI\").is_some()\n }\n \n-pub trait SepBy: Sized {\n-    /// Returns an `impl fmt::Display`, which joins elements via a separator.\n-    fn sep_by(self, sep: &str) -> SepByBuilder<'_, Self>;\n-}\n-\n-impl<I> SepBy for I\n-where\n-    I: Iterator,\n-    I::Item: fmt::Display,\n-{\n-    fn sep_by(self, sep: &str) -> SepByBuilder<'_, Self> {\n-        SepByBuilder::new(sep, self)\n-    }\n-}\n-\n-pub struct SepByBuilder<'a, I> {\n-    sep: &'a str,\n-    prefix: &'a str,\n-    suffix: &'a str,\n-    iter: Cell<Option<I>>,\n-}\n-\n-impl<'a, I> SepByBuilder<'a, I> {\n-    fn new(sep: &'a str, iter: I) -> SepByBuilder<'a, I> {\n-        SepByBuilder { sep, prefix: \"\", suffix: \"\", iter: Cell::new(Some(iter)) }\n-    }\n-\n-    pub fn prefix(mut self, prefix: &'a str) -> Self {\n-        self.prefix = prefix;\n-        self\n-    }\n-\n-    pub fn suffix(mut self, suffix: &'a str) -> Self {\n-        self.suffix = suffix;\n-        self\n-    }\n-\n-    /// Set both suffix and prefix.\n-    pub fn surround_with(self, prefix: &'a str, suffix: &'a str) -> Self {\n-        self.prefix(prefix).suffix(suffix)\n-    }\n-}\n-\n-impl<I> fmt::Display for SepByBuilder<'_, I>\n-where\n-    I: Iterator,\n-    I::Item: fmt::Display,\n-{\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        f.write_str(self.prefix)?;\n-        let mut first = true;\n-        for item in self.iter.take().unwrap() {\n-            if !first {\n-                f.write_str(self.sep)?;\n-            }\n-            first = false;\n-            fmt::Display::fmt(&item, f)?;\n-        }\n-        f.write_str(self.suffix)?;\n-        Ok(())\n-    }\n-}\n-\n #[must_use]\n pub fn timeit(label: &'static str) -> impl Drop {\n     struct Guard {"}]}