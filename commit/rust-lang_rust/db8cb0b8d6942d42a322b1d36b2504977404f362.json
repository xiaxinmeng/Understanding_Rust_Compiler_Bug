{"sha": "db8cb0b8d6942d42a322b1d36b2504977404f362", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiOGNiMGI4ZDY5NDJkNDJhMzIyYjFkMzZiMjUwNDk3NzQwNGYzNjI=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2018-05-15T21:02:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-05-15T21:02:41Z"}, "message": "Merge pull request #2708 from sinkuu/saturating_sub\n\nUse `saturating_sub` instead of `checked_sub.unwrap_or`", "tree": {"sha": "e31a9ea87fc650014b408585b6bd7187ac890869", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e31a9ea87fc650014b408585b6bd7187ac890869"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db8cb0b8d6942d42a322b1d36b2504977404f362", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJa+0rxCRBK7hj4Ov3rIwAAdHIIAE6r0zJhdH7Ij+98bMC7sV/3\nblOFwgNOCNlfL+sCHfWRed0jJUXQx2CmjOx9qjmh3aF6xz6RvVlG/jX3BNDJCccG\n1u1CzajICZ56Ot1jFmGMiCSfZwOUpu2h6kjiUgcGWH9yQ50AyWrVrfQoER39w2aB\n63e9+QM2OmdFWeFn/JgcYs7msBlcv3PJcBq0QgQZLcmf2oDFv/2Y6Bn4erV8/s+q\nH3ydqtPs7/DtZnYciaBllfHjRodigot2uJn8T4Cosq2Uzmk6/+Pd1E4r648vC1ro\nI9kcXcHsb2OFwFUr4rkrwXqNjGbL5L5zp2NrgN21FpdyqdrjvE9Lh6tjX2u+e2I=\n=Bq8U\n-----END PGP SIGNATURE-----\n", "payload": "tree e31a9ea87fc650014b408585b6bd7187ac890869\nparent cb6cf05446d44bcac42f54537c47423c2d14a450\nparent d1e2b80fb9d3e48a63f7c3c97fc966869da60a2c\nauthor Nick Cameron <nrc@ncameron.org> 1526418161 +1200\ncommitter GitHub <noreply@github.com> 1526418161 +1200\n\nMerge pull request #2708 from sinkuu/saturating_sub\n\nUse `saturating_sub` instead of `checked_sub.unwrap_or`"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db8cb0b8d6942d42a322b1d36b2504977404f362", "html_url": "https://github.com/rust-lang/rust/commit/db8cb0b8d6942d42a322b1d36b2504977404f362", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db8cb0b8d6942d42a322b1d36b2504977404f362/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb6cf05446d44bcac42f54537c47423c2d14a450", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb6cf05446d44bcac42f54537c47423c2d14a450", "html_url": "https://github.com/rust-lang/rust/commit/cb6cf05446d44bcac42f54537c47423c2d14a450"}, {"sha": "d1e2b80fb9d3e48a63f7c3c97fc966869da60a2c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1e2b80fb9d3e48a63f7c3c97fc966869da60a2c", "html_url": "https://github.com/rust-lang/rust/commit/d1e2b80fb9d3e48a63f7c3c97fc966869da60a2c"}], "stats": {"total": 82, "additions": 27, "deletions": 55}, "files": [{"sha": "28e3e24ea09c0bda16c5193623c304e4b1cbc806", "filename": "src/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db8cb0b8d6942d42a322b1d36b2504977404f362/src%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db8cb0b8d6942d42a322b1d36b2504977404f362/src%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fattr.rs?ref=db8cb0b8d6942d42a322b1d36b2504977404f362", "patch": "@@ -77,7 +77,7 @@ fn format_derive(context: &RewriteContext, derive_args: &[&str], shape: Shape) -\n             result.push_str(&(shape.indent + 9).to_string(context.config));\n             budget = initial_budget;\n         } else {\n-            budget = budget.checked_sub(width).unwrap_or(0);\n+            budget = budget.saturating_sub(width);\n         }\n         result.push_str(a);\n         if i != num - 1 {"}, {"sha": "aec7d34b60a5566f9b1f3d47e200e40edc281d53", "filename": "src/closures.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/db8cb0b8d6942d42a322b1d36b2504977404f362/src%2Fclosures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db8cb0b8d6942d42a322b1d36b2504977404f362/src%2Fclosures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fclosures.rs?ref=db8cb0b8d6942d42a322b1d36b2504977404f362", "patch": "@@ -240,10 +240,7 @@ fn rewrite_closure_fn_decl(\n     );\n     let item_vec = arg_items.collect::<Vec<_>>();\n     // 1 = space between arguments and return type.\n-    let horizontal_budget = nested_shape\n-        .width\n-        .checked_sub(ret_str.len() + 1)\n-        .unwrap_or(0);\n+    let horizontal_budget = nested_shape.width.saturating_sub(ret_str.len() + 1);\n     let tactic = definitive_tactic(\n         &item_vec,\n         ListTactic::HorizontalVertical,"}, {"sha": "044a76e3599b5482f51ac062754a4b4532b83eb6", "filename": "src/comment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db8cb0b8d6942d42a322b1d36b2504977404f362/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db8cb0b8d6942d42a322b1d36b2504977404f362/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=db8cb0b8d6942d42a322b1d36b2504977404f362", "patch": "@@ -464,7 +464,7 @@ fn rewrite_comment_inner(\n                 // 1 = \" \"\n                 let offset = 1 + last_line_width(&result) - line_start.len();\n                 Shape {\n-                    width: max_chars.checked_sub(offset).unwrap_or(0),\n+                    width: max_chars.saturating_sub(offset),\n                     indent: fmt_indent,\n                     offset: fmt.shape.offset + offset,\n                 }"}, {"sha": "12605af25aee321b55557a2087d4f8eb320e17a9", "filename": "src/expr.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/db8cb0b8d6942d42a322b1d36b2504977404f362/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db8cb0b8d6942d42a322b1d36b2504977404f362/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=db8cb0b8d6942d42a322b1d36b2504977404f362", "patch": "@@ -326,7 +326,7 @@ pub fn format_expr(\n                 rw\n             } else {\n                 // 9 = `do catch `\n-                let budget = shape.width.checked_sub(9).unwrap_or(0);\n+                let budget = shape.width.saturating_sub(9);\n                 Some(format!(\n                     \"{}{}\",\n                     \"do catch \",\n@@ -1002,8 +1002,7 @@ impl<'a> ControlFlow<'a> {\n         let one_line_budget = context\n             .config\n             .max_width()\n-            .checked_sub(constr_shape.used_width() + offset + brace_overhead)\n-            .unwrap_or(0);\n+            .saturating_sub(constr_shape.used_width() + offset + brace_overhead);\n         let force_newline_brace = (pat_expr_string.contains('\\n')\n             || pat_expr_string.len() > one_line_budget)\n             && !last_line_extendable(&pat_expr_string);\n@@ -1109,7 +1108,7 @@ impl<'a> Rewrite for ControlFlow<'a> {\n             return Some(cond_str);\n         }\n \n-        let block_width = shape.width.checked_sub(used_width).unwrap_or(0);\n+        let block_width = shape.width.saturating_sub(used_width);\n         // This is used only for the empty block case: `{}`. So, we use 1 if we know\n         // we should avoid the single line case.\n         let block_width = if self.else_block.is_some() || self.nested_if {\n@@ -1828,7 +1827,7 @@ pub fn rewrite_field(\n         Some(attrs_str + &name)\n     } else {\n         let mut separator = String::from(struct_lit_field_separator(context.config));\n-        for _ in 0..prefix_max_width.checked_sub(name.len()).unwrap_or(0) {\n+        for _ in 0..prefix_max_width.saturating_sub(name.len()) {\n             separator.push(' ');\n         }\n         let overhead = name.len() + separator.len();\n@@ -2053,13 +2052,11 @@ pub fn rewrite_assign_rhs_with<S: Into<String>, R: Rewrite>(\n     rhs_tactics: RhsTactics,\n ) -> Option<String> {\n     let lhs = lhs.into();\n-    let last_line_width = last_line_width(&lhs)\n-        .checked_sub(if lhs.contains('\\n') {\n-            shape.indent.width()\n-        } else {\n-            0\n-        })\n-        .unwrap_or(0);\n+    let last_line_width = last_line_width(&lhs).saturating_sub(if lhs.contains('\\n') {\n+        shape.indent.width()\n+    } else {\n+        0\n+    });\n     // 1 = space between operator and rhs.\n     let orig_shape = shape.offset_left(last_line_width + 1).unwrap_or(Shape {\n         width: 0,"}, {"sha": "4740921c5250348dc9700f1bd55eddb57c348c33", "filename": "src/imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db8cb0b8d6942d42a322b1d36b2504977404f362/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db8cb0b8d6942d42a322b1d36b2504977404f362/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=db8cb0b8d6942d42a322b1d36b2504977404f362", "patch": "@@ -703,7 +703,7 @@ fn rewrite_nested_use_tree(\n     let remaining_width = if has_nested_list {\n         0\n     } else {\n-        shape.width.checked_sub(2).unwrap_or(0)\n+        shape.width.saturating_sub(2)\n     };\n \n     let tactic = definitive_tactic("}, {"sha": "8c90d73cff3ababc1d3bc1f2aa57b3d8d7b94857", "filename": "src/items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db8cb0b8d6942d42a322b1d36b2504977404f362/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db8cb0b8d6942d42a322b1d36b2504977404f362/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=db8cb0b8d6942d42a322b1d36b2504977404f362", "patch": "@@ -1503,7 +1503,7 @@ pub fn rewrite_struct_field(\n         attrs_extendable,\n     )?;\n     let overhead = last_line_width(&attr_prefix);\n-    let lhs_offset = lhs_max_width.checked_sub(overhead).unwrap_or(0);\n+    let lhs_offset = lhs_max_width.saturating_sub(overhead);\n     for _ in 0..lhs_offset {\n         spacing.push(' ');\n     }"}, {"sha": "7d6129133611784797ce753b26093d474a8fd41c", "filename": "src/lists.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/db8cb0b8d6942d42a322b1d36b2504977404f362/src%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db8cb0b8d6942d42a322b1d36b2504977404f362/src%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flists.rs?ref=db8cb0b8d6942d42a322b1d36b2504977404f362", "patch": "@@ -193,7 +193,7 @@ where\n     };\n \n     let (sep_count, total_width) = calculate_width(items.clone());\n-    let total_sep_len = sep.len() * sep_count.checked_sub(1).unwrap_or(0);\n+    let total_sep_len = sep.len() * sep_count.saturating_sub(1);\n     let real_total = total_width + total_sep_len;\n \n     if real_total <= limit\n@@ -485,9 +485,7 @@ where\n }\n \n fn post_comment_alignment(item_max_width: Option<usize>, inner_item_len: usize) -> usize {\n-    item_max_width\n-        .and_then(|max_line_width| max_line_width.checked_sub(inner_item_len))\n-        .unwrap_or(0)\n+    item_max_width.unwrap_or(0).saturating_sub(inner_item_len)\n }\n \n pub struct ListItems<'a, I, F1, F2, F3>"}, {"sha": "7205c39da4871dd2ce97c43fa95f1ccc45870b9a", "filename": "src/macros.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/db8cb0b8d6942d42a322b1d36b2504977404f362/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db8cb0b8d6942d42a322b1d36b2504977404f362/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=db8cb0b8d6942d42a322b1d36b2504977404f362", "patch": "@@ -1091,9 +1091,7 @@ fn indent_macro_snippet(\n                         _ if !trimmed => line.to_owned(),\n                         Some(original_indent_width) => {\n                             let new_indent_width = indent.width()\n-                                + original_indent_width\n-                                    .checked_sub(min_prefix_space_width)\n-                                    .unwrap_or(0);\n+                                + original_indent_width.saturating_sub(min_prefix_space_width);\n                             let new_indent = Indent::from_width(context.config, new_indent_width);\n                             format!(\"{}{}\", new_indent.to_string(context.config), line.trim())\n                         }"}, {"sha": "5a6aa6c6aac96df479a8fd525ea584fde02549ca", "filename": "src/matches.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db8cb0b8d6942d42a322b1d36b2504977404f362/src%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db8cb0b8d6942d42a322b1d36b2504977404f362/src%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmatches.rs?ref=db8cb0b8d6942d42a322b1d36b2504977404f362", "patch": "@@ -196,7 +196,7 @@ fn rewrite_match_arms(\n \n     let arm_len = arms.len();\n     let is_last_iter = repeat(false)\n-        .take(arm_len.checked_sub(1).unwrap_or(0))\n+        .take(arm_len.saturating_sub(1))\n         .chain(repeat(true));\n     let beginning_verts = collect_beginning_verts(context, arms, span);\n     let items = itemize_list("}, {"sha": "aeb528bf2e0ad376a14f201b0696a4958d960b30", "filename": "src/overflow.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/db8cb0b8d6942d42a322b1d36b2504977404f362/src%2Foverflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db8cb0b8d6942d42a322b1d36b2504977404f362/src%2Foverflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foverflow.rs?ref=db8cb0b8d6942d42a322b1d36b2504977404f362", "patch": "@@ -147,10 +147,7 @@ impl<'a, T: 'a + Rewrite + ToExpr + Spanned> Context<'a, T> {\n             1\n         };\n         let used_width = extra_offset(ident, shape);\n-        let one_line_width = shape\n-            .width\n-            .checked_sub(used_width + 2 * paren_overhead)\n-            .unwrap_or(0);\n+        let one_line_width = shape.width.saturating_sub(used_width + 2 * paren_overhead);\n \n         // 1 = \"(\" or \")\"\n         let one_line_shape = shape\n@@ -412,10 +409,7 @@ impl<'a, T: 'a + Rewrite + ToExpr + Spanned> Context<'a, T> {\n \n     fn wrap_items(&self, items_str: &str, shape: Shape, is_extendable: bool) -> String {\n         let shape = Shape {\n-            width: shape\n-                .width\n-                .checked_sub(last_line_width(self.ident))\n-                .unwrap_or(0),\n+            width: shape.width.saturating_sub(last_line_width(self.ident)),\n             ..shape\n         };\n "}, {"sha": "0dfae84bfc2af9d26d04e982f454975ee87e2d11", "filename": "src/rewrite.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db8cb0b8d6942d42a322b1d36b2504977404f362/src%2Frewrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db8cb0b8d6942d42a322b1d36b2504977404f362/src%2Frewrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frewrite.rs?ref=db8cb0b8d6942d42a322b1d36b2504977404f362", "patch": "@@ -53,7 +53,7 @@ impl<'a> RewriteContext<'a> {\n     }\n \n     pub fn budget(&self, used_width: usize) -> usize {\n-        self.config.max_width().checked_sub(used_width).unwrap_or(0)\n+        self.config.max_width().saturating_sub(used_width)\n     }\n \n     pub fn inside_macro(&self) -> bool {"}, {"sha": "6cf0e8ea8908b62534fd45ea38e2e7e5a29c6be8", "filename": "src/shape.rs", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/db8cb0b8d6942d42a322b1d36b2504977404f362/src%2Fshape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db8cb0b8d6942d42a322b1d36b2504977404f362/src%2Fshape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshape.rs?ref=db8cb0b8d6942d42a322b1d36b2504977404f362", "patch": "@@ -181,18 +181,15 @@ impl Shape {\n \n     pub fn indented(indent: Indent, config: &Config) -> Shape {\n         Shape {\n-            width: config.max_width().checked_sub(indent.width()).unwrap_or(0),\n+            width: config.max_width().saturating_sub(indent.width()),\n             indent,\n             offset: indent.alignment,\n         }\n     }\n \n     pub fn with_max_width(&self, config: &Config) -> Shape {\n         Shape {\n-            width: config\n-                .max_width()\n-                .checked_sub(self.indent.width())\n-                .unwrap_or(0),\n+            width: config.max_width().saturating_sub(self.indent.width()),\n             ..*self\n         }\n     }\n@@ -266,17 +263,13 @@ impl Shape {\n     pub fn rhs_overhead(&self, config: &Config) -> usize {\n         config\n             .max_width()\n-            .checked_sub(self.used_width() + self.width)\n-            .unwrap_or(0)\n+            .saturating_sub(self.used_width() + self.width)\n     }\n \n     pub fn comment(&self, config: &Config) -> Shape {\n         let width = min(\n             self.width,\n-            config\n-                .comment_width()\n-                .checked_sub(self.indent.width())\n-                .unwrap_or(0),\n+            config.comment_width().saturating_sub(self.indent.width()),\n         );\n         Shape { width, ..*self }\n     }"}, {"sha": "6c8862b9bf5550bc54bc5d2ac944b0704aa83440", "filename": "src/utils.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/db8cb0b8d6942d42a322b1d36b2504977404f362/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db8cb0b8d6942d42a322b1d36b2504977404f362/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=db8cb0b8d6942d42a322b1d36b2504977404f362", "patch": "@@ -29,10 +29,7 @@ pub const SKIP_ANNOTATION: &str = \"rustfmt::skip\";\n pub fn extra_offset(text: &str, shape: Shape) -> usize {\n     match text.rfind('\\n') {\n         // 1 for newline character\n-        Some(idx) => text\n-            .len()\n-            .checked_sub(idx + 1 + shape.used_width())\n-            .unwrap_or(0),\n+        Some(idx) => text.len().saturating_sub(idx + 1 + shape.used_width()),\n         None => text.len(),\n     }\n }"}, {"sha": "1595b22c5c4aba5075f9652d1e3ec7a9533715f2", "filename": "src/vertical.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/db8cb0b8d6942d42a322b1d36b2504977404f362/src%2Fvertical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db8cb0b8d6942d42a322b1d36b2504977404f362/src%2Fvertical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvertical.rs?ref=db8cb0b8d6942d42a322b1d36b2504977404f362", "patch": "@@ -219,9 +219,7 @@ fn rewrite_aligned_items_inner<T: AlignedItem>(\n     let item_shape = Shape::indented(item_indent, context.config).sub_width(1)?;\n     let (mut field_prefix_max_width, field_prefix_min_width) =\n         struct_field_prefix_max_min_width(context, fields, item_shape);\n-    let max_diff = field_prefix_max_width\n-        .checked_sub(field_prefix_min_width)\n-        .unwrap_or(0);\n+    let max_diff = field_prefix_max_width.saturating_sub(field_prefix_min_width);\n     if max_diff > context.config.struct_field_align_threshold() {\n         field_prefix_max_width = 0;\n     }"}]}