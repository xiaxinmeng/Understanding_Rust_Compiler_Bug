{"sha": "7f3dc0464422ebadf3b8647f591bcf6e3107e805", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmM2RjMDQ2NDQyMmViYWRmM2I4NjQ3ZjU5MWJjZjZlMzEwN2U4MDU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-04T12:58:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-04T12:58:31Z"}, "message": "Auto merge of #87150 - rusticstuff:simplify_wrapping_neg, r=m-ou-se\n\nMake wrapping_neg() use wrapping_sub(), #[inline(always)]\n\nThis is a follow-up change to the fix for #75598. It simplifies the implementation of wrapping_neg() for all integer types by just calling 0.wrapping_sub(self) and always inlines it. This leads to much less assembly code being emitted for opt-level\u22641 and thus much better performance for debug-compiled code.\n\nBackground is [this discussion on the internals forum](https://internals.rust-lang.org/t/why-does-rust-generate-10x-as-much-unoptimized-assembly-as-gcc/14930).", "tree": {"sha": "a59cd1b4392ab4df27811595393a1d1fe523feeb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a59cd1b4392ab4df27811595393a1d1fe523feeb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f3dc0464422ebadf3b8647f591bcf6e3107e805", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f3dc0464422ebadf3b8647f591bcf6e3107e805", "html_url": "https://github.com/rust-lang/rust/commit/7f3dc0464422ebadf3b8647f591bcf6e3107e805", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f3dc0464422ebadf3b8647f591bcf6e3107e805/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87d713ff2b000e3827ebb8be974b280188fac783", "url": "https://api.github.com/repos/rust-lang/rust/commits/87d713ff2b000e3827ebb8be974b280188fac783", "html_url": "https://github.com/rust-lang/rust/commit/87d713ff2b000e3827ebb8be974b280188fac783"}, {"sha": "a3fb1d618823ccab589fbca2b6d4cc3619900bc1", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3fb1d618823ccab589fbca2b6d4cc3619900bc1", "html_url": "https://github.com/rust-lang/rust/commit/a3fb1d618823ccab589fbca2b6d4cc3619900bc1"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "0bc646995c7c7a13b1d3f91320e25f68e7aa114d", "filename": "library/core/src/num/int_macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f3dc0464422ebadf3b8647f591bcf6e3107e805/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3dc0464422ebadf3b8647f591bcf6e3107e805/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs?ref=7f3dc0464422ebadf3b8647f591bcf6e3107e805", "patch": "@@ -1132,9 +1132,9 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"num_wrapping\", since = \"1.2.0\")]\n         #[rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\")]\n-        #[inline]\n+        #[inline(always)]\n         pub const fn wrapping_neg(self) -> Self {\n-            self.overflowing_neg().0\n+            (0 as $SelfT).wrapping_sub(self)\n         }\n \n         /// Panic-free bitwise shift-left; yields `self << mask(rhs)`, where `mask` removes"}, {"sha": "ae113a47e95d61a0b7712471012694045fb6207f", "filename": "library/core/src/num/uint_macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f3dc0464422ebadf3b8647f591bcf6e3107e805/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3dc0464422ebadf3b8647f591bcf6e3107e805/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs?ref=7f3dc0464422ebadf3b8647f591bcf6e3107e805", "patch": "@@ -1246,9 +1246,9 @@ macro_rules! uint_impl {\n         /// ```\n         #[stable(feature = \"num_wrapping\", since = \"1.2.0\")]\n         #[rustc_const_stable(feature = \"const_wrapping_math\", since = \"1.32.0\")]\n-        #[inline]\n+        #[inline(always)]\n         pub const fn wrapping_neg(self) -> Self {\n-            self.overflowing_neg().0\n+            (0 as $SelfT).wrapping_sub(self)\n         }\n \n         /// Panic-free bitwise shift-left; yields `self << mask(rhs)`,"}]}