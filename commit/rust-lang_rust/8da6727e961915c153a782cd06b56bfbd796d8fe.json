{"sha": "8da6727e961915c153a782cd06b56bfbd796d8fe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkYTY3MjdlOTYxOTE1YzE1M2E3ODJjZDA2YjU2YmZiZDc5NmQ4ZmU=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-12-28T01:04:58Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-12-28T19:16:23Z"}, "message": "Suggest `.as_ref()` when appropriate for `Option` and `Result`", "tree": {"sha": "3bbdfd370b8b94cfb5694f8bd294448d017b4463", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3bbdfd370b8b94cfb5694f8bd294448d017b4463"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8da6727e961915c153a782cd06b56bfbd796d8fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8da6727e961915c153a782cd06b56bfbd796d8fe", "html_url": "https://github.com/rust-lang/rust/commit/8da6727e961915c153a782cd06b56bfbd796d8fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8da6727e961915c153a782cd06b56bfbd796d8fe/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb86d604bf65c3becd16180b56267a329cf268d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb86d604bf65c3becd16180b56267a329cf268d5", "html_url": "https://github.com/rust-lang/rust/commit/fb86d604bf65c3becd16180b56267a329cf268d5"}], "stats": {"total": 212, "additions": 165, "deletions": 47}, "files": [{"sha": "c9fc896b1b2d49731362fd98b7f10b687ebf7dd5", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/8da6727e961915c153a782cd06b56bfbd796d8fe/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8da6727e961915c153a782cd06b56bfbd796d8fe/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=8da6727e961915c153a782cd06b56bfbd796d8fe", "patch": "@@ -956,6 +956,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                                 diag.span_label(span, message);\n                             }\n                         }\n+                        self.suggest_as_ref_where_appropriate(span, &exp_found, diag);\n                     }\n \n                     diag.note_expected_found(&\"type\", expected, found);\n@@ -972,6 +973,79 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         self.note_error_origin(diag, &cause);\n     }\n \n+    /// When encountering a case where `.as_ref()` on a `Result` or `Option` would be appropriate,\n+    /// suggest it.\n+    fn suggest_as_ref_where_appropriate(\n+        &self,\n+        span: Span,\n+        exp_found: &ty::error::ExpectedFound<Ty<'tcx>>,\n+        diag: &mut DiagnosticBuilder<'tcx>,\n+    ) {\n+        match (&exp_found.expected.sty, &exp_found.found.sty) {\n+            (TyKind::Adt(exp_def, exp_substs), TyKind::Ref(_, found_ty, _)) => {\n+                if let TyKind::Adt(found_def, found_substs) = found_ty.sty {\n+                    let path_str = format!(\"{:?}\", exp_def);\n+                    if exp_def == &found_def {\n+                        let opt_msg = \"you can convert from `&Option<T>` to `Option<&T>` using \\\n+                                       `.as_ref()`\";\n+                        let result_msg = \"you can convert from `&Result<T, E>` to \\\n+                                          `Result<&T, &E>` using `.as_ref()`\";\n+                        let have_as_ref = &[\n+                            (\"std::option::Option\", opt_msg),\n+                            (\"core::option::Option\", opt_msg),\n+                            (\"std::result::Result\", result_msg),\n+                            (\"core::result::Result\", result_msg),\n+                        ];\n+                        if let Some(msg) = have_as_ref.iter()\n+                            .filter_map(|(path, msg)| if &path_str == path {\n+                                Some(msg)\n+                            } else {\n+                                None\n+                            }).next()\n+                        {\n+                            let mut show_suggestion = true;\n+                            for (exp_ty, found_ty) in exp_substs.types().zip(found_substs.types()) {\n+                                if let TyKind::Ref(_, exp_ty, _) = exp_ty.sty {\n+                                    match (&exp_ty.sty, &found_ty.sty) {\n+                                        (TyKind::Adt(exp_did, _), TyKind::Adt(found_did, _))\n+                                        if exp_did == found_did => {}\n+                                        (TyKind::Bool, TyKind::Bool) |\n+                                        (TyKind::Char, TyKind::Char) |\n+                                        (TyKind::Str, TyKind::Str) |\n+                                        (_, TyKind::Param(_)) |\n+                                        (_, TyKind::Infer(_)) |\n+                                        (TyKind::Param(_), _) |\n+                                        (TyKind::Infer(_), _) => {}\n+                                        (TyKind::Int(x), TyKind::Int(y)) if x == y => {}\n+                                        (TyKind::Uint(x), TyKind::Uint(y)) if x == y => {}\n+                                        (TyKind::Int(x), TyKind::Int(y)) if x == y => {}\n+                                        (TyKind::Uint(x), TyKind::Uint(y)) if x == y => {}\n+                                        (TyKind::Float(x), TyKind::Float(y)) if x == y => {}\n+                                        _ => show_suggestion = false,\n+                                    }\n+                                } else {\n+                                    show_suggestion = false;\n+                                }\n+                            }\n+                            if let (Ok(snippet), true) = (\n+                                self.tcx.sess.source_map().span_to_snippet(span),\n+                                show_suggestion,\n+                            ) {\n+                                diag.span_suggestion_with_applicability(\n+                                    span,\n+                                    msg,\n+                                    format!(\"{}.as_ref()\", snippet),\n+                                    Applicability::MachineApplicable,\n+                                );\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+            _ => {}\n+        }\n+    }\n+\n     pub fn report_and_explain_type_error(\n         &self,\n         trace: TypeTrace<'tcx>,"}, {"sha": "8ca54e8006cf3061d37425bfa3e4dc1be53cefe0", "filename": "src/test/ui/as-ref.stderr", "status": "removed", "additions": 0, "deletions": 47, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/fb86d604bf65c3becd16180b56267a329cf268d5/src%2Ftest%2Fui%2Fas-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb86d604bf65c3becd16180b56267a329cf268d5/src%2Ftest%2Fui%2Fas-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fas-ref.stderr?ref=fb86d604bf65c3becd16180b56267a329cf268d5", "patch": "@@ -1,47 +0,0 @@\n-error[E0308]: mismatched types\n-  --> $DIR/as-ref.rs:6:27\n-   |\n-LL |   opt.map(|arg| takes_ref(arg));\n-   |       -                   ^^^ expected &Foo, found struct `Foo`\n-   |       |\n-   |       help: consider using `as_ref` instead: `as_ref().`\n-   |\n-   = note: expected type `&Foo`\n-              found type `Foo`\n-\n-error[E0308]: mismatched types\n-  --> $DIR/as-ref.rs:8:37\n-   |\n-LL |   opt.and_then(|arg| Some(takes_ref(arg)));\n-   |       -                             ^^^ expected &Foo, found struct `Foo`\n-   |       |\n-   |       help: consider using `as_ref` instead: `as_ref().`\n-   |\n-   = note: expected type `&Foo`\n-              found type `Foo`\n-\n-error[E0308]: mismatched types\n-  --> $DIR/as-ref.rs:11:27\n-   |\n-LL |   opt.map(|arg| takes_ref(arg));\n-   |       -                   ^^^ expected &Foo, found struct `Foo`\n-   |       |\n-   |       help: consider using `as_ref` instead: `as_ref().`\n-   |\n-   = note: expected type `&Foo`\n-              found type `Foo`\n-\n-error[E0308]: mismatched types\n-  --> $DIR/as-ref.rs:13:35\n-   |\n-LL |   opt.and_then(|arg| Ok(takes_ref(arg)));\n-   |       -                           ^^^ expected &Foo, found struct `Foo`\n-   |       |\n-   |       help: consider using `as_ref` instead: `as_ref().`\n-   |\n-   = note: expected type `&Foo`\n-              found type `Foo`\n-\n-error: aborting due to 4 previous errors\n-\n-For more information about this error, try `rustc --explain E0308`."}, {"sha": "03f04c389f1f3fbcbcbf9b0145fd133d0f06f7b8", "filename": "src/test/ui/suggestions/as-ref.rs", "status": "renamed", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8da6727e961915c153a782cd06b56bfbd796d8fe/src%2Ftest%2Fui%2Fsuggestions%2Fas-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8da6727e961915c153a782cd06b56bfbd796d8fe/src%2Ftest%2Fui%2Fsuggestions%2Fas-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fas-ref.rs?ref=8da6727e961915c153a782cd06b56bfbd796d8fe", "patch": "@@ -12,4 +12,14 @@ fn main() {\n   //~^ ERROR mismatched types [E0308]\n   opt.and_then(|arg| Ok(takes_ref(arg)));\n   //~^ ERROR mismatched types [E0308]\n+  let x: &Option<usize> = &Some(3);\n+  let y: Option<&usize> = x;\n+  //~^ ERROR mismatched types [E0308]\n+  let x: &Result<usize, usize> = &Ok(3);\n+  let y: Result<&usize, &usize> = x;\n+  //~^ ERROR mismatched types [E0308]\n+  // note: do not suggest because of `E: usize`\n+  let x: &Result<usize, usize> = &Ok(3);\n+  let y: Result<&usize, usize> = x;\n+  //~^ ERROR mismatched types [E0308]\n }", "previous_filename": "src/test/ui/as-ref.rs"}, {"sha": "7273496a7ce06ba820cd09685b19829d3d4c4c5e", "filename": "src/test/ui/suggestions/as-ref.stderr", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/8da6727e961915c153a782cd06b56bfbd796d8fe/src%2Ftest%2Fui%2Fsuggestions%2Fas-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8da6727e961915c153a782cd06b56bfbd796d8fe/src%2Ftest%2Fui%2Fsuggestions%2Fas-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fas-ref.stderr?ref=8da6727e961915c153a782cd06b56bfbd796d8fe", "patch": "@@ -0,0 +1,81 @@\n+error[E0308]: mismatched types\n+  --> $DIR/as-ref.rs:6:27\n+   |\n+LL |   opt.map(|arg| takes_ref(arg));\n+   |       -                   ^^^ expected &Foo, found struct `Foo`\n+   |       |\n+   |       help: consider using `as_ref` instead: `as_ref().`\n+   |\n+   = note: expected type `&Foo`\n+              found type `Foo`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/as-ref.rs:8:37\n+   |\n+LL |   opt.and_then(|arg| Some(takes_ref(arg)));\n+   |       -                             ^^^ expected &Foo, found struct `Foo`\n+   |       |\n+   |       help: consider using `as_ref` instead: `as_ref().`\n+   |\n+   = note: expected type `&Foo`\n+              found type `Foo`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/as-ref.rs:11:27\n+   |\n+LL |   opt.map(|arg| takes_ref(arg));\n+   |       -                   ^^^ expected &Foo, found struct `Foo`\n+   |       |\n+   |       help: consider using `as_ref` instead: `as_ref().`\n+   |\n+   = note: expected type `&Foo`\n+              found type `Foo`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/as-ref.rs:13:35\n+   |\n+LL |   opt.and_then(|arg| Ok(takes_ref(arg)));\n+   |       -                           ^^^ expected &Foo, found struct `Foo`\n+   |       |\n+   |       help: consider using `as_ref` instead: `as_ref().`\n+   |\n+   = note: expected type `&Foo`\n+              found type `Foo`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/as-ref.rs:16:27\n+   |\n+LL |   let y: Option<&usize> = x;\n+   |                           ^\n+   |                           |\n+   |                           expected enum `std::option::Option`, found reference\n+   |                           help: you can convert from `&Option<T>` to `Option<&T>` using `.as_ref()`: `x.as_ref()`\n+   |\n+   = note: expected type `std::option::Option<&usize>`\n+              found type `&std::option::Option<usize>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/as-ref.rs:19:35\n+   |\n+LL |   let y: Result<&usize, &usize> = x;\n+   |                                   ^ expected enum `std::result::Result`, found reference\n+   |\n+   = note: expected type `std::result::Result<&usize, &usize>`\n+              found type `&std::result::Result<usize, usize>`\n+help: you can convert from `&Result<T, E>` to `Result<&T, &E>` using `.as_ref()`\n+   |\n+LL |   let y: Result<&usize, &usize> = x.as_ref();\n+   |                                   ^^^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/as-ref.rs:23:34\n+   |\n+LL |   let y: Result<&usize, usize> = x;\n+   |                                  ^ expected enum `std::result::Result`, found reference\n+   |\n+   = note: expected type `std::result::Result<&usize, usize>`\n+              found type `&std::result::Result<usize, usize>`\n+\n+error: aborting due to 7 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}]}