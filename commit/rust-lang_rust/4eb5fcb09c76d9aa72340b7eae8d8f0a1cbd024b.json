{"sha": "4eb5fcb09c76d9aa72340b7eae8d8f0a1cbd024b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlYjVmY2IwOWM3NmQ5YWE3MjM0MGI3ZWFlOGQ4ZjBhMWNiZDAyNGI=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-10-02T08:39:35Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-10-02T08:59:50Z"}, "message": "Compute the layout of uninhabited structs", "tree": {"sha": "038b2ba084132f8938e8492a08ea7713d80190c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/038b2ba084132f8938e8492a08ea7713d80190c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4eb5fcb09c76d9aa72340b7eae8d8f0a1cbd024b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4eb5fcb09c76d9aa72340b7eae8d8f0a1cbd024b", "html_url": "https://github.com/rust-lang/rust/commit/4eb5fcb09c76d9aa72340b7eae8d8f0a1cbd024b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4eb5fcb09c76d9aa72340b7eae8d8f0a1cbd024b/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22bc9e1d9ca49ee4f5cd953088ab09c238a6dd26", "url": "https://api.github.com/repos/rust-lang/rust/commits/22bc9e1d9ca49ee4f5cd953088ab09c238a6dd26", "html_url": "https://github.com/rust-lang/rust/commit/22bc9e1d9ca49ee4f5cd953088ab09c238a6dd26"}], "stats": {"total": 55, "additions": 37, "deletions": 18}, "files": [{"sha": "ac99ccd45eafe4e8b0c578a5d1c63d174e0bc3cf", "filename": "src/librustc/mir/interpret/error.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4eb5fcb09c76d9aa72340b7eae8d8f0a1cbd024b/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4eb5fcb09c76d9aa72340b7eae8d8f0a1cbd024b/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs?ref=4eb5fcb09c76d9aa72340b7eae8d8f0a1cbd024b", "patch": "@@ -389,10 +389,6 @@ pub enum UnsupportedOpInfo<'tcx> {\n     /// Free-form case. Only for errors that are never caught!\n     Unsupported(String),\n \n-    /// FIXME(#64506) Error used to work around accessing projections of\n-    /// uninhabited types.\n-    UninhabitedValue,\n-\n     // -- Everything below is not categorized yet --\n     FunctionAbiMismatch(Abi, Abi),\n     FunctionArgMismatch(Ty<'tcx>, Ty<'tcx>),\n@@ -556,8 +552,6 @@ impl fmt::Debug for UnsupportedOpInfo<'tcx> {\n                     not a power of two\"),\n             Unsupported(ref msg) =>\n                 write!(f, \"{}\", msg),\n-            UninhabitedValue =>\n-                write!(f, \"tried to use an uninhabited value\"),\n         }\n     }\n }"}, {"sha": "2751ce57e3e816bbbccfda85b35a0ca9af4e3fc3", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4eb5fcb09c76d9aa72340b7eae8d8f0a1cbd024b/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4eb5fcb09c76d9aa72340b7eae8d8f0a1cbd024b/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=4eb5fcb09c76d9aa72340b7eae8d8f0a1cbd024b", "patch": "@@ -825,10 +825,18 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                     });\n                     (present_variants.next(), present_variants.next())\n                 };\n-                if present_first.is_none() {\n-                    // Uninhabited because it has no variants, or only absent ones.\n-                    return tcx.layout_raw(param_env.and(tcx.types.never));\n-                }\n+                let present_first = if present_first.is_none() {\n+                    if def.is_enum() {\n+                        // Uninhabited because it has no variants, or only absent ones.\n+                        return tcx.layout_raw(param_env.and(tcx.types.never));\n+                    } else {\n+                        // if it's a struct, still compute a layout so that we can still compute the\n+                        // field offsets\n+                        Some(VariantIdx::new(0))\n+                    }\n+                } else {\n+                    present_first\n+                };\n \n                 let is_struct = !def.is_enum() ||\n                     // Only one variant is present."}, {"sha": "f57c180191d282f1f7674c4c2efbf8272ba5f0ec", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4eb5fcb09c76d9aa72340b7eae8d8f0a1cbd024b/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4eb5fcb09c76d9aa72340b7eae8d8f0a1cbd024b/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=4eb5fcb09c76d9aa72340b7eae8d8f0a1cbd024b", "patch": "@@ -9,7 +9,7 @@ use rustc::mir;\n use rustc::mir::interpret::truncate;\n use rustc::ty::{self, Ty};\n use rustc::ty::layout::{\n-    self, Size, Abi, Align, LayoutOf, TyLayout, HasDataLayout, VariantIdx, PrimitiveExt\n+    self, Size, Align, LayoutOf, TyLayout, HasDataLayout, VariantIdx, PrimitiveExt\n };\n use rustc::ty::TypeFoldable;\n \n@@ -377,20 +377,17 @@ where\n             layout::FieldPlacement::Array { stride, .. } => {\n                 let len = base.len(self)?;\n                 if field >= len {\n-                    // This can be violated because this runs during promotion on code where the\n-                    // type system has not yet ensured that such things don't happen.\n+                    // This can be violated because the index (field) can be a runtime value\n+                    // provided by the user.\n                     debug!(\"tried to access element {} of array/slice with length {}\", field, len);\n                     throw_panic!(BoundsCheck { len, index: field });\n                 }\n                 stride * field\n             }\n             layout::FieldPlacement::Union(count) => {\n-                // FIXME(#64506) `UninhabitedValue` can be removed when this issue is resolved\n-                if base.layout.abi == Abi::Uninhabited {\n-                    throw_unsup!(UninhabitedValue);\n-                }\n                 assert!(field < count as u64,\n-                        \"Tried to access field {} of union with {} fields\", field, count);\n+                        \"Tried to access field {} of union {:#?} with {} fields\",\n+                        field, base.layout, count);\n                 // Offset is always 0\n                 Size::from_bytes(0)\n             }"}, {"sha": "db3e85a7bdfd1077e1f05d9edbb899d25c00c4e9", "filename": "src/test/ui/issues/issue-64506.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4eb5fcb09c76d9aa72340b7eae8d8f0a1cbd024b/src%2Ftest%2Fui%2Fissues%2Fissue-64506.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4eb5fcb09c76d9aa72340b7eae8d8f0a1cbd024b/src%2Ftest%2Fui%2Fissues%2Fissue-64506.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-64506.rs?ref=4eb5fcb09c76d9aa72340b7eae8d8f0a1cbd024b", "patch": "@@ -0,0 +1,20 @@\n+// check-pass\n+\n+#[derive(Copy, Clone)]\n+pub struct ChildStdin {\n+    inner: AnonPipe,\n+}\n+\n+#[derive(Copy, Clone)]\n+enum AnonPipe {}\n+\n+const FOO: () = {\n+    union Foo {\n+        a: ChildStdin,\n+        b: (),\n+    }\n+    let x = unsafe { Foo { b: () }.a };\n+    let x = &x.inner;\n+};\n+\n+fn main() {}"}]}