{"sha": "030c886c29ffbfbb9f9c6495651cb4bee0fc93fe", "node_id": "C_kwDOAAsO6NoAKDAzMGM4ODZjMjlmZmJmYmI5ZjljNjQ5NTY1MWNiNGJlZTBmYzkzZmU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-08T04:05:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-08T04:05:36Z"}, "message": "Auto merge of #96155 - jackh726:param-heuristics-followup, r=estebank\n\nFollowups for method call error change\n\nEach commit is self-contained. Fixes most of the followup reviews from that PR.\n\nr? `@estebank`", "tree": {"sha": "024c2d30e9a6c3558b6109de41b9b67920d92870", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/024c2d30e9a6c3558b6109de41b9b67920d92870"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/030c886c29ffbfbb9f9c6495651cb4bee0fc93fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/030c886c29ffbfbb9f9c6495651cb4bee0fc93fe", "html_url": "https://github.com/rust-lang/rust/commit/030c886c29ffbfbb9f9c6495651cb4bee0fc93fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/030c886c29ffbfbb9f9c6495651cb4bee0fc93fe/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d1076c9f918297c97300a7ecf769dd7e6780be6", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d1076c9f918297c97300a7ecf769dd7e6780be6", "html_url": "https://github.com/rust-lang/rust/commit/4d1076c9f918297c97300a7ecf769dd7e6780be6"}, {"sha": "7d8e10d3c242c2741d7190db8a9bbc4c919b53c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d8e10d3c242c2741d7190db8a9bbc4c919b53c7", "html_url": "https://github.com/rust-lang/rust/commit/7d8e10d3c242c2741d7190db8a9bbc4c919b53c7"}], "stats": {"total": 577, "additions": 265, "deletions": 312}, "files": [{"sha": "af81f5cde2c41778bbdcdb14f94006ab65b140b3", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/030c886c29ffbfbb9f9c6495651cb4bee0fc93fe/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/030c886c29ffbfbb9f9c6495651cb4bee0fc93fe/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=030c886c29ffbfbb9f9c6495651cb4bee0fc93fe", "patch": "@@ -1584,9 +1584,10 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             Variable(ty::error::ExpectedFound<Ty<'a>>),\n             Fixed(&'static str),\n         }\n-        let (expected_found, exp_found, is_simple_error) = match values {\n-            None => (None, Mismatch::Fixed(\"type\"), false),\n+        let (expected_found, exp_found, is_simple_error, values) = match values {\n+            None => (None, Mismatch::Fixed(\"type\"), false, None),\n             Some(values) => {\n+                let values = self.resolve_vars_if_possible(values);\n                 let (is_simple_error, exp_found) = match values {\n                     ValuePairs::Terms(infer::ExpectedFound {\n                         expected: ty::Term::Ty(expected),\n@@ -1614,7 +1615,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                         return;\n                     }\n                 };\n-                (vals, exp_found, is_simple_error)\n+                (vals, exp_found, is_simple_error, Some(values))\n             }\n         };\n "}, {"sha": "90b59df472cadf0f32d8fa2893c28b2174e7b915", "filename": "compiler/rustc_typeck/src/check/callee.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/030c886c29ffbfbb9f9c6495651cb4bee0fc93fe/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/030c886c29ffbfbb9f9c6495651cb4bee0fc93fe/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs?ref=030c886c29ffbfbb9f9c6495651cb4bee0fc93fe", "patch": "@@ -59,7 +59,7 @@ pub fn check_legal_trait_for_method_call(\n \n enum CallStep<'tcx> {\n     Builtin(Ty<'tcx>),\n-    DeferredClosure(ty::FnSig<'tcx>),\n+    DeferredClosure(DefId, ty::FnSig<'tcx>),\n     /// E.g., enum variant constructors.\n     Overloaded(MethodCallee<'tcx>),\n }\n@@ -107,8 +107,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 self.confirm_builtin_call(call_expr, callee_expr, callee_ty, arg_exprs, expected)\n             }\n \n-            Some(CallStep::DeferredClosure(fn_sig)) => {\n-                self.confirm_deferred_closure_call(call_expr, arg_exprs, expected, fn_sig)\n+            Some(CallStep::DeferredClosure(def_id, fn_sig)) => {\n+                self.confirm_deferred_closure_call(call_expr, arg_exprs, expected, def_id, fn_sig)\n             }\n \n             Some(CallStep::Overloaded(method_callee)) => {\n@@ -171,7 +171,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             closure_substs: substs,\n                         },\n                     );\n-                    return Some(CallStep::DeferredClosure(closure_sig));\n+                    return Some(CallStep::DeferredClosure(def_id, closure_sig));\n                 }\n             }\n \n@@ -533,6 +533,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         call_expr: &'tcx hir::Expr<'tcx>,\n         arg_exprs: &'tcx [hir::Expr<'tcx>],\n         expected: Expectation<'tcx>,\n+        closure_def_id: DefId,\n         fn_sig: ty::FnSig<'tcx>,\n     ) -> Ty<'tcx> {\n         // `fn_sig` is the *signature* of the closure being called. We\n@@ -555,7 +556,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             arg_exprs,\n             fn_sig.c_variadic,\n             TupleArgumentsFlag::TupleArguments,\n-            None,\n+            Some(closure_def_id),\n         );\n \n         fn_sig.output()"}, {"sha": "277743e4a46c19c3c20746509fc934b65204b3c1", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 63, "deletions": 79, "changes": 142, "blob_url": "https://github.com/rust-lang/rust/blob/030c886c29ffbfbb9f9c6495651cb4bee0fc93fe/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/030c886c29ffbfbb9f9c6495651cb4bee0fc93fe/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=030c886c29ffbfbb9f9c6495651cb4bee0fc93fe", "patch": "@@ -24,7 +24,7 @@ use rustc_infer::infer::TypeTrace;\n use rustc_middle::ty::adjustment::AllowTwoPhase;\n use rustc_middle::ty::error::TypeError;\n use rustc_middle::ty::fold::TypeFoldable;\n-use rustc_middle::ty::{self, Ty};\n+use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_session::Session;\n use rustc_span::symbol::Ident;\n use rustc_span::{self, Span};\n@@ -394,6 +394,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 break 'errors;\n             }\n \n+            self.set_tainted_by_errors();\n+\n             // The algorithm here is inspired by levenshtein distance and longest common subsequence.\n             // We'll try to detect 4 different types of mistakes:\n             // - An extra parameter has been provided that doesn't satisfy *any* of the other inputs\n@@ -502,6 +504,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 TupleMatchFound::Single => {\n                     let expected_ty = expected_input_tys[0];\n                     let provided_ty = final_arg_types[0].map(|ty| ty.0).unwrap();\n+                    let expected_ty = self.resolve_vars_if_possible(expected_ty);\n+                    let provided_ty = self.resolve_vars_if_possible(provided_ty);\n                     let cause = &self.misc(provided_args[0].span);\n                     let compatibility = demand_compatible(0, &mut final_arg_types);\n                     let type_error = match compatibility {\n@@ -523,24 +527,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         format!(\"arguments to this {} are incorrect\", call_name),\n                     );\n                     // Call out where the function is defined\n-                    if let Some(def_id) = fn_def_id && let Some(def_span) = tcx.def_ident_span(def_id) {\n-                        let mut spans: MultiSpan = def_span.into();\n-\n-                        let params = tcx\n-                            .hir()\n-                            .get_if_local(def_id)\n-                            .and_then(|node| node.body_id())\n-                            .into_iter()\n-                            .map(|id| tcx.hir().body(id).params)\n-                            .flatten();\n-\n-                        for param in params {\n-                            spans.push_span_label(param.span, String::new());\n-                        }\n-\n-                        let def_kind = tcx.def_kind(def_id);\n-                        err.span_note(spans, &format!(\"{} defined here\", def_kind.descr(def_id)));\n-                    }\n+                    label_fn_like(tcx, &mut err, fn_def_id);\n                     err.emit();\n                     break 'errors;\n                 }\n@@ -558,24 +545,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         DiagnosticId::Error(err_code.to_owned()),\n                     );\n                     // Call out where the function is defined\n-                    if let Some(def_id) = fn_def_id && let Some(def_span) = tcx.def_ident_span(def_id) {\n-                        let mut spans: MultiSpan = def_span.into();\n-\n-                        let params = tcx\n-                            .hir()\n-                            .get_if_local(def_id)\n-                            .and_then(|node| node.body_id())\n-                            .into_iter()\n-                            .map(|id| tcx.hir().body(id).params)\n-                            .flatten();\n-\n-                        for param in params {\n-                            spans.push_span_label(param.span, String::new());\n-                        }\n-\n-                        let def_kind = tcx.def_kind(def_id);\n-                        err.span_note(spans, &format!(\"{} defined here\", def_kind.descr(def_id)));\n-                    }\n+                    label_fn_like(tcx, &mut err, fn_def_id);\n                     err.multipart_suggestion(\n                         \"use parentheses to construct a tuple\",\n                         vec![(start, '('.to_string()), (end, ')'.to_string())],\n@@ -597,13 +567,15 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 {\n                     let expected_ty = expected_input_tys[*input_idx];\n                     let provided_ty = final_arg_types[*input_idx].map(|ty| ty.0).unwrap();\n+                    let expected_ty = self.resolve_vars_if_possible(expected_ty);\n+                    let provided_ty = self.resolve_vars_if_possible(provided_ty);\n                     let cause = &self.misc(provided_args[*input_idx].span);\n                     let trace = TypeTrace::types(cause, true, expected_ty, provided_ty);\n                     let mut err = self.report_and_explain_type_error(trace, error);\n                     self.emit_coerce_suggestions(\n                         &mut err,\n                         &provided_args[*input_idx],\n-                        final_arg_types[*input_idx].map(|ty| ty.0).unwrap(),\n+                        provided_ty,\n                         final_arg_types[*input_idx].map(|ty| ty.1).unwrap(),\n                         None,\n                         None,\n@@ -613,24 +585,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         format!(\"arguments to this {} are incorrect\", call_name),\n                     );\n                     // Call out where the function is defined\n-                    if let Some(def_id) = fn_def_id && let Some(def_span) = tcx.def_ident_span(def_id) {\n-                        let mut spans: MultiSpan = def_span.into();\n-\n-                        let params = tcx\n-                            .hir()\n-                            .get_if_local(def_id)\n-                            .and_then(|node| node.body_id())\n-                            .into_iter()\n-                            .map(|id| tcx.hir().body(id).params)\n-                            .flatten();\n-\n-                        for param in params {\n-                            spans.push_span_label(param.span, String::new());\n-                        }\n-\n-                        let def_kind = tcx.def_kind(def_id);\n-                        err.span_note(spans, &format!(\"{} defined here\", def_kind.descr(def_id)));\n-                    }\n+                    label_fn_like(tcx, &mut err, fn_def_id);\n                     err.emit();\n                     break 'errors;\n                 }\n@@ -678,12 +633,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 match error {\n                     Error::Invalid(input_idx, compatibility) => {\n                         let expected_ty = expected_input_tys[input_idx];\n+                        let provided_ty = final_arg_types\n+                            .get(input_idx)\n+                            .and_then(|x| x.as_ref())\n+                            .map(|ty| ty.0)\n+                            .unwrap_or(tcx.ty_error());\n+                        let expected_ty = self.resolve_vars_if_possible(expected_ty);\n+                        let provided_ty = self.resolve_vars_if_possible(provided_ty);\n                         if let Compatibility::Incompatible(error) = &compatibility {\n-                            let provided_ty = final_arg_types\n-                                .get(input_idx)\n-                                .and_then(|x| x.as_ref())\n-                                .map(|ty| ty.0)\n-                                .unwrap_or(tcx.ty_error());\n                             let cause = &self.misc(\n                                 provided_args.get(input_idx).map(|i| i.span).unwrap_or(call_span),\n                             );\n@@ -948,24 +905,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n \n             // Call out where the function is defined\n-            if let Some(def_id) = fn_def_id && let Some(def_span) = tcx.def_ident_span(def_id) {\n-                let mut spans: MultiSpan = def_span.into();\n-\n-                let params = tcx\n-                    .hir()\n-                    .get_if_local(def_id)\n-                    .and_then(|node| node.body_id())\n-                    .into_iter()\n-                    .flat_map(|id| tcx.hir().body(id).params)\n-                    ;\n-\n-                for param in params {\n-                    spans.push_span_label(param.span, String::new());\n-                }\n-\n-                let def_kind = tcx.def_kind(def_id);\n-                err.span_note(spans, &format!(\"{} defined here\", def_kind.descr(def_id)));\n-            }\n+            label_fn_like(tcx, &mut err, fn_def_id);\n \n             // And add a suggestion block for all of the parameters\n             let suggestion_text = match suggestion_text {\n@@ -1790,3 +1730,47 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n }\n+\n+fn label_fn_like<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    err: &mut rustc_errors::DiagnosticBuilder<'tcx, rustc_errors::ErrorGuaranteed>,\n+    def_id: Option<DefId>,\n+) {\n+    let Some(def_id) = def_id else {\n+        return;\n+    };\n+\n+    if let Some(def_span) = tcx.def_ident_span(def_id) {\n+        let mut spans: MultiSpan = def_span.into();\n+\n+        let params = tcx\n+            .hir()\n+            .get_if_local(def_id)\n+            .and_then(|node| node.body_id())\n+            .into_iter()\n+            .map(|id| tcx.hir().body(id).params)\n+            .flatten();\n+\n+        for param in params {\n+            spans.push_span_label(param.span, String::new());\n+        }\n+\n+        let def_kind = tcx.def_kind(def_id);\n+        err.span_note(spans, &format!(\"{} defined here\", def_kind.descr(def_id)));\n+    } else {\n+        match tcx.hir().get_if_local(def_id) {\n+            Some(hir::Node::Expr(hir::Expr {\n+                kind: hir::ExprKind::Closure(_, _, _, span, ..),\n+                ..\n+            })) => {\n+                let spans: MultiSpan = (*span).into();\n+\n+                // Note: We don't point to param spans here because they overlap\n+                // with the closure span itself\n+\n+                err.span_note(spans, \"closure defined here\");\n+            }\n+            _ => {}\n+        }\n+    }\n+}"}, {"sha": "3e96322d67efb815cbf227a383db2b0e0d4afd23", "filename": "src/test/ui/argument-suggestions/basic.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/030c886c29ffbfbb9f9c6495651cb4bee0fc93fe/src%2Ftest%2Fui%2Fargument-suggestions%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/030c886c29ffbfbb9f9c6495651cb4bee0fc93fe/src%2Ftest%2Fui%2Fargument-suggestions%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fargument-suggestions%2Fbasic.rs?ref=030c886c29ffbfbb9f9c6495651cb4bee0fc93fe", "patch": "@@ -22,4 +22,7 @@ fn main() {\n     missing(); //~ ERROR this function takes\n     swapped(\"\", 1); //~ ERROR arguments to this function are incorrect\n     permuted(Y {}, Z {}, X {}); //~ ERROR arguments to this function are incorrect\n+\n+    let closure = |x| x;\n+    closure(); //~ ERROR this function takes\n }"}, {"sha": "8300a22c5483dcdbf630d0f7eb30d80bb5af3655", "filename": "src/test/ui/argument-suggestions/basic.stderr", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/030c886c29ffbfbb9f9c6495651cb4bee0fc93fe/src%2Ftest%2Fui%2Fargument-suggestions%2Fbasic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/030c886c29ffbfbb9f9c6495651cb4bee0fc93fe/src%2Ftest%2Fui%2Fargument-suggestions%2Fbasic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fargument-suggestions%2Fbasic.stderr?ref=030c886c29ffbfbb9f9c6495651cb4bee0fc93fe", "patch": "@@ -81,7 +81,23 @@ help: reorder these arguments\n LL |     permuted(X {}, Y {}, Z {});\n    |     ~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n-error: aborting due to 5 previous errors\n+error[E0057]: this function takes 1 argument but 0 arguments were supplied\n+  --> $DIR/basic.rs:27:5\n+   |\n+LL |     closure();\n+   |     ^^^^^^^-- an argument is missing\n+   |\n+note: closure defined here\n+  --> $DIR/basic.rs:26:19\n+   |\n+LL |     let closure = |x| x;\n+   |                   ^^^\n+help: provide the argument\n+   |\n+LL |     closure({_});\n+   |     ~~~~~~~~~~~~\n+\n+error: aborting due to 6 previous errors\n \n-Some errors have detailed explanations: E0061, E0308.\n-For more information about an error, try `rustc --explain E0061`.\n+Some errors have detailed explanations: E0057, E0061, E0308.\n+For more information about an error, try `rustc --explain E0057`."}, {"sha": "a67cf99283cfaaa1d6a5b3b67cc799643cf35e23", "filename": "src/test/ui/associated-types/associated-types-issue-20346.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/030c886c29ffbfbb9f9c6495651cb4bee0fc93fe/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-issue-20346.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/030c886c29ffbfbb9f9c6495651cb4bee0fc93fe/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-issue-20346.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-issue-20346.stderr?ref=030c886c29ffbfbb9f9c6495651cb4bee0fc93fe", "patch": "@@ -12,8 +12,8 @@ note: expected this to be `Option<T>`\n    |\n LL |     type Item = T;\n    |                 ^\n-   = note: expected enum `Option<T>`\n-              found type `T`\n+   = note:        expected enum `Option<T>`\n+           found type parameter `T`\n note: required by a bound in `is_iterator_of`\n   --> $DIR/associated-types-issue-20346.rs:15:34\n    |"}, {"sha": "65533f93c94135e27367e78b8dcfe4e031c0e197", "filename": "src/test/ui/associated-types/higher-ranked-projection.bad.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/030c886c29ffbfbb9f9c6495651cb4bee0fc93fe/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/030c886c29ffbfbb9f9c6495651cb4bee0fc93fe/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.bad.stderr?ref=030c886c29ffbfbb9f9c6495651cb4bee0fc93fe", "patch": "@@ -5,7 +5,7 @@ LL |     foo(());\n    |     ^^^ lifetime mismatch\n    |\n    = note: expected reference `&'a ()`\n-                   found type `&()`\n+              found reference `&()`\n note: the lifetime requirement is introduced here\n   --> $DIR/higher-ranked-projection.rs:15:33\n    |"}, {"sha": "3be8c552063e7893e3e217a8d6cc470903fda009", "filename": "src/test/ui/async-await/generator-desc.stderr", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/030c886c29ffbfbb9f9c6495651cb4bee0fc93fe/src%2Ftest%2Fui%2Fasync-await%2Fgenerator-desc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/030c886c29ffbfbb9f9c6495651cb4bee0fc93fe/src%2Ftest%2Fui%2Fasync-await%2Fgenerator-desc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fgenerator-desc.stderr?ref=030c886c29ffbfbb9f9c6495651cb4bee0fc93fe", "patch": "@@ -24,13 +24,18 @@ LL |     fun(one(), two());\n    |     |\n    |     arguments to this function are incorrect\n    |\n+note: while checking the return type of the `async fn`\n+  --> $DIR/generator-desc.rs:5:16\n+   |\n+LL | async fn one() {}\n+   |                ^ checked the `Output` of this `async fn`, expected opaque type\n note: while checking the return type of the `async fn`\n   --> $DIR/generator-desc.rs:6:16\n    |\n LL | async fn two() {}\n    |                ^ checked the `Output` of this `async fn`, found opaque type\n-   = note:     expected type `impl Future<Output = ()>` (opaque type at <$DIR/generator-desc.rs:5:16>)\n-           found opaque type `impl Future<Output = ()>` (opaque type at <$DIR/generator-desc.rs:6:16>)\n+   = note: expected opaque type `impl Future<Output = ()>` (opaque type at <$DIR/generator-desc.rs:5:16>)\n+              found opaque type `impl Future<Output = ()>` (opaque type at <$DIR/generator-desc.rs:6:16>)\n    = help: consider `await`ing on both `Future`s\n    = note: distinct uses of `impl Trait` result in different opaque types\n note: function defined here\n@@ -43,26 +48,26 @@ error[E0308]: mismatched types\n   --> $DIR/generator-desc.rs:14:26\n    |\n LL |     fun((async || {})(), (async || {})());\n-   |     ---                  ^^^^^^^^^^^^^^^ expected `async` closure body, found a different `async` closure body\n-   |     |\n+   |     ---           --     ^^^^^^^^^^^^^^^ expected `async` closure body, found a different `async` closure body\n+   |     |             |\n+   |     |             the expected `async` closure body\n    |     arguments to this function are incorrect\n    |\n   ::: $SRC_DIR/core/src/future/mod.rs:LL:COL\n    |\n LL | pub const fn from_generator<T>(gen: T) -> impl Future<Output = T::Return>\n-   |                                           ------------------------------- the found opaque type\n+   |                                           -------------------------------\n+   |                                           |\n+   |                                           the expected opaque type\n+   |                                           the found opaque type\n    |\n-   = note:     expected type `impl Future<Output = ()>` (`async` closure body)\n-           found opaque type `impl Future<Output = ()>` (`async` closure body)\n+   = note: expected opaque type `impl Future<Output = ()>` (`async` closure body)\n+              found opaque type `impl Future<Output = ()>` (`async` closure body)\n note: function defined here\n   --> $DIR/generator-desc.rs:8:4\n    |\n LL | fn fun<F: Future<Output = ()>>(f1: F, f2: F) {}\n    |    ^^^                         -----  -----\n-help: consider `await`ing on the `Future`\n-   |\n-LL |     fun((async || {})(), (async || {})().await);\n-   |                                         ++++++\n \n error: aborting due to 3 previous errors\n "}, {"sha": "1196601ace09087eb0433a807758f949eb2657d7", "filename": "src/test/ui/async-await/suggest-missing-await.stderr", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/030c886c29ffbfbb9f9c6495651cb4bee0fc93fe/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/030c886c29ffbfbb9f9c6495651cb4bee0fc93fe/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr?ref=030c886c29ffbfbb9f9c6495651cb4bee0fc93fe", "patch": "@@ -60,8 +60,13 @@ LL | |\n LL | |     };\n    | |_____- `if` and `else` have incompatible types\n    |\n-   = note:   expected type `impl Future<Output = ()>`\n-           found unit type `()`\n+note: while checking the return type of the `async fn`\n+  --> $DIR/suggest-missing-await.rs:18:18\n+   |\n+LL | async fn dummy() {}\n+   |                  ^ checked the `Output` of this `async fn`, expected opaque type\n+   = note: expected opaque type `impl Future<Output = ()>`\n+                found unit type `()`\n help: consider `await`ing on the `Future`\n    |\n LL |         dummy().await"}, {"sha": "eb934e7b72b084a6266998d1617113b2a1d586a8", "filename": "src/test/ui/borrowck/suggest-local-var-imm-and-mut.nll.stderr", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4d1076c9f918297c97300a7ecf769dd7e6780be6/src%2Ftest%2Fui%2Fborrowck%2Fsuggest-local-var-imm-and-mut.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d1076c9f918297c97300a7ecf769dd7e6780be6/src%2Ftest%2Fui%2Fborrowck%2Fsuggest-local-var-imm-and-mut.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fsuggest-local-var-imm-and-mut.nll.stderr?ref=4d1076c9f918297c97300a7ecf769dd7e6780be6", "patch": "@@ -1,22 +0,0 @@\n-error[E0502]: cannot borrow `*self` as mutable because it is also borrowed as immutable\n-  --> $DIR/suggest-local-var-imm-and-mut.rs:12:22\n-   |\n-LL |             self.foo(self.bar());\n-   |             ---------^^^^^^^^^^-\n-   |             |    |   |\n-   |             |    |   mutable borrow occurs here\n-   |             |    immutable borrow later used by call\n-   |             immutable borrow occurs here\n-\n-error[E0502]: cannot borrow `*self` as mutable because it is also borrowed as immutable\n-  --> $DIR/suggest-local-var-imm-and-mut.rs:24:29\n-   |\n-LL |             Self::foo(self, Self::bar(self));\n-   |             --------- ----  ^^^^^^^^^^^^^^^ mutable borrow occurs here\n-   |             |         |\n-   |             |         immutable borrow occurs here\n-   |             immutable borrow later used by call\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0502`."}, {"sha": "e25b33bbcdb06d2713f7d1d48118a686917e03d4", "filename": "src/test/ui/closures/closure_cap_coerce_many_fail.stderr", "status": "modified", "additions": 20, "deletions": 11, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/030c886c29ffbfbb9f9c6495651cb4bee0fc93fe/src%2Ftest%2Fui%2Fclosures%2Fclosure_cap_coerce_many_fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/030c886c29ffbfbb9f9c6495651cb4bee0fc93fe/src%2Ftest%2Fui%2Fclosures%2Fclosure_cap_coerce_many_fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure_cap_coerce_many_fail.stderr?ref=030c886c29ffbfbb9f9c6495651cb4bee0fc93fe", "patch": "@@ -11,24 +11,27 @@ LL | |         _ => unimplemented!(),\n LL | |     };\n    | |_____- `match` arms have incompatible types\n    |\n-   = note: expected type `fn(i32, i32) -> i32 {add}`\n-           found closure `[closure@$DIR/closure_cap_coerce_many_fail.rs:9:16: 9:43]`\n+   = note: expected fn item `fn(i32, i32) -> i32 {add}`\n+              found closure `[closure@$DIR/closure_cap_coerce_many_fail.rs:9:16: 9:43]`\n \n error[E0308]: `match` arms have incompatible types\n   --> $DIR/closure_cap_coerce_many_fail.rs:18:16\n    |\n LL |       let _ = match \"+\" {\n    |  _____________-\n LL | |         \"+\" => |a, b| (a + b) as i32,\n-   | |                --------------------- this is found to be of type `[closure@$DIR/closure_cap_coerce_many_fail.rs:17:16: 17:37]`\n+   | |                ---------------------\n+   | |                |\n+   | |                the expected closure\n+   | |                this is found to be of type `[closure@$DIR/closure_cap_coerce_many_fail.rs:17:16: 17:37]`\n LL | |         \"-\" => |a, b| (a - b + cap) as i32,\n    | |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected closure, found a different closure\n LL | |         _ => unimplemented!(),\n LL | |     };\n    | |_____- `match` arms have incompatible types\n    |\n-   = note: expected type `[closure@$DIR/closure_cap_coerce_many_fail.rs:17:16: 17:37]`\n-           found closure `[closure@$DIR/closure_cap_coerce_many_fail.rs:18:16: 18:43]`\n+   = note: expected closure `[closure@$DIR/closure_cap_coerce_many_fail.rs:17:16: 17:37]`\n+              found closure `[closure@$DIR/closure_cap_coerce_many_fail.rs:18:16: 18:43]`\n    = note: no two closures, even if identical, have the same type\n    = help: consider boxing your closure and/or using it as a trait object\n \n@@ -38,15 +41,18 @@ error[E0308]: `match` arms have incompatible types\n LL |       let _ = match \"+\" {\n    |  _____________-\n LL | |         \"+\" => |a, b| (a + b + cap) as i32,\n-   | |                --------------------------- this is found to be of type `[closure@$DIR/closure_cap_coerce_many_fail.rs:26:16: 26:43]`\n+   | |                ---------------------------\n+   | |                |\n+   | |                the expected closure\n+   | |                this is found to be of type `[closure@$DIR/closure_cap_coerce_many_fail.rs:26:16: 26:43]`\n LL | |         \"-\" => |a, b| (a - b) as i32,\n    | |                ^^^^^^^^^^^^^^^^^^^^^ expected closure, found a different closure\n LL | |         _ => unimplemented!(),\n LL | |     };\n    | |_____- `match` arms have incompatible types\n    |\n-   = note: expected type `[closure@$DIR/closure_cap_coerce_many_fail.rs:26:16: 26:43]`\n-           found closure `[closure@$DIR/closure_cap_coerce_many_fail.rs:27:16: 27:37]`\n+   = note: expected closure `[closure@$DIR/closure_cap_coerce_many_fail.rs:26:16: 26:43]`\n+              found closure `[closure@$DIR/closure_cap_coerce_many_fail.rs:27:16: 27:37]`\n    = note: no two closures, even if identical, have the same type\n    = help: consider boxing your closure and/or using it as a trait object\n \n@@ -56,15 +62,18 @@ error[E0308]: `match` arms have incompatible types\n LL |       let _ = match \"+\" {\n    |  _____________-\n LL | |         \"+\" => |a, b| (a + b + cap) as i32,\n-   | |                --------------------------- this is found to be of type `[closure@$DIR/closure_cap_coerce_many_fail.rs:34:16: 34:43]`\n+   | |                ---------------------------\n+   | |                |\n+   | |                the expected closure\n+   | |                this is found to be of type `[closure@$DIR/closure_cap_coerce_many_fail.rs:34:16: 34:43]`\n LL | |         \"-\" => |a, b| (a - b + cap) as i32,\n    | |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected closure, found a different closure\n LL | |         _ => unimplemented!(),\n LL | |     };\n    | |_____- `match` arms have incompatible types\n    |\n-   = note: expected type `[closure@$DIR/closure_cap_coerce_many_fail.rs:34:16: 34:43]`\n-           found closure `[closure@$DIR/closure_cap_coerce_many_fail.rs:35:16: 35:43]`\n+   = note: expected closure `[closure@$DIR/closure_cap_coerce_many_fail.rs:34:16: 34:43]`\n+              found closure `[closure@$DIR/closure_cap_coerce_many_fail.rs:35:16: 35:43]`\n    = note: no two closures, even if identical, have the same type\n    = help: consider boxing your closure and/or using it as a trait object\n "}, {"sha": "36551e5afc6c65e7f8cb59fb8cf59edabe8e4986", "filename": "src/test/ui/coercion/coerce-reborrow-multi-arg-fail.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/030c886c29ffbfbb9f9c6495651cb4bee0fc93fe/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-reborrow-multi-arg-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/030c886c29ffbfbb9f9c6495651cb4bee0fc93fe/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-reborrow-multi-arg-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-reborrow-multi-arg-fail.stderr?ref=030c886c29ffbfbb9f9c6495651cb4bee0fc93fe", "patch": "@@ -6,8 +6,8 @@ LL |     test(&mut 7, &7);\n    |     |\n    |     arguments to this function are incorrect\n    |\n-   = note:   expected type `&mut {integer}`\n-           found reference `&{integer}`\n+   = note: expected mutable reference `&mut {integer}`\n+                      found reference `&{integer}`\n note: function defined here\n   --> $DIR/coerce-reborrow-multi-arg-fail.rs:1:4\n    |"}, {"sha": "e9854f0b9b53b2ece8b1a347a94159de2217d1f9", "filename": "src/test/ui/const-generics/const-argument-cross-crate-mismatch.min.stderr", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/4d1076c9f918297c97300a7ecf769dd7e6780be6/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-cross-crate-mismatch.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d1076c9f918297c97300a7ecf769dd7e6780be6/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-cross-crate-mismatch.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-cross-crate-mismatch.min.stderr?ref=4d1076c9f918297c97300a7ecf769dd7e6780be6", "patch": "@@ -1,29 +0,0 @@\n-error[E0308]: arguments to this function are incorrect\n-  --> $DIR/const-argument-cross-crate-mismatch.rs:7:41\n-   |\n-LL |     let _ = const_generic_lib::function(const_generic_lib::Struct([0u8, 1u8]));\n-   |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^----------^\n-   |                                                                   |\n-   |                                                                   expected `[u8; 3]`, found `[u8; 2]`\n-   |\n-help: provide an argument of the correct type\n-   |\n-LL |     let _ = const_generic_lib::function(({[u8; 3]}));\n-   |                                         ^^^^^^^^^^^\n-\n-error[E0308]: arguments to this function are incorrect\n-  --> $DIR/const-argument-cross-crate-mismatch.rs:9:39\n-   |\n-LL |     let _: const_generic_lib::Alias = const_generic_lib::Struct([0u8, 1u8, 2u8]);\n-   |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^---------------^\n-   |                                                                 |\n-   |                                                                 expected `[u8; 2]`, found `[u8; 3]`\n-   |\n-help: provide an argument of the correct type\n-   |\n-LL |     let _: const_generic_lib::Alias = ({[u8; 2]});\n-   |                                       ^^^^^^^^^^^\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0308`."}, {"sha": "950e0223e2201161bd8c5e459684fe53899d4840", "filename": "src/test/ui/destructuring-assignment/default-match-bindings-forbidden.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/030c886c29ffbfbb9f9c6495651cb4bee0fc93fe/src%2Ftest%2Fui%2Fdestructuring-assignment%2Fdefault-match-bindings-forbidden.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/030c886c29ffbfbb9f9c6495651cb4bee0fc93fe/src%2Ftest%2Fui%2Fdestructuring-assignment%2Fdefault-match-bindings-forbidden.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdestructuring-assignment%2Fdefault-match-bindings-forbidden.stderr?ref=030c886c29ffbfbb9f9c6495651cb4bee0fc93fe", "patch": "@@ -6,8 +6,8 @@ LL |     (x, y) = &(1, 2);\n    |     |\n    |     expected reference, found tuple\n    |\n-   = note: expected type `&({integer}, {integer})`\n-             found tuple `(_, _)`\n+   = note: expected reference `&({integer}, {integer})`\n+                  found tuple `(_, _)`\n \n error: aborting due to previous error\n "}, {"sha": "a3004cbbe1067cce9022f101dcf5e088c1d6365a", "filename": "src/test/ui/destructuring-assignment/tuple_destructure_fail.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/030c886c29ffbfbb9f9c6495651cb4bee0fc93fe/src%2Ftest%2Fui%2Fdestructuring-assignment%2Ftuple_destructure_fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/030c886c29ffbfbb9f9c6495651cb4bee0fc93fe/src%2Ftest%2Fui%2Fdestructuring-assignment%2Ftuple_destructure_fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdestructuring-assignment%2Ftuple_destructure_fail.stderr?ref=030c886c29ffbfbb9f9c6495651cb4bee0fc93fe", "patch": "@@ -14,8 +14,8 @@ LL |     (a, a, b) = (1, 2);\n    |     |\n    |     expected a tuple with 2 elements, found one with 3 elements\n    |\n-   = note: expected type `({integer}, {integer})`\n-             found tuple `(_, _, _)`\n+   = note: expected tuple `({integer}, {integer})`\n+              found tuple `(_, _, _)`\n \n error[E0070]: invalid left-hand side of assignment\n   --> $DIR/tuple_destructure_fail.rs:7:13\n@@ -33,8 +33,8 @@ LL |     (_,) = (1, 2);\n    |     |\n    |     expected a tuple with 2 elements, found one with 1 element\n    |\n-   = note: expected type `({integer}, {integer})`\n-             found tuple `(_,)`\n+   = note: expected tuple `({integer}, {integer})`\n+              found tuple `(_,)`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "4b4d30a8387fe762134ade788d221ed8bfa3b00d", "filename": "src/test/ui/error-codes/E0057.stderr", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/030c886c29ffbfbb9f9c6495651cb4bee0fc93fe/src%2Ftest%2Fui%2Ferror-codes%2FE0057.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/030c886c29ffbfbb9f9c6495651cb4bee0fc93fe/src%2Ftest%2Fui%2Ferror-codes%2FE0057.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0057.stderr?ref=030c886c29ffbfbb9f9c6495651cb4bee0fc93fe", "patch": "@@ -4,6 +4,11 @@ error[E0057]: this function takes 1 argument but 0 arguments were supplied\n LL |     let a = f();\n    |             ^-- an argument is missing\n    |\n+note: closure defined here\n+  --> $DIR/E0057.rs:2:13\n+   |\n+LL |     let f = |x| x * 3;\n+   |             ^^^\n help: provide the argument\n    |\n LL |     let a = f({_});\n@@ -15,6 +20,11 @@ error[E0057]: this function takes 1 argument but 2 arguments were supplied\n LL |     let c = f(2, 3);\n    |             ^    - argument unexpected\n    |\n+note: closure defined here\n+  --> $DIR/E0057.rs:2:13\n+   |\n+LL |     let f = |x| x * 3;\n+   |             ^^^\n help: remove the extra argument\n    |\n LL |     let c = f(2);"}, {"sha": "94cc89754db5fc615509c571e3794e7aab64672c", "filename": "src/test/ui/error-codes/E0502.nll.stderr", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4d1076c9f918297c97300a7ecf769dd7e6780be6/src%2Ftest%2Fui%2Ferror-codes%2FE0502.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d1076c9f918297c97300a7ecf769dd7e6780be6/src%2Ftest%2Fui%2Ferror-codes%2FE0502.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0502.nll.stderr?ref=4d1076c9f918297c97300a7ecf769dd7e6780be6", "patch": "@@ -1,13 +0,0 @@\n-error[E0502]: cannot borrow `*a` as mutable because it is also borrowed as immutable\n-  --> $DIR/E0502.rs:4:5\n-   |\n-LL |     let ref y = a;\n-   |         ----- immutable borrow occurs here\n-LL |     bar(a);\n-   |     ^^^^^^ mutable borrow occurs here\n-LL |     y.use_ref();\n-   |     ----------- immutable borrow later used here\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0502`."}, {"sha": "9c5825fff8552456c33f6003babdf82fbeedef92", "filename": "src/test/ui/estr-subtyping.rs", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4d1076c9f918297c97300a7ecf769dd7e6780be6/src%2Ftest%2Fui%2Festr-subtyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d1076c9f918297c97300a7ecf769dd7e6780be6/src%2Ftest%2Fui%2Festr-subtyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Festr-subtyping.rs?ref=4d1076c9f918297c97300a7ecf769dd7e6780be6", "patch": "@@ -1,15 +0,0 @@\n-fn wants_uniq(x: String) { }\n-fn wants_slice(x: &str) { }\n-\n-fn has_uniq(x: String) {\n-   wants_uniq(x);\n-   wants_slice(&*x);\n-}\n-\n-fn has_slice(x: &str) {\n-   wants_uniq(x); //~ ERROR mismatched types\n-   wants_slice(x);\n-}\n-\n-fn main() {\n-}"}, {"sha": "adebb7d1e63ab896467f620dda03cfe8c4af1de7", "filename": "src/test/ui/estr-subtyping.stderr", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4d1076c9f918297c97300a7ecf769dd7e6780be6/src%2Ftest%2Fui%2Festr-subtyping.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d1076c9f918297c97300a7ecf769dd7e6780be6/src%2Ftest%2Fui%2Festr-subtyping.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Festr-subtyping.stderr?ref=4d1076c9f918297c97300a7ecf769dd7e6780be6", "patch": "@@ -1,18 +0,0 @@\n-error[E0308]: mismatched types\n-  --> $DIR/estr-subtyping.rs:10:15\n-   |\n-LL |    wants_uniq(x);\n-   |    ---------- ^- help: try using a conversion method: `.to_string()`\n-   |    |          |\n-   |    |          expected struct `String`, found `&str`\n-   |    arguments to this function are incorrect\n-   |\n-note: function defined here\n-  --> $DIR/estr-subtyping.rs:1:4\n-   |\n-LL | fn wants_uniq(x: String) { }\n-   |    ^^^^^^^^^^ ---------\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0308`."}, {"sha": "1831e6cbf10507ecb102cb432c32feb1c856da16", "filename": "src/test/ui/fn/fn-item-type.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/030c886c29ffbfbb9f9c6495651cb4bee0fc93fe/src%2Ftest%2Fui%2Ffn%2Ffn-item-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/030c886c29ffbfbb9f9c6495651cb4bee0fc93fe/src%2Ftest%2Fui%2Ffn%2Ffn-item-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Ffn-item-type.rs?ref=030c886c29ffbfbb9f9c6495651cb4bee0fc93fe", "patch": "@@ -12,7 +12,7 @@ impl<T> Foo for T { /* `foo` is still default here */ }\n fn main() {\n     eq(foo::<u8>, bar::<u8>);\n     //~^ ERROR mismatched types\n-    //~| expected type `fn(_) -> _ {foo::<u8>}`\n+    //~| expected fn item `fn(_) -> _ {foo::<u8>}`\n     //~| found fn item `fn(_) -> _ {bar::<u8>}`\n     //~| expected fn item, found a different fn item\n     //~| different `fn` items always have unique types, even if their signatures are the same\n@@ -28,7 +28,6 @@ fn main() {\n \n     eq(bar::<String>, bar::<Vec<u8>>);\n     //~^ ERROR mismatched types\n-    //~| expected type `fn(_) -> _ {bar::<String>}`\n     //~| found fn item `fn(_) -> _ {bar::<Vec<u8>>}`\n     //~| expected struct `String`, found struct `Vec`\n     //~| different `fn` items always have unique types, even if their signatures are the same\n@@ -45,7 +44,6 @@ fn main() {\n \n     eq(foo::<u8>, bar::<u8> as fn(isize) -> isize);\n     //~^ ERROR mismatched types\n-    //~| expected type `fn(_) -> _ {foo::<u8>}`\n     //~| found fn pointer `fn(_) -> _`\n     //~| expected fn item, found fn pointer\n     //~| change the expected type to be function pointer"}, {"sha": "ecc6485d6d2b5c1d5375e33ac22d32cd5eede579", "filename": "src/test/ui/fn/fn-item-type.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/030c886c29ffbfbb9f9c6495651cb4bee0fc93fe/src%2Ftest%2Fui%2Ffn%2Ffn-item-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/030c886c29ffbfbb9f9c6495651cb4bee0fc93fe/src%2Ftest%2Fui%2Ffn%2Ffn-item-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Ffn-item-type.stderr?ref=030c886c29ffbfbb9f9c6495651cb4bee0fc93fe", "patch": "@@ -6,8 +6,8 @@ LL |     eq(foo::<u8>, bar::<u8>);\n    |     |\n    |     arguments to this function are incorrect\n    |\n-   = note: expected type `fn(_) -> _ {foo::<u8>}`\n-           found fn item `fn(_) -> _ {bar::<u8>}`\n+   = note: expected fn item `fn(_) -> _ {foo::<u8>}`\n+              found fn item `fn(_) -> _ {bar::<u8>}`\n    = note: different `fn` items always have unique types, even if their signatures are the same\n    = help: change the expected type to be function pointer `fn(isize) -> isize`\n    = help: if the expected type is due to type inference, cast the expected `fn` to a function pointer: `foo::<u8> as fn(isize) -> isize`\n@@ -25,8 +25,8 @@ LL |     eq(foo::<u8>, foo::<i8>);\n    |     |\n    |     arguments to this function are incorrect\n    |\n-   = note: expected type `fn(_) -> _ {foo::<u8>}`\n-           found fn item `fn(_) -> _ {foo::<i8>}`\n+   = note: expected fn item `fn(_) -> _ {foo::<u8>}`\n+              found fn item `fn(_) -> _ {foo::<i8>}`\n    = note: different `fn` items always have unique types, even if their signatures are the same\n    = help: change the expected type to be function pointer `fn(isize) -> isize`\n    = help: if the expected type is due to type inference, cast the expected `fn` to a function pointer: `foo::<u8> as fn(isize) -> isize`\n@@ -44,8 +44,8 @@ LL |     eq(bar::<String>, bar::<Vec<u8>>);\n    |     |\n    |     arguments to this function are incorrect\n    |\n-   = note: expected type `fn(_) -> _ {bar::<String>}`\n-           found fn item `fn(_) -> _ {bar::<Vec<u8>>}`\n+   = note: expected fn item `fn(_) -> _ {bar::<String>}`\n+              found fn item `fn(_) -> _ {bar::<Vec<u8>>}`\n    = note: different `fn` items always have unique types, even if their signatures are the same\n    = help: change the expected type to be function pointer `fn(isize) -> isize`\n    = help: if the expected type is due to type inference, cast the expected `fn` to a function pointer: `bar::<String> as fn(isize) -> isize`\n@@ -56,15 +56,15 @@ LL | fn eq<T>(x: T, y: T) { }\n    |    ^^    ----  ----\n \n error[E0308]: mismatched types\n-  --> $DIR/fn-item-type.rs:39:26\n+  --> $DIR/fn-item-type.rs:38:26\n    |\n LL |     eq(<u8 as Foo>::foo, <u16 as Foo>::foo);\n    |     --                   ^^^^^^^^^^^^^^^^^ expected `u8`, found `u16`\n    |     |\n    |     arguments to this function are incorrect\n    |\n-   = note: expected type `fn() {<u8 as Foo>::foo}`\n-           found fn item `fn() {<u16 as Foo>::foo}`\n+   = note: expected fn item `fn() {<u8 as Foo>::foo}`\n+              found fn item `fn() {<u16 as Foo>::foo}`\n    = note: different `fn` items always have unique types, even if their signatures are the same\n    = help: change the expected type to be function pointer `fn()`\n    = help: if the expected type is due to type inference, cast the expected `fn` to a function pointer: `<u8 as Foo>::foo as fn()`\n@@ -75,14 +75,14 @@ LL | fn eq<T>(x: T, y: T) { }\n    |    ^^    ----  ----\n \n error[E0308]: mismatched types\n-  --> $DIR/fn-item-type.rs:46:19\n+  --> $DIR/fn-item-type.rs:45:19\n    |\n LL |     eq(foo::<u8>, bar::<u8> as fn(isize) -> isize);\n    |     --            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected fn item, found fn pointer\n    |     |\n    |     arguments to this function are incorrect\n    |\n-   = note:    expected type `fn(_) -> _ {foo::<u8>}`\n+   = note: expected fn item `fn(_) -> _ {foo::<u8>}`\n            found fn pointer `fn(_) -> _`\n    = help: change the expected type to be function pointer `fn(isize) -> isize`\n    = help: if the expected type is due to type inference, cast the expected `fn` to a function pointer: `foo::<u8> as fn(isize) -> isize`"}, {"sha": "d78a5929a896d8c2f3621a60c32ce283911078a8", "filename": "src/test/ui/generator/type-mismatch-signature-deduction.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/030c886c29ffbfbb9f9c6495651cb4bee0fc93fe/src%2Ftest%2Fui%2Fgenerator%2Ftype-mismatch-signature-deduction.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/030c886c29ffbfbb9f9c6495651cb4bee0fc93fe/src%2Ftest%2Fui%2Fgenerator%2Ftype-mismatch-signature-deduction.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Ftype-mismatch-signature-deduction.stderr?ref=030c886c29ffbfbb9f9c6495651cb4bee0fc93fe", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |         5\n    |         ^ expected enum `Result`, found integer\n    |\n-   = note: expected type `Result<{integer}, _>`\n+   = note: expected enum `Result<{integer}, _>`\n               found type `{integer}`\n note: return type inferred to be `Result<{integer}, _>` here\n   --> $DIR/type-mismatch-signature-deduction.rs:9:20"}, {"sha": "0a24855a6a79c96e648876a955934215533451bb", "filename": "src/test/ui/indexing-requires-a-uint.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/030c886c29ffbfbb9f9c6495651cb4bee0fc93fe/src%2Ftest%2Fui%2Findexing-requires-a-uint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/030c886c29ffbfbb9f9c6495651cb4bee0fc93fe/src%2Ftest%2Fui%2Findexing-requires-a-uint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Findexing-requires-a-uint.stderr?ref=030c886c29ffbfbb9f9c6495651cb4bee0fc93fe", "patch": "@@ -21,6 +21,10 @@ note: function defined here\n    |\n LL |     fn bar<T>(_: T) {}\n    |        ^^^    ----\n+help: you can convert a `usize` to an `isize` and panic if the converted value doesn't fit\n+   |\n+LL |     bar::<isize>(i.try_into().unwrap());  // i should not be re-coerced back to an isize\n+   |                   ++++++++++++++++++++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "fef63680a86767e913c91cf8b787c018067eb193", "filename": "src/test/ui/issues/issue-13359.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/030c886c29ffbfbb9f9c6495651cb4bee0fc93fe/src%2Ftest%2Fui%2Fissues%2Fissue-13359.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/030c886c29ffbfbb9f9c6495651cb4bee0fc93fe/src%2Ftest%2Fui%2Fissues%2Fissue-13359.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13359.stderr?ref=030c886c29ffbfbb9f9c6495651cb4bee0fc93fe", "patch": "@@ -11,6 +11,10 @@ note: function defined here\n    |\n LL | fn foo(_s: i16) { }\n    |    ^^^ -------\n+help: you can convert an `isize` to an `i16` and panic if the converted value doesn't fit\n+   |\n+LL |     foo((1*(1 as isize)).try_into().unwrap());\n+   |         +              +++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/issue-13359.rs:10:9\n@@ -25,6 +29,10 @@ note: function defined here\n    |\n LL | fn bar(_s: u32) { }\n    |    ^^^ -------\n+help: you can convert a `usize` to a `u32` and panic if the converted value doesn't fit\n+   |\n+LL |     bar((1*(1 as usize)).try_into().unwrap());\n+   |         +              +++++++++++++++++++++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "b961b16b6f6efefd16d5d1c3cec50609a1684497", "filename": "src/test/ui/let-else/let-else-non-diverging.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/030c886c29ffbfbb9f9c6495651cb4bee0fc93fe/src%2Ftest%2Fui%2Flet-else%2Flet-else-non-diverging.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/030c886c29ffbfbb9f9c6495651cb4bee0fc93fe/src%2Ftest%2Fui%2Flet-else%2Flet-else-non-diverging.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-non-diverging.stderr?ref=030c886c29ffbfbb9f9c6495651cb4bee0fc93fe", "patch": "@@ -5,7 +5,7 @@ LL |     let Some(x) = Some(1) else { Some(2) };\n    |                                ^^^^^^^^^^^ expected `!`, found enum `Option`\n    |\n    = note: expected type `!`\n-              found type `Option<{integer}>`\n+              found enum `Option<{integer}>`\n    = help: try adding a diverging expression, such as `return` or `panic!(..)`\n    = help: ...or use `match` instead of `let...else`\n \n@@ -20,8 +20,8 @@ LL | |         }\n LL | |     };\n    | |_____^ expected `!`, found `()`\n    |\n-   = note: expected type `!`\n-              found type `()`\n+   = note:   expected type `!`\n+           found unit type `()`\n    = help: try adding a diverging expression, such as `return` or `panic!(..)`\n    = help: ...or use `match` instead of `let...else`\n \n@@ -35,7 +35,7 @@ LL | |     };\n    | |_____^ expected `!`, found enum `Option`\n    |\n    = note: expected type `!`\n-              found type `Option<{integer}>`\n+              found enum `Option<{integer}>`\n    = help: try adding a diverging expression, such as `return` or `panic!(..)`\n    = help: ...or use `match` instead of `let...else`\n "}, {"sha": "ae10a00671e61e3ce921204abacb22c701adb28f", "filename": "src/test/ui/mismatched_types/issue-26480.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/030c886c29ffbfbb9f9c6495651cb4bee0fc93fe/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/030c886c29ffbfbb9f9c6495651cb4bee0fc93fe/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480.stderr?ref=030c886c29ffbfbb9f9c6495651cb4bee0fc93fe", "patch": "@@ -15,6 +15,10 @@ note: function defined here\n LL |     fn write(fildes: i32, buf: *const i8, nbyte: u64) -> i64;\n    |        ^^^^^\n    = note: this error originates in the macro `write` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: you can convert a `usize` to a `u64` and panic if the converted value doesn't fit\n+   |\n+LL |                   ($arr.len() * size_of($arr[0])).try_into().unwrap());\n+   |                   +                             +++++++++++++++++++++\n \n error[E0605]: non-primitive cast: `{integer}` as `()`\n   --> $DIR/issue-26480.rs:22:19"}, {"sha": "368782c1e0d01c43ce3e4a2d27dc7d134580add8", "filename": "src/test/ui/or-patterns/already-bound-name.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/030c886c29ffbfbb9f9c6495651cb4bee0fc93fe/src%2Ftest%2Fui%2For-patterns%2Falready-bound-name.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/030c886c29ffbfbb9f9c6495651cb4bee0fc93fe/src%2Ftest%2Fui%2For-patterns%2Falready-bound-name.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Falready-bound-name.stderr?ref=030c886c29ffbfbb9f9c6495651cb4bee0fc93fe", "patch": "@@ -92,7 +92,7 @@ LL |     let (B(A(a, _) | B(a)) | A(a, A(a, _) | B(a))) = B(B(1));\n    |              first introduced with type `{integer}` here\n    |\n    = note: expected type `{integer}`\n-              found type `E<{integer}>`\n+              found enum `E<{integer}>`\n    = note: a binding must have the same type in all alternatives\n \n error: aborting due to 15 previous errors"}, {"sha": "f6367ef8234058bc23deae3ea0bbc1bed3cfcd5a", "filename": "src/test/ui/or-patterns/inconsistent-modes.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/030c886c29ffbfbb9f9c6495651cb4bee0fc93fe/src%2Ftest%2Fui%2For-patterns%2Finconsistent-modes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/030c886c29ffbfbb9f9c6495651cb4bee0fc93fe/src%2Ftest%2Fui%2For-patterns%2Finconsistent-modes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Finconsistent-modes.stderr?ref=030c886c29ffbfbb9f9c6495651cb4bee0fc93fe", "patch": "@@ -57,8 +57,8 @@ LL |     let (Ok(ref a) | Err(ref mut a)): Result<&u8, &mut u8> = Ok(&0);\n    |             |            types differ in mutability\n    |             first introduced with type `&&u8` here\n    |\n-   = note: expected type `&&u8`\n-              found type `&mut &mut u8`\n+   = note:      expected reference `&&u8`\n+           found mutable reference `&mut &mut u8`\n    = note: a binding must have the same type in all alternatives\n \n error[E0308]: mismatched types\n@@ -70,8 +70,8 @@ LL |     let (Ok((ref a, b)) | Err((ref mut a, ref b))) = Ok((0, &0));\n    |              |                 types differ in mutability\n    |              first introduced with type `&{integer}` here\n    |\n-   = note: expected type `&{integer}`\n-              found type `&mut _`\n+   = note:      expected reference `&{integer}`\n+           found mutable reference `&mut _`\n    = note: a binding must have the same type in all alternatives\n \n error: aborting due to 9 previous errors"}, {"sha": "d0979b23f60cd4955c96218995b3678b198462ab", "filename": "src/test/ui/parser/recover-range-pats.stderr", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/030c886c29ffbfbb9f9c6495651cb4bee0fc93fe/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/030c886c29ffbfbb9f9c6495651cb4bee0fc93fe/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.stderr?ref=030c886c29ffbfbb9f9c6495651cb4bee0fc93fe", "patch": "@@ -316,6 +316,9 @@ LL |     if let X.. .0 = 0 {}\n    |            |   |\n    |            |   expected integer, found floating-point number\n    |            this is of type `u8`\n+   |\n+   = note: expected type `u8`\n+              found type `{float}`\n \n error[E0029]: only `char` and numeric types are allowed in range patterns\n   --> $DIR/recover-range-pats.rs:33:12\n@@ -350,6 +353,9 @@ LL |     if let X..=.0 = 0 {}\n    |            |   |\n    |            |   expected integer, found floating-point number\n    |            this is of type `u8`\n+   |\n+   = note: expected type `u8`\n+              found type `{float}`\n \n error[E0029]: only `char` and numeric types are allowed in range patterns\n   --> $DIR/recover-range-pats.rs:54:12\n@@ -384,6 +390,9 @@ LL |     if let X... .0 = 0 {}\n    |            |    |\n    |            |    expected integer, found floating-point number\n    |            this is of type `u8`\n+   |\n+   = note: expected type `u8`\n+              found type `{float}`\n \n error[E0029]: only `char` and numeric types are allowed in range patterns\n   --> $DIR/recover-range-pats.rs:73:12"}, {"sha": "70a64446f6a7d8e522957223cd28e99b47a77a81", "filename": "src/test/ui/reify-intrinsic.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/030c886c29ffbfbb9f9c6495651cb4bee0fc93fe/src%2Ftest%2Fui%2Freify-intrinsic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/030c886c29ffbfbb9f9c6495651cb4bee0fc93fe/src%2Ftest%2Fui%2Freify-intrinsic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freify-intrinsic.stderr?ref=030c886c29ffbfbb9f9c6495651cb4bee0fc93fe", "patch": "@@ -25,8 +25,8 @@ error[E0308]: cannot coerce intrinsics to function pointers\n LL |         std::intrinsics::unlikely,\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^ cannot coerce intrinsics to function pointers\n    |\n-   = note: expected type `extern \"rust-intrinsic\" fn(_) -> _ {likely}`\n-           found fn item `extern \"rust-intrinsic\" fn(_) -> _ {unlikely}`\n+   = note: expected fn item `extern \"rust-intrinsic\" fn(_) -> _ {likely}`\n+              found fn item `extern \"rust-intrinsic\" fn(_) -> _ {unlikely}`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "96c1869b4e726c3aaf679ac7c1d95be863cb7d06", "filename": "src/test/ui/resolve/resolve-inconsistent-binding-mode.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/030c886c29ffbfbb9f9c6495651cb4bee0fc93fe/src%2Ftest%2Fui%2Fresolve%2Fresolve-inconsistent-binding-mode.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/030c886c29ffbfbb9f9c6495651cb4bee0fc93fe/src%2Ftest%2Fui%2Fresolve%2Fresolve-inconsistent-binding-mode.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-inconsistent-binding-mode.stderr?ref=030c886c29ffbfbb9f9c6495651cb4bee0fc93fe", "patch": "@@ -54,8 +54,8 @@ LL |         Opts::A(ref mut i) | Opts::B(ref i) => {}\n    |                 |\n    |                 first introduced with type `&mut isize` here\n    |\n-   = note: expected type `&mut isize`\n-              found type `&isize`\n+   = note: expected mutable reference `&mut isize`\n+                      found reference `&isize`\n    = note: in the same arm, a binding must have the same type in all alternatives\n \n error: aborting due to 6 previous errors"}, {"sha": "11bc170cdfa1ba5b5b9adc7dafcb092db0b63a8d", "filename": "src/test/ui/rfc-2005-default-binding-mode/lit.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/030c886c29ffbfbb9f9c6495651cb4bee0fc93fe/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Flit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/030c886c29ffbfbb9f9c6495651cb4bee0fc93fe/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Flit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Flit.stderr?ref=030c886c29ffbfbb9f9c6495651cb4bee0fc93fe", "patch": "@@ -6,8 +6,8 @@ LL |     match &s {\n LL |             \"abc\" => true,\n    |             ^^^^^ expected `&str`, found `str`\n    |\n-   = note:   expected type `&&str`\n-           found reference `&'static str`\n+   = note: expected reference `&&str`\n+              found reference `&'static str`\n \n error[E0308]: mismatched types\n   --> $DIR/lit.rs:16:9\n@@ -17,8 +17,8 @@ LL |     match &s {\n LL |         b\"abc\" => true,\n    |         ^^^^^^ expected `&[u8]`, found array `[u8; 3]`\n    |\n-   = note:   expected type `&&[u8]`\n-           found reference `&'static [u8; 3]`\n+   = note: expected reference `&&[u8]`\n+              found reference `&'static [u8; 3]`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "83f941f65b9884ffaec7fe2af4e545bda0ae23f9", "filename": "src/test/ui/span/E0057.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4d1076c9f918297c97300a7ecf769dd7e6780be6/src%2Ftest%2Fui%2Fspan%2FE0057.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d1076c9f918297c97300a7ecf769dd7e6780be6/src%2Ftest%2Fui%2Fspan%2FE0057.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2FE0057.rs?ref=4d1076c9f918297c97300a7ecf769dd7e6780be6", "patch": "@@ -1,6 +0,0 @@\n-fn main() {\n-    let f = |x| x * 3;\n-    let a = f(); //~ ERROR E0057\n-    let b = f(4);\n-    let c = f(2, 3); //~ ERROR E0057\n-}"}, {"sha": "a151b20f865b22866e7e6ed8ee906486b145f241", "filename": "src/test/ui/span/E0057.stderr", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/4d1076c9f918297c97300a7ecf769dd7e6780be6/src%2Ftest%2Fui%2Fspan%2FE0057.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d1076c9f918297c97300a7ecf769dd7e6780be6/src%2Ftest%2Fui%2Fspan%2FE0057.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2FE0057.stderr?ref=4d1076c9f918297c97300a7ecf769dd7e6780be6", "patch": "@@ -1,25 +0,0 @@\n-error[E0057]: this function takes 1 argument but 0 arguments were supplied\n-  --> $DIR/E0057.rs:3:13\n-   |\n-LL |     let a = f();\n-   |             ^-- an argument is missing\n-   |\n-help: provide the argument\n-   |\n-LL |     let a = f({_});\n-   |             ~~~~~~\n-\n-error[E0057]: this function takes 1 argument but 2 arguments were supplied\n-  --> $DIR/E0057.rs:5:13\n-   |\n-LL |     let c = f(2, 3);\n-   |             ^    - argument unexpected\n-   |\n-help: remove the extra argument\n-   |\n-LL |     let c = f(2);\n-   |             ~~~~\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0057`."}, {"sha": "fae474cedb886831c23d45c676942da10da6d1a2", "filename": "src/test/ui/suggestions/issue-81839.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/030c886c29ffbfbb9f9c6495651cb4bee0fc93fe/src%2Ftest%2Fui%2Fsuggestions%2Fissue-81839.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/030c886c29ffbfbb9f9c6495651cb4bee0fc93fe/src%2Ftest%2Fui%2Fsuggestions%2Fissue-81839.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-81839.stderr?ref=030c886c29ffbfbb9f9c6495651cb4bee0fc93fe", "patch": "@@ -19,8 +19,8 @@ note: while checking the return type of the `async fn`\n    |\n LL |     pub async fn answer_str(&self, _s: &str) -> Test {\n    |                                                 ^^^^ checked the `Output` of this `async fn`, found opaque type\n-   = note:     expected type `()`\n-           found opaque type `impl Future<Output = Test>`\n+   = note: expected unit type `()`\n+            found opaque type `impl Future<Output = Test>`\n \n error: aborting due to previous error\n "}, {"sha": "8c8abe047c2abd7413844f3d940eadf9ffff06d2", "filename": "src/test/ui/suggestions/match-prev-arm-needing-semi.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/030c886c29ffbfbb9f9c6495651cb4bee0fc93fe/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-prev-arm-needing-semi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/030c886c29ffbfbb9f9c6495651cb4bee0fc93fe/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-prev-arm-needing-semi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-prev-arm-needing-semi.rs?ref=030c886c29ffbfbb9f9c6495651cb4bee0fc93fe", "patch": "@@ -16,6 +16,9 @@ fn extra_semicolon() {\n async fn async_dummy() {} //~ NOTE checked the `Output` of this `async fn`, found opaque type\n //~| NOTE while checking the return type of the `async fn`\n //~| NOTE in this expansion of desugaring of `async` block or function\n+//~| NOTE checked the `Output` of this `async fn`, expected opaque type\n+//~| NOTE while checking the return type of the `async fn`\n+//~| NOTE in this expansion of desugaring of `async` block or function\n async fn async_dummy2() {} //~ NOTE checked the `Output` of this `async fn`, found opaque type\n //~| NOTE checked the `Output` of this `async fn`, found opaque type\n //~| NOTE while checking the return type of the `async fn`\n@@ -31,7 +34,7 @@ async fn async_extra_semicolon_same() {\n         }\n         false => async_dummy(), //~ ERROR `match` arms have incompatible types\n         //~^ NOTE expected `()`, found opaque type\n-        //~| NOTE expected type `()`\n+        //~| NOTE expected unit type `()`\n         //~| HELP consider `await`ing on the `Future`\n     };\n }\n@@ -44,7 +47,7 @@ async fn async_extra_semicolon_different() {\n         }\n         false => async_dummy2(), //~ ERROR `match` arms have incompatible types\n         //~^ NOTE expected `()`, found opaque type\n-        //~| NOTE expected type `()`\n+        //~| NOTE expected unit type `()`\n         //~| HELP consider `await`ing on the `Future`\n     };\n }\n@@ -55,7 +58,7 @@ async fn async_different_futures() {\n         //~| HELP consider `await`ing on both `Future`s\n         false => async_dummy2(), //~ ERROR `match` arms have incompatible types\n         //~^ NOTE expected opaque type, found a different opaque type\n-        //~| NOTE expected type `impl Future<Output = ()>`\n+        //~| NOTE expected opaque type `impl Future<Output = ()>`\n         //~| NOTE distinct uses of `impl Trait` result in different opaque types\n     };\n }"}, {"sha": "4c4b782bd6fb17047767617efbe86e64c2906b3d", "filename": "src/test/ui/suggestions/match-prev-arm-needing-semi.stderr", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/030c886c29ffbfbb9f9c6495651cb4bee0fc93fe/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-prev-arm-needing-semi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/030c886c29ffbfbb9f9c6495651cb4bee0fc93fe/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-prev-arm-needing-semi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-prev-arm-needing-semi.stderr?ref=030c886c29ffbfbb9f9c6495651cb4bee0fc93fe", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: `match` arms have incompatible types\n-  --> $DIR/match-prev-arm-needing-semi.rs:32:18\n+  --> $DIR/match-prev-arm-needing-semi.rs:35:18\n    |\n LL |       let _ = match true {\n    |  _____________-\n@@ -20,8 +20,8 @@ note: while checking the return type of the `async fn`\n    |\n LL | async fn async_dummy() {}\n    |                        ^ checked the `Output` of this `async fn`, found opaque type\n-   = note:     expected type `()`\n-           found opaque type `impl Future<Output = ()>`\n+   = note: expected unit type `()`\n+            found opaque type `impl Future<Output = ()>`\n help: consider `await`ing on the `Future`\n    |\n LL |         false => async_dummy().await,\n@@ -33,7 +33,7 @@ LL +             async_dummy()\n    | \n \n error[E0308]: `match` arms have incompatible types\n-  --> $DIR/match-prev-arm-needing-semi.rs:45:18\n+  --> $DIR/match-prev-arm-needing-semi.rs:48:18\n    |\n LL |       let _ = match true {\n    |  _____________-\n@@ -50,12 +50,12 @@ LL | |     };\n    | |_____- `match` arms have incompatible types\n    |\n note: while checking the return type of the `async fn`\n-  --> $DIR/match-prev-arm-needing-semi.rs:19:25\n+  --> $DIR/match-prev-arm-needing-semi.rs:22:25\n    |\n LL | async fn async_dummy2() {}\n    |                         ^ checked the `Output` of this `async fn`, found opaque type\n-   = note:     expected type `()`\n-           found opaque type `impl Future<Output = ()>`\n+   = note: expected unit type `()`\n+            found opaque type `impl Future<Output = ()>`\n help: consider `await`ing on the `Future`\n    |\n LL |         false => async_dummy2().await,\n@@ -69,7 +69,7 @@ LL ~         false => Box::new(async_dummy2()),\n    |\n \n error[E0308]: `match` arms have incompatible types\n-  --> $DIR/match-prev-arm-needing-semi.rs:56:18\n+  --> $DIR/match-prev-arm-needing-semi.rs:59:18\n    |\n LL |       let _ = match true {\n    |  _____________-\n@@ -84,12 +84,17 @@ LL | |     };\n    | |_____- `match` arms have incompatible types\n    |\n note: while checking the return type of the `async fn`\n-  --> $DIR/match-prev-arm-needing-semi.rs:19:25\n+  --> $DIR/match-prev-arm-needing-semi.rs:16:24\n+   |\n+LL | async fn async_dummy() {}\n+   |                        ^ checked the `Output` of this `async fn`, expected opaque type\n+note: while checking the return type of the `async fn`\n+  --> $DIR/match-prev-arm-needing-semi.rs:22:25\n    |\n LL | async fn async_dummy2() {}\n    |                         ^ checked the `Output` of this `async fn`, found opaque type\n-   = note:     expected type `impl Future<Output = ()>` (opaque type at <$DIR/match-prev-arm-needing-semi.rs:16:24>)\n-           found opaque type `impl Future<Output = ()>` (opaque type at <$DIR/match-prev-arm-needing-semi.rs:19:25>)\n+   = note: expected opaque type `impl Future<Output = ()>` (opaque type at <$DIR/match-prev-arm-needing-semi.rs:16:24>)\n+              found opaque type `impl Future<Output = ()>` (opaque type at <$DIR/match-prev-arm-needing-semi.rs:22:25>)\n    = note: distinct uses of `impl Trait` result in different opaque types\n help: consider `await`ing on both `Future`s\n    |"}, {"sha": "be6fc261562ebc690b412eef6743340aac3444b8", "filename": "src/test/ui/suggestions/match-with-different-arm-types-as-stmt-instead-of-expr.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/030c886c29ffbfbb9f9c6495651cb4bee0fc93fe/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-with-different-arm-types-as-stmt-instead-of-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/030c886c29ffbfbb9f9c6495651cb4bee0fc93fe/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-with-different-arm-types-as-stmt-instead-of-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-with-different-arm-types-as-stmt-instead-of-expr.stderr?ref=030c886c29ffbfbb9f9c6495651cb4bee0fc93fe", "patch": "@@ -20,8 +20,8 @@ LL | |         _ => Box::new(Bar),\n LL | |     };\n    | |_____- `match` arms have incompatible types\n    |\n-   = note: expected type `Box<Baz>`\n-            found struct `Box<Bar>`\n+   = note: expected struct `Box<Baz>`\n+              found struct `Box<Bar>`\n note: you might have meant to return the `match` expression\n   --> $DIR/match-with-different-arm-types-as-stmt-instead-of-expr.rs:27:6\n    |"}, {"sha": "133ffb058739250011df2fe7c15174346a1213d9", "filename": "src/test/ui/suggestions/opaque-type-error.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/030c886c29ffbfbb9f9c6495651cb4bee0fc93fe/src%2Ftest%2Fui%2Fsuggestions%2Fopaque-type-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/030c886c29ffbfbb9f9c6495651cb4bee0fc93fe/src%2Ftest%2Fui%2Fsuggestions%2Fopaque-type-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fopaque-type-error.stderr?ref=030c886c29ffbfbb9f9c6495651cb4bee0fc93fe", "patch": "@@ -1,6 +1,9 @@\n error[E0308]: `if` and `else` have incompatible types\n   --> $DIR/opaque-type-error.rs:20:9\n    |\n+LL |   fn thing_one() -> impl Future<Output = Result<(), ()>> {\n+   |                     ------------------------------------ the expected opaque type\n+...\n LL |   fn thing_two() -> impl Future<Output = Result<(), ()>> {\n    |                     ------------------------------------ the found opaque type\n ...\n@@ -13,8 +16,8 @@ LL | |         thing_two()\n LL | |     }.await\n    | |_____- `if` and `else` have incompatible types\n    |\n-   = note:     expected type `impl Future<Output = Result<(), ()>>` (opaque type at <$DIR/opaque-type-error.rs:8:19>)\n-           found opaque type `impl Future<Output = Result<(), ()>>` (opaque type at <$DIR/opaque-type-error.rs:12:19>)\n+   = note: expected opaque type `impl Future<Output = Result<(), ()>>` (opaque type at <$DIR/opaque-type-error.rs:8:19>)\n+              found opaque type `impl Future<Output = Result<(), ()>>` (opaque type at <$DIR/opaque-type-error.rs:12:19>)\n    = note: distinct uses of `impl Trait` result in different opaque types\n help: consider `await`ing on both `Future`s\n    |"}, {"sha": "0ee44921bf5f8c82a5621e813813bda2b7619b8d", "filename": "src/test/ui/traits/issue-52893.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/030c886c29ffbfbb9f9c6495651cb4bee0fc93fe/src%2Ftest%2Fui%2Ftraits%2Fissue-52893.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/030c886c29ffbfbb9f9c6495651cb4bee0fc93fe/src%2Ftest%2Fui%2Ftraits%2Fissue-52893.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-52893.stderr?ref=030c886c29ffbfbb9f9c6495651cb4bee0fc93fe", "patch": "@@ -9,8 +9,8 @@ LL |         builder.push(output);\n    |                 |\n    |                 arguments to this function are incorrect\n    |\n-   = note: expected type `F`\n-            found struct `Class<P>`\n+   = note: expected type parameter `F`\n+                      found struct `Class<P>`\n note: associated function defined here\n   --> $DIR/issue-52893.rs:11:8\n    |"}, {"sha": "f8dfc4cd043cd07c4310b7c14575f14c7cbe3620", "filename": "src/test/ui/tuple/wrong_argument_ice-4.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/030c886c29ffbfbb9f9c6495651cb4bee0fc93fe/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/030c886c29ffbfbb9f9c6495651cb4bee0fc93fe/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice-4.stderr?ref=030c886c29ffbfbb9f9c6495651cb4bee0fc93fe", "patch": "@@ -8,6 +8,11 @@ LL | |         let b = 1;\n LL | |     });\n    | |_____- argument unexpected\n    |\n+note: closure defined here\n+  --> $DIR/wrong_argument_ice-4.rs:2:6\n+   |\n+LL |     (|| {})(|| {\n+   |      ^^\n help: remove the extra argument\n    |\n LL |     (|| {})();"}, {"sha": "3241c9f8521c0811b9dae14916c3443f2c8b6ccf", "filename": "src/test/ui/unboxed-closures/unboxed-closures-type-mismatch.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/030c886c29ffbfbb9f9c6495651cb4bee0fc93fe/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-type-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/030c886c29ffbfbb9f9c6495651cb4bee0fc93fe/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-type-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-type-mismatch.stderr?ref=030c886c29ffbfbb9f9c6495651cb4bee0fc93fe", "patch": "@@ -6,6 +6,11 @@ LL |     let z = f(1_usize, 2);\n    |             |\n    |             arguments to this function are incorrect\n    |\n+note: closure defined here\n+  --> $DIR/unboxed-closures-type-mismatch.rs:4:17\n+   |\n+LL |     let mut f = |x: isize, y: isize| -> isize { x + y };\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: change the type of the numeric literal from `usize` to `isize`\n    |\n LL |     let z = f(1_isize, 2);"}, {"sha": "b9d51d21e9af246fb08c27bc6180bbec657ecc0d", "filename": "src/test/ui/unsized/box-instead-of-dyn-fn.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/030c886c29ffbfbb9f9c6495651cb4bee0fc93fe/src%2Ftest%2Fui%2Funsized%2Fbox-instead-of-dyn-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/030c886c29ffbfbb9f9c6495651cb4bee0fc93fe/src%2Ftest%2Fui%2Funsized%2Fbox-instead-of-dyn-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Fbox-instead-of-dyn-fn.stderr?ref=030c886c29ffbfbb9f9c6495651cb4bee0fc93fe", "patch": "@@ -3,16 +3,19 @@ error[E0308]: `if` and `else` have incompatible types\n    |\n LL | /     if a % 2 == 0 {\n LL | |         move || println!(\"{a}\")\n-   | |         ----------------------- expected because of this\n+   | |         -----------------------\n+   | |         |\n+   | |         the expected closure\n+   | |         expected because of this\n LL | |     } else {\n LL | |         Box::new(move || println!(\"{}\", b))\n    | |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected closure, found struct `Box`\n LL | |\n LL | |     }\n    | |_____- `if` and `else` have incompatible types\n    |\n-   = note: expected type `[closure@$DIR/box-instead-of-dyn-fn.rs:8:9: 8:32]`\n-            found struct `Box<[closure@$DIR/box-instead-of-dyn-fn.rs:10:18: 10:43]>`\n+   = note: expected closure `[closure@$DIR/box-instead-of-dyn-fn.rs:8:9: 8:32]`\n+               found struct `Box<[closure@$DIR/box-instead-of-dyn-fn.rs:10:18: 10:43]>`\n \n error[E0746]: return type cannot have an unboxed trait object\n   --> $DIR/box-instead-of-dyn-fn.rs:5:56"}, {"sha": "3f297d222dce7ab01059317a55118871300f2b8c", "filename": "src/test/ui/wf/wf-unsafe-trait-obj-match.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/030c886c29ffbfbb9f9c6495651cb4bee0fc93fe/src%2Ftest%2Fui%2Fwf%2Fwf-unsafe-trait-obj-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/030c886c29ffbfbb9f9c6495651cb4bee0fc93fe/src%2Ftest%2Fui%2Fwf%2Fwf-unsafe-trait-obj-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-unsafe-trait-obj-match.stderr?ref=030c886c29ffbfbb9f9c6495651cb4bee0fc93fe", "patch": "@@ -9,8 +9,8 @@ LL | |         None => &R,\n LL | |     }\n    | |_____- `match` arms have incompatible types\n    |\n-   = note:   expected type `&S`\n-           found reference `&R`\n+   = note: expected reference `&S`\n+              found reference `&R`\n \n error[E0038]: the trait `Trait` cannot be made into an object\n   --> $DIR/wf-unsafe-trait-obj-match.rs:26:21"}]}