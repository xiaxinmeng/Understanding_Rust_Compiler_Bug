{"sha": "010974fafe571d2cfb8bc49d079b55bbe04c418d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxMDk3NGZhZmU1NzFkMmNmYjhiYzQ5ZDA3OWI1NWJiZTA0YzQxOGQ=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-06-04T21:28:01Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-06-04T21:28:01Z"}, "message": "Finish rustup.", "tree": {"sha": "335b26ca657868e21c9eeebff5d52e5c0e358d3b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/335b26ca657868e21c9eeebff5d52e5c0e358d3b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/010974fafe571d2cfb8bc49d079b55bbe04c418d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/010974fafe571d2cfb8bc49d079b55bbe04c418d", "html_url": "https://github.com/rust-lang/rust/commit/010974fafe571d2cfb8bc49d079b55bbe04c418d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/010974fafe571d2cfb8bc49d079b55bbe04c418d/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "edef6c53c02dbe8e65fd851f4746dcda6b84d5a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/edef6c53c02dbe8e65fd851f4746dcda6b84d5a2", "html_url": "https://github.com/rust-lang/rust/commit/edef6c53c02dbe8e65fd851f4746dcda6b84d5a2"}], "stats": {"total": 242, "additions": 131, "deletions": 111}, "files": [{"sha": "6f073478027ac45ccb1c6aa950073dac1abf5a19", "filename": "clippy_lints/src/escape.rs", "status": "modified", "additions": 33, "deletions": 64, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/010974fafe571d2cfb8bc49d079b55bbe04c418d/clippy_lints%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/010974fafe571d2cfb8bc49d079b55bbe04c418d/clippy_lints%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fescape.rs?ref=010974fafe571d2cfb8bc49d079b55bbe04c418d", "patch": "@@ -5,8 +5,6 @@ use rustc::lint::*;\n use rustc::middle::expr_use_visitor::*;\n use rustc::middle::mem_categorization::{cmt, Categorization};\n use rustc::ty;\n-use rustc::ty::layout::TargetDataLayout;\n-use rustc::traits::Reveal;\n use rustc::util::nodemap::NodeSet;\n use syntax::ast::NodeId;\n use syntax::codemap::Span;\n@@ -46,8 +44,7 @@ fn is_non_trait_box(ty: ty::Ty) -> bool {\n struct EscapeDelegate<'a, 'tcx: 'a> {\n     set: NodeSet,\n     tcx: ty::TyCtxt<'a, 'tcx, 'tcx>,\n-    tables: &'a ty::TypeckTables<'tcx>,\n-    target: TargetDataLayout,\n+    param_env: ty::ParamEnv<'tcx>,\n     too_large_for_stack: u64,\n }\n \n@@ -67,25 +64,20 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n         _: Span,\n         node_id: NodeId\n     ) {\n-        // we store the infcx because it is expensive to recreate\n-        // the context each time.\n+        let fn_def_id = cx.tcx.hir.local_def_id(node_id);\n+        let param_env = cx.tcx.param_env(fn_def_id).reveal_all();\n         let mut v = EscapeDelegate {\n             set: NodeSet(),\n             tcx: cx.tcx,\n-            tables: cx.tables,\n-            target: TargetDataLayout::parse(cx.sess()),\n+            param_env: param_env,\n             too_large_for_stack: self.too_large_for_stack,\n         };\n \n-        let infcx = cx.tcx.borrowck_fake_infer_ctxt(body.id());\n-        let fn_def_id = cx.tcx.hir.local_def_id(node_id);\n-        let region_maps = &cx.tcx.region_maps(fn_def_id);\n-        {\n-            let def_id = cx.tcx.hir.body_owner_def_id(body.id());\n-            let param_env = cx.tcx.param_env(def_id);\n+        cx.tcx.infer_ctxt(body.id()).enter(|infcx| {\n+            let region_maps = &cx.tcx.region_maps(fn_def_id);\n             let mut vis = ExprUseVisitor::new(&mut v, region_maps, &infcx, param_env);\n             vis.consume_body(body);\n-        }\n+        });\n \n         for node in v.set {\n             span_lint(cx,\n@@ -96,14 +88,12 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n     }\n }\n \n-impl<'a, 'tcx: 'a> Delegate<'tcx> for EscapeDelegate<'a, 'tcx> {\n+impl<'a, 'gcx: 'tcx, 'tcx> Delegate<'tcx> for EscapeDelegate<'a, 'gcx> {\n     fn consume(&mut self, _: NodeId, _: Span, cmt: cmt<'tcx>, mode: ConsumeMode) {\n         if let Categorization::Local(lid) = cmt.cat {\n-            if self.set.contains(&lid) {\n-                if let Move(DirectRefMove) = mode {\n-                    // moved out or in. clearly can't be localized\n-                    self.set.remove(&lid);\n-                }\n+            if let Move(DirectRefMove) = mode {\n+                // moved out or in. clearly can't be localized\n+                self.set.remove(&lid);\n             }\n         }\n     }\n@@ -151,49 +141,30 @@ impl<'a, 'tcx: 'a> Delegate<'tcx> for EscapeDelegate<'a, 'tcx> {\n     }\n     fn borrow(\n         &mut self,\n-        borrow_id: NodeId,\n+        _: NodeId,\n         _: Span,\n         cmt: cmt<'tcx>,\n         _: ty::Region,\n         _: ty::BorrowKind,\n         loan_cause: LoanCause\n     ) {\n-        use rustc::ty::adjustment::Adjust;\n-\n         if let Categorization::Local(lid) = cmt.cat {\n-            if self.set.contains(&lid) {\n-                if let Some(&Adjust::Deref(ref overloaded)) =\n-                    self.tables\n-                        .adjustments\n-                        .get(&borrow_id)\n-                        .map(|a| &a.kind) {\n-                    if LoanCause::AutoRef == loan_cause {\n-                        // x.foo()\n-                        if overloaded == 0 {\n-                            self.set.remove(&lid); // Used without autodereffing (i.e. x.clone())\n-                        }\n-                    } else {\n-                        span_bug!(cmt.span, \"Unknown adjusted AutoRef\");\n-                    }\n-                } else if LoanCause::AddrOf == loan_cause {\n-                    // &x\n-                    if let Some(&Adjust::Deref(ref overloaded)) =\n-                        self.tables\n-                            .adjustments\n-                            .get(&self.tcx\n-                                .hir\n-                                .get_parent_node(borrow_id))\n-                            .map(|a| &a.kind) {\n-                        if overloaded <= 1 {\n-                            // foo(&x) where no extra autoreffing is happening\n-                            self.set.remove(&lid);\n-                        }\n-                    }\n+            match loan_cause {\n+                // x.foo()\n+                // Used without autodereffing (i.e. x.clone())\n+                LoanCause::AutoRef |\n \n-                } else if LoanCause::MatchDiscriminant == loan_cause {\n-                    self.set.remove(&lid); // `match x` can move\n+                // &x\n+                // foo(&x) where no extra autoreffing is happening\n+                LoanCause::AddrOf |\n+\n+                // `match x` can move\n+                LoanCause::MatchDiscriminant => {\n+                    self.set.remove(&lid);\n                 }\n+\n                 // do nothing for matches, etc. These can't escape\n+                _ => {}\n             }\n         }\n     }\n@@ -202,19 +173,17 @@ impl<'a, 'tcx: 'a> Delegate<'tcx> for EscapeDelegate<'a, 'tcx> {\n }\n \n impl<'a, 'tcx: 'a> EscapeDelegate<'a, 'tcx> {\n-    fn is_large_box(&self, ty: ty::Ty<'tcx>) -> bool {\n+    fn is_large_box(&self, ty: ty::Ty) -> bool {\n         // Large types need to be boxed to avoid stack\n         // overflows.\n         if ty.is_box() {\n-            let inner = ty.boxed_ty();\n-            self.tcx.infer_ctxt(()).enter(|infcx| if let Ok(layout) = inner.layout(&infcx) {\n-                let size = layout.size(&self.target);\n-                size.bytes() > self.too_large_for_stack\n-            } else {\n-                false\n-            })\n-        } else {\n-            false\n+            if let Some(inner) = self.tcx.lift(&ty.boxed_ty()) {\n+                if let Ok(layout) = inner.layout(self.tcx, self.param_env) {\n+                    return layout.size(self.tcx).bytes() > self.too_large_for_stack;\n+                }\n+            }\n         }\n+\n+        false\n     }\n }"}, {"sha": "463358c99b4672d8f00765cc8f28033e5d0e9738", "filename": "clippy_lints/src/functions.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/010974fafe571d2cfb8bc49d079b55bbe04c418d/clippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/010974fafe571d2cfb8bc49d079b55bbe04c418d/clippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions.rs?ref=010974fafe571d2cfb8bc49d079b55bbe04c418d", "patch": "@@ -1,6 +1,5 @@\n use rustc::hir::intravisit;\n use rustc::hir;\n-use rustc::ty;\n use rustc::lint::*;\n use std::collections::HashSet;\n use syntax::ast;"}, {"sha": "606399af547fb806f58ad6c2c761cea36bef36e4", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/010974fafe571d2cfb8bc49d079b55bbe04c418d/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/010974fafe571d2cfb8bc49d079b55bbe04c418d/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=010974fafe571d2cfb8bc49d079b55bbe04c418d", "patch": "@@ -8,6 +8,7 @@ use rustc::lint::*;\n use rustc::middle::const_val::ConstVal;\n use rustc::middle::region::CodeExtent;\n use rustc::ty;\n+use rustc::ty::subst::Subst;\n use rustc_const_eval::ConstContext;\n use std::collections::HashMap;\n use syntax::ast;\n@@ -676,8 +677,11 @@ fn check_for_loop_arg(cx: &LateContext, pat: &Pat, arg: &Expr, expr: &Expr) {\n                     lint_iter_method(cx, args, arg, &method_name);\n                 }\n             } else if method_name == \"into_iter\" && match_trait_method(cx, arg, &paths::INTO_ITERATOR) {\n-                let fn_ty = cx.tables.expr_ty(arg);\n-                let fn_arg_tys = fn_ty.fn_sig().inputs();\n+                let def_id = cx.tables.type_dependent_defs[&arg.id].def_id();\n+                let substs = cx.tables.node_substs(arg.id);\n+                let method_type = cx.tcx.type_of(def_id).subst(cx.tcx, substs);\n+\n+                let fn_arg_tys = method_type.fn_sig().inputs();\n                 assert_eq!(fn_arg_tys.skip_binder().len(), 1);\n                 if fn_arg_tys.skip_binder()[0].is_region_ptr() {\n                     lint_iter_method(cx, args, arg, &method_name);"}, {"sha": "781398470b868b491d54c32e2e135640a4e9be8d", "filename": "clippy_lints/src/mut_reference.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/010974fafe571d2cfb8bc49d079b55bbe04c418d/clippy_lints%2Fsrc%2Fmut_reference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/010974fafe571d2cfb8bc49d079b55bbe04c418d/clippy_lints%2Fsrc%2Fmut_reference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_reference.rs?ref=010974fafe571d2cfb8bc49d079b55bbe04c418d", "patch": "@@ -1,5 +1,6 @@\n use rustc::lint::*;\n use rustc::ty::{TypeAndMut, TypeVariants, TyS};\n+use rustc::ty::subst::Subst;\n use rustc::hir::*;\n use utils::span_lint;\n \n@@ -34,23 +35,19 @@ impl LintPass for UnnecessaryMutPassed {\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnnecessaryMutPassed {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {\n-        let borrowed_table = cx.tables;\n         match e.node {\n             ExprCall(ref fn_expr, ref arguments) => {\n-                let function_type = borrowed_table.node_types\n-                    .get(&fn_expr.id)\n-                    .expect(\"A function with an unknown type is called. If this happened, the compiler would have \\\n-                             aborted the compilation long ago\");\n                 if let ExprPath(ref path) = fn_expr.node {\n                     check_arguments(cx,\n                                     arguments,\n-                                    function_type,\n+                                    cx.tables.expr_ty(fn_expr),\n                                     &print::to_string(print::NO_ANN, |s| s.print_qpath(path, false)));\n                 }\n             },\n             ExprMethodCall(ref name, _, ref arguments) => {\n-                let def_id = borrowed_table.type_dependent_defs[&e.id].def_id();\n-                let method_type = cx.tcx.type_of(def_id);\n+                let def_id = cx.tables.type_dependent_defs[&e.id].def_id();\n+                let substs = cx.tables.node_substs(e.id);\n+                let method_type = cx.tcx.type_of(def_id).subst(cx.tcx, substs);\n                 check_arguments(cx, arguments, method_type, &name.node.as_str())\n             },\n             _ => (),"}, {"sha": "c1965be2c04893a7a55be35ebc3c68a82e0c97a5", "filename": "clippy_lints/src/needless_borrow.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/010974fafe571d2cfb8bc49d079b55bbe04c418d/clippy_lints%2Fsrc%2Fneedless_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/010974fafe571d2cfb8bc49d079b55bbe04c418d/clippy_lints%2Fsrc%2Fneedless_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_borrow.rs?ref=010974fafe571d2cfb8bc49d079b55bbe04c418d", "patch": "@@ -5,6 +5,7 @@\n use rustc::lint::*;\n use rustc::hir::{ExprAddrOf, Expr, MutImmutable, Pat, PatKind, BindingMode};\n use rustc::ty;\n+use rustc::ty::adjustment::{Adjustment, Adjust};\n use utils::{span_lint, in_macro};\n \n /// **What it does:** Checks for address of operations (`&`) that are going to\n@@ -41,13 +42,18 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessBorrow {\n         }\n         if let ExprAddrOf(MutImmutable, ref inner) = e.node {\n             if let ty::TyRef(..) = cx.tables.expr_ty(inner).sty {\n-                if let Some(&ty::adjustment::Adjust::Deref(Some(_))) =\n-                    cx.tables.adjustments.get(&e.id).map(|a| &a.kind) {\n-                    span_lint(cx,\n-                              NEEDLESS_BORROW,\n-                              e.span,\n-                              \"this expression borrows a reference that is immediately dereferenced by the \\\n-                               compiler\");\n+                for adj3 in cx.tables.expr_adjustments(e).windows(3) {\n+                    if let [\n+                        Adjustment { kind: Adjust::Deref(_), .. },\n+                        Adjustment { kind: Adjust::Deref(_), .. },\n+                        Adjustment { kind: Adjust::Borrow(_), .. }\n+                    ] = *adj3 {\n+                        span_lint(cx,\n+                                  NEEDLESS_BORROW,\n+                                  e.span,\n+                                  \"this expression borrows a reference that is immediately dereferenced by the \\\n+                                   compiler\");\n+                    }\n                 }\n             }\n         }"}, {"sha": "2ce22b8c9c9a94e387dee574b8657cb2b8ddba3d", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/010974fafe571d2cfb8bc49d079b55bbe04c418d/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/010974fafe571d2cfb8bc49d079b55bbe04c418d/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=010974fafe571d2cfb8bc49d079b55bbe04c418d", "patch": "@@ -91,12 +91,12 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n         // Collect moved variables and spans which will need dereferencings from the function body.\n         let MovedVariablesCtxt { moved_vars, spans_need_deref, .. } = {\n             let mut ctx = MovedVariablesCtxt::new(cx);\n-            let infcx = cx.tcx.borrowck_fake_infer_ctxt(body.id());\n-            let region_maps = &cx.tcx.region_maps(fn_def_id);\n-            {\n-                let mut v = euv::ExprUseVisitor::new(&mut ctx, region_maps, &infcx);\n-                v.consume_body(body);\n-            }\n+            cx.tcx.infer_ctxt(body.id()).enter(|infcx| {\n+                let param_env = cx.tcx.param_env(fn_def_id);\n+                let region_maps = &cx.tcx.region_maps(fn_def_id);\n+                euv::ExprUseVisitor::new(&mut ctx, region_maps, &infcx, param_env)\n+                    .consume_body(body);\n+            });\n             ctx\n         };\n \n@@ -199,7 +199,7 @@ impl<'a, 'tcx: 'a> MovedVariablesCtxt<'a, 'tcx> {\n         }\n     }\n \n-    fn move_common(&mut self, _consume_id: NodeId, _span: Span, cmt: mc::cmt<'tcx>) {\n+    fn move_common(&mut self, _consume_id: NodeId, _span: Span, cmt: mc::cmt) {\n         let cmt = unwrap_downcast_or_interior(cmt);\n \n         if_let_chain! {[\n@@ -210,7 +210,7 @@ impl<'a, 'tcx: 'a> MovedVariablesCtxt<'a, 'tcx> {\n         }}\n     }\n \n-    fn non_moving_pat(&mut self, matched_pat: &Pat, cmt: mc::cmt<'tcx>) {\n+    fn non_moving_pat(&mut self, matched_pat: &Pat, cmt: mc::cmt) {\n         let cmt = unwrap_downcast_or_interior(cmt);\n \n         if_let_chain! {[\n@@ -262,7 +262,7 @@ impl<'a, 'tcx: 'a> MovedVariablesCtxt<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx: 'a> euv::Delegate<'tcx> for MovedVariablesCtxt<'a, 'tcx> {\n+impl<'a, 'gcx: 'tcx, 'tcx> euv::Delegate<'tcx> for MovedVariablesCtxt<'a, 'gcx> {\n     fn consume(&mut self, consume_id: NodeId, consume_span: Span, cmt: mc::cmt<'tcx>, mode: euv::ConsumeMode) {\n         if let euv::ConsumeMode::Move(_) = mode {\n             self.move_common(consume_id, consume_span, cmt);"}, {"sha": "1f19e454857292f42172f6ad4ed444d15629fd7a", "filename": "clippy_lints/src/unused_io_amount.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/010974fafe571d2cfb8bc49d079b55bbe04c418d/clippy_lints%2Fsrc%2Funused_io_amount.rs", "raw_url": "https://github.com/rust-lang/rust/raw/010974fafe571d2cfb8bc49d079b55bbe04c418d/clippy_lints%2Fsrc%2Funused_io_amount.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_io_amount.rs?ref=010974fafe571d2cfb8bc49d079b55bbe04c418d", "patch": "@@ -46,7 +46,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedIoAmount {\n             hir::ExprMatch(ref res, _, _) if is_try(expr).is_some() => {\n                 if let hir::ExprCall(ref func, ref args) = res.node {\n                     if let hir::ExprPath(ref path) = func.node {\n-                        if match_path(path, &paths::CARRIER_TRANSLATE) && args.len() == 1 {\n+                        if match_path(path, &paths::TRY_INTO_RESULT) && args.len() == 1 {\n                             check_method_call(cx, &args[0], expr);\n                         }\n                     }"}, {"sha": "d068fa51ca403834bb835230e5223dae075c289b", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/010974fafe571d2cfb8bc49d079b55bbe04c418d/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/010974fafe571d2cfb8bc49d079b55bbe04c418d/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=010974fafe571d2cfb8bc49d079b55bbe04c418d", "patch": "@@ -9,7 +9,6 @@ use rustc::traits::Reveal;\n use rustc::traits;\n use rustc::ty::subst::{Subst, Substs};\n use rustc::ty;\n-use rustc::ty::layout::TargetDataLayout;\n use rustc::mir::transform::MirSource;\n use rustc_errors;\n use std::borrow::Cow;\n@@ -317,13 +316,15 @@ pub fn implements_trait<'a, 'tcx>(\n     parent_node_id: Option<NodeId>\n ) -> bool {\n     let ty = cx.tcx.erase_regions(&ty);\n-    let mut b = if let Some(id) = parent_node_id {\n-        cx.tcx.infer_ctxt(BodyId { node_id: id })\n+    let param_env = if let Some(id) = parent_node_id {\n+        let def_id = cx.tcx.hir.body_owner_def_id(BodyId { node_id: id });\n+        cx.tcx.param_env(def_id).reveal_all()\n     } else {\n-        cx.tcx.infer_ctxt(())\n+        ty::ParamEnv::empty(Reveal::All)\n     };\n-    b.enter(|infcx| {\n-        let obligation = cx.tcx.predicate_for_trait_def(traits::ObligationCause::dummy(), trait_id, 0, ty, ty_params);\n+    cx.tcx.infer_ctxt(()).enter(|infcx| {\n+        let obligation = cx.tcx.predicate_for_trait_def(\n+            param_env, traits::ObligationCause::dummy(), trait_id, 0, ty, ty_params);\n \n         traits::SelectionContext::new(&infcx).evaluate_obligation_conservatively(&obligation)\n     })\n@@ -778,12 +779,9 @@ pub fn same_tys<'a, 'tcx>(\n     b: ty::Ty<'tcx>,\n     parameter_item: DefId\n ) -> bool {\n-    let parameter_env = cx.tcx.param_env(parameter_item);\n-    cx.tcx.infer_ctxt(parameter_env).enter(|infcx| {\n-        let substs = Substs::identity_for_item(cx.tcx, parameter_item);\n-        let new_a = a.subst(infcx.tcx, substs);\n-        let new_b = b.subst(infcx.tcx, substs);\n-        infcx.can_equate(&new_a, &new_b).is_ok()\n+    let param_env = cx.tcx.param_env(parameter_item).reveal_all();\n+    cx.tcx.infer_ctxt(()).enter(|infcx| {\n+        infcx.can_eq(param_env, a, b).is_ok()\n     })\n }\n \n@@ -961,7 +959,6 @@ pub fn is_try(expr: &Expr) -> Option<&Expr> {\n }\n \n pub fn type_size<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, ty: ty::Ty<'tcx>) -> Option<u64> {\n-    cx.tcx\n-        .infer_ctxt(())\n-        .enter(|infcx| ty.layout(&infcx).ok().map(|lay| lay.size(&TargetDataLayout::parse(cx.sess())).bytes()))\n+    ty.layout(cx.tcx, ty::ParamEnv::empty(Reveal::All))\n+      .ok().map(|layout| layout.size(cx.tcx).bytes())\n }"}, {"sha": "738a497c6ab67f75ff98702ee71a65f74b2d42bb", "filename": "clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/010974fafe571d2cfb8bc49d079b55bbe04c418d/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/010974fafe571d2cfb8bc49d079b55bbe04c418d/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=010974fafe571d2cfb8bc49d079b55bbe04c418d", "patch": "@@ -9,7 +9,6 @@ pub const BOX_NEW: [&'static str; 4] = [\"std\", \"boxed\", \"Box\", \"new\"];\n pub const BTREEMAP: [&'static str; 4] = [\"collections\", \"btree\", \"map\", \"BTreeMap\"];\n pub const BTREEMAP_ENTRY: [&'static str; 4] = [\"collections\", \"btree\", \"map\", \"Entry\"];\n pub const BTREESET: [&'static str; 4] = [\"collections\", \"btree\", \"set\", \"BTreeSet\"];\n-pub const CARRIER_TRANSLATE: [&'static str; 4] = [\"std\", \"ops\", \"Carrier\", \"translate\"];\n pub const CLONE: [&'static str; 4] = [\"core\", \"clone\", \"Clone\", \"clone\"];\n pub const CLONE_TRAIT: [&'static str; 3] = [\"core\", \"clone\", \"Clone\"];\n pub const CMP_MAX: [&'static str; 3] = [\"core\", \"cmp\", \"max\"];\n@@ -72,6 +71,7 @@ pub const STRING: [&'static str; 3] = [\"collections\", \"string\", \"String\"];\n pub const TO_OWNED: [&'static str; 3] = [\"collections\", \"borrow\", \"ToOwned\"];\n pub const TO_STRING: [&'static str; 3] = [\"collections\", \"string\", \"ToString\"];\n pub const TRANSMUTE: [&'static str; 4] = [\"core\", \"intrinsics\", \"\", \"transmute\"];\n+pub const TRY_INTO_RESULT: [&'static str; 4] = [\"std\", \"ops\", \"Try\", \"into_result\"];\n pub const VEC: [&'static str; 3] = [\"collections\", \"vec\", \"Vec\"];\n pub const VEC_DEQUE: [&'static str; 3] = [\"collections\", \"vec_deque\", \"VecDeque\"];\n pub const VEC_FROM_ELEM: [&'static str; 3] = [\"collections\", \"vec\", \"from_elem\"];"}, {"sha": "66c42d50e19a441c508be184cc737a94ad612e74", "filename": "clippy_tests/examples/for_loop.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/010974fafe571d2cfb8bc49d079b55bbe04c418d/clippy_tests%2Fexamples%2Ffor_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/010974fafe571d2cfb8bc49d079b55bbe04c418d/clippy_tests%2Fexamples%2Ffor_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_tests%2Fexamples%2Ffor_loop.stderr?ref=010974fafe571d2cfb8bc49d079b55bbe04c418d", "patch": "@@ -295,6 +295,14 @@ error: this range is empty so this for loop will never run\n     |\n     = note: `-D reverse-range-loop` implied by `-D warnings`\n \n+error: use of deprecated item: replaced by `Iterator::step_by`\n+   --> for_loop.rs:192:22\n+    |\n+192 |     for i in (10..8).step_by(-1) {\n+    |                      ^^^^^^^\n+    |\n+    = note: `-D deprecated` implied by `-D warnings`\n+\n error: it is more idiomatic to loop over references to containers instead of using explicit iteration methods\n    --> for_loop.rs:207:15\n     |"}, {"sha": "c8f606db0e170e3928e2a19e4b743cd8e5b4b5a5", "filename": "clippy_tests/examples/mut_reference.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/010974fafe571d2cfb8bc49d079b55bbe04c418d/clippy_tests%2Fexamples%2Fmut_reference.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/010974fafe571d2cfb8bc49d079b55bbe04c418d/clippy_tests%2Fexamples%2Fmut_reference.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_tests%2Fexamples%2Fmut_reference.stderr?ref=010974fafe571d2cfb8bc49d079b55bbe04c418d", "patch": "@@ -1,20 +1,20 @@\n-error: The function/method \"takes_an_immutable_reference\" doesn't need a mutable reference\n+error: The function/method `takes_an_immutable_reference` doesn't need a mutable reference\n   --> mut_reference.rs:22:34\n    |\n 22 |     takes_an_immutable_reference(&mut 42);\n    |                                  ^^^^^^^\n    |\n    = note: `-D unnecessary-mut-passed` implied by `-D warnings`\n \n-error: The function/method \"as_ptr\" doesn't need a mutable reference\n+error: The function/method `as_ptr` doesn't need a mutable reference\n   --> mut_reference.rs:24:12\n    |\n 24 |     as_ptr(&mut 42);\n    |            ^^^^^^^\n    |\n    = note: `-D unnecessary-mut-passed` implied by `-D warnings`\n \n-error: The function/method \"takes_an_immutable_reference\" doesn't need a mutable reference\n+error: The function/method `takes_an_immutable_reference` doesn't need a mutable reference\n   --> mut_reference.rs:28:44\n    |\n 28 |     my_struct.takes_an_immutable_reference(&mut 42);"}, {"sha": "2f3aa7971d0160d47095bc1b9fac3f0adb448beb", "filename": "clippy_tests/examples/range.stderr", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/010974fafe571d2cfb8bc49d079b55bbe04c418d/clippy_tests%2Fexamples%2Frange.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/010974fafe571d2cfb8bc49d079b55bbe04c418d/clippy_tests%2Fexamples%2Frange.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_tests%2Fexamples%2Frange.stderr?ref=010974fafe571d2cfb8bc49d079b55bbe04c418d", "patch": "@@ -6,6 +6,22 @@ error: Range::step_by(0) produces an infinite iterator. Consider using `std::ite\n    |\n    = note: `-D range-step-by-zero` implied by `-D warnings`\n \n+error: use of deprecated item: replaced by `Iterator::step_by`\n+  --> range.rs:13:12\n+   |\n+13 |     (0..1).step_by(0);\n+   |            ^^^^^^^\n+   |\n+   = note: `-D deprecated` implied by `-D warnings`\n+\n+error: use of deprecated item: replaced by `Iterator::step_by`\n+  --> range.rs:15:12\n+   |\n+15 |     (0..1).step_by(1);\n+   |            ^^^^^^^\n+   |\n+   = note: `-D deprecated` implied by `-D warnings`\n+\n error: Range::step_by(0) produces an infinite iterator. Consider using `std::iter::repeat()` instead\n   --> range.rs:17:5\n    |\n@@ -14,6 +30,14 @@ error: Range::step_by(0) produces an infinite iterator. Consider using `std::ite\n    |\n    = note: `-D range-step-by-zero` implied by `-D warnings`\n \n+error: use of deprecated item: replaced by `Iterator::step_by`\n+  --> range.rs:17:11\n+   |\n+17 |     (1..).step_by(0);\n+   |           ^^^^^^^\n+   |\n+   = note: `-D deprecated` implied by `-D warnings`\n+\n error: Range::step_by(0) produces an infinite iterator. Consider using `std::iter::repeat()` instead\n   --> range.rs:18:5\n    |\n@@ -22,6 +46,14 @@ error: Range::step_by(0) produces an infinite iterator. Consider using `std::ite\n    |\n    = note: `-D range-step-by-zero` implied by `-D warnings`\n \n+error: use of deprecated item: replaced by `Iterator::step_by`\n+  --> range.rs:18:13\n+   |\n+18 |     (1...2).step_by(0);\n+   |             ^^^^^^^\n+   |\n+   = note: `-D deprecated` implied by `-D warnings`\n+\n error: Range::step_by(0) produces an infinite iterator. Consider using `std::iter::repeat()` instead\n   --> range.rs:21:5\n    |\n@@ -30,6 +62,14 @@ error: Range::step_by(0) produces an infinite iterator. Consider using `std::ite\n    |\n    = note: `-D range-step-by-zero` implied by `-D warnings`\n \n+error: use of deprecated item: replaced by `Iterator::step_by`\n+  --> range.rs:21:7\n+   |\n+21 |     x.step_by(0);\n+   |       ^^^^^^^\n+   |\n+   = note: `-D deprecated` implied by `-D warnings`\n+\n error: It is more idiomatic to use v1.iter().enumerate()\n   --> range.rs:29:14\n    |"}]}