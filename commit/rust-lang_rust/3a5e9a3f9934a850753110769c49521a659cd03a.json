{"sha": "3a5e9a3f9934a850753110769c49521a659cd03a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhNWU5YTNmOTkzNGE4NTA3NTMxMTA3NjljNDk1MjFhNjU5Y2QwM2E=", "commit": {"author": {"name": "David Szotten", "email": "davidszotten@gmail.com", "date": "2015-09-19T10:44:55Z"}, "committer": {"name": "David Szotten", "email": "davidszotten@gmail.com", "date": "2015-09-19T10:44:55Z"}, "message": "wrap more referenced code blocks in divs", "tree": {"sha": "5576c8c8d2e0b6468c814cb0aa59a14e63395e20", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5576c8c8d2e0b6468c814cb0aa59a14e63395e20"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a5e9a3f9934a850753110769c49521a659cd03a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a5e9a3f9934a850753110769c49521a659cd03a", "html_url": "https://github.com/rust-lang/rust/commit/3a5e9a3f9934a850753110769c49521a659cd03a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a5e9a3f9934a850753110769c49521a659cd03a/comments", "author": {"login": "davidszotten", "id": 412005, "node_id": "MDQ6VXNlcjQxMjAwNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/412005?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidszotten", "html_url": "https://github.com/davidszotten", "followers_url": "https://api.github.com/users/davidszotten/followers", "following_url": "https://api.github.com/users/davidszotten/following{/other_user}", "gists_url": "https://api.github.com/users/davidszotten/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidszotten/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidszotten/subscriptions", "organizations_url": "https://api.github.com/users/davidszotten/orgs", "repos_url": "https://api.github.com/users/davidszotten/repos", "events_url": "https://api.github.com/users/davidszotten/events{/privacy}", "received_events_url": "https://api.github.com/users/davidszotten/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidszotten", "id": 412005, "node_id": "MDQ6VXNlcjQxMjAwNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/412005?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidszotten", "html_url": "https://github.com/davidszotten", "followers_url": "https://api.github.com/users/davidszotten/followers", "following_url": "https://api.github.com/users/davidszotten/following{/other_user}", "gists_url": "https://api.github.com/users/davidszotten/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidszotten/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidszotten/subscriptions", "organizations_url": "https://api.github.com/users/davidszotten/orgs", "repos_url": "https://api.github.com/users/davidszotten/repos", "events_url": "https://api.github.com/users/davidszotten/events{/privacy}", "received_events_url": "https://api.github.com/users/davidszotten/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30c91cd7f7527cee89e4997827fbe61ea39f2729", "url": "https://api.github.com/repos/rust-lang/rust/commits/30c91cd7f7527cee89e4997827fbe61ea39f2729", "html_url": "https://github.com/rust-lang/rust/commit/30c91cd7f7527cee89e4997827fbe61ea39f2729"}], "stats": {"total": 14, "additions": 14, "deletions": 0}, "files": [{"sha": "521538b955678cfa194e439898f4c0c9e7305cff", "filename": "src/doc/trpl/error-handling.md", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3a5e9a3f9934a850753110769c49521a659cd03a/src%2Fdoc%2Ftrpl%2Ferror-handling.md", "raw_url": "https://github.com/rust-lang/rust/raw/3a5e9a3f9934a850753110769c49521a659cd03a/src%2Fdoc%2Ftrpl%2Ferror-handling.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Ferror-handling.md?ref=3a5e9a3f9934a850753110769c49521a659cd03a", "patch": "@@ -186,6 +186,7 @@ But wait, what about `unwrap` used in [`unwrap-double`](#code-unwrap-double)?\n There was no case analysis there! Instead, the case analysis was put inside the\n `unwrap` method for you. You could define it yourself if you want:\n \n+<div id=\"code-option-def-unwrap\">\n ```rust\n enum Option<T> {\n     None,\n@@ -202,6 +203,7 @@ impl<T> Option<T> {\n     }\n }\n ```\n+</div>\n \n The `unwrap` method *abstracts away the case analysis*. This is precisely the thing\n that makes `unwrap` ergonomic to use. Unfortunately, that `panic!` means that\n@@ -251,6 +253,7 @@ option is `None`, in which case, just return `None`.\n Rust has parametric polymorphism, so it is very easy to define a combinator\n that abstracts this pattern:\n \n+<div id=\"code-option-map\">\n ```rust\n fn map<F, T, A>(option: Option<T>, f: F) -> Option<A> where F: FnOnce(T) -> A {\n     match option {\n@@ -259,6 +262,7 @@ fn map<F, T, A>(option: Option<T>, f: F) -> Option<A> where F: FnOnce(T) -> A {\n     }\n }\n ```\n+</div>\n \n Indeed, `map` is [defined as a method][2] on `Option<T>` in the standard library.\n \n@@ -390,12 +394,14 @@ remove choices because they will panic if `Option<T>` is `None`.\n The `Result` type is also\n [defined in the standard library][6]:\n \n+<div id=\"code-result-def-1\">\n ```rust\n enum Result<T, E> {\n     Ok(T),\n     Err(E),\n }\n ```\n+</div>\n \n The `Result` type is a richer version of `Option`. Instead of expressing the\n possibility of *absence* like `Option` does, `Result` expresses the possibility\n@@ -666,6 +672,7 @@ with both an `Option` and a `Result`, the solution is *usually* to convert the\n (from `env::args()`) means the user didn't invoke the program correctly. We\n could just use a `String` to describe the error. Let's try:\n \n+<div id=\"code-error-double-string\">\n ```rust\n use std::env;\n \n@@ -682,6 +689,7 @@ fn main() {\n     }\n }\n ```\n+</div>\n \n There are a couple new things in this example. The first is the use of the\n [`Option::ok_or`](../std/option/enum.Option.html#method.ok_or)\n@@ -898,6 +906,7 @@ seen above.\n \n Here is a simplified definition of a `try!` macro:\n \n+<div id=\"code-try-def-simple\">\n ```rust\n macro_rules! try {\n     ($e:expr) => (match $e {\n@@ -906,6 +915,7 @@ macro_rules! try {\n     });\n }\n ```\n+</div>\n \n (The [real definition](../std/macro.try!.html) is a bit more\n sophisticated. We will address that later.)\n@@ -1158,11 +1168,13 @@ The `std::convert::From` trait is\n [defined in the standard\n library](../std/convert/trait.From.html):\n \n+<div id=\"code-from-def\">\n ```rust\n trait From<T> {\n     fn from(T) -> Self;\n }\n ```\n+</div>\n \n Deliciously simple, yes? `From` is very useful because it gives us a generic\n way to talk about conversion *from* a particular type `T` to some other type\n@@ -1238,6 +1250,7 @@ macro_rules! try {\n This is not it's real definition. It's real definition is\n [in the standard library](../std/macro.try!.html):\n \n+<div id=\"code-try-def\">\n ```rust\n macro_rules! try {\n     ($e:expr) => (match $e {\n@@ -1246,6 +1259,7 @@ macro_rules! try {\n     });\n }\n ```\n+</div>\n \n There's one tiny but powerful change: the error value is passed through\n `From::from`. This makes the `try!` macro a lot more powerful because it gives"}]}