{"sha": "1ce80e210d152619caa99b1bc030f57a352b657a", "node_id": "C_kwDOAAsO6NoAKDFjZTgwZTIxMGQxNTI2MTljYWE5OWIxYmMwMzBmNTdhMzUyYjY1N2E", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-02-16T09:25:11Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-04-21T22:27:20Z"}, "message": "Allow `LocalDefId` as the argument to `def_path_str`", "tree": {"sha": "428295e88e40acbf164390344816e790d143bc41", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/428295e88e40acbf164390344816e790d143bc41"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ce80e210d152619caa99b1bc030f57a352b657a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ce80e210d152619caa99b1bc030f57a352b657a", "html_url": "https://github.com/rust-lang/rust/commit/1ce80e210d152619caa99b1bc030f57a352b657a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ce80e210d152619caa99b1bc030f57a352b657a/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e18d1f8d2ea0b0feabf7794fb7f5868e3b243709", "url": "https://api.github.com/repos/rust-lang/rust/commits/e18d1f8d2ea0b0feabf7794fb7f5868e3b243709", "html_url": "https://github.com/rust-lang/rust/commit/e18d1f8d2ea0b0feabf7794fb7f5868e3b243709"}], "stats": {"total": 122, "additions": 68, "deletions": 54}, "files": [{"sha": "7f46614423cb90c8e2450084056c5229cea44510", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ce80e210d152619caa99b1bc030f57a352b657a/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce80e210d152619caa99b1bc030f57a352b657a/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=1ce80e210d152619caa99b1bc030f57a352b657a", "patch": "@@ -124,7 +124,7 @@ pub fn provide(providers: &mut Providers) {\n \n fn mir_borrowck(tcx: TyCtxt<'_>, def: LocalDefId) -> &BorrowCheckResult<'_> {\n     let (input_body, promoted) = tcx.mir_promoted(def);\n-    debug!(\"run query mir_borrowck: {}\", tcx.def_path_str(def.to_def_id()));\n+    debug!(\"run query mir_borrowck: {}\", tcx.def_path_str(def));\n \n     if input_body.borrow().should_skip() {\n         debug!(\"Skipping borrowck because of injected body\");"}, {"sha": "ad2624a5d2d7baced150077ec9a6b60c2a12cd3e", "filename": "compiler/rustc_hir_analysis/src/check/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ce80e210d152619caa99b1bc030f57a352b657a/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce80e210d152619caa99b1bc030f57a352b657a/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs?ref=1ce80e210d152619caa99b1bc030f57a352b657a", "patch": "@@ -494,7 +494,7 @@ fn check_item_type(tcx: TyCtxt<'_>, id: hir::ItemId) {\n     debug!(\n         \"check_item_type(it.def_id={:?}, it.name={})\",\n         id.owner_id,\n-        tcx.def_path_str(id.owner_id.to_def_id())\n+        tcx.def_path_str(id.owner_id)\n     );\n     let _indenter = indenter();\n     match tcx.def_kind(id.owner_id) {"}, {"sha": "b2ebbf993a1ccd5b60a0db1f2c27cf4b4d4f8890", "filename": "compiler/rustc_hir_analysis/src/check/wfcheck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1ce80e210d152619caa99b1bc030f57a352b657a/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce80e210d152619caa99b1bc030f57a352b657a/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=1ce80e210d152619caa99b1bc030f57a352b657a", "patch": "@@ -155,7 +155,7 @@ fn check_item<'tcx>(tcx: TyCtxt<'tcx>, item: &'tcx hir::Item<'tcx>) {\n \n     debug!(\n         ?item.owner_id,\n-        item.name = ? tcx.def_path_str(def_id.to_def_id())\n+        item.name = ? tcx.def_path_str(def_id)\n     );\n \n     match item.kind {\n@@ -251,7 +251,7 @@ fn check_foreign_item(tcx: TyCtxt<'_>, item: &hir::ForeignItem<'_>) {\n \n     debug!(\n         ?item.owner_id,\n-        item.name = ? tcx.def_path_str(def_id.to_def_id())\n+        item.name = ? tcx.def_path_str(def_id)\n     );\n \n     match item.kind {"}, {"sha": "ac393ee15a6842f3619fc8bc30c131693ab4f350", "filename": "compiler/rustc_hir_analysis/src/coherence/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ce80e210d152619caa99b1bc030f57a352b657a/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce80e210d152619caa99b1bc030f57a352b657a/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fmod.rs?ref=1ce80e210d152619caa99b1bc030f57a352b657a", "patch": "@@ -22,7 +22,7 @@ fn check_impl(tcx: TyCtxt<'_>, impl_def_id: LocalDefId, trait_ref: ty::TraitRef<\n     debug!(\n         \"(checking implementation) adding impl for trait '{:?}', item '{}'\",\n         trait_ref,\n-        tcx.def_path_str(impl_def_id.to_def_id())\n+        tcx.def_path_str(impl_def_id)\n     );\n \n     // Skip impls where one of the self type is an error type."}, {"sha": "6f0afae1b4c683e96c572d405c0ae0c8b1c2133b", "filename": "compiler/rustc_hir_analysis/src/variance/constraints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ce80e210d152619caa99b1bc030f57a352b657a/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fconstraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce80e210d152619caa99b1bc030f57a352b657a/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fconstraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fconstraints.rs?ref=1ce80e210d152619caa99b1bc030f57a352b657a", "patch": "@@ -92,7 +92,7 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n \n     fn build_constraints_for_item(&mut self, def_id: LocalDefId) {\n         let tcx = self.tcx();\n-        debug!(\"build_constraints_for_item({})\", tcx.def_path_str(def_id.to_def_id()));\n+        debug!(\"build_constraints_for_item({})\", tcx.def_path_str(def_id));\n \n         // Skip items with no generics - there's nothing to infer in them.\n         if tcx.generics_of(def_id).count() == 0 {"}, {"sha": "2dc5b8969934f2cf4d7c3ae65c0411baec3446e2", "filename": "compiler/rustc_middle/src/dep_graph/dep_node.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ce80e210d152619caa99b1bc030f57a352b657a/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce80e210d152619caa99b1bc030f57a352b657a/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs?ref=1ce80e210d152619caa99b1bc030f57a352b657a", "patch": "@@ -364,7 +364,7 @@ impl<'tcx> DepNodeParams<TyCtxt<'tcx>> for HirId {\n     #[inline(always)]\n     fn to_debug_str(&self, tcx: TyCtxt<'tcx>) -> String {\n         let HirId { owner, local_id } = *self;\n-        format!(\"{}.{}\", tcx.def_path_str(owner.to_def_id()), local_id.as_u32())\n+        format!(\"{}.{}\", tcx.def_path_str(owner), local_id.as_u32())\n     }\n \n     #[inline(always)]"}, {"sha": "5c01a6613263d796d52cff80617c57a1dcae592a", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ce80e210d152619caa99b1bc030f57a352b657a/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce80e210d152619caa99b1bc030f57a352b657a/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=1ce80e210d152619caa99b1bc030f57a352b657a", "patch": "@@ -1217,7 +1217,7 @@ fn upstream_crates(tcx: TyCtxt<'_>) -> Vec<(StableCrateId, Svh)> {\n }\n \n fn hir_id_to_string(map: Map<'_>, id: HirId) -> String {\n-    let path_str = |def_id: LocalDefId| map.tcx.def_path_str(def_id.to_def_id());\n+    let path_str = |def_id: LocalDefId| map.tcx.def_path_str(def_id);\n \n     let span_str = || map.tcx.sess.source_map().span_to_snippet(map.span(id)).unwrap_or_default();\n     let node_str = |prefix| format!(\"{id} ({prefix} `{}`)\", span_str());"}, {"sha": "52cf7145b213643928316de7472e8dfea07476f9", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 33, "deletions": 33, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/1ce80e210d152619caa99b1bc030f57a352b657a/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce80e210d152619caa99b1bc030f57a352b657a/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=1ce80e210d152619caa99b1bc030f57a352b657a", "patch": "@@ -83,7 +83,7 @@ rustc_queries! {\n     /// Avoid calling this query directly.\n     query hir_module_items(key: LocalDefId) -> &'tcx rustc_middle::hir::ModuleItems {\n         arena_cache\n-        desc { |tcx| \"getting HIR module items in `{}`\", tcx.def_path_str(key.to_def_id()) }\n+        desc { |tcx| \"getting HIR module items in `{}`\", tcx.def_path_str(key) }\n         cache_on_disk_if { true }\n     }\n \n@@ -92,14 +92,14 @@ rustc_queries! {\n     /// This can be conveniently accessed by methods on `tcx.hir()`.\n     /// Avoid calling this query directly.\n     query hir_owner(key: hir::OwnerId) -> Option<crate::hir::Owner<'tcx>> {\n-        desc { |tcx| \"getting HIR owner of `{}`\", tcx.def_path_str(key.to_def_id()) }\n+        desc { |tcx| \"getting HIR owner of `{}`\", tcx.def_path_str(key) }\n     }\n \n     /// Gives access to the HIR ID for the given `LocalDefId` owner `key` if any.\n     ///\n     /// Definitions that were generated with no HIR, would be fed to return `None`.\n     query opt_local_def_id_to_hir_id(key: LocalDefId) -> Option<hir::HirId>{\n-        desc { |tcx| \"getting HIR ID of `{}`\", tcx.def_path_str(key.to_def_id()) }\n+        desc { |tcx| \"getting HIR ID of `{}`\", tcx.def_path_str(key) }\n         feedable\n     }\n \n@@ -108,23 +108,23 @@ rustc_queries! {\n     /// This can be conveniently accessed by methods on `tcx.hir()`.\n     /// Avoid calling this query directly.\n     query hir_owner_parent(key: hir::OwnerId) -> hir::HirId {\n-        desc { |tcx| \"getting HIR parent of `{}`\", tcx.def_path_str(key.to_def_id()) }\n+        desc { |tcx| \"getting HIR parent of `{}`\", tcx.def_path_str(key) }\n     }\n \n     /// Gives access to the HIR nodes and bodies inside the HIR owner `key`.\n     ///\n     /// This can be conveniently accessed by methods on `tcx.hir()`.\n     /// Avoid calling this query directly.\n     query hir_owner_nodes(key: hir::OwnerId) -> hir::MaybeOwner<&'tcx hir::OwnerNodes<'tcx>> {\n-        desc { |tcx| \"getting HIR owner items in `{}`\", tcx.def_path_str(key.to_def_id()) }\n+        desc { |tcx| \"getting HIR owner items in `{}`\", tcx.def_path_str(key) }\n     }\n \n     /// Gives access to the HIR attributes inside the HIR owner `key`.\n     ///\n     /// This can be conveniently accessed by methods on `tcx.hir()`.\n     /// Avoid calling this query directly.\n     query hir_attrs(key: hir::OwnerId) -> &'tcx hir::AttributeMap<'tcx> {\n-        desc { |tcx| \"getting HIR owner attributes in `{}`\", tcx.def_path_str(key.to_def_id()) }\n+        desc { |tcx| \"getting HIR owner attributes in `{}`\", tcx.def_path_str(key) }\n     }\n \n     /// Given the def_id of a const-generic parameter, computes the associated default const\n@@ -295,7 +295,7 @@ rustc_queries! {\n     query shallow_lint_levels_on(key: hir::OwnerId) -> &'tcx rustc_middle::lint::ShallowLintLevelMap {\n         eval_always // fetches `resolutions`\n         arena_cache\n-        desc { |tcx| \"looking up lint levels for `{}`\", tcx.def_path_str(key.to_def_id()) }\n+        desc { |tcx| \"looking up lint levels for `{}`\", tcx.def_path_str(key) }\n     }\n \n     query lint_expectations(_: ()) -> &'tcx Vec<(LintExpectationId, LintExpectation)> {\n@@ -305,7 +305,7 @@ rustc_queries! {\n \n     query parent_module_from_def_id(key: LocalDefId) -> LocalDefId {\n         eval_always\n-        desc { |tcx| \"getting the parent module of `{}`\", tcx.def_path_str(key.to_def_id()) }\n+        desc { |tcx| \"getting the parent module of `{}`\", tcx.def_path_str(key) }\n     }\n \n     query expn_that_defined(key: DefId) -> rustc_span::ExpnId {\n@@ -321,7 +321,7 @@ rustc_queries! {\n \n     /// Checks whether a type is representable or infinitely sized\n     query representability(_: LocalDefId) -> rustc_middle::ty::Representability {\n-        desc { \"checking if `{}` is representable\", tcx.def_path_str(key.to_def_id()) }\n+        desc { \"checking if `{}` is representable\", tcx.def_path_str(key) }\n         // infinitely sized types will cause a cycle\n         cycle_delay_bug\n         // we don't want recursive representability calls to be forced with\n@@ -349,21 +349,21 @@ rustc_queries! {\n     query thir_body(key: LocalDefId) -> Result<(&'tcx Steal<thir::Thir<'tcx>>, thir::ExprId), ErrorGuaranteed> {\n         // Perf tests revealed that hashing THIR is inefficient (see #85729).\n         no_hash\n-        desc { |tcx| \"building THIR for `{}`\", tcx.def_path_str(key.to_def_id()) }\n+        desc { |tcx| \"building THIR for `{}`\", tcx.def_path_str(key) }\n     }\n \n     /// Create a THIR tree for debugging.\n     query thir_tree(key: LocalDefId) -> &'tcx String {\n         no_hash\n         arena_cache\n-        desc { |tcx| \"constructing THIR tree for `{}`\", tcx.def_path_str(key.to_def_id()) }\n+        desc { |tcx| \"constructing THIR tree for `{}`\", tcx.def_path_str(key) }\n     }\n \n     /// Create a list-like THIR representation for debugging.\n     query thir_flat(key: LocalDefId) -> &'tcx String {\n         no_hash\n         arena_cache\n-        desc { |tcx| \"constructing flat THIR representation for `{}`\", tcx.def_path_str(key.to_def_id()) }\n+        desc { |tcx| \"constructing flat THIR representation for `{}`\", tcx.def_path_str(key) }\n     }\n \n     /// Set of all the `DefId`s in this crate that have MIR associated with\n@@ -386,15 +386,15 @@ rustc_queries! {\n     /// Fetch the MIR for a given `DefId` right after it's built - this includes\n     /// unreachable code.\n     query mir_built(key: LocalDefId) -> &'tcx Steal<mir::Body<'tcx>> {\n-        desc { |tcx| \"building MIR for `{}`\", tcx.def_path_str(key.to_def_id()) }\n+        desc { |tcx| \"building MIR for `{}`\", tcx.def_path_str(key) }\n     }\n \n     /// Fetch the MIR for a given `DefId` up till the point where it is\n     /// ready for const qualification.\n     ///\n     /// See the README for the `mir` module for details.\n     query mir_const(key: LocalDefId) -> &'tcx Steal<mir::Body<'tcx>> {\n-        desc { |tcx| \"preparing `{}` for borrow checking\", tcx.def_path_str(key.to_def_id()) }\n+        desc { |tcx| \"preparing `{}` for borrow checking\", tcx.def_path_str(key) }\n         no_hash\n     }\n \n@@ -410,7 +410,7 @@ rustc_queries! {\n \n     query mir_drops_elaborated_and_const_checked(key: LocalDefId) -> &'tcx Steal<mir::Body<'tcx>> {\n         no_hash\n-        desc { |tcx| \"elaborating drops for `{}`\", tcx.def_path_str(key.to_def_id()) }\n+        desc { |tcx| \"elaborating drops for `{}`\", tcx.def_path_str(key) }\n     }\n \n     query mir_for_ctfe(\n@@ -426,13 +426,13 @@ rustc_queries! {\n         &'tcx Steal<IndexVec<mir::Promoted, mir::Body<'tcx>>>\n     ) {\n         no_hash\n-        desc { |tcx| \"promoting constants in MIR for `{}`\", tcx.def_path_str(key.to_def_id()) }\n+        desc { |tcx| \"promoting constants in MIR for `{}`\", tcx.def_path_str(key) }\n     }\n \n     query closure_typeinfo(key: LocalDefId) -> ty::ClosureTypeInfo<'tcx> {\n         desc {\n             |tcx| \"finding symbols for captures of closure `{}`\",\n-            tcx.def_path_str(key.to_def_id())\n+            tcx.def_path_str(key)\n         }\n     }\n \n@@ -444,7 +444,7 @@ rustc_queries! {\n     }\n \n     query check_generator_obligations(key: LocalDefId) {\n-        desc { |tcx| \"verify auto trait bounds for generator interior type `{}`\", tcx.def_path_str(key.to_def_id()) }\n+        desc { |tcx| \"verify auto trait bounds for generator interior type `{}`\", tcx.def_path_str(key) }\n     }\n \n     /// MIR after our optimization passes have run. This is MIR that is ready\n@@ -526,7 +526,7 @@ rustc_queries! {\n     /// `explicit_predicates_of` and `explicit_item_bounds` will then take\n     /// the appropriate subsets of the predicates here.\n     query trait_explicit_predicates_and_bounds(key: LocalDefId) -> ty::GenericPredicates<'tcx> {\n-        desc { |tcx| \"computing explicit predicates of trait `{}`\", tcx.def_path_str(key.to_def_id()) }\n+        desc { |tcx| \"computing explicit predicates of trait `{}`\", tcx.def_path_str(key) }\n     }\n \n     /// Returns the predicates written explicitly by the user.\n@@ -768,14 +768,14 @@ rustc_queries! {\n \n     /// The result of unsafety-checking this `LocalDefId`.\n     query unsafety_check_result(key: LocalDefId) -> &'tcx mir::UnsafetyCheckResult {\n-        desc { |tcx| \"unsafety-checking `{}`\", tcx.def_path_str(key.to_def_id()) }\n+        desc { |tcx| \"unsafety-checking `{}`\", tcx.def_path_str(key) }\n         cache_on_disk_if { true }\n     }\n \n     /// Unsafety-check this `LocalDefId` with THIR unsafeck. This should be\n     /// used with `-Zthir-unsafeck`.\n     query thir_check_unsafety(key: LocalDefId) {\n-        desc { |tcx| \"unsafety-checking `{}`\", tcx.def_path_str(key.to_def_id()) }\n+        desc { |tcx| \"unsafety-checking `{}`\", tcx.def_path_str(key) }\n         cache_on_disk_if { true }\n     }\n \n@@ -872,16 +872,16 @@ rustc_queries! {\n     }\n \n     query typeck(key: LocalDefId) -> &'tcx ty::TypeckResults<'tcx> {\n-        desc { |tcx| \"type-checking `{}`\", tcx.def_path_str(key.to_def_id()) }\n+        desc { |tcx| \"type-checking `{}`\", tcx.def_path_str(key) }\n         cache_on_disk_if { true }\n     }\n     query diagnostic_only_typeck(key: LocalDefId) -> &'tcx ty::TypeckResults<'tcx> {\n-        desc { |tcx| \"type-checking `{}`\", tcx.def_path_str(key.to_def_id()) }\n+        desc { |tcx| \"type-checking `{}`\", tcx.def_path_str(key) }\n         cache_on_disk_if { true }\n     }\n \n     query used_trait_imports(key: LocalDefId) -> &'tcx UnordSet<LocalDefId> {\n-        desc { |tcx| \"finding used_trait_imports `{}`\", tcx.def_path_str(key.to_def_id()) }\n+        desc { |tcx| \"finding used_trait_imports `{}`\", tcx.def_path_str(key) }\n         cache_on_disk_if { true }\n     }\n \n@@ -896,7 +896,7 @@ rustc_queries! {\n     /// Borrow-checks the function body. If this is a closure, returns\n     /// additional requirements that the closure's creator must verify.\n     query mir_borrowck(key: LocalDefId) -> &'tcx mir::BorrowCheckResult<'tcx> {\n-        desc { |tcx| \"borrow-checking `{}`\", tcx.def_path_str(key.to_def_id()) }\n+        desc { |tcx| \"borrow-checking `{}`\", tcx.def_path_str(key) }\n         cache_on_disk_if(tcx) { tcx.is_typeck_child(key.to_def_id()) }\n     }\n \n@@ -918,7 +918,7 @@ rustc_queries! {\n     query orphan_check_impl(key: LocalDefId) -> Result<(), ErrorGuaranteed> {\n         desc { |tcx|\n             \"checking whether impl `{}` follows the orphan rules\",\n-            tcx.def_path_str(key.to_def_id()),\n+            tcx.def_path_str(key),\n         }\n     }\n \n@@ -930,7 +930,7 @@ rustc_queries! {\n         desc { |tcx|\n             \"computing if `{}` (transitively) calls `{}`\",\n             key.0,\n-            tcx.def_path_str(key.1.to_def_id()),\n+            tcx.def_path_str(key.1),\n         }\n     }\n \n@@ -1368,7 +1368,7 @@ rustc_queries! {\n         separate_provide_extern\n     }\n     query has_ffi_unwind_calls(key: LocalDefId) -> bool {\n-        desc { |tcx| \"checking if `{}` contains FFI-unwind calls\", tcx.def_path_str(key.to_def_id()) }\n+        desc { |tcx| \"checking if `{}` contains FFI-unwind calls\", tcx.def_path_str(key) }\n         cache_on_disk_if { true }\n     }\n     query required_panic_strategy(_: CrateNum) -> Option<PanicStrategy> {\n@@ -1414,7 +1414,7 @@ rustc_queries! {\n     }\n \n     query check_well_formed(key: hir::OwnerId) -> () {\n-        desc { |tcx| \"checking that `{}` is well-formed\", tcx.def_path_str(key.to_def_id()) }\n+        desc { |tcx| \"checking that `{}` is well-formed\", tcx.def_path_str(key) }\n     }\n \n     // The `DefId`s of all non-generic functions and statics in the given crate\n@@ -1443,7 +1443,7 @@ rustc_queries! {\n     query is_unreachable_local_definition(def_id: LocalDefId) -> bool {\n         desc { |tcx|\n             \"checking whether `{}` is reachable from outside the crate\",\n-            tcx.def_path_str(def_id.to_def_id()),\n+            tcx.def_path_str(def_id),\n         }\n     }\n \n@@ -1637,7 +1637,7 @@ rustc_queries! {\n         separate_provide_extern\n     }\n     query extern_mod_stmt_cnum(def_id: LocalDefId) -> Option<CrateNum> {\n-        desc { |tcx| \"computing crate imported by `{}`\", tcx.def_path_str(def_id.to_def_id()) }\n+        desc { |tcx| \"computing crate imported by `{}`\", tcx.def_path_str(def_id) }\n     }\n \n     query lib_features(_: ()) -> &'tcx LibFeatures {\n@@ -1741,7 +1741,7 @@ rustc_queries! {\n         desc { \"fetching potentially unused trait imports\" }\n     }\n     query names_imported_by_glob_use(def_id: LocalDefId) -> &'tcx UnordSet<Symbol> {\n-        desc { |tcx| \"finding names imported by glob use for `{}`\", tcx.def_path_str(def_id.to_def_id()) }\n+        desc { |tcx| \"finding names imported by glob use for `{}`\", tcx.def_path_str(def_id) }\n     }\n \n     query stability_index(_: ()) -> &'tcx stability::Index {\n@@ -2064,7 +2064,7 @@ rustc_queries! {\n     query compare_impl_const(\n         key: (LocalDefId, DefId)\n     ) -> Result<(), ErrorGuaranteed> {\n-        desc { |tcx| \"checking assoc const `{}` has the same type as trait item\", tcx.def_path_str(key.0.to_def_id()) }\n+        desc { |tcx| \"checking assoc const `{}` has the same type as trait item\", tcx.def_path_str(key.0) }\n     }\n \n     query deduced_param_attrs(def_id: DefId) -> &'tcx [ty::DeducedParamAttrs] {"}, {"sha": "8feabc02f935437c4bc57668c5425b3169e80b35", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1ce80e210d152619caa99b1bc030f57a352b657a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce80e210d152619caa99b1bc030f57a352b657a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=1ce80e210d152619caa99b1bc030f57a352b657a", "patch": "@@ -80,6 +80,8 @@ use std::iter;\n use std::mem;\n use std::ops::{Bound, Deref};\n \n+use super::query::IntoQueryParam;\n+\n const TINY_CONST_EVAL_LIMIT: Limit = Limit(20);\n \n pub trait OnDiskCache<'tcx>: rustc_data_structures::sync::Sync {\n@@ -822,7 +824,8 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.features_query(())\n     }\n \n-    pub fn def_key(self, id: DefId) -> rustc_hir::definitions::DefKey {\n+    pub fn def_key(self, id: impl IntoQueryParam<DefId>) -> rustc_hir::definitions::DefKey {\n+        let id = id.into_query_param();\n         // Accessing the DefKey is ok, since it is part of DefPathHash.\n         if let Some(id) = id.as_local() {\n             self.definitions_untracked().def_key(id)"}, {"sha": "5ce32c7aaaa30e83fa2ed6c511337c027dc9c6f5", "filename": "compiler/rustc_middle/src/ty/print/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ce80e210d152619caa99b1bc030f57a352b657a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce80e210d152619caa99b1bc030f57a352b657a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs?ref=1ce80e210d152619caa99b1bc030f57a352b657a", "patch": "@@ -327,6 +327,6 @@ pub fn describe_as_module(def_id: LocalDefId, tcx: TyCtxt<'_>) -> String {\n     if def_id.is_top_level_module() {\n         \"top-level module\".to_string()\n     } else {\n-        format!(\"module `{}`\", tcx.def_path_str(def_id.to_def_id()))\n+        format!(\"module `{}`\", tcx.def_path_str(def_id))\n     }\n }"}, {"sha": "8f143c1362578a7b4847d29084d35272d16a372f", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1ce80e210d152619caa99b1bc030f57a352b657a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce80e210d152619caa99b1bc030f57a352b657a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=1ce80e210d152619caa99b1bc030f57a352b657a", "patch": "@@ -1,4 +1,5 @@\n use crate::mir::interpret::{AllocRange, GlobalAlloc, Pointer, Provenance, Scalar};\n+use crate::ty::query::IntoQueryParam;\n use crate::ty::{\n     self, ConstInt, ParamConst, ScalarInt, Term, TermKind, Ty, TyCtxt, TypeFoldable,\n     TypeSuperFoldable, TypeSuperVisitable, TypeVisitable, TypeVisitableExt,\n@@ -1787,17 +1788,27 @@ fn guess_def_namespace(tcx: TyCtxt<'_>, def_id: DefId) -> Namespace {\n impl<'t> TyCtxt<'t> {\n     /// Returns a string identifying this `DefId`. This string is\n     /// suitable for user output.\n-    pub fn def_path_str(self, def_id: DefId) -> String {\n+    pub fn def_path_str(self, def_id: impl IntoQueryParam<DefId>) -> String {\n         self.def_path_str_with_substs(def_id, &[])\n     }\n \n-    pub fn def_path_str_with_substs(self, def_id: DefId, substs: &'t [GenericArg<'t>]) -> String {\n+    pub fn def_path_str_with_substs(\n+        self,\n+        def_id: impl IntoQueryParam<DefId>,\n+        substs: &'t [GenericArg<'t>],\n+    ) -> String {\n+        let def_id = def_id.into_query_param();\n         let ns = guess_def_namespace(self, def_id);\n         debug!(\"def_path_str: def_id={:?}, ns={:?}\", def_id, ns);\n         FmtPrinter::new(self, ns).print_def_path(def_id, substs).unwrap().into_buffer()\n     }\n \n-    pub fn value_path_str_with_substs(self, def_id: DefId, substs: &'t [GenericArg<'t>]) -> String {\n+    pub fn value_path_str_with_substs(\n+        self,\n+        def_id: impl IntoQueryParam<DefId>,\n+        substs: &'t [GenericArg<'t>],\n+    ) -> String {\n+        let def_id = def_id.into_query_param();\n         let ns = guess_def_namespace(self, def_id);\n         debug!(\"value_path_str: def_id={:?}, ns={:?}\", def_id, ns);\n         FmtPrinter::new(self, ns).print_value_path(def_id, substs).unwrap().into_buffer()"}, {"sha": "bd8a22473fb51262271f7e737b4fa8a518fad9a9", "filename": "compiler/rustc_middle/src/ty/query.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ce80e210d152619caa99b1bc030f57a352b657a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce80e210d152619caa99b1bc030f57a352b657a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs?ref=1ce80e210d152619caa99b1bc030f57a352b657a", "patch": "@@ -587,7 +587,7 @@ mod sealed {\n     }\n }\n \n-use sealed::IntoQueryParam;\n+pub use sealed::IntoQueryParam;\n \n impl<'tcx> TyCtxt<'tcx> {\n     pub fn def_kind(self, def_id: impl IntoQueryParam<DefId>) -> DefKind {"}, {"sha": "5c38c0acc7f86c220acf195a4036df5bc7e31d9b", "filename": "compiler/rustc_middle/src/values.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1ce80e210d152619caa99b1bc030f57a352b657a/compiler%2Frustc_middle%2Fsrc%2Fvalues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce80e210d152619caa99b1bc030f57a352b657a/compiler%2Frustc_middle%2Fsrc%2Fvalues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fvalues.rs?ref=1ce80e210d152619caa99b1bc030f57a352b657a", "patch": "@@ -158,8 +158,8 @@ pub fn recursive_type_error(\n     }\n     let items_list = {\n         let mut s = String::new();\n-        for (i, (item_id, _)) in item_and_field_ids.iter().enumerate() {\n-            let path = tcx.def_path_str(item_id.to_def_id());\n+        for (i, &(item_id, _)) in item_and_field_ids.iter().enumerate() {\n+            let path = tcx.def_path_str(item_id);\n             write!(&mut s, \"`{path}`\").unwrap();\n             if i == (ITEM_LIMIT - 1) && cycle_len > ITEM_LIMIT {\n                 write!(&mut s, \" and {} more\", cycle_len - 5).unwrap();"}, {"sha": "098ce0391fcd26ad619544add39893e1d862a863", "filename": "compiler/rustc_mir_transform/src/inline/cycle.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ce80e210d152619caa99b1bc030f57a352b657a/compiler%2Frustc_mir_transform%2Fsrc%2Finline%2Fcycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce80e210d152619caa99b1bc030f57a352b657a/compiler%2Frustc_mir_transform%2Fsrc%2Finline%2Fcycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finline%2Fcycle.rs?ref=1ce80e210d152619caa99b1bc030f57a352b657a", "patch": "@@ -13,7 +13,7 @@ pub(crate) fn mir_callgraph_reachable<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     (root, target): (ty::Instance<'tcx>, LocalDefId),\n ) -> bool {\n-    trace!(%root, target = %tcx.def_path_str(target.to_def_id()));\n+    trace!(%root, target = %tcx.def_path_str(target));\n     let param_env = tcx.param_env_reveal_all_normalized(target);\n     assert_ne!(\n         root.def_id().expect_local(),"}, {"sha": "5ac9c8e2073dd6cff9dd61f27c9bdc3f37aadc7e", "filename": "compiler/rustc_monomorphize/src/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ce80e210d152619caa99b1bc030f57a352b657a/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce80e210d152619caa99b1bc030f57a352b657a/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs?ref=1ce80e210d152619caa99b1bc030f57a352b657a", "patch": "@@ -1230,7 +1230,7 @@ impl<'v> RootCollector<'_, 'v> {\n             DefKind::GlobalAsm => {\n                 debug!(\n                     \"RootCollector: ItemKind::GlobalAsm({})\",\n-                    self.tcx.def_path_str(id.owner_id.to_def_id())\n+                    self.tcx.def_path_str(id.owner_id)\n                 );\n                 self.output.push(dummy_spanned(MonoItem::GlobalAsm(id)));\n             }"}, {"sha": "985b2210745f46b1d6aa698c533253dcd5dc446f", "filename": "compiler/rustc_symbol_mangling/src/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ce80e210d152619caa99b1bc030f57a352b657a/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce80e210d152619caa99b1bc030f57a352b657a/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftest.rs?ref=1ce80e210d152619caa99b1bc030f57a352b657a", "patch": "@@ -83,7 +83,7 @@ impl SymbolNamesTest<'_> {\n             tcx.sess.emit_err(TestOutput {\n                 span: attr.span,\n                 kind: Kind::DefPath,\n-                content: with_no_trimmed_paths!(tcx.def_path_str(def_id.to_def_id())),\n+                content: with_no_trimmed_paths!(tcx.def_path_str(def_id)),\n             });\n         }\n     }"}, {"sha": "03b5a2d6d0829ac4fec38c49eae6adfc5a222a7c", "filename": "src/tools/clippy/clippy_lints/src/default_union_representation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ce80e210d152619caa99b1bc030f57a352b657a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdefault_union_representation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce80e210d152619caa99b1bc030f57a352b657a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdefault_union_representation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdefault_union_representation.rs?ref=1ce80e210d152619caa99b1bc030f57a352b657a", "patch": "@@ -61,7 +61,7 @@ impl<'tcx> LateLintPass<'tcx> for DefaultUnionRepresentation {\n                 None,\n                 &format!(\n                     \"consider annotating `{}` with `#[repr(C)]` to explicitly specify memory layout\",\n-                    cx.tcx.def_path_str(item.owner_id.to_def_id())\n+                    cx.tcx.def_path_str(item.owner_id)\n                 ),\n             );\n         }"}, {"sha": "98f5b47f7a0e4f455dee27366d1d26c3a3cf04e3", "filename": "src/tools/clippy/clippy_lints/src/trailing_empty_array.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ce80e210d152619caa99b1bc030f57a352b657a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftrailing_empty_array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce80e210d152619caa99b1bc030f57a352b657a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftrailing_empty_array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftrailing_empty_array.rs?ref=1ce80e210d152619caa99b1bc030f57a352b657a", "patch": "@@ -46,7 +46,7 @@ impl<'tcx> LateLintPass<'tcx> for TrailingEmptyArray {\n                 None,\n                 &format!(\n                     \"consider annotating `{}` with `#[repr(C)]` or another `repr` attribute\",\n-                    cx.tcx.def_path_str(item.owner_id.to_def_id())\n+                    cx.tcx.def_path_str(item.owner_id)\n                 ),\n             );\n         }"}]}