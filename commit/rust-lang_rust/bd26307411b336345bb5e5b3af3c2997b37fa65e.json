{"sha": "bd26307411b336345bb5e5b3af3c2997b37fa65e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkMjYzMDc0MTFiMzM2MzQ1YmI1ZTViM2FmM2MyOTk3YjM3ZmE2NWU=", "commit": {"author": {"name": "Ryan Prichard", "email": "ryan.prichard@gmail.com", "date": "2015-04-10T11:11:21Z"}, "committer": {"name": "Ryan Prichard", "email": "ryan.prichard@gmail.com", "date": "2015-04-13T05:01:55Z"}, "message": "Use the ecx.call_site() span for generating refs to format_args! internals\n\n`format_args!` uses `#[allow_internal_unstable]` to access internal\nfunctions and structs that are marked unstable. For this to work, the\nspans on AST nodes referencing unstable internals must be equal (same\nlo/hi values) to the `format_args!` call site, so that the stability\nchecker can recognize that the AST node was generated by the macro.", "tree": {"sha": "777c13c2ea2b018e479167de4c2024027d7feefa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/777c13c2ea2b018e479167de4c2024027d7feefa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd26307411b336345bb5e5b3af3c2997b37fa65e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd26307411b336345bb5e5b3af3c2997b37fa65e", "html_url": "https://github.com/rust-lang/rust/commit/bd26307411b336345bb5e5b3af3c2997b37fa65e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd26307411b336345bb5e5b3af3c2997b37fa65e/comments", "author": {"login": "rprichard", "id": 1572855, "node_id": "MDQ6VXNlcjE1NzI4NTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1572855?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rprichard", "html_url": "https://github.com/rprichard", "followers_url": "https://api.github.com/users/rprichard/followers", "following_url": "https://api.github.com/users/rprichard/following{/other_user}", "gists_url": "https://api.github.com/users/rprichard/gists{/gist_id}", "starred_url": "https://api.github.com/users/rprichard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rprichard/subscriptions", "organizations_url": "https://api.github.com/users/rprichard/orgs", "repos_url": "https://api.github.com/users/rprichard/repos", "events_url": "https://api.github.com/users/rprichard/events{/privacy}", "received_events_url": "https://api.github.com/users/rprichard/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rprichard", "id": 1572855, "node_id": "MDQ6VXNlcjE1NzI4NTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1572855?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rprichard", "html_url": "https://github.com/rprichard", "followers_url": "https://api.github.com/users/rprichard/followers", "following_url": "https://api.github.com/users/rprichard/following{/other_user}", "gists_url": "https://api.github.com/users/rprichard/gists{/gist_id}", "starred_url": "https://api.github.com/users/rprichard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rprichard/subscriptions", "organizations_url": "https://api.github.com/users/rprichard/orgs", "repos_url": "https://api.github.com/users/rprichard/repos", "events_url": "https://api.github.com/users/rprichard/events{/privacy}", "received_events_url": "https://api.github.com/users/rprichard/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47def3ef27a2e027f1a93ef7870ff131ee7926fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/47def3ef27a2e027f1a93ef7870ff131ee7926fd", "html_url": "https://github.com/rust-lang/rust/commit/47def3ef27a2e027f1a93ef7870ff131ee7926fd"}], "stats": {"total": 44, "additions": 25, "deletions": 19}, "files": [{"sha": "374f6fa50406f39efd40a5faad10bbc26349fd1f", "filename": "src/libsyntax/ext/format.rs", "status": "modified", "additions": 25, "deletions": 19, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/bd26307411b336345bb5e5b3af3c2997b37fa65e/src%2Flibsyntax%2Fext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd26307411b336345bb5e5b3af3c2997b37fa65e/src%2Flibsyntax%2Fext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fformat.rs?ref=bd26307411b336345bb5e5b3af3c2997b37fa65e", "patch": "@@ -38,6 +38,10 @@ enum Position {\n \n struct Context<'a, 'b:'a> {\n     ecx: &'a mut ExtCtxt<'b>,\n+    /// The macro's call site. References to unstable formatting internals must\n+    /// use this span to pass the stability checker.\n+    macsp: Span,\n+    /// The span of the format string literal.\n     fmtsp: Span,\n \n     /// Parsed argument expressions and the types that we've found so far for\n@@ -308,7 +312,7 @@ impl<'a, 'b> Context<'a, 'b> {\n     }\n \n     fn trans_count(&self, c: parse::Count) -> P<ast::Expr> {\n-        let sp = self.fmtsp;\n+        let sp = self.macsp;\n         let count = |c, arg| {\n             let mut path = Context::rtpath(self.ecx, \"Count\");\n             path.push(self.ecx.ident_of(c));\n@@ -346,7 +350,7 @@ impl<'a, 'b> Context<'a, 'b> {\n     /// Translate a `parse::Piece` to a static `rt::Argument` or append\n     /// to the `literal` string.\n     fn trans_piece(&mut self, piece: &parse::Piece) -> Option<P<ast::Expr>> {\n-        let sp = self.fmtsp;\n+        let sp = self.macsp;\n         match *piece {\n             parse::String(s) => {\n                 self.literal.push_str(s);\n@@ -442,22 +446,22 @@ impl<'a, 'b> Context<'a, 'b> {\n                     piece_ty: P<ast::Ty>,\n                     pieces: Vec<P<ast::Expr>>)\n                     -> P<ast::Expr> {\n-        let fmtsp = piece_ty.span;\n-        let ty = ecx.ty_rptr(fmtsp,\n-            ecx.ty(fmtsp, ast::TyVec(piece_ty)),\n-            Some(ecx.lifetime(fmtsp, special_idents::static_lifetime.name)),\n+        let sp = piece_ty.span;\n+        let ty = ecx.ty_rptr(sp,\n+            ecx.ty(sp, ast::TyVec(piece_ty)),\n+            Some(ecx.lifetime(sp, special_idents::static_lifetime.name)),\n             ast::MutImmutable);\n-        let slice = ecx.expr_vec_slice(fmtsp, pieces);\n+        let slice = ecx.expr_vec_slice(sp, pieces);\n         let st = ast::ItemStatic(ty, ast::MutImmutable, slice);\n \n         let name = ecx.ident_of(name);\n-        let item = ecx.item(fmtsp, name, vec![], st);\n-        let decl = respan(fmtsp, ast::DeclItem(item));\n+        let item = ecx.item(sp, name, vec![], st);\n+        let decl = respan(sp, ast::DeclItem(item));\n \n         // Wrap the declaration in a block so that it forms a single expression.\n-        ecx.expr_block(ecx.block(fmtsp,\n-            vec![P(respan(fmtsp, ast::StmtDecl(P(decl), ast::DUMMY_NODE_ID)))],\n-            Some(ecx.expr_ident(fmtsp, name))))\n+        ecx.expr_block(ecx.block(sp,\n+            vec![P(respan(sp, ast::StmtDecl(P(decl), ast::DUMMY_NODE_ID)))],\n+            Some(ecx.expr_ident(sp, name))))\n     }\n \n     /// Actually builds the expression which the iformat! block will be expanded\n@@ -497,7 +501,7 @@ impl<'a, 'b> Context<'a, 'b> {\n \n             let name = self.ecx.ident_of(&format!(\"__arg{}\", i));\n             pats.push(self.ecx.pat_ident(e.span, name));\n-            locals.push(Context::format_arg(self.ecx, e.span, arg_ty,\n+            locals.push(Context::format_arg(self.ecx, self.macsp, e.span, arg_ty,\n                                             self.ecx.expr_ident(e.span, name)));\n             heads.push(self.ecx.expr_addr_of(e.span, e));\n         }\n@@ -515,7 +519,7 @@ impl<'a, 'b> Context<'a, 'b> {\n                                                   *name));\n             pats.push(self.ecx.pat_ident(e.span, lname));\n             names[*self.name_positions.get(name).unwrap()] =\n-                Some(Context::format_arg(self.ecx, e.span, arg_ty,\n+                Some(Context::format_arg(self.ecx, self.macsp, e.span, arg_ty,\n                                          self.ecx.expr_ident(e.span, lname)));\n             heads.push(self.ecx.expr_addr_of(e.span, e));\n         }\n@@ -566,7 +570,7 @@ impl<'a, 'b> Context<'a, 'b> {\n             // Build up the static array which will store our precompiled\n             // nonstandard placeholders, if there are any.\n             let piece_ty = self.ecx.ty_path(self.ecx.path_global(\n-                    self.fmtsp,\n+                    self.macsp,\n                     Context::rtpath(self.ecx, \"Argument\")));\n             let fmt = Context::static_array(self.ecx,\n                                             \"__STATIC_FMTARGS\",\n@@ -576,14 +580,14 @@ impl<'a, 'b> Context<'a, 'b> {\n             (\"new_v1_formatted\", vec![pieces, args_slice, fmt])\n         };\n \n-        self.ecx.expr_call_global(self.fmtsp, vec!(\n+        self.ecx.expr_call_global(self.macsp, vec!(\n                 self.ecx.ident_of_std(\"core\"),\n                 self.ecx.ident_of(\"fmt\"),\n                 self.ecx.ident_of(\"Arguments\"),\n                 self.ecx.ident_of(fn_name)), fn_args)\n     }\n \n-    fn format_arg(ecx: &ExtCtxt, sp: Span,\n+    fn format_arg(ecx: &ExtCtxt, macsp: Span, sp: Span,\n                   ty: &ArgumentType, arg: P<ast::Expr>)\n                   -> P<ast::Expr> {\n         let trait_ = match *ty {\n@@ -607,7 +611,7 @@ impl<'a, 'b> Context<'a, 'b> {\n                 }\n             }\n             Unsigned => {\n-                return ecx.expr_call_global(sp, vec![\n+                return ecx.expr_call_global(macsp, vec![\n                         ecx.ident_of_std(\"core\"),\n                         ecx.ident_of(\"fmt\"),\n                         ecx.ident_of(\"ArgumentV1\"),\n@@ -620,7 +624,7 @@ impl<'a, 'b> Context<'a, 'b> {\n                 ecx.ident_of(\"fmt\"),\n                 ecx.ident_of(trait_),\n                 ecx.ident_of(\"fmt\")]);\n-        ecx.expr_call_global(sp, vec![\n+        ecx.expr_call_global(macsp, vec![\n                 ecx.ident_of_std(\"core\"),\n                 ecx.ident_of(\"fmt\"),\n                 ecx.ident_of(\"ArgumentV1\"),\n@@ -650,6 +654,7 @@ pub fn expand_preparsed_format_args(ecx: &mut ExtCtxt, sp: Span,\n                                     names: HashMap<String, P<ast::Expr>>)\n                                     -> P<ast::Expr> {\n     let arg_types: Vec<_> = (0..args.len()).map(|_| None).collect();\n+    let macsp = ecx.call_site();\n     // Expand the format literal so that efmt.span will have a backtrace. This\n     // is essential for locating a bug when the format literal is generated in\n     // a macro. (e.g. println!(\"{}\"), which uses concat!($fmt, \"\\n\")).\n@@ -668,6 +673,7 @@ pub fn expand_preparsed_format_args(ecx: &mut ExtCtxt, sp: Span,\n         pieces: Vec::new(),\n         str_pieces: Vec::new(),\n         all_pieces_simple: true,\n+        macsp: macsp,\n         fmtsp: efmt.span,\n     };\n     let fmt = match expr_to_string(cx.ecx,"}]}