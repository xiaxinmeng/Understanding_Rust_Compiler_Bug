{"sha": "9d14a626280afea4527765c9fa2c489e30dafc19", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkMTRhNjI2MjgwYWZlYTQ1Mjc3NjVjOWZhMmM0ODllMzBkYWZjMTk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-18T11:39:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-18T11:39:31Z"}, "message": "Auto merge of #913 - RalfJung:uninit, r=RalfJung\n\ntest some new uninit APIs", "tree": {"sha": "82c7aaaf26dcdbddd1ce1947604727ac937d5acc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82c7aaaf26dcdbddd1ce1947604727ac937d5acc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d14a626280afea4527765c9fa2c489e30dafc19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d14a626280afea4527765c9fa2c489e30dafc19", "html_url": "https://github.com/rust-lang/rust/commit/9d14a626280afea4527765c9fa2c489e30dafc19", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d14a626280afea4527765c9fa2c489e30dafc19/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "285a585fd0e2bfd4e2c4b4e2ee95bb14cb1b26ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/285a585fd0e2bfd4e2c4b4e2ee95bb14cb1b26ed", "html_url": "https://github.com/rust-lang/rust/commit/285a585fd0e2bfd4e2c4b4e2ee95bb14cb1b26ed"}, {"sha": "be4108e27cf4ff452d3b667097c9e7c893063892", "url": "https://api.github.com/repos/rust-lang/rust/commits/be4108e27cf4ff452d3b667097c9e7c893063892", "html_url": "https://github.com/rust-lang/rust/commit/be4108e27cf4ff452d3b667097c9e7c893063892"}], "stats": {"total": 49, "additions": 49, "deletions": 0}, "files": [{"sha": "9ab460c961651e56cd14e324b496ed9f62dbc9f2", "filename": "tests/run-pass/rc.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/9d14a626280afea4527765c9fa2c489e30dafc19/tests%2Frun-pass%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d14a626280afea4527765c9fa2c489e30dafc19/tests%2Frun-pass%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Frc.rs?ref=9d14a626280afea4527765c9fa2c489e30dafc19", "patch": "@@ -1,4 +1,6 @@\n #![feature(weak_into_raw)]\n+#![feature(new_uninit)]\n+#![feature(get_mut_unchecked)]\n \n use std::cell::{Cell, RefCell};\n use std::rc::{Rc, Weak};\n@@ -102,6 +104,33 @@ fn weak_from_raw() {\n     assert!(Weak::upgrade(&unsafe { Weak::from_raw(raw_2) }).is_none());\n }\n \n+fn rc_uninit() {\n+    let mut five = Rc::<Box<u32>>::new_uninit();\n+    let five = unsafe {\n+        // Deferred initialization:\n+        Rc::get_mut_unchecked(&mut five).as_mut_ptr().write(Box::new(5));\n+        five.assume_init()\n+    };\n+    assert_eq!(**five, 5)\n+}\n+\n+fn rc_uninit_slice() {\n+    let mut values = Rc::<[Box<usize>]>::new_uninit_slice(3);\n+\n+    let values = unsafe {\n+        // Deferred initialization:\n+        Rc::get_mut_unchecked(&mut values)[0].as_mut_ptr().write(Box::new(0));\n+        Rc::get_mut_unchecked(&mut values)[1].as_mut_ptr().write(Box::new(1));\n+        Rc::get_mut_unchecked(&mut values)[2].as_mut_ptr().write(Box::new(2));\n+\n+        values.assume_init()\n+    };\n+\n+    for (idx, i) in values.iter().enumerate() {\n+        assert_eq!(idx, **i);\n+    }\n+}\n+\n fn main() {\n     rc_fat_ptr_eq();\n     rc_refcell();\n@@ -111,6 +140,8 @@ fn main() {\n     rc_from();\n     weak_into_raw();\n     weak_from_raw();\n+    rc_uninit();\n+    rc_uninit_slice();\n \n     arc();\n }"}, {"sha": "41e7b2d36c7cf8d62284b7d826cd05bb6087b2f0", "filename": "tests/run-pass/slices.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9d14a626280afea4527765c9fa2c489e30dafc19/tests%2Frun-pass%2Fslices.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d14a626280afea4527765c9fa2c489e30dafc19/tests%2Frun-pass%2Fslices.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fslices.rs?ref=9d14a626280afea4527765c9fa2c489e30dafc19", "patch": "@@ -1,3 +1,5 @@\n+#![feature(new_uninit)]\n+\n use std::slice;\n \n fn slice_of_zst() {\n@@ -169,7 +171,23 @@ fn test_iter_ref_consistency() {\n     test_mut([0u32; 0]); // ZST with alignment > 0\n }\n \n+fn uninit_slice() {\n+    let mut values = Box::<[Box<u32>]>::new_uninit_slice(3);\n+\n+    let values = unsafe {\n+        // Deferred initialization:\n+        values[0].as_mut_ptr().write(Box::new(1));\n+        values[1].as_mut_ptr().write(Box::new(2));\n+        values[2].as_mut_ptr().write(Box::new(3));\n+\n+        values.assume_init()\n+    };\n+\n+    assert_eq!(values.iter().map(|x| **x).collect::<Vec<_>>(), vec![1, 2, 3])\n+}\n+\n fn main() {\n     slice_of_zst();\n     test_iter_ref_consistency();\n+    uninit_slice();\n }"}]}