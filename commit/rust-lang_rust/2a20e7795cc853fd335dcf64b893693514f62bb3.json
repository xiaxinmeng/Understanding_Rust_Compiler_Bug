{"sha": "2a20e7795cc853fd335dcf64b893693514f62bb3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhMjBlNzc5NWNjODUzZmQzMzVkY2Y2NGI4OTM2OTM1MTRmNjJiYjM=", "commit": {"author": {"name": "Igor Aleksanov", "email": "popzxc@yandex.ru", "date": "2020-10-17T14:29:06Z"}, "committer": {"name": "Igor Aleksanov", "email": "popzxc@yandex.ru", "date": "2020-10-19T17:55:16Z"}, "message": "Add descriptions for diagnostics parseable by xtask", "tree": {"sha": "cc5074d30a910d57c78ffcd7d252462ccffcd64f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc5074d30a910d57c78ffcd7d252462ccffcd64f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a20e7795cc853fd335dcf64b893693514f62bb3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a20e7795cc853fd335dcf64b893693514f62bb3", "html_url": "https://github.com/rust-lang/rust/commit/2a20e7795cc853fd335dcf64b893693514f62bb3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a20e7795cc853fd335dcf64b893693514f62bb3/comments", "author": {"login": "popzxc", "id": 12111581, "node_id": "MDQ6VXNlcjEyMTExNTgx", "avatar_url": "https://avatars.githubusercontent.com/u/12111581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/popzxc", "html_url": "https://github.com/popzxc", "followers_url": "https://api.github.com/users/popzxc/followers", "following_url": "https://api.github.com/users/popzxc/following{/other_user}", "gists_url": "https://api.github.com/users/popzxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/popzxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/popzxc/subscriptions", "organizations_url": "https://api.github.com/users/popzxc/orgs", "repos_url": "https://api.github.com/users/popzxc/repos", "events_url": "https://api.github.com/users/popzxc/events{/privacy}", "received_events_url": "https://api.github.com/users/popzxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "popzxc", "id": 12111581, "node_id": "MDQ6VXNlcjEyMTExNTgx", "avatar_url": "https://avatars.githubusercontent.com/u/12111581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/popzxc", "html_url": "https://github.com/popzxc", "followers_url": "https://api.github.com/users/popzxc/followers", "following_url": "https://api.github.com/users/popzxc/following{/other_user}", "gists_url": "https://api.github.com/users/popzxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/popzxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/popzxc/subscriptions", "organizations_url": "https://api.github.com/users/popzxc/orgs", "repos_url": "https://api.github.com/users/popzxc/repos", "events_url": "https://api.github.com/users/popzxc/events{/privacy}", "received_events_url": "https://api.github.com/users/popzxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52b19c39e8bdbc0a0ed650aa03358768c6803818", "url": "https://api.github.com/repos/rust-lang/rust/commits/52b19c39e8bdbc0a0ed650aa03358768c6803818", "html_url": "https://github.com/rust-lang/rust/commit/52b19c39e8bdbc0a0ed650aa03358768c6803818"}], "stats": {"total": 64, "additions": 64, "deletions": 0}, "files": [{"sha": "fcfbbbad38498d3bf3ff766462e89a6686a48277", "filename": "crates/hir_def/src/diagnostics.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2a20e7795cc853fd335dcf64b893693514f62bb3/crates%2Fhir_def%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a20e7795cc853fd335dcf64b893693514f62bb3/crates%2Fhir_def%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fdiagnostics.rs?ref=2a20e7795cc853fd335dcf64b893693514f62bb3", "patch": "@@ -7,6 +7,9 @@ use syntax::{ast, AstPtr, SyntaxNodePtr};\n \n use hir_expand::{HirFileId, InFile};\n \n+// Diagnostic: unresolved-module\n+//\n+// This diagnostic is triggered if rust-analyzer is unable to discover referred module.\n #[derive(Debug)]\n pub struct UnresolvedModule {\n     pub file: HirFileId,\n@@ -29,6 +32,9 @@ impl Diagnostic for UnresolvedModule {\n     }\n }\n \n+// Diagnostic: unresolved-extern-crate\n+//\n+// This diagnostic is triggered if rust-analyzer is unable to discover referred extern crate.\n #[derive(Debug)]\n pub struct UnresolvedExternCrate {\n     pub file: HirFileId,\n@@ -50,6 +56,9 @@ impl Diagnostic for UnresolvedExternCrate {\n     }\n }\n \n+// Diagnostic: unresolved-import\n+//\n+// This diagnostic is triggered if rust-analyzer is unable to discover imported module.\n #[derive(Debug)]\n pub struct UnresolvedImport {\n     pub file: HirFileId,"}, {"sha": "b58fe0ed7721f039d091d26620f841c2db1a8065", "filename": "crates/hir_ty/src/diagnostics.rs", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/2a20e7795cc853fd335dcf64b893693514f62bb3/crates%2Fhir_ty%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a20e7795cc853fd335dcf64b893693514f62bb3/crates%2Fhir_ty%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics.rs?ref=2a20e7795cc853fd335dcf64b893693514f62bb3", "patch": "@@ -36,6 +36,9 @@ pub fn validate_body(db: &dyn HirDatabase, owner: DefWithBodyId, sink: &mut Diag\n     validator.validate_body(db);\n }\n \n+// Diagnostic: no-such-field\n+//\n+// This diagnostic is triggered if created structure does not have field provided in record.\n #[derive(Debug)]\n pub struct NoSuchField {\n     pub file: HirFileId,\n@@ -60,6 +63,17 @@ impl Diagnostic for NoSuchField {\n     }\n }\n \n+// Diagnostic: missing-structure-fields\n+//\n+// This diagnostic is triggered if record lacks some fields that exist in the corresponding structure.\n+//\n+// Example:\n+//\n+// ```rust\n+// struct A { a: u8, b: u8 }\n+//\n+// let a = A { a: 10 };\n+// ```\n #[derive(Debug)]\n pub struct MissingFields {\n     pub file: HirFileId,\n@@ -96,6 +110,21 @@ impl Diagnostic for MissingFields {\n     }\n }\n \n+// Diagnostic: missing-pat-fields\n+//\n+// This diagnostic is triggered if pattern lacks some fields that exist in the corresponding structure.\n+//\n+// Example:\n+//\n+// ```rust\n+// struct A { a: u8, b: u8 }\n+//\n+// let a = A { a: 10, b: 20 };\n+//\n+// if let A { a } = a {\n+//     // ...\n+// }\n+// ```\n #[derive(Debug)]\n pub struct MissingPatFields {\n     pub file: HirFileId,\n@@ -130,6 +159,9 @@ impl Diagnostic for MissingPatFields {\n     }\n }\n \n+// Diagnostic: missing-match-arm\n+//\n+// This diagnostic is triggered if `match` block is missing one or more match arms.\n #[derive(Debug)]\n pub struct MissingMatchArms {\n     pub file: HirFileId,\n@@ -152,6 +184,17 @@ impl Diagnostic for MissingMatchArms {\n     }\n }\n \n+// Diagnostic: missing-ok-in-tail-expr\n+//\n+// This diagnostic is triggered if block that should return `Result` returns a value not wrapped in `Ok`.\n+//\n+// Example:\n+//\n+// ```rust\n+// fn foo() -> Result<u8, ()> {\n+//     10\n+// }\n+// ```\n #[derive(Debug)]\n pub struct MissingOkInTailExpr {\n     pub file: HirFileId,\n@@ -173,6 +216,9 @@ impl Diagnostic for MissingOkInTailExpr {\n     }\n }\n \n+// Diagnostic: break-outside-of-loop\n+//\n+// This diagnostic is triggered if `break` keyword is used outside of a loop.\n #[derive(Debug)]\n pub struct BreakOutsideOfLoop {\n     pub file: HirFileId,\n@@ -194,6 +240,9 @@ impl Diagnostic for BreakOutsideOfLoop {\n     }\n }\n \n+// Diagnostic: missing-unsafe\n+//\n+// This diagnostic is triggered if operation marked as `unsafe` is used outside of `unsafe` function or block.\n #[derive(Debug)]\n pub struct MissingUnsafe {\n     pub file: HirFileId,\n@@ -215,6 +264,9 @@ impl Diagnostic for MissingUnsafe {\n     }\n }\n \n+// Diagnostic: mismatched-arg-count\n+//\n+// This diagnostic is triggered if function is invoked with an incorrect amount of arguments.\n #[derive(Debug)]\n pub struct MismatchedArgCount {\n     pub file: HirFileId,\n@@ -264,6 +316,9 @@ impl fmt::Display for CaseType {\n     }\n }\n \n+// Diagnostic: incorrect-ident-case\n+//\n+// This diagnostic is triggered if item name doesn't follow https://doc.rust-lang.org/1.0.0/style/style/naming/README.html[Rust naming convention].\n #[derive(Debug)]\n pub struct IncorrectCase {\n     pub file: HirFileId,"}]}