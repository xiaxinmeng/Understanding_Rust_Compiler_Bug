{"sha": "b26580f2149c7f4196eac76525cc1d53f215b29b", "node_id": "C_kwDOAAsO6NoAKGIyNjU4MGYyMTQ5YzdmNDE5NmVhYzc2NTI1Y2MxZDUzZjIxNWIyOWI", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-03-05T07:17:31Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-05-18T03:21:54Z"}, "message": "better error for bad LHS in binop-assign", "tree": {"sha": "fb1530c723d6fa63ba78c15d81316797ab9c918b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb1530c723d6fa63ba78c15d81316797ab9c918b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b26580f2149c7f4196eac76525cc1d53f215b29b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b26580f2149c7f4196eac76525cc1d53f215b29b", "html_url": "https://github.com/rust-lang/rust/commit/b26580f2149c7f4196eac76525cc1d53f215b29b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b26580f2149c7f4196eac76525cc1d53f215b29b/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5c4f4cc4b14b2dff2506d08defb1b97adcbf333", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5c4f4cc4b14b2dff2506d08defb1b97adcbf333", "html_url": "https://github.com/rust-lang/rust/commit/a5c4f4cc4b14b2dff2506d08defb1b97adcbf333"}], "stats": {"total": 61, "additions": 47, "deletions": 14}, "files": [{"sha": "bf438b4498903a9cae17be1a317f8b0fec2271bf", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b26580f2149c7f4196eac76525cc1d53f215b29b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b26580f2149c7f4196eac76525cc1d53f215b29b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=b26580f2149c7f4196eac76525cc1d53f215b29b", "patch": "@@ -1058,6 +1058,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         self.check_lhs_assignable(lhs, \"E0070\", span, |err| {\n             let rhs_ty = self.check_expr(&rhs);\n \n+            // FIXME: This could be done any time lhs_ty is DerefMut into something that\n+            // is compatible with rhs_ty, and not _just_ `&mut`\n             if let ty::Ref(_, lhs_inner_ty, hir::Mutability::Mut) = lhs_ty.kind() {\n                 if self.can_coerce(rhs_ty, *lhs_inner_ty) {\n                     err.span_suggestion_verbose("}, {"sha": "d250f38fffa3c111029e2a7b33a7a188cad8b037", "filename": "compiler/rustc_typeck/src/check/op.rs", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b26580f2149c7f4196eac76525cc1d53f215b29b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b26580f2149c7f4196eac76525cc1d53f215b29b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs?ref=b26580f2149c7f4196eac76525cc1d53f215b29b", "patch": "@@ -41,7 +41,18 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 return_ty\n             };\n \n-        self.check_lhs_assignable(lhs, \"E0067\", op.span, |_| {});\n+        self.check_lhs_assignable(lhs, \"E0067\", op.span, |err| {\n+            if let Ref(_, rty, hir::Mutability::Mut) = lhs_ty.kind() {\n+                if self\n+                    .lookup_op_method(*rty, Some(rhs_ty), Some(rhs), Op::Binary(op, IsAssign::Yes))\n+                    .is_ok()\n+                {\n+                    // Suppress this error, since we already emitted\n+                    // a deref suggestion in check_overloaded_binop\n+                    err.delay_as_bug();\n+                }\n+            }\n+        });\n \n         ty\n     }\n@@ -404,8 +415,15 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         (err, missing_trait, use_output)\n                     }\n                 };\n-                if let Ref(_, rty, _) = lhs_ty.kind() {\n-                    if self.infcx.type_is_copy_modulo_regions(self.param_env, *rty, lhs_expr.span)\n+                if let Ref(_, rty, mutability) = lhs_ty.kind() {\n+                    let is_copy =\n+                        self.infcx.type_is_copy_modulo_regions(self.param_env, *rty, lhs_expr.span);\n+                    // We should suggest `a + b` => `*a + b` if `a` is copy, and suggest\n+                    // `a += b` => `*a += b` if a is a mut ref.\n+                    // FIXME: This could be done any time lhs_ty is DerefMut into something that\n+                    // is compatible with rhs_ty, and not _just_ `&mut` (for IsAssign::Yes).\n+                    if ((is_assign == IsAssign::No && is_copy)\n+                        || (is_assign == IsAssign::Yes && *mutability == hir::Mutability::Mut))\n                         && self\n                             .lookup_op_method(\n                                 *rty,"}, {"sha": "f53ddb95416d15adf0b0266dcdb887cebc8dd9bc", "filename": "src/test/ui/issues/issue-5239-1.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b26580f2149c7f4196eac76525cc1d53f215b29b/src%2Ftest%2Fui%2Fissues%2Fissue-5239-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b26580f2149c7f4196eac76525cc1d53f215b29b/src%2Ftest%2Fui%2Fissues%2Fissue-5239-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5239-1.stderr?ref=b26580f2149c7f4196eac76525cc1d53f215b29b", "patch": "@@ -5,11 +5,6 @@ LL |     let x = |ref x: isize| { x += 1; };\n    |                              -^^^^^\n    |                              |\n    |                              cannot use `+=` on type `&isize`\n-   |\n-help: `+=` can be used on `isize`, you can dereference `x`\n-   |\n-LL |     let x = |ref x: isize| { *x += 1; };\n-   |                              +\n \n error: aborting due to previous error\n "}, {"sha": "c4dadfbdfcea419b431c4e9f295669b6b1576b86", "filename": "src/test/ui/typeck/assign-non-lval-mut-ref.fixed", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b26580f2149c7f4196eac76525cc1d53f215b29b/src%2Ftest%2Fui%2Ftypeck%2Fassign-non-lval-mut-ref.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/b26580f2149c7f4196eac76525cc1d53f215b29b/src%2Ftest%2Fui%2Ftypeck%2Fassign-non-lval-mut-ref.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fassign-non-lval-mut-ref.fixed?ref=b26580f2149c7f4196eac76525cc1d53f215b29b", "patch": "@@ -2,6 +2,8 @@\n \n fn main() {\n     let mut x = vec![1usize];\n-    *x.last_mut().unwrap() = 2usize;\n+    *x.last_mut().unwrap() = 2;\n     //~^ ERROR invalid left-hand side of assignment\n+    *x.last_mut().unwrap() += 1;\n+    //~^ ERROR binary assignment operation `+=` cannot be applied to type `&mut usize`\n }"}, {"sha": "39573ddb6d0e8afa4808404b4372580c183dc764", "filename": "src/test/ui/typeck/assign-non-lval-mut-ref.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b26580f2149c7f4196eac76525cc1d53f215b29b/src%2Ftest%2Fui%2Ftypeck%2Fassign-non-lval-mut-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b26580f2149c7f4196eac76525cc1d53f215b29b/src%2Ftest%2Fui%2Ftypeck%2Fassign-non-lval-mut-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fassign-non-lval-mut-ref.rs?ref=b26580f2149c7f4196eac76525cc1d53f215b29b", "patch": "@@ -2,6 +2,8 @@\n \n fn main() {\n     let mut x = vec![1usize];\n-    x.last_mut().unwrap() = 2usize;\n+    x.last_mut().unwrap() = 2;\n     //~^ ERROR invalid left-hand side of assignment\n+    x.last_mut().unwrap() += 1;\n+    //~^ ERROR binary assignment operation `+=` cannot be applied to type `&mut usize`\n }"}, {"sha": "b0ca089b7092e4a374e459d5734f827fe49c25ba", "filename": "src/test/ui/typeck/assign-non-lval-mut-ref.stderr", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b26580f2149c7f4196eac76525cc1d53f215b29b/src%2Ftest%2Fui%2Ftypeck%2Fassign-non-lval-mut-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b26580f2149c7f4196eac76525cc1d53f215b29b/src%2Ftest%2Fui%2Ftypeck%2Fassign-non-lval-mut-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fassign-non-lval-mut-ref.stderr?ref=b26580f2149c7f4196eac76525cc1d53f215b29b", "patch": "@@ -1,16 +1,30 @@\n error[E0070]: invalid left-hand side of assignment\n   --> $DIR/assign-non-lval-mut-ref.rs:5:27\n    |\n-LL |     x.last_mut().unwrap() = 2usize;\n+LL |     x.last_mut().unwrap() = 2;\n    |     --------------------- ^\n    |     |\n    |     cannot assign to this expression\n    |\n help: consider dereferencing here to assign to the mutable borrowed piece of memory\n    |\n-LL |     *x.last_mut().unwrap() = 2usize;\n+LL |     *x.last_mut().unwrap() = 2;\n    |     +\n \n-error: aborting due to previous error\n+error[E0368]: binary assignment operation `+=` cannot be applied to type `&mut usize`\n+  --> $DIR/assign-non-lval-mut-ref.rs:7:5\n+   |\n+LL |     x.last_mut().unwrap() += 1;\n+   |     ---------------------^^^^^\n+   |     |\n+   |     cannot use `+=` on type `&mut usize`\n+   |\n+help: `+=` can be used on `usize`, you can dereference `x.last_mut().unwrap()`\n+   |\n+LL |     *x.last_mut().unwrap() += 1;\n+   |     +\n+\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0070`.\n+Some errors have detailed explanations: E0070, E0368.\n+For more information about an error, try `rustc --explain E0070`."}]}