{"sha": "43e62a87ab97f946f3d2da2db0aa0b1f0ef7d8bf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzZTYyYTg3YWI5N2Y5NDZmM2QyZGEyZGIwYWEwYjFmMGVmN2Q4YmY=", "commit": {"author": {"name": "Kevin DeLorey", "email": "2295721+kdelorey@users.noreply.github.com", "date": "2020-02-13T02:46:12Z"}, "committer": {"name": "Kevin DeLorey", "email": "2295721+kdelorey@users.noreply.github.com", "date": "2020-02-13T02:46:55Z"}, "message": "Cheese const tests as they requre an ident before becoming a CONST_DEF.", "tree": {"sha": "a7678a16f1b6e592c9d59a672b885c36870f6d59", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a7678a16f1b6e592c9d59a672b885c36870f6d59"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/43e62a87ab97f946f3d2da2db0aa0b1f0ef7d8bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/43e62a87ab97f946f3d2da2db0aa0b1f0ef7d8bf", "html_url": "https://github.com/rust-lang/rust/commit/43e62a87ab97f946f3d2da2db0aa0b1f0ef7d8bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/43e62a87ab97f946f3d2da2db0aa0b1f0ef7d8bf/comments", "author": {"login": "kdelorey", "id": 2295721, "node_id": "MDQ6VXNlcjIyOTU3MjE=", "avatar_url": "https://avatars.githubusercontent.com/u/2295721?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kdelorey", "html_url": "https://github.com/kdelorey", "followers_url": "https://api.github.com/users/kdelorey/followers", "following_url": "https://api.github.com/users/kdelorey/following{/other_user}", "gists_url": "https://api.github.com/users/kdelorey/gists{/gist_id}", "starred_url": "https://api.github.com/users/kdelorey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kdelorey/subscriptions", "organizations_url": "https://api.github.com/users/kdelorey/orgs", "repos_url": "https://api.github.com/users/kdelorey/repos", "events_url": "https://api.github.com/users/kdelorey/events{/privacy}", "received_events_url": "https://api.github.com/users/kdelorey/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kdelorey", "id": 2295721, "node_id": "MDQ6VXNlcjIyOTU3MjE=", "avatar_url": "https://avatars.githubusercontent.com/u/2295721?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kdelorey", "html_url": "https://github.com/kdelorey", "followers_url": "https://api.github.com/users/kdelorey/followers", "following_url": "https://api.github.com/users/kdelorey/following{/other_user}", "gists_url": "https://api.github.com/users/kdelorey/gists{/gist_id}", "starred_url": "https://api.github.com/users/kdelorey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kdelorey/subscriptions", "organizations_url": "https://api.github.com/users/kdelorey/orgs", "repos_url": "https://api.github.com/users/kdelorey/repos", "events_url": "https://api.github.com/users/kdelorey/events{/privacy}", "received_events_url": "https://api.github.com/users/kdelorey/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "877cfbacf98d9d803aa5e0f54be560c7da7acbca", "url": "https://api.github.com/repos/rust-lang/rust/commits/877cfbacf98d9d803aa5e0f54be560c7da7acbca", "html_url": "https://github.com/rust-lang/rust/commit/877cfbacf98d9d803aa5e0f54be560c7da7acbca"}], "stats": {"total": 49, "additions": 21, "deletions": 28}, "files": [{"sha": "912bf789e84237ccbe5a46b3936091a06113928f", "filename": "crates/ra_ide/src/completion/complete_trait_impl.rs", "status": "modified", "additions": 21, "deletions": 28, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/43e62a87ab97f946f3d2da2db0aa0b1f0ef7d8bf/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_trait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43e62a87ab97f946f3d2da2db0aa0b1f0ef7d8bf/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_trait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_trait_impl.rs?ref=43e62a87ab97f946f3d2da2db0aa0b1f0ef7d8bf", "patch": "@@ -16,15 +16,10 @@ use ra_syntax::{\n use ra_assists::utils::get_missing_impl_items;\n \n pub(crate) fn complete_trait_impl(acc: &mut Completions, ctx: &CompletionContext) {\n-    let trigger = ctx.token\n-        .ancestors()\n-        .find(|p| match p.kind() {\n-            SyntaxKind::FN_DEF |\n-            SyntaxKind::TYPE_ALIAS_DEF |\n-            SyntaxKind::CONST_DEF |\n-            SyntaxKind::ITEM_LIST => true,\n-            _ => false\n-        });\n+    let trigger = ctx.token.ancestors().find(|p| match p.kind() {\n+        SyntaxKind::FN_DEF | SyntaxKind::TYPE_ALIAS_DEF | SyntaxKind::CONST_DEF => true,\n+        _ => false,\n+    });\n \n     let impl_block = trigger\n         .as_ref()\n@@ -37,40 +32,38 @@ pub(crate) fn complete_trait_impl(acc: &mut Completions, ctx: &CompletionContext\n             SyntaxKind::FN_DEF => {\n                 for missing_fn in get_missing_impl_items(ctx.db, &ctx.analyzer, &impl_block)\n                     .iter()\n-                    .filter_map(|item| {\n-                        match item {\n-                            hir::AssocItem::Function(fn_item) => Some(fn_item),\n-                            _ => None\n-                        }\n-                    }) \n+                    .filter_map(|item| match item {\n+                        hir::AssocItem::Function(fn_item) => Some(fn_item),\n+                        _ => None,\n+                    })\n                 {\n                     add_function_impl(acc, ctx, &missing_fn);\n                 }\n-            },\n+            }\n \n             SyntaxKind::TYPE_ALIAS_DEF => {\n                 for missing_fn in get_missing_impl_items(ctx.db, &ctx.analyzer, &impl_block)\n                     .iter()\n                     .filter_map(|item| match item {\n                         hir::AssocItem::TypeAlias(type_item) => Some(type_item),\n-                        _ => None\n-                    }) \n+                        _ => None,\n+                    })\n                 {\n                     add_type_alias_impl(acc, ctx, &missing_fn);\n                 }\n-            },\n+            }\n \n             SyntaxKind::CONST_DEF => {\n                 for missing_fn in get_missing_impl_items(ctx.db, &ctx.analyzer, &impl_block)\n                     .iter()\n                     .filter_map(|item| match item {\n                         hir::AssocItem::Const(const_item) => Some(const_item),\n-                        _ => None\n-                    }) \n+                        _ => None,\n+                    })\n                 {\n                     add_const_impl(acc, ctx, &missing_fn);\n                 }\n-            },\n+            }\n \n             _ => {}\n         }\n@@ -309,16 +302,16 @@ mod tests {\n             }\n \n             impl Test for () {\n-                const<|>\n+                const S<|>\n             }\n             \",\n         );\n         assert_debug_snapshot!(completions, @r###\"\n         [\n             CompletionItem {\n                 label: \"const SOME_CONST: u16 = \",\n-                source_range: [132; 132),\n-                delete: [132; 132),\n+                source_range: [133; 134),\n+                delete: [133; 134),\n                 insert: \"const SOME_CONST: u16 = \",\n                 kind: Const,\n             },\n@@ -335,16 +328,16 @@ mod tests {\n             }\n \n             impl Test for () {\n-                const<|>\n+                const S<|>\n             }\n             \",\n         );\n         assert_debug_snapshot!(completions, @r###\"\n         [\n             CompletionItem {\n                 label: \"const SOME_CONST: u16 = \",\n-                source_range: [137; 137),\n-                delete: [137; 137),\n+                source_range: [138; 139),\n+                delete: [138; 139),\n                 insert: \"const SOME_CONST: u16 = \",\n                 kind: Const,\n             },"}]}