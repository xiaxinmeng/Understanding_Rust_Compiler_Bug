{"sha": "11194e3d050f45ff002a775f451ff6222fcd5b2c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExMTk0ZTNkMDUwZjQ1ZmYwMDJhNzc1ZjQ1MWZmNjIyMmZjZDViMmM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-05-16T18:18:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-05-16T18:18:58Z"}, "message": "Auto merge of #4101 - mikerite:redundant_closures_for_method_calls, r=Manishearth\n\nSplit redundant_closure lint\n\nMove the method checking into a new lint called\n`redundant_closures_for_method_calls` and put it in the pedantic group.\n\nThis aspect of the lint seems more controversial than the rest.\n\ncc #3942\n\nchangelog: Move method checking from `redundant_closure` to a new `pedantic` lint called `redundant_closure_for_method_calls`.", "tree": {"sha": "ba5aa24f050e16e90dbb709869ec0d268b697f74", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba5aa24f050e16e90dbb709869ec0d268b697f74"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11194e3d050f45ff002a775f451ff6222fcd5b2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11194e3d050f45ff002a775f451ff6222fcd5b2c", "html_url": "https://github.com/rust-lang/rust/commit/11194e3d050f45ff002a775f451ff6222fcd5b2c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11194e3d050f45ff002a775f451ff6222fcd5b2c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f49d878ce5aede7e99d284a97cfdca321314ccc2", "url": "https://api.github.com/repos/rust-lang/rust/commits/f49d878ce5aede7e99d284a97cfdca321314ccc2", "html_url": "https://github.com/rust-lang/rust/commit/f49d878ce5aede7e99d284a97cfdca321314ccc2"}, {"sha": "08d2a0d6b20bc725305d0462ccbc9b2839820489", "url": "https://api.github.com/repos/rust-lang/rust/commits/08d2a0d6b20bc725305d0462ccbc9b2839820489", "html_url": "https://github.com/rust-lang/rust/commit/08d2a0d6b20bc725305d0462ccbc9b2839820489"}], "stats": {"total": 77, "additions": 56, "deletions": 21}, "files": [{"sha": "44787f4f28187700358c446805b2418c4c749f9f", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/11194e3d050f45ff002a775f451ff6222fcd5b2c/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/11194e3d050f45ff002a775f451ff6222fcd5b2c/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=11194e3d050f45ff002a775f451ff6222fcd5b2c", "patch": "@@ -1035,6 +1035,7 @@ All notable changes to this project will be documented in this file.\n [`redundant_clone`]: https://rust-lang.github.io/rust-clippy/master/index.html#redundant_clone\n [`redundant_closure`]: https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure\n [`redundant_closure_call`]: https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure_call\n+[`redundant_closure_for_method_calls`]: https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure_for_method_calls\n [`redundant_field_names`]: https://rust-lang.github.io/rust-clippy/master/index.html#redundant_field_names\n [`redundant_pattern`]: https://rust-lang.github.io/rust-clippy/master/index.html#redundant_pattern\n [`redundant_pattern_matching`]: https://rust-lang.github.io/rust-clippy/master/index.html#redundant_pattern_matching"}, {"sha": "e670924de2b174faed593a45a8d1ecd01939245c", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11194e3d050f45ff002a775f451ff6222fcd5b2c/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/11194e3d050f45ff002a775f451ff6222fcd5b2c/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=11194e3d050f45ff002a775f451ff6222fcd5b2c", "patch": "@@ -7,7 +7,7 @@\n \n A collection of lints to catch common mistakes and improve your [Rust](https://github.com/rust-lang/rust) code.\n \n-[There are 301 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n+[There are 302 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n \n We have a bunch of lint categories to allow you to choose how much Clippy is supposed to ~~annoy~~ help you:\n "}, {"sha": "4a93101d7cb9fad7a73e8168494d0e0cb844606b", "filename": "clippy_lints/src/eta_reduction.rs", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/11194e3d050f45ff002a775f451ff6222fcd5b2c/clippy_lints%2Fsrc%2Feta_reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11194e3d050f45ff002a775f451ff6222fcd5b2c/clippy_lints%2Fsrc%2Feta_reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feta_reduction.rs?ref=11194e3d050f45ff002a775f451ff6222fcd5b2c", "patch": "@@ -32,7 +32,30 @@ declare_clippy_lint! {\n     \"redundant closures, i.e., `|a| foo(a)` (which can be written as just `foo`)\"\n }\n \n-declare_lint_pass!(EtaReduction => [REDUNDANT_CLOSURE]);\n+declare_clippy_lint! {\n+    /// **What it does:** Checks for closures which only invoke a method on the closure\n+    /// argument and can be replaced by referencing the method directly.\n+    ///\n+    /// **Why is this bad?** It's unnecessary to create the closure.\n+    ///\n+    /// **Known problems:** rust-lang/rust-clippy#3071, rust-lang/rust-clippy#4002,\n+    /// rust-lang/rust-clippy#3942\n+    ///\n+    ///\n+    /// **Example:**\n+    /// ```rust,ignore\n+    /// Some('a').map(|s| s.to_uppercase());\n+    /// ```\n+    /// may be rewritten as\n+    /// ```rust,ignore\n+    /// Some('a').map(char::to_uppercase);\n+    /// ```\n+    pub REDUNDANT_CLOSURE_FOR_METHOD_CALLS,\n+    pedantic,\n+    \"redundant closures for method calls\"\n+}\n+\n+declare_lint_pass!(EtaReduction => [REDUNDANT_CLOSURE, REDUNDANT_CLOSURE_FOR_METHOD_CALLS]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for EtaReduction {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n@@ -104,7 +127,7 @@ fn check_closure(cx: &LateContext<'_, '_>, expr: &Expr) {\n             if let Some(name) = get_ufcs_type_name(cx, method_def_id, &args[0]);\n \n             then {\n-                span_lint_and_then(cx, REDUNDANT_CLOSURE, expr.span, \"redundant closure found\", |db| {\n+                span_lint_and_then(cx, REDUNDANT_CLOSURE_FOR_METHOD_CALLS, expr.span, \"redundant closure found\", |db| {\n                     db.span_suggestion(\n                         expr.span,\n                         \"remove closure as shown\","}, {"sha": "400abb5a498065e957e0366dad8342f07dd3df73", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/11194e3d050f45ff002a775f451ff6222fcd5b2c/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11194e3d050f45ff002a775f451ff6222fcd5b2c/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=11194e3d050f45ff002a775f451ff6222fcd5b2c", "patch": "@@ -614,6 +614,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         enum_glob_use::ENUM_GLOB_USE,\n         enum_variants::MODULE_NAME_REPETITIONS,\n         enum_variants::PUB_ENUM_VARIANT_NAMES,\n+        eta_reduction::REDUNDANT_CLOSURE_FOR_METHOD_CALLS,\n         functions::TOO_MANY_LINES,\n         if_not_else::IF_NOT_ELSE,\n         infinite_iter::MAYBE_INFINITE_ITER,"}, {"sha": "a3e57956f35b4e5c8ba1b83bbaea7640a752bdd4", "filename": "tests/ui/eta.fixed", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/11194e3d050f45ff002a775f451ff6222fcd5b2c/tests%2Fui%2Feta.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/11194e3d050f45ff002a775f451ff6222fcd5b2c/tests%2Fui%2Feta.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feta.fixed?ref=11194e3d050f45ff002a775f451ff6222fcd5b2c", "patch": "@@ -9,7 +9,11 @@\n     clippy::option_map_unit_fn,\n     clippy::trivially_copy_pass_by_ref\n )]\n-#![warn(clippy::redundant_closure, clippy::needless_borrow)]\n+#![warn(\n+    clippy::redundant_closure,\n+    clippy::redundant_closure_for_method_calls,\n+    clippy::needless_borrow\n+)]\n \n use std::path::PathBuf;\n "}, {"sha": "58adf21b1d5ed78125627f2e18ceab9eae864522", "filename": "tests/ui/eta.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/11194e3d050f45ff002a775f451ff6222fcd5b2c/tests%2Fui%2Feta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11194e3d050f45ff002a775f451ff6222fcd5b2c/tests%2Fui%2Feta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feta.rs?ref=11194e3d050f45ff002a775f451ff6222fcd5b2c", "patch": "@@ -9,7 +9,11 @@\n     clippy::option_map_unit_fn,\n     clippy::trivially_copy_pass_by_ref\n )]\n-#![warn(clippy::redundant_closure, clippy::needless_borrow)]\n+#![warn(\n+    clippy::redundant_closure,\n+    clippy::redundant_closure_for_method_calls,\n+    clippy::needless_borrow\n+)]\n \n use std::path::PathBuf;\n "}, {"sha": "ff402a1850ed868da94e81f27ab2dd74c7f48bb6", "filename": "tests/ui/eta.stderr", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/11194e3d050f45ff002a775f451ff6222fcd5b2c/tests%2Fui%2Feta.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11194e3d050f45ff002a775f451ff6222fcd5b2c/tests%2Fui%2Feta.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feta.stderr?ref=11194e3d050f45ff002a775f451ff6222fcd5b2c", "patch": "@@ -1,87 +1,89 @@\n error: redundant closure found\n-  --> $DIR/eta.rs:17:27\n+  --> $DIR/eta.rs:21:27\n    |\n LL |     let a = Some(1u8).map(|a| foo(a));\n    |                           ^^^^^^^^^^ help: remove closure as shown: `foo`\n    |\n    = note: `-D clippy::redundant-closure` implied by `-D warnings`\n \n error: redundant closure found\n-  --> $DIR/eta.rs:18:10\n+  --> $DIR/eta.rs:22:10\n    |\n LL |     meta(|a| foo(a));\n    |          ^^^^^^^^^^ help: remove closure as shown: `foo`\n \n error: redundant closure found\n-  --> $DIR/eta.rs:19:27\n+  --> $DIR/eta.rs:23:27\n    |\n LL |     let c = Some(1u8).map(|a| {1+2; foo}(a));\n    |                           ^^^^^^^^^^^^^^^^^ help: remove closure as shown: `{1+2; foo}`\n \n error: this expression borrows a reference that is immediately dereferenced by the compiler\n-  --> $DIR/eta.rs:21:21\n+  --> $DIR/eta.rs:25:21\n    |\n LL |     all(&[1, 2, 3], &&2, |x, y| below(x, y)); //is adjusted\n    |                     ^^^ help: change this to: `&2`\n    |\n    = note: `-D clippy::needless-borrow` implied by `-D warnings`\n \n error: redundant closure found\n-  --> $DIR/eta.rs:28:27\n+  --> $DIR/eta.rs:32:27\n    |\n LL |     let e = Some(1u8).map(|a| generic(a));\n    |                           ^^^^^^^^^^^^^^ help: remove closure as shown: `generic`\n \n error: redundant closure found\n-  --> $DIR/eta.rs:71:51\n+  --> $DIR/eta.rs:75:51\n    |\n LL |     let e = Some(TestStruct { some_ref: &i }).map(|a| a.foo());\n    |                                                   ^^^^^^^^^^^ help: remove closure as shown: `TestStruct::foo`\n+   |\n+   = note: `-D clippy::redundant-closure-for-method-calls` implied by `-D warnings`\n \n error: redundant closure found\n-  --> $DIR/eta.rs:73:51\n+  --> $DIR/eta.rs:77:51\n    |\n LL |     let e = Some(TestStruct { some_ref: &i }).map(|a| a.trait_foo());\n    |                                                   ^^^^^^^^^^^^^^^^^ help: remove closure as shown: `TestTrait::trait_foo`\n \n error: redundant closure found\n-  --> $DIR/eta.rs:76:42\n+  --> $DIR/eta.rs:80:42\n    |\n LL |     let e = Some(&mut vec![1, 2, 3]).map(|v| v.clear());\n    |                                          ^^^^^^^^^^^^^ help: remove closure as shown: `std::vec::Vec::clear`\n \n error: redundant closure found\n-  --> $DIR/eta.rs:81:29\n+  --> $DIR/eta.rs:85:29\n    |\n LL |     let e = Some(\"str\").map(|s| s.to_string());\n    |                             ^^^^^^^^^^^^^^^^^ help: remove closure as shown: `std::string::ToString::to_string`\n \n error: redundant closure found\n-  --> $DIR/eta.rs:83:27\n+  --> $DIR/eta.rs:87:27\n    |\n LL |     let e = Some('a').map(|s| s.to_uppercase());\n    |                           ^^^^^^^^^^^^^^^^^^^^ help: remove closure as shown: `char::to_uppercase`\n \n error: redundant closure found\n-  --> $DIR/eta.rs:86:65\n+  --> $DIR/eta.rs:90:65\n    |\n LL |     let e: std::vec::Vec<char> = vec!['a', 'b', 'c'].iter().map(|c| c.to_ascii_uppercase()).collect();\n    |                                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove closure as shown: `char::to_ascii_uppercase`\n \n error: redundant closure found\n-  --> $DIR/eta.rs:104:50\n+  --> $DIR/eta.rs:108:50\n    |\n LL |     let _: Vec<_> = arr.iter().map(|x| x.map_err(|e| some.take().unwrap()(e))).collect();\n    |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove closure as shown: `some.take().unwrap()`\n \n error: redundant closure found\n-  --> $DIR/eta.rs:169:27\n+  --> $DIR/eta.rs:173:27\n    |\n LL |     let a = Some(1u8).map(|a| foo_ptr(a));\n    |                           ^^^^^^^^^^^^^^ help: remove closure as shown: `foo_ptr`\n \n error: redundant closure found\n-  --> $DIR/eta.rs:174:27\n+  --> $DIR/eta.rs:178:27\n    |\n LL |     let a = Some(1u8).map(|a| closure(a));\n    |                           ^^^^^^^^^^^^^^ help: remove closure as shown: `closure`"}, {"sha": "c8b9bc049440cfc2a36e8cbe3d21eec5913c17c4", "filename": "tests/ui/map_clone.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11194e3d050f45ff002a775f451ff6222fcd5b2c/tests%2Fui%2Fmap_clone.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/11194e3d050f45ff002a775f451ff6222fcd5b2c/tests%2Fui%2Fmap_clone.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_clone.fixed?ref=11194e3d050f45ff002a775f451ff6222fcd5b2c", "patch": "@@ -3,7 +3,7 @@\n #![allow(clippy::iter_cloned_collect)]\n #![allow(clippy::clone_on_copy)]\n #![allow(clippy::missing_docs_in_private_items)]\n-#![allow(clippy::redundant_closure)]\n+#![allow(clippy::redundant_closure_for_method_calls)]\n \n fn main() {\n     let _: Vec<i8> = vec![5_i8; 6].iter().copied().collect();"}, {"sha": "5f216823eb4a959066f5a85fb298677844a2ab96", "filename": "tests/ui/map_clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11194e3d050f45ff002a775f451ff6222fcd5b2c/tests%2Fui%2Fmap_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11194e3d050f45ff002a775f451ff6222fcd5b2c/tests%2Fui%2Fmap_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_clone.rs?ref=11194e3d050f45ff002a775f451ff6222fcd5b2c", "patch": "@@ -3,7 +3,7 @@\n #![allow(clippy::iter_cloned_collect)]\n #![allow(clippy::clone_on_copy)]\n #![allow(clippy::missing_docs_in_private_items)]\n-#![allow(clippy::redundant_closure)]\n+#![allow(clippy::redundant_closure_for_method_calls)]\n \n fn main() {\n     let _: Vec<i8> = vec![5_i8; 6].iter().map(|x| *x).collect();"}]}