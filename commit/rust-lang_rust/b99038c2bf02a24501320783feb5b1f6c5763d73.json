{"sha": "b99038c2bf02a24501320783feb5b1f6c5763d73", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5OTAzOGMyYmYwMmEyNDUwMTMyMDc4M2ZlYjViMWY2YzU3NjNkNzM=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-05-07T21:27:43Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-05-07T22:24:32Z"}, "message": "rustc: Put all boxes into addrspace 1", "tree": {"sha": "7290161b62f242e1eea68493cefe3178d721eb8b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7290161b62f242e1eea68493cefe3178d721eb8b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b99038c2bf02a24501320783feb5b1f6c5763d73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b99038c2bf02a24501320783feb5b1f6c5763d73", "html_url": "https://github.com/rust-lang/rust/commit/b99038c2bf02a24501320783feb5b1f6c5763d73", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b99038c2bf02a24501320783feb5b1f6c5763d73/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e43e8ccc8e67dbccbfdbc0c8300a41e43d8b0cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e43e8ccc8e67dbccbfdbc0c8300a41e43d8b0cf", "html_url": "https://github.com/rust-lang/rust/commit/0e43e8ccc8e67dbccbfdbc0c8300a41e43d8b0cf"}], "stats": {"total": 69, "additions": 61, "deletions": 8}, "files": [{"sha": "f984b0de63ac7abc4474dec4affcb9eb4019c745", "filename": "src/rustc/lib/llvm.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b99038c2bf02a24501320783feb5b1f6c5763d73/src%2Frustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b99038c2bf02a24501320783feb5b1f6c5763d73/src%2Frustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Flib%2Fllvm.rs?ref=b99038c2bf02a24501320783feb5b1f6c5763d73", "patch": "@@ -1034,7 +1034,15 @@ fn type_to_str_inner(names: type_names, outer0: [TypeRef], ty: TypeRef) ->\n                 ret \"*\\\\\" + int::str(n as int);\n             }\n         }\n-        ret \"*\" +\n+        let addrstr = {\n+            let addrspace = llvm::LLVMGetPointerAddressSpace(ty) as uint;\n+            if addrspace == 0u {\n+                \"\"\n+            } else {\n+                #fmt(\"addrspace(%u)\", addrspace)\n+            }\n+        };\n+        ret addrstr + \"*\" +\n                 type_to_str_inner(names, outer, llvm::LLVMGetElementType(ty));\n       }\n       13 { ret \"Vector\"; }"}, {"sha": "08543d0f535d1dd3162a0027e83fd325e77c5dc5", "filename": "src/rustc/middle/trans/alt.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b99038c2bf02a24501320783feb5b1f6c5763d73/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b99038c2bf02a24501320783feb5b1f6c5763d73/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs?ref=b99038c2bf02a24501320783feb5b1f6c5763d73", "patch": "@@ -436,7 +436,9 @@ fn compile_submatch(bcx: block, m: match, vals: [ValueRef],\n     // Unbox in case of a box field\n     if any_box_pat(m, col) {\n         let box = Load(bcx, val);\n-        let unboxed = GEPi(bcx, box, [0u, abi::box_field_body]);\n+        let box_ty = node_id_type(bcx, pat_id);\n+        let box_no_addrspace = non_gc_box_cast(bcx, box, box_ty);\n+        let unboxed = GEPi(bcx, box_no_addrspace, [0u, abi::box_field_body]);\n         compile_submatch(bcx, enter_box(dm, m, col, val), [unboxed]\n                          + vals_left, chk, exits);\n         ret;"}, {"sha": "f79cba165102e9ec6abd310c8849cdef71a7dc53", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b99038c2bf02a24501320783feb5b1f6c5763d73/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b99038c2bf02a24501320783feb5b1f6c5763d73/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=b99038c2bf02a24501320783feb5b1f6c5763d73", "patch": "@@ -88,6 +88,7 @@ resource icx_popper(ccx: @crate_ctxt) {\n \n impl ccx_icx for @crate_ctxt {\n     fn insn_ctxt(s: str) -> icx_popper {\n+        #debug(\"new insn_ctxt: %s\", s);\n         if (self.sess.opts.count_llvm_insns) {\n             *self.stats.llvm_insn_ctxt += [s];\n         }\n@@ -356,7 +357,9 @@ fn malloc_boxed(bcx: block, t: ty::t) -> {box: ValueRef, body: ValueRef} {\n     let _icx = bcx.insn_ctxt(\"trans_malloc_boxed\");\n     let mut ti = none;\n     let box = malloc_boxed_raw(bcx, t, ti);\n-    let body = GEPi(bcx, box, [0u, abi::box_field_body]);\n+    let box_no_addrspace = non_gc_box_cast(\n+        bcx, box, ty::mk_imm_box(bcx.tcx(), t));\n+    let body = GEPi(bcx, box_no_addrspace, [0u, abi::box_field_body]);\n     ret {box: box, body: body};\n }\n \n@@ -2399,7 +2402,8 @@ fn trans_lval(cx: block, e: @ast::expr) -> lval_result {\n         let t = expr_ty(cx, base);\n         let val = alt check ty::get(t).struct {\n           ty::ty_box(_) {\n-            GEPi(sub.bcx, sub.val, [0u, abi::box_field_body])\n+            let non_gc_val = non_gc_box_cast(sub.bcx, sub.val, t);\n+            GEPi(sub.bcx, non_gc_val, [0u, abi::box_field_body])\n           }\n           ty::ty_res(_, _, _) {\n             GEPi(sub.bcx, sub.val, [0u, 1u])\n@@ -2417,6 +2421,21 @@ fn trans_lval(cx: block, e: @ast::expr) -> lval_result {\n     }\n }\n \n+#[doc = \"\n+Get the type of a box in the default address space.\n+\n+Shared box pointers live in address space 1 so the GC strategy can find them.\n+Before taking a pointer to the inside of a box it should be cast into address\n+space 0. Otherwise the resulting (non-box) pointer will be in the wrong\n+address space and thus be the wrong type.\n+\"]\n+fn non_gc_box_cast(cx: block, val: ValueRef, t: ty::t) -> ValueRef {\n+    #debug(\"non_gc_box_cast\");\n+    add_comment(cx, \"non_gc_box_cast\");\n+    let non_gc_t = type_of_non_gc_box(cx.ccx(), t);\n+    PointerCast(cx, val, non_gc_t)\n+}\n+\n fn lval_maybe_callee_to_lval(c: lval_maybe_callee, ty: ty::t) -> lval_result {\n     let must_bind = alt c.env { self_env(_, _, _) { true } _ { false } };\n     if must_bind {"}, {"sha": "412bacbda1d5cbef5954b9d3a5702113fafe03d0", "filename": "src/rustc/middle/trans/common.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b99038c2bf02a24501320783feb5b1f6c5763d73/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b99038c2bf02a24501320783feb5b1f6c5763d73/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=b99038c2bf02a24501320783feb5b1f6c5763d73", "patch": "@@ -642,12 +642,17 @@ fn T_box(cx: @crate_ctxt, t: TypeRef) -> TypeRef {\n     ret T_struct(T_box_header_fields(cx) + [t]);\n }\n \n+fn T_box_ptr(t: TypeRef) -> TypeRef {\n+    const box_addrspace: uint = 1u;\n+    ret llvm::LLVMPointerType(t, box_addrspace as c_uint);\n+}\n+\n fn T_opaque_box(cx: @crate_ctxt) -> TypeRef {\n     ret T_box(cx, T_i8());\n }\n \n fn T_opaque_box_ptr(cx: @crate_ctxt) -> TypeRef {\n-    ret T_ptr(T_opaque_box(cx));\n+    ret T_box_ptr(T_opaque_box(cx));\n }\n \n fn T_port(cx: @crate_ctxt, _t: TypeRef) -> TypeRef {"}, {"sha": "b20f5bc368ade562c20f6f4c9cfe95538d46abca", "filename": "src/rustc/middle/trans/type_of.rs", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b99038c2bf02a24501320783feb5b1f6c5763d73/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b99038c2bf02a24501320783feb5b1f6c5763d73/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_of.rs?ref=b99038c2bf02a24501320783feb5b1f6c5763d73", "patch": "@@ -11,6 +11,7 @@ export type_of;\n export type_of_explicit_args;\n export type_of_fn_from_ty;\n export type_of_fn;\n+export type_of_non_gc_box;\n \n fn type_of_explicit_args(cx: @crate_ctxt, inputs: [ty::arg]) -> [TypeRef] {\n     vec::map(inputs) {|arg|\n@@ -42,6 +43,24 @@ fn type_of_fn_from_ty(cx: @crate_ctxt, fty: ty::t) -> TypeRef {\n     type_of_fn(cx, ty::ty_fn_args(fty), ty::ty_fn_ret(fty))\n }\n \n+fn type_of_non_gc_box(cx: @crate_ctxt, t: ty::t) -> TypeRef {\n+    assert !ty::type_has_vars(t);\n+\n+    let t_norm = ty::normalize_ty(cx.tcx, t);\n+    if t != t_norm {\n+        type_of_non_gc_box(cx, t_norm)\n+    } else {\n+        alt ty::get(t).struct {\n+          ty::ty_box(mt) {\n+            T_ptr(T_box(cx, type_of(cx, mt.ty)))\n+          }\n+          _ {\n+            cx.sess.bug(\"non-box in type_of_non_gc_box\");\n+          }\n+        }\n+    }\n+}\n+\n fn type_of(cx: @crate_ctxt, t: ty::t) -> TypeRef {\n     assert !ty::type_has_vars(t);\n \n@@ -68,10 +87,10 @@ fn type_of(cx: @crate_ctxt, t: ty::t) -> TypeRef {\n           ty::ty_estr(ty::vstore_uniq) |\n           ty::ty_str { T_ptr(T_vec(cx, T_i8())) }\n           ty::ty_enum(did, _) { type_of_enum(cx, did, t) }\n-          ty::ty_estr(ty::vstore_box) { T_ptr(T_box(cx, T_i8())) }\n+          ty::ty_estr(ty::vstore_box) { T_box_ptr(T_box(cx, T_i8())) }\n           ty::ty_evec(mt, ty::vstore_box) |\n-          ty::ty_box(mt) { T_ptr(T_box(cx, type_of(cx, mt.ty))) }\n-          ty::ty_opaque_box { T_ptr(T_box(cx, T_i8())) }\n+          ty::ty_box(mt) { T_box_ptr(T_box(cx, type_of(cx, mt.ty))) }\n+          ty::ty_opaque_box { T_box_ptr(T_box(cx, T_i8())) }\n           ty::ty_uniq(mt) { T_ptr(type_of(cx, mt.ty)) }\n           ty::ty_evec(mt, ty::vstore_uniq) |\n           ty::ty_vec(mt) { T_ptr(T_vec(cx, type_of(cx, mt.ty))) }"}]}