{"sha": "770b9e3012bd58bdf6046d328dabfd57df163eb6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3MGI5ZTMwMTJiZDU4YmRmNjA0NmQzMjhkYWJmZDU3ZGYxNjNlYjY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-20T23:40:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-20T23:40:12Z"}, "message": "Auto merge of #65644 - Centril:rollup-gez1xhe, r=Centril\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #65314 (rustdoc: forward -Z options to rustc)\n - #65592 (clarify const_prop ICE protection comment)\n - #65603 (Avoid ICE when include! is used by stdin crate)\n - #65614 (Improve error message for APIT with explicit generic arguments)\n - #65629 (Remove `borrowck_graphviz_postflow` from test)\n - #65633 (Remove leading :: from paths in doc examples)\n - #65638 (Rename the default argument 'def' to 'default')\n - #65639 (Fix parameter name in documentation)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "a1bbbdb76f8c67f283be59432a3aa0f845515551", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a1bbbdb76f8c67f283be59432a3aa0f845515551"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/770b9e3012bd58bdf6046d328dabfd57df163eb6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/770b9e3012bd58bdf6046d328dabfd57df163eb6", "html_url": "https://github.com/rust-lang/rust/commit/770b9e3012bd58bdf6046d328dabfd57df163eb6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/770b9e3012bd58bdf6046d328dabfd57df163eb6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7979016aff545f7b41cc517031026020b340989d", "url": "https://api.github.com/repos/rust-lang/rust/commits/7979016aff545f7b41cc517031026020b340989d", "html_url": "https://github.com/rust-lang/rust/commit/7979016aff545f7b41cc517031026020b340989d"}, {"sha": "836e45d26bbee9b6a73a32b154c82338102a96a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/836e45d26bbee9b6a73a32b154c82338102a96a6", "html_url": "https://github.com/rust-lang/rust/commit/836e45d26bbee9b6a73a32b154c82338102a96a6"}], "stats": {"total": 192, "additions": 124, "deletions": 68}, "files": [{"sha": "00a864170583efb921a8e3b6ddc29eca3ae6b269", "filename": "src/libcore/iter/traits/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/770b9e3012bd58bdf6046d328dabfd57df163eb6/src%2Flibcore%2Fiter%2Ftraits%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/770b9e3012bd58bdf6046d328dabfd57df163eb6/src%2Flibcore%2Fiter%2Ftraits%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Ftraits%2Fcollect.rs?ref=770b9e3012bd58bdf6046d328dabfd57df163eb6", "patch": "@@ -167,7 +167,7 @@ pub trait FromIterator<A>: Sized {\n /// // and we'll implement IntoIterator\n /// impl IntoIterator for MyCollection {\n ///     type Item = i32;\n-///     type IntoIter = ::std::vec::IntoIter<Self::Item>;\n+///     type IntoIter = std::vec::IntoIter<Self::Item>;\n ///\n ///     fn into_iter(self) -> Self::IntoIter {\n ///         self.0.into_iter()"}, {"sha": "d29147645f7ef8d7bfbf30442b194b23c80790f3", "filename": "src/libcore/ops/unsize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/770b9e3012bd58bdf6046d328dabfd57df163eb6/src%2Flibcore%2Fops%2Funsize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/770b9e3012bd58bdf6046d328dabfd57df163eb6/src%2Flibcore%2Fops%2Funsize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Funsize.rs?ref=770b9e3012bd58bdf6046d328dabfd57df163eb6", "patch": "@@ -76,7 +76,7 @@ impl<T: ?Sized+Unsize<U>, U: ?Sized> CoerceUnsized<*const U> for *const T {}\n /// ```\n /// # #![feature(dispatch_from_dyn, unsize)]\n /// # use std::{ops::DispatchFromDyn, marker::Unsize};\n-/// # struct Rc<T: ?Sized>(::std::rc::Rc<T>);\n+/// # struct Rc<T: ?Sized>(std::rc::Rc<T>);\n /// impl<T: ?Sized, U: ?Sized> DispatchFromDyn<Rc<U>> for Rc<T>\n /// where\n ///     T: Unsize<U>,"}, {"sha": "9eb29eae7f75ab388f403ee4a472ea96c72dc93b", "filename": "src/libcore/option.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/770b9e3012bd58bdf6046d328dabfd57df163eb6/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/770b9e3012bd58bdf6046d328dabfd57df163eb6/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=770b9e3012bd58bdf6046d328dabfd57df163eb6", "patch": "@@ -395,10 +395,10 @@ impl<T> Option<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn unwrap_or(self, def: T) -> T {\n+    pub fn unwrap_or(self, default: T) -> T {\n         match self {\n             Some(x) => x,\n-            None => def,\n+            None => default,\n         }\n     }\n "}, {"sha": "f67012d8f2fceb72abe0ce67b0242296b255392b", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/770b9e3012bd58bdf6046d328dabfd57df163eb6/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/770b9e3012bd58bdf6046d328dabfd57df163eb6/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=770b9e3012bd58bdf6046d328dabfd57df163eb6", "patch": "@@ -176,15 +176,15 @@ Section: Creating a string\n /// ```\n /// fn from_utf8_lossy<F>(mut input: &[u8], mut push: F) where F: FnMut(&str) {\n ///     loop {\n-///         match ::std::str::from_utf8(input) {\n+///         match std::str::from_utf8(input) {\n ///             Ok(valid) => {\n ///                 push(valid);\n ///                 break\n ///             }\n ///             Err(error) => {\n ///                 let (valid, after_valid) = input.split_at(error.valid_up_to());\n ///                 unsafe {\n-///                     push(::std::str::from_utf8_unchecked(valid))\n+///                     push(std::str::from_utf8_unchecked(valid))\n ///                 }\n ///                 push(\"\\u{FFFD}\");\n ///"}, {"sha": "780b49cd9db0d100751e6738733a54cc08d79feb", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/770b9e3012bd58bdf6046d328dabfd57df163eb6/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/770b9e3012bd58bdf6046d328dabfd57df163eb6/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=770b9e3012bd58bdf6046d328dabfd57df163eb6", "patch": "@@ -518,27 +518,30 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n                 }\n             }\n \n-            // Work around: avoid ICE in miri.\n-            // FIXME(wesleywiser) we don't currently handle the case where we try to make a ref\n-            // from a function argument that hasn't been assigned to in this function. The main\n-            // issue is if an arg is a fat-pointer, miri `expects()` to be able to read the value\n-            // of that pointer to get size info. However, since this is `ConstProp`, that argument\n-            // doesn't actually have a backing value and so this causes an ICE.\n+            // Work around: avoid ICE in miri. FIXME(wesleywiser)\n+            // The Miri engine ICEs when taking a reference to an uninitialized unsized\n+            // local. There's nothing it can do here: taking a reference needs an allocation\n+            // which needs to know the size. Normally that's okay as during execution\n+            // (e.g. for CTFE) it can never happen. But here in const_prop\n+            // unknown data is uninitialized, so if e.g. a function argument is unsized\n+            // and has a reference taken, we get an ICE.\n             Rvalue::Ref(_, _, Place { base: PlaceBase::Local(local), projection: box [] }) => {\n                 trace!(\"checking Ref({:?})\", place);\n                 let alive =\n                     if let LocalValue::Live(_) = self.ecx.frame().locals[*local].value {\n                         true\n-                    } else { false };\n+                    } else {\n+                        false\n+                    };\n \n-                if local.as_usize() <= self.ecx.frame().body.arg_count && !alive {\n-                    trace!(\"skipping Ref({:?})\", place);\n+                if !alive {\n+                    trace!(\"skipping Ref({:?}) to uninitialized local\", place);\n                     return None;\n                 }\n             }\n \n-            // Work around: avoid extra unnecessary locals.\n-            // FIXME(wesleywiser): const eval will turn this into a `const Scalar(<ZST>)` that\n+            // Work around: avoid extra unnecessary locals. FIXME(wesleywiser)\n+            // Const eval will turn this into a `const Scalar(<ZST>)` that\n             // `SimplifyLocals` doesn't know it can remove.\n             Rvalue::Aggregate(_, operands) if operands.len() == 0 => {\n                 return None;"}, {"sha": "8eab9c4e67e3313ea4a17f3c90792ba88aaf01da", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/770b9e3012bd58bdf6046d328dabfd57df163eb6/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/770b9e3012bd58bdf6046d328dabfd57df163eb6/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=770b9e3012bd58bdf6046d328dabfd57df163eb6", "patch": "@@ -232,8 +232,8 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 tcx.sess,\n                 span,\n                 E0632,\n-                \"cannot provide explicit type parameters when `impl Trait` is \\\n-                 used in argument position.\"\n+                \"cannot provide explicit generic arguments when `impl Trait` is \\\n+                 used in argument position\"\n             };\n \n             err.emit();"}, {"sha": "8321fdd400fec0e27ce1b8f31deb2958a62f7e39", "filename": "src/librustc_typeck/error_codes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/770b9e3012bd58bdf6046d328dabfd57df163eb6/src%2Flibrustc_typeck%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/770b9e3012bd58bdf6046d328dabfd57df163eb6/src%2Flibrustc_typeck%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Ferror_codes.rs?ref=770b9e3012bd58bdf6046d328dabfd57df163eb6", "patch": "@@ -5048,8 +5048,8 @@ the future, [RFC 2091] prohibits their implementation without a follow-up RFC.\n //  E0612, // merged into E0609\n //  E0613, // Removed (merged with E0609)\n     E0627, // yield statement outside of generator literal\n-    E0632, // cannot provide explicit type parameters when `impl Trait` is used\n-           // in argument position.\n+    E0632, // cannot provide explicit generic arguments when `impl Trait` is\n+           // used in argument position\n     E0634, // type has conflicting packed representaton hints\n     E0640, // infer outlives requirements\n     E0641, // cannot cast to/from a pointer with an unknown kind"}, {"sha": "0b8d4d6c302f19bc8986c43dafb5d8374fe090c7", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/770b9e3012bd58bdf6046d328dabfd57df163eb6/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/770b9e3012bd58bdf6046d328dabfd57df163eb6/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=770b9e3012bd58bdf6046d328dabfd57df163eb6", "patch": "@@ -53,6 +53,8 @@ pub struct Options {\n     pub codegen_options_strs: Vec<String>,\n     /// Debugging (`-Z`) options to pass to the compiler.\n     pub debugging_options: DebuggingOptions,\n+    /// Debugging (`-Z`) options strings to pass to the compiler.\n+    pub debugging_options_strs: Vec<String>,\n     /// The target used to compile the crate against.\n     pub target: TargetTriple,\n     /// Edition used when reading the crate. Defaults to \"2015\". Also used by default when\n@@ -478,6 +480,7 @@ impl Options {\n         let generate_redirect_pages = matches.opt_present(\"generate-redirect-pages\");\n         let test_builder = matches.opt_str(\"test-builder\").map(PathBuf::from);\n         let codegen_options_strs = matches.opt_strs(\"C\");\n+        let debugging_options_strs = matches.opt_strs(\"Z\");\n         let lib_strs = matches.opt_strs(\"L\");\n         let extern_strs = matches.opt_strs(\"extern\");\n         let runtool = matches.opt_str(\"runtool\");\n@@ -499,6 +502,7 @@ impl Options {\n             codegen_options,\n             codegen_options_strs,\n             debugging_options,\n+            debugging_options_strs,\n             target,\n             edition,\n             maybe_sysroot,"}, {"sha": "8afc50f83bfaf67d0e434b7e1a871addbe6aa171", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/770b9e3012bd58bdf6046d328dabfd57df163eb6/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/770b9e3012bd58bdf6046d328dabfd57df163eb6/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=770b9e3012bd58bdf6046d328dabfd57df163eb6", "patch": "@@ -280,6 +280,9 @@ fn run_test(\n     for codegen_options_str in &options.codegen_options_strs {\n         compiler.arg(\"-C\").arg(&codegen_options_str);\n     }\n+    for debugging_option_str in &options.debugging_options_strs {\n+        compiler.arg(\"-Z\").arg(&debugging_option_str);\n+    }\n     if no_run {\n         compiler.arg(\"--emit=metadata\");\n     }"}, {"sha": "6574ef13db9532ab5c33ecf92cbc0b9f61db30f5", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/770b9e3012bd58bdf6046d328dabfd57df163eb6/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/770b9e3012bd58bdf6046d328dabfd57df163eb6/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=770b9e3012bd58bdf6046d328dabfd57df163eb6", "patch": "@@ -762,7 +762,7 @@ pub fn set_print(sink: Option<Box<dyn Write + Send>>) -> Option<Box<dyn Write +\n /// otherwise. `label` identifies the stream in a panic message.\n ///\n /// This function is used to print error messages, so it takes extra\n-/// care to avoid causing a panic when `local_stream` is unusable.\n+/// care to avoid causing a panic when `local_s` is unusable.\n /// For instance, if the TLS key for the local stream is\n /// already destroyed, or if the local stream is locked by another\n /// thread, it will just fall back to the global stream."}, {"sha": "a9e4457f42374e2aed532638d23f75523eb7a714", "filename": "src/libstd/net/udp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/770b9e3012bd58bdf6046d328dabfd57df163eb6/src%2Flibstd%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/770b9e3012bd58bdf6046d328dabfd57df163eb6/src%2Flibstd%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fudp.rs?ref=770b9e3012bd58bdf6046d328dabfd57df163eb6", "patch": "@@ -202,7 +202,7 @@ impl UdpSocket {\n     ///\n     /// let socket = UdpSocket::bind(\"127.0.0.1:34254\").expect(\"couldn't bind to address\");\n     /// assert_eq!(socket.peer_addr().unwrap_err().kind(),\n-    ///            ::std::io::ErrorKind::NotConnected);\n+    ///            std::io::ErrorKind::NotConnected);\n     /// ```\n     #[stable(feature = \"udp_peer_addr\", since = \"1.40.0\")]\n     pub fn peer_addr(&self) -> io::Result<SocketAddr> {"}, {"sha": "4b0cf8312f1894ba25b3abc41ef237fc1f7871cc", "filename": "src/libstd/process.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/770b9e3012bd58bdf6046d328dabfd57df163eb6/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/770b9e3012bd58bdf6046d328dabfd57df163eb6/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=770b9e3012bd58bdf6046d328dabfd57df163eb6", "patch": "@@ -1488,12 +1488,12 @@ impl Child {\n /// }\n ///\n /// fn main() {\n-///     ::std::process::exit(match run_app() {\n-///        Ok(_) => 0,\n-///        Err(err) => {\n-///            eprintln!(\"error: {:?}\", err);\n-///            1\n-///        }\n+///     std::process::exit(match run_app() {\n+///         Ok(_) => 0,\n+///         Err(err) => {\n+///             eprintln!(\"error: {:?}\", err);\n+///             1\n+///         }\n ///     });\n /// }\n /// ```"}, {"sha": "58edf23a5b1e2be2dadb7e4762f0f18ce7976788", "filename": "src/libsyntax_expand/base.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/770b9e3012bd58bdf6046d328dabfd57df163eb6/src%2Flibsyntax_expand%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/770b9e3012bd58bdf6046d328dabfd57df163eb6/src%2Flibsyntax_expand%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fbase.rs?ref=770b9e3012bd58bdf6046d328dabfd57df163eb6", "patch": "@@ -1072,7 +1072,11 @@ impl<'a> ExtCtxt<'a> {\n     /// This unifies the logic used for resolving `include_X!`, and `#[doc(include)]` file paths.\n     ///\n     /// Returns an absolute path to the file that `path` refers to.\n-    pub fn resolve_path(&self, path: impl Into<PathBuf>, span: Span) -> PathBuf {\n+    pub fn resolve_path(\n+        &self,\n+        path: impl Into<PathBuf>,\n+        span: Span,\n+    ) -> Result<PathBuf, DiagnosticBuilder<'a>> {\n         let path = path.into();\n \n         // Relative paths are resolved relative to the file in which they are found\n@@ -1082,13 +1086,16 @@ impl<'a> ExtCtxt<'a> {\n             let mut result = match self.source_map().span_to_unmapped_path(callsite) {\n                 FileName::Real(path) => path,\n                 FileName::DocTest(path, _) => path,\n-                other => panic!(\"cannot resolve relative path in non-file source `{}`\", other),\n+                other => return Err(self.struct_span_err(\n+                    span,\n+                    &format!(\"cannot resolve relative path in non-file source `{}`\", other),\n+                )),\n             };\n             result.pop();\n             result.push(path);\n-            result\n+            Ok(result)\n         } else {\n-            path\n+            Ok(path)\n         }\n     }\n }"}, {"sha": "fc521e5edc06b146176ce26eebdff22b7c0c8c66", "filename": "src/libsyntax_expand/expand.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/770b9e3012bd58bdf6046d328dabfd57df163eb6/src%2Flibsyntax_expand%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/770b9e3012bd58bdf6046d328dabfd57df163eb6/src%2Flibsyntax_expand%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fexpand.rs?ref=770b9e3012bd58bdf6046d328dabfd57df163eb6", "patch": "@@ -1418,7 +1418,14 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n                         return noop_visit_attribute(at, self);\n                     }\n \n-                    let filename = self.cx.resolve_path(&*file.as_str(), it.span());\n+                    let filename = match self.cx.resolve_path(&*file.as_str(), it.span()) {\n+                        Ok(filename) => filename,\n+                        Err(mut err) => {\n+                            err.emit();\n+                            continue;\n+                        }\n+                    };\n+\n                     match self.cx.source_map().load_file(&filename) {\n                         Ok(source_file) => {\n                             let src = source_file.src.as_ref()"}, {"sha": "f6c58fcdfa1cbf009ab10d56a0007f91773fada4", "filename": "src/libsyntax_ext/source_util.rs", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/770b9e3012bd58bdf6046d328dabfd57df163eb6/src%2Flibsyntax_ext%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/770b9e3012bd58bdf6046d328dabfd57df163eb6/src%2Flibsyntax_ext%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fsource_util.rs?ref=770b9e3012bd58bdf6046d328dabfd57df163eb6", "patch": "@@ -76,7 +76,13 @@ pub fn expand_include<'cx>(cx: &'cx mut ExtCtxt<'_>, sp: Span, tts: TokenStream)\n         None => return DummyResult::any(sp),\n     };\n     // The file will be added to the code map by the parser\n-    let file = cx.resolve_path(file, sp);\n+    let file = match cx.resolve_path(file, sp) {\n+        Ok(f) => f,\n+        Err(mut err) => {\n+            err.emit();\n+            return DummyResult::any(sp);\n+        },\n+    };\n     let directory_ownership = DirectoryOwnership::Owned { relative: None };\n     let p = parse::new_sub_parser_from_file(cx.parse_sess(), &file, directory_ownership, None, sp);\n \n@@ -122,7 +128,13 @@ pub fn expand_include_str(cx: &mut ExtCtxt<'_>, sp: Span, tts: TokenStream)\n         Some(f) => f,\n         None => return DummyResult::any(sp)\n     };\n-    let file = cx.resolve_path(file, sp);\n+    let file = match cx.resolve_path(file, sp) {\n+        Ok(f) => f,\n+        Err(mut err) => {\n+            err.emit();\n+            return DummyResult::any(sp);\n+        },\n+    };\n     match cx.source_map().load_binary_file(&file) {\n         Ok(bytes) => match std::str::from_utf8(&bytes) {\n             Ok(src) => {\n@@ -147,7 +159,13 @@ pub fn expand_include_bytes(cx: &mut ExtCtxt<'_>, sp: Span, tts: TokenStream)\n         Some(f) => f,\n         None => return DummyResult::any(sp)\n     };\n-    let file = cx.resolve_path(file, sp);\n+    let file = match cx.resolve_path(file, sp) {\n+        Ok(f) => f,\n+        Err(mut err) => {\n+            err.emit();\n+            return DummyResult::any(sp);\n+        },\n+    };\n     match cx.source_map().load_binary_file(&file) {\n         Ok(bytes) => {\n             base::MacEager::expr(cx.expr_lit(sp, ast::LitKind::ByteStr(Lrc::new(bytes))))"}, {"sha": "a8753d14de22f958f656fe431c3c80b279b84de6", "filename": "src/test/rustdoc-ui/failed-doctest-missing-codes.stdout", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/770b9e3012bd58bdf6046d328dabfd57df163eb6/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-missing-codes.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/770b9e3012bd58bdf6046d328dabfd57df163eb6/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-missing-codes.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-missing-codes.stdout?ref=770b9e3012bd58bdf6046d328dabfd57df163eb6", "patch": "@@ -6,13 +6,13 @@ failures:\n \n ---- $DIR/failed-doctest-missing-codes.rs - Foo (line 8) stdout ----\n error[E0308]: mismatched types\n- --> $DIR/failed-doctest-missing-codes.rs:9:13\n-  |\n-3 | let x: () = 5i32;\n-  |             ^^^^ expected (), found i32\n-  |\n-  = note: expected type `()`\n-             found type `i32`\n+  --> $DIR/failed-doctest-missing-codes.rs:9:13\n+   |\n+LL | let x: () = 5i32;\n+   |             ^^^^ expected (), found i32\n+   |\n+   = note: expected type `()`\n+              found type `i32`\n \n error: aborting due to previous error\n "}, {"sha": "9887d07a3eb6e9bbd8d4681513089087c4908cc2", "filename": "src/test/rustdoc-ui/failed-doctest-output.stdout", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/770b9e3012bd58bdf6046d328dabfd57df163eb6/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-output.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/770b9e3012bd58bdf6046d328dabfd57df163eb6/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-output.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-output.stdout?ref=770b9e3012bd58bdf6046d328dabfd57df163eb6", "patch": "@@ -7,10 +7,10 @@ failures:\n \n ---- $DIR/failed-doctest-output.rs - OtherStruct (line 21) stdout ----\n error[E0425]: cannot find value `no` in this scope\n- --> $DIR/failed-doctest-output.rs:22:1\n-  |\n-3 | no\n-  | ^^ not found in this scope\n+  --> $DIR/failed-doctest-output.rs:22:1\n+   |\n+LL | no\n+   | ^^ not found in this scope\n \n error: aborting due to previous error\n "}, {"sha": "4ea6455d3aa4cf864a788503d48a83890ba93371", "filename": "src/test/rustdoc-ui/unparseable-doc-test.stdout", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/770b9e3012bd58bdf6046d328dabfd57df163eb6/src%2Ftest%2Frustdoc-ui%2Funparseable-doc-test.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/770b9e3012bd58bdf6046d328dabfd57df163eb6/src%2Ftest%2Frustdoc-ui%2Funparseable-doc-test.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Funparseable-doc-test.stdout?ref=770b9e3012bd58bdf6046d328dabfd57df163eb6", "patch": "@@ -6,10 +6,10 @@ failures:\n \n ---- $DIR/unparseable-doc-test.rs - foo (line 6) stdout ----\n error: unterminated double quote string\n- --> $DIR/unparseable-doc-test.rs:8:1\n-  |\n-2 | \"unterminated\n-  | ^^^^^^^^^^^^^\n+  --> $DIR/unparseable-doc-test.rs:8:1\n+   |\n+LL | \"unterminated\n+   | ^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "6af9ed3e33f661e44c0105494b858ec88c3e717a", "filename": "src/test/rustdoc/sanitizer-option.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/770b9e3012bd58bdf6046d328dabfd57df163eb6/src%2Ftest%2Frustdoc%2Fsanitizer-option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/770b9e3012bd58bdf6046d328dabfd57df163eb6/src%2Ftest%2Frustdoc%2Fsanitizer-option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsanitizer-option.rs?ref=770b9e3012bd58bdf6046d328dabfd57df163eb6", "patch": "@@ -0,0 +1,17 @@\n+// needs-sanitizer-support\n+// compile-flags: --test -Z sanitizer=address\n+//\n+// #43031: Verify that rustdoc passes `-Z` options to rustc. Use an extern\n+// function that is provided by the sanitizer runtime, if flag is not passed\n+// correctly, then linking will fail.\n+\n+/// ```\n+/// extern {\n+///     fn __sanitizer_print_stack_trace();\n+/// }\n+///\n+/// fn main() {\n+///     unsafe { __sanitizer_print_stack_trace() };\n+/// }\n+/// ```\n+pub fn z_flag_is_passed_to_rustc() {}"}, {"sha": "8cf527f0429f025eb3b9dec86fe56f1916adfde9", "filename": "src/test/ui/consts/const-eval/issue-65394.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/770b9e3012bd58bdf6046d328dabfd57df163eb6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-65394.rs", "raw_url": "https://github.com/rust-lang/rust/raw/770b9e3012bd58bdf6046d328dabfd57df163eb6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-65394.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-65394.rs?ref=770b9e3012bd58bdf6046d328dabfd57df163eb6", "patch": "@@ -1,8 +1,5 @@\n // Test for absence of validation mismatch ICE in #65394\n \n-#![feature(rustc_attrs)]\n-\n-#[rustc_mir(borrowck_graphviz_postflow=\"hello.dot\")]\n const _: Vec<i32> = {\n     let mut x = Vec::<i32>::new();\n     let r = &mut x; //~ ERROR references in constants may only refer to immutable values"}, {"sha": "15df813836e5ba46201431ab6dd9d9293cf604e7", "filename": "src/test/ui/consts/const-eval/issue-65394.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/770b9e3012bd58bdf6046d328dabfd57df163eb6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-65394.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/770b9e3012bd58bdf6046d328dabfd57df163eb6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-65394.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-65394.stderr?ref=770b9e3012bd58bdf6046d328dabfd57df163eb6", "patch": "@@ -1,11 +1,11 @@\n error[E0017]: references in constants may only refer to immutable values\n-  --> $DIR/issue-65394.rs:8:13\n+  --> $DIR/issue-65394.rs:5:13\n    |\n LL |     let r = &mut x;\n    |             ^^^^^^ constants require immutable values\n \n-[ERROR rustc_mir::transform::qualify_consts] old validator: [($DIR/issue-65394.rs:8:13: 8:19, \"MutBorrow(Mut { allow_two_phase_borrow: false })\")]\n-[ERROR rustc_mir::transform::qualify_consts] new validator: [($DIR/issue-65394.rs:8:13: 8:19, \"MutBorrow(Mut { allow_two_phase_borrow: false })\"), ($DIR/issue-65394.rs:7:9: 7:14, \"LiveDrop\")]\n+[ERROR rustc_mir::transform::qualify_consts] old validator: [($DIR/issue-65394.rs:5:13: 5:19, \"MutBorrow(Mut { allow_two_phase_borrow: false })\")]\n+[ERROR rustc_mir::transform::qualify_consts] new validator: [($DIR/issue-65394.rs:5:13: 5:19, \"MutBorrow(Mut { allow_two_phase_borrow: false })\"), ($DIR/issue-65394.rs:4:9: 4:14, \"LiveDrop\")]\n error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0017`."}, {"sha": "f661c62c9e4408db0c3a69d9226a06366f0cf80d", "filename": "src/test/ui/impl-trait/issues/universal-issue-48703.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/770b9e3012bd58bdf6046d328dabfd57df163eb6/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Funiversal-issue-48703.rs", "raw_url": "https://github.com/rust-lang/rust/raw/770b9e3012bd58bdf6046d328dabfd57df163eb6/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Funiversal-issue-48703.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Funiversal-issue-48703.rs?ref=770b9e3012bd58bdf6046d328dabfd57df163eb6", "patch": "@@ -5,5 +5,5 @@ use std::fmt::Debug;\n fn foo<T>(x: impl Debug) { }\n \n fn main() {\n-    foo::<String>('a'); //~ ERROR cannot provide explicit type parameters\n+    foo::<String>('a'); //~ ERROR cannot provide explicit generic arguments\n }"}, {"sha": "a51302dce29660972888582ccd194c7a58c3644a", "filename": "src/test/ui/impl-trait/issues/universal-issue-48703.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/770b9e3012bd58bdf6046d328dabfd57df163eb6/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Funiversal-issue-48703.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/770b9e3012bd58bdf6046d328dabfd57df163eb6/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Funiversal-issue-48703.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Funiversal-issue-48703.stderr?ref=770b9e3012bd58bdf6046d328dabfd57df163eb6", "patch": "@@ -1,4 +1,4 @@\n-error[E0632]: cannot provide explicit type parameters when `impl Trait` is used in argument position.\n+error[E0632]: cannot provide explicit generic arguments when `impl Trait` is used in argument position\n   --> $DIR/universal-issue-48703.rs:8:5\n    |\n LL |     foo::<String>('a');"}, {"sha": "4ac0a694cb148f785679ea9021004bfc989eaa82", "filename": "src/test/ui/impl-trait/issues/universal-turbofish-in-method-issue-50950.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/770b9e3012bd58bdf6046d328dabfd57df163eb6/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Funiversal-turbofish-in-method-issue-50950.rs", "raw_url": "https://github.com/rust-lang/rust/raw/770b9e3012bd58bdf6046d328dabfd57df163eb6/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Funiversal-turbofish-in-method-issue-50950.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Funiversal-turbofish-in-method-issue-50950.rs?ref=770b9e3012bd58bdf6046d328dabfd57df163eb6", "patch": "@@ -12,6 +12,6 @@ struct TestEvent(i32);\n fn main() {\n     let mut evt = EventHandler {};\n     evt.handle_event::<TestEvent, fn(TestEvent)>(|_evt| {\n-        //~^ ERROR cannot provide explicit type parameters\n+        //~^ ERROR cannot provide explicit generic arguments\n     });\n }"}, {"sha": "f09aa166ef508c5b388d70d4c95ae4cd88ab2264", "filename": "src/test/ui/impl-trait/issues/universal-turbofish-in-method-issue-50950.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/770b9e3012bd58bdf6046d328dabfd57df163eb6/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Funiversal-turbofish-in-method-issue-50950.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/770b9e3012bd58bdf6046d328dabfd57df163eb6/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Funiversal-turbofish-in-method-issue-50950.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Funiversal-turbofish-in-method-issue-50950.stderr?ref=770b9e3012bd58bdf6046d328dabfd57df163eb6", "patch": "@@ -1,4 +1,4 @@\n-error[E0632]: cannot provide explicit type parameters when `impl Trait` is used in argument position.\n+error[E0632]: cannot provide explicit generic arguments when `impl Trait` is used in argument position\n   --> $DIR/universal-turbofish-in-method-issue-50950.rs:14:9\n    |\n LL |     evt.handle_event::<TestEvent, fn(TestEvent)>(|_evt| {"}, {"sha": "e14697f5c3e97d01a0e7fc16c952c5031d15c4f0", "filename": "src/test/ui/synthetic-param.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/770b9e3012bd58bdf6046d328dabfd57df163eb6/src%2Ftest%2Fui%2Fsynthetic-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/770b9e3012bd58bdf6046d328dabfd57df163eb6/src%2Ftest%2Fui%2Fsynthetic-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsynthetic-param.rs?ref=770b9e3012bd58bdf6046d328dabfd57df163eb6", "patch": "@@ -17,12 +17,12 @@ impl<S> Bar<S> {\n }\n \n fn main() {\n-    func::<u8>(42); //~ ERROR cannot provide explicit type parameters\n+    func::<u8>(42); //~ ERROR cannot provide explicit generic arguments\n     func(42); // Ok\n \n-    Foo::func::<u8>(42); //~ ERROR cannot provide explicit type parameters\n+    Foo::func::<u8>(42); //~ ERROR cannot provide explicit generic arguments\n     Foo::func(42); // Ok\n \n-    Bar::<i8>::func::<u8>(42); //~ ERROR cannot provide explicit type parameters\n+    Bar::<i8>::func::<u8>(42); //~ ERROR cannot provide explicit generic arguments\n     Bar::<i8>::func(42); // Ok\n }"}, {"sha": "f8d14f26f32de05e92519de00c6e4e36814a1e37", "filename": "src/test/ui/synthetic-param.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/770b9e3012bd58bdf6046d328dabfd57df163eb6/src%2Ftest%2Fui%2Fsynthetic-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/770b9e3012bd58bdf6046d328dabfd57df163eb6/src%2Ftest%2Fui%2Fsynthetic-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsynthetic-param.stderr?ref=770b9e3012bd58bdf6046d328dabfd57df163eb6", "patch": "@@ -1,16 +1,16 @@\n-error[E0632]: cannot provide explicit type parameters when `impl Trait` is used in argument position.\n+error[E0632]: cannot provide explicit generic arguments when `impl Trait` is used in argument position\n   --> $DIR/synthetic-param.rs:20:5\n    |\n LL |     func::<u8>(42);\n    |     ^^^^^^^^^^\n \n-error[E0632]: cannot provide explicit type parameters when `impl Trait` is used in argument position.\n+error[E0632]: cannot provide explicit generic arguments when `impl Trait` is used in argument position\n   --> $DIR/synthetic-param.rs:23:5\n    |\n LL |     Foo::func::<u8>(42);\n    |     ^^^^^^^^^^^^^^^\n \n-error[E0632]: cannot provide explicit type parameters when `impl Trait` is used in argument position.\n+error[E0632]: cannot provide explicit generic arguments when `impl Trait` is used in argument position\n   --> $DIR/synthetic-param.rs:26:5\n    |\n LL |     Bar::<i8>::func::<u8>(42);"}]}