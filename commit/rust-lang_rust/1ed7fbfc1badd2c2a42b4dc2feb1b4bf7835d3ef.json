{"sha": "1ed7fbfc1badd2c2a42b4dc2feb1b4bf7835d3ef", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlZDdmYmZjMWJhZGQyYzJhNDJiNGRjMmZlYjFiNGJmNzgzNWQzZWY=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-01-12T20:58:16Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-01-12T20:58:16Z"}, "message": "args -> params", "tree": {"sha": "8e0a5cd3e1981bf0ff9615636d45566dd85fdb97", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e0a5cd3e1981bf0ff9615636d45566dd85fdb97"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ed7fbfc1badd2c2a42b4dc2feb1b4bf7835d3ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ed7fbfc1badd2c2a42b4dc2feb1b4bf7835d3ef", "html_url": "https://github.com/rust-lang/rust/commit/1ed7fbfc1badd2c2a42b4dc2feb1b4bf7835d3ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ed7fbfc1badd2c2a42b4dc2feb1b4bf7835d3ef/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5db5f5cc1dc5dfbded866b59570afc50538b9091", "url": "https://api.github.com/repos/rust-lang/rust/commits/5db5f5cc1dc5dfbded866b59570afc50538b9091", "html_url": "https://github.com/rust-lang/rust/commit/5db5f5cc1dc5dfbded866b59570afc50538b9091"}], "stats": {"total": 74, "additions": 37, "deletions": 37}, "files": [{"sha": "91b23559475b26e14106099a936c7d517ce6e4bf", "filename": "crates/ra_hir/src/code_model_api.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1ed7fbfc1badd2c2a42b4dc2feb1b4bf7835d3ef/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ed7fbfc1badd2c2a42b4dc2feb1b4bf7835d3ef/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs?ref=1ed7fbfc1badd2c2a42b4dc2feb1b4bf7835d3ef", "patch": "@@ -273,20 +273,20 @@ pub use crate::code_model_impl::function::ScopeEntryWithSyntax;\n #[derive(Debug, Clone, PartialEq, Eq)]\n pub struct FnSignature {\n     pub(crate) name: Name,\n-    pub(crate) args: Vec<TypeRef>,\n+    pub(crate) params: Vec<TypeRef>,\n     pub(crate) ret_type: TypeRef,\n-    /// True if the first arg is `self`. This is relevant to decide whether this\n+    /// True if the first param is `self`. This is relevant to decide whether this\n     /// can be called as a method.\n-    pub(crate) has_self_arg: bool,\n+    pub(crate) has_self_param: bool,\n }\n \n impl FnSignature {\n     pub fn name(&self) -> &Name {\n         &self.name\n     }\n \n-    pub fn args(&self) -> &[TypeRef] {\n-        &self.args\n+    pub fn params(&self) -> &[TypeRef] {\n+        &self.params\n     }\n \n     pub fn ret_type(&self) -> &TypeRef {\n@@ -295,8 +295,8 @@ impl FnSignature {\n \n     /// True if the first arg is `self`. This is relevant to decide whether this\n     /// can be called as a method.\n-    pub fn has_self_arg(&self) -> bool {\n-        self.has_self_arg\n+    pub fn has_self_param(&self) -> bool {\n+        self.has_self_param\n     }\n }\n "}, {"sha": "8d6b7fc19fbff84f231b138b3c813e0005d07a9a", "filename": "crates/ra_hir/src/code_model_impl/function.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1ed7fbfc1badd2c2a42b4dc2feb1b4bf7835d3ef/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ed7fbfc1badd2c2a42b4dc2feb1b4bf7835d3ef/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Ffunction.rs?ref=1ed7fbfc1badd2c2a42b4dc2feb1b4bf7835d3ef", "patch": "@@ -42,8 +42,8 @@ impl FnSignature {\n             .name()\n             .map(|n| n.as_name())\n             .unwrap_or_else(Name::missing);\n-        let mut args = Vec::new();\n-        let mut has_self_arg = false;\n+        let mut params = Vec::new();\n+        let mut has_self_param = false;\n         if let Some(param_list) = node.param_list() {\n             if let Some(self_param) = param_list.self_param() {\n                 let self_type = if let Some(type_ref) = self_param.type_ref() {\n@@ -60,12 +60,12 @@ impl FnSignature {\n                         }\n                     }\n                 };\n-                args.push(self_type);\n-                has_self_arg = true;\n+                params.push(self_type);\n+                has_self_param = true;\n             }\n             for param in param_list.params() {\n                 let type_ref = TypeRef::from_ast_opt(param.type_ref());\n-                args.push(type_ref);\n+                params.push(type_ref);\n             }\n         }\n         let ret_type = if let Some(type_ref) = node.ret_type().and_then(|rt| rt.type_ref()) {\n@@ -75,9 +75,9 @@ impl FnSignature {\n         };\n         let sig = FnSignature {\n             name,\n-            args,\n+            params,\n             ret_type,\n-            has_self_arg,\n+            has_self_param,\n         };\n         Arc::new(sig)\n     }"}, {"sha": "7d938c0dd1eeace1936e1d3083255d5b9684af19", "filename": "crates/ra_hir/src/code_model_impl/function/scope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ed7fbfc1badd2c2a42b4dc2feb1b4bf7835d3ef/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Ffunction%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ed7fbfc1badd2c2a42b4dc2feb1b4bf7835d3ef/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Ffunction%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Ffunction%2Fscope.rs?ref=1ed7fbfc1badd2c2a42b4dc2feb1b4bf7835d3ef", "patch": "@@ -43,7 +43,7 @@ impl FnScopes {\n             scope_for: FxHashMap::default(),\n         };\n         let root = scopes.root_scope();\n-        scopes.add_params_bindings(root, body.args());\n+        scopes.add_params_bindings(root, body.params());\n         compute_expr_scopes(body.body_expr(), &body, &mut scopes, root);\n         scopes\n     }"}, {"sha": "67e123e4dcaae501df4d02aa0dfd87a88155f2a4", "filename": "crates/ra_hir/src/expr.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1ed7fbfc1badd2c2a42b4dc2feb1b4bf7835d3ef/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ed7fbfc1badd2c2a42b4dc2feb1b4bf7835d3ef/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr.rs?ref=1ed7fbfc1badd2c2a42b4dc2feb1b4bf7835d3ef", "patch": "@@ -18,13 +18,13 @@ impl_arena_id!(ExprId);\n pub struct Body {\n     exprs: Arena<ExprId, Expr>,\n     pats: Arena<PatId, Pat>,\n-    /// The patterns for the function's arguments. While the argument types are\n+    /// The patterns for the function's parameters. While the parameter types are\n     /// part of the function signature, the patterns are not (they don't change\n     /// the external type of the function).\n     ///\n     /// If this `Body` is for the body of a constant, this will just be\n     /// empty.\n-    args: Vec<PatId>,\n+    params: Vec<PatId>,\n     /// The `ExprId` of the actual body expression.\n     body_expr: ExprId,\n }\n@@ -44,8 +44,8 @@ pub struct BodySyntaxMapping {\n }\n \n impl Body {\n-    pub fn args(&self) -> &[PatId] {\n-        &self.args\n+    pub fn params(&self) -> &[PatId] {\n+        &self.params\n     }\n \n     pub fn body_expr(&self) -> ExprId {\n@@ -699,11 +699,11 @@ impl ExprCollector {\n         }\n     }\n \n-    fn into_body_syntax_mapping(self, args: Vec<PatId>, body_expr: ExprId) -> BodySyntaxMapping {\n+    fn into_body_syntax_mapping(self, params: Vec<PatId>, body_expr: ExprId) -> BodySyntaxMapping {\n         let body = Body {\n             exprs: self.exprs,\n             pats: self.pats,\n-            args,\n+            params,\n             body_expr,\n         };\n         BodySyntaxMapping {\n@@ -719,8 +719,8 @@ impl ExprCollector {\n pub(crate) fn collect_fn_body_syntax(node: &ast::FnDef) -> BodySyntaxMapping {\n     let mut collector = ExprCollector::new();\n \n-    let args = if let Some(param_list) = node.param_list() {\n-        let mut args = Vec::new();\n+    let params = if let Some(param_list) = node.param_list() {\n+        let mut params = Vec::new();\n \n         if let Some(self_param) = param_list.self_param() {\n             let self_param = LocalSyntaxPtr::new(\n@@ -729,13 +729,13 @@ pub(crate) fn collect_fn_body_syntax(node: &ast::FnDef) -> BodySyntaxMapping {\n                     .expect(\"self param without self keyword\")\n                     .syntax(),\n             );\n-            let arg = collector.alloc_pat(\n+            let param = collector.alloc_pat(\n                 Pat::Bind {\n                     name: Name::self_param(),\n                 },\n                 self_param,\n             );\n-            args.push(arg);\n+            params.push(param);\n         }\n \n         for param in param_list.params() {\n@@ -744,15 +744,15 @@ pub(crate) fn collect_fn_body_syntax(node: &ast::FnDef) -> BodySyntaxMapping {\n             } else {\n                 continue;\n             };\n-            args.push(collector.collect_pat(pat));\n+            params.push(collector.collect_pat(pat));\n         }\n-        args\n+        params\n     } else {\n         Vec::new()\n     };\n \n     let body = collector.collect_block_opt(node.body());\n-    collector.into_body_syntax_mapping(args, body)\n+    collector.into_body_syntax_mapping(params, body)\n }\n \n pub(crate) fn body_syntax_mapping("}, {"sha": "5d5568d69a0abfe5f3e636ee21dbf560b204efb5", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1ed7fbfc1badd2c2a42b4dc2feb1b4bf7835d3ef/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ed7fbfc1badd2c2a42b4dc2feb1b4bf7835d3ef/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=1ed7fbfc1badd2c2a42b4dc2feb1b4bf7835d3ef", "patch": "@@ -432,7 +432,7 @@ fn type_for_fn(db: &impl HirDatabase, f: Function) -> Cancelable<Ty> {\n     let impl_block = f.impl_block(db)?;\n     // TODO we ignore type parameters for now\n     let input = signature\n-        .args()\n+        .params()\n         .iter()\n         .map(|tr| Ty::from_hir(db, &module, impl_block.as_ref(), tr))\n         .collect::<Cancelable<Vec<_>>>()?;\n@@ -876,7 +876,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n             }\n             Expr::Call { callee, args } => {\n                 let callee_ty = self.infer_expr(*callee, &Expectation::none())?;\n-                let (arg_tys, ret_ty) = match &callee_ty {\n+                let (param_tys, ret_ty) = match &callee_ty {\n                     Ty::FnPtr(sig) => (&sig.input[..], sig.output.clone()),\n                     _ => {\n                         // not callable\n@@ -887,7 +887,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                 for (i, arg) in args.iter().enumerate() {\n                     self.infer_expr(\n                         *arg,\n-                        &Expectation::has_type(arg_tys.get(i).cloned().unwrap_or(Ty::Unknown)),\n+                        &Expectation::has_type(param_tys.get(i).cloned().unwrap_or(Ty::Unknown)),\n                     )?;\n                 }\n                 ret_ty\n@@ -904,7 +904,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                     None => Ty::Unknown,\n                 };\n                 let method_ty = self.insert_type_vars(method_ty);\n-                let (expected_receiver_ty, arg_tys, ret_ty) = match &method_ty {\n+                let (expected_receiver_ty, param_tys, ret_ty) = match &method_ty {\n                     Ty::FnPtr(sig) => {\n                         if sig.input.len() > 0 {\n                             (&sig.input[0], &sig.input[1..], sig.output.clone())\n@@ -920,7 +920,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                 for (i, arg) in args.iter().enumerate() {\n                     self.infer_expr(\n                         *arg,\n-                        &Expectation::has_type(arg_tys.get(i).cloned().unwrap_or(Ty::Unknown)),\n+                        &Expectation::has_type(param_tys.get(i).cloned().unwrap_or(Ty::Unknown)),\n                     )?;\n                 }\n                 ret_ty\n@@ -1093,7 +1093,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n \n     fn collect_fn_signature(&mut self, signature: &FnSignature) -> Cancelable<()> {\n         let body = Arc::clone(&self.body); // avoid borrow checker problem\n-        for (type_ref, pat) in signature.args().iter().zip(body.args()) {\n+        for (type_ref, pat) in signature.params().iter().zip(body.params()) {\n             let ty = self.make_ty(type_ref)?;\n             let ty = self.insert_type_vars(ty);\n             self.write_pat_ty(*pat, ty);"}, {"sha": "7c3839388391bae3487e73b6a8d9b30c86f48381", "filename": "crates/ra_hir/src/ty/method_resolution.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ed7fbfc1badd2c2a42b4dc2feb1b4bf7835d3ef/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ed7fbfc1badd2c2a42b4dc2feb1b4bf7835d3ef/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs?ref=1ed7fbfc1badd2c2a42b4dc2feb1b4bf7835d3ef", "patch": "@@ -114,7 +114,7 @@ impl Ty {\n     pub fn lookup_method(self, db: &impl HirDatabase, name: &Name) -> Cancelable<Option<DefId>> {\n         self.iterate_methods(db, |f| {\n             let sig = f.signature(db);\n-            if sig.name() == name && sig.has_self_arg() {\n+            if sig.name() == name && sig.has_self_param() {\n                 Ok(Some(f.def_id()))\n             } else {\n                 Ok(None)"}, {"sha": "37985b398177c5fb42cc90d7e42247152a5e7e63", "filename": "crates/ra_ide_api/src/completion/complete_dot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ed7fbfc1badd2c2a42b4dc2feb1b4bf7835d3ef/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_dot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ed7fbfc1badd2c2a42b4dc2feb1b4bf7835d3ef/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_dot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_dot.rs?ref=1ed7fbfc1badd2c2a42b4dc2feb1b4bf7835d3ef", "patch": "@@ -63,7 +63,7 @@ fn complete_methods(\n ) -> Cancelable<()> {\n     receiver.iterate_methods(ctx.db, |func| {\n         let sig = func.signature(ctx.db);\n-        if sig.has_self_arg() {\n+        if sig.has_self_param() {\n             CompletionItem::new(CompletionKind::Reference, sig.name().to_string())\n                 .from_function(ctx, func)\n                 .kind(CompletionItemKind::Method)"}, {"sha": "b75d65de3e7be4bc15ecd4a8450a3f9a91853b9a", "filename": "crates/ra_ide_api/src/completion/completion_item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ed7fbfc1badd2c2a42b4dc2feb1b4bf7835d3ef/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ed7fbfc1badd2c2a42b4dc2feb1b4bf7835d3ef/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_item.rs?ref=1ed7fbfc1badd2c2a42b4dc2feb1b4bf7835d3ef", "patch": "@@ -191,7 +191,7 @@ impl Builder {\n     ) -> Builder {\n         // If not an import, add parenthesis automatically.\n         if ctx.use_item_syntax.is_none() && !ctx.is_call {\n-            if function.signature(ctx.db).args().is_empty() {\n+            if function.signature(ctx.db).params().is_empty() {\n                 self.snippet = Some(format!(\"{}()$0\", self.label));\n             } else {\n                 self.snippet = Some(format!(\"{}($0)\", self.label));"}]}