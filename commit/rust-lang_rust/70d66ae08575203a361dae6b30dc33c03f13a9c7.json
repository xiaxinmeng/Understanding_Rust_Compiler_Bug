{"sha": "70d66ae08575203a361dae6b30dc33c03f13a9c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwZDY2YWUwODU3NTIwM2EzNjFkYWU2YjMwZGMzM2MwM2YxM2E5Yzc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-12-07T06:21:18Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-12-07T06:21:18Z"}, "message": "auto merge of #10364 : Kimundi/rust/result_compose, r=alexcrichton\n\nThis implements parts of the changes to `Result` and `Option` I proposed and discussed in this thread: https://mail.mozilla.org/pipermail/rust-dev/2013-November/006254.html\r\n\r\nThis PR includes:\r\n- Adding `ok()` and `err()` option adapters for both `Result` variants.\r\n- Removing `get_ref`, `expect` and iterator constructors for `Result`, as they are reachable with the variant adapters.\r\n- Removing `Result`s `ToStr` bound on the error type because of composability issues. (See https://mail.mozilla.org/pipermail/rust-dev/2013-November/006283.html)\r\n- Some warning cleanups", "tree": {"sha": "8216c2bda9bc6443e8c7c8812a0a6954e06965d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8216c2bda9bc6443e8c7c8812a0a6954e06965d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70d66ae08575203a361dae6b30dc33c03f13a9c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70d66ae08575203a361dae6b30dc33c03f13a9c7", "html_url": "https://github.com/rust-lang/rust/commit/70d66ae08575203a361dae6b30dc33c03f13a9c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70d66ae08575203a361dae6b30dc33c03f13a9c7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "820271df1c3d7899460c0fa25c1a7cf74d45d431", "url": "https://api.github.com/repos/rust-lang/rust/commits/820271df1c3d7899460c0fa25c1a7cf74d45d431", "html_url": "https://github.com/rust-lang/rust/commit/820271df1c3d7899460c0fa25c1a7cf74d45d431"}, {"sha": "142eb685f913e15494bfab9ec142e40f6bf92cc4", "url": "https://api.github.com/repos/rust-lang/rust/commits/142eb685f913e15494bfab9ec142e40f6bf92cc4", "html_url": "https://github.com/rust-lang/rust/commit/142eb685f913e15494bfab9ec142e40f6bf92cc4"}], "stats": {"total": 175, "additions": 47, "deletions": 128}, "files": [{"sha": "135ba9e9702c951ddd8cbc6c72bdaf1dd5a44400", "filename": "src/librustpkg/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70d66ae08575203a361dae6b30dc33c03f13a9c7/src%2Flibrustpkg%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70d66ae08575203a361dae6b30dc33c03f13a9c7/src%2Flibrustpkg%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Ftests.rs?ref=70d66ae08575203a361dae6b30dc33c03f13a9c7", "patch": "@@ -1823,7 +1823,7 @@ fn test_linker_build() {\n     let workspace = workspace.path();\n     let matches = getopts([], optgroups());\n     let options = build_session_options(@\"rustpkg\",\n-                                        matches.get_ref(),\n+                                        matches.as_ref().unwrap(),\n                                         @diagnostic::DefaultEmitter as\n                                             @diagnostic::Emitter);\n     let sess = build_session(options,"}, {"sha": "6a3e6933001fa1139710b395f65ea61af1f7716a", "filename": "src/libstd/any.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/70d66ae08575203a361dae6b30dc33c03f13a9c7/src%2Flibstd%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70d66ae08575203a361dae6b30dc33c03f13a9c7/src%2Flibstd%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fany.rs?ref=70d66ae08575203a361dae6b30dc33c03f13a9c7", "patch": "@@ -151,7 +151,6 @@ mod tests {\n     use super::*;\n     use super::AnyRefExt;\n     use option::{Some, None};\n-    use hash::Hash;\n \n     #[deriving(Eq)]\n     struct Test;"}, {"sha": "690b4e06d49995b6aa7bbfe4a0781e51c4284abb", "filename": "src/libstd/result.rs", "status": "modified", "additions": 43, "deletions": 124, "changes": 167, "blob_url": "https://github.com/rust-lang/rust/blob/70d66ae08575203a361dae6b30dc33c03f13a9c7/src%2Flibstd%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70d66ae08575203a361dae6b30dc33c03f13a9c7/src%2Flibstd%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fresult.rs?ref=70d66ae08575203a361dae6b30dc33c03f13a9c7", "patch": "@@ -10,28 +10,23 @@\n \n //! A type representing either success or failure\n \n-use any::Any;\n use clone::Clone;\n use cmp::Eq;\n use fmt;\n use iter::Iterator;\n-use kinds::Send;\n-use option::{None, Option, Some, OptionIterator};\n+use option::{None, Option, Some};\n use option::{ToOption, IntoOption, AsOption};\n use str::OwnedStr;\n use to_str::ToStr;\n use vec::OwnedVector;\n use vec;\n \n /// `Result` is a type that represents either success (`Ok`) or failure (`Err`).\n-///\n-/// In order to provide informative error messages, `E` is required to implement `ToStr`.\n-/// It is further recommended for `E` to be a descriptive error type, eg a `enum` for\n-/// all possible errors cases.\n #[deriving(Clone, DeepClone, Eq, Ord, TotalEq, TotalOrd, ToStr)]\n pub enum Result<T, E> {\n-    /// Contains the successful result value\n+    /// Contains the success value\n     Ok(T),\n+\n     /// Contains the error value\n     Err(E)\n }\n@@ -40,7 +35,7 @@ pub enum Result<T, E> {\n // Type implementation\n /////////////////////////////////////////////////////////////////////////////\n \n-impl<T, E: ToStr> Result<T, E> {\n+impl<T, E> Result<T, E> {\n     /////////////////////////////////////////////////////////////////////////\n     // Querying the contained values\n     /////////////////////////////////////////////////////////////////////////\n@@ -60,71 +55,48 @@ impl<T, E: ToStr> Result<T, E> {\n         !self.is_ok()\n     }\n \n-    /////////////////////////////////////////////////////////////////////////\n-    // Adapter for working with references\n-    /////////////////////////////////////////////////////////////////////////\n-\n-    /// Convert from `Result<T, E>` to `Result<&T, &E>`\n-    #[inline]\n-    pub fn as_ref<'r>(&'r self) -> Result<&'r T, &'r E> {\n-        match *self {\n-            Ok(ref x) => Ok(x),\n-            Err(ref x) => Err(x),\n-        }\n-    }\n-\n-    /// Convert from `Result<T, E>` to `Result<&mut T, &mut E>`\n-    #[inline]\n-    pub fn as_mut<'r>(&'r mut self) -> Result<&'r mut T, &'r mut E> {\n-        match *self {\n-            Ok(ref mut x) => Ok(x),\n-            Err(ref mut x) => Err(x),\n-        }\n-    }\n \n     /////////////////////////////////////////////////////////////////////////\n-    // Getting to contained values\n+    // Adapter for each variant\n     /////////////////////////////////////////////////////////////////////////\n \n-    /// Unwraps a result, yielding the content of an `Ok`.\n-    /// Fails if the value is a `Err` with a custom failure message provided by `msg`.\n+    /// Convert from `Result<T, E>` to `Option<T>`\n     #[inline]\n-    pub fn expect<M: Any + Send>(self, msg: M) -> T {\n+    pub fn ok(self) -> Option<T> {\n         match self {\n-            Ok(t) => t,\n-            Err(_) => fail!(msg),\n+            Ok(x)  => Some(x),\n+            Err(_) => None,\n         }\n     }\n \n-    /// Unwraps a result, yielding the content of an `Err`.\n-    /// Fails if the value is a `Ok` with a custom failure message provided by `msg`.\n+    /// Convert from `Result<T, E>` to `Option<E>`\n     #[inline]\n-    pub fn expect_err<M: Any + Send>(self, msg: M) -> E {\n+    pub fn err(self) -> Option<E> {\n         match self {\n-            Err(e) => e,\n-            Ok(_) => fail!(msg),\n+            Ok(_)  => None,\n+            Err(x) => Some(x),\n         }\n     }\n \n-    /// Unwraps a result, yielding the content of an `Ok`.\n-    /// Fails if the value is a `Err` with an error message derived\n-    /// from `E`'s `ToStr` implementation.\n+    /////////////////////////////////////////////////////////////////////////\n+    // Adapter for working with references\n+    /////////////////////////////////////////////////////////////////////////\n+\n+    /// Convert from `Result<T, E>` to `Result<&T, &E>`\n     #[inline]\n-    pub fn unwrap(self) -> T {\n-        match self {\n-            Ok(t) => t,\n-            Err(e) => fail!(\"called `Result::unwrap()` on `Err` value '{}'\",\n-                             e.to_str()),\n+    pub fn as_ref<'r>(&'r self) -> Result<&'r T, &'r E> {\n+        match *self {\n+            Ok(ref x) => Ok(x),\n+            Err(ref x) => Err(x),\n         }\n     }\n \n-    /// Unwraps a result, yielding the content of an `Err`.\n-    /// Fails if the value is a `Ok`.\n+    /// Convert from `Result<T, E>` to `Result<&mut T, &mut E>`\n     #[inline]\n-    pub fn unwrap_err(self) -> E {\n-        match self {\n-            Ok(_) => fail!(\"called `Result::unwrap_err()` on an `Ok` value\"),\n-            Err(e) => e\n+    pub fn as_mut<'r>(&'r mut self) -> Result<&'r mut T, &'r mut E> {\n+        match *self {\n+            Ok(ref mut x) => Ok(x),\n+            Err(ref mut x) => Err(x),\n         }\n     }\n \n@@ -163,34 +135,6 @@ impl<T, E: ToStr> Result<T, E> {\n         }\n     }\n \n-    /////////////////////////////////////////////////////////////////////////\n-    // Iterator constructors\n-    /////////////////////////////////////////////////////////////////////////\n-\n-    /// Returns an `Iterator` over one or zero references to the value of an `Ok`\n-    ///\n-    /// Example:\n-    ///\n-    ///     for buf in read_file(file) {\n-    ///         print_buf(buf)\n-    ///     }\n-    #[inline]\n-    pub fn iter<'r>(&'r self) -> OptionIterator<&'r T> {\n-        match *self {\n-            Ok(ref t) => Some(t),\n-            Err(..) => None,\n-        }.move_iter()\n-    }\n-\n-    /// Returns an `Iterator` over one or zero references to the value of an `Err`\n-    #[inline]\n-    pub fn iter_err<'r>(&'r self) -> OptionIterator<&'r E> {\n-        match *self {\n-            Ok(..) => None,\n-            Err(ref t) => Some(t),\n-        }.move_iter()\n-    }\n-\n     ////////////////////////////////////////////////////////////////////////\n     // Boolean operations on the values, eager and lazy\n     /////////////////////////////////////////////////////////////////////////\n@@ -239,17 +183,23 @@ impl<T, E: ToStr> Result<T, E> {\n     // Common special cases\n     /////////////////////////////////////////////////////////////////////////\n \n-    /// Get a reference to the value out of a successful result\n-    ///\n-    /// # Failure\n-    ///\n-    /// If the result is an error\n+    /// Unwraps a result, yielding the content of an `Ok`.\n+    /// Fails if the value is an `Err`.\n     #[inline]\n-    pub fn get_ref<'a>(&'a self) -> &'a T {\n-        match *self {\n-            Ok(ref t) => t,\n-            Err(ref e) => fail!(\"called `Result::get_ref()` on `Err` value '{}'\",\n-                                 e.to_str()),\n+    pub fn unwrap(self) -> T {\n+        match self {\n+            Ok(t) => t,\n+            Err(_) => fail!(\"called `Result::unwrap()` on an `Err` value\")\n+        }\n+    }\n+\n+    /// Unwraps a result, yielding the content of an `Err`.\n+    /// Fails if the value is an `Ok`.\n+    #[inline]\n+    pub fn unwrap_err(self) -> E {\n+        match self {\n+            Ok(_) => fail!(\"called `Result::unwrap_err()` on an `Ok` value\"),\n+            Err(e) => e\n         }\n     }\n }\n@@ -458,31 +408,6 @@ mod tests {\n         assert_eq!(op2().or_else(|e| Err::<int, ~str>(e + \"!\")).unwrap_err(), ~\"sadface!\");\n     }\n \n-    #[test]\n-    pub fn test_impl_iter() {\n-        let mut valid = false;\n-        let okval = Ok::<~str, ~str>(~\"a\");\n-        okval.iter().next().map(|_| { valid = true; });\n-        assert!(valid);\n-\n-        let errval = Err::<~str, ~str>(~\"b\");\n-        errval.iter().next().map(|_| { valid = false; });\n-        assert!(valid);\n-    }\n-\n-    #[test]\n-    pub fn test_impl_iter_err() {\n-        let mut valid = true;\n-        let okval = Ok::<~str, ~str>(~\"a\");\n-        okval.iter_err().next().map(|_| { valid = false });\n-        assert!(valid);\n-\n-        valid = false;\n-        let errval = Err::<~str, ~str>(~\"b\");\n-        errval.iter_err().next().map(|_| { valid = true });\n-        assert!(valid);\n-    }\n-\n     #[test]\n     pub fn test_impl_map() {\n         assert_eq!(Ok::<~str, ~str>(~\"a\").map(|x| x + \"b\"), Ok(~\"ab\"));\n@@ -495,12 +420,6 @@ mod tests {\n         assert_eq!(Err::<~str, ~str>(~\"a\").map_err(|x| x + \"b\"), Err(~\"ab\"));\n     }\n \n-    #[test]\n-    pub fn test_get_ref_method() {\n-        let foo: Result<int, ()> = Ok(100);\n-        assert_eq!(*foo.get_ref(), 100);\n-    }\n-\n     #[test]\n     fn test_collect() {\n         assert_eq!(collect(range(0, 0)"}, {"sha": "bff9390ee3b1e657a84179beee70160746d69675", "filename": "src/libstd/rt/local_ptr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/70d66ae08575203a361dae6b30dc33c03f13a9c7/src%2Flibstd%2Frt%2Flocal_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70d66ae08575203a361dae6b30dc33c03f13a9c7/src%2Flibstd%2Frt%2Flocal_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Flocal_ptr.rs?ref=70d66ae08575203a361dae6b30dc33c03f13a9c7", "patch": "@@ -48,6 +48,7 @@ pub unsafe fn borrow<T>(f: |&mut T|) {\n /// it wherever possible.\n #[cfg(not(windows), not(target_os = \"android\"))]\n pub mod compiled {\n+    #[cfg(not(test))]\n     use libc::c_void;\n     use cast;\n     use option::{Option, Some, None};"}, {"sha": "a41ab53964bec49e690e1196040aa3a883460ee4", "filename": "src/test/run-fail/result-get-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70d66ae08575203a361dae6b30dc33c03f13a9c7/src%2Ftest%2Frun-fail%2Fresult-get-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70d66ae08575203a361dae6b30dc33c03f13a9c7/src%2Ftest%2Frun-fail%2Fresult-get-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fresult-get-fail.rs?ref=70d66ae08575203a361dae6b30dc33c03f13a9c7", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern:called `Result::unwrap()` on `Err` value 'kitty'\n+// error-pattern:called `Result::unwrap()` on an `Err` value\n \n use std::result;\n "}, {"sha": "dd5aa4bc8c670ceb4c0eaeeb71810bffbedb1a9e", "filename": "src/test/run-pass/tempfile.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70d66ae08575203a361dae6b30dc33c03f13a9c7/src%2Ftest%2Frun-pass%2Ftempfile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70d66ae08575203a361dae6b30dc33c03f13a9c7/src%2Ftest%2Frun-pass%2Ftempfile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftempfile.rs?ref=70d66ae08575203a361dae6b30dc33c03f13a9c7", "patch": "@@ -64,7 +64,7 @@ fn test_rm_tempdir() {\n         let f: proc() -> TempDir = proc() {\n             TempDir::new(\"test_rm_tempdir\").unwrap()\n         };\n-        let tmp = task::try(f).expect(\"test_rm_tmdir\");\n+        let tmp = task::try(f).ok().expect(\"test_rm_tmdir\");\n         path = tmp.path().clone();\n         assert!(path.exists());\n     }"}]}