{"sha": "0247faed2980a858e04fa57f78d585c8b066948d", "node_id": "C_kwDOAAsO6NoAKDAyNDdmYWVkMjk4MGE4NThlMDRmYTU3Zjc4ZDU4NWM4YjA2Njk0OGQ", "commit": {"author": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-05-09T00:53:36Z"}, "committer": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-05-13T22:27:40Z"}, "message": "Add bound_impl_trait_ref", "tree": {"sha": "3e43a39a19787a882a05e2da4e1f12eba44ba901", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e43a39a19787a882a05e2da4e1f12eba44ba901"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0247faed2980a858e04fa57f78d585c8b066948d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0247faed2980a858e04fa57f78d585c8b066948d", "html_url": "https://github.com/rust-lang/rust/commit/0247faed2980a858e04fa57f78d585c8b066948d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0247faed2980a858e04fa57f78d585c8b066948d/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c05e8d009a864238681157189c93740911bfa14", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c05e8d009a864238681157189c93740911bfa14", "html_url": "https://github.com/rust-lang/rust/commit/6c05e8d009a864238681157189c93740911bfa14"}], "stats": {"total": 53, "additions": 28, "deletions": 25}, "files": [{"sha": "9d8124eb25db15e34a42059b0e0b77ca612cf892", "filename": "compiler/rustc_middle/src/ty/print/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0247faed2980a858e04fa57f78d585c8b066948d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0247faed2980a858e04fa57f78d585c8b066948d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs?ref=0247faed2980a858e04fa57f78d585c8b066948d", "patch": "@@ -1,5 +1,5 @@\n use crate::ty::subst::{GenericArg, Subst};\n-use crate::ty::{self, DefIdTree, EarlyBinder, Ty, TyCtxt};\n+use crate::ty::{self, DefIdTree, Ty, TyCtxt};\n \n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::sso::SsoHashSet;\n@@ -116,14 +116,14 @@ pub trait Printer<'tcx>: Sized {\n             DefPathData::Impl => {\n                 let generics = self.tcx().generics_of(def_id);\n                 let self_ty = self.tcx().bound_type_of(def_id);\n-                let impl_trait_ref = self.tcx().impl_trait_ref(def_id);\n+                let impl_trait_ref = self.tcx().bound_impl_trait_ref(def_id);\n                 let (self_ty, impl_trait_ref) = if substs.len() >= generics.count() {\n                     (\n                         self_ty.subst(self.tcx(), substs),\n-                        EarlyBinder(impl_trait_ref).subst(self.tcx(), substs),\n+                        impl_trait_ref.map(|i| i.subst(self.tcx(), substs)),\n                     )\n                 } else {\n-                    (self_ty.0, impl_trait_ref)\n+                    (self_ty.0, impl_trait_ref.map(|i| i.0))\n                 };\n                 self.print_impl_path(def_id, substs, self_ty, impl_trait_ref)\n             }"}, {"sha": "ed0f6a7ccd10805a79655402f5b32aa838f90f3f", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0247faed2980a858e04fa57f78d585c8b066948d/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0247faed2980a858e04fa57f78d585c8b066948d/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=0247faed2980a858e04fa57f78d585c8b066948d", "patch": "@@ -600,6 +600,10 @@ impl<'tcx> TyCtxt<'tcx> {\n     pub fn bound_fn_sig(self, def_id: DefId) -> EarlyBinder<ty::PolyFnSig<'tcx>> {\n         EarlyBinder(self.fn_sig(def_id))\n     }\n+\n+    pub fn bound_impl_trait_ref(self, def_id: DefId) -> Option<EarlyBinder<ty::TraitRef<'tcx>>> {\n+        self.impl_trait_ref(def_id).map(|i| EarlyBinder(i))\n+    }\n }\n \n struct OpaqueTypeExpander<'tcx> {"}, {"sha": "d09cc4fb62f3f6b6b81aeeea78af690276cf8aa4", "filename": "compiler/rustc_trait_selection/src/traits/coherence.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0247faed2980a858e04fa57f78d585c8b066948d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0247faed2980a858e04fa57f78d585c8b066948d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs?ref=0247faed2980a858e04fa57f78d585c8b066948d", "patch": "@@ -23,7 +23,7 @@ use rustc_middle::traits::specialization_graph::OverlapMode;\n use rustc_middle::ty::fast_reject::{self, TreatParams};\n use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::subst::Subst;\n-use rustc_middle::ty::{self, EarlyBinder, ImplSubject, Ty, TyCtxt};\n+use rustc_middle::ty::{self, ImplSubject, Ty, TyCtxt};\n use rustc_span::symbol::sym;\n use rustc_span::DUMMY_SP;\n use std::fmt::Debug;\n@@ -136,7 +136,7 @@ fn with_fresh_ty_vars<'cx, 'tcx>(\n     let header = ty::ImplHeader {\n         impl_def_id,\n         self_ty: tcx.bound_type_of(impl_def_id).subst(tcx, impl_substs),\n-        trait_ref: EarlyBinder(tcx.impl_trait_ref(impl_def_id)).subst(tcx, impl_substs),\n+        trait_ref: tcx.bound_impl_trait_ref(impl_def_id).map(|i| i.subst(tcx, impl_substs)),\n         predicates: tcx.predicates_of(impl_def_id).instantiate(tcx, impl_substs).predicates,\n     };\n "}, {"sha": "4263a6fdf18415155c59ad8bb8ecc5dbb46baac9", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/on_unimplemented.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0247faed2980a858e04fa57f78d585c8b066948d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0247faed2980a858e04fa57f78d585c8b066948d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs?ref=0247faed2980a858e04fa57f78d585c8b066948d", "patch": "@@ -5,7 +5,7 @@ use crate::infer::InferCtxt;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_middle::ty::subst::{Subst, SubstsRef};\n-use rustc_middle::ty::{self, EarlyBinder, GenericParamDefKind};\n+use rustc_middle::ty::{self, GenericParamDefKind};\n use rustc_span::symbol::sym;\n use std::iter;\n \n@@ -45,8 +45,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n \n         self.tcx.for_each_relevant_impl(trait_ref.def_id, trait_self_ty, |def_id| {\n             let impl_substs = self.fresh_substs_for_item(obligation.cause.span, def_id);\n-            let impl_trait_ref =\n-                EarlyBinder(tcx.impl_trait_ref(def_id).unwrap()).subst(tcx, impl_substs);\n+            let impl_trait_ref = tcx.bound_impl_trait_ref(def_id).unwrap().subst(tcx, impl_substs);\n \n             let impl_self_ty = impl_trait_ref.self_ty();\n "}, {"sha": "ab617d16cc4f743318f67bec34495de81f6a39a2", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0247faed2980a858e04fa57f78d585c8b066948d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0247faed2980a858e04fa57f78d585c8b066948d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=0247faed2980a858e04fa57f78d585c8b066948d", "patch": "@@ -2066,12 +2066,12 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         impl_def_id: DefId,\n         obligation: &TraitObligation<'tcx>,\n     ) -> Result<Normalized<'tcx, SubstsRef<'tcx>>, ()> {\n-        let impl_trait_ref = self.tcx().impl_trait_ref(impl_def_id).unwrap();\n+        let impl_trait_ref = self.tcx().bound_impl_trait_ref(impl_def_id).unwrap();\n \n         // Before we create the substitutions and everything, first\n         // consider a \"quick reject\". This avoids creating more types\n         // and so forth that we need to.\n-        if self.fast_reject_trait_refs(obligation, &impl_trait_ref) {\n+        if self.fast_reject_trait_refs(obligation, &impl_trait_ref.0) {\n             return Err(());\n         }\n \n@@ -2081,7 +2081,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n         let impl_substs = self.infcx.fresh_substs_for_item(obligation.cause.span, impl_def_id);\n \n-        let impl_trait_ref = EarlyBinder(impl_trait_ref).subst(self.tcx(), impl_substs);\n+        let impl_trait_ref = impl_trait_ref.subst(self.tcx(), impl_substs);\n \n         debug!(?impl_trait_ref);\n "}, {"sha": "bca1d15ada90f85ec2e4703e0ceb872a64b1ade6", "filename": "compiler/rustc_trait_selection/src/traits/specialize/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0247faed2980a858e04fa57f78d585c8b066948d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0247faed2980a858e04fa57f78d585c8b066948d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs?ref=0247faed2980a858e04fa57f78d585c8b066948d", "patch": "@@ -20,7 +20,7 @@ use rustc_errors::{struct_span_err, EmissionGuarantee};\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_middle::lint::LintDiagnosticBuilder;\n use rustc_middle::ty::subst::{InternalSubsts, Subst, SubstsRef};\n-use rustc_middle::ty::{self, EarlyBinder, ImplSubject, TyCtxt};\n+use rustc_middle::ty::{self, ImplSubject, TyCtxt};\n use rustc_session::lint::builtin::COHERENCE_LEAK_CHECK;\n use rustc_session::lint::builtin::ORDER_DEPENDENT_TRAIT_OBJECTS;\n use rustc_span::{Span, DUMMY_SP};\n@@ -84,8 +84,8 @@ pub fn translate_substs<'a, 'tcx>(\n         \"translate_substs({:?}, {:?}, {:?}, {:?})\",\n         param_env, source_impl, source_substs, target_node\n     );\n-    let source_trait_ref = EarlyBinder(infcx.tcx.impl_trait_ref(source_impl).unwrap())\n-        .subst(infcx.tcx, &source_substs);\n+    let source_trait_ref =\n+        infcx.tcx.bound_impl_trait_ref(source_impl).unwrap().subst(infcx.tcx, &source_substs);\n \n     // translate the Self and Param parts of the substitution, since those\n     // vary across impls"}, {"sha": "5b5b84991918840fda33de19c17d8630c6347157", "filename": "compiler/rustc_traits/src/chalk/db.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0247faed2980a858e04fa57f78d585c8b066948d/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0247faed2980a858e04fa57f78d585c8b066948d/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs?ref=0247faed2980a858e04fa57f78d585c8b066948d", "patch": "@@ -310,8 +310,8 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n         let bound_vars = bound_vars_for_item(self.interner.tcx, def_id);\n         let binders = binders_for(self.interner, bound_vars);\n \n-        let trait_ref = self.interner.tcx.impl_trait_ref(def_id).expect(\"not an impl\");\n-        let trait_ref = EarlyBinder(trait_ref).subst(self.interner.tcx, bound_vars);\n+        let trait_ref = self.interner.tcx.bound_impl_trait_ref(def_id).expect(\"not an impl\");\n+        let trait_ref = trait_ref.subst(self.interner.tcx, bound_vars);\n \n         let where_clauses = self.where_clauses_for(def_id, bound_vars);\n \n@@ -352,11 +352,11 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n         let all_impls = self.interner.tcx.all_impls(def_id);\n         let matched_impls = all_impls.filter(|impl_def_id| {\n             use chalk_ir::could_match::CouldMatch;\n-            let trait_ref = self.interner.tcx.impl_trait_ref(*impl_def_id).unwrap();\n+            let trait_ref = self.interner.tcx.bound_impl_trait_ref(*impl_def_id).unwrap();\n             let bound_vars = bound_vars_for_item(self.interner.tcx, *impl_def_id);\n \n-            let self_ty = trait_ref.self_ty();\n-            let self_ty = EarlyBinder(self_ty).subst(self.interner.tcx, bound_vars);\n+            let self_ty = trait_ref.map_bound(|t| t.self_ty());\n+            let self_ty = self_ty.subst(self.interner.tcx, bound_vars);\n             let lowered_ty = self_ty.lower_into(self.interner);\n \n             parameters[0].assert_ty_ref(self.interner).could_match("}, {"sha": "805cc5c71d83a40c29d21424bcec1a05ff66eec9", "filename": "src/librustdoc/clean/blanket_impl.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0247faed2980a858e04fa57f78d585c8b066948d/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0247faed2980a858e04fa57f78d585c8b066948d/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs?ref=0247faed2980a858e04fa57f78d585c8b066948d", "patch": "@@ -34,15 +34,15 @@ impl<'a, 'tcx> BlanketImplFinder<'a, 'tcx> {\n                         trait_def_id,\n                         impl_def_id\n                     );\n-                    let trait_ref = cx.tcx.impl_trait_ref(impl_def_id).unwrap();\n-                    let is_param = matches!(trait_ref.self_ty().kind(), ty::Param(_));\n+                    let trait_ref = cx.tcx.bound_impl_trait_ref(impl_def_id).unwrap();\n+                    let is_param = matches!(trait_ref.0.self_ty().kind(), ty::Param(_));\n                     let may_apply = is_param && cx.tcx.infer_ctxt().enter(|infcx| {\n                         let substs = infcx.fresh_substs_for_item(DUMMY_SP, item_def_id);\n                         let ty = ty.subst(infcx.tcx, substs);\n                         let param_env = EarlyBinder(param_env).subst(infcx.tcx, substs);\n \n                         let impl_substs = infcx.fresh_substs_for_item(DUMMY_SP, impl_def_id);\n-                        let trait_ref = EarlyBinder(trait_ref).subst(infcx.tcx, impl_substs);\n+                        let trait_ref = trait_ref.subst(infcx.tcx, impl_substs);\n \n                         // Require the type the impl is implemented on to match\n                         // our type, and ignore the impl if there was a mismatch.\n@@ -115,15 +115,15 @@ impl<'a, 'tcx> BlanketImplFinder<'a, 'tcx> {\n                             ),\n                             // FIXME(eddyb) compute both `trait_` and `for_` from\n                             // the post-inference `trait_ref`, as it's more accurate.\n-                            trait_: Some(trait_ref.clean(cx)),\n+                            trait_: Some(trait_ref.0.clean(cx)),\n                             for_: ty.0.clean(cx),\n                             items: cx.tcx\n                                 .associated_items(impl_def_id)\n                                 .in_definition_order()\n                                 .map(|x| x.clean(cx))\n                                 .collect::<Vec<_>>(),\n                             polarity: ty::ImplPolarity::Positive,\n-                            kind: ImplKind::Blanket(box trait_ref.self_ty().clean(cx)),\n+                            kind: ImplKind::Blanket(box trait_ref.0.self_ty().clean(cx)),\n                         }),\n                         cfg: None,\n                     });"}]}