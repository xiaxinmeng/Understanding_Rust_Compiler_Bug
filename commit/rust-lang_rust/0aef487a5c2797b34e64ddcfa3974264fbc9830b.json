{"sha": "0aef487a5c2797b34e64ddcfa3974264fbc9830b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhZWY0ODdhNWMyNzk3YjM0ZTY0ZGRjZmEzOTc0MjY0ZmJjOTgzMGI=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-01-26T02:25:02Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-01-26T02:33:05Z"}, "message": "std,extra: Make some types public and other private.\n\nThese are either returned from public functions, and really should\nappear in the documentation, but don't since they're private, or are\nimplementation details that are currently public.", "tree": {"sha": "9633f80b156d69af708248edd37a0dc7d66b701e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9633f80b156d69af708248edd37a0dc7d66b701e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0aef487a5c2797b34e64ddcfa3974264fbc9830b", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0aef487a5c2797b34e64ddcfa3974264fbc9830b", "html_url": "https://github.com/rust-lang/rust/commit/0aef487a5c2797b34e64ddcfa3974264fbc9830b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0aef487a5c2797b34e64ddcfa3974264fbc9830b/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6516b303b5f35e81350cccdf6629766e2b0a027e", "url": "https://api.github.com/repos/rust-lang/rust/commits/6516b303b5f35e81350cccdf6629766e2b0a027e", "html_url": "https://github.com/rust-lang/rust/commit/6516b303b5f35e81350cccdf6629766e2b0a027e"}], "stats": {"total": 30, "additions": 16, "deletions": 14}, "files": [{"sha": "791673d75bb37009a2838b2325788bfd856cb20b", "filename": "src/libextra/btree.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0aef487a5c2797b34e64ddcfa3974264fbc9830b/src%2Flibextra%2Fbtree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aef487a5c2797b34e64ddcfa3974264fbc9830b/src%2Flibextra%2Fbtree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fbtree.rs?ref=0aef487a5c2797b34e64ddcfa3974264fbc9830b", "patch": "@@ -22,10 +22,10 @@\n ///number of elements that a given node can contain.\n #[allow(missing_doc)]\n pub struct BTree<K, V> {\n-    root: Node<K, V>,\n-    len: uint,\n-    lower_bound: uint,\n-    upper_bound: uint\n+    priv root: Node<K, V>,\n+    priv len: uint,\n+    priv lower_bound: uint,\n+    priv upper_bound: uint\n }\n \n //We would probably want to remove the dependence on the Clone trait in the future.\n@@ -47,9 +47,9 @@ impl<K: TotalOrd, V> BTree<K, V> {\n \n     ///Helper function for clone: returns new BTree with supplied root node,\n     ///length, and lower bound.  For use when the length is known already.\n-    pub fn new_with_node_len(n: Node<K, V>,\n-                             length: uint,\n-                             lb: uint) -> BTree<K, V> {\n+    fn new_with_node_len(n: Node<K, V>,\n+                         length: uint,\n+                         lb: uint) -> BTree<K, V> {\n         BTree {\n             root: n,\n             len: length,\n@@ -590,4 +590,3 @@ mod test_btree {\n     }\n \n }\n-"}, {"sha": "a54f3110cd63bb84f20993272a1fc0f3c75fb976", "filename": "src/libextra/test.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0aef487a5c2797b34e64ddcfa3974264fbc9830b/src%2Flibextra%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aef487a5c2797b34e64ddcfa3974264fbc9830b/src%2Flibextra%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftest.rs?ref=0aef487a5c2797b34e64ddcfa3974264fbc9830b", "patch": "@@ -202,7 +202,8 @@ pub struct TestOpts {\n     logfile: Option<Path>\n }\n \n-type OptRes = Result<TestOpts, ~str>;\n+/// Result of parsing the options.\n+pub type OptRes = Result<TestOpts, ~str>;\n \n fn optgroups() -> ~[getopts::groups::OptGroup] {\n     ~[groups::optflag(\"\", \"ignored\", \"Run ignored tests\"),\n@@ -722,7 +723,8 @@ enum TestEvent {\n     TeResult(TestDesc, TestResult),\n }\n \n-type MonitorMsg = (TestDesc, TestResult);\n+/// The message sent to the test monitor from the individual runners.\n+pub type MonitorMsg = (TestDesc, TestResult);\n \n fn run_tests(opts: &TestOpts,\n              tests: ~[TestDescAndFn],"}, {"sha": "00f4a0c099d18e71d64cfaa9bbc16d3c227c995a", "filename": "src/libnative/io/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0aef487a5c2797b34e64ddcfa3974264fbc9830b/src%2Flibnative%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aef487a5c2797b34e64ddcfa3974264fbc9830b/src%2Flibnative%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fmod.rs?ref=0aef487a5c2797b34e64ddcfa3974264fbc9830b", "patch": "@@ -63,7 +63,7 @@ pub mod timer;\n \n mod timer_helper;\n \n-type IoResult<T> = Result<T, IoError>;\n+pub type IoResult<T> = Result<T, IoError>;\n \n fn unimpl() -> IoError {\n     IoError {"}, {"sha": "ebbd51524cbf88eb860966078c83c7715c1f5895", "filename": "src/libstd/comm/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0aef487a5c2797b34e64ddcfa3974264fbc9830b/src%2Flibstd%2Fcomm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aef487a5c2797b34e64ddcfa3974264fbc9830b/src%2Flibstd%2Fcomm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcomm%2Fmod.rs?ref=0aef487a5c2797b34e64ddcfa3974264fbc9830b", "patch": "@@ -243,7 +243,7 @@ use vec::OwnedVector;\n use spsc = sync::spsc_queue;\n use mpsc = sync::mpsc_queue;\n \n-pub use self::select::Select;\n+pub use self::select::{Select, Handle};\n \n macro_rules! test (\n     { fn $name:ident() $b:block $($a:attr)*} => ("}, {"sha": "96c345f36890681db4bce5f8166104e431bea5eb", "filename": "src/libstd/comm/select.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aef487a5c2797b34e64ddcfa3974264fbc9830b/src%2Flibstd%2Fcomm%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aef487a5c2797b34e64ddcfa3974264fbc9830b/src%2Flibstd%2Fcomm%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcomm%2Fselect.rs?ref=0aef487a5c2797b34e64ddcfa3974264fbc9830b", "patch": "@@ -89,6 +89,7 @@ pub struct Select {\n /// This handle is used to keep the port in the set as well as interact with the\n /// underlying port.\n pub struct Handle<'port, T> {\n+    /// A unique ID for this Handle.\n     id: uint,\n     priv selector: &'port Select,\n     priv port: &'port mut Port<T>,"}, {"sha": "3b1c45d7527278a4e9dc511a81797eda4028c27e", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0aef487a5c2797b34e64ddcfa3974264fbc9830b/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aef487a5c2797b34e64ddcfa3974264fbc9830b/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=0aef487a5c2797b34e64ddcfa3974264fbc9830b", "patch": "@@ -1268,7 +1268,7 @@ pub trait Acceptor<T> {\n /// The Some contains another Option representing whether the connection attempt was succesful.\n /// A successful connection will be wrapped in Some.\n /// A failed connection is represented as a None and raises a condition.\n-struct IncomingConnections<'a, A> {\n+pub struct IncomingConnections<'a, A> {\n     priv inc: &'a mut A,\n }\n "}, {"sha": "c7626105f51baa9a0e83ea5c8dc138f6989b3f9f", "filename": "src/libstd/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0aef487a5c2797b34e64ddcfa3974264fbc9830b/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aef487a5c2797b34e64ddcfa3974264fbc9830b/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=0aef487a5c2797b34e64ddcfa3974264fbc9830b", "patch": "@@ -620,7 +620,7 @@ enum NormalizationForm {\n /// External iterator for a string's normalization's characters.\n /// Use with the `std::iter` module.\n #[deriving(Clone)]\n-struct Normalizations<'a> {\n+pub struct Normalizations<'a> {\n     priv kind: NormalizationForm,\n     priv iter: Chars<'a>,\n     priv buffer: ~[(char, u8)],"}]}