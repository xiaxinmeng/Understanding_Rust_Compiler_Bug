{"sha": "996d5e8d6ce2e756f50bfa51b9622c50f725415c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5NmQ1ZThkNmNlMmU3NTZmNTBiZmE1MWI5NjIyYzUwZjcyNTQxNWM=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2018-12-25T09:20:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-12-25T09:20:29Z"}, "message": "Fix shape when formatting return or break expr on statement position (#3259)", "tree": {"sha": "375d0e17eec17fd12ff33bb3d8796c6473cb8936", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/375d0e17eec17fd12ff33bb3d8796c6473cb8936"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/996d5e8d6ce2e756f50bfa51b9622c50f725415c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcIfZdCRBK7hj4Ov3rIwAAdHIIAJTS27MAU+/IKrkP6xIm4/yQ\n4eDptX6oSbbTrW8Uq8mGgMAwt44zu+kpHCUcPoWtCFFd2m9HOKrMGvPBhqZiMCMD\nOAa9mkmTA0q3KWaqDGXjvVM03ryV1xgmjnQ2n83Ufjhl5emduVbUNq3In/tFnrBp\nSORqka0sMLa2KITSEtLMDCaMqD6UJkX84phYUgQf9qBaPnqfAxC1SFOkJfERC1Cj\nGS7iHzSKujDNlcDum8w52otnl2UP6T5VZ2z7wWwb0YKMKdvGAFIeX5d3i7CuK6nM\nypO7bu+q0XByi8RGDHT7Hajhc589ZrTKtmutgz5NBKzWciOTFT9DCHPthnTXVAY=\n=P8FE\n-----END PGP SIGNATURE-----\n", "payload": "tree 375d0e17eec17fd12ff33bb3d8796c6473cb8936\nparent 09c9cd41256c8232274534189a0dffde2656f447\nauthor Seiichi Uchida <seuchida@gmail.com> 1545729629 +0900\ncommitter GitHub <noreply@github.com> 1545729629 +0900\n\nFix shape when formatting return or break expr on statement position (#3259)\n\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/996d5e8d6ce2e756f50bfa51b9622c50f725415c", "html_url": "https://github.com/rust-lang/rust/commit/996d5e8d6ce2e756f50bfa51b9622c50f725415c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/996d5e8d6ce2e756f50bfa51b9622c50f725415c/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09c9cd41256c8232274534189a0dffde2656f447", "url": "https://api.github.com/repos/rust-lang/rust/commits/09c9cd41256c8232274534189a0dffde2656f447", "html_url": "https://github.com/rust-lang/rust/commit/09c9cd41256c8232274534189a0dffde2656f447"}], "stats": {"total": 49, "additions": 46, "deletions": 3}, "files": [{"sha": "f7ed9a61929f1f415f8af897a0837a14189e71e1", "filename": ".travis.yml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/996d5e8d6ce2e756f50bfa51b9622c50f725415c/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/996d5e8d6ce2e756f50bfa51b9622c50f725415c/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=996d5e8d6ce2e756f50bfa51b9622c50f725415c", "patch": "@@ -37,8 +37,8 @@ matrix:\n   allow_failures:\n     # Doesn't build - seems to be because of an option\n     - env: INTEGRATION=packed_simd\n-    # Test failure\n-    - env: INTEGRATION=rust-clippy\n+    # Doesn't build - a temporal build failure due to breaking changes in the nightly compilre\n+    - env: INTEGRATION=rust-semverver\n \n script:\n   - |"}, {"sha": "0d8e9c875808767976516dbee4c4e57d9b5d81fe", "filename": "src/expr.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/996d5e8d6ce2e756f50bfa51b9622c50f725415c/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/996d5e8d6ce2e756f50bfa51b9622c50f725415c/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=996d5e8d6ce2e756f50bfa51b9622c50f725415c", "patch": "@@ -41,7 +41,7 @@ use types::{rewrite_path, PathContext};\n use utils::{\n     colon_spaces, contains_skip, count_newlines, first_line_ends_with, inner_attributes,\n     last_line_extendable, last_line_width, mk_sp, outer_attributes, ptr_vec_to_ref_vec,\n-    semicolon_for_stmt, wrap_str,\n+    semicolon_for_expr, semicolon_for_stmt, wrap_str,\n };\n use vertical::rewrite_with_alignment;\n use visitor::FmtVisitor;\n@@ -69,6 +69,11 @@ pub fn format_expr(\n     if contains_skip(&*expr.attrs) {\n         return Some(context.snippet(expr.span()).to_owned());\n     }\n+    let shape = if expr_type == ExprType::Statement && semicolon_for_expr(context, expr) {\n+        shape.sub_width(1)?\n+    } else {\n+        shape\n+    };\n \n     let expr_rw = match expr.node {\n         ast::ExprKind::Array(ref expr_vec) => rewrite_array("}, {"sha": "514f755c6988bf20ffb90f51042f4035444111ac", "filename": "tests/source/expr.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/996d5e8d6ce2e756f50bfa51b9622c50f725415c/tests%2Fsource%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/996d5e8d6ce2e756f50bfa51b9622c50f725415c/tests%2Fsource%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fexpr.rs?ref=996d5e8d6ce2e756f50bfa51b9622c50f725415c", "patch": "@@ -462,3 +462,20 @@ fn issue_3003() {\n         .iter()\n         .collect();\n }\n+\n+fn issue3226() {\n+    {\n+        {\n+            {\n+                return Err(ErrorKind::ManagementInterfaceError(\"Server exited unexpectedly\").into())\n+            }\n+        }\n+    }\n+    {\n+        {\n+            {\n+                break Err(ErrorKind::ManagementInterfaceError(\"Server exited unexpectedlyy\").into())\n+            }\n+        }\n+    }\n+}"}, {"sha": "e46cb898232fc6f6db703c79765f09dda0ee6185", "filename": "tests/target/expr.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/996d5e8d6ce2e756f50bfa51b9622c50f725415c/tests%2Ftarget%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/996d5e8d6ce2e756f50bfa51b9622c50f725415c/tests%2Ftarget%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fexpr.rs?ref=996d5e8d6ce2e756f50bfa51b9622c50f725415c", "patch": "@@ -541,3 +541,24 @@ fn issue_3003() {\n     .iter()\n     .collect();\n }\n+\n+fn issue3226() {\n+    {\n+        {\n+            {\n+                return Err(\n+                    ErrorKind::ManagementInterfaceError(\"Server exited unexpectedly\").into(),\n+                );\n+            }\n+        }\n+    }\n+    {\n+        {\n+            {\n+                break Err(\n+                    ErrorKind::ManagementInterfaceError(\"Server exited unexpectedlyy\").into(),\n+                );\n+            }\n+        }\n+    }\n+}"}]}