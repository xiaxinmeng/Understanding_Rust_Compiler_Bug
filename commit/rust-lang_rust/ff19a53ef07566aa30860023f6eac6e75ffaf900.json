{"sha": "ff19a53ef07566aa30860023f6eac6e75ffaf900", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmMTlhNTNlZjA3NTY2YWEzMDg2MDAyM2Y2ZWFjNmU3NWZmYWY5MDA=", "commit": {"author": {"name": "Igor Matuszewski", "email": "Xanewok@gmail.com", "date": "2019-01-13T12:06:26Z"}, "committer": {"name": "Igor Matuszewski", "email": "Xanewok@gmail.com", "date": "2019-01-15T10:10:51Z"}, "message": "Querify entry_fn", "tree": {"sha": "a929931a30157db943e9f92a40188c227c48338a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a929931a30157db943e9f92a40188c227c48338a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff19a53ef07566aa30860023f6eac6e75ffaf900", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff19a53ef07566aa30860023f6eac6e75ffaf900", "html_url": "https://github.com/rust-lang/rust/commit/ff19a53ef07566aa30860023f6eac6e75ffaf900", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff19a53ef07566aa30860023f6eac6e75ffaf900/comments", "author": {"login": "Xanewok", "id": 3093213, "node_id": "MDQ6VXNlcjMwOTMyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3093213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xanewok", "html_url": "https://github.com/Xanewok", "followers_url": "https://api.github.com/users/Xanewok/followers", "following_url": "https://api.github.com/users/Xanewok/following{/other_user}", "gists_url": "https://api.github.com/users/Xanewok/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xanewok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xanewok/subscriptions", "organizations_url": "https://api.github.com/users/Xanewok/orgs", "repos_url": "https://api.github.com/users/Xanewok/repos", "events_url": "https://api.github.com/users/Xanewok/events{/privacy}", "received_events_url": "https://api.github.com/users/Xanewok/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Xanewok", "id": 3093213, "node_id": "MDQ6VXNlcjMwOTMyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3093213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xanewok", "html_url": "https://github.com/Xanewok", "followers_url": "https://api.github.com/users/Xanewok/followers", "following_url": "https://api.github.com/users/Xanewok/following{/other_user}", "gists_url": "https://api.github.com/users/Xanewok/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xanewok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xanewok/subscriptions", "organizations_url": "https://api.github.com/users/Xanewok/orgs", "repos_url": "https://api.github.com/users/Xanewok/repos", "events_url": "https://api.github.com/users/Xanewok/events{/privacy}", "received_events_url": "https://api.github.com/users/Xanewok/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "33e6df4b62237af312bf6e3f40a97f5bdc94949a", "url": "https://api.github.com/repos/rust-lang/rust/commits/33e6df4b62237af312bf6e3f40a97f5bdc94949a", "html_url": "https://github.com/rust-lang/rust/commit/33e6df4b62237af312bf6e3f40a97f5bdc94949a"}], "stats": {"total": 226, "additions": 116, "deletions": 110}, "files": [{"sha": "9df41c981eb7be09bf0591162da6496e1fbfaa1c", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ff19a53ef07566aa30860023f6eac6e75ffaf900/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff19a53ef07566aa30860023f6eac6e75ffaf900/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=ff19a53ef07566aa30860023f6eac6e75ffaf900", "patch": "@@ -583,6 +583,7 @@ define_dep_nodes!( <'tcx>\n     [] CheckImplItemWellFormed(DefId),\n     [] ReachableNonGenerics(CrateNum),\n     [] NativeLibraries(CrateNum),\n+    [] EntryFn(CrateNum),\n     [] PluginRegistrarFn(CrateNum),\n     [] ProcMacroDeclsStatic(CrateNum),\n     [input] CrateDisambiguator(CrateNum),"}, {"sha": "abbf0ae210c25c6635e7472429df15ceeb9c6240", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff19a53ef07566aa30860023f6eac6e75ffaf900/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff19a53ef07566aa30860023f6eac6e75ffaf900/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=ff19a53ef07566aa30860023f6eac6e75ffaf900", "patch": "@@ -409,7 +409,7 @@ fn create_and_seed_worklist<'a, 'tcx>(\n         }\n     }).chain(\n         // Seed entry point\n-        tcx.sess.entry_fn.borrow().map(|(id, _, _)| id)\n+        tcx.entry_fn(LOCAL_CRATE).map(|(def_id, _)| tcx.hir().as_local_node_id(def_id).unwrap())\n     ).collect::<Vec<_>>();\n \n     // Seed implemented trait items"}, {"sha": "218ca3b7553c06a496df5ec90cae01cfe7c07c40", "filename": "src/librustc/middle/entry.rs", "status": "modified", "additions": 46, "deletions": 31, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/ff19a53ef07566aa30860023f6eac6e75ffaf900/src%2Flibrustc%2Fmiddle%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff19a53ef07566aa30860023f6eac6e75ffaf900/src%2Flibrustc%2Fmiddle%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fentry.rs?ref=ff19a53ef07566aa30860023f6eac6e75ffaf900", "patch": "@@ -1,5 +1,5 @@\n use hir::map as hir_map;\n-use hir::def_id::{CRATE_DEF_INDEX};\n+use hir::def_id::{CrateNum, CRATE_DEF_INDEX, DefId, LOCAL_CRATE};\n use session::{config, Session};\n use session::config::EntryFnType;\n use syntax::ast::NodeId;\n@@ -8,6 +8,8 @@ use syntax::entry::EntryPointType;\n use syntax_pos::Span;\n use hir::{Item, ItemKind, ImplItem, TraitItem};\n use hir::itemlikevisit::ItemLikeVisitor;\n+use ty::TyCtxt;\n+use ty::query::Providers;\n \n struct EntryContext<'a, 'tcx: 'a> {\n     session: &'a Session,\n@@ -45,36 +47,34 @@ impl<'a, 'tcx> ItemLikeVisitor<'tcx> for EntryContext<'a, 'tcx> {\n     }\n }\n \n-pub fn find_entry_point(session: &Session,\n-                        hir_map: &hir_map::Map<'_>,\n-                        crate_name: &str) {\n-    let any_exe = session.crate_types.borrow().iter().any(|ty| {\n+fn entry_fn(tcx: TyCtxt<'_, '_, '_>, cnum: CrateNum) -> Option<(DefId, EntryFnType)> {\n+    assert_eq!(cnum, LOCAL_CRATE);\n+\n+    let any_exe = tcx.sess.crate_types.borrow().iter().any(|ty| {\n         *ty == config::CrateType::Executable\n     });\n     if !any_exe {\n         // No need to find a main function\n-        session.entry_fn.set(None);\n-        return\n+        return None;\n     }\n \n     // If the user wants no main function at all, then stop here.\n-    if attr::contains_name(&hir_map.krate().attrs, \"no_main\") {\n-        session.entry_fn.set(None);\n-        return\n+    if attr::contains_name(&tcx.hir().krate().attrs, \"no_main\") {\n+        return None;\n     }\n \n     let mut ctxt = EntryContext {\n-        session,\n-        map: hir_map,\n+        session: tcx.sess,\n+        map: tcx.hir(),\n         main_fn: None,\n         attr_main_fn: None,\n         start_fn: None,\n         non_main_fns: Vec::new(),\n     };\n \n-    hir_map.krate().visit_all_item_likes(&mut ctxt);\n+    tcx.hir().krate().visit_all_item_likes(&mut ctxt);\n \n-    configure_main(&mut ctxt, crate_name);\n+    configure_main(tcx, &ctxt)\n }\n \n // Beware, this is duplicated in `libsyntax/entry.rs`, so make sure to keep\n@@ -135,43 +135,58 @@ fn find_item(item: &Item, ctxt: &mut EntryContext<'_, '_>, at_root: bool) {\n                     .span_label(item.span, \"multiple `start` functions\")\n                     .emit();\n             }\n-        },\n-        EntryPointType::None => ()\n+        }\n+        EntryPointType::None => (),\n     }\n }\n \n-fn configure_main(this: &mut EntryContext<'_, '_>, crate_name: &str) {\n-    if let Some((node_id, span)) = this.start_fn {\n-        this.session.entry_fn.set(Some((node_id, span, EntryFnType::Start)));\n-    } else if let Some((node_id, span)) = this.attr_main_fn {\n-        this.session.entry_fn.set(Some((node_id, span, EntryFnType::Main)));\n-    } else if let Some((node_id, span)) = this.main_fn {\n-        this.session.entry_fn.set(Some((node_id, span, EntryFnType::Main)));\n+fn configure_main(\n+    tcx: TyCtxt<'_, '_, '_>,\n+    visitor: &EntryContext<'_, '_>,\n+) -> Option<(DefId, EntryFnType)> {\n+    if let Some((node_id, _)) = visitor.start_fn {\n+        Some((tcx.hir().local_def_id(node_id), EntryFnType::Start))\n+    } else if let Some((node_id, _)) = visitor.attr_main_fn {\n+        Some((tcx.hir().local_def_id(node_id), EntryFnType::Main))\n+    } else if let Some((node_id, _)) = visitor.main_fn {\n+        Some((tcx.hir().local_def_id(node_id), EntryFnType::Main))\n     } else {\n         // No main function\n-        this.session.entry_fn.set(None);\n-        let mut err = struct_err!(this.session, E0601,\n-            \"`main` function not found in crate `{}`\", crate_name);\n-        if !this.non_main_fns.is_empty() {\n+        let mut err = struct_err!(tcx.sess, E0601,\n+            \"`main` function not found in crate `{}`\", tcx.crate_name(LOCAL_CRATE));\n+        if !visitor.non_main_fns.is_empty() {\n             // There were some functions named 'main' though. Try to give the user a hint.\n             err.note(\"the main function must be defined at the crate level \\\n                       but you have one or more functions named 'main' that are not \\\n                       defined at the crate level. Either move the definition or \\\n                       attach the `#[main]` attribute to override this behavior.\");\n-            for &(_, span) in &this.non_main_fns {\n+            for &(_, span) in &visitor.non_main_fns {\n                 err.span_note(span, \"here is a function named 'main'\");\n             }\n             err.emit();\n-            this.session.abort_if_errors();\n+            tcx.sess.abort_if_errors();\n         } else {\n-            if let Some(ref filename) = this.session.local_crate_source_file {\n+            if let Some(ref filename) = tcx.sess.local_crate_source_file {\n                 err.note(&format!(\"consider adding a `main` function to `{}`\", filename.display()));\n             }\n-            if this.session.teach(&err.get_code().unwrap()) {\n+            if tcx.sess.teach(&err.get_code().unwrap()) {\n                 err.note(\"If you don't know the basics of Rust, you can go look to the Rust Book \\\n                           to get started: https://doc.rust-lang.org/book/\");\n             }\n             err.emit();\n         }\n+\n+        None\n     }\n }\n+\n+pub fn find_entry_point(tcx: TyCtxt<'_, '_, '_>) -> Option<(DefId, EntryFnType)> {\n+    tcx.entry_fn(LOCAL_CRATE)\n+}\n+\n+pub fn provide(providers: &mut Providers<'_>) {\n+    *providers = Providers {\n+        entry_fn,\n+        ..*providers\n+    };\n+}"}, {"sha": "41e75aa32effcd8606dd3ab3e9a462b17c8b33cb", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ff19a53ef07566aa30860023f6eac6e75ffaf900/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff19a53ef07566aa30860023f6eac6e75ffaf900/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=ff19a53ef07566aa30860023f6eac6e75ffaf900", "patch": "@@ -649,15 +649,15 @@ impl Options {\n     }\n }\n \n-// The type of entry function, so\n-// users can have their own entry\n-// functions\n-#[derive(Copy, Clone, PartialEq)]\n+// The type of entry function, so users can have their own entry functions\n+#[derive(Copy, Clone, PartialEq, Hash, Debug)]\n pub enum EntryFnType {\n     Main,\n     Start,\n }\n \n+impl_stable_hash_via_hash!(EntryFnType);\n+\n #[derive(Copy, PartialEq, PartialOrd, Clone, Ord, Eq, Hash, Debug)]\n pub enum CrateType {\n     Executable,"}, {"sha": "cf00bf330deea36cc7d98ea3ac11d76c10f2be14", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff19a53ef07566aa30860023f6eac6e75ffaf900/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff19a53ef07566aa30860023f6eac6e75ffaf900/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=ff19a53ef07566aa30860023f6eac6e75ffaf900", "patch": "@@ -67,8 +67,6 @@ pub struct Session {\n     /// This is `None` if the host and target are the same.\n     pub target_tlib_path: Option<SearchPath>,\n     pub parse_sess: ParseSess,\n-    /// For a library crate, this is always none\n-    pub entry_fn: Once<Option<(NodeId, Span, config::EntryFnType)>>,\n     pub sysroot: PathBuf,\n     /// The name of the root source file of the crate, in the local file system.\n     /// `None` means that there is no source file.\n@@ -1173,8 +1171,6 @@ pub fn build_session_(\n         host_tlib_path,\n         target_tlib_path,\n         parse_sess: p_s,\n-        // For a library crate, this is always none\n-        entry_fn: Once::new(),\n         sysroot,\n         local_crate_source_file,\n         working_dir,"}, {"sha": "38e90d6d823b2aa6885537e7f2956638c5b576de", "filename": "src/librustc/ty/query/config.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ff19a53ef07566aa30860023f6eac6e75ffaf900/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff19a53ef07566aa30860023f6eac6e75ffaf900/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs?ref=ff19a53ef07566aa30860023f6eac6e75ffaf900", "patch": "@@ -629,6 +629,12 @@ impl<'tcx> QueryDescription<'tcx> for queries::foreign_modules<'tcx> {\n     }\n }\n \n+impl<'tcx> QueryDescription<'tcx> for queries::entry_fn<'tcx> {\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> Cow<'static, str> {\n+        \"looking up the entry function of a crate\".into()\n+    }\n+}\n+\n impl<'tcx> QueryDescription<'tcx> for queries::plugin_registrar_fn<'tcx> {\n     fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> Cow<'static, str> {\n         \"looking up the plugin registrar for a crate\".into()"}, {"sha": "ef5a98e6ecb3b50d624003913df44c6ea35aa048", "filename": "src/librustc/ty/query/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff19a53ef07566aa30860023f6eac6e75ffaf900/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff19a53ef07566aa30860023f6eac6e75ffaf900/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs?ref=ff19a53ef07566aa30860023f6eac6e75ffaf900", "patch": "@@ -22,7 +22,7 @@ use mir::mono::CodegenUnit;\n use mir;\n use mir::interpret::GlobalId;\n use session::{CompileResult, CrateDisambiguator};\n-use session::config::OutputFilenames;\n+use session::config::{EntryFnType, OutputFilenames};\n use traits::{self, Vtable};\n use traits::query::{\n     CanonicalPredicateGoal, CanonicalProjectionGoal,\n@@ -476,6 +476,8 @@ define_queries! { <'tcx>\n \n         [] fn foreign_modules: ForeignModules(CrateNum) -> Lrc<Vec<ForeignModule>>,\n \n+        // For a library crate, this is always none\n+        [] fn entry_fn: EntryFn(CrateNum) -> Option<(DefId, EntryFnType)>,\n         [] fn plugin_registrar_fn: PluginRegistrarFn(CrateNum) -> Option<DefId>,\n         [] fn proc_macro_decls_static: ProcMacroDeclsStatic(CrateNum) -> Option<DefId>,\n         [] fn crate_disambiguator: CrateDisambiguator(CrateNum) -> CrateDisambiguator,"}, {"sha": "bb47d9a9db97098f62c727e5429945cc6a2ef23c", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ff19a53ef07566aa30860023f6eac6e75ffaf900/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff19a53ef07566aa30860023f6eac6e75ffaf900/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=ff19a53ef07566aa30860023f6eac6e75ffaf900", "patch": "@@ -1362,6 +1362,7 @@ pub fn force_from_dep_node<'a, 'gcx, 'lcx>(tcx: TyCtxt<'a, 'gcx, 'lcx>,\n         DepKind::CheckImplItemWellFormed => { force!(check_impl_item_well_formed, def_id!()); }\n         DepKind::ReachableNonGenerics => { force!(reachable_non_generics, krate!()); }\n         DepKind::NativeLibraries => { force!(native_libraries, krate!()); }\n+        DepKind::EntryFn => { force!(entry_fn, krate!()); }\n         DepKind::PluginRegistrarFn => { force!(plugin_registrar_fn, krate!()); }\n         DepKind::ProcMacroDeclsStatic => { force!(proc_macro_decls_static, krate!()); }\n         DepKind::CrateDisambiguator => { force!(crate_disambiguator, krate!()); }"}, {"sha": "b504aa515fd4442753789c28b8291649f9574e7f", "filename": "src/librustc_codegen_llvm/debuginfo/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ff19a53ef07566aa30860023f6eac6e75ffaf900/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff19a53ef07566aa30860023f6eac6e75ffaf900/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs?ref=ff19a53ef07566aa30860023f6eac6e75ffaf900", "patch": "@@ -14,7 +14,7 @@ use llvm;\n use llvm::debuginfo::{DIFile, DIType, DIScope, DIBuilder, DISubprogram, DIArray, DIFlags,\n     DILexicalBlock};\n use rustc::hir::CodegenFnAttrFlags;\n-use rustc::hir::def_id::{DefId, CrateNum};\n+use rustc::hir::def_id::{DefId, CrateNum, LOCAL_CRATE};\n use rustc::ty::subst::{Substs, UnpackedKind};\n \n use abi::Abi;\n@@ -290,9 +290,8 @@ impl DebugInfoMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n \n         let mut flags = DIFlags::FlagPrototyped;\n \n-        let local_id = self.tcx().hir().as_local_node_id(def_id);\n-        if let Some((id, _, _)) = *self.sess().entry_fn.borrow() {\n-            if local_id == Some(id) {\n+        if let Some((id, _)) = self.tcx.entry_fn(LOCAL_CRATE) {\n+            if id == def_id {\n                 flags |= DIFlags::FlagMainSubprogram;\n             }\n         }"}, {"sha": "c372892c521bec292cf4c150bdb9604282426aa8", "filename": "src/librustc_codegen_ssa/back/symbol_export.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff19a53ef07566aa30860023f6eac6e75ffaf900/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff19a53ef07566aa30860023f6eac6e75ffaf900/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs?ref=ff19a53ef07566aa30860023f6eac6e75ffaf900", "patch": "@@ -194,7 +194,7 @@ fn exported_symbols_provider_local<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                  })\n                                  .collect();\n \n-    if tcx.sess.entry_fn.borrow().is_some() {\n+    if tcx.entry_fn(LOCAL_CRATE).is_some() {\n         let exported_symbol = ExportedSymbol::NoDefId(SymbolName::new(\"main\"));\n \n         symbols.push((exported_symbol, SymbolExportLevel::C));"}, {"sha": "38caacba4d0692c4ae99126da14d1f44145f0a00", "filename": "src/librustc_codegen_ssa/base.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ff19a53ef07566aa30860023f6eac6e75ffaf900/src%2Flibrustc_codegen_ssa%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff19a53ef07566aa30860023f6eac6e75ffaf900/src%2Flibrustc_codegen_ssa%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fbase.rs?ref=ff19a53ef07566aa30860023f6eac6e75ffaf900", "patch": "@@ -441,10 +441,8 @@ pub fn codegen_instance<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>>(\n pub fn maybe_create_entry_wrapper<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>>(\n     cx: &'a Bx::CodegenCx\n ) {\n-    let (main_def_id, span) = match *cx.sess().entry_fn.borrow() {\n-        Some((id, span, _)) => {\n-            (cx.tcx().hir().local_def_id(id), span)\n-        }\n+    let (main_def_id, span) = match cx.tcx().entry_fn(LOCAL_CRATE) {\n+        Some((def_id, _)) => { (def_id, cx.tcx().def_span(def_id)) },\n         None => return,\n     };\n \n@@ -458,7 +456,7 @@ pub fn maybe_create_entry_wrapper<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>>(\n \n     let main_llfn = cx.get_fn(instance);\n \n-    let et = cx.sess().entry_fn.get().map(|e| e.2);\n+    let et = cx.tcx().entry_fn(LOCAL_CRATE).map(|e| e.1);\n     match et {\n         Some(EntryFnType::Main) => create_entry_fn::<Bx>(cx, span, main_llfn, main_def_id, true),\n         Some(EntryFnType::Start) => create_entry_fn::<Bx>(cx, span, main_llfn, main_def_id, false),"}, {"sha": "5f61852178d0f0c8e9d836b5088e4777727e475c", "filename": "src/librustc_codegen_utils/lib.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ff19a53ef07566aa30860023f6eac6e75ffaf900/src%2Flibrustc_codegen_utils%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff19a53ef07566aa30860023f6eac6e75ffaf900/src%2Flibrustc_codegen_utils%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Flib.rs?ref=ff19a53ef07566aa30860023f6eac6e75ffaf900", "patch": "@@ -31,6 +31,7 @@ extern crate syntax_pos;\n #[macro_use] extern crate rustc_data_structures;\n \n use rustc::ty::TyCtxt;\n+use rustc::hir::def_id::LOCAL_CRATE;\n \n pub mod link;\n pub mod codegen_backend;\n@@ -42,11 +43,9 @@ pub mod symbol_names_test;\n /// that actually test that compilation succeeds without\n /// reporting an error.\n pub fn check_for_rustc_errors_attr(tcx: TyCtxt) {\n-    if let Some((id, span, _)) = *tcx.sess.entry_fn.borrow() {\n-        let main_def_id = tcx.hir().local_def_id(id);\n-\n-        if tcx.has_attr(main_def_id, \"rustc_error\") {\n-            tcx.sess.span_fatal(span, \"compilation successful\");\n+    if let Some((def_id, _)) = tcx.entry_fn(LOCAL_CRATE) {\n+        if tcx.has_attr(def_id, \"rustc_error\") {\n+            tcx.sess.span_fatal(tcx.def_span(def_id), \"compilation successful\");\n         }\n     }\n }"}, {"sha": "42441100723052f45a6b6bcafeda51e5bf0745cc", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ff19a53ef07566aa30860023f6eac6e75ffaf900/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff19a53ef07566aa30860023f6eac6e75ffaf900/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=ff19a53ef07566aa30860023f6eac6e75ffaf900", "patch": "@@ -1174,6 +1174,7 @@ pub fn default_provide(providers: &mut ty::query::Providers) {\n     rustc_passes::provide(providers);\n     rustc_traits::provide(providers);\n     middle::region::provide(providers);\n+    middle::entry::provide(providers);\n     cstore::provide(providers);\n     lint::provide(providers);\n }\n@@ -1210,10 +1211,6 @@ where\n         rustc_incremental::load_query_result_cache(sess)\n     });\n \n-    time(sess, \"looking for entry point\", || {\n-        middle::entry::find_entry_point(sess, &hir_map, name)\n-    });\n-\n     let mut local_providers = ty::query::Providers::default();\n     default_provide(&mut local_providers);\n     codegen_backend.provide(&mut local_providers);\n@@ -1243,6 +1240,10 @@ where\n             // tcx available.\n             time(sess, \"dep graph tcx init\", || rustc_incremental::dep_graph_tcx_init(tcx));\n \n+            time(sess, \"looking for entry point\", || {\n+                middle::entry::find_entry_point(tcx)\n+            });\n+\n             time(sess, \"looking for plugin registrar\", || {\n                 plugin::build::find_plugin_registrar(tcx)\n             });"}, {"sha": "eb49547e9bf529b38b4a430b47e41e8e9441bec6", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 8, "deletions": 15, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ff19a53ef07566aa30860023f6eac6e75ffaf900/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff19a53ef07566aa30860023f6eac6e75ffaf900/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=ff19a53ef07566aa30860023f6eac6e75ffaf900", "patch": "@@ -177,13 +177,13 @@\n use rustc::hir::{self, CodegenFnAttrFlags};\n use rustc::hir::itemlikevisit::ItemLikeVisitor;\n \n-use rustc::hir::def_id::DefId;\n+use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::mir::interpret::{AllocId, ConstValue};\n use rustc::middle::lang_items::{ExchangeMallocFnLangItem, StartFnLangItem};\n use rustc::ty::subst::Substs;\n use rustc::ty::{self, TypeFoldable, Ty, TyCtxt, GenericParamDefKind};\n use rustc::ty::adjustment::CustomCoerceUnsized;\n-use rustc::session::config;\n+use rustc::session::config::EntryFnType;\n use rustc::mir::{self, Location, Promoted};\n use rustc::mir::visit::Visitor as MirVisitor;\n use rustc::mir::mono::MonoItem;\n@@ -321,9 +321,7 @@ fn collect_roots<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let mut roots = Vec::new();\n \n     {\n-        let entry_fn = tcx.sess.entry_fn.borrow().map(|(node_id, _, _)| {\n-            tcx.hir().local_def_id(node_id)\n-        });\n+        let entry_fn = tcx.entry_fn(LOCAL_CRATE);\n \n         debug!(\"collect_roots: entry_fn = {:?}\", entry_fn);\n \n@@ -924,7 +922,7 @@ struct RootCollector<'b, 'a: 'b, 'tcx: 'a + 'b> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     mode: MonoItemCollectionMode,\n     output: &'b mut Vec<MonoItem<'tcx>>,\n-    entry_fn: Option<DefId>,\n+    entry_fn: Option<(DefId, EntryFnType)>,\n }\n \n impl<'b, 'a, 'v> ItemLikeVisitor<'v> for RootCollector<'b, 'a, 'v> {\n@@ -1023,7 +1021,7 @@ impl<'b, 'a, 'v> RootCollector<'b, 'a, 'v> {\n                 true\n             }\n             MonoItemCollectionMode::Lazy => {\n-                self.entry_fn == Some(def_id) ||\n+                self.entry_fn.map(|(id, _)| id) == Some(def_id) ||\n                 self.tcx.is_reachable_non_generic(def_id) ||\n                 self.tcx.codegen_fn_attrs(def_id).flags.contains(\n                     CodegenFnAttrFlags::RUSTC_STD_INTERNAL_SYMBOL)\n@@ -1048,14 +1046,9 @@ impl<'b, 'a, 'v> RootCollector<'b, 'a, 'v> {\n     /// the return type of `main`. This is not needed when\n     /// the user writes their own `start` manually.\n     fn push_extra_entry_roots(&mut self) {\n-        if self.tcx.sess.entry_fn.get().map(|e| e.2) != Some(config::EntryFnType::Main) {\n-            return\n-        }\n-\n-        let main_def_id = if let Some(def_id) = self.entry_fn {\n-            def_id\n-        } else {\n-            return\n+        let main_def_id = match self.entry_fn {\n+            Some((def_id, EntryFnType::Main)) => def_id,\n+            _ => return,\n         };\n \n         let start_def_id = match self.tcx.lang_items().require(StartFnLangItem) {"}, {"sha": "c831cbd98299c3ae49be2894c0a091f7017d7a56", "filename": "src/librustc_mir/monomorphize/item.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ff19a53ef07566aa30860023f6eac6e75ffaf900/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff19a53ef07566aa30860023f6eac6e75ffaf900/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs?ref=ff19a53ef07566aa30860023f6eac6e75ffaf900", "patch": "@@ -1,6 +1,6 @@\n use monomorphize::Instance;\n use rustc::hir;\n-use rustc::hir::def_id::DefId;\n+use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::session::config::OptLevel;\n use rustc::ty::{self, Ty, TyCtxt, ClosureSubsts, GeneratorSubsts};\n use rustc::ty::subst::Substs;\n@@ -75,8 +75,7 @@ pub trait MonoItemExt<'a, 'tcx>: fmt::Debug {\n \n         match *self.as_mono_item() {\n             MonoItem::Fn(ref instance) => {\n-                let entry_def_id =\n-                    tcx.sess.entry_fn.borrow().map(|(id, _, _)| tcx.hir().local_def_id(id));\n+                let entry_def_id = tcx.entry_fn(LOCAL_CRATE).map(|(id, _)| id);\n                 // If this function isn't inlined or otherwise has explicit\n                 // linkage, then we'll be creating a globally shared version.\n                 if self.explicit_linkage(tcx).is_some() ||"}, {"sha": "cb7e83985874c4b98d67f313b19407aad3667620", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ff19a53ef07566aa30860023f6eac6e75ffaf900/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff19a53ef07566aa30860023f6eac6e75ffaf900/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=ff19a53ef07566aa30860023f6eac6e75ffaf900", "patch": "@@ -132,7 +132,8 @@ use std::ops::{self, Deref};\n use std::slice;\n \n use require_c_abi_if_variadic;\n-use session::{CompileIncomplete, config, Session};\n+use session::{CompileIncomplete, Session};\n+use session::config::EntryFnType;\n use TypeAndSubsts;\n use lint;\n use util::captures::Captures;\n@@ -1163,19 +1164,18 @@ fn check_fn<'a, 'gcx, 'tcx>(inherited: &'a Inherited<'a, 'gcx, 'tcx>,\n \n     // Check that the main return type implements the termination trait.\n     if let Some(term_id) = fcx.tcx.lang_items().termination() {\n-        if let Some((id, _, entry_type)) = *fcx.tcx.sess.entry_fn.borrow() {\n-            if id == fn_id {\n-                if let config::EntryFnType::Main = entry_type {\n-                    let substs = fcx.tcx.mk_substs_trait(declared_ret_ty, &[]);\n-                    let trait_ref = ty::TraitRef::new(term_id, substs);\n-                    let return_ty_span = decl.output.span();\n-                    let cause = traits::ObligationCause::new(\n-                        return_ty_span, fn_id, ObligationCauseCode::MainFunctionType);\n-\n-                    inherited.register_predicate(\n-                        traits::Obligation::new(\n-                            cause, param_env, trait_ref.to_predicate()));\n-                }\n+        if let Some((def_id, EntryFnType::Main)) = fcx.tcx.entry_fn(LOCAL_CRATE) {\n+            let main_id = fcx.tcx.hir().as_local_node_id(def_id).unwrap();\n+            if main_id == fn_id {\n+                let substs = fcx.tcx.mk_substs_trait(declared_ret_ty, &[]);\n+                let trait_ref = ty::TraitRef::new(term_id, substs);\n+                let return_ty_span = decl.output.span();\n+                let cause = traits::ObligationCause::new(\n+                    return_ty_span, fn_id, ObligationCauseCode::MainFunctionType);\n+\n+                inherited.register_predicate(\n+                    traits::Obligation::new(\n+                        cause, param_env, trait_ref.to_predicate()));\n             }\n         }\n     }"}, {"sha": "fb5b28c55da2933f7107220dd9c09f18c4e53689", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 14, "deletions": 18, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/ff19a53ef07566aa30860023f6eac6e75ffaf900/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff19a53ef07566aa30860023f6eac6e75ffaf900/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=ff19a53ef07566aa30860023f6eac6e75ffaf900", "patch": "@@ -104,23 +104,22 @@ mod namespace;\n mod outlives;\n mod variance;\n \n-use hir::Node;\n use rustc_target::spec::abi::Abi;\n-use rustc::hir;\n+use rustc::hir::{self, Node};\n+use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::infer::InferOk;\n use rustc::lint;\n use rustc::middle;\n use rustc::session;\n-use rustc::session::config::nightly_options;\n+use rustc::session::CompileIncomplete;\n+use rustc::session::config::{EntryFnType, nightly_options};\n use rustc::traits::{ObligationCause, ObligationCauseCode, TraitEngine, TraitEngineExt};\n use rustc::ty::subst::Substs;\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::query::Providers;\n use rustc::util;\n use rustc::util::profiling::ProfileCategory;\n-use session::{CompileIncomplete, config};\n use syntax_pos::Span;\n-use syntax::ast;\n use util::common::time;\n \n use std::iter;\n@@ -185,10 +184,9 @@ fn require_same_types<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     })\n }\n \n-fn check_main_fn_ty<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                              main_id: ast::NodeId,\n-                              main_span: Span) {\n-    let main_def_id = tcx.hir().local_def_id(main_id);\n+fn check_main_fn_ty<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, main_def_id: DefId) {\n+    let main_id = tcx.hir().as_local_node_id(main_def_id).unwrap();\n+    let main_span = tcx.def_span(main_def_id);\n     let main_t = tcx.type_of(main_def_id);\n     match main_t.sty {\n         ty::FnDef(..) => {\n@@ -251,10 +249,9 @@ fn check_main_fn_ty<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     }\n }\n \n-fn check_start_fn_ty<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                               start_id: ast::NodeId,\n-                               start_span: Span) {\n-    let start_def_id = tcx.hir().local_def_id(start_id);\n+fn check_start_fn_ty<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, start_def_id: DefId) {\n+    let start_id = tcx.hir().as_local_node_id(start_def_id).unwrap();\n+    let start_span = tcx.def_span(start_def_id);\n     let start_t = tcx.type_of(start_def_id);\n     match start_t.sty {\n         ty::FnDef(..) => {\n@@ -310,11 +307,10 @@ fn check_start_fn_ty<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n }\n \n fn check_for_entry_fn<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n-    if let Some((id, sp, entry_type)) = *tcx.sess.entry_fn.borrow() {\n-        match entry_type {\n-            config::EntryFnType::Main => check_main_fn_ty(tcx, id, sp),\n-            config::EntryFnType::Start => check_start_fn_ty(tcx, id, sp),\n-        }\n+    match tcx.entry_fn(LOCAL_CRATE) {\n+        Some((def_id, EntryFnType::Main)) => check_main_fn_ty(tcx, def_id),\n+        Some((def_id, EntryFnType::Start)) => check_start_fn_ty(tcx, def_id),\n+        _ => {}\n     }\n }\n "}]}