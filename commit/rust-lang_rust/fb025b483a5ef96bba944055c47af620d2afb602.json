{"sha": "fb025b483a5ef96bba944055c47af620d2afb602", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiMDI1YjQ4M2E1ZWY5NmJiYTk0NDA1NWM0N2FmNjIwZDJhZmI2MDI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-11-19T12:58:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-11-19T12:58:48Z"}, "message": "Auto merge of #37814 - japaric:aapcs, r=alexcrichton\n\nfix `extern \"aapcs\" fn`\n\nto actually use the AAPCS calling convention\n\ncloses #37810\n\nThis is technically a [breaking-change] because it changes the ABI of\n`extern \"aapcs\"` functions that (a) involve `f32`/`f64` arguments/return\nvalues and (b) are compiled for arm-eabihf targets from\n\"aapcs-vfp\" (wrong) to \"aapcs\" (correct).\n\nAppendix:\n\nWhat these ABIs mean?\n\n- In the \"aapcs-vfp\" ABI or \"hard float\" calling convention: Floating\npoint values are passed/returned through FPU registers (s0, s1, d0, etc.)\n\n- Whereas, in the \"aapcs\" ABI or \"soft float\" calling convention:\nFloating point values are passed/returned through general purpose\nregisters (r0, r1, etc.)\n\nMixing these ABIs can cause problems if the caller assumes that the\nroutine is using one of these ABIs but it's actually using the other\none.\n\n---\n\nr? @alexcrichton We are going this `extern \"aapcs\" fn` thing to implement some intrinsics (floatundidf) for the eabihf targets in order to comply with LLVM's calling convention of intrinsics.\n\nOh, and the value of the enum came from [here](http://llvm.org/docs/doxygen/html/namespacellvm_1_1CallingConv.html).\n\ncc @TimNN @parched", "tree": {"sha": "2336c788877ce66122323cd03bc36773f86a6f4e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2336c788877ce66122323cd03bc36773f86a6f4e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb025b483a5ef96bba944055c47af620d2afb602", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb025b483a5ef96bba944055c47af620d2afb602", "html_url": "https://github.com/rust-lang/rust/commit/fb025b483a5ef96bba944055c47af620d2afb602", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb025b483a5ef96bba944055c47af620d2afb602/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa97dafe018de235b544b13e5beceba1b5d0593b", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa97dafe018de235b544b13e5beceba1b5d0593b", "html_url": "https://github.com/rust-lang/rust/commit/aa97dafe018de235b544b13e5beceba1b5d0593b"}, {"sha": "456ceba13784f2f88f7f21239e308a0f195967a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/456ceba13784f2f88f7f21239e308a0f195967a1", "html_url": "https://github.com/rust-lang/rust/commit/456ceba13784f2f88f7f21239e308a0f195967a1"}], "stats": {"total": 3, "additions": 2, "deletions": 1}, "files": [{"sha": "2173adf2e6e2d129e1df47f42cde20e2a437d7a1", "filename": "src/librustc_llvm/ffi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fb025b483a5ef96bba944055c47af620d2afb602/src%2Flibrustc_llvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb025b483a5ef96bba944055c47af620d2afb602/src%2Flibrustc_llvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fffi.rs?ref=fb025b483a5ef96bba944055c47af620d2afb602", "patch": "@@ -41,6 +41,7 @@ pub enum CallConv {\n     ColdCallConv = 9,\n     X86StdcallCallConv = 64,\n     X86FastcallCallConv = 65,\n+    ArmAapcsCallConv = 67,\n     X86_64_SysV = 78,\n     X86_64_Win64 = 79,\n     X86_VectorCall = 80,"}, {"sha": "cb06fac2c674e22ca4c21c0f6007c2bb00398e51", "filename": "src/librustc_trans/abi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb025b483a5ef96bba944055c47af620d2afb602/src%2Flibrustc_trans%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb025b483a5ef96bba944055c47af620d2afb602/src%2Flibrustc_trans%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fabi.rs?ref=fb025b483a5ef96bba944055c47af620d2afb602", "patch": "@@ -274,10 +274,10 @@ impl FnType {\n             C => llvm::CCallConv,\n             Win64 => llvm::X86_64_Win64,\n             SysV64 => llvm::X86_64_SysV,\n+            Aapcs => llvm::ArmAapcsCallConv,\n \n             // These API constants ought to be more specific...\n             Cdecl => llvm::CCallConv,\n-            Aapcs => llvm::CCallConv,\n         };\n \n         let mut inputs = &sig.inputs[..];"}]}