{"sha": "3bc8302a54653f3f92b015106a5322f7ce8e29a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiYzgzMDJhNTQ2NTNmM2Y5MmIwMTUxMDZhNTMyMmY3Y2U4ZTI5YTA=", "commit": {"author": {"name": "David Cook", "email": "divergentdave@gmail.com", "date": "2020-08-26T00:00:46Z"}, "committer": {"name": "David Cook", "email": "divergentdave@gmail.com", "date": "2020-08-26T00:00:46Z"}, "message": "Support --test/--bin/--lib in cargo-miri", "tree": {"sha": "386c46f04dcce3ef54dba1145f033a564bd63d38", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/386c46f04dcce3ef54dba1145f033a564bd63d38"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3bc8302a54653f3f92b015106a5322f7ce8e29a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3bc8302a54653f3f92b015106a5322f7ce8e29a0", "html_url": "https://github.com/rust-lang/rust/commit/3bc8302a54653f3f92b015106a5322f7ce8e29a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3bc8302a54653f3f92b015106a5322f7ce8e29a0/comments", "author": {"login": "divergentdave", "id": 181772, "node_id": "MDQ6VXNlcjE4MTc3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/181772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/divergentdave", "html_url": "https://github.com/divergentdave", "followers_url": "https://api.github.com/users/divergentdave/followers", "following_url": "https://api.github.com/users/divergentdave/following{/other_user}", "gists_url": "https://api.github.com/users/divergentdave/gists{/gist_id}", "starred_url": "https://api.github.com/users/divergentdave/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/divergentdave/subscriptions", "organizations_url": "https://api.github.com/users/divergentdave/orgs", "repos_url": "https://api.github.com/users/divergentdave/repos", "events_url": "https://api.github.com/users/divergentdave/events{/privacy}", "received_events_url": "https://api.github.com/users/divergentdave/received_events", "type": "User", "site_admin": false}, "committer": {"login": "divergentdave", "id": 181772, "node_id": "MDQ6VXNlcjE4MTc3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/181772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/divergentdave", "html_url": "https://github.com/divergentdave", "followers_url": "https://api.github.com/users/divergentdave/followers", "following_url": "https://api.github.com/users/divergentdave/following{/other_user}", "gists_url": "https://api.github.com/users/divergentdave/gists{/gist_id}", "starred_url": "https://api.github.com/users/divergentdave/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/divergentdave/subscriptions", "organizations_url": "https://api.github.com/users/divergentdave/orgs", "repos_url": "https://api.github.com/users/divergentdave/repos", "events_url": "https://api.github.com/users/divergentdave/events{/privacy}", "received_events_url": "https://api.github.com/users/divergentdave/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f3e7cf2c2f0d9be32011bd4d9cd5d934b69dc7a", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f3e7cf2c2f0d9be32011bd4d9cd5d934b69dc7a", "html_url": "https://github.com/rust-lang/rust/commit/9f3e7cf2c2f0d9be32011bd4d9cd5d934b69dc7a"}], "stats": {"total": 80, "additions": 71, "deletions": 9}, "files": [{"sha": "029c5e5610c2cbcc508392224621f780984fd0af", "filename": "cargo-miri/bin.rs", "status": "modified", "additions": 71, "deletions": 9, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/3bc8302a54653f3f92b015106a5322f7ce8e29a0/cargo-miri%2Fbin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bc8302a54653f3f92b015106a5322f7ce8e29a0/cargo-miri%2Fbin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/cargo-miri%2Fbin.rs?ref=3bc8302a54653f3f92b015106a5322f7ce8e29a0", "patch": "@@ -378,6 +378,69 @@ path = \"lib.rs\"\n     }\n }\n \n+enum CargoTargets {\n+    All,\n+    Filtered { lib: bool, bin: Vec<String>, test: Vec<String> },\n+}\n+\n+impl CargoTargets {\n+    fn matches(&self, kind: &str, name: &str) -> bool {\n+        match self {\n+            CargoTargets::All => true,\n+            CargoTargets::Filtered { lib, bin, test } => match kind {\n+                \"lib\" => *lib,\n+                \"bin\" => bin.iter().any(|n| n == name),\n+                \"test\" => test.iter().any(|n| n == name),\n+                _ => false,\n+            },\n+        }\n+    }\n+}\n+\n+fn parse_cargo_miri_args(\n+    mut args: impl Iterator<Item = String>,\n+) -> (CargoTargets, Vec<String>, Vec<String>) {\n+    let mut lib_present = false;\n+    let mut bin_targets = Vec::new();\n+    let mut test_targets = Vec::new();\n+    let mut additional_args = Vec::new();\n+    while let Some(arg) = args.next() {\n+        match arg {\n+            arg if arg == \"--\" => break,\n+            arg if arg == \"--lib\" => lib_present = true,\n+            arg if arg == \"--bin\" => {\n+                if let Some(binary) = args.next() {\n+                    if binary == \"--\" {\n+                        show_error(format!(\"\\\"--bin\\\" takes one argument.\"));\n+                    } else {\n+                        bin_targets.push(binary)\n+                    }\n+                } else {\n+                    show_error(format!(\"\\\"--bin\\\" takes one argument.\"));\n+                }\n+            }\n+            arg if arg == \"--test\" => {\n+                if let Some(test) = args.next() {\n+                    if test == \"--\" {\n+                        show_error(format!(\"\\\"--test\\\" takes one argument.\"));\n+                    } else {\n+                        test_targets.push(test)\n+                    }\n+                } else {\n+                    show_error(format!(\"\\\"--test\\\" takes one argument.\"));\n+                }\n+            }\n+            other => additional_args.push(other),\n+        }\n+    }\n+    let targets = if !lib_present && bin_targets.len() == 0 && test_targets.len() == 0 {\n+        CargoTargets::All\n+    } else {\n+        CargoTargets::Filtered { lib: lib_present, bin: bin_targets, test: test_targets }\n+    };\n+    (targets, additional_args, args.collect())\n+}\n+\n fn in_cargo_miri() {\n     let (subcommand, skip) = match std::env::args().nth(2).as_deref() {\n         Some(\"test\") => (MiriCommand::Test, 3),\n@@ -398,22 +461,25 @@ fn in_cargo_miri() {\n         return;\n     }\n \n+    let (target_filters, cargo_args, miri_args) =\n+        parse_cargo_miri_args(std::env::args().skip(skip));\n+\n     // Now run the command.\n     for target in list_targets() {\n-        let mut args = std::env::args().skip(skip);\n         let kind = target\n             .kind\n             .get(0)\n             .expect(\"badly formatted cargo metadata: target::kind is an empty array\");\n+        if !target_filters.matches(kind, &target.name) {\n+            continue;\n+        }\n         // Now we run `cargo check $FLAGS $ARGS`, giving the user the\n         // change to add additional arguments. `FLAGS` is set to identify\n         // this target.  The user gets to control what gets actually passed to Miri.\n         let mut cmd = cargo();\n         cmd.arg(\"check\");\n         match (subcommand, kind.as_str()) {\n             (MiriCommand::Run, \"bin\") => {\n-                // FIXME: we just run all the binaries here.\n-                // We should instead support `cargo miri --bin foo`.\n                 cmd.arg(\"--bin\").arg(target.name);\n             }\n             (MiriCommand::Test, \"test\") => {\n@@ -430,10 +496,7 @@ fn in_cargo_miri() {\n             _ => continue,\n         }\n         // Forward user-defined `cargo` args until first `--`.\n-        while let Some(arg) = args.next() {\n-            if arg == \"--\" {\n-                break;\n-            }\n+        for arg in cargo_args.iter() {\n             cmd.arg(arg);\n         }\n         // We want to always run `cargo` with `--target`. This later helps us detect\n@@ -450,8 +513,7 @@ fn in_cargo_miri() {\n         // our actual target crate (the binary or the test we are running).\n         // Since we're using \"cargo check\", we have no other way of passing\n         // these arguments.\n-        let args_vec: Vec<String> = args.collect();\n-        cmd.env(\"MIRI_ARGS\", serde_json::to_string(&args_vec).expect(\"failed to serialize args\"));\n+        cmd.env(\"MIRI_ARGS\", serde_json::to_string(&miri_args).expect(\"failed to serialize args\"));\n \n         // Set `RUSTC_WRAPPER` to ourselves.  Cargo will prepend that binary to its usual invocation,\n         // i.e., the first argument is `rustc` -- which is what we use in `main` to distinguish"}]}