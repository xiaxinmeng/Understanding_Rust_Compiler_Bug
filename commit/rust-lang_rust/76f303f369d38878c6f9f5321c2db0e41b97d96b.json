{"sha": "76f303f369d38878c6f9f5321c2db0e41b97d96b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2ZjMwM2YzNjlkMzg4NzhjNmY5ZjUzMjFjMmRiMGU0MWI5N2Q5NmI=", "commit": {"author": {"name": "Marcus Klaas", "email": "mail@marcusklaas.nl", "date": "2015-12-01T21:09:37Z"}, "committer": {"name": "Marcus Klaas", "email": "mail@marcusklaas.nl", "date": "2015-12-01T21:09:37Z"}, "message": "Break function headers earlier\n\nCloses rustfmt#295.", "tree": {"sha": "bc3eedd081e2967453326cecd1c028c3e02e1165", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc3eedd081e2967453326cecd1c028c3e02e1165"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/76f303f369d38878c6f9f5321c2db0e41b97d96b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/76f303f369d38878c6f9f5321c2db0e41b97d96b", "html_url": "https://github.com/rust-lang/rust/commit/76f303f369d38878c6f9f5321c2db0e41b97d96b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/76f303f369d38878c6f9f5321c2db0e41b97d96b/comments", "author": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36d65e45380372f77c89fdca1f87daac902e04c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/36d65e45380372f77c89fdca1f87daac902e04c9", "html_url": "https://github.com/rust-lang/rust/commit/36d65e45380372f77c89fdca1f87daac902e04c9"}], "stats": {"total": 65, "additions": 33, "deletions": 32}, "files": [{"sha": "e655d99cf20b701ee07f919c575e48735d64d646", "filename": "src/items.rs", "status": "modified", "additions": 23, "deletions": 32, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/76f303f369d38878c6f9f5321c2db0e41b97d96b/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76f303f369d38878c6f9f5321c2db0e41b97d96b/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=76f303f369d38878c6f9f5321c2db0e41b97d96b", "patch": "@@ -221,25 +221,23 @@ impl<'a> FmtVisitor<'a> {\n                                sig: &ast::MethodSig,\n                                span: Span)\n                                -> Option<String> {\n-        // Drop semicolon or it will be interpreted as comment\n+        // Drop semicolon or it will be interpreted as comment.\n         let span = mk_sp(span.lo, span.hi - BytePos(1));\n         let context = self.get_context();\n \n-        // FIXME: silly formatting of the `.0`.\n-        let mut result = try_opt!(rewrite_fn_base(&context,\n-                                                  indent,\n-                                                  ident,\n-                                                  &sig.decl,\n-                                                  Some(&sig.explicit_self),\n-                                                  &sig.generics,\n-                                                  sig.unsafety,\n-                                                  sig.constness,\n-                                                  sig.abi,\n-                                                  ast::Visibility::Inherited,\n-                                                  span,\n-                                                  false,\n-                                                  false))\n-                             .0;\n+        let (mut result, _) = try_opt!(rewrite_fn_base(&context,\n+                                                       indent,\n+                                                       ident,\n+                                                       &sig.decl,\n+                                                       Some(&sig.explicit_self),\n+                                                       &sig.generics,\n+                                                       sig.unsafety,\n+                                                       sig.constness,\n+                                                       sig.abi,\n+                                                       ast::Visibility::Inherited,\n+                                                       span,\n+                                                       false,\n+                                                       false));\n \n         // Re-attach semicolon\n         result.push(';');\n@@ -1050,7 +1048,7 @@ fn rewrite_fn_base(context: &RewriteContext,\n            arg_indent);\n \n     // Check if vertical layout was forced by compute_budget_for_args.\n-    if one_line_budget <= 0 {\n+    if one_line_budget == 0 {\n         if context.config.fn_args_paren_newline {\n             result.push('\\n');\n             result.push_str(&arg_indent.to_string(context.config));\n@@ -1305,28 +1303,21 @@ fn compute_budgets_for_args(context: &RewriteContext,\n                             ret_str_len: usize,\n                             newline_brace: bool)\n                             -> (usize, usize, Indent) {\n-    // Try keeping everything on the same line\n+    // Try keeping everything on the same line.\n     if !result.contains(\"\\n\") {\n-        // 3 = `() `, space is before ret_string\n+        // 3 = `() `, space is before ret_string.\n         let mut used_space = indent.width() + result.len() + ret_str_len + 3;\n         if !newline_brace {\n             used_space += 2;\n         }\n-        let one_line_budget = if used_space > context.config.max_width {\n-            0\n-        } else {\n-            context.config.max_width - used_space\n-        };\n+        let one_line_budget = context.config.max_width.checked_sub(used_space).unwrap_or(0);\n+\n+        if one_line_budget > 0 {\n+            let multi_line_budget = context.config.max_width -\n+                                    (indent.width() + result.len() + \"()\".len());\n \n-        // 2 = `()`\n-        let used_space = indent.width() + result.len() + 2;\n-        let max_space = context.config.max_width;\n-        debug!(\"compute_budgets_for_args: used_space: {}, max_space: {}\",\n-               used_space,\n-               max_space);\n-        if used_space < max_space {\n             return (one_line_budget,\n-                    max_space - used_space,\n+                    multi_line_budget,\n                     indent + result.len() + 1);\n         }\n     }"}, {"sha": "044d494bd37df620718f22e20520e97c4cbd28f4", "filename": "tests/source/fn-simple.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76f303f369d38878c6f9f5321c2db0e41b97d96b/tests%2Fsource%2Ffn-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76f303f369d38878c6f9f5321c2db0e41b97d96b/tests%2Fsource%2Ffn-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Ffn-simple.rs?ref=76f303f369d38878c6f9f5321c2db0e41b97d96b", "patch": "@@ -41,3 +41,5 @@ unsafe fn generic_call(cx: *mut JSContext, argc: libc::c_uint, vp: *mut JSVal,\n                                               -> u8) {\n     let f:  fn  ( _ , _  ) ->  _   =  panic!()  ;\n }\n+\n+pub fn start_export_thread<C: CryptoSchemee + 'static>(database: &Database, crypto_scheme: &C, block_size: usize, source_path: &Path) -> BonzoResult<mpsc::Consumer<'static, FileInstruction>> {}"}, {"sha": "17a3ac0fe152dd52751bef0de023ca24ddb41e0d", "filename": "tests/target/fn-simple.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/76f303f369d38878c6f9f5321c2db0e41b97d96b/tests%2Ftarget%2Ffn-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76f303f369d38878c6f9f5321c2db0e41b97d96b/tests%2Ftarget%2Ffn-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ffn-simple.rs?ref=76f303f369d38878c6f9f5321c2db0e41b97d96b", "patch": "@@ -64,3 +64,11 @@ unsafe fn generic_call(cx: *mut JSContext,\n                                                   -> u8) {\n     let f: fn(_, _) -> _ = panic!();\n }\n+\n+pub fn start_export_thread<C: CryptoSchemee + 'static>\n+    (database: &Database,\n+     crypto_scheme: &C,\n+     block_size: usize,\n+     source_path: &Path)\n+     -> BonzoResult<mpsc::Consumer<'static, FileInstruction>> {\n+}"}]}