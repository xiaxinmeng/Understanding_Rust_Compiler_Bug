{"sha": "863d1f653a450011a1b32282f7ecf78662bde53c", "node_id": "C_kwDOAAsO6NoAKDg2M2QxZjY1M2E0NTAwMTFhMWIzMjI4MmY3ZWNmNzg2NjJiZGU1M2M", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-12-15T21:02:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-12-15T21:02:57Z"}, "message": "Rollup merge of #105481 - lqd:mono-stats, r=wesleywiser\n\nStart improving monomorphization items stats\n\nAs described in [this zulip discussion](https://rust-lang.zulipchat.com/#narrow/stream/247081-t-compiler.2Fperformance/topic/Compile-time.20case-study.3A.20AWS.20crates/near/314560832), some stats about monomorphization collection would be interesting to have, in a different form than `-Zprint-mono-items`: to have some visibility into the cost of the mono items, we'd like to know how many are instantiated and what is their estimated size.\n\nThat can be a proxy to analyze sources of slow compile times, although in the future, we'd also like to add more realistic stats from the actual backend's lowering.\n\nThis PR adds a new `-Z dump-mono-stats` flag which will output some stats in a `{crate_name}.mono-items.md` file (the flag optionally takes an output directory parameter, for easier use within a workspace than printing to stdout).\n\nFor example,\n\n```rust\nfn compute<T>(collection: Vec<T>) -> usize {\n    collection.len() + 19 - 0 * 9 - 18 - 1 * 1 // random code to increase the function's size\n}\n\nfn main() {\n    dbg!(compute(vec![0u8, 1, 2]));\n    dbg!(compute(vec![0u64, 1, 2]));\n    dbg!(compute(vec![\"0\", \"1\", \"2\", \"3\"]));\n}\n```\n\nwill output a file with this markdown table (abridged for readability), for a debug build:\n\n| Item | Instantiation count | Estimated Cost Per Instantiation | Total Estimated Cost |\n| --- | ---: | ---: | ---: |\n| alloc::alloc::box_free | 3 | 122 | 366 |\n| std::alloc::Global::alloc_impl | 1 | 284 | 284 |\n| alloc::raw_vec::RawVec::<T, A>::current_memory | 3 | 82 | 246 |\n| std::ptr::align_offset | 1 | 222 | 222 |\n| std::slice::hack::into_vec | 3 | 67 | 201 |\n| <std::vec::Vec<T, A> as std::ops::Drop>::drop | 3 | 66 | 198 |\n| std::ptr::mut_ptr::<impl *mut T>::is_null | 4 | 47 | 188 |\n| main | 1 | 163 | 163 |\n| std::ptr::NonNull::<T>::new_unchecked | 4 | 37 | 148 |\n...\n\n<details>\n<summary>Click for full output</summary>\n\n| Item | Instantiation count | Estimated Cost Per Instantiation | Total Estimated Cost |\n| --- | ---: | ---: | ---: |\n| alloc::alloc::box_free | 3 | 122 | 366 |\n| std::alloc::Global::alloc_impl | 1 | 284 | 284 |\n| alloc::raw_vec::RawVec::<T, A>::current_memory | 3 | 82 | 246 |\n| std::ptr::align_offset | 1 | 222 | 222 |\n| std::slice::hack::into_vec | 3 | 67 | 201 |\n| <std::vec::Vec<T, A> as std::ops::Drop>::drop | 3 | 66 | 198 |\n| std::ptr::mut_ptr::<impl *mut T>::is_null | 4 | 47 | 188 |\n| main | 1 | 163 | 163 |\n| std::ptr::NonNull::<T>::new_unchecked | 4 | 37 | 148 |\n| std::boxed::Box::<T, A>::into_unique | 3 | 48 | 144 |\n| std::boxed::Box::<T, A>::leak | 3 | 39 | 117 |\n| std::alloc::Layout::array::inner | 1 | 107 | 107 |\n| std::ptr::align_offset::mod_inv | 1 | 103 | 103 |\n| std::boxed::Box::<T, A>::into_raw_with_allocator | 3 | 31 | 93 |\n| std::fmt::Arguments::<'a>::new_v1 | 1 | 80 | 80 |\n| <alloc::raw_vec::RawVec<T, A> as std::ops::Drop>::drop | 3 | 26 | 78 |\n| alloc::raw_vec::RawVec::<T, A>::from_raw_parts_in | 3 | 26 | 78 |\n| alloc::alloc::exchange_malloc | 1 | 75 | 75 |\n| std::ptr::const_ptr::<impl *const T>::is_null | 1 | 75 | 75 |\n| std::ptr::const_ptr::<impl *const T>::is_aligned_to | 1 | 64 | 64 |\n| compute | 3 | 20 | 60 |\n| std::ptr::const_ptr::<impl *const T>::align_offset | 1 | 55 | 55 |\n| std::ptr::read | 1 | 52 | 52 |\n| <std::alloc::Global as std::alloc::Allocator>::deallocate | 1 | 50 | 50 |\n| std::ptr::mut_ptr::<impl *mut T>::guaranteed_eq | 1 | 48 | 48 |\n| std::fmt::ArgumentV1::<'a>::new_display | 2 | 22 | 44 |\n| std::ptr::Alignment::new_unchecked | 1 | 42 | 42 |\n| core::fmt::num::<impl std::fmt::Debug for usize>::fmt | 1 | 40 | 40 |\n| std::result::Result::<T, E>::unwrap_unchecked | 1 | 37 | 37 |\n| std::cmp::Ord::min | 1 | 32 | 32 |\n| std::cmp::impls::<impl std::cmp::Ord for usize>::cmp | 1 | 31 | 31 |\n| std::intrinsics::is_aligned_and_not_null | 1 | 27 | 27 |\n| std::rt::lang_start | 1 | 27 | 27 |\n| std::ptr::NonNull::<T>::new | 1 | 24 | 24 |\n| std::fmt::ArgumentV1::<'a>::new_debug | 1 | 22 | 22 |\n| std::fmt::Arguments::<'a>::new_v1_formatted | 1 | 19 | 19 |\n| std::rt::lang_start::{closure#0} | 1 | 17 | 17 |\n| std::sys_common::backtrace::__rust_begin_short_backtrace | 1 | 16 | 16 |\n| std::slice::<impl [T]>::into_vec | 3 | 5 | 15 |\n| <std::ptr::NonNull<T> as std::convert::From<std::ptr::Unique<T>>>::from | 1 | 14 | 14 |\n| <&T as std::fmt::Debug>::fmt | 1 | 12 | 12 |\n| <&T as std::fmt::Display>::fmt | 1 | 12 | 12 |\n| std::vec::Vec::<T, A>::len | 3 | 2 | 6 |\n| <T as std::convert::Into<U>>::into | 1 | 5 | 5 |\n| <T as std::convert::From<T>>::from | 1 | 2 | 2 |\n| <() as std::process::Termination>::report | 1 | 2 | 2 |\n| std::hint::unreachable_unchecked | 1 | 2 | 2 |\n| core::fmt::UnsafeArg::new | 1 | 1 | 1 |\n\n</details>\n\nSince we discussed it together, r? `@wesleywiser.`", "tree": {"sha": "961e1af06b079353ce3138d3cf8298a1298480be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/961e1af06b079353ce3138d3cf8298a1298480be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/863d1f653a450011a1b32282f7ecf78662bde53c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjm4uBCRBK7hj4Ov3rIwAAEtcIAKychGKUFl8u4/BlobIwirgG\n4ZnjCc9x5SPfI3MBcXEK2j3M/QttZtvQSTgQvtGQyFCy6NRgwHdTIg7NZ52McmB7\n2l/Fuy2iM5Fsr5XlgmINIAtNzImvyW/uzNpbsgqlcQtsykeWL87zndT92IAQITqX\nI4Ts53gTuS6f0zqvyaE+aHwCVp9a8T62uWvOmhiuMBtl9S+IB1ey3BVbboh8Y52g\nODrfCD4yoSvtIkRkMtMYFVqaISvbiQn+B2DgtE8GXPHOaeudxgZAmdUU/OvrfIsv\nfxxSbseCxqGkUWMWv+/Klt724kebHrwDFreFcIDycBCeqa7lacuhIrJ29B5E8qg=\n=bBsI\n-----END PGP SIGNATURE-----\n", "payload": "tree 961e1af06b079353ce3138d3cf8298a1298480be\nparent 4954a7ef5c5bb45f1c0d021491702ad05d470821\nparent b720847917c51801f9557a256c35fc669b637126\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1671138177 +0100\ncommitter GitHub <noreply@github.com> 1671138177 +0100\n\nRollup merge of #105481 - lqd:mono-stats, r=wesleywiser\n\nStart improving monomorphization items stats\n\nAs described in [this zulip discussion](https://rust-lang.zulipchat.com/#narrow/stream/247081-t-compiler.2Fperformance/topic/Compile-time.20case-study.3A.20AWS.20crates/near/314560832), some stats about monomorphization collection would be interesting to have, in a different form than `-Zprint-mono-items`: to have some visibility into the cost of the mono items, we'd like to know how many are instantiated and what is their estimated size.\n\nThat can be a proxy to analyze sources of slow compile times, although in the future, we'd also like to add more realistic stats from the actual backend's lowering.\n\nThis PR adds a new `-Z dump-mono-stats` flag which will output some stats in a `{crate_name}.mono-items.md` file (the flag optionally takes an output directory parameter, for easier use within a workspace than printing to stdout).\n\nFor example,\n\n```rust\nfn compute<T>(collection: Vec<T>) -> usize {\n    collection.len() + 19 - 0 * 9 - 18 - 1 * 1 // random code to increase the function's size\n}\n\nfn main() {\n    dbg!(compute(vec![0u8, 1, 2]));\n    dbg!(compute(vec![0u64, 1, 2]));\n    dbg!(compute(vec![\"0\", \"1\", \"2\", \"3\"]));\n}\n```\n\nwill output a file with this markdown table (abridged for readability), for a debug build:\n\n| Item | Instantiation count | Estimated Cost Per Instantiation | Total Estimated Cost |\n| --- | ---: | ---: | ---: |\n| alloc::alloc::box_free | 3 | 122 | 366 |\n| std::alloc::Global::alloc_impl | 1 | 284 | 284 |\n| alloc::raw_vec::RawVec::<T, A>::current_memory | 3 | 82 | 246 |\n| std::ptr::align_offset | 1 | 222 | 222 |\n| std::slice::hack::into_vec | 3 | 67 | 201 |\n| <std::vec::Vec<T, A> as std::ops::Drop>::drop | 3 | 66 | 198 |\n| std::ptr::mut_ptr::<impl *mut T>::is_null | 4 | 47 | 188 |\n| main | 1 | 163 | 163 |\n| std::ptr::NonNull::<T>::new_unchecked | 4 | 37 | 148 |\n...\n\n<details>\n<summary>Click for full output</summary>\n\n| Item | Instantiation count | Estimated Cost Per Instantiation | Total Estimated Cost |\n| --- | ---: | ---: | ---: |\n| alloc::alloc::box_free | 3 | 122 | 366 |\n| std::alloc::Global::alloc_impl | 1 | 284 | 284 |\n| alloc::raw_vec::RawVec::<T, A>::current_memory | 3 | 82 | 246 |\n| std::ptr::align_offset | 1 | 222 | 222 |\n| std::slice::hack::into_vec | 3 | 67 | 201 |\n| <std::vec::Vec<T, A> as std::ops::Drop>::drop | 3 | 66 | 198 |\n| std::ptr::mut_ptr::<impl *mut T>::is_null | 4 | 47 | 188 |\n| main | 1 | 163 | 163 |\n| std::ptr::NonNull::<T>::new_unchecked | 4 | 37 | 148 |\n| std::boxed::Box::<T, A>::into_unique | 3 | 48 | 144 |\n| std::boxed::Box::<T, A>::leak | 3 | 39 | 117 |\n| std::alloc::Layout::array::inner | 1 | 107 | 107 |\n| std::ptr::align_offset::mod_inv | 1 | 103 | 103 |\n| std::boxed::Box::<T, A>::into_raw_with_allocator | 3 | 31 | 93 |\n| std::fmt::Arguments::<'a>::new_v1 | 1 | 80 | 80 |\n| <alloc::raw_vec::RawVec<T, A> as std::ops::Drop>::drop | 3 | 26 | 78 |\n| alloc::raw_vec::RawVec::<T, A>::from_raw_parts_in | 3 | 26 | 78 |\n| alloc::alloc::exchange_malloc | 1 | 75 | 75 |\n| std::ptr::const_ptr::<impl *const T>::is_null | 1 | 75 | 75 |\n| std::ptr::const_ptr::<impl *const T>::is_aligned_to | 1 | 64 | 64 |\n| compute | 3 | 20 | 60 |\n| std::ptr::const_ptr::<impl *const T>::align_offset | 1 | 55 | 55 |\n| std::ptr::read | 1 | 52 | 52 |\n| <std::alloc::Global as std::alloc::Allocator>::deallocate | 1 | 50 | 50 |\n| std::ptr::mut_ptr::<impl *mut T>::guaranteed_eq | 1 | 48 | 48 |\n| std::fmt::ArgumentV1::<'a>::new_display | 2 | 22 | 44 |\n| std::ptr::Alignment::new_unchecked | 1 | 42 | 42 |\n| core::fmt::num::<impl std::fmt::Debug for usize>::fmt | 1 | 40 | 40 |\n| std::result::Result::<T, E>::unwrap_unchecked | 1 | 37 | 37 |\n| std::cmp::Ord::min | 1 | 32 | 32 |\n| std::cmp::impls::<impl std::cmp::Ord for usize>::cmp | 1 | 31 | 31 |\n| std::intrinsics::is_aligned_and_not_null | 1 | 27 | 27 |\n| std::rt::lang_start | 1 | 27 | 27 |\n| std::ptr::NonNull::<T>::new | 1 | 24 | 24 |\n| std::fmt::ArgumentV1::<'a>::new_debug | 1 | 22 | 22 |\n| std::fmt::Arguments::<'a>::new_v1_formatted | 1 | 19 | 19 |\n| std::rt::lang_start::{closure#0} | 1 | 17 | 17 |\n| std::sys_common::backtrace::__rust_begin_short_backtrace | 1 | 16 | 16 |\n| std::slice::<impl [T]>::into_vec | 3 | 5 | 15 |\n| <std::ptr::NonNull<T> as std::convert::From<std::ptr::Unique<T>>>::from | 1 | 14 | 14 |\n| <&T as std::fmt::Debug>::fmt | 1 | 12 | 12 |\n| <&T as std::fmt::Display>::fmt | 1 | 12 | 12 |\n| std::vec::Vec::<T, A>::len | 3 | 2 | 6 |\n| <T as std::convert::Into<U>>::into | 1 | 5 | 5 |\n| <T as std::convert::From<T>>::from | 1 | 2 | 2 |\n| <() as std::process::Termination>::report | 1 | 2 | 2 |\n| std::hint::unreachable_unchecked | 1 | 2 | 2 |\n| core::fmt::UnsafeArg::new | 1 | 1 | 1 |\n\n</details>\n\nSince we discussed it together, r? `@wesleywiser.`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/863d1f653a450011a1b32282f7ecf78662bde53c", "html_url": "https://github.com/rust-lang/rust/commit/863d1f653a450011a1b32282f7ecf78662bde53c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/863d1f653a450011a1b32282f7ecf78662bde53c/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4954a7ef5c5bb45f1c0d021491702ad05d470821", "url": "https://api.github.com/repos/rust-lang/rust/commits/4954a7ef5c5bb45f1c0d021491702ad05d470821", "html_url": "https://github.com/rust-lang/rust/commit/4954a7ef5c5bb45f1c0d021491702ad05d470821"}, {"sha": "b720847917c51801f9557a256c35fc669b637126", "url": "https://api.github.com/repos/rust-lang/rust/commits/b720847917c51801f9557a256c35fc669b637126", "html_url": "https://github.com/rust-lang/rust/commit/b720847917c51801f9557a256c35fc669b637126"}], "stats": {"total": 100, "additions": 99, "deletions": 1}, "files": [{"sha": "243d10bfa062150bf9bda530541b8f235d35ceae", "filename": "compiler/rustc_error_messages/locales/en-US/monomorphize.ftl", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/863d1f653a450011a1b32282f7ecf78662bde53c/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmonomorphize.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/863d1f653a450011a1b32282f7ecf78662bde53c/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmonomorphize.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmonomorphize.ftl?ref=863d1f653a450011a1b32282f7ecf78662bde53c", "patch": "@@ -21,3 +21,6 @@ monomorphize_large_assignments =\n     moving {$size} bytes\n     .label = value moved from here\n     .note = The current maximum size is {$limit}, but it can be customized with the move_size_limit attribute: `#![move_size_limit = \"...\"]`\n+\n+monomorphize_couldnt_dump_mono_stats =\n+    unexpected error occurred while dumping monomorphization stats: {$error}"}, {"sha": "1e8d5f7eae87a8881edadb729794f43e43fc9a9e", "filename": "compiler/rustc_middle/src/mir/mono.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/863d1f653a450011a1b32282f7ecf78662bde53c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs", "raw_url": "https://github.com/rust-lang/rust/raw/863d1f653a450011a1b32282f7ecf78662bde53c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs?ref=863d1f653a450011a1b32282f7ecf78662bde53c", "patch": "@@ -200,6 +200,15 @@ impl<'tcx> MonoItem<'tcx> {\n             MonoItem::GlobalAsm(..) => LOCAL_CRATE,\n         }\n     }\n+\n+    /// Returns the item's `DefId`\n+    pub fn def_id(&self) -> DefId {\n+        match *self {\n+            MonoItem::Fn(Instance { def, .. }) => def.def_id(),\n+            MonoItem::Static(def_id) => def_id,\n+            MonoItem::GlobalAsm(item_id) => item_id.owner_id.to_def_id(),\n+        }\n+    }\n }\n \n impl<'tcx> fmt::Display for MonoItem<'tcx> {"}, {"sha": "f15cf54718e2b7221bbb70fb9261f36af32fd525", "filename": "compiler/rustc_monomorphize/src/errors.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/863d1f653a450011a1b32282f7ecf78662bde53c/compiler%2Frustc_monomorphize%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/863d1f653a450011a1b32282f7ecf78662bde53c/compiler%2Frustc_monomorphize%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Ferrors.rs?ref=863d1f653a450011a1b32282f7ecf78662bde53c", "patch": "@@ -77,3 +77,9 @@ pub struct SymbolAlreadyDefined {\n     pub span: Option<Span>,\n     pub symbol: String,\n }\n+\n+#[derive(Diagnostic)]\n+#[diag(monomorphize_couldnt_dump_mono_stats)]\n+pub struct CouldntDumpMonoStats {\n+    pub error: String,\n+}"}, {"sha": "38e1d98e44e13f0d72af80666004b666fb21835c", "filename": "compiler/rustc_monomorphize/src/partitioning/mod.rs", "status": "modified", "additions": 77, "deletions": 1, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/863d1f653a450011a1b32282f7ecf78662bde53c/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/863d1f653a450011a1b32282f7ecf78662bde53c/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmod.rs?ref=863d1f653a450011a1b32282f7ecf78662bde53c", "patch": "@@ -95,6 +95,11 @@\n mod default;\n mod merging;\n \n+use std::cmp;\n+use std::fs::{self, File};\n+use std::io::{BufWriter, Write};\n+use std::path::{Path, PathBuf};\n+\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::sync;\n use rustc_hir::def_id::DefIdSet;\n@@ -104,11 +109,12 @@ use rustc_middle::mir::mono::{CodegenUnit, Linkage};\n use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::TyCtxt;\n+use rustc_session::config::SwitchWithOptPath;\n use rustc_span::symbol::Symbol;\n \n use crate::collector::InliningMap;\n use crate::collector::{self, MonoItemCollectionMode};\n-use crate::errors::{SymbolAlreadyDefined, UnknownPartitionStrategy};\n+use crate::errors::{CouldntDumpMonoStats, SymbolAlreadyDefined, UnknownPartitionStrategy};\n \n pub struct PartitioningCx<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n@@ -411,6 +417,15 @@ fn collect_and_partition_mono_items<'tcx>(\n         })\n         .collect();\n \n+    // Output monomorphization stats per def_id\n+    if let SwitchWithOptPath::Enabled(ref path) = tcx.sess.opts.unstable_opts.dump_mono_stats {\n+        if let Err(err) =\n+            dump_mono_items_stats(tcx, &codegen_units, path, tcx.sess.opts.crate_name.as_deref())\n+        {\n+            tcx.sess.emit_fatal(CouldntDumpMonoStats { error: err.to_string() });\n+        }\n+    }\n+\n     if tcx.sess.opts.unstable_opts.print_mono_items.is_some() {\n         let mut item_to_cgus: FxHashMap<_, Vec<_>> = Default::default();\n \n@@ -465,6 +480,67 @@ fn collect_and_partition_mono_items<'tcx>(\n     (tcx.arena.alloc(mono_items), codegen_units)\n }\n \n+/// Outputs stats about instantation counts and estimated size, per `MonoItem`'s\n+/// def, to a file in the given output directory.\n+fn dump_mono_items_stats<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    codegen_units: &[CodegenUnit<'tcx>],\n+    output_directory: &Option<PathBuf>,\n+    crate_name: Option<&str>,\n+) -> Result<(), Box<dyn std::error::Error>> {\n+    let output_directory = if let Some(ref directory) = output_directory {\n+        fs::create_dir_all(directory)?;\n+        directory\n+    } else {\n+        Path::new(\".\")\n+    };\n+\n+    let filename = format!(\"{}.mono_items.md\", crate_name.unwrap_or(\"unknown-crate\"));\n+    let output_path = output_directory.join(&filename);\n+    let file = File::create(output_path)?;\n+    let mut file = BufWriter::new(file);\n+\n+    // Gather instantiated mono items grouped by def_id\n+    let mut items_per_def_id: FxHashMap<_, Vec<_>> = Default::default();\n+    for cgu in codegen_units {\n+        for (&mono_item, _) in cgu.items() {\n+            // Avoid variable-sized compiler-generated shims\n+            if mono_item.is_user_defined() {\n+                items_per_def_id.entry(mono_item.def_id()).or_default().push(mono_item);\n+            }\n+        }\n+    }\n+\n+    // Output stats sorted by total instantiated size, from heaviest to lightest\n+    let mut stats: Vec<_> = items_per_def_id\n+        .into_iter()\n+        .map(|(def_id, items)| {\n+            let instantiation_count = items.len();\n+            let size_estimate = items[0].size_estimate(tcx);\n+            let total_estimate = instantiation_count * size_estimate;\n+            (def_id, instantiation_count, size_estimate, total_estimate)\n+        })\n+        .collect();\n+    stats.sort_unstable_by_key(|(_, _, _, total_estimate)| cmp::Reverse(*total_estimate));\n+\n+    if !stats.is_empty() {\n+        writeln!(\n+            file,\n+            \"| Item | Instantiation count | Estimated Cost Per Instantiation | Total Estimated Cost |\"\n+        )?;\n+        writeln!(file, \"| --- | ---: | ---: | ---: |\")?;\n+        for (def_id, instantiation_count, size_estimate, total_estimate) in stats {\n+            let item = with_no_trimmed_paths!(tcx.def_path_str(def_id));\n+            writeln!(\n+                file,\n+                \"| {item} | {instantiation_count} | {size_estimate} | {total_estimate} |\"\n+            )?;\n+        }\n+    }\n+\n+    Ok(())\n+}\n+\n fn codegened_and_inlined_items<'tcx>(tcx: TyCtxt<'tcx>, (): ()) -> &'tcx DefIdSet {\n     let (items, cgus) = tcx.collect_and_partition_mono_items(());\n     let mut visited = DefIdSet::default();"}, {"sha": "9e130287104f9b1edd38a3d47e3dc11701c14e7f", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/863d1f653a450011a1b32282f7ecf78662bde53c/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/863d1f653a450011a1b32282f7ecf78662bde53c/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=863d1f653a450011a1b32282f7ecf78662bde53c", "patch": "@@ -1294,6 +1294,9 @@ options! {\n         computed `block` spans (one span encompassing a block's terminator and \\\n         all statements). If `-Z instrument-coverage` is also enabled, create \\\n         an additional `.html` file showing the computed coverage spans.\"),\n+    dump_mono_stats: SwitchWithOptPath = (SwitchWithOptPath::Disabled,\n+        parse_switch_with_opt_path, [UNTRACKED],\n+        \"output statistics about monomorphization collection (format: markdown)\"),\n     dwarf_version: Option<u32> = (None, parse_opt_number, [TRACKED],\n         \"version of DWARF debug information to emit (default: 2 or 4, depending on platform)\"),\n     dylib_lto: bool = (false, parse_bool, [UNTRACKED],"}, {"sha": "3537e669608d15faf6afbcc26b5410b865225720", "filename": "src/test/rustdoc-ui/z-help.stdout", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/863d1f653a450011a1b32282f7ecf78662bde53c/src%2Ftest%2Frustdoc-ui%2Fz-help.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/863d1f653a450011a1b32282f7ecf78662bde53c/src%2Ftest%2Frustdoc-ui%2Fz-help.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fz-help.stdout?ref=863d1f653a450011a1b32282f7ecf78662bde53c", "patch": "@@ -35,6 +35,7 @@\n     -Z            dump-mir-exclude-pass-number=val -- exclude the pass number when dumping MIR (used in tests) (default: no)\n     -Z                       dump-mir-graphviz=val -- in addition to `.mir` files, create graphviz `.dot` files (and with `-Z instrument-coverage`, also create a `.dot` file for the MIR-derived coverage graph) (default: no)\n     -Z                       dump-mir-spanview=val -- in addition to `.mir` files, create `.html` files to view spans for all `statement`s (including terminators), only `terminator` spans, or computed `block` spans (one span encompassing a block's terminator and all statements). If `-Z instrument-coverage` is also enabled, create an additional `.html` file showing the computed coverage spans.\n+    -Z                         dump-mono-stats=val -- output statistics about monomorphization collection (format: markdown)\n     -Z                           dwarf-version=val -- version of DWARF debug information to emit (default: 2 or 4, depending on platform)\n     -Z                               dylib-lto=val -- enables LTO for dylib crate type\n     -Z                        emit-stack-sizes=val -- emit a section containing stack size metadata (default: no)"}]}