{"sha": "8d00adf28943db3361d1d425bafc21584b238eaa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkMDBhZGYyODk0M2RiMzM2MWQxZDQyNWJhZmMyMTU4NGIyMzhlYWE=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-02-13T01:52:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-13T01:52:51Z"}, "message": "Rollup merge of #69048 - estebank:hrlt-assoc, r=nagisa\n\nSuggestion when encountering assoc types from hrtb\n\nWhen encountering E0212, detect whether this is a representable case or\nnot, i.e. if it's happening on an `fn` or on an ADT. If the former,\nprovide a structured suggestion, otherwise note that this can't be\nrepresented in Rust.\n\nFix #69000.", "tree": {"sha": "672a165eded9d95b99454bb088eba505b3bc8db6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/672a165eded9d95b99454bb088eba505b3bc8db6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d00adf28943db3361d1d425bafc21584b238eaa", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeRKvzCRBK7hj4Ov3rIwAAdHIIAFavucFDAjXJE7WwO9W+dyXI\nmDgUWEILWuC+GFS2IgVSWed8WneA/YR4PWUspbll+t+Ga7coPmqCqiW1yD+KALYX\nTRUB279WgOxluKioZyfWtZZe/O1plivq5Q76t2st3fRgNxuiENtFCQrWMZev2TLU\n99ESmbhtRPb1/uBEIdys5D7F1opK3umdlBRVcK/Ajx63j7O0/RVEAfDhuMOuwXUd\nlEe+EaQc/ecZ8l+NTtDyoEhWrkUEv0wNMGlAnmUUusntF34eLgesfFG8aq3apRRc\naul+mTNk4qEc+3ra4C4LSJ4ItaFMzO16BN4OYgNPR3SOqKtwPJWW/+pw/pjT6Uc=\n=xVoD\n-----END PGP SIGNATURE-----\n", "payload": "tree 672a165eded9d95b99454bb088eba505b3bc8db6\nparent e9f391e09a43680cfe24077ba750997eb3893ade\nparent bde96776a199064dec3c825ca5ada8f90e1e12d4\nauthor Dylan DPC <dylan.dpc@gmail.com> 1581558771 +0100\ncommitter GitHub <noreply@github.com> 1581558771 +0100\n\nRollup merge of #69048 - estebank:hrlt-assoc, r=nagisa\n\nSuggestion when encountering assoc types from hrtb\n\nWhen encountering E0212, detect whether this is a representable case or\nnot, i.e. if it's happening on an `fn` or on an ADT. If the former,\nprovide a structured suggestion, otherwise note that this can't be\nrepresented in Rust.\n\nFix #69000.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d00adf28943db3361d1d425bafc21584b238eaa", "html_url": "https://github.com/rust-lang/rust/commit/8d00adf28943db3361d1d425bafc21584b238eaa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d00adf28943db3361d1d425bafc21584b238eaa/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9f391e09a43680cfe24077ba750997eb3893ade", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9f391e09a43680cfe24077ba750997eb3893ade", "html_url": "https://github.com/rust-lang/rust/commit/e9f391e09a43680cfe24077ba750997eb3893ade"}, {"sha": "bde96776a199064dec3c825ca5ada8f90e1e12d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/bde96776a199064dec3c825ca5ada8f90e1e12d4", "html_url": "https://github.com/rust-lang/rust/commit/bde96776a199064dec3c825ca5ada8f90e1e12d4"}], "stats": {"total": 246, "additions": 226, "deletions": 20}, "files": [{"sha": "f3a1f412d0d59009a7357c816ae1b1086d7aa2b7", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 81, "deletions": 12, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/8d00adf28943db3361d1d425bafc21584b238eaa/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d00adf28943db3361d1d425bafc21584b238eaa/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=8d00adf28943db3361d1d425bafc21584b238eaa", "patch": "@@ -278,6 +278,17 @@ impl ItemCtxt<'tcx> {\n     pub fn to_ty(&self, ast_ty: &'tcx hir::Ty<'tcx>) -> Ty<'tcx> {\n         AstConv::ast_ty_to_ty(self, ast_ty)\n     }\n+\n+    pub fn hir_id(&self) -> hir::HirId {\n+        self.tcx\n+            .hir()\n+            .as_local_hir_id(self.item_def_id)\n+            .expect(\"Non-local call to local provider is_const_fn\")\n+    }\n+\n+    pub fn node(&self) -> hir::Node<'tcx> {\n+        self.tcx.hir().get(self.hir_id())\n+    }\n }\n \n impl AstConv<'tcx> for ItemCtxt<'tcx> {\n@@ -290,15 +301,7 @@ impl AstConv<'tcx> for ItemCtxt<'tcx> {\n     }\n \n     fn default_constness_for_trait_bounds(&self) -> ast::Constness {\n-        // FIXME: refactor this into a method\n-        let hir_id = self\n-            .tcx\n-            .hir()\n-            .as_local_hir_id(self.item_def_id)\n-            .expect(\"Non-local call to local provider is_const_fn\");\n-\n-        let node = self.tcx.hir().get(hir_id);\n-        if let Some(fn_like) = FnLikeNode::from_node(node) {\n+        if let Some(fn_like) = FnLikeNode::from_node(self.node()) {\n             fn_like.constness()\n         } else {\n             ast::Constness::NotConst\n@@ -352,14 +355,80 @@ impl AstConv<'tcx> for ItemCtxt<'tcx> {\n             self.tcx().mk_projection(item_def_id, item_substs)\n         } else {\n             // There are no late-bound regions; we can just ignore the binder.\n-            struct_span_err!(\n+            let mut err = struct_span_err!(\n                 self.tcx().sess,\n                 span,\n                 E0212,\n                 \"cannot extract an associated type from a higher-ranked trait bound \\\n                  in this context\"\n-            )\n-            .emit();\n+            );\n+\n+            match self.node() {\n+                hir::Node::Field(_) | hir::Node::Ctor(_) | hir::Node::Variant(_) => {\n+                    let item =\n+                        self.tcx.hir().expect_item(self.tcx.hir().get_parent_item(self.hir_id()));\n+                    match &item.kind {\n+                        hir::ItemKind::Enum(_, generics)\n+                        | hir::ItemKind::Struct(_, generics)\n+                        | hir::ItemKind::Union(_, generics) => {\n+                            // FIXME: look for an appropriate lt name if `'a` is already used\n+                            let (lt_sp, sugg) = match &generics.params[..] {\n+                                [] => (generics.span, \"<'a>\".to_string()),\n+                                [bound, ..] => (bound.span.shrink_to_lo(), \"'a, \".to_string()),\n+                            };\n+                            let suggestions = vec![\n+                                (lt_sp, sugg),\n+                                (\n+                                    span,\n+                                    format!(\n+                                        \"{}::{}\",\n+                                        // Replace the existing lifetimes with a new named lifetime.\n+                                        self.tcx\n+                                            .replace_late_bound_regions(&poly_trait_ref, |_| {\n+                                                self.tcx.mk_region(ty::ReEarlyBound(\n+                                                    ty::EarlyBoundRegion {\n+                                                        def_id: item_def_id,\n+                                                        index: 0,\n+                                                        name: Symbol::intern(\"'a\"),\n+                                                    },\n+                                                ))\n+                                            })\n+                                            .0,\n+                                        item_segment.ident\n+                                    ),\n+                                ),\n+                            ];\n+                            err.multipart_suggestion(\n+                                \"use a fully qualified path with explicit lifetimes\",\n+                                suggestions,\n+                                Applicability::MaybeIncorrect,\n+                            );\n+                        }\n+                        _ => {}\n+                    }\n+                }\n+                hir::Node::Item(hir::Item { kind: hir::ItemKind::Struct(..), .. })\n+                | hir::Node::Item(hir::Item { kind: hir::ItemKind::Enum(..), .. })\n+                | hir::Node::Item(hir::Item { kind: hir::ItemKind::Union(..), .. }) => {}\n+                hir::Node::Item(_)\n+                | hir::Node::ForeignItem(_)\n+                | hir::Node::TraitItem(_)\n+                | hir::Node::ImplItem(_) => {\n+                    err.span_suggestion(\n+                        span,\n+                        \"use a fully qualified path with inferred lifetimes\",\n+                        format!(\n+                            \"{}::{}\",\n+                            // Erase named lt, we want `<A as B<'_>::C`, not `<A as B<'a>::C`.\n+                            self.tcx.anonymize_late_bound_regions(&poly_trait_ref).skip_binder(),\n+                            item_segment.ident\n+                        ),\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                }\n+                _ => {}\n+            }\n+            err.emit();\n             self.tcx().types.err\n         }\n     }"}, {"sha": "760d2b433c87aa99148005214b1a2758374c265d", "filename": "src/test/ui/associated-types/associated-types-project-from-hrtb-in-fn.fixed", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/8d00adf28943db3361d1d425bafc21584b238eaa/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/8d00adf28943db3361d1d425bafc21584b238eaa/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn.fixed?ref=8d00adf28943db3361d1d425bafc21584b238eaa", "patch": "@@ -0,0 +1,37 @@\n+#![allow(dead_code, unused_variables)]\n+// run-rustfix\n+// Check projection of an associated type out of a higher-ranked trait-bound\n+// in the context of a function signature.\n+\n+pub trait Foo<T> {\n+    type A;\n+\n+    fn get(&self, t: T) -> Self::A;\n+}\n+\n+fn foo2<I : for<'x> Foo<&'x isize>>(\n+    x: <I as Foo<&isize>>::A)\n+    //~^ ERROR cannot extract an associated type from a higher-ranked trait bound in this context\n+{\n+    // This case is illegal because we have to instantiate `'x`, and\n+    // we don't know what region to instantiate it with.\n+    //\n+    // This could perhaps be made equivalent to the examples below,\n+    // specifically for fn signatures.\n+}\n+\n+fn foo3<I : for<'x> Foo<&'x isize>>(\n+    x: <I as Foo<&isize>>::A)\n+{\n+    // OK, in this case we spelled out the precise regions involved, though we left one of\n+    // them anonymous.\n+}\n+\n+fn foo4<'a, I : for<'x> Foo<&'x isize>>(\n+    x: <I as Foo<&'a isize>>::A)\n+{\n+    // OK, in this case we spelled out the precise regions involved.\n+}\n+\n+\n+pub fn main() {}"}, {"sha": "6eb584ea645ac4b6eb19a75956afcf7283972103", "filename": "src/test/ui/associated-types/associated-types-project-from-hrtb-in-fn.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d00adf28943db3361d1d425bafc21584b238eaa/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d00adf28943db3361d1d425bafc21584b238eaa/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn.rs?ref=8d00adf28943db3361d1d425bafc21584b238eaa", "patch": "@@ -1,3 +1,5 @@\n+#![allow(dead_code, unused_variables)]\n+// run-rustfix\n // Check projection of an associated type out of a higher-ranked trait-bound\n // in the context of a function signature.\n "}, {"sha": "f2137f68665db3c7db89f63becf75f3404b18357", "filename": "src/test/ui/associated-types/associated-types-project-from-hrtb-in-fn.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8d00adf28943db3361d1d425bafc21584b238eaa/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d00adf28943db3361d1d425bafc21584b238eaa/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn.stderr?ref=8d00adf28943db3361d1d425bafc21584b238eaa", "patch": "@@ -1,8 +1,8 @@\n error[E0212]: cannot extract an associated type from a higher-ranked trait bound in this context\n-  --> $DIR/associated-types-project-from-hrtb-in-fn.rs:11:8\n+  --> $DIR/associated-types-project-from-hrtb-in-fn.rs:13:8\n    |\n LL |     x: I::A)\n-   |        ^^^^\n+   |        ^^^^ help: use a fully qualified path with inferred lifetimes: `<I as Foo<&isize>>::A`\n \n error: aborting due to previous error\n "}, {"sha": "8a5777d4d7cb519d31b78dba1fc6e82eb6210c94", "filename": "src/test/ui/associated-types/associated-types-project-from-hrtb-in-struct.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8d00adf28943db3361d1d425bafc21584b238eaa/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d00adf28943db3361d1d425bafc21584b238eaa/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-struct.rs?ref=8d00adf28943db3361d1d425bafc21584b238eaa", "patch": "@@ -7,18 +7,25 @@ pub trait Foo<T> {\n     fn get(&self, t: T) -> Self::A;\n }\n \n-struct SomeStruct<I : for<'x> Foo<&'x isize>> {\n+struct SomeStruct<I: for<'x> Foo<&'x isize>> {\n     field: I::A\n     //~^ ERROR cannot extract an associated type from a higher-ranked trait bound in this context\n }\n \n+enum SomeEnum<I: for<'x> Foo<&'x isize>> {\n+    TupleVariant(I::A),\n+    //~^ ERROR cannot extract an associated type from a higher-ranked trait bound in this context\n+    StructVariant { field: I::A },\n+    //~^ ERROR cannot extract an associated type from a higher-ranked trait bound in this context\n+}\n+\n // FIXME(eddyb) This one doesn't even compile because of the unsupported syntax.\n \n // struct AnotherStruct<I : for<'x> Foo<&'x isize>> {\n //     field: <I as for<'y> Foo<&'y isize>>::A\n // }\n \n-struct YetAnotherStruct<'a, I : for<'x> Foo<&'x isize>> {\n+struct YetAnotherStruct<'a, I: for<'x> Foo<&'x isize>> {\n     field: <I as Foo<&'a isize>>::A\n }\n "}, {"sha": "c71bc70ea6c4e778fd645839f2ccefcf0ec6e5b6", "filename": "src/test/ui/associated-types/associated-types-project-from-hrtb-in-struct.stderr", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/8d00adf28943db3361d1d425bafc21584b238eaa/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d00adf28943db3361d1d425bafc21584b238eaa/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-struct.stderr?ref=8d00adf28943db3361d1d425bafc21584b238eaa", "patch": "@@ -3,6 +3,38 @@ error[E0212]: cannot extract an associated type from a higher-ranked trait bound\n    |\n LL |     field: I::A\n    |            ^^^^\n+   |\n+help: use a fully qualified path with explicit lifetimes\n+   |\n+LL | struct SomeStruct<'a, I: for<'x> Foo<&'x isize>> {\n+LL |     field: <I as Foo<&'a isize>>::A\n+   |\n+\n+error[E0212]: cannot extract an associated type from a higher-ranked trait bound in this context\n+  --> $DIR/associated-types-project-from-hrtb-in-struct.rs:16:18\n+   |\n+LL |     TupleVariant(I::A),\n+   |                  ^^^^\n+   |\n+help: use a fully qualified path with explicit lifetimes\n+   |\n+LL | enum SomeEnum<'a, I: for<'x> Foo<&'x isize>> {\n+LL |     TupleVariant(<I as Foo<&'a isize>>::A),\n+   |\n+\n+error[E0212]: cannot extract an associated type from a higher-ranked trait bound in this context\n+  --> $DIR/associated-types-project-from-hrtb-in-struct.rs:18:28\n+   |\n+LL |     StructVariant { field: I::A },\n+   |                            ^^^^\n+   |\n+help: use a fully qualified path with explicit lifetimes\n+   |\n+LL | enum SomeEnum<'a, I: for<'x> Foo<&'x isize>> {\n+LL |     TupleVariant(I::A),\n+LL |\n+LL |     StructVariant { field: <I as Foo<&'a isize>>::A },\n+   |\n \n-error: aborting due to previous error\n+error: aborting due to 3 previous errors\n "}, {"sha": "acf32bccbecfdf22db7c42d611336455ddf0ddb1", "filename": "src/test/ui/associated-types/associated-types-project-from-hrtb-in-trait-method.fixed", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/8d00adf28943db3361d1d425bafc21584b238eaa/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-trait-method.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/8d00adf28943db3361d1d425bafc21584b238eaa/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-trait-method.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-trait-method.fixed?ref=8d00adf28943db3361d1d425bafc21584b238eaa", "patch": "@@ -0,0 +1,38 @@\n+#![allow(dead_code)]\n+// run-rustfix\n+// Check projection of an associated type out of a higher-ranked trait-bound\n+// in the context of a method definition in a trait.\n+\n+pub trait Foo<T> {\n+    type A;\n+\n+    fn get(&self, t: T) -> Self::A;\n+}\n+\n+trait SomeTrait<I : for<'x> Foo<&'x isize>> {\n+    fn some_method(&self, arg: <I as Foo<&isize>>::A);\n+    //~^ ERROR cannot extract an associated type from a higher-ranked trait bound in this context\n+}\n+\n+trait AnotherTrait<I : for<'x> Foo<&'x isize>> {\n+    fn some_method(&self, arg: <I as Foo<&isize>>::A);\n+}\n+\n+trait YetAnotherTrait<I : for<'x> Foo<&'x isize>> {\n+    fn some_method<'a>(&self, arg: <I as Foo<&'a isize>>::A);\n+}\n+\n+trait Banana<'a> {\n+    type Assoc: Default;\n+}\n+\n+struct Peach<X>(std::marker::PhantomData<X>);\n+\n+impl<X: for<'a> Banana<'a>> Peach<X> {\n+    fn mango(&self) -> <X as Banana<'_>>::Assoc {\n+    //~^ ERROR cannot extract an associated type from a higher-ranked trait bound in this context\n+        Default::default()\n+    }\n+}\n+\n+pub fn main() {}"}, {"sha": "a249f89685e3983098d1d708416636d39ae46e5f", "filename": "src/test/ui/associated-types/associated-types-project-from-hrtb-in-trait-method.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8d00adf28943db3361d1d425bafc21584b238eaa/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-trait-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d00adf28943db3361d1d425bafc21584b238eaa/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-trait-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-trait-method.rs?ref=8d00adf28943db3361d1d425bafc21584b238eaa", "patch": "@@ -1,3 +1,5 @@\n+#![allow(dead_code)]\n+// run-rustfix\n // Check projection of an associated type out of a higher-ranked trait-bound\n // in the context of a method definition in a trait.\n \n@@ -20,4 +22,17 @@ trait YetAnotherTrait<I : for<'x> Foo<&'x isize>> {\n     fn some_method<'a>(&self, arg: <I as Foo<&'a isize>>::A);\n }\n \n+trait Banana<'a> {\n+    type Assoc: Default;\n+}\n+\n+struct Peach<X>(std::marker::PhantomData<X>);\n+\n+impl<X: for<'a> Banana<'a>> Peach<X> {\n+    fn mango(&self) -> X::Assoc {\n+    //~^ ERROR cannot extract an associated type from a higher-ranked trait bound in this context\n+        Default::default()\n+    }\n+}\n+\n pub fn main() {}"}, {"sha": "a37fec244933cb172ec1a953e7b89e405e4b2b27", "filename": "src/test/ui/associated-types/associated-types-project-from-hrtb-in-trait-method.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8d00adf28943db3361d1d425bafc21584b238eaa/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-trait-method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d00adf28943db3361d1d425bafc21584b238eaa/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-trait-method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-trait-method.stderr?ref=8d00adf28943db3361d1d425bafc21584b238eaa", "patch": "@@ -1,8 +1,14 @@\n error[E0212]: cannot extract an associated type from a higher-ranked trait bound in this context\n-  --> $DIR/associated-types-project-from-hrtb-in-trait-method.rs:11:32\n+  --> $DIR/associated-types-project-from-hrtb-in-trait-method.rs:13:32\n    |\n LL |     fn some_method(&self, arg: I::A);\n-   |                                ^^^^\n+   |                                ^^^^ help: use a fully qualified path with inferred lifetimes: `<I as Foo<&isize>>::A`\n \n-error: aborting due to previous error\n+error[E0212]: cannot extract an associated type from a higher-ranked trait bound in this context\n+  --> $DIR/associated-types-project-from-hrtb-in-trait-method.rs:32:24\n+   |\n+LL |     fn mango(&self) -> X::Assoc {\n+   |                        ^^^^^^^^ help: use a fully qualified path with inferred lifetimes: `<X as Banana<'_>>::Assoc`\n+\n+error: aborting due to 2 previous errors\n "}]}