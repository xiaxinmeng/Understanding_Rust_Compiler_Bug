{"sha": "1808d747f65e43f9a8d40b9214e1221700f026d8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4MDhkNzQ3ZjY1ZTQzZjlhOGQ0MGI5MjE0ZTEyMjE3MDBmMDI2ZDg=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-02-14T04:08:35Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-02-19T18:02:51Z"}, "message": "Alias HashMap<~str, SyntaxExtension> to SyntaxExtensions", "tree": {"sha": "9a71735df55c20bf2efe6d709207fe04f2932614", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a71735df55c20bf2efe6d709207fe04f2932614"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1808d747f65e43f9a8d40b9214e1221700f026d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1808d747f65e43f9a8d40b9214e1221700f026d8", "html_url": "https://github.com/rust-lang/rust/commit/1808d747f65e43f9a8d40b9214e1221700f026d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1808d747f65e43f9a8d40b9214e1221700f026d8/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27e235b64a78ccae92639833c6701d4d22077e1c", "url": "https://api.github.com/repos/rust-lang/rust/commits/27e235b64a78ccae92639833c6701d4d22077e1c", "html_url": "https://github.com/rust-lang/rust/commit/27e235b64a78ccae92639833c6701d4d22077e1c"}], "stats": {"total": 14, "additions": 8, "deletions": 6}, "files": [{"sha": "a74acfe397d343955202785f867f79cded01af6c", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1808d747f65e43f9a8d40b9214e1221700f026d8/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1808d747f65e43f9a8d40b9214e1221700f026d8/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=1808d747f65e43f9a8d40b9214e1221700f026d8", "patch": "@@ -75,9 +75,11 @@ pub enum SyntaxExtension {\n     ItemTT(SyntaxExpanderTTItem),\n }\n \n+type SyntaxExtensions = HashMap<~str, SyntaxExtension>;\n+\n // A temporary hard-coded map of methods for expanding syntax extension\n // AST nodes into full ASTs\n-pub fn syntax_expander_table() -> HashMap<~str, SyntaxExtension> {\n+pub fn syntax_expander_table() -> SyntaxExtensions {\n     // utility function to simplify creating NormalTT syntax extensions\n     fn builtin_normal_tt(f: SyntaxExpanderTTFun) -> SyntaxExtension {\n         NormalTT(SyntaxExpanderTT{expander: f, span: None})"}, {"sha": "298eed5b735b58ca21dab41ff1d70133752eddaa", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1808d747f65e43f9a8d40b9214e1221700f026d8/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1808d747f65e43f9a8d40b9214e1221700f026d8/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=1808d747f65e43f9a8d40b9214e1221700f026d8", "patch": "@@ -23,7 +23,7 @@ use core::option;\n use core::vec;\n use std::oldmap::HashMap;\n \n-pub fn expand_expr(exts: HashMap<~str, SyntaxExtension>, cx: ext_ctxt,\n+pub fn expand_expr(exts: SyntaxExtensions, cx: ext_ctxt,\n                    e: expr_, s: span, fld: ast_fold,\n                    orig: fn@(expr_, span, ast_fold) -> (expr_, span))\n                 -> (expr_, span) {\n@@ -88,7 +88,7 @@ pub fn expand_expr(exts: HashMap<~str, SyntaxExtension>, cx: ext_ctxt,\n //\n // NB: there is some redundancy between this and expand_item, below, and\n // they might benefit from some amount of semantic and language-UI merger.\n-pub fn expand_mod_items(exts: HashMap<~str, SyntaxExtension>, cx: ext_ctxt,\n+pub fn expand_mod_items(exts: SyntaxExtensions, cx: ext_ctxt,\n                         module_: ast::_mod, fld: ast_fold,\n                         orig: fn@(ast::_mod, ast_fold) -> ast::_mod)\n                      -> ast::_mod {\n@@ -121,7 +121,7 @@ pub fn expand_mod_items(exts: HashMap<~str, SyntaxExtension>, cx: ext_ctxt,\n \n \n // When we enter a module, record it, for the sake of `module!`\n-pub fn expand_item(exts: HashMap<~str, SyntaxExtension>,\n+pub fn expand_item(exts: SyntaxExtensions,\n                    cx: ext_ctxt, &&it: @ast::item, fld: ast_fold,\n                    orig: fn@(&&v: @ast::item, ast_fold) -> Option<@ast::item>)\n                 -> Option<@ast::item> {\n@@ -147,7 +147,7 @@ pub fn expand_item(exts: HashMap<~str, SyntaxExtension>,\n \n // Support for item-position macro invocations, exactly the same\n // logic as for expression-position macro invocations.\n-pub fn expand_item_mac(exts: HashMap<~str, SyntaxExtension>,\n+pub fn expand_item_mac(exts: SyntaxExtensions,\n                        cx: ext_ctxt, &&it: @ast::item,\n                        fld: ast_fold) -> Option<@ast::item> {\n \n@@ -206,7 +206,7 @@ pub fn expand_item_mac(exts: HashMap<~str, SyntaxExtension>,\n     return maybe_it;\n }\n \n-pub fn expand_stmt(exts: HashMap<~str, SyntaxExtension>, cx: ext_ctxt,\n+pub fn expand_stmt(exts: SyntaxExtensions, cx: ext_ctxt,\n                    && s: stmt_, sp: span, fld: ast_fold,\n                    orig: fn@(&&s: stmt_, span, ast_fold) -> (stmt_, span))\n                 -> (stmt_, span) {"}]}