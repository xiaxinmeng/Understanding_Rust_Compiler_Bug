{"sha": "c74454a36040ed1b671ce31b5fcdc8755d11ce95", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3NDQ1NGEzNjA0MGVkMWI2NzFjZTMxYjVmY2RjODc1NWQxMWNlOTU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-10-19T17:05:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-10-19T17:05:40Z"}, "message": "Auto merge of #28977 - arcnmx:cstring-into, r=alexcrichton\n\n`OsString` has these sorts of conversions, while `CString` has been missing them. I'm iffy on `into_string` simply because the return type would be better off as `FromUtf8Error<CString>`, which of course isn't generic :cry:\r\n\r\nAlso should a different/new feature gate be used?", "tree": {"sha": "ce95dd24d93d5d6c5cdbc921eb0ffc6b7b3fc21d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce95dd24d93d5d6c5cdbc921eb0ffc6b7b3fc21d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c74454a36040ed1b671ce31b5fcdc8755d11ce95", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c74454a36040ed1b671ce31b5fcdc8755d11ce95", "html_url": "https://github.com/rust-lang/rust/commit/c74454a36040ed1b671ce31b5fcdc8755d11ce95", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c74454a36040ed1b671ce31b5fcdc8755d11ce95/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7aec91734e0c12b8e36158566ad512a663111c9f", "url": "https://api.github.com/repos/rust-lang/rust/commits/7aec91734e0c12b8e36158566ad512a663111c9f", "html_url": "https://github.com/rust-lang/rust/commit/7aec91734e0c12b8e36158566ad512a663111c9f"}, {"sha": "cb48d4458377904103ca0254bf9270ee1a2426be", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb48d4458377904103ca0254bf9270ee1a2426be", "html_url": "https://github.com/rust-lang/rust/commit/cb48d4458377904103ca0254bf9270ee1a2426be"}], "stats": {"total": 74, "additions": 72, "deletions": 2}, "files": [{"sha": "89427f7851b389cbbb54599eac953a82e21e6623", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 71, "deletions": 1, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/c74454a36040ed1b671ce31b5fcdc8755d11ce95/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c74454a36040ed1b671ce31b5fcdc8755d11ce95/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=c74454a36040ed1b671ce31b5fcdc8755d11ce95", "patch": "@@ -23,7 +23,7 @@ use ops::Deref;\n use option::Option::{self, Some, None};\n use result::Result::{self, Ok, Err};\n use slice;\n-use str;\n+use str::{self, Utf8Error};\n use string::String;\n use vec::Vec;\n \n@@ -151,6 +151,15 @@ pub struct CStr {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct NulError(usize, Vec<u8>);\n \n+/// An error returned from `CString::into_string` to indicate that a UTF-8 error\n+/// was encountered during the conversion.\n+#[derive(Clone, PartialEq, Debug)]\n+#[unstable(feature = \"cstring_into\", reason = \"recently added\", issue = \"29157\")]\n+pub struct IntoStringError {\n+    inner: CString,\n+    error: Utf8Error,\n+}\n+\n impl CString {\n     /// Creates a new C-compatible string from a container of bytes.\n     ///\n@@ -255,6 +264,38 @@ impl CString {\n         Box::into_raw(self.inner) as *mut libc::c_char\n     }\n \n+    /// Converts the `CString` into a `String` if it contains valid Unicode data.\n+    ///\n+    /// On failure, ownership of the original `CString` is returned.\n+    #[unstable(feature = \"cstring_into\", reason = \"recently added\", issue = \"29157\")]\n+    pub fn into_string(self) -> Result<String, IntoStringError> {\n+        String::from_utf8(self.into_bytes())\n+            .map_err(|e| IntoStringError {\n+                error: e.utf8_error(),\n+                inner: unsafe { CString::from_vec_unchecked(e.into_bytes()) },\n+            })\n+    }\n+\n+    /// Returns the underlying byte buffer.\n+    ///\n+    /// The returned buffer does **not** contain the trailing nul separator and\n+    /// it is guaranteed to not have any interior nul bytes.\n+    #[unstable(feature = \"cstring_into\", reason = \"recently added\", issue = \"29157\")]\n+    pub fn into_bytes(self) -> Vec<u8> {\n+        // FIXME: Once this method becomes stable, add an `impl Into<Vec<u8>> for CString`\n+        let mut vec = self.inner.into_vec();\n+        let _nul = vec.pop();\n+        debug_assert_eq!(_nul, Some(0u8));\n+        vec\n+    }\n+\n+    /// Equivalent to the `into_bytes` function except that the returned vector\n+    /// includes the trailing nul byte.\n+    #[unstable(feature = \"cstring_into\", reason = \"recently added\", issue = \"29157\")]\n+    pub fn into_bytes_with_nul(self) -> Vec<u8> {\n+        self.inner.into_vec()\n+    }\n+\n     /// Returns the contents of this `CString` as a slice of bytes.\n     ///\n     /// The returned slice does **not** contain the trailing nul separator and\n@@ -336,6 +377,35 @@ impl From<NulError> for io::Error {\n     }\n }\n \n+impl IntoStringError {\n+    /// Consumes this error, returning original `CString` which generated the\n+    /// error.\n+    #[unstable(feature = \"cstring_into\", reason = \"recently added\", issue = \"29157\")]\n+    pub fn into_cstring(self) -> CString {\n+        self.inner\n+    }\n+\n+    /// Access the underlying UTF-8 error that was the cause of this error.\n+    #[unstable(feature = \"cstring_into\", reason = \"recently added\", issue = \"29157\")]\n+    pub fn utf8_error(&self) -> Utf8Error {\n+        self.error\n+    }\n+}\n+\n+#[unstable(feature = \"cstring_into\", reason = \"recently added\", issue = \"29157\")]\n+impl Error for IntoStringError {\n+    fn description(&self) -> &str {\n+        Error::description(&self.error)\n+    }\n+}\n+\n+#[unstable(feature = \"cstring_into\", reason = \"recently added\", issue = \"29157\")]\n+impl fmt::Display for IntoStringError {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        fmt::Display::fmt(&self.error, f)\n+    }\n+}\n+\n impl CStr {\n     /// Casts a raw C string to a safe C string wrapper.\n     ///"}, {"sha": "bfd6ab52289b2f159190dfe9ee3470d65ac1ddde", "filename": "src/libstd/ffi/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c74454a36040ed1b671ce31b5fcdc8755d11ce95/src%2Flibstd%2Fffi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c74454a36040ed1b671ce31b5fcdc8755d11ce95/src%2Flibstd%2Fffi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fmod.rs?ref=c74454a36040ed1b671ce31b5fcdc8755d11ce95", "patch": "@@ -13,7 +13,7 @@\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub use self::c_str::{CString, CStr, NulError};\n+pub use self::c_str::{CString, CStr, NulError, IntoStringError};\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::os_str::{OsString, OsStr};"}]}