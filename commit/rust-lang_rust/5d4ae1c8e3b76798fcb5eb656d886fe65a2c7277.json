{"sha": "5d4ae1c8e3b76798fcb5eb656d886fe65a2c7277", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkNGFlMWM4ZTNiNzY3OThmY2I1ZWI2NTZkODg2ZmU2NWEyYzcyNzc=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-02-09T19:38:39Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-09T19:38:39Z"}, "message": "Merge #7616\n\n7616: Show `Self` pattern and Self-prefixed enum-variant completions r=Veykril a=Veykril\n\n![jDfQXNE0qZ](https://user-images.githubusercontent.com/3757771/107413514-1ff99b00-6b11-11eb-88b3-126cd106b514.gif)\r\n![JpogVIgloq](https://user-images.githubusercontent.com/3757771/107413519-212ac800-6b11-11eb-8282-51115468dccc.gif)\r\n\r\nVariant pattern completions are to be done still.\r\n\r\nCloses #6549, at least that should address all that's left from that issue from what I can see.\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "d0387217488358ca8c9ba0776b641e41133c1761", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d0387217488358ca8c9ba0776b641e41133c1761"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d4ae1c8e3b76798fcb5eb656d886fe65a2c7277", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgIuS/CRBK7hj4Ov3rIwAAdHIIAEjKppeLagt0q4L4YFtAoQy2\nr8epwEXseJdp13X44SoLDo8xHoCnaMZ42dMQBI71cq3+a/uPkCAG6e4wKPAOnRsq\n/QZqq+SCKSvosT62lJvC853MeoVrhv9J1VK18UfPd+RisT8E5EfXLt1x9y2IGpua\n9XscXJje0fy5eqd5K/VyKo1YwtSvOINghcoJq8Y88+GRSEYTjQGdxHO3E+c1eJJe\n61TJ9L9Nbi0Mvf+EkTOZf6KYUdb5pioGFdIxBaBbY/EOcxIyqoDwB5+DZRUoHpbb\nap1XrHjLMvWV9TfmtXrGNzLzEAfpKyUEuKRJlvBSqfZeKC6va/Umneelwu0FmOc=\n=kSqF\n-----END PGP SIGNATURE-----\n", "payload": "tree d0387217488358ca8c9ba0776b641e41133c1761\nparent 4f9a5287bfea124b76571424ce3eb4a91aec337a\nparent e92180a1d8c964d386fc5ffb80bfb05abdb6c153\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1612899519 +0000\ncommitter GitHub <noreply@github.com> 1612899519 +0000\n\nMerge #7616\n\n7616: Show `Self` pattern and Self-prefixed enum-variant completions r=Veykril a=Veykril\n\n![jDfQXNE0qZ](https://user-images.githubusercontent.com/3757771/107413514-1ff99b00-6b11-11eb-88b3-126cd106b514.gif)\r\n![JpogVIgloq](https://user-images.githubusercontent.com/3757771/107413519-212ac800-6b11-11eb-8282-51115468dccc.gif)\r\n\r\nVariant pattern completions are to be done still.\r\n\r\nCloses #6549, at least that should address all that's left from that issue from what I can see.\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d4ae1c8e3b76798fcb5eb656d886fe65a2c7277", "html_url": "https://github.com/rust-lang/rust/commit/5d4ae1c8e3b76798fcb5eb656d886fe65a2c7277", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d4ae1c8e3b76798fcb5eb656d886fe65a2c7277/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f9a5287bfea124b76571424ce3eb4a91aec337a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f9a5287bfea124b76571424ce3eb4a91aec337a", "html_url": "https://github.com/rust-lang/rust/commit/4f9a5287bfea124b76571424ce3eb4a91aec337a"}, {"sha": "e92180a1d8c964d386fc5ffb80bfb05abdb6c153", "url": "https://api.github.com/repos/rust-lang/rust/commits/e92180a1d8c964d386fc5ffb80bfb05abdb6c153", "html_url": "https://github.com/rust-lang/rust/commit/e92180a1d8c964d386fc5ffb80bfb05abdb6c153"}], "stats": {"total": 80, "additions": 74, "deletions": 6}, "files": [{"sha": "43a5160cba3968cbcd49cde7b223f838d4b264f4", "filename": "crates/completion/src/completions/pattern.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/5d4ae1c8e3b76798fcb5eb656d886fe65a2c7277/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d4ae1c8e3b76798fcb5eb656d886fe65a2c7277/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fpattern.rs?ref=5d4ae1c8e3b76798fcb5eb656d886fe65a2c7277", "patch": "@@ -31,6 +31,14 @@ pub(crate) fn complete_pattern(acc: &mut Completions, ctx: &CompletionContext) {\n                 _ => false,\n             },\n             hir::ScopeDef::MacroDef(_) => true,\n+            hir::ScopeDef::ImplSelfType(impl_) => match impl_.target_ty(ctx.db).as_adt() {\n+                Some(hir::Adt::Struct(strukt)) => {\n+                    acc.add_struct_pat(ctx, strukt, Some(name.clone()));\n+                    true\n+                }\n+                Some(hir::Adt::Enum(_)) => !ctx.is_irrefutable_pat_binding,\n+                _ => true,\n+            },\n             _ => false,\n         };\n         if add_resolution {\n@@ -258,4 +266,24 @@ fn main() {\n \"#,\n         );\n     }\n+\n+    #[test]\n+    fn completes_self_pats() {\n+        check_snippet(\n+            r#\"\n+struct Foo(i32);\n+impl Foo {\n+    fn foo() {\n+        match () {\n+            $0\n+        }\n+    }\n+}\n+    \"#,\n+            expect![[r#\"\n+                bn Self Self($1)$0\n+                bn Foo  Foo($1)$0\n+            \"#]],\n+        )\n+    }\n }"}, {"sha": "5112ecc2d9cad656e177916a2fcf5af519fd9989", "filename": "crates/completion/src/completions/unqualified_path.rs", "status": "modified", "additions": 35, "deletions": 1, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/5d4ae1c8e3b76798fcb5eb656d886fe65a2c7277/crates%2Fcompletion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d4ae1c8e3b76798fcb5eb656d886fe65a2c7277/crates%2Fcompletion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Funqualified_path.rs?ref=5d4ae1c8e3b76798fcb5eb656d886fe65a2c7277", "patch": "@@ -2,7 +2,7 @@\n \n use std::iter;\n \n-use hir::{Adt, ModuleDef, ScopeDef, Type};\n+use hir::{known, Adt, ModuleDef, ScopeDef, Type};\n use syntax::AstNode;\n use test_utils::mark;\n \n@@ -59,6 +59,18 @@ fn complete_enum_variants(acc: &mut Completions, ctx: &CompletionContext, ty: &T\n             enum_data.module(ctx.db)\n         };\n \n+        if let Some(impl_) = ctx.impl_def.as_ref().and_then(|impl_| ctx.sema.to_def(impl_)) {\n+            if impl_.target_ty(ctx.db) == *ty {\n+                for &variant in &variants {\n+                    let self_path = hir::ModPath::from_segments(\n+                        hir::PathKind::Plain,\n+                        iter::once(known::SELF_TYPE).chain(iter::once(variant.name(ctx.db))),\n+                    );\n+                    acc.add_qualified_enum_variant(ctx, variant, self_path.clone());\n+                }\n+            }\n+        }\n+\n         for variant in variants {\n             if let Some(path) = module.find_use_path(ctx.db, ModuleDef::from(variant)) {\n                 // Variants with trivial paths are already added by the existing completion logic,\n@@ -728,6 +740,28 @@ fn f() -> m::E { V$0 }\n         )\n     }\n \n+    #[test]\n+    fn completes_enum_variant_impl() {\n+        check(\n+            r#\"\n+enum Foo { Bar, Baz, Quux }\n+impl Foo {\n+    fn foo() { match Foo::Bar { Q$0 } }\n+}\n+\"#,\n+            expect![[r#\"\n+                ev Self::Bar  ()\n+                ev Self::Baz  ()\n+                ev Self::Quux ()\n+                ev Foo::Bar   ()\n+                ev Foo::Baz   ()\n+                ev Foo::Quux  ()\n+                sp Self\n+                en Foo\n+            \"#]],\n+        )\n+    }\n+\n     #[test]\n     fn dont_complete_attr() {\n         check("}, {"sha": "3db3578555f8bb760d8b7c365b743e8249f4ae51", "filename": "crates/completion/src/context.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5d4ae1c8e3b76798fcb5eb656d886fe65a2c7277/crates%2Fcompletion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d4ae1c8e3b76798fcb5eb656d886fe65a2c7277/crates%2Fcompletion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcontext.rs?ref=5d4ae1c8e3b76798fcb5eb656d886fe65a2c7277", "patch": "@@ -276,6 +276,14 @@ impl<'a> CompletionContext<'a> {\n             });\n     }\n \n+    fn fill_impl_def(&mut self) {\n+        self.impl_def = self\n+            .sema\n+            .ancestors_with_macros(self.token.parent())\n+            .take_while(|it| it.kind() != SOURCE_FILE && it.kind() != MODULE)\n+            .find_map(ast::Impl::cast);\n+    }\n+\n     fn fill(\n         &mut self,\n         original_file: &SyntaxNode,\n@@ -345,6 +353,8 @@ impl<'a> CompletionContext<'a> {\n                         self.is_irrefutable_pat_binding = true;\n                     }\n                 }\n+\n+                self.fill_impl_def();\n             }\n             if is_node::<ast::Param>(name.syntax()) {\n                 self.is_param = true;\n@@ -372,11 +382,7 @@ impl<'a> CompletionContext<'a> {\n                 self.sema.find_node_at_offset_with_macros(&original_file, offset);\n         }\n \n-        self.impl_def = self\n-            .sema\n-            .ancestors_with_macros(self.token.parent())\n-            .take_while(|it| it.kind() != SOURCE_FILE && it.kind() != MODULE)\n-            .find_map(ast::Impl::cast);\n+        self.fill_impl_def();\n \n         let top_node = name_ref\n             .syntax()"}]}