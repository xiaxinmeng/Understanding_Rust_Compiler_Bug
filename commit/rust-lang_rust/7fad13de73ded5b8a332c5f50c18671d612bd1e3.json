{"sha": "7fad13de73ded5b8a332c5f50c18671d612bd1e3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmYWQxM2RlNzNkZWQ1YjhhMzMyYzVmNTBjMTg2NzFkNjEyYmQxZTM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-09-02T09:34:06Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-09-02T09:34:06Z"}, "message": "store messages in tests", "tree": {"sha": "6179708a92b8fbaa8d5fdfa13b2db1f310836bd9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6179708a92b8fbaa8d5fdfa13b2db1f310836bd9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7fad13de73ded5b8a332c5f50c18671d612bd1e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7fad13de73ded5b8a332c5f50c18671d612bd1e3", "html_url": "https://github.com/rust-lang/rust/commit/7fad13de73ded5b8a332c5f50c18671d612bd1e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7fad13de73ded5b8a332c5f50c18671d612bd1e3/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7524556375f2b37e61fe85f17c0e4940e9e4d40", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7524556375f2b37e61fe85f17c0e4940e9e4d40", "html_url": "https://github.com/rust-lang/rust/commit/d7524556375f2b37e61fe85f17c0e4940e9e4d40"}], "stats": {"total": 24, "additions": 17, "deletions": 7}, "files": [{"sha": "42241194da065c91e996997208996db7bfba841c", "filename": "crates/gen_lsp_server/src/msg.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7fad13de73ded5b8a332c5f50c18671d612bd1e3/crates%2Fgen_lsp_server%2Fsrc%2Fmsg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fad13de73ded5b8a332c5f50c18671d612bd1e3/crates%2Fgen_lsp_server%2Fsrc%2Fmsg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fgen_lsp_server%2Fsrc%2Fmsg.rs?ref=7fad13de73ded5b8a332c5f50c18671d612bd1e3", "patch": "@@ -9,22 +9,22 @@ use languageserver_types::{\n \n use Result;\n \n-#[derive(Debug, Serialize, Deserialize)]\n+#[derive(Debug, Serialize, Deserialize, Clone)]\n #[serde(untagged)]\n pub enum RawMessage {\n     Request(RawRequest),\n     Notification(RawNotification),\n     Response(RawResponse),\n }\n \n-#[derive(Debug, Serialize, Deserialize)]\n+#[derive(Debug, Serialize, Deserialize, Clone)]\n pub struct RawRequest {\n     pub id: u64,\n     pub method: String,\n     pub params: Value,\n }\n \n-#[derive(Debug, Serialize, Deserialize)]\n+#[derive(Debug, Serialize, Deserialize, Clone)]\n pub struct RawResponse {\n     // JSON RPC allows this to be null if it was impossible\n     // to decode the request's id. Ignore this special case\n@@ -36,14 +36,15 @@ pub struct RawResponse {\n     pub error: Option<RawResponseError>,\n }\n \n-#[derive(Debug, Serialize, Deserialize)]\n+#[derive(Debug, Serialize, Deserialize, Clone)]\n pub struct RawResponseError {\n     pub code: i32,\n     pub message: String,\n     #[serde(skip_serializing_if = \"Option::is_none\")]\n     pub data: Option<Value>,\n }\n \n+#[derive(Clone, Copy, Debug)]\n #[allow(unused)]\n pub enum ErrorCode {\n     ParseError = -32700,\n@@ -58,7 +59,7 @@ pub enum ErrorCode {\n     RequestCancelled = -32800,\n }\n \n-#[derive(Debug, Serialize, Deserialize)]\n+#[derive(Debug, Serialize, Deserialize, Clone)]\n pub struct RawNotification {\n     pub method: String,\n     pub params: Value,"}, {"sha": "36ca56af33756c87121b84eb76a681d676a0c527", "filename": "crates/server/tests/heavy_tests/support.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7fad13de73ded5b8a332c5f50c18671d612bd1e3/crates%2Fserver%2Ftests%2Fheavy_tests%2Fsupport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fad13de73ded5b8a332c5f50c18671d612bd1e3/crates%2Fserver%2Ftests%2Fheavy_tests%2Fsupport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Ftests%2Fheavy_tests%2Fsupport.rs?ref=7fad13de73ded5b8a332c5f50c18671d612bd1e3", "patch": "@@ -1,7 +1,7 @@\n use std::{\n     fs,\n     thread,\n-    cell::Cell,\n+    cell::{Cell, RefCell},\n     path::PathBuf,\n };\n \n@@ -56,6 +56,7 @@ pub fn project(fixture: &str) -> Server {\n \n pub struct Server {\n     req_id: Cell<u64>,\n+    messages: RefCell<Vec<RawMessage>>,\n     dir: TempDir,\n     sender: Option<Sender<RawMessage>>,\n     receiver: Receiver<RawMessage>,\n@@ -71,6 +72,7 @@ impl Server {\n         let res = Server {\n             req_id: Cell::new(1),\n             dir,\n+            messages: Default::default(),\n             sender: Some(client_sender),\n             receiver: client_receiver,\n             server: Some(server),\n@@ -129,7 +131,7 @@ impl Server {\n             .unwrap()\n             .send(RawMessage::Request(r));\n \n-        while let Some(msg) = self.receiver.recv() {\n+        while let Some(msg) = self.recv() {\n             match msg {\n                 RawMessage::Request(req) => panic!(\"unexpected request: {:?}\", req),\n                 RawMessage::Notification(_) => (),\n@@ -144,6 +146,13 @@ impl Server {\n         }\n         panic!(\"no response\");\n     }\n+    fn recv(&self) -> Option<RawMessage> {\n+        self.receiver.recv()\n+            .map(|msg| {\n+                self.messages.borrow_mut().push(msg.clone());\n+                msg\n+            })\n+    }\n     fn send_notification(&self, not: RawNotification) {\n \n         self.sender.as_ref()"}]}