{"sha": "0cdf587ab356128d07f96e3d2dff255e1ebb5097", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjZGY1ODdhYjM1NjEyOGQwN2Y5NmUzZDJkZmYyNTVlMWViYjUwOTc=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2017-09-16T07:59:15Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2017-10-07T16:49:33Z"}, "message": "doc-test: In Markdown tests, Use all of `<h1>` to `<h6>` as the test name.\n\nThis mainly simplifies debugging error index tests, as the error codes are\n`<h2>`s in the huge document containing all codes.", "tree": {"sha": "21a31b341952f950169a089445cdae1205c022fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21a31b341952f950169a089445cdae1205c022fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0cdf587ab356128d07f96e3d2dff255e1ebb5097", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlnZBZ0ACgkQ/vbIBR0O\nATzOlxAAoX1hlSpmzU1Qe2lG+XBsAkkz+b5y6571c2gjCLwYbUvgz9iqTbbX0Rmg\nYEiLYx/AscWZfHMl60EIkJXMPRKo9sIymj2cWHa3mZTaEKpY3NASI5dK8FTrumaC\nhvBp6Wa4vKUfKPb7vBm7R/6hJUJBPVJFxNSnL3Y+FJr5Rk+DPsrVDOmzZRgiAP91\nIel6EMNU+d7ZIPbhaJ0m6x4KvOJSHz41B6lXvqnHdAsG9EFjqZTjoPEo05ZPI6bA\ncGUWZr4PFHk18Ph2uq0XaDGzFFc0UDrMSCtxgRIRYxBVwlYJaVmOAtGvyU0UAldF\nS+KCxsCCct+2fQyCkAVSu3GYb0rV/T7mOjIS77f0cNlQDONMVsvB3SiBV2/27Vmt\nomtjVOOfF74UOdDQhWbBqFRTlRpuW0uHQPrxbb5yy9WojvEr8gW+SlRBEfq/rchx\nlQuMdc8cb6CAdzkeEymkIAl8A6wD0qIc2Et/Ku+wRVf6oxUSdDWNk3ZaCxbdBHoz\nYJS/pY5RxbEMJX7RcUAKXn3zG9QsXTlEUyEmGIrAZsFRkAUfakdz5q9/ufUV6sJ5\noHS/ORFrgP0wiOChtSODWslhF/6obla+5Fjlqlbah/taCrkie/JP5YdnTqi2ZGxD\nzK6Pexx06jbXkyB0HoYPd1DJP6fZ7Iti5/38KxMZiCm346bK5rY=\n=LdxN\n-----END PGP SIGNATURE-----", "payload": "tree 21a31b341952f950169a089445cdae1205c022fd\nparent bb4d1491466d8239a7a5fd68bd605e3276e97afb\nauthor kennytm <kennytm@gmail.com> 1505548755 +0800\ncommitter kennytm <kennytm@gmail.com> 1507394973 +0800\n\ndoc-test: In Markdown tests, Use all of `<h1>` to `<h6>` as the test name.\n\nThis mainly simplifies debugging error index tests, as the error codes are\n`<h2>`s in the huge document containing all codes.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0cdf587ab356128d07f96e3d2dff255e1ebb5097", "html_url": "https://github.com/rust-lang/rust/commit/0cdf587ab356128d07f96e3d2dff255e1ebb5097", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0cdf587ab356128d07f96e3d2dff255e1ebb5097/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb4d1491466d8239a7a5fd68bd605e3276e97afb", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb4d1491466d8239a7a5fd68bd605e3276e97afb", "html_url": "https://github.com/rust-lang/rust/commit/bb4d1491466d8239a7a5fd68bd605e3276e97afb"}], "stats": {"total": 80, "additions": 50, "deletions": 30}, "files": [{"sha": "564626ac39885328089f8be721805ed6e8045981", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0cdf587ab356128d07f96e3d2dff255e1ebb5097/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cdf587ab356128d07f96e3d2dff255e1ebb5097/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=0cdf587ab356128d07f96e3d2dff255e1ebb5097", "patch": "@@ -43,7 +43,7 @@ parameter if so.\n \"##,\n \n E0154: r##\"\n-## Note: this error code is no longer emitted by the compiler.\n+#### Note: this error code is no longer emitted by the compiler.\n \n Imports (`use` statements) are not allowed after non-item statements, such as\n variable declarations and expression statements.\n@@ -79,7 +79,7 @@ https://doc.rust-lang.org/reference.html#statements\n \"##,\n \n E0251: r##\"\n-## Note: this error code is no longer emitted by the compiler.\n+#### Note: this error code is no longer emitted by the compiler.\n \n Two items of the same name cannot be imported without rebinding one of the\n items under a new local name.\n@@ -268,7 +268,7 @@ fn main() {\n \"##,\n \n E0256: r##\"\n-## Note: this error code is no longer emitted by the compiler.\n+#### Note: this error code is no longer emitted by the compiler.\n \n You can't import a type or module when the name of the item being imported is\n the same as another type or submodule defined in the module."}, {"sha": "2cd1261e7953db5bc0995a1ccac81800fcdb7610", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 47, "deletions": 27, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/0cdf587ab356128d07f96e3d2dff255e1ebb5097/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cdf587ab356128d07f96e3d2dff255e1ebb5097/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=0cdf587ab356128d07f96e3d2dff255e1ebb5097", "patch": "@@ -407,13 +407,33 @@ pub struct Collector {\n     pub tests: Vec<testing::TestDescAndFn>,\n     // to be removed when hoedown will be definitely gone\n     pub old_tests: HashMap<String, Vec<String>>,\n+\n+    // The name of the test displayed to the user, separated by `::`.\n+    //\n+    // In tests from Rust source, this is the path to the item\n+    // e.g. `[\"std\", \"vec\", \"Vec\", \"push\"]`.\n+    //\n+    // In tests from a markdown file, this is the titles of all headers (h1~h6)\n+    // of the sections that contain the code block, e.g. if the markdown file is\n+    // written as:\n+    //\n+    // ``````markdown\n+    // # Title\n+    //\n+    // ## Subtitle\n+    //\n+    // ```rust\n+    // assert!(true);\n+    // ```\n+    // ``````\n+    //\n+    // the `names` vector of that test will be `[\"Title\", \"Subtitle\"]`.\n     names: Vec<String>,\n+\n     cfgs: Vec<String>,\n     libs: SearchPaths,\n     externs: Externs,\n-    cnt: usize,\n     use_headers: bool,\n-    current_header: Option<String>,\n     cratename: String,\n     opts: TestOptions,\n     maybe_sysroot: Option<PathBuf>,\n@@ -436,9 +456,7 @@ impl Collector {\n             cfgs,\n             libs,\n             externs,\n-            cnt: 0,\n             use_headers,\n-            current_header: None,\n             cratename,\n             opts,\n             maybe_sysroot,\n@@ -450,28 +468,12 @@ impl Collector {\n     }\n \n     fn generate_name(&self, line: usize, filename: &str) -> String {\n-        if self.use_headers {\n-            if let Some(ref header) = self.current_header {\n-                format!(\"{} - {} (line {})\", filename, header, line)\n-            } else {\n-                format!(\"{} - (line {})\", filename, line)\n-            }\n-        } else {\n-            format!(\"{} - {} (line {})\", filename, self.names.join(\"::\"), line)\n-        }\n+        format!(\"{} - {} (line {})\", filename, self.names.join(\"::\"), line)\n     }\n \n     // to be removed once hoedown is gone\n     fn generate_name_beginning(&self, filename: &str) -> String {\n-        if self.use_headers {\n-            if let Some(ref header) = self.current_header {\n-                format!(\"{} - {} (line\", filename, header)\n-            } else {\n-                format!(\"{} - (line\", filename)\n-            }\n-        } else {\n-            format!(\"{} - {} (line\", filename, self.names.join(\"::\"))\n-        }\n+        format!(\"{} - {} (line\", filename, self.names.join(\"::\"))\n     }\n \n     pub fn add_old_test(&mut self, test: String, filename: String) {\n@@ -580,7 +582,7 @@ impl Collector {\n     }\n \n     pub fn register_header(&mut self, name: &str, level: u32) {\n-        if self.use_headers && level == 1 {\n+        if self.use_headers {\n             // we use these headings as test names, so it's good if\n             // they're valid identifiers.\n             let name = name.chars().enumerate().map(|(i, c)| {\n@@ -592,9 +594,28 @@ impl Collector {\n                     }\n                 }).collect::<String>();\n \n-            // new header => reset count.\n-            self.cnt = 0;\n-            self.current_header = Some(name);\n+            // Here we try to efficiently assemble the header titles into the\n+            // test name in the form of `h1::h2::h3::h4::h5::h6`.\n+            //\n+            // Suppose originally `self.names` contains `[h1, h2, h3]`...\n+            let level = level as usize;\n+            if level <= self.names.len() {\n+                // ... Consider `level == 2`. All headers in the lower levels\n+                // are irrelevant in this new level. So we should reset\n+                // `self.names` to contain headers until <h2>, and replace that\n+                // slot with the new name: `[h1, name]`.\n+                self.names.truncate(level);\n+                self.names[level - 1] = name;\n+            } else {\n+                // ... On the other hand, consider `level == 5`. This means we\n+                // need to extend `self.names` to contain five headers. We fill\n+                // in the missing level (<h4>) with `_`. Thus `self.names` will\n+                // become `[h1, h2, h3, \"_\", name]`.\n+                if level - 1 > self.names.len() {\n+                    self.names.resize(level - 1, \"_\".to_owned());\n+                }\n+                self.names.push(name);\n+            }\n         }\n     }\n }\n@@ -625,7 +646,6 @@ impl<'a, 'hir> HirCollector<'a, 'hir> {\n         attrs.collapse_doc_comments();\n         attrs.unindent_doc_comments();\n         if let Some(doc) = attrs.doc_value() {\n-            self.collector.cnt = 0;\n             if self.collector.render_type == RenderType::Pulldown {\n                 markdown::old_find_testable_code(doc, self.collector,\n                                                  attrs.span.unwrap_or(DUMMY_SP));"}]}