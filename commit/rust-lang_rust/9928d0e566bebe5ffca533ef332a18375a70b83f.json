{"sha": "9928d0e566bebe5ffca533ef332a18375a70b83f", "node_id": "C_kwDOAAsO6NoAKDk5MjhkMGU1NjZiZWJlNWZmY2E1MzNlZjMzMmExODM3NWE3MGI4M2Y", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-03-07T15:04:53Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-03-08T14:40:37Z"}, "message": "Remove OnlyPropagateInto.", "tree": {"sha": "39dc5575536c1af100d3fa46a8f0abbfdd8474cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/39dc5575536c1af100d3fa46a8f0abbfdd8474cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9928d0e566bebe5ffca533ef332a18375a70b83f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9928d0e566bebe5ffca533ef332a18375a70b83f", "html_url": "https://github.com/rust-lang/rust/commit/9928d0e566bebe5ffca533ef332a18375a70b83f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9928d0e566bebe5ffca533ef332a18375a70b83f/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "24dbf9c1123716ab0589772b301468d34a7a8a9b", "url": "https://api.github.com/repos/rust-lang/rust/commits/24dbf9c1123716ab0589772b301468d34a7a8a9b", "html_url": "https://github.com/rust-lang/rust/commit/24dbf9c1123716ab0589772b301468d34a7a8a9b"}], "stats": {"total": 47, "additions": 13, "deletions": 34}, "files": [{"sha": "a78b36c65f3152c97eb2ce71b65f53bb9db9fc51", "filename": "compiler/rustc_mir_transform/src/const_prop.rs", "status": "modified", "additions": 6, "deletions": 29, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/9928d0e566bebe5ffca533ef332a18375a70b83f/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9928d0e566bebe5ffca533ef332a18375a70b83f/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs?ref=9928d0e566bebe5ffca533ef332a18375a70b83f", "patch": "@@ -718,8 +718,6 @@ pub enum ConstPropMode {\n     FullConstProp,\n     /// The `Local` can only be propagated into and from its own block.\n     OnlyInsideOwnBlock,\n-    /// The `Local` can be propagated into but reads cannot be propagated.\n-    OnlyPropagateInto,\n     /// The `Local` cannot be part of propagation at all. Any statement\n     /// referencing it either for reading or writing will not get propagated.\n     NoPropagation,\n@@ -729,8 +727,6 @@ pub struct CanConstProp {\n     can_const_prop: IndexVec<Local, ConstPropMode>,\n     // False at the beginning. Once set, no more assignments are allowed to that local.\n     found_assignment: BitSet<Local>,\n-    // Cache of locals' information\n-    local_kinds: IndexVec<Local, LocalKind>,\n }\n \n impl CanConstProp {\n@@ -743,10 +739,6 @@ impl CanConstProp {\n         let mut cpv = CanConstProp {\n             can_const_prop: IndexVec::from_elem(ConstPropMode::FullConstProp, &body.local_decls),\n             found_assignment: BitSet::new_empty(body.local_decls.len()),\n-            local_kinds: IndexVec::from_fn_n(\n-                |local| body.local_kind(local),\n-                body.local_decls.len(),\n-            ),\n         };\n         for (local, val) in cpv.can_const_prop.iter_enumerated_mut() {\n             let ty = body.local_decls[local].ty;\n@@ -759,24 +751,10 @@ impl CanConstProp {\n                     continue;\n                 }\n             }\n-            // Cannot use args at all\n-            // Cannot use locals because if x < y { y - x } else { x - y } would\n-            //        lint for x != y\n-            // FIXME(oli-obk): lint variables until they are used in a condition\n-            // FIXME(oli-obk): lint if return value is constant\n-            if cpv.local_kinds[local] == LocalKind::Arg {\n-                *val = ConstPropMode::OnlyPropagateInto;\n-                trace!(\n-                    \"local {:?} can't be const propagated because it's a function argument\",\n-                    local\n-                );\n-            } else if cpv.local_kinds[local] == LocalKind::Var {\n-                *val = ConstPropMode::OnlyInsideOwnBlock;\n-                trace!(\n-                    \"local {:?} will only be propagated inside its block, because it's a user variable\",\n-                    local\n-                );\n-            }\n+        }\n+        // Consider that arguments are assigned on entry.\n+        for arg in body.args_iter() {\n+            cpv.found_assignment.insert(arg);\n         }\n         cpv.visit_body(&body);\n         cpv.can_const_prop\n@@ -806,7 +784,6 @@ impl Visitor<'_> for CanConstProp {\n                         // states as applicable.\n                         ConstPropMode::OnlyInsideOwnBlock => {}\n                         ConstPropMode::NoPropagation => {}\n-                        ConstPropMode::OnlyPropagateInto => {}\n                         other @ ConstPropMode::FullConstProp => {\n                             trace!(\n                                 \"local {:?} can't be propagated because of multiple assignments. Previous state: {:?}\",\n@@ -897,7 +874,7 @@ impl<'tcx> MutVisitor<'tcx> for ConstPropagator<'_, 'tcx> {\n                                 place.local\n                             );\n                         }\n-                        ConstPropMode::OnlyPropagateInto | ConstPropMode::NoPropagation => {\n+                        ConstPropMode::NoPropagation => {\n                             trace!(\"can't propagate into {:?}\", place);\n                             if place.local != RETURN_PLACE {\n                                 Self::remove_const(&mut self.ecx, place.local);\n@@ -933,7 +910,7 @@ impl<'tcx> MutVisitor<'tcx> for ConstPropagator<'_, 'tcx> {\n                             Self::remove_const(&mut self.ecx, place.local);\n                         }\n                     }\n-                    ConstPropMode::OnlyPropagateInto | ConstPropMode::NoPropagation => {\n+                    ConstPropMode::NoPropagation => {\n                         Self::remove_const(&mut self.ecx, place.local);\n                     }\n                 }"}, {"sha": "c0a1e502d852ddaaa59109a05b95b584ae6231e4", "filename": "compiler/rustc_mir_transform/src/const_prop_lint.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9928d0e566bebe5ffca533ef332a18375a70b83f/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9928d0e566bebe5ffca533ef332a18375a70b83f/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs?ref=9928d0e566bebe5ffca533ef332a18375a70b83f", "patch": "@@ -530,7 +530,7 @@ impl<'tcx> Visitor<'tcx> for ConstPropagator<'_, 'tcx> {\n                                 place.local\n                             );\n                         }\n-                        ConstPropMode::OnlyPropagateInto | ConstPropMode::NoPropagation => {\n+                        ConstPropMode::NoPropagation => {\n                             trace!(\"can't propagate into {:?}\", place);\n                             if place.local != RETURN_PLACE {\n                                 Self::remove_const(&mut self.ecx, place.local);\n@@ -567,7 +567,7 @@ impl<'tcx> Visitor<'tcx> for ConstPropagator<'_, 'tcx> {\n                             Self::remove_const(&mut self.ecx, place.local);\n                         }\n                     }\n-                    ConstPropMode::OnlyPropagateInto | ConstPropMode::NoPropagation => {\n+                    ConstPropMode::NoPropagation => {\n                         Self::remove_const(&mut self.ecx, place.local);\n                     }\n                 }"}, {"sha": "bedfa5992ad59ea192bed4edc8d679494892e739", "filename": "tests/mir-opt/const_prop/bad_op_mod_by_zero.main.ConstProp.diff", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9928d0e566bebe5ffca533ef332a18375a70b83f/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_mod_by_zero.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9928d0e566bebe5ffca533ef332a18375a70b83f/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_mod_by_zero.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_mod_by_zero.main.ConstProp.diff?ref=9928d0e566bebe5ffca533ef332a18375a70b83f", "patch": "@@ -27,17 +27,19 @@\n       }\n   \n       bb1: {\n-          _5 = Eq(_1, const -1_i32);       // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n+-         _5 = Eq(_1, const -1_i32);       // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n -         _6 = Eq(const 1_i32, const i32::MIN); // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n -         _7 = BitAnd(move _5, move _6);   // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n -         assert(!move _7, \"attempt to compute the remainder of `{} % {}`, which would overflow\", const 1_i32, _1) -> bb2; // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n++         _5 = const false;                // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n +         _6 = const false;                // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n +         _7 = const false;                // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n-+         assert(!const false, \"attempt to compute the remainder of `{} % {}`, which would overflow\", const 1_i32, _1) -> bb2; // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n++         assert(!const false, \"attempt to compute the remainder of `{} % {}`, which would overflow\", const 1_i32, const 0_i32) -> bb2; // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n       }\n   \n       bb2: {\n-          _2 = Rem(const 1_i32, _1);       // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n+-         _2 = Rem(const 1_i32, _1);       // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n++         _2 = Rem(const 1_i32, const 0_i32); // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n           StorageDead(_2);                 // scope 1 at $DIR/bad_op_mod_by_zero.rs:+3:1: +3:2\n           return;                          // scope 0 at $DIR/bad_op_mod_by_zero.rs:+3:2: +3:2\n       }"}]}