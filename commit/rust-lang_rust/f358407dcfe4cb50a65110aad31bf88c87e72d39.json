{"sha": "f358407dcfe4cb50a65110aad31bf88c87e72d39", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzNTg0MDdkY2ZlNGNiNTBhNjUxMTBhYWQzMWJmODhjODdlNzJkMzk=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2014-09-22T19:55:55Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2014-10-20T20:25:35Z"}, "message": "Some String Guide improvements.\n\nFixes #17340", "tree": {"sha": "53c384de6aa72ab7e3dd5d3564bc0e5aab3b5641", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/53c384de6aa72ab7e3dd5d3564bc0e5aab3b5641"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f358407dcfe4cb50a65110aad31bf88c87e72d39", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f358407dcfe4cb50a65110aad31bf88c87e72d39", "html_url": "https://github.com/rust-lang/rust/commit/f358407dcfe4cb50a65110aad31bf88c87e72d39", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f358407dcfe4cb50a65110aad31bf88c87e72d39/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18062c1e96a7f62194de2a851bf3c779aa71cb7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/18062c1e96a7f62194de2a851bf3c779aa71cb7d", "html_url": "https://github.com/rust-lang/rust/commit/18062c1e96a7f62194de2a851bf3c779aa71cb7d"}], "stats": {"total": 142, "additions": 120, "deletions": 22}, "files": [{"sha": "44fc0d830447513daaf0b1a29fd51baff71a7756", "filename": "src/doc/guide-strings.md", "status": "modified", "additions": 120, "deletions": 22, "changes": 142, "blob_url": "https://github.com/rust-lang/rust/blob/f358407dcfe4cb50a65110aad31bf88c87e72d39/src%2Fdoc%2Fguide-strings.md", "raw_url": "https://github.com/rust-lang/rust/raw/f358407dcfe4cb50a65110aad31bf88c87e72d39/src%2Fdoc%2Fguide-strings.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-strings.md?ref=f358407dcfe4cb50a65110aad31bf88c87e72d39", "patch": "@@ -96,12 +96,11 @@ need, and it can make your lifetimes more complex.\n \n ## Generic functions\n \n-To write a function that's generic over types of strings, use [the `Str`\n-trait](http://doc.rust-lang.org/std/str/trait.Str.html):\n+To write a function that's generic over types of strings, use `&str`.\n \n ```{rust}\n-fn some_string_length<T: Str>(x: T) -> uint {\n-        x.as_slice().len()\n+fn some_string_length(x: &str) -> uint {\n+        x.len()\n }\n \n fn main() {\n@@ -111,15 +110,12 @@ fn main() {\n \n     let s = \"Hello, world\".to_string();\n \n-    println!(\"{}\", some_string_length(s));\n+    println!(\"{}\", some_string_length(s.as_slice()));\n }\n ```\n \n Both of these lines will print `12`. \n \n-The only method that the `Str` trait has is `as_slice()`, which gives you\n-access to a `&str` value from the underlying string.\n-\n ## Comparisons\n \n To compare a String to a constant string, prefer `as_slice()`...\n@@ -161,25 +157,93 @@ indexing is basically never what you want to do. The reason is that each\n character can be a variable number of bytes. This means that you have to iterate\n through the characters anyway, which is a O(n) operation. \n \n-To iterate over a string, use the `graphemes()` method on `&str`:\n+There's 3 basic levels of unicode (and its encodings):\n+\n+- code units, the underlying data type used to store everything\n+- code points/unicode scalar values (char)\n+- graphemes (visible characters)\n+\n+Rust provides iterators for each of these situations:\n+\n+- `.bytes()` will iterate over the underlying bytes\n+- `.chars()` will iterate over the code points\n+- `.graphemes()` will iterate over each grapheme\n+\n+Usually, the `graphemes()` method on `&str` is what you want:\n \n ```{rust}\n-let s = \"\u03b1\u1f30\u03b8\u03ae\u03c1\";\n+let s = \"u\u0354n\u030e\u0348\u0330i\u0319\u032e\u035a\u0326c\u0309\u035ao\u0357\u033c\u0329\u0330d\u0306\u0343\u0365\u0354e\u0301\";\n \n for l in s.graphemes(true) {\n     println!(\"{}\", l);\n }\n ```\n \n+This prints:\n+\n+```{notrust,ignore}\n+u\u0354\n+n\u030e\u0348\u0330\n+i\u0319\u032e\u035a\u0326\n+c\u0309\u035a\n+o\u0357\u033c\u0329\u0330\n+d\u0306\u0343\u0365\u0354\n+e\u0301\n+```\n+\n Note that `l` has the type `&str` here, since a single grapheme can consist of\n multiple codepoints, so a `char` wouldn't be appropriate.\n \n-This will print out each character in turn, as you'd expect: first \"\u03b1\", then\n-\"\u1f30\", etc. You can see that this is different than just the individual bytes.\n-Here's a version that prints out each byte:\n+This will print out each visible character in turn, as you'd expect: first \"u\u0354\", then\n+\"n\u030e\u0348\u0330\", etc. If you wanted each individual codepoint of each grapheme, you can use `.chars()`:\n \n ```{rust}\n-let s = \"\u03b1\u1f30\u03b8\u03ae\u03c1\";\n+let s = \"u\u0354n\u030e\u0348\u0330i\u0319\u032e\u035a\u0326c\u0309\u035ao\u0357\u033c\u0329\u0330d\u0306\u0343\u0365\u0354e\u0301\";\n+\n+for l in s.chars() {\n+    println!(\"{}\", l);\n+}\n+```\n+\n+This prints:\n+\n+```{notrust,ignore}\n+u\n+\u0354\n+n\n+\u030e\n+\u0348\n+\u0330\n+i\n+\u0319\n+\u032e\n+\u035a\n+\u0326\n+c\n+\u0309\n+\u035a\n+o\n+\u0357\n+\u033c\n+\u0329\n+\u0330\n+d\n+\u0306\n+\u0343\n+\u0365\n+\u0354\n+e\n+\u0301\n+```\n+\n+You can see how some of them are combining characters, and therefore the output\n+looks a bit odd.\n+\n+If you want the individual byte representation of each codepoint, you can use\n+`.bytes()`:\n+\n+```{rust}\n+let s = \"u\u0354n\u030e\u0348\u0330i\u0319\u032e\u035a\u0326c\u0309\u035ao\u0357\u033c\u0329\u0330d\u0306\u0343\u0365\u0354e\u0301\";\n \n for l in s.bytes() {\n     println!(\"{}\", l);\n@@ -189,16 +253,50 @@ for l in s.bytes() {\n This will print:\n \n ```{notrust,ignore}\n-206\n-177\n-225\n-188\n+117\n+205\n+148\n+110\n+204\n+142\n+205\n+136\n+204\n 176\n-206\n-184\n-206\n+105\n+204\n+153\n+204\n 174\n-207\n+205\n+154\n+204\n+166\n+99\n+204\n+137\n+205\n+154\n+111\n+205\n+151\n+204\n+188\n+204\n+169\n+204\n+176\n+100\n+204\n+134\n+205\n+131\n+205\n+165\n+205\n+148\n+101\n+204\n 129\n ```\n "}]}