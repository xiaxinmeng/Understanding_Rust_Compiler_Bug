{"sha": "45be1ac0fcb7ac2d4d8e52c6543e8384e7c1a6ea", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1YmUxYWMwZmNiN2FjMmQ0ZDhlNTJjNjU0M2U4Mzg0ZTdjMWE2ZWE=", "commit": {"author": {"name": "scalexm", "email": "alexandre@scalexm.fr", "date": "2018-10-24T08:29:42Z"}, "committer": {"name": "scalexm", "email": "alexandre@scalexm.fr", "date": "2018-11-03T10:41:55Z"}, "message": "Remove `ReCanonical` in favor of `ReLateBound`", "tree": {"sha": "c16319d9bf0c7614fc717ff81d6408bccddebde8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c16319d9bf0c7614fc717ff81d6408bccddebde8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45be1ac0fcb7ac2d4d8e52c6543e8384e7c1a6ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45be1ac0fcb7ac2d4d8e52c6543e8384e7c1a6ea", "html_url": "https://github.com/rust-lang/rust/commit/45be1ac0fcb7ac2d4d8e52c6543e8384e7c1a6ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45be1ac0fcb7ac2d4d8e52c6543e8384e7c1a6ea/comments", "author": {"login": "scalexm", "id": 1173131, "node_id": "MDQ6VXNlcjExNzMxMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1173131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scalexm", "html_url": "https://github.com/scalexm", "followers_url": "https://api.github.com/users/scalexm/followers", "following_url": "https://api.github.com/users/scalexm/following{/other_user}", "gists_url": "https://api.github.com/users/scalexm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scalexm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scalexm/subscriptions", "organizations_url": "https://api.github.com/users/scalexm/orgs", "repos_url": "https://api.github.com/users/scalexm/repos", "events_url": "https://api.github.com/users/scalexm/events{/privacy}", "received_events_url": "https://api.github.com/users/scalexm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scalexm", "id": 1173131, "node_id": "MDQ6VXNlcjExNzMxMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1173131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scalexm", "html_url": "https://github.com/scalexm", "followers_url": "https://api.github.com/users/scalexm/followers", "following_url": "https://api.github.com/users/scalexm/following{/other_user}", "gists_url": "https://api.github.com/users/scalexm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scalexm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scalexm/subscriptions", "organizations_url": "https://api.github.com/users/scalexm/orgs", "repos_url": "https://api.github.com/users/scalexm/repos", "events_url": "https://api.github.com/users/scalexm/events{/privacy}", "received_events_url": "https://api.github.com/users/scalexm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f8de94f3bb1ab148f717507ec1baf78c6a7d207", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f8de94f3bb1ab148f717507ec1baf78c6a7d207", "html_url": "https://github.com/rust-lang/rust/commit/1f8de94f3bb1ab148f717507ec1baf78c6a7d207"}], "stats": {"total": 199, "additions": 98, "deletions": 101}, "files": [{"sha": "a93e31480f3bbb5a4b3952e317a5a7caffe36c17", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/45be1ac0fcb7ac2d4d8e52c6543e8384e7c1a6ea/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45be1ac0fcb7ac2d4d8e52c6543e8384e7c1a6ea/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=45be1ac0fcb7ac2d4d8e52c6543e8384e7c1a6ea", "patch": "@@ -100,9 +100,6 @@ for ty::RegionKind {\n             ty::ReEmpty => {\n                 // No variant fields to hash for these ...\n             }\n-            ty::ReCanonical(c) => {\n-                c.hash_stable(hcx, hasher);\n-            }\n             ty::ReLateBound(db, ty::BrAnon(i)) => {\n                 db.hash_stable(hcx, hasher);\n                 i.hash_stable(hcx, hasher);"}, {"sha": "9c70606349b5d68ad40a01646f4b216a30852a4a", "filename": "src/librustc/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/45be1ac0fcb7ac2d4d8e52c6543e8384e7c1a6ea/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45be1ac0fcb7ac2d4d8e52c6543e8384e7c1a6ea/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=45be1ac0fcb7ac2d4d8e52c6543e8384e7c1a6ea", "patch": "@@ -331,8 +331,8 @@ impl<'cx, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for Canonicalizer<'cx, 'gcx, 'tcx>\n             | ty::ReErased => self.canonicalize_region_mode\n                 .canonicalize_free_region(self, r),\n \n-            ty::ReClosureBound(..) | ty::ReCanonical(_) => {\n-                bug!(\"canonical region encountered during canonicalization\")\n+            ty::ReClosureBound(..) => {\n+                bug!(\"closure bound region encountered during canonicalization\")\n             }\n         }\n     }\n@@ -407,12 +407,6 @@ impl<'cx, 'gcx, 'tcx> Canonicalizer<'cx, 'gcx, 'tcx> {\n     where\n         V: TypeFoldable<'tcx> + Lift<'gcx>,\n     {\n-        debug_assert!(\n-            !value.has_type_flags(TypeFlags::HAS_CANONICAL_VARS),\n-            \"canonicalizing a canonical value: {:?}\",\n-            value,\n-        );\n-\n         let needs_canonical_flags = if canonicalize_region_mode.any() {\n             TypeFlags::HAS_FREE_REGIONS | TypeFlags::KEEP_IN_LOCAL_TCX\n         } else {\n@@ -569,7 +563,11 @@ impl<'cx, 'gcx, 'tcx> Canonicalizer<'cx, 'gcx, 'tcx> {\n         r: ty::Region<'tcx>,\n     ) -> ty::Region<'tcx> {\n         let var = self.canonical_var(info, r.into());\n-        self.tcx().mk_region(ty::ReCanonical(var))\n+        let region = ty::ReLateBound(\n+            self.binder_index,\n+            ty::BoundRegion::BrAnon(var.index() as u32)\n+        );\n+        self.tcx().mk_region(region)\n     }\n \n     /// Given a type variable `ty_var` of the given kind, first check"}, {"sha": "f7eb7118f412f6f0c55676c6966eff30628f8104", "filename": "src/librustc/infer/canonical/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45be1ac0fcb7ac2d4d8e52c6543e8384e7c1a6ea/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45be1ac0fcb7ac2d4d8e52c6543e8384e7c1a6ea/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs?ref=45be1ac0fcb7ac2d4d8e52c6543e8384e7c1a6ea", "patch": "@@ -20,7 +20,7 @@\n //! - a map M (of type `CanonicalVarValues`) from those canonical\n //!   variables back to the original.\n //!\n-//! We can then do queries using T2. These will give back constriants\n+//! We can then do queries using T2. These will give back constraints\n //! on the canonical variables which can be translated, using the map\n //! M, into constraints in our source context. This process of\n //! translating the results back is done by the"}, {"sha": "4858d1d09192a22b5c881b23edc19f3c892d5046", "filename": "src/librustc/infer/canonical/query_response.rs", "status": "modified", "additions": 28, "deletions": 20, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/45be1ac0fcb7ac2d4d8e52c6543e8384e7c1a6ea/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45be1ac0fcb7ac2d4d8e52c6543e8384e7c1a6ea/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_response.rs?ref=45be1ac0fcb7ac2d4d8e52c6543e8384e7c1a6ea", "patch": "@@ -308,11 +308,12 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n         // ...also include the other query region constraints from the query.\n         output_query_region_constraints.extend(\n             query_response.value.region_constraints.iter().filter_map(|r_c| {\n-                let &ty::OutlivesPredicate(k1, r2) = r_c.skip_binder(); // reconstructed below\n-                let k1 = substitute_value(self.tcx, &result_subst, &k1);\n-                let r2 = substitute_value(self.tcx, &result_subst, &r2);\n-                if k1 != r2.into() {\n-                    Some(ty::Binder::bind(ty::OutlivesPredicate(k1, r2)))\n+                let ty::OutlivesPredicate(k1, r2) = r_c.skip_binder(); // reconstructed below\n+                let k1 = substitute_value(self.tcx, &result_subst, &ty::Binder::bind(*k1));\n+                let r2 = substitute_value(self.tcx, &result_subst, &ty::Binder::bind(*r2));\n+                if k1 != r2.map_bound(|bound| bound.into()) {\n+                    let predicate = ty::OutlivesPredicate(*k1.skip_binder(), *r2.skip_binder());\n+                    Some(ty::Binder::bind(predicate))\n                 } else {\n                     None\n                 }\n@@ -433,16 +434,21 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n                 UnpackedKind::Type(result_value) => {\n                     // e.g., here `result_value` might be `?0` in the example above...\n                     if let ty::Bound(b) = result_value.sty {\n+                        // ...in which case we would set `canonical_vars[0]` to `Some(?U)`.\n+\n+                        // We only allow a `ty::INNERMOST` index in substitutions.\n                         assert_eq!(b.index, ty::INNERMOST);\n-                        // in which case we would set `canonical_vars[0]` to `Some(?U)`.\n                         opt_values[b.var] = Some(*original_value);\n                     }\n                 }\n                 UnpackedKind::Lifetime(result_value) => {\n                     // e.g., here `result_value` might be `'?1` in the example above...\n-                    if let &ty::RegionKind::ReCanonical(index) = result_value {\n-                        // in which case we would set `canonical_vars[0]` to `Some('static)`.\n-                        opt_values[index] = Some(*original_value);\n+                    if let &ty::RegionKind::ReLateBound(index, br) = result_value {\n+                        // ... in which case we would set `canonical_vars[0]` to `Some('static)`.\n+\n+                        // We only allow a `ty::INNERMOST` index in substitutions.\n+                        assert_eq!(index, ty::INNERMOST);\n+                        opt_values[br.as_bound_var()] = Some(*original_value);\n                     }\n                 }\n             }\n@@ -525,21 +531,23 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n                 .iter()\n                 .map(move |constraint| {\n                     let ty::OutlivesPredicate(k1, r2) = constraint.skip_binder(); // restored below\n-                    let k1 = substitute_value(self.tcx, result_subst, k1);\n-                    let r2 = substitute_value(self.tcx, result_subst, r2);\n+                    let k1 = substitute_value(self.tcx, result_subst, &ty::Binder::bind(*k1));\n+                    let r2 = substitute_value(self.tcx, result_subst, &ty::Binder::bind(*r2));\n \n                     Obligation::new(\n                         cause.clone(),\n                         param_env,\n-                        match k1.unpack() {\n+                        match k1.skip_binder().unpack() {\n                             UnpackedKind::Lifetime(r1) => ty::Predicate::RegionOutlives(\n-                                ty::Binder::dummy(\n-                                    ty::OutlivesPredicate(r1, r2)\n-                            )),\n+                                ty::Binder::bind(\n+                                    ty::OutlivesPredicate(r1, r2.skip_binder())\n+                                )\n+                            ),\n                             UnpackedKind::Type(t1) => ty::Predicate::TypeOutlives(\n-                                ty::Binder::dummy(ty::OutlivesPredicate(\n-                                    t1, r2\n-                            )))\n+                                ty::Binder::bind(\n+                                    ty::OutlivesPredicate(t1, r2.skip_binder())\n+                                )\n+                            ),\n                         }\n                     )\n                 })\n@@ -621,11 +629,11 @@ pub fn make_query_outlives<'tcx>(\n             }\n             Constraint::RegSubReg(r1, r2) => ty::OutlivesPredicate(r2.into(), r1),\n         })\n-        .map(ty::Binder::dummy) // no bound regions in the code above\n+        .map(ty::Binder::dummy) // no bound vars in the code above\n         .chain(\n             outlives_obligations\n                 .map(|(ty, r)| ty::OutlivesPredicate(ty.into(), r))\n-                .map(ty::Binder::dummy), // no bound regions in the code above\n+                .map(ty::Binder::dummy) // no bound vars in the code above\n         )\n         .collect();\n "}, {"sha": "7839c8922660a18c3261dce0e49d1ca49b00b741", "filename": "src/librustc/infer/canonical/substitute.rs", "status": "modified", "additions": 21, "deletions": 10, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/45be1ac0fcb7ac2d4d8e52c6543e8384e7c1a6ea/src%2Flibrustc%2Finfer%2Fcanonical%2Fsubstitute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45be1ac0fcb7ac2d4d8e52c6543e8384e7c1a6ea/src%2Flibrustc%2Finfer%2Fcanonical%2Fsubstitute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fsubstitute.rs?ref=45be1ac0fcb7ac2d4d8e52c6543e8384e7c1a6ea", "patch": "@@ -19,7 +19,7 @@\n use infer::canonical::{Canonical, CanonicalVarValues};\n use ty::fold::{TypeFoldable, TypeFolder};\n use ty::subst::UnpackedKind;\n-use ty::{self, Ty, TyCtxt, TypeFlags};\n+use ty::{self, Ty, TyCtxt};\n \n impl<'tcx, V> Canonical<'tcx, V> {\n     /// Instantiate the wrapped value, replacing each canonical value\n@@ -64,9 +64,9 @@ where\n     T: TypeFoldable<'tcx>,\n {\n     if var_values.var_values.is_empty() {\n-        debug_assert!(!value.has_type_flags(TypeFlags::HAS_CANONICAL_VARS));\n         value.clone()\n-    } else if !value.has_type_flags(TypeFlags::HAS_CANONICAL_VARS) {\n+    } else if !value.has_escaping_bound_vars() {\n+        // There are no bound vars to substitute.\n         value.clone()\n     } else {\n         value.fold_with(&mut CanonicalVarValuesSubst {\n@@ -104,8 +104,8 @@ impl<'cx, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for CanonicalVarValuesSubst<'cx, 'g\n                     match self.var_values.var_values[b.var].unpack() {\n                         UnpackedKind::Type(ty) => ty::fold::shift_vars(\n                             self.tcx,\n-                            self.binder_index.index() as u32,\n-                            &ty\n+                            &ty,\n+                            self.binder_index.index() as u32\n                         ),\n                         r => bug!(\"{:?} is a type but value is {:?}\", b, r),\n                     }\n@@ -114,7 +114,8 @@ impl<'cx, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for CanonicalVarValuesSubst<'cx, 'g\n                 }\n             }\n             _ => {\n-                if !t.has_type_flags(TypeFlags::HAS_CANONICAL_VARS) {\n+                if !t.has_vars_bound_at_or_above(self.binder_index) {\n+                    // Nothing more to substitute.\n                     t\n                 } else {\n                     t.super_fold_with(self)\n@@ -125,10 +126,20 @@ impl<'cx, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for CanonicalVarValuesSubst<'cx, 'g\n \n     fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {\n         match r {\n-            ty::RegionKind::ReCanonical(c) => match self.var_values.var_values[*c].unpack() {\n-                UnpackedKind::Lifetime(l) => l,\n-                r => bug!(\"{:?} is a region but value is {:?}\", c, r),\n-            },\n+            ty::RegionKind::ReLateBound(index, br) => {\n+                if *index == self.binder_index {\n+                    match self.var_values.var_values[br.as_bound_var()].unpack() {\n+                        UnpackedKind::Lifetime(l) => ty::fold::shift_region(\n+                            self.tcx,\n+                            l,\n+                            self.binder_index.index() as u32,\n+                        ),\n+                        r => bug!(\"{:?} is a region but value is {:?}\", br, r),\n+                    }\n+                } else {\n+                    r\n+                }\n+            }\n             _ => r.super_fold_with(self),\n         }\n     }"}, {"sha": "f13210926a79b77361e21c83c2d5f3b814b7d88f", "filename": "src/librustc/infer/combine.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/45be1ac0fcb7ac2d4d8e52c6543e8384e7c1a6ea/src%2Flibrustc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45be1ac0fcb7ac2d4d8e52c6543e8384e7c1a6ea/src%2Flibrustc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcombine.rs?ref=45be1ac0fcb7ac2d4d8e52c6543e8384e7c1a6ea", "patch": "@@ -485,7 +485,6 @@ impl<'cx, 'gcx, 'tcx> TypeRelation<'cx, 'gcx, 'tcx> for Generalizer<'cx, 'gcx, '\n                 }\n             }\n \n-            ty::ReCanonical(..) |\n             ty::ReClosureBound(..) => {\n                 span_bug!(\n                     self.span,"}, {"sha": "1963d366e7a66d5d5daa5ba3111852663416bd6c", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45be1ac0fcb7ac2d4d8e52c6543e8384e7c1a6ea/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45be1ac0fcb7ac2d4d8e52c6543e8384e7c1a6ea/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=45be1ac0fcb7ac2d4d8e52c6543e8384e7c1a6ea", "patch": "@@ -152,7 +152,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             }\n \n             // We shouldn't encounter an error message with ReClosureBound.\n-            ty::ReCanonical(..) | ty::ReClosureBound(..) => {\n+            ty::ReClosureBound(..) => {\n                 bug!(\"encountered unexpected ReClosureBound: {:?}\", region,);\n             }\n         };"}, {"sha": "b53444992fa216972d4e32b36bbdabd7d36e27d4", "filename": "src/librustc/infer/freshen.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/45be1ac0fcb7ac2d4d8e52c6543e8384e7c1a6ea/src%2Flibrustc%2Finfer%2Ffreshen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45be1ac0fcb7ac2d4d8e52c6543e8384e7c1a6ea/src%2Flibrustc%2Finfer%2Ffreshen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ffreshen.rs?ref=45be1ac0fcb7ac2d4d8e52c6543e8384e7c1a6ea", "patch": "@@ -114,7 +114,6 @@ impl<'a, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for TypeFreshener<'a, 'gcx, 'tcx> {\n                 self.tcx().types.re_erased\n             }\n \n-            ty::ReCanonical(..) |\n             ty::ReClosureBound(..) => {\n                 bug!(\n                     \"encountered unexpected region: {:?}\","}, {"sha": "75f503d3bcfb4b331780bcd1e50cc6177f564c9b", "filename": "src/librustc/infer/lexical_region_resolve/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/45be1ac0fcb7ac2d4d8e52c6543e8384e7c1a6ea/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45be1ac0fcb7ac2d4d8e52c6543e8384e7c1a6ea/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs?ref=45be1ac0fcb7ac2d4d8e52c6543e8384e7c1a6ea", "patch": "@@ -260,9 +260,7 @@ impl<'cx, 'gcx, 'tcx> LexicalResolver<'cx, 'gcx, 'tcx> {\n     fn lub_concrete_regions(&self, a: Region<'tcx>, b: Region<'tcx>) -> Region<'tcx> {\n         let tcx = self.tcx();\n         match (a, b) {\n-            (&ty::ReCanonical(..), _)\n-            | (_, &ty::ReCanonical(..))\n-            | (&ty::ReClosureBound(..), _)\n+            (&ty::ReClosureBound(..), _)\n             | (_, &ty::ReClosureBound(..))\n             | (&ReLateBound(..), _)\n             | (_, &ReLateBound(..))"}, {"sha": "46b12d01829e7089835c2090715878efd39a79f9", "filename": "src/librustc/infer/region_constraints/mod.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/45be1ac0fcb7ac2d4d8e52c6543e8384e7c1a6ea/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45be1ac0fcb7ac2d4d8e52c6543e8384e7c1a6ea/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs?ref=45be1ac0fcb7ac2d4d8e52c6543e8384e7c1a6ea", "patch": "@@ -833,10 +833,6 @@ impl<'tcx> RegionConstraintCollector<'tcx> {\n             ty::RePlaceholder(placeholder) => placeholder.universe,\n             ty::ReClosureBound(vid) | ty::ReVar(vid) => self.var_universe(vid),\n             ty::ReLateBound(..) => bug!(\"universe(): encountered bound region {:?}\", region),\n-            ty::ReCanonical(..) => bug!(\n-                \"region_universe(): encountered canonical region {:?}\",\n-                region\n-            ),\n         }\n     }\n "}, {"sha": "0764f363250dd8be56b0b7d846ff529fa0b2caca", "filename": "src/librustc/ty/flags.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45be1ac0fcb7ac2d4d8e52c6543e8384e7c1a6ea/src%2Flibrustc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45be1ac0fcb7ac2d4d8e52c6543e8384e7c1a6ea/src%2Flibrustc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fflags.rs?ref=45be1ac0fcb7ac2d4d8e52c6543e8384e7c1a6ea", "patch": "@@ -116,7 +116,6 @@ impl FlagComputation {\n             }\n \n             &ty::Bound(bound_ty) => {\n-                self.add_flags(TypeFlags::HAS_CANONICAL_VARS);\n                 self.add_binder(bound_ty.index);\n             }\n \n@@ -127,7 +126,6 @@ impl FlagComputation {\n                     ty::FreshTy(_) |\n                     ty::FreshIntTy(_) |\n                     ty::FreshFloatTy(_) => {\n-                        self.add_flags(TypeFlags::HAS_CANONICAL_VARS);\n                     }\n \n                     ty::TyVar(_) |"}, {"sha": "31542582f949992669e9baba52e9909ad972407a", "filename": "src/librustc/ty/fold.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/45be1ac0fcb7ac2d4d8e52c6543e8384e7c1a6ea/src%2Flibrustc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45be1ac0fcb7ac2d4d8e52c6543e8384e7c1a6ea/src%2Flibrustc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffold.rs?ref=45be1ac0fcb7ac2d4d8e52c6543e8384e7c1a6ea", "patch": "@@ -672,10 +672,14 @@ impl<'a, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for Shifter<'a, 'gcx, 'tcx> {\n     }\n }\n \n-pub fn shift_region(region: ty::RegionKind, amount: u32) -> ty::RegionKind {\n+pub fn shift_region<'a, 'gcx, 'tcx>(\n+    tcx: TyCtxt<'a, 'gcx, 'tcx>,\n+    region: ty::Region<'tcx>,\n+    amount: u32\n+) -> ty::Region<'tcx> {\n     match region {\n-        ty::ReLateBound(debruijn, br) => {\n-            ty::ReLateBound(debruijn.shifted_in(amount), br)\n+        ty::ReLateBound(debruijn, br) if amount > 0 => {\n+            tcx.mk_region(ty::ReLateBound(debruijn.shifted_in(amount), *br))\n         }\n         _ => {\n             region\n@@ -685,8 +689,8 @@ pub fn shift_region(region: ty::RegionKind, amount: u32) -> ty::RegionKind {\n \n pub fn shift_vars<'a, 'gcx, 'tcx, T>(\n     tcx: TyCtxt<'a, 'gcx, 'tcx>,\n-    amount: u32,\n-    value: &T\n+    value: &T,\n+    amount: u32\n ) -> T where T: TypeFoldable<'tcx> {\n     debug!(\"shift_vars(value={:?}, amount={})\",\n            value, amount);"}, {"sha": "7d693cd5523df22e2f52e7c894ae1f3d7538167f", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/45be1ac0fcb7ac2d4d8e52c6543e8384e7c1a6ea/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45be1ac0fcb7ac2d4d8e52c6543e8384e7c1a6ea/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=45be1ac0fcb7ac2d4d8e52c6543e8384e7c1a6ea", "patch": "@@ -463,13 +463,9 @@ bitflags! {\n         // Currently we can't normalize projections w/ bound regions.\n         const HAS_NORMALIZABLE_PROJECTION = 1 << 12;\n \n-        // Set if this includes a \"canonical\" type or region var --\n-        // ought to be true only for the results of canonicalization.\n-        const HAS_CANONICAL_VARS = 1 << 13;\n-\n         /// Does this have any `ReLateBound` regions? Used to check\n         /// if a global bound is safe to evaluate.\n-        const HAS_RE_LATE_BOUND = 1 << 14;\n+        const HAS_RE_LATE_BOUND = 1 << 13;\n \n         const NEEDS_SUBST        = TypeFlags::HAS_PARAMS.bits |\n                                    TypeFlags::HAS_SELF.bits |\n@@ -490,7 +486,6 @@ bitflags! {\n                                   TypeFlags::HAS_TY_CLOSURE.bits |\n                                   TypeFlags::HAS_FREE_LOCAL_NAMES.bits |\n                                   TypeFlags::KEEP_IN_LOCAL_TCX.bits |\n-                                  TypeFlags::HAS_CANONICAL_VARS.bits |\n                                   TypeFlags::HAS_RE_LATE_BOUND.bits;\n     }\n }"}, {"sha": "f23bd01765aa5f9ff8d5d497c9205b37ae4488a5", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/45be1ac0fcb7ac2d4d8e52c6543e8384e7c1a6ea/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45be1ac0fcb7ac2d4d8e52c6543e8384e7c1a6ea/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=45be1ac0fcb7ac2d4d8e52c6543e8384e7c1a6ea", "patch": "@@ -77,6 +77,17 @@ impl BoundRegion {\n             _ => false,\n         }\n     }\n+\n+    /// When canonicalizing, we replace unbound inference variables and free\n+    /// regions with anonymous late bound regions. This method asserts that\n+    /// we have an anonymous late bound region, which hence may refer to\n+    /// a canonical variable.\n+    pub fn as_bound_var(&self) -> BoundVar {\n+        match *self {\n+            BoundRegion::BrAnon(var) => BoundVar::from_u32(var),\n+            _ => bug!(\"bound region is not anonymous\"),\n+        }\n+    }\n }\n \n /// N.B., If you change this, you'll probably want to change the corresponding\n@@ -758,19 +769,19 @@ impl<'tcx> PolyExistentialTraitRef<'tcx> {\n     }\n }\n \n-/// Binder is a binder for higher-ranked lifetimes. It is part of the\n+/// Binder is a binder for higher-ranked lifetimes or types. It is part of the\n /// compiler's representation for things like `for<'a> Fn(&'a isize)`\n /// (which would be represented by the type `PolyTraitRef ==\n /// Binder<TraitRef>`). Note that when we instantiate,\n-/// erase, or otherwise \"discharge\" these bound regions, we change the\n+/// erase, or otherwise \"discharge\" these bound vars, we change the\n /// type from `Binder<T>` to just `T` (see\n /// e.g. `liberate_late_bound_regions`).\n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, RustcEncodable, RustcDecodable)]\n pub struct Binder<T>(T);\n \n impl<T> Binder<T> {\n     /// Wraps `value` in a binder, asserting that `value` does not\n-    /// contain any bound regions that would be bound by the\n+    /// contain any bound vars that would be bound by the\n     /// binder. This is commonly used to 'inject' a value T into a\n     /// different binding level.\n     pub fn dummy<'tcx>(value: T) -> Binder<T>\n@@ -780,9 +791,8 @@ impl<T> Binder<T> {\n         Binder(value)\n     }\n \n-    /// Wraps `value` in a binder, binding late-bound regions (if any).\n-    pub fn bind<'tcx>(value: T) -> Binder<T>\n-    {\n+    /// Wraps `value` in a binder, binding higher-ranked vars (if any).\n+    pub fn bind<'tcx>(value: T) -> Binder<T> {\n         Binder(value)\n     }\n \n@@ -1169,9 +1179,6 @@ pub enum RegionKind {\n     /// `ClosureRegionRequirements` that are produced by MIR borrowck.\n     /// See `ClosureRegionRequirements` for more details.\n     ReClosureBound(RegionVid),\n-\n-    /// Canonicalized region, used only when preparing a trait query.\n-    ReCanonical(BoundVar),\n }\n \n impl<'tcx> serialize::UseSpecializedDecodable for Region<'tcx> {}\n@@ -1381,7 +1388,6 @@ impl RegionKind {\n             RegionKind::ReEmpty => false,\n             RegionKind::ReErased => false,\n             RegionKind::ReClosureBound(..) => false,\n-            RegionKind::ReCanonical(..) => false,\n         }\n     }\n \n@@ -1468,10 +1474,6 @@ impl RegionKind {\n             }\n             ty::ReErased => {\n             }\n-            ty::ReCanonical(..) => {\n-                flags = flags | TypeFlags::HAS_FREE_REGIONS;\n-                flags = flags | TypeFlags::HAS_CANONICAL_VARS;\n-            }\n             ty::ReClosureBound(..) => {\n                 flags = flags | TypeFlags::HAS_FREE_REGIONS;\n             }"}, {"sha": "498d704eb9e28229349e2f80929cf433783e5541", "filename": "src/librustc/ty/subst.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/45be1ac0fcb7ac2d4d8e52c6543e8384e7c1a6ea/src%2Flibrustc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45be1ac0fcb7ac2d4d8e52c6543e8384e7c1a6ea/src%2Flibrustc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsubst.rs?ref=45be1ac0fcb7ac2d4d8e52c6543e8384e7c1a6ea", "patch": "@@ -475,8 +475,8 @@ impl<'a, 'gcx, 'tcx> SubstFolder<'a, 'gcx, 'tcx> {\n     }\n \n     /// It is sometimes necessary to adjust the debruijn indices during substitution. This occurs\n-    /// when we are substituting a type with escaping regions into a context where we have passed\n-    /// through region binders. That's quite a mouthful. Let's see an example:\n+    /// when we are substituting a type with escaping bound vars into a context where we have\n+    /// passed through binders. That's quite a mouthful. Let's see an example:\n     ///\n     /// ```\n     /// type Func<A> = fn(A);\n@@ -524,7 +524,7 @@ impl<'a, 'gcx, 'tcx> SubstFolder<'a, 'gcx, 'tcx> {\n             return ty;\n         }\n \n-        let result = ty::fold::shift_vars(self.tcx(), self.binders_passed, &ty);\n+        let result = ty::fold::shift_vars(self.tcx(), &ty, self.binders_passed);\n         debug!(\"shift_vars: shifted result = {:?}\", result);\n \n         result\n@@ -534,7 +534,7 @@ impl<'a, 'gcx, 'tcx> SubstFolder<'a, 'gcx, 'tcx> {\n         if self.binders_passed == 0 || !region.has_escaping_bound_vars() {\n             return region;\n         }\n-        self.tcx().mk_region(ty::fold::shift_region(*region, self.binders_passed))\n+        ty::fold::shift_region(self.tcx, region, self.binders_passed)\n     }\n }\n \n@@ -556,15 +556,20 @@ impl CanonicalUserSubsts<'tcx> {\n         self.value.substs.iter().zip(BoundVar::new(0)..).all(|(kind, cvar)| {\n             match kind.unpack() {\n                 UnpackedKind::Type(ty) => match ty.sty {\n-                    ty::Bound(ref b) => {\n+                    ty::Bound(b) => {\n+                        // We only allow a `ty::INNERMOST` index in substitutions.\n                         assert_eq!(b.index, ty::INNERMOST);\n                         cvar == b.var\n                     }\n                     _ => false,\n                 },\n \n                 UnpackedKind::Lifetime(r) => match r {\n-                    ty::ReCanonical(cvar1) => cvar == *cvar1,\n+                    ty::ReLateBound(index, br) => {\n+                        // We only allow a `ty::INNERMOST` index in substitutions.\n+                        assert_eq!(*index, ty::INNERMOST);\n+                        cvar == br.as_bound_var()\n+                    }\n                     _ => false,\n                 },\n             }"}, {"sha": "5ec4f55b142ebbfcac4c74ae4f0eb63de550c5dd", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/45be1ac0fcb7ac2d4d8e52c6543e8384e7c1a6ea/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45be1ac0fcb7ac2d4d8e52c6543e8384e7c1a6ea/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=45be1ac0fcb7ac2d4d8e52c6543e8384e7c1a6ea", "patch": "@@ -790,9 +790,6 @@ define_print! {\n                 ty::ReEarlyBound(ref data) => {\n                     write!(f, \"{}\", data.name)\n                 }\n-                ty::ReCanonical(_) => {\n-                    write!(f, \"'_\")\n-                }\n                 ty::ReLateBound(_, br) |\n                 ty::ReFree(ty::FreeRegion { bound_region: br, .. }) |\n                 ty::RePlaceholder(ty::Placeholder { name: br, .. }) => {\n@@ -860,10 +857,6 @@ define_print! {\n                     write!(f, \"{:?}\", vid)\n                 }\n \n-                ty::ReCanonical(c) => {\n-                    write!(f, \"'?{}\", c.index())\n-                }\n-\n                 ty::RePlaceholder(placeholder) => {\n                     write!(f, \"RePlaceholder({:?})\", placeholder)\n                 }"}, {"sha": "a802729e3fbdbfe24317565dc98ffc9d35e51d80", "filename": "src/librustc_borrowck/borrowck/check_loans.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/45be1ac0fcb7ac2d4d8e52c6543e8384e7c1a6ea/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45be1ac0fcb7ac2d4d8e52c6543e8384e7c1a6ea/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs?ref=45be1ac0fcb7ac2d4d8e52c6543e8384e7c1a6ea", "patch": "@@ -426,7 +426,6 @@ impl<'a, 'tcx> CheckLoanCtxt<'a, 'tcx> {\n \n             // These cannot exist in borrowck\n             RegionKind::ReVar(..) |\n-            RegionKind::ReCanonical(..) |\n             RegionKind::RePlaceholder(..) |\n             RegionKind::ReClosureBound(..) |\n             RegionKind::ReErased => span_bug!(borrow_span,"}, {"sha": "78a31ed668fcae090b32f31f3fee1e1bd71fbeea", "filename": "src/librustc_borrowck/borrowck/gather_loans/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/45be1ac0fcb7ac2d4d8e52c6543e8384e7c1a6ea/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45be1ac0fcb7ac2d4d8e52c6543e8384e7c1a6ea/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs?ref=45be1ac0fcb7ac2d4d8e52c6543e8384e7c1a6ea", "patch": "@@ -363,7 +363,6 @@ impl<'a, 'tcx> GatherLoanCtxt<'a, 'tcx> {\n \n                     ty::ReStatic => self.item_ub,\n \n-                    ty::ReCanonical(_) |\n                     ty::ReEmpty |\n                     ty::ReClosureBound(..) |\n                     ty::ReLateBound(..) |"}, {"sha": "99372a511a9de5e2c2307b83255c68c7d38bff93", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/region_name.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/45be1ac0fcb7ac2d4d8e52c6543e8384e7c1a6ea/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45be1ac0fcb7ac2d4d8e52c6543e8384e7c1a6ea/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs?ref=45be1ac0fcb7ac2d4d8e52c6543e8384e7c1a6ea", "patch": "@@ -277,8 +277,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             | ty::RePlaceholder(..)\n             | ty::ReEmpty\n             | ty::ReErased\n-            | ty::ReClosureBound(..)\n-            | ty::ReCanonical(..) => None,\n+            | ty::ReClosureBound(..) => None,\n         }\n     }\n "}, {"sha": "46f2c0c76a0c7b457cb19b140428ed69b92b1cb1", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45be1ac0fcb7ac2d4d8e52c6543e8384e7c1a6ea/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45be1ac0fcb7ac2d4d8e52c6543e8384e7c1a6ea/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=45be1ac0fcb7ac2d4d8e52c6543e8384e7c1a6ea", "patch": "@@ -1748,7 +1748,7 @@ impl<'a, 'gcx, 'tcx> Bounds<'tcx> {\n             self.region_bounds.iter().map(|&(region_bound, span)| {\n                 // account for the binder being introduced below; no need to shift `param_ty`\n                 // because, at present at least, it can only refer to early-bound regions\n-                let region_bound = tcx.mk_region(ty::fold::shift_region(*region_bound, 1));\n+                let region_bound = ty::fold::shift_region(tcx, region_bound, 1);\n                 let outlives = ty::OutlivesPredicate(param_ty, region_bound);\n                 (ty::Binder::dummy(outlives).to_predicate(), span)\n             }).chain("}, {"sha": "d748d93d8988e63470b142ac6381cf7f01f9285b", "filename": "src/librustc_typeck/outlives/utils.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/45be1ac0fcb7ac2d4d8e52c6543e8384e7c1a6ea/src%2Flibrustc_typeck%2Foutlives%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45be1ac0fcb7ac2d4d8e52c6543e8384e7c1a6ea/src%2Flibrustc_typeck%2Foutlives%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Foutlives%2Futils.rs?ref=45be1ac0fcb7ac2d4d8e52c6543e8384e7c1a6ea", "patch": "@@ -167,7 +167,6 @@ fn is_free_region<'tcx>(tcx: TyCtxt<'_, 'tcx, 'tcx>, region: Region<'_>) -> bool\n         RegionKind::ReEmpty\n         | RegionKind::ReErased\n         | RegionKind::ReClosureBound(..)\n-        | RegionKind::ReCanonical(..)\n         | RegionKind::ReScope(..)\n         | RegionKind::ReVar(..)\n         | RegionKind::RePlaceholder(..)"}, {"sha": "47d34c909961e16e53a4a0d79e12a40b4a2e5aac", "filename": "src/librustc_typeck/variance/constraints.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/45be1ac0fcb7ac2d4d8e52c6543e8384e7c1a6ea/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45be1ac0fcb7ac2d4d8e52c6543e8384e7c1a6ea/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs?ref=45be1ac0fcb7ac2d4d8e52c6543e8384e7c1a6ea", "patch": "@@ -427,7 +427,6 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n                 // way early-bound regions do, so we skip them here.\n             }\n \n-            ty::ReCanonical(_) |\n             ty::ReFree(..) |\n             ty::ReClosureBound(..) |\n             ty::ReScope(..) |"}, {"sha": "e71b3ccb01dbe19b45c69b51a2eabb9f46aae7b1", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/45be1ac0fcb7ac2d4d8e52c6543e8384e7c1a6ea/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45be1ac0fcb7ac2d4d8e52c6543e8384e7c1a6ea/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=45be1ac0fcb7ac2d4d8e52c6543e8384e7c1a6ea", "patch": "@@ -1260,7 +1260,6 @@ impl Clean<Option<Lifetime>> for ty::RegionKind {\n             ty::RePlaceholder(..) |\n             ty::ReEmpty |\n             ty::ReClosureBound(_) |\n-            ty::ReCanonical(_) |\n             ty::ReErased => None\n         }\n     }"}]}