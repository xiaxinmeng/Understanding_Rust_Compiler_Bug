{"sha": "179ce398ea9e09920ace2264144422bb7e9efc02", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3OWNlMzk4ZWE5ZTA5OTIwYWNlMjI2NDE0NDQyMmJiN2U5ZWZjMDI=", "commit": {"author": {"name": "Philipp Br\u00fcschweiler", "email": "blei42@gmail.com", "date": "2013-06-20T09:40:17Z"}, "committer": {"name": "Philipp Br\u00fcschweiler", "email": "blei42@gmail.com", "date": "2013-06-23T10:49:16Z"}, "message": "Fix and reenable the reflect-visit-type test", "tree": {"sha": "88d89ab134724ec347c25a5a35c51851b0414878", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/88d89ab134724ec347c25a5a35c51851b0414878"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/179ce398ea9e09920ace2264144422bb7e9efc02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/179ce398ea9e09920ace2264144422bb7e9efc02", "html_url": "https://github.com/rust-lang/rust/commit/179ce398ea9e09920ace2264144422bb7e9efc02", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/179ce398ea9e09920ace2264144422bb7e9efc02/comments", "author": {"login": "Blei", "id": 52674, "node_id": "MDQ6VXNlcjUyNjc0", "avatar_url": "https://avatars.githubusercontent.com/u/52674?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Blei", "html_url": "https://github.com/Blei", "followers_url": "https://api.github.com/users/Blei/followers", "following_url": "https://api.github.com/users/Blei/following{/other_user}", "gists_url": "https://api.github.com/users/Blei/gists{/gist_id}", "starred_url": "https://api.github.com/users/Blei/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Blei/subscriptions", "organizations_url": "https://api.github.com/users/Blei/orgs", "repos_url": "https://api.github.com/users/Blei/repos", "events_url": "https://api.github.com/users/Blei/events{/privacy}", "received_events_url": "https://api.github.com/users/Blei/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Blei", "id": 52674, "node_id": "MDQ6VXNlcjUyNjc0", "avatar_url": "https://avatars.githubusercontent.com/u/52674?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Blei", "html_url": "https://github.com/Blei", "followers_url": "https://api.github.com/users/Blei/followers", "following_url": "https://api.github.com/users/Blei/following{/other_user}", "gists_url": "https://api.github.com/users/Blei/gists{/gist_id}", "starred_url": "https://api.github.com/users/Blei/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Blei/subscriptions", "organizations_url": "https://api.github.com/users/Blei/orgs", "repos_url": "https://api.github.com/users/Blei/repos", "events_url": "https://api.github.com/users/Blei/events{/privacy}", "received_events_url": "https://api.github.com/users/Blei/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "469f394b251feebfb16090303da59206ba25acc6", "url": "https://api.github.com/repos/rust-lang/rust/commits/469f394b251feebfb16090303da59206ba25acc6", "html_url": "https://github.com/rust-lang/rust/commit/469f394b251feebfb16090303da59206ba25acc6"}], "stats": {"total": 181, "additions": 96, "deletions": 85}, "files": [{"sha": "3b51abbd489b4e0a27e8221aa69dd2d9b937e976", "filename": "src/test/run-pass/reflect-visit-type.rs", "status": "modified", "additions": 96, "deletions": 85, "changes": 181, "blob_url": "https://github.com/rust-lang/rust/blob/179ce398ea9e09920ace2264144422bb7e9efc02/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/179ce398ea9e09920ace2264144422bb7e9efc02/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs?ref=179ce398ea9e09920ace2264144422bb7e9efc02", "patch": "@@ -8,151 +8,162 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// xfail-test\n-use intrinsic::{TyDesc, get_tydesc, visit_tydesc, TyVisitor};\n-struct my_visitor(@mut { types: ~[str] });\n+use std::unstable::intrinsics::{TyDesc, get_tydesc, visit_tydesc, TyVisitor, Opaque};\n \n-impl TyVisitor for my_visitor {\n-    fn visit_bot() -> bool {\n-        self.types += ~[\"bot\"];\n+struct MyVisitor {\n+    types: @mut ~[~str],\n+}\n+\n+impl TyVisitor for MyVisitor {\n+    fn visit_bot(&self) -> bool {\n+        self.types.push(~\"bot\");\n         error!(\"visited bot type\");\n         true\n     }\n-    fn visit_nil() -> bool {\n-        self.types += ~[\"nil\"];\n+    fn visit_nil(&self) -> bool {\n+        self.types.push(~\"nil\");\n         error!(\"visited nil type\");\n         true\n     }\n-    fn visit_bool() -> bool {\n-        self.types += ~[\"bool\"];\n+    fn visit_bool(&self) -> bool {\n+        self.types.push(~\"bool\");\n         error!(\"visited bool type\");\n         true\n     }\n-    fn visit_int() -> bool {\n-        self.types += ~[\"int\"];\n+    fn visit_int(&self) -> bool {\n+        self.types.push(~\"int\");\n         error!(\"visited int type\");\n         true\n     }\n-    fn visit_i8() -> bool {\n-        self.types += ~[\"i8\"];\n+    fn visit_i8(&self) -> bool {\n+        self.types.push(~\"i8\");\n         error!(\"visited i8 type\");\n         true\n     }\n-    fn visit_i16() -> bool {\n-        self.types += ~[\"i16\"];\n+    fn visit_i16(&self) -> bool {\n+        self.types.push(~\"i16\");\n         error!(\"visited i16 type\");\n         true\n     }\n-    fn visit_i32() -> bool { true }\n-    fn visit_i64() -> bool { true }\n-\n-    fn visit_uint() -> bool { true }\n-    fn visit_u8() -> bool { true }\n-    fn visit_u16() -> bool { true }\n-    fn visit_u32() -> bool { true }\n-    fn visit_u64() -> bool { true }\n-\n-    fn visit_float() -> bool { true }\n-    fn visit_f32() -> bool { true }\n-    fn visit_f64() -> bool { true }\n-\n-    fn visit_char() -> bool { true }\n-    fn visit_str() -> bool { true }\n-\n-    fn visit_estr_box() -> bool { true }\n-    fn visit_estr_uniq() -> bool { true }\n-    fn visit_estr_slice() -> bool { true }\n-    fn visit_estr_fixed(_sz: uint, _sz: uint,\n+    fn visit_i32(&self) -> bool { true }\n+    fn visit_i64(&self) -> bool { true }\n+\n+    fn visit_uint(&self) -> bool { true }\n+    fn visit_u8(&self) -> bool { true }\n+    fn visit_u16(&self) -> bool { true }\n+    fn visit_u32(&self) -> bool { true }\n+    fn visit_u64(&self) -> bool { true }\n+\n+    fn visit_float(&self) -> bool { true }\n+    fn visit_f32(&self) -> bool { true }\n+    fn visit_f64(&self) -> bool { true }\n+\n+    fn visit_char(&self) -> bool { true }\n+    fn visit_str(&self) -> bool { true }\n+\n+    fn visit_estr_box(&self) -> bool { true }\n+    fn visit_estr_uniq(&self) -> bool { true }\n+    fn visit_estr_slice(&self) -> bool { true }\n+    fn visit_estr_fixed(&self,\n+                        _sz: uint, _sz: uint,\n                         _align: uint) -> bool { true }\n \n-    fn visit_box(_mtbl: uint, _inner: *TyDesc) -> bool { true }\n-    fn visit_uniq(_mtbl: uint, _inner: *TyDesc) -> bool { true }\n-    fn visit_ptr(_mtbl: uint, _inner: *TyDesc) -> bool { true }\n-    fn visit_rptr(_mtbl: uint, _inner: *TyDesc) -> bool { true }\n-\n-    fn visit_vec(_mtbl: uint, inner: *TyDesc) -> bool {\n-        self.types += ~[\"[\"];\n-        visit_tydesc(inner, my_visitor(*self) as TyVisitor);\n-        self.types += ~[\"]\"];\n+    fn visit_box(&self, _mtbl: uint, _inner: *TyDesc) -> bool { true }\n+    fn visit_uniq(&self, _mtbl: uint, _inner: *TyDesc) -> bool { true }\n+    fn visit_ptr(&self, _mtbl: uint, _inner: *TyDesc) -> bool { true }\n+    fn visit_rptr(&self, _mtbl: uint, _inner: *TyDesc) -> bool { true }\n+\n+    fn visit_vec(&self, _mtbl: uint, _inner: *TyDesc) -> bool { true }\n+    fn visit_unboxed_vec(&self, _mtbl: uint, _inner: *TyDesc) -> bool { true }\n+    fn visit_evec_box(&self, _mtbl: uint, _inner: *TyDesc) -> bool { true }\n+    fn visit_evec_uniq(&self, _mtbl: uint, inner: *TyDesc) -> bool {\n+        self.types.push(~\"[\");\n+        unsafe {\n+            visit_tydesc(inner, (@*self) as @TyVisitor);\n+        }\n+        self.types.push(~\"]\");\n         true\n     }\n-    fn visit_unboxed_vec(_mtbl: uint, _inner: *TyDesc) -> bool { true }\n-    fn visit_evec_box(_mtbl: uint, _inner: *TyDesc) -> bool { true }\n-    fn visit_evec_uniq(_mtbl: uint, _inner: *TyDesc) -> bool { true }\n-    fn visit_evec_slice(_mtbl: uint, _inner: *TyDesc) -> bool { true }\n-    fn visit_evec_fixed(_n: uint, _sz: uint, _align: uint,\n+    fn visit_evec_slice(&self, _mtbl: uint, _inner: *TyDesc) -> bool { true }\n+    fn visit_evec_fixed(&self, _n: uint, _sz: uint, _align: uint,\n                         _mtbl: uint, _inner: *TyDesc) -> bool { true }\n \n-    fn visit_enter_rec(_n_fields: uint,\n+    fn visit_enter_rec(&self, _n_fields: uint,\n                        _sz: uint, _align: uint) -> bool { true }\n-    fn visit_rec_field(_i: uint, _name: &str,\n+    fn visit_rec_field(&self, _i: uint, _name: &str,\n                        _mtbl: uint, _inner: *TyDesc) -> bool { true }\n-    fn visit_leave_rec(_n_fields: uint,\n+    fn visit_leave_rec(&self, _n_fields: uint,\n                        _sz: uint, _align: uint) -> bool { true }\n \n-    fn visit_enter_class(_n_fields: uint,\n+    fn visit_enter_class(&self, _n_fields: uint,\n                          _sz: uint, _align: uint) -> bool { true }\n-    fn visit_class_field(_i: uint, _name: &str,\n+    fn visit_class_field(&self, _i: uint, _name: &str,\n                          _mtbl: uint, _inner: *TyDesc) -> bool { true }\n-    fn visit_leave_class(_n_fields: uint,\n+    fn visit_leave_class(&self, _n_fields: uint,\n                          _sz: uint, _align: uint) -> bool { true }\n \n-    fn visit_enter_tup(_n_fields: uint,\n+    fn visit_enter_tup(&self, _n_fields: uint,\n                        _sz: uint, _align: uint) -> bool { true }\n-    fn visit_tup_field(_i: uint, _inner: *TyDesc) -> bool { true }\n-    fn visit_leave_tup(_n_fields: uint,\n+    fn visit_tup_field(&self, _i: uint, _inner: *TyDesc) -> bool { true }\n+    fn visit_leave_tup(&self, _n_fields: uint,\n                        _sz: uint, _align: uint) -> bool { true }\n \n-    fn visit_enter_enum(_n_variants: uint,\n+    fn visit_enter_enum(&self, _n_variants: uint,\n+                        _get_disr: extern unsafe fn(ptr: *Opaque) -> int,\n                         _sz: uint, _align: uint) -> bool { true }\n-    fn visit_enter_enum_variant(_variant: uint,\n+    fn visit_enter_enum_variant(&self,\n+                                _variant: uint,\n                                 _disr_val: int,\n                                 _n_fields: uint,\n                                 _name: &str) -> bool { true }\n-    fn visit_enum_variant_field(_i: uint, _inner: *TyDesc) -> bool { true }\n-    fn visit_leave_enum_variant(_variant: uint,\n+    fn visit_enum_variant_field(&self, _i: uint, _offset: uint, _inner: *TyDesc) -> bool { true }\n+    fn visit_leave_enum_variant(&self,\n+                                _variant: uint,\n                                 _disr_val: int,\n                                 _n_fields: uint,\n                                 _name: &str) -> bool { true }\n-    fn visit_leave_enum(_n_variants: uint,\n+    fn visit_leave_enum(&self,\n+                        _n_variants: uint,\n+                        _get_disr: extern unsafe fn(ptr: *Opaque) -> int,\n                         _sz: uint, _align: uint) -> bool { true }\n \n-    fn visit_enter_fn(_purity: uint, _proto: uint,\n+    fn visit_enter_fn(&self, _purity: uint, _proto: uint,\n                       _n_inputs: uint, _retstyle: uint) -> bool { true }\n-    fn visit_fn_input(_i: uint, _mode: uint, _inner: *TyDesc) -> bool { true }\n-    fn visit_fn_output(_retstyle: uint, _inner: *TyDesc) -> bool { true }\n-    fn visit_leave_fn(_purity: uint, _proto: uint,\n+    fn visit_fn_input(&self, _i: uint, _mode: uint, _inner: *TyDesc) -> bool { true }\n+    fn visit_fn_output(&self, _retstyle: uint, _inner: *TyDesc) -> bool { true }\n+    fn visit_leave_fn(&self, _purity: uint, _proto: uint,\n                       _n_inputs: uint, _retstyle: uint) -> bool { true }\n \n \n-    fn visit_trait() -> bool { true }\n-    fn visit_var() -> bool { true }\n-    fn visit_var_integral() -> bool { true }\n-    fn visit_param(_i: uint) -> bool { true }\n-    fn visit_self() -> bool { true }\n-    fn visit_type() -> bool { true }\n-    fn visit_opaque_box() -> bool { true }\n-    fn visit_constr(_inner: *TyDesc) -> bool { true }\n-    fn visit_closure_ptr(_ck: uint) -> bool { true }\n+    fn visit_trait(&self) -> bool { true }\n+    fn visit_var(&self) -> bool { true }\n+    fn visit_var_integral(&self) -> bool { true }\n+    fn visit_param(&self, _i: uint) -> bool { true }\n+    fn visit_self(&self) -> bool { true }\n+    fn visit_type(&self) -> bool { true }\n+    fn visit_opaque_box(&self) -> bool { true }\n+    fn visit_constr(&self, _inner: *TyDesc) -> bool { true }\n+    fn visit_closure_ptr(&self, _ck: uint) -> bool { true }\n }\n \n-fn visit_ty<T>(v: TyVisitor) {\n-    visit_tydesc(get_tydesc::<T>(), v);\n+fn visit_ty<T>(v: @TyVisitor) {\n+    unsafe {\n+        visit_tydesc(get_tydesc::<T>(), v);\n+    }\n }\n \n pub fn main() {\n-    let v = my_visitor(@mut {types: ~[]});\n-    let vv = v as TyVisitor;\n+    let v = @MyVisitor {types: @mut ~[]};\n+    let vv = v as @TyVisitor;\n \n     visit_ty::<bool>(vv);\n     visit_ty::<int>(vv);\n     visit_ty::<i8>(vv);\n     visit_ty::<i16>(vv);\n     visit_ty::<~[int]>(vv);\n \n-    for (v.types.clone()).each {|s|\n-        io::println(fmt!(\"type: %s\", s));\n+    for v.types.each |&s| {\n+        println(fmt!(\"type: %s\", s));\n     }\n-    assert!(v.types == [\"bool\", \"int\", \"i8\", \"i16\",\n-                       \"[\", \"int\", \"]\"]);\n+    assert_eq!((*v.types).clone(), ~[~\"bool\", ~\"int\", ~\"i8\", ~\"i16\", ~\"[\", ~\"int\", ~\"]\"]);\n }"}]}