{"sha": "a5dd04078e6be1e3a874a2c9017d824f5a067315", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1ZGQwNDA3OGU2YmUxZTNhODc0YTJjOTAxN2Q4MjRmNWEwNjczMTU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-11T10:29:53Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-11T13:01:57Z"}, "message": "reshuffle nones", "tree": {"sha": "eaf0e0871c283b5bfdd6524767909c9e702bd3b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eaf0e0871c283b5bfdd6524767909c9e702bd3b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5dd04078e6be1e3a874a2c9017d824f5a067315", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5dd04078e6be1e3a874a2c9017d824f5a067315", "html_url": "https://github.com/rust-lang/rust/commit/a5dd04078e6be1e3a874a2c9017d824f5a067315", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5dd04078e6be1e3a874a2c9017d824f5a067315/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b143779653ac6dfe094f7cf0c9967e1c0a81318", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b143779653ac6dfe094f7cf0c9967e1c0a81318", "html_url": "https://github.com/rust-lang/rust/commit/7b143779653ac6dfe094f7cf0c9967e1c0a81318"}], "stats": {"total": 31, "additions": 10, "deletions": 21}, "files": [{"sha": "b2a53e9aa5f5bbcb70649acad07d4d6e451d38ec", "filename": "crates/ra_ide_api/src/navigation_target.rs", "status": "modified", "additions": 10, "deletions": 21, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/a5dd04078e6be1e3a874a2c9017d824f5a067315/crates%2Fra_ide_api%2Fsrc%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5dd04078e6be1e3a874a2c9017d824f5a067315/crates%2Fra_ide_api%2Fsrc%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fnavigation_target.rs?ref=a5dd04078e6be1e3a874a2c9017d824f5a067315", "patch": "@@ -24,34 +24,22 @@ impl NavigationTarget {\n \n     // TODO once Def::Item is gone, this should be able to always return a NavigationTarget\n     pub(crate) fn from_def(db: &RootDatabase, def: Def) -> Cancelable<Option<NavigationTarget>> {\n-        Ok(match def {\n+        let res = match def {\n             Def::Struct(s) => {\n                 let (file_id, node) = s.source(db)?;\n-                Some(NavigationTarget::from_named(\n-                    file_id.original_file(db),\n-                    &*node,\n-                ))\n+                NavigationTarget::from_named(file_id.original_file(db), &*node)\n             }\n             Def::Enum(e) => {\n                 let (file_id, node) = e.source(db)?;\n-                Some(NavigationTarget::from_named(\n-                    file_id.original_file(db),\n-                    &*node,\n-                ))\n+                NavigationTarget::from_named(file_id.original_file(db), &*node)\n             }\n             Def::EnumVariant(ev) => {\n                 let (file_id, node) = ev.source(db)?;\n-                Some(NavigationTarget::from_named(\n-                    file_id.original_file(db),\n-                    &*node,\n-                ))\n+                NavigationTarget::from_named(file_id.original_file(db), &*node)\n             }\n             Def::Function(f) => {\n                 let (file_id, node) = f.source(db)?;\n-                Some(NavigationTarget::from_named(\n-                    file_id.original_file(db),\n-                    &*node,\n-                ))\n+                NavigationTarget::from_named(file_id.original_file(db), &*node)\n             }\n             Def::Module(m) => {\n                 let (file_id, source) = m.definition_source(db)?;\n@@ -61,15 +49,16 @@ impl NavigationTarget {\n                     .unwrap_or_else(|| SmolStr::new(\"\"));\n                 match source {\n                     ModuleSource::SourceFile(node) => {\n-                        Some(NavigationTarget::from_syntax(file_id, name, node.syntax()))\n+                        NavigationTarget::from_syntax(file_id, name, node.syntax())\n                     }\n                     ModuleSource::Module(node) => {\n-                        Some(NavigationTarget::from_syntax(file_id, name, node.syntax()))\n+                        NavigationTarget::from_syntax(file_id, name, node.syntax())\n                     }\n                 }\n             }\n-            Def::Item => None,\n-        })\n+            Def::Item => return Ok(None),\n+        };\n+        Ok(Some(res))\n     }\n \n     fn from_named(file_id: FileId, node: &impl ast::NameOwner) -> NavigationTarget {"}]}