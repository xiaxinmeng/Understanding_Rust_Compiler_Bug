{"sha": "8fa707ab417b7c6b2cc9a57435cbc48b53c69f7e", "node_id": "C_kwDOAAsO6NoAKDhmYTcwN2FiNDE3YjdjNmIyY2M5YTU3NDM1Y2JjNDhiNTNjNjlmN2U", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-08-03T22:43:17Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-08-12T15:47:13Z"}, "message": "rustc_target: Update some old naming around self contained linking\n\nThe \"fallback\" naming pre-dates introduction of `-Clink-self-contained`", "tree": {"sha": "b61af1ed758dc34bc91fbd3a7a9271083d2c62b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b61af1ed758dc34bc91fbd3a7a9271083d2c62b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8fa707ab417b7c6b2cc9a57435cbc48b53c69f7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8fa707ab417b7c6b2cc9a57435cbc48b53c69f7e", "html_url": "https://github.com/rust-lang/rust/commit/8fa707ab417b7c6b2cc9a57435cbc48b53c69f7e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8fa707ab417b7c6b2cc9a57435cbc48b53c69f7e/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "569788e47ee3595c9c6f0e332844d982b3e991c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/569788e47ee3595c9c6f0e332844d982b3e991c2", "html_url": "https://github.com/rust-lang/rust/commit/569788e47ee3595c9c6f0e332844d982b3e991c2"}], "stats": {"total": 176, "additions": 90, "deletions": 86}, "files": [{"sha": "7f6947e3c79d8c9b33554f82c0de64ceb5df59d1", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 26, "deletions": 24, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/8fa707ab417b7c6b2cc9a57435cbc48b53c69f7e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa707ab417b7c6b2cc9a57435cbc48b53c69f7e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=8fa707ab417b7c6b2cc9a57435cbc48b53c69f7e", "patch": "@@ -20,7 +20,7 @@ use rustc_session::utils::NativeLibKind;\n use rustc_session::{filesearch, Session};\n use rustc_span::symbol::Symbol;\n use rustc_span::DebuggerVisualizerFile;\n-use rustc_target::spec::crt_objects::{CrtObjects, CrtObjectsFallback};\n+use rustc_target::spec::crt_objects::{CrtObjects, LinkSelfContainedDefault};\n use rustc_target::spec::{LinkOutputKind, LinkerFlavor, LldFlavor, SplitDebuginfo};\n use rustc_target::spec::{PanicStrategy, RelocModel, RelroLevel, SanitizerSet, Target};\n \n@@ -764,15 +764,15 @@ fn link_natively<'a>(\n                 \"Linker does not support -static-pie command line option. Retrying with -static instead.\"\n             );\n             // Mirror `add_(pre,post)_link_objects` to replace CRT objects.\n-            let self_contained = crt_objects_fallback(sess, crate_type);\n+            let self_contained = self_contained(sess, crate_type);\n             let opts = &sess.target;\n             let pre_objects = if self_contained {\n-                &opts.pre_link_objects_fallback\n+                &opts.pre_link_objects_self_contained\n             } else {\n                 &opts.pre_link_objects\n             };\n             let post_objects = if self_contained {\n-                &opts.post_link_objects_fallback\n+                &opts.post_link_objects_self_contained\n             } else {\n                 &opts.post_link_objects\n             };\n@@ -1556,26 +1556,26 @@ fn detect_self_contained_mingw(sess: &Session) -> bool {\n     true\n }\n \n-/// Whether we link to our own CRT objects instead of relying on gcc to pull them.\n+/// Various toolchain components used during linking are used from rustc distribution\n+/// instead of being found somewhere on the host system.\n /// We only provide such support for a very limited number of targets.\n-fn crt_objects_fallback(sess: &Session, crate_type: CrateType) -> bool {\n+fn self_contained(sess: &Session, crate_type: CrateType) -> bool {\n     if let Some(self_contained) = sess.opts.cg.link_self_contained {\n         return self_contained;\n     }\n \n-    match sess.target.crt_objects_fallback {\n+    match sess.target.link_self_contained {\n+        LinkSelfContainedDefault::False => false,\n+        LinkSelfContainedDefault::True => true,\n         // FIXME: Find a better heuristic for \"native musl toolchain is available\",\n         // based on host and linker path, for example.\n         // (https://github.com/rust-lang/rust/pull/71769#issuecomment-626330237).\n-        Some(CrtObjectsFallback::Musl) => sess.crt_static(Some(crate_type)),\n-        Some(CrtObjectsFallback::Mingw) => {\n+        LinkSelfContainedDefault::Musl => sess.crt_static(Some(crate_type)),\n+        LinkSelfContainedDefault::Mingw => {\n             sess.host == sess.target\n                 && sess.target.vendor != \"uwp\"\n                 && detect_self_contained_mingw(&sess)\n         }\n-        // FIXME: Figure out cases in which WASM needs to link with a native toolchain.\n-        Some(CrtObjectsFallback::Wasm) => true,\n-        None => false,\n     }\n }\n \n@@ -1592,7 +1592,7 @@ fn add_pre_link_objects(\n     let opts = &sess.target;\n     let empty = Default::default();\n     let objects = if self_contained {\n-        &opts.pre_link_objects_fallback\n+        &opts.pre_link_objects_self_contained\n     } else if !(sess.target.os == \"fuchsia\" && flavor == LinkerFlavor::Gcc) {\n         &opts.pre_link_objects\n     } else {\n@@ -1610,9 +1610,11 @@ fn add_post_link_objects(\n     link_output_kind: LinkOutputKind,\n     self_contained: bool,\n ) {\n-    let opts = &sess.target;\n-    let objects =\n-        if self_contained { &opts.post_link_objects_fallback } else { &opts.post_link_objects };\n+    let objects = if self_contained {\n+        &sess.target.post_link_objects_self_contained\n+    } else {\n+        &sess.target.post_link_objects\n+    };\n     for obj in objects.get(&link_output_kind).iter().copied().flatten() {\n         cmd.add_object(&get_object_file_path(sess, obj, self_contained));\n     }\n@@ -1891,12 +1893,12 @@ fn linker_with_args<'a>(\n     out_filename: &Path,\n     codegen_results: &CodegenResults,\n ) -> Result<Command, ErrorGuaranteed> {\n-    let crt_objects_fallback = crt_objects_fallback(sess, crate_type);\n+    let self_contained = self_contained(sess, crate_type);\n     let cmd = &mut *super::linker::get_linker(\n         sess,\n         path,\n         flavor,\n-        crt_objects_fallback,\n+        self_contained,\n         &codegen_results.crate_info.target_cpu,\n     );\n     let link_output_kind = link_output_kind(sess, crate_type);\n@@ -1923,7 +1925,7 @@ fn linker_with_args<'a>(\n     // ------------ Object code and libraries, order-dependent ------------\n \n     // Pre-link CRT objects.\n-    add_pre_link_objects(cmd, sess, flavor, link_output_kind, crt_objects_fallback);\n+    add_pre_link_objects(cmd, sess, flavor, link_output_kind, self_contained);\n \n     add_linked_symbol_object(\n         cmd,\n@@ -2033,7 +2035,7 @@ fn linker_with_args<'a>(\n         cmd,\n         sess,\n         link_output_kind,\n-        crt_objects_fallback,\n+        self_contained,\n         flavor,\n         crate_type,\n         codegen_results,\n@@ -2049,7 +2051,7 @@ fn linker_with_args<'a>(\n     // ------------ Object code and libraries, order-dependent ------------\n \n     // Post-link CRT objects.\n-    add_post_link_objects(cmd, sess, link_output_kind, crt_objects_fallback);\n+    add_post_link_objects(cmd, sess, link_output_kind, self_contained);\n \n     // ------------ Late order-dependent options ------------\n \n@@ -2066,7 +2068,7 @@ fn add_order_independent_options(\n     cmd: &mut dyn Linker,\n     sess: &Session,\n     link_output_kind: LinkOutputKind,\n-    crt_objects_fallback: bool,\n+    self_contained: bool,\n     flavor: LinkerFlavor,\n     crate_type: CrateType,\n     codegen_results: &CodegenResults,\n@@ -2098,7 +2100,7 @@ fn add_order_independent_options(\n     // Make the binary compatible with data execution prevention schemes.\n     cmd.add_no_exec();\n \n-    if crt_objects_fallback {\n+    if self_contained {\n         cmd.no_crt_objects();\n     }\n \n@@ -2127,7 +2129,7 @@ fn add_order_independent_options(\n \n     cmd.linker_plugin_lto();\n \n-    add_library_search_dirs(cmd, sess, crt_objects_fallback);\n+    add_library_search_dirs(cmd, sess, self_contained);\n \n     cmd.output_filename(out_filename);\n "}, {"sha": "c126390f5a908dd80234871252ce842168ba5b47", "filename": "compiler/rustc_target/src/spec/crt_objects.rs", "status": "modified", "additions": 22, "deletions": 18, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/8fa707ab417b7c6b2cc9a57435cbc48b53c69f7e/compiler%2Frustc_target%2Fsrc%2Fspec%2Fcrt_objects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa707ab417b7c6b2cc9a57435cbc48b53c69f7e/compiler%2Frustc_target%2Fsrc%2Fspec%2Fcrt_objects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fcrt_objects.rs?ref=8fa707ab417b7c6b2cc9a57435cbc48b53c69f7e", "patch": "@@ -63,7 +63,7 @@ pub(super) fn all(obj: &'static str) -> CrtObjects {\n     ])\n }\n \n-pub(super) fn pre_musl_fallback() -> CrtObjects {\n+pub(super) fn pre_musl_self_contained() -> CrtObjects {\n     new(&[\n         (LinkOutputKind::DynamicNoPicExe, &[\"crt1.o\", \"crti.o\", \"crtbegin.o\"]),\n         (LinkOutputKind::DynamicPicExe, &[\"Scrt1.o\", \"crti.o\", \"crtbeginS.o\"]),\n@@ -74,7 +74,7 @@ pub(super) fn pre_musl_fallback() -> CrtObjects {\n     ])\n }\n \n-pub(super) fn post_musl_fallback() -> CrtObjects {\n+pub(super) fn post_musl_self_contained() -> CrtObjects {\n     new(&[\n         (LinkOutputKind::DynamicNoPicExe, &[\"crtend.o\", \"crtn.o\"]),\n         (LinkOutputKind::DynamicPicExe, &[\"crtendS.o\", \"crtn.o\"]),\n@@ -85,7 +85,7 @@ pub(super) fn post_musl_fallback() -> CrtObjects {\n     ])\n }\n \n-pub(super) fn pre_mingw_fallback() -> CrtObjects {\n+pub(super) fn pre_mingw_self_contained() -> CrtObjects {\n     new(&[\n         (LinkOutputKind::DynamicNoPicExe, &[\"crt2.o\", \"rsbegin.o\"]),\n         (LinkOutputKind::DynamicPicExe, &[\"crt2.o\", \"rsbegin.o\"]),\n@@ -96,7 +96,7 @@ pub(super) fn pre_mingw_fallback() -> CrtObjects {\n     ])\n }\n \n-pub(super) fn post_mingw_fallback() -> CrtObjects {\n+pub(super) fn post_mingw_self_contained() -> CrtObjects {\n     all(\"rsend.o\")\n }\n \n@@ -108,7 +108,7 @@ pub(super) fn post_mingw() -> CrtObjects {\n     all(\"rsend.o\")\n }\n \n-pub(super) fn pre_wasi_fallback() -> CrtObjects {\n+pub(super) fn pre_wasi_self_contained() -> CrtObjects {\n     // Use crt1-command.o instead of crt1.o to enable support for new-style\n     // commands. See https://reviews.llvm.org/D81689 for more info.\n     new(&[\n@@ -120,37 +120,41 @@ pub(super) fn pre_wasi_fallback() -> CrtObjects {\n     ])\n }\n \n-pub(super) fn post_wasi_fallback() -> CrtObjects {\n+pub(super) fn post_wasi_self_contained() -> CrtObjects {\n     new(&[])\n }\n \n-/// Which logic to use to determine whether to fall back to the \"self-contained\" mode or not.\n+/// Which logic to use to determine whether to use self-contained linking mode\n+/// if `-Clink-self-contained` is not specified explicitly.\n #[derive(Clone, Copy, PartialEq, Hash, Debug)]\n-pub enum CrtObjectsFallback {\n+pub enum LinkSelfContainedDefault {\n+    False,\n+    True,\n     Musl,\n     Mingw,\n-    Wasm,\n }\n \n-impl FromStr for CrtObjectsFallback {\n+impl FromStr for LinkSelfContainedDefault {\n     type Err = ();\n \n-    fn from_str(s: &str) -> Result<CrtObjectsFallback, ()> {\n+    fn from_str(s: &str) -> Result<LinkSelfContainedDefault, ()> {\n         Ok(match s {\n-            \"musl\" => CrtObjectsFallback::Musl,\n-            \"mingw\" => CrtObjectsFallback::Mingw,\n-            \"wasm\" => CrtObjectsFallback::Wasm,\n+            \"false\" => LinkSelfContainedDefault::False,\n+            \"true\" | \"wasm\" => LinkSelfContainedDefault::True,\n+            \"musl\" => LinkSelfContainedDefault::Musl,\n+            \"mingw\" => LinkSelfContainedDefault::Mingw,\n             _ => return Err(()),\n         })\n     }\n }\n \n-impl ToJson for CrtObjectsFallback {\n+impl ToJson for LinkSelfContainedDefault {\n     fn to_json(&self) -> Json {\n         match *self {\n-            CrtObjectsFallback::Musl => \"musl\",\n-            CrtObjectsFallback::Mingw => \"mingw\",\n-            CrtObjectsFallback::Wasm => \"wasm\",\n+            LinkSelfContainedDefault::False => \"false\",\n+            LinkSelfContainedDefault::True => \"true\",\n+            LinkSelfContainedDefault::Musl => \"musl\",\n+            LinkSelfContainedDefault::Mingw => \"mingw\",\n         }\n         .to_json()\n     }"}, {"sha": "61553e71b4500ae4dea3910a6910bf57e9524bf1", "filename": "compiler/rustc_target/src/spec/linux_musl_base.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8fa707ab417b7c6b2cc9a57435cbc48b53c69f7e/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_musl_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa707ab417b7c6b2cc9a57435cbc48b53c69f7e/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_musl_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_musl_base.rs?ref=8fa707ab417b7c6b2cc9a57435cbc48b53c69f7e", "patch": "@@ -1,13 +1,13 @@\n-use crate::spec::crt_objects::{self, CrtObjectsFallback};\n+use crate::spec::crt_objects::{self, LinkSelfContainedDefault};\n use crate::spec::TargetOptions;\n \n pub fn opts() -> TargetOptions {\n     let mut base = super::linux_base::opts();\n \n     base.env = \"musl\".into();\n-    base.pre_link_objects_fallback = crt_objects::pre_musl_fallback();\n-    base.post_link_objects_fallback = crt_objects::post_musl_fallback();\n-    base.crt_objects_fallback = Some(CrtObjectsFallback::Musl);\n+    base.pre_link_objects_self_contained = crt_objects::pre_musl_self_contained();\n+    base.post_link_objects_self_contained = crt_objects::post_musl_self_contained();\n+    base.link_self_contained = LinkSelfContainedDefault::Musl;\n \n     // These targets statically link libc by default\n     base.crt_static_default = true;"}, {"sha": "0b49edc232c06afc2aa77e6b9ba53a5adba8b4e5", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 26, "deletions": 29, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/8fa707ab417b7c6b2cc9a57435cbc48b53c69f7e/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa707ab417b7c6b2cc9a57435cbc48b53c69f7e/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=8fa707ab417b7c6b2cc9a57435cbc48b53c69f7e", "patch": "@@ -37,7 +37,7 @@\n use crate::abi::Endian;\n use crate::json::{Json, ToJson};\n use crate::spec::abi::{lookup as lookup_abi, Abi};\n-use crate::spec::crt_objects::{CrtObjects, CrtObjectsFallback};\n+use crate::spec::crt_objects::{CrtObjects, LinkSelfContainedDefault};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_serialize::{Decodable, Decoder, Encodable, Encoder};\n use rustc_span::symbol::{sym, Symbol};\n@@ -1172,13 +1172,10 @@ pub struct TargetOptions {\n     /// Objects to link before and after all other object code.\n     pub pre_link_objects: CrtObjects,\n     pub post_link_objects: CrtObjects,\n-    /// Same as `(pre|post)_link_objects`, but when we fail to pull the objects with help of the\n-    /// target's native gcc and fall back to the \"self-contained\" mode and pull them manually.\n-    /// See `crt_objects.rs` for some more detailed documentation.\n-    pub pre_link_objects_fallback: CrtObjects,\n-    pub post_link_objects_fallback: CrtObjects,\n-    /// Which logic to use to determine whether to fall back to the \"self-contained\" mode or not.\n-    pub crt_objects_fallback: Option<CrtObjectsFallback>,\n+    /// Same as `(pre|post)_link_objects`, but when self-contained linking mode is enabled.\n+    pub pre_link_objects_self_contained: CrtObjects,\n+    pub post_link_objects_self_contained: CrtObjects,\n+    pub link_self_contained: LinkSelfContainedDefault,\n \n     /// Linker arguments that are unconditionally passed after any\n     /// user-defined but before post-link objects. Standard platform\n@@ -1554,9 +1551,9 @@ impl Default for TargetOptions {\n             relro_level: RelroLevel::None,\n             pre_link_objects: Default::default(),\n             post_link_objects: Default::default(),\n-            pre_link_objects_fallback: Default::default(),\n-            post_link_objects_fallback: Default::default(),\n-            crt_objects_fallback: None,\n+            pre_link_objects_self_contained: Default::default(),\n+            post_link_objects_self_contained: Default::default(),\n+            link_self_contained: LinkSelfContainedDefault::False,\n             late_link_args: LinkArgs::new(),\n             late_link_args_dynamic: LinkArgs::new(),\n             late_link_args_static: LinkArgs::new(),\n@@ -1977,20 +1974,20 @@ impl Target {\n                 Ok::<(), String>(())\n             } );\n \n-            ($key_name:ident, crt_objects_fallback) => ( {\n-                let name = (stringify!($key_name)).replace(\"_\", \"-\");\n-                obj.remove(&name).and_then(|o| o.as_str().and_then(|s| {\n-                    match s.parse::<CrtObjectsFallback>() {\n-                        Ok(fallback) => base.$key_name = Some(fallback),\n-                        _ => return Some(Err(format!(\"'{}' is not a valid CRT objects fallback. \\\n-                                                      Use 'musl', 'mingw' or 'wasm'\", s))),\n+            ($key_name:ident = $json_name:expr, link_self_contained) => ( {\n+                let name = $json_name;\n+                obj.remove(name).and_then(|o| o.as_str().and_then(|s| {\n+                    match s.parse::<LinkSelfContainedDefault>() {\n+                        Ok(lsc_default) => base.$key_name = lsc_default,\n+                        _ => return Some(Err(format!(\"'{}' is not a valid `-Clink-self-contained` default. \\\n+                                                      Use 'false', 'true', 'musl' or 'mingw'\", s))),\n                     }\n                     Some(Ok(()))\n                 })).unwrap_or(Ok(()))\n             } );\n-            ($key_name:ident, link_objects) => ( {\n-                let name = (stringify!($key_name)).replace(\"_\", \"-\");\n-                if let Some(val) = obj.remove(&name) {\n+            ($key_name:ident = $json_name:expr, link_objects) => ( {\n+                let name = $json_name;\n+                if let Some(val) = obj.remove(name) {\n                     let obj = val.as_object().ok_or_else(|| format!(\"{}: expected a \\\n                         JSON object with fields per CRT object kind.\", name))?;\n                     let mut args = CrtObjects::new();\n@@ -2112,11 +2109,11 @@ impl Target {\n         key!(linker_flavor, LinkerFlavor)?;\n         key!(linker, optional);\n         key!(lld_flavor, LldFlavor)?;\n-        key!(pre_link_objects, link_objects);\n-        key!(post_link_objects, link_objects);\n-        key!(pre_link_objects_fallback, link_objects);\n-        key!(post_link_objects_fallback, link_objects);\n-        key!(crt_objects_fallback, crt_objects_fallback)?;\n+        key!(pre_link_objects = \"pre-link-objects\", link_objects);\n+        key!(post_link_objects = \"post-link-objects\", link_objects);\n+        key!(pre_link_objects_self_contained = \"pre-link-objects-fallback\", link_objects);\n+        key!(post_link_objects_self_contained = \"post-link-objects-fallback\", link_objects);\n+        key!(link_self_contained = \"crt-objects-fallback\", link_self_contained)?;\n         key!(pre_link_args, link_args);\n         key!(late_link_args, link_args);\n         key!(late_link_args_dynamic, link_args);\n@@ -2357,9 +2354,9 @@ impl ToJson for Target {\n         target_option_val!(lld_flavor);\n         target_option_val!(pre_link_objects);\n         target_option_val!(post_link_objects);\n-        target_option_val!(pre_link_objects_fallback);\n-        target_option_val!(post_link_objects_fallback);\n-        target_option_val!(crt_objects_fallback);\n+        target_option_val!(pre_link_objects_self_contained, \"pre-link-objects-fallback\");\n+        target_option_val!(post_link_objects_self_contained, \"post-link-objects-fallback\");\n+        target_option_val!(link_self_contained, \"crt-objects-fallback\");\n         target_option_val!(link_args - pre_link_args);\n         target_option_val!(link_args - late_link_args);\n         target_option_val!(link_args - late_link_args_dynamic);"}, {"sha": "03e579aee0a96f042c7188a704c10d54cfb608f4", "filename": "compiler/rustc_target/src/spec/tests/tests_impl.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8fa707ab417b7c6b2cc9a57435cbc48b53c69f7e/compiler%2Frustc_target%2Fsrc%2Fspec%2Ftests%2Ftests_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa707ab417b7c6b2cc9a57435cbc48b53c69f7e/compiler%2Frustc_target%2Fsrc%2Fspec%2Ftests%2Ftests_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Ftests%2Ftests_impl.rs?ref=8fa707ab417b7c6b2cc9a57435cbc48b53c69f7e", "patch": "@@ -110,9 +110,9 @@ impl Target {\n         }\n \n         assert!(\n-            (self.pre_link_objects_fallback.is_empty()\n-                && self.post_link_objects_fallback.is_empty())\n-                || self.crt_objects_fallback.is_some()\n+            (self.pre_link_objects_self_contained.is_empty()\n+                && self.post_link_objects_self_contained.is_empty())\n+                || self.link_self_contained != LinkSelfContainedDefault::False\n         );\n \n         // If your target really needs to deviate from the rules below,"}, {"sha": "9c30487f4abe796debeffff725252b07b49a4ce4", "filename": "compiler/rustc_target/src/spec/wasm32_wasi.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8fa707ab417b7c6b2cc9a57435cbc48b53c69f7e/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_wasi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa707ab417b7c6b2cc9a57435cbc48b53c69f7e/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_wasi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_wasi.rs?ref=8fa707ab417b7c6b2cc9a57435cbc48b53c69f7e", "patch": "@@ -82,8 +82,8 @@ pub fn target() -> Target {\n     options.linker_flavor = LinkerFlavor::Lld(LldFlavor::Wasm);\n     options.add_pre_link_args(LinkerFlavor::Gcc, &[\"--target=wasm32-wasi\"]);\n \n-    options.pre_link_objects_fallback = crt_objects::pre_wasi_fallback();\n-    options.post_link_objects_fallback = crt_objects::post_wasi_fallback();\n+    options.pre_link_objects_self_contained = crt_objects::pre_wasi_self_contained();\n+    options.post_link_objects_self_contained = crt_objects::post_wasi_self_contained();\n \n     // Right now this is a bit of a workaround but we're currently saying that\n     // the target by default has a static crt which we're taking as a signal"}, {"sha": "28a07701eae74ec2bb2b2b3ca9e0d07a4535f5f7", "filename": "compiler/rustc_target/src/spec/wasm_base.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8fa707ab417b7c6b2cc9a57435cbc48b53c69f7e/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa707ab417b7c6b2cc9a57435cbc48b53c69f7e/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm_base.rs?ref=8fa707ab417b7c6b2cc9a57435cbc48b53c69f7e", "patch": "@@ -1,4 +1,4 @@\n-use super::crt_objects::CrtObjectsFallback;\n+use super::crt_objects::LinkSelfContainedDefault;\n use super::{cvs, LinkerFlavor, LldFlavor, PanicStrategy, RelocModel, TargetOptions, TlsModel};\n \n pub fn options() -> TargetOptions {\n@@ -96,7 +96,8 @@ pub fn options() -> TargetOptions {\n \n         pre_link_args,\n \n-        crt_objects_fallback: Some(CrtObjectsFallback::Wasm),\n+        // FIXME: Figure out cases in which WASM needs to link with a native toolchain.\n+        link_self_contained: LinkSelfContainedDefault::True,\n \n         // This has no effect in LLVM 8 or prior, but in LLVM 9 and later when\n         // PIC code is implemented this has quite a drastic effect if it stays"}, {"sha": "0107f7a52c6ffebc0e2f04e5c1b5215f989e0c70", "filename": "compiler/rustc_target/src/spec/windows_gnu_base.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8fa707ab417b7c6b2cc9a57435cbc48b53c69f7e/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_gnu_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa707ab417b7c6b2cc9a57435cbc48b53c69f7e/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_gnu_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_gnu_base.rs?ref=8fa707ab417b7c6b2cc9a57435cbc48b53c69f7e", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::crt_objects::{self, CrtObjectsFallback};\n+use crate::spec::crt_objects::{self, LinkSelfContainedDefault};\n use crate::spec::{cvs, LinkerFlavor, TargetOptions};\n \n pub fn opts() -> TargetOptions {\n@@ -76,9 +76,9 @@ pub fn opts() -> TargetOptions {\n         pre_link_args,\n         pre_link_objects: crt_objects::pre_mingw(),\n         post_link_objects: crt_objects::post_mingw(),\n-        pre_link_objects_fallback: crt_objects::pre_mingw_fallback(),\n-        post_link_objects_fallback: crt_objects::post_mingw_fallback(),\n-        crt_objects_fallback: Some(CrtObjectsFallback::Mingw),\n+        pre_link_objects_self_contained: crt_objects::pre_mingw_self_contained(),\n+        post_link_objects_self_contained: crt_objects::post_mingw_self_contained(),\n+        link_self_contained: LinkSelfContainedDefault::Mingw,\n         late_link_args,\n         late_link_args_dynamic,\n         late_link_args_static,"}]}