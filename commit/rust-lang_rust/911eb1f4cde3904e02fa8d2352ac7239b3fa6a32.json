{"sha": "911eb1f4cde3904e02fa8d2352ac7239b3fa6a32", "node_id": "C_kwDOAAsO6NoAKDkxMWViMWY0Y2RlMzkwNGUwMmZhOGQyMzUyYWM3MjM5YjNmYTZhMzI", "commit": {"author": {"name": "Samuel E. Moelius III", "email": "sam@moeli.us", "date": "2022-05-19T13:03:38Z"}, "committer": {"name": "Samuel E. Moelius III", "email": "sam@moeli.us", "date": "2022-05-27T19:18:46Z"}, "message": "Check `.fixed` paths' existence in `run_ui`", "tree": {"sha": "f86f0cde54eaa0e13b18e15f6ea837fe68b11932", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f86f0cde54eaa0e13b18e15f6ea837fe68b11932"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32", "html_url": "https://github.com/rust-lang/rust/commit/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/comments", "author": {"login": "smoelius", "id": 35515885, "node_id": "MDQ6VXNlcjM1NTE1ODg1", "avatar_url": "https://avatars.githubusercontent.com/u/35515885?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smoelius", "html_url": "https://github.com/smoelius", "followers_url": "https://api.github.com/users/smoelius/followers", "following_url": "https://api.github.com/users/smoelius/following{/other_user}", "gists_url": "https://api.github.com/users/smoelius/gists{/gist_id}", "starred_url": "https://api.github.com/users/smoelius/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smoelius/subscriptions", "organizations_url": "https://api.github.com/users/smoelius/orgs", "repos_url": "https://api.github.com/users/smoelius/repos", "events_url": "https://api.github.com/users/smoelius/events{/privacy}", "received_events_url": "https://api.github.com/users/smoelius/received_events", "type": "User", "site_admin": false}, "committer": {"login": "smoelius", "id": 35515885, "node_id": "MDQ6VXNlcjM1NTE1ODg1", "avatar_url": "https://avatars.githubusercontent.com/u/35515885?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smoelius", "html_url": "https://github.com/smoelius", "followers_url": "https://api.github.com/users/smoelius/followers", "following_url": "https://api.github.com/users/smoelius/following{/other_user}", "gists_url": "https://api.github.com/users/smoelius/gists{/gist_id}", "starred_url": "https://api.github.com/users/smoelius/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smoelius/subscriptions", "organizations_url": "https://api.github.com/users/smoelius/orgs", "repos_url": "https://api.github.com/users/smoelius/repos", "events_url": "https://api.github.com/users/smoelius/events{/privacy}", "received_events_url": "https://api.github.com/users/smoelius/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5ece8132feff537edef01b15fe7834bd8642743", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5ece8132feff537edef01b15fe7834bd8642743", "html_url": "https://github.com/rust-lang/rust/commit/a5ece8132feff537edef01b15fe7834bd8642743"}], "stats": {"total": 1605, "additions": 1478, "deletions": 127}, "files": [{"sha": "b0bd39801928c8ff5d9cd415eda0f269d0d65775", "filename": "tests/compile-test.rs", "status": "modified", "additions": 80, "deletions": 2, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/tests%2Fcompile-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/tests%2Fcompile-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-test.rs?ref=911eb1f4cde3904e02fa8d2352ac7239b3fa6a32", "patch": "@@ -1,5 +1,6 @@\n #![feature(test)] // compiletest_rs requires this attribute\n #![feature(once_cell)]\n+#![feature(is_sorted)]\n #![cfg_attr(feature = \"deny-warnings\", deny(warnings))]\n #![warn(rust_2018_idioms, unused_lifetimes)]\n \n@@ -162,8 +163,8 @@ fn base_config(test_dir: &str) -> compiletest::Config {\n }\n \n fn run_ui() {\n-    let config = base_config(\"ui\");\n-    // use tests/clippy.toml\n+    let mut config = base_config(\"ui\");\n+    config.rustfix_coverage = true;\n     let _g = VarGuard::set(\"CARGO_MANIFEST_DIR\", fs::canonicalize(\"tests\").unwrap());\n     let _threads = VarGuard::set(\n         \"RUST_TEST_THREADS\",\n@@ -175,6 +176,7 @@ fn run_ui() {\n         }),\n     );\n     compiletest::run_tests(&config);\n+    check_rustfix_coverage();\n }\n \n fn run_internal_tests() {\n@@ -337,6 +339,82 @@ fn compile_test() {\n     run_internal_tests();\n }\n \n+const RUSTFIX_COVERAGE_KNOWN_EXCEPTIONS: &[&str] = &[\n+    \"assign_ops2.rs\",\n+    \"cast_size_32bit.rs\",\n+    \"char_lit_as_u8.rs\",\n+    \"cmp_owned/without_suggestion.rs\",\n+    \"crashes/ice-6250.rs\",\n+    \"crashes/ice-6251.rs\",\n+    \"dbg_macro.rs\",\n+    \"deref_addrof_double_trigger.rs\",\n+    \"doc/unbalanced_ticks.rs\",\n+    \"eprint_with_newline.rs\",\n+    \"explicit_counter_loop.rs\",\n+    \"iter_skip_next_unfixable.rs\",\n+    \"let_and_return.rs\",\n+    \"literals.rs\",\n+    \"map_flatten.rs\",\n+    \"map_unwrap_or.rs\",\n+    \"match_bool.rs\",\n+    \"mem_replace_macro.rs\",\n+    \"needless_arbitrary_self_type_unfixable.rs\",\n+    \"needless_borrow_pat.rs\",\n+    \"needless_for_each_unfixable.rs\",\n+    \"nonminimal_bool.rs\",\n+    \"print_literal.rs\",\n+    \"print_with_newline.rs\",\n+    \"redundant_static_lifetimes_multiple.rs\",\n+    \"ref_binding_to_reference.rs\",\n+    \"repl_uninit.rs\",\n+    \"result_map_unit_fn_unfixable.rs\",\n+    \"search_is_some.rs\",\n+    \"single_component_path_imports_nested_first.rs\",\n+    \"string_add.rs\",\n+    \"toplevel_ref_arg_non_rustfix.rs\",\n+    \"unit_arg.rs\",\n+    \"unnecessary_clone.rs\",\n+    \"unnecessary_lazy_eval_unfixable.rs\",\n+    \"write_literal.rs\",\n+    \"write_literal_2.rs\",\n+    \"write_with_newline.rs\",\n+];\n+\n+fn check_rustfix_coverage() {\n+    let missing_coverage_path = Path::new(\"target/debug/test/ui/rustfix_missing_coverage.txt\");\n+\n+    if let Ok(missing_coverage_contents) = std::fs::read_to_string(missing_coverage_path) {\n+        assert!(RUSTFIX_COVERAGE_KNOWN_EXCEPTIONS.is_sorted());\n+\n+        for rs_path in missing_coverage_contents.lines() {\n+            let filename = rs_path.strip_prefix(\"tests/ui/\").unwrap();\n+            assert!(\n+                RUSTFIX_COVERAGE_KNOWN_EXCEPTIONS.binary_search(&filename).is_ok(),\n+                \"`{}` runs `MachineApplicable` diagnostics but is missing a `run-rustfix` annotation\",\n+                rs_path,\n+            );\n+        }\n+    }\n+}\n+\n+#[test]\n+fn rustfix_coverage_known_exceptions_accuracy() {\n+    for filename in RUSTFIX_COVERAGE_KNOWN_EXCEPTIONS {\n+        let rs_path = Path::new(\"tests/ui\").join(filename);\n+        assert!(\n+            rs_path.exists(),\n+            \"`{}` does not exists\",\n+            rs_path.strip_prefix(env!(\"CARGO_MANIFEST_DIR\")).unwrap().display()\n+        );\n+        let fixed_path = rs_path.with_extension(\"fixed\");\n+        assert!(\n+            !fixed_path.exists(),\n+            \"`{}` exists\",\n+            fixed_path.strip_prefix(env!(\"CARGO_MANIFEST_DIR\")).unwrap().display()\n+        );\n+    }\n+}\n+\n /// Restores an env var on drop\n #[must_use]\n struct VarGuard {"}, {"sha": "e1589843226c4582fb4112b081889ced6bc13578", "filename": "tests/ui/bind_instead_of_map_multipart.fixed", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/tests%2Fui%2Fbind_instead_of_map_multipart.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/tests%2Fui%2Fbind_instead_of_map_multipart.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbind_instead_of_map_multipart.fixed?ref=911eb1f4cde3904e02fa8d2352ac7239b3fa6a32", "patch": "@@ -0,0 +1,62 @@\n+// run-rustfix\n+#![deny(clippy::bind_instead_of_map)]\n+#![allow(clippy::blocks_in_if_conditions)]\n+\n+pub fn main() {\n+    let _ = Some(\"42\").map(|s| if s.len() < 42 { 0 } else { s.len() });\n+    let _ = Some(\"42\").and_then(|s| if s.len() < 42 { None } else { Some(s.len()) });\n+\n+    let _ = Ok::<_, ()>(\"42\").map(|s| if s.len() < 42 { 0 } else { s.len() });\n+    let _ = Ok::<_, ()>(\"42\").and_then(|s| if s.len() < 42 { Err(()) } else { Ok(s.len()) });\n+\n+    let _ = Err::<(), _>(\"42\").map_err(|s| if s.len() < 42 { s.len() + 20 } else { s.len() });\n+    let _ = Err::<(), _>(\"42\").or_else(|s| if s.len() < 42 { Ok(()) } else { Err(s.len()) });\n+\n+    hard_example();\n+    macro_example();\n+}\n+\n+fn hard_example() {\n+    Some(\"42\").map(|s| {\n+        if {\n+            if s == \"43\" {\n+                return 43;\n+            }\n+            s == \"42\"\n+        } {\n+            return 45;\n+        }\n+        match s.len() {\n+            10 => 2,\n+            20 => {\n+                if foo() {\n+                    return {\n+                        if foo() {\n+                            return 20;\n+                        }\n+                        println!(\"foo\");\n+                        3\n+                    };\n+                }\n+                20\n+            },\n+            40 => 30,\n+            _ => 1,\n+        }\n+    });\n+}\n+\n+fn foo() -> bool {\n+    true\n+}\n+\n+macro_rules! m {\n+    () => {\n+        Some(10)\n+    };\n+}\n+\n+fn macro_example() {\n+    let _ = Some(\"\").and_then(|s| if s.len() == 20 { m!() } else { Some(20) });\n+    let _ = Some(\"\").map(|s| if s.len() == 20 { m!() } else { Some(20) });\n+}"}, {"sha": "49944403f6ddddf76a0b12137ef542f2ebc0f70c", "filename": "tests/ui/bind_instead_of_map_multipart.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/tests%2Fui%2Fbind_instead_of_map_multipart.rs", "raw_url": "https://github.com/rust-lang/rust/raw/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/tests%2Fui%2Fbind_instead_of_map_multipart.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbind_instead_of_map_multipart.rs?ref=911eb1f4cde3904e02fa8d2352ac7239b3fa6a32", "patch": "@@ -1,3 +1,4 @@\n+// run-rustfix\n #![deny(clippy::bind_instead_of_map)]\n #![allow(clippy::blocks_in_if_conditions)]\n "}, {"sha": "f822b6f49fa35198906b9a5fe3b7bc7762ec16b3", "filename": "tests/ui/bind_instead_of_map_multipart.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/tests%2Fui%2Fbind_instead_of_map_multipart.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/tests%2Fui%2Fbind_instead_of_map_multipart.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbind_instead_of_map_multipart.stderr?ref=911eb1f4cde3904e02fa8d2352ac7239b3fa6a32", "patch": "@@ -1,11 +1,11 @@\n error: using `Option.and_then(|x| Some(y))`, which is more succinctly expressed as `map(|x| y)`\n-  --> $DIR/bind_instead_of_map_multipart.rs:5:13\n+  --> $DIR/bind_instead_of_map_multipart.rs:6:13\n    |\n LL |     let _ = Some(\"42\").and_then(|s| if s.len() < 42 { Some(0) } else { Some(s.len()) });\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: the lint level is defined here\n-  --> $DIR/bind_instead_of_map_multipart.rs:1:9\n+  --> $DIR/bind_instead_of_map_multipart.rs:2:9\n    |\n LL | #![deny(clippy::bind_instead_of_map)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -15,7 +15,7 @@ LL |     let _ = Some(\"42\").map(|s| if s.len() < 42 { 0 } else { s.len() });\n    |                        ~~~                       ~          ~~~~~~~\n \n error: using `Result.and_then(|x| Ok(y))`, which is more succinctly expressed as `map(|x| y)`\n-  --> $DIR/bind_instead_of_map_multipart.rs:8:13\n+  --> $DIR/bind_instead_of_map_multipart.rs:9:13\n    |\n LL |     let _ = Ok::<_, ()>(\"42\").and_then(|s| if s.len() < 42 { Ok(0) } else { Ok(s.len()) });\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -26,7 +26,7 @@ LL |     let _ = Ok::<_, ()>(\"42\").map(|s| if s.len() < 42 { 0 } else { s.len()\n    |                               ~~~                       ~          ~~~~~~~\n \n error: using `Result.or_else(|x| Err(y))`, which is more succinctly expressed as `map_err(|x| y)`\n-  --> $DIR/bind_instead_of_map_multipart.rs:11:13\n+  --> $DIR/bind_instead_of_map_multipart.rs:12:13\n    |\n LL |     let _ = Err::<(), _>(\"42\").or_else(|s| if s.len() < 42 { Err(s.len() + 20) } else { Err(s.len()) });\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -37,7 +37,7 @@ LL |     let _ = Err::<(), _>(\"42\").map_err(|s| if s.len() < 42 { s.len() + 20 }\n    |                                ~~~~~~~                       ~~~~~~~~~~~~          ~~~~~~~\n \n error: using `Option.and_then(|x| Some(y))`, which is more succinctly expressed as `map(|x| y)`\n-  --> $DIR/bind_instead_of_map_multipart.rs:19:5\n+  --> $DIR/bind_instead_of_map_multipart.rs:20:5\n    |\n LL | /     Some(\"42\").and_then(|s| {\n LL | |         if {\n@@ -59,7 +59,7 @@ LL |             s == \"42\"\n  ...\n \n error: using `Option.and_then(|x| Some(y))`, which is more succinctly expressed as `map(|x| y)`\n-  --> $DIR/bind_instead_of_map_multipart.rs:60:13\n+  --> $DIR/bind_instead_of_map_multipart.rs:61:13\n    |\n LL |     let _ = Some(\"\").and_then(|s| if s.len() == 20 { Some(m!()) } else { Some(Some(20)) });\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "b36fb49ee74937ea6488169a944fe33d2a5cd8de", "filename": "tests/ui/crashes/ice-7169.fixed", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/tests%2Fui%2Fcrashes%2Fice-7169.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/tests%2Fui%2Fcrashes%2Fice-7169.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-7169.fixed?ref=911eb1f4cde3904e02fa8d2352ac7239b3fa6a32", "patch": "@@ -0,0 +1,12 @@\n+// run-rustfix\n+#![allow(dead_code)]\n+\n+#[derive(Default)]\n+struct A<T> {\n+    a: Vec<A<T>>,\n+    b: T,\n+}\n+\n+fn main() {\n+    if Ok::<_, ()>(A::<String>::default()).is_ok() {}\n+}"}, {"sha": "1769a96bd2f60c353fdcd91a474e418f785f7b85", "filename": "tests/ui/crashes/ice-7169.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/tests%2Fui%2Fcrashes%2Fice-7169.rs", "raw_url": "https://github.com/rust-lang/rust/raw/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/tests%2Fui%2Fcrashes%2Fice-7169.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-7169.rs?ref=911eb1f4cde3904e02fa8d2352ac7239b3fa6a32", "patch": "@@ -1,3 +1,6 @@\n+// run-rustfix\n+#![allow(dead_code)]\n+\n #[derive(Default)]\n struct A<T> {\n     a: Vec<A<T>>,"}, {"sha": "e7d0671386b6f0bffcfceadf8efd3856a8ea17aa", "filename": "tests/ui/crashes/ice-7169.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/tests%2Fui%2Fcrashes%2Fice-7169.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/tests%2Fui%2Fcrashes%2Fice-7169.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-7169.stderr?ref=911eb1f4cde3904e02fa8d2352ac7239b3fa6a32", "patch": "@@ -1,5 +1,5 @@\n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/ice-7169.rs:8:12\n+  --> $DIR/ice-7169.rs:11:12\n    |\n LL |     if let Ok(_) = Ok::<_, ()>(A::<String>::default()) {}\n    |     -------^^^^^-------------------------------------- help: try this: `if Ok::<_, ()>(A::<String>::default()).is_ok()`"}, {"sha": "950dc0b4d5789142e225ed4db13ade9dae8d7e5f", "filename": "tests/ui/crashes/ice-8250.fixed", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/tests%2Fui%2Fcrashes%2Fice-8250.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/tests%2Fui%2Fcrashes%2Fice-8250.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-8250.fixed?ref=911eb1f4cde3904e02fa8d2352ac7239b3fa6a32", "patch": "@@ -0,0 +1,7 @@\n+// run-rustfix\n+fn _f(s: &str) -> Option<()> {\n+    let _ = s[1..].split('.').next()?;\n+    Some(())\n+}\n+\n+fn main() {}"}, {"sha": "d3183d88faee74cc4bbfea490c1fd108e4aa0be2", "filename": "tests/ui/crashes/ice-8250.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/tests%2Fui%2Fcrashes%2Fice-8250.rs", "raw_url": "https://github.com/rust-lang/rust/raw/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/tests%2Fui%2Fcrashes%2Fice-8250.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-8250.rs?ref=911eb1f4cde3904e02fa8d2352ac7239b3fa6a32", "patch": "@@ -1,3 +1,4 @@\n+// run-rustfix\n fn _f(s: &str) -> Option<()> {\n     let _ = s[1..].splitn(2, '.').next()?;\n     Some(())"}, {"sha": "46d5aa7a2fc034a2fc9914a920d452a119b29fd0", "filename": "tests/ui/crashes/ice-8250.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/tests%2Fui%2Fcrashes%2Fice-8250.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/tests%2Fui%2Fcrashes%2Fice-8250.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-8250.stderr?ref=911eb1f4cde3904e02fa8d2352ac7239b3fa6a32", "patch": "@@ -1,5 +1,5 @@\n error: unnecessary use of `splitn`\n-  --> $DIR/ice-8250.rs:2:13\n+  --> $DIR/ice-8250.rs:3:13\n    |\n LL |     let _ = s[1..].splitn(2, '.').next()?;\n    |             ^^^^^^^^^^^^^^^^^^^^^ help: try this: `s[1..].split('.')`"}, {"sha": "046b4522ec1a72f25fb2f38e73e4b19dba1dbb46", "filename": "tests/ui/crashes/ice-8821.fixed", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/tests%2Fui%2Fcrashes%2Fice-8821.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/tests%2Fui%2Fcrashes%2Fice-8821.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-8821.fixed?ref=911eb1f4cde3904e02fa8d2352ac7239b3fa6a32", "patch": "@@ -0,0 +1,9 @@\n+// run-rustfix\n+#![warn(clippy::let_unit_value)]\n+\n+fn f() {}\n+static FN: fn() = f;\n+\n+fn main() {\n+    FN();\n+}"}, {"sha": "941225e9d1e5105e0724c7ed72dbfe7170638d8e", "filename": "tests/ui/crashes/ice-8821.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/tests%2Fui%2Fcrashes%2Fice-8821.rs", "raw_url": "https://github.com/rust-lang/rust/raw/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/tests%2Fui%2Fcrashes%2Fice-8821.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-8821.rs?ref=911eb1f4cde3904e02fa8d2352ac7239b3fa6a32", "patch": "@@ -1,3 +1,4 @@\n+// run-rustfix\n #![warn(clippy::let_unit_value)]\n \n fn f() {}"}, {"sha": "aee13f00ca02c4b51ea2195c9c7b4484f35af935", "filename": "tests/ui/crashes/ice-8821.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/tests%2Fui%2Fcrashes%2Fice-8821.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/tests%2Fui%2Fcrashes%2Fice-8821.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-8821.stderr?ref=911eb1f4cde3904e02fa8d2352ac7239b3fa6a32", "patch": "@@ -1,5 +1,5 @@\n error: this let-binding has unit value\n-  --> $DIR/ice-8821.rs:7:5\n+  --> $DIR/ice-8821.rs:8:5\n    |\n LL |     let _: () = FN();\n    |     ^^^^^^^^^^^^^^^^^ help: omit the `let` binding: `FN();`"}, {"sha": "33770fc2a2cf9cca67a956157de5fc83599d93d2", "filename": "tests/ui/implicit_clone.fixed", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/tests%2Fui%2Fimplicit_clone.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/tests%2Fui%2Fimplicit_clone.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimplicit_clone.fixed?ref=911eb1f4cde3904e02fa8d2352ac7239b3fa6a32", "patch": "@@ -0,0 +1,118 @@\n+// run-rustfix\n+#![warn(clippy::implicit_clone)]\n+#![allow(clippy::clone_on_copy, clippy::redundant_clone)]\n+use std::borrow::Borrow;\n+use std::ffi::{OsStr, OsString};\n+use std::path::PathBuf;\n+\n+fn return_owned_from_slice(slice: &[u32]) -> Vec<u32> {\n+    slice.to_owned()\n+}\n+\n+pub fn own_same<T>(v: T) -> T\n+where\n+    T: ToOwned<Owned = T>,\n+{\n+    v.to_owned()\n+}\n+\n+pub fn own_same_from_ref<T>(v: &T) -> T\n+where\n+    T: ToOwned<Owned = T>,\n+{\n+    v.to_owned()\n+}\n+\n+pub fn own_different<T, U>(v: T) -> U\n+where\n+    T: ToOwned<Owned = U>,\n+{\n+    v.to_owned()\n+}\n+\n+#[derive(Copy, Clone)]\n+struct Kitten;\n+impl Kitten {\n+    // badly named method\n+    fn to_vec(self) -> Kitten {\n+        Kitten {}\n+    }\n+}\n+impl Borrow<BorrowedKitten> for Kitten {\n+    fn borrow(&self) -> &BorrowedKitten {\n+        static VALUE: BorrowedKitten = BorrowedKitten {};\n+        &VALUE\n+    }\n+}\n+\n+struct BorrowedKitten;\n+impl ToOwned for BorrowedKitten {\n+    type Owned = Kitten;\n+    fn to_owned(&self) -> Kitten {\n+        Kitten {}\n+    }\n+}\n+\n+mod weird {\n+    #[allow(clippy::ptr_arg)]\n+    pub fn to_vec(v: &Vec<u32>) -> Vec<u32> {\n+        v.clone()\n+    }\n+}\n+\n+fn main() {\n+    let vec = vec![5];\n+    let _ = return_owned_from_slice(&vec);\n+    let _ = vec.clone();\n+    let _ = vec.clone();\n+\n+    let vec_ref = &vec;\n+    let _ = return_owned_from_slice(vec_ref);\n+    let _ = vec_ref.clone();\n+    let _ = vec_ref.clone();\n+\n+    // we expect no lint for this\n+    let _ = weird::to_vec(&vec);\n+\n+    // we expect no lints for this\n+    let slice: &[u32] = &[1, 2, 3, 4, 5];\n+    let _ = return_owned_from_slice(slice);\n+    let _ = slice.to_owned();\n+    let _ = slice.to_vec();\n+\n+    let str = \"hello world\".to_string();\n+    let _ = str.clone();\n+\n+    // testing w/ an arbitrary type\n+    let kitten = Kitten {};\n+    let _ = kitten.clone();\n+    let _ = own_same_from_ref(&kitten);\n+    // this shouln't lint\n+    let _ = kitten.to_vec();\n+\n+    // we expect no lints for this\n+    let borrowed = BorrowedKitten {};\n+    let _ = borrowed.to_owned();\n+\n+    let pathbuf = PathBuf::new();\n+    let _ = pathbuf.clone();\n+    let _ = pathbuf.clone();\n+\n+    let os_string = OsString::from(\"foo\");\n+    let _ = os_string.clone();\n+    let _ = os_string.clone();\n+\n+    // we expect no lints for this\n+    let os_str = OsStr::new(\"foo\");\n+    let _ = os_str.to_owned();\n+    let _ = os_str.to_os_string();\n+\n+    // issue #8227\n+    let pathbuf_ref = &pathbuf;\n+    let pathbuf_ref = &pathbuf_ref;\n+    let _ = pathbuf_ref.to_owned(); // Don't lint. Returns `&PathBuf`\n+    let _ = (*pathbuf_ref).clone();\n+    let pathbuf_ref = &pathbuf_ref;\n+    let _ = pathbuf_ref.to_owned(); // Don't lint. Returns `&&PathBuf`\n+    let _ = (**pathbuf_ref).clone();\n+}"}, {"sha": "fc896525bd2709ba82b41b56073bf8418649488e", "filename": "tests/ui/implicit_clone.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/tests%2Fui%2Fimplicit_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/tests%2Fui%2Fimplicit_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimplicit_clone.rs?ref=911eb1f4cde3904e02fa8d2352ac7239b3fa6a32", "patch": "@@ -1,5 +1,6 @@\n+// run-rustfix\n #![warn(clippy::implicit_clone)]\n-#![allow(clippy::redundant_clone)]\n+#![allow(clippy::clone_on_copy, clippy::redundant_clone)]\n use std::borrow::Borrow;\n use std::ffi::{OsStr, OsString};\n use std::path::PathBuf;"}, {"sha": "92c1aa58affb2411eeeafbaa816568b23440c7ec", "filename": "tests/ui/implicit_clone.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/tests%2Fui%2Fimplicit_clone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/tests%2Fui%2Fimplicit_clone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimplicit_clone.stderr?ref=911eb1f4cde3904e02fa8d2352ac7239b3fa6a32", "patch": "@@ -1,73 +1,73 @@\n error: implicitly cloning a `Vec` by calling `to_owned` on its dereferenced type\n-  --> $DIR/implicit_clone.rs:65:13\n+  --> $DIR/implicit_clone.rs:66:13\n    |\n LL |     let _ = vec.to_owned();\n    |             ^^^^^^^^^^^^^^ help: consider using: `vec.clone()`\n    |\n    = note: `-D clippy::implicit-clone` implied by `-D warnings`\n \n error: implicitly cloning a `Vec` by calling `to_vec` on its dereferenced type\n-  --> $DIR/implicit_clone.rs:66:13\n+  --> $DIR/implicit_clone.rs:67:13\n    |\n LL |     let _ = vec.to_vec();\n    |             ^^^^^^^^^^^^ help: consider using: `vec.clone()`\n \n error: implicitly cloning a `Vec` by calling `to_owned` on its dereferenced type\n-  --> $DIR/implicit_clone.rs:70:13\n+  --> $DIR/implicit_clone.rs:71:13\n    |\n LL |     let _ = vec_ref.to_owned();\n    |             ^^^^^^^^^^^^^^^^^^ help: consider using: `vec_ref.clone()`\n \n error: implicitly cloning a `Vec` by calling `to_vec` on its dereferenced type\n-  --> $DIR/implicit_clone.rs:71:13\n+  --> $DIR/implicit_clone.rs:72:13\n    |\n LL |     let _ = vec_ref.to_vec();\n    |             ^^^^^^^^^^^^^^^^ help: consider using: `vec_ref.clone()`\n \n error: implicitly cloning a `String` by calling `to_owned` on its dereferenced type\n-  --> $DIR/implicit_clone.rs:83:13\n+  --> $DIR/implicit_clone.rs:84:13\n    |\n LL |     let _ = str.to_owned();\n    |             ^^^^^^^^^^^^^^ help: consider using: `str.clone()`\n \n error: implicitly cloning a `Kitten` by calling `to_owned` on its dereferenced type\n-  --> $DIR/implicit_clone.rs:87:13\n+  --> $DIR/implicit_clone.rs:88:13\n    |\n LL |     let _ = kitten.to_owned();\n    |             ^^^^^^^^^^^^^^^^^ help: consider using: `kitten.clone()`\n \n error: implicitly cloning a `PathBuf` by calling `to_owned` on its dereferenced type\n-  --> $DIR/implicit_clone.rs:97:13\n+  --> $DIR/implicit_clone.rs:98:13\n    |\n LL |     let _ = pathbuf.to_owned();\n    |             ^^^^^^^^^^^^^^^^^^ help: consider using: `pathbuf.clone()`\n \n error: implicitly cloning a `PathBuf` by calling `to_path_buf` on its dereferenced type\n-  --> $DIR/implicit_clone.rs:98:13\n+  --> $DIR/implicit_clone.rs:99:13\n    |\n LL |     let _ = pathbuf.to_path_buf();\n    |             ^^^^^^^^^^^^^^^^^^^^^ help: consider using: `pathbuf.clone()`\n \n error: implicitly cloning a `OsString` by calling `to_owned` on its dereferenced type\n-  --> $DIR/implicit_clone.rs:101:13\n+  --> $DIR/implicit_clone.rs:102:13\n    |\n LL |     let _ = os_string.to_owned();\n    |             ^^^^^^^^^^^^^^^^^^^^ help: consider using: `os_string.clone()`\n \n error: implicitly cloning a `OsString` by calling `to_os_string` on its dereferenced type\n-  --> $DIR/implicit_clone.rs:102:13\n+  --> $DIR/implicit_clone.rs:103:13\n    |\n LL |     let _ = os_string.to_os_string();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `os_string.clone()`\n \n error: implicitly cloning a `PathBuf` by calling `to_path_buf` on its dereferenced type\n-  --> $DIR/implicit_clone.rs:113:13\n+  --> $DIR/implicit_clone.rs:114:13\n    |\n LL |     let _ = pathbuf_ref.to_path_buf();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `(*pathbuf_ref).clone()`\n \n error: implicitly cloning a `PathBuf` by calling `to_path_buf` on its dereferenced type\n-  --> $DIR/implicit_clone.rs:116:13\n+  --> $DIR/implicit_clone.rs:117:13\n    |\n LL |     let _ = pathbuf_ref.to_path_buf();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `(**pathbuf_ref).clone()`"}, {"sha": "942e99fa8787b0bae936f6997d0b5eec2176f965", "filename": "tests/ui/issue_2356.fixed", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/tests%2Fui%2Fissue_2356.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/tests%2Fui%2Fissue_2356.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissue_2356.fixed?ref=911eb1f4cde3904e02fa8d2352ac7239b3fa6a32", "patch": "@@ -0,0 +1,26 @@\n+// run-rustfix\n+#![deny(clippy::while_let_on_iterator)]\n+#![allow(unused_mut)]\n+\n+use std::iter::Iterator;\n+\n+struct Foo;\n+\n+impl Foo {\n+    fn foo1<I: Iterator<Item = usize>>(mut it: I) {\n+        while let Some(_) = it.next() {\n+            println!(\"{:?}\", it.size_hint());\n+        }\n+    }\n+\n+    fn foo2<I: Iterator<Item = usize>>(mut it: I) {\n+        for e in it {\n+            println!(\"{:?}\", e);\n+        }\n+    }\n+}\n+\n+fn main() {\n+    Foo::foo1(vec![].into_iter());\n+    Foo::foo2(vec![].into_iter());\n+}"}, {"sha": "b000234ea59662dac9c06ad0e05d4d2a2562824b", "filename": "tests/ui/issue_2356.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/tests%2Fui%2Fissue_2356.rs", "raw_url": "https://github.com/rust-lang/rust/raw/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/tests%2Fui%2Fissue_2356.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissue_2356.rs?ref=911eb1f4cde3904e02fa8d2352ac7239b3fa6a32", "patch": "@@ -1,4 +1,6 @@\n+// run-rustfix\n #![deny(clippy::while_let_on_iterator)]\n+#![allow(unused_mut)]\n \n use std::iter::Iterator;\n "}, {"sha": "4e3ff7522e0bb7c346bcf4b2086792c0dfce4c2a", "filename": "tests/ui/issue_2356.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/tests%2Fui%2Fissue_2356.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/tests%2Fui%2Fissue_2356.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissue_2356.stderr?ref=911eb1f4cde3904e02fa8d2352ac7239b3fa6a32", "patch": "@@ -1,11 +1,11 @@\n error: this loop could be written as a `for` loop\n-  --> $DIR/issue_2356.rs:15:9\n+  --> $DIR/issue_2356.rs:17:9\n    |\n LL |         while let Some(e) = it.next() {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for e in it`\n    |\n note: the lint level is defined here\n-  --> $DIR/issue_2356.rs:1:9\n+  --> $DIR/issue_2356.rs:2:9\n    |\n LL | #![deny(clippy::while_let_on_iterator)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "1b6c2d92412185a30b5034e6336928b782d96537", "filename": "tests/ui/match_ref_pats.fixed", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/tests%2Fui%2Fmatch_ref_pats.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/tests%2Fui%2Fmatch_ref_pats.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_ref_pats.fixed?ref=911eb1f4cde3904e02fa8d2352ac7239b3fa6a32", "patch": "@@ -0,0 +1,118 @@\n+// run-rustfix\n+#![warn(clippy::match_ref_pats)]\n+#![allow(dead_code, unused_variables, clippy::equatable_if_let, clippy::enum_variant_names)]\n+\n+fn ref_pats() {\n+    {\n+        let v = &Some(0);\n+        match *v {\n+            Some(v) => println!(\"{:?}\", v),\n+            None => println!(\"none\"),\n+        }\n+        match v {\n+            // This doesn't trigger; we have a different pattern.\n+            &Some(v) => println!(\"some\"),\n+            other => println!(\"other\"),\n+        }\n+    }\n+    let tup = &(1, 2);\n+    match tup {\n+        &(v, 1) => println!(\"{}\", v),\n+        _ => println!(\"none\"),\n+    }\n+    // Special case: using `&` both in expr and pats.\n+    let w = Some(0);\n+    match w {\n+        Some(v) => println!(\"{:?}\", v),\n+        None => println!(\"none\"),\n+    }\n+    // False positive: only wildcard pattern.\n+    let w = Some(0);\n+    #[allow(clippy::match_single_binding)]\n+    match w {\n+        _ => println!(\"none\"),\n+    }\n+\n+    let a = &Some(0);\n+    if a.is_none() {\n+        println!(\"none\");\n+    }\n+\n+    let b = Some(0);\n+    if b.is_none() {\n+        println!(\"none\");\n+    }\n+}\n+\n+mod ice_3719 {\n+    macro_rules! foo_variant(\n+        ($idx:expr) => (Foo::get($idx).unwrap())\n+    );\n+\n+    enum Foo {\n+        A,\n+        B,\n+    }\n+\n+    impl Foo {\n+        fn get(idx: u8) -> Option<&'static Self> {\n+            match idx {\n+                0 => Some(&Foo::A),\n+                1 => Some(&Foo::B),\n+                _ => None,\n+            }\n+        }\n+    }\n+\n+    fn ice_3719() {\n+        // ICE #3719\n+        match foo_variant!(0) {\n+            &Foo::A => println!(\"A\"),\n+            _ => println!(\"Wild\"),\n+        }\n+    }\n+}\n+\n+mod issue_7740 {\n+    macro_rules! foobar_variant(\n+        ($idx:expr) => (FooBar::get($idx).unwrap())\n+    );\n+\n+    enum FooBar {\n+        Foo,\n+        Bar,\n+        FooBar,\n+        BarFoo,\n+    }\n+\n+    impl FooBar {\n+        fn get(idx: u8) -> Option<&'static Self> {\n+            match idx {\n+                0 => Some(&FooBar::Foo),\n+                1 => Some(&FooBar::Bar),\n+                2 => Some(&FooBar::FooBar),\n+                3 => Some(&FooBar::BarFoo),\n+                _ => None,\n+            }\n+        }\n+    }\n+\n+    fn issue_7740() {\n+        // Issue #7740\n+        match *foobar_variant!(0) {\n+            FooBar::Foo => println!(\"Foo\"),\n+            FooBar::Bar => println!(\"Bar\"),\n+            FooBar::FooBar => println!(\"FooBar\"),\n+            _ => println!(\"Wild\"),\n+        }\n+\n+        // This shouldn't trigger\n+        if let &FooBar::BarFoo = foobar_variant!(3) {\n+            println!(\"BarFoo\");\n+        } else {\n+            println!(\"Wild\");\n+        }\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "68dfac4e2e978ba44c018e17701be7e7c2569664", "filename": "tests/ui/match_ref_pats.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/tests%2Fui%2Fmatch_ref_pats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/tests%2Fui%2Fmatch_ref_pats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_ref_pats.rs?ref=911eb1f4cde3904e02fa8d2352ac7239b3fa6a32", "patch": "@@ -1,5 +1,6 @@\n+// run-rustfix\n #![warn(clippy::match_ref_pats)]\n-#![allow(clippy::equatable_if_let, clippy::enum_variant_names)]\n+#![allow(dead_code, unused_variables, clippy::equatable_if_let, clippy::enum_variant_names)]\n \n fn ref_pats() {\n     {"}, {"sha": "353f7399d9c27007744c4f2cf79905405052ef82", "filename": "tests/ui/match_ref_pats.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/tests%2Fui%2Fmatch_ref_pats.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/tests%2Fui%2Fmatch_ref_pats.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_ref_pats.stderr?ref=911eb1f4cde3904e02fa8d2352ac7239b3fa6a32", "patch": "@@ -1,5 +1,5 @@\n error: you don't need to add `&` to all patterns\n-  --> $DIR/match_ref_pats.rs:7:9\n+  --> $DIR/match_ref_pats.rs:8:9\n    |\n LL | /         match v {\n LL | |             &Some(v) => println!(\"{:?}\", v),\n@@ -16,7 +16,7 @@ LL ~             None => println!(\"none\"),\n    |\n \n error: you don't need to add `&` to both the expression and the patterns\n-  --> $DIR/match_ref_pats.rs:24:5\n+  --> $DIR/match_ref_pats.rs:25:5\n    |\n LL | /     match &w {\n LL | |         &Some(v) => println!(\"{:?}\", v),\n@@ -32,21 +32,21 @@ LL ~         None => println!(\"none\"),\n    |\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/match_ref_pats.rs:36:12\n+  --> $DIR/match_ref_pats.rs:37:12\n    |\n LL |     if let &None = a {\n    |     -------^^^^^---- help: try this: `if a.is_none()`\n    |\n    = note: `-D clippy::redundant-pattern-matching` implied by `-D warnings`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/match_ref_pats.rs:41:12\n+  --> $DIR/match_ref_pats.rs:42:12\n    |\n LL |     if let &None = &b {\n    |     -------^^^^^----- help: try this: `if b.is_none()`\n \n error: you don't need to add `&` to all patterns\n-  --> $DIR/match_ref_pats.rs:101:9\n+  --> $DIR/match_ref_pats.rs:102:9\n    |\n LL | /         match foobar_variant!(0) {\n LL | |             &FooBar::Foo => println!(\"Foo\"),"}, {"sha": "e436bcf495fd23042108e31312e2927694d42026", "filename": "tests/ui/match_str_case_mismatch.fixed", "status": "added", "additions": 186, "deletions": 0, "changes": 186, "blob_url": "https://github.com/rust-lang/rust/blob/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/tests%2Fui%2Fmatch_str_case_mismatch.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/tests%2Fui%2Fmatch_str_case_mismatch.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_str_case_mismatch.fixed?ref=911eb1f4cde3904e02fa8d2352ac7239b3fa6a32", "patch": "@@ -0,0 +1,186 @@\n+// run-rustfix\n+#![warn(clippy::match_str_case_mismatch)]\n+#![allow(dead_code)]\n+\n+// Valid\n+\n+fn as_str_match() {\n+    let var = \"BAR\";\n+\n+    match var.to_ascii_lowercase().as_str() {\n+        \"foo\" => {},\n+        \"bar\" => {},\n+        _ => {},\n+    }\n+}\n+\n+fn non_alphabetic() {\n+    let var = \"~!@#$%^&*()-_=+FOO\";\n+\n+    match var.to_ascii_lowercase().as_str() {\n+        \"1234567890\" => {},\n+        \"~!@#$%^&*()-_=+foo\" => {},\n+        \"\\n\\r\\t\\x7F\" => {},\n+        _ => {},\n+    }\n+}\n+\n+fn unicode_cased() {\n+    let var = \"\u0412\u041e\u0414\u042b\";\n+\n+    match var.to_lowercase().as_str() {\n+        \"\u6c34\" => {},\n+        \"\u03bd\u03b5\u03c1\u03cc\" => {},\n+        \"\u0432\u043e\u0434\u044b\" => {},\n+        \"\ubb3c\" => {},\n+        _ => {},\n+    }\n+}\n+\n+fn titlecase() {\n+    let var = \"Bar\u01f2\";\n+\n+    match var.to_lowercase().as_str() {\n+        \"foo\u01c9\" => {},\n+        \"bar\u01f3\" => {},\n+        _ => {},\n+    }\n+}\n+\n+fn no_case_equivalent() {\n+    let var = \"bar\u0281\";\n+\n+    match var.to_uppercase().as_str() {\n+        \"FOO\u0255\" => {},\n+        \"BAR\u0281\" => {},\n+        _ => {},\n+    }\n+}\n+\n+fn addrof_unary_match() {\n+    let var = \"BAR\";\n+\n+    match &*var.to_ascii_lowercase() {\n+        \"foo\" => {},\n+        \"bar\" => {},\n+        _ => {},\n+    }\n+}\n+\n+fn alternating_chain() {\n+    let var = \"BAR\";\n+\n+    match &*var\n+        .to_ascii_lowercase()\n+        .to_uppercase()\n+        .to_lowercase()\n+        .to_ascii_uppercase()\n+    {\n+        \"FOO\" => {},\n+        \"BAR\" => {},\n+        _ => {},\n+    }\n+}\n+\n+fn unrelated_method() {\n+    struct Item {\n+        a: String,\n+    }\n+\n+    impl Item {\n+        #[allow(clippy::wrong_self_convention)]\n+        fn to_lowercase(self) -> String {\n+            self.a\n+        }\n+    }\n+\n+    let item = Item { a: String::from(\"BAR\") };\n+\n+    match &*item.to_lowercase() {\n+        \"FOO\" => {},\n+        \"BAR\" => {},\n+        _ => {},\n+    }\n+}\n+\n+// Invalid\n+\n+fn as_str_match_mismatch() {\n+    let var = \"BAR\";\n+\n+    match var.to_ascii_lowercase().as_str() {\n+        \"foo\" => {},\n+        \"bar\" => {},\n+        _ => {},\n+    }\n+}\n+\n+fn non_alphabetic_mismatch() {\n+    let var = \"~!@#$%^&*()-_=+FOO\";\n+\n+    match var.to_ascii_lowercase().as_str() {\n+        \"1234567890\" => {},\n+        \"~!@#$%^&*()-_=+foo\" => {},\n+        \"\\n\\r\\t\\x7F\" => {},\n+        _ => {},\n+    }\n+}\n+\n+fn unicode_cased_mismatch() {\n+    let var = \"\u0412\u041e\u0414\u042b\";\n+\n+    match var.to_lowercase().as_str() {\n+        \"\u6c34\" => {},\n+        \"\u03bd\u03b5\u03c1\u03cc\" => {},\n+        \"\u0432\u043e\u0434\u044b\" => {},\n+        \"\ubb3c\" => {},\n+        _ => {},\n+    }\n+}\n+\n+fn titlecase_mismatch() {\n+    let var = \"Bar\u01f2\";\n+\n+    match var.to_lowercase().as_str() {\n+        \"foo\u01c9\" => {},\n+        \"bar\u01f3\" => {},\n+        _ => {},\n+    }\n+}\n+\n+fn no_case_equivalent_mismatch() {\n+    let var = \"bar\u0281\";\n+\n+    match var.to_uppercase().as_str() {\n+        \"FOO\u0255\" => {},\n+        \"BAR\u0281\" => {},\n+        _ => {},\n+    }\n+}\n+\n+fn addrof_unary_match_mismatch() {\n+    let var = \"BAR\";\n+\n+    match &*var.to_ascii_lowercase() {\n+        \"foo\" => {},\n+        \"bar\" => {},\n+        _ => {},\n+    }\n+}\n+\n+fn alternating_chain_mismatch() {\n+    let var = \"BAR\";\n+\n+    match &*var\n+        .to_ascii_lowercase()\n+        .to_uppercase()\n+        .to_lowercase()\n+        .to_ascii_uppercase()\n+    {\n+        \"FOO\" => {},\n+        \"BAR\" => {},\n+        _ => {},\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "92e2a000ade25077478a58ca265cbb6159dc5fd9", "filename": "tests/ui/match_str_case_mismatch.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/tests%2Fui%2Fmatch_str_case_mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/tests%2Fui%2Fmatch_str_case_mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_str_case_mismatch.rs?ref=911eb1f4cde3904e02fa8d2352ac7239b3fa6a32", "patch": "@@ -1,4 +1,6 @@\n+// run-rustfix\n #![warn(clippy::match_str_case_mismatch)]\n+#![allow(dead_code)]\n \n // Valid\n "}, {"sha": "197520a3d608174bb8e639643d55a185e2cfb37f", "filename": "tests/ui/match_str_case_mismatch.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/tests%2Fui%2Fmatch_str_case_mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/tests%2Fui%2Fmatch_str_case_mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_str_case_mismatch.stderr?ref=911eb1f4cde3904e02fa8d2352ac7239b3fa6a32", "patch": "@@ -1,5 +1,5 @@\n error: this `match` arm has a differing case than its expression\n-  --> $DIR/match_str_case_mismatch.rs:111:9\n+  --> $DIR/match_str_case_mismatch.rs:113:9\n    |\n LL |         \"Bar\" => {},\n    |         ^^^^^\n@@ -11,7 +11,7 @@ LL |         \"bar\" => {},\n    |         ~~~~~\n \n error: this `match` arm has a differing case than its expression\n-  --> $DIR/match_str_case_mismatch.rs:121:9\n+  --> $DIR/match_str_case_mismatch.rs:123:9\n    |\n LL |         \"~!@#$%^&*()-_=+Foo\" => {},\n    |         ^^^^^^^^^^^^^^^^^^^^\n@@ -22,7 +22,7 @@ LL |         \"~!@#$%^&*()-_=+foo\" => {},\n    |         ~~~~~~~~~~~~~~~~~~~~\n \n error: this `match` arm has a differing case than its expression\n-  --> $DIR/match_str_case_mismatch.rs:133:9\n+  --> $DIR/match_str_case_mismatch.rs:135:9\n    |\n LL |         \"\u0412\u043e\u0434\u044b\" => {},\n    |         ^^^^^^\n@@ -33,7 +33,7 @@ LL |         \"\u0432\u043e\u0434\u044b\" => {},\n    |         ~~~~~~\n \n error: this `match` arm has a differing case than its expression\n-  --> $DIR/match_str_case_mismatch.rs:144:9\n+  --> $DIR/match_str_case_mismatch.rs:146:9\n    |\n LL |         \"bar\u01f2\" => {},\n    |         ^^^^^^\n@@ -44,7 +44,7 @@ LL |         \"bar\u01f3\" => {},\n    |         ~~~~~~\n \n error: this `match` arm has a differing case than its expression\n-  --> $DIR/match_str_case_mismatch.rs:154:9\n+  --> $DIR/match_str_case_mismatch.rs:156:9\n    |\n LL |         \"bAR\u0281\" => {},\n    |         ^^^^^^\n@@ -55,7 +55,7 @@ LL |         \"BAR\u0281\" => {},\n    |         ~~~~~~\n \n error: this `match` arm has a differing case than its expression\n-  --> $DIR/match_str_case_mismatch.rs:164:9\n+  --> $DIR/match_str_case_mismatch.rs:166:9\n    |\n LL |         \"Bar\" => {},\n    |         ^^^^^\n@@ -66,7 +66,7 @@ LL |         \"bar\" => {},\n    |         ~~~~~\n \n error: this `match` arm has a differing case than its expression\n-  --> $DIR/match_str_case_mismatch.rs:179:9\n+  --> $DIR/match_str_case_mismatch.rs:181:9\n    |\n LL |         \"bAR\" => {},\n    |         ^^^^^"}, {"sha": "9666b2c84460a06f50f9dbb73209f586ca1238aa", "filename": "tests/ui/needless_late_init.fixed", "status": "added", "additions": 232, "deletions": 0, "changes": 232, "blob_url": "https://github.com/rust-lang/rust/blob/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/tests%2Fui%2Fneedless_late_init.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/tests%2Fui%2Fneedless_late_init.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_late_init.fixed?ref=911eb1f4cde3904e02fa8d2352ac7239b3fa6a32", "patch": "@@ -0,0 +1,232 @@\n+// run-rustfix\n+#![feature(let_chains)]\n+#![allow(unused, clippy::nonminimal_bool, clippy::let_unit_value, clippy::let_and_return)]\n+\n+use std::collections::{BTreeMap, BTreeSet, HashMap, HashSet};\n+use std::rc::Rc;\n+\n+struct SignificantDrop;\n+impl std::ops::Drop for SignificantDrop {\n+    fn drop(&mut self) {\n+        println!(\"dropped\");\n+    }\n+}\n+\n+fn main() {\n+    \n+    let n = 1;\n+    let a = match n {\n+        1 => \"one\",\n+        _ => {\n+            \"two\"\n+        },\n+    };\n+\n+    \n+    let b = if n == 3 {\n+        \"four\"\n+    } else {\n+        \"five\"\n+    };\n+\n+    \n+    let d = if true {\n+        let temp = 5;\n+        temp\n+    } else {\n+        15\n+    };\n+\n+    \n+    let e = if true {\n+        format!(\"{} {}\", a, b)\n+    } else {\n+        format!(\"{}\", n)\n+    };\n+\n+    \n+    let f = match 1 {\n+        1 => \"three\",\n+        _ => return,\n+    }; // has semi\n+\n+    \n+    let g: usize = if true {\n+        5\n+    } else {\n+        panic!();\n+    };\n+\n+    // Drop order only matters if both are significant\n+    \n+    let y = SignificantDrop;\n+    let x = 1;\n+\n+    \n+    let y = 1;\n+    let x = SignificantDrop;\n+\n+    \n+    // types that should be considered insignificant\n+    let y = 1;\n+    let y = \"2\";\n+    let y = String::new();\n+    let y = vec![3.0];\n+    let y = HashMap::<usize, usize>::new();\n+    let y = BTreeMap::<usize, usize>::new();\n+    let y = HashSet::<usize>::new();\n+    let y = BTreeSet::<usize>::new();\n+    let y = Box::new(4);\n+    let x = SignificantDrop;\n+}\n+\n+async fn in_async() -> &'static str {\n+    async fn f() -> &'static str {\n+        \"one\"\n+    }\n+\n+    \n+    let n = 1;\n+    let a = match n {\n+        1 => f().await,\n+        _ => {\n+            \"two\"\n+        },\n+    };\n+\n+    a\n+}\n+\n+const fn in_const() -> &'static str {\n+    const fn f() -> &'static str {\n+        \"one\"\n+    }\n+\n+    \n+    let n = 1;\n+    let a = match n {\n+        1 => f(),\n+        _ => {\n+            \"two\"\n+        },\n+    };\n+\n+    a\n+}\n+\n+fn does_not_lint() {\n+    let z;\n+    if false {\n+        z = 1;\n+    }\n+\n+    let x;\n+    let y;\n+    if true {\n+        x = 1;\n+    } else {\n+        y = 1;\n+    }\n+\n+    let mut x;\n+    if true {\n+        x = 5;\n+        x = 10 / x;\n+    } else {\n+        x = 2;\n+    }\n+\n+    let x;\n+    let _ = match 1 {\n+        1 => x = 10,\n+        _ => x = 20,\n+    };\n+\n+    // using tuples would be possible, but not always preferable\n+    let x;\n+    let y;\n+    if true {\n+        x = 1;\n+        y = 2;\n+    } else {\n+        x = 3;\n+        y = 4;\n+    }\n+\n+    // could match with a smarter heuristic to avoid multiple assignments\n+    let x;\n+    if true {\n+        let mut y = 5;\n+        y = 6;\n+        x = y;\n+    } else {\n+        x = 2;\n+    }\n+\n+    let (x, y);\n+    if true {\n+        x = 1;\n+    } else {\n+        x = 2;\n+    }\n+    y = 3;\n+\n+    macro_rules! assign {\n+        ($i:ident) => {\n+            $i = 1;\n+        };\n+    }\n+    let x;\n+    assign!(x);\n+\n+    let x;\n+    if true {\n+        assign!(x);\n+    } else {\n+        x = 2;\n+    }\n+\n+    macro_rules! in_macro {\n+        () => {\n+            let x;\n+            x = 1;\n+\n+            let x;\n+            if true {\n+                x = 1;\n+            } else {\n+                x = 2;\n+            }\n+        };\n+    }\n+    in_macro!();\n+\n+    // ignore if-lets - https://github.com/rust-lang/rust-clippy/issues/8613\n+    let x;\n+    if let Some(n) = Some(\"v\") {\n+        x = 1;\n+    } else {\n+        x = 2;\n+    }\n+\n+    let x;\n+    if true && let Some(n) = Some(\"let chains too\") {\n+        x = 1;\n+    } else {\n+        x = 2;\n+    }\n+\n+    // ignore mut bindings\n+    // https://github.com/shepmaster/twox-hash/blob/b169c16d86eb8ea4a296b0acb9d00ca7e3c3005f/src/sixty_four.rs#L88-L93\n+    // https://github.com/dtolnay/thiserror/blob/21c26903e29cb92ba1a7ff11e82ae2001646b60d/tests/test_generics.rs#L91-L100\n+    let mut x: usize;\n+    x = 1;\n+    x = 2;\n+    x = 3;\n+\n+    // should not move the declaration if `x` has a significant drop, and there\n+    // is another binding with a significant drop between it and the first usage\n+    let x;\n+    let y = SignificantDrop;\n+    x = SignificantDrop;\n+}"}, {"sha": "c0d11d306af55c008ae2e3dbfb8ad9d2f663c291", "filename": "tests/ui/needless_late_init.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/tests%2Fui%2Fneedless_late_init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/tests%2Fui%2Fneedless_late_init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_late_init.rs?ref=911eb1f4cde3904e02fa8d2352ac7239b3fa6a32", "patch": "@@ -1,5 +1,6 @@\n+// run-rustfix\n #![feature(let_chains)]\n-#![allow(unused, clippy::nonminimal_bool, clippy::let_unit_value)]\n+#![allow(unused, clippy::nonminimal_bool, clippy::let_unit_value, clippy::let_and_return)]\n \n use std::collections::{BTreeMap, BTreeSet, HashMap, HashSet};\n use std::rc::Rc;"}, {"sha": "fb9858f4a7c33a4ab09071343d981cdc79af4f4d", "filename": "tests/ui/needless_late_init.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/tests%2Fui%2Fneedless_late_init.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/tests%2Fui%2Fneedless_late_init.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_late_init.stderr?ref=911eb1f4cde3904e02fa8d2352ac7239b3fa6a32", "patch": "@@ -1,5 +1,5 @@\n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:15:5\n+  --> $DIR/needless_late_init.rs:16:5\n    |\n LL |     let a;\n    |     ^^^^^^\n@@ -21,7 +21,7 @@ LL |     };\n    |      +\n \n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:24:5\n+  --> $DIR/needless_late_init.rs:25:5\n    |\n LL |     let b;\n    |     ^^^^^^\n@@ -42,7 +42,7 @@ LL |     };\n    |      +\n \n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:31:5\n+  --> $DIR/needless_late_init.rs:32:5\n    |\n LL |     let d;\n    |     ^^^^^^\n@@ -63,7 +63,7 @@ LL |     };\n    |      +\n \n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:39:5\n+  --> $DIR/needless_late_init.rs:40:5\n    |\n LL |     let e;\n    |     ^^^^^^\n@@ -84,7 +84,7 @@ LL |     };\n    |      +\n \n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:46:5\n+  --> $DIR/needless_late_init.rs:47:5\n    |\n LL |     let f;\n    |     ^^^^^^\n@@ -100,7 +100,7 @@ LL +         1 => \"three\",\n    | \n \n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:52:5\n+  --> $DIR/needless_late_init.rs:53:5\n    |\n LL |     let g: usize;\n    |     ^^^^^^^^^^^^^\n@@ -120,7 +120,7 @@ LL |     };\n    |      +\n \n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:60:5\n+  --> $DIR/needless_late_init.rs:61:5\n    |\n LL |     let x;\n    |     ^^^^^^ created here\n@@ -134,7 +134,7 @@ LL |     let x = 1;\n    |     ~~~~~\n \n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:64:5\n+  --> $DIR/needless_late_init.rs:65:5\n    |\n LL |     let x;\n    |     ^^^^^^ created here\n@@ -148,7 +148,7 @@ LL |     let x = SignificantDrop;\n    |     ~~~~~\n \n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:68:5\n+  --> $DIR/needless_late_init.rs:69:5\n    |\n LL |     let x;\n    |     ^^^^^^ created here\n@@ -162,7 +162,7 @@ LL |     let x = SignificantDrop;\n    |     ~~~~~\n \n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:87:5\n+  --> $DIR/needless_late_init.rs:88:5\n    |\n LL |     let a;\n    |     ^^^^^^\n@@ -183,7 +183,7 @@ LL |     };\n    |      +\n \n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:104:5\n+  --> $DIR/needless_late_init.rs:105:5\n    |\n LL |     let a;\n    |     ^^^^^^"}, {"sha": "aad44089de499507c09078348682efd8aad2a29b", "filename": "tests/ui/nonminimal_bool_methods.fixed", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/tests%2Fui%2Fnonminimal_bool_methods.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/tests%2Fui%2Fnonminimal_bool_methods.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnonminimal_bool_methods.fixed?ref=911eb1f4cde3904e02fa8d2352ac7239b3fa6a32", "patch": "@@ -0,0 +1,111 @@\n+// run-rustfix\n+#![allow(unused, clippy::diverging_sub_expression)]\n+#![warn(clippy::nonminimal_bool)]\n+\n+fn methods_with_negation() {\n+    let a: Option<i32> = unimplemented!();\n+    let b: Result<i32, i32> = unimplemented!();\n+    let _ = a.is_some();\n+    let _ = a.is_none();\n+    let _ = a.is_none();\n+    let _ = a.is_some();\n+    let _ = b.is_err();\n+    let _ = b.is_ok();\n+    let _ = b.is_ok();\n+    let _ = b.is_err();\n+    let c = false;\n+    let _ = a.is_none() || c;\n+    let _ = a.is_none() && c;\n+    let _ = !(!c ^ c) || a.is_none();\n+    let _ = (!c ^ c) || a.is_none();\n+    let _ = !c ^ c || a.is_none();\n+}\n+\n+// Simplified versions of https://github.com/rust-lang/rust-clippy/issues/2638\n+// clippy::nonminimal_bool should only check the built-in Result and Some type, not\n+// any other types like the following.\n+enum CustomResultOk<E> {\n+    Ok,\n+    Err(E),\n+}\n+enum CustomResultErr<E> {\n+    Ok,\n+    Err(E),\n+}\n+enum CustomSomeSome<T> {\n+    Some(T),\n+    None,\n+}\n+enum CustomSomeNone<T> {\n+    Some(T),\n+    None,\n+}\n+\n+impl<E> CustomResultOk<E> {\n+    pub fn is_ok(&self) -> bool {\n+        true\n+    }\n+}\n+\n+impl<E> CustomResultErr<E> {\n+    pub fn is_err(&self) -> bool {\n+        true\n+    }\n+}\n+\n+impl<T> CustomSomeSome<T> {\n+    pub fn is_some(&self) -> bool {\n+        true\n+    }\n+}\n+\n+impl<T> CustomSomeNone<T> {\n+    pub fn is_none(&self) -> bool {\n+        true\n+    }\n+}\n+\n+fn dont_warn_for_custom_methods_with_negation() {\n+    let res = CustomResultOk::Err(\"Error\");\n+    // Should not warn and suggest 'is_err()' because the type does not\n+    // implement is_err().\n+    if !res.is_ok() {}\n+\n+    let res = CustomResultErr::Err(\"Error\");\n+    // Should not warn and suggest 'is_ok()' because the type does not\n+    // implement is_ok().\n+    if !res.is_err() {}\n+\n+    let res = CustomSomeSome::Some(\"thing\");\n+    // Should not warn and suggest 'is_none()' because the type does not\n+    // implement is_none().\n+    if !res.is_some() {}\n+\n+    let res = CustomSomeNone::Some(\"thing\");\n+    // Should not warn and suggest 'is_some()' because the type does not\n+    // implement is_some().\n+    if !res.is_none() {}\n+}\n+\n+// Only Built-in Result and Some types should suggest the negated alternative\n+fn warn_for_built_in_methods_with_negation() {\n+    let res: Result<usize, usize> = Ok(1);\n+    if res.is_err() {}\n+    if res.is_ok() {}\n+\n+    let res = Some(1);\n+    if res.is_none() {}\n+    if res.is_some() {}\n+}\n+\n+#[allow(clippy::neg_cmp_op_on_partial_ord)]\n+fn dont_warn_for_negated_partial_ord_comparison() {\n+    let a: f64 = unimplemented!();\n+    let b: f64 = unimplemented!();\n+    let _ = !(a < b);\n+    let _ = !(a <= b);\n+    let _ = !(a > b);\n+    let _ = !(a >= b);\n+}\n+\n+fn main() {}"}, {"sha": "b9074da842706c6f3f80d484baaa7013ea893ae5", "filename": "tests/ui/nonminimal_bool_methods.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/tests%2Fui%2Fnonminimal_bool_methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/tests%2Fui%2Fnonminimal_bool_methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnonminimal_bool_methods.rs?ref=911eb1f4cde3904e02fa8d2352ac7239b3fa6a32", "patch": "@@ -1,3 +1,4 @@\n+// run-rustfix\n #![allow(unused, clippy::diverging_sub_expression)]\n #![warn(clippy::nonminimal_bool)]\n "}, {"sha": "21b84db85890964b9dec175edbe00ae81a7a8b9b", "filename": "tests/ui/nonminimal_bool_methods.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/tests%2Fui%2Fnonminimal_bool_methods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/tests%2Fui%2Fnonminimal_bool_methods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnonminimal_bool_methods.stderr?ref=911eb1f4cde3904e02fa8d2352ac7239b3fa6a32", "patch": "@@ -1,79 +1,79 @@\n error: this boolean expression can be simplified\n-  --> $DIR/nonminimal_bool_methods.rs:8:13\n+  --> $DIR/nonminimal_bool_methods.rs:9:13\n    |\n LL |     let _ = !a.is_some();\n    |             ^^^^^^^^^^^^ help: try: `a.is_none()`\n    |\n    = note: `-D clippy::nonminimal-bool` implied by `-D warnings`\n \n error: this boolean expression can be simplified\n-  --> $DIR/nonminimal_bool_methods.rs:10:13\n+  --> $DIR/nonminimal_bool_methods.rs:11:13\n    |\n LL |     let _ = !a.is_none();\n    |             ^^^^^^^^^^^^ help: try: `a.is_some()`\n \n error: this boolean expression can be simplified\n-  --> $DIR/nonminimal_bool_methods.rs:12:13\n+  --> $DIR/nonminimal_bool_methods.rs:13:13\n    |\n LL |     let _ = !b.is_err();\n    |             ^^^^^^^^^^^ help: try: `b.is_ok()`\n \n error: this boolean expression can be simplified\n-  --> $DIR/nonminimal_bool_methods.rs:14:13\n+  --> $DIR/nonminimal_bool_methods.rs:15:13\n    |\n LL |     let _ = !b.is_ok();\n    |             ^^^^^^^^^^ help: try: `b.is_err()`\n \n error: this boolean expression can be simplified\n-  --> $DIR/nonminimal_bool_methods.rs:16:13\n+  --> $DIR/nonminimal_bool_methods.rs:17:13\n    |\n LL |     let _ = !(a.is_some() && !c);\n    |             ^^^^^^^^^^^^^^^^^^^^ help: try: `a.is_none() || c`\n \n error: this boolean expression can be simplified\n-  --> $DIR/nonminimal_bool_methods.rs:17:13\n+  --> $DIR/nonminimal_bool_methods.rs:18:13\n    |\n LL |     let _ = !(a.is_some() || !c);\n    |             ^^^^^^^^^^^^^^^^^^^^ help: try: `a.is_none() && c`\n \n error: this boolean expression can be simplified\n-  --> $DIR/nonminimal_bool_methods.rs:18:26\n+  --> $DIR/nonminimal_bool_methods.rs:19:26\n    |\n LL |     let _ = !(!c ^ c) || !a.is_some();\n    |                          ^^^^^^^^^^^^ help: try: `a.is_none()`\n \n error: this boolean expression can be simplified\n-  --> $DIR/nonminimal_bool_methods.rs:19:25\n+  --> $DIR/nonminimal_bool_methods.rs:20:25\n    |\n LL |     let _ = (!c ^ c) || !a.is_some();\n    |                         ^^^^^^^^^^^^ help: try: `a.is_none()`\n \n error: this boolean expression can be simplified\n-  --> $DIR/nonminimal_bool_methods.rs:20:23\n+  --> $DIR/nonminimal_bool_methods.rs:21:23\n    |\n LL |     let _ = !c ^ c || !a.is_some();\n    |                       ^^^^^^^^^^^^ help: try: `a.is_none()`\n \n error: this boolean expression can be simplified\n-  --> $DIR/nonminimal_bool_methods.rs:92:8\n+  --> $DIR/nonminimal_bool_methods.rs:93:8\n    |\n LL |     if !res.is_ok() {}\n    |        ^^^^^^^^^^^^ help: try: `res.is_err()`\n \n error: this boolean expression can be simplified\n-  --> $DIR/nonminimal_bool_methods.rs:93:8\n+  --> $DIR/nonminimal_bool_methods.rs:94:8\n    |\n LL |     if !res.is_err() {}\n    |        ^^^^^^^^^^^^^ help: try: `res.is_ok()`\n \n error: this boolean expression can be simplified\n-  --> $DIR/nonminimal_bool_methods.rs:96:8\n+  --> $DIR/nonminimal_bool_methods.rs:97:8\n    |\n LL |     if !res.is_some() {}\n    |        ^^^^^^^^^^^^^^ help: try: `res.is_none()`\n \n error: this boolean expression can be simplified\n-  --> $DIR/nonminimal_bool_methods.rs:97:8\n+  --> $DIR/nonminimal_bool_methods.rs:98:8\n    |\n LL |     if !res.is_none() {}\n    |        ^^^^^^^^^^^^^^ help: try: `res.is_some()`"}, {"sha": "8910c01b1fcf9ebdee2d0eff39a0e864466172f6", "filename": "tests/ui/rc_buffer.fixed", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/tests%2Fui%2Frc_buffer.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/tests%2Fui%2Frc_buffer.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frc_buffer.fixed?ref=911eb1f4cde3904e02fa8d2352ac7239b3fa6a32", "patch": "@@ -0,0 +1,28 @@\n+// run-rustfix\n+#![warn(clippy::rc_buffer)]\n+#![allow(dead_code, unused_imports)]\n+\n+use std::cell::RefCell;\n+use std::ffi::OsString;\n+use std::path::PathBuf;\n+use std::rc::Rc;\n+\n+struct S {\n+    // triggers lint\n+    bad1: Rc<str>,\n+    bad2: Rc<std::path::Path>,\n+    bad3: Rc<[u8]>,\n+    bad4: Rc<std::ffi::OsStr>,\n+    // does not trigger lint\n+    good1: Rc<RefCell<String>>,\n+}\n+\n+// triggers lint\n+fn func_bad1(_: Rc<str>) {}\n+fn func_bad2(_: Rc<std::path::Path>) {}\n+fn func_bad3(_: Rc<[u8]>) {}\n+fn func_bad4(_: Rc<std::ffi::OsStr>) {}\n+// does not trigger lint\n+fn func_good1(_: Rc<RefCell<String>>) {}\n+\n+fn main() {}"}, {"sha": "1e63a43262ec197156ecace133090bf58a70c197", "filename": "tests/ui/rc_buffer.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/tests%2Fui%2Frc_buffer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/tests%2Fui%2Frc_buffer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frc_buffer.rs?ref=911eb1f4cde3904e02fa8d2352ac7239b3fa6a32", "patch": "@@ -1,4 +1,6 @@\n+// run-rustfix\n #![warn(clippy::rc_buffer)]\n+#![allow(dead_code, unused_imports)]\n \n use std::cell::RefCell;\n use std::ffi::OsString;"}, {"sha": "9ed028e3df41bf78e3f7c4d7f75cfe098ffa4b19", "filename": "tests/ui/rc_buffer.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/tests%2Fui%2Frc_buffer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/tests%2Fui%2Frc_buffer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frc_buffer.stderr?ref=911eb1f4cde3904e02fa8d2352ac7239b3fa6a32", "patch": "@@ -1,49 +1,49 @@\n error: usage of `Rc<T>` when T is a buffer type\n-  --> $DIR/rc_buffer.rs:10:11\n+  --> $DIR/rc_buffer.rs:12:11\n    |\n LL |     bad1: Rc<String>,\n    |           ^^^^^^^^^^ help: try: `Rc<str>`\n    |\n    = note: `-D clippy::rc-buffer` implied by `-D warnings`\n \n error: usage of `Rc<T>` when T is a buffer type\n-  --> $DIR/rc_buffer.rs:11:11\n+  --> $DIR/rc_buffer.rs:13:11\n    |\n LL |     bad2: Rc<PathBuf>,\n    |           ^^^^^^^^^^^ help: try: `Rc<std::path::Path>`\n \n error: usage of `Rc<T>` when T is a buffer type\n-  --> $DIR/rc_buffer.rs:12:11\n+  --> $DIR/rc_buffer.rs:14:11\n    |\n LL |     bad3: Rc<Vec<u8>>,\n    |           ^^^^^^^^^^^ help: try: `Rc<[u8]>`\n \n error: usage of `Rc<T>` when T is a buffer type\n-  --> $DIR/rc_buffer.rs:13:11\n+  --> $DIR/rc_buffer.rs:15:11\n    |\n LL |     bad4: Rc<OsString>,\n    |           ^^^^^^^^^^^^ help: try: `Rc<std::ffi::OsStr>`\n \n error: usage of `Rc<T>` when T is a buffer type\n-  --> $DIR/rc_buffer.rs:19:17\n+  --> $DIR/rc_buffer.rs:21:17\n    |\n LL | fn func_bad1(_: Rc<String>) {}\n    |                 ^^^^^^^^^^ help: try: `Rc<str>`\n \n error: usage of `Rc<T>` when T is a buffer type\n-  --> $DIR/rc_buffer.rs:20:17\n+  --> $DIR/rc_buffer.rs:22:17\n    |\n LL | fn func_bad2(_: Rc<PathBuf>) {}\n    |                 ^^^^^^^^^^^ help: try: `Rc<std::path::Path>`\n \n error: usage of `Rc<T>` when T is a buffer type\n-  --> $DIR/rc_buffer.rs:21:17\n+  --> $DIR/rc_buffer.rs:23:17\n    |\n LL | fn func_bad3(_: Rc<Vec<u8>>) {}\n    |                 ^^^^^^^^^^^ help: try: `Rc<[u8]>`\n \n error: usage of `Rc<T>` when T is a buffer type\n-  --> $DIR/rc_buffer.rs:22:17\n+  --> $DIR/rc_buffer.rs:24:17\n    |\n LL | fn func_bad4(_: Rc<OsString>) {}\n    |                 ^^^^^^^^^^^^ help: try: `Rc<std::ffi::OsStr>`"}, {"sha": "13dd6f5fcd186a4d18d9ac6228d0b369be37d9cf", "filename": "tests/ui/rc_buffer_arc.fixed", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/tests%2Fui%2Frc_buffer_arc.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/tests%2Fui%2Frc_buffer_arc.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frc_buffer_arc.fixed?ref=911eb1f4cde3904e02fa8d2352ac7239b3fa6a32", "patch": "@@ -0,0 +1,27 @@\n+// run-rustfix\n+#![warn(clippy::rc_buffer)]\n+#![allow(dead_code, unused_imports)]\n+\n+use std::ffi::OsString;\n+use std::path::PathBuf;\n+use std::sync::{Arc, Mutex};\n+\n+struct S {\n+    // triggers lint\n+    bad1: Arc<str>,\n+    bad2: Arc<std::path::Path>,\n+    bad3: Arc<[u8]>,\n+    bad4: Arc<std::ffi::OsStr>,\n+    // does not trigger lint\n+    good1: Arc<Mutex<String>>,\n+}\n+\n+// triggers lint\n+fn func_bad1(_: Arc<str>) {}\n+fn func_bad2(_: Arc<std::path::Path>) {}\n+fn func_bad3(_: Arc<[u8]>) {}\n+fn func_bad4(_: Arc<std::ffi::OsStr>) {}\n+// does not trigger lint\n+fn func_good1(_: Arc<Mutex<String>>) {}\n+\n+fn main() {}"}, {"sha": "1a521bfeb7c8661f3a7fdabbc6759e38662e235d", "filename": "tests/ui/rc_buffer_arc.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/tests%2Fui%2Frc_buffer_arc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/tests%2Fui%2Frc_buffer_arc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frc_buffer_arc.rs?ref=911eb1f4cde3904e02fa8d2352ac7239b3fa6a32", "patch": "@@ -1,4 +1,6 @@\n+// run-rustfix\n #![warn(clippy::rc_buffer)]\n+#![allow(dead_code, unused_imports)]\n \n use std::ffi::OsString;\n use std::path::PathBuf;"}, {"sha": "911feea73529dcdc4f0c44bcad03125c961662ed", "filename": "tests/ui/rc_buffer_arc.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/tests%2Fui%2Frc_buffer_arc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/tests%2Fui%2Frc_buffer_arc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frc_buffer_arc.stderr?ref=911eb1f4cde3904e02fa8d2352ac7239b3fa6a32", "patch": "@@ -1,49 +1,49 @@\n error: usage of `Arc<T>` when T is a buffer type\n-  --> $DIR/rc_buffer_arc.rs:9:11\n+  --> $DIR/rc_buffer_arc.rs:11:11\n    |\n LL |     bad1: Arc<String>,\n    |           ^^^^^^^^^^^ help: try: `Arc<str>`\n    |\n    = note: `-D clippy::rc-buffer` implied by `-D warnings`\n \n error: usage of `Arc<T>` when T is a buffer type\n-  --> $DIR/rc_buffer_arc.rs:10:11\n+  --> $DIR/rc_buffer_arc.rs:12:11\n    |\n LL |     bad2: Arc<PathBuf>,\n    |           ^^^^^^^^^^^^ help: try: `Arc<std::path::Path>`\n \n error: usage of `Arc<T>` when T is a buffer type\n-  --> $DIR/rc_buffer_arc.rs:11:11\n+  --> $DIR/rc_buffer_arc.rs:13:11\n    |\n LL |     bad3: Arc<Vec<u8>>,\n    |           ^^^^^^^^^^^^ help: try: `Arc<[u8]>`\n \n error: usage of `Arc<T>` when T is a buffer type\n-  --> $DIR/rc_buffer_arc.rs:12:11\n+  --> $DIR/rc_buffer_arc.rs:14:11\n    |\n LL |     bad4: Arc<OsString>,\n    |           ^^^^^^^^^^^^^ help: try: `Arc<std::ffi::OsStr>`\n \n error: usage of `Arc<T>` when T is a buffer type\n-  --> $DIR/rc_buffer_arc.rs:18:17\n+  --> $DIR/rc_buffer_arc.rs:20:17\n    |\n LL | fn func_bad1(_: Arc<String>) {}\n    |                 ^^^^^^^^^^^ help: try: `Arc<str>`\n \n error: usage of `Arc<T>` when T is a buffer type\n-  --> $DIR/rc_buffer_arc.rs:19:17\n+  --> $DIR/rc_buffer_arc.rs:21:17\n    |\n LL | fn func_bad2(_: Arc<PathBuf>) {}\n    |                 ^^^^^^^^^^^^ help: try: `Arc<std::path::Path>`\n \n error: usage of `Arc<T>` when T is a buffer type\n-  --> $DIR/rc_buffer_arc.rs:20:17\n+  --> $DIR/rc_buffer_arc.rs:22:17\n    |\n LL | fn func_bad3(_: Arc<Vec<u8>>) {}\n    |                 ^^^^^^^^^^^^ help: try: `Arc<[u8]>`\n \n error: usage of `Arc<T>` when T is a buffer type\n-  --> $DIR/rc_buffer_arc.rs:21:17\n+  --> $DIR/rc_buffer_arc.rs:23:17\n    |\n LL | fn func_bad4(_: Arc<OsString>) {}\n    |                 ^^^^^^^^^^^^^ help: try: `Arc<std::ffi::OsStr>`"}, {"sha": "ede8a39fed718f9143223ebe1c1f89aa5363fbde", "filename": "tests/ui/suspicious_operation_groupings.fixed", "status": "added", "additions": 209, "deletions": 0, "changes": 209, "blob_url": "https://github.com/rust-lang/rust/blob/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/tests%2Fui%2Fsuspicious_operation_groupings.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/tests%2Fui%2Fsuspicious_operation_groupings.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuspicious_operation_groupings.fixed?ref=911eb1f4cde3904e02fa8d2352ac7239b3fa6a32", "patch": "@@ -0,0 +1,209 @@\n+// run-rustfix\n+#![warn(clippy::suspicious_operation_groupings)]\n+#![allow(dead_code, unused_parens, clippy::eq_op)]\n+\n+struct Vec3 {\n+    x: f64,\n+    y: f64,\n+    z: f64,\n+}\n+\n+impl Eq for Vec3 {}\n+\n+impl PartialEq for Vec3 {\n+    fn eq(&self, other: &Self) -> bool {\n+        // This should trigger the lint because `self.x` is compared to `other.y`\n+        self.x == other.x && self.y == other.y && self.z == other.z\n+    }\n+}\n+\n+struct S {\n+    a: i32,\n+    b: i32,\n+    c: i32,\n+    d: i32,\n+}\n+\n+fn buggy_ab_cmp(s1: &S, s2: &S) -> bool {\n+    // There's no `s1.b`\n+    s1.a < s2.a && s1.b < s2.b\n+}\n+\n+struct SaOnly {\n+    a: i32,\n+}\n+\n+impl S {\n+    fn a(&self) -> i32 {\n+        0\n+    }\n+}\n+\n+fn do_not_give_bad_suggestions_for_this_unusual_expr(s1: &S, s2: &SaOnly) -> bool {\n+    // This is superficially similar to `buggy_ab_cmp`, but we should not suggest\n+    // `s2.b` since that is invalid.\n+    s1.a < s2.a && s1.a() < s1.b\n+}\n+\n+fn do_not_give_bad_suggestions_for_this_macro_expr(s1: &S, s2: &SaOnly) -> bool {\n+    macro_rules! s1 {\n+        () => {\n+            S {\n+                a: 1,\n+                b: 1,\n+                c: 1,\n+                d: 1,\n+            }\n+        };\n+    }\n+\n+    // This is superficially similar to `buggy_ab_cmp`, but we should not suggest\n+    // `s2.b` since that is invalid.\n+    s1.a < s2.a && s1!().a < s1.b\n+}\n+\n+fn do_not_give_bad_suggestions_for_this_incorrect_expr(s1: &S, s2: &SaOnly) -> bool {\n+    // There's two `s1.b`, but we should not suggest `s2.b` since that is invalid\n+    s1.a < s2.a && s1.b < s1.b\n+}\n+\n+fn permissable(s1: &S, s2: &S) -> bool {\n+    // Something like this seems like it might actually be what is desired.\n+    s1.a == s2.b\n+}\n+\n+fn non_boolean_operators(s1: &S, s2: &S) -> i32 {\n+    // There's no `s2.c`\n+    s1.a * s2.a + s1.b * s2.b + s1.c * s2.c + s1.d * s2.d\n+}\n+\n+fn odd_number_of_pairs(s1: &S, s2: &S) -> i32 {\n+    // There's no `s2.b`\n+    s1.a * s2.a + s1.b * s2.b + s1.c * s2.c\n+}\n+\n+fn not_caught_by_eq_op_middle_change_left(s1: &S, s2: &S) -> i32 {\n+    // There's no `s1.b`\n+    s1.a * s2.a + s1.b * s2.b + s1.c * s2.c\n+}\n+\n+fn not_caught_by_eq_op_middle_change_right(s1: &S, s2: &S) -> i32 {\n+    // There's no `s2.b`\n+    s1.a * s2.a + s1.b * s2.b + s1.c * s2.c\n+}\n+\n+fn not_caught_by_eq_op_start(s1: &S, s2: &S) -> i32 {\n+    // There's no `s2.a`\n+    s1.a * s2.a + s1.b * s2.b + s1.c * s2.c\n+}\n+\n+fn not_caught_by_eq_op_end(s1: &S, s2: &S) -> i32 {\n+    // There's no `s2.c`\n+    s1.a * s2.a + s1.b * s2.b + s1.c * s2.c\n+}\n+\n+fn the_cross_product_should_not_lint(s1: &S, s2: &S) -> (i32, i32, i32) {\n+    (\n+        s1.b * s2.c - s1.c * s2.b,\n+        s1.c * s2.a - s1.a * s2.c,\n+        s1.a * s2.b - s1.b * s2.a,\n+    )\n+}\n+\n+fn outer_parens_simple(s1: &S, s2: &S) -> i32 {\n+    // There's no `s2.b`\n+    (s1.a * s2.a + s1.b * s2.b)\n+}\n+\n+fn outer_parens(s1: &S, s2: &S) -> i32 {\n+    // There's no `s2.c`\n+    (s1.a * s2.a + s1.b * s2.b + s1.c * s2.c + s1.d * s2.d)\n+}\n+\n+fn inner_parens(s1: &S, s2: &S) -> i32 {\n+    // There's no `s2.c`\n+    (s1.a * s2.a) + (s1.b * s2.b) + (s1.c * s2.c) + (s1.d * s2.d)\n+}\n+\n+fn outer_and_some_inner_parens(s1: &S, s2: &S) -> i32 {\n+    // There's no `s2.c`\n+    ((s1.a * s2.a) + (s1.b * s2.b) + (s1.c * s2.c) + (s1.d * s2.d))\n+}\n+\n+fn all_parens_balanced_tree(s1: &S, s2: &S) -> i32 {\n+    // There's no `s2.c`\n+    (((s1.a * s2.a) + (s1.b * s2.b)) + ((s1.c * s2.c) + (s1.d * s2.d)))\n+}\n+\n+fn all_parens_left_tree(s1: &S, s2: &S) -> i32 {\n+    // There's no `s2.c`\n+    (((s1.a * s2.a) + (s1.b * s2.b) + (s1.c * s2.c)) + (s1.d * s2.d))\n+}\n+\n+fn all_parens_right_tree(s1: &S, s2: &S) -> i32 {\n+    // There's no `s2.c`\n+    ((s1.a * s2.a) + ((s1.b * s2.b) + (s1.c * s2.c) + (s1.d * s2.d)))\n+}\n+\n+fn inside_other_binop_expression(s1: &S, s2: &S) -> i32 {\n+    // There's no `s1.b`\n+    (s1.a * s2.a + s1.b * s2.b) / 2\n+}\n+\n+fn inside_function_call(s1: &S, s2: &S) -> i32 {\n+    // There's no `s1.b`\n+    i32::swap_bytes(s1.a * s2.a + s1.b * s2.b)\n+}\n+\n+fn inside_larger_boolean_expression(s1: &S, s2: &S) -> bool {\n+    // There's no `s1.c`\n+    s1.a > 0 && s1.b > 0 && s1.c == s2.c && s1.d == s2.d\n+}\n+\n+fn inside_larger_boolean_expression_with_unsorted_ops(s1: &S, s2: &S) -> bool {\n+    // There's no `s1.c`\n+    s1.a > 0 && s1.c == s2.c && s1.b > 0 && s1.d == s2.d\n+}\n+\n+struct Nested {\n+    inner: ((i32,), (i32,), (i32,)),\n+}\n+\n+fn changed_middle_ident(n1: &Nested, n2: &Nested) -> bool {\n+    // There's no `n2.inner.2.0`\n+    (n1.inner.0).0 == (n2.inner.0).0 && (n1.inner.1).0 == (n2.inner.1).0 && (n1.inner.2).0 == (n2.inner.2).0\n+}\n+\n+// `eq_op` should catch this one.\n+fn changed_initial_ident(n1: &Nested, n2: &Nested) -> bool {\n+    // There's no `n2.inner.0.0`\n+    (n1.inner.0).0 == (n1.inner.0).0 && (n1.inner.1).0 == (n2.inner.1).0 && (n1.inner.2).0 == (n2.inner.2).0\n+}\n+\n+fn inside_fn_with_similar_expression(s1: &S, s2: &S, strict: bool) -> bool {\n+    if strict {\n+        s1.a < s2.a && s1.b < s2.b\n+    } else {\n+        // There's no `s1.b` in this subexpression\n+        s1.a <= s2.a && s1.b <= s2.b\n+    }\n+}\n+\n+fn inside_an_if_statement(s1: &mut S, s2: &S) {\n+    // There's no `s1.b`\n+    if s1.a < s2.a && s1.b < s2.b {\n+        s1.c = s2.c;\n+    }\n+}\n+\n+fn maximum_unary_minus_right_tree(s1: &S, s2: &S) -> i32 {\n+    // There's no `s2.c`\n+    -(-(-s1.a * -s2.a) + (-(-s1.b * -s2.b) + -(-s1.c * -s2.c) + -(-s1.d * -s2.d)))\n+}\n+\n+fn unary_minus_and_an_if_expression(s1: &S, s2: &S) -> i32 {\n+    // There's no `s1.b`\n+    -(if -s1.a < -s2.a && -s1.b < -s2.b { s1.c } else { s2.a })\n+}\n+\n+fn main() {}"}, {"sha": "26ce97bb37f84b5bf07ed1dfd52721e83a92517e", "filename": "tests/ui/suspicious_operation_groupings.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/tests%2Fui%2Fsuspicious_operation_groupings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/tests%2Fui%2Fsuspicious_operation_groupings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuspicious_operation_groupings.rs?ref=911eb1f4cde3904e02fa8d2352ac7239b3fa6a32", "patch": "@@ -1,5 +1,6 @@\n+// run-rustfix\n #![warn(clippy::suspicious_operation_groupings)]\n-#![allow(clippy::eq_op)]\n+#![allow(dead_code, unused_parens, clippy::eq_op)]\n \n struct Vec3 {\n     x: f64,"}, {"sha": "29f229245fed305d0477825641094deff7363c40", "filename": "tests/ui/suspicious_operation_groupings.stderr", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/tests%2Fui%2Fsuspicious_operation_groupings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/tests%2Fui%2Fsuspicious_operation_groupings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuspicious_operation_groupings.stderr?ref=911eb1f4cde3904e02fa8d2352ac7239b3fa6a32", "patch": "@@ -1,157 +1,157 @@\n error: this sequence of operators looks suspiciously like a bug\n-  --> $DIR/suspicious_operation_groupings.rs:15:9\n+  --> $DIR/suspicious_operation_groupings.rs:16:9\n    |\n LL |         self.x == other.y && self.y == other.y && self.z == other.z\n    |         ^^^^^^^^^^^^^^^^^ help: did you mean: `self.x == other.x`\n    |\n    = note: `-D clippy::suspicious-operation-groupings` implied by `-D warnings`\n \n error: this sequence of operators looks suspiciously like a bug\n-  --> $DIR/suspicious_operation_groupings.rs:28:20\n+  --> $DIR/suspicious_operation_groupings.rs:29:20\n    |\n LL |     s1.a < s2.a && s1.a < s2.b\n    |                    ^^^^^^^^^^^ help: did you mean: `s1.b < s2.b`\n \n error: this sequence of operators looks suspiciously like a bug\n-  --> $DIR/suspicious_operation_groupings.rs:76:33\n+  --> $DIR/suspicious_operation_groupings.rs:77:33\n    |\n LL |     s1.a * s2.a + s1.b * s2.b + s1.c * s2.b + s1.d * s2.d\n    |                                 ^^^^^^^^^^^ help: did you mean: `s1.c * s2.c`\n \n error: this sequence of operators looks suspiciously like a bug\n-  --> $DIR/suspicious_operation_groupings.rs:81:19\n+  --> $DIR/suspicious_operation_groupings.rs:82:19\n    |\n LL |     s1.a * s2.a + s1.b * s2.c + s1.c * s2.c\n    |                   ^^^^^^^^^^^ help: did you mean: `s1.b * s2.b`\n \n error: this sequence of operators looks suspiciously like a bug\n-  --> $DIR/suspicious_operation_groupings.rs:81:19\n+  --> $DIR/suspicious_operation_groupings.rs:82:19\n    |\n LL |     s1.a * s2.a + s1.b * s2.c + s1.c * s2.c\n    |                   ^^^^^^^^^^^ help: did you mean: `s1.b * s2.b`\n \n error: this sequence of operators looks suspiciously like a bug\n-  --> $DIR/suspicious_operation_groupings.rs:86:19\n+  --> $DIR/suspicious_operation_groupings.rs:87:19\n    |\n LL |     s1.a * s2.a + s2.b * s2.b + s1.c * s2.c\n    |                   ^^^^^^^^^^^ help: did you mean: `s1.b * s2.b`\n \n error: this sequence of operators looks suspiciously like a bug\n-  --> $DIR/suspicious_operation_groupings.rs:91:19\n+  --> $DIR/suspicious_operation_groupings.rs:92:19\n    |\n LL |     s1.a * s2.a + s1.b * s1.b + s1.c * s2.c\n    |                   ^^^^^^^^^^^ help: did you mean: `s1.b * s2.b`\n \n error: this sequence of operators looks suspiciously like a bug\n-  --> $DIR/suspicious_operation_groupings.rs:96:5\n+  --> $DIR/suspicious_operation_groupings.rs:97:5\n    |\n LL |     s1.a * s1.a + s1.b * s2.b + s1.c * s2.c\n    |     ^^^^^^^^^^^ help: did you mean: `s1.a * s2.a`\n \n error: this sequence of operators looks suspiciously like a bug\n-  --> $DIR/suspicious_operation_groupings.rs:101:33\n+  --> $DIR/suspicious_operation_groupings.rs:102:33\n    |\n LL |     s1.a * s2.a + s1.b * s2.b + s1.c * s1.c\n    |                                 ^^^^^^^^^^^ help: did you mean: `s1.c * s2.c`\n \n error: this sequence of operators looks suspiciously like a bug\n-  --> $DIR/suspicious_operation_groupings.rs:114:20\n+  --> $DIR/suspicious_operation_groupings.rs:115:20\n    |\n LL |     (s1.a * s2.a + s1.b * s1.b)\n    |                    ^^^^^^^^^^^ help: did you mean: `s1.b * s2.b`\n \n error: this sequence of operators looks suspiciously like a bug\n-  --> $DIR/suspicious_operation_groupings.rs:119:34\n+  --> $DIR/suspicious_operation_groupings.rs:120:34\n    |\n LL |     (s1.a * s2.a + s1.b * s2.b + s1.c * s2.b + s1.d * s2.d)\n    |                                  ^^^^^^^^^^^ help: did you mean: `s1.c * s2.c`\n \n error: this sequence of operators looks suspiciously like a bug\n-  --> $DIR/suspicious_operation_groupings.rs:124:38\n+  --> $DIR/suspicious_operation_groupings.rs:125:38\n    |\n LL |     (s1.a * s2.a) + (s1.b * s2.b) + (s1.c * s2.b) + (s1.d * s2.d)\n    |                                      ^^^^^^^^^^^ help: did you mean: `s1.c * s2.c`\n \n error: this sequence of operators looks suspiciously like a bug\n-  --> $DIR/suspicious_operation_groupings.rs:129:39\n+  --> $DIR/suspicious_operation_groupings.rs:130:39\n    |\n LL |     ((s1.a * s2.a) + (s1.b * s2.b) + (s1.c * s2.b) + (s1.d * s2.d))\n    |                                       ^^^^^^^^^^^ help: did you mean: `s1.c * s2.c`\n \n error: this sequence of operators looks suspiciously like a bug\n-  --> $DIR/suspicious_operation_groupings.rs:134:42\n+  --> $DIR/suspicious_operation_groupings.rs:135:42\n    |\n LL |     (((s1.a * s2.a) + (s1.b * s2.b)) + ((s1.c * s2.b) + (s1.d * s2.d)))\n    |                                          ^^^^^^^^^^^ help: did you mean: `s1.c * s2.c`\n \n error: this sequence of operators looks suspiciously like a bug\n-  --> $DIR/suspicious_operation_groupings.rs:134:42\n+  --> $DIR/suspicious_operation_groupings.rs:135:42\n    |\n LL |     (((s1.a * s2.a) + (s1.b * s2.b)) + ((s1.c * s2.b) + (s1.d * s2.d)))\n    |                                          ^^^^^^^^^^^ help: did you mean: `s1.c * s2.c`\n \n error: this sequence of operators looks suspiciously like a bug\n-  --> $DIR/suspicious_operation_groupings.rs:139:40\n+  --> $DIR/suspicious_operation_groupings.rs:140:40\n    |\n LL |     (((s1.a * s2.a) + (s1.b * s2.b) + (s1.c * s2.b)) + (s1.d * s2.d))\n    |                                        ^^^^^^^^^^^ help: did you mean: `s1.c * s2.c`\n \n error: this sequence of operators looks suspiciously like a bug\n-  --> $DIR/suspicious_operation_groupings.rs:144:40\n+  --> $DIR/suspicious_operation_groupings.rs:145:40\n    |\n LL |     ((s1.a * s2.a) + ((s1.b * s2.b) + (s1.c * s2.b) + (s1.d * s2.d)))\n    |                                        ^^^^^^^^^^^ help: did you mean: `s1.c * s2.c`\n \n error: this sequence of operators looks suspiciously like a bug\n-  --> $DIR/suspicious_operation_groupings.rs:149:20\n+  --> $DIR/suspicious_operation_groupings.rs:150:20\n    |\n LL |     (s1.a * s2.a + s2.b * s2.b) / 2\n    |                    ^^^^^^^^^^^ help: did you mean: `s1.b * s2.b`\n \n error: this sequence of operators looks suspiciously like a bug\n-  --> $DIR/suspicious_operation_groupings.rs:154:35\n+  --> $DIR/suspicious_operation_groupings.rs:155:35\n    |\n LL |     i32::swap_bytes(s1.a * s2.a + s2.b * s2.b)\n    |                                   ^^^^^^^^^^^ help: did you mean: `s1.b * s2.b`\n \n error: this sequence of operators looks suspiciously like a bug\n-  --> $DIR/suspicious_operation_groupings.rs:159:29\n+  --> $DIR/suspicious_operation_groupings.rs:160:29\n    |\n LL |     s1.a > 0 && s1.b > 0 && s1.d == s2.c && s1.d == s2.d\n    |                             ^^^^^^^^^^^^ help: did you mean: `s1.c == s2.c`\n \n error: this sequence of operators looks suspiciously like a bug\n-  --> $DIR/suspicious_operation_groupings.rs:164:17\n+  --> $DIR/suspicious_operation_groupings.rs:165:17\n    |\n LL |     s1.a > 0 && s1.d == s2.c && s1.b > 0 && s1.d == s2.d\n    |                 ^^^^^^^^^^^^ help: did you mean: `s1.c == s2.c`\n \n error: this sequence of operators looks suspiciously like a bug\n-  --> $DIR/suspicious_operation_groupings.rs:173:77\n+  --> $DIR/suspicious_operation_groupings.rs:174:77\n    |\n LL |     (n1.inner.0).0 == (n2.inner.0).0 && (n1.inner.1).0 == (n2.inner.1).0 && (n1.inner.2).0 == (n2.inner.1).0\n    |                                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: did you mean: `(n1.inner.2).0 == (n2.inner.2).0`\n \n error: this sequence of operators looks suspiciously like a bug\n-  --> $DIR/suspicious_operation_groupings.rs:187:25\n+  --> $DIR/suspicious_operation_groupings.rs:188:25\n    |\n LL |         s1.a <= s2.a && s1.a <= s2.b\n    |                         ^^^^^^^^^^^^ help: did you mean: `s1.b <= s2.b`\n \n error: this sequence of operators looks suspiciously like a bug\n-  --> $DIR/suspicious_operation_groupings.rs:193:23\n+  --> $DIR/suspicious_operation_groupings.rs:194:23\n    |\n LL |     if s1.a < s2.a && s1.a < s2.b {\n    |                       ^^^^^^^^^^^ help: did you mean: `s1.b < s2.b`\n \n error: this sequence of operators looks suspiciously like a bug\n-  --> $DIR/suspicious_operation_groupings.rs:200:48\n+  --> $DIR/suspicious_operation_groupings.rs:201:48\n    |\n LL |     -(-(-s1.a * -s2.a) + (-(-s1.b * -s2.b) + -(-s1.c * -s2.b) + -(-s1.d * -s2.d)))\n    |                                                ^^^^^^^^^^^^^ help: did you mean: `-s1.c * -s2.c`\n \n error: this sequence of operators looks suspiciously like a bug\n-  --> $DIR/suspicious_operation_groupings.rs:205:27\n+  --> $DIR/suspicious_operation_groupings.rs:206:27\n    |\n LL |     -(if -s1.a < -s2.a && -s1.a < -s2.b { s1.c } else { s2.a })\n    |                           ^^^^^^^^^^^^^ help: did you mean: `-s1.b < -s2.b`"}, {"sha": "328cda369e11bb89a59a5db907abb14deefbf91e", "filename": "tests/ui/unicode.fixed", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/tests%2Fui%2Funicode.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/tests%2Fui%2Funicode.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funicode.fixed?ref=911eb1f4cde3904e02fa8d2352ac7239b3fa6a32", "patch": "@@ -0,0 +1,36 @@\n+// run-rustfix\n+#[warn(clippy::invisible_characters)]\n+fn zero() {\n+    print!(\"Here >\\u{200B}< is a ZWS, and \\u{200B}another\");\n+    print!(\"This\\u{200B}is\\u{200B}fine\");\n+    print!(\"Here >\\u{AD}< is a SHY, and \\u{AD}another\");\n+    print!(\"This\\u{ad}is\\u{ad}fine\");\n+    print!(\"Here >\\u{2060}< is a WJ, and \\u{2060}another\");\n+    print!(\"This\\u{2060}is\\u{2060}fine\");\n+}\n+\n+#[warn(clippy::unicode_not_nfc)]\n+fn canon() {\n+    print!(\"\u0300\u00e0h?\");\n+    print!(\"a\\u{0300}h?\"); // also ok\n+}\n+\n+#[warn(clippy::non_ascii_literal)]\n+fn uni() {\n+    print!(\"\\u{dc}ben!\");\n+    print!(\"\\u{DC}ben!\"); // this is ok\n+}\n+\n+// issue 8013\n+#[warn(clippy::non_ascii_literal)]\n+fn single_quote() {\n+    const _EMPTY_BLOCK: char = '\\u{25b1}';\n+    const _FULL_BLOCK: char = '\\u{25b0}';\n+}\n+\n+fn main() {\n+    zero();\n+    uni();\n+    canon();\n+    single_quote();\n+}"}, {"sha": "7828d6bcbea7ad39e4a68c82ef69b9c9ede16015", "filename": "tests/ui/unicode.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/tests%2Fui%2Funicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/tests%2Fui%2Funicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funicode.rs?ref=911eb1f4cde3904e02fa8d2352ac7239b3fa6a32", "patch": "@@ -1,3 +1,4 @@\n+// run-rustfix\n #[warn(clippy::invisible_characters)]\n fn zero() {\n     print!(\"Here >\u200b< is a ZWS, and \u200banother\");"}, {"sha": "01d3f3c0296799cc15b4cabcbc811b786e8da427", "filename": "tests/ui/unicode.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/tests%2Fui%2Funicode.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/tests%2Fui%2Funicode.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funicode.stderr?ref=911eb1f4cde3904e02fa8d2352ac7239b3fa6a32", "patch": "@@ -1,47 +1,47 @@\n error: invisible character detected\n-  --> $DIR/unicode.rs:3:12\n+  --> $DIR/unicode.rs:4:12\n    |\n LL |     print!(\"Here >\u200b< is a ZWS, and \u200banother\");\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider replacing the string with: `\"Here >/u{200B}< is a ZWS, and /u{200B}another\"`\n    |\n    = note: `-D clippy::invisible-characters` implied by `-D warnings`\n \n error: invisible character detected\n-  --> $DIR/unicode.rs:5:12\n+  --> $DIR/unicode.rs:6:12\n    |\n LL |     print!(\"Here >\u00ad< is a SHY, and \u00adanother\");\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider replacing the string with: `\"Here >/u{AD}< is a SHY, and /u{AD}another\"`\n \n error: invisible character detected\n-  --> $DIR/unicode.rs:7:12\n+  --> $DIR/unicode.rs:8:12\n    |\n LL |     print!(\"Here >\u2060< is a WJ, and \u2060another\");\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider replacing the string with: `\"Here >/u{2060}< is a WJ, and /u{2060}another\"`\n \n error: non-NFC Unicode sequence detected\n-  --> $DIR/unicode.rs:13:12\n+  --> $DIR/unicode.rs:14:12\n    |\n LL |     print!(\"\u0300a\u0300h?\");\n    |            ^^^^^ help: consider replacing the string with: `\"\u0300\u00e0h?\"`\n    |\n    = note: `-D clippy::unicode-not-nfc` implied by `-D warnings`\n \n error: literal non-ASCII character detected\n-  --> $DIR/unicode.rs:19:12\n+  --> $DIR/unicode.rs:20:12\n    |\n LL |     print!(\"\u00dcben!\");\n    |            ^^^^^^^ help: consider replacing the string with: `\"/u{dc}ben!\"`\n    |\n    = note: `-D clippy::non-ascii-literal` implied by `-D warnings`\n \n error: literal non-ASCII character detected\n-  --> $DIR/unicode.rs:26:32\n+  --> $DIR/unicode.rs:27:32\n    |\n LL |     const _EMPTY_BLOCK: char = '\u25b1';\n    |                                ^^^ help: consider replacing the string with: `'/u{25b1}'`\n \n error: literal non-ASCII character detected\n-  --> $DIR/unicode.rs:27:31\n+  --> $DIR/unicode.rs:28:31\n    |\n LL |     const _FULL_BLOCK: char = '\u25b0';\n    |                               ^^^ help: consider replacing the string with: `'/u{25b0}'`"}, {"sha": "9400e93cac8390e52974d503356910c93bf22e83", "filename": "tests/ui/unit_arg_empty_blocks.fixed", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/tests%2Fui%2Funit_arg_empty_blocks.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/tests%2Fui%2Funit_arg_empty_blocks.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funit_arg_empty_blocks.fixed?ref=911eb1f4cde3904e02fa8d2352ac7239b3fa6a32", "patch": "@@ -0,0 +1,30 @@\n+// run-rustfix\n+#![warn(clippy::unit_arg)]\n+#![allow(clippy::no_effect, unused_must_use, unused_variables)]\n+\n+use std::fmt::Debug;\n+\n+fn foo<T: Debug>(t: T) {\n+    println!(\"{:?}\", t);\n+}\n+\n+fn foo3<T1: Debug, T2: Debug, T3: Debug>(t1: T1, t2: T2, t3: T3) {\n+    println!(\"{:?}, {:?}, {:?}\", t1, t2, t3);\n+}\n+\n+fn bad() {\n+    foo(());\n+    foo3((), 2, 2);\n+    foo(0);\n+    taking_two_units((), ());\n+    foo(0);\n+    foo(1);\n+    taking_three_units((), (), ());\n+}\n+\n+fn taking_two_units(a: (), b: ()) {}\n+fn taking_three_units(a: (), b: (), c: ()) {}\n+\n+fn main() {\n+    bad();\n+}"}, {"sha": "5f52b6c5315fdded584a3e0266ff99ea2be7da64", "filename": "tests/ui/unit_arg_empty_blocks.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/tests%2Fui%2Funit_arg_empty_blocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/tests%2Fui%2Funit_arg_empty_blocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funit_arg_empty_blocks.rs?ref=911eb1f4cde3904e02fa8d2352ac7239b3fa6a32", "patch": "@@ -1,3 +1,4 @@\n+// run-rustfix\n #![warn(clippy::unit_arg)]\n #![allow(clippy::no_effect, unused_must_use, unused_variables)]\n "}, {"sha": "d35e931697d211fcfbf6ea6ac742a47f22456b8e", "filename": "tests/ui/unit_arg_empty_blocks.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/tests%2Fui%2Funit_arg_empty_blocks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/tests%2Fui%2Funit_arg_empty_blocks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funit_arg_empty_blocks.stderr?ref=911eb1f4cde3904e02fa8d2352ac7239b3fa6a32", "patch": "@@ -1,5 +1,5 @@\n error: passing a unit value to a function\n-  --> $DIR/unit_arg_empty_blocks.rs:15:5\n+  --> $DIR/unit_arg_empty_blocks.rs:16:5\n    |\n LL |     foo({});\n    |     ^^^^--^\n@@ -9,15 +9,15 @@ LL |     foo({});\n    = note: `-D clippy::unit-arg` implied by `-D warnings`\n \n error: passing a unit value to a function\n-  --> $DIR/unit_arg_empty_blocks.rs:16:5\n+  --> $DIR/unit_arg_empty_blocks.rs:17:5\n    |\n LL |     foo3({}, 2, 2);\n    |     ^^^^^--^^^^^^^\n    |          |\n    |          help: use a unit literal instead: `()`\n \n error: passing unit values to a function\n-  --> $DIR/unit_arg_empty_blocks.rs:17:5\n+  --> $DIR/unit_arg_empty_blocks.rs:18:5\n    |\n LL |     taking_two_units({}, foo(0));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -29,7 +29,7 @@ LL ~     taking_two_units((), ());\n    |\n \n error: passing unit values to a function\n-  --> $DIR/unit_arg_empty_blocks.rs:18:5\n+  --> $DIR/unit_arg_empty_blocks.rs:19:5\n    |\n LL |     taking_three_units({}, foo(0), foo(1));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "e327a38a76d90b4a2e7f70d6e24e713e06d5c9bf", "filename": "tests/ui/unnecessary_cast.fixed", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/tests%2Fui%2Funnecessary_cast.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/tests%2Fui%2Funnecessary_cast.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_cast.fixed?ref=911eb1f4cde3904e02fa8d2352ac7239b3fa6a32", "patch": "@@ -0,0 +1,40 @@\n+// run-rustfix\n+#![warn(clippy::unnecessary_cast)]\n+#![allow(unused_must_use, clippy::no_effect)]\n+\n+#[rustfmt::skip]\n+fn main() {\n+    // Test cast_unnecessary\n+    1_i32;\n+    1_f32;\n+    false;\n+    &1i32 as &i32;\n+\n+    -1_i32;\n+    - 1_i32;\n+    -1_f32;\n+    1_i32;\n+    1_f32;\n+\n+    // macro version\n+    macro_rules! foo {\n+        ($a:ident, $b:ident) => {\n+            #[allow(unused)]\n+            pub fn $a() -> $b {\n+                1 as $b\n+            }\n+        };\n+    }\n+    foo!(a, i32);\n+    foo!(b, f32);\n+    foo!(c, f64);\n+\n+    // do not lint cast to cfg-dependant type\n+    1 as std::os::raw::c_char;\n+\n+    // do not lint cast to alias type\n+    1 as I32Alias;\n+    &1 as &I32Alias;\n+}\n+\n+type I32Alias = i32;"}, {"sha": "78affa453c0eb131b198e22e8143697ad4374190", "filename": "tests/ui/unnecessary_cast.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/tests%2Fui%2Funnecessary_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/tests%2Fui%2Funnecessary_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_cast.rs?ref=911eb1f4cde3904e02fa8d2352ac7239b3fa6a32", "patch": "@@ -1,5 +1,6 @@\n+// run-rustfix\n #![warn(clippy::unnecessary_cast)]\n-#![allow(clippy::no_effect)]\n+#![allow(unused_must_use, clippy::no_effect)]\n \n #[rustfmt::skip]\n fn main() {"}, {"sha": "d1b81ce09377837a1ece1f4456ce24aaf11181d0", "filename": "tests/ui/unnecessary_cast.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/tests%2Fui%2Funnecessary_cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/911eb1f4cde3904e02fa8d2352ac7239b3fa6a32/tests%2Fui%2Funnecessary_cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_cast.stderr?ref=911eb1f4cde3904e02fa8d2352ac7239b3fa6a32", "patch": "@@ -1,49 +1,49 @@\n error: casting integer literal to `i32` is unnecessary\n-  --> $DIR/unnecessary_cast.rs:7:5\n+  --> $DIR/unnecessary_cast.rs:8:5\n    |\n LL |     1i32 as i32;\n    |     ^^^^^^^^^^^ help: try: `1_i32`\n    |\n    = note: `-D clippy::unnecessary-cast` implied by `-D warnings`\n \n error: casting float literal to `f32` is unnecessary\n-  --> $DIR/unnecessary_cast.rs:8:5\n+  --> $DIR/unnecessary_cast.rs:9:5\n    |\n LL |     1f32 as f32;\n    |     ^^^^^^^^^^^ help: try: `1_f32`\n \n error: casting to the same type is unnecessary (`bool` -> `bool`)\n-  --> $DIR/unnecessary_cast.rs:9:5\n+  --> $DIR/unnecessary_cast.rs:10:5\n    |\n LL |     false as bool;\n    |     ^^^^^^^^^^^^^ help: try: `false`\n \n error: casting integer literal to `i32` is unnecessary\n-  --> $DIR/unnecessary_cast.rs:12:5\n+  --> $DIR/unnecessary_cast.rs:13:5\n    |\n LL |     -1_i32 as i32;\n    |     ^^^^^^^^^^^^^ help: try: `-1_i32`\n \n error: casting integer literal to `i32` is unnecessary\n-  --> $DIR/unnecessary_cast.rs:13:5\n+  --> $DIR/unnecessary_cast.rs:14:5\n    |\n LL |     - 1_i32 as i32;\n    |     ^^^^^^^^^^^^^^ help: try: `- 1_i32`\n \n error: casting float literal to `f32` is unnecessary\n-  --> $DIR/unnecessary_cast.rs:14:5\n+  --> $DIR/unnecessary_cast.rs:15:5\n    |\n LL |     -1f32 as f32;\n    |     ^^^^^^^^^^^^ help: try: `-1_f32`\n \n error: casting integer literal to `i32` is unnecessary\n-  --> $DIR/unnecessary_cast.rs:15:5\n+  --> $DIR/unnecessary_cast.rs:16:5\n    |\n LL |     1_i32 as i32;\n    |     ^^^^^^^^^^^^ help: try: `1_i32`\n \n error: casting float literal to `f32` is unnecessary\n-  --> $DIR/unnecessary_cast.rs:16:5\n+  --> $DIR/unnecessary_cast.rs:17:5\n    |\n LL |     1_f32 as f32;\n    |     ^^^^^^^^^^^^ help: try: `1_f32`"}]}