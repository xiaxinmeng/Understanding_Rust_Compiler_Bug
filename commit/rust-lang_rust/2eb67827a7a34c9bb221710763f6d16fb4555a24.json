{"sha": "2eb67827a7a34c9bb221710763f6d16fb4555a24", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlYjY3ODI3YTdhMzRjOWJiMjIxNzEwNzYzZjZkMTZmYjQ1NTVhMjQ=", "commit": {"author": {"name": "Marcus Klaas", "email": "mail@marcusklaas.nl", "date": "2015-09-27T09:58:26Z"}, "committer": {"name": "Marcus Klaas", "email": "mail@marcusklaas.nl", "date": "2015-09-27T09:58:26Z"}, "message": "Add extra tests for match arm placement", "tree": {"sha": "5f1c088782a592fda44274cc34052c24dbf0d5c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f1c088782a592fda44274cc34052c24dbf0d5c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2eb67827a7a34c9bb221710763f6d16fb4555a24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2eb67827a7a34c9bb221710763f6d16fb4555a24", "html_url": "https://github.com/rust-lang/rust/commit/2eb67827a7a34c9bb221710763f6d16fb4555a24", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2eb67827a7a34c9bb221710763f6d16fb4555a24/comments", "author": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d4a0cbe3b7a4c8f94bb1d422993ff856d714dae", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d4a0cbe3b7a4c8f94bb1d422993ff856d714dae", "html_url": "https://github.com/rust-lang/rust/commit/2d4a0cbe3b7a4c8f94bb1d422993ff856d714dae"}], "stats": {"total": 51, "additions": 34, "deletions": 17}, "files": [{"sha": "38305fc7d62e6e0a782dbb4ef7fb897d3ee15685", "filename": "src/expr.rs", "status": "modified", "additions": 11, "deletions": 17, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/2eb67827a7a34c9bb221710763f6d16fb4555a24/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eb67827a7a34c9bb221710763f6d16fb4555a24/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=2eb67827a7a34c9bb221710763f6d16fb4555a24", "patch": "@@ -918,16 +918,13 @@ impl Rewrite for ast::Arm {\n                                                                     .block_indent(context.config)),\n                                                 body_budget);\n \n-        let (body_str, break_line) = try_opt!(match_arm_heuristic(same_line_body.as_ref()\n-                                                                                .map(|x| &x[..]),\n-                                                                  next_line_body.as_ref()\n-                                                                                .map(|x| &x[..])));\n-\n-        let spacer = if break_line {\n-            format!(\"\\n{}\",\n-                    offset.block_indent(context.config).to_string(context.config))\n-        } else {\n-            \" \".to_owned()\n+        let body_str = try_opt!(match_arm_heuristic(same_line_body.as_ref().map(|x| &x[..]),\n+                                                    next_line_body.as_ref().map(|x| &x[..])));\n+\n+        let spacer = match same_line_body {\n+            Some(ref body) if body == body_str => \" \".to_owned(),\n+            _ => format!(\"\\n{}\",\n+                         offset.block_indent(context.config).to_string(context.config)),\n         };\n \n         Some(format!(\"{}{} =>{}{},\",\n@@ -939,17 +936,14 @@ impl Rewrite for ast::Arm {\n }\n \n // Takes two possible rewrites for the match arm body and chooses the \"nicest\".\n-// Bool marks break line or no.\n-fn match_arm_heuristic<'a>(former: Option<&'a str>,\n-                           latter: Option<&'a str>)\n-                           -> Option<(&'a str, bool)> {\n+fn match_arm_heuristic<'a>(former: Option<&'a str>, latter: Option<&'a str>) -> Option<&'a str> {\n     match (former, latter) {\n-        (Some(f), None) => Some((f, false)),\n+        (f @ Some(..), None) => f,\n         (Some(f), Some(l)) if f.chars().filter(|&c| c == '\\n').count() <=\n                               l.chars().filter(|&c| c == '\\n').count() => {\n-            Some((f, false))\n+            Some(f)\n         }\n-        (_, l) => l.map(|s| (s, true)),\n+        (_, l) => l,\n     }\n }\n "}, {"sha": "49e66e4c0df32d0be53d4d335037afbed5419443", "filename": "tests/source/match.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2eb67827a7a34c9bb221710763f6d16fb4555a24/tests%2Fsource%2Fmatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eb67827a7a34c9bb221710763f6d16fb4555a24/tests%2Fsource%2Fmatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fmatch.rs?ref=2eb67827a7a34c9bb221710763f6d16fb4555a24", "patch": "@@ -209,3 +209,15 @@ fn issue355() {\n                                                                               dddddddddd),\n     }\n }\n+\n+fn issue280() {\n+    {\n+        match x {\n+            CompressionMode::DiscardNewline | CompressionMode::CompressWhitespaceNewline => ch ==\n+                                                                                            '\\n',\n+            ast::ItemConst(ref typ, ref expr) => self.process_static_or_const_item(item,\n+                                                                                   &typ,\n+                                                                                   &expr),\n+        }\n+    }\n+}"}, {"sha": "6e330505a9b8af75dd8adba46ec380034284d4d3", "filename": "tests/target/match.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2eb67827a7a34c9bb221710763f6d16fb4555a24/tests%2Ftarget%2Fmatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eb67827a7a34c9bb221710763f6d16fb4555a24/tests%2Ftarget%2Fmatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmatch.rs?ref=2eb67827a7a34c9bb221710763f6d16fb4555a24", "patch": "@@ -199,3 +199,14 @@ fn issue355() {\n                                                                                 dddddddddd),\n     }\n }\n+\n+fn issue280() {\n+    {\n+        match x {\n+            CompressionMode::DiscardNewline | CompressionMode::CompressWhitespaceNewline =>\n+                ch == '\\n',\n+            ast::ItemConst(ref typ, ref expr) =>\n+                self.process_static_or_const_item(item, &typ, &expr),\n+        }\n+    }\n+}"}]}