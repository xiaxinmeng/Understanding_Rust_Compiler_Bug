{"sha": "c447fe9bc06006a7080da782cf67d739c91b534c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0NDdmZTliYzA2MDA2YTcwODBkYTc4MmNmNjdkNzM5YzkxYjUzNGM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-02-18T12:57:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-18T12:57:26Z"}, "message": "Merge #3026\n\n3026: ra_syntax: reshape SyntaxError for the sake of removing redundancy r=matklad a=Veetaha\n\nFollowup of #2911, also puts some crosses to the todo list of #223.\r\n\r\n**AHTUNG!** A big part of the diff of this PR are test data files changes.\r\n\r\nSimplified `SyntaxError` that was `SyntaxError { kind: { /* big enum */  }, location: Location }` to `SyntaxError(String, TextRange)`. I am not sure whether the tuple struct here is best fit, I am inclined to add names to the fields, because I already provide getters `SyntaxError::message()`, `SyntaxError::range()`.\r\nI also removed `Location` altogether ...\r\n\r\nThis is currently WIP, because the following is not done:\r\n- [ ] ~~Add tests to `test_data` dir for unescape errors *// I don't know where to put these errors in particular, because they are out of the scope of the lexer and parser. However, I have an idea in mind that we move all validators we have right now to parsing stage, but this is up to discussion...*~~ **[UPD]** I came to a conclusion that tree validation logic, which unescape errors are a part of, should be rethought of, we currently have no tests and no place to put tests for tree validations. So I'd like to extract potential redesign (maybe move of tree validation to ra_parser) and adding tests for this into a separate task.\n\nCo-authored-by: Veetaha <gerzoh1@gmail.com>\nCo-authored-by: Veetaha <veetaha2@gmail.com>", "tree": {"sha": "45cbc9578b24437da3eedc6a234784be22b1f38c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/45cbc9578b24437da3eedc6a234784be22b1f38c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c447fe9bc06006a7080da782cf67d739c91b534c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeS982CRBK7hj4Ov3rIwAAdHIIAF7x+aVI3YS8Fcg5A+V6bsx1\nbg1E/4y6kBaLi2arHJVNI89HjxMNV7Afn91pgKqmqkl+OGCury0LNFb2WRh0qpe/\nzFQjL9+Das8/3L246Ba85HcpCNBthVU4dMcLrv0r0dlAwF/07NYsza0PmQBSiM8W\noLpotG4Pqk9h2roohn3bgkDtkGCZKbQNpowl87JZnTx82K8RhZ6RlsPtO5G2czW8\n3R28maMlNQSbPJ9GtzqMOKpqo0zV7gSJPLhkmep/QqCtLvJq1EVqR3Ny4poEqdCS\nml2hftg3BZ3XKBKvVn6+jpzFTkLAuD5RK+GdBIzSNfqGxGXZllFGMJoLu1gOD1g=\n=Q7rv\n-----END PGP SIGNATURE-----\n", "payload": "tree 45cbc9578b24437da3eedc6a234784be22b1f38c\nparent 742459c8fe08e359ae380e3e1dc0d059c0b4f871\nparent 053ccf4121797e4e559e3225d46d3f23cb1ad70b\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1582030646 +0000\ncommitter GitHub <noreply@github.com> 1582030646 +0000\n\nMerge #3026\n\n3026: ra_syntax: reshape SyntaxError for the sake of removing redundancy r=matklad a=Veetaha\n\nFollowup of #2911, also puts some crosses to the todo list of #223.\r\n\r\n**AHTUNG!** A big part of the diff of this PR are test data files changes.\r\n\r\nSimplified `SyntaxError` that was `SyntaxError { kind: { /* big enum */  }, location: Location }` to `SyntaxError(String, TextRange)`. I am not sure whether the tuple struct here is best fit, I am inclined to add names to the fields, because I already provide getters `SyntaxError::message()`, `SyntaxError::range()`.\r\nI also removed `Location` altogether ...\r\n\r\nThis is currently WIP, because the following is not done:\r\n- [ ] ~~Add tests to `test_data` dir for unescape errors *// I don't know where to put these errors in particular, because they are out of the scope of the lexer and parser. However, I have an idea in mind that we move all validators we have right now to parsing stage, but this is up to discussion...*~~ **[UPD]** I came to a conclusion that tree validation logic, which unescape errors are a part of, should be rethought of, we currently have no tests and no place to put tests for tree validations. So I'd like to extract potential redesign (maybe move of tree validation to ra_parser) and adding tests for this into a separate task.\n\nCo-authored-by: Veetaha <gerzoh1@gmail.com>\nCo-authored-by: Veetaha <veetaha2@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c447fe9bc06006a7080da782cf67d739c91b534c", "html_url": "https://github.com/rust-lang/rust/commit/c447fe9bc06006a7080da782cf67d739c91b534c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c447fe9bc06006a7080da782cf67d739c91b534c/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "742459c8fe08e359ae380e3e1dc0d059c0b4f871", "url": "https://api.github.com/repos/rust-lang/rust/commits/742459c8fe08e359ae380e3e1dc0d059c0b4f871", "html_url": "https://github.com/rust-lang/rust/commit/742459c8fe08e359ae380e3e1dc0d059c0b4f871"}, {"sha": "053ccf4121797e4e559e3225d46d3f23cb1ad70b", "url": "https://api.github.com/repos/rust-lang/rust/commits/053ccf4121797e4e559e3225d46d3f23cb1ad70b", "html_url": "https://github.com/rust-lang/rust/commit/053ccf4121797e4e559e3225d46d3f23cb1ad70b"}], "stats": {"total": 1102, "additions": 452, "deletions": 650}, "files": [{"sha": "82596c665cb180cca53cda913790f105af549472", "filename": "crates/ra_ide/src/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs?ref=c447fe9bc06006a7080da782cf67d739c91b534c", "patch": "@@ -10,7 +10,7 @@ use ra_prof::profile;\n use ra_syntax::{\n     algo,\n     ast::{self, make, AstNode},\n-    Location, SyntaxNode, TextRange, T,\n+    SyntaxNode, TextRange, T,\n };\n use ra_text_edit::{TextEdit, TextEditBuilder};\n \n@@ -29,7 +29,7 @@ pub(crate) fn diagnostics(db: &RootDatabase, file_id: FileId) -> Vec<Diagnostic>\n     let mut res = Vec::new();\n \n     res.extend(parse.errors().iter().map(|err| Diagnostic {\n-        range: location_to_range(err.location()),\n+        range: err.range(),\n         message: format!(\"Syntax Error: {}\", err),\n         severity: Severity::Error,\n         fix: None,\n@@ -116,12 +116,6 @@ pub(crate) fn diagnostics(db: &RootDatabase, file_id: FileId) -> Vec<Diagnostic>\n     drop(sink);\n     res.into_inner()\n }\n-fn location_to_range(location: Location) -> TextRange {\n-    match location {\n-        Location::Offset(offset) => TextRange::offset_len(offset, 1.into()),\n-        Location::Range(range) => range,\n-    }\n-}\n \n fn check_unnecessary_braces_in_use_statement(\n     acc: &mut Vec<Diagnostic>,"}, {"sha": "e3f74da6deae44dd0002c881da2257307aa22600", "filename": "crates/ra_syntax/src/lib.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_syntax%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_syntax%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Flib.rs?ref=c447fe9bc06006a7080da782cf67d739c91b534c", "patch": "@@ -41,11 +41,9 @@ use crate::syntax_node::GreenNode;\n pub use crate::{\n     algo::InsertPosition,\n     ast::{AstNode, AstToken},\n-    parsing::{\n-        lex_single_syntax_kind, lex_single_valid_syntax_kind, tokenize, Token, TokenizeError,\n-    },\n+    parsing::{lex_single_syntax_kind, lex_single_valid_syntax_kind, tokenize, Token},\n     ptr::{AstPtr, SyntaxNodePtr},\n-    syntax_error::{Location, SyntaxError, SyntaxErrorKind},\n+    syntax_error::SyntaxError,\n     syntax_node::{\n         Direction, NodeOrToken, SyntaxElement, SyntaxNode, SyntaxToken, SyntaxTreeBuilder,\n     },\n@@ -117,7 +115,7 @@ impl Parse<SourceFile> {\n     pub fn debug_dump(&self) -> String {\n         let mut buf = format!(\"{:#?}\", self.tree().syntax());\n         for err in self.errors.iter() {\n-            writeln!(buf, \"error {:?}: {}\", err.location(), err.kind()).unwrap();\n+            writeln!(buf, \"error {:?}: {}\", err.range(), err).unwrap();\n         }\n         buf\n     }"}, {"sha": "f2684c852a8c66dff8c6cd68fff191051ce6944a", "filename": "crates/ra_syntax/src/parsing/lexer.rs", "status": "modified", "additions": 26, "deletions": 66, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_syntax%2Fsrc%2Fparsing%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_syntax%2Fsrc%2Fparsing%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fparsing%2Flexer.rs?ref=c447fe9bc06006a7080da782cf67d739c91b534c", "patch": "@@ -2,7 +2,7 @@\n //! It is just a bridge to `rustc_lexer`.\n \n use crate::{\n-    SyntaxError, SyntaxErrorKind,\n+    SyntaxError,\n     SyntaxKind::{self, *},\n     TextRange, TextUnit,\n };\n@@ -41,13 +41,13 @@ pub fn tokenize(text: &str) -> (Vec<Token>, Vec<SyntaxError>) {\n         let token_len = TextUnit::from_usize(rustc_token.len);\n         let token_range = TextRange::offset_len(TextUnit::from_usize(offset), token_len);\n \n-        let (syntax_kind, error) =\n+        let (syntax_kind, err_message) =\n             rustc_token_kind_to_syntax_kind(&rustc_token.kind, &text[token_range]);\n \n         tokens.push(Token { kind: syntax_kind, len: token_len });\n \n-        if let Some(error) = error {\n-            errors.push(SyntaxError::new(SyntaxErrorKind::TokenizeError(error), token_range));\n+        if let Some(err_message) = err_message {\n+            errors.push(SyntaxError::new(err_message, token_range));\n         }\n \n         offset += rustc_token.len;\n@@ -94,76 +94,37 @@ fn lex_first_token(text: &str) -> Option<(Token, Option<SyntaxError>)> {\n     }\n \n     let rustc_token = rustc_lexer::first_token(text);\n-    let (syntax_kind, error) = rustc_token_kind_to_syntax_kind(&rustc_token.kind, text);\n+    let (syntax_kind, err_message) = rustc_token_kind_to_syntax_kind(&rustc_token.kind, text);\n \n     let token = Token { kind: syntax_kind, len: TextUnit::from_usize(rustc_token.len) };\n-    let error = error.map(|error| {\n-        SyntaxError::new(\n-            SyntaxErrorKind::TokenizeError(error),\n-            TextRange::from_to(TextUnit::from(0), TextUnit::of_str(text)),\n-        )\n+    let optional_error = err_message.map(|err_message| {\n+        SyntaxError::new(err_message, TextRange::from_to(0.into(), TextUnit::of_str(text)))\n     });\n \n-    Some((token, error))\n-}\n-\n-// FIXME: simplify TokenizeError to `SyntaxError(String, TextRange)` as per @matklad advice:\n-// https://github.com/rust-analyzer/rust-analyzer/pull/2911/files#r371175067\n-\n-/// Describes the values of `SyntaxErrorKind::TokenizeError` enum variant.\n-/// It describes all the types of errors that may happen during the tokenization\n-/// of Rust source.\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub enum TokenizeError {\n-    /// Base prefix was provided, but there were no digits\n-    /// after it, e.g. `0x`, `0b`.\n-    EmptyInt,\n-    /// Float exponent lacks digits e.g. `12.34e+`, `12.3E+`, `12e-`, `1_E-`,\n-    EmptyExponent,\n-\n-    /// Block comment lacks trailing delimiter `*/`\n-    UnterminatedBlockComment,\n-    /// Character literal lacks trailing delimiter `'`\n-    UnterminatedChar,\n-    /// Characterish byte literal lacks trailing delimiter `'`\n-    UnterminatedByte,\n-    /// String literal lacks trailing delimiter `\"`\n-    UnterminatedString,\n-    /// Byte string literal lacks trailing delimiter `\"`\n-    UnterminatedByteString,\n-    /// Raw literal lacks trailing delimiter e.g. `\"##`\n-    UnterminatedRawString,\n-    /// Raw byte string literal lacks trailing delimiter e.g. `\"##`\n-    UnterminatedRawByteString,\n-\n-    /// Raw string lacks a quote after the pound characters e.g. `r###`\n-    UnstartedRawString,\n-    /// Raw byte string lacks a quote after the pound characters e.g. `br###`\n-    UnstartedRawByteString,\n-\n-    /// Lifetime starts with a number e.g. `'4ever`\n-    LifetimeStartsWithNumber,\n+    Some((token, optional_error))\n }\n \n+/// Returns `SyntaxKind` and an optional tokenize error message.\n fn rustc_token_kind_to_syntax_kind(\n     rustc_token_kind: &rustc_lexer::TokenKind,\n     token_text: &str,\n-) -> (SyntaxKind, Option<TokenizeError>) {\n+) -> (SyntaxKind, Option<&'static str>) {\n     // A note on an intended tradeoff:\n     // We drop some useful infromation here (see patterns with double dots `..`)\n     // Storing that info in `SyntaxKind` is not possible due to its layout requirements of\n     // being `u16` that come from `rowan::SyntaxKind`.\n \n     let syntax_kind = {\n         use rustc_lexer::TokenKind as TK;\n-        use TokenizeError as TE;\n-\n         match rustc_token_kind {\n             TK::LineComment => COMMENT,\n \n             TK::BlockComment { terminated: true } => COMMENT,\n             TK::BlockComment { terminated: false } => {\n-                return (COMMENT, Some(TE::UnterminatedBlockComment));\n+                return (\n+                    COMMENT,\n+                    Some(\"Missing trailing `*/` symbols to terminate the block comment\"),\n+                );\n             }\n \n             TK::Whitespace => WHITESPACE,\n@@ -181,7 +142,7 @@ fn rustc_token_kind_to_syntax_kind(\n \n             TK::Lifetime { starts_with_number: false } => LIFETIME,\n             TK::Lifetime { starts_with_number: true } => {\n-                return (LIFETIME, Some(TE::LifetimeStartsWithNumber))\n+                return (LIFETIME, Some(\"Lifetime name cannot start with a number\"))\n             }\n \n             TK::Semi => SEMI,\n@@ -217,57 +178,56 @@ fn rustc_token_kind_to_syntax_kind(\n \n     return (syntax_kind, None);\n \n-    fn match_literal_kind(kind: &rustc_lexer::LiteralKind) -> (SyntaxKind, Option<TokenizeError>) {\n+    fn match_literal_kind(kind: &rustc_lexer::LiteralKind) -> (SyntaxKind, Option<&'static str>) {\n         use rustc_lexer::LiteralKind as LK;\n-        use TokenizeError as TE;\n \n         #[rustfmt::skip]\n         let syntax_kind = match *kind {\n             LK::Int { empty_int: false, .. } => INT_NUMBER,\n             LK::Int { empty_int: true, .. } => {\n-                return (INT_NUMBER, Some(TE::EmptyInt))\n+                return (INT_NUMBER, Some(\"Missing digits after the integer base prefix\"))\n             }\n \n             LK::Float { empty_exponent: false, .. } => FLOAT_NUMBER,\n             LK::Float { empty_exponent: true, .. } => {\n-                return (FLOAT_NUMBER, Some(TE::EmptyExponent))\n+                return (FLOAT_NUMBER, Some(\"Missing digits after the exponent symbol\"))\n             }\n \n             LK::Char { terminated: true } => CHAR,\n             LK::Char { terminated: false } => {\n-                return (CHAR, Some(TE::UnterminatedChar))\n+                return (CHAR, Some(\"Missing trailing `'` symbol to terminate the character literal\"))\n             }\n \n             LK::Byte { terminated: true } => BYTE,\n             LK::Byte { terminated: false } => {\n-                return (BYTE, Some(TE::UnterminatedByte))\n+                return (BYTE, Some(\"Missing trailing `'` symbol to terminate the byte literal\"))\n             }\n \n             LK::Str { terminated: true } => STRING,\n             LK::Str { terminated: false } => {\n-                return (STRING, Some(TE::UnterminatedString))\n+                return (STRING, Some(\"Missing trailing `\\\"` symbol to terminate the string literal\"))\n             }\n \n \n             LK::ByteStr { terminated: true } => BYTE_STRING,\n             LK::ByteStr { terminated: false } => {\n-                return (BYTE_STRING, Some(TE::UnterminatedByteString))\n+                return (BYTE_STRING, Some(\"Missing trailing `\\\"` symbol to terminate the byte string literal\"))\n             }\n \n             LK::RawStr { started: true, terminated: true, .. } => RAW_STRING,\n             LK::RawStr { started: true, terminated: false, .. } => {\n-                return (RAW_STRING, Some(TE::UnterminatedRawString))\n+                return (RAW_STRING, Some(\"Missing trailing `\\\"` with `#` symbols to terminate the raw string literal\"))\n             }\n             LK::RawStr { started: false, .. } => {\n-                return (RAW_STRING, Some(TE::UnstartedRawString))\n+                return (RAW_STRING, Some(\"Missing `\\\"` symbol after `#` symbols to begin the raw string literal\"))\n             }\n \n             LK::RawByteStr { started: true, terminated: true, .. } => RAW_BYTE_STRING,\n             LK::RawByteStr { started: true, terminated: false, .. } => {\n-                return (RAW_BYTE_STRING, Some(TE::UnterminatedRawByteString))\n+                return (RAW_BYTE_STRING, Some(\"Missing trailing `\\\"` with `#` symbols to terminate the raw byte string literal\"))\n             }\n             LK::RawByteStr { started: false, .. } => {\n-                return (RAW_BYTE_STRING, Some(TE::UnstartedRawByteString))\n+                return (RAW_BYTE_STRING, Some(\"Missing `\\\"` symbol after `#` symbols to begin the raw byte string literal\"))\n             }\n         };\n "}, {"sha": "aad70d0151a151226bab12d95470dcd8eeb7b7bb", "filename": "crates/ra_syntax/src/parsing/reparsing.rs", "status": "modified", "additions": 67, "deletions": 17, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_syntax%2Fsrc%2Fparsing%2Freparsing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_syntax%2Fsrc%2Fparsing%2Freparsing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fparsing%2Freparsing.rs?ref=c447fe9bc06006a7080da782cf67d739c91b534c", "patch": "@@ -27,8 +27,8 @@ pub(crate) fn incremental_reparse(\n     edit: &AtomTextEdit,\n     errors: Vec<SyntaxError>,\n ) -> Option<(GreenNode, Vec<SyntaxError>, TextRange)> {\n-    if let Some((green, old_range)) = reparse_token(node, &edit) {\n-        return Some((green, merge_errors(errors, Vec::new(), old_range, edit), old_range));\n+    if let Some((green, new_errors, old_range)) = reparse_token(node, &edit) {\n+        return Some((green, merge_errors(errors, new_errors, old_range, edit), old_range));\n     }\n \n     if let Some((green, new_errors, old_range)) = reparse_block(node, &edit) {\n@@ -40,7 +40,7 @@ pub(crate) fn incremental_reparse(\n fn reparse_token<'node>(\n     root: &'node SyntaxNode,\n     edit: &AtomTextEdit,\n-) -> Option<(GreenNode, TextRange)> {\n+) -> Option<(GreenNode, Vec<SyntaxError>, TextRange)> {\n     let prev_token = algo::find_covering_element(root, edit.delete).as_token()?.clone();\n     let prev_token_kind = prev_token.kind();\n     match prev_token_kind {\n@@ -54,7 +54,7 @@ fn reparse_token<'node>(\n             }\n \n             let mut new_text = get_text_after_edit(prev_token.clone().into(), &edit);\n-            let (new_token_kind, _error) = lex_single_syntax_kind(&new_text)?;\n+            let (new_token_kind, new_err) = lex_single_syntax_kind(&new_text)?;\n \n             if new_token_kind != prev_token_kind\n                 || (new_token_kind == IDENT && is_contextual_kw(&new_text))\n@@ -76,7 +76,11 @@ fn reparse_token<'node>(\n \n             let new_token =\n                 GreenToken::new(rowan::SyntaxKind(prev_token_kind.into()), new_text.into());\n-            Some((prev_token.replace_with(new_token), prev_token.text_range()))\n+            Some((\n+                prev_token.replace_with(new_token),\n+                new_err.into_iter().collect(),\n+                prev_token.text_range(),\n+            ))\n         }\n         _ => None,\n     }\n@@ -87,7 +91,7 @@ fn reparse_block<'node>(\n     edit: &AtomTextEdit,\n ) -> Option<(GreenNode, Vec<SyntaxError>, TextRange)> {\n     let (node, reparser) = find_reparsable_node(root, edit.delete)?;\n-    let text = get_text_after_edit(node.clone().into(), &edit);\n+    let text = get_text_after_edit(node.clone().into(), edit);\n \n     let (tokens, new_lexer_errors) = tokenize(&text);\n     if !is_balanced(&tokens) {\n@@ -162,20 +166,27 @@ fn is_balanced(tokens: &[Token]) -> bool {\n fn merge_errors(\n     old_errors: Vec<SyntaxError>,\n     new_errors: Vec<SyntaxError>,\n-    old_range: TextRange,\n+    range_before_reparse: TextRange,\n     edit: &AtomTextEdit,\n ) -> Vec<SyntaxError> {\n     let mut res = Vec::new();\n-    for e in old_errors {\n-        if e.offset() <= old_range.start() {\n-            res.push(e)\n-        } else if e.offset() >= old_range.end() {\n-            res.push(e.add_offset(TextUnit::of_str(&edit.insert), edit.delete.len()));\n+\n+    for old_err in old_errors {\n+        let old_err_range = old_err.range();\n+        // FIXME: make sure that .start() was here previously by a mistake\n+        if old_err_range.end() <= range_before_reparse.start() {\n+            res.push(old_err);\n+        } else if old_err_range.start() >= range_before_reparse.end() {\n+            let inserted_len = TextUnit::of_str(&edit.insert);\n+            res.push(old_err.with_range((old_err_range + inserted_len) - edit.delete.len()));\n+            // Note: extra parens are intentional to prevent uint underflow, HWAB (here was a bug)\n         }\n     }\n-    for e in new_errors {\n-        res.push(e.add_offset(old_range.start(), 0.into()));\n-    }\n+    res.extend(new_errors.into_iter().map(|new_err| {\n+        // fighting borrow checker with a variable ;)\n+        let offseted_range = new_err.range() + range_before_reparse.start();\n+        new_err.with_range(offseted_range)\n+    }));\n     res\n }\n \n@@ -193,9 +204,9 @@ mod tests {\n \n         let fully_reparsed = SourceFile::parse(&after);\n         let incrementally_reparsed: Parse<SourceFile> = {\n-            let f = SourceFile::parse(&before);\n+            let before = SourceFile::parse(&before);\n             let (green, new_errors, range) =\n-                incremental_reparse(f.tree().syntax(), &edit, f.errors.to_vec()).unwrap();\n+                incremental_reparse(before.tree().syntax(), &edit, before.errors.to_vec()).unwrap();\n             assert_eq!(range.len(), reparsed_len.into(), \"reparsed fragment has wrong length\");\n             Parse::new(green, new_errors)\n         };\n@@ -204,6 +215,7 @@ mod tests {\n             &format!(\"{:#?}\", fully_reparsed.tree().syntax()),\n             &format!(\"{:#?}\", incrementally_reparsed.tree().syntax()),\n         );\n+        assert_eq!(fully_reparsed.errors(), incrementally_reparsed.errors());\n     }\n \n     #[test] // FIXME: some test here actually test token reparsing\n@@ -402,4 +414,42 @@ enum Foo {\n             4,\n         );\n     }\n+\n+    #[test]\n+    fn reparse_str_token_with_error_unchanged() {\n+        do_check(r#\"\"<|>Unclosed<|> string literal\"#, \"Still unclosed\", 24);\n+    }\n+\n+    #[test]\n+    fn reparse_str_token_with_error_fixed() {\n+        do_check(r#\"\"unterinated<|><|>\"#, \"\\\"\", 12);\n+    }\n+\n+    #[test]\n+    fn reparse_block_with_error_in_middle_unchanged() {\n+        do_check(\n+            r#\"fn main() {\n+                if {}\n+                32 + 4<|><|>\n+                return\n+                if {}\n+            }\"#,\n+            \"23\",\n+            105,\n+        )\n+    }\n+\n+    #[test]\n+    fn reparse_block_with_error_in_middle_fixed() {\n+        do_check(\n+            r#\"fn main() {\n+                if {}\n+                32 + 4<|><|>\n+                return\n+                if {}\n+            }\"#,\n+            \";\",\n+            105,\n+        )\n+    }\n }"}, {"sha": "54acf7847bacf8a0ce9682aa03727ab749f5579b", "filename": "crates/ra_syntax/src/syntax_error.rs", "status": "modified", "additions": 24, "deletions": 189, "changes": 213, "blob_url": "https://github.com/rust-lang/rust/blob/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_syntax%2Fsrc%2Fsyntax_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_syntax%2Fsrc%2Fsyntax_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fsyntax_error.rs?ref=c447fe9bc06006a7080da782cf67d739c91b534c", "patch": "@@ -1,209 +1,44 @@\n-//! FIXME: write short doc here\n+//! See docs for `SyntaxError`.\n \n use std::fmt;\n \n-use ra_parser::ParseError;\n-\n-use crate::{validation::EscapeError, TextRange, TextUnit, TokenizeError};\n+use crate::{TextRange, TextUnit};\n \n+/// Represents the result of unsuccessful tokenization, parsing\n+/// or tree validation.\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct SyntaxError {\n-    kind: SyntaxErrorKind,\n-    location: Location,\n-}\n-\n-// FIXME: Location should be just `Location(TextRange)`\n-// TextUnit enum member just unnecessarily compicates things,\n-// we should'n treat it specially, it just as a `TextRange { start: x, end: x + 1 }`\n-// see `location_to_range()` in ra_ide/src/diagnostics\n-#[derive(Clone, PartialEq, Eq, Hash)]\n-pub enum Location {\n-    Offset(TextUnit),\n-    Range(TextRange),\n-}\n-\n-impl From<TextUnit> for Location {\n-    fn from(offset: TextUnit) -> Location {\n-        Location::Offset(offset)\n-    }\n-}\n-\n-impl From<TextRange> for Location {\n-    fn from(range: TextRange) -> Location {\n-        Location::Range(range)\n-    }\n-}\n-\n-impl fmt::Debug for Location {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        match self {\n-            Location::Offset(it) => fmt::Debug::fmt(it, f),\n-            Location::Range(it) => fmt::Debug::fmt(it, f),\n-        }\n-    }\n-}\n+pub struct SyntaxError(String, TextRange);\n+\n+// FIXME: there was an unused SyntaxErrorKind previously (before this enum was removed)\n+// It was introduced in this PR: https://github.com/rust-analyzer/rust-analyzer/pull/846/files#diff-827da9b03b8f9faa1bade5cdd44d5dafR95\n+// but it was not removed by a mistake.\n+//\n+// So, we need to find a place where to stick validation for attributes in match clauses.\n+// Code before refactor:\n+// InvalidMatchInnerAttr => {\n+//    write!(f, \"Inner attributes are only allowed directly after the opening brace of the match expression\")\n+// }\n \n impl SyntaxError {\n-    pub fn new<L: Into<Location>>(kind: SyntaxErrorKind, loc: L) -> SyntaxError {\n-        SyntaxError { kind, location: loc.into() }\n+    pub fn new(message: impl Into<String>, range: TextRange) -> Self {\n+        Self(message.into(), range)\n     }\n-\n-    pub fn kind(&self) -> SyntaxErrorKind {\n-        self.kind.clone()\n+    pub fn new_at_offset(message: impl Into<String>, offset: TextUnit) -> Self {\n+        Self(message.into(), TextRange::offset_len(offset, 0.into()))\n     }\n \n-    pub fn location(&self) -> Location {\n-        self.location.clone()\n+    pub fn range(&self) -> TextRange {\n+        self.1\n     }\n \n-    pub fn offset(&self) -> TextUnit {\n-        match self.location {\n-            Location::Offset(offset) => offset,\n-            Location::Range(range) => range.start(),\n-        }\n-    }\n-\n-    pub fn add_offset(mut self, plus_offset: TextUnit, minus_offset: TextUnit) -> SyntaxError {\n-        self.location = match self.location {\n-            Location::Range(range) => Location::Range(range + plus_offset - minus_offset),\n-            Location::Offset(offset) => Location::Offset(offset + plus_offset - minus_offset),\n-        };\n-\n+    pub fn with_range(mut self, range: TextRange) -> Self {\n+        self.1 = range;\n         self\n     }\n-\n-    pub fn debug_dump(&self, acc: &mut impl fmt::Write) {\n-        writeln!(acc, \"error {:?}: {}\", self.location(), self.kind()).unwrap();\n-    }\n }\n \n impl fmt::Display for SyntaxError {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        self.kind.fmt(f)\n-    }\n-}\n-\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub enum SyntaxErrorKind {\n-    ParseError(ParseError),\n-    EscapeError(EscapeError),\n-    TokenizeError(TokenizeError),\n-    // FIXME: the obvious pattern of this enum dictates that the following enum variants\n-    // should be wrapped into something like `SemmanticError(SemmanticError)`\n-    // or `ValidateError(ValidateError)` or `SemmanticValidateError(...)`\n-    InvalidBlockAttr,\n-    InvalidMatchInnerAttr,\n-    InvalidTupleIndexFormat,\n-    VisibilityNotAllowed,\n-    InclusiveRangeMissingEnd,\n-}\n-\n-impl fmt::Display for SyntaxErrorKind {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        use self::SyntaxErrorKind::*;\n-        match self {\n-            InvalidBlockAttr => {\n-                write!(f, \"A block in this position cannot accept inner attributes\")\n-            }\n-            InvalidMatchInnerAttr => {\n-                write!(f, \"Inner attributes are only allowed directly after the opening brace of the match expression\")\n-            }\n-            InvalidTupleIndexFormat => {\n-                write!(f, \"Tuple (struct) field access is only allowed through decimal integers with no underscores or suffix\")\n-            }\n-            ParseError(msg) => write!(f, \"{}\", msg.0),\n-            EscapeError(err) => write!(f, \"{}\", err),\n-            TokenizeError(err) => write!(f, \"{}\", err),\n-            VisibilityNotAllowed => {\n-                write!(f, \"unnecessary visibility qualifier\")\n-            }\n-            InclusiveRangeMissingEnd => {\n-                write!(f, \"An inclusive range must have an end expression\")\n-            }\n-        }\n-    }\n-}\n-\n-impl fmt::Display for TokenizeError {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        #[rustfmt::skip]\n-        let msg = match self {\n-            TokenizeError::EmptyInt => {\n-                \"Missing digits after the integer base prefix\"\n-            }\n-            TokenizeError::EmptyExponent => {\n-                \"Missing digits after the exponent symbol\"\n-            }\n-            TokenizeError::UnterminatedBlockComment => {\n-                \"Missing trailing `*/` symbols to terminate the block comment\"\n-            }\n-            TokenizeError::UnterminatedChar => {\n-                \"Missing trailing `'` symbol to terminate the character literal\"\n-            }\n-            TokenizeError::UnterminatedByte => {\n-                \"Missing trailing `'` symbol to terminate the byte literal\"\n-            }\n-            TokenizeError::UnterminatedString => {\n-                \"Missing trailing `\\\"` symbol to terminate the string literal\"\n-            }\n-            TokenizeError::UnterminatedByteString => {\n-                \"Missing trailing `\\\"` symbol to terminate the byte string literal\"\n-            }\n-            TokenizeError::UnterminatedRawString => {\n-                \"Missing trailing `\\\"` with `#` symbols to terminate the raw string literal\"\n-            }\n-            TokenizeError::UnterminatedRawByteString => {\n-                \"Missing trailing `\\\"` with `#` symbols to terminate the raw byte string literal\"\n-            }\n-            TokenizeError::UnstartedRawString => {\n-                \"Missing `\\\"` symbol after `#` symbols to begin the raw string literal\"\n-            }\n-            TokenizeError::UnstartedRawByteString => {\n-                \"Missing `\\\"` symbol after `#` symbols to begin the raw byte string literal\"\n-            }\n-            TokenizeError::LifetimeStartsWithNumber => {\n-                \"Lifetime name cannot start with a number\"\n-            }\n-        };\n-        write!(f, \"{}\", msg)\n-    }\n-}\n-\n-impl fmt::Display for EscapeError {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        let msg = match self {\n-            EscapeError::ZeroChars => \"Empty literal\",\n-            EscapeError::MoreThanOneChar => \"Literal should be one character long\",\n-            EscapeError::LoneSlash => \"Character must be escaped: '\\\\'\",\n-            EscapeError::InvalidEscape => \"Invalid escape sequence\",\n-            EscapeError::BareCarriageReturn => \"Character must be escaped: '\\r'\",\n-            EscapeError::EscapeOnlyChar => \"Character must be escaped\",\n-            EscapeError::TooShortHexEscape => \"Escape sequence should have two digits\",\n-            EscapeError::InvalidCharInHexEscape => \"Escape sequence should be a hexadecimal number\",\n-            EscapeError::OutOfRangeHexEscape => \"Escape sequence should be ASCII\",\n-            EscapeError::NoBraceInUnicodeEscape => \"Invalid escape sequence\",\n-            EscapeError::InvalidCharInUnicodeEscape => \"Invalid escape sequence\",\n-            EscapeError::EmptyUnicodeEscape => \"Invalid escape sequence\",\n-            EscapeError::UnclosedUnicodeEscape => \"Missing '}'\",\n-            EscapeError::LeadingUnderscoreUnicodeEscape => \"Invalid escape sequence\",\n-            EscapeError::OverlongUnicodeEscape => {\n-                \"Unicode escape sequence should have at most 6 digits\"\n-            }\n-            EscapeError::LoneSurrogateUnicodeEscape => {\n-                \"Unicode escape code should not be a surrogate\"\n-            }\n-            EscapeError::OutOfRangeUnicodeEscape => {\n-                \"Unicode escape code should be at most 0x10FFFF\"\n-            }\n-            EscapeError::UnicodeEscapeInByte => \"Unicode escapes are not allowed in bytes\",\n-            EscapeError::NonAsciiCharInByte => \"Non ASCII characters are not allowed in bytes\",\n-        };\n-        write!(f, \"{}\", msg)\n-    }\n-}\n-\n-impl From<EscapeError> for SyntaxErrorKind {\n-    fn from(err: EscapeError) -> Self {\n-        SyntaxErrorKind::EscapeError(err)\n+        self.0.fmt(f)\n     }\n }"}, {"sha": "4e3a1460d57707e0215cee1a331a0ce915cd1684", "filename": "crates/ra_syntax/src/syntax_node.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_syntax%2Fsrc%2Fsyntax_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_syntax%2Fsrc%2Fsyntax_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fsyntax_node.rs?ref=c447fe9bc06006a7080da782cf67d739c91b534c", "patch": "@@ -6,13 +6,9 @@\n //! The *real* implementation is in the (language-agnostic) `rowan` crate, this\n //! module just wraps its API.\n \n-use ra_parser::ParseError;\n use rowan::{GreenNodeBuilder, Language};\n \n-use crate::{\n-    syntax_error::{SyntaxError, SyntaxErrorKind},\n-    Parse, SmolStr, SyntaxKind, TextUnit,\n-};\n+use crate::{Parse, SmolStr, SyntaxError, SyntaxKind, TextUnit};\n \n pub(crate) use rowan::{GreenNode, GreenToken};\n \n@@ -73,8 +69,7 @@ impl SyntaxTreeBuilder {\n         self.inner.finish_node()\n     }\n \n-    pub fn error(&mut self, error: ParseError, text_pos: TextUnit) {\n-        let error = SyntaxError::new(SyntaxErrorKind::ParseError(error), text_pos);\n-        self.errors.push(error)\n+    pub fn error(&mut self, error: ra_parser::ParseError, text_pos: TextUnit) {\n+        self.errors.push(SyntaxError::new_at_offset(error.0, text_pos))\n     }\n }"}, {"sha": "912e6aec0e548d39aca3bcb3b0f39b376d6c28a4", "filename": "crates/ra_syntax/src/tests.rs", "status": "modified", "additions": 4, "deletions": 21, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_syntax%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_syntax%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Ftests.rs?ref=c447fe9bc06006a7080da782cf67d739c91b534c", "patch": "@@ -5,7 +5,7 @@ use std::{\n \n use test_utils::{collect_tests, dir_tests, project_dir, read_text};\n \n-use crate::{fuzz, tokenize, Location, SourceFile, SyntaxError, TextRange, Token};\n+use crate::{fuzz, tokenize, SourceFile, SyntaxError, Token};\n \n #[test]\n fn lexer_tests() {\n@@ -128,25 +128,8 @@ fn dump_tokens_and_errors(tokens: &[Token], errors: &[SyntaxError], text: &str)\n         writeln!(acc, \"{:?} {} {:?}\", token.kind, token_len, token_text).unwrap();\n     }\n     for err in errors {\n-        let err_range = location_to_range(err.location());\n-        writeln!(\n-            acc,\n-            \"> error{:?} token({:?}) msg({})\",\n-            err.location(),\n-            &text[err_range],\n-            err.kind()\n-        )\n-        .unwrap();\n-    }\n-    return acc;\n-\n-    // FIXME: copy-pasted this from `ra_ide/src/diagnostics.rs`\n-    // `Location` will be refactored soon in new PR, see todos here:\n-    // https://github.com/rust-analyzer/rust-analyzer/issues/223\n-    fn location_to_range(location: Location) -> TextRange {\n-        match location {\n-            Location::Offset(offset) => TextRange::offset_len(offset, 1.into()),\n-            Location::Range(range) => range,\n-        }\n+        writeln!(acc, \"> error{:?} token({:?}) msg({})\", err.range(), &text[err.range()], err)\n+            .unwrap();\n     }\n+    acc\n }"}, {"sha": "863859dcaa2437544d9ec3169c5842d78e2ac13a", "filename": "crates/ra_syntax/src/validation.rs", "status": "modified", "additions": 71, "deletions": 84, "changes": 155, "blob_url": "https://github.com/rust-lang/rust/blob/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs?ref=c447fe9bc06006a7080da782cf67d739c91b534c", "patch": "@@ -5,92 +5,76 @@ mod block;\n use rustc_lexer::unescape;\n \n use crate::{\n-    ast, match_ast, AstNode, SyntaxError, SyntaxErrorKind,\n+    ast, match_ast, AstNode, SyntaxError,\n     SyntaxKind::{BYTE, BYTE_STRING, CHAR, CONST_DEF, FN_DEF, INT_NUMBER, STRING, TYPE_ALIAS_DEF},\n     SyntaxNode, SyntaxToken, TextUnit, T,\n };\n \n-#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]\n-pub enum EscapeError {\n-    ZeroChars,\n-    MoreThanOneChar,\n-    LoneSlash,\n-    InvalidEscape,\n-    BareCarriageReturn,\n-    EscapeOnlyChar,\n-    TooShortHexEscape,\n-    InvalidCharInHexEscape,\n-    OutOfRangeHexEscape,\n-    NoBraceInUnicodeEscape,\n-    InvalidCharInUnicodeEscape,\n-    EmptyUnicodeEscape,\n-    UnclosedUnicodeEscape,\n-    LeadingUnderscoreUnicodeEscape,\n-    OverlongUnicodeEscape,\n-    LoneSurrogateUnicodeEscape,\n-    OutOfRangeUnicodeEscape,\n-    UnicodeEscapeInByte,\n-    NonAsciiCharInByte,\n-}\n+fn rustc_unescape_error_to_string(err: unescape::EscapeError) -> &'static str {\n+    use unescape::EscapeError as EE;\n \n-impl From<rustc_lexer::unescape::EscapeError> for EscapeError {\n-    fn from(err: rustc_lexer::unescape::EscapeError) -> Self {\n-        match err {\n-            rustc_lexer::unescape::EscapeError::ZeroChars => EscapeError::ZeroChars,\n-            rustc_lexer::unescape::EscapeError::MoreThanOneChar => EscapeError::MoreThanOneChar,\n-            rustc_lexer::unescape::EscapeError::LoneSlash => EscapeError::LoneSlash,\n-            rustc_lexer::unescape::EscapeError::InvalidEscape => EscapeError::InvalidEscape,\n-            rustc_lexer::unescape::EscapeError::BareCarriageReturn\n-            | rustc_lexer::unescape::EscapeError::BareCarriageReturnInRawString => {\n-                EscapeError::BareCarriageReturn\n-            }\n-            rustc_lexer::unescape::EscapeError::EscapeOnlyChar => EscapeError::EscapeOnlyChar,\n-            rustc_lexer::unescape::EscapeError::TooShortHexEscape => EscapeError::TooShortHexEscape,\n-            rustc_lexer::unescape::EscapeError::InvalidCharInHexEscape => {\n-                EscapeError::InvalidCharInHexEscape\n-            }\n-            rustc_lexer::unescape::EscapeError::OutOfRangeHexEscape => {\n-                EscapeError::OutOfRangeHexEscape\n-            }\n-            rustc_lexer::unescape::EscapeError::NoBraceInUnicodeEscape => {\n-                EscapeError::NoBraceInUnicodeEscape\n-            }\n-            rustc_lexer::unescape::EscapeError::InvalidCharInUnicodeEscape => {\n-                EscapeError::InvalidCharInUnicodeEscape\n-            }\n-            rustc_lexer::unescape::EscapeError::EmptyUnicodeEscape => {\n-                EscapeError::EmptyUnicodeEscape\n-            }\n-            rustc_lexer::unescape::EscapeError::UnclosedUnicodeEscape => {\n-                EscapeError::UnclosedUnicodeEscape\n-            }\n-            rustc_lexer::unescape::EscapeError::LeadingUnderscoreUnicodeEscape => {\n-                EscapeError::LeadingUnderscoreUnicodeEscape\n-            }\n-            rustc_lexer::unescape::EscapeError::OverlongUnicodeEscape => {\n-                EscapeError::OverlongUnicodeEscape\n-            }\n-            rustc_lexer::unescape::EscapeError::LoneSurrogateUnicodeEscape => {\n-                EscapeError::LoneSurrogateUnicodeEscape\n-            }\n-            rustc_lexer::unescape::EscapeError::OutOfRangeUnicodeEscape => {\n-                EscapeError::OutOfRangeUnicodeEscape\n-            }\n-            rustc_lexer::unescape::EscapeError::UnicodeEscapeInByte => {\n-                EscapeError::UnicodeEscapeInByte\n-            }\n-            rustc_lexer::unescape::EscapeError::NonAsciiCharInByte\n-            | rustc_lexer::unescape::EscapeError::NonAsciiCharInByteString => {\n-                EscapeError::NonAsciiCharInByte\n-            }\n+    #[rustfmt::skip]\n+    let err_message = match err {\n+        EE::ZeroChars => {\n+            \"Literal must not be empty\"\n         }\n-    }\n-}\n+        EE::MoreThanOneChar => {\n+            \"Literal must be one character long\"\n+        }\n+        EE::LoneSlash => {\n+            \"Character must be escaped: `\\\\`\"\n+        }\n+        EE::InvalidEscape => {\n+            \"Invalid escape\"\n+        }\n+        EE::BareCarriageReturn | EE::BareCarriageReturnInRawString => {\n+            \"Character must be escaped: `\\r`\"\n+        }\n+        EE::EscapeOnlyChar => {\n+            \"Escape character `\\\\` must be escaped itself\"\n+        }\n+        EE::TooShortHexEscape => {\n+            \"ASCII hex escape code must have exactly two digits\"\n+        }\n+        EE::InvalidCharInHexEscape => {\n+            \"ASCII hex escape code must contain only hex characters\"\n+        }\n+        EE::OutOfRangeHexEscape => {\n+            \"ASCII hex escape code must be at most 0x7F\"\n+        }\n+        EE::NoBraceInUnicodeEscape => {\n+            \"Missing `{` to begin the unicode escape\"\n+        }\n+        EE::InvalidCharInUnicodeEscape => {\n+            \"Unicode escape must contain only hex characters and underscores\"\n+        }\n+        EE::EmptyUnicodeEscape => {\n+            \"Unicode escape must not be empty\"\n+        }\n+        EE::UnclosedUnicodeEscape => {\n+            \"Missing '}' to terminate the unicode escape\"\n+        }\n+        EE::LeadingUnderscoreUnicodeEscape => {\n+            \"Unicode escape code must not begin with an underscore\"\n+        }\n+        EE::OverlongUnicodeEscape => {\n+            \"Unicode escape code must have at most 6 digits\"\n+        }\n+        EE::LoneSurrogateUnicodeEscape => {\n+            \"Unicode escape code must not be a surrogate\"\n+        }\n+        EE::OutOfRangeUnicodeEscape => {\n+            \"Unicode escape code must be at most 0x10FFFF\"\n+        }\n+        EE::UnicodeEscapeInByte => {\n+            \"Byte literals must not contain unicode escapes\"\n+        }\n+        EE::NonAsciiCharInByte | EE::NonAsciiCharInByteString => {\n+            \"Byte literals must not contain non-ASCII characters\"\n+        }\n+    };\n \n-impl From<rustc_lexer::unescape::EscapeError> for SyntaxErrorKind {\n-    fn from(err: rustc_lexer::unescape::EscapeError) -> Self {\n-        SyntaxErrorKind::EscapeError(err.into())\n-    }\n+    err_message\n }\n \n pub(crate) fn validate(root: &SyntaxNode) -> Vec<SyntaxError> {\n@@ -118,16 +102,18 @@ pub(crate) fn validate(root: &SyntaxNode) -> Vec<SyntaxError> {\n }\n \n fn validate_literal(literal: ast::Literal, acc: &mut Vec<SyntaxError>) {\n+    // FIXME: move this function to outer scope (https://github.com/rust-analyzer/rust-analyzer/pull/2834#discussion_r366196658)\n     fn unquote(text: &str, prefix_len: usize, end_delimiter: char) -> Option<&str> {\n         text.rfind(end_delimiter).and_then(|end| text.get(prefix_len..end))\n     }\n \n     let token = literal.token();\n     let text = token.text().as_str();\n \n+    // FIXME: lift this lambda refactor to `fn` (https://github.com/rust-analyzer/rust-analyzer/pull/2834#discussion_r366199205)\n     let mut push_err = |prefix_len, (off, err): (usize, unescape::EscapeError)| {\n         let off = token.text_range().start() + TextUnit::from_usize(off + prefix_len);\n-        acc.push(SyntaxError::new(err.into(), off));\n+        acc.push(SyntaxError::new_at_offset(rustc_unescape_error_to_string(err), off));\n     };\n \n     match token.kind() {\n@@ -195,7 +181,8 @@ fn validate_numeric_name(name_ref: Option<ast::NameRef>, errors: &mut Vec<Syntax\n     if let Some(int_token) = int_token(name_ref) {\n         if int_token.text().chars().any(|c| !c.is_digit(10)) {\n             errors.push(SyntaxError::new(\n-                SyntaxErrorKind::InvalidTupleIndexFormat,\n+                \"Tuple (struct) field access is only allowed through \\\n+                decimal integers with no underscores or suffix\",\n                 int_token.text_range(),\n             ));\n         }\n@@ -215,21 +202,21 @@ fn validate_visibility(vis: ast::Visibility, errors: &mut Vec<SyntaxError>) {\n         FN_DEF | CONST_DEF | TYPE_ALIAS_DEF => (),\n         _ => return,\n     }\n+\n     let impl_block = match parent.parent().and_then(|it| it.parent()).and_then(ast::ImplBlock::cast)\n     {\n         Some(it) => it,\n         None => return,\n     };\n     if impl_block.target_trait().is_some() {\n-        errors\n-            .push(SyntaxError::new(SyntaxErrorKind::VisibilityNotAllowed, vis.syntax.text_range()))\n+        errors.push(SyntaxError::new(\"Unnecessary visibility qualifier\", vis.syntax.text_range()));\n     }\n }\n \n fn validate_range_expr(expr: ast::RangeExpr, errors: &mut Vec<SyntaxError>) {\n     if expr.op_kind() == Some(ast::RangeOp::Inclusive) && expr.end().is_none() {\n         errors.push(SyntaxError::new(\n-            SyntaxErrorKind::InclusiveRangeMissingEnd,\n+            \"An inclusive range must have an end expression\",\n             expr.syntax().text_range(),\n         ));\n     }"}, {"sha": "8e962ab5b77cd42f2dd3c73854267da407ff490e", "filename": "crates/ra_syntax/src/validation/block.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_syntax%2Fsrc%2Fvalidation%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_syntax%2Fsrc%2Fvalidation%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fvalidation%2Fblock.rs?ref=c447fe9bc06006a7080da782cf67d739c91b534c", "patch": "@@ -1,9 +1,8 @@\n-//! FIXME: write short doc here\n+//! Logic for validating block expressions i.e. `ast::BlockExpr`.\n \n use crate::{\n     ast::{self, AstNode, AttrsOwner},\n     SyntaxError,\n-    SyntaxErrorKind::*,\n     SyntaxKind::*,\n };\n \n@@ -15,10 +14,11 @@ pub(crate) fn validate_block_expr(expr: ast::BlockExpr, errors: &mut Vec<SyntaxE\n         }\n     }\n     if let Some(block) = expr.block() {\n-        errors.extend(\n-            block\n-                .attrs()\n-                .map(|attr| SyntaxError::new(InvalidBlockAttr, attr.syntax().text_range())),\n-        )\n+        errors.extend(block.attrs().map(|attr| {\n+            SyntaxError::new(\n+                \"A block in this position cannot accept inner attributes\",\n+                attr.syntax().text_range(),\n+            )\n+        }))\n     }\n }"}, {"sha": "edcd936b0772a45d746458b8aa0859a2427befe4", "filename": "crates/ra_syntax/test_data/parser/err/0000_struct_field_missing_comma.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0000_struct_field_missing_comma.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0000_struct_field_missing_comma.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0000_struct_field_missing_comma.txt?ref=c447fe9bc06006a7080da782cf67d739c91b534c", "patch": "@@ -31,4 +31,4 @@ SOURCE_FILE@[0; 34)\n                 IDENT@[29; 32) \"u32\"\n       WHITESPACE@[32; 33) \"\\n\"\n       R_CURLY@[33; 34) \"}\"\n-error 21: expected COMMA\n+error [21; 21): expected COMMA"}, {"sha": "2d653715ea72b5bec41dbeb48ecb9055e0e59b41", "filename": "crates/ra_syntax/test_data/parser/err/0001_item_recovery_in_file.txt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0001_item_recovery_in_file.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0001_item_recovery_in_file.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0001_item_recovery_in_file.txt?ref=c447fe9bc06006a7080da782cf67d739c91b534c", "patch": "@@ -14,5 +14,5 @@ SOURCE_FILE@[0; 21)\n     RECORD_FIELD_DEF_LIST@[19; 21)\n       L_CURLY@[19; 20) \"{\"\n       R_CURLY@[20; 21) \"}\"\n-error 0: expected an item\n-error 3: expected an item\n+error [0; 0): expected an item\n+error [3; 3): expected an item"}, {"sha": "0026805838c1dbf4636f6ffca3abecf18f2ff53c", "filename": "crates/ra_syntax/test_data/parser/err/0002_duplicate_shebang.txt", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0002_duplicate_shebang.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0002_duplicate_shebang.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0002_duplicate_shebang.txt?ref=c447fe9bc06006a7080da782cf67d739c91b534c", "patch": "@@ -26,14 +26,14 @@ SOURCE_FILE@[0; 42)\n     NAME@[36; 41)\n       IDENT@[36; 41) \"rusti\"\n   WHITESPACE@[41; 42) \"\\n\"\n-error 23: expected `[`\n-error 23: expected an item\n-error 27: expected one of `*`, `::`, `{`, `self`, `super` or an identifier\n-error 28: expected SEMI\n-error 31: expected EXCL\n-error 31: expected `{`, `[`, `(`\n-error 31: expected SEMI\n-error 31: expected an item\n-error 35: expected EXCL\n-error 41: expected `{`, `[`, `(`\n-error 41: expected SEMI\n+error [23; 23): expected `[`\n+error [23; 23): expected an item\n+error [27; 27): expected one of `*`, `::`, `{`, `self`, `super` or an identifier\n+error [28; 28): expected SEMI\n+error [31; 31): expected EXCL\n+error [31; 31): expected `{`, `[`, `(`\n+error [31; 31): expected SEMI\n+error [31; 31): expected an item\n+error [35; 35): expected EXCL\n+error [41; 41): expected `{`, `[`, `(`\n+error [41; 41): expected SEMI"}, {"sha": "8039a8913786c8cd9a1758e9f1398737d81c08b1", "filename": "crates/ra_syntax/test_data/parser/err/0003_C++_semicolon.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0003_C%2B%2B_semicolon.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0003_C%2B%2B_semicolon.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0003_C%2B%2B_semicolon.txt?ref=c447fe9bc06006a7080da782cf67d739c91b534c", "patch": "@@ -35,5 +35,5 @@ SOURCE_FILE@[0; 40)\n       R_CURLY@[38; 39) \"}\"\n   ERROR@[39; 40)\n     SEMI@[39; 40) \";\"\n-error 39: expected item, found `;`\n+error [39; 39): expected item, found `;`\n consider removing this semicolon"}, {"sha": "5f6e109869994bbd467d25d282dc7dcf7524d72f", "filename": "crates/ra_syntax/test_data/parser/err/0004_use_path_bad_segment.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0004_use_path_bad_segment.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0004_use_path_bad_segment.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0004_use_path_bad_segment.txt?ref=c447fe9bc06006a7080da782cf67d739c91b534c", "patch": "@@ -13,4 +13,4 @@ SOURCE_FILE@[0; 12)\n           ERROR@[9; 11)\n             INT_NUMBER@[9; 11) \"92\"\n     SEMI@[11; 12) \";\"\n-error 9: expected identifier\n+error [9; 9): expected identifier"}, {"sha": "cc11421a9a348b1f700d10aef8f7e1a0e270c633", "filename": "crates/ra_syntax/test_data/parser/err/0005_attribute_recover.txt", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0005_attribute_recover.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0005_attribute_recover.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0005_attribute_recover.txt?ref=c447fe9bc06006a7080da782cf67d739c91b534c", "patch": "@@ -55,6 +55,6 @@ SOURCE_FILE@[0; 54)\n         WHITESPACE@[51; 52) \"\\n\"\n         R_CURLY@[52; 53) \"}\"\n   WHITESPACE@[53; 54) \"\\n\"\n-error 53: expected R_PAREN\n-error 53: expected `]`\n-error 53: expected an item\n+error [53; 53): expected R_PAREN\n+error [53; 53): expected `]`\n+error [53; 53): expected an item"}, {"sha": "84fd928625192ff4c811f24b38bfbb204176bd1b", "filename": "crates/ra_syntax/test_data/parser/err/0006_named_field_recovery.txt", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0006_named_field_recovery.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0006_named_field_recovery.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0006_named_field_recovery.txt?ref=c447fe9bc06006a7080da782cf67d739c91b534c", "patch": "@@ -64,11 +64,11 @@ SOURCE_FILE@[0; 74)\n       WHITESPACE@[71; 72) \"\\n\"\n       R_CURLY@[72; 73) \"}\"\n   WHITESPACE@[73; 74) \"\\n\"\n-error 31: expected field declaration\n-error 33: expected COMMA\n-error 38: expected field declaration\n-error 39: expected COMMA\n-error 40: expected field declaration\n-error 41: expected COMMA\n-error 42: expected field declaration\n-error 43: expected COMMA\n+error [31; 31): expected field declaration\n+error [33; 33): expected COMMA\n+error [38; 38): expected field declaration\n+error [39; 39): expected COMMA\n+error [40; 40): expected field declaration\n+error [41; 41): expected COMMA\n+error [42; 42): expected field declaration\n+error [43; 43): expected COMMA"}, {"sha": "1978f30fa4c7af1b4e834bfd2979f4c4ba88ea10", "filename": "crates/ra_syntax/test_data/parser/err/0007_stray_curly_in_file.txt", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0007_stray_curly_in_file.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0007_stray_curly_in_file.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0007_stray_curly_in_file.txt?ref=c447fe9bc06006a7080da782cf67d739c91b534c", "patch": "@@ -28,6 +28,6 @@ SOURCE_FILE@[0; 31)\n   ERROR@[29; 30)\n     R_CURLY@[29; 30) \"}\"\n   WHITESPACE@[30; 31) \"\\n\"\n-error 0: unmatched `}`\n-error 14: unmatched `}`\n-error 29: unmatched `}`\n+error [0; 0): unmatched `}`\n+error [14; 14): unmatched `}`\n+error [29; 29): unmatched `}`"}, {"sha": "98248227d8dd46cccfd049c4ffefe8ba20b52dd1", "filename": "crates/ra_syntax/test_data/parser/err/0008_item_block_recovery.txt", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0008_item_block_recovery.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0008_item_block_recovery.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0008_item_block_recovery.txt?ref=c447fe9bc06006a7080da782cf67d739c91b534c", "patch": "@@ -76,6 +76,6 @@ SOURCE_FILE@[0; 95)\n         WHITESPACE@[92; 93) \"\\n\"\n         R_CURLY@[93; 94) \"}\"\n   WHITESPACE@[94; 95) \"\\n\"\n-error 17: expected EXCL\n-error 19: expected SEMI\n-error 20: expected an item\n+error [17; 17): expected EXCL\n+error [19; 19): expected SEMI\n+error [20; 20): expected an item"}, {"sha": "ca508ac7c7ab49c639789776a18744a6fa6aadd9", "filename": "crates/ra_syntax/test_data/parser/err/0009_broken_struct_type_parameter.txt", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0009_broken_struct_type_parameter.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0009_broken_struct_type_parameter.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0009_broken_struct_type_parameter.txt?ref=c447fe9bc06006a7080da782cf67d739c91b534c", "patch": "@@ -45,14 +45,14 @@ SOURCE_FILE@[0; 43)\n       IDENT@[40; 41) \"T\"\n     SEMI@[41; 42) \";\"\n   WHITESPACE@[42; 43) \"\\n\"\n-error 9: expected type parameter\n-error 11: expected COMMA\n-error 11: expected R_ANGLE\n-error 11: expected `;`, `{`, or `(`\n-error 12: expected an item\n-error 14: expected an item\n-error 15: expected an item\n-error 17: expected an item\n-error 24: expected SEMI\n-error 24: expected expression\n-error 25: expected SEMI\n+error [9; 9): expected type parameter\n+error [11; 11): expected COMMA\n+error [11; 11): expected R_ANGLE\n+error [11; 11): expected `;`, `{`, or `(`\n+error [12; 12): expected an item\n+error [14; 14): expected an item\n+error [15; 15): expected an item\n+error [17; 17): expected an item\n+error [24; 24): expected SEMI\n+error [24; 24): expected expression\n+error [25; 25): expected SEMI"}, {"sha": "e0edf6a2d8a948cd447cbc8330130fba9f623f07", "filename": "crates/ra_syntax/test_data/parser/err/0010_unsafe_lambda_block.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0010_unsafe_lambda_block.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0010_unsafe_lambda_block.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0010_unsafe_lambda_block.txt?ref=c447fe9bc06006a7080da782cf67d739c91b534c", "patch": "@@ -40,4 +40,4 @@ SOURCE_FILE@[0; 42)\n         WHITESPACE@[39; 40) \"\\n\"\n         R_CURLY@[40; 41) \"}\"\n   WHITESPACE@[41; 42) \"\\n\"\n-error 24: expected `{`\n+error [24; 24): expected `{`"}, {"sha": "900894dcf94760431bbf1835ac6ee7a11329b515", "filename": "crates/ra_syntax/test_data/parser/err/0011_extern_struct.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0011_extern_struct.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0011_extern_struct.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0011_extern_struct.txt?ref=c447fe9bc06006a7080da782cf67d739c91b534c", "patch": "@@ -10,4 +10,4 @@ SOURCE_FILE@[0; 19)\n       IDENT@[14; 17) \"Foo\"\n     SEMI@[17; 18) \";\"\n   WHITESPACE@[18; 19) \"\\n\"\n-error 6: expected existential, fn, trait or impl\n+error [6; 6): expected existential, fn, trait or impl"}, {"sha": "7a934cf6632e501982bb09986e62a5ef3b607fa5", "filename": "crates/ra_syntax/test_data/parser/err/0013_invalid_type.txt", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0013_invalid_type.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0013_invalid_type.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0013_invalid_type.txt?ref=c447fe9bc06006a7080da782cf67d739c91b534c", "patch": "@@ -69,21 +69,21 @@ SOURCE_FILE@[0; 86)\n   ERROR@[83; 84)\n     SEMI@[83; 84) \";\"\n   WHITESPACE@[84; 86) \"\\n\\n\"\n-error 67: expected type\n-error 68: expected COMMA\n-error 68: expected R_ANGLE\n-error 68: expected COMMA\n-error 68: expected R_ANGLE\n-error 68: expected COMMA\n-error 68: expected R_ANGLE\n-error 68: expected COMMA\n-error 72: expected COMMA\n-error 72: expected a type\n-error 72: expected R_PAREN\n-error 72: expected SEMI\n-error 72: expected an item\n-error 73: expected an item\n-error 79: expected an item\n-error 80: expected an item\n-error 82: expected an item\n-error 83: expected an item\n+error [67; 67): expected type\n+error [68; 68): expected COMMA\n+error [68; 68): expected R_ANGLE\n+error [68; 68): expected COMMA\n+error [68; 68): expected R_ANGLE\n+error [68; 68): expected COMMA\n+error [68; 68): expected R_ANGLE\n+error [68; 68): expected COMMA\n+error [72; 72): expected COMMA\n+error [72; 72): expected a type\n+error [72; 72): expected R_PAREN\n+error [72; 72): expected SEMI\n+error [72; 72): expected an item\n+error [73; 73): expected an item\n+error [79; 79): expected an item\n+error [80; 80): expected an item\n+error [82; 82): expected an item\n+error [83; 83): expected an item"}, {"sha": "a25d641b82d46d8cb320b63b1739acd91d1a8b49", "filename": "crates/ra_syntax/test_data/parser/err/0014_where_no_bounds.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0014_where_no_bounds.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0014_where_no_bounds.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0014_where_no_bounds.txt?ref=c447fe9bc06006a7080da782cf67d739c91b534c", "patch": "@@ -29,4 +29,4 @@ SOURCE_FILE@[0; 23)\n         L_CURLY@[20; 21) \"{\"\n         R_CURLY@[21; 22) \"}\"\n   WHITESPACE@[22; 23) \"\\n\"\n-error 19: expected colon\n+error [19; 19): expected colon"}, {"sha": "36b848be33fbed53f8dc0a9cb4f051544c2eeb69", "filename": "crates/ra_syntax/test_data/parser/err/0015_curly_in_params.txt", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0015_curly_in_params.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0015_curly_in_params.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0015_curly_in_params.txt?ref=c447fe9bc06006a7080da782cf67d739c91b534c", "patch": "@@ -16,9 +16,9 @@ SOURCE_FILE@[0; 14)\n     WHITESPACE@[11; 12) \"\\n\"\n     R_CURLY@[12; 13) \"}\"\n   WHITESPACE@[13; 14) \"\\n\"\n-error 7: expected value parameter\n-error 7: expected R_PAREN\n-error 7: expected a block\n-error 7: unmatched `}`\n-error 8: expected an item\n-error 10: expected an item\n+error [7; 7): expected value parameter\n+error [7; 7): expected R_PAREN\n+error [7; 7): expected a block\n+error [7; 7): unmatched `}`\n+error [8; 8): expected an item\n+error [10; 10): expected an item"}, {"sha": "6343580e00488c7e200f5bbba0a00bc3710ece64", "filename": "crates/ra_syntax/test_data/parser/err/0016_missing_semi.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0016_missing_semi.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0016_missing_semi.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0016_missing_semi.txt?ref=c447fe9bc06006a7080da782cf67d739c91b534c", "patch": "@@ -41,4 +41,4 @@ SOURCE_FILE@[0; 56)\n         WHITESPACE@[53; 54) \"\\n\"\n         R_CURLY@[54; 55) \"}\"\n   WHITESPACE@[55; 56) \"\\n\"\n-error 38: expected SEMI\n+error [38; 38): expected SEMI"}, {"sha": "59480e99949fe13512615105bf5634e3bbf7fad5", "filename": "crates/ra_syntax/test_data/parser/err/0017_incomplete_binexpr.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0017_incomplete_binexpr.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0017_incomplete_binexpr.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0017_incomplete_binexpr.txt?ref=c447fe9bc06006a7080da782cf67d739c91b534c", "patch": "@@ -44,4 +44,4 @@ SOURCE_FILE@[0; 47)\n         WHITESPACE@[44; 45) \"\\n\"\n         R_CURLY@[45; 46) \"}\"\n   WHITESPACE@[46; 47) \"\\n\"\n-error 44: expected expression\n+error [44; 44): expected expression"}, {"sha": "b9e60f6c13176d9554c179f40868f636f4481ccc", "filename": "crates/ra_syntax/test_data/parser/err/0018_incomplete_fn.txt", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0018_incomplete_fn.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0018_incomplete_fn.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0018_incomplete_fn.txt?ref=c447fe9bc06006a7080da782cf67d739c91b534c", "patch": "@@ -125,8 +125,8 @@ SOURCE_FILE@[0; 183)\n       WHITESPACE@[180; 181) \"\\n\"\n       R_CURLY@[181; 182) \"}\"\n   WHITESPACE@[182; 183) \"\\n\"\n-error 34: expected pattern\n-error 34: expected COLON\n-error 34: expected type\n-error 180: expected function arguments\n-error 180: expected a block\n+error [34; 34): expected pattern\n+error [34; 34): expected COLON\n+error [34; 34): expected type\n+error [180; 180): expected function arguments\n+error [180; 180): expected a block"}, {"sha": "97e91a94f5155371b0c8f08fc2c397c13ef81874", "filename": "crates/ra_syntax/test_data/parser/err/0019_let_recover.txt", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0019_let_recover.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0019_let_recover.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0019_let_recover.txt?ref=c447fe9bc06006a7080da782cf67d739c91b534c", "patch": "@@ -95,13 +95,13 @@ SOURCE_FILE@[0; 139)\n         WHITESPACE@[136; 137) \"\\n\"\n         R_CURLY@[137; 138) \"}\"\n   WHITESPACE@[138; 139) \"\\n\"\n-error 24: expected expression\n-error 24: expected SEMI\n-error 49: expected pattern\n-error 49: expected SEMI\n-error 75: expected pattern\n-error 75: expected SEMI\n-error 98: expected pattern\n-error 98: expected SEMI\n-error 124: expected pattern\n-error 124: expected SEMI\n+error [24; 24): expected expression\n+error [24; 24): expected SEMI\n+error [49; 49): expected pattern\n+error [49; 49): expected SEMI\n+error [75; 75): expected pattern\n+error [75; 75): expected SEMI\n+error [98; 98): expected pattern\n+error [98; 98): expected SEMI\n+error [124; 124): expected pattern\n+error [124; 124): expected SEMI"}, {"sha": "c11dc23f539cb12d7ed439f424bb5ad9546ac6d9", "filename": "crates/ra_syntax/test_data/parser/err/0020_fn_recover.txt", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0020_fn_recover.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0020_fn_recover.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0020_fn_recover.txt?ref=c447fe9bc06006a7080da782cf67d739c91b534c", "patch": "@@ -16,6 +16,6 @@ SOURCE_FILE@[0; 16)\n         L_CURLY@[13; 14) \"{\"\n         R_CURLY@[14; 15) \"}\"\n   WHITESPACE@[15; 16) \"\\n\"\n-error 2: expected a name\n-error 2: expected function arguments\n-error 2: expected a block\n+error [2; 2): expected a name\n+error [2; 2): expected function arguments\n+error [2; 2): expected a block"}, {"sha": "ae04122d88445fca27884472a65e6677ba8a96c8", "filename": "crates/ra_syntax/test_data/parser/err/0021_incomplete_param.txt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0021_incomplete_param.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0021_incomplete_param.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0021_incomplete_param.txt?ref=c447fe9bc06006a7080da782cf67d739c91b534c", "patch": "@@ -31,5 +31,5 @@ SOURCE_FILE@[0; 22)\n         WHITESPACE@[19; 20) \"\\n\"\n         R_CURLY@[20; 21) \"}\"\n   WHITESPACE@[21; 22) \"\\n\"\n-error 16: expected COLON\n-error 16: expected type\n+error [16; 16): expected COLON\n+error [16; 16): expected type"}, {"sha": "bb87022b088d5a443fff8690f7b5a780b0a97a6b", "filename": "crates/ra_syntax/test_data/parser/err/0022_bad_exprs.txt", "status": "modified", "additions": 33, "deletions": 33, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0022_bad_exprs.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0022_bad_exprs.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0022_bad_exprs.txt?ref=c447fe9bc06006a7080da782cf67d739c91b534c", "patch": "@@ -148,36 +148,36 @@ SOURCE_FILE@[0; 112)\n         WHITESPACE@[109; 110) \" \"\n         R_CURLY@[110; 111) \"}\"\n   WHITESPACE@[111; 112) \"\\n\"\n-error 16: expected expression\n-error 17: expected R_BRACK\n-error 17: expected SEMI\n-error 17: expected expression\n-error 18: expected SEMI\n-error 25: expected a name\n-error 26: expected `;`, `{`, or `(`\n-error 30: expected pattern\n-error 31: expected SEMI\n-error 53: expected expression\n-error 54: expected SEMI\n-error 54: expected expression\n-error 55: expected SEMI\n-error 60: expected type\n-error 60: expected `{`\n-error 60: expected expression\n-error 61: expected SEMI\n-error 65: expected pattern\n-error 65: expected SEMI\n-error 65: expected expression\n-error 92: expected expression\n-error 93: expected SEMI\n-error 93: expected expression\n-error 94: expected SEMI\n-error 95: expected expression\n-error 96: expected SEMI\n-error 96: expected expression\n-error 97: expected SEMI\n-error 103: expected a name\n-error 104: expected `{`\n-error 108: expected pattern\n-error 108: expected SEMI\n-error 108: expected expression\n+error [16; 16): expected expression\n+error [17; 17): expected R_BRACK\n+error [17; 17): expected SEMI\n+error [17; 17): expected expression\n+error [18; 18): expected SEMI\n+error [25; 25): expected a name\n+error [26; 26): expected `;`, `{`, or `(`\n+error [30; 30): expected pattern\n+error [31; 31): expected SEMI\n+error [53; 53): expected expression\n+error [54; 54): expected SEMI\n+error [54; 54): expected expression\n+error [55; 55): expected SEMI\n+error [60; 60): expected type\n+error [60; 60): expected `{`\n+error [60; 60): expected expression\n+error [61; 61): expected SEMI\n+error [65; 65): expected pattern\n+error [65; 65): expected SEMI\n+error [65; 65): expected expression\n+error [92; 92): expected expression\n+error [93; 93): expected SEMI\n+error [93; 93): expected expression\n+error [94; 94): expected SEMI\n+error [95; 95): expected expression\n+error [96; 96): expected SEMI\n+error [96; 96): expected expression\n+error [97; 97): expected SEMI\n+error [103; 103): expected a name\n+error [104; 104): expected `{`\n+error [108; 108): expected pattern\n+error [108; 108): expected SEMI\n+error [108; 108): expected expression"}, {"sha": "775e4b0da43b77a8d18142eb06c145b2e6dc96fd", "filename": "crates/ra_syntax/test_data/parser/err/0023_mismatched_paren.txt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0023_mismatched_paren.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0023_mismatched_paren.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0023_mismatched_paren.txt?ref=c447fe9bc06006a7080da782cf67d739c91b534c", "patch": "@@ -40,5 +40,5 @@ SOURCE_FILE@[0; 94)\n   ERROR@[92; 93)\n     R_CURLY@[92; 93) \"}\"\n   WHITESPACE@[93; 94) \"\\n\"\n-error 49: unmatched `}`\n-error 92: unmatched `}`\n+error [49; 49): unmatched `}`\n+error [92; 92): unmatched `}`"}, {"sha": "c5c8a29ba37936907c626948a9ebddcef413ba7f", "filename": "crates/ra_syntax/test_data/parser/err/0024_many_type_parens.txt", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0024_many_type_parens.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0024_many_type_parens.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0024_many_type_parens.txt?ref=c447fe9bc06006a7080da782cf67d739c91b534c", "patch": "@@ -290,32 +290,32 @@ SOURCE_FILE@[0; 240)\n         WHITESPACE@[237; 238) \"\\n\"\n         R_CURLY@[238; 239) \"}\"\n   WHITESPACE@[239; 240) \"\\n\"\n-error 88: expected COMMA\n-error 88: expected R_ANGLE\n-error 121: expected SEMI\n-error 121: expected expression\n-error 140: expected type\n-error 141: expected R_PAREN\n-error 141: expected COMMA\n-error 141: expected R_ANGLE\n-error 141: expected SEMI\n-error 146: expected SEMI\n-error 146: expected expression\n-error 147: expected SEMI\n-error 148: expected expression\n-error 149: expected SEMI\n-error 154: expected pattern\n-error 155: expected IN_KW\n-error 155: expected expression\n-error 157: expected a block\n-error 165: expected expression\n-error 168: expected expression\n-error 179: expected expression\n-error 180: expected COMMA\n-error 180: expected expression\n-error 180: expected R_PAREN\n-error 180: expected SEMI\n-error 215: expected COMMA\n-error 215: expected R_ANGLE\n-error 235: expected SEMI\n-error 235: expected expression\n+error [88; 88): expected COMMA\n+error [88; 88): expected R_ANGLE\n+error [121; 121): expected SEMI\n+error [121; 121): expected expression\n+error [140; 140): expected type\n+error [141; 141): expected R_PAREN\n+error [141; 141): expected COMMA\n+error [141; 141): expected R_ANGLE\n+error [141; 141): expected SEMI\n+error [146; 146): expected SEMI\n+error [146; 146): expected expression\n+error [147; 147): expected SEMI\n+error [148; 148): expected expression\n+error [149; 149): expected SEMI\n+error [154; 154): expected pattern\n+error [155; 155): expected IN_KW\n+error [155; 155): expected expression\n+error [157; 157): expected a block\n+error [165; 165): expected expression\n+error [168; 168): expected expression\n+error [179; 179): expected expression\n+error [180; 180): expected COMMA\n+error [180; 180): expected expression\n+error [180; 180): expected R_PAREN\n+error [180; 180): expected SEMI\n+error [215; 215): expected COMMA\n+error [215; 215): expected R_ANGLE\n+error [235; 235): expected SEMI\n+error [235; 235): expected expression"}, {"sha": "ca7f2d2552bc9a3017e8b0ce3397c1fdaca98c52", "filename": "crates/ra_syntax/test_data/parser/err/0025_nope.txt", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0025_nope.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0025_nope.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0025_nope.txt?ref=c447fe9bc06006a7080da782cf67d739c91b534c", "patch": "@@ -191,14 +191,14 @@ SOURCE_FILE@[0; 575)\n         WHITESPACE@[572; 573) \"\\n\"\n         R_CURLY@[573; 574) \"}\"\n   WHITESPACE@[574; 575) \"\\n\"\n-error 95: expected type\n-error 95: expected COMMA\n-error 96: expected field\n-error 98: expected field declaration\n-error 371: expected COMMA\n-error 372: expected a type\n-error 372: expected R_PAREN\n-error 372: expected COMMA\n-error 372: expected enum variant\n-error 374: expected enum variant\n-error 508: expected expression\n+error [95; 95): expected type\n+error [95; 95): expected COMMA\n+error [96; 96): expected field\n+error [98; 98): expected field declaration\n+error [371; 371): expected COMMA\n+error [372; 372): expected a type\n+error [372; 372): expected R_PAREN\n+error [372; 372): expected COMMA\n+error [372; 372): expected enum variant\n+error [374; 374): expected enum variant\n+error [508; 508): expected expression"}, {"sha": "3942e09049de9a66ab750bd7844c973a44cacf15", "filename": "crates/ra_syntax/test_data/parser/err/0026_imp_recovery.txt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0026_imp_recovery.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0026_imp_recovery.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0026_imp_recovery.txt?ref=c447fe9bc06006a7080da782cf67d739c91b534c", "patch": "@@ -45,5 +45,5 @@ SOURCE_FILE@[0; 38)\n       L_CURLY@[35; 36) \"{\"\n       R_CURLY@[36; 37) \"}\"\n   WHITESPACE@[37; 38) \"\\n\"\n-error 14: expected trait or type\n-error 14: expected `{`\n+error [14; 14): expected trait or type\n+error [14; 14): expected `{`"}, {"sha": "4a28bcabff4b785416de6eef092d9f138fa81353", "filename": "crates/ra_syntax/test_data/parser/err/0027_incomplere_where_for.txt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0027_incomplere_where_for.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0027_incomplere_where_for.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0027_incomplere_where_for.txt?ref=c447fe9bc06006a7080da782cf67d739c91b534c", "patch": "@@ -25,5 +25,5 @@ SOURCE_FILE@[0; 30)\n         L_CURLY@[27; 28) \"{\"\n         R_CURLY@[28; 29) \"}\"\n   WHITESPACE@[29; 30) \"\\n\"\n-error 26: expected a path\n-error 26: expected colon\n+error [26; 26): expected a path\n+error [26; 26): expected colon"}, {"sha": "1778494760f3e5f3ad73f76016670446826d118e", "filename": "crates/ra_syntax/test_data/parser/err/0029_field_completion.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0029_field_completion.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0029_field_completion.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0029_field_completion.txt?ref=c447fe9bc06006a7080da782cf67d739c91b534c", "patch": "@@ -33,4 +33,4 @@ SOURCE_FILE@[0; 24)\n         WHITESPACE@[21; 22) \"\\n\"\n         R_CURLY@[22; 23) \"}\"\n   WHITESPACE@[23; 24) \"\\n\"\n-error 21: expected field name or number\n+error [21; 21): expected field name or number"}, {"sha": "c36e2f770c877495c655731ce174c51ba9242e1f", "filename": "crates/ra_syntax/test_data/parser/err/0032_match_arms_inner_attrs.txt", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0032_match_arms_inner_attrs.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0032_match_arms_inner_attrs.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0032_match_arms_inner_attrs.txt?ref=c447fe9bc06006a7080da782cf67d739c91b534c", "patch": "@@ -191,14 +191,14 @@ SOURCE_FILE@[0; 293)\n         WHITESPACE@[290; 291) \"\\n\"\n         R_CURLY@[291; 292) \"}\"\n   WHITESPACE@[292; 293) \"\\n\"\n-error 52: expected `[`\n-error 52: expected pattern\n-error 53: expected FAT_ARROW\n-error 78: expected COMMA\n-error 161: expected `[`\n-error 161: expected pattern\n-error 162: expected FAT_ARROW\n-error 232: expected `[`\n-error 232: expected pattern\n-error 233: expected FAT_ARROW\n-error 250: expected COMMA\n+error [52; 52): expected `[`\n+error [52; 52): expected pattern\n+error [53; 53): expected FAT_ARROW\n+error [78; 78): expected COMMA\n+error [161; 161): expected `[`\n+error [161; 161): expected pattern\n+error [162; 162): expected FAT_ARROW\n+error [232; 232): expected `[`\n+error [232; 232): expected pattern\n+error [233; 233): expected FAT_ARROW\n+error [250; 250): expected COMMA"}, {"sha": "e914e688bbe919a7c155646e0452f82667e6b59c", "filename": "crates/ra_syntax/test_data/parser/err/0033_match_arms_outer_attrs.txt", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0033_match_arms_outer_attrs.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0033_match_arms_outer_attrs.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0033_match_arms_outer_attrs.txt?ref=c447fe9bc06006a7080da782cf67d739c91b534c", "patch": "@@ -62,6 +62,6 @@ SOURCE_FILE@[0; 89)\n         WHITESPACE@[86; 87) \"\\n\"\n         R_CURLY@[87; 88) \"}\"\n   WHITESPACE@[88; 89) \"\\n\"\n-error 80: expected pattern\n-error 80: expected FAT_ARROW\n-error 80: expected expression\n+error [80; 80): expected pattern\n+error [80; 80): expected FAT_ARROW\n+error [80; 80): expected expression"}, {"sha": "2c91b6841fecda88d204eb7842f1ca1ed5e50af4", "filename": "crates/ra_syntax/test_data/parser/err/0034_bad_box_pattern.txt", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0034_bad_box_pattern.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0034_bad_box_pattern.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0034_bad_box_pattern.txt?ref=c447fe9bc06006a7080da782cf67d739c91b534c", "patch": "@@ -88,9 +88,9 @@ SOURCE_FILE@[0; 91)\n         WHITESPACE@[87; 88) \"\\n\"\n         R_CURLY@[88; 89) \"}\"\n   WHITESPACE@[89; 91) \"\\n\\n\"\n-error 24: expected a name\n-error 27: expected SEMI\n-error 48: expected a name\n-error 51: expected SEMI\n-error 76: expected a name\n-error 79: expected SEMI\n+error [24; 24): expected a name\n+error [27; 27): expected SEMI\n+error [48; 48): expected a name\n+error [51; 51): expected SEMI\n+error [76; 76): expected a name\n+error [79; 79): expected SEMI"}, {"sha": "8cb4ea79637c04c8b42150d4a46e240b663a37b6", "filename": "crates/ra_syntax/test_data/parser/err/0035_use_recover.txt", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0035_use_recover.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0035_use_recover.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0035_use_recover.txt?ref=c447fe9bc06006a7080da782cf67d739c91b534c", "patch": "@@ -48,7 +48,7 @@ SOURCE_FILE@[0; 48)\n         L_CURLY@[45; 46) \"{\"\n         R_CURLY@[46; 47) \"}\"\n   WHITESPACE@[47; 48) \"\\n\"\n-error 17: expected one of `*`, `::`, `{`, `self`, `super` or an identifier\n-error 17: expected SEMI\n-error 37: expected one of `*`, `::`, `{`, `self`, `super` or an identifier\n-error 37: expected SEMI\n+error [17; 17): expected one of `*`, `::`, `{`, `self`, `super` or an identifier\n+error [17; 17): expected SEMI\n+error [37; 37): expected one of `*`, `::`, `{`, `self`, `super` or an identifier\n+error [37; 37): expected SEMI"}, {"sha": "f5490fbe81f3375105328e3173deefec6ddbe1aa", "filename": "crates/ra_syntax/test_data/parser/err/0036_partial_use.txt", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0036_partial_use.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0036_partial_use.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0036_partial_use.txt?ref=c447fe9bc06006a7080da782cf67d739c91b534c", "patch": "@@ -39,13 +39,13 @@ SOURCE_FILE@[0; 37)\n         ERROR@[35; 36)\n           SEMI@[35; 36) \";\"\n   WHITESPACE@[36; 37) \"\\n\"\n-error 22: expected COMMA\n-error 22: expected one of `*`, `::`, `{`, `self`, `super` or an identifier\n-error 23: expected COMMA\n-error 24: expected one of `*`, `::`, `{`, `self`, `super` or an identifier\n-error 27: expected COMMA\n-error 35: expected COMMA\n-error 35: expected one of `*`, `::`, `{`, `self`, `super` or an identifier\n-error 36: expected COMMA\n-error 36: expected R_CURLY\n-error 36: expected SEMI\n+error [22; 22): expected COMMA\n+error [22; 22): expected one of `*`, `::`, `{`, `self`, `super` or an identifier\n+error [23; 23): expected COMMA\n+error [24; 24): expected one of `*`, `::`, `{`, `self`, `super` or an identifier\n+error [27; 27): expected COMMA\n+error [35; 35): expected COMMA\n+error [35; 35): expected one of `*`, `::`, `{`, `self`, `super` or an identifier\n+error [36; 36): expected COMMA\n+error [36; 36): expected R_CURLY\n+error [36; 36): expected SEMI"}, {"sha": "d0a128a5fb261d85e96ec1111ab82a6bd8ad93f6", "filename": "crates/ra_syntax/test_data/parser/err/0037_visibility_in_traits.txt", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0037_visibility_in_traits.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0037_visibility_in_traits.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0037_visibility_in_traits.txt?ref=c447fe9bc06006a7080da782cf67d739c91b534c", "patch": "@@ -94,6 +94,6 @@ SOURCE_FILE@[0; 118)\n       WHITESPACE@[115; 116) \"\\n\"\n       R_CURLY@[116; 117) \"}\"\n   WHITESPACE@[117; 118) \"\\n\"\n-error [36; 39): unnecessary visibility qualifier\n-error [56; 66): unnecessary visibility qualifier\n-error [86; 96): unnecessary visibility qualifier\n+error [36; 39): Unnecessary visibility qualifier\n+error [56; 66): Unnecessary visibility qualifier\n+error [86; 96): Unnecessary visibility qualifier"}, {"sha": "4a2f0a6961aad9ea63d3f9cf61a106421effbdd2", "filename": "crates/ra_syntax/test_data/parser/err/0039_lambda_recovery.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0039_lambda_recovery.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0039_lambda_recovery.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0039_lambda_recovery.txt?ref=c447fe9bc06006a7080da782cf67d739c91b534c", "patch": "@@ -80,4 +80,4 @@ SOURCE_FILE@[0; 83)\n         WHITESPACE@[80; 81) \"\\n\"\n         R_CURLY@[81; 82) \"}\"\n   WHITESPACE@[82; 83) \"\\n\"\n-error 56: expected expression\n+error [56; 56): expected expression"}, {"sha": "530533b71fe8749e5e16601280895c71c6aefe1e", "filename": "crates/ra_syntax/test_data/parser/inline/err/0001_array_type_missing_semi.txt", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0001_array_type_missing_semi.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0001_array_type_missing_semi.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0001_array_type_missing_semi.txt?ref=c447fe9bc06006a7080da782cf67d739c91b534c", "patch": "@@ -20,8 +20,8 @@ SOURCE_FILE@[0; 18)\n   ERROR@[16; 17)\n     SEMI@[16; 17) \";\"\n   WHITESPACE@[17; 18) \"\\n\"\n-error 12: expected `;` or `]`\n-error 12: expected SEMI\n-error 13: expected an item\n-error 15: expected an item\n-error 16: expected an item\n+error [12; 12): expected `;` or `]`\n+error [12; 12): expected SEMI\n+error [13; 13): expected an item\n+error [15; 15): expected an item\n+error [16; 16): expected an item"}, {"sha": "0187d872da632cd53503468b24d51b24b384da3f", "filename": "crates/ra_syntax/test_data/parser/inline/err/0002_misplaced_label_err.txt", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0002_misplaced_label_err.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0002_misplaced_label_err.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0002_misplaced_label_err.txt?ref=c447fe9bc06006a7080da782cf67d739c91b534c", "patch": "@@ -23,7 +23,7 @@ SOURCE_FILE@[0; 30)\n         WHITESPACE@[27; 28) \"\\n\"\n         R_CURLY@[28; 29) \"}\"\n   WHITESPACE@[29; 30) \"\\n\"\n-error 22: expected a loop\n-error 22: expected SEMI\n-error 27: expected type\n-error 27: expected `{`\n+error [22; 22): expected a loop\n+error [22; 22): expected SEMI\n+error [27; 27): expected type\n+error [27; 27): expected `{`"}, {"sha": "2ab29eecc1df2ced787435e9094b8e2e56e6baf3", "filename": "crates/ra_syntax/test_data/parser/inline/err/0003_pointer_type_no_mutability.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0003_pointer_type_no_mutability.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0003_pointer_type_no_mutability.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0003_pointer_type_no_mutability.txt?ref=c447fe9bc06006a7080da782cf67d739c91b534c", "patch": "@@ -14,4 +14,4 @@ SOURCE_FILE@[0; 14)\n         R_PAREN@[11; 12) \")\"\n     SEMI@[12; 13) \";\"\n   WHITESPACE@[13; 14) \"\\n\"\n-error 10: expected mut or const in raw pointer type (use `*mut T` or `*const T` as appropriate)\n+error [10; 10): expected mut or const in raw pointer type (use `*mut T` or `*const T` as appropriate)"}, {"sha": "d5aea05c2a3e58cb6699eeaaae4d5b57abd9c245", "filename": "crates/ra_syntax/test_data/parser/inline/err/0004_impl_type.txt", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0004_impl_type.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0004_impl_type.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0004_impl_type.txt?ref=c447fe9bc06006a7080da782cf67d739c91b534c", "patch": "@@ -73,7 +73,7 @@ SOURCE_FILE@[0; 87)\n       L_CURLY@[84; 85) \"{\"\n       R_CURLY@[85; 86) \"}\"\n   WHITESPACE@[86; 87) \"\\n\"\n-error 38: expected trait or type\n-error 38: expected `{`\n-error 70: expected trait or type\n-error 70: expected `{`\n+error [38; 38): expected trait or type\n+error [38; 38): expected `{`\n+error [70; 70): expected trait or type\n+error [70; 70): expected `{`"}, {"sha": "9e9186ad450efb4a8c026ec9c80a897e4c935dd3", "filename": "crates/ra_syntax/test_data/parser/inline/err/0005_fn_pointer_type_missing_fn.txt", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0005_fn_pointer_type_missing_fn.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0005_fn_pointer_type_missing_fn.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0005_fn_pointer_type_missing_fn.txt?ref=c447fe9bc06006a7080da782cf67d739c91b534c", "patch": "@@ -16,8 +16,8 @@ SOURCE_FILE@[0; 20)\n   ERROR@[18; 19)\n     SEMI@[18; 19) \";\"\n   WHITESPACE@[19; 20) \"\\n\"\n-error 15: expected `fn`\n-error 15: expected SEMI\n-error 16: expected an item\n-error 17: expected an item\n-error 18: expected an item\n+error [15; 15): expected `fn`\n+error [15; 15): expected SEMI\n+error [16; 16): expected an item\n+error [17; 17): expected an item\n+error [18; 18): expected an item"}, {"sha": "690acdca35bda82917e31c34a3105629871fddaf", "filename": "crates/ra_syntax/test_data/parser/inline/err/0006_unsafe_block_in_mod.txt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0006_unsafe_block_in_mod.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0006_unsafe_block_in_mod.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0006_unsafe_block_in_mod.txt?ref=c447fe9bc06006a7080da782cf67d739c91b534c", "patch": "@@ -33,5 +33,5 @@ SOURCE_FILE@[0; 33)\n         L_CURLY@[30; 31) \"{\"\n         R_CURLY@[31; 32) \"}\"\n   WHITESPACE@[32; 33) \"\\n\"\n-error 11: expected an item\n-error 18: expected an item\n+error [11; 11): expected an item\n+error [18; 18): expected an item"}, {"sha": "a4002a998d0b429ee1fd31c3c5db6f418cb7ac04", "filename": "crates/ra_syntax/test_data/parser/inline/err/0007_async_without_semicolon.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0007_async_without_semicolon.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0007_async_without_semicolon.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0007_async_without_semicolon.txt?ref=c447fe9bc06006a7080da782cf67d739c91b534c", "patch": "@@ -29,4 +29,4 @@ SOURCE_FILE@[0; 30)\n         WHITESPACE@[27; 28) \" \"\n         R_CURLY@[28; 29) \"}\"\n   WHITESPACE@[29; 30) \"\\n\"\n-error 27: expected SEMI\n+error [27; 27): expected SEMI"}, {"sha": "6f45a4fa6e8938cf57174128d6867cd66fa32c5b", "filename": "crates/ra_syntax/test_data/parser/inline/err/0008_pub_expr.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0008_pub_expr.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0008_pub_expr.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0008_pub_expr.txt?ref=c447fe9bc06006a7080da782cf67d739c91b534c", "patch": "@@ -23,4 +23,4 @@ SOURCE_FILE@[0; 21)\n         WHITESPACE@[18; 19) \" \"\n         R_CURLY@[19; 20) \"}\"\n   WHITESPACE@[20; 21) \"\\n\"\n-error 14: expected an item\n+error [14; 14): expected an item"}, {"sha": "e6d3a5c953d729ccd65f0d4f7201068940f1ccae", "filename": "crates/ra_syntax/test_data/parser/inline/err/0009_attr_on_expr_not_allowed.txt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0009_attr_on_expr_not_allowed.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0009_attr_on_expr_not_allowed.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0009_attr_on_expr_not_allowed.txt?ref=c447fe9bc06006a7080da782cf67d739c91b534c", "patch": "@@ -57,5 +57,5 @@ SOURCE_FILE@[0; 48)\n         WHITESPACE@[45; 46) \"\\n\"\n         R_CURLY@[46; 47) \"}\"\n   WHITESPACE@[47; 48) \"\\n\"\n-error 24: attributes are not allowed on BIN_EXPR\n-error 44: attributes are not allowed on IF_EXPR\n+error [24; 24): attributes are not allowed on BIN_EXPR\n+error [44; 44): attributes are not allowed on IF_EXPR"}, {"sha": "f6ac0feaf50dc79c64a6c52556b998c9171bd07f", "filename": "crates/ra_syntax/test_data/parser/inline/err/0010_wrong_order_fns.txt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0010_wrong_order_fns.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0010_wrong_order_fns.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0010_wrong_order_fns.txt?ref=c447fe9bc06006a7080da782cf67d739c91b534c", "patch": "@@ -37,5 +37,5 @@ SOURCE_FILE@[0; 50)\n         L_CURLY@[47; 48) \"{\"\n         R_CURLY@[48; 49) \"}\"\n   WHITESPACE@[49; 50) \"\\n\"\n-error 6: expected existential, fn, trait or impl\n-error 31: expected existential, fn, trait or impl\n+error [6; 6): expected existential, fn, trait or impl\n+error [31; 31): expected existential, fn, trait or impl"}, {"sha": "5b3dc5af27d431ec1af42cd0c83f13ce31436243", "filename": "crates/ra_syntax/test_data/parser/inline/err/0013_static_underscore.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0013_static_underscore.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0013_static_underscore.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0013_static_underscore.txt?ref=c447fe9bc06006a7080da782cf67d739c91b534c", "patch": "@@ -18,4 +18,4 @@ SOURCE_FILE@[0; 19)\n       INT_NUMBER@[16; 17) \"5\"\n     SEMI@[17; 18) \";\"\n   WHITESPACE@[18; 19) \"\\n\"\n-error 7: expected a name\n+error [7; 7): expected a name"}, {"sha": "25d80be1d2e30c23143656ff50191f7f6e8c2850", "filename": "crates/ra_syntax/test_data/parser/inline/err/0014_default_fn_type.txt", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0014_default_fn_type.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c447fe9bc06006a7080da782cf67d739c91b534c/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0014_default_fn_type.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0014_default_fn_type.txt?ref=c447fe9bc06006a7080da782cf67d739c91b534c", "patch": "@@ -51,9 +51,9 @@ SOURCE_FILE@[0; 62)\n       WHITESPACE@[59; 60) \"\\n\"\n       R_CURLY@[60; 61) \"}\"\n   WHITESPACE@[61; 62) \"\\n\"\n-error 21: expected EXCL\n-error 21: expected `{`, `[`, `(`\n-error 21: expected SEMI\n-error 47: expected EXCL\n-error 47: expected `{`, `[`, `(`\n-error 47: expected SEMI\n+error [21; 21): expected EXCL\n+error [21; 21): expected `{`, `[`, `(`\n+error [21; 21): expected SEMI\n+error [47; 47): expected EXCL\n+error [47; 47): expected `{`, `[`, `(`\n+error [47; 47): expected SEMI"}]}