{"sha": "9707bec3c5692774e01aaab51465f874107da160", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3MDdiZWMzYzU2OTI3NzRlMDFhYWFiNTE0NjVmODc0MTA3ZGExNjA=", "commit": {"author": {"name": "Youngsuk Kim", "email": "joseph942010@gmail.com", "date": "2020-04-16T20:26:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-16T20:26:14Z"}, "message": "Minor fixes to doc comments of 'VecDequeue'\n\n1. Changed descriptions of `fn get` & `fn get_mut`.\r\n  Since both of these functions are returning references, and not the owned value, I thought the doc comments could be fixed to be consistent with doc comments of `fn front` & `fn front_mut`.\r\n\r\n2. Other changes are minor fixes or additions for clarification.\r\n\r\nThank you for taking a look :)", "tree": {"sha": "ed5761ed7a8a8156ab66acff2f16f6d6ff0d2e73", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed5761ed7a8a8156ab66acff2f16f6d6ff0d2e73"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9707bec3c5692774e01aaab51465f874107da160", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJemL9mCRBK7hj4Ov3rIwAAdHIIADiGwxEIe5e6maf8YWVrMp/f\nxmeqIIBHBLT/kIVIh4GuSmnJzDe+8tvHoC89IEErzR3mJH783tGDsvOJvAq4sCfg\nXGKdSqPMPsYfdlGwPGc/ZsVxpySmKl9kTjjUHRnpHb6Y1ghlRmgWOeVS+vAY/K/g\n01OJZ1gHyMx7wRpQJG+uFo4milDGg9AOtwNokZGamVt9vC7QFZgkdg0FVTjIuZwP\ntdmIsBDCJE1AyTGFEaJjTkBh4EGHM/kHpCGMNoIpggGg4EqYSnJ5CbN3hO4Gs93j\nZeeSTEAmzWzmPPu8Vc4WLNJbeAJLBhinlXxdA2UpNA8CxzEddn8ofaY86CDXSMQ=\n=40dj\n-----END PGP SIGNATURE-----\n", "payload": "tree ed5761ed7a8a8156ab66acff2f16f6d6ff0d2e73\nparent 7fb5187d0423f4cd0441526571b8cd61927123c9\nauthor Youngsuk Kim <joseph942010@gmail.com> 1587068774 -0400\ncommitter GitHub <noreply@github.com> 1587068774 -0400\n\nMinor fixes to doc comments of 'VecDequeue'\n\n1. Changed descriptions of `fn get` & `fn get_mut`.\r\n  Since both of these functions are returning references, and not the owned value, I thought the doc comments could be fixed to be consistent with doc comments of `fn front` & `fn front_mut`.\r\n\r\n2. Other changes are minor fixes or additions for clarification.\r\n\r\nThank you for taking a look :)"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9707bec3c5692774e01aaab51465f874107da160", "html_url": "https://github.com/rust-lang/rust/commit/9707bec3c5692774e01aaab51465f874107da160", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9707bec3c5692774e01aaab51465f874107da160/comments", "author": {"login": "JOE1994", "id": 10286488, "node_id": "MDQ6VXNlcjEwMjg2NDg4", "avatar_url": "https://avatars.githubusercontent.com/u/10286488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JOE1994", "html_url": "https://github.com/JOE1994", "followers_url": "https://api.github.com/users/JOE1994/followers", "following_url": "https://api.github.com/users/JOE1994/following{/other_user}", "gists_url": "https://api.github.com/users/JOE1994/gists{/gist_id}", "starred_url": "https://api.github.com/users/JOE1994/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JOE1994/subscriptions", "organizations_url": "https://api.github.com/users/JOE1994/orgs", "repos_url": "https://api.github.com/users/JOE1994/repos", "events_url": "https://api.github.com/users/JOE1994/events{/privacy}", "received_events_url": "https://api.github.com/users/JOE1994/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7fb5187d0423f4cd0441526571b8cd61927123c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/7fb5187d0423f4cd0441526571b8cd61927123c9", "html_url": "https://github.com/rust-lang/rust/commit/7fb5187d0423f4cd0441526571b8cd61927123c9"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "06e00465e12db920d5459cb9e7353bd6202e73a7", "filename": "src/liballoc/collections/vec_deque.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9707bec3c5692774e01aaab51465f874107da160/src%2Fliballoc%2Fcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9707bec3c5692774e01aaab51465f874107da160/src%2Fliballoc%2Fcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fvec_deque.rs?ref=9707bec3c5692774e01aaab51465f874107da160", "patch": "@@ -488,7 +488,7 @@ impl<T> VecDeque<T> {\n         VecDeque { tail: 0, head: 0, buf: RawVec::with_capacity(cap) }\n     }\n \n-    /// Retrieves an element in the `VecDeque` by index.\n+    /// Provides a reference to the element at the given index.\n     ///\n     /// Element at index 0 is the front of the queue.\n     ///\n@@ -513,7 +513,7 @@ impl<T> VecDeque<T> {\n         }\n     }\n \n-    /// Retrieves an element in the `VecDeque` mutably by index.\n+    /// Provides a mutable reference to the element at the given index.\n     ///\n     /// Element at index 0 is the front of the queue.\n     ///\n@@ -651,7 +651,7 @@ impl<T> VecDeque<T> {\n         }\n     }\n \n-    /// Tries to reserves the minimum capacity for exactly `additional` more elements to\n+    /// Tries to reserve the minimum capacity for exactly `additional` more elements to\n     /// be inserted in the given `VecDeque<T>`. After calling `reserve_exact`,\n     /// capacity will be greater than or equal to `self.len() + additional`.\n     /// Does nothing if the capacity is already sufficient.\n@@ -662,7 +662,7 @@ impl<T> VecDeque<T> {\n     ///\n     /// # Errors\n     ///\n-    /// If the capacity overflows, or the allocator reports a failure, then an error\n+    /// If the capacity overflows `usize`, or the allocator reports a failure, then an error\n     /// is returned.\n     ///\n     /// # Examples\n@@ -678,7 +678,7 @@ impl<T> VecDeque<T> {\n     ///     // Pre-reserve the memory, exiting if we can't\n     ///     output.try_reserve_exact(data.len())?;\n     ///\n-    ///     // Now we know this can't OOM in the middle of our complex work\n+    ///     // Now we know this can't OOM(Out-Of-Memory) in the middle of our complex work\n     ///     output.extend(data.iter().map(|&val| {\n     ///         val * 2 + 5 // very complicated\n     ///     }));\n@@ -700,7 +700,7 @@ impl<T> VecDeque<T> {\n     ///\n     /// # Errors\n     ///\n-    /// If the capacity overflows, or the allocator reports a failure, then an error\n+    /// If the capacity overflows `usize`, or the allocator reports a failure, then an error\n     /// is returned.\n     ///\n     /// # Examples"}]}