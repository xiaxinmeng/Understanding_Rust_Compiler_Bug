{"sha": "7d379fa78f78a3b88245d73a6d9aa1d2725c304c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkMzc5ZmE3OGY3OGEzYjg4MjQ1ZDczYTZkOWFhMWQyNzI1YzMwNGM=", "commit": {"author": {"name": "Vladimir Matveev", "email": "vladimir.matweev@gmail.com", "date": "2014-10-30T20:22:40Z"}, "committer": {"name": "Vladimir Matveev", "email": "vladimir.matweev@gmail.com", "date": "2014-11-05T09:01:23Z"}, "message": "Fixed other tests to pass make check", "tree": {"sha": "5969ba1e7dfc2339727fcbbf6418076dbc123dce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5969ba1e7dfc2339727fcbbf6418076dbc123dce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d379fa78f78a3b88245d73a6d9aa1d2725c304c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d379fa78f78a3b88245d73a6d9aa1d2725c304c", "html_url": "https://github.com/rust-lang/rust/commit/7d379fa78f78a3b88245d73a6d9aa1d2725c304c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d379fa78f78a3b88245d73a6d9aa1d2725c304c/comments", "author": {"login": "netvl", "id": 280456, "node_id": "MDQ6VXNlcjI4MDQ1Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/280456?v=4", "gravatar_id": "", "url": "https://api.github.com/users/netvl", "html_url": "https://github.com/netvl", "followers_url": "https://api.github.com/users/netvl/followers", "following_url": "https://api.github.com/users/netvl/following{/other_user}", "gists_url": "https://api.github.com/users/netvl/gists{/gist_id}", "starred_url": "https://api.github.com/users/netvl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/netvl/subscriptions", "organizations_url": "https://api.github.com/users/netvl/orgs", "repos_url": "https://api.github.com/users/netvl/repos", "events_url": "https://api.github.com/users/netvl/events{/privacy}", "received_events_url": "https://api.github.com/users/netvl/received_events", "type": "User", "site_admin": false}, "committer": {"login": "netvl", "id": 280456, "node_id": "MDQ6VXNlcjI4MDQ1Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/280456?v=4", "gravatar_id": "", "url": "https://api.github.com/users/netvl", "html_url": "https://github.com/netvl", "followers_url": "https://api.github.com/users/netvl/followers", "following_url": "https://api.github.com/users/netvl/following{/other_user}", "gists_url": "https://api.github.com/users/netvl/gists{/gist_id}", "starred_url": "https://api.github.com/users/netvl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/netvl/subscriptions", "organizations_url": "https://api.github.com/users/netvl/orgs", "repos_url": "https://api.github.com/users/netvl/repos", "events_url": "https://api.github.com/users/netvl/events{/privacy}", "received_events_url": "https://api.github.com/users/netvl/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e3344b17f777f5bca0d3eaa9278fa2d628ca064", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e3344b17f777f5bca0d3eaa9278fa2d628ca064", "html_url": "https://github.com/rust-lang/rust/commit/7e3344b17f777f5bca0d3eaa9278fa2d628ca064"}], "stats": {"total": 34, "additions": 12, "deletions": 22}, "files": [{"sha": "b082cffd668182646546ccfc52b1863bc3e6579f", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d379fa78f78a3b88245d73a6d9aa1d2725c304c/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d379fa78f78a3b88245d73a6d9aa1d2725c304c/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=7d379fa78f78a3b88245d73a6d9aa1d2725c304c", "patch": "@@ -444,7 +444,7 @@ fn run_debuginfo_gdb_test(config: &Config, props: &TestProps, testfile: &Path) {\n                 //waiting 1 second for gdbserver start\n                 timer::sleep(Duration::milliseconds(1000));\n                 let result = task::try(proc() {\n-                    tcp::TcpStream::connect(\"127.0.0.1\", 5039).unwrap();\n+                    tcp::TcpStream::connect(\"127.0.0.1:5039\").unwrap();\n                 });\n                 if result.is_err() {\n                     continue;"}, {"sha": "ebf541a63dafaa1d0d347712cf5fd878e83a29ff", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d379fa78f78a3b88245d73a6d9aa1d2725c304c/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d379fa78f78a3b88245d73a6d9aa1d2725c304c/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=7d379fa78f78a3b88245d73a6d9aa1d2725c304c", "patch": "@@ -91,7 +91,7 @@ Some examples of obvious things you might want to do\n     # // locally, we still want to be type checking this code, so lets\n     # // just stop it running (#11576)\n     # if false {\n-    let mut socket = TcpStream::connect(\"127.0.0.1\", 8080).unwrap();\n+    let mut socket = TcpStream::connect(\"127.0.0.1:8080\").unwrap();\n     socket.write(b\"GET / HTTP/1.0\\n\\n\");\n     let response = socket.read_to_end();\n     # }\n@@ -106,7 +106,7 @@ Some examples of obvious things you might want to do\n     use std::io::{TcpListener, TcpStream};\n     use std::io::{Acceptor, Listener};\n \n-    let listener = TcpListener::bind(\"127.0.0.1\", 80);\n+    let listener = TcpListener::bind(\"127.0.0.1:80\");\n \n     // bind the listener to the specified address\n     let mut acceptor = listener.listen();"}, {"sha": "6464a180b68fb0529c2b1ae57d0c3ac331e4b750", "filename": "src/libstd/io/net/tcp.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7d379fa78f78a3b88245d73a6d9aa1d2725c304c/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d379fa78f78a3b88245d73a6d9aa1d2725c304c/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs?ref=7d379fa78f78a3b88245d73a6d9aa1d2725c304c", "patch": "@@ -20,18 +20,15 @@\n use clone::Clone;\n use io::IoResult;\n use iter::Iterator;\n-use slice::ImmutableSlice;\n use result::{Ok,Err};\n-use io::net::addrinfo::get_host_addresses;\n use io::net::ip::{SocketAddr, ToSocketAddr};\n-use io::{IoError, ConnectionFailed, InvalidInput};\n+use io::IoError;\n use io::{Reader, Writer, Listener, Acceptor};\n use io::{standard_error, TimedOut};\n-use from_str::FromStr;\n use kinds::Send;\n use option::{None, Some, Option};\n use boxed::Box;\n-use rt::rtio::{IoFactory, LocalIo, RtioSocket, RtioTcpListener};\n+use rt::rtio::{IoFactory, RtioSocket, RtioTcpListener};\n use rt::rtio::{RtioTcpAcceptor, RtioTcpStream};\n use rt::rtio;\n use time::Duration;"}, {"sha": "63303ef9c897a340306b05f67ea93afbba96804f", "filename": "src/libstd/io/net/udp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d379fa78f78a3b88245d73a6d9aa1d2725c304c/src%2Flibstd%2Fio%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d379fa78f78a3b88245d73a6d9aa1d2725c304c/src%2Flibstd%2Fio%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Fudp.rs?ref=7d379fa78f78a3b88245d73a6d9aa1d2725c304c", "patch": "@@ -22,7 +22,7 @@ use kinds::Send;\n use boxed::Box;\n use option::Option;\n use result::{Ok, Err};\n-use rt::rtio::{RtioSocket, RtioUdpSocket, IoFactory, LocalIo};\n+use rt::rtio::{RtioSocket, RtioUdpSocket, IoFactory};\n use rt::rtio;\n \n /// A User Datagram Protocol socket."}, {"sha": "1ed2efa4b320372b94448b4d8a3be9bab5a3438c", "filename": "src/test/run-pass/tcp-accept-stress.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7d379fa78f78a3b88245d73a6d9aa1d2725c304c/src%2Ftest%2Frun-pass%2Ftcp-accept-stress.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d379fa78f78a3b88245d73a6d9aa1d2725c304c/src%2Ftest%2Frun-pass%2Ftcp-accept-stress.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftcp-accept-stress.rs?ref=7d379fa78f78a3b88245d73a6d9aa1d2725c304c", "patch": "@@ -24,7 +24,7 @@ fn main() {\n }\n \n fn test() {\n-    let mut l = TcpListener::bind(\"127.0.0.1\", 0).unwrap();\n+    let mut l = TcpListener::bind(\"127.0.0.1:0\").unwrap();\n     let addr = l.socket_name().unwrap();\n     let mut a = l.listen().unwrap();\n     let cnt = Arc::new(atomic::AtomicUint::new(0));\n@@ -56,8 +56,7 @@ fn test() {\n         let cli_tx = cli_tx.clone();\n         spawn(proc() {\n             for _ in range(0, M) {\n-                let _s = TcpStream::connect(addr.ip.to_string().as_slice(),\n-                                            addr.port).unwrap();\n+                let _s = TcpStream::connect(addr).unwrap();\n             }\n             cli_tx.send(());\n         });"}, {"sha": "7dcbccdb17af0bd8b7bc5506e38ed4b52bfe727f", "filename": "src/test/run-pass/tcp-connect-timeouts.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7d379fa78f78a3b88245d73a6d9aa1d2725c304c/src%2Ftest%2Frun-pass%2Ftcp-connect-timeouts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d379fa78f78a3b88245d73a6d9aa1d2725c304c/src%2Ftest%2Frun-pass%2Ftcp-connect-timeouts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftcp-connect-timeouts.rs?ref=7d379fa78f78a3b88245d73a6d9aa1d2725c304c", "patch": "@@ -31,13 +31,11 @@ use std::time::Duration;\n #[cfg_attr(target_os = \"freebsd\", ignore)]\n fn eventual_timeout() {\n     let addr = next_test_ip4();\n-    let host = addr.ip.to_string();\n-    let port = addr.port;\n \n     let (tx1, rx1) = channel();\n     let (_tx2, rx2) = channel::<()>();\n     std::task::spawn(proc() {\n-        let _l = TcpListener::bind(host.as_slice(), port).unwrap().listen();\n+        let _l = TcpListener::bind(addr).unwrap().listen();\n         tx1.send(());\n         let _ = rx2.recv_opt();\n     });\n@@ -56,9 +54,7 @@ fn eventual_timeout() {\n \n fn timeout_success() {\n     let addr = next_test_ip4();\n-    let host = addr.ip.to_string();\n-    let port = addr.port;\n-    let _l = TcpListener::bind(host.as_slice(), port).unwrap().listen();\n+    let _l = TcpListener::bind(addr).unwrap().listen();\n \n     assert!(TcpStream::connect_timeout(addr, Duration::milliseconds(1000)).is_ok());\n }"}, {"sha": "676f7e91857f00fd87fb8d3046ad866cb4095c5d", "filename": "src/test/run-pass/tcp-stress.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7d379fa78f78a3b88245d73a6d9aa1d2725c304c/src%2Ftest%2Frun-pass%2Ftcp-stress.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d379fa78f78a3b88245d73a6d9aa1d2725c304c/src%2Ftest%2Frun-pass%2Ftcp-stress.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftcp-stress.rs?ref=7d379fa78f78a3b88245d73a6d9aa1d2725c304c", "patch": "@@ -33,7 +33,7 @@ fn main() {\n \n     let (tx, rx) = channel();\n     spawn(proc() {\n-        let mut listener = TcpListener::bind(\"127.0.0.1\", 0).unwrap();\n+        let mut listener = TcpListener::bind(\"127.0.0.1:0\").unwrap();\n         tx.send(listener.socket_name().unwrap());\n         let mut acceptor = listener.listen();\n         loop {\n@@ -54,9 +54,7 @@ fn main() {\n     for _ in range(0u, 1000) {\n         let tx = tx.clone();\n         TaskBuilder::new().stack_size(64 * 1024).spawn(proc() {\n-            let host = addr.ip.to_string();\n-            let port = addr.port;\n-            match TcpStream::connect(host.as_slice(), port) {\n+            match TcpStream::connect(addr) {\n                 Ok(stream) => {\n                     let mut stream = stream;\n                     stream.write([1]);"}]}