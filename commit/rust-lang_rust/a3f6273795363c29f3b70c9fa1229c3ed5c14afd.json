{"sha": "a3f6273795363c29f3b70c9fa1229c3ed5c14afd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzZjYyNzM3OTUzNjNjMjlmM2I3MGM5ZmExMjI5YzNlZDVjMTRhZmQ=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-04-01T20:22:10Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-04-01T20:22:10Z"}, "message": "rollup merge of #23867: nikomatsakis/issue-23086-take-3\n\nThis PR implements rust-lang/rfcs#1023. In the process it fixes #23086 and #23516. A few impls in libcore had to be updated, but the impact is generally pretty minimal. Most of the fallout is in the tests that probed the limits of today's coherence.\n\nI tested and we were able to build the most popular crates along with iron (modulo errors around errors being sendable).\n\nFixes #23918.", "tree": {"sha": "1caecaf3c7d0b18d9184db71cb13ab40d43f170d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1caecaf3c7d0b18d9184db71cb13ab40d43f170d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a3f6273795363c29f3b70c9fa1229c3ed5c14afd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a3f6273795363c29f3b70c9fa1229c3ed5c14afd", "html_url": "https://github.com/rust-lang/rust/commit/a3f6273795363c29f3b70c9fa1229c3ed5c14afd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a3f6273795363c29f3b70c9fa1229c3ed5c14afd/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "232e79fb91f4738194cc4d0757ce17895f992fe7", "url": "https://api.github.com/repos/rust-lang/rust/commits/232e79fb91f4738194cc4d0757ce17895f992fe7", "html_url": "https://github.com/rust-lang/rust/commit/232e79fb91f4738194cc4d0757ce17895f992fe7"}, {"sha": "19d3dab31b1fca3abc3ba00173b9148bd70d24b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/19d3dab31b1fca3abc3ba00173b9148bd70d24b0", "html_url": "https://github.com/rust-lang/rust/commit/19d3dab31b1fca3abc3ba00173b9148bd70d24b0"}], "stats": {"total": 332, "additions": 175, "deletions": 157}, "files": [{"sha": "bbf5d7a6042f2e4540899310d07933a273572d21", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 2, "deletions": 51, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/a3f6273795363c29f3b70c9fa1229c3ed5c14afd/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f6273795363c29f3b70c9fa1229c3ed5c14afd/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=a3f6273795363c29f3b70c9fa1229c3ed5c14afd", "patch": "@@ -51,15 +51,12 @@ use core::prelude::*;\n use core::any::Any;\n use core::cmp::Ordering;\n use core::default::Default;\n-use core::error::Error;\n use core::fmt;\n use core::hash::{self, Hash};\n use core::mem;\n use core::ops::{Deref, DerefMut};\n-use core::ptr::{self, Unique};\n-use core::raw::{TraitObject, Slice};\n-\n-use heap;\n+use core::ptr::{Unique};\n+use core::raw::{TraitObject};\n \n /// A value that represents the heap. This is the default place that the `box`\n /// keyword allocates into when no place is supplied.\n@@ -303,49 +300,3 @@ impl<I: DoubleEndedIterator + ?Sized> DoubleEndedIterator for Box<I> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<I: ExactSizeIterator + ?Sized> ExactSizeIterator for Box<I> {}\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, E: Error + 'a> From<E> for Box<Error + 'a> {\n-    fn from(err: E) -> Box<Error + 'a> {\n-        Box::new(err)\n-    }\n-}\n-\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, E: Error + Send + 'a> From<E> for Box<Error + Send + 'a> {\n-    fn from(err: E) -> Box<Error + Send + 'a> {\n-        Box::new(err)\n-    }\n-}\n-\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, 'b> From<&'b str> for Box<Error + Send + 'a> {\n-    fn from(err: &'b str) -> Box<Error + Send + 'a> {\n-        #[derive(Debug)]\n-        struct StringError(Box<str>);\n-        impl Error for StringError {\n-            fn description(&self) -> &str { &self.0 }\n-        }\n-        impl fmt::Display for StringError {\n-            fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-                self.0.fmt(f)\n-            }\n-        }\n-\n-        // Unfortunately `String` is located in libcollections, so we construct\n-        // a `Box<str>` manually here.\n-        unsafe {\n-            let alloc = if err.len() == 0 {\n-                0 as *mut u8\n-            } else {\n-                let ptr = heap::allocate(err.len(), 1);\n-                if ptr.is_null() { ::oom(); }\n-                ptr as *mut u8\n-            };\n-            ptr::copy(err.as_bytes().as_ptr(), alloc, err.len());\n-            Box::new(StringError(mem::transmute(Slice {\n-                data: alloc,\n-                len: err.len(),\n-            })))\n-        }\n-    }\n-}"}, {"sha": "7a7725320914f6fdba19cb1443d0d1e9c2da753b", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a3f6273795363c29f3b70c9fa1229c3ed5c14afd/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f6273795363c29f3b70c9fa1229c3ed5c14afd/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=a3f6273795363c29f3b70c9fa1229c3ed5c14afd", "patch": "@@ -17,7 +17,6 @@\n use core::prelude::*;\n \n use core::default::Default;\n-use core::error::Error;\n use core::fmt;\n use core::hash;\n use core::iter::{IntoIterator, FromIterator};\n@@ -723,23 +722,13 @@ impl fmt::Display for FromUtf8Error {\n     }\n }\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl Error for FromUtf8Error {\n-    fn description(&self) -> &str { \"invalid utf-8\" }\n-}\n-\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl fmt::Display for FromUtf16Error {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         fmt::Display::fmt(\"invalid utf-16: lone surrogate found\", f)\n     }\n }\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl Error for FromUtf16Error {\n-    fn description(&self) -> &str { \"invalid utf-16\" }\n-}\n-\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl FromIterator<char> for String {\n     fn from_iter<I: IntoIterator<Item=char>>(iter: I) -> String {"}, {"sha": "24035b7d9a83bdc8ff23a6c687ee58de29461a90", "filename": "src/libcore/error.rs", "status": "removed", "additions": 0, "deletions": 56, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/232e79fb91f4738194cc4d0757ce17895f992fe7/src%2Flibcore%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/232e79fb91f4738194cc4d0757ce17895f992fe7/src%2Flibcore%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ferror.rs?ref=232e79fb91f4738194cc4d0757ce17895f992fe7", "patch": "@@ -1,56 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-//! Traits for working with Errors.\n-//!\n-//! # The `Error` trait\n-//!\n-//! `Error` is a trait representing the basic expectations for error values,\n-//! i.e. values of type `E` in `Result<T, E>`. At a minimum, errors must provide\n-//! a description, but they may optionally provide additional detail (via\n-//! `Display`) and cause chain information:\n-//!\n-//! ```\n-//! use std::fmt::Display;\n-//!\n-//! trait Error: Display {\n-//!     fn description(&self) -> &str;\n-//!\n-//!     fn cause(&self) -> Option<&Error> { None }\n-//! }\n-//! ```\n-//!\n-//! The `cause` method is generally used when errors cross \"abstraction\n-//! boundaries\", i.e.  when a one module must report an error that is \"caused\"\n-//! by an error from a lower-level module. This setup makes it possible for the\n-//! high-level module to provide its own errors that do not commit to any\n-//! particular implementation, but also reveal some of its implementation for\n-//! debugging via `cause` chains.\n-\n-#![stable(feature = \"rust1\", since = \"1.0.0\")]\n-\n-use prelude::*;\n-use fmt::{Debug, Display};\n-\n-/// Base functionality for all errors in Rust.\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub trait Error: Debug + Display {\n-    /// A short description of the error.\n-    ///\n-    /// The description should not contain newlines or sentence-ending\n-    /// punctuation, to facilitate embedding in larger user-facing\n-    /// strings.\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn description(&self) -> &str;\n-\n-    /// The lower-level cause of this error, if any.\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn cause(&self) -> Option<&Error> { None }\n-}"}, {"sha": "2189e2c3ad1baca6a42e615d71f4b3c26190f865", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a3f6273795363c29f3b70c9fa1229c3ed5c14afd/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f6273795363c29f3b70c9fa1229c3ed5c14afd/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=a3f6273795363c29f3b70c9fa1229c3ed5c14afd", "patch": "@@ -147,7 +147,6 @@ pub mod slice;\n pub mod str;\n pub mod hash;\n pub mod fmt;\n-pub mod error;\n \n #[doc(primitive = \"bool\")]\n mod bool {"}, {"sha": "7daa1a9f420b6615bc27179e18170d8beb1eb2e1", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 20, "deletions": 21, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/a3f6273795363c29f3b70c9fa1229c3ed5c14afd/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f6273795363c29f3b70c9fa1229c3ed5c14afd/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=a3f6273795363c29f3b70c9fa1229c3ed5c14afd", "patch": "@@ -20,7 +20,6 @@ use self::wrapping::{OverflowingOps, WrappingOps};\n use char::CharExt;\n use clone::Clone;\n use cmp::{PartialEq, Eq, PartialOrd, Ord};\n-use error::Error;\n use fmt;\n use intrinsics;\n use iter::Iterator;\n@@ -2948,16 +2947,9 @@ enum IntErrorKind {\n     Underflow,\n }\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl fmt::Display for ParseIntError {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        self.description().fmt(f)\n-    }\n-}\n-\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl Error for ParseIntError {\n-    fn description(&self) -> &str {\n+impl ParseIntError {\n+    #[unstable(feature = \"core\", reason = \"available through Error trait\")]\n+    pub fn description(&self) -> &str {\n         match self.kind {\n             IntErrorKind::Empty => \"cannot parse integer from empty string\",\n             IntErrorKind::InvalidDigit => \"invalid digit found in string\",\n@@ -2967,6 +2959,13 @@ impl Error for ParseIntError {\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl fmt::Display for ParseIntError {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        self.description().fmt(f)\n+    }\n+}\n+\n /// An error which can be returned when parsing a float.\n #[derive(Debug, Clone, PartialEq)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -2978,19 +2977,19 @@ enum FloatErrorKind {\n     Invalid,\n }\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl fmt::Display for ParseFloatError {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        self.description().fmt(f)\n-    }\n-}\n-\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl Error for ParseFloatError {\n-    fn description(&self) -> &str {\n+impl ParseFloatError {\n+    #[unstable(feature = \"core\", reason = \"available through Error trait\")]\n+    pub fn description(&self) -> &str {\n         match self.kind {\n             FloatErrorKind::Empty => \"cannot parse float from empty string\",\n             FloatErrorKind::Invalid => \"invalid float literal\",\n         }\n     }\n }\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl fmt::Display for ParseFloatError {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        self.description().fmt(f)\n+    }\n+}"}, {"sha": "4c366d327187e5a2771f55d54c1b348bd99c8001", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a3f6273795363c29f3b70c9fa1229c3ed5c14afd/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f6273795363c29f3b70c9fa1229c3ed5c14afd/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=a3f6273795363c29f3b70c9fa1229c3ed5c14afd", "patch": "@@ -22,7 +22,6 @@ use char::CharExt;\n use clone::Clone;\n use cmp::{self, Eq};\n use default::Default;\n-use error::Error;\n use fmt;\n use iter::ExactSizeIterator;\n use iter::{Map, Iterator, DoubleEndedIterator};\n@@ -192,11 +191,6 @@ impl fmt::Display for ParseBoolError {\n     }\n }\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl Error for ParseBoolError {\n-    fn description(&self) -> &str { \"failed to parse bool\" }\n-}\n-\n /*\n Section: Creating a string\n */\n@@ -241,16 +235,6 @@ pub unsafe fn from_utf8_unchecked<'a>(v: &'a [u8]) -> &'a str {\n     mem::transmute(v)\n }\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl Error for Utf8Error {\n-    fn description(&self) -> &str {\n-        match *self {\n-            Utf8Error::TooShort => \"invalid utf-8: not enough bytes\",\n-            Utf8Error::InvalidByte(..) => \"invalid utf-8: corrupt contents\",\n-        }\n-    }\n-}\n-\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl fmt::Display for Utf8Error {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {"}, {"sha": "150ffcdd77a9f3ef523b5c07a5d7d89060a67136", "filename": "src/libstd/error.rs", "status": "added", "additions": 152, "deletions": 0, "changes": 152, "blob_url": "https://github.com/rust-lang/rust/blob/a3f6273795363c29f3b70c9fa1229c3ed5c14afd/src%2Flibstd%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f6273795363c29f3b70c9fa1229c3ed5c14afd/src%2Flibstd%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ferror.rs?ref=a3f6273795363c29f3b70c9fa1229c3ed5c14afd", "patch": "@@ -0,0 +1,152 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Traits for working with Errors.\n+//!\n+//! # The `Error` trait\n+//!\n+//! `Error` is a trait representing the basic expectations for error values,\n+//! i.e. values of type `E` in `Result<T, E>`. At a minimum, errors must provide\n+//! a description, but they may optionally provide additional detail (via\n+//! `Display`) and cause chain information:\n+//!\n+//! ```\n+//! use std::fmt::Display;\n+//!\n+//! trait Error: Display {\n+//!     fn description(&self) -> &str;\n+//!\n+//!     fn cause(&self) -> Option<&Error> { None }\n+//! }\n+//! ```\n+//!\n+//! The `cause` method is generally used when errors cross \"abstraction\n+//! boundaries\", i.e.  when a one module must report an error that is \"caused\"\n+//! by an error from a lower-level module. This setup makes it possible for the\n+//! high-level module to provide its own errors that do not commit to any\n+//! particular implementation, but also reveal some of its implementation for\n+//! debugging via `cause` chains.\n+\n+#![stable(feature = \"rust1\", since = \"1.0.0\")]\n+\n+// A note about crates and the facade:\n+//\n+// Originally, the `Error` trait was defined in libcore, and the impls\n+// were scattered about. However, coherence objected to this\n+// arrangement, because to create the blanket impls for `Box` required\n+// knowing that `&str: !Error`, and we have no means to deal with that\n+// sort of conflict just now. Therefore, for the time being, we have\n+// moved the `Error` trait into libstd. As we evolve a sol'n to the\n+// coherence challenge (e.g., specialization, neg impls, etc) we can\n+// reconsider what crate these items belong in.\n+\n+use boxed::Box;\n+use convert::From;\n+use fmt::{self, Debug, Display};\n+use marker::Send;\n+use num;\n+use option::Option;\n+use option::Option::None;\n+use str;\n+use string::{self, String};\n+\n+/// Base functionality for all errors in Rust.\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+pub trait Error: Debug + Display {\n+    /// A short description of the error.\n+    ///\n+    /// The description should not contain newlines or sentence-ending\n+    /// punctuation, to facilitate embedding in larger user-facing\n+    /// strings.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    fn description(&self) -> &str;\n+\n+    /// The lower-level cause of this error, if any.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    fn cause(&self) -> Option<&Error> { None }\n+}\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl<'a, E: Error + 'a> From<E> for Box<Error + 'a> {\n+    fn from(err: E) -> Box<Error + 'a> {\n+        Box::new(err)\n+    }\n+}\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl<'a, E: Error + Send + 'a> From<E> for Box<Error + Send + 'a> {\n+    fn from(err: E) -> Box<Error + Send + 'a> {\n+        Box::new(err)\n+    }\n+}\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl<'a, 'b> From<&'b str> for Box<Error + Send + 'a> {\n+    fn from(err: &'b str) -> Box<Error + Send + 'a> {\n+        #[derive(Debug)]\n+        struct StringError(String);\n+\n+        impl Error for StringError {\n+            fn description(&self) -> &str { &self.0 }\n+        }\n+\n+        impl Display for StringError {\n+            fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+                Display::fmt(&self.0, f)\n+            }\n+        }\n+\n+        Box::new(StringError(String::from_str(err)))\n+    }\n+}\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl Error for str::ParseBoolError {\n+    fn description(&self) -> &str { \"failed to parse bool\" }\n+}\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl Error for str::Utf8Error {\n+    fn description(&self) -> &str {\n+        match *self {\n+            str::Utf8Error::TooShort => \"invalid utf-8: not enough bytes\",\n+            str::Utf8Error::InvalidByte(..) => \"invalid utf-8: corrupt contents\",\n+        }\n+    }\n+}\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl Error for num::ParseIntError {\n+    fn description(&self) -> &str {\n+        self.description()\n+    }\n+}\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl Error for num::ParseFloatError {\n+    fn description(&self) -> &str {\n+        self.description()\n+    }\n+}\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl Error for string::FromUtf8Error {\n+    fn description(&self) -> &str {\n+        \"invalid utf-8\"\n+    }\n+}\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl Error for string::FromUtf16Error {\n+    fn description(&self) -> &str {\n+        \"invalid utf-16\"\n+    }\n+}\n+"}, {"sha": "807f0c5753e6b59e600ff06d0c4d2fa3f7fa5e2e", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3f6273795363c29f3b70c9fa1229c3ed5c14afd/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f6273795363c29f3b70c9fa1229c3ed5c14afd/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=a3f6273795363c29f3b70c9fa1229c3ed5c14afd", "patch": "@@ -183,7 +183,7 @@ pub use core::raw;\n pub use core::simd;\n pub use core::result;\n pub use core::option;\n-pub use core::error;\n+pub mod error;\n \n #[cfg(not(test))] pub use alloc::boxed;\n pub use alloc::rc;"}]}