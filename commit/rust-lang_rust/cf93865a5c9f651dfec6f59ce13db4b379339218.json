{"sha": "cf93865a5c9f651dfec6f59ce13db4b379339218", "node_id": "C_kwDOAAsO6NoAKGNmOTM4NjVhNWM5ZjY1MWRmZWM2ZjU5Y2UxM2RiNGIzNzkzMzkyMTg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-26T09:27:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-26T09:27:37Z"}, "message": "Auto merge of #9233 - nyurik:capture-vars, r=Alexendoo\n\nnew uninlined_format_args lint to inline explicit arguments\n\nImplement https://github.com/rust-lang/rust-clippy/issues/8368 - a new lint to inline format arguments such as `print!(\"{}\", var)` into `print!(\"{var}\")`.\n\n### Supported cases\n\ncode | suggestion | comment\n---|---|---\n`print!(\"{}\", var)` | `print!(\"{var}\")` |  simple variables\n`print!(\"{0}\", var)` | `print!(\"{var}\")` |  positional variables\n`print!(\"{v}\", v=var)` | `print!(\"{var}\")` |  named variables\n`print!(\"{0} {0}\", var)` | `print!(\"{var} {var}\")` |  aliased variables\n`print!(\"{0:1$}\", var, width)` | `print!(\"{var:width$}\")` |  width support\n`print!(\"{0:.1$}\", var, prec)` | `print!(\"{var:.prec$}\")` |  precision support\n`print!(\"{:.*}\", prec, var)` | `print!(\"{var:.prec$}\")` |  asterisk support\n\n### Known Problems\n\n* There may be a false positive if the format string is wrapped in a macro call:\n```rust\n# let var = 42;\nmacro_rules! no_param_str { () => { \"{}\" }; }\nmacro_rules! pass_through { ($expr:expr) => { $expr }; }\nprintln!(no_param_str!(), var);\nprintln!(pass_through!(\"{}\"), var);\n```\n\n* Format string uses an indexed argument that cannot be inlined.\nSupporting this case requires re-indexing of the format string.\nUntil implemented, `print!(\"{0}={1}\", var, 1+2)` should be changed to `print!(\"{var}={0}\", 1+2)` by hand.\n\nchangelog: [`uninlined_format_args`]: A new lint to inline format arguments, i.e. `print!(\"{}\", var)` into `print!(\"{var}\")`", "tree": {"sha": "bc40adb0352c4ac299203752af44392682a27f8a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc40adb0352c4ac299203752af44392682a27f8a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf93865a5c9f651dfec6f59ce13db4b379339218", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf93865a5c9f651dfec6f59ce13db4b379339218", "html_url": "https://github.com/rust-lang/rust/commit/cf93865a5c9f651dfec6f59ce13db4b379339218", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf93865a5c9f651dfec6f59ce13db4b379339218/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57c9daa09b36dbecec9266da4d9b789e7b1df225", "url": "https://api.github.com/repos/rust-lang/rust/commits/57c9daa09b36dbecec9266da4d9b789e7b1df225", "html_url": "https://github.com/rust-lang/rust/commit/57c9daa09b36dbecec9266da4d9b789e7b1df225"}, {"sha": "5a71bbdf3faeedfe5227aecc2a97e566cbbbaf70", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a71bbdf3faeedfe5227aecc2a97e566cbbbaf70", "html_url": "https://github.com/rust-lang/rust/commit/5a71bbdf3faeedfe5227aecc2a97e566cbbbaf70"}], "stats": {"total": 1480, "additions": 1451, "deletions": 29}, "files": [{"sha": "325b9bd846946daf858ba5d26c6a43d8e724f058", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cf93865a5c9f651dfec6f59ce13db4b379339218/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/cf93865a5c9f651dfec6f59ce13db4b379339218/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=cf93865a5c9f651dfec6f59ce13db4b379339218", "patch": "@@ -4274,6 +4274,7 @@ Released 2018-09-13\n [`unimplemented`]: https://rust-lang.github.io/rust-clippy/master/index.html#unimplemented\n [`uninit_assumed_init`]: https://rust-lang.github.io/rust-clippy/master/index.html#uninit_assumed_init\n [`uninit_vec`]: https://rust-lang.github.io/rust-clippy/master/index.html#uninit_vec\n+[`uninlined_format_args`]: https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\n [`unit_arg`]: https://rust-lang.github.io/rust-clippy/master/index.html#unit_arg\n [`unit_cmp`]: https://rust-lang.github.io/rust-clippy/master/index.html#unit_cmp\n [`unit_hash`]: https://rust-lang.github.io/rust-clippy/master/index.html#unit_hash"}, {"sha": "89d81bdd4850ee72c511c832781d119bd0b0f97f", "filename": "clippy_lints/src/format_args.rs", "status": "modified", "additions": 133, "deletions": 7, "changes": 140, "blob_url": "https://github.com/rust-lang/rust/blob/cf93865a5c9f651dfec6f59ce13db4b379339218/clippy_lints%2Fsrc%2Fformat_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf93865a5c9f651dfec6f59ce13db4b379339218/clippy_lints%2Fsrc%2Fformat_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformat_args.rs?ref=cf93865a5c9f651dfec6f59ce13db4b379339218", "patch": "@@ -1,16 +1,18 @@\n use clippy_utils::diagnostics::{span_lint_and_sugg, span_lint_and_then};\n-use clippy_utils::is_diag_trait_item;\n-use clippy_utils::macros::{is_format_macro, FormatArgsExpn};\n-use clippy_utils::source::snippet_opt;\n+use clippy_utils::macros::FormatParamKind::{Implicit, Named, Numbered, Starred};\n+use clippy_utils::macros::{is_format_macro, FormatArgsExpn, FormatParam, FormatParamUsage};\n+use clippy_utils::source::{expand_past_previous_comma, snippet_opt};\n use clippy_utils::ty::implements_trait;\n+use clippy_utils::{is_diag_trait_item, meets_msrv, msrvs};\n use if_chain::if_chain;\n use itertools::Itertools;\n use rustc_errors::Applicability;\n-use rustc_hir::{Expr, ExprKind, HirId};\n+use rustc_hir::{Expr, ExprKind, HirId, Path, QPath};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::adjustment::{Adjust, Adjustment};\n use rustc_middle::ty::Ty;\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_semver::RustcVersion;\n+use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::{sym, ExpnData, ExpnKind, Span, Symbol};\n \n declare_clippy_lint! {\n@@ -64,7 +66,67 @@ declare_clippy_lint! {\n     \"`to_string` applied to a type that implements `Display` in format args\"\n }\n \n-declare_lint_pass!(FormatArgs => [FORMAT_IN_FORMAT_ARGS, TO_STRING_IN_FORMAT_ARGS]);\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Detect when a variable is not inlined in a format string,\n+    /// and suggests to inline it.\n+    ///\n+    /// ### Why is this bad?\n+    /// Non-inlined code is slightly more difficult to read and understand,\n+    /// as it requires arguments to be matched against the format string.\n+    /// The inlined syntax, where allowed, is simpler.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// # let var = 42;\n+    /// # let width = 1;\n+    /// # let prec = 2;\n+    /// format!(\"{}\", var);\n+    /// format!(\"{v:?}\", v = var);\n+    /// format!(\"{0} {0}\", var);\n+    /// format!(\"{0:1$}\", var, width);\n+    /// format!(\"{:.*}\", prec, var);\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// # let var = 42;\n+    /// # let width = 1;\n+    /// # let prec = 2;\n+    /// format!(\"{var}\");\n+    /// format!(\"{var:?}\");\n+    /// format!(\"{var} {var}\");\n+    /// format!(\"{var:width$}\");\n+    /// format!(\"{var:.prec$}\");\n+    /// ```\n+    ///\n+    /// ### Known Problems\n+    ///\n+    /// There may be a false positive if the format string is expanded from certain proc macros:\n+    ///\n+    /// ```ignore\n+    /// println!(indoc!(\"{}\"), var);\n+    /// ```\n+    ///\n+    /// If a format string contains a numbered argument that cannot be inlined\n+    /// nothing will be suggested, e.g. `println!(\"{0}={1}\", var, 1+2)`.\n+    #[clippy::version = \"1.65.0\"]\n+    pub UNINLINED_FORMAT_ARGS,\n+    pedantic,\n+    \"using non-inlined variables in `format!` calls\"\n+}\n+\n+impl_lint_pass!(FormatArgs => [FORMAT_IN_FORMAT_ARGS, UNINLINED_FORMAT_ARGS, TO_STRING_IN_FORMAT_ARGS]);\n+\n+pub struct FormatArgs {\n+    msrv: Option<RustcVersion>,\n+}\n+\n+impl FormatArgs {\n+    #[must_use]\n+    pub fn new(msrv: Option<RustcVersion>) -> Self {\n+        Self { msrv }\n+    }\n+}\n \n impl<'tcx> LateLintPass<'tcx> for FormatArgs {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) {\n@@ -86,9 +148,73 @@ impl<'tcx> LateLintPass<'tcx> for FormatArgs {\n                     check_format_in_format_args(cx, outermost_expn_data.call_site, name, arg.param.value);\n                     check_to_string_in_format_args(cx, name, arg.param.value);\n                 }\n+                if meets_msrv(self.msrv, msrvs::FORMAT_ARGS_CAPTURE) {\n+                    check_uninlined_args(cx, &format_args, outermost_expn_data.call_site);\n+                }\n             }\n         }\n     }\n+\n+    extract_msrv_attr!(LateContext);\n+}\n+\n+fn check_uninlined_args(cx: &LateContext<'_>, args: &FormatArgsExpn<'_>, call_site: Span) {\n+    if args.format_string.span.from_expansion() {\n+        return;\n+    }\n+\n+    let mut fixes = Vec::new();\n+    // If any of the arguments are referenced by an index number,\n+    // and that argument is not a simple variable and cannot be inlined,\n+    // we cannot remove any other arguments in the format string,\n+    // because the index numbers might be wrong after inlining.\n+    // Example of an un-inlinable format:  print!(\"{}{1}\", foo, 2)\n+    if !args.params().all(|p| check_one_arg(cx, &p, &mut fixes)) || fixes.is_empty() {\n+        return;\n+    }\n+\n+    // FIXME: Properly ignore a rare case where the format string is wrapped in a macro.\n+    // Example:  `format!(indoc!(\"{}\"), foo);`\n+    // If inlined, they will cause a compilation error:\n+    //     > to avoid ambiguity, `format_args!` cannot capture variables\n+    //     > when the format string is expanded from a macro\n+    // @Alexendoo explanation:\n+    //     > indoc! is a proc macro that is producing a string literal with its span\n+    //     > set to its input it's not marked as from expansion, and since it's compatible\n+    //     > tokenization wise clippy_utils::is_from_proc_macro wouldn't catch it either\n+    // This might be a relatively expensive test, so do it only we are ready to replace.\n+    // See more examples in tests/ui/uninlined_format_args.rs\n+\n+    span_lint_and_then(\n+        cx,\n+        UNINLINED_FORMAT_ARGS,\n+        call_site,\n+        \"variables can be used directly in the `format!` string\",\n+        |diag| {\n+            diag.multipart_suggestion(\"change this to\", fixes, Applicability::MachineApplicable);\n+        },\n+    );\n+}\n+\n+fn check_one_arg(cx: &LateContext<'_>, param: &FormatParam<'_>, fixes: &mut Vec<(Span, String)>) -> bool {\n+    if matches!(param.kind, Implicit | Starred | Named(_) | Numbered)\n+        && let ExprKind::Path(QPath::Resolved(None, path)) = param.value.kind\n+        && let Path { span, segments, .. } = path\n+        && let [segment] = segments\n+    {\n+        let replacement = match param.usage {\n+            FormatParamUsage::Argument => segment.ident.name.to_string(),\n+            FormatParamUsage::Width => format!(\"{}$\", segment.ident.name),\n+            FormatParamUsage::Precision => format!(\".{}$\", segment.ident.name),\n+        };\n+        fixes.push((param.span, replacement));\n+        let arg_span = expand_past_previous_comma(cx, *span);\n+        fixes.push((arg_span, String::new()));\n+        true  // successful inlining, continue checking\n+    } else {\n+        // if we can't inline a numbered argument, we can't continue\n+        param.kind != Numbered\n+    }\n }\n \n fn outermost_expn_data(expn_data: ExpnData) -> ExpnData {\n@@ -170,7 +296,7 @@ fn check_to_string_in_format_args(cx: &LateContext<'_>, name: Symbol, value: &Ex\n     }\n }\n \n-// Returns true if `hir_id` is referred to by multiple format params\n+/// Returns true if `hir_id` is referred to by multiple format params\n fn is_aliased(args: &FormatArgsExpn<'_>, hir_id: HirId) -> bool {\n     args.params()\n         .filter(|param| param.value.hir_id == hir_id)"}, {"sha": "c6ac0178ffacef14edcd7ef5a998929637c0556b", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cf93865a5c9f651dfec6f59ce13db4b379339218/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf93865a5c9f651dfec6f59ce13db4b379339218/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=cf93865a5c9f651dfec6f59ce13db4b379339218", "patch": "@@ -159,6 +159,7 @@ store.register_lints(&[\n     format::USELESS_FORMAT,\n     format_args::FORMAT_IN_FORMAT_ARGS,\n     format_args::TO_STRING_IN_FORMAT_ARGS,\n+    format_args::UNINLINED_FORMAT_ARGS,\n     format_impl::PRINT_IN_FORMAT_IMPL,\n     format_impl::RECURSIVE_FORMAT_IMPL,\n     format_push_string::FORMAT_PUSH_STRING,"}, {"sha": "4eaabfbcc5fabaddfc7dc24e100fd1fa81bdf249", "filename": "clippy_lints/src/lib.register_pedantic.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cf93865a5c9f651dfec6f59ce13db4b379339218/clippy_lints%2Fsrc%2Flib.register_pedantic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf93865a5c9f651dfec6f59ce13db4b379339218/clippy_lints%2Fsrc%2Flib.register_pedantic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_pedantic.rs?ref=cf93865a5c9f651dfec6f59ce13db4b379339218", "patch": "@@ -29,6 +29,7 @@ store.register_group(true, \"clippy::pedantic\", Some(\"clippy_pedantic\"), vec![\n     LintId::of(eta_reduction::REDUNDANT_CLOSURE_FOR_METHOD_CALLS),\n     LintId::of(excessive_bools::FN_PARAMS_EXCESSIVE_BOOLS),\n     LintId::of(excessive_bools::STRUCT_EXCESSIVE_BOOLS),\n+    LintId::of(format_args::UNINLINED_FORMAT_ARGS),\n     LintId::of(functions::MUST_USE_CANDIDATE),\n     LintId::of(functions::TOO_MANY_LINES),\n     LintId::of(if_not_else::IF_NOT_ELSE),"}, {"sha": "73349ace88264e07c76f055a165f90cc556a292f", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf93865a5c9f651dfec6f59ce13db4b379339218/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf93865a5c9f651dfec6f59ce13db4b379339218/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=cf93865a5c9f651dfec6f59ce13db4b379339218", "patch": "@@ -855,7 +855,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         ))\n     });\n     store.register_late_pass(move || Box::new(undocumented_unsafe_blocks::UndocumentedUnsafeBlocks));\n-    store.register_late_pass(move || Box::new(format_args::FormatArgs));\n+    store.register_late_pass(move || Box::new(format_args::FormatArgs::new(msrv)));\n     store.register_late_pass(|| Box::new(trailing_empty_array::TrailingEmptyArray));\n     store.register_early_pass(|| Box::new(octal_escapes::OctalEscapes));\n     store.register_late_pass(|| Box::new(needless_late_init::NeedlessLateInit));"}, {"sha": "a8265b50f273f35fa69b3aed06c672e19be6de4d", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf93865a5c9f651dfec6f59ce13db4b379339218/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf93865a5c9f651dfec6f59ce13db4b379339218/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=cf93865a5c9f651dfec6f59ce13db4b379339218", "patch": "@@ -213,7 +213,7 @@ define_Conf! {\n     ///\n     /// Suppress lints whenever the suggested change would cause breakage for other crates.\n     (avoid_breaking_exported_api: bool = true),\n-    /// Lint: MANUAL_SPLIT_ONCE, MANUAL_STR_REPEAT, CLONED_INSTEAD_OF_COPIED, REDUNDANT_FIELD_NAMES, REDUNDANT_STATIC_LIFETIMES, FILTER_MAP_NEXT, CHECKED_CONVERSIONS, MANUAL_RANGE_CONTAINS, USE_SELF, MEM_REPLACE_WITH_DEFAULT, MANUAL_NON_EXHAUSTIVE, OPTION_AS_REF_DEREF, MAP_UNWRAP_OR, MATCH_LIKE_MATCHES_MACRO, MANUAL_STRIP, MISSING_CONST_FOR_FN, UNNESTED_OR_PATTERNS, FROM_OVER_INTO, PTR_AS_PTR, IF_THEN_SOME_ELSE_NONE, APPROX_CONSTANT, DEPRECATED_CFG_ATTR, INDEX_REFUTABLE_SLICE, MAP_CLONE, BORROW_AS_PTR, MANUAL_BITS, ERR_EXPECT, CAST_ABS_TO_UNSIGNED.\n+    /// Lint: MANUAL_SPLIT_ONCE, MANUAL_STR_REPEAT, CLONED_INSTEAD_OF_COPIED, REDUNDANT_FIELD_NAMES, REDUNDANT_STATIC_LIFETIMES, FILTER_MAP_NEXT, CHECKED_CONVERSIONS, MANUAL_RANGE_CONTAINS, USE_SELF, MEM_REPLACE_WITH_DEFAULT, MANUAL_NON_EXHAUSTIVE, OPTION_AS_REF_DEREF, MAP_UNWRAP_OR, MATCH_LIKE_MATCHES_MACRO, MANUAL_STRIP, MISSING_CONST_FOR_FN, UNNESTED_OR_PATTERNS, FROM_OVER_INTO, PTR_AS_PTR, IF_THEN_SOME_ELSE_NONE, APPROX_CONSTANT, DEPRECATED_CFG_ATTR, INDEX_REFUTABLE_SLICE, MAP_CLONE, BORROW_AS_PTR, MANUAL_BITS, ERR_EXPECT, CAST_ABS_TO_UNSIGNED, UNINLINED_FORMAT_ARGS.\n     ///\n     /// The minimum rust version that the project supports\n     (msrv: Option<String> = None),"}, {"sha": "3d3686604b72a1711039551318fb2de705091369", "filename": "clippy_lints/src/write.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cf93865a5c9f651dfec6f59ce13db4b379339218/clippy_lints%2Fsrc%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf93865a5c9f651dfec6f59ce13db4b379339218/clippy_lints%2Fsrc%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwrite.rs?ref=cf93865a5c9f651dfec6f59ce13db4b379339218", "patch": "@@ -1,12 +1,12 @@\n use clippy_utils::diagnostics::{span_lint, span_lint_and_then};\n use clippy_utils::macros::{root_macro_call_first_node, FormatArgsExpn, MacroCall};\n-use clippy_utils::source::snippet_opt;\n+use clippy_utils::source::{expand_past_previous_comma, snippet_opt};\n use rustc_ast::LitKind;\n use rustc_errors::Applicability;\n use rustc_hir::{Expr, ExprKind, HirIdMap, Impl, Item, ItemKind};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n-use rustc_span::{sym, BytePos, Span};\n+use rustc_span::{sym, BytePos};\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -542,10 +542,3 @@ fn conservative_unescape(literal: &str) -> Result<String, UnescapeErr> {\n \n     if err { Err(UnescapeErr::Lint) } else { Ok(unescaped) }\n }\n-\n-// Expand from `writeln!(o, \"\")` to `writeln!(o, \"\")`\n-//                          ^^                 ^^^^\n-fn expand_past_previous_comma(cx: &LateContext<'_>, span: Span) -> Span {\n-    let extended = cx.sess().source_map().span_extend_to_prev_char(span, ',', true);\n-    extended.with_lo(extended.lo() - BytePos(1))\n-}"}, {"sha": "079c8f50f12a2076039f6a119d52731e6abb6cbd", "filename": "clippy_utils/src/macros.rs", "status": "modified", "additions": 58, "deletions": 11, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/cf93865a5c9f651dfec6f59ce13db4b379339218/clippy_utils%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf93865a5c9f651dfec6f59ce13db4b379339218/clippy_utils%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fmacros.rs?ref=cf93865a5c9f651dfec6f59ce13db4b379339218", "patch": "@@ -545,19 +545,32 @@ fn span_from_inner(base: SpanData, inner: rpf::InnerSpan) -> Span {\n     )\n }\n \n+/// How a format parameter is used in the format string\n #[derive(Debug, Copy, Clone, PartialEq, Eq)]\n pub enum FormatParamKind {\n     /// An implicit parameter , such as `{}` or `{:?}`.\n     Implicit,\n-    /// A parameter with an explicit number, or an asterisk precision. e.g. `{1}`, `{0:?}`,\n-    /// `{:.0$}` or `{:.*}`.\n+    /// A parameter with an explicit number, e.g. `{1}`, `{0:?}`, or `{:.0$}`\n     Numbered,\n+    /// A parameter with an asterisk precision. e.g. `{:.*}`.\n+    Starred,\n     /// A named parameter with a named `value_arg`, such as the `x` in `format!(\"{x}\", x = 1)`.\n     Named(Symbol),\n     /// An implicit named parameter, such as the `y` in `format!(\"{y}\")`.\n     NamedInline(Symbol),\n }\n \n+/// Where a format parameter is being used in the format string\n+#[derive(Debug, Copy, Clone, PartialEq, Eq)]\n+pub enum FormatParamUsage {\n+    /// Appears as an argument, e.g. `format!(\"{}\", foo)`\n+    Argument,\n+    /// Appears as a width, e.g. `format!(\"{:width$}\", foo, width = 1)`\n+    Width,\n+    /// Appears as a precision, e.g. `format!(\"{:.precision$}\", foo, precision = 1)`\n+    Precision,\n+}\n+\n /// A `FormatParam` is any place in a `FormatArgument` that refers to a supplied value, e.g.\n ///\n /// ```\n@@ -573,6 +586,8 @@ pub struct FormatParam<'tcx> {\n     pub value: &'tcx Expr<'tcx>,\n     /// How this parameter refers to its `value`.\n     pub kind: FormatParamKind,\n+    /// Where this format param is being used - argument/width/precision\n+    pub usage: FormatParamUsage,\n     /// Span of the parameter, may be zero width. Includes the whitespace of implicit parameters.\n     ///\n     /// ```text\n@@ -585,6 +600,7 @@ pub struct FormatParam<'tcx> {\n impl<'tcx> FormatParam<'tcx> {\n     fn new(\n         mut kind: FormatParamKind,\n+        usage: FormatParamUsage,\n         position: usize,\n         inner: rpf::InnerSpan,\n         values: &FormatArgsValues<'tcx>,\n@@ -599,7 +615,12 @@ impl<'tcx> FormatParam<'tcx> {\n             kind = FormatParamKind::NamedInline(name);\n         }\n \n-        Some(Self { value, kind, span })\n+        Some(Self {\n+            value,\n+            kind,\n+            usage,\n+            span,\n+        })\n     }\n }\n \n@@ -618,22 +639,35 @@ pub enum Count<'tcx> {\n \n impl<'tcx> Count<'tcx> {\n     fn new(\n+        usage: FormatParamUsage,\n         count: rpf::Count<'_>,\n         position: Option<usize>,\n         inner: Option<rpf::InnerSpan>,\n         values: &FormatArgsValues<'tcx>,\n     ) -> Option<Self> {\n         Some(match count {\n             rpf::Count::CountIs(val) => Self::Is(val, span_from_inner(values.format_string_span, inner?)),\n-            rpf::Count::CountIsName(name, span) => Self::Param(FormatParam::new(\n+            rpf::Count::CountIsName(name, _) => Self::Param(FormatParam::new(\n                 FormatParamKind::Named(Symbol::intern(name)),\n+                usage,\n                 position?,\n-                span,\n+                inner?,\n+                values,\n+            )?),\n+            rpf::Count::CountIsParam(_) => Self::Param(FormatParam::new(\n+                FormatParamKind::Numbered,\n+                usage,\n+                position?,\n+                inner?,\n+                values,\n+            )?),\n+            rpf::Count::CountIsStar(_) => Self::Param(FormatParam::new(\n+                FormatParamKind::Starred,\n+                usage,\n+                position?,\n+                inner?,\n                 values,\n             )?),\n-            rpf::Count::CountIsParam(_) | rpf::Count::CountIsStar(_) => {\n-                Self::Param(FormatParam::new(FormatParamKind::Numbered, position?, inner?, values)?)\n-            },\n             rpf::Count::CountImplied => Self::Implied,\n         })\n     }\n@@ -676,8 +710,20 @@ impl<'tcx> FormatSpec<'tcx> {\n             fill: spec.fill,\n             align: spec.align,\n             flags: spec.flags,\n-            precision: Count::new(spec.precision, positions.precision, spec.precision_span, values)?,\n-            width: Count::new(spec.width, positions.width, spec.width_span, values)?,\n+            precision: Count::new(\n+                FormatParamUsage::Precision,\n+                spec.precision,\n+                positions.precision,\n+                spec.precision_span,\n+                values,\n+            )?,\n+            width: Count::new(\n+                FormatParamUsage::Width,\n+                spec.width,\n+                positions.width,\n+                spec.width_span,\n+                values,\n+            )?,\n             r#trait: match spec.ty {\n                 \"\" => sym::Display,\n                 \"?\" => sym::Debug,\n@@ -723,7 +769,7 @@ pub struct FormatArg<'tcx> {\n pub struct FormatArgsExpn<'tcx> {\n     /// The format string literal.\n     pub format_string: FormatString,\n-    // The format arguments, such as `{:?}`.\n+    /// The format arguments, such as `{:?}`.\n     pub args: Vec<FormatArg<'tcx>>,\n     /// Has an added newline due to `println!()`/`writeln!()`/etc. The last format string part will\n     /// include this added newline.\n@@ -797,6 +843,7 @@ impl<'tcx> FormatArgsExpn<'tcx> {\n                                 // NamedInline is handled by `FormatParam::new()`\n                                 rpf::Position::ArgumentNamed(name) => FormatParamKind::Named(Symbol::intern(name)),\n                             },\n+                            FormatParamUsage::Argument,\n                             position.value,\n                             parsed_arg.position_span,\n                             &values,"}, {"sha": "904091c57e83755fa61df4c99709ec3be32af012", "filename": "clippy_utils/src/msrvs.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cf93865a5c9f651dfec6f59ce13db4b379339218/clippy_utils%2Fsrc%2Fmsrvs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf93865a5c9f651dfec6f59ce13db4b379339218/clippy_utils%2Fsrc%2Fmsrvs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fmsrvs.rs?ref=cf93865a5c9f651dfec6f59ce13db4b379339218", "patch": "@@ -13,6 +13,7 @@ macro_rules! msrv_aliases {\n // names may refer to stabilized feature flags or library items\n msrv_aliases! {\n     1,62,0 { BOOL_THEN_SOME }\n+    1,58,0 { FORMAT_ARGS_CAPTURE }\n     1,53,0 { OR_PATTERNS, MANUAL_BITS, BTREE_MAP_RETAIN, BTREE_SET_RETAIN, ARRAY_INTO_ITERATOR }\n     1,52,0 { STR_SPLIT_ONCE, REM_EUCLID_CONST }\n     1,51,0 { BORROW_AS_PTR, UNSIGNED_ABS }"}, {"sha": "d28bd92d708baae0ef57d351e8b3c7295503ec8c", "filename": "clippy_utils/src/source.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cf93865a5c9f651dfec6f59ce13db4b379339218/clippy_utils%2Fsrc%2Fsource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf93865a5c9f651dfec6f59ce13db4b379339218/clippy_utils%2Fsrc%2Fsource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fsource.rs?ref=cf93865a5c9f651dfec6f59ce13db4b379339218", "patch": "@@ -392,6 +392,16 @@ pub fn trim_span(sm: &SourceMap, span: Span) -> Span {\n     .span()\n }\n \n+/// Expand a span to include a preceding comma\n+/// ```rust,ignore\n+/// writeln!(o, \"\")   ->   writeln!(o, \"\")\n+///             ^^                   ^^^^\n+/// ```\n+pub fn expand_past_previous_comma(cx: &LateContext<'_>, span: Span) -> Span {\n+    let extended = cx.sess().source_map().span_extend_to_prev_char(span, ',', true);\n+    extended.with_lo(extended.lo() - BytePos(1))\n+}\n+\n #[cfg(test)]\n mod test {\n     use super::{reindent_multiline, without_block_comments};"}, {"sha": "a501b56ffbeb0adf3e10067a5333b2d6f66c1e3e", "filename": "src/docs.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cf93865a5c9f651dfec6f59ce13db4b379339218/src%2Fdocs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf93865a5c9f651dfec6f59ce13db4b379339218/src%2Fdocs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdocs.rs?ref=cf93865a5c9f651dfec6f59ce13db4b379339218", "patch": "@@ -521,6 +521,7 @@ docs! {\n     \"unimplemented\",\n     \"uninit_assumed_init\",\n     \"uninit_vec\",\n+    \"uninlined_format_args\",\n     \"unit_arg\",\n     \"unit_cmp\",\n     \"unit_hash\","}, {"sha": "3d2966c84dbe3456859f0ca70d02231a65dd80e1", "filename": "src/docs/uninlined_format_args.txt", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/cf93865a5c9f651dfec6f59ce13db4b379339218/src%2Fdocs%2Funinlined_format_args.txt", "raw_url": "https://github.com/rust-lang/rust/raw/cf93865a5c9f651dfec6f59ce13db4b379339218/src%2Fdocs%2Funinlined_format_args.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdocs%2Funinlined_format_args.txt?ref=cf93865a5c9f651dfec6f59ce13db4b379339218", "patch": "@@ -0,0 +1,36 @@\n+### What it does\n+Detect when a variable is not inlined in a format string,\n+and suggests to inline it.\n+\n+### Why is this bad?\n+Non-inlined code is slightly more difficult to read and understand,\n+as it requires arguments to be matched against the format string.\n+The inlined syntax, where allowed, is simpler.\n+\n+### Example\n+```\n+format!(\"{}\", var);\n+format!(\"{v:?}\", v = var);\n+format!(\"{0} {0}\", var);\n+format!(\"{0:1$}\", var, width);\n+format!(\"{:.*}\", prec, var);\n+```\n+Use instead:\n+```\n+format!(\"{var}\");\n+format!(\"{var:?}\");\n+format!(\"{var} {var}\");\n+format!(\"{var:width$}\");\n+format!(\"{var:.prec$}\");\n+```\n+\n+### Known Problems\n+\n+There may be a false positive if the format string is expanded from certain proc macros:\n+\n+```\n+println!(indoc!(\"{}\"), var);\n+```\n+\n+If a format string contains a numbered argument that cannot be inlined\n+nothing will be suggested, e.g. `println!(\"{0}={1}\", var, 1+2)`.\n\\ No newline at end of file"}, {"sha": "bade0ed8ad64102f4ec58179d11a02fa656fc5a2", "filename": "tests/ui/uninlined_format_args.fixed", "status": "added", "additions": 168, "deletions": 0, "changes": 168, "blob_url": "https://github.com/rust-lang/rust/blob/cf93865a5c9f651dfec6f59ce13db4b379339218/tests%2Fui%2Funinlined_format_args.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/cf93865a5c9f651dfec6f59ce13db4b379339218/tests%2Fui%2Funinlined_format_args.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funinlined_format_args.fixed?ref=cf93865a5c9f651dfec6f59ce13db4b379339218", "patch": "@@ -0,0 +1,168 @@\n+// run-rustfix\n+\n+#![allow(clippy::eq_op)]\n+#![allow(clippy::format_in_format_args)]\n+#![allow(clippy::print_literal)]\n+#![allow(named_arguments_used_positionally)]\n+#![allow(unused_variables, unused_imports, unused_macros)]\n+#![warn(clippy::uninlined_format_args)]\n+#![feature(custom_inner_attributes)]\n+\n+macro_rules! no_param_str {\n+    () => {\n+        \"{}\"\n+    };\n+}\n+\n+macro_rules! pass_through {\n+    ($expr:expr) => {\n+        $expr\n+    };\n+}\n+\n+macro_rules! my_println {\n+   ($($args:tt),*) => {{\n+        println!($($args),*)\n+    }};\n+}\n+\n+macro_rules! my_println_args {\n+    ($($args:tt),*) => {{\n+        println!(\"foo: {}\", format_args!($($args),*))\n+    }};\n+}\n+\n+fn tester(fn_arg: i32) {\n+    let local_i32 = 1;\n+    let local_f64 = 2.0;\n+    let local_opt: Option<i32> = Some(3);\n+    let width = 4;\n+    let prec = 5;\n+    let val = 6;\n+\n+    // make sure this file hasn't been corrupted with tabs converted to spaces\n+    // let _ = '\t';  // <- this is a single tab character\n+    let _: &[u8; 3] = b\"\t \t\"; // <- <tab><space><tab>\n+\n+    println!(\"val='{local_i32}'\");\n+    println!(\"val='{local_i32}'\"); // 3 spaces\n+    println!(\"val='{local_i32}'\"); // tab\n+    println!(\"val='{local_i32}'\"); // space+tab\n+    println!(\"val='{local_i32}'\"); // tab+space\n+    println!(\n+        \"val='{local_i32}'\"\n+    );\n+    println!(\"{local_i32}\");\n+    println!(\"{fn_arg}\");\n+    println!(\"{local_i32:?}\");\n+    println!(\"{local_i32:#?}\");\n+    println!(\"{local_i32:4}\");\n+    println!(\"{local_i32:04}\");\n+    println!(\"{local_i32:<3}\");\n+    println!(\"{local_i32:#010x}\");\n+    println!(\"{local_f64:.1}\");\n+    println!(\"Hello {} is {local_f64:.local_i32$}\", \"x\");\n+    println!(\"Hello {local_i32} is {local_f64:.*}\", 5);\n+    println!(\"Hello {local_i32} is {local_f64:.*}\", 5);\n+    println!(\"{local_i32} {local_f64}\");\n+    println!(\"{local_i32}, {}\", local_opt.unwrap());\n+    println!(\"{val}\");\n+    println!(\"{val}\");\n+    println!(\"{} {1}\", local_i32, 42);\n+    println!(\"val='{local_i32}'\");\n+    println!(\"val='{local_i32}'\");\n+    println!(\"val='{local_i32}'\");\n+    println!(\"val='{fn_arg}'\");\n+    println!(\"{local_i32}\");\n+    println!(\"{local_i32:?}\");\n+    println!(\"{local_i32:#?}\");\n+    println!(\"{local_i32:04}\");\n+    println!(\"{local_i32:<3}\");\n+    println!(\"{local_i32:#010x}\");\n+    println!(\"{local_f64:.1}\");\n+    println!(\"{local_i32} {local_i32}\");\n+    println!(\"{local_f64} {local_i32} {local_i32} {local_f64}\");\n+    println!(\"{local_i32} {local_f64}\");\n+    println!(\"{local_f64} {local_i32}\");\n+    println!(\"{local_f64} {local_i32} {local_f64} {local_i32}\");\n+    println!(\"{1} {0}\", \"str\", local_i32);\n+    println!(\"{local_i32}\");\n+    println!(\"{local_i32:width$}\");\n+    println!(\"{local_i32:width$}\");\n+    println!(\"{local_i32:.prec$}\");\n+    println!(\"{local_i32:.prec$}\");\n+    println!(\"{val:val$}\");\n+    println!(\"{val:val$}\");\n+    println!(\"{val:val$.val$}\");\n+    println!(\"{val:val$.val$}\");\n+    println!(\"{val:val$.val$}\");\n+    println!(\"{val:val$.val$}\");\n+    println!(\"{val:val$.val$}\");\n+    println!(\"{val:val$.val$}\");\n+    println!(\"{val:val$.val$}\");\n+    println!(\"{val:val$.val$}\");\n+    println!(\"{width:width$}\");\n+    println!(\"{local_i32:width$}\");\n+    println!(\"{width:width$}\");\n+    println!(\"{local_i32:width$}\");\n+    println!(\"{prec:.prec$}\");\n+    println!(\"{local_i32:.prec$}\");\n+    println!(\"{prec:.prec$}\");\n+    println!(\"{local_i32:.prec$}\");\n+    println!(\"{width:width$.prec$}\");\n+    println!(\"{width:width$.prec$}\");\n+    println!(\"{local_f64:width$.prec$}\");\n+    println!(\"{local_f64:width$.prec$} {local_f64} {width} {prec}\");\n+    println!(\n+        \"{local_i32:width$.prec$} {local_i32:prec$.width$} {width:local_i32$.prec$} {width:prec$.local_i32$} {prec:local_i32$.width$} {prec:width$.local_i32$}\",\n+    );\n+    println!(\n+        \"{0:1$.2$} {0:2$.1$} {1:0$.2$} {1:2$.0$} {2:0$.1$} {2:1$.0$} {3}\",\n+        local_i32,\n+        width,\n+        prec,\n+        1 + 2\n+    );\n+    println!(\"Width = {local_i32}, value with width = {local_f64:local_i32$}\");\n+    println!(\"{local_i32:width$.prec$}\");\n+    println!(\"{width:width$.prec$}\");\n+    println!(\"{}\", format!(\"{local_i32}\"));\n+    my_println!(\"{}\", local_i32);\n+    my_println_args!(\"{}\", local_i32);\n+\n+    // these should NOT be modified by the lint\n+    println!(concat!(\"nope \", \"{}\"), local_i32);\n+    println!(\"val='{local_i32}'\");\n+    println!(\"val='{local_i32 }'\");\n+    println!(\"val='{local_i32\t}'\"); // with tab\n+    println!(\"val='{local_i32\\n}'\");\n+    println!(\"{}\", usize::MAX);\n+    println!(\"{}\", local_opt.unwrap());\n+    println!(\n+        \"val='{local_i32\n+    }'\"\n+    );\n+    println!(no_param_str!(), local_i32);\n+\n+    // FIXME: bugs!\n+    // println!(pass_through!(\"foo={local_i32}\"), local_i32 = local_i32);\n+    // println!(pass_through!(\"foo={}\"), local_i32);\n+    // println!(indoc!(\"foo={}\"), local_i32);\n+    // printdoc!(\"foo={}\", local_i32);\n+}\n+\n+fn main() {\n+    tester(42);\n+}\n+\n+fn _under_msrv() {\n+    #![clippy::msrv = \"1.57\"]\n+    let local_i32 = 1;\n+    println!(\"don't expand='{}'\", local_i32);\n+}\n+\n+fn _meets_msrv() {\n+    #![clippy::msrv = \"1.58\"]\n+    let local_i32 = 1;\n+    println!(\"expand='{local_i32}'\");\n+}"}, {"sha": "ac958f9e5b607eb3bdb0b3ff94a9347507375349", "filename": "tests/ui/uninlined_format_args.rs", "status": "added", "additions": 171, "deletions": 0, "changes": 171, "blob_url": "https://github.com/rust-lang/rust/blob/cf93865a5c9f651dfec6f59ce13db4b379339218/tests%2Fui%2Funinlined_format_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf93865a5c9f651dfec6f59ce13db4b379339218/tests%2Fui%2Funinlined_format_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funinlined_format_args.rs?ref=cf93865a5c9f651dfec6f59ce13db4b379339218", "patch": "@@ -0,0 +1,171 @@\n+// run-rustfix\n+\n+#![allow(clippy::eq_op)]\n+#![allow(clippy::format_in_format_args)]\n+#![allow(clippy::print_literal)]\n+#![allow(named_arguments_used_positionally)]\n+#![allow(unused_variables, unused_imports, unused_macros)]\n+#![warn(clippy::uninlined_format_args)]\n+#![feature(custom_inner_attributes)]\n+\n+macro_rules! no_param_str {\n+    () => {\n+        \"{}\"\n+    };\n+}\n+\n+macro_rules! pass_through {\n+    ($expr:expr) => {\n+        $expr\n+    };\n+}\n+\n+macro_rules! my_println {\n+   ($($args:tt),*) => {{\n+        println!($($args),*)\n+    }};\n+}\n+\n+macro_rules! my_println_args {\n+    ($($args:tt),*) => {{\n+        println!(\"foo: {}\", format_args!($($args),*))\n+    }};\n+}\n+\n+fn tester(fn_arg: i32) {\n+    let local_i32 = 1;\n+    let local_f64 = 2.0;\n+    let local_opt: Option<i32> = Some(3);\n+    let width = 4;\n+    let prec = 5;\n+    let val = 6;\n+\n+    // make sure this file hasn't been corrupted with tabs converted to spaces\n+    // let _ = '\t';  // <- this is a single tab character\n+    let _: &[u8; 3] = b\"\t \t\"; // <- <tab><space><tab>\n+\n+    println!(\"val='{}'\", local_i32);\n+    println!(\"val='{   }'\", local_i32); // 3 spaces\n+    println!(\"val='{\t}'\", local_i32); // tab\n+    println!(\"val='{ \t}'\", local_i32); // space+tab\n+    println!(\"val='{\t }'\", local_i32); // tab+space\n+    println!(\n+        \"val='{\n+    }'\",\n+        local_i32\n+    );\n+    println!(\"{}\", local_i32);\n+    println!(\"{}\", fn_arg);\n+    println!(\"{:?}\", local_i32);\n+    println!(\"{:#?}\", local_i32);\n+    println!(\"{:4}\", local_i32);\n+    println!(\"{:04}\", local_i32);\n+    println!(\"{:<3}\", local_i32);\n+    println!(\"{:#010x}\", local_i32);\n+    println!(\"{:.1}\", local_f64);\n+    println!(\"Hello {} is {:.*}\", \"x\", local_i32, local_f64);\n+    println!(\"Hello {} is {:.*}\", local_i32, 5, local_f64);\n+    println!(\"Hello {} is {2:.*}\", local_i32, 5, local_f64);\n+    println!(\"{} {}\", local_i32, local_f64);\n+    println!(\"{}, {}\", local_i32, local_opt.unwrap());\n+    println!(\"{}\", val);\n+    println!(\"{}\", v = val);\n+    println!(\"{} {1}\", local_i32, 42);\n+    println!(\"val='{\\t }'\", local_i32);\n+    println!(\"val='{\\n }'\", local_i32);\n+    println!(\"val='{local_i32}'\", local_i32 = local_i32);\n+    println!(\"val='{local_i32}'\", local_i32 = fn_arg);\n+    println!(\"{0}\", local_i32);\n+    println!(\"{0:?}\", local_i32);\n+    println!(\"{0:#?}\", local_i32);\n+    println!(\"{0:04}\", local_i32);\n+    println!(\"{0:<3}\", local_i32);\n+    println!(\"{0:#010x}\", local_i32);\n+    println!(\"{0:.1}\", local_f64);\n+    println!(\"{0} {0}\", local_i32);\n+    println!(\"{1} {} {0} {}\", local_i32, local_f64);\n+    println!(\"{0} {1}\", local_i32, local_f64);\n+    println!(\"{1} {0}\", local_i32, local_f64);\n+    println!(\"{1} {0} {1} {0}\", local_i32, local_f64);\n+    println!(\"{1} {0}\", \"str\", local_i32);\n+    println!(\"{v}\", v = local_i32);\n+    println!(\"{local_i32:0$}\", width);\n+    println!(\"{local_i32:w$}\", w = width);\n+    println!(\"{local_i32:.0$}\", prec);\n+    println!(\"{local_i32:.p$}\", p = prec);\n+    println!(\"{:0$}\", v = val);\n+    println!(\"{0:0$}\", v = val);\n+    println!(\"{:0$.0$}\", v = val);\n+    println!(\"{0:0$.0$}\", v = val);\n+    println!(\"{0:0$.v$}\", v = val);\n+    println!(\"{0:v$.0$}\", v = val);\n+    println!(\"{v:0$.0$}\", v = val);\n+    println!(\"{v:v$.0$}\", v = val);\n+    println!(\"{v:0$.v$}\", v = val);\n+    println!(\"{v:v$.v$}\", v = val);\n+    println!(\"{:0$}\", width);\n+    println!(\"{:1$}\", local_i32, width);\n+    println!(\"{:w$}\", w = width);\n+    println!(\"{:w$}\", local_i32, w = width);\n+    println!(\"{:.0$}\", prec);\n+    println!(\"{:.1$}\", local_i32, prec);\n+    println!(\"{:.p$}\", p = prec);\n+    println!(\"{:.p$}\", local_i32, p = prec);\n+    println!(\"{:0$.1$}\", width, prec);\n+    println!(\"{:0$.w$}\", width, w = prec);\n+    println!(\"{:1$.2$}\", local_f64, width, prec);\n+    println!(\"{:1$.2$} {0} {1} {2}\", local_f64, width, prec);\n+    println!(\n+        \"{0:1$.2$} {0:2$.1$} {1:0$.2$} {1:2$.0$} {2:0$.1$} {2:1$.0$}\",\n+        local_i32, width, prec,\n+    );\n+    println!(\n+        \"{0:1$.2$} {0:2$.1$} {1:0$.2$} {1:2$.0$} {2:0$.1$} {2:1$.0$} {3}\",\n+        local_i32,\n+        width,\n+        prec,\n+        1 + 2\n+    );\n+    println!(\"Width = {}, value with width = {:0$}\", local_i32, local_f64);\n+    println!(\"{:w$.p$}\", local_i32, w = width, p = prec);\n+    println!(\"{:w$.p$}\", w = width, p = prec);\n+    println!(\"{}\", format!(\"{}\", local_i32));\n+    my_println!(\"{}\", local_i32);\n+    my_println_args!(\"{}\", local_i32);\n+\n+    // these should NOT be modified by the lint\n+    println!(concat!(\"nope \", \"{}\"), local_i32);\n+    println!(\"val='{local_i32}'\");\n+    println!(\"val='{local_i32 }'\");\n+    println!(\"val='{local_i32\t}'\"); // with tab\n+    println!(\"val='{local_i32\\n}'\");\n+    println!(\"{}\", usize::MAX);\n+    println!(\"{}\", local_opt.unwrap());\n+    println!(\n+        \"val='{local_i32\n+    }'\"\n+    );\n+    println!(no_param_str!(), local_i32);\n+\n+    // FIXME: bugs!\n+    // println!(pass_through!(\"foo={local_i32}\"), local_i32 = local_i32);\n+    // println!(pass_through!(\"foo={}\"), local_i32);\n+    // println!(indoc!(\"foo={}\"), local_i32);\n+    // printdoc!(\"foo={}\", local_i32);\n+}\n+\n+fn main() {\n+    tester(42);\n+}\n+\n+fn _under_msrv() {\n+    #![clippy::msrv = \"1.57\"]\n+    let local_i32 = 1;\n+    println!(\"don't expand='{}'\", local_i32);\n+}\n+\n+fn _meets_msrv() {\n+    #![clippy::msrv = \"1.58\"]\n+    let local_i32 = 1;\n+    println!(\"expand='{}'\", local_i32);\n+}"}, {"sha": "7e652d0354f24cc72ce0e70e488031a10fdf16e6", "filename": "tests/ui/uninlined_format_args.stderr", "status": "added", "additions": 866, "deletions": 0, "changes": 866, "blob_url": "https://github.com/rust-lang/rust/blob/cf93865a5c9f651dfec6f59ce13db4b379339218/tests%2Fui%2Funinlined_format_args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf93865a5c9f651dfec6f59ce13db4b379339218/tests%2Fui%2Funinlined_format_args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funinlined_format_args.stderr?ref=cf93865a5c9f651dfec6f59ce13db4b379339218", "patch": "@@ -0,0 +1,866 @@\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:47:5\n+   |\n+LL |     println!(\"val='{}'\", local_i32);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::uninlined-format-args` implied by `-D warnings`\n+help: change this to\n+   |\n+LL -     println!(\"val='{}'\", local_i32);\n+LL +     println!(\"val='{local_i32}'\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:48:5\n+   |\n+LL |     println!(\"val='{   }'\", local_i32); // 3 spaces\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"val='{   }'\", local_i32); // 3 spaces\n+LL +     println!(\"val='{local_i32}'\"); // 3 spaces\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:49:5\n+   |\n+LL |     println!(\"val='{    }'\", local_i32); // tab\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"val='{    }'\", local_i32); // tab\n+LL +     println!(\"val='{local_i32}'\"); // tab\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:50:5\n+   |\n+LL |     println!(\"val='{     }'\", local_i32); // space+tab\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"val='{     }'\", local_i32); // space+tab\n+LL +     println!(\"val='{local_i32}'\"); // space+tab\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:51:5\n+   |\n+LL |     println!(\"val='{     }'\", local_i32); // tab+space\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"val='{     }'\", local_i32); // tab+space\n+LL +     println!(\"val='{local_i32}'\"); // tab+space\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:52:5\n+   |\n+LL | /     println!(\n+LL | |         \"val='{\n+LL | |     }'\",\n+LL | |         local_i32\n+LL | |     );\n+   | |_____^\n+   |\n+help: change this to\n+   |\n+LL -         \"val='{\n+LL +         \"val='{local_i32}'\"\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:57:5\n+   |\n+LL |     println!(\"{}\", local_i32);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{}\", local_i32);\n+LL +     println!(\"{local_i32}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:58:5\n+   |\n+LL |     println!(\"{}\", fn_arg);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{}\", fn_arg);\n+LL +     println!(\"{fn_arg}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:59:5\n+   |\n+LL |     println!(\"{:?}\", local_i32);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{:?}\", local_i32);\n+LL +     println!(\"{local_i32:?}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:60:5\n+   |\n+LL |     println!(\"{:#?}\", local_i32);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{:#?}\", local_i32);\n+LL +     println!(\"{local_i32:#?}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:61:5\n+   |\n+LL |     println!(\"{:4}\", local_i32);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{:4}\", local_i32);\n+LL +     println!(\"{local_i32:4}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:62:5\n+   |\n+LL |     println!(\"{:04}\", local_i32);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{:04}\", local_i32);\n+LL +     println!(\"{local_i32:04}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:63:5\n+   |\n+LL |     println!(\"{:<3}\", local_i32);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{:<3}\", local_i32);\n+LL +     println!(\"{local_i32:<3}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:64:5\n+   |\n+LL |     println!(\"{:#010x}\", local_i32);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{:#010x}\", local_i32);\n+LL +     println!(\"{local_i32:#010x}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:65:5\n+   |\n+LL |     println!(\"{:.1}\", local_f64);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{:.1}\", local_f64);\n+LL +     println!(\"{local_f64:.1}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:66:5\n+   |\n+LL |     println!(\"Hello {} is {:.*}\", \"x\", local_i32, local_f64);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"Hello {} is {:.*}\", \"x\", local_i32, local_f64);\n+LL +     println!(\"Hello {} is {local_f64:.local_i32$}\", \"x\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:67:5\n+   |\n+LL |     println!(\"Hello {} is {:.*}\", local_i32, 5, local_f64);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"Hello {} is {:.*}\", local_i32, 5, local_f64);\n+LL +     println!(\"Hello {local_i32} is {local_f64:.*}\", 5);\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:68:5\n+   |\n+LL |     println!(\"Hello {} is {2:.*}\", local_i32, 5, local_f64);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"Hello {} is {2:.*}\", local_i32, 5, local_f64);\n+LL +     println!(\"Hello {local_i32} is {local_f64:.*}\", 5);\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:69:5\n+   |\n+LL |     println!(\"{} {}\", local_i32, local_f64);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{} {}\", local_i32, local_f64);\n+LL +     println!(\"{local_i32} {local_f64}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:70:5\n+   |\n+LL |     println!(\"{}, {}\", local_i32, local_opt.unwrap());\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{}, {}\", local_i32, local_opt.unwrap());\n+LL +     println!(\"{local_i32}, {}\", local_opt.unwrap());\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:71:5\n+   |\n+LL |     println!(\"{}\", val);\n+   |     ^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{}\", val);\n+LL +     println!(\"{val}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:72:5\n+   |\n+LL |     println!(\"{}\", v = val);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{}\", v = val);\n+LL +     println!(\"{val}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:74:5\n+   |\n+LL |     println!(\"val='{/t }'\", local_i32);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"val='{/t }'\", local_i32);\n+LL +     println!(\"val='{local_i32}'\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:75:5\n+   |\n+LL |     println!(\"val='{/n }'\", local_i32);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"val='{/n }'\", local_i32);\n+LL +     println!(\"val='{local_i32}'\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:76:5\n+   |\n+LL |     println!(\"val='{local_i32}'\", local_i32 = local_i32);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"val='{local_i32}'\", local_i32 = local_i32);\n+LL +     println!(\"val='{local_i32}'\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:77:5\n+   |\n+LL |     println!(\"val='{local_i32}'\", local_i32 = fn_arg);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"val='{local_i32}'\", local_i32 = fn_arg);\n+LL +     println!(\"val='{fn_arg}'\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:78:5\n+   |\n+LL |     println!(\"{0}\", local_i32);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{0}\", local_i32);\n+LL +     println!(\"{local_i32}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:79:5\n+   |\n+LL |     println!(\"{0:?}\", local_i32);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{0:?}\", local_i32);\n+LL +     println!(\"{local_i32:?}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:80:5\n+   |\n+LL |     println!(\"{0:#?}\", local_i32);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{0:#?}\", local_i32);\n+LL +     println!(\"{local_i32:#?}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:81:5\n+   |\n+LL |     println!(\"{0:04}\", local_i32);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{0:04}\", local_i32);\n+LL +     println!(\"{local_i32:04}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:82:5\n+   |\n+LL |     println!(\"{0:<3}\", local_i32);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{0:<3}\", local_i32);\n+LL +     println!(\"{local_i32:<3}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:83:5\n+   |\n+LL |     println!(\"{0:#010x}\", local_i32);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{0:#010x}\", local_i32);\n+LL +     println!(\"{local_i32:#010x}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:84:5\n+   |\n+LL |     println!(\"{0:.1}\", local_f64);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{0:.1}\", local_f64);\n+LL +     println!(\"{local_f64:.1}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:85:5\n+   |\n+LL |     println!(\"{0} {0}\", local_i32);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{0} {0}\", local_i32);\n+LL +     println!(\"{local_i32} {local_i32}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:86:5\n+   |\n+LL |     println!(\"{1} {} {0} {}\", local_i32, local_f64);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{1} {} {0} {}\", local_i32, local_f64);\n+LL +     println!(\"{local_f64} {local_i32} {local_i32} {local_f64}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:87:5\n+   |\n+LL |     println!(\"{0} {1}\", local_i32, local_f64);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{0} {1}\", local_i32, local_f64);\n+LL +     println!(\"{local_i32} {local_f64}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:88:5\n+   |\n+LL |     println!(\"{1} {0}\", local_i32, local_f64);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{1} {0}\", local_i32, local_f64);\n+LL +     println!(\"{local_f64} {local_i32}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:89:5\n+   |\n+LL |     println!(\"{1} {0} {1} {0}\", local_i32, local_f64);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{1} {0} {1} {0}\", local_i32, local_f64);\n+LL +     println!(\"{local_f64} {local_i32} {local_f64} {local_i32}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:91:5\n+   |\n+LL |     println!(\"{v}\", v = local_i32);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{v}\", v = local_i32);\n+LL +     println!(\"{local_i32}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:92:5\n+   |\n+LL |     println!(\"{local_i32:0$}\", width);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{local_i32:0$}\", width);\n+LL +     println!(\"{local_i32:width$}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:93:5\n+   |\n+LL |     println!(\"{local_i32:w$}\", w = width);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{local_i32:w$}\", w = width);\n+LL +     println!(\"{local_i32:width$}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:94:5\n+   |\n+LL |     println!(\"{local_i32:.0$}\", prec);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{local_i32:.0$}\", prec);\n+LL +     println!(\"{local_i32:.prec$}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:95:5\n+   |\n+LL |     println!(\"{local_i32:.p$}\", p = prec);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{local_i32:.p$}\", p = prec);\n+LL +     println!(\"{local_i32:.prec$}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:96:5\n+   |\n+LL |     println!(\"{:0$}\", v = val);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{:0$}\", v = val);\n+LL +     println!(\"{val:val$}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:97:5\n+   |\n+LL |     println!(\"{0:0$}\", v = val);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{0:0$}\", v = val);\n+LL +     println!(\"{val:val$}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:98:5\n+   |\n+LL |     println!(\"{:0$.0$}\", v = val);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{:0$.0$}\", v = val);\n+LL +     println!(\"{val:val$.val$}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:99:5\n+   |\n+LL |     println!(\"{0:0$.0$}\", v = val);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{0:0$.0$}\", v = val);\n+LL +     println!(\"{val:val$.val$}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:100:5\n+   |\n+LL |     println!(\"{0:0$.v$}\", v = val);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{0:0$.v$}\", v = val);\n+LL +     println!(\"{val:val$.val$}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:101:5\n+   |\n+LL |     println!(\"{0:v$.0$}\", v = val);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{0:v$.0$}\", v = val);\n+LL +     println!(\"{val:val$.val$}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:102:5\n+   |\n+LL |     println!(\"{v:0$.0$}\", v = val);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{v:0$.0$}\", v = val);\n+LL +     println!(\"{val:val$.val$}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:103:5\n+   |\n+LL |     println!(\"{v:v$.0$}\", v = val);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{v:v$.0$}\", v = val);\n+LL +     println!(\"{val:val$.val$}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:104:5\n+   |\n+LL |     println!(\"{v:0$.v$}\", v = val);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{v:0$.v$}\", v = val);\n+LL +     println!(\"{val:val$.val$}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:105:5\n+   |\n+LL |     println!(\"{v:v$.v$}\", v = val);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{v:v$.v$}\", v = val);\n+LL +     println!(\"{val:val$.val$}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:106:5\n+   |\n+LL |     println!(\"{:0$}\", width);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{:0$}\", width);\n+LL +     println!(\"{width:width$}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:107:5\n+   |\n+LL |     println!(\"{:1$}\", local_i32, width);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{:1$}\", local_i32, width);\n+LL +     println!(\"{local_i32:width$}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:108:5\n+   |\n+LL |     println!(\"{:w$}\", w = width);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{:w$}\", w = width);\n+LL +     println!(\"{width:width$}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:109:5\n+   |\n+LL |     println!(\"{:w$}\", local_i32, w = width);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{:w$}\", local_i32, w = width);\n+LL +     println!(\"{local_i32:width$}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:110:5\n+   |\n+LL |     println!(\"{:.0$}\", prec);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{:.0$}\", prec);\n+LL +     println!(\"{prec:.prec$}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:111:5\n+   |\n+LL |     println!(\"{:.1$}\", local_i32, prec);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{:.1$}\", local_i32, prec);\n+LL +     println!(\"{local_i32:.prec$}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:112:5\n+   |\n+LL |     println!(\"{:.p$}\", p = prec);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{:.p$}\", p = prec);\n+LL +     println!(\"{prec:.prec$}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:113:5\n+   |\n+LL |     println!(\"{:.p$}\", local_i32, p = prec);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{:.p$}\", local_i32, p = prec);\n+LL +     println!(\"{local_i32:.prec$}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:114:5\n+   |\n+LL |     println!(\"{:0$.1$}\", width, prec);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{:0$.1$}\", width, prec);\n+LL +     println!(\"{width:width$.prec$}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:115:5\n+   |\n+LL |     println!(\"{:0$.w$}\", width, w = prec);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{:0$.w$}\", width, w = prec);\n+LL +     println!(\"{width:width$.prec$}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:116:5\n+   |\n+LL |     println!(\"{:1$.2$}\", local_f64, width, prec);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{:1$.2$}\", local_f64, width, prec);\n+LL +     println!(\"{local_f64:width$.prec$}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:117:5\n+   |\n+LL |     println!(\"{:1$.2$} {0} {1} {2}\", local_f64, width, prec);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{:1$.2$} {0} {1} {2}\", local_f64, width, prec);\n+LL +     println!(\"{local_f64:width$.prec$} {local_f64} {width} {prec}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:118:5\n+   |\n+LL | /     println!(\n+LL | |         \"{0:1$.2$} {0:2$.1$} {1:0$.2$} {1:2$.0$} {2:0$.1$} {2:1$.0$}\",\n+LL | |         local_i32, width, prec,\n+LL | |     );\n+   | |_____^\n+   |\n+help: change this to\n+   |\n+LL ~         \"{local_i32:width$.prec$} {local_i32:prec$.width$} {width:local_i32$.prec$} {width:prec$.local_i32$} {prec:local_i32$.width$} {prec:width$.local_i32$}\", width, prec,\n+LL ~         \"{0:1$.2$} {0:2$.1$} {1:0$.2$} {1:2$.0$} {2:0$.1$} {2:1$.0$}\", width, prec,\n+LL ~         \"{0:1$.2$} {0:2$.1$} {1:0$.2$} {1:2$.0$} {2:0$.1$} {2:1$.0$}\", width, prec,\n+LL ~         \"{0:1$.2$} {0:2$.1$} {1:0$.2$} {1:2$.0$} {2:0$.1$} {2:1$.0$}\", width, prec,\n+LL ~         \"{0:1$.2$} {0:2$.1$} {1:0$.2$} {1:2$.0$} {2:0$.1$} {2:1$.0$}\", width, prec,\n+LL ~         \"{0:1$.2$} {0:2$.1$} {1:0$.2$} {1:2$.0$} {2:0$.1$} {2:1$.0$}\",\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:129:5\n+   |\n+LL |     println!(\"Width = {}, value with width = {:0$}\", local_i32, local_f64);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"Width = {}, value with width = {:0$}\", local_i32, local_f64);\n+LL +     println!(\"Width = {local_i32}, value with width = {local_f64:local_i32$}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:130:5\n+   |\n+LL |     println!(\"{:w$.p$}\", local_i32, w = width, p = prec);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{:w$.p$}\", local_i32, w = width, p = prec);\n+LL +     println!(\"{local_i32:width$.prec$}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:131:5\n+   |\n+LL |     println!(\"{:w$.p$}\", w = width, p = prec);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{:w$.p$}\", w = width, p = prec);\n+LL +     println!(\"{width:width$.prec$}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:132:20\n+   |\n+LL |     println!(\"{}\", format!(\"{}\", local_i32));\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{}\", format!(\"{}\", local_i32));\n+LL +     println!(\"{}\", format!(\"{local_i32}\"));\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:170:5\n+   |\n+LL |     println!(\"expand='{}'\", local_i32);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"expand='{}'\", local_i32);\n+LL +     println!(\"expand='{local_i32}'\");\n+   |\n+\n+error: aborting due to 71 previous errors\n+"}]}