{"sha": "099a8f37f5fd41f7afe26039b063973617133153", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5OWE4ZjM3ZjVmZDQxZjdhZmUyNjAzOWIwNjM5NzM2MTcxMzMxNTM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-02-29T15:36:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-29T15:36:03Z"}, "message": "Merge #3309\n\n3309: Find cargo toml up the fs r=matklad a=not-much-io\n\nCurrently rust-analyzer will look for Cargo.toml in the root of the project and if failing that then go down the filesystem until root.\r\n\r\nThis unfortunately wouldn't work automatically with (what I imagine is) a fairly common project structure. As an example with multiple languages like:\r\n```\r\njs/\r\n  ..\r\nrust/\r\n  Cargo.toml\r\n  ...\r\n```\r\n\r\nAdded this small change so rust-analyzer would glance one level up if not found in root or down the filesystem.\r\n\r\n## Why not go deeper?\r\n\r\nCould be problematic with large project vendored dependencies etc.\r\n\r\n## Why not add a Cargo.toml manual setting option?\r\n\r\nLoosely related and a good idea, however the convenience of having this automated also is hard to pass up. \r\n\r\n## Testing?\r\n\r\nBuild a binary with various logs and checked it in a project with such a structure:\r\n\r\n```\r\n[ERROR ra_project_model] find_cargo_toml()\r\n[ERROR ra_project_model] find_cargo_toml_up_the_fs()\r\n[ERROR ra_project_model] entities: ReadDir(\"/workspaces/my-project\")\r\n[ERROR ra_project_model] candidate: \"/workspaces/my-project/rust/Cargo.toml\", exists: true\r\n```\r\n\r\n## Edge Cases?\r\n\r\nIf you have multiple Cargo.toml files one level deeper AND not in the root, will get whatever comes first (order undefined), example:\r\n```\r\ncrate1/\r\n    Cargo.toml\r\ncrate2/\r\n     Cargo.toml\r\n... (no root Cargo.toml)\r\n```\r\n\r\nHowever this is quite unusual and wouldn't have worked before either. This is only resolvable via manually choosing.\n\nCo-authored-by: nmio <kristo.koert@gmail.com>", "tree": {"sha": "1ee876766ad8be3b7dedefbe781f856b0cca63bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ee876766ad8be3b7dedefbe781f856b0cca63bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/099a8f37f5fd41f7afe26039b063973617133153", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeWoTjCRBK7hj4Ov3rIwAAdHIIAAVAaWFZzyBbU5htUIh/zROV\nov705+MAzjxDJYNs2r3LXCnXVesr54IRc43aytOrL/7qMH/89KpN6DhGe+hVJ/U3\nY0v6r7yPFzi+5UEUZ+ekt1SJrxjyIZtdSCZnH3sR8M34A4M17lkolm9/FB6Y0ZR9\nS/s0akL3EQEYSRKr7IUDKOASF9ZASU3qVG6toemLGJIAzK8CMAHUqdb66BLt0zTM\n+HgvIrmX+Xhqe4XbDDAZCc9ZO5znfMicIPQMRXojp1vBs6Bqq/C9nPcfH3j/8aSG\nL3sPg6VLxsW8YdunrKNdcf9AZPpzWvvJFORz0WvLqz0Ra9PpmU3e0EqRTufQIhU=\n=e0mr\n-----END PGP SIGNATURE-----\n", "payload": "tree 1ee876766ad8be3b7dedefbe781f856b0cca63bd\nparent 0ae7054210b0bbc48ea51c3672be640d3096cfdd\nparent b9fbb3da1740ddef0ab5d9dcbb75e50b92ba0c09\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1582990563 +0000\ncommitter GitHub <noreply@github.com> 1582990563 +0000\n\nMerge #3309\n\n3309: Find cargo toml up the fs r=matklad a=not-much-io\n\nCurrently rust-analyzer will look for Cargo.toml in the root of the project and if failing that then go down the filesystem until root.\r\n\r\nThis unfortunately wouldn't work automatically with (what I imagine is) a fairly common project structure. As an example with multiple languages like:\r\n```\r\njs/\r\n  ..\r\nrust/\r\n  Cargo.toml\r\n  ...\r\n```\r\n\r\nAdded this small change so rust-analyzer would glance one level up if not found in root or down the filesystem.\r\n\r\n## Why not go deeper?\r\n\r\nCould be problematic with large project vendored dependencies etc.\r\n\r\n## Why not add a Cargo.toml manual setting option?\r\n\r\nLoosely related and a good idea, however the convenience of having this automated also is hard to pass up. \r\n\r\n## Testing?\r\n\r\nBuild a binary with various logs and checked it in a project with such a structure:\r\n\r\n```\r\n[ERROR ra_project_model] find_cargo_toml()\r\n[ERROR ra_project_model] find_cargo_toml_up_the_fs()\r\n[ERROR ra_project_model] entities: ReadDir(\"/workspaces/my-project\")\r\n[ERROR ra_project_model] candidate: \"/workspaces/my-project/rust/Cargo.toml\", exists: true\r\n```\r\n\r\n## Edge Cases?\r\n\r\nIf you have multiple Cargo.toml files one level deeper AND not in the root, will get whatever comes first (order undefined), example:\r\n```\r\ncrate1/\r\n    Cargo.toml\r\ncrate2/\r\n     Cargo.toml\r\n... (no root Cargo.toml)\r\n```\r\n\r\nHowever this is quite unusual and wouldn't have worked before either. This is only resolvable via manually choosing.\n\nCo-authored-by: nmio <kristo.koert@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/099a8f37f5fd41f7afe26039b063973617133153", "html_url": "https://github.com/rust-lang/rust/commit/099a8f37f5fd41f7afe26039b063973617133153", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/099a8f37f5fd41f7afe26039b063973617133153/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ae7054210b0bbc48ea51c3672be640d3096cfdd", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ae7054210b0bbc48ea51c3672be640d3096cfdd", "html_url": "https://github.com/rust-lang/rust/commit/0ae7054210b0bbc48ea51c3672be640d3096cfdd"}, {"sha": "b9fbb3da1740ddef0ab5d9dcbb75e50b92ba0c09", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9fbb3da1740ddef0ab5d9dcbb75e50b92ba0c09", "html_url": "https://github.com/rust-lang/rust/commit/b9fbb3da1740ddef0ab5d9dcbb75e50b92ba0c09"}], "stats": {"total": 80, "additions": 70, "deletions": 10}, "files": [{"sha": "bcf12460d824a30f8663a0bd88b86e970744ab93", "filename": "crates/ra_project_model/src/lib.rs", "status": "modified", "additions": 66, "deletions": 9, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/099a8f37f5fd41f7afe26039b063973617133153/crates%2Fra_project_model%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/099a8f37f5fd41f7afe26039b063973617133153/crates%2Fra_project_model%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Flib.rs?ref=099a8f37f5fd41f7afe26039b063973617133153", "patch": "@@ -6,7 +6,7 @@ mod sysroot;\n \n use std::{\n     error::Error,\n-    fs::File,\n+    fs::{read_dir, File, ReadDir},\n     io::BufReader,\n     path::{Path, PathBuf},\n     process::Command,\n@@ -25,11 +25,19 @@ pub use crate::{\n };\n \n #[derive(Clone, PartialEq, Eq, Hash, Debug)]\n-pub struct CargoTomlNotFoundError(pub PathBuf);\n+pub struct CargoTomlNotFoundError {\n+    pub searched_at: PathBuf,\n+    pub reason: String,\n+}\n \n impl std::fmt::Display for CargoTomlNotFoundError {\n     fn fmt(&self, fmt: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n-        write!(fmt, \"can't find Cargo.toml at {}\", self.0.display())\n+        write!(\n+            fmt,\n+            \"can't find Cargo.toml at {}, due to {}\",\n+            self.searched_at.display(),\n+            self.reason\n+        )\n     }\n }\n \n@@ -406,19 +414,68 @@ fn find_rust_project_json(path: &Path) -> Option<PathBuf> {\n     None\n }\n \n-fn find_cargo_toml(path: &Path) -> Result<PathBuf> {\n-    if path.ends_with(\"Cargo.toml\") {\n-        return Ok(path.to_path_buf());\n-    }\n+fn find_cargo_toml_in_parent_dir(path: &Path) -> Option<PathBuf> {\n     let mut curr = Some(path);\n     while let Some(path) = curr {\n         let candidate = path.join(\"Cargo.toml\");\n         if candidate.exists() {\n-            return Ok(candidate);\n+            return Some(candidate);\n         }\n         curr = path.parent();\n     }\n-    Err(CargoTomlNotFoundError(path.to_path_buf()).into())\n+\n+    None\n+}\n+\n+fn find_cargo_toml_in_child_dir(entities: ReadDir) -> Vec<PathBuf> {\n+    // Only one level down to avoid cycles the easy way and stop a runaway scan with large projects\n+    let mut valid_canditates = vec![];\n+    for entity in entities.filter_map(Result::ok) {\n+        let candidate = entity.path().join(\"Cargo.toml\");\n+        if candidate.exists() {\n+            valid_canditates.push(candidate)\n+        }\n+    }\n+    valid_canditates\n+}\n+\n+fn find_cargo_toml(path: &Path) -> Result<PathBuf> {\n+    if path.ends_with(\"Cargo.toml\") {\n+        return Ok(path.to_path_buf());\n+    }\n+\n+    if let Some(p) = find_cargo_toml_in_parent_dir(path) {\n+        return Ok(p);\n+    }\n+\n+    let entities = match read_dir(path) {\n+        Ok(entities) => entities,\n+        Err(e) => {\n+            return Err(CargoTomlNotFoundError {\n+                searched_at: path.to_path_buf(),\n+                reason: format!(\"file system error: {}\", e),\n+            }\n+            .into());\n+        }\n+    };\n+\n+    let mut valid_canditates = find_cargo_toml_in_child_dir(entities);\n+    match valid_canditates.len() {\n+        1 => Ok(valid_canditates.remove(0)),\n+        0 => Err(CargoTomlNotFoundError {\n+            searched_at: path.to_path_buf(),\n+            reason: \"no Cargo.toml file found\".to_string(),\n+        }\n+        .into()),\n+        _ => Err(CargoTomlNotFoundError {\n+            searched_at: path.to_path_buf(),\n+            reason: format!(\n+                \"multiple equally valid Cargo.toml files found: {:?}\",\n+                valid_canditates\n+            ),\n+        }\n+        .into()),\n+    }\n }\n \n pub fn get_rustc_cfg_options() -> CfgOptions {"}, {"sha": "fe804aadaa9b0205deb0f881271a980feed175b2", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/099a8f37f5fd41f7afe26039b063973617133153/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/099a8f37f5fd41f7afe26039b063973617133153/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=099a8f37f5fd41f7afe26039b063973617133153", "patch": "@@ -115,12 +115,15 @@ pub fn main_loop(\n                     Ok(workspace) => loaded_workspaces.push(workspace),\n                     Err(e) => {\n                         log::error!(\"loading workspace failed: {:?}\", e);\n-                        if let Some(ra_project_model::CargoTomlNotFoundError(_)) = e.downcast_ref()\n+\n+                        if let Some(ra_project_model::CargoTomlNotFoundError { .. }) =\n+                            e.downcast_ref()\n                         {\n                             if !feature_flags.get(\"notifications.cargo-toml-not-found\") {\n                                 continue;\n                             }\n                         }\n+\n                         show_message(\n                             req::MessageType::Error,\n                             format!(\"rust-analyzer failed to load workspace: {:?}\", e),"}]}