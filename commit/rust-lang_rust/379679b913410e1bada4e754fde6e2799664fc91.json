{"sha": "379679b913410e1bada4e754fde6e2799664fc91", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3OTY3OWI5MTM0MTBlMWJhZGE0ZTc1NGZkZTZlMjc5OTY2NGZjOTE=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2021-03-07T01:41:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-07T01:41:18Z"}, "message": "Rollup merge of #82803 - jyn514:unversioned-files, r=GuillaumeGomez\n\nrustdoc: Add an unstable option to print all unversioned files\n\nThis allows sharing those files between different doc invocations\nwithout having to know their names ahead of time.\n\nHelps with https://github.com/rust-lang/docs.rs/issues/1302.\nr? ````@GuillaumeGomez```` cc ````@pietroalbini```` ````@Nemo157````", "tree": {"sha": "9ffbd765c4a3f0247f28c4006e332e0ea50e3308", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ffbd765c4a3f0247f28c4006e332e0ea50e3308"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/379679b913410e1bada4e754fde6e2799664fc91", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgRC8/CRBK7hj4Ov3rIwAAdHIIAGZGZlBMbW9DJsFOKusmKg0k\nrjazTosayBE4mwVgtOOe7rTpD2vCll8A3E3pHumMC+b+T1tKAd+fhVQga2qfDLXg\nHrsJ1SphKLFD/sc4YGipmO5BOHkP1YftCk5C0qk+6xkFq/6foEAMoFVZrY5aEZ4/\ni2c+InC8iAzYLwI59t7GOArdy8RuMslBJ6gSni8jyD8jY9vdIV4KODAxV+LI3SzR\n7AZwGQEoELghDDneC67NFqnKYLrDyCkzlP2tZqocAAjXY6jFdEORKGZzC5gz8yc7\ncA/rggavv9AhMy68Dtu3TaOeBHTy+chvugJuNo22xY6mIOG7rCYhqLT4j2IouBg=\n=M4mp\n-----END PGP SIGNATURE-----\n", "payload": "tree 9ffbd765c4a3f0247f28c4006e332e0ea50e3308\nparent a0dcfdfb7640b0e807e48d8234d41e5a3a0a7e84\nparent 173d2aaa009d7d1b76addefc204a2bde329caa83\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1615081278 +0900\ncommitter GitHub <noreply@github.com> 1615081278 +0900\n\nRollup merge of #82803 - jyn514:unversioned-files, r=GuillaumeGomez\n\nrustdoc: Add an unstable option to print all unversioned files\n\nThis allows sharing those files between different doc invocations\nwithout having to know their names ahead of time.\n\nHelps with https://github.com/rust-lang/docs.rs/issues/1302.\nr? ````@GuillaumeGomez```` cc ````@pietroalbini```` ````@Nemo157````\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/379679b913410e1bada4e754fde6e2799664fc91", "html_url": "https://github.com/rust-lang/rust/commit/379679b913410e1bada4e754fde6e2799664fc91", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/379679b913410e1bada4e754fde6e2799664fc91/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0dcfdfb7640b0e807e48d8234d41e5a3a0a7e84", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0dcfdfb7640b0e807e48d8234d41e5a3a0a7e84", "html_url": "https://github.com/rust-lang/rust/commit/a0dcfdfb7640b0e807e48d8234d41e5a3a0a7e84"}, {"sha": "173d2aaa009d7d1b76addefc204a2bde329caa83", "url": "https://api.github.com/repos/rust-lang/rust/commits/173d2aaa009d7d1b76addefc204a2bde329caa83", "html_url": "https://github.com/rust-lang/rust/commit/173d2aaa009d7d1b76addefc204a2bde329caa83"}], "stats": {"total": 105, "additions": 72, "deletions": 33}, "files": [{"sha": "a94ee918c24672d37ba9c2ec7770de0ec796f797", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/379679b913410e1bada4e754fde6e2799664fc91/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/379679b913410e1bada4e754fde6e2799664fc91/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=379679b913410e1bada4e754fde6e2799664fc91", "patch": "@@ -1615,24 +1615,6 @@ impl PrimitiveType {\n         CELL.get_or_init(move || {\n             use self::PrimitiveType::*;\n \n-            /// A macro to create a FxHashMap.\n-            ///\n-            /// Example:\n-            ///\n-            /// ```\n-            /// let letters = map!{\"a\" => \"b\", \"c\" => \"d\"};\n-            /// ```\n-            ///\n-            /// Trailing commas are allowed.\n-            /// Commas between elements are required (even if the expression is a block).\n-            macro_rules! map {\n-                ($( $key: expr => $val: expr ),* $(,)*) => {{\n-                    let mut map = ::rustc_data_structures::fx::FxHashMap::default();\n-                    $( map.insert($key, $val); )*\n-                    map\n-                }}\n-            }\n-\n             let single = |a: Option<DefId>| a.into_iter().collect();\n             let both = |a: Option<DefId>, b: Option<DefId>| -> ArrayVec<_> {\n                 a.into_iter().chain(b).collect()"}, {"sha": "ecb6378f31fb452fe61e588fe82f3f0493c5b007", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/379679b913410e1bada4e754fde6e2799664fc91/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/379679b913410e1bada4e754fde6e2799664fc91/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=379679b913410e1bada4e754fde6e2799664fc91", "patch": "@@ -315,6 +315,13 @@ impl Options {\n             return Err(0);\n         }\n \n+        if matches.opt_strs(\"print\").iter().any(|opt| opt == \"unversioned-files\") {\n+            for file in crate::html::render::FILES_UNVERSIONED.keys() {\n+                println!(\"{}\", file);\n+            }\n+            return Err(0);\n+        }\n+\n         let color = config::parse_color(&matches);\n         let (json_rendered, _artifacts) = config::parse_json(&matches);\n         let error_format = config::parse_error_format(&matches, color, json_rendered);"}, {"sha": "9b9ec2581cfc2c1531aa25293b7f98d09d8197e2", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/379679b913410e1bada4e754fde6e2799664fc91/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/379679b913410e1bada4e754fde6e2799664fc91/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=379679b913410e1bada4e754fde6e2799664fc91", "patch": "@@ -33,6 +33,7 @@ mod print_item;\n mod write_shared;\n \n crate use context::*;\n+crate use write_shared::FILES_UNVERSIONED;\n \n use std::cell::{Cell, RefCell};\n use std::collections::VecDeque;"}, {"sha": "02ad01aa29a02e2d8c74ef0f94678c303fe67fda", "filename": "src/librustdoc/html/render/write_shared.rs", "status": "modified", "additions": 24, "deletions": 15, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/379679b913410e1bada4e754fde6e2799664fc91/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/379679b913410e1bada4e754fde6e2799664fc91/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs?ref=379679b913410e1bada4e754fde6e2799664fc91", "patch": "@@ -3,6 +3,7 @@ use std::fmt::Write;\n use std::fs::{self, File};\n use std::io::prelude::*;\n use std::io::{self, BufReader};\n+use std::lazy::SyncLazy as Lazy;\n use std::path::{Component, Path, PathBuf};\n \n use itertools::Itertools;\n@@ -18,6 +19,26 @@ use crate::error::Error;\n use crate::formats::FormatRenderer;\n use crate::html::{layout, static_files};\n \n+crate static FILES_UNVERSIONED: Lazy<FxHashMap<&str, &[u8]>> = Lazy::new(|| {\n+    map! {\n+        \"FiraSans-Regular.woff2\" => static_files::fira_sans::REGULAR2,\n+        \"FiraSans-Medium.woff2\" => static_files::fira_sans::MEDIUM2,\n+        \"FiraSans-Regular.woff\" => static_files::fira_sans::REGULAR,\n+        \"FiraSans-Medium.woff\" => static_files::fira_sans::MEDIUM,\n+        \"FiraSans-LICENSE.txt\" => static_files::fira_sans::LICENSE,\n+        \"SourceSerifPro-Regular.ttf.woff\" => static_files::source_serif_pro::REGULAR,\n+        \"SourceSerifPro-Bold.ttf.woff\" => static_files::source_serif_pro::BOLD,\n+        \"SourceSerifPro-It.ttf.woff\" => static_files::source_serif_pro::ITALIC,\n+        \"SourceSerifPro-LICENSE.md\" => static_files::source_serif_pro::LICENSE,\n+        \"SourceCodePro-Regular.woff\" => static_files::source_code_pro::REGULAR,\n+        \"SourceCodePro-Semibold.woff\" => static_files::source_code_pro::SEMIBOLD,\n+        \"SourceCodePro-LICENSE.txt\" => static_files::source_code_pro::LICENSE,\n+        \"LICENSE-MIT.txt\" => static_files::LICENSE_MIT,\n+        \"LICENSE-APACHE.txt\" => static_files::LICENSE_APACHE,\n+        \"COPYRIGHT.txt\" => static_files::COPYRIGHT,\n+    }\n+});\n+\n pub(super) fn write_shared(\n     cx: &Context<'_>,\n     krate: &Crate,\n@@ -212,21 +233,9 @@ themePicker.onblur = handleThemeButtonsBlur;\n         static_files::NORMALIZE_CSS,\n         options.enable_minification,\n     )?;\n-    write(cx.dst.join(\"FiraSans-Regular.woff2\"), static_files::fira_sans::REGULAR2)?;\n-    write(cx.dst.join(\"FiraSans-Medium.woff2\"), static_files::fira_sans::MEDIUM2)?;\n-    write(cx.dst.join(\"FiraSans-Regular.woff\"), static_files::fira_sans::REGULAR)?;\n-    write(cx.dst.join(\"FiraSans-Medium.woff\"), static_files::fira_sans::MEDIUM)?;\n-    write(cx.dst.join(\"FiraSans-LICENSE.txt\"), static_files::fira_sans::LICENSE)?;\n-    write(cx.dst.join(\"SourceSerifPro-Regular.ttf.woff\"), static_files::source_serif_pro::REGULAR)?;\n-    write(cx.dst.join(\"SourceSerifPro-Bold.ttf.woff\"), static_files::source_serif_pro::BOLD)?;\n-    write(cx.dst.join(\"SourceSerifPro-It.ttf.woff\"), static_files::source_serif_pro::ITALIC)?;\n-    write(cx.dst.join(\"SourceSerifPro-LICENSE.md\"), static_files::source_serif_pro::LICENSE)?;\n-    write(cx.dst.join(\"SourceCodePro-Regular.woff\"), static_files::source_code_pro::REGULAR)?;\n-    write(cx.dst.join(\"SourceCodePro-Semibold.woff\"), static_files::source_code_pro::SEMIBOLD)?;\n-    write(cx.dst.join(\"SourceCodePro-LICENSE.txt\"), static_files::source_code_pro::LICENSE)?;\n-    write(cx.dst.join(\"LICENSE-MIT.txt\"), static_files::LICENSE_MIT)?;\n-    write(cx.dst.join(\"LICENSE-APACHE.txt\"), static_files::LICENSE_APACHE)?;\n-    write(cx.dst.join(\"COPYRIGHT.txt\"), static_files::COPYRIGHT)?;\n+    for (file, contents) in &*FILES_UNVERSIONED {\n+        write(cx.dst.join(file), contents)?;\n+    }\n \n     fn collect(path: &Path, krate: &str, key: &str) -> io::Result<(Vec<String>, Vec<String>)> {\n         let mut ret = Vec::new();"}, {"sha": "9e8432454429fcfd6c93420e5d5e39b9e3369a97", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/379679b913410e1bada4e754fde6e2799664fc91/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/379679b913410e1bada4e754fde6e2799664fc91/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=379679b913410e1bada4e754fde6e2799664fc91", "patch": "@@ -71,6 +71,24 @@ use rustc_session::config::{make_crate_type_option, ErrorOutputType, RustcOptGro\n use rustc_session::getopts;\n use rustc_session::{early_error, early_warn};\n \n+/// A macro to create a FxHashMap.\n+///\n+/// Example:\n+///\n+/// ```\n+/// let letters = map!{\"a\" => \"b\", \"c\" => \"d\"};\n+/// ```\n+///\n+/// Trailing commas are allowed.\n+/// Commas between elements are required (even if the expression is a block).\n+macro_rules! map {\n+    ($( $key: expr => $val: expr ),* $(,)*) => {{\n+        let mut map = ::rustc_data_structures::fx::FxHashMap::default();\n+        $( map.insert($key, $val); )*\n+        map\n+    }}\n+}\n+\n #[macro_use]\n mod externalfiles;\n \n@@ -506,6 +524,9 @@ fn opts() -> Vec<RustcOptGroup> {\n                 \"Generate JSON file at the top level instead of generating HTML redirection files\",\n             )\n         }),\n+        unstable(\"print\", |o| {\n+            o.optmulti(\"\", \"print\", \"Rustdoc information to print on stdout\", \"[unversioned-files]\")\n+        }),\n     ]\n }\n "}, {"sha": "e368f61cddfc3f5bc7e74e2f6484b55388a6b5b4", "filename": "src/test/run-make-fulldeps/print-unversioned-files/Makefile", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/379679b913410e1bada4e754fde6e2799664fc91/src%2Ftest%2Frun-make-fulldeps%2Fprint-unversioned-files%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/379679b913410e1bada4e754fde6e2799664fc91/src%2Ftest%2Frun-make-fulldeps%2Fprint-unversioned-files%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fprint-unversioned-files%2FMakefile?ref=379679b913410e1bada4e754fde6e2799664fc91", "patch": "@@ -0,0 +1,4 @@\n+-include ../tools.mk\n+\n+all:\n+\t$(RUSTDOC) -Z unstable-options --print unversioned-files | sort | diff - unversioned-files.txt"}, {"sha": "c5a9bf24381602004ff898faf449f89614bf053f", "filename": "src/test/run-make-fulldeps/print-unversioned-files/unversioned-files.txt", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/379679b913410e1bada4e754fde6e2799664fc91/src%2Ftest%2Frun-make-fulldeps%2Fprint-unversioned-files%2Funversioned-files.txt", "raw_url": "https://github.com/rust-lang/rust/raw/379679b913410e1bada4e754fde6e2799664fc91/src%2Ftest%2Frun-make-fulldeps%2Fprint-unversioned-files%2Funversioned-files.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fprint-unversioned-files%2Funversioned-files.txt?ref=379679b913410e1bada4e754fde6e2799664fc91", "patch": "@@ -0,0 +1,15 @@\n+COPYRIGHT.txt\n+FiraSans-LICENSE.txt\n+FiraSans-Medium.woff\n+FiraSans-Medium.woff2\n+FiraSans-Regular.woff\n+FiraSans-Regular.woff2\n+LICENSE-APACHE.txt\n+LICENSE-MIT.txt\n+SourceCodePro-LICENSE.txt\n+SourceCodePro-Regular.woff\n+SourceCodePro-Semibold.woff\n+SourceSerifPro-Bold.ttf.woff\n+SourceSerifPro-It.ttf.woff\n+SourceSerifPro-LICENSE.md\n+SourceSerifPro-Regular.ttf.woff"}]}