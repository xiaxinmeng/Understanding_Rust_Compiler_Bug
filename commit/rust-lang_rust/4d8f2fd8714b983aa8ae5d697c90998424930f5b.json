{"sha": "4d8f2fd8714b983aa8ae5d697c90998424930f5b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkOGYyZmQ4NzE0Yjk4M2FhOGFlNWQ2OTdjOTA5OTg0MjQ5MzBmNWI=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@gmail", "date": "2013-06-20T14:00:59Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@gmail", "date": "2013-06-27T17:28:17Z"}, "message": "debuginfo: Many little formatting improvements.", "tree": {"sha": "856515baf7dfd2b155c301ffe90b2f3813bf5341", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/856515baf7dfd2b155c301ffe90b2f3813bf5341"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d8f2fd8714b983aa8ae5d697c90998424930f5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d8f2fd8714b983aa8ae5d697c90998424930f5b", "html_url": "https://github.com/rust-lang/rust/commit/4d8f2fd8714b983aa8ae5d697c90998424930f5b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d8f2fd8714b983aa8ae5d697c90998424930f5b/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f97a6e951bfd45743c9153fc78743462472351b", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f97a6e951bfd45743c9153fc78743462472351b", "html_url": "https://github.com/rust-lang/rust/commit/5f97a6e951bfd45743c9153fc78743462472351b"}], "stats": {"total": 177, "additions": 121, "deletions": 56}, "files": [{"sha": "0a1f2d1fe241124ed884227d2bc12d6be4c5cea0", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 121, "deletions": 56, "changes": 177, "blob_url": "https://github.com/rust-lang/rust/blob/4d8f2fd8714b983aa8ae5d697c90998424930f5b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d8f2fd8714b983aa8ae5d697c90998424930f5b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=4d8f2fd8714b983aa8ae5d697c90998424930f5b", "patch": "@@ -211,9 +211,17 @@ pub fn create_arg(bcx: block, arg: ast::arg, span: span) -> Option<DIVariable> {\n             let ident = path.idents.last();\n             let name: &str = cx.sess.str_of(*ident);\n             let mdnode = do as_c_str(name) |name| { unsafe {\n-                llvm::LLVMDIBuilderCreateLocalVariable(DIB(cx),\n-                    ArgVariableTag as u32, context, name,\n-                    filemd, loc.line as c_uint, tymd, false, 0, 0)\n+                llvm::LLVMDIBuilderCreateLocalVariable(\n+                    DIB(cx),\n+                    ArgVariableTag as u32,\n+                    context,\n+                    name,\n+                    filemd,\n+                    loc.line as c_uint,\n+                    tymd,\n+                    false,\n+                    0,\n+                    0)\n                     // XXX need to pass in a real argument number\n             }};\n \n@@ -290,16 +298,17 @@ pub fn create_function(fcx: fn_ctxt) -> DISubprogram {\n     let ret_ty_md = if cx.sess.opts.extra_debuginfo {\n         match ret_ty.node {\n           ast::ty_nil => ptr::null(),\n-          _ => create_ty(cx, ty::node_id_to_type(cx.tcx, id),\n-                         ret_ty.span)\n+          _ => create_ty(cx, ty::node_id_to_type(cx.tcx, id), ret_ty.span)\n         }\n     } else {\n         ptr::null()\n     };\n \n     let fn_ty = unsafe {\n-        llvm::LLVMDIBuilderCreateSubroutineType(DIB(cx),\n-            file_md, create_DIArray(DIB(cx), [ret_ty_md]))\n+        llvm::LLVMDIBuilderCreateSubroutineType(\n+            DIB(cx),\n+            file_md,\n+            create_DIArray(DIB(cx), [ret_ty_md]))\n     };\n \n     let fn_md =\n@@ -308,13 +317,19 @@ pub fn create_function(fcx: fn_ctxt) -> DISubprogram {\n             llvm::LLVMDIBuilderCreateFunction(\n                 DIB(cx),\n                 file_md,\n-                name, linkage,\n-                file_md, loc.line as c_uint,\n-                fn_ty, false, true,\n+                name,\n+                linkage,\n+                file_md,\n+                loc.line as c_uint,\n+                fn_ty,\n+                false,\n+                true,\n                 loc.line as c_uint,\n                 FlagPrototyped as c_uint,\n                 cx.sess.opts.optimize != session::No,\n-                fcx.llfn, ptr::null(), ptr::null())\n+                fcx.llfn,\n+                ptr::null(),\n+                ptr::null())\n             }}};\n \n     dbg_cx(cx).created_functions.insert(id, fn_md);\n@@ -463,8 +478,11 @@ fn create_basic_type(cx: @mut CrateContext, t: ty::t, _span: span) -> DIType {\n     let (size, align) = size_and_align_of(cx, t);\n     let ty_md = do as_c_str(name) |name| { unsafe {\n             llvm::LLVMDIBuilderCreateBasicType(\n-                DIB(cx), name,\n-                size * 8 as u64, align * 8 as u64, encoding as c_uint)\n+                DIB(cx),\n+                name,\n+                bytes_to_bits(size),\n+                bytes_to_bits(align),\n+                encoding as c_uint)\n         }};\n \n     // One could think that this call is not necessary, as the create_ty() function will insert the\n@@ -478,8 +496,12 @@ fn create_pointer_type(cx: @mut CrateContext, t: ty::t, _span: span, pointee: DI\n     let (size, align) = size_and_align_of(cx, t);\n     let name = ty_to_str(cx.tcx, t);\n     let ptr_md = do as_c_str(name) |name| { unsafe {\n-        llvm::LLVMDIBuilderCreatePointerType(DIB(cx),\n-                pointee, size * 8 as u64, align * 8 as u64, name)\n+        llvm::LLVMDIBuilderCreatePointerType(\n+            DIB(cx),\n+            pointee,\n+            bytes_to_bits(size),\n+            bytes_to_bits(align),\n+            name)\n     }};\n     return ptr_md;\n }\n@@ -514,18 +536,18 @@ impl StructContext {\n \n         debug!(\"StructContext(%s)::add_member: %s, size=%u, align=%u, offset=%u\",\n                 self.name, name, size, align, offset);\n-        \n+\n         let mem_t = do as_c_str(name) |name| { unsafe {\n             llvm::LLVMDIBuilderCreateMemberType(\n-                self.builder, \n+                self.builder,\n+                self.file,\n+                name,\n                 self.file,\n-                name, \n-                self.file, \n                 line as c_uint,\n-                (size * 8) as c_ulonglong, \n-                (align * 8) as c_ulonglong, \n-                (offset * 8) as c_ulonglong,\n-                0, \n+                bytes_to_bits(size),\n+                bytes_to_bits(align),\n+                bytes_to_bits(offset),\n+                0,\n                 ty)\n             }};\n         self.members.push(mem_t);\n@@ -542,10 +564,10 @@ impl StructContext {\n         // let repr = adt::represent_type(ccx, t);\n \n         // match *repr {\n-        //     Univariant(*) => \n+        //     Univariant(*) =>\n         //     {\n         //         let size_with_alignment = self.get_total_size_with_alignment();\n-        \n+\n         //         if st.size != size_with_alignment {\n         //             ccx.sess.bug(\"StructContext(%s)::verify_against_struct_or_tuple_type: invalid type size. Expected = %u, actual = %u\",\n         //                          st.size, size_with_alignment);\n@@ -556,7 +578,7 @@ impl StructContext {\n         //                          st.align, self.align);\n         //         }\n         //     },\n-        //     _ => ccx.sess.bug(fmt!(\"StructContext(%s)::verify_against_struct_or_tuple_type: called with invalid type %?\", \n+        //     _ => ccx.sess.bug(fmt!(\"StructContext(%s)::verify_against_struct_or_tuple_type: called with invalid type %?\",\n         //                       self.name, t))\n         // }\n     //}\n@@ -567,24 +589,24 @@ impl StructContext {\n         let members_md = create_DIArray(self.builder, self.members);\n \n         // The size of the struct/tuple must be rounded to the next multiple of its alignment.\n-        // Otherwise gdb has trouble reading the struct correct when it is embedded into another \n+        // Otherwise gdb has trouble reading the struct correctly when it is embedded into another\n         // data structure. This is also the value `sizeof` in C would give.\n-        let total_size_with_alignment = self.get_total_size_with_alignment();\n+        let actual_total_size = self.get_total_size_with_alignment();\n \n         let struct_md =\n             do as_c_str(self.name) |name| { unsafe {\n                 llvm::LLVMDIBuilderCreateStructType(\n                     self.builder,\n-                    self.file, \n+                    self.file,\n                     name,\n-                    self.file, \n+                    self.file,\n                     self.line as c_uint,\n-                    (total_size_with_alignment * 8) as c_ulonglong, \n-                    (self.align * 8) as c_ulonglong,\n+                    bytes_to_bits(actual_total_size),\n+                    bytes_to_bits(self.align),\n                     0,\n                     ptr::null(),\n-                    members_md, \n-                    0, \n+                    members_md,\n+                    0,\n                     ptr::null())\n             }};\n         return struct_md;\n@@ -613,8 +635,12 @@ fn voidptr(cx: @mut CrateContext) -> (DIDerivedType, uint, uint) {\n     let size = sys::size_of::<ValueRef>();\n     let align = sys::min_align_of::<ValueRef>();\n     let vp = do as_c_str(\"*void\") |name| { unsafe {\n-            llvm::LLVMDIBuilderCreatePointerType(DIB(cx), ptr::null(),\n-                size*8 as u64, align*8 as u64, name)\n+            llvm::LLVMDIBuilderCreatePointerType(\n+                DIB(cx),\n+                ptr::null(),\n+                bytes_to_bits(size),\n+                bytes_to_bits(align),\n+                name)\n         }};\n     return (vp, size, align);\n }\n@@ -673,8 +699,12 @@ fn create_fixed_vec(cx: @mut CrateContext, _vec_t: ty::t, elem_t: ty::t,\n \n     let subscripts = create_DIArray(DIB(cx), [subrange]);\n     return unsafe {\n-        llvm::LLVMDIBuilderCreateArrayType(DIB(cx),\n-            size * len * 8 as u64, align * 8 as u64, elem_ty_md, subscripts)\n+        llvm::LLVMDIBuilderCreateArrayType(\n+            DIB(cx),\n+            bytes_to_bits(size * len),\n+            bytes_to_bits(align),\n+            elem_ty_md,\n+            subscripts)\n     };\n }\n \n@@ -688,10 +718,21 @@ fn create_boxed_vec(cx: @mut CrateContext, vec_t: ty::t, elem_t: ty::t,\n \n     let mut vec_scx = StructContext::new(cx, ty_to_str(cx.tcx, vec_t), file_md, 0);\n     let size_t_type = create_basic_type(cx, ty::mk_uint(), vec_ty_span);\n-    vec_scx.add_member(\"fill\", 0, sys::size_of::<libc::size_t>(),\n-               sys::min_align_of::<libc::size_t>(), size_t_type);\n-    vec_scx.add_member(\"alloc\", 0, sys::size_of::<libc::size_t>(),\n-               sys::min_align_of::<libc::size_t>(), size_t_type);\n+\n+    vec_scx.add_member(\n+        \"fill\",\n+        0,\n+        sys::size_of::<libc::size_t>(),\n+        sys::min_align_of::<libc::size_t>(),\n+        size_t_type);\n+\n+    vec_scx.add_member(\n+        \"alloc\",\n+        0,\n+        sys::size_of::<libc::size_t>(),\n+        sys::min_align_of::<libc::size_t>(),\n+        size_t_type);\n+\n     let subrange = unsafe {\n         llvm::LLVMDIBuilderGetOrCreateSubrange(DIB(cx), 0_i64, 0_i64)\n     };\n@@ -700,18 +741,32 @@ fn create_boxed_vec(cx: @mut CrateContext, vec_t: ty::t, elem_t: ty::t,\n \n     let subscripts = create_DIArray(DIB(cx), [subrange]);\n     let data_ptr = unsafe {\n-        llvm::LLVMDIBuilderCreateArrayType(DIB(cx),\n-            arr_size * 8 as u64, arr_align * 8 as u64, elem_ty_md, subscripts)\n+        llvm::LLVMDIBuilderCreateArrayType(\n+            DIB(cx),\n+            bytes_to_bits(arr_size),\n+            bytes_to_bits(arr_align),\n+            elem_ty_md,\n+            subscripts)\n     };\n-    vec_scx.add_member(\"data\", 0, 0, // clang says the size should be 0\n-               sys::min_align_of::<u8>(), data_ptr);\n+    vec_scx.add_member(\n+        \"data\",\n+        0,\n+        0, // clang says the size should be 0\n+        sys::min_align_of::<u8>(), data_ptr);\n+\n     let vec_md = vec_scx.finalize();\n \n     let mut box_scx = StructContext::new(cx, fmt!(\"box<%s>\", name), file_md, 0);\n     let int_t = ty::mk_int();\n     let refcount_type = create_basic_type(cx, int_t, vec_ty_span);\n-    box_scx.add_member(\"refcnt\", 0, sys::size_of::<uint>(),\n-               sys::min_align_of::<uint>(), refcount_type);\n+\n+    box_scx.add_member(\n+        \"refcnt\",\n+        0,\n+        sys::size_of::<uint>(),\n+        sys::min_align_of::<uint>(),\n+        refcount_type);\n+\n     let (vp, vpsize, vpalign) = voidptr(cx);\n     box_scx.add_member(\"tydesc\", 0, vpsize, vpalign, vp);\n     box_scx.add_member(\"prev\", 0, vpsize, vpalign, vp);\n@@ -736,8 +791,7 @@ fn create_vec_slice(cx: @mut CrateContext, vec_t: ty::t, elem_t: ty::t, span: sp\n     let mut scx = StructContext::new(cx, ty_to_str(cx.tcx, vec_t), file_md, 0);\n     let (_, ptr_size, ptr_align) = voidptr(cx);\n     scx.add_member(\"vec\", 0, ptr_size, ptr_align, elem_ptr);\n-    scx.add_member(\"length\", 0, sys::size_of::<uint>(),\n-                    sys::min_align_of::<uint>(), uint_type);\n+    scx.add_member(\"length\", 0, sys::size_of::<uint>(), sys::min_align_of::<uint>(), uint_type);\n     return scx.finalize();\n }\n \n@@ -754,7 +808,9 @@ fn create_fn_ty(cx: @mut CrateContext, _fn_ty: ty::t, inputs: ~[ty::t], output:\n     let members = ~[output_ptr_md, vp] + inputs_vals;\n \n     return unsafe {\n-        llvm::LLVMDIBuilderCreateSubroutineType(DIB(cx), file_md,\n+        llvm::LLVMDIBuilderCreateSubroutineType(\n+            DIB(cx),\n+            file_md,\n             create_DIArray(DIB(cx), members))\n     };\n }\n@@ -765,8 +821,11 @@ fn create_unimpl_ty(cx: @mut CrateContext, t: ty::t) -> DIType {\n     let name = ty_to_str(cx.tcx, t);\n     let md = do as_c_str(fmt!(\"NYI<%s>\", name)) |name| { unsafe {\n         llvm::LLVMDIBuilderCreateBasicType(\n-            DIB(cx), name,\n-            0_u64, 8_u64, DW_ATE_unsigned as c_uint)\n+            DIB(cx),\n+            name,\n+            0_u64,\n+            8_u64,\n+            DW_ATE_unsigned as c_uint)\n         }};\n     return md;\n }\n@@ -867,8 +926,10 @@ fn set_debug_location(cx: @mut CrateContext, scope: DIScope, line: uint, col: ui\n     let elems = ~[C_i32(line as i32), C_i32(col as i32), scope, ptr::null()];\n     unsafe {\n         let dbg_loc = llvm::LLVMMDNodeInContext(\n-                dbg_cx(cx).llcontext, vec::raw::to_ptr(elems),\n-                elems.len() as libc::c_uint);\n+                dbg_cx(cx).llcontext,\n+                vec::raw::to_ptr(elems),\n+                elems.len() as c_uint);\n+\n         llvm::LLVMSetCurrentDebugLocation(cx.builder.B, dbg_loc);\n     }\n }\n@@ -887,14 +948,18 @@ fn roundup(x: uint, a: uint) -> uint {\n \n /// Return codemap::Loc corresponding to the beginning of the span\n fn span_start(cx: &CrateContext, span: span) -> codemap::Loc {\n-    return cx.sess.codemap.lookup_char_pos(span.lo);\n+    cx.sess.codemap.lookup_char_pos(span.lo)\n }\n \n fn size_and_align_of(cx: @mut CrateContext, t: ty::t) -> (uint, uint) {\n     let llty = type_of::type_of(cx, t);\n     (machine::llsize_of_real(cx, llty), machine::llalign_of_min(cx, llty))\n }\n \n+fn bytes_to_bits(bytes: uint) -> c_ulonglong {\n+    (bytes * 8) as c_ulonglong\n+}\n+\n #[inline]\n fn dbg_cx<'a>(cx: &'a mut CrateContext) -> &'a mut DebugContext {\n     cx.dbg_cx.get_mut_ref()"}]}