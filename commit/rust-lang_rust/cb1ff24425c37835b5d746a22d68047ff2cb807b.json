{"sha": "cb1ff24425c37835b5d746a22d68047ff2cb807b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiMWZmMjQ0MjVjMzc4MzViNWQ3NDZhMjJkNjgwNDdmZjJjYjgwN2I=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2017-11-16T16:13:39Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2017-11-16T16:13:39Z"}, "message": "incr.comp.: Remove default serialization implementations for things in rustc::hir::def_id so that we get an ICE instead of silently doing the wrong thing.", "tree": {"sha": "991a3e76240b23158f8d68fe6d639c0d3448e782", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/991a3e76240b23158f8d68fe6d639c0d3448e782"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb1ff24425c37835b5d746a22d68047ff2cb807b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb1ff24425c37835b5d746a22d68047ff2cb807b", "html_url": "https://github.com/rust-lang/rust/commit/cb1ff24425c37835b5d746a22d68047ff2cb807b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb1ff24425c37835b5d746a22d68047ff2cb807b/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "723028f3086b4d5a8eec95962ac5728af4e271b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/723028f3086b4d5a8eec95962ac5728af4e271b4", "html_url": "https://github.com/rust-lang/rust/commit/723028f3086b4d5a8eec95962ac5728af4e271b4"}], "stats": {"total": 143, "additions": 81, "deletions": 62}, "files": [{"sha": "05d021ac6d266e13173a45aac7ebede77db8b277", "filename": "src/librustc/hir/def_id.rs", "status": "modified", "additions": 7, "deletions": 51, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/cb1ff24425c37835b5d746a22d68047ff2cb807b/src%2Flibrustc%2Fhir%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb1ff24425c37835b5d746a22d68047ff2cb807b/src%2Flibrustc%2Fhir%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef_id.rs?ref=cb1ff24425c37835b5d746a22d68047ff2cb807b", "patch": "@@ -11,8 +11,7 @@\n use ty;\n \n use rustc_data_structures::indexed_vec::Idx;\n-use serialize::{self, Encoder, Decoder, Decodable, Encodable};\n-\n+use serialize;\n use std::fmt;\n use std::u32;\n \n@@ -65,17 +64,8 @@ impl fmt::Display for CrateNum {\n     }\n }\n \n-impl serialize::UseSpecializedEncodable for CrateNum {\n-    fn default_encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n-        s.emit_u32(self.0)\n-    }\n-}\n-\n-impl serialize::UseSpecializedDecodable for CrateNum {\n-    fn default_decode<D: Decoder>(d: &mut D) -> Result<CrateNum, D::Error> {\n-        d.read_u32().map(CrateNum)\n-    }\n-}\n+impl serialize::UseSpecializedEncodable for CrateNum {}\n+impl serialize::UseSpecializedDecodable for CrateNum {}\n \n /// A DefIndex is an index into the hir-map for a crate, identifying a\n /// particular definition. It should really be considered an interned\n@@ -151,19 +141,8 @@ impl DefIndex {\n     }\n }\n \n-impl serialize::UseSpecializedEncodable for DefIndex {\n-    #[inline]\n-    fn default_encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n-        s.emit_u32(self.0)\n-    }\n-}\n-\n-impl serialize::UseSpecializedDecodable for DefIndex {\n-    #[inline]\n-    fn default_decode<D: Decoder>(d: &mut D) -> Result<DefIndex, D::Error> {\n-        d.read_u32().map(DefIndex)\n-    }\n-}\n+impl serialize::UseSpecializedEncodable for DefIndex {}\n+impl serialize::UseSpecializedDecodable for DefIndex {}\n \n #[derive(Copy, Clone, Eq, PartialEq, Hash)]\n pub enum DefIndexAddressSpace {\n@@ -225,31 +204,8 @@ impl DefId {\n     }\n }\n \n-impl serialize::UseSpecializedEncodable for DefId {\n-    #[inline]\n-    fn default_encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n-        let DefId {\n-            krate,\n-            index,\n-        } = *self;\n-\n-        krate.encode(s)?;\n-        index.encode(s)\n-    }\n-}\n-\n-impl serialize::UseSpecializedDecodable for DefId {\n-    #[inline]\n-    fn default_decode<D: Decoder>(d: &mut D) -> Result<DefId, D::Error> {\n-        let krate = CrateNum::decode(d)?;\n-        let index = DefIndex::decode(d)?;\n-\n-        Ok(DefId {\n-            krate,\n-            index\n-        })\n-    }\n-}\n+impl serialize::UseSpecializedEncodable for DefId {}\n+impl serialize::UseSpecializedDecodable for DefId {}\n \n \n #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd, Hash)]"}, {"sha": "5d7141949e389977d9a781b498d06fceb9a2ece2", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb1ff24425c37835b5d746a22d68047ff2cb807b/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb1ff24425c37835b5d746a22d68047ff2cb807b/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=cb1ff24425c37835b5d746a22d68047ff2cb807b", "patch": "@@ -24,7 +24,7 @@\n \n use hir;\n use hir::def;\n-use hir::def_id::{CrateNum, DefId, DefIndex, LOCAL_CRATE};\n+use hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n use hir::map as hir_map;\n use hir::map::definitions::{Definitions, DefKey, DefPathTable};\n use hir::svh::Svh;\n@@ -180,7 +180,7 @@ impl EncodedMetadata {\n /// upstream crate.\n #[derive(Debug, RustcEncodable, RustcDecodable, Copy, Clone)]\n pub struct EncodedMetadataHash {\n-    pub def_index: DefIndex,\n+    pub def_index: u32,\n     pub hash: ich::Fingerprint,\n }\n "}, {"sha": "b7abcc03132cba3e0f9117c369625df9c7e047be", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb1ff24425c37835b5d746a22d68047ff2cb807b/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb1ff24425c37835b5d746a22d68047ff2cb807b/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=cb1ff24425c37835b5d746a22d68047ff2cb807b", "patch": "@@ -1042,7 +1042,7 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n           \"enable incremental compilation (experimental)\"),\n     incremental_cc: bool = (false, parse_bool, [UNTRACKED],\n           \"enable cross-crate incremental compilation (even more experimental)\"),\n-    incremental_queries: bool = (false, parse_bool, [UNTRACKED],\n+    incremental_queries: bool = (true, parse_bool, [UNTRACKED],\n           \"enable incremental compilation support for queries (experimental)\"),\n     incremental_info: bool = (false, parse_bool, [UNTRACKED],\n         \"print high-level information about incremental reuse (or the lack thereof)\"),"}, {"sha": "53ca9b3851d5e928d66b365f0d8e96655de1c390", "filename": "src/librustc/ty/maps/on_disk_cache.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cb1ff24425c37835b5d746a22d68047ff2cb807b/src%2Flibrustc%2Fty%2Fmaps%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb1ff24425c37835b5d746a22d68047ff2cb807b/src%2Flibrustc%2Fty%2Fmaps%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fon_disk_cache.rs?ref=cb1ff24425c37835b5d746a22d68047ff2cb807b", "patch": "@@ -559,14 +559,25 @@ impl<'enc, 'a, 'tcx, E> CacheEncoder<'enc, 'a, 'tcx, E>\n impl<'enc, 'a, 'tcx, E> ty_codec::TyEncoder for CacheEncoder<'enc, 'a, 'tcx, E>\n     where E: 'enc + ty_codec::TyEncoder\n {\n+    #[inline]\n     fn position(&self) -> usize {\n         self.encoder.position()\n     }\n }\n \n+impl<'enc, 'a, 'tcx, E> SpecializedEncoder<CrateNum> for CacheEncoder<'enc, 'a, 'tcx, E>\n+    where E: 'enc + ty_codec::TyEncoder\n+{\n+    #[inline]\n+    fn specialized_encode(&mut self, cnum: &CrateNum) -> Result<(), Self::Error> {\n+        self.emit_u32(cnum.as_u32())\n+    }\n+}\n+\n impl<'enc, 'a, 'tcx, E> SpecializedEncoder<ty::Ty<'tcx>> for CacheEncoder<'enc, 'a, 'tcx, E>\n     where E: 'enc + ty_codec::TyEncoder\n {\n+    #[inline]\n     fn specialized_encode(&mut self, ty: &ty::Ty<'tcx>) -> Result<(), Self::Error> {\n         ty_codec::encode_with_shorthand(self, ty,\n             |encoder| &mut encoder.type_shorthands)\n@@ -577,6 +588,7 @@ impl<'enc, 'a, 'tcx, E> SpecializedEncoder<ty::GenericPredicates<'tcx>>\n     for CacheEncoder<'enc, 'a, 'tcx, E>\n     where E: 'enc + ty_codec::TyEncoder\n {\n+    #[inline]\n     fn specialized_encode(&mut self,\n                           predicates: &ty::GenericPredicates<'tcx>)\n                           -> Result<(), Self::Error> {\n@@ -588,6 +600,7 @@ impl<'enc, 'a, 'tcx, E> SpecializedEncoder<ty::GenericPredicates<'tcx>>\n impl<'enc, 'a, 'tcx, E> SpecializedEncoder<hir::HirId> for CacheEncoder<'enc, 'a, 'tcx, E>\n     where E: 'enc + ty_codec::TyEncoder\n {\n+    #[inline]\n     fn specialized_encode(&mut self, id: &hir::HirId) -> Result<(), Self::Error> {\n         let hir::HirId {\n             owner,\n@@ -605,6 +618,7 @@ impl<'enc, 'a, 'tcx, E> SpecializedEncoder<hir::HirId> for CacheEncoder<'enc, 'a\n impl<'enc, 'a, 'tcx, E> SpecializedEncoder<DefId> for CacheEncoder<'enc, 'a, 'tcx, E>\n     where E: 'enc + ty_codec::TyEncoder\n {\n+    #[inline]\n     fn specialized_encode(&mut self, id: &DefId) -> Result<(), Self::Error> {\n         let def_path_hash = self.tcx.def_path_hash(*id);\n         def_path_hash.encode(self)\n@@ -614,6 +628,7 @@ impl<'enc, 'a, 'tcx, E> SpecializedEncoder<DefId> for CacheEncoder<'enc, 'a, 'tc\n impl<'enc, 'a, 'tcx, E> SpecializedEncoder<LocalDefId> for CacheEncoder<'enc, 'a, 'tcx, E>\n     where E: 'enc + ty_codec::TyEncoder\n {\n+    #[inline]\n     fn specialized_encode(&mut self, id: &LocalDefId) -> Result<(), Self::Error> {\n         id.to_def_id().encode(self)\n     }\n@@ -632,6 +647,7 @@ impl<'enc, 'a, 'tcx, E> SpecializedEncoder<DefIndex> for CacheEncoder<'enc, 'a,\n impl<'enc, 'a, 'tcx, E> SpecializedEncoder<NodeId> for CacheEncoder<'enc, 'a, 'tcx, E>\n     where E: 'enc + ty_codec::TyEncoder\n {\n+    #[inline]\n     fn specialized_encode(&mut self, node_id: &NodeId) -> Result<(), Self::Error> {\n         let hir_id = self.tcx.hir.node_to_hir_id(*node_id);\n         hir_id.encode(self)"}, {"sha": "08f9dba2ba162663afaa2d80957290ac517ebe9b", "filename": "src/librustc_incremental/persist/data.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cb1ff24425c37835b5d746a22d68047ff2cb807b/src%2Flibrustc_incremental%2Fpersist%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb1ff24425c37835b5d746a22d68047ff2cb807b/src%2Flibrustc_incremental%2Fpersist%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fdata.rs?ref=cb1ff24425c37835b5d746a22d68047ff2cb807b", "patch": "@@ -11,7 +11,6 @@\n //! The data that we will serialize and deserialize.\n \n use rustc::dep_graph::{WorkProduct, WorkProductId};\n-use rustc::hir::def_id::DefIndex;\n use rustc::hir::map::DefPathHash;\n use rustc::middle::cstore::EncodedMetadataHash;\n use rustc_data_structures::fx::FxHashMap;\n@@ -58,5 +57,5 @@ pub struct SerializedMetadataHashes {\n     /// is only populated if -Z query-dep-graph is specified. It will be\n     /// empty otherwise. Importing crates are perfectly happy with just having\n     /// the DefIndex.\n-    pub index_map: FxHashMap<DefIndex, DefPathHash>\n+    pub index_map: FxHashMap<u32, DefPathHash>\n }"}, {"sha": "b6dabf99be7d7d7468bcae9d93eac80baf7e152a", "filename": "src/librustc_incremental/persist/save.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cb1ff24425c37835b5d746a22d68047ff2cb807b/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb1ff24425c37835b5d746a22d68047ff2cb807b/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs?ref=cb1ff24425c37835b5d746a22d68047ff2cb807b", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use rustc::dep_graph::{DepGraph, DepKind};\n-use rustc::hir::def_id::DefId;\n+use rustc::hir::def_id::{DefId, DefIndex};\n use rustc::hir::svh::Svh;\n use rustc::ich::Fingerprint;\n use rustc::middle::cstore::EncodedMetadataHashes;\n@@ -270,11 +270,11 @@ fn encode_metadata_hashes(tcx: TyCtxt,\n \n     if tcx.sess.opts.debugging_opts.query_dep_graph {\n         for serialized_hash in &serialized_hashes.entry_hashes {\n-            let def_id = DefId::local(serialized_hash.def_index);\n+            let def_id = DefId::local(DefIndex::from_u32(serialized_hash.def_index));\n \n             // Store entry in the index_map\n             let def_path_hash = tcx.def_path_hash(def_id);\n-            serialized_hashes.index_map.insert(def_id.index, def_path_hash);\n+            serialized_hashes.index_map.insert(def_id.index.as_u32(), def_path_hash);\n \n             // Record hash in current_metadata_hashes\n             current_metadata_hashes.insert(def_id, serialized_hash.hash);"}, {"sha": "0dd1b9e500c084f2e8cd730985f3dbee3ba942c3", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/cb1ff24425c37835b5d746a22d68047ff2cb807b/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb1ff24425c37835b5d746a22d68047ff2cb807b/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=cb1ff24425c37835b5d746a22d68047ff2cb807b", "patch": "@@ -246,6 +246,27 @@ impl<'a, 'tcx, T> SpecializedDecoder<LazySeq<T>> for DecodeContext<'a, 'tcx> {\n     }\n }\n \n+\n+impl<'a, 'tcx> SpecializedDecoder<DefId> for DecodeContext<'a, 'tcx> {\n+    #[inline]\n+    fn specialized_decode(&mut self) -> Result<DefId, Self::Error> {\n+        let krate = CrateNum::decode(self)?;\n+        let index = DefIndex::decode(self)?;\n+\n+        Ok(DefId {\n+            krate,\n+            index,\n+        })\n+    }\n+}\n+\n+impl<'a, 'tcx> SpecializedDecoder<DefIndex> for DecodeContext<'a, 'tcx> {\n+    #[inline]\n+    fn specialized_decode(&mut self) -> Result<DefIndex, Self::Error> {\n+        Ok(DefIndex::from_u32(self.read_u32()?))\n+    }\n+}\n+\n impl<'a, 'tcx> SpecializedDecoder<Span> for DecodeContext<'a, 'tcx> {\n     fn specialized_decode(&mut self) -> Result<Span, Self::Error> {\n         let lo = BytePos::decode(self)?;"}, {"sha": "19d0de7334650e56d35e53654cbd99896c776ee2", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 29, "deletions": 2, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/cb1ff24425c37835b5d746a22d68047ff2cb807b/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb1ff24425c37835b5d746a22d68047ff2cb807b/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=cb1ff24425c37835b5d746a22d68047ff2cb807b", "patch": "@@ -116,6 +116,33 @@ impl<'a, 'tcx, T> SpecializedEncoder<LazySeq<T>> for EncodeContext<'a, 'tcx> {\n     }\n }\n \n+impl<'a, 'tcx> SpecializedEncoder<CrateNum> for EncodeContext<'a, 'tcx> {\n+    #[inline]\n+    fn specialized_encode(&mut self, cnum: &CrateNum) -> Result<(), Self::Error> {\n+        self.emit_u32(cnum.as_u32())\n+    }\n+}\n+\n+impl<'a, 'tcx> SpecializedEncoder<DefId> for EncodeContext<'a, 'tcx> {\n+    #[inline]\n+    fn specialized_encode(&mut self, def_id: &DefId) -> Result<(), Self::Error> {\n+        let DefId {\n+            krate,\n+            index,\n+        } = *def_id;\n+\n+        krate.encode(self)?;\n+        index.encode(self)\n+    }\n+}\n+\n+impl<'a, 'tcx> SpecializedEncoder<DefIndex> for EncodeContext<'a, 'tcx> {\n+    #[inline]\n+    fn specialized_encode(&mut self, def_index: &DefIndex) -> Result<(), Self::Error> {\n+        self.emit_u32(def_index.as_u32())\n+    }\n+}\n+\n impl<'a, 'tcx> SpecializedEncoder<Ty<'tcx>> for EncodeContext<'a, 'tcx> {\n     fn specialized_encode(&mut self, ty: &Ty<'tcx>) -> Result<(), Self::Error> {\n         ty_codec::encode_with_shorthand(self, ty, |ecx| &mut ecx.type_shorthands)\n@@ -213,7 +240,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n \n         if let Some(fingerprint) = fingerprint {\n             this.metadata_hashes.hashes.push(EncodedMetadataHash {\n-                def_index,\n+                def_index: def_index.as_u32(),\n                 hash: fingerprint,\n             })\n         }\n@@ -395,7 +422,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         let total_bytes = self.position();\n \n         self.metadata_hashes.hashes.push(EncodedMetadataHash {\n-            def_index: global_metadata_def_index(GlobalMetaDataKind::Krate),\n+            def_index: global_metadata_def_index(GlobalMetaDataKind::Krate).as_u32(),\n             hash: Fingerprint::from_smaller_hash(link_meta.crate_hash.as_u64())\n         });\n "}, {"sha": "46706bba96d6d4cb3b7b3e1a1207326a69e6f75b", "filename": "src/librustc_metadata/index_builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb1ff24425c37835b5d746a22d68047ff2cb807b/src%2Flibrustc_metadata%2Findex_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb1ff24425c37835b5d746a22d68047ff2cb807b/src%2Flibrustc_metadata%2Findex_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Findex_builder.rs?ref=cb1ff24425c37835b5d746a22d68047ff2cb807b", "patch": "@@ -136,7 +136,7 @@ impl<'a, 'b, 'tcx> IndexBuilder<'a, 'b, 'tcx> {\n         let (fingerprint, ecx) = entry_builder.finish();\n         if let Some(hash) = fingerprint {\n             ecx.metadata_hashes.hashes.push(EncodedMetadataHash {\n-                def_index: id.index,\n+                def_index: id.index.as_u32(),\n                 hash,\n             });\n         }"}]}