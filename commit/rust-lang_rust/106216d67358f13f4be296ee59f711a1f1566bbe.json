{"sha": "106216d67358f13f4be296ee59f711a1f1566bbe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwNjIxNmQ2NzM1OGYxM2Y0YmUyOTZlZTU5ZjcxMWExZjE1NjZiYmU=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-05-08T23:24:24Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-05-08T23:26:35Z"}, "message": "rustc: Stop emitting zero-length arrays", "tree": {"sha": "a832685e5acc41ceec19a5de553ea2c6a3c9ecdc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a832685e5acc41ceec19a5de553ea2c6a3c9ecdc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/106216d67358f13f4be296ee59f711a1f1566bbe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/106216d67358f13f4be296ee59f711a1f1566bbe", "html_url": "https://github.com/rust-lang/rust/commit/106216d67358f13f4be296ee59f711a1f1566bbe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/106216d67358f13f4be296ee59f711a1f1566bbe/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db3b9a4992c672d53070a1c8ddb4458a8696b057", "url": "https://api.github.com/repos/rust-lang/rust/commits/db3b9a4992c672d53070a1c8ddb4458a8696b057", "html_url": "https://github.com/rust-lang/rust/commit/db3b9a4992c672d53070a1c8ddb4458a8696b057"}], "stats": {"total": 56, "additions": 42, "deletions": 14}, "files": [{"sha": "1ca4bacb4c488929691c1c29ed67e6fab4474314", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 42, "deletions": 14, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/106216d67358f13f4be296ee59f711a1f1566bbe/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/106216d67358f13f4be296ee59f711a1f1566bbe/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=106216d67358f13f4be296ee59f711a1f1566bbe", "patch": "@@ -429,6 +429,7 @@ fn T_tydesc(type_names tn) -> TypeRef {\n }\n \n fn T_array(TypeRef t, uint n) -> TypeRef {\n+    assert (n != 0u);\n     ret llvm.LLVMArrayType(t, n);\n }\n \n@@ -437,7 +438,7 @@ fn T_vec(TypeRef t) -> TypeRef {\n                      T_int(),       // Alloc\n                      T_int(),       // Fill\n                      T_int(),       // Pad\n-                     T_array(t, 0u) // Body elements\n+                     T_array(t, 1u) // Body elements\n                      ));\n }\n \n@@ -540,7 +541,14 @@ fn T_tag(type_names tn, uint size) -> TypeRef {\n     if (tn.name_has_type(s)) {\n         ret tn.get_type(s);\n     }\n-    auto t = T_struct(vec(T_int(), T_array(T_i8(), size)));\n+\n+    auto t;\n+    if (size == 0u) {\n+        t = T_struct(vec(T_int()));\n+    } else {\n+        t = T_struct(vec(T_int(), T_array(T_i8(), size)));\n+    }\n+\n     tn.associate(s, t);\n     ret t;\n }\n@@ -1592,16 +1600,28 @@ fn linearize_ty_params(@block_ctxt cx, ty.t t) ->\n }\n \n fn trans_stack_local_derived_tydesc(@block_ctxt cx, ValueRef llsz,\n-        ValueRef llalign, ValueRef llroottydesc, ValueRef llparamtydescs)\n-        -> result {\n+        ValueRef llalign, ValueRef llroottydesc,\n+        Option.t[ValueRef] llparamtydescs) -> result {\n     auto llmyroottydesc = alloca(cx, T_tydesc(cx.fcx.lcx.ccx.tn));\n \n     // By convention, desc 0 is the root descriptor.\n     llroottydesc = cx.build.Load(llroottydesc);\n     cx.build.Store(llroottydesc, llmyroottydesc);\n \n     // Store a pointer to the rest of the descriptors.\n-    auto llfirstparam = cx.build.GEP(llparamtydescs, vec(C_int(0), C_int(0)));\n+    auto llrootfirstparam = cx.build.GEP(llmyroottydesc,\n+                                         vec(C_int(0), C_int(0)));\n+\n+    auto llfirstparam;\n+    alt (llparamtydescs) {\n+        case (none[ValueRef]) {\n+            llfirstparam = C_null(val_ty(llrootfirstparam));\n+        }\n+        case (some[ValueRef](?llparamtydescs)) {\n+            llfirstparam = cx.build.GEP(llparamtydescs,\n+                                        vec(C_int(0), C_int(0)));\n+        }\n+    }\n     cx.build.Store(llfirstparam,\n                    cx.build.GEP(llmyroottydesc, vec(C_int(0), C_int(0))));\n \n@@ -1650,18 +1670,26 @@ fn mk_derived_tydesc(@block_ctxt cx, ty.t t, bool escapes) -> result {\n                              C_int((1u + n_params) as int),\n                              vp2i(bcx, tydescs)), true);\n     } else {\n-        auto llparamtydescs = alloca(cx,\n-            T_array(T_ptr(T_tydesc(cx.fcx.lcx.ccx.tn)), n_params));\n+        auto llparamtydescs_opt;\n+        if (n_params == 0u) {\n+            llparamtydescs_opt = none[ValueRef];\n+        } else {\n+            auto llparamtydescs = alloca(cx,\n+                T_array(T_ptr(T_tydesc(cx.fcx.lcx.ccx.tn)), n_params));\n \n-        auto i = 0;\n-        for (ValueRef td in tys._1) {\n-            auto tdp = cx.build.GEP(llparamtydescs, vec(C_int(0), C_int(i)));\n-            cx.build.Store(td, tdp);\n-            i += 1;\n+            auto i = 0;\n+            for (ValueRef td in tys._1) {\n+                auto tdp = cx.build.GEP(llparamtydescs,\n+                                        vec(C_int(0), C_int(i)));\n+                cx.build.Store(td, tdp);\n+                i += 1;\n+            }\n+\n+            llparamtydescs_opt = some[ValueRef](llparamtydescs);\n         }\n \n         v = trans_stack_local_derived_tydesc(bcx, sz.val, align.val, root,\n-                                             llparamtydescs);\n+                                             llparamtydescs_opt);\n     }\n \n     ret res(v.bcx, vi2p(v.bcx, v.val, T_ptr(T_tydesc(cx.fcx.lcx.ccx.tn))));\n@@ -4269,7 +4297,7 @@ fn trans_index(@block_ctxt cx, &ast.span sp, @ast.expr base,\n     auto body = next_cx.build.GEP(v, vec(C_int(0), C_int(abi.vec_elt_data)));\n     auto elt;\n     if (ty.type_has_dynamic_size(cx.fcx.lcx.ccx.tcx, unit_ty)) {\n-        body = next_cx.build.PointerCast(body, T_ptr(T_array(T_i8(), 0u)));\n+        body = next_cx.build.PointerCast(body, T_ptr(T_array(T_i8(), 1u)));\n         elt = next_cx.build.GEP(body, vec(C_int(0), scaled_ix));\n     } else {\n         elt = next_cx.build.GEP(body, vec(C_int(0), ix_val));"}]}