{"sha": "b2abe1bca187929949ad4155c34ebd0308880fa4", "node_id": "C_kwDOAAsO6NoAKGIyYWJlMWJjYTE4NzkyOTk0OWFkNDE1NWMzNGViZDAzMDg4ODBmYTQ", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-05-10T13:00:58Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-05-10T13:00:58Z"}, "message": "Move keyword expressions to expr completions module", "tree": {"sha": "71f74a6797856aaaf9325164fa1d0cebb6495db0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/71f74a6797856aaaf9325164fa1d0cebb6495db0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b2abe1bca187929949ad4155c34ebd0308880fa4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b2abe1bca187929949ad4155c34ebd0308880fa4", "html_url": "https://github.com/rust-lang/rust/commit/b2abe1bca187929949ad4155c34ebd0308880fa4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b2abe1bca187929949ad4155c34ebd0308880fa4/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "40bb8006cda3629160ab727d31ca9c13662bf848", "url": "https://api.github.com/repos/rust-lang/rust/commits/40bb8006cda3629160ab727d31ca9c13662bf848", "html_url": "https://github.com/rust-lang/rust/commit/40bb8006cda3629160ab727d31ca9c13662bf848"}], "stats": {"total": 183, "additions": 84, "deletions": 99}, "files": [{"sha": "87fae18f4cd627a3eb83756a7c90625a9ec43cdf", "filename": "crates/ide-completion/src/completions/expr.rs", "status": "modified", "additions": 69, "deletions": 9, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/b2abe1bca187929949ad4155c34ebd0308880fa4/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2abe1bca187929949ad4155c34ebd0308880fa4/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fexpr.rs?ref=b2abe1bca187929949ad4155c34ebd0308880fa4", "patch": "@@ -2,6 +2,7 @@\n \n use hir::ScopeDef;\n use ide_db::FxHashSet;\n+use syntax::T;\n \n use crate::{\n     context::{PathCompletionCtx, PathKind, PathQualifierCtx},\n@@ -14,15 +15,16 @@ pub(crate) fn complete_expr_path(acc: &mut Completions, ctx: &CompletionContext)\n         return;\n     }\n \n-    let (&is_absolute_path, qualifier) = match ctx.path_context() {\n-        Some(PathCompletionCtx {\n-            kind: PathKind::Expr { .. },\n-            is_absolute_path,\n-            qualifier,\n-            ..\n-        }) => (is_absolute_path, qualifier),\n-        _ => return,\n-    };\n+    let (is_absolute_path, qualifier, in_block_expr, in_loop_body, in_functional_update) =\n+        match ctx.path_context() {\n+            Some(&PathCompletionCtx {\n+                kind: PathKind::Expr { in_block_expr, in_loop_body, in_functional_update },\n+                is_absolute_path,\n+                ref qualifier,\n+                ..\n+            }) => (is_absolute_path, qualifier, in_block_expr, in_loop_body, in_functional_update),\n+            _ => return,\n+        };\n \n     let scope_def_applicable = |def| {\n         use hir::{GenericParam::*, ModuleDef::*};\n@@ -162,6 +164,64 @@ pub(crate) fn complete_expr_path(acc: &mut Completions, ctx: &CompletionContext)\n                     acc.add_resolution(ctx, name, def);\n                 }\n             });\n+\n+            if !in_functional_update {\n+                let mut add_keyword =\n+                    |kw, snippet| super::keyword::add_keyword(acc, ctx, kw, snippet);\n+\n+                if ctx.expects_expression() {\n+                    if !in_block_expr {\n+                        add_keyword(\"unsafe\", \"unsafe {\\n    $0\\n}\");\n+                    }\n+                    add_keyword(\"match\", \"match $1 {\\n    $0\\n}\");\n+                    add_keyword(\"while\", \"while $1 {\\n    $0\\n}\");\n+                    add_keyword(\"while let\", \"while let $1 = $2 {\\n    $0\\n}\");\n+                    add_keyword(\"loop\", \"loop {\\n    $0\\n}\");\n+                    add_keyword(\"if\", \"if $1 {\\n    $0\\n}\");\n+                    add_keyword(\"if let\", \"if let $1 = $2 {\\n    $0\\n}\");\n+                    add_keyword(\"for\", \"for $1 in $2 {\\n    $0\\n}\");\n+                    add_keyword(\"true\", \"true\");\n+                    add_keyword(\"false\", \"false\");\n+                }\n+\n+                if ctx.previous_token_is(T![if])\n+                    || ctx.previous_token_is(T![while])\n+                    || in_block_expr\n+                {\n+                    add_keyword(\"let\", \"let\");\n+                }\n+\n+                if ctx.after_if() {\n+                    add_keyword(\"else\", \"else {\\n    $0\\n}\");\n+                    add_keyword(\"else if\", \"else if $1 {\\n    $0\\n}\");\n+                }\n+\n+                if ctx.expects_ident_ref_expr() {\n+                    add_keyword(\"mut\", \"mut \");\n+                }\n+\n+                if in_loop_body {\n+                    if in_block_expr {\n+                        add_keyword(\"continue\", \"continue;\");\n+                        add_keyword(\"break\", \"break;\");\n+                    } else {\n+                        add_keyword(\"continue\", \"continue\");\n+                        add_keyword(\"break\", \"break\");\n+                    }\n+                }\n+\n+                if let Some(fn_def) = &ctx.function_def {\n+                    add_keyword(\n+                        \"return\",\n+                        match (in_block_expr, fn_def.ret_type().is_some()) {\n+                            (true, true) => \"return ;\",\n+                            (true, false) => \"return;\",\n+                            (false, true) => \"return $0\",\n+                            (false, false) => \"return\",\n+                        },\n+                    );\n+                }\n+            }\n         }\n     }\n }"}, {"sha": "0cdb8ee11907113b3332687880cced1e0b7f0194", "filename": "crates/ide-completion/src/completions/fn_param.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2abe1bca187929949ad4155c34ebd0308880fa4/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ffn_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2abe1bca187929949ad4155c34ebd0308880fa4/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ffn_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ffn_param.rs?ref=b2abe1bca187929949ad4155c34ebd0308880fa4", "patch": "@@ -13,6 +13,7 @@ use crate::{\n     CompletionContext, CompletionItem, CompletionItemKind, Completions,\n };\n \n+// FIXME: Make this a submodule of [`pattern`]\n /// Complete repeated parameters, both name and type. For example, if all\n /// functions in a file have a `spam: &mut Spam` parameter, a completion with\n /// `spam: &mut Spam` insert text/label will be suggested."}, {"sha": "14211f86baa27bdf6785eab7d3e9918cd82d9826", "filename": "crates/ide-completion/src/completions/keyword.rs", "status": "modified", "additions": 3, "deletions": 70, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/b2abe1bca187929949ad4155c34ebd0308880fa4/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fkeyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2abe1bca187929949ad4155c34ebd0308880fa4/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fkeyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fkeyword.rs?ref=b2abe1bca187929949ad4155c34ebd0308880fa4", "patch": "@@ -5,9 +5,8 @@\n use syntax::T;\n \n use crate::{\n-    context::{PathCompletionCtx, PathKind},\n-    patterns::ImmediateLocation,\n-    CompletionContext, CompletionItem, CompletionItemKind, Completions,\n+    context::PathKind, patterns::ImmediateLocation, CompletionContext, CompletionItem,\n+    CompletionItemKind, Completions,\n };\n \n pub(crate) fn complete_expr_keyword(acc: &mut Completions, ctx: &CompletionContext) {\n@@ -83,75 +82,9 @@ pub(crate) fn complete_expr_keyword(acc: &mut Completions, ctx: &CompletionConte\n         add_keyword(\"struct\", \"struct $0\");\n         add_keyword(\"union\", \"union $1 {\\n    $0\\n}\");\n     }\n-\n-    if ctx.expects_type() {\n-        return;\n-    }\n-\n-    if ctx.expects_expression() {\n-        if !has_block_expr_parent {\n-            add_keyword(\"unsafe\", \"unsafe {\\n    $0\\n}\");\n-        }\n-        add_keyword(\"match\", \"match $1 {\\n    $0\\n}\");\n-        add_keyword(\"while\", \"while $1 {\\n    $0\\n}\");\n-        add_keyword(\"while let\", \"while let $1 = $2 {\\n    $0\\n}\");\n-        add_keyword(\"loop\", \"loop {\\n    $0\\n}\");\n-        add_keyword(\"if\", \"if $1 {\\n    $0\\n}\");\n-        add_keyword(\"if let\", \"if let $1 = $2 {\\n    $0\\n}\");\n-        add_keyword(\"for\", \"for $1 in $2 {\\n    $0\\n}\");\n-        add_keyword(\"true\", \"true\");\n-        add_keyword(\"false\", \"false\");\n-    }\n-\n-    if ctx.previous_token_is(T![if]) || ctx.previous_token_is(T![while]) || has_block_expr_parent {\n-        add_keyword(\"let\", \"let\");\n-    }\n-\n-    if ctx.after_if() {\n-        add_keyword(\"else\", \"else {\\n    $0\\n}\");\n-        add_keyword(\"else if\", \"else if $1 {\\n    $0\\n}\");\n-    }\n-\n-    if ctx.expects_ident_ref_expr() {\n-        add_keyword(\"mut\", \"mut \");\n-    }\n-\n-    let (can_be_stmt, in_loop_body) = match ctx.path_context() {\n-        Some(&PathCompletionCtx {\n-            is_absolute_path: false,\n-            kind: PathKind::Expr { in_block_expr, in_loop_body, .. },\n-            ..\n-        }) => (in_block_expr, in_loop_body),\n-        _ => return,\n-    };\n-\n-    if in_loop_body {\n-        if can_be_stmt {\n-            add_keyword(\"continue\", \"continue;\");\n-            add_keyword(\"break\", \"break;\");\n-        } else {\n-            add_keyword(\"continue\", \"continue\");\n-            add_keyword(\"break\", \"break\");\n-        }\n-    }\n-\n-    let fn_def = match &ctx.function_def {\n-        Some(it) => it,\n-        None => return,\n-    };\n-\n-    add_keyword(\n-        \"return\",\n-        match (can_be_stmt, fn_def.ret_type().is_some()) {\n-            (true, true) => \"return $0;\",\n-            (true, false) => \"return;\",\n-            (false, true) => \"return $0\",\n-            (false, false) => \"return\",\n-        },\n-    )\n }\n \n-fn add_keyword(acc: &mut Completions, ctx: &CompletionContext, kw: &str, snippet: &str) {\n+pub(super) fn add_keyword(acc: &mut Completions, ctx: &CompletionContext, kw: &str, snippet: &str) {\n     let mut item = CompletionItem::new(CompletionItemKind::Keyword, ctx.source_range(), kw);\n \n     match ctx.config.snippet_cap {"}, {"sha": "61c5d12649398d310d2dbe09e7256ea467256fe6", "filename": "crates/ide-completion/src/completions/trait_impl.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2abe1bca187929949ad4155c34ebd0308880fa4/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ftrait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2abe1bca187929949ad4155c34ebd0308880fa4/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ftrait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ftrait_impl.rs?ref=b2abe1bca187929949ad4155c34ebd0308880fa4", "patch": "@@ -52,6 +52,7 @@ enum ImplCompletionKind {\n     Const,\n }\n \n+// FIXME: Make this a submodule of [`item_list`]\n pub(crate) fn complete_trait_impl(acc: &mut Completions, ctx: &CompletionContext) {\n     if let Some((kind, replacement_range, impl_def)) = completion_match(ctx) {\n         if let Some(hir_impl) = ctx.sema.to_def(&impl_def) {"}, {"sha": "d538f1879e74e12ba3d12e2e9d92ee8b2679a14a", "filename": "crates/ide-completion/src/completions/vis.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2abe1bca187929949ad4155c34ebd0308880fa4/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fvis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2abe1bca187929949ad4155c34ebd0308880fa4/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fvis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fvis.rs?ref=b2abe1bca187929949ad4155c34ebd0308880fa4", "patch": "@@ -7,7 +7,7 @@ use crate::{\n     Completions,\n };\n \n-pub(crate) fn complete_vis(acc: &mut Completions, ctx: &CompletionContext) {\n+pub(crate) fn complete_vis_path(acc: &mut Completions, ctx: &CompletionContext) {\n     let (&is_absolute_path, qualifier, &has_in_token) = match ctx.path_context() {\n         Some(PathCompletionCtx {\n             kind: PathKind::Vis { has_in_token },"}, {"sha": "4a058ac2619a5ce747fd9f1cf575dfa7182dde1e", "filename": "crates/ide-completion/src/context.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b2abe1bca187929949ad4155c34ebd0308880fa4/crates%2Fide-completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2abe1bca187929949ad4155c34ebd0308880fa4/crates%2Fide-completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcontext.rs?ref=b2abe1bca187929949ad4155c34ebd0308880fa4", "patch": "@@ -48,6 +48,7 @@ pub(super) enum PathKind {\n     Expr {\n         in_block_expr: bool,\n         in_loop_body: bool,\n+        in_functional_update: bool,\n     },\n     Type,\n     Attr {\n@@ -392,10 +393,6 @@ impl<'a> CompletionContext<'a> {\n         matches!(self.path_context(), Some(PathCompletionCtx { kind: PathKind::Expr { .. }, .. }))\n     }\n \n-    pub(crate) fn expects_type(&self) -> bool {\n-        matches!(self.path_context(), Some(PathCompletionCtx { kind: PathKind::Type, .. }))\n-    }\n-\n     pub(crate) fn is_non_trivial_path(&self) -> bool {\n         matches!(\n             self.path_context(),\n@@ -1104,6 +1101,9 @@ impl<'a> CompletionContext<'a> {\n                 })\n                 .unwrap_or(false)\n         };\n+        let is_in_func_update = |it: &SyntaxNode| {\n+            it.parent().map_or(false, |it| ast::RecordExprFieldList::can_cast(it.kind()))\n+        };\n \n         let kind = path.syntax().ancestors().find_map(|it| {\n             // using Option<Option<PathKind>> as extra controlflow\n@@ -1114,8 +1114,8 @@ impl<'a> CompletionContext<'a> {\n                         path_ctx.has_call_parens = it.syntax().parent().map_or(false, |it| ast::CallExpr::can_cast(it.kind()));\n                         let in_block_expr = is_in_block(it.syntax());\n                         let in_loop_body = is_in_loop_body(it.syntax());\n-\n-                        Some(PathKind::Expr { in_block_expr, in_loop_body })\n+                        let in_functional_update = is_in_func_update(it.syntax());\n+                        Some(PathKind::Expr { in_block_expr, in_loop_body, in_functional_update })\n                     },\n                     ast::TupleStructPat(it) => {\n                         path_ctx.has_call_parens = true;\n@@ -1149,7 +1149,8 @@ impl<'a> CompletionContext<'a> {\n                                return Some(parent.and_then(ast::MacroExpr::cast).map(|it| {\n                                     let in_loop_body = is_in_loop_body(it.syntax());\n                                     let in_block_expr = is_in_block(it.syntax());\n-                                    PathKind::Expr { in_block_expr, in_loop_body }\n+                                    let in_functional_update = is_in_func_update(it.syntax());\n+                                    PathKind::Expr { in_block_expr, in_loop_body, in_functional_update }\n                                 }));\n                             },\n                         }"}, {"sha": "7789c967070a6a8bf40eb9189c551f8920d90fad", "filename": "crates/ide-completion/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2abe1bca187929949ad4155c34ebd0308880fa4/crates%2Fide-completion%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2abe1bca187929949ad4155c34ebd0308880fa4/crates%2Fide-completion%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Flib.rs?ref=b2abe1bca187929949ad4155c34ebd0308880fa4", "patch": "@@ -173,7 +173,7 @@ pub fn completions(\n         completions::r#type::complete_type_path(acc, ctx);\n         completions::r#type::complete_inferred_type(acc, ctx);\n         completions::use_::complete_use_tree(acc, ctx);\n-        completions::vis::complete_vis(acc, ctx);\n+        completions::vis::complete_vis_path(acc, ctx);\n     }\n \n     Some(acc)"}, {"sha": "2c49761748408c7619311797006acb6779597461", "filename": "crates/ide-completion/src/tests/record.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b2abe1bca187929949ad4155c34ebd0308880fa4/crates%2Fide-completion%2Fsrc%2Ftests%2Frecord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2abe1bca187929949ad4155c34ebd0308880fa4/crates%2Fide-completion%2Fsrc%2Ftests%2Frecord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Ftests%2Frecord.rs?ref=b2abe1bca187929949ad4155c34ebd0308880fa4", "patch": "@@ -168,19 +168,8 @@ fn main() {\n             tt Sized\n             bt u32\n             kw crate::\n-            kw false\n-            kw for\n-            kw if\n-            kw if let\n-            kw loop\n-            kw match\n-            kw return\n             kw self::\n             kw super::\n-            kw true\n-            kw unsafe\n-            kw while\n-            kw while let\n         \"#]],\n     );\n     check("}]}