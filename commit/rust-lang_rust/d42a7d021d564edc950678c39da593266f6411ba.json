{"sha": "d42a7d021d564edc950678c39da593266f6411ba", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0MmE3ZDAyMWQ1NjRlZGM5NTA2NzhjMzlkYTU5MzI2NmY2NDExYmE=", "commit": {"author": {"name": "Oliver 'ker' Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-11-11T12:10:47Z"}, "committer": {"name": "Oliver 'ker' Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-11-11T12:10:47Z"}, "message": "fix null optimizations for smaller than pointer enums\n\nfixes #76", "tree": {"sha": "de0a0071c91996b69099a62f3010db632849a728", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de0a0071c91996b69099a62f3010db632849a728"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d42a7d021d564edc950678c39da593266f6411ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d42a7d021d564edc950678c39da593266f6411ba", "html_url": "https://github.com/rust-lang/rust/commit/d42a7d021d564edc950678c39da593266f6411ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d42a7d021d564edc950678c39da593266f6411ba/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c40fb0da1dcdb8fd7445589c66b5a755a36ab3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c40fb0da1dcdb8fd7445589c66b5a755a36ab3b", "html_url": "https://github.com/rust-lang/rust/commit/1c40fb0da1dcdb8fd7445589c66b5a755a36ab3b"}], "stats": {"total": 49, "additions": 32, "deletions": 17}, "files": [{"sha": "bd99d9f86f4299650388f5ffc4a62f9e149a392c", "filename": "src/interpreter/mod.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d42a7d021d564edc950678c39da593266f6411ba/src%2Finterpreter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d42a7d021d564edc950678c39da593266f6411ba/src%2Finterpreter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fmod.rs?ref=d42a7d021d564edc950678c39da593266f6411ba", "patch": "@@ -203,10 +203,6 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         PrimVal::from_uint_with_size(n, self.memory.pointer_size())\n     }\n \n-    fn isize_primval(&self, n: i64) -> PrimVal {\n-        PrimVal::from_int_with_size(n, self.memory.pointer_size())\n-    }\n-\n     fn str_to_value(&mut self, s: &str) -> EvalResult<'tcx, Value> {\n         // FIXME: cache these allocs\n         let ptr = self.memory.allocate(s.len(), 1)?;\n@@ -523,7 +519,8 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                                 self.write_value(value, dest, value_ty)?;\n                             } else {\n                                 assert_eq!(operands.len(), 0);\n-                                let zero = self.isize_primval(0);\n+                                let value_size = self.type_size(dest_ty).expect(\"pointer types are sized\");\n+                                let zero = PrimVal::from_int_with_size(0, value_size);\n                                 self.write_primval(dest, zero)?;\n                             }\n                         } else {\n@@ -541,13 +538,14 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                                     let operand_ty = self.operand_ty(operand);\n                                     assert_eq!(self.type_size(operand_ty), Some(0));\n                                 }\n-                                let offset = self.nonnull_offset(dest_ty, nndiscr, discrfield)?;\n+                                let (offset, ty) = self.nonnull_offset_and_ty(dest_ty, nndiscr, discrfield)?;\n \n                                 // FIXME(solson)\n                                 let dest = self.force_allocation(dest)?.to_ptr();\n \n                                 let dest = dest.offset(offset.bytes() as isize);\n-                                try!(self.memory.write_isize(dest, 0));\n+                                let dest_size = self.type_size(ty).unwrap_or(self.memory.pointer_size());\n+                                try!(self.memory.write_int(dest, 0, dest_size));\n                             }\n                         } else {\n                             bug!(\"tried to assign {:?} to Layout::RawNullablePointer\", kind);\n@@ -694,7 +692,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         }\n     }\n \n-    fn nonnull_offset(&self, ty: Ty<'tcx>, nndiscr: u64, discrfield: &[u32]) -> EvalResult<'tcx, Size> {\n+    fn nonnull_offset_and_ty(&self, ty: Ty<'tcx>, nndiscr: u64, discrfield: &[u32]) -> EvalResult<'tcx, (Size, Ty<'tcx>)> {\n         // Skip the constant 0 at the start meant for LLVM GEP.\n         let mut path = discrfield.iter().skip(1).map(|&i| i as usize);\n \n@@ -709,10 +707,10 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             _ => bug!(\"non-enum for StructWrappedNullablePointer: {}\", ty),\n         };\n \n-        self.field_path_offset(inner_ty, path)\n+        self.field_path_offset_and_ty(inner_ty, path)\n     }\n \n-    fn field_path_offset<I: Iterator<Item = usize>>(&self, mut ty: Ty<'tcx>, path: I) -> EvalResult<'tcx, Size> {\n+    fn field_path_offset_and_ty<I: Iterator<Item = usize>>(&self, mut ty: Ty<'tcx>, path: I) -> EvalResult<'tcx, (Size, Ty<'tcx>)> {\n         let mut offset = Size::from_bytes(0);\n \n         // Skip the initial 0 intended for LLVM GEP.\n@@ -722,7 +720,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             offset = offset.checked_add(field_offset, &self.tcx.data_layout).unwrap();\n         }\n \n-        Ok(offset)\n+        Ok((offset, ty))\n     }\n \n     fn get_field_ty(&self, ty: Ty<'tcx>, field_index: usize) -> EvalResult<'tcx, Ty<'tcx>> {"}, {"sha": "afbcf3d0e5a10eb6fb4cb9d4f582b0f7f4e9f9a4", "filename": "src/interpreter/terminator/mod.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d42a7d021d564edc950678c39da593266f6411ba/src%2Finterpreter%2Fterminator%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d42a7d021d564edc950678c39da593266f6411ba/src%2Finterpreter%2Fterminator%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fterminator%2Fmod.rs?ref=d42a7d021d564edc950678c39da593266f6411ba", "patch": "@@ -263,14 +263,17 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 self.memory.read_int(adt_ptr, discr_size as usize)? as u64\n             }\n \n-            RawNullablePointer { nndiscr, .. } => {\n-                self.read_nonnull_discriminant_value(adt_ptr, nndiscr)?\n+            RawNullablePointer { nndiscr, value } => {\n+                let discr_size = value.size(&self.tcx.data_layout).bytes() as usize;\n+                self.read_nonnull_discriminant_value(adt_ptr, nndiscr, discr_size)?\n             }\n \n             StructWrappedNullablePointer { nndiscr, ref discrfield, .. } => {\n-                let offset = self.nonnull_offset(adt_ty, nndiscr, discrfield)?;\n+                let (offset, ty) = self.nonnull_offset_and_ty(adt_ty, nndiscr, discrfield)?;\n                 let nonnull = adt_ptr.offset(offset.bytes() as isize);\n-                self.read_nonnull_discriminant_value(nonnull, nndiscr)?\n+                // only the pointer part of a fat pointer is used for this space optimization\n+                let discr_size = self.type_size(ty).unwrap_or(self.memory.pointer_size());\n+                self.read_nonnull_discriminant_value(nonnull, nndiscr, discr_size)?\n             }\n \n             // The discriminant_value intrinsic returns 0 for non-sum types.\n@@ -281,8 +284,8 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         Ok(discr_val)\n     }\n \n-    fn read_nonnull_discriminant_value(&self, ptr: Pointer, nndiscr: u64) -> EvalResult<'tcx, u64> {\n-        let not_null = match self.memory.read_usize(ptr) {\n+    fn read_nonnull_discriminant_value(&self, ptr: Pointer, nndiscr: u64, discr_size: usize) -> EvalResult<'tcx, u64> {\n+        let not_null = match self.memory.read_uint(ptr, discr_size) {\n             Ok(0) => false,\n             Ok(_) | Err(EvalError::ReadPointerAsBytes) => true,\n             Err(e) => return Err(e),"}, {"sha": "7576a97e36adf5715992b29a18b23754328654ee", "filename": "tests/run-pass/small_enum_size_bug.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d42a7d021d564edc950678c39da593266f6411ba/tests%2Frun-pass%2Fsmall_enum_size_bug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d42a7d021d564edc950678c39da593266f6411ba/tests%2Frun-pass%2Fsmall_enum_size_bug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fsmall_enum_size_bug.rs?ref=d42a7d021d564edc950678c39da593266f6411ba", "patch": "@@ -0,0 +1,14 @@\n+#![allow(dead_code)]\n+\n+enum E {\n+    A = 1,\n+    B = 2,\n+    C = 3,\n+}\n+\n+fn main() {\n+    let enone = None::<E>;\n+    if let Some(..) = enone {\n+        panic!();\n+    }\n+}"}]}