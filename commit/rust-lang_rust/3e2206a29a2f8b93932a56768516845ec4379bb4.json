{"sha": "3e2206a29a2f8b93932a56768516845ec4379bb4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlMjIwNmEyOWEyZjhiOTM5MzJhNTY3Njg1MTY4NDVlYzQzNzliYjQ=", "commit": {"author": {"name": "Michael Hall", "email": "michael@mbh.sh", "date": "2021-05-11T00:29:57Z"}, "committer": {"name": "Michael Hall", "email": "michael@mbh.sh", "date": "2021-05-11T00:29:57Z"}, "message": "add file_prefix method", "tree": {"sha": "8c1f5ac2da74c71c58ce25a4d48b6e8d37c63aad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c1f5ac2da74c71c58ce25a4d48b6e8d37c63aad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e2206a29a2f8b93932a56768516845ec4379bb4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e2206a29a2f8b93932a56768516845ec4379bb4", "html_url": "https://github.com/rust-lang/rust/commit/3e2206a29a2f8b93932a56768516845ec4379bb4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e2206a29a2f8b93932a56768516845ec4379bb4/comments", "author": {"login": "mbhall88", "id": 20403931, "node_id": "MDQ6VXNlcjIwNDAzOTMx", "avatar_url": "https://avatars.githubusercontent.com/u/20403931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mbhall88", "html_url": "https://github.com/mbhall88", "followers_url": "https://api.github.com/users/mbhall88/followers", "following_url": "https://api.github.com/users/mbhall88/following{/other_user}", "gists_url": "https://api.github.com/users/mbhall88/gists{/gist_id}", "starred_url": "https://api.github.com/users/mbhall88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mbhall88/subscriptions", "organizations_url": "https://api.github.com/users/mbhall88/orgs", "repos_url": "https://api.github.com/users/mbhall88/repos", "events_url": "https://api.github.com/users/mbhall88/events{/privacy}", "received_events_url": "https://api.github.com/users/mbhall88/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mbhall88", "id": 20403931, "node_id": "MDQ6VXNlcjIwNDAzOTMx", "avatar_url": "https://avatars.githubusercontent.com/u/20403931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mbhall88", "html_url": "https://github.com/mbhall88", "followers_url": "https://api.github.com/users/mbhall88/followers", "following_url": "https://api.github.com/users/mbhall88/following{/other_user}", "gists_url": "https://api.github.com/users/mbhall88/gists{/gist_id}", "starred_url": "https://api.github.com/users/mbhall88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mbhall88/subscriptions", "organizations_url": "https://api.github.com/users/mbhall88/orgs", "repos_url": "https://api.github.com/users/mbhall88/repos", "events_url": "https://api.github.com/users/mbhall88/events{/privacy}", "received_events_url": "https://api.github.com/users/mbhall88/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d29289c509c60c52b16277b0cce5abfc5cf06985", "url": "https://api.github.com/repos/rust-lang/rust/commits/d29289c509c60c52b16277b0cce5abfc5cf06985", "html_url": "https://github.com/rust-lang/rust/commit/d29289c509c60c52b16277b0cce5abfc5cf06985"}], "stats": {"total": 227, "additions": 191, "deletions": 36}, "files": [{"sha": "cec8010fe24bea8f5e35478f2b00c86174bfee89", "filename": "library/std/src/path.rs", "status": "modified", "additions": 51, "deletions": 2, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/3e2206a29a2f8b93932a56768516845ec4379bb4/library%2Fstd%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e2206a29a2f8b93932a56768516845ec4379bb4/library%2Fstd%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpath.rs?ref=3e2206a29a2f8b93932a56768516845ec4379bb4", "patch": "@@ -315,7 +315,7 @@ fn has_physical_root(s: &[u8], prefix: Option<Prefix<'_>>) -> bool {\n }\n \n // basic workhorse for splitting stem and extension\n-fn split_file_at_dot(file: &OsStr) -> (Option<&OsStr>, Option<&OsStr>) {\n+fn rsplit_file_at_dot(file: &OsStr) -> (Option<&OsStr>, Option<&OsStr>) {\n     if os_str_as_u8_slice(file) == b\"..\" {\n         return (Some(file), None);\n     }\n@@ -334,6 +334,29 @@ fn split_file_at_dot(file: &OsStr) -> (Option<&OsStr>, Option<&OsStr>) {\n     }\n }\n \n+fn split_file_at_dot(file: &OsStr) -> (Option<&OsStr>, Option<&OsStr>) {\n+    let slice = os_str_as_u8_slice(file);\n+    if slice == b\"..\" {\n+        return (Some(file), None);\n+    }\n+\n+    // The unsafety here stems from converting between &OsStr and &[u8]\n+    // and back. This is safe to do because (1) we only look at ASCII\n+    // contents of the encoding and (2) new &OsStr values are produced\n+    // only from ASCII-bounded slices of existing &OsStr values.\n+    let i = match slice[1..].iter().position(|b| *b == b'.') {\n+        Some(i) => i + 1,\n+        None => slice.len(),\n+    };\n+    if i == slice.len() {\n+        (Some(file), None)\n+    } else {\n+        let before = Some(&slice[..i]);\n+        let after = Some(&slice[i + 1..]);\n+        unsafe { (before.map(|s| u8_slice_as_os_str(s)), after.map(|s| u8_slice_as_os_str(s))) }\n+    }\n+}\n+\n ////////////////////////////////////////////////////////////////////////////////\n // The core iterators\n ////////////////////////////////////////////////////////////////////////////////\n@@ -2158,6 +2181,32 @@ impl Path {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn file_stem(&self) -> Option<&OsStr> {\n+        self.file_name().map(rsplit_file_at_dot).and_then(|(before, after)| before.or(after))\n+    }\n+\n+    /// Extracts the prefix (non-extension(s)) portion of [`self.file_name`]. This is a \"left\"\n+    /// variant of `file_stem` - meaning it takes the portion of the file name before the *first* `.`\n+    ///\n+    /// [`self.file_name`]: Path::file_name\n+    ///\n+    /// The prefix is:\n+    ///\n+    /// * [`None`], if there is no file name;\n+    /// * The entire file name if there is no embedded `.`;\n+    /// * The entire file name if the file name begins with `.` and has no other `.`s within;\n+    /// * Otherwise, the portion of the file name before the first `.`\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// # #![feature(path_file_prefix)]\n+    /// use std::path::Path;\n+    ///\n+    /// assert_eq!(\"foo\", Path::new(\"foo.rs\").file_prefix().unwrap());\n+    /// assert_eq!(\"foo\", Path::new(\"foo.tar.gz\").file_prefix().unwrap());\n+    /// ```\n+    #[unstable(feature = \"path_file_prefix\", issue = \"none\")]\n+    pub fn file_prefix(&self) -> Option<&OsStr> {\n         self.file_name().map(split_file_at_dot).and_then(|(before, after)| before.or(after))\n     }\n \n@@ -2182,7 +2231,7 @@ impl Path {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn extension(&self) -> Option<&OsStr> {\n-        self.file_name().map(split_file_at_dot).and_then(|(before, after)| before.and(after))\n+        self.file_name().map(rsplit_file_at_dot).and_then(|(before, after)| before.and(after))\n     }\n \n     /// Creates an owned [`PathBuf`] with `path` adjoined to `self`."}, {"sha": "14dcab450acbe6bca9126655627d1a62735a8d01", "filename": "library/std/src/path/tests.rs", "status": "modified", "additions": 140, "deletions": 34, "changes": 174, "blob_url": "https://github.com/rust-lang/rust/blob/3e2206a29a2f8b93932a56768516845ec4379bb4/library%2Fstd%2Fsrc%2Fpath%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e2206a29a2f8b93932a56768516845ec4379bb4/library%2Fstd%2Fsrc%2Fpath%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpath%2Ftests.rs?ref=3e2206a29a2f8b93932a56768516845ec4379bb4", "patch": "@@ -3,7 +3,7 @@ use super::*;\n use crate::rc::Rc;\n use crate::sync::Arc;\n \n-macro_rules! t(\n+macro_rules! t (\n     ($path:expr, iter: $iter:expr) => (\n         {\n             let path = Path::new($path);\n@@ -73,15 +73,33 @@ macro_rules! t(\n         }\n     );\n \n+    ($path:expr, file_prefix: $file_prefix:expr, extension: $extension:expr) => (\n+        {\n+            let path = Path::new($path);\n+\n+            let prefix = path.file_prefix().map(|p| p.to_str().unwrap());\n+            let exp_prefix: Option<&str> = $file_prefix;\n+            assert!(prefix == exp_prefix, \"file_prefix: Expected {:?}, found {:?}\",\n+                    exp_prefix, prefix);\n+\n+            let ext = path.extension().map(|p| p.to_str().unwrap());\n+            let exp_ext: Option<&str> = $extension;\n+            assert!(ext == exp_ext, \"extension: Expected {:?}, found {:?}\",\n+                    exp_ext, ext);\n+        }\n+    );\n+\n     ($path:expr, iter: $iter:expr,\n                  has_root: $has_root:expr, is_absolute: $is_absolute:expr,\n                  parent: $parent:expr, file_name: $file:expr,\n-                 file_stem: $file_stem:expr, extension: $extension:expr) => (\n+                 file_stem: $file_stem:expr, extension: $extension:expr,\n+                 file_prefix: $file_prefix:expr) => (\n         {\n             t!($path, iter: $iter);\n             t!($path, has_root: $has_root, is_absolute: $is_absolute);\n             t!($path, parent: $parent, file_name: $file);\n             t!($path, file_stem: $file_stem, extension: $extension);\n+            t!($path, file_prefix: $file_prefix, extension: $extension);\n         }\n     );\n );\n@@ -116,7 +134,8 @@ pub fn test_decompositions_unix() {\n     parent: None,\n     file_name: None,\n     file_stem: None,\n-    extension: None\n+    extension: None,\n+    file_prefix: None\n     );\n \n     t!(\"foo\",\n@@ -126,7 +145,8 @@ pub fn test_decompositions_unix() {\n     parent: Some(\"\"),\n     file_name: Some(\"foo\"),\n     file_stem: Some(\"foo\"),\n-    extension: None\n+    extension: None,\n+    file_prefix: Some(\"foo\")\n     );\n \n     t!(\"/\",\n@@ -136,7 +156,8 @@ pub fn test_decompositions_unix() {\n     parent: None,\n     file_name: None,\n     file_stem: None,\n-    extension: None\n+    extension: None,\n+    file_prefix: None\n     );\n \n     t!(\"/foo\",\n@@ -146,7 +167,8 @@ pub fn test_decompositions_unix() {\n     parent: Some(\"/\"),\n     file_name: Some(\"foo\"),\n     file_stem: Some(\"foo\"),\n-    extension: None\n+    extension: None,\n+    file_prefix: Some(\"foo\")\n     );\n \n     t!(\"foo/\",\n@@ -156,7 +178,8 @@ pub fn test_decompositions_unix() {\n     parent: Some(\"\"),\n     file_name: Some(\"foo\"),\n     file_stem: Some(\"foo\"),\n-    extension: None\n+    extension: None,\n+    file_prefix: Some(\"foo\")\n     );\n \n     t!(\"/foo/\",\n@@ -166,7 +189,8 @@ pub fn test_decompositions_unix() {\n     parent: Some(\"/\"),\n     file_name: Some(\"foo\"),\n     file_stem: Some(\"foo\"),\n-    extension: None\n+    extension: None,\n+    file_prefix: Some(\"foo\")\n     );\n \n     t!(\"foo/bar\",\n@@ -176,7 +200,8 @@ pub fn test_decompositions_unix() {\n     parent: Some(\"foo\"),\n     file_name: Some(\"bar\"),\n     file_stem: Some(\"bar\"),\n-    extension: None\n+    extension: None,\n+    file_prefix: Some(\"bar\")\n     );\n \n     t!(\"/foo/bar\",\n@@ -186,7 +211,8 @@ pub fn test_decompositions_unix() {\n     parent: Some(\"/foo\"),\n     file_name: Some(\"bar\"),\n     file_stem: Some(\"bar\"),\n-    extension: None\n+    extension: None,\n+    file_prefix: Some(\"bar\")\n     );\n \n     t!(\"///foo///\",\n@@ -196,7 +222,8 @@ pub fn test_decompositions_unix() {\n     parent: Some(\"/\"),\n     file_name: Some(\"foo\"),\n     file_stem: Some(\"foo\"),\n-    extension: None\n+    extension: None,\n+    file_prefix: Some(\"foo\")\n     );\n \n     t!(\"///foo///bar\",\n@@ -206,7 +233,8 @@ pub fn test_decompositions_unix() {\n     parent: Some(\"///foo\"),\n     file_name: Some(\"bar\"),\n     file_stem: Some(\"bar\"),\n-    extension: None\n+    extension: None,\n+    file_prefix: Some(\"bar\")\n     );\n \n     t!(\"./.\",\n@@ -216,7 +244,8 @@ pub fn test_decompositions_unix() {\n     parent: Some(\"\"),\n     file_name: None,\n     file_stem: None,\n-    extension: None\n+    extension: None,\n+    file_prefix: None\n     );\n \n     t!(\"/..\",\n@@ -226,7 +255,8 @@ pub fn test_decompositions_unix() {\n     parent: Some(\"/\"),\n     file_name: None,\n     file_stem: None,\n-    extension: None\n+    extension: None,\n+    file_prefix: None\n     );\n \n     t!(\"../\",\n@@ -236,7 +266,8 @@ pub fn test_decompositions_unix() {\n     parent: Some(\"\"),\n     file_name: None,\n     file_stem: None,\n-    extension: None\n+    extension: None,\n+    file_prefix: None\n     );\n \n     t!(\"foo/.\",\n@@ -246,7 +277,8 @@ pub fn test_decompositions_unix() {\n     parent: Some(\"\"),\n     file_name: Some(\"foo\"),\n     file_stem: Some(\"foo\"),\n-    extension: None\n+    extension: None,\n+    file_prefix: Some(\"foo\")\n     );\n \n     t!(\"foo/..\",\n@@ -256,7 +288,8 @@ pub fn test_decompositions_unix() {\n     parent: Some(\"foo\"),\n     file_name: None,\n     file_stem: None,\n-    extension: None\n+    extension: None,\n+    file_prefix: None\n     );\n \n     t!(\"foo/./\",\n@@ -266,7 +299,8 @@ pub fn test_decompositions_unix() {\n     parent: Some(\"\"),\n     file_name: Some(\"foo\"),\n     file_stem: Some(\"foo\"),\n-    extension: None\n+    extension: None,\n+    file_prefix: Some(\"foo\")\n     );\n \n     t!(\"foo/./bar\",\n@@ -276,7 +310,8 @@ pub fn test_decompositions_unix() {\n     parent: Some(\"foo\"),\n     file_name: Some(\"bar\"),\n     file_stem: Some(\"bar\"),\n-    extension: None\n+    extension: None,\n+    file_prefix: Some(\"bar\")\n     );\n \n     t!(\"foo/../\",\n@@ -286,7 +321,8 @@ pub fn test_decompositions_unix() {\n     parent: Some(\"foo\"),\n     file_name: None,\n     file_stem: None,\n-    extension: None\n+    extension: None,\n+    file_prefix: None\n     );\n \n     t!(\"foo/../bar\",\n@@ -296,7 +332,8 @@ pub fn test_decompositions_unix() {\n     parent: Some(\"foo/..\"),\n     file_name: Some(\"bar\"),\n     file_stem: Some(\"bar\"),\n-    extension: None\n+    extension: None,\n+    file_prefix: Some(\"bar\")\n     );\n \n     t!(\"./a\",\n@@ -306,7 +343,8 @@ pub fn test_decompositions_unix() {\n     parent: Some(\".\"),\n     file_name: Some(\"a\"),\n     file_stem: Some(\"a\"),\n-    extension: None\n+    extension: None,\n+    file_prefix: Some(\"a\")\n     );\n \n     t!(\".\",\n@@ -316,7 +354,8 @@ pub fn test_decompositions_unix() {\n     parent: Some(\"\"),\n     file_name: None,\n     file_stem: None,\n-    extension: None\n+    extension: None,\n+    file_prefix: None\n     );\n \n     t!(\"./\",\n@@ -326,7 +365,8 @@ pub fn test_decompositions_unix() {\n     parent: Some(\"\"),\n     file_name: None,\n     file_stem: None,\n-    extension: None\n+    extension: None,\n+    file_prefix: None\n     );\n \n     t!(\"a/b\",\n@@ -336,7 +376,8 @@ pub fn test_decompositions_unix() {\n     parent: Some(\"a\"),\n     file_name: Some(\"b\"),\n     file_stem: Some(\"b\"),\n-    extension: None\n+    extension: None,\n+    file_prefix: Some(\"b\")\n     );\n \n     t!(\"a//b\",\n@@ -346,7 +387,8 @@ pub fn test_decompositions_unix() {\n     parent: Some(\"a\"),\n     file_name: Some(\"b\"),\n     file_stem: Some(\"b\"),\n-    extension: None\n+    extension: None,\n+    file_prefix: Some(\"b\")\n     );\n \n     t!(\"a/./b\",\n@@ -356,7 +398,8 @@ pub fn test_decompositions_unix() {\n     parent: Some(\"a\"),\n     file_name: Some(\"b\"),\n     file_stem: Some(\"b\"),\n-    extension: None\n+    extension: None,\n+    file_prefix: Some(\"b\")\n     );\n \n     t!(\"a/b/c\",\n@@ -366,7 +409,8 @@ pub fn test_decompositions_unix() {\n     parent: Some(\"a/b\"),\n     file_name: Some(\"c\"),\n     file_stem: Some(\"c\"),\n-    extension: None\n+    extension: None,\n+    file_prefix: Some(\"c\")\n     );\n \n     t!(\".foo\",\n@@ -376,7 +420,30 @@ pub fn test_decompositions_unix() {\n     parent: Some(\"\"),\n     file_name: Some(\".foo\"),\n     file_stem: Some(\".foo\"),\n-    extension: None\n+    extension: None,\n+    file_prefix: Some(\".foo\")\n+    );\n+\n+    t!(\"a/.foo\",\n+    iter: [\"a\", \".foo\"],\n+    has_root: false,\n+    is_absolute: false,\n+    parent: Some(\"a\"),\n+    file_name: Some(\".foo\"),\n+    file_stem: Some(\".foo\"),\n+    extension: None,\n+    file_prefix: Some(\".foo\")\n+    );\n+\n+    t!(\"a/.rustfmt.toml\",\n+    iter: [\"a\", \".rustfmt.toml\"],\n+    has_root: false,\n+    is_absolute: false,\n+    parent: Some(\"a\"),\n+    file_name: Some(\".rustfmt.toml\"),\n+    file_stem: Some(\".rustfmt\"),\n+    extension: Some(\"toml\"),\n+    file_prefix: Some(\".rustfmt\")\n     );\n }\n \n@@ -952,9 +1019,48 @@ pub fn test_stem_ext() {\n     t!(\"\", file_stem: None, extension: None);\n }\n \n+#[test]\n+pub fn test_prefix_ext() {\n+    t!(\"foo\",\n+    file_prefix: Some(\"foo\"),\n+    extension: None\n+    );\n+\n+    t!(\"foo.\",\n+    file_prefix: Some(\"foo\"),\n+    extension: Some(\"\")\n+    );\n+\n+    t!(\".foo\",\n+    file_prefix: Some(\".foo\"),\n+    extension: None\n+    );\n+\n+    t!(\"foo.txt\",\n+    file_prefix: Some(\"foo\"),\n+    extension: Some(\"txt\")\n+    );\n+\n+    t!(\"foo.bar.txt\",\n+    file_prefix: Some(\"foo\"),\n+    extension: Some(\"txt\")\n+    );\n+\n+    t!(\"foo.bar.\",\n+    file_prefix: Some(\"foo\"),\n+    extension: Some(\"\")\n+    );\n+\n+    t!(\".\", file_prefix: None, extension: None);\n+\n+    t!(\"..\", file_prefix: None, extension: None);\n+\n+    t!(\"\", file_prefix: None, extension: None);\n+}\n+\n #[test]\n pub fn test_push() {\n-    macro_rules! tp(\n+    macro_rules! tp (\n         ($path:expr, $push:expr, $expected:expr) => ( {\n             let mut actual = PathBuf::from($path);\n             actual.push($push);\n@@ -1042,7 +1148,7 @@ pub fn test_push() {\n \n #[test]\n pub fn test_pop() {\n-    macro_rules! tp(\n+    macro_rules! tp (\n         ($path:expr, $expected:expr, $output:expr) => ( {\n             let mut actual = PathBuf::from($path);\n             let output = actual.pop();\n@@ -1096,7 +1202,7 @@ pub fn test_pop() {\n \n #[test]\n pub fn test_set_file_name() {\n-    macro_rules! tfn(\n+    macro_rules! tfn (\n             ($path:expr, $file:expr, $expected:expr) => ( {\n             let mut p = PathBuf::from($path);\n             p.set_file_name($file);\n@@ -1130,7 +1236,7 @@ pub fn test_set_file_name() {\n \n #[test]\n pub fn test_set_extension() {\n-    macro_rules! tfe(\n+    macro_rules! tfe (\n             ($path:expr, $ext:expr, $expected:expr, $output:expr) => ( {\n             let mut p = PathBuf::from($path);\n             let output = p.set_extension($ext);\n@@ -1192,7 +1298,7 @@ pub fn test_compare() {\n         s.finish()\n     }\n \n-    macro_rules! tc(\n+    macro_rules! tc (\n         ($path1:expr, $path2:expr, eq: $eq:expr,\n          starts_with: $starts_with:expr, ends_with: $ends_with:expr,\n          relative_from: $relative_from:expr) => ({"}]}