{"sha": "4e6e68e27a36f38da58dcbadd31c8f5d591f4571", "node_id": "C_kwDOAAsO6NoAKDRlNmU2OGUyN2EzNmYzOGRhNThkY2JhZGQzMWM4ZjVkNTkxZjQ1NzE", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-04-11T16:38:48Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-04-28T09:19:42Z"}, "message": "Check that repeat expression elements are Copy (ignoring lifetimes) in typeck and that they are Copy (with proper lifetime checks) in borrowck", "tree": {"sha": "84f8ff6144bbf8a8eda76939ca8994d61341b4c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84f8ff6144bbf8a8eda76939ca8994d61341b4c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e6e68e27a36f38da58dcbadd31c8f5d591f4571", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e6e68e27a36f38da58dcbadd31c8f5d591f4571", "html_url": "https://github.com/rust-lang/rust/commit/4e6e68e27a36f38da58dcbadd31c8f5d591f4571", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e6e68e27a36f38da58dcbadd31c8f5d591f4571/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e7915d11f6888f005e78c2358fcdc48ff655753", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e7915d11f6888f005e78c2358fcdc48ff655753", "html_url": "https://github.com/rust-lang/rust/commit/0e7915d11f6888f005e78c2358fcdc48ff655753"}], "stats": {"total": 225, "additions": 142, "deletions": 83}, "files": [{"sha": "c4a190b44cbd4816c10bb732e84ab62f4b5a5680", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 12, "deletions": 41, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/4e6e68e27a36f38da58dcbadd31c8f5d591f4571/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e6e68e27a36f38da58dcbadd31c8f5d591f4571/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=4e6e68e27a36f38da58dcbadd31c8f5d591f4571", "patch": "@@ -37,18 +37,13 @@ use rustc_middle::ty::{\n use rustc_span::def_id::CRATE_DEF_ID;\n use rustc_span::{Span, DUMMY_SP};\n use rustc_target::abi::VariantIdx;\n-use rustc_trait_selection::infer::InferCtxtExt as _;\n-use rustc_trait_selection::traits::error_reporting::InferCtxtExt as _;\n use rustc_trait_selection::traits::query::type_op;\n use rustc_trait_selection::traits::query::type_op::custom::scrape_region_constraints;\n use rustc_trait_selection::traits::query::type_op::custom::CustomTypeOp;\n use rustc_trait_selection::traits::query::type_op::{TypeOp, TypeOpOutput};\n use rustc_trait_selection::traits::query::Fallible;\n-use rustc_trait_selection::traits::{self, ObligationCause, PredicateObligation};\n+use rustc_trait_selection::traits::PredicateObligation;\n \n-use rustc_const_eval::transform::{\n-    check_consts::ConstCx, promote_consts::is_const_fn_in_array_repeat_expression,\n-};\n use rustc_mir_dataflow::impls::MaybeInitializedPlaces;\n use rustc_mir_dataflow::move_paths::MoveData;\n use rustc_mir_dataflow::ResultsCursor;\n@@ -1868,41 +1863,17 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                         Operand::Move(place) => {\n                             // Make sure that repeated elements implement `Copy`.\n                             let span = body.source_info(location).span;\n-                            let ty = operand.ty(body, tcx);\n-                            if !self.infcx.type_is_copy_modulo_regions(self.param_env, ty, span) {\n-                                let ccx = ConstCx::new_with_param_env(tcx, body, self.param_env);\n-                                let is_const_fn =\n-                                    is_const_fn_in_array_repeat_expression(&ccx, &place, &body);\n-\n-                                debug!(\"check_rvalue: is_const_fn={:?}\", is_const_fn);\n-\n-                                let def_id = body.source.def_id().expect_local();\n-                                let obligation = traits::Obligation::new(\n-                                    ObligationCause::new(\n-                                        span,\n-                                        self.tcx().hir().local_def_id_to_hir_id(def_id),\n-                                        traits::ObligationCauseCode::RepeatElementCopy {\n-                                            is_const_fn,\n-                                        },\n-                                    ),\n-                                    self.param_env,\n-                                    ty::Binder::dummy(ty::TraitRef::new(\n-                                        self.tcx().require_lang_item(\n-                                            LangItem::Copy,\n-                                            Some(self.last_span),\n-                                        ),\n-                                        tcx.mk_substs_trait(ty, &[]),\n-                                    ))\n-                                    .without_const()\n-                                    .to_predicate(self.tcx()),\n-                                );\n-                                self.infcx.report_selection_error(\n-                                    obligation.clone(),\n-                                    &obligation,\n-                                    &traits::SelectionError::Unimplemented,\n-                                    false,\n-                                );\n-                            }\n+                            let ty = place.ty(body, tcx).ty;\n+                            let trait_ref = ty::TraitRef::new(\n+                                tcx.require_lang_item(LangItem::Copy, Some(span)),\n+                                tcx.mk_substs_trait(ty, &[]),\n+                            );\n+\n+                            self.prove_trait_ref(\n+                                trait_ref,\n+                                Locations::Single(location),\n+                                ConstraintCategory::CopyBound,\n+                            );\n                         }\n                     }\n                 }"}, {"sha": "7111bbaa3cde29c6cb894987604a79490b78afba", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4e6e68e27a36f38da58dcbadd31c8f5d591f4571/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e6e68e27a36f38da58dcbadd31c8f5d591f4571/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=4e6e68e27a36f38da58dcbadd31c8f5d591f4571", "patch": "@@ -1292,6 +1292,34 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             return tcx.ty_error();\n         }\n \n+        let is_const = match &element.kind {\n+            hir::ExprKind::ConstBlock(..) => true,\n+            hir::ExprKind::Path(qpath) => {\n+                let res = self.typeck_results.borrow().qpath_res(qpath, element.hir_id);\n+                matches!(\n+                    res,\n+                    Res::Def(DefKind::Const | DefKind::AssocConst | DefKind::AnonConst, _)\n+                )\n+            }\n+            _ => false,\n+        };\n+\n+        if !is_const {\n+            let is_const_fn = match element.kind {\n+                hir::ExprKind::Call(func, _args) => match *self.node_ty(func.hir_id).kind() {\n+                    ty::FnDef(def_id, _) => tcx.is_const_fn(def_id),\n+                    _ => false,\n+                },\n+                _ => false,\n+            };\n+\n+            if count.try_eval_usize(tcx, self.param_env).map_or(true, |len| len > 1) {\n+                let lang_item = self.tcx.require_lang_item(LangItem::Copy, None);\n+                let code = traits::ObligationCauseCode::RepeatElementCopy { is_const_fn };\n+                self.require_type_meets(element_ty, element.span, code, lang_item);\n+            }\n+        }\n+\n         tcx.mk_ty(ty::Array(t, count))\n     }\n "}, {"sha": "cf5efdaab2a3f929277eddd404cf9afebd382bcc", "filename": "src/test/ui/array-slice-vec/repeat_empty_ok.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4e6e68e27a36f38da58dcbadd31c8f5d591f4571/src%2Ftest%2Fui%2Farray-slice-vec%2Frepeat_empty_ok.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e6e68e27a36f38da58dcbadd31c8f5d591f4571/src%2Ftest%2Fui%2Farray-slice-vec%2Frepeat_empty_ok.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Frepeat_empty_ok.stderr?ref=4e6e68e27a36f38da58dcbadd31c8f5d591f4571", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the trait bound `Header<'_>: Copy` is not satisfied\n-  --> $DIR/repeat_empty_ok.rs:8:19\n+  --> $DIR/repeat_empty_ok.rs:8:20\n    |\n LL |     let headers = [Header{value: &[]}; 128];\n-   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `Header<'_>`\n+   |                    ^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `Header<'_>`\n    |\n    = note: the `Copy` trait is required because the repeated element will be copied\n help: consider annotating `Header<'_>` with `#[derive(Copy)]`\n@@ -11,10 +11,10 @@ LL | #[derive(Copy)]\n    |\n \n error[E0277]: the trait bound `Header<'_>: Copy` is not satisfied\n-  --> $DIR/repeat_empty_ok.rs:13:19\n+  --> $DIR/repeat_empty_ok.rs:13:20\n    |\n LL |     let headers = [Header{value: &[0]}; 128];\n-   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `Header<'_>`\n+   |                    ^^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `Header<'_>`\n    |\n    = note: the `Copy` trait is required because the repeated element will be copied\n help: consider annotating `Header<'_>` with `#[derive(Copy)]`"}, {"sha": "ccc42f08acfa46114dcc005f59a331a0887cfe59", "filename": "src/test/ui/const-generics/issues/issue-61336-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e6e68e27a36f38da58dcbadd31c8f5d591f4571/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e6e68e27a36f38da58dcbadd31c8f5d591f4571/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-2.stderr?ref=4e6e68e27a36f38da58dcbadd31c8f5d591f4571", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the trait bound `T: Copy` is not satisfied\n-  --> $DIR/issue-61336-2.rs:6:5\n+  --> $DIR/issue-61336-2.rs:6:6\n    |\n LL |     [x; { N }]\n-   |     ^^^^^^^^^^ the trait `Copy` is not implemented for `T`\n+   |      ^ the trait `Copy` is not implemented for `T`\n    |\n    = note: the `Copy` trait is required because the repeated element will be copied\n help: consider restricting type parameter `T`"}, {"sha": "a6a7fee0007bd54a742358bc8b621c0587e8c970", "filename": "src/test/ui/const-generics/issues/issue-61336.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e6e68e27a36f38da58dcbadd31c8f5d591f4571/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e6e68e27a36f38da58dcbadd31c8f5d591f4571/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336.stderr?ref=4e6e68e27a36f38da58dcbadd31c8f5d591f4571", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the trait bound `T: Copy` is not satisfied\n-  --> $DIR/issue-61336.rs:6:5\n+  --> $DIR/issue-61336.rs:6:6\n    |\n LL |     [x; N]\n-   |     ^^^^^^ the trait `Copy` is not implemented for `T`\n+   |      ^ the trait `Copy` is not implemented for `T`\n    |\n    = note: the `Copy` trait is required because the repeated element will be copied\n help: consider restricting type parameter `T`"}, {"sha": "18b4dc714ded0b036f1c73211eceeee0c7f1abc2", "filename": "src/test/ui/consts/const-blocks/fn-call-in-non-const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e6e68e27a36f38da58dcbadd31c8f5d591f4571/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Ffn-call-in-non-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e6e68e27a36f38da58dcbadd31c8f5d591f4571/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Ffn-call-in-non-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Ffn-call-in-non-const.rs?ref=4e6e68e27a36f38da58dcbadd31c8f5d591f4571", "patch": "@@ -12,5 +12,5 @@ const fn copy() -> u32 {\n fn main() {\n     let _: [u32; 2] = [copy(); 2];\n     let _: [Option<Bar>; 2] = [no_copy(); 2];\n-    //~^ ERROR the trait bound `Option<Bar>: Copy` is not satisfied\n+    //~^ ERROR the trait bound `Bar: Copy` is not satisfied\n }"}, {"sha": "ef05f723aca038d40cb54867750a0568efaf5284", "filename": "src/test/ui/consts/const-blocks/fn-call-in-non-const.stderr", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4e6e68e27a36f38da58dcbadd31c8f5d591f4571/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Ffn-call-in-non-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e6e68e27a36f38da58dcbadd31c8f5d591f4571/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Ffn-call-in-non-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Ffn-call-in-non-const.stderr?ref=4e6e68e27a36f38da58dcbadd31c8f5d591f4571", "patch": "@@ -1,13 +1,17 @@\n-error[E0277]: the trait bound `Option<Bar>: Copy` is not satisfied\n-  --> $DIR/fn-call-in-non-const.rs:14:31\n+error[E0277]: the trait bound `Bar: Copy` is not satisfied\n+  --> $DIR/fn-call-in-non-const.rs:14:32\n    |\n LL |     let _: [Option<Bar>; 2] = [no_copy(); 2];\n-   |                               ^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `Option<Bar>`\n+   |                                ^^^^^^^^^ the trait `Copy` is not implemented for `Bar`\n    |\n-   = help: the trait `Copy` is implemented for `Option<T>`\n+   = note: required because of the requirements on the impl of `Copy` for `Option<Bar>`\n    = note: the `Copy` trait is required because the repeated element will be copied\n    = help: consider creating a new `const` item and initializing it with the result of the function call to be used in the repeat position, like `const VAL: Type = const_fn();` and `let x = [VAL; 42];`\n    = help: create an inline `const` block, see RFC #2920 <https://github.com/rust-lang/rfcs/pull/2920> for more information\n+help: consider annotating `Bar` with `#[derive(Copy)]`\n+   |\n+LL | #[derive(Copy)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "d5a17249cc9dd378bff63436fa2d92e59f41e4e5", "filename": "src/test/ui/consts/const-blocks/migrate-fail.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e6e68e27a36f38da58dcbadd31c8f5d591f4571/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Fmigrate-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e6e68e27a36f38da58dcbadd31c8f5d591f4571/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Fmigrate-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Fmigrate-fail.rs?ref=4e6e68e27a36f38da58dcbadd31c8f5d591f4571", "patch": "@@ -11,13 +11,13 @@ mod non_constants {\n     fn no_impl_copy_empty_value_multiple_elements() {\n         let x = None;\n         let arr: [Option<Bar>; 2] = [x; 2];\n-        //~^ ERROR the trait bound `Option<Bar>: Copy` is not satisfied [E0277]\n+        //~^ ERROR the trait bound `Bar: Copy` is not satisfied [E0277]\n     }\n \n     fn no_impl_copy_value_multiple_elements() {\n         let x = Some(Bar);\n         let arr: [Option<Bar>; 2] = [x; 2];\n-        //~^ ERROR the trait bound `Option<Bar>: Copy` is not satisfied [E0277]\n+        //~^ ERROR the trait bound `Bar: Copy` is not satisfied [E0277]\n     }\n }\n "}, {"sha": "1898ab3b469552fe19dfd4d54449a00377f73887", "filename": "src/test/ui/consts/const-blocks/migrate-fail.stderr", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4e6e68e27a36f38da58dcbadd31c8f5d591f4571/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Fmigrate-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e6e68e27a36f38da58dcbadd31c8f5d591f4571/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Fmigrate-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Fmigrate-fail.stderr?ref=4e6e68e27a36f38da58dcbadd31c8f5d591f4571", "patch": "@@ -1,20 +1,28 @@\n-error[E0277]: the trait bound `Option<Bar>: Copy` is not satisfied\n-  --> $DIR/migrate-fail.rs:13:37\n+error[E0277]: the trait bound `Bar: Copy` is not satisfied\n+  --> $DIR/migrate-fail.rs:13:38\n    |\n LL |         let arr: [Option<Bar>; 2] = [x; 2];\n-   |                                     ^^^^^^ the trait `Copy` is not implemented for `Option<Bar>`\n+   |                                      ^ the trait `Copy` is not implemented for `Bar`\n    |\n-   = help: the trait `Copy` is implemented for `Option<T>`\n+   = note: required because of the requirements on the impl of `Copy` for `Option<Bar>`\n    = note: the `Copy` trait is required because the repeated element will be copied\n+help: consider annotating `Bar` with `#[derive(Copy)]`\n+   |\n+LL | #[derive(Copy)]\n+   |\n \n-error[E0277]: the trait bound `Option<Bar>: Copy` is not satisfied\n-  --> $DIR/migrate-fail.rs:19:37\n+error[E0277]: the trait bound `Bar: Copy` is not satisfied\n+  --> $DIR/migrate-fail.rs:19:38\n    |\n LL |         let arr: [Option<Bar>; 2] = [x; 2];\n-   |                                     ^^^^^^ the trait `Copy` is not implemented for `Option<Bar>`\n+   |                                      ^ the trait `Copy` is not implemented for `Bar`\n    |\n-   = help: the trait `Copy` is implemented for `Option<T>`\n+   = note: required because of the requirements on the impl of `Copy` for `Option<Bar>`\n    = note: the `Copy` trait is required because the repeated element will be copied\n+help: consider annotating `Bar` with `#[derive(Copy)]`\n+   |\n+LL | #[derive(Copy)]\n+   |\n \n error: aborting due to 2 previous errors\n "}, {"sha": "9d4aef39e54016d7a99627a0f280ad03cf925094", "filename": "src/test/ui/consts/const-blocks/nll-fail.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e6e68e27a36f38da58dcbadd31c8f5d591f4571/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Fnll-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e6e68e27a36f38da58dcbadd31c8f5d591f4571/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Fnll-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Fnll-fail.rs?ref=4e6e68e27a36f38da58dcbadd31c8f5d591f4571", "patch": "@@ -10,13 +10,13 @@ mod non_constants {\n     fn no_impl_copy_empty_value_multiple_elements() {\n         let x = None;\n         let arr: [Option<Bar>; 2] = [x; 2];\n-        //~^ ERROR the trait bound `Option<Bar>: Copy` is not satisfied [E0277]\n+        //~^ ERROR the trait bound `Bar: Copy` is not satisfied [E0277]\n     }\n \n     fn no_impl_copy_value_multiple_elements() {\n         let x = Some(Bar);\n         let arr: [Option<Bar>; 2] = [x; 2];\n-        //~^ ERROR the trait bound `Option<Bar>: Copy` is not satisfied [E0277]\n+        //~^ ERROR the trait bound `Bar: Copy` is not satisfied [E0277]\n     }\n }\n "}, {"sha": "3201a1e68e8e6e27c4bfe57151d81d9d552063bb", "filename": "src/test/ui/consts/const-blocks/nll-fail.stderr", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4e6e68e27a36f38da58dcbadd31c8f5d591f4571/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Fnll-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e6e68e27a36f38da58dcbadd31c8f5d591f4571/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Fnll-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Fnll-fail.stderr?ref=4e6e68e27a36f38da58dcbadd31c8f5d591f4571", "patch": "@@ -1,20 +1,28 @@\n-error[E0277]: the trait bound `Option<Bar>: Copy` is not satisfied\n-  --> $DIR/nll-fail.rs:12:37\n+error[E0277]: the trait bound `Bar: Copy` is not satisfied\n+  --> $DIR/nll-fail.rs:12:38\n    |\n LL |         let arr: [Option<Bar>; 2] = [x; 2];\n-   |                                     ^^^^^^ the trait `Copy` is not implemented for `Option<Bar>`\n+   |                                      ^ the trait `Copy` is not implemented for `Bar`\n    |\n-   = help: the trait `Copy` is implemented for `Option<T>`\n+   = note: required because of the requirements on the impl of `Copy` for `Option<Bar>`\n    = note: the `Copy` trait is required because the repeated element will be copied\n+help: consider annotating `Bar` with `#[derive(Copy)]`\n+   |\n+LL | #[derive(Copy)]\n+   |\n \n-error[E0277]: the trait bound `Option<Bar>: Copy` is not satisfied\n-  --> $DIR/nll-fail.rs:18:37\n+error[E0277]: the trait bound `Bar: Copy` is not satisfied\n+  --> $DIR/nll-fail.rs:18:38\n    |\n LL |         let arr: [Option<Bar>; 2] = [x; 2];\n-   |                                     ^^^^^^ the trait `Copy` is not implemented for `Option<Bar>`\n+   |                                      ^ the trait `Copy` is not implemented for `Bar`\n    |\n-   = help: the trait `Copy` is implemented for `Option<T>`\n+   = note: required because of the requirements on the impl of `Copy` for `Option<Bar>`\n    = note: the `Copy` trait is required because the repeated element will be copied\n+help: consider annotating `Bar` with `#[derive(Copy)]`\n+   |\n+LL | #[derive(Copy)]\n+   |\n \n error: aborting due to 2 previous errors\n "}, {"sha": "49d1e9b9434202e9d8871345f64d27889abf1395", "filename": "src/test/ui/consts/const-blocks/trait-error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e6e68e27a36f38da58dcbadd31c8f5d591f4571/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Ftrait-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e6e68e27a36f38da58dcbadd31c8f5d591f4571/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Ftrait-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Ftrait-error.rs?ref=4e6e68e27a36f38da58dcbadd31c8f5d591f4571", "patch": "@@ -3,5 +3,5 @@ struct Foo<T>(T);\n \n fn main() {\n     [Foo(String::new()); 4];\n-    //~^ ERROR the trait bound `Foo<String>: Copy` is not satisfied [E0277]\n+    //~^ ERROR the trait bound `String: Copy` is not satisfied [E0277]\n }"}, {"sha": "8a6ca61e0c54ea9a54cdd279405296b77fb49432", "filename": "src/test/ui/consts/const-blocks/trait-error.stderr", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4e6e68e27a36f38da58dcbadd31c8f5d591f4571/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Ftrait-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e6e68e27a36f38da58dcbadd31c8f5d591f4571/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Ftrait-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Ftrait-error.stderr?ref=4e6e68e27a36f38da58dcbadd31c8f5d591f4571", "patch": "@@ -1,11 +1,18 @@\n-error[E0277]: the trait bound `Foo<String>: Copy` is not satisfied\n-  --> $DIR/trait-error.rs:5:5\n+error[E0277]: the trait bound `String: Copy` is not satisfied\n+  --> $DIR/trait-error.rs:5:6\n    |\n LL |     [Foo(String::new()); 4];\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `Foo<String>`\n+   |      ^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `String`\n    |\n-   = help: the trait `Copy` is implemented for `Foo<T>`\n+note: required because of the requirements on the impl of `Copy` for `Foo<String>`\n+  --> $DIR/trait-error.rs:1:10\n+   |\n+LL | #[derive(Copy, Clone)]\n+   |          ^^^^\n    = note: the `Copy` trait is required because the repeated element will be copied\n+   = help: consider creating a new `const` item and initializing it with the result of the function call to be used in the repeat position, like `const VAL: Type = const_fn();` and `let x = [VAL; 42];`\n+   = help: create an inline `const` block, see RFC #2920 <https://github.com/rust-lang/rfcs/pull/2920> for more information\n+   = note: this error originates in the derive macro `Copy` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "0572dda74703a12def0a998002e1e00973f1a8ef", "filename": "src/test/ui/consts/const-fn-in-vec.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e6e68e27a36f38da58dcbadd31c8f5d591f4571/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-in-vec.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e6e68e27a36f38da58dcbadd31c8f5d591f4571/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-in-vec.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-in-vec.stderr?ref=4e6e68e27a36f38da58dcbadd31c8f5d591f4571", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the trait bound `String: Copy` is not satisfied\n-  --> $DIR/const-fn-in-vec.rs:4:32\n+  --> $DIR/const-fn-in-vec.rs:4:33\n    |\n LL |     let strings: [String; 5] = [String::new(); 5];\n-   |                                ^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `String`\n+   |                                 ^^^^^^^^^^^^^ the trait `Copy` is not implemented for `String`\n    |\n    = note: the `Copy` trait is required because the repeated element will be copied\n    = help: consider creating a new `const` item and initializing it with the result of the function call to be used in the repeat position, like `const VAL: Type = const_fn();` and `let x = [VAL; 42];`"}, {"sha": "1d5d90ffcb43d4f55a2214940941a3c33cede939", "filename": "src/test/ui/lifetimes/copy_modulo_regions.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4e6e68e27a36f38da58dcbadd31c8f5d591f4571/src%2Ftest%2Fui%2Flifetimes%2Fcopy_modulo_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e6e68e27a36f38da58dcbadd31c8f5d591f4571/src%2Ftest%2Fui%2Flifetimes%2Fcopy_modulo_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fcopy_modulo_regions.rs?ref=4e6e68e27a36f38da58dcbadd31c8f5d591f4571", "patch": "@@ -0,0 +1,19 @@\n+#![feature(nll)]\n+\n+#[derive(Clone)]\n+struct Foo<'a>(fn(&'a ()) -> &'a ());\n+\n+impl Copy for Foo<'static> {}\n+\n+fn mk_foo<'a>() -> Foo<'a> {\n+    println!(\"mk_foo\");\n+    Foo(|x| x)\n+}\n+\n+fn foo<'a>() -> [Foo<'a>; 100] {\n+    [mk_foo::<'a>(); 100] //~ ERROR lifetime may not live long enough\n+}\n+\n+fn main() {\n+    foo();\n+}"}, {"sha": "e027bc45426edf8e64bafc246dc3826e5eb53286", "filename": "src/test/ui/lifetimes/copy_modulo_regions.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4e6e68e27a36f38da58dcbadd31c8f5d591f4571/src%2Ftest%2Fui%2Flifetimes%2Fcopy_modulo_regions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e6e68e27a36f38da58dcbadd31c8f5d591f4571/src%2Ftest%2Fui%2Flifetimes%2Fcopy_modulo_regions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fcopy_modulo_regions.stderr?ref=4e6e68e27a36f38da58dcbadd31c8f5d591f4571", "patch": "@@ -0,0 +1,14 @@\n+error: lifetime may not live long enough\n+  --> $DIR/copy_modulo_regions.rs:14:5\n+   |\n+LL | fn foo<'a>() -> [Foo<'a>; 100] {\n+   |        -- lifetime `'a` defined here\n+LL |     [mk_foo::<'a>(); 100]\n+   |     ^^^^^^^^^^^^^^^^^^^^^ returning this value requires that `'a` must outlive `'static`\n+   |\n+   = note: requirement occurs because of the type `Foo<'_>`, which makes the generic argument `'_` invariant\n+   = note: the struct `Foo<'a>` is invariant over the parameter `'a`\n+   = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n+\n+error: aborting due to previous error\n+"}, {"sha": "fd64ce8bceaee224595490341a3cf28c6f0ee97d", "filename": "src/test/ui/repeat-to-run-dtor-twice.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e6e68e27a36f38da58dcbadd31c8f5d591f4571/src%2Ftest%2Fui%2Frepeat-to-run-dtor-twice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e6e68e27a36f38da58dcbadd31c8f5d591f4571/src%2Ftest%2Fui%2Frepeat-to-run-dtor-twice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepeat-to-run-dtor-twice.stderr?ref=4e6e68e27a36f38da58dcbadd31c8f5d591f4571", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the trait bound `Foo: Copy` is not satisfied\n-  --> $DIR/repeat-to-run-dtor-twice.rs:17:13\n+  --> $DIR/repeat-to-run-dtor-twice.rs:17:15\n    |\n LL |     let _ = [ a; 5 ];\n-   |             ^^^^^^^^ the trait `Copy` is not implemented for `Foo`\n+   |               ^ the trait `Copy` is not implemented for `Foo`\n    |\n    = note: the `Copy` trait is required because the repeated element will be copied\n help: consider annotating `Foo` with `#[derive(Copy)]`"}]}