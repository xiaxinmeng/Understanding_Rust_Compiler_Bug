{"sha": "6e0a8bf7901a3fe2e073b1e702e80f58b76d5087", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlMGE4YmY3OTAxYTNmZTJlMDczYjFlNzAyZTgwZjU4Yjc2ZDUwODc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-29T07:12:07Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-29T07:12:07Z"}, "message": "Auto merge of #86998 - m-ou-se:const-panic-fmt-as-str, r=oli-obk\n\nMake const panic!(\"..\") work in Rust 2021.\n\nDuring const eval, this replaces calls to core::panicking::panic_fmt and std::panicking::being_panic_fmt with a call to a new const fn: core::panicking::const_panic_fmt. That function uses fmt::Arguments::as_str() to get the str and calls panic_str with that instead.\n\npanic!() invocations with formatting arguments are still not accepted, as the creation of such a fmt::Arguments cannot be done in constant functions right now.\n\nr? `@RalfJung`", "tree": {"sha": "bd9b79e97e2d2204a5a1c2e22b9459811cc59809", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd9b79e97e2d2204a5a1c2e22b9459811cc59809"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e0a8bf7901a3fe2e073b1e702e80f58b76d5087", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e0a8bf7901a3fe2e073b1e702e80f58b76d5087", "html_url": "https://github.com/rust-lang/rust/commit/6e0a8bf7901a3fe2e073b1e702e80f58b76d5087", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e0a8bf7901a3fe2e073b1e702e80f58b76d5087/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "581b1664c92f78f3d15181c78a16480987256ecb", "url": "https://api.github.com/repos/rust-lang/rust/commits/581b1664c92f78f3d15181c78a16480987256ecb", "html_url": "https://github.com/rust-lang/rust/commit/581b1664c92f78f3d15181c78a16480987256ecb"}, {"sha": "312bf8e0b8122fd681adf28f65e88f8d15f7a34c", "url": "https://api.github.com/repos/rust-lang/rust/commits/312bf8e0b8122fd681adf28f65e88f8d15f7a34c", "html_url": "https://github.com/rust-lang/rust/commit/312bf8e0b8122fd681adf28f65e88f8d15f7a34c"}], "stats": {"total": 224, "additions": 203, "deletions": 21}, "files": [{"sha": "b1be50b0bf9905c9c73d0df2b8fc76423d17e08e", "filename": "compiler/rustc_builtin_macros/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6e0a8bf7901a3fe2e073b1e702e80f58b76d5087/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e0a8bf7901a3fe2e073b1e702e80f58b76d5087/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs?ref=6e0a8bf7901a3fe2e073b1e702e80f58b76d5087", "patch": "@@ -72,6 +72,7 @@ pub fn register_builtin_macros(resolver: &mut dyn ResolverExpand) {\n         file: source_util::expand_file,\n         format_args_nl: format::expand_format_args_nl,\n         format_args: format::expand_format_args,\n+        const_format_args: format::expand_format_args,\n         global_asm: asm::expand_global_asm,\n         include_bytes: source_util::expand_include_bytes,\n         include_str: source_util::expand_include_str,"}, {"sha": "55000ae7e59d4d7b1e7b57b0c912488e7b72a316", "filename": "compiler/rustc_hir/src/lang_items.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6e0a8bf7901a3fe2e073b1e702e80f58b76d5087/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e0a8bf7901a3fe2e073b1e702e80f58b76d5087/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs?ref=6e0a8bf7901a3fe2e073b1e702e80f58b76d5087", "patch": "@@ -276,13 +276,16 @@ language_item_table! {\n     // is required to define it somewhere. Additionally, there are restrictions on crates that use\n     // a weak lang item, but do not have it defined.\n     Panic,                   sym::panic,               panic_fn,                   Target::Fn;\n+    PanicFmt,                sym::panic_fmt,           panic_fmt,                  Target::Fn;\n     PanicStr,                sym::panic_str,           panic_str,                  Target::Fn;\n+    ConstPanicFmt,           sym::const_panic_fmt,     const_panic_fmt,            Target::Fn;\n     PanicBoundsCheck,        sym::panic_bounds_check,  panic_bounds_check_fn,      Target::Fn;\n     PanicInfo,               sym::panic_info,          panic_info,                 Target::Struct;\n     PanicLocation,           sym::panic_location,      panic_location,             Target::Struct;\n     PanicImpl,               sym::panic_impl,          panic_impl,                 Target::Fn;\n     /// libstd panic entry point. Necessary for const eval to be able to catch it\n     BeginPanic,              sym::begin_panic,         begin_panic_fn,             Target::Fn;\n+    BeginPanicFmt,           sym::begin_panic_fmt,     begin_panic_fmt,            Target::Fn;\n \n     ExchangeMalloc,          sym::exchange_malloc,     exchange_malloc_fn,         Target::Fn;\n     BoxFree,                 sym::box_free,            box_free_fn,                Target::Fn;"}, {"sha": "8a90686b9003f5c391cd1e7a077969ab1a12a42c", "filename": "compiler/rustc_mir/src/const_eval/machine.rs", "status": "modified", "additions": 36, "deletions": 8, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/6e0a8bf7901a3fe2e073b1e702e80f58b76d5087/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e0a8bf7901a3fe2e073b1e702e80f58b76d5087/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmachine.rs?ref=6e0a8bf7901a3fe2e073b1e702e80f58b76d5087", "patch": "@@ -30,7 +30,9 @@ impl<'mir, 'tcx> InterpCx<'mir, 'tcx, CompileTimeInterpreter<'mir, 'tcx>> {\n         &mut self,\n         instance: ty::Instance<'tcx>,\n         args: &[OpTy<'tcx>],\n-    ) -> InterpResult<'tcx> {\n+    ) -> InterpResult<'tcx, Option<ty::Instance<'tcx>>> {\n+        // The list of functions we handle here must be in sync with\n+        // `is_lang_panic_fn` in `transform/check_consts/mod.rs`.\n         let def_id = instance.def_id();\n         if Some(def_id) == self.tcx.lang_items().panic_fn()\n             || Some(def_id) == self.tcx.lang_items().panic_str()\n@@ -43,10 +45,25 @@ impl<'mir, 'tcx> InterpCx<'mir, 'tcx, CompileTimeInterpreter<'mir, 'tcx>> {\n             let msg = Symbol::intern(self.read_str(&msg_place)?);\n             let span = self.find_closest_untracked_caller_location();\n             let (file, line, col) = self.location_triple_for_span(span);\n-            Err(ConstEvalErrKind::Panic { msg, file, line, col }.into())\n-        } else {\n-            Ok(())\n+            return Err(ConstEvalErrKind::Panic { msg, file, line, col }.into());\n+        } else if Some(def_id) == self.tcx.lang_items().panic_fmt()\n+            || Some(def_id) == self.tcx.lang_items().begin_panic_fmt()\n+        {\n+            // For panic_fmt, call const_panic_fmt instead.\n+            if let Some(const_panic_fmt) = self.tcx.lang_items().const_panic_fmt() {\n+                return Ok(Some(\n+                    ty::Instance::resolve(\n+                        *self.tcx,\n+                        ty::ParamEnv::reveal_all(),\n+                        const_panic_fmt,\n+                        self.tcx.intern_substs(&[]),\n+                    )\n+                    .unwrap()\n+                    .unwrap(),\n+                ));\n+            }\n         }\n+        Ok(None)\n     }\n }\n \n@@ -241,10 +258,21 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n                 if !ecx.tcx.has_attr(def.did, sym::default_method_body_is_const) {\n                     // Some functions we support even if they are non-const -- but avoid testing\n                     // that for const fn!\n-                    ecx.hook_panic_fn(instance, args)?;\n-                    // We certainly do *not* want to actually call the fn\n-                    // though, so be sure we return here.\n-                    throw_unsup_format!(\"calling non-const function `{}`\", instance)\n+                    if let Some(new_instance) = ecx.hook_panic_fn(instance, args)? {\n+                        // We call another const fn instead.\n+                        return Self::find_mir_or_eval_fn(\n+                            ecx,\n+                            new_instance,\n+                            _abi,\n+                            args,\n+                            _ret,\n+                            _unwind,\n+                        );\n+                    } else {\n+                        // We certainly do *not* want to actually call the fn\n+                        // though, so be sure we return here.\n+                        throw_unsup_format!(\"calling non-const function `{}`\", instance)\n+                    }\n                 }\n             }\n         }"}, {"sha": "7e22ed22db4fe3915bf4b5f27154cb51c5027e30", "filename": "compiler/rustc_mir/src/transform/check_consts/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6e0a8bf7901a3fe2e073b1e702e80f58b76d5087/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e0a8bf7901a3fe2e073b1e702e80f58b76d5087/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fmod.rs?ref=6e0a8bf7901a3fe2e073b1e702e80f58b76d5087", "patch": "@@ -74,9 +74,14 @@ impl ConstCx<'mir, 'tcx> {\n \n /// Returns `true` if this `DefId` points to one of the official `panic` lang items.\n pub fn is_lang_panic_fn(tcx: TyCtxt<'tcx>, def_id: DefId) -> bool {\n+    // We can allow calls to these functions because `hook_panic_fn` in\n+    // `const_eval/machine.rs` ensures the calls are handled specially.\n+    // Keep in sync with what that function handles!\n     Some(def_id) == tcx.lang_items().panic_fn()\n         || Some(def_id) == tcx.lang_items().panic_str()\n         || Some(def_id) == tcx.lang_items().begin_panic_fn()\n+        || Some(def_id) == tcx.lang_items().panic_fmt()\n+        || Some(def_id) == tcx.lang_items().begin_panic_fmt()\n }\n \n pub fn rustc_allow_const_fn_unstable("}, {"sha": "114750d9b7b3aa4ad0a8d9ce55fec0500acfb1ae", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6e0a8bf7901a3fe2e073b1e702e80f58b76d5087/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e0a8bf7901a3fe2e073b1e702e80f58b76d5087/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=6e0a8bf7901a3fe2e073b1e702e80f58b76d5087", "patch": "@@ -323,6 +323,7 @@ symbols! {\n         await_macro,\n         bang,\n         begin_panic,\n+        begin_panic_fmt,\n         bench,\n         bin,\n         bind_by_move_pattern_guards,\n@@ -409,6 +410,7 @@ symbols! {\n         const_fn_transmute,\n         const_fn_union,\n         const_fn_unsize,\n+        const_format_args,\n         const_generic_defaults,\n         const_generics,\n         const_generics_defaults,\n@@ -420,6 +422,7 @@ symbols! {\n         const_loop,\n         const_mut_refs,\n         const_panic,\n+        const_panic_fmt,\n         const_precise_live_drops,\n         const_ptr,\n         const_raw_ptr_deref,\n@@ -586,6 +589,7 @@ symbols! {\n         fmaf32,\n         fmaf64,\n         fmt,\n+        fmt_as_str,\n         fmt_internals,\n         fmul_fast,\n         fn_align,\n@@ -881,6 +885,7 @@ symbols! {\n         panic_2021,\n         panic_abort,\n         panic_bounds_check,\n+        panic_fmt,\n         panic_handler,\n         panic_impl,\n         panic_implementation,"}, {"sha": "6ad10990840c2807eb9ffd9e45714be95a68371e", "filename": "library/core/src/fmt/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6e0a8bf7901a3fe2e073b1e702e80f58b76d5087/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e0a8bf7901a3fe2e073b1e702e80f58b76d5087/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs?ref=6e0a8bf7901a3fe2e073b1e702e80f58b76d5087", "patch": "@@ -337,7 +337,8 @@ impl<'a> Arguments<'a> {\n     #[doc(hidden)]\n     #[inline]\n     #[unstable(feature = \"fmt_internals\", reason = \"internal to format_args!\", issue = \"none\")]\n-    pub fn new_v1(pieces: &'a [&'static str], args: &'a [ArgumentV1<'a>]) -> Arguments<'a> {\n+    #[rustc_const_unstable(feature = \"const_fmt_arguments_new\", issue = \"none\")]\n+    pub const fn new_v1(pieces: &'a [&'static str], args: &'a [ArgumentV1<'a>]) -> Arguments<'a> {\n         Arguments { pieces, fmt: None, args }\n     }\n \n@@ -350,7 +351,8 @@ impl<'a> Arguments<'a> {\n     #[doc(hidden)]\n     #[inline]\n     #[unstable(feature = \"fmt_internals\", reason = \"internal to format_args!\", issue = \"none\")]\n-    pub fn new_v1_formatted(\n+    #[rustc_const_unstable(feature = \"const_fmt_arguments_new\", issue = \"none\")]\n+    pub const fn new_v1_formatted(\n         pieces: &'a [&'static str],\n         args: &'a [ArgumentV1<'a>],\n         fmt: &'a [rt::v1::Argument],"}, {"sha": "f8577e101480ef881de27a97771afd4398d53748", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6e0a8bf7901a3fe2e073b1e702e80f58b76d5087/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e0a8bf7901a3fe2e073b1e702e80f58b76d5087/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=6e0a8bf7901a3fe2e073b1e702e80f58b76d5087", "patch": "@@ -73,6 +73,7 @@\n #![feature(cfg_target_has_atomic)]\n #![feature(const_heap)]\n #![feature(const_alloc_layout)]\n+#![feature(const_arguments_as_str)]\n #![feature(const_assert_type)]\n #![feature(const_discriminant)]\n #![feature(const_cell_into_inner)]"}, {"sha": "50fefb8273199268c7b95c98308b2d6acb5b5871", "filename": "library/core/src/macros/mod.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/6e0a8bf7901a3fe2e073b1e702e80f58b76d5087/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e0a8bf7901a3fe2e073b1e702e80f58b76d5087/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs?ref=6e0a8bf7901a3fe2e073b1e702e80f58b76d5087", "patch": "@@ -837,6 +837,31 @@ pub(crate) mod builtin {\n         ($fmt:expr, $($args:tt)*) => {{ /* compiler built-in */ }};\n     }\n \n+    /// Same as `format_args`, but can be used in some const contexts.\n+    ///\n+    /// This macro is used by the panic macros for the `const_panic` feature.\n+    ///\n+    /// This macro will be removed once `format_args` is allowed in const contexts.\n+    #[cfg(not(bootstrap))]\n+    #[unstable(feature = \"const_format_args\", issue = \"none\")]\n+    #[allow_internal_unstable(fmt_internals, const_fmt_arguments_new)]\n+    #[rustc_builtin_macro]\n+    #[macro_export]\n+    macro_rules! const_format_args {\n+        ($fmt:expr) => {{ /* compiler built-in */ }};\n+        ($fmt:expr, $($args:tt)*) => {{ /* compiler built-in */ }};\n+    }\n+\n+    /// Same as `format_args`, but can be used in some const contexts.\n+    #[cfg(bootstrap)]\n+    #[unstable(feature = \"const_format_args\", issue = \"none\")]\n+    #[macro_export]\n+    macro_rules! const_format_args {\n+        ($($t:tt)*) => {\n+            $crate::format_args!($($t)*)\n+        }\n+    }\n+\n     /// Same as `format_args`, but adds a newline in the end.\n     #[unstable(\n         feature = \"format_args_nl\","}, {"sha": "4b72f9ed169ec41be3550997fe41360c026241d1", "filename": "library/core/src/panic.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6e0a8bf7901a3fe2e073b1e702e80f58b76d5087/library%2Fcore%2Fsrc%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e0a8bf7901a3fe2e073b1e702e80f58b76d5087/library%2Fcore%2Fsrc%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fpanic.rs?ref=6e0a8bf7901a3fe2e073b1e702e80f58b76d5087", "patch": "@@ -7,7 +7,7 @@ use crate::fmt;\n \n #[doc(hidden)]\n #[unstable(feature = \"edition_panic\", issue = \"none\", reason = \"use panic!() instead\")]\n-#[allow_internal_unstable(core_panic)]\n+#[allow_internal_unstable(core_panic, const_format_args)]\n #[rustc_diagnostic_item = \"core_panic_2015_macro\"]\n #[rustc_macro_transparency = \"semitransparent\"]\n pub macro panic_2015 {\n@@ -21,21 +21,21 @@ pub macro panic_2015 {\n         $crate::panicking::panic_str($msg)\n     ),\n     ($fmt:expr, $($arg:tt)+) => (\n-        $crate::panicking::panic_fmt($crate::format_args!($fmt, $($arg)+))\n+        $crate::panicking::panic_fmt($crate::const_format_args!($fmt, $($arg)+))\n     ),\n }\n \n #[doc(hidden)]\n #[unstable(feature = \"edition_panic\", issue = \"none\", reason = \"use panic!() instead\")]\n-#[allow_internal_unstable(core_panic)]\n+#[allow_internal_unstable(core_panic, const_format_args)]\n #[rustc_diagnostic_item = \"core_panic_2021_macro\"]\n #[rustc_macro_transparency = \"semitransparent\"]\n pub macro panic_2021 {\n     () => (\n         $crate::panicking::panic(\"explicit panic\")\n     ),\n     ($($t:tt)+) => (\n-        $crate::panicking::panic_fmt($crate::format_args!($($t)+))\n+        $crate::panicking::panic_fmt($crate::const_format_args!($($t)+))\n     ),\n }\n "}, {"sha": "2ec6b4d15ffd10ab6849f93e1959dddbdf0d4629", "filename": "library/core/src/panicking.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6e0a8bf7901a3fe2e073b1e702e80f58b76d5087/library%2Fcore%2Fsrc%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e0a8bf7901a3fe2e073b1e702e80f58b76d5087/library%2Fcore%2Fsrc%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fpanicking.rs?ref=6e0a8bf7901a3fe2e073b1e702e80f58b76d5087", "patch": "@@ -74,6 +74,7 @@ fn panic_bounds_check(index: usize, len: usize) -> ! {\n #[cfg_attr(not(feature = \"panic_immediate_abort\"), inline(never))]\n #[cfg_attr(feature = \"panic_immediate_abort\", inline)]\n #[track_caller]\n+#[cfg_attr(not(bootstrap), lang = \"panic_fmt\")] // needed for const-evaluated panics\n pub fn panic_fmt(fmt: fmt::Arguments<'_>) -> ! {\n     if cfg!(feature = \"panic_immediate_abort\") {\n         super::intrinsics::abort()\n@@ -92,6 +93,20 @@ pub fn panic_fmt(fmt: fmt::Arguments<'_>) -> ! {\n     unsafe { panic_impl(&pi) }\n }\n \n+/// This function is used instead of panic_fmt in const eval.\n+#[cfg(not(bootstrap))]\n+#[lang = \"const_panic_fmt\"]\n+pub const fn const_panic_fmt(fmt: fmt::Arguments<'_>) -> ! {\n+    if let Some(msg) = fmt.as_str() {\n+        panic_str(msg);\n+    } else {\n+        // SAFETY: This is only evaluated at compile time, which reliably\n+        // handles this UB (in case this branch turns out to be reachable\n+        // somehow).\n+        unsafe { crate::hint::unreachable_unchecked() };\n+    }\n+}\n+\n #[derive(Debug)]\n #[doc(hidden)]\n pub enum AssertKind {"}, {"sha": "21a1ee137efad87f037b7631b933469d73f28674", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6e0a8bf7901a3fe2e073b1e702e80f58b76d5087/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e0a8bf7901a3fe2e073b1e702e80f58b76d5087/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=6e0a8bf7901a3fe2e073b1e702e80f58b76d5087", "patch": "@@ -247,6 +247,7 @@\n #![feature(const_fn_floating_point_arithmetic)]\n #![feature(const_fn_fn_ptr_basics)]\n #![cfg_attr(bootstrap, feature(const_fn_transmute))]\n+#![feature(const_format_args)]\n #![feature(const_io_structs)]\n #![feature(const_ip)]\n #![feature(const_ipv4)]\n@@ -555,9 +556,9 @@ pub use core::{\n #[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]\n #[allow(deprecated)]\n pub use core::{\n-    assert, assert_matches, cfg, column, compile_error, concat, concat_idents, env, file,\n-    format_args, format_args_nl, include, include_bytes, include_str, line, llvm_asm, log_syntax,\n-    module_path, option_env, stringify, trace_macros,\n+    assert, assert_matches, cfg, column, compile_error, concat, concat_idents, const_format_args,\n+    env, file, format_args, format_args_nl, include, include_bytes, include_str, line, llvm_asm,\n+    log_syntax, module_path, option_env, stringify, trace_macros,\n };\n \n #[stable(feature = \"core_primitive\", since = \"1.43.0\")]"}, {"sha": "3b3996e437c2b6fc2717a6cf56e2b44cc707797f", "filename": "library/std/src/panic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e0a8bf7901a3fe2e073b1e702e80f58b76d5087/library%2Fstd%2Fsrc%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e0a8bf7901a3fe2e073b1e702e80f58b76d5087/library%2Fstd%2Fsrc%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpanic.rs?ref=6e0a8bf7901a3fe2e073b1e702e80f58b76d5087", "patch": "@@ -20,7 +20,7 @@ use crate::thread::Result;\n \n #[doc(hidden)]\n #[unstable(feature = \"edition_panic\", issue = \"none\", reason = \"use panic!() instead\")]\n-#[allow_internal_unstable(libstd_sys_internals)]\n+#[allow_internal_unstable(libstd_sys_internals, const_format_args)]\n #[cfg_attr(not(test), rustc_diagnostic_item = \"std_panic_2015_macro\")]\n #[rustc_macro_transparency = \"semitransparent\"]\n pub macro panic_2015 {\n@@ -31,7 +31,7 @@ pub macro panic_2015 {\n         $crate::rt::begin_panic($msg)\n     }),\n     ($fmt:expr, $($arg:tt)+) => ({\n-        $crate::rt::begin_panic_fmt(&$crate::format_args!($fmt, $($arg)+))\n+        $crate::rt::begin_panic_fmt(&$crate::const_format_args!($fmt, $($arg)+))\n     }),\n }\n "}, {"sha": "5f43393e585835d8d69299ce382d0d3e2ad4196e", "filename": "library/std/src/panicking.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6e0a8bf7901a3fe2e073b1e702e80f58b76d5087/library%2Fstd%2Fsrc%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e0a8bf7901a3fe2e073b1e702e80f58b76d5087/library%2Fstd%2Fsrc%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpanicking.rs?ref=6e0a8bf7901a3fe2e073b1e702e80f58b76d5087", "patch": "@@ -448,6 +448,7 @@ pub fn panicking() -> bool {\n #[cfg_attr(not(feature = \"panic_immediate_abort\"), track_caller)]\n #[cfg_attr(not(feature = \"panic_immediate_abort\"), inline(never))]\n #[cfg_attr(feature = \"panic_immediate_abort\", inline)]\n+#[cfg_attr(all(not(bootstrap), not(test)), lang = \"begin_panic_fmt\")]\n pub fn begin_panic_fmt(msg: &fmt::Arguments<'_>) -> ! {\n     if cfg!(feature = \"panic_immediate_abort\") {\n         intrinsics::abort()"}, {"sha": "9e70a847457c0e91ab9106fb19602ffff24665ff", "filename": "src/test/ui/borrowck/issue-64453.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e0a8bf7901a3fe2e073b1e702e80f58b76d5087/src%2Ftest%2Fui%2Fborrowck%2Fissue-64453.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e0a8bf7901a3fe2e073b1e702e80f58b76d5087/src%2Ftest%2Fui%2Fborrowck%2Fissue-64453.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-64453.rs?ref=6e0a8bf7901a3fe2e073b1e702e80f58b76d5087", "patch": "@@ -3,7 +3,7 @@ struct Value;\n \n static settings_dir: String = format!(\"\");\n //~^ ERROR calls in statics are limited to constant functions\n-//~| ERROR calls in statics are limited to constant functions\n+//~| ERROR is not yet stable as a const\n \n fn from_string(_: String) -> Value {\n     Value"}, {"sha": "5513c3d217e2a3c4a35b22c8ae2f7899106c81ba", "filename": "src/test/ui/borrowck/issue-64453.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6e0a8bf7901a3fe2e073b1e702e80f58b76d5087/src%2Ftest%2Fui%2Fborrowck%2Fissue-64453.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e0a8bf7901a3fe2e073b1e702e80f58b76d5087/src%2Ftest%2Fui%2Fborrowck%2Fissue-64453.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-64453.stderr?ref=6e0a8bf7901a3fe2e073b1e702e80f58b76d5087", "patch": "@@ -4,12 +4,13 @@ error[E0507]: cannot move out of static item `settings_dir`\n LL |     let settings_data = from_string(settings_dir);\n    |                                     ^^^^^^^^^^^^ move occurs because `settings_dir` has type `String`, which does not implement the `Copy` trait\n \n-error[E0015]: calls in statics are limited to constant functions, tuple structs and tuple variants\n+error: `Arguments::<'a>::new_v1` is not yet stable as a const fn\n   --> $DIR/issue-64453.rs:4:31\n    |\n LL | static settings_dir: String = format!(\"\");\n    |                               ^^^^^^^^^^^\n    |\n+   = help: add `#![feature(const_fmt_arguments_new)]` to the crate attributes to enable\n    = note: this error originates in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0015]: calls in statics are limited to constant functions, tuple structs and tuple variants"}, {"sha": "daef34cd6a3062602ebd1a0d9e332a5d0f0408dc", "filename": "src/test/ui/consts/const-eval/const_panic_2021.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/6e0a8bf7901a3fe2e073b1e702e80f58b76d5087/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_2021.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e0a8bf7901a3fe2e073b1e702e80f58b76d5087/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_2021.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_2021.rs?ref=6e0a8bf7901a3fe2e073b1e702e80f58b76d5087", "patch": "@@ -0,0 +1,27 @@\n+// edition:2021\n+#![feature(const_panic)]\n+#![crate_type = \"lib\"]\n+\n+const A: () = std::panic!(\"bl\u00e5haj\");\n+//~^ ERROR evaluation of constant value failed\n+\n+const B: () = std::panic!();\n+//~^ ERROR evaluation of constant value failed\n+\n+const C: () = std::unreachable!();\n+//~^ ERROR evaluation of constant value failed\n+\n+const D: () = std::unimplemented!();\n+//~^ ERROR evaluation of constant value failed\n+\n+const E: () = core::panic!(\"shark\");\n+//~^ ERROR evaluation of constant value failed\n+\n+const F: () = core::panic!();\n+//~^ ERROR evaluation of constant value failed\n+\n+const G: () = core::unreachable!();\n+//~^ ERROR evaluation of constant value failed\n+\n+const H: () = core::unimplemented!();\n+//~^ ERROR evaluation of constant value failed"}, {"sha": "c1bdab3693d11babcf1bb9f60b9371ed6546227b", "filename": "src/test/ui/consts/const-eval/const_panic_2021.stderr", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/6e0a8bf7901a3fe2e073b1e702e80f58b76d5087/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_2021.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e0a8bf7901a3fe2e073b1e702e80f58b76d5087/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_2021.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_2021.stderr?ref=6e0a8bf7901a3fe2e073b1e702e80f58b76d5087", "patch": "@@ -0,0 +1,67 @@\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const_panic_2021.rs:5:15\n+   |\n+LL | const A: () = std::panic!(\"bl\u00e5haj\");\n+   |               ^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'bl\u00e5haj', $DIR/const_panic_2021.rs:5:15\n+   |\n+   = note: this error originates in the macro `$crate::panic::panic_2021` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const_panic_2021.rs:8:15\n+   |\n+LL | const B: () = std::panic!();\n+   |               ^^^^^^^^^^^^^ the evaluated program panicked at 'explicit panic', $DIR/const_panic_2021.rs:8:15\n+   |\n+   = note: this error originates in the macro `$crate::panic::panic_2021` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const_panic_2021.rs:11:15\n+   |\n+LL | const C: () = std::unreachable!();\n+   |               ^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic_2021.rs:11:15\n+   |\n+   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const_panic_2021.rs:14:15\n+   |\n+LL | const D: () = std::unimplemented!();\n+   |               ^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'not implemented', $DIR/const_panic_2021.rs:14:15\n+   |\n+   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const_panic_2021.rs:17:15\n+   |\n+LL | const E: () = core::panic!(\"shark\");\n+   |               ^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'shark', $DIR/const_panic_2021.rs:17:15\n+   |\n+   = note: this error originates in the macro `$crate::panic::panic_2021` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const_panic_2021.rs:20:15\n+   |\n+LL | const F: () = core::panic!();\n+   |               ^^^^^^^^^^^^^^ the evaluated program panicked at 'explicit panic', $DIR/const_panic_2021.rs:20:15\n+   |\n+   = note: this error originates in the macro `$crate::panic::panic_2021` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const_panic_2021.rs:23:15\n+   |\n+LL | const G: () = core::unreachable!();\n+   |               ^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic_2021.rs:23:15\n+   |\n+   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const_panic_2021.rs:26:15\n+   |\n+LL | const H: () = core::unimplemented!();\n+   |               ^^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'not implemented', $DIR/const_panic_2021.rs:26:15\n+   |\n+   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 8 previous errors\n+\n+For more information about this error, try `rustc --explain E0080`."}]}