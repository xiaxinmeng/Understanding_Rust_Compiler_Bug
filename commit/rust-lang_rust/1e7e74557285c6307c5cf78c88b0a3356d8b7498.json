{"sha": "1e7e74557285c6307c5cf78c88b0a3356d8b7498", "node_id": "C_kwDOAAsO6NoAKDFlN2U3NDU1NzI4NWM2MzA3YzVjZjc4Yzg4YjBhMzM1NmQ4Yjc0OTg", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2022-07-30T18:54:15Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2022-07-30T18:54:15Z"}, "message": "Test another enum niche with multiple ZST alignments", "tree": {"sha": "5d2949dce27fc79c5d3e10390f7d4be34e6c0ad3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d2949dce27fc79c5d3e10390f7d4be34e6c0ad3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e7e74557285c6307c5cf78c88b0a3356d8b7498", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e7e74557285c6307c5cf78c88b0a3356d8b7498", "html_url": "https://github.com/rust-lang/rust/commit/1e7e74557285c6307c5cf78c88b0a3356d8b7498", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e7e74557285c6307c5cf78c88b0a3356d8b7498/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a1e4ea32af7d192d47f3ade90e984005638bf99", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a1e4ea32af7d192d47f3ade90e984005638bf99", "html_url": "https://github.com/rust-lang/rust/commit/4a1e4ea32af7d192d47f3ade90e984005638bf99"}], "stats": {"total": 135, "additions": 132, "deletions": 3}, "files": [{"sha": "23bbbfbfc58814a4a1c298e3193931c287825528", "filename": "src/test/ui/layout/zero-sized-array-enum-niche.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1e7e74557285c6307c5cf78c88b0a3356d8b7498/src%2Ftest%2Fui%2Flayout%2Fzero-sized-array-enum-niche.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e7e74557285c6307c5cf78c88b0a3356d8b7498/src%2Ftest%2Fui%2Flayout%2Fzero-sized-array-enum-niche.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flayout%2Fzero-sized-array-enum-niche.rs?ref=1e7e74557285c6307c5cf78c88b0a3356d8b7498", "patch": "@@ -15,6 +15,14 @@ type AlignedResult = Result<[u32; 0], bool>; //~ ERROR: layout_of\n // It was also using the bool niche for the enum tag, which is fine, but\n // after the fix, layout decides to use a direct tagged repr instead.\n \n+// Here's another case with multiple ZST alignments, where we should\n+// get the maximal alignment and matching size.\n+#[rustc_layout(debug)]\n+enum MultipleAlignments { //~ ERROR: layout_of\n+    Align2([u16; 0]),\n+    Align4([u32; 0]),\n+    Niche(bool),\n+}\n \n // Tagged repr is clever enough to grow tags to fill any padding, e.g.:\n // 1.   `T_FF` (one byte of Tag, one byte of padding, two bytes of align=2 Field)"}, {"sha": "0dbecbe412b8d5e34fee47b1682cb341ff833a8f", "filename": "src/test/ui/layout/zero-sized-array-enum-niche.stderr", "status": "modified", "additions": 124, "deletions": 3, "changes": 127, "blob_url": "https://github.com/rust-lang/rust/blob/1e7e74557285c6307c5cf78c88b0a3356d8b7498/src%2Ftest%2Fui%2Flayout%2Fzero-sized-array-enum-niche.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1e7e74557285c6307c5cf78c88b0a3356d8b7498/src%2Ftest%2Fui%2Flayout%2Fzero-sized-array-enum-niche.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flayout%2Fzero-sized-array-enum-niche.stderr?ref=1e7e74557285c6307c5cf78c88b0a3356d8b7498", "patch": "@@ -97,6 +97,127 @@ error: layout_of(std::result::Result<[u32; 0], bool>) = Layout {\n LL | type AlignedResult = Result<[u32; 0], bool>;\n    | ^^^^^^^^^^^^^^^^^^\n \n+error: layout_of(MultipleAlignments) = Layout {\n+           fields: Arbitrary {\n+               offsets: [\n+                   Size(0 bytes),\n+               ],\n+               memory_index: [\n+                   0,\n+               ],\n+           },\n+           variants: Multiple {\n+               tag: Initialized {\n+                   value: Int(\n+                       I8,\n+                       false,\n+                   ),\n+                   valid_range: 0..=2,\n+               },\n+               tag_encoding: Direct,\n+               tag_field: 0,\n+               variants: [\n+                   Layout {\n+                       fields: Arbitrary {\n+                           offsets: [\n+                               Size(2 bytes),\n+                           ],\n+                           memory_index: [\n+                               0,\n+                           ],\n+                       },\n+                       variants: Single {\n+                           index: 0,\n+                       },\n+                       abi: Aggregate {\n+                           sized: true,\n+                       },\n+                       largest_niche: None,\n+                       align: AbiAndPrefAlign {\n+                           abi: Align(2 bytes),\n+                           pref: $PREF_ALIGN,\n+                       },\n+                       size: Size(2 bytes),\n+                   },\n+                   Layout {\n+                       fields: Arbitrary {\n+                           offsets: [\n+                               Size(4 bytes),\n+                           ],\n+                           memory_index: [\n+                               0,\n+                           ],\n+                       },\n+                       variants: Single {\n+                           index: 1,\n+                       },\n+                       abi: Aggregate {\n+                           sized: true,\n+                       },\n+                       largest_niche: None,\n+                       align: AbiAndPrefAlign {\n+                           abi: Align(4 bytes),\n+                           pref: $PREF_ALIGN,\n+                       },\n+                       size: Size(4 bytes),\n+                   },\n+                   Layout {\n+                       fields: Arbitrary {\n+                           offsets: [\n+                               Size(1 bytes),\n+                           ],\n+                           memory_index: [\n+                               0,\n+                           ],\n+                       },\n+                       variants: Single {\n+                           index: 2,\n+                       },\n+                       abi: Aggregate {\n+                           sized: true,\n+                       },\n+                       largest_niche: Some(\n+                           Niche {\n+                               offset: Size(1 bytes),\n+                               value: Int(\n+                                   I8,\n+                                   false,\n+                               ),\n+                               valid_range: 0..=1,\n+                           },\n+                       ),\n+                       align: AbiAndPrefAlign {\n+                           abi: Align(1 bytes),\n+                           pref: $PREF_ALIGN,\n+                       },\n+                       size: Size(2 bytes),\n+                   },\n+               ],\n+           },\n+           abi: Aggregate {\n+               sized: true,\n+           },\n+           largest_niche: Some(\n+               Niche {\n+                   offset: Size(0 bytes),\n+                   value: Int(\n+                       I8,\n+                       false,\n+                   ),\n+                   valid_range: 0..=2,\n+               },\n+           ),\n+           align: AbiAndPrefAlign {\n+               abi: Align(4 bytes),\n+               pref: $PREF_ALIGN,\n+           },\n+           size: Size(4 bytes),\n+       }\n+  --> $DIR/zero-sized-array-enum-niche.rs:21:1\n+   |\n+LL | enum MultipleAlignments {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^\n+\n error: layout_of(std::result::Result<[u32; 0], Packed<std::num::NonZeroU16>>) = Layout {\n            fields: Arbitrary {\n                offsets: [\n@@ -191,7 +312,7 @@ error: layout_of(std::result::Result<[u32; 0], Packed<std::num::NonZeroU16>>) =\n            },\n            size: Size(4 bytes),\n        }\n-  --> $DIR/zero-sized-array-enum-niche.rs:29:1\n+  --> $DIR/zero-sized-array-enum-niche.rs:37:1\n    |\n LL | type NicheLosesToTagged = Result<[u32; 0], Packed<std::num::NonZeroU16>>;\n    | ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -294,10 +415,10 @@ error: layout_of(std::result::Result<[u32; 0], Packed<U16IsZero>>) = Layout {\n            },\n            size: Size(4 bytes),\n        }\n-  --> $DIR/zero-sized-array-enum-niche.rs:36:1\n+  --> $DIR/zero-sized-array-enum-niche.rs:44:1\n    |\n LL | type NicheWinsOverTagged = Result<[u32; 0], Packed<U16IsZero>>;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 4 previous errors\n "}]}