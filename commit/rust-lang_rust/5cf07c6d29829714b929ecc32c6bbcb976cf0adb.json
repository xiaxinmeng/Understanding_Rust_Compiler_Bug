{"sha": "5cf07c6d29829714b929ecc32c6bbcb976cf0adb", "node_id": "C_kwDOAAsO6NoAKDVjZjA3YzZkMjk4Mjk3MTRiOTI5ZWNjMzJjNmJiY2I5NzZjZjBhZGI", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-05-22T16:19:10Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-05-22T16:19:10Z"}, "message": "Set correct `ParamEnv` for `derive_partial_eq_without_eq`", "tree": {"sha": "93ded519566ff67d4aa98ccb3aed3efa4cff1ef6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93ded519566ff67d4aa98ccb3aed3efa4cff1ef6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5cf07c6d29829714b929ecc32c6bbcb976cf0adb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5cf07c6d29829714b929ecc32c6bbcb976cf0adb", "html_url": "https://github.com/rust-lang/rust/commit/5cf07c6d29829714b929ecc32c6bbcb976cf0adb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5cf07c6d29829714b929ecc32c6bbcb976cf0adb/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91644d1f1d1a8029830d7c17595ec8c32b8ccde6", "url": "https://api.github.com/repos/rust-lang/rust/commits/91644d1f1d1a8029830d7c17595ec8c32b8ccde6", "html_url": "https://github.com/rust-lang/rust/commit/91644d1f1d1a8029830d7c17595ec8c32b8ccde6"}], "stats": {"total": 81, "additions": 67, "deletions": 14}, "files": [{"sha": "99347ebadc60277e7249796cd1048e1cafa388ff", "filename": "clippy_lints/src/derive.rs", "status": "modified", "additions": 38, "deletions": 9, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/5cf07c6d29829714b929ecc32c6bbcb976cf0adb/clippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf07c6d29829714b929ecc32c6bbcb976cf0adb/clippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderive.rs?ref=5cf07c6d29829714b929ecc32c6bbcb976cf0adb", "patch": "@@ -1,16 +1,17 @@\n use clippy_utils::diagnostics::{span_lint_and_help, span_lint_and_note, span_lint_and_sugg, span_lint_and_then};\n use clippy_utils::paths;\n-use clippy_utils::ty::{implements_trait, is_copy};\n+use clippy_utils::ty::{implements_trait, implements_trait_with_env, is_copy};\n use clippy_utils::{is_lint_allowed, match_def_path};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::intravisit::{walk_expr, walk_fn, walk_item, FnKind, Visitor};\n use rustc_hir::{\n-    BlockCheckMode, BodyId, Expr, ExprKind, FnDecl, HirId, Impl, Item, ItemKind, TraitRef, UnsafeSource, Unsafety,\n+    self as hir, BlockCheckMode, BodyId, Expr, ExprKind, FnDecl, HirId, Impl, Item, ItemKind, UnsafeSource, Unsafety,\n };\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::hir::nested_filter;\n-use rustc_middle::ty::{self, Ty};\n+use rustc_middle::ty::subst::GenericArg;\n+use rustc_middle::ty::{self, BoundConstness, ImplPolarity, ParamEnv, PredicateKind, TraitPredicate, TraitRef, Ty};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n use rustc_span::sym;\n@@ -224,7 +225,7 @@ impl<'tcx> LateLintPass<'tcx> for Derive {\n fn check_hash_peq<'tcx>(\n     cx: &LateContext<'tcx>,\n     span: Span,\n-    trait_ref: &TraitRef<'_>,\n+    trait_ref: &hir::TraitRef<'_>,\n     ty: Ty<'tcx>,\n     hash_is_automatically_derived: bool,\n ) {\n@@ -277,7 +278,7 @@ fn check_hash_peq<'tcx>(\n fn check_ord_partial_ord<'tcx>(\n     cx: &LateContext<'tcx>,\n     span: Span,\n-    trait_ref: &TraitRef<'_>,\n+    trait_ref: &hir::TraitRef<'_>,\n     ty: Ty<'tcx>,\n     ord_is_automatically_derived: bool,\n ) {\n@@ -328,7 +329,7 @@ fn check_ord_partial_ord<'tcx>(\n }\n \n /// Implementation of the `EXPL_IMPL_CLONE_ON_COPY` lint.\n-fn check_copy_clone<'tcx>(cx: &LateContext<'tcx>, item: &Item<'_>, trait_ref: &TraitRef<'_>, ty: Ty<'tcx>) {\n+fn check_copy_clone<'tcx>(cx: &LateContext<'tcx>, item: &Item<'_>, trait_ref: &hir::TraitRef<'_>, ty: Ty<'tcx>) {\n     let clone_id = match cx.tcx.lang_items().clone_trait() {\n         Some(id) if trait_ref.trait_def_id() == Some(id) => id,\n         _ => return,\n@@ -378,7 +379,7 @@ fn check_copy_clone<'tcx>(cx: &LateContext<'tcx>, item: &Item<'_>, trait_ref: &T\n fn check_unsafe_derive_deserialize<'tcx>(\n     cx: &LateContext<'tcx>,\n     item: &Item<'_>,\n-    trait_ref: &TraitRef<'_>,\n+    trait_ref: &hir::TraitRef<'_>,\n     ty: Ty<'tcx>,\n ) {\n     fn has_unsafe<'tcx>(cx: &LateContext<'tcx>, item: &'tcx Item<'_>) -> bool {\n@@ -455,13 +456,41 @@ impl<'tcx> Visitor<'tcx> for UnsafeVisitor<'_, 'tcx> {\n }\n \n /// Implementation of the `DERIVE_PARTIAL_EQ_WITHOUT_EQ` lint.\n-fn check_partial_eq_without_eq<'tcx>(cx: &LateContext<'tcx>, span: Span, trait_ref: &TraitRef<'_>, ty: Ty<'tcx>) {\n+fn check_partial_eq_without_eq<'tcx>(cx: &LateContext<'tcx>, span: Span, trait_ref: &hir::TraitRef<'_>, ty: Ty<'tcx>) {\n     if_chain! {\n         if let ty::Adt(adt, substs) = ty.kind();\n         if let Some(eq_trait_def_id) = cx.tcx.get_diagnostic_item(sym::Eq);\n+        if let Some(peq_trait_def_id) = cx.tcx.get_diagnostic_item(sym::PartialEq);\n         if let Some(def_id) = trait_ref.trait_def_id();\n         if cx.tcx.is_diagnostic_item(sym::PartialEq, def_id);\n-        if !implements_trait(cx, ty, eq_trait_def_id, substs);\n+        // New `ParamEnv` replacing `T: PartialEq` with `T: Eq`\n+        let param_env = ParamEnv::new(\n+            cx.tcx.mk_predicates(cx.param_env.caller_bounds().iter().map(|p| {\n+                let kind = p.kind();\n+                match kind.skip_binder() {\n+                    PredicateKind::Trait(p)\n+                        if p.trait_ref.def_id == peq_trait_def_id\n+                            && p.trait_ref.substs.get(0) == p.trait_ref.substs.get(1)\n+                            && matches!(p.trait_ref.self_ty().kind(), ty::Param(_))\n+                            && p.constness == BoundConstness::NotConst\n+                            && p.polarity == ImplPolarity::Positive =>\n+                    {\n+                        cx.tcx.mk_predicate(kind.rebind(PredicateKind::Trait(TraitPredicate {\n+                            trait_ref: TraitRef::new(\n+                                eq_trait_def_id,\n+                                cx.tcx.mk_substs([GenericArg::from(p.trait_ref.self_ty())].into_iter()),\n+                            ),\n+                            constness: BoundConstness::NotConst,\n+                            polarity: ImplPolarity::Positive,\n+                        })))\n+                    },\n+                    _ => p,\n+                }\n+            })),\n+            cx.param_env.reveal(),\n+            cx.param_env.constness(),\n+        );\n+        if !implements_trait_with_env(cx.tcx, param_env, ty, eq_trait_def_id, substs);\n         then {\n             // If all of our fields implement `Eq`, we can implement `Eq` too\n             for variant in adt.variants() {"}, {"sha": "203f33d35297610f55c373e0a254c615b451b7eb", "filename": "clippy_utils/src/ty.rs", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5cf07c6d29829714b929ecc32c6bbcb976cf0adb/clippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf07c6d29829714b929ecc32c6bbcb976cf0adb/clippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fty.rs?ref=5cf07c6d29829714b929ecc32c6bbcb976cf0adb", "patch": "@@ -13,7 +13,8 @@ use rustc_lint::LateContext;\n use rustc_middle::mir::interpret::{ConstValue, Scalar};\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind, Subst};\n use rustc_middle::ty::{\n-    self, AdtDef, Binder, FnSig, IntTy, Predicate, PredicateKind, Ty, TyCtxt, TypeFoldable, UintTy, VariantDiscr,\n+    self, AdtDef, Binder, FnSig, IntTy, ParamEnv, Predicate, PredicateKind, Ty, TyCtxt, TypeFoldable, UintTy,\n+    VariantDiscr,\n };\n use rustc_span::symbol::Ident;\n use rustc_span::{sym, Span, Symbol, DUMMY_SP};\n@@ -151,18 +152,29 @@ pub fn implements_trait<'tcx>(\n     ty: Ty<'tcx>,\n     trait_id: DefId,\n     ty_params: &[GenericArg<'tcx>],\n+) -> bool {\n+    implements_trait_with_env(cx.tcx, cx.param_env, ty, trait_id, ty_params)\n+}\n+\n+/// Same as `implements_trait` but allows using a `ParamEnv` different from the lint context.\n+pub fn implements_trait_with_env<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    param_env: ParamEnv<'tcx>,\n+    ty: Ty<'tcx>,\n+    trait_id: DefId,\n+    ty_params: &[GenericArg<'tcx>],\n ) -> bool {\n     // Clippy shouldn't have infer types\n     assert!(!ty.needs_infer());\n \n-    let ty = cx.tcx.erase_regions(ty);\n+    let ty = tcx.erase_regions(ty);\n     if ty.has_escaping_bound_vars() {\n         return false;\n     }\n-    let ty_params = cx.tcx.mk_substs(ty_params.iter());\n-    cx.tcx.infer_ctxt().enter(|infcx| {\n+    let ty_params = tcx.mk_substs(ty_params.iter());\n+    tcx.infer_ctxt().enter(|infcx| {\n         infcx\n-            .type_implements_trait(trait_id, ty, ty_params, cx.param_env)\n+            .type_implements_trait(trait_id, ty, ty_params, param_env)\n             .must_apply_modulo_regions()\n     })\n }"}, {"sha": "012780258fc3a7bfb9ae2a92683705eaca9c00e8", "filename": "tests/ui/derive_partial_eq_without_eq.fixed", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5cf07c6d29829714b929ecc32c6bbcb976cf0adb/tests%2Fui%2Fderive_partial_eq_without_eq.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/5cf07c6d29829714b929ecc32c6bbcb976cf0adb/tests%2Fui%2Fderive_partial_eq_without_eq.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderive_partial_eq_without_eq.fixed?ref=5cf07c6d29829714b929ecc32c6bbcb976cf0adb", "patch": "@@ -95,4 +95,10 @@ enum EnumNotEq {\n #[derive(Debug, PartialEq, Eq, Clone)]\n struct RustFixWithOtherDerives;\n \n+#[derive(PartialEq)]\n+struct Generic<T>(T);\n+\n+#[derive(PartialEq, Eq)]\n+struct GenericPhantom<T>(core::marker::PhantomData<T>);\n+\n fn main() {}"}, {"sha": "fc8285b0c6b753921d51eddc8388a876cfcd70cb", "filename": "tests/ui/derive_partial_eq_without_eq.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5cf07c6d29829714b929ecc32c6bbcb976cf0adb/tests%2Fui%2Fderive_partial_eq_without_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf07c6d29829714b929ecc32c6bbcb976cf0adb/tests%2Fui%2Fderive_partial_eq_without_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderive_partial_eq_without_eq.rs?ref=5cf07c6d29829714b929ecc32c6bbcb976cf0adb", "patch": "@@ -95,4 +95,10 @@ enum EnumNotEq {\n #[derive(Debug, PartialEq, Clone)]\n struct RustFixWithOtherDerives;\n \n+#[derive(PartialEq)]\n+struct Generic<T>(T);\n+\n+#[derive(PartialEq, Eq)]\n+struct GenericPhantom<T>(core::marker::PhantomData<T>);\n+\n fn main() {}"}]}