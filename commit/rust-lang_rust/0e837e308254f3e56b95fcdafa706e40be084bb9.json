{"sha": "0e837e308254f3e56b95fcdafa706e40be084bb9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlODM3ZTMwODI1NGYzZTU2Yjk1ZmNkYWZhNzA2ZTQwYmUwODRiYjk=", "commit": {"author": {"name": "Kitsu", "email": "mail@kitsu.me", "date": "2020-04-18T13:33:01Z"}, "committer": {"name": "Kitsu", "email": "mail@kitsu.me", "date": "2020-04-18T13:33:01Z"}, "message": "Simplify FileHash ctor", "tree": {"sha": "4c4faedec9afd9bef1fb726539d375afe8a1b4cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c4faedec9afd9bef1fb726539d375afe8a1b4cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e837e308254f3e56b95fcdafa706e40be084bb9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e837e308254f3e56b95fcdafa706e40be084bb9", "html_url": "https://github.com/rust-lang/rust/commit/0e837e308254f3e56b95fcdafa706e40be084bb9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e837e308254f3e56b95fcdafa706e40be084bb9/comments", "author": {"login": "l4l", "id": 5658339, "node_id": "MDQ6VXNlcjU2NTgzMzk=", "avatar_url": "https://avatars.githubusercontent.com/u/5658339?v=4", "gravatar_id": "", "url": "https://api.github.com/users/l4l", "html_url": "https://github.com/l4l", "followers_url": "https://api.github.com/users/l4l/followers", "following_url": "https://api.github.com/users/l4l/following{/other_user}", "gists_url": "https://api.github.com/users/l4l/gists{/gist_id}", "starred_url": "https://api.github.com/users/l4l/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/l4l/subscriptions", "organizations_url": "https://api.github.com/users/l4l/orgs", "repos_url": "https://api.github.com/users/l4l/repos", "events_url": "https://api.github.com/users/l4l/events{/privacy}", "received_events_url": "https://api.github.com/users/l4l/received_events", "type": "User", "site_admin": false}, "committer": {"login": "l4l", "id": 5658339, "node_id": "MDQ6VXNlcjU2NTgzMzk=", "avatar_url": "https://avatars.githubusercontent.com/u/5658339?v=4", "gravatar_id": "", "url": "https://api.github.com/users/l4l", "html_url": "https://github.com/l4l", "followers_url": "https://api.github.com/users/l4l/followers", "following_url": "https://api.github.com/users/l4l/following{/other_user}", "gists_url": "https://api.github.com/users/l4l/gists{/gist_id}", "starred_url": "https://api.github.com/users/l4l/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/l4l/subscriptions", "organizations_url": "https://api.github.com/users/l4l/orgs", "repos_url": "https://api.github.com/users/l4l/repos", "events_url": "https://api.github.com/users/l4l/events{/privacy}", "received_events_url": "https://api.github.com/users/l4l/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "710da05af7e4ee13c00b9019752b6076ae6b71b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/710da05af7e4ee13c00b9019752b6076ae6b71b4", "html_url": "https://github.com/rust-lang/rust/commit/710da05af7e4ee13c00b9019752b6076ae6b71b4"}], "stats": {"total": 30, "additions": 11, "deletions": 19}, "files": [{"sha": "ae3d39183ba0bb5f8fdfca779f4fcbeeede499f1", "filename": "src/debuginfo/line_info.rs", "status": "modified", "additions": 9, "deletions": 16, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0e837e308254f3e56b95fcdafa706e40be084bb9/src%2Fdebuginfo%2Fline_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e837e308254f3e56b95fcdafa706e40be084bb9/src%2Fdebuginfo%2Fline_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Fline_info.rs?ref=0e837e308254f3e56b95fcdafa706e40be084bb9", "patch": "@@ -1,5 +1,4 @@\n use std::ffi::OsStr;\n-use std::convert::TryFrom;\n use std::path::{Component, Path};\n \n use crate::prelude::*;\n@@ -42,25 +41,19 @@ pub(crate) const MD5_LEN: usize = 16;\n pub struct FileHash([u8; MD5_LEN]);\n \n impl FileHash {\n-    pub fn inner(self) -> [u8; MD5_LEN] {\n-        self.0\n-    }\n-}\n-\n-pub struct UnsupportedHashType;\n-\n-impl TryFrom<SourceFileHash> for FileHash {\n-    type Error = UnsupportedHashType;\n-\n-    fn try_from(hash: SourceFileHash) -> Result<Self, Self::Error> {\n+    pub fn from_source_hash(hash: SourceFileHash) -> Option<Self> {\n         if hash.kind == SourceFileHashAlgorithm::Md5 {\n             let mut buf = [0u8; MD5_LEN];\n             buf.copy_from_slice(hash.hash_bytes());\n-            Ok(Self(buf))\n+            Some(Self(buf))\n         } else {\n-            Err(UnsupportedHashType)\n+            None\n         }\n     }\n+\n+    pub fn inner(self) -> [u8; MD5_LEN] {\n+        self.0\n+    }\n }\n \n fn line_program_add_file(\n@@ -86,9 +79,9 @@ fn line_program_add_file(\n                 line_strings,\n             );\n \n-            let file_hash = FileHash::try_from(file.src_hash);\n+            let file_hash = FileHash::from_source_hash(file.src_hash);\n \n-            line_program.file_has_md5 = file_hash.is_ok();\n+            line_program.file_has_md5 = file_hash.is_some();\n             line_program.add_file(file_name, dir_id, Some(FileInfo {\n                 timestamp: 0,\n                 size: 0,"}, {"sha": "042beb4de1bb7a9b2a9249a8dea401d55b8c2293", "filename": "src/debuginfo/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0e837e308254f3e56b95fcdafa706e40be084bb9/src%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e837e308254f3e56b95fcdafa706e40be084bb9/src%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Fmod.rs?ref=0e837e308254f3e56b95fcdafa706e40be084bb9", "patch": "@@ -1,8 +1,6 @@\n mod emit;\n mod line_info;\n \n-use std::convert::TryFrom;\n-\n use crate::prelude::*;\n \n use rustc_span::FileName;\n@@ -67,7 +65,8 @@ impl<'tcx> DebugContext<'tcx> {\n                 let hash = tcx.sess\n                     .source_map()\n                     .get_source_file(&FileName::Real(path))\n-                    .and_then(|f| line_info::FileHash::try_from(f.src_hash).ok());\n+                    .map(|f| f.src_hash)\n+                    .and_then(line_info::FileHash::from_source_hash);\n                 (name, hash)\n             },\n             None => (tcx.crate_name(LOCAL_CRATE).to_string(), None),"}]}