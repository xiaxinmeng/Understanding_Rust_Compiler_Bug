{"sha": "f9cc01126954e2fde28162fd83b4ef3e447526a6", "node_id": "C_kwDOAAsO6NoAKGY5Y2MwMTEyNjk1NGUyZmRlMjgxNjJmZDgzYjRlZjNlNDQ3NTI2YTY", "commit": {"author": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2022-12-30T11:11:05Z"}, "committer": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2022-12-30T11:17:17Z"}, "message": "Tidy up tidy error codes check", "tree": {"sha": "54e2d074ed13424d2f2d3f5e25482a9ba385bff5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54e2d074ed13424d2f2d3f5e25482a9ba385bff5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9cc01126954e2fde28162fd83b4ef3e447526a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9cc01126954e2fde28162fd83b4ef3e447526a6", "html_url": "https://github.com/rust-lang/rust/commit/f9cc01126954e2fde28162fd83b4ef3e447526a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9cc01126954e2fde28162fd83b4ef3e447526a6/comments", "author": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5e5fcb0b758fcf7f149cc9206155dcfa18ec909", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5e5fcb0b758fcf7f149cc9206155dcfa18ec909", "html_url": "https://github.com/rust-lang/rust/commit/e5e5fcb0b758fcf7f149cc9206155dcfa18ec909"}], "stats": {"total": 37, "additions": 11, "deletions": 26}, "files": [{"sha": "40a46c630d70a2de59e468ae5ac75eab44ed717a", "filename": "src/tools/tidy/src/error_codes_check.rs", "status": "modified", "additions": 11, "deletions": 26, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/f9cc01126954e2fde28162fd83b4ef3e447526a6/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9cc01126954e2fde28162fd83b4ef3e447526a6/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes_check.rs?ref=f9cc01126954e2fde28162fd83b4ef3e447526a6", "patch": "@@ -80,15 +80,6 @@ fn check_if_error_code_is_test_in_explanation(f: &str, err_code: &str) -> bool {\n     ignore_found\n }\n \n-macro_rules! some_or_continue {\n-    ($e:expr) => {\n-        match $e {\n-            Some(e) => e,\n-            None => continue,\n-        }\n-    };\n-}\n-\n fn extract_error_codes(\n     f: &str,\n     error_codes: &mut HashMap<String, ErrorCodeStatus>,\n@@ -122,10 +113,16 @@ fn extract_error_codes(\n                     Some((file_name, _)) => file_name,\n                 },\n             };\n-            let path = some_or_continue!(path.parent())\n+\n+            let Some(parent) = path.parent() else {\n+                continue;\n+            };\n+\n+            let path = parent\n                 .join(md_file_name)\n                 .canonicalize()\n                 .expect(\"failed to canonicalize error explanation file path\");\n+\n             match read_to_string(&path) {\n                 Ok(content) => {\n                     let has_test = check_if_error_code_is_test_in_explanation(&content, &err_code);\n@@ -215,8 +212,6 @@ pub fn check(paths: &[&Path], bad: &mut bool) {\n     // * #[error = \"E0111\"]\n     let regex = Regex::new(r#\"[(,\"\\s](E\\d{4})[,)\"]\"#).unwrap();\n \n-    println!(\"Checking which error codes lack tests...\");\n-\n     for path in paths {\n         walk(path, &mut filter_dirs, &mut |entry, contents| {\n             let file_name = entry.file_name();\n@@ -245,20 +240,15 @@ pub fn check(paths: &[&Path], bad: &mut bool) {\n         });\n     }\n     if found_explanations == 0 {\n-        eprintln!(\"No error code explanation was tested!\");\n-        *bad = true;\n+        tidy_error!(bad, \"No error code explanation was tested!\");\n     }\n     if found_tests == 0 {\n-        eprintln!(\"No error code was found in compilation errors!\");\n-        *bad = true;\n+        tidy_error!(bad, \"No error code was found in compilation errors!\");\n     }\n     if explanations.is_empty() {\n-        eprintln!(\"No error code explanation was found!\");\n-        *bad = true;\n+        tidy_error!(bad, \"No error code explanation was found!\");\n     }\n     if errors.is_empty() {\n-        println!(\"Found {} error codes\", error_codes.len());\n-\n         for (err_code, error_status) in &error_codes {\n             if !error_status.has_test && !EXEMPTED_FROM_TEST.contains(&err_code.as_str()) {\n                 errors.push(format!(\"Error code {err_code} needs to have at least one UI test!\"));\n@@ -310,11 +300,6 @@ pub fn check(paths: &[&Path], bad: &mut bool) {\n     }\n     errors.sort();\n     for err in &errors {\n-        eprintln!(\"{err}\");\n-    }\n-    println!(\"Found {} error(s) in error codes\", errors.len());\n-    if !errors.is_empty() {\n-        *bad = true;\n+        tidy_error!(bad, \"{err}\");\n     }\n-    println!(\"Done!\");\n }"}]}