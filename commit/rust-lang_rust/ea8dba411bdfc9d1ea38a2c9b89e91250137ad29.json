{"sha": "ea8dba411bdfc9d1ea38a2c9b89e91250137ad29", "node_id": "C_kwDOAAsO6NoAKGVhOGRiYTQxMWJkZmM5ZDFlYTM4YTJjOWI4OWU5MTI1MDEzN2FkMjk", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-06-29T13:31:11Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-06-29T13:31:11Z"}, "message": "improve atomics test coverage", "tree": {"sha": "2f4011810355b7cc15f03142e037d37f6296f761", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f4011810355b7cc15f03142e037d37f6296f761"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea8dba411bdfc9d1ea38a2c9b89e91250137ad29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea8dba411bdfc9d1ea38a2c9b89e91250137ad29", "html_url": "https://github.com/rust-lang/rust/commit/ea8dba411bdfc9d1ea38a2c9b89e91250137ad29", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea8dba411bdfc9d1ea38a2c9b89e91250137ad29/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "28dea673bec32b5d59545912f53ad22b8944f3a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/28dea673bec32b5d59545912f53ad22b8944f3a4", "html_url": "https://github.com/rust-lang/rust/commit/28dea673bec32b5d59545912f53ad22b8944f3a4"}], "stats": {"total": 38, "additions": 34, "deletions": 4}, "files": [{"sha": "07b5d5f3d236f014b144b9f5232ede4822ac933c", "filename": "tests/pass/atomic.rs", "status": "modified", "additions": 34, "deletions": 4, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/ea8dba411bdfc9d1ea38a2c9b89e91250137ad29/tests%2Fpass%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea8dba411bdfc9d1ea38a2c9b89e91250137ad29/tests%2Fpass%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fatomic.rs?ref=ea8dba411bdfc9d1ea38a2c9b89e91250137ad29", "patch": "@@ -2,7 +2,7 @@ use std::sync::atomic::{compiler_fence, fence, AtomicBool, AtomicIsize, AtomicU6\n \n fn main() {\n     atomic_bool();\n-    atomic_isize();\n+    atomic_all_ops();\n     atomic_u64();\n     atomic_fences();\n     weak_sometimes_fails();\n@@ -25,6 +25,7 @@ fn atomic_bool() {\n         assert_eq!(*ATOMIC.get_mut(), false);\n     }\n }\n+\n // There isn't a trait to use to make this generic, so just use a macro\n macro_rules! compare_exchange_weak_loop {\n     ($atom:expr, $from:expr, $to:expr, $succ_order:expr, $fail_order:expr) => {\n@@ -39,10 +40,40 @@ macro_rules! compare_exchange_weak_loop {\n         }\n     };\n }\n-fn atomic_isize() {\n+\n+/// Make sure we can handle all the intrinsics\n+fn atomic_all_ops() {\n     static ATOMIC: AtomicIsize = AtomicIsize::new(0);\n+    static ATOMIC_UNSIGNED: AtomicU64 = AtomicU64::new(0);\n+\n+\n+    // loads\n+    for o in [Relaxed, Acquire, SeqCst] {\n+        ATOMIC.load(o);\n+    }\n \n-    // Make sure trans can emit all the intrinsics correctly\n+    // stores\n+    for o in [Relaxed, Release, SeqCst] {\n+        ATOMIC.store(1, o);\n+    }\n+\n+    // most RMWs\n+    for o in [Relaxed, Release, Acquire, AcqRel, SeqCst] {\n+        ATOMIC.swap(0, o);\n+        ATOMIC.fetch_or(0, o);\n+        ATOMIC.fetch_xor(0, o);\n+        ATOMIC.fetch_and(0, o);\n+        ATOMIC.fetch_nand(0, o);\n+        ATOMIC.fetch_add(0, o);\n+        ATOMIC.fetch_sub(0, o);\n+        ATOMIC.fetch_min(0, o);\n+        ATOMIC.fetch_max(0, o);\n+        ATOMIC_UNSIGNED.fetch_min(0, o);\n+        ATOMIC_UNSIGNED.fetch_max(0, o);\n+    }\n+\n+    // RMWs with deparate failure ordering\n+    ATOMIC.store(0, SeqCst);\n     assert_eq!(ATOMIC.compare_exchange(0, 1, Relaxed, Relaxed), Ok(0));\n     assert_eq!(ATOMIC.compare_exchange(0, 2, Acquire, Relaxed), Err(1));\n     assert_eq!(ATOMIC.compare_exchange(0, 1, Release, Relaxed), Err(1));\n@@ -59,7 +90,6 @@ fn atomic_isize() {\n     assert_eq!(ATOMIC.compare_exchange_weak(0, 1, Release, Relaxed), Err(1));\n     compare_exchange_weak_loop!(ATOMIC, 1, 0, AcqRel, Relaxed);\n     assert_eq!(ATOMIC.load(Relaxed), 0);\n-    ATOMIC.compare_exchange_weak(0, 1, AcqRel, Relaxed).ok();\n     ATOMIC.compare_exchange_weak(0, 1, SeqCst, Relaxed).ok();\n     ATOMIC.compare_exchange_weak(0, 1, Acquire, Acquire).ok();\n     ATOMIC.compare_exchange_weak(0, 1, AcqRel, Acquire).ok();"}]}