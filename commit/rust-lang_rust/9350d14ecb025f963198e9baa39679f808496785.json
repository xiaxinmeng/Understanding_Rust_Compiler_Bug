{"sha": "9350d14ecb025f963198e9baa39679f808496785", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzNTBkMTRlY2IwMjVmOTYzMTk4ZTliYWEzOTY3OWY4MDg0OTY3ODU=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2013-03-20T20:48:05Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2013-03-20T20:48:57Z"}, "message": "add stage3 markers where necessary for dist-snap", "tree": {"sha": "4ca6ca35465d94dea72c885b040c310297b7293d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ca6ca35465d94dea72c885b040c310297b7293d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9350d14ecb025f963198e9baa39679f808496785", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9350d14ecb025f963198e9baa39679f808496785", "html_url": "https://github.com/rust-lang/rust/commit/9350d14ecb025f963198e9baa39679f808496785", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9350d14ecb025f963198e9baa39679f808496785/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb9e1e2660990012c35ee975530b0b8b3136baf0", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb9e1e2660990012c35ee975530b0b8b3136baf0", "html_url": "https://github.com/rust-lang/rust/commit/bb9e1e2660990012c35ee975530b0b8b3136baf0"}], "stats": {"total": 8, "additions": 8, "deletions": 0}, "files": [{"sha": "255e1966f378e682cea5ce313b9eb94ddbeccdd8", "filename": "src/libcore/comm.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9350d14ecb025f963198e9baa39679f808496785/src%2Flibcore%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9350d14ecb025f963198e9baa39679f808496785/src%2Flibcore%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcomm.rs?ref=9350d14ecb025f963198e9baa39679f808496785", "patch": "@@ -110,6 +110,7 @@ pub fn stream<T:Owned>() -> (Port<T>, Chan<T>) {\n // required.\n #[cfg(stage1)]\n #[cfg(stage2)]\n+#[cfg(stage3)]\n pub impl<T: Owned> Chan<T> {\n     fn send(&self, x: T) { chan_send(self, x) }\n     fn try_send(&self, x: T) -> bool { chan_try_send(self, x) }\n@@ -149,6 +150,7 @@ fn chan_try_send<T:Owned>(self: &Chan<T>, x: T) -> bool {\n // Use an inherent impl so that imports are not required:\n #[cfg(stage1)]\n #[cfg(stage2)]\n+#[cfg(stage3)]\n pub impl<T: Owned> Port<T> {\n     fn recv(&self) -> T { port_recv(self) }\n     fn try_recv(&self) -> Option<T> { port_try_recv(self) }\n@@ -226,6 +228,7 @@ pub fn PortSet<T: Owned>() -> PortSet<T>{\n // Use an inherent impl so that imports are not required:\n #[cfg(stage1)]\n #[cfg(stage2)]\n+#[cfg(stage3)]\n pub impl<T:Owned> PortSet<T> {\n     fn recv(&self) -> T { port_set_recv(self) }\n     fn try_recv(&self) -> Option<T> { port_set_try_recv(self) }\n@@ -301,6 +304,7 @@ pub type SharedChan<T> = unstable::Exclusive<Chan<T>>;\n \n #[cfg(stage1)]\n #[cfg(stage2)]\n+#[cfg(stage3)]\n pub impl<T: Owned> SharedChan<T> {\n     fn send(&self, x: T) { shared_chan_send(self, x) }\n     fn try_send(&self, x: T) -> bool { shared_chan_try_send(self, x) }"}, {"sha": "97dcc4030ff5d0a93e3cee0af88c3e73ca966505", "filename": "src/libcore/io.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9350d14ecb025f963198e9baa39679f808496785/src%2Flibcore%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9350d14ecb025f963198e9baa39679f808496785/src%2Flibcore%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fio.rs?ref=9350d14ecb025f963198e9baa39679f808496785", "patch": "@@ -77,6 +77,7 @@ pub trait Reader {\n \n #[cfg(stage1)]\n #[cfg(stage2)]\n+#[cfg(stage3)]\n impl Reader for @Reader {\n     fn read(&self, bytes: &mut [u8], len: uint) -> uint {\n         self.read(bytes, len)\n@@ -659,6 +660,7 @@ pub trait Writer {\n \n #[cfg(stage1)]\n #[cfg(stage2)]\n+#[cfg(stage3)]\n impl Writer for @Writer {\n     fn write(&self, v: &[const u8]) { self.write(v) }\n     fn seek(&self, a: int, b: SeekStyle) { self.seek(a, b) }"}, {"sha": "8b08f5e45320770316db8b14b765230861a68e46", "filename": "src/librustc/front/test.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9350d14ecb025f963198e9baa39679f808496785/src%2Flibrustc%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9350d14ecb025f963198e9baa39679f808496785/src%2Flibrustc%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Ftest.rs?ref=9350d14ecb025f963198e9baa39679f808496785", "patch": "@@ -369,6 +369,7 @@ fn mk_tests(cx: &TestCtxt) -> @ast::item {\n \n #[cfg(stage1)]\n #[cfg(stage2)]\n+#[cfg(stage3)]\n fn mk_tests(cx: &TestCtxt) -> @ast::item {\n \n     let ext_cx = cx.ext_cx;"}, {"sha": "23ae7666bb4d8a7d5d60aca709fb1810a860f3d1", "filename": "src/libstd/comm.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9350d14ecb025f963198e9baa39679f808496785/src%2Flibstd%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9350d14ecb025f963198e9baa39679f808496785/src%2Flibstd%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcomm.rs?ref=9350d14ecb025f963198e9baa39679f808496785", "patch": "@@ -28,6 +28,7 @@ pub struct DuplexStream<T, U> {\n // Allow these methods to be used without import:\n #[cfg(stage1)]\n #[cfg(stage2)]\n+#[cfg(stage3)]\n pub impl<T:Owned,U:Owned> DuplexStream<T, U> {\n     fn send(&self, x: T) {\n         self.chan.send(x)"}]}