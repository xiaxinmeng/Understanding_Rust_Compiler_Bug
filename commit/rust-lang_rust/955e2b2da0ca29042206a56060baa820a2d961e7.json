{"sha": "955e2b2da0ca29042206a56060baa820a2d961e7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1NWUyYjJkYTBjYTI5MDQyMjA2YTU2MDYwYmFhODIwYTJkOTYxZTc=", "commit": {"author": {"name": "Ellen", "email": "supbscripter@gmail.com", "date": "2021-09-07T11:05:11Z"}, "committer": {"name": "Ellen", "email": "supbscripter@gmail.com", "date": "2021-09-09T00:32:03Z"}, "message": "nits", "tree": {"sha": "ca5179405b3ea76222d3123f9df9493cdc3de6df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca5179405b3ea76222d3123f9df9493cdc3de6df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/955e2b2da0ca29042206a56060baa820a2d961e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/955e2b2da0ca29042206a56060baa820a2d961e7", "html_url": "https://github.com/rust-lang/rust/commit/955e2b2da0ca29042206a56060baa820a2d961e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/955e2b2da0ca29042206a56060baa820a2d961e7/comments", "author": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "committer": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79be0802557089b408776ba161d95f8f4b5d0683", "url": "https://api.github.com/repos/rust-lang/rust/commits/79be0802557089b408776ba161d95f8f4b5d0683", "html_url": "https://github.com/rust-lang/rust/commit/79be0802557089b408776ba161d95f8f4b5d0683"}], "stats": {"total": 81, "additions": 43, "deletions": 38}, "files": [{"sha": "567f65e83d98c5fa3e9e934e028cb2c162d47b35", "filename": "compiler/rustc_middle/src/mir/query.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/955e2b2da0ca29042206a56060baa820a2d961e7/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/955e2b2da0ca29042206a56060baa820a2d961e7/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs?ref=955e2b2da0ca29042206a56060baa820a2d961e7", "patch": "@@ -1,7 +1,6 @@\n //! Values computed by queries that use MIR.\n \n use crate::mir::{Body, Promoted};\n-use crate::thir::abstract_const;\n use crate::ty::{self, Ty, TyCtxt};\n use rustc_data_structures::sync::Lrc;\n use rustc_data_structures::vec_map::VecMap;\n@@ -432,16 +431,4 @@ impl<'tcx> TyCtxt<'tcx> {\n             self.mir_for_ctfe(def.did)\n         }\n     }\n-\n-    #[inline]\n-    pub fn thir_abstract_const_opt_const_arg(\n-        self,\n-        def: ty::WithOptConstParam<DefId>,\n-    ) -> Result<Option<&'tcx [abstract_const::Node<'tcx>]>, ErrorReported> {\n-        if let Some((did, param_did)) = def.as_const_arg() {\n-            self.thir_abstract_const_of_const_arg((did, param_did))\n-        } else {\n-            self.thir_abstract_const(def.did)\n-        }\n-    }\n }"}, {"sha": "00f1390eb4d4eac8612789cf549242f797cf3960", "filename": "compiler/rustc_middle/src/thir/abstract_const.rs", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/955e2b2da0ca29042206a56060baa820a2d961e7/compiler%2Frustc_middle%2Fsrc%2Fthir%2Fabstract_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/955e2b2da0ca29042206a56060baa820a2d961e7/compiler%2Frustc_middle%2Fsrc%2Fthir%2Fabstract_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fthir%2Fabstract_const.rs?ref=955e2b2da0ca29042206a56060baa820a2d961e7", "patch": "@@ -1,6 +1,7 @@\n //! A subset of a mir body used for const evaluatability checking.\n use crate::mir;\n-use crate::ty::{self, Ty};\n+use crate::ty::{self, Ty, TyCtxt};\n+use rustc_errors::ErrorReported;\n \n rustc_index::newtype_index! {\n     /// An index into an `AbstractConst`.\n@@ -22,17 +23,31 @@ pub enum Node<'tcx> {\n \n #[derive(Debug, Copy, Clone, PartialEq, Eq, HashStable, TyEncodable, TyDecodable)]\n pub enum NotConstEvaluatable {\n-    Error(rustc_errors::ErrorReported),\n+    Error(ErrorReported),\n     MentionsInfer,\n     MentionsParam,\n }\n \n-impl From<rustc_errors::ErrorReported> for NotConstEvaluatable {\n-    fn from(e: rustc_errors::ErrorReported) -> NotConstEvaluatable {\n+impl From<ErrorReported> for NotConstEvaluatable {\n+    fn from(e: ErrorReported) -> NotConstEvaluatable {\n         NotConstEvaluatable::Error(e)\n     }\n }\n \n TrivialTypeFoldableAndLiftImpls! {\n     NotConstEvaluatable,\n }\n+\n+impl<'tcx> TyCtxt<'tcx> {\n+    #[inline]\n+    pub fn thir_abstract_const_opt_const_arg(\n+        self,\n+        def: ty::WithOptConstParam<rustc_hir::def_id::DefId>,\n+    ) -> Result<Option<&'tcx [Node<'tcx>]>, ErrorReported> {\n+        if let Some((did, param_did)) = def.as_const_arg() {\n+            self.thir_abstract_const_of_const_arg((did, param_did))\n+        } else {\n+            self.thir_abstract_const(def.did)\n+        }\n+    }\n+}"}, {"sha": "7fc15e02fcd307511041e4743d8e851ca78382e4", "filename": "compiler/rustc_middle/src/thir/visit.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/955e2b2da0ca29042206a56060baa820a2d961e7/compiler%2Frustc_middle%2Fsrc%2Fthir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/955e2b2da0ca29042206a56060baa820a2d961e7/compiler%2Frustc_middle%2Fsrc%2Fthir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fthir%2Fvisit.rs?ref=955e2b2da0ca29042206a56060baa820a2d961e7", "patch": "@@ -1,4 +1,8 @@\n-use super::*;\n+use super::{\n+    Arm, Block, Expr, ExprKind, Guard, InlineAsmOperand, Pat, PatKind, Stmt, StmtKind, Thir,\n+};\n+use rustc_middle::ty::Const;\n+\n pub trait Visitor<'a, 'tcx: 'a>: Sized {\n     fn thir(&self) -> &'a Thir<'tcx>;\n "}, {"sha": "1845b9d1314b101be0441eff6a92cb26565ddf14", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 19, "deletions": 20, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/955e2b2da0ca29042206a56060baa820a2d961e7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/955e2b2da0ca29042206a56060baa820a2d961e7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=955e2b2da0ca29042206a56060baa820a2d961e7", "patch": "@@ -8,7 +8,6 @@\n //! In this case we try to build an abstract representation of this constant using\n //! `thir_abstract_const` which can then be checked for structural equality with other\n //! generic constants mentioned in the `caller_bounds` of the current environment.\n-use rustc_data_structures::sync::Lrc;\n use rustc_errors::ErrorReported;\n use rustc_hir::def::DefKind;\n use rustc_index::vec::IndexVec;\n@@ -227,8 +226,7 @@ impl<'tcx> AbstractConst<'tcx> {\n struct AbstractConstBuilder<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n     body_id: thir::ExprId,\n-    /// `Lrc` is used to avoid borrowck difficulties in `recurse_build`\n-    body: Lrc<&'a thir::Thir<'tcx>>,\n+    body: &'a thir::Thir<'tcx>,\n     /// The current WIP node tree.\n     nodes: IndexVec<NodeId, Node<'tcx>>,\n }\n@@ -253,8 +251,7 @@ impl<'a, 'tcx> AbstractConstBuilder<'a, 'tcx> {\n         tcx: TyCtxt<'tcx>,\n         (body, body_id): (&'a thir::Thir<'tcx>, thir::ExprId),\n     ) -> Result<Option<AbstractConstBuilder<'a, 'tcx>>, ErrorReported> {\n-        let builder =\n-            AbstractConstBuilder { tcx, body_id, body: Lrc::new(body), nodes: IndexVec::new() };\n+        let builder = AbstractConstBuilder { tcx, body_id, body, nodes: IndexVec::new() };\n \n         struct IsThirPolymorphic<'a, 'tcx> {\n             is_poly: bool,\n@@ -328,7 +325,7 @@ impl<'a, 'tcx> AbstractConstBuilder<'a, 'tcx> {\n \n     fn recurse_build(&mut self, node: thir::ExprId) -> Result<NodeId, ErrorReported> {\n         use thir::ExprKind;\n-        let node = &self.body.clone().exprs[node];\n+        let node = &self.body.exprs[node];\n         debug!(\"recurse_build: node={:?}\", node);\n         Ok(match &node.kind {\n             // I dont know if handling of these 3 is correct\n@@ -338,10 +335,9 @@ impl<'a, 'tcx> AbstractConstBuilder<'a, 'tcx> {\n \n             // subtle: associated consts are literals this arm handles\n             // `<T as Trait>::ASSOC` as well as `12`\n-            &ExprKind::Literal { literal, .. }\n-            | &ExprKind::StaticRef { literal, .. } => self.nodes.push(Node::Leaf(literal)),\n+            &ExprKind::Literal { literal, .. } => self.nodes.push(Node::Leaf(literal)),\n \n-            // FIXME(generic_const_exprs) handle `from_hir_call` field\n+            // FIXME(generic_const_exprs): Handle `from_hir_call` field\n             ExprKind::Call { fun, args,  .. } => {\n                 let fun = self.recurse_build(*fun)?;\n \n@@ -361,24 +357,24 @@ impl<'a, 'tcx> AbstractConstBuilder<'a, 'tcx> {\n                 let arg = self.recurse_build(arg)?;\n                 self.nodes.push(Node::UnaryOp(op, arg))\n             },\n-            // this is necessary so that the following compiles:\n+            // This is necessary so that the following compiles:\n             //\n             // ```\n             // fn foo<const N: usize>(a: [(); N + 1]) {\n             //     bar::<{ N + 1 }>();\n             // }\n             // ```\n             ExprKind::Block { body: thir::Block { stmts: box [], expr: Some(e), .. }} => self.recurse_build(*e)?,\n-            // ExprKind::Use happens when a `hir::ExprKind::Cast` is a\n+            // `ExprKind::Use` happens when a `hir::ExprKind::Cast` is a\n             // \"coercion cast\" i.e. using a coercion or is a no-op.\n-            // this is important so that `N as usize as usize` doesnt unify with `N as usize`\n+            // This is important so that `N as usize as usize` doesnt unify with `N as usize`. (untested)\n             &ExprKind::Use { source}\n             | &ExprKind::Cast { source } => {\n                 let arg = self.recurse_build(source)?;\n                 self.nodes.push(Node::Cast(arg, node.ty))\n             },\n \n-            // FIXME(generic_const_exprs) we want to support these\n+            // FIXME(generic_const_exprs): We may want to support these.\n             ExprKind::AddressOf { .. }\n             | ExprKind::Borrow { .. }\n             | ExprKind::Deref { .. }\n@@ -390,21 +386,24 @@ impl<'a, 'tcx> AbstractConstBuilder<'a, 'tcx> {\n             | ExprKind::Index { .. }\n             | ExprKind::Field { .. }\n             | ExprKind::ConstBlock { .. }\n-            | ExprKind::Adt(_) => return self.error(\n+            | ExprKind::Adt(_) => self.error(\n                     Some(node.span),\n                     \"unsupported operation in generic constant, this may be supported in the future\",\n-                ).map(|never| never),\n+                )?,\n \n             ExprKind::Match { .. }\n-            | ExprKind::VarRef { .. } //\n-            | ExprKind::UpvarRef { .. } // we dont permit let stmts so...\n+            // we dont permit let stmts so `VarRef` and `UpvarRef` cant happen\n+            | ExprKind::VarRef { .. }\n+            | ExprKind::UpvarRef { .. }\n             | ExprKind::Closure { .. }\n             | ExprKind::Let { .. } // let expressions imply control flow\n             | ExprKind::Loop { .. }\n             | ExprKind::Assign { .. }\n+            | ExprKind::StaticRef { .. }\n             | ExprKind::LogicalOp { .. }\n-            | ExprKind::Unary { .. } //\n-            | ExprKind::Binary { .. } // we handle valid unary/binary ops above\n+            // we handle valid unary/binary ops above\n+            | ExprKind::Unary { .. }\n+            | ExprKind::Binary { .. }\n             | ExprKind::Break { .. }\n             | ExprKind::Continue { .. }\n             | ExprKind::If { .. }\n@@ -415,7 +414,7 @@ impl<'a, 'tcx> AbstractConstBuilder<'a, 'tcx> {\n             | ExprKind::Box { .. } // allocations not allowed in constants\n             | ExprKind::AssignOp { .. }\n             | ExprKind::InlineAsm { .. }\n-            | ExprKind::Yield { .. } => return self.error(Some(node.span), \"unsupported operation in generic constant\").map(|never| never),\n+            | ExprKind::Yield { .. } => self.error(Some(node.span), \"unsupported operation in generic constant\")?,\n         })\n     }\n }"}]}