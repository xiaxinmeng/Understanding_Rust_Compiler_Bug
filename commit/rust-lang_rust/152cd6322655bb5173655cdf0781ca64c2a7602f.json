{"sha": "152cd6322655bb5173655cdf0781ca64c2a7602f", "node_id": "C_kwDOAAsO6NoAKDE1MmNkNjMyMjY1NWJiNTE3MzY1NWNkZjA3ODFjYTY0YzJhNzYwMmY", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-08-10T19:31:26Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-10-11T06:24:51Z"}, "message": "Report duplicate definitions in trait impls during resolution.", "tree": {"sha": "bd3c5ca31c99c70fddcba8b7e57e31d68da14eac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd3c5ca31c99c70fddcba8b7e57e31d68da14eac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/152cd6322655bb5173655cdf0781ca64c2a7602f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/152cd6322655bb5173655cdf0781ca64c2a7602f", "html_url": "https://github.com/rust-lang/rust/commit/152cd6322655bb5173655cdf0781ca64c2a7602f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/152cd6322655bb5173655cdf0781ca64c2a7602f/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8796e7a9cfd4c5c4f1de15ec1c53994ddf288665", "url": "https://api.github.com/repos/rust-lang/rust/commits/8796e7a9cfd4c5c4f1de15ec1c53994ddf288665", "html_url": "https://github.com/rust-lang/rust/commit/8796e7a9cfd4c5c4f1de15ec1c53994ddf288665"}], "stats": {"total": 162, "additions": 137, "deletions": 25}, "files": [{"sha": "69155a422b062dcb1bb846002fbec130b25f57c9", "filename": "compiler/rustc_hir_analysis/src/impl_wf_check.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/152cd6322655bb5173655cdf0781ca64c2a7602f/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/152cd6322655bb5173655cdf0781ca64c2a7602f/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check.rs?ref=152cd6322655bb5173655cdf0781ca64c2a7602f", "patch": "@@ -197,6 +197,9 @@ fn report_unused_parameter(tcx: TyCtxt<'_>, span: Span, kind: &str, name: Symbol\n \n /// Enforce that we do not have two items in an impl with the same name.\n fn enforce_impl_items_are_distinct(tcx: TyCtxt<'_>, impl_def_id: LocalDefId) {\n+    if tcx.impl_trait_ref(impl_def_id).is_some() {\n+        return;\n+    }\n     let mut seen_type_items = FxHashMap::default();\n     let mut seen_value_items = FxHashMap::default();\n     for &impl_item_ref in tcx.associated_item_def_ids(impl_def_id) {"}, {"sha": "75c016af2f92ffa508939f250e4336e9e58ff462", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/152cd6322655bb5173655cdf0781ca64c2a7602f/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/152cd6322655bb5173655cdf0781ca64c2a7602f/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=152cd6322655bb5173655cdf0781ca64c2a7602f", "patch": "@@ -1047,6 +1047,19 @@ impl<'a> Resolver<'a> {\n                 err.span_label(trait_item_span, \"item in trait\");\n                 err\n             }\n+            ResolutionError::TraitImplDuplicate { name, trait_item_span, old_span } => {\n+                let mut err = struct_span_err!(\n+                    self.session,\n+                    span,\n+                    E0201,\n+                    \"duplicate definitions with name `{}`:\",\n+                    name,\n+                );\n+                err.span_label(old_span, \"previous definition here\");\n+                err.span_label(trait_item_span, \"item in trait\");\n+                err.span_label(span, \"duplicate definition\");\n+                err\n+            }\n             ResolutionError::InvalidAsmSym => {\n                 let mut err = self.session.struct_span_err(span, \"invalid `sym` operand\");\n                 err.span_label(span, \"is a local variable\");"}, {"sha": "9fc8401fa07f577d9596f9f5c01440fcb135c203", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/152cd6322655bb5173655cdf0781ca64c2a7602f/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/152cd6322655bb5173655cdf0781ca64c2a7602f/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=152cd6322655bb5173655cdf0781ca64c2a7602f", "patch": "@@ -2619,8 +2619,9 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                                         this.with_current_self_type(self_type, |this| {\n                                             this.with_self_rib_ns(ValueNS, Res::SelfCtor(item_def_id), |this| {\n                                                 debug!(\"resolve_implementation with_self_rib_ns(ValueNS, ...)\");\n+                                                let mut seen_trait_items = Default::default();\n                                                 for item in impl_items {\n-                                                    this.resolve_impl_item(&**item);\n+                                                    this.resolve_impl_item(&**item, &mut seen_trait_items);\n                                                 }\n                                             });\n                                         });\n@@ -2634,7 +2635,11 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n         );\n     }\n \n-    fn resolve_impl_item(&mut self, item: &'ast AssocItem) {\n+    fn resolve_impl_item(\n+        &mut self,\n+        item: &'ast AssocItem,\n+        seen_trait_items: &mut FxHashMap<DefId, Span>,\n+    ) {\n         use crate::ResolutionError::*;\n         match &item.kind {\n             AssocItemKind::Const(_, ty, default) => {\n@@ -2647,6 +2652,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                     &item.kind,\n                     ValueNS,\n                     item.span,\n+                    seen_trait_items,\n                     |i, s, c| ConstNotMemberOfTrait(i, s, c),\n                 );\n \n@@ -2687,6 +2693,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                             &item.kind,\n                             ValueNS,\n                             item.span,\n+                            seen_trait_items,\n                             |i, s, c| MethodNotMemberOfTrait(i, s, c),\n                         );\n \n@@ -2715,6 +2722,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                                 &item.kind,\n                                 TypeNS,\n                                 item.span,\n+                                seen_trait_items,\n                                 |i, s, c| TypeNotMemberOfTrait(i, s, c),\n                             );\n \n@@ -2736,6 +2744,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n         kind: &AssocItemKind,\n         ns: Namespace,\n         span: Span,\n+        seen_trait_items: &mut FxHashMap<DefId, Span>,\n         err: F,\n     ) where\n         F: FnOnce(Ident, String, Option<Symbol>) -> ResolutionError<'a>,\n@@ -2768,7 +2777,25 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n         };\n \n         let res = binding.res();\n-        let Res::Def(def_kind, _) = res else { bug!() };\n+        let Res::Def(def_kind, id_in_trait) = res else { bug!() };\n+\n+        match seen_trait_items.entry(id_in_trait) {\n+            Entry::Occupied(entry) => {\n+                self.report_error(\n+                    span,\n+                    ResolutionError::TraitImplDuplicate {\n+                        name: ident.name,\n+                        old_span: *entry.get(),\n+                        trait_item_span: binding.span,\n+                    },\n+                );\n+                return;\n+            }\n+            Entry::Vacant(entry) => {\n+                entry.insert(span);\n+            }\n+        };\n+\n         match (def_kind, kind) {\n             (DefKind::AssocTy, AssocItemKind::TyAlias(..))\n             | (DefKind::AssocFn, AssocItemKind::Fn(..))"}, {"sha": "4c9e14db3c43a0172a158c1f07b0a0dc2177fece", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/152cd6322655bb5173655cdf0781ca64c2a7602f/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/152cd6322655bb5173655cdf0781ca64c2a7602f/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=152cd6322655bb5173655cdf0781ca64c2a7602f", "patch": "@@ -236,6 +236,8 @@ enum ResolutionError<'a> {\n         trait_item_span: Span,\n         code: rustc_errors::DiagnosticId,\n     },\n+    /// Error E0201: multiple impl items for the same trait item.\n+    TraitImplDuplicate { name: Symbol, trait_item_span: Span, old_span: Span },\n     /// Inline asm `sym` operand must refer to a `fn` or `static`.\n     InvalidAsmSym,\n }"}, {"sha": "3a70a2f943ffd5822c62fd4362c3be5480cfc718", "filename": "src/test/ui/associated-item/associated-item-duplicate-names-3.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/152cd6322655bb5173655cdf0781ca64c2a7602f/src%2Ftest%2Fui%2Fassociated-item%2Fassociated-item-duplicate-names-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/152cd6322655bb5173655cdf0781ca64c2a7602f/src%2Ftest%2Fui%2Fassociated-item%2Fassociated-item-duplicate-names-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-item%2Fassociated-item-duplicate-names-3.rs?ref=152cd6322655bb5173655cdf0781ca64c2a7602f", "patch": "@@ -16,4 +16,5 @@ impl Foo for Baz {\n \n fn main() {\n     let x: Baz::Bar = 5;\n+    //~^ ERROR ambiguous associated type\n }"}, {"sha": "bf4bd634cf1d44d46580ead3479dd09e65d308c9", "filename": "src/test/ui/associated-item/associated-item-duplicate-names-3.stderr", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/152cd6322655bb5173655cdf0781ca64c2a7602f/src%2Ftest%2Fui%2Fassociated-item%2Fassociated-item-duplicate-names-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/152cd6322655bb5173655cdf0781ca64c2a7602f/src%2Ftest%2Fui%2Fassociated-item%2Fassociated-item-duplicate-names-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-item%2Fassociated-item-duplicate-names-3.stderr?ref=152cd6322655bb5173655cdf0781ca64c2a7602f", "patch": "@@ -1,11 +1,21 @@\n error[E0201]: duplicate definitions with name `Bar`:\n   --> $DIR/associated-item-duplicate-names-3.rs:14:5\n    |\n+LL |     type Bar;\n+   |     --------- item in trait\n+...\n LL |     type Bar = i16;\n-   |     -------- previous definition of `Bar` here\n+   |     --------------- previous definition here\n LL |     type Bar = u16;\n-   |     ^^^^^^^^ duplicate definition\n+   |     ^^^^^^^^^^^^^^^ duplicate definition\n \n-error: aborting due to previous error\n+error[E0223]: ambiguous associated type\n+  --> $DIR/associated-item-duplicate-names-3.rs:18:12\n+   |\n+LL |     let x: Baz::Bar = 5;\n+   |            ^^^^^^^^ help: use fully-qualified syntax: `<Baz as Trait>::Bar`\n+\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0201`.\n+Some errors have detailed explanations: E0201, E0223.\n+For more information about an error, try `rustc --explain E0201`."}, {"sha": "f89ea6e57cc434e0572ae048a4d2ad57a60f6be6", "filename": "src/test/ui/associated-item/associated-item-duplicate-names.stderr", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/152cd6322655bb5173655cdf0781ca64c2a7602f/src%2Ftest%2Fui%2Fassociated-item%2Fassociated-item-duplicate-names.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/152cd6322655bb5173655cdf0781ca64c2a7602f/src%2Ftest%2Fui%2Fassociated-item%2Fassociated-item-duplicate-names.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-item%2Fassociated-item-duplicate-names.stderr?ref=152cd6322655bb5173655cdf0781ca64c2a7602f", "patch": "@@ -1,18 +1,24 @@\n error[E0201]: duplicate definitions with name `Ty`:\n   --> $DIR/associated-item-duplicate-names.rs:11:5\n    |\n+LL |     type Ty;\n+   |     -------- item in trait\n+...\n LL |     type Ty = ();\n-   |     ------- previous definition of `Ty` here\n+   |     ------------- previous definition here\n LL |     type Ty = usize;\n-   |     ^^^^^^^ duplicate definition\n+   |     ^^^^^^^^^^^^^^^^ duplicate definition\n \n error[E0201]: duplicate definitions with name `BAR`:\n   --> $DIR/associated-item-duplicate-names.rs:13:5\n    |\n+LL |     const BAR: u32;\n+   |     --------------- item in trait\n+...\n LL |     const BAR: u32 = 7;\n-   |     -------------- previous definition of `BAR` here\n+   |     ------------------- previous definition here\n LL |     const BAR: u32 = 8;\n-   |     ^^^^^^^^^^^^^^ duplicate definition\n+   |     ^^^^^^^^^^^^^^^^^^^ duplicate definition\n \n error: aborting due to 2 previous errors\n "}, {"sha": "f72145a82447bfd8e5e58f2949408779392ddfb2", "filename": "src/test/ui/error-codes/E0201.stderr", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/152cd6322655bb5173655cdf0781ca64c2a7602f/src%2Ftest%2Fui%2Ferror-codes%2FE0201.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/152cd6322655bb5173655cdf0781ca64c2a7602f/src%2Ftest%2Fui%2Ferror-codes%2FE0201.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0201.stderr?ref=152cd6322655bb5173655cdf0781ca64c2a7602f", "patch": "@@ -1,27 +1,33 @@\n-error[E0201]: duplicate definitions with name `bar`:\n-  --> $DIR/E0201.rs:5:5\n-   |\n-LL |     fn bar(&self) -> bool { self.0 > 5 }\n-   |     --------------------- previous definition of `bar` here\n-LL |     fn bar() {}\n-   |     ^^^^^^^^ duplicate definition\n-\n error[E0201]: duplicate definitions with name `baz`:\n   --> $DIR/E0201.rs:17:5\n    |\n+LL |     fn baz(&self) -> bool;\n+   |     ---------------------- item in trait\n+...\n LL |     fn baz(&self) -> bool { true }\n-   |     --------------------- previous definition of `baz` here\n+   |     ------------------------------ previous definition here\n LL |     fn baz(&self) -> bool { self.0 > 5 }\n-   |     ^^^^^^^^^^^^^^^^^^^^^ duplicate definition\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definition\n \n error[E0201]: duplicate definitions with name `Quux`:\n   --> $DIR/E0201.rs:18:5\n    |\n+LL |     type Quux;\n+   |     ---------- item in trait\n+...\n LL |     type Quux = u32;\n-   |     --------- previous definition of `Quux` here\n+   |     ---------------- previous definition here\n ...\n LL |     type Quux = u32;\n-   |     ^^^^^^^^^ duplicate definition\n+   |     ^^^^^^^^^^^^^^^^ duplicate definition\n+\n+error[E0201]: duplicate definitions with name `bar`:\n+  --> $DIR/E0201.rs:5:5\n+   |\n+LL |     fn bar(&self) -> bool { self.0 > 5 }\n+   |     --------------------- previous definition of `bar` here\n+LL |     fn bar() {}\n+   |     ^^^^^^^^ duplicate definition\n \n error: aborting due to 3 previous errors\n "}, {"sha": "465e444aedb6b32ef4adec7bc976f7b570819461", "filename": "src/test/ui/hygiene/impl_items-2.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/152cd6322655bb5173655cdf0781ca64c2a7602f/src%2Ftest%2Fui%2Fhygiene%2Fimpl_items-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/152cd6322655bb5173655cdf0781ca64c2a7602f/src%2Ftest%2Fui%2Fhygiene%2Fimpl_items-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fimpl_items-2.rs?ref=152cd6322655bb5173655cdf0781ca64c2a7602f", "patch": "@@ -0,0 +1,26 @@\n+#![feature(decl_macro)]\n+\n+trait Trait {\n+    fn foo() {}\n+}\n+\n+macro trait_impl() {\n+    fn foo() {}\n+}\n+\n+// Check that we error on multiple impl items that resolve to the same trait item.\n+impl Trait for i32 {\n+    trait_impl!();\n+    fn foo() {}\n+    //~^ ERROR duplicate definitions with name `foo`: [E0201]\n+}\n+\n+struct Type;\n+\n+// Check that we do not error with inherent impls.\n+impl Type {\n+    trait_impl!();\n+    fn foo() {}\n+}\n+\n+fn main() {}"}, {"sha": "3c0ffeb1057525efd04f4e80da541bcc433bede4", "filename": "src/test/ui/hygiene/impl_items-2.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/152cd6322655bb5173655cdf0781ca64c2a7602f/src%2Ftest%2Fui%2Fhygiene%2Fimpl_items-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/152cd6322655bb5173655cdf0781ca64c2a7602f/src%2Ftest%2Fui%2Fhygiene%2Fimpl_items-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fimpl_items-2.stderr?ref=152cd6322655bb5173655cdf0781ca64c2a7602f", "patch": "@@ -0,0 +1,15 @@\n+error[E0201]: duplicate definitions with name `foo`:\n+  --> $DIR/impl_items-2.rs:14:5\n+   |\n+LL |     fn foo() {}\n+   |     ----------- item in trait\n+...\n+LL |     fn foo() {}\n+   |     ----------- previous definition here\n+...\n+LL |     fn foo() {}\n+   |     ^^^^^^^^^^^ duplicate definition\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0201`."}, {"sha": "ae214bb9e9b4fd329e3265c813c672fe650f2327", "filename": "src/test/ui/traits/issue-8153.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/152cd6322655bb5173655cdf0781ca64c2a7602f/src%2Ftest%2Fui%2Ftraits%2Fissue-8153.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/152cd6322655bb5173655cdf0781ca64c2a7602f/src%2Ftest%2Fui%2Ftraits%2Fissue-8153.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-8153.stderr?ref=152cd6322655bb5173655cdf0781ca64c2a7602f", "patch": "@@ -1,10 +1,13 @@\n error[E0201]: duplicate definitions with name `bar`:\n   --> $DIR/issue-8153.rs:11:5\n    |\n+LL |     fn bar(&self) -> isize;\n+   |     ----------------------- item in trait\n+...\n LL |     fn bar(&self) -> isize {1}\n-   |     ---------------------- previous definition of `bar` here\n+   |     -------------------------- previous definition here\n LL |     fn bar(&self) -> isize {2}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^ duplicate definition\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definition\n \n error: aborting due to previous error\n "}]}