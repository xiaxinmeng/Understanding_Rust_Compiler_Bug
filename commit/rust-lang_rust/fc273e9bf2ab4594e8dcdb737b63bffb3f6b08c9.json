{"sha": "fc273e9bf2ab4594e8dcdb737b63bffb3f6b08c9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjMjczZTliZjJhYjQ1OTRlOGRjZGI3MzdiNjNiZmZiM2Y2YjA4Yzk=", "commit": {"author": {"name": "Aman Arora", "email": "me@aman-arora.com", "date": "2021-05-05T19:57:08Z"}, "committer": {"name": "Aman Arora", "email": "me@aman-arora.com", "date": "2021-06-28T18:21:55Z"}, "message": "Introduce -Zprofile-closures to evaluate the impact of 2229\n\nThis creates a CSV with name \"closure_profile_XXXXX.csv\", where the\nvariable part is the process id of the compiler.\n\nTo profile a cargo project you can run one of the following depending on\nif you're compiling a library or a binary:\n\n```\ncargo +stage1 rustc --lib -- -Zprofile-closures\ncargo +stage1 rustc --bin -- -Zprofile-closures\n```", "tree": {"sha": "5d4c81800d048385b8b3d24b8f70bad4ad03bdae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d4c81800d048385b8b3d24b8f70bad4ad03bdae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc273e9bf2ab4594e8dcdb737b63bffb3f6b08c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc273e9bf2ab4594e8dcdb737b63bffb3f6b08c9", "html_url": "https://github.com/rust-lang/rust/commit/fc273e9bf2ab4594e8dcdb737b63bffb3f6b08c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc273e9bf2ab4594e8dcdb737b63bffb3f6b08c9/comments", "author": {"login": "arora-aman", "id": 4193035, "node_id": "MDQ6VXNlcjQxOTMwMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4193035?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arora-aman", "html_url": "https://github.com/arora-aman", "followers_url": "https://api.github.com/users/arora-aman/followers", "following_url": "https://api.github.com/users/arora-aman/following{/other_user}", "gists_url": "https://api.github.com/users/arora-aman/gists{/gist_id}", "starred_url": "https://api.github.com/users/arora-aman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arora-aman/subscriptions", "organizations_url": "https://api.github.com/users/arora-aman/orgs", "repos_url": "https://api.github.com/users/arora-aman/repos", "events_url": "https://api.github.com/users/arora-aman/events{/privacy}", "received_events_url": "https://api.github.com/users/arora-aman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arora-aman", "id": 4193035, "node_id": "MDQ6VXNlcjQxOTMwMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4193035?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arora-aman", "html_url": "https://github.com/arora-aman", "followers_url": "https://api.github.com/users/arora-aman/followers", "following_url": "https://api.github.com/users/arora-aman/following{/other_user}", "gists_url": "https://api.github.com/users/arora-aman/gists{/gist_id}", "starred_url": "https://api.github.com/users/arora-aman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arora-aman/subscriptions", "organizations_url": "https://api.github.com/users/arora-aman/orgs", "repos_url": "https://api.github.com/users/arora-aman/repos", "events_url": "https://api.github.com/users/arora-aman/events{/privacy}", "received_events_url": "https://api.github.com/users/arora-aman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e9d7ecf784e5ecaf7437d04be3992ad23fa7cb6", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e9d7ecf784e5ecaf7437d04be3992ad23fa7cb6", "html_url": "https://github.com/rust-lang/rust/commit/3e9d7ecf784e5ecaf7437d04be3992ad23fa7cb6"}], "stats": {"total": 155, "additions": 148, "deletions": 7}, "files": [{"sha": "b252409a92ada8373339f387d34579063de6a218", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fc273e9bf2ab4594e8dcdb737b63bffb3f6b08c9/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc273e9bf2ab4594e8dcdb737b63bffb3f6b08c9/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=fc273e9bf2ab4594e8dcdb737b63bffb3f6b08c9", "patch": "@@ -654,6 +654,7 @@ fn test_debugging_options_tracking_hash() {\n     untracked!(perf_stats, true);\n     // `pre_link_arg` is omitted because it just forwards to `pre_link_args`.\n     untracked!(pre_link_args, vec![String::from(\"abc\"), String::from(\"def\")]);\n+    untracked!(profile_closures, true);\n     untracked!(print_link_args, true);\n     untracked!(print_llvm_passes, true);\n     untracked!(print_mono_items, Some(String::from(\"abc\")));"}, {"sha": "6e910d0087f2c3f5ef713d57362da0a9edc21d7c", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/fc273e9bf2ab4594e8dcdb737b63bffb3f6b08c9/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc273e9bf2ab4594e8dcdb737b63bffb3f6b08c9/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=fc273e9bf2ab4594e8dcdb737b63bffb3f6b08c9", "patch": "@@ -19,11 +19,12 @@ use crate::ty::query::{self, OnDiskCache, TyCtxtAt};\n use crate::ty::subst::{GenericArg, GenericArgKind, InternalSubsts, Subst, SubstsRef, UserSubsts};\n use crate::ty::TyKind::*;\n use crate::ty::{\n-    self, AdtDef, AdtKind, Binder, BindingMode, BoundVar, CanonicalPolyFnSig, Const, ConstVid,\n-    DefIdTree, ExistentialPredicate, FloatTy, FloatVar, FloatVid, GenericParamDefKind, InferConst,\n-    InferTy, IntTy, IntVar, IntVid, List, MainDefinition, ParamConst, ParamTy, PolyFnSig,\n-    Predicate, PredicateInner, PredicateKind, ProjectionTy, Region, RegionKind, ReprOptions,\n-    TraitObjectVisitor, Ty, TyKind, TyS, TyVar, TyVid, TypeAndMut, UintTy, Visibility,\n+    self, AdtDef, AdtKind, Binder, BindingMode, BoundVar, CanonicalPolyFnSig,\n+    ClosureSizeProfileData, Const, ConstVid, DefIdTree, ExistentialPredicate, FloatTy, FloatVar,\n+    FloatVid, GenericParamDefKind, InferConst, InferTy, IntTy, IntVar, IntVid, List,\n+    MainDefinition, ParamConst, ParamTy, PolyFnSig, Predicate, PredicateInner, PredicateKind,\n+    ProjectionTy, Region, RegionKind, ReprOptions, TraitObjectVisitor, Ty, TyKind, TyS, TyVar,\n+    TyVid, TypeAndMut, UintTy, Visibility,\n };\n use rustc_ast as ast;\n use rustc_ast::expand::allocator::AllocatorKind;\n@@ -484,6 +485,10 @@ pub struct TypeckResults<'tcx> {\n     /// This hashset records all instances where we behave\n     /// like this to allow `const_to_pat` to reliably handle this situation.\n     pub treat_byte_string_as_slice: ItemLocalSet,\n+\n+    /// Contains the data for evaluating the effect of feature `capture_disjoint_fields`\n+    /// on closure size.\n+    pub closure_size_eval: FxHashMap<DefId, ClosureSizeProfileData<'tcx>>,\n }\n \n impl<'tcx> TypeckResults<'tcx> {\n@@ -510,6 +515,7 @@ impl<'tcx> TypeckResults<'tcx> {\n             closure_fake_reads: Default::default(),\n             generator_interior_types: ty::Binder::dummy(Default::default()),\n             treat_byte_string_as_slice: Default::default(),\n+            closure_size_eval: Default::default(),\n         }\n     }\n \n@@ -754,6 +760,7 @@ impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for TypeckResults<'tcx> {\n             ref closure_fake_reads,\n             ref generator_interior_types,\n             ref treat_byte_string_as_slice,\n+            ref closure_size_eval,\n         } = *self;\n \n         hcx.with_node_id_hashing_mode(NodeIdHashingMode::HashDefPath, |hcx| {\n@@ -780,6 +787,7 @@ impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for TypeckResults<'tcx> {\n             closure_fake_reads.hash_stable(hcx, hasher);\n             generator_interior_types.hash_stable(hcx, hasher);\n             treat_byte_string_as_slice.hash_stable(hcx, hasher);\n+            closure_size_eval.hash_stable(hcx, hasher);\n         })\n     }\n }"}, {"sha": "dc5687de8967346ec54d86b6126204558ac6dceb", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/fc273e9bf2ab4594e8dcdb737b63bffb3f6b08c9/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc273e9bf2ab4594e8dcdb737b63bffb3f6b08c9/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=fc273e9bf2ab4594e8dcdb737b63bffb3f6b08c9", "patch": "@@ -173,6 +173,25 @@ pub enum Visibility {\n     Invisible,\n }\n \n+#[derive(\n+    Clone,\n+    Debug,\n+    PartialEq,\n+    Eq,\n+    Copy,\n+    Hash,\n+    TyEncodable,\n+    TyDecodable,\n+    HashStable,\n+    TypeFoldable\n+)]\n+pub struct ClosureSizeProfileData<'tcx> {\n+    /// Tuple containing the types of closure captures before the feature `capture_disjoint_fields`\n+    pub before_feature_tys: Ty<'tcx>,\n+    /// Tuple containing the types of closure captures after the feature `capture_disjoint_fields`\n+    pub after_feature_tys: Ty<'tcx>,\n+}\n+\n pub trait DefIdTree: Copy {\n     fn parent(self, id: DefId) -> Option<DefId>;\n "}, {"sha": "4bd431dcc6a3c5d8bf46ec512c4b8d3a667977b3", "filename": "compiler/rustc_mir/src/monomorphize/collector.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fc273e9bf2ab4594e8dcdb737b63bffb3f6b08c9/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc273e9bf2ab4594e8dcdb737b63bffb3f6b08c9/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs?ref=fc273e9bf2ab4594e8dcdb737b63bffb3f6b08c9", "patch": "@@ -1071,6 +1071,13 @@ fn create_fn_mono_item<'tcx>(\n     source: Span,\n ) -> Spanned<MonoItem<'tcx>> {\n     debug!(\"create_fn_mono_item(instance={})\", instance);\n+\n+    let def_id = instance.def_id();\n+    if tcx.sess.opts.debugging_opts.profile_closures && def_id.is_local() && tcx.is_closure(def_id)\n+    {\n+        monomorphize::util::dump_closure_profile(tcx, instance);\n+    }\n+\n     respan(source, MonoItem::Fn(instance.polymorphize(tcx)))\n }\n "}, {"sha": "57d2723cf9cfdf1af30122b7fb7c64e21a67d72e", "filename": "compiler/rustc_mir/src/monomorphize/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fc273e9bf2ab4594e8dcdb737b63bffb3f6b08c9/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc273e9bf2ab4594e8dcdb737b63bffb3f6b08c9/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fmod.rs?ref=fc273e9bf2ab4594e8dcdb737b63bffb3f6b08c9", "patch": "@@ -7,6 +7,7 @@ use rustc_hir::lang_items::LangItem;\n pub mod collector;\n pub mod partitioning;\n pub mod polymorphize;\n+pub mod util;\n \n fn custom_coerce_unsize_info<'tcx>(\n     tcx: TyCtxt<'tcx>,"}, {"sha": "799b4e18c240f24afedae9073453384356f2c5ad", "filename": "compiler/rustc_mir/src/monomorphize/util.rs", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/fc273e9bf2ab4594e8dcdb737b63bffb3f6b08c9/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc273e9bf2ab4594e8dcdb737b63bffb3f6b08c9/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Futil.rs?ref=fc273e9bf2ab4594e8dcdb737b63bffb3f6b08c9", "patch": "@@ -0,0 +1,73 @@\n+use rustc_middle::ty::{self, ClosureSizeProfileData, Instance, TyCtxt};\n+use std::fs::OpenOptions;\n+use std::io::prelude::*;\n+\n+/// For a given closure, writes out the data for the profiling the impact of RFC 2229 on\n+/// closure size into a CSV.\n+///\n+/// During the same compile all closures dump the information in the same file\n+/// \"closure_profile_XXXXX.csv\", which is created in the directory where the compiler is invoked.\n+crate fn dump_closure_profile(tcx: TyCtxt<'tcx>, closure_instance: Instance<'tcx>) {\n+    let mut file = if let Ok(file) = OpenOptions::new()\n+        .create(true)\n+        .append(true)\n+        .open(&format!(\"closure_profile_{}.csv\", std::process::id()))\n+    {\n+        file\n+    } else {\n+        eprintln!(\"Cound't open file for writing closure profile\");\n+        return;\n+    };\n+\n+    let closure_def_id = closure_instance.def_id();\n+    let typeck_results = tcx.typeck(closure_def_id.expect_local());\n+\n+    if typeck_results.closure_size_eval.contains_key(&closure_def_id) {\n+        let param_env = ty::ParamEnv::reveal_all();\n+\n+        let ClosureSizeProfileData { before_feature_tys, after_feature_tys } =\n+            typeck_results.closure_size_eval[&closure_def_id];\n+\n+        let before_feature_tys = tcx.subst_and_normalize_erasing_regions(\n+            closure_instance.substs,\n+            param_env,\n+            before_feature_tys,\n+        );\n+        let after_feature_tys = tcx.subst_and_normalize_erasing_regions(\n+            closure_instance.substs,\n+            param_env,\n+            after_feature_tys,\n+        );\n+\n+        let new_size = tcx\n+            .layout_of(param_env.and(after_feature_tys))\n+            .map(|l| format!(\"{:?}\", l.size.bytes()))\n+            .unwrap_or_else(|e| format!(\"Failed {:?}\", e));\n+\n+        let old_size = tcx\n+            .layout_of(param_env.and(before_feature_tys))\n+            .map(|l| format!(\"{:?}\", l.size.bytes()))\n+            .unwrap_or_else(|e| format!(\"Failed {:?}\", e));\n+\n+        let closure_hir_id = tcx.hir().local_def_id_to_hir_id(closure_def_id.expect_local());\n+        let closure_span = tcx.hir().span(closure_hir_id);\n+        let src_file = tcx.sess.source_map().span_to_filename(closure_span);\n+        let line_nos = tcx\n+            .sess\n+            .source_map()\n+            .span_to_lines(closure_span)\n+            .map(|l| format!(\"{:?} {:?}\", l.lines.first(), l.lines.last()))\n+            .unwrap_or_else(|e| format!(\"{:?}\", e));\n+\n+        if let Err(e) = writeln!(\n+            file,\n+            \"{}, {}, {}, {:?}\",\n+            old_size,\n+            new_size,\n+            src_file.prefer_local(),\n+            line_nos\n+        ) {\n+            eprintln!(\"Error writting to file {}\", e.to_string())\n+        }\n+    }\n+}"}, {"sha": "4c40d0c367ecaae4e318df83844b8a86d5347d32", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc273e9bf2ab4594e8dcdb737b63bffb3f6b08c9/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc273e9bf2ab4594e8dcdb737b63bffb3f6b08c9/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=fc273e9bf2ab4594e8dcdb737b63bffb3f6b08c9", "patch": "@@ -1209,6 +1209,8 @@ options! {\n          \"show backtraces for panics during proc-macro execution (default: no)\"),\n     profile: bool = (false, parse_bool, [TRACKED],\n         \"insert profiling code (default: no)\"),\n+    profile_closures: bool = (false, parse_no_flag, [UNTRACKED],\n+        \"profile size of closures\"),\n     profile_emit: Option<PathBuf> = (None, parse_opt_pathbuf, [TRACKED],\n         \"file path to emit profiling data at runtime when using 'profile' \\\n         (default based on relative source path)\"),"}, {"sha": "7845d673236e3180f4e61743633ba6c116b8a958", "filename": "compiler/rustc_typeck/src/check/upvar.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/fc273e9bf2ab4594e8dcdb737b63bffb3f6b08c9/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc273e9bf2ab4594e8dcdb737b63bffb3f6b08c9/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs?ref=fc273e9bf2ab4594e8dcdb737b63bffb3f6b08c9", "patch": "@@ -42,7 +42,9 @@ use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_infer::infer::UpvarRegion;\n use rustc_middle::hir::place::{Place, PlaceBase, PlaceWithHirId, Projection, ProjectionKind};\n use rustc_middle::mir::FakeReadCause;\n-use rustc_middle::ty::{self, TraitRef, Ty, TyCtxt, TypeckResults, UpvarSubsts};\n+use rustc_middle::ty::{\n+    self, ClosureSizeProfileData, TraitRef, Ty, TyCtxt, TypeckResults, UpvarSubsts,\n+};\n use rustc_session::lint;\n use rustc_span::sym;\n use rustc_span::{MultiSpan, Span, Symbol};\n@@ -175,6 +177,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             self.perform_2229_migration_anaysis(closure_def_id, body_id, capture_clause, span);\n         }\n \n+        let after_feature_tys = self.final_upvar_tys(closure_def_id);\n+\n         // We now fake capture information for all variables that are mentioned within the closure\n         // We do this after handling migrations so that min_captures computes before\n         if !enable_precise_capture(self.tcx, span) {\n@@ -203,6 +207,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             self.compute_min_captures(closure_def_id, capture_clause, capture_information);\n         }\n \n+        let before_feature_tys = self.final_upvar_tys(closure_def_id);\n+\n         if let Some(closure_substs) = infer_kind {\n             // Unify the (as yet unbound) type variable in the closure\n             // substs with the kind we inferred.\n@@ -258,6 +264,16 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             .collect();\n         self.typeck_results.borrow_mut().closure_fake_reads.insert(closure_def_id, fake_reads);\n \n+        if self.tcx.sess.opts.debugging_opts.profile_closures {\n+            self.typeck_results.borrow_mut().closure_size_eval.insert(\n+                closure_def_id,\n+                ClosureSizeProfileData {\n+                    before_feature_tys: self.tcx.mk_tup(before_feature_tys.into_iter()),\n+                    after_feature_tys: self.tcx.mk_tup(after_feature_tys.into_iter()),\n+                },\n+            );\n+        }\n+\n         // If we are also inferred the closure kind here,\n         // process any deferred resolutions.\n         let deferred_call_resolutions = self.remove_deferred_call_resolutions(closure_def_id);"}, {"sha": "589570f1cb7ca85205fc7e63b05794bdefbbd48e", "filename": "compiler/rustc_typeck/src/check/writeback.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fc273e9bf2ab4594e8dcdb737b63bffb3f6b08c9/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc273e9bf2ab4594e8dcdb737b63bffb3f6b08c9/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs?ref=fc273e9bf2ab4594e8dcdb737b63bffb3f6b08c9", "patch": "@@ -15,7 +15,7 @@ use rustc_middle::hir::place::Place as HirPlace;\n use rustc_middle::mir::FakeReadCause;\n use rustc_middle::ty::adjustment::{Adjust, Adjustment, PointerCast};\n use rustc_middle::ty::fold::{TypeFoldable, TypeFolder};\n-use rustc_middle::ty::{self, Ty, TyCtxt};\n+use rustc_middle::ty::{self, ClosureSizeProfileData, Ty, TyCtxt};\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n use rustc_trait_selection::opaque_types::InferCtxtExt;\n@@ -60,6 +60,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n         wbcx.visit_body(body);\n         wbcx.visit_min_capture_map();\n+        wbcx.eval_closure_size();\n         wbcx.visit_fake_reads_map();\n         wbcx.visit_closures();\n         wbcx.visit_liberated_fn_sigs();\n@@ -333,6 +334,19 @@ impl<'cx, 'tcx> Visitor<'tcx> for WritebackCx<'cx, 'tcx> {\n }\n \n impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n+    fn eval_closure_size(&mut self) {\n+        let mut res: FxHashMap<DefId, ClosureSizeProfileData<'tcx>> = Default::default();\n+        for (closure_def_id, data) in self.fcx.typeck_results.borrow().closure_size_eval.iter() {\n+            let closure_hir_id =\n+                self.tcx().hir().local_def_id_to_hir_id(closure_def_id.expect_local());\n+\n+            let data = self.resolve(*data, &closure_hir_id);\n+\n+            res.insert(*closure_def_id, data);\n+        }\n+\n+        self.typeck_results.closure_size_eval = res;\n+    }\n     fn visit_min_capture_map(&mut self) {\n         let mut min_captures_wb = ty::MinCaptureInformationMap::with_capacity_and_hasher(\n             self.fcx.typeck_results.borrow().closure_min_captures.len(),"}]}