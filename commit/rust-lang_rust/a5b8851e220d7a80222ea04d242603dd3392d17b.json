{"sha": "a5b8851e220d7a80222ea04d242603dd3392d17b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1Yjg4NTFlMjIwZDdhODAyMjJlYTA0ZDI0MjYwM2RkMzM5MmQxN2I=", "commit": {"author": {"name": "Inokentiy Babushkin", "email": "twk@twki.de", "date": "2017-06-11T11:31:40Z"}, "committer": {"name": "Inokentiy Babushkin", "email": "twk@twki.de", "date": "2017-06-11T11:31:40Z"}, "message": "Added consumption logic for external sources in FileMap\n\nWe now fetch source lines from the `external_src` member as a secondary\nfallback if no regular source is present, that is, if the file map\nbelongs to an external crate and the source has been fetched from disk.", "tree": {"sha": "e2f71a6a91968206b9ced910aaa10129448b4b54", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e2f71a6a91968206b9ced910aaa10129448b4b54"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5b8851e220d7a80222ea04d242603dd3392d17b", "comment_count": 0, "verification": {"verified": false, "reason": "unverified_email", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEXezFNCHL3+3lgSPSfvyOxSJN6OwFAlk9KpAACgkQfvyOxSJN\n6OxV5g//U0CHfZOQpqUjViN4z6GMTAun2uL9o2B1edOkiLHTDOHZP4ShgBxFhtOr\n5U4OrTfHDNzKgdJZ+jyLy2w85IRr2c4JDNkSgOc5cbs7x484znGTCU2HAg01XNbL\nEZ+fcj1aXksCE3wBRjtNBGsKUl7Syhxlg5++aTJGmChgFzb84TN2uZp3Eb2qB2UC\ngDJY+xMgsN/OApaYtYN3Q28RU9S+d8+hx/j4DJPRwGbZut1b4uBBrV0PNCj54qLq\nz//as6/ZArYFBqD6Eh/Q7oMStk16I42PtralqE3wdKAjEb8bSRCzd4KJZLHx9/LM\nc8cLfIEGl5oa/WrpXrk9lO1nGbATe4KbZi/WJt+u5fRk8cbXjodFeYAO43OhM0tz\nAM58jnX+4dREFN1Esv0M6Jy7BCU06eYpAO0dVD6M7PeItBqO1+zX0LiMqG2dWQY9\nB/q3Wxw2/ZX7XfMhhzfS0h/+x9Z7xU7W9MHxlIwbGQ2SQztZd10HV1N+imkMC3xS\nMsMayhs1jhLTH1x1MLYDu6VYIzEZUGHVKzTArO5AFljgVQD9GILG+nc1oqE7hf+u\ncQvTt6vSh35lzcTeo72H1TTOAU5vs6BAhaHCKy3NoRVfbFtNweHY1HESdj5PqCRP\nJ/bOshIg0ZSOvBiDZzfzHIQBiqLdczlu4+j/jUcyfeDMV5nfo3U=\n=2fJn\n-----END PGP SIGNATURE-----", "payload": "tree e2f71a6a91968206b9ced910aaa10129448b4b54\nparent c04aa4ed0ce61d257ab10b4dbdaa64fa5cad37b1\nauthor Inokentiy Babushkin <twk@twki.de> 1497180700 +0200\ncommitter Inokentiy Babushkin <twk@twki.de> 1497180700 +0200\n\nAdded consumption logic for external sources in FileMap\n\nWe now fetch source lines from the `external_src` member as a secondary\nfallback if no regular source is present, that is, if the file map\nbelongs to an external crate and the source has been fetched from disk.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5b8851e220d7a80222ea04d242603dd3392d17b", "html_url": "https://github.com/rust-lang/rust/commit/a5b8851e220d7a80222ea04d242603dd3392d17b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5b8851e220d7a80222ea04d242603dd3392d17b/comments", "author": {"login": "ibabushkin", "id": 10811417, "node_id": "MDQ6VXNlcjEwODExNDE3", "avatar_url": "https://avatars.githubusercontent.com/u/10811417?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibabushkin", "html_url": "https://github.com/ibabushkin", "followers_url": "https://api.github.com/users/ibabushkin/followers", "following_url": "https://api.github.com/users/ibabushkin/following{/other_user}", "gists_url": "https://api.github.com/users/ibabushkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibabushkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibabushkin/subscriptions", "organizations_url": "https://api.github.com/users/ibabushkin/orgs", "repos_url": "https://api.github.com/users/ibabushkin/repos", "events_url": "https://api.github.com/users/ibabushkin/events{/privacy}", "received_events_url": "https://api.github.com/users/ibabushkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibabushkin", "id": 10811417, "node_id": "MDQ6VXNlcjEwODExNDE3", "avatar_url": "https://avatars.githubusercontent.com/u/10811417?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibabushkin", "html_url": "https://github.com/ibabushkin", "followers_url": "https://api.github.com/users/ibabushkin/followers", "following_url": "https://api.github.com/users/ibabushkin/following{/other_user}", "gists_url": "https://api.github.com/users/ibabushkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibabushkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibabushkin/subscriptions", "organizations_url": "https://api.github.com/users/ibabushkin/orgs", "repos_url": "https://api.github.com/users/ibabushkin/repos", "events_url": "https://api.github.com/users/ibabushkin/events{/privacy}", "received_events_url": "https://api.github.com/users/ibabushkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c04aa4ed0ce61d257ab10b4dbdaa64fa5cad37b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/c04aa4ed0ce61d257ab10b4dbdaa64fa5cad37b1", "html_url": "https://github.com/rust-lang/rust/commit/c04aa4ed0ce61d257ab10b4dbdaa64fa5cad37b1"}], "stats": {"total": 65, "additions": 39, "deletions": 26}, "files": [{"sha": "2099725c48aa481af342ec852b732e954cba7471", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a5b8851e220d7a80222ea04d242603dd3392d17b/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5b8851e220d7a80222ea04d242603dd3392d17b/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=a5b8851e220d7a80222ea04d242603dd3392d17b", "patch": "@@ -17,6 +17,7 @@ use RenderSpan::*;\n use snippet::{Annotation, AnnotationType, Line, MultilineAnnotation, StyledString, Style};\n use styled_buffer::StyledBuffer;\n \n+use std::borrow::Cow;\n use std::io::prelude::*;\n use std::io;\n use std::rc::Rc;\n@@ -911,7 +912,8 @@ impl EmitterWriter {\n         // Print out the annotate source lines that correspond with the error\n         for annotated_file in annotated_files {\n             // we can't annotate anything if the source is unavailable.\n-            if annotated_file.file.src.is_none() {\n+            if annotated_file.file.src.is_none()\n+                    && annotated_file.file.external_src.borrow().is_absent() {\n                 continue;\n             }\n \n@@ -1012,7 +1014,7 @@ impl EmitterWriter {\n                     } else if line_idx_delta == 2 {\n                         let unannotated_line = annotated_file.file\n                             .get_line(annotated_file.lines[line_idx].line_index)\n-                            .unwrap_or(\"\");\n+                            .unwrap_or_else(|| Cow::from(\"\"));\n \n                         let last_buffer_line_num = buffer.num_lines();\n "}, {"sha": "26ecbe724f8d36c381e4177093c530b431690bc0", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a5b8851e220d7a80222ea04d242603dd3392d17b/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5b8851e220d7a80222ea04d242603dd3392d17b/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=a5b8851e220d7a80222ea04d242603dd3392d17b", "patch": "@@ -37,6 +37,7 @@ use self::Level::*;\n \n use emitter::{Emitter, EmitterWriter};\n \n+use std::borrow::Cow;\n use std::cell::{RefCell, Cell};\n use std::{error, fmt};\n use std::rc::Rc;\n@@ -122,7 +123,7 @@ impl CodeSuggestion {\n         use syntax_pos::{CharPos, Loc, Pos};\n \n         fn push_trailing(buf: &mut String,\n-                         line_opt: Option<&str>,\n+                         line_opt: Option<&Cow<str>>,\n                          lo: &Loc,\n                          hi_opt: Option<&Loc>) {\n             let (lo, hi_opt) = (lo.col.to_usize(), hi_opt.map(|hi| hi.col.to_usize()));\n@@ -184,13 +185,13 @@ impl CodeSuggestion {\n             let cur_lo = cm.lookup_char_pos(sp.lo);\n             for (buf, substitute) in bufs.iter_mut().zip(substitutes) {\n                 if prev_hi.line == cur_lo.line {\n-                    push_trailing(buf, prev_line, &prev_hi, Some(&cur_lo));\n+                    push_trailing(buf, prev_line.as_ref(), &prev_hi, Some(&cur_lo));\n                 } else {\n-                    push_trailing(buf, prev_line, &prev_hi, None);\n+                    push_trailing(buf, prev_line.as_ref(), &prev_hi, None);\n                     // push lines between the previous and current span (if any)\n                     for idx in prev_hi.line..(cur_lo.line - 1) {\n                         if let Some(line) = fm.get_line(idx) {\n-                            buf.push_str(line);\n+                            buf.push_str(line.as_ref());\n                             buf.push('\\n');\n                         }\n                     }\n@@ -206,7 +207,7 @@ impl CodeSuggestion {\n         for buf in &mut bufs {\n             // if the replacement already ends with a newline, don't print the next line\n             if !buf.ends_with('\\n') {\n-                push_trailing(buf, prev_line, &prev_hi, None);\n+                push_trailing(buf, prev_line.as_ref(), &prev_hi, None);\n             }\n             // remove trailing newline\n             buf.pop();"}, {"sha": "e60edafe4ee441aba879abdf67918881685e6c8b", "filename": "src/libsyntax/json.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5b8851e220d7a80222ea04d242603dd3392d17b/src%2Flibsyntax%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5b8851e220d7a80222ea04d242603dd3392d17b/src%2Flibsyntax%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fjson.rs?ref=a5b8851e220d7a80222ea04d242603dd3392d17b", "patch": "@@ -314,7 +314,7 @@ impl DiagnosticSpanLine {\n                          h_end: usize)\n                          -> DiagnosticSpanLine {\n         DiagnosticSpanLine {\n-            text: fm.get_line(index).unwrap_or(\"\").to_owned(),\n+            text: fm.get_line(index).map_or(String::new(), |l| l.into_owned()),\n             highlight_start: h_start,\n             highlight_end: h_end,\n         }"}, {"sha": "0bac896f6a2aab28328e9f58aeda5bfa36d3d75e", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 28, "deletions": 18, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/a5b8851e220d7a80222ea04d242603dd3392d17b/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5b8851e220d7a80222ea04d242603dd3392d17b/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=a5b8851e220d7a80222ea04d242603dd3392d17b", "patch": "@@ -33,6 +33,7 @@\n #![cfg_attr(stage0, feature(rustc_private))]\n #![cfg_attr(stage0, feature(staged_api))]\n \n+use std::borrow::Cow;\n use std::cell::{Cell, RefCell};\n use std::ops::{Add, Sub};\n use std::rc::Rc;\n@@ -605,24 +606,33 @@ impl FileMap {\n \n     /// get a line from the list of pre-computed line-beginnings.\n     /// line-number here is 0-based.\n-    pub fn get_line(&self, line_number: usize) -> Option<&str> {\n-        match self.src {\n-            Some(ref src) => {\n-                let lines = self.lines.borrow();\n-                lines.get(line_number).map(|&line| {\n-                    let begin: BytePos = line - self.start_pos;\n-                    let begin = begin.to_usize();\n-                    // We can't use `lines.get(line_number+1)` because we might\n-                    // be parsing when we call this function and thus the current\n-                    // line is the last one we have line info for.\n-                    let slice = &src[begin..];\n-                    match slice.find('\\n') {\n-                        Some(e) => &slice[..e],\n-                        None => slice\n-                    }\n-                })\n+    pub fn get_line(&self, line_number: usize) -> Option<Cow<str>> {\n+        fn get_until_newline(src: &str, begin: usize) -> &str {\n+            // We can't use `lines.get(line_number+1)` because we might\n+            // be parsing when we call this function and thus the current\n+            // line is the last one we have line info for.\n+            let slice = &src[begin..];\n+            match slice.find('\\n') {\n+                Some(e) => &slice[..e],\n+                None => slice\n             }\n-            None => None\n+        }\n+\n+        let lines = self.lines.borrow();\n+        let line = if let Some(line) = lines.get(line_number) {\n+            line\n+        } else {\n+            return None;\n+        };\n+        let begin: BytePos = *line - self.start_pos;\n+        let begin = begin.to_usize();\n+\n+        if let Some(ref src) = self.src {\n+            Some(Cow::from(get_until_newline(src, begin)))\n+        } else if let Some(src) = self.external_src.borrow().get_source() {\n+            Some(Cow::Owned(String::from(get_until_newline(src, begin))))\n+        } else {\n+            None\n         }\n     }\n \n@@ -641,7 +651,7 @@ impl FileMap {\n     }\n \n     pub fn is_imported(&self) -> bool {\n-        self.src.is_none() // TODO: change to something more sensible\n+        self.src.is_none()\n     }\n \n     pub fn byte_length(&self) -> u32 {"}]}