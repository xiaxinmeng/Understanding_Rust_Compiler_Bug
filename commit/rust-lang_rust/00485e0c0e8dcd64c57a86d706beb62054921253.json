{"sha": "00485e0c0e8dcd64c57a86d706beb62054921253", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwNDg1ZTBjMGU4ZGNkNjRjNTdhODZkNzA2YmViNjIwNTQ5MjEyNTM=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-04-18T12:27:04Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-09-10T18:17:33Z"}, "message": "Keep a parent LocalDefId in SpanData.", "tree": {"sha": "d5920e5354a86ea0180d39f7068029f0a33bc296", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d5920e5354a86ea0180d39f7068029f0a33bc296"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/00485e0c0e8dcd64c57a86d706beb62054921253", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/00485e0c0e8dcd64c57a86d706beb62054921253", "html_url": "https://github.com/rust-lang/rust/commit/00485e0c0e8dcd64c57a86d706beb62054921253", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/00485e0c0e8dcd64c57a86d706beb62054921253/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "06f7ca307d7ffdbdafe05eb76cc850eaf716916d", "url": "https://api.github.com/repos/rust-lang/rust/commits/06f7ca307d7ffdbdafe05eb76cc850eaf716916d", "html_url": "https://github.com/rust-lang/rust/commit/06f7ca307d7ffdbdafe05eb76cc850eaf716916d"}], "stats": {"total": 128, "additions": 88, "deletions": 40}, "files": [{"sha": "5f17008bdc2b0747e118971443f2ca616f59d64c", "filename": "compiler/rustc_ast/src/attr/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00485e0c0e8dcd64c57a86d706beb62054921253/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00485e0c0e8dcd64c57a86d706beb62054921253/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs?ref=00485e0c0e8dcd64c57a86d706beb62054921253", "patch": "@@ -367,7 +367,7 @@ impl MetaItem {\n             let is_first = i == 0;\n             if !is_first {\n                 let mod_sep_span =\n-                    Span::new(last_pos, segment.ident.span.lo(), segment.ident.span.ctxt());\n+                    Span::new(last_pos, segment.ident.span.lo(), segment.ident.span.ctxt(), None);\n                 idents.push(TokenTree::token(token::ModSep, mod_sep_span).into());\n             }\n             idents.push(TokenTree::Token(Token::from_ast_ident(segment.ident)).into());"}, {"sha": "5dc2043b36415f233da11b31b627a7a3f0c1de88", "filename": "compiler/rustc_expand/src/proc_macro_server.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00485e0c0e8dcd64c57a86d706beb62054921253/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00485e0c0e8dcd64c57a86d706beb62054921253/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs?ref=00485e0c0e8dcd64c57a86d706beb62054921253", "patch": "@@ -745,7 +745,7 @@ impl server::Span for Rustc<'_> {\n         self.sess.source_map().lookup_char_pos(span.lo()).file\n     }\n     fn parent(&mut self, span: Self::Span) -> Option<Self::Span> {\n-        span.parent()\n+        span.parent_callsite()\n     }\n     fn source(&mut self, span: Self::Span) -> Self::Span {\n         span.source_callsite()"}, {"sha": "5f01cfa6a7da2d63af50bbbad92408a514d4ee8e", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/00485e0c0e8dcd64c57a86d706beb62054921253/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00485e0c0e8dcd64c57a86d706beb62054921253/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=00485e0c0e8dcd64c57a86d706beb62054921253", "patch": "@@ -536,7 +536,8 @@ impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for Span {\n         let hi =\n             (hi + source_file.translated_source_file.start_pos) - source_file.original_start_pos;\n \n-        Ok(Span::new(lo, hi, ctxt))\n+        // Do not try to decode parent for foreign spans.\n+        Ok(Span::new(lo, hi, ctxt, None))\n     }\n }\n "}, {"sha": "08b4d3aecda0ae358abcd76529f8497010ce8069", "filename": "compiler/rustc_middle/src/ty/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00485e0c0e8dcd64c57a86d706beb62054921253/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00485e0c0e8dcd64c57a86d706beb62054921253/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs?ref=00485e0c0e8dcd64c57a86d706beb62054921253", "patch": "@@ -964,7 +964,7 @@ fn foo(&self) -> Self::T { String::new() }\n         {\n             let (span, sugg) = if has_params {\n                 let pos = span.hi() - BytePos(1);\n-                let span = Span::new(pos, pos, span.ctxt());\n+                let span = Span::new(pos, pos, span.ctxt(), span.parent());\n                 (span, format!(\", {} = {}\", assoc.ident, ty))\n             } else {\n                 let item_args = self.format_generic_args(assoc_substs);"}, {"sha": "cc525a4d6b91ca1a1ab9e491b4086c57a6c46885", "filename": "compiler/rustc_mir_transform/src/coverage/spans.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/00485e0c0e8dcd64c57a86d706beb62054921253/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fspans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00485e0c0e8dcd64c57a86d706beb62054921253/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fspans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fspans.rs?ref=00485e0c0e8dcd64c57a86d706beb62054921253", "patch": "@@ -196,7 +196,11 @@ impl CoverageSpan {\n     /// body_span), returns the macro name symbol.\n     pub fn visible_macro(&self, body_span: Span) -> Option<Symbol> {\n         if let Some(current_macro) = self.current_macro() {\n-            if self.expn_span.parent().unwrap_or_else(|| bug!(\"macro must have a parent\")).ctxt()\n+            if self\n+                .expn_span\n+                .parent_callsite()\n+                .unwrap_or_else(|| bug!(\"macro must have a parent\"))\n+                .ctxt()\n                 == body_span.ctxt()\n             {\n                 return Some(current_macro);"}, {"sha": "af41a99ada4dd57997756c1f318b3a38c79741c5", "filename": "compiler/rustc_parse/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00485e0c0e8dcd64c57a86d706beb62054921253/compiler%2Frustc_parse%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00485e0c0e8dcd64c57a86d706beb62054921253/compiler%2Frustc_parse%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flib.rs?ref=00485e0c0e8dcd64c57a86d706beb62054921253", "patch": "@@ -131,7 +131,7 @@ fn maybe_source_file_to_parser(\n     let mut parser = stream_to_parser(sess, stream, None);\n     parser.unclosed_delims = unclosed_delims;\n     if parser.token == token::Eof {\n-        parser.token.span = Span::new(end_pos, end_pos, parser.token.span.ctxt());\n+        parser.token.span = Span::new(end_pos, end_pos, parser.token.span.ctxt(), None);\n     }\n \n     Ok(parser)"}, {"sha": "be305e60a0a37290e4264796018dd215c5fe9cf0", "filename": "compiler/rustc_query_impl/src/on_disk_cache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00485e0c0e8dcd64c57a86d706beb62054921253/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00485e0c0e8dcd64c57a86d706beb62054921253/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs?ref=00485e0c0e8dcd64c57a86d706beb62054921253", "patch": "@@ -848,7 +848,7 @@ impl<'a, 'tcx> Decodable<CacheDecoder<'a, 'tcx>> for Span {\n         let lo = file_lo.lines[line_lo - 1] + col_lo;\n         let hi = lo + len;\n \n-        Ok(Span::new(lo, hi, ctxt))\n+        Ok(Span::new(lo, hi, ctxt, None))\n     }\n }\n "}, {"sha": "a11d7a69c54f414588dcde497d979b16ed61d89c", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/00485e0c0e8dcd64c57a86d706beb62054921253/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00485e0c0e8dcd64c57a86d706beb62054921253/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=00485e0c0e8dcd64c57a86d706beb62054921253", "patch": "@@ -768,6 +768,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                                             args[1].span.lo(),\n                                             args.last().unwrap().span.hi(),\n                                             call_span.ctxt(),\n+                                            None,\n                                         ))\n                                     } else {\n                                         None"}, {"sha": "d744ad4014ae57f923df030f4b6b17a023bf0b07", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 43, "deletions": 18, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/00485e0c0e8dcd64c57a86d706beb62054921253/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00485e0c0e8dcd64c57a86d706beb62054921253/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=00485e0c0e8dcd64c57a86d706beb62054921253", "patch": "@@ -41,7 +41,7 @@ use hygiene::Transparency;\n pub use hygiene::{DesugaringKind, ExpnKind, ForLoopLoc, MacroKind};\n pub use hygiene::{ExpnData, ExpnHash, ExpnId, LocalExpnId, SyntaxContext};\n pub mod def_id;\n-use def_id::{CrateNum, DefId, DefPathHash, LOCAL_CRATE};\n+use def_id::{CrateNum, DefId, DefPathHash, LocalDefId, LOCAL_CRATE};\n pub mod lev_distance;\n mod span_encoding;\n pub use span_encoding::{Span, DUMMY_SP};\n@@ -434,24 +434,38 @@ pub struct SpanData {\n     /// Information about where the macro came from, if this piece of\n     /// code was created by a macro expansion.\n     pub ctxt: SyntaxContext,\n+    pub parent: Option<LocalDefId>,\n }\n \n impl SpanData {\n     #[inline]\n     pub fn span(&self) -> Span {\n-        Span::new(self.lo, self.hi, self.ctxt)\n+        Span::new(self.lo, self.hi, self.ctxt, self.parent)\n     }\n     #[inline]\n     pub fn with_lo(&self, lo: BytePos) -> Span {\n-        Span::new(lo, self.hi, self.ctxt)\n+        Span::new(lo, self.hi, self.ctxt, self.parent)\n     }\n     #[inline]\n     pub fn with_hi(&self, hi: BytePos) -> Span {\n-        Span::new(self.lo, hi, self.ctxt)\n+        Span::new(self.lo, hi, self.ctxt, self.parent)\n     }\n     #[inline]\n     pub fn with_ctxt(&self, ctxt: SyntaxContext) -> Span {\n-        Span::new(self.lo, self.hi, ctxt)\n+        Span::new(self.lo, self.hi, ctxt, self.parent)\n+    }\n+    #[inline]\n+    pub fn with_parent(&self, parent: Option<LocalDefId>) -> Span {\n+        Span::new(self.lo, self.hi, self.ctxt, parent)\n+    }\n+    /// Returns `true` if this is a dummy span with any hygienic context.\n+    #[inline]\n+    pub fn is_dummy(self) -> bool {\n+        self.lo.0 == 0 && self.hi.0 == 0\n+    }\n+    /// Returns `true` if `self` fully encloses `other`.\n+    pub fn contains(self, other: Self) -> bool {\n+        self.lo <= other.lo && other.hi <= self.hi\n     }\n }\n \n@@ -513,12 +527,19 @@ impl Span {\n     pub fn with_ctxt(self, ctxt: SyntaxContext) -> Span {\n         self.data().with_ctxt(ctxt)\n     }\n+    #[inline]\n+    pub fn parent(self) -> Option<LocalDefId> {\n+        self.data().parent\n+    }\n+    #[inline]\n+    pub fn with_parent(self, ctxt: Option<LocalDefId>) -> Span {\n+        self.data().with_parent(ctxt)\n+    }\n \n     /// Returns `true` if this is a dummy span with any hygienic context.\n     #[inline]\n     pub fn is_dummy(self) -> bool {\n-        let span = self.data();\n-        span.lo.0 == 0 && span.hi.0 == 0\n+        self.data().is_dummy()\n     }\n \n     /// Returns `true` if this span comes from a macro or desugaring.\n@@ -534,7 +555,7 @@ impl Span {\n \n     #[inline]\n     pub fn with_root_ctxt(lo: BytePos, hi: BytePos) -> Span {\n-        Span::new(lo, hi, SyntaxContext::root())\n+        Span::new(lo, hi, SyntaxContext::root(), None)\n     }\n \n     /// Returns a new span representing an empty span at the beginning of this span.\n@@ -566,7 +587,7 @@ impl Span {\n     pub fn contains(self, other: Span) -> bool {\n         let span = self.data();\n         let other = other.data();\n-        span.lo <= other.lo && other.hi <= span.hi\n+        span.contains(other)\n     }\n \n     /// Returns `true` if `self` touches `other`.\n@@ -602,15 +623,15 @@ impl Span {\n \n     /// The `Span` for the tokens in the previous macro expansion from which `self` was generated,\n     /// if any.\n-    pub fn parent(self) -> Option<Span> {\n+    pub fn parent_callsite(self) -> Option<Span> {\n         let expn_data = self.ctxt().outer_expn_data();\n         if !expn_data.is_root() { Some(expn_data.call_site) } else { None }\n     }\n \n     /// Walk down the expansion ancestors to find a span that's contained within `outer`.\n     pub fn find_ancestor_inside(mut self, outer: Span) -> Option<Span> {\n         while !outer.contains(self) {\n-            self = self.parent()?;\n+            self = self.parent_callsite()?;\n         }\n         Some(self)\n     }\n@@ -731,6 +752,7 @@ impl Span {\n             cmp::min(span_data.lo, end_data.lo),\n             cmp::max(span_data.hi, end_data.hi),\n             if span_data.ctxt == SyntaxContext::root() { end_data.ctxt } else { span_data.ctxt },\n+            if span_data.parent == end_data.parent { span_data.parent } else { None },\n         )\n     }\n \n@@ -748,6 +770,7 @@ impl Span {\n             span.hi,\n             end.lo,\n             if end.ctxt == SyntaxContext::root() { end.ctxt } else { span.ctxt },\n+            if span.parent == end.parent { span.parent } else { None },\n         )\n     }\n \n@@ -765,6 +788,7 @@ impl Span {\n             span.lo,\n             end.lo,\n             if end.ctxt == SyntaxContext::root() { end.ctxt } else { span.ctxt },\n+            if span.parent == end.parent { span.parent } else { None },\n         )\n     }\n \n@@ -774,6 +798,7 @@ impl Span {\n             span.lo + BytePos::from_usize(inner.start),\n             span.lo + BytePos::from_usize(inner.end),\n             span.ctxt,\n+            span.parent,\n         )\n     }\n \n@@ -812,31 +837,31 @@ impl Span {\n     pub fn remove_mark(&mut self) -> ExpnId {\n         let mut span = self.data();\n         let mark = span.ctxt.remove_mark();\n-        *self = Span::new(span.lo, span.hi, span.ctxt);\n+        *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);\n         mark\n     }\n \n     #[inline]\n     pub fn adjust(&mut self, expn_id: ExpnId) -> Option<ExpnId> {\n         let mut span = self.data();\n         let mark = span.ctxt.adjust(expn_id);\n-        *self = Span::new(span.lo, span.hi, span.ctxt);\n+        *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);\n         mark\n     }\n \n     #[inline]\n     pub fn normalize_to_macros_2_0_and_adjust(&mut self, expn_id: ExpnId) -> Option<ExpnId> {\n         let mut span = self.data();\n         let mark = span.ctxt.normalize_to_macros_2_0_and_adjust(expn_id);\n-        *self = Span::new(span.lo, span.hi, span.ctxt);\n+        *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);\n         mark\n     }\n \n     #[inline]\n     pub fn glob_adjust(&mut self, expn_id: ExpnId, glob_span: Span) -> Option<Option<ExpnId>> {\n         let mut span = self.data();\n         let mark = span.ctxt.glob_adjust(expn_id, glob_span);\n-        *self = Span::new(span.lo, span.hi, span.ctxt);\n+        *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);\n         mark\n     }\n \n@@ -848,7 +873,7 @@ impl Span {\n     ) -> Option<Option<ExpnId>> {\n         let mut span = self.data();\n         let mark = span.ctxt.reverse_glob_adjust(expn_id, glob_span);\n-        *self = Span::new(span.lo, span.hi, span.ctxt);\n+        *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);\n         mark\n     }\n \n@@ -900,7 +925,7 @@ impl<D: Decoder> Decodable<D> for Span {\n             let lo = d.read_struct_field(\"lo\", Decodable::decode)?;\n             let hi = d.read_struct_field(\"hi\", Decodable::decode)?;\n \n-            Ok(Span::new(lo, hi, SyntaxContext::root()))\n+            Ok(Span::new(lo, hi, SyntaxContext::root(), None))\n         })\n     }\n }\n@@ -961,7 +986,7 @@ impl fmt::Debug for Span {\n \n impl fmt::Debug for SpanData {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        (*SPAN_DEBUG)(Span::new(self.lo, self.hi, self.ctxt), f)\n+        (*SPAN_DEBUG)(Span::new(self.lo, self.hi, self.ctxt, self.parent), f)\n     }\n }\n "}, {"sha": "9e403eb3f67f3de9424a003c1ef56f68b4f899a2", "filename": "compiler/rustc_span/src/source_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00485e0c0e8dcd64c57a86d706beb62054921253/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00485e0c0e8dcd64c57a86d706beb62054921253/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs?ref=00485e0c0e8dcd64c57a86d706beb62054921253", "patch": "@@ -794,7 +794,7 @@ impl SourceMap {\n             start_of_next_point.checked_add(width - 1).unwrap_or(start_of_next_point);\n \n         let end_of_next_point = BytePos(cmp::max(sp.lo().0 + 1, end_of_next_point));\n-        Span::new(BytePos(start_of_next_point), end_of_next_point, sp.ctxt())\n+        Span::new(BytePos(start_of_next_point), end_of_next_point, sp.ctxt(), None)\n     }\n \n     /// Finds the width of the character, either before or after the end of provided span,"}, {"sha": "58d639082b07900750d39f5ceb1889f0529fc291", "filename": "compiler/rustc_span/src/span_encoding.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/00485e0c0e8dcd64c57a86d706beb62054921253/compiler%2Frustc_span%2Fsrc%2Fspan_encoding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00485e0c0e8dcd64c57a86d706beb62054921253/compiler%2Frustc_span%2Fsrc%2Fspan_encoding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fspan_encoding.rs?ref=00485e0c0e8dcd64c57a86d706beb62054921253", "patch": "@@ -4,6 +4,7 @@\n // The encoding format for inline spans were obtained by optimizing over crates in rustc/libstd.\n // See https://internals.rust-lang.org/t/rfc-compiler-refactoring-spans/1357/28\n \n+use crate::def_id::LocalDefId;\n use crate::hygiene::SyntaxContext;\n use crate::{BytePos, SpanData};\n \n@@ -70,19 +71,25 @@ pub const DUMMY_SP: Span = Span { base_or_index: 0, len_or_tag: 0, ctxt_or_zero:\n \n impl Span {\n     #[inline]\n-    pub fn new(mut lo: BytePos, mut hi: BytePos, ctxt: SyntaxContext) -> Self {\n+    pub fn new(\n+        mut lo: BytePos,\n+        mut hi: BytePos,\n+        ctxt: SyntaxContext,\n+        parent: Option<LocalDefId>,\n+    ) -> Self {\n         if lo > hi {\n             std::mem::swap(&mut lo, &mut hi);\n         }\n \n         let (base, len, ctxt2) = (lo.0, hi.0 - lo.0, ctxt.as_u32());\n \n-        if len <= MAX_LEN && ctxt2 <= MAX_CTXT {\n+        if len <= MAX_LEN && ctxt2 <= MAX_CTXT && parent.is_none() {\n             // Inline format.\n             Span { base_or_index: base, len_or_tag: len as u16, ctxt_or_zero: ctxt2 as u16 }\n         } else {\n             // Interned format.\n-            let index = with_span_interner(|interner| interner.intern(&SpanData { lo, hi, ctxt }));\n+            let index =\n+                with_span_interner(|interner| interner.intern(&SpanData { lo, hi, ctxt, parent }));\n             Span { base_or_index: index, len_or_tag: LEN_TAG, ctxt_or_zero: 0 }\n         }\n     }\n@@ -96,6 +103,7 @@ impl Span {\n                 lo: BytePos(self.base_or_index),\n                 hi: BytePos(self.base_or_index + self.len_or_tag as u32),\n                 ctxt: SyntaxContext::from_u32(self.ctxt_or_zero as u32),\n+                parent: None,\n             }\n         } else {\n             // Interned format."}, {"sha": "6c94b5acec7da05fa5bcd8057a01fca7ceb1e10b", "filename": "compiler/rustc_typeck/src/check/demand.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/00485e0c0e8dcd64c57a86d706beb62054921253/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00485e0c0e8dcd64c57a86d706beb62054921253/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs?ref=00485e0c0e8dcd64c57a86d706beb62054921253", "patch": "@@ -589,7 +589,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     // E.g. for `&format!(\"\")`, where we want the span to the\n                     // `format!()` invocation instead of its expansion.\n                     if let Some(call_span) =\n-                        iter::successors(Some(expr.span), |s| s.parent()).find(|&s| sp.contains(s))\n+                        iter::successors(Some(expr.span), |s| s.parent_callsite())\n+                            .find(|&s| sp.contains(s))\n                     {\n                         if sm.span_to_snippet(call_span).is_ok() {\n                             return Some(("}, {"sha": "2ef7dcc1775a6bfe9d6bf2d6784389c7839ff993", "filename": "src/tools/clippy/clippy_lints/src/attrs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/00485e0c0e8dcd64c57a86d706beb62054921253/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00485e0c0e8dcd64c57a86d706beb62054921253/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fattrs.rs?ref=00485e0c0e8dcd64c57a86d706beb62054921253", "patch": "@@ -527,8 +527,8 @@ fn check_empty_line_after_outer_attr(cx: &EarlyContext<'_>, item: &rustc_ast::It\n                 return;\n             }\n \n-            let begin_of_attr_to_item = Span::new(attr.span.lo(), item.span.lo(), item.span.ctxt());\n-            let end_of_attr_to_item = Span::new(attr.span.hi(), item.span.lo(), item.span.ctxt());\n+            let begin_of_attr_to_item = Span::new(attr.span.lo(), item.span.lo(), item.span.ctxt(), item.span.parent());\n+            let end_of_attr_to_item = Span::new(attr.span.hi(), item.span.lo(), item.span.ctxt(), item.span.parent());\n \n             if let Some(snippet) = snippet_opt(cx, end_of_attr_to_item) {\n                 let lines = snippet.split('\\n').collect::<Vec<_>>();"}, {"sha": "2203d1c39f1793e6c517b7db92f3baf19c6d691f", "filename": "src/tools/clippy/clippy_lints/src/cognitive_complexity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00485e0c0e8dcd64c57a86d706beb62054921253/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcognitive_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00485e0c0e8dcd64c57a86d706beb62054921253/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcognitive_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcognitive_complexity.rs?ref=00485e0c0e8dcd64c57a86d706beb62054921253", "patch": "@@ -95,7 +95,7 @@ impl CognitiveComplexity {\n                     });\n \n                     if let Some((low, high)) = pos {\n-                        Span::new(low, high, header_span.ctxt())\n+                        Span::new(low, high, header_span.ctxt(), header_span.parent())\n                     } else {\n                         return;\n                     }"}, {"sha": "6ded2f233efea615f800800a41ffd3fda50a563a", "filename": "src/tools/clippy/clippy_lints/src/copies.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00485e0c0e8dcd64c57a86d706beb62054921253/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00485e0c0e8dcd64c57a86d706beb62054921253/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcopies.rs?ref=00485e0c0e8dcd64c57a86d706beb62054921253", "patch": "@@ -472,7 +472,7 @@ fn emit_branches_sharing_code_lint(\n \n         let mut span = moved_start.to(span_end);\n         // Improve formatting if the inner block has indention (i.e. normal Rust formatting)\n-        let test_span = Span::new(span.lo() - BytePos(4), span.lo(), span.ctxt());\n+        let test_span = Span::new(span.lo() - BytePos(4), span.lo(), span.ctxt(), span.parent());\n         if snippet_opt(cx, test_span)\n             .map(|snip| snip == \"    \")\n             .unwrap_or_default()"}, {"sha": "0b61909ddd82d5f7df7a29342aad3eaeabf2a893", "filename": "src/tools/clippy/clippy_lints/src/doc.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/00485e0c0e8dcd64c57a86d706beb62054921253/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00485e0c0e8dcd64c57a86d706beb62054921253/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdoc.rs?ref=00485e0c0e8dcd64c57a86d706beb62054921253", "patch": "@@ -665,6 +665,7 @@ fn check_text(cx: &LateContext<'_>, valid_idents: &FxHashSet<String>, text: &str\n             span.lo() + BytePos::from_usize(offset),\n             span.lo() + BytePos::from_usize(offset + word.len()),\n             span.ctxt(),\n+            span.parent(),\n         );\n \n         check_word(cx, word, span);"}, {"sha": "2fe32fcf6651a8b67420a4fc798d8b2326f9aba4", "filename": "src/tools/clippy/clippy_lints/src/implicit_hasher.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/00485e0c0e8dcd64c57a86d706beb62054921253/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fimplicit_hasher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00485e0c0e8dcd64c57a86d706beb62054921253/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fimplicit_hasher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fimplicit_hasher.rs?ref=00485e0c0e8dcd64c57a86d706beb62054921253", "patch": "@@ -130,7 +130,7 @@ impl<'tcx> LateLintPass<'tcx> for ImplicitHasher {\n                         let pos = snippet_opt(cx, item.span.until(target.span()))\n                             .and_then(|snip| Some(item.span.lo() + BytePos(snip.find(\"impl\")? as u32 + 4)));\n                         if let Some(pos) = pos {\n-                            Span::new(pos, pos, item.span.data().ctxt)\n+                            Span::new(pos, pos, item.span.ctxt(), item.span.parent())\n                         } else {\n                             return;\n                         }\n@@ -173,7 +173,7 @@ impl<'tcx> LateLintPass<'tcx> for ImplicitHasher {\n                                     Some(item.span.lo() + BytePos((i + (&snip[i..]).find('(')?) as u32))\n                                 })\n                                 .expect(\"failed to create span for type parameters\");\n-                            Span::new(pos, pos, item.span.data().ctxt)\n+                            Span::new(pos, pos, item.span.ctxt(), item.span.parent())\n                         });\n \n                         let mut ctr_vis = ImplicitHasherConstructorVisitor::new(cx, target);"}, {"sha": "fe6814e35d0ca1da4475f6428eb0c3fcd8186ec9", "filename": "src/tools/clippy/clippy_lints/src/large_const_arrays.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/00485e0c0e8dcd64c57a86d706beb62054921253/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flarge_const_arrays.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00485e0c0e8dcd64c57a86d706beb62054921253/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flarge_const_arrays.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flarge_const_arrays.rs?ref=00485e0c0e8dcd64c57a86d706beb62054921253", "patch": "@@ -63,6 +63,7 @@ impl<'tcx> LateLintPass<'tcx> for LargeConstArrays {\n                     hi_pos - BytePos::from_usize(\"const\".len()),\n                     hi_pos,\n                     item.span.ctxt(),\n+                    item.span.parent(),\n                 );\n                 span_lint_and_then(\n                     cx,"}, {"sha": "0e25e3f1a524f10123e8f8d72962c7a8b394eef8", "filename": "src/tools/clippy/clippy_lints/src/regex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00485e0c0e8dcd64c57a86d706beb62054921253/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fregex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00485e0c0e8dcd64c57a86d706beb62054921253/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fregex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fregex.rs?ref=00485e0c0e8dcd64c57a86d706beb62054921253", "patch": "@@ -91,7 +91,7 @@ fn str_span(base: Span, c: regex_syntax::ast::Span, offset: u16) -> Span {\n     let end = base.lo() + BytePos(u32::try_from(c.end.offset).expect(\"offset too large\") + offset);\n     let start = base.lo() + BytePos(u32::try_from(c.start.offset).expect(\"offset too large\") + offset);\n     assert!(start <= end);\n-    Span::new(start, end, base.ctxt())\n+    Span::new(start, end, base.ctxt(), base.parent())\n }\n \n fn const_str<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) -> Option<String> {"}, {"sha": "4a67cabf323a6a1489f84d485bce350acc98a8cf", "filename": "src/tools/clippy/clippy_lints/src/tabs_in_doc_comments.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/00485e0c0e8dcd64c57a86d706beb62054921253/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftabs_in_doc_comments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00485e0c0e8dcd64c57a86d706beb62054921253/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftabs_in_doc_comments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftabs_in_doc_comments.rs?ref=00485e0c0e8dcd64c57a86d706beb62054921253", "patch": "@@ -69,6 +69,7 @@ impl TabsInDocComments {\n                     attr.span.lo() + BytePos(3 + lo),\n                     attr.span.lo() + BytePos(3 + hi),\n                     attr.span.ctxt(),\n+                    attr.span.parent(),\n                 );\n                 span_lint_and_sugg(\n                     cx,"}, {"sha": "f483505a53e8ac3594be911a854333d7b3be1aa4", "filename": "src/tools/rustfmt/src/macros.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/00485e0c0e8dcd64c57a86d706beb62054921253/src%2Ftools%2Frustfmt%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00485e0c0e8dcd64c57a86d706beb62054921253/src%2Ftools%2Frustfmt%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fmacros.rs?ref=00485e0c0e8dcd64c57a86d706beb62054921253", "patch": "@@ -1270,7 +1270,12 @@ impl MacroParser {\n                 let data = delimited_span.entire().data();\n                 (\n                     data.hi,\n-                    Span::new(data.lo + BytePos(1), data.hi - BytePos(1), data.ctxt),\n+                    Span::new(\n+                        data.lo + BytePos(1),\n+                        data.hi - BytePos(1),\n+                        data.ctxt,\n+                        data.parent,\n+                    ),\n                     delimited_span.entire(),\n                 )\n             }"}, {"sha": "29e1e070d41114079921683fea87f7cd62ec941f", "filename": "src/tools/rustfmt/src/utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/00485e0c0e8dcd64c57a86d706beb62054921253/src%2Ftools%2Frustfmt%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00485e0c0e8dcd64c57a86d706beb62054921253/src%2Ftools%2Frustfmt%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Futils.rs?ref=00485e0c0e8dcd64c57a86d706beb62054921253", "patch": "@@ -356,11 +356,11 @@ macro_rules! source {\n }\n \n pub(crate) fn mk_sp(lo: BytePos, hi: BytePos) -> Span {\n-    Span::new(lo, hi, SyntaxContext::root())\n+    Span::new(lo, hi, SyntaxContext::root(), None)\n }\n \n pub(crate) fn mk_sp_lo_plus_one(lo: BytePos) -> Span {\n-    Span::new(lo, lo + BytePos(1), SyntaxContext::root())\n+    Span::new(lo, lo + BytePos(1), SyntaxContext::root(), None)\n }\n \n // Returns `true` if the given span does not intersect with file lines."}]}