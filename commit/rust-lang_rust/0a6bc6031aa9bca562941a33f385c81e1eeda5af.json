{"sha": "0a6bc6031aa9bca562941a33f385c81e1eeda5af", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhNmJjNjAzMWFhOWJjYTU2Mjk0MWEzM2YzODVjODFlMWVlZGE1YWY=", "commit": {"author": {"name": "sinkuu", "email": "sinkuupump@gmail.com", "date": "2017-02-20T03:50:31Z"}, "committer": {"name": "sinkuu", "email": "sinkuupump@gmail.com", "date": "2017-02-20T07:02:48Z"}, "message": "Rename lint to needless_take_by_value\n\nAnd fixes false-positives for generics and `match`", "tree": {"sha": "8f1999476fc26eda0f61d299712bd9b00d2dac8c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f1999476fc26eda0f61d299712bd9b00d2dac8c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a6bc6031aa9bca562941a33f385c81e1eeda5af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a6bc6031aa9bca562941a33f385c81e1eeda5af", "html_url": "https://github.com/rust-lang/rust/commit/0a6bc6031aa9bca562941a33f385c81e1eeda5af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a6bc6031aa9bca562941a33f385c81e1eeda5af/comments", "author": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2f73e7818bb000d22fa3c02b6bef68e458d8d6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2f73e7818bb000d22fa3c02b6bef68e458d8d6d", "html_url": "https://github.com/rust-lang/rust/commit/d2f73e7818bb000d22fa3c02b6bef68e458d8d6d"}], "stats": {"total": 222, "additions": 155, "deletions": 67}, "files": [{"sha": "a3b07c0ceaf96c1f179bdf3f6c116354b1f1f657", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a6bc6031aa9bca562941a33f385c81e1eeda5af/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/0a6bc6031aa9bca562941a33f385c81e1eeda5af/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=0a6bc6031aa9bca562941a33f385c81e1eeda5af", "patch": "@@ -381,9 +381,9 @@ All notable changes to this project will be documented in this file.\n [`needless_bool`]: https://github.com/Manishearth/rust-clippy/wiki#needless_bool\n [`needless_borrow`]: https://github.com/Manishearth/rust-clippy/wiki#needless_borrow\n [`needless_lifetimes`]: https://github.com/Manishearth/rust-clippy/wiki#needless_lifetimes\n+[`needless_pass_by_value`]: https://github.com/Manishearth/rust-clippy/wiki#needless_pass_by_value\n [`needless_range_loop`]: https://github.com/Manishearth/rust-clippy/wiki#needless_range_loop\n [`needless_return`]: https://github.com/Manishearth/rust-clippy/wiki#needless_return\n-[`needless_take_by_value`]: https://github.com/Manishearth/rust-clippy/wiki#needless_take_by_value\n [`needless_update`]: https://github.com/Manishearth/rust-clippy/wiki#needless_update\n [`neg_multiply`]: https://github.com/Manishearth/rust-clippy/wiki#neg_multiply\n [`never_loop`]: https://github.com/Manishearth/rust-clippy/wiki#never_loop"}, {"sha": "7cff4a30fe12895e5a6b68bcf4b73881e2d99636", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a6bc6031aa9bca562941a33f385c81e1eeda5af/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/0a6bc6031aa9bca562941a33f385c81e1eeda5af/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=0a6bc6031aa9bca562941a33f385c81e1eeda5af", "patch": "@@ -287,9 +287,9 @@ name\n [needless_bool](https://github.com/Manishearth/rust-clippy/wiki#needless_bool)                                         | warn    | if-statements with plain booleans in the then- and else-clause, e.g. `if p { true } else { false }`\n [needless_borrow](https://github.com/Manishearth/rust-clippy/wiki#needless_borrow)                                     | warn    | taking a reference that is going to be automatically dereferenced\n [needless_lifetimes](https://github.com/Manishearth/rust-clippy/wiki#needless_lifetimes)                               | warn    | using explicit lifetimes for references in function arguments when elision rules would allow omitting them\n+[needless_pass_by_value](https://github.com/Manishearth/rust-clippy/wiki#needless_pass_by_value)                       | warn    | functions taking arguments by value, but only using them by reference\n [needless_range_loop](https://github.com/Manishearth/rust-clippy/wiki#needless_range_loop)                             | warn    | for-looping over a range of indices where an iterator over items would do\n [needless_return](https://github.com/Manishearth/rust-clippy/wiki#needless_return)                                     | warn    | using a return statement like `return expr;` where an expression would suffice\n-[needless_take_by_value](https://github.com/Manishearth/rust-clippy/wiki#needless_take_by_value)                       | warn    | taking arguments by value, but only using them by reference\n [needless_update](https://github.com/Manishearth/rust-clippy/wiki#needless_update)                                     | warn    | using `Foo { ..base }` when there are no missing fields\n [neg_multiply](https://github.com/Manishearth/rust-clippy/wiki#neg_multiply)                                           | warn    | multiplying integers with -1\n [never_loop](https://github.com/Manishearth/rust-clippy/wiki#never_loop)                                               | warn    | any loop with an unconditional `break` statement"}, {"sha": "7d231ff99b508cd2694f771cf9d9367c29ec2406", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0a6bc6031aa9bca562941a33f385c81e1eeda5af/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a6bc6031aa9bca562941a33f385c81e1eeda5af/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=0a6bc6031aa9bca562941a33f385c81e1eeda5af", "patch": "@@ -107,7 +107,7 @@ pub mod mut_reference;\n pub mod mutex_atomic;\n pub mod needless_bool;\n pub mod needless_borrow;\n-pub mod needless_take_by_value;\n+pub mod needless_pass_by_value;\n pub mod needless_update;\n pub mod neg_multiply;\n pub mod new_without_default;\n@@ -300,7 +300,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n     reg.register_late_lint_pass(box unused_io_amount::UnusedIoAmount);\n     reg.register_late_lint_pass(box large_enum_variant::LargeEnumVariant::new(conf.enum_variant_size_threshold));\n     reg.register_late_lint_pass(box should_assert_eq::ShouldAssertEq);\n-    reg.register_late_lint_pass(box needless_take_by_value::NeedlessTakeByValue);\n+    reg.register_late_lint_pass(box needless_pass_by_value::NeedlessPassByValue);\n \n     reg.register_lint_group(\"clippy_restrictions\", vec![\n         arithmetic::FLOAT_ARITHMETIC,\n@@ -457,7 +457,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         needless_bool::BOOL_COMPARISON,\n         needless_bool::NEEDLESS_BOOL,\n         needless_borrow::NEEDLESS_BORROW,\n-        needless_take_by_value::NEEDLESS_TAKE_BY_VALUE,\n+        needless_pass_by_value::NEEDLESS_PASS_BY_VALUE,\n         needless_update::NEEDLESS_UPDATE,\n         neg_multiply::NEG_MULTIPLY,\n         new_without_default::NEW_WITHOUT_DEFAULT,"}, {"sha": "5a8ff442262c2108bcb237f9055a5ca325e5318d", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0a6bc6031aa9bca562941a33f385c81e1eeda5af/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a6bc6031aa9bca562941a33f385c81e1eeda5af/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=0a6bc6031aa9bca562941a33f385c81e1eeda5af", "patch": "@@ -395,7 +395,7 @@ fn check_match_ref_pats(cx: &LateContext, ex: &Expr, arms: &[Arm], source: Match\n                                \"you don't need to add `&` to both the expression and the patterns\",\n                                |db| {\n                 let inner = Sugg::hir(cx, inner, \"..\");\n-                let template = match_template(expr.span, source, inner);\n+                let template = match_template(expr.span, source, &inner);\n                 db.span_suggestion(expr.span, \"try\", template);\n             });\n         } else {\n@@ -405,7 +405,7 @@ fn check_match_ref_pats(cx: &LateContext, ex: &Expr, arms: &[Arm], source: Match\n                                \"you don't need to add `&` to all patterns\",\n                                |db| {\n                 let ex = Sugg::hir(cx, ex, \"..\");\n-                let template = match_template(expr.span, source, ex.deref());\n+                let template = match_template(expr.span, source, &ex.deref());\n                 db.span_suggestion(expr.span,\n                                    \"instead of prefixing all patterns with `&`, you can dereference the expression\",\n                                    template);\n@@ -509,7 +509,7 @@ fn has_only_ref_pats(arms: &[Arm]) -> bool {\n     mapped.map_or(false, |v| v.iter().any(|el| *el))\n }\n \n-fn match_template(span: Span, source: MatchSource, expr: Sugg) -> String {\n+fn match_template(span: Span, source: MatchSource, expr: &Sugg) -> String {\n     match source {\n         MatchSource::Normal => format!(\"match {} {{ .. }}\", expr),\n         MatchSource::IfLetDesugar { .. } => format!(\"if let .. = {} {{ .. }}\", expr),"}, {"sha": "a292739302d7ed1414b58016eb2e56d3a98333c1", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "renamed", "additions": 79, "deletions": 31, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/0a6bc6031aa9bca562941a33f385c81e1eeda5af/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a6bc6031aa9bca562941a33f385c81e1eeda5af/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=0a6bc6031aa9bca562941a33f385c81e1eeda5af", "patch": "@@ -2,19 +2,21 @@ use rustc::hir::*;\n use rustc::hir::intravisit::FnKind;\n use rustc::hir::def_id::DefId;\n use rustc::lint::*;\n-use rustc::ty;\n+use rustc::ty::{self, TypeFoldable};\n+use rustc::traits;\n use rustc::middle::expr_use_visitor as euv;\n use rustc::middle::mem_categorization as mc;\n use syntax::ast::NodeId;\n use syntax_pos::Span;\n-use utils::{in_macro, is_self, is_copy, implements_trait, get_trait_def_id, snippet, span_lint_and_then, paths};\n+use utils::{in_macro, is_self, is_copy, implements_trait, get_trait_def_id, match_type, snippet, span_lint_and_then,\n+            paths};\n use std::collections::HashSet;\n \n-/// **What it does:** Checks for functions taking arguments by value, but only using them by\n-/// reference.\n+/// **What it does:** Checks for functions taking arguments by value, but not consuming them in its\n+/// body.\n ///\n-/// **Why is this bad?** In such cases, taking arguments by reference is more flexible and\n-/// can sometimes avoid unnecessary allocations.\n+/// **Why is this bad?** Taking arguments by reference is more flexible and can sometimes avoid\n+/// unnecessary allocations.\n ///\n /// **Known problems:** Hopefully none.\n ///\n@@ -25,20 +27,20 @@ use std::collections::HashSet;\n /// }\n /// ```\n declare_lint! {\n-    pub NEEDLESS_TAKE_BY_VALUE,\n+    pub NEEDLESS_PASS_BY_VALUE,\n     Warn,\n-    \"taking arguments by value, but only using them by reference\"\n+    \"functions taking arguments by value, but not consuming them in its body\"\n }\n \n-pub struct NeedlessTakeByValue;\n+pub struct NeedlessPassByValue;\n \n-impl LintPass for NeedlessTakeByValue {\n+impl LintPass for NeedlessPassByValue {\n     fn get_lints(&self) -> LintArray {\n-        lint_array![NEEDLESS_TAKE_BY_VALUE]\n+        lint_array![NEEDLESS_PASS_BY_VALUE]\n     }\n }\n \n-impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessTakeByValue {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n     fn check_fn(\n         &mut self,\n         cx: &LateContext<'a, 'tcx>,\n@@ -57,11 +59,18 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessTakeByValue {\n             return;\n         }\n \n-        // These are usually took by value and only used by reference\n+        // These are usually passed by value and only used by reference\n         let fn_trait = cx.tcx.lang_items.fn_trait().expect(\"failed to find `Fn` trait\");\n         let asref_trait = get_trait_def_id(cx, &paths::ASREF_TRAIT).expect(\"failed to find `AsRef` trait\");\n         let borrow_trait = get_trait_def_id(cx, &paths::BORROW_TRAIT).expect(\"failed to find `Borrow` trait\");\n \n+        let preds: Vec<ty::Predicate> = {\n+            let parameter_env = ty::ParameterEnvironment::for_item(cx.tcx, node_id);\n+            traits::elaborate_predicates(cx.tcx, parameter_env.caller_bounds.clone())\n+                .filter(|p| !p.is_global())\n+                .collect()\n+        };\n+\n         // Collect moved variables from the function body\n         let moved_vars = {\n             let mut ctx = MovedVariablesCtxt::new(cx);\n@@ -79,13 +88,26 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessTakeByValue {\n         let fn_sig = cx.tcx.liberate_late_bound_regions(param_env.free_id_outlive, fn_sig);\n \n         for ((input, ty), arg) in decl.inputs.iter().zip(fn_sig.inputs()).zip(&body.arguments) {\n+\n+            // Determines whether `ty` implements `Borrow<U>` (U != ty) specifically.\n+            // `implements_trait(.., borrow_trait, ..)` is useless\n+            // due to the `Borrow<T> for T` blanket impl.\n+            let implements_borrow_trait = preds.iter()\n+                .filter_map(|pred| if let ty::Predicate::Trait(ref poly_trait_ref) = *pred {\n+                    Some(poly_trait_ref.skip_binder())\n+                } else {\n+                    None\n+                })\n+                .filter(|tpred| tpred.def_id() == borrow_trait && &tpred.self_ty() == ty)\n+                .any(|tpred| &tpred.input_types().nth(1).expect(\"Borrow trait must have an input\") != ty);\n+\n             if_let_chain! {[\n                 !is_self(arg),\n                 !ty.is_mutable_pointer(),\n                 !is_copy(cx, ty, node_id),\n                 !implements_trait(cx, ty, fn_trait, &[], Some(node_id)),\n                 !implements_trait(cx, ty, asref_trait, &[], Some(node_id)),\n-                !implements_trait(cx, ty, borrow_trait, &[], Some(node_id)),\n+                !implements_borrow_trait,\n \n                 let PatKind::Binding(mode, defid, ..) = arg.pat.node,\n                 !moved_vars.contains(&defid),\n@@ -99,14 +121,34 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessTakeByValue {\n                 }\n \n                 span_lint_and_then(cx,\n-                          NEEDLESS_TAKE_BY_VALUE,\n+                          NEEDLESS_PASS_BY_VALUE,\n                           input.span,\n-                          \"this function taking a value by value, but only using them by reference\",\n+                          \"this argument is passed by value, but not consumed in the function body\",\n                           |db| {\n-                              db.span_suggestion(input.span,\n-                                                 \"consider taking a reference instead\",\n-                                                 format!(\"&{}\", snippet(cx, input.span, \"_\")));\n-                          });\n+                    if_let_chain! {[\n+                        match_type(cx, ty, &paths::VEC),\n+                        let TyPath(QPath::Resolved(_, ref path)) = input.node,\n+                        let Some(elem_ty) = path.segments.iter()\n+                            .find(|seg| &*seg.name.as_str() == \"Vec\")\n+                            .map(|ps| ps.parameters.types()[0]),\n+                    ], {\n+                        let slice_ty = format!(\"&[{}]\", snippet(cx, elem_ty.span, \"_\"));\n+                        db.span_suggestion(input.span,\n+                                        &format!(\"consider changing the type to `{}`\", slice_ty),\n+                                        slice_ty);\n+                        return;\n+                    }}\n+\n+                    if match_type(cx, ty, &paths::STRING) {\n+                        db.span_suggestion(input.span,\n+                                           \"consider changing the type to `&str`\",\n+                                           \"&str\".to_string());\n+                    } else {\n+                        db.span_suggestion(input.span,\n+                                           \"consider taking a reference instead\",\n+                                           format!(\"&{}\", snippet(cx, input.span, \"_\")));\n+                    }\n+                });\n             }}\n         }\n     }\n@@ -125,13 +167,11 @@ impl<'a, 'tcx: 'a> MovedVariablesCtxt<'a, 'tcx> {\n         }\n     }\n \n-    fn consume_common(\n-        &mut self,\n-        _consume_id: NodeId,\n-        _consume_span: Span,\n-        cmt: mc::cmt<'tcx>,\n-        mode: euv::ConsumeMode\n-    ) {\n+    fn consume_common(&mut self, _span: Span, cmt: mc::cmt<'tcx>, mode: euv::ConsumeMode) {\n+        /*::utils::span_lint(self.cx,\n+                           NEEDLESS_PASS_BY_VALUE,\n+                           span,\n+                           &format!(\"consumed here, {:?} {:?}\", mode, cmt.cat));*/\n         if_let_chain! {[\n             let euv::ConsumeMode::Move(_) = mode,\n             let mc::Categorization::Local(vid) = cmt.cat,\n@@ -145,14 +185,22 @@ impl<'a, 'tcx: 'a> MovedVariablesCtxt<'a, 'tcx> {\n }\n \n impl<'a, 'tcx: 'a> euv::Delegate<'tcx> for MovedVariablesCtxt<'a, 'tcx> {\n-    fn consume(&mut self, consume_id: NodeId, consume_span: Span, cmt: mc::cmt<'tcx>, mode: euv::ConsumeMode) {\n-        self.consume_common(consume_id, consume_span, cmt, mode);\n+    fn consume(&mut self, _consume_id: NodeId, consume_span: Span, cmt: mc::cmt<'tcx>, mode: euv::ConsumeMode) {\n+        self.consume_common(consume_span, cmt, mode);\n     }\n \n-    fn matched_pat(&mut self, _matched_pat: &Pat, _cmt: mc::cmt, _mode: euv::MatchMode) {}\n+    fn matched_pat(&mut self, matched_pat: &Pat, mut cmt: mc::cmt<'tcx>, _mode: euv::MatchMode) {\n+        if let mc::Categorization::Downcast(c, _) = cmt.cat.clone() {\n+            cmt = c;\n+        }\n+\n+        // if let euv::MatchMode::MovingMatch = mode {\n+        self.consume_common(matched_pat.span, cmt, euv::ConsumeMode::Move(euv::MoveReason::PatBindingMove));\n+        // }\n+    }\n \n     fn consume_pat(&mut self, consume_pat: &Pat, cmt: mc::cmt<'tcx>, mode: euv::ConsumeMode) {\n-        self.consume_common(consume_pat.id, consume_pat.span, cmt, mode);\n+        self.consume_common(consume_pat.span, cmt, mode);\n     }\n \n     fn borrow(", "previous_filename": "clippy_lints/src/needless_take_by_value.rs"}, {"sha": "b4ae42497fe9dd8b55a085bea889272ea69f9062", "filename": "clippy_lints/src/utils/sugg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a6bc6031aa9bca562941a33f385c81e1eeda5af/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a6bc6031aa9bca562941a33f385c81e1eeda5af/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fsugg.rs?ref=0a6bc6031aa9bca562941a33f385c81e1eeda5af", "patch": "@@ -301,7 +301,7 @@ pub fn make_binop(op: ast::BinOpKind, lhs: &Sugg, rhs: &Sugg) -> Sugg<'static> {\n     make_assoc(AssocOp::from_ast_binop(op), lhs, rhs)\n }\n \n-#[derive(PartialEq, Eq)]\n+#[derive(PartialEq, Eq, Clone, Copy)]\n /// Operator associativity.\n enum Associativity {\n     /// The operator is both left-associative and right-associative."}, {"sha": "3482237bd0bc95173f81ae796cdb7770e8804a82", "filename": "tests/ui/absurd-extreme-comparisons.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a6bc6031aa9bca562941a33f385c81e1eeda5af/tests%2Fui%2Fabsurd-extreme-comparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a6bc6031aa9bca562941a33f385c81e1eeda5af/tests%2Fui%2Fabsurd-extreme-comparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fabsurd-extreme-comparisons.rs?ref=0a6bc6031aa9bca562941a33f385c81e1eeda5af", "patch": "@@ -2,7 +2,7 @@\n #![plugin(clippy)]\n \n #![deny(absurd_extreme_comparisons)]\n-#![allow(unused, eq_op, no_effect, unnecessary_operation, needless_take_by_value)]\n+#![allow(unused, eq_op, no_effect, unnecessary_operation, needless_pass_by_value)]\n \n fn main() {\n     const Z: u32 = 0;"}, {"sha": "836ac0fd37fac75e8455f5a7c52e193035ce2d85", "filename": "tests/ui/box_vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a6bc6031aa9bca562941a33f385c81e1eeda5af/tests%2Fui%2Fbox_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a6bc6031aa9bca562941a33f385c81e1eeda5af/tests%2Fui%2Fbox_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox_vec.rs?ref=0a6bc6031aa9bca562941a33f385c81e1eeda5af", "patch": "@@ -2,7 +2,7 @@\n #![plugin(clippy)]\n \n #![deny(clippy)]\n-#![allow(boxed_local, needless_take_by_value)]\n+#![allow(boxed_local, needless_pass_by_value)]\n #![allow(blacklisted_name)]\n \n macro_rules! boxit {"}, {"sha": "f3b9e0a03af8ae88f62e3bfd70768cda94610ae5", "filename": "tests/ui/complex_types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a6bc6031aa9bca562941a33f385c81e1eeda5af/tests%2Fui%2Fcomplex_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a6bc6031aa9bca562941a33f385c81e1eeda5af/tests%2Fui%2Fcomplex_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcomplex_types.rs?ref=0a6bc6031aa9bca562941a33f385c81e1eeda5af", "patch": "@@ -1,7 +1,7 @@\n #![feature(plugin)]\n #![plugin(clippy)]\n #![deny(clippy)]\n-#![allow(unused, needless_take_by_value)]\n+#![allow(unused, needless_pass_by_value)]\n #![feature(associated_consts, associated_type_defaults)]\n \n type Alias = Vec<Vec<Box<(u32, u32, u32, u32)>>>; // no warning here"}, {"sha": "2a3cefcbc1f420b2d57026ffe87bdf0fbee96be6", "filename": "tests/ui/dlist.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a6bc6031aa9bca562941a33f385c81e1eeda5af/tests%2Fui%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a6bc6031aa9bca562941a33f385c81e1eeda5af/tests%2Fui%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdlist.rs?ref=0a6bc6031aa9bca562941a33f385c81e1eeda5af", "patch": "@@ -4,7 +4,7 @@\n \n #![plugin(clippy)]\n #![deny(clippy)]\n-#![allow(dead_code, needless_take_by_value)]\n+#![allow(dead_code, needless_pass_by_value)]\n \n extern crate collections;\n use collections::linked_list::LinkedList;"}, {"sha": "97c6df8563e504fd48df21bd2a0ff1b3e0f0cf76", "filename": "tests/ui/drop_forget_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a6bc6031aa9bca562941a33f385c81e1eeda5af/tests%2Fui%2Fdrop_forget_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a6bc6031aa9bca562941a33f385c81e1eeda5af/tests%2Fui%2Fdrop_forget_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdrop_forget_ref.rs?ref=0a6bc6031aa9bca562941a33f385c81e1eeda5af", "patch": "@@ -2,7 +2,7 @@\n #![plugin(clippy)]\n \n #![deny(drop_ref, forget_ref)]\n-#![allow(toplevel_ref_arg, similar_names, needless_take_by_value)]\n+#![allow(toplevel_ref_arg, similar_names, needless_pass_by_value)]\n \n use std::mem::{drop, forget};\n "}, {"sha": "090221ba7a83f1db766827772589c6d30097bf2d", "filename": "tests/ui/entry.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a6bc6031aa9bca562941a33f385c81e1eeda5af/tests%2Fui%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a6bc6031aa9bca562941a33f385c81e1eeda5af/tests%2Fui%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fentry.rs?ref=0a6bc6031aa9bca562941a33f385c81e1eeda5af", "patch": "@@ -1,6 +1,6 @@\n #![feature(plugin)]\n #![plugin(clippy)]\n-#![allow(unused, needless_take_by_value)]\n+#![allow(unused, needless_pass_by_value)]\n \n #![deny(map_entry)]\n "}, {"sha": "d333b938a3250c418942c0f6a9af1551df561964", "filename": "tests/ui/eta.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a6bc6031aa9bca562941a33f385c81e1eeda5af/tests%2Fui%2Feta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a6bc6031aa9bca562941a33f385c81e1eeda5af/tests%2Fui%2Feta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feta.rs?ref=0a6bc6031aa9bca562941a33f385c81e1eeda5af", "patch": "@@ -1,6 +1,6 @@\n #![feature(plugin)]\n #![plugin(clippy)]\n-#![allow(unknown_lints, unused, no_effect, redundant_closure_call, many_single_char_names, needless_take_by_value)]\n+#![allow(unknown_lints, unused, no_effect, redundant_closure_call, many_single_char_names, needless_pass_by_value)]\n #![deny(redundant_closure)]\n \n fn main() {"}, {"sha": "f953c0ad3d267544c2bdd666e7a993406e4c9742", "filename": "tests/ui/lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a6bc6031aa9bca562941a33f385c81e1eeda5af/tests%2Fui%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a6bc6031aa9bca562941a33f385c81e1eeda5af/tests%2Fui%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flifetimes.rs?ref=0a6bc6031aa9bca562941a33f385c81e1eeda5af", "patch": "@@ -2,7 +2,7 @@\n #![plugin(clippy)]\n \n #![deny(needless_lifetimes, unused_lifetimes)]\n-#![allow(dead_code, needless_take_by_value)]\n+#![allow(dead_code, needless_pass_by_value)]\n \n fn distinct_lifetimes<'a, 'b>(_x: &'a u8, _y: &'b u8, _z: u8) { }\n "}, {"sha": "8cdc71ba4e6ba9b149e0fd932fab320474dcf47d", "filename": "tests/ui/needless_pass_by_value.rs", "status": "renamed", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0a6bc6031aa9bca562941a33f385c81e1eeda5af/tests%2Fui%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a6bc6031aa9bca562941a33f385c81e1eeda5af/tests%2Fui%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_pass_by_value.rs?ref=0a6bc6031aa9bca562941a33f385c81e1eeda5af", "patch": "@@ -1,7 +1,7 @@\n #![feature(plugin)]\n #![plugin(clippy)]\n \n-#![deny(needless_take_by_value)]\n+#![deny(needless_pass_by_value)]\n #![allow(dead_code)]\n \n // `v` will be warned\n@@ -18,6 +18,19 @@ fn foo<T: Default>(v: Vec<T>, w: Vec<T>, mut x: Vec<T>, y: Vec<T>) -> Vec<T> {\n \n fn consume<T>(_: T) {}\n \n+struct Wrapper(String);\n+\n+fn bar(x: String, y: Wrapper) {\n+    assert_eq!(x.len(), 42);\n+    assert_eq!(y.0.len(), 42);\n+}\n+\n+fn test_borrow_trait<T: std::borrow::Borrow<str>, U>(t: T, u: U) {\n+    // U implements `Borrow<U>`, but warned correctly\n+    println!(\"{}\", t.borrow());\n+    consume(&u);\n+}\n+\n // ok\n fn test_fn<F: Fn(i32) -> i32>(f: F) {\n     f(1);", "previous_filename": "tests/ui/needless_take_by_value.rs"}, {"sha": "2dec96d8f8b75c4947a57e3c09c4145348d6627d", "filename": "tests/ui/needless_pass_by_value.stderr", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/0a6bc6031aa9bca562941a33f385c81e1eeda5af/tests%2Fui%2Fneedless_pass_by_value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a6bc6031aa9bca562941a33f385c81e1eeda5af/tests%2Fui%2Fneedless_pass_by_value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_pass_by_value.stderr?ref=0a6bc6031aa9bca562941a33f385c81e1eeda5af", "patch": "@@ -0,0 +1,43 @@\n+error: this argument is passed by value, but not consumed in the function body\n+ --> $DIR/needless_pass_by_value.rs:9:23\n+  |\n+9 | fn foo<T: Default>(v: Vec<T>, w: Vec<T>, mut x: Vec<T>, y: Vec<T>) -> Vec<T> {\n+  |                       ^^^^^^\n+  |\n+note: lint level defined here\n+ --> $DIR/needless_pass_by_value.rs:4:9\n+  |\n+4 | #![deny(needless_pass_by_value)]\n+  |         ^^^^^^^^^^^^^^^^^^^^^^\n+help: consider changing the type to `&[T]`\n+  | fn foo<T: Default>(v: &[T], w: Vec<T>, mut x: Vec<T>, y: Vec<T>) -> Vec<T> {\n+\n+error: this argument is passed by value, but not consumed in the function body\n+  --> $DIR/needless_pass_by_value.rs:23:11\n+   |\n+23 | fn bar(x: String, y: Wrapper) {\n+   |           ^^^^^^\n+   |\n+help: consider changing the type to `&str`\n+   | fn bar(x: &str, y: Wrapper) {\n+\n+error: this argument is passed by value, but not consumed in the function body\n+  --> $DIR/needless_pass_by_value.rs:23:22\n+   |\n+23 | fn bar(x: String, y: Wrapper) {\n+   |                      ^^^^^^^\n+   |\n+help: consider taking a reference instead\n+   | fn bar(x: String, y: &Wrapper) {\n+\n+error: this argument is passed by value, but not consumed in the function body\n+  --> $DIR/needless_pass_by_value.rs:28:63\n+   |\n+28 | fn test_borrow_trait<T: std::borrow::Borrow<str>, U>(t: T, u: U) {\n+   |                                                               ^\n+   |\n+help: consider taking a reference instead\n+   | fn test_borrow_trait<T: std::borrow::Borrow<str>, U>(t: T, u: &U) {\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "d510989c34401244e9a5fd185002ccd4f9e610de", "filename": "tests/ui/needless_take_by_value.stderr", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d2f73e7818bb000d22fa3c02b6bef68e458d8d6d/tests%2Fui%2Fneedless_take_by_value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d2f73e7818bb000d22fa3c02b6bef68e458d8d6d/tests%2Fui%2Fneedless_take_by_value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_take_by_value.stderr?ref=d2f73e7818bb000d22fa3c02b6bef68e458d8d6d", "patch": "@@ -1,16 +0,0 @@\n-error: this function taking a value by value, but only using them by reference\n- --> $DIR/needless_take_by_value.rs:9:23\n-  |\n-9 | fn foo<T: Default>(v: Vec<T>, w: Vec<T>, mut x: Vec<T>, y: Vec<T>) -> Vec<T> {\n-  |                       ^^^^^^\n-  |\n-note: lint level defined here\n- --> $DIR/needless_take_by_value.rs:4:9\n-  |\n-4 | #![deny(needless_take_by_value)]\n-  |         ^^^^^^^^^^^^^^^^^^^^^^\n-help: consider taking a reference instead\n-  | fn foo<T: Default>(v: &Vec<T>, w: Vec<T>, mut x: Vec<T>, y: Vec<T>) -> Vec<T> {\n-\n-error: aborting due to previous error\n-"}, {"sha": "e6144f0027aeab6a0072d4349cfac6e43db1082d", "filename": "tests/ui/should_assert_eq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a6bc6031aa9bca562941a33f385c81e1eeda5af/tests%2Fui%2Fshould_assert_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a6bc6031aa9bca562941a33f385c81e1eeda5af/tests%2Fui%2Fshould_assert_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fshould_assert_eq.rs?ref=0a6bc6031aa9bca562941a33f385c81e1eeda5af", "patch": "@@ -1,7 +1,7 @@\n #![feature(plugin)]\n #![plugin(clippy)]\n \n-#![allow(needless_take_by_value)]\n+#![allow(needless_pass_by_value)]\n #![deny(should_assert_eq)]\n \n #[derive(PartialEq, Eq)]"}, {"sha": "b4462a87ab475c4814a598ca136f75b317d9490c", "filename": "tests/ui/unused_lt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a6bc6031aa9bca562941a33f385c81e1eeda5af/tests%2Fui%2Funused_lt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a6bc6031aa9bca562941a33f385c81e1eeda5af/tests%2Fui%2Funused_lt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funused_lt.rs?ref=0a6bc6031aa9bca562941a33f385c81e1eeda5af", "patch": "@@ -1,6 +1,6 @@\n #![feature(plugin)]\n #![plugin(clippy)]\n-#![allow(unused, dead_code, needless_lifetimes, needless_take_by_value)]\n+#![allow(unused, dead_code, needless_lifetimes, needless_pass_by_value)]\n #![deny(unused_lifetimes)]\n \n fn empty() {"}]}