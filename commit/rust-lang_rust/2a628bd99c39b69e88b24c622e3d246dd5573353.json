{"sha": "2a628bd99c39b69e88b24c622e3d246dd5573353", "node_id": "C_kwDOAAsO6NoAKDJhNjI4YmQ5OWMzOWI2OWU4OGIyNGM2MjJlM2QyNDZkZDU1NzMzNTM", "commit": {"author": {"name": "Ben Kimock", "email": "kimockb@gmail.com", "date": "2023-02-24T21:32:59Z"}, "committer": {"name": "Ben Kimock", "email": "kimockb@gmail.com", "date": "2023-03-18T18:29:13Z"}, "message": "Remove duplicate switch targets", "tree": {"sha": "fb44fcfc03e7e5c6d89d7a13b40f0239a679ebe4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb44fcfc03e7e5c6d89d7a13b40f0239a679ebe4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a628bd99c39b69e88b24c622e3d246dd5573353", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a628bd99c39b69e88b24c622e3d246dd5573353", "html_url": "https://github.com/rust-lang/rust/commit/2a628bd99c39b69e88b24c622e3d246dd5573353", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a628bd99c39b69e88b24c622e3d246dd5573353/comments", "author": {"login": "saethlin", "id": 12105168, "node_id": "MDQ6VXNlcjEyMTA1MTY4", "avatar_url": "https://avatars.githubusercontent.com/u/12105168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saethlin", "html_url": "https://github.com/saethlin", "followers_url": "https://api.github.com/users/saethlin/followers", "following_url": "https://api.github.com/users/saethlin/following{/other_user}", "gists_url": "https://api.github.com/users/saethlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/saethlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saethlin/subscriptions", "organizations_url": "https://api.github.com/users/saethlin/orgs", "repos_url": "https://api.github.com/users/saethlin/repos", "events_url": "https://api.github.com/users/saethlin/events{/privacy}", "received_events_url": "https://api.github.com/users/saethlin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "saethlin", "id": 12105168, "node_id": "MDQ6VXNlcjEyMTA1MTY4", "avatar_url": "https://avatars.githubusercontent.com/u/12105168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saethlin", "html_url": "https://github.com/saethlin", "followers_url": "https://api.github.com/users/saethlin/followers", "following_url": "https://api.github.com/users/saethlin/following{/other_user}", "gists_url": "https://api.github.com/users/saethlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/saethlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saethlin/subscriptions", "organizations_url": "https://api.github.com/users/saethlin/orgs", "repos_url": "https://api.github.com/users/saethlin/repos", "events_url": "https://api.github.com/users/saethlin/events{/privacy}", "received_events_url": "https://api.github.com/users/saethlin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "41eda69516dd3ee217ae07c0efa369d31f630405", "url": "https://api.github.com/repos/rust-lang/rust/commits/41eda69516dd3ee217ae07c0efa369d31f630405", "html_url": "https://github.com/rust-lang/rust/commit/41eda69516dd3ee217ae07c0efa369d31f630405"}], "stats": {"total": 64, "additions": 63, "deletions": 1}, "files": [{"sha": "c926390aa2b8793683ff485ed77cad54e215537b", "filename": "compiler/rustc_mir_transform/src/instcombine.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2a628bd99c39b69e88b24c622e3d246dd5573353/compiler%2Frustc_mir_transform%2Fsrc%2Finstcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a628bd99c39b69e88b24c622e3d246dd5573353/compiler%2Frustc_mir_transform%2Fsrc%2Finstcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finstcombine.rs?ref=2a628bd99c39b69e88b24c622e3d246dd5573353", "patch": "@@ -4,7 +4,7 @@ use crate::MirPass;\n use rustc_hir::Mutability;\n use rustc_middle::mir::{\n     BinOp, Body, Constant, ConstantKind, LocalDecls, Operand, Place, ProjectionElem, Rvalue,\n-    SourceInfo, Statement, StatementKind, Terminator, TerminatorKind, UnOp,\n+    SourceInfo, Statement, StatementKind, SwitchTargets, Terminator, TerminatorKind, UnOp,\n };\n use rustc_middle::ty::layout::ValidityRequirement;\n use rustc_middle::ty::{self, ParamEnv, SubstsRef, Ty, TyCtxt};\n@@ -44,6 +44,7 @@ impl<'tcx> MirPass<'tcx> for InstCombine {\n                 &mut block.terminator.as_mut().unwrap(),\n                 &mut block.statements,\n             );\n+            ctx.combine_duplicate_switch_targets(&mut block.terminator.as_mut().unwrap());\n         }\n     }\n }\n@@ -217,6 +218,19 @@ impl<'tcx> InstCombineContext<'tcx, '_> {\n         terminator.kind = TerminatorKind::Goto { target: destination_block };\n     }\n \n+    fn combine_duplicate_switch_targets(&self, terminator: &mut Terminator<'tcx>) {\n+        let TerminatorKind::SwitchInt { targets, .. } = &mut terminator.kind\n+        else { return };\n+\n+        let otherwise = targets.otherwise();\n+        if targets.iter().any(|t| t.1 == otherwise) {\n+            *targets = SwitchTargets::new(\n+                targets.iter().filter(|t| t.1 != otherwise),\n+                targets.otherwise(),\n+            );\n+        }\n+    }\n+\n     fn combine_intrinsic_assert(\n         &self,\n         terminator: &mut Terminator<'tcx>,"}, {"sha": "e04079453d214380e4276bf2cb77d5ffeda265b5", "filename": "tests/mir-opt/instcombine_duplicate_switch_targets.assert_zero.InstCombine.diff", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2a628bd99c39b69e88b24c622e3d246dd5573353/tests%2Fmir-opt%2Finstcombine_duplicate_switch_targets.assert_zero.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a628bd99c39b69e88b24c622e3d246dd5573353/tests%2Fmir-opt%2Finstcombine_duplicate_switch_targets.assert_zero.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finstcombine_duplicate_switch_targets.assert_zero.InstCombine.diff?ref=2a628bd99c39b69e88b24c622e3d246dd5573353", "patch": "@@ -0,0 +1,21 @@\n+- // MIR for `assert_zero` before InstCombine\n++ // MIR for `assert_zero` after InstCombine\n+  \n+  fn assert_zero(_1: u8) -> u8 {\n+      let mut _0: u8;                      // return place in scope 0 at $DIR/instcombine_duplicate_switch_targets.rs:+0:37: +0:39\n+  \n+      bb0: {\n+-         switchInt(_1) -> [0: bb2, 1: bb1, otherwise: bb1]; // scope 0 at $DIR/instcombine_duplicate_switch_targets.rs:+3:13: +7:14\n++         switchInt(_1) -> [0: bb2, otherwise: bb1]; // scope 0 at $DIR/instcombine_duplicate_switch_targets.rs:+3:13: +7:14\n+      }\n+  \n+      bb1: {\n+          unreachable;                     // scope 0 at $DIR/instcombine_duplicate_switch_targets.rs:+10:13: +10:26\n+      }\n+  \n+      bb2: {\n+          _0 = _1;                         // scope 0 at $DIR/instcombine_duplicate_switch_targets.rs:+13:13: +13:20\n+          return;                          // scope 0 at $DIR/instcombine_duplicate_switch_targets.rs:+14:13: +14:21\n+      }\n+  }\n+  "}, {"sha": "ef3b487afa32f7d523cadedbbf50e1bfa0e7fb3e", "filename": "tests/mir-opt/instcombine_duplicate_switch_targets.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/2a628bd99c39b69e88b24c622e3d246dd5573353/tests%2Fmir-opt%2Finstcombine_duplicate_switch_targets.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a628bd99c39b69e88b24c622e3d246dd5573353/tests%2Fmir-opt%2Finstcombine_duplicate_switch_targets.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finstcombine_duplicate_switch_targets.rs?ref=2a628bd99c39b69e88b24c622e3d246dd5573353", "patch": "@@ -0,0 +1,27 @@\n+#![feature(custom_mir, core_intrinsics)]\n+#![crate_type = \"lib\"]\n+\n+use std::intrinsics::mir::*;\n+\n+// unit-test: InstCombine\n+\n+// EMIT_MIR instcombine_duplicate_switch_targets.assert_zero.InstCombine.diff\n+#[custom_mir(dialect = \"runtime\", phase = \"post-cleanup\")]\n+pub unsafe fn assert_zero(x: u8) -> u8 {\n+    mir!(\n+        {\n+            match x {\n+                0 => retblock,\n+                1 => unreachable,\n+                _ => unreachable,\n+            }\n+        }\n+        unreachable = {\n+            Unreachable()\n+        }\n+        retblock = {\n+            RET = x;\n+            Return()\n+        }\n+    )\n+}"}]}