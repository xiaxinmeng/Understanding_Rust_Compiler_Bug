{"sha": "b8c59211edfd9223797bfc77b6df480f242496cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4YzU5MjExZWRmZDkyMjM3OTdiZmM3N2I2ZGY0ODBmMjQyNDk2Y2I=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-05-28T00:30:57Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-05-28T02:36:28Z"}, "message": "mk: Fix MSVC bootstrapping itself\n\nNow that MSVC support has landed in the most recent nightlies we can now have\nMSVC bootstrap itself without going through a GNU compiler first. Unfortunately,\nhowever, the bootstrap currently fails due to the compiler not being able to\nfind the llvm-ar.exe tool during the stage0 libcore compile. The compiler cannot\nfind this tool because it's looking inside a directory that does not exist:\n\n    $SYSROOT/rustlib/x86_64-pc-windows-gnu/bin\n\nThe `gnu` on this triple is because the bootstrap compiler's host architecture\nis GNU. The build system, however, only arranges for the llvm-ar.exe tool to be\navailable in this location:\n\n    $SYSROOT/rustlib/x86_64-pc-windows-msvc/bin\n\nTo resolve this discrepancy, the build system has been modified to understand\ntriples that are bootstrapped from another triple, and in this case copy the\nnative tools to the right location.", "tree": {"sha": "fbb1643b16c6c4e7a1279f4e446ad0b64ba62904", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fbb1643b16c6c4e7a1279f4e446ad0b64ba62904"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b8c59211edfd9223797bfc77b6df480f242496cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b8c59211edfd9223797bfc77b6df480f242496cb", "html_url": "https://github.com/rust-lang/rust/commit/b8c59211edfd9223797bfc77b6df480f242496cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b8c59211edfd9223797bfc77b6df480f242496cb/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "efcc1d1bcb48122ae1c522b0f4a996188791f38a", "url": "https://api.github.com/repos/rust-lang/rust/commits/efcc1d1bcb48122ae1c522b0f4a996188791f38a", "html_url": "https://github.com/rust-lang/rust/commit/efcc1d1bcb48122ae1c522b0f4a996188791f38a"}], "stats": {"total": 44, "additions": 44, "deletions": 0}, "files": [{"sha": "1e1906a298084dce9f7efc0690efb37ace352903", "filename": "mk/cfg/x86_64-pc-windows-msvc.mk", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b8c59211edfd9223797bfc77b6df480f242496cb/mk%2Fcfg%2Fx86_64-pc-windows-msvc.mk", "raw_url": "https://github.com/rust-lang/rust/raw/b8c59211edfd9223797bfc77b6df480f242496cb/mk%2Fcfg%2Fx86_64-pc-windows-msvc.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fx86_64-pc-windows-msvc.mk?ref=b8c59211edfd9223797bfc77b6df480f242496cb", "patch": "@@ -80,3 +80,8 @@ CUSTOM_DEPS_rustc_llvm_T_x86_64-pc-windows-msvc += \\\n x86_64-pc-windows-msvc/rt/rustc_llvm.def: $(S)src/etc/mklldef.py \\\n \t\t\t$(S)src/librustc_llvm/lib.rs\n \t$(CFG_PYTHON) $^ $@ rustc_llvm-$(CFG_FILENAME_EXTRA)\n+\n+# All windows nightiles are currently a GNU triple, so this MSVC triple is not\n+# bootstrapping from itself. This is relevant during stage0, and other parts of\n+# the build system take this into account.\n+BOOTSTRAP_FROM_x86_64-pc-windows-msvc := x86_64-pc-windows-gnu"}, {"sha": "3c274dc4fd5f2863a4b257ef117ef89d05ffa8b1", "filename": "mk/target.mk", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/b8c59211edfd9223797bfc77b6df480f242496cb/mk%2Ftarget.mk", "raw_url": "https://github.com/rust-lang/rust/raw/b8c59211edfd9223797bfc77b6df480f242496cb/mk%2Ftarget.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftarget.mk?ref=b8c59211edfd9223797bfc77b6df480f242496cb", "patch": "@@ -181,3 +181,42 @@ $(foreach host,$(CFG_HOST), \\\n   $(foreach stage,$(STAGES), \\\n    $(foreach tool,$(TOOLS), \\\n     $(eval $(call TARGET_TOOL,$(stage),$(target),$(host),$(tool)))))))\n+\n+# We have some triples which are bootstrapped from other triples, and this means\n+# that we need to fixup some of the native tools that a triple depends on.\n+#\n+# For example, MSVC requires the llvm-ar.exe executable to manage archives, but\n+# it bootstraps from the GNU Windows triple. This means that the compiler will\n+# add this directory to PATH when executing new processes:\n+#\n+# \t$SYSROOT/rustlib/x86_64-pc-windows-gnu/bin\n+#\n+# Unfortunately, however, the GNU triple is not known about in stage0, so the\n+# tools are actually located in:\n+#\n+# \t$SYSROOT/rustlib/x86_64-pc-windows-msvc/bin\n+#\n+# To remedy this problem, the rules below copy all native tool dependencies into\n+# the bootstrap triple's location in stage 0 so the bootstrap compiler can find\n+# the right sets of tools. Later stages (1+) will have the right host triple for\n+# the compiler, so there's no need to worry there.\n+#\n+# $(1) - stage\n+# $(2) - triple that's being used as host/target\n+# $(3) - triple snapshot is built for\n+# $(4) - crate\n+# $(5) - tool\n+define MOVE_TOOLS_TO_SNAPSHOT_HOST_DIR\n+ifneq (,$(3))\n+$$(TLIB$(1)_T_$(2)_H_$(2))/stamp.$(4): $$(HLIB$(1)_H_$(2))/rustlib/$(3)/bin/$(5)\n+\n+$$(HLIB$(1)_H_$(2))/rustlib/$(3)/bin/$(5): $$(TBIN$(1)_T_$(2)_H_$(2))/$(5)\n+\tmkdir -p $$(@D)\n+\tcp $$< $$@\n+endif\n+endef\n+\n+$(foreach target,$(CFG_TARGET), \\\n+ $(foreach crate,$(CRATES), \\\n+  $(foreach tool,$(NATIVE_TOOL_DEPS_$(crate)_T_$(target)), \\\n+   $(eval $(call MOVE_TOOLS_TO_SNAPSHOT_HOST_DIR,0,$(target),$(BOOTSTRAP_FROM_$(target)),$(crate),$(tool))))))"}]}