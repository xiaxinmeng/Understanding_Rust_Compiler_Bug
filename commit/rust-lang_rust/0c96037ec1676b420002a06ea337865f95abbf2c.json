{"sha": "0c96037ec1676b420002a06ea337865f95abbf2c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjOTYwMzdlYzE2NzZiNDIwMDAyYTA2ZWEzMzc4NjVmOTVhYmJmMmM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-01-15T05:12:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-01-15T05:12:30Z"}, "message": "auto merge of #20980 : richo/rust/final-power, r=alexcrichton\n\nOriginally, this was going to be discussed and revisted, however I've been working on this for months, and a rebase on top of master was about 1 flight's worth of work so I just went ahead and did it.\r\n\r\nThis gets you as far as being able to target powerpc with, eg:\r\n\r\n    LD_LIBRARY_PATH=./x86_64-unknown-linux-gnu/stage2/lib/ x86_64-unknown-linux-gnu/stage2/bin/rustc -C linker=powerpc-linux-gnu-gcc --target powerpc-unknown-linux-gnu hello.rs\r\n\r\nWould really love to get this out before 1.0. r? @alexcrichton", "tree": {"sha": "cec4f5e86bd892800d343105da4332ad94b3f61a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cec4f5e86bd892800d343105da4332ad94b3f61a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c96037ec1676b420002a06ea337865f95abbf2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c96037ec1676b420002a06ea337865f95abbf2c", "html_url": "https://github.com/rust-lang/rust/commit/0c96037ec1676b420002a06ea337865f95abbf2c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c96037ec1676b420002a06ea337865f95abbf2c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "451e134c180e88b06e3b747ed750e4901ca93721", "url": "https://api.github.com/repos/rust-lang/rust/commits/451e134c180e88b06e3b747ed750e4901ca93721", "html_url": "https://github.com/rust-lang/rust/commit/451e134c180e88b06e3b747ed750e4901ca93721"}, {"sha": "78278d0c76f3c868a4a4bcc47336c384968c6b3a", "url": "https://api.github.com/repos/rust-lang/rust/commits/78278d0c76f3c868a4a4bcc47336c384968c6b3a", "html_url": "https://github.com/rust-lang/rust/commit/78278d0c76f3c868a4a4bcc47336c384968c6b3a"}], "stats": {"total": 406, "additions": 364, "deletions": 42}, "files": [{"sha": "86ed88c8d06315e87247b8f4c8106d6b7d32df90", "filename": "configure", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0c96037ec1676b420002a06ea337865f95abbf2c/configure", "raw_url": "https://github.com/rust-lang/rust/raw/0c96037ec1676b420002a06ea337865f95abbf2c/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=0c96037ec1676b420002a06ea337865f95abbf2c", "patch": "@@ -448,6 +448,10 @@ case $CFG_CPUTYPE in\n         CFG_CPUTYPE=aarch64\n         ;;\n \n+    powerpc)\n+        CFG_CPUTYPE=powerpc\n+        ;;\n+\n     x86_64 | x86-64 | x64 | amd64)\n         CFG_CPUTYPE=x86_64\n         ;;\n@@ -1004,7 +1008,7 @@ do\n     make_dir $t/rt/jemalloc\n     for i in                                          \\\n       isaac sync test \\\n-      arch/i386 arch/x86_64 arch/arm arch/aarch64 arch/mips\n+      arch/i386 arch/x86_64 arch/arm arch/aarch64 arch/mips arch/powerpc\n     do\n       make_dir $t/rt/stage$s/$i\n     done\n@@ -1169,7 +1173,7 @@ do\n \n         msg \"configuring LLVM for $gnu_t\"\n \n-        LLVM_TARGETS=\"--enable-targets=x86,x86_64,arm,aarch64,mips\"\n+        LLVM_TARGETS=\"--enable-targets=x86,x86_64,arm,aarch64,mips,powerpc\"\n         LLVM_BUILD=\"--build=$gnu_t\"\n         LLVM_HOST=\"--host=$gnu_t\"\n         LLVM_TARGET=\"--target=$gnu_t\""}, {"sha": "fd37bd663f7dddb96e0222062d0c0e713e8ea0e6", "filename": "mk/cfg/powerpc-unknown-linux-gnu.mk", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/0c96037ec1676b420002a06ea337865f95abbf2c/mk%2Fcfg%2Fpowerpc-unknown-linux-gnu.mk", "raw_url": "https://github.com/rust-lang/rust/raw/0c96037ec1676b420002a06ea337865f95abbf2c/mk%2Fcfg%2Fpowerpc-unknown-linux-gnu.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fpowerpc-unknown-linux-gnu.mk?ref=0c96037ec1676b420002a06ea337865f95abbf2c", "patch": "@@ -0,0 +1,28 @@\n+# powerpc-unknown-linux-gnu configuration\n+CROSS_PREFIX_powerpc-unknown-linux-gnu=powerpc-linux-gnu-\n+CC_powerpc-unknown-linux-gnu=$(CC)\n+CXX_powerpc-unknown-linux-gnu=$(CXX)\n+CPP_powerpc-unknown-linux-gnu=$(CPP)\n+AR_powerpc-unknown-linux-gnu=$(AR)\n+CFG_LIB_NAME_powerpc-unknown-linux-gnu=lib$(1).so\n+CFG_STATIC_LIB_NAME_powerpc-unknown-linux-gnu=lib$(1).a\n+CFG_LIB_GLOB_powerpc-unknown-linux-gnu=lib$(1)-*.so\n+CFG_LIB_DSYM_GLOB_powerpc-unknown-linux-gnu=lib$(1)-*.dylib.dSYM\n+CFG_CFLAGS_powerpc-unknown-linux-gnu := -m32 $(CFLAGS)\n+CFG_GCCISH_CFLAGS_powerpc-unknown-linux-gnu := -Wall -Werror -g -fPIC -m32 $(CFLAGS)\n+CFG_GCCISH_CXXFLAGS_powerpc-unknown-linux-gnu := -fno-rtti $(CXXFLAGS)\n+CFG_GCCISH_LINK_FLAGS_powerpc-unknown-linux-gnu := -shared -fPIC -ldl -pthread  -lrt -g -m32\n+CFG_GCCISH_DEF_FLAG_powerpc-unknown-linux-gnu := -Wl,--export-dynamic,--dynamic-list=\n+CFG_GCCISH_PRE_LIB_FLAGS_powerpc-unknown-linux-gnu := -Wl,-whole-archive\n+CFG_GCCISH_POST_LIB_FLAGS_powerpc-unknown-linux-gnu := -Wl,-no-whole-archive\n+CFG_DEF_SUFFIX_powerpc-unknown-linux-gnu := .linux.def\n+CFG_LLC_FLAGS_powerpc-unknown-linux-gnu :=\n+CFG_INSTALL_NAME_powerpc-unknown-linux-gnu =\n+CFG_EXE_SUFFIX_powerpc-unknown-linux-gnu =\n+CFG_WINDOWSY_powerpc-unknown-linux-gnu :=\n+CFG_UNIXY_powerpc-unknown-linux-gnu := 1\n+CFG_PATH_MUNGE_powerpc-unknown-linux-gnu := true\n+CFG_LDPATH_powerpc-unknown-linux-gnu :=\n+CFG_RUN_powerpc-unknown-linux-gnu=$(2)\n+CFG_RUN_TARG_powerpc-unknown-linux-gnu=$(call CFG_RUN_powerpc-unknown-linux-gnu,,$(2))\n+CFG_GNU_TRIPLE_powerpc-unknown-linux-gnu := powerpc-unknown-linux-gnu"}, {"sha": "334647d04023f04082f6e7cdba65979da8ceb936", "filename": "mk/main.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c96037ec1676b420002a06ea337865f95abbf2c/mk%2Fmain.mk", "raw_url": "https://github.com/rust-lang/rust/raw/0c96037ec1676b420002a06ea337865f95abbf2c/mk%2Fmain.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fmain.mk?ref=0c96037ec1676b420002a06ea337865f95abbf2c", "patch": "@@ -263,7 +263,7 @@ endif\n ######################################################################\n \n # FIXME: x86-ism\n-LLVM_COMPONENTS=x86 arm aarch64 mips ipo bitreader bitwriter linker asmparser mcjit \\\n+LLVM_COMPONENTS=x86 arm aarch64 mips powerpc ipo bitreader bitwriter linker asmparser mcjit \\\n                 interpreter instrumentation\n \n # Only build these LLVM tools"}, {"sha": "78c1057c2fe524ca28a19e6d9164c0f1d08ab771", "filename": "mk/platform.mk", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c96037ec1676b420002a06ea337865f95abbf2c/mk%2Fplatform.mk", "raw_url": "https://github.com/rust-lang/rust/raw/0c96037ec1676b420002a06ea337865f95abbf2c/mk%2Fplatform.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fplatform.mk?ref=0c96037ec1676b420002a06ea337865f95abbf2c", "patch": "@@ -177,7 +177,7 @@ define CFG_MAKE_TOOLCHAIN\n         $$(CFG_GCCISH_DEF_FLAG_$(1))$$(3) $$(2) \\\n         $$(call CFG_INSTALL_NAME_$(1),$$(4))\n \n-  ifeq ($$(findstring $(HOST_$(1)),arm aarch64 mips mipsel),)\n+  ifeq ($$(findstring $(HOST_$(1)),arm aarch64 mips mipsel powerpc),)\n \n   # We're using llvm-mc as our assembler because it supports\n   # .cfi pseudo-ops on mac\n@@ -189,7 +189,7 @@ define CFG_MAKE_TOOLCHAIN\n                     -o=$$(1)\n   else\n \n-  # For the ARM, AARCH64 and MIPS crosses, use the toolchain assembler\n+  # For the ARM, AARCH64, MIPS and POWER crosses, use the toolchain assembler\n   # FIXME: We should be able to use the LLVM assembler\n   CFG_ASSEMBLE_$(1)=$$(CC_$(1)) $$(CFG_GCCISH_CFLAGS_$(1)) \\\n \t\t    $$(CFG_DEPEND_FLAGS) $$(2) -c -o $$(1)"}, {"sha": "1c9f0799b3b601b81f144bba5583b03483f086b1", "filename": "src/doc/reference.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c96037ec1676b420002a06ea337865f95abbf2c/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/0c96037ec1676b420002a06ea337865f95abbf2c/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=0c96037ec1676b420002a06ea337865f95abbf2c", "patch": "@@ -2170,7 +2170,7 @@ arbitrarily complex configurations through nesting.\n The following configurations must be defined by the implementation:\n \n * `target_arch = \"...\"`. Target CPU architecture, such as `\"x86\"`, `\"x86_64\"`\n-  `\"mips\"`, `\"arm\"`, or `\"aarch64\"`.\n+  `\"mips\"`, `\"powerpc\"`, `\"arm\"`, or `\"aarch64\"`.\n * `target_endian = \"...\"`. Endianness of the target CPU, either `\"little\"` or\n   `\"big\"`.\n * `target_family = \"...\"`. Operating system family of the target, e. g."}, {"sha": "b7bc1b4764614ac50e6f9fd32384e812ca1bbc2e", "filename": "src/liballoc/heap.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0c96037ec1676b420002a06ea337865f95abbf2c/src%2Fliballoc%2Fheap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c96037ec1676b420002a06ea337865f95abbf2c/src%2Fliballoc%2Fheap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fheap.rs?ref=0c96037ec1676b420002a06ea337865f95abbf2c", "patch": "@@ -119,7 +119,8 @@ unsafe fn exchange_free(ptr: *mut u8, old_size: uint, align: uint) {\n           not(feature = \"external_crate\"),\n           any(target_arch = \"arm\",\n               target_arch = \"mips\",\n-              target_arch = \"mipsel\")))]\n+              target_arch = \"mipsel\",\n+              target_arch = \"powerpc\")))]\n const MIN_ALIGN: uint = 8;\n #[cfg(all(not(feature = \"external_funcs\"),\n           not(feature = \"external_crate\"),"}, {"sha": "3dc209e6fcb247fe41760e4da303dc7bb8899aad", "filename": "src/libcoretest/mem.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0c96037ec1676b420002a06ea337865f95abbf2c/src%2Flibcoretest%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c96037ec1676b420002a06ea337865f95abbf2c/src%2Flibcoretest%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fmem.rs?ref=0c96037ec1676b420002a06ea337865f95abbf2c", "patch": "@@ -19,18 +19,14 @@ fn size_of_basic() {\n }\n \n #[test]\n-#[cfg(any(target_arch = \"x86\",\n-          target_arch = \"arm\",\n-          target_arch = \"mips\",\n-          target_arch = \"mipsel\"))]\n+#[cfg(target_pointer_width = \"32\")]\n fn size_of_32() {\n     assert_eq!(size_of::<uint>(), 4u);\n     assert_eq!(size_of::<*const uint>(), 4u);\n }\n \n #[test]\n-#[cfg(any(target_arch = \"x86_64\",\n-          target_arch = \"aarch64\"))]\n+#[cfg(target_pointer_width = \"64\")]\n fn size_of_64() {\n     assert_eq!(size_of::<uint>(), 8u);\n     assert_eq!(size_of::<*const uint>(), 8u);\n@@ -52,18 +48,14 @@ fn align_of_basic() {\n }\n \n #[test]\n-#[cfg(any(target_arch = \"x86\",\n-          target_arch = \"arm\",\n-          target_arch = \"mips\",\n-          target_arch = \"mipsel\"))]\n+#[cfg(target_pointer_width = \"32\")]\n fn align_of_32() {\n     assert_eq!(align_of::<uint>(), 4u);\n     assert_eq!(align_of::<*const uint>(), 4u);\n }\n \n #[test]\n-#[cfg(any(target_arch = \"x86_64\",\n-          target_arch = \"aarch64\"))]\n+#[cfg(target_pointer_width = \"64\")]\n fn align_of_64() {\n     assert_eq!(align_of::<uint>(), 8u);\n     assert_eq!(align_of::<*const uint>(), 8u);"}, {"sha": "deab0cabfbe5195bfce29fbb75be076cdb0b4c55", "filename": "src/liblibc/lib.rs", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0c96037ec1676b420002a06ea337865f95abbf2c/src%2Fliblibc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c96037ec1676b420002a06ea337865f95abbf2c/src%2Fliblibc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc%2Flib.rs?ref=0c96037ec1676b420002a06ea337865f95abbf2c", "patch": "@@ -497,7 +497,8 @@ pub mod types {\n         #[cfg(any(target_arch = \"x86\",\n                   target_arch = \"arm\",\n                   target_arch = \"mips\",\n-                  target_arch = \"mipsel\"))]\n+                  target_arch = \"mipsel\",\n+                  target_arch = \"powerpc\"))]\n         pub mod arch {\n             pub mod c95 {\n                 pub type c_char = i8;\n@@ -528,7 +529,8 @@ pub mod types {\n             }\n             #[cfg(any(target_arch = \"x86\",\n                       target_arch = \"mips\",\n-                      target_arch = \"mipsel\"))]\n+                      target_arch = \"mipsel\",\n+                      target_arch = \"powerpc\"))]\n             pub mod posix88 {\n                 pub type off_t = i32;\n                 pub type dev_t = u64;\n@@ -642,7 +644,9 @@ pub mod types {\n                     pub __size: [u32; 9]\n                 }\n             }\n-            #[cfg(any(target_arch = \"mips\", target_arch = \"mipsel\"))]\n+            #[cfg(any(target_arch = \"mips\",\n+                      target_arch = \"mipsel\",\n+                      target_arch = \"powerpc\"))]\n             pub mod posix01 {\n                 use types::os::arch::c95::{c_long, c_ulong, time_t};\n                 use types::os::arch::posix88::{gid_t, ino_t};\n@@ -2697,7 +2701,9 @@ pub mod consts {\n             pub const EHWPOISON: c_int = 133;\n         }\n \n-        #[cfg(any(target_arch = \"mips\", target_arch = \"mipsel\"))]\n+        #[cfg(any(target_arch = \"mips\",\n+                  target_arch = \"mipsel\",\n+                  target_arch = \"powerpc\"))]\n         pub mod posix88 {\n             use types::os::arch::c95::c_int;\n             use types::common::c95::c_void;\n@@ -2982,7 +2988,8 @@ pub mod consts {\n             #[cfg(all(target_os = \"linux\",\n                       any(target_arch = \"mips\",\n                           target_arch = \"mipsel\",\n-                          target_arch = \"aarch64\")))]\n+                          target_arch = \"aarch64\",\n+                          target_arch = \"powerpc\")))]\n             pub const PTHREAD_STACK_MIN: size_t = 131072;\n \n             pub const CLOCK_REALTIME: c_int = 0;\n@@ -3040,7 +3047,9 @@ pub mod consts {\n             pub const SHUT_WR: c_int = 1;\n             pub const SHUT_RDWR: c_int = 2;\n         }\n-        #[cfg(any(target_arch = \"mips\", target_arch = \"mipsel\"))]\n+        #[cfg(any(target_arch = \"mips\",\n+                  target_arch = \"mipsel\",\n+                  target_arch = \"powerpc\"))]\n         pub mod bsd44 {\n             use types::os::arch::c95::c_int;\n \n@@ -3115,7 +3124,9 @@ pub mod consts {\n             pub const MAP_NONBLOCK : c_int = 0x010000;\n             pub const MAP_STACK : c_int = 0x020000;\n         }\n-        #[cfg(any(target_arch = \"mips\", target_arch = \"mipsel\"))]\n+        #[cfg(any(target_arch = \"mips\",\n+                  target_arch = \"mipsel\",\n+                  target_arch = \"powerpc\"))]\n         pub mod extra {\n             use types::os::arch::c95::c_int;\n "}, {"sha": "f8eabb4375fb3b83bfa2015f48f96a9b2419341b", "filename": "src/librustc_back/target/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c96037ec1676b420002a06ea337865f95abbf2c/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c96037ec1676b420002a06ea337865f95abbf2c/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmod.rs?ref=0c96037ec1676b420002a06ea337865f95abbf2c", "patch": "@@ -72,6 +72,7 @@ mod i686_unknown_dragonfly;\n mod i686_unknown_linux_gnu;\n mod mips_unknown_linux_gnu;\n mod mipsel_unknown_linux_gnu;\n+mod powerpc_unknown_linux_gnu;\n mod x86_64_apple_darwin;\n mod x86_64_apple_ios;\n mod x86_64_pc_windows_gnu;\n@@ -95,7 +96,7 @@ pub struct Target {\n     /// OS name to use for conditional compilation.\n     pub target_os: String,\n     /// Architecture to use for ABI considerations. Valid options: \"x86\", \"x86_64\", \"arm\",\n-    /// \"aarch64\", and \"mips\". \"mips\" includes \"mipsel\".\n+    /// \"aarch64\", \"mips\", and \"powerpc\". \"mips\" includes \"mipsel\".\n     pub arch: String,\n     /// Optional settings with defaults.\n     pub options: TargetOptions,\n@@ -339,6 +340,7 @@ impl Target {\n             i686_unknown_linux_gnu,\n             mips_unknown_linux_gnu,\n             mipsel_unknown_linux_gnu,\n+            powerpc_unknown_linux_gnu,\n             arm_linux_androideabi,\n             arm_unknown_linux_gnueabi,\n             arm_unknown_linux_gnueabihf,"}, {"sha": "5e0b7bcf3ef8bc04693ad23ba5a252dbfb95d036", "filename": "src/librustc_back/target/powerpc_unknown_linux_gnu.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0c96037ec1676b420002a06ea337865f95abbf2c/src%2Flibrustc_back%2Ftarget%2Fpowerpc_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c96037ec1676b420002a06ea337865f95abbf2c/src%2Flibrustc_back%2Ftarget%2Fpowerpc_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fpowerpc_unknown_linux_gnu.rs?ref=0c96037ec1676b420002a06ea337865f95abbf2c", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use target::Target;\n+\n+pub fn target() -> Target {\n+    let mut base = super::linux_base::opts();\n+    base.pre_link_args.push(\"-m32\".to_string());\n+\n+    Target {\n+        data_layout: \"E-S8-p:32:32-f64:32:64-i64:32:64-f80:32:32-n8:16:32\".to_string(),\n+        llvm_target: \"powerpc-unknown-linux-gnu\".to_string(),\n+        target_endian: \"big\".to_string(),\n+        target_pointer_width: \"32\".to_string(),\n+        arch: \"powerpc\".to_string(),\n+        target_os: \"linux\".to_string(),\n+        options: base,\n+    }\n+}"}, {"sha": "3edb1ec48a023f00117ff00615ae6efc23a19bea", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0c96037ec1676b420002a06ea337865f95abbf2c/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c96037ec1676b420002a06ea337865f95abbf2c/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=0c96037ec1676b420002a06ea337865f95abbf2c", "patch": "@@ -1974,6 +1974,11 @@ extern {\n     pub fn LLVMInitializeMipsTargetMC();\n     pub fn LLVMInitializeMipsAsmPrinter();\n     pub fn LLVMInitializeMipsAsmParser();\n+    pub fn LLVMInitializePowerPCTargetInfo();\n+    pub fn LLVMInitializePowerPCTarget();\n+    pub fn LLVMInitializePowerPCTargetMC();\n+    pub fn LLVMInitializePowerPCAsmPrinter();\n+    pub fn LLVMInitializePowerPCAsmParser();\n \n     pub fn LLVMRustAddPass(PM: PassManagerRef, Pass: *const c_char) -> bool;\n     pub fn LLVMRustCreateTargetMachine(Triple: *const c_char,\n@@ -2249,6 +2254,12 @@ pub unsafe fn static_link_hack_this_sucks() {\n     LLVMInitializeMipsAsmPrinter();\n     LLVMInitializeMipsAsmParser();\n \n+    LLVMInitializePowerPCTargetInfo();\n+    LLVMInitializePowerPCTarget();\n+    LLVMInitializePowerPCTargetMC();\n+    LLVMInitializePowerPCAsmPrinter();\n+    LLVMInitializePowerPCAsmParser();\n+\n     LLVMRustSetLLVMOptions(0 as c_int,\n                                        0 as *const _);\n "}, {"sha": "aa51b0c5ee24805ed20c327d30ad40d15a643041", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0c96037ec1676b420002a06ea337865f95abbf2c/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c96037ec1676b420002a06ea337865f95abbf2c/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=0c96037ec1676b420002a06ea337865f95abbf2c", "patch": "@@ -1039,6 +1039,12 @@ unsafe fn configure_llvm(sess: &Session) {\n         llvm::LLVMInitializeMipsAsmPrinter();\n         llvm::LLVMInitializeMipsAsmParser();\n \n+        llvm::LLVMInitializePowerPCTargetInfo();\n+        llvm::LLVMInitializePowerPCTarget();\n+        llvm::LLVMInitializePowerPCTargetMC();\n+        llvm::LLVMInitializePowerPCAsmPrinter();\n+        llvm::LLVMInitializePowerPCAsmParser();\n+\n         llvm::LLVMRustSetLLVMOptions(llvm_args.len() as c_int,\n                                      llvm_args.as_ptr());\n     });"}, {"sha": "05abd3ff5577d7b211a0a59a2ded4b493aeccf8f", "filename": "src/librustc_trans/trans/asm.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0c96037ec1676b420002a06ea337865f95abbf2c/src%2Flibrustc_trans%2Ftrans%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c96037ec1676b420002a06ea337865f95abbf2c/src%2Flibrustc_trans%2Ftrans%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fasm.rs?ref=0c96037ec1676b420002a06ea337865f95abbf2c", "patch": "@@ -161,10 +161,7 @@ pub fn trans_inline_asm<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, ia: &ast::InlineAsm)\n // Default per-arch clobbers\n // Basically what clang does\n \n-#[cfg(any(target_arch = \"arm\",\n-          target_arch = \"aarch64\",\n-          target_arch = \"mips\",\n-          target_arch = \"mipsel\"))]\n+#[cfg(not(any(target_arch = \"x86\", target_arch = \"x86_64\")))]\n fn get_clobbers() -> String {\n     \"\".to_string()\n }"}, {"sha": "7abcdd07cc5da6a0ea6bb4827ce190ddcbe54969", "filename": "src/librustc_trans/trans/cabi.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c96037ec1676b420002a06ea337865f95abbf2c/src%2Flibrustc_trans%2Ftrans%2Fcabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c96037ec1676b420002a06ea337865f95abbf2c/src%2Flibrustc_trans%2Ftrans%2Fcabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcabi.rs?ref=0c96037ec1676b420002a06ea337865f95abbf2c", "patch": "@@ -18,6 +18,7 @@ use trans::cabi_x86_64;\n use trans::cabi_x86_win64;\n use trans::cabi_arm;\n use trans::cabi_aarch64;\n+use trans::cabi_powerpc;\n use trans::cabi_mips;\n use trans::type_::Type;\n \n@@ -125,6 +126,7 @@ pub fn compute_abi_info(ccx: &CrateContext,\n             cabi_arm::compute_abi_info(ccx, atys, rty, ret_def, flavor)\n         },\n         \"mips\" => cabi_mips::compute_abi_info(ccx, atys, rty, ret_def),\n+        \"powerpc\" => cabi_powerpc::compute_abi_info(ccx, atys, rty, ret_def),\n         a => ccx.sess().fatal(&format!(\"unrecognized arch \\\"{}\\\" in target specification\", a)\n                               []),\n     }"}, {"sha": "9fc67e19662ca31ccf3f904626dc9d06b0f15383", "filename": "src/librustc_trans/trans/cabi_powerpc.rs", "status": "added", "additions": 183, "deletions": 0, "changes": 183, "blob_url": "https://github.com/rust-lang/rust/blob/0c96037ec1676b420002a06ea337865f95abbf2c/src%2Flibrustc_trans%2Ftrans%2Fcabi_powerpc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c96037ec1676b420002a06ea337865f95abbf2c/src%2Flibrustc_trans%2Ftrans%2Fcabi_powerpc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcabi_powerpc.rs?ref=0c96037ec1676b420002a06ea337865f95abbf2c", "patch": "@@ -0,0 +1,183 @@\n+// Copyright 2014-2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use libc::c_uint;\n+use llvm;\n+use llvm::{Integer, Pointer, Float, Double, Struct, Array};\n+use llvm::{StructRetAttribute, ZExtAttribute};\n+use trans::cabi::{FnType, ArgType};\n+use trans::context::CrateContext;\n+use trans::type_::Type;\n+\n+use std::cmp;\n+\n+fn align_up_to(off: uint, a: uint) -> uint {\n+    return (off + a - 1u) / a * a;\n+}\n+\n+fn align(off: uint, ty: Type) -> uint {\n+    let a = ty_align(ty);\n+    return align_up_to(off, a);\n+}\n+\n+fn ty_align(ty: Type) -> uint {\n+    match ty.kind() {\n+        Integer => {\n+            unsafe {\n+                ((llvm::LLVMGetIntTypeWidth(ty.to_ref()) as uint) + 7) / 8\n+            }\n+        }\n+        Pointer => 4,\n+        Float => 4,\n+        Double => 8,\n+        Struct => {\n+          if ty.is_packed() {\n+            1\n+          } else {\n+            let str_tys = ty.field_types();\n+            str_tys.iter().fold(1, |a, t| cmp::max(a, ty_align(*t)))\n+          }\n+        }\n+        Array => {\n+            let elt = ty.element_type();\n+            ty_align(elt)\n+        }\n+        _ => panic!(\"ty_size: unhandled type\")\n+    }\n+}\n+\n+fn ty_size(ty: Type) -> uint {\n+    match ty.kind() {\n+        Integer => {\n+            unsafe {\n+                ((llvm::LLVMGetIntTypeWidth(ty.to_ref()) as uint) + 7) / 8\n+            }\n+        }\n+        Pointer => 4,\n+        Float => 4,\n+        Double => 8,\n+        Struct => {\n+            if ty.is_packed() {\n+                let str_tys = ty.field_types();\n+                str_tys.iter().fold(0, |s, t| s + ty_size(*t))\n+            } else {\n+                let str_tys = ty.field_types();\n+                let size = str_tys.iter().fold(0, |s, t| align(s, *t) + ty_size(*t));\n+                align(size, ty)\n+            }\n+        }\n+        Array => {\n+            let len = ty.array_length();\n+            let elt = ty.element_type();\n+            let eltsz = ty_size(elt);\n+            len * eltsz\n+        }\n+        _ => panic!(\"ty_size: unhandled type\")\n+    }\n+}\n+\n+fn classify_ret_ty(ccx: &CrateContext, ty: Type) -> ArgType {\n+    if is_reg_ty(ty) {\n+        let attr = if ty == Type::i1(ccx) { Some(ZExtAttribute) } else { None };\n+        ArgType::direct(ty, None, None, attr)\n+    } else {\n+        ArgType::indirect(ty, Some(StructRetAttribute))\n+    }\n+}\n+\n+fn classify_arg_ty(ccx: &CrateContext, ty: Type, offset: &mut uint) -> ArgType {\n+    let orig_offset = *offset;\n+    let size = ty_size(ty) * 8;\n+    let mut align = ty_align(ty);\n+\n+    align = cmp::min(cmp::max(align, 4), 8);\n+    *offset = align_up_to(*offset, align);\n+    *offset += align_up_to(size, align * 8) / 8;\n+\n+    if is_reg_ty(ty) {\n+        let attr = if ty == Type::i1(ccx) { Some(ZExtAttribute) } else { None };\n+        ArgType::direct(ty, None, None, attr)\n+    } else {\n+        ArgType::direct(\n+            ty,\n+            Some(struct_ty(ccx, ty)),\n+            padding_ty(ccx, align, orig_offset),\n+            None\n+        )\n+    }\n+}\n+\n+fn is_reg_ty(ty: Type) -> bool {\n+    return match ty.kind() {\n+        Integer\n+        | Pointer\n+        | Float\n+        | Double => true,\n+        _ => false\n+    };\n+}\n+\n+fn padding_ty(ccx: &CrateContext, align: uint, offset: uint) -> Option<Type> {\n+    if ((align - 1 ) & offset) > 0 {\n+        Some(Type::i32(ccx))\n+    } else {\n+        None\n+    }\n+}\n+\n+fn coerce_to_int(ccx: &CrateContext, size: uint) -> Vec<Type> {\n+    let int_ty = Type::i32(ccx);\n+    let mut args = Vec::new();\n+\n+    let mut n = size / 32;\n+    while n > 0 {\n+        args.push(int_ty);\n+        n -= 1;\n+    }\n+\n+    let r = size % 32;\n+    if r > 0 {\n+        unsafe {\n+            args.push(Type::from_ref(llvm::LLVMIntTypeInContext(ccx.llcx(), r as c_uint)));\n+        }\n+    }\n+\n+    args\n+}\n+\n+fn struct_ty(ccx: &CrateContext, ty: Type) -> Type {\n+    let size = ty_size(ty) * 8;\n+    Type::struct_(ccx, coerce_to_int(ccx, size).as_slice(), false)\n+}\n+\n+pub fn compute_abi_info(ccx: &CrateContext,\n+                        atys: &[Type],\n+                        rty: Type,\n+                        ret_def: bool) -> FnType {\n+    let ret_ty = if ret_def {\n+        classify_ret_ty(ccx, rty)\n+    } else {\n+        ArgType::direct(Type::void(ccx), None, None, None)\n+    };\n+\n+    let sret = ret_ty.is_indirect();\n+    let mut arg_tys = Vec::new();\n+    let mut offset = if sret { 4 } else { 0 };\n+\n+    for aty in atys.iter() {\n+        let ty = classify_arg_ty(ccx, *aty, &mut offset);\n+        arg_tys.push(ty);\n+    };\n+\n+    return FnType {\n+        arg_tys: arg_tys,\n+        ret_ty: ret_ty,\n+    };\n+}"}, {"sha": "91c6c9a13a362107520277bb890299fa24dcdaff", "filename": "src/librustc_trans/trans/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0c96037ec1676b420002a06ea337865f95abbf2c/src%2Flibrustc_trans%2Ftrans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c96037ec1676b420002a06ea337865f95abbf2c/src%2Flibrustc_trans%2Ftrans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmod.rs?ref=0c96037ec1676b420002a06ea337865f95abbf2c", "patch": "@@ -45,6 +45,7 @@ mod cabi_x86_win64;\n mod cabi_arm;\n mod cabi_aarch64;\n mod cabi_mips;\n+mod cabi_powerpc;\n mod foreign;\n mod intrinsic;\n mod debuginfo;"}, {"sha": "fc0c838a3f11800418dce248a4c98c951be7f81c", "filename": "src/libstd/os.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0c96037ec1676b420002a06ea337865f95abbf2c/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c96037ec1676b420002a06ea337865f95abbf2c/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=0c96037ec1676b420002a06ea337865f95abbf2c", "patch": "@@ -1422,6 +1422,11 @@ mod arch_consts {\n     pub const ARCH: &'static str = \"mipsel\";\n }\n \n+#[cfg(target_arch = \"powerpc\")]\n+mod arch_consts {\n+    pub const ARCH: &'static str = \"powerpc\";\n+}\n+\n #[cfg(test)]\n mod tests {\n     use prelude::v1::*;"}, {"sha": "68ba7e1dd29e6716ab313ae576dc141df0bfc1ff", "filename": "src/libstd/rand/os.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0c96037ec1676b420002a06ea337865f95abbf2c/src%2Flibstd%2Frand%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c96037ec1676b420002a06ea337865f95abbf2c/src%2Flibstd%2Frand%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fos.rs?ref=0c96037ec1676b420002a06ea337865f95abbf2c", "patch": "@@ -32,7 +32,8 @@ mod imp {\n               any(target_arch = \"x86_64\",\n                   target_arch = \"x86\",\n                   target_arch = \"arm\",\n-                  target_arch = \"aarch64\")))]\n+                  target_arch = \"aarch64\",\n+                  target_arch = \"powerpc\")))]\n     fn getrandom(buf: &mut [u8]) -> libc::c_long {\n         extern \"C\" {\n             fn syscall(number: libc::c_long, ...) -> libc::c_long;\n@@ -44,6 +45,8 @@ mod imp {\n         const NR_GETRANDOM: libc::c_long = 355;\n         #[cfg(any(target_arch = \"arm\", target_arch = \"aarch64\"))]\n         const NR_GETRANDOM: libc::c_long = 384;\n+        #[cfg(target_arch = \"powerpc\")]\n+        const NR_GETRANDOM: libc::c_long = 384;\n \n         unsafe {\n             syscall(NR_GETRANDOM, buf.as_mut_ptr(), buf.len(), 0u)\n@@ -54,7 +57,8 @@ mod imp {\n                   any(target_arch = \"x86_64\",\n                       target_arch = \"x86\",\n                       target_arch = \"arm\",\n-                      target_arch = \"aarch64\"))))]\n+                      target_arch = \"aarch64\",\n+                      target_arch = \"powerpc\"))))]\n     fn getrandom(_buf: &mut [u8]) -> libc::c_long { -1 }\n \n     fn getrandom_fill_bytes(v: &mut [u8]) {\n@@ -91,7 +95,8 @@ mod imp {\n               any(target_arch = \"x86_64\",\n                   target_arch = \"x86\",\n                   target_arch = \"arm\",\n-                  target_arch = \"aarch64\")))]\n+                  target_arch = \"aarch64\",\n+                  target_arch = \"powerpc\")))]\n     fn is_getrandom_available() -> bool {\n         use sync::atomic::{AtomicBool, ATOMIC_BOOL_INIT, Ordering};\n \n@@ -119,7 +124,8 @@ mod imp {\n                   any(target_arch = \"x86_64\",\n                       target_arch = \"x86\",\n                       target_arch = \"arm\",\n-                      target_arch = \"aarch64\"))))]\n+                      target_arch = \"aarch64\",\n+                      target_arch = \"powerpc\"))))]\n     fn is_getrandom_available() -> bool { false }\n \n     /// A random number generator that retrieves randomness straight from"}, {"sha": "dd9923307d6f0e788421a685573833f64b5cecfc", "filename": "src/libstd/rt/libunwind.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0c96037ec1676b420002a06ea337865f95abbf2c/src%2Flibstd%2Frt%2Flibunwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c96037ec1676b420002a06ea337865f95abbf2c/src%2Flibstd%2Frt%2Flibunwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Flibunwind.rs?ref=0c96037ec1676b420002a06ea337865f95abbf2c", "patch": "@@ -81,6 +81,9 @@ pub const unwinder_private_data_size: uint = 2;\n #[cfg(any(target_arch = \"mips\", target_arch = \"mipsel\"))]\n pub const unwinder_private_data_size: uint = 2;\n \n+#[cfg(target_arch = \"powerpc\")]\n+pub const unwinder_private_data_size: uint = 2;\n+\n #[repr(C)]\n pub struct _Unwind_Exception {\n     pub exception_class: _Unwind_Exception_Class,"}, {"sha": "88bb9395cf122e9fe15c1a8790798bd26ccdf90f", "filename": "src/libstd/sys/common/stack.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0c96037ec1676b420002a06ea337865f95abbf2c/src%2Flibstd%2Fsys%2Fcommon%2Fstack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c96037ec1676b420002a06ea337865f95abbf2c/src%2Flibstd%2Fsys%2Fcommon%2Fstack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fstack.rs?ref=0c96037ec1676b420002a06ea337865f95abbf2c", "patch": "@@ -231,6 +231,12 @@ pub unsafe fn record_sp_limit(limit: uint) {\n     unsafe fn target_record_sp_limit(_: uint) {\n     }\n \n+    // powerpc - FIXME(POWERPC): missing...\n+    #[cfg(target_arch = \"powerpc\")]\n+    unsafe fn target_record_sp_limit(_: uint) {\n+    }\n+\n+\n     // iOS segmented stack is disabled for now, see related notes\n     #[cfg(all(target_arch = \"arm\", target_os = \"ios\"))] #[inline(always)]\n     unsafe fn target_record_sp_limit(_: uint) {\n@@ -326,6 +332,12 @@ pub unsafe fn get_sp_limit() -> uint {\n         1024\n     }\n \n+    // powepc - FIXME(POWERPC): missing...\n+    #[cfg(target_arch = \"powerpc\")]\n+    unsafe fn target_get_sp_limit() -> uint {\n+        1024\n+    }\n+\n     // iOS doesn't support segmented stacks yet. This function might\n     // be called by runtime though so it is unsafe to mark it as\n     // unreachable, let's return a fixed constant."}, {"sha": "fed700cc9d52a93805118d240fb0f8c3793a1860", "filename": "src/libstd/sys/unix/c.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0c96037ec1676b420002a06ea337865f95abbf2c/src%2Flibstd%2Fsys%2Funix%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c96037ec1676b420002a06ea337865f95abbf2c/src%2Flibstd%2Fsys%2Funix%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fc.rs?ref=0c96037ec1676b420002a06ea337865f95abbf2c", "patch": "@@ -33,7 +33,9 @@ pub const FIONBIO: libc::c_ulong = 0x8004667e;\n           target_os = \"android\"))]\n pub const FIONBIO: libc::c_ulong = 0x5421;\n #[cfg(all(target_os = \"linux\",\n-          any(target_arch = \"mips\", target_arch = \"mipsel\")))]\n+          any(target_arch = \"mips\",\n+              target_arch = \"mipsel\",\n+              target_arch = \"powerpc\")))]\n pub const FIONBIO: libc::c_ulong = 0x667e;\n \n #[cfg(any(target_os = \"macos\",\n@@ -49,7 +51,9 @@ pub const FIOCLEX: libc::c_ulong = 0x20006601;\n           target_os = \"android\"))]\n pub const FIOCLEX: libc::c_ulong = 0x5451;\n #[cfg(all(target_os = \"linux\",\n-          any(target_arch = \"mips\", target_arch = \"mipsel\")))]\n+          any(target_arch = \"mips\",\n+              target_arch = \"mipsel\",\n+              target_arch = \"powerpc\")))]\n pub const FIOCLEX: libc::c_ulong = 0x6601;\n \n #[cfg(any(target_os = \"macos\",\n@@ -182,7 +186,9 @@ mod signal {\n }\n \n #[cfg(all(target_os = \"linux\",\n-          any(target_arch = \"mips\", target_arch = \"mipsel\")))]\n+          any(target_arch = \"mips\",\n+              target_arch = \"mipsel\",\n+              target_arch = \"powerpc\")))]\n mod signal {\n     use libc;\n "}, {"sha": "45680f52e73d12c54607780c132ef70cff277c19", "filename": "src/libstd/sys/unix/stack_overflow.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0c96037ec1676b420002a06ea337865f95abbf2c/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c96037ec1676b420002a06ea337865f95abbf2c/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs?ref=0c96037ec1676b420002a06ea337865f95abbf2c", "patch": "@@ -150,6 +150,7 @@ mod imp {\n               all(target_os = \"linux\", target_arch = \"aarch64\"),\n               all(target_os = \"linux\", target_arch = \"mips\"), // may not match\n               all(target_os = \"linux\", target_arch = \"mipsel\"), // may not match\n+              all(target_os = \"linux\", target_arch = \"powerpc\"), // may not match\n               target_os = \"android\"))] // may not match\n     mod signal {\n         use libc;"}, {"sha": "c1e3fc88794eb1751dcd22368914819fb6d0ff4b", "filename": "src/libstd/sys/unix/sync.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0c96037ec1676b420002a06ea337865f95abbf2c/src%2Flibstd%2Fsys%2Funix%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c96037ec1676b420002a06ea337865f95abbf2c/src%2Flibstd%2Fsys%2Funix%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fsync.rs?ref=0c96037ec1676b420002a06ea337865f95abbf2c", "patch": "@@ -126,7 +126,8 @@ mod os {\n     #[cfg(any(target_arch = \"x86\",\n               target_arch = \"arm\",\n               target_arch = \"mips\",\n-              target_arch = \"mipsel\"))]\n+              target_arch = \"mipsel\",\n+              target_arch = \"powerpc\"))]\n     const __SIZEOF_PTHREAD_MUTEX_T: uint = 24 - 8;\n     #[cfg(target_arch = \"aarch64\")]\n     const __SIZEOF_PTHREAD_MUTEX_T: uint = 48 - 8;\n@@ -136,7 +137,8 @@ mod os {\n               target_arch = \"arm\",\n               target_arch = \"aarch64\",\n               target_arch = \"mips\",\n-              target_arch = \"mipsel\"))]\n+              target_arch = \"mipsel\",\n+              target_arch = \"powerpc\"))]\n     const __SIZEOF_PTHREAD_COND_T: uint = 48 - 8;\n \n     #[cfg(any(target_arch = \"x86_64\",\n@@ -146,7 +148,8 @@ mod os {\n     #[cfg(any(target_arch = \"x86\",\n               target_arch = \"arm\",\n               target_arch = \"mips\",\n-              target_arch = \"mipsel\"))]\n+              target_arch = \"mipsel\",\n+              target_arch = \"powerpc\"))]\n     const __SIZEOF_PTHREAD_RWLOCK_T: uint = 32 - 8;\n \n     #[repr(C)]"}, {"sha": "2502ac1eb48d62e24efe356f2e7145cf5f5897c8", "filename": "src/rt/arch/powerpc/morestack.S", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0c96037ec1676b420002a06ea337865f95abbf2c/src%2Frt%2Farch%2Fpowerpc%2Fmorestack.S", "raw_url": "https://github.com/rust-lang/rust/raw/0c96037ec1676b420002a06ea337865f95abbf2c/src%2Frt%2Farch%2Fpowerpc%2Fmorestack.S", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Fpowerpc%2Fmorestack.S?ref=0c96037ec1676b420002a06ea337865f95abbf2c", "patch": "@@ -0,0 +1,18 @@\n+// Mark stack as non-executable\n+#if defined(__linux__) && defined(__ELF__)\n+.section       .note.GNU-stack, \"\", %progbits\n+#endif\n+\n+/* See i386/morestack.S for the lengthy, general explanation. */\n+\n+.global rust_stack_exhausted\n+\n+.hidden __morestack\n+\n+// FIXME(POWERPC): this might not be perfectly right but works for now\n+__morestack:\n+       .cfi_startproc\n+       bl rust_stack_exhausted\n+       // the above function ensures that it never returns\n+       .cfi_endproc\n+.end  __morestack"}, {"sha": "e93a69a711b3e35a9b439e7871704c7bb2a522ce", "filename": "src/rt/arch/powerpc/record_sp.S", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c96037ec1676b420002a06ea337865f95abbf2c/src%2Frt%2Farch%2Fpowerpc%2Frecord_sp.S", "raw_url": "https://github.com/rust-lang/rust/raw/0c96037ec1676b420002a06ea337865f95abbf2c/src%2Frt%2Farch%2Fpowerpc%2Frecord_sp.S", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Fpowerpc%2Frecord_sp.S?ref=0c96037ec1676b420002a06ea337865f95abbf2c", "patch": "@@ -0,0 +1,4 @@\n+// Mark stack as non-executable\n+#if defined(__linux__) && defined(__ELF__)\n+.section       .note.GNU-stack, \"\", %progbits\n+#endif"}, {"sha": "4a16b9c257cbe953bb1edb192ba7ad43b49604c1", "filename": "src/rustllvm/llvm-auto-clean-trigger", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c96037ec1676b420002a06ea337865f95abbf2c/src%2Frustllvm%2Fllvm-auto-clean-trigger", "raw_url": "https://github.com/rust-lang/rust/raw/0c96037ec1676b420002a06ea337865f95abbf2c/src%2Frustllvm%2Fllvm-auto-clean-trigger", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2Fllvm-auto-clean-trigger?ref=0c96037ec1676b420002a06ea337865f95abbf2c", "patch": "@@ -1,4 +1,4 @@\n # If this file is modified, then llvm will be forcibly cleaned and then rebuilt.\n # The actual contents of this file do not matter, but to trigger a change on the\n # build bots then the contents should be changed so git updates the mtime.\n-2015-01-05\n+2015-01-13"}]}