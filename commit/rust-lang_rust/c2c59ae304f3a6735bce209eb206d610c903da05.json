{"sha": "c2c59ae304f3a6735bce209eb206d610c903da05", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyYzU5YWUzMDRmM2E2NzM1YmNlMjA5ZWIyMDZkNjEwYzkwM2RhMDU=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-11-02T19:05:10Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-05-15T08:20:56Z"}, "message": "Move key recovering into force_query.", "tree": {"sha": "d7fbc24445fa9a13a1aec24d1acd222dafaacdc7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d7fbc24445fa9a13a1aec24d1acd222dafaacdc7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c2c59ae304f3a6735bce209eb206d610c903da05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c2c59ae304f3a6735bce209eb206d610c903da05", "html_url": "https://github.com/rust-lang/rust/commit/c2c59ae304f3a6735bce209eb206d610c903da05", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c2c59ae304f3a6735bce209eb206d610c903da05/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1ff91f439bc09f566da211c6449821b4e949279", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1ff91f439bc09f566da211c6449821b4e949279", "html_url": "https://github.com/rust-lang/rust/commit/e1ff91f439bc09f566da211c6449821b4e949279"}], "stats": {"total": 70, "additions": 39, "deletions": 31}, "files": [{"sha": "ac81c0261e29070b68c07cfe59054566afd70bb0", "filename": "compiler/rustc_query_impl/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2c59ae304f3a6735bce209eb206d610c903da05/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2c59ae304f3a6735bce209eb206d610c903da05/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs?ref=c2c59ae304f3a6735bce209eb206d610c903da05", "patch": "@@ -26,7 +26,7 @@ use rustc_middle::ty::query::{query_keys, query_storage, query_stored, query_val\n use rustc_middle::ty::query::{Providers, QueryEngine};\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_serialize::opaque;\n-use rustc_span::{Span, DUMMY_SP};\n+use rustc_span::Span;\n \n #[macro_use]\n mod plumbing;"}, {"sha": "dbda6f304c78b2751004d245a2627ec1599d04b7", "filename": "compiler/rustc_query_impl/src/plumbing.rs", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c2c59ae304f3a6735bce209eb206d610c903da05/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2c59ae304f3a6735bce209eb206d610c903da05/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs?ref=c2c59ae304f3a6735bce209eb206d610c903da05", "patch": "@@ -457,20 +457,7 @@ macro_rules! define_queries {\n                 }\n \n                 fn force_from_dep_node(tcx: QueryCtxt<'_>, dep_node: &DepNode) -> bool {\n-                    if is_anon {\n-                        return false;\n-                    }\n-\n-                    if !can_reconstruct_query_key() {\n-                        return false;\n-                    }\n-\n-                    if let Some(key) = recover(*tcx, dep_node) {\n-                        force_query::<queries::$name<'_>, _>(tcx, key, DUMMY_SP, *dep_node);\n-                        return true;\n-                    }\n-\n-                    false\n+                    force_query::<queries::$name<'_>, _>(tcx, dep_node)\n                 }\n \n                 fn try_load_from_on_disk_cache(tcx: QueryCtxt<'_>, dep_node: &DepNode) {"}, {"sha": "d91eadb149cfd46154e8e5bc2ba8514adc187b71", "filename": "compiler/rustc_query_system/src/query/plumbing.rs", "status": "modified", "additions": 37, "deletions": 16, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/c2c59ae304f3a6735bce209eb206d610c903da05/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2c59ae304f3a6735bce209eb206d610c903da05/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs?ref=c2c59ae304f3a6735bce209eb206d610c903da05", "patch": "@@ -2,7 +2,7 @@\n //! generate the actual methods on tcx which find and execute the provider,\n //! manage the caches, and so forth.\n \n-use crate::dep_graph::{DepContext, DepKind, DepNode};\n+use crate::dep_graph::{DepContext, DepKind, DepNode, DepNodeParams};\n use crate::dep_graph::{DepNodeIndex, SerializedDepNodeIndex};\n use crate::query::caches::QueryCache;\n use crate::query::config::{QueryDescription, QueryVtable, QueryVtableExt};\n@@ -19,7 +19,7 @@ use rustc_data_structures::thin_vec::ThinVec;\n #[cfg(not(parallel_compiler))]\n use rustc_errors::DiagnosticBuilder;\n use rustc_errors::{Diagnostic, FatalError};\n-use rustc_span::Span;\n+use rustc_span::{Span, DUMMY_SP};\n use std::collections::hash_map::Entry;\n use std::fmt::Debug;\n use std::hash::{Hash, Hasher};\n@@ -431,7 +431,7 @@ fn try_execute_query<CTX, C>(\n ) -> C::Stored\n where\n     C: QueryCache,\n-    C::Key: crate::dep_graph::DepNodeParams<CTX::DepContext>,\n+    C::Key: DepNodeParams<CTX::DepContext>,\n     CTX: QueryContext,\n {\n     let job = match JobOwner::<'_, CTX::DepKind, C>::try_start(\n@@ -693,7 +693,7 @@ fn get_query_impl<CTX, C>(\n where\n     CTX: QueryContext,\n     C: QueryCache,\n-    C::Key: crate::dep_graph::DepNodeParams<CTX::DepContext>,\n+    C::Key: DepNodeParams<CTX::DepContext>,\n {\n     try_execute_query(tcx, state, cache, span, key, lookup, query)\n }\n@@ -743,15 +743,25 @@ fn force_query_impl<CTX, C>(\n     tcx: CTX,\n     state: &QueryState<CTX::DepKind, C::Key>,\n     cache: &QueryCacheStore<C>,\n-    key: C::Key,\n-    span: Span,\n     dep_node: DepNode<CTX::DepKind>,\n     query: &QueryVtable<CTX, C::Key, C::Value>,\n-) where\n+) -> bool\n+where\n     C: QueryCache,\n-    C::Key: crate::dep_graph::DepNodeParams<CTX::DepContext>,\n+    C::Key: DepNodeParams<CTX::DepContext>,\n     CTX: QueryContext,\n {\n+    debug_assert!(!query.anon);\n+    debug_assert!(<C::Key as DepNodeParams<CTX::DepContext>>::can_reconstruct_query_key());\n+\n+    let key = if let Some(key) =\n+        <C::Key as DepNodeParams<CTX::DepContext>>::recover(*tcx.dep_context(), &dep_node)\n+    {\n+        key\n+    } else {\n+        return false;\n+    };\n+\n     // We may be concurrently trying both execute and force a query.\n     // Ensure that only one of them runs the query.\n     let cached = cache.cache.lookup(cache, &key, |_, index| {\n@@ -765,25 +775,28 @@ fn force_query_impl<CTX, C>(\n     });\n \n     let lookup = match cached {\n-        Ok(()) => return,\n+        Ok(()) => return true,\n         Err(lookup) => lookup,\n     };\n \n     let job = match JobOwner::<'_, CTX::DepKind, C>::try_start(\n         tcx,\n         state,\n         cache,\n-        span,\n+        DUMMY_SP,\n         key.clone(),\n         lookup,\n         query,\n     ) {\n         TryGetJob::NotYetStarted(job) => job,\n-        TryGetJob::Cycle(_) => return,\n+        TryGetJob::Cycle(_) => return true,\n         #[cfg(parallel_compiler)]\n-        TryGetJob::JobCompleted(_) => return,\n+        TryGetJob::JobCompleted(_) => return true,\n     };\n+\n     force_query_with_job(tcx, key, job, dep_node, query);\n+\n+    true\n }\n \n pub enum QueryMode {\n@@ -800,7 +813,7 @@ pub fn get_query<Q, CTX>(\n ) -> Option<Q::Stored>\n where\n     Q: QueryDescription<CTX>,\n-    Q::Key: crate::dep_graph::DepNodeParams<CTX::DepContext>,\n+    Q::Key: DepNodeParams<CTX::DepContext>,\n     CTX: QueryContext,\n {\n     let query = &Q::VTABLE;\n@@ -816,11 +829,19 @@ where\n     Some(value)\n }\n \n-pub fn force_query<Q, CTX>(tcx: CTX, key: Q::Key, span: Span, dep_node: DepNode<CTX::DepKind>)\n+pub fn force_query<Q, CTX>(tcx: CTX, dep_node: &DepNode<CTX::DepKind>) -> bool\n where\n     Q: QueryDescription<CTX>,\n-    Q::Key: crate::dep_graph::DepNodeParams<CTX::DepContext>,\n+    Q::Key: DepNodeParams<CTX::DepContext>,\n     CTX: QueryContext,\n {\n-    force_query_impl(tcx, Q::query_state(tcx), Q::query_cache(tcx), key, span, dep_node, &Q::VTABLE)\n+    if Q::ANON {\n+        return false;\n+    }\n+\n+    if !<Q::Key as DepNodeParams<CTX::DepContext>>::can_reconstruct_query_key() {\n+        return false;\n+    }\n+\n+    force_query_impl(tcx, Q::query_state(tcx), Q::query_cache(tcx), *dep_node, &Q::VTABLE)\n }"}]}