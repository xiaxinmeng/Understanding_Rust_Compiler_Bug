{"sha": "1562d8cbd890d39640d98afa59424cc8002ea85a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1NjJkOGNiZDg5MGQzOTY0MGQ5OGFmYTU5NDI0Y2M4MDAyZWE4NWE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-10-17T12:56:27Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-10-21T15:49:38Z"}, "message": "Generalize the replace-late-bound-regions function to operate\nover anything that is foldable, not just fn signatures.", "tree": {"sha": "6f75321608b02d617964d03b2a7e993be6351245", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6f75321608b02d617964d03b2a7e993be6351245"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1562d8cbd890d39640d98afa59424cc8002ea85a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1562d8cbd890d39640d98afa59424cc8002ea85a", "html_url": "https://github.com/rust-lang/rust/commit/1562d8cbd890d39640d98afa59424cc8002ea85a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1562d8cbd890d39640d98afa59424cc8002ea85a/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c505b75b1d0bf8ab63c26e9317fa9bc794b086e", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c505b75b1d0bf8ab63c26e9317fa9bc794b086e", "html_url": "https://github.com/rust-lang/rust/commit/5c505b75b1d0bf8ab63c26e9317fa9bc794b086e"}], "stats": {"total": 66, "additions": 35, "deletions": 31}, "files": [{"sha": "b9ad4a5f72a2a7031caabb05d021844692df54f7", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1562d8cbd890d39640d98afa59424cc8002ea85a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1562d8cbd890d39640d98afa59424cc8002ea85a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=1562d8cbd890d39640d98afa59424cc8002ea85a", "patch": "@@ -97,11 +97,8 @@ use middle::typeck::astconv::{ast_region_to_region, ast_ty_to_ty};\n use middle::typeck::astconv;\n use middle::typeck::check::_match::pat_ctxt;\n use middle::typeck::check::method::{AutoderefReceiver};\n-use middle::typeck::check::method::{AutoderefReceiverFlag};\n use middle::typeck::check::method::{CheckTraitsAndInherentMethods};\n-use middle::typeck::check::method::{DontAutoderefReceiver};\n-use middle::typeck::check::method::{IgnoreStaticMethods, ReportStaticMethods};\n-use middle::typeck::check::regionmanip::replace_late_bound_regions_in_fn_sig;\n+use middle::typeck::check::regionmanip::replace_late_bound_regions;\n use middle::typeck::CrateCtxt;\n use middle::typeck::infer::{resolve_type, force_tvar};\n use middle::typeck::infer;\n@@ -529,7 +526,7 @@ fn check_fn<'a, 'tcx>(ccx: &'a CrateCtxt<'a, 'tcx>,\n \n     // First, we have to replace any bound regions in the fn type with free ones.\n     // The free region references will be bound the node_id of the body block.\n-    let (_, fn_sig) = replace_late_bound_regions_in_fn_sig(tcx, fn_sig, |br| {\n+    let (_, fn_sig) = replace_late_bound_regions(tcx, fn_sig.binder_id, fn_sig, |br| {\n         ty::ReFree(ty::FreeRegion {scope_id: body.id, bound_region: br})\n     });\n \n@@ -1531,6 +1528,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         &self.inh.infcx\n     }\n \n+    pub fn sess(&self) -> &Session {\n+        &self.tcx().sess\n+    }\n+\n     pub fn err_count_since_creation(&self) -> uint {\n         self.ccx.tcx.sess.err_count() - self.err_count_on_creation\n     }\n@@ -2890,7 +2891,7 @@ fn check_expr_with_unifier(fcx: &FnCtxt,\n \n         // Replace any bound regions that appear in the function\n         // signature with region variables\n-        let (_, fn_sig) = replace_late_bound_regions_in_fn_sig(fcx.tcx(), fn_sig, |br| {\n+        let (_, fn_sig) = replace_late_bound_regions(fcx.tcx(), fn_sig.binder_id, fn_sig, |br| {\n             fcx.infcx().next_region_var(infer::LateBoundRegion(call_expr.span, br))\n         });\n \n@@ -3346,8 +3347,8 @@ fn check_expr_with_unifier(fcx: &FnCtxt,\n             match expected_sty {\n                 Some(ty::ty_closure(ref cenv)) => {\n                     let (_, sig) =\n-                        replace_late_bound_regions_in_fn_sig(\n-                            tcx, &cenv.sig,\n+                        replace_late_bound_regions(\n+                            tcx, cenv.sig.binder_id, &cenv.sig,\n                             |_| fcx.inh.infcx.fresh_bound_region(expr.id));\n                     let onceness = match (&store, &cenv.store) {\n                         // As the closure type and onceness go, only three"}, {"sha": "a448a93c5178fdfc58cbff8b4baaddd94583bd91", "filename": "src/librustc/middle/typeck/check/regionmanip.rs", "status": "modified", "additions": 19, "deletions": 16, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/1562d8cbd890d39640d98afa59424cc8002ea85a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionmanip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1562d8cbd890d39640d98afa59424cc8002ea85a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionmanip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionmanip.rs?ref=1562d8cbd890d39640d98afa59424cc8002ea85a", "patch": "@@ -13,7 +13,7 @@\n use middle::subst::{ParamSpace, Subst, Substs};\n use middle::ty;\n use middle::ty_fold;\n-use middle::ty_fold::TypeFolder;\n+use middle::ty_fold::{TypeFolder, TypeFoldable};\n \n use syntax::ast;\n \n@@ -23,31 +23,34 @@ use util::ppaux::Repr;\n \n // Helper functions related to manipulating region types.\n \n-pub fn replace_late_bound_regions_in_fn_sig(\n-        tcx: &ty::ctxt,\n-        fn_sig: &ty::FnSig,\n-        mapf: |ty::BoundRegion| -> ty::Region)\n-        -> (HashMap<ty::BoundRegion,ty::Region>, ty::FnSig) {\n-    debug!(\"replace_late_bound_regions_in_fn_sig({})\", fn_sig.repr(tcx));\n+pub fn replace_late_bound_regions<T>(\n+    tcx: &ty::ctxt,\n+    binder_id: ast::NodeId,\n+    value: &T,\n+    map_fn: |ty::BoundRegion| -> ty::Region)\n+    -> (HashMap<ty::BoundRegion,ty::Region>, T)\n+    where T : TypeFoldable + Repr\n+{\n+    debug!(\"replace_late_bound_regions(binder_id={}, value={})\",\n+           binder_id, value.repr(tcx));\n \n     let mut map = HashMap::new();\n-    let fn_sig = {\n-        let mut f = ty_fold::RegionFolder::regions(tcx, |r| {\n-            debug!(\"region r={}\", r.to_string());\n+    let new_value = {\n+        let mut folder = ty_fold::RegionFolder::regions(tcx, |r| {\n             match r {\n-                ty::ReLateBound(s, br) if s == fn_sig.binder_id => {\n-                    * match map.entry(br) {\n-                        Vacant(entry) => entry.set(mapf(br)),\n-                        Occupied(entry) => entry.into_mut(),\n+                ty::ReLateBound(s, br) if s == binder_id => {\n+                    match map.entry(br) {\n+                        Vacant(entry) => *entry.set(map_fn(br)),\n+                        Occupied(entry) => *entry.into_mut(),\n                     }\n                 }\n                 _ => r\n             }\n         });\n-        ty_fold::super_fold_sig(&mut f, fn_sig)\n+        value.fold_with(&mut folder)\n     };\n     debug!(\"resulting map: {}\", map);\n-    (map, fn_sig)\n+    (map, new_value)\n }\n \n pub enum WfConstraint {"}, {"sha": "dc79fd4aa328c151fdf75d200069f08f96ae2630", "filename": "src/librustc/middle/typeck/check/wf.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1562d8cbd890d39640d98afa59424cc8002ea85a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1562d8cbd890d39640d98afa59424cc8002ea85a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwf.rs?ref=1562d8cbd890d39640d98afa59424cc8002ea85a", "patch": "@@ -15,7 +15,7 @@ use middle::ty;\n use middle::ty_fold::{TypeFolder, TypeFoldable};\n use middle::typeck::astconv::AstConv;\n use middle::typeck::check::{FnCtxt, Inherited, blank_fn_ctxt, vtable2, regionck};\n-use middle::typeck::check::regionmanip::replace_late_bound_regions_in_fn_sig;\n+use middle::typeck::check::regionmanip::replace_late_bound_regions;\n use middle::typeck::CrateCtxt;\n use util::ppaux::Repr;\n \n@@ -373,8 +373,8 @@ impl<'cx,'tcx> TypeFolder<'tcx> for BoundsChecker<'cx,'tcx> {\n                 self.binding_count += 1;\n \n                 let (_, fn_sig) =\n-                    replace_late_bound_regions_in_fn_sig(\n-                        self.fcx.tcx(), fn_sig,\n+                    replace_late_bound_regions(\n+                        self.fcx.tcx(), fn_sig.binder_id, fn_sig,\n                         |br| ty::ReFree(ty::FreeRegion{scope_id: self.scope_id,\n                                                        bound_region: br}));\n "}, {"sha": "a466581ef394a0ea570a589e326f7dd654b7223b", "filename": "src/librustc/middle/typeck/infer/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1562d8cbd890d39640d98afa59424cc8002ea85a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1562d8cbd890d39640d98afa59424cc8002ea85a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs?ref=1562d8cbd890d39640d98afa59424cc8002ea85a", "patch": "@@ -28,7 +28,7 @@ use middle::ty::{TyVid, IntVid, FloatVid, RegionVid};\n use middle::ty;\n use middle::ty_fold;\n use middle::ty_fold::{TypeFolder, TypeFoldable};\n-use middle::typeck::check::regionmanip::replace_late_bound_regions_in_fn_sig;\n+use middle::typeck::check::regionmanip::replace_late_bound_regions;\n use std::cell::{RefCell};\n use std::collections::HashMap;\n use std::rc::Rc;\n@@ -962,7 +962,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                                                         HashMap<ty::BoundRegion,\n                                                                 ty::Region>) {\n         let (map, fn_sig) =\n-            replace_late_bound_regions_in_fn_sig(self.tcx, fsig, |br| {\n+            replace_late_bound_regions(self.tcx, fsig.binder_id, fsig, |br| {\n                 let rvar = self.next_region_var(\n                     BoundRegionInFnType(trace.origin.span(), br));\n                 debug!(\"Bound region {} maps to {}\","}, {"sha": "4c04bcc5236f4af88ab9949cbe0f0e5a2a817007", "filename": "src/librustc/middle/typeck/infer/sub.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1562d8cbd890d39640d98afa59424cc8002ea85a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fsub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1562d8cbd890d39640d98afa59424cc8002ea85a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fsub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fsub.rs?ref=1562d8cbd890d39640d98afa59424cc8002ea85a", "patch": "@@ -12,7 +12,7 @@\n use middle::ty::{BuiltinBounds};\n use middle::ty;\n use middle::ty::TyVar;\n-use middle::typeck::check::regionmanip::replace_late_bound_regions_in_fn_sig;\n+use middle::typeck::check::regionmanip::replace_late_bound_regions;\n use middle::typeck::infer::combine::*;\n use middle::typeck::infer::{cres, CresCompare};\n use middle::typeck::infer::equate::Equate;\n@@ -189,7 +189,7 @@ impl<'f, 'tcx> Combine<'tcx> for Sub<'f, 'tcx> {\n         // Second, we instantiate each bound region in the supertype with a\n         // fresh concrete region.\n         let (skol_map, b_sig) = {\n-            replace_late_bound_regions_in_fn_sig(self.fields.infcx.tcx, b, |br| {\n+            replace_late_bound_regions(self.fields.infcx.tcx, b.binder_id, b, |br| {\n                 let skol = self.fields.infcx.region_vars.new_skolemized(br);\n                 debug!(\"Bound region {} skolemized to {}\",\n                        bound_region_to_string(self.fields.infcx.tcx, \"\", false, br),"}]}