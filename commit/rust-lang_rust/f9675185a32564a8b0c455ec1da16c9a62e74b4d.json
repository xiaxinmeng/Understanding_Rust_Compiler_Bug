{"sha": "f9675185a32564a8b0c455ec1da16c9a62e74b4d", "node_id": "C_kwDOAAsO6NoAKGY5Njc1MTg1YTMyNTY0YThiMGM0NTVlYzFkYTE2YzlhNjJlNzRiNGQ", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2022-05-06T18:45:59Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2022-05-06T18:45:59Z"}, "message": "Share more unix SystemTime code", "tree": {"sha": "2485acb06ce3fff76f20db3da1eaadff6b66a9df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2485acb06ce3fff76f20db3da1eaadff6b66a9df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9675185a32564a8b0c455ec1da16c9a62e74b4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9675185a32564a8b0c455ec1da16c9a62e74b4d", "html_url": "https://github.com/rust-lang/rust/commit/f9675185a32564a8b0c455ec1da16c9a62e74b4d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9675185a32564a8b0c455ec1da16c9a62e74b4d/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fec4818fdb40c82679f57fa7f26fcddc1a874c13", "url": "https://api.github.com/repos/rust-lang/rust/commits/fec4818fdb40c82679f57fa7f26fcddc1a874c13", "html_url": "https://github.com/rust-lang/rust/commit/fec4818fdb40c82679f57fa7f26fcddc1a874c13"}], "stats": {"total": 158, "additions": 57, "deletions": 101}, "files": [{"sha": "ac8355188bb3c208e13fe5bb7eb5f59e8fb697a1", "filename": "library/std/src/sys/unix/time.rs", "status": "modified", "additions": 57, "deletions": 101, "changes": 158, "blob_url": "https://github.com/rust-lang/rust/blob/f9675185a32564a8b0c455ec1da16c9a62e74b4d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9675185a32564a8b0c455ec1da16c9a62e74b4d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ftime.rs?ref=f9675185a32564a8b0c455ec1da16c9a62e74b4d", "patch": "@@ -1,16 +1,56 @@\n+use crate::fmt;\n use crate::time::Duration;\n \n-pub use self::inner::{Instant, SystemTime, UNIX_EPOCH};\n+pub use self::inner::Instant;\n use crate::convert::TryInto;\n \n const NSEC_PER_SEC: u64 = 1_000_000_000;\n+pub const UNIX_EPOCH: SystemTime = SystemTime { t: Timespec::zero() };\n+\n+#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]\n+pub struct SystemTime {\n+    pub(in crate::sys::unix) t: Timespec,\n+}\n \n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]\n pub(in crate::sys::unix) struct Timespec {\n     tv_sec: i64,\n     tv_nsec: i64,\n }\n \n+impl SystemTime {\n+    pub fn new(tv_sec: i64, tv_nsec: i64) -> SystemTime {\n+        SystemTime { t: Timespec::new(tv_sec, tv_nsec) }\n+    }\n+\n+    pub fn sub_time(&self, other: &SystemTime) -> Result<Duration, Duration> {\n+        self.t.sub_timespec(&other.t)\n+    }\n+\n+    pub fn checked_add_duration(&self, other: &Duration) -> Option<SystemTime> {\n+        Some(SystemTime { t: self.t.checked_add_duration(other)? })\n+    }\n+\n+    pub fn checked_sub_duration(&self, other: &Duration) -> Option<SystemTime> {\n+        Some(SystemTime { t: self.t.checked_sub_duration(other)? })\n+    }\n+}\n+\n+impl From<libc::timespec> for SystemTime {\n+    fn from(t: libc::timespec) -> SystemTime {\n+        SystemTime { t: Timespec::from(t) }\n+    }\n+}\n+\n+impl fmt::Debug for SystemTime {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        f.debug_struct(\"SystemTime\")\n+            .field(\"tv_sec\", &self.t.tv_sec)\n+            .field(\"tv_nsec\", &self.t.tv_nsec)\n+            .finish()\n+    }\n+}\n+\n impl Timespec {\n     const fn zero() -> Timespec {\n         Timespec { tv_sec: 0, tv_nsec: 0 }\n@@ -85,31 +125,36 @@ impl Timespec {\n         }\n         Some(Timespec::new(secs, nsec as i64))\n     }\n+\n+    pub fn to_timespec(&self) -> Option<libc::timespec> {\n+        use crate::convert::TryInto;\n+        Some(libc::timespec {\n+            tv_sec: self.tv_sec.try_into().ok()?,\n+            tv_nsec: self.tv_nsec.try_into().ok()?,\n+        })\n+    }\n+}\n+\n+impl From<libc::timespec> for Timespec {\n+    fn from(t: libc::timespec) -> Timespec {\n+        Timespec::new(t.tv_sec as i64, t.tv_nsec as i64)\n+    }\n }\n \n #[cfg(any(target_os = \"macos\", target_os = \"ios\"))]\n mod inner {\n-    use crate::fmt;\n     use crate::sync::atomic::{AtomicU64, Ordering};\n     use crate::sys::cvt;\n     use crate::sys_common::mul_div_u64;\n     use crate::time::Duration;\n \n-    use super::Timespec;\n-    use super::NSEC_PER_SEC;\n+    use super::{SystemTime, Timespec, NSEC_PER_SEC};\n \n     #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Debug, Hash)]\n     pub struct Instant {\n         t: u64,\n     }\n \n-    #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]\n-    pub struct SystemTime {\n-        pub(in crate::sys::unix) t: Timespec,\n-    }\n-\n-    pub const UNIX_EPOCH: SystemTime = SystemTime { t: Timespec::zero() };\n-\n     #[repr(C)]\n     #[derive(Copy, Clone)]\n     struct mach_timebase_info {\n@@ -144,29 +189,13 @@ mod inner {\n     }\n \n     impl SystemTime {\n-        pub fn new(tv_sec: i64, tv_nsec: i64) -> SystemTime {\n-            SystemTime { t: Timespec::new(tv_sec, tv_nsec) }\n-        }\n-\n         pub fn now() -> SystemTime {\n             use crate::ptr;\n \n             let mut s = libc::timeval { tv_sec: 0, tv_usec: 0 };\n             cvt(unsafe { libc::gettimeofday(&mut s, ptr::null_mut()) }).unwrap();\n             return SystemTime::from(s);\n         }\n-\n-        pub fn sub_time(&self, other: &SystemTime) -> Result<Duration, Duration> {\n-            self.t.sub_timespec(&other.t)\n-        }\n-\n-        pub fn checked_add_duration(&self, other: &Duration) -> Option<SystemTime> {\n-            Some(SystemTime { t: self.t.checked_add_duration(other)? })\n-        }\n-\n-        pub fn checked_sub_duration(&self, other: &Duration) -> Option<SystemTime> {\n-            Some(SystemTime { t: self.t.checked_sub_duration(other)? })\n-        }\n     }\n \n     impl From<libc::timeval> for Timespec {\n@@ -181,27 +210,6 @@ mod inner {\n         }\n     }\n \n-    impl From<libc::timespec> for Timespec {\n-        fn from(t: libc::timespec) -> Timespec {\n-            Timespec::new(t.tv_sec as i64, t.tv_nsec as i64)\n-        }\n-    }\n-\n-    impl From<libc::timespec> for SystemTime {\n-        fn from(t: libc::timespec) -> SystemTime {\n-            SystemTime { t: Timespec::from(t) }\n-        }\n-    }\n-\n-    impl fmt::Debug for SystemTime {\n-        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-            f.debug_struct(\"SystemTime\")\n-                .field(\"tv_sec\", &self.t.tv_sec)\n-                .field(\"tv_nsec\", &self.t.tv_nsec)\n-                .finish()\n-        }\n-    }\n-\n     fn checked_dur2intervals(dur: &Duration) -> Option<u64> {\n         let nanos =\n             dur.as_secs().checked_mul(NSEC_PER_SEC)?.checked_add(dur.subsec_nanos() as u64)?;\n@@ -256,20 +264,13 @@ mod inner {\n     use crate::sys::cvt;\n     use crate::time::Duration;\n \n-    use super::Timespec;\n+    use super::{SystemTime, Timespec};\n \n     #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]\n     pub struct Instant {\n         t: Timespec,\n     }\n \n-    #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]\n-    pub struct SystemTime {\n-        pub(in crate::sys::unix) t: Timespec,\n-    }\n-\n-    pub const UNIX_EPOCH: SystemTime = SystemTime { t: Timespec::zero() };\n-\n     impl Instant {\n         pub fn now() -> Instant {\n             Instant { t: Timespec::now(libc::CLOCK_MONOTONIC) }\n@@ -298,46 +299,9 @@ mod inner {\n     }\n \n     impl SystemTime {\n-        pub fn new(tv_sec: i64, tv_nsec: i64) -> SystemTime {\n-            SystemTime { t: Timespec::new(tv_sec, tv_nsec) }\n-        }\n-\n         pub fn now() -> SystemTime {\n             SystemTime { t: Timespec::now(libc::CLOCK_REALTIME) }\n         }\n-\n-        pub fn sub_time(&self, other: &SystemTime) -> Result<Duration, Duration> {\n-            self.t.sub_timespec(&other.t)\n-        }\n-\n-        pub fn checked_add_duration(&self, other: &Duration) -> Option<SystemTime> {\n-            Some(SystemTime { t: self.t.checked_add_duration(other)? })\n-        }\n-\n-        pub fn checked_sub_duration(&self, other: &Duration) -> Option<SystemTime> {\n-            Some(SystemTime { t: self.t.checked_sub_duration(other)? })\n-        }\n-    }\n-\n-    impl From<libc::timespec> for Timespec {\n-        fn from(t: libc::timespec) -> Timespec {\n-            Timespec::new(t.tv_sec as i64, t.tv_nsec as i64)\n-        }\n-    }\n-\n-    impl From<libc::timespec> for SystemTime {\n-        fn from(t: libc::timespec) -> SystemTime {\n-            SystemTime { t: Timespec::from(t) }\n-        }\n-    }\n-\n-    impl fmt::Debug for SystemTime {\n-        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-            f.debug_struct(\"SystemTime\")\n-                .field(\"tv_sec\", &self.t.tv_sec)\n-                .field(\"tv_nsec\", &self.t.tv_nsec)\n-                .finish()\n-        }\n     }\n \n     #[cfg(not(any(target_os = \"dragonfly\", target_os = \"espidf\")))]\n@@ -378,13 +342,5 @@ mod inner {\n             cvt(unsafe { libc::clock_gettime(clock, t.as_mut_ptr()) }).unwrap();\n             Timespec::from(unsafe { t.assume_init() })\n         }\n-\n-        pub fn to_timespec(&self) -> Option<libc::timespec> {\n-            use crate::convert::TryInto;\n-            Some(libc::timespec {\n-                tv_sec: self.tv_sec.try_into().ok()?,\n-                tv_nsec: self.tv_nsec.try_into().ok()?,\n-            })\n-        }\n     }\n }"}]}