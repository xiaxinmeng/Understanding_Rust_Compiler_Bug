{"sha": "5936278ed6bef736f6eb8c0dd4d650fd8e10461b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5MzYyNzhlZDZiZWY3MzZmNmViOGMwZGQ0ZDY1MGZkOGUxMDQ2MWI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-02-11T03:15:00Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-02-11T03:15:00Z"}, "message": "Auto merge of #22076 - carols10cents:exp2-calling-exp, r=huonw\n\nI was working on adding examples to the documentation in `std::num::Float`. I got to `exp2`, which says \"Returns 2 raised to the power of the number, `2^(self)`.\"\r\n\r\nSo I tried running this code:\r\n\r\n```\r\nuse std::num::Float;\r\n\r\n#[test]\r\nfn test_exp2() {\r\n    assert_eq!(32.0, 5.0.exp2());\r\n}\r\n```\r\n\r\nand it resulted in a failure of `(left: `32`, right: `148.413159`)`. That 148.413159 is the value for e^5, which is `exp()`, not `exp2()`.\r\n\r\nSure enough, `exp2` is calling `exp` and shouldn't be, looks like a copy-paste error. \r\n\r\nI haven't added any tests for this since it's unlikely to break again, but I will happily do so if people think that would be a good idea. The doc examples are coming :)\r\n\r\nI scanned through the other functions in these files for similar sorts of errors and didn't notice any.", "tree": {"sha": "a9dc9a5c81825e471ad7daefb59577f1de40e4ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a9dc9a5c81825e471ad7daefb59577f1de40e4ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5936278ed6bef736f6eb8c0dd4d650fd8e10461b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5936278ed6bef736f6eb8c0dd4d650fd8e10461b", "html_url": "https://github.com/rust-lang/rust/commit/5936278ed6bef736f6eb8c0dd4d650fd8e10461b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5936278ed6bef736f6eb8c0dd4d650fd8e10461b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2067dd2a86c059d83377fd2ad87a579846c266e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/2067dd2a86c059d83377fd2ad87a579846c266e1", "html_url": "https://github.com/rust-lang/rust/commit/2067dd2a86c059d83377fd2ad87a579846c266e1"}, {"sha": "8379062be53e79e5f4dc23753c0152700d20bfac", "url": "https://api.github.com/repos/rust-lang/rust/commits/8379062be53e79e5f4dc23753c0152700d20bfac", "html_url": "https://github.com/rust-lang/rust/commit/8379062be53e79e5f4dc23753c0152700d20bfac"}], "stats": {"total": 58, "additions": 56, "deletions": 2}, "files": [{"sha": "58b93665fe15339bb981821b5b064cb165a66bb4", "filename": "src/libstd/num/f32.rs", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/5936278ed6bef736f6eb8c0dd4d650fd8e10461b/src%2Flibstd%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5936278ed6bef736f6eb8c0dd4d650fd8e10461b/src%2Flibstd%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff32.rs?ref=5936278ed6bef736f6eb8c0dd4d650fd8e10461b", "patch": "@@ -173,7 +173,7 @@ impl Float for f32 {\n     #[inline]\n     fn exp(self) -> f32 { num::Float::exp(self) }\n     #[inline]\n-    fn exp2(self) -> f32 { num::Float::exp(self) }\n+    fn exp2(self) -> f32 { num::Float::exp2(self) }\n     #[inline]\n     fn ln(self) -> f32 { num::Float::ln(self) }\n     #[inline]\n@@ -554,6 +554,33 @@ mod tests {\n         assert_approx_eq!((-1.7f32).fract(), -0.7f32);\n     }\n \n+    #[test]\n+    fn test_exp() {\n+        assert_eq!(1.0, 0.0f32.exp());\n+        assert_approx_eq!(2.718282, 1.0f32.exp());\n+        assert_approx_eq!(148.413162, 5.0f32.exp());\n+\n+        let inf: f32 = Float::infinity();\n+        let neg_inf: f32 = Float::neg_infinity();\n+        let nan: f32 = Float::nan();\n+        assert_eq!(inf, inf.exp());\n+        assert_eq!(0.0, neg_inf.exp());\n+        assert!(nan.exp().is_nan());\n+    }\n+\n+    #[test]\n+    fn test_exp2() {\n+        assert_eq!(32.0, 5.0f32.exp2());\n+        assert_eq!(1.0, 0.0f32.exp2());\n+\n+        let inf: f32 = Float::infinity();\n+        let neg_inf: f32 = Float::neg_infinity();\n+        let nan: f32 = Float::nan();\n+        assert_eq!(inf, inf.exp2());\n+        assert_eq!(0.0, neg_inf.exp2());\n+        assert!(nan.exp2().is_nan());\n+    }\n+\n     #[test]\n     fn test_asinh() {\n         assert_eq!(0.0f32.asinh(), 0.0f32);"}, {"sha": "8b17feeb70cdcfc35a7e18701a4abd615a007853", "filename": "src/libstd/num/f64.rs", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/5936278ed6bef736f6eb8c0dd4d650fd8e10461b/src%2Flibstd%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5936278ed6bef736f6eb8c0dd4d650fd8e10461b/src%2Flibstd%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff64.rs?ref=5936278ed6bef736f6eb8c0dd4d650fd8e10461b", "patch": "@@ -183,7 +183,7 @@ impl Float for f64 {\n     #[inline]\n     fn exp(self) -> f64 { num::Float::exp(self) }\n     #[inline]\n-    fn exp2(self) -> f64 { num::Float::exp(self) }\n+    fn exp2(self) -> f64 { num::Float::exp2(self) }\n     #[inline]\n     fn ln(self) -> f64 { num::Float::ln(self) }\n     #[inline]\n@@ -563,6 +563,33 @@ mod tests {\n         assert_approx_eq!((-1.7f64).fract(), -0.7f64);\n     }\n \n+    #[test]\n+    fn test_exp() {\n+        assert_eq!(1.0, 0.0f64.exp());\n+        assert_approx_eq!(2.718282, 1.0f64.exp());\n+        assert_approx_eq!(148.413159, 5.0f64.exp());\n+\n+        let inf: f64 = Float::infinity();\n+        let neg_inf: f64 = Float::neg_infinity();\n+        let nan: f64 = Float::nan();\n+        assert_eq!(inf, inf.exp());\n+        assert_eq!(0.0, neg_inf.exp());\n+        assert!(nan.exp().is_nan());\n+    }\n+\n+    #[test]\n+    fn test_exp2() {\n+        assert_eq!(32.0, 5.0f64.exp2());\n+        assert_eq!(1.0, 0.0f64.exp2());\n+\n+        let inf: f64 = Float::infinity();\n+        let neg_inf: f64 = Float::neg_infinity();\n+        let nan: f64 = Float::nan();\n+        assert_eq!(inf, inf.exp2());\n+        assert_eq!(0.0, neg_inf.exp2());\n+        assert!(nan.exp2().is_nan());\n+    }\n+\n     #[test]\n     fn test_asinh() {\n         assert_eq!(0.0f64.asinh(), 0.0f64);"}]}