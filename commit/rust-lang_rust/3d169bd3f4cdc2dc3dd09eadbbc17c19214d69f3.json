{"sha": "3d169bd3f4cdc2dc3dd09eadbbc17c19214d69f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkMTY5YmQzZjRjZGMyZGMzZGQwOWVhZGJiYzE3YzE5MjE0ZDY5ZjM=", "commit": {"author": {"name": "Lauren\u021biu Nicola", "email": "lnicola@dend.ro", "date": "2020-08-03T10:57:04Z"}, "committer": {"name": "Lauren\u021biu Nicola", "email": "lnicola@dend.ro", "date": "2020-10-08T14:06:20Z"}, "message": "Add track_env_var to the proc macro server", "tree": {"sha": "8e8d829f5926401ac8303001fb435b504311c203", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e8d829f5926401ac8303001fb435b504311c203"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d169bd3f4cdc2dc3dd09eadbbc17c19214d69f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d169bd3f4cdc2dc3dd09eadbbc17c19214d69f3", "html_url": "https://github.com/rust-lang/rust/commit/3d169bd3f4cdc2dc3dd09eadbbc17c19214d69f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d169bd3f4cdc2dc3dd09eadbbc17c19214d69f3/comments", "author": {"login": "lnicola", "id": 308347, "node_id": "MDQ6VXNlcjMwODM0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/308347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lnicola", "html_url": "https://github.com/lnicola", "followers_url": "https://api.github.com/users/lnicola/followers", "following_url": "https://api.github.com/users/lnicola/following{/other_user}", "gists_url": "https://api.github.com/users/lnicola/gists{/gist_id}", "starred_url": "https://api.github.com/users/lnicola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lnicola/subscriptions", "organizations_url": "https://api.github.com/users/lnicola/orgs", "repos_url": "https://api.github.com/users/lnicola/repos", "events_url": "https://api.github.com/users/lnicola/events{/privacy}", "received_events_url": "https://api.github.com/users/lnicola/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lnicola", "id": 308347, "node_id": "MDQ6VXNlcjMwODM0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/308347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lnicola", "html_url": "https://github.com/lnicola", "followers_url": "https://api.github.com/users/lnicola/followers", "following_url": "https://api.github.com/users/lnicola/following{/other_user}", "gists_url": "https://api.github.com/users/lnicola/gists{/gist_id}", "starred_url": "https://api.github.com/users/lnicola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lnicola/subscriptions", "organizations_url": "https://api.github.com/users/lnicola/orgs", "repos_url": "https://api.github.com/users/lnicola/repos", "events_url": "https://api.github.com/users/lnicola/events{/privacy}", "received_events_url": "https://api.github.com/users/lnicola/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5f252ade72fee4776396122dc91a17ddc185a66", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5f252ade72fee4776396122dc91a17ddc185a66", "html_url": "https://github.com/rust-lang/rust/commit/e5f252ade72fee4776396122dc91a17ddc185a66"}], "stats": {"total": 41, "additions": 40, "deletions": 1}, "files": [{"sha": "55d6330cc3186a162711eacbf71c055f3c5590aa", "filename": "crates/proc_macro_srv/src/proc_macro/bridge/client.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3d169bd3f4cdc2dc3dd09eadbbc17c19214d69f3/crates%2Fproc_macro_srv%2Fsrc%2Fproc_macro%2Fbridge%2Fclient.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d169bd3f4cdc2dc3dd09eadbbc17c19214d69f3/crates%2Fproc_macro_srv%2Fsrc%2Fproc_macro%2Fbridge%2Fclient.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_srv%2Fsrc%2Fproc_macro%2Fbridge%2Fclient.rs?ref=3d169bd3f4cdc2dc3dd09eadbbc17c19214d69f3", "patch": "@@ -160,6 +160,7 @@ macro_rules! define_handles {\n }\n define_handles! {\n     'owned:\n+    FreeFunctions,\n     TokenStream,\n     TokenStreamBuilder,\n     TokenStreamIter,"}, {"sha": "b97886eb9483bf0f89365e72194d50e0de144a92", "filename": "crates/proc_macro_srv/src/proc_macro/bridge/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3d169bd3f4cdc2dc3dd09eadbbc17c19214d69f3/crates%2Fproc_macro_srv%2Fsrc%2Fproc_macro%2Fbridge%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d169bd3f4cdc2dc3dd09eadbbc17c19214d69f3/crates%2Fproc_macro_srv%2Fsrc%2Fproc_macro%2Fbridge%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_srv%2Fsrc%2Fproc_macro%2Fbridge%2Fmod.rs?ref=3d169bd3f4cdc2dc3dd09eadbbc17c19214d69f3", "patch": "@@ -57,6 +57,10 @@ use std::thread;\n macro_rules! with_api {\n     ($S:ident, $self:ident, $m:ident) => {\n         $m! {\n+            FreeFunctions {\n+                fn drop($self: $S::FreeFunctions);\n+                fn track_env_var(var: &str, value: Option<&str>);\n+            },\n             TokenStream {\n                 fn drop($self: $S::TokenStream);\n                 fn clone($self: &$S::TokenStream) -> $S::TokenStream;"}, {"sha": "3acb239af6c8045ac572096223b2a88dc86d7808", "filename": "crates/proc_macro_srv/src/proc_macro/bridge/server.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d169bd3f4cdc2dc3dd09eadbbc17c19214d69f3/crates%2Fproc_macro_srv%2Fsrc%2Fproc_macro%2Fbridge%2Fserver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d169bd3f4cdc2dc3dd09eadbbc17c19214d69f3/crates%2Fproc_macro_srv%2Fsrc%2Fproc_macro%2Fbridge%2Fserver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_srv%2Fsrc%2Fproc_macro%2Fbridge%2Fserver.rs?ref=3d169bd3f4cdc2dc3dd09eadbbc17c19214d69f3", "patch": "@@ -11,6 +11,8 @@ use super::client::HandleStore;\n /// Declare an associated item of one of the traits below, optionally\n /// adjusting it (i.e., adding bounds to types and default bodies to methods).\n macro_rules! associated_item {\n+    (type FreeFunctions) =>\n+        (type FreeFunctions: 'static;);\n     (type TokenStream) =>\n         (type TokenStream: 'static + Clone;);\n     (type TokenStreamBuilder) =>"}, {"sha": "fc6e7344f74a8138c111300168e5865cae8be964", "filename": "crates/proc_macro_srv/src/proc_macro/mod.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3d169bd3f4cdc2dc3dd09eadbbc17c19214d69f3/crates%2Fproc_macro_srv%2Fsrc%2Fproc_macro%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d169bd3f4cdc2dc3dd09eadbbc17c19214d69f3/crates%2Fproc_macro_srv%2Fsrc%2Fproc_macro%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_srv%2Fsrc%2Fproc_macro%2Fmod.rs?ref=3d169bd3f4cdc2dc3dd09eadbbc17c19214d69f3", "patch": "@@ -924,3 +924,25 @@ impl fmt::Debug for Literal {\n         self.0.fmt(f)\n     }\n }\n+\n+pub mod tracked_env {\n+    use std::env::{self, VarError};\n+    use std::ffi::OsStr;\n+\n+    /// Retrieve an environment variable and add it to build dependency info.\n+    /// Build system executing the compiler will know that the variable was accessed during\n+    /// compilation, and will be able to rerun the build when the value of that variable changes.\n+    /// Besides the dependency tracking this function should be equivalent to `env::var` from the\n+    /// standard library, except that the argument must be UTF-8.\n+    pub fn var<K: AsRef<OsStr> + AsRef<str>>(key: K) -> Result<String, VarError> {\n+        use std::ops::Deref;\n+\n+        let key: &str = key.as_ref();\n+        let value = env::var(key);\n+        super::bridge::client::FreeFunctions::track_env_var(\n+            key,\n+            value.as_ref().map(|t| t.deref()).ok(),\n+        );\n+        value\n+    }\n+}"}, {"sha": "c5fe3591e508bb21a8d411502e1c1c714c7ba36d", "filename": "crates/proc_macro_srv/src/rustc_server.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3d169bd3f4cdc2dc3dd09eadbbc17c19214d69f3/crates%2Fproc_macro_srv%2Fsrc%2Frustc_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d169bd3f4cdc2dc3dd09eadbbc17c19214d69f3/crates%2Fproc_macro_srv%2Fsrc%2Frustc_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_srv%2Fsrc%2Frustc_server.rs?ref=3d169bd3f4cdc2dc3dd09eadbbc17c19214d69f3", "patch": "@@ -242,6 +242,8 @@ impl TokenStreamBuilder {\n     }\n }\n \n+pub struct FreeFunctions;\n+\n #[derive(Clone)]\n pub struct TokenStreamIter {\n     trees: IntoIter<TokenTree>,\n@@ -254,6 +256,7 @@ pub struct Rustc {\n }\n \n impl server::Types for Rustc {\n+    type FreeFunctions = FreeFunctions;\n     type TokenStream = TokenStream;\n     type TokenStreamBuilder = TokenStreamBuilder;\n     type TokenStreamIter = TokenStreamIter;\n@@ -267,6 +270,13 @@ impl server::Types for Rustc {\n     type MultiSpan = Vec<Span>;\n }\n \n+impl server::FreeFunctions for Rustc {\n+    fn track_env_var(&mut self, _var: &str, _value: Option<&str>) {\n+        // FIXME: track env var accesses\n+        // https://github.com/rust-lang/rust/pull/71858\n+    }\n+}\n+\n impl server::TokenStream for Rustc {\n     fn new(&mut self) -> Self::TokenStream {\n         Self::TokenStream::new()"}, {"sha": "fcc4f05e4ca4b562d680b33629c1bfd2d6a89c46", "filename": "xtask/src/install.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d169bd3f4cdc2dc3dd09eadbbc17c19214d69f3/xtask%2Fsrc%2Finstall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d169bd3f4cdc2dc3dd09eadbbc17c19214d69f3/xtask%2Fsrc%2Finstall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Finstall.rs?ref=3d169bd3f4cdc2dc3dd09eadbbc17c19214d69f3", "patch": "@@ -7,7 +7,7 @@ use anyhow::{bail, format_err, Context, Result};\n use crate::not_bash::{pushd, run};\n \n // Latest stable, feel free to send a PR if this lags behind.\n-const REQUIRED_RUST_VERSION: u32 = 46;\n+const REQUIRED_RUST_VERSION: u32 = 47;\n \n pub struct InstallCmd {\n     pub client: Option<ClientOpt>,"}]}