{"sha": "3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "node_id": "C_kwDOAAsO6NoAKDNjOTc2NWNmZjE4YTNjNGJhMjk2MmVhNTlkNGMzZjY5NjZmOTcwMGM", "commit": {"author": {"name": "Joshua Nelson", "email": "jnelson@cloudflare.com", "date": "2022-07-06T12:44:47Z"}, "committer": {"name": "Joshua Nelson", "email": "jnelson@cloudflare.com", "date": "2022-07-13T22:47:06Z"}, "message": "Rename `debugging_opts` to `unstable_opts`\n\nThis is no longer used only for debugging options (e.g. `-Zoutput-width`, `-Zallow-features`).\nRename it to be more clear.", "tree": {"sha": "803c007988b9d19bafd59699de01bf64d030f452", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/803c007988b9d19bafd59699de01bf64d030f452"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "html_url": "https://github.com/rust-lang/rust/commit/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c80dde43f992f3eb419899a34551b84c6301f8e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/c80dde43f992f3eb419899a34551b84c6301f8e8", "html_url": "https://github.com/rust-lang/rust/commit/c80dde43f992f3eb419899a34551b84c6301f8e8"}], "stats": {"total": 790, "additions": 396, "deletions": 394}, "files": [{"sha": "b79c1cafba008ae80b1733b81c31b8099bbbd053", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -427,7 +427,7 @@ pub fn lower_to_hir<'hir>(tcx: TyCtxt<'hir>, (): ()) -> hir::Crate<'hir> {\n     sess.time(\"drop_ast\", || std::mem::drop(krate));\n \n     // Discard hygiene data, which isn't required after lowering to HIR.\n-    if !sess.opts.debugging_opts.keep_hygiene_data {\n+    if !sess.opts.unstable_opts.keep_hygiene_data {\n         rustc_span::hygiene::clear_syntax_context_map();\n     }\n \n@@ -699,7 +699,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     /// Intercept all spans entering HIR.\n     /// Mark a span as relative to the current owning item.\n     fn lower_span(&self, span: Span) -> Span {\n-        if self.tcx.sess.opts.debugging_opts.incremental_relative_spans {\n+        if self.tcx.sess.opts.unstable_opts.incremental_relative_spans {\n             span.with_parent(Some(self.current_hir_id_owner))\n         } else {\n             // Do not make spans relative when not using incremental compilation."}, {"sha": "22134d5a71ce119fae2437214c056c223fcd4c47", "filename": "compiler/rustc_borrowck/src/facts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_borrowck%2Fsrc%2Ffacts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_borrowck%2Fsrc%2Ffacts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ffacts.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -40,7 +40,7 @@ pub(crate) trait AllFactsExt {\n impl AllFactsExt for AllFacts {\n     /// Return\n     fn enabled(tcx: TyCtxt<'_>) -> bool {\n-        tcx.sess.opts.debugging_opts.nll_facts || tcx.sess.opts.debugging_opts.polonius\n+        tcx.sess.opts.unstable_opts.nll_facts || tcx.sess.opts.unstable_opts.polonius\n     }\n \n     fn write_to_dir("}, {"sha": "e8673ecd3a0b74ee70b76d192782abe6a11b7ffd", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -231,7 +231,7 @@ fn do_mir_borrowck<'a, 'tcx>(\n     let borrow_set =\n         Rc::new(BorrowSet::build(tcx, body, locals_are_invalidated_at_exit, &mdpe.move_data));\n \n-    let use_polonius = return_body_with_facts || infcx.tcx.sess.opts.debugging_opts.polonius;\n+    let use_polonius = return_body_with_facts || infcx.tcx.sess.opts.unstable_opts.polonius;\n \n     // Compute non-lexical lifetimes.\n     let nll::NllOutput {"}, {"sha": "d2e8227479271196238e207b9e8ec79d50895315", "filename": "compiler/rustc_borrowck/src/nll.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -278,9 +278,9 @@ pub(crate) fn compute_regions<'cx, 'tcx>(\n \n     // Dump facts if requested.\n     let polonius_output = all_facts.as_ref().and_then(|all_facts| {\n-        if infcx.tcx.sess.opts.debugging_opts.nll_facts {\n+        if infcx.tcx.sess.opts.unstable_opts.nll_facts {\n             let def_path = infcx.tcx.def_path(def_id);\n-            let dir_path = PathBuf::from(&infcx.tcx.sess.opts.debugging_opts.nll_facts_dir)\n+            let dir_path = PathBuf::from(&infcx.tcx.sess.opts.unstable_opts.nll_facts_dir)\n                 .join(def_path.to_filename_friendly_no_crate());\n             all_facts.write_to_dir(dir_path, location_table).unwrap();\n         }"}, {"sha": "9040cfcf54f41e977bb8bbe4940989e481f83e9d", "filename": "compiler/rustc_borrowck/src/region_infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -589,7 +589,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         // In Polonius mode, the errors about missing universal region relations are in the output\n         // and need to be emitted or propagated. Otherwise, we need to check whether the\n         // constraints were too strong, and if so, emit or propagate those errors.\n-        if infcx.tcx.sess.opts.debugging_opts.polonius {\n+        if infcx.tcx.sess.opts.unstable_opts.polonius {\n             self.check_polonius_subset_errors(\n                 body,\n                 outlives_requirements.as_mut(),"}, {"sha": "0ebe29df95f202fa9edc2d6f71b46b346a123aa6", "filename": "compiler/rustc_builtin_macros/src/test_harness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest_harness.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -51,7 +51,7 @@ pub fn inject(sess: &Session, resolver: &mut dyn ResolverExpand, krate: &mut ast\n     let test_runner = get_test_runner(sess, span_diagnostic, &krate);\n \n     if sess.opts.test {\n-        let panic_strategy = match (panic_strategy, sess.opts.debugging_opts.panic_abort_tests) {\n+        let panic_strategy = match (panic_strategy, sess.opts.unstable_opts.panic_abort_tests) {\n             (PanicStrategy::Abort, true) => PanicStrategy::Abort,\n             (PanicStrategy::Abort, false) => {\n                 if panic_strategy == platform_panic_strategy {"}, {"sha": "6d321c7b298a730464bbf88e4e723afc52a7e501", "filename": "compiler/rustc_codegen_cranelift/src/allocator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fallocator.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -24,7 +24,7 @@ pub(crate) fn codegen(\n             unwind_context,\n             kind,\n             tcx.lang_items().oom().is_some(),\n-            tcx.sess.opts.debugging_opts.oom,\n+            tcx.sess.opts.unstable_opts.oom,\n         );\n         true\n     } else {"}, {"sha": "b24e49e94c91ecfa850ec44c48dc5f1b368b7114", "filename": "compiler/rustc_codegen_cranelift/src/cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcast.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -144,7 +144,7 @@ pub(crate) fn clif_int_or_float_cast(\n             fx.bcx.ins().fcvt_to_uint_sat(to_ty, from)\n         };\n \n-        if let Some(false) = fx.tcx.sess.opts.debugging_opts.saturating_float_casts {\n+        if let Some(false) = fx.tcx.sess.opts.unstable_opts.saturating_float_casts {\n             return val;\n         }\n "}, {"sha": "bbcb9591373dd7192f2e8b7f05a1063fbd0ed348", "filename": "compiler/rustc_codegen_cranelift/src/debuginfo/line_info.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdebuginfo%2Fline_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdebuginfo%2Fline_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdebuginfo%2Fline_info.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -140,7 +140,7 @@ impl<'tcx> DebugContext<'tcx> {\n             // In order to have a good line stepping behavior in debugger, we overwrite debug\n             // locations of macro expansions with that of the outermost expansion site\n             // (unless the crate is being compiled with `-Z debug-macros`).\n-            let span = if !span.from_expansion() || tcx.sess.opts.debugging_opts.debug_macros {\n+            let span = if !span.from_expansion() || tcx.sess.opts.unstable_opts.debug_macros {\n                 span\n             } else {\n                 // Walk up the macro expansion chain until we reach a non-expanded span."}, {"sha": "3cd1ef5639ef9f2e33f9c06e606ce4701fbf1ec2", "filename": "compiler/rustc_codegen_cranelift/src/driver/aot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Faot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Faot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Faot.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -33,7 +33,7 @@ fn make_module(sess: &Session, isa: Box<dyn TargetIsa>, name: String) -> ObjectM\n     // Unlike cg_llvm, cg_clif defaults to disabling -Zfunction-sections. For cg_llvm binary size\n     // is important, while cg_clif cares more about compilation times. Enabling -Zfunction-sections\n     // can easily double the amount of time necessary to perform linking.\n-    builder.per_function_section(sess.opts.debugging_opts.function_sections.unwrap_or(false));\n+    builder.per_function_section(sess.opts.unstable_opts.function_sections.unwrap_or(false));\n     ObjectModule::new(builder)\n }\n "}, {"sha": "eafae1cdc8af0f2aa3713fd1400e5c7207cf0eee", "filename": "compiler/rustc_codegen_cranelift/src/intrinsics/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -676,7 +676,7 @@ fn codegen_regular_intrinsic_call<'tcx>(\n                 && !layout.might_permit_raw_init(\n                     fx,\n                     InitKind::Zero,\n-                    fx.tcx.sess.opts.debugging_opts.strict_init_checks) {\n+                    fx.tcx.sess.opts.unstable_opts.strict_init_checks) {\n \n                 with_no_trimmed_paths!({\n                     crate::base::codegen_panic(\n@@ -692,7 +692,7 @@ fn codegen_regular_intrinsic_call<'tcx>(\n                 && !layout.might_permit_raw_init(\n                     fx,\n                     InitKind::Uninit,\n-                    fx.tcx.sess.opts.debugging_opts.strict_init_checks) {\n+                    fx.tcx.sess.opts.unstable_opts.strict_init_checks) {\n \n                 with_no_trimmed_paths!({\n                     crate::base::codegen_panic("}, {"sha": "58efb81e80011eb7e59e6400eca6cd6d1750add8", "filename": "compiler/rustc_codegen_gcc/src/allocator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_codegen_gcc%2Fsrc%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_codegen_gcc%2Fsrc%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Fallocator.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -117,7 +117,7 @@ pub(crate) unsafe fn codegen(tcx: TyCtxt<'_>, mods: &mut GccContext, _module_nam\n \n     let name = OomStrategy::SYMBOL.to_string();\n     let global = context.new_global(None, GlobalKind::Exported, i8, name);\n-    let value = tcx.sess.opts.debugging_opts.oom.should_panic();\n+    let value = tcx.sess.opts.unstable_opts.oom.should_panic();\n     let value = context.new_rvalue_from_int(i8, value as i32);\n     global.global_set_initializer_rvalue(value);\n }"}, {"sha": "8f9f6f98faf817dc5a141c44a8e4ed3b1f80c195", "filename": "compiler/rustc_codegen_gcc/src/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_codegen_gcc%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_codegen_gcc%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Fbase.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -96,7 +96,7 @@ pub fn compile_codegen_unit<'tcx>(tcx: TyCtxt<'tcx>, cgu_name: Symbol, supports_\n         // NOTE: Rust relies on LLVM not doing TBAA (https://github.com/rust-lang/unsafe-code-guidelines/issues/292).\n         context.add_command_line_option(\"-fno-strict-aliasing\");\n \n-        if tcx.sess.opts.debugging_opts.function_sections.unwrap_or(tcx.sess.target.function_sections) {\n+        if tcx.sess.opts.unstable_opts.function_sections.unwrap_or(tcx.sess.target.function_sections) {\n             context.add_command_line_option(\"-ffunction-sections\");\n             context.add_command_line_option(\"-fdata-sections\");\n         }"}, {"sha": "d4437bd449d50916271a92483b18820a798ffa56", "filename": "compiler/rustc_codegen_llvm/src/abi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_codegen_llvm%2Fsrc%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_codegen_llvm%2Fsrc%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fabi.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -37,7 +37,7 @@ fn should_use_mutable_noalias(cx: &CodegenCx<'_, '_>) -> bool {\n     // LLVM prior to version 12 had known miscompiles in the presence of\n     // noalias attributes (see #54878), but we don't support earlier\n     // versions at all anymore. We now enable mutable noalias by default.\n-    cx.tcx.sess.opts.debugging_opts.mutable_noalias.unwrap_or(true)\n+    cx.tcx.sess.opts.unstable_opts.mutable_noalias.unwrap_or(true)\n }\n \n const ABI_AFFECTING_ATTRIBUTES: [(ArgAttribute, llvm::AttributeKind); 1] ="}, {"sha": "72961ae888e5f01e1c2a3fe397b06227f5a81c3f", "filename": "compiler/rustc_codegen_llvm/src/allocator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_codegen_llvm%2Fsrc%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_codegen_llvm%2Fsrc%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fallocator.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -145,7 +145,7 @@ pub(crate) unsafe fn codegen(\n     if tcx.sess.target.default_hidden_visibility {\n         llvm::LLVMRustSetVisibility(ll_g, llvm::Visibility::Hidden);\n     }\n-    let val = tcx.sess.opts.debugging_opts.oom.should_panic();\n+    let val = tcx.sess.opts.unstable_opts.oom.should_panic();\n     let llval = llvm::LLVMConstInt(i8, val as u64, False);\n     llvm::LLVMSetInitializer(ll_g, llval);\n "}, {"sha": "32bfa5094c3ebb24b7053a69e28cf18102d89356", "filename": "compiler/rustc_codegen_llvm/src/attributes.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -56,7 +56,7 @@ pub fn sanitize_attrs<'ll>(\n     no_sanitize: SanitizerSet,\n ) -> SmallVec<[&'ll Attribute; 4]> {\n     let mut attrs = SmallVec::new();\n-    let enabled = cx.tcx.sess.opts.debugging_opts.sanitizer - no_sanitize;\n+    let enabled = cx.tcx.sess.opts.unstable_opts.sanitizer - no_sanitize;\n     if enabled.contains(SanitizerSet::ADDRESS) {\n         attrs.push(llvm::AttributeKind::SanitizeAddress.create_attr(cx.llcx));\n     }\n@@ -136,7 +136,7 @@ fn probestack_attr<'ll>(cx: &CodegenCx<'ll, '_>) -> Option<&'ll Attribute> {\n     if cx\n         .sess()\n         .opts\n-        .debugging_opts\n+        .unstable_opts\n         .sanitizer\n         .intersects(SanitizerSet::ADDRESS | SanitizerSet::THREAD)\n     {\n@@ -149,7 +149,7 @@ fn probestack_attr<'ll>(cx: &CodegenCx<'ll, '_>) -> Option<&'ll Attribute> {\n     }\n \n     // probestack doesn't play nice either with gcov profiling.\n-    if cx.sess().opts.debugging_opts.profile {\n+    if cx.sess().opts.unstable_opts.profile {\n         return None;\n     }\n \n@@ -275,7 +275,7 @@ pub fn from_fn_attrs<'ll, 'tcx>(\n         to_add.push(uwtable_attr(cx.llcx));\n     }\n \n-    if cx.sess().opts.debugging_opts.profile_sample_use.is_some() {\n+    if cx.sess().opts.unstable_opts.profile_sample_use.is_some() {\n         to_add.push(llvm::CreateAttrString(cx.llcx, \"use-sample-profile\"));\n     }\n "}, {"sha": "bccc2a995a30cd96e9bbe615301a402969854753", "filename": "compiler/rustc_codegen_llvm/src/back/archive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Farchive.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -351,7 +351,7 @@ fn string_to_io_error(s: String) -> io::Error {\n \n fn find_binutils_dlltool(sess: &Session) -> OsString {\n     assert!(sess.target.options.is_like_windows && !sess.target.options.is_like_msvc);\n-    if let Some(dlltool_path) = &sess.opts.debugging_opts.dlltool {\n+    if let Some(dlltool_path) = &sess.opts.unstable_opts.dlltool {\n         return dlltool_path.clone().into_os_string();\n     }\n "}, {"sha": "2b465ce40e7d41e12bed54b5935d26a0b67a75f4", "filename": "compiler/rustc_codegen_llvm/src/back/write.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -107,7 +107,7 @@ pub fn create_target_machine(tcx: TyCtxt<'_>, mod_name: &str) -> &'static mut ll\n     let split_dwarf_file = if tcx.sess.target_can_use_split_dwarf() {\n         tcx.output_filenames(()).split_dwarf_path(\n             tcx.sess.split_debuginfo(),\n-            tcx.sess.opts.debugging_opts.split_dwarf_kind,\n+            tcx.sess.opts.unstable_opts.split_dwarf_kind,\n             Some(mod_name),\n         )\n     } else {\n@@ -182,9 +182,9 @@ pub fn target_machine_factory(\n     let use_softfp = sess.opts.cg.soft_float;\n \n     let ffunction_sections =\n-        sess.opts.debugging_opts.function_sections.unwrap_or(sess.target.function_sections);\n+        sess.opts.unstable_opts.function_sections.unwrap_or(sess.target.function_sections);\n     let fdata_sections = ffunction_sections;\n-    let funique_section_names = !sess.opts.debugging_opts.no_unique_section_names;\n+    let funique_section_names = !sess.opts.unstable_opts.no_unique_section_names;\n \n     let code_model = to_llvm_code_model(sess.code_model());\n \n@@ -202,15 +202,15 @@ pub fn target_machine_factory(\n     let features = CString::new(target_features.join(\",\")).unwrap();\n     let abi = SmallCStr::new(&sess.target.llvm_abiname);\n     let trap_unreachable =\n-        sess.opts.debugging_opts.trap_unreachable.unwrap_or(sess.target.trap_unreachable);\n-    let emit_stack_size_section = sess.opts.debugging_opts.emit_stack_sizes;\n+        sess.opts.unstable_opts.trap_unreachable.unwrap_or(sess.target.trap_unreachable);\n+    let emit_stack_size_section = sess.opts.unstable_opts.emit_stack_sizes;\n \n     let asm_comments = sess.asm_comments();\n     let relax_elf_relocations =\n-        sess.opts.debugging_opts.relax_elf_relocations.unwrap_or(sess.target.relax_elf_relocations);\n+        sess.opts.unstable_opts.relax_elf_relocations.unwrap_or(sess.target.relax_elf_relocations);\n \n     let use_init_array =\n-        !sess.opts.debugging_opts.use_ctors_section.unwrap_or(sess.target.use_ctors_section);\n+        !sess.opts.unstable_opts.use_ctors_section.unwrap_or(sess.target.use_ctors_section);\n \n     let path_mapping = sess.source_map().path_mapping().clone();\n "}, {"sha": "2b16ae1a88de00106bb8b416e7bf16b0d84a55e1", "filename": "compiler/rustc_codegen_llvm/src/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -64,7 +64,7 @@ pub fn const_alloc_to_llvm<'ll>(cx: &CodegenCx<'ll, '_>, alloc: ConstAllocation<\n             // See https://github.com/rust-lang/rust/issues/84565.\n             1\n         } else {\n-            cx.sess().opts.debugging_opts.uninit_const_chunk_threshold\n+            cx.sess().opts.unstable_opts.uninit_const_chunk_threshold\n         };\n         let allow_uninit_chunks = chunks.clone().take(max.saturating_add(1)).count() <= max;\n "}, {"sha": "5857b83f6c971176a91baf4c3e9f3bb5e67547dc", "filename": "compiler/rustc_codegen_llvm/src/context.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -275,7 +275,7 @@ pub unsafe fn create_module<'ll>(\n         }\n     }\n \n-    if let Some(BranchProtection { bti, pac_ret }) = sess.opts.debugging_opts.branch_protection {\n+    if let Some(BranchProtection { bti, pac_ret }) = sess.opts.unstable_opts.branch_protection {\n         if sess.target.arch != \"aarch64\" {\n             sess.err(\"-Zbranch-protection is only supported on aarch64\");\n         } else {\n@@ -308,15 +308,15 @@ pub unsafe fn create_module<'ll>(\n     }\n \n     // Pass on the control-flow protection flags to LLVM (equivalent to `-fcf-protection` in Clang).\n-    if let CFProtection::Branch | CFProtection::Full = sess.opts.debugging_opts.cf_protection {\n+    if let CFProtection::Branch | CFProtection::Full = sess.opts.unstable_opts.cf_protection {\n         llvm::LLVMRustAddModuleFlag(\n             llmod,\n             llvm::LLVMModFlagBehavior::Override,\n             \"cf-protection-branch\\0\".as_ptr().cast(),\n             1,\n         )\n     }\n-    if let CFProtection::Return | CFProtection::Full = sess.opts.debugging_opts.cf_protection {\n+    if let CFProtection::Return | CFProtection::Full = sess.opts.unstable_opts.cf_protection {\n         llvm::LLVMRustAddModuleFlag(\n             llmod,\n             llvm::LLVMModFlagBehavior::Override,\n@@ -325,7 +325,7 @@ pub unsafe fn create_module<'ll>(\n         )\n     }\n \n-    if sess.opts.debugging_opts.virtual_function_elimination {\n+    if sess.opts.unstable_opts.virtual_function_elimination {\n         llvm::LLVMRustAddModuleFlag(\n             llmod,\n             llvm::LLVMModFlagBehavior::Error,"}, {"sha": "f8bd2d234f32a829a6ad3958a5d5974d2c2f7ef5", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -824,7 +824,7 @@ pub fn build_compile_unit_di_node<'ll, 'tcx>(\n         output_filenames\n             .split_dwarf_path(\n                 tcx.sess.split_debuginfo(),\n-                tcx.sess.opts.debugging_opts.split_dwarf_kind,\n+                tcx.sess.opts.unstable_opts.split_dwarf_kind,\n                 Some(codegen_unit_name),\n             )\n             // We get a path relative to the working directory from split_dwarf_path\n@@ -881,15 +881,15 @@ pub fn build_compile_unit_di_node<'ll, 'tcx>(\n             split_name.len(),\n             kind,\n             0,\n-            tcx.sess.opts.debugging_opts.split_dwarf_inlining,\n+            tcx.sess.opts.unstable_opts.split_dwarf_inlining,\n         );\n \n-        if tcx.sess.opts.debugging_opts.profile {\n+        if tcx.sess.opts.unstable_opts.profile {\n             let cu_desc_metadata =\n                 llvm::LLVMRustMetadataAsValue(debug_context.llcontext, unit_metadata);\n             let default_gcda_path = &output_filenames.with_extension(\"gcda\");\n             let gcda_path =\n-                tcx.sess.opts.debugging_opts.profile_emit.as_ref().unwrap_or(default_gcda_path);\n+                tcx.sess.opts.unstable_opts.profile_emit.as_ref().unwrap_or(default_gcda_path);\n \n             let gcov_cu_info = [\n                 path_to_mdstring(debug_context.llcontext, &output_filenames.with_extension(\"gcno\")),\n@@ -1559,7 +1559,7 @@ pub fn create_vtable_di_node<'ll, 'tcx>(\n ) {\n     // FIXME(flip1995): The virtual function elimination optimization only works with full LTO in\n     // LLVM at the moment.\n-    if cx.sess().opts.debugging_opts.virtual_function_elimination && cx.sess().lto() == Lto::Fat {\n+    if cx.sess().opts.unstable_opts.virtual_function_elimination && cx.sess().lto() == Lto::Fat {\n         vcall_visibility_metadata(cx, ty, poly_trait_ref, vtable);\n     }\n "}, {"sha": "69813792fcf0b26ca373e1a1d14d812943115247", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -104,7 +104,7 @@ impl<'ll, 'tcx> CodegenUnitDebugContext<'ll, 'tcx> {\n             // This can be overridden using --llvm-opts -dwarf-version,N.\n             // Android has the same issue (#22398)\n             let dwarf_version =\n-                sess.opts.debugging_opts.dwarf_version.unwrap_or(sess.target.default_dwarf_version);\n+                sess.opts.unstable_opts.dwarf_version.unwrap_or(sess.target.default_dwarf_version);\n             llvm::LLVMRustAddModuleFlag(\n                 self.llmod,\n                 llvm::LLVMModFlagBehavior::Warning,"}, {"sha": "e67568b7b8ffead33529bdb288de6d628f48dec6", "filename": "compiler/rustc_codegen_llvm/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -355,7 +355,7 @@ impl CodegenBackend for LlvmCodegenBackend {\n             .join(sess);\n \n         sess.time(\"llvm_dump_timing_file\", || {\n-            if sess.opts.debugging_opts.llvm_time_trace {\n+            if sess.opts.unstable_opts.llvm_time_trace {\n                 let file_name = outputs.with_extension(\"llvm_timings.json\");\n                 llvm_util::time_trace_profiler_finish(&file_name);\n             }"}, {"sha": "a0a640473eb516967cd16d3a3d2af2ecc7cb5c8e", "filename": "compiler/rustc_codegen_llvm/src/llvm_util.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -87,7 +87,7 @@ unsafe fn configure_llvm(sess: &Session) {\n             add(\"-debug-pass=Structure\", false);\n         }\n         if sess.target.generate_arange_section\n-            && !sess.opts.debugging_opts.no_generate_arange_section\n+            && !sess.opts.unstable_opts.no_generate_arange_section\n         {\n             add(\"-generate-arange-section\", false);\n         }\n@@ -102,7 +102,7 @@ unsafe fn configure_llvm(sess: &Session) {\n             add(\"-enable-machine-outliner=never\", false);\n         }\n \n-        match sess.opts.debugging_opts.merge_functions.unwrap_or(sess.target.merge_functions) {\n+        match sess.opts.unstable_opts.merge_functions.unwrap_or(sess.target.merge_functions) {\n             MergeFunctions::Disabled | MergeFunctions::Trampolines => {}\n             MergeFunctions::Aliases => {\n                 add(\"-mergefunc-use-aliases\", false);\n@@ -125,19 +125,19 @@ unsafe fn configure_llvm(sess: &Session) {\n         }\n     }\n \n-    if sess.opts.debugging_opts.llvm_time_trace {\n+    if sess.opts.unstable_opts.llvm_time_trace {\n         llvm::LLVMTimeTraceProfilerInitialize();\n     }\n \n     llvm::LLVMInitializePasses();\n \n     // Use the legacy plugin registration if we don't use the new pass manager\n     if !should_use_new_llvm_pass_manager(\n-        &sess.opts.debugging_opts.new_llvm_pass_manager,\n+        &sess.opts.unstable_opts.new_llvm_pass_manager,\n         &sess.target.arch,\n     ) {\n         // Register LLVM plugins by loading them into the compiler process.\n-        for plugin in &sess.opts.debugging_opts.llvm_plugins {\n+        for plugin in &sess.opts.unstable_opts.llvm_plugins {\n             let lib = Library::new(plugin).unwrap_or_else(|e| bug!(\"couldn't load plugin: {}\", e));\n             debug!(\"LLVM plugin loaded successfully {:?} ({})\", lib, plugin);\n \n@@ -541,7 +541,7 @@ fn backend_feature_name(s: &str) -> Option<&str> {\n }\n \n pub fn tune_cpu(sess: &Session) -> Option<&str> {\n-    let name = sess.opts.debugging_opts.tune_cpu.as_ref()?;\n+    let name = sess.opts.unstable_opts.tune_cpu.as_ref()?;\n     Some(handle_native(name))\n }\n "}, {"sha": "94acdea894b62cdd7b10716c751aa855d170b317", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -67,7 +67,7 @@ pub fn link_binary<'a, B: ArchiveBuilder<'a>>(\n     let output_metadata = sess.opts.output_types.contains_key(&OutputType::Metadata);\n     for &crate_type in sess.crate_types().iter() {\n         // Ignore executable crates if we have -Z no-codegen, as they will error.\n-        if (sess.opts.debugging_opts.no_codegen || !sess.opts.output_types.should_codegen())\n+        if (sess.opts.unstable_opts.no_codegen || !sess.opts.output_types.should_codegen())\n             && !output_metadata\n             && crate_type == CrateType::Executable\n         {\n@@ -595,7 +595,7 @@ fn link_dwarf_object<'a>(\n         let mut package = thorin::DwarfPackage::new(&thorin_sess);\n \n         // Input objs contain .o/.dwo files from the current crate.\n-        match sess.opts.debugging_opts.split_dwarf_kind {\n+        match sess.opts.unstable_opts.split_dwarf_kind {\n             SplitDwarfKind::Single => {\n                 for input_obj in cg_results.modules.iter().filter_map(|m| m.object.as_ref()) {\n                     package.add_input_object(input_obj)?;\n@@ -1022,7 +1022,7 @@ fn link_natively<'a, B: ArchiveBuilder<'a>>(\n \n // Temporarily support both -Z strip and -C strip\n fn strip_value(sess: &Session) -> Strip {\n-    match (sess.opts.debugging_opts.strip, sess.opts.cg.strip) {\n+    match (sess.opts.unstable_opts.strip, sess.opts.cg.strip) {\n         (s, Strip::None) => s,\n         (_, s) => s,\n     }\n@@ -1074,7 +1074,7 @@ fn add_sanitizer_libraries(sess: &Session, crate_type: CrateType, linker: &mut d\n         return;\n     }\n \n-    let sanitizer = sess.opts.debugging_opts.sanitizer;\n+    let sanitizer = sess.opts.unstable_opts.sanitizer;\n     if sanitizer.contains(SanitizerSet::ADDRESS) {\n         link_sanitizer_runtime(sess, linker, \"asan\");\n     }\n@@ -1253,7 +1253,7 @@ fn preserve_objects_for_their_debuginfo(sess: &Session) -> (bool, bool) {\n         return (false, false);\n     }\n \n-    match (sess.split_debuginfo(), sess.opts.debugging_opts.split_dwarf_kind) {\n+    match (sess.split_debuginfo(), sess.opts.unstable_opts.split_dwarf_kind) {\n         // If there is no split debuginfo then do not preserve objects.\n         (SplitDebuginfo::Off, _) => (false, false),\n         // If there is packed split debuginfo, then the debuginfo in the objects\n@@ -1601,7 +1601,7 @@ fn add_pre_link_args(cmd: &mut dyn Linker, sess: &Session, flavor: LinkerFlavor)\n     if let Some(args) = sess.target.pre_link_args.get(&flavor) {\n         cmd.args(args.iter().map(Deref::deref));\n     }\n-    cmd.args(&sess.opts.debugging_opts.pre_link_args);\n+    cmd.args(&sess.opts.unstable_opts.pre_link_args);\n }\n \n /// Add a link script embedded in the target, if applicable.\n@@ -1809,7 +1809,7 @@ fn add_library_search_dirs(cmd: &mut dyn Linker, sess: &Session, self_contained:\n /// Add options making relocation sections in the produced ELF files read-only\n /// and suppressing lazy binding.\n fn add_relro_args(cmd: &mut dyn Linker, sess: &Session) {\n-    match sess.opts.debugging_opts.relro_level.unwrap_or(sess.target.relro_level) {\n+    match sess.opts.unstable_opts.relro_level.unwrap_or(sess.target.relro_level) {\n         RelroLevel::Full => cmd.full_relro(),\n         RelroLevel::Partial => cmd.partial_relro(),\n         RelroLevel::Off => cmd.no_relro(),\n@@ -1957,7 +1957,7 @@ fn linker_with_args<'a, B: ArchiveBuilder<'a>>(\n     // (or alternatively link all native libraries after their respective crates).\n     // This change is somewhat breaking in practice due to local static libraries being linked\n     // as whole-archive (#85144), so removing whole-archive may be a pre-requisite.\n-    if sess.opts.debugging_opts.link_native_libraries {\n+    if sess.opts.unstable_opts.link_native_libraries {\n         add_local_native_libraries(cmd, sess, codegen_results);\n     }\n \n@@ -1969,7 +1969,7 @@ fn linker_with_args<'a, B: ArchiveBuilder<'a>>(\n     // If -Zlink-native-libraries=false is set, then the assumption is that an\n     // external build system already has the native dependencies defined, and it\n     // will provide them to the linker itself.\n-    if sess.opts.debugging_opts.link_native_libraries {\n+    if sess.opts.unstable_opts.link_native_libraries {\n         add_upstream_native_libraries(cmd, sess, codegen_results);\n     }\n \n@@ -2037,7 +2037,7 @@ fn add_order_independent_options(\n     add_link_script(cmd, sess, tmpdir, crate_type);\n \n     if sess.target.os == \"fuchsia\" && crate_type == CrateType::Executable {\n-        let prefix = if sess.opts.debugging_opts.sanitizer.contains(SanitizerSet::ADDRESS) {\n+        let prefix = if sess.opts.unstable_opts.sanitizer.contains(SanitizerSet::ADDRESS) {\n             \"asan/\"\n         } else {\n             \"\"\n@@ -2362,7 +2362,7 @@ fn add_upstream_rust_crates<'a, B: ArchiveBuilder<'a>>(\n                 // If -Zlink-native-libraries=false is set, then the assumption is that an\n                 // external build system already has the native dependencies defined, and it\n                 // will provide them to the linker itself.\n-                if sess.opts.debugging_opts.link_native_libraries {\n+                if sess.opts.unstable_opts.link_native_libraries {\n                     let mut last = (None, NativeLibKind::Unspecified, None);\n                     for lib in &codegen_results.crate_info.native_libraries[&cnum] {\n                         let Some(name) = lib.name else {\n@@ -2709,7 +2709,7 @@ fn get_apple_sdk_root(sdk_name: &str) -> Result<String, String> {\n }\n \n fn add_gcc_ld_path(cmd: &mut dyn Linker, sess: &Session, flavor: LinkerFlavor) {\n-    if let Some(ld_impl) = sess.opts.debugging_opts.gcc_ld {\n+    if let Some(ld_impl) = sess.opts.unstable_opts.gcc_ld {\n         if let LinkerFlavor::Gcc = flavor {\n             match ld_impl {\n                 LdImpl::Lld => {"}, {"sha": "d4a9db4af23a2461264def0acc66108456054d22", "filename": "compiler/rustc_codegen_ssa/src/back/linker.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -303,7 +303,7 @@ impl<'a> GccLinker<'a> {\n             config::OptLevel::Aggressive => \"O3\",\n         };\n \n-        if let Some(path) = &self.sess.opts.debugging_opts.profile_sample_use {\n+        if let Some(path) = &self.sess.opts.unstable_opts.profile_sample_use {\n             self.linker_arg(&format!(\"-plugin-opt=sample-profile={}\", path.display()));\n         };\n         self.linker_args(&[\n@@ -325,7 +325,7 @@ impl<'a> GccLinker<'a> {\n             // purely to support rustbuild right now, we should get a more\n             // principled solution at some point to force the compiler to pass\n             // the right `-Wl,-install_name` with an `@rpath` in it.\n-            if self.sess.opts.cg.rpath || self.sess.opts.debugging_opts.osx_rpath_install_name {\n+            if self.sess.opts.cg.rpath || self.sess.opts.unstable_opts.osx_rpath_install_name {\n                 let mut rpath = OsString::from(\"@rpath/\");\n                 rpath.push(out_filename.file_name().unwrap());\n                 self.linker_args(&[OsString::from(\"-install_name\"), rpath]);"}, {"sha": "d1a267f7643f5dc73808683564d8297cb9b0b044", "filename": "compiler/rustc_codegen_ssa/src/back/symbol_export.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -232,15 +232,15 @@ fn exported_symbols_provider_local<'tcx>(\n         }));\n     }\n \n-    if tcx.sess.opts.debugging_opts.sanitizer.contains(SanitizerSet::MEMORY) {\n+    if tcx.sess.opts.unstable_opts.sanitizer.contains(SanitizerSet::MEMORY) {\n         let mut msan_weak_symbols = Vec::new();\n \n         // Similar to profiling, preserve weak msan symbol during LTO.\n-        if tcx.sess.opts.debugging_opts.sanitizer_recover.contains(SanitizerSet::MEMORY) {\n+        if tcx.sess.opts.unstable_opts.sanitizer_recover.contains(SanitizerSet::MEMORY) {\n             msan_weak_symbols.push(\"__msan_keep_going\");\n         }\n \n-        if tcx.sess.opts.debugging_opts.sanitizer_memory_track_origins != 0 {\n+        if tcx.sess.opts.unstable_opts.sanitizer_memory_track_origins != 0 {\n             msan_weak_symbols.push(\"__msan_track_origins\");\n         }\n "}, {"sha": "c2ac21eec6723d3fa89926b93f2dd225866388d2", "filename": "compiler/rustc_codegen_ssa/src/back/write.rs", "status": "modified", "additions": 21, "deletions": 22, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -179,24 +179,24 @@ impl ModuleConfig {\n                 SwitchWithOptPath::Disabled\n             ),\n             pgo_use: if_regular!(sess.opts.cg.profile_use.clone(), None),\n-            pgo_sample_use: if_regular!(sess.opts.debugging_opts.profile_sample_use.clone(), None),\n-            debug_info_for_profiling: sess.opts.debugging_opts.debug_info_for_profiling,\n+            pgo_sample_use: if_regular!(sess.opts.unstable_opts.profile_sample_use.clone(), None),\n+            debug_info_for_profiling: sess.opts.unstable_opts.debug_info_for_profiling,\n             instrument_coverage: if_regular!(sess.instrument_coverage(), false),\n             instrument_gcov: if_regular!(\n                 // compiler_builtins overrides the codegen-units settings,\n                 // which is incompatible with -Zprofile which requires that\n                 // only a single codegen unit is used per crate.\n-                sess.opts.debugging_opts.profile && !is_compiler_builtins,\n+                sess.opts.unstable_opts.profile && !is_compiler_builtins,\n                 false\n             ),\n \n-            sanitizer: if_regular!(sess.opts.debugging_opts.sanitizer, SanitizerSet::empty()),\n+            sanitizer: if_regular!(sess.opts.unstable_opts.sanitizer, SanitizerSet::empty()),\n             sanitizer_recover: if_regular!(\n-                sess.opts.debugging_opts.sanitizer_recover,\n+                sess.opts.unstable_opts.sanitizer_recover,\n                 SanitizerSet::empty()\n             ),\n             sanitizer_memory_track_origins: if_regular!(\n-                sess.opts.debugging_opts.sanitizer_memory_track_origins,\n+                sess.opts.unstable_opts.sanitizer_memory_track_origins,\n                 0\n             ),\n \n@@ -247,7 +247,7 @@ impl ModuleConfig {\n             // O2 and O3) since it can be useful for reducing code size.\n             merge_functions: match sess\n                 .opts\n-                .debugging_opts\n+                .unstable_opts\n                 .merge_functions\n                 .unwrap_or(sess.target.merge_functions)\n             {\n@@ -259,9 +259,9 @@ impl ModuleConfig {\n             },\n \n             inline_threshold: sess.opts.cg.inline_threshold,\n-            new_llvm_pass_manager: sess.opts.debugging_opts.new_llvm_pass_manager,\n+            new_llvm_pass_manager: sess.opts.unstable_opts.new_llvm_pass_manager,\n             emit_lifetime_markers: sess.emit_lifetime_markers(),\n-            llvm_plugins: if_regular!(sess.opts.debugging_opts.llvm_plugins.clone(), vec![]),\n+            llvm_plugins: if_regular!(sess.opts.unstable_opts.llvm_plugins.clone(), vec![]),\n         }\n     }\n \n@@ -926,7 +926,7 @@ fn finish_intra_module_work<B: ExtraBackendMethods>(\n ) -> Result<WorkItemResult<B>, FatalError> {\n     let diag_handler = cgcx.create_diag_handler();\n \n-    if !cgcx.opts.debugging_opts.combine_cgu\n+    if !cgcx.opts.unstable_opts.combine_cgu\n         || module.kind == ModuleKind::Metadata\n         || module.kind == ModuleKind::Allocator\n     {\n@@ -1048,14 +1048,13 @@ fn start_executing_work<B: ExtraBackendMethods>(\n         each_linked_rlib_for_lto.push((cnum, path.to_path_buf()));\n     }));\n \n-    let ol = if tcx.sess.opts.debugging_opts.no_codegen\n-        || !tcx.sess.opts.output_types.should_codegen()\n-    {\n-        // If we know that we won\u2019t be doing codegen, create target machines without optimisation.\n-        config::OptLevel::No\n-    } else {\n-        tcx.backend_optimization_level(())\n-    };\n+    let ol =\n+        if tcx.sess.opts.unstable_opts.no_codegen || !tcx.sess.opts.output_types.should_codegen() {\n+            // If we know that we won\u2019t be doing codegen, create target machines without optimisation.\n+            config::OptLevel::No\n+        } else {\n+            tcx.backend_optimization_level(())\n+        };\n     let backend_features = tcx.global_backend_features(());\n     let cgcx = CodegenContext::<B> {\n         backend: backend.clone(),\n@@ -1064,7 +1063,7 @@ fn start_executing_work<B: ExtraBackendMethods>(\n         lto: sess.lto(),\n         fewer_names: sess.fewer_names(),\n         save_temps: sess.opts.cg.save_temps,\n-        time_trace: sess.opts.debugging_opts.llvm_time_trace,\n+        time_trace: sess.opts.unstable_opts.llvm_time_trace,\n         opts: Arc::new(sess.opts.clone()),\n         prof: sess.prof.clone(),\n         exported_symbols,\n@@ -1087,7 +1086,7 @@ fn start_executing_work<B: ExtraBackendMethods>(\n         target_arch: tcx.sess.target.arch.to_string(),\n         debuginfo: tcx.sess.opts.debuginfo,\n         split_debuginfo: tcx.sess.split_debuginfo(),\n-        split_dwarf_kind: tcx.sess.opts.debugging_opts.split_dwarf_kind,\n+        split_dwarf_kind: tcx.sess.opts.unstable_opts.split_dwarf_kind,\n     };\n \n     // This is the \"main loop\" of parallel work happening for parallel codegen.\n@@ -1346,7 +1345,7 @@ fn start_executing_work<B: ExtraBackendMethods>(\n                             .binary_search_by_key(&cost, |&(_, cost)| cost)\n                             .unwrap_or_else(|e| e);\n                         work_items.insert(insertion_index, (work, cost));\n-                        if !cgcx.opts.debugging_opts.no_parallel_llvm {\n+                        if !cgcx.opts.unstable_opts.no_parallel_llvm {\n                             helper.request_token();\n                         }\n                     }\n@@ -1466,7 +1465,7 @@ fn start_executing_work<B: ExtraBackendMethods>(\n                     };\n                     work_items.insert(insertion_index, (llvm_work_item, cost));\n \n-                    if !cgcx.opts.debugging_opts.no_parallel_llvm {\n+                    if !cgcx.opts.unstable_opts.no_parallel_llvm {\n                         helper.request_token();\n                     }\n                     assert!(!codegen_aborted);"}, {"sha": "7def30af2b309a719174bcb3e99eb47348dea18d", "filename": "compiler/rustc_codegen_ssa/src/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -521,7 +521,7 @@ pub fn codegen_crate<B: ExtraBackendMethods>(\n     need_metadata_module: bool,\n ) -> OngoingCodegen<B> {\n     // Skip crate items and just output metadata in -Z no-codegen mode.\n-    if tcx.sess.opts.debugging_opts.no_codegen || !tcx.sess.opts.output_types.should_codegen() {\n+    if tcx.sess.opts.unstable_opts.no_codegen || !tcx.sess.opts.output_types.should_codegen() {\n         let ongoing_codegen = start_async_codegen(backend, tcx, target_cpu, metadata, None, 1);\n \n         ongoing_codegen.codegen_finished(tcx);"}, {"sha": "df42d80456690f8ff5d0b9556c41c120c10c99dd", "filename": "compiler/rustc_codegen_ssa/src/meth.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmeth.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -25,7 +25,7 @@ impl<'a, 'tcx> VirtualIndex {\n         let llty = bx.fn_ptr_backend_type(fn_abi);\n         let llvtable = bx.pointercast(llvtable, bx.type_ptr_to(llty));\n \n-        if bx.cx().sess().opts.debugging_opts.virtual_function_elimination\n+        if bx.cx().sess().opts.unstable_opts.virtual_function_elimination\n             && bx.cx().sess().lto() == Lto::Fat\n         {\n             let typeid ="}, {"sha": "745da821c9d76ac731545973606c97bf406f3793", "filename": "compiler/rustc_codegen_ssa/src/mir/block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -687,7 +687,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             source_info,\n             target,\n             cleanup,\n-            self.cx.tcx().sess.opts.debugging_opts.strict_init_checks,\n+            self.cx.tcx().sess.opts.unstable_opts.strict_init_checks,\n         ) {\n             return;\n         }"}, {"sha": "8c3186efc63023c9eebeb3f0a7d5a890093ae9e3", "filename": "compiler/rustc_codegen_ssa/src/mir/debuginfo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fdebuginfo.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -101,7 +101,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             return span;\n         }\n \n-        if span.from_expansion() && !self.cx.sess().opts.debugging_opts.debug_macros {\n+        if span.from_expansion() && !self.cx.sess().opts.unstable_opts.debug_macros {\n             // Walk up the macro expansion chain until we reach a non-expanded span.\n             // We also stop at the function body level because no line stepping can occur\n             // at the level above that."}, {"sha": "1bbe10141fc7e527b92e006b059ad6a1704c30a5", "filename": "compiler/rustc_codegen_ssa/src/traits/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbuilder.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -221,7 +221,7 @@ pub trait BuilderMethods<'a, 'tcx>:\n         assert!(matches!(self.cx().type_kind(float_ty), TypeKind::Float | TypeKind::Double));\n         assert_eq!(self.cx().type_kind(int_ty), TypeKind::Integer);\n \n-        if let Some(false) = self.cx().sess().opts.debugging_opts.saturating_float_casts {\n+        if let Some(false) = self.cx().sess().opts.unstable_opts.saturating_float_casts {\n             return if signed { self.fptosi(x, dest_ty) } else { self.fptoui(x, dest_ty) };\n         }\n "}, {"sha": "e2a8a9891f72fca419e2d1b5c663ddb68020a3da", "filename": "compiler/rustc_const_eval/src/interpret/intrinsics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -417,7 +417,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                     && !layout.might_permit_raw_init(\n                         self,\n                         InitKind::Zero,\n-                        self.tcx.sess.opts.debugging_opts.strict_init_checks,\n+                        self.tcx.sess.opts.unstable_opts.strict_init_checks,\n                     )\n                 {\n                     M::abort(\n@@ -432,7 +432,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                     && !layout.might_permit_raw_init(\n                         self,\n                         InitKind::Uninit,\n-                        self.tcx.sess.opts.debugging_opts.strict_init_checks,\n+                        self.tcx.sess.opts.unstable_opts.strict_init_checks,\n                     )\n                 {\n                     M::abort("}, {"sha": "14fde2c305e96f07249d8c59982e7c1efb8f8d33", "filename": "compiler/rustc_const_eval/src/interpret/intrinsics/caller_location.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics%2Fcaller_location.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics%2Fcaller_location.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics%2Fcaller_location.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -80,7 +80,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         line: u32,\n         col: u32,\n     ) -> MPlaceTy<'tcx, M::PointerTag> {\n-        let loc_details = &self.tcx.sess.opts.debugging_opts.location_detail;\n+        let loc_details = &self.tcx.sess.opts.unstable_opts.location_detail;\n         let file = if loc_details.file {\n             self.allocate_str(filename.as_str(), MemoryKind::CallerLocation, Mutability::Not)\n         } else {"}, {"sha": "88999e3b47b5e94de4e89ec25a3abfdb0b1e5925", "filename": "compiler/rustc_const_eval/src/interpret/operator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperator.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -41,7 +41,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             let pair = Immediate::ScalarPair(val.into(), Scalar::from_bool(overflowed).into());\n             self.write_immediate(pair, dest)?;\n         } else {\n-            assert!(self.tcx.sess.opts.debugging_opts.randomize_layout);\n+            assert!(self.tcx.sess.opts.unstable_opts.randomize_layout);\n             // With randomized layout, `(int, bool)` might cease to be a `ScalarPair`, so we have to\n             // do a component-wise write here. This code path is slower than the above because\n             // `place_field` will have to `force_allocate` locals here."}, {"sha": "628298df4738560af218809c0cba1f6770768344", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -312,7 +312,7 @@ impl<'mir, 'tcx> Checker<'mir, 'tcx> {\n             Status::Forbidden => None,\n         };\n \n-        if self.tcx.sess.opts.debugging_opts.unleash_the_miri_inside_of_you {\n+        if self.tcx.sess.opts.unstable_opts.unleash_the_miri_inside_of_you {\n             self.tcx.sess.miri_unleashed_feature(span, gate);\n             return;\n         }"}, {"sha": "15e820f2d19418ed3eb30c61609556661564e690", "filename": "compiler/rustc_const_eval/src/transform/validate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -223,7 +223,7 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n \n     fn visit_operand(&mut self, operand: &Operand<'tcx>, location: Location) {\n         // This check is somewhat expensive, so only run it when -Zvalidate-mir is passed.\n-        if self.tcx.sess.opts.debugging_opts.validate_mir && self.mir_phase < MirPhase::DropsLowered\n+        if self.tcx.sess.opts.unstable_opts.validate_mir && self.mir_phase < MirPhase::DropsLowered\n         {\n             // `Operand::Copy` is only supposed to be used with `Copy` types.\n             if let Operand::Copy(place) = operand {"}, {"sha": "f5b059793cf4b4b32850028e6c8f9be439714b58", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -29,7 +29,7 @@ use rustc_log::stdout_isatty;\n use rustc_metadata::locator;\n use rustc_save_analysis as save;\n use rustc_save_analysis::DumpHandler;\n-use rustc_session::config::{nightly_options, CG_OPTIONS, DB_OPTIONS};\n+use rustc_session::config::{nightly_options, CG_OPTIONS, Z_OPTIONS};\n use rustc_session::config::{ErrorOutputType, Input, OutputType, PrintRequest, TrimmedDefPaths};\n use rustc_session::cstore::MetadataLoader;\n use rustc_session::getopts;\n@@ -124,7 +124,7 @@ impl Callbacks for TimePassesCallbacks {\n         // If a --prints=... option has been given, we don't print the \"total\"\n         // time because it will mess up the --prints output. See #64339.\n         self.time_passes = config.opts.prints.is_empty()\n-            && (config.opts.debugging_opts.time_passes || config.opts.debugging_opts.time);\n+            && (config.opts.unstable_opts.time_passes || config.opts.unstable_opts.time);\n         config.opts.trimmed_def_paths = TrimmedDefPaths::GoodPath;\n     }\n }\n@@ -248,7 +248,7 @@ fn run_compiler(\n                     let sopts = &compiler.session().opts;\n                     if sopts.describe_lints {\n                         let mut lint_store = rustc_lint::new_lint_store(\n-                            sopts.debugging_opts.no_interleave_lints,\n+                            sopts.unstable_opts.no_interleave_lints,\n                             compiler.session().unstable_options(),\n                         );\n                         let registered_lints =\n@@ -342,7 +342,7 @@ fn run_compiler(\n                 return early_exit();\n             }\n \n-            if sess.opts.debugging_opts.parse_only || sess.opts.debugging_opts.show_span.is_some() {\n+            if sess.opts.unstable_opts.parse_only || sess.opts.unstable_opts.show_span.is_some() {\n                 return early_exit();\n             }\n \n@@ -371,13 +371,13 @@ fn run_compiler(\n \n             queries.global_ctxt()?;\n \n-            if sess.opts.debugging_opts.no_analysis {\n+            if sess.opts.unstable_opts.no_analysis {\n                 return early_exit();\n             }\n \n             queries.global_ctxt()?.peek_mut().enter(|tcx| {\n                 let result = tcx.analysis(());\n-                if sess.opts.debugging_opts.save_analysis {\n+                if sess.opts.unstable_opts.save_analysis {\n                     let crate_name = queries.crate_name()?.peek().clone();\n                     sess.time(\"save_analysis\", || {\n                         save::process_crate(\n@@ -401,7 +401,7 @@ fn run_compiler(\n \n             queries.ongoing_codegen()?;\n \n-            if sess.opts.debugging_opts.print_type_sizes {\n+            if sess.opts.unstable_opts.print_type_sizes {\n                 sess.code_stats.print_type_sizes();\n             }\n \n@@ -414,14 +414,14 @@ fn run_compiler(\n             linker.link()?\n         }\n \n-        if sess.opts.debugging_opts.perf_stats {\n+        if sess.opts.unstable_opts.perf_stats {\n             sess.print_perf_stats();\n         }\n \n-        if sess.opts.debugging_opts.print_fuel.is_some() {\n+        if sess.opts.unstable_opts.print_fuel.is_some() {\n             eprintln!(\n                 \"Fuel used by {}: {}\",\n-                sess.opts.debugging_opts.print_fuel.as_ref().unwrap(),\n+                sess.opts.unstable_opts.print_fuel.as_ref().unwrap(),\n                 sess.print_fuel.load(SeqCst)\n             );\n         }\n@@ -576,7 +576,7 @@ fn show_content_with_pager(content: &str) {\n }\n \n pub fn try_process_rlink(sess: &Session, compiler: &interface::Compiler) -> Compilation {\n-    if sess.opts.debugging_opts.link_only {\n+    if sess.opts.unstable_opts.link_only {\n         if let Input::File(file) = compiler.input() {\n             // FIXME: #![crate_type] and #![crate_name] support not implemented yet\n             sess.init_crate_types(collect_crate_types(sess, &[]));\n@@ -606,7 +606,7 @@ pub fn list_metadata(\n     metadata_loader: &dyn MetadataLoader,\n     input: &Input,\n ) -> Compilation {\n-    if sess.opts.debugging_opts.ls {\n+    if sess.opts.unstable_opts.ls {\n         match *input {\n             Input::File(ref ifile) => {\n                 let path = &(*ifile);\n@@ -928,7 +928,7 @@ Available lint options:\n \n fn describe_debug_flags() {\n     println!(\"\\nAvailable options:\\n\");\n-    print_flag_list(\"-Z\", config::DB_OPTIONS);\n+    print_flag_list(\"-Z\", config::Z_OPTIONS);\n }\n \n fn describe_codegen_flags() {\n@@ -1000,7 +1000,7 @@ pub fn handle_options(args: &[String]) -> Option<getopts::Matches> {\n             getopts::Fail::UnrecognizedOption(ref opt) => CG_OPTIONS\n                 .iter()\n                 .map(|&(name, ..)| ('C', name))\n-                .chain(DB_OPTIONS.iter().map(|&(name, ..)| ('Z', name)))\n+                .chain(Z_OPTIONS.iter().map(|&(name, ..)| ('Z', name)))\n                 .find(|&(_, name)| *opt == name.replace('_', \"-\"))\n                 .map(|(flag, _)| format!(\"{}. Did you mean `-{} {}`?\", e, flag, opt)),\n             _ => None,"}, {"sha": "2b941ec68098a0a76836886948c110c09d4745b0", "filename": "compiler/rustc_expand/src/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -171,7 +171,7 @@ fn get_features(\n                 continue;\n             }\n \n-            if let Some(allowed) = sess.opts.debugging_opts.allow_features.as_ref() {\n+            if let Some(allowed) = sess.opts.unstable_opts.allow_features.as_ref() {\n                 if allowed.iter().all(|f| name.as_str() != f) {\n                     struct_span_err!(\n                         span_handler,"}, {"sha": "93eeca5b2892ba19b68ac230cdc12d1f3e44252a", "filename": "compiler/rustc_expand/src/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -564,7 +564,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 .resolver\n                 .visit_ast_fragment_with_placeholders(self.cx.current_expansion.id, &fragment);\n \n-            if self.cx.sess.opts.debugging_opts.incremental_relative_spans {\n+            if self.cx.sess.opts.unstable_opts.incremental_relative_spans {\n                 for (invoc, _) in invocations.iter_mut() {\n                     let expn_id = invoc.expansion_data.id;\n                     let parent_def = self.cx.resolver.invocation_parent(expn_id);"}, {"sha": "69e482ce854c063a2b300c7c7068531c9aca0ff1", "filename": "compiler/rustc_incremental/src/assert_dep_graph.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_incremental%2Fsrc%2Fassert_dep_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_incremental%2Fsrc%2Fassert_dep_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fassert_dep_graph.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -55,11 +55,11 @@ use std::io::{BufWriter, Write};\n #[allow(missing_docs)]\n pub fn assert_dep_graph(tcx: TyCtxt<'_>) {\n     tcx.dep_graph.with_ignore(|| {\n-        if tcx.sess.opts.debugging_opts.dump_dep_graph {\n+        if tcx.sess.opts.unstable_opts.dump_dep_graph {\n             tcx.dep_graph.with_query(dump_graph);\n         }\n \n-        if !tcx.sess.opts.debugging_opts.query_dep_graph {\n+        if !tcx.sess.opts.unstable_opts.query_dep_graph {\n             return;\n         }\n \n@@ -81,7 +81,7 @@ pub fn assert_dep_graph(tcx: TyCtxt<'_>) {\n \n         if !if_this_changed.is_empty() || !then_this_would_need.is_empty() {\n             assert!(\n-                tcx.sess.opts.debugging_opts.query_dep_graph,\n+                tcx.sess.opts.unstable_opts.query_dep_graph,\n                 \"cannot use the `#[{}]` or `#[{}]` annotations \\\n                     without supplying `-Z query-dep-graph`\",\n                 sym::rustc_if_this_changed,"}, {"sha": "00aefac645f1815533505bc4a59f9d29f6aa561a", "filename": "compiler/rustc_incremental/src/assert_module_sources.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_incremental%2Fsrc%2Fassert_module_sources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_incremental%2Fsrc%2Fassert_module_sources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fassert_module_sources.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -76,7 +76,7 @@ impl<'tcx> AssertModuleSource<'tcx> {\n             return;\n         };\n \n-        if !self.tcx.sess.opts.debugging_opts.query_dep_graph {\n+        if !self.tcx.sess.opts.unstable_opts.query_dep_graph {\n             self.tcx.sess.span_fatal(\n                 attr.span,\n                 \"found CGU-reuse attribute but `-Zquery-dep-graph` was not specified\","}, {"sha": "35a278e6c92abb87b1faecffad452ba33347e63e", "filename": "compiler/rustc_incremental/src/persist/dirty_clean.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fdirty_clean.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -134,7 +134,7 @@ struct Assertion {\n }\n \n pub fn check_dirty_clean_annotations(tcx: TyCtxt<'_>) {\n-    if !tcx.sess.opts.debugging_opts.query_dep_graph {\n+    if !tcx.sess.opts.unstable_opts.query_dep_graph {\n         return;\n     }\n "}, {"sha": "25c1b2e1c4387167f575904a7c227140513e9f84", "filename": "compiler/rustc_incremental/src/persist/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffs.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -447,7 +447,7 @@ fn copy_files(sess: &Session, target_dir: &Path, source_dir: &Path) -> Result<bo\n         }\n     }\n \n-    if sess.opts.debugging_opts.incremental_info {\n+    if sess.opts.unstable_opts.incremental_info {\n         eprintln!(\n             \"[incremental] session directory: \\\n                   {} files hard-linked\","}, {"sha": "1c5fd91690230f810a96f88f61e3fc3e98700d2b", "filename": "compiler/rustc_incremental/src/persist/load.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fload.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -141,7 +141,7 @@ pub fn load_dep_graph(sess: &Session) -> DepGraphFuture {\n     // Calling `sess.incr_comp_session_dir()` will panic if `sess.opts.incremental.is_none()`.\n     // Fortunately, we just checked that this isn't the case.\n     let path = dep_graph_path(&sess);\n-    let report_incremental_info = sess.opts.debugging_opts.incremental_info;\n+    let report_incremental_info = sess.opts.unstable_opts.incremental_info;\n     let expected_hash = sess.opts.dep_tracking_hash(false);\n \n     let mut prev_work_products = FxHashMap::default();\n@@ -163,7 +163,7 @@ pub fn load_dep_graph(sess: &Session) -> DepGraphFuture {\n             for swp in work_products {\n                 let all_files_exist = swp.work_product.saved_files.iter().all(|(_, path)| {\n                     let exists = in_incr_comp_dir_sess(sess, path).exists();\n-                    if !exists && sess.opts.debugging_opts.incremental_info {\n+                    if !exists && sess.opts.unstable_opts.incremental_info {\n                         eprintln!(\"incremental: could not find file for work product: {path}\",);\n                     }\n                     exists\n@@ -225,7 +225,7 @@ pub fn load_query_result_cache<'a, C: OnDiskCache<'a>>(sess: &'a Session) -> Opt\n     let _prof_timer = sess.prof.generic_activity(\"incr_comp_load_query_result_cache\");\n \n     match load_data(\n-        sess.opts.debugging_opts.incremental_info,\n+        sess.opts.unstable_opts.incremental_info,\n         &query_cache_path(sess),\n         sess.is_nightly_build(),\n     ) {"}, {"sha": "710350314975c8a2717bc4c7bfd57a15584bc01f", "filename": "compiler/rustc_incremental/src/persist/save.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fsave.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fsave.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fsave.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -39,7 +39,7 @@ pub fn save_dep_graph(tcx: TyCtxt<'_>) {\n         sess.time(\"assert_dep_graph\", || crate::assert_dep_graph(tcx));\n         sess.time(\"check_dirty_clean\", || dirty_clean::check_dirty_clean_annotations(tcx));\n \n-        if sess.opts.debugging_opts.incremental_info {\n+        if sess.opts.unstable_opts.incremental_info {\n             tcx.dep_graph.print_incremental_info()\n         }\n \n@@ -182,7 +182,7 @@ pub fn build_dep_graph(\n         prev_graph,\n         prev_work_products,\n         encoder,\n-        sess.opts.debugging_opts.query_dep_graph,\n-        sess.opts.debugging_opts.incremental_info,\n+        sess.opts.unstable_opts.query_dep_graph,\n+        sess.opts.unstable_opts.incremental_info,\n     ))\n }"}, {"sha": "e543ae1fcdab15b965ef6ac9e22f09c1b0b444f3", "filename": "compiler/rustc_infer/src/infer/higher_ranked/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -122,7 +122,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         // subtyping errors that it would have caught will now be\n         // caught later on, during region checking. However, we\n         // continue to use it for a transition period.\n-        if self.tcx.sess.opts.debugging_opts.no_leak_check || self.skip_leak_check.get() {\n+        if self.tcx.sess.opts.unstable_opts.no_leak_check || self.skip_leak_check.get() {\n             return Ok(());\n         }\n "}, {"sha": "6c7ddb4531ef85bd842c7feb45d59d3b7bae20c0", "filename": "compiler/rustc_interface/src/interface.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Finterface.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -300,7 +300,7 @@ pub fn create_compiler_and_run<R>(config: Config, f: impl FnOnce(&Compiler) -> R\n         );\n     }\n \n-    let temps_dir = sess.opts.debugging_opts.temps_dir.as_ref().map(|o| PathBuf::from(&o));\n+    let temps_dir = sess.opts.unstable_opts.temps_dir.as_ref().map(|o| PathBuf::from(&o));\n \n     let compiler = Compiler {\n         sess,\n@@ -333,7 +333,7 @@ pub fn run_compiler<R: Send>(config: Config, f: impl FnOnce(&Compiler) -> R + Se\n     tracing::trace!(\"run_compiler\");\n     util::run_in_thread_pool_with_globals(\n         config.opts.edition,\n-        config.opts.debugging_opts.threads,\n+        config.opts.unstable_opts.threads,\n         || create_compiler_and_run(config, f),\n     )\n }"}, {"sha": "97b8139f9da6c5ce4647737e2834ae1c6a563d60", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -58,16 +58,16 @@ pub fn parse<'a>(sess: &'a Session, input: &Input) -> PResult<'a, ast::Crate> {\n         }\n     })?;\n \n-    if sess.opts.debugging_opts.input_stats {\n+    if sess.opts.unstable_opts.input_stats {\n         eprintln!(\"Lines of code:             {}\", sess.source_map().count_lines());\n         eprintln!(\"Pre-expansion node count:  {}\", count_nodes(&krate));\n     }\n \n-    if let Some(ref s) = sess.opts.debugging_opts.show_span {\n+    if let Some(ref s) = sess.opts.unstable_opts.show_span {\n         rustc_ast_passes::show_span::run(sess.diagnostic(), s, &krate);\n     }\n \n-    if sess.opts.debugging_opts.hir_stats {\n+    if sess.opts.unstable_opts.hir_stats {\n         hir_stats::print_ast_stats(&krate, \"PRE EXPANSION AST STATS\");\n     }\n \n@@ -181,7 +181,7 @@ pub fn register_plugins<'a>(\n         rustc_builtin_macros::cmdline_attrs::inject(\n             krate,\n             &sess.parse_sess,\n-            &sess.opts.debugging_opts.crate_attr,\n+            &sess.opts.unstable_opts.crate_attr,\n         )\n     });\n \n@@ -213,7 +213,7 @@ pub fn register_plugins<'a>(\n     }\n \n     let mut lint_store = rustc_lint::new_lint_store(\n-        sess.opts.debugging_opts.no_interleave_lints,\n+        sess.opts.unstable_opts.no_interleave_lints,\n         sess.unstable_options(),\n     );\n     register_lints(sess, &mut lint_store);\n@@ -327,10 +327,10 @@ pub fn configure_and_expand(\n         let cfg = rustc_expand::expand::ExpansionConfig {\n             features: Some(features),\n             recursion_limit,\n-            trace_mac: sess.opts.debugging_opts.trace_macros,\n+            trace_mac: sess.opts.unstable_opts.trace_macros,\n             should_test: sess.opts.test,\n-            span_debug: sess.opts.debugging_opts.span_debug,\n-            proc_macro_backtrace: sess.opts.debugging_opts.proc_macro_backtrace,\n+            span_debug: sess.opts.unstable_opts.span_debug,\n+            proc_macro_backtrace: sess.opts.unstable_opts.proc_macro_backtrace,\n             ..rustc_expand::expand::ExpansionConfig::default(crate_name.to_string())\n         };\n \n@@ -413,11 +413,11 @@ pub fn configure_and_expand(\n \n     // Done with macro expansion!\n \n-    if sess.opts.debugging_opts.input_stats {\n+    if sess.opts.unstable_opts.input_stats {\n         eprintln!(\"Post-expansion node count: {}\", count_nodes(&krate));\n     }\n \n-    if sess.opts.debugging_opts.hir_stats {\n+    if sess.opts.unstable_opts.hir_stats {\n         hir_stats::print_ast_stats(&krate, \"POST EXPANSION AST STATS\");\n     }\n \n@@ -500,7 +500,7 @@ fn generated_output_paths(\n                     out_filenames.push(p);\n                 }\n             }\n-            OutputType::DepInfo if sess.opts.debugging_opts.dep_info_omit_d_target => {\n+            OutputType::DepInfo if sess.opts.unstable_opts.dep_info_omit_d_target => {\n                 // Don't add the dep-info output when omitting it from dep-info targets\n             }\n             _ => {\n@@ -598,7 +598,7 @@ fn write_out_deps(\n         files.extend(extra_tracked_files);\n \n         if sess.binary_dep_depinfo() {\n-            if let Some(ref backend) = sess.opts.debugging_opts.codegen_backend {\n+            if let Some(ref backend) = sess.opts.unstable_opts.codegen_backend {\n                 if backend.contains('.') {\n                     // If the backend name contain a `.`, it is the path to an external dynamic\n                     // library. If not, it is not a path.\n@@ -928,7 +928,7 @@ fn analysis(tcx: TyCtxt<'_>, (): ()) -> Result<()> {\n     sess.time(\"MIR_effect_checking\", || {\n         for def_id in tcx.hir().body_owners() {\n             tcx.ensure().thir_check_unsafety(def_id);\n-            if !tcx.sess.opts.debugging_opts.thir_unsafeck {\n+            if !tcx.sess.opts.unstable_opts.thir_unsafeck {\n                 rustc_mir_transform::check_unsafety::check_unsafety(tcx, def_id);\n             }\n             tcx.ensure().has_ffi_unwind_calls(def_id);"}, {"sha": "73402ae084206de171a9227a46b0d507a38e3bd0", "filename": "compiler/rustc_interface/src/queries.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -357,7 +357,7 @@ impl Linker {\n             return Ok(());\n         }\n \n-        if sess.opts.debugging_opts.no_link {\n+        if sess.opts.unstable_opts.no_link {\n             let encoded = CodegenResults::serialize_rlink(&codegen_results);\n             let rlink_file = self.prepare_outputs.with_extension(config::RLINK_EXT);\n             std::fs::write(&rlink_file, encoded).map_err(|err| {"}, {"sha": "9c0b534798e395074eb605be8210f504c63fba84", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -629,14 +629,14 @@ fn test_top_level_options_tracked_no_crate() {\n }\n \n #[test]\n-fn test_debugging_options_tracking_hash() {\n+fn test_unstable_options_tracking_hash() {\n     let reference = Options::default();\n     let mut opts = Options::default();\n \n     macro_rules! untracked {\n         ($name: ident, $non_default_value: expr) => {\n-            assert_ne!(opts.debugging_opts.$name, $non_default_value);\n-            opts.debugging_opts.$name = $non_default_value;\n+            assert_ne!(opts.unstable_opts.$name, $non_default_value);\n+            opts.unstable_opts.$name = $non_default_value;\n             assert_same_hash(&reference, &opts);\n         };\n     }\n@@ -705,8 +705,8 @@ fn test_debugging_options_tracking_hash() {\n     macro_rules! tracked {\n         ($name: ident, $non_default_value: expr) => {\n             opts = reference.clone();\n-            assert_ne!(opts.debugging_opts.$name, $non_default_value);\n-            opts.debugging_opts.$name = $non_default_value;\n+            assert_ne!(opts.unstable_opts.$name, $non_default_value);\n+            opts.unstable_opts.$name = $non_default_value;\n             assert_different_hash(&reference, &opts);\n         };\n     }\n@@ -804,8 +804,8 @@ fn test_debugging_options_tracking_hash() {\n     macro_rules! tracked_no_crate_hash {\n         ($name: ident, $non_default_value: expr) => {\n             opts = reference.clone();\n-            assert_ne!(opts.debugging_opts.$name, $non_default_value);\n-            opts.debugging_opts.$name = $non_default_value;\n+            assert_ne!(opts.unstable_opts.$name, $non_default_value);\n+            opts.unstable_opts.$name = $non_default_value;\n             assert_non_crate_hash_different(&reference, &opts);\n         };\n     }"}, {"sha": "01173bff126310bd767a447287b9a9b33b557e3d", "filename": "compiler/rustc_interface/src/util.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Futil.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -79,7 +79,7 @@ pub fn create_session(\n     } else {\n         get_codegen_backend(\n             &sopts.maybe_sysroot,\n-            sopts.debugging_opts.codegen_backend.as_ref().map(|name| &name[..]),\n+            sopts.unstable_opts.codegen_backend.as_ref().map(|name| &name[..]),\n         )\n     };\n \n@@ -89,9 +89,9 @@ pub fn create_session(\n     let bundle = match rustc_errors::fluent_bundle(\n         sopts.maybe_sysroot.clone(),\n         sysroot_candidates(),\n-        sopts.debugging_opts.translate_lang.clone(),\n-        sopts.debugging_opts.translate_additional_ftl.as_deref(),\n-        sopts.debugging_opts.translate_directionality_markers,\n+        sopts.unstable_opts.translate_lang.clone(),\n+        sopts.unstable_opts.translate_additional_ftl.as_deref(),\n+        sopts.unstable_opts.translate_directionality_markers,\n     ) {\n         Ok(bundle) => bundle,\n         Err(e) => {"}, {"sha": "3d42325d544ddaaa989db2ea23291d6d9a410f89", "filename": "compiler/rustc_lint/src/early.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fearly.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -416,7 +416,7 @@ pub fn check_ast_node<'a>(\n     let mut passes: Vec<_> = passes.iter().map(|p| (p)()).collect();\n     let mut buffered = lint_buffer.unwrap_or_default();\n \n-    if sess.opts.debugging_opts.no_interleave_lints {\n+    if sess.opts.unstable_opts.no_interleave_lints {\n         for (i, pass) in passes.iter_mut().enumerate() {\n             buffered =\n                 sess.prof.extra_verbose_generic_activity(\"run_lint\", pass.name()).run(|| {"}, {"sha": "afb18451cf3984603bc4c06e1425ddf64b41d520", "filename": "compiler/rustc_lint/src/late.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_lint%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_lint%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flate.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -402,7 +402,7 @@ pub fn late_lint_mod<'tcx, T: LateLintPass<'tcx>>(\n     module_def_id: LocalDefId,\n     builtin_lints: T,\n ) {\n-    if tcx.sess.opts.debugging_opts.no_interleave_lints {\n+    if tcx.sess.opts.unstable_opts.no_interleave_lints {\n         // These passes runs in late_lint_crate with -Z no_interleave_lints\n         return;\n     }\n@@ -448,7 +448,7 @@ fn late_lint_pass_crate<'tcx, T: LateLintPass<'tcx>>(tcx: TyCtxt<'tcx>, pass: T)\n fn late_lint_crate<'tcx, T: LateLintPass<'tcx>>(tcx: TyCtxt<'tcx>, builtin_lints: T) {\n     let mut passes = unerased_lint_store(tcx).late_passes.iter().map(|p| (p)()).collect::<Vec<_>>();\n \n-    if !tcx.sess.opts.debugging_opts.no_interleave_lints {\n+    if !tcx.sess.opts.unstable_opts.no_interleave_lints {\n         if !passes.is_empty() {\n             late_lint_pass_crate(tcx, LateLintPassObjects { lints: &mut passes[..] });\n         }"}, {"sha": "708d0b1fd8a301818b8b667233975772cfffe0ea", "filename": "compiler/rustc_metadata/src/creader.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -456,7 +456,7 @@ impl<'a> CrateLoader<'a> {\n         proc_macro_locator.is_proc_macro = true;\n \n         // Load the proc macro crate for the target\n-        let (locator, target_result) = if self.sess.opts.debugging_opts.dual_proc_macros {\n+        let (locator, target_result) = if self.sess.opts.unstable_opts.dual_proc_macros {\n             proc_macro_locator.reset();\n             let result = match self.load(&mut proc_macro_locator)? {\n                 Some(LoadResult::Previous(cnum)) => {\n@@ -485,7 +485,7 @@ impl<'a> CrateLoader<'a> {\n             return Ok(None);\n         };\n \n-        Ok(Some(if self.sess.opts.debugging_opts.dual_proc_macros {\n+        Ok(Some(if self.sess.opts.unstable_opts.dual_proc_macros {\n             let host_result = match host_result {\n                 LoadResult::Previous(..) => {\n                     panic!(\"host and target proc macros must be loaded in lock-step\")\n@@ -762,17 +762,17 @@ impl<'a> CrateLoader<'a> {\n     }\n \n     fn inject_profiler_runtime(&mut self, krate: &ast::Crate) {\n-        if self.sess.opts.debugging_opts.no_profiler_runtime\n+        if self.sess.opts.unstable_opts.no_profiler_runtime\n             || !(self.sess.instrument_coverage()\n-                || self.sess.opts.debugging_opts.profile\n+                || self.sess.opts.unstable_opts.profile\n                 || self.sess.opts.cg.profile_generate.enabled())\n         {\n             return;\n         }\n \n         info!(\"loading profiler\");\n \n-        let name = Symbol::intern(&self.sess.opts.debugging_opts.profiler_runtime);\n+        let name = Symbol::intern(&self.sess.opts.unstable_opts.profiler_runtime);\n         if name == sym::profiler_builtins && self.sess.contains_name(&krate.attrs, sym::no_core) {\n             self.sess.err(\n                 \"`profiler_builtins` crate (required by compiler options) \\"}, {"sha": "b765c34f8e364d2d4ec15846bd5d4daa5718a9a9", "filename": "compiler/rustc_metadata/src/dependency_format.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_metadata%2Fsrc%2Fdependency_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_metadata%2Fsrc%2Fdependency_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fdependency_format.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -419,15 +419,15 @@ fn verify_ok(tcx: TyCtxt<'_>, list: &[Linkage]) {\n             }\n \n             let found_drop_strategy = tcx.panic_in_drop_strategy(cnum);\n-            if tcx.sess.opts.debugging_opts.panic_in_drop != found_drop_strategy {\n+            if tcx.sess.opts.unstable_opts.panic_in_drop != found_drop_strategy {\n                 sess.err(&format!(\n                     \"the crate `{}` is compiled with the \\\n                                panic-in-drop strategy `{}` which is \\\n                                incompatible with this crate's \\\n                                strategy of `{}`\",\n                     tcx.crate_name(cnum),\n                     found_drop_strategy.desc(),\n-                    tcx.sess.opts.debugging_opts.panic_in_drop.desc()\n+                    tcx.sess.opts.unstable_opts.panic_in_drop.desc()\n                 ));\n             }\n         }"}, {"sha": "a72bcb9a2dbd1f92d9f1cbbf332ea7959a0d827f", "filename": "compiler/rustc_metadata/src/locator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -1179,7 +1179,7 @@ impl CrateError {\n                             err.help(\"consider building the standard library from source with `cargo build -Zbuild-std`\");\n                         }\n                     } else if crate_name\n-                        == Symbol::intern(&sess.opts.debugging_opts.profiler_runtime)\n+                        == Symbol::intern(&sess.opts.unstable_opts.profiler_runtime)\n                     {\n                         err.note(\"the compiler may have been built without the profiler runtime\");\n                     } else if crate_name.as_str().starts_with(\"rustc_\") {"}, {"sha": "ef5cb88c8f95011c46d2688150d00f2a5a210aa9", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -1475,14 +1475,14 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n         // the `rust-src` component in `Src::run` in `src/bootstrap/dist.rs`.\n         let virtual_rust_source_base_dir = [\n             option_env!(\"CFG_VIRTUAL_RUST_SOURCE_BASE_DIR\").map(PathBuf::from),\n-            sess.opts.debugging_opts.simulate_remapped_rust_src_base.clone(),\n+            sess.opts.unstable_opts.simulate_remapped_rust_src_base.clone(),\n         ]\n         .into_iter()\n         .filter(|_| {\n             // Only spend time on further checks if we have what to translate *to*.\n             sess.opts.real_rust_source_base_dir.is_some()\n                 // Some tests need the translation to be always skipped.\n-                && sess.opts.debugging_opts.translate_remapped_path_to_local_path\n+                && sess.opts.unstable_opts.translate_remapped_path_to_local_path\n         })\n         .flatten()\n         .filter(|virtual_dir| {\n@@ -1584,7 +1584,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n                     // `try_to_translate_virtual_to_real` don't have to worry about how the\n                     // compiler is bootstrapped.\n                     if let Some(virtual_dir) =\n-                        &sess.opts.debugging_opts.simulate_remapped_rust_src_base\n+                        &sess.opts.unstable_opts.simulate_remapped_rust_src_base\n                     {\n                         if let Some(real_dir) = &sess.opts.real_rust_source_base_dir {\n                             if let rustc_span::FileName::Real(ref mut old_name) = name {"}, {"sha": "cd6847245e68038ef2b3987c51f6cf6776fe5fb7", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -665,7 +665,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             hash: tcx.crate_hash(LOCAL_CRATE),\n             stable_crate_id: tcx.def_path_hash(LOCAL_CRATE.as_def_id()).stable_crate_id(),\n             required_panic_strategy: tcx.required_panic_strategy(LOCAL_CRATE),\n-            panic_in_drop_strategy: tcx.sess.opts.debugging_opts.panic_in_drop,\n+            panic_in_drop_strategy: tcx.sess.opts.unstable_opts.panic_in_drop,\n             edition: tcx.sess.edition(),\n             has_global_allocator: tcx.has_global_allocator(LOCAL_CRATE),\n             has_panic_handler: tcx.has_panic_handler(LOCAL_CRATE),\n@@ -862,7 +862,7 @@ fn should_encode_mir(tcx: TyCtxt<'_>, def_id: LocalDefId) -> (bool, bool) {\n         // Constructors\n         DefKind::Ctor(_, _) => {\n             let mir_opt_base = tcx.sess.opts.output_types.should_codegen()\n-                || tcx.sess.opts.debugging_opts.always_encode_mir;\n+                || tcx.sess.opts.unstable_opts.always_encode_mir;\n             (true, mir_opt_base)\n         }\n         // Constants\n@@ -880,7 +880,7 @@ fn should_encode_mir(tcx: TyCtxt<'_>, def_id: LocalDefId) -> (bool, bool) {\n             // The function has a `const` modifier or is in a `#[const_trait]`.\n             let is_const_fn = tcx.is_const_fn_raw(def_id.to_def_id())\n                 || tcx.is_const_default_method(def_id.to_def_id());\n-            let always_encode_mir = tcx.sess.opts.debugging_opts.always_encode_mir;\n+            let always_encode_mir = tcx.sess.opts.unstable_opts.always_encode_mir;\n             (is_const_fn, needs_inline || always_encode_mir)\n         }\n         // Closures can't be const fn.\n@@ -889,7 +889,7 @@ fn should_encode_mir(tcx: TyCtxt<'_>, def_id: LocalDefId) -> (bool, bool) {\n             let needs_inline = (generics.requires_monomorphization(tcx)\n                 || tcx.codegen_fn_attrs(def_id).requests_inline())\n                 && tcx.sess.opts.output_types.should_codegen();\n-            let always_encode_mir = tcx.sess.opts.debugging_opts.always_encode_mir;\n+            let always_encode_mir = tcx.sess.opts.unstable_opts.always_encode_mir;\n             (false, needs_inline || always_encode_mir)\n         }\n         // Generators require optimized MIR to compute layout.\n@@ -1360,7 +1360,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n \n         // The query lookup can take a measurable amount of time in crates with many items. Check if\n         // the stability attributes are even enabled before using their queries.\n-        if self.feat.staged_api || self.tcx.sess.opts.debugging_opts.force_unstable_if_unmarked {\n+        if self.feat.staged_api || self.tcx.sess.opts.unstable_opts.force_unstable_if_unmarked {\n             if let Some(stab) = self.tcx.lookup_stability(def_id) {\n                 record!(self.tables.lookup_stability[def_id] <- stab)\n             }\n@@ -1372,7 +1372,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n \n         // The query lookup can take a measurable amount of time in crates with many items. Check if\n         // the stability attributes are even enabled before using their queries.\n-        if self.feat.staged_api || self.tcx.sess.opts.debugging_opts.force_unstable_if_unmarked {\n+        if self.feat.staged_api || self.tcx.sess.opts.unstable_opts.force_unstable_if_unmarked {\n             if let Some(stab) = self.tcx.lookup_const_stability(def_id) {\n                 record!(self.tables.lookup_const_stability[def_id] <- stab)\n             }"}, {"sha": "d3e10fce8a0a58d536f8ba835e2ed3cb6fc926c1", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -1149,7 +1149,7 @@ pub(super) fn crate_hash(tcx: TyCtxt<'_>, crate_num: CrateNum) -> Svh {\n         hir_body_hash.hash_stable(&mut hcx, &mut stable_hasher);\n         upstream_crates.hash_stable(&mut hcx, &mut stable_hasher);\n         source_file_names.hash_stable(&mut hcx, &mut stable_hasher);\n-        if tcx.sess.opts.debugging_opts.incremental_relative_spans {\n+        if tcx.sess.opts.unstable_opts.incremental_relative_spans {\n             let definitions = tcx.definitions_untracked();\n             let mut owner_spans: Vec<_> = krate\n                 .owners"}, {"sha": "2f45222de47280c6d2b4cea1753cefc53c988a6e", "filename": "compiler/rustc_middle/src/lint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flint.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -300,7 +300,7 @@ pub fn struct_lint_level<'s, 'd>(\n \n         let has_future_breakage = future_incompatible.map_or(\n             // Default allow lints trigger too often for testing.\n-            sess.opts.debugging_opts.future_incompat_test && lint.default_level != Level::Allow,\n+            sess.opts.unstable_opts.future_incompat_test && lint.default_level != Level::Allow,\n             |incompat| {\n                 matches!(incompat.reason, FutureIncompatibilityReason::FutureReleaseErrorReportNow)\n             },"}, {"sha": "acced0492efe969650ebc12a5aa24aa0a5cf60fc", "filename": "compiler/rustc_middle/src/middle/limits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Flimits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Flimits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Flimits.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -25,7 +25,7 @@ pub fn provide(providers: &mut ty::query::Providers) {\n             tcx.hir().krate_attrs(),\n             tcx.sess,\n             sym::move_size_limit,\n-            tcx.sess.opts.debugging_opts.move_size_limit.unwrap_or(0),\n+            tcx.sess.opts.unstable_opts.move_size_limit.unwrap_or(0),\n         ),\n         type_length_limit: get_limit(\n             tcx.hir().krate_attrs(),"}, {"sha": "2de8d3180906b5bf3ce5766e24819391b2799c86", "filename": "compiler/rustc_middle/src/middle/stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -443,7 +443,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                 // compiling a compiler crate), then let this missing feature\n                 // annotation slide.\n                 if feature == sym::rustc_private && issue == NonZeroU32::new(27812) {\n-                    if self.sess.opts.debugging_opts.force_unstable_if_unmarked {\n+                    if self.sess.opts.unstable_opts.force_unstable_if_unmarked {\n                         return EvalResult::Allow;\n                     }\n                 }"}, {"sha": "f3621cd99d344e96b23aa5975f99e65526941d3a", "filename": "compiler/rustc_middle/src/mir/generic_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fgeneric_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fgeneric_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fgeneric_graph.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -8,7 +8,7 @@ pub fn mir_fn_to_generic_graph<'tcx>(tcx: TyCtxt<'tcx>, body: &Body<'_>) -> Grap\n     let def_id = body.source.def_id();\n     let def_name = graphviz_safe_def_name(def_id);\n     let graph_name = format!(\"Mir_{}\", def_name);\n-    let dark_mode = tcx.sess.opts.debugging_opts.graphviz_dark_mode;\n+    let dark_mode = tcx.sess.opts.unstable_opts.graphviz_dark_mode;\n \n     // Nodes\n     let nodes: Vec<Node> = body"}, {"sha": "11ac45943ac58aa5a2e78684f29e4813f4a2ae27", "filename": "compiler/rustc_middle/src/mir/generic_graphviz.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fgeneric_graphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fgeneric_graphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fgeneric_graphviz.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -56,11 +56,11 @@ impl<\n         writeln!(w, \"{} {}{} {{\", kind, cluster, self.graphviz_name)?;\n \n         // Global graph properties\n-        let font = format!(r#\"fontname=\"{}\"\"#, tcx.sess.opts.debugging_opts.graphviz_font);\n+        let font = format!(r#\"fontname=\"{}\"\"#, tcx.sess.opts.unstable_opts.graphviz_font);\n         let mut graph_attrs = vec![&font[..]];\n         let mut content_attrs = vec![&font[..]];\n \n-        let dark_mode = tcx.sess.opts.debugging_opts.graphviz_dark_mode;\n+        let dark_mode = tcx.sess.opts.unstable_opts.graphviz_dark_mode;\n         if dark_mode {\n             graph_attrs.push(r#\"bgcolor=\"black\"\"#);\n             graph_attrs.push(r#\"fontcolor=\"white\"\"#);"}, {"sha": "5de56dad07a41bfef88695de9d17b27f96c4eb01", "filename": "compiler/rustc_middle/src/mir/graphviz.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fgraphviz.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -57,11 +57,11 @@ where\n     W: Write,\n {\n     // Global graph properties\n-    let font = format!(r#\"fontname=\"{}\"\"#, tcx.sess.opts.debugging_opts.graphviz_font);\n+    let font = format!(r#\"fontname=\"{}\"\"#, tcx.sess.opts.unstable_opts.graphviz_font);\n     let mut graph_attrs = vec![&font[..]];\n     let mut content_attrs = vec![&font[..]];\n \n-    let dark_mode = tcx.sess.opts.debugging_opts.graphviz_dark_mode;\n+    let dark_mode = tcx.sess.opts.unstable_opts.graphviz_dark_mode;\n     if dark_mode {\n         graph_attrs.push(r#\"bgcolor=\"black\"\"#);\n         graph_attrs.push(r#\"fontcolor=\"white\"\"#);"}, {"sha": "f61cb7e8c472e68a55674e853d2c168f262e0a95", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -1884,7 +1884,7 @@ impl<'tcx> Debug for Rvalue<'tcx> {\n \n                 // When printing regions, add trailing space if necessary.\n                 let print_region = ty::tls::with(|tcx| {\n-                    tcx.sess.verbose() || tcx.sess.opts.debugging_opts.identify_regions\n+                    tcx.sess.verbose() || tcx.sess.opts.unstable_opts.identify_regions\n                 });\n                 let region = if print_region {\n                     let mut region = region.to_string();\n@@ -1954,7 +1954,7 @@ impl<'tcx> Debug for Rvalue<'tcx> {\n \n                     AggregateKind::Closure(def_id, substs) => ty::tls::with(|tcx| {\n                         if let Some(def_id) = def_id.as_local() {\n-                            let name = if tcx.sess.opts.debugging_opts.span_free_formats {\n+                            let name = if tcx.sess.opts.unstable_opts.span_free_formats {\n                                 let substs = tcx.lift(substs).unwrap();\n                                 format!(\n                                     \"[closure@{}]\","}, {"sha": "8b51c5b3da50acb3c75e94ee05e55a57b3b95b09", "filename": "compiler/rustc_middle/src/mir/mono.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -90,7 +90,7 @@ impl<'tcx> MonoItem<'tcx> {\n         let generate_cgu_internal_copies = tcx\n             .sess\n             .opts\n-            .debugging_opts\n+            .unstable_opts\n             .inline_in_all_cgus\n             .unwrap_or_else(|| tcx.sess.opts.optimize != OptLevel::No)\n             && !tcx.sess.link_dead_code();\n@@ -459,7 +459,7 @@ impl<'tcx> CodegenUnitNameBuilder<'tcx> {\n     {\n         let cgu_name = self.build_cgu_name_no_mangle(cnum, components, special_suffix);\n \n-        if self.tcx.sess.opts.debugging_opts.human_readable_cgu_names {\n+        if self.tcx.sess.opts.unstable_opts.human_readable_cgu_names {\n             cgu_name\n         } else {\n             Symbol::intern(&CodegenUnit::mangle_name(cgu_name.as_str()))"}, {"sha": "970043d427ff22d1024e484fed9e0316c055d765", "filename": "compiler/rustc_middle/src/mir/pretty.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -90,7 +90,7 @@ pub fn dump_mir<'tcx, F>(\n }\n \n pub fn dump_enabled<'tcx>(tcx: TyCtxt<'tcx>, pass_name: &str, def_id: DefId) -> bool {\n-    let Some(ref filters) = tcx.sess.opts.debugging_opts.dump_mir else {\n+    let Some(ref filters) = tcx.sess.opts.unstable_opts.dump_mir else {\n         return false;\n     };\n     // see notes on #41697 below\n@@ -141,15 +141,15 @@ fn dump_matched_mir_node<'tcx, F>(\n         extra_data(PassWhere::AfterCFG, &mut file)?;\n     };\n \n-    if tcx.sess.opts.debugging_opts.dump_mir_graphviz {\n+    if tcx.sess.opts.unstable_opts.dump_mir_graphviz {\n         let _: io::Result<()> = try {\n             let mut file =\n                 create_dump_file(tcx, \"dot\", pass_num, pass_name, disambiguator, body.source)?;\n             write_mir_fn_graphviz(tcx, body, false, &mut file)?;\n         };\n     }\n \n-    if let Some(spanview) = tcx.sess.opts.debugging_opts.dump_mir_spanview {\n+    if let Some(spanview) = tcx.sess.opts.unstable_opts.dump_mir_spanview {\n         let _: io::Result<()> = try {\n             let file_basename =\n                 dump_file_basename(tcx, pass_num, pass_name, disambiguator, body.source);\n@@ -175,7 +175,7 @@ fn dump_file_basename<'tcx>(\n         None => String::new(),\n     };\n \n-    let pass_num = if tcx.sess.opts.debugging_opts.dump_mir_exclude_pass_number {\n+    let pass_num = if tcx.sess.opts.unstable_opts.dump_mir_exclude_pass_number {\n         String::new()\n     } else {\n         match pass_num {\n@@ -214,7 +214,7 @@ fn dump_file_basename<'tcx>(\n /// graphviz data or other things.\n fn dump_path(tcx: TyCtxt<'_>, basename: &str, extension: &str) -> PathBuf {\n     let mut file_path = PathBuf::new();\n-    file_path.push(Path::new(&tcx.sess.opts.debugging_opts.dump_mir_dir));\n+    file_path.push(Path::new(&tcx.sess.opts.unstable_opts.dump_mir_dir));\n \n     let file_name = format!(\"{}.{}\", basename, extension,);\n "}, {"sha": "4f9bbc135ec1229797e9a6cc5c3ba85414e12500", "filename": "compiler/rustc_middle/src/ty/instance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -605,7 +605,7 @@ impl<'tcx> Instance<'tcx> {\n     /// identity parameters if they are determined to be unused in `instance.def`.\n     pub fn polymorphize(self, tcx: TyCtxt<'tcx>) -> Self {\n         debug!(\"polymorphize: running polymorphization analysis\");\n-        if !tcx.sess.opts.debugging_opts.polymorphize {\n+        if !tcx.sess.opts.unstable_opts.polymorphize {\n             return self;\n         }\n "}, {"sha": "71c93d05792c5e4397c1b94dfe94f32c1c75fa19", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -1914,7 +1914,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n     fn record_layout_for_printing(&self, layout: TyAndLayout<'tcx>) {\n         // If we are running with `-Zprint-type-sizes`, maybe record layouts\n         // for dumping later.\n-        if self.tcx.sess.opts.debugging_opts.print_type_sizes {\n+        if self.tcx.sess.opts.unstable_opts.print_type_sizes {\n             self.record_layout_for_printing_outlined(layout)\n         }\n     }\n@@ -2916,7 +2916,7 @@ pub fn fn_can_unwind<'tcx>(tcx: TyCtxt<'tcx>, fn_def_id: Option<DefId>, abi: Spe\n         //\n         // This is not part of `codegen_fn_attrs` as it can differ between crates\n         // and therefore cannot be computed in core.\n-        if tcx.sess.opts.debugging_opts.panic_in_drop == PanicStrategy::Abort {\n+        if tcx.sess.opts.unstable_opts.panic_in_drop == PanicStrategy::Abort {\n             if Some(did) == tcx.lang_items().drop_in_place_fn() {\n                 return false;\n             }"}, {"sha": "22a1fd34e27d3bce228bdcfdfb5febece06ae3da", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -1761,7 +1761,7 @@ impl ReprOptions {\n         // If the user defined a custom seed for layout randomization, xor the item's\n         // path hash with the user defined seed, this will allowing determinism while\n         // still allowing users to further randomize layout generation for e.g. fuzzing\n-        if let Some(user_seed) = tcx.sess.opts.debugging_opts.layout_seed {\n+        if let Some(user_seed) = tcx.sess.opts.unstable_opts.layout_seed {\n             field_shuffle_seed ^= user_seed;\n         }\n \n@@ -1794,7 +1794,7 @@ impl ReprOptions {\n \n         // If `-Z randomize-layout` was enabled for the type definition then we can\n         // consider performing layout randomization\n-        if tcx.sess.opts.debugging_opts.randomize_layout {\n+        if tcx.sess.opts.unstable_opts.randomize_layout {\n             flags.insert(ReprFlags::RANDOMIZE_LAYOUT);\n         }\n "}, {"sha": "81c4d2ae34671c260c2d649dc0ec77edab94c429", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -297,7 +297,7 @@ pub trait PrettyPrinter<'tcx>:\n         mut self,\n         def_id: DefId,\n     ) -> Result<(Self::Path, bool), Self::Error> {\n-        if !self.tcx().sess.opts.debugging_opts.trim_diagnostic_paths\n+        if !self.tcx().sess.opts.unstable_opts.trim_diagnostic_paths\n             || matches!(self.tcx().sess.opts.trimmed_def_paths, TrimmedDefPaths::Never)\n             || NO_TRIMMED_PATH.with(|flag| flag.get())\n             || SHOULD_PREFIX_WITH_CRATE.with(|flag| flag.get())\n@@ -712,7 +712,7 @@ pub trait PrettyPrinter<'tcx>:\n                     p!(write(\"closure\"));\n                     // FIXME(eddyb) should use `def_span`.\n                     if let Some(did) = did.as_local() {\n-                        if self.tcx().sess.opts.debugging_opts.span_free_formats {\n+                        if self.tcx().sess.opts.unstable_opts.span_free_formats {\n                             p!(\"@\", print_def_path(did.to_def_id(), substs));\n                         } else {\n                             let span = self.tcx().def_span(did);\n@@ -1919,7 +1919,7 @@ impl<'tcx> PrettyPrinter<'tcx> for FmtPrinter<'_, 'tcx> {\n             return true;\n         }\n \n-        let identify_regions = self.tcx.sess.opts.debugging_opts.identify_regions;\n+        let identify_regions = self.tcx.sess.opts.unstable_opts.identify_regions;\n \n         match *region {\n             ty::ReEarlyBound(ref data) => {\n@@ -1992,7 +1992,7 @@ impl<'tcx> FmtPrinter<'_, 'tcx> {\n             return Ok(self);\n         }\n \n-        let identify_regions = self.tcx.sess.opts.debugging_opts.identify_regions;\n+        let identify_regions = self.tcx.sess.opts.unstable_opts.identify_regions;\n \n         // These printouts are concise.  They do not contain all the information\n         // the user might want to diagnose an error, but there is basically no way"}, {"sha": "cbd790bd6df1528682f144c89eb10c3ec0534ba6", "filename": "compiler/rustc_mir_build/src/check_unsafety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -632,7 +632,7 @@ impl UnsafeOpKind {\n \n pub fn check_unsafety<'tcx>(tcx: TyCtxt<'tcx>, def: ty::WithOptConstParam<LocalDefId>) {\n     // THIR unsafeck is gated under `-Z thir-unsafeck`\n-    if !tcx.sess.opts.debugging_opts.thir_unsafeck {\n+    if !tcx.sess.opts.unstable_opts.thir_unsafeck {\n         return;\n     }\n "}, {"sha": "f374658ceb6913a928acee89abb4546239676a72", "filename": "compiler/rustc_mir_dataflow/src/framework/engine.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fengine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fengine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fengine.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -289,7 +289,7 @@ where\n             io::BufWriter::new(fs::File::create(&path)?)\n         }\n \n-        None if tcx.sess.opts.debugging_opts.dump_mir_dataflow\n+        None if tcx.sess.opts.unstable_opts.dump_mir_dataflow\n             && dump_enabled(tcx, A::NAME, def_id) =>\n         {\n             create_dump_file(\n@@ -314,8 +314,8 @@ where\n \n     let graphviz = graphviz::Formatter::new(body, results, style);\n     let mut render_opts =\n-        vec![dot::RenderOption::Fontname(tcx.sess.opts.debugging_opts.graphviz_font.clone())];\n-    if tcx.sess.opts.debugging_opts.graphviz_dark_mode {\n+        vec![dot::RenderOption::Fontname(tcx.sess.opts.unstable_opts.graphviz_font.clone())];\n+    if tcx.sess.opts.unstable_opts.graphviz_dark_mode {\n         render_opts.push(dot::RenderOption::DarkTheme);\n     }\n     dot::render_opts(&graphviz, &mut buf, &render_opts)?;"}, {"sha": "fd1e492779f1b3c0d6e1ee40cde99626c2d85d09", "filename": "compiler/rustc_mir_dataflow/src/impls/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fmod.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -317,7 +317,7 @@ impl<'tcx> GenKillAnalysis<'tcx> for MaybeInitializedPlaces<'_, 'tcx> {\n             Self::update_bits(trans, path, s)\n         });\n \n-        if !self.tcx.sess.opts.debugging_opts.precise_enum_drop_elaboration {\n+        if !self.tcx.sess.opts.unstable_opts.precise_enum_drop_elaboration {\n             return;\n         }\n \n@@ -340,7 +340,7 @@ impl<'tcx> GenKillAnalysis<'tcx> for MaybeInitializedPlaces<'_, 'tcx> {\n             Self::update_bits(trans, path, s)\n         });\n \n-        if !self.tcx.sess.opts.debugging_opts.precise_enum_drop_elaboration {\n+        if !self.tcx.sess.opts.unstable_opts.precise_enum_drop_elaboration {\n             return;\n         }\n \n@@ -379,7 +379,7 @@ impl<'tcx> GenKillAnalysis<'tcx> for MaybeInitializedPlaces<'_, 'tcx> {\n         discr: &mir::Operand<'tcx>,\n         edge_effects: &mut impl SwitchIntEdgeEffects<G>,\n     ) {\n-        if !self.tcx.sess.opts.debugging_opts.precise_enum_drop_elaboration {\n+        if !self.tcx.sess.opts.unstable_opts.precise_enum_drop_elaboration {\n             return;\n         }\n \n@@ -495,7 +495,7 @@ impl<'tcx> GenKillAnalysis<'tcx> for MaybeUninitializedPlaces<'_, 'tcx> {\n         discr: &mir::Operand<'tcx>,\n         edge_effects: &mut impl SwitchIntEdgeEffects<G>,\n     ) {\n-        if !self.tcx.sess.opts.debugging_opts.precise_enum_drop_elaboration {\n+        if !self.tcx.sess.opts.unstable_opts.precise_enum_drop_elaboration {\n             return;\n         }\n "}, {"sha": "2502e8b603c3e3dca5adb9da40e0fd9b85bd9f4a", "filename": "compiler/rustc_mir_transform/src/abort_unwinding_calls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_mir_transform%2Fsrc%2Fabort_unwinding_calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_mir_transform%2Fsrc%2Fabort_unwinding_calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fabort_unwinding_calls.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -75,7 +75,7 @@ impl<'tcx> MirPass<'tcx> for AbortUnwindingCalls {\n                     layout::fn_can_unwind(tcx, fn_def_id, sig.abi())\n                 }\n                 TerminatorKind::Drop { .. } | TerminatorKind::DropAndReplace { .. } => {\n-                    tcx.sess.opts.debugging_opts.panic_in_drop == PanicStrategy::Unwind\n+                    tcx.sess.opts.unstable_opts.panic_in_drop == PanicStrategy::Unwind\n                         && layout::fn_can_unwind(tcx, None, Abi::Rust)\n                 }\n                 TerminatorKind::Assert { .. } | TerminatorKind::FalseUnwind { .. } => {"}, {"sha": "b91ae083cf594e10bec90714a67d525407592139", "filename": "compiler/rustc_mir_transform/src/add_retag.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_mir_transform%2Fsrc%2Fadd_retag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_mir_transform%2Fsrc%2Fadd_retag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fadd_retag.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -72,7 +72,7 @@ fn may_contain_reference<'tcx>(ty: Ty<'tcx>, depth: u32, tcx: TyCtxt<'tcx>) -> b\n \n impl<'tcx> MirPass<'tcx> for AddRetag {\n     fn is_enabled(&self, sess: &rustc_session::Session) -> bool {\n-        sess.opts.debugging_opts.mir_emit_retag\n+        sess.opts.unstable_opts.mir_emit_retag\n     }\n \n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {"}, {"sha": "6f0ae4f07ab7954f75bc103fc4b582a9c59ac1ae", "filename": "compiler/rustc_mir_transform/src/const_debuginfo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_debuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_debuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_debuginfo.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -16,7 +16,7 @@ pub struct ConstDebugInfo;\n \n impl<'tcx> MirPass<'tcx> for ConstDebugInfo {\n     fn is_enabled(&self, sess: &rustc_session::Session) -> bool {\n-        sess.opts.debugging_opts.unsound_mir_opts && sess.mir_opt_level() > 0\n+        sess.opts.unstable_opts.unsound_mir_opts && sess.mir_opt_level() > 0\n     }\n \n     fn run_pass(&self, _tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {"}, {"sha": "2619626a5675fd0b0ae9fcc9ad3a98053b5cdef7", "filename": "compiler/rustc_mir_transform/src/coverage/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fmod.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -160,8 +160,8 @@ impl<'a, 'tcx> Instrumentor<'a, 'tcx> {\n         let mut debug_used_expressions = debug::UsedExpressions::new();\n \n         let dump_mir = dump_enabled(tcx, self.pass_name, def_id);\n-        let dump_graphviz = dump_mir && tcx.sess.opts.debugging_opts.dump_mir_graphviz;\n-        let dump_spanview = dump_mir && tcx.sess.opts.debugging_opts.dump_mir_spanview.is_some();\n+        let dump_graphviz = dump_mir && tcx.sess.opts.unstable_opts.dump_mir_graphviz;\n+        let dump_spanview = dump_mir && tcx.sess.opts.unstable_opts.dump_mir_spanview.is_some();\n \n         if dump_graphviz {\n             graphviz_data.enable();"}, {"sha": "33572068f5cd9ac4cd0a5f04f004eb42be1f04cf", "filename": "compiler/rustc_mir_transform/src/dest_prop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -122,7 +122,7 @@ impl<'tcx> MirPass<'tcx> for DestinationPropagation {\n         //\n         // Only run at mir-opt-level=3 or higher for now (we don't fix up debuginfo and remove\n         // storage statements at the moment).\n-        sess.opts.debugging_opts.unsound_mir_opts && sess.mir_opt_level() >= 3\n+        sess.opts.unstable_opts.unsound_mir_opts && sess.mir_opt_level() >= 3\n     }\n \n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {"}, {"sha": "dba42f7aff0338fb94bad384a67778530da4ff7e", "filename": "compiler/rustc_mir_transform/src/early_otherwise_branch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_mir_transform%2Fsrc%2Fearly_otherwise_branch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_mir_transform%2Fsrc%2Fearly_otherwise_branch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fearly_otherwise_branch.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -95,7 +95,7 @@ pub struct EarlyOtherwiseBranch;\n \n impl<'tcx> MirPass<'tcx> for EarlyOtherwiseBranch {\n     fn is_enabled(&self, sess: &rustc_session::Session) -> bool {\n-        sess.mir_opt_level() >= 3 && sess.opts.debugging_opts.unsound_mir_opts\n+        sess.mir_opt_level() >= 3 && sess.opts.unstable_opts.unsound_mir_opts\n     }\n \n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {"}, {"sha": "91ecf3879229d71386ca37721a2da8af1c486467", "filename": "compiler/rustc_mir_transform/src/generator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -957,7 +957,7 @@ fn create_generator_drop_shim<'tcx>(\n         tcx.mk_ptr(ty::TypeAndMut { ty: gen_ty, mutbl: hir::Mutability::Mut }),\n         source_info,\n     );\n-    if tcx.sess.opts.debugging_opts.mir_emit_retag {\n+    if tcx.sess.opts.unstable_opts.mir_emit_retag {\n         // Alias tracking must know we changed the type\n         body.basic_blocks_mut()[START_BLOCK].statements.insert(\n             0,\n@@ -1386,7 +1386,7 @@ impl<'tcx> MirPass<'tcx> for StateTransform {\n \n         sanitize_witness(tcx, body, interior, upvars, &liveness_info.saved_locals);\n \n-        if tcx.sess.opts.debugging_opts.validate_mir {\n+        if tcx.sess.opts.unstable_opts.validate_mir {\n             let mut vis = EnsureGeneratorFieldAssignmentsNeverAlias {\n                 assigned_local: None,\n                 saved_locals: &liveness_info.saved_locals,"}, {"sha": "dc5d5cee879f8327f1d795ffed8d6fd83084a8ad", "filename": "compiler/rustc_mir_transform/src/inline.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -40,7 +40,7 @@ struct CallSite<'tcx> {\n \n impl<'tcx> MirPass<'tcx> for Inline {\n     fn is_enabled(&self, sess: &rustc_session::Session) -> bool {\n-        if let Some(enabled) = sess.opts.debugging_opts.inline_mir {\n+        if let Some(enabled) = sess.opts.unstable_opts.inline_mir {\n             return enabled;\n         }\n \n@@ -395,9 +395,9 @@ impl<'tcx> Inliner<'tcx> {\n         let tcx = self.tcx;\n \n         let mut threshold = if callee_attrs.requests_inline() {\n-            self.tcx.sess.opts.debugging_opts.inline_mir_hint_threshold.unwrap_or(100)\n+            self.tcx.sess.opts.unstable_opts.inline_mir_hint_threshold.unwrap_or(100)\n         } else {\n-            self.tcx.sess.opts.debugging_opts.inline_mir_threshold.unwrap_or(50)\n+            self.tcx.sess.opts.unstable_opts.inline_mir_threshold.unwrap_or(50)\n         };\n \n         // Give a bonus functions with a small number of blocks,"}, {"sha": "d968a488519f219ad9a8d16aa456f0cb712fbeee", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -217,7 +217,7 @@ fn mir_const<'tcx>(\n     }\n \n     // Unsafety check uses the raw mir, so make sure it is run.\n-    if !tcx.sess.opts.debugging_opts.thir_unsafeck {\n+    if !tcx.sess.opts.unstable_opts.thir_unsafeck {\n         if let Some(param_did) = def.const_param_did {\n             tcx.ensure().unsafety_check_result_for_const_arg((def.did, param_did));\n         } else {"}, {"sha": "e27d4ab1688e07fe98260d0e6549f428a33e2e19", "filename": "compiler/rustc_mir_transform/src/pass_manager.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_mir_transform%2Fsrc%2Fpass_manager.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_mir_transform%2Fsrc%2Fpass_manager.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fpass_manager.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -76,8 +76,8 @@ pub fn run_passes<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>, passes: &[&dyn\n     let start_phase = body.phase;\n     let mut cnt = 0;\n \n-    let validate = tcx.sess.opts.debugging_opts.validate_mir;\n-    let overridden_passes = &tcx.sess.opts.debugging_opts.mir_enable_passes;\n+    let validate = tcx.sess.opts.unstable_opts.validate_mir;\n+    let overridden_passes = &tcx.sess.opts.unstable_opts.mir_enable_passes;\n     trace!(?overridden_passes);\n \n     if validate {"}, {"sha": "eaa61d8614d8cf22a0068d4bce21ac22869a841f", "filename": "compiler/rustc_mir_transform/src/shim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -176,7 +176,7 @@ fn build_drop_shim<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, ty: Option<Ty<'tcx>>)\n     if ty.is_some() {\n         // The first argument (index 0), but add 1 for the return value.\n         let dropee_ptr = Place::from(Local::new(1 + 0));\n-        if tcx.sess.opts.debugging_opts.mir_emit_retag {\n+        if tcx.sess.opts.unstable_opts.mir_emit_retag {\n             // Function arguments should be retagged, and we make this one raw.\n             body.basic_blocks_mut()[START_BLOCK].statements.insert(\n                 0,"}, {"sha": "d52f1261b23a20aeba9b5fb6b5ae3714ba221b5e", "filename": "compiler/rustc_mir_transform/src/simplify_try.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify_try.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify_try.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify_try.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -378,7 +378,7 @@ fn optimization_applies<'tcx>(\n impl<'tcx> MirPass<'tcx> for SimplifyArmIdentity {\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n         // FIXME(77359): This optimization can result in unsoundness.\n-        if !tcx.sess.opts.debugging_opts.unsound_mir_opts {\n+        if !tcx.sess.opts.unstable_opts.unsound_mir_opts {\n             return;\n         }\n \n@@ -551,7 +551,7 @@ impl<'tcx> MirPass<'tcx> for SimplifyBranchSame {\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n         // This optimization is disabled by default for now due to\n         // soundness concerns; see issue #89485 and PR #89489.\n-        if !tcx.sess.opts.debugging_opts.unsound_mir_opts {\n+        if !tcx.sess.opts.unstable_opts.unsound_mir_opts {\n             return;\n         }\n "}, {"sha": "d9fa4d65b3a9ae2cd538b425407e58504f637b5f", "filename": "compiler/rustc_monomorphize/src/collector.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -1141,8 +1141,7 @@ fn create_fn_mono_item<'tcx>(\n     debug!(\"create_fn_mono_item(instance={})\", instance);\n \n     let def_id = instance.def_id();\n-    if tcx.sess.opts.debugging_opts.profile_closures && def_id.is_local() && tcx.is_closure(def_id)\n-    {\n+    if tcx.sess.opts.unstable_opts.profile_closures && def_id.is_local() && tcx.is_closure(def_id) {\n         crate::util::dump_closure_profile(tcx, instance);\n     }\n "}, {"sha": "d18b1c26c174f652a312eee41fe8290f0c21eac2", "filename": "compiler/rustc_monomorphize/src/partitioning/default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fdefault.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -303,7 +303,7 @@ fn characteristic_def_id_of_mono_item<'tcx>(\n \n                 // When polymorphization is enabled, methods which do not depend on their generic\n                 // parameters, but the self-type of their impl block do will fail to normalize.\n-                if !tcx.sess.opts.debugging_opts.polymorphize || !instance.needs_subst() {\n+                if !tcx.sess.opts.unstable_opts.polymorphize || !instance.needs_subst() {\n                     // This is a method within an impl, find out what the self-type is:\n                     let impl_self_ty = tcx.subst_and_normalize_erasing_regions(\n                         instance.substs,"}, {"sha": "02bb8dea0c01ef1a8a3b1f378b118015145f7721", "filename": "compiler/rustc_monomorphize/src/partitioning/merging.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmerging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmerging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmerging.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -83,7 +83,7 @@ pub fn merge_codegen_units<'tcx>(\n \n         for cgu in codegen_units.iter_mut() {\n             if let Some(new_cgu_name) = new_cgu_names.get(&cgu.name()) {\n-                if cx.tcx.sess.opts.debugging_opts.human_readable_cgu_names {\n+                if cx.tcx.sess.opts.unstable_opts.human_readable_cgu_names {\n                     cgu.set_name(Symbol::intern(&new_cgu_name));\n                 } else {\n                     // If we don't require CGU names to be human-readable, we"}, {"sha": "36243803f994ea93cc52226c22fa7d801facf558", "filename": "compiler/rustc_monomorphize/src/partitioning/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmod.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -141,7 +141,7 @@ trait Partitioner<'tcx> {\n }\n \n fn get_partitioner<'tcx>(tcx: TyCtxt<'tcx>) -> Box<dyn Partitioner<'tcx>> {\n-    let strategy = match &tcx.sess.opts.debugging_opts.cgu_partitioning_strategy {\n+    let strategy = match &tcx.sess.opts.unstable_opts.cgu_partitioning_strategy {\n         None => \"default\",\n         Some(s) => &s[..],\n     };\n@@ -345,7 +345,7 @@ fn collect_and_partition_mono_items<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     (): (),\n ) -> (&'tcx DefIdSet, &'tcx [CodegenUnit<'tcx>]) {\n-    let collection_mode = match tcx.sess.opts.debugging_opts.print_mono_items {\n+    let collection_mode = match tcx.sess.opts.unstable_opts.print_mono_items {\n         Some(ref s) => {\n             let mode_string = s.to_lowercase();\n             let mode_string = mode_string.trim();\n@@ -413,7 +413,7 @@ fn collect_and_partition_mono_items<'tcx>(\n         })\n         .collect();\n \n-    if tcx.sess.opts.debugging_opts.print_mono_items.is_some() {\n+    if tcx.sess.opts.unstable_opts.print_mono_items.is_some() {\n         let mut item_to_cgus: FxHashMap<_, Vec<_>> = Default::default();\n \n         for cgu in codegen_units {"}, {"sha": "394843e510d214dc7885908c68d5bce17a9d76a1", "filename": "compiler/rustc_monomorphize/src/polymorphize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -36,7 +36,7 @@ fn unused_generic_params<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     instance: ty::InstanceDef<'tcx>,\n ) -> FiniteBitSet<u32> {\n-    if !tcx.sess.opts.debugging_opts.polymorphize {\n+    if !tcx.sess.opts.unstable_opts.polymorphize {\n         // If polymorphization disabled, then all parameters are used.\n         return FiniteBitSet::new_empty();\n     }"}, {"sha": "f3d8a09a297cea46a48f34ed358ed22ad7aecad7", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -1625,7 +1625,7 @@ impl CheckAttrVisitor<'_> {\n     /// Checks that the dep-graph debugging attributes are only present when the query-dep-graph\n     /// option is passed to the compiler.\n     fn check_rustc_dirty_clean(&self, attr: &Attribute) -> bool {\n-        if self.tcx.sess.opts.debugging_opts.query_dep_graph {\n+        if self.tcx.sess.opts.unstable_opts.query_dep_graph {\n             true\n         } else {\n             self.tcx"}, {"sha": "f1a81b65329afe29529971d16a70c7ea13b0490d", "filename": "compiler/rustc_passes/src/check_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -122,7 +122,7 @@ impl<'tcx> CheckConstVisitor<'tcx> {\n             // `-Zunleash-the-miri-inside-of-you` only works for expressions that don't have a\n             // corresponding feature gate. This encourages nightly users to use feature gates when\n             // possible.\n-            None if tcx.sess.opts.debugging_opts.unleash_the_miri_inside_of_you => {\n+            None if tcx.sess.opts.unstable_opts.unleash_the_miri_inside_of_you => {\n                 tcx.sess.span_warn(span, \"skipping const checks\");\n                 return;\n             }"}, {"sha": "212ea9e57a37b5badcf63151f87b220c108fefa8", "filename": "compiler/rustc_passes/src/hir_id_validator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_passes%2Fsrc%2Fhir_id_validator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_passes%2Fsrc%2Fhir_id_validator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fhir_id_validator.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -11,7 +11,7 @@ use rustc_middle::ty::TyCtxt;\n pub fn check_crate(tcx: TyCtxt<'_>) {\n     tcx.dep_graph.assert_ignored();\n \n-    if tcx.sess.opts.debugging_opts.hir_stats {\n+    if tcx.sess.opts.unstable_opts.hir_stats {\n         crate::hir_stats::print_hir_stats(tcx);\n     }\n "}, {"sha": "2a1db584ccbe6b9fc4580551361a34566bc03185", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -628,7 +628,7 @@ fn stability_index(tcx: TyCtxt<'_>, (): ()) -> Index {\n         // compiling `librustc_*` crates themselves so we can leverage crates.io\n         // while maintaining the invariant that all sysroot crates are unstable\n         // by default and are unable to be used.\n-        if tcx.sess.opts.debugging_opts.force_unstable_if_unmarked {\n+        if tcx.sess.opts.unstable_opts.force_unstable_if_unmarked {\n             let reason = \"this crate is being loaded from the sysroot, an \\\n                           unstable location; did you mean to load this crate \\\n                           from crates.io via `Cargo.toml` instead?\";\n@@ -884,7 +884,7 @@ impl<'tcx> Visitor<'tcx> for CheckTraitImplStable<'tcx> {\n /// libraries, identify activated features that don't exist and error about them.\n pub fn check_unused_or_stable_features(tcx: TyCtxt<'_>) {\n     let is_staged_api =\n-        tcx.sess.opts.debugging_opts.force_unstable_if_unmarked || tcx.features().staged_api;\n+        tcx.sess.opts.unstable_opts.force_unstable_if_unmarked || tcx.features().staged_api;\n     if is_staged_api {\n         let access_levels = &tcx.privacy_access_levels(());\n         let mut missing = MissingStabilityAnnotations { tcx, access_levels };"}, {"sha": "162c274d8a296f5810c63362e8ef6902599b919d", "filename": "compiler/rustc_query_system/src/dep_graph/dep_node.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fdep_node.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -79,8 +79,8 @@ impl<K: DepKind> DepNode<K> {\n         #[cfg(debug_assertions)]\n         {\n             if !tcx.fingerprint_style(kind).reconstructible()\n-                && (tcx.sess().opts.debugging_opts.incremental_info\n-                    || tcx.sess().opts.debugging_opts.query_dep_graph)\n+                && (tcx.sess().opts.unstable_opts.incremental_info\n+                    || tcx.sess().opts.unstable_opts.query_dep_graph)\n             {\n                 tcx.dep_graph().register_dep_node_debug_str(dep_node, || arg.to_debug_str(tcx));\n             }"}, {"sha": "8ff56132749df71f5d08249cede4c2d36134ce51", "filename": "compiler/rustc_query_system/src/dep_graph/graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -347,7 +347,7 @@ impl<K: DepKind> DepGraph<K> {\n         let current_fingerprint =\n             hash_result.map(|f| dcx.with_stable_hashing_context(|mut hcx| f(&mut hcx, &result)));\n \n-        let print_status = cfg!(debug_assertions) && dcx.sess().opts.debugging_opts.dep_tasks;\n+        let print_status = cfg!(debug_assertions) && dcx.sess().opts.unstable_opts.dep_tasks;\n \n         // Intern the new `DepNode`.\n         let (dep_node_index, prev_and_color) = data.current.intern_node("}, {"sha": "217fac341edd6b392b01134b7823ada2ed27e335", "filename": "compiler/rustc_query_system/src/ich/hcx.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_query_system%2Fsrc%2Fich%2Fhcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_query_system%2Fsrc%2Fich%2Fhcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fich%2Fhcx.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -24,7 +24,7 @@ pub struct StableHashingContext<'a> {\n     cstore: &'a dyn CrateStore,\n     source_span: &'a IndexVec<LocalDefId, Span>,\n     // The value of `-Z incremental-ignore-spans`.\n-    // This field should only be used by `debug_opts_incremental_ignore_span`\n+    // This field should only be used by `unstable_opts_incremental_ignore_span`\n     incremental_ignore_spans: bool,\n     pub(super) body_resolver: BodyResolver<'a>,\n     // Very often, we are hashing something that does not need the\n@@ -57,14 +57,14 @@ impl<'a> StableHashingContext<'a> {\n         always_ignore_spans: bool,\n     ) -> Self {\n         let hash_spans_initial =\n-            !always_ignore_spans && !sess.opts.debugging_opts.incremental_ignore_spans;\n+            !always_ignore_spans && !sess.opts.unstable_opts.incremental_ignore_spans;\n \n         StableHashingContext {\n             body_resolver: BodyResolver::Forbidden,\n             definitions,\n             cstore,\n             source_span,\n-            incremental_ignore_spans: sess.opts.debugging_opts.incremental_ignore_spans,\n+            incremental_ignore_spans: sess.opts.unstable_opts.incremental_ignore_spans,\n             caching_source_map: None,\n             raw_source_map: sess.source_map(),\n             hashing_controls: HashingControls { hash_spans: hash_spans_initial },\n@@ -186,7 +186,7 @@ impl<'a> rustc_span::HashStableContext for StableHashingContext<'a> {\n     }\n \n     #[inline]\n-    fn debug_opts_incremental_ignore_spans(&self) -> bool {\n+    fn unstable_opts_incremental_ignore_spans(&self) -> bool {\n         self.incremental_ignore_spans\n     }\n "}, {"sha": "792f2b0317357ad9c737bc969c48bd702ca053d3", "filename": "compiler/rustc_query_system/src/query/plumbing.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -467,7 +467,7 @@ where\n \n         if let Some(result) = result {\n             if std::intrinsics::unlikely(\n-                tcx.dep_context().sess().opts.debugging_opts.query_dep_graph,\n+                tcx.dep_context().sess().opts.unstable_opts.query_dep_graph,\n             ) {\n                 dep_graph.mark_debug_loaded_from_disk(*dep_node)\n             }\n@@ -486,7 +486,7 @@ where\n             // give us some coverage of potential bugs though.\n             let try_verify = prev_fingerprint.as_value().1 % 32 == 0;\n             if std::intrinsics::unlikely(\n-                try_verify || tcx.dep_context().sess().opts.debugging_opts.incremental_verify_ich,\n+                try_verify || tcx.dep_context().sess().opts.unstable_opts.incremental_verify_ich,\n             ) {\n                 incremental_verify_ich(*tcx.dep_context(), &result, dep_node, query);\n             }"}, {"sha": "0e52bf34661d6694ab7e53de41256b94b8556c46", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 46, "deletions": 46, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -722,7 +722,7 @@ impl Default for Options {\n             target_triple: TargetTriple::from_triple(host_triple()),\n             test: false,\n             incremental: None,\n-            debugging_opts: Default::default(),\n+            unstable_opts: Default::default(),\n             prints: Vec::new(),\n             cg: Default::default(),\n             error_format: ErrorOutputType::default(),\n@@ -752,8 +752,8 @@ impl Options {\n     /// Returns `true` if there is a reason to build the dep graph.\n     pub fn build_dep_graph(&self) -> bool {\n         self.incremental.is_some()\n-            || self.debugging_opts.dump_dep_graph\n-            || self.debugging_opts.query_dep_graph\n+            || self.unstable_opts.dump_dep_graph\n+            || self.unstable_opts.query_dep_graph\n     }\n \n     pub fn file_path_mapping(&self) -> FilePathMapping {\n@@ -762,13 +762,13 @@ impl Options {\n \n     /// Returns `true` if there will be an output file generated.\n     pub fn will_create_output_file(&self) -> bool {\n-        !self.debugging_opts.parse_only && // The file is just being parsed\n-            !self.debugging_opts.ls // The file is just being queried\n+        !self.unstable_opts.parse_only && // The file is just being parsed\n+            !self.unstable_opts.ls // The file is just being queried\n     }\n \n     #[inline]\n     pub fn share_generics(&self) -> bool {\n-        match self.debugging_opts.share_generics {\n+        match self.unstable_opts.share_generics {\n             Some(setting) => setting,\n             None => match self.optimize {\n                 OptLevel::No | OptLevel::Less | OptLevel::Size | OptLevel::SizeMin => true,\n@@ -782,7 +782,7 @@ impl Options {\n     }\n }\n \n-impl DebuggingOptions {\n+impl UnstableOptions {\n     pub fn diagnostic_handler_flags(&self, can_emit_warnings: bool) -> HandlerFlags {\n         HandlerFlags {\n             can_emit_warnings,\n@@ -940,7 +940,7 @@ fn default_configuration(sess: &Session) -> CrateConfig {\n     let panic_strategy = sess.panic_strategy();\n     ret.insert((sym::panic, Some(panic_strategy.desc_symbol())));\n \n-    for s in sess.opts.debugging_opts.sanitizer {\n+    for s in sess.opts.unstable_opts.sanitizer {\n         let symbol = Symbol::intern(&s.to_string());\n         ret.insert((sym::sanitize, Some(symbol)));\n     }\n@@ -1403,6 +1403,7 @@ pub fn rustc_short_optgroups() -> Vec<RustcOptGroup> {\n /// long-term interface for rustc.\n pub fn rustc_optgroups() -> Vec<RustcOptGroup> {\n     let mut opts = rustc_short_optgroups();\n+    // FIXME: none of these descriptions are actually used\n     opts.extend(vec![\n         opt::multi_s(\n             \"\",\n@@ -1411,7 +1412,7 @@ pub fn rustc_optgroups() -> Vec<RustcOptGroup> {\n             \"NAME[=PATH]\",\n         ),\n         opt::opt_s(\"\", \"sysroot\", \"Override the system root\", \"PATH\"),\n-        opt::multi(\"Z\", \"\", \"Set internal debugging options\", \"FLAG\"),\n+        opt::multi(\"Z\", \"\", \"Set unstable / perma-unstable options\", \"FLAG\"),\n         opt::opt_s(\n             \"\",\n             \"error-format\",\n@@ -1659,12 +1660,12 @@ pub fn parse_crate_edition(matches: &getopts::Matches) -> Edition {\n     edition\n }\n \n-fn check_debug_option_stability(\n-    debugging_opts: &DebuggingOptions,\n+fn check_error_format_stability(\n+    unstable_opts: &UnstableOptions,\n     error_format: ErrorOutputType,\n     json_rendered: HumanReadableErrorType,\n ) {\n-    if !debugging_opts.unstable_options {\n+    if !unstable_opts.unstable_options {\n         if let ErrorOutputType::Json { pretty: true, json_rendered } = error_format {\n             early_error(\n                 ErrorOutputType::Json { pretty: false, json_rendered },\n@@ -1683,12 +1684,12 @@ fn check_debug_option_stability(\n }\n \n fn parse_output_types(\n-    debugging_opts: &DebuggingOptions,\n+    unstable_opts: &UnstableOptions,\n     matches: &getopts::Matches,\n     error_format: ErrorOutputType,\n ) -> OutputTypes {\n     let mut output_types = BTreeMap::new();\n-    if !debugging_opts.parse_only {\n+    if !unstable_opts.parse_only {\n         for list in matches.opt_strs(\"emit\") {\n             for output_type in list.split(',') {\n                 let (shorthand, path) = match output_type.split_once('=') {\n@@ -1762,19 +1763,19 @@ fn should_override_cgus_and_disable_thinlto(\n     (disable_thinlto, codegen_units)\n }\n \n-fn check_thread_count(debugging_opts: &DebuggingOptions, error_format: ErrorOutputType) {\n-    if debugging_opts.threads == 0 {\n+fn check_thread_count(unstable_opts: &UnstableOptions, error_format: ErrorOutputType) {\n+    if unstable_opts.threads == 0 {\n         early_error(error_format, \"value for threads must be a positive non-zero integer\");\n     }\n \n-    if debugging_opts.threads > 1 && debugging_opts.fuel.is_some() {\n+    if unstable_opts.threads > 1 && unstable_opts.fuel.is_some() {\n         early_error(error_format, \"optimization fuel is incompatible with multiple threads\");\n     }\n }\n \n fn collect_print_requests(\n     cg: &mut CodegenOptions,\n-    dopts: &mut DebuggingOptions,\n+    unstable_opts: &mut UnstableOptions,\n     matches: &getopts::Matches,\n     error_format: ErrorOutputType,\n ) -> Vec<PrintRequest> {\n@@ -1803,7 +1804,7 @@ fn collect_print_requests(\n         \"native-static-libs\" => PrintRequest::NativeStaticLibs,\n         \"stack-protector-strategies\" => PrintRequest::StackProtectorStrategies,\n         \"target-spec-json\" => {\n-            if dopts.unstable_options {\n+            if unstable_opts.unstable_options {\n                 PrintRequest::TargetSpec\n             } else {\n                 early_error(\n@@ -2069,10 +2070,10 @@ fn parse_libs(matches: &getopts::Matches, error_format: ErrorOutputType) -> Vec<\n \n pub fn parse_externs(\n     matches: &getopts::Matches,\n-    debugging_opts: &DebuggingOptions,\n+    unstable_opts: &UnstableOptions,\n     error_format: ErrorOutputType,\n ) -> Externs {\n-    let is_unstable_enabled = debugging_opts.unstable_options;\n+    let is_unstable_enabled = unstable_opts.unstable_options;\n     let mut externs: BTreeMap<String, ExternEntry> = BTreeMap::new();\n     for arg in matches.opt_strs(\"extern\") {\n         let (name, path) = match arg.split_once('=') {\n@@ -2171,7 +2172,7 @@ pub fn parse_externs(\n \n fn parse_remap_path_prefix(\n     matches: &getopts::Matches,\n-    debugging_opts: &DebuggingOptions,\n+    unstable_opts: &UnstableOptions,\n     error_format: ErrorOutputType,\n ) -> Vec<(PathBuf, PathBuf)> {\n     let mut mapping: Vec<(PathBuf, PathBuf)> = matches\n@@ -2185,7 +2186,7 @@ fn parse_remap_path_prefix(\n             Some((from, to)) => (PathBuf::from(from), PathBuf::from(to)),\n         })\n         .collect();\n-    match &debugging_opts.remap_cwd_prefix {\n+    match &unstable_opts.remap_cwd_prefix {\n         Some(to) => match std::env::current_dir() {\n             Ok(cwd) => mapping.push((cwd, to.clone())),\n             Err(_) => (),\n@@ -2217,20 +2218,20 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n     let crate_types = parse_crate_types_from_list(unparsed_crate_types)\n         .unwrap_or_else(|e| early_error(error_format, &e));\n \n-    let mut debugging_opts = DebuggingOptions::build(matches, error_format);\n+    let mut unstable_opts = UnstableOptions::build(matches, error_format);\n     let (lint_opts, describe_lints, lint_cap) = get_cmd_lint_options(matches, error_format);\n \n-    check_debug_option_stability(&debugging_opts, error_format, json_rendered);\n+    check_error_format_stability(&unstable_opts, error_format, json_rendered);\n \n-    if !debugging_opts.unstable_options && json_unused_externs.is_enabled() {\n+    if !unstable_opts.unstable_options && json_unused_externs.is_enabled() {\n         early_error(\n             error_format,\n             \"the `-Z unstable-options` flag must also be passed to enable \\\n             the flag `--json=unused-externs`\",\n         );\n     }\n \n-    let output_types = parse_output_types(&debugging_opts, matches, error_format);\n+    let output_types = parse_output_types(&unstable_opts, matches, error_format);\n \n     let mut cg = CodegenOptions::build(matches, error_format);\n     let (disable_thinlto, mut codegen_units) = should_override_cgus_and_disable_thinlto(\n@@ -2240,20 +2241,19 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n         cg.codegen_units,\n     );\n \n-    check_thread_count(&debugging_opts, error_format);\n+    check_thread_count(&unstable_opts, error_format);\n \n     let incremental = cg.incremental.as_ref().map(PathBuf::from);\n \n-    let assert_incr_state =\n-        parse_assert_incr_state(&debugging_opts.assert_incr_state, error_format);\n+    let assert_incr_state = parse_assert_incr_state(&unstable_opts.assert_incr_state, error_format);\n \n-    if debugging_opts.profile && incremental.is_some() {\n+    if unstable_opts.profile && incremental.is_some() {\n         early_error(\n             error_format,\n             \"can't instrument with gcov profiling when compiling incrementally\",\n         );\n     }\n-    if debugging_opts.profile {\n+    if unstable_opts.profile {\n         match codegen_units {\n             Some(1) => {}\n             None => codegen_units = Some(1),\n@@ -2271,7 +2271,7 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n         );\n     }\n \n-    if debugging_opts.profile_sample_use.is_some()\n+    if unstable_opts.profile_sample_use.is_some()\n         && (cg.profile_generate.enabled() || cg.profile_use.is_some())\n     {\n         early_error(\n@@ -2282,7 +2282,7 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n \n     // Handle both `-Z symbol-mangling-version` and `-C symbol-mangling-version`; the latter takes\n     // precedence.\n-    match (cg.symbol_mangling_version, debugging_opts.symbol_mangling_version) {\n+    match (cg.symbol_mangling_version, unstable_opts.symbol_mangling_version) {\n         (Some(smv_c), Some(smv_z)) if smv_c != smv_z => {\n             early_error(\n                 error_format,\n@@ -2291,7 +2291,7 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n             );\n         }\n         (Some(SymbolManglingVersion::V0), _) => {}\n-        (Some(_), _) if !debugging_opts.unstable_options => {\n+        (Some(_), _) if !unstable_opts.unstable_options => {\n             early_error(\n                 error_format,\n                 \"`-C symbol-mangling-version=legacy` requires `-Z unstable-options`\",\n@@ -2310,7 +2310,7 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n \n     // Handle both `-Z instrument-coverage` and `-C instrument-coverage`; the latter takes\n     // precedence.\n-    match (cg.instrument_coverage, debugging_opts.instrument_coverage) {\n+    match (cg.instrument_coverage, unstable_opts.instrument_coverage) {\n         (Some(ic_c), Some(ic_z)) if ic_c != ic_z => {\n             early_error(\n                 error_format,\n@@ -2319,7 +2319,7 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n             );\n         }\n         (Some(InstrumentCoverage::Off | InstrumentCoverage::All), _) => {}\n-        (Some(_), _) if !debugging_opts.unstable_options => {\n+        (Some(_), _) if !unstable_opts.unstable_options => {\n             early_error(\n                 error_format,\n                 \"`-C instrument-coverage=except-*` requires `-Z unstable-options`\",\n@@ -2363,7 +2363,7 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n     }\n \n     if let Ok(graphviz_font) = std::env::var(\"RUSTC_GRAPHVIZ_FONT\") {\n-        debugging_opts.graphviz_font = graphviz_font;\n+        unstable_opts.graphviz_font = graphviz_font;\n     }\n \n     if !cg.embed_bitcode {\n@@ -2386,7 +2386,7 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n         );\n     }\n \n-    let prints = collect_print_requests(&mut cg, &mut debugging_opts, matches, error_format);\n+    let prints = collect_print_requests(&mut cg, &mut unstable_opts, matches, error_format);\n \n     let cg = cg;\n \n@@ -2412,15 +2412,15 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n         early_warn(error_format, \"-C remark requires \\\"-C debuginfo=n\\\" to show source locations\");\n     }\n \n-    let externs = parse_externs(matches, &debugging_opts, error_format);\n+    let externs = parse_externs(matches, &unstable_opts, error_format);\n \n     let crate_name = matches.opt_str(\"crate-name\");\n \n-    let remap_path_prefix = parse_remap_path_prefix(matches, &debugging_opts, error_format);\n+    let remap_path_prefix = parse_remap_path_prefix(matches, &unstable_opts, error_format);\n \n-    let pretty = parse_pretty(&debugging_opts, error_format);\n+    let pretty = parse_pretty(&unstable_opts, error_format);\n \n-    if !debugging_opts.unstable_options\n+    if !unstable_opts.unstable_options\n         && !target_triple.triple().contains(\"apple\")\n         && cg.split_debuginfo.is_some()\n     {\n@@ -2481,7 +2481,7 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n         target_triple,\n         test,\n         incremental,\n-        debugging_opts,\n+        unstable_opts,\n         prints,\n         cg,\n         error_format,\n@@ -2506,10 +2506,10 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n     }\n }\n \n-fn parse_pretty(debugging_opts: &DebuggingOptions, efmt: ErrorOutputType) -> Option<PpMode> {\n+fn parse_pretty(unstable_opts: &UnstableOptions, efmt: ErrorOutputType) -> Option<PpMode> {\n     use PpMode::*;\n \n-    let first = match debugging_opts.unpretty.as_deref()? {\n+    let first = match unstable_opts.unpretty.as_deref()? {\n         \"normal\" => Source(PpSourceMode::Normal),\n         \"identified\" => Source(PpSourceMode::Identified),\n         \"expanded\" => Source(PpSourceMode::Expanded),"}, {"sha": "01ff9e254f792c02f8d6561185813b4266bf8a5b", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -104,7 +104,7 @@ macro_rules! top_level_options {\n \n impl Options {\n     pub fn mir_opt_level(&self) -> usize {\n-        self.debugging_opts\n+        self.unstable_opts\n             .mir_opt_level\n             .unwrap_or_else(|| if self.optimize != OptLevel::No { 2 } else { 1 })\n     }\n@@ -177,7 +177,7 @@ top_level_options!(\n         incremental: Option<PathBuf> [UNTRACKED],\n         assert_incr_state: Option<IncrementalStateAssertion> [UNTRACKED],\n \n-        debugging_opts: DebuggingOptions [SUBSTRUCT],\n+        unstable_opts: UnstableOptions [SUBSTRUCT],\n         prints: Vec<PrintRequest> [UNTRACKED],\n         cg: CodegenOptions [SUBSTRUCT],\n         externs: Externs [UNTRACKED],\n@@ -1187,12 +1187,13 @@ options! {\n }\n \n options! {\n-    DebuggingOptions, DB_OPTIONS, dbopts, \"Z\", \"debugging\",\n+    UnstableOptions, Z_OPTIONS, dbopts, \"Z\", \"unstable\",\n \n     // This list is in alphabetical order.\n     //\n     // If you add a new option, please update:\n     // - compiler/rustc_interface/src/tests.rs\n+    // - src/doc/unstable-book/src/compiler-flags\n \n     allow_features: Option<Vec<String>> = (None, parse_opt_comma_list, [TRACKED],\n         \"only allow the listed language features to be enabled in code (space separated)\"),\n@@ -1580,6 +1581,8 @@ options! {\n         `mir` (the MIR), or `mir-cfg` (graphviz formatted MIR)\"),\n     unsound_mir_opts: bool = (false, parse_bool, [TRACKED],\n         \"enable unsound and buggy MIR optimizations (default: no)\"),\n+    /// This name is kind of confusing: Most unstable options enable something themselves, while\n+    /// this just allows \"normal\" options to be feature-gated.\n     unstable_options: bool = (false, parse_bool, [UNTRACKED],\n         \"adds unstable command line options to rustc interface (default: no)\"),\n     use_ctors_section: Option<bool> = (None, parse_opt_bool, [TRACKED],"}, {"sha": "854cad79a204051f1b2148657f5029aa39570279", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 52, "deletions": 52, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -544,10 +544,10 @@ impl Session {\n     /// warnings or errors are emitted. If no messages are emitted (\"good path\"), then\n     /// it's likely a bug.\n     pub fn delay_good_path_bug(&self, msg: impl Into<DiagnosticMessage>) {\n-        if self.opts.debugging_opts.print_type_sizes\n-            || self.opts.debugging_opts.query_dep_graph\n-            || self.opts.debugging_opts.dump_mir.is_some()\n-            || self.opts.debugging_opts.unpretty.is_some()\n+        if self.opts.unstable_opts.print_type_sizes\n+            || self.opts.unstable_opts.query_dep_graph\n+            || self.opts.unstable_opts.dump_mir.is_some()\n+            || self.opts.unstable_opts.unpretty.is_some()\n             || self.opts.output_types.contains_key(&OutputType::Mir)\n             || std::env::var_os(\"RUSTC_LOG\").is_some()\n         {\n@@ -584,31 +584,31 @@ impl Session {\n         self.parse_sess.source_map()\n     }\n     pub fn verbose(&self) -> bool {\n-        self.opts.debugging_opts.verbose\n+        self.opts.unstable_opts.verbose\n     }\n     pub fn time_passes(&self) -> bool {\n-        self.opts.debugging_opts.time_passes || self.opts.debugging_opts.time\n+        self.opts.unstable_opts.time_passes || self.opts.unstable_opts.time\n     }\n     pub fn instrument_mcount(&self) -> bool {\n-        self.opts.debugging_opts.instrument_mcount\n+        self.opts.unstable_opts.instrument_mcount\n     }\n     pub fn time_llvm_passes(&self) -> bool {\n-        self.opts.debugging_opts.time_llvm_passes\n+        self.opts.unstable_opts.time_llvm_passes\n     }\n     pub fn meta_stats(&self) -> bool {\n-        self.opts.debugging_opts.meta_stats\n+        self.opts.unstable_opts.meta_stats\n     }\n     pub fn asm_comments(&self) -> bool {\n-        self.opts.debugging_opts.asm_comments\n+        self.opts.unstable_opts.asm_comments\n     }\n     pub fn verify_llvm_ir(&self) -> bool {\n-        self.opts.debugging_opts.verify_llvm_ir || option_env!(\"RUSTC_VERIFY_LLVM_IR\").is_some()\n+        self.opts.unstable_opts.verify_llvm_ir || option_env!(\"RUSTC_VERIFY_LLVM_IR\").is_some()\n     }\n     pub fn print_llvm_passes(&self) -> bool {\n-        self.opts.debugging_opts.print_llvm_passes\n+        self.opts.unstable_opts.print_llvm_passes\n     }\n     pub fn binary_dep_depinfo(&self) -> bool {\n-        self.opts.debugging_opts.binary_dep_depinfo\n+        self.opts.unstable_opts.binary_dep_depinfo\n     }\n     pub fn mir_opt_level(&self) -> usize {\n         self.opts.mir_opt_level()\n@@ -675,7 +675,7 @@ impl Session {\n \n         // If `-Z thinlto` specified process that, but note that this is mostly\n         // a deprecated option now that `-C lto=thin` exists.\n-        if let Some(enabled) = self.opts.debugging_opts.thinlto {\n+        if let Some(enabled) = self.opts.unstable_opts.thinlto {\n             if enabled {\n                 return config::Lto::ThinLocal;\n             } else {\n@@ -703,25 +703,25 @@ impl Session {\n         self.opts.cg.panic.unwrap_or(self.target.panic_strategy)\n     }\n     pub fn fewer_names(&self) -> bool {\n-        if let Some(fewer_names) = self.opts.debugging_opts.fewer_names {\n+        if let Some(fewer_names) = self.opts.unstable_opts.fewer_names {\n             fewer_names\n         } else {\n             let more_names = self.opts.output_types.contains_key(&OutputType::LlvmAssembly)\n                 || self.opts.output_types.contains_key(&OutputType::Bitcode)\n                 // AddressSanitizer and MemorySanitizer use alloca name when reporting an issue.\n-                || self.opts.debugging_opts.sanitizer.intersects(SanitizerSet::ADDRESS | SanitizerSet::MEMORY);\n+                || self.opts.unstable_opts.sanitizer.intersects(SanitizerSet::ADDRESS | SanitizerSet::MEMORY);\n             !more_names\n         }\n     }\n \n     pub fn unstable_options(&self) -> bool {\n-        self.opts.debugging_opts.unstable_options\n+        self.opts.unstable_opts.unstable_options\n     }\n     pub fn is_nightly_build(&self) -> bool {\n         self.opts.unstable_features.is_nightly_build()\n     }\n     pub fn is_sanitizer_cfi_enabled(&self) -> bool {\n-        self.opts.debugging_opts.sanitizer.contains(SanitizerSet::CFI)\n+        self.opts.unstable_opts.sanitizer.contains(SanitizerSet::CFI)\n     }\n     pub fn overflow_checks(&self) -> bool {\n         self.opts.cg.overflow_checks.unwrap_or(self.opts.debug_assertions)\n@@ -761,13 +761,13 @@ impl Session {\n     }\n \n     pub fn tls_model(&self) -> TlsModel {\n-        self.opts.debugging_opts.tls_model.unwrap_or(self.target.tls_model)\n+        self.opts.unstable_opts.tls_model.unwrap_or(self.target.tls_model)\n     }\n \n     pub fn is_wasi_reactor(&self) -> bool {\n         self.target.options.os == \"wasi\"\n             && matches!(\n-                self.opts.debugging_opts.wasi_exec_model,\n+                self.opts.unstable_opts.wasi_exec_model,\n                 Some(config::WasiExecModel::Reactor)\n             )\n     }\n@@ -778,7 +778,7 @@ impl Session {\n \n     pub fn stack_protector(&self) -> StackProtector {\n         if self.target.options.supports_stack_protector {\n-            self.opts.debugging_opts.stack_protector\n+            self.opts.unstable_opts.stack_protector\n         } else {\n             StackProtector::None\n         }\n@@ -933,7 +933,7 @@ impl Session {\n     /// This expends fuel if applicable, and records fuel if applicable.\n     pub fn consider_optimizing<T: Fn() -> String>(&self, crate_name: &str, msg: T) -> bool {\n         let mut ret = true;\n-        if let Some((ref c, _)) = self.opts.debugging_opts.fuel {\n+        if let Some((ref c, _)) = self.opts.unstable_opts.fuel {\n             if c == crate_name {\n                 assert_eq!(self.threads(), 1);\n                 let mut fuel = self.optimization_fuel.lock();\n@@ -951,7 +951,7 @@ impl Session {\n                 }\n             }\n         }\n-        if let Some(ref c) = self.opts.debugging_opts.print_fuel {\n+        if let Some(ref c) = self.opts.unstable_opts.print_fuel {\n             if c == crate_name {\n                 assert_eq!(self.threads(), 1);\n                 self.print_fuel.fetch_add(1, SeqCst);\n@@ -963,7 +963,7 @@ impl Session {\n     /// Returns the number of query threads that should be used for this\n     /// compilation\n     pub fn threads(&self) -> usize {\n-        self.opts.debugging_opts.threads\n+        self.opts.unstable_opts.threads\n     }\n \n     /// Returns the number of codegen units that should be used for this\n@@ -1037,7 +1037,7 @@ impl Session {\n     }\n \n     pub fn teach(&self, code: &DiagnosticId) -> bool {\n-        self.opts.debugging_opts.teach && self.diagnostic().must_teach(code)\n+        self.opts.unstable_opts.teach && self.diagnostic().must_teach(code)\n     }\n \n     pub fn rust_2015(&self) -> bool {\n@@ -1069,7 +1069,7 @@ impl Session {\n         // The user can use the command line flag to override it.\n         let needs_plt = self.target.needs_plt;\n \n-        let dbg_opts = &self.opts.debugging_opts;\n+        let dbg_opts = &self.opts.unstable_opts;\n \n         let relro_level = dbg_opts.relro_level.unwrap_or(self.target.relro_level);\n \n@@ -1089,7 +1089,7 @@ impl Session {\n         // AddressSanitizer uses lifetimes to detect use after scope bugs.\n         // MemorySanitizer uses lifetimes to detect use of uninitialized stack variables.\n         // HWAddressSanitizer will use lifetimes to detect use after scope bugs in the future.\n-        || self.opts.debugging_opts.sanitizer.intersects(SanitizerSet::ADDRESS | SanitizerSet::MEMORY | SanitizerSet::HWADDRESS)\n+        || self.opts.unstable_opts.sanitizer.intersects(SanitizerSet::ADDRESS | SanitizerSet::MEMORY | SanitizerSet::HWADDRESS)\n     }\n \n     pub fn link_dead_code(&self) -> bool {\n@@ -1151,7 +1151,7 @@ fn default_emitter(\n     fallback_bundle: LazyFallbackBundle,\n     emitter_dest: Option<Box<dyn Write + Send>>,\n ) -> Box<dyn Emitter + sync::Send> {\n-    let macro_backtrace = sopts.debugging_opts.macro_backtrace;\n+    let macro_backtrace = sopts.unstable_opts.macro_backtrace;\n     match (sopts.error_format, emitter_dest) {\n         (config::ErrorOutputType::HumanReadable(kind), dst) => {\n             let (short, color_config) = kind.unzip();\n@@ -1164,7 +1164,7 @@ fn default_emitter(\n                     short,\n                     macro_backtrace,\n                 );\n-                Box::new(emitter.ui_testing(sopts.debugging_opts.ui_testing))\n+                Box::new(emitter.ui_testing(sopts.unstable_opts.ui_testing))\n             } else {\n                 let emitter = match dst {\n                     None => EmitterWriter::stderr(\n@@ -1173,7 +1173,7 @@ fn default_emitter(\n                         bundle,\n                         fallback_bundle,\n                         short,\n-                        sopts.debugging_opts.teach,\n+                        sopts.unstable_opts.teach,\n                         sopts.diagnostic_width,\n                         macro_backtrace,\n                     ),\n@@ -1189,7 +1189,7 @@ fn default_emitter(\n                         macro_backtrace,\n                     ),\n                 };\n-                Box::new(emitter.ui_testing(sopts.debugging_opts.ui_testing))\n+                Box::new(emitter.ui_testing(sopts.unstable_opts.ui_testing))\n             }\n         }\n         (config::ErrorOutputType::Json { pretty, json_rendered }, None) => Box::new(\n@@ -1203,7 +1203,7 @@ fn default_emitter(\n                 sopts.diagnostic_width,\n                 macro_backtrace,\n             )\n-            .ui_testing(sopts.debugging_opts.ui_testing),\n+            .ui_testing(sopts.unstable_opts.ui_testing),\n         ),\n         (config::ErrorOutputType::Json { pretty, json_rendered }, Some(dst)) => Box::new(\n             JsonEmitter::new(\n@@ -1217,7 +1217,7 @@ fn default_emitter(\n                 sopts.diagnostic_width,\n                 macro_backtrace,\n             )\n-            .ui_testing(sopts.debugging_opts.ui_testing),\n+            .ui_testing(sopts.unstable_opts.ui_testing),\n         ),\n     }\n }\n@@ -1270,7 +1270,7 @@ pub fn build_session(\n     }\n \n     let loader = file_loader.unwrap_or_else(|| Box::new(RealFileLoader));\n-    let hash_kind = sopts.debugging_opts.src_hash_algorithm.unwrap_or_else(|| {\n+    let hash_kind = sopts.unstable_opts.src_hash_algorithm.unwrap_or_else(|| {\n         if target_cfg.is_like_msvc {\n             SourceFileHashAlgorithm::Sha1\n         } else {\n@@ -1285,26 +1285,26 @@ pub fn build_session(\n \n     let fallback_bundle = fallback_fluent_bundle(\n         rustc_errors::DEFAULT_LOCALE_RESOURCES,\n-        sopts.debugging_opts.translate_directionality_markers,\n+        sopts.unstable_opts.translate_directionality_markers,\n     );\n     let emitter =\n         default_emitter(&sopts, registry, source_map.clone(), bundle, fallback_bundle, write_dest);\n \n     let span_diagnostic = rustc_errors::Handler::with_emitter_and_flags(\n         emitter,\n-        sopts.debugging_opts.diagnostic_handler_flags(can_emit_warnings),\n+        sopts.unstable_opts.diagnostic_handler_flags(can_emit_warnings),\n     );\n \n-    let self_profiler = if let SwitchWithOptPath::Enabled(ref d) = sopts.debugging_opts.self_profile\n+    let self_profiler = if let SwitchWithOptPath::Enabled(ref d) = sopts.unstable_opts.self_profile\n     {\n         let directory =\n             if let Some(ref directory) = d { directory } else { std::path::Path::new(\".\") };\n \n         let profiler = SelfProfiler::new(\n             directory,\n             sopts.crate_name.as_deref(),\n-            sopts.debugging_opts.self_profile_events.as_ref().map(|xs| &xs[..]),\n-            &sopts.debugging_opts.self_profile_counter,\n+            sopts.unstable_opts.self_profile_events.as_ref().map(|xs| &xs[..]),\n+            &sopts.unstable_opts.self_profile_counter,\n         );\n         match profiler {\n             Ok(profiler) => Some(Arc::new(profiler)),\n@@ -1318,7 +1318,7 @@ pub fn build_session(\n     };\n \n     let mut parse_sess = ParseSess::with_span_handler(span_diagnostic, source_map);\n-    parse_sess.assume_incomplete_release = sopts.debugging_opts.assume_incomplete_release;\n+    parse_sess.assume_incomplete_release = sopts.unstable_opts.assume_incomplete_release;\n \n     let host_triple = config::host_triple();\n     let target_triple = sopts.target_triple.triple();\n@@ -1337,21 +1337,21 @@ pub fn build_session(\n         local_crate_source_file.map(|path| file_path_mapping.map_prefix(path).0);\n \n     let optimization_fuel = Lock::new(OptimizationFuel {\n-        remaining: sopts.debugging_opts.fuel.as_ref().map_or(0, |i| i.1),\n+        remaining: sopts.unstable_opts.fuel.as_ref().map_or(0, |i| i.1),\n         out_of_fuel: false,\n     });\n     let print_fuel = AtomicU64::new(0);\n \n-    let cgu_reuse_tracker = if sopts.debugging_opts.query_dep_graph {\n+    let cgu_reuse_tracker = if sopts.unstable_opts.query_dep_graph {\n         CguReuseTracker::new()\n     } else {\n         CguReuseTracker::new_disabled()\n     };\n \n     let prof = SelfProfilerRef::new(\n         self_profiler,\n-        sopts.debugging_opts.time_passes || sopts.debugging_opts.time,\n-        sopts.debugging_opts.time_passes,\n+        sopts.unstable_opts.time_passes || sopts.unstable_opts.time,\n+        sopts.unstable_opts.time_passes,\n     );\n \n     let ctfe_backtrace = Lock::new(match env::var(\"RUSTC_CTFE_BACKTRACE\") {\n@@ -1433,7 +1433,7 @@ fn validate_commandline_args_with_session_available(sess: &Session) {\n     }\n \n     // Do the same for sample profile data.\n-    if let Some(ref path) = sess.opts.debugging_opts.profile_sample_use {\n+    if let Some(ref path) = sess.opts.unstable_opts.profile_sample_use {\n         if !path.exists() {\n             sess.err(&format!(\n                 \"File `{}` passed to `-C profile-sample-use` does not exist.\",\n@@ -1454,7 +1454,7 @@ fn validate_commandline_args_with_session_available(sess: &Session) {\n \n     // Sanitizers can only be used on platforms that we know have working sanitizer codegen.\n     let supported_sanitizers = sess.target.options.supported_sanitizers;\n-    let unsupported_sanitizers = sess.opts.debugging_opts.sanitizer - supported_sanitizers;\n+    let unsupported_sanitizers = sess.opts.unstable_opts.sanitizer - supported_sanitizers;\n     match unsupported_sanitizers.into_iter().count() {\n         0 => {}\n         1 => {\n@@ -1471,13 +1471,13 @@ fn validate_commandline_args_with_session_available(sess: &Session) {\n         }\n     }\n     // Cannot mix and match sanitizers.\n-    let mut sanitizer_iter = sess.opts.debugging_opts.sanitizer.into_iter();\n+    let mut sanitizer_iter = sess.opts.unstable_opts.sanitizer.into_iter();\n     if let (Some(first), Some(second)) = (sanitizer_iter.next(), sanitizer_iter.next()) {\n         sess.err(&format!(\"`-Zsanitizer={first}` is incompatible with `-Zsanitizer={second}`\"));\n     }\n \n     // Cannot enable crt-static with sanitizers on Linux\n-    if sess.crt_static(None) && !sess.opts.debugging_opts.sanitizer.is_empty() {\n+    if sess.crt_static(None) && !sess.opts.unstable_opts.sanitizer.is_empty() {\n         sess.err(\n             \"sanitizer is incompatible with statically linked libc, \\\n                                 disable it using `-C target-feature=-crt-static`\",\n@@ -1489,21 +1489,21 @@ fn validate_commandline_args_with_session_available(sess: &Session) {\n         if sess.is_sanitizer_cfi_enabled() {\n             sess.err(\"`-Zsanitizer=cfi` requires `-Clto`\");\n         }\n-        if sess.opts.debugging_opts.virtual_function_elimination {\n+        if sess.opts.unstable_opts.virtual_function_elimination {\n             sess.err(\"`-Zvirtual-function-elimination` requires `-Clto`\");\n         }\n     }\n \n-    if sess.opts.debugging_opts.stack_protector != StackProtector::None {\n+    if sess.opts.unstable_opts.stack_protector != StackProtector::None {\n         if !sess.target.options.supports_stack_protector {\n             sess.warn(&format!(\n                 \"`-Z stack-protector={}` is not supported for target {} and will be ignored\",\n-                sess.opts.debugging_opts.stack_protector, sess.opts.target_triple\n+                sess.opts.unstable_opts.stack_protector, sess.opts.target_triple\n             ))\n         }\n     }\n \n-    if let Some(dwarf_version) = sess.opts.debugging_opts.dwarf_version {\n+    if let Some(dwarf_version) = sess.opts.unstable_opts.dwarf_version {\n         if dwarf_version > 5 {\n             sess.err(&format!(\"requested DWARF version {} is greater than 5\", dwarf_version));\n         }"}, {"sha": "1d509a45d41077214524ad59f3f42944dc22c776", "filename": "compiler/rustc_span/src/hygiene.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -108,7 +108,7 @@ fn assert_default_hashing_controls<CTX: HashStableContext>(ctx: &CTX, msg: &str)\n         // which will cause us to require that this method always be called with `Span` hashing\n         // enabled.\n         HashingControls { hash_spans }\n-            if hash_spans == !ctx.debug_opts_incremental_ignore_spans() => {}\n+            if hash_spans == !ctx.unstable_opts_incremental_ignore_spans() => {}\n         other => panic!(\"Attempted hashing of {msg} with non-default HashingControls: {:?}\", other),\n     }\n }"}, {"sha": "ce08f87ecdf05ede527cdace33216e72abd80692", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -2029,9 +2029,9 @@ impl InnerSpan {\n pub trait HashStableContext {\n     fn def_path_hash(&self, def_id: DefId) -> DefPathHash;\n     fn hash_spans(&self) -> bool;\n-    /// Accesses `sess.opts.debugging_opts.incremental_ignore_spans` since\n+    /// Accesses `sess.opts.unstable_opts.incremental_ignore_spans` since\n     /// we don't have easy access to a `Session`\n-    fn debug_opts_incremental_ignore_spans(&self) -> bool;\n+    fn unstable_opts_incremental_ignore_spans(&self) -> bool;\n     fn def_span(&self, def_id: LocalDefId) -> Span;\n     fn span_data_to_lines_and_cols(\n         &mut self,"}, {"sha": "348397cea67fa3eb57e9a45ae1fe41da1d981c5b", "filename": "compiler/rustc_trait_selection/src/traits/engine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -9,7 +9,7 @@ pub trait TraitEngineExt<'tcx> {\n \n impl<'tcx> TraitEngineExt<'tcx> for dyn TraitEngine<'tcx> {\n     fn new(tcx: TyCtxt<'tcx>) -> Box<Self> {\n-        if tcx.sess.opts.debugging_opts.chalk {\n+        if tcx.sess.opts.unstable_opts.chalk {\n             Box::new(ChalkFulfillmentContext::new())\n         } else {\n             Box::new(FulfillmentContext::new())"}, {"sha": "379fc54349a62213d7a3d430370cc669e465ae83", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -884,7 +884,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     }\n \n                     ty::PredicateKind::WellFormed(ty) => {\n-                        if !self.tcx.sess.opts.debugging_opts.chalk {\n+                        if !self.tcx.sess.opts.unstable_opts.chalk {\n                             // WF predicates cannot themselves make\n                             // errors. They can only block due to\n                             // ambiguity; otherwise, they always"}, {"sha": "da8ca6e5749161458b4e1842002217f90692dce0", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -683,7 +683,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n         // FIXME: Chalk\n \n-        if !self.tcx().sess.opts.debugging_opts.chalk {\n+        if !self.tcx().sess.opts.unstable_opts.chalk {\n             nested.push(Obligation::new(\n                 obligation.cause.clone(),\n                 obligation.param_env,"}, {"sha": "d542a9b599724013462f9102770c6f189bb90ebe", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -126,7 +126,7 @@ fn param_env(tcx: TyCtxt<'_>, def_id: DefId) -> ty::ParamEnv<'_> {\n     // are any errors at that point, so outside of type inference you can be\n     // sure that this will succeed without errors anyway.\n \n-    if tcx.sess.opts.debugging_opts.chalk {\n+    if tcx.sess.opts.unstable_opts.chalk {\n         let environment = well_formed_types_in_env(tcx, def_id);\n         predicates.extend(environment);\n     }"}, {"sha": "81875fbc0b0d55b8e0a25fa98fdb640e44629e86", "filename": "compiler/rustc_typeck/src/check/generator_interior.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -69,7 +69,7 @@ impl<'a, 'tcx> InteriorVisitor<'a, 'tcx> {\n                                 yield_data.expr_and_pat_count, self.expr_count, source_span\n                             );\n \n-                            if self.fcx.sess().opts.debugging_opts.drop_tracking\n+                            if self.fcx.sess().opts.unstable_opts.drop_tracking\n                                 && self\n                                     .drop_ranges\n                                     .is_dropped_at(hir_id, yield_data.expr_and_pat_count)"}, {"sha": "14b226d91cbf864e7256227aeedd66589092fb08", "filename": "compiler/rustc_typeck/src/check/generator_interior/drop_ranges.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -38,7 +38,7 @@ pub fn compute_drop_ranges<'a, 'tcx>(\n     def_id: DefId,\n     body: &'tcx Body<'tcx>,\n ) -> DropRanges {\n-    if fcx.sess().opts.debugging_opts.drop_tracking {\n+    if fcx.sess().opts.unstable_opts.drop_tracking {\n         let consumed_borrowed_places = find_consumed_and_borrowed(fcx, def_id, body);\n \n         let typeck_results = &fcx.typeck_results.borrow();"}, {"sha": "da2db3f2e30ab9b25a7da7fb8c39873a840c78c5", "filename": "compiler/rustc_typeck/src/check/generator_interior/drop_ranges/cfg_build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -33,7 +33,7 @@ pub(super) fn build_control_flow_graph<'tcx>(\n     intravisit::walk_body(&mut drop_range_visitor, body);\n \n     drop_range_visitor.drop_ranges.process_deferred_edges();\n-    if let Some(filename) = &tcx.sess.opts.debugging_opts.dump_drop_tracking_cfg {\n+    if let Some(filename) = &tcx.sess.opts.unstable_opts.dump_drop_tracking_cfg {\n         super::cfg_visualize::write_graph_to_file(&drop_range_visitor.drop_ranges, filename, tcx);\n     }\n "}, {"sha": "416d33c7aa040501efc283bdb68677a35dd25adf", "filename": "compiler/rustc_typeck/src/check/method/probe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -1065,7 +1065,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n         let pick = self.pick_all_method(Some(&mut unstable_candidates));\n \n         // In this case unstable picking is done by `pick_method`.\n-        if !self.tcx.sess.opts.debugging_opts.pick_stable_methods_before_any_unstable {\n+        if !self.tcx.sess.opts.unstable_opts.pick_stable_methods_before_any_unstable {\n             return pick;\n         }\n \n@@ -1269,7 +1269,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n         self_ty: Ty<'tcx>,\n         mut unstable_candidates: Option<&mut Vec<(Candidate<'tcx>, Symbol)>>,\n     ) -> Option<PickResult<'tcx>> {\n-        if !self.tcx.sess.opts.debugging_opts.pick_stable_methods_before_any_unstable {\n+        if !self.tcx.sess.opts.unstable_opts.pick_stable_methods_before_any_unstable {\n             return self.pick_method_with_unstable(self_ty);\n         }\n "}, {"sha": "824ddb10a37b38d2a5d6388568bc82d7ce9b4ce6", "filename": "compiler/rustc_typeck/src/check/upvar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -315,7 +315,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             .collect();\n         self.typeck_results.borrow_mut().closure_fake_reads.insert(closure_def_id, fake_reads);\n \n-        if self.tcx.sess.opts.debugging_opts.profile_closures {\n+        if self.tcx.sess.opts.unstable_opts.profile_closures {\n             self.typeck_results.borrow_mut().closure_size_eval.insert(\n                 closure_def_id,\n                 ClosureSizeProfileData {"}, {"sha": "ff41324ef2645ee68ddac4dcbc0a83c4cba54b53", "filename": "src/doc/man/rustc.1", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/src%2Fdoc%2Fman%2Frustc.1", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/src%2Fdoc%2Fman%2Frustc.1", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fman%2Frustc.1?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -143,7 +143,7 @@ Specify where an external rust library is located. These should match\n Override the system root.\n .TP\n \\fB\\-Z\\fR \\fIFLAG\\fR\n-Set internal debugging options.\n+Set unstable / perma-unstable options.\n Use \\fI\\-Z help\\fR to print available options.\n .TP\n \\fB\\-\\-color\\fR auto|always|never"}, {"sha": "2c98cba90d718e67cf0b26ed5e4fc618dd93899f", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -1502,7 +1502,7 @@ impl<'tcx> Clean<'tcx, Type> for hir::Ty<'tcx> {\n /// Returns `None` if the type could not be normalized\n fn normalize<'tcx>(cx: &mut DocContext<'tcx>, ty: Ty<'_>) -> Option<Ty<'tcx>> {\n     // HACK: low-churn fix for #79459 while we wait for a trait normalization fix\n-    if !cx.tcx.sess.opts.debugging_opts.normalize_docs {\n+    if !cx.tcx.sess.opts.unstable_opts.normalize_docs {\n         return None;\n     }\n "}, {"sha": "8a8cc272e8195a22a3f9b0677aaa0028d319033e", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -12,7 +12,7 @@ use rustc_session::config::{\n };\n use rustc_session::config::{get_cmd_lint_options, nightly_options};\n use rustc_session::config::{\n-    CodegenOptions, DebuggingOptions, ErrorOutputType, Externs, JsonUnusedExterns,\n+    CodegenOptions, ErrorOutputType, Externs, JsonUnusedExterns, UnstableOptions,\n };\n use rustc_session::getopts;\n use rustc_session::lint::Level;\n@@ -91,10 +91,10 @@ pub(crate) struct Options {\n     pub(crate) codegen_options: CodegenOptions,\n     /// Codegen options strings to hand to the compiler.\n     pub(crate) codegen_options_strs: Vec<String>,\n-    /// Debugging (`-Z`) options to pass to the compiler.\n-    pub(crate) debugging_opts: DebuggingOptions,\n-    /// Debugging (`-Z`) options strings to pass to the compiler.\n-    pub(crate) debugging_opts_strs: Vec<String>,\n+    /// Unstable (`-Z`) options to pass to the compiler.\n+    pub(crate) unstable_opts: UnstableOptions,\n+    /// Unstable (`-Z`) options strings to pass to the compiler.\n+    pub(crate) unstable_opts_strs: Vec<String>,\n     /// The target used to compile the crate against.\n     pub(crate) target: TargetTriple,\n     /// Edition used when reading the crate. Defaults to \"2015\". Also used by default when\n@@ -181,7 +181,7 @@ impl fmt::Debug for Options {\n             .field(\"cfgs\", &self.cfgs)\n             .field(\"check-cfgs\", &self.check_cfgs)\n             .field(\"codegen_options\", &\"...\")\n-            .field(\"debugging_options\", &\"...\")\n+            .field(\"unstable_options\", &\"...\")\n             .field(\"target\", &self.target)\n             .field(\"edition\", &self.edition)\n             .field(\"maybe_sysroot\", &self.maybe_sysroot)\n@@ -331,7 +331,7 @@ impl Options {\n \n         let z_flags = matches.opt_strs(\"Z\");\n         if z_flags.iter().any(|x| *x == \"help\") {\n-            print_flag_list(\"-Z\", config::DB_OPTIONS);\n+            print_flag_list(\"-Z\", config::Z_OPTIONS);\n             return Err(0);\n         }\n         let c_flags = matches.opt_strs(\"C\");\n@@ -347,9 +347,9 @@ impl Options {\n         let diagnostic_width = matches.opt_get(\"diagnostic-width\").unwrap_or_default();\n \n         let codegen_options = CodegenOptions::build(matches, error_format);\n-        let debugging_opts = DebuggingOptions::build(matches, error_format);\n+        let unstable_opts = UnstableOptions::build(matches, error_format);\n \n-        let diag = new_handler(error_format, None, diagnostic_width, &debugging_opts);\n+        let diag = new_handler(error_format, None, diagnostic_width, &unstable_opts);\n \n         // check for deprecated options\n         check_deprecated_options(matches, &diag);\n@@ -454,7 +454,7 @@ impl Options {\n             .iter()\n             .map(|s| SearchPath::from_cli_opt(s, error_format))\n             .collect();\n-        let externs = parse_externs(matches, &debugging_opts, error_format);\n+        let externs = parse_externs(matches, &unstable_opts, error_format);\n         let extern_html_root_urls = match parse_extern_html_roots(matches) {\n             Ok(ex) => ex,\n             Err(err) => {\n@@ -670,7 +670,7 @@ impl Options {\n         let persist_doctests = matches.opt_str(\"persist-doctests\").map(PathBuf::from);\n         let test_builder = matches.opt_str(\"test-builder\").map(PathBuf::from);\n         let codegen_options_strs = matches.opt_strs(\"C\");\n-        let debugging_opts_strs = matches.opt_strs(\"Z\");\n+        let unstable_opts_strs = matches.opt_strs(\"Z\");\n         let lib_strs = matches.opt_strs(\"L\");\n         let extern_strs = matches.opt_strs(\"extern\");\n         let runtool = matches.opt_str(\"runtool\");\n@@ -711,8 +711,8 @@ impl Options {\n             check_cfgs,\n             codegen_options,\n             codegen_options_strs,\n-            debugging_opts,\n-            debugging_opts_strs,\n+            unstable_opts,\n+            unstable_opts_strs,\n             target,\n             edition,\n             maybe_sysroot,"}, {"sha": "a658e78bf60c656ddf8a534e7f9f1723d30998a9", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -32,7 +32,7 @@ use crate::formats::cache::Cache;\n use crate::passes::collect_intra_doc_links::PreprocessedMarkdownLink;\n use crate::passes::{self, Condition::*};\n \n-pub(crate) use rustc_session::config::{DebuggingOptions, Input, Options};\n+pub(crate) use rustc_session::config::{Input, Options, UnstableOptions};\n \n pub(crate) struct ResolverCaches {\n     pub(crate) markdown_links: Option<FxHashMap<String, Vec<PreprocessedMarkdownLink>>>,\n@@ -155,7 +155,7 @@ pub(crate) fn new_handler(\n     error_format: ErrorOutputType,\n     source_map: Option<Lrc<source_map::SourceMap>>,\n     diagnostic_width: Option<usize>,\n-    debugging_opts: &DebuggingOptions,\n+    unstable_opts: &UnstableOptions,\n ) -> rustc_errors::Handler {\n     let fallback_bundle =\n         rustc_errors::fallback_fluent_bundle(rustc_errors::DEFAULT_LOCALE_RESOURCES, false);\n@@ -169,11 +169,11 @@ pub(crate) fn new_handler(\n                     None,\n                     fallback_bundle,\n                     short,\n-                    debugging_opts.teach,\n+                    unstable_opts.teach,\n                     diagnostic_width,\n                     false,\n                 )\n-                .ui_testing(debugging_opts.ui_testing),\n+                .ui_testing(unstable_opts.ui_testing),\n             )\n         }\n         ErrorOutputType::Json { pretty, json_rendered } => {\n@@ -191,14 +191,14 @@ pub(crate) fn new_handler(\n                     diagnostic_width,\n                     false,\n                 )\n-                .ui_testing(debugging_opts.ui_testing),\n+                .ui_testing(unstable_opts.ui_testing),\n             )\n         }\n     };\n \n     rustc_errors::Handler::with_emitter_and_flags(\n         emitter,\n-        debugging_opts.diagnostic_handler_flags(true),\n+        unstable_opts.diagnostic_handler_flags(true),\n     )\n }\n \n@@ -215,7 +215,7 @@ pub(crate) fn create_config(\n         mut cfgs,\n         check_cfgs,\n         codegen_options,\n-        debugging_opts,\n+        unstable_opts,\n         target,\n         edition,\n         maybe_sysroot,\n@@ -266,7 +266,7 @@ pub(crate) fn create_config(\n         target_triple: target,\n         unstable_features: UnstableFeatures::from_environment(crate_name.as_deref()),\n         actually_rustdoc: true,\n-        debugging_opts,\n+        unstable_opts,\n         error_format,\n         diagnostic_width,\n         edition,"}, {"sha": "568bad2a382c1a754ab9a85ccb239234cdb47917", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -357,8 +357,8 @@ fn run_test(\n     for codegen_options_str in &rustdoc_options.codegen_options_strs {\n         compiler.arg(\"-C\").arg(&codegen_options_str);\n     }\n-    for debugging_option_str in &rustdoc_options.debugging_opts_strs {\n-        compiler.arg(\"-Z\").arg(&debugging_option_str);\n+    for unstable_option_str in &rustdoc_options.unstable_opts_strs {\n+        compiler.arg(\"-Z\").arg(&unstable_option_str);\n     }\n     if no_run && !lang_string.compile_fail && rustdoc_options.persist_doctests.is_none() {\n         compiler.arg(\"--emit=metadata\");"}, {"sha": "f7dc91a78323372d1bacbc663c2c22a9c30c28f1", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -366,7 +366,7 @@ fn opts() -> Vec<RustcOptGroup> {\n             )\n         }),\n         unstable(\"Z\", |o| {\n-            o.optmulti(\"Z\", \"\", \"internal and debugging options (only on nightly build)\", \"FLAG\")\n+            o.optmulti(\"Z\", \"\", \"unstable / perma-unstable options (only on nightly build)\", \"FLAG\")\n         }),\n         stable(\"sysroot\", |o| o.optopt(\"\", \"sysroot\", \"Override the system root\", \"PATH\")),\n         unstable(\"playground-url\", |o| {\n@@ -745,7 +745,7 @@ fn main_options(options: config::Options) -> MainResult {\n         options.error_format,\n         None,\n         options.diagnostic_width,\n-        &options.debugging_opts,\n+        &options.unstable_opts,\n     );\n \n     match (options.should_test, options.markdown_input()) {\n@@ -787,7 +787,7 @@ fn main_options(options: config::Options) -> MainResult {\n \n         if sess.opts.describe_lints {\n             let mut lint_store = rustc_lint::new_lint_store(\n-                sess.opts.debugging_opts.no_interleave_lints,\n+                sess.opts.unstable_opts.no_interleave_lints,\n                 sess.unstable_options(),\n             );\n             let registered_lints = if let Some(register_lints) = compiler.register_lints() {"}, {"sha": "80cd08ee16734ce908d2fe8473340b51e909657c", "filename": "src/test/run-make/issue-88756-default-output/output-default.stdout", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/src%2Ftest%2Frun-make%2Fissue-88756-default-output%2Foutput-default.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/src%2Ftest%2Frun-make%2Fissue-88756-default-output%2Foutput-default.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-88756-default-output%2Foutput-default.stdout?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -68,7 +68,8 @@ Options:\n                         doc with your own theme. However, your theme might\n                         break if the rustdoc's generated HTML changes, so be\n                         careful!\n-    -Z FLAG             internal and debugging options (only on nightly build)\n+    -Z FLAG             unstable / perma-unstable options (only on nightly\n+                        build)\n         --sysroot PATH  Override the system root\n         --playground-url URL\n                         URL to send code snippets to, may be reset by"}, {"sha": "d0e8d4719d307d58921da5153bd4ccab40632f57", "filename": "src/test/ui/invalid-compile-flags/branch-protection-missing-pac-ret.BADFLAGS.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/src%2Ftest%2Fui%2Finvalid-compile-flags%2Fbranch-protection-missing-pac-ret.BADFLAGS.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/src%2Ftest%2Fui%2Finvalid-compile-flags%2Fbranch-protection-missing-pac-ret.BADFLAGS.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid-compile-flags%2Fbranch-protection-missing-pac-ret.BADFLAGS.stderr?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -1,2 +1,2 @@\n-error: incorrect value `leaf` for debugging option `branch-protection` - a `,` separated combination of `bti`, `b-key`, `pac-ret`, or `leaf` was expected\n+error: incorrect value `leaf` for unstable option `branch-protection` - a `,` separated combination of `bti`, `b-key`, `pac-ret`, or `leaf` was expected\n "}, {"sha": "c219c7de830efdd275e7f2e4d788bd4543b6ab82", "filename": "src/tools/clippy/src/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/src%2Ftools%2Fclippy%2Fsrc%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9765cff18a3c4ba2962ea59d4c3f6966f9700c/src%2Ftools%2Fclippy%2Fsrc%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fsrc%2Fdriver.rs?ref=3c9765cff18a3c4ba2962ea59d4c3f6966f9700c", "patch": "@@ -117,7 +117,7 @@ impl rustc_driver::Callbacks for ClippyCallbacks {\n         // run on the unoptimized MIR. On the other hand this results in some false negatives. If\n         // MIR passes can be enabled / disabled separately, we should figure out, what passes to\n         // use for Clippy.\n-        config.opts.debugging_opts.mir_opt_level = Some(0);\n+        config.opts.unstable_opts.mir_opt_level = Some(0);\n     }\n }\n "}]}