{"sha": "e39abcfad905ec8002e826f57656b82475b60c5a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzOWFiY2ZhZDkwNWVjODAwMmU4MjZmNTc2NTZiODI0NzViNjBjNWE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-15T03:29:34Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-23T13:47:20Z"}, "message": "harden & split borrowck-pat-at-and-box", "tree": {"sha": "c9ee248b59f00c3821a977086958d78f150762dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c9ee248b59f00c3821a977086958d78f150762dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e39abcfad905ec8002e826f57656b82475b60c5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e39abcfad905ec8002e826f57656b82475b60c5a", "html_url": "https://github.com/rust-lang/rust/commit/e39abcfad905ec8002e826f57656b82475b60c5a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e39abcfad905ec8002e826f57656b82475b60c5a/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48f2766522283f20aed612d51dacfb83760b75f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/48f2766522283f20aed612d51dacfb83760b75f0", "html_url": "https://github.com/rust-lang/rust/commit/48f2766522283f20aed612d51dacfb83760b75f0"}], "stats": {"total": 201, "additions": 139, "deletions": 62}, "files": [{"sha": "d88ca2459bb9ab24d033ecb8c5a7a2213961015a", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-at-and-box-pass.rs", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/e39abcfad905ec8002e826f57656b82475b60c5a/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e39abcfad905ec8002e826f57656b82475b60c5a/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box-pass.rs?ref=e39abcfad905ec8002e826f57656b82475b60c5a", "patch": "@@ -0,0 +1,77 @@\n+// check-pass\n+\n+// Test `@` patterns combined with `box` patterns.\n+\n+#![feature(bindings_after_at)]\n+//~^ WARN the feature `bindings_after_at` is incomplete and may cause the compiler to crash\n+#![feature(box_patterns)]\n+#![feature(slice_patterns)]\n+\n+#[derive(Copy, Clone)]\n+struct C;\n+\n+fn c() -> C { C }\n+\n+struct NC;\n+\n+fn nc() -> NC { NC }\n+\n+fn main() {\n+    let ref a @ box b = Box::new(C); // OK; the type is `Copy`.\n+    drop(b);\n+    drop(b);\n+    drop(a);\n+\n+    let ref a @ box b = Box::new(c()); // OK; the type is `Copy`.\n+    drop(b);\n+    drop(b);\n+    drop(a);\n+\n+    fn f3(ref a @ box b: Box<C>) { // OK; the type is `Copy`.\n+        drop(b);\n+        drop(b);\n+        drop(a);\n+    }\n+    match Box::new(c()) {\n+        ref a @ box b => { // OK; the type is `Copy`.\n+            drop(b);\n+            drop(b);\n+            drop(a);\n+        }\n+    }\n+\n+    let ref a @ box ref b = Box::new(NC); // OK.\n+    drop(a);\n+    drop(b);\n+\n+    fn f4(ref a @ box ref b: Box<NC>) { // OK.\n+        drop(a);\n+        drop(b)\n+    }\n+\n+    match Box::new(nc()) {\n+        ref a @ box ref b => { // OK.\n+            drop(a);\n+            drop(b);\n+        }\n+    }\n+\n+    match Box::new([Ok(c()), Err(nc()), Ok(c())]) {\n+        box [Ok(a), ref xs @ .., Err(ref b)] => {\n+            let _: C = a;\n+            let _: &[Result<C, NC>; 1] = xs;\n+            let _: &NC = b;\n+        }\n+        _ => {}\n+    }\n+\n+    match [Ok(Box::new(c())), Err(Box::new(nc())), Ok(Box::new(c())), Ok(Box::new(c()))] {\n+        [Ok(box a), ref xs @ .., Err(box ref b), Err(box ref c)] => {\n+            let _: C = a;\n+            let _: &[Result<Box<C>, Box<NC>>; 1] = xs;\n+            let _: &NC = b;\n+            let _: &NC = c;\n+        }\n+        _ => {}\n+    }\n+}"}, {"sha": "e981b3428a72b7d3025a7ece3838714abec1a50a", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-at-and-box-pass.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e39abcfad905ec8002e826f57656b82475b60c5a/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box-pass.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e39abcfad905ec8002e826f57656b82475b60c5a/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box-pass.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box-pass.stderr?ref=e39abcfad905ec8002e826f57656b82475b60c5a", "patch": "@@ -0,0 +1,8 @@\n+warning: the feature `bindings_after_at` is incomplete and may cause the compiler to crash\n+  --> $DIR/borrowck-pat-at-and-box-pass.rs:5:12\n+   |\n+LL | #![feature(bindings_after_at)]\n+   |            ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+"}, {"sha": "32fb962b55c2ebf0629c4b61dc8befe3af3cf66c", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-at-and-box.rs", "status": "modified", "additions": 13, "deletions": 39, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/e39abcfad905ec8002e826f57656b82475b60c5a/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e39abcfad905ec8002e826f57656b82475b60c5a/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box.rs?ref=e39abcfad905ec8002e826f57656b82475b60c5a", "patch": "@@ -3,6 +3,7 @@\n #![feature(bindings_after_at)]\n //~^ WARN the feature `bindings_after_at` is incomplete and may cause the compiler to crash\n #![feature(box_patterns)]\n+#![feature(slice_patterns)]\n \n #[derive(Copy, Clone)]\n struct C;\n@@ -34,47 +35,8 @@ fn main() {\n     //~^ ERROR cannot bind by-move with sub-bindings\n     //~| ERROR use of moved value\n \n-    let ref a @ box b = Box::new(C); // OK; the type is `Copy`.\n-    drop(b);\n-    drop(b);\n-    drop(a);\n-\n-    let ref a @ box b = Box::new(c()); // OK; the type is `Copy`.\n-    drop(b);\n-    drop(b);\n-    drop(a);\n-\n-    fn f3(ref a @ box b: Box<C>) { // OK; the type is `Copy`.\n-        drop(b);\n-        drop(b);\n-        drop(a);\n-    }\n-    match Box::new(c()) {\n-        ref a @ box b => { // OK; the type is `Copy`.\n-            drop(b);\n-            drop(b);\n-            drop(a);\n-        }\n-    }\n-\n     let ref a @ box b = Box::new(NC); //~ ERROR cannot bind by-move and by-ref in the same pattern\n \n-    let ref a @ box ref b = Box::new(NC); // OK.\n-    drop(a);\n-    drop(b);\n-\n-    fn f4(ref a @ box ref b: Box<NC>) { // OK.\n-        drop(a);\n-        drop(b)\n-    }\n-\n-    match Box::new(nc()) {\n-        ref a @ box ref b => { // OK.\n-            drop(a);\n-            drop(b);\n-        }\n-    }\n-\n     let ref a @ box ref mut b = Box::new(nc());\n     //~^ ERROR cannot borrow `a` as mutable because it is also borrowed as immutable\n     let ref a @ box ref mut b = Box::new(NC);\n@@ -109,4 +71,16 @@ fn main() {\n             drop(b);\n         }\n     }\n+\n+    match Box::new([Ok(c()), Err(nc()), Ok(c())]) {\n+        box [Ok(a), ref xs @ .., Err(b)] => {}\n+        //~^ ERROR cannot bind by-move and by-ref in the same pattern\n+        _ => {}\n+    }\n+\n+    match [Ok(Box::new(c())), Err(Box::new(nc())), Ok(Box::new(c())), Ok(Box::new(c()))] {\n+        [Ok(box ref a), ref xs @ .., Err(box b), Err(box ref mut c)] => {}\n+        //~^ ERROR cannot bind by-move and by-ref in the same pattern\n+        _ => {}\n+    }\n }"}, {"sha": "05e80085e6b97ee0d0918a4b3ae54ad45b3af4b7", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-at-and-box.stderr", "status": "modified", "additions": 41, "deletions": 23, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/e39abcfad905ec8002e826f57656b82475b60c5a/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e39abcfad905ec8002e826f57656b82475b60c5a/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box.stderr?ref=e39abcfad905ec8002e826f57656b82475b60c5a", "patch": "@@ -7,25 +7,25 @@ LL | #![feature(bindings_after_at)]\n    = note: `#[warn(incomplete_features)]` on by default\n \n error[E0007]: cannot bind by-move with sub-bindings\n-  --> $DIR/borrowck-pat-at-and-box.rs:17:9\n+  --> $DIR/borrowck-pat-at-and-box.rs:18:9\n    |\n LL |     let a @ box &b = Box::new(&C);\n    |         ^^^^^^^^^^ binds an already bound by-move value by moving it\n \n error[E0007]: cannot bind by-move with sub-bindings\n-  --> $DIR/borrowck-pat-at-and-box.rs:21:9\n+  --> $DIR/borrowck-pat-at-and-box.rs:22:9\n    |\n LL |     let a @ box b = Box::new(C);\n    |         ^^^^^^^^^ binds an already bound by-move value by moving it\n \n error[E0007]: cannot bind by-move with sub-bindings\n-  --> $DIR/borrowck-pat-at-and-box.rs:33:25\n+  --> $DIR/borrowck-pat-at-and-box.rs:34:25\n    |\n LL |     match Box::new(C) { a @ box b => {} }\n    |                         ^^^^^^^^^ binds an already bound by-move value by moving it\n \n error[E0009]: cannot bind by-move and by-ref in the same pattern\n-  --> $DIR/borrowck-pat-at-and-box.rs:60:21\n+  --> $DIR/borrowck-pat-at-and-box.rs:38:21\n    |\n LL |     let ref a @ box b = Box::new(NC);\n    |         ------------^\n@@ -34,7 +34,7 @@ LL |     let ref a @ box b = Box::new(NC);\n    |         by-ref pattern here\n \n error: cannot borrow `a` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-at-and-box.rs:78:9\n+  --> $DIR/borrowck-pat-at-and-box.rs:40:9\n    |\n LL |     let ref a @ box ref mut b = Box::new(nc());\n    |         -----^^^^^^^---------\n@@ -43,7 +43,7 @@ LL |     let ref a @ box ref mut b = Box::new(nc());\n    |         immutable borrow occurs here\n \n error: cannot borrow `a` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-at-and-box.rs:80:9\n+  --> $DIR/borrowck-pat-at-and-box.rs:42:9\n    |\n LL |     let ref a @ box ref mut b = Box::new(NC);\n    |         -----^^^^^^^---------\n@@ -52,7 +52,7 @@ LL |     let ref a @ box ref mut b = Box::new(NC);\n    |         immutable borrow occurs here\n \n error: cannot borrow `a` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-at-and-box.rs:82:9\n+  --> $DIR/borrowck-pat-at-and-box.rs:44:9\n    |\n LL |     let ref a @ box ref mut b = Box::new(NC);\n    |         -----^^^^^^^---------\n@@ -61,7 +61,7 @@ LL |     let ref a @ box ref mut b = Box::new(NC);\n    |         immutable borrow occurs here\n \n error: cannot borrow `a` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-at-and-box.rs:85:9\n+  --> $DIR/borrowck-pat-at-and-box.rs:47:9\n    |\n LL |     let ref a @ box ref mut b = Box::new(NC);\n    |         -----^^^^^^^---------\n@@ -70,7 +70,7 @@ LL |     let ref a @ box ref mut b = Box::new(NC);\n    |         immutable borrow occurs here\n \n error: cannot borrow `a` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-at-and-box.rs:91:9\n+  --> $DIR/borrowck-pat-at-and-box.rs:53:9\n    |\n LL |     let ref mut a @ box ref b = Box::new(NC);\n    |         ---------^^^^^^^-----\n@@ -79,28 +79,46 @@ LL |     let ref mut a @ box ref b = Box::new(NC);\n    |         mutable borrow occurs here\n \n error: cannot borrow `a` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-at-and-box.rs:105:9\n+  --> $DIR/borrowck-pat-at-and-box.rs:67:9\n    |\n LL |         ref mut a @ box ref b => {\n    |         ---------^^^^^^^-----\n    |         |               |\n    |         |               immutable borrow occurs here\n    |         mutable borrow occurs here\n \n+error[E0009]: cannot bind by-move and by-ref in the same pattern\n+  --> $DIR/borrowck-pat-at-and-box.rs:76:38\n+   |\n+LL |         box [Ok(a), ref xs @ .., Err(b)] => {}\n+   |                     -----------      ^ by-move pattern here\n+   |                     |\n+   |                     by-ref pattern here\n+\n+error[E0009]: cannot bind by-move and by-ref in the same pattern\n+  --> $DIR/borrowck-pat-at-and-box.rs:82:46\n+   |\n+LL |         [Ok(box ref a), ref xs @ .., Err(box b), Err(box ref mut c)] => {}\n+   |                 -----   -----------          ^           --------- by-ref pattern here\n+   |                 |       |                    |\n+   |                 |       |                    by-move pattern here\n+   |                 |       by-ref pattern here\n+   |                 by-ref pattern here\n+\n error[E0007]: cannot bind by-move with sub-bindings\n-  --> $DIR/borrowck-pat-at-and-box.rs:25:11\n+  --> $DIR/borrowck-pat-at-and-box.rs:26:11\n    |\n LL |     fn f1(a @ box &b: Box<&C>) {}\n    |           ^^^^^^^^^^ binds an already bound by-move value by moving it\n \n error[E0007]: cannot bind by-move with sub-bindings\n-  --> $DIR/borrowck-pat-at-and-box.rs:29:11\n+  --> $DIR/borrowck-pat-at-and-box.rs:30:11\n    |\n LL |     fn f2(a @ box b: Box<C>) {}\n    |           ^^^^^^^^^ binds an already bound by-move value by moving it\n \n error: cannot borrow `a` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-at-and-box.rs:97:11\n+  --> $DIR/borrowck-pat-at-and-box.rs:59:11\n    |\n LL |     fn f5(ref mut a @ box ref b: Box<NC>) {\n    |           ---------^^^^^^^-----\n@@ -109,7 +127,7 @@ LL |     fn f5(ref mut a @ box ref b: Box<NC>) {\n    |           mutable borrow occurs here\n \n error[E0382]: use of moved value\n-  --> $DIR/borrowck-pat-at-and-box.rs:17:18\n+  --> $DIR/borrowck-pat-at-and-box.rs:18:18\n    |\n LL |     let a @ box &b = Box::new(&C);\n    |         ---------^   ------------ move occurs because value has type `std::boxed::Box<&C>`, which does not implement the `Copy` trait\n@@ -118,7 +136,7 @@ LL |     let a @ box &b = Box::new(&C);\n    |         value moved here\n \n error[E0382]: use of moved value\n-  --> $DIR/borrowck-pat-at-and-box.rs:21:17\n+  --> $DIR/borrowck-pat-at-and-box.rs:22:17\n    |\n LL |     let a @ box b = Box::new(C);\n    |         --------^   ----------- move occurs because value has type `std::boxed::Box<C>`, which does not implement the `Copy` trait\n@@ -127,7 +145,7 @@ LL |     let a @ box b = Box::new(C);\n    |         value moved here\n \n error[E0382]: use of moved value\n-  --> $DIR/borrowck-pat-at-and-box.rs:33:33\n+  --> $DIR/borrowck-pat-at-and-box.rs:34:33\n    |\n LL |     match Box::new(C) { a @ box b => {} }\n    |           -----------   --------^\n@@ -137,7 +155,7 @@ LL |     match Box::new(C) { a @ box b => {} }\n    |           move occurs because value has type `std::boxed::Box<C>`, which does not implement the `Copy` trait\n \n error[E0502]: cannot borrow `_` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-at-and-box.rs:85:21\n+  --> $DIR/borrowck-pat-at-and-box.rs:47:21\n    |\n LL |     let ref a @ box ref mut b = Box::new(NC);\n    |         ------------^^^^^^^^^\n@@ -149,7 +167,7 @@ LL |     drop(a);\n    |          - immutable borrow later used here\n \n error[E0502]: cannot borrow `_` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-at-and-box.rs:91:25\n+  --> $DIR/borrowck-pat-at-and-box.rs:53:25\n    |\n LL |     let ref mut a @ box ref b = Box::new(NC);\n    |         ----------------^^^^^\n@@ -161,7 +179,7 @@ LL |     *a = Box::new(NC);\n    |     -- mutable borrow later used here\n \n error[E0502]: cannot borrow `_` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-at-and-box.rs:105:25\n+  --> $DIR/borrowck-pat-at-and-box.rs:67:25\n    |\n LL |         ref mut a @ box ref b => {\n    |         ----------------^^^^^\n@@ -173,7 +191,7 @@ LL |             *a = Box::new(NC);\n    |             -- mutable borrow later used here\n \n error[E0382]: use of moved value\n-  --> $DIR/borrowck-pat-at-and-box.rs:25:20\n+  --> $DIR/borrowck-pat-at-and-box.rs:26:20\n    |\n LL |     fn f1(a @ box &b: Box<&C>) {}\n    |           ---------^\n@@ -183,7 +201,7 @@ LL |     fn f1(a @ box &b: Box<&C>) {}\n    |           move occurs because value has type `std::boxed::Box<&C>`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value\n-  --> $DIR/borrowck-pat-at-and-box.rs:29:19\n+  --> $DIR/borrowck-pat-at-and-box.rs:30:19\n    |\n LL |     fn f2(a @ box b: Box<C>) {}\n    |           --------^\n@@ -193,7 +211,7 @@ LL |     fn f2(a @ box b: Box<C>) {}\n    |           move occurs because value has type `std::boxed::Box<C>`, which does not implement the `Copy` trait\n \n error[E0502]: cannot borrow `_` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-at-and-box.rs:97:27\n+  --> $DIR/borrowck-pat-at-and-box.rs:59:27\n    |\n LL |     fn f5(ref mut a @ box ref b: Box<NC>) {\n    |           ----------------^^^^^\n@@ -204,7 +222,7 @@ LL |     fn f5(ref mut a @ box ref b: Box<NC>) {\n LL |         *a = Box::new(NC);\n    |         -- mutable borrow later used here\n \n-error: aborting due to 22 previous errors\n+error: aborting due to 24 previous errors\n \n Some errors have detailed explanations: E0007, E0009, E0382, E0502.\n For more information about an error, try `rustc --explain E0007`."}]}