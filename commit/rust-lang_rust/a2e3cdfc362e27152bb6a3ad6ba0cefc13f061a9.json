{"sha": "a2e3cdfc362e27152bb6a3ad6ba0cefc13f061a9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyZTNjZGZjMzYyZTI3MTUyYmI2YTNhZDZiYTBjZWZjMTNmMDYxYTk=", "commit": {"author": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-08-08T20:07:21Z"}, "committer": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-08-08T20:07:21Z"}, "message": "extra::dlist: Use iterator::order for sequence ordering", "tree": {"sha": "09cb61e2483138ef6be6303b2d4305b045b3e602", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09cb61e2483138ef6be6303b2d4305b045b3e602"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a2e3cdfc362e27152bb6a3ad6ba0cefc13f061a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a2e3cdfc362e27152bb6a3ad6ba0cefc13f061a9", "html_url": "https://github.com/rust-lang/rust/commit/a2e3cdfc362e27152bb6a3ad6ba0cefc13f061a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a2e3cdfc362e27152bb6a3ad6ba0cefc13f061a9/comments", "author": null, "committer": null, "parents": [{"sha": "5d9fd882b7ebb911daf0f21ca81f4acc599c2686", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d9fd882b7ebb911daf0f21ca81f4acc599c2686", "html_url": "https://github.com/rust-lang/rust/commit/5d9fd882b7ebb911daf0f21ca81f4acc599c2686"}], "stats": {"total": 64, "additions": 61, "deletions": 3}, "files": [{"sha": "6e8bd01af226cc293bc2e18ab01e71e00a5c347c", "filename": "src/libextra/dlist.rs", "status": "modified", "additions": 61, "deletions": 3, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/a2e3cdfc362e27152bb6a3ad6ba0cefc13f061a9/src%2Flibextra%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2e3cdfc362e27152bb6a3ad6ba0cefc13f061a9/src%2Flibextra%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fdlist.rs?ref=a2e3cdfc362e27152bb6a3ad6ba0cefc13f061a9", "patch": "@@ -26,6 +26,7 @@ use std::cast;\n use std::ptr;\n use std::util;\n use std::iterator::{FromIterator, Extendable, Invert};\n+use std::iterator;\n \n use container::Deque;\n \n@@ -589,12 +590,27 @@ impl<A, T: Iterator<A>> Extendable<A, T> for DList<A> {\n impl<A: Eq> Eq for DList<A> {\n     fn eq(&self, other: &DList<A>) -> bool {\n         self.len() == other.len() &&\n-            self.iter().zip(other.iter()).all(|(a, b)| a.eq(b))\n+            iterator::order::eq(self.iter(), other.iter())\n     }\n \n-    #[inline]\n     fn ne(&self, other: &DList<A>) -> bool {\n-        !self.eq(other)\n+        self.len() != other.len() &&\n+            iterator::order::ne(self.iter(), other.iter())\n+    }\n+}\n+\n+impl<A: Eq + Ord> Ord for DList<A> {\n+    fn lt(&self, other: &DList<A>) -> bool {\n+        iterator::order::lt(self.iter(), other.iter())\n+    }\n+    fn le(&self, other: &DList<A>) -> bool {\n+        iterator::order::le(self.iter(), other.iter())\n+    }\n+    fn gt(&self, other: &DList<A>) -> bool {\n+        iterator::order::gt(self.iter(), other.iter())\n+    }\n+    fn ge(&self, other: &DList<A>) -> bool {\n+        iterator::order::ge(self.iter(), other.iter())\n     }\n }\n \n@@ -964,6 +980,48 @@ mod tests {\n         assert_eq!(&n, &m);\n     }\n \n+    #[test]\n+    fn test_ord() {\n+        let n: DList<int> = list_from([]);\n+        let m = list_from([1,2,3]);\n+        assert!(n < m);\n+        assert!(m > n);\n+        assert!(n <= n);\n+        assert!(n >= n);\n+    }\n+\n+    #[test]\n+    fn test_ord_nan() {\n+        let nan = 0.0/0.0;\n+        let n = list_from([nan]);\n+        let m = list_from([nan]);\n+        assert!(!(n < m));\n+        assert!(!(n > m));\n+        assert!(!(n <= m));\n+        assert!(!(n >= m));\n+\n+        let n = list_from([nan]);\n+        let one = list_from([1.0]);\n+        assert!(!(n < one));\n+        assert!(!(n > one));\n+        assert!(!(n <= one));\n+        assert!(!(n >= one));\n+\n+        let u = list_from([1.0,2.0,nan]);\n+        let v = list_from([1.0,2.0,3.0]);\n+        assert!(!(u < v));\n+        assert!(!(u > v));\n+        assert!(!(u <= v));\n+        assert!(!(u >= v));\n+\n+        let s = list_from([1.0,2.0,4.0,2.0]);\n+        let t = list_from([1.0,2.0,3.0,2.0]);\n+        assert!(!(s < t));\n+        assert!(s > one);\n+        assert!(!(s <= one));\n+        assert!(s >= one);\n+    }\n+\n     #[test]\n     fn test_fuzz() {\n         do 25.times {"}]}