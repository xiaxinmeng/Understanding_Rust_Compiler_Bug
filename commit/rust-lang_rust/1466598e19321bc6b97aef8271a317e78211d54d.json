{"sha": "1466598e19321bc6b97aef8271a317e78211d54d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0NjY1OThlMTkzMjFiYzZiOTdhZWY4MjcxYTMxN2U3ODIxMWQ1NGQ=", "commit": {"author": {"name": "Mohsen Zohrevandi", "email": "mohsen.zohrevandi@fortanix.com", "date": "2020-07-11T02:57:31Z"}, "committer": {"name": "Mohsen Zohrevandi", "email": "mohsen.zohrevandi@fortanix.com", "date": "2020-07-11T02:57:31Z"}, "message": "Address review comments", "tree": {"sha": "ba87b02f116a978b413c03b17d03f4272661bd82", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba87b02f116a978b413c03b17d03f4272661bd82"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1466598e19321bc6b97aef8271a317e78211d54d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1466598e19321bc6b97aef8271a317e78211d54d", "html_url": "https://github.com/rust-lang/rust/commit/1466598e19321bc6b97aef8271a317e78211d54d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1466598e19321bc6b97aef8271a317e78211d54d/comments", "author": {"login": "mzohreva", "id": 1142455, "node_id": "MDQ6VXNlcjExNDI0NTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1142455?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mzohreva", "html_url": "https://github.com/mzohreva", "followers_url": "https://api.github.com/users/mzohreva/followers", "following_url": "https://api.github.com/users/mzohreva/following{/other_user}", "gists_url": "https://api.github.com/users/mzohreva/gists{/gist_id}", "starred_url": "https://api.github.com/users/mzohreva/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mzohreva/subscriptions", "organizations_url": "https://api.github.com/users/mzohreva/orgs", "repos_url": "https://api.github.com/users/mzohreva/repos", "events_url": "https://api.github.com/users/mzohreva/events{/privacy}", "received_events_url": "https://api.github.com/users/mzohreva/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mzohreva", "id": 1142455, "node_id": "MDQ6VXNlcjExNDI0NTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1142455?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mzohreva", "html_url": "https://github.com/mzohreva", "followers_url": "https://api.github.com/users/mzohreva/followers", "following_url": "https://api.github.com/users/mzohreva/following{/other_user}", "gists_url": "https://api.github.com/users/mzohreva/gists{/gist_id}", "starred_url": "https://api.github.com/users/mzohreva/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mzohreva/subscriptions", "organizations_url": "https://api.github.com/users/mzohreva/orgs", "repos_url": "https://api.github.com/users/mzohreva/repos", "events_url": "https://api.github.com/users/mzohreva/events{/privacy}", "received_events_url": "https://api.github.com/users/mzohreva/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c457b67af394c37826f75d73cca10319ee96b910", "url": "https://api.github.com/repos/rust-lang/rust/commits/c457b67af394c37826f75d73cca10319ee96b910", "html_url": "https://github.com/rust-lang/rust/commit/c457b67af394c37826f75d73cca10319ee96b910"}], "stats": {"total": 74, "additions": 35, "deletions": 39}, "files": [{"sha": "c412053112bc5736f4c17af1984809791231d385", "filename": "src/libstd/sys/sgx/mod.rs", "status": "modified", "additions": 15, "deletions": 16, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/1466598e19321bc6b97aef8271a317e78211d54d/src%2Flibstd%2Fsys%2Fsgx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1466598e19321bc6b97aef8271a317e78211d54d/src%2Flibstd%2Fsys%2Fsgx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fmod.rs?ref=1466598e19321bc6b97aef8271a317e78211d54d", "patch": "@@ -115,12 +115,9 @@ pub fn decode_error_kind(code: i32) -> ErrorKind {\n // of time and timeouts in SGX model. The enclave runner serving usercalls may\n // lie about current time and/or ignore timeout values.\n //\n-// Once the event is observed, `woken_up` will be used to determine whether or\n-// not the event was spurious.\n-//\n-// FIXME: note these caveats in documentation of all public types that use this\n-// function in their execution path.\n-pub fn wait_timeout_sgx<F>(event_mask: u64, duration: crate::time::Duration, woken_up: F)\n+// Once the event is observed, `should_wake_up` will be used to determine\n+// whether or not the event was spurious.\n+pub fn usercall_wait_timeout<F>(event_mask: u64, duration: crate::time::Duration, should_wake_up: F)\n where\n     F: Fn() -> bool,\n {\n@@ -141,7 +138,9 @@ where\n                 if event_mask == 0 {\n                     rtabort!(\"expected usercalls::wait() to return Err, found Ok.\");\n                 }\n-                rtassert!(eventset & event_mask == event_mask);\n+                // A matching event is one whose bits are equal to or a subset\n+                // of `event_mask`.\n+                rtassert!(eventset & !event_mask == 0);\n                 true\n             }\n             Err(e) => {\n@@ -152,18 +151,18 @@ where\n     }\n \n     match wait_checked(event_mask, Some(duration)) {\n-        false => return,              // timed out\n-        true if woken_up() => return, // woken up\n-        true => {}                    // spurious event\n+        false => return,                    // timed out\n+        true if should_wake_up() => return, // woken up\n+        true => {}                          // spurious event\n     }\n \n     // Drain all cached events.\n     // Note that `event_mask != 0` is implied if we get here.\n     loop {\n         match wait_checked(event_mask, None) {\n-            false => break,               // no more cached events\n-            true if woken_up() => return, // woken up\n-            true => {}                    // spurious event\n+            false => break,                     // no more cached events\n+            true if should_wake_up() => return, // woken up\n+            true => {}                          // spurious event\n         }\n     }\n \n@@ -176,9 +175,9 @@ where\n     let mut remaining = duration;\n     loop {\n         match wait_checked(event_mask, Some(remaining)) {\n-            false => return,              // timed out\n-            true if woken_up() => return, // woken up\n-            true => {}                    // spurious event\n+            false => return,                    // timed out\n+            true if should_wake_up() => return, // woken up\n+            true => {}                          // spurious event\n         }\n         remaining = match duration.checked_sub(start.elapsed()) {\n             Some(remaining) => remaining,"}, {"sha": "58b6f4346bc14421b99f426f3fd72c533ea8aae4", "filename": "src/libstd/sys/sgx/thread.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1466598e19321bc6b97aef8271a317e78211d54d/src%2Flibstd%2Fsys%2Fsgx%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1466598e19321bc6b97aef8271a317e78211d54d/src%2Flibstd%2Fsys%2Fsgx%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fthread.rs?ref=1466598e19321bc6b97aef8271a317e78211d54d", "patch": "@@ -1,8 +1,7 @@\n #![cfg_attr(test, allow(dead_code))] // why is this necessary?\n-\n use crate::ffi::CStr;\n use crate::io;\n-use crate::sys::wait_timeout_sgx;\n+use crate::sys::usercall_wait_timeout;\n use crate::time::Duration;\n \n use super::abi::usercalls;\n@@ -76,7 +75,7 @@ impl Thread {\n     }\n \n     pub fn sleep(dur: Duration) {\n-        wait_timeout_sgx(0, dur, || true);\n+        usercall_wait_timeout(0, dur, || true);\n     }\n \n     pub fn join(self) {"}, {"sha": "c8ccab2247a9c35f2a5dd448c6bbd190bcf990a3", "filename": "src/libstd/sys/sgx/waitqueue.rs", "status": "modified", "additions": 17, "deletions": 20, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/1466598e19321bc6b97aef8271a317e78211d54d/src%2Flibstd%2Fsys%2Fsgx%2Fwaitqueue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1466598e19321bc6b97aef8271a317e78211d54d/src%2Flibstd%2Fsys%2Fsgx%2Fwaitqueue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fwaitqueue.rs?ref=1466598e19321bc6b97aef8271a317e78211d54d", "patch": "@@ -1,17 +1,17 @@\n-/// A simple queue implementation for synchronization primitives.\n-///\n-/// This queue is used to implement condition variable and mutexes.\n-///\n-/// Users of this API are expected to use the `WaitVariable<T>` type. Since\n-/// that type is not `Sync`, it needs to be protected by e.g., a `SpinMutex` to\n-/// allow shared access.\n-///\n-/// Since userspace may send spurious wake-ups, the wakeup event state is\n-/// recorded in the enclave. The wakeup event state is protected by a spinlock.\n-/// The queue and associated wait state are stored in a `WaitVariable`.\n+//! A simple queue implementation for synchronization primitives.\n+//!\n+//! This queue is used to implement condition variable and mutexes.\n+//!\n+//! Users of this API are expected to use the `WaitVariable<T>` type. Since\n+//! that type is not `Sync`, it needs to be protected by e.g., a `SpinMutex` to\n+//! allow shared access.\n+//!\n+//! Since userspace may send spurious wake-ups, the wakeup event state is\n+//! recorded in the enclave. The wakeup event state is protected by a spinlock.\n+//! The queue and associated wait state are stored in a `WaitVariable`.\n use crate::num::NonZeroUsize;\n use crate::ops::{Deref, DerefMut};\n-use crate::sys::wait_timeout_sgx;\n+use crate::sys::usercall_wait_timeout;\n use crate::time::Duration;\n \n use super::abi::thread;\n@@ -176,15 +176,12 @@ impl WaitQueue {\n             }));\n             let entry_lock = lock.lock().queue.inner.push(&mut entry);\n             before_wait();\n-            // don't panic, this would invalidate `entry` during unwinding\n-            wait_timeout_sgx(EV_UNPARK, timeout, || entry_lock.lock().wake);\n+            usercall_wait_timeout(EV_UNPARK, timeout, || entry_lock.lock().wake);\n             // acquire the wait queue's lock first to avoid deadlock.\n             let mut guard = lock.lock();\n-            let entry_guard = entry_lock.lock();\n-            let success = entry_guard.wake;\n+            let success = entry_lock.lock().wake;\n             if !success {\n-                // nobody is waking us up, so remove the entry from the wait queue.\n-                drop(entry_guard);\n+                // nobody is waking us up, so remove our entry from the wait queue.\n                 guard.queue.inner.remove(&mut entry);\n             }\n             success\n@@ -363,8 +360,8 @@ mod unsafe_list {\n         ///\n         /// # Safety\n         ///\n-        /// The caller must ensure that entry has been pushed prior to this\n-        /// call and has not moved since push.\n+        /// The caller must ensure that `entry` has been pushed onto `self`\n+        /// prior to this call and has not moved since then.\n         pub unsafe fn remove(&mut self, entry: &mut UnsafeListEntry<T>) {\n             rtassert!(!self.is_empty());\n             // BEFORE:"}, {"sha": "a889542fec0be8a673acdb4ae1299898771c8759", "filename": "src/test/ui/mpsc_stress.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1466598e19321bc6b97aef8271a317e78211d54d/src%2Ftest%2Fui%2Fmpsc_stress.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1466598e19321bc6b97aef8271a317e78211d54d/src%2Ftest%2Fui%2Fmpsc_stress.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmpsc_stress.rs?ref=1466598e19321bc6b97aef8271a317e78211d54d", "patch": "@@ -36,6 +36,7 @@ impl Barrier {\n     fn wait(self) {\n         self.shared.fetch_add(1, Ordering::SeqCst);\n         while self.shared.load(Ordering::SeqCst) != self.count {\n+            #[cfg(target_env = \"sgx\")]\n             thread::yield_now();\n         }\n     }"}]}