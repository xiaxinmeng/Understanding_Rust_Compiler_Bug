{"sha": "a1c26530ecf23971e371c470d147592d6e617561", "node_id": "C_kwDOAAsO6NoAKGExYzI2NTMwZWNmMjM5NzFlMzcxYzQ3MGQxNDc1OTJkNmU2MTc1NjE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-05T10:49:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-05T10:49:19Z"}, "message": "Auto merge of #13091 - ice1k:hey, r=Veykril\n\nRemove type alias definition on inline\n\nFix #13079", "tree": {"sha": "23fe53fa298583cfb001dd2b179701fdfc418f9d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23fe53fa298583cfb001dd2b179701fdfc418f9d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1c26530ecf23971e371c470d147592d6e617561", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1c26530ecf23971e371c470d147592d6e617561", "html_url": "https://github.com/rust-lang/rust/commit/a1c26530ecf23971e371c470d147592d6e617561", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1c26530ecf23971e371c470d147592d6e617561/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67920f797511c360b25dab4d30730be304848f32", "url": "https://api.github.com/repos/rust-lang/rust/commits/67920f797511c360b25dab4d30730be304848f32", "html_url": "https://github.com/rust-lang/rust/commit/67920f797511c360b25dab4d30730be304848f32"}, {"sha": "364d9c49103865c0f1f02c035f9da5c6377eaab7", "url": "https://api.github.com/repos/rust-lang/rust/commits/364d9c49103865c0f1f02c035f9da5c6377eaab7", "html_url": "https://github.com/rust-lang/rust/commit/364d9c49103865c0f1f02c035f9da5c6377eaab7"}], "stats": {"total": 160, "additions": 102, "deletions": 58}, "files": [{"sha": "1a7919a5a104d64ca22c3e6b09392ea5670587be", "filename": "crates/ide-assists/src/handlers/add_missing_match_arms.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a1c26530ecf23971e371c470d147592d6e617561/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fadd_missing_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1c26530ecf23971e371c470d147592d6e617561/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fadd_missing_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fadd_missing_match_arms.rs?ref=a1c26530ecf23971e371c470d147592d6e617561", "patch": "@@ -5,6 +5,7 @@ use hir::{Adt, Crate, HasAttrs, HasSource, ModuleDef, Semantics};\n use ide_db::RootDatabase;\n use ide_db::{famous_defs::FamousDefs, helpers::mod_path_to_ast};\n use itertools::Itertools;\n+use syntax::ast::edit_in_place::Removable;\n use syntax::ast::{self, make, AstNode, HasName, MatchArmList, MatchExpr, Pat};\n \n use crate::{"}, {"sha": "9f51cdaf8b1eb0d7eccc6ae154ec038f5118504c", "filename": "crates/ide-assists/src/handlers/inline_call.rs", "status": "modified", "additions": 20, "deletions": 17, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/a1c26530ecf23971e371c470d147592d6e617561/crates%2Fide-assists%2Fsrc%2Fhandlers%2Finline_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1c26530ecf23971e371c470d147592d6e617561/crates%2Fide-assists%2Fsrc%2Fhandlers%2Finline_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Finline_call.rs?ref=a1c26530ecf23971e371c470d147592d6e617561", "patch": "@@ -7,6 +7,7 @@ use ide_db::{\n     imports::insert_use::remove_path_if_in_use_stmt,\n     path_transform::PathTransform,\n     search::{FileReference, SearchScope},\n+    source_change::SourceChangeBuilder,\n     syntax_helpers::{insert_whitespace_into_node::insert_ws_into, node_ext::expr_as_name_ref},\n     RootDatabase,\n };\n@@ -100,18 +101,7 @@ pub(crate) fn inline_into_callers(acc: &mut Assists, ctx: &AssistContext<'_>) ->\n                 builder.edit_file(file_id);\n                 let count = refs.len();\n                 // The collects are required as we are otherwise iterating while mutating \ud83d\ude45\u200d\u2640\ufe0f\ud83d\ude45\u200d\u2642\ufe0f\n-                let (name_refs, name_refs_use): (Vec<_>, Vec<_>) = refs\n-                    .into_iter()\n-                    .filter_map(|file_ref| match file_ref.name {\n-                        ast::NameLike::NameRef(name_ref) => Some(name_ref),\n-                        _ => None,\n-                    })\n-                    .partition_map(|name_ref| {\n-                        match name_ref.syntax().ancestors().find_map(ast::UseTree::cast) {\n-                            Some(use_tree) => Either::Right(builder.make_mut(use_tree)),\n-                            None => Either::Left(name_ref),\n-                        }\n-                    });\n+                let (name_refs, name_refs_use) = split_refs_and_uses(builder, refs, Some);\n                 let call_infos: Vec<_> = name_refs\n                     .into_iter()\n                     .filter_map(CallInfo::from_name_ref)\n@@ -130,11 +120,7 @@ pub(crate) fn inline_into_callers(acc: &mut Assists, ctx: &AssistContext<'_>) ->\n                     .count();\n                 if replaced + name_refs_use.len() == count {\n                     // we replaced all usages in this file, so we can remove the imports\n-                    name_refs_use.into_iter().for_each(|use_tree| {\n-                        if let Some(path) = use_tree.path() {\n-                            remove_path_if_in_use_stmt(&path);\n-                        }\n-                    })\n+                    name_refs_use.iter().for_each(remove_path_if_in_use_stmt);\n                 } else {\n                     remove_def = false;\n                 }\n@@ -153,6 +139,23 @@ pub(crate) fn inline_into_callers(acc: &mut Assists, ctx: &AssistContext<'_>) ->\n     )\n }\n \n+pub(super) fn split_refs_and_uses<T: ast::AstNode>(\n+    builder: &mut SourceChangeBuilder,\n+    iter: impl IntoIterator<Item = FileReference>,\n+    mut map_ref: impl FnMut(ast::NameRef) -> Option<T>,\n+) -> (Vec<T>, Vec<ast::Path>) {\n+    iter.into_iter()\n+        .filter_map(|file_ref| match file_ref.name {\n+            ast::NameLike::NameRef(name_ref) => Some(name_ref),\n+            _ => None,\n+        })\n+        .filter_map(|name_ref| match name_ref.syntax().ancestors().find_map(ast::UseTree::cast) {\n+            Some(use_tree) => builder.make_mut(use_tree).path().map(Either::Right),\n+            None => map_ref(name_ref).map(Either::Left),\n+        })\n+        .partition_map(|either| either)\n+}\n+\n // Assist: inline_call\n //\n // Inlines a function or method body creating a `let` statement per parameter unless the parameter"}, {"sha": "353d467ed19f3bb9c49d1b45e6b5a6fdfb8fcd3a", "filename": "crates/ide-assists/src/handlers/inline_type_alias.rs", "status": "modified", "additions": 34, "deletions": 15, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/a1c26530ecf23971e371c470d147592d6e617561/crates%2Fide-assists%2Fsrc%2Fhandlers%2Finline_type_alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1c26530ecf23971e371c470d147592d6e617561/crates%2Fide-assists%2Fsrc%2Fhandlers%2Finline_type_alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Finline_type_alias.rs?ref=a1c26530ecf23971e371c470d147592d6e617561", "patch": "@@ -3,7 +3,10 @@\n // - Remove unused aliases if there are no longer any users, see inline_call.rs.\n \n use hir::{HasSource, PathResolution};\n-use ide_db::{defs::Definition, search::FileReference};\n+use ide_db::{\n+    defs::Definition, imports::insert_use::ast_to_remove_for_path_in_use_stmt,\n+    search::FileReference,\n+};\n use itertools::Itertools;\n use std::collections::HashMap;\n use syntax::{\n@@ -16,6 +19,8 @@ use crate::{\n     AssistId, AssistKind,\n };\n \n+use super::inline_call::split_refs_and_uses;\n+\n // Assist: inline_type_alias_uses\n //\n // Inline a type alias into all of its uses where possible.\n@@ -31,7 +36,7 @@ use crate::{\n // ```\n // ->\n // ```\n-// type A = i32;\n+//\n // fn id(x: i32) -> i32 {\n //     x\n // };\n@@ -58,32 +63,41 @@ pub(crate) fn inline_type_alias_uses(acc: &mut Assists, ctx: &AssistContext<'_>)\n         name.syntax().text_range(),\n         |builder| {\n             let usages = usages.all();\n+            let mut definition_deleted = false;\n \n             let mut inline_refs_for_file = |file_id, refs: Vec<FileReference>| {\n                 builder.edit_file(file_id);\n \n-                let path_types: Vec<ast::PathType> = refs\n-                    .into_iter()\n-                    .filter_map(|file_ref| match file_ref.name {\n-                        ast::NameLike::NameRef(path_type) => {\n-                            path_type.syntax().ancestors().nth(3).and_then(ast::PathType::cast)\n-                        }\n-                        _ => None,\n-                    })\n-                    .collect();\n+                let (path_types, path_type_uses) =\n+                    split_refs_and_uses(builder, refs, |path_type| {\n+                        path_type.syntax().ancestors().nth(3).and_then(ast::PathType::cast)\n+                    });\n \n+                path_type_uses\n+                    .iter()\n+                    .flat_map(ast_to_remove_for_path_in_use_stmt)\n+                    .for_each(|x| builder.delete(x.syntax().text_range()));\n                 for (target, replacement) in path_types.into_iter().filter_map(|path_type| {\n                     let replacement = inline(&ast_alias, &path_type)?.to_text(&concrete_type);\n                     let target = path_type.syntax().text_range();\n                     Some((target, replacement))\n                 }) {\n                     builder.replace(target, replacement);\n                 }\n+\n+                if file_id == ctx.file_id() {\n+                    builder.delete(ast_alias.syntax().text_range());\n+                    definition_deleted = true;\n+                }\n             };\n \n             for (file_id, refs) in usages.into_iter() {\n                 inline_refs_for_file(file_id, refs);\n             }\n+            if !definition_deleted {\n+                builder.edit_file(ctx.file_id());\n+                builder.delete(ast_alias.syntax().text_range());\n+            }\n         },\n     )\n }\n@@ -929,7 +943,7 @@ fn foo() {\n }\n \"#,\n                 r#\"\n-type A = u32;\n+\n \n fn foo() {\n     let _: u32 = 3;\n@@ -960,13 +974,13 @@ fn foo() {\n                 r#\"\n //- /lib.rs\n mod foo;\n-type T<E> = Vec<E>;\n+\n fn f() -> Vec<&str> {\n     vec![\"hello\"]\n }\n \n //- /foo.rs\n-use super::T;\n+\n fn foo() {\n     let _: Vec<i8> = Vec::new();\n }\n@@ -990,7 +1004,12 @@ fn foo() {\n }\n \"#,\n                 r#\"\n-use super::I;\n+//- /lib.rs\n+mod foo;\n+\n+\n+//- /foo.rs\n+\n fn foo() {\n     let _: i32 = 0;\n }"}, {"sha": "2bdbec93b1f960a211e657f43a5948eca0796b86", "filename": "crates/ide-assists/src/handlers/merge_imports.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a1c26530ecf23971e371c470d147592d6e617561/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fmerge_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1c26530ecf23971e371c470d147592d6e617561/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fmerge_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fmerge_imports.rs?ref=a1c26530ecf23971e371c470d147592d6e617561", "patch": "@@ -1,6 +1,10 @@\n use either::Either;\n use ide_db::imports::merge_imports::{try_merge_imports, try_merge_trees, MergeBehavior};\n-use syntax::{algo::neighbor, ast, match_ast, ted, AstNode, SyntaxElement, SyntaxNode};\n+use syntax::{\n+    algo::neighbor,\n+    ast::{self, edit_in_place::Removable},\n+    match_ast, ted, AstNode, SyntaxElement, SyntaxNode,\n+};\n \n use crate::{\n     assist_context::{AssistContext, Assists},\n@@ -76,7 +80,7 @@ pub(crate) fn merge_imports(acc: &mut Assists, ctx: &AssistContext<'_>) -> Optio\n                 .collect();\n             for edit in edits_mut {\n                 match edit {\n-                    Remove(it) => it.as_ref().either(ast::Use::remove, ast::UseTree::remove),\n+                    Remove(it) => it.as_ref().either(Removable::remove, Removable::remove),\n                     Replace(old, new) => ted::replace(old, new),\n                 }\n             }"}, {"sha": "1dd376ac3fd5350db8fc7fd5b696c27b968db081", "filename": "crates/ide-assists/src/handlers/move_bounds.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a1c26530ecf23971e371c470d147592d6e617561/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fmove_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1c26530ecf23971e371c470d147592d6e617561/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fmove_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fmove_bounds.rs?ref=a1c26530ecf23971e371c470d147592d6e617561", "patch": "@@ -1,5 +1,9 @@\n use syntax::{\n-    ast::{self, edit_in_place::GenericParamsOwnerEdit, make, AstNode, HasName, HasTypeBounds},\n+    ast::{\n+        self,\n+        edit_in_place::{GenericParamsOwnerEdit, Removable},\n+        make, AstNode, HasName, HasTypeBounds,\n+    },\n     match_ast,\n };\n "}, {"sha": "dac216b69b727a62646ec192031fa83aa50793b0", "filename": "crates/ide-assists/src/handlers/unmerge_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1c26530ecf23971e371c470d147592d6e617561/crates%2Fide-assists%2Fsrc%2Fhandlers%2Funmerge_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1c26530ecf23971e371c470d147592d6e617561/crates%2Fide-assists%2Fsrc%2Fhandlers%2Funmerge_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Funmerge_use.rs?ref=a1c26530ecf23971e371c470d147592d6e617561", "patch": "@@ -1,5 +1,5 @@\n use syntax::{\n-    ast::{self, make, HasVisibility},\n+    ast::{self, edit_in_place::Removable, make, HasVisibility},\n     ted::{self, Position},\n     AstNode, SyntaxKind,\n };"}, {"sha": "227e2300f92a0b258275512adca9fcadfc51f23a", "filename": "crates/ide-assists/src/tests/generated.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1c26530ecf23971e371c470d147592d6e617561/crates%2Fide-assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1c26530ecf23971e371c470d147592d6e617561/crates%2Fide-assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=a1c26530ecf23971e371c470d147592d6e617561", "patch": "@@ -1390,7 +1390,7 @@ fn foo() {\n }\n \"#####,\n         r#####\"\n-type A = i32;\n+\n fn id(x: i32) -> i32 {\n     x\n };"}, {"sha": "4ab6e2627fa75413837b55be578c1a237a4147c3", "filename": "crates/ide-assists/src/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1c26530ecf23971e371c470d147592d6e617561/crates%2Fide-assists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1c26530ecf23971e371c470d147592d6e617561/crates%2Fide-assists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Futils.rs?ref=a1c26530ecf23971e371c470d147592d6e617561", "patch": "@@ -12,7 +12,7 @@ use syntax::{\n     ast::{\n         self,\n         edit::{self, AstNodeEdit},\n-        edit_in_place::AttrsOwnerEdit,\n+        edit_in_place::{AttrsOwnerEdit, Removable},\n         make, HasArgList, HasAttrs, HasGenericParams, HasName, HasTypeBounds, Whitespace,\n     },\n     ted, AstNode, AstToken, Direction, SmolStr, SourceFile,"}, {"sha": "9be1d36634934a6405856ce820dc46989a85b13b", "filename": "crates/ide-db/src/imports/insert_use.rs", "status": "modified", "additions": 19, "deletions": 12, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/a1c26530ecf23971e371c470d147592d6e617561/crates%2Fide-db%2Fsrc%2Fimports%2Finsert_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1c26530ecf23971e371c470d147592d6e617561/crates%2Fide-db%2Fsrc%2Fimports%2Finsert_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Fimports%2Finsert_use.rs?ref=a1c26530ecf23971e371c470d147592d6e617561", "patch": "@@ -7,7 +7,10 @@ use std::cmp::Ordering;\n use hir::Semantics;\n use syntax::{\n     algo,\n-    ast::{self, make, AstNode, HasAttrs, HasModuleItem, HasVisibility, PathSegmentKind},\n+    ast::{\n+        self, edit_in_place::Removable, make, AstNode, HasAttrs, HasModuleItem, HasVisibility,\n+        PathSegmentKind,\n+    },\n     ted, Direction, NodeOrToken, SyntaxKind, SyntaxNode,\n };\n \n@@ -192,20 +195,24 @@ pub fn insert_use(scope: &ImportScope, path: ast::Path, cfg: &InsertUseConfig) {\n     insert_use_(scope, &path, cfg.group, use_item);\n }\n \n-pub fn remove_path_if_in_use_stmt(path: &ast::Path) {\n+pub fn ast_to_remove_for_path_in_use_stmt(path: &ast::Path) -> Option<Box<dyn Removable>> {\n     // FIXME: improve this\n     if path.parent_path().is_some() {\n-        return;\n+        return None;\n     }\n-    if let Some(use_tree) = path.syntax().parent().and_then(ast::UseTree::cast) {\n-        if use_tree.use_tree_list().is_some() || use_tree.star_token().is_some() {\n-            return;\n-        }\n-        if let Some(use_) = use_tree.syntax().parent().and_then(ast::Use::cast) {\n-            use_.remove();\n-            return;\n-        }\n-        use_tree.remove();\n+    let use_tree = path.syntax().parent().and_then(ast::UseTree::cast)?;\n+    if use_tree.use_tree_list().is_some() || use_tree.star_token().is_some() {\n+        return None;\n+    }\n+    if let Some(use_) = use_tree.syntax().parent().and_then(ast::Use::cast) {\n+        return Some(Box::new(use_));\n+    }\n+    Some(Box::new(use_tree))\n+}\n+\n+pub fn remove_path_if_in_use_stmt(path: &ast::Path) {\n+    if let Some(node) = ast_to_remove_for_path_in_use_stmt(path) {\n+        node.remove();\n     }\n }\n "}, {"sha": "eadebbe8a212bab90ff4a0857012ec762611865b", "filename": "crates/syntax/src/ast/edit_in_place.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a1c26530ecf23971e371c470d147592d6e617561/crates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1c26530ecf23971e371c470d147592d6e617561/crates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs?ref=a1c26530ecf23971e371c470d147592d6e617561", "patch": "@@ -248,8 +248,12 @@ impl ast::WhereClause {\n     }\n }\n \n-impl ast::TypeBoundList {\n-    pub fn remove(&self) {\n+pub trait Removable: AstNode {\n+    fn remove(&self);\n+}\n+\n+impl Removable for ast::TypeBoundList {\n+    fn remove(&self) {\n         match self.syntax().siblings_with_tokens(Direction::Prev).find(|it| it.kind() == T![:]) {\n             Some(colon) => ted::remove_all(colon..=self.syntax().clone().into()),\n             None => ted::remove(self.syntax()),\n@@ -267,8 +271,8 @@ impl ast::PathSegment {\n     }\n }\n \n-impl ast::UseTree {\n-    pub fn remove(&self) {\n+impl Removable for ast::UseTree {\n+    fn remove(&self) {\n         for dir in [Direction::Next, Direction::Prev] {\n             if let Some(next_use_tree) = neighbor(self, dir) {\n                 let separators = self\n@@ -282,7 +286,9 @@ impl ast::UseTree {\n         }\n         ted::remove(self.syntax());\n     }\n+}\n \n+impl ast::UseTree {\n     pub fn get_or_create_use_tree_list(&self) -> ast::UseTreeList {\n         match self.use_tree_list() {\n             Some(it) => it,\n@@ -373,8 +379,8 @@ impl ast::UseTreeList {\n     }\n }\n \n-impl ast::Use {\n-    pub fn remove(&self) {\n+impl Removable for ast::Use {\n+    fn remove(&self) {\n         let next_ws = self\n             .syntax()\n             .next_sibling_or_token()\n@@ -444,8 +450,8 @@ impl ast::Fn {\n     }\n }\n \n-impl ast::MatchArm {\n-    pub fn remove(&self) {\n+impl Removable for ast::MatchArm {\n+    fn remove(&self) {\n         if let Some(sibling) = self.syntax().prev_sibling_or_token() {\n             if sibling.kind() == SyntaxKind::WHITESPACE {\n                 ted::remove(sibling);"}]}