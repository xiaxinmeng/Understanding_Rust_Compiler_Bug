{"sha": "030fa9a337cb7f224c1d74fda04304c69e07787a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzMGZhOWEzMzdjYjdmMjI0YzFkNzRmZGEwNDMwNGM2OWUwNzc4N2E=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2019-11-13T14:22:48Z"}, "committer": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2019-11-13T15:47:53Z"}, "message": "Avoid using same code", "tree": {"sha": "21e24648bea9599a2559ff382e0cff240396d5e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21e24648bea9599a2559ff382e0cff240396d5e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/030fa9a337cb7f224c1d74fda04304c69e07787a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/030fa9a337cb7f224c1d74fda04304c69e07787a", "html_url": "https://github.com/rust-lang/rust/commit/030fa9a337cb7f224c1d74fda04304c69e07787a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/030fa9a337cb7f224c1d74fda04304c69e07787a/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "302cf6db74102e0a0438d83ec7f68085cf931bb9", "url": "https://api.github.com/repos/rust-lang/rust/commits/302cf6db74102e0a0438d83ec7f68085cf931bb9", "html_url": "https://github.com/rust-lang/rust/commit/302cf6db74102e0a0438d83ec7f68085cf931bb9"}], "stats": {"total": 119, "additions": 61, "deletions": 58}, "files": [{"sha": "9421dbc2b2c766cfd8183a7a511a1ebc2e0f546f", "filename": "src/librustc_typeck/check/pat.rs", "status": "modified", "additions": 61, "deletions": 58, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/030fa9a337cb7f224c1d74fda04304c69e07787a/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/030fa9a337cb7f224c1d74fda04304c69e07787a/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs?ref=030fa9a337cb7f224c1d74fda04304c69e07787a", "patch": "@@ -362,66 +362,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             || ty.is_char()\n             || ty.references_error()\n         };\n-        let lhs_compat = numeric_or_char(lhs_ty);\n-        let rhs_compat = numeric_or_char(rhs_ty);\n-\n-        if !lhs_compat || !rhs_compat {\n-            let span = if !lhs_compat && !rhs_compat {\n-                span\n-            } else if !lhs_compat {\n-                begin.span\n-            } else {\n-                end.span\n-            };\n+        let lhs_fail = !numeric_or_char(lhs_ty);\n+        let rhs_fail = !numeric_or_char(rhs_ty);\n \n-            let mut err = struct_span_err!(\n-                self.tcx.sess,\n-                span,\n-                E0029,\n-                \"only char and numeric types are allowed in range patterns\"\n+        if lhs_fail || rhs_fail {\n+            self.emit_err_pat_range(\n+                span, begin.span, end.span, lhs_fail, rhs_fail, lhs_ty, rhs_ty\n             );\n-            if !lhs_compat && !rhs_compat {\n-                err.span_label(\n-                    begin.span,\n-                    &format!(\"this is of type `{}` but it should be `char` or numeric\", lhs_ty)\n-                );\n-                err.span_label(\n-                    end.span,\n-                    &format!(\"this is of type `{}` but it should be `char` or numeric\", rhs_ty)\n-                );\n-            } else if !lhs_compat {\n-                err.span_label(\n-                    begin.span,\n-                    &format!(\"this is of type `{}` but it should be `char` or numeric\", lhs_ty)\n-                );\n-                if !rhs_ty.references_error() {\n-                    err.span_label(\n-                        end.span,\n-                        &format!(\"this is of type `{}`\", rhs_ty)\n-                    );\n-                }\n-            } else {\n-                err.span_label(\n-                    end.span,\n-                    &format!(\"this is of type `{}` but it should be `char` or numeric\", rhs_ty)\n-                );\n-                if !lhs_ty.references_error() {\n-                    err.span_label(\n-                        begin.span,\n-                        &format!(\"this is of type `{}`\", lhs_ty)\n-                    );\n-                }\n-            }\n-            if self.tcx.sess.teach(&err.get_code().unwrap()) {\n-                err.note(\n-                    \"In a match expression, only numbers and characters can be matched \\\n-                        against a range. This is because the compiler checks that the range \\\n-                        is non-empty at compile-time, and is unable to evaluate arbitrary \\\n-                        comparison functions. If you want to capture values of an orderable \\\n-                        type between two end-points, you can use a guard.\"\n-                    );\n-            }\n-            err.emit();\n             return None;\n         }\n \n@@ -435,6 +382,62 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         Some(common_type)\n     }\n \n+    fn emit_err_pat_range(\n+        &self,\n+        span: Span,\n+        begin_span: Span,\n+        end_span: Span,\n+        lhs_fail: bool,\n+        rhs_fail: bool,\n+        lhs_ty: Ty<'tcx>,\n+        rhs_ty: Ty<'tcx>,\n+    ) {\n+        let span = if lhs_fail && rhs_fail {\n+            span\n+        } else if lhs_fail {\n+            begin_span\n+        } else {\n+            end_span\n+        };\n+\n+        let mut err = struct_span_err!(\n+            self.tcx.sess,\n+            span,\n+            E0029,\n+            \"only char and numeric types are allowed in range patterns\"\n+        );\n+        let msg = |ty| {\n+            format!(\"this is of type `{}` but it should be `char` or numeric\", ty)\n+        };\n+        let mut one_side_err = |first_span, first_ty, second_span, second_ty: Ty<'_>| {\n+            err.span_label(first_span, &msg(first_ty));\n+            if !second_ty.references_error() {\n+                err.span_label(\n+                    second_span,\n+                    &format!(\"this is of type `{}`\", second_ty)\n+                );\n+            }\n+        };\n+        if lhs_fail && rhs_fail {\n+            err.span_label(begin_span, &msg(lhs_ty));\n+            err.span_label(end_span, &msg(rhs_ty));\n+        } else if lhs_fail {\n+            one_side_err(begin_span, lhs_ty, end_span, rhs_ty);\n+        } else {\n+            one_side_err(end_span, rhs_ty, begin_span, lhs_ty);\n+        }\n+        if self.tcx.sess.teach(&err.get_code().unwrap()) {\n+            err.note(\n+                \"In a match expression, only numbers and characters can be matched \\\n+                    against a range. This is because the compiler checks that the range \\\n+                    is non-empty at compile-time, and is unable to evaluate arbitrary \\\n+                    comparison functions. If you want to capture values of an orderable \\\n+                    type between two end-points, you can use a guard.\"\n+                );\n+        }\n+        err.emit();\n+    }\n+\n     fn check_pat_ident(\n         &self,\n         pat: &Pat,"}]}