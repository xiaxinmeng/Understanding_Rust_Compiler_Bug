{"sha": "53647845b917fac2a1565c72f2046f6bbad341d6", "node_id": "C_kwDOAAsO6NoAKDUzNjQ3ODQ1YjkxN2ZhYzJhMTU2NWM3MmYyMDQ2ZjZiYmFkMzQxZDY", "commit": {"author": {"name": "Urgau", "email": "urgau@numericable.fr", "date": "2023-04-30T17:09:15Z"}, "committer": {"name": "Urgau", "email": "urgau@numericable.fr", "date": "2023-05-05T11:06:48Z"}, "message": "Improve check-cfg diagnostics (part 2)", "tree": {"sha": "50228591c06a0df0f4dbc1fbd6b1983231acd7cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/50228591c06a0df0f4dbc1fbd6b1983231acd7cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/53647845b917fac2a1565c72f2046f6bbad341d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/53647845b917fac2a1565c72f2046f6bbad341d6", "html_url": "https://github.com/rust-lang/rust/commit/53647845b917fac2a1565c72f2046f6bbad341d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/53647845b917fac2a1565c72f2046f6bbad341d6/comments", "author": {"login": "Urgau", "id": 3616612, "node_id": "MDQ6VXNlcjM2MTY2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3616612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Urgau", "html_url": "https://github.com/Urgau", "followers_url": "https://api.github.com/users/Urgau/followers", "following_url": "https://api.github.com/users/Urgau/following{/other_user}", "gists_url": "https://api.github.com/users/Urgau/gists{/gist_id}", "starred_url": "https://api.github.com/users/Urgau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Urgau/subscriptions", "organizations_url": "https://api.github.com/users/Urgau/orgs", "repos_url": "https://api.github.com/users/Urgau/repos", "events_url": "https://api.github.com/users/Urgau/events{/privacy}", "received_events_url": "https://api.github.com/users/Urgau/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Urgau", "id": 3616612, "node_id": "MDQ6VXNlcjM2MTY2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3616612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Urgau", "html_url": "https://github.com/Urgau", "followers_url": "https://api.github.com/users/Urgau/followers", "following_url": "https://api.github.com/users/Urgau/following{/other_user}", "gists_url": "https://api.github.com/users/Urgau/gists{/gist_id}", "starred_url": "https://api.github.com/users/Urgau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Urgau/subscriptions", "organizations_url": "https://api.github.com/users/Urgau/orgs", "repos_url": "https://api.github.com/users/Urgau/repos", "events_url": "https://api.github.com/users/Urgau/events{/privacy}", "received_events_url": "https://api.github.com/users/Urgau/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5f8dba4cd7add4fc51914a98967baf4008bd2f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5f8dba4cd7add4fc51914a98967baf4008bd2f8", "html_url": "https://github.com/rust-lang/rust/commit/a5f8dba4cd7add4fc51914a98967baf4008bd2f8"}], "stats": {"total": 239, "additions": 192, "deletions": 47}, "files": [{"sha": "2a3092d3c7b348fb1c834cf0382e9e721d01d761", "filename": "compiler/rustc_attr/src/builtin.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/53647845b917fac2a1565c72f2046f6bbad341d6/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53647845b917fac2a1565c72f2046f6bbad341d6/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs?ref=53647845b917fac2a1565c72f2046f6bbad341d6", "patch": "@@ -589,7 +589,7 @@ pub fn cfg_matches(\n                     cfg.span,\n                     lint_node_id,\n                     \"unexpected `cfg` condition value\",\n-                    BuiltinLintDiagnostics::UnexpectedCfg(\n+                    BuiltinLintDiagnostics::UnexpectedCfgValue(\n                         (cfg.name, cfg.name_span),\n                         cfg.value.map(|v| (v, cfg.value_span.unwrap())),\n                     ),\n@@ -601,7 +601,10 @@ pub fn cfg_matches(\n                     cfg.span,\n                     lint_node_id,\n                     \"unexpected `cfg` condition name\",\n-                    BuiltinLintDiagnostics::UnexpectedCfg((cfg.name, cfg.name_span), None),\n+                    BuiltinLintDiagnostics::UnexpectedCfgName(\n+                        (cfg.name, cfg.name_span),\n+                        cfg.value.map(|v| (v, cfg.value_span.unwrap())),\n+                    ),\n                 );\n             }\n             _ => { /* not unexpected */ }"}, {"sha": "53d7cf74cde53db24caf9e5dd05b71b97eae28f3", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 45, "deletions": 9, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/53647845b917fac2a1565c72f2046f6bbad341d6/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53647845b917fac2a1565c72f2046f6bbad341d6/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=53647845b917fac2a1565c72f2046f6bbad341d6", "patch": "@@ -36,6 +36,7 @@ use rustc_middle::middle::stability;\n use rustc_middle::ty::layout::{LayoutError, LayoutOfHelpers, TyAndLayout};\n use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_middle::ty::{self, print::Printer, subst::GenericArg, RegisteredTools, Ty, TyCtxt};\n+use rustc_session::config::ExpectedValues;\n use rustc_session::lint::{BuiltinLintDiagnostics, LintExpectationId};\n use rustc_session::lint::{FutureIncompatibleInfo, Level, Lint, LintBuffer, LintId};\n use rustc_session::Session;\n@@ -768,23 +769,51 @@ pub trait LintContext: Sized {\n                     db.help(help);\n                     db.note(\"see the asm section of Rust By Example <https://doc.rust-lang.org/nightly/rust-by-example/unsafe/asm.html#labels> for more information\");\n                 },\n-                BuiltinLintDiagnostics::UnexpectedCfg((name, name_span), None) => {\n+                BuiltinLintDiagnostics::UnexpectedCfgName((name, name_span), value) => {\n                     let possibilities: Vec<Symbol> = sess.parse_sess.check_config.expecteds.keys().map(|s| *s).collect();\n \n                     // Suggest the most probable if we found one\n                     if let Some(best_match) = find_best_match_for_name(&possibilities, name, None) {\n-                        db.span_suggestion(name_span, \"there is an config with a similar name\", best_match, Applicability::MaybeIncorrect);\n+                        if let Some(ExpectedValues::Some(best_match_values)) =\n+                            sess.parse_sess.check_config.expecteds.get(&best_match) {\n+                            let mut possibilities = best_match_values.iter()\n+                                .flatten()\n+                                .map(Symbol::as_str)\n+                                .collect::<Vec<_>>();\n+                            possibilities.sort();\n+\n+                            if let Some((value, value_span)) = value {\n+                                if best_match_values.contains(&Some(value)) {\n+                                    db.span_suggestion(name_span, \"there is a config with a similar name and value\", best_match, Applicability::MaybeIncorrect);\n+                                } else if best_match_values.contains(&None) {\n+                                    db.span_suggestion(name_span.to(value_span), \"there is a config with a similar name and no value\", best_match, Applicability::MaybeIncorrect);\n+                                } else if let Some(first_value) = possibilities.first() {\n+                                    db.span_suggestion(name_span.to(value_span), \"there is a config with a similar name and different values\", format!(\"{best_match} = \\\"{first_value}\\\"\"), Applicability::MaybeIncorrect);\n+                                } else {\n+                                    db.span_suggestion(name_span.to(value_span), \"there is a config with a similar name and different values\", best_match, Applicability::MaybeIncorrect);\n+                                };\n+                            } else {\n+                                db.span_suggestion(name_span, \"there is a config with a similar name\", best_match, Applicability::MaybeIncorrect);\n+                            }\n+\n+                            if !possibilities.is_empty() {\n+                                let possibilities = possibilities.join(\"`, `\");\n+                                db.help(format!(\"expected values for `{best_match}` are: `{possibilities}`\"));\n+                            }\n+                        } else {\n+                            db.span_suggestion(name_span, \"there is a config with a similar name\", best_match, Applicability::MaybeIncorrect);\n+                        }\n                     }\n                 },\n-                BuiltinLintDiagnostics::UnexpectedCfg((name, name_span), Some((value, value_span))) => {\n-                    let Some(rustc_session::config::ExpectedValues::Some(values)) = &sess.parse_sess.check_config.expecteds.get(&name) else {\n+                BuiltinLintDiagnostics::UnexpectedCfgValue((name, name_span), value) => {\n+                    let Some(ExpectedValues::Some(values)) = &sess.parse_sess.check_config.expecteds.get(&name) else {\n                         bug!(\"it shouldn't be possible to have a diagnostic on a value whose name is not in values\");\n                     };\n                     let mut have_none_possibility = false;\n                     let possibilities: Vec<Symbol> = values.iter()\n                         .inspect(|a| have_none_possibility |= a.is_none())\n                         .copied()\n-                        .filter_map(std::convert::identity)\n+                        .flatten()\n                         .collect();\n \n                     // Show the full list if all possible values for a given name, but don't do it\n@@ -800,13 +829,20 @@ pub trait LintContext: Sized {\n                             db.note(format!(\"expected values for `{name}` are: {none}`{possibilities}`\"));\n                         }\n \n-                        // Suggest the most probable if we found one\n-                        if let Some(best_match) = find_best_match_for_name(&possibilities, value, None) {\n-                            db.span_suggestion(value_span, \"there is an expected value with a similar name\", format!(\"\\\"{best_match}\\\"\"), Applicability::MaybeIncorrect);\n+                        if let Some((value, value_span)) = value {\n+                            // Suggest the most probable if we found one\n+                            if let Some(best_match) = find_best_match_for_name(&possibilities, value, None) {\n+                                db.span_suggestion(value_span, \"there is a expected value with a similar name\", format!(\"\\\"{best_match}\\\"\"), Applicability::MaybeIncorrect);\n+\n+                            }\n+                        } else if let &[first_possibility] = &possibilities[..] {\n+                            db.span_suggestion(name_span.shrink_to_hi(), \"specify a config value\", format!(\" = \\\"{first_possibility}\\\"\"), Applicability::MaybeIncorrect);\n                         }\n                     } else if have_none_possibility {\n                         db.note(format!(\"no expected value for `{name}`\"));\n-                        db.span_suggestion(name_span.shrink_to_hi().to(value_span), \"remove the value\", \"\", Applicability::MaybeIncorrect);\n+                        if let Some((_value, value_span)) = value {\n+                            db.span_suggestion(name_span.shrink_to_hi().to(value_span), \"remove the value\", \"\", Applicability::MaybeIncorrect);\n+                        }\n                     }\n                 },\n                 BuiltinLintDiagnostics::DeprecatedWhereclauseLocation(new_span, suggestion) => {"}, {"sha": "e27e322db88581a27bb1b917804510ed43877b5c", "filename": "compiler/rustc_lint_defs/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/53647845b917fac2a1565c72f2046f6bbad341d6/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53647845b917fac2a1565c72f2046f6bbad341d6/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs?ref=53647845b917fac2a1565c72f2046f6bbad341d6", "patch": "@@ -496,7 +496,8 @@ pub enum BuiltinLintDiagnostics {\n     BreakWithLabelAndLoop(Span),\n     NamedAsmLabel(String),\n     UnicodeTextFlow(Span, String),\n-    UnexpectedCfg((Symbol, Span), Option<(Symbol, Span)>),\n+    UnexpectedCfgName((Symbol, Span), Option<(Symbol, Span)>),\n+    UnexpectedCfgValue((Symbol, Span), Option<(Symbol, Span)>),\n     DeprecatedWhereclauseLocation(Span, String),\n     SingleUseLifetime {\n         /// Span of the parameter which declares this lifetime."}, {"sha": "49e127d079a79ef72cb41701beae76905c45bb2f", "filename": "tests/ui/check-cfg/diagnotics.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/53647845b917fac2a1565c72f2046f6bbad341d6/tests%2Fui%2Fcheck-cfg%2Fdiagnotics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53647845b917fac2a1565c72f2046f6bbad341d6/tests%2Fui%2Fcheck-cfg%2Fdiagnotics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcheck-cfg%2Fdiagnotics.rs?ref=53647845b917fac2a1565c72f2046f6bbad341d6", "patch": "@@ -0,0 +1,31 @@\n+// check-pass\n+// compile-flags: --check-cfg=names() --check-cfg=values(feature,\"foo\") --check-cfg=values(no_values) -Z unstable-options\n+\n+#[cfg(featur)]\n+//~^ WARNING unexpected `cfg` condition name\n+fn feature() {}\n+\n+#[cfg(featur = \"foo\")]\n+//~^ WARNING unexpected `cfg` condition name\n+fn feature() {}\n+\n+#[cfg(featur = \"fo\")]\n+//~^ WARNING unexpected `cfg` condition name\n+fn feature() {}\n+\n+#[cfg(feature = \"foo\")]\n+fn feature() {}\n+\n+#[cfg(no_value)]\n+//~^ WARNING unexpected `cfg` condition name\n+fn no_values() {}\n+\n+#[cfg(no_value = \"foo\")]\n+//~^ WARNING unexpected `cfg` condition name\n+fn no_values() {}\n+\n+#[cfg(no_values = \"bar\")]\n+//~^ WARNING unexpected `cfg` condition value\n+fn no_values() {}\n+\n+fn main() {}"}, {"sha": "8b9fef09d09ecc97ffd82a7ec2c8ba7dce38a325", "filename": "tests/ui/check-cfg/diagnotics.stderr", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/53647845b917fac2a1565c72f2046f6bbad341d6/tests%2Fui%2Fcheck-cfg%2Fdiagnotics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53647845b917fac2a1565c72f2046f6bbad341d6/tests%2Fui%2Fcheck-cfg%2Fdiagnotics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcheck-cfg%2Fdiagnotics.stderr?ref=53647845b917fac2a1565c72f2046f6bbad341d6", "patch": "@@ -0,0 +1,62 @@\n+warning: unexpected `cfg` condition name\n+  --> $DIR/diagnotics.rs:4:7\n+   |\n+LL | #[cfg(featur)]\n+   |       ^^^^^^ help: there is a config with a similar name: `feature`\n+   |\n+   = help: expected values for `feature` are: `foo`\n+   = note: `#[warn(unexpected_cfgs)]` on by default\n+\n+warning: unexpected `cfg` condition name\n+  --> $DIR/diagnotics.rs:8:7\n+   |\n+LL | #[cfg(featur = \"foo\")]\n+   |       ^^^^^^^^^^^^^^\n+   |\n+   = help: expected values for `feature` are: `foo`\n+help: there is a config with a similar name and value\n+   |\n+LL | #[cfg(feature = \"foo\")]\n+   |       ~~~~~~~\n+\n+warning: unexpected `cfg` condition name\n+  --> $DIR/diagnotics.rs:12:7\n+   |\n+LL | #[cfg(featur = \"fo\")]\n+   |       ^^^^^^^^^^^^^\n+   |\n+   = help: expected values for `feature` are: `foo`\n+help: there is a config with a similar name and different values\n+   |\n+LL | #[cfg(feature = \"foo\")]\n+   |       ~~~~~~~~~~~~~~~\n+\n+warning: unexpected `cfg` condition name\n+  --> $DIR/diagnotics.rs:19:7\n+   |\n+LL | #[cfg(no_value)]\n+   |       ^^^^^^^^ help: there is a config with a similar name: `no_values`\n+\n+warning: unexpected `cfg` condition name\n+  --> $DIR/diagnotics.rs:23:7\n+   |\n+LL | #[cfg(no_value = \"foo\")]\n+   |       ^^^^^^^^^^^^^^^^\n+   |\n+help: there is a config with a similar name and no value\n+   |\n+LL | #[cfg(no_values)]\n+   |       ~~~~~~~~~\n+\n+warning: unexpected `cfg` condition value\n+  --> $DIR/diagnotics.rs:27:7\n+   |\n+LL | #[cfg(no_values = \"bar\")]\n+   |       ^^^^^^^^^--------\n+   |                |\n+   |                help: remove the value\n+   |\n+   = note: no expected value for `no_values`\n+\n+warning: 6 warnings emitted\n+"}, {"sha": "ed09f8cb66d2995fff481930aeec82dcb18ad71a", "filename": "tests/ui/check-cfg/invalid-cfg-name.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/53647845b917fac2a1565c72f2046f6bbad341d6/tests%2Fui%2Fcheck-cfg%2Finvalid-cfg-name.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53647845b917fac2a1565c72f2046f6bbad341d6/tests%2Fui%2Fcheck-cfg%2Finvalid-cfg-name.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcheck-cfg%2Finvalid-cfg-name.stderr?ref=53647845b917fac2a1565c72f2046f6bbad341d6", "patch": "@@ -2,7 +2,7 @@ warning: unexpected `cfg` condition name\n   --> $DIR/invalid-cfg-name.rs:7:7\n    |\n LL | #[cfg(widnows)]\n-   |       ^^^^^^^ help: there is an config with a similar name: `windows`\n+   |       ^^^^^^^ help: there is a config with a similar name: `windows`\n    |\n    = note: `#[warn(unexpected_cfgs)]` on by default\n "}, {"sha": "776d264a7adcb949f04b6d9a9fddb8debeff5514", "filename": "tests/ui/check-cfg/invalid-cfg-value.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/53647845b917fac2a1565c72f2046f6bbad341d6/tests%2Fui%2Fcheck-cfg%2Finvalid-cfg-value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53647845b917fac2a1565c72f2046f6bbad341d6/tests%2Fui%2Fcheck-cfg%2Finvalid-cfg-value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcheck-cfg%2Finvalid-cfg-value.stderr?ref=53647845b917fac2a1565c72f2046f6bbad341d6", "patch": "@@ -4,7 +4,7 @@ warning: unexpected `cfg` condition value\n LL | #[cfg(feature = \"sedre\")]\n    |       ^^^^^^^^^^-------\n    |                 |\n-   |                 help: there is an expected value with a similar name: `\"serde\"`\n+   |                 help: there is a expected value with a similar name: `\"serde\"`\n    |\n    = note: expected values for `feature` are: `full`, `serde`\n    = note: `#[warn(unexpected_cfgs)]` on by default"}, {"sha": "9adf5c46e43fe8a4d069e01577d2c0ad21dcf645", "filename": "tests/ui/check-cfg/mix.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53647845b917fac2a1565c72f2046f6bbad341d6/tests%2Fui%2Fcheck-cfg%2Fmix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53647845b917fac2a1565c72f2046f6bbad341d6/tests%2Fui%2Fcheck-cfg%2Fmix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcheck-cfg%2Fmix.rs?ref=53647845b917fac2a1565c72f2046f6bbad341d6", "patch": "@@ -12,6 +12,10 @@ fn do_windows_stuff() {}\n //~^ WARNING unexpected `cfg` condition name\n fn do_windows_stuff() {}\n \n+#[cfg(feature)]\n+//~^ WARNING unexpected `cfg` condition value\n+fn no_feature() {}\n+\n #[cfg(feature = \"foo\")]\n fn use_foo() {}\n "}, {"sha": "07c514aed5242f603aa0894677ea2da67c877496", "filename": "tests/ui/check-cfg/mix.stderr", "status": "modified", "additions": 35, "deletions": 27, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/53647845b917fac2a1565c72f2046f6bbad341d6/tests%2Fui%2Fcheck-cfg%2Fmix.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53647845b917fac2a1565c72f2046f6bbad341d6/tests%2Fui%2Fcheck-cfg%2Fmix.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcheck-cfg%2Fmix.stderr?ref=53647845b917fac2a1565c72f2046f6bbad341d6", "patch": "@@ -2,28 +2,36 @@ warning: unexpected `cfg` condition name\n   --> $DIR/mix.rs:11:7\n    |\n LL | #[cfg(widnows)]\n-   |       ^^^^^^^ help: there is an config with a similar name: `windows`\n+   |       ^^^^^^^ help: there is a config with a similar name: `windows`\n    |\n    = note: `#[warn(unexpected_cfgs)]` on by default\n \n warning: unexpected `cfg` condition value\n-  --> $DIR/mix.rs:18:7\n+  --> $DIR/mix.rs:15:7\n+   |\n+LL | #[cfg(feature)]\n+   |       ^^^^^^^- help: specify a config value: `= \"foo\"`\n+   |\n+   = note: expected values for `feature` are: `foo`\n+\n+warning: unexpected `cfg` condition value\n+  --> $DIR/mix.rs:22:7\n    |\n LL | #[cfg(feature = \"bar\")]\n    |       ^^^^^^^^^^^^^^^\n    |\n    = note: expected values for `feature` are: `foo`\n \n warning: unexpected `cfg` condition value\n-  --> $DIR/mix.rs:22:7\n+  --> $DIR/mix.rs:26:7\n    |\n LL | #[cfg(feature = \"zebra\")]\n    |       ^^^^^^^^^^^^^^^^^\n    |\n    = note: expected values for `feature` are: `foo`\n \n warning: unexpected `cfg` condition name\n-  --> $DIR/mix.rs:26:12\n+  --> $DIR/mix.rs:30:12\n    |\n LL | #[cfg_attr(uu, test)]\n    |            ^^\n@@ -37,146 +45,146 @@ warning: unexpected `unknown_name` as condition name\n    = help: was set with `--cfg` but isn't in the `--check-cfg` expected names\n \n warning: unexpected `cfg` condition name\n-  --> $DIR/mix.rs:35:10\n+  --> $DIR/mix.rs:39:10\n    |\n LL |     cfg!(widnows);\n-   |          ^^^^^^^ help: there is an config with a similar name: `windows`\n+   |          ^^^^^^^ help: there is a config with a similar name: `windows`\n \n warning: unexpected `cfg` condition value\n-  --> $DIR/mix.rs:38:10\n+  --> $DIR/mix.rs:42:10\n    |\n LL |     cfg!(feature = \"bar\");\n    |          ^^^^^^^^^^^^^^^\n    |\n    = note: expected values for `feature` are: `foo`\n \n warning: unexpected `cfg` condition value\n-  --> $DIR/mix.rs:40:10\n+  --> $DIR/mix.rs:44:10\n    |\n LL |     cfg!(feature = \"zebra\");\n    |          ^^^^^^^^^^^^^^^^^\n    |\n    = note: expected values for `feature` are: `foo`\n \n warning: unexpected `cfg` condition name\n-  --> $DIR/mix.rs:42:10\n+  --> $DIR/mix.rs:46:10\n    |\n LL |     cfg!(xxx = \"foo\");\n    |          ^^^^^^^^^^^\n \n warning: unexpected `cfg` condition name\n-  --> $DIR/mix.rs:44:10\n+  --> $DIR/mix.rs:48:10\n    |\n LL |     cfg!(xxx);\n    |          ^^^\n \n warning: unexpected `cfg` condition name\n-  --> $DIR/mix.rs:46:14\n+  --> $DIR/mix.rs:50:14\n    |\n LL |     cfg!(any(xxx, windows));\n    |              ^^^\n \n warning: unexpected `cfg` condition value\n-  --> $DIR/mix.rs:48:14\n+  --> $DIR/mix.rs:52:14\n    |\n LL |     cfg!(any(feature = \"bad\", windows));\n    |              ^^^^^^^^^^^^^^^\n    |\n    = note: expected values for `feature` are: `foo`\n \n warning: unexpected `cfg` condition name\n-  --> $DIR/mix.rs:50:23\n+  --> $DIR/mix.rs:54:23\n    |\n LL |     cfg!(any(windows, xxx));\n    |                       ^^^\n \n warning: unexpected `cfg` condition name\n-  --> $DIR/mix.rs:52:20\n+  --> $DIR/mix.rs:56:20\n    |\n LL |     cfg!(all(unix, xxx));\n    |                    ^^^\n \n warning: unexpected `cfg` condition name\n-  --> $DIR/mix.rs:54:14\n+  --> $DIR/mix.rs:58:14\n    |\n LL |     cfg!(all(aa, bb));\n    |              ^^\n \n warning: unexpected `cfg` condition name\n-  --> $DIR/mix.rs:54:18\n+  --> $DIR/mix.rs:58:18\n    |\n LL |     cfg!(all(aa, bb));\n    |                  ^^\n \n warning: unexpected `cfg` condition name\n-  --> $DIR/mix.rs:57:14\n+  --> $DIR/mix.rs:61:14\n    |\n LL |     cfg!(any(aa, bb));\n    |              ^^\n \n warning: unexpected `cfg` condition name\n-  --> $DIR/mix.rs:57:18\n+  --> $DIR/mix.rs:61:18\n    |\n LL |     cfg!(any(aa, bb));\n    |                  ^^\n \n warning: unexpected `cfg` condition value\n-  --> $DIR/mix.rs:60:20\n+  --> $DIR/mix.rs:64:20\n    |\n LL |     cfg!(any(unix, feature = \"zebra\"));\n    |                    ^^^^^^^^^^^^^^^^^\n    |\n    = note: expected values for `feature` are: `foo`\n \n warning: unexpected `cfg` condition name\n-  --> $DIR/mix.rs:62:14\n+  --> $DIR/mix.rs:66:14\n    |\n LL |     cfg!(any(xxx, feature = \"zebra\"));\n    |              ^^^\n \n warning: unexpected `cfg` condition value\n-  --> $DIR/mix.rs:62:19\n+  --> $DIR/mix.rs:66:19\n    |\n LL |     cfg!(any(xxx, feature = \"zebra\"));\n    |                   ^^^^^^^^^^^^^^^^^\n    |\n    = note: expected values for `feature` are: `foo`\n \n warning: unexpected `cfg` condition name\n-  --> $DIR/mix.rs:65:14\n+  --> $DIR/mix.rs:69:14\n    |\n LL |     cfg!(any(xxx, unix, xxx));\n    |              ^^^\n \n warning: unexpected `cfg` condition name\n-  --> $DIR/mix.rs:65:25\n+  --> $DIR/mix.rs:69:25\n    |\n LL |     cfg!(any(xxx, unix, xxx));\n    |                         ^^^\n \n warning: unexpected `cfg` condition value\n-  --> $DIR/mix.rs:68:14\n+  --> $DIR/mix.rs:72:14\n    |\n LL |     cfg!(all(feature = \"zebra\", feature = \"zebra\", feature = \"zebra\"));\n    |              ^^^^^^^^^^^^^^^^^\n    |\n    = note: expected values for `feature` are: `foo`\n \n warning: unexpected `cfg` condition value\n-  --> $DIR/mix.rs:68:33\n+  --> $DIR/mix.rs:72:33\n    |\n LL |     cfg!(all(feature = \"zebra\", feature = \"zebra\", feature = \"zebra\"));\n    |                                 ^^^^^^^^^^^^^^^^^\n    |\n    = note: expected values for `feature` are: `foo`\n \n warning: unexpected `cfg` condition value\n-  --> $DIR/mix.rs:68:52\n+  --> $DIR/mix.rs:72:52\n    |\n LL |     cfg!(all(feature = \"zebra\", feature = \"zebra\", feature = \"zebra\"));\n    |                                                    ^^^^^^^^^^^^^^^^^\n    |\n    = note: expected values for `feature` are: `foo`\n \n-warning: 27 warnings emitted\n+warning: 28 warnings emitted\n "}, {"sha": "eb81535e3edb054af30f42d22470a4f117de906e", "filename": "tests/ui/check-cfg/values-target-json.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/53647845b917fac2a1565c72f2046f6bbad341d6/tests%2Fui%2Fcheck-cfg%2Fvalues-target-json.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53647845b917fac2a1565c72f2046f6bbad341d6/tests%2Fui%2Fcheck-cfg%2Fvalues-target-json.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcheck-cfg%2Fvalues-target-json.stderr?ref=53647845b917fac2a1565c72f2046f6bbad341d6", "patch": "@@ -4,7 +4,7 @@ warning: unexpected `cfg` condition value\n LL | #[cfg(target_os = \"linuz\")]\n    |       ^^^^^^^^^^^^-------\n    |                   |\n-   |                   help: there is an expected value with a similar name: `\"linux\"`\n+   |                   help: there is a expected value with a similar name: `\"linux\"`\n    |\n    = note: expected values for `target_os` are: `aix`, `android`, `cuda`, `dragonfly`, `emscripten`, `ericos`, `espidf`, `freebsd`, `fuchsia`, `haiku`, `hermit`, `horizon`, `illumos`, `ios`, `l4re`, `linux`, `macos`, `netbsd`, `none`, `nto`, `openbsd`, `psp`, `redox`, `solaris`, `solid_asp3`, `tvos`, `uefi`, `unknown`, `vita`, `vxworks`, `wasi`, `watchos`, `windows`, `xous`\n    = note: `#[warn(unexpected_cfgs)]` on by default"}, {"sha": "34c5d6172d94d68887accf9ebb59c820a9b057a3", "filename": "tests/ui/check-cfg/well-known-names.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/53647845b917fac2a1565c72f2046f6bbad341d6/tests%2Fui%2Fcheck-cfg%2Fwell-known-names.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53647845b917fac2a1565c72f2046f6bbad341d6/tests%2Fui%2Fcheck-cfg%2Fwell-known-names.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcheck-cfg%2Fwell-known-names.stderr?ref=53647845b917fac2a1565c72f2046f6bbad341d6", "patch": "@@ -4,7 +4,7 @@ warning: unexpected `cfg` condition name\n LL | #[cfg(target_oz = \"linux\")]\n    |       ---------^^^^^^^^^^\n    |       |\n-   |       help: there is an config with a similar name: `target_os`\n+   |       help: there is a config with a similar name: `target_os`\n    |\n    = note: `#[warn(unexpected_cfgs)]` on by default\n \n@@ -14,13 +14,13 @@ warning: unexpected `cfg` condition name\n LL | #[cfg(features = \"foo\")]\n    |       --------^^^^^^^^\n    |       |\n-   |       help: there is an config with a similar name: `feature`\n+   |       help: there is a config with a similar name: `feature`\n \n warning: unexpected `cfg` condition name\n   --> $DIR/well-known-names.rs:20:7\n    |\n LL | #[cfg(uniw)]\n-   |       ^^^^ help: there is an config with a similar name: `unix`\n+   |       ^^^^ help: there is a config with a similar name: `unix`\n \n warning: 3 warnings emitted\n "}, {"sha": "2d18cb82e037a25cd28497d9568efc5007d28432", "filename": "tests/ui/check-cfg/well-known-values.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53647845b917fac2a1565c72f2046f6bbad341d6/tests%2Fui%2Fcheck-cfg%2Fwell-known-values.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53647845b917fac2a1565c72f2046f6bbad341d6/tests%2Fui%2Fcheck-cfg%2Fwell-known-values.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcheck-cfg%2Fwell-known-values.stderr?ref=53647845b917fac2a1565c72f2046f6bbad341d6", "patch": "@@ -4,7 +4,7 @@ warning: unexpected `cfg` condition value\n LL | #[cfg(target_os = \"linuz\")]\n    |       ^^^^^^^^^^^^-------\n    |                   |\n-   |                   help: there is an expected value with a similar name: `\"linux\"`\n+   |                   help: there is a expected value with a similar name: `\"linux\"`\n    |\n    = note: expected values for `target_os` are: `aix`, `android`, `cuda`, `dragonfly`, `emscripten`, `espidf`, `freebsd`, `fuchsia`, `haiku`, `hermit`, `horizon`, `illumos`, `ios`, `l4re`, `linux`, `macos`, `netbsd`, `none`, `nto`, `openbsd`, `psp`, `redox`, `solaris`, `solid_asp3`, `tvos`, `uefi`, `unknown`, `vita`, `vxworks`, `wasi`, `watchos`, `windows`, `xous`\n    = note: `#[warn(unexpected_cfgs)]` on by default\n@@ -15,7 +15,7 @@ warning: unexpected `cfg` condition value\n LL | #[cfg(target_has_atomic = \"0\")]\n    |       ^^^^^^^^^^^^^^^^^^^^---\n    |                           |\n-   |                           help: there is an expected value with a similar name: `\"8\"`\n+   |                           help: there is a expected value with a similar name: `\"8\"`\n    |\n    = note: expected values for `target_has_atomic` are: (none), `128`, `16`, `32`, `64`, `8`, `ptr`\n "}]}