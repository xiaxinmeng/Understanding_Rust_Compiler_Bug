{"sha": "15add366faac554db51244d1e27e4d10a08ab6e8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1YWRkMzY2ZmFhYzU1NGRiNTEyNDRkMWUyN2U0ZDEwYTA4YWI2ZTg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-03-19T05:07:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-03-19T05:07:27Z"}, "message": "Auto merge of #49091 - nikomatsakis:issue-49043-ty-infer-hash, r=michaelwoerister\n\nextend stable hasher to support `CanonicalTy`\n\nFixes #49043\n\nr? @michaelwoerister", "tree": {"sha": "1a8018ebe0c906980d6c8fc5f0f739368cd05389", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a8018ebe0c906980d6c8fc5f0f739368cd05389"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15add366faac554db51244d1e27e4d10a08ab6e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15add366faac554db51244d1e27e4d10a08ab6e8", "html_url": "https://github.com/rust-lang/rust/commit/15add366faac554db51244d1e27e4d10a08ab6e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15add366faac554db51244d1e27e4d10a08ab6e8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "152217d29cc842d9a7577e9361f5960f87dcdf5c", "url": "https://api.github.com/repos/rust-lang/rust/commits/152217d29cc842d9a7577e9361f5960f87dcdf5c", "html_url": "https://github.com/rust-lang/rust/commit/152217d29cc842d9a7577e9361f5960f87dcdf5c"}, {"sha": "f02dc74c2cf1afb049f8978c885589a26fb6676b", "url": "https://api.github.com/repos/rust-lang/rust/commits/f02dc74c2cf1afb049f8978c885589a26fb6676b", "html_url": "https://github.com/rust-lang/rust/commit/f02dc74c2cf1afb049f8978c885589a26fb6676b"}], "stats": {"total": 75, "additions": 72, "deletions": 3}, "files": [{"sha": "9a442e0529938e0a0eddc57b4f3b8cd19073e53b", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 48, "deletions": 2, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/15add366faac554db51244d1e27e4d10a08ab6e8/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15add366faac554db51244d1e27e4d10a08ab6e8/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=15add366faac554db51244d1e27e4d10a08ab6e8", "patch": "@@ -902,13 +902,59 @@ for ty::TypeVariants<'gcx>\n             TyForeign(def_id) => {\n                 def_id.hash_stable(hcx, hasher);\n             }\n-            TyInfer(..) => {\n-                bug!(\"ty::TypeVariants::hash_stable() - Unexpected variant {:?}.\", *self)\n+            TyInfer(infer_ty) => {\n+                infer_ty.hash_stable(hcx, hasher);\n             }\n         }\n     }\n }\n \n+impl_stable_hash_for!(enum ty::InferTy {\n+    TyVar(a),\n+    IntVar(a),\n+    FloatVar(a),\n+    FreshTy(a),\n+    FreshIntTy(a),\n+    FreshFloatTy(a),\n+    CanonicalTy(a),\n+});\n+\n+impl<'a, 'gcx> HashStable<StableHashingContext<'a>>\n+for ty::TyVid\n+{\n+    fn hash_stable<W: StableHasherResult>(&self,\n+                                          _hcx: &mut StableHashingContext<'a>,\n+                                          _hasher: &mut StableHasher<W>) {\n+        // TyVid values are confined to an inference context and hence\n+        // should not be hashed.\n+        bug!(\"ty::TypeVariants::hash_stable() - can't hash a TyVid {:?}.\", *self)\n+    }\n+}\n+\n+impl<'a, 'gcx> HashStable<StableHashingContext<'a>>\n+for ty::IntVid\n+{\n+    fn hash_stable<W: StableHasherResult>(&self,\n+                                          _hcx: &mut StableHashingContext<'a>,\n+                                          _hasher: &mut StableHasher<W>) {\n+        // IntVid values are confined to an inference context and hence\n+        // should not be hashed.\n+        bug!(\"ty::TypeVariants::hash_stable() - can't hash an IntVid {:?}.\", *self)\n+    }\n+}\n+\n+impl<'a, 'gcx> HashStable<StableHashingContext<'a>>\n+for ty::FloatVid\n+{\n+    fn hash_stable<W: StableHasherResult>(&self,\n+                                          _hcx: &mut StableHashingContext<'a>,\n+                                          _hasher: &mut StableHasher<W>) {\n+        // FloatVid values are confined to an inference context and hence\n+        // should not be hashed.\n+        bug!(\"ty::TypeVariants::hash_stable() - can't hash a FloatVid {:?}.\", *self)\n+    }\n+}\n+\n impl_stable_hash_for!(struct ty::ParamTy {\n     idx,\n     name"}, {"sha": "7dc84b9ca29561bc2d754ea859d19f442edb36d4", "filename": "src/librustc/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/15add366faac554db51244d1e27e4d10a08ab6e8/src%2Flibrustc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15add366faac554db51244d1e27e4d10a08ab6e8/src%2Flibrustc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmacros.rs?ref=15add366faac554db51244d1e27e4d10a08ab6e8", "patch": "@@ -72,7 +72,7 @@ macro_rules! __impl_stable_hash_field {\n \n #[macro_export]\n macro_rules! impl_stable_hash_for {\n-    (enum $enum_name:path { $( $variant:ident $( ( $($arg:ident),* ) )* ),* }) => {\n+    (enum $enum_name:path { $( $variant:ident $( ( $($arg:ident),* ) )* ),* $(,)* }) => {\n         impl<'a, 'tcx> ::rustc_data_structures::stable_hasher::HashStable<$crate::ich::StableHashingContext<'a>> for $enum_name {\n             #[inline]\n             fn hash_stable<W: ::rustc_data_structures::stable_hasher::StableHasherResult>(&self,"}, {"sha": "017c4f5262e255f095616409124d6e6278489d10", "filename": "src/librustc/traits/query/dropck_outlives.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/15add366faac554db51244d1e27e4d10a08ab6e8/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15add366faac554db51244d1e27e4d10a08ab6e8/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs?ref=15add366faac554db51244d1e27e4d10a08ab6e8", "patch": "@@ -51,6 +51,7 @@ impl<'cx, 'gcx, 'tcx> At<'cx, 'gcx, 'tcx> {\n         let gcx = tcx.global_tcx();\n         let (c_ty, orig_values) = self.infcx.canonicalize_query(&self.param_env.and(ty));\n         let span = self.cause.span;\n+        debug!(\"c_ty = {:?}\", c_ty);\n         match &gcx.dropck_outlives(c_ty) {\n             Ok(result) if result.is_proven() => {\n                 match self.infcx.instantiate_query_result("}, {"sha": "118027b190e2906f2e00f097eecf17af2873614e", "filename": "src/test/incremental/issue-49043.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/15add366faac554db51244d1e27e4d10a08ab6e8/src%2Ftest%2Fincremental%2Fissue-49043.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15add366faac554db51244d1e27e4d10a08ab6e8/src%2Ftest%2Fincremental%2Fissue-49043.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fissue-49043.rs?ref=15add366faac554db51244d1e27e4d10a08ab6e8", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Regression test for hashing involving canonical variables.  In this\n+// test -- which has an intensional error -- the type of the value\n+// being dropped winds up including a type variable. Canonicalization\n+// would then produce a `?0` which -- in turn -- triggered an ICE in\n+// hashing.\n+\n+// revisions:cfail1\n+\n+fn main() {\n+    println!(\"Hello, world! {}\",*thread_rng().choose(&[0, 1, 2, 3]).unwrap());\n+    //[cfail1]~^ ERROR cannot find function `thread_rng`\n+}"}]}