{"sha": "b5fa8ab593a106dd58c8c98b7f9b00a47561a663", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1ZmE4YWI1OTNhMTA2ZGQ1OGM4Yzk4YjdmOWIwMGE0NzU2MWE2NjM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-08-10T18:27:06Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-08-17T11:39:11Z"}, "message": "move CrateIndex into its own module", "tree": {"sha": "1c64a041765b74ee5452fa5bd815384d8807fc67", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c64a041765b74ee5452fa5bd815384d8807fc67"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b5fa8ab593a106dd58c8c98b7f9b00a47561a663", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b5fa8ab593a106dd58c8c98b7f9b00a47561a663", "html_url": "https://github.com/rust-lang/rust/commit/b5fa8ab593a106dd58c8c98b7f9b00a47561a663", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b5fa8ab593a106dd58c8c98b7f9b00a47561a663/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6d05904697d89099b55da3331155392f1db9c00", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6d05904697d89099b55da3331155392f1db9c00", "html_url": "https://github.com/rust-lang/rust/commit/d6d05904697d89099b55da3331155392f1db9c00"}], "stats": {"total": 105, "additions": 68, "deletions": 37}, "files": [{"sha": "3ce9064f80ab529517b77d114f79ee2f83637499", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 8, "deletions": 37, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/b5fa8ab593a106dd58c8c98b7f9b00a47561a663/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5fa8ab593a106dd58c8c98b7f9b00a47561a663/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=b5fa8ab593a106dd58c8c98b7f9b00a47561a663", "patch": "@@ -25,7 +25,7 @@ use middle::cstore::{LOCAL_CRATE, InlinedItemRef, LinkMeta, tls};\n use rustc::hir::def;\n use rustc::hir::def_id::{CRATE_DEF_INDEX, DefId};\n use middle::dependency_format::Linkage;\n-use rustc::dep_graph::{DepGraph, DepNode, DepTask};\n+use rustc::dep_graph::DepNode;\n use rustc::traits::specialization_graph;\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::util::IntTypeExt;\n@@ -54,6 +54,8 @@ use rustc::hir::intravisit::Visitor;\n use rustc::hir::intravisit;\n use rustc::hir::map::DefKey;\n \n+use super::index_builder::{CrateIndex, XRef};\n+\n pub struct EncodeContext<'a, 'tcx: 'a> {\n     pub diag: &'a Handler,\n     pub tcx: TyCtxt<'a, 'tcx, 'tcx>,\n@@ -71,35 +73,6 @@ impl<'a, 'tcx> EncodeContext<'a,'tcx> {\n     }\n }\n \n-/// \"interned\" entries referenced by id\n-#[derive(PartialEq, Eq, Hash)]\n-pub enum XRef<'tcx> { Predicate(ty::Predicate<'tcx>) }\n-\n-struct CrateIndex<'a, 'tcx> {\n-    dep_graph: &'a DepGraph,\n-    items: IndexData,\n-    xrefs: FnvHashMap<XRef<'tcx>, u32>, // sequentially-assigned\n-}\n-\n-impl<'a, 'tcx> CrateIndex<'a, 'tcx> {\n-    /// Records that `id` is being emitted at the current offset.\n-    /// This data is later used to construct the item index in the\n-    /// metadata so we can quickly find the data for a given item.\n-    ///\n-    /// Returns a dep-graph task that you should keep live as long as\n-    /// the data for this item is being emitted.\n-    fn record(&mut self, id: DefId, rbml_w: &mut Encoder) -> DepTask<'a> {\n-        let position = rbml_w.mark_stable_position();\n-        self.items.record(id, position);\n-        self.dep_graph.in_task(DepNode::MetaData(id))\n-    }\n-\n-    fn add_xref(&mut self, xref: XRef<'tcx>) -> u32 {\n-        let old_len = self.xrefs.len() as u32;\n-        *self.xrefs.entry(xref).or_insert(old_len)\n-    }\n-}\n-\n fn encode_name(rbml_w: &mut Encoder, name: Name) {\n     rbml_w.wr_tagged_str(tag_paths_data_name, &name.as_str());\n }\n@@ -1380,11 +1353,7 @@ fn encode_info_for_items<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,\n                                    -> CrateIndex<'a, 'tcx> {\n     let krate = ecx.tcx.map.krate();\n \n-    let mut index = CrateIndex {\n-        dep_graph: &ecx.tcx.dep_graph,\n-        items: IndexData::new(ecx.tcx.map.num_local_def_ids()),\n-        xrefs: FnvHashMap()\n-    };\n+    let mut index = CrateIndex::new(ecx);\n     rbml_w.start_tag(tag_items_data);\n \n     {\n@@ -1929,12 +1898,14 @@ fn encode_metadata_inner(rbml_w: &mut Encoder,\n     stats.item_bytes = rbml_w.writer.seek(SeekFrom::Current(0)).unwrap() - i;\n     rbml_w.end_tag();\n \n+    let (items, xrefs) = index.into_fields();\n+\n     i = rbml_w.writer.seek(SeekFrom::Current(0)).unwrap();\n-    encode_item_index(rbml_w, index.items);\n+    encode_item_index(rbml_w, items);\n     stats.index_bytes = rbml_w.writer.seek(SeekFrom::Current(0)).unwrap() - i;\n \n     i = rbml_w.writer.seek(SeekFrom::Current(0)).unwrap();\n-    encode_xrefs(&ecx, rbml_w, index.xrefs);\n+    encode_xrefs(&ecx, rbml_w, xrefs);\n     stats.xref_bytes = rbml_w.writer.seek(SeekFrom::Current(0)).unwrap() - i;\n \n     encode_struct_field_attrs(&ecx, rbml_w, krate);"}, {"sha": "3921a9160ef159ab995265ce7102be3f62a44570", "filename": "src/librustc_metadata/index_builder.rs", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/b5fa8ab593a106dd58c8c98b7f9b00a47561a663/src%2Flibrustc_metadata%2Findex_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5fa8ab593a106dd58c8c98b7f9b00a47561a663/src%2Flibrustc_metadata%2Findex_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Findex_builder.rs?ref=b5fa8ab593a106dd58c8c98b7f9b00a47561a663", "patch": "@@ -0,0 +1,59 @@\n+// Copyright 2012-2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use encoder::EncodeContext;\n+use index::IndexData;\n+use rbml::writer::Encoder;\n+use rustc::dep_graph::{DepGraph, DepNode, DepTask};\n+use rustc::hir::def_id::DefId;\n+use rustc::ty;\n+use rustc_data_structures::fnv::FnvHashMap;\n+\n+pub struct CrateIndex<'a, 'tcx> {\n+    dep_graph: &'a DepGraph,\n+    items: IndexData,\n+    xrefs: FnvHashMap<XRef<'tcx>, u32>, // sequentially-assigned\n+}\n+\n+/// \"interned\" entries referenced by id\n+#[derive(PartialEq, Eq, Hash)]\n+pub enum XRef<'tcx> { Predicate(ty::Predicate<'tcx>) }\n+\n+impl<'a, 'tcx> CrateIndex<'a, 'tcx> {\n+    pub fn new(ecx: &EncodeContext<'a, 'tcx>) -> Self {\n+        CrateIndex {\n+            dep_graph: &ecx.tcx.dep_graph,\n+            items: IndexData::new(ecx.tcx.map.num_local_def_ids()),\n+            xrefs: FnvHashMap()\n+        }\n+    }\n+\n+    /// Records that `id` is being emitted at the current offset.\n+    /// This data is later used to construct the item index in the\n+    /// metadata so we can quickly find the data for a given item.\n+    ///\n+    /// Returns a dep-graph task that you should keep live as long as\n+    /// the data for this item is being emitted.\n+    pub fn record(&mut self, id: DefId, rbml_w: &mut Encoder) -> DepTask<'a> {\n+        let position = rbml_w.mark_stable_position();\n+        self.items.record(id, position);\n+        self.dep_graph.in_task(DepNode::MetaData(id))\n+    }\n+\n+    pub fn add_xref(&mut self, xref: XRef<'tcx>) -> u32 {\n+        let old_len = self.xrefs.len() as u32;\n+        *self.xrefs.entry(xref).or_insert(old_len)\n+    }\n+\n+    pub fn into_fields(self) -> (IndexData, FnvHashMap<XRef<'tcx>, u32>) {\n+        (self.items, self.xrefs)\n+    }\n+}\n+"}, {"sha": "a96fa8a006d8967bb4039147d0104c255c1d0993", "filename": "src/librustc_metadata/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b5fa8ab593a106dd58c8c98b7f9b00a47561a663/src%2Flibrustc_metadata%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5fa8ab593a106dd58c8c98b7f9b00a47561a663/src%2Flibrustc_metadata%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flib.rs?ref=b5fa8ab593a106dd58c8c98b7f9b00a47561a663", "patch": "@@ -54,6 +54,7 @@ pub mod def_key;\n pub mod tyencode;\n pub mod tydecode;\n pub mod encoder;\n+mod index_builder;\n pub mod decoder;\n pub mod creader;\n pub mod csearch;"}]}