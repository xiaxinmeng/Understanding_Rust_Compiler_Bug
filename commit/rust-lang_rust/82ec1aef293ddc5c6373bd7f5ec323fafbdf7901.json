{"sha": "82ec1aef293ddc5c6373bd7f5ec323fafbdf7901", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyZWMxYWVmMjkzZGRjNWM2MzczYmQ3ZjVlYzMyM2ZhZmJkZjc5MDE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-06-24T13:46:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-06-24T13:46:54Z"}, "message": "auto merge of #14963 : w3ln4/rust/master, r=alexcrichton\n\nThe aim of these changes is not working out a generic bi-endianness architectures support but to allow people develop for little endian MIPS machines (issue #7190).", "tree": {"sha": "52730fbfa9ef29c85dd537fbd13829275e180504", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52730fbfa9ef29c85dd537fbd13829275e180504"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/82ec1aef293ddc5c6373bd7f5ec323fafbdf7901", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/82ec1aef293ddc5c6373bd7f5ec323fafbdf7901", "html_url": "https://github.com/rust-lang/rust/commit/82ec1aef293ddc5c6373bd7f5ec323fafbdf7901", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/82ec1aef293ddc5c6373bd7f5ec323fafbdf7901/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71fe44def9676d519f5ce5d7304e581a42cf2c70", "url": "https://api.github.com/repos/rust-lang/rust/commits/71fe44def9676d519f5ce5d7304e581a42cf2c70", "html_url": "https://github.com/rust-lang/rust/commit/71fe44def9676d519f5ce5d7304e581a42cf2c70"}, {"sha": "34a384a128d9630679f9c90bb27eaa0822e5b798", "url": "https://api.github.com/repos/rust-lang/rust/commits/34a384a128d9630679f9c90bb27eaa0822e5b798", "html_url": "https://github.com/rust-lang/rust/commit/34a384a128d9630679f9c90bb27eaa0822e5b798"}], "stats": {"total": 347, "additions": 331, "deletions": 16}, "files": [{"sha": "3c6296d610aac8e5b85d0809730e7dc861982603", "filename": "mk/platform.mk", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/82ec1aef293ddc5c6373bd7f5ec323fafbdf7901/mk%2Fplatform.mk", "raw_url": "https://github.com/rust-lang/rust/raw/82ec1aef293ddc5c6373bd7f5ec323fafbdf7901/mk%2Fplatform.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fplatform.mk?ref=82ec1aef293ddc5c6373bd7f5ec323fafbdf7901", "patch": "@@ -374,6 +374,36 @@ CFG_RUN_TARG_arm-unknown-linux-gnueabi=$(call CFG_RUN_arm-unknown-linux-gnueabi,\n RUSTC_FLAGS_arm-unknown-linux-gnueabi :=\n RUSTC_CROSS_FLAGS_arm-unknown-linux-gnueabi :=\n \n+# mipsel-linux configuration\n+CC_mipsel-linux=mipsel-linux-gcc\n+CXX_mipsel-linux=mipsel-linux-g++\n+CPP_mipsel-linux=mipsel-linux-gcc \n+AR_mipsel-linux=mipsel-linux-ar\n+CFG_LIB_NAME_mipsel-linux=lib$(1).so\n+CFG_STATIC_LIB_NAME_mipsel-linux=lib$(1).a\n+CFG_LIB_GLOB_mipsel-linux=lib$(1)-*.so\n+CFG_LIB_DSYM_GLOB_mipsel-linux=lib$(1)-*.dylib.dSYM\n+CFG_CFLAGS_mipsel-linux := -mips32 -mabi=32 $(CFLAGS)\n+CFG_GCCISH_CFLAGS_mipsel-linux := -Wall -g -fPIC -mips32 -mabi=32 $(CFLAGS)\n+CFG_GCCISH_CXXFLAGS_mipsel-linux := -fno-rtti $(CXXFLAGS)\n+CFG_GCCISH_LINK_FLAGS_mipsel-linux := -shared -fPIC -g -mips32\n+CFG_GCCISH_DEF_FLAG_mipsel-linux := -Wl,--export-dynamic,--dynamic-list=\n+CFG_GCCISH_PRE_LIB_FLAGS_mipsel-linux := -Wl,-whole-archive\n+CFG_GCCISH_POST_LIB_FLAGS_mipsel-linux := -Wl,-no-whole-archive\n+CFG_DEF_SUFFIX_mipsel-linux := .linux.def\n+CFG_LLC_FLAGS_mipsel-linux :=\n+CFG_INSTALL_NAME_mipsel-linux =\n+CFG_LIBUV_LINK_FLAGS_mipsel-linux =\n+CFG_EXE_SUFFIX_mipsel-linux :=\n+CFG_WINDOWSY_mipsel-linux :=\n+CFG_UNIXY_mipsel-linux := 1\n+CFG_PATH_MUNGE_mipsel-linux := true\n+CFG_LDPATH_mipsel-linux :=\n+CFG_RUN_mipsel-linux=\n+CFG_RUN_TARG_mipsel-linux=\n+RUSTC_FLAGS_mipsel-linux := -C target-cpu=mips32 -C target-feature=\"+mips32,+o32\"\n+\n+\n # mips-unknown-linux-gnu configuration\n CC_mips-unknown-linux-gnu=mips-linux-gnu-gcc\n CXX_mips-unknown-linux-gnu=mips-linux-gnu-g++\n@@ -612,7 +642,7 @@ define CFG_MAKE_TOOLCHAIN\n         $$(CFG_GCCISH_DEF_FLAG_$(1))$$(3) $$(2)        \\\n         $$(call CFG_INSTALL_NAME_$(1),$$(4))\n \n-  ifeq ($$(findstring $(HOST_$(1)),arm mips),)\n+  ifeq ($$(findstring $(HOST_$(1)),arm mips mipsel),)\n \n   # We're using llvm-mc as our assembler because it supports\n   # .cfi pseudo-ops on mac"}, {"sha": "6b97e6479df127d2d3f580554e6a8edc3e68793a", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82ec1aef293ddc5c6373bd7f5ec323fafbdf7901/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82ec1aef293ddc5c6373bd7f5ec323fafbdf7901/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=82ec1aef293ddc5c6373bd7f5ec323fafbdf7901", "patch": "@@ -404,6 +404,7 @@ mod tests {\n     #[cfg(target_arch = \"x86\")]\n     #[cfg(target_arch = \"arm\")]\n     #[cfg(target_arch = \"mips\")]\n+    #[cfg(target_arch = \"mipsel\")]\n     fn size_of_32() {\n         assert_eq!(size_of::<uint>(), 4u);\n         assert_eq!(size_of::<*uint>(), 4u);\n@@ -435,6 +436,7 @@ mod tests {\n     #[cfg(target_arch = \"x86\")]\n     #[cfg(target_arch = \"arm\")]\n     #[cfg(target_arch = \"mips\")]\n+    #[cfg(target_arch = \"mipsel\")]\n     fn align_of_32() {\n         assert_eq!(align_of::<uint>(), 4u);\n         assert_eq!(align_of::<*uint>(), 4u);"}, {"sha": "f11a1d2c66737e5da1ba546d5b792fd40432262c", "filename": "src/libgreen/context.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/82ec1aef293ddc5c6373bd7f5ec323fafbdf7901/src%2Flibgreen%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82ec1aef293ddc5c6373bd7f5ec323fafbdf7901/src%2Flibgreen%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Fcontext.rs?ref=82ec1aef293ddc5c6373bd7f5ec323fafbdf7901", "patch": "@@ -268,12 +268,15 @@ fn initialize_call_frame(regs: &mut Registers, fptr: InitFn, arg: uint,\n }\n \n #[cfg(target_arch = \"mips\")]\n+#[cfg(target_arch = \"mipsel\")]\n type Registers = [uint, ..32];\n \n #[cfg(target_arch = \"mips\")]\n+#[cfg(target_arch = \"mipsel\")]\n fn new_regs() -> Box<Registers> { box {[0, .. 32]} }\n \n #[cfg(target_arch = \"mips\")]\n+#[cfg(target_arch = \"mipsel\")]\n fn initialize_call_frame(regs: &mut Registers, fptr: InitFn, arg: uint,\n                          procedure: raw::Procedure, sp: *mut uint) {\n     let sp = align_down(sp);"}, {"sha": "0d4f9ad19c6988eca07ae6a83b692b59dbf6ff88", "filename": "src/liblibc/lib.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/82ec1aef293ddc5c6373bd7f5ec323fafbdf7901/src%2Fliblibc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82ec1aef293ddc5c6373bd7f5ec323fafbdf7901/src%2Fliblibc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc%2Flib.rs?ref=82ec1aef293ddc5c6373bd7f5ec323fafbdf7901", "patch": "@@ -463,6 +463,7 @@ pub mod types {\n         #[cfg(target_arch = \"x86\")]\n         #[cfg(target_arch = \"arm\")]\n         #[cfg(target_arch = \"mips\")]\n+        #[cfg(target_arch = \"mipsel\")]\n         pub mod arch {\n             pub mod c95 {\n                 pub type c_char = i8;\n@@ -491,6 +492,7 @@ pub mod types {\n             }\n             #[cfg(target_arch = \"x86\")]\n             #[cfg(target_arch = \"mips\")]\n+            #[cfg(target_arch = \"mipsel\")]\n             pub mod posix88 {\n                 pub type off_t = i32;\n                 pub type dev_t = u64;\n@@ -599,6 +601,7 @@ pub mod types {\n                 }\n             }\n             #[cfg(target_arch = \"mips\")]\n+            #[cfg(target_arch = \"mipsel\")]\n             pub mod posix01 {\n                 use types::os::arch::c95::{c_long, c_ulong, time_t};\n                 use types::os::arch::posix88::{gid_t, ino_t};\n@@ -2209,6 +2212,7 @@ pub mod consts {\n         }\n \n         #[cfg(target_arch = \"mips\")]\n+        #[cfg(target_arch = \"mipsel\")]\n         pub mod posix88 {\n             use types::os::arch::c95::c_int;\n             use types::common::c95::c_void;\n@@ -2483,6 +2487,7 @@ pub mod consts {\n             pub static PTHREAD_STACK_MIN: size_t = 16384;\n \n             #[cfg(target_arch = \"mips\", target_os = \"linux\")]\n+            #[cfg(target_arch = \"mipsel\", target_os = \"linux\")]\n             pub static PTHREAD_STACK_MIN: size_t = 131072;\n \n             pub static CLOCK_REALTIME: c_int = 0;\n@@ -2536,6 +2541,7 @@ pub mod consts {\n             pub static SHUT_RDWR: c_int = 2;\n         }\n         #[cfg(target_arch = \"mips\")]\n+        #[cfg(target_arch = \"mipsel\")]\n         pub mod bsd44 {\n             use types::os::arch::c95::c_int;\n \n@@ -2604,6 +2610,7 @@ pub mod consts {\n             pub static MAP_STACK : c_int = 0x020000;\n         }\n         #[cfg(target_arch = \"mips\")]\n+        #[cfg(target_arch = \"mipsel\")]\n         pub mod extra {\n             use types::os::arch::c95::c_int;\n \n@@ -2976,6 +2983,7 @@ pub mod consts {\n             pub static PTHREAD_STACK_MIN: size_t = 4096;\n \n             #[cfg(target_arch = \"mips\")]\n+            #[cfg(target_arch = \"mipsel\")]\n             #[cfg(target_arch = \"x86\")]\n             #[cfg(target_arch = \"x86_64\")]\n             pub static PTHREAD_STACK_MIN: size_t = 2048;"}, {"sha": "7a52c048498530ba72aefab04c08ee7c71335ac1", "filename": "src/libnative/io/c_unix.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/82ec1aef293ddc5c6373bd7f5ec323fafbdf7901/src%2Flibnative%2Fio%2Fc_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82ec1aef293ddc5c6373bd7f5ec323fafbdf7901/src%2Flibnative%2Fio%2Fc_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fc_unix.rs?ref=82ec1aef293ddc5c6373bd7f5ec323fafbdf7901", "patch": "@@ -23,20 +23,26 @@ use libc;\n #[cfg(target_os = \"ios\")]\n #[cfg(target_os = \"freebsd\")]\n pub static FIONBIO: libc::c_ulong = 0x8004667e;\n-#[cfg(target_os = \"linux\", not(target_arch = \"mips\"))]\n+#[cfg(target_os = \"linux\", target_arch = \"x86\")]\n+#[cfg(target_os = \"linux\", target_arch = \"x86_64\")]\n+#[cfg(target_os = \"linux\", target_arch = \"arm\")]\n #[cfg(target_os = \"android\")]\n pub static FIONBIO: libc::c_ulong = 0x5421;\n #[cfg(target_os = \"linux\", target_arch = \"mips\")]\n+#[cfg(target_os = \"linux\", target_arch = \"mipsel\")]\n pub static FIONBIO: libc::c_ulong = 0x667e;\n \n #[cfg(target_os = \"macos\")]\n #[cfg(target_os = \"ios\")]\n #[cfg(target_os = \"freebsd\")]\n pub static FIOCLEX: libc::c_ulong = 0x20006601;\n-#[cfg(target_os = \"linux\", not(target_arch = \"mips\"))]\n+#[cfg(target_os = \"linux\", target_arch = \"x86\")]\n+#[cfg(target_os = \"linux\", target_arch = \"x86_64\")]\n+#[cfg(target_os = \"linux\", target_arch = \"arm\")]\n #[cfg(target_os = \"android\")]\n pub static FIOCLEX: libc::c_ulong = 0x5451;\n #[cfg(target_os = \"linux\", target_arch = \"mips\")]\n+#[cfg(target_os = \"linux\", target_arch = \"mipsel\")]\n pub static FIOCLEX: libc::c_ulong = 0x6601;\n \n #[cfg(target_os = \"macos\")]\n@@ -109,7 +115,9 @@ mod select {\n     }\n }\n \n-#[cfg(target_os = \"linux\", not(target_arch = \"mips\"))]\n+#[cfg(target_os = \"linux\", target_arch = \"x86\")]\n+#[cfg(target_os = \"linux\", target_arch = \"x86_64\")]\n+#[cfg(target_os = \"linux\", target_arch = \"arm\")]\n #[cfg(target_os = \"android\")]\n mod signal {\n     use libc;\n@@ -153,6 +161,7 @@ mod signal {\n }\n \n #[cfg(target_os = \"linux\", target_arch = \"mips\")]\n+#[cfg(target_os = \"linux\", target_arch = \"mipsel\")]\n mod signal {\n     use libc;\n "}, {"sha": "c2c48a41e8fe04491c6dec2cea0cb0976582f757", "filename": "src/librustc/back/mipsel.rs", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/82ec1aef293ddc5c6373bd7f5ec323fafbdf7901/src%2Flibrustc%2Fback%2Fmipsel.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82ec1aef293ddc5c6373bd7f5ec323fafbdf7901/src%2Flibrustc%2Fback%2Fmipsel.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Fmipsel.rs?ref=82ec1aef293ddc5c6373bd7f5ec323fafbdf7901", "patch": "@@ -0,0 +1,72 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use back::target_strs;\n+use syntax::abi;\n+\n+pub fn get_target_strs(target_triple: String, target_os: abi::Os) -> target_strs::t {\n+    return target_strs::t {\n+        module_asm: \"\".to_string(),\n+\n+        data_layout: match target_os {\n+          abi::OsMacos => {\n+            \"e-p:32:32:32\\\n+                -i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64\\\n+                -f32:32:32-f64:64:64\\\n+                -v64:64:64-v128:64:128\\\n+                -a0:0:64-n32\".to_string()\n+          }\n+\n+          abi::OsiOS => {\n+            \"e-p:32:32:32\\\n+                -i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64\\\n+                -f32:32:32-f64:64:64\\\n+                -v64:64:64-v128:64:128\\\n+                -a0:0:64-n32\".to_string()\n+          }\n+\n+          abi::OsWin32 => {\n+            \"e-p:32:32:32\\\n+                -i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64\\\n+                -f32:32:32-f64:64:64\\\n+                -v64:64:64-v128:64:128\\\n+                -a0:0:64-n32\".to_string()\n+          }\n+\n+          abi::OsLinux => {\n+            \"e-p:32:32:32\\\n+                -i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64\\\n+                -f32:32:32-f64:64:64\\\n+                -v64:64:64-v128:64:128\\\n+                -a0:0:64-n32\".to_string()\n+          }\n+\n+          abi::OsAndroid => {\n+            \"e-p:32:32:32\\\n+                -i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64\\\n+                -f32:32:32-f64:64:64\\\n+                -v64:64:64-v128:64:128\\\n+                -a0:0:64-n32\".to_string()\n+          }\n+\n+          abi::OsFreebsd => {\n+            \"e-p:32:32:32\\\n+                -i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64\\\n+                -f32:32:32-f64:64:64\\\n+                -v64:64:64-v128:64:128\\\n+                -a0:0:64-n32\".to_string()\n+          }\n+        },\n+\n+        target_triple: target_triple,\n+\n+        cc_args: Vec::new(),\n+    };\n+}"}, {"sha": "95e0af028fa40a32bf2b7360b6f6a44b0151f5b9", "filename": "src/librustc/driver/config.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/82ec1aef293ddc5c6373bd7f5ec323fafbdf7901/src%2Flibrustc%2Fdriver%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82ec1aef293ddc5c6373bd7f5ec323fafbdf7901/src%2Flibrustc%2Fdriver%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fconfig.rs?ref=82ec1aef293ddc5c6373bd7f5ec323fafbdf7901", "patch": "@@ -18,7 +18,7 @@ use driver::session::Session;\n use back;\n use back::link;\n use back::target_strs;\n-use back::{arm, x86, x86_64, mips};\n+use back::{arm, x86, x86_64, mips, mipsel};\n use middle::lint;\n \n use syntax::abi;\n@@ -373,7 +373,8 @@ pub fn default_configuration(sess: &Session) -> ast::CrateConfig {\n         abi::X86 =>    (\"little\", \"x86\",    \"32\"),\n         abi::X86_64 => (\"little\", \"x86_64\", \"64\"),\n         abi::Arm =>    (\"little\", \"arm\",    \"32\"),\n-        abi::Mips =>   (\"big\",    \"mips\",   \"32\")\n+        abi::Mips =>   (\"big\",    \"mips\",   \"32\"),\n+        abi::Mipsel => (\"little\", \"mipsel\", \"32\")\n     };\n \n     let fam = match sess.targ_cfg.os {\n@@ -452,6 +453,7 @@ static architecture_abis : &'static [(&'static str, abi::Architecture)] = &'stat\n     (\"xscale\", abi::Arm),\n     (\"thumb\",  abi::Arm),\n \n+    (\"mipsel\", abi::Mipsel),\n     (\"mips\",   abi::Mips)];\n \n pub fn build_target_config(sopts: &Options) -> Config {\n@@ -470,14 +472,16 @@ pub fn build_target_config(sopts: &Options) -> Config {\n       abi::X86 => (ast::TyI32, ast::TyU32),\n       abi::X86_64 => (ast::TyI64, ast::TyU64),\n       abi::Arm => (ast::TyI32, ast::TyU32),\n-      abi::Mips => (ast::TyI32, ast::TyU32)\n+      abi::Mips => (ast::TyI32, ast::TyU32),\n+      abi::Mipsel => (ast::TyI32, ast::TyU32)\n     };\n     let target_triple = sopts.target_triple.clone();\n     let target_strs = match arch {\n       abi::X86 => x86::get_target_strs(target_triple, os),\n       abi::X86_64 => x86_64::get_target_strs(target_triple, os),\n       abi::Arm => arm::get_target_strs(target_triple, os),\n-      abi::Mips => mips::get_target_strs(target_triple, os)\n+      abi::Mips => mips::get_target_strs(target_triple, os),\n+      abi::Mipsel => mipsel::get_target_strs(target_triple, os)\n     };\n     Config {\n         os: os,"}, {"sha": "947ae65a3aa4f1c57c498a542829e7d4388bfbb5", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/82ec1aef293ddc5c6373bd7f5ec323fafbdf7901/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82ec1aef293ddc5c6373bd7f5ec323fafbdf7901/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=82ec1aef293ddc5c6373bd7f5ec323fafbdf7901", "patch": "@@ -99,6 +99,7 @@ pub mod back {\n     pub mod link;\n     pub mod lto;\n     pub mod mips;\n+    pub mod mipsel;\n     pub mod rpath;\n     pub mod svh;\n     pub mod target_strs;"}, {"sha": "e68cfd7cef53a2d6de1395220d5b4fe8f804ccf3", "filename": "src/librustc/middle/trans/adt.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/82ec1aef293ddc5c6373bd7f5ec323fafbdf7901/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82ec1aef293ddc5c6373bd7f5ec323fafbdf7901/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs?ref=82ec1aef293ddc5c6373bd7f5ec323fafbdf7901", "patch": "@@ -59,7 +59,7 @@ use middle::trans::type_::Type;\n use middle::trans::type_of;\n use middle::ty;\n use middle::ty::Disr;\n-use syntax::abi::{X86, X86_64, Arm, Mips};\n+use syntax::abi::{X86, X86_64, Arm, Mips, Mipsel};\n use syntax::ast;\n use syntax::attr;\n use syntax::attr::IntType;\n@@ -365,6 +365,7 @@ fn range_to_inttype(cx: &CrateContext, hint: Hint, bounds: &IntBounds) -> IntTyp\n                 // corresponding to `choose_shortest`.  However, we don't run on those yet...?\n                 Arm => at_least_32,\n                 Mips => at_least_32,\n+                Mipsel => at_least_32,\n             }\n         }\n         attr::ReprAny => {"}, {"sha": "81bb50a83afdfbc7fec850d8936109985aaad837", "filename": "src/librustc/middle/trans/asm.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/82ec1aef293ddc5c6373bd7f5ec323fafbdf7901/src%2Flibrustc%2Fmiddle%2Ftrans%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82ec1aef293ddc5c6373bd7f5ec323fafbdf7901/src%2Flibrustc%2Fmiddle%2Ftrans%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fasm.rs?ref=82ec1aef293ddc5c6373bd7f5ec323fafbdf7901", "patch": "@@ -135,6 +135,7 @@ pub fn trans_inline_asm<'a>(bcx: &'a Block<'a>, ia: &ast::InlineAsm)\n \n #[cfg(target_arch = \"arm\")]\n #[cfg(target_arch = \"mips\")]\n+#[cfg(target_arch = \"mipsel\")]\n fn get_clobbers() -> String {\n     \"\".to_string()\n }"}, {"sha": "d6aaad92f1d38e43818d3c01d23aa8cd1b6b8490", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/82ec1aef293ddc5c6373bd7f5ec323fafbdf7901/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82ec1aef293ddc5c6373bd7f5ec323fafbdf7901/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=82ec1aef293ddc5c6373bd7f5ec323fafbdf7901", "patch": "@@ -83,7 +83,7 @@ use std::cell::{Cell, RefCell};\n use std::rc::Rc;\n use std::{i8, i16, i32, i64};\n use std::gc::Gc;\n-use syntax::abi::{X86, X86_64, Arm, Mips, Rust, RustIntrinsic};\n+use syntax::abi::{X86, X86_64, Arm, Mips, Mipsel, Rust, RustIntrinsic};\n use syntax::ast_util::{local_def, is_local};\n use syntax::attr::AttrMetaMethods;\n use syntax::attr;\n@@ -1006,7 +1006,7 @@ pub fn call_memcpy(cx: &Block, dst: ValueRef, src: ValueRef, n_bytes: ValueRef,\n     let _icx = push_ctxt(\"call_memcpy\");\n     let ccx = cx.ccx();\n     let key = match ccx.sess().targ_cfg.arch {\n-        X86 | Arm | Mips => \"llvm.memcpy.p0i8.p0i8.i32\",\n+        X86 | Arm | Mips | Mipsel => \"llvm.memcpy.p0i8.p0i8.i32\",\n         X86_64 => \"llvm.memcpy.p0i8.p0i8.i64\"\n     };\n     let memcpy = ccx.get_intrinsic(&key);\n@@ -1050,7 +1050,7 @@ fn memzero(b: &Builder, llptr: ValueRef, ty: Type) {\n     let ccx = b.ccx;\n \n     let intrinsic_key = match ccx.sess().targ_cfg.arch {\n-        X86 | Arm | Mips => \"llvm.memset.p0i8.i32\",\n+        X86 | Arm | Mips | Mipsel => \"llvm.memset.p0i8.i32\",\n         X86_64 => \"llvm.memset.p0i8.i64\"\n     };\n "}, {"sha": "df1347f6d8f100a31caedf68d3d25ea91a6c8770", "filename": "src/librustc/middle/trans/cabi.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/82ec1aef293ddc5c6373bd7f5ec323fafbdf7901/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82ec1aef293ddc5c6373bd7f5ec323fafbdf7901/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi.rs?ref=82ec1aef293ddc5c6373bd7f5ec323fafbdf7901", "patch": "@@ -16,7 +16,7 @@ use middle::trans::cabi_x86_64;\n use middle::trans::cabi_arm;\n use middle::trans::cabi_mips;\n use middle::trans::type_::Type;\n-use syntax::abi::{X86, X86_64, Arm, Mips};\n+use syntax::abi::{X86, X86_64, Arm, Mips, Mipsel};\n \n #[deriving(Clone, PartialEq)]\n pub enum ArgKind {\n@@ -110,5 +110,6 @@ pub fn compute_abi_info(ccx: &CrateContext,\n         X86_64 => cabi_x86_64::compute_abi_info(ccx, atys, rty, ret_def),\n         Arm => cabi_arm::compute_abi_info(ccx, atys, rty, ret_def),\n         Mips => cabi_mips::compute_abi_info(ccx, atys, rty, ret_def),\n+        Mipsel => cabi_mips::compute_abi_info(ccx, atys, rty, ret_def),\n     }\n }"}, {"sha": "595777a74cba1223dea5f8d42e8f1e400e0b208c", "filename": "src/librustc/middle/trans/type_.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/82ec1aef293ddc5c6373bd7f5ec323fafbdf7901/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82ec1aef293ddc5c6373bd7f5ec323fafbdf7901/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_.rs?ref=82ec1aef293ddc5c6373bd7f5ec323fafbdf7901", "patch": "@@ -16,7 +16,7 @@ use lib::llvm::{Float, Double, X86_FP80, PPC_FP128, FP128};\n use middle::trans::context::CrateContext;\n \n use syntax::ast;\n-use syntax::abi::{X86, X86_64, Arm, Mips};\n+use syntax::abi::{X86, X86_64, Arm, Mips, Mipsel};\n \n use std::c_str::ToCStr;\n use std::mem;\n@@ -106,7 +106,7 @@ impl Type {\n \n     pub fn int(ccx: &CrateContext) -> Type {\n         match ccx.tcx.sess.targ_cfg.arch {\n-            X86 | Arm | Mips => Type::i32(ccx),\n+            X86 | Arm | Mips | Mipsel => Type::i32(ccx),\n             X86_64 => Type::i64(ccx)\n         }\n     }"}, {"sha": "fe9b2b569c0601ebe7e696c8d8b653987ab77d21", "filename": "src/librustrt/libunwind.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/82ec1aef293ddc5c6373bd7f5ec323fafbdf7901/src%2Flibrustrt%2Flibunwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82ec1aef293ddc5c6373bd7f5ec323fafbdf7901/src%2Flibrustrt%2Flibunwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Flibunwind.rs?ref=82ec1aef293ddc5c6373bd7f5ec323fafbdf7901", "patch": "@@ -69,6 +69,7 @@ pub static unwinder_private_data_size: int = 20;\n pub static unwinder_private_data_size: int = 5;\n \n #[cfg(target_arch = \"mips\")]\n+#[cfg(target_arch = \"mipsel\")]\n pub static unwinder_private_data_size: int = 2;\n \n pub struct _Unwind_Exception {"}, {"sha": "2bbfcf73917c96b90aae773fe1beb5222946678a", "filename": "src/librustrt/mutex.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/82ec1aef293ddc5c6373bd7f5ec323fafbdf7901/src%2Flibrustrt%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82ec1aef293ddc5c6373bd7f5ec323fafbdf7901/src%2Flibrustrt%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Fmutex.rs?ref=82ec1aef293ddc5c6373bd7f5ec323fafbdf7901", "patch": "@@ -415,6 +415,8 @@ mod imp {\n         static __SIZEOF_PTHREAD_MUTEX_T: uint = 24 - 8;\n         #[cfg(target_arch = \"mips\")]\n         static __SIZEOF_PTHREAD_MUTEX_T: uint = 24 - 8;\n+        #[cfg(target_arch = \"mipsel\")]\n+        static __SIZEOF_PTHREAD_MUTEX_T: uint = 24 - 8;\n         #[cfg(target_arch = \"x86_64\")]\n         static __SIZEOF_PTHREAD_COND_T: uint = 48 - 8;\n         #[cfg(target_arch = \"x86\")]\n@@ -423,6 +425,8 @@ mod imp {\n         static __SIZEOF_PTHREAD_COND_T: uint = 48 - 8;\n         #[cfg(target_arch = \"mips\")]\n         static __SIZEOF_PTHREAD_COND_T: uint = 48 - 8;\n+        #[cfg(target_arch = \"mipsel\")]\n+        static __SIZEOF_PTHREAD_COND_T: uint = 48 - 8;\n \n         #[repr(C)]\n         pub struct pthread_mutex_t {"}, {"sha": "36ddf764d5c7fd914fdceaec2e480083ca539c0b", "filename": "src/librustrt/stack.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82ec1aef293ddc5c6373bd7f5ec323fafbdf7901/src%2Flibrustrt%2Fstack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82ec1aef293ddc5c6373bd7f5ec323fafbdf7901/src%2Flibrustrt%2Fstack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Fstack.rs?ref=82ec1aef293ddc5c6373bd7f5ec323fafbdf7901", "patch": "@@ -217,6 +217,7 @@ pub unsafe fn record_sp_limit(limit: uint) {\n     // mips, arm - Some brave soul can port these to inline asm, but it's over\n     //             my head personally\n     #[cfg(target_arch = \"mips\")]\n+    #[cfg(target_arch = \"mipsel\")]\n     #[cfg(target_arch = \"arm\", not(target_os = \"ios\"))] #[inline(always)]\n     unsafe fn target_record_sp_limit(limit: uint) {\n         use libc::c_void;\n@@ -298,6 +299,7 @@ pub unsafe fn get_sp_limit() -> uint {\n     // mips, arm - Some brave soul can port these to inline asm, but it's over\n     //             my head personally\n     #[cfg(target_arch = \"mips\")]\n+    #[cfg(target_arch = \"mipsel\")]\n     #[cfg(target_arch = \"arm\", not(target_os = \"ios\"))] #[inline(always)]\n     unsafe fn target_get_sp_limit() -> uint {\n         use libc::c_void;"}, {"sha": "a77242638eb582e7abd69668a8c7a9f8e4e9ec4f", "filename": "src/libstd/os.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/82ec1aef293ddc5c6373bd7f5ec323fafbdf7901/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82ec1aef293ddc5c6373bd7f5ec323fafbdf7901/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=82ec1aef293ddc5c6373bd7f5ec323fafbdf7901", "patch": "@@ -1746,6 +1746,10 @@ mod arch_consts {\n     pub static ARCH: &'static str = \"mips\";\n }\n \n+#[cfg(target_arch = \"mipsel\")]\n+mod arch_consts {\n+    pub static ARCH: &'static str = \"mipsel\";\n+}\n \n #[cfg(test)]\n mod tests {"}, {"sha": "3d6266fd4c09d48da985462d29de6ec8fa03c80e", "filename": "src/libsyntax/abi.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/82ec1aef293ddc5c6373bd7f5ec323fafbdf7901/src%2Flibsyntax%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82ec1aef293ddc5c6373bd7f5ec323fafbdf7901/src%2Flibsyntax%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fabi.rs?ref=82ec1aef293ddc5c6373bd7f5ec323fafbdf7901", "patch": "@@ -41,7 +41,8 @@ pub enum Architecture {\n     X86,\n     X86_64,\n     Arm,\n-    Mips\n+    Mips,\n+    Mipsel\n }\n \n static IntelBits: u32 = (1 << (X86 as uint)) | (1 << (X86_64 as uint));"}, {"sha": "cfe77cc30456b1bacd67918aceab9948aa817af2", "filename": "src/rt/arch/mipsel/_context.S", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/82ec1aef293ddc5c6373bd7f5ec323fafbdf7901/src%2Frt%2Farch%2Fmipsel%2F_context.S", "raw_url": "https://github.com/rust-lang/rust/raw/82ec1aef293ddc5c6373bd7f5ec323fafbdf7901/src%2Frt%2Farch%2Fmipsel%2F_context.S", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Fmipsel%2F_context.S?ref=82ec1aef293ddc5c6373bd7f5ec323fafbdf7901", "patch": "@@ -0,0 +1,88 @@\n+// Mark stack as non-executable\n+#if defined(__linux__) && defined(__ELF__)\n+.section\t.note.GNU-stack, \"\", @progbits\n+#endif\n+\n+.text\n+.globl rust_swap_registers\n+.align 2\n+.set nomips16\n+.ent rust_swap_registers\n+rust_swap_registers:\n+        .set noreorder\n+        .set nomacro\n+        .set noat\n+        sw $1, 1 * 4($4)\n+        sw $2, 2 * 4($4)\n+        sw $3, 3 * 4($4)\n+        sw $4, 4 * 4($4)\n+        sw $5, 5 * 4($4)\n+        sw $6, 6 * 4($4)\n+        sw $7, 7 * 4($4)\n+\n+        sw $8, 8 * 4($4)\n+        sw $9, 9 * 4($4)\n+        sw $10, 10 * 4($4)\n+        sw $11, 11 * 4($4)\n+        sw $12, 12 * 4($4)\n+        sw $13, 13 * 4($4)\n+        sw $14, 14 * 4($4)\n+        sw $15, 15 * 4($4)\n+\n+        sw $16, 16 * 4($4)\n+        sw $17, 17 * 4($4)\n+        sw $18, 18 * 4($4)\n+        sw $19, 19 * 4($4)\n+        sw $20, 20 * 4($4)\n+        sw $21, 21 * 4($4)\n+        sw $22, 22 * 4($4)\n+        sw $23, 23 * 4($4)\n+\n+        sw $24, 24 * 4($4)\n+        sw $25, 25 * 4($4)\n+        sw $26, 26 * 4($4)\n+        sw $27, 27 * 4($4)\n+        sw $28, 28 * 4($4)\n+        sw $29, 29 * 4($4)\n+        sw $30, 30 * 4($4)\n+        sw $31, 31 * 4($4)\n+\n+        lw $1, 1 * 4($5)\n+        lw $2, 2 * 4($5)\n+        lw $3, 3 * 4($5)\n+        lw $4, 4 * 4($5)\n+        lw $6, 6 * 4($5)\n+        lw $7, 7 * 4($5)\n+\n+        lw $8, 8 * 4($5)\n+        lw $9, 9 * 4($5)\n+        lw $10, 10 * 4($5)\n+        lw $11, 11 * 4($5)\n+        lw $12, 12 * 4($5)\n+        lw $13, 13 * 4($5)\n+        lw $14, 14 * 4($5)\n+        lw $15, 15 * 4($5)\n+\n+        lw $16, 16 * 4($5)\n+        lw $17, 17 * 4($5)\n+        lw $18, 18 * 4($5)\n+        lw $19, 19 * 4($5)\n+        lw $20, 20 * 4($5)\n+        lw $21, 21 * 4($5)\n+        lw $22, 22 * 4($5)\n+        lw $23, 23 * 4($5)\n+\n+        lw $24, 24 * 4($5)\n+        lw $25, 25 * 4($5)\n+        lw $26, 26 * 4($5)\n+        lw $27, 27 * 4($5)\n+        lw $28, 28 * 4($5)\n+        lw $29, 29 * 4($5)\n+        lw $30, 30 * 4($5)\n+        lw $31, 31 * 4($5)\n+\n+        lw $5, 5 * 4($5)\n+\n+        jr $31\n+        nop\n+.end rust_swap_registers"}, {"sha": "266933df8c51c94d595ec935c00ea746b1c1204e", "filename": "src/rt/arch/mipsel/morestack.S", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/82ec1aef293ddc5c6373bd7f5ec323fafbdf7901/src%2Frt%2Farch%2Fmipsel%2Fmorestack.S", "raw_url": "https://github.com/rust-lang/rust/raw/82ec1aef293ddc5c6373bd7f5ec323fafbdf7901/src%2Frt%2Farch%2Fmipsel%2Fmorestack.S", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Fmipsel%2Fmorestack.S?ref=82ec1aef293ddc5c6373bd7f5ec323fafbdf7901", "patch": "@@ -0,0 +1,43 @@\n+// Mark stack as non-executable\n+#if defined(__linux__) && defined(__ELF__)\n+.section        .note.GNU-stack, \"\", @progbits\n+#endif\n+\n+/* See i386/morestack.S for the lengthy, general explanation. */\n+\n+.text\n+\n+.globl rust_stack_exhausted\n+.globl __morestack\n+\n+.hidden __morestack\n+\n+.cfi_startproc\n+.set nomips16\n+.ent __morestack\n+__morestack:\n+        .set noreorder\n+        .set nomacro\n+\n+        addiu $29, $29, -4\n+        sw $30, 0($29)\n+\n+        // 16 = 4 (current) + 12 (previous)\n+        .cfi_def_cfa_offset 16\n+        .cfi_offset 31, -4\n+        .cfi_offset 30, -16\n+\n+        move $30, $29\n+        .cfi_def_cfa_register 30\n+\n+        // O32 ABI always reserves 16 bytes for arguments\n+        addiu $29, $29, -16\n+\n+        lw $25, %call16(rust_stack_exhausted)($28)\n+        jalr $25\n+        nop\n+\n+        // the above function make sure that we never get here\n+\n+.end __morestack\n+.cfi_endproc"}, {"sha": "a6dfa04edbbd7e18f3c046ef1cffa53383a3b1f2", "filename": "src/rt/arch/mipsel/record_sp.S", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/82ec1aef293ddc5c6373bd7f5ec323fafbdf7901/src%2Frt%2Farch%2Fmipsel%2Frecord_sp.S", "raw_url": "https://github.com/rust-lang/rust/raw/82ec1aef293ddc5c6373bd7f5ec323fafbdf7901/src%2Frt%2Farch%2Fmipsel%2Frecord_sp.S", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Fmipsel%2Frecord_sp.S?ref=82ec1aef293ddc5c6373bd7f5ec323fafbdf7901", "patch": "@@ -0,0 +1,40 @@\n+// Mark stack as non-executable\n+#if defined(__linux__) && defined(__ELF__)\n+.section\t.note.GNU-stack, \"\", @progbits\n+#endif\n+\n+.text\n+\n+.globl record_sp_limit\n+.align 2\n+.set nomips16\n+.ent record_sp_limit\n+record_sp_limit:\n+        .set noreorder\n+        .set nomacro\n+        .set push\n+        .set mips32r2\n+        rdhwr $3, $29\n+        .set pop\n+        addiu $3, $3, -0x7004\n+        sw $4, 0($3)\n+        jr $31\n+        nop\n+.end record_sp_limit\n+\n+.globl get_sp_limit\n+.align 2\n+.set nomips16\n+.ent get_sp_limit\n+get_sp_limit:\n+        .set noreorder\n+        .set nomacro\n+        .set push\n+        .set mips32r2\n+        rdhwr $3, $29\n+        .set pop\n+        addiu $3, $3, -0x7004\n+        lw $2, 0($3)\n+        jr $31\n+        nop\n+.end get_sp_limit"}]}