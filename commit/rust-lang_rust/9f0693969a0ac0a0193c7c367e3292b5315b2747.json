{"sha": "9f0693969a0ac0a0193c7c367e3292b5315b2747", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmMDY5Mzk2OWEwYWMwYTAxOTNjN2MzNjdlMzI5MmI1MzE1YjI3NDc=", "commit": {"author": {"name": "Jack Huey", "email": "jack.huey@umassmed.edu", "date": "2021-04-25T19:11:49Z"}, "committer": {"name": "Jack Huey", "email": "jack.huey@umassmed.edu", "date": "2021-04-25T19:11:49Z"}, "message": "Deduplicate ParamCandidates with the same value except for bound vars", "tree": {"sha": "84680f4f70d19386e6f6cb7ee3797ae92fb27860", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84680f4f70d19386e6f6cb7ee3797ae92fb27860"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f0693969a0ac0a0193c7c367e3292b5315b2747", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f0693969a0ac0a0193c7c367e3292b5315b2747", "html_url": "https://github.com/rust-lang/rust/commit/9f0693969a0ac0a0193c7c367e3292b5315b2747", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f0693969a0ac0a0193c7c367e3292b5315b2747/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58bdb08947f5b3c18a2fbafc5cf36af7b5677d83", "url": "https://api.github.com/repos/rust-lang/rust/commits/58bdb08947f5b3c18a2fbafc5cf36af7b5677d83", "html_url": "https://github.com/rust-lang/rust/commit/58bdb08947f5b3c18a2fbafc5cf36af7b5677d83"}], "stats": {"total": 32, "additions": 31, "deletions": 1}, "files": [{"sha": "c9ba8e6dc8ce79ba3fb254782a99ee7a41a350d9", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9f0693969a0ac0a0193c7c367e3292b5315b2747/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f0693969a0ac0a0193c7c367e3292b5315b2747/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=9f0693969a0ac0a0193c7c367e3292b5315b2747", "patch": "@@ -1361,7 +1361,17 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             ) => false,\n \n             (ParamCandidate(other), ParamCandidate(victim)) => {\n-                if other.value == victim.value && victim.constness == Constness::NotConst {\n+                let value_same_except_bound_vars = other.value.skip_binder()\n+                    == victim.value.skip_binder()\n+                    && !other.value.skip_binder().has_escaping_bound_vars();\n+                if value_same_except_bound_vars {\n+                    // See issue #84398. In short, we can generate multiple ParamCandidates which are\n+                    // the same except for unused bound vars. Just pick the current one (the should\n+                    // both evaluate to the same answer). This is probably best characterized as a\n+                    // \"hack\", since we might prefer to just do our best to *not* create essentially\n+                    // duplicate candidates in the first place.\n+                    true\n+                } else if other.value == victim.value && victim.constness == Constness::NotConst {\n                     // Drop otherwise equivalent non-const candidates in favor of const candidates.\n                     true\n                 } else {"}, {"sha": "1912fa59b79905af603e5e76fbdbbcc734a8f7e0", "filename": "src/test/ui/lifetimes/issue-84398.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9f0693969a0ac0a0193c7c367e3292b5315b2747/src%2Ftest%2Fui%2Flifetimes%2Fissue-84398.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f0693969a0ac0a0193c7c367e3292b5315b2747/src%2Ftest%2Fui%2Flifetimes%2Fissue-84398.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-84398.rs?ref=9f0693969a0ac0a0193c7c367e3292b5315b2747", "patch": "@@ -0,0 +1,20 @@\n+// check-pass\n+\n+pub trait Deserialize<'de>: Sized {}\n+pub trait DeserializeOwned: for<'de> Deserialize<'de> {}\n+\n+pub trait Extensible {\n+    type Config;\n+}\n+\n+// The `C` here generates a `C: Sized` candidate\n+pub trait Installer<C> {\n+    fn init<B: Extensible<Config = C>>(&mut self) -> ()\n+    where\n+        // This clause generates a `for<'de> C: Sized` candidate\n+        B::Config: DeserializeOwned,\n+    {\n+    }\n+}\n+\n+fn main() {}"}]}