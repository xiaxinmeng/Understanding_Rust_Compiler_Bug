{"sha": "77e7e88567691068f5fba288618023368882d60b", "node_id": "C_kwDOAAsO6NoAKDc3ZTdlODg1Njc2OTEwNjhmNWZiYTI4ODYxODAyMzM2ODg4MmQ2MGI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-23T04:22:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-23T04:22:14Z"}, "message": "Auto merge of #100488 - khyperia:invalid-calling-convention-help-message, r=nagisa,jyn514\n\nImprove the help message for an invalid calling convention\n\nFixes https://github.com/rust-lang/rust/issues/93601\n\nI mostly followed the suggestions of `@nagisa` in that issue, ~~however, I wasn't sure how to check stability for the suggestion of \"Do not suggest CCs that cannot be used due to them being unstable and feature not being enabled\", so I did not implement that point.~~\n\nI haven't contributed to rustc much, please feel free to point out suggestions! For example, the `.map(|s| Symbol::intern(s)).collect::<Vec<_>>()` seems pretty gross performance-wise, but maybe that's OK in error reporting code.", "tree": {"sha": "66c78fc878f18951488357ccf574231d170f11fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66c78fc878f18951488357ccf574231d170f11fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/77e7e88567691068f5fba288618023368882d60b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/77e7e88567691068f5fba288618023368882d60b", "html_url": "https://github.com/rust-lang/rust/commit/77e7e88567691068f5fba288618023368882d60b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/77e7e88567691068f5fba288618023368882d60b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9279c547c79ac840d4dd9cc40cc4e0219aabf2d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/9279c547c79ac840d4dd9cc40cc4e0219aabf2d4", "html_url": "https://github.com/rust-lang/rust/commit/9279c547c79ac840d4dd9cc40cc4e0219aabf2d4"}, {"sha": "9a206a78eb1c4d73bd55432e02a5a29d871afb7c", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a206a78eb1c4d73bd55432e02a5a29d871afb7c", "html_url": "https://github.com/rust-lang/rust/commit/9a206a78eb1c4d73bd55432e02a5a29d871afb7c"}], "stats": {"total": 514, "additions": 300, "deletions": 214}, "files": [{"sha": "cec227d2ed6e111ed0d2db1d6f7e9488f439a11b", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/77e7e88567691068f5fba288618023368882d60b/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/77e7e88567691068f5fba288618023368882d60b/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=77e7e88567691068f5fba288618023368882d60b", "patch": "@@ -4110,6 +4110,7 @@ version = \"0.0.0\"\n dependencies = [\n  \"bitflags\",\n  \"rustc_data_structures\",\n+ \"rustc_feature\",\n  \"rustc_index\",\n  \"rustc_macros\",\n  \"rustc_serialize\","}, {"sha": "63ff64b00bed617fc009d611398c0ff30e67cac4", "filename": "compiler/rustc_ast_lowering/src/errors.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/77e7e88567691068f5fba288618023368882d60b/compiler%2Frustc_ast_lowering%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77e7e88567691068f5fba288618023368882d60b/compiler%2Frustc_ast_lowering%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Ferrors.rs?ref=77e7e88567691068f5fba288618023368882d60b", "patch": "@@ -29,14 +29,28 @@ impl AddToDiagnostic for UseAngleBrackets {\n }\n \n #[derive(Diagnostic)]\n-#[help]\n #[diag(ast_lowering::invalid_abi, code = \"E0703\")]\n+#[note]\n pub struct InvalidAbi {\n     #[primary_span]\n     #[label]\n     pub span: Span,\n     pub abi: Symbol,\n-    pub valid_abis: String,\n+    pub command: String,\n+    #[subdiagnostic]\n+    pub suggestion: Option<InvalidAbiSuggestion>,\n+}\n+\n+#[derive(Subdiagnostic)]\n+#[suggestion(\n+    ast_lowering::invalid_abi_suggestion,\n+    code = \"{suggestion}\",\n+    applicability = \"maybe-incorrect\"\n+)]\n+pub struct InvalidAbiSuggestion {\n+    #[primary_span]\n+    pub span: Span,\n+    pub suggestion: String,\n }\n \n #[derive(Diagnostic, Clone, Copy)]"}, {"sha": "dfd04fe2974a902e7f320ed08633da26737fe1a8", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/77e7e88567691068f5fba288618023368882d60b/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77e7e88567691068f5fba288618023368882d60b/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=77e7e88567691068f5fba288618023368882d60b", "patch": "@@ -1,4 +1,4 @@\n-use super::errors::{InvalidAbi, MisplacedRelaxTraitBound};\n+use super::errors::{InvalidAbi, InvalidAbiSuggestion, MisplacedRelaxTraitBound};\n use super::ResolverAstLoweringExt;\n use super::{Arena, AstOwner, ImplTraitContext, ImplTraitPosition};\n use super::{FnDeclKind, LoweringContext, ParamMode};\n@@ -14,9 +14,10 @@ use rustc_hir::def_id::{LocalDefId, CRATE_DEF_ID};\n use rustc_hir::PredicateOrigin;\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_middle::ty::{DefIdTree, ResolverAstLowering, TyCtxt};\n+use rustc_span::lev_distance::find_best_match_for_name;\n use rustc_span::source_map::DesugaringKind;\n use rustc_span::symbol::{kw, sym, Ident};\n-use rustc_span::Span;\n+use rustc_span::{Span, Symbol};\n use rustc_target::spec::abi;\n use smallvec::{smallvec, SmallVec};\n \n@@ -1280,10 +1281,19 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     }\n \n     fn error_on_invalid_abi(&self, abi: StrLit) {\n+        let abi_names = abi::enabled_names(self.tcx.features(), abi.span)\n+            .iter()\n+            .map(|s| Symbol::intern(s))\n+            .collect::<Vec<_>>();\n+        let suggested_name = find_best_match_for_name(&abi_names, abi.symbol_unescaped, None);\n         self.tcx.sess.emit_err(InvalidAbi {\n+            abi: abi.symbol_unescaped,\n             span: abi.span,\n-            abi: abi.symbol,\n-            valid_abis: abi::all_names().join(\", \"),\n+            suggestion: suggested_name.map(|suggested_name| InvalidAbiSuggestion {\n+                span: abi.span,\n+                suggestion: format!(\"\\\"{suggested_name}\\\"\"),\n+            }),\n+            command: \"rustc --print=calling-conventions\".to_string(),\n         });\n     }\n "}, {"sha": "0017a28cf1b184bbab7f21a9ffa0ebf42a9b9519", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 18, "deletions": 202, "changes": 220, "blob_url": "https://github.com/rust-lang/rust/blob/77e7e88567691068f5fba288618023368882d60b/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77e7e88567691068f5fba288618023368882d60b/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=77e7e88567691068f5fba288618023368882d60b", "patch": "@@ -3,13 +3,13 @@ use rustc_ast::visit::{self, AssocCtxt, FnCtxt, FnKind, Visitor};\n use rustc_ast::{AssocConstraint, AssocConstraintKind, NodeId};\n use rustc_ast::{PatKind, RangeEnd, VariantData};\n use rustc_errors::{struct_span_err, Applicability, StashKey};\n-use rustc_feature::Features;\n-use rustc_feature::{AttributeGate, BuiltinAttribute, BUILTIN_ATTRIBUTE_MAP};\n-use rustc_session::parse::{feature_err, feature_warn};\n+use rustc_feature::{AttributeGate, BuiltinAttribute, Features, GateIssue, BUILTIN_ATTRIBUTE_MAP};\n+use rustc_session::parse::{feature_err, feature_err_issue, feature_warn};\n use rustc_session::Session;\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n+use rustc_target::spec::abi;\n \n macro_rules! gate_feature_fn {\n     ($visitor: expr, $has_feature: expr, $span: expr, $name: expr, $explain: expr, $help: expr) => {{\n@@ -84,210 +84,26 @@ impl<'a> PostExpansionVisitor<'a> {\n             }\n         }\n \n-        match symbol_unescaped.as_str() {\n-            // Stable\n-            \"Rust\" | \"C\" | \"cdecl\" | \"stdcall\" | \"fastcall\" | \"aapcs\" | \"win64\" | \"sysv64\"\n-            | \"system\" => {}\n-            \"rust-intrinsic\" => {\n-                gate_feature_post!(&self, intrinsics, span, \"intrinsics are subject to change\");\n-            }\n-            \"platform-intrinsic\" => {\n-                gate_feature_post!(\n-                    &self,\n-                    platform_intrinsics,\n-                    span,\n-                    \"platform intrinsics are experimental and possibly buggy\"\n-                );\n-            }\n-            \"vectorcall\" => {\n-                gate_feature_post!(\n-                    &self,\n-                    abi_vectorcall,\n-                    span,\n-                    \"vectorcall is experimental and subject to change\"\n-                );\n-            }\n-            \"thiscall\" => {\n-                gate_feature_post!(\n-                    &self,\n-                    abi_thiscall,\n-                    span,\n-                    \"thiscall is experimental and subject to change\"\n-                );\n-            }\n-            \"rust-call\" => {\n-                gate_feature_post!(\n-                    &self,\n-                    unboxed_closures,\n-                    span,\n-                    \"rust-call ABI is subject to change\"\n-                );\n-            }\n-            \"rust-cold\" => {\n-                gate_feature_post!(\n-                    &self,\n-                    rust_cold_cc,\n-                    span,\n-                    \"rust-cold is experimental and subject to change\"\n-                );\n-            }\n-            \"ptx-kernel\" => {\n-                gate_feature_post!(\n-                    &self,\n-                    abi_ptx,\n-                    span,\n-                    \"PTX ABIs are experimental and subject to change\"\n-                );\n-            }\n-            \"unadjusted\" => {\n-                gate_feature_post!(\n-                    &self,\n-                    abi_unadjusted,\n-                    span,\n-                    \"unadjusted ABI is an implementation detail and perma-unstable\"\n-                );\n-            }\n-            \"msp430-interrupt\" => {\n-                gate_feature_post!(\n-                    &self,\n-                    abi_msp430_interrupt,\n-                    span,\n-                    \"msp430-interrupt ABI is experimental and subject to change\"\n-                );\n-            }\n-            \"x86-interrupt\" => {\n-                gate_feature_post!(\n-                    &self,\n-                    abi_x86_interrupt,\n-                    span,\n-                    \"x86-interrupt ABI is experimental and subject to change\"\n-                );\n-            }\n-            \"amdgpu-kernel\" => {\n-                gate_feature_post!(\n-                    &self,\n-                    abi_amdgpu_kernel,\n-                    span,\n-                    \"amdgpu-kernel ABI is experimental and subject to change\"\n-                );\n-            }\n-            \"avr-interrupt\" | \"avr-non-blocking-interrupt\" => {\n-                gate_feature_post!(\n-                    &self,\n-                    abi_avr_interrupt,\n-                    span,\n-                    \"avr-interrupt and avr-non-blocking-interrupt ABIs are experimental and subject to change\"\n-                );\n-            }\n-            \"efiapi\" => {\n-                gate_feature_post!(\n-                    &self,\n-                    abi_efiapi,\n-                    span,\n-                    \"efiapi ABI is experimental and subject to change\"\n-                );\n-            }\n-            \"C-cmse-nonsecure-call\" => {\n-                gate_feature_post!(\n-                    &self,\n-                    abi_c_cmse_nonsecure_call,\n-                    span,\n-                    \"C-cmse-nonsecure-call ABI is experimental and subject to change\"\n-                );\n-            }\n-            \"C-unwind\" => {\n-                gate_feature_post!(\n-                    &self,\n-                    c_unwind,\n-                    span,\n-                    \"C-unwind ABI is experimental and subject to change\"\n-                );\n-            }\n-            \"stdcall-unwind\" => {\n-                gate_feature_post!(\n-                    &self,\n-                    c_unwind,\n+        match abi::is_enabled(&self.features, span, symbol_unescaped.as_str()) {\n+            Ok(()) => (),\n+            Err(abi::AbiDisabled::Unstable { feature, explain }) => {\n+                feature_err_issue(\n+                    &self.sess.parse_sess,\n+                    feature,\n                     span,\n-                    \"stdcall-unwind ABI is experimental and subject to change\"\n-                );\n-            }\n-            \"system-unwind\" => {\n-                gate_feature_post!(\n-                    &self,\n-                    c_unwind,\n-                    span,\n-                    \"system-unwind ABI is experimental and subject to change\"\n-                );\n-            }\n-            \"thiscall-unwind\" => {\n-                gate_feature_post!(\n-                    &self,\n-                    c_unwind,\n-                    span,\n-                    \"thiscall-unwind ABI is experimental and subject to change\"\n-                );\n-            }\n-            \"cdecl-unwind\" => {\n-                gate_feature_post!(\n-                    &self,\n-                    c_unwind,\n-                    span,\n-                    \"cdecl-unwind ABI is experimental and subject to change\"\n-                );\n-            }\n-            \"fastcall-unwind\" => {\n-                gate_feature_post!(\n-                    &self,\n-                    c_unwind,\n-                    span,\n-                    \"fastcall-unwind ABI is experimental and subject to change\"\n-                );\n-            }\n-            \"vectorcall-unwind\" => {\n-                gate_feature_post!(\n-                    &self,\n-                    c_unwind,\n-                    span,\n-                    \"vectorcall-unwind ABI is experimental and subject to change\"\n-                );\n-            }\n-            \"aapcs-unwind\" => {\n-                gate_feature_post!(\n-                    &self,\n-                    c_unwind,\n-                    span,\n-                    \"aapcs-unwind ABI is experimental and subject to change\"\n-                );\n-            }\n-            \"win64-unwind\" => {\n-                gate_feature_post!(\n-                    &self,\n-                    c_unwind,\n-                    span,\n-                    \"win64-unwind ABI is experimental and subject to change\"\n-                );\n-            }\n-            \"sysv64-unwind\" => {\n-                gate_feature_post!(\n-                    &self,\n-                    c_unwind,\n-                    span,\n-                    \"sysv64-unwind ABI is experimental and subject to change\"\n-                );\n-            }\n-            \"wasm\" => {\n-                gate_feature_post!(\n-                    &self,\n-                    wasm_abi,\n-                    span,\n-                    \"wasm ABI is experimental and subject to change\"\n-                );\n+                    GateIssue::Language,\n+                    explain,\n+                )\n+                .emit();\n             }\n-            abi => {\n+            Err(abi::AbiDisabled::Unrecognized) => {\n                 if self.sess.opts.pretty.map_or(true, |ppm| ppm.needs_hir()) {\n                     self.sess.parse_sess.span_diagnostic.delay_span_bug(\n                         span,\n-                        &format!(\"unrecognized ABI not caught in lowering: {}\", abi),\n+                        &format!(\n+                            \"unrecognized ABI not caught in lowering: {}\",\n+                            symbol_unescaped.as_str()\n+                        ),\n                     );\n                 }\n             }"}, {"sha": "c768935eb623843a70ddcc587bbd258c6d724ac1", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/77e7e88567691068f5fba288618023368882d60b/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77e7e88567691068f5fba288618023368882d60b/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=77e7e88567691068f5fba288618023368882d60b", "patch": "@@ -742,6 +742,11 @@ fn print_crate_info(\n                     println!(\"{}\", cfg);\n                 }\n             }\n+            CallingConventions => {\n+                let mut calling_conventions = rustc_target::spec::abi::all_names();\n+                calling_conventions.sort_unstable();\n+                println!(\"{}\", calling_conventions.join(\"\\n\"));\n+            }\n             RelocationModels\n             | CodeModels\n             | TlsModels"}, {"sha": "03c88c6c0ebe56d29af6545a277a57b00143bec8", "filename": "compiler/rustc_error_messages/locales/en-US/ast_lowering.ftl", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/77e7e88567691068f5fba288618023368882d60b/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fast_lowering.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/77e7e88567691068f5fba288618023368882d60b/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fast_lowering.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fast_lowering.ftl?ref=77e7e88567691068f5fba288618023368882d60b", "patch": "@@ -7,7 +7,9 @@ ast_lowering_use_angle_brackets = use angle brackets instead\n ast_lowering_invalid_abi =\n     invalid ABI: found `{$abi}`\n     .label = invalid ABI\n-    .help = valid ABIs: {$valid_abis}\n+    .note = invoke `{$command}` for a full list of supported calling conventions.\n+\n+ast_lowering_invalid_abi_suggestion = did you mean\n \n ast_lowering_assoc_ty_parentheses =\n     parenthesized generic arguments cannot be used in associated type constraints"}, {"sha": "70b470f3811d53767f224b2814e47e03b362f76c", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/77e7e88567691068f5fba288618023368882d60b/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77e7e88567691068f5fba288618023368882d60b/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=77e7e88567691068f5fba288618023368882d60b", "patch": "@@ -538,6 +538,7 @@ pub enum PrintRequest {\n     TargetLibdir,\n     CrateName,\n     Cfg,\n+    CallingConventions,\n     TargetList,\n     TargetCPUs,\n     TargetFeatures,\n@@ -1354,8 +1355,8 @@ pub fn rustc_short_optgroups() -> Vec<RustcOptGroup> {\n             \"\",\n             \"print\",\n             \"Compiler information to print on stdout\",\n-            \"[crate-name|file-names|sysroot|target-libdir|cfg|target-list|\\\n-             target-cpus|target-features|relocation-models|code-models|\\\n+            \"[crate-name|file-names|sysroot|target-libdir|cfg|calling-conventions|\\\n+             target-list|target-cpus|target-features|relocation-models|code-models|\\\n              tls-models|target-spec-json|native-static-libs|stack-protector-strategies|\\\n              link-args]\",\n         ),\n@@ -1794,6 +1795,7 @@ fn collect_print_requests(\n         \"sysroot\" => PrintRequest::Sysroot,\n         \"target-libdir\" => PrintRequest::TargetLibdir,\n         \"cfg\" => PrintRequest::Cfg,\n+        \"calling-conventions\" => PrintRequest::CallingConventions,\n         \"target-list\" => PrintRequest::TargetList,\n         \"target-cpus\" => PrintRequest::TargetCPUs,\n         \"target-features\" => PrintRequest::TargetFeatures,"}, {"sha": "fc37fdb1c43caea5cb9d4c98cc212f1678bd450f", "filename": "compiler/rustc_target/Cargo.toml", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/77e7e88567691068f5fba288618023368882d60b/compiler%2Frustc_target%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/77e7e88567691068f5fba288618023368882d60b/compiler%2Frustc_target%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2FCargo.toml?ref=77e7e88567691068f5fba288618023368882d60b", "patch": "@@ -8,7 +8,8 @@ bitflags = \"1.2.1\"\n tracing = \"0.1\"\n serde_json = \"1.0.59\"\n rustc_data_structures = { path = \"../rustc_data_structures\" }\n+rustc_feature = { path = \"../rustc_feature\" }\n+rustc_index = { path = \"../rustc_index\" }\n rustc_macros = { path = \"../rustc_macros\" }\n rustc_serialize = { path = \"../rustc_serialize\" }\n rustc_span = { path = \"../rustc_span\" }\n-rustc_index = { path = \"../rustc_index\" }"}, {"sha": "c915124434b2d137a8560e72e40c27865031d24b", "filename": "compiler/rustc_target/src/spec/abi.rs", "status": "modified", "additions": 188, "deletions": 0, "changes": 188, "blob_url": "https://github.com/rust-lang/rust/blob/77e7e88567691068f5fba288618023368882d60b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77e7e88567691068f5fba288618023368882d60b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fabi.rs?ref=77e7e88567691068f5fba288618023368882d60b", "patch": "@@ -1,6 +1,8 @@\n use std::fmt;\n \n use rustc_macros::HashStable_Generic;\n+use rustc_span::symbol::sym;\n+use rustc_span::{Span, Symbol};\n \n #[cfg(test)]\n mod tests;\n@@ -94,6 +96,192 @@ pub fn all_names() -> Vec<&'static str> {\n     AbiDatas.iter().map(|d| d.name).collect()\n }\n \n+pub fn enabled_names(features: &rustc_feature::Features, span: Span) -> Vec<&'static str> {\n+    AbiDatas\n+        .iter()\n+        .map(|d| d.name)\n+        .filter(|name| is_enabled(features, span, name).is_ok())\n+        .collect()\n+}\n+\n+pub enum AbiDisabled {\n+    Unstable { feature: Symbol, explain: &'static str },\n+    Unrecognized,\n+}\n+\n+fn gate_feature_post(\n+    features: &rustc_feature::Features,\n+    feature: Symbol,\n+    span: Span,\n+    explain: &'static str,\n+) -> Result<(), AbiDisabled> {\n+    if !features.enabled(feature) && !span.allows_unstable(feature) {\n+        Err(AbiDisabled::Unstable { feature, explain })\n+    } else {\n+        Ok(())\n+    }\n+}\n+\n+pub fn is_enabled(\n+    features: &rustc_feature::Features,\n+    span: Span,\n+    name: &str,\n+) -> Result<(), AbiDisabled> {\n+    match name {\n+        // Stable\n+        \"Rust\" | \"C\" | \"cdecl\" | \"stdcall\" | \"fastcall\" | \"aapcs\" | \"win64\" | \"sysv64\"\n+        | \"system\" => Ok(()),\n+        \"rust-intrinsic\" => {\n+            gate_feature_post(features, sym::intrinsics, span, \"intrinsics are subject to change\")\n+        }\n+        \"platform-intrinsic\" => gate_feature_post(\n+            features,\n+            sym::platform_intrinsics,\n+            span,\n+            \"platform intrinsics are experimental and possibly buggy\",\n+        ),\n+        \"vectorcall\" => gate_feature_post(\n+            features,\n+            sym::abi_vectorcall,\n+            span,\n+            \"vectorcall is experimental and subject to change\",\n+        ),\n+        \"thiscall\" => gate_feature_post(\n+            features,\n+            sym::abi_thiscall,\n+            span,\n+            \"thiscall is experimental and subject to change\",\n+        ),\n+        \"rust-call\" => gate_feature_post(\n+            features,\n+            sym::unboxed_closures,\n+            span,\n+            \"rust-call ABI is subject to change\",\n+        ),\n+        \"rust-cold\" => gate_feature_post(\n+            features,\n+            sym::rust_cold_cc,\n+            span,\n+            \"rust-cold is experimental and subject to change\",\n+        ),\n+        \"ptx-kernel\" => gate_feature_post(\n+            features,\n+            sym::abi_ptx,\n+            span,\n+            \"PTX ABIs are experimental and subject to change\",\n+        ),\n+        \"unadjusted\" => gate_feature_post(\n+            features,\n+            sym::abi_unadjusted,\n+            span,\n+            \"unadjusted ABI is an implementation detail and perma-unstable\",\n+        ),\n+        \"msp430-interrupt\" => gate_feature_post(\n+            features,\n+            sym::abi_msp430_interrupt,\n+            span,\n+            \"msp430-interrupt ABI is experimental and subject to change\",\n+        ),\n+        \"x86-interrupt\" => gate_feature_post(\n+            features,\n+            sym::abi_x86_interrupt,\n+            span,\n+            \"x86-interrupt ABI is experimental and subject to change\",\n+        ),\n+        \"amdgpu-kernel\" => gate_feature_post(\n+            features,\n+            sym::abi_amdgpu_kernel,\n+            span,\n+            \"amdgpu-kernel ABI is experimental and subject to change\",\n+        ),\n+        \"avr-interrupt\" | \"avr-non-blocking-interrupt\" => gate_feature_post(\n+            features,\n+            sym::abi_avr_interrupt,\n+            span,\n+            \"avr-interrupt and avr-non-blocking-interrupt ABIs are experimental and subject to change\",\n+        ),\n+        \"efiapi\" => gate_feature_post(\n+            features,\n+            sym::abi_efiapi,\n+            span,\n+            \"efiapi ABI is experimental and subject to change\",\n+        ),\n+        \"C-cmse-nonsecure-call\" => gate_feature_post(\n+            features,\n+            sym::abi_c_cmse_nonsecure_call,\n+            span,\n+            \"C-cmse-nonsecure-call ABI is experimental and subject to change\",\n+        ),\n+        \"C-unwind\" => gate_feature_post(\n+            features,\n+            sym::c_unwind,\n+            span,\n+            \"C-unwind ABI is experimental and subject to change\",\n+        ),\n+        \"stdcall-unwind\" => gate_feature_post(\n+            features,\n+            sym::c_unwind,\n+            span,\n+            \"stdcall-unwind ABI is experimental and subject to change\",\n+        ),\n+        \"system-unwind\" => gate_feature_post(\n+            features,\n+            sym::c_unwind,\n+            span,\n+            \"system-unwind ABI is experimental and subject to change\",\n+        ),\n+        \"thiscall-unwind\" => gate_feature_post(\n+            features,\n+            sym::c_unwind,\n+            span,\n+            \"thiscall-unwind ABI is experimental and subject to change\",\n+        ),\n+        \"cdecl-unwind\" => gate_feature_post(\n+            features,\n+            sym::c_unwind,\n+            span,\n+            \"cdecl-unwind ABI is experimental and subject to change\",\n+        ),\n+        \"fastcall-unwind\" => gate_feature_post(\n+            features,\n+            sym::c_unwind,\n+            span,\n+            \"fastcall-unwind ABI is experimental and subject to change\",\n+        ),\n+        \"vectorcall-unwind\" => gate_feature_post(\n+            features,\n+            sym::c_unwind,\n+            span,\n+            \"vectorcall-unwind ABI is experimental and subject to change\",\n+        ),\n+        \"aapcs-unwind\" => gate_feature_post(\n+            features,\n+            sym::c_unwind,\n+            span,\n+            \"aapcs-unwind ABI is experimental and subject to change\",\n+        ),\n+        \"win64-unwind\" => gate_feature_post(\n+            features,\n+            sym::c_unwind,\n+            span,\n+            \"win64-unwind ABI is experimental and subject to change\",\n+        ),\n+        \"sysv64-unwind\" => gate_feature_post(\n+            features,\n+            sym::c_unwind,\n+            span,\n+            \"sysv64-unwind ABI is experimental and subject to change\",\n+        ),\n+        \"wasm\" => gate_feature_post(\n+            features,\n+            sym::wasm_abi,\n+            span,\n+            \"wasm ABI is experimental and subject to change\",\n+        ),\n+        _ => Err(AbiDisabled::Unrecognized),\n+    }\n+}\n+\n impl Abi {\n     /// Default ABI chosen for `extern fn` declarations without an explicit ABI.\n     pub const FALLBACK: Abi = Abi::C { unwind: false };"}, {"sha": "d3fd06392b0ed5ba1263f8266de00c927eea9a6b", "filename": "src/test/run-make-fulldeps/print-calling-conventions/Makefile", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/77e7e88567691068f5fba288618023368882d60b/src%2Ftest%2Frun-make-fulldeps%2Fprint-calling-conventions%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/77e7e88567691068f5fba288618023368882d60b/src%2Ftest%2Frun-make-fulldeps%2Fprint-calling-conventions%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fprint-calling-conventions%2FMakefile?ref=77e7e88567691068f5fba288618023368882d60b", "patch": "@@ -0,0 +1,4 @@\n+-include ../tools.mk\n+\n+all:\n+\t$(RUSTC) --print calling-conventions"}, {"sha": "94991a5eb17e89b0d2778f743d2be8165454022f", "filename": "src/test/ui/abi/abi-typo-unstable.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/77e7e88567691068f5fba288618023368882d60b/src%2Ftest%2Fui%2Fabi%2Fabi-typo-unstable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77e7e88567691068f5fba288618023368882d60b/src%2Ftest%2Fui%2Fabi%2Fabi-typo-unstable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabi%2Fabi-typo-unstable.rs?ref=77e7e88567691068f5fba288618023368882d60b", "patch": "@@ -0,0 +1,6 @@\n+// rust-intrinsic is unstable and not enabled, so it should not be suggested as a fix\n+extern \"rust-intrinsec\" fn rust_intrinsic() {} //~ ERROR invalid ABI\n+\n+fn main() {\n+    rust_intrinsic();\n+}"}, {"sha": "3b346e00227a3416aec45704b4f98eba86d9689d", "filename": "src/test/ui/abi/abi-typo-unstable.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/77e7e88567691068f5fba288618023368882d60b/src%2Ftest%2Fui%2Fabi%2Fabi-typo-unstable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/77e7e88567691068f5fba288618023368882d60b/src%2Ftest%2Fui%2Fabi%2Fabi-typo-unstable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabi%2Fabi-typo-unstable.stderr?ref=77e7e88567691068f5fba288618023368882d60b", "patch": "@@ -0,0 +1,11 @@\n+error[E0703]: invalid ABI: found `rust-intrinsec`\n+  --> $DIR/abi-typo-unstable.rs:2:8\n+   |\n+LL | extern \"rust-intrinsec\" fn rust_intrinsic() {}\n+   |        ^^^^^^^^^^^^^^^^ invalid ABI\n+   |\n+   = note: invoke `rustc --print=calling-conventions` for a full list of supported calling conventions.\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0703`."}, {"sha": "05ceb6910dadd516317ace07cac59fc518c817c5", "filename": "src/test/ui/codemap_tests/unicode.normal.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77e7e88567691068f5fba288618023368882d60b/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode.normal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/77e7e88567691068f5fba288618023368882d60b/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode.normal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode.normal.stderr?ref=77e7e88567691068f5fba288618023368882d60b", "patch": "@@ -4,7 +4,7 @@ error[E0703]: invalid ABI: found `\u8def\u6feb\u72fc\u00e1\u0301\u0301`\n LL | extern \"\u8def\u6feb\u72fc\u00e1\u0301\u0301\" fn foo() {}\n    |        ^^^^^^^^^ invalid ABI\n    |\n-   = help: valid ABIs: Rust, C, C-unwind, cdecl, cdecl-unwind, stdcall, stdcall-unwind, fastcall, fastcall-unwind, vectorcall, vectorcall-unwind, thiscall, thiscall-unwind, aapcs, aapcs-unwind, win64, win64-unwind, sysv64, sysv64-unwind, ptx-kernel, msp430-interrupt, x86-interrupt, amdgpu-kernel, efiapi, avr-interrupt, avr-non-blocking-interrupt, C-cmse-nonsecure-call, wasm, system, system-unwind, rust-intrinsic, rust-call, platform-intrinsic, unadjusted, rust-cold\n+   = note: invoke `rustc --print=calling-conventions` for a full list of supported calling conventions.\n \n error: aborting due to previous error\n "}, {"sha": "523cc9dc588f49ee6da6fae243e5ba857da47071", "filename": "src/test/ui/parser/issues/issue-8537.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77e7e88567691068f5fba288618023368882d60b/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-8537.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/77e7e88567691068f5fba288618023368882d60b/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-8537.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-8537.stderr?ref=77e7e88567691068f5fba288618023368882d60b", "patch": "@@ -4,7 +4,7 @@ error[E0703]: invalid ABI: found `invalid-ab_isize`\n LL |   \"invalid-ab_isize\"\n    |   ^^^^^^^^^^^^^^^^^^ invalid ABI\n    |\n-   = help: valid ABIs: Rust, C, C-unwind, cdecl, cdecl-unwind, stdcall, stdcall-unwind, fastcall, fastcall-unwind, vectorcall, vectorcall-unwind, thiscall, thiscall-unwind, aapcs, aapcs-unwind, win64, win64-unwind, sysv64, sysv64-unwind, ptx-kernel, msp430-interrupt, x86-interrupt, amdgpu-kernel, efiapi, avr-interrupt, avr-non-blocking-interrupt, C-cmse-nonsecure-call, wasm, system, system-unwind, rust-intrinsic, rust-call, platform-intrinsic, unadjusted, rust-cold\n+   = note: invoke `rustc --print=calling-conventions` for a full list of supported calling conventions.\n \n error: aborting due to previous error\n "}, {"sha": "04d265865f0f8ce275e9fd236f8297ee74da884c", "filename": "src/test/ui/suggestions/abi-typo.fixed", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/77e7e88567691068f5fba288618023368882d60b/src%2Ftest%2Fui%2Fsuggestions%2Fabi-typo.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/77e7e88567691068f5fba288618023368882d60b/src%2Ftest%2Fui%2Fsuggestions%2Fabi-typo.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fabi-typo.fixed?ref=77e7e88567691068f5fba288618023368882d60b", "patch": "@@ -0,0 +1,6 @@\n+// run-rustfix\n+extern \"cdecl\" fn cdedl() {} //~ ERROR invalid ABI\n+\n+fn main() {\n+    cdedl();\n+}"}, {"sha": "6d80db522ebc1eb3577eb72063973818eb7f835d", "filename": "src/test/ui/suggestions/abi-typo.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/77e7e88567691068f5fba288618023368882d60b/src%2Ftest%2Fui%2Fsuggestions%2Fabi-typo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77e7e88567691068f5fba288618023368882d60b/src%2Ftest%2Fui%2Fsuggestions%2Fabi-typo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fabi-typo.rs?ref=77e7e88567691068f5fba288618023368882d60b", "patch": "@@ -0,0 +1,6 @@\n+// run-rustfix\n+extern \"cdedl\" fn cdedl() {} //~ ERROR invalid ABI\n+\n+fn main() {\n+    cdedl();\n+}"}, {"sha": "67a84f119f6c7fc4cf101b06390c6aa968a8d2ba", "filename": "src/test/ui/suggestions/abi-typo.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/77e7e88567691068f5fba288618023368882d60b/src%2Ftest%2Fui%2Fsuggestions%2Fabi-typo.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/77e7e88567691068f5fba288618023368882d60b/src%2Ftest%2Fui%2Fsuggestions%2Fabi-typo.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fabi-typo.stderr?ref=77e7e88567691068f5fba288618023368882d60b", "patch": "@@ -0,0 +1,14 @@\n+error[E0703]: invalid ABI: found `cdedl`\n+  --> $DIR/abi-typo.rs:2:8\n+   |\n+LL | extern \"cdedl\" fn cdedl() {}\n+   |        ^^^^^^^\n+   |        |\n+   |        invalid ABI\n+   |        help: did you mean: `\"cdecl\"`\n+   |\n+   = note: invoke `rustc --print=calling-conventions` for a full list of supported calling conventions.\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0703`."}]}