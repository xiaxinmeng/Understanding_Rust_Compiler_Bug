{"sha": "e98c7f720901f6a375bba749d08a75354c347ba6", "node_id": "C_kwDOAAsO6NoAKGU5OGM3ZjcyMDkwMWY2YTM3NWJiYTc0OWQwOGE3NTM1NGMzNDdiYTY", "commit": {"author": {"name": "Thom Chiovoloni", "email": "chiovolonit@gmail.com", "date": "2021-10-30T11:22:10Z"}, "committer": {"name": "Thom Chiovoloni", "email": "chiovolonit@gmail.com", "date": "2022-02-05T02:47:31Z"}, "message": "Use wrapping pointer arithmetic in the bitpacked io::Error", "tree": {"sha": "1d623a7164fc947d75580995d7148d33eb0bb27e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d623a7164fc947d75580995d7148d33eb0bb27e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e98c7f720901f6a375bba749d08a75354c347ba6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEh0+qV0hta6XFe2D54u/UMJ4RyKgFAmH95UMACgkQ4u/UMJ4R\nyKhu2xAAnTzwN7P2ij+4Ek6W38QLeLq68r3q2TYTlsqriV8JWykaDa7GZuKpbAer\nfCPlsQcGmN9TPicozvJrwdevyfwfUm30SF+lLJaGWhtM+iEzwLHS9YUuWR7tJzZT\nH9KPgRz6HdE3y6j2pRdQkDKyepZACJT+eyRrbrnGj5o04NGobm9/jpq3pkdCZ+wL\nw0UDCj/TWlV1zjf8jmR2lu9dO2kC0L2bQCTuBKPdKWb0ek+0Z2JIixgEYr4l3pOv\nNIi60r65CgWcI+F4jeBUqpxMTDwzko7kJJheKMBNyRQP7uuEpHH/16Zewy8DfyE0\nlR/tAsutQ7QTEDEBy9Qtt8utR9ZIvUhb6bSD95KiK32/8ykkiBlvGaR287CSPLVh\nZNfe/47dMtq+02JEcf32iCTsjOZDqwDlshPj5RFPy7hqn+UAjnv5f37gdr1KRmex\nSiujPnI+F4s8aH/E3NLL8mSsRqhQ96AIN75Q/g14XZrUbhU9keXejzUdsH2/tY0z\n4OAMmElu6IXU1nNIb+mMiJn3xbGre6cxNlk/kHB7xx9JtxEDjtOLJa5j2tr7S3NW\nzXmK4Z4irrhg5m4w3a/CSFt4a6iPmdMdujctiW6E9NjKO6KQNWN0CmGVGyqgkhq3\nxV9k+2cENXB3JpEvIEe3sLHmF3j0yinHFkC8sOw4ZCXA5s9vJM4=\n=xSrn\n-----END PGP SIGNATURE-----", "payload": "tree 1d623a7164fc947d75580995d7148d33eb0bb27e\nparent f950edbef773c101bf1ed79fb82e3704e1fb9ebc\nauthor Thom Chiovoloni <chiovolonit@gmail.com> 1635592930 -0700\ncommitter Thom Chiovoloni <chiovolonit@gmail.com> 1644029251 -0800\n\nUse wrapping pointer arithmetic in the bitpacked io::Error\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e98c7f720901f6a375bba749d08a75354c347ba6", "html_url": "https://github.com/rust-lang/rust/commit/e98c7f720901f6a375bba749d08a75354c347ba6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e98c7f720901f6a375bba749d08a75354c347ba6/comments", "author": {"login": "thomcc", "id": 860665, "node_id": "MDQ6VXNlcjg2MDY2NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/860665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomcc", "html_url": "https://github.com/thomcc", "followers_url": "https://api.github.com/users/thomcc/followers", "following_url": "https://api.github.com/users/thomcc/following{/other_user}", "gists_url": "https://api.github.com/users/thomcc/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomcc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomcc/subscriptions", "organizations_url": "https://api.github.com/users/thomcc/orgs", "repos_url": "https://api.github.com/users/thomcc/repos", "events_url": "https://api.github.com/users/thomcc/events{/privacy}", "received_events_url": "https://api.github.com/users/thomcc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thomcc", "id": 860665, "node_id": "MDQ6VXNlcjg2MDY2NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/860665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomcc", "html_url": "https://github.com/thomcc", "followers_url": "https://api.github.com/users/thomcc/followers", "following_url": "https://api.github.com/users/thomcc/following{/other_user}", "gists_url": "https://api.github.com/users/thomcc/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomcc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomcc/subscriptions", "organizations_url": "https://api.github.com/users/thomcc/orgs", "repos_url": "https://api.github.com/users/thomcc/repos", "events_url": "https://api.github.com/users/thomcc/events{/privacy}", "received_events_url": "https://api.github.com/users/thomcc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f950edbef773c101bf1ed79fb82e3704e1fb9ebc", "url": "https://api.github.com/repos/rust-lang/rust/commits/f950edbef773c101bf1ed79fb82e3704e1fb9ebc", "html_url": "https://github.com/rust-lang/rust/commit/f950edbef773c101bf1ed79fb82e3704e1fb9ebc"}], "stats": {"total": 23, "additions": 15, "deletions": 8}, "files": [{"sha": "6f7b4ac19cc774114e2d6d4c6969fc761e34e144", "filename": "library/std/src/io/error/repr_bitpacked.rs", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e98c7f720901f6a375bba749d08a75354c347ba6/library%2Fstd%2Fsrc%2Fio%2Ferror%2Frepr_bitpacked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e98c7f720901f6a375bba749d08a75354c347ba6/library%2Fstd%2Fsrc%2Fio%2Ferror%2Frepr_bitpacked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Ferror%2Frepr_bitpacked.rs?ref=e98c7f720901f6a375bba749d08a75354c347ba6", "patch": "@@ -47,9 +47,10 @@\n //!   `Box<Custom>`. `Custom` also has alignment >= 4, so the bottom two bits\n //!   are free to use for the tag.\n //!\n-//!   The only important thing to note is that `ptr::add` and `ptr::sub` are\n-//!   used to tag the pointer, rather than bitwise operations. This should\n-//!   preserve the pointer's provenance, which would otherwise be lost.\n+//!   The only important thing to note is that `ptr::wrapping_add` and\n+//!   `ptr::wrapping_sub` are used to tag the pointer, rather than bitwise\n+//!   operations. This should preserve the pointer's provenance, which would\n+//!   otherwise be lost.\n //!\n //! - **Tag 0b10**: Holds the data for `ErrorData::Os(i32)`. We store the `i32`\n //!   in the pointer's most significant 32 bits, and don't use the bits `2..32`\n@@ -126,11 +127,14 @@ impl Repr {\n         // Should only be possible if an allocator handed out a pointer with\n         // wrong alignment.\n         debug_assert_eq!((p as usize & TAG_MASK), 0);\n-        // Safety: We know `TAG_CUSTOM <= size_of::<Custom>()` (static_assert at\n+        // Note: We know `TAG_CUSTOM <= size_of::<Custom>()` (static_assert at\n         // end of file), and both the start and end of the expression must be\n         // valid without address space wraparound due to `Box`'s semantics.\n-        // Note: `add` is used as a provenance-preserving way of pointer tagging.\n-        let tagged = unsafe { p.add(TAG_CUSTOM).cast::<()>() };\n+        //\n+        // This means it would be correct to implement this using `ptr::add`\n+        // (rather than `ptr::wrapping_add`), but it's unclear this would give\n+        // any benefit, so we just use `wrapping_add` instead.\n+        let tagged = p.wrapping_add(TAG_CUSTOM).cast::<()>();\n         // Safety: the above safety comment also means the result can't be null.\n         let res = Self(unsafe { NonNull::new_unchecked(tagged) });\n         // quickly smoke-check we encoded the right thing (This generally will\n@@ -238,7 +242,10 @@ where\n         }\n         TAG_SIMPLE_MESSAGE => ErrorData::SimpleMessage(&*ptr.cast::<SimpleMessage>().as_ptr()),\n         TAG_CUSTOM => {\n-            let custom = ptr.as_ptr().cast::<u8>().sub(TAG_CUSTOM).cast::<Custom>();\n+            // It would be correct for us to use `ptr::sub` here (see the\n+            // comment above the `wrapping_add` call in `new_custom` for why),\n+            // but it isn't clear that it makes a difference, so we don't.\n+            let custom = ptr.as_ptr().cast::<u8>().wrapping_sub(TAG_CUSTOM).cast::<Custom>();\n             ErrorData::Custom(make_custom(custom))\n         }\n         _ => {\n@@ -337,7 +344,7 @@ static_assert!(align_of::<SimpleMessage>() >= 4);\n static_assert!(align_of::<Custom>() >= 4);\n \n // This is obviously true (`TAG_CUSTOM` is `0b01`), but our implementation of\n-// `Repr::new_custom` and such would be UB if it were not, so we check.\n+// `Repr::new_custom` and such would be wrong if it were not, so we check.\n static_assert!(size_of::<Custom>() >= TAG_CUSTOM);\n // These two store a payload which is allowed to be zero, so they must be\n // non-zero to preserve the `NonNull`'s range invariant."}]}