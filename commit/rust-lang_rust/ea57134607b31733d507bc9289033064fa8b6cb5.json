{"sha": "ea57134607b31733d507bc9289033064fa8b6cb5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhNTcxMzQ2MDdiMzE3MzNkNTA3YmM5Mjg5MDMzMDY0ZmE4YjZjYjU=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-10-28T18:38:50Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-10-28T18:38:50Z"}, "message": "Produce targeted diagnostic when using doc comments on fn args\n\nBefore parsing argument names and types, try to consume an incorrectly\nincluded doc comment or attribute in order to recover and continue\nparsing the rest of the fn definition.", "tree": {"sha": "a83c4b3a97b3e9a1d995036f0b50a6f58b567fa9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a83c4b3a97b3e9a1d995036f0b50a6f58b567fa9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea57134607b31733d507bc9289033064fa8b6cb5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea57134607b31733d507bc9289033064fa8b6cb5", "html_url": "https://github.com/rust-lang/rust/commit/ea57134607b31733d507bc9289033064fa8b6cb5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea57134607b31733d507bc9289033064fa8b6cb5/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e6f30ec3e6bda159063fcd126dcb14725fef92d", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e6f30ec3e6bda159063fcd126dcb14725fef92d", "html_url": "https://github.com/rust-lang/rust/commit/3e6f30ec3e6bda159063fcd126dcb14725fef92d"}], "stats": {"total": 157, "additions": 152, "deletions": 5}, "files": [{"sha": "3056d1c545cc1282e43212a2bcd421308fe3d694", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 36, "deletions": 1, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/ea57134607b31733d507bc9289033064fa8b6cb5/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea57134607b31733d507bc9289033064fa8b6cb5/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=ea57134607b31733d507bc9289033064fa8b6cb5", "patch": "@@ -1789,6 +1789,35 @@ impl<'a> Parser<'a> {\n         self.look_ahead(offset + 1, |t| t == &token::Colon)\n     }\n \n+    /// Skip unexpected attributes and doc comments in this position and emit an appropriate error.\n+    fn eat_incorrect_doc_comment(&mut self, applied_to: &str) {\n+        if let token::DocComment(_) = self.token {\n+            let mut err = self.diagnostic().struct_span_err(\n+                self.span,\n+                &format!(\"documentation comments cannot be applied to {}\", applied_to),\n+            );\n+            err.span_label(self.span, \"doc comments are not allowed here\");\n+            err.emit();\n+            self.bump();\n+        } else if self.token == token::Pound && self.look_ahead(1, |t| {\n+            *t == token::OpenDelim(token::Bracket)\n+        }) {\n+            let lo = self.span;\n+            // Skip every token until next possible arg.\n+            while self.token != token::CloseDelim(token::Bracket) {\n+                self.bump();\n+            }\n+            let sp = lo.to(self.span);\n+            self.bump();\n+            let mut err = self.diagnostic().struct_span_err(\n+                sp,\n+                &format!(\"attributes cannot be applied to {}\", applied_to),\n+            );\n+            err.span_label(sp, \"attributes are not allowed here\");\n+            err.emit();\n+        }\n+    }\n+\n     /// This version of parse arg doesn't necessarily require\n     /// identifier names.\n     fn parse_arg_general(&mut self, require_name: bool) -> PResult<'a, Arg> {\n@@ -1797,7 +1826,11 @@ impl<'a> Parser<'a> {\n         let (pat, ty) = if require_name || self.is_named_argument() {\n             debug!(\"parse_arg_general parse_pat (require_name:{})\",\n                    require_name);\n-            let pat = self.parse_pat()?;\n+            self.eat_incorrect_doc_comment(\"method arguments\");\n+            let pat = self.parse_pat().map_err(|mut err| {\n+                err.span_label(self.span, \"expected argument name\");\n+                err\n+            })?;\n \n             if let Err(mut err) = self.expect(&token::Colon) {\n                 // If we find a pattern followed by an identifier, it could be an (incorrect)\n@@ -1819,10 +1852,12 @@ impl<'a> Parser<'a> {\n                 return Err(err);\n             }\n \n+            self.eat_incorrect_doc_comment(\"a method argument's type\");\n             (pat, self.parse_ty()?)\n         } else {\n             debug!(\"parse_arg_general ident_to_pat\");\n             let parser_snapshot_before_ty = self.clone();\n+            self.eat_incorrect_doc_comment(\"a method argument's type\");\n             let mut ty = self.parse_ty();\n             if ty.is_ok() && self.token == token::Colon {\n                 // This wasn't actually a type, but a pattern looking like a type,"}, {"sha": "22af94b62845233eb6e3ec3690c2132272eff194", "filename": "src/test/ui/parser/fn-arg-doc-comment.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/ea57134607b31733d507bc9289033064fa8b6cb5/src%2Ftest%2Fui%2Fparser%2Ffn-arg-doc-comment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea57134607b31733d507bc9289033064fa8b6cb5/src%2Ftest%2Fui%2Fparser%2Ffn-arg-doc-comment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ffn-arg-doc-comment.rs?ref=ea57134607b31733d507bc9289033064fa8b6cb5", "patch": "@@ -0,0 +1,37 @@\n+pub fn f(\n+    /// Comment\n+    //~^ ERROR documentation comments cannot be applied to method arguments\n+    //~| NOTE doc comments are not allowed here\n+    id: u8,\n+    /// Other\n+    //~^ ERROR documentation comments cannot be applied to method arguments\n+    //~| NOTE doc comments are not allowed here\n+    a: u8,\n+) {}\n+\n+fn foo(#[allow(dead_code)] id: i32) {}\n+//~^ ERROR attributes cannot be applied to method arguments\n+//~| NOTE attributes are not allowed here\n+\n+fn bar(id: #[allow(dead_code)] i32) {}\n+//~^ ERROR attributes cannot be applied to a method argument's type\n+//~| NOTE attributes are not allowed here\n+\n+fn main() {\n+    // verify that the parser recovered and properly typechecked the args\n+    f(\"\", \"\");\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected u8, found reference\n+    //~| NOTE expected\n+    //~| ERROR mismatched types\n+    //~| NOTE expected u8, found reference\n+    //~| NOTE expected\n+    foo(\"\");\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected i32, found reference\n+    //~| NOTE expected\n+    bar(\"\");\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected i32, found reference\n+    //~| NOTE expected\n+}"}, {"sha": "73a24eebb3f12cc76e38b4cef83651c2d1378ce8", "filename": "src/test/ui/parser/fn-arg-doc-comment.stderr", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/ea57134607b31733d507bc9289033064fa8b6cb5/src%2Ftest%2Fui%2Fparser%2Ffn-arg-doc-comment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ea57134607b31733d507bc9289033064fa8b6cb5/src%2Ftest%2Fui%2Fparser%2Ffn-arg-doc-comment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ffn-arg-doc-comment.stderr?ref=ea57134607b31733d507bc9289033064fa8b6cb5", "patch": "@@ -0,0 +1,63 @@\n+error: documentation comments cannot be applied to method arguments\n+  --> $DIR/fn-arg-doc-comment.rs:2:5\n+   |\n+LL |     /// Comment\n+   |     ^^^^^^^^^^^ doc comments are not allowed here\n+\n+error: documentation comments cannot be applied to method arguments\n+  --> $DIR/fn-arg-doc-comment.rs:6:5\n+   |\n+LL |     /// Other\n+   |     ^^^^^^^^^ doc comments are not allowed here\n+\n+error: attributes cannot be applied to method arguments\n+  --> $DIR/fn-arg-doc-comment.rs:12:8\n+   |\n+LL | fn foo(#[allow(dead_code)] id: i32) {}\n+   |        ^^^^^^^^^^^^^^^^^^^ attributes are not allowed here\n+\n+error: attributes cannot be applied to a method argument's type\n+  --> $DIR/fn-arg-doc-comment.rs:16:12\n+   |\n+LL | fn bar(id: #[allow(dead_code)] i32) {}\n+   |            ^^^^^^^^^^^^^^^^^^^ attributes are not allowed here\n+\n+error[E0308]: mismatched types\n+  --> $DIR/fn-arg-doc-comment.rs:22:7\n+   |\n+LL |     f(\"\", \"\");\n+   |       ^^ expected u8, found reference\n+   |\n+   = note: expected type `u8`\n+              found type `&'static str`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/fn-arg-doc-comment.rs:22:11\n+   |\n+LL |     f(\"\", \"\");\n+   |           ^^ expected u8, found reference\n+   |\n+   = note: expected type `u8`\n+              found type `&'static str`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/fn-arg-doc-comment.rs:29:9\n+   |\n+LL |     foo(\"\");\n+   |         ^^ expected i32, found reference\n+   |\n+   = note: expected type `i32`\n+              found type `&'static str`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/fn-arg-doc-comment.rs:33:9\n+   |\n+LL |     bar(\"\");\n+   |         ^^ expected i32, found reference\n+   |\n+   = note: expected type `i32`\n+              found type `&'static str`\n+\n+error: aborting due to 8 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "4cdd14a3e27e9dc64092c3456a7b5f73d8d96804", "filename": "src/test/ui/parser/issue-33413.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ea57134607b31733d507bc9289033064fa8b6cb5/src%2Ftest%2Fui%2Fparser%2Fissue-33413.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ea57134607b31733d507bc9289033064fa8b6cb5/src%2Ftest%2Fui%2Fparser%2Fissue-33413.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-33413.stderr?ref=ea57134607b31733d507bc9289033064fa8b6cb5", "patch": "@@ -2,7 +2,10 @@ error: expected pattern, found `*`\n   --> $DIR/issue-33413.rs:14:10\n    |\n LL |     fn f(*, a: u8) -> u8 {} //~ ERROR expected pattern, found `*`\n-   |          ^ expected pattern\n+   |          ^\n+   |          |\n+   |          expected pattern\n+   |          expected argument name\n \n error: aborting due to previous error\n "}, {"sha": "83ca1b0ba26602d37670eef1f7bb291a51f17dd1", "filename": "src/test/ui/parser/lifetime-in-pattern.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ea57134607b31733d507bc9289033064fa8b6cb5/src%2Ftest%2Fui%2Fparser%2Flifetime-in-pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ea57134607b31733d507bc9289033064fa8b6cb5/src%2Ftest%2Fui%2Fparser%2Flifetime-in-pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flifetime-in-pattern.stderr?ref=ea57134607b31733d507bc9289033064fa8b6cb5", "patch": "@@ -2,7 +2,10 @@ error: unexpected lifetime `'a` in pattern\n   --> $DIR/lifetime-in-pattern.rs:13:10\n    |\n LL | fn test(&'a str) {\n-   |          ^^ unexpected lifetime\n+   |          ^^\n+   |          |\n+   |          unexpected lifetime\n+   |          expected argument name\n \n error: aborting due to previous error\n "}, {"sha": "c5bc92e37b516a1a083b84aeed1b24456522e76c", "filename": "src/test/ui/parser/removed-syntax-mode.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ea57134607b31733d507bc9289033064fa8b6cb5/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-mode.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ea57134607b31733d507bc9289033064fa8b6cb5/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-mode.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-mode.stderr?ref=ea57134607b31733d507bc9289033064fa8b6cb5", "patch": "@@ -2,7 +2,10 @@ error: expected pattern, found `+`\n   --> $DIR/removed-syntax-mode.rs:13:6\n    |\n LL | fn f(+x: isize) {} //~ ERROR expected pattern, found `+`\n-   |      ^ expected pattern\n+   |      ^\n+   |      |\n+   |      expected pattern\n+   |      expected argument name\n \n error: aborting due to previous error\n "}, {"sha": "4cad8401f2390db7ec2962c573f3b6eaef2f8514", "filename": "src/test/ui/self/self-vs-path-ambiguity.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ea57134607b31733d507bc9289033064fa8b6cb5/src%2Ftest%2Fui%2Fself%2Fself-vs-path-ambiguity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ea57134607b31733d507bc9289033064fa8b6cb5/src%2Ftest%2Fui%2Fself%2Fself-vs-path-ambiguity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Fself-vs-path-ambiguity.stderr?ref=ea57134607b31733d507bc9289033064fa8b6cb5", "patch": "@@ -2,7 +2,10 @@ error: unexpected lifetime `'a` in pattern\n   --> $DIR/self-vs-path-ambiguity.rs:19:11\n    |\n LL |     fn i(&'a self::S: &S) {} //~ ERROR unexpected lifetime `'a` in pattern\n-   |           ^^ unexpected lifetime\n+   |           ^^\n+   |           |\n+   |           unexpected lifetime\n+   |           expected argument name\n \n error: aborting due to previous error\n "}]}