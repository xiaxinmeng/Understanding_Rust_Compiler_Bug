{"sha": "d7b3f5c6aeedf07c6a0ea4d5a79a106642488e0d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3YjNmNWM2YWVlZGYwN2M2YTBlYTRkNWE3OWExMDY2NDI0ODhlMGQ=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2018-11-21T00:49:47Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2018-11-21T11:50:17Z"}, "message": "update various stdlib docs", "tree": {"sha": "1d146e70d1c256859d77d3481aca8cf89b0a481f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d146e70d1c256859d77d3481aca8cf89b0a481f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7b3f5c6aeedf07c6a0ea4d5a79a106642488e0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7b3f5c6aeedf07c6a0ea4d5a79a106642488e0d", "html_url": "https://github.com/rust-lang/rust/commit/d7b3f5c6aeedf07c6a0ea4d5a79a106642488e0d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7b3f5c6aeedf07c6a0ea4d5a79a106642488e0d/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57b7d55591d0a4a0d9aa16afa0f202427aa89aa3", "url": "https://api.github.com/repos/rust-lang/rust/commits/57b7d55591d0a4a0d9aa16afa0f202427aa89aa3", "html_url": "https://github.com/rust-lang/rust/commit/57b7d55591d0a4a0d9aa16afa0f202427aa89aa3"}], "stats": {"total": 59, "additions": 22, "deletions": 37}, "files": [{"sha": "705345ce963bb28f48aea4565cf6ecc855f4908f", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d7b3f5c6aeedf07c6a0ea4d5a79a106642488e0d/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b3f5c6aeedf07c6a0ea4d5a79a106642488e0d/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=d7b3f5c6aeedf07c6a0ea4d5a79a106642488e0d", "patch": "@@ -43,8 +43,8 @@\n //!\n //! `Rc<T>` automatically dereferences to `T` (via the [`Deref`] trait),\n //! so you can call `T`'s methods on a value of type [`Rc<T>`][`Rc`]. To avoid name\n-//! clashes with `T`'s methods, the methods of [`Rc<T>`][`Rc`] itself are [associated\n-//! functions][assoc], called using function-like syntax:\n+//! clashes with `T`'s methods, the methods of [`Rc<T>`][`Rc`] itself are associated\n+//! functions, called using function-like syntax:\n //!\n //! ```\n //! use std::rc::Rc;\n@@ -234,7 +234,6 @@\n //! [downgrade]: struct.Rc.html#method.downgrade\n //! [upgrade]: struct.Weak.html#method.upgrade\n //! [`None`]: ../../std/option/enum.Option.html#variant.None\n-//! [assoc]: ../../book/first-edition/method-syntax.html#associated-functions\n //! [mutability]: ../../std/cell/index.html#introducing-mutability-inside-of-something-immutable\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "4f4031e3c4e32a120f86f02fb950a0c36c2f107b", "filename": "src/liballoc/sync.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d7b3f5c6aeedf07c6a0ea4d5a79a106642488e0d/src%2Fliballoc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b3f5c6aeedf07c6a0ea4d5a79a106642488e0d/src%2Fliballoc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fsync.rs?ref=d7b3f5c6aeedf07c6a0ea4d5a79a106642488e0d", "patch": "@@ -120,8 +120,8 @@ const MAX_REFCOUNT: usize = (isize::MAX) as usize;\n ///\n /// `Arc<T>` automatically dereferences to `T` (via the [`Deref`][deref] trait),\n /// so you can call `T`'s methods on a value of type `Arc<T>`. To avoid name\n-/// clashes with `T`'s methods, the methods of `Arc<T>` itself are [associated\n-/// functions][assoc], called using function-like syntax:\n+/// clashes with `T`'s methods, the methods of `Arc<T>` itself are associated\n+/// functions, called using function-like syntax:\n ///\n /// ```\n /// use std::sync::Arc;\n@@ -146,7 +146,6 @@ const MAX_REFCOUNT: usize = (isize::MAX) as usize;\n /// [downgrade]: struct.Arc.html#method.downgrade\n /// [upgrade]: struct.Weak.html#method.upgrade\n /// [`None`]: ../../std/option/enum.Option.html#variant.None\n-/// [assoc]: ../../book/first-edition/method-syntax.html#associated-functions\n /// [`RefCell<T>`]: ../../std/cell/struct.RefCell.html\n /// [`std::sync`]: ../../std/sync/index.html\n /// [`Arc::clone(&from)`]: #method.clone"}, {"sha": "160728f923dbcbac4fa5a65b67121c504c4119d7", "filename": "src/libcore/char/convert.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d7b3f5c6aeedf07c6a0ea4d5a79a106642488e0d/src%2Flibcore%2Fchar%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b3f5c6aeedf07c6a0ea4d5a79a106642488e0d/src%2Flibcore%2Fchar%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar%2Fconvert.rs?ref=d7b3f5c6aeedf07c6a0ea4d5a79a106642488e0d", "patch": "@@ -19,7 +19,7 @@ use super::MAX;\n /// Converts a `u32` to a `char`.\n ///\n /// Note that all [`char`]s are valid [`u32`]s, and can be cast to one with\n-/// [`as`]:\n+/// `as`:\n ///\n /// ```\n /// let c = '\ud83d\udcaf';\n@@ -34,7 +34,6 @@ use super::MAX;\n ///\n /// [`char`]: ../../std/primitive.char.html\n /// [`u32`]: ../../std/primitive.u32.html\n-/// [`as`]: ../../book/first-edition/casting-between-types.html#as\n ///\n /// For an unsafe version of this function which ignores these checks, see\n /// [`from_u32_unchecked`].\n@@ -71,7 +70,7 @@ pub fn from_u32(i: u32) -> Option<char> {\n /// Converts a `u32` to a `char`, ignoring validity.\n ///\n /// Note that all [`char`]s are valid [`u32`]s, and can be cast to one with\n-/// [`as`]:\n+/// `as`:\n ///\n /// ```\n /// let c = '\ud83d\udcaf';\n@@ -86,7 +85,6 @@ pub fn from_u32(i: u32) -> Option<char> {\n ///\n /// [`char`]: ../../std/primitive.char.html\n /// [`u32`]: ../../std/primitive.u32.html\n-/// [`as`]: ../../book/first-edition/casting-between-types.html#as\n ///\n /// # Safety\n ///"}, {"sha": "6b2d878b3e7b854b7ffc2585141e6af8bf4ccbe3", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d7b3f5c6aeedf07c6a0ea4d5a79a106642488e0d/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b3f5c6aeedf07c6a0ea4d5a79a106642488e0d/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=d7b3f5c6aeedf07c6a0ea4d5a79a106642488e0d", "patch": "@@ -132,7 +132,6 @@ pub use intrinsics::transmute;\n /// [uninit]: fn.uninitialized.html\n /// [clone]: ../clone/trait.Clone.html\n /// [swap]: fn.swap.html\n-/// [FFI]: ../../book/first-edition/ffi.html\n /// [box]: ../../std/boxed/struct.Box.html\n /// [leak]: ../../std/boxed/struct.Box.html#method.leak\n /// [into_raw]: ../../std/boxed/struct.Box.html#method.into_raw\n@@ -479,7 +478,7 @@ pub const fn needs_drop<T>() -> bool {\n ///\n /// This has the same effect as allocating space with\n /// [`mem::uninitialized`][uninit] and then zeroing it out. It is useful for\n-/// [FFI] sometimes, but should generally be avoided.\n+/// FFI sometimes, but should generally be avoided.\n ///\n /// There is no guarantee that an all-zero byte-pattern represents a valid value of\n /// some type `T`. If `T` has a destructor and the value is destroyed (due to\n@@ -490,7 +489,6 @@ pub const fn needs_drop<T>() -> bool {\n /// many of the same caveats.\n ///\n /// [uninit]: fn.uninitialized.html\n-/// [FFI]: ../../book/first-edition/ffi.html\n /// [ub]: ../../reference/behavior-considered-undefined.html\n ///\n /// # Examples\n@@ -514,11 +512,9 @@ pub unsafe fn zeroed<T>() -> T {\n /// **This is incredibly dangerous and should not be done lightly. Deeply\n /// consider initializing your memory with a default value instead.**\n ///\n-/// This is useful for [FFI] functions and initializing arrays sometimes,\n+/// This is useful for FFI functions and initializing arrays sometimes,\n /// but should generally be avoided.\n ///\n-/// [FFI]: ../../book/first-edition/ffi.html\n-///\n /// # Undefined behavior\n ///\n /// It is [undefined behavior][ub] to read uninitialized memory, even just an\n@@ -689,10 +685,9 @@ pub fn replace<T>(dest: &mut T, mut src: T) -> T {\n /// While this does call the argument's implementation of [`Drop`][drop],\n /// it will not release any borrows, as borrows are based on lexical scope.\n ///\n-/// This effectively does nothing for\n-/// [types which implement `Copy`](../../book/first-edition/ownership.html#copy-types),\n-/// e.g. integers. Such values are copied and _then_ moved into the function,\n-/// so the value persists after this function call.\n+/// This effectively does nothing for types which implement `Copy`, e.g.\n+/// integers. Such values are copied and _then_ moved into the function, so the\n+/// value persists after this function call.\n ///\n /// This function is not magic; it is literally defined as\n ///"}, {"sha": "e9cf11424cae1bd6a24f3ea9875c73e9de70e211", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7b3f5c6aeedf07c6a0ea4d5a79a106642488e0d/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b3f5c6aeedf07c6a0ea4d5a79a106642488e0d/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=d7b3f5c6aeedf07c6a0ea4d5a79a106642488e0d", "patch": "@@ -58,7 +58,7 @@\n //! [`NonNull::dangling`] in such cases.\n //!\n //! [aliasing]: ../../nomicon/aliasing.html\n-//! [book]: ../../book/second-edition/ch19-01-unsafe-rust.html#dereferencing-a-raw-pointer\n+//! [book]: ../../book/ch19-01-unsafe-rust.html#dereferencing-a-raw-pointer\n //! [ub]: ../../reference/behavior-considered-undefined.html\n //! [null]: ./fn.null.html\n //! [zst]: ../../nomicon/exotic-sizes.html#zero-sized-types-zsts"}, {"sha": "495b9afe86023ef6c06b3b615680ad5afc174c91", "filename": "src/libcore/raw.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d7b3f5c6aeedf07c6a0ea4d5a79a106642488e0d/src%2Flibcore%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b3f5c6aeedf07c6a0ea4d5a79a106642488e0d/src%2Flibcore%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fraw.rs?ref=d7b3f5c6aeedf07c6a0ea4d5a79a106642488e0d", "patch": "@@ -21,11 +21,7 @@\n /// The representation of a trait object like `&SomeTrait`.\n ///\n /// This struct has the same layout as types like `&SomeTrait` and\n-/// `Box<AnotherTrait>`. The [Trait Objects chapter of the\n-/// Book][moreinfo] contains more details about the precise nature of\n-/// these internals.\n-///\n-/// [moreinfo]: ../../book/first-edition/trait-objects.html#representation\n+/// `Box<AnotherTrait>`.\n ///\n /// `TraitObject` is guaranteed to match layouts, but it is not the\n /// type of trait objects (e.g. the fields are not directly accessible"}, {"sha": "575903d576a23552b09d592fbb0301e6ffac1917", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7b3f5c6aeedf07c6a0ea4d5a79a106642488e0d/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b3f5c6aeedf07c6a0ea4d5a79a106642488e0d/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=d7b3f5c6aeedf07c6a0ea4d5a79a106642488e0d", "patch": "@@ -185,7 +185,7 @@\n //! [slice]: primitive.slice.html\n //! [`atomic`]: sync/atomic/index.html\n //! [`collections`]: collections/index.html\n-/// [`for`]: ../../book/ch03-05-control-flow.html#looping-through-a-collection-with-for\n+//! [`for`]: ../book/ch03-05-control-flow.html#looping-through-a-collection-with-for\n //! [`format!`]: macro.format.html\n //! [`fs`]: fs/index.html\n //! [`io`]: io/index.html\n@@ -200,7 +200,7 @@\n //! [`sync`]: sync/index.html\n //! [`thread`]: thread/index.html\n //! [`use std::env`]: env/index.html\n-//! [`use`]: ../book/ch07-02-modules-and-use-to-control-scope-and-privacy.html#use-to-bring-paths-into-scope\n+//! [`use`]: ../book/ch07-02-modules-and-use-to-control-scope-and-privacy.html#the-use-keyword-to-bring-paths-into-a-scope\n //! [crate root]: ../book/ch07-01-packages-and-crates-for-making-libraries-and-executables.html\n //! [crates.io]: https://crates.io\n //! [deref-coercions]: ../book/ch15-02-deref.html#implicit-deref-coercions-with-functions-and-methods"}, {"sha": "0995ab3c373ca19fc84b82db8b2950de194e78b2", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d7b3f5c6aeedf07c6a0ea4d5a79a106642488e0d/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b3f5c6aeedf07c6a0ea4d5a79a106642488e0d/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=d7b3f5c6aeedf07c6a0ea4d5a79a106642488e0d", "patch": "@@ -32,7 +32,7 @@\n ///\n /// [`Result`] enum is often a better solution for recovering from errors than\n /// using the `panic!` macro.  This macro should be used to avoid proceeding using\n-/// incorrect values, such as from external sources.  Detailed information about\n+/// incorrect values, such as from external sources. Detailed information about\n /// error handling is found in the [book].\n ///\n /// The multi-argument form of this macro panics with a string and has the\n@@ -45,7 +45,7 @@\n /// [`Result`]: ../std/result/enum.Result.html\n /// [`format!`]: ../std/macro.format.html\n /// [`compile_error!`]: ../std/macro.compile_error.html\n-/// [book]: ../book/second-edition/ch09-01-unrecoverable-errors-with-panic.html\n+/// [book]: ../book/ch09-00-error-handling.html\n ///\n /// # Current implementation\n ///\n@@ -839,8 +839,8 @@ mod builtin {\n     /// boolean expression evaluation of configuration flags. This frequently\n     /// leads to less duplicated code.\n     ///\n-    /// The syntax given to this macro is the same syntax as [the `cfg`\n-    /// attribute](../book/first-edition/conditional-compilation.html).\n+    /// The syntax given to this macro is the same syntax as the `cfg`\n+    /// attribute.\n     ///\n     /// # Examples\n     ///\n@@ -915,7 +915,7 @@ mod builtin {\n     /// Unsafe code relies on `assert!` to enforce run-time invariants that, if\n     /// violated could lead to unsafety.\n     ///\n-    /// Other use-cases of `assert!` include [testing] and enforcing run-time\n+    /// Other use-cases of `assert!` include testing and enforcing run-time\n     /// invariants in safe code (whose violation cannot result in unsafety).\n     ///\n     /// # Custom Messages\n@@ -926,7 +926,6 @@ mod builtin {\n     ///\n     /// [`panic!`]: macro.panic.html\n     /// [`debug_assert!`]: macro.debug_assert.html\n-    /// [testing]: ../book/second-edition/ch11-01-writing-tests.html#checking-results-with-the-assert-macro\n     /// [`std::fmt`]: ../std/fmt/index.html\n     ///\n     /// # Examples"}, {"sha": "48acc1096a6811494b721d3931e0cfd857fda393", "filename": "src/libstd/primitive_docs.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d7b3f5c6aeedf07c6a0ea4d5a79a106642488e0d/src%2Flibstd%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b3f5c6aeedf07c6a0ea4d5a79a106642488e0d/src%2Flibstd%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprimitive_docs.rs?ref=d7b3f5c6aeedf07c6a0ea4d5a79a106642488e0d", "patch": "@@ -22,7 +22,7 @@\n /// `bool` implements various traits, such as [`BitAnd`], [`BitOr`], [`Not`], etc.,\n /// which allow us to perform boolean operations using `&`, `|` and `!`.\n ///\n-/// [`if`] always demands a `bool` value. [`assert!`], being an important macro in testing,\n+/// `if` always demands a `bool` value. [`assert!`], being an important macro in testing,\n /// checks whether an expression returns `true`.\n ///\n /// ```\n@@ -31,7 +31,6 @@\n /// ```\n ///\n /// [`assert!`]: macro.assert.html\n-/// [`if`]: ../book/first-edition/if.html\n /// [`BitAnd`]: ops/trait.BitAnd.html\n /// [`BitOr`]: ops/trait.BitOr.html\n /// [`Not`]: ops/trait.Not.html\n@@ -695,7 +694,7 @@ mod prim_str { }\n /// assert_eq!(tuple.2, 'c');\n /// ```\n ///\n-/// For more about tuples, see [the book](../book/first-edition/primitive-types.html#tuples).\n+/// For more about tuples, see [the book](../book/ch03-02-data-types.html#the-tuple-type).\n ///\n /// # Trait implementations\n ///"}]}