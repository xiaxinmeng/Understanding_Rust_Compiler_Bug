{"sha": "07be6299d89b24e59514b5d3fe13abed5b17e50e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3YmU2Mjk5ZDg5YjI0ZTU5NTE0YjVkM2ZlMTNhYmVkNWIxN2U1MGU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-07-13T04:00:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-07-13T04:00:49Z"}, "message": "Auto merge of #26947 - nagisa:unicode-escape-error, r=nrc\n\nInspired by the now-mysteriously-closed https://github.com/rust-lang/rust/pull/26782.\r\n\r\nThis PR introduces better error messages when unicode escapes have invalid format (e.g. `\\uFFFF`). It also makes rustc always tell the user that escape may not be used in byte-strings and bytes and fixes some spans to not include unecessary characters and include escape backslash in some others.", "tree": {"sha": "6a3c3acf36068e5205104b66b011752279b0ee60", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a3c3acf36068e5205104b66b011752279b0ee60"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/07be6299d89b24e59514b5d3fe13abed5b17e50e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/07be6299d89b24e59514b5d3fe13abed5b17e50e", "html_url": "https://github.com/rust-lang/rust/commit/07be6299d89b24e59514b5d3fe13abed5b17e50e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/07be6299d89b24e59514b5d3fe13abed5b17e50e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ea2674c753b254e0eb414cac53817a400cced0a", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ea2674c753b254e0eb414cac53817a400cced0a", "html_url": "https://github.com/rust-lang/rust/commit/7ea2674c753b254e0eb414cac53817a400cced0a"}, {"sha": "4d65ef45491b62fbecdb9a24822c216aa96bb34e", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d65ef45491b62fbecdb9a24822c216aa96bb34e", "html_url": "https://github.com/rust-lang/rust/commit/4d65ef45491b62fbecdb9a24822c216aa96bb34e"}], "stats": {"total": 52, "additions": 32, "deletions": 20}, "files": [{"sha": "b6a3788dacc34332ca050b1190fa3718fe816451", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 27, "deletions": 17, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/07be6299d89b24e59514b5d3fe13abed5b17e50e/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07be6299d89b24e59514b5d3fe13abed5b17e50e/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=07be6299d89b24e59514b5d3fe13abed5b17e50e", "patch": "@@ -172,6 +172,11 @@ impl<'a> StringReader<'a> {\n         self.span_diagnostic.span_err(sp, m)\n     }\n \n+    /// Suggest some help with a given span.\n+    pub fn help_span(&self, sp: Span, m: &str) {\n+        self.span_diagnostic.span_help(sp, m)\n+    }\n+\n     /// Report a fatal error spanning [`from_pos`, `to_pos`).\n     fn fatal_span_(&self, from_pos: BytePos, to_pos: BytePos, m: &str) -> ! {\n         self.fatal_span(codemap::mk_sp(from_pos, to_pos), m)\n@@ -182,6 +187,11 @@ impl<'a> StringReader<'a> {\n         self.err_span(codemap::mk_sp(from_pos, to_pos), m)\n     }\n \n+    /// Suggest some help spanning [`from_pos`, `to_pos`).\n+    fn help_span_(&self, from_pos: BytePos, to_pos: BytePos, m: &str) {\n+        self.help_span(codemap::mk_sp(from_pos, to_pos), m)\n+    }\n+\n     /// Report a lexical error spanning [`from_pos`, `to_pos`), appending an\n     /// escaped character to the error message\n     fn fatal_span_char(&self, from_pos: BytePos, to_pos: BytePos, m: &str, c: char) -> ! {\n@@ -728,19 +738,24 @@ impl<'a> StringReader<'a> {\n                         return match e {\n                             'n' | 'r' | 't' | '\\\\' | '\\'' | '\"' | '0' => true,\n                             'x' => self.scan_byte_escape(delim, !ascii_only),\n-                            'u' if self.curr_is('{') => {\n-                                let valid = self.scan_unicode_escape(delim);\n-                                if valid && ascii_only {\n-                                    self.err_span_(\n-                                        escaped_pos,\n-                                        self.last_pos,\n+                            'u' => {\n+                                let valid = if self.curr_is('{') {\n+                                    self.scan_unicode_escape(delim) && !ascii_only\n+                                } else {\n+                                    self.err_span_(start, self.last_pos,\n+                                        \"incorrect unicode escape sequence\");\n+                                    self.help_span_(start, self.last_pos,\n+                                        \"format of unicode escape sequences is `\\\\u{\u2026}`\");\n+                                    false\n+                                };\n+                                if ascii_only {\n+                                    self.err_span_(start, self.last_pos,\n                                         \"unicode escape sequences cannot be used as a byte or in \\\n                                         a byte string\"\n                                     );\n-                                    false\n-                                } else {\n-                                   valid\n                                 }\n+                                valid\n+\n                             }\n                             '\\n' if delim == '\"' => {\n                                 self.consume_whitespace();\n@@ -757,16 +772,13 @@ impl<'a> StringReader<'a> {\n                                     if ascii_only { \"unknown byte escape\" }\n                                     else { \"unknown character escape\" },\n                                     c);\n-                                let sp = codemap::mk_sp(escaped_pos, last_pos);\n                                 if e == '\\r' {\n-                                    self.span_diagnostic.span_help(\n-                                        sp,\n+                                    self.help_span_(escaped_pos, last_pos,\n                                         \"this is an isolated carriage return; consider checking \\\n                                          your editor and version control settings\")\n                                 }\n                                 if (e == '{' || e == '}') && !ascii_only {\n-                                    self.span_diagnostic.span_help(\n-                                        sp,\n+                                    self.help_span_(escaped_pos, last_pos,\n                                         \"if used in a formatting string, \\\n                                         curly braces are escaped with `{{` and `}}`\")\n                                 }\n@@ -848,14 +860,12 @@ impl<'a> StringReader<'a> {\n             valid = false;\n         }\n \n-        self.bump(); // past the ending }\n-\n         if valid && (char::from_u32(accum_int).is_none() || count == 0) {\n             self.err_span_(start_bpos, self.last_pos, \"illegal unicode character escape\");\n             valid = false;\n         }\n \n-\n+        self.bump(); // past the ending }\n         valid\n     }\n "}, {"sha": "1790b9164b7efd0216e9f5644c000a6bbe6efbe0", "filename": "src/test/parse-fail/issue-23620-invalid-escapes.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/07be6299d89b24e59514b5d3fe13abed5b17e50e/src%2Ftest%2Fparse-fail%2Fissue-23620-invalid-escapes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07be6299d89b24e59514b5d3fe13abed5b17e50e/src%2Ftest%2Fparse-fail%2Fissue-23620-invalid-escapes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fissue-23620-invalid-escapes.rs?ref=07be6299d89b24e59514b5d3fe13abed5b17e50e", "patch": "@@ -16,7 +16,8 @@ fn main() {\n     //~^ ERROR unicode escape sequences cannot be used as a byte or in a byte string\n \n     let _ = b'\\u';\n-    //~^ ERROR unknown byte escape: u\n+    //~^ ERROR incorrect unicode escape sequence\n+    //~^^ ERROR unicode escape sequences cannot be used as a byte or in a byte string\n \n     let _ = b'\\x5';\n     //~^ ERROR numeric character escape is too short\n@@ -35,11 +36,12 @@ fn main() {\n     let _ = b\"\\u{a4a4} \\xf \\u\";\n     //~^ ERROR unicode escape sequences cannot be used as a byte or in a byte string\n     //~^^ ERROR illegal character in numeric character escape:\n-    //~^^^ ERROR unknown byte escape: u\n+    //~^^^ ERROR incorrect unicode escape sequence\n+    //~^^^^ ERROR unicode escape sequences cannot be used as a byte or in a byte string\n \n     let _ = \"\\u{ffffff} \\xf \\u\";\n     //~^ ERROR illegal unicode character escape\n     //~^^ ERROR illegal character in numeric character escape:\n     //~^^^ ERROR form of character escape may only be used with characters in the range [\\x00-\\x7f]\n-    //~^^^^ ERROR unknown character escape: u\n+    //~^^^^ ERROR incorrect unicode escape sequence\n }"}]}