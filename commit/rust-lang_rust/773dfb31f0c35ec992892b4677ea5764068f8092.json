{"sha": "773dfb31f0c35ec992892b4677ea5764068f8092", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3M2RmYjMxZjBjMzVlYzk5Mjg5MmI0Njc3ZWE1NzY0MDY4ZjgwOTI=", "commit": {"author": {"name": "Samrat Man Singh", "email": "samratmansingh@gmail.com", "date": "2020-08-08T09:12:50Z"}, "committer": {"name": "Samrat Man Singh", "email": "samratmansingh@gmail.com", "date": "2020-08-08T09:12:50Z"}, "message": "Bubble up error from FileDescriptor::as_file_handle\n\n...instead of handle_not_found", "tree": {"sha": "7e6d9d3b4bc95e4b0f70c3d1d3548ef645da83b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e6d9d3b4bc95e4b0f70c3d1d3548ef645da83b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/773dfb31f0c35ec992892b4677ea5764068f8092", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/773dfb31f0c35ec992892b4677ea5764068f8092", "html_url": "https://github.com/rust-lang/rust/commit/773dfb31f0c35ec992892b4677ea5764068f8092", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/773dfb31f0c35ec992892b4677ea5764068f8092/comments", "author": {"login": "samrat", "id": 480806, "node_id": "MDQ6VXNlcjQ4MDgwNg==", "avatar_url": "https://avatars.githubusercontent.com/u/480806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/samrat", "html_url": "https://github.com/samrat", "followers_url": "https://api.github.com/users/samrat/followers", "following_url": "https://api.github.com/users/samrat/following{/other_user}", "gists_url": "https://api.github.com/users/samrat/gists{/gist_id}", "starred_url": "https://api.github.com/users/samrat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/samrat/subscriptions", "organizations_url": "https://api.github.com/users/samrat/orgs", "repos_url": "https://api.github.com/users/samrat/repos", "events_url": "https://api.github.com/users/samrat/events{/privacy}", "received_events_url": "https://api.github.com/users/samrat/received_events", "type": "User", "site_admin": false}, "committer": {"login": "samrat", "id": 480806, "node_id": "MDQ6VXNlcjQ4MDgwNg==", "avatar_url": "https://avatars.githubusercontent.com/u/480806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/samrat", "html_url": "https://github.com/samrat", "followers_url": "https://api.github.com/users/samrat/followers", "following_url": "https://api.github.com/users/samrat/following{/other_user}", "gists_url": "https://api.github.com/users/samrat/gists{/gist_id}", "starred_url": "https://api.github.com/users/samrat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/samrat/subscriptions", "organizations_url": "https://api.github.com/users/samrat/orgs", "repos_url": "https://api.github.com/users/samrat/repos", "events_url": "https://api.github.com/users/samrat/events{/privacy}", "received_events_url": "https://api.github.com/users/samrat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf633d0e897c065381b7b7d14984830176caf8b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf633d0e897c065381b7b7d14984830176caf8b2", "html_url": "https://github.com/rust-lang/rust/commit/cf633d0e897c065381b7b7d14984830176caf8b2"}], "stats": {"total": 114, "additions": 47, "deletions": 67}, "files": [{"sha": "13c7827f8879460af472b462623c8a1e85b5d749", "filename": "src/shims/posix/fs.rs", "status": "modified", "additions": 47, "deletions": 67, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/773dfb31f0c35ec992892b4677ea5764068f8092/src%2Fshims%2Fposix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/773dfb31f0c35ec992892b4677ea5764068f8092/src%2Fshims%2Fposix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Ffs.rs?ref=773dfb31f0c35ec992892b4677ea5764068f8092", "patch": "@@ -484,9 +484,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             }\n             let fh = &mut this.machine.file_handler;\n             let (file_result, writable) = match fh.handles.get(&fd) {\n-                Some(file_descriptor) => match file_descriptor.as_file_handle() {\n-                    Ok(FileHandle { file, writable }) => (file.try_clone(), *writable),\n-                    Err(_) => return this.handle_not_found(),\n+                Some(file_descriptor) => {\n+                    let FileHandle { file, writable } = file_descriptor.as_file_handle()?;\n+                    (file.try_clone(), *writable)\n                 },\n                 None => return this.handle_not_found(),\n             };\n@@ -522,28 +522,24 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let fd = this.read_scalar(fd_op)?.to_i32()?;\n \n         if let Some(file_descriptor) = this.machine.file_handler.handles.remove(&fd) {\n-            match file_descriptor.as_file_handle() {\n-                Ok(FileHandle { file, writable }) => {\n-                    // We sync the file if it was opened in a mode different than read-only.\n-                    if *writable {\n-                        // `File::sync_all` does the checks that are done when closing a file. We do this to\n-                        // to handle possible errors correctly.\n-                        let result = this.try_unwrap_io_result(file.sync_all().map(|_| 0i32));\n-                        // Now we actually close the file.\n-                        drop(file);\n-                        // And return the result.\n-                        result\n-                    } else {\n-                        // We drop the file, this closes it but ignores any errors produced when closing\n-                        // it. This is done because `File::sync_all` cannot be done over files like\n-                        // `/dev/urandom` which are read-only. Check\n-                        // https://github.com/rust-lang/miri/issues/999#issuecomment-568920439 for a deeper\n-                        // discussion.\n-                        drop(file);\n-                        Ok(0)\n-                    }\n-                },\n-                Err(_) => this.handle_not_found()\n+            let FileHandle { file, writable } = file_descriptor.as_file_handle()?;\n+            // We sync the file if it was opened in a mode different than read-only.\n+            if *writable {\n+                // `File::sync_all` does the checks that are done when closing a file. We do this to\n+                // to handle possible errors correctly.\n+                let result = this.try_unwrap_io_result(file.sync_all().map(|_| 0i32));\n+                // Now we actually close the file.\n+                drop(file);\n+                // And return the result.\n+                result\n+            } else {\n+                // We drop the file, this closes it but ignores any errors produced when closing\n+                // it. This is done because `File::sync_all` cannot be done over files like\n+                // `/dev/urandom` which are read-only. Check\n+                // https://github.com/rust-lang/miri/issues/999#issuecomment-568920439 for a deeper\n+                // discussion.\n+                drop(file);\n+                Ok(0)\n             }\n         } else {\n             this.handle_not_found()\n@@ -1223,25 +1219,21 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let fd = this.read_scalar(fd_op)?.to_i32()?;\n         let length = this.read_scalar(length_op)?.to_i64()?;\n         if let Some(file_descriptor) = this.machine.file_handler.handles.get_mut(&fd) {\n-            match file_descriptor.as_file_handle() {\n-                Ok(FileHandle { file, writable }) => {\n-                    if *writable {\n-                        if let Ok(length) = length.try_into() {\n-                            let result = file.set_len(length);\n-                            this.try_unwrap_io_result(result.map(|_| 0i32))\n-                        } else {\n-                            let einval = this.eval_libc(\"EINVAL\")?;\n-                            this.set_last_error(einval)?;\n-                            Ok(-1)\n-                        }\n-                    } else {\n-                        // The file is not writable\n-                        let einval = this.eval_libc(\"EINVAL\")?;\n-                        this.set_last_error(einval)?;\n-                        Ok(-1)\n-                    }\n+            let FileHandle { file, writable } = file_descriptor.as_file_handle()?;\n+            if *writable {\n+                if let Ok(length) = length.try_into() {\n+                    let result = file.set_len(length);\n+                    this.try_unwrap_io_result(result.map(|_| 0i32))\n+                } else {\n+                    let einval = this.eval_libc(\"EINVAL\")?;\n+                    this.set_last_error(einval)?;\n+                    Ok(-1)\n                 }\n-                Err(_) => this.handle_not_found()\n+            } else {\n+                // The file is not writable\n+                let einval = this.eval_libc(\"EINVAL\")?;\n+                this.set_last_error(einval)?;\n+                Ok(-1)\n             }\n         } else {\n             this.handle_not_found()\n@@ -1260,13 +1252,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         let fd = this.read_scalar(fd_op)?.to_i32()?;\n         if let Some(file_descriptor) = this.machine.file_handler.handles.get(&fd) {\n-            match file_descriptor.as_file_handle() {\n-                Ok(FileHandle { file, writable }) => {\n-                    let io_result = maybe_sync_file(&file, *writable, File::sync_all);\n-                    this.try_unwrap_io_result(io_result)\n-                }\n-                Err(_) => this.handle_not_found()\n-            }\n+            let FileHandle { file, writable } = file_descriptor.as_file_handle()?;\n+            let io_result = maybe_sync_file(&file, *writable, File::sync_all);\n+            this.try_unwrap_io_result(io_result)\n         } else {\n             this.handle_not_found()\n         }\n@@ -1279,13 +1267,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         let fd = this.read_scalar(fd_op)?.to_i32()?;\n         if let Some(file_descriptor) = this.machine.file_handler.handles.get(&fd) {\n-            match file_descriptor.as_file_handle() {\n-                Ok(FileHandle { file, writable }) => {\n-                    let io_result = maybe_sync_file(&file, *writable, File::sync_data);\n-                    this.try_unwrap_io_result(io_result)\n-                }\n-                Err(_) => this.handle_not_found()\n-            }\n+            let FileHandle { file, writable } = file_descriptor.as_file_handle()?;\n+            let io_result = maybe_sync_file(&file, *writable, File::sync_data);\n+            this.try_unwrap_io_result(io_result)\n         } else {\n             this.handle_not_found()\n         }\n@@ -1322,13 +1306,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         }\n \n         if let Some(file_descriptor) = this.machine.file_handler.handles.get(&fd) {\n-            match file_descriptor.as_file_handle() {\n-                Ok(FileHandle { file, writable }) => {\n-                    let io_result = maybe_sync_file(&file, *writable, File::sync_data);\n-                    this.try_unwrap_io_result(io_result)\n-                },\n-                Err(_) => this.handle_not_found()\n-            }\n+            let FileHandle { file, writable } = file_descriptor.as_file_handle()?;\n+            let io_result = maybe_sync_file(&file, *writable, File::sync_data);\n+            this.try_unwrap_io_result(io_result)\n         } else {\n             this.handle_not_found()\n         }\n@@ -1378,9 +1358,9 @@ impl FileMetadata {\n     ) -> InterpResult<'tcx, Option<FileMetadata>> {\n         let option = ecx.machine.file_handler.handles.get(&fd);\n         let file = match option {\n-            Some(file_descriptor) => match file_descriptor.as_file_handle() {\n-                Ok(FileHandle { file, writable: _ }) => file,\n-                Err(_) => return ecx.handle_not_found().map(|_: i32| None),\n+            Some(file_descriptor) => {\n+                let FileHandle { file, writable: _ } = file_descriptor.as_file_handle()?;\n+                file\n             },\n             None => return ecx.handle_not_found().map(|_: i32| None),\n         };"}]}