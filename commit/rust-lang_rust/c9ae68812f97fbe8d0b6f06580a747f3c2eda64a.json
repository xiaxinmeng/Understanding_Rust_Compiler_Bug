{"sha": "c9ae68812f97fbe8d0b6f06580a747f3c2eda64a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5YWU2ODgxMmY5N2ZiZThkMGI2ZjA2NTgwYTc0N2YzYzJlZGE2NGE=", "commit": {"author": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2019-04-20T16:44:29Z"}, "committer": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2019-04-20T16:44:29Z"}, "message": "Deny rust_2018_idioms in libcore tests", "tree": {"sha": "74793245997e9c3160d814117b87ce9097f7bc86", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/74793245997e9c3160d814117b87ce9097f7bc86"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9ae68812f97fbe8d0b6f06580a747f3c2eda64a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJEBAABCgAuFiEEj4U0bmbiMSg/mWqvgqphyqETl+YFAly7TJEQHGRldkBwaGFu\nc2NoLm5ldAAKCRCCqmHKoROX5ueOD/sFNRLLA+b0ibQm0Vtfne8PQx2dcbZPmOAC\nFA5cxIy/gxjWkY2OhuTuFzP/hsSLGSZFgP8nRdOqBJewFjUXi0TLUbn02aun/4wO\nniVUZ+GMUi6uJqsKwvFa+EhTNSzbJJ82sww71PaIRTnxG00guZ+flpUJSgbcjPJy\n2LTVJwEvoHBqO41d4VaS+PLROl3hbDkuxmKW2KLFDyxBQ/RWTU5U30JjQqlj1SMG\na7Y6RykZ3hv+BI044FG0xFxEM7QZCfZdV2CLs9H8A9HfZ6B013mnLQEi7Fb78KCY\nBZJAoODMzvq364bFWb5mVVLR0F8le0nFku3BQXUqAy6G+WWb6Qv3loelzgTE60kr\nG9aVLOIO3gXwFwL6In2zfFe3m+5k+SeRHTz71LLtDpxYdjGeSYRQIj2hoQFB8rCV\nRigyXUrz5FoUSXQr2CJx/N+j5w2DRdTlQH23GfeTKU2mCDWrrYtHGlbLhao6JQMu\nXsX4fZoOM1rKJvzjcktLQS7PZlGxbj1KXQCb791bqRljywH6W1+Ji7TX1PcwKHK+\nYnfrAU6uAenm/sxjNCskPpvuXO2sOXS6RPB5Fa7J/TGVCzfblZyE/w8eUQwLj1C7\npSmCQK3psVNOTVrXrFn0RG8WIFuInxiZNSkR+USfo7aXoFm/7uyjngBFPtIPYSfN\nY0e9ehUF6w==\n=BYnW\n-----END PGP SIGNATURE-----", "payload": "tree 74793245997e9c3160d814117b87ce9097f7bc86\nparent 110a73d6c60eab76ce39426eb29cd1d016f6539c\nauthor Philipp Hansch <dev@phansch.net> 1555778669 +0200\ncommitter Philipp Hansch <dev@phansch.net> 1555778669 +0200\n\nDeny rust_2018_idioms in libcore tests\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9ae68812f97fbe8d0b6f06580a747f3c2eda64a", "html_url": "https://github.com/rust-lang/rust/commit/c9ae68812f97fbe8d0b6f06580a747f3c2eda64a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9ae68812f97fbe8d0b6f06580a747f3c2eda64a/comments", "author": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "110a73d6c60eab76ce39426eb29cd1d016f6539c", "url": "https://api.github.com/repos/rust-lang/rust/commits/110a73d6c60eab76ce39426eb29cd1d016f6539c", "html_url": "https://github.com/rust-lang/rust/commit/110a73d6c60eab76ce39426eb29cd1d016f6539c"}], "stats": {"total": 76, "additions": 38, "deletions": 38}, "files": [{"sha": "4dfd884d2377c12b646a2bee91c7a5fad11be43e", "filename": "src/libcore/tests/cell.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c9ae68812f97fbe8d0b6f06580a747f3c2eda64a/src%2Flibcore%2Ftests%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9ae68812f97fbe8d0b6f06580a747f3c2eda64a/src%2Flibcore%2Ftests%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fcell.rs?ref=c9ae68812f97fbe8d0b6f06580a747f3c2eda64a", "patch": "@@ -139,11 +139,11 @@ fn ref_clone_updates_flag() {\n fn ref_map_does_not_update_flag() {\n     let x = RefCell::new(Some(5));\n     {\n-        let b1: Ref<Option<u32>> = x.borrow();\n+        let b1: Ref<'_, Option<u32>> = x.borrow();\n         assert!(x.try_borrow().is_ok());\n         assert!(x.try_borrow_mut().is_err());\n         {\n-            let b2: Ref<u32> = Ref::map(b1, |o| o.as_ref().unwrap());\n+            let b2: Ref<'_, u32> = Ref::map(b1, |o| o.as_ref().unwrap());\n             assert_eq!(*b2, 5);\n             assert!(x.try_borrow().is_ok());\n             assert!(x.try_borrow_mut().is_err());\n@@ -217,26 +217,26 @@ fn ref_mut_map_split() {\n fn ref_map_accessor() {\n     struct X(RefCell<(u32, char)>);\n     impl X {\n-        fn accessor(&self) -> Ref<u32> {\n+        fn accessor(&self) -> Ref<'_, u32> {\n             Ref::map(self.0.borrow(), |tuple| &tuple.0)\n         }\n     }\n     let x = X(RefCell::new((7, 'z')));\n-    let d: Ref<u32> = x.accessor();\n+    let d: Ref<'_, u32> = x.accessor();\n     assert_eq!(*d, 7);\n }\n \n #[test]\n fn ref_mut_map_accessor() {\n     struct X(RefCell<(u32, char)>);\n     impl X {\n-        fn accessor(&self) -> RefMut<u32> {\n+        fn accessor(&self) -> RefMut<'_, u32> {\n             RefMut::map(self.0.borrow_mut(), |tuple| &mut tuple.0)\n         }\n     }\n     let x = X(RefCell::new((7, 'z')));\n     {\n-        let mut d: RefMut<u32> = x.accessor();\n+        let mut d: RefMut<'_ ,u32> = x.accessor();\n         assert_eq!(*d, 7);\n         *d += 1;\n     }\n@@ -333,16 +333,16 @@ fn refcell_unsized() {\n fn refcell_ref_coercion() {\n     let cell: RefCell<[i32; 3]> = RefCell::new([1, 2, 3]);\n     {\n-        let mut cellref: RefMut<[i32; 3]> = cell.borrow_mut();\n+        let mut cellref: RefMut<'_, [i32; 3]> = cell.borrow_mut();\n         cellref[0] = 4;\n-        let mut coerced: RefMut<[i32]> = cellref;\n+        let mut coerced: RefMut<'_, [i32]> = cellref;\n         coerced[2] = 5;\n     }\n     {\n         let comp: &mut [i32] = &mut [4, 2, 5];\n-        let cellref: Ref<[i32; 3]> = cell.borrow();\n+        let cellref: Ref<'_, [i32; 3]> = cell.borrow();\n         assert_eq!(&*cellref, comp);\n-        let coerced: Ref<[i32]> = cellref;\n+        let coerced: Ref<'_, [i32]> = cellref;\n         assert_eq!(&*coerced, comp);\n     }\n }"}, {"sha": "62fe09c5eb32cde9b7e2e93ee40aeee3e417b946", "filename": "src/libcore/tests/fmt/builders.rs", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/c9ae68812f97fbe8d0b6f06580a747f3c2eda64a/src%2Flibcore%2Ftests%2Ffmt%2Fbuilders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9ae68812f97fbe8d0b6f06580a747f3c2eda64a/src%2Flibcore%2Ftests%2Ffmt%2Fbuilders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Ffmt%2Fbuilders.rs?ref=c9ae68812f97fbe8d0b6f06580a747f3c2eda64a", "patch": "@@ -6,7 +6,7 @@ mod debug_struct {\n         struct Foo;\n \n         impl fmt::Debug for Foo {\n-            fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+            fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n                 fmt.debug_struct(\"Foo\").finish()\n             }\n         }\n@@ -20,7 +20,7 @@ mod debug_struct {\n         struct Foo;\n \n         impl fmt::Debug for Foo {\n-            fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+            fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n                 fmt.debug_struct(\"Foo\")\n                     .field(\"bar\", &true)\n                     .finish()\n@@ -40,7 +40,7 @@ mod debug_struct {\n         struct Foo;\n \n         impl fmt::Debug for Foo {\n-            fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+            fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n                 fmt.debug_struct(\"Foo\")\n                     .field(\"bar\", &true)\n                     .field(\"baz\", &format_args!(\"{}/{}\", 10, 20))\n@@ -62,7 +62,7 @@ mod debug_struct {\n         struct Foo;\n \n         impl fmt::Debug for Foo {\n-            fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+            fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n                 fmt.debug_struct(\"Foo\")\n                     .field(\"bar\", &true)\n                     .field(\"baz\", &format_args!(\"{}/{}\", 10, 20))\n@@ -73,7 +73,7 @@ mod debug_struct {\n         struct Bar;\n \n         impl fmt::Debug for Bar {\n-            fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+            fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n                 fmt.debug_struct(\"Bar\")\n                     .field(\"foo\", &Foo)\n                     .field(\"hello\", &\"world\")\n@@ -103,7 +103,7 @@ mod debug_tuple {\n         struct Foo;\n \n         impl fmt::Debug for Foo {\n-            fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+            fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n                 fmt.debug_tuple(\"Foo\").finish()\n             }\n         }\n@@ -117,7 +117,7 @@ mod debug_tuple {\n         struct Foo;\n \n         impl fmt::Debug for Foo {\n-            fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+            fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n                 fmt.debug_tuple(\"Foo\")\n                     .field(&true)\n                     .finish()\n@@ -137,7 +137,7 @@ mod debug_tuple {\n         struct Foo;\n \n         impl fmt::Debug for Foo {\n-            fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+            fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n                 fmt.debug_tuple(\"Foo\")\n                     .field(&true)\n                     .field(&format_args!(\"{}/{}\", 10, 20))\n@@ -159,7 +159,7 @@ mod debug_tuple {\n         struct Foo;\n \n         impl fmt::Debug for Foo {\n-            fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+            fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n                 fmt.debug_tuple(\"Foo\")\n                     .field(&true)\n                     .field(&format_args!(\"{}/{}\", 10, 20))\n@@ -170,7 +170,7 @@ mod debug_tuple {\n         struct Bar;\n \n         impl fmt::Debug for Bar {\n-            fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+            fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n                 fmt.debug_tuple(\"Bar\")\n                     .field(&Foo)\n                     .field(&\"world\")\n@@ -200,7 +200,7 @@ mod debug_map {\n         struct Foo;\n \n         impl fmt::Debug for Foo {\n-            fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+            fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n                 fmt.debug_map().finish()\n             }\n         }\n@@ -214,7 +214,7 @@ mod debug_map {\n         struct Foo;\n \n         impl fmt::Debug for Foo {\n-            fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+            fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n                 fmt.debug_map()\n                     .entry(&\"bar\", &true)\n                     .finish()\n@@ -234,7 +234,7 @@ mod debug_map {\n         struct Foo;\n \n         impl fmt::Debug for Foo {\n-            fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+            fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n                 fmt.debug_map()\n                     .entry(&\"bar\", &true)\n                     .entry(&10, &format_args!(\"{}/{}\", 10, 20))\n@@ -256,7 +256,7 @@ mod debug_map {\n         struct Foo;\n \n         impl fmt::Debug for Foo {\n-            fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+            fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n                 fmt.debug_map()\n                     .entry(&\"bar\", &true)\n                     .entry(&10, &format_args!(\"{}/{}\", 10, 20))\n@@ -267,7 +267,7 @@ mod debug_map {\n         struct Bar;\n \n         impl fmt::Debug for Bar {\n-            fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+            fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n                 fmt.debug_map()\n                     .entry(&\"foo\", &Foo)\n                     .entry(&Foo, &\"world\")\n@@ -301,7 +301,7 @@ mod debug_set {\n         struct Foo;\n \n         impl fmt::Debug for Foo {\n-            fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+            fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n                 fmt.debug_set().finish()\n             }\n         }\n@@ -315,7 +315,7 @@ mod debug_set {\n         struct Foo;\n \n         impl fmt::Debug for Foo {\n-            fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+            fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n                 fmt.debug_set()\n                     .entry(&true)\n                     .finish()\n@@ -335,7 +335,7 @@ mod debug_set {\n         struct Foo;\n \n         impl fmt::Debug for Foo {\n-            fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+            fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n                 fmt.debug_set()\n                     .entry(&true)\n                     .entry(&format_args!(\"{}/{}\", 10, 20))\n@@ -357,7 +357,7 @@ mod debug_set {\n         struct Foo;\n \n         impl fmt::Debug for Foo {\n-            fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+            fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n                 fmt.debug_set()\n                     .entry(&true)\n                     .entry(&format_args!(\"{}/{}\", 10, 20))\n@@ -368,7 +368,7 @@ mod debug_set {\n         struct Bar;\n \n         impl fmt::Debug for Bar {\n-            fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+            fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n                 fmt.debug_set()\n                     .entry(&Foo)\n                     .entry(&\"world\")\n@@ -398,7 +398,7 @@ mod debug_list {\n         struct Foo;\n \n         impl fmt::Debug for Foo {\n-            fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+            fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n                 fmt.debug_list().finish()\n             }\n         }\n@@ -412,7 +412,7 @@ mod debug_list {\n         struct Foo;\n \n         impl fmt::Debug for Foo {\n-            fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+            fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n                 fmt.debug_list()\n                     .entry(&true)\n                     .finish()\n@@ -432,7 +432,7 @@ mod debug_list {\n         struct Foo;\n \n         impl fmt::Debug for Foo {\n-            fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+            fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n                 fmt.debug_list()\n                     .entry(&true)\n                     .entry(&format_args!(\"{}/{}\", 10, 20))\n@@ -454,7 +454,7 @@ mod debug_list {\n         struct Foo;\n \n         impl fmt::Debug for Foo {\n-            fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+            fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n                 fmt.debug_list()\n                     .entry(&true)\n                     .entry(&format_args!(\"{}/{}\", 10, 20))\n@@ -465,7 +465,7 @@ mod debug_list {\n         struct Bar;\n \n         impl fmt::Debug for Bar {\n-            fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+            fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n                 fmt.debug_list()\n                     .entry(&Foo)\n                     .entry(&\"world\")"}, {"sha": "7dfb1adad9eede80a81eb92635b292327d4a4a56", "filename": "src/libcore/tests/iter.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c9ae68812f97fbe8d0b6f06580a747f3c2eda64a/src%2Flibcore%2Ftests%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9ae68812f97fbe8d0b6f06580a747f3c2eda64a/src%2Flibcore%2Ftests%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fiter.rs?ref=c9ae68812f97fbe8d0b6f06580a747f3c2eda64a", "patch": "@@ -567,12 +567,12 @@ fn test_iterator_peekable_fold() {\n /// This is an iterator that follows the Iterator contract,\n /// but it is not fused. After having returned None once, it will start\n /// producing elements if .next() is called again.\n-pub struct CycleIter<'a, T: 'a> {\n+pub struct CycleIter<'a, T> {\n     index: usize,\n     data: &'a [T],\n }\n \n-pub fn cycle<T>(data: &[T]) -> CycleIter<T> {\n+pub fn cycle<T>(data: &[T]) -> CycleIter<'_, T> {\n     CycleIter {\n         index: 0,\n         data,"}, {"sha": "2e4a8a15d208874d21cfc87d25a8fe328ea193d3", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9ae68812f97fbe8d0b6f06580a747f3c2eda64a/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9ae68812f97fbe8d0b6f06580a747f3c2eda64a/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=c9ae68812f97fbe8d0b6f06580a747f3c2eda64a", "patch": "@@ -32,8 +32,8 @@\n #![feature(slice_partition_dedup)]\n #![feature(copy_within)]\n #![feature(int_error_matching)]\n+#![deny(rust_2018_idioms)]\n \n-extern crate core;\n extern crate test;\n \n mod any;"}]}