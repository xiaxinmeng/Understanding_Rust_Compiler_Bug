{"sha": "a8d687499eda40f23d96d26c7ee63d28e82b0d06", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4ZDY4NzQ5OWVkYTQwZjIzZDk2ZDI2YzdlZTYzZDI4ZTgyYjBkMDY=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2018-10-22T13:22:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-10-22T13:22:31Z"}, "message": "Merge pull request #3114 from matthiaskrgr/typos\n\nfix a few typos found via codespell.", "tree": {"sha": "b57bb72c1fa54d881fe171f985fa795462c16eba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b57bb72c1fa54d881fe171f985fa795462c16eba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8d687499eda40f23d96d26c7ee63d28e82b0d06", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbzc8XCRBK7hj4Ov3rIwAAdHIIAGTHDu8rbexoBm5KhXjmLWoh\nfeCqMdvdyyASPD3E9AuNzPTBqSLiFaNBAXni6HVDU0HlJf0lti/gUlX0gUbImuBX\n5uHBPr81aINL3zLKUVfW7C0irhZpUjxMtGWCP4FDhtJ4upJhGNzhCEahI9INqwZR\nd8DJQze2XP+K4OkscmiJMVsVYd0PbSYVOKIq/5oZms8+eCZH/soen0H5b8Lva6oI\nFTbbKrI4f9iHnJivx6BYMWJ0eb/D1cResH7ggw4eIrGs1/49J/OCjP16ehnAzseq\np/ZoayYehc2ZzTpztyUbZOXeMiRioRsJGLsH4/Jl6mym8vBQ3HJ2at32Qc4qTeY=\n=OzKc\n-----END PGP SIGNATURE-----\n", "payload": "tree b57bb72c1fa54d881fe171f985fa795462c16eba\nparent 7d713a2827d073e0141731d3fea1b06a5fbb2d58\nparent b25f974c0d6277de3f8f8473533f3f263ec9fbb7\nauthor Seiichi Uchida <seuchida@gmail.com> 1540214551 +0900\ncommitter GitHub <noreply@github.com> 1540214551 +0900\n\nMerge pull request #3114 from matthiaskrgr/typos\n\nfix a few typos found via codespell."}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8d687499eda40f23d96d26c7ee63d28e82b0d06", "html_url": "https://github.com/rust-lang/rust/commit/a8d687499eda40f23d96d26c7ee63d28e82b0d06", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8d687499eda40f23d96d26c7ee63d28e82b0d06/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d713a2827d073e0141731d3fea1b06a5fbb2d58", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d713a2827d073e0141731d3fea1b06a5fbb2d58", "html_url": "https://github.com/rust-lang/rust/commit/7d713a2827d073e0141731d3fea1b06a5fbb2d58"}, {"sha": "b25f974c0d6277de3f8f8473533f3f263ec9fbb7", "url": "https://api.github.com/repos/rust-lang/rust/commits/b25f974c0d6277de3f8f8473533f3f263ec9fbb7", "html_url": "https://github.com/rust-lang/rust/commit/b25f974c0d6277de3f8f8473533f3f263ec9fbb7"}], "stats": {"total": 38, "additions": 19, "deletions": 19}, "files": [{"sha": "87b54af82994bbef4eb47acccf1b150f82161e1a", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8d687499eda40f23d96d26c7ee63d28e82b0d06/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/a8d687499eda40f23d96d26c7ee63d28e82b0d06/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=a8d687499eda40f23d96d26c7ee63d28e82b0d06", "patch": "@@ -97,7 +97,7 @@\n \n ### Changed\n \n-- Warn when unkown configuration option is used.\n+- Warn when unknown configuration option is used.\n \n ### Fixed\n "}, {"sha": "358c18e1b954d3ad8e803b83dfc378ad6438ab89", "filename": "src/comment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8d687499eda40f23d96d26c7ee63d28e82b0d06/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8d687499eda40f23d96d26c7ee63d28e82b0d06/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=a8d687499eda40f23d96d26c7ee63d28e82b0d06", "patch": "@@ -832,7 +832,7 @@ fn trim_custom_comment_prefix(s: &str) -> String {\n             let left_trimmed = line.trim_left();\n             if left_trimmed.starts_with(RUSTFMT_CUSTOM_COMMENT_PREFIX) {\n                 let orig = left_trimmed.trim_left_matches(RUSTFMT_CUSTOM_COMMENT_PREFIX);\n-                // due to comment wrapping, a line that was originaly behind `#` is split over\n+                // due to comment wrapping, a line that was originally behind `#` is split over\n                 // multiple lines, which needs then to be prefixed with a `#`\n                 if !orig.trim_left().starts_with(\"# \") {\n                     Cow::from(format!(\"# {}\", orig))"}, {"sha": "b7c1da3601723dcfe36d1f69c65ea8642f7a11a1", "filename": "src/config/config_type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8d687499eda40f23d96d26c7ee63d28e82b0d06/src%2Fconfig%2Fconfig_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8d687499eda40f23d96d26c7ee63d28e82b0d06/src%2Fconfig%2Fconfig_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Fconfig_type.rs?ref=a8d687499eda40f23d96d26c7ee63d28e82b0d06", "patch": "@@ -424,7 +424,7 @@ macro_rules! create_config {\n                 self.ignore.2.add_prefix(dir);\n             }\n \n-            /// Returns true if the config key was explicitely set and is the default value.\n+            /// Returns true if the config key was explicitly set and is the default value.\n             pub fn is_default(&self, key: &str) -> bool {\n                 $(\n                     if let stringify!($i) = key {"}, {"sha": "ee4cd866ac25d93e1dd3470fb3e48c60a3c2ed8e", "filename": "src/items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8d687499eda40f23d96d26c7ee63d28e82b0d06/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8d687499eda40f23d96d26c7ee63d28e82b0d06/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=a8d687499eda40f23d96d26c7ee63d28e82b0d06", "patch": "@@ -1592,7 +1592,7 @@ pub fn rewrite_struct_field(\n     for _ in 0..lhs_offset {\n         spacing.push(' ');\n     }\n-    // In this extreme case we will be missing a space betweeen an attribute and a field.\n+    // In this extreme case we will be missing a space between an attribute and a field.\n     if prefix.is_empty() && !attrs_str.is_empty() && attrs_extendable && spacing.is_empty() {\n         spacing.push(' ');\n     }"}, {"sha": "6f366f0b64ada1ebeac4ff7d30d8f5b198820d18", "filename": "src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a8d687499eda40f23d96d26c7ee63d28e82b0d06/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8d687499eda40f23d96d26c7ee63d28e82b0d06/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=a8d687499eda40f23d96d26c7ee63d28e82b0d06", "patch": "@@ -117,7 +117,7 @@ pub enum ErrorKind {\n     /// An io error during reading or writing.\n     #[fail(display = \"io error: {}\", _0)]\n     IoError(io::Error),\n-    /// Parse error occured when parsing the Input.\n+    /// Parse error occurred when parsing the input.\n     #[fail(display = \"parse error\")]\n     ParseError,\n     /// The user mandated a version and the current version of Rustfmt does not\n@@ -407,7 +407,7 @@ fn format_code_block(code_snippet: &str, config: &Config) -> Option<String> {\n     // While formatting the code, ignore the config's newline style setting and always use \"\\n\"\n     // instead of \"\\r\\n\" for the newline characters. This is okay because the output here is\n     // not directly outputted by rustfmt command, but used by the comment formatter's input.\n-    // We have output-file-wide \"\\n\" ==> \"\\r\\n\" conversion proccess after here if it's necessary.\n+    // We have output-file-wide \"\\n\" ==> \"\\r\\n\" conversion process after here if it's necessary.\n     let mut config_with_unix_newline = config.clone();\n     config_with_unix_newline\n         .set()"}, {"sha": "2b48673dcd4f91d7b722c5a405610637178bfcc0", "filename": "src/missed_spans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8d687499eda40f23d96d26c7ee63d28e82b0d06/src%2Fmissed_spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8d687499eda40f23d96d26c7ee63d28e82b0d06/src%2Fmissed_spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmissed_spans.rs?ref=a8d687499eda40f23d96d26c7ee63d28e82b0d06", "patch": "@@ -20,7 +20,7 @@ use utils::{count_newlines, last_line_width, mk_sp};\n use visitor::FmtVisitor;\n \n struct SnippetStatus {\n-    /// An offset to the current line from the beginnig of the original snippet.\n+    /// An offset to the current line from the beginning of the original snippet.\n     line_start: usize,\n     /// A length of trailing whitespaces on the current line.\n     last_wspace: Option<usize>,"}, {"sha": "675572f4908424de48ed91460d3e9c4c282660bf", "filename": "src/patterns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8d687499eda40f23d96d26c7ee63d28e82b0d06/src%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8d687499eda40f23d96d26c7ee63d28e82b0d06/src%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpatterns.rs?ref=a8d687499eda40f23d96d26c7ee63d28e82b0d06", "patch": "@@ -29,7 +29,7 @@ use spanned::Spanned;\n use types::{rewrite_path, PathContext};\n use utils::{format_mutability, mk_sp, rewrite_ident};\n \n-/// Returns true if the given pattern is short. A short pattern is defined by the following grammer:\n+/// Returns true if the given pattern is short. A short pattern is defined by the following grammar:\n ///\n /// [small, ntp]:\n ///     - single token"}, {"sha": "561d96813b0d153d14f3a8ffd1b5ad5321c89021", "filename": "src/string.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a8d687499eda40f23d96d26c7ee63d28e82b0d06/src%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8d687499eda40f23d96d26c7ee63d28e82b0d06/src%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstring.rs?ref=a8d687499eda40f23d96d26c7ee63d28e82b0d06", "patch": "@@ -62,7 +62,7 @@ impl<'a> StringFormat<'a> {\n         )\n     }\n \n-    /// Like max_chars_with_indent but the indentation is not substracted.\n+    /// Like max_chars_with_indent but the indentation is not subtracted.\n     /// This allows to fit more graphemes from the string on a line when\n     /// SnippetState::EndWithLineFeed.\n     fn max_chars_without_indent(&self) -> Option<usize> {\n@@ -236,7 +236,7 @@ fn break_string(max_chars: usize, trim_end: bool, line_end: &str, input: &[&str]\n             .iter()\n             .rposition(|grapheme| not_whitespace_except_line_feed(grapheme))\n             .unwrap_or(index);\n-        // Take into account newlines occuring in input[0..=index], i.e., the possible next new\n+        // Take into account newlines occurring in input[0..=index], i.e., the possible next new\n         // line. If there is one, then text after it could be rewritten in a way that the available\n         // space is fully used.\n         for (i, grapheme) in input[0..=index].iter().enumerate() {"}, {"sha": "116f5f718b9c48d4e01ea0210667fe82861da23d", "filename": "tests/source/match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8d687499eda40f23d96d26c7ee63d28e82b0d06/tests%2Fsource%2Fmatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8d687499eda40f23d96d26c7ee63d28e82b0d06/tests%2Fsource%2Fmatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fmatch.rs?ref=a8d687499eda40f23d96d26c7ee63d28e82b0d06", "patch": "@@ -150,7 +150,7 @@ fn issue339() {\n         {\n \n         }\n-        p => { // Dont collapse me\n+        p => { // Don't collapse me\n         } q => { } r =>\n         {\n "}, {"sha": "69c3fa3cbad8dd022f44246cb529775e453b44b6", "filename": "tests/source/pattern-condense-wildcards.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8d687499eda40f23d96d26c7ee63d28e82b0d06/tests%2Fsource%2Fpattern-condense-wildcards.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8d687499eda40f23d96d26c7ee63d28e82b0d06/tests%2Fsource%2Fpattern-condense-wildcards.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fpattern-condense-wildcards.rs?ref=a8d687499eda40f23d96d26c7ee63d28e82b0d06", "patch": "@@ -7,6 +7,6 @@ fn main() {\n         Tup (_) =>  \"nah\",\n         Quad (_,_, x,_) =>   \" also no rewrite\",\n         Quad (x, _, _, _) => \"condense me pls\",\n-        Weird (x, _, _, /* dont condense before */ _, _, _) => \"pls work\",\n+        Weird (x, _, _, /* don't condense before */ _, _, _) => \"pls work\",\n     }\n }"}, {"sha": "43733ce7636f3528648b974743ced8fb5838d8bd", "filename": "tests/source/remove_blank_lines.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8d687499eda40f23d96d26c7ee63d28e82b0d06/tests%2Fsource%2Fremove_blank_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8d687499eda40f23d96d26c7ee63d28e82b0d06/tests%2Fsource%2Fremove_blank_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fremove_blank_lines.rs?ref=a8d687499eda40f23d96d26c7ee63d28e82b0d06", "patch": "@@ -35,7 +35,7 @@ fn bar() {\n     // comment after statement\n \n \n-    // comment before statment\n+    // comment before statement\n     let y = 2;\n     let z = 3;\n "}, {"sha": "16efff55b06608e168264f1466b3a2d3acf69da5", "filename": "tests/source/reorder-impl-items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8d687499eda40f23d96d26c7ee63d28e82b0d06/tests%2Fsource%2Freorder-impl-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8d687499eda40f23d96d26c7ee63d28e82b0d06/tests%2Fsource%2Freorder-impl-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Freorder-impl-items.rs?ref=a8d687499eda40f23d96d26c7ee63d28e82b0d06", "patch": "@@ -1,6 +1,6 @@\n // rustfmt-reorder_impl_items: true\n \n-// The ordering of the folllowing impl items should be idempotent.\n+// The ordering of the following impl items should be idempotent.\n impl<'a> Command<'a> {\n     pub fn send_to(&self, w: &mut io::Write) -> io::Result<()> {\n         match self {"}, {"sha": "f37fbcf1fcbcc607d3bd6890f90d3c3168b87390", "filename": "tests/target/impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8d687499eda40f23d96d26c7ee63d28e82b0d06/tests%2Ftarget%2Fimpl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8d687499eda40f23d96d26c7ee63d28e82b0d06/tests%2Ftarget%2Fimpl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fimpl.rs?ref=a8d687499eda40f23d96d26c7ee63d28e82b0d06", "patch": "@@ -8,7 +8,7 @@ impl<K, V, NodeRef: Deref<Target = Node<K, V>>> Handle<NodeRef, handle::Edge, ha\n \n impl<V> Test<V>\n where\n-    V: Clone, // This comment is NOT removed by formating!\n+    V: Clone, // This comment is NOT removed by formatting!\n {\n     pub fn new(value: V) -> Self {\n         Test {"}, {"sha": "b5352336b1edf1dc35a32a1badb570b7a5c277bd", "filename": "tests/target/match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8d687499eda40f23d96d26c7ee63d28e82b0d06/tests%2Ftarget%2Fmatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8d687499eda40f23d96d26c7ee63d28e82b0d06/tests%2Ftarget%2Fmatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmatch.rs?ref=a8d687499eda40f23d96d26c7ee63d28e82b0d06", "patch": "@@ -149,7 +149,7 @@ fn issue339() {\n         n => {}\n         o => {}\n         p => {\n-            // Dont collapse me\n+            // Don't collapse me\n         }\n         q => {}\n         r => {}"}, {"sha": "a85a16004ad236782accb22b1f92ee2e6db4a787", "filename": "tests/target/pattern-condense-wildcards.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8d687499eda40f23d96d26c7ee63d28e82b0d06/tests%2Ftarget%2Fpattern-condense-wildcards.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8d687499eda40f23d96d26c7ee63d28e82b0d06/tests%2Ftarget%2Fpattern-condense-wildcards.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fpattern-condense-wildcards.rs?ref=a8d687499eda40f23d96d26c7ee63d28e82b0d06", "patch": "@@ -7,6 +7,6 @@ fn main() {\n         Tup(_) => \"nah\",\n         Quad(_, _, x, _) => \" also no rewrite\",\n         Quad(x, ..) => \"condense me pls\",\n-        Weird(x, _, _, /* dont condense before */ ..) => \"pls work\",\n+        Weird(x, _, _, /* don't condense before */ ..) => \"pls work\",\n     }\n }"}, {"sha": "de74c81ef57f3141d1aef2437b0de6275ac0bf76", "filename": "tests/target/remove_blank_lines.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8d687499eda40f23d96d26c7ee63d28e82b0d06/tests%2Ftarget%2Fremove_blank_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8d687499eda40f23d96d26c7ee63d28e82b0d06/tests%2Ftarget%2Fremove_blank_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fremove_blank_lines.rs?ref=a8d687499eda40f23d96d26c7ee63d28e82b0d06", "patch": "@@ -20,7 +20,7 @@ fn bar() {\n     let x = 1;\n     // comment after statement\n \n-    // comment before statment\n+    // comment before statement\n     let y = 2;\n     let z = 3;\n "}, {"sha": "16efff55b06608e168264f1466b3a2d3acf69da5", "filename": "tests/target/reorder-impl-items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8d687499eda40f23d96d26c7ee63d28e82b0d06/tests%2Ftarget%2Freorder-impl-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8d687499eda40f23d96d26c7ee63d28e82b0d06/tests%2Ftarget%2Freorder-impl-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Freorder-impl-items.rs?ref=a8d687499eda40f23d96d26c7ee63d28e82b0d06", "patch": "@@ -1,6 +1,6 @@\n // rustfmt-reorder_impl_items: true\n \n-// The ordering of the folllowing impl items should be idempotent.\n+// The ordering of the following impl items should be idempotent.\n impl<'a> Command<'a> {\n     pub fn send_to(&self, w: &mut io::Write) -> io::Result<()> {\n         match self {"}]}