{"sha": "b27ba527c5cee06f43967daf3a0dd01a2258a0fa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyN2JhNTI3YzVjZWUwNmY0Mzk2N2RhZjNhMGRkMDFhMjI1OGEwZmE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-03-29T14:02:28Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-03-29T14:02:28Z"}, "message": "Auto merge of #23831 - Manishearth:rollup, r=Manishearth\n\n- Successful merges: #23811, #23814, #23817, #23821, #23829\n- Failed merges:", "tree": {"sha": "2d31bf590f7da7173d7ffce609c6aa2a22eb97f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d31bf590f7da7173d7ffce609c6aa2a22eb97f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b27ba527c5cee06f43967daf3a0dd01a2258a0fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b27ba527c5cee06f43967daf3a0dd01a2258a0fa", "html_url": "https://github.com/rust-lang/rust/commit/b27ba527c5cee06f43967daf3a0dd01a2258a0fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b27ba527c5cee06f43967daf3a0dd01a2258a0fa/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea03ad961669e69d57cb0ae1a48b53b4b49a8342", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea03ad961669e69d57cb0ae1a48b53b4b49a8342", "html_url": "https://github.com/rust-lang/rust/commit/ea03ad961669e69d57cb0ae1a48b53b4b49a8342"}, {"sha": "9147463678341db09c36d1a24a643b8ba4e3be73", "url": "https://api.github.com/repos/rust-lang/rust/commits/9147463678341db09c36d1a24a643b8ba4e3be73", "html_url": "https://github.com/rust-lang/rust/commit/9147463678341db09c36d1a24a643b8ba4e3be73"}], "stats": {"total": 43, "additions": 36, "deletions": 7}, "files": [{"sha": "4109797a55ee707811bd3073b1c33bd484682e1e", "filename": "AUTHORS.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b27ba527c5cee06f43967daf3a0dd01a2258a0fa/AUTHORS.txt", "raw_url": "https://github.com/rust-lang/rust/raw/b27ba527c5cee06f43967daf3a0dd01a2258a0fa/AUTHORS.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/AUTHORS.txt?ref=b27ba527c5cee06f43967daf3a0dd01a2258a0fa", "patch": "@@ -606,7 +606,7 @@ Peter Schuller <peter.schuller@infidyne.com>\n Peter Williams <peter@newton.cx>\n Peter Zotov <whitequark@whitequark.org>\n Petter Remen <petter.remen@gmail.com>\n-Phil Dawes <pdawes@drw.com>\n+Phil Dawes <phil@phildawes.net>\n Phil Ruffwind <rf@rufflewind.com>\n Philip Munksgaard <pmunksgaard@gmail.com>\n Philipp Br\u00fcschweiler <blei42@gmail.com>"}, {"sha": "a71d9d8019ce0e0ddd5dfb05ddbc8077972aab6c", "filename": "src/doc/trpl/documentation.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b27ba527c5cee06f43967daf3a0dd01a2258a0fa/src%2Fdoc%2Ftrpl%2Fdocumentation.md", "raw_url": "https://github.com/rust-lang/rust/raw/b27ba527c5cee06f43967daf3a0dd01a2258a0fa/src%2Fdoc%2Ftrpl%2Fdocumentation.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fdocumentation.md?ref=b27ba527c5cee06f43967daf3a0dd01a2258a0fa", "patch": "@@ -517,7 +517,7 @@ can be useful when changing some options, or when writing a macro.\n \n ### Re-exports\n \n-`rustdoc` will show the documentation for a publc re-export in both places:\n+`rustdoc` will show the documentation for a public re-export in both places:\n \n ```ignore\n extern crate foo;"}, {"sha": "14dcd52fe80812130baa8c22b1afe1db5e5db69a", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b27ba527c5cee06f43967daf3a0dd01a2258a0fa/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b27ba527c5cee06f43967daf3a0dd01a2258a0fa/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=b27ba527c5cee06f43967daf3a0dd01a2258a0fa", "patch": "@@ -50,8 +50,8 @@\n //!\n //! ## Iteration\n //!\n-//! The slices implement `IntoIterator`. The iterators of yield references\n-//! to the slice elements.\n+//! The slices implement `IntoIterator`. The iterator yields references to the\n+//! slice elements.\n //!\n //! ```\n //! let numbers = &[0, 1, 2];"}, {"sha": "2375ae896500586799867ef4cd6ab5d23d76380a", "filename": "src/libcore/hash/mod.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b27ba527c5cee06f43967daf3a0dd01a2258a0fa/src%2Flibcore%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b27ba527c5cee06f43967daf3a0dd01a2258a0fa/src%2Flibcore%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash%2Fmod.rs?ref=b27ba527c5cee06f43967daf3a0dd01a2258a0fa", "patch": "@@ -73,6 +73,16 @@ mod sip;\n ///\n /// The `H` type parameter is an abstract hash state that is used by the `Hash`\n /// to compute the hash.\n+///\n+/// If you are also implementing `Eq`, there is an additional property that\n+/// is important:\n+///\n+/// ```text\n+/// k1 == k2 -> hash(k1) == hash(k2)\n+/// ```\n+///\n+/// In other words, if two keys are equal, their hashes should also be equal.\n+/// `HashMap` and `HashSet` both rely on this behavior.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Hash {\n     /// Feeds this value into the state given, updating the hasher as necessary."}, {"sha": "b7162c4a177d6f0457bb30a40f729d19da2f7f38", "filename": "src/liblibc/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b27ba527c5cee06f43967daf3a0dd01a2258a0fa/src%2Fliblibc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b27ba527c5cee06f43967daf3a0dd01a2258a0fa/src%2Fliblibc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc%2Flib.rs?ref=b27ba527c5cee06f43967daf3a0dd01a2258a0fa", "patch": "@@ -307,7 +307,10 @@ pub mod types {\n                 #[derive(Copy)] pub struct sockaddr_storage {\n                     pub ss_family: sa_family_t,\n                     pub __ss_align: isize,\n-                    pub __ss_pad2: [u8; 128 - 2 * (::core::isize::BYTES as usize)],\n+                    #[cfg(target_pointer_width = \"32\")]\n+                    pub __ss_pad2: [u8; 128 - 2 * 4],\n+                    #[cfg(target_pointer_width = \"64\")]\n+                    pub __ss_pad2: [u8; 128 - 2 * 8],\n                 }\n                 #[repr(C)]\n                 #[derive(Copy)] pub struct sockaddr_in {"}, {"sha": "bc0f109de15b649ee94a34bd3989d7931c5f4ef2", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b27ba527c5cee06f43967daf3a0dd01a2258a0fa/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b27ba527c5cee06f43967daf3a0dd01a2258a0fa/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=b27ba527c5cee06f43967daf3a0dd01a2258a0fa", "patch": "@@ -214,7 +214,14 @@ fn test_resize_policy() {\n /// overridden with one of the constructors.\n ///\n /// It is required that the keys implement the `Eq` and `Hash` traits, although\n-/// this can frequently be achieved by using `#[derive(Eq, Hash)]`.\n+/// this can frequently be achieved by using `#[derive(Eq, Hash)]`. If you\n+/// implement these yourself, it is important that the following property holds:\n+///\n+/// ```text\n+/// k1 == k2 -> hash(k1) == hash(k2)\n+/// ```\n+///\n+/// In other words, if two keys are equal, their hashes must be equal.\n ///\n /// It is a logic error for a key to be modified in such a way that the key's\n /// hash, as determined by the `Hash` trait, or its equality, as determined by"}, {"sha": "87380471c8001e88e5fa65e2fe1fe746dc82cf8f", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b27ba527c5cee06f43967daf3a0dd01a2258a0fa/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b27ba527c5cee06f43967daf3a0dd01a2258a0fa/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=b27ba527c5cee06f43967daf3a0dd01a2258a0fa", "patch": "@@ -34,7 +34,16 @@ use super::state::HashState;\n \n /// An implementation of a hash set using the underlying representation of a\n /// HashMap where the value is (). As with the `HashMap` type, a `HashSet`\n-/// requires that the elements implement the `Eq` and `Hash` traits.\n+/// requires that the elements implement the `Eq` and `Hash` traits. This can\n+/// frequently be achieved by using `#[derive(Eq, Hash)]`. If you implement\n+/// these yourself, it is important that the following property holds:\n+///\n+/// ```text\n+/// k1 == k2 -> hash(k1) == hash(k2)\n+/// ```\n+///\n+/// In other words, if two keys are equal, their hashes must be equal.\n+///\n ///\n /// It is a logic error for an item to be modified in such a way that the\n /// item's hash, as determined by the `Hash` trait, or its equality, as"}]}