{"sha": "c0447b489ba890c740c1e5c41f3eacca148734a9", "node_id": "C_kwDOAAsO6NoAKGMwNDQ3YjQ4OWJhODkwYzc0MGMxZTVjNDFmM2VhY2NhMTQ4NzM0YTk", "commit": {"author": {"name": "yukang", "email": "moorekang@gmail.com", "date": "2022-10-24T08:48:28Z"}, "committer": {"name": "yukang", "email": "moorekang@gmail.com", "date": "2022-10-24T08:51:31Z"}, "message": "fix #103435, unused lint won't produce invalid code", "tree": {"sha": "673f01b9f7b8a669ee53ab38fb0106b3b2d04184", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/673f01b9f7b8a669ee53ab38fb0106b3b2d04184"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c0447b489ba890c740c1e5c41f3eacca148734a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c0447b489ba890c740c1e5c41f3eacca148734a9", "html_url": "https://github.com/rust-lang/rust/commit/c0447b489ba890c740c1e5c41f3eacca148734a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c0447b489ba890c740c1e5c41f3eacca148734a9/comments", "author": {"login": "chenyukang", "id": 230646, "node_id": "MDQ6VXNlcjIzMDY0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/230646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenyukang", "html_url": "https://github.com/chenyukang", "followers_url": "https://api.github.com/users/chenyukang/followers", "following_url": "https://api.github.com/users/chenyukang/following{/other_user}", "gists_url": "https://api.github.com/users/chenyukang/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenyukang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenyukang/subscriptions", "organizations_url": "https://api.github.com/users/chenyukang/orgs", "repos_url": "https://api.github.com/users/chenyukang/repos", "events_url": "https://api.github.com/users/chenyukang/events{/privacy}", "received_events_url": "https://api.github.com/users/chenyukang/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chenyukang", "id": 230646, "node_id": "MDQ6VXNlcjIzMDY0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/230646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenyukang", "html_url": "https://github.com/chenyukang", "followers_url": "https://api.github.com/users/chenyukang/followers", "following_url": "https://api.github.com/users/chenyukang/following{/other_user}", "gists_url": "https://api.github.com/users/chenyukang/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenyukang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenyukang/subscriptions", "organizations_url": "https://api.github.com/users/chenyukang/orgs", "repos_url": "https://api.github.com/users/chenyukang/repos", "events_url": "https://api.github.com/users/chenyukang/events{/privacy}", "received_events_url": "https://api.github.com/users/chenyukang/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9be2f35a4c1ed1b04aa4a6945b64763f599259ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/9be2f35a4c1ed1b04aa4a6945b64763f599259ff", "html_url": "https://github.com/rust-lang/rust/commit/9be2f35a4c1ed1b04aa4a6945b64763f599259ff"}], "stats": {"total": 119, "additions": 106, "deletions": 13}, "files": [{"sha": "1299444cd77383e37b5f30d7da788a9db2879807", "filename": "compiler/rustc_lint/src/unused.rs", "status": "modified", "additions": 31, "deletions": 13, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/c0447b489ba890c740c1e5c41f3eacca148734a9/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0447b489ba890c740c1e5c41f3eacca148734a9/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Funused.rs?ref=c0447b489ba890c740c1e5c41f3eacca148734a9", "patch": "@@ -565,10 +565,26 @@ trait UnusedDelimLint {\n             lint.set_arg(\"delim\", Self::DELIM_STR);\n             lint.set_arg(\"item\", msg);\n             if let Some((lo, hi)) = spans {\n-                let replacement = vec![\n-                    (lo, if keep_space.0 { \" \".into() } else { \"\".into() }),\n-                    (hi, if keep_space.1 { \" \".into() } else { \"\".into() }),\n-                ];\n+                let sm = cx.sess().source_map();\n+                let lo_replace =\n+                    if keep_space.0 &&\n+                        let Ok(snip) = sm.span_to_snippet(lo.with_lo(lo.lo() - BytePos(1))) &&\n+                        !snip.starts_with(\" \") {\n+                        \" \".to_string()\n+                        } else {\n+                            \"\".to_string()\n+                        };\n+\n+                let hi_replace =\n+                    if keep_space.1 &&\n+                        let Ok(snip) = sm.span_to_snippet(sm.next_point(hi)) &&\n+                        !snip.starts_with(\" \") {\n+                        \" \".to_string()\n+                        } else {\n+                            \"\".to_string()\n+                        };\n+\n+                let replacement = vec![(lo, lo_replace), (hi, hi_replace)];\n                 lint.multipart_suggestion(\n                     fluent::suggestion,\n                     replacement,\n@@ -765,6 +781,7 @@ impl UnusedParens {\n         value: &ast::Pat,\n         avoid_or: bool,\n         avoid_mut: bool,\n+        keep_space: (bool, bool),\n     ) {\n         use ast::{BindingAnnotation, PatKind};\n \n@@ -789,7 +806,7 @@ impl UnusedParens {\n             } else {\n                 None\n             };\n-            self.emit_unused_delims(cx, value.span, spans, \"pattern\", (false, false));\n+            self.emit_unused_delims(cx, value.span, spans, \"pattern\", keep_space);\n         }\n     }\n }\n@@ -798,7 +815,7 @@ impl EarlyLintPass for UnusedParens {\n     fn check_expr(&mut self, cx: &EarlyContext<'_>, e: &ast::Expr) {\n         match e.kind {\n             ExprKind::Let(ref pat, _, _) | ExprKind::ForLoop(ref pat, ..) => {\n-                self.check_unused_parens_pat(cx, pat, false, false);\n+                self.check_unused_parens_pat(cx, pat, false, false, (true, true));\n             }\n             // We ignore parens in cases like `if (((let Some(0) = Some(1))))` because we already\n             // handle a hard error for them during AST lowering in `lower_expr_mut`, but we still\n@@ -842,40 +859,41 @@ impl EarlyLintPass for UnusedParens {\n \n     fn check_pat(&mut self, cx: &EarlyContext<'_>, p: &ast::Pat) {\n         use ast::{Mutability, PatKind::*};\n+        let keep_space = (false, false);\n         match &p.kind {\n             // Do not lint on `(..)` as that will result in the other arms being useless.\n             Paren(_)\n             // The other cases do not contain sub-patterns.\n             | Wild | Rest | Lit(..) | MacCall(..) | Range(..) | Ident(.., None) | Path(..) => {},\n             // These are list-like patterns; parens can always be removed.\n             TupleStruct(_, _, ps) | Tuple(ps) | Slice(ps) | Or(ps) => for p in ps {\n-                self.check_unused_parens_pat(cx, p, false, false);\n+                self.check_unused_parens_pat(cx, p, false, false, keep_space);\n             },\n             Struct(_, _, fps, _) => for f in fps {\n-                self.check_unused_parens_pat(cx, &f.pat, false, false);\n+                self.check_unused_parens_pat(cx, &f.pat, false, false, keep_space);\n             },\n             // Avoid linting on `i @ (p0 | .. | pn)` and `box (p0 | .. | pn)`, #64106.\n-            Ident(.., Some(p)) | Box(p) => self.check_unused_parens_pat(cx, p, true, false),\n+            Ident(.., Some(p)) | Box(p) => self.check_unused_parens_pat(cx, p, true, false, keep_space),\n             // Avoid linting on `&(mut x)` as `&mut x` has a different meaning, #55342.\n             // Also avoid linting on `& mut? (p0 | .. | pn)`, #64106.\n-            Ref(p, m) => self.check_unused_parens_pat(cx, p, true, *m == Mutability::Not),\n+            Ref(p, m) => self.check_unused_parens_pat(cx, p, true, *m == Mutability::Not, keep_space),\n         }\n     }\n \n     fn check_stmt(&mut self, cx: &EarlyContext<'_>, s: &ast::Stmt) {\n         if let StmtKind::Local(ref local) = s.kind {\n-            self.check_unused_parens_pat(cx, &local.pat, true, false);\n+            self.check_unused_parens_pat(cx, &local.pat, true, false, (false, false));\n         }\n \n         <Self as UnusedDelimLint>::check_stmt(self, cx, s)\n     }\n \n     fn check_param(&mut self, cx: &EarlyContext<'_>, param: &ast::Param) {\n-        self.check_unused_parens_pat(cx, &param.pat, true, false);\n+        self.check_unused_parens_pat(cx, &param.pat, true, false, (false, false));\n     }\n \n     fn check_arm(&mut self, cx: &EarlyContext<'_>, arm: &ast::Arm) {\n-        self.check_unused_parens_pat(cx, &arm.pat, false, false);\n+        self.check_unused_parens_pat(cx, &arm.pat, false, false, (false, false));\n     }\n \n     fn check_ty(&mut self, cx: &EarlyContext<'_>, ty: &ast::Ty) {"}, {"sha": "dbbcaa441ddd6cf8e2f81c7456dba55c25420b78", "filename": "src/test/ui/lint/issue-103435-extra-parentheses.fixed", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c0447b489ba890c740c1e5c41f3eacca148734a9/src%2Ftest%2Fui%2Flint%2Fissue-103435-extra-parentheses.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/c0447b489ba890c740c1e5c41f3eacca148734a9/src%2Ftest%2Fui%2Flint%2Fissue-103435-extra-parentheses.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-103435-extra-parentheses.fixed?ref=c0447b489ba890c740c1e5c41f3eacca148734a9", "patch": "@@ -0,0 +1,16 @@\n+// run-rustfix\n+#![deny(unused_parens)]\n+\n+fn main() {\n+    if let Some(_) = Some(1) {}\n+    //~^ ERROR unnecessary parentheses around pattern\n+\n+    for _x in 1..10 {}\n+    //~^ ERROR unnecessary parentheses around pattern\n+\n+    if 2 == 1 {}\n+    //~^ ERROR unnecessary parentheses around `if` condition\n+\n+    // FIXME, auto recover from this one?\n+    // for(_x in 1..10) {}\n+}"}, {"sha": "f5c2a6664ede46f4100612ec527e23775248213d", "filename": "src/test/ui/lint/issue-103435-extra-parentheses.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c0447b489ba890c740c1e5c41f3eacca148734a9/src%2Ftest%2Fui%2Flint%2Fissue-103435-extra-parentheses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0447b489ba890c740c1e5c41f3eacca148734a9/src%2Ftest%2Fui%2Flint%2Fissue-103435-extra-parentheses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-103435-extra-parentheses.rs?ref=c0447b489ba890c740c1e5c41f3eacca148734a9", "patch": "@@ -0,0 +1,16 @@\n+// run-rustfix\n+#![deny(unused_parens)]\n+\n+fn main() {\n+    if let(Some(_))= Some(1) {}\n+    //~^ ERROR unnecessary parentheses around pattern\n+\n+    for(_x)in 1..10 {}\n+    //~^ ERROR unnecessary parentheses around pattern\n+\n+    if(2 == 1){}\n+    //~^ ERROR unnecessary parentheses around `if` condition\n+\n+    // FIXME, auto recover from this one?\n+    // for(_x in 1..10) {}\n+}"}, {"sha": "a3f2fbc51ab29422e4913907f1ebf00ff87a1827", "filename": "src/test/ui/lint/issue-103435-extra-parentheses.stderr", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/c0447b489ba890c740c1e5c41f3eacca148734a9/src%2Ftest%2Fui%2Flint%2Fissue-103435-extra-parentheses.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0447b489ba890c740c1e5c41f3eacca148734a9/src%2Ftest%2Fui%2Flint%2Fissue-103435-extra-parentheses.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-103435-extra-parentheses.stderr?ref=c0447b489ba890c740c1e5c41f3eacca148734a9", "patch": "@@ -0,0 +1,43 @@\n+error: unnecessary parentheses around pattern\n+  --> $DIR/issue-103435-extra-parentheses.rs:5:11\n+   |\n+LL |     if let(Some(_))= Some(1) {}\n+   |           ^       ^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/issue-103435-extra-parentheses.rs:2:9\n+   |\n+LL | #![deny(unused_parens)]\n+   |         ^^^^^^^^^^^^^\n+help: remove these parentheses\n+   |\n+LL -     if let(Some(_))= Some(1) {}\n+LL +     if let Some(_) = Some(1) {}\n+   |\n+\n+error: unnecessary parentheses around pattern\n+  --> $DIR/issue-103435-extra-parentheses.rs:8:8\n+   |\n+LL |     for(_x)in 1..10 {}\n+   |        ^  ^\n+   |\n+help: remove these parentheses\n+   |\n+LL -     for(_x)in 1..10 {}\n+LL +     for _x in 1..10 {}\n+   |\n+\n+error: unnecessary parentheses around `if` condition\n+  --> $DIR/issue-103435-extra-parentheses.rs:11:7\n+   |\n+LL |     if(2 == 1){}\n+   |       ^      ^\n+   |\n+help: remove these parentheses\n+   |\n+LL -     if(2 == 1){}\n+LL +     if 2 == 1 {}\n+   |\n+\n+error: aborting due to 3 previous errors\n+"}]}