{"sha": "99d71a164aaed7817abe981d57b346fb2921c41d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5ZDcxYTE2NGFhZWQ3ODE3YWJlOTgxZDU3YjM0NmZiMjkyMWM0MWQ=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-09-23T23:01:01Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-09-26T01:58:12Z"}, "message": "Changes to source formatting", "tree": {"sha": "ab36c60492151717849ed0b390aa6affebf1ee27", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab36c60492151717849ed0b390aa6affebf1ee27"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99d71a164aaed7817abe981d57b346fb2921c41d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99d71a164aaed7817abe981d57b346fb2921c41d", "html_url": "https://github.com/rust-lang/rust/commit/99d71a164aaed7817abe981d57b346fb2921c41d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99d71a164aaed7817abe981d57b346fb2921c41d/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ebf64ca35df03737e9850ab940125b21ba64ff16", "url": "https://api.github.com/repos/rust-lang/rust/commits/ebf64ca35df03737e9850ab940125b21ba64ff16", "html_url": "https://github.com/rust-lang/rust/commit/ebf64ca35df03737e9850ab940125b21ba64ff16"}], "stats": {"total": 144, "additions": 109, "deletions": 35}, "files": [{"sha": "6ad6123408a65e20579d521352c580a689ca4ff6", "filename": "src/chains.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/99d71a164aaed7817abe981d57b346fb2921c41d/src%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99d71a164aaed7817abe981d57b346fb2921c41d/src%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchains.rs?ref=99d71a164aaed7817abe981d57b346fb2921c41d", "patch": "@@ -126,7 +126,10 @@ pub fn rewrite_chain(mut expr: &ast::Expr,\n         &connector[..]\n     };\n \n-    Some(format!(\"{}{}{}\", parent_rewrite, first_connector, rewrites.join(&connector)))\n+    Some(format!(\"{}{}{}\",\n+                 parent_rewrite,\n+                 first_connector,\n+                 rewrites.join(&connector)))\n }\n \n fn pop_expr_chain<'a>(expr: &'a ast::Expr) -> Option<&'a ast::Expr> {\n@@ -151,7 +154,13 @@ fn rewrite_chain_expr(expr: &ast::Expr,\n     match expr.node {\n         ast::Expr_::ExprMethodCall(ref method_name, ref types, ref expressions) => {\n             let inner = &RewriteContext { block_indent: offset, ..*context };\n-            rewrite_method_call(method_name.node, types, expressions, span, inner, width, offset)\n+            rewrite_method_call(method_name.node,\n+                                types,\n+                                expressions,\n+                                span,\n+                                inner,\n+                                width,\n+                                offset)\n         }\n         ast::Expr_::ExprField(_, ref field) => {\n             Some(format!(\".{}\", field.node))"}, {"sha": "f5ba982ecc0e0cce4ed50cfc63f878cdb033092e", "filename": "src/comment.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/99d71a164aaed7817abe981d57b346fb2921c41d/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99d71a164aaed7817abe981d57b346fb2921c41d/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=99d71a164aaed7817abe981d57b346fb2921c41d", "patch": "@@ -343,8 +343,10 @@ mod test {\n     #[test]\n     fn test_uncommented() {\n         assert_eq!(&uncommented(\"abc/*...*/\"), \"abc\");\n-        assert_eq!(&uncommented(\"// .... /* \\n../* /* *** / */ */a/* // */c\\n\"), \"..ac\\n\");\n-        assert_eq!(&uncommented(\"abc \\\" /* */\\\" qsdf\"), \"abc \\\" /* */\\\" qsdf\");\n+        assert_eq!(&uncommented(\"// .... /* \\n../* /* *** / */ */a/* // */c\\n\"),\n+                   \"..ac\\n\");\n+        assert_eq!(&uncommented(\"abc \\\" /* */\\\" qsdf\"),\n+                   \"abc \\\" /* */\\\" qsdf\");\n     }\n \n     #[test]\n@@ -365,7 +367,9 @@ mod test {\n         check(\"/*/ */test\", \"test\", Some(6));\n         check(\"//test\\ntest\", \"test\", Some(7));\n         check(\"/* comment only */\", \"whatever\", None);\n-        check(\"/* comment */ some text /* more commentary */ result\", \"result\", Some(46));\n+        check(\"/* comment */ some text /* more commentary */ result\",\n+              \"result\",\n+              Some(46));\n         check(\"sup // sup\", \"p\", Some(2));\n         check(\"sup\", \"x\", None);\n         check(r#\"\u03c0? /**/ \u03c0 is nice!\"#, r#\"\u03c0 is nice\"#, Some(9));"}, {"sha": "4d64efda4df0e2917be63a453c11183aabbb994d", "filename": "src/expr.rs", "status": "modified", "additions": 41, "deletions": 12, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/99d71a164aaed7817abe981d57b346fb2921c41d/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99d71a164aaed7817abe981d57b346fb2921c41d/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=99d71a164aaed7817abe981d57b346fb2921c41d", "patch": "@@ -32,7 +32,11 @@ impl Rewrite for ast::Expr {\n     fn rewrite(&self, context: &RewriteContext, width: usize, offset: Indent) -> Option<String> {\n         match self.node {\n             ast::Expr_::ExprVec(ref expr_vec) => {\n-                rewrite_array(expr_vec.iter().map(|e| &**e), self.span, context, width, offset)\n+                rewrite_array(expr_vec.iter().map(|e| &**e),\n+                              self.span,\n+                              context,\n+                              width,\n+                              offset)\n             }\n             ast::Expr_::ExprLit(ref l) => {\n                 match l.node {\n@@ -176,7 +180,10 @@ impl Rewrite for ast::Expr {\n             ast::Expr_::ExprIndex(..) |\n             ast::Expr_::ExprInlineAsm(..) |\n             ast::Expr_::ExprRepeat(..) => {\n-                wrap_str(context.snippet(self.span), context.config.max_width, width, offset)\n+                wrap_str(context.snippet(self.span),\n+                         context.config.max_width,\n+                         width,\n+                         offset)\n             }\n         }\n     }\n@@ -507,7 +514,13 @@ impl<'a> Rewrite for Loop<'a> {\n         // FIXME: this drops any comment between \"loop\" and the block.\n         self.block\n             .rewrite(context, width, offset)\n-            .map(|result| format!(\"{}{}{} {}\", label_string, self.keyword, pat_expr_string, result))\n+            .map(|result| {\n+                format!(\"{}{}{} {}\",\n+                        label_string,\n+                        self.keyword,\n+                        pat_expr_string,\n+                        result)\n+            })\n     }\n }\n \n@@ -1108,7 +1121,9 @@ fn rewrite_paren(context: &RewriteContext,\n                  width: usize,\n                  offset: Indent)\n                  -> Option<String> {\n-    debug!(\"rewrite_paren, width: {}, offset: {:?}\", width, offset);\n+    debug!(\"rewrite_paren, width: {}, offset: {:?}\",\n+           width,\n+           offset);\n     // 1 is for opening paren, 2 is for opening+closing, we want to keep the closing\n     // paren on the same line as the subexpr.\n     let subexpr_str = subexpr.rewrite(context, try_opt!(width.checked_sub(2)), offset + 1);\n@@ -1124,7 +1139,9 @@ fn rewrite_struct_lit<'a>(context: &RewriteContext,\n                           width: usize,\n                           offset: Indent)\n                           -> Option<String> {\n-    debug!(\"rewrite_struct_lit: width {}, offset {:?}\", width, offset);\n+    debug!(\"rewrite_struct_lit: width {}, offset {:?}\",\n+           width,\n+           offset);\n     assert!(!fields.is_empty() || base.is_some());\n \n     enum StructLitField<'a> {\n@@ -1229,10 +1246,15 @@ fn rewrite_struct_lit<'a>(context: &RewriteContext,\n                                   .block_indent(context.config)\n                                   .to_string(context.config);\n         let outer_indent = context.block_indent.to_string(context.config);\n-        Some(format!(\"{} {{\\n{}{}\\n{}}}\", path_str, inner_indent, fields_str, outer_indent))\n+        Some(format!(\"{} {{\\n{}{}\\n{}}}\",\n+                     path_str,\n+                     inner_indent,\n+                     fields_str,\n+                     outer_indent))\n     };\n \n-    match (context.config.struct_lit_style, context.config.struct_lit_multiline_style) {\n+    match (context.config.struct_lit_style,\n+           context.config.struct_lit_multiline_style) {\n         (StructLitStyle::Block, _) if fields_str.contains('\\n') || fields_str.len() > h_budget =>\n             format_on_newline(),\n         (StructLitStyle::Block, MultilineStyle::ForceMulti) => format_on_newline(),\n@@ -1250,8 +1272,9 @@ fn rewrite_field(context: &RewriteContext,\n                  -> Option<String> {\n     let name = &field.ident.node.to_string();\n     let overhead = name.len() + 2;\n-    let expr = field.expr\n-                    .rewrite(context, try_opt!(width.checked_sub(overhead)), offset + overhead);\n+    let expr = field.expr.rewrite(context,\n+                                  try_opt!(width.checked_sub(overhead)),\n+                                  offset + overhead);\n     expr.map(|s| format!(\"{}: {}\", name, s))\n }\n \n@@ -1261,7 +1284,9 @@ fn rewrite_tuple_lit(context: &RewriteContext,\n                      width: usize,\n                      offset: Indent)\n                      -> Option<String> {\n-    debug!(\"rewrite_tuple_lit: width: {}, offset: {:?}\", width, offset);\n+    debug!(\"rewrite_tuple_lit: width: {}, offset: {:?}\",\n+           width,\n+           offset);\n     let indent = offset + 1;\n     // In case of length 1, need a trailing comma\n     if items.len() == 1 {\n@@ -1352,7 +1377,9 @@ fn rewrite_unary_prefix(context: &RewriteContext,\n                         width: usize,\n                         offset: Indent)\n                         -> Option<String> {\n-    expr.rewrite(context, try_opt!(width.checked_sub(prefix.len())), offset + prefix.len())\n+    expr.rewrite(context,\n+                 try_opt!(width.checked_sub(prefix.len())),\n+                 offset + prefix.len())\n         .map(|r| format!(\"{}{}\", prefix, r))\n }\n \n@@ -1385,7 +1412,9 @@ fn rewrite_assignment(context: &RewriteContext,\n \n     // 1 = space between lhs and operator.\n     let max_width = try_opt!(width.checked_sub(operator_str.len() + 1));\n-    let lhs_str = format!(\"{} {}\", try_opt!(lhs.rewrite(context, max_width, offset)), operator_str);\n+    let lhs_str = format!(\"{} {}\",\n+                          try_opt!(lhs.rewrite(context, max_width, offset)),\n+                          operator_str);\n \n     rewrite_assign_rhs(&context, lhs_str, rhs, width, offset)\n }"}, {"sha": "f3f952bd00ca5eebc554b05ccd0e71e8629787e9", "filename": "src/filemap.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/99d71a164aaed7817abe981d57b346fb2921c41d/src%2Ffilemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99d71a164aaed7817abe981d57b346fb2921c41d/src%2Ffilemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffilemap.rs?ref=99d71a164aaed7817abe981d57b346fb2921c41d", "patch": "@@ -115,7 +115,8 @@ fn write_file(text: &StringBuffer,\n             try!(write_system_newlines(&mut v, text, config));\n             let fmt_text = String::from_utf8(v).unwrap();\n             let diff = make_diff(&ori_text, &fmt_text, 3);\n-            print_diff(diff, |line_num| format!(\"\\nDiff at line {}:\", line_num));\n+            print_diff(diff,\n+                       |line_num| format!(\"\\nDiff at line {}:\", line_num));\n         }\n         WriteMode::Return => {\n             // io::Write is not implemented for String, working around with"}, {"sha": "90123cf63e158c115063a1044f8bada76a021849", "filename": "src/issues.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/99d71a164aaed7817abe981d57b346fb2921c41d/src%2Fissues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99d71a164aaed7817abe981d57b346fb2921c41d/src%2Fissues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fissues.rs?ref=99d71a164aaed7817abe981d57b346fb2921c41d", "patch": "@@ -224,12 +224,14 @@ impl BadIssueSeeker {\n fn find_unnumbered_issue() {\n     fn check_fail(text: &str, failing_pos: usize) {\n         let mut seeker = BadIssueSeeker::new(ReportTactic::Unnumbered, ReportTactic::Unnumbered);\n-        assert_eq!(Some(failing_pos), text.chars().position(|c| seeker.inspect(c).is_some()));\n+        assert_eq!(Some(failing_pos),\n+                   text.chars().position(|c| seeker.inspect(c).is_some()));\n     }\n \n     fn check_pass(text: &str) {\n         let mut seeker = BadIssueSeeker::new(ReportTactic::Unnumbered, ReportTactic::Unnumbered);\n-        assert_eq!(None, text.chars().position(|c| seeker.inspect(c).is_some()));\n+        assert_eq!(None,\n+                   text.chars().position(|c| seeker.inspect(c).is_some()));\n     }\n \n     check_fail(\"TODO\\n\", 4);\n@@ -256,11 +258,17 @@ fn find_issue() {\n                          ReportTactic::Always,\n                          ReportTactic::Never));\n \n-    assert!(!is_bad_issue(\"TODO: no number\\n\", ReportTactic::Never, ReportTactic::Always));\n+    assert!(!is_bad_issue(\"TODO: no number\\n\",\n+                          ReportTactic::Never,\n+                          ReportTactic::Always));\n \n-    assert!(is_bad_issue(\"This is a FIXME(#1)\\n\", ReportTactic::Never, ReportTactic::Always));\n+    assert!(is_bad_issue(\"This is a FIXME(#1)\\n\",\n+                         ReportTactic::Never,\n+                         ReportTactic::Always));\n \n-    assert!(!is_bad_issue(\"bad FIXME\\n\", ReportTactic::Always, ReportTactic::Never));\n+    assert!(!is_bad_issue(\"bad FIXME\\n\",\n+                          ReportTactic::Always,\n+                          ReportTactic::Never));\n }\n \n #[test]"}, {"sha": "efd2c852c3ea561ecf69b5f929da0c3ed60bbc5d", "filename": "src/items.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/99d71a164aaed7817abe981d57b346fb2921c41d/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99d71a164aaed7817abe981d57b346fb2921c41d/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=99d71a164aaed7817abe981d57b346fb2921c41d", "patch": "@@ -307,7 +307,9 @@ impl<'a> FmtVisitor<'a> {\n \n         let context = self.get_context();\n         let ret_str = fd.output\n-                        .rewrite(&context, self.config.max_width - indent.width(), indent)\n+                        .rewrite(&context,\n+                                 self.config.max_width - indent.width(),\n+                                 indent)\n                         .unwrap();\n \n         // Args.\n@@ -1011,7 +1013,9 @@ impl<'a> FmtVisitor<'a> {\n         // 9 = \" where \".len() + \" {\".len()\n         if density == Density::Tall || preds_str.contains('\\n') ||\n            indent.width() + 9 + preds_str.len() > self.config.max_width {\n-            Some(format!(\"\\n{}where {}\", (indent + extra_indent).to_string(self.config), preds_str))\n+            Some(format!(\"\\n{}where {}\",\n+                         (indent + extra_indent).to_string(self.config),\n+                         preds_str))\n         } else {\n             Some(format!(\" where {}\", preds_str))\n         }\n@@ -1041,7 +1045,10 @@ impl Rewrite for ast::Arg {\n     fn rewrite(&self, context: &RewriteContext, width: usize, offset: Indent) -> Option<String> {\n         if is_named_arg(self) {\n             if let ast::Ty_::TyInfer = self.ty.node {\n-                wrap_str(pprust::pat_to_string(&self.pat), context.config.max_width, width, offset)\n+                wrap_str(pprust::pat_to_string(&self.pat),\n+                         context.config.max_width,\n+                         width,\n+                         offset)\n             } else {\n                 let mut result = pprust::pat_to_string(&self.pat);\n                 result.push_str(\": \");"}, {"sha": "73184a0bdc1a6a16fde3074c8dc717c69adb23c7", "filename": "src/lib.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/99d71a164aaed7817abe981d57b346fb2921c41d/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99d71a164aaed7817abe981d57b346fb2921c41d/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=99d71a164aaed7817abe981d57b346fb2921c41d", "patch": "@@ -115,7 +115,8 @@ impl Indent {\n \n     pub fn to_string(&self, config: &Config) -> String {\n         let (num_tabs, num_spaces) = if config.hard_tabs {\n-            (self.block_indent / config.tab_spaces, self.alignment)\n+            (self.block_indent / config.tab_spaces,\n+             self.alignment)\n         } else {\n             (0, self.block_indent + self.alignment)\n         };\n@@ -146,7 +147,8 @@ impl Sub for Indent {\n     type Output = Indent;\n \n     fn sub(self, rhs: Indent) -> Indent {\n-        Indent::new(self.block_indent - rhs.block_indent, self.alignment - rhs.alignment)\n+        Indent::new(self.block_indent - rhs.block_indent,\n+                    self.alignment - rhs.alignment)\n     }\n }\n "}, {"sha": "163a9f12f24fac314f9de930929dc3d65a877da3", "filename": "src/macros.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/99d71a164aaed7817abe981d57b346fb2921c41d/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99d71a164aaed7817abe981d57b346fb2921c41d/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=99d71a164aaed7817abe981d57b346fb2921c41d", "patch": "@@ -103,7 +103,10 @@ pub fn rewrite_macro(mac: &ast::Mac,\n         }\n         MacroStyle::Braces => {\n             // Skip macro invocations with braces, for now.\n-            wrap_str(context.snippet(mac.span), context.config.max_width, width, offset)\n+            wrap_str(context.snippet(mac.span),\n+                     context.config.max_width,\n+                     width,\n+                     offset)\n         }\n     }\n }"}, {"sha": "135e6c3815b159f66e9f38e0092dc57361c1f2a0", "filename": "src/missed_spans.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/99d71a164aaed7817abe981d57b346fb2921c41d/src%2Fmissed_spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99d71a164aaed7817abe981d57b346fb2921c41d/src%2Fmissed_spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmissed_spans.rs?ref=99d71a164aaed7817abe981d57b346fb2921c41d", "patch": "@@ -16,7 +16,8 @@ impl<'a> FmtVisitor<'a> {\n     // TODO these format_missing methods are ugly. Refactor and add unit tests\n     // for the central whitespace stripping loop.\n     pub fn format_missing(&mut self, end: BytePos) {\n-        self.format_missing_inner(end, |this, last_snippet, _| this.buffer.push_str(last_snippet))\n+        self.format_missing_inner(end,\n+                                  |this, last_snippet, _| this.buffer.push_str(last_snippet))\n     }\n \n     pub fn format_missing_with_indent(&mut self, end: BytePos) {"}, {"sha": "3f96bea9d44a15b5ada09a8cb255287c3baa88c2", "filename": "src/modules.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/99d71a164aaed7817abe981d57b346fb2921c41d/src%2Fmodules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99d71a164aaed7817abe981d57b346fb2921c41d/src%2Fmodules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmodules.rs?ref=99d71a164aaed7817abe981d57b346fb2921c41d", "patch": "@@ -25,7 +25,10 @@ pub fn list_files<'a>(krate: &'a ast::Crate,\n                       -> HashMap<PathBuf, &'a ast::Mod> {\n     let mut result = HashMap::new();\n     let root_filename: PathBuf = codemap.span_to_filename(krate.span).into();\n-    list_submodules(&krate.module, root_filename.parent().unwrap(), codemap, &mut result);\n+    list_submodules(&krate.module,\n+                    root_filename.parent().unwrap(),\n+                    codemap,\n+                    &mut result);\n     result.insert(root_filename, &krate.module);\n     result\n }"}, {"sha": "33446765c8c72ccc80e318dd2ef3adebc05cfb0b", "filename": "src/types.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/99d71a164aaed7817abe981d57b346fb2921c41d/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99d71a164aaed7817abe981d57b346fb2921c41d/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=99d71a164aaed7817abe981d57b346fb2921c41d", "patch": "@@ -205,7 +205,9 @@ fn rewrite_segment(segment: &ast::PathSegment,\n                                  .collect::<Vec<_>>();\n \n             let next_span_lo = param_list.last().unwrap().get_span().hi + BytePos(1);\n-            let list_lo = span_after(codemap::mk_sp(*span_lo, span_hi), \"<\", context.codemap);\n+            let list_lo = span_after(codemap::mk_sp(*span_lo, span_hi),\n+                                     \"<\",\n+                                     context.codemap);\n             let separator = get_path_separator(context.codemap, *span_lo, list_lo);\n \n             // 1 for <\n@@ -363,7 +365,8 @@ impl Rewrite for ast::TyParamBound {\n                 tref.rewrite(context, width, offset)\n             }\n             ast::TyParamBound::TraitTyParamBound(ref tref, ast::TraitBoundModifier::Maybe) => {\n-                Some(format!(\"?{}\", try_opt!(tref.rewrite(context, width - 1, offset + 1))))\n+                Some(format!(\"?{}\",\n+                             try_opt!(tref.rewrite(context, width - 1, offset + 1))))\n             }\n             ast::TyParamBound::RegionTyParamBound(ref l) => {\n                 Some(pprust::lifetime_to_string(l))"}, {"sha": "5faff9e6d111ff0302c166e1d936f3d7be94b76d", "filename": "src/visitor.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/99d71a164aaed7817abe981d57b346fb2921c41d/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99d71a164aaed7817abe981d57b346fb2921c41d/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=99d71a164aaed7817abe981d57b346fb2921c41d", "patch": "@@ -316,7 +316,9 @@ impl<'a> FmtVisitor<'a> {\n     }\n \n     fn format_mod(&mut self, m: &ast::Mod, s: Span, ident: ast::Ident) {\n-        debug!(\"FmtVisitor::format_mod: ident: {:?}, span: {:?}\", ident, s);\n+        debug!(\"FmtVisitor::format_mod: ident: {:?}, span: {:?}\",\n+               ident,\n+               s);\n \n         // Decide whether this is an inline mod or an external mod.\n         let local_file_name = self.codemap.span_to_filename(s);\n@@ -354,7 +356,9 @@ impl<'a> FmtVisitor<'a> {\n             overflow_indent: Indent::empty(),\n         };\n         // 1 = \";\"\n-        match vp.rewrite(&context, self.config.max_width - offset.width() - 1, offset) {\n+        match vp.rewrite(&context,\n+                         self.config.max_width - offset.width() - 1,\n+                         offset) {\n             Some(ref s) if s.is_empty() => {\n                 // Format up to last newline\n                 let prev_span = codemap::mk_sp(self.last_pos, span.lo);"}]}