{"sha": "4506d26cf39dcde786d4853af133bf26799bf65d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1MDZkMjZjZjM5ZGNkZTc4NmQ0ODUzYWYxMzNiZjI2Nzk5YmY2NWQ=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-09-09T16:38:10Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-09-09T16:38:10Z"}, "message": "Remove internal and unstable MaybeUninit::UNINIT.\n\nLooks like it is no longer necessary, as uninit_array() can be used\ninstead in the few cases where it was needed.", "tree": {"sha": "afee2a458ac7d8e63e5702cb0de792a8cc4c5f82", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/afee2a458ac7d8e63e5702cb0de792a8cc4c5f82"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4506d26cf39dcde786d4853af133bf26799bf65d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4506d26cf39dcde786d4853af133bf26799bf65d", "html_url": "https://github.com/rust-lang/rust/commit/4506d26cf39dcde786d4853af133bf26799bf65d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4506d26cf39dcde786d4853af133bf26799bf65d/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b4bdc07ff5a70175dbcdff7331c557245ddb012f", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4bdc07ff5a70175dbcdff7331c557245ddb012f", "html_url": "https://github.com/rust-lang/rust/commit/b4bdc07ff5a70175dbcdff7331c557245ddb012f"}], "stats": {"total": 17, "additions": 4, "deletions": 13}, "files": [{"sha": "04d2b205a272d5a89044773915cb52d8bcd79012", "filename": "library/alloc/src/collections/btree/node.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4506d26cf39dcde786d4853af133bf26799bf65d/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4506d26cf39dcde786d4853af133bf26799bf65d/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs?ref=4506d26cf39dcde786d4853af133bf26799bf65d", "patch": "@@ -78,8 +78,8 @@ impl<K, V> LeafNode<K, V> {\n         LeafNode {\n             // As a general policy, we leave fields uninitialized if they can be, as this should\n             // be both slightly faster and easier to track in Valgrind.\n-            keys: [MaybeUninit::UNINIT; CAPACITY],\n-            vals: [MaybeUninit::UNINIT; CAPACITY],\n+            keys: MaybeUninit::uninit_array(),\n+            vals: MaybeUninit::uninit_array(),\n             parent: ptr::null(),\n             parent_idx: MaybeUninit::uninit(),\n             len: 0,\n@@ -111,7 +111,7 @@ impl<K, V> InternalNode<K, V> {\n     /// `len` of 0), there must be one initialized and valid edge. This function does not set up\n     /// such an edge.\n     unsafe fn new() -> Self {\n-        InternalNode { data: unsafe { LeafNode::new() }, edges: [MaybeUninit::UNINIT; 2 * B] }\n+        InternalNode { data: unsafe { LeafNode::new() }, edges: MaybeUninit::uninit_array() }\n     }\n }\n "}, {"sha": "b338e5b2de7a477d500b2cb1fc5b135710481549", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4506d26cf39dcde786d4853af133bf26799bf65d/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4506d26cf39dcde786d4853af133bf26799bf65d/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=4506d26cf39dcde786d4853af133bf26799bf65d", "patch": "@@ -100,7 +100,6 @@\n #![feature(fn_traits)]\n #![feature(fundamental)]\n #![feature(inplace_iteration)]\n-#![feature(internal_uninit_const)]\n #![feature(lang_items)]\n #![feature(layout_for_ptr)]\n #![feature(libc)]\n@@ -134,7 +133,7 @@\n #![feature(unsized_locals)]\n #![feature(allocator_internals)]\n #![feature(slice_partition_dedup)]\n-#![feature(maybe_uninit_extra, maybe_uninit_slice)]\n+#![feature(maybe_uninit_extra, maybe_uninit_slice, maybe_uninit_uninit_array)]\n #![feature(alloc_layout_extra)]\n #![feature(trusted_random_access)]\n #![feature(try_trait)]"}, {"sha": "2a353670a91fa2d9fa1e36405e2081e9fbdc3443", "filename": "library/core/src/mem/maybe_uninit.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4506d26cf39dcde786d4853af133bf26799bf65d/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4506d26cf39dcde786d4853af133bf26799bf65d/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs?ref=4506d26cf39dcde786d4853af133bf26799bf65d", "patch": "@@ -305,14 +305,6 @@ impl<T> MaybeUninit<T> {\n         unsafe { MaybeUninit::<[MaybeUninit<T>; LEN]>::uninit().assume_init() }\n     }\n \n-    /// A promotable constant, equivalent to `uninit()`.\n-    #[unstable(\n-        feature = \"internal_uninit_const\",\n-        issue = \"none\",\n-        reason = \"hack to work around promotability\"\n-    )]\n-    pub const UNINIT: Self = Self::uninit();\n-\n     /// Creates a new `MaybeUninit<T>` in an uninitialized state, with the memory being\n     /// filled with `0` bytes. It depends on `T` whether that already makes for\n     /// proper initialization. For example, `MaybeUninit<usize>::zeroed()` is initialized,"}]}