{"sha": "7d7fef1690218bbb406cf3bcadf7bb29dbb40cc5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkN2ZlZjE2OTAyMThiYmI0MDZjZjNiY2FkZjdiYjI5ZGJiNDBjYzU=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-11-30T09:54:55Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-11-30T09:55:06Z"}, "message": "Fix #1925", "tree": {"sha": "594b79338246e8db7868317505750e5bd097fce3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/594b79338246e8db7868317505750e5bd097fce3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d7fef1690218bbb406cf3bcadf7bb29dbb40cc5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAlof1XoACgkQpp+NIls6\n19nZoA//VAnPoC57hOST9z3zbArQCeABamZS9ps4DtR/PkqWF7A9d9Ae/kbFQ8rr\nHlpkXh6yon87YHDrXKM9xP6hkp3CuF6F6Hm2GZquwdJ1YlqHfR+DhjEFRC8SYX8R\nbYqBfg5mCYsTrvZIMZyGj3lmXKbdzTarhW5TfpeMojvq6wzqDtmWosqAvFfFr/3X\nMUtRGbSGlh0K0FhWqRrrCFyzyfLnTKI581MTFYK38VZom9nURL48ervl+VOCaRmH\nac5CVOCAsDkdueoHdVqaZjQz9lM0uuK9tgzmh/r7xVT20K5MO8QsfO63u6wCqMrd\n/39VowT+qcoS3rFVgfuD2Y8GoanfXVrmw7a1MahkaA8CWVuv+GDIoZRD+YLjkzn/\ny8Cv8mgZtebuQaYkEYKUbETDLwlgjfFdThyxZZlavjrLPBxwR0VJjW22e3dtonfd\nw10rONYM66CYiGGEiRItp6TdKaoZ90LXOK3oeG0phhjauW2yZbEA3ep8j6Iw+783\ncXzq/c8KRG4om5ibox3DSoIR94Flx4dyHiqU2NMCqrwn287L1JJZGHWYJAPOowWU\nxQHxfN+UkeFrJO1nzmJz91We6ZEdFm4SacPOG4cfj+j6Cv9DkDD0u6Yn0p/M84ma\nCPgo0p3wxKje28vC9jIq2WBiekCr1YsA+lR63KB9AsW6AMeYtho=\n=fAsR\n-----END PGP SIGNATURE-----", "payload": "tree 594b79338246e8db7868317505750e5bd097fce3\nparent 1c95a7cf3590c64bb11808372ac98d231dd74b59\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1512035695 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1512035706 +0100\n\nFix #1925\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d7fef1690218bbb406cf3bcadf7bb29dbb40cc5", "html_url": "https://github.com/rust-lang/rust/commit/7d7fef1690218bbb406cf3bcadf7bb29dbb40cc5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d7fef1690218bbb406cf3bcadf7bb29dbb40cc5/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c95a7cf3590c64bb11808372ac98d231dd74b59", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c95a7cf3590c64bb11808372ac98d231dd74b59", "html_url": "https://github.com/rust-lang/rust/commit/1c95a7cf3590c64bb11808372ac98d231dd74b59"}], "stats": {"total": 82, "additions": 73, "deletions": 9}, "files": [{"sha": "4a52df92b27a4f49697365d17e606a9d33396351", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 46, "deletions": 8, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/7d7fef1690218bbb406cf3bcadf7bb29dbb40cc5/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d7fef1690218bbb406cf3bcadf7bb29dbb40cc5/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=7d7fef1690218bbb406cf3bcadf7bb29dbb40cc5", "patch": "@@ -7,6 +7,7 @@ use rustc::ty::subst::Substs;\n use rustc_const_eval::ConstContext;\n use std::borrow::Cow;\n use std::fmt;\n+use std::iter;\n use syntax::ast;\n use syntax::codemap::Span;\n use utils::{get_trait_def_id, implements_trait, in_external_macro, in_macro, is_copy, is_self, is_self_ty,\n@@ -944,29 +945,66 @@ fn lint_or_fun_call(cx: &LateContext, expr: &hir::Expr, name: &str, args: &[hir:\n fn lint_clone_on_copy(cx: &LateContext, expr: &hir::Expr, arg: &hir::Expr, arg_ty: Ty) {\n     let ty = cx.tables.expr_ty(expr);\n     if let ty::TyRef(_, ty::TypeAndMut { ty: inner, .. }) = arg_ty.sty {\n-        if let ty::TyRef(..) = inner.sty {\n+        if let ty::TyRef(_, ty::TypeAndMut { ty: innermost, .. }) = inner.sty {\n             span_lint_and_then(\n                 cx,\n                 CLONE_DOUBLE_REF,\n                 expr.span,\n                 \"using `clone` on a double-reference; \\\n                  this will copy the reference instead of cloning the inner type\",\n                 |db| if let Some(snip) = sugg::Sugg::hir_opt(cx, arg) {\n-                    db.span_suggestion(expr.span, \"try dereferencing it\", format!(\"({}).clone()\", snip.deref()));\n+                    let mut ty = innermost;\n+                    let mut n = 0;\n+                    while let ty::TyRef(_, ty::TypeAndMut { ty: inner, .. }) = ty.sty {\n+                        ty = inner;\n+                        n += 1;\n+                    }\n+                    let refs: String = iter::repeat('&').take(n + 1).collect();\n+                    let derefs: String = iter::repeat('*').take(n).collect();\n+                    let explicit = format!(\"{}{}::clone({})\", refs, ty, snip);\n+                    db.span_suggestion(expr.span, \"try dereferencing it\", format!(\"{}({}{}).clone()\", refs, derefs, snip.deref()));\n+                    db.span_suggestion(expr.span, \"or try being explicit about what type to clone\", explicit);\n                 },\n             );\n             return; // don't report clone_on_copy\n         }\n     }\n \n     if is_copy(cx, ty) {\n-        span_lint_and_then(cx, CLONE_ON_COPY, expr.span, \"using `clone` on a `Copy` type\", |db| {\n-            if let Some(snip) = sugg::Sugg::hir_opt(cx, arg) {\n-                if let ty::TyRef(..) = cx.tables.expr_ty(arg).sty {\n-                    db.span_suggestion(expr.span, \"try dereferencing it\", format!(\"{}\", snip.deref()));\n-                } else {\n-                    db.span_suggestion(expr.span, \"try removing the `clone` call\", format!(\"{}\", snip));\n+        let snip;\n+        if let Some(snippet) = sugg::Sugg::hir_opt(cx, arg) {\n+            if let ty::TyRef(..) = cx.tables.expr_ty(arg).sty {\n+                let parent = cx.tcx.hir.get_parent_node(expr.id);\n+                match cx.tcx.hir.get(parent) {\n+                    hir::map::NodeExpr(parent) => match parent.node {\n+                        // &*x is a nop, &x.clone() is not\n+                        hir::ExprAddrOf(..) |\n+                        // (*x).func() is useless, x.clone().func() can work in case func borrows mutably\n+                        hir::ExprMethodCall(..) => return,\n+                        _ => {},\n+                    }\n+                    hir::map::NodeStmt(stmt) => {\n+                        if let hir::StmtDecl(ref decl, _) = stmt.node {\n+                            if let hir::DeclLocal(ref loc) = decl.node {\n+                                if let hir::PatKind::Ref(..) = loc.pat.node {\n+                                    // let ref y = *x borrows x, let ref y = x.clone() does not\n+                                    return;\n+                                }\n+                            }\n+                        }\n+                    },\n+                    _ => {},\n                 }\n+                snip = Some((\"try dereferencing it\", format!(\"{}\", snippet.deref())));\n+            } else {\n+                snip = Some((\"try removing the `clone` call\", format!(\"{}\", snippet)));\n+            }\n+        } else {\n+            snip = None;\n+        }\n+        span_lint_and_then(cx, CLONE_ON_COPY, expr.span, \"using `clone` on a `Copy` type\", |db| {\n+            if let Some((text, snip)) = snip {\n+                db.span_suggestion(expr.span, text, snip);\n             }\n         });\n     }"}, {"sha": "5bfa256623b6bbcd5b56bb93421b655e417f0d68", "filename": "tests/ui/clone_on_copy_mut.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7d7fef1690218bbb406cf3bcadf7bb29dbb40cc5/tests%2Fui%2Fclone_on_copy_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d7fef1690218bbb406cf3bcadf7bb29dbb40cc5/tests%2Fui%2Fclone_on_copy_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclone_on_copy_mut.rs?ref=7d7fef1690218bbb406cf3bcadf7bb29dbb40cc5", "patch": "@@ -0,0 +1,18 @@\n+pub fn dec_read_dec(i: &mut i32) -> i32 {\n+    *i -= 1;\n+    let ret = *i;\n+    *i -= 1;\n+    ret\n+}\n+\n+pub fn minus_1(i: &i32) -> i32 {\n+    dec_read_dec(&mut i.clone())\n+}\n+\n+fn main() {\n+    let mut i = 10;\n+    assert_eq!(minus_1(&i), 9);\n+    assert_eq!(i, 10);\n+    assert_eq!(dec_read_dec(&mut i), 9);\n+    assert_eq!(i, 8);\n+}"}, {"sha": "437df1ee97c59cd5f9a29a981fac32923e97a345", "filename": "tests/ui/unnecessary_clone.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7d7fef1690218bbb406cf3bcadf7bb29dbb40cc5/tests%2Fui%2Funnecessary_clone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d7fef1690218bbb406cf3bcadf7bb29dbb40cc5/tests%2Fui%2Funnecessary_clone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_clone.stderr?ref=7d7fef1690218bbb406cf3bcadf7bb29dbb40cc5", "patch": "@@ -54,9 +54,17 @@ error: using `clone` on a double-reference; this will copy the reference instead\n   --> $DIR/unnecessary_clone.rs:49:22\n    |\n 49 |     let z: &Vec<_> = y.clone();\n-   |                      ^^^^^^^^^ help: try dereferencing it: `(*y).clone()`\n+   |                      ^^^^^^^^^\n    |\n    = note: `-D clone-double-ref` implied by `-D warnings`\n+help: try dereferencing it\n+   |\n+49 |     let z: &Vec<_> = &(*y).clone();\n+   |                      ^^^^^^^^^^^^^\n+help: or try being explicit about what type to clone\n+   |\n+49 |     let z: &Vec<_> = &std::vec::Vec<i32>::clone(y);\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `cloned().collect()` on a slice to create a `Vec`. Calling `to_vec()` is both faster and more readable\n   --> $DIR/unnecessary_clone.rs:56:27"}]}