{"sha": "f562117788963a579b8438c75367d9946cae3b23", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1NjIxMTc3ODg5NjNhNTc5Yjg0MzhjNzUzNjdkOTk0NmNhZTNiMjM=", "commit": {"author": {"name": "Philipp Krones", "email": "hello@philkrones.com", "date": "2020-06-23T12:39:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-23T12:39:49Z"}, "message": "Rollup merge of #5724 - ebroto:5697_const_result_option, r=Manishearth\n\nredundant_pattern_matching: avoid non-`const fn` calls in const contexts\n\nchangelog: Avoid suggesting non-`const fn` calls in const contexts in [`redundant_pattern_matching`]\n\nFixes #5697", "tree": {"sha": "7f21e265e053850d1617c48ca15312f509ee179d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f21e265e053850d1617c48ca15312f509ee179d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f562117788963a579b8438c75367d9946cae3b23", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe8fgVCRBK7hj4Ov3rIwAAdHIIAJerWisXH9SmW01isfdazjXj\nbu5o/zX4QB/zyMnmy+IcZd2zixzCajZcZ45Fzl027uGVGCYEV8taDOsjS94Ygojg\nzYDDbBzWeDlYJwH1iTbdbBbL23aqtA91JWU9PDtSgXIeanWKUh8E/z2Wf/VYDKof\njrkqoMzsY/x4Rs6m8Lj+fPVJh9+7cU2DWnrkWfjmfBhn2ZYYxM43Noy2JAHzcUA9\nnxphNxnIEgXbMTL5OZZRS1zZ+XUL9HFTN+YpwHAwn3vohalFgqS6JkDvNB5ygH31\nG5o+uwwwJKR4cu3I5eTWG9ocIb2gLed51eBapYh/JPsnI6+UcI8rdVhSrNFWwK4=\n=4us4\n-----END PGP SIGNATURE-----\n", "payload": "tree 7f21e265e053850d1617c48ca15312f509ee179d\nparent 68c0b24e2366961c88b30ebce9411ce6c71d8d03\nparent a7743e9084f9ccd7c966f98a14fa667c694d66ab\nauthor Philipp Krones <hello@philkrones.com> 1592915989 +0200\ncommitter GitHub <noreply@github.com> 1592915989 +0200\n\nRollup merge of #5724 - ebroto:5697_const_result_option, r=Manishearth\n\nredundant_pattern_matching: avoid non-`const fn` calls in const contexts\n\nchangelog: Avoid suggesting non-`const fn` calls in const contexts in [`redundant_pattern_matching`]\n\nFixes #5697\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f562117788963a579b8438c75367d9946cae3b23", "html_url": "https://github.com/rust-lang/rust/commit/f562117788963a579b8438c75367d9946cae3b23", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f562117788963a579b8438c75367d9946cae3b23/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68c0b24e2366961c88b30ebce9411ce6c71d8d03", "url": "https://api.github.com/repos/rust-lang/rust/commits/68c0b24e2366961c88b30ebce9411ce6c71d8d03", "html_url": "https://github.com/rust-lang/rust/commit/68c0b24e2366961c88b30ebce9411ce6c71d8d03"}, {"sha": "a7743e9084f9ccd7c966f98a14fa667c694d66ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7743e9084f9ccd7c966f98a14fa667c694d66ab", "html_url": "https://github.com/rust-lang/rust/commit/a7743e9084f9ccd7c966f98a14fa667c694d66ab"}], "stats": {"total": 364, "additions": 318, "deletions": 46}, "files": [{"sha": "3c528a295b044ba34b2176638d2761de37ad3aad", "filename": "clippy_lints/src/redundant_pattern_matching.rs", "status": "modified", "additions": 62, "deletions": 18, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/f562117788963a579b8438c75367d9946cae3b23/clippy_lints%2Fsrc%2Fredundant_pattern_matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f562117788963a579b8438c75367d9946cae3b23/clippy_lints%2Fsrc%2Fredundant_pattern_matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_pattern_matching.rs?ref=f562117788963a579b8438c75367d9946cae3b23", "patch": "@@ -1,10 +1,13 @@\n-use crate::utils::{match_qpath, match_trait_method, paths, snippet, span_lint_and_then};\n+use crate::utils::{in_constant, match_qpath, match_trait_method, paths, snippet, span_lint_and_then};\n use if_chain::if_chain;\n use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;\n-use rustc_hir::{Arm, Expr, ExprKind, MatchSource, PatKind, QPath};\n+use rustc_hir::{Arm, Expr, ExprKind, HirId, MatchSource, PatKind, QPath};\n use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::ty;\n+use rustc_mir::const_eval::is_const_fn;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::source_map::Symbol;\n \n declare_clippy_lint! {\n     /// **What it does:** Lint for redundant pattern matching over `Result` or\n@@ -64,26 +67,37 @@ fn find_sugg_for_if_let<'a, 'tcx>(\n     arms: &[Arm<'_>],\n     keyword: &'static str,\n ) {\n+    fn find_suggestion(cx: &LateContext<'_, '_>, hir_id: HirId, path: &QPath<'_>) -> Option<&'static str> {\n+        if match_qpath(path, &paths::RESULT_OK) && can_suggest(cx, hir_id, sym!(result_type), \"is_ok\") {\n+            return Some(\"is_ok()\");\n+        }\n+        if match_qpath(path, &paths::RESULT_ERR) && can_suggest(cx, hir_id, sym!(result_type), \"is_err\") {\n+            return Some(\"is_err()\");\n+        }\n+        if match_qpath(path, &paths::OPTION_SOME) && can_suggest(cx, hir_id, sym!(option_type), \"is_some\") {\n+            return Some(\"is_some()\");\n+        }\n+        if match_qpath(path, &paths::OPTION_NONE) && can_suggest(cx, hir_id, sym!(option_type), \"is_none\") {\n+            return Some(\"is_none()\");\n+        }\n+        None\n+    }\n+\n+    let hir_id = expr.hir_id;\n     let good_method = match arms[0].pat.kind {\n         PatKind::TupleStruct(ref path, ref patterns, _) if patterns.len() == 1 => {\n             if let PatKind::Wild = patterns[0].kind {\n-                if match_qpath(path, &paths::RESULT_OK) {\n-                    \"is_ok()\"\n-                } else if match_qpath(path, &paths::RESULT_ERR) {\n-                    \"is_err()\"\n-                } else if match_qpath(path, &paths::OPTION_SOME) {\n-                    \"is_some()\"\n-                } else {\n-                    return;\n-                }\n+                find_suggestion(cx, hir_id, path)\n             } else {\n-                return;\n+                None\n             }\n         },\n-\n-        PatKind::Path(ref path) if match_qpath(path, &paths::OPTION_NONE) => \"is_none()\",\n-\n-        _ => return,\n+        PatKind::Path(ref path) => find_suggestion(cx, hir_id, path),\n+        _ => None,\n+    };\n+    let good_method = match good_method {\n+        Some(method) => method,\n+        None => return,\n     };\n \n     // check that `while_let_on_iterator` lint does not trigger\n@@ -128,6 +142,7 @@ fn find_sugg_for_match<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr<'_\n     if arms.len() == 2 {\n         let node_pair = (&arms[0].pat.kind, &arms[1].pat.kind);\n \n+        let hir_id = expr.hir_id;\n         let found_good_method = match node_pair {\n             (\n                 PatKind::TupleStruct(ref path_left, ref patterns_left, _),\n@@ -142,6 +157,8 @@ fn find_sugg_for_match<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr<'_\n                         &paths::RESULT_ERR,\n                         \"is_ok()\",\n                         \"is_err()\",\n+                        || can_suggest(cx, hir_id, sym!(result_type), \"is_ok\"),\n+                        || can_suggest(cx, hir_id, sym!(result_type), \"is_err\"),\n                     )\n                 } else {\n                     None\n@@ -160,6 +177,8 @@ fn find_sugg_for_match<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr<'_\n                         &paths::OPTION_NONE,\n                         \"is_some()\",\n                         \"is_none()\",\n+                        || can_suggest(cx, hir_id, sym!(option_type), \"is_some\"),\n+                        || can_suggest(cx, hir_id, sym!(option_type), \"is_none\"),\n                     )\n                 } else {\n                     None\n@@ -188,6 +207,7 @@ fn find_sugg_for_match<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr<'_\n     }\n }\n \n+#[allow(clippy::too_many_arguments)]\n fn find_good_method_for_match<'a>(\n     arms: &[Arm<'_>],\n     path_left: &QPath<'_>,\n@@ -196,6 +216,8 @@ fn find_good_method_for_match<'a>(\n     expected_right: &[&str],\n     should_be_left: &'a str,\n     should_be_right: &'a str,\n+    can_suggest_left: impl Fn() -> bool,\n+    can_suggest_right: impl Fn() -> bool,\n ) -> Option<&'a str> {\n     let body_node_pair = if match_qpath(path_left, expected_left) && match_qpath(path_right, expected_right) {\n         (&(*arms[0].body).kind, &(*arms[1].body).kind)\n@@ -207,10 +229,32 @@ fn find_good_method_for_match<'a>(\n \n     match body_node_pair {\n         (ExprKind::Lit(ref lit_left), ExprKind::Lit(ref lit_right)) => match (&lit_left.node, &lit_right.node) {\n-            (LitKind::Bool(true), LitKind::Bool(false)) => Some(should_be_left),\n-            (LitKind::Bool(false), LitKind::Bool(true)) => Some(should_be_right),\n+            (LitKind::Bool(true), LitKind::Bool(false)) if can_suggest_left() => Some(should_be_left),\n+            (LitKind::Bool(false), LitKind::Bool(true)) if can_suggest_right() => Some(should_be_right),\n             _ => None,\n         },\n         _ => None,\n     }\n }\n+\n+fn can_suggest(cx: &LateContext<'_, '_>, hir_id: HirId, diag_item: Symbol, name: &str) -> bool {\n+    if !in_constant(cx, hir_id) {\n+        return true;\n+    }\n+\n+    // Avoid suggesting calls to non-`const fn`s in const contexts, see #5697.\n+    cx.tcx\n+        .get_diagnostic_item(diag_item)\n+        .and_then(|def_id| {\n+            cx.tcx.inherent_impls(def_id).iter().find_map(|imp| {\n+                cx.tcx\n+                    .associated_items(*imp)\n+                    .in_definition_order()\n+                    .find_map(|item| match item.kind {\n+                        ty::AssocKind::Fn if item.ident.name.as_str() == name => Some(item.def_id),\n+                        _ => None,\n+                    })\n+            })\n+        })\n+        .map_or(false, |def_id| is_const_fn(cx.tcx, def_id))\n+}"}, {"sha": "6ba5cfb1d7177bef814da42575f40ea9b6301a8a", "filename": "tests/ui/redundant_pattern_matching.fixed", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/f562117788963a579b8438c75367d9946cae3b23/tests%2Fui%2Fredundant_pattern_matching.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f562117788963a579b8438c75367d9946cae3b23/tests%2Fui%2Fredundant_pattern_matching.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching.fixed?ref=f562117788963a579b8438c75367d9946cae3b23", "patch": "@@ -1,5 +1,7 @@\n // run-rustfix\n \n+#![feature(const_if_match)]\n+#![feature(const_loop)]\n #![warn(clippy::all)]\n #![warn(clippy::redundant_pattern_matching)]\n #![allow(clippy::unit_arg, unused_must_use, clippy::needless_bool, deprecated)]\n@@ -67,6 +69,7 @@ fn main() {\n     takes_bool(x);\n \n     issue5504();\n+    issue5697();\n \n     let _ = if gen_opt().is_some() {\n         1\n@@ -117,3 +120,42 @@ fn issue5504() {\n     if m!().is_some() {}\n     while m!().is_some() {}\n }\n+\n+// None of these should be linted because none of the suggested methods\n+// are `const fn` without toggling a feature.\n+const fn issue5697() {\n+    if let Ok(_) = Ok::<i32, i32>(42) {}\n+\n+    if let Err(_) = Err::<i32, i32>(42) {}\n+\n+    if let Some(_) = Some(42) {}\n+\n+    if let None = None::<()> {}\n+\n+    while let Ok(_) = Ok::<i32, i32>(10) {}\n+\n+    while let Err(_) = Ok::<i32, i32>(10) {}\n+\n+    while let Some(_) = Some(42) {}\n+\n+    while let None = None::<()> {}\n+\n+    match Ok::<i32, i32>(42) {\n+        Ok(_) => true,\n+        Err(_) => false,\n+    };\n+\n+    match Err::<i32, i32>(42) {\n+        Ok(_) => false,\n+        Err(_) => true,\n+    };\n+    match Some(42) {\n+        Some(_) => true,\n+        None => false,\n+    };\n+\n+    match None::<()> {\n+        Some(_) => false,\n+        None => true,\n+    };\n+}"}, {"sha": "17de66f9ad0ebaef6c44f8124879c2550e690e47", "filename": "tests/ui/redundant_pattern_matching.rs", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/f562117788963a579b8438c75367d9946cae3b23/tests%2Fui%2Fredundant_pattern_matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f562117788963a579b8438c75367d9946cae3b23/tests%2Fui%2Fredundant_pattern_matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching.rs?ref=f562117788963a579b8438c75367d9946cae3b23", "patch": "@@ -1,5 +1,7 @@\n // run-rustfix\n \n+#![feature(const_if_match)]\n+#![feature(const_loop)]\n #![warn(clippy::all)]\n #![warn(clippy::redundant_pattern_matching)]\n #![allow(clippy::unit_arg, unused_must_use, clippy::needless_bool, deprecated)]\n@@ -88,6 +90,7 @@ fn main() {\n     takes_bool(x);\n \n     issue5504();\n+    issue5697();\n \n     let _ = if let Some(_) = gen_opt() {\n         1\n@@ -138,3 +141,42 @@ fn issue5504() {\n     if let Some(_) = m!() {}\n     while let Some(_) = m!() {}\n }\n+\n+// None of these should be linted because none of the suggested methods\n+// are `const fn` without toggling a feature.\n+const fn issue5697() {\n+    if let Ok(_) = Ok::<i32, i32>(42) {}\n+\n+    if let Err(_) = Err::<i32, i32>(42) {}\n+\n+    if let Some(_) = Some(42) {}\n+\n+    if let None = None::<()> {}\n+\n+    while let Ok(_) = Ok::<i32, i32>(10) {}\n+\n+    while let Err(_) = Ok::<i32, i32>(10) {}\n+\n+    while let Some(_) = Some(42) {}\n+\n+    while let None = None::<()> {}\n+\n+    match Ok::<i32, i32>(42) {\n+        Ok(_) => true,\n+        Err(_) => false,\n+    };\n+\n+    match Err::<i32, i32>(42) {\n+        Ok(_) => false,\n+        Err(_) => true,\n+    };\n+    match Some(42) {\n+        Some(_) => true,\n+        None => false,\n+    };\n+\n+    match None::<()> {\n+        Some(_) => false,\n+        None => true,\n+    };\n+}"}, {"sha": "1b9a4b40a2f0210da797e4a7d39a7485bfe20205", "filename": "tests/ui/redundant_pattern_matching.stderr", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/f562117788963a579b8438c75367d9946cae3b23/tests%2Fui%2Fredundant_pattern_matching.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f562117788963a579b8438c75367d9946cae3b23/tests%2Fui%2Fredundant_pattern_matching.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching.stderr?ref=f562117788963a579b8438c75367d9946cae3b23", "patch": "@@ -1,73 +1,73 @@\n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:8:12\n+  --> $DIR/redundant_pattern_matching.rs:10:12\n    |\n LL |     if let Ok(_) = Ok::<i32, i32>(42) {}\n    |     -------^^^^^--------------------- help: try this: `if Ok::<i32, i32>(42).is_ok()`\n    |\n    = note: `-D clippy::redundant-pattern-matching` implied by `-D warnings`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching.rs:10:12\n+  --> $DIR/redundant_pattern_matching.rs:12:12\n    |\n LL |     if let Err(_) = Err::<i32, i32>(42) {}\n    |     -------^^^^^^---------------------- help: try this: `if Err::<i32, i32>(42).is_err()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching.rs:12:12\n+  --> $DIR/redundant_pattern_matching.rs:14:12\n    |\n LL |     if let None = None::<()> {}\n    |     -------^^^^------------- help: try this: `if None::<()>.is_none()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:14:12\n+  --> $DIR/redundant_pattern_matching.rs:16:12\n    |\n LL |     if let Some(_) = Some(42) {}\n    |     -------^^^^^^^----------- help: try this: `if Some(42).is_some()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:16:12\n+  --> $DIR/redundant_pattern_matching.rs:18:12\n    |\n LL |     if let Some(_) = Some(42) {\n    |     -------^^^^^^^----------- help: try this: `if Some(42).is_some()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:22:15\n+  --> $DIR/redundant_pattern_matching.rs:24:15\n    |\n LL |     while let Some(_) = Some(42) {}\n    |     ----------^^^^^^^----------- help: try this: `while Some(42).is_some()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching.rs:24:15\n+  --> $DIR/redundant_pattern_matching.rs:26:15\n    |\n LL |     while let None = Some(42) {}\n    |     ----------^^^^----------- help: try this: `while Some(42).is_none()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching.rs:26:15\n+  --> $DIR/redundant_pattern_matching.rs:28:15\n    |\n LL |     while let None = None::<()> {}\n    |     ----------^^^^------------- help: try this: `while None::<()>.is_none()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:28:15\n+  --> $DIR/redundant_pattern_matching.rs:30:15\n    |\n LL |     while let Ok(_) = Ok::<i32, i32>(10) {}\n    |     ----------^^^^^--------------------- help: try this: `while Ok::<i32, i32>(10).is_ok()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching.rs:30:15\n+  --> $DIR/redundant_pattern_matching.rs:32:15\n    |\n LL |     while let Err(_) = Ok::<i32, i32>(10) {}\n    |     ----------^^^^^^--------------------- help: try this: `while Ok::<i32, i32>(10).is_err()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:33:15\n+  --> $DIR/redundant_pattern_matching.rs:35:15\n    |\n LL |     while let Some(_) = v.pop() {\n    |     ----------^^^^^^^---------- help: try this: `while v.pop().is_some()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:49:5\n+  --> $DIR/redundant_pattern_matching.rs:51:5\n    |\n LL | /     match Ok::<i32, i32>(42) {\n LL | |         Ok(_) => true,\n@@ -76,7 +76,7 @@ LL | |     };\n    | |_____^ help: try this: `Ok::<i32, i32>(42).is_ok()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching.rs:54:5\n+  --> $DIR/redundant_pattern_matching.rs:56:5\n    |\n LL | /     match Ok::<i32, i32>(42) {\n LL | |         Ok(_) => false,\n@@ -85,7 +85,7 @@ LL | |     };\n    | |_____^ help: try this: `Ok::<i32, i32>(42).is_err()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching.rs:59:5\n+  --> $DIR/redundant_pattern_matching.rs:61:5\n    |\n LL | /     match Err::<i32, i32>(42) {\n LL | |         Ok(_) => false,\n@@ -94,7 +94,7 @@ LL | |     };\n    | |_____^ help: try this: `Err::<i32, i32>(42).is_err()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:64:5\n+  --> $DIR/redundant_pattern_matching.rs:66:5\n    |\n LL | /     match Err::<i32, i32>(42) {\n LL | |         Ok(_) => true,\n@@ -103,7 +103,7 @@ LL | |     };\n    | |_____^ help: try this: `Err::<i32, i32>(42).is_ok()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:69:5\n+  --> $DIR/redundant_pattern_matching.rs:71:5\n    |\n LL | /     match Some(42) {\n LL | |         Some(_) => true,\n@@ -112,7 +112,7 @@ LL | |     };\n    | |_____^ help: try this: `Some(42).is_some()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching.rs:74:5\n+  --> $DIR/redundant_pattern_matching.rs:76:5\n    |\n LL | /     match None::<()> {\n LL | |         Some(_) => false,\n@@ -121,7 +121,7 @@ LL | |     };\n    | |_____^ help: try this: `None::<()>.is_none()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching.rs:79:13\n+  --> $DIR/redundant_pattern_matching.rs:81:13\n    |\n LL |       let _ = match None::<()> {\n    |  _____________^\n@@ -131,61 +131,61 @@ LL | |     };\n    | |_____^ help: try this: `None::<()>.is_none()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:84:20\n+  --> $DIR/redundant_pattern_matching.rs:86:20\n    |\n LL |     let _ = if let Ok(_) = Ok::<usize, ()>(4) { true } else { false };\n    |             -------^^^^^--------------------- help: try this: `if Ok::<usize, ()>(4).is_ok()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:87:20\n+  --> $DIR/redundant_pattern_matching.rs:89:20\n    |\n LL |     let x = if let Some(_) = opt { true } else { false };\n    |             -------^^^^^^^------ help: try this: `if opt.is_some()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:92:20\n+  --> $DIR/redundant_pattern_matching.rs:95:20\n    |\n LL |     let _ = if let Some(_) = gen_opt() {\n    |             -------^^^^^^^------------ help: try this: `if gen_opt().is_some()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching.rs:94:19\n+  --> $DIR/redundant_pattern_matching.rs:97:19\n    |\n LL |     } else if let None = gen_opt() {\n    |            -------^^^^------------ help: try this: `if gen_opt().is_none()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:96:19\n+  --> $DIR/redundant_pattern_matching.rs:99:19\n    |\n LL |     } else if let Ok(_) = gen_res() {\n    |            -------^^^^^------------ help: try this: `if gen_res().is_ok()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching.rs:98:19\n+  --> $DIR/redundant_pattern_matching.rs:101:19\n    |\n LL |     } else if let Err(_) = gen_res() {\n    |            -------^^^^^^------------ help: try this: `if gen_res().is_err()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:131:19\n+  --> $DIR/redundant_pattern_matching.rs:134:19\n    |\n LL |         while let Some(_) = r#try!(result_opt()) {}\n    |         ----------^^^^^^^----------------------- help: try this: `while r#try!(result_opt()).is_some()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:132:16\n+  --> $DIR/redundant_pattern_matching.rs:135:16\n    |\n LL |         if let Some(_) = r#try!(result_opt()) {}\n    |         -------^^^^^^^----------------------- help: try this: `if r#try!(result_opt()).is_some()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:138:12\n+  --> $DIR/redundant_pattern_matching.rs:141:12\n    |\n LL |     if let Some(_) = m!() {}\n    |     -------^^^^^^^------- help: try this: `if m!().is_some()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:139:15\n+  --> $DIR/redundant_pattern_matching.rs:142:15\n    |\n LL |     while let Some(_) = m!() {}\n    |     ----------^^^^^^^------- help: try this: `while m!().is_some()`"}, {"sha": "c8bc5458067d35bf1ac7c8e2472f3896423c0990", "filename": "tests/ui/redundant_pattern_matching_const_result.fixed", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/f562117788963a579b8438c75367d9946cae3b23/tests%2Fui%2Fredundant_pattern_matching_const_result.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f562117788963a579b8438c75367d9946cae3b23/tests%2Fui%2Fredundant_pattern_matching_const_result.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching_const_result.fixed?ref=f562117788963a579b8438c75367d9946cae3b23", "patch": "@@ -0,0 +1,46 @@\n+// run-rustfix\n+\n+#![feature(const_if_match)]\n+#![feature(const_loop)]\n+#![feature(const_result)]\n+#![warn(clippy::redundant_pattern_matching)]\n+#![allow(unused)]\n+\n+// Test that results are linted with the feature enabled.\n+\n+const fn issue_5697() {\n+    if Ok::<i32, i32>(42).is_ok() {}\n+\n+    if Err::<i32, i32>(42).is_err() {}\n+\n+    while Ok::<i32, i32>(10).is_ok() {}\n+\n+    while Ok::<i32, i32>(10).is_err() {}\n+\n+    Ok::<i32, i32>(42).is_ok();\n+\n+    Err::<i32, i32>(42).is_err();\n+\n+    // These should not be linted until `const_option` is implemented.\n+    // See https://github.com/rust-lang/rust/issues/67441\n+\n+    if let Some(_) = Some(42) {}\n+\n+    if let None = None::<()> {}\n+\n+    while let Some(_) = Some(42) {}\n+\n+    while let None = None::<()> {}\n+\n+    match Some(42) {\n+        Some(_) => true,\n+        None => false,\n+    };\n+\n+    match None::<()> {\n+        Some(_) => false,\n+        None => true,\n+    };\n+}\n+\n+fn main() {}"}, {"sha": "75f37ec15c6222ea894999b3e483bb12e86c07f5", "filename": "tests/ui/redundant_pattern_matching_const_result.rs", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/f562117788963a579b8438c75367d9946cae3b23/tests%2Fui%2Fredundant_pattern_matching_const_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f562117788963a579b8438c75367d9946cae3b23/tests%2Fui%2Fredundant_pattern_matching_const_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching_const_result.rs?ref=f562117788963a579b8438c75367d9946cae3b23", "patch": "@@ -0,0 +1,52 @@\n+// run-rustfix\n+\n+#![feature(const_if_match)]\n+#![feature(const_loop)]\n+#![feature(const_result)]\n+#![warn(clippy::redundant_pattern_matching)]\n+#![allow(unused)]\n+\n+// Test that results are linted with the feature enabled.\n+\n+const fn issue_5697() {\n+    if let Ok(_) = Ok::<i32, i32>(42) {}\n+\n+    if let Err(_) = Err::<i32, i32>(42) {}\n+\n+    while let Ok(_) = Ok::<i32, i32>(10) {}\n+\n+    while let Err(_) = Ok::<i32, i32>(10) {}\n+\n+    match Ok::<i32, i32>(42) {\n+        Ok(_) => true,\n+        Err(_) => false,\n+    };\n+\n+    match Err::<i32, i32>(42) {\n+        Ok(_) => false,\n+        Err(_) => true,\n+    };\n+\n+    // These should not be linted until `const_option` is implemented.\n+    // See https://github.com/rust-lang/rust/issues/67441\n+\n+    if let Some(_) = Some(42) {}\n+\n+    if let None = None::<()> {}\n+\n+    while let Some(_) = Some(42) {}\n+\n+    while let None = None::<()> {}\n+\n+    match Some(42) {\n+        Some(_) => true,\n+        None => false,\n+    };\n+\n+    match None::<()> {\n+        Some(_) => false,\n+        None => true,\n+    };\n+}\n+\n+fn main() {}"}, {"sha": "c32292f0eee8b473e47e8360d3ddde92dba55dbf", "filename": "tests/ui/redundant_pattern_matching_const_result.stderr", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/f562117788963a579b8438c75367d9946cae3b23/tests%2Fui%2Fredundant_pattern_matching_const_result.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f562117788963a579b8438c75367d9946cae3b23/tests%2Fui%2Fredundant_pattern_matching_const_result.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching_const_result.stderr?ref=f562117788963a579b8438c75367d9946cae3b23", "patch": "@@ -0,0 +1,46 @@\n+error: redundant pattern matching, consider using `is_ok()`\n+  --> $DIR/redundant_pattern_matching_const_result.rs:12:12\n+   |\n+LL |     if let Ok(_) = Ok::<i32, i32>(42) {}\n+   |     -------^^^^^--------------------- help: try this: `if Ok::<i32, i32>(42).is_ok()`\n+   |\n+   = note: `-D clippy::redundant-pattern-matching` implied by `-D warnings`\n+\n+error: redundant pattern matching, consider using `is_err()`\n+  --> $DIR/redundant_pattern_matching_const_result.rs:14:12\n+   |\n+LL |     if let Err(_) = Err::<i32, i32>(42) {}\n+   |     -------^^^^^^---------------------- help: try this: `if Err::<i32, i32>(42).is_err()`\n+\n+error: redundant pattern matching, consider using `is_ok()`\n+  --> $DIR/redundant_pattern_matching_const_result.rs:16:15\n+   |\n+LL |     while let Ok(_) = Ok::<i32, i32>(10) {}\n+   |     ----------^^^^^--------------------- help: try this: `while Ok::<i32, i32>(10).is_ok()`\n+\n+error: redundant pattern matching, consider using `is_err()`\n+  --> $DIR/redundant_pattern_matching_const_result.rs:18:15\n+   |\n+LL |     while let Err(_) = Ok::<i32, i32>(10) {}\n+   |     ----------^^^^^^--------------------- help: try this: `while Ok::<i32, i32>(10).is_err()`\n+\n+error: redundant pattern matching, consider using `is_ok()`\n+  --> $DIR/redundant_pattern_matching_const_result.rs:20:5\n+   |\n+LL | /     match Ok::<i32, i32>(42) {\n+LL | |         Ok(_) => true,\n+LL | |         Err(_) => false,\n+LL | |     };\n+   | |_____^ help: try this: `Ok::<i32, i32>(42).is_ok()`\n+\n+error: redundant pattern matching, consider using `is_err()`\n+  --> $DIR/redundant_pattern_matching_const_result.rs:25:5\n+   |\n+LL | /     match Err::<i32, i32>(42) {\n+LL | |         Ok(_) => false,\n+LL | |         Err(_) => true,\n+LL | |     };\n+   | |_____^ help: try this: `Err::<i32, i32>(42).is_err()`\n+\n+error: aborting due to 6 previous errors\n+"}]}