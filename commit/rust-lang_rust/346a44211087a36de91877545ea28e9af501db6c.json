{"sha": "346a44211087a36de91877545ea28e9af501db6c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0NmE0NDIxMTA4N2EzNmRlOTE4Nzc1NDVlYTI4ZTlhZjUwMWRiNmM=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2016-12-23T07:20:22Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2016-12-23T07:20:22Z"}, "message": "use same param name across methods", "tree": {"sha": "095ced3098e8c673bd6ac2053067bb84c29b8c8a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/095ced3098e8c673bd6ac2053067bb84c29b8c8a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/346a44211087a36de91877545ea28e9af501db6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/346a44211087a36de91877545ea28e9af501db6c", "html_url": "https://github.com/rust-lang/rust/commit/346a44211087a36de91877545ea28e9af501db6c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/346a44211087a36de91877545ea28e9af501db6c/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de69a3b7e5cf5c2a8d79fa93013ea581a75493ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/de69a3b7e5cf5c2a8d79fa93013ea581a75493ad", "html_url": "https://github.com/rust-lang/rust/commit/de69a3b7e5cf5c2a8d79fa93013ea581a75493ad"}], "stats": {"total": 21, "additions": 12, "deletions": 9}, "files": [{"sha": "ed7ad36cc8468d6f85166192885d3bcf50415a7e", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/346a44211087a36de91877545ea28e9af501db6c/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/346a44211087a36de91877545ea28e9af501db6c/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=346a44211087a36de91877545ea28e9af501db6c", "patch": "@@ -561,14 +561,14 @@ impl<'a> fmt::Display for HRef<'a> {\n     }\n }\n \n-fn fmt_type(t: &clean::Type, f: &mut fmt::Formatter, full_path: bool) -> fmt::Result {\n+fn fmt_type(t: &clean::Type, f: &mut fmt::Formatter, use_absolute: bool) -> fmt::Result {\n     match *t {\n         clean::Generic(ref name) => {\n             f.write_str(name)\n         }\n         clean::ResolvedPath{ did, ref typarams, ref path, is_generic } => {\n             // Paths like T::Output and Self::Output should be rendered with all segments\n-            resolved_path(f, did, path, is_generic, full_path)?;\n+            resolved_path(f, did, path, is_generic, use_absolute)?;\n             tybounds(f, typarams)\n         }\n         clean::Infer => write!(f, \"_\"),\n@@ -727,7 +727,7 @@ fn fmt_type(t: &clean::Type, f: &mut fmt::Formatter, full_path: bool) -> fmt::Re\n                 write!(f, \"{}::\", self_type)?;\n             }\n             let path = clean::Path::singleton(name.clone());\n-            resolved_path(f, did, &path, true, full_path)?;\n+            resolved_path(f, did, &path, true, use_absolute)?;\n \n             // FIXME: `typarams` are not rendered, and this seems bad?\n             drop(typarams);\n@@ -752,7 +752,10 @@ impl fmt::Display for clean::Type {\n     }\n }\n \n-fn fmt_impl(i: &clean::Impl, f: &mut fmt::Formatter, link_trait: bool, full: bool) -> fmt::Result {\n+fn fmt_impl(i: &clean::Impl,\n+            f: &mut fmt::Formatter,\n+            link_trait: bool,\n+            use_absolute: bool) -> fmt::Result {\n     let mut plain = String::new();\n \n     if f.alternate() {\n@@ -786,7 +789,7 @@ fn fmt_impl(i: &clean::Impl, f: &mut fmt::Formatter, link_trait: bool, full: boo\n         plain.push_str(\" for \");\n     }\n \n-    fmt_type(&i.for_, f, full)?;\n+    fmt_type(&i.for_, f, use_absolute)?;\n     plain.push_str(&format!(\"{:#}\", i.for_));\n \n     fmt::Display::fmt(&WhereClause(&i.generics, plain.len() + 1), f)?;\n@@ -802,8 +805,8 @@ impl fmt::Display for clean::Impl {\n // The difference from above is that trait is not hyperlinked.\n pub fn fmt_impl_for_trait_page(i: &clean::Impl,\n                                f: &mut fmt::Formatter,\n-                               disambiguate: bool) -> fmt::Result {\n-    fmt_impl(i, f, false, disambiguate)\n+                               use_absolute: bool) -> fmt::Result {\n+    fmt_impl(i, f, false, use_absolute)\n }\n \n impl fmt::Display for clean::Arguments {"}, {"sha": "dcf7515f87531beab35675eba92f0c9122ab3a3b", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/346a44211087a36de91877545ea28e9af501db6c/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/346a44211087a36de91877545ea28e9af501db6c/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=346a44211087a36de91877545ea28e9af501db6c", "patch": "@@ -2122,14 +2122,14 @@ fn item_trait(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n             write!(w, \"<li><code>\")?;\n             // If there's already another implementor that has the same abbridged name, use the\n             // full path, for example in `std::iter::ExactSizeIterator`\n-            let dissambiguate = if let clean::Type::ResolvedPath {\n+            let use_absolute = if let clean::Type::ResolvedPath {\n                 ref path, ..\n             } = implementor.impl_.for_ {\n                 implementor_count[path.last_name()] > 1\n             } else {\n                 false\n             };\n-            fmt_impl_for_trait_page(&implementor.impl_, w, dissambiguate)?;\n+            fmt_impl_for_trait_page(&implementor.impl_, w, use_absolute)?;\n             writeln!(w, \"</code></li>\")?;\n         }\n     }"}]}