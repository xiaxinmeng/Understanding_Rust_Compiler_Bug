{"sha": "02f5b5e0e253e61744e726ff3f190d2d1671f16e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyZjViNWUwZTI1M2U2MTc0NGU3MjZmZjNmMTkwZDJkMTY3MWYxNmU=", "commit": {"author": {"name": "mahdi-frms", "email": "mahdif1380@outlook.com", "date": "2021-08-08T12:51:34Z"}, "committer": {"name": "mahdi-frms", "email": "mahdif1380@outlook.com", "date": "2021-08-09T16:36:24Z"}, "message": "method generation assist: store owned ast nodes", "tree": {"sha": "5db305de4a7eb8949208db369bbc87474e8d8f83", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5db305de4a7eb8949208db369bbc87474e8d8f83"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/02f5b5e0e253e61744e726ff3f190d2d1671f16e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/02f5b5e0e253e61744e726ff3f190d2d1671f16e", "html_url": "https://github.com/rust-lang/rust/commit/02f5b5e0e253e61744e726ff3f190d2d1671f16e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/02f5b5e0e253e61744e726ff3f190d2d1671f16e/comments", "author": {"login": "mahdifrmz", "id": 62165556, "node_id": "MDQ6VXNlcjYyMTY1NTU2", "avatar_url": "https://avatars.githubusercontent.com/u/62165556?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mahdifrmz", "html_url": "https://github.com/mahdifrmz", "followers_url": "https://api.github.com/users/mahdifrmz/followers", "following_url": "https://api.github.com/users/mahdifrmz/following{/other_user}", "gists_url": "https://api.github.com/users/mahdifrmz/gists{/gist_id}", "starred_url": "https://api.github.com/users/mahdifrmz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mahdifrmz/subscriptions", "organizations_url": "https://api.github.com/users/mahdifrmz/orgs", "repos_url": "https://api.github.com/users/mahdifrmz/repos", "events_url": "https://api.github.com/users/mahdifrmz/events{/privacy}", "received_events_url": "https://api.github.com/users/mahdifrmz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mahdifrmz", "id": 62165556, "node_id": "MDQ6VXNlcjYyMTY1NTU2", "avatar_url": "https://avatars.githubusercontent.com/u/62165556?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mahdifrmz", "html_url": "https://github.com/mahdifrmz", "followers_url": "https://api.github.com/users/mahdifrmz/followers", "following_url": "https://api.github.com/users/mahdifrmz/following{/other_user}", "gists_url": "https://api.github.com/users/mahdifrmz/gists{/gist_id}", "starred_url": "https://api.github.com/users/mahdifrmz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mahdifrmz/subscriptions", "organizations_url": "https://api.github.com/users/mahdifrmz/orgs", "repos_url": "https://api.github.com/users/mahdifrmz/repos", "events_url": "https://api.github.com/users/mahdifrmz/events{/privacy}", "received_events_url": "https://api.github.com/users/mahdifrmz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6240b2dae291a5999163cf8204bdc1597f4c30c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/6240b2dae291a5999163cf8204bdc1597f4c30c1", "html_url": "https://github.com/rust-lang/rust/commit/6240b2dae291a5999163cf8204bdc1597f4c30c1"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "426f20cd15b9b35219ff35303a707f60ae98c613", "filename": "crates/ide_assists/src/handlers/generate_function.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/02f5b5e0e253e61744e726ff3f190d2d1671f16e/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02f5b5e0e253e61744e726ff3f190d2d1671f16e/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs?ref=02f5b5e0e253e61744e726ff3f190d2d1671f16e", "patch": "@@ -17,21 +17,21 @@ use crate::{\n     AssistContext, AssistId, AssistKind, Assists,\n };\n \n-enum FuncExpr<'a> {\n-    Func(&'a ast::CallExpr),\n-    Method(&'a ast::MethodCallExpr),\n+enum FuncExpr {\n+    Func(ast::CallExpr),\n+    Method(ast::MethodCallExpr),\n }\n \n-impl<'a> FuncExpr<'a> {\n+impl FuncExpr {\n     fn arg_list(&self) -> Option<ArgList> {\n-        match *self {\n+        match self {\n             FuncExpr::Func(fn_call) => fn_call.arg_list(),\n             FuncExpr::Method(m_call) => m_call.arg_list(),\n         }\n     }\n \n     fn syntax(&self) -> &SyntaxNode {\n-        match *self {\n+        match self {\n             FuncExpr::Func(fn_call) => fn_call.syntax(),\n             FuncExpr::Method(m_call) => m_call.syntax(),\n         }\n@@ -212,12 +212,12 @@ impl FunctionBuilder {\n                 file = in_file;\n                 target\n             }\n-            None => next_space_for_fn_after_call_site(FuncExpr::Func(call))?,\n+            None => next_space_for_fn_after_call_site(FuncExpr::Func(call.clone()))?,\n         };\n         let needs_pub = target_module.is_some();\n         let target_module = target_module.or_else(|| ctx.sema.scope(target.syntax()).module())?;\n         let fn_name = fn_name(path)?;\n-        let (type_params, params) = fn_args(ctx, target_module, FuncExpr::Func(call))?;\n+        let (type_params, params) = fn_args(ctx, target_module, FuncExpr::Func(call.clone()))?;\n \n         let await_expr = call.syntax().parent().and_then(ast::AwaitExpr::cast);\n         let is_async = await_expr.is_some();\n@@ -287,7 +287,7 @@ impl FunctionBuilder {\n         let needs_pub = !module_is_descendant(&current_module, &target_module, ctx);\n \n         let fn_name = make::name(&name.text());\n-        let (type_params, params) = fn_args(ctx, target_module, FuncExpr::Method(call))?;\n+        let (type_params, params) = fn_args(ctx, target_module, FuncExpr::Method(call.clone()))?;\n \n         let await_expr = call.syntax().parent().and_then(ast::AwaitExpr::cast);\n         let is_async = await_expr.is_some();"}]}