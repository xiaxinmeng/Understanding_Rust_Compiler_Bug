{"sha": "6df9df7e36ca40e8e30e107761e8d2763fc13864", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkZjlkZjdlMzZjYTQwZThlMzBlMTA3NzYxZThkMjc2M2ZjMTM4NjQ=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-07-19T09:37:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-19T09:37:45Z"}, "message": "Rollup merge of #87236 - sunfishcode:avoid-locking-args, r=joshtriplett\n\nSimplify command-line argument initialization on unix\n\nSimplify Rust's command-line argument initialization code on unix:\n - The cleanup code isn't needed, because it was just zeroing out non-owning variables at runtime cleanup time. After 91c3eee1735ad72b579f99cbb6919c3471747d94, Rust's command-line initialization code on unix no longer allocates `CString`s and a `Vec` at startup time.\n - The `Mutex` isn't needed; if there's somehow a call to `args()` before argument initialization has happened, the code returns return an empty list, which we can do with a null check.\n\nWith these changes, a simple cdylib that doesn't use threads avoids getting `pthread_mutex_lock`/`pthread_mutex_unlock` in its symbol table.", "tree": {"sha": "73cfe23ff1117e6215513c3150d929f271d64188", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/73cfe23ff1117e6215513c3150d929f271d64188"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6df9df7e36ca40e8e30e107761e8d2763fc13864", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg9UfpCRBK7hj4Ov3rIwAAROwIADJ4fXeN+oxFDGrtWqaHiMsC\nhBvYcSZfeYsA7MOU2YW1amla8MkrT1sl9hRgr8XGSJMEYy9Hv0YzJjXyCEOjl/yh\nGLUFwZ6d9Ihll7B9TVZD0jylv4RkWLmpcrKJu3p+rbNviUC+C+ZsscNSvo4q4H9V\nZ4Lisv+DObZxGflTqUVS7DEE8Ay3ZxojloSGn9hv0oRYEPT/eUUrATKuLjaUgDT4\n/eKbRzM3YBM2wKobikshoWbA+ge8y4gFPacVW52DkE9CybAvWU42XOHvVV/G6gqN\nHj4B2MdjcivD8cOhX4HO1+9BF6oaX1pHyJ0Ph8EGYdx0H1V/5V8sNmJqkUMUPHQ=\n=OmgE\n-----END PGP SIGNATURE-----\n", "payload": "tree 73cfe23ff1117e6215513c3150d929f271d64188\nparent 65b7aa98c7b3575230eb41e95c7444f0056811dd\nparent c3df0ae97f9c03ce5937b9677c27da891a4a0fe0\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1626687465 +0200\ncommitter GitHub <noreply@github.com> 1626687465 +0200\n\nRollup merge of #87236 - sunfishcode:avoid-locking-args, r=joshtriplett\n\nSimplify command-line argument initialization on unix\n\nSimplify Rust's command-line argument initialization code on unix:\n - The cleanup code isn't needed, because it was just zeroing out non-owning variables at runtime cleanup time. After 91c3eee1735ad72b579f99cbb6919c3471747d94, Rust's command-line initialization code on unix no longer allocates `CString`s and a `Vec` at startup time.\n - The `Mutex` isn't needed; if there's somehow a call to `args()` before argument initialization has happened, the code returns return an empty list, which we can do with a null check.\n\nWith these changes, a simple cdylib that doesn't use threads avoids getting `pthread_mutex_lock`/`pthread_mutex_unlock` in its symbol table.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6df9df7e36ca40e8e30e107761e8d2763fc13864", "html_url": "https://github.com/rust-lang/rust/commit/6df9df7e36ca40e8e30e107761e8d2763fc13864", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6df9df7e36ca40e8e30e107761e8d2763fc13864/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65b7aa98c7b3575230eb41e95c7444f0056811dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/65b7aa98c7b3575230eb41e95c7444f0056811dd", "html_url": "https://github.com/rust-lang/rust/commit/65b7aa98c7b3575230eb41e95c7444f0056811dd"}, {"sha": "c3df0ae97f9c03ce5937b9677c27da891a4a0fe0", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3df0ae97f9c03ce5937b9677c27da891a4a0fe0", "html_url": "https://github.com/rust-lang/rust/commit/c3df0ae97f9c03ce5937b9677c27da891a4a0fe0"}], "stats": {"total": 25, "additions": 3, "deletions": 22}, "files": [{"sha": "ad93fa610c4819fe7d7c7c4acf32a67d4ab978a7", "filename": "library/std/src/sys/unix/args.rs", "status": "modified", "additions": 3, "deletions": 21, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6df9df7e36ca40e8e30e107761e8d2763fc13864/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6df9df7e36ca40e8e30e107761e8d2763fc13864/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fargs.rs?ref=6df9df7e36ca40e8e30e107761e8d2763fc13864", "patch": "@@ -14,11 +14,6 @@ pub unsafe fn init(argc: isize, argv: *const *const u8) {\n     imp::init(argc, argv)\n }\n \n-/// One-time global cleanup.\n-pub unsafe fn cleanup() {\n-    imp::cleanup()\n-}\n-\n /// Returns the command line arguments\n pub fn args() -> Args {\n     imp::args()\n@@ -82,16 +77,10 @@ mod imp {\n     use crate::ptr;\n     use crate::sync::atomic::{AtomicIsize, AtomicPtr, Ordering};\n \n-    use crate::sys_common::mutex::StaticMutex;\n-\n     static ARGC: AtomicIsize = AtomicIsize::new(0);\n     static ARGV: AtomicPtr<*const u8> = AtomicPtr::new(ptr::null_mut());\n-    // We never call `ENV_LOCK.init()`, so it is UB to attempt to\n-    // acquire this mutex reentrantly!\n-    static LOCK: StaticMutex = StaticMutex::new();\n \n     unsafe fn really_init(argc: isize, argv: *const *const u8) {\n-        let _guard = LOCK.lock();\n         ARGC.store(argc, Ordering::Relaxed);\n         ARGV.store(argv as *mut _, Ordering::Relaxed);\n     }\n@@ -127,21 +116,16 @@ mod imp {\n         init_wrapper\n     };\n \n-    pub unsafe fn cleanup() {\n-        let _guard = LOCK.lock();\n-        ARGC.store(0, Ordering::Relaxed);\n-        ARGV.store(ptr::null_mut(), Ordering::Relaxed);\n-    }\n-\n     pub fn args() -> Args {\n         Args { iter: clone().into_iter() }\n     }\n \n     fn clone() -> Vec<OsString> {\n         unsafe {\n-            let _guard = LOCK.lock();\n-            let argc = ARGC.load(Ordering::Relaxed);\n+            // Load ARGC and ARGV without a lock. If the store to either ARGV or\n+            // ARGC isn't visible yet, we'll return an empty argument list.\n             let argv = ARGV.load(Ordering::Relaxed);\n+            let argc = if argv.is_null() { 0 } else { ARGC.load(Ordering::Relaxed) };\n             (0..argc)\n                 .map(|i| {\n                     let cstr = CStr::from_ptr(*argv.offset(i) as *const libc::c_char);\n@@ -159,8 +143,6 @@ mod imp {\n \n     pub unsafe fn init(_argc: isize, _argv: *const *const u8) {}\n \n-    pub fn cleanup() {}\n-\n     #[cfg(target_os = \"macos\")]\n     pub fn args() -> Args {\n         use crate::os::unix::prelude::*;"}, {"sha": "9e553ec7682b1a3b82a98f8636232ddcb35501fd", "filename": "library/std/src/sys/unix/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6df9df7e36ca40e8e30e107761e8d2763fc13864/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6df9df7e36ca40e8e30e107761e8d2763fc13864/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs?ref=6df9df7e36ca40e8e30e107761e8d2763fc13864", "patch": "@@ -123,7 +123,6 @@ pub unsafe fn init(argc: isize, argv: *const *const u8) {\n // SAFETY: must be called only once during runtime cleanup.\n // NOTE: this is not guaranteed to run, for example when the program aborts.\n pub unsafe fn cleanup() {\n-    args::cleanup();\n     stack_overflow::cleanup();\n }\n "}]}