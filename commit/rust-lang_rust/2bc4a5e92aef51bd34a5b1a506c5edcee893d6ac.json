{"sha": "2bc4a5e92aef51bd34a5b1a506c5edcee893d6ac", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiYzRhNWU5MmFlZjUxYmQzNGE1YjFhNTA2YzVlZGNlZTg5M2Q2YWM=", "commit": {"author": {"name": "wickerwaka", "email": "martin.donlon@gmail.com", "date": "2014-08-30T18:27:02Z"}, "committer": {"name": "wickerwaka", "email": "martin.donlon@gmail.com", "date": "2014-09-04T14:38:53Z"}, "message": "Center alignment for fmt\n\nUse '^' to specify center alignment in format strings.\n\nfmt!( \"[{:^5s}]\", \"Hi\" ) -> \"[ Hi  ]\"\nfmt!( \"[{:^5s}]\", \"H\" )  -> \"[  H  ]\"\nfmt!( \"[{:^5d}]\", 1i )   -> \"[  1  ]\"\nfmt!( \"[{:^5d}]\", -1i )  -> \"[ -1  ]\"\nfmt!( \"[{:^6d}]\", 1i )   -> \"[  1   ]\"\nfmt!( \"[{:^6d}]\", -1i )  -> \"[  -1  ]\"\n\nIf the padding is odd then the padding on the right will be one\ncharacter longer than the padding on the left.\n\nTuples squashed", "tree": {"sha": "3ae6b60182e140f23f3d1cc772349fb5eb29b3f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ae6b60182e140f23f3d1cc772349fb5eb29b3f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2bc4a5e92aef51bd34a5b1a506c5edcee893d6ac", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2bc4a5e92aef51bd34a5b1a506c5edcee893d6ac", "html_url": "https://github.com/rust-lang/rust/commit/2bc4a5e92aef51bd34a5b1a506c5edcee893d6ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2bc4a5e92aef51bd34a5b1a506c5edcee893d6ac/comments", "author": null, "committer": null, "parents": [{"sha": "6d8b5c9f7d1347b715242a837fba87a01ae61d7e", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d8b5c9f7d1347b715242a837fba87a01ae61d7e", "html_url": "https://github.com/rust-lang/rust/commit/6d8b5c9f7d1347b715242a837fba87a01ae61d7e"}], "stats": {"total": 42, "additions": 33, "deletions": 9}, "files": [{"sha": "7c4494358b1bf8055d281e981f9cd04cfa24f217", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/2bc4a5e92aef51bd34a5b1a506c5edcee893d6ac/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bc4a5e92aef51bd34a5b1a506c5edcee893d6ac/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=2bc4a5e92aef51bd34a5b1a506c5edcee893d6ac", "patch": "@@ -461,19 +461,28 @@ impl<'a> Formatter<'a> {\n         use char::Char;\n         let align = match self.align {\n             rt::AlignUnknown => default,\n-            rt::AlignLeft | rt::AlignRight => self.align\n+            _ => self.align\n         };\n-        if align == rt::AlignLeft {\n-            try!(f(self));\n-        }\n+\n+        let (pre_pad, post_pad) = match align {\n+            rt::AlignLeft => (0u, padding),\n+            rt::AlignRight | rt::AlignUnknown => (padding, 0u),\n+            rt::AlignCenter => (padding / 2, (padding + 1) / 2),\n+        };\n+\n         let mut fill = [0u8, ..4];\n         let len = self.fill.encode_utf8(fill).unwrap_or(0);\n-        for _ in range(0, padding) {\n+\n+        for _ in range(0, pre_pad) {\n             try!(self.buf.write(fill.slice_to(len)));\n         }\n-        if align == rt::AlignRight {\n-            try!(f(self));\n+\n+        try!(f(self));\n+\n+        for _ in range(0, post_pad) {\n+            try!(self.buf.write(fill.slice_to(len)));\n         }\n+\n         Ok(())\n     }\n "}, {"sha": "1f5449130ecf34b94b0787154cc7a9acf6a44299", "filename": "src/libcore/fmt/rt.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2bc4a5e92aef51bd34a5b1a506c5edcee893d6ac/src%2Flibcore%2Ffmt%2Frt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bc4a5e92aef51bd34a5b1a506c5edcee893d6ac/src%2Flibcore%2Ffmt%2Frt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Frt.rs?ref=2bc4a5e92aef51bd34a5b1a506c5edcee893d6ac", "patch": "@@ -43,6 +43,8 @@ pub enum Alignment {\n     AlignLeft,\n     /// Indication that contents should be right-aligned.\n     AlignRight,\n+    /// Indication that contents should be center-aligned.\n+    AlignCenter,\n     /// No alignment was requested.\n     AlignUnknown,\n }"}, {"sha": "9272369f73cf6eb89ec8140b49c9eff6a4d37ca6", "filename": "src/libfmt_macros/lib.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2bc4a5e92aef51bd34a5b1a506c5edcee893d6ac/src%2Flibfmt_macros%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bc4a5e92aef51bd34a5b1a506c5edcee893d6ac/src%2Flibfmt_macros%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfmt_macros%2Flib.rs?ref=2bc4a5e92aef51bd34a5b1a506c5edcee893d6ac", "patch": "@@ -81,6 +81,8 @@ pub enum Alignment {\n     AlignLeft,\n     /// The value will be aligned to the right.\n     AlignRight,\n+    /// The value will be aligned in the center.\n+    AlignCenter,\n     /// The value will take on a default alignment.\n     AlignUnknown,\n }\n@@ -279,7 +281,7 @@ impl<'a> Parser<'a> {\n         match self.cur.clone().next() {\n             Some((_, c)) => {\n                 match self.cur.clone().skip(1).next() {\n-                    Some((_, '>')) | Some((_, '<')) => {\n+                    Some((_, '>')) | Some((_, '<')) | Some((_, '^')) => {\n                         spec.fill = Some(c);\n                         self.cur.next();\n                     }\n@@ -293,6 +295,8 @@ impl<'a> Parser<'a> {\n             spec.align = AlignLeft;\n         } else if self.consume('>') {\n             spec.align = AlignRight;\n+        } else if self.consume('^') {\n+            spec.align = AlignCenter;\n         }\n         // Sign flags\n         if self.consume('+') {"}, {"sha": "f69f94c4db6ce8a409f26563a7c8d5ed86ea7e03", "filename": "src/libstd/fmt.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2bc4a5e92aef51bd34a5b1a506c5edcee893d6ac/src%2Flibstd%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bc4a5e92aef51bd34a5b1a506c5edcee893d6ac/src%2Flibstd%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffmt.rs?ref=2bc4a5e92aef51bd34a5b1a506c5edcee893d6ac", "patch": "@@ -333,7 +333,7 @@ argument := integer | identifier\n \n format_spec := [[fill]align][sign]['#'][0][width]['.' precision][type]\n fill := character\n-align := '<' | '>'\n+align := '<' | '^' | '>'\n sign := '+' | '-'\n width := count\n precision := count | '*'\n@@ -357,6 +357,7 @@ parameter. This indicates that if the value being formatted is smaller than\n are specified by `fill`, and the alignment can be one of two options:\n \n * `<` - the argument is left-aligned in `width` columns\n+* `^` - the argument is center-aligned in `width` columns\n * `>` - the argument is right-aligned in `width` columns\n \n ### Sign/#/0"}, {"sha": "aa2c51c02256f2742a6d591b5048a5259a7880a6", "filename": "src/libsyntax/ext/format.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2bc4a5e92aef51bd34a5b1a506c5edcee893d6ac/src%2Flibsyntax%2Fext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bc4a5e92aef51bd34a5b1a506c5edcee893d6ac/src%2Flibsyntax%2Fext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fformat.rs?ref=2bc4a5e92aef51bd34a5b1a506c5edcee893d6ac", "patch": "@@ -430,6 +430,9 @@ impl<'a, 'b> Context<'a, 'b> {\n                     parse::AlignRight => {\n                         self.ecx.path_global(sp, self.rtpath(\"AlignRight\"))\n                     }\n+                    parse::AlignCenter => {\n+                        self.ecx.path_global(sp, self.rtpath(\"AlignCenter\"))\n+                    }\n                     parse::AlignUnknown => {\n                         self.ecx.path_global(sp, self.rtpath(\"AlignUnknown\"))\n                     }"}, {"sha": "d582209a79eb1d36886ec70b44ac4dc8ca8d4cfc", "filename": "src/test/run-pass/ifmt.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2bc4a5e92aef51bd34a5b1a506c5edcee893d6ac/src%2Ftest%2Frun-pass%2Fifmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bc4a5e92aef51bd34a5b1a506c5edcee893d6ac/src%2Ftest%2Frun-pass%2Fifmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fifmt.rs?ref=2bc4a5e92aef51bd34a5b1a506c5edcee893d6ac", "patch": "@@ -90,11 +90,16 @@ pub fn main() {\n     t!(format!(\"{:4s}\", \"a\"), \"a   \");\n     t!(format!(\"{:>4s}\", \"a\"), \"   a\");\n     t!(format!(\"{:<4s}\", \"a\"), \"a   \");\n+    t!(format!(\"{:^5s}\", \"a\"),  \"  a  \");\n+    t!(format!(\"{:^5s}\", \"aa\"), \" aa  \");\n+    t!(format!(\"{:^4s}\", \"a\"),  \" a  \");\n+    t!(format!(\"{:^4s}\", \"aa\"), \" aa \");\n     t!(format!(\"{:.4s}\", \"a\"), \"a\");\n     t!(format!(\"{:4.4s}\", \"a\"), \"a   \");\n     t!(format!(\"{:4.4s}\", \"aaaaaaaaaaaaaaaaaa\"), \"aaaa\");\n     t!(format!(\"{:<4.4s}\", \"aaaaaaaaaaaaaaaaaa\"), \"aaaa\");\n     t!(format!(\"{:>4.4s}\", \"aaaaaaaaaaaaaaaaaa\"), \"aaaa\");\n+    t!(format!(\"{:^4.4s}\", \"aaaaaaaaaaaaaaaaaa\"), \"aaaa\");\n     t!(format!(\"{:>10.4s}\", \"aaaaaaaaaaaaaaaaaa\"), \"aaaa\");\n     t!(format!(\"{:2.4s}\", \"aaaaa\"), \"aaaa\");\n     t!(format!(\"{:2.4s}\", \"aaaa\"), \"aaaa\");"}]}