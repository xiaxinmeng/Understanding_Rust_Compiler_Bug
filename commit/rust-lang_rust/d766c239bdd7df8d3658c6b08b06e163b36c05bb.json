{"sha": "d766c239bdd7df8d3658c6b08b06e163b36c05bb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3NjZjMjM5YmRkN2RmOGQzNjU4YzZiMDhiMDZlMTYzYjM2YzA1YmI=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-09-25T00:29:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-25T00:29:31Z"}, "message": "Rollup merge of #76724 - ecstatic-morse:dataflow-pass-names, r=lcnr\n\nAllow a unique name to be assigned to dataflow graphviz output\n\nPreviously, if the same analysis were invoked multiple times in a single compilation session, the graphviz output for later runs would overwrite that of previous runs. Allow callers to add a unique identifier to each run so this can be avoided.", "tree": {"sha": "fad28dbc2dc8758cf9d501f3e45d574f18fac54a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fad28dbc2dc8758cf9d501f3e45d574f18fac54a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d766c239bdd7df8d3658c6b08b06e163b36c05bb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfbTnsCRBK7hj4Ov3rIwAAdHIIAA788sG9V6S9AE+sLNg8/Xt0\nckSjedai4jFROX6D1C7NTS1GyvqC5NYeAheONztmdu37loUrJZ1+WUH/nJWowxxc\nsDWX9dGfSq82oE9CQyoQLquI/PHjVj4IIF+2MfOcloKgKhIWAzLPvd6Nvpxbytpk\n/tY8vAFK2O3Z2T/bxQWbrSEbjUQun+MMVIsY+ewB+CxBeewHewevTEoulhos/ROA\nXlOqkVhsPfm5EGwS95uu9C2AxkzCwzsKajifTrTPRxsOYHI2moQI1QtfP7MDh7Yg\nQvXXqNd2xXb5YTHw21SqZcxR50V1v8JNLKyJi9JK/cU3L4cWD5C/2pvaDe7cKeY=\n=dYui\n-----END PGP SIGNATURE-----\n", "payload": "tree fad28dbc2dc8758cf9d501f3e45d574f18fac54a\nparent 88e36935701f1886ba416ec4ee77a53b02f38277\nparent 0475c365fedb8243219247db1186d590032b550e\nauthor Jonas Schievink <jonasschievink@gmail.com> 1600993771 +0200\ncommitter GitHub <noreply@github.com> 1600993771 +0200\n\nRollup merge of #76724 - ecstatic-morse:dataflow-pass-names, r=lcnr\n\nAllow a unique name to be assigned to dataflow graphviz output\n\nPreviously, if the same analysis were invoked multiple times in a single compilation session, the graphviz output for later runs would overwrite that of previous runs. Allow callers to add a unique identifier to each run so this can be avoided.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d766c239bdd7df8d3658c6b08b06e163b36c05bb", "html_url": "https://github.com/rust-lang/rust/commit/d766c239bdd7df8d3658c6b08b06e163b36c05bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d766c239bdd7df8d3658c6b08b06e163b36c05bb/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88e36935701f1886ba416ec4ee77a53b02f38277", "url": "https://api.github.com/repos/rust-lang/rust/commits/88e36935701f1886ba416ec4ee77a53b02f38277", "html_url": "https://github.com/rust-lang/rust/commit/88e36935701f1886ba416ec4ee77a53b02f38277"}, {"sha": "0475c365fedb8243219247db1186d590032b550e", "url": "https://api.github.com/repos/rust-lang/rust/commits/0475c365fedb8243219247db1186d590032b550e", "html_url": "https://github.com/rust-lang/rust/commit/0475c365fedb8243219247db1186d590032b550e"}], "stats": {"total": 38, "additions": 34, "deletions": 4}, "files": [{"sha": "e4237482f47fa8efabc4e737a24dff1d27c968a0", "filename": "compiler/rustc_mir/src/borrow_check/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d766c239bdd7df8d3658c6b08b06e163b36c05bb/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d766c239bdd7df8d3658c6b08b06e163b36c05bb/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmod.rs?ref=d766c239bdd7df8d3658c6b08b06e163b36c05bb", "patch": "@@ -205,6 +205,7 @@ fn do_mir_borrowck<'a, 'tcx>(\n \n     let mut flow_inits = MaybeInitializedPlaces::new(tcx, &body, &mdpe)\n         .into_engine(tcx, &body, def.did.to_def_id())\n+        .pass_name(\"borrowck\")\n         .iterate_to_fixpoint()\n         .into_results_cursor(&body);\n \n@@ -264,12 +265,15 @@ fn do_mir_borrowck<'a, 'tcx>(\n \n     let flow_borrows = Borrows::new(tcx, &body, regioncx.clone(), &borrow_set)\n         .into_engine(tcx, &body, def.did.to_def_id())\n+        .pass_name(\"borrowck\")\n         .iterate_to_fixpoint();\n     let flow_uninits = MaybeUninitializedPlaces::new(tcx, &body, &mdpe)\n         .into_engine(tcx, &body, def.did.to_def_id())\n+        .pass_name(\"borrowck\")\n         .iterate_to_fixpoint();\n     let flow_ever_inits = EverInitializedPlaces::new(tcx, &body, &mdpe)\n         .into_engine(tcx, &body, def.did.to_def_id())\n+        .pass_name(\"borrowck\")\n         .iterate_to_fixpoint();\n \n     let movable_generator = match tcx.hir().get(id) {"}, {"sha": "f39c78f503daed8aff0461584a715fdd38a6620f", "filename": "compiler/rustc_mir/src/dataflow/framework/engine.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d766c239bdd7df8d3658c6b08b06e163b36c05bb/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fframework%2Fengine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d766c239bdd7df8d3658c6b08b06e163b36c05bb/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fframework%2Fengine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fframework%2Fengine.rs?ref=d766c239bdd7df8d3658c6b08b06e163b36c05bb", "patch": "@@ -84,6 +84,7 @@ where\n     def_id: DefId,\n     dead_unwinds: Option<&'a BitSet<BasicBlock>>,\n     entry_sets: IndexVec<BasicBlock, A::Domain>,\n+    pass_name: Option<&'static str>,\n     analysis: A,\n \n     /// Cached, cumulative transfer functions for each block.\n@@ -174,6 +175,7 @@ where\n             body,\n             def_id,\n             dead_unwinds: None,\n+            pass_name: None,\n             entry_sets,\n             apply_trans_for_block,\n         }\n@@ -189,6 +191,15 @@ where\n         self\n     }\n \n+    /// Adds an identifier to the graphviz output for this particular run of a dataflow analysis.\n+    ///\n+    /// Some analyses are run multiple times in the compilation pipeline. Give them a `pass_name`\n+    /// to differentiate them. Otherwise, only the results for the latest run will be saved.\n+    pub fn pass_name(mut self, name: &'static str) -> Self {\n+        self.pass_name = Some(name);\n+        self\n+    }\n+\n     /// Computes the fixpoint for this dataflow problem and returns it.\n     pub fn iterate_to_fixpoint(self) -> Results<'tcx, A>\n     where\n@@ -202,6 +213,7 @@ where\n             mut entry_sets,\n             tcx,\n             apply_trans_for_block,\n+            pass_name,\n             ..\n         } = self;\n \n@@ -249,7 +261,7 @@ where\n \n         let results = Results { analysis, entry_sets };\n \n-        let res = write_graphviz_results(tcx, def_id, &body, &results);\n+        let res = write_graphviz_results(tcx, def_id, &body, &results, pass_name);\n         if let Err(e) = res {\n             warn!(\"Failed to write graphviz dataflow results: {}\", e);\n         }\n@@ -267,6 +279,7 @@ fn write_graphviz_results<A>(\n     def_id: DefId,\n     body: &mir::Body<'tcx>,\n     results: &Results<'tcx, A>,\n+    pass_name: Option<&'static str>,\n ) -> std::io::Result<()>\n where\n     A: Analysis<'tcx>,\n@@ -285,12 +298,17 @@ where\n         None if tcx.sess.opts.debugging_opts.dump_mir_dataflow\n             && dump_enabled(tcx, A::NAME, def_id) =>\n         {\n+            // FIXME: Use some variant of `pretty::dump_path` for this\n             let mut path = PathBuf::from(&tcx.sess.opts.debugging_opts.dump_mir_dir);\n \n+            let crate_name = tcx.crate_name(def_id.krate);\n             let item_name = ty::print::with_forced_impl_filename_line(|| {\n                 tcx.def_path(def_id).to_filename_friendly_no_crate()\n             });\n-            path.push(format!(\"rustc.{}.{}.dot\", item_name, A::NAME));\n+\n+            let pass_name = pass_name.map(|s| format!(\".{}\", s)).unwrap_or_default();\n+\n+            path.push(format!(\"{}.{}.{}{}.dot\", crate_name, item_name, A::NAME, pass_name));\n             path\n         }\n "}, {"sha": "dc28ba46d7cbbe0cf7fca6a3c9e1e24fbd34c7b3", "filename": "compiler/rustc_mir/src/transform/check_consts/validation.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d766c239bdd7df8d3658c6b08b06e163b36c05bb/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d766c239bdd7df8d3658c6b08b06e163b36c05bb/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=d766c239bdd7df8d3658c6b08b06e163b36c05bb", "patch": "@@ -59,6 +59,7 @@ impl Qualifs<'mir, 'tcx> {\n             MaybeMutBorrowedLocals::mut_borrows_only(tcx, &body, param_env)\n                 .unsound_ignore_borrow_on_drop()\n                 .into_engine(tcx, &body, def_id.to_def_id())\n+                .pass_name(\"const_qualification\")\n                 .iterate_to_fixpoint()\n                 .into_results_cursor(&body)\n         });"}, {"sha": "a8b2ee5705f1f16590bae7f2e681f0ca1e3cd272", "filename": "compiler/rustc_mir/src/transform/elaborate_drops.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d766c239bdd7df8d3658c6b08b06e163b36c05bb/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d766c239bdd7df8d3658c6b08b06e163b36c05bb/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Felaborate_drops.rs?ref=d766c239bdd7df8d3658c6b08b06e163b36c05bb", "patch": "@@ -44,13 +44,15 @@ impl<'tcx> MirPass<'tcx> for ElaborateDrops {\n             let inits = MaybeInitializedPlaces::new(tcx, body, &env)\n                 .into_engine(tcx, body, def_id)\n                 .dead_unwinds(&dead_unwinds)\n+                .pass_name(\"elaborate_drops\")\n                 .iterate_to_fixpoint()\n                 .into_results_cursor(body);\n \n             let uninits = MaybeUninitializedPlaces::new(tcx, body, &env)\n                 .mark_inactive_variants_as_uninit()\n                 .into_engine(tcx, body, def_id)\n                 .dead_unwinds(&dead_unwinds)\n+                .pass_name(\"elaborate_drops\")\n                 .iterate_to_fixpoint()\n                 .into_results_cursor(body);\n \n@@ -83,6 +85,7 @@ fn find_dead_unwinds<'tcx>(\n     let mut dead_unwinds = BitSet::new_empty(body.basic_blocks().len());\n     let mut flow_inits = MaybeInitializedPlaces::new(tcx, body, &env)\n         .into_engine(tcx, body, def_id)\n+        .pass_name(\"find_dead_unwinds\")\n         .iterate_to_fixpoint()\n         .into_results_cursor(body);\n     for (bb, bb_data) in body.basic_blocks().iter_enumerated() {"}, {"sha": "1fffcf81515377dcc039e80e1bb863c5de6b7f2e", "filename": "compiler/rustc_mir/src/transform/generator.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d766c239bdd7df8d3658c6b08b06e163b36c05bb/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d766c239bdd7df8d3658c6b08b06e163b36c05bb/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fgenerator.rs?ref=d766c239bdd7df8d3658c6b08b06e163b36c05bb", "patch": "@@ -467,8 +467,10 @@ fn locals_live_across_suspend_points(\n \n     // Calculate the MIR locals which have been previously\n     // borrowed (even if they are still active).\n-    let borrowed_locals_results =\n-        MaybeBorrowedLocals::all_borrows().into_engine(tcx, body_ref, def_id).iterate_to_fixpoint();\n+    let borrowed_locals_results = MaybeBorrowedLocals::all_borrows()\n+        .into_engine(tcx, body_ref, def_id)\n+        .pass_name(\"generator\")\n+        .iterate_to_fixpoint();\n \n     let mut borrowed_locals_cursor =\n         dataflow::ResultsCursor::new(body_ref, &borrowed_locals_results);\n@@ -484,6 +486,7 @@ fn locals_live_across_suspend_points(\n     // Calculate the liveness of MIR locals ignoring borrows.\n     let mut liveness = MaybeLiveLocals\n         .into_engine(tcx, body_ref, def_id)\n+        .pass_name(\"generator\")\n         .iterate_to_fixpoint()\n         .into_results_cursor(body_ref);\n "}, {"sha": "1615f19237096f4c2816a28673f53b6012fdbd96", "filename": "src/tools/clippy/clippy_lints/src/redundant_clone.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d766c239bdd7df8d3658c6b08b06e163b36c05bb/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d766c239bdd7df8d3658c6b08b06e163b36c05bb/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_clone.rs?ref=d766c239bdd7df8d3658c6b08b06e163b36c05bb", "patch": "@@ -87,6 +87,7 @@ impl<'tcx> LateLintPass<'tcx> for RedundantClone {\n \n         let maybe_storage_live_result = MaybeStorageLive\n             .into_engine(cx.tcx, mir, def_id.to_def_id())\n+            .pass_name(\"redundant_clone\")\n             .iterate_to_fixpoint()\n             .into_results_cursor(mir);\n         let mut possible_borrower = {"}]}