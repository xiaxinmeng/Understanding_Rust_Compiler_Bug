{"sha": "79114c67b10698d6b73b84bdd782d7407752d3ca", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5MTE0YzY3YjEwNjk4ZDZiNzNiODRiZGQ3ODJkNzQwNzc1MmQzY2E=", "commit": {"author": {"name": "Ville Penttinen", "email": "villem.penttinen@gmail.com", "date": "2019-02-26T19:30:46Z"}, "committer": {"name": "Ville Penttinen", "email": "villem.penttinen@gmail.com", "date": "2019-02-26T19:30:46Z"}, "message": "Replace visit_fn with crate::completion::function_label", "tree": {"sha": "78df376192bd3d8bf44100de7b414b26904763e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/78df376192bd3d8bf44100de7b414b26904763e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/79114c67b10698d6b73b84bdd782d7407752d3ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/79114c67b10698d6b73b84bdd782d7407752d3ca", "html_url": "https://github.com/rust-lang/rust/commit/79114c67b10698d6b73b84bdd782d7407752d3ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/79114c67b10698d6b73b84bdd782d7407752d3ca/comments", "author": {"login": "vipentti", "id": 4726680, "node_id": "MDQ6VXNlcjQ3MjY2ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/4726680?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vipentti", "html_url": "https://github.com/vipentti", "followers_url": "https://api.github.com/users/vipentti/followers", "following_url": "https://api.github.com/users/vipentti/following{/other_user}", "gists_url": "https://api.github.com/users/vipentti/gists{/gist_id}", "starred_url": "https://api.github.com/users/vipentti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vipentti/subscriptions", "organizations_url": "https://api.github.com/users/vipentti/orgs", "repos_url": "https://api.github.com/users/vipentti/repos", "events_url": "https://api.github.com/users/vipentti/events{/privacy}", "received_events_url": "https://api.github.com/users/vipentti/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vipentti", "id": 4726680, "node_id": "MDQ6VXNlcjQ3MjY2ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/4726680?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vipentti", "html_url": "https://github.com/vipentti", "followers_url": "https://api.github.com/users/vipentti/followers", "following_url": "https://api.github.com/users/vipentti/following{/other_user}", "gists_url": "https://api.github.com/users/vipentti/gists{/gist_id}", "starred_url": "https://api.github.com/users/vipentti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vipentti/subscriptions", "organizations_url": "https://api.github.com/users/vipentti/orgs", "repos_url": "https://api.github.com/users/vipentti/repos", "events_url": "https://api.github.com/users/vipentti/events{/privacy}", "received_events_url": "https://api.github.com/users/vipentti/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f5fd6c9de07a2bcc315acae59845ffb79990bc5", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f5fd6c9de07a2bcc315acae59845ffb79990bc5", "html_url": "https://github.com/rust-lang/rust/commit/6f5fd6c9de07a2bcc315acae59845ffb79990bc5"}], "stats": {"total": 45, "additions": 2, "deletions": 43}, "files": [{"sha": "bd3b1e39682504a28425998b75198e8b886f6343", "filename": "crates/ra_ide_api/src/hover.rs", "status": "modified", "additions": 2, "deletions": 43, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/79114c67b10698d6b73b84bdd782d7407752d3ca/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79114c67b10698d6b73b84bdd782d7407752d3ca/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fhover.rs?ref=79114c67b10698d6b73b84bdd782d7407752d3ca", "patch": "@@ -1,6 +1,6 @@\n use ra_db::SourceDatabase;\n use ra_syntax::{\n-    AstNode, SyntaxNode, TreeArc, ast::{self, NameOwner, VisibilityOwner, TypeParamsOwner},\n+    AstNode, SyntaxNode, TreeArc, ast::{self, NameOwner, VisibilityOwner},\n     algo::{find_covering_node, find_node_at_offset, find_leaf_at_offset, visit::{visitor, Visitor}},\n };\n \n@@ -177,47 +177,6 @@ impl NavigationTarget {\n         // TODO: After type inference is done, add type information to improve the output\n         let node = self.node(db)?;\n \n-        // FIXME: This is copied from `structure.rs` and should probably\n-        // be moved somewhere common\n-        fn collapse_ws(node: &SyntaxNode, output: &mut String) {\n-            let mut can_insert_ws = false;\n-            for line in node.text().chunks().flat_map(|chunk| chunk.lines()) {\n-                let line = line.trim();\n-                if line.is_empty() {\n-                    if can_insert_ws {\n-                        output.push_str(\" \");\n-                        can_insert_ws = false;\n-                    }\n-                } else {\n-                    output.push_str(line);\n-                    can_insert_ws = true;\n-                }\n-            }\n-        }\n-\n-        // FIXME: This is also partially copied from `structure.rs`\n-        fn visit_fn(node: &ast::FnDef) -> Option<String> {\n-            let mut detail =\n-                node.visibility().map(|v| format!(\"{} \", v.syntax().text())).unwrap_or_default();\n-\n-            detail.push_str(\"fn \");\n-\n-            node.name()?.syntax().text().push_to(&mut detail);\n-\n-            if let Some(type_param_list) = node.type_param_list() {\n-                collapse_ws(type_param_list.syntax(), &mut detail);\n-            }\n-            if let Some(param_list) = node.param_list() {\n-                collapse_ws(param_list.syntax(), &mut detail);\n-            }\n-            if let Some(ret_type) = node.ret_type() {\n-                detail.push_str(\" \");\n-                collapse_ws(ret_type.syntax(), &mut detail);\n-            }\n-\n-            Some(detail)\n-        }\n-\n         fn visit_node<T>(node: &T, label: &str) -> Option<String>\n         where\n             T: NameOwner + VisibilityOwner,\n@@ -230,7 +189,7 @@ impl NavigationTarget {\n         }\n \n         visitor()\n-            .visit(visit_fn)\n+            .visit(crate::completion::function_label)\n             .visit(|node: &ast::StructDef| visit_node(node, \"struct \"))\n             .visit(|node: &ast::EnumDef| visit_node(node, \"enum \"))\n             .visit(|node: &ast::TraitDef| visit_node(node, \"trait \"))"}]}