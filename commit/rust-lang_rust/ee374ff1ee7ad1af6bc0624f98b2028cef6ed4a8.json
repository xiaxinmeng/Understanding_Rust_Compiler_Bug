{"sha": "ee374ff1ee7ad1af6bc0624f98b2028cef6ed4a8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlMzc0ZmYxZWU3YWQxYWY2YmMwNjI0Zjk4YjIwMjhjZWY2ZWQ0YTg=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-06-08T15:31:47Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-06-08T15:31:47Z"}, "message": "fix: don't complete derive macros as fn-like macros", "tree": {"sha": "8adfe5094cbeca97cecdb78d24857441a10003e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8adfe5094cbeca97cecdb78d24857441a10003e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee374ff1ee7ad1af6bc0624f98b2028cef6ed4a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee374ff1ee7ad1af6bc0624f98b2028cef6ed4a8", "html_url": "https://github.com/rust-lang/rust/commit/ee374ff1ee7ad1af6bc0624f98b2028cef6ed4a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee374ff1ee7ad1af6bc0624f98b2028cef6ed4a8/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16e142cd395f264ba5c6c3814ece92431415c089", "url": "https://api.github.com/repos/rust-lang/rust/commits/16e142cd395f264ba5c6c3814ece92431415c089", "html_url": "https://github.com/rust-lang/rust/commit/16e142cd395f264ba5c6c3814ece92431415c089"}], "stats": {"total": 92, "additions": 88, "deletions": 4}, "files": [{"sha": "b5209546c76e1bb41cf0bed1040c6c685c7f3b7a", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ee374ff1ee7ad1af6bc0624f98b2028cef6ed4a8/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee374ff1ee7ad1af6bc0624f98b2028cef6ed4a8/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=ee374ff1ee7ad1af6bc0624f98b2028cef6ed4a8", "patch": "@@ -1351,6 +1351,13 @@ impl MacroDef {\n             MacroDefKind::ProcMacro(_, base_db::ProcMacroKind::FuncLike, _) => MacroKind::ProcMacro,\n         }\n     }\n+\n+    pub fn is_fn_like(&self) -> bool {\n+        match self.kind() {\n+            MacroKind::Declarative | MacroKind::BuiltIn | MacroKind::ProcMacro => true,\n+            MacroKind::Attr | MacroKind::Derive => false,\n+        }\n+    }\n }\n \n /// Invariant: `inner.as_assoc_item(db).is_some()`"}, {"sha": "1daa8595a6a1d45406e4cbfda508719e38cc8a42", "filename": "crates/ide_completion/src/completions/pattern.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ee374ff1ee7ad1af6bc0624f98b2028cef6ed4a8/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee374ff1ee7ad1af6bc0624f98b2028cef6ed4a8/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpattern.rs?ref=ee374ff1ee7ad1af6bc0624f98b2028cef6ed4a8", "patch": "@@ -39,7 +39,7 @@ pub(crate) fn complete_pattern(acc: &mut Completions, ctx: &CompletionContext) {\n                 | hir::ModuleDef::Module(..) => refutable,\n                 _ => false,\n             },\n-            hir::ScopeDef::MacroDef(_) => true,\n+            hir::ScopeDef::MacroDef(mac) => mac.is_fn_like(),\n             hir::ScopeDef::ImplSelfType(impl_) => match impl_.self_ty(ctx.db).as_adt() {\n                 Some(hir::Adt::Struct(strukt)) => {\n                     acc.add_struct_pat(ctx, strukt, Some(name.clone()));\n@@ -101,6 +101,28 @@ fn foo() {\n         );\n     }\n \n+    #[test]\n+    fn does_not_complete_non_fn_macros() {\n+        check(\n+            r#\"\n+macro_rules! m { ($e:expr) => { $e } }\n+enum E { X }\n+\n+#[rustc_builtin_macro]\n+macro Clone {}\n+\n+fn foo() {\n+   match E::X { $0 }\n+}\n+\"#,\n+            expect![[r#\"\n+                ev E::X  ()\n+                en E\n+                ma m!(\u2026) macro_rules! m\n+            \"#]],\n+        );\n+    }\n+\n     #[test]\n     fn completes_in_simple_macro_call() {\n         check("}, {"sha": "4dfdc5ced4abfd377821650b8b363cda4e88334e", "filename": "crates/ide_completion/src/completions/qualified_path.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ee374ff1ee7ad1af6bc0624f98b2028cef6ed4a8/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee374ff1ee7ad1af6bc0624f98b2028cef6ed4a8/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs?ref=ee374ff1ee7ad1af6bc0624f98b2028cef6ed4a8", "patch": "@@ -26,7 +26,9 @@ pub(crate) fn complete_qualified_path(acc: &mut Completions, ctx: &CompletionCon\n             let module_scope = module.scope(ctx.db, context_module);\n             for (name, def) in module_scope {\n                 if let hir::ScopeDef::MacroDef(macro_def) = def {\n-                    acc.add_macro(ctx, Some(name.clone()), macro_def);\n+                    if macro_def.is_fn_like() {\n+                        acc.add_macro(ctx, Some(name.clone()), macro_def);\n+                    }\n                 }\n                 if let hir::ScopeDef::ModuleDef(hir::ModuleDef::Module(_)) = def {\n                     acc.add_resolution(ctx, name, &def);\n@@ -58,6 +60,13 @@ pub(crate) fn complete_qualified_path(acc: &mut Completions, ctx: &CompletionCon\n                     }\n                 }\n \n+                if let hir::ScopeDef::MacroDef(macro_def) = def {\n+                    if !macro_def.is_fn_like() {\n+                        // Don't suggest attribute macros and derives.\n+                        continue;\n+                    }\n+                }\n+\n                 acc.add_resolution(ctx, name, &def);\n             }\n         }"}, {"sha": "52f40d4961827fb90f95d954931e2a4c72469d80", "filename": "crates/ide_completion/src/completions/unqualified_path.rs", "status": "modified", "additions": 48, "deletions": 2, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/ee374ff1ee7ad1af6bc0624f98b2028cef6ed4a8/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee374ff1ee7ad1af6bc0624f98b2028cef6ed4a8/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs?ref=ee374ff1ee7ad1af6bc0624f98b2028cef6ed4a8", "patch": "@@ -13,7 +13,9 @@ pub(crate) fn complete_unqualified_path(acc: &mut Completions, ctx: &CompletionC\n         // only show macros in {Assoc}ItemList\n         ctx.scope.process_all_names(&mut |name, res| {\n             if let hir::ScopeDef::MacroDef(mac) = res {\n-                acc.add_macro(ctx, Some(name.clone()), mac);\n+                if mac.is_fn_like() {\n+                    acc.add_macro(ctx, Some(name.clone()), mac);\n+                }\n             }\n             if let hir::ScopeDef::ModuleDef(hir::ModuleDef::Module(_)) = res {\n                 acc.add_resolution(ctx, name, &res);\n@@ -46,7 +48,13 @@ pub(crate) fn complete_unqualified_path(acc: &mut Completions, ctx: &CompletionC\n             cov_mark::hit!(skip_lifetime_completion);\n             return;\n         }\n-        acc.add_resolution(ctx, name, &res);\n+        let add_resolution = match res {\n+            ScopeDef::MacroDef(mac) => mac.is_fn_like(),\n+            _ => true,\n+        };\n+        if add_resolution {\n+            acc.add_resolution(ctx, name, &res);\n+        }\n     });\n }\n \n@@ -426,6 +434,44 @@ mod macros {\n         );\n     }\n \n+    #[test]\n+    fn does_not_complete_non_fn_macros() {\n+        check(\n+            r#\"\n+#[rustc_builtin_macro]\n+pub macro Clone {}\n+\n+fn f() {$0}\n+\"#,\n+            expect![[r#\"\n+                fn f() fn()\n+            \"#]],\n+        );\n+        check(\n+            r#\"\n+#[rustc_builtin_macro]\n+pub macro Clone {}\n+\n+struct S;\n+impl S {\n+    $0\n+}\n+\"#,\n+            expect![[r#\"\"#]],\n+        );\n+        check(\n+            r#\"\n+mod m {\n+    #[rustc_builtin_macro]\n+    pub macro Clone {}\n+}\n+\n+fn f() {m::$0}\n+\"#,\n+            expect![[r#\"\"#]],\n+        );\n+    }\n+\n     #[test]\n     fn completes_std_prelude_if_core_is_defined() {\n         check("}]}