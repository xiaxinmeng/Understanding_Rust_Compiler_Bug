{"sha": "7a13b93b00af4e8f8b3baae2926e9877f5f6403d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhMTNiOTNiMDBhZjRlOGY4YjNiYWFlMjkyNmU5ODc3ZjVmNjQwM2Q=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-06-18T12:06:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-06-18T12:06:25Z"}, "message": "Auto merge of #26392 - oli-obk:unused_functions, r=dotdash\n\nThese aren't used anywhere and to my current knowledge it's unlikely that they are going to be used in the future", "tree": {"sha": "279c0161a1d97beb186e5e793b6af9fc64db14d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/279c0161a1d97beb186e5e793b6af9fc64db14d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a13b93b00af4e8f8b3baae2926e9877f5f6403d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a13b93b00af4e8f8b3baae2926e9877f5f6403d", "html_url": "https://github.com/rust-lang/rust/commit/7a13b93b00af4e8f8b3baae2926e9877f5f6403d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a13b93b00af4e8f8b3baae2926e9877f5f6403d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ef14d94113d212384e0823cb98b7260bc7fd392", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ef14d94113d212384e0823cb98b7260bc7fd392", "html_url": "https://github.com/rust-lang/rust/commit/1ef14d94113d212384e0823cb98b7260bc7fd392"}, {"sha": "59638d15c1137a36edecf2b710f388d7bd86a88a", "url": "https://api.github.com/repos/rust-lang/rust/commits/59638d15c1137a36edecf2b710f388d7bd86a88a", "html_url": "https://github.com/rust-lang/rust/commit/59638d15c1137a36edecf2b710f388d7bd86a88a"}], "stats": {"total": 68, "additions": 0, "deletions": 68}, "files": [{"sha": "5a4a6c5b9c0f32f032098fa5692ef940f25a2157", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7a13b93b00af4e8f8b3baae2926e9877f5f6403d/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a13b93b00af4e8f8b3baae2926e9877f5f6403d/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=7a13b93b00af4e8f8b3baae2926e9877f5f6403d", "patch": "@@ -1300,20 +1300,8 @@ extern {\n                         -> ValueRef;\n \n     /* Memory */\n-    pub fn LLVMBuildMalloc(B: BuilderRef, Ty: TypeRef, Name: *const c_char)\n-                           -> ValueRef;\n-    pub fn LLVMBuildArrayMalloc(B: BuilderRef,\n-                                Ty: TypeRef,\n-                                Val: ValueRef,\n-                                Name: *const c_char)\n-                                -> ValueRef;\n     pub fn LLVMBuildAlloca(B: BuilderRef, Ty: TypeRef, Name: *const c_char)\n                            -> ValueRef;\n-    pub fn LLVMBuildArrayAlloca(B: BuilderRef,\n-                                Ty: TypeRef,\n-                                Val: ValueRef,\n-                                Name: *const c_char)\n-                                -> ValueRef;\n     pub fn LLVMBuildFree(B: BuilderRef, PointerVal: ValueRef) -> ValueRef;\n     pub fn LLVMBuildLoad(B: BuilderRef,\n                          PointerVal: ValueRef,"}, {"sha": "05d0a967e64b6e13d76e2ea50153b7a17fe46d80", "filename": "src/librustc_trans/trans/build.rs", "status": "modified", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/7a13b93b00af4e8f8b3baae2926e9877f5f6403d/src%2Flibrustc_trans%2Ftrans%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a13b93b00af4e8f8b3baae2926e9877f5f6403d/src%2Flibrustc_trans%2Ftrans%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbuild.rs?ref=7a13b93b00af4e8f8b3baae2926e9877f5f6403d", "patch": "@@ -522,30 +522,6 @@ pub fn Not(cx: Block, v: ValueRef, debug_loc: DebugLoc) -> ValueRef {\n     B(cx).not(v)\n }\n \n-/* Memory */\n-pub fn Malloc(cx: Block, ty: Type, debug_loc: DebugLoc) -> ValueRef {\n-    unsafe {\n-        if cx.unreachable.get() {\n-            return llvm::LLVMGetUndef(Type::i8p(cx.ccx()).to_ref());\n-        }\n-        debug_loc.apply(cx.fcx);\n-        B(cx).malloc(ty)\n-    }\n-}\n-\n-pub fn ArrayMalloc(cx: Block,\n-                   ty: Type,\n-                   val: ValueRef,\n-                   debug_loc: DebugLoc) -> ValueRef {\n-    unsafe {\n-        if cx.unreachable.get() {\n-            return llvm::LLVMGetUndef(Type::i8p(cx.ccx()).to_ref());\n-        }\n-        debug_loc.apply(cx.fcx);\n-        B(cx).array_malloc(ty, val)\n-    }\n-}\n-\n pub fn Alloca(cx: Block, ty: Type, name: &str) -> ValueRef {\n     unsafe {\n         if cx.unreachable.get() { return llvm::LLVMGetUndef(ty.ptr_to().to_ref()); }\n@@ -560,16 +536,6 @@ pub fn AllocaFcx(fcx: &FunctionContext, ty: Type, name: &str) -> ValueRef {\n     b.alloca(ty, name)\n }\n \n-pub fn ArrayAlloca(cx: Block, ty: Type, val: ValueRef) -> ValueRef {\n-    unsafe {\n-        if cx.unreachable.get() { return llvm::LLVMGetUndef(ty.ptr_to().to_ref()); }\n-        let b = cx.fcx.ccx.builder();\n-        b.position_before(cx.fcx.alloca_insert_pt.get().unwrap());\n-        DebugLoc::None.apply(cx.fcx);\n-        b.array_alloca(ty, val)\n-    }\n-}\n-\n pub fn Free(cx: Block, pointer_val: ValueRef) {\n     if cx.unreachable.get() { return; }\n     B(cx).free(pointer_val)"}, {"sha": "e100defc248755c0155544783d01f21cc52051dc", "filename": "src/librustc_trans/trans/builder.rs", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7a13b93b00af4e8f8b3baae2926e9877f5f6403d/src%2Flibrustc_trans%2Ftrans%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a13b93b00af4e8f8b3baae2926e9877f5f6403d/src%2Flibrustc_trans%2Ftrans%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbuilder.rs?ref=7a13b93b00af4e8f8b3baae2926e9877f5f6403d", "patch": "@@ -410,21 +410,6 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         }\n     }\n \n-    /* Memory */\n-    pub fn malloc(&self, ty: Type) -> ValueRef {\n-        self.count_insn(\"malloc\");\n-        unsafe {\n-            llvm::LLVMBuildMalloc(self.llbuilder, ty.to_ref(), noname())\n-        }\n-    }\n-\n-    pub fn array_malloc(&self, ty: Type, val: ValueRef) -> ValueRef {\n-        self.count_insn(\"arraymalloc\");\n-        unsafe {\n-            llvm::LLVMBuildArrayMalloc(self.llbuilder, ty.to_ref(), val, noname())\n-        }\n-    }\n-\n     pub fn alloca(&self, ty: Type, name: &str) -> ValueRef {\n         self.count_insn(\"alloca\");\n         unsafe {\n@@ -438,13 +423,6 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         }\n     }\n \n-    pub fn array_alloca(&self, ty: Type, val: ValueRef) -> ValueRef {\n-        self.count_insn(\"arrayalloca\");\n-        unsafe {\n-            llvm::LLVMBuildArrayAlloca(self.llbuilder, ty.to_ref(), val, noname())\n-        }\n-    }\n-\n     pub fn free(&self, ptr: ValueRef) {\n         self.count_insn(\"free\");\n         unsafe {"}]}