{"sha": "92d1f8d8e4be62e6f4dc32bc57f9d44f53117ec9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyZDFmOGQ4ZTRiZTYyZTZmNGRjMzJiYzU3ZjlkNDRmNTMxMTdlYzk=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-01-27T19:19:29Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-03-15T08:58:02Z"}, "message": "Stabilize `inclusive_range_syntax` language feature.\n\nStabilize the syntax `a..=b` and `..=b`.", "tree": {"sha": "61eeb58e84dcb4a8e85640fd50e1ad04e6c017ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61eeb58e84dcb4a8e85640fd50e1ad04e6c017ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/92d1f8d8e4be62e6f4dc32bc57f9d44f53117ec9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlqqNZoACgkQ/vbIBR0O\nATx6oBAAsCnqx4f4TDpzQWi7u+tt/YQPydqcsTFh3Mlw8Ahc8BaJU5k6SfW1NNgX\nvdALSKWi0td2F8yFYdvLP5Y2ZSYCstCfjxPo9YYFpD9rndbr6U0GsPR1P2o065NC\nXouNSxgUeFENBIzXzuCattbzBoOjGLJFL6eICSxuh+zknCdKz/wqk/lEG21KPcg3\n5ScgcoPkEA3Ldf82xE3p8i2zIsOG4czki7NQrAhjcnXI5afXbEIDUwE+bvUbLDwB\n/06GkijGF1XZ45xhtXA4e9A95PGsnG0JuDS8/2yySSse6T3E2WtyOQQTgHHXV+c0\nosYPUiebqe8wibQm25qbHqY+CsskL3E4o2SDsbxqRKUaSDpqKaSgNi3NT1fSRm6m\nOleNXqiMMlIbON5woxyS/C7/Q6HbznLF8o/jbMH3W2LrHcB1Ykm7VXu6qbhno7mE\nJzDo0XWxctwzQbr3WGYV3sWXTK3sKIhLTAetrOC4CRmB5Q7sss1YuUeykyoVYPwG\nys7rfLqhzK1x5vbg1JR8fzZJXAwFAOJamKJlof4VMK4VPSb0mQ0N46aX1ZylsgH6\nSAgy5WpamLLI6ruEJg1JROypvOWU/v7yGoq5jnwYPke6iX+A/COs2iz6FoiVC9HQ\nFpwb23z144AoKDM13//LH94mbx29FAkKVixMN+rUhScll6Su740=\n=XqSg\n-----END PGP SIGNATURE-----", "payload": "tree 61eeb58e84dcb4a8e85640fd50e1ad04e6c017ea\nparent b5913f2e7695ad247078619bf4c6a6d3dc4dece5\nauthor kennytm <kennytm@gmail.com> 1517080769 +0800\ncommitter kennytm <kennytm@gmail.com> 1521104282 +0800\n\nStabilize `inclusive_range_syntax` language feature.\n\nStabilize the syntax `a..=b` and `..=b`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/92d1f8d8e4be62e6f4dc32bc57f9d44f53117ec9", "html_url": "https://github.com/rust-lang/rust/commit/92d1f8d8e4be62e6f4dc32bc57f9d44f53117ec9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/92d1f8d8e4be62e6f4dc32bc57f9d44f53117ec9/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5913f2e7695ad247078619bf4c6a6d3dc4dece5", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5913f2e7695ad247078619bf4c6a6d3dc4dece5", "html_url": "https://github.com/rust-lang/rust/commit/b5913f2e7695ad247078619bf4c6a6d3dc4dece5"}], "stats": {"total": 157, "additions": 19, "deletions": 138}, "files": [{"sha": "56f58803150ca6ca274b5b9046f771f92e1c0627", "filename": "src/doc/unstable-book/src/language-features/inclusive-range-syntax.md", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b5913f2e7695ad247078619bf4c6a6d3dc4dece5/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Finclusive-range-syntax.md", "raw_url": "https://github.com/rust-lang/rust/raw/b5913f2e7695ad247078619bf4c6a6d3dc4dece5/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Finclusive-range-syntax.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Finclusive-range-syntax.md?ref=b5913f2e7695ad247078619bf4c6a6d3dc4dece5", "patch": "@@ -1,20 +0,0 @@\n-# `inclusive_range_syntax`\n-\n-The tracking issue for this feature is: [#28237]\n-\n-[#28237]: https://github.com/rust-lang/rust/issues/28237\n-\n-------------------------\n-\n-To get a range that goes from 0 to 10 and includes the value 10, you\n-can write `0..=10`:\n-\n-```rust\n-#![feature(inclusive_range_syntax)]\n-\n-fn main() {\n-    for i in 0..=10 {\n-        println!(\"{}\", i);\n-    }\n-}\n-```"}, {"sha": "f5deecd47e8e42cdac93dcc39e8aef2cfb6dc345", "filename": "src/liballoc/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/92d1f8d8e4be62e6f4dc32bc57f9d44f53117ec9/src%2Fliballoc%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92d1f8d8e4be62e6f4dc32bc57f9d44f53117ec9/src%2Fliballoc%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Flib.rs?ref=92d1f8d8e4be62e6f4dc32bc57f9d44f53117ec9", "patch": "@@ -14,7 +14,7 @@\n #![feature(alloc_system)]\n #![feature(attr_literals)]\n #![feature(box_syntax)]\n-#![feature(inclusive_range_syntax)]\n+#![cfg_attr(stage0, feature(inclusive_range_syntax))]\n #![feature(collection_placement)]\n #![feature(const_fn)]\n #![feature(drain_filter)]"}, {"sha": "9aebe2e4ee4b4eb90043592e704ead8ac43c618c", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/92d1f8d8e4be62e6f4dc32bc57f9d44f53117ec9/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92d1f8d8e4be62e6f4dc32bc57f9d44f53117ec9/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=92d1f8d8e4be62e6f4dc32bc57f9d44f53117ec9", "patch": "@@ -79,7 +79,7 @@\n #![feature(fn_must_use)]\n #![feature(fundamental)]\n #![feature(i128_type)]\n-#![feature(inclusive_range_syntax)]\n+#![cfg_attr(stage0, feature(inclusive_range_syntax))]\n #![feature(intrinsics)]\n #![feature(iterator_flatten)]\n #![feature(iterator_repeat_with)]"}, {"sha": "32aa6508805b0286ad1dbc1a9c0b969e26ec57e5", "filename": "src/libcore/ops/range.rs", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/92d1f8d8e4be62e6f4dc32bc57f9d44f53117ec9/src%2Flibcore%2Fops%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92d1f8d8e4be62e6f4dc32bc57f9d44f53117ec9/src%2Flibcore%2Fops%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Frange.rs?ref=92d1f8d8e4be62e6f4dc32bc57f9d44f53117ec9", "patch": "@@ -128,7 +128,7 @@ impl<Idx: PartialOrd<Idx>> Range<Idx> {\n     /// The range is empty if either side is incomparable:\n     ///\n     /// ```\n-    /// #![feature(range_is_empty,inclusive_range_syntax)]\n+    /// #![feature(range_is_empty)]\n     ///\n     /// use std::f32::NAN;\n     /// assert!(!(3.0..5.0).is_empty());\n@@ -283,8 +283,6 @@ impl<Idx: PartialOrd<Idx>> RangeTo<Idx> {\n /// # Examples\n ///\n /// ```\n-/// #![feature(inclusive_range_syntax)]\n-///\n /// assert_eq!((3..=5), std::ops::RangeInclusive { start: 3, end: 5 });\n /// assert_eq!(3 + 4 + 5, (3..=5).sum());\n ///\n@@ -316,7 +314,7 @@ impl<Idx: PartialOrd<Idx>> RangeInclusive<Idx> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(range_contains,inclusive_range_syntax)]\n+    /// #![feature(range_contains)]\n     ///\n     /// assert!(!(3..=5).contains(2));\n     /// assert!( (3..=5).contains(3));\n@@ -337,7 +335,7 @@ impl<Idx: PartialOrd<Idx>> RangeInclusive<Idx> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(range_is_empty,inclusive_range_syntax)]\n+    /// #![feature(range_is_empty)]\n     ///\n     /// assert!(!(3..=5).is_empty());\n     /// assert!(!(3..=3).is_empty());\n@@ -347,7 +345,7 @@ impl<Idx: PartialOrd<Idx>> RangeInclusive<Idx> {\n     /// The range is empty if either side is incomparable:\n     ///\n     /// ```\n-    /// #![feature(range_is_empty,inclusive_range_syntax)]\n+    /// #![feature(range_is_empty)]\n     ///\n     /// use std::f32::NAN;\n     /// assert!(!(3.0..=5.0).is_empty());\n@@ -358,7 +356,7 @@ impl<Idx: PartialOrd<Idx>> RangeInclusive<Idx> {\n     /// This method returns `true` after iteration has finished:\n     ///\n     /// ```\n-    /// #![feature(range_is_empty,inclusive_range_syntax)]\n+    /// #![feature(range_is_empty)]\n     ///\n     /// let mut r = 3..=5;\n     /// for _ in r.by_ref() {}\n@@ -381,16 +379,13 @@ impl<Idx: PartialOrd<Idx>> RangeInclusive<Idx> {\n /// The `..=end` syntax is a `RangeToInclusive`:\n ///\n /// ```\n-/// #![feature(inclusive_range_syntax)]\n /// assert_eq!((..=5), std::ops::RangeToInclusive{ end: 5 });\n /// ```\n ///\n /// It does not have an [`IntoIterator`] implementation, so you can't use it in a\n /// `for` loop directly. This won't compile:\n ///\n /// ```compile_fail,E0277\n-/// #![feature(inclusive_range_syntax)]\n-///\n /// // error[E0277]: the trait bound `std::ops::RangeToInclusive<{integer}>:\n /// // std::iter::Iterator` is not satisfied\n /// for i in ..=5 {\n@@ -402,8 +397,6 @@ impl<Idx: PartialOrd<Idx>> RangeInclusive<Idx> {\n /// array elements up to and including the index indicated by `end`.\n ///\n /// ```\n-/// #![feature(inclusive_range_syntax)]\n-///\n /// let arr = [0, 1, 2, 3];\n /// assert_eq!(arr[ ..=2], [0,1,2  ]);  // RangeToInclusive\n /// assert_eq!(arr[1..=2], [  1,2  ]);\n@@ -434,7 +427,7 @@ impl<Idx: PartialOrd<Idx>> RangeToInclusive<Idx> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(range_contains,inclusive_range_syntax)]\n+    /// #![feature(range_contains)]\n     ///\n     /// assert!( (..=5).contains(-1_000_000_000));\n     /// assert!( (..=5).contains(5));"}, {"sha": "85787f38f060527ce3e08d8c7c75246db4de8e43", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/92d1f8d8e4be62e6f4dc32bc57f9d44f53117ec9/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92d1f8d8e4be62e6f4dc32bc57f9d44f53117ec9/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=92d1f8d8e4be62e6f4dc32bc57f9d44f53117ec9", "patch": "@@ -23,7 +23,7 @@\n #![feature(fmt_internals)]\n #![feature(iterator_step_by)]\n #![feature(i128_type)]\n-#![feature(inclusive_range_syntax)]\n+#![cfg_attr(stage0, feature(inclusive_range_syntax))]\n #![feature(iterator_try_fold)]\n #![feature(iterator_flatten)]\n #![feature(conservative_impl_trait)]"}, {"sha": "ff2e8ea79d3bedfc911229bde8d11237dfc9c1dc", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/92d1f8d8e4be62e6f4dc32bc57f9d44f53117ec9/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92d1f8d8e4be62e6f4dc32bc57f9d44f53117ec9/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=92d1f8d8e4be62e6f4dc32bc57f9d44f53117ec9", "patch": "@@ -54,7 +54,7 @@\n #![feature(fs_read_write)]\n #![feature(i128)]\n #![feature(i128_type)]\n-#![feature(inclusive_range_syntax)]\n+#![cfg_attr(stage0, feature(inclusive_range_syntax))]\n #![cfg_attr(windows, feature(libc))]\n #![feature(match_default_bindings)]\n #![feature(macro_lifetime_matcher)]"}, {"sha": "d7ccf9d5562e6027469024284799e5f4c4ae8e63", "filename": "src/librustc_incremental/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/92d1f8d8e4be62e6f4dc32bc57f9d44f53117ec9/src%2Flibrustc_incremental%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92d1f8d8e4be62e6f4dc32bc57f9d44f53117ec9/src%2Flibrustc_incremental%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Flib.rs?ref=92d1f8d8e4be62e6f4dc32bc57f9d44f53117ec9", "patch": "@@ -18,7 +18,7 @@\n #![feature(conservative_impl_trait)]\n #![feature(fs_read_write)]\n #![feature(i128_type)]\n-#![feature(inclusive_range_syntax)]\n+#![cfg_attr(stage0, feature(inclusive_range_syntax))]\n #![feature(specialization)]\n \n extern crate graphviz;"}, {"sha": "ad7a5c94022fe3cfc30b0bf76a5046ba8ca5c4d4", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/92d1f8d8e4be62e6f4dc32bc57f9d44f53117ec9/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92d1f8d8e4be62e6f4dc32bc57f9d44f53117ec9/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=92d1f8d8e4be62e6f4dc32bc57f9d44f53117ec9", "patch": "@@ -28,7 +28,7 @@ Rust MIR: a lowered representation of Rust. Also: an experiment!\n #![feature(dyn_trait)]\n #![feature(fs_read_write)]\n #![feature(i128_type)]\n-#![feature(inclusive_range_syntax)]\n+#![cfg_attr(stage0, feature(inclusive_range_syntax))]\n #![feature(macro_vis_matcher)]\n #![feature(match_default_bindings)]\n #![feature(exhaustive_patterns)]"}, {"sha": "f2b76eb57d6622520520c53fba579e5edbd87bcb", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/92d1f8d8e4be62e6f4dc32bc57f9d44f53117ec9/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92d1f8d8e4be62e6f4dc32bc57f9d44f53117ec9/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=92d1f8d8e4be62e6f4dc32bc57f9d44f53117ec9", "patch": "@@ -26,7 +26,7 @@\n #![allow(unused_attributes)]\n #![feature(i128_type)]\n #![feature(i128)]\n-#![feature(inclusive_range_syntax)]\n+#![cfg_attr(stage0, feature(inclusive_range_syntax))]\n #![feature(libc)]\n #![feature(quote)]\n #![feature(rustc_diagnostic_macros)]"}, {"sha": "1f87c1b94c50dd0e20eadb79ade0bcbbc3485c46", "filename": "src/libsyntax/diagnostic_list.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/92d1f8d8e4be62e6f4dc32bc57f9d44f53117ec9/src%2Flibsyntax%2Fdiagnostic_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92d1f8d8e4be62e6f4dc32bc57f9d44f53117ec9/src%2Flibsyntax%2Fdiagnostic_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic_list.rs?ref=92d1f8d8e4be62e6f4dc32bc57f9d44f53117ec9", "patch": "@@ -218,8 +218,6 @@ An inclusive range was used with no end.\n Erroneous code example:\n \n ```compile_fail,E0586\n-#![feature(inclusive_range_syntax)]\n-\n fn main() {\n     let tmp = vec![0, 1, 2, 3, 4, 4, 3, 3, 2, 1];\n     let x = &tmp[1..=]; // error: inclusive range was used with no end\n@@ -239,8 +237,6 @@ fn main() {\n Or put an end to your inclusive range:\n \n ```\n-#![feature(inclusive_range_syntax)]\n-\n fn main() {\n     let tmp = vec![0, 1, 2, 3, 4, 4, 3, 3, 2, 1];\n     let x = &tmp[1..=3]; // ok!"}, {"sha": "a415117b599be85a688ef47b375b0c8e413a957b", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/92d1f8d8e4be62e6f4dc32bc57f9d44f53117ec9/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92d1f8d8e4be62e6f4dc32bc57f9d44f53117ec9/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=92d1f8d8e4be62e6f4dc32bc57f9d44f53117ec9", "patch": "@@ -268,9 +268,6 @@ declare_features! (\n     // rustc internal\n     (active, abi_vectorcall, \"1.7.0\", None, None),\n \n-    // a..=b and ..=b\n-    (active, inclusive_range_syntax, \"1.7.0\", Some(28237), None),\n-\n     // X..Y patterns\n     (active, exclusive_range_pattern, \"1.11.0\", Some(37854), None),\n \n@@ -554,6 +551,8 @@ declare_features! (\n     (accepted, match_beginning_vert, \"1.25.0\", Some(44101), None),\n     // Nested groups in `use` (RFC 2128)\n     (accepted, use_nested_groups, \"1.25.0\", Some(44494), None),\n+    // a..=b and ..=b\n+    (accepted, inclusive_range_syntax, \"1.26.0\", Some(28237), None),\n );\n \n // If you change this, please modify src/doc/unstable-book as well. You must\n@@ -1592,11 +1591,6 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                 gate_feature_post!(&self, type_ascription, e.span,\n                                   \"type ascription is experimental\");\n             }\n-            ast::ExprKind::Range(_, _, ast::RangeLimits::Closed) => {\n-                gate_feature_post!(&self, inclusive_range_syntax,\n-                                  e.span,\n-                                  \"inclusive range syntax is experimental\");\n-            }\n             ast::ExprKind::InPlace(..) => {\n                 gate_feature_post!(&self, placement_in_syntax, e.span, EXPLAIN_PLACEMENT_IN);\n             }"}, {"sha": "fb63aa857aa326b5d62617fd3dca13d18ec70222", "filename": "src/test/incremental/hashes/indexing_expressions.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/92d1f8d8e4be62e6f4dc32bc57f9d44f53117ec9/src%2Ftest%2Fincremental%2Fhashes%2Findexing_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92d1f8d8e4be62e6f4dc32bc57f9d44f53117ec9/src%2Ftest%2Fincremental%2Fhashes%2Findexing_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Findexing_expressions.rs?ref=92d1f8d8e4be62e6f4dc32bc57f9d44f53117ec9", "patch": "@@ -23,7 +23,6 @@\n #![allow(warnings)]\n #![feature(rustc_attrs)]\n #![crate_type=\"rlib\"]\n-#![feature(inclusive_range_syntax)]\n \n // Change simple index ---------------------------------------------------------\n #[cfg(cfail1)]"}, {"sha": "2aa7d6d6cd7937d2d4a7c2f8ff921135ccceb6de", "filename": "src/test/parse-fail/range_inclusive.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/92d1f8d8e4be62e6f4dc32bc57f9d44f53117ec9/src%2Ftest%2Fparse-fail%2Frange_inclusive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92d1f8d8e4be62e6f4dc32bc57f9d44f53117ec9/src%2Ftest%2Fparse-fail%2Frange_inclusive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Frange_inclusive.rs?ref=92d1f8d8e4be62e6f4dc32bc57f9d44f53117ec9", "patch": "@@ -10,8 +10,6 @@\n \n // Make sure that inclusive ranges with no end point don't parse.\n \n-#![feature(inclusive_range_syntax)]\n-\n pub fn main() {\n     for _ in 1..= {} //~ERROR inclusive range with no end\n                      //~^HELP bounded at the end"}, {"sha": "fa6474717d3f0320afbcb2663fdc1d2b2580b9b6", "filename": "src/test/parse-fail/range_inclusive_dotdotdot.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/92d1f8d8e4be62e6f4dc32bc57f9d44f53117ec9/src%2Ftest%2Fparse-fail%2Frange_inclusive_dotdotdot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92d1f8d8e4be62e6f4dc32bc57f9d44f53117ec9/src%2Ftest%2Fparse-fail%2Frange_inclusive_dotdotdot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Frange_inclusive_dotdotdot.rs?ref=92d1f8d8e4be62e6f4dc32bc57f9d44f53117ec9", "patch": "@@ -12,8 +12,6 @@\n \n // Make sure that inclusive ranges with `...` syntax don't parse.\n \n-#![feature(inclusive_range_syntax)]\n-\n use std::ops::RangeToInclusive;\n \n fn return_range_to() -> RangeToInclusive<i32> {"}, {"sha": "c8c84000e41ef56f1bff8c50999af171b83ffe61", "filename": "src/test/parse-fail/range_inclusive_gate.rs", "status": "removed", "additions": 0, "deletions": 74, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/b5913f2e7695ad247078619bf4c6a6d3dc4dece5/src%2Ftest%2Fparse-fail%2Frange_inclusive_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5913f2e7695ad247078619bf4c6a6d3dc4dece5/src%2Ftest%2Fparse-fail%2Frange_inclusive_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Frange_inclusive_gate.rs?ref=b5913f2e7695ad247078619bf4c6a6d3dc4dece5", "patch": "@@ -1,74 +0,0 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// gate-test-inclusive_range_syntax\n-\n-// Make sure that #![feature(inclusive_range_syntax)] is required.\n-\n-// #![feature(inclusive_range_syntax)]\n-\n-macro_rules! m {\n-    () => { for _ in 1..=10 {} } //~ ERROR inclusive range syntax is experimental\n-}\n-\n-#[cfg(nope)]\n-fn f() {}\n-#[cfg(not(nope))]\n-fn f() {\n-    for _ in 1..=10 {} //~ ERROR inclusive range syntax is experimental\n-}\n-\n-#[cfg(nope)]\n-macro_rules! n { () => {} }\n-#[cfg(not(nope))]\n-macro_rules! n {\n-    () => { for _ in 1..=10 {} } //~ ERROR inclusive range syntax is experimental\n-}\n-\n-macro_rules! o {\n-    () => {{\n-        #[cfg(nope)]\n-        fn g() {}\n-        #[cfg(not(nope))]\n-        fn g() {\n-            for _ in 1..=10 {} //~ ERROR inclusive range syntax is experimental\n-        }\n-\n-        g();\n-    }}\n-}\n-\n-#[cfg(nope)]\n-macro_rules! p { () => {} }\n-#[cfg(not(nope))]\n-macro_rules! p {\n-    () => {{\n-        #[cfg(nope)]\n-        fn h() {}\n-        #[cfg(not(nope))]\n-        fn h() {\n-            for _ in 1..=10 {} //~ ERROR inclusive range syntax is experimental\n-        }\n-\n-        h();\n-    }}\n-}\n-\n-pub fn main() {\n-    for _ in 1..=10 {} //~ ERROR inclusive range syntax is experimental\n-    for _ in ..=10 {} //~ ERROR inclusive range syntax is experimental\n-\n-    f(); // not allowed in cfg'ed functions\n-\n-    m!(); // not allowed in macros\n-    n!(); // not allowed in cfg'ed macros\n-    o!(); // not allowed in macros that output cfgs\n-    p!(); // not allowed in cfg'ed macros that output cfgs\n-}"}, {"sha": "5d46bfab8878e31db2b86d561fe506609a421406", "filename": "src/test/run-pass/range_inclusive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/92d1f8d8e4be62e6f4dc32bc57f9d44f53117ec9/src%2Ftest%2Frun-pass%2Frange_inclusive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92d1f8d8e4be62e6f4dc32bc57f9d44f53117ec9/src%2Ftest%2Frun-pass%2Frange_inclusive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frange_inclusive.rs?ref=92d1f8d8e4be62e6f4dc32bc57f9d44f53117ec9", "patch": "@@ -10,7 +10,7 @@\n \n // Test inclusive range syntax.\n \n-#![feature(inclusive_range_syntax, iterator_step_by)]\n+#![feature(iterator_step_by)]\n \n use std::ops::{RangeInclusive, RangeToInclusive};\n "}, {"sha": "6c2731fa5a9bb85fc5bca85b7358cea2cacc5ce4", "filename": "src/test/run-pass/range_inclusive_gate.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/92d1f8d8e4be62e6f4dc32bc57f9d44f53117ec9/src%2Ftest%2Frun-pass%2Frange_inclusive_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92d1f8d8e4be62e6f4dc32bc57f9d44f53117ec9/src%2Ftest%2Frun-pass%2Frange_inclusive_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frange_inclusive_gate.rs?ref=92d1f8d8e4be62e6f4dc32bc57f9d44f53117ec9", "patch": "@@ -9,8 +9,7 @@\n // except according to those terms.\n \n // Test that you only need the syntax gate if you don't mention the structs.\n-\n-#![feature(inclusive_range_syntax)]\n+// (Obsoleted since both features are stabilized)\n \n fn main() {\n     let mut count = 0;"}, {"sha": "073ed867bdb84529472fa8f82bd2ff58b2655073", "filename": "src/test/ui/impossible_range.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/92d1f8d8e4be62e6f4dc32bc57f9d44f53117ec9/src%2Ftest%2Fui%2Fimpossible_range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92d1f8d8e4be62e6f4dc32bc57f9d44f53117ec9/src%2Ftest%2Fui%2Fimpossible_range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpossible_range.rs?ref=92d1f8d8e4be62e6f4dc32bc57f9d44f53117ec9", "patch": "@@ -10,8 +10,6 @@\n \n // Make sure that invalid ranges generate an error during HIR lowering, not an ICE\n \n-#![feature(inclusive_range_syntax)]\n-\n pub fn main() {\n     ..;\n     0..;"}, {"sha": "cfeaa53a6bb188c5426d2ac803138c5f137337da", "filename": "src/test/ui/impossible_range.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/92d1f8d8e4be62e6f4dc32bc57f9d44f53117ec9/src%2Ftest%2Fui%2Fimpossible_range.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/92d1f8d8e4be62e6f4dc32bc57f9d44f53117ec9/src%2Ftest%2Fui%2Fimpossible_range.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpossible_range.stderr?ref=92d1f8d8e4be62e6f4dc32bc57f9d44f53117ec9", "patch": "@@ -1,13 +1,13 @@\n error[E0586]: inclusive range with no end\n-  --> $DIR/impossible_range.rs:20:8\n+  --> $DIR/impossible_range.rs:18:8\n    |\n LL |     ..=; //~ERROR inclusive range with no end\n    |        ^\n    |\n    = help: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n \n error[E0586]: inclusive range with no end\n-  --> $DIR/impossible_range.rs:27:9\n+  --> $DIR/impossible_range.rs:25:9\n    |\n LL |     0..=; //~ERROR inclusive range with no end\n    |         ^"}]}