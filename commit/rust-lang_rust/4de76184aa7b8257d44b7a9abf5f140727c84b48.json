{"sha": "4de76184aa7b8257d44b7a9abf5f140727c84b48", "node_id": "C_kwDOAAsO6NoAKDRkZTc2MTg0YWE3YjgyNTdkNDRiN2E5YWJmNWYxNDA3MjdjODRiNDg", "commit": {"author": {"name": "Jakob Degen", "email": "jakob@degen.com", "date": "2022-01-20T10:36:19Z"}, "committer": {"name": "Jakob Degen", "email": "jakob@degen.com", "date": "2022-01-20T11:21:51Z"}, "message": "Remove unnecessary unsafe code in `Arc` deferred initialization examples.", "tree": {"sha": "6fed98b87715d25c91f536bc3764b97f7521a409", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6fed98b87715d25c91f536bc3764b97f7521a409"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4de76184aa7b8257d44b7a9abf5f140727c84b48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4de76184aa7b8257d44b7a9abf5f140727c84b48", "html_url": "https://github.com/rust-lang/rust/commit/4de76184aa7b8257d44b7a9abf5f140727c84b48", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4de76184aa7b8257d44b7a9abf5f140727c84b48/comments", "author": {"login": "JakobDegen", "id": 51179609, "node_id": "MDQ6VXNlcjUxMTc5NjA5", "avatar_url": "https://avatars.githubusercontent.com/u/51179609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JakobDegen", "html_url": "https://github.com/JakobDegen", "followers_url": "https://api.github.com/users/JakobDegen/followers", "following_url": "https://api.github.com/users/JakobDegen/following{/other_user}", "gists_url": "https://api.github.com/users/JakobDegen/gists{/gist_id}", "starred_url": "https://api.github.com/users/JakobDegen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JakobDegen/subscriptions", "organizations_url": "https://api.github.com/users/JakobDegen/orgs", "repos_url": "https://api.github.com/users/JakobDegen/repos", "events_url": "https://api.github.com/users/JakobDegen/events{/privacy}", "received_events_url": "https://api.github.com/users/JakobDegen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JakobDegen", "id": 51179609, "node_id": "MDQ6VXNlcjUxMTc5NjA5", "avatar_url": "https://avatars.githubusercontent.com/u/51179609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JakobDegen", "html_url": "https://github.com/JakobDegen", "followers_url": "https://api.github.com/users/JakobDegen/followers", "following_url": "https://api.github.com/users/JakobDegen/following{/other_user}", "gists_url": "https://api.github.com/users/JakobDegen/gists{/gist_id}", "starred_url": "https://api.github.com/users/JakobDegen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JakobDegen/subscriptions", "organizations_url": "https://api.github.com/users/JakobDegen/orgs", "repos_url": "https://api.github.com/users/JakobDegen/repos", "events_url": "https://api.github.com/users/JakobDegen/events{/privacy}", "received_events_url": "https://api.github.com/users/JakobDegen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7bc47cfd92eefa54a88d20a6dff9d7445a7996df", "url": "https://api.github.com/repos/rust-lang/rust/commits/7bc47cfd92eefa54a88d20a6dff9d7445a7996df", "html_url": "https://github.com/rust-lang/rust/commit/7bc47cfd92eefa54a88d20a6dff9d7445a7996df"}], "stats": {"total": 100, "additions": 42, "deletions": 58}, "files": [{"sha": "bf5fcfdcbf5fabf3edd97a79f375b90324ac5ff3", "filename": "library/alloc/src/rc.rs", "status": "modified", "additions": 21, "deletions": 29, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/4de76184aa7b8257d44b7a9abf5f140727c84b48/library%2Falloc%2Fsrc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4de76184aa7b8257d44b7a9abf5f140727c84b48/library%2Falloc%2Fsrc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc.rs?ref=4de76184aa7b8257d44b7a9abf5f140727c84b48", "patch": "@@ -451,12 +451,10 @@ impl<T> Rc<T> {\n     ///\n     /// let mut five = Rc::<u32>::new_uninit();\n     ///\n-    /// let five = unsafe {\n-    ///     // Deferred initialization:\n-    ///     Rc::get_mut_unchecked(&mut five).as_mut_ptr().write(5);\n+    /// // Deferred initialization:\n+    /// Rc::get_mut(&mut five).unwrap().write(5);\n     ///\n-    ///     five.assume_init()\n-    /// };\n+    /// let five = unsafe { five.assume_init() };\n     ///\n     /// assert_eq!(*five, 5)\n     /// ```\n@@ -543,12 +541,10 @@ impl<T> Rc<T> {\n     ///\n     /// let mut five = Rc::<u32>::try_new_uninit()?;\n     ///\n-    /// let five = unsafe {\n-    ///     // Deferred initialization:\n-    ///     Rc::get_mut_unchecked(&mut five).as_mut_ptr().write(5);\n+    /// // Deferred initialization:\n+    /// Rc::get_mut(&mut five).unwrap().write(5);\n     ///\n-    ///     five.assume_init()\n-    /// };\n+    /// let five = unsafe { five.assume_init() };\n     ///\n     /// assert_eq!(*five, 5);\n     /// # Ok::<(), std::alloc::AllocError>(())\n@@ -660,14 +656,13 @@ impl<T> Rc<[T]> {\n     ///\n     /// let mut values = Rc::<[u32]>::new_uninit_slice(3);\n     ///\n-    /// let values = unsafe {\n-    ///     // Deferred initialization:\n-    ///     Rc::get_mut_unchecked(&mut values)[0].as_mut_ptr().write(1);\n-    ///     Rc::get_mut_unchecked(&mut values)[1].as_mut_ptr().write(2);\n-    ///     Rc::get_mut_unchecked(&mut values)[2].as_mut_ptr().write(3);\n+    /// // Deferred initialization:\n+    /// let data = Rc::get_mut(&mut values).unwrap();\n+    /// data[0].write(1);\n+    /// data[1].write(2);\n+    /// data[2].write(3);\n     ///\n-    ///     values.assume_init()\n-    /// };\n+    /// let values = unsafe { values.assume_init() };\n     ///\n     /// assert_eq!(*values, [1, 2, 3])\n     /// ```\n@@ -738,12 +733,10 @@ impl<T> Rc<mem::MaybeUninit<T>> {\n     ///\n     /// let mut five = Rc::<u32>::new_uninit();\n     ///\n-    /// let five = unsafe {\n-    ///     // Deferred initialization:\n-    ///     Rc::get_mut_unchecked(&mut five).as_mut_ptr().write(5);\n+    /// // Deferred initialization:\n+    /// Rc::get_mut(&mut five).unwrap().write(5);\n     ///\n-    ///     five.assume_init()\n-    /// };\n+    /// let five = unsafe { five.assume_init() };\n     ///\n     /// assert_eq!(*five, 5)\n     /// ```\n@@ -777,14 +770,13 @@ impl<T> Rc<[mem::MaybeUninit<T>]> {\n     ///\n     /// let mut values = Rc::<[u32]>::new_uninit_slice(3);\n     ///\n-    /// let values = unsafe {\n-    ///     // Deferred initialization:\n-    ///     Rc::get_mut_unchecked(&mut values)[0].as_mut_ptr().write(1);\n-    ///     Rc::get_mut_unchecked(&mut values)[1].as_mut_ptr().write(2);\n-    ///     Rc::get_mut_unchecked(&mut values)[2].as_mut_ptr().write(3);\n+    /// // Deferred initialization:\n+    /// let data = Rc::get_mut(&mut values).unwrap();\n+    /// data[0].write(1);\n+    /// data[1].write(2);\n+    /// data[2].write(3);\n     ///\n-    ///     values.assume_init()\n-    /// };\n+    /// let values = unsafe { values.assume_init() };\n     ///\n     /// assert_eq!(*values, [1, 2, 3])\n     /// ```"}, {"sha": "ab8a44b2147431e745635cde38b93435b8be9dd2", "filename": "library/alloc/src/sync.rs", "status": "modified", "additions": 21, "deletions": 29, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/4de76184aa7b8257d44b7a9abf5f140727c84b48/library%2Falloc%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4de76184aa7b8257d44b7a9abf5f140727c84b48/library%2Falloc%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync.rs?ref=4de76184aa7b8257d44b7a9abf5f140727c84b48", "patch": "@@ -437,12 +437,10 @@ impl<T> Arc<T> {\n     ///\n     /// let mut five = Arc::<u32>::new_uninit();\n     ///\n-    /// let five = unsafe {\n-    ///     // Deferred initialization:\n-    ///     Arc::get_mut_unchecked(&mut five).as_mut_ptr().write(5);\n+    /// // Deferred initialization:\n+    /// Arc::get_mut(&mut five).unwrap().write(5);\n     ///\n-    ///     five.assume_init()\n-    /// };\n+    /// let five = unsafe { five.assume_init() };\n     ///\n     /// assert_eq!(*five, 5)\n     /// ```\n@@ -545,12 +543,10 @@ impl<T> Arc<T> {\n     ///\n     /// let mut five = Arc::<u32>::try_new_uninit()?;\n     ///\n-    /// let five = unsafe {\n-    ///     // Deferred initialization:\n-    ///     Arc::get_mut_unchecked(&mut five).as_mut_ptr().write(5);\n+    /// // Deferred initialization:\n+    /// Arc::get_mut(&mut five).unwrap().write(5);\n     ///\n-    ///     five.assume_init()\n-    /// };\n+    /// let five = unsafe { five.assume_init() };\n     ///\n     /// assert_eq!(*five, 5);\n     /// # Ok::<(), std::alloc::AllocError>(())\n@@ -652,14 +648,13 @@ impl<T> Arc<[T]> {\n     ///\n     /// let mut values = Arc::<[u32]>::new_uninit_slice(3);\n     ///\n-    /// let values = unsafe {\n-    ///     // Deferred initialization:\n-    ///     Arc::get_mut_unchecked(&mut values)[0].as_mut_ptr().write(1);\n-    ///     Arc::get_mut_unchecked(&mut values)[1].as_mut_ptr().write(2);\n-    ///     Arc::get_mut_unchecked(&mut values)[2].as_mut_ptr().write(3);\n+    /// // Deferred initialization:\n+    /// let data = Arc::get_mut(&mut values).unwrap();\n+    /// data[0].write(1);\n+    /// data[1].write(2);\n+    /// data[2].write(3);\n     ///\n-    ///     values.assume_init()\n-    /// };\n+    /// let values = unsafe { values.assume_init() };\n     ///\n     /// assert_eq!(*values, [1, 2, 3])\n     /// ```\n@@ -730,12 +725,10 @@ impl<T> Arc<mem::MaybeUninit<T>> {\n     ///\n     /// let mut five = Arc::<u32>::new_uninit();\n     ///\n-    /// let five = unsafe {\n-    ///     // Deferred initialization:\n-    ///     Arc::get_mut_unchecked(&mut five).as_mut_ptr().write(5);\n+    /// // Deferred initialization:\n+    /// Arc::get_mut(&mut five).unwrap().write(5);\n     ///\n-    ///     five.assume_init()\n-    /// };\n+    /// let five = unsafe { five.assume_init() };\n     ///\n     /// assert_eq!(*five, 5)\n     /// ```\n@@ -770,14 +763,13 @@ impl<T> Arc<[mem::MaybeUninit<T>]> {\n     ///\n     /// let mut values = Arc::<[u32]>::new_uninit_slice(3);\n     ///\n-    /// let values = unsafe {\n-    ///     // Deferred initialization:\n-    ///     Arc::get_mut_unchecked(&mut values)[0].as_mut_ptr().write(1);\n-    ///     Arc::get_mut_unchecked(&mut values)[1].as_mut_ptr().write(2);\n-    ///     Arc::get_mut_unchecked(&mut values)[2].as_mut_ptr().write(3);\n+    /// // Deferred initialization:\n+    /// let data = Arc::get_mut(&mut values).unwrap();\n+    /// data[0].write(1);\n+    /// data[1].write(2);\n+    /// data[2].write(3);\n     ///\n-    ///     values.assume_init()\n-    /// };\n+    /// let values = unsafe { values.assume_init() };\n     ///\n     /// assert_eq!(*values, [1, 2, 3])\n     /// ```"}]}