{"sha": "fd740266de93f89195eee78a0feaa770bf90a47e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkNzQwMjY2ZGU5M2Y4OTE5NWVlZTc4YTBmZWFhNzcwYmY5MGE0N2U=", "commit": {"author": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2020-08-14T00:11:36Z"}, "committer": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2020-08-14T01:03:16Z"}, "message": "Add fix\n\nThis also explicitly checks that the types are `bool`. `try_eval_bool` also appears to just\nsucceed for `u8`, so this ensures that it actually is a bool before casting.", "tree": {"sha": "f4204b2b82cb5298d890a01940ae4ace15d92998", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4204b2b82cb5298d890a01940ae4ace15d92998"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd740266de93f89195eee78a0feaa770bf90a47e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd740266de93f89195eee78a0feaa770bf90a47e", "html_url": "https://github.com/rust-lang/rust/commit/fd740266de93f89195eee78a0feaa770bf90a47e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd740266de93f89195eee78a0feaa770bf90a47e/comments", "author": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0a811a24ee926431f6e8fea6984430138a5fee0", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0a811a24ee926431f6e8fea6984430138a5fee0", "html_url": "https://github.com/rust-lang/rust/commit/c0a811a24ee926431f6e8fea6984430138a5fee0"}], "stats": {"total": 189, "additions": 179, "deletions": 10}, "files": [{"sha": "67021ae512b654a699bbc63a288fc99250013056", "filename": "src/librustc_mir/transform/match_branches.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fd740266de93f89195eee78a0feaa770bf90a47e/src%2Flibrustc_mir%2Ftransform%2Fmatch_branches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd740266de93f89195eee78a0feaa770bf90a47e/src%2Flibrustc_mir%2Ftransform%2Fmatch_branches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmatch_branches.rs?ref=fd740266de93f89195eee78a0feaa770bf90a47e", "patch": "@@ -48,15 +48,13 @@ impl<'tcx> MirPass<'tcx> for MatchBranchSimplification {\n                     (\n                         StatementKind::Assign(box (lhs_f, Rvalue::Use(Operand::Constant(f_c)))),\n                         StatementKind::Assign(box (lhs_s, Rvalue::Use(Operand::Constant(s_c)))),\n-                    ) if lhs_f == lhs_s => {\n-                        if let Some(f_c) = f_c.literal.try_eval_bool(tcx, param_env) {\n-                            // This should also be a bool because it's writing to the same place\n-                            let s_c = s_c.literal.try_eval_bool(tcx, param_env).unwrap();\n-                            if f_c != s_c {\n-                                // have to check this here because f_c & s_c might have\n-                                // different spans.\n-                                continue;\n-                            }\n+                    ) if lhs_f == lhs_s && f_c.literal.ty.is_bool() && s_c.literal.ty.is_bool() => {\n+                        let f_c = f_c.literal.try_eval_bool(tcx, param_env).unwrap();\n+                        let s_c = s_c.literal.try_eval_bool(tcx, param_env).unwrap();\n+                        if f_c != s_c {\n+                            // have to check this here because f_c & s_c might have\n+                            // different spans.\n+                            continue;\n                         }\n                         continue 'outer;\n                     }"}, {"sha": "c41bd999dc9fc0cec5afe931891a62ead8f1389c", "filename": "src/test/mir-opt/matches_u8.exhaustive_match.MatchBranchSimplification.diff.32bit", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/fd740266de93f89195eee78a0feaa770bf90a47e/src%2Ftest%2Fmir-opt%2Fmatches_u8.exhaustive_match.MatchBranchSimplification.diff.32bit", "raw_url": "https://github.com/rust-lang/rust/raw/fd740266de93f89195eee78a0feaa770bf90a47e/src%2Ftest%2Fmir-opt%2Fmatches_u8.exhaustive_match.MatchBranchSimplification.diff.32bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_u8.exhaustive_match.MatchBranchSimplification.diff.32bit?ref=fd740266de93f89195eee78a0feaa770bf90a47e", "patch": "@@ -0,0 +1,40 @@\n+- // MIR for `exhaustive_match` before MatchBranchSimplification\n++ // MIR for `exhaustive_match` after MatchBranchSimplification\n+  \n+  fn exhaustive_match(_1: E) -> u8 {\n+      debug e => _1;                       // in scope 0 at $DIR/matches_u8.rs:11:25: 11:26\n+      let mut _0: u8;                      // return place in scope 0 at $DIR/matches_u8.rs:11:34: 11:36\n+      let mut _2: isize;                   // in scope 0 at $DIR/matches_u8.rs:13:9: 13:13\n+  \n+      bb0: {\n+          _2 = discriminant(_1);           // scope 0 at $DIR/matches_u8.rs:13:9: 13:13\n+          switchInt(move _2) -> [0_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/matches_u8.rs:13:9: 13:13\n+      }\n+  \n+      bb1: {\n+          _0 = const 1_u8;                 // scope 0 at $DIR/matches_u8.rs:14:17: 14:18\n+                                           // ty::Const\n+                                           // + ty: u8\n+                                           // + val: Value(Scalar(0x01))\n+                                           // mir::Constant\n+                                           // + span: $DIR/matches_u8.rs:14:17: 14:18\n+                                           // + literal: Const { ty: u8, val: Value(Scalar(0x01)) }\n+          goto -> bb3;                     // scope 0 at $DIR/matches_u8.rs:12:5: 15:6\n+      }\n+  \n+      bb2: {\n+          _0 = const 0_u8;                 // scope 0 at $DIR/matches_u8.rs:13:17: 13:18\n+                                           // ty::Const\n+                                           // + ty: u8\n+                                           // + val: Value(Scalar(0x00))\n+                                           // mir::Constant\n+                                           // + span: $DIR/matches_u8.rs:13:17: 13:18\n+                                           // + literal: Const { ty: u8, val: Value(Scalar(0x00)) }\n+          goto -> bb3;                     // scope 0 at $DIR/matches_u8.rs:12:5: 15:6\n+      }\n+  \n+      bb3: {\n+          return;                          // scope 0 at $DIR/matches_u8.rs:16:2: 16:2\n+      }\n+  }\n+  "}, {"sha": "c41bd999dc9fc0cec5afe931891a62ead8f1389c", "filename": "src/test/mir-opt/matches_u8.exhaustive_match.MatchBranchSimplification.diff.64bit", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/fd740266de93f89195eee78a0feaa770bf90a47e/src%2Ftest%2Fmir-opt%2Fmatches_u8.exhaustive_match.MatchBranchSimplification.diff.64bit", "raw_url": "https://github.com/rust-lang/rust/raw/fd740266de93f89195eee78a0feaa770bf90a47e/src%2Ftest%2Fmir-opt%2Fmatches_u8.exhaustive_match.MatchBranchSimplification.diff.64bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_u8.exhaustive_match.MatchBranchSimplification.diff.64bit?ref=fd740266de93f89195eee78a0feaa770bf90a47e", "patch": "@@ -0,0 +1,40 @@\n+- // MIR for `exhaustive_match` before MatchBranchSimplification\n++ // MIR for `exhaustive_match` after MatchBranchSimplification\n+  \n+  fn exhaustive_match(_1: E) -> u8 {\n+      debug e => _1;                       // in scope 0 at $DIR/matches_u8.rs:11:25: 11:26\n+      let mut _0: u8;                      // return place in scope 0 at $DIR/matches_u8.rs:11:34: 11:36\n+      let mut _2: isize;                   // in scope 0 at $DIR/matches_u8.rs:13:9: 13:13\n+  \n+      bb0: {\n+          _2 = discriminant(_1);           // scope 0 at $DIR/matches_u8.rs:13:9: 13:13\n+          switchInt(move _2) -> [0_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/matches_u8.rs:13:9: 13:13\n+      }\n+  \n+      bb1: {\n+          _0 = const 1_u8;                 // scope 0 at $DIR/matches_u8.rs:14:17: 14:18\n+                                           // ty::Const\n+                                           // + ty: u8\n+                                           // + val: Value(Scalar(0x01))\n+                                           // mir::Constant\n+                                           // + span: $DIR/matches_u8.rs:14:17: 14:18\n+                                           // + literal: Const { ty: u8, val: Value(Scalar(0x01)) }\n+          goto -> bb3;                     // scope 0 at $DIR/matches_u8.rs:12:5: 15:6\n+      }\n+  \n+      bb2: {\n+          _0 = const 0_u8;                 // scope 0 at $DIR/matches_u8.rs:13:17: 13:18\n+                                           // ty::Const\n+                                           // + ty: u8\n+                                           // + val: Value(Scalar(0x00))\n+                                           // mir::Constant\n+                                           // + span: $DIR/matches_u8.rs:13:17: 13:18\n+                                           // + literal: Const { ty: u8, val: Value(Scalar(0x00)) }\n+          goto -> bb3;                     // scope 0 at $DIR/matches_u8.rs:12:5: 15:6\n+      }\n+  \n+      bb3: {\n+          return;                          // scope 0 at $DIR/matches_u8.rs:16:2: 16:2\n+      }\n+  }\n+  "}, {"sha": "2c4bbc8095e9af7fbc1762ff4692aae9131f7dce", "filename": "src/test/mir-opt/matches_u8.exhaustive_match_i8.MatchBranchSimplification.diff.32bit", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/fd740266de93f89195eee78a0feaa770bf90a47e/src%2Ftest%2Fmir-opt%2Fmatches_u8.exhaustive_match_i8.MatchBranchSimplification.diff.32bit", "raw_url": "https://github.com/rust-lang/rust/raw/fd740266de93f89195eee78a0feaa770bf90a47e/src%2Ftest%2Fmir-opt%2Fmatches_u8.exhaustive_match_i8.MatchBranchSimplification.diff.32bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_u8.exhaustive_match_i8.MatchBranchSimplification.diff.32bit?ref=fd740266de93f89195eee78a0feaa770bf90a47e", "patch": "@@ -0,0 +1,40 @@\n+- // MIR for `exhaustive_match_i8` before MatchBranchSimplification\n++ // MIR for `exhaustive_match_i8` after MatchBranchSimplification\n+  \n+  fn exhaustive_match_i8(_1: E) -> i8 {\n+      debug e => _1;                       // in scope 0 at $DIR/matches_u8.rs:19:28: 19:29\n+      let mut _0: i8;                      // return place in scope 0 at $DIR/matches_u8.rs:19:37: 19:39\n+      let mut _2: isize;                   // in scope 0 at $DIR/matches_u8.rs:21:9: 21:13\n+  \n+      bb0: {\n+          _2 = discriminant(_1);           // scope 0 at $DIR/matches_u8.rs:21:9: 21:13\n+          switchInt(move _2) -> [0_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/matches_u8.rs:21:9: 21:13\n+      }\n+  \n+      bb1: {\n+          _0 = const 1_i8;                 // scope 0 at $DIR/matches_u8.rs:22:17: 22:18\n+                                           // ty::Const\n+                                           // + ty: i8\n+                                           // + val: Value(Scalar(0x01))\n+                                           // mir::Constant\n+                                           // + span: $DIR/matches_u8.rs:22:17: 22:18\n+                                           // + literal: Const { ty: i8, val: Value(Scalar(0x01)) }\n+          goto -> bb3;                     // scope 0 at $DIR/matches_u8.rs:20:5: 23:6\n+      }\n+  \n+      bb2: {\n+          _0 = const 0_i8;                 // scope 0 at $DIR/matches_u8.rs:21:17: 21:18\n+                                           // ty::Const\n+                                           // + ty: i8\n+                                           // + val: Value(Scalar(0x00))\n+                                           // mir::Constant\n+                                           // + span: $DIR/matches_u8.rs:21:17: 21:18\n+                                           // + literal: Const { ty: i8, val: Value(Scalar(0x00)) }\n+          goto -> bb3;                     // scope 0 at $DIR/matches_u8.rs:20:5: 23:6\n+      }\n+  \n+      bb3: {\n+          return;                          // scope 0 at $DIR/matches_u8.rs:24:2: 24:2\n+      }\n+  }\n+  "}, {"sha": "2c4bbc8095e9af7fbc1762ff4692aae9131f7dce", "filename": "src/test/mir-opt/matches_u8.exhaustive_match_i8.MatchBranchSimplification.diff.64bit", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/fd740266de93f89195eee78a0feaa770bf90a47e/src%2Ftest%2Fmir-opt%2Fmatches_u8.exhaustive_match_i8.MatchBranchSimplification.diff.64bit", "raw_url": "https://github.com/rust-lang/rust/raw/fd740266de93f89195eee78a0feaa770bf90a47e/src%2Ftest%2Fmir-opt%2Fmatches_u8.exhaustive_match_i8.MatchBranchSimplification.diff.64bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_u8.exhaustive_match_i8.MatchBranchSimplification.diff.64bit?ref=fd740266de93f89195eee78a0feaa770bf90a47e", "patch": "@@ -0,0 +1,40 @@\n+- // MIR for `exhaustive_match_i8` before MatchBranchSimplification\n++ // MIR for `exhaustive_match_i8` after MatchBranchSimplification\n+  \n+  fn exhaustive_match_i8(_1: E) -> i8 {\n+      debug e => _1;                       // in scope 0 at $DIR/matches_u8.rs:19:28: 19:29\n+      let mut _0: i8;                      // return place in scope 0 at $DIR/matches_u8.rs:19:37: 19:39\n+      let mut _2: isize;                   // in scope 0 at $DIR/matches_u8.rs:21:9: 21:13\n+  \n+      bb0: {\n+          _2 = discriminant(_1);           // scope 0 at $DIR/matches_u8.rs:21:9: 21:13\n+          switchInt(move _2) -> [0_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/matches_u8.rs:21:9: 21:13\n+      }\n+  \n+      bb1: {\n+          _0 = const 1_i8;                 // scope 0 at $DIR/matches_u8.rs:22:17: 22:18\n+                                           // ty::Const\n+                                           // + ty: i8\n+                                           // + val: Value(Scalar(0x01))\n+                                           // mir::Constant\n+                                           // + span: $DIR/matches_u8.rs:22:17: 22:18\n+                                           // + literal: Const { ty: i8, val: Value(Scalar(0x01)) }\n+          goto -> bb3;                     // scope 0 at $DIR/matches_u8.rs:20:5: 23:6\n+      }\n+  \n+      bb2: {\n+          _0 = const 0_i8;                 // scope 0 at $DIR/matches_u8.rs:21:17: 21:18\n+                                           // ty::Const\n+                                           // + ty: i8\n+                                           // + val: Value(Scalar(0x00))\n+                                           // mir::Constant\n+                                           // + span: $DIR/matches_u8.rs:21:17: 21:18\n+                                           // + literal: Const { ty: i8, val: Value(Scalar(0x00)) }\n+          goto -> bb3;                     // scope 0 at $DIR/matches_u8.rs:20:5: 23:6\n+      }\n+  \n+      bb3: {\n+          return;                          // scope 0 at $DIR/matches_u8.rs:24:2: 24:2\n+      }\n+  }\n+  "}, {"sha": "78373be48b6854d5efdbb6cf5ef0c85881eb677d", "filename": "src/test/mir-opt/matches_u8.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/fd740266de93f89195eee78a0feaa770bf90a47e/src%2Ftest%2Fmir-opt%2Fmatches_u8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd740266de93f89195eee78a0feaa770bf90a47e/src%2Ftest%2Fmir-opt%2Fmatches_u8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_u8.rs?ref=fd740266de93f89195eee78a0feaa770bf90a47e", "patch": "@@ -1,12 +1,12 @@\n // EMIT_MIR_FOR_EACH_BIT_WIDTH\n // EMIT_MIR matches_u8.exhaustive_match.MatchBranchSimplification.diff\n+// EMIT_MIR matches_u8.exhaustive_match_i8.MatchBranchSimplification.diff\n \n pub enum E {\n     A,\n     B,\n }\n \n-// This only breaks on u8's, but probably still have to test i8.\n #[no_mangle]\n pub fn exhaustive_match(e: E) -> u8 {\n     match e {\n@@ -15,7 +15,18 @@ pub fn exhaustive_match(e: E) -> u8 {\n     }\n }\n \n+#[no_mangle]\n+pub fn exhaustive_match_i8(e: E) -> i8 {\n+    match e {\n+        E::A => 0,\n+        E::B => 1,\n+    }\n+}\n+\n fn main() {\n   assert_eq!(exhaustive_match(E::A), 0);\n   assert_eq!(exhaustive_match(E::B), 1);\n+\n+  assert_eq!(exhaustive_match_i8(E::A), 0);\n+  assert_eq!(exhaustive_match_i8(E::B), 1);\n }"}]}