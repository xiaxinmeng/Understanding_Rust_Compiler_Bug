{"sha": "1141b21e50121976567cb54d6bd227bb7d5e1b61", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExNDFiMjFlNTAxMjE5NzY1NjdjYjU0ZDZiZDIyN2JiN2Q1ZTFiNjE=", "commit": {"author": {"name": "JOE1994", "email": "joseph942010@gmail.com", "date": "2020-03-28T18:44:41Z"}, "committer": {"name": "JOE1994", "email": "joseph942010@gmail.com", "date": "2020-03-29T15:30:08Z"}, "message": "Windows shims for GetCurrentDirectoryW/SetCurrentDirectoryW", "tree": {"sha": "261fa3b42b327aff31c3e1a06329e2e6dc07892e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/261fa3b42b327aff31c3e1a06329e2e6dc07892e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1141b21e50121976567cb54d6bd227bb7d5e1b61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1141b21e50121976567cb54d6bd227bb7d5e1b61", "html_url": "https://github.com/rust-lang/rust/commit/1141b21e50121976567cb54d6bd227bb7d5e1b61", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1141b21e50121976567cb54d6bd227bb7d5e1b61/comments", "author": {"login": "JOE1994", "id": 10286488, "node_id": "MDQ6VXNlcjEwMjg2NDg4", "avatar_url": "https://avatars.githubusercontent.com/u/10286488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JOE1994", "html_url": "https://github.com/JOE1994", "followers_url": "https://api.github.com/users/JOE1994/followers", "following_url": "https://api.github.com/users/JOE1994/following{/other_user}", "gists_url": "https://api.github.com/users/JOE1994/gists{/gist_id}", "starred_url": "https://api.github.com/users/JOE1994/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JOE1994/subscriptions", "organizations_url": "https://api.github.com/users/JOE1994/orgs", "repos_url": "https://api.github.com/users/JOE1994/repos", "events_url": "https://api.github.com/users/JOE1994/events{/privacy}", "received_events_url": "https://api.github.com/users/JOE1994/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JOE1994", "id": 10286488, "node_id": "MDQ6VXNlcjEwMjg2NDg4", "avatar_url": "https://avatars.githubusercontent.com/u/10286488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JOE1994", "html_url": "https://github.com/JOE1994", "followers_url": "https://api.github.com/users/JOE1994/followers", "following_url": "https://api.github.com/users/JOE1994/following{/other_user}", "gists_url": "https://api.github.com/users/JOE1994/gists{/gist_id}", "starred_url": "https://api.github.com/users/JOE1994/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JOE1994/subscriptions", "organizations_url": "https://api.github.com/users/JOE1994/orgs", "repos_url": "https://api.github.com/users/JOE1994/repos", "events_url": "https://api.github.com/users/JOE1994/events{/privacy}", "received_events_url": "https://api.github.com/users/JOE1994/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a481b8f261a196ec8b4107273705a750c545856b", "url": "https://api.github.com/repos/rust-lang/rust/commits/a481b8f261a196ec8b4107273705a750c545856b", "html_url": "https://github.com/rust-lang/rust/commit/a481b8f261a196ec8b4107273705a750c545856b"}], "stats": {"total": 188, "additions": 127, "deletions": 61}, "files": [{"sha": "78e7c37d9ce75f05bceb5220251e91977c17cd51", "filename": "src/shims/env.rs", "status": "modified", "additions": 52, "deletions": 2, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/1141b21e50121976567cb54d6bd227bb7d5e1b61/src%2Fshims%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1141b21e50121976567cb54d6bd227bb7d5e1b61/src%2Fshims%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fenv.rs?ref=1141b21e50121976567cb54d6bd227bb7d5e1b61", "patch": "@@ -138,8 +138,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 }\n             }\n             None => {\n-                let envvar_not_found = this.eval_path_scalar(&[\"std\", \"sys\", \"windows\", \"c\", \"ERROR_ENVVAR_NOT_FOUND\"])?;\n-                this.set_last_error(envvar_not_found.not_undef()?)?;\n+                let envvar_not_found = this.eval_windows(\"ERROR_ENVVAR_NOT_FOUND\")?;\n+                this.set_last_error(envvar_not_found)?;\n                 0 // return zero upon failure\n             }\n         })\n@@ -289,6 +289,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         size_op: OpTy<'tcx, Tag>,\n     ) -> InterpResult<'tcx, Scalar<Tag>> {\n         let this = self.eval_context_mut();\n+        let target_os = &this.tcx.sess.target.target.target_os;\n+        assert!(target_os == \"linux\" || target_os == \"macos\", \"`getcwd` is only available for the UNIX target family\");\n \n         this.check_no_isolation(\"getcwd\")?;\n \n@@ -308,8 +310,35 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         Ok(Scalar::null_ptr(&*this.tcx))\n     }\n \n+    #[allow(non_snake_case)]\n+    fn GetCurrentDirectoryW(\n+        &mut self,\n+        size_op: OpTy<'tcx, Tag>, // DWORD\n+        buf_op: OpTy<'tcx, Tag>,  // LPTSTR\n+    ) -> InterpResult<'tcx, u32> {\n+        let this = self.eval_context_mut();\n+        this.assert_target_os(\"windows\", \"GetCurrentDirectoryW\");\n+\n+        this.check_no_isolation(\"GetCurrentDirectoryW\")?;\n+\n+        let size = u64::from(this.read_scalar(size_op)?.to_u32()?);\n+        let buf = this.read_scalar(buf_op)?.not_undef()?;\n+\n+        // If we cannot get the current directory, we return 0\n+        match env::current_dir() {\n+            Ok(cwd) => {\n+                let len = this.write_path_to_wide_str(&cwd, buf, size)?.1;\n+                return Ok(u32::try_from(len).unwrap())\n+            }\n+            Err(e) => this.set_last_error_from_io_error(e)?,\n+        }\n+        Ok(0)\n+    }\n+\n     fn chdir(&mut self, path_op: OpTy<'tcx, Tag>) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n+        let target_os = &this.tcx.sess.target.target.target_os;\n+        assert!(target_os == \"linux\" || target_os == \"macos\", \"`getcwd` is only available for the UNIX target family\");\n \n         this.check_no_isolation(\"chdir\")?;\n \n@@ -324,6 +353,27 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         }\n     }\n \n+    #[allow(non_snake_case)]\n+    fn SetCurrentDirectoryW (\n+        &mut self,\n+        path_op: OpTy<'tcx, Tag>   // LPCTSTR\n+    ) -> InterpResult<'tcx, i32> { // Returns BOOL(i32 in Windows)\n+        let this = self.eval_context_mut();\n+        this.assert_target_os(\"windows\", \"SetCurrentDirectoryW\");\n+\n+        this.check_no_isolation(\"SetCurrentDirectoryW\")?;\n+\n+        let path = this.read_path_from_wide_str(this.read_scalar(path_op)?.not_undef()?)?;\n+\n+        match env::set_current_dir(path) {\n+            Ok(()) => Ok(1),\n+            Err(e) => {\n+                this.set_last_error_from_io_error(e)?;\n+                Ok(0)\n+            }\n+        }\n+    }\n+\n     /// Updates the `environ` static.\n     /// The first time it gets called, also initializes `extra.environ`.\n     fn update_environ(&mut self) -> InterpResult<'tcx> {"}, {"sha": "ecd1432df0cce88d5f5bacab4d5c752f10ab563d", "filename": "src/shims/foreign_items/windows.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1141b21e50121976567cb54d6bd227bb7d5e1b61/src%2Fshims%2Fforeign_items%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1141b21e50121976567cb54d6bd227bb7d5e1b61/src%2Fshims%2Fforeign_items%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items%2Fwindows.rs?ref=1141b21e50121976567cb54d6bd227bb7d5e1b61", "patch": "@@ -40,6 +40,16 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n \n+            \"GetCurrentDirectoryW\" => {\n+                let result = this.GetCurrentDirectoryW(args[0], args[1])?;\n+                this.write_scalar(Scalar::from_u32(result), dest)?;\n+            }\n+\n+            \"SetCurrentDirectoryW\" => {\n+                let result = this.SetCurrentDirectoryW(args[0])?;\n+                this.write_scalar(Scalar::from_i32(result), dest)?;\n+            }\n+\n             // File related shims\n             \"GetStdHandle\" => {\n                 let which = this.read_scalar(args[0])?.to_i32()?;"}, {"sha": "c513be4a61f6981cb888e9dcd8fbcb1b549fbe0a", "filename": "src/shims/os_str.rs", "status": "modified", "additions": 61, "deletions": 56, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/1141b21e50121976567cb54d6bd227bb7d5e1b61/src%2Fshims%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1141b21e50121976567cb54d6bd227bb7d5e1b61/src%2Fshims%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fos_str.rs?ref=1141b21e50121976567cb54d6bd227bb7d5e1b61", "patch": "@@ -177,72 +177,77 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         'mir: 'a,\n     {\n         let this = self.eval_context_ref();\n-        let os_str = this.read_os_str_from_c_str(scalar)?;\n+        let os_str: &'a OsStr = this.read_os_str_from_c_str(scalar)?;\n \n-        #[cfg(windows)]\n-        return Ok(if this.tcx.sess.target.target.target_os == \"windows\" {\n-            // Windows-on-Windows, all fine.\n-            Cow::Borrowed(Path::new(os_str))\n-        } else {\n-            // Unix target, Windows host. Need to convert target '/' to host '\\'.\n-            let converted = os_str\n-                .encode_wide()\n-                .map(|wchar| if wchar == '/' as u16 { '\\\\' as u16 } else { wchar })\n-                .collect::<Vec<_>>();\n-            Cow::Owned(PathBuf::from(OsString::from_wide(&converted)))\n-        });\n-        #[cfg(unix)]\n-        return Ok(if this.tcx.sess.target.target.target_os == \"windows\" {\n-            // Windows target, Unix host. Need to convert target '\\' to host '/'.\n-            let converted = os_str\n-                .as_bytes()\n-                .iter()\n-                .map(|&wchar| if wchar == '/' as u8 { '\\\\' as u8 } else { wchar })\n-                .collect::<Vec<_>>();\n-            Cow::Owned(PathBuf::from(OsString::from_vec(converted)))\n-        } else {\n-            // Unix-on-Unix, all is fine.\n-            Cow::Borrowed(Path::new(os_str))\n-        });\n+        Ok(match convert_path_separator(os_str, &this.tcx.sess.target.target.target_os) {\n+            Cow::Borrowed(x) => Cow::Borrowed(Path::new(x)),\n+            Cow::Owned(y) => Cow::Owned(PathBuf::from(y)),\n+        })\n+    }\n+\n+    /// Read a null-terminated sequence of `u16`s, and perform path separator conversion if needed.\n+    fn read_path_from_wide_str(&self, scalar: Scalar<Tag>) -> InterpResult<'tcx, PathBuf> {\n+        let this = self.eval_context_ref();\n+        let os_str: OsString = this.read_os_str_from_wide_str(scalar)?;\n+\n+        Ok(PathBuf::from(&convert_path_separator(&os_str, &this.tcx.sess.target.target.target_os)))\n     }\n \n-    /// Write a Path to the machine memory, adjusting path separators if needed.\n+    /// Write a Path to the machine memory (as a null-terminated sequence of bytes),\n+    /// adjusting path separators if needed.\n     fn write_path_to_c_str(\n         &mut self,\n         path: &Path,\n         scalar: Scalar<Tag>,\n         size: u64,\n     ) -> InterpResult<'tcx, (bool, u64)> {\n         let this = self.eval_context_mut();\n-\n-        #[cfg(windows)]\n-        let os_str = if this.tcx.sess.target.target.target_os == \"windows\" {\n-            // Windows-on-Windows, all fine.\n-            Cow::Borrowed(path.as_os_str())\n-        } else {\n-            // Unix target, Windows host. Need to convert host '\\\\' to target '/'.\n-            let converted = path\n-                .as_os_str()\n-                .encode_wide()\n-                .map(|wchar| if wchar == '\\\\' as u16 { '/' as u16 } else { wchar })\n-                .collect::<Vec<_>>();\n-            Cow::Owned(OsString::from_wide(&converted))\n-        };\n-        #[cfg(unix)]\n-        let os_str = if this.tcx.sess.target.target.target_os == \"windows\" {\n-            // Windows target, Unix host. Need to convert host '/' to target '\\'.\n-            let converted = path\n-                .as_os_str()\n-                .as_bytes()\n-                .iter()\n-                .map(|&wchar| if wchar == '/' as u8 { '\\\\' as u8 } else { wchar })\n-                .collect::<Vec<_>>();\n-            Cow::Owned(OsString::from_vec(converted))\n-        } else {\n-            // Unix-on-Unix, all is fine.\n-            Cow::Borrowed(path.as_os_str())\n-        };\n-\n+        let os_str = convert_path_separator(path.as_os_str(), &this.tcx.sess.target.target.target_os);\n         this.write_os_str_to_c_str(&os_str, scalar, size)\n     }\n+\n+    /// Write a Path to the machine memory (as a null-terminated sequence of `u16`s),\n+    /// adjusting path separators if needed.\n+    fn write_path_to_wide_str(\n+        &mut self,\n+        path: &Path,\n+        scalar: Scalar<Tag>,\n+        size: u64,\n+    ) -> InterpResult<'tcx, (bool, u64)> {\n+        let this = self.eval_context_mut();\n+        let os_str = convert_path_separator(path.as_os_str(), &this.tcx.sess.target.target.target_os);\n+        this.write_os_str_to_wide_str(&os_str, scalar, size)\n+    }\n+}\n+\n+/// Perform path separator conversion if needed.\n+fn convert_path_separator<'a>(\n+    os_str: &'a OsStr,\n+    target_os: &str,\n+) -> Cow<'a, OsStr> {\n+    #[cfg(windows)]\n+    return if target_os == \"windows\" {\n+        // Windows-on-Windows, all fine.\n+        Cow::Borrowed(os_str)\n+    } else {\n+        // Unix target, Windows host. Need to convert host '\\\\' to target '/'.\n+        let converted = os_str\n+            .encode_wide()\n+            .map(|wchar| if wchar == '\\\\' as u16 { '/' as u16 } else { wchar })\n+            .collect::<Vec<_>>();\n+        Cow::Owned(OsString::from_wide(&converted))\n+    };\n+    #[cfg(unix)]\n+    return if target_os == \"windows\" {\n+        // Windows target, Unix host. Need to convert host '/' to target '\\'.\n+        let converted = os_str\n+            .as_bytes()\n+            .iter()\n+            .map(|&wchar| if wchar == '/' as u8 { '\\\\' as u8 } else { wchar })\n+            .collect::<Vec<_>>();\n+        Cow::Owned(OsString::from_vec(converted))\n+    } else {\n+        // Unix-on-Unix, all is fine.\n+        Cow::Borrowed(os_str)\n+    };\n }"}, {"sha": "a88f820951ca483d15f5ec902b5ae43cc01ed6c6", "filename": "tests/run-pass/current_dir.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1141b21e50121976567cb54d6bd227bb7d5e1b61/tests%2Frun-pass%2Fcurrent_dir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1141b21e50121976567cb54d6bd227bb7d5e1b61/tests%2Frun-pass%2Fcurrent_dir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fcurrent_dir.rs?ref=1141b21e50121976567cb54d6bd227bb7d5e1b61", "patch": "@@ -1,7 +1,6 @@\n-// ignore-windows: TODO the windows hook is not done yet\n // compile-flags: -Zmiri-disable-isolation\n use std::env;\n-use std::path::Path;\n+use std::io::ErrorKind;\n \n fn main() {\n     // Test that `getcwd` is available\n@@ -11,7 +10,9 @@ fn main() {\n     // keep the current directory equal to `cwd`.\n     let parent = cwd.parent().unwrap_or(&cwd);\n     // Test that `chdir` is available\n-    assert!(env::set_current_dir(&Path::new(\"..\")).is_ok());\n+    assert!(env::set_current_dir(\"..\").is_ok());\n     // Test that `..` goes to the parent directory\n     assert_eq!(env::current_dir().unwrap(), parent);\n+    // Test that `chdir` to a non-existing directory returns a proper error\n+    assert_eq!(env::set_current_dir(\"thisdoesnotexist\").unwrap_err().kind(), ErrorKind::NotFound);\n }"}]}