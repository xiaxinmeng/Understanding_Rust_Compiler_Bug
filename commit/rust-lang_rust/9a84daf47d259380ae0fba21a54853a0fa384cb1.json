{"sha": "9a84daf47d259380ae0fba21a54853a0fa384cb1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhODRkYWY0N2QyNTkzODBhZTBmYmEyMWE1NDg1M2EwZmEzODRjYjE=", "commit": {"author": {"name": "Chetan Khilosiya", "email": "chetan.khilosiya@gmail.com", "date": "2021-03-06T17:45:00Z"}, "committer": {"name": "Chetan Khilosiya", "email": "chetan.khilosiya@gmail.com", "date": "2021-03-06T19:19:03Z"}, "message": "7708: Added the updated implementation of is_default_implemented.\n\nThe implementation uses hir create to find the implemented trait.", "tree": {"sha": "ba6c9b77eef26712ae2a1750dd5719d83f291cae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba6c9b77eef26712ae2a1750dd5719d83f291cae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a84daf47d259380ae0fba21a54853a0fa384cb1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a84daf47d259380ae0fba21a54853a0fa384cb1", "html_url": "https://github.com/rust-lang/rust/commit/9a84daf47d259380ae0fba21a54853a0fa384cb1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a84daf47d259380ae0fba21a54853a0fa384cb1/comments", "author": {"login": "chetankhilosiya", "id": 1639535, "node_id": "MDQ6VXNlcjE2Mzk1MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/1639535?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chetankhilosiya", "html_url": "https://github.com/chetankhilosiya", "followers_url": "https://api.github.com/users/chetankhilosiya/followers", "following_url": "https://api.github.com/users/chetankhilosiya/following{/other_user}", "gists_url": "https://api.github.com/users/chetankhilosiya/gists{/gist_id}", "starred_url": "https://api.github.com/users/chetankhilosiya/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chetankhilosiya/subscriptions", "organizations_url": "https://api.github.com/users/chetankhilosiya/orgs", "repos_url": "https://api.github.com/users/chetankhilosiya/repos", "events_url": "https://api.github.com/users/chetankhilosiya/events{/privacy}", "received_events_url": "https://api.github.com/users/chetankhilosiya/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chetankhilosiya", "id": 1639535, "node_id": "MDQ6VXNlcjE2Mzk1MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/1639535?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chetankhilosiya", "html_url": "https://github.com/chetankhilosiya", "followers_url": "https://api.github.com/users/chetankhilosiya/followers", "following_url": "https://api.github.com/users/chetankhilosiya/following{/other_user}", "gists_url": "https://api.github.com/users/chetankhilosiya/gists{/gist_id}", "starred_url": "https://api.github.com/users/chetankhilosiya/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chetankhilosiya/subscriptions", "organizations_url": "https://api.github.com/users/chetankhilosiya/orgs", "repos_url": "https://api.github.com/users/chetankhilosiya/repos", "events_url": "https://api.github.com/users/chetankhilosiya/events{/privacy}", "received_events_url": "https://api.github.com/users/chetankhilosiya/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8e6d6a60674c84b1507383407cf6a88cd4200d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8e6d6a60674c84b1507383407cf6a88cd4200d6", "html_url": "https://github.com/rust-lang/rust/commit/b8e6d6a60674c84b1507383407cf6a88cd4200d6"}], "stats": {"total": 64, "additions": 31, "deletions": 33}, "files": [{"sha": "2eb0d6aad2e3b7431c98a6f9503ea6e79d2f38b9", "filename": "crates/ide_assists/src/handlers/generate_default_from_new.rs", "status": "modified", "additions": 31, "deletions": 33, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/9a84daf47d259380ae0fba21a54853a0fa384cb1/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_default_from_new.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a84daf47d259380ae0fba21a54853a0fa384cb1/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_default_from_new.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_default_from_new.rs?ref=9a84daf47d259380ae0fba21a54853a0fa384cb1", "patch": "@@ -2,7 +2,7 @@ use crate::{\n     assist_context::{AssistContext, Assists},\n     AssistId,\n };\n-use hir::TypeRef;\n+use ide_db::helpers::FamousDefs;\n use syntax::{\n     ast::{self, Impl, NameOwner},\n     AstNode,\n@@ -53,7 +53,8 @@ pub(crate) fn generate_default_from_new(acc: &mut Assists, ctx: &AssistContext)\n     }\n \n     let impl_ = fn_node.syntax().ancestors().into_iter().find_map(ast::Impl::cast)?;\n-    if is_default_implemented(ctx, &impl_).is_some() {\n+    let implements_default = is_default_implemented(ctx, &impl_)?;\n+    if implements_default {\n         return None;\n     }\n \n@@ -85,29 +86,25 @@ impl Default for {} {{\n \n fn is_default_implemented(ctx: &AssistContext, impl_: &Impl) -> Option<bool> {\n     let db = ctx.sema.db;\n-    let module = impl_.syntax().parent()?;\n-    let sema_scope = ctx.sema.scope(&module);\n-    let impls = sema_scope.module()?.impl_defs(db);\n-    let mut name = None;\n-    for i in impls {\n-        if let Some(TypeRef::Path(p)) = i.target_trait(db) {\n-            name = p.segments().iter().map(|s| s.name.to_string()).find(|n| n == \"Default\");\n-        }\n-    }\n-\n-    name.map(|n| !n.is_empty())\n+    let impl_def = ctx.sema.to_def(impl_)?;\n+    let ty = impl_def.target_ty(db);\n+    let krate = impl_def.module(db).krate();\n+    let default_trait = FamousDefs(&ctx.sema, Some(krate)).core_default_Default()?;\n+    let implements_default = ty.impls_trait(db, default_trait, &[]);\n+    Some(implements_default)\n }\n \n #[cfg(test)]\n mod tests {\n+    use ide_db::helpers::FamousDefs;\n+\n     use crate::tests::{check_assist, check_assist_not_applicable};\n \n     use super::*;\n \n     #[test]\n     fn generate_default() {\n-        check_assist(\n-            generate_default_from_new,\n+        check_pass(\n             r#\"\n struct Example { _inner: () }\n \n@@ -141,8 +138,7 @@ fn main() {}\n \n     #[test]\n     fn generate_default2() {\n-        check_assist(\n-            generate_default_from_new,\n+        check_pass(\n             r#\"\n struct Test { value: u32 }\n \n@@ -173,8 +169,7 @@ impl Default for Test {\n     #[test]\n     fn new_function_with_parameters() {\n         mark::check!(new_function_with_parameters);\n-        check_assist_not_applicable(\n-            generate_default_from_new,\n+        check_not_applicable(\n             r#\"\n struct Example { _inner: () }\n \n@@ -190,8 +185,7 @@ impl Example {\n     #[test]\n     fn other_function_than_new() {\n         mark::check!(other_function_than_new);\n-        check_assist_not_applicable(\n-            generate_default_from_new,\n+        check_not_applicable(\n             r#\"\n struct Example { _inner: () }\n \n@@ -207,8 +201,7 @@ impl Exmaple {\n \n     #[test]\n     fn default_block_is_already_present() {\n-        check_assist_not_applicable(\n-            generate_default_from_new,\n+        check_not_applicable(\n             r#\"\n struct Example { _inner: () }\n \n@@ -229,8 +222,7 @@ impl Default for Example {\n \n     #[test]\n     fn standalone_new_function() {\n-        check_assist_not_applicable(\n-            generate_default_from_new,\n+        check_not_applicable(\n             r#\"\n fn n$0ew() -> u32 {\n     0\n@@ -241,8 +233,7 @@ fn n$0ew() -> u32 {\n \n     #[test]\n     fn multiple_struct_blocks() {\n-        check_assist(\n-            generate_default_from_new,\n+        check_pass(\n             r#\"\n struct Example { _inner: () }\n struct Test { value: u32 }\n@@ -274,8 +265,7 @@ impl Default for Example {\n \n     #[test]\n     fn when_struct_is_after_impl() {\n-        check_assist(\n-            generate_default_from_new,\n+        check_pass(\n             r#\"\n impl Example {\n     pub fn $0new() -> Self {\n@@ -305,8 +295,7 @@ struct Example { _inner: () }\n \n     #[test]\n     fn struct_in_module() {\n-        check_assist(\n-            generate_default_from_new,\n+        check_pass(\n             r#\"\n mod test {\n     struct Example { _inner: () }\n@@ -340,8 +329,7 @@ impl Default for Example {\n \n     #[test]\n     fn struct_in_module_with_default() {\n-        check_assist_not_applicable(\n-            generate_default_from_new,\n+        check_not_applicable(\n             r#\"\n mod test {\n     struct Example { _inner: () }\n@@ -361,4 +349,14 @@ mod test {\n \"#,\n         );\n     }\n+\n+    fn check_pass(before: &str, after: &str) {\n+        let before = &format!(\"//- /main.rs crate:main deps:core{}{}\", before, FamousDefs::FIXTURE);\n+        check_assist(generate_default_from_new, before, after);\n+    }\n+\n+    fn check_not_applicable(before: &str) {\n+        let before = &format!(\"//- /main.rs crate:main deps:core{}{}\", before, FamousDefs::FIXTURE);\n+        check_assist_not_applicable(generate_default_from_new, before);\n+    }\n }"}]}