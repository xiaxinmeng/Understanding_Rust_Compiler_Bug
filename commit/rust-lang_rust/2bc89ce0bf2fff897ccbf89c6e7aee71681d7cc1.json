{"sha": "2bc89ce0bf2fff897ccbf89c6e7aee71681d7cc1", "node_id": "C_kwDOAAsO6NoAKDJiYzg5Y2UwYmYyZmZmODk3Y2NiZjg5YzZlN2FlZTcxNjgxZDdjYzE", "commit": {"author": {"name": "Jubilee", "email": "46493976+workingjubilee@users.noreply.github.com", "date": "2021-10-04T20:58:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-04T20:58:14Z"}, "message": "Rollup merge of #89453 - waywardmonkeys:consistent-supertrait-usage, r=nagisa\n\nConsistently use 'supertrait'.\n\nA subset of places referred to 'super-trait', so this changes them\nto all use 'supertrait'. This matches 'supertype' and some other\nusages. An exception is 'auto-trait' which is consistently used\nin that manner.", "tree": {"sha": "3dd424f2714be4d2b878e9009fb2288675102c44", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3dd424f2714be4d2b878e9009fb2288675102c44"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2bc89ce0bf2fff897ccbf89c6e7aee71681d7cc1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhW2rnCRBK7hj4Ov3rIwAAQxQIAIm07qFtSFvbC5UQIeMxkELx\ntKPY59kj7I2dtbXVroWVcxuPz5U5QhSKqa5gCUU4zzHWSU37XvikDsv0j42IjtaN\nyCzjz3jJM6HF+KXmRinr8YfEL+EIv0nVfG6m+4XC65xZWfZ04QK8ysLdxBTkXh6y\n6IolasbQIxJNza/9B+TsD8ova5T8wkzHdcBjbqCmejlUi0w7mVf69yaQzPv9RT4Y\nzDm4yCL/Y0QaCHQrqi5a3qTfNTT7NseMZKC2xcC1iw5oZhCeP0WPyZRSSzgdJJZ3\n9AHu/X589jpUd88K3vK4LNBoPAMqQc8Km9HR5/ciEPMse4850yVbd/pPQeoaW/4=\n=KgOO\n-----END PGP SIGNATURE-----\n", "payload": "tree 3dd424f2714be4d2b878e9009fb2288675102c44\nparent 08dd4148f1cdc0ba7fd6729def893bb08e0cd84d\nparent 058a21d5cf65021f3f468b445d003dbba74054db\nauthor Jubilee <46493976+workingjubilee@users.noreply.github.com> 1633381094 -0700\ncommitter GitHub <noreply@github.com> 1633381094 -0700\n\nRollup merge of #89453 - waywardmonkeys:consistent-supertrait-usage, r=nagisa\n\nConsistently use 'supertrait'.\n\nA subset of places referred to 'super-trait', so this changes them\nto all use 'supertrait'. This matches 'supertype' and some other\nusages. An exception is 'auto-trait' which is consistently used\nin that manner.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2bc89ce0bf2fff897ccbf89c6e7aee71681d7cc1", "html_url": "https://github.com/rust-lang/rust/commit/2bc89ce0bf2fff897ccbf89c6e7aee71681d7cc1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2bc89ce0bf2fff897ccbf89c6e7aee71681d7cc1/comments", "author": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "08dd4148f1cdc0ba7fd6729def893bb08e0cd84d", "url": "https://api.github.com/repos/rust-lang/rust/commits/08dd4148f1cdc0ba7fd6729def893bb08e0cd84d", "html_url": "https://github.com/rust-lang/rust/commit/08dd4148f1cdc0ba7fd6729def893bb08e0cd84d"}, {"sha": "058a21d5cf65021f3f468b445d003dbba74054db", "url": "https://api.github.com/repos/rust-lang/rust/commits/058a21d5cf65021f3f468b445d003dbba74054db", "html_url": "https://github.com/rust-lang/rust/commit/058a21d5cf65021f3f468b445d003dbba74054db"}], "stats": {"total": 176, "additions": 88, "deletions": 88}, "files": [{"sha": "8e8bea9525dc9bdea4d59438bd9a77478ed53e80", "filename": "compiler/rustc_driver/src/pretty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2bc89ce0bf2fff897ccbf89c6e7aee71681d7cc1/compiler%2Frustc_driver%2Fsrc%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bc89ce0bf2fff897ccbf89c6e7aee71681d7cc1/compiler%2Frustc_driver%2Fsrc%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Fpretty.rs?ref=2bc89ce0bf2fff897ccbf89c6e7aee71681d7cc1", "patch": "@@ -88,7 +88,7 @@ trait PrinterSupport: pprust::PpAnn {\n     /// Produces the pretty-print annotation object.\n     ///\n     /// (Rust does not yet support upcasting from a trait object to\n-    /// an object for one of its super-traits.)\n+    /// an object for one of its supertraits.)\n     fn pp_ann(&self) -> &dyn pprust::PpAnn;\n }\n \n@@ -104,7 +104,7 @@ trait HirPrinterSupport<'hir>: pprust_hir::PpAnn {\n     /// Produces the pretty-print annotation object.\n     ///\n     /// (Rust does not yet support upcasting from a trait object to\n-    /// an object for one of its super-traits.)\n+    /// an object for one of its supertraits.)\n     fn pp_ann(&self) -> &dyn pprust_hir::PpAnn;\n }\n "}, {"sha": "f929f219af4aadd5cbccdbb8254b0f41e1b53616", "filename": "compiler/rustc_error_codes/src/error_codes/E0222.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2bc89ce0bf2fff897ccbf89c6e7aee71681d7cc1/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0222.md", "raw_url": "https://github.com/rust-lang/rust/raw/2bc89ce0bf2fff897ccbf89c6e7aee71681d7cc1/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0222.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0222.md?ref=2bc89ce0bf2fff897ccbf89c6e7aee71681d7cc1", "patch": "@@ -16,9 +16,9 @@ pub trait BoxCar : Box + Vehicle {}\n fn dent_object<COLOR>(c: dyn BoxCar<Color=COLOR>) {} // Invalid constraint\n ```\n \n-In this example, `BoxCar` has two super-traits: `Vehicle` and `Box`. Both of\n+In this example, `BoxCar` has two supertraits: `Vehicle` and `Box`. Both of\n these traits define an associated type `Color`. `BoxCar` inherits two types\n-with that name from both super-traits. Because of this, we need to use the\n+with that name from both supertraits. Because of this, we need to use the\n fully qualified path syntax to refer to the appropriate `Color` associated\n type, either `<BoxCar as Vehicle>::Color` or `<BoxCar as Box>::Color`, but this\n syntax is not allowed to be used in a function signature."}, {"sha": "01847d352c381c31bdf857ad1ca88180988d9fa0", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2bc89ce0bf2fff897ccbf89c6e7aee71681d7cc1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bc89ce0bf2fff897ccbf89c6e7aee71681d7cc1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=2bc89ce0bf2fff897ccbf89c6e7aee71681d7cc1", "patch": "@@ -2117,7 +2117,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         })\n     }\n \n-    /// Computes the def-ids of the transitive super-traits of `trait_def_id`. This (intentionally)\n+    /// Computes the def-ids of the transitive supertraits of `trait_def_id`. This (intentionally)\n     /// does not compute the full elaborated super-predicates but just the set of def-ids. It is used\n     /// to identify which traits may define a given associated type to help avoid cycle errors.\n     /// Returns a `DefId` iterator."}, {"sha": "8983fda6ced800ffea291dbdc7c13e543793d77c", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2bc89ce0bf2fff897ccbf89c6e7aee71681d7cc1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bc89ce0bf2fff897ccbf89c6e7aee71681d7cc1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=2bc89ce0bf2fff897ccbf89c6e7aee71681d7cc1", "patch": "@@ -599,7 +599,7 @@ impl<'tcx> Predicate<'tcx> {\n         //   where both `'x` and `'b` would have a DB index of 1.\n         //   The substitution from the input trait-ref is therefore going to be\n         //   `'a => 'x` (where `'x` has a DB index of 1).\n-        // - The super-trait-ref is `for<'b> Bar1<'a,'b>`, where `'a` is an\n+        // - The supertrait-ref is `for<'b> Bar1<'a,'b>`, where `'a` is an\n         //   early-bound parameter and `'b' is a late-bound parameter with a\n         //   DB index of 1.\n         // - If we replace `'a` with `'x` from the input, it too will have"}, {"sha": "f4567b334836ae476984386399dafba9f1d10a48", "filename": "compiler/rustc_save_analysis/src/dump_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2bc89ce0bf2fff897ccbf89c6e7aee71681d7cc1/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bc89ce0bf2fff897ccbf89c6e7aee71681d7cc1/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs?ref=2bc89ce0bf2fff897ccbf89c6e7aee71681d7cc1", "patch": "@@ -682,7 +682,7 @@ impl<'tcx> DumpVisitor<'tcx> {\n             );\n         }\n \n-        // super-traits\n+        // supertraits\n         for super_bound in trait_refs.iter() {\n             let (def_id, sub_span) = match *super_bound {\n                 hir::GenericBound::Trait(ref trait_ref, _) => ("}, {"sha": "ec75e4a55d4e5b5aa7d569413f4493f2159b3793", "filename": "compiler/rustc_typeck/src/astconv/errors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2bc89ce0bf2fff897ccbf89c6e7aee71681d7cc1/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bc89ce0bf2fff897ccbf89c6e7aee71681d7cc1/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Ferrors.rs?ref=2bc89ce0bf2fff897ccbf89c6e7aee71681d7cc1", "patch": "@@ -199,7 +199,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n \n     /// When there are any missing associated types, emit an E0191 error and attempt to supply a\n     /// reasonable suggestion on how to write it. For the case of multiple associated types in the\n-    /// same trait bound have the same name (as they come from different super-traits), we instead\n+    /// same trait bound have the same name (as they come from different supertraits), we instead\n     /// emit a generic note suggesting using a `where` clause to constraint instead.\n     pub(crate) fn complain_about_missing_associated_types(\n         &self,\n@@ -340,7 +340,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                          using the fully-qualified path to the associated types\";\n         if !where_constraints.is_empty() && suggestions.is_empty() {\n             // If there are duplicates associated type names and a single trait bound do not\n-            // use structured suggestion, it means that there are multiple super-traits with\n+            // use structured suggestion, it means that there are multiple supertraits with\n             // the same associated type name.\n             err.help(where_msg);\n         }"}, {"sha": "889b68773c27b1eaeba74e462ea02d7fc4cc2bd9", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2bc89ce0bf2fff897ccbf89c6e7aee71681d7cc1/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bc89ce0bf2fff897ccbf89c6e7aee71681d7cc1/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=2bc89ce0bf2fff897ccbf89c6e7aee71681d7cc1", "patch": "@@ -1319,7 +1319,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             );\n             first_trait.label_with_exp_info(&mut err, \"first non-auto trait\", \"first use\");\n             err.help(&format!(\n-                \"consider creating a new trait with all of these as super-traits and using that \\\n+                \"consider creating a new trait with all of these as supertraits and using that \\\n                  trait here instead: `trait NewTrait: {} {{}}`\",\n                 regular_traits\n                     .iter()"}, {"sha": "44d6f076f5da4be8a90626bfc022f9b2a33d4a44", "filename": "compiler/rustc_typeck/src/check/method/probe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2bc89ce0bf2fff897ccbf89c6e7aee71681d7cc1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bc89ce0bf2fff897ccbf89c6e7aee71681d7cc1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs?ref=2bc89ce0bf2fff897ccbf89c6e7aee71681d7cc1", "patch": "@@ -964,7 +964,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n         let trait_ref = ty::TraitRef::new(trait_def_id, trait_substs);\n \n         if self.tcx.is_trait_alias(trait_def_id) {\n-            // For trait aliases, assume all super-traits are relevant.\n+            // For trait aliases, assume all supertraits are relevant.\n             let bounds = iter::once(ty::Binder::dummy(trait_ref));\n             self.elaborate_bounds(bounds, |this, new_trait_ref, item| {\n                 let new_trait_ref = this.erase_late_bound_regions(new_trait_ref);"}, {"sha": "c82ec01f4d61db9b99f8a00d3adb039f1618f685", "filename": "src/test/ui/associated-type-bounds/supertrait-referencing-self.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2bc89ce0bf2fff897ccbf89c6e7aee71681d7cc1/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fsupertrait-referencing-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bc89ce0bf2fff897ccbf89c6e7aee71681d7cc1/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fsupertrait-referencing-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fsupertrait-referencing-self.rs?ref=2bc89ce0bf2fff897ccbf89c6e7aee71681d7cc1", "previous_filename": "src/test/ui/associated-type-bounds/super-trait-referencing-self.rs"}, {"sha": "2e97535157fd2ca40ea0aba1f6786e3ccfd86c46", "filename": "src/test/ui/associated-type-bounds/supertrait-referencing.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2bc89ce0bf2fff897ccbf89c6e7aee71681d7cc1/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fsupertrait-referencing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bc89ce0bf2fff897ccbf89c6e7aee71681d7cc1/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fsupertrait-referencing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fsupertrait-referencing.rs?ref=2bc89ce0bf2fff897ccbf89c6e7aee71681d7cc1", "previous_filename": "src/test/ui/associated-type-bounds/super-trait-referencing.rs"}, {"sha": "72a6be9ffc38843a38ebf1346b3ea4aebc978645", "filename": "src/test/ui/associated-type-bounds/supertrait-where-referencing-self.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2bc89ce0bf2fff897ccbf89c6e7aee71681d7cc1/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fsupertrait-where-referencing-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bc89ce0bf2fff897ccbf89c6e7aee71681d7cc1/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fsupertrait-where-referencing-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fsupertrait-where-referencing-self.rs?ref=2bc89ce0bf2fff897ccbf89c6e7aee71681d7cc1", "previous_filename": "src/test/ui/associated-type-bounds/super-trait-where-referencing-self.rs"}, {"sha": "c5c70f226fdf61ffe280839879771a9a369f9fc9", "filename": "src/test/ui/associated-types/issue-22560.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2bc89ce0bf2fff897ccbf89c6e7aee71681d7cc1/src%2Ftest%2Fui%2Fassociated-types%2Fissue-22560.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc89ce0bf2fff897ccbf89c6e7aee71681d7cc1/src%2Ftest%2Fui%2Fassociated-types%2Fissue-22560.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-22560.stderr?ref=2bc89ce0bf2fff897ccbf89c6e7aee71681d7cc1", "patch": "@@ -32,7 +32,7 @@ LL | type Test = dyn Add + Sub;\n    |                 |\n    |                 first non-auto trait\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: Add<[type error]> + Sub<[type error]> {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: Add<[type error]> + Sub<[type error]> {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0191]: the value of the associated types `Output` (from trait `Add`), `Output` (from trait `Sub`) must be specified"}, {"sha": "8c52736b02c4c8a03f5d89f44c7d1b930009827b", "filename": "src/test/ui/associated-types/missing-associated-types.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2bc89ce0bf2fff897ccbf89c6e7aee71681d7cc1/src%2Ftest%2Fui%2Fassociated-types%2Fmissing-associated-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc89ce0bf2fff897ccbf89c6e7aee71681d7cc1/src%2Ftest%2Fui%2Fassociated-types%2Fmissing-associated-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fmissing-associated-types.stderr?ref=2bc89ce0bf2fff897ccbf89c6e7aee71681d7cc1", "patch": "@@ -6,7 +6,7 @@ LL | type Foo<Rhs> = dyn Add<Rhs> + Sub<Rhs> + X<Rhs> + Y<Rhs>;\n    |                     |\n    |                     first non-auto trait\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: Add<Rhs> + Sub<Rhs> + X<Rhs> + Y<Rhs> {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: Add<Rhs> + Sub<Rhs> + X<Rhs> + Y<Rhs> {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0191]: the value of the associated types `A` (from trait `Y`), `Output` (from trait `Add`), `Output` (from trait `Mul`), `Output` (from trait `Sub`) must be specified\n@@ -35,7 +35,7 @@ LL | type Bar<Rhs> = dyn Add<Rhs> + Sub<Rhs> + X<Rhs> + Z<Rhs>;\n    |                     |\n    |                     first non-auto trait\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: Add<Rhs> + Sub<Rhs> + X<Rhs> + Z<Rhs> {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: Add<Rhs> + Sub<Rhs> + X<Rhs> + Z<Rhs> {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0191]: the value of the associated types `A` (from trait `Z`), `B` (from trait `Z`), `Output` (from trait `Add`), `Output` (from trait `Div`), `Output` (from trait `Div`), `Output` (from trait `Mul`), `Output` (from trait `Sub`) must be specified\n@@ -71,7 +71,7 @@ LL | type Baz<Rhs> = dyn Add<Rhs> + Sub<Rhs> + Y<Rhs>;\n    |                     |\n    |                     first non-auto trait\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: Add<Rhs> + Sub<Rhs> + Y<Rhs> {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: Add<Rhs> + Sub<Rhs> + Y<Rhs> {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0191]: the value of the associated types `A` (from trait `Y`), `Output` (from trait `Add`), `Output` (from trait `Sub`) must be specified\n@@ -99,7 +99,7 @@ LL | type Bat<Rhs> = dyn Add<Rhs> + Sub<Rhs> + Fine<Rhs>;\n    |                     |\n    |                     first non-auto trait\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: Add<Rhs> + Sub<Rhs> + Fine<Rhs> {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: Add<Rhs> + Sub<Rhs> + Fine<Rhs> {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0191]: the value of the associated types `Output` (from trait `Add`), `Output` (from trait `Sub`) must be specified"}, {"sha": "a4b33a0b7b4085165487495ba44803ebffc2b5a2", "filename": "src/test/ui/error-codes/E0225.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2bc89ce0bf2fff897ccbf89c6e7aee71681d7cc1/src%2Ftest%2Fui%2Ferror-codes%2FE0225.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc89ce0bf2fff897ccbf89c6e7aee71681d7cc1/src%2Ftest%2Fui%2Ferror-codes%2FE0225.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0225.stderr?ref=2bc89ce0bf2fff897ccbf89c6e7aee71681d7cc1", "patch": "@@ -6,7 +6,7 @@ LL |     let _: Box<dyn std::io::Read + std::io::Write>;\n    |                    |\n    |                    first non-auto trait\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: std::io::Read + std::io::Write {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: std::io::Read + std::io::Write {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -23,7 +23,7 @@ LL |     let _: Box<dyn Foo>;\n    |                    trait alias used in trait object type (additional use)\n    |                    trait alias used in trait object type (first use)\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: std::io::Read + std::io::Write {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: std::io::Read + std::io::Write {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error: aborting due to 2 previous errors"}, {"sha": "5e7762b32200a78df9f527e2b07738e0310724b2", "filename": "src/test/ui/issues/issue-32963.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2bc89ce0bf2fff897ccbf89c6e7aee71681d7cc1/src%2Ftest%2Fui%2Fissues%2Fissue-32963.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc89ce0bf2fff897ccbf89c6e7aee71681d7cc1/src%2Ftest%2Fui%2Fissues%2Fissue-32963.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32963.stderr?ref=2bc89ce0bf2fff897ccbf89c6e7aee71681d7cc1", "patch": "@@ -6,7 +6,7 @@ LL |     size_of_copy::<dyn Misc + Copy>();\n    |                        |\n    |                        first non-auto trait\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: Misc + Copy {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: Misc + Copy {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -17,7 +17,7 @@ LL |     size_of_copy::<dyn Misc + Copy>();\n    |                        |\n    |                        first non-auto trait\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: Misc + Copy {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: Misc + Copy {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0277]: the trait bound `dyn Misc: Copy` is not satisfied"}, {"sha": "75eeeda8646079918e3e4d21159dbac12601dee5", "filename": "src/test/ui/parser/trait-object-delimiters.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2bc89ce0bf2fff897ccbf89c6e7aee71681d7cc1/src%2Ftest%2Fui%2Fparser%2Ftrait-object-delimiters.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc89ce0bf2fff897ccbf89c6e7aee71681d7cc1/src%2Ftest%2Fui%2Fparser%2Ftrait-object-delimiters.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftrait-object-delimiters.stderr?ref=2bc89ce0bf2fff897ccbf89c6e7aee71681d7cc1", "patch": "@@ -52,7 +52,7 @@ LL | fn foo1(_: &dyn Drop + AsRef<str>) {}\n    |                 |\n    |                 first non-auto trait\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: Drop + AsRef<str> {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: Drop + AsRef<str> {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0224]: at least one trait is required for an object type\n@@ -69,7 +69,7 @@ LL | fn foo5(_: &(dyn Drop + dyn AsRef<str>)) {}\n    |                  |\n    |                  first non-auto trait\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: Drop + AsRef<str> {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: Drop + AsRef<str> {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error: aborting due to 9 previous errors"}, {"sha": "657288c70f387b307afdf02e022faeb059f3d864", "filename": "src/test/ui/parser/trait-object-trait-parens.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2bc89ce0bf2fff897ccbf89c6e7aee71681d7cc1/src%2Ftest%2Fui%2Fparser%2Ftrait-object-trait-parens.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc89ce0bf2fff897ccbf89c6e7aee71681d7cc1/src%2Ftest%2Fui%2Fparser%2Ftrait-object-trait-parens.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftrait-object-trait-parens.stderr?ref=2bc89ce0bf2fff897ccbf89c6e7aee71681d7cc1", "patch": "@@ -52,7 +52,7 @@ LL |     let _: Box<(Obj) + (?Sized) + (for<'a> Trait<'a>)>;\n    |                |\n    |                first non-auto trait\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: Obj + for<'a> Trait<'a> {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: Obj + for<'a> Trait<'a> {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -63,7 +63,7 @@ LL |     let _: Box<?Sized + (for<'a> Trait<'a>) + (Obj)>;\n    |                         |\n    |                         first non-auto trait\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: for<'a> Trait<'a> + Obj {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: for<'a> Trait<'a> + Obj {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -74,7 +74,7 @@ LL |     let _: Box<for<'a> Trait<'a> + (Obj) + (?Sized)>;\n    |                |\n    |                first non-auto trait\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: for<'a> Trait<'a> + Obj {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: for<'a> Trait<'a> + Obj {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error: aborting due to 6 previous errors; 3 warnings emitted"}, {"sha": "c1486ce1ee821fc0353e6c1f0644f677461380b1", "filename": "src/test/ui/specialization/README-rpass.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2bc89ce0bf2fff897ccbf89c6e7aee71681d7cc1/src%2Ftest%2Fui%2Fspecialization%2FREADME-rpass.md", "raw_url": "https://github.com/rust-lang/rust/raw/2bc89ce0bf2fff897ccbf89c6e7aee71681d7cc1/src%2Ftest%2Fui%2Fspecialization%2FREADME-rpass.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2FREADME-rpass.md?ref=2bc89ce0bf2fff897ccbf89c6e7aee71681d7cc1", "patch": "@@ -8,7 +8,7 @@ Tests that specialization is working correctly:\n     - Specialization via concrete types vs unknown types\n       - In top level of the trait reference\n       - Embedded within another type (`Vec<T>` vs `Vec<i32>`)\n-  - [Specialization based on super trait relationships](specialization-super-traits.rs)\n+  - [Specialization based on super trait relationships](specialization-supertraits.rs)\n   - [On assoc fns](specialization-assoc-fns.rs)\n   - [Ensure that impl order doesn't matter](specialization-out-of-order.rs)\n "}, {"sha": "fb85d8019218a7b551f15661cfc788538584ab01", "filename": "src/test/ui/specialization/specialization-supertraits.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2bc89ce0bf2fff897ccbf89c6e7aee71681d7cc1/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-supertraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bc89ce0bf2fff897ccbf89c6e7aee71681d7cc1/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-supertraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-supertraits.rs?ref=2bc89ce0bf2fff897ccbf89c6e7aee71681d7cc1", "previous_filename": "src/test/ui/specialization/specialization-super-traits.rs"}, {"sha": "d32e47a24c2c88467a009bdd7deb2068d6ebbeb6", "filename": "src/test/ui/specialization/specialization-supertraits.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2bc89ce0bf2fff897ccbf89c6e7aee71681d7cc1/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-supertraits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc89ce0bf2fff897ccbf89c6e7aee71681d7cc1/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-supertraits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-supertraits.stderr?ref=2bc89ce0bf2fff897ccbf89c6e7aee71681d7cc1", "patch": "@@ -1,5 +1,5 @@\n warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/specialization-super-traits.rs:3:12\n+  --> $DIR/specialization-supertraits.rs:3:12\n    |\n LL | #![feature(specialization)]\n    |            ^^^^^^^^^^^^^^", "previous_filename": "src/test/ui/specialization/specialization-super-traits.stderr"}, {"sha": "d3002db46a22e1b4930a03f9a5220daaf216e438", "filename": "src/test/ui/traits/alias/no-duplicates.stderr", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/2bc89ce0bf2fff897ccbf89c6e7aee71681d7cc1/src%2Ftest%2Fui%2Ftraits%2Falias%2Fno-duplicates.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc89ce0bf2fff897ccbf89c6e7aee71681d7cc1/src%2Ftest%2Fui%2Ftraits%2Falias%2Fno-duplicates.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Falias%2Fno-duplicates.stderr?ref=2bc89ce0bf2fff897ccbf89c6e7aee71681d7cc1", "patch": "@@ -12,7 +12,7 @@ LL | type _T00 = dyn _0 + _0;\n    |                 |\n    |                 trait alias used in trait object type (first use)\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: Obj + Obj {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: Obj + Obj {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -31,7 +31,7 @@ LL | type _T01 = dyn _1 + _0;\n    |                 |\n    |                 trait alias used in trait object type (first use)\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: Obj + Obj {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: Obj + Obj {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -53,7 +53,7 @@ LL | type _T02 = dyn _1 + _1;\n    |                 |\n    |                 trait alias used in trait object type (first use)\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: Obj + Obj {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: Obj + Obj {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -69,7 +69,7 @@ LL | type _T03 = dyn Obj + _1;\n    |                 |\n    |                 first non-auto trait\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: Obj + Obj {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: Obj + Obj {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -85,7 +85,7 @@ LL | type _T04 = dyn _1 + Obj;\n    |                 |\n    |                 trait alias used in trait object type (first use)\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: Obj + Obj {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: Obj + Obj {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -110,7 +110,7 @@ LL | type _T10 = dyn _2 + _3;\n    |                 trait alias used in trait object type (additional use)\n    |                 trait alias used in trait object type (first use)\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: Obj + Obj + Obj {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: Obj + Obj + Obj {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -129,7 +129,7 @@ LL | type _T11 = dyn _3 + _2;\n    |                 |\n    |                 trait alias used in trait object type (first use)\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: Obj + Obj + Obj {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: Obj + Obj + Obj {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -146,7 +146,7 @@ LL | type _T12 = dyn Obj + _2;\n    |                 |\n    |                 first non-auto trait\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: Obj + Obj + Obj {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: Obj + Obj + Obj {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -171,7 +171,7 @@ LL | type _T13 = dyn _2 + Obj;\n    |                 trait alias used in trait object type (additional use)\n    |                 trait alias used in trait object type (first use)\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: Obj + Obj + Obj {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: Obj + Obj + Obj {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -190,7 +190,7 @@ LL | type _T14 = dyn _1 + _3;\n    |                 |\n    |                 trait alias used in trait object type (first use)\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: Obj + Obj {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: Obj + Obj {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -209,7 +209,7 @@ LL | type _T15 = dyn _3 + _1;\n    |                 |\n    |                 trait alias used in trait object type (first use)\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: Obj + Obj {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: Obj + Obj {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -230,7 +230,7 @@ LL | type _T16 = dyn _1 + _4;\n    |                 |\n    |                 trait alias used in trait object type (first use)\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: Obj + Obj {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: Obj + Obj {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -251,7 +251,7 @@ LL | type _T17 = dyn _4 + _1;\n    |                 |\n    |                 trait alias used in trait object type (first use)\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: Obj + Obj {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: Obj + Obj {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -268,7 +268,7 @@ LL | type _T20 = dyn _5 + _5;\n    |                 |\n    |                 trait alias used in trait object type (first use)\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: Obj + Obj {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: Obj + Obj {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -282,7 +282,7 @@ LL | type _T21 = dyn Obj + _5;\n    |                 |\n    |                 first non-auto trait\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: Obj + Obj {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: Obj + Obj {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -296,7 +296,7 @@ LL | type _T22 = dyn _5 + Obj;\n    |                 |\n    |                 trait alias used in trait object type (first use)\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: Obj + Obj {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: Obj + Obj {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -310,7 +310,7 @@ LL | type _T23 = dyn _5 + Send + Sync + Obj;\n    |                 |\n    |                 trait alias used in trait object type (first use)\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: Obj + Obj {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: Obj + Obj {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -333,7 +333,7 @@ LL | type _T30 = dyn _6;\n    |                 trait alias used in trait object type (additional use)\n    |                 trait alias used in trait object type (first use)\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: Obj + Obj {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: Obj + Obj {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -356,7 +356,7 @@ LL | type _T31 = dyn _6 + Send;\n    |                 trait alias used in trait object type (additional use)\n    |                 trait alias used in trait object type (first use)\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: Obj + Obj {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: Obj + Obj {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -379,7 +379,7 @@ LL | type _T32 = dyn Send + _6;\n    |                        trait alias used in trait object type (additional use)\n    |                        trait alias used in trait object type (first use)\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: Obj + Obj {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: Obj + Obj {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -398,7 +398,7 @@ LL | type _T40 = dyn _8 + Obj;\n    |                 |\n    |                 trait alias used in trait object type (first use)\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: Obj + Obj {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: Obj + Obj {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -417,7 +417,7 @@ LL | type _T41 = dyn Obj + _8;\n    |                 |\n    |                 first non-auto trait\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: Obj + Obj {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: Obj + Obj {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -441,7 +441,7 @@ LL | type _T42 = dyn _8 + _4;\n    |                 |\n    |                 trait alias used in trait object type (first use)\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: Obj + Obj {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: Obj + Obj {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -465,7 +465,7 @@ LL | type _T43 = dyn _4 + _8;\n    |                 |\n    |                 trait alias used in trait object type (first use)\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: Obj + Obj {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: Obj + Obj {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -489,7 +489,7 @@ LL | type _T44 = dyn _4 + Send + Sync + _8;\n    |                 |\n    |                 trait alias used in trait object type (first use)\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: Obj + Obj {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: Obj + Obj {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -504,7 +504,7 @@ LL | type _T50 = dyn _9 + _10;\n    |                 |\n    |                 trait alias used in trait object type (first use)\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: for<'a> ObjL<'a> + for<'b> ObjL<'b> {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: for<'a> ObjL<'a> + for<'b> ObjL<'b> {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -519,7 +519,7 @@ LL | type _T60 = dyn _11 + _12;\n    |                 |\n    |                 trait alias used in trait object type (first use)\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: ObjT<for<'a> fn(&'a u8)> + ObjT<for<'b> fn(&'b u8)> {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: ObjT<for<'a> fn(&'a u8)> + ObjT<for<'b> fn(&'b u8)> {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error: aborting due to 27 previous errors"}, {"sha": "eaba70d7ce39599939ce613b66172c13a2af1a2c", "filename": "src/test/ui/traits/alias/no-extra-traits.stderr", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/2bc89ce0bf2fff897ccbf89c6e7aee71681d7cc1/src%2Ftest%2Fui%2Ftraits%2Falias%2Fno-extra-traits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc89ce0bf2fff897ccbf89c6e7aee71681d7cc1/src%2Ftest%2Fui%2Ftraits%2Falias%2Fno-extra-traits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Falias%2Fno-extra-traits.stderr?ref=2bc89ce0bf2fff897ccbf89c6e7aee71681d7cc1", "patch": "@@ -9,7 +9,7 @@ LL | type _T00 = dyn _0 + ObjB;\n    |                 |\n    |                 trait alias used in trait object type (first use)\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: ObjA + ObjB {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: ObjA + ObjB {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -23,7 +23,7 @@ LL | type _T01 = dyn ObjB + _0;\n    |                 |\n    |                 first non-auto trait\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: ObjB + ObjA {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: ObjB + ObjA {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -39,7 +39,7 @@ LL | type _T02 = dyn ObjB + _1;\n    |                 |\n    |                 first non-auto trait\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: ObjB + ObjA {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: ObjB + ObjA {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -55,7 +55,7 @@ LL | type _T03 = dyn _1 + ObjB;\n    |                 |\n    |                 trait alias used in trait object type (first use)\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: ObjA + ObjB {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: ObjA + ObjB {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -74,7 +74,7 @@ LL | type _T10 = dyn _2 + _3;\n    |                 |\n    |                 trait alias used in trait object type (first use)\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: ObjB + ObjB {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: ObjB + ObjB {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -93,7 +93,7 @@ LL | type _T11 = dyn _3 + _2;\n    |                 |\n    |                 trait alias used in trait object type (first use)\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: ObjB + ObjB {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: ObjB + ObjB {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -114,7 +114,7 @@ LL | type _T12 = dyn _2 + _4;\n    |                 |\n    |                 trait alias used in trait object type (first use)\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: ObjB + ObjB {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: ObjB + ObjB {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -135,7 +135,7 @@ LL | type _T13 = dyn _4 + _2;\n    |                 |\n    |                 trait alias used in trait object type (first use)\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: ObjB + ObjB {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: ObjB + ObjB {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -154,7 +154,7 @@ LL | type _T20 = dyn _5 + _1;\n    |                 |\n    |                 trait alias used in trait object type (first use)\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: ObjB + ObjA {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: ObjB + ObjA {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -173,7 +173,7 @@ LL | type _T21 = dyn _1 + _5;\n    |                 |\n    |                 trait alias used in trait object type (first use)\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: ObjA + ObjB {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: ObjA + ObjB {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -187,7 +187,7 @@ LL | type _T22 = dyn _5 + ObjA;\n    |                 |\n    |                 trait alias used in trait object type (first use)\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: ObjB + ObjA {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: ObjB + ObjA {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -201,7 +201,7 @@ LL | type _T23 = dyn ObjA + _5;\n    |                 |\n    |                 first non-auto trait\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: ObjA + ObjB {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: ObjA + ObjB {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -220,7 +220,7 @@ LL | type _T24 = dyn Send + _5 + _1 + Sync;\n    |                        |\n    |                        trait alias used in trait object type (first use)\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: ObjB + ObjA {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: ObjB + ObjA {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -239,7 +239,7 @@ LL | type _T25 = dyn _1 + Sync + _5 + Send;\n    |                 |\n    |                 trait alias used in trait object type (first use)\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: ObjA + ObjB {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: ObjA + ObjB {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -253,7 +253,7 @@ LL | type _T26 = dyn Sync + Send + _5 + ObjA;\n    |                               |\n    |                               trait alias used in trait object type (first use)\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: ObjB + ObjA {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: ObjB + ObjA {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -267,7 +267,7 @@ LL | type _T27 = dyn Send + Sync + ObjA + _5;\n    |                               |\n    |                               first non-auto trait\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: ObjA + ObjB {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: ObjA + ObjB {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -292,7 +292,7 @@ LL | type _T30 = dyn _6;\n    |                 trait alias used in trait object type (additional use)\n    |                 trait alias used in trait object type (first use)\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: ObjA + ObjB {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: ObjA + ObjB {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -317,7 +317,7 @@ LL | type _T31 = dyn _6 + Send;\n    |                 trait alias used in trait object type (additional use)\n    |                 trait alias used in trait object type (first use)\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: ObjA + ObjB {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: ObjA + ObjB {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -342,7 +342,7 @@ LL | type _T32 = dyn Send + _6;\n    |                        trait alias used in trait object type (additional use)\n    |                        trait alias used in trait object type (first use)\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: ObjA + ObjB {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: ObjA + ObjB {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -377,7 +377,7 @@ LL | type _T33 = dyn _8;\n    |                 trait alias used in trait object type (additional use)\n    |                 trait alias used in trait object type (first use)\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: ObjA + ObjB {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: ObjA + ObjB {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -412,7 +412,7 @@ LL | type _T34 = dyn _8 + Send;\n    |                 trait alias used in trait object type (additional use)\n    |                 trait alias used in trait object type (first use)\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: ObjA + ObjB {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: ObjA + ObjB {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -447,7 +447,7 @@ LL | type _T35 = dyn Send + _8;\n    |                        trait alias used in trait object type (additional use)\n    |                        trait alias used in trait object type (first use)\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: ObjA + ObjB {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: ObjA + ObjB {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -466,7 +466,7 @@ LL | type _T40 = dyn _10 + ObjA;\n    |                 |\n    |                 trait alias used in trait object type (first use)\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: ObjB + ObjA {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: ObjB + ObjA {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -485,7 +485,7 @@ LL | type _T41 = dyn ObjA + _10;\n    |                 |\n    |                 first non-auto trait\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: ObjA + ObjB {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: ObjA + ObjB {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -509,7 +509,7 @@ LL | type _T42 = dyn _10 + _1;\n    |                 |\n    |                 trait alias used in trait object type (first use)\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: ObjB + ObjA {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: ObjB + ObjA {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -528,7 +528,7 @@ LL | type _T43 = dyn Send + _10 + Sync + ObjA;\n    |                        |\n    |                        trait alias used in trait object type (first use)\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: ObjB + ObjA {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: ObjB + ObjA {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -547,7 +547,7 @@ LL | type _T44 = dyn ObjA + _10 + Send + Sync;\n    |                 |\n    |                 first non-auto trait\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: ObjA + ObjB {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: ObjA + ObjB {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -571,7 +571,7 @@ LL | type _T45 = dyn Sync + Send + _10 + _1;\n    |                               |\n    |                               trait alias used in trait object type (first use)\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: ObjB + ObjA {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: ObjB + ObjA {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error: aborting due to 28 previous errors"}, {"sha": "5421e71509f3a84e2afae3f482fe26603336400c", "filename": "src/test/ui/traits/bad-sized.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2bc89ce0bf2fff897ccbf89c6e7aee71681d7cc1/src%2Ftest%2Fui%2Ftraits%2Fbad-sized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc89ce0bf2fff897ccbf89c6e7aee71681d7cc1/src%2Ftest%2Fui%2Ftraits%2Fbad-sized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fbad-sized.stderr?ref=2bc89ce0bf2fff897ccbf89c6e7aee71681d7cc1", "patch": "@@ -6,7 +6,7 @@ LL |     let x: Vec<dyn Trait + Sized> = Vec::new();\n    |                    |\n    |                    first non-auto trait\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: Trait + Sized {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: Trait + Sized {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0277]: the size for values of type `dyn Trait` cannot be known at compilation time"}, {"sha": "021a93eacff1f1caef3933149d34f0ce7e6f7994", "filename": "src/test/ui/traits/normalize-supertrait.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2bc89ce0bf2fff897ccbf89c6e7aee71681d7cc1/src%2Ftest%2Fui%2Ftraits%2Fnormalize-supertrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bc89ce0bf2fff897ccbf89c6e7aee71681d7cc1/src%2Ftest%2Fui%2Ftraits%2Fnormalize-supertrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnormalize-supertrait.rs?ref=2bc89ce0bf2fff897ccbf89c6e7aee71681d7cc1", "previous_filename": "src/test/ui/traits/normalize-super-trait.rs"}, {"sha": "50dfcf956362eb0a15959d02e15ea562796c8098", "filename": "src/test/ui/traits/wf-object/no-duplicates.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2bc89ce0bf2fff897ccbf89c6e7aee71681d7cc1/src%2Ftest%2Fui%2Ftraits%2Fwf-object%2Fno-duplicates.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc89ce0bf2fff897ccbf89c6e7aee71681d7cc1/src%2Ftest%2Fui%2Ftraits%2Fwf-object%2Fno-duplicates.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fwf-object%2Fno-duplicates.stderr?ref=2bc89ce0bf2fff897ccbf89c6e7aee71681d7cc1", "patch": "@@ -6,7 +6,7 @@ LL | type _0 = dyn Obj + Obj;\n    |               |\n    |               first non-auto trait\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: Obj + Obj {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: Obj + Obj {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -17,7 +17,7 @@ LL | type _1 = dyn Send + Obj + Obj;\n    |                      |\n    |                      first non-auto trait\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: Obj + Obj {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: Obj + Obj {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -28,7 +28,7 @@ LL | type _2 = dyn Obj + Send + Obj;\n    |               |\n    |               first non-auto trait\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: Obj + Obj {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: Obj + Obj {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -39,7 +39,7 @@ LL | type _4 = dyn for<'a> ObjL<'a> + for<'b> ObjL<'b>;\n    |               |\n    |               first non-auto trait\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: for<'a> ObjL<'a> + for<'b> ObjL<'b> {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: for<'a> ObjL<'a> + for<'b> ObjL<'b> {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n@@ -50,7 +50,7 @@ LL | type _5 = dyn ObjT<for<'a> fn(&'a u8)> + ObjT<for<'b> fn(&'b u8)>;\n    |               |\n    |               first non-auto trait\n    |\n-   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: ObjT<for<'a> fn(&'a u8)> + ObjT<for<'b> fn(&'b u8)> {}`\n+   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: ObjT<for<'a> fn(&'a u8)> + ObjT<for<'b> fn(&'b u8)> {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error: aborting due to 5 previous errors"}]}