{"sha": "9e70541eacf60f8ed0b38d7b62315cd730a00821", "node_id": "C_kwDOAAsO6NoAKDllNzA1NDFlYWNmNjBmOGVkMGIzOGQ3YjYyMzE1Y2Q3MzBhMDA4MjE", "commit": {"author": {"name": "Ezra Shaw", "email": "ezrasure@outlook.com", "date": "2023-04-11T09:07:02Z"}, "committer": {"name": "Ezra Shaw", "email": "ezrasure@outlook.com", "date": "2023-04-11T09:07:02Z"}, "message": "refactor: extract `not_testable_error` into function", "tree": {"sha": "38e9f6addbc40d9dbc4185def96e08179a96d33c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/38e9f6addbc40d9dbc4185def96e08179a96d33c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e70541eacf60f8ed0b38d7b62315cd730a00821", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEINUdoc4Vb1yVx04IZ6vxb7Ds2HAFAmQ1I0kACgkQZ6vxb7Ds\n2HDpJA/+NkVQdd92cet06WqlY88M6cwGgJvdCkNZ3S3L2bCRnyRpQZab68eLMrAI\nUfHTm0xuIV6SP+z+PM81rYYkmAUO/JnYeyO8ReR3I785RJOMtCzw0FMBCm9mf/pX\nCTwFZzuy+Oh92BfJy5sH92zEAPvILd45kwBMUfklHt/VtUwqIuzndjBplncEVepg\nNWCepTgLZvf3yqaYOH+fPG6vVH2mloxki2sHqHlEDwFMSBG34wKtfzuMOxZH/J2Q\nYhh3qszSIfMmouy2YDagJZtfhmmRhFYeTUCcxIxNemtiubz1Gwb6PXIZ/dtcbpHL\nZGCifTPtY1aP7Uk2YhFcXwb8JXQHyJa6C2FxISVS2CLABdMuBgx4eTTqwP/HTqZ5\nWHYBnyNEgF0Ji/HrRmWtH5IrFv9l78WniFTRwIxsvxnLNPcuSDPGGhiIPUIFXdPf\ngenrcYKfSMRw4u/ScCYuK5tqt3kG7j6bwhr/pAmHBu37pnsefUuBD6Gp6+1VSMSB\nIlb+3tKO/KnsbaYD+eUJnikoOBLzRI3z6V7uIH/dxBS4BpASiLXw+e6WwQ0QFDlr\nDJyhHFd1wqRdbwH8ExYjrU/e/52qYocsdLcA3hSzADGO/sAHatV39057ElVCh7rt\n8bt7m1v1gkcBeRts7v/IrL8Cc/erfo9D1xYoezByGFM4ht6vGp4=\n=Bj+d\n-----END PGP SIGNATURE-----", "payload": "tree 38e9f6addbc40d9dbc4185def96e08179a96d33c\nparent f4e7a99662f710c57b6166418f1c3ac496269c96\nauthor Ezra Shaw <ezrasure@outlook.com> 1681204022 +1200\ncommitter Ezra Shaw <ezrasure@outlook.com> 1681204022 +1200\n\nrefactor: extract `not_testable_error` into function\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e70541eacf60f8ed0b38d7b62315cd730a00821", "html_url": "https://github.com/rust-lang/rust/commit/9e70541eacf60f8ed0b38d7b62315cd730a00821", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e70541eacf60f8ed0b38d7b62315cd730a00821/comments", "author": {"login": "Ezrashaw", "id": 38062690, "node_id": "MDQ6VXNlcjM4MDYyNjkw", "avatar_url": "https://avatars.githubusercontent.com/u/38062690?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ezrashaw", "html_url": "https://github.com/Ezrashaw", "followers_url": "https://api.github.com/users/Ezrashaw/followers", "following_url": "https://api.github.com/users/Ezrashaw/following{/other_user}", "gists_url": "https://api.github.com/users/Ezrashaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ezrashaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ezrashaw/subscriptions", "organizations_url": "https://api.github.com/users/Ezrashaw/orgs", "repos_url": "https://api.github.com/users/Ezrashaw/repos", "events_url": "https://api.github.com/users/Ezrashaw/events{/privacy}", "received_events_url": "https://api.github.com/users/Ezrashaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Ezrashaw", "id": 38062690, "node_id": "MDQ6VXNlcjM4MDYyNjkw", "avatar_url": "https://avatars.githubusercontent.com/u/38062690?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ezrashaw", "html_url": "https://github.com/Ezrashaw", "followers_url": "https://api.github.com/users/Ezrashaw/followers", "following_url": "https://api.github.com/users/Ezrashaw/following{/other_user}", "gists_url": "https://api.github.com/users/Ezrashaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ezrashaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ezrashaw/subscriptions", "organizations_url": "https://api.github.com/users/Ezrashaw/orgs", "repos_url": "https://api.github.com/users/Ezrashaw/repos", "events_url": "https://api.github.com/users/Ezrashaw/events{/privacy}", "received_events_url": "https://api.github.com/users/Ezrashaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4e7a99662f710c57b6166418f1c3ac496269c96", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4e7a99662f710c57b6166418f1c3ac496269c96", "html_url": "https://github.com/rust-lang/rust/commit/f4e7a99662f710c57b6166418f1c3ac496269c96"}], "stats": {"total": 64, "additions": 32, "deletions": 32}, "files": [{"sha": "79d8be2484b5978bf513e3037def717b70848d8d", "filename": "compiler/rustc_builtin_macros/src/test.rs", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/9e70541eacf60f8ed0b38d7b62315cd730a00821/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e70541eacf60f8ed0b38d7b62315cd730a00821/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs?ref=9e70541eacf60f8ed0b38d7b62315cd730a00821", "patch": "@@ -107,36 +107,6 @@ pub fn expand_test_or_bench(\n         return vec![];\n     }\n \n-    let not_testable_error = |item: Option<&ast::Item>| {\n-        let diag = &cx.sess.parse_sess.span_diagnostic;\n-        let msg = \"the `#[test]` attribute may only be used on a non-associated function\";\n-        let mut err = match item.map(|i| &i.kind) {\n-            // These were a warning before #92959 and need to continue being that to avoid breaking\n-            // stable user code (#94508).\n-            Some(ast::ItemKind::MacCall(_)) => diag.struct_span_warn(attr_sp, msg),\n-            // `.forget_guarantee()` needed to get these two arms to match types. Because of how\n-            // locally close the `.emit()` call is I'm comfortable with it, but if it can be\n-            // reworked in the future to not need it, it'd be nice.\n-            _ => diag.struct_span_err(attr_sp, msg).forget_guarantee(),\n-        };\n-        if let Some(item) = item {\n-            err.span_label(\n-                item.span,\n-                format!(\n-                    \"expected a non-associated function, found {} {}\",\n-                    item.kind.article(),\n-                    item.kind.descr()\n-                ),\n-            );\n-        }\n-        err.span_label(attr_sp, \"the `#[test]` macro causes a function to be run as a test and has no effect on non-functions\")\n-            .span_suggestion(attr_sp,\n-                \"replace with conditional compilation to make the item only exist when tests are being run\",\n-                \"#[cfg(test)]\",\n-                Applicability::MaybeIncorrect)\n-            .emit();\n-    };\n-\n     let (item, is_stmt) = match item {\n         Annotatable::Item(i) => (i, false),\n         Annotatable::Stmt(stmt) if matches!(stmt.kind, ast::StmtKind::Item(_)) => {\n@@ -148,13 +118,13 @@ pub fn expand_test_or_bench(\n             }\n         }\n         other => {\n-            not_testable_error(None);\n+            not_testable_error(cx, attr_sp, None);\n             return vec![other];\n         }\n     };\n \n     let ast::ItemKind::Fn(fn_) = &item.kind else {\n-        not_testable_error(Some(&item));\n+        not_testable_error(cx, attr_sp, Some(&item));\n         return if is_stmt {\n             vec![Annotatable::Stmt(P(ast::Stmt {\n                 id: ast::DUMMY_NODE_ID,\n@@ -416,6 +386,36 @@ pub fn expand_test_or_bench(\n     }\n }\n \n+fn not_testable_error(cx: &ExtCtxt<'_>, attr_sp: Span, item: Option<&ast::Item>) {\n+    let diag = &cx.sess.parse_sess.span_diagnostic;\n+    let msg = \"the `#[test]` attribute may only be used on a non-associated function\";\n+    let mut err = match item.map(|i| &i.kind) {\n+        // These were a warning before #92959 and need to continue being that to avoid breaking\n+        // stable user code (#94508).\n+        Some(ast::ItemKind::MacCall(_)) => diag.struct_span_warn(attr_sp, msg),\n+        // `.forget_guarantee()` needed to get these two arms to match types. Because of how\n+        // locally close the `.emit()` call is I'm comfortable with it, but if it can be\n+        // reworked in the future to not need it, it'd be nice.\n+        _ => diag.struct_span_err(attr_sp, msg).forget_guarantee(),\n+    };\n+    if let Some(item) = item {\n+        err.span_label(\n+            item.span,\n+            format!(\n+                \"expected a non-associated function, found {} {}\",\n+                item.kind.article(),\n+                item.kind.descr()\n+            ),\n+        );\n+    }\n+    err.span_label(attr_sp, \"the `#[test]` macro causes a function to be run as a test and has no effect on non-functions\")\n+        .span_suggestion(attr_sp,\n+            \"replace with conditional compilation to make the item only exist when tests are being run\",\n+            \"#[cfg(test)]\",\n+            Applicability::MaybeIncorrect)\n+        .emit();\n+}\n+\n fn get_location_info(cx: &ExtCtxt<'_>, item: &ast::Item) -> (Symbol, usize, usize, usize, usize) {\n     let span = item.ident.span;\n     let (source_file, lo_line, lo_col, hi_line, hi_col) ="}]}