{"sha": "a4e5c0fe847aad5d7afb727441466cdd4fae9ac7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0ZTVjMGZlODQ3YWFkNWQ3YWZiNzI3NDQxNDY2Y2RkNGZhZTlhYzc=", "commit": {"author": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2015-11-10T20:38:36Z"}, "committer": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2015-11-12T13:39:23Z"}, "message": "Add a MIR pass to simplify the control flow graph\n\nFor now, this pass does some easy transformations, like eliminating\nempty blocks that just jump to another block, some trivial\nconversion of If terminators into Gotos and removal of dead blocks.", "tree": {"sha": "05ff28c58e86f66b73e2ed99a01ba4f845328ade", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05ff28c58e86f66b73e2ed99a01ba4f845328ade"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a4e5c0fe847aad5d7afb727441466cdd4fae9ac7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a4e5c0fe847aad5d7afb727441466cdd4fae9ac7", "html_url": "https://github.com/rust-lang/rust/commit/a4e5c0fe847aad5d7afb727441466cdd4fae9ac7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a4e5c0fe847aad5d7afb727441466cdd4fae9ac7/comments", "author": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9aa32ac728b297ed8f62e592e1de5ac86b6e4a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9aa32ac728b297ed8f62e592e1de5ac86b6e4a3", "html_url": "https://github.com/rust-lang/rust/commit/e9aa32ac728b297ed8f62e592e1de5ac86b6e4a3"}], "stats": {"total": 224, "additions": 223, "deletions": 1}, "files": [{"sha": "c391a01960f86a4963aa98c2597bdad5d29bc5e1", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a4e5c0fe847aad5d7afb727441466cdd4fae9ac7/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e5c0fe847aad5d7afb727441466cdd4fae9ac7/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=a4e5c0fe847aad5d7afb727441466cdd4fae9ac7", "patch": "@@ -34,6 +34,7 @@ pub mod mir_map;\n mod hair;\n pub mod repr;\n mod graphviz;\n+pub mod transform;\n pub mod tcx;\n pub mod visit;\n "}, {"sha": "1e488ceedfd883e25463d13bb2eb24049ed6e271", "filename": "src/librustc_mir/mir_map.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a4e5c0fe847aad5d7afb727441466cdd4fae9ac7/src%2Flibrustc_mir%2Fmir_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e5c0fe847aad5d7afb727441466cdd4fae9ac7/src%2Flibrustc_mir%2Fmir_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmir_map.rs?ref=a4e5c0fe847aad5d7afb727441466cdd4fae9ac7", "patch": "@@ -22,6 +22,7 @@ extern crate rustc_front;\n \n use build;\n use dot;\n+use transform::*;\n use repr::Mir;\n use hair::cx::{PatNode, Cx};\n use std::fs::File;\n@@ -147,7 +148,9 @@ impl<'a, 'm, 'tcx> visit::Visitor<'tcx> for InnerDump<'a,'m,'tcx> {\n         let infcx = infer::new_infer_ctxt(self.tcx, &self.tcx.tables, Some(param_env), true);\n \n         match build_mir(Cx::new(&infcx), implicit_arg_tys, id, span, decl, body) {\n-            Ok(mir) => {\n+            Ok(mut mir) => {\n+                simplify_cfg::SimplifyCfg::new().run_on_mir(&mut mir);\n+\n                 let meta_item_list = self.attr\n                                          .iter()\n                                          .flat_map(|a| a.meta_item_list())"}, {"sha": "c036216b5bb0c107e1d0aab36cbbdf1e671f83d3", "filename": "src/librustc_mir/repr.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a4e5c0fe847aad5d7afb727441466cdd4fae9ac7/src%2Flibrustc_mir%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e5c0fe847aad5d7afb727441466cdd4fae9ac7/src%2Flibrustc_mir%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Frepr.rs?ref=a4e5c0fe847aad5d7afb727441466cdd4fae9ac7", "patch": "@@ -307,6 +307,20 @@ impl<'tcx> Terminator<'tcx> {\n             Call { data: _, targets: ref b } => b,\n         }\n     }\n+\n+    pub fn successors_mut(&mut self) -> &mut [BasicBlock] {\n+        use self::Terminator::*;\n+        match *self {\n+            Goto { target: ref mut b } => slice::mut_ref_slice(b),\n+            Panic { target: ref mut b } => slice::mut_ref_slice(b),\n+            If { cond: _, targets: ref mut b } => b,\n+            Switch { targets: ref mut b, .. } => b,\n+            SwitchInt { targets: ref mut b, .. } => b,\n+            Diverge => &mut [],\n+            Return => &mut [],\n+            Call { data: _, targets: ref mut b } => b,\n+        }\n+    }\n }\n \n #[derive(Debug)]"}, {"sha": "bee6d4d7ddda8f77d37851c6dd792038f451392d", "filename": "src/librustc_mir/transform/mod.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a4e5c0fe847aad5d7afb727441466cdd4fae9ac7/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e5c0fe847aad5d7afb727441466cdd4fae9ac7/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=a4e5c0fe847aad5d7afb727441466cdd4fae9ac7", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub mod simplify_cfg;\n+mod util;\n+\n+use repr::Mir;\n+\n+pub trait MirPass {\n+    fn run_on_mir(&mut self, mir: &mut Mir);\n+}"}, {"sha": "71dd2f077fec20cb1e714503322cabe9213a8835", "filename": "src/librustc_mir/transform/simplify_cfg.rs", "status": "added", "additions": 135, "deletions": 0, "changes": 135, "blob_url": "https://github.com/rust-lang/rust/blob/a4e5c0fe847aad5d7afb727441466cdd4fae9ac7/src%2Flibrustc_mir%2Ftransform%2Fsimplify_cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e5c0fe847aad5d7afb727441466cdd4fae9ac7/src%2Flibrustc_mir%2Ftransform%2Fsimplify_cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify_cfg.rs?ref=a4e5c0fe847aad5d7afb727441466cdd4fae9ac7", "patch": "@@ -0,0 +1,135 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use repr::*;\n+use rustc::middle::const_eval::ConstVal;\n+use std::mem;\n+use transform::util;\n+use transform::MirPass;\n+\n+pub struct SimplifyCfg;\n+\n+impl SimplifyCfg {\n+    pub fn new() -> SimplifyCfg {\n+        SimplifyCfg\n+    }\n+\n+    fn remove_dead_blocks(&self, mir: &mut Mir) {\n+        let mut seen = vec![false; mir.basic_blocks.len()];\n+\n+        // These blocks are always required.\n+        seen[START_BLOCK.index()] = true;\n+        seen[END_BLOCK.index()] = true;\n+        seen[DIVERGE_BLOCK.index()] = true;\n+\n+        let mut worklist = vec![START_BLOCK];\n+        while let Some(bb) = worklist.pop() {\n+            for succ in mir.basic_block_data(bb).terminator.successors() {\n+                if !seen[succ.index()] {\n+                    seen[succ.index()] = true;\n+                    worklist.push(*succ);\n+                }\n+            }\n+        }\n+\n+        util::retain_basic_blocks(mir, &seen);\n+    }\n+\n+    fn remove_goto_chains(&self, mir: &mut Mir) -> bool {\n+\n+        // Find the target at the end of the jump chain, return None if there is a loop\n+        fn final_target(mir: &Mir, mut target: BasicBlock) -> Option<BasicBlock> {\n+            // Keep track of already seen blocks to detect loops\n+            let mut seen: Vec<BasicBlock> = Vec::with_capacity(8);\n+\n+            while mir.basic_block_data(target).statements.is_empty() {\n+                match mir.basic_block_data(target).terminator {\n+                    Terminator::Goto { target: next } => {\n+                        if seen.contains(&next) {\n+                            return None;\n+                        }\n+                        seen.push(next);\n+                        target = next;\n+                    }\n+                    _ => break\n+                }\n+            }\n+\n+            Some(target)\n+        }\n+\n+        let mut changed = false;\n+        for bb in mir.all_basic_blocks() {\n+            // Temporarily swap out the terminator we're modifying to keep borrowck happy\n+            let mut terminator = Terminator::Diverge;\n+            mem::swap(&mut terminator, &mut mir.basic_block_data_mut(bb).terminator);\n+\n+            for target in terminator.successors_mut() {\n+                let new_target = match final_target(mir, *target) {\n+                    Some(new_target) => new_target,\n+                    None if mir.basic_block_data(bb).statements.is_empty() => bb,\n+                    None => continue\n+                };\n+                changed |= *target != new_target;\n+                *target = new_target;\n+            }\n+\n+            mir.basic_block_data_mut(bb).terminator = terminator;\n+        }\n+\n+        changed\n+    }\n+\n+    fn simplify_branches(&self, mir: &mut Mir) -> bool {\n+        let mut changed = false;\n+\n+        for bb in mir.all_basic_blocks() {\n+            // Temporarily swap out the terminator we're modifying to keep borrowck happy\n+            let mut terminator = Terminator::Diverge;\n+            mem::swap(&mut terminator, &mut mir.basic_block_data_mut(bb).terminator);\n+\n+            mir.basic_block_data_mut(bb).terminator = match terminator {\n+                Terminator::If { ref targets, .. } if targets[0] == targets[1] => {\n+                    changed = true;\n+                    Terminator::Goto { target: targets[0] }\n+                }\n+                Terminator::If { ref targets, cond: Operand::Constant(Constant {\n+                    literal: Literal::Value {\n+                        value: ConstVal::Bool(cond)\n+                    }, ..\n+                }) } => {\n+                    changed = true;\n+                    let target_idx = if cond { 0 } else { 1 };\n+                    Terminator::Goto { target: targets[target_idx] }\n+                }\n+                Terminator::SwitchInt { ref targets, .. }  if targets.len() == 1 => {\n+                    Terminator::Goto { target: targets[0] }\n+                }\n+                _ => terminator\n+            }\n+        }\n+\n+        changed\n+    }\n+}\n+\n+impl MirPass for SimplifyCfg {\n+    fn run_on_mir(&mut self, mir: &mut Mir) {\n+        let mut changed = true;\n+        while changed {\n+            changed = self.simplify_branches(mir);\n+            changed |= self.remove_goto_chains(mir);\n+            self.remove_dead_blocks(mir);\n+        }\n+\n+        // FIXME: Should probably be moved into some kind of pass manager\n+        mir.basic_blocks.shrink_to_fit();\n+    }\n+}"}, {"sha": "e45cfa8395472d31269f02888122ec63a37670b9", "filename": "src/librustc_mir/transform/util.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/a4e5c0fe847aad5d7afb727441466cdd4fae9ac7/src%2Flibrustc_mir%2Ftransform%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e5c0fe847aad5d7afb727441466cdd4fae9ac7/src%2Flibrustc_mir%2Ftransform%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Futil.rs?ref=a4e5c0fe847aad5d7afb727441466cdd4fae9ac7", "patch": "@@ -0,0 +1,51 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use repr::*;\n+\n+/// Update basic block ids in all terminators using the given replacements,\n+/// useful e.g. after removal of several basic blocks to update all terminators\n+/// in a single pass\n+pub fn update_basic_block_ids(mir: &mut Mir, replacements: &[BasicBlock]) {\n+    for bb in mir.all_basic_blocks() {\n+        for target in mir.basic_block_data_mut(bb).terminator.successors_mut() {\n+            *target = replacements[target.index()];\n+        }\n+    }\n+}\n+\n+/// Mass removal of basic blocks to keep the ID-remapping cheap.\n+pub fn retain_basic_blocks(mir: &mut Mir, keep: &[bool]) {\n+    let num_blocks = mir.basic_blocks.len();\n+\n+    // Check that we have a usage flag for every block\n+    assert_eq!(num_blocks, keep.len());\n+\n+    let first_dead = match keep.iter().position(|&k| !k) {\n+        None => return,\n+        Some(first_dead) => first_dead,\n+    };\n+\n+    // `replacements` maps the old block ids to the new ones\n+    let mut replacements: Vec<_> = (0..num_blocks).map(BasicBlock::new).collect();\n+\n+    let mut dead = 0;\n+    for i in first_dead..num_blocks {\n+        if keep[i] {\n+            replacements[i] = BasicBlock::new(i - dead);\n+            mir.basic_blocks.swap(i, i - dead);\n+        } else {\n+            dead += 1;\n+        }\n+    }\n+    mir.basic_blocks.truncate(num_blocks - dead);\n+\n+    update_basic_block_ids(mir, &replacements);\n+}"}]}