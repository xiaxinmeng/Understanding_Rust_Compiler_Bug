{"sha": "da96d22d3a8bd4ad74e797b823dd10a34d88991e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhOTZkMjJkM2E4YmQ0YWQ3NGU3OTdiODIzZGQxMGEzNGQ4ODk5MWU=", "commit": {"author": {"name": "Johannes Oertel", "email": "johannes.oertel@uni-due.de", "date": "2015-03-18T21:34:40Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-03-19T02:54:38Z"}, "message": "Rename should_fail to should_panic in docs", "tree": {"sha": "1ec05321ccaff1581e1c6b6ad15baef5f781bddf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ec05321ccaff1581e1c6b6ad15baef5f781bddf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da96d22d3a8bd4ad74e797b823dd10a34d88991e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da96d22d3a8bd4ad74e797b823dd10a34d88991e", "html_url": "https://github.com/rust-lang/rust/commit/da96d22d3a8bd4ad74e797b823dd10a34d88991e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da96d22d3a8bd4ad74e797b823dd10a34d88991e/comments", "author": {"login": "jooert", "id": 1774713, "node_id": "MDQ6VXNlcjE3NzQ3MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1774713?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jooert", "html_url": "https://github.com/jooert", "followers_url": "https://api.github.com/users/jooert/followers", "following_url": "https://api.github.com/users/jooert/following{/other_user}", "gists_url": "https://api.github.com/users/jooert/gists{/gist_id}", "starred_url": "https://api.github.com/users/jooert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jooert/subscriptions", "organizations_url": "https://api.github.com/users/jooert/orgs", "repos_url": "https://api.github.com/users/jooert/repos", "events_url": "https://api.github.com/users/jooert/events{/privacy}", "received_events_url": "https://api.github.com/users/jooert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12cb7c6a2847959460ecac75b2c983d071585472", "url": "https://api.github.com/repos/rust-lang/rust/commits/12cb7c6a2847959460ecac75b2c983d071585472", "html_url": "https://github.com/rust-lang/rust/commit/12cb7c6a2847959460ecac75b2c983d071585472"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "92573d792177362ad724278699f3d9d13cd2839c", "filename": "src/doc/reference.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da96d22d3a8bd4ad74e797b823dd10a34d88991e/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/da96d22d3a8bd4ad74e797b823dd10a34d88991e/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=da96d22d3a8bd4ad74e797b823dd10a34d88991e", "patch": "@@ -2068,7 +2068,7 @@ type int8_t = i8;\n   item](#language-items) for more details.\n - `test` - indicates that this function is a test function, to only be compiled\n   in case of `--test`.\n-- `should_fail` - indicates that this test function should panic, inverting the success condition.\n+- `should_panic` - indicates that this test function should panic, inverting the success condition.\n - `cold` - The function is unlikely to be executed, so optimize it (and calls\n   to it) differently.\n "}, {"sha": "8e8ee8d63d626e6112bf4ef46f86180cf0743e4d", "filename": "src/doc/trpl/functions.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da96d22d3a8bd4ad74e797b823dd10a34d88991e/src%2Fdoc%2Ftrpl%2Ffunctions.md", "raw_url": "https://github.com/rust-lang/rust/raw/da96d22d3a8bd4ad74e797b823dd10a34d88991e/src%2Fdoc%2Ftrpl%2Ffunctions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Ffunctions.md?ref=da96d22d3a8bd4ad74e797b823dd10a34d88991e", "patch": "@@ -179,7 +179,7 @@ Because this function will cause a crash, it will never return, and so it has\n the type '`!`', which is read \"diverges.\" A diverging function can be used\n as any type:\n \n-```should_fail\n+```should_panic\n # fn diverges() -> ! {\n #    panic!(\"This function never returns!\");\n # }"}, {"sha": "72e9ec9f7509ad9ccab80dba6298a07d30f7c8cf", "filename": "src/doc/trpl/testing.md", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/da96d22d3a8bd4ad74e797b823dd10a34d88991e/src%2Fdoc%2Ftrpl%2Ftesting.md", "raw_url": "https://github.com/rust-lang/rust/raw/da96d22d3a8bd4ad74e797b823dd10a34d88991e/src%2Fdoc%2Ftrpl%2Ftesting.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Ftesting.md?ref=da96d22d3a8bd4ad74e797b823dd10a34d88991e", "patch": "@@ -129,11 +129,11 @@ $ echo $?\n \n This is useful if you want to integrate `cargo test` into other tooling.\n \n-We can invert our test's failure with another attribute: `should_fail`:\n+We can invert our test's failure with another attribute: `should_panic`:\n \n ```rust\n #[test]\n-#[should_fail]\n+#[should_panic]\n fn it_works() {\n     assert!(false);\n }\n@@ -163,13 +163,13 @@ equality:\n \n ```rust\n #[test]\n-#[should_fail]\n+#[should_panic]\n fn it_works() {\n     assert_eq!(\"Hello\", \"world\");\n }\n ```\n \n-Does this test pass or fail? Because of the `should_fail` attribute, it\n+Does this test pass or fail? Because of the `should_panic` attribute, it\n passes:\n \n ```bash\n@@ -189,15 +189,15 @@ running 0 tests\n test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured\n ```\n \n-`should_fail` tests can be fragile, as it's hard to guarantee that the test\n+`should_panic` tests can be fragile, as it's hard to guarantee that the test\n didn't fail for an unexpected reason. To help with this, an optional `expected`\n-parameter can be added to the `should_fail` attribute. The test harness will\n+parameter can be added to the `should_panic` attribute. The test harness will\n make sure that the failure message contains the provided text. A safer version\n of the example above would be:\n \n ```\n #[test]\n-#[should_fail(expected = \"assertion failed\")]\n+#[should_panic(expected = \"assertion failed\")]\n fn it_works() {\n     assert_eq!(\"Hello\", \"world\");\n }"}]}