{"sha": "fb2ed457c6bdbe587e2ac21c2f671d3e30bab353", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiMmVkNDU3YzZiZGJlNTg3ZTJhYzIxYzJmNjcxZDNlMzBiYWIzNTM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-08-04T23:01:46Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-08-04T23:02:16Z"}, "message": "consolidate making Undef release a NOP in one place", "tree": {"sha": "530e47f37d49ed7791926f80cb6ede5b7227f876", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/530e47f37d49ed7791926f80cb6ede5b7227f876"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb2ed457c6bdbe587e2ac21c2f671d3e30bab353", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb2ed457c6bdbe587e2ac21c2f671d3e30bab353", "html_url": "https://github.com/rust-lang/rust/commit/fb2ed457c6bdbe587e2ac21c2f671d3e30bab353", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb2ed457c6bdbe587e2ac21c2f671d3e30bab353/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4957031e3cf2333ae5c5519ffd03237eb4ca426c", "url": "https://api.github.com/repos/rust-lang/rust/commits/4957031e3cf2333ae5c5519ffd03237eb4ca426c", "html_url": "https://github.com/rust-lang/rust/commit/4957031e3cf2333ae5c5519ffd03237eb4ca426c"}], "stats": {"total": 19, "additions": 10, "deletions": 9}, "files": [{"sha": "f77c7d65ff7de66d3c8e42d747e9bd290e1b152e", "filename": "src/librustc_mir/interpret/validation.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/fb2ed457c6bdbe587e2ac21c2f671d3e30bab353/src%2Flibrustc_mir%2Finterpret%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb2ed457c6bdbe587e2ac21c2f671d3e30bab353/src%2Flibrustc_mir%2Finterpret%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidation.rs?ref=fb2ed457c6bdbe587e2ac21c2f671d3e30bab353", "patch": "@@ -11,7 +11,7 @@ use super::{\n     EvalError, EvalResult, EvalErrorKind,\n     EvalContext, DynamicLifetime,\n     AccessKind, LockInfo,\n-    PrimVal, Value,\n+    Value,\n     Lvalue, LvalueExtra,\n     Machine,\n };\n@@ -156,10 +156,11 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n     fn validate(&mut self, query: ValidationQuery<'tcx>, mode: ValidationMode) -> EvalResult<'tcx>\n     {\n         match self.try_validate(query, mode) {\n-            // HACK: If, during releasing, we hit memory we cannot use, we just ignore that.\n-            // This can happen because releases are added before drop elaboration.\n-            // TODO: Fix the MIR so that these releases do not happen.\n-            res @ Err(EvalError{ kind: EvalErrorKind::DanglingPointerDeref, ..}) |\n+            // Releasing an uninitalized variable is a NOP.  This is needed because\n+            // we have to release the return value of a function; due to destination-passing-style\n+            // the callee may directly write there.\n+            // TODO: Ideally we would know whether the destination is already initialized, and only\n+            // release if it is.\n             res @ Err(EvalError{ kind: EvalErrorKind::ReadUndefBytes, ..}) => {\n                 if let ValidationMode::Release = mode {\n                     return Ok(());\n@@ -187,16 +188,14 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n             }\n         }\n \n-        // Release of an Undef local is fine, and a NOP.\n         // HACK: For now, bail out if we hit a dead local during recovery (can happen because sometimes we have\n-        // StorageDead before EndRegion).\n+        // StorageDead before EndRegion due to https://github.com/rust-lang/rust/issues/43481).\n         // TODO: We should rather fix the MIR.\n         match query.lval {\n             Lvalue::Local { frame, local } => {\n                 let res = self.stack[frame].get_local(local);\n                 match (res, mode) {\n-                    (Err(EvalError{ kind: EvalErrorKind::DeadLocal, ..}), ValidationMode::Recover(_)) |\n-                    (Ok(Value::ByVal(PrimVal::Undef)), ValidationMode::Release) => {\n+                    (Err(EvalError{ kind: EvalErrorKind::DeadLocal, ..}), ValidationMode::Recover(_)) => {\n                         return Ok(());\n                     }\n                     _ => {},"}, {"sha": "88ffc57a8f0688df78c95d2df3b7120c62050b0f", "filename": "src/librustc_mir/interpret/value.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb2ed457c6bdbe587e2ac21c2f671d3e30bab353/src%2Flibrustc_mir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb2ed457c6bdbe587e2ac21c2f671d3e30bab353/src%2Flibrustc_mir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalue.rs?ref=fb2ed457c6bdbe587e2ac21c2f671d3e30bab353", "patch": "@@ -197,6 +197,7 @@ impl<'a, 'tcx: 'a> Value {\n \n             ByValPair(ptr, vtable) => Ok((ptr.into(), vtable.to_ptr()?)),\n \n+            ByVal(PrimVal::Undef) => err!(ReadUndefBytes),\n             _ => bug!(\"expected ptr and vtable, got {:?}\", self),\n         }\n     }\n@@ -216,6 +217,7 @@ impl<'a, 'tcx: 'a> Value {\n                 assert_eq!(len as u64 as u128, len);\n                 Ok((ptr.into(), len as u64))\n             },\n+            ByVal(PrimVal::Undef) => err!(ReadUndefBytes),\n             ByVal(_) => bug!(\"expected ptr and length, got {:?}\", self),\n         }\n     }"}]}