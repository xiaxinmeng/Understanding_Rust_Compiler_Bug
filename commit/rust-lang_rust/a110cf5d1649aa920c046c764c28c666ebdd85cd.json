{"sha": "a110cf5d1649aa920c046c764c28c666ebdd85cd", "node_id": "C_kwDOAAsO6NoAKGExMTBjZjVkMTY0OWFhOTIwYzA0NmM3NjRjMjhjNjY2ZWJkZDg1Y2Q", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2023-02-15T06:54:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-02-15T06:54:54Z"}, "message": "Rollup merge of #107173 - clubby789:suggest-array-length, r=compiler-errors\n\nSuggest the correct array length on mismatch\n\nFixes #107156\n\nI wasn't able to find a way to get the `Span` for the actual array size unfortunately, so this suggestion can't be applied automatically.\n\n``@rustbot`` label +A-diagnostics", "tree": {"sha": "5f6647cae36848e755d891bf5b01d2a12ad3c502", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f6647cae36848e755d891bf5b01d2a12ad3c502"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a110cf5d1649aa920c046c764c28c666ebdd85cd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj7IG+CRBK7hj4Ov3rIwAA4dUIAJB4SgKEKodUO/ejRIkTM6Fp\npGokyLsVA2VI4Io+0ES6vtAbYtoJEc6n9G2wV3/dwZspzGNu8unW1NFoHM5PoRwi\nZnxKnRRm5oUYoZQwjrtRBBrDcJ5RAHZVR8BFj93hhly1LuTzP5yavXCT5BvL1YT7\nQqldPwWp/LySmGjXsNPjv1WSOz1Ib23QPl+gPy/rRLXVBOzq5xFC+pSvrMLl37Ui\ntwz0+x9VaFdu5j2SKH5tTW4g6SEDJeVa4vMPKc7QXraR9dPtHsw36NX0AamncTr3\n69bWa0qq50VcEB6YcLcoIuZHXdjnoirTYcR98oQczoTqZnt5JP1/Bbt3XfLl1ek=\n=m7Pg\n-----END PGP SIGNATURE-----\n", "payload": "tree 5f6647cae36848e755d891bf5b01d2a12ad3c502\nparent 9800dbe88352357ca3637d74f99cc50b04f8e114\nparent 903ca873f75e3fcea2bf4cf583ae835525e38367\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1676444094 +0530\ncommitter GitHub <noreply@github.com> 1676444094 +0530\n\nRollup merge of #107173 - clubby789:suggest-array-length, r=compiler-errors\n\nSuggest the correct array length on mismatch\n\nFixes #107156\n\nI wasn't able to find a way to get the `Span` for the actual array size unfortunately, so this suggestion can't be applied automatically.\n\n``@rustbot`` label +A-diagnostics\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a110cf5d1649aa920c046c764c28c666ebdd85cd", "html_url": "https://github.com/rust-lang/rust/commit/a110cf5d1649aa920c046c764c28c666ebdd85cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a110cf5d1649aa920c046c764c28c666ebdd85cd/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9800dbe88352357ca3637d74f99cc50b04f8e114", "url": "https://api.github.com/repos/rust-lang/rust/commits/9800dbe88352357ca3637d74f99cc50b04f8e114", "html_url": "https://github.com/rust-lang/rust/commit/9800dbe88352357ca3637d74f99cc50b04f8e114"}, {"sha": "903ca873f75e3fcea2bf4cf583ae835525e38367", "url": "https://api.github.com/repos/rust-lang/rust/commits/903ca873f75e3fcea2bf4cf583ae835525e38367", "html_url": "https://github.com/rust-lang/rust/commit/903ca873f75e3fcea2bf4cf583ae835525e38367"}], "stats": {"total": 121, "additions": 119, "deletions": 2}, "files": [{"sha": "1d3fcf7571ebc83ca542c940c4250215be652739", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/a110cf5d1649aa920c046c764c28c666ebdd85cd/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a110cf5d1649aa920c046c764c28c666ebdd85cd/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=a110cf5d1649aa920c046c764c28c666ebdd85cd", "patch": "@@ -64,6 +64,7 @@ use rustc_errors::{Applicability, DiagnosticBuilder, DiagnosticStyledString};\n use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::{DefId, LocalDefId};\n+use rustc_hir::intravisit::Visitor;\n use rustc_hir::lang_items::LangItem;\n use rustc_hir::Node;\n use rustc_middle::dep_graph::DepContext;\n@@ -1985,6 +1986,70 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                         (ty::Bool, ty::Tuple(list)) => if list.len() == 0 {\n                             self.suggest_let_for_letchains(&mut err, &trace.cause, span);\n                         }\n+                        (ty::Array(_, _), ty::Array(_, _)) => 'block: {\n+                            let hir = self.tcx.hir();\n+                            let TypeError::FixedArraySize(sz) = terr else {\n+                                break 'block;\n+                            };\n+                            let tykind = match hir.find_by_def_id(trace.cause.body_id) {\n+                                Some(hir::Node::Item(hir::Item {\n+                                    kind: hir::ItemKind::Fn(_, _, body_id),\n+                                    ..\n+                                })) => {\n+                                    let body = hir.body(*body_id);\n+                                    struct LetVisitor<'v> {\n+                                        span: Span,\n+                                        result: Option<&'v hir::Ty<'v>>,\n+                                    }\n+                                    impl<'v> Visitor<'v> for LetVisitor<'v> {\n+                                        fn visit_stmt(&mut self, s: &'v hir::Stmt<'v>) {\n+                                            if self.result.is_some() {\n+                                                return;\n+                                            }\n+                                            // Find a local statement where the initializer has\n+                                            // the same span as the error and the type is specified.\n+                                            if let hir::Stmt {\n+                                                kind: hir::StmtKind::Local(hir::Local {\n+                                                    init: Some(hir::Expr {\n+                                                        span: init_span,\n+                                                        ..\n+                                                    }),\n+                                                    ty: Some(array_ty),\n+                                                    ..\n+                                                }),\n+                                                ..\n+                                            } = s\n+                                            && init_span == &self.span {\n+                                                self.result = Some(*array_ty);\n+                                            }\n+                                        }\n+                                    }\n+                                    let mut visitor = LetVisitor {span, result: None};\n+                                    visitor.visit_body(body);\n+                                    visitor.result.map(|r| &r.peel_refs().kind)\n+                                }\n+                                Some(hir::Node::Item(hir::Item {\n+                                    kind: hir::ItemKind::Const(ty, _),\n+                                    ..\n+                                })) => {\n+                                    Some(&ty.peel_refs().kind)\n+                                }\n+                                _ => None\n+                            };\n+\n+                            if let Some(tykind) = tykind\n+                                && let hir::TyKind::Array(_, length) = tykind\n+                                && let hir::ArrayLen::Body(hir::AnonConst { hir_id, .. }) = length\n+                                && let Some(span) = self.tcx.hir().opt_span(*hir_id)\n+                            {\n+                                err.span_suggestion(\n+                                    span,\n+                                    \"consider specifying the actual array length\",\n+                                    sz.found,\n+                                    Applicability::MaybeIncorrect,\n+                                );\n+                            }\n+                        }\n                         _ => {}\n                     }\n                 }"}, {"sha": "b30ff61a99c53cb260c6125ac0d9f4b8a6bf7dc2", "filename": "tests/ui/consts/array-literal-len-mismatch.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a110cf5d1649aa920c046c764c28c666ebdd85cd/tests%2Fui%2Fconsts%2Farray-literal-len-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a110cf5d1649aa920c046c764c28c666ebdd85cd/tests%2Fui%2Fconsts%2Farray-literal-len-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Farray-literal-len-mismatch.rs?ref=a110cf5d1649aa920c046c764c28c666ebdd85cd", "patch": "@@ -0,0 +1,4 @@\n+const NUMBERS: [u8; 3] = [10, 20];\n+//~^ ERROR mismatched types\n+//~^^ HELP consider specifying the actual array length\n+fn main() {}"}, {"sha": "22fec638970a7cb37d0ecdb9b474d6b6f3cce0b3", "filename": "tests/ui/consts/array-literal-len-mismatch.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a110cf5d1649aa920c046c764c28c666ebdd85cd/tests%2Fui%2Fconsts%2Farray-literal-len-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a110cf5d1649aa920c046c764c28c666ebdd85cd/tests%2Fui%2Fconsts%2Farray-literal-len-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Farray-literal-len-mismatch.stderr?ref=a110cf5d1649aa920c046c764c28c666ebdd85cd", "patch": "@@ -0,0 +1,11 @@\n+error[E0308]: mismatched types\n+  --> $DIR/array-literal-len-mismatch.rs:1:26\n+   |\n+LL | const NUMBERS: [u8; 3] = [10, 20];\n+   |                     -    ^^^^^^^^ expected an array with a fixed size of 3 elements, found one with 2 elements\n+   |                     |\n+   |                     help: consider specifying the actual array length: `2`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "029d94273fae1180030479332d6774856e42336a", "filename": "tests/ui/consts/const-array-oob-arith.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a110cf5d1649aa920c046c764c28c666ebdd85cd/tests%2Fui%2Fconsts%2Fconst-array-oob-arith.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a110cf5d1649aa920c046c764c28c666ebdd85cd/tests%2Fui%2Fconsts%2Fconst-array-oob-arith.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-array-oob-arith.stderr?ref=a110cf5d1649aa920c046c764c28c666ebdd85cd", "patch": "@@ -2,13 +2,17 @@ error[E0308]: mismatched types\n   --> $DIR/const-array-oob-arith.rs:5:45\n    |\n LL | const BLUB: [i32; (ARR[0] - 40) as usize] = [5];\n-   |                                             ^^^ expected an array with a fixed size of 2 elements, found one with 1 element\n+   |                   ----------------------    ^^^ expected an array with a fixed size of 2 elements, found one with 1 element\n+   |                   |\n+   |                   help: consider specifying the actual array length: `1`\n \n error[E0308]: mismatched types\n   --> $DIR/const-array-oob-arith.rs:8:44\n    |\n LL | const BOO: [i32; (ARR[0] - 41) as usize] = [5, 99];\n-   |                                            ^^^^^^^ expected an array with a fixed size of 1 element, found one with 2 elements\n+   |                  ----------------------    ^^^^^^^ expected an array with a fixed size of 1 element, found one with 2 elements\n+   |                  |\n+   |                  help: consider specifying the actual array length: `2`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "149d061029bc3b80a5ce7fd85ce168a307e2e3bc", "filename": "tests/ui/inference/array-len-mismatch.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a110cf5d1649aa920c046c764c28c666ebdd85cd/tests%2Fui%2Finference%2Farray-len-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a110cf5d1649aa920c046c764c28c666ebdd85cd/tests%2Fui%2Finference%2Farray-len-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finference%2Farray-len-mismatch.rs?ref=a110cf5d1649aa920c046c764c28c666ebdd85cd", "patch": "@@ -0,0 +1,12 @@\n+fn returns_arr() -> [u8; 2] {\n+    [1, 2]\n+}\n+\n+fn main() {\n+    let wrong: [u8; 3] = [10, 20];\n+    //~^ ERROR mismatched types\n+    //~^^ HELP consider specifying the actual array length\n+    let wrong: [u8; 3] = returns_arr();\n+    //~^ ERROR mismatched types\n+    //~^^ HELP consider specifying the actual array length\n+}"}, {"sha": "7358e47839725acd7832ae874f45fb8f23d1a2dd", "filename": "tests/ui/inference/array-len-mismatch.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a110cf5d1649aa920c046c764c28c666ebdd85cd/tests%2Fui%2Finference%2Farray-len-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a110cf5d1649aa920c046c764c28c666ebdd85cd/tests%2Fui%2Finference%2Farray-len-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finference%2Farray-len-mismatch.stderr?ref=a110cf5d1649aa920c046c764c28c666ebdd85cd", "patch": "@@ -0,0 +1,21 @@\n+error[E0308]: mismatched types\n+  --> $DIR/array-len-mismatch.rs:6:26\n+   |\n+LL |     let wrong: [u8; 3] = [10, 20];\n+   |                -------   ^^^^^^^^ expected an array with a fixed size of 3 elements, found one with 2 elements\n+   |                |    |\n+   |                |    help: consider specifying the actual array length: `2`\n+   |                expected due to this\n+\n+error[E0308]: mismatched types\n+  --> $DIR/array-len-mismatch.rs:9:26\n+   |\n+LL |     let wrong: [u8; 3] = returns_arr();\n+   |                -------   ^^^^^^^^^^^^^ expected an array with a fixed size of 3 elements, found one with 2 elements\n+   |                |    |\n+   |                |    help: consider specifying the actual array length: `2`\n+   |                expected due to this\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}]}