{"sha": "3aea46979a103fc7415d6e211cc21734196adde5", "node_id": "C_kwDOAAsO6NoAKDNhZWE0Njk3OWExMDNmYzc0MTVkNmUyMTFjYzIxNzM0MTk2YWRkZTU", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-03-06T19:45:03Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-03-09T16:42:56Z"}, "message": "Emit alias-eq when equating numeric var and projection", "tree": {"sha": "60ef4aec429c4a4fa210952eccb78bf8085c305a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/60ef4aec429c4a4fa210952eccb78bf8085c305a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3aea46979a103fc7415d6e211cc21734196adde5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3aea46979a103fc7415d6e211cc21734196adde5", "html_url": "https://github.com/rust-lang/rust/commit/3aea46979a103fc7415d6e211cc21734196adde5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3aea46979a103fc7415d6e211cc21734196adde5/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39f2657d1101b50f9b71ae460b762d330cc8426b", "url": "https://api.github.com/repos/rust-lang/rust/commits/39f2657d1101b50f9b71ae460b762d330cc8426b", "html_url": "https://github.com/rust-lang/rust/commit/39f2657d1101b50f9b71ae460b762d330cc8426b"}], "stats": {"total": 46, "additions": 37, "deletions": 9}, "files": [{"sha": "b0613abeb484aea44ad6f1a9bac6664271c77bb5", "filename": "compiler/rustc_infer/src/infer/combine.rs", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/3aea46979a103fc7415d6e211cc21734196adde5/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aea46979a103fc7415d6e211cc21734196adde5/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs?ref=3aea46979a103fc7415d6e211cc21734196adde5", "patch": "@@ -119,20 +119,30 @@ impl<'tcx> InferCtxt<'tcx> {\n                 self.unify_float_variable(!a_is_expected, v_id, v)\n             }\n \n-            // All other cases of inference are errors\n-            (&ty::Infer(_), _) | (_, &ty::Infer(_)) => {\n-                Err(TypeError::Sorts(ty::relate::expected_found(relation, a, b)))\n+            // We don't expect `TyVar` or `Fresh*` vars at this point with lazy norm.\n+            (\n+                ty::Alias(AliasKind::Projection, _),\n+                ty::Infer(ty::TyVar(_) | ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)),\n+            )\n+            | (\n+                ty::Infer(ty::TyVar(_) | ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)),\n+                ty::Alias(AliasKind::Projection, _),\n+            ) if self.tcx.trait_solver_next() => {\n+                bug!()\n             }\n \n-            (ty::Alias(AliasKind::Projection, _), _) if self.tcx.trait_solver_next() => {\n+            (_, ty::Alias(AliasKind::Projection, _)) | (ty::Alias(AliasKind::Projection, _), _)\n+                if self.tcx.trait_solver_next() =>\n+            {\n                 relation.register_type_equate_obligation(a, b);\n-                Ok(b)\n-            }\n-            (_, ty::Alias(AliasKind::Projection, _)) if self.tcx.trait_solver_next() => {\n-                relation.register_type_equate_obligation(b, a);\n                 Ok(a)\n             }\n \n+            // All other cases of inference are errors\n+            (&ty::Infer(_), _) | (_, &ty::Infer(_)) => {\n+                Err(TypeError::Sorts(ty::relate::expected_found(relation, a, b)))\n+            }\n+\n             _ => ty::relate::super_relate_tys(relation, a, b),\n         }\n     }"}, {"sha": "d9bfacd6e3cf35cf11945661f77d14ab139041f2", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3aea46979a103fc7415d6e211cc21734196adde5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aea46979a103fc7415d6e211cc21734196adde5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=3aea46979a103fc7415d6e211cc21734196adde5", "patch": "@@ -995,7 +995,7 @@ impl<'tcx> Term<'tcx> {\n \n     pub fn is_infer(&self) -> bool {\n         match self.unpack() {\n-            TermKind::Ty(ty) => ty.is_ty_or_numeric_infer(),\n+            TermKind::Ty(ty) => ty.is_ty_var(),\n             TermKind::Const(ct) => ct.is_ct_infer(),\n         }\n     }"}, {"sha": "2da387db4a99f9171a120045994bdf4b21ad805c", "filename": "tests/ui/traits/new-solver/int-var-alias-eq.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3aea46979a103fc7415d6e211cc21734196adde5/tests%2Fui%2Ftraits%2Fnew-solver%2Fint-var-alias-eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aea46979a103fc7415d6e211cc21734196adde5/tests%2Fui%2Ftraits%2Fnew-solver%2Fint-var-alias-eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Fint-var-alias-eq.rs?ref=3aea46979a103fc7415d6e211cc21734196adde5", "patch": "@@ -0,0 +1,18 @@\n+// check-pass\n+// compile-flags: -Ztrait-solver=next\n+\n+// HIR typeck ends up equating `<_#0i as Add>::Output == _#0i`.\n+// Want to make sure that we emit an alias-eq goal for this,\n+// instead of treating it as a type error and bailing.\n+\n+fn test() {\n+    // fallback\n+    let x = 1 + 2;\n+}\n+\n+fn test2() -> u32 {\n+    // expectation from return ty\n+    1 + 2\n+}\n+\n+fn main() {}"}]}