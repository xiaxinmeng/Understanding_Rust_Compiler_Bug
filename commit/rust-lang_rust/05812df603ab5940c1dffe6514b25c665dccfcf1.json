{"sha": "05812df603ab5940c1dffe6514b25c665dccfcf1", "node_id": "C_kwDOAAsO6NoAKDA1ODEyZGY2MDNhYjU5NDBjMWRmZmU2NTE0YjI1YzY2NWRjY2ZjZjE", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-09-06T15:37:00Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-09-09T01:31:46Z"}, "message": "Handle generic parameters.", "tree": {"sha": "aadc26ba6379c4c01833809f22be8e88c2721b64", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aadc26ba6379c4c01833809f22be8e88c2721b64"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05812df603ab5940c1dffe6514b25c665dccfcf1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05812df603ab5940c1dffe6514b25c665dccfcf1", "html_url": "https://github.com/rust-lang/rust/commit/05812df603ab5940c1dffe6514b25c665dccfcf1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05812df603ab5940c1dffe6514b25c665dccfcf1/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cdf78073c5d24cdc4c89a515b05f9d8e09321711", "url": "https://api.github.com/repos/rust-lang/rust/commits/cdf78073c5d24cdc4c89a515b05f9d8e09321711", "html_url": "https://github.com/rust-lang/rust/commit/cdf78073c5d24cdc4c89a515b05f9d8e09321711"}], "stats": {"total": 393, "additions": 170, "deletions": 223}, "files": [{"sha": "1a987c6e2d7918e01dd0c79b4a36a2b2a42366f4", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 40, "deletions": 80, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/05812df603ab5940c1dffe6514b25c665dccfcf1/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05812df603ab5940c1dffe6514b25c665dccfcf1/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=05812df603ab5940c1dffe6514b25c665dccfcf1", "patch": "@@ -252,11 +252,10 @@ enum ImplTraitContext {\n     ReturnPositionOpaqueTy {\n         /// Origin: Either OpaqueTyOrigin::FnReturn or OpaqueTyOrigin::AsyncFn,\n         origin: hir::OpaqueTyOrigin,\n+        in_trait: bool,\n     },\n     /// Impl trait in type aliases.\n     TypeAliasesOpaqueTy,\n-    /// Return-position `impl Trait` in trait definition\n-    InTrait,\n     /// `impl Trait` is not accepted in this position.\n     Disallowed(ImplTraitPosition),\n }\n@@ -1343,24 +1342,26 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             TyKind::ImplTrait(def_node_id, ref bounds) => {\n                 let span = t.span;\n                 match itctx {\n-                    ImplTraitContext::ReturnPositionOpaqueTy { origin } => {\n-                        self.lower_opaque_impl_trait(span, *origin, def_node_id, bounds, itctx)\n-                    }\n+                    ImplTraitContext::ReturnPositionOpaqueTy { origin, in_trait } => self\n+                        .lower_opaque_impl_trait(\n+                            span,\n+                            *origin,\n+                            def_node_id,\n+                            bounds,\n+                            *in_trait,\n+                            itctx,\n+                        ),\n                     ImplTraitContext::TypeAliasesOpaqueTy => {\n                         let mut nested_itctx = ImplTraitContext::TypeAliasesOpaqueTy;\n                         self.lower_opaque_impl_trait(\n                             span,\n                             hir::OpaqueTyOrigin::TyAlias,\n                             def_node_id,\n                             bounds,\n-                            &mut nested_itctx,\n+                            false,\n+                            nested_itctx,\n                         )\n                     }\n-                    ImplTraitContext::InTrait => {\n-                        self.lower_impl_trait_in_trait(span, def_node_id, |lctx| {\n-                            lctx.lower_param_bounds(bounds, ImplTraitContext::InTrait)\n-                        })\n-                    }\n                     ImplTraitContext::Universal => {\n                         let span = t.span;\n                         let ident = Ident::from_str_and_span(&pprust::ty_to_string(t), span);\n@@ -1430,6 +1431,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         origin: hir::OpaqueTyOrigin,\n         opaque_ty_node_id: NodeId,\n         bounds: &GenericBounds,\n+        in_trait: bool,\n         itctx: &mut ImplTraitContext,\n     ) -> hir::TyKind<'hir> {\n         // Make sure we know that some funky desugaring has been going on here.\n@@ -1518,6 +1520,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     }),\n                     bounds: hir_bounds,\n                     origin,\n+                    in_trait,\n                 };\n                 debug!(?opaque_ty_item);\n \n@@ -1544,30 +1547,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         debug!(?lifetimes);\n \n         // `impl Trait` now just becomes `Foo<'a, 'b, ..>`.\n-        hir::TyKind::OpaqueDef(hir::ItemId { def_id: opaque_ty_def_id }, lifetimes)\n-    }\n-\n-    #[instrument(level = \"debug\", skip(self, lower_bounds))]\n-    fn lower_impl_trait_in_trait(\n-        &mut self,\n-        span: Span,\n-        opaque_ty_node_id: NodeId,\n-        lower_bounds: impl FnOnce(&mut Self) -> hir::GenericBounds<'hir>,\n-    ) -> hir::TyKind<'hir> {\n-        let opaque_ty_def_id = self.local_def_id(opaque_ty_node_id);\n-        self.with_hir_id_owner(opaque_ty_node_id, |lctx| {\n-            let hir_bounds = lower_bounds(lctx);\n-            let rpitit_placeholder = hir::ImplTraitPlaceholder { bounds: hir_bounds };\n-            let rpitit_item = hir::Item {\n-                def_id: opaque_ty_def_id,\n-                ident: Ident::empty(),\n-                kind: hir::ItemKind::ImplTraitPlaceholder(rpitit_placeholder),\n-                span: lctx.lower_span(span),\n-                vis_span: lctx.lower_span(span.shrink_to_lo()),\n-            };\n-            hir::OwnerNode::Item(lctx.arena.alloc(rpitit_item))\n-        });\n-        hir::TyKind::ImplTraitInTrait(hir::ItemId { def_id: opaque_ty_def_id })\n+        hir::TyKind::OpaqueDef(hir::ItemId { def_id: opaque_ty_def_id }, lifetimes, in_trait)\n     }\n \n     /// Registers a new opaque type with the proper `NodeId`s and\n@@ -1728,30 +1708,28 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                             )\n                             .emit();\n                     }\n-                    self.lower_async_fn_ret_ty_in_trait(\n+                    self.lower_async_fn_ret_ty(\n                         &decl.output,\n                         fn_node_id.expect(\"`make_ret_async` but no `fn_def_id`\"),\n                         ret_id,\n+                        true,\n                     )\n                 }\n                 _ => {\n                     if !kind.impl_trait_return_allowed(self.tcx) {\n-                        if kind == FnDeclKind::Impl {\n-                            self.tcx\n-                                .sess\n-                                .create_feature_err(\n-                                    TraitFnAsync { fn_span, span },\n-                                    sym::return_position_impl_trait_in_trait,\n-                                )\n-                                .emit();\n-                        } else {\n-                            self.tcx.sess.emit_err(TraitFnAsync { fn_span, span });\n-                        }\n+                        self.tcx\n+                            .sess\n+                            .create_feature_err(\n+                                TraitFnAsync { fn_span, span },\n+                                sym::return_position_impl_trait_in_trait,\n+                            )\n+                            .emit();\n                     }\n                     self.lower_async_fn_ret_ty(\n                         &decl.output,\n                         fn_node_id.expect(\"`make_ret_async` but no `fn_def_id`\"),\n                         ret_id,\n+                        false,\n                     )\n                 }\n             }\n@@ -1763,10 +1741,15 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                             let fn_def_id = self.local_def_id(fn_node_id);\n                             ImplTraitContext::ReturnPositionOpaqueTy {\n                                 origin: hir::OpaqueTyOrigin::FnReturn(fn_def_id),\n+                                in_trait: false,\n                             }\n                         }\n-                        Some(_) if kind.impl_trait_in_trait_allowed(self.tcx) => {\n-                            ImplTraitContext::InTrait\n+                        Some(fn_node_id) if kind.impl_trait_in_trait_allowed(self.tcx) => {\n+                            let fn_def_id = self.local_def_id(fn_node_id);\n+                            ImplTraitContext::ReturnPositionOpaqueTy {\n+                                origin: hir::OpaqueTyOrigin::FnReturn(fn_def_id),\n+                                in_trait: true,\n+                            }\n                         }\n                         _ => ImplTraitContext::Disallowed(match kind {\n                             FnDeclKind::Fn | FnDeclKind::Inherent => {\n@@ -1829,6 +1812,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         output: &FnRetTy,\n         fn_node_id: NodeId,\n         opaque_ty_node_id: NodeId,\n+        in_trait: bool,\n     ) -> hir::FnRetTy<'hir> {\n         let span = output.span();\n \n@@ -1960,6 +1944,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     span,\n                     ImplTraitContext::ReturnPositionOpaqueTy {\n                         origin: hir::OpaqueTyOrigin::FnReturn(fn_def_id),\n+                        in_trait,\n                     },\n                 );\n \n@@ -1999,6 +1984,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     }),\n                     bounds: arena_vec![this; future_bound],\n                     origin: hir::OpaqueTyOrigin::AsyncFn(fn_def_id),\n+                    in_trait,\n                 };\n \n                 trace!(\"exist ty from async fn def id: {:#?}\", opaque_ty_def_id);\n@@ -2043,41 +2029,15 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         // Foo = impl Trait` is, internally, created as a child of the\n         // async fn, so the *type parameters* are inherited.  It's\n         // only the lifetime parameters that we must supply.\n-        let opaque_ty_ref =\n-            hir::TyKind::OpaqueDef(hir::ItemId { def_id: opaque_ty_def_id }, generic_args);\n+        let opaque_ty_ref = hir::TyKind::OpaqueDef(\n+            hir::ItemId { def_id: opaque_ty_def_id },\n+            generic_args,\n+            in_trait,\n+        );\n         let opaque_ty = self.ty(opaque_ty_span, opaque_ty_ref);\n         hir::FnRetTy::Return(self.arena.alloc(opaque_ty))\n     }\n \n-    // Transforms `-> T` for `async fn` into `-> OpaqueTy { .. }`\n-    // combined with the following definition of `OpaqueTy`:\n-    //\n-    //     type OpaqueTy<generics_from_parent_fn> = impl Future<Output = T>;\n-    //\n-    // `output`: unlowered output type (`T` in `-> T`)\n-    // `fn_def_id`: `DefId` of the parent function (used to create child impl trait definition)\n-    // `opaque_ty_node_id`: `NodeId` of the opaque `impl Trait` type that should be created\n-    #[instrument(level = \"debug\", skip(self))]\n-    fn lower_async_fn_ret_ty_in_trait(\n-        &mut self,\n-        output: &FnRetTy,\n-        fn_node_id: NodeId,\n-        opaque_ty_node_id: NodeId,\n-    ) -> hir::FnRetTy<'hir> {\n-        let kind = self.lower_impl_trait_in_trait(output.span(), opaque_ty_node_id, |lctx| {\n-            let bound = lctx.lower_async_fn_output_type_to_future_bound(\n-                output,\n-                output.span(),\n-                ImplTraitContext::InTrait,\n-            );\n-            arena_vec![lctx; bound]\n-        });\n-\n-        let opaque_ty_span = self.mark_span_with_reason(DesugaringKind::Async, output.span(), None);\n-        let opaque_ty = self.ty(opaque_ty_span, kind);\n-        hir::FnRetTy::Return(self.arena.alloc(opaque_ty))\n-    }\n-\n     /// Transforms `-> T` into `Future<Output = T>`.\n     fn lower_async_fn_output_type_to_future_bound(\n         &mut self,"}, {"sha": "0707ff5ed02a0abf81f53c14173db134235f45a5", "filename": "compiler/rustc_borrowck/src/diagnostics/region_name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05812df603ab5940c1dffe6514b25c665dccfcf1/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05812df603ab5940c1dffe6514b25c665dccfcf1/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs?ref=05812df603ab5940c1dffe6514b25c665dccfcf1", "patch": "@@ -772,7 +772,7 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n     fn get_future_inner_return_ty(&self, hir_ty: &'tcx hir::Ty<'tcx>) -> &'tcx hir::Ty<'tcx> {\n         let hir = self.infcx.tcx.hir();\n \n-        let hir::TyKind::OpaqueDef(id, _) = hir_ty.kind else {\n+        let hir::TyKind::OpaqueDef(id, _, _) = hir_ty.kind else {\n             span_bug!(\n                 hir_ty.span,\n                 \"lowered return type of async fn is not OpaqueDef: {:?}\","}, {"sha": "a57fdc3bfb1257d79f5b681b8d6537750f5156b6", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/05812df603ab5940c1dffe6514b25c665dccfcf1/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05812df603ab5940c1dffe6514b25c665dccfcf1/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=05812df603ab5940c1dffe6514b25c665dccfcf1", "patch": "@@ -2505,6 +2505,7 @@ pub struct OpaqueTy<'hir> {\n     pub generics: &'hir Generics<'hir>,\n     pub bounds: GenericBounds<'hir>,\n     pub origin: OpaqueTyOrigin,\n+    pub in_trait: bool,\n }\n \n /// From whence the opaque type came.\n@@ -2518,12 +2519,6 @@ pub enum OpaqueTyOrigin {\n     TyAlias,\n }\n \n-/// Placeholder representation of an `impl Trait` in a trait. Since this never gets lowered into a `ty::Opaque` of its own, we just keep this as\n-#[derive(Debug, HashStable_Generic)]\n-pub struct ImplTraitPlaceholder<'hir> {\n-    pub bounds: GenericBounds<'hir>,\n-}\n-\n /// The various kinds of types recognized by the compiler.\n #[derive(Debug, HashStable_Generic)]\n pub enum TyKind<'hir> {\n@@ -2550,12 +2545,9 @@ pub enum TyKind<'hir> {\n     ///\n     /// The generic argument list contains the lifetimes (and in the future\n     /// possibly parameters) that are actually bound on the `impl Trait`.\n-    OpaqueDef(ItemId, &'hir [GenericArg<'hir>]),\n-    /// A type that represents an `impl Trait` in a trait function. This is\n-    /// not an opaque type, since it acts more like an associated type than\n-    /// an opaque, and since it needs no generics since it inherits those\n-    /// from the item's parent.\n-    ImplTraitInTrait(ItemId),\n+    ///\n+    /// The last parameter specifies whether this opaque appears in a trait definition.\n+    OpaqueDef(ItemId, &'hir [GenericArg<'hir>], bool),\n     /// A trait object type `Bound1 + Bound2 + Bound3`\n     /// where `Bound` is a trait or a lifetime.\n     TraitObject(&'hir [PolyTraitRef<'hir>], &'hir Lifetime, TraitObjectSyntax),\n@@ -3011,8 +3003,6 @@ pub enum ItemKind<'hir> {\n     TyAlias(&'hir Ty<'hir>, &'hir Generics<'hir>),\n     /// An opaque `impl Trait` type alias, e.g., `type Foo = impl Bar;`.\n     OpaqueTy(OpaqueTy<'hir>),\n-    /// An `impl Trait` in a trait\n-    ImplTraitPlaceholder(ImplTraitPlaceholder<'hir>),\n     /// An enum definition, e.g., `enum Foo<A, B> {C<A>, D<B>}`.\n     Enum(EnumDef<'hir>, &'hir Generics<'hir>),\n     /// A struct definition, e.g., `struct Foo<A> {x: A}`.\n@@ -3081,7 +3071,6 @@ impl ItemKind<'_> {\n             ItemKind::Trait(..) => \"trait\",\n             ItemKind::TraitAlias(..) => \"trait alias\",\n             ItemKind::Impl(..) => \"implementation\",\n-            ItemKind::ImplTraitPlaceholder(..) => \"opaque type in trait\",\n         }\n     }\n }"}, {"sha": "bf4ab06638bb15855eab275864e001dfacc3b400", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/05812df603ab5940c1dffe6514b25c665dccfcf1/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05812df603ab5940c1dffe6514b25c665dccfcf1/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=05812df603ab5940c1dffe6514b25c665dccfcf1", "patch": "@@ -562,10 +562,6 @@ pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item<'v>) {\n             walk_generics(visitor, generics);\n             walk_list!(visitor, visit_param_bound, bounds);\n         }\n-        ItemKind::ImplTraitPlaceholder(ImplTraitPlaceholder { bounds }) => {\n-            visitor.visit_id(item.hir_id());\n-            walk_list!(visitor, visit_param_bound, bounds);\n-        }\n         ItemKind::Enum(ref enum_definition, ref generics) => {\n             visitor.visit_generics(generics);\n             // `visit_enum_def()` takes care of visiting the `Item`'s `HirId`.\n@@ -674,13 +670,10 @@ pub fn walk_ty<'v, V: Visitor<'v>>(visitor: &mut V, typ: &'v Ty<'v>) {\n         TyKind::Path(ref qpath) => {\n             visitor.visit_qpath(qpath, typ.hir_id, typ.span);\n         }\n-        TyKind::OpaqueDef(item_id, lifetimes) => {\n+        TyKind::OpaqueDef(item_id, lifetimes, _in_trait) => {\n             visitor.visit_nested_item(item_id);\n             walk_list!(visitor, visit_generic_arg, lifetimes);\n         }\n-        TyKind::ImplTraitInTrait(item_id) => {\n-            visitor.visit_nested_item(item_id);\n-        }\n         TyKind::Array(ref ty, ref length) => {\n             visitor.visit_ty(ty);\n             visitor.visit_array_length(length)"}, {"sha": "5917d5e346e371d2a1da00c227dcf2924f4bf51f", "filename": "compiler/rustc_hir/src/target.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/05812df603ab5940c1dffe6514b25c665dccfcf1/compiler%2Frustc_hir%2Fsrc%2Ftarget.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05812df603ab5940c1dffe6514b25c665dccfcf1/compiler%2Frustc_hir%2Fsrc%2Ftarget.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Ftarget.rs?ref=05812df603ab5940c1dffe6514b25c665dccfcf1", "patch": "@@ -80,8 +80,13 @@ impl Target {\n             ItemKind::ForeignMod { .. } => Target::ForeignMod,\n             ItemKind::GlobalAsm(..) => Target::GlobalAsm,\n             ItemKind::TyAlias(..) => Target::TyAlias,\n-            ItemKind::OpaqueTy(..) => Target::OpaqueTy,\n-            ItemKind::ImplTraitPlaceholder(..) => Target::ImplTraitPlaceholder,\n+            ItemKind::OpaqueTy(ref opaque) => {\n+                if opaque.in_trait {\n+                    Target::ImplTraitPlaceholder\n+                } else {\n+                    Target::OpaqueTy\n+                }\n+            }\n             ItemKind::Enum(..) => Target::Enum,\n             ItemKind::Struct(..) => Target::Struct,\n             ItemKind::Union(..) => Target::Union,"}, {"sha": "35a58296e370e4aa0daf15caa39690d9dc7cc46c", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05812df603ab5940c1dffe6514b25c665dccfcf1/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05812df603ab5940c1dffe6514b25c665dccfcf1/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=05812df603ab5940c1dffe6514b25c665dccfcf1", "patch": "@@ -327,7 +327,6 @@ impl<'a> State<'a> {\n                 self.print_ty_fn(f.abi, f.unsafety, f.decl, None, f.generic_params, f.param_names);\n             }\n             hir::TyKind::OpaqueDef(..) => self.word(\"/*impl Trait*/\"),\n-            hir::TyKind::ImplTraitInTrait(..) => self.word(\"/*impl Trait*/\"),\n             hir::TyKind::Path(ref qpath) => self.print_qpath(qpath, false),\n             hir::TyKind::TraitObject(bounds, ref lifetime, syntax) => {\n                 if syntax == ast::TraitObjectSyntax::Dyn {\n@@ -609,9 +608,6 @@ impl<'a> State<'a> {\n                     state.print_bounds(\"= impl\", real_bounds);\n                 });\n             }\n-            hir::ItemKind::ImplTraitPlaceholder(..) => {\n-                unreachable!(\"FIXME(RPITIT): I don't think this ever gets called here...\");\n-            }\n             hir::ItemKind::Enum(ref enum_definition, params) => {\n                 self.print_enum_def(enum_definition, params, item.ident.name, item.span);\n             }"}, {"sha": "b115ac8b3df954ba0f388bd07b27fe85e9a70fe1", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/static_impl_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05812df603ab5940c1dffe6514b25c665dccfcf1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05812df603ab5940c1dffe6514b25c665dccfcf1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs?ref=05812df603ab5940c1dffe6514b25c665dccfcf1", "patch": "@@ -300,7 +300,7 @@ pub fn suggest_new_region_bound(\n             continue;\n         }\n         match fn_return.kind {\n-            TyKind::OpaqueDef(item_id, _) => {\n+            TyKind::OpaqueDef(item_id, _, _) => {\n                 let item = tcx.hir().item(item_id);\n                 let ItemKind::OpaqueTy(opaque) = &item.kind else {\n                     return;"}, {"sha": "f967ac9a4dc3ed25dc05f26b60107eef1d7edcd1", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/05812df603ab5940c1dffe6514b25c665dccfcf1/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05812df603ab5940c1dffe6514b25c665dccfcf1/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=05812df603ab5940c1dffe6514b25c665dccfcf1", "patch": "@@ -1500,9 +1500,6 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             hir::ItemKind::OpaqueTy(..) => {\n                 self.encode_explicit_item_bounds(def_id);\n             }\n-            hir::ItemKind::ImplTraitPlaceholder(..) => {\n-                self.encode_explicit_item_bounds(def_id);\n-            }\n             hir::ItemKind::Enum(..) => {\n                 let adt_def = self.tcx.adt_def(def_id);\n                 record!(self.tables.repr_options[def_id] <- adt_def.repr());"}, {"sha": "5a65ec9a4765a21865125d834ea371c87cc4f092", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/05812df603ab5940c1dffe6514b25c665dccfcf1/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05812df603ab5940c1dffe6514b25c665dccfcf1/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=05812df603ab5940c1dffe6514b25c665dccfcf1", "patch": "@@ -212,8 +212,13 @@ impl<'hir> Map<'hir> {\n                 ItemKind::Fn(..) => DefKind::Fn,\n                 ItemKind::Macro(_, macro_kind) => DefKind::Macro(macro_kind),\n                 ItemKind::Mod(..) => DefKind::Mod,\n-                ItemKind::OpaqueTy(..) => DefKind::OpaqueTy,\n-                ItemKind::ImplTraitPlaceholder(..) => DefKind::ImplTraitPlaceholder,\n+                ItemKind::OpaqueTy(ref opaque) => {\n+                    if opaque.in_trait {\n+                        DefKind::ImplTraitPlaceholder\n+                    } else {\n+                        DefKind::OpaqueTy\n+                    }\n+                }\n                 ItemKind::TyAlias(..) => DefKind::TyAlias,\n                 ItemKind::Enum(..) => DefKind::Enum,\n                 ItemKind::Struct(..) => DefKind::Struct,\n@@ -1188,8 +1193,13 @@ fn hir_id_to_string(map: Map<'_>, id: HirId) -> String {\n                 ItemKind::ForeignMod { .. } => \"foreign mod\",\n                 ItemKind::GlobalAsm(..) => \"global asm\",\n                 ItemKind::TyAlias(..) => \"ty\",\n-                ItemKind::OpaqueTy(..) => \"opaque type\",\n-                ItemKind::ImplTraitPlaceholder(..) => \"opaque type in trait\",\n+                ItemKind::OpaqueTy(ref opaque) => {\n+                    if opaque.in_trait {\n+                        \"opaque type in trait\"\n+                    } else {\n+                        \"opaque type\"\n+                    }\n+                }\n                 ItemKind::Enum(..) => \"enum\",\n                 ItemKind::Struct(..) => \"struct\",\n                 ItemKind::Union(..) => \"union\","}, {"sha": "648f5f7161fa6ead00fd41a5d75357a0e56ba909", "filename": "compiler/rustc_middle/src/ty/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05812df603ab5940c1dffe6514b25c665dccfcf1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05812df603ab5940c1dffe6514b25c665dccfcf1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs?ref=05812df603ab5940c1dffe6514b25c665dccfcf1", "patch": "@@ -408,7 +408,7 @@ impl<'v> hir::intravisit::Visitor<'v> for TraitObjectVisitor<'v> {\n             ) => {\n                 self.0.push(ty);\n             }\n-            hir::TyKind::OpaqueDef(item_id, _) => {\n+            hir::TyKind::OpaqueDef(item_id, _, _) => {\n                 self.0.push(ty);\n                 let item = self.1.item(item_id);\n                 hir::intravisit::walk_item(self, item);"}, {"sha": "f141d7beeb921b895bc4903e5bc3995eac043416", "filename": "compiler/rustc_passes/src/dead.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05812df603ab5940c1dffe6514b25c665dccfcf1/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05812df603ab5940c1dffe6514b25c665dccfcf1/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdead.rs?ref=05812df603ab5940c1dffe6514b25c665dccfcf1", "patch": "@@ -447,7 +447,7 @@ impl<'tcx> Visitor<'tcx> for MarkSymbolVisitor<'tcx> {\n     }\n \n     fn visit_ty(&mut self, ty: &'tcx hir::Ty<'tcx>) {\n-        if let TyKind::OpaqueDef(item_id, _) = ty.kind {\n+        if let TyKind::OpaqueDef(item_id, _, _) = ty.kind {\n             let item = self.tcx.hir().item(item_id);\n             intravisit::walk_item(self, item);\n         }"}, {"sha": "f7e3fac6b2e20c4f906f6a32fa8639c54a5115c9", "filename": "compiler/rustc_passes/src/reachable.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/05812df603ab5940c1dffe6514b25c665dccfcf1/compiler%2Frustc_passes%2Fsrc%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05812df603ab5940c1dffe6514b25c665dccfcf1/compiler%2Frustc_passes%2Fsrc%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Freachable.rs?ref=05812df603ab5940c1dffe6514b25c665dccfcf1", "patch": "@@ -235,7 +235,6 @@ impl<'tcx> ReachableContext<'tcx> {\n                     hir::ItemKind::ExternCrate(_)\n                     | hir::ItemKind::Use(..)\n                     | hir::ItemKind::OpaqueTy(..)\n-                    | hir::ItemKind::ImplTraitPlaceholder(..)\n                     | hir::ItemKind::TyAlias(..)\n                     | hir::ItemKind::Macro(..)\n                     | hir::ItemKind::Mod(..)"}, {"sha": "afd423dc5fa1abfa29dcdd83cd14a14c134903e2", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/05812df603ab5940c1dffe6514b25c665dccfcf1/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05812df603ab5940c1dffe6514b25c665dccfcf1/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=05812df603ab5940c1dffe6514b25c665dccfcf1", "patch": "@@ -686,7 +686,6 @@ impl<'tcx> Visitor<'tcx> for EmbargoVisitor<'tcx> {\n             }\n \n             hir::ItemKind::OpaqueTy(..)\n-            | hir::ItemKind::ImplTraitPlaceholder(..)\n             | hir::ItemKind::Use(..)\n             | hir::ItemKind::Static(..)\n             | hir::ItemKind::Const(..)\n@@ -708,12 +707,12 @@ impl<'tcx> Visitor<'tcx> for EmbargoVisitor<'tcx> {\n             hir::ItemKind::Use(..) => {}\n             // The interface is empty.\n             hir::ItemKind::GlobalAsm(..) => {}\n-            hir::ItemKind::OpaqueTy(..) => {\n+            hir::ItemKind::OpaqueTy(ref opaque) => {\n                 // HACK(jynelson): trying to infer the type of `impl trait` breaks `async-std` (and `pub async fn` in general)\n                 // Since rustdoc never needs to do codegen and doesn't care about link-time reachability,\n                 // mark this as unreachable.\n                 // See https://github.com/rust-lang/rust/issues/75100\n-                if !self.tcx.sess.opts.actually_rustdoc {\n+                if !opaque.in_trait && !self.tcx.sess.opts.actually_rustdoc {\n                     // FIXME: This is some serious pessimization intended to workaround deficiencies\n                     // in the reachability pass (`middle/reachable.rs`). Types are marked as link-time\n                     // reachable if they are returned via `impl Trait`, even from private functions.\n@@ -722,9 +721,6 @@ impl<'tcx> Visitor<'tcx> for EmbargoVisitor<'tcx> {\n                     self.reach(item.def_id, exist_level).generics().predicates().ty();\n                 }\n             }\n-            hir::ItemKind::ImplTraitPlaceholder(..) => {\n-                // FIXME(RPITIT): Do we need to do anything here?\n-            }\n             // Visit everything.\n             hir::ItemKind::Const(..)\n             | hir::ItemKind::Static(..)\n@@ -2039,8 +2035,7 @@ fn local_visibility(tcx: TyCtxt<'_>, def_id: LocalDefId) -> ty::Visibility {\n                 //   query failing on some items, we provide it for opaque types as well.\n                 | Node::Item(hir::Item {\n                     kind: hir::ItemKind::Use(_, hir::UseKind::ListStem)\n-                        | hir::ItemKind::OpaqueTy(..)\n-                        | hir::ItemKind::ImplTraitPlaceholder(..),\n+                        | hir::ItemKind::OpaqueTy(..),\n                     ..\n                 }) => ty::Visibility::Restricted(tcx.parent_module(hir_id)),\n                 // Visibilities of trait impl items are inherited from their traits"}, {"sha": "6ff56f9a89114cd4367d7a18d0e8b71b3e98d912", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/05812df603ab5940c1dffe6514b25c665dccfcf1/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05812df603ab5940c1dffe6514b25c665dccfcf1/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=05812df603ab5940c1dffe6514b25c665dccfcf1", "patch": "@@ -596,10 +596,6 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     }\n                 }\n             }\n-            hir::ItemKind::ImplTraitPlaceholder(..) => {\n-                // FIXME(RPITIT): We don't need to do anything special here, right?\n-                intravisit::walk_item(self, item);\n-            }\n             hir::ItemKind::TyAlias(_, ref generics)\n             | hir::ItemKind::Enum(_, ref generics)\n             | hir::ItemKind::Struct(_, ref generics)\n@@ -719,7 +715,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                 };\n                 self.with(scope, |this| this.visit_ty(&mt.ty));\n             }\n-            hir::TyKind::OpaqueDef(item_id, lifetimes) => {\n+            hir::TyKind::OpaqueDef(item_id, lifetimes, _in_trait) => {\n                 // Resolve the lifetimes in the bounds to the lifetime defs in the generics.\n                 // `fn foo<'a>() -> impl MyTrait<'a> { ... }` desugars to\n                 // `type MyAnonTy<'b> = impl MyTrait<'b>;`"}, {"sha": "94f222251d3dc7b0787ccbdd26698d10925d93a3", "filename": "compiler/rustc_save_analysis/src/dump_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05812df603ab5940c1dffe6514b25c665dccfcf1/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05812df603ab5940c1dffe6514b25c665dccfcf1/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs?ref=05812df603ab5940c1dffe6514b25c665dccfcf1", "patch": "@@ -1321,7 +1321,7 @@ impl<'tcx> Visitor<'tcx> for DumpVisitor<'tcx> {\n                         }),\n                 }\n             }\n-            hir::TyKind::OpaqueDef(item_id, _) => {\n+            hir::TyKind::OpaqueDef(item_id, _, _) => {\n                 let item = self.tcx.hir().item(item_id);\n                 self.nest_typeck_results(item_id.def_id, |v| v.visit_item(item));\n             }"}, {"sha": "bae1828cd182df3f7f6380c4c325ed01e6cd30b7", "filename": "compiler/rustc_save_analysis/src/sig.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/05812df603ab5940c1dffe6514b25c665dccfcf1/compiler%2Frustc_save_analysis%2Fsrc%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05812df603ab5940c1dffe6514b25c665dccfcf1/compiler%2Frustc_save_analysis%2Fsrc%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fsig.rs?ref=05812df603ab5940c1dffe6514b25c665dccfcf1", "patch": "@@ -316,11 +316,7 @@ impl<'hir> Sig for hir::Ty<'hir> {\n                 let text = format!(\"[{}; {}]\", nested_ty.text, expr);\n                 Ok(replace_text(nested_ty, text))\n             }\n-            hir::TyKind::OpaqueDef(item_id, _) => {\n-                let item = scx.tcx.hir().item(item_id);\n-                item.make(offset, Some(item_id.hir_id()), scx)\n-            }\n-            hir::TyKind::ImplTraitInTrait(item_id) => {\n+            hir::TyKind::OpaqueDef(item_id, _, _) => {\n                 let item = scx.tcx.hir().item(item_id);\n                 item.make(offset, Some(item_id.hir_id()), scx)\n             }\n@@ -565,8 +561,13 @@ impl<'hir> Sig for hir::Item<'hir> {\n             hir::ItemKind::ForeignMod { .. } => Err(\"extern mod\"),\n             hir::ItemKind::GlobalAsm(_) => Err(\"global asm\"),\n             hir::ItemKind::ExternCrate(_) => Err(\"extern crate\"),\n-            hir::ItemKind::OpaqueTy(..) => Err(\"opaque type\"),\n-            hir::ItemKind::ImplTraitPlaceholder(..) => Err(\"opaque type in trait\"),\n+            hir::ItemKind::OpaqueTy(ref opaque) => {\n+                if opaque.in_trait {\n+                    Err(\"opaque type in trait\")\n+                } else {\n+                    Err(\"opaque type\")\n+                }\n+            }\n             // FIXME should implement this (e.g., pub use).\n             hir::ItemKind::Use(..) => Err(\"import\"),\n         }"}, {"sha": "8a65262a007230d0858e43ecf1a35f02512b3463", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05812df603ab5940c1dffe6514b25c665dccfcf1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05812df603ab5940c1dffe6514b25c665dccfcf1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=05812df603ab5940c1dffe6514b25c665dccfcf1", "patch": "@@ -2165,7 +2165,7 @@ fn confirm_impl_trait_in_trait_candidate<'tcx>(\n     let tcx = selcx.tcx();\n     let mut obligations = data.nested;\n \n-    let trait_fn_def_id = tcx.parent(obligation.predicate.item_def_id);\n+    let trait_fn_def_id = tcx.impl_trait_in_trait_parent(obligation.predicate.item_def_id);\n     let Ok(leaf_def) = assoc_def(selcx, data.impl_def_id, trait_fn_def_id) else {\n         return Progress { term: tcx.ty_error().into(), obligations };\n     };"}, {"sha": "d9789d5aaf0312e9be5018dc95e1f5810d77c410", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/05812df603ab5940c1dffe6514b25c665dccfcf1/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05812df603ab5940c1dffe6514b25c665dccfcf1/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=05812df603ab5940c1dffe6514b25c665dccfcf1", "patch": "@@ -2360,7 +2360,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n \n         let span = path.span;\n         match path.res {\n-            Res::Def(DefKind::OpaqueTy, did) => {\n+            Res::Def(DefKind::OpaqueTy | DefKind::ImplTraitPlaceholder, did) => {\n                 // Check for desugared `impl Trait`.\n                 assert!(ty::is_impl_trait_defn(tcx, did).is_none());\n                 let item_segment = path.segments.split_last().unwrap();\n@@ -2627,21 +2627,17 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 let opt_self_ty = maybe_qself.as_ref().map(|qself| self.ast_ty_to_ty(qself));\n                 self.res_to_ty(opt_self_ty, path, false)\n             }\n-            hir::TyKind::OpaqueDef(item_id, lifetimes) => {\n+            hir::TyKind::OpaqueDef(item_id, lifetimes, in_trait) => {\n                 let opaque_ty = tcx.hir().item(item_id);\n                 let def_id = item_id.def_id.to_def_id();\n \n                 match opaque_ty.kind {\n                     hir::ItemKind::OpaqueTy(hir::OpaqueTy { origin, .. }) => {\n-                        self.impl_trait_ty_to_ty(def_id, lifetimes, origin)\n+                        self.impl_trait_ty_to_ty(def_id, lifetimes, origin, in_trait)\n                     }\n                     ref i => bug!(\"`impl Trait` pointed to non-opaque type?? {:#?}\", i),\n                 }\n             }\n-            hir::TyKind::ImplTraitInTrait(item_id) => {\n-                let def_id = item_id.def_id.to_def_id();\n-                tcx.mk_projection(def_id, InternalSubsts::identity_for_item(tcx, def_id))\n-            }\n             hir::TyKind::Path(hir::QPath::TypeRelative(ref qself, ref segment)) => {\n                 debug!(?qself, ?segment);\n                 let ty = self.ast_ty_to_ty_inner(qself, false, true);\n@@ -2707,6 +2703,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         def_id: DefId,\n         lifetimes: &[hir::GenericArg<'_>],\n         origin: OpaqueTyOrigin,\n+        in_trait: bool,\n     ) -> Ty<'tcx> {\n         debug!(\"impl_trait_ty_to_ty(def_id={:?}, lifetimes={:?})\", def_id, lifetimes);\n         let tcx = self.tcx();\n@@ -2750,7 +2747,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         });\n         debug!(\"impl_trait_ty_to_ty: substs={:?}\", substs);\n \n-        tcx.mk_opaque(def_id, substs)\n+        if in_trait { tcx.mk_projection(def_id, substs) } else { tcx.mk_opaque(def_id, substs) }\n     }\n \n     pub fn ty_of_arg(&self, ty: &hir::Ty<'_>, expected_ty: Option<Ty<'tcx>>) -> Ty<'tcx> {"}, {"sha": "a6c8dbb2555dd05e6933ef2a4ad92cead5cd30e7", "filename": "compiler/rustc_typeck/src/check/compare_method.rs", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/05812df603ab5940c1dffe6514b25c665dccfcf1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05812df603ab5940c1dffe6514b25c665dccfcf1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=05812df603ab5940c1dffe6514b25c665dccfcf1", "patch": "@@ -423,9 +423,28 @@ pub(super) fn compare_predicates_and_trait_impl_trait_tys<'tcx>(\n         );\n \n         let mut collected_tys = FxHashMap::default();\n-        for (def_id, ty) in collector.types {\n+        for (def_id, (ty, substs)) in collector.types {\n             match infcx.fully_resolve(ty) {\n                 Ok(ty) => {\n+                    // `ty` contains free regions that we created earlier while liberating the\n+                    // trait fn signature.  However, projection normalization expects `ty` to\n+                    // contains `def_id`'s early-bound regions.\n+                    let id_substs = InternalSubsts::identity_for_item(tcx, def_id);\n+                    debug!(?id_substs, ?substs);\n+                    let map: FxHashMap<ty::GenericArg<'tcx>, ty::GenericArg<'tcx>> = substs\n+                        .iter()\n+                        .enumerate()\n+                        .map(|(index, arg)| (arg, id_substs[index]))\n+                        .collect();\n+                    debug!(?map);\n+\n+                    let ty = tcx.fold_regions(ty, |region, _| {\n+                        if let ty::ReFree(_) = region.kind() {\n+                            map[&region.into()].expect_region()\n+                        } else {\n+                            region\n+                        }\n+                    });\n                     collected_tys.insert(def_id, ty);\n                 }\n                 Err(err) => {\n@@ -444,7 +463,7 @@ pub(super) fn compare_predicates_and_trait_impl_trait_tys<'tcx>(\n \n struct ImplTraitInTraitCollector<'a, 'tcx> {\n     ocx: &'a ObligationCtxt<'a, 'tcx>,\n-    types: FxHashMap<DefId, Ty<'tcx>>,\n+    types: FxHashMap<DefId, (Ty<'tcx>, ty::SubstsRef<'tcx>)>,\n     span: Span,\n     param_env: ty::ParamEnv<'tcx>,\n     body_id: hir::HirId,\n@@ -470,7 +489,7 @@ impl<'tcx> TypeFolder<'tcx> for ImplTraitInTraitCollector<'_, 'tcx> {\n         if let ty::Projection(proj) = ty.kind()\n             && self.tcx().def_kind(proj.item_def_id) == DefKind::ImplTraitPlaceholder\n         {\n-            if let Some(ty) = self.types.get(&proj.item_def_id) {\n+            if let Some((ty, _)) = self.types.get(&proj.item_def_id) {\n                 return *ty;\n             }\n             //FIXME(RPITIT): Deny nested RPITIT in substs too\n@@ -482,7 +501,7 @@ impl<'tcx> TypeFolder<'tcx> for ImplTraitInTraitCollector<'_, 'tcx> {\n                 span: self.span,\n                 kind: TypeVariableOriginKind::MiscVariable,\n             });\n-            self.types.insert(proj.item_def_id, infer_ty);\n+            self.types.insert(proj.item_def_id, (infer_ty, proj.substs));\n             // Recurse into bounds\n             for pred in self.tcx().bound_explicit_item_bounds(proj.item_def_id).transpose_iter() {\n                 let pred_span = pred.0.1;"}, {"sha": "ceb5684fdf0a8f4c98c9a49526b09a92bebc0df5", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 10, "deletions": 15, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/05812df603ab5940c1dffe6514b25c665dccfcf1/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05812df603ab5940c1dffe6514b25c665dccfcf1/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=05812df603ab5940c1dffe6514b25c665dccfcf1", "patch": "@@ -815,11 +815,6 @@ fn convert_item(tcx: TyCtxt<'_>, item_id: hir::ItemId) {\n             tcx.ensure().predicates_of(def_id);\n             tcx.ensure().explicit_item_bounds(def_id);\n         }\n-        hir::ItemKind::ImplTraitPlaceholder(..) => {\n-            tcx.ensure().generics_of(def_id);\n-            tcx.ensure().predicates_of(def_id);\n-            tcx.ensure().explicit_item_bounds(def_id);\n-        }\n         hir::ItemKind::TyAlias(..)\n         | hir::ItemKind::Static(..)\n         | hir::ItemKind::Const(..)\n@@ -1590,8 +1585,16 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n             ItemKind::OpaqueTy(hir::OpaqueTy {\n                 origin:\n                     hir::OpaqueTyOrigin::FnReturn(fn_def_id) | hir::OpaqueTyOrigin::AsyncFn(fn_def_id),\n+                in_trait,\n                 ..\n-            }) => Some(fn_def_id.to_def_id()),\n+            }) => {\n+                if in_trait {\n+                    assert!(matches!(tcx.def_kind(fn_def_id), DefKind::AssocFn))\n+                } else {\n+                    assert!(matches!(tcx.def_kind(fn_def_id), DefKind::AssocFn | DefKind::Fn))\n+                }\n+                Some(fn_def_id.to_def_id())\n+            }\n             ItemKind::OpaqueTy(hir::OpaqueTy { origin: hir::OpaqueTyOrigin::TyAlias, .. }) => {\n                 let parent_id = tcx.hir().get_parent_item(hir_id);\n                 assert_ne!(parent_id, CRATE_DEF_ID);\n@@ -1600,14 +1603,6 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n                 // inherit the generics of the item.\n                 Some(parent_id.to_def_id())\n             }\n-            ItemKind::ImplTraitPlaceholder(_) => {\n-                let parent_id = tcx.hir().get_parent_item(hir_id).to_def_id();\n-                assert!(matches!(\n-                    tcx.def_kind(parent_id),\n-                    DefKind::AssocFn | DefKind::ImplTraitPlaceholder\n-                ));\n-                Some(parent_id)\n-            }\n             _ => None,\n         },\n         _ => None,\n@@ -1800,7 +1795,7 @@ fn is_suggestable_infer_ty(ty: &hir::Ty<'_>) -> bool {\n         }\n         Tup(tys) => tys.iter().any(is_suggestable_infer_ty),\n         Ptr(mut_ty) | Rptr(_, mut_ty) => is_suggestable_infer_ty(mut_ty.ty),\n-        OpaqueDef(_, generic_args) => are_suggestable_generic_args(generic_args),\n+        OpaqueDef(_, generic_args, _) => are_suggestable_generic_args(generic_args),\n         Path(hir::QPath::TypeRelative(ty, segment)) => {\n             is_suggestable_infer_ty(ty) || are_suggestable_generic_args(segment.args().args)\n         }"}, {"sha": "0d34a8bfee333d3d457fd32e15cfc101eb5ad474", "filename": "compiler/rustc_typeck/src/collect/item_bounds.rs", "status": "modified", "additions": 9, "deletions": 32, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/05812df603ab5940c1dffe6514b25c665dccfcf1/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Fitem_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05812df603ab5940c1dffe6514b25c665dccfcf1/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Fitem_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Fitem_bounds.rs?ref=05812df603ab5940c1dffe6514b25c665dccfcf1", "patch": "@@ -59,10 +59,15 @@ fn opaque_type_bounds<'tcx>(\n     opaque_def_id: DefId,\n     ast_bounds: &'tcx [hir::GenericBound<'tcx>],\n     span: Span,\n+    in_trait: bool,\n ) -> &'tcx [(ty::Predicate<'tcx>, Span)] {\n     ty::print::with_no_queries!({\n-        let item_ty =\n-            tcx.mk_opaque(opaque_def_id, InternalSubsts::identity_for_item(tcx, opaque_def_id));\n+        let substs = InternalSubsts::identity_for_item(tcx, opaque_def_id);\n+        let item_ty = if in_trait {\n+            tcx.mk_projection(opaque_def_id, substs)\n+        } else {\n+            tcx.mk_opaque(opaque_def_id, substs)\n+        };\n \n         let icx = ItemCtxt::new(tcx, opaque_def_id);\n         let mut bounds = <dyn AstConv<'_>>::compute_bounds(&icx, item_ty, ast_bounds);\n@@ -74,29 +79,6 @@ fn opaque_type_bounds<'tcx>(\n     })\n }\n \n-/// Opaque types don't inherit bounds from their parent: for return position\n-/// impl trait it isn't possible to write a suitable predicate on the\n-/// containing function and for type-alias impl trait we don't have a backwards\n-/// compatibility issue.\n-fn impl_trait_in_trait_item_bounds<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n-    opaque_def_id: DefId,\n-    ast_bounds: &'tcx [hir::GenericBound<'tcx>],\n-    span: Span,\n-) -> &'tcx [(ty::Predicate<'tcx>, Span)] {\n-    ty::print::with_no_queries!({\n-        // FIXME(RPITIT): DRY-er code please\n-        let item_ty =\n-            tcx.mk_projection(opaque_def_id, InternalSubsts::identity_for_item(tcx, opaque_def_id));\n-\n-        let icx = ItemCtxt::new(tcx, opaque_def_id);\n-        let mut bounds = <dyn AstConv<'_>>::compute_bounds(&icx, item_ty, ast_bounds);\n-        // RPITITs are implicitly sized unless a `?Sized` bound is found\n-        <dyn AstConv<'_>>::add_implicitly_sized(&icx, &mut bounds, ast_bounds, None, span);\n-        tcx.arena.alloc_from_iter(bounds.predicates(tcx, item_ty))\n-    })\n-}\n-\n pub(super) fn explicit_item_bounds(\n     tcx: TyCtxt<'_>,\n     def_id: DefId,\n@@ -109,15 +91,10 @@ pub(super) fn explicit_item_bounds(\n             ..\n         }) => associated_type_bounds(tcx, def_id, bounds, *span),\n         hir::Node::Item(hir::Item {\n-            kind: hir::ItemKind::OpaqueTy(hir::OpaqueTy { bounds, .. }),\n-            span,\n-            ..\n-        }) => opaque_type_bounds(tcx, def_id, bounds, *span),\n-        hir::Node::Item(hir::Item {\n-            kind: hir::ItemKind::ImplTraitPlaceholder(hir::ImplTraitPlaceholder { bounds }),\n+            kind: hir::ItemKind::OpaqueTy(hir::OpaqueTy { bounds, in_trait, .. }),\n             span,\n             ..\n-        }) => impl_trait_in_trait_item_bounds(tcx, def_id, bounds, *span),\n+        }) => opaque_type_bounds(tcx, def_id, bounds, *span, *in_trait),\n         _ => bug!(\"item_bounds called on {:?}\", def_id),\n     }\n }"}, {"sha": "a26e26cb38996074ea685d94b8fe362457d70a5b", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/05812df603ab5940c1dffe6514b25c665dccfcf1/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05812df603ab5940c1dffe6514b25c665dccfcf1/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=05812df603ab5940c1dffe6514b25c665dccfcf1", "patch": "@@ -333,11 +333,12 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                     find_opaque_ty_constraints_for_tait(tcx, def_id)\n                 }\n                 // Opaque types desugared from `impl Trait`.\n-                ItemKind::OpaqueTy(OpaqueTy { origin: hir::OpaqueTyOrigin::FnReturn(owner) | hir::OpaqueTyOrigin::AsyncFn(owner), .. }) => {\n-                    find_opaque_ty_constraints_for_rpit(tcx, def_id, owner)\n-                }\n-                ItemKind::ImplTraitPlaceholder(..) => {\n-                    span_bug!(item.span, \"not yet implemented\")\n+                ItemKind::OpaqueTy(OpaqueTy { origin: hir::OpaqueTyOrigin::FnReturn(owner) | hir::OpaqueTyOrigin::AsyncFn(owner), in_trait, .. }) => {\n+                    if in_trait {\n+                        span_bug!(item.span, \"impl-trait in trait has no default\")\n+                    } else {\n+                        find_opaque_ty_constraints_for_rpit(tcx, def_id, owner)\n+                    }\n                 }\n                 ItemKind::Trait(..)\n                 | ItemKind::TraitAlias(..)"}, {"sha": "08b696e65eb3b0c10b10245cb819c285a56bd6be", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/05812df603ab5940c1dffe6514b25c665dccfcf1/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05812df603ab5940c1dffe6514b25c665dccfcf1/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=05812df603ab5940c1dffe6514b25c665dccfcf1", "patch": "@@ -1492,24 +1492,14 @@ pub(crate) fn clean_ty<'tcx>(ty: &hir::Ty<'tcx>, cx: &mut DocContext<'tcx>) -> T\n             Array(Box::new(clean_ty(ty, cx)), length)\n         }\n         TyKind::Tup(tys) => Tuple(tys.iter().map(|ty| clean_ty(ty, cx)).collect()),\n-        TyKind::OpaqueDef(item_id, _) => {\n+        TyKind::OpaqueDef(item_id, _, _) => {\n             let item = cx.tcx.hir().item(item_id);\n             if let hir::ItemKind::OpaqueTy(ref ty) = item.kind {\n                 ImplTrait(ty.bounds.iter().filter_map(|x| clean_generic_bound(x, cx)).collect())\n             } else {\n                 unreachable!()\n             }\n         }\n-        TyKind::ImplTraitInTrait(item_id) => {\n-            let item = cx.tcx.hir().item(item_id);\n-            if let hir::ItemKind::ImplTraitPlaceholder(hir::ImplTraitPlaceholder { bounds }) =\n-                item.kind\n-            {\n-                ImplTrait(bounds.iter().filter_map(|x| clean_generic_bound(x, cx)).collect())\n-            } else {\n-                unreachable!()\n-            }\n-        }\n         TyKind::Path(_) => clean_qpath(ty, cx),\n         TyKind::TraitObject(bounds, ref lifetime, _) => {\n             let bounds = bounds.iter().map(|bound| clean_poly_trait_ref(bound, cx)).collect();"}, {"sha": "ca7a20bf3688a934fd2a36a937c253e8f40f0b5f", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/05812df603ab5940c1dffe6514b25c665dccfcf1/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05812df603ab5940c1dffe6514b25c665dccfcf1/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=05812df603ab5940c1dffe6514b25c665dccfcf1", "patch": "@@ -362,7 +362,6 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             | hir::ItemKind::Union(..)\n             | hir::ItemKind::TyAlias(..)\n             | hir::ItemKind::OpaqueTy(..)\n-            | hir::ItemKind::ImplTraitPlaceholder(..)\n             | hir::ItemKind::Static(..)\n             | hir::ItemKind::Trait(..)\n             | hir::ItemKind::TraitAlias(..) => om.items.push((item, renamed)),"}, {"sha": "2e06629699aad7572950523f5603aa97f6bdab26", "filename": "src/test/ui/impl-trait/in-trait/opaque-in-impl.rs", "status": "modified", "additions": 32, "deletions": 4, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/05812df603ab5940c1dffe6514b25c665dccfcf1/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fopaque-in-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05812df603ab5940c1dffe6514b25c665dccfcf1/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fopaque-in-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fopaque-in-impl.rs?ref=05812df603ab5940c1dffe6514b25c665dccfcf1", "patch": "@@ -3,18 +3,46 @@\n #![feature(return_position_impl_trait_in_trait)]\n #![allow(incomplete_features)]\n \n-use std::fmt::Display;\n+use std::fmt::Debug;\n \n trait Foo {\n-    fn bar(&self) -> impl Display;\n+    fn foo(&self) -> impl Debug;\n }\n \n impl Foo for () {\n-    fn bar(&self) -> impl Display {\n+    fn foo(&self) -> impl Debug {\n         \"Hello, world\"\n     }\n }\n \n+impl<T: Default + Debug> Foo for std::marker::PhantomData<T> {\n+    fn foo(&self) -> impl Debug {\n+        T::default()\n+    }\n+}\n+\n+trait Bar {\n+    fn bar<T>(&self) -> impl Debug;\n+}\n+\n+impl Bar for () {\n+    fn bar<T>(&self) -> impl Debug {\n+        format!(\"Hello with generic {}\", std::any::type_name::<T>())\n+    }\n+}\n+\n+trait Baz {\n+    fn baz(&self) -> impl Debug + '_;\n+}\n+\n+impl Baz for String {\n+    fn baz(&self) -> impl Debug + '_ {\n+        (self,)\n+    }\n+}\n+\n fn main() {\n-    println!(\"{}\", ().bar());\n+    println!(\"{:?}\", ().foo());\n+    println!(\"{:?}\", ().bar::<u64>());\n+    println!(\"{:?}\", \"hi\".to_string().baz());\n }"}]}