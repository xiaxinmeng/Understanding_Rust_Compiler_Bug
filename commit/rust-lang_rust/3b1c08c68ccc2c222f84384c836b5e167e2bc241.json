{"sha": "3b1c08c68ccc2c222f84384c836b5e167e2bc241", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiMWMwOGM2OGNjYzJjMjIyZjg0Mzg0YzgzNmI1ZTE2N2UyYmMyNDE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-06-23T04:03:28Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-06-23T04:03:28Z"}, "message": "Auto merge of #73635 - Dylan-DPC:rollup-b4wbp42, r=Dylan-DPC\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #71756 (add Windows system error codes that should map to io::ErrorKind::TimedOut)\n - #73495 (Converted all platform-specific stdin/stdout/stderr implementations to use io:: traits)\n - #73575 (Fix typo in error_codes doc)\n - #73578 (Make is_freeze and is_copy_modulo_regions take TyCtxtAt)\n - #73586 (switch_ty is redundant)\n - #73600 (Fix spurious 'value moved here in previous iteration of loop' messages)\n - #73610 (Clean up E0699 explanation)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "fbe75cb4169897808d893310d39b9ca806610bd7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fbe75cb4169897808d893310d39b9ca806610bd7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b1c08c68ccc2c222f84384c836b5e167e2bc241", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b1c08c68ccc2c222f84384c836b5e167e2bc241", "html_url": "https://github.com/rust-lang/rust/commit/3b1c08c68ccc2c222f84384c836b5e167e2bc241", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b1c08c68ccc2c222f84384c836b5e167e2bc241/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dcd470fe1be03136a8e1794b7e2cc6179bbd9d92", "url": "https://api.github.com/repos/rust-lang/rust/commits/dcd470fe1be03136a8e1794b7e2cc6179bbd9d92", "html_url": "https://github.com/rust-lang/rust/commit/dcd470fe1be03136a8e1794b7e2cc6179bbd9d92"}, {"sha": "e97939275697db27b40535b3a14be0f14a6853c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/e97939275697db27b40535b3a14be0f14a6853c2", "html_url": "https://github.com/rust-lang/rust/commit/e97939275697db27b40535b3a14be0f14a6853c2"}], "stats": {"total": 290, "additions": 176, "deletions": 114}, "files": [{"sha": "5125ce779ed8e35d450279d132e4d89da282dcf5", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b1c08c68ccc2c222f84384c836b5e167e2bc241/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b1c08c68ccc2c222f84384c836b5e167e2bc241/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=3b1c08c68ccc2c222f84384c836b5e167e2bc241", "patch": "@@ -200,6 +200,8 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         targets: &Vec<mir::BasicBlock>,\n     ) {\n         let discr = self.codegen_operand(&mut bx, &discr);\n+        // `switch_ty` is redundant, sanity-check that.\n+        assert_eq!(discr.layout.ty, switch_ty);\n         if targets.len() == 2 {\n             // If there are two targets, emit br instead of switch\n             let lltrue = helper.llblock(self, targets[0]);"}, {"sha": "c55bf9858b972450c4cd607ee630221dacb23f38", "filename": "src/librustc_codegen_ssa/traits/type_.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b1c08c68ccc2c222f84384c836b5e167e2bc241/src%2Flibrustc_codegen_ssa%2Ftraits%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b1c08c68ccc2c222f84384c836b5e167e2bc241/src%2Flibrustc_codegen_ssa%2Ftraits%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Ftype_.rs?ref=3b1c08c68ccc2c222f84384c836b5e167e2bc241", "patch": "@@ -74,7 +74,7 @@ pub trait DerivedTypeMethods<'tcx>: BaseTypeMethods<'tcx> + MiscMethods<'tcx> {\n     }\n \n     fn type_is_freeze(&self, ty: Ty<'tcx>) -> bool {\n-        ty.is_freeze(self.tcx(), ty::ParamEnv::reveal_all(), DUMMY_SP)\n+        ty.is_freeze(self.tcx().at(DUMMY_SP), ty::ParamEnv::reveal_all())\n     }\n \n     fn type_has_metadata(&self, ty: Ty<'tcx>) -> bool {"}, {"sha": "b834a734cefc447202d5a0dd2b64636f98fdf637", "filename": "src/librustc_error_codes/error_codes/E0081.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b1c08c68ccc2c222f84384c836b5e167e2bc241/src%2Flibrustc_error_codes%2Ferror_codes%2FE0081.md", "raw_url": "https://github.com/rust-lang/rust/raw/3b1c08c68ccc2c222f84384c836b5e167e2bc241/src%2Flibrustc_error_codes%2Ferror_codes%2FE0081.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0081.md?ref=3b1c08c68ccc2c222f84384c836b5e167e2bc241", "patch": "@@ -1,4 +1,4 @@\n-A discrimant value is present more than once.\n+A discriminant value is present more than once.\n \n Erroneous code example:\n "}, {"sha": "454d2507e5e2e2bf677d95a1c8f278f2e6f7686f", "filename": "src/librustc_error_codes/error_codes/E0699.md", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3b1c08c68ccc2c222f84384c836b5e167e2bc241/src%2Flibrustc_error_codes%2Ferror_codes%2FE0699.md", "raw_url": "https://github.com/rust-lang/rust/raw/3b1c08c68ccc2c222f84384c836b5e167e2bc241/src%2Flibrustc_error_codes%2Ferror_codes%2FE0699.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0699.md?ref=3b1c08c68ccc2c222f84384c836b5e167e2bc241", "patch": "@@ -1,14 +1,16 @@\n A method was called on a raw pointer whose inner type wasn't completely known.\n \n-For example, you may have done something like:\n+Erroneous code example:\n \n-```compile_fail\n+```compile_fail,edition2018,E0699\n # #![deny(warnings)]\n+# fn main() {\n let foo = &1;\n let bar = foo as *const _;\n if bar.is_null() {\n     // ...\n }\n+# }\n ```\n \n Here, the type of `bar` isn't known; it could be a pointer to anything. Instead,"}, {"sha": "e746396e4c684d7e13afb04ef2ac0dd7e75169d1", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b1c08c68ccc2c222f84384c836b5e167e2bc241/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b1c08c68ccc2c222f84384c836b5e167e2bc241/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=3b1c08c68ccc2c222f84384c836b5e167e2bc241", "patch": "@@ -562,7 +562,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingCopyImplementations {\n             return;\n         }\n         let param_env = ty::ParamEnv::empty();\n-        if ty.is_copy_modulo_regions(cx.tcx, param_env, item.span) {\n+        if ty.is_copy_modulo_regions(cx.tcx.at(item.span), param_env) {\n             return;\n         }\n         if can_type_implement_copy(cx.tcx, param_env, ty).is_ok() {"}, {"sha": "649766547990f264bf5b81fbcdd0705e383bebc6", "filename": "src/librustc_middle/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b1c08c68ccc2c222f84384c836b5e167e2bc241/src%2Flibrustc_middle%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b1c08c68ccc2c222f84384c836b5e167e2bc241/src%2Flibrustc_middle%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Fmod.rs?ref=3b1c08c68ccc2c222f84384c836b5e167e2bc241", "patch": "@@ -1075,6 +1075,8 @@ pub enum TerminatorKind<'tcx> {\n         discr: Operand<'tcx>,\n \n         /// The type of value being tested.\n+        /// This is always the same as the type of `discr`.\n+        /// FIXME: remove this redundant information. Currently, it is relied on by pretty-printing.\n         switch_ty: Ty<'tcx>,\n \n         /// Possible values. The locations to branch to in each case"}, {"sha": "e4cc96dd83bfbd751cd4b29b9e1b9bcd1e892b32", "filename": "src/librustc_middle/ty/layout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b1c08c68ccc2c222f84384c836b5e167e2bc241/src%2Flibrustc_middle%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b1c08c68ccc2c222f84384c836b5e167e2bc241/src%2Flibrustc_middle%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Flayout.rs?ref=3b1c08c68ccc2c222f84384c836b5e167e2bc241", "patch": "@@ -2159,7 +2159,7 @@ where\n \n             ty::Ref(_, ty, mt) if offset.bytes() == 0 => {\n                 let tcx = cx.tcx();\n-                let is_freeze = ty.is_freeze(tcx, cx.param_env(), DUMMY_SP);\n+                let is_freeze = ty.is_freeze(tcx.at(DUMMY_SP), cx.param_env());\n                 let kind = match mt {\n                     hir::Mutability::Not => {\n                         if is_freeze {"}, {"sha": "67ad7ee708267968560c9b5b1b97106d5b041ff2", "filename": "src/librustc_middle/ty/util.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3b1c08c68ccc2c222f84384c836b5e167e2bc241/src%2Flibrustc_middle%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b1c08c68ccc2c222f84384c836b5e167e2bc241/src%2Flibrustc_middle%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Futil.rs?ref=3b1c08c68ccc2c222f84384c836b5e167e2bc241", "patch": "@@ -681,11 +681,10 @@ impl<'tcx> ty::TyS<'tcx> {\n     /// winds up being reported as an error during NLL borrow check.\n     pub fn is_copy_modulo_regions(\n         &'tcx self,\n-        tcx: TyCtxt<'tcx>,\n+        tcx_at: TyCtxtAt<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n-        span: Span,\n     ) -> bool {\n-        tcx.at(span).is_copy_raw(param_env.and(self))\n+        tcx_at.is_copy_raw(param_env.and(self))\n     }\n \n     /// Checks whether values of this type `T` have a size known at\n@@ -706,13 +705,8 @@ impl<'tcx> ty::TyS<'tcx> {\n     /// that the `Freeze` trait is not exposed to end users and is\n     /// effectively an implementation detail.\n     // FIXME: use `TyCtxtAt` instead of separate `Span`.\n-    pub fn is_freeze(\n-        &'tcx self,\n-        tcx: TyCtxt<'tcx>,\n-        param_env: ty::ParamEnv<'tcx>,\n-        span: Span,\n-    ) -> bool {\n-        self.is_trivially_freeze() || tcx.at(span).is_freeze_raw(param_env.and(self))\n+    pub fn is_freeze(&'tcx self, tcx_at: TyCtxtAt<'tcx>, param_env: ty::ParamEnv<'tcx>) -> bool {\n+        self.is_trivially_freeze() || tcx_at.is_freeze_raw(param_env.and(self))\n     }\n \n     /// Fast path helper for testing if a type is `Freeze`."}, {"sha": "8d7944004c75e2fdf9f1366e4df35fe329ec5185", "filename": "src/librustc_mir/borrow_check/diagnostics/conflict_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b1c08c68ccc2c222f84384c836b5e167e2bc241/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b1c08c68ccc2c222f84384c836b5e167e2bc241/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs?ref=3b1c08c68ccc2c222f84384c836b5e167e2bc241", "patch": "@@ -138,7 +138,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n \n                 let move_msg = if move_spans.for_closure() { \" into closure\" } else { \"\" };\n \n-                if span == move_span {\n+                if location == move_out.source {\n                     err.span_label(\n                         span,\n                         format!(\"value moved{} here, in previous iteration of loop\", move_msg),"}, {"sha": "a3fc51cad656b0c9f2721f2d53b3b68d21dd527f", "filename": "src/librustc_mir/dataflow/impls/borrowed_locals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b1c08c68ccc2c222f84384c836b5e167e2bc241/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrowed_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b1c08c68ccc2c222f84384c836b5e167e2bc241/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrowed_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrowed_locals.rs?ref=3b1c08c68ccc2c222f84384c836b5e167e2bc241", "patch": "@@ -233,7 +233,7 @@ impl MutBorrow<'mir, 'tcx> {\n     ///\n     /// [rust-lang/unsafe-code-guidelines#134]: https://github.com/rust-lang/unsafe-code-guidelines/issues/134\n     fn shared_borrow_allows_mutation(&self, place: Place<'tcx>) -> bool {\n-        !place.ty(self.body, self.tcx).ty.is_freeze(self.tcx, self.param_env, DUMMY_SP)\n+        !place.ty(self.body, self.tcx).ty.is_freeze(self.tcx.at(DUMMY_SP), self.param_env)\n     }\n }\n "}, {"sha": "95e193b6253541ac0ddb3ea0efb953ea3cbb5709", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b1c08c68ccc2c222f84384c836b5e167e2bc241/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b1c08c68ccc2c222f84384c836b5e167e2bc241/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=3b1c08c68ccc2c222f84384c836b5e167e2bc241", "patch": "@@ -391,7 +391,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n     #[inline]\n     pub fn type_is_freeze(&self, ty: Ty<'tcx>) -> bool {\n-        ty.is_freeze(*self.tcx, self.param_env, self.tcx.span)\n+        ty.is_freeze(self.tcx, self.param_env)\n     }\n \n     pub fn load_mir("}, {"sha": "dffbc969c21b8c645158e7ba7850e59d29df5bb6", "filename": "src/librustc_mir/interpret/intern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b1c08c68ccc2c222f84384c836b5e167e2bc241/src%2Flibrustc_mir%2Finterpret%2Fintern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b1c08c68ccc2c222f84384c836b5e167e2bc241/src%2Flibrustc_mir%2Finterpret%2Fintern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintern.rs?ref=3b1c08c68ccc2c222f84384c836b5e167e2bc241", "patch": "@@ -111,7 +111,7 @@ fn intern_shallow<'rt, 'mir, 'tcx, M: CompileTimeMachine<'mir, 'tcx>>(\n     if let InternMode::Static(mutability) = mode {\n         // For this, we need to take into account `UnsafeCell`. When `ty` is `None`, we assume\n         // no interior mutability.\n-        let frozen = ty.map_or(true, |ty| ty.is_freeze(*ecx.tcx, ecx.param_env, ecx.tcx.span));\n+        let frozen = ty.map_or(true, |ty| ty.is_freeze(ecx.tcx, ecx.param_env));\n         // For statics, allocation mutability is the combination of the place mutability and\n         // the type mutability.\n         // The entire allocation needs to be mutable if it contains an `UnsafeCell` anywhere."}, {"sha": "4681079a22ddf4f3ef7abca68251054098c2ed30", "filename": "src/librustc_mir/interpret/terminator.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3b1c08c68ccc2c222f84384c836b5e167e2bc241/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b1c08c68ccc2c222f84384c836b5e167e2bc241/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs?ref=3b1c08c68ccc2c222f84384c836b5e167e2bc241", "patch": "@@ -24,9 +24,10 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n             Goto { target } => self.go_to_block(target),\n \n-            SwitchInt { ref discr, ref values, ref targets, .. } => {\n+            SwitchInt { ref discr, ref values, ref targets, switch_ty } => {\n                 let discr = self.read_immediate(self.eval_operand(discr, None)?)?;\n                 trace!(\"SwitchInt({:?})\", *discr);\n+                assert_eq!(discr.layout.ty, switch_ty);\n \n                 // Branch to the `otherwise` case by default, if no match is found.\n                 assert!(!targets.is_empty());\n@@ -50,14 +51,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 self.go_to_block(target_block);\n             }\n \n-            Call {\n-                ref func,\n-                ref args,\n-                destination,\n-                ref cleanup,\n-                from_hir_call: _from_hir_call,\n-                fn_span: _,\n-            } => {\n+            Call { ref func, ref args, destination, ref cleanup, from_hir_call: _, fn_span: _ } => {\n                 let old_stack = self.frame_idx();\n                 let old_loc = self.frame().loc;\n                 let func = self.eval_operand(func, None)?;"}, {"sha": "8327affd982ed0f4578d41eded44cf05460e573b", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b1c08c68ccc2c222f84384c836b5e167e2bc241/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b1c08c68ccc2c222f84384c836b5e167e2bc241/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=3b1c08c68ccc2c222f84384c836b5e167e2bc241", "patch": "@@ -327,7 +327,7 @@ fn build_clone_shim<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, self_ty: Ty<'tcx>) -\n     let param_env = tcx.param_env(def_id);\n \n     let mut builder = CloneShimBuilder::new(tcx, def_id, self_ty);\n-    let is_copy = self_ty.is_copy_modulo_regions(tcx, param_env, builder.span);\n+    let is_copy = self_ty.is_copy_modulo_regions(tcx.at(builder.span), param_env);\n \n     let dest = Place::return_place();\n     let src = tcx.mk_place_deref(Place::from(Local::new(1 + 0)));"}, {"sha": "e2893e81a2ce63dc8a0cebdce21ac276ce145957", "filename": "src/librustc_mir/transform/check_consts/qualifs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b1c08c68ccc2c222f84384c836b5e167e2bc241/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b1c08c68ccc2c222f84384c836b5e167e2bc241/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fqualifs.rs?ref=3b1c08c68ccc2c222f84384c836b5e167e2bc241", "patch": "@@ -77,7 +77,7 @@ impl Qualif for HasMutInterior {\n     }\n \n     fn in_any_value_of_ty(cx: &ConstCx<'_, 'tcx>, ty: Ty<'tcx>) -> bool {\n-        !ty.is_freeze(cx.tcx, cx.param_env, DUMMY_SP)\n+        !ty.is_freeze(cx.tcx.at(DUMMY_SP), cx.param_env)\n     }\n \n     fn in_adt_inherently(cx: &ConstCx<'_, 'tcx>, adt: &'tcx AdtDef, _: SubstsRef<'tcx>) -> bool {"}, {"sha": "9898cde5207780ac582c5e7c899e402bd59968c9", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3b1c08c68ccc2c222f84384c836b5e167e2bc241/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b1c08c68ccc2c222f84384c836b5e167e2bc241/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=3b1c08c68ccc2c222f84384c836b5e167e2bc241", "patch": "@@ -282,9 +282,8 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                                 ),\n                             };\n                             if !elem_ty.is_copy_modulo_regions(\n-                                self.tcx,\n+                                self.tcx.at(self.source_info.span),\n                                 self.param_env,\n-                                self.source_info.span,\n                             ) {\n                                 self.require_unsafe(\n                                     \"assignment to non-`Copy` union field\",\n@@ -459,11 +458,11 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n \n                             // Check `is_freeze` as late as possible to avoid cycle errors\n                             // with opaque types.\n-                            } else if !place.ty(self.body, self.tcx).ty.is_freeze(\n-                                self.tcx,\n-                                self.param_env,\n-                                self.source_info.span,\n-                            ) {\n+                            } else if !place\n+                                .ty(self.body, self.tcx)\n+                                .ty\n+                                .is_freeze(self.tcx.at(self.source_info.span), self.param_env)\n+                            {\n                                 (\n                                     \"borrow of layout constrained field with interior \\\n                                         mutability\","}, {"sha": "8bcbcd79ae60b798a49ed22bb6a2221b8599d08e", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3b1c08c68ccc2c222f84384c836b5e167e2bc241/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b1c08c68ccc2c222f84384c836b5e167e2bc241/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=3b1c08c68ccc2c222f84384c836b5e167e2bc241", "patch": "@@ -341,7 +341,7 @@ impl<'tcx> Validator<'_, 'tcx> {\n                                     Place::ty_from(place.local, proj_base, self.body, self.tcx)\n                                         .projection_ty(self.tcx, elem)\n                                         .ty;\n-                                if ty.is_freeze(self.tcx, self.param_env, DUMMY_SP) {\n+                                if ty.is_freeze(self.tcx.at(DUMMY_SP), self.param_env) {\n                                     has_mut_interior = false;\n                                     break;\n                                 }\n@@ -678,7 +678,7 @@ impl<'tcx> Validator<'_, 'tcx> {\n                         let ty = Place::ty_from(place.local, proj_base, self.body, self.tcx)\n                             .projection_ty(self.tcx, elem)\n                             .ty;\n-                        if ty.is_freeze(self.tcx, self.param_env, DUMMY_SP) {\n+                        if ty.is_freeze(self.tcx.at(DUMMY_SP), self.param_env) {\n                             has_mut_interior = false;\n                             break;\n                         }"}, {"sha": "c5343d9b5d014071e36f89cfacbcf17e02a12a3c", "filename": "src/librustc_mir/transform/validate.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3b1c08c68ccc2c222f84384c836b5e167e2bc241/src%2Flibrustc_mir%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b1c08c68ccc2c222f84384c836b5e167e2bc241/src%2Flibrustc_mir%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fvalidate.rs?ref=3b1c08c68ccc2c222f84384c836b5e167e2bc241", "patch": "@@ -90,7 +90,7 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n             let ty = place.ty(&self.body.local_decls, self.tcx).ty;\n             let span = self.body.source_info(location).span;\n \n-            if !ty.is_copy_modulo_regions(self.tcx, self.param_env, span) {\n+            if !ty.is_copy_modulo_regions(self.tcx.at(span), self.param_env) {\n                 self.fail(location, format!(\"`Operand::Copy` with non-`Copy` type {}\", ty));\n             }\n         }\n@@ -121,7 +121,17 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n             TerminatorKind::Goto { target } => {\n                 self.check_edge(location, *target, EdgeKind::Normal);\n             }\n-            TerminatorKind::SwitchInt { targets, values, .. } => {\n+            TerminatorKind::SwitchInt { targets, values, switch_ty, discr } => {\n+                let ty = discr.ty(&self.body.local_decls, self.tcx);\n+                if ty != *switch_ty {\n+                    self.fail(\n+                        location,\n+                        format!(\n+                            \"encountered `SwitchInt` terminator with type mismatch: {:?} != {:?}\",\n+                            ty, switch_ty,\n+                        ),\n+                    );\n+                }\n                 if targets.len() != values.len() + 1 {\n                     self.fail(\n                         location,"}, {"sha": "5949fd1e22ce88dbc3effbb1487311d48e738e7f", "filename": "src/librustc_mir_build/build/expr/as_operand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b1c08c68ccc2c222f84384c836b5e167e2bc241/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_operand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b1c08c68ccc2c222f84384c836b5e167e2bc241/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_operand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_operand.rs?ref=3b1c08c68ccc2c222f84384c836b5e167e2bc241", "patch": "@@ -172,7 +172,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n \n             if !ty.is_sized(tcx.at(span), param_env) {\n                 // !sized means !copy, so this is an unsized move\n-                assert!(!ty.is_copy_modulo_regions(tcx, param_env, span));\n+                assert!(!ty.is_copy_modulo_regions(tcx.at(span), param_env));\n \n                 // As described above, detect the case where we are passing a value of unsized\n                 // type, and that value is coming from the deref of a box."}, {"sha": "6fc447a87f57a7892bfe694846bc568495941f89", "filename": "src/librustc_mir_build/hair/pattern/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b1c08c68ccc2c222f84384c836b5e167e2bc241/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b1c08c68ccc2c222f84384c836b5e167e2bc241/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fcheck_match.rs?ref=3b1c08c68ccc2c222f84384c836b5e167e2bc241", "patch": "@@ -579,7 +579,7 @@ fn maybe_point_at_variant(ty: Ty<'_>, patterns: &[super::Pat<'_>]) -> Vec<Span>\n \n /// Check if a by-value binding is by-value. That is, check if the binding's type is not `Copy`.\n fn is_binding_by_move(cx: &MatchVisitor<'_, '_>, hir_id: HirId, span: Span) -> bool {\n-    !cx.tables.node_type(hir_id).is_copy_modulo_regions(cx.tcx, cx.param_env, span)\n+    !cx.tables.node_type(hir_id).is_copy_modulo_regions(cx.tcx.at(span), cx.param_env)\n }\n \n /// Check the legality of legality of by-move bindings."}, {"sha": "c8666ba1fd078d58676329565fc6a44f40c16a8f", "filename": "src/librustc_passes/intrinsicck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b1c08c68ccc2c222f84384c836b5e167e2bc241/src%2Flibrustc_passes%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b1c08c68ccc2c222f84384c836b5e167e2bc241/src%2Flibrustc_passes%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fintrinsicck.rs?ref=3b1c08c68ccc2c222f84384c836b5e167e2bc241", "patch": "@@ -214,7 +214,7 @@ impl ExprVisitor<'tcx> {\n \n         // Check that the type implements Copy. The only case where this can\n         // possibly fail is for SIMD types which don't #[derive(Copy)].\n-        if !ty.is_copy_modulo_regions(self.tcx, self.param_env, DUMMY_SP) {\n+        if !ty.is_copy_modulo_regions(self.tcx.at(DUMMY_SP), self.param_env) {\n             let msg = \"arguments for inline assembly must be copyable\";\n             let mut err = self.tcx.sess.struct_span_err(expr.span, msg);\n             err.note(&format!(\"`{}` does not implement the Copy trait\", ty));"}, {"sha": "dc895ad34a93205017fdd623c22e083b606e9dfa", "filename": "src/librustc_trait_selection/infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b1c08c68ccc2c222f84384c836b5e167e2bc241/src%2Flibrustc_trait_selection%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b1c08c68ccc2c222f84384c836b5e167e2bc241/src%2Flibrustc_trait_selection%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Finfer.rs?ref=3b1c08c68ccc2c222f84384c836b5e167e2bc241", "patch": "@@ -44,7 +44,7 @@ impl<'cx, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'cx, 'tcx> {\n         let ty = self.resolve_vars_if_possible(&ty);\n \n         if !(param_env, ty).needs_infer() {\n-            return ty.is_copy_modulo_regions(self.tcx, param_env, span);\n+            return ty.is_copy_modulo_regions(self.tcx.at(span), param_env);\n         }\n \n         let copy_def_id = self.tcx.require_lang_item(lang_items::CopyTraitLangItem, None);"}, {"sha": "7880c09c2ad81a04ad3284ab97fd1b2093a014c9", "filename": "src/librustc_ty/needs_drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b1c08c68ccc2c222f84384c836b5e167e2bc241/src%2Flibrustc_ty%2Fneeds_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b1c08c68ccc2c222f84384c836b5e167e2bc241/src%2Flibrustc_ty%2Fneeds_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ty%2Fneeds_drop.rs?ref=3b1c08c68ccc2c222f84384c836b5e167e2bc241", "patch": "@@ -91,7 +91,7 @@ where\n \n             for component in components {\n                 match component.kind {\n-                    _ if component.is_copy_modulo_regions(tcx, self.param_env, DUMMY_SP) => (),\n+                    _ if component.is_copy_modulo_regions(tcx.at(DUMMY_SP), self.param_env) => (),\n \n                     ty::Closure(_, substs) => {\n                         for upvar_ty in substs.as_closure().upvar_tys() {"}, {"sha": "f7248e7547e27620b766649e48a7514a7a1ad158", "filename": "src/libstd/io/error.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3b1c08c68ccc2c222f84384c836b5e167e2bc241/src%2Flibstd%2Fio%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b1c08c68ccc2c222f84384c836b5e167e2bc241/src%2Flibstd%2Fio%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ferror.rs?ref=3b1c08c68ccc2c222f84384c836b5e167e2bc241", "patch": "@@ -160,6 +160,11 @@ pub enum ErrorKind {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     Interrupted,\n     /// Any I/O error not part of this list.\n+    ///\n+    /// Errors that are `Other` now may move to a different or a new\n+    /// [`ErrorKind`] variant in the future. It is not recommended to match\n+    /// an error against `Other` and to expect any additional characteristics,\n+    /// e.g., a specific [`Error::raw_os_error`] return value.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     Other,\n "}, {"sha": "f3654ee38716c7c54ab09e65f0230606465ba556", "filename": "src/libstd/sys/hermit/stdio.rs", "status": "modified", "additions": 17, "deletions": 22, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/3b1c08c68ccc2c222f84384c836b5e167e2bc241/src%2Flibstd%2Fsys%2Fhermit%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b1c08c68ccc2c222f84384c836b5e167e2bc241/src%2Flibstd%2Fsys%2Fhermit%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fhermit%2Fstdio.rs?ref=3b1c08c68ccc2c222f84384c836b5e167e2bc241", "patch": "@@ -10,19 +10,19 @@ impl Stdin {\n     pub fn new() -> io::Result<Stdin> {\n         Ok(Stdin)\n     }\n+}\n \n-    pub fn read(&self, data: &mut [u8]) -> io::Result<usize> {\n+impl io::Read for Stdin {\n+    fn read(&mut self, data: &mut [u8]) -> io::Result<usize> {\n         self.read_vectored(&mut [IoSliceMut::new(data)])\n     }\n \n-    pub fn read_vectored(&self, _data: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n-        //ManuallyDrop::new(unsafe { WasiFd::from_raw(libc::STDIN_FILENO as u32) })\n-        //    .read(data)\n+    fn read_vectored(&mut self, _data: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         Ok(0)\n     }\n \n     #[inline]\n-    pub fn is_read_vectored(&self) -> bool {\n+    fn is_read_vectored(&self) -> bool {\n         true\n     }\n }\n@@ -31,8 +31,10 @@ impl Stdout {\n     pub fn new() -> io::Result<Stdout> {\n         Ok(Stdout)\n     }\n+}\n \n-    pub fn write(&self, data: &[u8]) -> io::Result<usize> {\n+impl io::Write for Stdout {\n+    fn write(&mut self, data: &[u8]) -> io::Result<usize> {\n         let len;\n \n         unsafe { len = abi::write(1, data.as_ptr() as *const u8, data.len()) }\n@@ -44,7 +46,7 @@ impl Stdout {\n         }\n     }\n \n-    pub fn write_vectored(&self, data: &[IoSlice<'_>]) -> io::Result<usize> {\n+    fn write_vectored(&mut self, data: &[IoSlice<'_>]) -> io::Result<usize> {\n         let len;\n \n         unsafe { len = abi::write(1, data.as_ptr() as *const u8, data.len()) }\n@@ -57,11 +59,11 @@ impl Stdout {\n     }\n \n     #[inline]\n-    pub fn is_write_vectored(&self) -> bool {\n+    fn is_write_vectored(&self) -> bool {\n         true\n     }\n \n-    pub fn flush(&self) -> io::Result<()> {\n+    fn flush(&mut self) -> io::Result<()> {\n         Ok(())\n     }\n }\n@@ -70,8 +72,10 @@ impl Stderr {\n     pub fn new() -> io::Result<Stderr> {\n         Ok(Stderr)\n     }\n+}\n \n-    pub fn write(&self, data: &[u8]) -> io::Result<usize> {\n+impl io::Write for Stderr {\n+    fn write(&mut self, data: &[u8]) -> io::Result<usize> {\n         let len;\n \n         unsafe { len = abi::write(2, data.as_ptr() as *const u8, data.len()) }\n@@ -83,7 +87,7 @@ impl Stderr {\n         }\n     }\n \n-    pub fn write_vectored(&self, data: &[IoSlice<'_>]) -> io::Result<usize> {\n+    fn write_vectored(&mut self, data: &[IoSlice<'_>]) -> io::Result<usize> {\n         let len;\n \n         unsafe { len = abi::write(2, data.as_ptr() as *const u8, data.len()) }\n@@ -96,21 +100,12 @@ impl Stderr {\n     }\n \n     #[inline]\n-    pub fn is_write_vectored(&self) -> bool {\n+    fn is_write_vectored(&self) -> bool {\n         true\n     }\n \n-    pub fn flush(&self) -> io::Result<()> {\n-        Ok(())\n-    }\n-}\n-\n-impl io::Write for Stderr {\n-    fn write(&mut self, data: &[u8]) -> io::Result<usize> {\n-        (&*self).write(data)\n-    }\n     fn flush(&mut self) -> io::Result<()> {\n-        (&*self).flush()\n+        Ok(())\n     }\n }\n "}, {"sha": "78e3911dc4efea33e1edc322a40e54ab7856e2bb", "filename": "src/libstd/sys/wasi/stdio.rs", "status": "modified", "additions": 32, "deletions": 34, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/3b1c08c68ccc2c222f84384c836b5e167e2bc241/src%2Flibstd%2Fsys%2Fwasi%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b1c08c68ccc2c222f84384c836b5e167e2bc241/src%2Flibstd%2Fsys%2Fwasi%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasi%2Fstdio.rs?ref=3b1c08c68ccc2c222f84384c836b5e167e2bc241", "patch": "@@ -11,85 +11,83 @@ impl Stdin {\n         Ok(Stdin)\n     }\n \n-    pub fn read(&self, data: &mut [u8]) -> io::Result<usize> {\n+    #[inline]\n+    pub fn as_raw_fd(&self) -> u32 {\n+        0\n+    }\n+}\n+\n+impl io::Read for Stdin {\n+    fn read(&mut self, data: &mut [u8]) -> io::Result<usize> {\n         self.read_vectored(&mut [IoSliceMut::new(data)])\n     }\n \n-    pub fn read_vectored(&self, data: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n+    fn read_vectored(&mut self, data: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         ManuallyDrop::new(unsafe { WasiFd::from_raw(self.as_raw_fd()) }).read(data)\n     }\n \n     #[inline]\n-    pub fn is_read_vectored(&self) -> bool {\n+    fn is_read_vectored(&self) -> bool {\n         true\n     }\n-\n-    pub fn as_raw_fd(&self) -> u32 {\n-        0\n-    }\n }\n \n impl Stdout {\n     pub fn new() -> io::Result<Stdout> {\n         Ok(Stdout)\n     }\n \n-    pub fn write(&self, data: &[u8]) -> io::Result<usize> {\n+    #[inline]\n+    pub fn as_raw_fd(&self) -> u32 {\n+        1\n+    }\n+}\n+\n+impl io::Write for Stdout {\n+    fn write(&mut self, data: &[u8]) -> io::Result<usize> {\n         self.write_vectored(&[IoSlice::new(data)])\n     }\n \n-    pub fn write_vectored(&self, data: &[IoSlice<'_>]) -> io::Result<usize> {\n+    fn write_vectored(&mut self, data: &[IoSlice<'_>]) -> io::Result<usize> {\n         ManuallyDrop::new(unsafe { WasiFd::from_raw(self.as_raw_fd()) }).write(data)\n     }\n \n     #[inline]\n-    pub fn is_write_vectored(&self) -> bool {\n+    fn is_write_vectored(&self) -> bool {\n         true\n     }\n-\n-    pub fn flush(&self) -> io::Result<()> {\n+    fn flush(&mut self) -> io::Result<()> {\n         Ok(())\n     }\n-\n-    pub fn as_raw_fd(&self) -> u32 {\n-        1\n-    }\n }\n \n impl Stderr {\n     pub fn new() -> io::Result<Stderr> {\n         Ok(Stderr)\n     }\n \n-    pub fn write(&self, data: &[u8]) -> io::Result<usize> {\n-        self.write_vectored(&[IoSlice::new(data)])\n-    }\n-\n-    pub fn write_vectored(&self, data: &[IoSlice<'_>]) -> io::Result<usize> {\n-        ManuallyDrop::new(unsafe { WasiFd::from_raw(self.as_raw_fd()) }).write(data)\n-    }\n-\n     #[inline]\n-    pub fn is_write_vectored(&self) -> bool {\n-        true\n-    }\n-\n-    pub fn flush(&self) -> io::Result<()> {\n-        Ok(())\n-    }\n-\n     pub fn as_raw_fd(&self) -> u32 {\n         2\n     }\n }\n \n impl io::Write for Stderr {\n     fn write(&mut self, data: &[u8]) -> io::Result<usize> {\n-        (&*self).write(data)\n+        self.write_vectored(&[IoSlice::new(data)])\n+    }\n+\n+    fn write_vectored(&mut self, data: &[IoSlice<'_>]) -> io::Result<usize> {\n+        ManuallyDrop::new(unsafe { WasiFd::from_raw(self.as_raw_fd()) }).write(data)\n+    }\n+\n+    #[inline]\n+    fn is_write_vectored(&self) -> bool {\n+        true\n     }\n \n     fn flush(&mut self) -> io::Result<()> {\n-        (&*self).flush()\n+        Ok(())\n     }\n }\n "}, {"sha": "f440442ca306279dfb7a0f49bbabb41fc54aabca", "filename": "src/libstd/sys/windows/c.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3b1c08c68ccc2c222f84384c836b5e167e2bc241/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b1c08c68ccc2c222f84384c836b5e167e2bc241/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs?ref=3b1c08c68ccc2c222f84384c836b5e167e2bc241", "patch": "@@ -161,6 +161,8 @@ pub const STD_ERROR_HANDLE: DWORD = -12i32 as DWORD;\n \n pub const PROGRESS_CONTINUE: DWORD = 0;\n \n+// List of Windows system error codes with descriptions:\n+// https://docs.microsoft.com/en-us/windows/win32/debug/system-error-codes#system-error-codes\n pub const ERROR_FILE_NOT_FOUND: DWORD = 2;\n pub const ERROR_PATH_NOT_FOUND: DWORD = 3;\n pub const ERROR_ACCESS_DENIED: DWORD = 5;\n@@ -171,13 +173,26 @@ pub const ERROR_FILE_EXISTS: DWORD = 80;\n pub const ERROR_INVALID_PARAMETER: DWORD = 87;\n pub const ERROR_BROKEN_PIPE: DWORD = 109;\n pub const ERROR_CALL_NOT_IMPLEMENTED: DWORD = 120;\n+pub const ERROR_SEM_TIMEOUT: DWORD = 121;\n pub const ERROR_INSUFFICIENT_BUFFER: DWORD = 122;\n pub const ERROR_ALREADY_EXISTS: DWORD = 183;\n-pub const ERROR_NO_DATA: DWORD = 232;\n pub const ERROR_ENVVAR_NOT_FOUND: DWORD = 203;\n+pub const ERROR_NO_DATA: DWORD = 232;\n+pub const ERROR_DRIVER_CANCEL_TIMEOUT: DWORD = 594;\n pub const ERROR_OPERATION_ABORTED: DWORD = 995;\n pub const ERROR_IO_PENDING: DWORD = 997;\n-pub const ERROR_TIMEOUT: DWORD = 0x5B4;\n+pub const ERROR_SERVICE_REQUEST_TIMEOUT: DWORD = 1053;\n+pub const ERROR_COUNTER_TIMEOUT: DWORD = 1121;\n+pub const ERROR_TIMEOUT: DWORD = 1460;\n+pub const ERROR_RESOURCE_CALL_TIMED_OUT: DWORD = 5910;\n+pub const ERROR_CTX_MODEM_RESPONSE_TIMEOUT: DWORD = 7012;\n+pub const ERROR_CTX_CLIENT_QUERY_TIMEOUT: DWORD = 7040;\n+pub const FRS_ERR_SYSVOL_POPULATE_TIMEOUT: DWORD = 8014;\n+pub const ERROR_DS_TIMELIMIT_EXCEEDED: DWORD = 8226;\n+pub const DNS_ERROR_RECORD_TIMED_OUT: DWORD = 9705;\n+pub const ERROR_IPSEC_IKE_TIMED_OUT: DWORD = 13805;\n+pub const ERROR_RUNLEVEL_SWITCH_TIMEOUT: DWORD = 15402;\n+pub const ERROR_RUNLEVEL_SWITCH_AGENT_TIMEOUT: DWORD = 15403;\n \n pub const E_NOTIMPL: HRESULT = 0x80004001u32 as HRESULT;\n "}, {"sha": "640c9f3636d4b89262cf19045c0c9d346504ca53", "filename": "src/libstd/sys/windows/mod.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3b1c08c68ccc2c222f84384c836b5e167e2bc241/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b1c08c68ccc2c222f84384c836b5e167e2bc241/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs?ref=3b1c08c68ccc2c222f84384c836b5e167e2bc241", "patch": "@@ -61,7 +61,22 @@ pub fn decode_error_kind(errno: i32) -> ErrorKind {\n         c::ERROR_FILE_NOT_FOUND => return ErrorKind::NotFound,\n         c::ERROR_PATH_NOT_FOUND => return ErrorKind::NotFound,\n         c::ERROR_NO_DATA => return ErrorKind::BrokenPipe,\n-        c::ERROR_OPERATION_ABORTED => return ErrorKind::TimedOut,\n+        c::ERROR_SEM_TIMEOUT\n+        | c::WAIT_TIMEOUT\n+        | c::ERROR_DRIVER_CANCEL_TIMEOUT\n+        | c::ERROR_OPERATION_ABORTED\n+        | c::ERROR_SERVICE_REQUEST_TIMEOUT\n+        | c::ERROR_COUNTER_TIMEOUT\n+        | c::ERROR_TIMEOUT\n+        | c::ERROR_RESOURCE_CALL_TIMED_OUT\n+        | c::ERROR_CTX_MODEM_RESPONSE_TIMEOUT\n+        | c::ERROR_CTX_CLIENT_QUERY_TIMEOUT\n+        | c::FRS_ERR_SYSVOL_POPULATE_TIMEOUT\n+        | c::ERROR_DS_TIMELIMIT_EXCEEDED\n+        | c::DNS_ERROR_RECORD_TIMED_OUT\n+        | c::ERROR_IPSEC_IKE_TIMED_OUT\n+        | c::ERROR_RUNLEVEL_SWITCH_TIMEOUT\n+        | c::ERROR_RUNLEVEL_SWITCH_AGENT_TIMEOUT => return ErrorKind::TimedOut,\n         _ => {}\n     }\n "}, {"sha": "576fe1f4c89052e47edd8d3977b3f2250c8d1796", "filename": "src/test/ui/moves/issue-46099-move-in-macro.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3b1c08c68ccc2c222f84384c836b5e167e2bc241/src%2Ftest%2Fui%2Fmoves%2Fissue-46099-move-in-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b1c08c68ccc2c222f84384c836b5e167e2bc241/src%2Ftest%2Fui%2Fmoves%2Fissue-46099-move-in-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fissue-46099-move-in-macro.rs?ref=3b1c08c68ccc2c222f84384c836b5e167e2bc241", "patch": "@@ -0,0 +1,15 @@\n+// Regression test for issue #46099\n+// Tests that we don't emit spurious\n+// 'value moved in previous iteration of loop' message\n+\n+macro_rules! test {\n+    ($v:expr) => {{\n+        drop(&$v);\n+        $v\n+    }}\n+}\n+\n+fn main() {\n+    let b = Box::new(true);\n+    test!({b}); //~ ERROR use of moved value\n+}"}, {"sha": "83c99db87095179d6f7c906f12b4e6d8c3fdad41", "filename": "src/test/ui/moves/issue-46099-move-in-macro.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3b1c08c68ccc2c222f84384c836b5e167e2bc241/src%2Ftest%2Fui%2Fmoves%2Fissue-46099-move-in-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3b1c08c68ccc2c222f84384c836b5e167e2bc241/src%2Ftest%2Fui%2Fmoves%2Fissue-46099-move-in-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fissue-46099-move-in-macro.stderr?ref=3b1c08c68ccc2c222f84384c836b5e167e2bc241", "patch": "@@ -0,0 +1,14 @@\n+error[E0382]: use of moved value: `b`\n+  --> $DIR/issue-46099-move-in-macro.rs:14:12\n+   |\n+LL |     let b = Box::new(true);\n+   |         - move occurs because `b` has type `std::boxed::Box<bool>`, which does not implement the `Copy` trait\n+LL |     test!({b});\n+   |            ^\n+   |            |\n+   |            value moved here\n+   |            value used here after move\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0382`."}, {"sha": "00d89f550714c4af313a32be92e70a0841f4e2ab", "filename": "src/test/ui/moves/move-in-guard-2.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3b1c08c68ccc2c222f84384c836b5e167e2bc241/src%2Ftest%2Fui%2Fmoves%2Fmove-in-guard-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3b1c08c68ccc2c222f84384c836b5e167e2bc241/src%2Ftest%2Fui%2Fmoves%2Fmove-in-guard-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmove-in-guard-2.stderr?ref=3b1c08c68ccc2c222f84384c836b5e167e2bc241", "patch": "@@ -5,7 +5,10 @@ LL |     let x: Box<_> = box 1;\n    |         - move occurs because `x` has type `std::boxed::Box<i32>`, which does not implement the `Copy` trait\n ...\n LL |         (_, 2) if take(x) => (),\n-   |                        ^ value moved here, in previous iteration of loop\n+   |                        ^\n+   |                        |\n+   |                        value moved here\n+   |                        value used here after move\n \n error: aborting due to previous error\n "}, {"sha": "1f9bd7a691b520bed9c788980974d3050d14e69d", "filename": "src/tools/clippy/clippy_lints/src/functions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b1c08c68ccc2c222f84384c836b5e167e2bc241/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b1c08c68ccc2c222f84384c836b5e167e2bc241/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffunctions.rs?ref=3b1c08c68ccc2c222f84384c836b5e167e2bc241", "patch": "@@ -513,7 +513,7 @@ fn is_mutable_ty<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, ty: Ty<'tcx>, span: Span,\n         // primitive types are never mutable\n         ty::Bool | ty::Char | ty::Int(_) | ty::Uint(_) | ty::Float(_) | ty::Str => false,\n         ty::Adt(ref adt, ref substs) => {\n-            tys.insert(adt.did) && !ty.is_freeze(cx.tcx, cx.param_env, span)\n+            tys.insert(adt.did) && !ty.is_freeze(cx.tcx.at(span), cx.param_env)\n                 || KNOWN_WRAPPER_TYS.iter().any(|path| match_def_path(cx, adt.did, path))\n                     && substs.types().any(|ty| is_mutable_ty(cx, ty, span, tys))\n         },"}, {"sha": "e097f40f87e47c4b13084141de3e89b840b89232", "filename": "src/tools/clippy/clippy_lints/src/let_if_seq.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3b1c08c68ccc2c222f84384c836b5e167e2bc241/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flet_if_seq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b1c08c68ccc2c222f84384c836b5e167e2bc241/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flet_if_seq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flet_if_seq.rs?ref=3b1c08c68ccc2c222f84384c836b5e167e2bc241", "patch": "@@ -74,9 +74,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LetIfSeq {\n                     let span = stmt.span.to(if_.span);\n \n                     let has_interior_mutability = !cx.tables.node_type(canonical_id).is_freeze(\n-                        cx.tcx,\n+                        cx.tcx.at(span),\n                         cx.param_env,\n-                        span\n                     );\n                     if has_interior_mutability { return; }\n "}, {"sha": "93569a04f7a3a23b151b70b28752f912d6cacf23", "filename": "src/tools/clippy/clippy_lints/src/mut_key.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b1c08c68ccc2c222f84384c836b5e167e2bc241/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmut_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b1c08c68ccc2c222f84384c836b5e167e2bc241/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmut_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmut_key.rs?ref=3b1c08c68ccc2c222f84384c836b5e167e2bc241", "patch": "@@ -118,7 +118,7 @@ fn is_mutable_type<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, ty: Ty<'tcx>, span: Spa\n             size.try_eval_usize(cx.tcx, cx.param_env).map_or(true, |u| u != 0) && is_mutable_type(cx, inner_ty, span)\n         },\n         Tuple(..) => ty.tuple_fields().any(|ty| is_mutable_type(cx, ty, span)),\n-        Adt(..) => cx.tcx.layout_of(cx.param_env.and(ty)).is_ok() && !ty.is_freeze(cx.tcx, cx.param_env, span),\n+        Adt(..) => cx.tcx.layout_of(cx.param_env.and(ty)).is_ok() && !ty.is_freeze(cx.tcx.at(span), cx.param_env),\n         _ => false,\n     }\n }"}, {"sha": "230dfd2ebf5661c3dd768225627bc5b4199fd93d", "filename": "src/tools/clippy/clippy_lints/src/non_copy_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b1c08c68ccc2c222f84384c836b5e167e2bc241/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_copy_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b1c08c68ccc2c222f84384c836b5e167e2bc241/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_copy_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_copy_const.rs?ref=3b1c08c68ccc2c222f84384c836b5e167e2bc241", "patch": "@@ -110,7 +110,7 @@ impl Source {\n }\n \n fn verify_ty_bound<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, ty: Ty<'tcx>, source: Source) {\n-    if ty.is_freeze(cx.tcx, cx.param_env, DUMMY_SP) || is_copy(cx, ty) {\n+    if ty.is_freeze(cx.tcx.at(DUMMY_SP), cx.param_env) || is_copy(cx, ty) {\n         // An `UnsafeCell` is `!Copy`, and an `UnsafeCell` is also the only type which\n         // is `!Freeze`, thus if our type is `Copy` we can be sure it must be `Freeze`\n         // as well."}, {"sha": "d8a73f8054bcaa0dff4509fd060d686b24a89ee2", "filename": "src/tools/clippy/clippy_lints/src/question_mark.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b1c08c68ccc2c222f84384c836b5e167e2bc241/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fquestion_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b1c08c68ccc2c222f84384c836b5e167e2bc241/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fquestion_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fquestion_mark.rs?ref=3b1c08c68ccc2c222f84384c836b5e167e2bc241", "patch": "@@ -137,7 +137,7 @@ impl QuestionMark {\n     fn moves_by_default(cx: &LateContext<'_, '_>, expression: &Expr<'_>) -> bool {\n         let expr_ty = cx.tables.expr_ty(expression);\n \n-        !expr_ty.is_copy_modulo_regions(cx.tcx, cx.param_env, expression.span)\n+        !expr_ty.is_copy_modulo_regions(cx.tcx.at(expression.span), cx.param_env)\n     }\n \n     fn is_option(cx: &LateContext<'_, '_>, expression: &Expr<'_>) -> bool {"}, {"sha": "6d4c6c6ce1ceada7c78195219f454e35374ccc3f", "filename": "src/tools/clippy/clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b1c08c68ccc2c222f84384c836b5e167e2bc241/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b1c08c68ccc2c222f84384c836b5e167e2bc241/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=3b1c08c68ccc2c222f84384c836b5e167e2bc241", "patch": "@@ -891,7 +891,7 @@ pub fn type_is_unsafe_function<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, ty: Ty<'tcx\n }\n \n pub fn is_copy<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, ty: Ty<'tcx>) -> bool {\n-    ty.is_copy_modulo_regions(cx.tcx, cx.param_env, DUMMY_SP)\n+    ty.is_copy_modulo_regions(cx.tcx.at(DUMMY_SP), cx.param_env)\n }\n \n /// Checks if an expression is constructing a tuple-like enum variant or struct"}]}