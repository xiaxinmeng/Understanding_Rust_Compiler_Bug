{"sha": "b31f0198b14300d232dc1b6d1f52dc92da7818ff", "node_id": "C_kwDOAAsO6NoAKGIzMWYwMTk4YjE0MzAwZDIzMmRjMWI2ZDFmNTJkYzkyZGE3ODE4ZmY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-11-10T17:52:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-11-10T17:52:28Z"}, "message": "Rollup merge of #90727 - GuillaumeGomez:remove-potential-useless-search-index-data, r=notriddle,camelid\n\nRemove potential useless data for search index\n\nI uncovered this case when working on https://github.com/rust-lang/rust/pull/90726 to debug https://github.com/rust-lang/rust/pull/90385.\n\nExplanations: if we have a full generic, we check if it has generics then we do the following:\n * If it has only one generic, we remove one nested level in order to not keep the \"parent\" generic (since it has empty name, it's useless after all).\n * Otherwise we add it alongside its generics.\n\nHowever, I didn't handle the case where a generic had no generics. Meaning that we were adding items with empty names in the search index. So basically useless data in the search index.\n\nr? `@camelid`", "tree": {"sha": "a3a7cface2d874cb785cdee72d57033afdeb43f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a3a7cface2d874cb785cdee72d57033afdeb43f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b31f0198b14300d232dc1b6d1f52dc92da7818ff", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhjAbcCRBK7hj4Ov3rIwAASawIAIv3569KpKZjiP9eHH1rNG8y\nIEAulrYAVnG/CD45HT39gmKeSUWROyz2t4MHeigqZJrf8VdFZKFbCZeytxZLe+D0\nZRlrQzXBQ/1zJn4z6oScOsx8869OeXF/fXqYDPi/CL7O/zkGDzw9PkltCPdGkW0k\nOMKTFSsMWAsrAzJ5678RVD3Flu7Gc3EBGjGtP9gPtNBrPXeVBso7FhTkOZhLGP0k\nr1z6RNQWa0Uur0XxPnWpJu67y/p+jCr96QwjYV09xdrfu3h4IGXxccEAoYW8qk6g\nPEYOf9U0SYxw3pxiuMSY1ENoHF7YRQPnBU5rkmHUnpTCYzncEOJ2REfX/HOsjnE=\n=EEYf\n-----END PGP SIGNATURE-----\n", "payload": "tree a3a7cface2d874cb785cdee72d57033afdeb43f9\nparent 858fea410d89986669c3613c63b5401abd72b891\nparent 8d5ef320fc6c2d4436692d1558d36bd59c49394b\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1636566748 +0100\ncommitter GitHub <noreply@github.com> 1636566748 +0100\n\nRollup merge of #90727 - GuillaumeGomez:remove-potential-useless-search-index-data, r=notriddle,camelid\n\nRemove potential useless data for search index\n\nI uncovered this case when working on https://github.com/rust-lang/rust/pull/90726 to debug https://github.com/rust-lang/rust/pull/90385.\n\nExplanations: if we have a full generic, we check if it has generics then we do the following:\n * If it has only one generic, we remove one nested level in order to not keep the \"parent\" generic (since it has empty name, it's useless after all).\n * Otherwise we add it alongside its generics.\n\nHowever, I didn't handle the case where a generic had no generics. Meaning that we were adding items with empty names in the search index. So basically useless data in the search index.\n\nr? `@camelid`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b31f0198b14300d232dc1b6d1f52dc92da7818ff", "html_url": "https://github.com/rust-lang/rust/commit/b31f0198b14300d232dc1b6d1f52dc92da7818ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b31f0198b14300d232dc1b6d1f52dc92da7818ff/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "858fea410d89986669c3613c63b5401abd72b891", "url": "https://api.github.com/repos/rust-lang/rust/commits/858fea410d89986669c3613c63b5401abd72b891", "html_url": "https://github.com/rust-lang/rust/commit/858fea410d89986669c3613c63b5401abd72b891"}, {"sha": "8d5ef320fc6c2d4436692d1558d36bd59c49394b", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d5ef320fc6c2d4436692d1558d36bd59c49394b", "html_url": "https://github.com/rust-lang/rust/commit/8d5ef320fc6c2d4436692d1558d36bd59c49394b"}], "stats": {"total": 85, "additions": 46, "deletions": 39}, "files": [{"sha": "79421c128bcf8eea5056cfc4f4dce4c09201a988", "filename": "src/librustdoc/html/render/cache.rs", "status": "modified", "additions": 46, "deletions": 39, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/b31f0198b14300d232dc1b6d1f52dc92da7818ff/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b31f0198b14300d232dc1b6d1f52dc92da7818ff/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs?ref=b31f0198b14300d232dc1b6d1f52dc92da7818ff", "patch": "@@ -258,45 +258,52 @@ crate fn get_real_types<'tcx>(\n     ) {\n         let is_full_generic = ty.is_full_generic();\n \n-        if is_full_generic && generics.len() == 1 {\n-            // In this case, no need to go through an intermediate state if the generics\n-            // contains only one element.\n-            //\n-            // For example:\n-            //\n-            // fn foo<T: Display>(r: Option<T>) {}\n-            //\n-            // In this case, it would contain:\n-            //\n-            // ```\n-            // [{\n-            //     name: \"option\",\n-            //     generics: [{\n-            //         name: \"\",\n-            //         generics: [\n-            //             name: \"Display\",\n-            //             generics: []\n-            //         }]\n-            //     }]\n-            // }]\n-            // ```\n-            //\n-            // After removing the intermediate (unnecessary) full generic, it'll become:\n-            //\n-            // ```\n-            // [{\n-            //     name: \"option\",\n-            //     generics: [{\n-            //         name: \"Display\",\n-            //         generics: []\n-            //     }]\n-            // }]\n-            // ```\n-            //\n-            // To be noted that it can work if there is ONLY ONE generic, otherwise we still\n-            // need to keep it as is!\n-            res.push(generics.pop().unwrap());\n-            return;\n+        if is_full_generic {\n+            if generics.is_empty() {\n+                // This is a type parameter with no trait bounds (for example: `T` in\n+                // `fn f<T>(p: T)`, so not useful for the rustdoc search because we would end up\n+                // with an empty type with an empty name. Let's just discard it.\n+                return;\n+            } else if generics.len() == 1 {\n+                // In this case, no need to go through an intermediate state if the type parameter\n+                // contains only one trait bound.\n+                //\n+                // For example:\n+                //\n+                // `fn foo<T: Display>(r: Option<T>) {}`\n+                //\n+                // In this case, it would contain:\n+                //\n+                // ```\n+                // [{\n+                //     name: \"option\",\n+                //     generics: [{\n+                //         name: \"\",\n+                //         generics: [\n+                //             name: \"Display\",\n+                //             generics: []\n+                //         }]\n+                //     }]\n+                // }]\n+                // ```\n+                //\n+                // After removing the intermediate (unnecessary) type parameter, it'll become:\n+                //\n+                // ```\n+                // [{\n+                //     name: \"option\",\n+                //     generics: [{\n+                //         name: \"Display\",\n+                //         generics: []\n+                //     }]\n+                // }]\n+                // ```\n+                //\n+                // To be noted that it can work if there is ONLY ONE trait bound, otherwise we still\n+                // need to keep it as is!\n+                res.push(generics.pop().unwrap());\n+                return;\n+            }\n         }\n         let mut index_ty = get_index_type(&ty, generics);\n         if index_ty.name.as_ref().map(|s| s.is_empty()).unwrap_or(true) {"}]}