{"sha": "38a3c76d154231ded00ca1decfd55bdaebe67bae", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4YTNjNzZkMTU0MjMxZGVkMDBjYTFkZWNmZDU1YmRhZWJlNjdiYWU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-11-14T06:11:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-14T06:11:47Z"}, "message": "Merge #2234\n\n2234: Normalize data r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "6cadcde235b500a6dd4276c6d2c4ca34cfa2c658", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6cadcde235b500a6dd4276c6d2c4ca34cfa2c658"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/38a3c76d154231ded00ca1decfd55bdaebe67bae", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdzPAjCRBK7hj4Ov3rIwAAdHIIAB5RvTvBm6deOlyPq36JfCPm\nk6ElbLQNLzWJ8LU/0Mieiw5qd8xmpPSDHiNiI3voROhNoyf86/aPqnyXLMItwcWs\nQNJ7q89JMza6ATdZGlbRtn8enVLTLxJjZFeCp9zgnpZkedGOTmhhb9Sqxp2/m7h+\nX/6QL6MAjrSJlrxA/i2gnDNodfFOjU6Vq3iEq15/CKz0NRqaW0TLmKGtRTrX2hdR\nzZtcTpS9hLp8+mKs4iWB9xhuRMTpZM8lhs0UnL3X7Dr/pVucRzPhHGfPqU11gDNu\ncpw+TiC9byOtD0e7w4hQZLSGszok8aWoeyPjAghbNMiOiHlHw/3JA1QoRCWAqSU=\n=3QZx\n-----END PGP SIGNATURE-----\n", "payload": "tree 6cadcde235b500a6dd4276c6d2c4ca34cfa2c658\nparent e918b1f2b332e63e4918ca99503a812d1ce41ce0\nparent b8f62095d6cf07ba521cdb3f7bac147496b313c9\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1573711907 +0000\ncommitter GitHub <noreply@github.com> 1573711907 +0000\n\nMerge #2234\n\n2234: Normalize data r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/38a3c76d154231ded00ca1decfd55bdaebe67bae", "html_url": "https://github.com/rust-lang/rust/commit/38a3c76d154231ded00ca1decfd55bdaebe67bae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/38a3c76d154231ded00ca1decfd55bdaebe67bae/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e918b1f2b332e63e4918ca99503a812d1ce41ce0", "url": "https://api.github.com/repos/rust-lang/rust/commits/e918b1f2b332e63e4918ca99503a812d1ce41ce0", "html_url": "https://github.com/rust-lang/rust/commit/e918b1f2b332e63e4918ca99503a812d1ce41ce0"}, {"sha": "b8f62095d6cf07ba521cdb3f7bac147496b313c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8f62095d6cf07ba521cdb3f7bac147496b313c9", "html_url": "https://github.com/rust-lang/rust/commit/b8f62095d6cf07ba521cdb3f7bac147496b313c9"}], "stats": {"total": 23, "additions": 9, "deletions": 14}, "files": [{"sha": "fe5e836f21979fe90e98dc65be157b6a21d2aed5", "filename": "crates/ra_hir/src/expr/scope.rs", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/38a3c76d154231ded00ca1decfd55bdaebe67bae/crates%2Fra_hir%2Fsrc%2Fexpr%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38a3c76d154231ded00ca1decfd55bdaebe67bae/crates%2Fra_hir%2Fsrc%2Fexpr%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr%2Fscope.rs?ref=38a3c76d154231ded00ca1decfd55bdaebe67bae", "patch": "@@ -17,7 +17,6 @@ impl_arena_id!(ScopeId);\n \n #[derive(Debug, PartialEq, Eq)]\n pub struct ExprScopes {\n-    pub(crate) body: Arc<Body>,\n     scopes: Arena<ScopeId, ScopeData>,\n     scope_by_expr: FxHashMap<ExprId, ScopeId>,\n }\n@@ -47,19 +46,16 @@ pub(crate) struct ScopeData {\n impl ExprScopes {\n     pub(crate) fn expr_scopes_query(db: &impl HirDatabase, def: DefWithBody) -> Arc<ExprScopes> {\n         let body = db.body(def);\n-        let res = ExprScopes::new(body);\n+        let res = ExprScopes::new(&*body);\n         Arc::new(res)\n     }\n \n-    fn new(body: Arc<Body>) -> ExprScopes {\n-        let mut scopes = ExprScopes {\n-            body: body.clone(),\n-            scopes: Arena::default(),\n-            scope_by_expr: FxHashMap::default(),\n-        };\n+    fn new(body: &Body) -> ExprScopes {\n+        let mut scopes =\n+            ExprScopes { scopes: Arena::default(), scope_by_expr: FxHashMap::default() };\n         let root = scopes.root_scope();\n-        scopes.add_params_bindings(root, body.params());\n-        compute_expr_scopes(body.body_expr(), &body, &mut scopes, root);\n+        scopes.add_params_bindings(body, root, body.params());\n+        compute_expr_scopes(body.body_expr(), body, &mut scopes, root);\n         scopes\n     }\n \n@@ -99,9 +95,8 @@ impl ExprScopes {\n         }\n     }\n \n-    fn add_params_bindings(&mut self, scope: ScopeId, params: &[PatId]) {\n-        let body = Arc::clone(&self.body);\n-        params.iter().for_each(|pat| self.add_bindings(&body, scope, *pat));\n+    fn add_params_bindings(&mut self, body: &Body, scope: ScopeId, params: &[PatId]) {\n+        params.iter().for_each(|pat| self.add_bindings(body, scope, *pat));\n     }\n \n     fn set_scope(&mut self, node: ExprId, scope: ScopeId) {\n@@ -151,7 +146,7 @@ fn compute_expr_scopes(expr: ExprId, body: &Body, scopes: &mut ExprScopes, scope\n         }\n         Expr::Lambda { args, body: body_expr, .. } => {\n             let scope = scopes.new_scope(scope);\n-            scopes.add_params_bindings(scope, &args);\n+            scopes.add_params_bindings(body, scope, &args);\n             compute_expr_scopes(*body_expr, body, scopes, scope);\n         }\n         Expr::Match { expr, arms } => {"}]}