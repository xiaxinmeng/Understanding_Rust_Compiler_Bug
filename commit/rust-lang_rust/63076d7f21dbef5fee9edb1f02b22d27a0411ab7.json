{"sha": "63076d7f21dbef5fee9edb1f02b22d27a0411ab7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzMDc2ZDdmMjFkYmVmNWZlZTllZGIxZjAyYjIyZDI3YTA0MTFhYjc=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2017-06-23T04:23:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-06-23T04:23:32Z"}, "message": "Merge pull request #1743 from topecongiro/macro-trailing-comma\n\nPreserve trailing comma of macro invocation", "tree": {"sha": "d2b532947c6dd7a352bc9f7c5050850385266657", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d2b532947c6dd7a352bc9f7c5050850385266657"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63076d7f21dbef5fee9edb1f02b22d27a0411ab7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63076d7f21dbef5fee9edb1f02b22d27a0411ab7", "html_url": "https://github.com/rust-lang/rust/commit/63076d7f21dbef5fee9edb1f02b22d27a0411ab7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63076d7f21dbef5fee9edb1f02b22d27a0411ab7/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "63784cb75f08fcc2a886b5967dde89259c4166b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/63784cb75f08fcc2a886b5967dde89259c4166b8", "html_url": "https://github.com/rust-lang/rust/commit/63784cb75f08fcc2a886b5967dde89259c4166b8"}, {"sha": "f062544cddb5ea662a4a7db3ecf49445c27dd089", "url": "https://api.github.com/repos/rust-lang/rust/commits/f062544cddb5ea662a4a7db3ecf49445c27dd089", "html_url": "https://github.com/rust-lang/rust/commit/f062544cddb5ea662a4a7db3ecf49445c27dd089"}], "stats": {"total": 152, "additions": 108, "deletions": 44}, "files": [{"sha": "4eafd72680773568bcd907e916024990f46f2d40", "filename": "src/expr.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/63076d7f21dbef5fee9edb1f02b22d27a0411ab7/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63076d7f21dbef5fee9edb1f02b22d27a0411ab7/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=63076d7f21dbef5fee9edb1f02b22d27a0411ab7", "patch": "@@ -93,6 +93,7 @@ pub fn format_expr(\n                 mk_sp(context.codemap.span_after(expr.span, \"[\"), expr.span.hi),\n                 context,\n                 shape,\n+                false,\n             )\n         }\n         ast::ExprKind::Lit(ref l) => {\n@@ -435,6 +436,7 @@ pub fn rewrite_array<'a, I>(\n     span: Span,\n     context: &RewriteContext,\n     shape: Shape,\n+    trailing_comma: bool,\n ) -> Option<String>\n where\n     I: Iterator<Item = &'a ast::Expr>,\n@@ -507,7 +509,13 @@ where\n     let fmt = ListFormatting {\n         tactic: tactic,\n         separator: \",\",\n-        trailing_separator: SeparatorTactic::Never,\n+        trailing_separator: if trailing_comma {\n+            SeparatorTactic::Always\n+        } else if context.inside_macro || context.config.array_layout() == IndentStyle::Visual {\n+            SeparatorTactic::Never\n+        } else {\n+            SeparatorTactic::Vertical\n+        },\n         shape: nested_shape,\n         ends_with_newline: false,\n         config: context.config,\n@@ -524,7 +532,7 @@ where\n         }\n     } else {\n         format!(\n-            \"[\\n{}{},\\n{}]\",\n+            \"[\\n{}{}\\n{}]\",\n             nested_shape.indent.to_string(context.config),\n             list_str,\n             shape.block().indent.to_string(context.config)"}, {"sha": "54a65087e12d4d714a0e981a17d43696242925ff", "filename": "src/macros.rs", "status": "modified", "additions": 25, "deletions": 14, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/63076d7f21dbef5fee9edb1f02b22d27a0411ab7/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63076d7f21dbef5fee9edb1f02b22d27a0411ab7/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=63076d7f21dbef5fee9edb1f02b22d27a0411ab7", "patch": "@@ -30,7 +30,7 @@ use syntax::util::ThinVec;\n use Shape;\n use codemap::SpanUtils;\n use rewrite::{Rewrite, RewriteContext};\n-use expr::{rewrite_call, rewrite_array};\n+use expr::{rewrite_call_inner, rewrite_array};\n use comment::{FindUncommented, contains_comment};\n use utils::mk_sp;\n \n@@ -110,6 +110,7 @@ pub fn rewrite_macro(\n     let mut parser = new_parser_from_tts(context.parse_session, ts.trees().collect());\n     let mut expr_vec = Vec::new();\n     let mut vec_with_semi = false;\n+    let mut trailing_comma = false;\n \n     if MacroStyle::Braces != style {\n         loop {\n@@ -162,12 +163,8 @@ pub fn rewrite_macro(\n             parser.bump();\n \n             if parser.token == Token::Eof {\n-                // vec! is a special case of bracket macro which should be formated as an array.\n-                if macro_name == \"vec!\" {\n-                    break;\n-                } else {\n-                    return None;\n-                }\n+                trailing_comma = true;\n+                break;\n             }\n         }\n     }\n@@ -176,12 +173,19 @@ pub fn rewrite_macro(\n         MacroStyle::Parens => {\n             // Format macro invocation as function call, forcing no trailing\n             // comma because not all macros support them.\n-            rewrite_call(context, &macro_name, &expr_vec, mac.span, shape).map(\n-                |rw| match position {\n-                    MacroPosition::Item => format!(\"{};\", rw),\n-                    _ => rw,\n-                },\n-            )\n+            let rw = rewrite_call_inner(\n+                context,\n+                &macro_name,\n+                &expr_vec.iter().map(|e| &**e).collect::<Vec<_>>()[..],\n+                mac.span,\n+                shape,\n+                context.config.fn_call_width(),\n+                trailing_comma,\n+            );\n+            rw.ok().map(|rw| match position {\n+                MacroPosition::Item => format!(\"{};\", rw),\n+                _ => rw,\n+            })\n         }\n         MacroStyle::Brackets => {\n             let mac_shape = try_opt!(shape.offset_left(macro_name.len()));\n@@ -215,7 +219,13 @@ pub fn rewrite_macro(\n                     ))\n                 }\n             } else {\n-                // Format macro invocation as array literal.\n+                // If we are rewriting `vec!` macro or other special macros,\n+                // then we can rewrite this as an usual array literal.\n+                // Otherwise, we must preserve the original existence of trailing comma.\n+                if FORCED_BRACKET_MACROS.contains(&&macro_name.as_str()) {\n+                    context.inside_macro = false;\n+                    trailing_comma = false;\n+                }\n                 let rewrite = try_opt!(rewrite_array(\n                     expr_vec.iter().map(|x| &**x),\n                     mk_sp(\n@@ -226,6 +236,7 @@ pub fn rewrite_macro(\n                     ),\n                     context,\n                     mac_shape,\n+                    trailing_comma,\n                 ));\n \n                 Some(format!(\"{}{}\", macro_name, rewrite))"}, {"sha": "e3d7229a0e1023b7dc07615c39bec5d07fe321bb", "filename": "tests/source/macros.rs", "status": "modified", "additions": 29, "deletions": 10, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/63076d7f21dbef5fee9edb1f02b22d27a0411ab7/tests%2Fsource%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63076d7f21dbef5fee9edb1f02b22d27a0411ab7/tests%2Fsource%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fmacros.rs?ref=63076d7f21dbef5fee9edb1f02b22d27a0411ab7", "patch": "@@ -12,6 +12,8 @@ fn main() {\n \n     bar!( a , b , c );\n \n+    bar!( a , b , c , );\n+\n     baz!(1+2+3, quux. kaas());\n \n     quux!(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA, BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB);\n@@ -85,11 +87,6 @@ fn main() {\n         10, 11, 12;\n         20, 21, 22);\n \n-    // #1577\n-    let json = json!({\n-        \"foo\": \"bar\",\n-    });\n-\n     // #1092\n     chain!(input, a:take!(max_size), || []);\n }\n@@ -98,11 +95,6 @@ impl X {\n     empty_invoc!{}\n }\n \n-gfx_pipeline!(pipe {\n-    vbuf: gfx::VertexBuffer<Vertex> = (),\n-    out: gfx::RenderTarget<ColorFormat> = \"Target0\",\n-});\n-\n fn issue_1279() {\n     println!(\"dsfs\"); // a comment\n }\n@@ -120,3 +112,30 @@ fn issue1178() {\n \n     foo!(#[doc = \"bar\"] baz);\n }\n+fn issue1739() {\n+    sql_function!(add_rss_item,\n+                  add_rss_item_t,\n+                  (a: types::Integer,\n+                   b: types::Timestamptz,\n+                   c: types::Text,\n+                   d: types::Text,\n+                   e: types::Text));\n+\n+    w.slice_mut(s![.., init_size[1] - extreeeeeeeeeeeeeeeeeeeeeeeem..init_size[1], ..])\n+        .par_map_inplace(|el| *el = 0.);\n+}\n+\n+// Put the following tests with macro invocations whose arguments cannot be parsed as expressioins\n+// at the end of the file for now.\n+\n+// #1577\n+fn issue1577() {\n+    let json = json!({\n+        \"foo\": \"bar\",\n+    });\n+}\n+\n+gfx_pipeline!(pipe {\n+    vbuf: gfx::VertexBuffer<Vertex> = (),\n+    out: gfx::RenderTarget<ColorFormat> = \"Target0\",\n+});"}, {"sha": "bd1042638a1f2010614e42fea5ff8620083cbfe0", "filename": "tests/target/macros.rs", "status": "modified", "additions": 43, "deletions": 17, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/63076d7f21dbef5fee9edb1f02b22d27a0411ab7/tests%2Ftarget%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63076d7f21dbef5fee9edb1f02b22d27a0411ab7/tests%2Ftarget%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmacros.rs?ref=63076d7f21dbef5fee9edb1f02b22d27a0411ab7", "patch": "@@ -17,6 +17,8 @@ fn main() {\n \n     bar!(a, b, c);\n \n+    bar!(a, b, c,);\n+\n     baz!(1 + 2 + 3, quux.kaas());\n \n     quux!(\n@@ -30,7 +32,7 @@ fn main() {\n         b /* another */\n     );\n \n-    trailingcomma!( a , b , c , );\n+    trailingcomma!(a, b, c,);\n \n     noexpr!( i am not an expression, OK? );\n \n@@ -81,9 +83,7 @@ fn main() {\n     ];\n     vec![a; unsafe { x + 1 }];\n \n-    unknown_bracket_macro__comma_should_not_be_stripped![\n-    a,\n-    ];\n+    unknown_bracket_macro__comma_should_not_be_stripped![a,];\n \n     foo(makro!(1, 3));\n \n@@ -116,11 +116,6 @@ fn main() {\n         10, 11, 12;\n         20, 21, 22);\n \n-    // #1577\n-    let json = json!({\n-        \"foo\": \"bar\",\n-    });\n-\n     // #1092\n     chain!(input, a:take!(max_size), || []);\n }\n@@ -129,19 +124,16 @@ impl X {\n     empty_invoc!{}\n }\n \n-gfx_pipeline!(pipe {\n-    vbuf: gfx::VertexBuffer<Vertex> = (),\n-    out: gfx::RenderTarget<ColorFormat> = \"Target0\",\n-});\n-\n fn issue_1279() {\n     println!(\"dsfs\"); // a comment\n }\n \n fn issue_1555() {\n-    let hello = &format!(\"HTTP/1.1 200 OK\\r\\nServer: {}\\r\\n\\r\\n{}\",\n-                         \"65454654654654654654654655464\",\n-                         \"4\");\n+    let hello = &format!(\n+        \"HTTP/1.1 200 OK\\r\\nServer: {}\\r\\n\\r\\n{}\",\n+        \"65454654654654654654654655464\",\n+        \"4\"\n+    );\n }\n \n fn issue1178() {\n@@ -151,3 +143,37 @@ fn issue1178() {\n \n     foo!(#[doc = \"bar\"] baz);\n }\n+fn issue1739() {\n+    sql_function!(\n+        add_rss_item,\n+        add_rss_item_t,\n+        (\n+            a: types::Integer,\n+            b: types::Timestamptz,\n+            c: types::Text,\n+            d: types::Text,\n+            e: types::Text,\n+        )\n+    );\n+\n+    w.slice_mut(s![\n+        ..,\n+        init_size[1] - extreeeeeeeeeeeeeeeeeeeeeeeem..init_size[1],\n+        ..\n+    ]).par_map_inplace(|el| *el = 0.);\n+}\n+\n+// Put the following tests with macro invocations whose arguments cannot be parsed as expressioins\n+// at the end of the file for now.\n+\n+// #1577\n+fn issue1577() {\n+    let json = json!({\n+        \"foo\": \"bar\",\n+    });\n+}\n+\n+gfx_pipeline!(pipe {\n+    vbuf: gfx::VertexBuffer<Vertex> = (),\n+    out: gfx::RenderTarget<ColorFormat> = \"Target0\",\n+});"}, {"sha": "0b82e4821364868f4d125b3210da873ca54df61b", "filename": "tests/target/tuple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63076d7f21dbef5fee9edb1f02b22d27a0411ab7/tests%2Ftarget%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63076d7f21dbef5fee9edb1f02b22d27a0411ab7/tests%2Ftarget%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ftuple.rs?ref=63076d7f21dbef5fee9edb1f02b22d27a0411ab7", "patch": "@@ -69,7 +69,7 @@ fn issue775() {\n                     \"b\".to_string(),\n                     Array(vec![\n                         mk_object(\n-                            &[(\"c\".to_string(), String(\"\\x0c\\r\".to_string()))]\n+                            &[(\"c\".to_string(), String(\"\\x0c\\r\".to_string()))],\n                         ),\n                         mk_object(&[(\"d\".to_string(), String(\"\".to_string()))]),\n                     ]),"}]}