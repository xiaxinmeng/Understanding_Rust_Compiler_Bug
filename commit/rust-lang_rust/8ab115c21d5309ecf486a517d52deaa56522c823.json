{"sha": "8ab115c21d5309ecf486a517d52deaa56522c823", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhYjExNWMyMWQ1MzA5ZWNmNDg2YTUxN2Q1MmRlYWE1NjUyMmM4MjM=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-09-16T09:20:47Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-12-07T00:30:01Z"}, "message": "Unsupport `#[derive(Trait)]` sugar for `#[derive_Trait]` legacy plugin attributes", "tree": {"sha": "afa1a0c3f5329a6169ca25088753404b29f1d55c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/afa1a0c3f5329a6169ca25088753404b29f1d55c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ab115c21d5309ecf486a517d52deaa56522c823", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ab115c21d5309ecf486a517d52deaa56522c823", "html_url": "https://github.com/rust-lang/rust/commit/8ab115c21d5309ecf486a517d52deaa56522c823", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ab115c21d5309ecf486a517d52deaa56522c823/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "118e052d84157a675649fe640e3d56f264475a3a", "url": "https://api.github.com/repos/rust-lang/rust/commits/118e052d84157a675649fe640e3d56f264475a3a", "html_url": "https://github.com/rust-lang/rust/commit/118e052d84157a675649fe640e3d56f264475a3a"}], "stats": {"total": 243, "additions": 30, "deletions": 213}, "files": [{"sha": "72281bfb36d667a7490759400778f7a1801d32bf", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ab115c21d5309ecf486a517d52deaa56522c823/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ab115c21d5309ecf486a517d52deaa56522c823/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=8ab115c21d5309ecf486a517d52deaa56522c823", "patch": "@@ -908,7 +908,6 @@ where\n         }\n     });\n \n-    let whitelisted_legacy_custom_derives = registry.take_whitelisted_custom_derives();\n     let Registry {\n         syntax_exts,\n         early_lint_passes,\n@@ -955,7 +954,6 @@ where\n         crate_loader,\n         &resolver_arenas,\n     );\n-    resolver.whitelisted_legacy_custom_derives = whitelisted_legacy_custom_derives;\n     syntax_ext::register_builtins(&mut resolver, syntax_exts, sess.features_untracked().quote);\n \n     // Expand all macros"}, {"sha": "2fb28a8a66f97d1a9415ab49ac8cf6dbfecca624", "filename": "src/librustc_plugin/registry.rs", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8ab115c21d5309ecf486a517d52deaa56522c823/src%2Flibrustc_plugin%2Fregistry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ab115c21d5309ecf486a517d52deaa56522c823/src%2Flibrustc_plugin%2Fregistry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Fregistry.rs?ref=8ab115c21d5309ecf486a517d52deaa56522c823", "patch": "@@ -60,8 +60,6 @@ pub struct Registry<'a> {\n \n     #[doc(hidden)]\n     pub attributes: Vec<(String, AttributeType)>,\n-\n-    whitelisted_custom_derives: Vec<ast::Name>,\n }\n \n impl<'a> Registry<'a> {\n@@ -77,7 +75,6 @@ impl<'a> Registry<'a> {\n             lint_groups: FxHashMap::default(),\n             llvm_passes: vec![],\n             attributes: vec![],\n-            whitelisted_custom_derives: Vec::new(),\n         }\n     }\n \n@@ -130,19 +127,6 @@ impl<'a> Registry<'a> {\n         }));\n     }\n \n-    /// This can be used in place of `register_syntax_extension` to register legacy custom derives\n-    /// (i.e. attribute syntax extensions whose name begins with `derive_`). Legacy custom\n-    /// derives defined by this function do not trigger deprecation warnings when used.\n-    pub fn register_custom_derive(&mut self, name: ast::Name, extension: SyntaxExtension) {\n-        assert!(name.as_str().starts_with(\"derive_\"));\n-        self.whitelisted_custom_derives.push(name);\n-        self.register_syntax_extension(name, extension);\n-    }\n-\n-    pub fn take_whitelisted_custom_derives(&mut self) -> Vec<ast::Name> {\n-        ::std::mem::replace(&mut self.whitelisted_custom_derives, Vec::new())\n-    }\n-\n     /// Register a macro of the usual kind.\n     ///\n     /// This is a convenience wrapper for `register_syntax_extension`."}, {"sha": "4fa6dd7409ff6331fe8328c01b40a77f8b23932e", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ab115c21d5309ecf486a517d52deaa56522c823/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ab115c21d5309ecf486a517d52deaa56522c823/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=8ab115c21d5309ecf486a517d52deaa56522c823", "patch": "@@ -1588,7 +1588,6 @@ pub struct Resolver<'a, 'b: 'a> {\n     macro_map: FxHashMap<DefId, Lrc<SyntaxExtension>>,\n     macro_defs: FxHashMap<Mark, DefId>,\n     local_macro_def_scopes: FxHashMap<NodeId, Module<'a>>,\n-    pub whitelisted_legacy_custom_derives: Vec<Name>,\n     pub found_unresolved_macro: bool,\n \n     /// List of crate local macros that we need to warn about as being unused.\n@@ -1922,7 +1921,6 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n             macro_defs,\n             local_macro_def_scopes: FxHashMap::default(),\n             name_already_seen: FxHashMap::default(),\n-            whitelisted_legacy_custom_derives: Vec::new(),\n             potentially_unused_imports: Vec::new(),\n             struct_constructors: Default::default(),\n             found_unresolved_macro: false,"}, {"sha": "39c4fc587ccc6d75de563a740d013362430b6d75", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 3, "deletions": 99, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/8ab115c21d5309ecf486a517d52deaa56522c823/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ab115c21d5309ecf486a517d52deaa56522c823/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=8ab115c21d5309ecf486a517d52deaa56522c823", "patch": "@@ -21,22 +21,18 @@ use rustc::hir::def_id::{DefId, CRATE_DEF_INDEX, DefIndex,\n use rustc::hir::def::{Def, NonMacroAttrKind};\n use rustc::hir::map::{self, DefCollector};\n use rustc::{ty, lint};\n-use syntax::ast::{self, Name, Ident};\n+use syntax::ast::{self, Ident};\n use syntax::attr;\n use syntax::errors::DiagnosticBuilder;\n use syntax::ext::base::{self, Determinacy};\n-use syntax::ext::base::{MacroKind, SyntaxExtension, Resolver as SyntaxResolver};\n+use syntax::ext::base::{MacroKind, SyntaxExtension};\n use syntax::ext::expand::{AstFragment, Invocation, InvocationKind};\n use syntax::ext::hygiene::{self, Mark};\n use syntax::ext::tt::macro_rules;\n-use syntax::feature_gate::{self, feature_err, emit_feature_err, is_builtin_attr_name, GateIssue};\n-use syntax::feature_gate::EXPLAIN_DERIVE_UNDERSCORE;\n+use syntax::feature_gate::{feature_err, is_builtin_attr_name, GateIssue};\n use syntax::fold::{self, Folder};\n-use syntax::parse::parser::PathStyle;\n-use syntax::parse::token::{self, Token};\n use syntax::ptr::P;\n use syntax::symbol::{Symbol, keywords};\n-use syntax::tokenstream::{TokenStream, TokenTree, Delimited, DelimSpan};\n use syntax::util::lev_distance::find_best_match_for_name;\n use syntax_pos::{Span, DUMMY_SP};\n use errors::Applicability;\n@@ -194,10 +190,6 @@ impl<'a, 'crateloader: 'a> base::Resolver for Resolver<'a, 'crateloader> {\n         ret.into_iter().next().unwrap()\n     }\n \n-    fn is_whitelisted_legacy_custom_derive(&self, name: Name) -> bool {\n-        self.whitelisted_legacy_custom_derives.contains(&name)\n-    }\n-\n     fn visit_ast_fragment_with_placeholders(&mut self, mark: Mark, fragment: &AstFragment,\n                                             derives: &[Mark]) {\n         let invocation = self.invocations[&mark];\n@@ -240,79 +232,6 @@ impl<'a, 'crateloader: 'a> base::Resolver for Resolver<'a, 'crateloader> {\n         ImportResolver { resolver: self }.resolve_imports()\n     }\n \n-    // Resolves attribute and derive legacy macros from `#![plugin(..)]`.\n-    fn find_legacy_attr_invoc(&mut self, attrs: &mut Vec<ast::Attribute>, allow_derive: bool)\n-                              -> Option<ast::Attribute> {\n-        if !allow_derive {\n-            return None;\n-        }\n-\n-        // Check for legacy derives\n-        for i in 0..attrs.len() {\n-            let name = attrs[i].name();\n-\n-            if name == \"derive\" {\n-                let result = attrs[i].parse_list(&self.session.parse_sess, |parser| {\n-                    parser.parse_path_allowing_meta(PathStyle::Mod)\n-                });\n-\n-                let mut traits = match result {\n-                    Ok(traits) => traits,\n-                    Err(mut e) => {\n-                        e.cancel();\n-                        continue\n-                    }\n-                };\n-\n-                for j in 0..traits.len() {\n-                    if traits[j].segments.len() > 1 {\n-                        continue\n-                    }\n-                    let trait_name = traits[j].segments[0].ident.name;\n-                    let legacy_name = Symbol::intern(&format!(\"derive_{}\", trait_name));\n-                    if !self.builtin_macros.contains_key(&legacy_name) {\n-                        continue\n-                    }\n-                    let span = traits.remove(j).span;\n-                    self.gate_legacy_custom_derive(legacy_name, span);\n-                    if traits.is_empty() {\n-                        attrs.remove(i);\n-                    } else {\n-                        let mut tokens = Vec::with_capacity(traits.len() - 1);\n-                        for (j, path) in traits.iter().enumerate() {\n-                            if j > 0 {\n-                                tokens.push(TokenTree::Token(attrs[i].span, Token::Comma).into());\n-                            }\n-                            tokens.reserve((path.segments.len() * 2).saturating_sub(1));\n-                            for (k, segment) in path.segments.iter().enumerate() {\n-                                if k > 0 {\n-                                    tokens.push(TokenTree::Token(path.span, Token::ModSep).into());\n-                                }\n-                                let tok = Token::from_ast_ident(segment.ident);\n-                                tokens.push(TokenTree::Token(path.span, tok).into());\n-                            }\n-                        }\n-                        let delim_span = DelimSpan::from_single(attrs[i].span);\n-                        attrs[i].tokens = TokenTree::Delimited(delim_span, Delimited {\n-                            delim: token::Paren,\n-                            tts: TokenStream::concat(tokens).into(),\n-                        }).into();\n-                    }\n-                    return Some(ast::Attribute {\n-                        path: ast::Path::from_ident(Ident::new(legacy_name, span)),\n-                        tokens: TokenStream::empty(),\n-                        id: attr::mk_attr_id(),\n-                        style: ast::AttrStyle::Outer,\n-                        is_sugared_doc: false,\n-                        span,\n-                    });\n-                }\n-            }\n-        }\n-\n-        None\n-    }\n-\n     fn resolve_macro_invocation(&mut self, invoc: &Invocation, invoc_id: Mark, force: bool)\n                                 -> Result<Option<Lrc<SyntaxExtension>>, Determinacy> {\n         let (path, kind, derives_in_scope, after_derive) = match invoc.kind {\n@@ -430,11 +349,6 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n                                 feature_err(&self.session.parse_sess, \"rustc_attrs\", path.span,\n                                             GateIssue::Language, &msg).emit();\n                             }\n-                        } else if name.starts_with(\"derive_\") {\n-                            if !features.custom_derive {\n-                                feature_err(&self.session.parse_sess, \"custom_derive\", path.span,\n-                                            GateIssue::Language, EXPLAIN_DERIVE_UNDERSCORE).emit();\n-                            }\n                         } else if !features.custom_attribute {\n                             let msg = format!(\"The attribute `{}` is currently unknown to the \\\n                                                compiler and may have meaning added to it in the \\\n@@ -1218,14 +1132,4 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n             self.define(module, ident, MacroNS, (def, vis, item.span, expansion));\n         }\n     }\n-\n-    fn gate_legacy_custom_derive(&mut self, name: Symbol, span: Span) {\n-        if !self.session.features_untracked().custom_derive {\n-            let sess = &self.session.parse_sess;\n-            let explain = feature_gate::EXPLAIN_CUSTOM_DERIVE;\n-            emit_feature_err(sess, \"custom_derive\", span, GateIssue::Language, explain);\n-        } else if !self.is_whitelisted_legacy_custom_derive(name) {\n-            self.session.span_warn(span, feature_gate::EXPLAIN_DEPR_CUSTOM_DERIVE);\n-        }\n-    }\n }"}, {"sha": "b898696d349754784e724638498dc3d5c7206283", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8ab115c21d5309ecf486a517d52deaa56522c823/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ab115c21d5309ecf486a517d52deaa56522c823/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=8ab115c21d5309ecf486a517d52deaa56522c823", "patch": "@@ -733,16 +733,12 @@ pub trait Resolver {\n     fn next_node_id(&mut self) -> ast::NodeId;\n     fn get_module_scope(&mut self, id: ast::NodeId) -> Mark;\n     fn eliminate_crate_var(&mut self, item: P<ast::Item>) -> P<ast::Item>;\n-    fn is_whitelisted_legacy_custom_derive(&self, name: Name) -> bool;\n \n     fn visit_ast_fragment_with_placeholders(&mut self, mark: Mark, fragment: &AstFragment,\n                                             derives: &[Mark]);\n     fn add_builtin(&mut self, ident: ast::Ident, ext: Lrc<SyntaxExtension>);\n \n     fn resolve_imports(&mut self);\n-    // Resolves attribute and derive legacy macros from `#![plugin(..)]`.\n-    fn find_legacy_attr_invoc(&mut self, attrs: &mut Vec<Attribute>, allow_derive: bool)\n-                              -> Option<Attribute>;\n \n     fn resolve_macro_invocation(&mut self, invoc: &Invocation, invoc_id: Mark, force: bool)\n                                 -> Result<Option<Lrc<SyntaxExtension>>, Determinacy>;\n@@ -771,15 +767,12 @@ impl Resolver for DummyResolver {\n     fn next_node_id(&mut self) -> ast::NodeId { ast::DUMMY_NODE_ID }\n     fn get_module_scope(&mut self, _id: ast::NodeId) -> Mark { Mark::root() }\n     fn eliminate_crate_var(&mut self, item: P<ast::Item>) -> P<ast::Item> { item }\n-    fn is_whitelisted_legacy_custom_derive(&self, _name: Name) -> bool { false }\n \n     fn visit_ast_fragment_with_placeholders(&mut self, _invoc: Mark, _fragment: &AstFragment,\n                                             _derives: &[Mark]) {}\n     fn add_builtin(&mut self, _ident: ast::Ident, _ext: Lrc<SyntaxExtension>) {}\n \n     fn resolve_imports(&mut self) {}\n-    fn find_legacy_attr_invoc(&mut self, _attrs: &mut Vec<Attribute>, _allow_derive: bool)\n-                              -> Option<Attribute> { None }\n     fn resolve_macro_invocation(&mut self, _invoc: &Invocation, _invoc_id: Mark, _force: bool)\n                                 -> Result<Option<Lrc<SyntaxExtension>>, Determinacy> {\n         Err(Determinacy::Determined)"}, {"sha": "14f19c493b33f965259a9ba820852221247d3e14", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8ab115c21d5309ecf486a517d52deaa56522c823/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ab115c21d5309ecf486a517d52deaa56522c823/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=8ab115c21d5309ecf486a517d52deaa56522c823", "patch": "@@ -1134,12 +1134,6 @@ impl<'a, 'b> InvocationCollector<'a, 'b> {\n         let (mut attr, mut traits, mut after_derive) = (None, Vec::new(), false);\n \n         item = item.map_attrs(|mut attrs| {\n-            if let Some(legacy_attr_invoc) = self.cx.resolver.find_legacy_attr_invoc(&mut attrs,\n-                                                                                     true) {\n-                attr = Some(legacy_attr_invoc);\n-                return attrs;\n-            }\n-\n             attr = self.find_attr_invoc(&mut attrs, &mut after_derive);\n             traits = collect_derives(&mut self.cx, &mut attrs);\n             attrs\n@@ -1156,12 +1150,6 @@ impl<'a, 'b> InvocationCollector<'a, 'b> {\n         let (mut attr, mut after_derive) = (None, false);\n \n         item = item.map_attrs(|mut attrs| {\n-            if let Some(legacy_attr_invoc) = self.cx.resolver.find_legacy_attr_invoc(&mut attrs,\n-                                                                                     false) {\n-                attr = Some(legacy_attr_invoc);\n-                return attrs;\n-            }\n-\n             attr = self.find_attr_invoc(&mut attrs, &mut after_derive);\n             attrs\n         });\n@@ -1623,15 +1611,13 @@ impl<'feat> ExpansionConfig<'feat> {\n     }\n \n     feature_tests! {\n-        fn enable_quotes = quote,\n         fn enable_asm = asm,\n         fn enable_custom_test_frameworks = custom_test_frameworks,\n         fn enable_global_asm = global_asm,\n         fn enable_log_syntax = log_syntax,\n         fn enable_concat_idents = concat_idents,\n         fn enable_trace_macros = trace_macros,\n         fn enable_allow_internal_unstable = allow_internal_unstable,\n-        fn enable_custom_derive = custom_derive,\n         fn enable_format_args_nl = format_args_nl,\n         fn macros_in_extern_enabled = macros_in_extern,\n         fn proc_macro_hygiene = proc_macro_hygiene,"}, {"sha": "1aea31348a7b937640447f7a7abd32e41eb70d32", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 3, "deletions": 16, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8ab115c21d5309ecf486a517d52deaa56522c823/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ab115c21d5309ecf486a517d52deaa56522c823/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=8ab115c21d5309ecf486a517d52deaa56522c823", "patch": "@@ -176,10 +176,6 @@ declare_features! (\n     // Allows the use of custom attributes; RFC 572\n     (active, custom_attribute, \"1.0.0\", Some(29642), None),\n \n-    // Allows the use of #[derive(Anything)] as sugar for\n-    // #[derive_Anything].\n-    (active, custom_derive, \"1.0.0\", Some(29644), None),\n-\n     // Allows the use of rustc_* attributes; RFC 572\n     (active, rustc_attrs, \"1.0.0\", Some(29642), None),\n \n@@ -530,6 +526,9 @@ declare_features! (\n      Some(\"subsumed by `#![feature(proc_macro_hygiene)]`\")),\n     (removed, panic_implementation, \"1.28.0\", Some(44489), None,\n      Some(\"subsumed by `#[panic_handler]`\")),\n+    // Allows the use of `#[derive(Anything)]` as sugar for `#[derive_Anything]`.\n+    (removed, custom_derive, \"1.0.0\", Some(29644), None,\n+     Some(\"subsumed by `#[proc_macro_derive]`\")),\n );\n \n declare_features! (\n@@ -1287,8 +1286,6 @@ impl<'a> Context<'a> {\n                           \"unless otherwise specified, attributes \\\n                            with the prefix `rustc_` \\\n                            are reserved for internal compiler diagnostics\");\n-        } else if name.starts_with(\"derive_\") {\n-            gate_feature!(self, custom_derive, attr.span, EXPLAIN_DERIVE_UNDERSCORE);\n         } else if !attr::is_known(attr) {\n             // Only run the custom attribute lint during regular\n             // feature gate checking. Macro gating runs\n@@ -1418,16 +1415,6 @@ pub const EXPLAIN_ALLOW_INTERNAL_UNSTABLE: &str =\n pub const EXPLAIN_ALLOW_INTERNAL_UNSAFE: &str =\n     \"allow_internal_unsafe side-steps the unsafe_code lint\";\n \n-pub const EXPLAIN_CUSTOM_DERIVE: &str =\n-    \"`#[derive]` for custom traits is deprecated and will be removed in the future.\";\n-\n-pub const EXPLAIN_DEPR_CUSTOM_DERIVE: &str =\n-    \"`#[derive]` for custom traits is deprecated and will be removed in the future. \\\n-    Prefer using procedural macro custom derive.\";\n-\n-pub const EXPLAIN_DERIVE_UNDERSCORE: &str =\n-    \"attributes of the form `#[derive_*]` are reserved for the compiler\";\n-\n pub const EXPLAIN_UNSIZED_TUPLE_COERCION: &str =\n     \"unsized tuple coercion is not stable enough for use and is subject to change\";\n "}, {"sha": "c49d577253143e1fd1058cc9935a4ed6cd56ffed", "filename": "src/libsyntax_ext/lib.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8ab115c21d5309ecf486a517d52deaa56522c823/src%2Flibsyntax_ext%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ab115c21d5309ecf486a517d52deaa56522c823/src%2Flibsyntax_ext%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Flib.rs?ref=8ab115c21d5309ecf486a517d52deaa56522c823", "patch": "@@ -39,10 +39,6 @@ extern crate log;\n \n mod diagnostics;\n \n-#[macro_use]\n-// for custom_derive\n-pub mod deriving;\n-\n mod asm;\n mod assert;\n mod cfg;\n@@ -54,13 +50,14 @@ mod format;\n mod format_foreign;\n mod global_asm;\n mod log_syntax;\n-mod trace_macros;\n+mod proc_macro_server;\n mod test;\n mod test_case;\n+mod trace_macros;\n \n+pub mod deriving;\n pub mod proc_macro_decls;\n pub mod proc_macro_impl;\n-mod proc_macro_server;\n \n use rustc_data_structures::sync::Lrc;\n use syntax::ast;"}, {"sha": "edf5cc7e9ae0085184c1cc88a568e36b0f9bd00f", "filename": "src/test/compile-fail/proc-macro/derive-still-gated.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ab115c21d5309ecf486a517d52deaa56522c823/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fderive-still-gated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ab115c21d5309ecf486a517d52deaa56522c823/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fderive-still-gated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fderive-still-gated.rs?ref=8ab115c21d5309ecf486a517d52deaa56522c823", "patch": "@@ -15,7 +15,7 @@\n #[macro_use]\n extern crate derive_a;\n \n-#[derive_A] //~ ERROR: attributes of the form `#[derive_*]` are reserved for the compiler\n+#[derive_A] //~ ERROR attribute `derive_A` is currently unknown\n struct A;\n \n fn main() {}"}, {"sha": "b8f91386f08805818a4b9b43278d2890ce9a3d15", "filename": "src/test/run-pass-fulldeps/auxiliary/custom_derive_plugin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ab115c21d5309ecf486a517d52deaa56522c823/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fcustom_derive_plugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ab115c21d5309ecf486a517d52deaa56522c823/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fcustom_derive_plugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fcustom_derive_plugin.rs?ref=8ab115c21d5309ecf486a517d52deaa56522c823", "patch": "@@ -31,11 +31,11 @@ use rustc_plugin::Registry;\n \n #[plugin_registrar]\n pub fn plugin_registrar(reg: &mut Registry) {\n-    reg.register_custom_derive(\n+    reg.register_syntax_extension(\n         Symbol::intern(\"derive_TotalSum\"),\n         MultiDecorator(box expand));\n \n-    reg.register_custom_derive(\n+    reg.register_syntax_extension(\n         Symbol::intern(\"derive_Nothing\"),\n         MultiDecorator(box noop));\n }"}, {"sha": "f986efb913c65bb4c2ef327b39442529342bf501", "filename": "src/test/run-pass-fulldeps/custom-derive-partial-eq.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ab115c21d5309ecf486a517d52deaa56522c823/src%2Ftest%2Frun-pass-fulldeps%2Fcustom-derive-partial-eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ab115c21d5309ecf486a517d52deaa56522c823/src%2Ftest%2Frun-pass-fulldeps%2Fcustom-derive-partial-eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fcustom-derive-partial-eq.rs?ref=8ab115c21d5309ecf486a517d52deaa56522c823", "patch": "@@ -10,11 +10,11 @@\n \n // aux-build:custom_derive_partial_eq.rs\n // ignore-stage1\n-#![feature(plugin, custom_derive)]\n+#![feature(plugin)]\n #![plugin(custom_derive_partial_eq)]\n #![allow(unused)]\n \n-#[derive(CustomPartialEq)] // Check that this is not a stability error.\n+#[derive_CustomPartialEq] // Check that this is not a stability error.\n enum E { V1, V2 }\n \n fn main() {}"}, {"sha": "ba956e4c13292f56ee95d98b6b628687be103d68", "filename": "src/test/run-pass-fulldeps/custom-derive-partial-eq.stderr", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/118e052d84157a675649fe640e3d56f264475a3a/src%2Ftest%2Frun-pass-fulldeps%2Fcustom-derive-partial-eq.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/118e052d84157a675649fe640e3d56f264475a3a/src%2Ftest%2Frun-pass-fulldeps%2Fcustom-derive-partial-eq.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fcustom-derive-partial-eq.stderr?ref=118e052d84157a675649fe640e3d56f264475a3a", "patch": "@@ -1,6 +0,0 @@\n-warning: `#[derive]` for custom traits is deprecated and will be removed in the future. Prefer using procedural macro custom derive.\n-  --> $DIR/custom-derive-partial-eq.rs:17:10\n-   |\n-LL | #[derive(CustomPartialEq)] // Check that this is not a stability error.\n-   |          ^^^^^^^^^^^^^^^\n-"}, {"sha": "374e15d22a192ecbccf0b79e82e72e23050d84db", "filename": "src/test/run-pass-fulldeps/derive-totalsum-attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ab115c21d5309ecf486a517d52deaa56522c823/src%2Ftest%2Frun-pass-fulldeps%2Fderive-totalsum-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ab115c21d5309ecf486a517d52deaa56522c823/src%2Ftest%2Frun-pass-fulldeps%2Fderive-totalsum-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fderive-totalsum-attr.rs?ref=8ab115c21d5309ecf486a517d52deaa56522c823", "patch": "@@ -11,7 +11,7 @@\n // aux-build:custom_derive_plugin_attr.rs\n // ignore-stage1\n \n-#![feature(plugin, custom_derive, rustc_attrs)]\n+#![feature(plugin, rustc_attrs)]\n #![plugin(custom_derive_plugin_attr)]\n \n trait TotalSum {"}, {"sha": "86f14ca446329a40edb5391d155b9520beb4f19e", "filename": "src/test/run-pass-fulldeps/derive-totalsum.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8ab115c21d5309ecf486a517d52deaa56522c823/src%2Ftest%2Frun-pass-fulldeps%2Fderive-totalsum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ab115c21d5309ecf486a517d52deaa56522c823/src%2Ftest%2Frun-pass-fulldeps%2Fderive-totalsum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fderive-totalsum.rs?ref=8ab115c21d5309ecf486a517d52deaa56522c823", "patch": "@@ -11,7 +11,7 @@\n // aux-build:custom_derive_plugin.rs\n // ignore-stage1\n \n-#![feature(plugin, custom_derive)]\n+#![feature(plugin)]\n #![plugin(custom_derive_plugin)]\n \n trait TotalSum {\n@@ -32,14 +32,14 @@ impl TotalSum for Seven {\n     }\n }\n \n-#[derive(TotalSum)]\n+#[derive_TotalSum]\n struct Foo {\n     seven: Seven,\n     bar: Bar,\n     baz: isize,\n }\n \n-#[derive(TotalSum)]\n+#[derive_TotalSum]\n struct Bar {\n     quux: isize,\n     bleh: isize,"}, {"sha": "a33e9cc05435478b66be33ab19f7bca2a49d5848", "filename": "src/test/run-pass-fulldeps/issue-40663.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8ab115c21d5309ecf486a517d52deaa56522c823/src%2Ftest%2Frun-pass-fulldeps%2Fissue-40663.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ab115c21d5309ecf486a517d52deaa56522c823/src%2Ftest%2Frun-pass-fulldeps%2Fissue-40663.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fissue-40663.rs?ref=8ab115c21d5309ecf486a517d52deaa56522c823", "patch": "@@ -12,10 +12,12 @@\n // aux-build:custom_derive_plugin.rs\n // ignore-stage1\n \n-#![feature(plugin, custom_derive)]\n+#![feature(plugin)]\n #![plugin(custom_derive_plugin)]\n \n-#[derive(Nothing, Nothing, Nothing)]\n+#[derive_Nothing]\n+#[derive_Nothing]\n+#[derive_Nothing]\n struct S;\n \n fn main() {}"}, {"sha": "0b1b3141f5bf7745e63496c1e0599399a2ba68c4", "filename": "src/test/ui/feature-gates/feature-gate-custom_derive.rs", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/118e052d84157a675649fe640e3d56f264475a3a/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-custom_derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/118e052d84157a675649fe640e3d56f264475a3a/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-custom_derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-custom_derive.rs?ref=118e052d84157a675649fe640e3d56f264475a3a", "patch": "@@ -1,15 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#[derive_Clone]\n-//~^ ERROR attributes of the form `#[derive_*]` are reserved\n-struct Test;\n-\n-pub fn main() {}"}, {"sha": "0979372daea3066d56029ca486e5b861a4b58ede", "filename": "src/test/ui/feature-gates/feature-gate-custom_derive.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/118e052d84157a675649fe640e3d56f264475a3a/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-custom_derive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/118e052d84157a675649fe640e3d56f264475a3a/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-custom_derive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-custom_derive.stderr?ref=118e052d84157a675649fe640e3d56f264475a3a", "patch": "@@ -1,11 +0,0 @@\n-error[E0658]: attributes of the form `#[derive_*]` are reserved for the compiler (see issue #29644)\n-  --> $DIR/feature-gate-custom_derive.rs:11:3\n-   |\n-LL | #[derive_Clone]\n-   |   ^^^^^^^^^^^^\n-   |\n-   = help: add #![feature(custom_derive)] to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "bbe95a4371e3c0601fb7821cda3172417d4259a5", "filename": "src/test/ui/issues/issue-32655.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ab115c21d5309ecf486a517d52deaa56522c823/src%2Ftest%2Fui%2Fissues%2Fissue-32655.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ab115c21d5309ecf486a517d52deaa56522c823/src%2Ftest%2Fui%2Fissues%2Fissue-32655.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32655.rs?ref=8ab115c21d5309ecf486a517d52deaa56522c823", "patch": "@@ -13,7 +13,7 @@\n \n macro_rules! foo (\n     () => (\n-        #[derive_Clone] //~ ERROR attributes of the form\n+        #[derive_Clone] //~ ERROR attribute `derive_Clone` is currently unknown\n         struct T;\n     );\n );\n@@ -25,7 +25,7 @@ macro_rules! bar (\n foo!();\n \n bar!(\n-    #[derive_Clone] //~ ERROR attributes of the form\n+    #[derive_Clone] //~ ERROR attribute `derive_Clone` is currently unknown\n     struct S;\n );\n "}, {"sha": "88da51a478a7abecb6b24f0471bffdbba833caae", "filename": "src/test/ui/issues/issue-32655.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8ab115c21d5309ecf486a517d52deaa56522c823/src%2Ftest%2Fui%2Fissues%2Fissue-32655.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ab115c21d5309ecf486a517d52deaa56522c823/src%2Ftest%2Fui%2Fissues%2Fissue-32655.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32655.stderr?ref=8ab115c21d5309ecf486a517d52deaa56522c823", "patch": "@@ -1,21 +1,21 @@\n-error[E0658]: attributes of the form `#[derive_*]` are reserved for the compiler (see issue #29644)\n+error[E0658]: The attribute `derive_Clone` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n   --> $DIR/issue-32655.rs:16:11\n    |\n-LL |         #[derive_Clone] //~ ERROR attributes of the form\n+LL |         #[derive_Clone] //~ ERROR attribute `derive_Clone` is currently unknown\n    |           ^^^^^^^^^^^^\n ...\n LL | foo!();\n    | ------- in this macro invocation\n    |\n-   = help: add #![feature(custom_derive)] to the crate attributes to enable\n+   = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n-error[E0658]: attributes of the form `#[derive_*]` are reserved for the compiler (see issue #29644)\n+error[E0658]: The attribute `derive_Clone` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n   --> $DIR/issue-32655.rs:28:7\n    |\n-LL |     #[derive_Clone] //~ ERROR attributes of the form\n+LL |     #[derive_Clone] //~ ERROR attribute `derive_Clone` is currently unknown\n    |       ^^^^^^^^^^^^\n    |\n-   = help: add #![feature(custom_derive)] to the crate attributes to enable\n+   = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n error: aborting due to 2 previous errors\n "}]}