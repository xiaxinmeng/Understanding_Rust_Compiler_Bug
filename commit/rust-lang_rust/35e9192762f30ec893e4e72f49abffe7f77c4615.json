{"sha": "35e9192762f30ec893e4e72f49abffe7f77c4615", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1ZTkxOTI3NjJmMzBlYzg5M2U0ZTcyZjQ5YWJmZmU3Zjc3YzQ2MTU=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-02-23T09:12:20Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-02-23T16:00:19Z"}, "message": "Make str::pop_char and str::unsafe::pop_byte efficient\n\nO(1) rather than O(string len)", "tree": {"sha": "f94bbe2b98ca8f3083057b6f49475262a6f966cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f94bbe2b98ca8f3083057b6f49475262a6f966cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/35e9192762f30ec893e4e72f49abffe7f77c4615", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/35e9192762f30ec893e4e72f49abffe7f77c4615", "html_url": "https://github.com/rust-lang/rust/commit/35e9192762f30ec893e4e72f49abffe7f77c4615", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/35e9192762f30ec893e4e72f49abffe7f77c4615/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2984b46b4c3b8b91d877ebc85efcc9f783c53d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2984b46b4c3b8b91d877ebc85efcc9f783c53d5", "html_url": "https://github.com/rust-lang/rust/commit/c2984b46b4c3b8b91d877ebc85efcc9f783c53d5"}], "stats": {"total": 29, "additions": 15, "deletions": 14}, "files": [{"sha": "f1310d2599ddad473bcdf3a9826b15e6aed5e864", "filename": "src/libcore/str.rs", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/35e9192762f30ec893e4e72f49abffe7f77c4615/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35e9192762f30ec893e4e72f49abffe7f77c4615/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=35e9192762f30ec893e4e72f49abffe7f77c4615", "patch": "@@ -9,8 +9,6 @@ but UTF-8 unsafe operations should be avoided.\n For some heavy-duty uses, try std::rope.\n */\n \n-import option::{some, none};\n-\n export\n    // Creating a string\n    from_bytes,\n@@ -276,10 +274,10 @@ Remove the final character from a string and return it.\n Failure:\n If the string does not contain any characters.\n */\n-fn pop_char(&s: str) -> char unsafe {\n+fn pop_char(&s: str) -> char {\n     let end = len(s);\n-    let {ch:ch, prev:end} = char_range_at_reverse(s, end);\n-    s = unsafe::slice_bytes(s, 0u, end);\n+    let {ch, prev} = char_range_at_reverse(s, end);\n+    unsafe { unsafe::set_len(s, prev); }\n     ret ch;\n }\n \n@@ -1125,12 +1123,8 @@ fn is_whitespace(s: str) -> bool {\n // Returns the string length/size in bytes\n // not counting the null terminator\n pure fn len(s: str) -> uint unsafe {\n-    as_bytes(s) { |v|\n-        let vlen = vec::len(v);\n-        // There should always be a null terminator\n-        assert (vlen > 0u);\n-        vlen - 1u\n-    }\n+    let repr: *vec::unsafe::vec_repr = ::unsafe::reinterpret_cast(s);\n+    (*repr).fill - 1u\n }\n \n // FIXME: delete?\n@@ -1466,7 +1460,8 @@ mod unsafe {\n       push_byte,\n       push_bytes,\n       pop_byte,\n-      shift_byte;\n+      shift_byte,\n+      set_len;\n \n    // Function: unsafe::from_bytes\n    //\n@@ -1540,7 +1535,7 @@ mod unsafe {\n        let len = len(s);\n        assert (len > 0u);\n        let b = s[len - 1u];\n-       s = unsafe::slice_bytes(s, 0u, len - 1u);\n+       set_len(s, len - 1u);\n        ret b;\n    }\n \n@@ -1554,7 +1549,13 @@ mod unsafe {\n        s = unsafe::slice_bytes(s, 1u, len);\n        ret b;\n    }\n-\n+    \n+    unsafe fn set_len(&v: str, new_len: uint) {\n+        let repr: *vec::unsafe::vec_repr = ::unsafe::reinterpret_cast(v);\n+        (*repr).fill = new_len + 1u;\n+        let null = ptr::mut_offset(ptr::mut_addr_of((*repr).data), new_len);\n+        *null = 0u8;\n+    }\n }\n \n "}]}