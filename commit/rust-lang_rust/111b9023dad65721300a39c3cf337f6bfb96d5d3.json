{"sha": "111b9023dad65721300a39c3cf337f6bfb96d5d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExMWI5MDIzZGFkNjU3MjEzMDBhMzljM2NmMzM3ZjZiZmI5NmQ1ZDM=", "commit": {"author": {"name": "Tim Nielens", "email": "tim.nielens@gmail.com", "date": "2020-10-27T00:47:40Z"}, "committer": {"name": "Tim Nielens", "email": "tim.nielens@gmail.com", "date": "2020-10-27T00:57:04Z"}, "message": "add manual_ok_or lint", "tree": {"sha": "59b64bd051668147b0d6ba4325dec5e648bc3e05", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/59b64bd051668147b0d6ba4325dec5e648bc3e05"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/111b9023dad65721300a39c3cf337f6bfb96d5d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/111b9023dad65721300a39c3cf337f6bfb96d5d3", "html_url": "https://github.com/rust-lang/rust/commit/111b9023dad65721300a39c3cf337f6bfb96d5d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/111b9023dad65721300a39c3cf337f6bfb96d5d3/comments", "author": {"login": "tnielens", "id": 11885535, "node_id": "MDQ6VXNlcjExODg1NTM1", "avatar_url": "https://avatars.githubusercontent.com/u/11885535?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tnielens", "html_url": "https://github.com/tnielens", "followers_url": "https://api.github.com/users/tnielens/followers", "following_url": "https://api.github.com/users/tnielens/following{/other_user}", "gists_url": "https://api.github.com/users/tnielens/gists{/gist_id}", "starred_url": "https://api.github.com/users/tnielens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tnielens/subscriptions", "organizations_url": "https://api.github.com/users/tnielens/orgs", "repos_url": "https://api.github.com/users/tnielens/repos", "events_url": "https://api.github.com/users/tnielens/events{/privacy}", "received_events_url": "https://api.github.com/users/tnielens/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tnielens", "id": 11885535, "node_id": "MDQ6VXNlcjExODg1NTM1", "avatar_url": "https://avatars.githubusercontent.com/u/11885535?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tnielens", "html_url": "https://github.com/tnielens", "followers_url": "https://api.github.com/users/tnielens/followers", "following_url": "https://api.github.com/users/tnielens/following{/other_user}", "gists_url": "https://api.github.com/users/tnielens/gists{/gist_id}", "starred_url": "https://api.github.com/users/tnielens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tnielens/subscriptions", "organizations_url": "https://api.github.com/users/tnielens/orgs", "repos_url": "https://api.github.com/users/tnielens/repos", "events_url": "https://api.github.com/users/tnielens/events{/privacy}", "received_events_url": "https://api.github.com/users/tnielens/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "afbac8906e614a63ff5825710c3ebe45a3b5e01a", "url": "https://api.github.com/repos/rust-lang/rust/commits/afbac8906e614a63ff5825710c3ebe45a3b5e01a", "html_url": "https://github.com/rust-lang/rust/commit/afbac8906e614a63ff5825710c3ebe45a3b5e01a"}], "stats": {"total": 234, "additions": 234, "deletions": 0}, "files": [{"sha": "cd884e0665d245a801569ab97f5e2cf0b3b87346", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/111b9023dad65721300a39c3cf337f6bfb96d5d3/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/111b9023dad65721300a39c3cf337f6bfb96d5d3/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=111b9023dad65721300a39c3cf337f6bfb96d5d3", "patch": "@@ -1795,6 +1795,7 @@ Released 2018-09-13\n [`manual_async_fn`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_async_fn\n [`manual_memcpy`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_memcpy\n [`manual_non_exhaustive`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_non_exhaustive\n+[`manual_ok_or`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_ok_or\n [`manual_range_contains`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_range_contains\n [`manual_saturating_arithmetic`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_saturating_arithmetic\n [`manual_strip`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_strip"}, {"sha": "9b6f8e73454a749a20c9f1f1aa99743ce6400e5e", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/111b9023dad65721300a39c3cf337f6bfb96d5d3/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/111b9023dad65721300a39c3cf337f6bfb96d5d3/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=111b9023dad65721300a39c3cf337f6bfb96d5d3", "patch": "@@ -233,6 +233,7 @@ mod macro_use;\n mod main_recursion;\n mod manual_async_fn;\n mod manual_non_exhaustive;\n+mod manual_ok_or;\n mod manual_strip;\n mod manual_unwrap_or;\n mod map_clone;\n@@ -645,6 +646,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &main_recursion::MAIN_RECURSION,\n         &manual_async_fn::MANUAL_ASYNC_FN,\n         &manual_non_exhaustive::MANUAL_NON_EXHAUSTIVE,\n+        &manual_ok_or::MANUAL_OK_OR,\n         &manual_strip::MANUAL_STRIP,\n         &manual_unwrap_or::MANUAL_UNWRAP_OR,\n         &map_clone::MAP_CLONE,\n@@ -1140,6 +1142,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box unwrap_in_result::UnwrapInResult);\n     store.register_late_pass(|| box self_assignment::SelfAssignment);\n     store.register_late_pass(|| box manual_unwrap_or::ManualUnwrapOr);\n+    store.register_late_pass(|| box manual_ok_or::ManualOkOr);\n     store.register_late_pass(|| box float_equality_without_abs::FloatEqualityWithoutAbs);\n     store.register_late_pass(|| box async_yields_async::AsyncYieldsAsync);\n     store.register_late_pass(|| box manual_strip::ManualStrip);\n@@ -1229,6 +1232,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&loops::EXPLICIT_INTO_ITER_LOOP),\n         LintId::of(&loops::EXPLICIT_ITER_LOOP),\n         LintId::of(&macro_use::MACRO_USE_IMPORTS),\n+        LintId::of(&manual_ok_or::MANUAL_OK_OR),\n         LintId::of(&map_err_ignore::MAP_ERR_IGNORE),\n         LintId::of(&match_on_vec_items::MATCH_ON_VEC_ITEMS),\n         LintId::of(&matches::MATCH_BOOL),"}, {"sha": "38298eb813a7230380edf512edbeff70a0259785", "filename": "clippy_lints/src/manual_ok_or.rs", "status": "added", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/111b9023dad65721300a39c3cf337f6bfb96d5d3/clippy_lints%2Fsrc%2Fmanual_ok_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/111b9023dad65721300a39c3cf337f6bfb96d5d3/clippy_lints%2Fsrc%2Fmanual_ok_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_ok_or.rs?ref=111b9023dad65721300a39c3cf337f6bfb96d5d3", "patch": "@@ -0,0 +1,97 @@\n+use crate::utils;\n+use if_chain::if_chain;\n+use rustc_errors::Applicability;\n+use rustc_hir::{def, Expr, ExprKind, PatKind, QPath};\n+use rustc_lint::LintContext;\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::lint::in_external_macro;\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+\n+declare_clippy_lint! {\n+    /// **What it does:**\n+    /// Finds patterns that reimplement `Option::ok_or`.\n+    ///\n+    /// **Why is this bad?**\n+    /// Concise code helps focusing on behavior instead of boilerplate.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Examples:**\n+    /// ```rust\n+    /// let foo: Option<i32> = None;\n+    /// foo.map_or(Err(\"error\"), |v| Ok(v));\n+    ///\n+    /// let foo: Option<i32> = None;\n+    /// foo.map_or(Err(\"error\"), |v| Ok(v));\n+    /// ```\n+    ///\n+    /// Use instead:\n+    /// ```rust\n+    /// let foo: Option<i32> = None;\n+    /// foo.ok_or(\"error\");\n+    /// ```\n+    pub MANUAL_OK_OR,\n+    pedantic,\n+    \"finds patterns that can be encoded more concisely with `Option::ok_or`\"\n+}\n+\n+declare_lint_pass!(ManualOkOr => [MANUAL_OK_OR]);\n+\n+impl LateLintPass<'_> for ManualOkOr {\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, scrutinee: &'tcx Expr<'tcx>) {\n+        if in_external_macro(cx.sess(), scrutinee.span) {\n+            return;\n+        }\n+\n+        if_chain! {\n+            if let ExprKind::MethodCall(method_segment, _, args, _) = scrutinee.kind;\n+            if method_segment.ident.name == sym!(map_or);\n+            if args.len() == 3;\n+            let method_receiver = &args[0];\n+            let ty = cx.typeck_results().expr_ty(method_receiver);\n+            if utils::is_type_diagnostic_item(cx, ty, sym!(option_type));\n+            let or_expr = &args[1];\n+            if is_ok_wrapping(cx, &args[2]);\n+            if let ExprKind::Call(Expr { kind: ExprKind::Path(err_path), .. }, &[ref err_arg]) = or_expr.kind;\n+            if utils::match_qpath(err_path, &utils::paths::RESULT_ERR);\n+            if let Some(method_receiver_snippet) = utils::snippet_opt(cx, method_receiver.span);\n+            if let Some(err_arg_snippet) = utils::snippet_opt(cx, err_arg.span);\n+            if let Some(indent) = utils::indent_of(cx, scrutinee.span);\n+            then {\n+                let reindented_err_arg_snippet =\n+                    utils::reindent_multiline(err_arg_snippet.into(), true, Some(indent + 4));\n+                utils::span_lint_and_sugg(\n+                    cx,\n+                    MANUAL_OK_OR,\n+                    scrutinee.span,\n+                    \"this pattern reimplements `Option::ok_or`\",\n+                    \"replace with\",\n+                    format!(\n+                        \"{}.ok_or({})\",\n+                        method_receiver_snippet,\n+                        reindented_err_arg_snippet\n+                    ),\n+                    Applicability::MachineApplicable,\n+                );\n+            }\n+        }\n+    }\n+}\n+\n+fn is_ok_wrapping(cx: &LateContext<'_>, map_expr: &Expr<'_>) -> bool {\n+    if let ExprKind::Path(ref qpath) = map_expr.kind {\n+        if utils::match_qpath(qpath, &utils::paths::RESULT_OK) {\n+            return true;\n+        }\n+    }\n+    if_chain! {\n+        if let ExprKind::Closure(_, _, body_id, ..) = map_expr.kind;\n+        let body = cx.tcx.hir().body(body_id);\n+        if let PatKind::Binding(_, param_id, ..) = body.params[0].pat.kind;\n+        if let ExprKind::Call(Expr { kind: ExprKind::Path(ok_path), .. }, &[ref ok_arg]) = body.value.kind;\n+        if utils::match_qpath(ok_path, &utils::paths::RESULT_OK);\n+        if let ExprKind::Path(QPath::Resolved(_, ok_arg_path)) = ok_arg.kind;\n+        if let def::Res::Local(ok_arg_path_id) = ok_arg_path.res;\n+        then { param_id == ok_arg_path_id } else { false }\n+    }\n+}"}, {"sha": "f438da0072018e4fe9d4b2434fe92d1f70663d38", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/111b9023dad65721300a39c3cf337f6bfb96d5d3/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/111b9023dad65721300a39c3cf337f6bfb96d5d3/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=111b9023dad65721300a39c3cf337f6bfb96d5d3", "patch": "@@ -1173,6 +1173,13 @@ vec![\n         deprecation: None,\n         module: \"manual_non_exhaustive\",\n     },\n+    Lint {\n+        name: \"manual_ok_or\",\n+        group: \"pedantic\",\n+        desc: \"finds patterns that can be encoded more concisely with `Option::ok_or`\",\n+        deprecation: None,\n+        module: \"manual_ok_or\",\n+    },\n     Lint {\n         name: \"manual_range_contains\",\n         group: \"style\","}, {"sha": "b42e94bd727de9fa998f54bdb83d099ebf4401a9", "filename": "tests/ui/manual_ok_or.fixed", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/111b9023dad65721300a39c3cf337f6bfb96d5d3/tests%2Fui%2Fmanual_ok_or.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/111b9023dad65721300a39c3cf337f6bfb96d5d3/tests%2Fui%2Fmanual_ok_or.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_ok_or.fixed?ref=111b9023dad65721300a39c3cf337f6bfb96d5d3", "patch": "@@ -0,0 +1,40 @@\n+// run-rustfix\n+#![warn(clippy::manual_ok_or)]\n+#![allow(clippy::blacklisted_name)]\n+#![allow(clippy::redundant_closure)]\n+#![allow(dead_code)]\n+#![allow(unused_must_use)]\n+\n+fn main() {\n+    // basic case\n+    let foo: Option<i32> = None;\n+    foo.ok_or(\"error\");\n+\n+    // eta expansion case\n+    foo.ok_or(\"error\");\n+\n+    // turbo fish syntax\n+    None::<i32>.ok_or(\"error\");\n+\n+    // multiline case\n+    #[rustfmt::skip]\n+    foo.ok_or(&format!(\n+        \"{}{}{}{}{}{}{}\",\n+        \"Alice\", \"Bob\", \"Sarah\", \"Marc\", \"Sandra\", \"Eric\", \"Jenifer\"));\n+\n+    // not applicable, closure isn't direct `Ok` wrapping\n+    foo.map_or(Err(\"error\"), |v| Ok(v + 1));\n+\n+    // not applicable, or side isn't `Result::Err`\n+    foo.map_or(Ok::<i32, &str>(1), |v| Ok(v));\n+\n+    // not applicatble, expr is not a `Result` value\n+    foo.map_or(42, |v| v);\n+\n+    // TODO patterns not covered yet\n+    match foo {\n+        Some(v) => Ok(v),\n+        None => Err(\"error\"),\n+    };\n+    foo.map_or_else(|| Err(\"error\"), |v| Ok(v));\n+}"}, {"sha": "e5a6056fbf5cc40ba9cb089d663e1ca81b3186db", "filename": "tests/ui/manual_ok_or.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/111b9023dad65721300a39c3cf337f6bfb96d5d3/tests%2Fui%2Fmanual_ok_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/111b9023dad65721300a39c3cf337f6bfb96d5d3/tests%2Fui%2Fmanual_ok_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_ok_or.rs?ref=111b9023dad65721300a39c3cf337f6bfb96d5d3", "patch": "@@ -0,0 +1,44 @@\n+// run-rustfix\n+#![warn(clippy::manual_ok_or)]\n+#![allow(clippy::blacklisted_name)]\n+#![allow(clippy::redundant_closure)]\n+#![allow(dead_code)]\n+#![allow(unused_must_use)]\n+\n+fn main() {\n+    // basic case\n+    let foo: Option<i32> = None;\n+    foo.map_or(Err(\"error\"), |v| Ok(v));\n+\n+    // eta expansion case\n+    foo.map_or(Err(\"error\"), Ok);\n+\n+    // turbo fish syntax\n+    None::<i32>.map_or(Err(\"error\"), |v| Ok(v));\n+\n+    // multiline case\n+    #[rustfmt::skip]\n+    foo.map_or(Err::<i32, &str>(\n+        &format!(\n+            \"{}{}{}{}{}{}{}\",\n+            \"Alice\", \"Bob\", \"Sarah\", \"Marc\", \"Sandra\", \"Eric\", \"Jenifer\")\n+        ),\n+        |v| Ok(v),\n+    );\n+\n+    // not applicable, closure isn't direct `Ok` wrapping\n+    foo.map_or(Err(\"error\"), |v| Ok(v + 1));\n+\n+    // not applicable, or side isn't `Result::Err`\n+    foo.map_or(Ok::<i32, &str>(1), |v| Ok(v));\n+\n+    // not applicatble, expr is not a `Result` value\n+    foo.map_or(42, |v| v);\n+\n+    // TODO patterns not covered yet\n+    match foo {\n+        Some(v) => Ok(v),\n+        None => Err(\"error\"),\n+    };\n+    foo.map_or_else(|| Err(\"error\"), |v| Ok(v));\n+}"}, {"sha": "8ea10ac54363660225df1216d7435f3c756630f1", "filename": "tests/ui/manual_ok_or.stderr", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/111b9023dad65721300a39c3cf337f6bfb96d5d3/tests%2Fui%2Fmanual_ok_or.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/111b9023dad65721300a39c3cf337f6bfb96d5d3/tests%2Fui%2Fmanual_ok_or.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_ok_or.stderr?ref=111b9023dad65721300a39c3cf337f6bfb96d5d3", "patch": "@@ -0,0 +1,41 @@\n+error: this pattern reimplements `Option::ok_or`\n+  --> $DIR/manual_ok_or.rs:11:5\n+   |\n+LL |     foo.map_or(Err(\"error\"), |v| Ok(v));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `foo.ok_or(\"error\")`\n+   |\n+   = note: `-D clippy::manual-ok-or` implied by `-D warnings`\n+\n+error: this pattern reimplements `Option::ok_or`\n+  --> $DIR/manual_ok_or.rs:14:5\n+   |\n+LL |     foo.map_or(Err(\"error\"), Ok);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `foo.ok_or(\"error\")`\n+\n+error: this pattern reimplements `Option::ok_or`\n+  --> $DIR/manual_ok_or.rs:17:5\n+   |\n+LL |     None::<i32>.map_or(Err(\"error\"), |v| Ok(v));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `None::<i32>.ok_or(\"error\")`\n+\n+error: this pattern reimplements `Option::ok_or`\n+  --> $DIR/manual_ok_or.rs:21:5\n+   |\n+LL | /     foo.map_or(Err::<i32, &str>(\n+LL | |         &format!(\n+LL | |             \"{}{}{}{}{}{}{}\",\n+LL | |             \"Alice\", \"Bob\", \"Sarah\", \"Marc\", \"Sandra\", \"Eric\", \"Jenifer\")\n+LL | |         ),\n+LL | |         |v| Ok(v),\n+LL | |     );\n+   | |_____^\n+   |\n+help: replace with\n+   |\n+LL |     foo.ok_or(&format!(\n+LL |         \"{}{}{}{}{}{}{}\",\n+LL |         \"Alice\", \"Bob\", \"Sarah\", \"Marc\", \"Sandra\", \"Eric\", \"Jenifer\"));\n+   |\n+\n+error: aborting due to 4 previous errors\n+"}]}