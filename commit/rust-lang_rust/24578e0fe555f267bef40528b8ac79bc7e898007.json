{"sha": "24578e0fe555f267bef40528b8ac79bc7e898007", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0NTc4ZTBmZTU1NWYyNjdiZWY0MDUyOGI4YWM3OWJjN2U4OTgwMDc=", "commit": {"author": {"name": "Kevin Butler", "email": "haqkrs@gmail.com", "date": "2015-11-12T02:43:43Z"}, "committer": {"name": "Kevin Butler", "email": "haqkrs@gmail.com", "date": "2016-01-16T00:57:12Z"}, "message": "libsyntax: accept only whitespace with the PATTERN_WHITE_SPACE property\n\nThis aligns with unicode recommendations and should be stable for all future\nunicode releases. See http://unicode.org/reports/tr31/#R3.\n\nThis renames `libsyntax::lexer::is_whitespace` to `is_pattern_whitespace`\nso potentially breaks users of libsyntax.", "tree": {"sha": "336f724d68ee4dc447ced71e23636de956d16870", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/336f724d68ee4dc447ced71e23636de956d16870"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/24578e0fe555f267bef40528b8ac79bc7e898007", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/24578e0fe555f267bef40528b8ac79bc7e898007", "html_url": "https://github.com/rust-lang/rust/commit/24578e0fe555f267bef40528b8ac79bc7e898007", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/24578e0fe555f267bef40528b8ac79bc7e898007/comments", "author": {"login": "Ryman", "id": 994978, "node_id": "MDQ6VXNlcjk5NDk3OA==", "avatar_url": "https://avatars.githubusercontent.com/u/994978?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ryman", "html_url": "https://github.com/Ryman", "followers_url": "https://api.github.com/users/Ryman/followers", "following_url": "https://api.github.com/users/Ryman/following{/other_user}", "gists_url": "https://api.github.com/users/Ryman/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ryman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ryman/subscriptions", "organizations_url": "https://api.github.com/users/Ryman/orgs", "repos_url": "https://api.github.com/users/Ryman/repos", "events_url": "https://api.github.com/users/Ryman/events{/privacy}", "received_events_url": "https://api.github.com/users/Ryman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Ryman", "id": 994978, "node_id": "MDQ6VXNlcjk5NDk3OA==", "avatar_url": "https://avatars.githubusercontent.com/u/994978?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ryman", "html_url": "https://github.com/Ryman", "followers_url": "https://api.github.com/users/Ryman/followers", "following_url": "https://api.github.com/users/Ryman/following{/other_user}", "gists_url": "https://api.github.com/users/Ryman/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ryman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ryman/subscriptions", "organizations_url": "https://api.github.com/users/Ryman/orgs", "repos_url": "https://api.github.com/users/Ryman/repos", "events_url": "https://api.github.com/users/Ryman/events{/privacy}", "received_events_url": "https://api.github.com/users/Ryman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e3e43f3f6bb0d87da5f5b7fd92db0cc990e62a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e3e43f3f6bb0d87da5f5b7fd92db0cc990e62a3", "html_url": "https://github.com/rust-lang/rust/commit/9e3e43f3f6bb0d87da5f5b7fd92db0cc990e62a3"}], "stats": {"total": 93, "additions": 57, "deletions": 36}, "files": [{"sha": "1ccc45113b4ff57f025b0ae9fe9b39a394e25d10", "filename": "mk/crates.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/24578e0fe555f267bef40528b8ac79bc7e898007/mk%2Fcrates.mk", "raw_url": "https://github.com/rust-lang/rust/raw/24578e0fe555f267bef40528b8ac79bc7e898007/mk%2Fcrates.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcrates.mk?ref=24578e0fe555f267bef40528b8ac79bc7e898007", "patch": "@@ -86,7 +86,7 @@ DEPS_serialize := std log\n DEPS_term := std log\n DEPS_test := std getopts serialize rbml term native:rust_test_helpers\n \n-DEPS_syntax := std term serialize log arena libc rustc_bitflags\n+DEPS_syntax := std term serialize log arena libc rustc_bitflags rustc_unicode\n DEPS_syntax_ext := syntax fmt_macros\n \n DEPS_rustc := syntax fmt_macros flate arena serialize getopts rbml rustc_front\\"}, {"sha": "5a7632868e467202379324d00f36931ed15e583a", "filename": "src/etc/unicode.py", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/24578e0fe555f267bef40528b8ac79bc7e898007/src%2Fetc%2Funicode.py", "raw_url": "https://github.com/rust-lang/rust/raw/24578e0fe555f267bef40528b8ac79bc7e898007/src%2Fetc%2Funicode.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Funicode.py?ref=24578e0fe555f267bef40528b8ac79bc7e898007", "patch": "@@ -398,7 +398,7 @@ def emit_norm_module(f, canon, compat, combine, norm_props):\n         derived = load_properties(\"DerivedCoreProperties.txt\", want_derived)\n         scripts = load_properties(\"Scripts.txt\", [])\n         props = load_properties(\"PropList.txt\",\n-                [\"White_Space\", \"Join_Control\", \"Noncharacter_Code_Point\"])\n+                [\"White_Space\", \"Join_Control\", \"Noncharacter_Code_Point\", \"Pattern_White_Space\"])\n         norm_props = load_properties(\"DerivedNormalizationProps.txt\",\n                      [\"Full_Composition_Exclusion\"])\n \n@@ -408,7 +408,7 @@ def emit_norm_module(f, canon, compat, combine, norm_props):\n         # category tables\n         for (name, cat, pfuns) in (\"general_category\", gencats, [\"N\", \"Cc\"]), \\\n                                   (\"derived_property\", derived, want_derived), \\\n-                                  (\"property\", props, [\"White_Space\"]):\n+                                  (\"property\", props, [\"White_Space\", \"Pattern_White_Space\"]):\n             emit_property_module(rf, name, cat, pfuns)\n \n         # normalizations and conversions module"}, {"sha": "d0b0c9ba5a528d96b0dca37b6e7290713c7f63f5", "filename": "src/librustc_unicode/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/24578e0fe555f267bef40528b8ac79bc7e898007/src%2Flibrustc_unicode%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24578e0fe555f267bef40528b8ac79bc7e898007/src%2Flibrustc_unicode%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_unicode%2Flib.rs?ref=24578e0fe555f267bef40528b8ac79bc7e898007", "patch": "@@ -50,3 +50,8 @@ pub mod str {\n pub mod derived_property {\n     pub use tables::derived_property::{Cased, Case_Ignorable};\n }\n+\n+// For use in libsyntax\n+pub mod property {\n+    pub use tables::property::Pattern_White_Space;\n+}"}, {"sha": "ad17016eae8cbb8b4b6ce47c2b19e129b3cd1c7d", "filename": "src/librustc_unicode/tables.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/24578e0fe555f267bef40528b8ac79bc7e898007/src%2Flibrustc_unicode%2Ftables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24578e0fe555f267bef40528b8ac79bc7e898007/src%2Flibrustc_unicode%2Ftables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_unicode%2Ftables.rs?ref=24578e0fe555f267bef40528b8ac79bc7e898007", "patch": "@@ -1180,6 +1180,15 @@ pub mod derived_property {\n }\n \n pub mod property {\n+    pub const Pattern_White_Space_table: &'static [(char, char)] = &[\n+        ('\\u{9}', '\\u{d}'), ('\\u{20}', '\\u{20}'), ('\\u{85}', '\\u{85}'), ('\\u{200e}', '\\u{200f}'),\n+        ('\\u{2028}', '\\u{2029}')\n+    ];\n+\n+    pub fn Pattern_White_Space(c: char) -> bool {\n+        super::bsearch_range_table(c, Pattern_White_Space_table)\n+    }\n+\n     pub const White_Space_table: &'static [(char, char)] = &[\n         ('\\u{9}', '\\u{d}'), ('\\u{20}', '\\u{20}'), ('\\u{85}', '\\u{85}'), ('\\u{a0}', '\\u{a0}'),\n         ('\\u{1680}', '\\u{1680}'), ('\\u{2000}', '\\u{200a}'), ('\\u{2028}', '\\u{2029}'), ('\\u{202f}',"}, {"sha": "6fe741794cfccb4ac4483b7f749927db0bbaf9d0", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/24578e0fe555f267bef40528b8ac79bc7e898007/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24578e0fe555f267bef40528b8ac79bc7e898007/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=24578e0fe555f267bef40528b8ac79bc7e898007", "patch": "@@ -37,6 +37,7 @@ extern crate term;\n extern crate libc;\n #[macro_use] extern crate log;\n #[macro_use] #[no_link] extern crate rustc_bitflags;\n+extern crate rustc_unicode;\n \n extern crate serialize as rustc_serialize; // used by deriving\n "}, {"sha": "629edced804f51f015f88e89989caa5fc294a485", "filename": "src/libsyntax/parse/lexer/comments.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/24578e0fe555f267bef40528b8ac79bc7e898007/src%2Flibsyntax%2Fparse%2Flexer%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24578e0fe555f267bef40528b8ac79bc7e898007/src%2Flibsyntax%2Fparse%2Flexer%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fcomments.rs?ref=24578e0fe555f267bef40528b8ac79bc7e898007", "patch": "@@ -15,7 +15,7 @@ use codemap::{BytePos, CharPos, CodeMap, Pos};\n use errors;\n use parse::lexer::is_block_doc_comment;\n use parse::lexer::{StringReader, TokenAndSpan};\n-use parse::lexer::{is_whitespace, Reader};\n+use parse::lexer::{is_pattern_whitespace, Reader};\n use parse::lexer;\n use print::pprust;\n use str::char_at;\n@@ -153,7 +153,7 @@ fn push_blank_line_comment(rdr: &StringReader, comments: &mut Vec<Comment>) {\n }\n \n fn consume_whitespace_counting_blank_lines(rdr: &mut StringReader, comments: &mut Vec<Comment>) {\n-    while is_whitespace(rdr.curr) && !rdr.is_eof() {\n+    while is_pattern_whitespace(rdr.curr) && !rdr.is_eof() {\n         if rdr.col == CharPos(0) && rdr.curr_is('\\n') {\n             push_blank_line_comment(rdr, &mut *comments);\n         }"}, {"sha": "88a876cac73d6e871b1d19f8850b8d83c40902c4", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/24578e0fe555f267bef40528b8ac79bc7e898007/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24578e0fe555f267bef40528b8ac79bc7e898007/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=24578e0fe555f267bef40528b8ac79bc7e898007", "patch": "@@ -16,6 +16,7 @@ use ext::tt::transcribe::tt_next_token;\n use parse::token::str_to_ident;\n use parse::token;\n use str::char_at;\n+use rustc_unicode::property::Pattern_White_Space;\n \n use std::borrow::Cow;\n use std::char;\n@@ -546,10 +547,10 @@ impl<'a> StringReader<'a> {\n                 let c = self.scan_comment();\n                 debug!(\"scanning a comment {:?}\", c);\n                 c\n-            }\n-            c if is_whitespace(Some(c)) => {\n+            },\n+            c if is_pattern_whitespace(Some(c)) => {\n                 let start_bpos = self.last_pos;\n-                while is_whitespace(self.curr) {\n+                while is_pattern_whitespace(self.curr) {\n                     self.bump();\n                 }\n                 let c = Some(TokenAndSpan {\n@@ -1435,7 +1436,7 @@ impl<'a> StringReader<'a> {\n     }\n \n     fn consume_whitespace(&mut self) {\n-        while is_whitespace(self.curr) && !self.is_eof() {\n+        while is_pattern_whitespace(self.curr) && !self.is_eof() {\n             self.bump();\n         }\n     }\n@@ -1460,7 +1461,7 @@ impl<'a> StringReader<'a> {\n     }\n \n     fn consume_non_eol_whitespace(&mut self) {\n-        while is_whitespace(self.curr) && !self.curr_is('\\n') && !self.is_eof() {\n+        while is_pattern_whitespace(self.curr) && !self.curr_is('\\n') && !self.is_eof() {\n             self.bump();\n         }\n     }\n@@ -1591,8 +1592,10 @@ impl<'a> StringReader<'a> {\n     }\n }\n \n-pub fn is_whitespace(c: Option<char>) -> bool {\n-    c.map_or(false, char::is_whitespace)\n+// This tests the character for the unicode property 'PATTERN_WHITE_SPACE' which\n+// is guaranteed to be forward compatible. http://unicode.org/reports/tr31/#R3\n+pub fn is_pattern_whitespace(c: Option<char>) -> bool {\n+    c.map_or(false, Pattern_White_Space)\n }\n \n fn in_range(c: Option<char>, lo: char, hi: char) -> bool {"}, {"sha": "a78950e959f990abb6ed154b1b33fdfc598eaed0", "filename": "src/libsyntax/util/parser_testing.rs", "status": "modified", "additions": 19, "deletions": 20, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/24578e0fe555f267bef40528b8ac79bc7e898007/src%2Flibsyntax%2Futil%2Fparser_testing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24578e0fe555f267bef40528b8ac79bc7e898007/src%2Flibsyntax%2Futil%2Fparser_testing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fparser_testing.rs?ref=24578e0fe555f267bef40528b8ac79bc7e898007", "patch": "@@ -10,7 +10,7 @@\n \n use ast;\n use parse::{ParseSess,PResult,filemap_to_tts};\n-use parse::new_parser_from_source_str;\n+use parse::{lexer, new_parser_from_source_str};\n use parse::parser::Parser;\n use parse::token;\n use ptr::P;\n@@ -97,8 +97,8 @@ pub fn matches_codepattern(a : &str, b : &str) -> bool {\n         let (a, b) = match (a_iter.peek(), b_iter.peek()) {\n             (None, None) => return true,\n             (None, _) => return false,\n-            (Some(a), None) => {\n-                if a.is_whitespace() {\n+            (Some(&a), None) => {\n+                if is_pattern_whitespace(a) {\n                     break // trailing whitespace check is out of loop for borrowck\n                 } else {\n                     return false\n@@ -107,11 +107,11 @@ pub fn matches_codepattern(a : &str, b : &str) -> bool {\n             (Some(&a), Some(&b)) => (a, b)\n         };\n \n-        if a.is_whitespace() && b.is_whitespace() {\n+        if is_pattern_whitespace(a) && is_pattern_whitespace(b) {\n             // skip whitespace for a and b\n             scan_for_non_ws_or_end(&mut a_iter);\n             scan_for_non_ws_or_end(&mut b_iter);\n-        } else if a.is_whitespace() {\n+        } else if is_pattern_whitespace(a) {\n             // skip whitespace for a\n             scan_for_non_ws_or_end(&mut a_iter);\n         } else if a == b {\n@@ -123,23 +123,18 @@ pub fn matches_codepattern(a : &str, b : &str) -> bool {\n     }\n \n     // check if a has *only* trailing whitespace\n-    a_iter.all(|c| c.is_whitespace())\n+    a_iter.all(is_pattern_whitespace)\n }\n \n /// Advances the given peekable `Iterator` until it reaches a non-whitespace character\n fn scan_for_non_ws_or_end<I: Iterator<Item= char>>(iter: &mut Peekable<I>) {\n-    loop {\n-        match iter.peek() {\n-            Some(c) if c.is_whitespace() => {} // fall through; borrowck\n-            _ => return\n-        }\n-\n+    while lexer::is_pattern_whitespace(iter.peek().cloned()) {\n         iter.next();\n     }\n }\n \n-pub fn is_whitespace(c: char) -> bool {\n-    c.is_whitespace()\n+pub fn is_pattern_whitespace(c: char) -> bool {\n+    lexer::is_pattern_whitespace(Some(c))\n }\n \n #[cfg(test)]\n@@ -162,14 +157,18 @@ mod tests {\n     }\n \n     #[test]\n-    fn more_whitespace() {\n+    fn pattern_whitespace() {\n         assert_eq!(matches_codepattern(\"\",\"\\x0C\"), false);\n-        assert_eq!(matches_codepattern(\"a b\",\"a\\u{2002}b\"),true);\n         assert_eq!(matches_codepattern(\"a b \",\"a   \\u{0085}\\n\\t\\r  b\"),true);\n         assert_eq!(matches_codepattern(\"a b\",\"a   \\u{0085}\\n\\t\\r  b \"),false);\n-        assert_eq!(matches_codepattern(\"a   b\",\"a\\u{2002}b\"),true);\n-        assert_eq!(matches_codepattern(\"ab\",\"a\\u{2003}b\"),false);\n-        assert_eq!(matches_codepattern(\"a  \\u{3000}b\",\"ab\"),true);\n-        assert_eq!(matches_codepattern(\"\\u{205F}a   b\",\"ab\"),true);\n+    }\n+\n+    #[test]\n+    fn non_pattern_whitespace() {\n+        // These have the property 'White_Space' but not 'Pattern_White_Space'\n+        assert_eq!(matches_codepattern(\"a b\",\"a\\u{2002}b\"), false);\n+        assert_eq!(matches_codepattern(\"a   b\",\"a\\u{2002}b\"), false);\n+        assert_eq!(matches_codepattern(\"\\u{205F}a   b\",\"ab\"), false);\n+        assert_eq!(matches_codepattern(\"a  \\u{3000}b\",\"ab\"), false);\n     }\n }"}, {"sha": "837bb8339e1d14de183022feda8b90d0360eb44d", "filename": "src/test/run-pass/parser-unicode-whitespace.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/24578e0fe555f267bef40528b8ac79bc7e898007/src%2Ftest%2Frun-pass%2Fparser-unicode-whitespace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24578e0fe555f267bef40528b8ac79bc7e898007/src%2Ftest%2Frun-pass%2Fparser-unicode-whitespace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fparser-unicode-whitespace.rs?ref=24578e0fe555f267bef40528b8ac79bc7e898007", "patch": "@@ -9,10 +9,14 @@\n // except according to those terms.\n \n \n-// Beware editing: it has numerous whitespace characters which are important\n+// Beware editing: it has numerous whitespace characters which are important.\n+// It contains one ranges from the 'PATTERN_WHITE_SPACE' property outlined in\n+// http://unicode.org/Public/UNIDATA/PropList.txt\n+//\n+// The characters in the first expression of the assertion can be generated\n+// from: \"4\\u{0C}+\\n\\t\\r7\\t*\\u{20}2\\u{85}/\\u{200E}3\\u{200F}*\\u{2028}2\\u{2029}\"\n pub fn main() {\n-    assert_eq!(4 + \u30007 * 2\n-\n+assert_eq!(4\f+\n \n-/\u20083\u200a*\u202f2\u2007, 4 + 7 * 2 / 3 * 2);\n+7   * 2\u0085/\u200e3\u200f*\u20282\u2029, 4 + 7 * 2 / 3 * 2);\n }"}]}