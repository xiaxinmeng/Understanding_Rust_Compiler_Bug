{"sha": "27ae2f0d60d9201133e1f9ec7a04c05c8e55e665", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3YWUyZjBkNjBkOTIwMTEzM2UxZjllYzdhMDRjMDVjOGU1NWU2NjU=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2020-05-06T02:29:00Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2020-05-06T04:15:08Z"}, "message": "Shrink `LocalDecl` by 56 bytes.\n\nBy boxing `local_info`.", "tree": {"sha": "17647ba8dd14a98c296c01cc773362cb7588514a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17647ba8dd14a98c296c01cc773362cb7588514a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/27ae2f0d60d9201133e1f9ec7a04c05c8e55e665", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/27ae2f0d60d9201133e1f9ec7a04c05c8e55e665", "html_url": "https://github.com/rust-lang/rust/commit/27ae2f0d60d9201133e1f9ec7a04c05c8e55e665", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/27ae2f0d60d9201133e1f9ec7a04c05c8e55e665/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cda162727893f87ce510ab1832254040e6945bd7", "url": "https://api.github.com/repos/rust-lang/rust/commits/cda162727893f87ce510ab1832254040e6945bd7", "html_url": "https://github.com/rust-lang/rust/commit/cda162727893f87ce510ab1832254040e6945bd7"}], "stats": {"total": 92, "additions": 46, "deletions": 46}, "files": [{"sha": "0c1b99d871e244c19d4d3e3650c49416f28052c8", "filename": "src/librustc_middle/mir/mod.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/27ae2f0d60d9201133e1f9ec7a04c05c8e55e665/src%2Flibrustc_middle%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27ae2f0d60d9201133e1f9ec7a04c05c8e55e665/src%2Flibrustc_middle%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Fmod.rs?ref=27ae2f0d60d9201133e1f9ec7a04c05c8e55e665", "patch": "@@ -696,7 +696,7 @@ pub struct LocalDecl<'tcx> {\n     pub mutability: Mutability,\n \n     // FIXME(matthewjasper) Don't store in this in `Body`\n-    pub local_info: LocalInfo<'tcx>,\n+    pub local_info: Option<Box<LocalInfo<'tcx>>>,\n \n     /// `true` if this is an internal local.\n     ///\n@@ -818,9 +818,11 @@ pub struct LocalDecl<'tcx> {\n \n // `LocalDecl` is used a lot. Make sure it doesn't unintentionally get bigger.\n #[cfg(target_arch = \"x86_64\")]\n-static_assert_size!(LocalDecl<'_>, 128);\n+static_assert_size!(LocalDecl<'_>, 72);\n \n-/// Extra information about a local that's used for diagnostics.\n+/// Extra information about a some locals that's used for diagnostics. (Not\n+/// used for non-StaticRef temporaries, the return place, or anonymous function\n+/// parameters.)\n #[derive(Clone, Debug, RustcEncodable, RustcDecodable, HashStable, TypeFoldable)]\n pub enum LocalInfo<'tcx> {\n     /// A user-defined local variable or function parameter\n@@ -831,8 +833,6 @@ pub enum LocalInfo<'tcx> {\n     User(ClearCrossCrate<BindingForm<'tcx>>),\n     /// A temporary created that references the static with the given `DefId`.\n     StaticRef { def_id: DefId, is_thread_local: bool },\n-    /// Any other temporary, the return place, or an anonymous function parameter.\n-    Other,\n }\n \n impl<'tcx> LocalDecl<'tcx> {\n@@ -844,16 +844,16 @@ impl<'tcx> LocalDecl<'tcx> {\n     /// - or `match ... { C(x) => ... }`\n     pub fn can_be_made_mutable(&self) -> bool {\n         match self.local_info {\n-            LocalInfo::User(ClearCrossCrate::Set(BindingForm::Var(VarBindingForm {\n+            Some(box LocalInfo::User(ClearCrossCrate::Set(BindingForm::Var(VarBindingForm {\n                 binding_mode: ty::BindingMode::BindByValue(_),\n                 opt_ty_info: _,\n                 opt_match_place: _,\n                 pat_span: _,\n-            }))) => true,\n+            })))) => true,\n \n-            LocalInfo::User(ClearCrossCrate::Set(BindingForm::ImplicitSelf(\n+            Some(box LocalInfo::User(ClearCrossCrate::Set(BindingForm::ImplicitSelf(\n                 ImplicitSelfKind::Imm,\n-            ))) => true,\n+            )))) => true,\n \n             _ => false,\n         }\n@@ -864,14 +864,14 @@ impl<'tcx> LocalDecl<'tcx> {\n     /// mutable bindings, but the inverse does not necessarily hold).\n     pub fn is_nonref_binding(&self) -> bool {\n         match self.local_info {\n-            LocalInfo::User(ClearCrossCrate::Set(BindingForm::Var(VarBindingForm {\n+            Some(box LocalInfo::User(ClearCrossCrate::Set(BindingForm::Var(VarBindingForm {\n                 binding_mode: ty::BindingMode::BindByValue(_),\n                 opt_ty_info: _,\n                 opt_match_place: _,\n                 pat_span: _,\n-            }))) => true,\n+            })))) => true,\n \n-            LocalInfo::User(ClearCrossCrate::Set(BindingForm::ImplicitSelf(_))) => true,\n+            Some(box LocalInfo::User(ClearCrossCrate::Set(BindingForm::ImplicitSelf(_)))) => true,\n \n             _ => false,\n         }\n@@ -882,7 +882,7 @@ impl<'tcx> LocalDecl<'tcx> {\n     #[inline]\n     pub fn is_user_variable(&self) -> bool {\n         match self.local_info {\n-            LocalInfo::User(_) => true,\n+            Some(box LocalInfo::User(_)) => true,\n             _ => false,\n         }\n     }\n@@ -892,7 +892,7 @@ impl<'tcx> LocalDecl<'tcx> {\n     /// match arm.\n     pub fn is_ref_for_guard(&self) -> bool {\n         match self.local_info {\n-            LocalInfo::User(ClearCrossCrate::Set(BindingForm::RefForGuard)) => true,\n+            Some(box LocalInfo::User(ClearCrossCrate::Set(BindingForm::RefForGuard))) => true,\n             _ => false,\n         }\n     }\n@@ -901,7 +901,7 @@ impl<'tcx> LocalDecl<'tcx> {\n     /// access that static\n     pub fn is_ref_to_static(&self) -> bool {\n         match self.local_info {\n-            LocalInfo::StaticRef { .. } => true,\n+            Some(box LocalInfo::StaticRef { .. }) => true,\n             _ => false,\n         }\n     }\n@@ -910,7 +910,7 @@ impl<'tcx> LocalDecl<'tcx> {\n     /// access that static\n     pub fn is_ref_to_thread_local(&self) -> bool {\n         match self.local_info {\n-            LocalInfo::StaticRef { is_thread_local, .. } => is_thread_local,\n+            Some(box LocalInfo::StaticRef { is_thread_local, .. }) => is_thread_local,\n             _ => false,\n         }\n     }\n@@ -933,7 +933,7 @@ impl<'tcx> LocalDecl<'tcx> {\n     pub fn with_source_info(ty: Ty<'tcx>, source_info: SourceInfo) -> Self {\n         LocalDecl {\n             mutability: Mutability::Mut,\n-            local_info: LocalInfo::Other,\n+            local_info: None,\n             internal: false,\n             is_block_tail: None,\n             ty,"}, {"sha": "9eb55bca868590aedb352c2a976a9e60c89b53f0", "filename": "src/librustc_mir/borrow_check/diagnostics/conflict_errors.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/27ae2f0d60d9201133e1f9ec7a04c05c8e55e665/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27ae2f0d60d9201133e1f9ec7a04c05c8e55e665/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs?ref=27ae2f0d60d9201133e1f9ec7a04c05c8e55e665", "patch": "@@ -1448,15 +1448,15 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         let (place_description, assigned_span) = match local_decl {\n             Some(LocalDecl {\n                 local_info:\n-                    LocalInfo::User(\n+                    Some(box LocalInfo::User(\n                         ClearCrossCrate::Clear\n                         | ClearCrossCrate::Set(BindingForm::Var(VarBindingForm {\n                             opt_match_place: None,\n                             ..\n                         })),\n-                    )\n-                    | LocalInfo::StaticRef { .. }\n-                    | LocalInfo::Other,\n+                    ))\n+                    | Some(box LocalInfo::StaticRef { .. })\n+                    | None,\n                 ..\n             })\n             | None => (self.describe_any_place(place.as_ref()), assigned_span),"}, {"sha": "c218e3906fff2fa84220b9e2202b5fd94127fcc4", "filename": "src/librustc_mir/borrow_check/diagnostics/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27ae2f0d60d9201133e1f9ec7a04c05c8e55e665/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27ae2f0d60d9201133e1f9ec7a04c05c8e55e665/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmod.rs?ref=27ae2f0d60d9201133e1f9ec7a04c05c8e55e665", "patch": "@@ -202,7 +202,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 if self.body.local_decls[local].is_ref_to_static() =>\n             {\n                 let local_info = &self.body.local_decls[local].local_info;\n-                if let LocalInfo::StaticRef { def_id, .. } = *local_info {\n+                if let Some(box LocalInfo::StaticRef { def_id, .. }) = *local_info {\n                     buf.push_str(&self.infcx.tcx.item_name(def_id).as_str());\n                 } else {\n                     unreachable!();"}, {"sha": "ddaf78626f2c25be69a378e970b624dc5ab4e0a0", "filename": "src/librustc_mir/borrow_check/diagnostics/move_errors.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/27ae2f0d60d9201133e1f9ec7a04c05c8e55e665/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27ae2f0d60d9201133e1f9ec7a04c05c8e55e665/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmove_errors.rs?ref=27ae2f0d60d9201133e1f9ec7a04c05c8e55e665", "patch": "@@ -103,14 +103,14 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                         //\n                         // opt_match_place is None for let [mut] x = ... statements,\n                         // whether or not the right-hand side is a place expression\n-                        if let LocalInfo::User(ClearCrossCrate::Set(BindingForm::Var(\n+                        if let Some(box LocalInfo::User(ClearCrossCrate::Set(BindingForm::Var(\n                             VarBindingForm {\n                                 opt_match_place: Some((opt_match_place, match_span)),\n                                 binding_mode: _,\n                                 opt_ty_info: _,\n                                 pat_span: _,\n                             },\n-                        ))) = local_decl.local_info\n+                        )))) = local_decl.local_info\n                         {\n                             let stmt_source_info = self.body.source_info(location);\n                             self.append_binding_error(\n@@ -482,10 +482,10 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n         let mut suggestions: Vec<(Span, &str, String)> = Vec::new();\n         for local in binds_to {\n             let bind_to = &self.body.local_decls[*local];\n-            if let LocalInfo::User(ClearCrossCrate::Set(BindingForm::Var(VarBindingForm {\n+            if let Some(box LocalInfo::User(ClearCrossCrate::Set(BindingForm::Var(VarBindingForm {\n                 pat_span,\n                 ..\n-            }))) = bind_to.local_info\n+            })))) = bind_to.local_info\n             {\n                 if let Ok(pat_snippet) = self.infcx.tcx.sess.source_map().span_to_snippet(pat_span)\n                 {"}, {"sha": "402eac47c462bdfdaf84f56cb6a46a5befed80e8", "filename": "src/librustc_mir/borrow_check/diagnostics/mutability_errors.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/27ae2f0d60d9201133e1f9ec7a04c05c8e55e665/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27ae2f0d60d9201133e1f9ec7a04c05c8e55e665/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs?ref=27ae2f0d60d9201133e1f9ec7a04c05c8e55e665", "patch": "@@ -85,7 +85,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                 } else {\n                     item_msg = format!(\"`{}`\", access_place_desc.unwrap());\n                     let local_info = &self.body.local_decls[local].local_info;\n-                    if let LocalInfo::StaticRef { def_id, .. } = *local_info {\n+                    if let Some(box LocalInfo::StaticRef { def_id, .. }) = *local_info {\n                         let static_name = &self.infcx.tcx.item_name(def_id);\n                         reason = format!(\", as `{}` is an immutable static item\", static_name);\n                     } else {\n@@ -216,9 +216,9 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                         .local_decls\n                         .get(local)\n                         .map(|local_decl| {\n-                            if let LocalInfo::User(ClearCrossCrate::Set(\n+                            if let Some(box LocalInfo::User(ClearCrossCrate::Set(\n                                 mir::BindingForm::ImplicitSelf(kind),\n-                            )) = local_decl.local_info\n+                            ))) = local_decl.local_info\n                             {\n                                 // Check if the user variable is a `&mut self` and we can therefore\n                                 // suggest removing the `&mut`.\n@@ -340,16 +340,16 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n \n                 match self.local_names[local] {\n                     Some(name) if !local_decl.from_compiler_desugaring() => {\n-                        let label = match local_decl.local_info {\n-                            LocalInfo::User(ClearCrossCrate::Set(\n+                        let label = match local_decl.local_info.as_ref().unwrap() {\n+                            box LocalInfo::User(ClearCrossCrate::Set(\n                                 mir::BindingForm::ImplicitSelf(_),\n                             )) => {\n                                 let (span, suggestion) =\n                                     suggest_ampmut_self(self.infcx.tcx, local_decl);\n                                 Some((true, span, suggestion))\n                             }\n \n-                            LocalInfo::User(ClearCrossCrate::Set(mir::BindingForm::Var(\n+                            box LocalInfo::User(ClearCrossCrate::Set(mir::BindingForm::Var(\n                                 mir::VarBindingForm {\n                                     binding_mode: ty::BindingMode::BindByValue(_),\n                                     opt_ty_info,\n@@ -381,14 +381,14 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                                             self.infcx.tcx,\n                                             local_decl,\n                                             opt_assignment_rhs_span,\n-                                            opt_ty_info,\n+                                            *opt_ty_info,\n                                         );\n                                         Some((true, span, suggestion))\n                                     }\n                                 }\n                             }\n \n-                            LocalInfo::User(ClearCrossCrate::Set(mir::BindingForm::Var(\n+                            box LocalInfo::User(ClearCrossCrate::Set(mir::BindingForm::Var(\n                                 mir::VarBindingForm {\n                                     binding_mode: ty::BindingMode::BindByReference(_),\n                                     ..\n@@ -399,7 +399,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                                     .map(|replacement| (true, pattern_span, replacement))\n                             }\n \n-                            LocalInfo::User(ClearCrossCrate::Clear) => {\n+                            box LocalInfo::User(ClearCrossCrate::Clear) => {\n                                 bug!(\"saw cleared local state\")\n                             }\n "}, {"sha": "10cf47d47ffc731db364491869609a37c074314e", "filename": "src/librustc_mir/transform/check_consts/validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27ae2f0d60d9201133e1f9ec7a04c05c8e55e665/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27ae2f0d60d9201133e1f9ec7a04c05c8e55e665/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=27ae2f0d60d9201133e1f9ec7a04c05c8e55e665", "patch": "@@ -456,7 +456,7 @@ impl Visitor<'tcx> for Validator<'mir, 'tcx> {\n                     if proj_base.is_empty() {\n                         if let (local, []) = (place_local, proj_base) {\n                             let decl = &self.body.local_decls[local];\n-                            if let LocalInfo::StaticRef { def_id, .. } = decl.local_info {\n+                            if let Some(box LocalInfo::StaticRef { def_id, .. }) = decl.local_info {\n                                 let span = decl.source_info.span;\n                                 self.check_static(def_id, span);\n                                 return;"}, {"sha": "0bd9b3e1b20842d39e5b05334548b2454c386d67", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27ae2f0d60d9201133e1f9ec7a04c05c8e55e665/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27ae2f0d60d9201133e1f9ec7a04c05c8e55e665/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=27ae2f0d60d9201133e1f9ec7a04c05c8e55e665", "patch": "@@ -218,7 +218,7 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n             if let [] = proj_base {\n                 let decl = &self.body.local_decls[place.local];\n                 if decl.internal {\n-                    if let LocalInfo::StaticRef { def_id, .. } = decl.local_info {\n+                    if let Some(box LocalInfo::StaticRef { def_id, .. }) = decl.local_info {\n                         if self.tcx.is_mutable_static(def_id) {\n                             self.require_unsafe(\n                                 \"use of mutable static\","}, {"sha": "50bd5a73e25807cf6137bb5578073566607d4846", "filename": "src/librustc_mir_build/build/expr/as_temp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27ae2f0d60d9201133e1f9ec7a04c05c8e55e665/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_temp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27ae2f0d60d9201133e1f9ec7a04c05c8e55e665/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_temp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_temp.rs?ref=27ae2f0d60d9201133e1f9ec7a04c05c8e55e665", "patch": "@@ -61,7 +61,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             if let ExprKind::StaticRef { def_id, .. } = expr.kind {\n                 let is_thread_local = this.hir.tcx().is_thread_local_static(def_id);\n                 local_decl.internal = true;\n-                local_decl.local_info = LocalInfo::StaticRef { def_id, is_thread_local };\n+                local_decl.local_info = Some(box LocalInfo::StaticRef { def_id, is_thread_local });\n             }\n             this.local_decls.push(local_decl)\n         };"}, {"sha": "7812848e926667e8916a69dc70dd9115a7943cea", "filename": "src/librustc_mir_build/build/matches/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/27ae2f0d60d9201133e1f9ec7a04c05c8e55e665/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27ae2f0d60d9201133e1f9ec7a04c05c8e55e665/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Fmod.rs?ref=27ae2f0d60d9201133e1f9ec7a04c05c8e55e665", "patch": "@@ -470,9 +470,9 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 for binding in &candidate_ref.bindings {\n                     let local = self.var_local_id(binding.var_id, OutsideGuard);\n \n-                    if let LocalInfo::User(ClearCrossCrate::Set(BindingForm::Var(\n+                    if let Some(box LocalInfo::User(ClearCrossCrate::Set(BindingForm::Var(\n                         VarBindingForm { opt_match_place: Some((ref mut match_place, _)), .. },\n-                    ))) = self.local_decls[local].local_info\n+                    )))) = self.local_decls[local].local_info\n                     {\n                         *match_place = Some(initializer);\n                     } else {\n@@ -1953,7 +1953,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             source_info,\n             internal: false,\n             is_block_tail: None,\n-            local_info: LocalInfo::User(ClearCrossCrate::Set(BindingForm::Var(VarBindingForm {\n+            local_info: Some(box LocalInfo::User(ClearCrossCrate::Set(BindingForm::Var(VarBindingForm {\n                 binding_mode,\n                 // hypothetically, `visit_bindings` could try to unzip\n                 // an outermost hir::Ty as we descend, matching up\n@@ -1962,7 +1962,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 opt_ty_info: None,\n                 opt_match_place,\n                 pat_span,\n-            }))),\n+            })))),\n         };\n         let for_arm_body = self.local_decls.push(local);\n         self.var_debug_info.push(VarDebugInfo {\n@@ -1980,7 +1980,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 source_info,\n                 internal: false,\n                 is_block_tail: None,\n-                local_info: LocalInfo::User(ClearCrossCrate::Set(BindingForm::RefForGuard)),\n+                local_info: Some(box LocalInfo::User(ClearCrossCrate::Set(BindingForm::RefForGuard))),\n             });\n             self.var_debug_info.push(VarDebugInfo {\n                 name,"}, {"sha": "6c61c27c4ed7fda49bc099abec55a4065e35f1fd", "filename": "src/librustc_mir_build/build/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/27ae2f0d60d9201133e1f9ec7a04c05c8e55e665/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27ae2f0d60d9201133e1f9ec7a04c05c8e55e665/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs?ref=27ae2f0d60d9201133e1f9ec7a04c05c8e55e665", "patch": "@@ -909,17 +909,17 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         self.local_decls[local].mutability = mutability;\n                         self.local_decls[local].source_info.scope = self.source_scope;\n                         self.local_decls[local].local_info = if let Some(kind) = self_binding {\n-                            LocalInfo::User(ClearCrossCrate::Set(BindingForm::ImplicitSelf(*kind)))\n+                            Some(box LocalInfo::User(ClearCrossCrate::Set(BindingForm::ImplicitSelf(*kind))))\n                         } else {\n                             let binding_mode = ty::BindingMode::BindByValue(mutability);\n-                            LocalInfo::User(ClearCrossCrate::Set(BindingForm::Var(\n+                            Some(box LocalInfo::User(ClearCrossCrate::Set(BindingForm::Var(\n                                 VarBindingForm {\n                                     binding_mode,\n                                     opt_ty_info,\n                                     opt_match_place: Some((Some(place), span)),\n                                     pat_span: span,\n                                 },\n-                            )))\n+                            ))))\n                         };\n                         self.var_indices.insert(var, LocalsForNode::One(local));\n                     }"}]}