{"sha": "cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "node_id": "C_kwDOAAsO6NoAKGNiZjU0ZmFkNzk1YmM5YmNlNzkwNWI2ZGViOGRmYjNiYWM0ZjFlMmU", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-04-05T20:58:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-05T20:58:58Z"}, "message": "Rollup merge of #95591 - jackh726:nll-revisions-1, r=oli-obk\n\nUse revisions to track NLL test output (part 1)\n\nThe idea here is 2 fold: 1) When we eventually do make NLL default on, that PR should be systematic in \"delete revisions and corresponding error annotations\" 2) This allows us to look at test NLL outputs in chunks. (Though, I've opted here not to \"mark\" these tests. There are some tests with NLL revisions *now* that will be missed. I expect we do a second pass once we have all the tests with NLL revisions; these tests should be easy enough to eyeball.)\n\nThe actual review here should be \"easy\", but a bit tedious. I expect we should manually go through each test output and confirm it's okay.\n\nThe majority of these are either: 1) Only span change (the one I see most common is highlighting an entire function call, rather than just the function name in that call) 2) \"E0308 mismatched types\" -> \"lifetime does not live long enough\" 3) \"E0495 cannot infer an appropriate lifetime for lifetime parameter\" -> \"lifetime does not live long enough\" 4) \"E0312 lifetime of reference outlives lifetime of borrowed content\" -> \"lifetime does not live long enough\" 5) \"E0759 `XXX` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\" -> \"lifetime does not live long enough\" 6) \"E0623 lifetime mismatch\" -> \"lifetime does not live long enough\"\n\nOther than the now lack of an error code, most of these look fine (with most giving more helpful suggestions now).\n\n`rfc1623` output isn't great.\n\ncc ``@marmeladema`` if you want to look through these\n\nLet's r? ``@oli-obk`` since you've commented on the Zulip thread ;)", "tree": {"sha": "d1098ad7da7c591723443b512a8024192fb63d06", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d1098ad7da7c591723443b512a8024192fb63d06"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiTK2SCRBK7hj4Ov3rIwAAASEIAEHVV6xrE5+7UPtd1fJ5Pnfj\nbp9fyzcMeOJrVTKMRiWRb4cC6tk0NHj749r45odpfnFpKTVpXxqWCPdtyi8Ax00F\nrpIx+zOi4nTGCbsPO417ap1I5N/5UBUCerYIq4BcHpDjlQIj0J07MWgOb53gSOr7\nW33y7Z19kZpiQt/XmJk0pvBDsv5f/VkOM4b/e1p1tfhW05kf2AcsMLI8j9mZDsfV\n5RGVwN2oN/2tuHTHibywFi8rmx5fnJ/SRygAGEfaRJiKLCvf52d2evgwcXmwB+pt\nhfRZUjljQsZb83+oGFvK4GcdfDtJYGd3RZSf+hkkHXgaFSSQe7RiqIlFH+0dXW0=\n=KfzZ\n-----END PGP SIGNATURE-----\n", "payload": "tree d1098ad7da7c591723443b512a8024192fb63d06\nparent 42ab448bb443fe792995b4aaf168c5df250a9dac\nparent f881bf7c0a2c1020e36fd5f35be5ecb5af278966\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1649192338 +0200\ncommitter GitHub <noreply@github.com> 1649192338 +0200\n\nRollup merge of #95591 - jackh726:nll-revisions-1, r=oli-obk\n\nUse revisions to track NLL test output (part 1)\n\nThe idea here is 2 fold: 1) When we eventually do make NLL default on, that PR should be systematic in \"delete revisions and corresponding error annotations\" 2) This allows us to look at test NLL outputs in chunks. (Though, I've opted here not to \"mark\" these tests. There are some tests with NLL revisions *now* that will be missed. I expect we do a second pass once we have all the tests with NLL revisions; these tests should be easy enough to eyeball.)\n\nThe actual review here should be \"easy\", but a bit tedious. I expect we should manually go through each test output and confirm it's okay.\n\nThe majority of these are either: 1) Only span change (the one I see most common is highlighting an entire function call, rather than just the function name in that call) 2) \"E0308 mismatched types\" -> \"lifetime does not live long enough\" 3) \"E0495 cannot infer an appropriate lifetime for lifetime parameter\" -> \"lifetime does not live long enough\" 4) \"E0312 lifetime of reference outlives lifetime of borrowed content\" -> \"lifetime does not live long enough\" 5) \"E0759 `XXX` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\" -> \"lifetime does not live long enough\" 6) \"E0623 lifetime mismatch\" -> \"lifetime does not live long enough\"\n\nOther than the now lack of an error code, most of these look fine (with most giving more helpful suggestions now).\n\n`rfc1623` output isn't great.\n\ncc ``@marmeladema`` if you want to look through these\n\nLet's r? ``@oli-obk`` since you've commented on the Zulip thread ;)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "html_url": "https://github.com/rust-lang/rust/commit/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42ab448bb443fe792995b4aaf168c5df250a9dac", "url": "https://api.github.com/repos/rust-lang/rust/commits/42ab448bb443fe792995b4aaf168c5df250a9dac", "html_url": "https://github.com/rust-lang/rust/commit/42ab448bb443fe792995b4aaf168c5df250a9dac"}, {"sha": "f881bf7c0a2c1020e36fd5f35be5ecb5af278966", "url": "https://api.github.com/repos/rust-lang/rust/commits/f881bf7c0a2c1020e36fd5f35be5ecb5af278966", "html_url": "https://github.com/rust-lang/rust/commit/f881bf7c0a2c1020e36fd5f35be5ecb5af278966"}], "stats": {"total": 916, "additions": 588, "deletions": 328}, "files": [{"sha": "0dcf06481427dda88b513a33a02acb568bde34d1", "filename": "src/test/ui/nll/issue-50716.base.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fnll%2Fissue-50716.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fnll%2Fissue-50716.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-50716.base.stderr?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -1,13 +1,13 @@\n error[E0308]: mismatched types\n-  --> $DIR/issue-50716.rs:14:9\n+  --> $DIR/issue-50716.rs:18:9\n    |\n LL |     let _x = *s;\n    |         ^^ lifetime mismatch\n    |\n    = note: expected type `<<&'a T as A>::X as Sized>`\n               found type `<<&'static T as A>::X as Sized>`\n note: the lifetime `'a` as defined here...\n-  --> $DIR/issue-50716.rs:9:8\n+  --> $DIR/issue-50716.rs:13:8\n    |\n LL | fn foo<'a, T: 'static>(s: Box<<&'a T as A>::X>)\n    |        ^^", "previous_filename": "src/test/ui/nll/issue-50716.stderr"}, {"sha": "a8f4d694ba7d1b882bb178ca29fca719773addfd", "filename": "src/test/ui/nll/issue-50716.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fnll%2Fissue-50716.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fnll%2Fissue-50716.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-50716.nll.stderr?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/issue-50716.rs:14:14\n+  --> $DIR/issue-50716.rs:18:14\n    |\n LL | fn foo<'a, T: 'static>(s: Box<<&'a T as A>::X>)\n    |        -- lifetime `'a` defined here"}, {"sha": "bd44d3eff9fc89cb14727630ca99d3abc92c082e", "filename": "src/test/ui/nll/issue-50716.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fnll%2Fissue-50716.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fnll%2Fissue-50716.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-50716.rs?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -2,6 +2,10 @@\n // Regression test for the issue #50716: NLL ignores lifetimes bounds\n // derived from `Sized` requirements\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n trait A {\n     type X: ?Sized;\n }"}, {"sha": "259f378f70b5c825f03fe2e803122f3bee13509c", "filename": "src/test/ui/nll/issue-52742.base.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fnll%2Fissue-52742.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fnll%2Fissue-52742.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52742.base.stderr?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -1,16 +1,16 @@\n error[E0312]: lifetime of reference outlives lifetime of borrowed content...\n-  --> $DIR/issue-52742.rs:12:18\n+  --> $DIR/issue-52742.rs:17:18\n    |\n LL |         self.y = b.z\n    |                  ^^^\n    |\n note: ...the reference is valid for the lifetime `'_` as defined here...\n-  --> $DIR/issue-52742.rs:10:10\n+  --> $DIR/issue-52742.rs:15:10\n    |\n LL | impl Foo<'_, '_> {\n    |          ^^\n note: ...but the borrowed content is only valid for the anonymous lifetime defined here\n-  --> $DIR/issue-52742.rs:11:31\n+  --> $DIR/issue-52742.rs:16:31\n    |\n LL |     fn take_bar(&mut self, b: Bar<'_>) {\n    |                               ^^^^^^^", "previous_filename": "src/test/ui/nll/issue-52742.stderr"}, {"sha": "6828418a78ec1afa0f719a2c7c1395d20d51c9e5", "filename": "src/test/ui/nll/issue-52742.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fnll%2Fissue-52742.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fnll%2Fissue-52742.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52742.nll.stderr?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/issue-52742.rs:12:9\n+  --> $DIR/issue-52742.rs:17:9\n    |\n LL |     fn take_bar(&mut self, b: Bar<'_>) {\n    |                 ---------         -- let's call this `'1`"}, {"sha": "5ec5770c5c206e46d35101c68628c367925f453e", "filename": "src/test/ui/nll/issue-52742.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fnll%2Fissue-52742.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fnll%2Fissue-52742.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52742.rs?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -1,3 +1,8 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n+\n struct Foo<'a, 'b> {\n     x: &'a u32,\n     y: &'b u32,"}, {"sha": "cc87954732c4e5466ce037eadcada77c93061795", "filename": "src/test/ui/nll/issue-55394.base.stderr", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fnll%2Fissue-55394.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fnll%2Fissue-55394.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-55394.base.stderr?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -1,26 +1,26 @@\n error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'s` due to conflicting requirements\n-  --> $DIR/issue-55394.rs:9:9\n+  --> $DIR/issue-55394.rs:13:9\n    |\n LL |         Foo { bar }\n    |         ^^^\n    |\n note: first, the lifetime cannot outlive the anonymous lifetime defined here...\n-  --> $DIR/issue-55394.rs:8:17\n+  --> $DIR/issue-55394.rs:12:17\n    |\n LL |     fn new(bar: &mut Bar) -> Self {\n    |                 ^^^^^^^^\n note: ...so that reference does not outlive borrowed content\n-  --> $DIR/issue-55394.rs:9:15\n+  --> $DIR/issue-55394.rs:13:15\n    |\n LL |         Foo { bar }\n    |               ^^^\n note: but, the lifetime must be valid for the lifetime `'_` as defined here...\n-  --> $DIR/issue-55394.rs:7:10\n+  --> $DIR/issue-55394.rs:11:10\n    |\n LL | impl Foo<'_> {\n    |          ^^\n note: ...so that the types are compatible\n-  --> $DIR/issue-55394.rs:9:9\n+  --> $DIR/issue-55394.rs:13:9\n    |\n LL |         Foo { bar }\n    |         ^^^^^^^^^^^", "previous_filename": "src/test/ui/nll/issue-55394.stderr"}, {"sha": "c166c458c5013bd105fa2a6a5338368b9aaca35b", "filename": "src/test/ui/nll/issue-55394.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fnll%2Fissue-55394.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fnll%2Fissue-55394.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-55394.nll.stderr?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/issue-55394.rs:9:9\n+  --> $DIR/issue-55394.rs:13:9\n    |\n LL |     fn new(bar: &mut Bar) -> Self {\n    |                 -            ---- return type is Foo<'2>"}, {"sha": "9c4fcdf6419090876866d64b007e3e4381fff0c4", "filename": "src/test/ui/nll/issue-55394.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fnll%2Fissue-55394.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fnll%2Fissue-55394.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-55394.rs?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -1,3 +1,7 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n struct Bar;\n \n struct Foo<'s> {"}, {"sha": "d4e9f2b4154ef3614a4efb6974eaa2f499a24bad", "filename": "src/test/ui/nll/issue-55401.base.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fnll%2Fissue-55401.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fnll%2Fissue-55401.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-55401.base.stderr?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -1,12 +1,12 @@\n error[E0312]: lifetime of reference outlives lifetime of borrowed content...\n-  --> $DIR/issue-55401.rs:3:5\n+  --> $DIR/issue-55401.rs:7:5\n    |\n LL |     *y\n    |     ^^\n    |\n    = note: ...the reference is valid for the static lifetime...\n note: ...but the borrowed content is only valid for the lifetime `'a` as defined here\n-  --> $DIR/issue-55401.rs:1:47\n+  --> $DIR/issue-55401.rs:5:47\n    |\n LL | fn static_to_a_to_static_through_ref_in_tuple<'a>(x: &'a u32) -> &'static u32 {\n    |                                               ^^", "previous_filename": "src/test/ui/nll/issue-55401.stderr"}, {"sha": "1318dc676571490adf5a46d20f2108552880dc18", "filename": "src/test/ui/nll/issue-55401.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fnll%2Fissue-55401.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fnll%2Fissue-55401.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-55401.nll.stderr?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/issue-55401.rs:3:5\n+  --> $DIR/issue-55401.rs:7:5\n    |\n LL | fn static_to_a_to_static_through_ref_in_tuple<'a>(x: &'a u32) -> &'static u32 {\n    |                                               -- lifetime `'a` defined here"}, {"sha": "10f38c53dfdc74226db740ffcaebc14949499517", "filename": "src/test/ui/nll/issue-55401.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fnll%2Fissue-55401.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fnll%2Fissue-55401.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-55401.rs?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -1,3 +1,7 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n fn static_to_a_to_static_through_ref_in_tuple<'a>(x: &'a u32) -> &'static u32 {\n     let (ref y, _z): (&'a u32, u32) = (&22, 44);\n     *y //~ ERROR"}, {"sha": "ea9f5d4b2b1aa15a20b619d6c6816f3dcb452d43", "filename": "src/test/ui/nll/lub-if.base.stderr", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fnll%2Flub-if.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fnll%2Flub-if.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Flub-if.base.stderr?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -1,25 +1,25 @@\n error[E0312]: lifetime of reference outlives lifetime of borrowed content...\n-  --> $DIR/lub-if.rs:28:9\n+  --> $DIR/lub-if.rs:32:9\n    |\n LL |         s\n    |         ^\n    |\n    = note: ...the reference is valid for the static lifetime...\n note: ...but the borrowed content is only valid for the lifetime `'a` as defined here\n-  --> $DIR/lub-if.rs:23:17\n+  --> $DIR/lub-if.rs:27:17\n    |\n LL | pub fn opt_str2<'a>(maybestr: &'a Option<String>) -> &'static str {\n    |                 ^^\n \n error[E0312]: lifetime of reference outlives lifetime of borrowed content...\n-  --> $DIR/lub-if.rs:35:9\n+  --> $DIR/lub-if.rs:41:9\n    |\n LL |         s\n    |         ^\n    |\n    = note: ...the reference is valid for the static lifetime...\n note: ...but the borrowed content is only valid for the lifetime `'a` as defined here\n-  --> $DIR/lub-if.rs:32:17\n+  --> $DIR/lub-if.rs:38:17\n    |\n LL | pub fn opt_str3<'a>(maybestr: &'a Option<String>) -> &'static str {\n    |                 ^^", "previous_filename": "src/test/ui/nll/lub-if.stderr"}, {"sha": "2fd6e69628d472c95e9df998d9d536880c0bef55", "filename": "src/test/ui/nll/lub-if.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fnll%2Flub-if.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fnll%2Flub-if.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Flub-if.nll.stderr?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/lub-if.rs:28:9\n+  --> $DIR/lub-if.rs:32:9\n    |\n LL | pub fn opt_str2<'a>(maybestr: &'a Option<String>) -> &'static str {\n    |                 -- lifetime `'a` defined here\n@@ -8,7 +8,7 @@ LL |         s\n    |         ^ returning this value requires that `'a` must outlive `'static`\n \n error: lifetime may not live long enough\n-  --> $DIR/lub-if.rs:35:9\n+  --> $DIR/lub-if.rs:41:9\n    |\n LL | pub fn opt_str3<'a>(maybestr: &'a Option<String>) -> &'static str {\n    |                 -- lifetime `'a` defined here"}, {"sha": "18561d63935e785947433fec10dd09afe250df05", "filename": "src/test/ui/nll/lub-if.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fnll%2Flub-if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fnll%2Flub-if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Flub-if.rs?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -2,6 +2,10 @@\n // of the various arms, particularly in the case where regions are\n // involved.\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n pub fn opt_str0<'a>(maybestr: &'a Option<String>) -> &'a str {\n     if maybestr.is_none() {\n         \"(none)\"\n@@ -25,14 +29,18 @@ pub fn opt_str2<'a>(maybestr: &'a Option<String>) -> &'static str {\n         \"(none)\"\n     } else {\n         let s: &'a str = maybestr.as_ref().unwrap();\n-        s  //~ ERROR E0312\n+        s\n+        //[base]~^ ERROR E0312\n+        //[nll]~^^ ERROR lifetime may not live long enough\n     }\n }\n \n pub fn opt_str3<'a>(maybestr: &'a Option<String>) -> &'static str {\n     if maybestr.is_some() {\n         let s: &'a str = maybestr.as_ref().unwrap();\n-        s  //~ ERROR E0312\n+        s\n+        //[base]~^ ERROR E0312\n+        //[nll]~^^ ERROR lifetime may not live long enough\n     } else {\n         \"(none)\"\n     }"}, {"sha": "38952133160ed70ed77acedbea0a03930ecfbf75", "filename": "src/test/ui/nll/lub-match.base.stderr", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fnll%2Flub-match.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fnll%2Flub-match.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Flub-match.base.stderr?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -1,25 +1,25 @@\n error[E0312]: lifetime of reference outlives lifetime of borrowed content...\n-  --> $DIR/lub-match.rs:30:13\n+  --> $DIR/lub-match.rs:34:13\n    |\n LL |             s\n    |             ^\n    |\n    = note: ...the reference is valid for the static lifetime...\n note: ...but the borrowed content is only valid for the lifetime `'a` as defined here\n-  --> $DIR/lub-match.rs:25:17\n+  --> $DIR/lub-match.rs:29:17\n    |\n LL | pub fn opt_str2<'a>(maybestr: &'a Option<String>) -> &'static str {\n    |                 ^^\n \n error[E0312]: lifetime of reference outlives lifetime of borrowed content...\n-  --> $DIR/lub-match.rs:39:13\n+  --> $DIR/lub-match.rs:45:13\n    |\n LL |             s\n    |             ^\n    |\n    = note: ...the reference is valid for the static lifetime...\n note: ...but the borrowed content is only valid for the lifetime `'a` as defined here\n-  --> $DIR/lub-match.rs:35:17\n+  --> $DIR/lub-match.rs:41:17\n    |\n LL | pub fn opt_str3<'a>(maybestr: &'a Option<String>) -> &'static str {\n    |                 ^^", "previous_filename": "src/test/ui/nll/lub-match.stderr"}, {"sha": "c78d0cb641dc8508bcd83c0a156869aa21ce7f9c", "filename": "src/test/ui/nll/lub-match.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fnll%2Flub-match.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fnll%2Flub-match.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Flub-match.nll.stderr?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/lub-match.rs:30:13\n+  --> $DIR/lub-match.rs:34:13\n    |\n LL | pub fn opt_str2<'a>(maybestr: &'a Option<String>) -> &'static str {\n    |                 -- lifetime `'a` defined here\n@@ -8,7 +8,7 @@ LL |             s\n    |             ^ returning this value requires that `'a` must outlive `'static`\n \n error: lifetime may not live long enough\n-  --> $DIR/lub-match.rs:39:13\n+  --> $DIR/lub-match.rs:45:13\n    |\n LL | pub fn opt_str3<'a>(maybestr: &'a Option<String>) -> &'static str {\n    |                 -- lifetime `'a` defined here"}, {"sha": "084d8b95f5893d73824f18fdb9a240dd4887a732", "filename": "src/test/ui/nll/lub-match.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fnll%2Flub-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fnll%2Flub-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Flub-match.rs?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -2,6 +2,10 @@\n // of the various arms, particularly in the case where regions are\n // involved.\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n pub fn opt_str0<'a>(maybestr: &'a Option<String>) -> &'a str {\n     match *maybestr {\n         Some(ref s) => {\n@@ -27,7 +31,9 @@ pub fn opt_str2<'a>(maybestr: &'a Option<String>) -> &'static str {\n         None => \"(none)\",\n         Some(ref s) => {\n             let s: &'a str = s;\n-            s //~ ERROR E0312\n+            s\n+            //[base]~^ ERROR E0312\n+            //[nll]~^^ ERROR lifetime may not live long enough\n         }\n     }\n }\n@@ -36,7 +42,9 @@ pub fn opt_str3<'a>(maybestr: &'a Option<String>) -> &'static str {\n     match *maybestr {\n         Some(ref s) => {\n             let s: &'a str = s;\n-            s //~ ERROR E0312\n+            s\n+            //[base]~^ ERROR E0312\n+            //[nll]~^^ ERROR lifetime may not live long enough\n         }\n         None => \"(none)\",\n     }"}, {"sha": "010535fec6dd440b0e8de512948a1e5bc28ea327", "filename": "src/test/ui/nll/type-alias-free-regions.base.stderr", "status": "renamed", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fnll%2Ftype-alias-free-regions.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fnll%2Ftype-alias-free-regions.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Ftype-alias-free-regions.base.stderr?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -1,59 +1,59 @@\n error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'a` due to conflicting requirements\n-  --> $DIR/type-alias-free-regions.rs:17:9\n+  --> $DIR/type-alias-free-regions.rs:21:9\n    |\n LL |         C { f: b }\n    |         ^\n    |\n note: first, the lifetime cannot outlive the anonymous lifetime defined here...\n-  --> $DIR/type-alias-free-regions.rs:16:24\n+  --> $DIR/type-alias-free-regions.rs:20:24\n    |\n LL |     fn from_box(b: Box<B>) -> Self {\n    |                        ^\n note: ...so that the expression is assignable\n-  --> $DIR/type-alias-free-regions.rs:17:16\n+  --> $DIR/type-alias-free-regions.rs:21:16\n    |\n LL |         C { f: b }\n    |                ^\n    = note: expected `Box<Box<&isize>>`\n               found `Box<Box<&isize>>`\n note: but, the lifetime must be valid for the lifetime `'a` as defined here...\n-  --> $DIR/type-alias-free-regions.rs:15:6\n+  --> $DIR/type-alias-free-regions.rs:19:6\n    |\n LL | impl<'a> FromBox<'a> for C<'a> {\n    |      ^^\n note: ...so that the types are compatible\n-  --> $DIR/type-alias-free-regions.rs:17:9\n+  --> $DIR/type-alias-free-regions.rs:21:9\n    |\n LL |         C { f: b }\n    |         ^^^^^^^^^^\n    = note: expected `C<'a>`\n               found `C<'_>`\n \n error[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\n-  --> $DIR/type-alias-free-regions.rs:27:16\n+  --> $DIR/type-alias-free-regions.rs:31:16\n    |\n LL |         C { f: Box::new(b.0) }\n    |                ^^^^^^^^^^^^^\n    |\n note: first, the lifetime cannot outlive the anonymous lifetime defined here...\n-  --> $DIR/type-alias-free-regions.rs:26:23\n+  --> $DIR/type-alias-free-regions.rs:30:23\n    |\n LL |     fn from_tuple(b: (B,)) -> Self {\n    |                       ^\n note: ...so that the expression is assignable\n-  --> $DIR/type-alias-free-regions.rs:27:25\n+  --> $DIR/type-alias-free-regions.rs:31:25\n    |\n LL |         C { f: Box::new(b.0) }\n    |                         ^^^\n    = note: expected `Box<&isize>`\n               found `Box<&isize>`\n note: but, the lifetime must be valid for the lifetime `'a` as defined here...\n-  --> $DIR/type-alias-free-regions.rs:25:6\n+  --> $DIR/type-alias-free-regions.rs:29:6\n    |\n LL | impl<'a> FromTuple<'a> for C<'a> {\n    |      ^^\n note: ...so that the types are compatible\n-  --> $DIR/type-alias-free-regions.rs:27:9\n+  --> $DIR/type-alias-free-regions.rs:31:9\n    |\n LL |         C { f: Box::new(b.0) }\n    |         ^^^^^^^^^^^^^^^^^^^^^^", "previous_filename": "src/test/ui/nll/type-alias-free-regions.stderr"}, {"sha": "6b746602d7ffd3b016fb851973a66db1a5d43fe2", "filename": "src/test/ui/nll/type-alias-free-regions.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fnll%2Ftype-alias-free-regions.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fnll%2Ftype-alias-free-regions.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Ftype-alias-free-regions.nll.stderr?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/type-alias-free-regions.rs:17:9\n+  --> $DIR/type-alias-free-regions.rs:21:9\n    |\n LL | impl<'a> FromBox<'a> for C<'a> {\n    |      -- lifetime `'a` defined here\n@@ -9,7 +9,7 @@ LL |         C { f: b }\n    |         ^^^^^^^^^^ associated function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n-  --> $DIR/type-alias-free-regions.rs:27:9\n+  --> $DIR/type-alias-free-regions.rs:31:9\n    |\n LL | impl<'a> FromTuple<'a> for C<'a> {\n    |      -- lifetime `'a` defined here"}, {"sha": "59ef0344937704cb507d59b46e45f675d88d6ee6", "filename": "src/test/ui/nll/type-alias-free-regions.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fnll%2Ftype-alias-free-regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fnll%2Ftype-alias-free-regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Ftype-alias-free-regions.rs?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -1,6 +1,10 @@\n // Test that we don't assume that type aliases have the same type parameters\n // as the type they alias and then panic when we see this.\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n type A<'a> = &'a isize;\n type B<'a> = Box<A<'a>>;\n "}, {"sha": "ba17994b437661494e39725b131adeba52fde2d5", "filename": "src/test/ui/nll/user-annotations/constant-in-expr-inherent-1.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-inherent-1.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-inherent-1.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-inherent-1.base.stderr?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -1,5 +1,5 @@\n error[E0759]: `fn` parameter has lifetime `'a` but it needs to satisfy a `'static` lifetime requirement\n-  --> $DIR/constant-in-expr-inherent-1.rs:8:5\n+  --> $DIR/constant-in-expr-inherent-1.rs:12:5\n    |\n LL | fn foo<'a>(_: &'a u32) -> &'static u32 {\n    |               ------- this data with lifetime `'a`...", "previous_filename": "src/test/ui/nll/user-annotations/constant-in-expr-inherent-1.stderr"}, {"sha": "0399d5f893d85ef0779a8a794188b6d8c76fa85c", "filename": "src/test/ui/nll/user-annotations/constant-in-expr-inherent-1.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-inherent-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-inherent-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-inherent-1.nll.stderr?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/constant-in-expr-inherent-1.rs:8:5\n+  --> $DIR/constant-in-expr-inherent-1.rs:12:5\n    |\n LL | fn foo<'a>(_: &'a u32) -> &'static u32 {\n    |        -- lifetime `'a` defined here"}, {"sha": "0bd316aa84cfe19296dfd30a433b2be873ebabc8", "filename": "src/test/ui/nll/user-annotations/constant-in-expr-inherent-1.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-inherent-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-inherent-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-inherent-1.rs?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -1,3 +1,7 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n struct Foo<'a> { x: &'a u32 }\n \n impl<'a> Foo<'a> {"}, {"sha": "61efa879fc04be5e08f42868f22ba1db93daebb4", "filename": "src/test/ui/nll/user-annotations/constant-in-expr-normalize.base.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-normalize.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-normalize.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-normalize.base.stderr?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -1,12 +1,12 @@\n error[E0312]: lifetime of reference outlives lifetime of borrowed content...\n-  --> $DIR/constant-in-expr-normalize.rs:18:5\n+  --> $DIR/constant-in-expr-normalize.rs:22:5\n    |\n LL |     <() as Foo<'a>>::C\n    |     ^^^^^^^^^^^^^^^^^^\n    |\n    = note: ...the reference is valid for the static lifetime...\n note: ...but the borrowed content is only valid for the lifetime `'a` as defined here\n-  --> $DIR/constant-in-expr-normalize.rs:17:8\n+  --> $DIR/constant-in-expr-normalize.rs:21:8\n    |\n LL | fn foo<'a>(_: &'a u32) -> &'static u32 {\n    |        ^^", "previous_filename": "src/test/ui/nll/user-annotations/constant-in-expr-normalize.stderr"}, {"sha": "4c1e6bee2aa0d5143fa2716100381f1618301518", "filename": "src/test/ui/nll/user-annotations/constant-in-expr-normalize.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-normalize.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-normalize.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-normalize.nll.stderr?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/constant-in-expr-normalize.rs:18:5\n+  --> $DIR/constant-in-expr-normalize.rs:22:5\n    |\n LL | fn foo<'a>(_: &'a u32) -> &'static u32 {\n    |        -- lifetime `'a` defined here"}, {"sha": "262f0ae318f8effba3583137d121a3ec56d4e1dd", "filename": "src/test/ui/nll/user-annotations/constant-in-expr-normalize.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-normalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-normalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-normalize.rs?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -1,3 +1,7 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n trait Mirror {\n     type Me;\n }"}, {"sha": "93f7156e55757aed90ce82c947c7897711a6ae7a", "filename": "src/test/ui/nll/user-annotations/constant-in-expr-trait-item-1.base.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-1.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-1.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-1.base.stderr?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -1,12 +1,12 @@\n error[E0312]: lifetime of reference outlives lifetime of borrowed content...\n-  --> $DIR/constant-in-expr-trait-item-1.rs:10:5\n+  --> $DIR/constant-in-expr-trait-item-1.rs:14:5\n    |\n LL |     <() as Foo<'a>>::C\n    |     ^^^^^^^^^^^^^^^^^^\n    |\n    = note: ...the reference is valid for the static lifetime...\n note: ...but the borrowed content is only valid for the lifetime `'a` as defined here\n-  --> $DIR/constant-in-expr-trait-item-1.rs:9:8\n+  --> $DIR/constant-in-expr-trait-item-1.rs:13:8\n    |\n LL | fn foo<'a>(_: &'a u32) -> &'static u32 {\n    |        ^^", "previous_filename": "src/test/ui/nll/user-annotations/constant-in-expr-trait-item-1.stderr"}, {"sha": "990d0ae385fc10804b73384bf0b4915c6b3cf384", "filename": "src/test/ui/nll/user-annotations/constant-in-expr-trait-item-1.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-1.nll.stderr?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/constant-in-expr-trait-item-1.rs:10:5\n+  --> $DIR/constant-in-expr-trait-item-1.rs:14:5\n    |\n LL | fn foo<'a>(_: &'a u32) -> &'static u32 {\n    |        -- lifetime `'a` defined here"}, {"sha": "512edb501c4ea12a9aab2e5be57cf514d2010586", "filename": "src/test/ui/nll/user-annotations/constant-in-expr-trait-item-1.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-1.rs?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -1,3 +1,7 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n trait Foo<'a> {\n     const C: &'a u32;\n }"}, {"sha": "f43ade38937d342d165cb5445814d48cb271f74c", "filename": "src/test/ui/nll/user-annotations/constant-in-expr-trait-item-2.base.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-2.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-2.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-2.base.stderr?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -1,12 +1,12 @@\n error[E0312]: lifetime of reference outlives lifetime of borrowed content...\n-  --> $DIR/constant-in-expr-trait-item-2.rs:10:5\n+  --> $DIR/constant-in-expr-trait-item-2.rs:14:5\n    |\n LL |     <T as Foo<'a>>::C\n    |     ^^^^^^^^^^^^^^^^^\n    |\n    = note: ...the reference is valid for the static lifetime...\n note: ...but the borrowed content is only valid for the lifetime `'a` as defined here\n-  --> $DIR/constant-in-expr-trait-item-2.rs:9:8\n+  --> $DIR/constant-in-expr-trait-item-2.rs:13:8\n    |\n LL | fn foo<'a, T: Foo<'a>>() -> &'static u32 {\n    |        ^^", "previous_filename": "src/test/ui/nll/user-annotations/constant-in-expr-trait-item-2.stderr"}, {"sha": "8c0430f1e092cb2bf193b74fc185f37419ebc2a0", "filename": "src/test/ui/nll/user-annotations/constant-in-expr-trait-item-2.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-2.nll.stderr?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/constant-in-expr-trait-item-2.rs:10:5\n+  --> $DIR/constant-in-expr-trait-item-2.rs:14:5\n    |\n LL | fn foo<'a, T: Foo<'a>>() -> &'static u32 {\n    |        -- lifetime `'a` defined here"}, {"sha": "b3dfbd984ebbf3f035772bb2f339a5847ad1cd88", "filename": "src/test/ui/nll/user-annotations/constant-in-expr-trait-item-2.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-2.rs?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -1,3 +1,7 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n trait Foo<'a> {\n     const C: &'a u32;\n }"}, {"sha": "e9393aa05ab39c5bea59da8ee68eb4dfa7d14422", "filename": "src/test/ui/nll/user-annotations/constant-in-expr-trait-item-3.base.stderr", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-3.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-3.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-3.base.stderr?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -1,24 +1,24 @@\n error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'a` due to conflicting requirements\n-  --> $DIR/constant-in-expr-trait-item-3.rs:10:5\n+  --> $DIR/constant-in-expr-trait-item-3.rs:14:5\n    |\n LL |     T::C\n    |     ^^^^\n    |\n note: first, the lifetime cannot outlive the lifetime `'a` as defined here...\n-  --> $DIR/constant-in-expr-trait-item-3.rs:9:8\n+  --> $DIR/constant-in-expr-trait-item-3.rs:13:8\n    |\n LL | fn foo<'a, T: Foo<'a>>() -> &'static u32 {\n    |        ^^\n note: ...so that the types are compatible\n-  --> $DIR/constant-in-expr-trait-item-3.rs:10:5\n+  --> $DIR/constant-in-expr-trait-item-3.rs:14:5\n    |\n LL |     T::C\n    |     ^^^^\n    = note: expected `Foo<'_>`\n               found `Foo<'a>`\n    = note: but, the lifetime must be valid for the static lifetime...\n note: ...so that reference does not outlive borrowed content\n-  --> $DIR/constant-in-expr-trait-item-3.rs:10:5\n+  --> $DIR/constant-in-expr-trait-item-3.rs:14:5\n    |\n LL |     T::C\n    |     ^^^^", "previous_filename": "src/test/ui/nll/user-annotations/constant-in-expr-trait-item-3.stderr"}, {"sha": "cbcaf042f053904078269375831738eb2e8b2873", "filename": "src/test/ui/nll/user-annotations/constant-in-expr-trait-item-3.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-3.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-3.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-3.nll.stderr?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/constant-in-expr-trait-item-3.rs:10:5\n+  --> $DIR/constant-in-expr-trait-item-3.rs:14:5\n    |\n LL | fn foo<'a, T: Foo<'a>>() -> &'static u32 {\n    |        -- lifetime `'a` defined here"}, {"sha": "6e78d94c2f63ac8c942008d36146f29a92a5b0c2", "filename": "src/test/ui/nll/user-annotations/constant-in-expr-trait-item-3.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-3.rs?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -1,3 +1,7 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n trait Foo<'a> {\n     const C: &'a u32;\n }"}, {"sha": "6d389a1317a9fa2f4efa45870520388a9cc4b80d", "filename": "src/test/ui/rfc1623.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Frfc1623.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Frfc1623.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1623.base.stderr?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -1,5 +1,5 @@\n error: implementation of `FnOnce` is not general enough\n-  --> $DIR/rfc1623.rs:28:8\n+  --> $DIR/rfc1623.rs:36:8\n    |\n LL |     f: &id,\n    |        ^^^ implementation of `FnOnce` is not general enough", "previous_filename": "src/test/ui/rfc1623.stderr"}, {"sha": "f85b6ff8ff75b2a0431d8e43e50ce0fe97a4bb55", "filename": "src/test/ui/rfc1623.nll.stderr", "status": "modified", "additions": 20, "deletions": 16, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Frfc1623.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Frfc1623.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1623.nll.stderr?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -1,11 +1,12 @@\n error[E0308]: mismatched types\n-  --> $DIR/rfc1623.rs:25:35\n+  --> $DIR/rfc1623.rs:29:35\n    |\n LL |   static SOME_STRUCT: &SomeStruct = &SomeStruct {\n    |  ___________________________________^\n-LL | |     foo: &Foo { bools: &[false, true] },\n-LL | |     bar: &Bar { bools: &[true, true] },\n-LL | |     f: &id,\n+LL | |\n+LL | |\n+LL | |\n+...  |\n LL | |\n LL | | };\n    | |_^ one type is more general than the other\n@@ -14,13 +15,14 @@ LL | | };\n               found type `Fn<(&Foo<'_>,)>`\n \n error[E0308]: mismatched types\n-  --> $DIR/rfc1623.rs:25:35\n+  --> $DIR/rfc1623.rs:29:35\n    |\n LL |   static SOME_STRUCT: &SomeStruct = &SomeStruct {\n    |  ___________________________________^\n-LL | |     foo: &Foo { bools: &[false, true] },\n-LL | |     bar: &Bar { bools: &[true, true] },\n-LL | |     f: &id,\n+LL | |\n+LL | |\n+LL | |\n+...  |\n LL | |\n LL | | };\n    | |_^ one type is more general than the other\n@@ -29,13 +31,14 @@ LL | | };\n               found type `Fn<(&Foo<'_>,)>`\n \n error: implementation of `FnOnce` is not general enough\n-  --> $DIR/rfc1623.rs:25:35\n+  --> $DIR/rfc1623.rs:29:35\n    |\n LL |   static SOME_STRUCT: &SomeStruct = &SomeStruct {\n    |  ___________________________________^\n-LL | |     foo: &Foo { bools: &[false, true] },\n-LL | |     bar: &Bar { bools: &[true, true] },\n-LL | |     f: &id,\n+LL | |\n+LL | |\n+LL | |\n+...  |\n LL | |\n LL | | };\n    | |_^ implementation of `FnOnce` is not general enough\n@@ -44,13 +47,14 @@ LL | | };\n    = note: ...but it actually implements `FnOnce<(&'2 Foo<'_>,)>`, for some specific lifetime `'2`\n \n error: implementation of `FnOnce` is not general enough\n-  --> $DIR/rfc1623.rs:25:35\n+  --> $DIR/rfc1623.rs:29:35\n    |\n LL |   static SOME_STRUCT: &SomeStruct = &SomeStruct {\n    |  ___________________________________^\n-LL | |     foo: &Foo { bools: &[false, true] },\n-LL | |     bar: &Bar { bools: &[true, true] },\n-LL | |     f: &id,\n+LL | |\n+LL | |\n+LL | |\n+...  |\n LL | |\n LL | | };\n    | |_^ implementation of `FnOnce` is not general enough"}, {"sha": "0e9d2140324256dbdcccab92e0fb3c9837ba5335", "filename": "src/test/ui/rfc1623.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Frfc1623.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Frfc1623.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1623.rs?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -1,3 +1,7 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n #![allow(dead_code)]\n \n fn non_elidable<'a, 'b>(a: &'a u8, b: &'b u8) -> &'a u8 {\n@@ -23,10 +27,14 @@ fn id<T>(t: T) -> T {\n }\n \n static SOME_STRUCT: &SomeStruct = &SomeStruct {\n+    //[nll]~^ ERROR mismatched types\n+    //[nll]~| ERROR mismatched types\n+    //[nll]~| ERROR implementation of `FnOnce` is not general enough\n+    //[nll]~| ERROR implementation of `FnOnce` is not general enough\n     foo: &Foo { bools: &[false, true] },\n     bar: &Bar { bools: &[true, true] },\n     f: &id,\n-    //~^ ERROR implementation of `FnOnce` is not general enough\n+    //[base]~^ ERROR implementation of `FnOnce` is not general enough\n };\n \n // very simple test for a 'static static with default lifetime"}, {"sha": "a3b410c2cfb8c4946c53b40be46e6e828b4bf979", "filename": "src/test/ui/type-alias-impl-trait/generic_type_does_not_live_long_enough.base.stderr", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.base.stderr?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -1,23 +1,23 @@\n error: at least one trait must be specified\n-  --> $DIR/generic_type_does_not_live_long_enough.rs:10:24\n+  --> $DIR/generic_type_does_not_live_long_enough.rs:14:24\n    |\n LL | type WrongGeneric<T> = impl 'static;\n    |                        ^^^^^^^^^^^^\n \n error: non-defining opaque type use in defining scope\n-  --> $DIR/generic_type_does_not_live_long_enough.rs:6:18\n+  --> $DIR/generic_type_does_not_live_long_enough.rs:10:18\n    |\n LL |     let z: i32 = x;\n    |                  ^\n    |\n note: used non-generic type `&'static i32` for generic parameter\n-  --> $DIR/generic_type_does_not_live_long_enough.rs:10:19\n+  --> $DIR/generic_type_does_not_live_long_enough.rs:14:19\n    |\n LL | type WrongGeneric<T> = impl 'static;\n    |                   ^\n \n error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/generic_type_does_not_live_long_enough.rs:14:5\n+  --> $DIR/generic_type_does_not_live_long_enough.rs:18:5\n    |\n LL | fn wrong_generic<T>(t: T) -> WrongGeneric<T> {\n    |                  - help: consider adding an explicit lifetime bound...: `T: 'static`", "previous_filename": "src/test/ui/type-alias-impl-trait/generic_type_does_not_live_long_enough.stderr"}, {"sha": "db771d211322c8f53776a358d3e67c210c140468", "filename": "src/test/ui/type-alias-impl-trait/generic_type_does_not_live_long_enough.nll.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.nll.stderr?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -1,23 +1,23 @@\n error: at least one trait must be specified\n-  --> $DIR/generic_type_does_not_live_long_enough.rs:10:24\n+  --> $DIR/generic_type_does_not_live_long_enough.rs:14:24\n    |\n LL | type WrongGeneric<T> = impl 'static;\n    |                        ^^^^^^^^^^^^\n \n error: non-defining opaque type use in defining scope\n-  --> $DIR/generic_type_does_not_live_long_enough.rs:6:18\n+  --> $DIR/generic_type_does_not_live_long_enough.rs:10:18\n    |\n LL |     let z: i32 = x;\n    |                  ^\n    |\n note: used non-generic type `&'static i32` for generic parameter\n-  --> $DIR/generic_type_does_not_live_long_enough.rs:10:19\n+  --> $DIR/generic_type_does_not_live_long_enough.rs:14:19\n    |\n LL | type WrongGeneric<T> = impl 'static;\n    |                   ^\n \n error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/generic_type_does_not_live_long_enough.rs:14:5\n+  --> $DIR/generic_type_does_not_live_long_enough.rs:18:5\n    |\n LL |     t\n    |     ^"}, {"sha": "2ad7e615e19cc016b3ea8cab1e1b0a1a276f89c0", "filename": "src/test/ui/type-alias-impl-trait/generic_type_does_not_live_long_enough.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.rs?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -1,5 +1,9 @@\n #![feature(type_alias_impl_trait)]\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n fn main() {\n     let y = 42;\n     let x = wrong_generic(&y);"}, {"sha": "be77b60ca8ff3ac82bfe8b92bb8bf4873a931bc9", "filename": "src/test/ui/type-alias-impl-trait/issue-57611-trait-alias.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.base.stderr?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -1,5 +1,5 @@\n error: implementation of `FnOnce` is not general enough\n-  --> $DIR/issue-57611-trait-alias.rs:20:9\n+  --> $DIR/issue-57611-trait-alias.rs:25:9\n    |\n LL |         |x| x\n    |         ^^^^^ implementation of `FnOnce` is not general enough", "previous_filename": "src/test/ui/type-alias-impl-trait/issue-57611-trait-alias.stderr"}, {"sha": "f5b91567ff53170c469f15b77bffbef65f3971ed", "filename": "src/test/ui/type-alias-impl-trait/issue-57611-trait-alias.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.nll.stderr?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -1,19 +1,19 @@\n error[E0308]: mismatched types\n-  --> $DIR/issue-57611-trait-alias.rs:20:9\n+  --> $DIR/issue-57611-trait-alias.rs:25:9\n    |\n LL |         |x| x\n    |         ^^^^^ one type is more general than the other\n    |\n    = note: expected type `for<'r> Fn<(&'r X,)>`\n               found type `Fn<(&X,)>`\n note: this closure does not fulfill the lifetime requirements\n-  --> $DIR/issue-57611-trait-alias.rs:20:9\n+  --> $DIR/issue-57611-trait-alias.rs:25:9\n    |\n LL |         |x| x\n    |         ^^^^^\n \n error: implementation of `FnOnce` is not general enough\n-  --> $DIR/issue-57611-trait-alias.rs:20:9\n+  --> $DIR/issue-57611-trait-alias.rs:25:9\n    |\n LL |         |x| x\n    |         ^^^^^ implementation of `FnOnce` is not general enough"}, {"sha": "e95ddab75bee407aae93febc78a5f2383159dc94", "filename": "src/test/ui/type-alias-impl-trait/issue-57611-trait-alias.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.rs?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -1,6 +1,11 @@\n // Regression test for issue #57611\n // Ensures that we don't ICE\n // FIXME: This should compile, but it currently doesn't\n+// known-bug\n+\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n \n #![feature(trait_alias)]\n #![feature(type_alias_impl_trait)]\n@@ -18,7 +23,6 @@ impl Foo for X {\n \n     fn bar(&self) -> Self::Bar {\n         |x| x\n-        //~^ ERROR implementation of `FnOnce` is not general enough\n     }\n }\n "}, {"sha": "5d555a9c5e4506bba34d3cb694edef70582ff458", "filename": "src/test/ui/unboxed-closures/issue-30906.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Funboxed-closures%2Fissue-30906.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Funboxed-closures%2Fissue-30906.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Fissue-30906.base.stderr?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -1,5 +1,5 @@\n error: implementation of `FnOnce` is not general enough\n-  --> $DIR/issue-30906.rs:18:5\n+  --> $DIR/issue-30906.rs:22:5\n    |\n LL |     test(Compose(f, |_| {}));\n    |     ^^^^ implementation of `FnOnce` is not general enough", "previous_filename": "src/test/ui/unboxed-closures/issue-30906.stderr"}, {"sha": "333e8e178217f23b73483dd0092449382e316885", "filename": "src/test/ui/unboxed-closures/issue-30906.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Funboxed-closures%2Fissue-30906.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Funboxed-closures%2Fissue-30906.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Fissue-30906.nll.stderr?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -1,5 +1,5 @@\n error: implementation of `FnOnce` is not general enough\n-  --> $DIR/issue-30906.rs:18:5\n+  --> $DIR/issue-30906.rs:22:5\n    |\n LL |     test(Compose(f, |_| {}));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ implementation of `FnOnce` is not general enough"}, {"sha": "1fd3a7f97dea3e88662e8d4b41a5fb0c88bbb634", "filename": "src/test/ui/unboxed-closures/issue-30906.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Funboxed-closures%2Fissue-30906.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Funboxed-closures%2Fissue-30906.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Fissue-30906.rs?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -1,5 +1,9 @@\n #![feature(fn_traits, unboxed_closures)]\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n fn test<F: for<'x> FnOnce<(&'x str,)>>(_: F) {}\n \n struct Compose<F, G>(F, G);"}, {"sha": "ebd14c64298202d8232f5a69f02cd159d64994da", "filename": "src/test/ui/unboxed-closures/unboxed-closures-infer-argument-types-two-region-pointers.base.stderr", "status": "renamed", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-argument-types-two-region-pointers.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-argument-types-two-region-pointers.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-argument-types-two-region-pointers.base.stderr?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -1,23 +1,27 @@\n error[E0312]: lifetime of reference outlives lifetime of borrowed content...\n-  --> $DIR/unboxed-closures-infer-argument-types-two-region-pointers.rs:17:15\n+  --> $DIR/unboxed-closures-infer-argument-types-two-region-pointers.rs:21:15\n    |\n LL |         x.set(y);\n    |               ^\n    |\n note: ...the reference is valid for the anonymous lifetime #2 defined here...\n-  --> $DIR/unboxed-closures-infer-argument-types-two-region-pointers.rs:16:14\n+  --> $DIR/unboxed-closures-infer-argument-types-two-region-pointers.rs:20:14\n    |\n LL |       doit(0, &|x, y| {\n    |  ______________^\n LL | |         x.set(y);\n+LL | |\n+LL | |\n LL | |     });\n    | |_____^\n note: ...but the borrowed content is only valid for the anonymous lifetime #3 defined here\n-  --> $DIR/unboxed-closures-infer-argument-types-two-region-pointers.rs:16:14\n+  --> $DIR/unboxed-closures-infer-argument-types-two-region-pointers.rs:20:14\n    |\n LL |       doit(0, &|x, y| {\n    |  ______________^\n LL | |         x.set(y);\n+LL | |\n+LL | |\n LL | |     });\n    | |_____^\n ", "previous_filename": "src/test/ui/unboxed-closures/unboxed-closures-infer-argument-types-two-region-pointers.stderr"}, {"sha": "aeeee6e5003e897799fae54845a0bd9e11f3d628", "filename": "src/test/ui/unboxed-closures/unboxed-closures-infer-argument-types-two-region-pointers.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-argument-types-two-region-pointers.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-argument-types-two-region-pointers.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-argument-types-two-region-pointers.nll.stderr?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/unboxed-closures-infer-argument-types-two-region-pointers.rs:17:9\n+  --> $DIR/unboxed-closures-infer-argument-types-two-region-pointers.rs:21:9\n    |\n LL |     doit(0, &|x, y| {\n    |               -  - has type `&'1 i32`"}, {"sha": "288349e44561e35d1e40e6abd540b6c768b6029d", "filename": "src/test/ui/unboxed-closures/unboxed-closures-infer-argument-types-two-region-pointers.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-argument-types-two-region-pointers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-argument-types-two-region-pointers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-argument-types-two-region-pointers.rs?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -3,6 +3,10 @@\n // That a closure whose expected argument types include two distinct\n // bound regions.\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n use std::cell::Cell;\n \n fn doit<T,F>(val: T, f: &F)\n@@ -14,6 +18,8 @@ fn doit<T,F>(val: T, f: &F)\n \n pub fn main() {\n     doit(0, &|x, y| {\n-        x.set(y); //~ ERROR E0312\n+        x.set(y);\n+        //[base]~^ ERROR E0312\n+        //[nll]~^^ lifetime may not live long enough\n     });\n }"}, {"sha": "07357795010b54f3d70cb49a4baa729a3694989d", "filename": "src/test/ui/underscore-lifetime/dyn-trait-underscore.base.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.base.stderr?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -1,5 +1,5 @@\n error[E0759]: `items` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n-  --> $DIR/dyn-trait-underscore.rs:8:20\n+  --> $DIR/dyn-trait-underscore.rs:12:20\n    |\n LL | fn a<T>(items: &[T]) -> Box<dyn Iterator<Item=&T>> {\n    |                ---- this data with an anonymous lifetime `'_`...\n@@ -10,7 +10,7 @@ LL |     Box::new(items.iter())\n    |              ...is used and required to live as long as `'static` here\n    |\n note: `'static` lifetime requirement introduced by the return type\n-  --> $DIR/dyn-trait-underscore.rs:6:29\n+  --> $DIR/dyn-trait-underscore.rs:10:29\n    |\n LL | fn a<T>(items: &[T]) -> Box<dyn Iterator<Item=&T>> {\n    |                             ^^^^^^^^^^^^^^^^^^^^^ `'static` requirement introduced here", "previous_filename": "src/test/ui/underscore-lifetime/dyn-trait-underscore.stderr"}, {"sha": "53d45f6a8f22b98da018b6f2e3fee0278758a770", "filename": "src/test/ui/underscore-lifetime/dyn-trait-underscore.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.nll.stderr?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/dyn-trait-underscore.rs:8:5\n+  --> $DIR/dyn-trait-underscore.rs:12:5\n    |\n LL | fn a<T>(items: &[T]) -> Box<dyn Iterator<Item=&T>> {\n    |                - let's call the lifetime of this reference `'1`"}, {"sha": "7110d43221082facd2507a71f3966f0b3fbfa7aa", "filename": "src/test/ui/underscore-lifetime/dyn-trait-underscore.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.rs?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -3,9 +3,15 @@\n //\n // cc #48468\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n fn a<T>(items: &[T]) -> Box<dyn Iterator<Item=&T>> {\n     //                      ^^^^^^^^^^^^^^^^^^^^^ bound *here* defaults to `'static`\n-    Box::new(items.iter()) //~ ERROR E0759\n+    Box::new(items.iter())\n+    //[base]~^ ERROR E0759\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn b<T>(items: &[T]) -> Box<dyn Iterator<Item=&T> + '_> {"}, {"sha": "2581911f5ce23bd157d52ff3110839b1d9d50837", "filename": "src/test/ui/underscore-lifetime/underscore-lifetime-elison-mismatch.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-lifetime-elison-mismatch.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-lifetime-elison-mismatch.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-lifetime-elison-mismatch.base.stderr?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/underscore-lifetime-elison-mismatch.rs:1:49\n+  --> $DIR/underscore-lifetime-elison-mismatch.rs:5:49\n    |\n LL | fn foo(x: &mut Vec<&'_ u8>, y: &'_ u8) { x.push(y); }\n    |                    ------      ------           ^ ...but data from `y` flows into `x` here", "previous_filename": "src/test/ui/underscore-lifetime/underscore-lifetime-elison-mismatch.stderr"}, {"sha": "8e10242cb1331ae08dbb46b8cbff7f69b8d9351c", "filename": "src/test/ui/underscore-lifetime/underscore-lifetime-elison-mismatch.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-lifetime-elison-mismatch.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-lifetime-elison-mismatch.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-lifetime-elison-mismatch.nll.stderr?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/underscore-lifetime-elison-mismatch.rs:1:42\n+  --> $DIR/underscore-lifetime-elison-mismatch.rs:5:42\n    |\n LL | fn foo(x: &mut Vec<&'_ u8>, y: &'_ u8) { x.push(y); }\n    |                    -           -         ^^^^^^^^^ argument requires that `'1` must outlive `'2`"}, {"sha": "6d495138da9e3d24f745b2964562915cc5fef5d5", "filename": "src/test/ui/underscore-lifetime/underscore-lifetime-elison-mismatch.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-lifetime-elison-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-lifetime-elison-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-lifetime-elison-mismatch.rs?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -1,3 +1,9 @@\n-fn foo(x: &mut Vec<&'_ u8>, y: &'_ u8) { x.push(y); } //~ ERROR lifetime mismatch\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n+fn foo(x: &mut Vec<&'_ u8>, y: &'_ u8) { x.push(y); }\n+//[base]~^ ERROR lifetime mismatch\n+//[nll]~^^ ERROR lifetime may not live long enough\n \n fn main() {}"}, {"sha": "c8ace0848719ba737332b04bcb98ba95c21ee503", "filename": "src/test/ui/variance/variance-associated-types2.base.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fvariance%2Fvariance-associated-types2.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fvariance%2Fvariance-associated-types2.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-associated-types2.base.stderr?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -1,13 +1,13 @@\n error[E0308]: mismatched types\n-  --> $DIR/variance-associated-types2.rs:13:42\n+  --> $DIR/variance-associated-types2.rs:17:42\n    |\n LL |     let _: Box<dyn Foo<Bar = &'a u32>> = make();\n    |                                          ^^^^^^ lifetime mismatch\n    |\n    = note: expected trait object `dyn Foo<Bar = &'a u32>`\n               found trait object `dyn Foo<Bar = &'static u32>`\n note: the lifetime `'a` as defined here...\n-  --> $DIR/variance-associated-types2.rs:12:9\n+  --> $DIR/variance-associated-types2.rs:16:9\n    |\n LL | fn take<'a>(_: &'a u32) {\n    |         ^^", "previous_filename": "src/test/ui/variance/variance-associated-types2.stderr"}, {"sha": "b74c400969237f570c1d9c95662af321f2284856", "filename": "src/test/ui/variance/variance-associated-types2.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fvariance%2Fvariance-associated-types2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fvariance%2Fvariance-associated-types2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-associated-types2.nll.stderr?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/variance-associated-types2.rs:13:12\n+  --> $DIR/variance-associated-types2.rs:17:12\n    |\n LL | fn take<'a>(_: &'a u32) {\n    |         -- lifetime `'a` defined here"}, {"sha": "e3c8e6d7ca242bd6ca9b0ae96bf1d2d93a5c949e", "filename": "src/test/ui/variance/variance-associated-types2.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fvariance%2Fvariance-associated-types2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fvariance%2Fvariance-associated-types2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-associated-types2.rs?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -1,6 +1,10 @@\n // Test that dyn Foo<Bar = T> is invariant with respect to T.\n // Failure to enforce invariance here can be weaponized, see #71550 for details.\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n trait Foo {\n     type Bar;\n }\n@@ -11,7 +15,8 @@ fn make() -> Box<dyn Foo<Bar = &'static u32>> {\n \n fn take<'a>(_: &'a u32) {\n     let _: Box<dyn Foo<Bar = &'a u32>> = make();\n-    //~^ ERROR mismatched types [E0308]\n+    //[base]~^ ERROR mismatched types [E0308]\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn main() {}"}, {"sha": "5b78f4252b3ddc914ef46ec5714e050cdc0d7c60", "filename": "src/test/ui/variance/variance-btree-invariant-types.base.stderr", "status": "renamed", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fvariance%2Fvariance-btree-invariant-types.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fvariance%2Fvariance-btree-invariant-types.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-btree-invariant-types.base.stderr?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -1,238 +1,238 @@\n error[E0308]: mismatched types\n-  --> $DIR/variance-btree-invariant-types.rs:4:5\n+  --> $DIR/variance-btree-invariant-types.rs:8:5\n    |\n LL |     v\n    |     ^ lifetime mismatch\n    |\n    = note: expected struct `std::collections::btree_map::IterMut<'_, &'new (), _>`\n               found struct `std::collections::btree_map::IterMut<'_, &'static (), _>`\n note: the lifetime `'new` as defined here...\n-  --> $DIR/variance-btree-invariant-types.rs:3:21\n+  --> $DIR/variance-btree-invariant-types.rs:7:21\n    |\n LL | fn iter_cov_key<'a, 'new>(v: IterMut<'a, &'static (), ()>) -> IterMut<'a, &'new (), ()> {\n    |                     ^^^^\n    = note: ...does not necessarily outlive the static lifetime\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-btree-invariant-types.rs:7:5\n+  --> $DIR/variance-btree-invariant-types.rs:13:5\n    |\n LL |     v\n    |     ^ lifetime mismatch\n    |\n    = note: expected struct `std::collections::btree_map::IterMut<'_, _, &'new ()>`\n               found struct `std::collections::btree_map::IterMut<'_, _, &'static ()>`\n note: the lifetime `'new` as defined here...\n-  --> $DIR/variance-btree-invariant-types.rs:6:21\n+  --> $DIR/variance-btree-invariant-types.rs:12:21\n    |\n LL | fn iter_cov_val<'a, 'new>(v: IterMut<'a, (), &'static ()>) -> IterMut<'a, (), &'new ()> {\n    |                     ^^^^\n    = note: ...does not necessarily outlive the static lifetime\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-btree-invariant-types.rs:10:5\n+  --> $DIR/variance-btree-invariant-types.rs:18:5\n    |\n LL |     v\n    |     ^ lifetime mismatch\n    |\n    = note: expected struct `std::collections::btree_map::IterMut<'_, &'static (), _>`\n               found struct `std::collections::btree_map::IterMut<'_, &'new (), _>`\n note: the lifetime `'new` as defined here...\n-  --> $DIR/variance-btree-invariant-types.rs:9:24\n+  --> $DIR/variance-btree-invariant-types.rs:17:24\n    |\n LL | fn iter_contra_key<'a, 'new>(v: IterMut<'a, &'new (), ()>) -> IterMut<'a, &'static (), ()> {\n    |                        ^^^^\n    = note: ...does not necessarily outlive the static lifetime\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-btree-invariant-types.rs:13:5\n+  --> $DIR/variance-btree-invariant-types.rs:23:5\n    |\n LL |     v\n    |     ^ lifetime mismatch\n    |\n    = note: expected struct `std::collections::btree_map::IterMut<'_, _, &'static ()>`\n               found struct `std::collections::btree_map::IterMut<'_, _, &'new ()>`\n note: the lifetime `'new` as defined here...\n-  --> $DIR/variance-btree-invariant-types.rs:12:24\n+  --> $DIR/variance-btree-invariant-types.rs:22:24\n    |\n LL | fn iter_contra_val<'a, 'new>(v: IterMut<'a, (), &'new ()>) -> IterMut<'a, (), &'static ()> {\n    |                        ^^^^\n    = note: ...does not necessarily outlive the static lifetime\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-btree-invariant-types.rs:17:5\n+  --> $DIR/variance-btree-invariant-types.rs:29:5\n    |\n LL |     v\n    |     ^ lifetime mismatch\n    |\n    = note: expected struct `RangeMut<'_, &'new (), _>`\n               found struct `RangeMut<'_, &'static (), _>`\n note: the lifetime `'new` as defined here...\n-  --> $DIR/variance-btree-invariant-types.rs:16:22\n+  --> $DIR/variance-btree-invariant-types.rs:28:22\n    |\n LL | fn range_cov_key<'a, 'new>(v: RangeMut<'a, &'static (), ()>) -> RangeMut<'a, &'new (), ()> {\n    |                      ^^^^\n    = note: ...does not necessarily outlive the static lifetime\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-btree-invariant-types.rs:20:5\n+  --> $DIR/variance-btree-invariant-types.rs:34:5\n    |\n LL |     v\n    |     ^ lifetime mismatch\n    |\n    = note: expected struct `RangeMut<'_, _, &'new ()>`\n               found struct `RangeMut<'_, _, &'static ()>`\n note: the lifetime `'new` as defined here...\n-  --> $DIR/variance-btree-invariant-types.rs:19:22\n+  --> $DIR/variance-btree-invariant-types.rs:33:22\n    |\n LL | fn range_cov_val<'a, 'new>(v: RangeMut<'a, (), &'static ()>) -> RangeMut<'a, (), &'new ()> {\n    |                      ^^^^\n    = note: ...does not necessarily outlive the static lifetime\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-btree-invariant-types.rs:23:5\n+  --> $DIR/variance-btree-invariant-types.rs:39:5\n    |\n LL |     v\n    |     ^ lifetime mismatch\n    |\n    = note: expected struct `RangeMut<'_, &'static (), _>`\n               found struct `RangeMut<'_, &'new (), _>`\n note: the lifetime `'new` as defined here...\n-  --> $DIR/variance-btree-invariant-types.rs:22:25\n+  --> $DIR/variance-btree-invariant-types.rs:38:25\n    |\n LL | fn range_contra_key<'a, 'new>(v: RangeMut<'a, &'new (), ()>) -> RangeMut<'a, &'static (), ()> {\n    |                         ^^^^\n    = note: ...does not necessarily outlive the static lifetime\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-btree-invariant-types.rs:26:5\n+  --> $DIR/variance-btree-invariant-types.rs:44:5\n    |\n LL |     v\n    |     ^ lifetime mismatch\n    |\n    = note: expected struct `RangeMut<'_, _, &'static ()>`\n               found struct `RangeMut<'_, _, &'new ()>`\n note: the lifetime `'new` as defined here...\n-  --> $DIR/variance-btree-invariant-types.rs:25:25\n+  --> $DIR/variance-btree-invariant-types.rs:43:25\n    |\n LL | fn range_contra_val<'a, 'new>(v: RangeMut<'a, (), &'new ()>) -> RangeMut<'a, (), &'static ()> {\n    |                         ^^^^\n    = note: ...does not necessarily outlive the static lifetime\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-btree-invariant-types.rs:31:5\n+  --> $DIR/variance-btree-invariant-types.rs:51:5\n    |\n LL |     v\n    |     ^ lifetime mismatch\n    |\n    = note: expected struct `std::collections::btree_map::OccupiedEntry<'_, &'new (), _>`\n               found struct `std::collections::btree_map::OccupiedEntry<'_, &'static (), _>`\n note: the lifetime `'new` as defined here...\n-  --> $DIR/variance-btree-invariant-types.rs:29:20\n+  --> $DIR/variance-btree-invariant-types.rs:49:20\n    |\n LL | fn occ_cov_key<'a, 'new>(v: OccupiedEntry<'a, &'static (), ()>)\n    |                    ^^^^\n    = note: ...does not necessarily outlive the static lifetime\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-btree-invariant-types.rs:35:5\n+  --> $DIR/variance-btree-invariant-types.rs:57:5\n    |\n LL |     v\n    |     ^ lifetime mismatch\n    |\n    = note: expected struct `std::collections::btree_map::OccupiedEntry<'_, _, &'new ()>`\n               found struct `std::collections::btree_map::OccupiedEntry<'_, _, &'static ()>`\n note: the lifetime `'new` as defined here...\n-  --> $DIR/variance-btree-invariant-types.rs:33:20\n+  --> $DIR/variance-btree-invariant-types.rs:55:20\n    |\n LL | fn occ_cov_val<'a, 'new>(v: OccupiedEntry<'a, (), &'static ()>)\n    |                    ^^^^\n    = note: ...does not necessarily outlive the static lifetime\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-btree-invariant-types.rs:39:5\n+  --> $DIR/variance-btree-invariant-types.rs:63:5\n    |\n LL |     v\n    |     ^ lifetime mismatch\n    |\n    = note: expected struct `std::collections::btree_map::OccupiedEntry<'_, &'static (), _>`\n               found struct `std::collections::btree_map::OccupiedEntry<'_, &'new (), _>`\n note: the lifetime `'new` as defined here...\n-  --> $DIR/variance-btree-invariant-types.rs:37:23\n+  --> $DIR/variance-btree-invariant-types.rs:61:23\n    |\n LL | fn occ_contra_key<'a, 'new>(v: OccupiedEntry<'a, &'new (), ()>)\n    |                       ^^^^\n    = note: ...does not necessarily outlive the static lifetime\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-btree-invariant-types.rs:43:5\n+  --> $DIR/variance-btree-invariant-types.rs:69:5\n    |\n LL |     v\n    |     ^ lifetime mismatch\n    |\n    = note: expected struct `std::collections::btree_map::OccupiedEntry<'_, _, &'static ()>`\n               found struct `std::collections::btree_map::OccupiedEntry<'_, _, &'new ()>`\n note: the lifetime `'new` as defined here...\n-  --> $DIR/variance-btree-invariant-types.rs:41:23\n+  --> $DIR/variance-btree-invariant-types.rs:67:23\n    |\n LL | fn occ_contra_val<'a, 'new>(v: OccupiedEntry<'a, (), &'new ()>)\n    |                       ^^^^\n    = note: ...does not necessarily outlive the static lifetime\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-btree-invariant-types.rs:48:5\n+  --> $DIR/variance-btree-invariant-types.rs:76:5\n    |\n LL |     v\n    |     ^ lifetime mismatch\n    |\n    = note: expected struct `std::collections::btree_map::VacantEntry<'_, &'new (), _>`\n               found struct `std::collections::btree_map::VacantEntry<'_, &'static (), _>`\n note: the lifetime `'new` as defined here...\n-  --> $DIR/variance-btree-invariant-types.rs:46:20\n+  --> $DIR/variance-btree-invariant-types.rs:74:20\n    |\n LL | fn vac_cov_key<'a, 'new>(v: VacantEntry<'a, &'static (), ()>)\n    |                    ^^^^\n    = note: ...does not necessarily outlive the static lifetime\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-btree-invariant-types.rs:52:5\n+  --> $DIR/variance-btree-invariant-types.rs:82:5\n    |\n LL |     v\n    |     ^ lifetime mismatch\n    |\n    = note: expected struct `std::collections::btree_map::VacantEntry<'_, _, &'new ()>`\n               found struct `std::collections::btree_map::VacantEntry<'_, _, &'static ()>`\n note: the lifetime `'new` as defined here...\n-  --> $DIR/variance-btree-invariant-types.rs:50:20\n+  --> $DIR/variance-btree-invariant-types.rs:80:20\n    |\n LL | fn vac_cov_val<'a, 'new>(v: VacantEntry<'a, (), &'static ()>)\n    |                    ^^^^\n    = note: ...does not necessarily outlive the static lifetime\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-btree-invariant-types.rs:56:5\n+  --> $DIR/variance-btree-invariant-types.rs:88:5\n    |\n LL |     v\n    |     ^ lifetime mismatch\n    |\n    = note: expected struct `std::collections::btree_map::VacantEntry<'_, &'static (), _>`\n               found struct `std::collections::btree_map::VacantEntry<'_, &'new (), _>`\n note: the lifetime `'new` as defined here...\n-  --> $DIR/variance-btree-invariant-types.rs:54:23\n+  --> $DIR/variance-btree-invariant-types.rs:86:23\n    |\n LL | fn vac_contra_key<'a, 'new>(v: VacantEntry<'a, &'new (), ()>)\n    |                       ^^^^\n    = note: ...does not necessarily outlive the static lifetime\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-btree-invariant-types.rs:60:5\n+  --> $DIR/variance-btree-invariant-types.rs:94:5\n    |\n LL |     v\n    |     ^ lifetime mismatch\n    |\n    = note: expected struct `std::collections::btree_map::VacantEntry<'_, _, &'static ()>`\n               found struct `std::collections::btree_map::VacantEntry<'_, _, &'new ()>`\n note: the lifetime `'new` as defined here...\n-  --> $DIR/variance-btree-invariant-types.rs:58:23\n+  --> $DIR/variance-btree-invariant-types.rs:92:23\n    |\n LL | fn vac_contra_val<'a, 'new>(v: VacantEntry<'a, (), &'new ()>)\n    |                       ^^^^", "previous_filename": "src/test/ui/variance/variance-btree-invariant-types.stderr"}, {"sha": "991a7b0cdf078e43e312576dd8fbe59754e53536", "filename": "src/test/ui/variance/variance-btree-invariant-types.nll.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fvariance%2Fvariance-btree-invariant-types.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fvariance%2Fvariance-btree-invariant-types.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-btree-invariant-types.nll.stderr?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/variance-btree-invariant-types.rs:4:5\n+  --> $DIR/variance-btree-invariant-types.rs:8:5\n    |\n LL | fn iter_cov_key<'a, 'new>(v: IterMut<'a, &'static (), ()>) -> IterMut<'a, &'new (), ()> {\n    |                     ---- lifetime `'new` defined here\n@@ -11,7 +11,7 @@ LL |     v\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n-  --> $DIR/variance-btree-invariant-types.rs:7:5\n+  --> $DIR/variance-btree-invariant-types.rs:13:5\n    |\n LL | fn iter_cov_val<'a, 'new>(v: IterMut<'a, (), &'static ()>) -> IterMut<'a, (), &'new ()> {\n    |                     ---- lifetime `'new` defined here\n@@ -23,7 +23,7 @@ LL |     v\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n-  --> $DIR/variance-btree-invariant-types.rs:10:5\n+  --> $DIR/variance-btree-invariant-types.rs:18:5\n    |\n LL | fn iter_contra_key<'a, 'new>(v: IterMut<'a, &'new (), ()>) -> IterMut<'a, &'static (), ()> {\n    |                        ---- lifetime `'new` defined here\n@@ -35,7 +35,7 @@ LL |     v\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n-  --> $DIR/variance-btree-invariant-types.rs:13:5\n+  --> $DIR/variance-btree-invariant-types.rs:23:5\n    |\n LL | fn iter_contra_val<'a, 'new>(v: IterMut<'a, (), &'new ()>) -> IterMut<'a, (), &'static ()> {\n    |                        ---- lifetime `'new` defined here\n@@ -47,7 +47,7 @@ LL |     v\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n-  --> $DIR/variance-btree-invariant-types.rs:17:5\n+  --> $DIR/variance-btree-invariant-types.rs:29:5\n    |\n LL | fn range_cov_key<'a, 'new>(v: RangeMut<'a, &'static (), ()>) -> RangeMut<'a, &'new (), ()> {\n    |                      ---- lifetime `'new` defined here\n@@ -59,7 +59,7 @@ LL |     v\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n-  --> $DIR/variance-btree-invariant-types.rs:20:5\n+  --> $DIR/variance-btree-invariant-types.rs:34:5\n    |\n LL | fn range_cov_val<'a, 'new>(v: RangeMut<'a, (), &'static ()>) -> RangeMut<'a, (), &'new ()> {\n    |                      ---- lifetime `'new` defined here\n@@ -71,7 +71,7 @@ LL |     v\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n-  --> $DIR/variance-btree-invariant-types.rs:23:5\n+  --> $DIR/variance-btree-invariant-types.rs:39:5\n    |\n LL | fn range_contra_key<'a, 'new>(v: RangeMut<'a, &'new (), ()>) -> RangeMut<'a, &'static (), ()> {\n    |                         ---- lifetime `'new` defined here\n@@ -83,7 +83,7 @@ LL |     v\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n-  --> $DIR/variance-btree-invariant-types.rs:26:5\n+  --> $DIR/variance-btree-invariant-types.rs:44:5\n    |\n LL | fn range_contra_val<'a, 'new>(v: RangeMut<'a, (), &'new ()>) -> RangeMut<'a, (), &'static ()> {\n    |                         ---- lifetime `'new` defined here\n@@ -95,7 +95,7 @@ LL |     v\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n-  --> $DIR/variance-btree-invariant-types.rs:31:5\n+  --> $DIR/variance-btree-invariant-types.rs:51:5\n    |\n LL | fn occ_cov_key<'a, 'new>(v: OccupiedEntry<'a, &'static (), ()>)\n    |                    ---- lifetime `'new` defined here\n@@ -108,7 +108,7 @@ LL |     v\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n-  --> $DIR/variance-btree-invariant-types.rs:35:5\n+  --> $DIR/variance-btree-invariant-types.rs:57:5\n    |\n LL | fn occ_cov_val<'a, 'new>(v: OccupiedEntry<'a, (), &'static ()>)\n    |                    ---- lifetime `'new` defined here\n@@ -121,7 +121,7 @@ LL |     v\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n-  --> $DIR/variance-btree-invariant-types.rs:39:5\n+  --> $DIR/variance-btree-invariant-types.rs:63:5\n    |\n LL | fn occ_contra_key<'a, 'new>(v: OccupiedEntry<'a, &'new (), ()>)\n    |                       ---- lifetime `'new` defined here\n@@ -134,7 +134,7 @@ LL |     v\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n-  --> $DIR/variance-btree-invariant-types.rs:43:5\n+  --> $DIR/variance-btree-invariant-types.rs:69:5\n    |\n LL | fn occ_contra_val<'a, 'new>(v: OccupiedEntry<'a, (), &'new ()>)\n    |                       ---- lifetime `'new` defined here\n@@ -147,7 +147,7 @@ LL |     v\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n-  --> $DIR/variance-btree-invariant-types.rs:48:5\n+  --> $DIR/variance-btree-invariant-types.rs:76:5\n    |\n LL | fn vac_cov_key<'a, 'new>(v: VacantEntry<'a, &'static (), ()>)\n    |                    ---- lifetime `'new` defined here\n@@ -160,7 +160,7 @@ LL |     v\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n-  --> $DIR/variance-btree-invariant-types.rs:52:5\n+  --> $DIR/variance-btree-invariant-types.rs:82:5\n    |\n LL | fn vac_cov_val<'a, 'new>(v: VacantEntry<'a, (), &'static ()>)\n    |                    ---- lifetime `'new` defined here\n@@ -173,7 +173,7 @@ LL |     v\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n-  --> $DIR/variance-btree-invariant-types.rs:56:5\n+  --> $DIR/variance-btree-invariant-types.rs:88:5\n    |\n LL | fn vac_contra_key<'a, 'new>(v: VacantEntry<'a, &'new (), ()>)\n    |                       ---- lifetime `'new` defined here\n@@ -186,7 +186,7 @@ LL |     v\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n-  --> $DIR/variance-btree-invariant-types.rs:60:5\n+  --> $DIR/variance-btree-invariant-types.rs:94:5\n    |\n LL | fn vac_contra_val<'a, 'new>(v: VacantEntry<'a, (), &'new ()>)\n    |                       ---- lifetime `'new` defined here"}, {"sha": "7ddf6b294a5a19221c1c6f8d04f4b717ec677316", "filename": "src/test/ui/variance/variance-btree-invariant-types.rs", "status": "modified", "additions": 52, "deletions": 16, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fvariance%2Fvariance-btree-invariant-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fvariance%2Fvariance-btree-invariant-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-btree-invariant-types.rs?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -1,63 +1,99 @@\n use std::collections::btree_map::{IterMut, OccupiedEntry, RangeMut, VacantEntry};\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n fn iter_cov_key<'a, 'new>(v: IterMut<'a, &'static (), ()>) -> IterMut<'a, &'new (), ()> {\n-    v //~ ERROR mismatched types\n+    v\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ lifetime may not live long enough\n }\n fn iter_cov_val<'a, 'new>(v: IterMut<'a, (), &'static ()>) -> IterMut<'a, (), &'new ()> {\n-    v //~ ERROR mismatched types\n+    v\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ lifetime may not live long enough\n }\n fn iter_contra_key<'a, 'new>(v: IterMut<'a, &'new (), ()>) -> IterMut<'a, &'static (), ()> {\n-    v //~ ERROR mismatched types\n+    v\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ lifetime may not live long enough\n }\n fn iter_contra_val<'a, 'new>(v: IterMut<'a, (), &'new ()>) -> IterMut<'a, (), &'static ()> {\n-    v //~ ERROR mismatched types\n+    v\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ lifetime may not live long enough\n }\n \n fn range_cov_key<'a, 'new>(v: RangeMut<'a, &'static (), ()>) -> RangeMut<'a, &'new (), ()> {\n-    v //~ ERROR mismatched types\n+    v\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ lifetime may not live long enough\n }\n fn range_cov_val<'a, 'new>(v: RangeMut<'a, (), &'static ()>) -> RangeMut<'a, (), &'new ()> {\n-    v //~ ERROR mismatched types\n+    v\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ lifetime may not live long enough\n }\n fn range_contra_key<'a, 'new>(v: RangeMut<'a, &'new (), ()>) -> RangeMut<'a, &'static (), ()> {\n-    v //~ ERROR mismatched types\n+    v\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ lifetime may not live long enough\n }\n fn range_contra_val<'a, 'new>(v: RangeMut<'a, (), &'new ()>) -> RangeMut<'a, (), &'static ()> {\n-    v //~ ERROR mismatched types\n+    v\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ lifetime may not live long enough\n }\n \n fn occ_cov_key<'a, 'new>(v: OccupiedEntry<'a, &'static (), ()>)\n                          -> OccupiedEntry<'a, &'new (), ()> {\n-    v //~ ERROR mismatched types\n+    v\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ lifetime may not live long enough\n }\n fn occ_cov_val<'a, 'new>(v: OccupiedEntry<'a, (), &'static ()>)\n                          -> OccupiedEntry<'a, (), &'new ()> {\n-    v //~ ERROR mismatched types\n+    v\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ lifetime may not live long enough\n }\n fn occ_contra_key<'a, 'new>(v: OccupiedEntry<'a, &'new (), ()>)\n                             -> OccupiedEntry<'a, &'static (), ()> {\n-    v //~ ERROR mismatched types\n+    v\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ lifetime may not live long enough\n }\n fn occ_contra_val<'a, 'new>(v: OccupiedEntry<'a, (), &'new ()>)\n                             -> OccupiedEntry<'a, (), &'static ()> {\n-    v //~ ERROR mismatched types\n+    v\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ lifetime may not live long enough\n }\n \n fn vac_cov_key<'a, 'new>(v: VacantEntry<'a, &'static (), ()>)\n                          -> VacantEntry<'a, &'new (), ()> {\n-    v //~ ERROR mismatched types\n+    v\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ lifetime may not live long enough\n }\n fn vac_cov_val<'a, 'new>(v: VacantEntry<'a, (), &'static ()>)\n                          -> VacantEntry<'a, (), &'new ()> {\n-    v //~ ERROR mismatched types\n+    v\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ lifetime may not live long enough\n }\n fn vac_contra_key<'a, 'new>(v: VacantEntry<'a, &'new (), ()>)\n                             -> VacantEntry<'a, &'static (), ()> {\n-    v //~ ERROR mismatched types\n+    v\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ lifetime may not live long enough\n }\n fn vac_contra_val<'a, 'new>(v: VacantEntry<'a, (), &'new ()>)\n                             -> VacantEntry<'a, (), &'static ()> {\n-    v //~ ERROR mismatched types\n+    v\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ lifetime may not live long enough\n }\n \n "}, {"sha": "e3180b6d984765246735070b4a71b4fb7a58e05b", "filename": "src/test/ui/variance/variance-cell-is-invariant.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fvariance%2Fvariance-cell-is-invariant.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fvariance%2Fvariance-cell-is-invariant.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-cell-is-invariant.base.stderr?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/variance-cell-is-invariant.rs:14:25\n+  --> $DIR/variance-cell-is-invariant.rs:18:25\n    |\n LL | fn use_<'short,'long>(c: Foo<'short>,\n    |                          ----------- these two types are declared with different lifetimes...", "previous_filename": "src/test/ui/variance/variance-cell-is-invariant.stderr"}, {"sha": "c2e93d99c43f04a5509026dc679e4331a2bf4cfa", "filename": "src/test/ui/variance/variance-cell-is-invariant.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fvariance%2Fvariance-cell-is-invariant.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fvariance%2Fvariance-cell-is-invariant.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-cell-is-invariant.nll.stderr?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/variance-cell-is-invariant.rs:14:12\n+  --> $DIR/variance-cell-is-invariant.rs:18:12\n    |\n LL | fn use_<'short,'long>(c: Foo<'short>,\n    |         ------ ----- lifetime `'long` defined here"}, {"sha": "b8b73147d0eea58d5fa06e70b363acbbf75d01ae", "filename": "src/test/ui/variance/variance-cell-is-invariant.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fvariance%2Fvariance-cell-is-invariant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fvariance%2Fvariance-cell-is-invariant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-cell-is-invariant.rs?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -1,6 +1,10 @@\n // Test that Cell is considered invariant with respect to its\n // type.\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n use std::cell::Cell;\n \n struct Foo<'a> {\n@@ -11,7 +15,9 @@ fn use_<'short,'long>(c: Foo<'short>,\n                       s: &'short isize,\n                       l: &'long isize,\n                       _where:Option<&'short &'long ()>) {\n-    let _: Foo<'long> = c; //~ ERROR E0623\n+    let _: Foo<'long> = c;\n+    //[base]~^ ERROR E0623\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn main() {"}, {"sha": "19b8b9d5aa05cf586329f275587a90b170bfc6ea", "filename": "src/test/ui/variance/variance-contravariant-arg-object.base.stderr", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-object.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-object.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-object.base.stderr?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -1,37 +1,37 @@\n error[E0308]: mismatched types\n-  --> $DIR/variance-contravariant-arg-object.rs:14:5\n+  --> $DIR/variance-contravariant-arg-object.rs:18:5\n    |\n LL |     v\n    |     ^ lifetime mismatch\n    |\n    = note: expected trait object `dyn Get<&'min i32>`\n               found trait object `dyn Get<&'max i32>`\n note: the lifetime `'min` as defined here...\n-  --> $DIR/variance-contravariant-arg-object.rs:10:21\n+  --> $DIR/variance-contravariant-arg-object.rs:14:21\n    |\n LL | fn get_min_from_max<'min, 'max>(v: Box<dyn Get<&'max i32>>)\n    |                     ^^^^\n note: ...does not necessarily outlive the lifetime `'max` as defined here\n-  --> $DIR/variance-contravariant-arg-object.rs:10:27\n+  --> $DIR/variance-contravariant-arg-object.rs:14:27\n    |\n LL | fn get_min_from_max<'min, 'max>(v: Box<dyn Get<&'max i32>>)\n    |                           ^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-contravariant-arg-object.rs:22:5\n+  --> $DIR/variance-contravariant-arg-object.rs:28:5\n    |\n LL |     v\n    |     ^ lifetime mismatch\n    |\n    = note: expected trait object `dyn Get<&'max i32>`\n               found trait object `dyn Get<&'min i32>`\n note: the lifetime `'min` as defined here...\n-  --> $DIR/variance-contravariant-arg-object.rs:17:21\n+  --> $DIR/variance-contravariant-arg-object.rs:23:21\n    |\n LL | fn get_max_from_min<'min, 'max, G>(v: Box<dyn Get<&'min i32>>)\n    |                     ^^^^\n note: ...does not necessarily outlive the lifetime `'max` as defined here\n-  --> $DIR/variance-contravariant-arg-object.rs:17:27\n+  --> $DIR/variance-contravariant-arg-object.rs:23:27\n    |\n LL | fn get_max_from_min<'min, 'max, G>(v: Box<dyn Get<&'min i32>>)\n    |                           ^^^^", "previous_filename": "src/test/ui/variance/variance-contravariant-arg-object.stderr"}, {"sha": "4071a41703e2820f97a0f1ba0d3af33adbd2980c", "filename": "src/test/ui/variance/variance-contravariant-arg-object.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-object.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-object.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-object.nll.stderr?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/variance-contravariant-arg-object.rs:14:5\n+  --> $DIR/variance-contravariant-arg-object.rs:18:5\n    |\n LL | fn get_min_from_max<'min, 'max>(v: Box<dyn Get<&'max i32>>)\n    |                     ----  ---- lifetime `'max` defined here\n@@ -12,7 +12,7 @@ LL |     v\n    = help: consider adding the following bound: `'min: 'max`\n \n error: lifetime may not live long enough\n-  --> $DIR/variance-contravariant-arg-object.rs:22:5\n+  --> $DIR/variance-contravariant-arg-object.rs:28:5\n    |\n LL | fn get_max_from_min<'min, 'max, G>(v: Box<dyn Get<&'min i32>>)\n    |                     ----  ---- lifetime `'max` defined here"}, {"sha": "dab42c35218bf6168392d888261404620eb01e9f", "filename": "src/test/ui/variance/variance-contravariant-arg-object.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-object.rs?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -3,6 +3,10 @@\n // Test that even when `T` is only used in contravariant position, it\n // is treated as invariant.\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n trait Get<T> : 'static {\n     fn get(&self, t: T);\n }\n@@ -11,15 +15,19 @@ fn get_min_from_max<'min, 'max>(v: Box<dyn Get<&'max i32>>)\n                                 -> Box<dyn Get<&'min i32>>\n     where 'max : 'min\n {\n-    v //~ ERROR mismatched types\n+    v\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn get_max_from_min<'min, 'max, G>(v: Box<dyn Get<&'min i32>>)\n                                    -> Box<dyn Get<&'max i32>>\n     where 'max : 'min\n {\n     // Previously OK:\n-    v //~ ERROR mismatched types\n+    v\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn main() { }"}, {"sha": "56cf84590107c60a876fc76146ae639002369d8b", "filename": "src/test/ui/variance/variance-contravariant-arg-trait-match.base.stderr", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-trait-match.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-trait-match.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-trait-match.base.stderr?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -1,37 +1,37 @@\n error[E0308]: mismatched types\n-  --> $DIR/variance-contravariant-arg-trait-match.rs:13:5\n+  --> $DIR/variance-contravariant-arg-trait-match.rs:17:5\n    |\n LL |     impls_get::<G,&'min i32>()\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected type `Get<&'min i32>`\n               found type `Get<&'max i32>`\n note: the lifetime `'min` as defined here...\n-  --> $DIR/variance-contravariant-arg-trait-match.rs:10:21\n+  --> $DIR/variance-contravariant-arg-trait-match.rs:14:21\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n    |                     ^^^^\n note: ...does not necessarily outlive the lifetime `'max` as defined here\n-  --> $DIR/variance-contravariant-arg-trait-match.rs:10:27\n+  --> $DIR/variance-contravariant-arg-trait-match.rs:14:27\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n    |                           ^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-contravariant-arg-trait-match.rs:21:5\n+  --> $DIR/variance-contravariant-arg-trait-match.rs:27:5\n    |\n LL |     impls_get::<G,&'max i32>()\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected type `Get<&'max i32>`\n               found type `Get<&'min i32>`\n note: the lifetime `'min` as defined here...\n-  --> $DIR/variance-contravariant-arg-trait-match.rs:16:21\n+  --> $DIR/variance-contravariant-arg-trait-match.rs:22:21\n    |\n LL | fn get_max_from_min<'min, 'max, G>()\n    |                     ^^^^\n note: ...does not necessarily outlive the lifetime `'max` as defined here\n-  --> $DIR/variance-contravariant-arg-trait-match.rs:16:27\n+  --> $DIR/variance-contravariant-arg-trait-match.rs:22:27\n    |\n LL | fn get_max_from_min<'min, 'max, G>()\n    |                           ^^^^", "previous_filename": "src/test/ui/variance/variance-contravariant-arg-trait-match.stderr"}, {"sha": "6ca8f5ed4cce6581f2863e93628fa651fe8d9f80", "filename": "src/test/ui/variance/variance-contravariant-arg-trait-match.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-trait-match.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-trait-match.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-trait-match.nll.stderr?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/variance-contravariant-arg-trait-match.rs:13:5\n+  --> $DIR/variance-contravariant-arg-trait-match.rs:17:5\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n    |                     ----  ---- lifetime `'max` defined here\n@@ -12,7 +12,7 @@ LL |     impls_get::<G,&'min i32>()\n    = help: consider adding the following bound: `'min: 'max`\n \n error: lifetime may not live long enough\n-  --> $DIR/variance-contravariant-arg-trait-match.rs:21:5\n+  --> $DIR/variance-contravariant-arg-trait-match.rs:27:5\n    |\n LL | fn get_max_from_min<'min, 'max, G>()\n    |                     ----  ---- lifetime `'max` defined here"}, {"sha": "11513d5411cfba8f8d269fe9ae16239725d33356", "filename": "src/test/ui/variance/variance-contravariant-arg-trait-match.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-trait-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-trait-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-trait-match.rs?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -3,22 +3,30 @@\n // Test that even when `T` is only used in contravariant position, it\n // is treated as invariant.\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n trait Get<T> {\n     fn get(&self, t: T);\n }\n \n fn get_min_from_max<'min, 'max, G>()\n     where 'max : 'min, G : Get<&'max i32>\n {\n-    impls_get::<G,&'min i32>() //~ ERROR mismatched types\n+    impls_get::<G,&'min i32>()\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn get_max_from_min<'min, 'max, G>()\n     where 'max : 'min, G : Get<&'min i32>\n {\n     // Previously OK, but now an error because traits are invariant:\n \n-    impls_get::<G,&'max i32>() //~ ERROR mismatched types\n+    impls_get::<G,&'max i32>()\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn impls_get<G,T>() where G : Get<T> { }"}, {"sha": "2ccab2ee5f089df76f129514d52b62b0e078ea33", "filename": "src/test/ui/variance/variance-contravariant-self-trait-match.base.stderr", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-self-trait-match.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-self-trait-match.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-self-trait-match.base.stderr?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -1,37 +1,37 @@\n error[E0308]: mismatched types\n-  --> $DIR/variance-contravariant-self-trait-match.rs:13:5\n+  --> $DIR/variance-contravariant-self-trait-match.rs:17:5\n    |\n LL |     impls_get::<&'min G>();\n    |     ^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected type `<&'min G as Get>`\n               found type `<&'max G as Get>`\n note: the lifetime `'min` as defined here...\n-  --> $DIR/variance-contravariant-self-trait-match.rs:10:21\n+  --> $DIR/variance-contravariant-self-trait-match.rs:14:21\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n    |                     ^^^^\n note: ...does not necessarily outlive the lifetime `'max` as defined here\n-  --> $DIR/variance-contravariant-self-trait-match.rs:10:27\n+  --> $DIR/variance-contravariant-self-trait-match.rs:14:27\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n    |                           ^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-contravariant-self-trait-match.rs:22:5\n+  --> $DIR/variance-contravariant-self-trait-match.rs:28:5\n    |\n LL |     impls_get::<&'max G>();\n    |     ^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected type `<&'max G as Get>`\n               found type `<&'min G as Get>`\n note: the lifetime `'min` as defined here...\n-  --> $DIR/variance-contravariant-self-trait-match.rs:16:21\n+  --> $DIR/variance-contravariant-self-trait-match.rs:22:21\n    |\n LL | fn get_max_from_min<'min, 'max, G>()\n    |                     ^^^^\n note: ...does not necessarily outlive the lifetime `'max` as defined here\n-  --> $DIR/variance-contravariant-self-trait-match.rs:16:27\n+  --> $DIR/variance-contravariant-self-trait-match.rs:22:27\n    |\n LL | fn get_max_from_min<'min, 'max, G>()\n    |                           ^^^^", "previous_filename": "src/test/ui/variance/variance-contravariant-self-trait-match.stderr"}, {"sha": "d2c549b1f715daa85c5c18657f188f32597836a7", "filename": "src/test/ui/variance/variance-contravariant-self-trait-match.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-self-trait-match.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-self-trait-match.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-self-trait-match.nll.stderr?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/variance-contravariant-self-trait-match.rs:13:5\n+  --> $DIR/variance-contravariant-self-trait-match.rs:17:5\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n    |                     ----  ---- lifetime `'max` defined here\n@@ -12,7 +12,7 @@ LL |     impls_get::<&'min G>();\n    = help: consider adding the following bound: `'min: 'max`\n \n error: lifetime may not live long enough\n-  --> $DIR/variance-contravariant-self-trait-match.rs:22:5\n+  --> $DIR/variance-contravariant-self-trait-match.rs:28:5\n    |\n LL | fn get_max_from_min<'min, 'max, G>()\n    |                     ----  ---- lifetime `'max` defined here"}, {"sha": "f8d7c68fafe73a13d8418940b59abfce4c7d3807", "filename": "src/test/ui/variance/variance-contravariant-self-trait-match.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-self-trait-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-self-trait-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-self-trait-match.rs?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -3,14 +3,20 @@\n // Test that even when `Self` is only used in contravariant position, it\n // is treated as invariant.\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n trait Get {\n     fn get(&self);\n }\n \n fn get_min_from_max<'min, 'max, G>()\n     where 'max : 'min, G : 'max, &'max G : Get\n {\n-    impls_get::<&'min G>(); //~ ERROR mismatched types\n+    impls_get::<&'min G>();\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn get_max_from_min<'min, 'max, G>()\n@@ -19,7 +25,9 @@ fn get_max_from_min<'min, 'max, G>()\n     // Previously OK, but now error because traits are invariant with\n     // respect to all inputs.\n \n-    impls_get::<&'max G>(); //~ ERROR mismatched types\n+    impls_get::<&'max G>();\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn impls_get<G>() where G : Get { }"}, {"sha": "3a97875fe0ec07433301a0256c40e69bc8bf0d31", "filename": "src/test/ui/variance/variance-covariant-arg-object.base.stderr", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-object.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-object.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-object.base.stderr?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -1,37 +1,37 @@\n error[E0308]: mismatched types\n-  --> $DIR/variance-invariant-arg-object.rs:11:5\n+  --> $DIR/variance-covariant-arg-object.rs:19:5\n    |\n LL |     v\n    |     ^ lifetime mismatch\n    |\n    = note: expected trait object `dyn Get<&'min i32>`\n               found trait object `dyn Get<&'max i32>`\n note: the lifetime `'min` as defined here...\n-  --> $DIR/variance-invariant-arg-object.rs:7:21\n+  --> $DIR/variance-covariant-arg-object.rs:14:21\n    |\n LL | fn get_min_from_max<'min, 'max>(v: Box<dyn Get<&'max i32>>)\n    |                     ^^^^\n note: ...does not necessarily outlive the lifetime `'max` as defined here\n-  --> $DIR/variance-invariant-arg-object.rs:7:27\n+  --> $DIR/variance-covariant-arg-object.rs:14:27\n    |\n LL | fn get_min_from_max<'min, 'max>(v: Box<dyn Get<&'max i32>>)\n    |                           ^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-invariant-arg-object.rs:18:5\n+  --> $DIR/variance-covariant-arg-object.rs:28:5\n    |\n LL |     v\n    |     ^ lifetime mismatch\n    |\n    = note: expected trait object `dyn Get<&'max i32>`\n               found trait object `dyn Get<&'min i32>`\n note: the lifetime `'min` as defined here...\n-  --> $DIR/variance-invariant-arg-object.rs:14:21\n+  --> $DIR/variance-covariant-arg-object.rs:24:21\n    |\n LL | fn get_max_from_min<'min, 'max, G>(v: Box<dyn Get<&'min i32>>)\n    |                     ^^^^\n note: ...does not necessarily outlive the lifetime `'max` as defined here\n-  --> $DIR/variance-invariant-arg-object.rs:14:27\n+  --> $DIR/variance-covariant-arg-object.rs:24:27\n    |\n LL | fn get_max_from_min<'min, 'max, G>(v: Box<dyn Get<&'min i32>>)\n    |                           ^^^^", "previous_filename": "src/test/ui/variance/variance-invariant-arg-object.stderr"}, {"sha": "1b2ec61825f8f75001f799c946996464bd1d3c13", "filename": "src/test/ui/variance/variance-covariant-arg-object.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-object.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-object.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-object.nll.stderr?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/variance-covariant-arg-object.rs:15:5\n+  --> $DIR/variance-covariant-arg-object.rs:19:5\n    |\n LL | fn get_min_from_max<'min, 'max>(v: Box<dyn Get<&'max i32>>)\n    |                     ----  ---- lifetime `'max` defined here\n@@ -12,7 +12,7 @@ LL |     v\n    = help: consider adding the following bound: `'min: 'max`\n \n error: lifetime may not live long enough\n-  --> $DIR/variance-covariant-arg-object.rs:22:5\n+  --> $DIR/variance-covariant-arg-object.rs:28:5\n    |\n LL | fn get_max_from_min<'min, 'max, G>(v: Box<dyn Get<&'min i32>>)\n    |                     ----  ---- lifetime `'max` defined here"}, {"sha": "20f74a3987e126c3ae36c22f66792f817367f532", "filename": "src/test/ui/variance/variance-covariant-arg-object.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-object.rs?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -3,6 +3,10 @@\n // Test that even when `T` is only used in covariant position, it\n // is treated as invariant.\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n trait Get<T> : 'static {\n     fn get(&self) -> T;\n }\n@@ -12,14 +16,18 @@ fn get_min_from_max<'min, 'max>(v: Box<dyn Get<&'max i32>>)\n     where 'max : 'min\n {\n     // Previously OK, now an error as traits are invariant.\n-    v //~ ERROR mismatched types\n+    v\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn get_max_from_min<'min, 'max, G>(v: Box<dyn Get<&'min i32>>)\n                                    -> Box<dyn Get<&'max i32>>\n     where 'max : 'min\n {\n-    v //~ ERROR mismatched types\n+    v\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn main() { }"}, {"sha": "1749a871230cffca3e49b01e8f9883f3815d6b93", "filename": "src/test/ui/variance/variance-covariant-arg-trait-match.base.stderr", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-trait-match.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-trait-match.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-trait-match.base.stderr?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -1,37 +1,37 @@\n error[E0308]: mismatched types\n-  --> $DIR/variance-invariant-arg-trait-match.rs:10:5\n+  --> $DIR/variance-covariant-arg-trait-match.rs:18:5\n    |\n LL |     impls_get::<G,&'min i32>()\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected type `Get<&'min i32>`\n               found type `Get<&'max i32>`\n note: the lifetime `'min` as defined here...\n-  --> $DIR/variance-invariant-arg-trait-match.rs:7:21\n+  --> $DIR/variance-covariant-arg-trait-match.rs:14:21\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n    |                     ^^^^\n note: ...does not necessarily outlive the lifetime `'max` as defined here\n-  --> $DIR/variance-invariant-arg-trait-match.rs:7:27\n+  --> $DIR/variance-covariant-arg-trait-match.rs:14:27\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n    |                           ^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-invariant-arg-trait-match.rs:16:5\n+  --> $DIR/variance-covariant-arg-trait-match.rs:26:5\n    |\n LL |     impls_get::<G,&'max i32>()\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected type `Get<&'max i32>`\n               found type `Get<&'min i32>`\n note: the lifetime `'min` as defined here...\n-  --> $DIR/variance-invariant-arg-trait-match.rs:13:21\n+  --> $DIR/variance-covariant-arg-trait-match.rs:23:21\n    |\n LL | fn get_max_from_min<'min, 'max, G>()\n    |                     ^^^^\n note: ...does not necessarily outlive the lifetime `'max` as defined here\n-  --> $DIR/variance-invariant-arg-trait-match.rs:13:27\n+  --> $DIR/variance-covariant-arg-trait-match.rs:23:27\n    |\n LL | fn get_max_from_min<'min, 'max, G>()\n    |                           ^^^^", "previous_filename": "src/test/ui/variance/variance-invariant-arg-trait-match.stderr"}, {"sha": "870af48b3e92ac8961af73950d3ffb5b84ac4870", "filename": "src/test/ui/variance/variance-covariant-arg-trait-match.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-trait-match.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-trait-match.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-trait-match.nll.stderr?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/variance-covariant-arg-trait-match.rs:14:5\n+  --> $DIR/variance-covariant-arg-trait-match.rs:18:5\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n    |                     ----  ---- lifetime `'max` defined here\n@@ -12,7 +12,7 @@ LL |     impls_get::<G,&'min i32>()\n    = help: consider adding the following bound: `'min: 'max`\n \n error: lifetime may not live long enough\n-  --> $DIR/variance-covariant-arg-trait-match.rs:20:5\n+  --> $DIR/variance-covariant-arg-trait-match.rs:26:5\n    |\n LL | fn get_max_from_min<'min, 'max, G>()\n    |                     ----  ---- lifetime `'max` defined here"}, {"sha": "d3d66d3fc4ba13820d203628bcacd6ddf23f7102", "filename": "src/test/ui/variance/variance-covariant-arg-trait-match.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-trait-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-trait-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-trait-match.rs?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -3,6 +3,10 @@\n // Test that even when `T` is only used in covariant position, it\n // is treated as invariant.\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n trait Get<T> {\n     fn get(&self) -> T;\n }\n@@ -11,13 +15,17 @@ fn get_min_from_max<'min, 'max, G>()\n     where 'max : 'min, G : Get<&'max i32>\n {\n     // Previously OK, now an error as traits are invariant.\n-    impls_get::<G,&'min i32>() //~ ERROR mismatched types\n+    impls_get::<G,&'min i32>()\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn get_max_from_min<'min, 'max, G>()\n     where 'max : 'min, G : Get<&'min i32>\n {\n-    impls_get::<G,&'max i32>() //~ ERROR mismatched types\n+    impls_get::<G,&'max i32>()\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn impls_get<G,T>() where G : Get<T> { }"}, {"sha": "94afc010e2134d9fe1440726162866bbc5b361bb", "filename": "src/test/ui/variance/variance-covariant-self-trait-match.base.stderr", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-self-trait-match.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-self-trait-match.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-self-trait-match.base.stderr?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -1,37 +1,37 @@\n error[E0308]: mismatched types\n-  --> $DIR/variance-covariant-self-trait-match.rs:14:5\n+  --> $DIR/variance-covariant-self-trait-match.rs:18:5\n    |\n LL |     impls_get::<&'min G>();\n    |     ^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected type `<&'min G as Get>`\n               found type `<&'max G as Get>`\n note: the lifetime `'min` as defined here...\n-  --> $DIR/variance-covariant-self-trait-match.rs:10:21\n+  --> $DIR/variance-covariant-self-trait-match.rs:14:21\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n    |                     ^^^^\n note: ...does not necessarily outlive the lifetime `'max` as defined here\n-  --> $DIR/variance-covariant-self-trait-match.rs:10:27\n+  --> $DIR/variance-covariant-self-trait-match.rs:14:27\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n    |                           ^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-covariant-self-trait-match.rs:20:5\n+  --> $DIR/variance-covariant-self-trait-match.rs:26:5\n    |\n LL |     impls_get::<&'max G>();\n    |     ^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected type `<&'max G as Get>`\n               found type `<&'min G as Get>`\n note: the lifetime `'min` as defined here...\n-  --> $DIR/variance-covariant-self-trait-match.rs:17:21\n+  --> $DIR/variance-covariant-self-trait-match.rs:23:21\n    |\n LL | fn get_max_from_min<'min, 'max, G>()\n    |                     ^^^^\n note: ...does not necessarily outlive the lifetime `'max` as defined here\n-  --> $DIR/variance-covariant-self-trait-match.rs:17:27\n+  --> $DIR/variance-covariant-self-trait-match.rs:23:27\n    |\n LL | fn get_max_from_min<'min, 'max, G>()\n    |                           ^^^^", "previous_filename": "src/test/ui/variance/variance-covariant-self-trait-match.stderr"}, {"sha": "14da2d2a552dbdce957cd08a21a5ca68f09d0d60", "filename": "src/test/ui/variance/variance-covariant-self-trait-match.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-self-trait-match.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-self-trait-match.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-self-trait-match.nll.stderr?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/variance-covariant-self-trait-match.rs:14:5\n+  --> $DIR/variance-covariant-self-trait-match.rs:18:5\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n    |                     ----  ---- lifetime `'max` defined here\n@@ -12,7 +12,7 @@ LL |     impls_get::<&'min G>();\n    = help: consider adding the following bound: `'min: 'max`\n \n error: lifetime may not live long enough\n-  --> $DIR/variance-covariant-self-trait-match.rs:20:5\n+  --> $DIR/variance-covariant-self-trait-match.rs:26:5\n    |\n LL | fn get_max_from_min<'min, 'max, G>()\n    |                     ----  ---- lifetime `'max` defined here"}, {"sha": "ece450173ca8d553750608cdf4171124db494ec8", "filename": "src/test/ui/variance/variance-covariant-self-trait-match.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-self-trait-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-self-trait-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-self-trait-match.rs?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -3,6 +3,10 @@\n // Test that even when `Self` is only used in covariant position, it\n // is treated as invariant.\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n trait Get {\n     fn get() -> Self;\n }\n@@ -11,13 +15,17 @@ fn get_min_from_max<'min, 'max, G>()\n     where 'max : 'min, G : 'max, &'max G : Get\n {\n     // Previously OK, now an error as traits are invariant.\n-    impls_get::<&'min G>(); //~ ERROR mismatched types\n+    impls_get::<&'min G>();\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn get_max_from_min<'min, 'max, G>()\n     where 'max : 'min, G : 'max, &'min G : Get\n {\n-    impls_get::<&'max G>(); //~ ERROR mismatched types\n+    impls_get::<&'max G>();\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn impls_get<G>() where G : Get { }"}, {"sha": "ec9271e902fed39a490aaba39673b230a5cbc531", "filename": "src/test/ui/variance/variance-invariant-arg-object.base.stderr", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-object.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-object.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-object.base.stderr?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -1,37 +1,37 @@\n error[E0308]: mismatched types\n-  --> $DIR/variance-covariant-arg-object.rs:15:5\n+  --> $DIR/variance-invariant-arg-object.rs:15:5\n    |\n LL |     v\n    |     ^ lifetime mismatch\n    |\n    = note: expected trait object `dyn Get<&'min i32>`\n               found trait object `dyn Get<&'max i32>`\n note: the lifetime `'min` as defined here...\n-  --> $DIR/variance-covariant-arg-object.rs:10:21\n+  --> $DIR/variance-invariant-arg-object.rs:11:21\n    |\n LL | fn get_min_from_max<'min, 'max>(v: Box<dyn Get<&'max i32>>)\n    |                     ^^^^\n note: ...does not necessarily outlive the lifetime `'max` as defined here\n-  --> $DIR/variance-covariant-arg-object.rs:10:27\n+  --> $DIR/variance-invariant-arg-object.rs:11:27\n    |\n LL | fn get_min_from_max<'min, 'max>(v: Box<dyn Get<&'max i32>>)\n    |                           ^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-covariant-arg-object.rs:22:5\n+  --> $DIR/variance-invariant-arg-object.rs:24:5\n    |\n LL |     v\n    |     ^ lifetime mismatch\n    |\n    = note: expected trait object `dyn Get<&'max i32>`\n               found trait object `dyn Get<&'min i32>`\n note: the lifetime `'min` as defined here...\n-  --> $DIR/variance-covariant-arg-object.rs:18:21\n+  --> $DIR/variance-invariant-arg-object.rs:20:21\n    |\n LL | fn get_max_from_min<'min, 'max, G>(v: Box<dyn Get<&'min i32>>)\n    |                     ^^^^\n note: ...does not necessarily outlive the lifetime `'max` as defined here\n-  --> $DIR/variance-covariant-arg-object.rs:18:27\n+  --> $DIR/variance-invariant-arg-object.rs:20:27\n    |\n LL | fn get_max_from_min<'min, 'max, G>(v: Box<dyn Get<&'min i32>>)\n    |                           ^^^^", "previous_filename": "src/test/ui/variance/variance-covariant-arg-object.stderr"}, {"sha": "47364f426566346eac6e67feb313e83da291616d", "filename": "src/test/ui/variance/variance-invariant-arg-object.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-object.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-object.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-object.nll.stderr?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/variance-invariant-arg-object.rs:11:5\n+  --> $DIR/variance-invariant-arg-object.rs:15:5\n    |\n LL | fn get_min_from_max<'min, 'max>(v: Box<dyn Get<&'max i32>>)\n    |                     ----  ---- lifetime `'max` defined here\n@@ -12,7 +12,7 @@ LL |     v\n    = help: consider adding the following bound: `'min: 'max`\n \n error: lifetime may not live long enough\n-  --> $DIR/variance-invariant-arg-object.rs:18:5\n+  --> $DIR/variance-invariant-arg-object.rs:24:5\n    |\n LL | fn get_max_from_min<'min, 'max, G>(v: Box<dyn Get<&'min i32>>)\n    |                     ----  ---- lifetime `'max` defined here"}, {"sha": "cc8820fbac69e97b79edda9118611cb8e36a638f", "filename": "src/test/ui/variance/variance-invariant-arg-object.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-object.rs?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -1,5 +1,9 @@\n #![allow(dead_code)]\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n trait Get<T> : 'static {\n     fn get(&self, t: T) -> T;\n }\n@@ -8,14 +12,18 @@ fn get_min_from_max<'min, 'max>(v: Box<dyn Get<&'max i32>>)\n                                 -> Box<dyn Get<&'min i32>>\n     where 'max : 'min\n {\n-    v //~ ERROR mismatched types\n+    v\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn get_max_from_min<'min, 'max, G>(v: Box<dyn Get<&'min i32>>)\n                                    -> Box<dyn Get<&'max i32>>\n     where 'max : 'min\n {\n-    v //~ ERROR mismatched types\n+    v\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn main() { }"}, {"sha": "fe284682153992c19a35c7f2f82f52e288e62877", "filename": "src/test/ui/variance/variance-invariant-arg-trait-match.base.stderr", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-trait-match.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-trait-match.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-trait-match.base.stderr?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -1,37 +1,37 @@\n error[E0308]: mismatched types\n-  --> $DIR/variance-covariant-arg-trait-match.rs:14:5\n+  --> $DIR/variance-invariant-arg-trait-match.rs:14:5\n    |\n LL |     impls_get::<G,&'min i32>()\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected type `Get<&'min i32>`\n               found type `Get<&'max i32>`\n note: the lifetime `'min` as defined here...\n-  --> $DIR/variance-covariant-arg-trait-match.rs:10:21\n+  --> $DIR/variance-invariant-arg-trait-match.rs:11:21\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n    |                     ^^^^\n note: ...does not necessarily outlive the lifetime `'max` as defined here\n-  --> $DIR/variance-covariant-arg-trait-match.rs:10:27\n+  --> $DIR/variance-invariant-arg-trait-match.rs:11:27\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n    |                           ^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-covariant-arg-trait-match.rs:20:5\n+  --> $DIR/variance-invariant-arg-trait-match.rs:22:5\n    |\n LL |     impls_get::<G,&'max i32>()\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected type `Get<&'max i32>`\n               found type `Get<&'min i32>`\n note: the lifetime `'min` as defined here...\n-  --> $DIR/variance-covariant-arg-trait-match.rs:17:21\n+  --> $DIR/variance-invariant-arg-trait-match.rs:19:21\n    |\n LL | fn get_max_from_min<'min, 'max, G>()\n    |                     ^^^^\n note: ...does not necessarily outlive the lifetime `'max` as defined here\n-  --> $DIR/variance-covariant-arg-trait-match.rs:17:27\n+  --> $DIR/variance-invariant-arg-trait-match.rs:19:27\n    |\n LL | fn get_max_from_min<'min, 'max, G>()\n    |                           ^^^^", "previous_filename": "src/test/ui/variance/variance-covariant-arg-trait-match.stderr"}, {"sha": "74d2745cbbea8916179030ba2b67e77d57a0f311", "filename": "src/test/ui/variance/variance-invariant-arg-trait-match.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-trait-match.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-trait-match.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-trait-match.nll.stderr?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/variance-invariant-arg-trait-match.rs:10:5\n+  --> $DIR/variance-invariant-arg-trait-match.rs:14:5\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n    |                     ----  ---- lifetime `'max` defined here\n@@ -12,7 +12,7 @@ LL |     impls_get::<G,&'min i32>()\n    = help: consider adding the following bound: `'min: 'max`\n \n error: lifetime may not live long enough\n-  --> $DIR/variance-invariant-arg-trait-match.rs:16:5\n+  --> $DIR/variance-invariant-arg-trait-match.rs:22:5\n    |\n LL | fn get_max_from_min<'min, 'max, G>()\n    |                     ----  ---- lifetime `'max` defined here"}, {"sha": "498dd574bb38148374711d60a846440372fdac2e", "filename": "src/test/ui/variance/variance-invariant-arg-trait-match.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-trait-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-trait-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-trait-match.rs?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -1,19 +1,27 @@\n #![allow(dead_code)]\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n trait Get<T> {\n     fn get(&self, t: T) -> T;\n }\n \n fn get_min_from_max<'min, 'max, G>()\n     where 'max : 'min, G : Get<&'max i32>\n {\n-    impls_get::<G,&'min i32>() //~ ERROR mismatched types\n+    impls_get::<G,&'min i32>()\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn get_max_from_min<'min, 'max, G>()\n     where 'max : 'min, G : Get<&'min i32>\n {\n-    impls_get::<G,&'max i32>() //~ ERROR mismatched types\n+    impls_get::<G,&'max i32>()\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn impls_get<G,T>() where G : Get<T> { }"}, {"sha": "a2589f0ceee9b0b99ae1c9f5c2d139d8857bb7fa", "filename": "src/test/ui/variance/variance-invariant-self-trait-match.base.stderr", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-self-trait-match.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-self-trait-match.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-self-trait-match.base.stderr?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -1,37 +1,37 @@\n error[E0308]: mismatched types\n-  --> $DIR/variance-invariant-self-trait-match.rs:10:5\n+  --> $DIR/variance-invariant-self-trait-match.rs:14:5\n    |\n LL |     impls_get::<&'min G>();\n    |     ^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected type `<&'min G as Get>`\n               found type `<&'max G as Get>`\n note: the lifetime `'min` as defined here...\n-  --> $DIR/variance-invariant-self-trait-match.rs:7:21\n+  --> $DIR/variance-invariant-self-trait-match.rs:11:21\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n    |                     ^^^^\n note: ...does not necessarily outlive the lifetime `'max` as defined here\n-  --> $DIR/variance-invariant-self-trait-match.rs:7:27\n+  --> $DIR/variance-invariant-self-trait-match.rs:11:27\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n    |                           ^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-invariant-self-trait-match.rs:16:5\n+  --> $DIR/variance-invariant-self-trait-match.rs:22:5\n    |\n LL |     impls_get::<&'max G>();\n    |     ^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected type `<&'max G as Get>`\n               found type `<&'min G as Get>`\n note: the lifetime `'min` as defined here...\n-  --> $DIR/variance-invariant-self-trait-match.rs:13:21\n+  --> $DIR/variance-invariant-self-trait-match.rs:19:21\n    |\n LL | fn get_max_from_min<'min, 'max, G>()\n    |                     ^^^^\n note: ...does not necessarily outlive the lifetime `'max` as defined here\n-  --> $DIR/variance-invariant-self-trait-match.rs:13:27\n+  --> $DIR/variance-invariant-self-trait-match.rs:19:27\n    |\n LL | fn get_max_from_min<'min, 'max, G>()\n    |                           ^^^^", "previous_filename": "src/test/ui/variance/variance-invariant-self-trait-match.stderr"}, {"sha": "9d16e89450d786ff7189e40e5f443ad9a8ded6c9", "filename": "src/test/ui/variance/variance-invariant-self-trait-match.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-self-trait-match.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-self-trait-match.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-self-trait-match.nll.stderr?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/variance-invariant-self-trait-match.rs:10:5\n+  --> $DIR/variance-invariant-self-trait-match.rs:14:5\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n    |                     ----  ---- lifetime `'max` defined here\n@@ -12,7 +12,7 @@ LL |     impls_get::<&'min G>();\n    = help: consider adding the following bound: `'min: 'max`\n \n error: lifetime may not live long enough\n-  --> $DIR/variance-invariant-self-trait-match.rs:16:5\n+  --> $DIR/variance-invariant-self-trait-match.rs:22:5\n    |\n LL | fn get_max_from_min<'min, 'max, G>()\n    |                     ----  ---- lifetime `'max` defined here"}, {"sha": "0f3176b14b44d1f3fae2cdf1ca4d84a859bbafef", "filename": "src/test/ui/variance/variance-invariant-self-trait-match.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-self-trait-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-self-trait-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-self-trait-match.rs?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -1,19 +1,27 @@\n #![allow(dead_code)]\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n trait Get {\n     fn get(&self) -> Self;\n }\n \n fn get_min_from_max<'min, 'max, G>()\n     where 'max : 'min, &'max G : Get, G : 'max\n {\n-    impls_get::<&'min G>(); //~ ERROR mismatched types\n+    impls_get::<&'min G>();\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn get_max_from_min<'min, 'max, G>()\n     where 'max : 'min, &'min G : Get, G : 'min\n {\n-    impls_get::<&'max G>(); //~ ERROR mismatched types\n+    impls_get::<&'max G>();\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn impls_get<G>() where G : Get { }"}, {"sha": "8872620e38aef5eabca37363bce90ba13446c45c", "filename": "src/test/ui/variance/variance-trait-matching.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fvariance%2Fvariance-trait-matching.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fvariance%2Fvariance-trait-matching.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-trait-matching.base.stderr?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -1,5 +1,5 @@\n error[E0621]: explicit lifetime required in the type of `get`\n-  --> $DIR/variance-trait-matching.rs:24:5\n+  --> $DIR/variance-trait-matching.rs:28:5\n    |\n LL | fn get<'a, G>(get: &G) -> i32\n    |                    -- help: add explicit lifetime `'a` to the type of `get`: `&'a G`", "previous_filename": "src/test/ui/variance/variance-trait-matching.stderr"}, {"sha": "52c5eed3167cd31aa46eb06f5bdec680700e9b4d", "filename": "src/test/ui/variance/variance-trait-matching.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fvariance%2Fvariance-trait-matching.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fvariance%2Fvariance-trait-matching.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-trait-matching.nll.stderr?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -1,5 +1,5 @@\n error[E0621]: explicit lifetime required in the type of `get`\n-  --> $DIR/variance-trait-matching.rs:24:5\n+  --> $DIR/variance-trait-matching.rs:28:5\n    |\n LL | fn get<'a, G>(get: &G) -> i32\n    |                    -- help: add explicit lifetime `'a` to the type of `get`: `&'a G`"}, {"sha": "993db93533e2746eefc83b41475b8b92703e6c27", "filename": "src/test/ui/variance/variance-trait-matching.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fvariance%2Fvariance-trait-matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fvariance%2Fvariance-trait-matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-trait-matching.rs?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -1,5 +1,9 @@\n #![allow(dead_code)]\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n // Get<T> is covariant in T\n trait Get<T> {\n     fn get(&self) -> T;"}, {"sha": "a354aa52b5c7e36786a31d1f45474f71f7226e60", "filename": "src/test/ui/variance/variance-use-contravariant-struct-1.base.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-contravariant-struct-1.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-contravariant-struct-1.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-contravariant-struct-1.base.stderr?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -1,18 +1,18 @@\n error[E0308]: mismatched types\n-  --> $DIR/variance-use-contravariant-struct-1.rs:12:5\n+  --> $DIR/variance-use-contravariant-struct-1.rs:14:5\n    |\n LL |     v\n    |     ^ lifetime mismatch\n    |\n    = note: expected struct `SomeStruct<&'min ()>`\n               found struct `SomeStruct<&'max ()>`\n note: the lifetime `'min` as defined here...\n-  --> $DIR/variance-use-contravariant-struct-1.rs:8:8\n+  --> $DIR/variance-use-contravariant-struct-1.rs:10:8\n    |\n LL | fn foo<'min,'max>(v: SomeStruct<&'max ()>)\n    |        ^^^^\n note: ...does not necessarily outlive the lifetime `'max` as defined here\n-  --> $DIR/variance-use-contravariant-struct-1.rs:8:13\n+  --> $DIR/variance-use-contravariant-struct-1.rs:10:13\n    |\n LL | fn foo<'min,'max>(v: SomeStruct<&'max ()>)\n    |             ^^^^", "previous_filename": "src/test/ui/variance/variance-use-contravariant-struct-1.stderr"}, {"sha": "9549a8c08af615cac99b894268b123cb671d9dff", "filename": "src/test/ui/variance/variance-use-contravariant-struct-1.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-contravariant-struct-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-contravariant-struct-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-contravariant-struct-1.nll.stderr?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/variance-use-contravariant-struct-1.rs:12:5\n+  --> $DIR/variance-use-contravariant-struct-1.rs:14:5\n    |\n LL | fn foo<'min,'max>(v: SomeStruct<&'max ()>)\n    |        ---- ---- lifetime `'max` defined here"}, {"sha": "b55f5e76775ef4330c8ea8bec1ef4aaf8e193477", "filename": "src/test/ui/variance/variance-use-contravariant-struct-1.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-contravariant-struct-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-contravariant-struct-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-contravariant-struct-1.rs?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -1,15 +1,19 @@\n // Test various uses of structs with distint variances to make sure\n // they permit lifetimes to be approximated as expected.\n \n-\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n \n struct SomeStruct<T>(fn(T));\n \n fn foo<'min,'max>(v: SomeStruct<&'max ()>)\n                   -> SomeStruct<&'min ()>\n     where 'max : 'min\n {\n-    v //~ ERROR mismatched types\n+    v\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n "}, {"sha": "542d44c27093db4236f67d3bd960dc883a786820", "filename": "src/test/ui/variance/variance-use-covariant-struct-1.base.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-covariant-struct-1.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-covariant-struct-1.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-covariant-struct-1.base.stderr?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -1,18 +1,18 @@\n error[E0308]: mismatched types\n-  --> $DIR/variance-use-covariant-struct-1.rs:10:5\n+  --> $DIR/variance-use-covariant-struct-1.rs:14:5\n    |\n LL |     v\n    |     ^ lifetime mismatch\n    |\n    = note: expected struct `SomeStruct<&'max ()>`\n               found struct `SomeStruct<&'min ()>`\n note: the lifetime `'min` as defined here...\n-  --> $DIR/variance-use-covariant-struct-1.rs:6:8\n+  --> $DIR/variance-use-covariant-struct-1.rs:10:8\n    |\n LL | fn foo<'min,'max>(v: SomeStruct<&'min ()>)\n    |        ^^^^\n note: ...does not necessarily outlive the lifetime `'max` as defined here\n-  --> $DIR/variance-use-covariant-struct-1.rs:6:13\n+  --> $DIR/variance-use-covariant-struct-1.rs:10:13\n    |\n LL | fn foo<'min,'max>(v: SomeStruct<&'min ()>)\n    |             ^^^^", "previous_filename": "src/test/ui/variance/variance-use-covariant-struct-1.stderr"}, {"sha": "2fac827a0fb1f68ea00a52712dac982c989c1e97", "filename": "src/test/ui/variance/variance-use-covariant-struct-1.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-covariant-struct-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-covariant-struct-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-covariant-struct-1.nll.stderr?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/variance-use-covariant-struct-1.rs:10:5\n+  --> $DIR/variance-use-covariant-struct-1.rs:14:5\n    |\n LL | fn foo<'min,'max>(v: SomeStruct<&'min ()>)\n    |        ---- ---- lifetime `'max` defined here"}, {"sha": "3e3e76d9792c29f88ab2ab06ff5d3134eba934a8", "filename": "src/test/ui/variance/variance-use-covariant-struct-1.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-covariant-struct-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-covariant-struct-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-covariant-struct-1.rs?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -1,13 +1,19 @@\n // Test that a covariant struct does not permit the lifetime of a\n // reference to be enlarged.\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n struct SomeStruct<T>(T);\n \n fn foo<'min,'max>(v: SomeStruct<&'min ()>)\n                   -> SomeStruct<&'max ()>\n     where 'max : 'min\n {\n-    v //~ ERROR mismatched types\n+    v\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn main() { }"}, {"sha": "02b4e91f781e5cbf579e24e06cedbd4ed4eec8ab", "filename": "src/test/ui/variance/variance-use-invariant-struct-1.base.stderr", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-invariant-struct-1.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-invariant-struct-1.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-invariant-struct-1.base.stderr?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -1,37 +1,37 @@\n error[E0308]: mismatched types\n-  --> $DIR/variance-use-invariant-struct-1.rs:12:5\n+  --> $DIR/variance-use-invariant-struct-1.rs:14:5\n    |\n LL |     v\n    |     ^ lifetime mismatch\n    |\n    = note: expected struct `SomeStruct<&'min ()>`\n               found struct `SomeStruct<&'max ()>`\n note: the lifetime `'min` as defined here...\n-  --> $DIR/variance-use-invariant-struct-1.rs:8:8\n+  --> $DIR/variance-use-invariant-struct-1.rs:10:8\n    |\n LL | fn foo<'min,'max>(v: SomeStruct<&'max ()>)\n    |        ^^^^\n note: ...does not necessarily outlive the lifetime `'max` as defined here\n-  --> $DIR/variance-use-invariant-struct-1.rs:8:13\n+  --> $DIR/variance-use-invariant-struct-1.rs:10:13\n    |\n LL | fn foo<'min,'max>(v: SomeStruct<&'max ()>)\n    |             ^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-use-invariant-struct-1.rs:19:5\n+  --> $DIR/variance-use-invariant-struct-1.rs:23:5\n    |\n LL |     v\n    |     ^ lifetime mismatch\n    |\n    = note: expected struct `SomeStruct<&'max ()>`\n               found struct `SomeStruct<&'min ()>`\n note: the lifetime `'min` as defined here...\n-  --> $DIR/variance-use-invariant-struct-1.rs:15:8\n+  --> $DIR/variance-use-invariant-struct-1.rs:19:8\n    |\n LL | fn bar<'min,'max>(v: SomeStruct<&'min ()>)\n    |        ^^^^\n note: ...does not necessarily outlive the lifetime `'max` as defined here\n-  --> $DIR/variance-use-invariant-struct-1.rs:15:13\n+  --> $DIR/variance-use-invariant-struct-1.rs:19:13\n    |\n LL | fn bar<'min,'max>(v: SomeStruct<&'min ()>)\n    |             ^^^^", "previous_filename": "src/test/ui/variance/variance-use-invariant-struct-1.stderr"}, {"sha": "e8460a388fcabae0f4ab835c83a93f2b990a8296", "filename": "src/test/ui/variance/variance-use-invariant-struct-1.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-invariant-struct-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-invariant-struct-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-invariant-struct-1.nll.stderr?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/variance-use-invariant-struct-1.rs:12:5\n+  --> $DIR/variance-use-invariant-struct-1.rs:14:5\n    |\n LL | fn foo<'min,'max>(v: SomeStruct<&'max ()>)\n    |        ---- ---- lifetime `'max` defined here\n@@ -15,7 +15,7 @@ LL |     v\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n-  --> $DIR/variance-use-invariant-struct-1.rs:19:5\n+  --> $DIR/variance-use-invariant-struct-1.rs:23:5\n    |\n LL | fn bar<'min,'max>(v: SomeStruct<&'min ()>)\n    |        ---- ---- lifetime `'max` defined here"}, {"sha": "7be03514e01a9bbb20ae3dfb88bb476a7b3a0ba6", "filename": "src/test/ui/variance/variance-use-invariant-struct-1.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-invariant-struct-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-invariant-struct-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-invariant-struct-1.rs?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -1,22 +1,28 @@\n // Test various uses of structs with distint variances to make sure\n // they permit lifetimes to be approximated as expected.\n \n-\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n \n struct SomeStruct<T>(*mut T);\n \n fn foo<'min,'max>(v: SomeStruct<&'max ()>)\n                   -> SomeStruct<&'min ()>\n     where 'max : 'min\n {\n-    v //~ ERROR mismatched types\n+    v\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn bar<'min,'max>(v: SomeStruct<&'min ()>)\n                   -> SomeStruct<&'max ()>\n     where 'max : 'min\n {\n-    v //~ ERROR mismatched types\n+    v\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n "}, {"sha": "186ab2790a3983a887390c1f251f67734ce426c1", "filename": "src/test/ui/wf/wf-static-method.base.stderr", "status": "renamed", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fwf%2Fwf-static-method.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fwf%2Fwf-static-method.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-static-method.base.stderr?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -1,131 +1,131 @@\n error[E0312]: lifetime of reference outlives lifetime of borrowed content...\n-  --> $DIR/wf-static-method.rs:17:9\n+  --> $DIR/wf-static-method.rs:21:9\n    |\n LL |         u\n    |         ^\n    |\n note: ...the reference is valid for the lifetime `'a` as defined here...\n-  --> $DIR/wf-static-method.rs:14:6\n+  --> $DIR/wf-static-method.rs:18:6\n    |\n LL | impl<'a, 'b> Foo<'a, 'b, Evil<'a, 'b>> for () {\n    |      ^^\n note: ...but the borrowed content is only valid for the lifetime `'b` as defined here\n-  --> $DIR/wf-static-method.rs:14:10\n+  --> $DIR/wf-static-method.rs:18:10\n    |\n LL | impl<'a, 'b> Foo<'a, 'b, Evil<'a, 'b>> for () {\n    |          ^^\n \n error[E0478]: lifetime bound not satisfied\n-  --> $DIR/wf-static-method.rs:26:18\n+  --> $DIR/wf-static-method.rs:32:18\n    |\n LL |         let me = Self::make_me();\n    |                  ^^^^\n    |\n note: lifetime parameter instantiated with the lifetime `'b` as defined here\n-  --> $DIR/wf-static-method.rs:23:10\n+  --> $DIR/wf-static-method.rs:29:10\n    |\n LL | impl<'a, 'b> Foo<'a, 'b, ()> for IndirectEvil<'a, 'b> {\n    |          ^^\n note: but lifetime parameter must outlive the lifetime `'a` as defined here\n-  --> $DIR/wf-static-method.rs:23:6\n+  --> $DIR/wf-static-method.rs:29:6\n    |\n LL | impl<'a, 'b> Foo<'a, 'b, ()> for IndirectEvil<'a, 'b> {\n    |      ^^\n \n error[E0312]: lifetime of reference outlives lifetime of borrowed content...\n-  --> $DIR/wf-static-method.rs:33:9\n+  --> $DIR/wf-static-method.rs:41:9\n    |\n LL |         u\n    |         ^\n    |\n note: ...the reference is valid for the lifetime `'a` as defined here...\n-  --> $DIR/wf-static-method.rs:31:6\n+  --> $DIR/wf-static-method.rs:39:6\n    |\n LL | impl<'a, 'b> Evil<'a, 'b> {\n    |      ^^\n note: ...but the borrowed content is only valid for the lifetime `'b` as defined here\n-  --> $DIR/wf-static-method.rs:31:10\n+  --> $DIR/wf-static-method.rs:39:10\n    |\n LL | impl<'a, 'b> Evil<'a, 'b> {\n    |          ^^\n \n error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'b` due to conflicting requirements\n-  --> $DIR/wf-static-method.rs:41:5\n+  --> $DIR/wf-static-method.rs:51:5\n    |\n LL |     <()>::static_evil(b)\n    |     ^^^^^^^^^^^^^^^^^\n    |\n note: first, the lifetime cannot outlive the lifetime `'b` as defined here...\n-  --> $DIR/wf-static-method.rs:40:13\n+  --> $DIR/wf-static-method.rs:50:13\n    |\n LL | fn evil<'a, 'b>(b: &'b u32) -> &'a u32 {\n    |             ^^\n note: ...so that reference does not outlive borrowed content\n-  --> $DIR/wf-static-method.rs:41:23\n+  --> $DIR/wf-static-method.rs:51:23\n    |\n LL |     <()>::static_evil(b)\n    |                       ^\n note: but, the lifetime must be valid for the lifetime `'a` as defined here...\n-  --> $DIR/wf-static-method.rs:40:9\n+  --> $DIR/wf-static-method.rs:50:9\n    |\n LL | fn evil<'a, 'b>(b: &'b u32) -> &'a u32 {\n    |         ^^\n note: ...so that reference does not outlive borrowed content\n-  --> $DIR/wf-static-method.rs:41:5\n+  --> $DIR/wf-static-method.rs:51:5\n    |\n LL |     <()>::static_evil(b)\n    |     ^^^^^^^^^^^^^^^^^^^^\n \n error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'b` due to conflicting requirements\n-  --> $DIR/wf-static-method.rs:45:5\n+  --> $DIR/wf-static-method.rs:57:5\n    |\n LL |     <IndirectEvil>::static_evil(b)\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: first, the lifetime cannot outlive the lifetime `'b` as defined here...\n-  --> $DIR/wf-static-method.rs:44:22\n+  --> $DIR/wf-static-method.rs:56:22\n    |\n LL | fn indirect_evil<'a, 'b>(b: &'b u32) -> &'a u32 {\n    |                      ^^\n note: ...so that reference does not outlive borrowed content\n-  --> $DIR/wf-static-method.rs:45:33\n+  --> $DIR/wf-static-method.rs:57:33\n    |\n LL |     <IndirectEvil>::static_evil(b)\n    |                                 ^\n note: but, the lifetime must be valid for the lifetime `'a` as defined here...\n-  --> $DIR/wf-static-method.rs:44:18\n+  --> $DIR/wf-static-method.rs:56:18\n    |\n LL | fn indirect_evil<'a, 'b>(b: &'b u32) -> &'a u32 {\n    |                  ^^\n note: ...so that reference does not outlive borrowed content\n-  --> $DIR/wf-static-method.rs:45:5\n+  --> $DIR/wf-static-method.rs:57:5\n    |\n LL |     <IndirectEvil>::static_evil(b)\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'b` due to conflicting requirements\n-  --> $DIR/wf-static-method.rs:50:5\n+  --> $DIR/wf-static-method.rs:63:5\n    |\n LL |     <Evil>::inherent_evil(b)\n    |     ^^^^^^^^^^^^^^^^^^^^^\n    |\n note: first, the lifetime cannot outlive the lifetime `'b` as defined here...\n-  --> $DIR/wf-static-method.rs:49:22\n+  --> $DIR/wf-static-method.rs:62:22\n    |\n LL | fn inherent_evil<'a, 'b>(b: &'b u32) -> &'a u32 {\n    |                      ^^\n note: ...so that reference does not outlive borrowed content\n-  --> $DIR/wf-static-method.rs:50:27\n+  --> $DIR/wf-static-method.rs:63:27\n    |\n LL |     <Evil>::inherent_evil(b)\n    |                           ^\n note: but, the lifetime must be valid for the lifetime `'a` as defined here...\n-  --> $DIR/wf-static-method.rs:49:18\n+  --> $DIR/wf-static-method.rs:62:18\n    |\n LL | fn inherent_evil<'a, 'b>(b: &'b u32) -> &'a u32 {\n    |                  ^^\n note: ...so that reference does not outlive borrowed content\n-  --> $DIR/wf-static-method.rs:50:5\n+  --> $DIR/wf-static-method.rs:63:5\n    |\n LL |     <Evil>::inherent_evil(b)\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^", "previous_filename": "src/test/ui/wf/wf-static-method.stderr"}, {"sha": "7556d8e694d5a26ae981bc86956dff4e32719e44", "filename": "src/test/ui/wf/wf-static-method.nll.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fwf%2Fwf-static-method.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fwf%2Fwf-static-method.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-static-method.nll.stderr?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/wf-static-method.rs:17:9\n+  --> $DIR/wf-static-method.rs:21:9\n    |\n LL | impl<'a, 'b> Foo<'a, 'b, Evil<'a, 'b>> for () {\n    |      --  -- lifetime `'b` defined here\n@@ -12,7 +12,7 @@ LL |         u\n    = help: consider adding the following bound: `'b: 'a`\n \n error: lifetime may not live long enough\n-  --> $DIR/wf-static-method.rs:26:18\n+  --> $DIR/wf-static-method.rs:32:18\n    |\n LL | impl<'a, 'b> Foo<'a, 'b, ()> for IndirectEvil<'a, 'b> {\n    |      --  -- lifetime `'b` defined here\n@@ -25,7 +25,7 @@ LL |         let me = Self::make_me();\n    = help: consider adding the following bound: `'b: 'a`\n \n error: lifetime may not live long enough\n-  --> $DIR/wf-static-method.rs:33:9\n+  --> $DIR/wf-static-method.rs:41:9\n    |\n LL | impl<'a, 'b> Evil<'a, 'b> {\n    |      --  -- lifetime `'b` defined here\n@@ -38,7 +38,7 @@ LL |         u\n    = help: consider adding the following bound: `'b: 'a`\n \n error: lifetime may not live long enough\n-  --> $DIR/wf-static-method.rs:41:5\n+  --> $DIR/wf-static-method.rs:51:5\n    |\n LL | fn evil<'a, 'b>(b: &'b u32) -> &'a u32 {\n    |         --  -- lifetime `'b` defined here\n@@ -50,7 +50,7 @@ LL |     <()>::static_evil(b)\n    = help: consider adding the following bound: `'b: 'a`\n \n error: lifetime may not live long enough\n-  --> $DIR/wf-static-method.rs:45:5\n+  --> $DIR/wf-static-method.rs:57:5\n    |\n LL | fn indirect_evil<'a, 'b>(b: &'b u32) -> &'a u32 {\n    |                  --  -- lifetime `'b` defined here\n@@ -62,7 +62,7 @@ LL |     <IndirectEvil>::static_evil(b)\n    = help: consider adding the following bound: `'b: 'a`\n \n error: lifetime may not live long enough\n-  --> $DIR/wf-static-method.rs:50:5\n+  --> $DIR/wf-static-method.rs:63:5\n    |\n LL | fn inherent_evil<'a, 'b>(b: &'b u32) -> &'a u32 {\n    |                  --  -- lifetime `'b` defined here"}, {"sha": "83557ce667bf6964bee0f7155d75700c107164af", "filename": "src/test/ui/wf/wf-static-method.rs", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fwf%2Fwf-static-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fwf%2Fwf-static-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-static-method.rs?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -4,6 +4,10 @@\n // static inherent methods isn't quite working - need to\n // fix that before removing the check.\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n trait Foo<'a, 'b, T>: Sized {\n     fn make_me() -> Self { loop {} }\n     fn static_evil(u: &'b u32) -> &'a u32;\n@@ -14,7 +18,9 @@ struct Evil<'a, 'b: 'a>(Option<&'a &'b ()>);\n impl<'a, 'b> Foo<'a, 'b, Evil<'a, 'b>> for () {\n     fn make_me() -> Self { }\n     fn static_evil(u: &'b u32) -> &'a u32 {\n-        u //~ ERROR E0312\n+        u\n+        //[base]~^ ERROR E0312\n+        //[nll]~^^ ERROR lifetime may not live long enough\n     }\n }\n \n@@ -23,32 +29,40 @@ struct IndirectEvil<'a, 'b: 'a>(Option<&'a &'b ()>);\n impl<'a, 'b> Foo<'a, 'b, ()> for IndirectEvil<'a, 'b> {\n     fn make_me() -> Self { IndirectEvil(None) }\n     fn static_evil(u: &'b u32) -> &'a u32 {\n-        let me = Self::make_me(); //~ ERROR lifetime bound not satisfied\n+        let me = Self::make_me();\n+        //[base]~^ ERROR lifetime bound not satisfied\n+        //[nll]~^^ ERROR lifetime may not live long enough\n         loop {} // (`me` could be used for the lifetime transmute).\n     }\n }\n \n impl<'a, 'b> Evil<'a, 'b> {\n     fn inherent_evil(u: &'b u32) -> &'a u32 {\n-        u //~ ERROR E0312\n+        u\n+        //[base]~^ ERROR E0312\n+        //[nll]~^^ ERROR lifetime may not live long enough\n     }\n }\n \n // while static methods don't get to *assume* this, we still\n // *check* that they hold.\n \n fn evil<'a, 'b>(b: &'b u32) -> &'a u32 {\n-    <()>::static_evil(b) //~ ERROR cannot infer an appropriate lifetime\n+    <()>::static_evil(b)\n+    //[base]~^ ERROR cannot infer an appropriate lifetime\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn indirect_evil<'a, 'b>(b: &'b u32) -> &'a u32 {\n     <IndirectEvil>::static_evil(b)\n-    //~^ ERROR cannot infer an appropriate lifetime\n+    //[base]~^ ERROR cannot infer an appropriate lifetime\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn inherent_evil<'a, 'b>(b: &'b u32) -> &'a u32 {\n     <Evil>::inherent_evil(b)\n-    //~^ ERROR cannot infer an appropriate lifetime\n+    //[base]~^ ERROR cannot infer an appropriate lifetime\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n "}, {"sha": "c09610cd696828892fe77b282da75a457dab73e1", "filename": "src/test/ui/where-clauses/where-for-self-2.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self-2.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self-2.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self-2.base.stderr?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -1,5 +1,5 @@\n error: implementation of `Bar` is not general enough\n-  --> $DIR/where-for-self-2.rs:23:5\n+  --> $DIR/where-for-self-2.rs:27:5\n    |\n LL |     foo(&X);\n    |     ^^^ implementation of `Bar` is not general enough", "previous_filename": "src/test/ui/where-clauses/where-for-self-2.stderr"}, {"sha": "92d1b2121a6b254c90a535efdf8cecc269deaeed", "filename": "src/test/ui/where-clauses/where-for-self-2.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self-2.nll.stderr?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -1,5 +1,5 @@\n error: implementation of `Bar` is not general enough\n-  --> $DIR/where-for-self-2.rs:23:5\n+  --> $DIR/where-for-self-2.rs:27:5\n    |\n LL |     foo(&X);\n    |     ^^^^^^^ implementation of `Bar` is not general enough"}, {"sha": "4e4e0ec912ea1f43f350011d97093c7a16daa58c", "filename": "src/test/ui/where-clauses/where-for-self-2.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self-2.rs?ref=cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "patch": "@@ -3,6 +3,10 @@\n // specific lifetime is not enough to satisfy the `for<'a> ...` constraint, which\n // should require *all* lifetimes.\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n static X: &'static u32 = &42;\n \n trait Bar {"}]}