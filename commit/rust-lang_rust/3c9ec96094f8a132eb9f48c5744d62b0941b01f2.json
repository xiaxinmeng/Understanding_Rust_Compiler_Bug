{"sha": "3c9ec96094f8a132eb9f48c5744d62b0941b01f2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjOWVjOTYwOTRmOGExMzJlYjlmNDhjNTc0NGQ2MmIwOTQxYjAxZjI=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2018-10-09T22:40:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-10-09T22:40:18Z"}, "message": "Merge pull request #3084 from otavio/issue-1990\n\nEnable `stdin_disable_all_formatting_test` test", "tree": {"sha": "f1ee095772b1fc27002efa1f973ece8d706864a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1ee095772b1fc27002efa1f973ece8d706864a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c9ec96094f8a132eb9f48c5744d62b0941b01f2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbvS5SCRBK7hj4Ov3rIwAAdHIIAFWDijOUcM/uhIQYbcy+AYLk\nau4FPJOCeHnTbU7wOglSyElzZnFgQl32+bogxkZ19WXtb3+ClwOwNpvzbIdgQSSY\nxkLAThH6XmVHK8So6/ZR1Vojr9VRENI4md84BrKty8W2CAxJC3wRl7h/AxqXFI/I\ny5qqPS8FzhCkCB5LdUer9BPGGxqlpePZWhp5cN+vxsL9IQVGF8CBhF+pbPY/9G7I\nutwA7mpnjeULwsy+XsqEWSTq7YJcXvUZAfLHk4rO6LomoRM/w70vckwerm3grMe0\nh5hQhx1O5xMcawKJPDmuQj/FoXFZ5M84zTGGOlZDnHJuQqMRtohU5IVYRdYm3eE=\n=68QL\n-----END PGP SIGNATURE-----\n", "payload": "tree f1ee095772b1fc27002efa1f973ece8d706864a5\nparent 4895699e884e9a2b0be90324dcd869ba86c4a5ef\nparent 2ae1b4804ca528d21005738f56018b7c6a6141e9\nauthor Nick Cameron <nrc@ncameron.org> 1539124818 +1200\ncommitter GitHub <noreply@github.com> 1539124818 +1200\n\nMerge pull request #3084 from otavio/issue-1990\n\nEnable `stdin_disable_all_formatting_test` test"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c9ec96094f8a132eb9f48c5744d62b0941b01f2", "html_url": "https://github.com/rust-lang/rust/commit/3c9ec96094f8a132eb9f48c5744d62b0941b01f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c9ec96094f8a132eb9f48c5744d62b0941b01f2/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4895699e884e9a2b0be90324dcd869ba86c4a5ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/4895699e884e9a2b0be90324dcd869ba86c4a5ef", "html_url": "https://github.com/rust-lang/rust/commit/4895699e884e9a2b0be90324dcd869ba86c4a5ef"}, {"sha": "2ae1b4804ca528d21005738f56018b7c6a6141e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ae1b4804ca528d21005738f56018b7c6a6141e9", "html_url": "https://github.com/rust-lang/rust/commit/2ae1b4804ca528d21005738f56018b7c6a6141e9"}], "stats": {"total": 49, "additions": 27, "deletions": 22}, "files": [{"sha": "1967c74da4515168d5323065290b4b2a393030f6", "filename": "src/test/mod.rs", "status": "modified", "additions": 27, "deletions": 22, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/3c9ec96094f8a132eb9f48c5744d62b0941b01f2/src%2Ftest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9ec96094f8a132eb9f48c5744d62b0941b01f2/src%2Ftest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmod.rs?ref=3c9ec96094f8a132eb9f48c5744d62b0941b01f2", "patch": "@@ -17,6 +17,7 @@ use std::io::{self, BufRead, BufReader, Read, Write};\n use std::iter::{Enumerate, Peekable};\n use std::mem;\n use std::path::{Path, PathBuf};\n+use std::process::{Command, Stdio};\n use std::str::Chars;\n \n use config::{Color, Config, EmitMode, FileName, ReportTactic};\n@@ -287,28 +288,32 @@ fn stdin_formatting_smoke_test() {\n     assert_eq!(buf, \"fn main() {}\\r\\n\".as_bytes());\n }\n \n-// FIXME(#1990) restore this test\n-// #[test]\n-// fn stdin_disable_all_formatting_test() {\n-//     let input = String::from(\"fn main() { println!(\\\"This should not be formatted.\\\"); }\");\n-//     let mut child = Command::new(\"./target/debug/rustfmt\")\n-//         .stdin(Stdio::piped())\n-//         .stdout(Stdio::piped())\n-//         .arg(\"--config-path=./tests/config/disable_all_formatting.toml\")\n-//         .spawn()\n-//         .expect(\"failed to execute child\");\n-\n-//     {\n-//         let stdin = child.stdin.as_mut().expect(\"failed to get stdin\");\n-//         stdin\n-//             .write_all(input.as_bytes())\n-//             .expect(\"failed to write stdin\");\n-//     }\n-//     let output = child.wait_with_output().expect(\"failed to wait on child\");\n-//     assert!(output.status.success());\n-//     assert!(output.stderr.is_empty());\n-//     assert_eq!(input, String::from_utf8(output.stdout).unwrap());\n-// }\n+#[test]\n+fn stdin_disable_all_formatting_test() {\n+    match option_env!(\"CFG_RELEASE_CHANNEL\") {\n+        None | Some(\"nightly\") => {}\n+        _ => return, // these tests require nightly\n+    }\n+    let input = String::from(\"fn main() { println!(\\\"This should not be formatted.\\\"); }\");\n+    let mut child = Command::new(\"./target/debug/rustfmt\")\n+        .stdin(Stdio::piped())\n+        .stdout(Stdio::piped())\n+        .arg(\"--config-path=./tests/config/disable_all_formatting.toml\")\n+        .spawn()\n+        .expect(\"failed to execute child\");\n+\n+    {\n+        let stdin = child.stdin.as_mut().expect(\"failed to get stdin\");\n+        stdin\n+            .write_all(input.as_bytes())\n+            .expect(\"failed to write stdin\");\n+    }\n+\n+    let output = child.wait_with_output().expect(\"failed to wait on child\");\n+    assert!(output.status.success());\n+    assert!(output.stderr.is_empty());\n+    assert_eq!(input, String::from_utf8(output.stdout).unwrap());\n+}\n \n #[test]\n fn format_lines_errors_are_reported() {"}]}