{"sha": "0b1b5351163d4d13590349ac56fb5357d3911ab4", "node_id": "C_kwDOAAsO6NoAKDBiMWI1MzUxMTYzZDRkMTM1OTAzNDlhYzU2ZmI1MzU3ZDM5MTFhYjQ", "commit": {"author": {"name": "blyxyas", "email": "blyxyas@gmail.com", "date": "2023-04-10T08:59:12Z"}, "committer": {"name": "blyxyas", "email": "blyxyas@gmail.com", "date": "2023-04-10T08:59:12Z"}, "message": "Add \"Lint Passes\" chapter", "tree": {"sha": "71d50e677c20c9871e967e16ca2e88f9473855ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/71d50e677c20c9871e967e16ca2e88f9473855ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b1b5351163d4d13590349ac56fb5357d3911ab4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEM3aofraJSaf7CtgpTTgXC1ovwzQFAmQzz+AACgkQTTgXC1ov\nwzSacQ/+MptRBI34JAcGPe46/IO61Y1YtQRl0Tu+RdBwCuvc4Iq49eOEplB/pK6b\nZUJojYDZC0VwEY9YfcDNqaSYMh2A1Wt5GSjnZpwIFWsQ5SFvebLJcNb4MZMYq0O/\nEMIjF3ugCt74UfS4zgMMN76D+B/P0kKWMB/FogFETXK8t1RoJiW+11uRnFRcJdqu\nkSIkMZ3ynz1/8M2CExO3R0S4fPGXi91rqAC/b0g/hjI/OtvENWEAgjPA165nMVxE\n+O2hdMY4tfkF+3Nl6YyPJTcxrdRueXqv5V+mnFakwsRCSoKyFUGYn/CzKr1uHaGR\nUUp4FvCvurs5BAn2k2eDEz9GR/OKPf9ZtNPO2t+AAFPkO8YAsOaLMCZqqu9DxKhE\n61RZbq7xVJep63vHbYw9r9XOnw5H8WuEzR+Sx6IUz5DReGCwkrRK4KHs27KYXEp9\nNEXhP8mLXHvBG4Xuka1Y9pbEotvQwsE1GXzx2LDX1cw47/9qcyEPxEVI2hHfE/rf\n1dvp5qhwUavVJoDIqPOyzAsyGEgIXgoDPveRE6oiskNvNSZ0D7Z5xhyV4OIKvNE/\ntoSkcK4bef2NmxU9Ol6Y56ehwoid9/yarXkyvAhiSPIEWDh33DetyVM5NtvP+ttk\n+iLotAaXslDPIoBz9GnfuId6rKDk7z4rg6npfz18gmgKw7Eudso=\n=xupB\n-----END PGP SIGNATURE-----", "payload": "tree 71d50e677c20c9871e967e16ca2e88f9473855ae\nparent 015fb8a9e33fccf8aa1e53a33f187940a845016f\nauthor blyxyas <blyxyas@gmail.com> 1681117152 +0200\ncommitter blyxyas <blyxyas@gmail.com> 1681117152 +0200\n\nAdd \"Lint Passes\" chapter\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b1b5351163d4d13590349ac56fb5357d3911ab4", "html_url": "https://github.com/rust-lang/rust/commit/0b1b5351163d4d13590349ac56fb5357d3911ab4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b1b5351163d4d13590349ac56fb5357d3911ab4/comments", "author": {"login": "blyxyas", "id": 73757586, "node_id": "MDQ6VXNlcjczNzU3NTg2", "avatar_url": "https://avatars.githubusercontent.com/u/73757586?v=4", "gravatar_id": "", "url": "https://api.github.com/users/blyxyas", "html_url": "https://github.com/blyxyas", "followers_url": "https://api.github.com/users/blyxyas/followers", "following_url": "https://api.github.com/users/blyxyas/following{/other_user}", "gists_url": "https://api.github.com/users/blyxyas/gists{/gist_id}", "starred_url": "https://api.github.com/users/blyxyas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/blyxyas/subscriptions", "organizations_url": "https://api.github.com/users/blyxyas/orgs", "repos_url": "https://api.github.com/users/blyxyas/repos", "events_url": "https://api.github.com/users/blyxyas/events{/privacy}", "received_events_url": "https://api.github.com/users/blyxyas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "blyxyas", "id": 73757586, "node_id": "MDQ6VXNlcjczNzU3NTg2", "avatar_url": "https://avatars.githubusercontent.com/u/73757586?v=4", "gravatar_id": "", "url": "https://api.github.com/users/blyxyas", "html_url": "https://github.com/blyxyas", "followers_url": "https://api.github.com/users/blyxyas/followers", "following_url": "https://api.github.com/users/blyxyas/following{/other_user}", "gists_url": "https://api.github.com/users/blyxyas/gists{/gist_id}", "starred_url": "https://api.github.com/users/blyxyas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/blyxyas/subscriptions", "organizations_url": "https://api.github.com/users/blyxyas/orgs", "repos_url": "https://api.github.com/users/blyxyas/repos", "events_url": "https://api.github.com/users/blyxyas/events{/privacy}", "received_events_url": "https://api.github.com/users/blyxyas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "015fb8a9e33fccf8aa1e53a33f187940a845016f", "url": "https://api.github.com/repos/rust-lang/rust/commits/015fb8a9e33fccf8aa1e53a33f187940a845016f", "html_url": "https://github.com/rust-lang/rust/commit/015fb8a9e33fccf8aa1e53a33f187940a845016f"}], "stats": {"total": 136, "additions": 136, "deletions": 0}, "files": [{"sha": "9bf3ca063d789a2a130382d7cd481416eb4887fd", "filename": "book/src/development/lint_passes.md", "status": "added", "additions": 136, "deletions": 0, "changes": 136, "blob_url": "https://github.com/rust-lang/rust/blob/0b1b5351163d4d13590349ac56fb5357d3911ab4/book%2Fsrc%2Fdevelopment%2Flint_passes.md", "raw_url": "https://github.com/rust-lang/rust/raw/0b1b5351163d4d13590349ac56fb5357d3911ab4/book%2Fsrc%2Fdevelopment%2Flint_passes.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2Fdevelopment%2Flint_passes.md?ref=0b1b5351163d4d13590349ac56fb5357d3911ab4", "patch": "@@ -0,0 +1,136 @@\n+# Lint passes\n+\n+Before working on the logic of a new lint, there is an important decision\n+that every Clippy developers must make: to use\n+[`EarlyLintPass`][early_lint_pass] or [`LateLintPass`][late_lint_pass].\n+\n+In short, the `LateLintPass` has access to type information while the\n+`EarlyLintPass` doesn't. If you don't need access to type information, use the\n+`EarlyLintPass`.\n+\n+Let us expand on these two traits more below.\n+\n+## `EarlyLintPass`\n+\n+If you examine the documentation on [`EarlyLintPass`][early_lint_pass] closely,\n+you'll see that every method defined for this trait utilizes a\n+[`EarlyContext`][early_context]. In `EarlyContext`'s documentation, it states:\n+\n+> Context for lint checking of the AST, after expansion, before lowering to HIR.\n+\n+Voil\u00e0. `EarlyLintPass` works only on the Abstract Syntax Tree (AST) level.\n+And AST is generated during the [lexing and parsing][lexing_and_parsing] phase\n+of code compilation. Therefore, this is our trait choice for a new lint if\n+the lint only deals with syntax-related issues.\n+\n+While linting speed has not been a concern for Clippy,\n+the `EarlyLintPass` is faster and it should be your choice\n+if you know for sure a lint does not need type information.\n+\n+As a reminder, run the following command to generate boilerplates for lints\n+that use `EarlyLintPass`:\n+\n+```sh\n+$ cargo dev new_lint --name=<your_new_lint> --pass=early --category=<your_category_choice>\n+```\n+\n+### Example for `EarlyLintPass`\n+\n+Take a look at the following code:\n+\n+```rust\n+let x = OurUndefinedType;\n+x.non_existing_method();\n+```\n+\n+From the AST perspective, both lines are \"grammatically\" correct.\n+The assignment uses a `let` and ends with a semicolon. The invocation\n+of a method looks fine, too. As programmers, we might raise a few\n+questions already, but the parser is okay with it. This is what we\n+mean when we say `EarlyLintPass` deals with only syntax on the AST level.\n+\n+Alternatively, think of the `foo_functions` lint we mentioned in\n+[define new lints](define_lints.md#name-the-lint) chapter.\n+\n+We want the `foo_functions` lint to detect functions with `foo` as their name.\n+Writing a lint that only checks for the name of a function means that we only\n+work with the AST and don't have to access the type system at all (the type system is where\n+`LateLintPass` comes into the picture).\n+\n+## `LateLintPass`\n+\n+In contrast to `EarlyLintPass`, `LateLintPass` contains type information.\n+\n+If you examine the documentation on [`LateLintPass`][late_lint_pass] closely,\n+you see that every method defined in this trait utilizes a\n+[`LateContext`][late_context].\n+\n+In `LateContext`'s documentation we will find methods that\n+deal with type-checking, which do not exist in `EarlyContext`, such as:\n+\n+- [`maybe_typeck_results`](https://doc.rust-lang.org/nightly/nightly-rustc/rustc_lint/context/struct.LateContext.html#method.maybe_typeck_results)\n+- [`typeck_results`](https://doc.rust-lang.org/nightly/nightly-rustc/rustc_lint/context/struct.LateContext.html#method.typeck_results)\n+\n+### Example for `LateLintPass`\n+\n+Let us take a look with the following example:\n+\n+```rust\n+let x = OurUndefinedType;\n+x.non_existing_method();\n+```\n+\n+These two lines of code are syntactically correct code from the perspective\n+of the AST. We have an assignment and invoke a method on the variable that\n+is of a type. Grammatically, everything is in order for the parser.\n+\n+However, going down a level and looking at the type information,\n+the compiler will notice that both `OurUndefinedType` and `non_existing_method()`\n+**are undefined**.\n+\n+As Clippy developers, to access such type information, we must implement\n+`LateLintPass` on our lint.\n+When you browse through Clippy's lints, you will notice that almost every lint\n+is implemented in a `LateLintPass`, specifically because we often need to check\n+not only for syntactic issues but also type information.\n+\n+Another limitation of the `EarlyLintPass` is that the nodes are only identified\n+by their position in the AST. This means that you can't just get an `id` and\n+request a certain node. For most lints that is fine, but we have some lints\n+that require the inspection of other nodes, which is easier at the HIR level.\n+In these cases, `LateLintPass` is the better choice.\n+\n+As a reminder, run the following command to generate boilerplate for lints\n+that use `LateLintPass`:\n+\n+```sh\n+$ cargo dev new_lint --name=<your_new_lint> --pass=late --category=<your_category_choice>\n+```\n+\n+## Additional Readings for Beginners\n+\n+If a dear reader of this documentation has never taken a class on compilers\n+and interpreters, it might be confusing as to why AST level deals with only\n+the language's syntax. And some readers might not even understand what lexing,\n+parsing, and AST mean.\n+\n+This documentation serves by no means as a crash course on compilers or language design.\n+And for details specifically related to Rust, the [Rustc Development Guide][rustc_dev_guide]\n+is a far better choice to peruse.\n+\n+The [Syntax and AST][ast] chapter and the [High-Level IR][hir] chapter are\n+great introduction to the concepts mentioned in this chapter.\n+\n+Some readers might also find the [introductory chapter][map_of_territory] of\n+Robert Nystrom's _Crafting Interpreters_ a helpful overview of compiled and\n+interpreted languages before jumping back to the Rustc guide.\n+\n+[ast]: https://rustc-dev-guide.rust-lang.org/syntax-intro.html\n+[early_context]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_lint/context/struct.EarlyContext.html\n+[early_lint_pass]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_lint/trait.EarlyLintPass.html\n+[hir]: https://rustc-dev-guide.rust-lang.org/hir.html\n+[late_context]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_lint/context/struct.LateContext.html\n+[late_lint_pass]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_lint/trait.LateLintPass.html\n+[lexing_and_parsing]: https://rustc-dev-guide.rust-lang.org/overview.html#lexing-and-parsing\n+[rustc_dev_guide]: https://rustc-dev-guide.rust-lang.org/\n+[map_of_territory]: https://craftinginterpreters.com/a-map-of-the-territory.html\n\\ No newline at end of file"}]}