{"sha": "bf51840952b701606fa6aa5e076b4e27fb8d9ee8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmNTE4NDA5NTJiNzAxNjA2ZmE2YWE1ZTA3NmI0ZTI3ZmI4ZDllZTg=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-10-01T20:36:31Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-10-27T13:06:03Z"}, "message": "distinguish user-type annotations from other annotations\n\nIn particular, we don't want to preserve the universes for the `'_`\nvariables that appear in there. And we don't expect to find any\nplaceholders, which justifies this as harmless.\n\n(In particular, if you have a query like `Foo(!1, !2, ?3)`, then you\ncare about the universe of `?3`, since it may control whether `?3 =\n!1` and `?3 = !2` is a valid answer. But without any placeholders, we\ndon't really care: any placeholders that would appear in the output\nmust therefore come from some fresh universe anyway.)", "tree": {"sha": "12bd8210898607306ff7c00f64eb7c170eb69f81", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12bd8210898607306ff7c00f64eb7c170eb69f81"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf51840952b701606fa6aa5e076b4e27fb8d9ee8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf51840952b701606fa6aa5e076b4e27fb8d9ee8", "html_url": "https://github.com/rust-lang/rust/commit/bf51840952b701606fa6aa5e076b4e27fb8d9ee8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf51840952b701606fa6aa5e076b4e27fb8d9ee8/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80d9f8bb48d2799307f84dd8fa69884c5a407ac6", "url": "https://api.github.com/repos/rust-lang/rust/commits/80d9f8bb48d2799307f84dd8fa69884c5a407ac6", "html_url": "https://github.com/rust-lang/rust/commit/80d9f8bb48d2799307f84dd8fa69884c5a407ac6"}], "stats": {"total": 43, "additions": 40, "deletions": 3}, "files": [{"sha": "cc6e4df07103307c72730fb6865b1ad7ffffc944", "filename": "src/librustc/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/bf51840952b701606fa6aa5e076b4e27fb8d9ee8/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf51840952b701606fa6aa5e076b4e27fb8d9ee8/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=bf51840952b701606fa6aa5e076b4e27fb8d9ee8", "patch": "@@ -107,6 +107,20 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n         )\n     }\n \n+    pub fn canonicalize_user_type_annotation<V>(&self, value: &V) -> Canonicalized<'gcx, V>\n+    where\n+        V: TypeFoldable<'tcx> + Lift<'gcx>,\n+    {\n+        let mut query_state = OriginalQueryValues::default();\n+        Canonicalizer::canonicalize(\n+            value,\n+            Some(self),\n+            self.tcx,\n+            &CanonicalizeUserTypeAnnotation,\n+            &mut query_state,\n+        )\n+    }\n+\n     /// A hacky variant of `canonicalize_query` that does not\n     /// canonicalize `'static`.  Unfortunately, the existing leak\n     /// check treaks `'static` differently in some cases (see also\n@@ -197,6 +211,29 @@ impl CanonicalizeRegionMode for CanonicalizeQueryResponse {\n     }\n }\n \n+struct CanonicalizeUserTypeAnnotation;\n+\n+impl CanonicalizeRegionMode for CanonicalizeUserTypeAnnotation {\n+    fn canonicalize_free_region(\n+        &self,\n+        canonicalizer: &mut Canonicalizer<'_, '_, 'tcx>,\n+        r: ty::Region<'tcx>,\n+    ) -> ty::Region<'tcx> {\n+        match r {\n+            ty::ReEarlyBound(_) | ty::ReFree(_) | ty::ReErased | ty::ReEmpty | ty::ReStatic => r,\n+            ty::ReVar(_) => canonicalizer.canonical_var_for_region_in_root_universe(r),\n+            _ => {\n+                // We only expect region names that the user can type.\n+                bug!(\"unexpected region in query response: `{:?}`\", r)\n+            }\n+        }\n+    }\n+\n+    fn any(&self) -> bool {\n+        false\n+    }\n+}\n+\n struct CanonicalizeAllFreeRegions;\n \n impl CanonicalizeRegionMode for CanonicalizeAllFreeRegions {"}, {"sha": "8bd4887fa7c204f2e1bd4a2a6364fa1e3f87a68b", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bf51840952b701606fa6aa5e076b4e27fb8d9ee8/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf51840952b701606fa6aa5e076b4e27fb8d9ee8/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=bf51840952b701606fa6aa5e076b4e27fb8d9ee8", "patch": "@@ -976,7 +976,7 @@ impl<'a, 'gcx, 'tcx> Visitor<'gcx> for GatherLocalsVisitor<'a, 'gcx, 'tcx> {\n                     o_ty\n                 };\n \n-                let c_ty = self.fcx.inh.infcx.canonicalize_response(&revealed_ty);\n+                let c_ty = self.fcx.inh.infcx.canonicalize_user_type_annotation(&revealed_ty);\n                 debug!(\"visit_local: ty.hir_id={:?} o_ty={:?} revealed_ty={:?} c_ty={:?}\",\n                        ty.hir_id, o_ty, revealed_ty, c_ty);\n                 self.fcx.tables.borrow_mut().user_provided_tys_mut().insert(ty.hir_id, c_ty);\n@@ -2137,7 +2137,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                             method.substs[i]\n                         }\n                     });\n-                    self.infcx.canonicalize_response(&UserSubsts {\n+                    self.infcx.canonicalize_user_type_annotation(&UserSubsts {\n                         substs: just_method_substs,\n                         user_self_ty: None, // not relevant here\n                     })\n@@ -2181,7 +2181,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         );\n \n         if !substs.is_noop() {\n-            let user_substs = self.infcx.canonicalize_response(&UserSubsts {\n+            let user_substs = self.infcx.canonicalize_user_type_annotation(&UserSubsts {\n                 substs,\n                 user_self_ty,\n             });"}]}