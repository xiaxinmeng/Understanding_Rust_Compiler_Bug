{"sha": "413790186c65e782e2c0183e933686f7bf35e158", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxMzc5MDE4NmM2NWU3ODJlMmMwMTgzZTkzMzY4NmY3YmYzNWUxNTg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-05-29T21:55:59Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-05-29T21:55:59Z"}, "message": "Auto merge of #61203 - memoryruins:bare_trait_objects, r=Centril\n\nWarn on bare_trait_objects by default\n\nThe `bare_trait_objects` lint is set to `warn` by default.\nMost ui tests have been updated to use `dyn` to avoid creating noise in stderr files.\n\nr? @Centril\n\ncc #54910", "tree": {"sha": "f21577d7e36bcdacd546f0163aa3bbc4490a6758", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f21577d7e36bcdacd546f0163aa3bbc4490a6758"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/413790186c65e782e2c0183e933686f7bf35e158", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/413790186c65e782e2c0183e933686f7bf35e158", "html_url": "https://github.com/rust-lang/rust/commit/413790186c65e782e2c0183e933686f7bf35e158", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/413790186c65e782e2c0183e933686f7bf35e158/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37d001e4deb206ed954fde5d91690221e8306fc3", "url": "https://api.github.com/repos/rust-lang/rust/commits/37d001e4deb206ed954fde5d91690221e8306fc3", "html_url": "https://github.com/rust-lang/rust/commit/37d001e4deb206ed954fde5d91690221e8306fc3"}, {"sha": "83660b62734c4f966c536b60864bb51fac696f6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/83660b62734c4f966c536b60864bb51fac696f6c", "html_url": "https://github.com/rust-lang/rust/commit/83660b62734c4f966c536b60864bb51fac696f6c"}], "stats": {"total": 4310, "additions": 2178, "deletions": 2132}, "files": [{"sha": "f7af51e47526cd38392ec0340db3660425a7f05b", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -255,7 +255,7 @@ declare_lint! {\n \n declare_lint! {\n     pub BARE_TRAIT_OBJECTS,\n-    Allow,\n+    Warn,\n     \"suggest using `dyn Trait` for trait objects\"\n }\n "}, {"sha": "c8978a94fcda46507e007c3cdf58fc0bfaadc453", "filename": "src/libstd/error.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Flibstd%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Flibstd%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ferror.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -94,7 +94,7 @@ pub trait Error: Debug + Display {\n     ///         \"I'm the superhero of errors\"\n     ///     }\n     ///\n-    ///     fn cause(&self) -> Option<&Error> {\n+    ///     fn cause(&self) -> Option<&dyn Error> {\n     ///         Some(&self.side)\n     ///     }\n     /// }\n@@ -244,7 +244,7 @@ impl<'a, E: Error + 'a> From<E> for Box<dyn Error + 'a> {\n     ///\n     /// let an_error = AnError;\n     /// assert!(0 == mem::size_of_val(&an_error));\n-    /// let a_boxed_error = Box::<Error>::from(an_error);\n+    /// let a_boxed_error = Box::<dyn Error>::from(an_error);\n     /// assert!(mem::size_of::<Box<dyn Error>>() == mem::size_of_val(&a_boxed_error))\n     /// ```\n     fn from(err: E) -> Box<dyn Error + 'a> {\n@@ -287,7 +287,7 @@ impl<'a, E: Error + Send + Sync + 'a> From<E> for Box<dyn Error + Send + Sync +\n     ///\n     /// let an_error = AnError;\n     /// assert!(0 == mem::size_of_val(&an_error));\n-    /// let a_boxed_error = Box::<Error + Send + Sync>::from(an_error);\n+    /// let a_boxed_error = Box::<dyn Error + Send + Sync>::from(an_error);\n     /// assert!(\n     ///     mem::size_of::<Box<dyn Error + Send + Sync>>() == mem::size_of_val(&a_boxed_error))\n     /// ```\n@@ -309,7 +309,7 @@ impl From<String> for Box<dyn Error + Send + Sync> {\n     /// use std::mem;\n     ///\n     /// let a_string_error = \"a string error\".to_string();\n-    /// let a_boxed_error = Box::<Error + Send + Sync>::from(a_string_error);\n+    /// let a_boxed_error = Box::<dyn Error + Send + Sync>::from(a_string_error);\n     /// assert!(\n     ///     mem::size_of::<Box<dyn Error + Send + Sync>>() == mem::size_of_val(&a_boxed_error))\n     /// ```\n@@ -344,7 +344,7 @@ impl From<String> for Box<dyn Error> {\n     /// use std::mem;\n     ///\n     /// let a_string_error = \"a string error\".to_string();\n-    /// let a_boxed_error = Box::<Error>::from(a_string_error);\n+    /// let a_boxed_error = Box::<dyn Error>::from(a_string_error);\n     /// assert!(mem::size_of::<Box<dyn Error>>() == mem::size_of_val(&a_boxed_error))\n     /// ```\n     fn from(str_err: String) -> Box<dyn Error> {\n@@ -367,7 +367,7 @@ impl<'a> From<&str> for Box<dyn Error + Send + Sync + 'a> {\n     /// use std::mem;\n     ///\n     /// let a_str_error = \"a str error\";\n-    /// let a_boxed_error = Box::<Error + Send + Sync>::from(a_str_error);\n+    /// let a_boxed_error = Box::<dyn Error + Send + Sync>::from(a_str_error);\n     /// assert!(\n     ///     mem::size_of::<Box<dyn Error + Send + Sync>>() == mem::size_of_val(&a_boxed_error))\n     /// ```\n@@ -389,7 +389,7 @@ impl From<&str> for Box<dyn Error> {\n     /// use std::mem;\n     ///\n     /// let a_str_error = \"a str error\";\n-    /// let a_boxed_error = Box::<Error>::from(a_str_error);\n+    /// let a_boxed_error = Box::<dyn Error>::from(a_str_error);\n     /// assert!(mem::size_of::<Box<dyn Error>>() == mem::size_of_val(&a_boxed_error))\n     /// ```\n     fn from(err: &str) -> Box<dyn Error> {\n@@ -412,7 +412,7 @@ impl<'a, 'b> From<Cow<'b, str>> for Box<dyn Error + Send + Sync + 'a> {\n     /// use std::borrow::Cow;\n     ///\n     /// let a_cow_str_error = Cow::from(\"a str error\");\n-    /// let a_boxed_error = Box::<Error + Send + Sync>::from(a_cow_str_error);\n+    /// let a_boxed_error = Box::<dyn Error + Send + Sync>::from(a_cow_str_error);\n     /// assert!(\n     ///     mem::size_of::<Box<dyn Error + Send + Sync>>() == mem::size_of_val(&a_boxed_error))\n     /// ```\n@@ -436,7 +436,7 @@ impl<'a> From<Cow<'a, str>> for Box<dyn Error> {\n     /// use std::borrow::Cow;\n     ///\n     /// let a_cow_str_error = Cow::from(\"a str error\");\n-    /// let a_boxed_error = Box::<Error>::from(a_cow_str_error);\n+    /// let a_boxed_error = Box::<dyn Error>::from(a_cow_str_error);\n     /// assert!(mem::size_of::<Box<dyn Error>>() == mem::size_of_val(&a_boxed_error))\n     /// ```\n     fn from(err: Cow<'a, str>) -> Box<dyn Error> {"}, {"sha": "d41b3a3a1233f563a097edf4775a1858f0ab43b8", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -1976,7 +1976,7 @@ pub fn remove_dir_all<P: AsRef<Path>>(path: P) -> io::Result<()> {\n /// use std::path::Path;\n ///\n /// // one possible implementation of walking a directory only visiting files\n-/// fn visit_dirs(dir: &Path, cb: &Fn(&DirEntry)) -> io::Result<()> {\n+/// fn visit_dirs(dir: &Path, cb: &dyn Fn(&DirEntry)) -> io::Result<()> {\n ///     if dir.is_dir() {\n ///         for entry in fs::read_dir(dir)? {\n ///             let entry = entry?;"}, {"sha": "2912c4ead7a0a1cb0d0d10eb6ebe699281203289", "filename": "src/test/compile-fail/issue-23595-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fcompile-fail%2Fissue-23595-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fcompile-fail%2Fissue-23595-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-23595-1.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -5,7 +5,7 @@ use std::ops::{Index};\n trait Hierarchy {\n     type Value;\n     type ChildKey;\n-    type Children = Index<Self::ChildKey, Output=Hierarchy>;\n+    type Children = dyn Index<Self::ChildKey, Output=dyn Hierarchy>;\n     //~^ ERROR: the value of the associated types `Value` (from the trait `Hierarchy`), `ChildKey`\n \n     fn data(&self) -> Option<(Self::Value, Self::Children)>;"}, {"sha": "2e2a77b92ca5379c95d35bfa2bc2cff787c16b26", "filename": "src/test/run-pass-fulldeps/pprust-expr-roundtrip.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass-fulldeps%2Fpprust-expr-roundtrip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass-fulldeps%2Fpprust-expr-roundtrip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fpprust-expr-roundtrip.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -62,7 +62,7 @@ fn make_x() -> P<Expr> {\n /// Iterate over exprs of depth up to `depth`. The goal is to explore all \"interesting\"\n /// combinations of expression nesting. For example, we explore combinations using `if`, but not\n /// `while` or `match`, since those should print and parse in much the same way as `if`.\n-fn iter_exprs(depth: usize, f: &mut FnMut(P<Expr>)) {\n+fn iter_exprs(depth: usize, f: &mut dyn FnMut(P<Expr>)) {\n     if depth == 0 {\n         f(make_x());\n         return;"}, {"sha": "7e6ee60e5194cb93ee7450e9d5547ab0785fbf5f", "filename": "src/test/run-pass/alignment-gep-tup-like-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Falignment-gep-tup-like-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Falignment-gep-tup-like-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falignment-gep-tup-like-1.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -22,11 +22,11 @@ impl<A:Clone> Invokable<A> for Invoker<A> {\n     }\n }\n \n-fn f<A:Clone + 'static>(a: A, b: u16) -> Box<Invokable<A>+'static> {\n+fn f<A:Clone + 'static>(a: A, b: u16) -> Box<dyn Invokable<A>+'static> {\n     box Invoker {\n         a: a,\n         b: b,\n-    } as (Box<Invokable<A>+'static>)\n+    } as (Box<dyn Invokable<A>+'static>)\n }\n \n pub fn main() {"}, {"sha": "96ba2ee3b62b8c12ffd2875d792a988e67cfd271", "filename": "src/test/run-pass/associated-types/associated-types-doubleendediterator-object.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fassociated-types%2Fassociated-types-doubleendediterator-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fassociated-types%2Fassociated-types-doubleendediterator-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types%2Fassociated-types-doubleendediterator-object.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -1,7 +1,7 @@\n // run-pass\n #![feature(box_syntax)]\n \n-fn pairwise_sub(mut t: Box<DoubleEndedIterator<Item=isize>>) -> isize {\n+fn pairwise_sub(mut t: Box<dyn DoubleEndedIterator<Item=isize>>) -> isize {\n     let mut result = 0;\n     loop {\n         let front = t.next();"}, {"sha": "c202c376c5fe600e751a3ece74b110ea78b58517", "filename": "src/test/run-pass/associated-types/associated-types-eq-obj.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fassociated-types%2Fassociated-types-eq-obj.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fassociated-types%2Fassociated-types-eq-obj.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types%2Fassociated-types-eq-obj.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -15,7 +15,7 @@ impl Foo for char {\n     fn boo(&self) -> Bar { Bar }\n }\n \n-fn baz(x: &Foo<A=Bar>) -> Bar {\n+fn baz(x: &dyn Foo<A=Bar>) -> Bar {\n     x.boo()\n }\n "}, {"sha": "eec95a141f5cf2e59a09712e582f2a2b1b4a7955", "filename": "src/test/run-pass/associated-types/associated-types-projection-in-object-type.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fassociated-types%2Fassociated-types-projection-in-object-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fassociated-types%2Fassociated-types-projection-in-object-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types%2Fassociated-types-projection-in-object-type.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -19,20 +19,20 @@ pub trait Subscriber {\n \n pub trait Publisher<'a> {\n     type Output;\n-    fn subscribe(&mut self, _: Box<Subscriber<Input=Self::Output> + 'a>);\n+    fn subscribe(&mut self, _: Box<dyn Subscriber<Input=Self::Output> + 'a>);\n }\n \n pub trait Processor<'a> : Subscriber + Publisher<'a> { }\n \n impl<'a, P> Processor<'a> for P where P : Subscriber + Publisher<'a> { }\n \n struct MyStruct<'a> {\n-    sub: Box<Subscriber<Input=u64> + 'a>\n+    sub: Box<dyn Subscriber<Input=u64> + 'a>\n }\n \n impl<'a> Publisher<'a> for MyStruct<'a> {\n     type Output = u64;\n-    fn subscribe(&mut self, t : Box<Subscriber<Input=u64> + 'a>) {\n+    fn subscribe(&mut self, t : Box<dyn Subscriber<Input=u64> + 'a>) {\n         self.sub = t;\n     }\n }"}, {"sha": "fadb0784e75257eb35354fe9b7c7885ed67b710b", "filename": "src/test/run-pass/autoref-autoderef/autoderef-method-on-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fautoref-autoderef%2Fautoderef-method-on-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fautoref-autoderef%2Fautoderef-method-on-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoref-autoderef%2Fautoderef-method-on-trait.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -11,6 +11,6 @@ impl double for usize {\n }\n \n pub fn main() {\n-    let x: Box<_> = box (box 3usize as Box<double>);\n+    let x: Box<_> = box (box 3usize as Box<dyn double>);\n     assert_eq!(x.double(), 6);\n }"}, {"sha": "8a6dfe76d6065c9c204c1dc3bfb18522a02d6b16", "filename": "src/test/run-pass/borrowck/borrowck-trait-lifetime.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-trait-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-trait-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-trait-lifetime.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -12,7 +12,7 @@ use std::marker;\n fn main() {\n     trait T { fn foo(&self) {} }\n \n-    fn f<'a, V: T>(v: &'a V) -> &'a T {\n-        v as &'a T\n+    fn f<'a, V: T>(v: &'a V) -> &'a dyn T {\n+        v as &'a dyn T\n     }\n }"}, {"sha": "a27dd9eef52ec31f351258d92418625ea7150fe5", "filename": "src/test/run-pass/cast-rfc0401-vtable-kinds.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fcast-rfc0401-vtable-kinds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fcast-rfc0401-vtable-kinds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcast-rfc0401-vtable-kinds.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -15,9 +15,9 @@ impl<T> Foo<T> for () {}\n impl Foo<u32> for u32 { fn foo(&self, _: u32) -> u32 { self+43 } }\n impl Bar for () {}\n \n-unsafe fn round_trip_and_call<'a>(t: *const (Foo<u32>+'a)) -> u32 {\n-    let foo_e : *const Foo<u16> = t as *const _;\n-    let r_1 = foo_e as *mut Foo<u32>;\n+unsafe fn round_trip_and_call<'a>(t: *const (dyn Foo<u32>+'a)) -> u32 {\n+    let foo_e : *const dyn Foo<u16> = t as *const _;\n+    let r_1 = foo_e as *mut dyn Foo<u32>;\n \n     (&*r_1).foo(0)\n }\n@@ -38,8 +38,8 @@ fn tuple_i32_to_u32<T:?Sized>(u: *const (i32, T)) -> *const (u32, T) {\n \n fn main() {\n     let x = 4u32;\n-    let y : &Foo<u32> = &x;\n-    let fl = unsafe { round_trip_and_call(y as *const Foo<u32>) };\n+    let y : &dyn Foo<u32> = &x;\n+    let fl = unsafe { round_trip_and_call(y as *const dyn Foo<u32>) };\n     assert_eq!(fl, (43+4));\n \n     let s = FooS([0,1,2]);"}, {"sha": "017b63c737493d5990e2756be7badd651346a3e3", "filename": "src/test/run-pass/cast-rfc0401.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fcast-rfc0401.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fcast-rfc0401.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcast-rfc0401.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -25,8 +25,8 @@ fn main()\n     // coercion-cast\n     let mut it = vec![137].into_iter();\n     let itr: &mut vec::IntoIter<u32> = &mut it;\n-    assert_eq!((itr as &mut Iterator<Item=u32>).next(), Some(137));\n-    assert_eq!((itr as &mut Iterator<Item=u32>).next(), None);\n+    assert_eq!((itr as &mut dyn Iterator<Item=u32>).next(), Some(137));\n+    assert_eq!((itr as &mut dyn Iterator<Item=u32>).next(), None);\n \n     assert_eq!(Some(4u32) as Option<u32>, Some(4u32));\n     assert_eq!((1u32,2u32) as (u32,u32), (1,2));"}, {"sha": "0eead0194efa2999a4d5068844b1020dc52fd7f7", "filename": "src/test/run-pass/close-over-big-then-small-data.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fclose-over-big-then-small-data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fclose-over-big-then-small-data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclose-over-big-then-small-data.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -24,11 +24,11 @@ impl<A:Clone> Invokable<A> for Invoker<A> {\n     }\n }\n \n-fn f<A:Clone + 'static>(a: A, b: u16) -> Box<Invokable<A>+'static> {\n+fn f<A:Clone + 'static>(a: A, b: u16) -> Box<dyn Invokable<A>+'static> {\n     box Invoker {\n         a: a,\n         b: b,\n-    } as (Box<Invokable<A>+'static>)\n+    } as (Box<dyn Invokable<A>+'static>)\n }\n \n pub fn main() {"}, {"sha": "26f53a9c18213b2f47894fc579632742d0fe956c", "filename": "src/test/run-pass/codegen-object-shim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fcodegen-object-shim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fcodegen-object-shim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcodegen-object-shim.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -1,4 +1,4 @@\n fn main() {\n-    assert_eq!((ToString::to_string as fn(&(ToString+'static)) -> String)(&\"foo\"),\n+    assert_eq!((ToString::to_string as fn(&(dyn ToString+'static)) -> String)(&\"foo\"),\n         String::from(\"foo\"));\n }"}, {"sha": "b44aa6ab37760dfbd2c6ad529910624325b0c438", "filename": "src/test/run-pass/coerce/coerce-expect-unsized.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fcoerce%2Fcoerce-expect-unsized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fcoerce%2Fcoerce-expect-unsized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoerce%2Fcoerce-expect-unsized.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -12,16 +12,16 @@ pub fn main() {\n     let _: Box<[isize]> = Box::new({ [1, 2, 3] });\n     let _: Box<[isize]> = Box::new(if true { [1, 2, 3] } else { [1, 3, 4] });\n     let _: Box<[isize]> = Box::new(match true { true => [1, 2, 3], false => [1, 3, 4] });\n-    let _: Box<Fn(isize) -> _> = Box::new({ |x| (x as u8) });\n-    let _: Box<Debug> = Box::new(if true { false } else { true });\n-    let _: Box<Debug> = Box::new(match true { true => 'a', false => 'b' });\n+    let _: Box<dyn Fn(isize) -> _> = Box::new({ |x| (x as u8) });\n+    let _: Box<dyn Debug> = Box::new(if true { false } else { true });\n+    let _: Box<dyn Debug> = Box::new(match true { true => 'a', false => 'b' });\n \n     let _: &[isize] = &{ [1, 2, 3] };\n     let _: &[isize] = &if true { [1, 2, 3] } else { [1, 3, 4] };\n     let _: &[isize] = &match true { true => [1, 2, 3], false => [1, 3, 4] };\n-    let _: &Fn(isize) -> _ = &{ |x| (x as u8) };\n-    let _: &Debug = &if true { false } else { true };\n-    let _: &Debug = &match true { true => 'a', false => 'b' };\n+    let _: &dyn Fn(isize) -> _ = &{ |x| (x as u8) };\n+    let _: &dyn Debug = &if true { false } else { true };\n+    let _: &dyn Debug = &match true { true => 'a', false => 'b' };\n \n     let _: &str = &{ String::new() };\n     let _: &str = &if true { String::from(\"...\") } else { 5.to_string() };\n@@ -31,12 +31,12 @@ pub fn main() {\n     };\n \n     let _: Box<[isize]> = Box::new([1, 2, 3]);\n-    let _: Box<Fn(isize) -> _> = Box::new(|x| (x as u8));\n+    let _: Box<dyn Fn(isize) -> _> = Box::new(|x| (x as u8));\n \n     let _: Rc<RefCell<[isize]>> = Rc::new(RefCell::new([1, 2, 3]));\n-    let _: Rc<RefCell<FnMut(isize) -> _>> = Rc::new(RefCell::new(|x| (x as u8)));\n+    let _: Rc<RefCell<dyn FnMut(isize) -> _>> = Rc::new(RefCell::new(|x| (x as u8)));\n \n-    let _: Vec<Box<Fn(isize) -> _>> = vec![\n+    let _: Vec<Box<dyn Fn(isize) -> _>> = vec![\n         Box::new(|x| (x as u8)),\n         Box::new(|x| (x as i16 as u8)),\n     ];"}, {"sha": "12a2999d79d479ca00f93e9bcdcc3c0f1e93d8e3", "filename": "src/test/run-pass/consts/const-trait-to-trait.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-trait-to-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-trait-to-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-trait-to-trait.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -8,17 +8,17 @@ struct Bar;\n impl Trait for Bar {}\n \n fn main() {\n-    let x: &[&Trait] = &[{ &Bar }];\n+    let x: &[&dyn Trait] = &[{ &Bar }];\n }\n \n // Issue #25748 - the cast causes an &Encoding -> &Encoding coercion:\n pub struct UTF8Encoding;\n pub const UTF_8: &'static UTF8Encoding = &UTF8Encoding;\n pub trait Encoding {}\n impl Encoding for UTF8Encoding {}\n-pub fn f() -> &'static Encoding { UTF_8 as &'static Encoding }\n+pub fn f() -> &'static dyn Encoding { UTF_8 as &'static dyn Encoding }\n \n // Root of the problem: &Trait -> &Trait coercions:\n-const FOO: &'static Trait = &Bar;\n-const BAR: &'static Trait = FOO;\n+const FOO: &'static dyn Trait = &Bar;\n+const BAR: &'static dyn Trait = FOO;\n fn foo() { let _x = BAR; }"}, {"sha": "eb3a8948fc80d7acc70ebe72ce755c223a9dee04", "filename": "src/test/run-pass/deriving/deriving-show.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fderiving%2Fderiving-show.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fderiving%2Fderiving-show.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving%2Fderiving-show.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -17,7 +17,7 @@ enum Enum {\n }\n \n #[derive(Debug)]\n-struct Pointers(*const Send, *mut Sync);\n+struct Pointers(*const dyn Send, *mut dyn Sync);\n \n macro_rules! t {\n     ($x:expr, $expected:expr) => {"}, {"sha": "1bc3b4c157ca8d596e9353cb905d427a5f165756", "filename": "src/test/run-pass/drop/drop-struct-as-object.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fdrop%2Fdrop-struct-as-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fdrop%2Fdrop-struct-as-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdrop%2Fdrop-struct-as-object.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -30,7 +30,7 @@ impl Drop for Cat {\n pub fn main() {\n     {\n         let x = box Cat {name: 22};\n-        let nyan: Box<Dummy> = x as Box<Dummy>;\n+        let nyan: Box<dyn Dummy> = x as Box<dyn Dummy>;\n     }\n     unsafe {\n         assert_eq!(value, 22);"}, {"sha": "24d83eb5343eccced01c8fafe13b8771b0030f2f", "filename": "src/test/run-pass/dynamically-sized-types/dst-coerce-custom.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fdynamically-sized-types%2Fdst-coerce-custom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fdynamically-sized-types%2Fdst-coerce-custom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdynamically-sized-types%2Fdst-coerce-custom.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -36,7 +36,7 @@ fn main() {\n \n     // Trait objects.\n     let a: Bar<i32> = Bar { x: &42 };\n-    let b: Bar<Baz> = a;\n+    let b: Bar<dyn Baz> = a;\n     unsafe {\n         assert_eq!((*b.x).get(), 42);\n     }"}, {"sha": "683fa6850fd81075ab2ade11d200d1c18ddce41b", "filename": "src/test/run-pass/dynamically-sized-types/dst-coerce-rc.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fdynamically-sized-types%2Fdst-coerce-rc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fdynamically-sized-types%2Fdst-coerce-rc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdynamically-sized-types%2Fdst-coerce-rc.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -26,17 +26,17 @@ fn main() {\n     assert_eq!(b[2], 3);\n \n     let a: Rc<i32> = Rc::new(42);\n-    let b: Rc<Baz> = a.clone();\n+    let b: Rc<dyn Baz> = a.clone();\n     assert_eq!(b.get(), 42);\n \n     let c: Weak<i32> = Rc::downgrade(&a);\n-    let d: Weak<Baz> = c.clone();\n+    let d: Weak<dyn Baz> = c.clone();\n \n     let _c = b.clone();\n \n     let a: Rc<RefCell<i32>> = Rc::new(RefCell::new(42));\n-    let b: Rc<RefCell<Baz>> = a.clone();\n+    let b: Rc<RefCell<dyn Baz>> = a.clone();\n     assert_eq!(b.borrow().get(), 42);\n     // FIXME\n-    let c: Weak<RefCell<Baz>> = Rc::downgrade(&a) as Weak<_>;\n+    let c: Weak<RefCell<dyn Baz>> = Rc::downgrade(&a) as Weak<_>;\n }"}, {"sha": "66688e93fb80d8d00eaa1cf716f159168e65563d", "filename": "src/test/run-pass/dynamically-sized-types/dst-coercions.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fdynamically-sized-types%2Fdst-coercions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fdynamically-sized-types%2Fdst-coercions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdynamically-sized-types%2Fdst-coercions.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -9,20 +9,20 @@ trait T { fn dummy(&self) { } }\n impl T for S {}\n \n pub fn main() {\n-    let x: &T = &S;\n+    let x: &dyn T = &S;\n     // Test we can convert from &-ptr to *-ptr of trait objects\n-    let x: *const T = &S;\n+    let x: *const dyn T = &S;\n \n     // Test we can convert from &-ptr to *-ptr of struct pointer (not DST)\n     let x: *const S = &S;\n \n     // As above, but mut\n-    let x: &mut T = &mut S;\n-    let x: *mut T = &mut S;\n+    let x: &mut dyn T = &mut S;\n+    let x: *mut dyn T = &mut S;\n \n     let x: *mut S = &mut S;\n \n     // Test we can change the mutability from mut to const.\n-    let x: &T = &mut S;\n-    let x: *const T = &mut S;\n+    let x: &dyn T = &mut S;\n+    let x: *const dyn T = &mut S;\n }"}, {"sha": "6c338e99912ec2eec32edaa156f6d9fc7b9d8523", "filename": "src/test/run-pass/dynamically-sized-types/dst-field-align.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fdynamically-sized-types%2Fdst-field-align.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fdynamically-sized-types%2Fdst-field-align.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdynamically-sized-types%2Fdst-field-align.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -26,15 +26,15 @@ fn main() {\n     // Test that zero-offset works properly\n     let b : Baz<usize> = Baz { a: 7 };\n     assert_eq!(b.a.get(), 7);\n-    let b : &Baz<Bar> = &b;\n+    let b : &Baz<dyn Bar> = &b;\n     assert_eq!(b.a.get(), 7);\n \n     // Test that the field is aligned properly\n     let f : Foo<usize> = Foo { a: 0, b: 11 };\n     assert_eq!(f.b.get(), 11);\n     let ptr1 : *const u8 = &f.b as *const _ as *const u8;\n \n-    let f : &Foo<Bar> = &f;\n+    let f : &Foo<dyn Bar> = &f;\n     let ptr2 : *const u8 = &f.b as *const _ as *const u8;\n     assert_eq!(f.b.get(), 11);\n \n@@ -44,13 +44,13 @@ fn main() {\n     // Test that nested DSTs work properly\n     let f : Foo<Foo<usize>> = Foo { a: 0, b: Foo { a: 1, b: 17 }};\n     assert_eq!(f.b.b.get(), 17);\n-    let f : &Foo<Foo<Bar>> = &f;\n+    let f : &Foo<Foo<dyn Bar>> = &f;\n     assert_eq!(f.b.b.get(), 17);\n \n     // Test that get the pointer via destructuring works\n \n     let f : Foo<usize> = Foo { a: 0, b: 11 };\n-    let f : &Foo<Bar> = &f;\n+    let f : &Foo<dyn Bar> = &f;\n     let &Foo { a: _, b: ref bar } = f;\n     assert_eq!(bar.get(), 11);\n "}, {"sha": "980d99a6d6c11170b52e96ebe93845fc6a7bb17c", "filename": "src/test/run-pass/dynamically-sized-types/dst-index.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fdynamically-sized-types%2Fdst-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fdynamically-sized-types%2Fdst-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdynamically-sized-types%2Fdst-index.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -19,11 +19,11 @@ impl Index<usize> for S {\n struct T;\n \n impl Index<usize> for T {\n-    type Output = Debug + 'static;\n+    type Output = dyn Debug + 'static;\n \n-    fn index<'a>(&'a self, idx: usize) -> &'a (Debug + 'static) {\n+    fn index<'a>(&'a self, idx: usize) -> &'a (dyn Debug + 'static) {\n         static X: usize = 42;\n-        &X as &(Debug + 'static)\n+        &X as &(dyn Debug + 'static)\n     }\n }\n "}, {"sha": "0893b02e74e82e97c84710fe7aad6af23879ccf4", "filename": "src/test/run-pass/dynamically-sized-types/dst-raw.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fdynamically-sized-types%2Fdst-raw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fdynamically-sized-types%2Fdst-raw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdynamically-sized-types%2Fdst-raw.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -24,23 +24,23 @@ struct Foo<T: ?Sized> {\n pub fn main() {\n     // raw trait object\n     let x = A { f: 42 };\n-    let z: *const Trait = &x;\n+    let z: *const dyn Trait = &x;\n     let r = unsafe {\n         (&*z).foo()\n     };\n     assert_eq!(r, 42);\n \n     // raw DST struct\n     let p = Foo {f: A { f: 42 }};\n-    let o: *const Foo<Trait> = &p;\n+    let o: *const Foo<dyn Trait> = &p;\n     let r = unsafe {\n         (&*o).f.foo()\n     };\n     assert_eq!(r, 42);\n \n     // raw DST tuple\n     let p = (A { f: 42 },);\n-    let o: *const (Trait,) = &p;\n+    let o: *const (dyn Trait,) = &p;\n     let r = unsafe {\n         (&*o).0.foo()\n     };\n@@ -84,21 +84,21 @@ pub fn main() {\n \n     // all of the above with *mut\n     let mut x = A { f: 42 };\n-    let z: *mut Trait = &mut x;\n+    let z: *mut dyn Trait = &mut x;\n     let r = unsafe {\n         (&*z).foo()\n     };\n     assert_eq!(r, 42);\n \n     let mut p = Foo {f: A { f: 42 }};\n-    let o: *mut Foo<Trait> = &mut p;\n+    let o: *mut Foo<dyn Trait> = &mut p;\n     let r = unsafe {\n         (&*o).f.foo()\n     };\n     assert_eq!(r, 42);\n \n     let mut p = (A { f: 42 },);\n-    let o: *mut (Trait,) = &mut p;\n+    let o: *mut (dyn Trait,) = &mut p;\n     let r = unsafe {\n         (&*o).0.foo()\n     };"}, {"sha": "70bcc3de07d29b279962e8d60e3f32d8b2c3288e", "filename": "src/test/run-pass/dynamically-sized-types/dst-trait-tuple.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fdynamically-sized-types%2Fdst-trait-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fdynamically-sized-types%2Fdst-trait-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdynamically-sized-types%2Fdst-trait-tuple.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -38,7 +38,7 @@ impl ToBar for Bar1 {\n }\n \n // x is a fat pointer\n-fn foo(x: &Fat<ToBar>) {\n+fn foo(x: &Fat<dyn ToBar>) {\n     assert_eq!(x.0, 5);\n     assert_eq!(x.1, \"some str\");\n     assert_eq!(x.2.to_bar(), Bar);\n@@ -49,12 +49,12 @@ fn foo(x: &Fat<ToBar>) {\n     assert_eq!(y.to_val(), 42);\n }\n \n-fn bar(x: &ToBar) {\n+fn bar(x: &dyn ToBar) {\n     assert_eq!(x.to_bar(), Bar);\n     assert_eq!(x.to_val(), 42);\n }\n \n-fn baz(x: &Fat<Fat<ToBar>>) {\n+fn baz(x: &Fat<Fat<dyn ToBar>>) {\n     assert_eq!(x.0, 5);\n     assert_eq!(x.1, \"some str\");\n     assert_eq!((x.2).0, 8);\n@@ -73,31 +73,31 @@ pub fn main() {\n     foo(&f1);\n     let f2 = &f1;\n     foo(f2);\n-    let f3: &Fat<ToBar> = f2;\n+    let f3: &Fat<dyn ToBar> = f2;\n     foo(f3);\n-    let f4: &Fat<ToBar> = &f1;\n+    let f4: &Fat<dyn ToBar> = &f1;\n     foo(f4);\n-    let f5: &Fat<ToBar> = &(5, \"some str\", Bar1 {f :42});\n+    let f5: &Fat<dyn ToBar> = &(5, \"some str\", Bar1 {f :42});\n     foo(f5);\n \n     // Zero size object.\n-    let f6: &Fat<ToBar> = &(5, \"some str\", Bar);\n+    let f6: &Fat<dyn ToBar> = &(5, \"some str\", Bar);\n     assert_eq!(f6.2.to_bar(), Bar);\n \n     // &*\n     //\n-    let f7: Box<ToBar> = Box::new(Bar1 {f :42});\n+    let f7: Box<dyn ToBar> = Box::new(Bar1 {f :42});\n     bar(&*f7);\n \n     // Deep nesting\n     let f1 = (5, \"some str\", (8, \"deep str\", Bar1 {f :42}));\n     baz(&f1);\n     let f2 = &f1;\n     baz(f2);\n-    let f3: &Fat<Fat<ToBar>> = f2;\n+    let f3: &Fat<Fat<dyn ToBar>> = f2;\n     baz(f3);\n-    let f4: &Fat<Fat<ToBar>> = &f1;\n+    let f4: &Fat<Fat<dyn ToBar>> = &f1;\n     baz(f4);\n-    let f5: &Fat<Fat<ToBar>> = &(5, \"some str\", (8, \"deep str\", Bar1 {f :42}));\n+    let f5: &Fat<Fat<dyn ToBar>> = &(5, \"some str\", (8, \"deep str\", Bar1 {f :42}));\n     baz(f5);\n }"}, {"sha": "ec6bc72192d4ffc0e1bb53fcdeba275da23ed433", "filename": "src/test/run-pass/dynamically-sized-types/dst-trait.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fdynamically-sized-types%2Fdst-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fdynamically-sized-types%2Fdst-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdynamically-sized-types%2Fdst-trait.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -38,7 +38,7 @@ impl ToBar for Bar1 {\n }\n \n // x is a fat pointer\n-fn foo(x: &Fat<ToBar>) {\n+fn foo(x: &Fat<dyn ToBar>) {\n     assert_eq!(x.f1, 5);\n     assert_eq!(x.f2, \"some str\");\n     assert_eq!(x.ptr.to_bar(), Bar);\n@@ -49,12 +49,12 @@ fn foo(x: &Fat<ToBar>) {\n     assert_eq!(y.to_val(), 42);\n }\n \n-fn bar(x: &ToBar) {\n+fn bar(x: &dyn ToBar) {\n     assert_eq!(x.to_bar(), Bar);\n     assert_eq!(x.to_val(), 42);\n }\n \n-fn baz(x: &Fat<Fat<ToBar>>) {\n+fn baz(x: &Fat<Fat<dyn ToBar>>) {\n     assert_eq!(x.f1, 5);\n     assert_eq!(x.f2, \"some str\");\n     assert_eq!(x.ptr.f1, 8);\n@@ -73,20 +73,20 @@ pub fn main() {\n     foo(&f1);\n     let f2 = &f1;\n     foo(f2);\n-    let f3: &Fat<ToBar> = f2;\n+    let f3: &Fat<dyn ToBar> = f2;\n     foo(f3);\n-    let f4: &Fat<ToBar> = &f1;\n+    let f4: &Fat<dyn ToBar> = &f1;\n     foo(f4);\n-    let f5: &Fat<ToBar> = &Fat { f1: 5, f2: \"some str\", ptr: Bar1 {f :42} };\n+    let f5: &Fat<dyn ToBar> = &Fat { f1: 5, f2: \"some str\", ptr: Bar1 {f :42} };\n     foo(f5);\n \n     // Zero size object.\n-    let f6: &Fat<ToBar> = &Fat { f1: 5, f2: \"some str\", ptr: Bar };\n+    let f6: &Fat<dyn ToBar> = &Fat { f1: 5, f2: \"some str\", ptr: Bar };\n     assert_eq!(f6.ptr.to_bar(), Bar);\n \n     // &*\n     //\n-    let f7: Box<ToBar> = Box::new(Bar1 {f :42});\n+    let f7: Box<dyn ToBar> = Box::new(Bar1 {f :42});\n     bar(&*f7);\n \n     // Deep nesting\n@@ -95,11 +95,11 @@ pub fn main() {\n     baz(&f1);\n     let f2 = &f1;\n     baz(f2);\n-    let f3: &Fat<Fat<ToBar>> = f2;\n+    let f3: &Fat<Fat<dyn ToBar>> = f2;\n     baz(f3);\n-    let f4: &Fat<Fat<ToBar>> = &f1;\n+    let f4: &Fat<Fat<dyn ToBar>> = &f1;\n     baz(f4);\n-    let f5: &Fat<Fat<ToBar>> =\n+    let f5: &Fat<Fat<dyn ToBar>> =\n         &Fat { f1: 5, f2: \"some str\", ptr: Fat { f1: 8, f2: \"deep str\", ptr: Bar1 {f :42}} };\n     baz(f5);\n }"}, {"sha": "6cce6c723c5a2a4056b6912a8e1d33bca1890efc", "filename": "src/test/run-pass/extern/extern-types-trait-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fextern%2Fextern-types-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fextern%2Fextern-types-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern%2Fextern-types-trait-impl.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -18,7 +18,7 @@ impl Foo for A {\n \n fn assert_foo<T: ?Sized + Foo>() { }\n \n-fn use_foo<T: ?Sized + Foo>(x: &Foo) {\n+fn use_foo<T: ?Sized + Foo>(x: &dyn Foo) {\n     x.foo();\n }\n "}, {"sha": "1943abe9e14da596fc4a015bf327dcfdef7fd9e3", "filename": "src/test/run-pass/fat-ptr-cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Ffat-ptr-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Ffat-ptr-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffat-ptr-cast.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -25,7 +25,7 @@ fn main() {\n     assert_eq!(a as usize, b as *const () as usize);\n \n     // And conversion to a void pointer/address for trait objects too.\n-    let a: *mut Foo = &mut Bar;\n+    let a: *mut dyn Foo = &mut Bar;\n     let b = a as *mut ();\n     let c = a as *const () as usize;\n     let d = unsafe {"}, {"sha": "e97785b5cacdfbc7ef8ee25378f47a7fc345828f", "filename": "src/test/run-pass/functions-closures/closure-expected-type/issue-38714.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Ffunctions-closures%2Fclosure-expected-type%2Fissue-38714.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Ffunctions-closures%2Fclosure-expected-type%2Fissue-38714.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffunctions-closures%2Fclosure-expected-type%2Fissue-38714.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -5,7 +5,7 @@ struct UsizeRef<'a> {\n     a: &'a usize\n }\n \n-type RefTo = Box<for<'r> Fn(&'r Vec<usize>) -> UsizeRef<'r>>;\n+type RefTo = Box<dyn for<'r> Fn(&'r Vec<usize>) -> UsizeRef<'r>>;\n \n fn ref_to<'a>(vec: &'a Vec<usize>) -> UsizeRef<'a> {\n     UsizeRef{ a: &vec[0]}"}, {"sha": "870ff980ec64d0ac897d9b475c6896a3816e6881", "filename": "src/test/run-pass/generics/generic-object.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fgenerics%2Fgeneric-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fgenerics%2Fgeneric-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgenerics%2Fgeneric-object.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -17,6 +17,6 @@ impl Foo<isize> for S {\n \n pub fn main() {\n     let x = box S { x: 1 };\n-    let y = x as Box<Foo<isize>>;\n+    let y = x as Box<dyn Foo<isize>>;\n     assert_eq!(y.get(), 1);\n }"}, {"sha": "987a3e414f5c0dfc2529aff1be1df6586157a204", "filename": "src/test/run-pass/hashmap-memory.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -19,7 +19,7 @@ mod map_reduce {\n     use std::str;\n     use std::thread;\n \n-    pub type putter<'a> = Box<FnMut(String, String) + 'a>;\n+    pub type putter<'a> = Box<dyn FnMut(String, String) + 'a>;\n \n     pub type mapper = extern fn(String, putter);\n "}, {"sha": "cc766c0605c9f03e648a2299bba744b01bb6fb2b", "filename": "src/test/run-pass/higher-rank-trait-bounds/hrtb-binder-levels-in-object-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fhigher-rank-trait-bounds%2Fhrtb-binder-levels-in-object-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fhigher-rank-trait-bounds%2Fhrtb-binder-levels-in-object-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhigher-rank-trait-bounds%2Fhrtb-binder-levels-in-object-types.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -19,7 +19,7 @@ struct Tcx<'tcx> {\n impl<'tcx> Typer<'tcx> for Tcx<'tcx> {\n }\n \n-fn g<'tcx>(typer: &Typer<'tcx>) {\n+fn g<'tcx>(typer: &dyn Typer<'tcx>) {\n }\n \n fn check_static_type<'x>(tcx: &Tcx<'x>) {"}, {"sha": "8431226a3ece1205a9dad2c9c292db413bad4751", "filename": "src/test/run-pass/higher-rank-trait-bounds/hrtb-debruijn-object-types-in-closures.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fhigher-rank-trait-bounds%2Fhrtb-debruijn-object-types-in-closures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fhigher-rank-trait-bounds%2Fhrtb-debruijn-object-types-in-closures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhigher-rank-trait-bounds%2Fhrtb-debruijn-object-types-in-closures.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -7,7 +7,7 @@ trait Typer<'tcx> {\n     fn dummy(&self) { }\n }\n \n-fn g<F>(_: F) where F: FnOnce(&Typer) {}\n+fn g<F>(_: F) where F: FnOnce(&dyn Typer) {}\n \n fn h() {\n     g(|typer| typer.dummy())"}, {"sha": "ff84ad9d2988e4bb2c5507659b5e4c902469d939", "filename": "src/test/run-pass/higher-rank-trait-bounds/hrtb-fn-like-trait-object.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fhigher-rank-trait-bounds%2Fhrtb-fn-like-trait-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fhigher-rank-trait-bounds%2Fhrtb-fn-like-trait-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhigher-rank-trait-bounds%2Fhrtb-fn-like-trait-object.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -6,7 +6,7 @@ trait FnLike<A,R> {\n     fn call(&self, arg: A) -> R;\n }\n \n-type FnObject<'b> = for<'a> FnLike<&'a isize, &'a isize> + 'b;\n+type FnObject<'b> = dyn for<'a> FnLike<&'a isize, &'a isize> + 'b;\n \n struct Identity;\n "}, {"sha": "1fab9758c5c83bd28adde3df8dee45f3d8a57d11", "filename": "src/test/run-pass/higher-rank-trait-bounds/hrtb-parse.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fhigher-rank-trait-bounds%2Fhrtb-parse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fhigher-rank-trait-bounds%2Fhrtb-parse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhigher-rank-trait-bounds%2Fhrtb-parse.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -24,8 +24,8 @@ fn foo01<T: for<'a> Get<&'a i32, &'a i32>>(t: T)\n \n // Parse HRTB with explicit `for` in various sorts of types:\n \n-fn foo10(t: Box<for<'a> Get<i32, i32>>) { }\n-fn foo11(t: Box<for<'a> Fn(i32) -> i32>) { }\n+fn foo10(t: Box<dyn for<'a> Get<i32, i32>>) { }\n+fn foo11(t: Box<dyn for<'a> Fn(i32) -> i32>) { }\n \n fn foo20(t: for<'a> fn(i32) -> i32) { }\n fn foo21(t: for<'a> unsafe fn(i32) -> i32) { }"}, {"sha": "6834c392d4e96634a8791cf071857fec2e9a3925", "filename": "src/test/run-pass/higher-rank-trait-bounds/hrtb-precedence-of-plus.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fhigher-rank-trait-bounds%2Fhrtb-precedence-of-plus.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fhigher-rank-trait-bounds%2Fhrtb-precedence-of-plus.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhigher-rank-trait-bounds%2Fhrtb-precedence-of-plus.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -6,7 +6,7 @@\n // 'static` and not `Fn(isize) -> (isize + 'static)`. The latter would\n // cause a compilation error. Issue #18772.\n \n-fn adder(y: isize) -> Box<Fn(isize) -> isize + 'static> {\n+fn adder(y: isize) -> Box<dyn Fn(isize) -> isize + 'static> {\n     Box::new(move |x| y + x)\n }\n "}, {"sha": "b97fdf4df508f2160a5e722d97741824190d9e24", "filename": "src/test/run-pass/higher-rank-trait-bounds/hrtb-resolve-lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fhigher-rank-trait-bounds%2Fhrtb-resolve-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fhigher-rank-trait-bounds%2Fhrtb-resolve-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhigher-rank-trait-bounds%2Fhrtb-resolve-lifetime.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -8,7 +8,7 @@ trait FnLike<A,R> {\n     fn call(&self, arg: A) -> R;\n }\n \n-type FnObject<'b> = for<'a> FnLike<&'a isize, &'a isize> + 'b;\n+type FnObject<'b> = dyn for<'a> FnLike<&'a isize, &'a isize> + 'b;\n \n fn main() {\n }"}, {"sha": "d8c726cdd71e50b0bb94b6991fe72f11754194bc", "filename": "src/test/run-pass/higher-rank-trait-bounds/hrtb-trait-object-paren-notation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fhigher-rank-trait-bounds%2Fhrtb-trait-object-paren-notation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fhigher-rank-trait-bounds%2Fhrtb-trait-object-paren-notation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhigher-rank-trait-bounds%2Fhrtb-trait-object-paren-notation.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -5,7 +5,7 @@ trait FnLike<A,R> {\n     fn call(&self, arg: A) -> R;\n }\n \n-type FnObject<'b> = for<'a> FnLike<(&'a i32,), &'a i32> + 'b;\n+type FnObject<'b> = dyn for<'a> FnLike<(&'a i32,), &'a i32> + 'b;\n \n struct Identity;\n "}, {"sha": "41ebb3f5a14ab1ee07b4cf085edf9cf6457198d5", "filename": "src/test/run-pass/higher-rank-trait-bounds/hrtb-trait-object-passed-to-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fhigher-rank-trait-bounds%2Fhrtb-trait-object-passed-to-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fhigher-rank-trait-bounds%2Fhrtb-trait-object-passed-to-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhigher-rank-trait-bounds%2Fhrtb-trait-object-passed-to-closure.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -17,7 +17,7 @@ struct NoAnn<'ast> {\n impl<'ast> PrinterSupport<'ast> for NoAnn<'ast> {\n }\n \n-fn foo<'ast, G>(f: Option<&'ast usize>, g: G) where G: FnOnce(&PrinterSupport) {\n+fn foo<'ast, G>(f: Option<&'ast usize>, g: G) where G: FnOnce(&dyn PrinterSupport) {\n     let annotation = NoAnn { f: f };\n     g(&annotation)\n }"}, {"sha": "6660f393f7dac5f5b1990a43cd4203ace8aab1ec", "filename": "src/test/run-pass/ifmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fifmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fifmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fifmt.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -93,7 +93,7 @@ pub fn main() {\n     t!(format!(\"{:#4}\", C), \"\u2603123\");\n     t!(format!(\"{:b}\", D), \"aa\u2603bb\");\n \n-    let a: &fmt::Debug = &1;\n+    let a: &dyn fmt::Debug = &1;\n     t!(format!(\"{:?}\", a), \"1\");\n \n "}, {"sha": "f1d6b37a6843f3fff6f98efdb8628b82aaba9f82", "filename": "src/test/run-pass/issues/issue-10802.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-10802.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-10802.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-10802.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -24,23 +24,23 @@ trait MyTrait { fn dummy(&self) { } }\n impl MyTrait for Box<DroppableStruct> {}\n impl MyTrait for Box<DroppableEnum> {}\n \n-struct Whatever { w: Box<MyTrait+'static> }\n+struct Whatever { w: Box<dyn MyTrait+'static> }\n impl  Whatever {\n-    fn new(w: Box<MyTrait+'static>) -> Whatever {\n+    fn new(w: Box<dyn MyTrait+'static>) -> Whatever {\n         Whatever { w: w }\n     }\n }\n \n fn main() {\n     {\n         let f: Box<_> = box DroppableStruct;\n-        let _a = Whatever::new(box f as Box<MyTrait>);\n+        let _a = Whatever::new(box f as Box<dyn MyTrait>);\n     }\n     assert!(unsafe { DROPPED });\n     unsafe { DROPPED = false; }\n     {\n         let f: Box<_> = box DroppableEnum::DroppableVariant1;\n-        let _a = Whatever::new(box f as Box<MyTrait>);\n+        let _a = Whatever::new(box f as Box<dyn MyTrait>);\n     }\n     assert!(unsafe { DROPPED });\n }"}, {"sha": "ce0951eafdd346d46d92c29b1cfb0c9f021821a8", "filename": "src/test/run-pass/issues/issue-11205.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-11205.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-11205.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-11205.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -5,44 +5,44 @@\n \n trait Foo { fn dummy(&self) { } }\n impl Foo for isize {}\n-fn foo(_: [&Foo; 2]) {}\n-fn foos(_: &[&Foo]) {}\n+fn foo(_: [&dyn Foo; 2]) {}\n+fn foos(_: &[&dyn Foo]) {}\n fn foog<T>(_: &[T], _: &[T]) {}\n \n-fn bar(_: [Box<Foo>; 2]) {}\n-fn bars(_: &[Box<Foo+'static>]) {}\n+fn bar(_: [Box<dyn Foo>; 2]) {}\n+fn bars(_: &[Box<dyn Foo+'static>]) {}\n \n fn main() {\n-    let x: [&Foo; 2] = [&1, &2];\n+    let x: [&dyn Foo; 2] = [&1, &2];\n     foo(x);\n     foo([&1, &2]);\n \n     let r = &1;\n-    let x: [&Foo; 2] = [r; 2];\n+    let x: [&dyn Foo; 2] = [r; 2];\n     foo(x);\n     foo([&1; 2]);\n \n-    let x: &[&Foo] = &[&1, &2];\n+    let x: &[&dyn Foo] = &[&1, &2];\n     foos(x);\n     foos(&[&1, &2]);\n \n-    let x: &[&Foo] = &[&1, &2];\n+    let x: &[&dyn Foo] = &[&1, &2];\n     let r = &1;\n     foog(x, &[r]);\n \n-    let x: [Box<Foo>; 2] = [Box::new(1), Box::new(2)];\n+    let x: [Box<dyn Foo>; 2] = [Box::new(1), Box::new(2)];\n     bar(x);\n     bar([Box::new(1), Box::new(2)]);\n \n-    let x: &[Box<Foo+'static>] = &[Box::new(1), Box::new(2)];\n+    let x: &[Box<dyn Foo+'static>] = &[Box::new(1), Box::new(2)];\n     bars(x);\n     bars(&[Box::new(1), Box::new(2)]);\n \n-    let x: &[Box<Foo+'static>] = &[Box::new(1), Box::new(2)];\n+    let x: &[Box<dyn Foo+'static>] = &[Box::new(1), Box::new(2)];\n     foog(x, &[Box::new(1)]);\n \n     struct T<'a> {\n-        t: [&'a (Foo+'a); 2]\n+        t: [&'a (dyn Foo+'a); 2]\n     }\n     let _n = T {\n         t: [&1, &2]\n@@ -51,34 +51,34 @@ fn main() {\n     let _n = T {\n         t: [r; 2]\n     };\n-    let x: [&Foo; 2] = [&1, &2];\n+    let x: [&dyn Foo; 2] = [&1, &2];\n     let _n = T {\n         t: x\n     };\n \n     struct F<'b> {\n-        t: &'b [&'b (Foo+'b)]\n+        t: &'b [&'b (dyn Foo+'b)]\n     }\n     let _n = F {\n         t: &[&1, &2]\n     };\n     let r = &1;\n-    let r: [&Foo; 2] = [r; 2];\n+    let r: [&dyn Foo; 2] = [r; 2];\n     let _n = F {\n         t: &r\n     };\n-    let x: [&Foo; 2] = [&1, &2];\n+    let x: [&dyn Foo; 2] = [&1, &2];\n     let _n = F {\n         t: &x\n     };\n \n     struct M<'a> {\n-        t: &'a [Box<Foo+'static>]\n+        t: &'a [Box<dyn Foo+'static>]\n     }\n     let _n = M {\n         t: &[Box::new(1), Box::new(2)]\n     };\n-    let x: [Box<Foo>; 2] = [Box::new(1), Box::new(2)];\n+    let x: [Box<dyn Foo>; 2] = [Box::new(1), Box::new(2)];\n     let _n = M {\n         t: &x\n     };"}, {"sha": "848ed6ac7a8ff12eb6d6ab113796f5f601dacc0c", "filename": "src/test/run-pass/issues/issue-11267.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-11267.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-11267.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-11267.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -10,7 +10,7 @@ impl T<isize> for Empty {\n     fn next(&mut self) -> Option<isize> { None }\n }\n \n-fn do_something_with(a : &mut T<isize>) {\n+fn do_something_with(a : &mut dyn T<isize>) {\n     println!(\"{:?}\", a.next())\n }\n "}, {"sha": "be18c736f1483fe8ab141709523f2a8f41379ad8", "filename": "src/test/run-pass/issues/issue-11677.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-11677.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-11677.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-11677.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -11,8 +11,8 @@ trait X<T> {\n     fn dummy(&self) -> T { panic!() }\n }\n \n-struct S<T> {f: Box<X<T>+'static>,\n-             g: Box<X<T>+'static>}\n+struct S<T> {f: Box<dyn X<T>+'static>,\n+             g: Box<dyn X<T>+'static>}\n \n struct F;\n impl X<isize> for F {"}, {"sha": "cb5e3dff3b31b395b5c36efeaffc26e9f5cb6aed", "filename": "src/test/run-pass/issues/issue-11709.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-11709.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-11709.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-11709.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -9,7 +9,7 @@\n \n struct S {x:()}\n \n-fn test(slot: &mut Option<Box<FnMut() -> Box<FnMut()>>>) -> () {\n+fn test(slot: &mut Option<Box<dyn FnMut() -> Box<dyn FnMut()>>>) -> () {\n   let a = slot.take();\n   let _a = match a {\n     // `{let .. a(); }` would break"}, {"sha": "e2756ec970c39d7713956ef1b9971f94b83dc4ab", "filename": "src/test/run-pass/issues/issue-12744.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-12744.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-12744.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-12744.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n fn main() {\n-    fn test() -> Box<std::any::Any + 'static> { Box::new(1) }\n+    fn test() -> Box<dyn std::any::Any + 'static> { Box::new(1) }\n     println!(\"{:?}\", test())\n }"}, {"sha": "63f3589c6cc635c8a7563c58d97fc445065988f9", "filename": "src/test/run-pass/issues/issue-13507-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-13507-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-13507-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-13507-2.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -23,7 +23,7 @@ pub fn type_ids() -> Vec<TypeId> {\n         TypeId::of::<FooFnPtr>(),\n         TypeId::of::<FooNil>(),\n         TypeId::of::<FooTuple>(),\n-        TypeId::of::<FooTrait>(),\n+        TypeId::of::<dyn FooTrait>(),\n         TypeId::of::<FooStruct>(),\n         TypeId::of::<FooEnum>()\n     ]"}, {"sha": "9f9db067bf4b5ea8924637d59e785094da61e554", "filename": "src/test/run-pass/issues/issue-13808.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-13808.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-13808.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-13808.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -4,7 +4,7 @@\n // pretty-expanded FIXME #23616\n \n struct Foo<'a> {\n-    listener: Box<FnMut() + 'a>,\n+    listener: Box<dyn FnMut() + 'a>,\n }\n \n impl<'a> Foo<'a> {"}, {"sha": "6bf8a589959c57afa908a31f6f8f686e94880cc1", "filename": "src/test/run-pass/issues/issue-14399.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-14399.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-14399.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-14399.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -16,5 +16,5 @@ impl A for B1 {}\n \n fn main() {\n     let v: Box<_> = box B1;\n-    let _c: Box<A> = v.clone();\n+    let _c: Box<dyn A> = v.clone();\n }"}, {"sha": "5d8aab2ce74ce532fde522ebda3a3989ff44c6cd", "filename": "src/test/run-pass/issues/issue-14589.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-14589.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-14589.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-14589.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -5,9 +5,9 @@\n // pretty-expanded FIXME #23616\n \n fn main() {\n-    send::<Box<Foo>>(Box::new(Output(0)));\n-    Test::<Box<Foo>>::foo(Box::new(Output(0)));\n-    Test::<Box<Foo>>::new().send(Box::new(Output(0)));\n+    send::<Box<dyn Foo>>(Box::new(Output(0)));\n+    Test::<Box<dyn Foo>>::foo(Box::new(Output(0)));\n+    Test::<Box<dyn Foo>>::new().send(Box::new(Output(0)));\n }\n \n fn send<T>(_: T) {}"}, {"sha": "00b2e3607fcba4f872eb9f01f5c18d553a57f17b", "filename": "src/test/run-pass/issues/issue-14821.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-14821.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-14821.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-14821.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -6,16 +6,16 @@ struct Meow;\n impl SomeTrait for Meow {}\n \n struct Foo<'a> {\n-    x: &'a SomeTrait,\n-    y: &'a SomeTrait,\n+    x: &'a dyn SomeTrait,\n+    y: &'a dyn SomeTrait,\n }\n \n impl<'a> Foo<'a> {\n-    pub fn new<'b>(x: &'b SomeTrait, y: &'b SomeTrait) -> Foo<'b> { Foo { x: x, y: y } }\n+    pub fn new<'b>(x: &'b dyn SomeTrait, y: &'b dyn SomeTrait) -> Foo<'b> { Foo { x: x, y: y } }\n }\n \n fn main() {\n     let r = Meow;\n     let s = Meow;\n-    let q = Foo::new(&r as &SomeTrait, &s as &SomeTrait);\n+    let q = Foo::new(&r as &dyn SomeTrait, &s as &dyn SomeTrait);\n }"}, {"sha": "943615433549e2e84e518e4ca494fc192f860536", "filename": "src/test/run-pass/issues/issue-14919.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-14919.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-14919.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-14919.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -9,7 +9,7 @@ trait Matcher {\n \n struct CharPredMatcher<'a, 'b> {\n     str: &'a str,\n-    pred: Box<FnMut(char) -> bool + 'b>,\n+    pred: Box<dyn FnMut(char) -> bool + 'b>,\n }\n \n impl<'a, 'b> Matcher for CharPredMatcher<'a, 'b> {"}, {"sha": "a12564ca9c0ee40a301c2bf91856a0ade73a5040", "filename": "src/test/run-pass/issues/issue-14958.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-14958.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-14958.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-14958.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -7,17 +7,17 @@ trait Foo { fn dummy(&self) { }}\n \n struct Bar;\n \n-impl<'a> std::ops::Fn<(&'a (Foo+'a),)> for Bar {\n-    extern \"rust-call\" fn call(&self, _: (&'a Foo,)) {}\n+impl<'a> std::ops::Fn<(&'a (dyn Foo+'a),)> for Bar {\n+    extern \"rust-call\" fn call(&self, _: (&'a dyn Foo,)) {}\n }\n \n-impl<'a> std::ops::FnMut<(&'a (Foo+'a),)> for Bar {\n-    extern \"rust-call\" fn call_mut(&mut self, a: (&'a Foo,)) { self.call(a) }\n+impl<'a> std::ops::FnMut<(&'a (dyn Foo+'a),)> for Bar {\n+    extern \"rust-call\" fn call_mut(&mut self, a: (&'a dyn Foo,)) { self.call(a) }\n }\n \n-impl<'a> std::ops::FnOnce<(&'a (Foo+'a),)> for Bar {\n+impl<'a> std::ops::FnOnce<(&'a (dyn Foo+'a),)> for Bar {\n     type Output = ();\n-    extern \"rust-call\" fn call_once(self, a: (&'a Foo,)) { self.call(a) }\n+    extern \"rust-call\" fn call_once(self, a: (&'a dyn Foo,)) { self.call(a) }\n }\n \n struct Baz;"}, {"sha": "7b137b4af56a7d9745f7a9cd91aac7771d91b3db", "filename": "src/test/run-pass/issues/issue-15155.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-15155.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-15155.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-15155.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -4,18 +4,18 @@ trait IndirectTraitWithSend: TraitWithSend {}\n \n // Check struct instantiation (Box<TraitWithSend> will only have Send if TraitWithSend has Send)\n #[allow(dead_code)]\n-struct Blah { x: Box<TraitWithSend> }\n+struct Blah { x: Box<dyn TraitWithSend> }\n impl TraitWithSend for Blah {}\n \n // Struct instantiation 2-levels deep\n #[allow(dead_code)]\n-struct IndirectBlah { x: Box<IndirectTraitWithSend> }\n+struct IndirectBlah { x: Box<dyn IndirectTraitWithSend> }\n impl TraitWithSend for IndirectBlah {}\n impl IndirectTraitWithSend for IndirectBlah {}\n \n fn test_trait<T: Send + ?Sized>() { println!(\"got here!\") }\n \n fn main() {\n-    test_trait::<TraitWithSend>();\n-    test_trait::<IndirectTraitWithSend>();\n+    test_trait::<dyn TraitWithSend>();\n+    test_trait::<dyn IndirectTraitWithSend>();\n }"}, {"sha": "9ceffff2e38066ac903cfe1b37ccdd83025fcb3a", "filename": "src/test/run-pass/issues/issue-15763.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-15763.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-15763.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-15763.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -78,12 +78,12 @@ fn main() {\n     assert_eq!(cc().unwrap(), 3);\n     assert_eq!(dd().unwrap(), 3);\n \n-    let i = box 32isize as Box<A>;\n+    let i = box 32isize as Box<dyn A>;\n     assert_eq!(i.aaa(), 3);\n-    let i = box 32isize as Box<A>;\n+    let i = box 32isize as Box<dyn A>;\n     assert_eq!(i.bbb(), 3);\n-    let i = box 32isize as Box<A>;\n+    let i = box 32isize as Box<dyn A>;\n     assert_eq!(i.ccc().unwrap(), 3);\n-    let i = box 32isize as Box<A>;\n+    let i = box 32isize as Box<dyn A>;\n     assert_eq!(i.ddd().unwrap(), 3);\n }"}, {"sha": "54ad8fd076e4e871ccf601daa2671551b7018764", "filename": "src/test/run-pass/issues/issue-16739.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-16739.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-16739.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-16739.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -39,12 +39,12 @@ impl FnOnce<(u32,u32)> for Foo {\n }\n \n fn main() {\n-    let mut f = box Foo { foo: 42 } as Box<FnMut() -> u32>;\n+    let mut f = box Foo { foo: 42 } as Box<dyn FnMut() -> u32>;\n     assert_eq!(f.call_mut(()), 42);\n \n-    let mut f = box Foo { foo: 40 } as Box<FnMut(u32) -> u32>;\n+    let mut f = box Foo { foo: 40 } as Box<dyn FnMut(u32) -> u32>;\n     assert_eq!(f.call_mut((2,)), 42);\n \n-    let mut f = box Foo { foo: 40 } as Box<FnMut(u32, u32) -> u32>;\n+    let mut f = box Foo { foo: 40 } as Box<dyn FnMut(u32, u32) -> u32>;\n     assert_eq!(f.call_mut((1, 1)), 42);\n }"}, {"sha": "c3c6ff304888db8c6627a0608e9bb0ba0ad3b8c8", "filename": "src/test/run-pass/issues/issue-16922.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-16922.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-16922.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-16922.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -7,5 +7,5 @@ fn foo(_: &u8) {\n }\n \n fn main() {\n-    let _ = &foo as &Any;\n+    let _ = &foo as &dyn Any;\n }"}, {"sha": "20a8d136124695495b4dbe7e6e798497ffa4e4ff", "filename": "src/test/run-pass/issues/issue-17322.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-17322.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-17322.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-17322.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -5,11 +5,11 @@\n \n use std::io::{self, Write};\n \n-fn f(wr: &mut Write) {\n+fn f(wr: &mut dyn Write) {\n     wr.write_all(b\"hello\").ok().expect(\"failed\");\n }\n \n fn main() {\n-    let mut wr = box io::stdout() as Box<Write>;\n+    let mut wr = box io::stdout() as Box<dyn Write>;\n     f(&mut wr);\n }"}, {"sha": "62f6bcf15e3e74edd6b674d05a8af0a2ce416944", "filename": "src/test/run-pass/issues/issue-17351.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-17351.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-17351.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-17351.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -6,5 +6,5 @@ impl Str for str {}\n impl<'a, S: ?Sized> Str for &'a S where S: Str {}\n \n fn main() {\n-    let _: &Str = &\"x\";\n+    let _: &dyn Str = &\"x\";\n }"}, {"sha": "2f6464668c2ceafd2dde15cccf7dc2318db278e6", "filename": "src/test/run-pass/issues/issue-17771.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-17771.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-17771.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-17771.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -4,13 +4,13 @@\n \n trait Aaa { fn dummy(&self) { } }\n \n-impl<'a> Aaa for &'a mut (Aaa + 'a) {}\n+impl<'a> Aaa for &'a mut (dyn Aaa + 'a) {}\n \n struct Bar<'a> {\n-    writer: &'a mut (Aaa + 'a),\n+    writer: &'a mut (dyn Aaa + 'a),\n }\n \n-fn baz(_: &mut Aaa) {\n+fn baz(_: &mut dyn Aaa) {\n }\n \n fn foo<'a>(mut bar: Bar<'a>) {"}, {"sha": "6873c7ccb7f1c4a06857924633b41354c8db74e3", "filename": "src/test/run-pass/issues/issue-17897.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-17897.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-17897.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-17897.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-fn action(mut cb: Box<FnMut(usize) -> usize>) -> usize {\n+fn action(mut cb: Box<dyn FnMut(usize) -> usize>) -> usize {\n     cb(1)\n }\n "}, {"sha": "772cd9d7eda822acd082934770668c63b7f37baf", "filename": "src/test/run-pass/issues/issue-20055-box-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-20055-box-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-20055-box-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-20055-box-trait.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -22,7 +22,7 @@ pub fn foo(box_1: fn () -> Box<[i8; 1]>,\n            box_4: fn () -> Box<[i8; 4]>,\n             ) {\n     println!(\"Hello World 1\");\n-    let _: Box<Boo> = match 3 {\n+    let _: Box<dyn Boo> = match 3 {\n         1 => box_1(),\n         2 => box_2(),\n         3 => box_3(),"}, {"sha": "0ca67d9dc710e6c421ad4428f762c2b9341ad537", "filename": "src/test/run-pass/issues/issue-20575.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-20575.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-20575.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-20575.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -4,7 +4,7 @@\n // pretty-expanded FIXME #23616\n \n fn main() {\n-    let functions: [Box<Fn() -> Option<()>>; 1] = [Box::new(|| None)];\n+    let functions: [Box<dyn Fn() -> Option<()>>; 1] = [Box::new(|| None)];\n \n     let _: Option<Vec<()>> = functions.iter().map(|f| (*f)()).collect();\n }"}, {"sha": "2bc5034960a1bfdaf9d862ec13878e96577043fd", "filename": "src/test/run-pass/issues/issue-20676.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-20676.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-20676.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-20676.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -7,6 +7,6 @@\n use std::fmt;\n \n fn main() {\n-    let a: &fmt::Debug = &1;\n+    let a: &dyn fmt::Debug = &1;\n     format!(\"{:?}\", a);\n }"}, {"sha": "4ec7e3195ebe05fb1ba39c98fcdbcdb1d8ecf616", "filename": "src/test/run-pass/issues/issue-20953.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-20953.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-20953.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-20953.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -2,11 +2,11 @@\n #![allow(unused_mut)]\n #![allow(unused_variables)]\n fn main() {\n-    let mut shrinker: Box<Iterator<Item=i32>> = Box::new(vec![1].into_iter());\n+    let mut shrinker: Box<dyn Iterator<Item=i32>> = Box::new(vec![1].into_iter());\n     println!(\"{:?}\", shrinker.next());\n     for v in shrinker { assert!(false); }\n \n-    let mut shrinker: &mut Iterator<Item=i32> = &mut vec![1].into_iter();\n+    let mut shrinker: &mut dyn Iterator<Item=i32> = &mut vec![1].into_iter();\n     println!(\"{:?}\", shrinker.next());\n     for v in shrinker { assert!(false); }\n }"}, {"sha": "0483e62fd21213d300c92ce64930bab8c1b77c82", "filename": "src/test/run-pass/issues/issue-21058.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-21058.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-21058.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-21058.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -13,7 +13,7 @@ fn main() {\n         // str\n         std::intrinsics::type_name::<str>(),\n         // Trait\n-        std::intrinsics::type_name::<Send>(),\n+        std::intrinsics::type_name::<dyn Send>(),\n         // Newtype\n         std::intrinsics::type_name::<NT>(),\n         // DST"}, {"sha": "c970e77abb72b5b50fe7eb333a10d82b489e332a", "filename": "src/test/run-pass/issues/issue-21361.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-21361.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-21361.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-21361.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -2,10 +2,10 @@\n \n fn main() {\n     let v = vec![1, 2, 3];\n-    let boxed: Box<Iterator<Item=i32>> = Box::new(v.into_iter());\n+    let boxed: Box<dyn Iterator<Item=i32>> = Box::new(v.into_iter());\n     assert_eq!(boxed.max(), Some(3));\n \n     let v = vec![1, 2, 3];\n-    let boxed: &mut Iterator<Item=i32> = &mut v.into_iter();\n+    let boxed: &mut dyn Iterator<Item=i32> = &mut v.into_iter();\n     assert_eq!(boxed.max(), Some(3));\n }"}, {"sha": "d1cd4ec7b8a01995d1e76c34820e18c2abce14da", "filename": "src/test/run-pass/issues/issue-21655.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-21655.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-21655.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-21655.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -1,6 +1,6 @@\n // run-pass\n \n-fn test(it: &mut Iterator<Item=i32>) {\n+fn test(it: &mut dyn Iterator<Item=i32>) {\n     for x in it {\n         assert_eq!(x, 1)\n     }"}, {"sha": "e67a924b9eedc0ac0363ce725b8b2b891fe4755e", "filename": "src/test/run-pass/issues/issue-2190-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-2190-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-2190-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-2190-1.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -9,11 +9,11 @@ use std::thread::Builder;\n \n static generations: usize = 1024+256+128+49;\n \n-fn spawn(mut f: Box<FnMut() + 'static + Send>) {\n+fn spawn(mut f: Box<dyn FnMut() + 'static + Send>) {\n     Builder::new().stack_size(32 * 1024).spawn(move|| f());\n }\n \n-fn child_no(x: usize) -> Box<FnMut() + 'static + Send> {\n+fn child_no(x: usize) -> Box<dyn FnMut() + 'static + Send> {\n     Box::new(move|| {\n         if x < generations {\n             spawn(child_no(x+1));"}, {"sha": "5f6d9dcc9ae43d90ef0c770d721ce67f3d7b0066", "filename": "src/test/run-pass/issues/issue-22346.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-22346.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-22346.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-22346.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -3,7 +3,7 @@\n // pretty-expanded FIXME #23616\n \n // This used to cause an ICE because the retslot for the \"return\" had the wrong type\n-fn testcase<'a>() -> Box<Iterator<Item=usize> + 'a> {\n+fn testcase<'a>() -> Box<dyn Iterator<Item=usize> + 'a> {\n     return Box::new((0..3).map(|i| { return i; }));\n }\n "}, {"sha": "c74e53fca60fdfac8b07edf7c483277f39c491ff", "filename": "src/test/run-pass/issues/issue-2288.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-2288.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-2288.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-2288.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -23,13 +23,13 @@ fn foo<A>(b: A) -> foo<A> {\n     }\n }\n \n-fn f<A>(x: Box<clam<A>>, a: A) {\n+fn f<A>(x: Box<dyn clam<A>>, a: A) {\n   x.chowder(a);\n }\n \n pub fn main() {\n \n   let c = foo(42);\n-  let d: Box<clam<isize>> = box c as Box<clam<isize>>;\n+  let d: Box<dyn clam<isize>> = box c as Box<dyn clam<isize>>;\n   f(d, c.x);\n }"}, {"sha": "e21f86351eeee130592500b7593953b33331c0e6", "filename": "src/test/run-pass/issues/issue-23261.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-23261.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-23261.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-23261.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -41,7 +41,7 @@ fn check_both(val: &Foo<[u8]>) {\n     }\n }\n \n-fn check_trait_obj(val: &Foo<Get>) {\n+fn check_trait_obj(val: &Foo<dyn Get>) {\n     match *val {\n         Foo { a, ref inner } => {\n             assert_eq!(a, 32);\n@@ -56,6 +56,6 @@ fn main() {\n     check_dst_val(foo);\n     check_both(foo);\n \n-    let foo: &Foo<Get> = &Foo { a: 32, inner: 32 };\n+    let foo: &Foo<dyn Get> = &Foo { a: 32, inner: 32 };\n     check_trait_obj(foo);\n }"}, {"sha": "1dd3d9293bcc6112b04cded5179522135edba6c5", "filename": "src/test/run-pass/issues/issue-23485.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-23485.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-23485.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-23485.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -45,6 +45,6 @@ impl Iterator for Counter {\n }\n \n fn main() {\n-    let mut x: Box<Iterator<Item=Token>> = Box::new(Counter { value: 22 });\n+    let mut x: Box<dyn Iterator<Item=Token>> = Box::new(Counter { value: 22 });\n     assert_eq!(x.next().unwrap().value, 22);\n }"}, {"sha": "264e1ee22cdda8c70eddee0af9c0650e844a5672", "filename": "src/test/run-pass/issues/issue-24010.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-24010.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-24010.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-24010.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -2,7 +2,7 @@ trait Foo: Fn(i32) -> i32 + Send {}\n \n impl<T: ?Sized + Fn(i32) -> i32 + Send> Foo for T {}\n \n-fn wants_foo(f: Box<Foo>) -> i32 {\n+fn wants_foo(f: Box<dyn Foo>) -> i32 {\n     f(42)\n }\n "}, {"sha": "54622afbcfc1323daabb8d9e56c98ce1f5cb0ea9", "filename": "src/test/run-pass/issues/issue-24086.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-24086.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-24086.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-24086.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -7,8 +7,8 @@ pub struct Registry<'a> {\n }\n \n pub struct Listener<'a> {\n-    pub announce: Option<Box<FnMut(&mut Registry) + 'a>>,\n-    pub remove: Option<Box<FnMut(&mut Registry) + 'a>>,\n+    pub announce: Option<Box<dyn FnMut(&mut Registry) + 'a>>,\n+    pub remove: Option<Box<dyn FnMut(&mut Registry) + 'a>>,\n }\n \n impl<'a> Drop for Registry<'a> {"}, {"sha": "6f8ec700951e25a4cec8c1584e29fea67aed6328", "filename": "src/test/run-pass/issues/issue-25339.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-25339.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-25339.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-25339.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -12,7 +12,7 @@ pub trait Routing<I> {\n \n pub trait ToRouting {\n     type Input;\n-    type Routing : ?Sized = Routing<Self::Input, Output=()>;\n+    type Routing : ?Sized = dyn Routing<Self::Input, Output=()>;\n     fn to_routing(self) -> Self::Routing;\n }\n "}, {"sha": "e7b9ea3acfc01e225263bdeffa68cc7f8de480d4", "filename": "src/test/run-pass/issues/issue-25515.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-25515.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-25515.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-25515.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -13,7 +13,7 @@ fn main() {\n     let mut drops = 0;\n \n     {\n-        let _: Rc<Send> = Rc::new(Foo(&mut drops));\n+        let _: Rc<dyn Send> = Rc::new(Foo(&mut drops));\n     }\n \n     assert_eq!(1, drops);"}, {"sha": "25a2da707dc0f469d422d00e9a4edb725d192e65", "filename": "src/test/run-pass/issues/issue-25549-multiple-drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-25549-multiple-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-25549-multiple-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-25549-multiple-drop.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -25,7 +25,7 @@ fn main() {\n \n     drops = 0;\n     {\n-        let y = &Holder(Foo(&mut drops)) as &Holder<Trait>;\n+        let y = &Holder(Foo(&mut drops)) as &Holder<dyn Trait>;\n         // this used to cause an extra drop of the Foo instance\n         let x = &y.0;\n     }"}, {"sha": "ec1864d7deb589b883aab2fce42d19ed0f9b74fa", "filename": "src/test/run-pass/issues/issue-25757.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-25757.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-25757.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-25757.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -9,7 +9,7 @@ impl Foo {\n     }\n }\n \n-const FUNC: &'static Fn(&mut Foo) -> () = &Foo::x;\n+const FUNC: &'static dyn Fn(&mut Foo) -> () = &Foo::x;\n \n fn main() {\n     let mut foo = Foo { a: 137 };"}, {"sha": "4b6f2c2b3bc7d7d70dbcbef21a934368b6992ee1", "filename": "src/test/run-pass/issues/issue-26641.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-26641.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-26641.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-26641.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-struct Parser<'a>(Box<FnMut(Parser) + 'a>);\n+struct Parser<'a>(Box<dyn FnMut(Parser) + 'a>);\n \n fn main() {\n     let _x = Parser(Box::new(|_|{}));"}, {"sha": "281ae13399dd2590dfc88d358c07f90ece659a41", "filename": "src/test/run-pass/issues/issue-26709.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-26709.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-26709.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-26709.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -11,7 +11,7 @@ fn main() {\n     let mut x = 0;\n     {\n         let wrapper = Box::new(Wrapper(&mut x, 123));\n-        let _: Box<Wrapper<Send>> = wrapper;\n+        let _: Box<Wrapper<dyn Send>> = wrapper;\n     }\n     assert_eq!(432, x)\n }"}, {"sha": "307a67160980db8da67d82f2daa8d9cd6b6ffc6f", "filename": "src/test/run-pass/issues/issue-26802.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-26802.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-26802.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-26802.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -5,7 +5,7 @@ trait Foo<'a> {\n \n pub struct FooBar;\n impl Foo<'static> for FooBar {}\n-fn test(foobar: FooBar) -> Box<Foo<'static>> {\n+fn test(foobar: FooBar) -> Box<dyn Foo<'static>> {\n     Box::new(foobar)\n }\n "}, {"sha": "bcf8a6731910fb006838b666be9b0846ce4a7d3a", "filename": "src/test/run-pass/issues/issue-26805.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-26805.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-26805.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-26805.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -2,5 +2,5 @@\n struct NonOrd;\n \n fn main() {\n-    let _: Box<Iterator<Item = _>> = Box::new(vec![NonOrd].into_iter());\n+    let _: Box<dyn Iterator<Item = _>> = Box::new(vec![NonOrd].into_iter());\n }"}, {"sha": "2d5827f476b9e3c090ef95cd39758b2bf403cb27", "filename": "src/test/run-pass/issues/issue-26905.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-26905.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-26905.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-26905.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -17,5 +17,5 @@ fn main() {\n     let data = [1, 2, 3];\n     let iter = data.iter();\n     let x = MyRc { _ptr: &iter, _boo: PhantomData };\n-    let _y: MyRc<Iterator<Item=&u32>> = x;\n+    let _y: MyRc<dyn Iterator<Item=&u32>> = x;\n }"}, {"sha": "161e2d4d204eb22eaa893cc21c2aea4d3454659a", "filename": "src/test/run-pass/issues/issue-27268.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-27268.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-27268.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-27268.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -1,4 +1,4 @@\n // run-pass\n fn main() {\n-    const _C: &'static Fn() = &||{};\n+    const _C: &'static dyn Fn() = &||{};\n }"}, {"sha": "d449f6449aa091e3a0d42de258bbe4961fd34397", "filename": "src/test/run-pass/issues/issue-2734.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-2734.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-2734.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-2734.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -11,8 +11,8 @@ trait hax {\n }\n impl<A> hax for A { }\n \n-fn perform_hax<T: 'static>(x: Box<T>) -> Box<hax+'static> {\n-    box x as Box<hax+'static>\n+fn perform_hax<T: 'static>(x: Box<T>) -> Box<dyn hax+'static> {\n+    box x as Box<dyn hax+'static>\n }\n \n fn deadcode() {"}, {"sha": "794c7d4edaa113f6e9d9089f7d820b0c988c48a5", "filename": "src/test/run-pass/issues/issue-2735.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-2735.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-2735.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-2735.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -11,8 +11,8 @@ trait hax {\n }\n impl<A> hax for A { }\n \n-fn perform_hax<T: 'static>(x: Box<T>) -> Box<hax+'static> {\n-    box x as Box<hax+'static>\n+fn perform_hax<T: 'static>(x: Box<T>) -> Box<dyn hax+'static> {\n+    box x as Box<dyn hax+'static>\n }\n \n fn deadcode() {"}, {"sha": "9f85473380f828d0a6b400f9539ce4c673c75db8", "filename": "src/test/run-pass/issues/issue-27890.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-27890.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-27890.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-27890.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -1,6 +1,6 @@\n // run-pass\n-static PLUS_ONE: &'static (Fn(i32) -> i32 + Sync) = (&|x: i32| { x + 1 })\n-    as &'static (Fn(i32) -> i32 + Sync);\n+static PLUS_ONE: &'static (dyn Fn(i32) -> i32 + Sync) = (&|x: i32| { x + 1 })\n+    as &'static (dyn Fn(i32) -> i32 + Sync);\n \n fn main() {\n     assert_eq!(PLUS_ONE(2), 3);"}, {"sha": "11641ca738018396765f77182fa3e1d0d70492be", "filename": "src/test/run-pass/issues/issue-2935.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-2935.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-2935.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-2935.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -20,7 +20,7 @@ pub fn main() {\n   //   let y = box ({a: 4});\n   //    let z = box ({a: 4} as it);\n   //    let z = box ({a: true} as it);\n-    let z: Box<_> = box (box true as Box<it>);\n+    let z: Box<_> = box (box true as Box<dyn it>);\n     //  x.f();\n     // y.f();\n     // (*z).f();"}, {"sha": "ee2456da3e2153f035b5df970177b8cf315f7a53", "filename": "src/test/run-pass/issues/issue-3052.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-3052.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-3052.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-3052.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -2,7 +2,7 @@\n #![allow(dead_code)]\n // pretty-expanded FIXME #23616\n \n-type Connection = Box<FnMut(Vec<u8>) + 'static>;\n+type Connection = Box<dyn FnMut(Vec<u8>) + 'static>;\n \n fn f() -> Option<Connection> {\n     let mock_connection: Connection = Box::new(|_| {});"}, {"sha": "e837fc81721a807c7a5166632d0a9263c9243988", "filename": "src/test/run-pass/issues/issue-30530.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-30530.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-30530.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-30530.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -8,15 +8,15 @@\n pub enum Handler {\n     Default,\n     #[allow(dead_code)]\n-    Custom(*mut Box<Fn()>),\n+    Custom(*mut Box<dyn Fn()>),\n }\n \n fn main() {\n     take(Handler::Default, Box::new(main));\n }\n \n #[inline(never)]\n-pub fn take(h: Handler, f: Box<Fn()>) -> Box<Fn()> {\n+pub fn take(h: Handler, f: Box<dyn Fn()>) -> Box<dyn Fn()> {\n     unsafe {\n         match h {\n             Handler::Custom(ptr) => *Box::from_raw(ptr),"}, {"sha": "c718449d84eed48676e61c6eee6cc1963b073a0d", "filename": "src/test/run-pass/issues/issue-30615.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-30615.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-30615.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-30615.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n fn main() {\n-    &0u8 as *const u8 as *const PartialEq<u8>;\n+    &0u8 as *const u8 as *const dyn PartialEq<u8>;\n     &[0u8] as *const [u8; 1] as *const [u8];\n }"}, {"sha": "cc94cc819d6655d047576adf205fc812746e1284", "filename": "src/test/run-pass/issues/issue-32389.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-32389.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-32389.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-32389.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -2,7 +2,7 @@\n fn foo<T>() -> T { loop {} }\n \n fn test() {\n-    let ref mut a: &mut FnMut((i8,), i16) = foo();\n+    let ref mut a: &mut dyn FnMut((i8,), i16) = foo();\n     a((0,), 0);\n }\n "}, {"sha": "499fa7c1f27ac7837432b4bdf3e8b8466dc932d8", "filename": "src/test/run-pass/issues/issue-33387.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-33387.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-33387.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-33387.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -15,18 +15,18 @@ impl Foo for [u8; 2] {\n \n struct Bar<T: ?Sized>(T);\n \n-fn unsize_fat_ptr<'a>(x: &'a Bar<Foo + Send + 'a>) -> &'a Bar<Foo + 'a> {\n+fn unsize_fat_ptr<'a>(x: &'a Bar<dyn Foo + Send + 'a>) -> &'a Bar<dyn Foo + 'a> {\n     x\n }\n \n-fn unsize_nested_fat_ptr(x: Arc<Foo + Send>) -> Arc<Foo> {\n+fn unsize_nested_fat_ptr(x: Arc<dyn Foo + Send>) -> Arc<dyn Foo> {\n     x\n }\n \n fn main() {\n-    let x: Box<Bar<Foo + Send>> = Box::new(Bar([1,2]));\n+    let x: Box<Bar<dyn Foo + Send>> = Box::new(Bar([1,2]));\n     assert_eq!(unsize_fat_ptr(&*x).0.get(), [1, 2]);\n \n-    let x: Arc<Foo + Send> = Arc::new([3, 4]);\n+    let x: Arc<dyn Foo + Send> = Arc::new([3, 4]);\n     assert_eq!(unsize_nested_fat_ptr(x).get(), [3, 4]);\n }"}, {"sha": "4e01d4d3061f93409c5d0df304965424120cd703", "filename": "src/test/run-pass/issues/issue-33461.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-33461.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-33461.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-33461.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -24,5 +24,5 @@ impl<P: TheTrait> Shape<P> for TheType<P::TheAssociatedType> {\n \n fn main() {\n     let ball = TheType { t: PhantomData };\n-    let handle: &Shape<()> = &ball;\n+    let handle: &dyn Shape<()> = &ball;\n }"}, {"sha": "26e7358408f484c10ed78651361b17d10f381b55", "filename": "src/test/run-pass/issues/issue-34503.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-34503.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-34503.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-34503.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -7,5 +7,5 @@ fn main() {\n         where Option<T>: Ord { *x < *x }\n     }\n     impl Foo<X> for () {}\n-    let _ = &() as &Foo<X>;\n+    let _ = &() as &dyn Foo<X>;\n }"}, {"sha": "05fd1b15d43d08179fa395a38ac27a97b72dbc08", "filename": "src/test/run-pass/issues/issue-35815.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-35815.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-35815.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-35815.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -10,6 +10,6 @@ struct Foo<T: ?Sized> {\n \n fn main() {\n     let foo: &Foo<i32> = &Foo { a: 1, b: false, c: 2i32 };\n-    let foo_unsized: &Foo<Send> = foo;\n+    let foo_unsized: &Foo<dyn Send> = foo;\n     assert_eq!(mem::size_of_val(foo), mem::size_of_val(foo_unsized));\n }"}, {"sha": "d96dc80ea719ceec61eda10b76e34164ac7afcc1", "filename": "src/test/run-pass/issues/issue-36260.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-36260.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-36260.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-36260.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -2,7 +2,7 @@\n // Make sure this compiles without getting a linker error because of missing\n // drop-glue because the collector missed adding drop-glue for the closure:\n \n-fn create_fn() -> Box<Fn()> {\n+fn create_fn() -> Box<dyn Fn()> {\n     let text = String::new();\n \n     Box::new(move || { let _ = &text; })"}, {"sha": "e5341ba7dbedde67dc232e703f869b51fe744511", "filename": "src/test/run-pass/issues/issue-36786-resolve-call.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-36786-resolve-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-36786-resolve-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-36786-resolve-call.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -3,6 +3,6 @@\n // correctly\n \n fn main() {\n-    let x : Vec<Box<Fn()>> = vec![Box::new(|| ())];\n+    let x : Vec<Box<dyn Fn()>> = vec![Box::new(|| ())];\n     x[0]()\n }"}, {"sha": "f48d549b3eb2cc2a386da36c71a7be430d93a7ce", "filename": "src/test/run-pass/issues/issue-3702.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-3702.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-3702.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-3702.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -6,7 +6,7 @@ pub fn main() {\n     fn to_string(&self) -> String;\n   }\n \n-  fn to_string(t: Box<Text>) {\n+  fn to_string(t: Box<dyn Text>) {\n     println!(\"{}\", (*t).to_string());\n   }\n "}, {"sha": "408d8d866d862efdfb7989f471d0be0e00aa6dfb", "filename": "src/test/run-pass/issues/issue-3794.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-3794.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-3794.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-3794.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -16,7 +16,7 @@ impl T for S {\n     }\n }\n \n-fn print_t(t: &T) {\n+fn print_t(t: &dyn T) {\n     t.print();\n }\n \n@@ -27,6 +27,6 @@ fn print_s(s: &S) {\n pub fn main() {\n     let s: Box<S> = box S { s: 5 };\n     print_s(&*s);\n-    let t: Box<T> = s as Box<T>;\n+    let t: Box<dyn T> = s as Box<dyn T>;\n     print_t(&*t);\n }"}, {"sha": "968cf08916fd6dd2bfd840e605fb7c0c715d4df7", "filename": "src/test/run-pass/issues/issue-39292.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-39292.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-39292.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-39292.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -13,5 +13,5 @@ trait Bar: for<'a> Foo<&'a ()> { }\n impl Bar for () {}\n \n fn main() {\n-    (&() as &Bar).print(); // Segfault\n+    (&() as &dyn Bar).print(); // Segfault\n }"}, {"sha": "148cf527e7cb7799dd2b5de6b6827bb113048130", "filename": "src/test/run-pass/issues/issue-39823.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-39823.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-39823.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-39823.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -11,15 +11,15 @@ struct LocalC(u32);\n struct LocalG<T>(T);\n \n fn main() {\n-    let virtual_localc : &Fn(_) -> LocalC = &LocalC;\n+    let virtual_localc : &dyn Fn(_) -> LocalC = &LocalC;\n     assert_eq!(virtual_localc(1), LocalC(1));\n \n-    let virtual_localg : &Fn(_) -> LocalG<u32> = &LocalG;\n+    let virtual_localg : &dyn Fn(_) -> LocalG<u32> = &LocalG;\n     assert_eq!(virtual_localg(1), LocalG(1));\n \n-    let virtual_remotec : &Fn(_) -> RemoteC = &RemoteC;\n+    let virtual_remotec : &dyn Fn(_) -> RemoteC = &RemoteC;\n     assert_eq!(virtual_remotec(1), RemoteC(1));\n \n-    let virtual_remoteg : &Fn(_) -> RemoteG<u32> = &RemoteG;\n+    let virtual_remoteg : &dyn Fn(_) -> RemoteG<u32> = &RemoteG;\n     assert_eq!(virtual_remoteg(1), RemoteG(1));\n }"}, {"sha": "967edfd44157688aa25659d824525b626b019fc5", "filename": "src/test/run-pass/issues/issue-41053.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-41053.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-41053.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-41053.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -6,8 +6,8 @@ pub trait Trait { fn foo(&self) {} }\n pub struct Foo;\n \n impl Iterator for Foo {\n-    type Item = Box<Trait>;\n-    fn next(&mut self) -> Option<Box<Trait>> {\n+    type Item = Box<dyn Trait>;\n+    fn next(&mut self) -> Option<Box<dyn Trait>> {\n         extern crate issue_41053;\n         impl ::Trait for issue_41053::Test {\n             fn foo(&self) {}"}, {"sha": "dcdd1c21ee527b664f591de9564f7bb63473c741", "filename": "src/test/run-pass/issues/issue-41744.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-41744.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-41744.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-41744.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -3,5 +3,5 @@ trait Tc {}\n impl Tc for bool {}\n \n fn main() {\n-    let _: &[&Tc] = &[&true];\n+    let _: &[&dyn Tc] = &[&true];\n }"}, {"sha": "318e3099f98ba4139df86f2dbaf881881d5ed754", "filename": "src/test/run-pass/issues/issue-42210.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-42210.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-42210.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-42210.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -12,9 +12,9 @@ struct Bar;\n trait Baz {\n }\n \n-impl Foo for (Bar, Baz) { }\n+impl Foo for (Bar, dyn Baz) { }\n \n \n fn main() {\n-    <(Bar, Baz) as Foo>::foo()\n+    <(Bar, dyn Baz) as Foo>::foo()\n }"}, {"sha": "c886f4b0a2d6bdadd801bc16f3396a4a8717422b", "filename": "src/test/run-pass/issues/issue-43132.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-43132.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-43132.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-43132.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -6,7 +6,7 @@ fn main() {\n \n fn foo() {\n     let b = mk::<\n-        Forward<(Box<Future<Error = u32>>,)>,\n+        Forward<(Box<dyn Future<Error = u32>>,)>,\n     >();\n     b.map_err(|_| ()).join();\n }"}, {"sha": "3df319b683f47d03ebbc104087c474cecaedad44", "filename": "src/test/run-pass/issues/issue-4333.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-4333.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-4333.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-4333.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -5,6 +5,6 @@\n use std::io;\n \n pub fn main() {\n-    let stdout = &mut io::stdout() as &mut io::Write;\n+    let stdout = &mut io::stdout() as &mut dyn io::Write;\n     stdout.write(b\"Hello!\");\n }"}, {"sha": "a1ed3c36544010f9a176bfe8ba95a888da3c8d53", "filename": "src/test/run-pass/issues/issue-47638.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-47638.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-47638.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-47638.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -1,10 +1,10 @@\n // run-pass\n #![allow(unused_variables)]\n-fn id<'c, 'b>(f: &'c &'b Fn(&i32)) -> &'c &'b Fn(&'static i32) {\n+fn id<'c, 'b>(f: &'c &'b dyn Fn(&i32)) -> &'c &'b dyn Fn(&'static i32) {\n     f\n }\n \n fn main() {\n-    let f: &Fn(&i32) = &|x| {};\n+    let f: &dyn Fn(&i32) = &|x| {};\n     id(&f);\n }"}, {"sha": "fc869ae4fec261fd93cd721a40f456ca12f35f2e", "filename": "src/test/run-pass/issues/issue-5008-borrowed-traitobject-method-call.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-5008-borrowed-traitobject-method-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-5008-borrowed-traitobject-method-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-5008-borrowed-traitobject-method-call.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -23,12 +23,12 @@ impl Debuggable for Thing {\n     fn debug_name(&self) -> String { self.name.clone() }\n }\n \n-fn print_name(x: &Debuggable)\n+fn print_name(x: &dyn Debuggable)\n {\n     println!(\"debug_name = {}\", x.debug_name());\n }\n \n pub fn main() {\n     let thing = Thing::new();\n-    print_name(&thing as &Debuggable);\n+    print_name(&thing as &dyn Debuggable);\n }"}, {"sha": "5a83d1c2ff9fd1b10fb3b989849611e0906374be", "filename": "src/test/run-pass/issues/issue-5192.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-5192.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-5192.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-5192.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -24,18 +24,18 @@ impl EventLoop for UvEventLoop {\n }\n \n pub struct Scheduler {\n-    event_loop: Box<EventLoop+'static>,\n+    event_loop: Box<dyn EventLoop+'static>,\n }\n \n impl Scheduler {\n \n-    pub fn new(event_loop: Box<EventLoop+'static>) -> Scheduler {\n+    pub fn new(event_loop: Box<dyn EventLoop+'static>) -> Scheduler {\n         Scheduler {\n             event_loop: event_loop,\n         }\n     }\n }\n \n pub fn main() {\n-    let _sched = Scheduler::new(box UvEventLoop::new() as Box<EventLoop>);\n+    let _sched = Scheduler::new(box UvEventLoop::new() as Box<dyn EventLoop>);\n }"}, {"sha": "aa513277830128d70f11828117d92aa69fba4ea3", "filename": "src/test/run-pass/issues/issue-5666.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-5666.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-5666.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-5666.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -19,7 +19,7 @@ impl Barks for Dog {\n pub fn main() {\n     let snoopy = box Dog{name: \"snoopy\".to_string()};\n     let bubbles = box Dog{name: \"bubbles\".to_string()};\n-    let barker = [snoopy as Box<Barks>, bubbles as Box<Barks>];\n+    let barker = [snoopy as Box<dyn Barks>, bubbles as Box<dyn Barks>];\n \n     for pup in &barker {\n         println!(\"{}\", pup.bark());"}, {"sha": "6fe9943d3689f7eee49cc37446eb3ef80b61bbd2", "filename": "src/test/run-pass/issues/issue-5708.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-5708.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-5708.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-5708.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -21,11 +21,11 @@ impl Inner for isize {\n }\n \n struct Outer<'a> {\n-    inner: &'a (Inner+'a)\n+    inner: &'a (dyn Inner+'a)\n }\n \n impl<'a> Outer<'a> {\n-    fn new(inner: &Inner) -> Outer {\n+    fn new(inner: &dyn Inner) -> Outer {\n         Outer {\n             inner: inner\n         }\n@@ -34,7 +34,7 @@ impl<'a> Outer<'a> {\n \n pub fn main() {\n     let inner: isize = 5;\n-    let outer = Outer::new(&inner as &Inner);\n+    let outer = Outer::new(&inner as &dyn Inner);\n     outer.inner.print();\n }\n \n@@ -45,11 +45,11 @@ pub trait MyTrait<T> {\n }\n \n pub struct MyContainer<'a, T:'a> {\n-    foos: Vec<&'a (MyTrait<T>+'a)> ,\n+    foos: Vec<&'a (dyn MyTrait<T>+'a)> ,\n }\n \n impl<'a, T> MyContainer<'a, T> {\n-    pub fn add (&mut self, foo: &'a MyTrait<T>) {\n+    pub fn add (&mut self, foo: &'a dyn MyTrait<T>) {\n         self.foos.push(foo);\n     }\n }"}, {"sha": "303fb4fbc94165f64d2d33f60d0b4986fb820435", "filename": "src/test/run-pass/issues/issue-5988.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-5988.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-5988.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-5988.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -19,6 +19,6 @@ impl T for A {\n \n fn main() {\n     let a = A;\n-    let br = &a as &B;\n+    let br = &a as &dyn B;\n     br.f();\n }"}, {"sha": "8859fbe6afb7b4ef01c5a3595d30828d8fe61866", "filename": "src/test/run-pass/issues/issue-6128.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-6128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-6128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-6128.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -20,5 +20,5 @@ impl<E> Graph<isize, E> for HashMap<isize, isize> {\n \n pub fn main() {\n     let g : Box<HashMap<isize,isize>> = box HashMap::new();\n-    let _g2 : Box<Graph<isize,isize>> = g as Box<Graph<isize,isize>>;\n+    let _g2 : Box<dyn Graph<isize,isize>> = g as Box<dyn Graph<isize,isize>>;\n }"}, {"sha": "b7a44ed86239584cca3d8013e72b8024c67a07c3", "filename": "src/test/run-pass/issues/issue-6157.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-6157.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-6157.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-6157.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -9,15 +9,15 @@ impl<F> OpInt for F where F: FnMut(isize, isize) -> isize {\n     }\n }\n \n-fn squarei<'a>(x: isize, op: &'a mut OpInt) -> isize { op.call(x, x) }\n+fn squarei<'a>(x: isize, op: &'a mut dyn OpInt) -> isize { op.call(x, x) }\n \n fn muli(x:isize, y:isize) -> isize { x * y }\n \n pub fn main() {\n     let mut f = |x, y| muli(x, y);\n     {\n         let g = &mut f;\n-        let h = g as &mut OpInt;\n+        let h = g as &mut dyn OpInt;\n         squarei(3, h);\n     }\n }"}, {"sha": "d8bd83f0dc6adfba71918c8eec3f61cf60db59dd", "filename": "src/test/run-pass/issues/issue-6318.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-6318.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-6318.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-6318.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -4,7 +4,7 @@\n #![feature(box_syntax)]\n \n pub enum Thing {\n-    A(Box<Foo+'static>)\n+    A(Box<dyn Foo+'static>)\n }\n \n pub trait Foo {\n@@ -16,7 +16,7 @@ pub struct Struct;\n impl Foo for Struct {}\n \n pub fn main() {\n-    match Thing::A(box Struct as Box<Foo+'static>) {\n+    match Thing::A(box Struct as Box<dyn Foo + 'static>) {\n         Thing::A(_a) => 0,\n     };\n }"}, {"sha": "c62405554b4d1d390b7b385f49a698e3edc0325b", "filename": "src/test/run-pass/issues/issue-7563.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-7563.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-7563.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-7563.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -16,7 +16,7 @@ struct B<'a> { b: isize, pa: &'a A }\n     }\n \n impl<'a> B<'a> {\n-    fn get_pa(&self) -> &'a IDummy { self.pa as &'a IDummy }\n+    fn get_pa(&self) -> &'a dyn IDummy { self.pa as &'a dyn IDummy }\n }\n \n pub fn main() {"}, {"sha": "de833324bd20f4be22b8356ff04c47ca45fc3d71", "filename": "src/test/run-pass/issues/issue-7911.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-7911.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-7911.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-7911.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -12,18 +12,18 @@ struct Foo { bar: Bar }\n impl FooBar for Bar {}\n \n trait Test {\n-    fn get_immut(&self) -> &FooBar;\n-    fn get_mut(&mut self) -> &mut FooBar;\n+    fn get_immut(&self) -> &dyn FooBar;\n+    fn get_mut(&mut self) -> &mut dyn FooBar;\n }\n \n macro_rules! generate_test { ($type_:path, $slf:ident, $field:expr) => (\n     impl Test for $type_ {\n-        fn get_immut(&$slf) -> &FooBar {\n-            &$field as &FooBar\n+        fn get_immut(&$slf) -> &dyn FooBar {\n+            &$field as &dyn FooBar\n         }\n \n-        fn get_mut(&mut $slf) -> &mut FooBar {\n-            &mut $field as &mut FooBar\n+        fn get_mut(&mut $slf) -> &mut dyn FooBar {\n+            &mut $field as &mut dyn FooBar\n         }\n     }\n )}"}, {"sha": "31a305c31bee241058c1a4be6a88f759e858b29a", "filename": "src/test/run-pass/issues/issue-8248.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-8248.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-8248.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-8248.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -7,9 +7,9 @@ trait A {\n struct B;\n impl A for B {}\n \n-fn foo(_: &mut A) {}\n+fn foo(_: &mut dyn A) {}\n \n pub fn main() {\n     let mut b = B;\n-    foo(&mut b as &mut A);\n+    foo(&mut b as &mut dyn A);\n }"}, {"sha": "d09dff3a6970905b972a571a3f53fc809627493c", "filename": "src/test/run-pass/issues/issue-8249.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-8249.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-8249.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-8249.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -9,10 +9,10 @@ struct B;\n impl A for B {}\n \n struct C<'a> {\n-    foo: &'a mut (A+'a),\n+    foo: &'a mut (dyn A+'a),\n }\n \n-fn foo(a: &mut A) {\n+fn foo(a: &mut dyn A) {\n     C{ foo: a };\n }\n "}, {"sha": "3d87e1c203783b1b65787f9526da7900fc6416b5", "filename": "src/test/run-pass/issues/issue-9129.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-9129.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-9129.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-9129.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -20,7 +20,7 @@ fn Ident_new() -> Ident {\n     Ident {name: 0x6789ABCD }\n }\n \n-pub fn light_fuse(fld: Box<bomb>) {\n+pub fn light_fuse(fld: Box<dyn bomb>) {\n     int3!();\n     let f = || {\n         int3!();\n@@ -30,6 +30,6 @@ pub fn light_fuse(fld: Box<bomb>) {\n }\n \n pub fn main() {\n-    let b = box S as Box<bomb>;\n+    let b = box S as Box<dyn bomb>;\n     light_fuse(b);\n }"}, {"sha": "cc0dd4fc14a0dc73ca7ff2425e8d250cc3f309ac", "filename": "src/test/run-pass/issues/issue-9394-inherited-trait-calls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-9394-inherited-trait-calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-9394-inherited-trait-calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-9394-inherited-trait-calls.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -52,7 +52,7 @@ impl Super for X {\n \n pub fn main() {\n     let n = X;\n-    let s = &n as &Super;\n+    let s = &n as &dyn Super;\n     assert_eq!(s.bar(),\"super bar\".to_string());\n     assert_eq!(s.foo(),\"base foo\".to_string());\n     assert_eq!(s.foo1(),\"base foo1\".to_string());"}, {"sha": "2698a3b17c6c25d4d444f26dc8005c0770a64380", "filename": "src/test/run-pass/issues/issue-9951.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-9951.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fissues%2Fissue-9951.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-9951.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -11,11 +11,11 @@ impl Bar for u8 {\n }\n \n fn main() {\n-    let (a, b) = (&5u8 as &Bar, &9u8 as &Bar);\n-    let (c, d): (&Bar, &Bar) = (a, b);\n+    let (a, b) = (&5u8 as &dyn Bar, &9u8 as &dyn Bar);\n+    let (c, d): (&dyn Bar, &dyn Bar) = (a, b);\n \n-    let (a, b) = (Box::new(5u8) as Box<Bar>, Box::new(9u8) as Box<Bar>);\n-    let (c, d): (&Bar, &Bar) = (&*a, &*b);\n+    let (a, b) = (Box::new(5u8) as Box<dyn Bar>, Box::new(9u8) as Box<dyn Bar>);\n+    let (c, d): (&dyn Bar, &dyn Bar) = (&*a, &*b);\n \n-    let (c, d): (&Bar, &Bar) = (&5, &9);\n+    let (c, d): (&dyn Bar, &dyn Bar) = (&5, &9);\n }"}, {"sha": "42dc6a4b06e1dc30dee6534894fd3e4a7ca45def", "filename": "src/test/run-pass/last-use-in-cap-clause.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Flast-use-in-cap-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Flast-use-in-cap-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flast-use-in-cap-clause.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -3,7 +3,7 @@\n \n struct A { a: Box<isize> }\n \n-fn foo() -> Box<FnMut() -> isize + 'static> {\n+fn foo() -> Box<dyn FnMut() -> isize + 'static> {\n     let k: Box<_> = Box::new(22);\n     let _u = A {a: k.clone()};\n     let result  = || 22;"}, {"sha": "eb1872cc7f094f72705ee0bbf4442fc906accdb9", "filename": "src/test/run-pass/macros/colorful-write-macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fmacros%2Fcolorful-write-macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fmacros%2Fcolorful-write-macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmacros%2Fcolorful-write-macros.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -4,7 +4,7 @@ use std::io::Write;\n use std::fmt;\n \n struct Foo<'a> {\n-    writer: &'a mut (Write+'a),\n+    writer: &'a mut (dyn Write+'a),\n     other: &'a str,\n }\n \n@@ -22,7 +22,7 @@ fn borrowing_writer_from_struct_and_formatting_struct_field(foo: Foo) {\n \n fn main() {\n     let mut w = Vec::new();\n-    write!(&mut w as &mut Write, \"\").unwrap();\n+    write!(&mut w as &mut dyn Write, \"\").unwrap();\n     write!(&mut w, \"\").unwrap(); // should coerce\n     println!(\"ok\");\n "}, {"sha": "dd3ad2ef0ac0fd90655e7af2228748c0220aa556", "filename": "src/test/run-pass/macros/type-macros-simple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fmacros%2Ftype-macros-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fmacros%2Ftype-macros-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmacros%2Ftype-macros-simple.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -16,7 +16,7 @@ fn issue_36540() {\n \n     let x: m!() = m!();\n     std::cell::Cell::<m!()>::new(m!());\n-    impl<T> std::ops::Index<m!()> for Trait<(m!(), T)>\n+    impl<T> std::ops::Index<m!()> for dyn Trait<(m!(), T)>\n         where T: Trait<m!()>\n     {\n         type Output = m!();"}, {"sha": "acd4a8465b0757dcec4aa982b4b90d93fb11f6ed", "filename": "src/test/run-pass/methods/method-argument-inference-associated-type.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fmethods%2Fmethod-argument-inference-associated-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fmethods%2Fmethod-argument-inference-associated-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmethods%2Fmethod-argument-inference-associated-type.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -10,13 +10,13 @@ pub trait Service {\n pub struct S<T>(T);\n \n impl Service for ClientMap {\n-    type Request = S<Box<Fn(i32)>>;\n+    type Request = S<Box<dyn Fn(i32)>>;\n     fn call(&self, _req: Self::Request) {}\n }\n \n \n impl Service for ClientMap2 {\n-    type Request = (Box<Fn(i32)>,);\n+    type Request = (Box<dyn Fn(i32)>,);\n     fn call(&self, _req: Self::Request) {}\n }\n "}, {"sha": "fc0db03e3a96894350a9611f398c150de1afebe3", "filename": "src/test/run-pass/mir/mir_codegen_calls.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fmir%2Fmir_codegen_calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fmir%2Fmir_codegen_calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmir%2Fmir_codegen_calls.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -42,7 +42,7 @@ fn test4(x: &Foo, a: isize) -> isize {\n     x.extension_method(a)\n }\n \n-fn test5(x: &Bar, a: isize) -> isize {\n+fn test5(x: &dyn Bar, a: isize) -> isize {\n     // Test calling method on trait object\n     x.extension_method(a)\n }\n@@ -88,11 +88,11 @@ fn test_closure<F>(f: &F, x: i32, y: i32) -> i32\n     f(x, y)\n }\n \n-fn test_fn_object(f: &Fn(i32, i32) -> i32, x: i32, y: i32) -> i32 {\n+fn test_fn_object(f: &dyn Fn(i32, i32) -> i32, x: i32, y: i32) -> i32 {\n     f(x, y)\n }\n \n-fn test_fn_impl(f: &&Fn(i32, i32) -> i32, x: i32, y: i32) -> i32 {\n+fn test_fn_impl(f: &&dyn Fn(i32, i32) -> i32, x: i32, y: i32) -> i32 {\n     // This call goes through the Fn implementation for &Fn provided in\n     // core::ops::impls. It expands to a static Fn::call() that calls the\n     // Fn::call() implementation of the object shim underneath.\n@@ -174,7 +174,7 @@ fn main() {\n     let closure = |x: i32, y: i32| { r*(x + (y*2)) };\n     assert_eq!(test_fn_const_call(&closure), 294);\n     assert_eq!(test_closure(&closure, 100, 1), 306);\n-    let function_object = &closure as &Fn(i32, i32) -> i32;\n+    let function_object = &closure as &dyn Fn(i32, i32) -> i32;\n     assert_eq!(test_fn_object(function_object, 100, 2), 312);\n     assert_eq!(test_fn_impl(&function_object, 100, 3), 318);\n     assert_eq!(test_fn_direct_call(&closure, 100, 4), 324);"}, {"sha": "5c1f1c3b70135ce17f461780fb7ba32ea74ad958", "filename": "src/test/run-pass/mir/mir_codegen_critical_edge.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fmir%2Fmir_codegen_critical_edge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fmir%2Fmir_codegen_critical_edge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmir%2Fmir_codegen_critical_edge.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -37,7 +37,7 @@ where A: Iterator, B: Iterator<Item=A::Item>\n }\n \n // Make sure we actually codegen a version of the function\n-pub fn do_stuff(mut f: Foo<Box<Iterator<Item=u32>>, Box<Iterator<Item=u32>>>) {\n+pub fn do_stuff(mut f: Foo<Box<dyn Iterator<Item=u32>>, Box<dyn Iterator<Item=u32>>>) {\n     let _x = f.next();\n }\n "}, {"sha": "f3dcc6b85fd98a537443a103812d17392b83e7c4", "filename": "src/test/run-pass/mir/mir_coercions.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fmir%2Fmir_coercions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fmir%2Fmir_coercions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmir%2Fmir_coercions.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -4,12 +4,12 @@\n use std::ops::CoerceUnsized;\n use std::marker::Unsize;\n \n-fn identity_coercion(x: &(Fn(u32)->u32 + Send)) -> &Fn(u32)->u32 {\n+fn identity_coercion(x: &(dyn Fn(u32)->u32 + Send)) -> &dyn Fn(u32)->u32 {\n     x\n }\n fn fn_coercions(f: &fn(u32) -> u32) ->\n     (unsafe fn(u32) -> u32,\n-     &(Fn(u32) -> u32+Send))\n+     &(dyn Fn(u32) -> u32+Send))\n {\n     (*f, f)\n }\n@@ -35,8 +35,8 @@ fn coerce_triv_ptr_wrapper(p: TrivPtrWrapper<[u8; 3]>) -> TrivPtrWrapper<[u8]> {\n     p\n }\n \n-fn coerce_fat_ptr_wrapper(p: PtrWrapper<Fn(u32) -> u32+Send>)\n-                          -> PtrWrapper<Fn(u32) -> u32> {\n+fn coerce_fat_ptr_wrapper(p: PtrWrapper<dyn Fn(u32) -> u32+Send>)\n+                          -> PtrWrapper<dyn Fn(u32) -> u32> {\n     p\n }\n \n@@ -65,7 +65,7 @@ fn main() {\n     let z = coerce_fat_ptr_wrapper(PtrWrapper(2,3,(),&square_local));\n     assert_eq!((z.3)(6), 36);\n \n-    let z: PtrWrapper<Fn(u32) -> u32> =\n+    let z: PtrWrapper<dyn Fn(u32) -> u32> =\n         coerce_ptr_wrapper_poly(PtrWrapper(2,3,(),&square_local));\n     assert_eq!((z.3)(6), 36);\n }"}, {"sha": "6583852aa9bb64b1c475e7b1df5c4c182d1246f1", "filename": "src/test/run-pass/mir/mir_raw_fat_ptr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fmir%2Fmir_raw_fat_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fmir%2Fmir_raw_fat_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmir%2Fmir_raw_fat_ptr.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -63,7 +63,7 @@ fn compare_au8(a: *const [u8], b: *const [u8]) -> ComparisonResults {\n     }\n }\n \n-fn compare_foo<'a>(a: *const (Foo+'a), b: *const (Foo+'a)) -> ComparisonResults {\n+fn compare_foo<'a>(a: *const (dyn Foo+'a), b: *const (dyn Foo+'a)) -> ComparisonResults {\n     ComparisonResults {\n         lt: a < b,\n         le: a <= b,\n@@ -74,7 +74,7 @@ fn compare_foo<'a>(a: *const (Foo+'a), b: *const (Foo+'a)) -> ComparisonResults\n     }\n }\n \n-fn simple_eq<'a>(a: *const (Foo+'a), b: *const (Foo+'a)) -> bool {\n+fn simple_eq<'a>(a: *const (dyn Foo+'a), b: *const (dyn Foo+'a)) -> bool {\n     let result = a == b;\n     result\n }\n@@ -128,7 +128,7 @@ fn main() {\n     let u32_ = (4u32, 5u32);\n \n     // check ordering for ptrs\n-    let buf: &mut [*const Foo] = &mut [\n+    let buf: &mut [*const dyn Foo] = &mut [\n         &u8_, &u8_.0,\n         &u32_, &u32_.0,\n     ];"}, {"sha": "5539518c37072d26bd8c1c5cb021d887598ff3eb", "filename": "src/test/run-pass/new-box.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fnew-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fnew-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnew-box.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -18,13 +18,13 @@ impl Trait for Struct {\n     }\n }\n \n-fn g(x: Box<Trait>) {\n+fn g(x: Box<dyn Trait>) {\n     x.printme();\n-    let y: &Trait = &*x;\n+    let y: &dyn Trait = &*x;\n     y.printme();\n }\n \n fn main() {\n     f(box 1234);\n-    g(box Struct as Box<Trait>);\n+    g(box Struct as Box<dyn Trait>);\n }"}, {"sha": "79c9f7dc01103cc38f2560622cfbdf15cfbfd256", "filename": "src/test/run-pass/newlambdas-ret-infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fnewlambdas-ret-infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fnewlambdas-ret-infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnewlambdas-ret-infer.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -4,7 +4,7 @@\n \n // pretty-expanded FIXME #23616\n \n-fn unique() -> Box<FnMut()+'static> { return Box::new(|| ()); }\n+fn unique() -> Box<dyn FnMut()+'static> { return Box::new(|| ()); }\n \n pub fn main() {\n }"}, {"sha": "104f5be7767d35fc9febece36c1e7770bfc35799", "filename": "src/test/run-pass/newlambdas-ret-infer2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fnewlambdas-ret-infer2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fnewlambdas-ret-infer2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnewlambdas-ret-infer2.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -4,7 +4,7 @@\n \n // pretty-expanded FIXME #23616\n \n-fn unique() -> Box<FnMut()+'static> { Box::new(|| ()) }\n+fn unique() -> Box<dyn FnMut()+'static> { Box::new(|| ()) }\n \n pub fn main() {\n }"}, {"sha": "cd61dea03788fa9ab3ae6c2c5db18bf0b7f6ebb1", "filename": "src/test/run-pass/object-lifetime-default-default-to-static.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fobject-lifetime-default-default-to-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fobject-lifetime-default-default-to-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fobject-lifetime-default-default-to-static.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -10,23 +10,23 @@ trait Test {\n }\n \n struct SomeStruct {\n-    t: Box<Test>,\n-    u: Box<Test+'static>,\n+    t: Box<dyn Test>,\n+    u: Box<dyn Test+'static>,\n }\n \n-fn a(t: Box<Test>, mut ss: SomeStruct) {\n+fn a(t: Box<dyn Test>, mut ss: SomeStruct) {\n     ss.t = t;\n }\n \n-fn b(t: Box<Test+'static>, mut ss: SomeStruct) {\n+fn b(t: Box<dyn Test+'static>, mut ss: SomeStruct) {\n     ss.t = t;\n }\n \n-fn c(t: Box<Test>, mut ss: SomeStruct) {\n+fn c(t: Box<dyn Test>, mut ss: SomeStruct) {\n     ss.u = t;\n }\n \n-fn d(t: Box<Test+'static>, mut ss: SomeStruct) {\n+fn d(t: Box<dyn Test+'static>, mut ss: SomeStruct) {\n     ss.u = t;\n }\n "}, {"sha": "9212f2802c0180572f34ae6d25bacfe1b54c93c4", "filename": "src/test/run-pass/object-lifetime-default-from-rptr-box.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fobject-lifetime-default-from-rptr-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fobject-lifetime-default-from-rptr-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fobject-lifetime-default-from-rptr-box.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -10,21 +10,21 @@ trait Test {\n }\n \n struct SomeStruct<'a> {\n-    t: &'a Box<Test>,\n-    u: &'a Box<Test+'a>,\n+    t: &'a Box<dyn Test>,\n+    u: &'a Box<dyn Test+'a>,\n }\n \n-fn a<'a>(t: &'a Box<Test>, mut ss: SomeStruct<'a>) {\n+fn a<'a>(t: &'a Box<dyn Test>, mut ss: SomeStruct<'a>) {\n     ss.t = t;\n }\n \n-fn b<'a>(t: &'a Box<Test>, mut ss: SomeStruct<'a>) {\n+fn b<'a>(t: &'a Box<dyn Test>, mut ss: SomeStruct<'a>) {\n     ss.u = t;\n }\n \n // see also compile-fail/object-lifetime-default-from-rptr-box-error.rs\n \n-fn d<'a>(t: &'a Box<Test+'a>, mut ss: SomeStruct<'a>) {\n+fn d<'a>(t: &'a Box<dyn Test+'a>, mut ss: SomeStruct<'a>) {\n     ss.u = t;\n }\n "}, {"sha": "061f3a116fcbb9dee6c993488cfdec6569a81fa9", "filename": "src/test/run-pass/object-lifetime-default-from-rptr-mut.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fobject-lifetime-default-from-rptr-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fobject-lifetime-default-from-rptr-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fobject-lifetime-default-from-rptr-mut.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -10,23 +10,23 @@ trait Test {\n }\n \n struct SomeStruct<'a> {\n-    t: &'a mut Test,\n-    u: &'a mut (Test+'a),\n+    t: &'a mut dyn Test,\n+    u: &'a mut (dyn Test+'a),\n }\n \n-fn a<'a>(t: &'a mut Test, mut ss: SomeStruct<'a>) {\n+fn a<'a>(t: &'a mut dyn Test, mut ss: SomeStruct<'a>) {\n     ss.t = t;\n }\n \n-fn b<'a>(t: &'a mut Test, mut ss: SomeStruct<'a>) {\n+fn b<'a>(t: &'a mut dyn Test, mut ss: SomeStruct<'a>) {\n     ss.u = t;\n }\n \n-fn c<'a>(t: &'a mut (Test+'a), mut ss: SomeStruct<'a>) {\n+fn c<'a>(t: &'a mut (dyn Test+'a), mut ss: SomeStruct<'a>) {\n     ss.t = t;\n }\n \n-fn d<'a>(t: &'a mut (Test+'a), mut ss: SomeStruct<'a>) {\n+fn d<'a>(t: &'a mut (dyn Test+'a), mut ss: SomeStruct<'a>) {\n     ss.u = t;\n }\n "}, {"sha": "cfa4af0d7a53fb5b0102783e7f34a04e94e4cfb4", "filename": "src/test/run-pass/object-lifetime-default-from-rptr.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fobject-lifetime-default-from-rptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fobject-lifetime-default-from-rptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fobject-lifetime-default-from-rptr.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -12,30 +12,30 @@ trait Test {\n }\n \n struct SomeStruct<'a> {\n-    t: &'a Test,\n-    u: &'a (Test+'a),\n+    t: &'a dyn Test,\n+    u: &'a (dyn Test+'a),\n }\n \n-fn a<'a>(t: &'a Test, mut ss: SomeStruct<'a>) {\n+fn a<'a>(t: &'a dyn Test, mut ss: SomeStruct<'a>) {\n     ss.t = t;\n }\n \n-fn b<'a>(t: &'a Test, mut ss: SomeStruct<'a>) {\n+fn b<'a>(t: &'a dyn Test, mut ss: SomeStruct<'a>) {\n     ss.u = t;\n }\n \n-fn c<'a>(t: &'a (Test+'a), mut ss: SomeStruct<'a>) {\n+fn c<'a>(t: &'a (dyn Test+'a), mut ss: SomeStruct<'a>) {\n     ss.t = t;\n }\n \n-fn d<'a>(t: &'a (Test+'a), mut ss: SomeStruct<'a>) {\n+fn d<'a>(t: &'a (dyn Test+'a), mut ss: SomeStruct<'a>) {\n     ss.u = t;\n }\n \n-fn e<'a>(_: &'a (Display+'static)) {}\n+fn e<'a>(_: &'a (dyn Display+'static)) {}\n \n fn main() {\n     // Inside a function body, we can just infer both\n     // lifetimes, to allow &'tmp (Display+'static).\n-    e(&0 as &Display);\n+    e(&0 as &dyn Display);\n }"}, {"sha": "7f24ab2cbb5ff7559129449b25d70aef142584de", "filename": "src/test/run-pass/object-method-numbering.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fobject-method-numbering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fobject-method-numbering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fobject-method-numbering.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -21,7 +21,7 @@ impl SomeTrait for i32 {\n \n fn main() {\n     let x = 22;\n-    let x1: &SomeTrait<SomeType=i32> = &x;\n+    let x1: &dyn SomeTrait<SomeType=i32> = &x;\n     let y = get_int(x1);\n     assert_eq!(x, y);\n }"}, {"sha": "47196f108c02c6831f10205fa64593770aea5ff2", "filename": "src/test/run-pass/objects-coerce-freeze-borrored.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fobjects-coerce-freeze-borrored.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fobjects-coerce-freeze-borrored.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fobjects-coerce-freeze-borrored.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -17,22 +17,22 @@ impl Foo for usize {\n     }\n }\n \n-fn do_it_mut(obj: &mut Foo) {\n+fn do_it_mut(obj: &mut dyn Foo) {\n     let x = obj.bar();\n     let y = obj.foo();\n     assert_eq!(x, y);\n \n     do_it_imm(obj, y);\n }\n \n-fn do_it_imm(obj: &Foo, v: usize) {\n+fn do_it_imm(obj: &dyn Foo, v: usize) {\n     let y = obj.foo();\n     assert_eq!(v, y);\n }\n \n pub fn main() {\n     let mut x: usize = 22;\n-    let obj = &mut x as &mut Foo;\n+    let obj = &mut x as &mut dyn Foo;\n     do_it_mut(obj);\n     do_it_imm(obj, 23);\n     do_it_mut(obj);"}, {"sha": "58327237494edba475e68bc9a1d2a728c03e5324", "filename": "src/test/run-pass/objects-owned-object-borrowed-method-headerless.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fobjects-owned-object-borrowed-method-headerless.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fobjects-owned-object-borrowed-method-headerless.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fobjects-owned-object-borrowed-method-headerless.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -20,10 +20,10 @@ impl FooTrait for BarStruct {\n }\n \n pub fn main() {\n-    let foos: Vec<Box<FooTrait>> = vec![\n-        box BarStruct{ x: 0 } as Box<FooTrait>,\n-        box BarStruct{ x: 1 } as Box<FooTrait>,\n-        box BarStruct{ x: 2 } as Box<FooTrait>\n+    let foos: Vec<Box<dyn FooTrait>> = vec![\n+        box BarStruct{ x: 0 } as Box<dyn FooTrait>,\n+        box BarStruct{ x: 1 } as Box<dyn FooTrait>,\n+        box BarStruct{ x: 2 } as Box<dyn FooTrait>\n     ];\n \n     for i in 0..foos.len() {"}, {"sha": "69984fbb62f1467bbcc8309bcbb34890db1e3995", "filename": "src/test/run-pass/objects-owned-object-owned-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fobjects-owned-object-owned-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fobjects-owned-object-owned-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fobjects-owned-object-owned-method.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -19,6 +19,6 @@ impl FooTrait for BarStruct {\n }\n \n pub fn main() {\n-    let foo = box BarStruct{ x: 22 } as Box<FooTrait>;\n+    let foo = box BarStruct{ x: 22 } as Box<dyn FooTrait>;\n     assert_eq!(22, foo.foo());\n }"}, {"sha": "1afab9a1ffbe7890625230c7ecc32397bbbae58d", "filename": "src/test/run-pass/overloaded/overloaded-calls-object-one-arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Foverloaded%2Foverloaded-calls-object-one-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Foverloaded%2Foverloaded-calls-object-one-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded%2Foverloaded-calls-object-one-arg.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -3,7 +3,7 @@\n // This is a bit tricky due to rust-call ABI.\n \n \n-fn foo(f: &mut FnMut(isize) -> isize) -> isize {\n+fn foo(f: &mut dyn FnMut(isize) -> isize) -> isize {\n     f(22)\n }\n "}, {"sha": "38087bc8710fcf4cc63316cdeaac583894ce1734", "filename": "src/test/run-pass/overloaded/overloaded-calls-object-two-args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Foverloaded%2Foverloaded-calls-object-two-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Foverloaded%2Foverloaded-calls-object-two-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded%2Foverloaded-calls-object-two-args.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -3,7 +3,7 @@\n // This is a bit tricky due to rust-call ABI.\n \n \n-fn foo(f: &mut FnMut(isize, isize) -> isize) -> isize {\n+fn foo(f: &mut dyn FnMut(isize, isize) -> isize) -> isize {\n     f(1, 2)\n }\n "}, {"sha": "9a7bfaa9bf4f019ea8fa7c920ec3af8e64d2745a", "filename": "src/test/run-pass/overloaded/overloaded-calls-object-zero-args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Foverloaded%2Foverloaded-calls-object-zero-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Foverloaded%2Foverloaded-calls-object-zero-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded%2Foverloaded-calls-object-zero-args.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -3,7 +3,7 @@\n // This is a bit tricky due to rust-call ABI.\n \n \n-fn foo(f: &mut FnMut() -> isize) -> isize {\n+fn foo(f: &mut dyn FnMut() -> isize) -> isize {\n     f()\n }\n "}, {"sha": "9867cc56406ef109dd2c4a2fed8c7c9b1c831783", "filename": "src/test/run-pass/panics/panic-safe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fpanics%2Fpanic-safe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fpanics%2Fpanic-safe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpanics%2Fpanic-safe.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -33,7 +33,7 @@ fn main() {\n     assert::<Box<[u8]>>();\n \n     trait Trait: UnwindSafe {}\n-    assert::<Box<Trait>>();\n+    assert::<Box<dyn Trait>>();\n \n     fn bar<T>() {\n         assert::<Mutex<T>>();"}, {"sha": "c32e3f17880db13d02562e2fdff72150d0d096de", "filename": "src/test/run-pass/privacy/privacy-ns.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fprivacy%2Fprivacy-ns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fprivacy%2Fprivacy-ns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fprivacy%2Fprivacy-ns.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -28,19 +28,19 @@ fn test_unused1() {\n fn test_single1() {\n     use foo1::Bar;\n \n-    let _x: Box<Bar>;\n+    let _x: Box<dyn Bar>;\n }\n \n fn test_list1() {\n     use foo1::{Bar,Baz};\n \n-    let _x: Box<Bar>;\n+    let _x: Box<dyn Bar>;\n }\n \n fn test_glob1() {\n     use foo1::*;\n \n-    let _x: Box<Bar>;\n+    let _x: Box<dyn Bar>;\n }\n \n // private type, public value\n@@ -93,21 +93,21 @@ fn test_single3() {\n     use foo3::Bar;\n \n     Bar();\n-    let _x: Box<Bar>;\n+    let _x: Box<dyn Bar>;\n }\n \n fn test_list3() {\n     use foo3::{Bar,Baz};\n \n     Bar();\n-    let _x: Box<Bar>;\n+    let _x: Box<dyn Bar>;\n }\n \n fn test_glob3() {\n     use foo3::*;\n \n     Bar();\n-    let _x: Box<Bar>;\n+    let _x: Box<dyn Bar>;\n }\n \n fn main() {"}, {"sha": "511a35b25a3e8fc766ad2e3e8ec362ef788f6ec5", "filename": "src/test/run-pass/raw-fat-ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fraw-fat-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fraw-fat-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fraw-fat-ptr.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -78,7 +78,7 @@ fn main() {\n     let mut u32_ = (4u32, 5u32);\n \n     // check ordering for ptrs\n-    let buf: &mut [*const Foo] = &mut [\n+    let buf: &mut [*const dyn Foo] = &mut [\n         &u8_, &u8_.0,\n         &u32_, &u32_.0,\n     ];\n@@ -90,7 +90,7 @@ fn main() {\n     assert_inorder(buf);\n \n     // check ordering for mut ptrs\n-    let buf: &mut [*mut Foo] = &mut [\n+    let buf: &mut [*mut dyn Foo] = &mut [\n         &mut u8_, &mut u8_.0,\n         &mut u32_, &mut u32_.0,\n     ];"}, {"sha": "3815498f86fbb8ee8f227f3cf513f51cefaf3dad", "filename": "src/test/run-pass/regions/regions-bound-lists-feature-gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fregions%2Fregions-bound-lists-feature-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fregions%2Fregions-bound-lists-feature-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions%2Fregions-bound-lists-feature-gate.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -9,7 +9,7 @@ trait Foo {\n     fn dummy(&self) { }\n }\n \n-fn foo<'a>(x: Box<Foo + 'a>) {\n+fn foo<'a>(x: Box<dyn Foo + 'a>) {\n }\n \n fn bar<'a, T: 'a>() {"}, {"sha": "4b47ed8c6aeb7120ed4c56888112208bafa0d365", "filename": "src/test/run-pass/regions/regions-close-over-type-parameter-successfully.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fregions%2Fregions-close-over-type-parameter-successfully.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fregions%2Fregions-close-over-type-parameter-successfully.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions%2Fregions-close-over-type-parameter-successfully.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -12,8 +12,8 @@ impl<'a> SomeTrait for &'a isize {\n     }\n }\n \n-fn make_object<'a,A:SomeTrait+'a>(v: A) -> Box<SomeTrait+'a> {\n-    box v as Box<SomeTrait+'a>\n+fn make_object<'a,A:SomeTrait+'a>(v: A) -> Box<dyn SomeTrait+'a> {\n+    box v as Box<dyn SomeTrait+'a>\n }\n \n fn main() {"}, {"sha": "43640079777a343cf5b81f86b64d3e0c96e6cec1", "filename": "src/test/run-pass/regions/regions-copy-closure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fregions%2Fregions-copy-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fregions%2Fregions-copy-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions%2Fregions-copy-closure.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -2,10 +2,10 @@\n #![allow(non_camel_case_types)]\n \n struct closure_box<'a> {\n-    cl: Box<FnMut() + 'a>,\n+    cl: Box<dyn FnMut() + 'a>,\n }\n \n-fn box_it<'a>(x: Box<FnMut() + 'a>) -> closure_box<'a> {\n+fn box_it<'a>(x: Box<dyn FnMut() + 'a>) -> closure_box<'a> {\n     closure_box {cl: x}\n }\n "}, {"sha": "0b5510489fb45a9b4b7beedab337e80cc4abc170", "filename": "src/test/run-pass/regions/regions-debruijn-of-object.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fregions%2Fregions-debruijn-of-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fregions%2Fregions-debruijn-of-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions%2Fregions-debruijn-of-object.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -13,9 +13,9 @@ trait AstConv<'tcx> {\n     fn tcx<'a>(&'a self) -> &'a ctxt<'tcx>;\n }\n \n-fn foo(conv: &AstConv) { }\n+fn foo(conv: &dyn AstConv) { }\n \n-fn bar<'tcx>(conv: &AstConv<'tcx>) {\n+fn bar<'tcx>(conv: &dyn AstConv<'tcx>) {\n     foo(conv)\n }\n "}, {"sha": "cc2bde78d8594b3a6d488a9b75acd9d603455398", "filename": "src/test/run-pass/regions/regions-early-bound-trait-param.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fregions%2Fregions-early-bound-trait-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fregions%2Fregions-early-bound-trait-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions%2Fregions-early-bound-trait-param.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -15,14 +15,14 @@ fn poly_invoke<'c, T: Trait<'c>>(x: &'c T) -> (isize, isize) {\n     (l,s)\n }\n \n-fn object_invoke1<'d>(x: &'d Trait<'d>) -> (isize, isize) {\n+fn object_invoke1<'d>(x: &'d dyn Trait<'d>) -> (isize, isize) {\n     let l = x.long();\n     let s = x.short();\n     (l,s)\n }\n \n struct Struct1<'e> {\n-    f: &'e (Trait<'e>+'e)\n+    f: &'e (dyn Trait<'e>+'e)\n }\n \n fn field_invoke1<'f, 'g>(x: &'g Struct1<'f>) -> (isize,isize) {\n@@ -32,10 +32,10 @@ fn field_invoke1<'f, 'g>(x: &'g Struct1<'f>) -> (isize,isize) {\n }\n \n struct Struct2<'h, 'i:'h> {\n-    f: &'h (Trait<'i>+'h)\n+    f: &'h (dyn Trait<'i>+'h)\n }\n \n-fn object_invoke2<'j, 'k>(x: &'k Trait<'j>) -> isize {\n+fn object_invoke2<'j, 'k>(x: &'k dyn Trait<'j>) -> isize {\n     x.short()\n }\n \n@@ -70,10 +70,10 @@ impl<'s> Trait<'s> for (isize,isize) {\n     }\n }\n \n-impl<'t> MakerTrait for Box<Trait<'t>+'static> {\n-    fn mk() -> Box<Trait<'t>+'static> {\n+impl<'t> MakerTrait for Box<dyn Trait<'t>+'static> {\n+    fn mk() -> Box<dyn Trait<'t>+'static> {\n         let tup: Box<(isize, isize)> = box (4,5);\n-        tup as Box<Trait>\n+        tup as Box<dyn Trait>\n     }\n }\n \n@@ -105,7 +105,7 @@ impl<'t> RefMakerTrait<'t> for List<'t> {\n \n pub fn main() {\n     let t = (2,3);\n-    let o = &t as &Trait;\n+    let o = &t as &dyn Trait;\n     let s1 = Struct1 { f: o };\n     let s2 = Struct2 { f: o };\n     assert_eq!(poly_invoke(&t), (2,3));\n@@ -114,7 +114,7 @@ pub fn main() {\n     assert_eq!(object_invoke2(&t), 3);\n     assert_eq!(field_invoke2(&s2), 3);\n \n-    let m : Box<Trait> = make_val();\n+    let m : Box<dyn Trait> = make_val();\n     // assert_eq!(object_invoke1(&*m), (4,5));\n     //            ~~~~~~~~~~~~~~~~~~~\n     // this call yields a compilation error; see compile-fail/dropck-object-cycle.rs"}, {"sha": "83949ddba3d1ee96126c4a983ba1eeb4d216ca8e", "filename": "src/test/run-pass/regions/regions-fn-subtyping-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fregions%2Fregions-fn-subtyping-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fregions%2Fregions-fn-subtyping-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions%2Fregions-fn-subtyping-2.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -7,13 +7,13 @@\n // that `x` is in.\n // pretty-expanded FIXME #23616\n \n-fn has_same_region(f: Box<for<'a> FnMut(&'a isize, Box<FnMut(&'a isize)>)>) {\n+fn has_same_region(f: Box<dyn for<'a> FnMut(&'a isize, Box<dyn FnMut(&'a isize)>)>) {\n     // `f` should be the type that `wants_same_region` wants, but\n     // right now the compiler complains that it isn't.\n     wants_same_region(f);\n }\n \n-fn wants_same_region(_f: Box<for<'b> FnMut(&'b isize, Box<FnMut(&'b isize)>)>) {\n+fn wants_same_region(_f: Box<dyn for<'b> FnMut(&'b isize, Box<dyn FnMut(&'b isize)>)>) {\n }\n \n pub fn main() {"}, {"sha": "9570359c69e315a89a230da74692588e044f4d18", "filename": "src/test/run-pass/regions/regions-fn-subtyping.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fregions%2Fregions-fn-subtyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fregions%2Fregions-fn-subtyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions%2Fregions-fn-subtyping.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -8,21 +8,21 @@\n #![allow(unused_variables)]\n \n // Should pass region checking.\n-fn ok(f: Box<FnMut(&usize)>) {\n+fn ok(f: Box<dyn FnMut(&usize)>) {\n     // Here, g is a function that can accept a usize pointer with\n     // lifetime r, and f is a function that can accept a usize pointer\n     // with any lifetime.  The assignment g = f should be OK (i.e.,\n     // f's type should be a subtype of g's type), because f can be\n     // used in any context that expects g's type.  But this currently\n     // fails.\n-    let mut g: Box<for<'r> FnMut(&'r usize)> = Box::new(|x| { });\n+    let mut g: Box<dyn for<'r> FnMut(&'r usize)> = Box::new(|x| { });\n     g = f;\n }\n \n // This version is the same as above, except that here, g's type is\n // inferred.\n-fn ok_inferred(f: Box<FnMut(&usize)>) {\n-    let mut g: Box<for<'r> FnMut(&'r usize)> = Box::new(|_| {});\n+fn ok_inferred(f: Box<dyn FnMut(&usize)>) {\n+    let mut g: Box<dyn for<'r> FnMut(&'r usize)> = Box::new(|_| {});\n     g = f;\n }\n "}, {"sha": "6aa5d8217a466b496fc82f813e1751f558b9005d", "filename": "src/test/run-pass/regions/regions-infer-region-in-fn-but-not-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fregions%2Fregions-infer-region-in-fn-but-not-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fregions%2Fregions-infer-region-in-fn-but-not-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions%2Fregions-infer-region-in-fn-but-not-type.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -8,7 +8,7 @@\n // contains region pointers\n // pretty-expanded FIXME #23616\n \n-struct foo(Box<FnMut(&isize)+'static>);\n+struct foo(Box<dyn FnMut(&isize)+'static>);\n \n fn take_foo<T:'static>(x: T) {}\n "}, {"sha": "c8106f32c65c257f68071d359c1484d6276d83b4", "filename": "src/test/run-pass/regions/regions-lifetime-nonfree-late-bound.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fregions%2Fregions-lifetime-nonfree-late-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fregions%2Fregions-lifetime-nonfree-late-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions%2Fregions-lifetime-nonfree-late-bound.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -19,15 +19,15 @@\n \n pub fn main() {\n     fn explicit() {\n-        fn test<F>(_x: Option<Box<F>>) where F: FnMut(Box<for<'a> FnMut(&'a isize)>) {}\n-        test(Some(box |_f: Box<for<'a> FnMut(&'a isize)>| {}));\n+        fn test<F>(_x: Option<Box<F>>) where F: FnMut(Box<dyn for<'a> FnMut(&'a isize)>) {}\n+        test(Some(box |_f: Box<dyn for<'a> FnMut(&'a isize)>| {}));\n     }\n \n     // The code below is shorthand for the code above (and more likely\n     // to represent what one encounters in practice).\n     fn implicit() {\n-        fn test<F>(_x: Option<Box<F>>) where F: FnMut(Box<        FnMut(&   isize)>) {}\n-        test(Some(box |_f: Box<        FnMut(&   isize)>| {}));\n+        fn test<F>(_x: Option<Box<F>>) where F: FnMut(Box<dyn        FnMut(&   isize)>) {}\n+        test(Some(box |_f: Box<dyn        FnMut(&   isize)>| {}));\n     }\n \n     explicit();"}, {"sha": "aec05161c1afbca2d57e7fdf7c7836db6136b889", "filename": "src/test/run-pass/regions/regions-relate-bound-regions-on-closures-to-inference-variables.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fregions%2Fregions-relate-bound-regions-on-closures-to-inference-variables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fregions%2Fregions-relate-bound-regions-on-closures-to-inference-variables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions%2Fregions-relate-bound-regions-on-closures-to-inference-variables.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -44,7 +44,7 @@ impl<'a,'tcx> Foo<'a,'tcx> {\n \n     fn elaborate_bounds(\n         &mut self,\n-        mut mk_cand: Box<for<'b> FnMut(&mut Foo<'b, 'tcx>) -> isize>)\n+        mut mk_cand: Box<dyn for<'b> FnMut(&mut Foo<'b, 'tcx>) -> isize>)\n         -> isize\n     {\n         mk_cand(self)"}, {"sha": "09cd56220323d84a00756534297b9ff1a7d51c78", "filename": "src/test/run-pass/regions/regions-static-closure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fregions%2Fregions-static-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fregions%2Fregions-static-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions%2Fregions-static-closure.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -2,10 +2,10 @@\n #![allow(non_camel_case_types)]\n \n struct closure_box<'a> {\n-    cl: Box<FnMut() + 'a>,\n+    cl: Box<dyn FnMut() + 'a>,\n }\n \n-fn box_it<'a>(x: Box<FnMut() + 'a>) -> closure_box<'a> {\n+fn box_it<'a>(x: Box<dyn FnMut() + 'a>) -> closure_box<'a> {\n     closure_box {cl: x}\n }\n "}, {"sha": "679bf4dd8117c5506b01d43e9873e1e80c0f09b2", "filename": "src/test/run-pass/regions/regions-trait-object-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fregions%2Fregions-trait-object-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fregions%2Fregions-trait-object-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions%2Fregions-trait-object-1.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -21,10 +21,10 @@ impl<'d> M for P<'d> {\n     fn n(&self) -> u8 { *self.g }\n }\n \n-fn extension<'e>(x: &'e E<'e>) -> Box<M+'e> {\n+fn extension<'e>(x: &'e E<'e>) -> Box<dyn M+'e> {\n     loop {\n         let p = P { g: x.m() };\n-        return Box::new(p) as Box<M+'e>;\n+        return Box::new(p) as Box<dyn M+'e>;\n     }\n }\n "}, {"sha": "944157d0b20094cda0d4a2379a465ef3708822a3", "filename": "src/test/run-pass/string-box-error.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fstring-box-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fstring-box-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstring-box-error.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -4,8 +4,8 @@\n use std::error::Error;\n \n fn main() {\n-    let _err1: Box<Error + Send + Sync> = From::from(\"test\".to_string());\n-    let _err2: Box<Error> = From::from(\"test\".to_string());\n-    let _err3: Box<Error + Send + Sync + 'static> = From::from(\"test\");\n-    let _err4: Box<Error> = From::from(\"test\");\n+    let _err1: Box<dyn Error + Send + Sync> = From::from(\"test\".to_string());\n+    let _err2: Box<dyn Error> = From::from(\"test\".to_string());\n+    let _err3: Box<dyn Error + Send + Sync + 'static> = From::from(\"test\");\n+    let _err4: Box<dyn Error> = From::from(\"test\");\n }"}, {"sha": "bf1ba8a643fea8f89950724a933b5d34598552da", "filename": "src/test/run-pass/structs-enums/class-cast-to-trait-cross-crate-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fstructs-enums%2Fclass-cast-to-trait-cross-crate-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fstructs-enums%2Fclass-cast-to-trait-cross-crate-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstructs-enums%2Fclass-cast-to-trait-cross-crate-2.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -8,13 +8,13 @@ extern crate cci_class_cast;\n use std::string::ToString;\n use cci_class_cast::kitty::cat;\n \n-fn print_out(thing: Box<ToString>, expected: String) {\n+fn print_out(thing: Box<dyn ToString>, expected: String) {\n   let actual = (*thing).to_string();\n   println!(\"{}\", actual);\n   assert_eq!(actual.to_string(), expected);\n }\n \n pub fn main() {\n-  let nyan: Box<ToString> = box cat(0, 2, \"nyan\".to_string()) as Box<ToString>;\n+  let nyan: Box<dyn ToString> = box cat(0, 2, \"nyan\".to_string()) as Box<dyn ToString>;\n   print_out(nyan, \"nyan\".to_string());\n }"}, {"sha": "55975cbdb5342ee491a78f37fe9d95017b9985f7", "filename": "src/test/run-pass/structs-enums/class-cast-to-trait-multiple-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fstructs-enums%2Fclass-cast-to-trait-multiple-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fstructs-enums%2Fclass-cast-to-trait-multiple-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstructs-enums%2Fclass-cast-to-trait-multiple-types.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -79,7 +79,7 @@ fn cat(in_x: usize, in_y: isize, in_name: String) -> cat {\n }\n \n \n-fn annoy_neighbors(critter: &mut noisy) {\n+fn annoy_neighbors(critter: &mut dyn noisy) {\n     for _i in 0_usize..10 { critter.speak(); }\n }\n "}, {"sha": "1019bb30015a94302ee12798a005296d1748b1e1", "filename": "src/test/run-pass/structs-enums/class-cast-to-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fstructs-enums%2Fclass-cast-to-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fstructs-enums%2Fclass-cast-to-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstructs-enums%2Fclass-cast-to-trait.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -55,6 +55,6 @@ fn cat(in_x : usize, in_y : isize, in_name: String) -> cat {\n \n pub fn main() {\n     let mut nyan = cat(0, 2, \"nyan\".to_string());\n-    let mut nyan: &mut noisy = &mut nyan;\n+    let mut nyan: &mut dyn noisy = &mut nyan;\n     nyan.speak();\n }"}, {"sha": "947690b51f422ab70ec1bfb46dd4eb83adbb1321", "filename": "src/test/run-pass/structs-enums/class-separate-impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fstructs-enums%2Fclass-separate-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fstructs-enums%2Fclass-separate-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstructs-enums%2Fclass-separate-impl.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -53,13 +53,13 @@ impl fmt::Display for cat {\n     }\n }\n \n-fn print_out(thing: Box<ToString>, expected: String) {\n+fn print_out(thing: Box<dyn ToString>, expected: String) {\n   let actual = (*thing).to_string();\n   println!(\"{}\", actual);\n   assert_eq!(actual.to_string(), expected);\n }\n \n pub fn main() {\n-  let nyan: Box<ToString> = box cat(0, 2, \"nyan\".to_string()) as Box<ToString>;\n+  let nyan: Box<dyn ToString> = box cat(0, 2, \"nyan\".to_string()) as Box<dyn ToString>;\n   print_out(nyan, \"nyan\".to_string());\n }"}, {"sha": "87629665bc2bd6dc015fb558f3b0eb8599c9dd31", "filename": "src/test/run-pass/structs-enums/enum-null-pointer-opt.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fstructs-enums%2Fenum-null-pointer-opt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fstructs-enums%2Fenum-null-pointer-opt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstructs-enums%2Fenum-null-pointer-opt.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -22,9 +22,9 @@ fn main() {\n     assert_eq!(size_of::<&mut [isize]>(), size_of::<Option<&mut [isize]>>());\n \n     // Traits - Box<Trait> / &Trait / &mut Trait\n-    assert_eq!(size_of::<Box<Trait>>(), size_of::<Option<Box<Trait>>>());\n-    assert_eq!(size_of::<&Trait>(), size_of::<Option<&Trait>>());\n-    assert_eq!(size_of::<&mut Trait>(), size_of::<Option<&mut Trait>>());\n+    assert_eq!(size_of::<Box<dyn Trait>>(), size_of::<Option<Box<dyn Trait>>>());\n+    assert_eq!(size_of::<&dyn Trait>(), size_of::<Option<&dyn Trait>>());\n+    assert_eq!(size_of::<&mut dyn Trait>(), size_of::<Option<&mut dyn Trait>>());\n \n     // Pointers - Box<T>\n     assert_eq!(size_of::<Box<isize>>(), size_of::<Option<Box<isize>>>());"}, {"sha": "e1a865fa5039967666dbd3ccd7f08429dbbf2776", "filename": "src/test/run-pass/structs-enums/object-lifetime-default-from-ref-struct.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fstructs-enums%2Fobject-lifetime-default-from-ref-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fstructs-enums%2Fobject-lifetime-default-from-ref-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstructs-enums%2Fobject-lifetime-default-from-ref-struct.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -22,37 +22,37 @@ struct Ref2<'a,'b,T:'a+'b+?Sized> {\n }\n \n struct SomeStruct<'a> {\n-    t: Ref<'a,Test>,\n-    u: Ref<'a,Test+'a>,\n+    t: Ref<'a, dyn Test>,\n+    u: Ref<'a, dyn Test+'a>,\n }\n \n-fn a<'a>(t: Ref<'a,Test>, mut ss: SomeStruct<'a>) {\n+fn a<'a>(t: Ref<'a, dyn Test>, mut ss: SomeStruct<'a>) {\n     ss.t = t;\n }\n \n-fn b<'a>(t: Ref<'a,Test>, mut ss: SomeStruct<'a>) {\n+fn b<'a>(t: Ref<'a, dyn Test>, mut ss: SomeStruct<'a>) {\n     ss.u = t;\n }\n \n-fn c<'a>(t: Ref<'a,Test+'a>, mut ss: SomeStruct<'a>) {\n+fn c<'a>(t: Ref<'a, dyn Test+'a>, mut ss: SomeStruct<'a>) {\n     ss.t = t;\n }\n \n-fn d<'a>(t: Ref<'a,Test+'a>, mut ss: SomeStruct<'a>) {\n+fn d<'a>(t: Ref<'a, dyn Test+'a>, mut ss: SomeStruct<'a>) {\n     ss.u = t;\n }\n \n-fn e<'a>(_: Ref<'a, Display+'static>) {}\n-fn g<'a, 'b>(_: Ref2<'a, 'b, Display+'static>) {}\n+fn e<'a>(_: Ref<'a, dyn Display+'static>) {}\n+fn g<'a, 'b>(_: Ref2<'a, 'b, dyn Display+'static>) {}\n \n \n fn main() {\n     // Inside a function body, we can just infer all\n     // lifetimes, to allow Ref<'tmp, Display+'static>\n     // and Ref2<'tmp, 'tmp, Display+'static>.\n-    let x = &0 as &(Display+'static);\n-    let r: Ref<Display> = Ref { r: x };\n-    let r2: Ref2<Display> = Ref2 { a: x, b: x };\n+    let x = &0 as &(dyn Display+'static);\n+    let r: Ref<dyn Display> = Ref { r: x };\n+    let r2: Ref2<dyn Display> = Ref2 { a: x, b: x };\n     e(r);\n     g(r2);\n }"}, {"sha": "1fc52ead48e0e54d421210e9283e444d859c3a37", "filename": "src/test/run-pass/structs-enums/object-lifetime-default-from-rptr-struct.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fstructs-enums%2Fobject-lifetime-default-from-rptr-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fstructs-enums%2Fobject-lifetime-default-from-rptr-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstructs-enums%2Fobject-lifetime-default-from-rptr-struct.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -11,25 +11,25 @@ trait Test {\n }\n \n struct SomeStruct<'a> {\n-    t: &'a MyBox<Test>,\n-    u: &'a MyBox<Test+'a>,\n+    t: &'a MyBox<dyn Test>,\n+    u: &'a MyBox<dyn Test+'a>,\n }\n \n struct MyBox<T:?Sized> {\n     b: Box<T>\n }\n \n-fn a<'a>(t: &'a MyBox<Test>, mut ss: SomeStruct<'a>) {\n+fn a<'a>(t: &'a MyBox<dyn Test>, mut ss: SomeStruct<'a>) {\n     ss.t = t;\n }\n \n-fn b<'a>(t: &'a MyBox<Test>, mut ss: SomeStruct<'a>) {\n+fn b<'a>(t: &'a MyBox<dyn Test>, mut ss: SomeStruct<'a>) {\n     ss.u = t;\n }\n \n // see also compile-fail/object-lifetime-default-from-rptr-box-error.rs\n \n-fn d<'a>(t: &'a MyBox<Test+'a>, mut ss: SomeStruct<'a>) {\n+fn d<'a>(t: &'a MyBox<dyn Test+'a>, mut ss: SomeStruct<'a>) {\n     ss.u = t;\n }\n "}, {"sha": "c495b97b25bfee31a4b659434aea376d1c0f61c5", "filename": "src/test/run-pass/traits/auto-traits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Ftraits%2Fauto-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Ftraits%2Fauto-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftraits%2Fauto-traits.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -27,5 +27,5 @@ fn main() {\n     take_auto_unsafe(AutoBool(true));\n \n     /// Auto traits are allowed in trait object bounds.\n-    let _: &(Send + Auto) = &0;\n+    let _: &(dyn Send + Auto) = &0;\n }"}, {"sha": "82760788897a5878a322eeb555c7c2b316f166ad", "filename": "src/test/run-pass/traits/impl-inherent-prefer-over-trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Ftraits%2Fimpl-inherent-prefer-over-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Ftraits%2Fimpl-inherent-prefer-over-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftraits%2Fimpl-inherent-prefer-over-trait.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -11,7 +11,7 @@ impl Foo {\n     fn bar(&self) {}\n }\n \n-impl Trait {\n+impl dyn Trait {\n     fn baz(_: &Foo) {}\n }\n \n@@ -26,5 +26,5 @@ fn main() {\n \n     // Should work even if Trait::baz doesn't exist.\n     // N.B: `<Trait>::bar` would be ambiguous.\n-    <Trait>::baz(&Foo);\n+    <dyn Trait>::baz(&Foo);\n }"}, {"sha": "ed258dbb24c3f7fcdeb798069ee0e6c9f3475eac", "filename": "src/test/run-pass/traits/infer-from-object-trait-issue-26952.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Ftraits%2Finfer-from-object-trait-issue-26952.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Ftraits%2Finfer-from-object-trait-issue-26952.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftraits%2Finfer-from-object-trait-issue-26952.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -14,7 +14,7 @@ trait Trait<A> { fn foo(&self); }\n \n struct Type<A> { a: PhantomData<A> }\n \n-fn as_trait<A>(t: &Type<A>) -> &Trait<A> { loop {  } }\n+fn as_trait<A>(t: &Type<A>) -> &dyn Trait<A> { loop {  } }\n \n fn want<A,T:Trait<A>+?Sized>(t: &T) { }\n "}, {"sha": "23b91f924b553055f6562153a2904bdd66224b63", "filename": "src/test/run-pass/traits/kindck-owned-trait-contains-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Ftraits%2Fkindck-owned-trait-contains-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Ftraits%2Fkindck-owned-trait-contains-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftraits%2Fkindck-owned-trait-contains-1.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -12,8 +12,8 @@ impl<A:Clone + 'static> repeat<A> for Box<A> {\n     }\n }\n \n-fn repeater<A:Clone + 'static>(v: Box<A>) -> Box<repeat<A>+'static> {\n-    box v as Box<repeat<A>+'static> // No\n+fn repeater<A:Clone + 'static>(v: Box<A>) -> Box<dyn repeat<A>+'static> {\n+    box v as Box<dyn repeat<A>+'static> // No\n }\n \n pub fn main() {"}, {"sha": "b92a2ab7b4bc2414ab9aaab2517088df6652b372", "filename": "src/test/run-pass/traits/object-one-type-two-traits.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Ftraits%2Fobject-one-type-two-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Ftraits%2Fobject-one-type-two-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftraits%2Fobject-one-type-two-traits.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -10,24 +10,24 @@ use std::any::Any;\n \n trait Wrap {\n     fn get(&self) -> isize;\n-    fn wrap(self: Box<Self>) -> Box<Any+'static>;\n+    fn wrap(self: Box<Self>) -> Box<dyn Any+'static>;\n }\n \n impl Wrap for isize {\n     fn get(&self) -> isize {\n         *self\n     }\n-    fn wrap(self: Box<isize>) -> Box<Any+'static> {\n-        self as Box<Any+'static>\n+    fn wrap(self: Box<isize>) -> Box<dyn Any+'static> {\n+        self as Box<dyn Any+'static>\n     }\n }\n \n-fn is<T:Any>(x: &Any) -> bool {\n+fn is<T:Any>(x: &dyn Any) -> bool {\n     x.is::<T>()\n }\n \n fn main() {\n-    let x = box 22isize as Box<Wrap>;\n+    let x = box 22isize as Box<dyn Wrap>;\n     println!(\"x={}\", x.get());\n     let y = x.wrap();\n }"}, {"sha": "832d4f6c89f09c321199554abbef7c5ceb3a738c", "filename": "src/test/run-pass/traits/parameterized-trait-with-bounds.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Ftraits%2Fparameterized-trait-with-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Ftraits%2Fparameterized-trait-with-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftraits%2Fparameterized-trait-with-bounds.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -12,10 +12,10 @@ mod foo {\n     pub trait D<'a, T> { fn get(self) -> &'a T; }\n }\n \n-fn foo1<T>(_: &(A<T> + Send)) {}\n-fn foo2<T>(_: Box<A<T> + Send + Sync>) {}\n-fn foo3<T>(_: Box<B<isize, usize> + 'static>) {}\n-fn foo4<'a, T>(_: Box<C<'a, T> + 'static + Send>) {}\n-fn foo5<'a, T>(_: Box<foo::D<'a, T> + 'static + Send>) {}\n+fn foo1<T>(_: &(dyn A<T> + Send)) {}\n+fn foo2<T>(_: Box<dyn A<T> + Send + Sync>) {}\n+fn foo3<T>(_: Box<dyn B<isize, usize> + 'static>) {}\n+fn foo4<'a, T>(_: Box<dyn C<'a, T> + 'static + Send>) {}\n+fn foo5<'a, T>(_: Box<dyn foo::D<'a, T> + 'static + Send>) {}\n \n pub fn main() {}"}, {"sha": "8c8a7eb7d9da1c679ccd107b9e3f27f739896592", "filename": "src/test/run-pass/traits/trait-bounds-basic.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Ftraits%2Ftrait-bounds-basic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Ftraits%2Ftrait-bounds-basic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftraits%2Ftrait-bounds-basic.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -7,18 +7,18 @@\n trait Foo {\n }\n \n-fn b(_x: Box<Foo+Send>) {\n+fn b(_x: Box<dyn Foo+Send>) {\n }\n \n-fn c(x: Box<Foo+Sync+Send>) {\n+fn c(x: Box<dyn Foo+Sync+Send>) {\n     e(x);\n }\n \n-fn d(x: Box<Foo+Send>) {\n+fn d(x: Box<dyn Foo+Send>) {\n     e(x);\n }\n \n-fn e(x: Box<Foo>) {\n+fn e(x: Box<dyn Foo>) {\n     e(x);\n }\n "}, {"sha": "a45d834297eedc0e9325af7611f48b1eacff01ca", "filename": "src/test/run-pass/traits/trait-bounds-in-arc.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Ftraits%2Ftrait-bounds-in-arc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Ftraits%2Ftrait-bounds-in-arc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftraits%2Ftrait-bounds-in-arc.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -12,7 +12,7 @@ use std::sync::mpsc::channel;\n use std::thread;\n \n trait Pet {\n-    fn name(&self, blk: Box<FnMut(&str)>);\n+    fn name(&self, blk: Box<dyn FnMut(&str)>);\n     fn num_legs(&self) -> usize;\n     fn of_good_pedigree(&self) -> bool;\n }\n@@ -34,19 +34,19 @@ struct Goldfyshe {\n }\n \n impl Pet for Catte {\n-    fn name(&self, mut blk: Box<FnMut(&str)>) { blk(&self.name) }\n+    fn name(&self, mut blk: Box<dyn FnMut(&str)>) { blk(&self.name) }\n     fn num_legs(&self) -> usize { 4 }\n     fn of_good_pedigree(&self) -> bool { self.num_whiskers >= 4 }\n }\n impl Pet for Dogge {\n-    fn name(&self, mut blk: Box<FnMut(&str)>) { blk(&self.name) }\n+    fn name(&self, mut blk: Box<dyn FnMut(&str)>) { blk(&self.name) }\n     fn num_legs(&self) -> usize { 4 }\n     fn of_good_pedigree(&self) -> bool {\n         self.bark_decibels < 70 || self.tricks_known > 20\n     }\n }\n impl Pet for Goldfyshe {\n-    fn name(&self, mut blk: Box<FnMut(&str)>) { blk(&self.name) }\n+    fn name(&self, mut blk: Box<dyn FnMut(&str)>) { blk(&self.name) }\n     fn num_legs(&self) -> usize { 0 }\n     fn of_good_pedigree(&self) -> bool { self.swim_speed >= 500 }\n }\n@@ -67,10 +67,10 @@ pub fn main() {\n         swim_speed: 998,\n         name: \"alec_guinness\".to_string(),\n     };\n-    let arc = Arc::new(vec![box catte  as Box<Pet+Sync+Send>,\n-                            box dogge1 as Box<Pet+Sync+Send>,\n-                            box fishe  as Box<Pet+Sync+Send>,\n-                            box dogge2 as Box<Pet+Sync+Send>]);\n+    let arc = Arc::new(vec![box catte  as Box<dyn Pet+Sync+Send>,\n+                            box dogge1 as Box<dyn Pet+Sync+Send>,\n+                            box fishe  as Box<dyn Pet+Sync+Send>,\n+                            box dogge2 as Box<dyn Pet+Sync+Send>]);\n     let (tx1, rx1) = channel();\n     let arc1 = arc.clone();\n     let t1 = thread::spawn(move|| { check_legs(arc1); tx1.send(()); });\n@@ -88,21 +88,21 @@ pub fn main() {\n     t3.join();\n }\n \n-fn check_legs(arc: Arc<Vec<Box<Pet+Sync+Send>>>) {\n+fn check_legs(arc: Arc<Vec<Box<dyn Pet+Sync+Send>>>) {\n     let mut legs = 0;\n     for pet in arc.iter() {\n         legs += pet.num_legs();\n     }\n     assert!(legs == 12);\n }\n-fn check_names(arc: Arc<Vec<Box<Pet+Sync+Send>>>) {\n+fn check_names(arc: Arc<Vec<Box<dyn Pet+Sync+Send>>>) {\n     for pet in arc.iter() {\n         pet.name(Box::new(|name| {\n             assert!(name.as_bytes()[0] == 'a' as u8 && name.as_bytes()[1] == 'l' as u8);\n         }))\n     }\n }\n-fn check_pedigree(arc: Arc<Vec<Box<Pet+Sync+Send>>>) {\n+fn check_pedigree(arc: Arc<Vec<Box<dyn Pet+Sync+Send>>>) {\n     for pet in arc.iter() {\n         assert!(pet.of_good_pedigree());\n     }"}, {"sha": "4dc4fecc91fcfc36da7c098a8e737296bfc54959", "filename": "src/test/run-pass/traits/trait-bounds-on-structs-and-enums.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Ftraits%2Ftrait-bounds-on-structs-and-enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Ftraits%2Ftrait-bounds-on-structs-and-enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftraits%2Ftrait-bounds-on-structs-and-enums.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -7,11 +7,11 @@ trait U {}\n trait T<X: U> { fn get(self) -> X; }\n \n trait S2<Y: U> {\n-    fn m(x: Box<T<Y>+'static>) {}\n+    fn m(x: Box<dyn T<Y>+'static>) {}\n }\n \n struct St<X: U> {\n-    f: Box<T<X>+'static>,\n+    f: Box<dyn T<X>+'static>,\n }\n \n impl<X: U> St<X> {"}, {"sha": "bf4dda49519107cef0b14585479d001d6b9d3f64", "filename": "src/test/run-pass/traits/trait-coercion-generic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Ftraits%2Ftrait-coercion-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Ftraits%2Ftrait-coercion-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftraits%2Ftrait-coercion-generic.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -18,8 +18,8 @@ impl Trait<&'static str> for Struct {\n \n pub fn main() {\n     let a = Struct { x: 1, y: 2 };\n-    let b: Box<Trait<&'static str>> = Box::new(a);\n+    let b: Box<dyn Trait<&'static str>> = Box::new(a);\n     b.f(\"Mary\");\n-    let c: &Trait<&'static str> = &a;\n+    let c: &dyn Trait<&'static str> = &a;\n     c.f(\"Joe\");\n }"}, {"sha": "cba33af1f1aca1f9b8221b5bdd8c912c630c8ce6", "filename": "src/test/run-pass/traits/trait-coercion.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Ftraits%2Ftrait-coercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Ftraits%2Ftrait-coercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftraits%2Ftrait-coercion.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -22,13 +22,13 @@ impl Trait for Struct {\n     }\n }\n \n-fn foo(mut a: Box<Write>) {}\n+fn foo(mut a: Box<dyn Write>) {}\n \n pub fn main() {\n     let a = Struct { x: 1, y: 2 };\n-    let b: Box<Trait> = Box::new(a);\n+    let b: Box<dyn Trait> = Box::new(a);\n     b.f();\n-    let c: &Trait = &a;\n+    let c: &dyn Trait = &a;\n     c.f();\n \n     let out = io::stdout();"}, {"sha": "804ffec12c2bfd61d909f9ca4968abf83f518620", "filename": "src/test/run-pass/traits/trait-impl-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Ftraits%2Ftrait-impl-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Ftraits%2Ftrait-impl-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftraits%2Ftrait-impl-2.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -11,7 +11,7 @@ pub mod Foo {\n }\n \n mod Bar {\n-    impl<'a> ::Foo::Trait+'a {\n+    impl<'a> dyn (::Foo::Trait) + 'a {\n         fn bar(&self) { self.foo() }\n     }\n }"}, {"sha": "14796ce19c88ed08b62d726b53e1f674e13405d3", "filename": "src/test/run-pass/traits/trait-impl.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Ftraits%2Ftrait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Ftraits%2Ftrait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftraits%2Ftrait-impl.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -12,7 +12,7 @@ trait T {\n     fn t(&self) {}\n }\n \n-impl<'a> T+'a {\n+impl<'a> dyn T+'a {\n     fn foo(&self) {\n         unsafe { COUNT *= 2; }\n     }\n@@ -27,7 +27,7 @@ struct Foo;\n impl<'a> Bar<'a> for Foo {}\n \n fn main() {\n-    let x: &T = &42;\n+    let x: &dyn T = &42;\n \n     x.foo();\n     T::foo(x);\n@@ -36,6 +36,6 @@ fn main() {\n     unsafe { assert_eq!(COUNT, 12); }\n \n     // Cross-crait case\n-    let x: &Bar = &Foo;\n+    let x: &dyn Bar = &Foo;\n     x.bar();\n }"}, {"sha": "25159c1adb6f6febdb0316660140be18e04e9e8a", "filename": "src/test/run-pass/traits/trait-inheritance-cast-without-call-to-supertrait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Ftraits%2Ftrait-inheritance-cast-without-call-to-supertrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Ftraits%2Ftrait-inheritance-cast-without-call-to-supertrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftraits%2Ftrait-inheritance-cast-without-call-to-supertrait.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -26,8 +26,8 @@ impl Bar for A {\n \n pub fn main() {\n     let a = &A { x: 3 };\n-    let afoo = a as &Foo;\n-    let abar = a as &Bar;\n+    let afoo = a as &dyn Foo;\n+    let abar = a as &dyn Bar;\n     assert_eq!(afoo.f(), 10);\n     assert_eq!(abar.g(), 20);\n }"}, {"sha": "9070b9d1f5606991efceaece5ef1d96ea9870aee", "filename": "src/test/run-pass/traits/trait-inheritance-cast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Ftraits%2Ftrait-inheritance-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Ftraits%2Ftrait-inheritance-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftraits%2Ftrait-inheritance-cast.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -25,8 +25,8 @@ impl Bar for A {\n \n pub fn main() {\n     let a = &A { x: 3 };\n-    let afoo = a as &Foo;\n-    let abar = a as &Bar;\n+    let afoo = a as &dyn Foo;\n+    let abar = a as &dyn Bar;\n     assert_eq!(afoo.f(), 10);\n     assert_eq!(abar.g(), 20);\n     assert_eq!(abar.f(), 10);"}, {"sha": "0b8b0e2f5ef4d48e24c52495b6269f629f62b908", "filename": "src/test/run-pass/traits/trait-object-exclusion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Ftraits%2Ftrait-object-exclusion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Ftraits%2Ftrait-object-exclusion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftraits%2Ftrait-object-exclusion.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -4,7 +4,7 @@ trait Future: 'static {\n     // Future::forget in vtables, otherwise there's an infinite type\n     // recursion through <Map<...> as Future>::forget.\n     fn forget(self) where Self: Sized {\n-        Box::new(Map(self)) as Box<Future>;\n+        Box::new(Map(self)) as Box<dyn Future>;\n     }\n }\n "}, {"sha": "c18754302b75b279af7165e3398a87cfdb5ac3ea", "filename": "src/test/run-pass/traits/trait-object-generics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Ftraits%2Ftrait-object-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Ftraits%2Ftrait-object-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftraits%2Ftrait-object-generics.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -16,7 +16,7 @@ pub struct Impl<A1, A2, A3> {\n      * task <unnamed> failed at 'index out of bounds: the len is 1 but the index is 1',\n      * src/librustc/middle/subst.rs:58\n      */\n-    t: Box<Trait2<A2>+'static>\n+    t: Box<dyn Trait2<A2>+'static>\n }\n \n impl<A1, A2, A3> Impl<A1, A2, A3> {\n@@ -38,6 +38,6 @@ impl<V> Trait<u8,V> for () {\n }\n \n pub fn main() {\n-    let a = box () as Box<Trait<u8, u8>>;\n+    let a = box () as Box<dyn Trait<u8, u8>>;\n     assert_eq!(a.method(Type::Constant((1, 2))), 0);\n }"}, {"sha": "33757cb7c0ab1da7efa9d1e5458efb1ce606a8c9", "filename": "src/test/run-pass/traits/trait-object-lifetime-first.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Ftraits%2Ftrait-object-lifetime-first.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Ftraits%2Ftrait-object-lifetime-first.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftraits%2Ftrait-object-lifetime-first.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -4,8 +4,8 @@ use std::fmt::Display;\n static BYTE: u8 = 33;\n \n fn main() {\n-    let x: &('static + Display) = &BYTE;\n-    let y: Box<'static + Display> = Box::new(BYTE);\n+    let x: &(dyn 'static + Display) = &BYTE;\n+    let y: Box<dyn 'static + Display> = Box::new(BYTE);\n     let xstr = format!(\"{}\", x);\n     let ystr = format!(\"{}\", y);\n     assert_eq!(xstr, \"33\");"}, {"sha": "05aab5e3b085c0965907a9791d38557056c9c09f", "filename": "src/test/run-pass/traits/trait-object-with-lifetime-bound.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Ftraits%2Ftrait-object-with-lifetime-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Ftraits%2Ftrait-object-with-lifetime-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftraits%2Ftrait-object-with-lifetime-bound.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -20,10 +20,10 @@ impl<'d> M for P<'d> {\n     fn n(&self) -> u8 { *self.g }\n }\n \n-fn extension<'e>(x: &'e E<'e>) -> Box<M+'e> {\n+fn extension<'e>(x: &'e E<'e>) -> Box<dyn M+'e> {\n     loop {\n         let p = P { g: x.m() };\n-        return Box::new(p) as Box<M+'e>;\n+        return Box::new(p) as Box<dyn M+'e>;\n     }\n }\n "}, {"sha": "0456ca931156ec5b833c02a69a06c0d63c92504f", "filename": "src/test/run-pass/traits/trait-region-pointer-simple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Ftraits%2Ftrait-region-pointer-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Ftraits%2Ftrait-region-pointer-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftraits%2Ftrait-region-pointer-simple.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -16,6 +16,6 @@ impl Foo for A {\n \n pub fn main() {\n     let a = A { x: 3 };\n-    let b = (&a) as &Foo;\n+    let b = (&a) as &dyn Foo;\n     assert_eq!(b.f(), 3);\n }"}, {"sha": "e490967b690475107a6fed637edd0e574061eab2", "filename": "src/test/run-pass/traits/traits-impl-object-overlap-issue-23853.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Ftraits%2Ftraits-impl-object-overlap-issue-23853.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Ftraits%2Ftraits-impl-object-overlap-issue-23853.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftraits%2Ftraits-impl-object-overlap-issue-23853.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -14,5 +14,5 @@ impl<T:?Sized> Foo for T { }\n fn want_foo<B:?Sized+Foo>() { }\n \n fn main() {\n-    want_foo::<Bar>();\n+    want_foo::<dyn Bar>();\n }"}, {"sha": "bedd87cc4cc7977eb031e75d75dff1d806c2ee35", "filename": "src/test/run-pass/traits/traits-issue-26339.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Ftraits%2Ftraits-issue-26339.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Ftraits%2Ftraits-issue-26339.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftraits%2Ftraits-issue-26339.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -25,7 +25,7 @@ impl PartialEq<Bar> for Aimpl {\n impl A for Aimpl { }\n \n fn main() {\n-    let a = &Aimpl as &A;\n+    let a = &Aimpl as &dyn A;\n \n     assert!(*a == Foo);\n }"}, {"sha": "391d19c4385586c7277447c8d32eea66e6cfd036", "filename": "src/test/run-pass/traits/traits-repeated-supertrait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Ftraits%2Ftraits-repeated-supertrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Ftraits%2Ftraits-repeated-supertrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftraits%2Ftraits-repeated-supertrait.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -22,7 +22,7 @@ impl CompareTo<u64> for i64 {\n \n impl CompareToInts for i64 { }\n \n-fn with_obj(c: &CompareToInts) -> bool {\n+fn with_obj(c: &dyn CompareToInts) -> bool {\n     c.same_as(22_i64) && c.same_as(22_u64)\n }\n "}, {"sha": "700488c22d6780606207df0103fcb415ce676d30", "filename": "src/test/run-pass/traits/ufcs-trait-object.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Ftraits%2Fufcs-trait-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Ftraits%2Fufcs-trait-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftraits%2Fufcs-trait-object.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -12,6 +12,6 @@ impl Foo for i32 {\n }\n \n fn main() {\n-    let a: &Foo = &22;\n+    let a: &dyn Foo = &22;\n     assert_eq!(Foo::test(a), 22);\n }"}, {"sha": "f06b0708290bc909063e751e10985a3c35ce10e1", "filename": "src/test/run-pass/trivial_casts.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Ftrivial_casts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Ftrivial_casts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrivial_casts.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -36,21 +36,21 @@ pub fn main() {\n \n     // unsize trait\n     let x: &Bar = &Bar;\n-    let _ = x as &Foo;\n-    let _ = x as *const Foo;\n+    let _ = x as &dyn Foo;\n+    let _ = x as *const dyn Foo;\n \n     let x: &mut Bar = &mut Bar;\n-    let _ = x as &mut Foo;\n-    let _ = x as *mut Foo;\n+    let _ = x as &mut dyn Foo;\n+    let _ = x as *mut dyn Foo;\n \n     let x: Box<Bar> = Box::new(Bar);\n-    let _ = x as Box<Foo>;\n+    let _ = x as Box<dyn Foo>;\n \n     // functions\n     fn baz(_x: i32) {}\n-    let _ = &baz as &Fn(i32);\n+    let _ = &baz as &dyn Fn(i32);\n     let x = |_x: i32| {};\n-    let _ = &x as &Fn(i32);\n+    let _ = &x as &dyn Fn(i32);\n }\n \n // subtyping"}, {"sha": "469bc8ed7e15309d551ce058f53665337a2ad819", "filename": "src/test/run-pass/type-id-higher-rank-2.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Ftype-id-higher-rank-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Ftype-id-higher-rank-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftype-id-higher-rank-2.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -7,7 +7,7 @@ struct Foo<'a>(&'a str);\n fn good(s: &String) -> Foo { Foo(s) }\n \n fn bad1(s: String) -> Option<&'static str> {\n-    let a: Box<Any> = Box::new(good as fn(&String) -> Foo);\n+    let a: Box<dyn Any> = Box::new(good as fn(&String) -> Foo);\n     a.downcast_ref::<fn(&String) -> Foo<'static>>().map(|f| f(&s).0)\n }\n \n@@ -20,8 +20,8 @@ impl<'a> AsStr<'a, 'a> for String {\n }\n \n fn bad2(s: String) -> Option<&'static str> {\n-    let a: Box<Any> = Box::new(Box::new(s) as Box<for<'a> AsStr<'a, 'a>>);\n-    a.downcast_ref::<Box<for<'a> AsStr<'a, 'static>>>().map(|x| x.get())\n+    let a: Box<dyn Any> = Box::new(Box::new(s) as Box<dyn for<'a> AsStr<'a, 'a>>);\n+    a.downcast_ref::<Box<dyn for<'a> AsStr<'a, 'static>>>().map(|x| x.get())\n }\n \n fn main() {"}, {"sha": "b98dff0d72b8d5752de9ee1f7722148dfd85affc", "filename": "src/test/run-pass/type-id-higher-rank.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Ftype-id-higher-rank.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Ftype-id-higher-rank.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftype-id-higher-rank.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -26,9 +26,9 @@ fn main() {\n         assert!(e != f);\n \n         // Make sure lifetime parameters of items are not ignored.\n-        let g = TypeId::of::<for<'a> fn(&'a Trait<'a>) -> Struct<'a>>();\n-        let h = TypeId::of::<for<'a> fn(&'a Trait<'a>) -> Struct<'static>>();\n-        let i = TypeId::of::<for<'a, 'b> fn(&'a Trait<'b>) -> Struct<'b>>();\n+        let g = TypeId::of::<for<'a> fn(&'a dyn Trait<'a>) -> Struct<'a>>();\n+        let h = TypeId::of::<for<'a> fn(&'a dyn Trait<'a>) -> Struct<'static>>();\n+        let i = TypeId::of::<for<'a, 'b> fn(&'a dyn Trait<'b>) -> Struct<'b>>();\n         assert!(g != h);\n         assert!(g != i);\n         assert!(h != i);\n@@ -40,10 +40,10 @@ fn main() {\n     }\n     // Boxed unboxed closures\n     {\n-        let a = TypeId::of::<Box<Fn(&'static isize, &'static isize)>>();\n-        let b = TypeId::of::<Box<for<'a> Fn(&'static isize, &'a isize)>>();\n-        let c = TypeId::of::<Box<for<'a, 'b> Fn(&'a isize, &'b isize)>>();\n-        let d = TypeId::of::<Box<for<'a, 'b> Fn(&'b isize, &'a isize)>>();\n+        let a = TypeId::of::<Box<dyn Fn(&'static isize, &'static isize)>>();\n+        let b = TypeId::of::<Box<dyn for<'a> Fn(&'static isize, &'a isize)>>();\n+        let c = TypeId::of::<Box<dyn for<'a, 'b> Fn(&'a isize, &'b isize)>>();\n+        let d = TypeId::of::<Box<dyn for<'a, 'b> Fn(&'b isize, &'a isize)>>();\n         assert!(a != b);\n         assert!(a != c);\n         assert!(a != d);\n@@ -52,8 +52,8 @@ fn main() {\n         assert_eq!(c, d);\n \n         // Make sure De Bruijn indices are handled correctly\n-        let e = TypeId::of::<Box<for<'a> Fn(Box<Fn(&'a isize) -> &'a isize>)>>();\n-        let f = TypeId::of::<Box<Fn(Box<for<'a> Fn(&'a isize) -> &'a isize>)>>();\n+        let e = TypeId::of::<Box<dyn for<'a> Fn(Box<dyn Fn(&'a isize) -> &'a isize>)>>();\n+        let f = TypeId::of::<Box<dyn Fn(Box<dyn for<'a> Fn(&'a isize) -> &'a isize>)>>();\n         assert!(e != f);\n     }\n     // Raw unboxed closures"}, {"sha": "6298156452e49b080054bddc8c458d6bd96c1605", "filename": "src/test/run-pass/type-infer-generalize-ty-var.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Ftype-infer-generalize-ty-var.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Ftype-infer-generalize-ty-var.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftype-infer-generalize-ty-var.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -23,8 +23,8 @@ trait Get<T: ?Sized> {\n     fn get(&self) -> &T;\n }\n \n-impl Get<MyShow + 'static> for Wrap<T> {\n-    fn get(&self) -> &(MyShow + 'static) {\n+impl Get<dyn MyShow + 'static> for Wrap<T> {\n+    fn get(&self) -> &(dyn MyShow + 'static) {\n         static x: usize = 42;\n         &x\n     }\n@@ -38,9 +38,9 @@ impl Get<usize> for Wrap<U> {\n }\n \n trait MyShow { fn dummy(&self) { } }\n-impl<'a> MyShow for &'a (MyShow + 'a) { }\n+impl<'a> MyShow for &'a (dyn MyShow + 'a) { }\n impl MyShow for usize { }\n-fn constrain<'a>(rc: RefCell<&'a (MyShow + 'a)>) { }\n+fn constrain<'a>(rc: RefCell<&'a (dyn MyShow + 'a)>) { }\n \n fn main() {\n     let mut collection: Wrap<_> = WrapNone;"}, {"sha": "a1001673506f0660c7991ce3b3f6ab4dc32c22f5", "filename": "src/test/run-pass/unboxed-closures/unboxed-closures-blanket-fn-mut.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Funboxed-closures%2Funboxed-closures-blanket-fn-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Funboxed-closures%2Funboxed-closures-blanket-fn-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures%2Funboxed-closures-blanket-fn-mut.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -8,7 +8,7 @@ fn a<F:FnMut() -> i32>(mut f: F) -> i32 {\n     f()\n }\n \n-fn b(f: &mut FnMut() -> i32) -> i32 {\n+fn b(f: &mut dyn FnMut() -> i32) -> i32 {\n     a(f)\n }\n "}, {"sha": "ca1d31ca54470a0193667e12451c24f92237d677", "filename": "src/test/run-pass/unboxed-closures/unboxed-closures-blanket-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Funboxed-closures%2Funboxed-closures-blanket-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Funboxed-closures%2Funboxed-closures-blanket-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures%2Funboxed-closures-blanket-fn.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -8,7 +8,7 @@ fn a<F:Fn() -> i32>(f: F) -> i32 {\n     f()\n }\n \n-fn b(f: &Fn() -> i32) -> i32 {\n+fn b(f: &dyn Fn() -> i32) -> i32 {\n     a(f)\n }\n "}, {"sha": "b2596e49aa78eecc8ea2e91f8a93e3e6d8a12aab", "filename": "src/test/run-pass/unboxed-closures/unboxed-closures-boxed.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Funboxed-closures%2Funboxed-closures-boxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Funboxed-closures%2Funboxed-closures-boxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures%2Funboxed-closures-boxed.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -3,9 +3,9 @@\n \n use std::ops::FnMut;\n \n- fn make_adder(x: i32) -> Box<FnMut(i32)->i32+'static> {\n+ fn make_adder(x: i32) -> Box<dyn FnMut(i32)->i32+'static> {\n     (box move |y: i32| -> i32 { x + y }) as\n-        Box<FnMut(i32)->i32+'static>\n+        Box<dyn FnMut(i32)->i32+'static>\n }\n \n pub fn main() {"}, {"sha": "d47ceea0f4f4d9ca2122d17baa7aee32e75c8a42", "filename": "src/test/run-pass/unboxed-closures/unboxed-closures-call-sugar-object-autoderef.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Funboxed-closures%2Funboxed-closures-call-sugar-object-autoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Funboxed-closures%2Funboxed-closures-call-sugar-object-autoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures%2Funboxed-closures-call-sugar-object-autoderef.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -3,7 +3,7 @@\n \n use std::ops::FnMut;\n \n-fn make_adder(x: isize) -> Box<FnMut(isize)->isize + 'static> {\n+fn make_adder(x: isize) -> Box<dyn FnMut(isize)->isize + 'static> {\n     Box::new(move |y| { x + y })\n }\n "}, {"sha": "f77733d106d4f4d6f0e1603140dcb45659f75431", "filename": "src/test/run-pass/unboxed-closures/unboxed-closures-call-sugar-object.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Funboxed-closures%2Funboxed-closures-call-sugar-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Funboxed-closures%2Funboxed-closures-call-sugar-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures%2Funboxed-closures-call-sugar-object.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -1,7 +1,7 @@\n // run-pass\n use std::ops::FnMut;\n \n-fn make_adder(x: isize) -> Box<FnMut(isize)->isize + 'static> {\n+fn make_adder(x: isize) -> Box<dyn FnMut(isize)->isize + 'static> {\n     Box::new(move |y| { x + y })\n }\n "}, {"sha": "3ee1aeb109b18b5ebd953a91a7e51c1e4b684d08", "filename": "src/test/run-pass/unboxed-closures/unboxed-closures-extern-fn-hr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Funboxed-closures%2Funboxed-closures-extern-fn-hr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Funboxed-closures%2Funboxed-closures-extern-fn-hr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures%2Funboxed-closures-extern-fn-hr.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -7,7 +7,7 @@ fn call_it<F:Fn(&isize)->isize>(f: &F, x: isize) -> isize {\n     (*f)(&x)\n }\n \n-fn call_it_boxed(f: &Fn(&isize) -> isize, x: isize) -> isize {\n+fn call_it_boxed(f: &dyn Fn(&isize) -> isize, x: isize) -> isize {\n     f(&x)\n }\n "}, {"sha": "d2eaee304104ae7d230f131e918c709062f722aa", "filename": "src/test/run-pass/unboxed-closures/unboxed-closures-infer-arg-types-from-expected-object-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Funboxed-closures%2Funboxed-closures-infer-arg-types-from-expected-object-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Funboxed-closures%2Funboxed-closures-infer-arg-types-from-expected-object-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures%2Funboxed-closures-infer-arg-types-from-expected-object-type.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -12,7 +12,7 @@ impl ToPrimitive for isize {}\n impl ToPrimitive for i32 {}\n impl ToPrimitive for usize {}\n \n-fn doit<T>(val: T, f: &Fn(T)) { f(val) }\n+fn doit<T>(val: T, f: &dyn Fn(T)) { f(val) }\n \n pub fn main() {\n     doit(0, &|x /*: isize*/ | { x.to_int(); });"}, {"sha": "86834f49407fc74ad8f1d5ce1b76a8ee5a485a22", "filename": "src/test/run-pass/unboxed-closures/unboxed-closures-infer-recursive-fn.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Funboxed-closures%2Funboxed-closures-infer-recursive-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Funboxed-closures%2Funboxed-closures-infer-recursive-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures%2Funboxed-closures-infer-recursive-fn.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -20,23 +20,23 @@ impl<F,A,R> YCombinator<F,A,R> {\n     }\n }\n \n-impl<A,R,F : Fn(&Fn(A) -> R, A) -> R> Fn<(A,)> for YCombinator<F,A,R> {\n+impl<A,R,F : Fn(&dyn Fn(A) -> R, A) -> R> Fn<(A,)> for YCombinator<F,A,R> {\n     extern \"rust-call\" fn call(&self, (arg,): (A,)) -> R {\n         (self.func)(self, arg)\n     }\n }\n \n-impl<A,R,F : Fn(&Fn(A) -> R, A) -> R> FnMut<(A,)> for YCombinator<F,A,R> {\n+impl<A,R,F : Fn(&dyn Fn(A) -> R, A) -> R> FnMut<(A,)> for YCombinator<F,A,R> {\n     extern \"rust-call\" fn call_mut(&mut self, args: (A,)) -> R { self.call(args) }\n }\n \n-impl<A,R,F : Fn(&Fn(A) -> R, A) -> R> FnOnce<(A,)> for YCombinator<F,A,R> {\n+impl<A,R,F : Fn(&dyn Fn(A) -> R, A) -> R> FnOnce<(A,)> for YCombinator<F,A,R> {\n     type Output = R;\n     extern \"rust-call\" fn call_once(self, args: (A,)) -> R { self.call(args) }\n }\n \n fn main() {\n-    let factorial = |recur: &Fn(u32) -> u32, arg: u32| -> u32 {\n+    let factorial = |recur: &dyn Fn(u32) -> u32, arg: u32| -> u32 {\n         if arg == 0 {1} else {arg * recur(arg-1)}\n     };\n     let factorial: YCombinator<_,u32,u32> = YCombinator::new(factorial);"}, {"sha": "df60b42ab126a550d9215df3b27ef924f62e605b", "filename": "src/test/run-pass/unboxed-closures/unboxed-closures-manual-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Funboxed-closures%2Funboxed-closures-manual-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Funboxed-closures%2Funboxed-closures-manual-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures%2Funboxed-closures-manual-impl.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -19,7 +19,7 @@ fn call_it<F:FnMut(i32)->i32>(mut f: F, x: i32) -> i32 {\n     f(x) + 3\n }\n \n-fn call_box(f: &mut FnMut(i32) -> i32, x: i32) -> i32 {\n+fn call_box(f: &mut dyn FnMut(i32) -> i32, x: i32) -> i32 {\n     f(x) + 3\n }\n "}, {"sha": "2df360d4a30a4bcbcad40609e9cd4f161e81dd6f", "filename": "src/test/run-pass/unboxed-closures/unboxed-closures-monomorphization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Funboxed-closures%2Funboxed-closures-monomorphization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Funboxed-closures%2Funboxed-closures-monomorphization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures%2Funboxed-closures-monomorphization.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -3,7 +3,7 @@\n // monomorphize correctly (issue #16791)\n \n fn main(){\n-    fn bar<'a, T:Clone+'a> (t: T) -> Box<FnMut()->T + 'a> {\n+    fn bar<'a, T:Clone+'a> (t: T) -> Box<dyn FnMut()->T + 'a> {\n         Box::new(move || t.clone())\n     }\n "}, {"sha": "89a273b7a43ff26e57c09af4559a1320081b13cf", "filename": "src/test/run-pass/unboxed-closures/unboxed-closures-prelude.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Funboxed-closures%2Funboxed-closures-prelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Funboxed-closures%2Funboxed-closures-prelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures%2Funboxed-closures-prelude.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -4,10 +4,10 @@\n // pretty-expanded FIXME #23616\n \n fn main() {\n-    let task: Box<Fn(isize) -> isize> = Box::new(|x| x);\n+    let task: Box<dyn Fn(isize) -> isize> = Box::new(|x| x);\n     task(0);\n \n-    let mut task: Box<FnMut(isize) -> isize> = Box::new(|x| x);\n+    let mut task: Box<dyn FnMut(isize) -> isize> = Box::new(|x| x);\n     task(0);\n \n     call(|x| x, 22);"}, {"sha": "1ca25517c3c5fc9e2fff8b8a5a6d4008e8ad646d", "filename": "src/test/run-pass/unboxed-closures/unboxed-closures-sugar-object.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Funboxed-closures%2Funboxed-closures-sugar-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Funboxed-closures%2Funboxed-closures-sugar-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures%2Funboxed-closures-sugar-object.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -19,7 +19,7 @@ impl<X> Getter<X,X> for Identity {\n }\n \n fn main() {\n-    let x: &Getter<(i32,), (i32,)> = &Identity;\n+    let x: &dyn Getter<(i32,), (i32,)> = &Identity;\n     let (y,) = x.get((22,));\n     assert_eq!(y, 22);\n }"}, {"sha": "84e8cdb32b84e588a03ed474451900fa53f1acb3", "filename": "src/test/run-pass/unique/unique-object-move.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Funique%2Funique-object-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Funique%2Funique-object-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique%2Funique-object-move.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -15,6 +15,6 @@ pub struct UvEventLoop {\n impl EventLoop for UvEventLoop { }\n \n pub fn main() {\n-    let loop_: Box<EventLoop> = box UvEventLoop { uvio: 0 } as Box<EventLoop>;\n+    let loop_: Box<dyn EventLoop> = box UvEventLoop { uvio: 0 } as Box<dyn EventLoop>;\n     let _loop2_ = loop_;\n }"}, {"sha": "c9a8b2e7c664b6e80784f4a753d731beb6010cbe", "filename": "src/test/run-pass/unsized2.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Funsized2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Funsized2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funsized2.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -60,26 +60,26 @@ fn f7<X: ?Sized+T3>(x: &X) {\n \n trait T4<X> {\n     fn dummy(&self) { }\n-    fn m1(&self, x: &T4<X>, y: X);\n-    fn m2(&self, x: &T5<X>, y: X);\n+    fn m1(&self, x: &dyn T4<X>, y: X);\n+    fn m2(&self, x: &dyn T5<X>, y: X);\n }\n trait T5<X: ?Sized> {\n     fn dummy(&self) { }\n     // not an error (for now)\n-    fn m1(&self, x: &T4<X>);\n-    fn m2(&self, x: &T5<X>);\n+    fn m1(&self, x: &dyn T4<X>);\n+    fn m2(&self, x: &dyn T5<X>);\n }\n \n trait T6<X: T> {\n     fn dummy(&self) { }\n-    fn m1(&self, x: &T4<X>);\n-    fn m2(&self, x: &T5<X>);\n+    fn m1(&self, x: &dyn T4<X>);\n+    fn m2(&self, x: &dyn T5<X>);\n }\n trait T7<X: ?Sized+T> {\n     fn dummy(&self) { }\n     // not an error (for now)\n-    fn m1(&self, x: &T4<X>);\n-    fn m2(&self, x: &T5<X>);\n+    fn m1(&self, x: &dyn T4<X>);\n+    fn m2(&self, x: &dyn T5<X>);\n }\n \n // The last field in a struct may be unsized"}, {"sha": "6814e2baab59730eb6f79ec65c4fdb9be363af1d", "filename": "src/test/run-pass/wf-bound-region-in-object-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fwf-bound-region-in-object-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Frun-pass%2Fwf-bound-region-in-object-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fwf-bound-region-in-object-type.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -12,7 +12,7 @@ pub struct Context<'tcx> {\n pub type Cmd<'a> = &'a isize;\n \n pub type DecodeInlinedItem<'a> =\n-    Box<for<'tcx> FnMut(Cmd, &Context<'tcx>) -> Result<&'tcx isize, ()> + 'a>;\n+    Box<dyn for<'tcx> FnMut(Cmd, &Context<'tcx>) -> Result<&'tcx isize, ()> + 'a>;\n \n fn foo(d: DecodeInlinedItem) {\n }"}, {"sha": "8a1744ed5f8aeafb44e1dedb8f740131574c6ae5", "filename": "src/test/ui/anonymous-higher-ranked-lifetime.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -31,11 +31,11 @@ fn f4<F>(_: F) where F: for<'r> Fn(&(), &'r ()) {}\n fn f5<F>(_: F) where F: for<'r> Fn(&'r (), &'r ()) {}\n \n // Nested\n-fn g1<F>(_: F) where F: Fn(&(), Box<Fn(&())>) {}\n+fn g1<F>(_: F) where F: Fn(&(), Box<dyn Fn(&())>) {}\n fn g2<F>(_: F) where F: Fn(&(), fn(&())) {}\n-fn g3<F>(_: F) where F: for<'s> Fn(&'s (), Box<Fn(&())>) {}\n+fn g3<F>(_: F) where F: for<'s> Fn(&'s (), Box<dyn Fn(&())>) {}\n fn g4<F>(_: F) where F: Fn(&(), for<'r> fn(&'r ())) {}\n \n // Mixed\n-fn h1<F>(_: F) where F: Fn(&(), Box<Fn(&())>, &(), fn(&(), &())) {}\n-fn h2<F>(_: F) where F: for<'t0> Fn(&(), Box<Fn(&())>, &'t0 (), fn(&(), &())) {}\n+fn h1<F>(_: F) where F: Fn(&(), Box<dyn Fn(&())>, &(), fn(&(), &())) {}\n+fn h2<F>(_: F) where F: for<'t0> Fn(&(), Box<dyn Fn(&())>, &'t0 (), fn(&(), &())) {}"}, {"sha": "0ca3ca8437463179baaea3a872fb1cf457a4068b", "filename": "src/test/ui/anonymous-higher-ranked-lifetime.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.stderr?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -149,8 +149,8 @@ LL |     g1(|_: (), _: ()| {});\n note: required by `g1`\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:34:1\n    |\n-LL | fn g1<F>(_: F) where F: Fn(&(), Box<Fn(&())>) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | fn g1<F>(_: F) where F: Fn(&(), Box<dyn Fn(&())>) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:12:5\n@@ -163,8 +163,8 @@ LL |     g1(|_: (), _: ()| {});\n note: required by `g1`\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:34:1\n    |\n-LL | fn g1<F>(_: F) where F: Fn(&(), Box<Fn(&())>) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | fn g1<F>(_: F) where F: Fn(&(), Box<dyn Fn(&())>) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:14:5\n@@ -205,8 +205,8 @@ LL |     g3(|_: (), _: ()| {});\n note: required by `g3`\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:36:1\n    |\n-LL | fn g3<F>(_: F) where F: for<'s> Fn(&'s (), Box<Fn(&())>) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | fn g3<F>(_: F) where F: for<'s> Fn(&'s (), Box<dyn Fn(&())>) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:16:5\n@@ -219,8 +219,8 @@ LL |     g3(|_: (), _: ()| {});\n note: required by `g3`\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:36:1\n    |\n-LL | fn g3<F>(_: F) where F: for<'s> Fn(&'s (), Box<Fn(&())>) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | fn g3<F>(_: F) where F: for<'s> Fn(&'s (), Box<dyn Fn(&())>) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:18:5\n@@ -261,8 +261,8 @@ LL |     h1(|_: (), _: (), _: (), _: ()| {});\n note: required by `h1`\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:40:1\n    |\n-LL | fn h1<F>(_: F) where F: Fn(&(), Box<Fn(&())>, &(), fn(&(), &())) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | fn h1<F>(_: F) where F: Fn(&(), Box<dyn Fn(&())>, &(), fn(&(), &())) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:20:5\n@@ -275,8 +275,8 @@ LL |     h1(|_: (), _: (), _: (), _: ()| {});\n note: required by `h1`\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:40:1\n    |\n-LL | fn h1<F>(_: F) where F: Fn(&(), Box<Fn(&())>, &(), fn(&(), &())) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | fn h1<F>(_: F) where F: Fn(&(), Box<dyn Fn(&())>, &(), fn(&(), &())) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:22:5\n@@ -289,8 +289,8 @@ LL |     h2(|_: (), _: (), _: (), _: ()| {});\n note: required by `h2`\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:41:1\n    |\n-LL | fn h2<F>(_: F) where F: for<'t0> Fn(&(), Box<Fn(&())>, &'t0 (), fn(&(), &())) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | fn h2<F>(_: F) where F: for<'t0> Fn(&(), Box<dyn Fn(&())>, &'t0 (), fn(&(), &())) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:22:5\n@@ -303,8 +303,8 @@ LL |     h2(|_: (), _: (), _: (), _: ()| {});\n note: required by `h2`\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:41:1\n    |\n-LL | fn h2<F>(_: F) where F: for<'t0> Fn(&(), Box<Fn(&())>, &'t0 (), fn(&(), &())) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | fn h2<F>(_: F) where F: for<'t0> Fn(&(), Box<dyn Fn(&())>, &'t0 (), fn(&(), &())) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 22 previous errors\n "}, {"sha": "cc3acd539562279c9bfcb7ed06afd6cbb920fb05", "filename": "src/test/ui/associated-const/associated-const-in-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-in-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-in-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-in-trait.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -6,7 +6,7 @@ trait Trait {\n     const N: usize;\n }\n \n-impl Trait {\n+impl dyn Trait {\n     //~^ ERROR the trait `Trait` cannot be made into an object [E0038]\n     const fn n() -> usize { Self::N }\n }"}, {"sha": "dff268a55c909dd6e3e945e454459005a48661d4", "filename": "src/test/ui/associated-const/associated-const-in-trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-in-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-in-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-in-trait.stderr?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -1,8 +1,8 @@\n error[E0038]: the trait `Trait` cannot be made into an object\n   --> $DIR/associated-const-in-trait.rs:9:6\n    |\n-LL | impl Trait {\n-   |      ^^^^^ the trait `Trait` cannot be made into an object\n+LL | impl dyn Trait {\n+   |      ^^^^^^^^^ the trait `Trait` cannot be made into an object\n    |\n    = note: the trait cannot contain associated consts like `N`\n "}, {"sha": "7a678445796e65c4750c89bbc2a93fd0474e3681", "filename": "src/test/ui/associated-type/associated-type-projection-from-multiple-supertraits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fassociated-type%2Fassociated-type-projection-from-multiple-supertraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fassociated-type%2Fassociated-type-projection-from-multiple-supertraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type%2Fassociated-type-projection-from-multiple-supertraits.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -20,7 +20,7 @@ fn dent<C:BoxCar>(c: C, color: C::Color) {\n     //~^ ERROR ambiguous associated type `Color` in bounds of `C`\n }\n \n-fn dent_object<COLOR>(c: BoxCar<Color=COLOR>) {\n+fn dent_object<COLOR>(c: dyn BoxCar<Color=COLOR>) {\n     //~^ ERROR ambiguous associated type\n     //~| ERROR the value of the associated type `Color` (from the trait `Vehicle`) must be specified\n }"}, {"sha": "6118ebef125a503652fa299b5a70449d5c78755c", "filename": "src/test/ui/associated-type/associated-type-projection-from-multiple-supertraits.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fassociated-type%2Fassociated-type-projection-from-multiple-supertraits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fassociated-type%2Fassociated-type-projection-from-multiple-supertraits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type%2Fassociated-type-projection-from-multiple-supertraits.stderr?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -11,25 +11,25 @@ LL | fn dent<C:BoxCar>(c: C, color: C::Color) {\n    |                                ^^^^^^^^ ambiguous associated type `Color`\n \n error[E0221]: ambiguous associated type `Color` in bounds of `BoxCar`\n-  --> $DIR/associated-type-projection-from-multiple-supertraits.rs:23:33\n+  --> $DIR/associated-type-projection-from-multiple-supertraits.rs:23:37\n    |\n LL |     type Color;\n    |     ----------- ambiguous `Color` from `Vehicle`\n ...\n LL |     type Color;\n    |     ----------- ambiguous `Color` from `Box`\n ...\n-LL | fn dent_object<COLOR>(c: BoxCar<Color=COLOR>) {\n-   |                                 ^^^^^^^^^^^ ambiguous associated type `Color`\n+LL | fn dent_object<COLOR>(c: dyn BoxCar<Color=COLOR>) {\n+   |                                     ^^^^^^^^^^^ ambiguous associated type `Color`\n \n error[E0191]: the value of the associated type `Color` (from the trait `Vehicle`) must be specified\n   --> $DIR/associated-type-projection-from-multiple-supertraits.rs:23:26\n    |\n LL |     type Color;\n    |     ----------- `Color` defined here\n ...\n-LL | fn dent_object<COLOR>(c: BoxCar<Color=COLOR>) {\n-   |                          ^^^^^^^^^^^^^^^^^^^ associated type `Color` must be specified\n+LL | fn dent_object<COLOR>(c: dyn BoxCar<Color=COLOR>) {\n+   |                          ^^^^^^^^^^^^^^^^^^^^^^^ associated type `Color` must be specified\n \n error[E0221]: ambiguous associated type `Color` in bounds of `C`\n   --> $DIR/associated-type-projection-from-multiple-supertraits.rs:28:29"}, {"sha": "9366148b587d2dded4f117511c73acfd90848077", "filename": "src/test/ui/associated-types/associated-types-eq-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-3.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -28,7 +28,7 @@ fn foo2<I: Foo>(x: I) {\n }\n \n \n-pub fn baz(x: &Foo<A=Bar>) {\n+pub fn baz(x: &dyn Foo<A=Bar>) {\n     let _: Bar = x.boo();\n }\n "}, {"sha": "4993b13121549323ba4bf354338a73cf56fc1cc3", "filename": "src/test/ui/associated-types/associated-types-incomplete-object.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-incomplete-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-incomplete-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-incomplete-object.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -18,14 +18,14 @@ impl Foo for isize {\n }\n \n pub fn main() {\n-    let a = &42isize as &Foo<A=usize, B=char>;\n+    let a = &42isize as &dyn Foo<A=usize, B=char>;\n \n-    let b = &42isize as &Foo<A=usize>;\n+    let b = &42isize as &dyn Foo<A=usize>;\n     //~^ ERROR the value of the associated type `B` (from the trait `Foo`) must be specified\n \n-    let c = &42isize as &Foo<B=char>;\n+    let c = &42isize as &dyn Foo<B=char>;\n     //~^ ERROR the value of the associated type `A` (from the trait `Foo`) must be specified\n \n-    let d = &42isize as &Foo;\n+    let d = &42isize as &dyn Foo;\n     //~^ ERROR the value of the associated types `A` (from the trait `Foo`), `B` (from the trait\n }"}, {"sha": "b4c08f4a4cce5c020ee145e441bb58873cd8ec48", "filename": "src/test/ui/associated-types/associated-types-incomplete-object.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-incomplete-object.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-incomplete-object.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-incomplete-object.stderr?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -4,17 +4,17 @@ error[E0191]: the value of the associated type `B` (from the trait `Foo`) must b\n LL |     type B;\n    |     ------- `B` defined here\n ...\n-LL |     let b = &42isize as &Foo<A=usize>;\n-   |                          ^^^^^^^^^^^^ associated type `B` must be specified\n+LL |     let b = &42isize as &dyn Foo<A=usize>;\n+   |                          ^^^^^^^^^^^^^^^^ associated type `B` must be specified\n \n error[E0191]: the value of the associated type `A` (from the trait `Foo`) must be specified\n   --> $DIR/associated-types-incomplete-object.rs:26:26\n    |\n LL |     type A;\n    |     ------- `A` defined here\n ...\n-LL |     let c = &42isize as &Foo<B=char>;\n-   |                          ^^^^^^^^^^^ associated type `A` must be specified\n+LL |     let c = &42isize as &dyn Foo<B=char>;\n+   |                          ^^^^^^^^^^^^^^^ associated type `A` must be specified\n \n error[E0191]: the value of the associated types `A` (from the trait `Foo`), `B` (from the trait `Foo`) must be specified\n   --> $DIR/associated-types-incomplete-object.rs:29:26\n@@ -24,8 +24,8 @@ LL |     type A;\n LL |     type B;\n    |     ------- `B` defined here\n ...\n-LL |     let d = &42isize as &Foo;\n-   |                          ^^^\n+LL |     let d = &42isize as &dyn Foo;\n+   |                          ^^^^^^^\n    |                          |\n    |                          associated type `A` must be specified\n    |                          associated type `B` must be specified"}, {"sha": "109feb8e969a5f55de76f6b8cc85670124cf6cf8", "filename": "src/test/ui/associated-types/associated-types-overridden-binding-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding-2.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -3,6 +3,6 @@\n trait I32Iterator = Iterator<Item = i32>;\n \n fn main() {\n-    let _: &I32Iterator<Item = u32> = &vec![42].into_iter();\n+    let _: &dyn I32Iterator<Item = u32> = &vec![42].into_iter();\n     //~^ ERROR type mismatch\n }"}, {"sha": "aff067c289107a60db7cb4150658ebe39e1c8258", "filename": "src/test/ui/associated-types/associated-types-overridden-binding-2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding-2.stderr?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -1,8 +1,8 @@\n error[E0271]: type mismatch resolving `<std::vec::IntoIter<u32> as std::iter::Iterator>::Item == i32`\n-  --> $DIR/associated-types-overridden-binding-2.rs:6:39\n+  --> $DIR/associated-types-overridden-binding-2.rs:6:43\n    |\n-LL |     let _: &I32Iterator<Item = u32> = &vec![42].into_iter();\n-   |                                       ^^^^^^^^^^^^^^^^^^^^^ expected u32, found i32\n+LL |     let _: &dyn I32Iterator<Item = u32> = &vec![42].into_iter();\n+   |                                           ^^^^^^^^^^^^^^^^^^^^^ expected u32, found i32\n    |\n    = note: expected type `u32`\n               found type `i32`"}, {"sha": "fa1889389fd5c5ecdb5fdc5c71939a847e8585b3", "filename": "src/test/ui/associated-types/associated-types-overridden-binding.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -7,5 +7,5 @@ trait I32Iterator = Iterator<Item = i32>;\n trait U32Iterator = I32Iterator<Item = u32>;\n \n fn main() {\n-    let _: &I32Iterator<Item = u32>;\n+    let _: &dyn I32Iterator<Item = u32>;\n }"}, {"sha": "36fa06cce4dd692bf43cb90e65d53b707eb1bba5", "filename": "src/test/ui/associated-types/bound-lifetime-constrained.object.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-constrained.object.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-constrained.object.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-constrained.object.stderr?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -1,14 +1,14 @@\n error[E0582]: binding for associated type `Output` references lifetime `'a`, which does not appear in the trait input types\n-  --> $DIR/bound-lifetime-constrained.rs:28:56\n+  --> $DIR/bound-lifetime-constrained.rs:28:60\n    |\n-LL | fn object1(_: Box<for<'a> Fn(<() as Foo<'a>>::Item) -> &'a i32>) {\n-   |                                                        ^^^^^^^\n+LL | fn object1(_: Box<dyn for<'a> Fn(<() as Foo<'a>>::Item) -> &'a i32>) {\n+   |                                                            ^^^^^^^\n \n error[E0582]: binding for associated type `Output` references lifetime `'a`, which does not appear in the trait input types\n-  --> $DIR/bound-lifetime-constrained.rs:33:35\n+  --> $DIR/bound-lifetime-constrained.rs:33:39\n    |\n-LL | fn object2(_: Box<for<'a> Fn() -> <() as Foo<'a>>::Item>) {\n-   |                                   ^^^^^^^^^^^^^^^^^^^^^\n+LL | fn object2(_: Box<dyn for<'a> Fn() -> <() as Foo<'a>>::Item>) {\n+   |                                       ^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "fb82b3fa666606230e011d3dd3c39e0f61711be4", "filename": "src/test/ui/associated-types/bound-lifetime-constrained.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-constrained.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-constrained.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-constrained.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -25,12 +25,12 @@ fn func2(_: for<'a> fn() -> <() as Foo<'a>>::Item) {\n }\n \n #[cfg(object)]\n-fn object1(_: Box<for<'a> Fn(<() as Foo<'a>>::Item) -> &'a i32>) {\n+fn object1(_: Box<dyn for<'a> Fn(<() as Foo<'a>>::Item) -> &'a i32>) {\n     //[object]~^ ERROR E0582\n }\n \n #[cfg(object)]\n-fn object2(_: Box<for<'a> Fn() -> <() as Foo<'a>>::Item>) {\n+fn object2(_: Box<dyn for<'a> Fn() -> <() as Foo<'a>>::Item>) {\n     //[object]~^ ERROR E0582\n }\n "}, {"sha": "54f4bb9076b284422163eba7bb5c25edc67104f6", "filename": "src/test/ui/associated-types/bound-lifetime-in-binding-only.angle.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-binding-only.angle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-binding-only.angle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-binding-only.angle.stderr?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -17,10 +17,10 @@ LL | fn angle2<T>() where for<'a> T: Foo<Item=&'a i32> {\n    |                                     ^^^^^^^^^^^^\n \n error[E0582]: binding for associated type `Item` references lifetime `'a`, which does not appear in the trait input types\n-  --> $DIR/bound-lifetime-in-binding-only.rs:27:27\n+  --> $DIR/bound-lifetime-in-binding-only.rs:27:31\n    |\n-LL | fn angle3(_: &for<'a> Foo<Item=&'a i32>) {\n-   |                           ^^^^^^^^^^^^\n+LL | fn angle3(_: &dyn for<'a> Foo<Item=&'a i32>) {\n+   |                               ^^^^^^^^^^^^\n \n error: aborting due to 4 previous errors\n "}, {"sha": "74bc84c222aa7554d9271c54d8f32965d943b8b1", "filename": "src/test/ui/associated-types/bound-lifetime-in-binding-only.paren.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-binding-only.paren.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-binding-only.paren.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-binding-only.paren.stderr?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -17,10 +17,10 @@ LL | fn paren2<T>() where for<'a> T: Fn() -> &'a i32 {\n    |                                         ^^^^^^^\n \n error[E0582]: binding for associated type `Output` references lifetime `'a`, which does not appear in the trait input types\n-  --> $DIR/bound-lifetime-in-binding-only.rs:47:31\n+  --> $DIR/bound-lifetime-in-binding-only.rs:47:35\n    |\n-LL | fn paren3(_: &for<'a> Fn() -> &'a i32) {\n-   |                               ^^^^^^^\n+LL | fn paren3(_: &dyn for<'a> Fn() -> &'a i32) {\n+   |                                   ^^^^^^^\n \n error: aborting due to 4 previous errors\n "}, {"sha": "843f5f0619588c6404901e9689e7d15c9056f920", "filename": "src/test/ui/associated-types/bound-lifetime-in-binding-only.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-binding-only.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-binding-only.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-binding-only.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -24,7 +24,7 @@ fn angle2<T>() where for<'a> T: Foo<Item=&'a i32> {\n }\n \n #[cfg(angle)]\n-fn angle3(_: &for<'a> Foo<Item=&'a i32>) {\n+fn angle3(_: &dyn for<'a> Foo<Item=&'a i32>) {\n     //[angle]~^ ERROR binding for associated type `Item` references lifetime `'a`\n }\n \n@@ -44,7 +44,7 @@ fn paren2<T>() where for<'a> T: Fn() -> &'a i32 {\n }\n \n #[cfg(paren)]\n-fn paren3(_: &for<'a> Fn() -> &'a i32) {\n+fn paren3(_: &dyn for<'a> Fn() -> &'a i32) {\n     //[paren]~^ ERROR binding for associated type `Output` references lifetime `'a`\n }\n "}, {"sha": "9c0dc61494d1f9cf1046da46568d19ec301b9f43", "filename": "src/test/ui/associated-types/bound-lifetime-in-return-only.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-return-only.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-return-only.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-return-only.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -38,11 +38,11 @@ fn elision(_: fn() -> &i32) {\n struct Parameterized<'a> { x: &'a str }\n \n #[cfg(ok)]\n-fn ok1(_: &for<'a> Fn(&Parameterized<'a>) -> &'a i32) {\n+fn ok1(_: &dyn for<'a> Fn(&Parameterized<'a>) -> &'a i32) {\n }\n \n #[cfg(ok)]\n-fn ok2(_: &for<'a,'b> Fn<(&'b Parameterized<'a>,), Output=&'a i32>) {\n+fn ok2(_: &dyn for<'a,'b> Fn<(&'b Parameterized<'a>,), Output=&'a i32>) {\n }\n \n #[rustc_error]"}, {"sha": "e94a5f0853d72c7d4cbcede4469c2af31ed0d02c", "filename": "src/test/ui/async-await/async-with-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fasync-await%2Fasync-with-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fasync-await%2Fasync-with-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-with-closure.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -19,7 +19,7 @@ struct MyStream<C: ?Sized + MyClosure> {\n async fn get_future<C: ?Sized + MyClosure>(_stream: MyStream<C>) {}\n \n async fn f() {\n-    let messages: MyStream<FnMut()> = unimplemented!();\n+    let messages: MyStream<dyn FnMut()> = unimplemented!();\n     await!(get_future(messages));\n }\n "}, {"sha": "2157cf7d4f7abe9aafce3e252adf2d7876df77ae", "filename": "src/test/ui/async-await/issues/issue-53249.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-53249.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-53249.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-53249.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -35,7 +35,7 @@ impl<R, F> Future for Lazy<F>\n }\n \n async fn __receive<WantFn, Fut>(want: WantFn) -> ()\n-    where Fut: Future<Output = ()>, WantFn: Fn(&Box<Send + 'static>) -> Fut,\n+    where Fut: Future<Output = ()>, WantFn: Fn(&Box<dyn Send + 'static>) -> Fut,\n {\n     await!(lazy(|_| ()));\n }"}, {"sha": "ad18f411875690413a23a64f3510ad54afb7215d", "filename": "src/test/ui/async-await/issues/issue-54974.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-54974.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-54974.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-54974.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -9,7 +9,7 @@ trait SomeTrait: Send + Sync + 'static {\n     fn do_something(&self);\n }\n \n-async fn my_task(obj: Arc<SomeTrait>) {\n+async fn my_task(obj: Arc<dyn SomeTrait>) {\n     unimplemented!()\n }\n "}, {"sha": "b899c59ff2ea702b31c5f758c7bd7633789c4dd1", "filename": "src/test/ui/bad/bad-sized.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fbad%2Fbad-sized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fbad%2Fbad-sized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-sized.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -1,7 +1,7 @@\n trait Trait {}\n \n pub fn main() {\n-    let x: Vec<Trait + Sized> = Vec::new();\n+    let x: Vec<dyn Trait + Sized> = Vec::new();\n     //~^ ERROR only auto traits can be used as additional traits in a trait object\n     //~| ERROR the size for values of type\n     //~| ERROR the size for values of type"}, {"sha": "e9ded557281a445c69632749b607d8b04ec05a89", "filename": "src/test/ui/bad/bad-sized.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fbad%2Fbad-sized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fbad%2Fbad-sized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-sized.stderr?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -1,29 +1,29 @@\n error[E0225]: only auto traits can be used as additional traits in a trait object\n-  --> $DIR/bad-sized.rs:4:24\n+  --> $DIR/bad-sized.rs:4:28\n    |\n-LL |     let x: Vec<Trait + Sized> = Vec::new();\n-   |                -----   ^^^^^\n-   |                |       |\n-   |                |       additional non-auto trait\n-   |                |       trait alias used in trait object type (additional use)\n-   |                first non-auto trait\n-   |                trait alias used in trait object type (first use)\n+LL |     let x: Vec<dyn Trait + Sized> = Vec::new();\n+   |                    -----   ^^^^^\n+   |                    |       |\n+   |                    |       additional non-auto trait\n+   |                    |       trait alias used in trait object type (additional use)\n+   |                    first non-auto trait\n+   |                    trait alias used in trait object type (first use)\n \n error[E0277]: the size for values of type `dyn Trait` cannot be known at compilation time\n   --> $DIR/bad-sized.rs:4:12\n    |\n-LL |     let x: Vec<Trait + Sized> = Vec::new();\n-   |            ^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+LL |     let x: Vec<dyn Trait + Sized> = Vec::new();\n+   |            ^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `dyn Trait`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required by `std::vec::Vec`\n \n error[E0277]: the size for values of type `dyn Trait` cannot be known at compilation time\n-  --> $DIR/bad-sized.rs:4:33\n+  --> $DIR/bad-sized.rs:4:37\n    |\n-LL |     let x: Vec<Trait + Sized> = Vec::new();\n-   |                                 ^^^^^^^^ doesn't have a size known at compile-time\n+LL |     let x: Vec<dyn Trait + Sized> = Vec::new();\n+   |                                     ^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `dyn Trait`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>"}, {"sha": "b4d85b60cd5afbb0e3f063d3c40f8e1959ce179f", "filename": "src/test/ui/borrowck/borrowck-borrow-mut-object-twice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-mut-object-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-mut-object-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-mut-object-twice.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -8,7 +8,7 @@ trait Foo {\n     fn f2(&mut self);\n }\n \n-fn test(x: &mut Foo) {\n+fn test(x: &mut dyn Foo) {\n     let y = x.f1();\n     x.f2(); //~ ERROR cannot borrow `*x` as mutable\n     y.use_ref();"}, {"sha": "6b32d185b6fdf5c3dbdeafb01f67efeaf93f76e5", "filename": "src/test/ui/borrowck/borrowck-consume-upcast-box.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-consume-upcast-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-consume-upcast-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-consume-upcast-box.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -2,10 +2,10 @@\n \n trait Foo { fn dummy(&self); }\n \n-fn consume(_: Box<Foo>) {\n+fn consume(_: Box<dyn Foo>) {\n }\n \n-fn foo(b: Box<Foo+Send>) {\n+fn foo(b: Box<dyn Foo + Send>) {\n     consume(b);\n     consume(b); //~ ERROR use of moved value\n }"}, {"sha": "356cda01e29c8eb3e3f5b55598e005f40528756f", "filename": "src/test/ui/borrowck/borrowck-consume-upcast-box.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-consume-upcast-box.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-consume-upcast-box.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-consume-upcast-box.stderr?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -1,7 +1,7 @@\n error[E0382]: use of moved value: `b`\n   --> $DIR/borrowck-consume-upcast-box.rs:10:13\n    |\n-LL | fn foo(b: Box<Foo+Send>) {\n+LL | fn foo(b: Box<dyn Foo + Send>) {\n    |        - move occurs because `b` has type `std::boxed::Box<dyn Foo + std::marker::Send>`, which does not implement the `Copy` trait\n LL |     consume(b);\n    |             - value moved here"}, {"sha": "b50d455637b9a5438e1ea269a86ba4d8e1145cd0", "filename": "src/test/ui/borrowck/borrowck-escaping-closure-error-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-2.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -6,7 +6,7 @@\n //    closure may outlive the current function, but it borrows `books`,\n //    which is owned by the current function\n \n-fn foo<'a>(x: &'a i32) -> Box<FnMut()+'a> {\n+fn foo<'a>(x: &'a i32) -> Box<dyn FnMut() + 'a> {\n     let mut books = vec![1,2,3];\n     Box::new(|| books.push(4))\n     //~^ ERROR E0373"}, {"sha": "c468740bc3bf573252005940caaf7fcae533b462", "filename": "src/test/ui/borrowck/borrowck-in-static.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-in-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-in-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-in-static.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -1,6 +1,6 @@\n // check that borrowck looks inside consts/statics\n \n-static FN : &'static (Fn() -> (Box<Fn()->Box<i32>>) + Sync) = &|| {\n+static FN : &'static (dyn Fn() -> (Box<dyn Fn()->Box<i32>>) + Sync) = &|| {\n     let x = Box::new(0);\n     Box::new(|| x) //~ ERROR cannot move out of captured variable in an `Fn` closure\n };"}, {"sha": "137a9adbc40ac36b23b2ee9f3a50146c747ca7e2", "filename": "src/test/ui/borrowck/borrowck-object-lifetime.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-object-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-object-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-object-lifetime.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -8,26 +8,26 @@ trait Foo {\n     fn mut_borrowed(&mut self) -> &();\n }\n \n-fn borrowed_receiver(x: &Foo) {\n+fn borrowed_receiver(x: &dyn Foo) {\n     let y = x.borrowed();\n     let z = x.borrowed();\n     z.use_ref();\n     y.use_ref();\n }\n \n-fn mut_borrowed_receiver(x: &mut Foo) {\n+fn mut_borrowed_receiver(x: &mut dyn Foo) {\n     let y = x.borrowed();\n     let z = x.mut_borrowed(); //~ ERROR cannot borrow\n     y.use_ref();\n }\n \n-fn mut_owned_receiver(mut x: Box<Foo>) {\n+fn mut_owned_receiver(mut x: Box<dyn Foo>) {\n     let y = x.borrowed();\n     let z = &mut x; //~ ERROR cannot borrow\n     y.use_ref();\n }\n \n-fn imm_owned_receiver(mut x: Box<Foo>) {\n+fn imm_owned_receiver(mut x: Box<dyn Foo>) {\n     let y = x.borrowed();\n     let z = &x;\n     z.use_ref();"}, {"sha": "3ce72161814949f9896dccd488bb0964085bc688", "filename": "src/test/ui/borrowck/borrowck-use-uninitialized-in-cast-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-uninitialized-in-cast-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-uninitialized-in-cast-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-uninitialized-in-cast-trait.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -6,5 +6,5 @@ impl Foo for i32 { }\n \n fn main() {\n     let x: &i32;\n-    let y = x as *const Foo; //~ ERROR [E0381]\n+    let y = x as *const dyn Foo; //~ ERROR [E0381]\n }"}, {"sha": "2b80140c6b376e714b33fd353405d2b15a76432f", "filename": "src/test/ui/borrowck/borrowck-use-uninitialized-in-cast-trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-uninitialized-in-cast-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-uninitialized-in-cast-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-uninitialized-in-cast-trait.stderr?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -1,7 +1,7 @@\n error[E0381]: borrow of possibly uninitialized variable: `x`\n   --> $DIR/borrowck-use-uninitialized-in-cast-trait.rs:9:13\n    |\n-LL |     let y = x as *const Foo;\n+LL |     let y = x as *const dyn Foo;\n    |             ^ use of possibly uninitialized `*x`\n \n error: aborting due to previous error"}, {"sha": "d8bef927fd722f4a853cdcb73c182cdaabeb5159", "filename": "src/test/ui/borrowck/regions-escape-unboxed-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-unboxed-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-unboxed-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-unboxed-closure.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -1,4 +1,4 @@\n-fn with_int(f: &mut FnMut(&isize)) {\n+fn with_int(f: &mut dyn FnMut(&isize)) {\n }\n \n fn main() {"}, {"sha": "baf122df5e268e27515371644a682e728c23b11f", "filename": "src/test/ui/borrowck/two-phase-nonrecv-autoref.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-nonrecv-autoref.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-nonrecv-autoref.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-nonrecv-autoref.nll.stderr?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -29,7 +29,7 @@ LL |         f(f(10));\n error[E0382]: use of moved value: `f`\n   --> $DIR/two-phase-nonrecv-autoref.rs:80:11\n    |\n-LL |     fn twice_ten_oo(f: Box<FnOnce(i32) -> i32>) {\n+LL |     fn twice_ten_oo(f: Box<dyn FnOnce(i32) -> i32>) {\n    |                     - move occurs because `f` has type `std::boxed::Box<dyn std::ops::FnOnce(i32) -> i32>`, which does not implement the `Copy` trait\n LL |         f(f(10));\n    |         - ^ value used here after move"}, {"sha": "b29664e3d8cbd67a30a2c47fa54e2765635213a3", "filename": "src/test/ui/borrowck/two-phase-nonrecv-autoref.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-nonrecv-autoref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-nonrecv-autoref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-nonrecv-autoref.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -68,15 +68,15 @@ fn overloaded_call_traits() {\n         //[g2p]~^^  ERROR use of moved value: `f`\n     }\n \n-    fn twice_ten_om(f: &mut FnMut(i32) -> i32) {\n+    fn twice_ten_om(f: &mut dyn FnMut(i32) -> i32) {\n         f(f(10));\n         //[nll]~^   ERROR cannot borrow `*f` as mutable more than once at a time\n         //[g2p]~^^  ERROR cannot borrow `*f` as mutable more than once at a time\n     }\n-    fn twice_ten_oi(f: &mut Fn(i32) -> i32) {\n+    fn twice_ten_oi(f: &mut dyn Fn(i32) -> i32) {\n         f(f(10));\n     }\n-    fn twice_ten_oo(f: Box<FnOnce(i32) -> i32>) {\n+    fn twice_ten_oo(f: Box<dyn FnOnce(i32) -> i32>) {\n         f(f(10));\n         //[nll]~^   ERROR use of moved value: `f`\n         //[g2p]~^^  ERROR use of moved value: `f`"}, {"sha": "31aa4011b91143ba750f1d1aa57bd8ee44878350", "filename": "src/test/ui/bounds-lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fbounds-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fbounds-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbounds-lifetime.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -2,6 +2,6 @@ type A = for<'b, 'a: 'b> fn(); //~ ERROR lifetime bounds cannot be used in this\n type B = for<'b, 'a: 'b,> fn(); //~ ERROR lifetime bounds cannot be used in this context\n type C = for<'b, 'a: 'b +> fn(); //~ ERROR lifetime bounds cannot be used in this context\n type D = for<'a, T> fn(); //~ ERROR only lifetime parameters can be used in this context\n-type E = for<T> Fn(); //~ ERROR only lifetime parameters can be used in this context\n+type E = dyn for<T> Fn(); //~ ERROR only lifetime parameters can be used in this context\n \n fn main() {}"}, {"sha": "a0395ed49045f75a3cf54f21d23a783e15af5ea5", "filename": "src/test/ui/bounds-lifetime.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fbounds-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fbounds-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbounds-lifetime.stderr?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -23,10 +23,10 @@ LL | type D = for<'a, T> fn();\n    |                  ^\n \n error: only lifetime parameters can be used in this context\n-  --> $DIR/bounds-lifetime.rs:5:14\n+  --> $DIR/bounds-lifetime.rs:5:18\n    |\n-LL | type E = for<T> Fn();\n-   |              ^\n+LL | type E = dyn for<T> Fn();\n+   |                  ^\n \n error: aborting due to 5 previous errors\n "}, {"sha": "5342b595c7c5e9f1d2c7891e8fb59a4b7d968e06", "filename": "src/test/ui/cast/cast-to-unsized-trait-object-suggestion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fcast%2Fcast-to-unsized-trait-object-suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fcast%2Fcast-to-unsized-trait-object-suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast%2Fcast-to-unsized-trait-object-suggestion.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -1,4 +1,4 @@\n fn main() {\n-    &1 as Send; //~ ERROR cast to unsized\n-    Box::new(1) as Send; //~ ERROR cast to unsized\n+    &1 as dyn Send; //~ ERROR cast to unsized\n+    Box::new(1) as dyn Send; //~ ERROR cast to unsized\n }"}, {"sha": "ffa02533d8b66db7869c917abf13b15225b8c4e8", "filename": "src/test/ui/cast/cast-to-unsized-trait-object-suggestion.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fcast%2Fcast-to-unsized-trait-object-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fcast%2Fcast-to-unsized-trait-object-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast%2Fcast-to-unsized-trait-object-suggestion.stderr?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -1,18 +1,18 @@\n error[E0620]: cast to unsized type: `&{integer}` as `dyn std::marker::Send`\n   --> $DIR/cast-to-unsized-trait-object-suggestion.rs:2:5\n    |\n-LL |     &1 as Send;\n-   |     ^^^^^^----\n+LL |     &1 as dyn Send;\n+   |     ^^^^^^--------\n    |           |\n-   |           help: try casting to a reference instead: `&Send`\n+   |           help: try casting to a reference instead: `&dyn Send`\n \n error[E0620]: cast to unsized type: `std::boxed::Box<{integer}>` as `dyn std::marker::Send`\n   --> $DIR/cast-to-unsized-trait-object-suggestion.rs:3:5\n    |\n-LL |     Box::new(1) as Send;\n-   |     ^^^^^^^^^^^^^^^----\n+LL |     Box::new(1) as dyn Send;\n+   |     ^^^^^^^^^^^^^^^--------\n    |                    |\n-   |                    help: try casting to a `Box` instead: `Box<Send>`\n+   |                    help: try casting to a `Box` instead: `Box<dyn Send>`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "d4a0f9613055ee5abf87eccec3fffe4df7a0dff1", "filename": "src/test/ui/casts-differing-anon.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fcasts-differing-anon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fcasts-differing-anon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcasts-differing-anon.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -5,7 +5,7 @@ fn foo() -> Box<impl fmt::Debug+?Sized> {\n     x\n }\n fn bar() -> Box<impl fmt::Debug+?Sized> {\n-    let y: Box<fmt::Debug> = Box::new([0]);\n+    let y: Box<dyn fmt::Debug> = Box::new([0]);\n     y\n }\n "}, {"sha": "bb4c3fac93806e8303d9301609558cb083dfd653", "filename": "src/test/ui/class-cast-to-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fclass-cast-to-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fclass-cast-to-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclass-cast-to-trait.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -49,6 +49,6 @@ fn cat(in_x : usize, in_y : isize, in_name: String) -> Cat {\n }\n \n fn main() {\n-  let nyan: Box<Noisy> = box cat(0, 2, \"nyan\".to_string()) as Box<Noisy>;\n+  let nyan: Box<dyn Noisy> = box cat(0, 2, \"nyan\".to_string()) as Box<dyn Noisy>;\n   nyan.eat(); //~ ERROR no method named `eat` found\n }"}, {"sha": "0a015ea1436c5d69df9138d0a3aec50f2080e72c", "filename": "src/test/ui/closure_context/issue-26046-fn-mut.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fclosure_context%2Fissue-26046-fn-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fclosure_context%2Fissue-26046-fn-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure_context%2Fissue-26046-fn-mut.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -1,4 +1,4 @@\n-fn foo() -> Box<Fn()> {\n+fn foo() -> Box<dyn Fn()> {\n     let num = 5;\n \n     let closure = || { //~ ERROR expected a closure that"}, {"sha": "511690e9dd4b380048bb989bab49855c15db5bee", "filename": "src/test/ui/closure_context/issue-26046-fn-once.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fclosure_context%2Fissue-26046-fn-once.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fclosure_context%2Fissue-26046-fn-once.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure_context%2Fissue-26046-fn-once.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -1,4 +1,4 @@\n-fn get_closure() -> Box<Fn() -> Vec<u8>> {\n+fn get_closure() -> Box<dyn Fn() -> Vec<u8>> {\n     let vec = vec![1u8, 2u8];\n \n     let closure = move || { //~ ERROR expected a closure"}, {"sha": "102f1f94a36e1da366b0bbf49c88f7d2208be6be", "filename": "src/test/ui/closures/closure-immutable-outer-variable.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fclosures%2Fclosure-immutable-outer-variable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fclosures%2Fclosure-immutable-outer-variable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-immutable-outer-variable.fixed?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -2,7 +2,7 @@\n \n // Point at the captured immutable outer variable\n \n-fn foo(mut f: Box<FnMut()>) {\n+fn foo(mut f: Box<dyn FnMut()>) {\n     f();\n }\n "}, {"sha": "6eb43b372c96cc3bc23d5a8288c7e7cf2a49e63e", "filename": "src/test/ui/closures/closure-immutable-outer-variable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fclosures%2Fclosure-immutable-outer-variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fclosures%2Fclosure-immutable-outer-variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-immutable-outer-variable.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -2,7 +2,7 @@\n \n // Point at the captured immutable outer variable\n \n-fn foo(mut f: Box<FnMut()>) {\n+fn foo(mut f: Box<dyn FnMut()>) {\n     f();\n }\n "}, {"sha": "414acfd84ce4e2e6369af9478c52ad6a2686bc9b", "filename": "src/test/ui/codemap_tests/coherence-overlapping-inherent-impl-trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fcodemap_tests%2Fcoherence-overlapping-inherent-impl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fcodemap_tests%2Fcoherence-overlapping-inherent-impl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Fcoherence-overlapping-inherent-impl-trait.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -1,6 +1,6 @@\n #![allow(dead_code)]\n \n trait C {}\n-impl C { fn f() {} } //~ ERROR duplicate\n-impl C { fn f() {} }\n+impl dyn C { fn f() {} } //~ ERROR duplicate\n+impl dyn C { fn f() {} }\n fn main() { }"}, {"sha": "a97161b131d496038d003443f6963555b1438549", "filename": "src/test/ui/codemap_tests/coherence-overlapping-inherent-impl-trait.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fcodemap_tests%2Fcoherence-overlapping-inherent-impl-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fcodemap_tests%2Fcoherence-overlapping-inherent-impl-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Fcoherence-overlapping-inherent-impl-trait.stderr?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -1,10 +1,10 @@\n error[E0592]: duplicate definitions with name `f`\n-  --> $DIR/coherence-overlapping-inherent-impl-trait.rs:4:10\n+  --> $DIR/coherence-overlapping-inherent-impl-trait.rs:4:14\n    |\n-LL | impl C { fn f() {} }\n-   |          ^^^^^^^^^ duplicate definitions for `f`\n-LL | impl C { fn f() {} }\n-   |          --------- other definition for `f`\n+LL | impl dyn C { fn f() {} }\n+   |              ^^^^^^^^^ duplicate definitions for `f`\n+LL | impl dyn C { fn f() {} }\n+   |              --------- other definition for `f`\n \n error: aborting due to previous error\n "}, {"sha": "b4d2f5d3c6d0949c812bf70590d5943334c7d242", "filename": "src/test/ui/codemap_tests/two_files_data.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fcodemap_tests%2Ftwo_files_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fcodemap_tests%2Ftwo_files_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Ftwo_files_data.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -2,4 +2,4 @@\n \n trait Foo { }\n \n-type Bar = Foo;\n+type Bar = dyn Foo;"}, {"sha": "c139e823c2aef64e07f1b01528e7aa99e21e51c1", "filename": "src/test/ui/coercion/coerce-expect-unsized-ascribed.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-expect-unsized-ascribed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-expect-unsized-ascribed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-expect-unsized-ascribed.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -10,23 +10,23 @@ pub fn main() {\n     let _ = box if true { [1, 2, 3] } else { [1, 3, 4] }: Box<[i32]>; //~ ERROR mismatched types\n     let _ = box match true { true => [1, 2, 3], false => [1, 3, 4] }: Box<[i32]>;\n     //~^ ERROR mismatched types\n-    let _ = box { |x| (x as u8) }: Box<Fn(i32) -> _>; //~ ERROR mismatched types\n-    let _ = box if true { false } else { true }: Box<Debug>; //~ ERROR mismatched types\n-    let _ = box match true { true => 'a', false => 'b' }: Box<Debug>; //~ ERROR mismatched types\n+    let _ = box { |x| (x as u8) }: Box<dyn Fn(i32) -> _>; //~ ERROR mismatched types\n+    let _ = box if true { false } else { true }: Box<dyn Debug>; //~ ERROR mismatched types\n+    let _ = box match true { true => 'a', false => 'b' }: Box<dyn Debug>; //~ ERROR mismatched types\n \n     let _ = &{ [1, 2, 3] }: &[i32]; //~ ERROR mismatched types\n     let _ = &if true { [1, 2, 3] } else { [1, 3, 4] }: &[i32]; //~ ERROR mismatched types\n     let _ = &match true { true => [1, 2, 3], false => [1, 3, 4] }: &[i32];\n     //~^ ERROR mismatched types\n-    let _ = &{ |x| (x as u8) }: &Fn(i32) -> _; //~ ERROR mismatched types\n-    let _ = &if true { false } else { true }: &Debug; //~ ERROR mismatched types\n-    let _ = &match true { true => 'a', false => 'b' }: &Debug; //~ ERROR mismatched types\n+    let _ = &{ |x| (x as u8) }: &dyn Fn(i32) -> _; //~ ERROR mismatched types\n+    let _ = &if true { false } else { true }: &dyn Debug; //~ ERROR mismatched types\n+    let _ = &match true { true => 'a', false => 'b' }: &dyn Debug; //~ ERROR mismatched types\n \n     let _ = Box::new([1, 2, 3]): Box<[i32]>; //~ ERROR mismatched types\n-    let _ = Box::new(|x| (x as u8)): Box<Fn(i32) -> _>; //~ ERROR mismatched types\n+    let _ = Box::new(|x| (x as u8)): Box<dyn Fn(i32) -> _>; //~ ERROR mismatched types\n \n     let _ = vec![\n         Box::new(|x| (x as u8)),\n         box |x| (x as i16 as u8),\n-    ]: Vec<Box<Fn(i32) -> _>>;\n+    ]: Vec<Box<dyn Fn(i32) -> _>>;\n }"}, {"sha": "3b81610a06e097d9e8dcd5af2f9a6c20c0fd72f2", "filename": "src/test/ui/coercion/coerce-expect-unsized-ascribed.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-expect-unsized-ascribed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-expect-unsized-ascribed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-expect-unsized-ascribed.stderr?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -28,7 +28,7 @@ LL |     let _ = box match true { true => [1, 2, 3], false => [1, 3, 4] }: Box<[\n error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:13:13\n    |\n-LL |     let _ = box { |x| (x as u8) }: Box<Fn(i32) -> _>;\n+LL |     let _ = box { |x| (x as u8) }: Box<dyn Fn(i32) -> _>;\n    |             ^^^^^^^^^^^^^^^^^^^^^ expected trait std::ops::Fn, found closure\n    |\n    = note: expected type `std::boxed::Box<dyn std::ops::Fn(i32) -> u8>`\n@@ -37,7 +37,7 @@ LL |     let _ = box { |x| (x as u8) }: Box<Fn(i32) -> _>;\n error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:14:13\n    |\n-LL |     let _ = box if true { false } else { true }: Box<Debug>;\n+LL |     let _ = box if true { false } else { true }: Box<dyn Debug>;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected trait std::fmt::Debug, found bool\n    |\n    = note: expected type `std::boxed::Box<dyn std::fmt::Debug>`\n@@ -46,7 +46,7 @@ LL |     let _ = box if true { false } else { true }: Box<Debug>;\n error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:15:13\n    |\n-LL |     let _ = box match true { true => 'a', false => 'b' }: Box<Debug>;\n+LL |     let _ = box match true { true => 'a', false => 'b' }: Box<dyn Debug>;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected trait std::fmt::Debug, found char\n    |\n    = note: expected type `std::boxed::Box<dyn std::fmt::Debug>`\n@@ -82,7 +82,7 @@ LL |     let _ = &match true { true => [1, 2, 3], false => [1, 3, 4] }: &[i32];\n error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:21:13\n    |\n-LL |     let _ = &{ |x| (x as u8) }: &Fn(i32) -> _;\n+LL |     let _ = &{ |x| (x as u8) }: &dyn Fn(i32) -> _;\n    |             ^^^^^^^^^^^^^^^^^^ expected trait std::ops::Fn, found closure\n    |\n    = note: expected type `&dyn std::ops::Fn(i32) -> u8`\n@@ -91,7 +91,7 @@ LL |     let _ = &{ |x| (x as u8) }: &Fn(i32) -> _;\n error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:22:13\n    |\n-LL |     let _ = &if true { false } else { true }: &Debug;\n+LL |     let _ = &if true { false } else { true }: &dyn Debug;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected trait std::fmt::Debug, found bool\n    |\n    = note: expected type `&dyn std::fmt::Debug`\n@@ -100,7 +100,7 @@ LL |     let _ = &if true { false } else { true }: &Debug;\n error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:23:13\n    |\n-LL |     let _ = &match true { true => 'a', false => 'b' }: &Debug;\n+LL |     let _ = &match true { true => 'a', false => 'b' }: &dyn Debug;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected trait std::fmt::Debug, found char\n    |\n    = note: expected type `&dyn std::fmt::Debug`\n@@ -118,7 +118,7 @@ LL |     let _ = Box::new([1, 2, 3]): Box<[i32]>;\n error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:26:13\n    |\n-LL |     let _ = Box::new(|x| (x as u8)): Box<Fn(i32) -> _>;\n+LL |     let _ = Box::new(|x| (x as u8)): Box<dyn Fn(i32) -> _>;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^ expected trait std::ops::Fn, found closure\n    |\n    = note: expected type `std::boxed::Box<dyn std::ops::Fn(i32) -> _>`"}, {"sha": "c38d7456a995219eed1a3848c044b1eaa133784a", "filename": "src/test/ui/coherence/coherence-impl-trait-for-trait-object-safe.old.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait-object-safe.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait-object-safe.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait-object-safe.old.stderr?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -1,7 +1,7 @@\n error[E0038]: the trait `NotObjectSafe` cannot be made into an object\n   --> $DIR/coherence-impl-trait-for-trait-object-safe.rs:11:6\n    |\n-LL | impl NotObjectSafe for NotObjectSafe { }\n+LL | impl NotObjectSafe for dyn NotObjectSafe { }\n    |      ^^^^^^^^^^^^^ the trait `NotObjectSafe` cannot be made into an object\n    |\n    = note: method `eq` references the `Self` type in its arguments or return type"}, {"sha": "c38d7456a995219eed1a3848c044b1eaa133784a", "filename": "src/test/ui/coherence/coherence-impl-trait-for-trait-object-safe.re.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait-object-safe.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait-object-safe.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait-object-safe.re.stderr?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -1,7 +1,7 @@\n error[E0038]: the trait `NotObjectSafe` cannot be made into an object\n   --> $DIR/coherence-impl-trait-for-trait-object-safe.rs:11:6\n    |\n-LL | impl NotObjectSafe for NotObjectSafe { }\n+LL | impl NotObjectSafe for dyn NotObjectSafe { }\n    |      ^^^^^^^^^^^^^ the trait `NotObjectSafe` cannot be made into an object\n    |\n    = note: method `eq` references the `Self` type in its arguments or return type"}, {"sha": "b4c88e937830e738c60f5817518de76fc1fb1506", "filename": "src/test/ui/coherence/coherence-impl-trait-for-trait-object-safe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait-object-safe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait-object-safe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait-object-safe.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -8,7 +8,7 @@\n // If the trait is not object-safe, we give a more tailored message\n // because we're such schnuckels:\n trait NotObjectSafe { fn eq(&self, other: Self); }\n-impl NotObjectSafe for NotObjectSafe { }\n+impl NotObjectSafe for dyn NotObjectSafe { }\n //[old]~^ ERROR E0038\n //[re]~^^ ERROR E0038\n "}, {"sha": "4819ce9260e708cc2dd7150d80bab95474ffab04", "filename": "src/test/ui/coherence/coherence-impl-trait-for-trait.old.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait.old.stderr?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -1,20 +1,20 @@\n error[E0371]: the object type `(dyn Baz + 'static)` automatically implements the trait `Foo`\n   --> $DIR/coherence-impl-trait-for-trait.rs:13:1\n    |\n-LL | impl Foo for Baz { }\n-   | ^^^^^^^^^^^^^^^^ `(dyn Baz + 'static)` automatically implements trait `Foo`\n+LL | impl Foo for dyn Baz { }\n+   | ^^^^^^^^^^^^^^^^^^^^ `(dyn Baz + 'static)` automatically implements trait `Foo`\n \n error[E0371]: the object type `(dyn Baz + 'static)` automatically implements the trait `Bar`\n   --> $DIR/coherence-impl-trait-for-trait.rs:16:1\n    |\n-LL | impl Bar for Baz { }\n-   | ^^^^^^^^^^^^^^^^ `(dyn Baz + 'static)` automatically implements trait `Bar`\n+LL | impl Bar for dyn Baz { }\n+   | ^^^^^^^^^^^^^^^^^^^^ `(dyn Baz + 'static)` automatically implements trait `Bar`\n \n error[E0371]: the object type `(dyn Baz + 'static)` automatically implements the trait `Baz`\n   --> $DIR/coherence-impl-trait-for-trait.rs:19:1\n    |\n-LL | impl Baz for Baz { }\n-   | ^^^^^^^^^^^^^^^^ `(dyn Baz + 'static)` automatically implements trait `Baz`\n+LL | impl Baz for dyn Baz { }\n+   | ^^^^^^^^^^^^^^^^^^^^ `(dyn Baz + 'static)` automatically implements trait `Baz`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "4819ce9260e708cc2dd7150d80bab95474ffab04", "filename": "src/test/ui/coherence/coherence-impl-trait-for-trait.re.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait.re.stderr?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -1,20 +1,20 @@\n error[E0371]: the object type `(dyn Baz + 'static)` automatically implements the trait `Foo`\n   --> $DIR/coherence-impl-trait-for-trait.rs:13:1\n    |\n-LL | impl Foo for Baz { }\n-   | ^^^^^^^^^^^^^^^^ `(dyn Baz + 'static)` automatically implements trait `Foo`\n+LL | impl Foo for dyn Baz { }\n+   | ^^^^^^^^^^^^^^^^^^^^ `(dyn Baz + 'static)` automatically implements trait `Foo`\n \n error[E0371]: the object type `(dyn Baz + 'static)` automatically implements the trait `Bar`\n   --> $DIR/coherence-impl-trait-for-trait.rs:16:1\n    |\n-LL | impl Bar for Baz { }\n-   | ^^^^^^^^^^^^^^^^ `(dyn Baz + 'static)` automatically implements trait `Bar`\n+LL | impl Bar for dyn Baz { }\n+   | ^^^^^^^^^^^^^^^^^^^^ `(dyn Baz + 'static)` automatically implements trait `Bar`\n \n error[E0371]: the object type `(dyn Baz + 'static)` automatically implements the trait `Baz`\n   --> $DIR/coherence-impl-trait-for-trait.rs:19:1\n    |\n-LL | impl Baz for Baz { }\n-   | ^^^^^^^^^^^^^^^^ `(dyn Baz + 'static)` automatically implements trait `Baz`\n+LL | impl Baz for dyn Baz { }\n+   | ^^^^^^^^^^^^^^^^^^^^ `(dyn Baz + 'static)` automatically implements trait `Baz`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "3ce3dca0660b94ec8735fb069d73e0313c54ffb3", "filename": "src/test/ui/coherence/coherence-impl-trait-for-trait.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -10,18 +10,18 @@ trait Bar: Foo { }\n trait Baz: Bar { }\n \n // Supertraits of Baz are not legal:\n-impl Foo for Baz { }\n+impl Foo for dyn Baz { }\n //[old]~^ ERROR E0371\n //[re]~^^ ERROR E0371\n-impl Bar for Baz { }\n+impl Bar for dyn Baz { }\n //[old]~^ ERROR E0371\n //[re]~^^ ERROR E0371\n-impl Baz for Baz { }\n+impl Baz for dyn Baz { }\n //[old]~^ ERROR E0371\n //[re]~^^ ERROR E0371\n \n // But other random traits are:\n trait Other { }\n-impl Other for Baz { } // OK, Other not a supertrait of Baz\n+impl Other for dyn Baz { } // OK, Other not a supertrait of Baz\n \n fn main() { }"}, {"sha": "8aef091fe31860c1d8ceb9b5a7b6fd9b305ba8a7", "filename": "src/test/ui/confuse-field-and-method/issue-2392.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-2392.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-2392.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-2392.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -14,7 +14,7 @@ struct Obj<F> where F: FnOnce() -> u32 {\n }\n \n struct BoxedObj {\n-    boxed_closure: Box<FnOnce() -> u32>,\n+    boxed_closure: Box<dyn FnOnce() -> u32>,\n }\n \n struct Wrapper<F> where F: FnMut() -> u32 {\n@@ -25,8 +25,8 @@ fn func() -> u32 {\n     0\n }\n \n-fn check_expression() -> Obj<Box<FnOnce() -> u32>> {\n-    Obj { closure: Box::new(|| 42_u32) as Box<FnOnce() -> u32>, not_closure: 42 }\n+fn check_expression() -> Obj<Box<dyn FnOnce() -> u32>> {\n+    Obj { closure: Box::new(|| 42_u32) as Box<dyn FnOnce() -> u32>, not_closure: 42 }\n }\n \n fn main() {\n@@ -44,7 +44,7 @@ fn main() {\n     let boxed_fn = BoxedObj { boxed_closure: Box::new(func) };\n     boxed_fn.boxed_closure();//~ ERROR no method named `boxed_closure` found\n \n-    let boxed_closure = BoxedObj { boxed_closure: Box::new(|| 42_u32) as Box<FnOnce() -> u32> };\n+    let boxed_closure = BoxedObj { boxed_closure: Box::new(|| 42_u32) as Box<dyn FnOnce() -> u32> };\n     boxed_closure.boxed_closure();//~ ERROR no method named `boxed_closure` found\n \n     // test expression writing in the notes"}, {"sha": "5a024aa4b67492d7fde0c0eaf930a8e0f4424b48", "filename": "src/test/ui/confuse-field-and-method/issue-32128.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-32128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-32128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-32128.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -1,5 +1,5 @@\n struct Example {\n-    example: Box<Fn(i32) -> i32>\n+    example: Box<dyn Fn(i32) -> i32>\n }\n \n fn main() {"}, {"sha": "4726f9dde3a845498827cb72ab178c02d4794991", "filename": "src/test/ui/consts/const-eval/const_transmute.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_transmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_transmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_transmute.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -41,7 +41,7 @@ struct VTable {\n     bar: for<'a> fn(&'a Foo) -> u32,\n }\n \n-const FOO: &Bar = &Foo { foo: 128, bar: false };\n+const FOO: &dyn Bar = &Foo { foo: 128, bar: false };\n const G: Fat = unsafe { Transmute { t: FOO }.u };\n const F: Option<for<'a> fn(&'a mut Foo)> = G.1.drop;\n const H: for<'a> fn(&'a Foo) -> u32 = G.1.bar;"}, {"sha": "e8ac5a90880cebc08e46d62822701b6a21be1ef1", "filename": "src/test/ui/consts/const-eval/issue-53401.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-53401.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-53401.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-53401.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -1,6 +1,6 @@\n // compile-pass\n \n-pub const STATIC_TRAIT: &Test = &();\n+pub const STATIC_TRAIT: &dyn Test = &();\n \n fn main() {}\n "}, {"sha": "0a427cd8857e840c3edbc52b2b81e7adda4b49df", "filename": "src/test/ui/consts/const-eval/ub-upvars.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-upvars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-upvars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-upvars.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -3,7 +3,7 @@\n \n use std::mem;\n \n-const BAD_UPVAR: &FnOnce() = &{ //~ ERROR it is undefined behavior to use this value\n+const BAD_UPVAR: &dyn FnOnce() = &{ //~ ERROR it is undefined behavior to use this value\n     let bad_ref: &'static u16 = unsafe { mem::transmute(0usize) };\n     let another_var = 13;\n     move || { let _ = bad_ref; let _ = another_var; }"}, {"sha": "f8273ba902a88ee5a92b2c06d41ef4bcf2e62b23", "filename": "src/test/ui/consts/const-eval/ub-upvars.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-upvars.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-upvars.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-upvars.stderr?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -1,7 +1,7 @@\n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-upvars.rs:6:1\n    |\n-LL | / const BAD_UPVAR: &FnOnce() = &{\n+LL | / const BAD_UPVAR: &dyn FnOnce() = &{\n LL | |     let bad_ref: &'static u16 = unsafe { mem::transmute(0usize) };\n LL | |     let another_var = 13;\n LL | |     move || { let _ = bad_ref; let _ = another_var; }"}, {"sha": "d5405f3441fec2915b06e5f2df06c9af07e9d425", "filename": "src/test/ui/consts/const-eval/union-ub-fat-ptr.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ub-fat-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ub-fat-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ub-fat-ptr.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -59,7 +59,7 @@ union DynTransmute {\n     repr: DynRepr,\n     repr2: DynRepr2,\n     bad: BadDynRepr,\n-    rust: &'static Trait,\n+    rust: &'static dyn Trait,\n }\n \n trait Trait {}\n@@ -94,17 +94,17 @@ const C3: &[u8] = unsafe { SliceTransmute { bad: BadSliceRepr { ptr: &42, len: &\n //~^ ERROR it is undefined behavior to use this value\n \n // bad trait object\n-const D: &Trait = unsafe { DynTransmute { repr: DynRepr { ptr: &92, vtable: &3 } }.rust};\n+const D: &dyn Trait = unsafe { DynTransmute { repr: DynRepr { ptr: &92, vtable: &3 } }.rust};\n //~^ ERROR it is undefined behavior to use this value\n // bad trait object\n-const E: &Trait = unsafe { DynTransmute { repr2: DynRepr2 { ptr: &92, vtable: &3 } }.rust};\n+const E: &dyn Trait = unsafe { DynTransmute { repr2: DynRepr2 { ptr: &92, vtable: &3 } }.rust};\n //~^ ERROR it is undefined behavior to use this value\n // bad trait object\n-const F: &Trait = unsafe { DynTransmute { bad: BadDynRepr { ptr: &92, vtable: 3 } }.rust};\n+const F: &dyn Trait = unsafe { DynTransmute { bad: BadDynRepr { ptr: &92, vtable: 3 } }.rust};\n //~^ ERROR it is undefined behavior to use this value\n \n // bad data *inside* the trait object\n-const G: &Trait = &unsafe { BoolTransmute { val: 3 }.bl };\n+const G: &dyn Trait = &unsafe { BoolTransmute { val: 3 }.bl };\n //~^ ERROR it is undefined behavior to use this value\n \n // bad data *inside* the slice"}, {"sha": "5048a97d19514ee28098ec9d6da729edbba75fbf", "filename": "src/test/ui/consts/const-eval/union-ub-fat-ptr.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ub-fat-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ub-fat-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ub-fat-ptr.stderr?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -41,32 +41,32 @@ LL | const C3: &[u8] = unsafe { SliceTransmute { bad: BadSliceRepr { ptr: &42, l\n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/union-ub-fat-ptr.rs:97:1\n    |\n-LL | const D: &Trait = unsafe { DynTransmute { repr: DynRepr { ptr: &92, vtable: &3 } }.rust};\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered invalid drop fn in vtable\n+LL | const D: &dyn Trait = unsafe { DynTransmute { repr: DynRepr { ptr: &92, vtable: &3 } }.rust};\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered invalid drop fn in vtable\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/union-ub-fat-ptr.rs:100:1\n    |\n-LL | const E: &Trait = unsafe { DynTransmute { repr2: DynRepr2 { ptr: &92, vtable: &3 } }.rust};\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered invalid drop fn in vtable\n+LL | const E: &dyn Trait = unsafe { DynTransmute { repr2: DynRepr2 { ptr: &92, vtable: &3 } }.rust};\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered invalid drop fn in vtable\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/union-ub-fat-ptr.rs:103:1\n    |\n-LL | const F: &Trait = unsafe { DynTransmute { bad: BadDynRepr { ptr: &92, vtable: 3 } }.rust};\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered non-pointer vtable in fat pointer\n+LL | const F: &dyn Trait = unsafe { DynTransmute { bad: BadDynRepr { ptr: &92, vtable: 3 } }.rust};\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered non-pointer vtable in fat pointer\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/union-ub-fat-ptr.rs:107:1\n    |\n-LL | const G: &Trait = &unsafe { BoolTransmute { val: 3 }.bl };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 3 at .<deref>.<dyn-downcast>, but expected something less or equal to 1\n+LL | const G: &dyn Trait = &unsafe { BoolTransmute { val: 3 }.bl };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 3 at .<deref>.<dyn-downcast>, but expected something less or equal to 1\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n "}, {"sha": "319b8ef97deaeeb71b17d5b9b5c5045b02e06613", "filename": "src/test/ui/consts/const-unsized.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fconsts%2Fconst-unsized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fconsts%2Fconst-unsized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-unsized.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -1,12 +1,12 @@\n use std::fmt::Debug;\n \n-const CONST_0: Debug+Sync = *(&0 as &(Debug+Sync));\n+const CONST_0: dyn Debug + Sync = *(&0 as &(dyn Debug + Sync));\n //~^ ERROR the size for values of type\n \n const CONST_FOO: str = *\"foo\";\n //~^ ERROR the size for values of type\n \n-static STATIC_1: Debug+Sync = *(&1 as &(Debug+Sync));\n+static STATIC_1: dyn Debug + Sync = *(&1 as &(dyn Debug + Sync));\n //~^ ERROR the size for values of type\n \n static STATIC_BAR: str = *\"bar\";"}, {"sha": "beeea87bfb1d33f0d4c556056f044cf3dc716565", "filename": "src/test/ui/consts/const-unsized.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fconsts%2Fconst-unsized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fconsts%2Fconst-unsized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-unsized.stderr?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the size for values of type `(dyn std::fmt::Debug + std::marker::Sync + 'static)` cannot be known at compilation time\n   --> $DIR/const-unsized.rs:3:16\n    |\n-LL | const CONST_0: Debug+Sync = *(&0 as &(Debug+Sync));\n-   |                ^^^^^^^^^^ doesn't have a size known at compile-time\n+LL | const CONST_0: dyn Debug + Sync = *(&0 as &(dyn Debug + Sync));\n+   |                ^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn std::fmt::Debug + std::marker::Sync + 'static)`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n@@ -19,8 +19,8 @@ LL | const CONST_FOO: str = *\"foo\";\n error[E0277]: the size for values of type `(dyn std::fmt::Debug + std::marker::Sync + 'static)` cannot be known at compilation time\n   --> $DIR/const-unsized.rs:9:18\n    |\n-LL | static STATIC_1: Debug+Sync = *(&1 as &(Debug+Sync));\n-   |                  ^^^^^^^^^^ doesn't have a size known at compile-time\n+LL | static STATIC_1: dyn Debug + Sync = *(&1 as &(dyn Debug + Sync));\n+   |                  ^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn std::fmt::Debug + std::marker::Sync + 'static)`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>"}, {"sha": "7a10c469c51a0c2dbc985eea14af9c65638ee19d", "filename": "src/test/ui/consts/min_const_fn/min_const_fn.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.nll.stderr?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -298,8 +298,8 @@ LL | const fn no_dyn_trait_ret() -> &'static dyn std::fmt::Debug { &() }\n error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n   --> $DIR/min_const_fn.rs:144:41\n    |\n-LL | const fn really_no_traits_i_mean_it() { (&() as &std::fmt::Debug, ()).1 }\n-   |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | const fn really_no_traits_i_mean_it() { (&() as &dyn std::fmt::Debug, ()).1 }\n+   |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n    = help: add #![feature(const_fn)] to the crate attributes to enable"}, {"sha": "96b6057c8fd2d571f3e7e144961a9c503774e866", "filename": "src/test/ui/consts/min_const_fn/min_const_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -141,7 +141,7 @@ const fn no_dyn_trait_ret() -> &'static dyn std::fmt::Debug { &() }\n \n const fn no_unsafe() { unsafe {} }\n \n-const fn really_no_traits_i_mean_it() { (&() as &std::fmt::Debug, ()).1 }\n+const fn really_no_traits_i_mean_it() { (&() as &dyn std::fmt::Debug, ()).1 }\n //~^ ERROR trait bounds other than `Sized`\n \n const fn no_fn_ptrs(_x: fn()) {}"}, {"sha": "e388b443d23445d95f3e40a1de8278649d894c64", "filename": "src/test/ui/consts/min_const_fn/min_const_fn.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -302,8 +302,8 @@ LL | const fn no_dyn_trait_ret() -> &'static dyn std::fmt::Debug { &() }\n error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n   --> $DIR/min_const_fn.rs:144:41\n    |\n-LL | const fn really_no_traits_i_mean_it() { (&() as &std::fmt::Debug, ()).1 }\n-   |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | const fn really_no_traits_i_mean_it() { (&() as &dyn std::fmt::Debug, ()).1 }\n+   |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n    = help: add #![feature(const_fn)] to the crate attributes to enable"}, {"sha": "274cdad75ec2adbca8a4aecb816ae68b6c1f2402", "filename": "src/test/ui/cross/cross-borrow-trait.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fcross%2Fcross-borrow-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fcross%2Fcross-borrow-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcross%2Fcross-borrow-trait.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -6,8 +6,8 @@ trait Trait { fn foo(&self) {} }\n impl Trait for Foo {}\n \n pub fn main() {\n-    let x: Box<Trait> = Box::new(Foo);\n-    let _y: &Trait = x; //~ ERROR E0308\n-                        //~| expected type `&dyn Trait`\n-                        //~| found type `std::boxed::Box<dyn Trait>`\n+    let x: Box<dyn Trait> = Box::new(Foo);\n+    let _y: &dyn Trait = x; //~ ERROR E0308\n+                            //~| expected type `&dyn Trait`\n+                            //~| found type `std::boxed::Box<dyn Trait>`\n }"}, {"sha": "ada1c0204eb0151814c67f7a08a4fd6d2c089453", "filename": "src/test/ui/cross/cross-borrow-trait.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fcross%2Fcross-borrow-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fcross%2Fcross-borrow-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcross%2Fcross-borrow-trait.stderr?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -1,11 +1,11 @@\n error[E0308]: mismatched types\n-  --> $DIR/cross-borrow-trait.rs:10:22\n+  --> $DIR/cross-borrow-trait.rs:10:26\n    |\n-LL |     let _y: &Trait = x;\n-   |                      ^\n-   |                      |\n-   |                      expected &dyn Trait, found struct `std::boxed::Box`\n-   |                      help: consider borrowing here: `&x`\n+LL |     let _y: &dyn Trait = x;\n+   |                          ^\n+   |                          |\n+   |                          expected &dyn Trait, found struct `std::boxed::Box`\n+   |                          help: consider borrowing here: `&x`\n    |\n    = note: expected type `&dyn Trait`\n               found type `std::boxed::Box<dyn Trait>`"}, {"sha": "aee0040ef4de413f98c51077c904940351cc02b4", "filename": "src/test/ui/custom-test-frameworks-simple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fcustom-test-frameworks-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fcustom-test-frameworks-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcustom-test-frameworks-simple.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -5,7 +5,7 @@\n #![test_runner(crate::foo_runner)]\n \n #[cfg(test)]\n-fn foo_runner(ts: &[&Fn(usize)->()]) {\n+fn foo_runner(ts: &[&dyn Fn(usize)->()]) {\n     for (i, t) in ts.iter().enumerate() {\n         t(i);\n     }"}, {"sha": "6175b7df1107ad78029a5ffc4f4231a2d105a05b", "filename": "src/test/ui/cycle-trait/cycle-trait-default-type-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fcycle-trait%2Fcycle-trait-default-type-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fcycle-trait%2Fcycle-trait-default-type-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcycle-trait%2Fcycle-trait-default-type-trait.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -1,7 +1,7 @@\n // Test a cycle where a type parameter on a trait has a default that\n // again references the trait.\n \n-trait Foo<X = Box<Foo>> {\n+trait Foo<X = Box<dyn Foo>> {\n     //~^ ERROR cycle detected\n }\n "}, {"sha": "e89d25742a0acfd589c0dd0a8e8e09d3521809e1", "filename": "src/test/ui/cycle-trait/cycle-trait-default-type-trait.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fcycle-trait%2Fcycle-trait-default-type-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fcycle-trait%2Fcycle-trait-default-type-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcycle-trait%2Fcycle-trait-default-type-trait.stderr?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -1,15 +1,15 @@\n error[E0391]: cycle detected when processing `Foo::X`\n-  --> $DIR/cycle-trait-default-type-trait.rs:4:19\n+  --> $DIR/cycle-trait-default-type-trait.rs:4:23\n    |\n-LL | trait Foo<X = Box<Foo>> {\n-   |                   ^^^\n+LL | trait Foo<X = Box<dyn Foo>> {\n+   |                       ^^^\n    |\n    = note: ...which again requires processing `Foo::X`, completing the cycle\n note: cycle used when collecting item types in top-level module\n   --> $DIR/cycle-trait-default-type-trait.rs:4:1\n    |\n-LL | trait Foo<X = Box<Foo>> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^\n+LL | trait Foo<X = Box<dyn Foo>> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "71cf37ca84951a22ddff2f5aace00d3e2283dad9", "filename": "src/test/ui/destructure-trait-ref.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fdestructure-trait-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fdestructure-trait-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdestructure-trait-ref.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -18,27 +18,28 @@ fn main() {\n     // if n > m, it's a type mismatch error.\n \n     // n < m\n-    let &x = &(&1isize as &T);\n-    let &x = &&(&1isize as &T);\n-    let &&x = &&(&1isize as &T);\n+    let &x = &(&1isize as &dyn T);\n+    let &x = &&(&1isize as &dyn T);\n+    let &&x = &&(&1isize as &dyn T);\n \n     // n == m\n-    let &x = &1isize as &T;      //~ ERROR type `&dyn T` cannot be dereferenced\n-    let &&x = &(&1isize as &T);  //~ ERROR type `&dyn T` cannot be dereferenced\n-    let box x = box 1isize as Box<T>; //~ ERROR type `std::boxed::Box<dyn T>` cannot be dereferenced\n+    let &x = &1isize as &dyn T;      //~ ERROR type `&dyn T` cannot be dereferenced\n+    let &&x = &(&1isize as &dyn T);  //~ ERROR type `&dyn T` cannot be dereferenced\n+    let box x = box 1isize as Box<dyn T>;\n+    //~^ ERROR type `std::boxed::Box<dyn T>` cannot be dereferenced\n \n     // n > m\n-    let &&x = &1isize as &T;\n+    let &&x = &1isize as &dyn T;\n     //~^ ERROR mismatched types\n     //~| expected type `dyn T`\n     //~| found type `&_`\n     //~| expected trait T, found reference\n-    let &&&x = &(&1isize as &T);\n+    let &&&x = &(&1isize as &dyn T);\n     //~^ ERROR mismatched types\n     //~| expected type `dyn T`\n     //~| found type `&_`\n     //~| expected trait T, found reference\n-    let box box x = box 1isize as Box<T>;\n+    let box box x = box 1isize as Box<dyn T>;\n     //~^ ERROR mismatched types\n     //~| expected type `dyn T`\n     //~| found type `std::boxed::Box<_>`"}, {"sha": "d3ad21eb24ffb39e5c6251e3dbfd2cabe689ea66", "filename": "src/test/ui/destructure-trait-ref.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fdestructure-trait-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fdestructure-trait-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdestructure-trait-ref.stderr?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -1,25 +1,25 @@\n error[E0033]: type `&dyn T` cannot be dereferenced\n   --> $DIR/destructure-trait-ref.rs:26:9\n    |\n-LL |     let &x = &1isize as &T;\n+LL |     let &x = &1isize as &dyn T;\n    |         ^^ type `&dyn T` cannot be dereferenced\n \n error[E0033]: type `&dyn T` cannot be dereferenced\n   --> $DIR/destructure-trait-ref.rs:27:10\n    |\n-LL |     let &&x = &(&1isize as &T);\n+LL |     let &&x = &(&1isize as &dyn T);\n    |          ^^ type `&dyn T` cannot be dereferenced\n \n error[E0033]: type `std::boxed::Box<dyn T>` cannot be dereferenced\n   --> $DIR/destructure-trait-ref.rs:28:9\n    |\n-LL |     let box x = box 1isize as Box<T>;\n+LL |     let box x = box 1isize as Box<dyn T>;\n    |         ^^^^^ type `std::boxed::Box<dyn T>` cannot be dereferenced\n \n error[E0308]: mismatched types\n-  --> $DIR/destructure-trait-ref.rs:31:10\n+  --> $DIR/destructure-trait-ref.rs:32:10\n    |\n-LL |     let &&x = &1isize as &T;\n+LL |     let &&x = &1isize as &dyn T;\n    |          ^^\n    |          |\n    |          expected trait T, found reference\n@@ -29,9 +29,9 @@ LL |     let &&x = &1isize as &T;\n               found type `&_`\n \n error[E0308]: mismatched types\n-  --> $DIR/destructure-trait-ref.rs:36:11\n+  --> $DIR/destructure-trait-ref.rs:37:11\n    |\n-LL |     let &&&x = &(&1isize as &T);\n+LL |     let &&&x = &(&1isize as &dyn T);\n    |           ^^\n    |           |\n    |           expected trait T, found reference\n@@ -41,9 +41,9 @@ LL |     let &&&x = &(&1isize as &T);\n               found type `&_`\n \n error[E0308]: mismatched types\n-  --> $DIR/destructure-trait-ref.rs:41:13\n+  --> $DIR/destructure-trait-ref.rs:42:13\n    |\n-LL |     let box box x = box 1isize as Box<T>;\n+LL |     let box box x = box 1isize as Box<dyn T>;\n    |             ^^^^^ expected trait T, found struct `std::boxed::Box`\n    |\n    = note: expected type `dyn T`"}, {"sha": "095df640c38f296e3e809e0d7d431a9353385a0f", "filename": "src/test/ui/did_you_mean/E0178.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fdid_you_mean%2FE0178.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fdid_you_mean%2FE0178.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2FE0178.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -1,3 +1,5 @@\n+#![allow(bare_trait_objects)]\n+\n trait Foo {}\n \n struct Bar<'a> {"}, {"sha": "58ac6e90823f6d24ed2a8a0c12a8535cda161237", "filename": "src/test/ui/did_you_mean/E0178.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fdid_you_mean%2FE0178.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fdid_you_mean%2FE0178.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2FE0178.stderr?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -1,23 +1,23 @@\n error[E0178]: expected a path on the left-hand side of `+`, not `&'a Foo`\n-  --> $DIR/E0178.rs:4:8\n+  --> $DIR/E0178.rs:6:8\n    |\n LL |     w: &'a Foo + Copy,\n    |        ^^^^^^^^^^^^^^ help: try adding parentheses: `&'a (Foo + Copy)`\n \n error[E0178]: expected a path on the left-hand side of `+`, not `&'a Foo`\n-  --> $DIR/E0178.rs:5:8\n+  --> $DIR/E0178.rs:7:8\n    |\n LL |     x: &'a Foo + 'a,\n    |        ^^^^^^^^^^^^ help: try adding parentheses: `&'a (Foo + 'a)`\n \n error[E0178]: expected a path on the left-hand side of `+`, not `&'a mut Foo`\n-  --> $DIR/E0178.rs:6:8\n+  --> $DIR/E0178.rs:8:8\n    |\n LL |     y: &'a mut Foo + 'a,\n    |        ^^^^^^^^^^^^^^^^ help: try adding parentheses: `&'a mut (Foo + 'a)`\n \n error[E0178]: expected a path on the left-hand side of `+`, not `fn() -> Foo`\n-  --> $DIR/E0178.rs:7:8\n+  --> $DIR/E0178.rs:9:8\n    |\n LL |     z: fn() -> Foo + 'a,\n    |        ^^^^^^^^^^^^^^^^ perhaps you forgot parentheses?"}, {"sha": "fccfb7911cecf5636db62ca774f0ba902ef7d3fc", "filename": "src/test/ui/did_you_mean/bad-assoc-ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -24,7 +24,7 @@ type F = &'static (u8)::AssocTy;\n \n // Qualified paths cannot appear in bounds, so the recovery\n // should apply to the whole sum and not `(Send)`.\n-type G = 'static + (Send)::AssocTy;\n+type G = dyn 'static + (Send)::AssocTy;\n //~^ ERROR missing angle brackets in associated item path\n //~| ERROR ambiguous associated type\n "}, {"sha": "0ae64edcc0546584e6541c4098bf50b547f5daf9", "filename": "src/test/ui/did_you_mean/bad-assoc-ty.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.stderr?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -37,8 +37,8 @@ LL | type F = &'static (u8)::AssocTy;\n error: missing angle brackets in associated item path\n   --> $DIR/bad-assoc-ty.rs:27:10\n    |\n-LL | type G = 'static + (Send)::AssocTy;\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `<'static + (Send)>::AssocTy`\n+LL | type G = dyn 'static + (Send)::AssocTy;\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `<dyn 'static + (Send)>::AssocTy`\n \n error: missing angle brackets in associated item path\n   --> $DIR/bad-assoc-ty.rs:44:10\n@@ -94,8 +94,8 @@ LL | type F = &'static (u8)::AssocTy;\n error[E0223]: ambiguous associated type\n   --> $DIR/bad-assoc-ty.rs:27:10\n    |\n-LL | type G = 'static + (Send)::AssocTy;\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^^^ help: use fully-qualified syntax: `<(dyn std::marker::Send + 'static) as Trait>::AssocTy`\n+LL | type G = dyn 'static + (Send)::AssocTy;\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use fully-qualified syntax: `<(dyn std::marker::Send + 'static) as Trait>::AssocTy`\n \n error[E0223]: ambiguous associated type\n   --> $DIR/bad-assoc-ty.rs:33:10"}, {"sha": "a1184f757e2abe82d0bd514c80d8c5335b155d6e", "filename": "src/test/ui/did_you_mean/issue-40006.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -1,4 +1,4 @@\n-impl X { //~ ERROR cannot be made into an object\n+impl dyn X { //~ ERROR cannot be made into an object\n //~^ ERROR missing\n     Y\n }"}, {"sha": "87e48cd1e1cd9dddf3a8ff1db19157749ec30b44", "filename": "src/test/ui/did_you_mean/issue-40006.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.stderr?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -1,8 +1,8 @@\n error: missing `fn`, `type`, or `const` for impl-item declaration\n-  --> $DIR/issue-40006.rs:1:9\n+  --> $DIR/issue-40006.rs:1:13\n    |\n-LL |   impl X {\n-   |  _________^\n+LL |   impl dyn X {\n+   |  _____________^\n LL | |\n LL | |     Y\n    | |____^ missing `fn`, `type`, or `const`\n@@ -59,8 +59,8 @@ LL |     pub hello_method(&self) {\n error[E0038]: the trait `X` cannot be made into an object\n   --> $DIR/issue-40006.rs:1:6\n    |\n-LL | impl X {\n-   |      ^ the trait `X` cannot be made into an object\n+LL | impl dyn X {\n+   |      ^^^^^ the trait `X` cannot be made into an object\n    |\n    = note: method `xxx` has no receiver\n "}, {"sha": "c9a097d3610a12eb0f001c7fec3d0363c3bb7336", "filename": "src/test/ui/did_you_mean/trait-object-reference-without-parens-suggestion.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fdid_you_mean%2Ftrait-object-reference-without-parens-suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fdid_you_mean%2Ftrait-object-reference-without-parens-suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Ftrait-object-reference-without-parens-suggestion.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -1,3 +1,5 @@\n+#![allow(bare_trait_objects)]\n+\n fn main() {\n     let _: &Copy + 'static; //~ ERROR expected a path\n     //~^ ERROR cannot be made into an object"}, {"sha": "8c6c33b11865b38ab114f727ba5e18dc971e3478", "filename": "src/test/ui/did_you_mean/trait-object-reference-without-parens-suggestion.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fdid_you_mean%2Ftrait-object-reference-without-parens-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fdid_you_mean%2Ftrait-object-reference-without-parens-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Ftrait-object-reference-without-parens-suggestion.stderr?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -1,17 +1,17 @@\n error[E0178]: expected a path on the left-hand side of `+`, not `&Copy`\n-  --> $DIR/trait-object-reference-without-parens-suggestion.rs:2:12\n+  --> $DIR/trait-object-reference-without-parens-suggestion.rs:4:12\n    |\n LL |     let _: &Copy + 'static;\n    |            ^^^^^^^^^^^^^^^ help: try adding parentheses: `&(Copy + 'static)`\n \n error[E0178]: expected a path on the left-hand side of `+`, not `&'static Copy`\n-  --> $DIR/trait-object-reference-without-parens-suggestion.rs:4:12\n+  --> $DIR/trait-object-reference-without-parens-suggestion.rs:6:12\n    |\n LL |     let _: &'static Copy + 'static;\n    |            ^^^^^^^^^^^^^^^^^^^^^^^ help: try adding parentheses: `&'static (Copy + 'static)`\n \n error[E0038]: the trait `std::marker::Copy` cannot be made into an object\n-  --> $DIR/trait-object-reference-without-parens-suggestion.rs:2:12\n+  --> $DIR/trait-object-reference-without-parens-suggestion.rs:4:12\n    |\n LL |     let _: &Copy + 'static;\n    |            ^^^^^ the trait `std::marker::Copy` cannot be made into an object"}, {"sha": "bea77dc9f5c4fdabaea3d8bd818502345a4d5e48", "filename": "src/test/ui/dropck/dropck_trait_cycle_checked.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fdropck%2Fdropck_trait_cycle_checked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fdropck%2Fdropck_trait_cycle_checked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck_trait_cycle_checked.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -63,14 +63,14 @@ impl<T:HasId> Drop for CheckId<T> {\n }\n \n trait Obj<'a> : HasId {\n-    fn set0(&self, b: &'a Box<Obj<'a>>);\n-    fn set1(&self, b: &'a Box<Obj<'a>>);\n+    fn set0(&self, b: &'a Box<dyn Obj<'a>>);\n+    fn set1(&self, b: &'a Box<dyn Obj<'a>>);\n }\n \n struct O<'a> {\n     id: Id,\n-    obj0: CheckId<Cell<Option<&'a Box<Obj<'a>>>>>,\n-    obj1: CheckId<Cell<Option<&'a Box<Obj<'a>>>>>,\n+    obj0: CheckId<Cell<Option<&'a Box<dyn Obj<'a>>>>>,\n+    obj1: CheckId<Cell<Option<&'a Box<dyn Obj<'a>>>>>,\n }\n \n impl<'a> HasId for O<'a> {\n@@ -87,7 +87,7 @@ impl<'a> O<'a> {\n     }\n }\n \n-impl<'a> HasId for Cell<Option<&'a Box<Obj<'a>>>> {\n+impl<'a> HasId for Cell<Option<&'a Box<dyn Obj<'a>>>> {\n     fn count(&self) -> usize {\n         match self.get() {\n             None => 1,\n@@ -97,17 +97,17 @@ impl<'a> HasId for Cell<Option<&'a Box<Obj<'a>>>> {\n }\n \n impl<'a> Obj<'a> for O<'a> {\n-    fn set0(&self, b: &'a Box<Obj<'a>>) {\n+    fn set0(&self, b: &'a Box<dyn Obj<'a>>) {\n         self.obj0.v.set(Some(b))\n     }\n-    fn set1(&self, b: &'a Box<Obj<'a>>) {\n+    fn set1(&self, b: &'a Box<dyn Obj<'a>>) {\n         self.obj1.v.set(Some(b))\n     }\n }\n \n \n fn f() {\n-    let (o1, o2, o3): (Box<Obj>, Box<Obj>, Box<Obj>) = (O::new(), O::new(), O::new());\n+    let (o1, o2, o3): (Box<dyn Obj>, Box<dyn Obj>, Box<dyn Obj>) = (O::new(), O::new(), O::new());\n     o1.set0(&o2); //~ ERROR `o2` does not live long enough\n     o1.set1(&o3); //~ ERROR `o3` does not live long enough\n     o2.set0(&o2); //~ ERROR `o2` does not live long enough"}, {"sha": "1e779208e58a5cdcc3221a9533500b32d040f86b", "filename": "src/test/ui/dropck/dropck_trait_cycle_checked.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fdropck%2Fdropck_trait_cycle_checked.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fdropck%2Fdropck_trait_cycle_checked.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck_trait_cycle_checked.stderr?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -1,8 +1,8 @@\n error[E0597]: `o2` does not live long enough\n   --> $DIR/dropck_trait_cycle_checked.rs:111:13\n    |\n-LL |     let (o1, o2, o3): (Box<Obj>, Box<Obj>, Box<Obj>) = (O::new(), O::new(), O::new());\n-   |                                                                   -------- cast requires that `o2` is borrowed for `'static`\n+LL |     let (o1, o2, o3): (Box<dyn Obj>, Box<dyn Obj>, Box<dyn Obj>) = (O::new(), O::new(), O::new());\n+   |                                                                               -------- cast requires that `o2` is borrowed for `'static`\n LL |     o1.set0(&o2);\n    |             ^^^ borrowed value does not live long enough\n ...\n@@ -12,8 +12,8 @@ LL | }\n error[E0597]: `o3` does not live long enough\n   --> $DIR/dropck_trait_cycle_checked.rs:112:13\n    |\n-LL |     let (o1, o2, o3): (Box<Obj>, Box<Obj>, Box<Obj>) = (O::new(), O::new(), O::new());\n-   |                                                                             -------- cast requires that `o3` is borrowed for `'static`\n+LL |     let (o1, o2, o3): (Box<dyn Obj>, Box<dyn Obj>, Box<dyn Obj>) = (O::new(), O::new(), O::new());\n+   |                                                                                         -------- cast requires that `o3` is borrowed for `'static`\n LL |     o1.set0(&o2);\n LL |     o1.set1(&o3);\n    |             ^^^ borrowed value does not live long enough\n@@ -24,8 +24,8 @@ LL | }\n error[E0597]: `o2` does not live long enough\n   --> $DIR/dropck_trait_cycle_checked.rs:113:13\n    |\n-LL |     let (o1, o2, o3): (Box<Obj>, Box<Obj>, Box<Obj>) = (O::new(), O::new(), O::new());\n-   |                                                                   -------- cast requires that `o2` is borrowed for `'static`\n+LL |     let (o1, o2, o3): (Box<dyn Obj>, Box<dyn Obj>, Box<dyn Obj>) = (O::new(), O::new(), O::new());\n+   |                                                                               -------- cast requires that `o2` is borrowed for `'static`\n ...\n LL |     o2.set0(&o2);\n    |             ^^^ borrowed value does not live long enough\n@@ -36,8 +36,8 @@ LL | }\n error[E0597]: `o3` does not live long enough\n   --> $DIR/dropck_trait_cycle_checked.rs:114:13\n    |\n-LL |     let (o1, o2, o3): (Box<Obj>, Box<Obj>, Box<Obj>) = (O::new(), O::new(), O::new());\n-   |                                                                             -------- cast requires that `o3` is borrowed for `'static`\n+LL |     let (o1, o2, o3): (Box<dyn Obj>, Box<dyn Obj>, Box<dyn Obj>) = (O::new(), O::new(), O::new());\n+   |                                                                                         -------- cast requires that `o3` is borrowed for `'static`\n ...\n LL |     o2.set1(&o3);\n    |             ^^^ borrowed value does not live long enough\n@@ -48,8 +48,8 @@ LL | }\n error[E0597]: `o1` does not live long enough\n   --> $DIR/dropck_trait_cycle_checked.rs:115:13\n    |\n-LL |     let (o1, o2, o3): (Box<Obj>, Box<Obj>, Box<Obj>) = (O::new(), O::new(), O::new());\n-   |                                                         -------- cast requires that `o1` is borrowed for `'static`\n+LL |     let (o1, o2, o3): (Box<dyn Obj>, Box<dyn Obj>, Box<dyn Obj>) = (O::new(), O::new(), O::new());\n+   |                                                                     -------- cast requires that `o1` is borrowed for `'static`\n ...\n LL |     o3.set0(&o1);\n    |             ^^^ borrowed value does not live long enough\n@@ -60,8 +60,8 @@ LL | }\n error[E0597]: `o2` does not live long enough\n   --> $DIR/dropck_trait_cycle_checked.rs:116:13\n    |\n-LL |     let (o1, o2, o3): (Box<Obj>, Box<Obj>, Box<Obj>) = (O::new(), O::new(), O::new());\n-   |                                                                   -------- cast requires that `o2` is borrowed for `'static`\n+LL |     let (o1, o2, o3): (Box<dyn Obj>, Box<dyn Obj>, Box<dyn Obj>) = (O::new(), O::new(), O::new());\n+   |                                                                               -------- cast requires that `o2` is borrowed for `'static`\n ...\n LL |     o3.set1(&o2);\n    |             ^^^ borrowed value does not live long enough"}, {"sha": "7ba31bf2e517283572626c1b92937f299f923f05", "filename": "src/test/ui/dst/dst-bad-assign-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign-2.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -30,8 +30,8 @@ impl ToBar for Bar1 {\n \n pub fn main() {\n     // Assignment.\n-    let f5: &mut Fat<ToBar> = &mut Fat { f1: 5, f2: \"some str\", ptr: Bar1 {f :42} };\n-    let z: Box<ToBar> = Box::new(Bar1 {f: 36});\n+    let f5: &mut Fat<dyn ToBar> = &mut Fat { f1: 5, f2: \"some str\", ptr: Bar1 {f :42} };\n+    let z: Box<dyn ToBar> = Box::new(Bar1 {f: 36});\n     f5.ptr = *z;\n     //~^ ERROR the size for values of type\n "}, {"sha": "691909a2317431938b20ac248aa3bbb1f160994b", "filename": "src/test/ui/dst/dst-bad-assign-3.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413790186c65e782e2c0183e933686f7bf35e158/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign-3.rs?ref=413790186c65e782e2c0183e933686f7bf35e158", "patch": "@@ -28,8 +28,8 @@ impl ToBar for Bar1 {\n \n pub fn main() {\n     // Assignment.\n-    let f5: &mut Fat<ToBar> = &mut (5, \"some str\", Bar1 {f :42});\n-    let z: Box<ToBar> = Box::new(Bar1 {f: 36});\n+    let f5: &mut Fat<dyn ToBar> = &mut (5, \"some str\", Bar1 {f :42});\n+    let z: Box<dyn ToBar> = Box::new(Bar1 {f: 36});\n     f5.2 = Bar1 {f: 36};\n     //~^ ERROR mismatched types\n     //~| expected type `dyn ToBar`"}]}