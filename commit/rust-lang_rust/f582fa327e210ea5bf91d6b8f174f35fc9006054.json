{"sha": "f582fa327e210ea5bf91d6b8f174f35fc9006054", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1ODJmYTMyN2UyMTBlYTViZjkxZDZiOGYxNzRmMzVmYzkwMDYwNTQ=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-08-20T03:28:35Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-09-01T22:30:26Z"}, "message": "item_like_imports: Allow multiple glob imports of the same item.", "tree": {"sha": "f5ffd57f363aef3e3eda96ef8d815cd649434c0c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f5ffd57f363aef3e3eda96ef8d815cd649434c0c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f582fa327e210ea5bf91d6b8f174f35fc9006054", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f582fa327e210ea5bf91d6b8f174f35fc9006054", "html_url": "https://github.com/rust-lang/rust/commit/f582fa327e210ea5bf91d6b8f174f35fc9006054", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f582fa327e210ea5bf91d6b8f174f35fc9006054/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "245a0c5530f8d4d251bcef2d7b8de2fa19f442bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/245a0c5530f8d4d251bcef2d7b8de2fa19f442bf", "html_url": "https://github.com/rust-lang/rust/commit/245a0c5530f8d4d251bcef2d7b8de2fa19f442bf"}], "stats": {"total": 58, "additions": 53, "deletions": 5}, "files": [{"sha": "495bdcb7dfd2ade94c9445228fdb35c32954dd05", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f582fa327e210ea5bf91d6b8f174f35fc9006054/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f582fa327e210ea5bf91d6b8f174f35fc9006054/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=f582fa327e210ea5bf91d6b8f174f35fc9006054", "patch": "@@ -317,10 +317,17 @@ impl<'a> Resolver<'a> {\n         where T: ToNameBinding<'a>\n     {\n         let binding = self.arenas.alloc_name_binding(binding.to_name_binding());\n-        self.update_resolution(module, name, ns, |_, resolution| {\n+        self.update_resolution(module, name, ns, |this, resolution| {\n             if let Some(old_binding) = resolution.binding {\n                 if binding.is_glob_import() {\n-                    resolution.duplicate_globs.push(binding);\n+                    if !this.new_import_semantics || !old_binding.is_glob_import() {\n+                        resolution.duplicate_globs.push(binding);\n+                    } else if binding.def() != old_binding.def() {\n+                        resolution.duplicate_globs.push(binding);\n+                    } else if !old_binding.vis.is_at_least(binding.vis, this) {\n+                        // We are glob-importing the same item but with greater visibility.\n+                        resolution.binding = Some(binding);\n+                    }\n                 } else if old_binding.is_glob_import() {\n                     resolution.duplicate_globs.push(old_binding);\n                     resolution.binding = Some(binding);\n@@ -344,14 +351,17 @@ impl<'a> Resolver<'a> {\n         // during which the resolution might end up getting re-defined via a glob cycle.\n         let (binding, t) = {\n             let mut resolution = &mut *self.resolution(module, name, ns).borrow_mut();\n-            let was_known = resolution.binding().is_some();\n+            let old_binding = resolution.binding();\n \n             let t = f(self, resolution);\n \n-            if was_known { return t; }\n             match resolution.binding() {\n-                Some(binding) => (binding, t),\n+                _ if !self.new_import_semantics && old_binding.is_some() => return t,\n                 None => return t,\n+                Some(binding) => match old_binding {\n+                    Some(old_binding) if old_binding as *const _ == binding as *const _ => return t,\n+                    _ => (binding, t),\n+                }\n             }\n         };\n "}, {"sha": "0b5963dd8931544411c0f6efd03bbe03a1089823", "filename": "src/test/compile-fail/imports/duplicate.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/f582fa327e210ea5bf91d6b8f174f35fc9006054/src%2Ftest%2Fcompile-fail%2Fimports%2Fduplicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f582fa327e210ea5bf91d6b8f174f35fc9006054/src%2Ftest%2Fcompile-fail%2Fimports%2Fduplicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimports%2Fduplicate.rs?ref=f582fa327e210ea5bf91d6b8f174f35fc9006054", "patch": "@@ -0,0 +1,38 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(item_like_imports)]\n+\n+mod a {\n+    pub fn foo() {}\n+}\n+\n+mod b {\n+    pub fn foo() {}\n+}\n+\n+mod c {\n+    pub use a::foo;\n+}\n+\n+mod d {\n+    use a::foo; //~ NOTE previous import\n+    use a::foo; //~ ERROR `foo` has already been imported\n+                //~| NOTE already imported\n+}\n+\n+mod e {\n+    pub use a::*;\n+    pub use c::*; // ok\n+}\n+\n+fn main() {\n+    e::foo();\n+}"}]}