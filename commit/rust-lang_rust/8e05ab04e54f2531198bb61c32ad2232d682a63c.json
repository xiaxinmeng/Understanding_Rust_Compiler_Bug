{"sha": "8e05ab04e54f2531198bb61c32ad2232d682a63c", "node_id": "C_kwDOAAsO6NoAKDhlMDVhYjA0ZTU0ZjI1MzExOThiYjYxYzMyYWQyMjMyZDY4MmE2M2M", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-02-05T12:08:42Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-02-05T12:08:42Z"}, "message": "Run SROA to fixpoint.", "tree": {"sha": "49b3a1d580aede5372672bde86aafab7b9b47088", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/49b3a1d580aede5372672bde86aafab7b9b47088"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e05ab04e54f2531198bb61c32ad2232d682a63c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e05ab04e54f2531198bb61c32ad2232d682a63c", "html_url": "https://github.com/rust-lang/rust/commit/8e05ab04e54f2531198bb61c32ad2232d682a63c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e05ab04e54f2531198bb61c32ad2232d682a63c/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42c95146294c7773ca03e91e945fd545c6ce1ba2", "url": "https://api.github.com/repos/rust-lang/rust/commits/42c95146294c7773ca03e91e945fd545c6ce1ba2", "html_url": "https://github.com/rust-lang/rust/commit/42c95146294c7773ca03e91e945fd545c6ce1ba2"}], "stats": {"total": 145, "additions": 78, "deletions": 67}, "files": [{"sha": "8bf6493be4b0168ba6e78d8be9d0cbb7c038382c", "filename": "compiler/rustc_mir_dataflow/src/value_analysis.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e05ab04e54f2531198bb61c32ad2232d682a63c/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e05ab04e54f2531198bb61c32ad2232d682a63c/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs?ref=8e05ab04e54f2531198bb61c32ad2232d682a63c", "patch": "@@ -824,7 +824,7 @@ pub fn iter_fields<'tcx>(\n }\n \n /// Returns all locals with projections that have their reference or address taken.\n-fn excluded_locals(body: &Body<'_>) -> IndexVec<Local, bool> {\n+pub fn excluded_locals(body: &Body<'_>) -> IndexVec<Local, bool> {\n     struct Collector {\n         result: IndexVec<Local, bool>,\n     }"}, {"sha": "28963c77aa55f0a8460bde9093a2fbe067de79c4", "filename": "compiler/rustc_mir_transform/src/sroa.rs", "status": "modified", "additions": 33, "deletions": 41, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/8e05ab04e54f2531198bb61c32ad2232d682a63c/compiler%2Frustc_mir_transform%2Fsrc%2Fsroa.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e05ab04e54f2531198bb61c32ad2232d682a63c/compiler%2Frustc_mir_transform%2Fsrc%2Fsroa.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fsroa.rs?ref=8e05ab04e54f2531198bb61c32ad2232d682a63c", "patch": "@@ -6,7 +6,7 @@ use rustc_middle::mir::patch::MirPatch;\n use rustc_middle::mir::visit::*;\n use rustc_middle::mir::*;\n use rustc_middle::ty::TyCtxt;\n-use rustc_mir_dataflow::value_analysis::iter_fields;\n+use rustc_mir_dataflow::value_analysis::{excluded_locals, iter_fields};\n \n pub struct ScalarReplacementOfAggregates;\n \n@@ -18,26 +18,38 @@ impl<'tcx> MirPass<'tcx> for ScalarReplacementOfAggregates {\n     #[instrument(level = \"debug\", skip(self, tcx, body))]\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n         debug!(def_id = ?body.source.def_id());\n-        let escaping = escaping_locals(&*body);\n-        debug!(?escaping);\n-        let replacements = compute_flattening(tcx, body, escaping);\n-        debug!(?replacements);\n-        replace_flattened_locals(tcx, body, replacements);\n+        let mut excluded = excluded_locals(body);\n+        loop {\n+            debug!(?excluded);\n+            let escaping = escaping_locals(&excluded, body);\n+            debug!(?escaping);\n+            let replacements = compute_flattening(tcx, body, escaping);\n+            debug!(?replacements);\n+            let all_dead_locals = replace_flattened_locals(tcx, body, replacements);\n+            if !all_dead_locals.is_empty() && tcx.sess.mir_opt_level() >= 4 {\n+                for local in excluded.indices() {\n+                    excluded[local] |= all_dead_locals.contains(local) ;\n+                }\n+                excluded.raw.resize(body.local_decls.len(), false);\n+            } else {\n+                break\n+            }\n+        }\n     }\n }\n \n /// Identify all locals that are not eligible for SROA.\n ///\n /// There are 3 cases:\n-/// - the aggegated local is used or passed to other code (function parameters and arguments);\n+/// - the aggregated local is used or passed to other code (function parameters and arguments);\n /// - the locals is a union or an enum;\n /// - the local's address is taken, and thus the relative addresses of the fields are observable to\n ///   client code.\n-fn escaping_locals(body: &Body<'_>) -> BitSet<Local> {\n+fn escaping_locals(excluded: &IndexVec<Local, bool>, body: &Body<'_>) -> BitSet<Local> {\n     let mut set = BitSet::new_empty(body.local_decls.len());\n     set.insert_range(RETURN_PLACE..=Local::from_usize(body.arg_count));\n     for (local, decl) in body.local_decls().iter_enumerated() {\n-        if decl.ty.is_union() || decl.ty.is_enum() {\n+        if decl.ty.is_union() || decl.ty.is_enum() || excluded[local] {\n             set.insert(local);\n         }\n     }\n@@ -62,17 +74,6 @@ fn escaping_locals(body: &Body<'_>) -> BitSet<Local> {\n             self.super_place(place, context, location);\n         }\n \n-        fn visit_rvalue(&mut self, rvalue: &Rvalue<'tcx>, location: Location) {\n-            if let Rvalue::AddressOf(.., place) | Rvalue::Ref(.., place) = rvalue {\n-                if !place.is_indirect() {\n-                    // Raw pointers may be used to access anything inside the enclosing place.\n-                    self.set.insert(place.local);\n-                    return;\n-                }\n-            }\n-            self.super_rvalue(rvalue, location)\n-        }\n-\n         fn visit_assign(\n             &mut self,\n             lvalue: &Place<'tcx>,\n@@ -102,21 +103,6 @@ fn escaping_locals(body: &Body<'_>) -> BitSet<Local> {\n             }\n         }\n \n-        fn visit_terminator(&mut self, terminator: &Terminator<'tcx>, location: Location) {\n-            // Drop implicitly calls `drop_in_place`, which takes a `&mut`.\n-            // This implies that `Drop` implicitly takes the address of the place.\n-            if let TerminatorKind::Drop { place, .. }\n-            | TerminatorKind::DropAndReplace { place, .. } = terminator.kind\n-            {\n-                if !place.is_indirect() {\n-                    // Raw pointers may be used to access anything inside the enclosing place.\n-                    self.set.insert(place.local);\n-                    return;\n-                }\n-            }\n-            self.super_terminator(terminator, location);\n-        }\n-\n         // We ignore anything that happens in debuginfo, since we expand it using\n         // `VarDebugInfoContents::Composite`.\n         fn visit_var_debug_info(&mut self, _: &VarDebugInfo<'tcx>) {}\n@@ -198,14 +184,14 @@ fn replace_flattened_locals<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     body: &mut Body<'tcx>,\n     replacements: ReplacementMap<'tcx>,\n-) {\n+) -> BitSet<Local> {\n     let mut all_dead_locals = BitSet::new_empty(body.local_decls.len());\n     for p in replacements.fields.keys() {\n         all_dead_locals.insert(p.local);\n     }\n     debug!(?all_dead_locals);\n     if all_dead_locals.is_empty() {\n-        return;\n+        return all_dead_locals;\n     }\n \n     let mut visitor = ReplacementVisitor {\n@@ -227,7 +213,9 @@ fn replace_flattened_locals<'tcx>(\n     for var_debug_info in &mut body.var_debug_info {\n         visitor.visit_var_debug_info(var_debug_info);\n     }\n-    visitor.patch.apply(body);\n+    let ReplacementVisitor { patch, all_dead_locals, .. } = visitor;\n+    patch.apply(body);\n+    all_dead_locals\n }\n \n struct ReplacementVisitor<'tcx, 'll> {\n@@ -361,6 +349,7 @@ impl<'tcx, 'll> MutVisitor<'tcx> for ReplacementVisitor<'tcx, 'll> {\n         }\n     }\n \n+    #[instrument(level = \"trace\", skip(self))]\n     fn visit_var_debug_info(&mut self, var_debug_info: &mut VarDebugInfo<'tcx>) {\n         match &mut var_debug_info.value {\n             VarDebugInfoContents::Place(ref mut place) => {\n@@ -375,11 +364,12 @@ impl<'tcx, 'll> MutVisitor<'tcx> for ReplacementVisitor<'tcx, 'll> {\n             }\n             VarDebugInfoContents::Composite { ty: _, ref mut fragments } => {\n                 let mut new_fragments = Vec::new();\n+                debug!(?fragments);\n                 fragments\n                     .drain_filter(|fragment| {\n                         if let Some(repl) = self.replace_place(fragment.contents.as_ref()) {\n                             fragment.contents = repl;\n-                            true\n+                            false\n                         } else if let Some(frg) = self\n                             .replacements\n                             .gather_debug_info_fragments(fragment.contents.as_ref())\n@@ -388,12 +378,14 @@ impl<'tcx, 'll> MutVisitor<'tcx> for ReplacementVisitor<'tcx, 'll> {\n                                 f.projection.splice(0..0, fragment.projection.iter().copied());\n                                 f\n                             }));\n-                            false\n-                        } else {\n                             true\n+                        } else {\n+                            false\n                         }\n                     })\n                     .for_each(drop);\n+                debug!(?fragments);\n+                debug!(?new_fragments);\n                 fragments.extend(new_fragments);\n             }\n             VarDebugInfoContents::Const(_) => {}"}, {"sha": "d088c4f662b7b21ab64582b7507623fb7a124bd1", "filename": "tests/mir-opt/const_prop/mutable_variable_aggregate.main.ConstProp.diff", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/8e05ab04e54f2531198bb61c32ad2232d682a63c/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/8e05ab04e54f2531198bb61c32ad2232d682a63c/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate.main.ConstProp.diff?ref=8e05ab04e54f2531198bb61c32ad2232d682a63c", "patch": "@@ -3,30 +3,27 @@\n   \n   fn main() -> () {\n       let mut _0: ();                      // return place in scope 0 at $DIR/mutable_variable_aggregate.rs:+0:11: +0:11\n-      let mut _1: (i32, i32);              // in scope 0 at $DIR/mutable_variable_aggregate.rs:+1:9: +1:14\n+      let mut _3: i32;                     // in scope 0 at $DIR/mutable_variable_aggregate.rs:+1:9: +1:14\n+      let mut _4: i32;                     // in scope 0 at $DIR/mutable_variable_aggregate.rs:+1:9: +1:14\n       scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/mutable_variable_aggregate.rs:+1:9: +1:14\n+          debug x => (i32, i32){ .0 => _3, .1 => _4, }; // in scope 1 at $DIR/mutable_variable_aggregate.rs:+1:9: +1:14\n+          let _1: i32;                     // in scope 1 at $DIR/mutable_variable_aggregate.rs:+3:9: +3:10\n           let _2: i32;                     // in scope 1 at $DIR/mutable_variable_aggregate.rs:+3:9: +3:10\n-          let _3: i32;                     // in scope 1 at $DIR/mutable_variable_aggregate.rs:+3:9: +3:10\n           scope 2 {\n-              debug y => (i32, i32){ .0 => _2, .1 => _3, }; // in scope 2 at $DIR/mutable_variable_aggregate.rs:+3:9: +3:10\n+              debug y => (i32, i32){ .0 => _3, .1 => _2, }; // in scope 2 at $DIR/mutable_variable_aggregate.rs:+3:9: +3:10\n           }\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/mutable_variable_aggregate.rs:+1:9: +1:14\n--         _1 = (const 42_i32, const 43_i32); // scope 0 at $DIR/mutable_variable_aggregate.rs:+1:17: +1:25\n-+         _1 = const (42_i32, 43_i32);     // scope 0 at $DIR/mutable_variable_aggregate.rs:+1:17: +1:25\n-          (_1.1: i32) = const 99_i32;      // scope 1 at $DIR/mutable_variable_aggregate.rs:+2:5: +2:13\n+          StorageLive(_4);                 // scope 0 at $DIR/mutable_variable_aggregate.rs:+1:9: +1:14\n+          _3 = const 42_i32;               // scope 0 at $DIR/mutable_variable_aggregate.rs:+1:17: +1:25\n+          _4 = const 43_i32;               // scope 0 at $DIR/mutable_variable_aggregate.rs:+1:17: +1:25\n+          _4 = const 99_i32;               // scope 1 at $DIR/mutable_variable_aggregate.rs:+2:5: +2:13\n           StorageLive(_2);                 // scope 1 at $DIR/mutable_variable_aggregate.rs:+3:9: +3:10\n-          StorageLive(_3);                 // scope 1 at $DIR/mutable_variable_aggregate.rs:+3:9: +3:10\n--         _2 = (_1.0: i32);                // scope 1 at $DIR/mutable_variable_aggregate.rs:+3:13: +3:14\n--         _3 = (_1.1: i32);                // scope 1 at $DIR/mutable_variable_aggregate.rs:+3:13: +3:14\n-+         _2 = const 42_i32;               // scope 1 at $DIR/mutable_variable_aggregate.rs:+3:13: +3:14\n-+         _3 = const 99_i32;               // scope 1 at $DIR/mutable_variable_aggregate.rs:+3:13: +3:14\n+-         _2 = _4;                         // scope 1 at $DIR/mutable_variable_aggregate.rs:+3:13: +3:14\n++         _2 = const 99_i32;               // scope 1 at $DIR/mutable_variable_aggregate.rs:+3:13: +3:14\n           StorageDead(_2);                 // scope 1 at $DIR/mutable_variable_aggregate.rs:+4:1: +4:2\n-          StorageDead(_3);                 // scope 1 at $DIR/mutable_variable_aggregate.rs:+4:1: +4:2\n-          StorageDead(_1);                 // scope 0 at $DIR/mutable_variable_aggregate.rs:+4:1: +4:2\n+          StorageDead(_4);                 // scope 0 at $DIR/mutable_variable_aggregate.rs:+4:1: +4:2\n           return;                          // scope 0 at $DIR/mutable_variable_aggregate.rs:+4:2: +4:2\n       }\n   }"}, {"sha": "976f6d44b7521610e382b76586dfb740cb5ca0fa", "filename": "tests/mir-opt/sroa.copies.ScalarReplacementOfAggregates.diff", "status": "modified", "additions": 32, "deletions": 10, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/8e05ab04e54f2531198bb61c32ad2232d682a63c/tests%2Fmir-opt%2Fsroa.copies.ScalarReplacementOfAggregates.diff", "raw_url": "https://github.com/rust-lang/rust/raw/8e05ab04e54f2531198bb61c32ad2232d682a63c/tests%2Fmir-opt%2Fsroa.copies.ScalarReplacementOfAggregates.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsroa.copies.ScalarReplacementOfAggregates.diff?ref=8e05ab04e54f2531198bb61c32ad2232d682a63c", "patch": "@@ -5,8 +5,13 @@\n       debug x => _1;                       // in scope 0 at $DIR/sroa.rs:+0:11: +0:12\n       let mut _0: ();                      // return place in scope 0 at $DIR/sroa.rs:+0:19: +0:19\n       let _2: Foo;                         // in scope 0 at $DIR/sroa.rs:+1:9: +1:10\n++     let _11: u8;                         // in scope 0 at $DIR/sroa.rs:+1:9: +1:10\n++     let _12: ();                         // in scope 0 at $DIR/sroa.rs:+1:9: +1:10\n++     let _13: &str;                       // in scope 0 at $DIR/sroa.rs:+1:9: +1:10\n++     let _14: std::option::Option<isize>; // in scope 0 at $DIR/sroa.rs:+1:9: +1:10\n       scope 1 {\n-          debug y => _2;                   // in scope 1 at $DIR/sroa.rs:+1:9: +1:10\n+-         debug y => _2;                   // in scope 1 at $DIR/sroa.rs:+1:9: +1:10\n++         debug y => Foo{ .0 => _11, .1 => _12, .2 => _13, .3 => _14, }; // in scope 1 at $DIR/sroa.rs:+1:9: +1:10\n           let _3: u8;                      // in scope 1 at $DIR/sroa.rs:+2:9: +2:10\n           scope 2 {\n               debug t => _3;               // in scope 2 at $DIR/sroa.rs:+2:9: +2:10\n@@ -31,23 +36,35 @@\n       }\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/sroa.rs:+1:9: +1:10\n-          _2 = _1;                         // scope 0 at $DIR/sroa.rs:+1:13: +1:14\n+-         StorageLive(_2);                 // scope 0 at $DIR/sroa.rs:+1:9: +1:10\n+-         _2 = _1;                         // scope 0 at $DIR/sroa.rs:+1:13: +1:14\n++         StorageLive(_11);                // scope 0 at $DIR/sroa.rs:+1:9: +1:10\n++         StorageLive(_12);                // scope 0 at $DIR/sroa.rs:+1:9: +1:10\n++         StorageLive(_13);                // scope 0 at $DIR/sroa.rs:+1:9: +1:10\n++         StorageLive(_14);                // scope 0 at $DIR/sroa.rs:+1:9: +1:10\n++         nop;                             // scope 0 at $DIR/sroa.rs:+1:9: +1:10\n++         _11 = (_1.0: u8);                // scope 0 at $DIR/sroa.rs:+1:13: +1:14\n++         _12 = (_1.1: ());                // scope 0 at $DIR/sroa.rs:+1:13: +1:14\n++         _13 = (_1.2: &str);              // scope 0 at $DIR/sroa.rs:+1:13: +1:14\n++         _14 = (_1.3: std::option::Option<isize>); // scope 0 at $DIR/sroa.rs:+1:13: +1:14\n++         nop;                             // scope 0 at $DIR/sroa.rs:+1:13: +1:14\n           StorageLive(_3);                 // scope 1 at $DIR/sroa.rs:+2:9: +2:10\n-          _3 = (_2.0: u8);                 // scope 1 at $DIR/sroa.rs:+2:13: +2:16\n+-         _3 = (_2.0: u8);                 // scope 1 at $DIR/sroa.rs:+2:13: +2:16\n++         _3 = _11;                        // scope 1 at $DIR/sroa.rs:+2:13: +2:16\n           StorageLive(_4);                 // scope 2 at $DIR/sroa.rs:+3:9: +3:10\n-          _4 = (_2.2: &str);               // scope 2 at $DIR/sroa.rs:+3:13: +3:16\n+-         _4 = (_2.2: &str);               // scope 2 at $DIR/sroa.rs:+3:13: +3:16\n -         StorageLive(_5);                 // scope 3 at $DIR/sroa.rs:+4:9: +4:10\n -         _5 = _2;                         // scope 3 at $DIR/sroa.rs:+4:13: +4:14\n++         _4 = _13;                        // scope 2 at $DIR/sroa.rs:+3:13: +3:16\n +         StorageLive(_7);                 // scope 3 at $DIR/sroa.rs:+4:9: +4:10\n +         StorageLive(_8);                 // scope 3 at $DIR/sroa.rs:+4:9: +4:10\n +         StorageLive(_9);                 // scope 3 at $DIR/sroa.rs:+4:9: +4:10\n +         StorageLive(_10);                // scope 3 at $DIR/sroa.rs:+4:9: +4:10\n +         nop;                             // scope 3 at $DIR/sroa.rs:+4:9: +4:10\n-+         _7 = (_2.0: u8);                 // scope 3 at $DIR/sroa.rs:+4:13: +4:14\n-+         _8 = (_2.1: ());                 // scope 3 at $DIR/sroa.rs:+4:13: +4:14\n-+         _9 = (_2.2: &str);               // scope 3 at $DIR/sroa.rs:+4:13: +4:14\n-+         _10 = (_2.3: std::option::Option<isize>); // scope 3 at $DIR/sroa.rs:+4:13: +4:14\n++         _7 = _11;                        // scope 3 at $DIR/sroa.rs:+4:13: +4:14\n++         _8 = _12;                        // scope 3 at $DIR/sroa.rs:+4:13: +4:14\n++         _9 = _13;                        // scope 3 at $DIR/sroa.rs:+4:13: +4:14\n++         _10 = _14;                       // scope 3 at $DIR/sroa.rs:+4:13: +4:14\n +         nop;                             // scope 3 at $DIR/sroa.rs:+4:13: +4:14\n           StorageLive(_6);                 // scope 4 at $DIR/sroa.rs:+5:9: +5:10\n -         _6 = (_5.1: ());                 // scope 4 at $DIR/sroa.rs:+5:13: +5:16\n@@ -62,7 +79,12 @@\n +         nop;                             // scope 3 at $DIR/sroa.rs:+6:1: +6:2\n           StorageDead(_4);                 // scope 2 at $DIR/sroa.rs:+6:1: +6:2\n           StorageDead(_3);                 // scope 1 at $DIR/sroa.rs:+6:1: +6:2\n-          StorageDead(_2);                 // scope 0 at $DIR/sroa.rs:+6:1: +6:2\n+-         StorageDead(_2);                 // scope 0 at $DIR/sroa.rs:+6:1: +6:2\n++         StorageDead(_11);                // scope 0 at $DIR/sroa.rs:+6:1: +6:2\n++         StorageDead(_12);                // scope 0 at $DIR/sroa.rs:+6:1: +6:2\n++         StorageDead(_13);                // scope 0 at $DIR/sroa.rs:+6:1: +6:2\n++         StorageDead(_14);                // scope 0 at $DIR/sroa.rs:+6:1: +6:2\n++         nop;                             // scope 0 at $DIR/sroa.rs:+6:1: +6:2\n           return;                          // scope 0 at $DIR/sroa.rs:+6:2: +6:2\n       }\n   }"}]}