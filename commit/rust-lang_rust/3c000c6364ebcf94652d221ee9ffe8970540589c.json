{"sha": "3c000c6364ebcf94652d221ee9ffe8970540589c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjMDAwYzYzNjRlYmNmOTQ2NTJkMjIxZWU5ZmZlODk3MDU0MDU4OWM=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-03-20T21:43:42Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-03-20T22:25:07Z"}, "message": "Add basic lifetime completion", "tree": {"sha": "a1f10f8ef2d3a923ad723e11d6a4ff43dbcc5f49", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a1f10f8ef2d3a923ad723e11d6a4ff43dbcc5f49"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c000c6364ebcf94652d221ee9ffe8970540589c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c000c6364ebcf94652d221ee9ffe8970540589c", "html_url": "https://github.com/rust-lang/rust/commit/3c000c6364ebcf94652d221ee9ffe8970540589c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c000c6364ebcf94652d221ee9ffe8970540589c/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5cc8ad0c4afda0c8b6222156b0c725cfb61892c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/5cc8ad0c4afda0c8b6222156b0c725cfb61892c0", "html_url": "https://github.com/rust-lang/rust/commit/5cc8ad0c4afda0c8b6222156b0c725cfb61892c0"}], "stats": {"total": 247, "additions": 233, "deletions": 14}, "files": [{"sha": "cdac4e41a9d893e515bdf462031270edbace718c", "filename": "crates/ide_completion/src/completions.rs", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/3c000c6364ebcf94652d221ee9ffe8970540589c/crates%2Fide_completion%2Fsrc%2Fcompletions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c000c6364ebcf94652d221ee9ffe8970540589c/crates%2Fide_completion%2Fsrc%2Fcompletions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions.rs?ref=3c000c6364ebcf94652d221ee9ffe8970540589c", "patch": "@@ -2,25 +2,27 @@\n \n pub(crate) mod attribute;\n pub(crate) mod dot;\n-pub(crate) mod record;\n-pub(crate) mod pattern;\n+pub(crate) mod flyimport;\n pub(crate) mod fn_param;\n pub(crate) mod keyword;\n-pub(crate) mod snippet;\n-pub(crate) mod qualified_path;\n-pub(crate) mod unqualified_path;\n-pub(crate) mod postfix;\n+pub(crate) mod lifetime;\n pub(crate) mod macro_in_item_position;\n-pub(crate) mod trait_impl;\n pub(crate) mod mod_;\n-pub(crate) mod flyimport;\n+pub(crate) mod pattern;\n+pub(crate) mod postfix;\n+pub(crate) mod qualified_path;\n+pub(crate) mod record;\n+pub(crate) mod snippet;\n+pub(crate) mod trait_impl;\n+pub(crate) mod unqualified_path;\n \n use std::iter;\n \n use hir::{known, ModPath, ScopeDef, Type};\n+use ide_db::SymbolKind;\n \n use crate::{\n-    item::Builder,\n+    item::{Builder, CompletionKind},\n     render::{\n         const_::render_const,\n         enum_variant::render_variant,\n@@ -31,7 +33,7 @@ use crate::{\n         type_alias::render_type_alias,\n         RenderContext,\n     },\n-    CompletionContext, CompletionItem,\n+    CompletionContext, CompletionItem, CompletionItemKind,\n };\n \n /// Represents an in-progress set of completions being built.\n@@ -77,6 +79,13 @@ impl Completions {\n         self.add(item);\n     }\n \n+    pub(crate) fn add_static_lifetime(&mut self, ctx: &CompletionContext) {\n+        let mut item =\n+            CompletionItem::new(CompletionKind::Reference, ctx.source_range(), \"'static\");\n+        item.kind(CompletionItemKind::SymbolKind(SymbolKind::LifetimeParam));\n+        self.add(item.build());\n+    }\n+\n     pub(crate) fn add_resolution(\n         &mut self,\n         ctx: &CompletionContext,"}, {"sha": "74eb233602a89ab100f5aa86d278286ca4d1e955", "filename": "crates/ide_completion/src/completions/lifetime.rs", "status": "added", "additions": 181, "deletions": 0, "changes": 181, "blob_url": "https://github.com/rust-lang/rust/blob/3c000c6364ebcf94652d221ee9ffe8970540589c/crates%2Fide_completion%2Fsrc%2Fcompletions%2Flifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c000c6364ebcf94652d221ee9ffe8970540589c/crates%2Fide_completion%2Fsrc%2Fcompletions%2Flifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Flifetime.rs?ref=3c000c6364ebcf94652d221ee9ffe8970540589c", "patch": "@@ -0,0 +1,181 @@\n+//! Completes lifetimes.\n+use hir::ScopeDef;\n+\n+use crate::{completions::Completions, context::CompletionContext};\n+\n+/// Completes lifetimes.\n+pub(crate) fn complete_lifetime(acc: &mut Completions, ctx: &CompletionContext) {\n+    if !ctx.lifetime_allowed {\n+        return;\n+    }\n+    let param_lifetime = match (\n+        &ctx.lifetime_syntax,\n+        ctx.lifetime_param_syntax.as_ref().and_then(|lp| lp.lifetime()),\n+    ) {\n+        (Some(lt), Some(lp)) if lp == lt.clone() => return,\n+        (Some(_), Some(lp)) => Some(lp.to_string()),\n+        _ => None,\n+    };\n+\n+    ctx.scope.process_all_names(&mut |name, res| {\n+        if let ScopeDef::GenericParam(hir::GenericParam::LifetimeParam(_)) = res {\n+            if param_lifetime != Some(name.to_string()) {\n+                acc.add_resolution(ctx, name.to_string(), &res);\n+            }\n+        }\n+    });\n+    if param_lifetime.is_none() {\n+        acc.add_static_lifetime(ctx);\n+    }\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use expect_test::{expect, Expect};\n+\n+    use crate::{\n+        test_utils::{check_edit, completion_list_with_config, TEST_CONFIG},\n+        CompletionConfig, CompletionKind,\n+    };\n+\n+    fn check(ra_fixture: &str, expect: Expect) {\n+        check_with_config(TEST_CONFIG, ra_fixture, expect);\n+    }\n+\n+    fn check_with_config(config: CompletionConfig, ra_fixture: &str, expect: Expect) {\n+        let actual = completion_list_with_config(config, ra_fixture, CompletionKind::Reference);\n+        expect.assert_eq(&actual)\n+    }\n+\n+    #[test]\n+    fn check_lifetime_edit() {\n+        check_edit(\n+            \"'lifetime\",\n+            r#\"\n+fn func<'lifetime>(foo: &'li$0) {}\n+\"#,\n+            r#\"\n+fn func<'lifetime>(foo: &'lifetime) {}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn complete_lifetime_in_ref() {\n+        check(\n+            r#\"\n+fn foo<'lifetime>(foo: &'a$0 usize) {}\n+\"#,\n+            expect![[r#\"\n+                lt 'lifetime\n+                lt 'static\n+            \"#]],\n+        );\n+    }\n+\n+    #[test]\n+    fn complete_lifetime_in_ref_missing_ty() {\n+        check(\n+            r#\"\n+fn foo<'lifetime>(foo: &'a$0) {}\n+\"#,\n+            expect![[r#\"\n+                lt 'lifetime\n+                lt 'static\n+            \"#]],\n+        );\n+    }\n+    #[test]\n+    fn complete_lifetime_in_self_ref() {\n+        check(\n+            r#\"\n+struct Foo;\n+impl<'impl> Foo {\n+    fn foo<'func>(&'a$0 self) {}\n+}\n+\"#,\n+            expect![[r#\"\n+                lt 'func\n+                lt 'impl\n+                lt 'static\n+            \"#]],\n+        );\n+    }\n+\n+    #[test]\n+    fn complete_lifetime_in_arg_list() {\n+        check(\n+            r#\"\n+struct Foo<'lt>;\n+fn foo<'lifetime>(_: Foo<'a$0>) {}\n+\"#,\n+            expect![[r#\"\n+                lt 'lifetime\n+                lt 'static\n+            \"#]],\n+        );\n+    }\n+\n+    #[test]\n+    fn complete_lifetime_in_where_pred() {\n+        check(\n+            r#\"\n+fn foo2<'lifetime, T>() where 'a$0 {}\n+\"#,\n+            expect![[r#\"\n+                lt 'lifetime\n+                lt 'static\n+            \"#]],\n+        );\n+    }\n+\n+    #[test]\n+    fn complete_lifetime_in_ty_bound() {\n+        check(\n+            r#\"\n+fn foo2<'lifetime, T>() where T: 'a$0 {}\n+\"#,\n+            expect![[r#\"\n+                lt 'lifetime\n+                lt 'static\n+            \"#]],\n+        );\n+        check(\n+            r#\"\n+fn foo2<'lifetime, T>() where T: Trait<'a$0> {}\n+\"#,\n+            expect![[r#\"\n+                lt 'lifetime\n+                lt 'static\n+            \"#]],\n+        );\n+    }\n+\n+    #[test]\n+    fn dont_complete_lifetime_in_assoc_ty_bound() {\n+        check(\n+            r#\"\n+fn foo2<'lifetime, T>() where T: Trait<Item = 'a$0> {}\n+\"#,\n+            expect![[r#\"\"#]],\n+        );\n+    }\n+\n+    #[test]\n+    fn complete_lifetime_in_param_list() {\n+        check(\n+            r#\"\n+fn foo<'a$0>() {}\n+\"#,\n+            expect![[r#\"\"#]],\n+        );\n+        check(\n+            r#\"\n+fn foo<'footime, 'lifetime: 'a$0>() {}\n+\"#,\n+            expect![[r#\"\n+                lt 'footime\n+            \"#]],\n+        );\n+    }\n+}"}, {"sha": "b06498e6da4a90dd4aeb3255f4d2b240aa39d012", "filename": "crates/ide_completion/src/completions/pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c000c6364ebcf94652d221ee9ffe8970540589c/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c000c6364ebcf94652d221ee9ffe8970540589c/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpattern.rs?ref=3c000c6364ebcf94652d221ee9ffe8970540589c", "patch": "@@ -1,4 +1,4 @@\n-//! Completes constats and paths in patterns.\n+//! Completes constants and paths in patterns.\n \n use crate::{CompletionContext, Completions};\n "}, {"sha": "3c31de9ada1ec0742a57ade6da13ba1c7e68eea9", "filename": "crates/ide_completion/src/context.rs", "status": "modified", "additions": 31, "deletions": 3, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/3c000c6364ebcf94652d221ee9ffe8970540589c/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c000c6364ebcf94652d221ee9ffe8970540589c/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcontext.rs?ref=3c000c6364ebcf94652d221ee9ffe8970540589c", "patch": "@@ -38,12 +38,15 @@ pub(crate) struct CompletionContext<'a> {\n     pub(super) expected_name: Option<String>,\n     pub(super) expected_type: Option<Type>,\n     pub(super) name_ref_syntax: Option<ast::NameRef>,\n+    pub(super) lifetime_syntax: Option<ast::Lifetime>,\n+    pub(super) lifetime_param_syntax: Option<ast::LifetimeParam>,\n     pub(super) function_syntax: Option<ast::Fn>,\n     pub(super) use_item_syntax: Option<ast::Use>,\n     pub(super) record_lit_syntax: Option<ast::RecordExpr>,\n     pub(super) record_pat_syntax: Option<ast::RecordPat>,\n     pub(super) record_field_syntax: Option<ast::RecordExprField>,\n     pub(super) impl_def: Option<ast::Impl>,\n+    pub(super) lifetime_allowed: bool,\n     /// FIXME: `ActiveParameter` is string-based, which is very very wrong\n     pub(super) active_parameter: Option<ActiveParameter>,\n     pub(super) is_param: bool,\n@@ -136,9 +139,12 @@ impl<'a> CompletionContext<'a> {\n             original_token,\n             token,\n             krate,\n+            lifetime_allowed: false,\n             expected_name: None,\n             expected_type: None,\n             name_ref_syntax: None,\n+            lifetime_syntax: None,\n+            lifetime_param_syntax: None,\n             function_syntax: None,\n             use_item_syntax: None,\n             record_lit_syntax: None,\n@@ -241,7 +247,7 @@ impl<'a> CompletionContext<'a> {\n     pub(crate) fn source_range(&self) -> TextRange {\n         // check kind of macro-expanded token, but use range of original token\n         let kind = self.token.kind();\n-        if kind == IDENT || kind == UNDERSCORE || kind.is_keyword() {\n+        if kind == IDENT || kind == LIFETIME_IDENT || kind == UNDERSCORE || kind.is_keyword() {\n             cov_mark::hit!(completes_if_prefix_is_keyword);\n             self.original_token.text_range()\n         } else {\n@@ -386,6 +392,11 @@ impl<'a> CompletionContext<'a> {\n         self.expected_name = expected.1;\n         self.attribute_under_caret = find_node_at_offset(&file_with_fake_ident, offset);\n \n+        if let Some(lifetime) = find_node_at_offset::<ast::Lifetime>(&file_with_fake_ident, offset)\n+        {\n+            self.classify_lifetime(original_file, lifetime, offset);\n+        }\n+\n         // First, let's try to complete a reference to some declaration.\n         if let Some(name_ref) = find_node_at_offset::<ast::NameRef>(&file_with_fake_ident, offset) {\n             // Special case, `trait T { fn foo(i_am_a_name_ref) {} }`.\n@@ -445,18 +456,35 @@ impl<'a> CompletionContext<'a> {\n         }\n     }\n \n+    fn classify_lifetime(\n+        &mut self,\n+        original_file: &SyntaxNode,\n+        lifetime: ast::Lifetime,\n+        offset: TextSize,\n+    ) {\n+        self.lifetime_syntax =\n+            find_node_at_offset(original_file, lifetime.syntax().text_range().start());\n+        if lifetime.syntax().parent().map_or(false, |p| p.kind() != syntax::SyntaxKind::ERROR) {\n+            self.lifetime_allowed = true;\n+        }\n+        if let Some(_) = lifetime.syntax().parent().and_then(ast::LifetimeParam::cast) {\n+            self.lifetime_param_syntax =\n+                self.sema.find_node_at_offset_with_macros(original_file, offset);\n+        }\n+    }\n+\n     fn classify_name_ref(\n         &mut self,\n         original_file: &SyntaxNode,\n         name_ref: ast::NameRef,\n         offset: TextSize,\n     ) {\n         self.name_ref_syntax =\n-            find_node_at_offset(&original_file, name_ref.syntax().text_range().start());\n+            find_node_at_offset(original_file, name_ref.syntax().text_range().start());\n         let name_range = name_ref.syntax().text_range();\n         if ast::RecordExprField::for_field_name(&name_ref).is_some() {\n             self.record_lit_syntax =\n-                self.sema.find_node_at_offset_with_macros(&original_file, offset);\n+                self.sema.find_node_at_offset_with_macros(original_file, offset);\n         }\n \n         self.fill_impl_def();"}, {"sha": "7a0eb6a96623298ec3a6658146971723ca9edfdd", "filename": "crates/ide_completion/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3c000c6364ebcf94652d221ee9ffe8970540589c/crates%2Fide_completion%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c000c6364ebcf94652d221ee9ffe8970540589c/crates%2Fide_completion%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Flib.rs?ref=3c000c6364ebcf94652d221ee9ffe8970540589c", "patch": "@@ -130,6 +130,7 @@ pub fn completions(\n     completions::trait_impl::complete_trait_impl(&mut acc, &ctx);\n     completions::mod_::complete_mod(&mut acc, &ctx);\n     completions::flyimport::import_on_the_fly(&mut acc, &ctx);\n+    completions::lifetime::complete_lifetime(&mut acc, &ctx);\n \n     Some(acc)\n }"}]}