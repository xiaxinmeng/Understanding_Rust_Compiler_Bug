{"sha": "354134ffb4e6a0962e9faf19ebe2bb1cda4da9ab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1NDEzNGZmYjRlNmEwOTYyZTlmYWYxOWViZTJiYjFjZGE0ZGE5YWI=", "commit": {"author": {"name": "Michael Killough", "email": "michaeljkillough@gmail.com", "date": "2019-03-17T18:46:01Z"}, "committer": {"name": "Michael Killough", "email": "michaeljkillough@gmail.com", "date": "2019-03-17T18:46:01Z"}, "message": "impl Default for BindingMode.\n\nThis decouples callers from knowing what the default binding mode of\npattern matching is.", "tree": {"sha": "0e5c4afc14678572b3d4e45718bf72aa52fd0e8f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e5c4afc14678572b3d4e45718bf72aa52fd0e8f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/354134ffb4e6a0962e9faf19ebe2bb1cda4da9ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/354134ffb4e6a0962e9faf19ebe2bb1cda4da9ab", "html_url": "https://github.com/rust-lang/rust/commit/354134ffb4e6a0962e9faf19ebe2bb1cda4da9ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/354134ffb4e6a0962e9faf19ebe2bb1cda4da9ab/comments", "author": {"login": "mjkillough", "id": 532855, "node_id": "MDQ6VXNlcjUzMjg1NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/532855?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mjkillough", "html_url": "https://github.com/mjkillough", "followers_url": "https://api.github.com/users/mjkillough/followers", "following_url": "https://api.github.com/users/mjkillough/following{/other_user}", "gists_url": "https://api.github.com/users/mjkillough/gists{/gist_id}", "starred_url": "https://api.github.com/users/mjkillough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mjkillough/subscriptions", "organizations_url": "https://api.github.com/users/mjkillough/orgs", "repos_url": "https://api.github.com/users/mjkillough/repos", "events_url": "https://api.github.com/users/mjkillough/events{/privacy}", "received_events_url": "https://api.github.com/users/mjkillough/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mjkillough", "id": 532855, "node_id": "MDQ6VXNlcjUzMjg1NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/532855?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mjkillough", "html_url": "https://github.com/mjkillough", "followers_url": "https://api.github.com/users/mjkillough/followers", "following_url": "https://api.github.com/users/mjkillough/following{/other_user}", "gists_url": "https://api.github.com/users/mjkillough/gists{/gist_id}", "starred_url": "https://api.github.com/users/mjkillough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mjkillough/subscriptions", "organizations_url": "https://api.github.com/users/mjkillough/orgs", "repos_url": "https://api.github.com/users/mjkillough/repos", "events_url": "https://api.github.com/users/mjkillough/events{/privacy}", "received_events_url": "https://api.github.com/users/mjkillough/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b42c5ced68c019108e079dc01d0bd29606efc10c", "url": "https://api.github.com/repos/rust-lang/rust/commits/b42c5ced68c019108e079dc01d0bd29606efc10c", "html_url": "https://github.com/rust-lang/rust/commit/b42c5ced68c019108e079dc01d0bd29606efc10c"}], "stats": {"total": 16, "additions": 11, "deletions": 5}, "files": [{"sha": "92c79df156794955bc0de4cc45a0243285e60ef0", "filename": "crates/ra_hir/src/ty/infer.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/354134ffb4e6a0962e9faf19ebe2bb1cda4da9ab/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/354134ffb4e6a0962e9faf19ebe2bb1cda4da9ab/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs?ref=354134ffb4e6a0962e9faf19ebe2bb1cda4da9ab", "patch": "@@ -81,6 +81,12 @@ impl BindingMode {\n     }\n }\n \n+impl Default for BindingMode {\n+    fn default() -> Self {\n+        BindingMode::Move\n+    }\n+}\n+\n /// The result of type inference: A mapping from expressions and patterns to types.\n #[derive(Clone, PartialEq, Eq, Debug)]\n pub struct InferenceResult {\n@@ -761,7 +767,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n             }\n             Expr::For { iterable, body, pat } => {\n                 let _iterable_ty = self.infer_expr(*iterable, &Expectation::none());\n-                self.infer_pat(*pat, &Ty::Unknown, BindingMode::Move);\n+                self.infer_pat(*pat, &Ty::Unknown, BindingMode::default());\n                 self.infer_expr(*body, &Expectation::has_type(Ty::unit()));\n                 Ty::unit()\n             }\n@@ -775,7 +781,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                     } else {\n                         Ty::Unknown\n                     };\n-                    self.infer_pat(*arg_pat, &expected, BindingMode::Move);\n+                    self.infer_pat(*arg_pat, &expected, BindingMode::default());\n                 }\n \n                 // TODO: infer lambda type etc.\n@@ -865,7 +871,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n \n                 for arm in arms {\n                     for &pat in &arm.pats {\n-                        let _pat_ty = self.infer_pat(pat, &input_ty, BindingMode::Move);\n+                        let _pat_ty = self.infer_pat(pat, &input_ty, BindingMode::default());\n                     }\n                     if let Some(guard_expr) = arm.guard {\n                         self.infer_expr(guard_expr, &Expectation::has_type(Ty::Bool));\n@@ -1065,7 +1071,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                         decl_ty\n                     };\n \n-                    self.infer_pat(*pat, &ty, BindingMode::Move);\n+                    self.infer_pat(*pat, &ty, BindingMode::default());\n                 }\n                 Statement::Expr(expr) => {\n                     self.infer_expr(*expr, &Expectation::none());\n@@ -1081,7 +1087,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n         for (type_ref, pat) in signature.params().iter().zip(body.params()) {\n             let ty = self.make_ty(type_ref);\n \n-            self.infer_pat(*pat, &ty, BindingMode::Move);\n+            self.infer_pat(*pat, &ty, BindingMode::default());\n         }\n         self.return_ty = self.make_ty(signature.ret_type());\n     }"}]}