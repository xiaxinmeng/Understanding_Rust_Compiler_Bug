{"sha": "b11c5722f84879db3539e84d8d21c4c758165163", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxMWM1NzIyZjg0ODc5ZGIzNTM5ZTg0ZDhkMjFjNGM3NTgxNjUxNjM=", "commit": {"author": {"name": "Vadim Chugunov", "email": "vadimcn@gmail.com", "date": "2014-09-20T22:22:11Z"}, "committer": {"name": "Vadim Chugunov", "email": "vadimcn@gmail.com", "date": "2014-09-20T22:23:23Z"}, "message": "Restore original terminal colors after error messages on Windows.", "tree": {"sha": "8a8332c8bcf7d87aa98506804e96c33b63774e6b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a8332c8bcf7d87aa98506804e96c33b63774e6b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b11c5722f84879db3539e84d8d21c4c758165163", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b11c5722f84879db3539e84d8d21c4c758165163", "html_url": "https://github.com/rust-lang/rust/commit/b11c5722f84879db3539e84d8d21c4c758165163", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b11c5722f84879db3539e84d8d21c4c758165163/comments", "author": {"login": "vadimcn", "id": 3203809, "node_id": "MDQ6VXNlcjMyMDM4MDk=", "avatar_url": "https://avatars.githubusercontent.com/u/3203809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vadimcn", "html_url": "https://github.com/vadimcn", "followers_url": "https://api.github.com/users/vadimcn/followers", "following_url": "https://api.github.com/users/vadimcn/following{/other_user}", "gists_url": "https://api.github.com/users/vadimcn/gists{/gist_id}", "starred_url": "https://api.github.com/users/vadimcn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vadimcn/subscriptions", "organizations_url": "https://api.github.com/users/vadimcn/orgs", "repos_url": "https://api.github.com/users/vadimcn/repos", "events_url": "https://api.github.com/users/vadimcn/events{/privacy}", "received_events_url": "https://api.github.com/users/vadimcn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vadimcn", "id": 3203809, "node_id": "MDQ6VXNlcjMyMDM4MDk=", "avatar_url": "https://avatars.githubusercontent.com/u/3203809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vadimcn", "html_url": "https://github.com/vadimcn", "followers_url": "https://api.github.com/users/vadimcn/followers", "following_url": "https://api.github.com/users/vadimcn/following{/other_user}", "gists_url": "https://api.github.com/users/vadimcn/gists{/gist_id}", "starred_url": "https://api.github.com/users/vadimcn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vadimcn/subscriptions", "organizations_url": "https://api.github.com/users/vadimcn/orgs", "repos_url": "https://api.github.com/users/vadimcn/repos", "events_url": "https://api.github.com/users/vadimcn/events{/privacy}", "received_events_url": "https://api.github.com/users/vadimcn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d335c94bd9017f16ce7538a5f4063e1178f15a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d335c94bd9017f16ce7538a5f4063e1178f15a1", "html_url": "https://github.com/rust-lang/rust/commit/5d335c94bd9017f16ce7538a5f4063e1178f15a1"}], "stats": {"total": 54, "additions": 51, "deletions": 3}, "files": [{"sha": "0aae85503d07ddaf5647950e410a1762c029f871", "filename": "src/libterm/win.rs", "status": "modified", "additions": 51, "deletions": 3, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/b11c5722f84879db3539e84d8d21c4c758165163/src%2Flibterm%2Fwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b11c5722f84879db3539e84d8d21c4c758165163/src%2Flibterm%2Fwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fwin.rs?ref=b11c5722f84879db3539e84d8d21c4c758165163", "patch": "@@ -23,15 +23,29 @@ use Terminal;\n /// A Terminal implementation which uses the Win32 Console API.\n pub struct WinConsole<T> {\n     buf: T,\n+    def_foreground: color::Color,\n+    def_background: color::Color,\n     foreground: color::Color,\n     background: color::Color,\n }\n \n+#[allow(non_snake_case)]\n+#[repr(C)]\n+struct CONSOLE_SCREEN_BUFFER_INFO {\n+    dwSize: [libc::c_short, ..2],\n+    dwCursorPosition: [libc::c_short, ..2],\n+    wAttributes: libc::WORD,\n+    srWindow: [libc::c_short, ..4],\n+    dwMaximumWindowSize: [libc::c_short, ..2],\n+}\n+\n #[allow(non_snake_case)]\n #[link(name = \"kernel32\")]\n extern \"system\" {\n     fn SetConsoleTextAttribute(handle: libc::HANDLE, attr: libc::WORD) -> libc::BOOL;\n     fn GetStdHandle(which: libc::DWORD) -> libc::HANDLE;\n+    fn GetConsoleScreenBufferInfo(handle: libc::HANDLE,\n+                                  info: *mut CONSOLE_SCREEN_BUFFER_INFO) -> libc::BOOL;\n }\n \n fn color_to_bits(color: color::Color) -> u16 {\n@@ -56,6 +70,26 @@ fn color_to_bits(color: color::Color) -> u16 {\n     }\n }\n \n+fn bits_to_color(bits: u16) -> color::Color {\n+    let color = match bits & 0x7 {\n+        0 => color::BLACK,\n+        0x1 => color::BLUE,\n+        0x2 => color::GREEN,\n+        0x4 => color::RED,\n+        0x6 => color::YELLOW,\n+        0x5 => color::MAGENTA,\n+        0x3 => color::CYAN,\n+        0x7 => color::WHITE,\n+        _ => unreachable!()\n+    };\n+\n+    if bits >= 8 {\n+        color | 0x8\n+    } else {\n+        color\n+    }\n+}\n+\n impl<T: Writer> WinConsole<T> {\n     fn apply(&mut self) {\n         let _unused = self.buf.flush();\n@@ -91,7 +125,21 @@ impl<T: Writer> Writer for WinConsole<T> {\n \n impl<T: Writer> Terminal<T> for WinConsole<T> {\n     fn new(out: T) -> Option<WinConsole<T>> {\n-        Some(WinConsole { buf: out, foreground: color::WHITE, background: color::BLACK })\n+        let fg;\n+        let bg;\n+        unsafe {\n+            let mut buffer_info = ::std::mem::uninitialized();\n+            if GetConsoleScreenBufferInfo(GetStdHandle(-11), &mut buffer_info) != 0 {\n+                fg = bits_to_color(buffer_info.wAttributes);\n+                bg = bits_to_color(buffer_info.wAttributes >> 4);\n+            } else {\n+                fg = color::WHITE;\n+                bg = color::BLACK;\n+            }\n+        }\n+        Some(WinConsole { buf: out,\n+                          def_foreground: fg, def_background: bg,\n+                          foreground: fg, background: bg } )\n     }\n \n     fn fg(&mut self, color: color::Color) -> IoResult<bool> {\n@@ -134,8 +182,8 @@ impl<T: Writer> Terminal<T> for WinConsole<T> {\n     }\n \n     fn reset(&mut self) -> IoResult<()> {\n-        self.foreground = color::WHITE;\n-        self.background = color::BLACK;\n+        self.foreground = self.def_foreground;\n+        self.background = self.def_background;\n         self.apply();\n \n         Ok(())"}]}