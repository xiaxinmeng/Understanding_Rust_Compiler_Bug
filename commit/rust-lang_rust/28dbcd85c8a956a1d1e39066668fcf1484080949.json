{"sha": "28dbcd85c8a956a1d1e39066668fcf1484080949", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4ZGJjZDg1YzhhOTU2YTFkMWUzOTA2NjY2OGZjZjE0ODQwODA5NDk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-16T17:32:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-16T17:32:13Z"}, "message": "Auto merge of #7098 - camsteffen:cloned-copied, r=Manishearth\n\nAdd `cloned_instead_of_copied` lint\n\nDon't go cloning all willy-nilly.\n\nFeaturing a new `get_iterator_item_ty` util!\n\nchangelog: Add cloned_instead_of_copied lint\n\nCloses #3870", "tree": {"sha": "185ed8f70d6614cf1dea8fc21143a98f979c9310", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/185ed8f70d6614cf1dea8fc21143a98f979c9310"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28dbcd85c8a956a1d1e39066668fcf1484080949", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28dbcd85c8a956a1d1e39066668fcf1484080949", "html_url": "https://github.com/rust-lang/rust/commit/28dbcd85c8a956a1d1e39066668fcf1484080949", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28dbcd85c8a956a1d1e39066668fcf1484080949/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f2068cc2bb3367eb1b0511318ab6b7093d024ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f2068cc2bb3367eb1b0511318ab6b7093d024ca", "html_url": "https://github.com/rust-lang/rust/commit/7f2068cc2bb3367eb1b0511318ab6b7093d024ca"}, {"sha": "b049c88fbe661f2ef1f1f7806788fed59dc1bfa8", "url": "https://api.github.com/repos/rust-lang/rust/commits/b049c88fbe661f2ef1f1f7806788fed59dc1bfa8", "html_url": "https://github.com/rust-lang/rust/commit/b049c88fbe661f2ef1f1f7806788fed59dc1bfa8"}], "stats": {"total": 176, "additions": 163, "deletions": 13}, "files": [{"sha": "483365b5e91c3f2f6780f7bfa0193a87dd272c87", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/28dbcd85c8a956a1d1e39066668fcf1484080949/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/28dbcd85c8a956a1d1e39066668fcf1484080949/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=28dbcd85c8a956a1d1e39066668fcf1484080949", "patch": "@@ -2148,6 +2148,7 @@ Released 2018-09-13\n [`clone_double_ref`]: https://rust-lang.github.io/rust-clippy/master/index.html#clone_double_ref\n [`clone_on_copy`]: https://rust-lang.github.io/rust-clippy/master/index.html#clone_on_copy\n [`clone_on_ref_ptr`]: https://rust-lang.github.io/rust-clippy/master/index.html#clone_on_ref_ptr\n+[`cloned_instead_of_copied`]: https://rust-lang.github.io/rust-clippy/master/index.html#cloned_instead_of_copied\n [`cmp_nan`]: https://rust-lang.github.io/rust-clippy/master/index.html#cmp_nan\n [`cmp_null`]: https://rust-lang.github.io/rust-clippy/master/index.html#cmp_null\n [`cmp_owned`]: https://rust-lang.github.io/rust-clippy/master/index.html#cmp_owned"}, {"sha": "67f0e0c78700bc56f9bcd19373b6a27f205ad8bc", "filename": "clippy_lints/src/booleans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28dbcd85c8a956a1d1e39066668fcf1484080949/clippy_lints%2Fsrc%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28dbcd85c8a956a1d1e39066668fcf1484080949/clippy_lints%2Fsrc%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbooleans.rs?ref=28dbcd85c8a956a1d1e39066668fcf1484080949", "patch": "@@ -261,7 +261,7 @@ fn simplify_not(cx: &LateContext<'_>, expr: &Expr<'_>) -> Option<String> {\n             }\n             METHODS_WITH_NEGATION\n                 .iter()\n-                .cloned()\n+                .copied()\n                 .flat_map(|(a, b)| vec![(a, b), (b, a)])\n                 .find(|&(a, _)| {\n                     let path: &str = &path.ident.name.as_str();"}, {"sha": "6a2666bc6c0111026890f8ef361af6cb1fa0682d", "filename": "clippy_lints/src/checked_conversions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/28dbcd85c8a956a1d1e39066668fcf1484080949/clippy_lints%2Fsrc%2Fchecked_conversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28dbcd85c8a956a1d1e39066668fcf1484080949/clippy_lints%2Fsrc%2Fchecked_conversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fchecked_conversions.rs?ref=28dbcd85c8a956a1d1e39066668fcf1484080949", "patch": "@@ -323,7 +323,7 @@ fn get_implementing_type<'a>(path: &QPath<'_>, candidates: &'a [&str], function:\n         if let [int] = &*tp.segments;\n         then {\n             let name = &int.ident.name.as_str();\n-            candidates.iter().find(|c| name == *c).cloned()\n+            candidates.iter().find(|c| name == *c).copied()\n         } else {\n             None\n         }\n@@ -337,7 +337,7 @@ fn int_ty_to_sym<'tcx>(path: &QPath<'_>) -> Option<&'tcx str> {\n         if let [ty] = &*path.segments;\n         then {\n             let name = &ty.ident.name.as_str();\n-            INTS.iter().find(|c| name == *c).cloned()\n+            INTS.iter().find(|c| name == *c).copied()\n         } else {\n             None\n         }"}, {"sha": "0f48799d339bd886541fa8875ed72324c6937b2f", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28dbcd85c8a956a1d1e39066668fcf1484080949/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28dbcd85c8a956a1d1e39066668fcf1484080949/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=28dbcd85c8a956a1d1e39066668fcf1484080949", "patch": "@@ -759,6 +759,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         methods::BYTES_NTH,\n         methods::CHARS_LAST_CMP,\n         methods::CHARS_NEXT_CMP,\n+        methods::CLONED_INSTEAD_OF_COPIED,\n         methods::CLONE_DOUBLE_REF,\n         methods::CLONE_ON_COPY,\n         methods::CLONE_ON_REF_PTR,\n@@ -1380,6 +1381,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(matches::MATCH_WILDCARD_FOR_SINGLE_VARIANTS),\n         LintId::of(matches::MATCH_WILD_ERR_ARM),\n         LintId::of(matches::SINGLE_MATCH_ELSE),\n+        LintId::of(methods::CLONED_INSTEAD_OF_COPIED),\n         LintId::of(methods::FILTER_MAP_NEXT),\n         LintId::of(methods::IMPLICIT_CLONE),\n         LintId::of(methods::INEFFICIENT_TO_STRING),"}, {"sha": "e97b7c9417033d9a9929f7a994fafb5f08f4b0e5", "filename": "clippy_lints/src/loops/never_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28dbcd85c8a956a1d1e39066668fcf1484080949/clippy_lints%2Fsrc%2Floops%2Fnever_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28dbcd85c8a956a1d1e39066668fcf1484080949/clippy_lints%2Fsrc%2Floops%2Fnever_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fnever_loop.rs?ref=28dbcd85c8a956a1d1e39066668fcf1484080949", "patch": "@@ -100,7 +100,7 @@ fn never_loop_expr(expr: &Expr<'_>, main_loop_id: HirId) -> NeverLoopResult {\n         ExprKind::Binary(_, e1, e2)\n         | ExprKind::Assign(e1, e2, _)\n         | ExprKind::AssignOp(_, e1, e2)\n-        | ExprKind::Index(e1, e2) => never_loop_expr_all(&mut [e1, e2].iter().cloned(), main_loop_id),\n+        | ExprKind::Index(e1, e2) => never_loop_expr_all(&mut [e1, e2].iter().copied(), main_loop_id),\n         ExprKind::Loop(b, _, _, _) => {\n             // Break can come from the inner loop so remove them.\n             absorb_break(&never_loop_block(b, main_loop_id))"}, {"sha": "2c8d8a0f1326abb647ba0e093e0333be75d3f6b7", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28dbcd85c8a956a1d1e39066668fcf1484080949/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28dbcd85c8a956a1d1e39066668fcf1484080949/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=28dbcd85c8a956a1d1e39066668fcf1484080949", "patch": "@@ -1129,7 +1129,7 @@ fn check_wild_enum_match(cx: &LateContext<'_>, ex: &Expr<'_>, arms: &[Arm<'_>])\n             Applicability::MaybeIncorrect,\n         ),\n         variants => {\n-            let mut suggestions: Vec<_> = variants.iter().cloned().map(format_suggestion).collect();\n+            let mut suggestions: Vec<_> = variants.iter().copied().map(format_suggestion).collect();\n             let message = if adt_def.is_variant_list_non_exhaustive() {\n                 suggestions.push(\"_\".into());\n                 \"wildcard matches known variants and will also match future added variants\""}, {"sha": "ba97ab3900ca4b0f1a6960076c699641726e0054", "filename": "clippy_lints/src/methods/cloned_instead_of_copied.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/28dbcd85c8a956a1d1e39066668fcf1484080949/clippy_lints%2Fsrc%2Fmethods%2Fcloned_instead_of_copied.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28dbcd85c8a956a1d1e39066668fcf1484080949/clippy_lints%2Fsrc%2Fmethods%2Fcloned_instead_of_copied.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fcloned_instead_of_copied.rs?ref=28dbcd85c8a956a1d1e39066668fcf1484080949", "patch": "@@ -0,0 +1,38 @@\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::is_trait_method;\n+use clippy_utils::ty::{get_iterator_item_ty, is_copy};\n+use rustc_errors::Applicability;\n+use rustc_hir::Expr;\n+use rustc_lint::LateContext;\n+use rustc_middle::ty;\n+use rustc_span::{sym, Span};\n+\n+use super::CLONED_INSTEAD_OF_COPIED;\n+\n+pub fn check(cx: &LateContext<'_>, expr: &Expr<'_>, recv: &Expr<'_>, span: Span) {\n+    let recv_ty = cx.typeck_results().expr_ty_adjusted(recv);\n+    let inner_ty = match recv_ty.kind() {\n+        // `Option<T>` -> `T`\n+        ty::Adt(adt, subst) if cx.tcx.is_diagnostic_item(sym::option_type, adt.did) => subst.type_at(0),\n+        _ if is_trait_method(cx, expr, sym::Iterator) => match get_iterator_item_ty(cx, recv_ty) {\n+            // <T as Iterator>::Item\n+            Some(ty) => ty,\n+            _ => return,\n+        },\n+        _ => return,\n+    };\n+    match inner_ty.kind() {\n+        // &T where T: Copy\n+        ty::Ref(_, ty, _) if is_copy(cx, ty) => {},\n+        _ => return,\n+    };\n+    span_lint_and_sugg(\n+        cx,\n+        CLONED_INSTEAD_OF_COPIED,\n+        span,\n+        \"used `cloned` where `copied` could be used instead\",\n+        \"try\",\n+        \"copied\".into(),\n+        Applicability::MachineApplicable,\n+    )\n+}"}, {"sha": "49a9af2a46581af79a920e82fdf9a13eb9e16231", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/28dbcd85c8a956a1d1e39066668fcf1484080949/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28dbcd85c8a956a1d1e39066668fcf1484080949/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=28dbcd85c8a956a1d1e39066668fcf1484080949", "patch": "@@ -8,6 +8,7 @@ mod chars_next_cmp;\n mod chars_next_cmp_with_unwrap;\n mod clone_on_copy;\n mod clone_on_ref_ptr;\n+mod cloned_instead_of_copied;\n mod expect_fun_call;\n mod expect_used;\n mod filetype_is_file;\n@@ -73,6 +74,29 @@ use rustc_span::symbol::SymbolStr;\n use rustc_span::{sym, Span};\n use rustc_typeck::hir_ty_to_ty;\n \n+declare_clippy_lint! {\n+    /// **What it does:** Checks for usages of `cloned()` on an `Iterator` or `Option` where\n+    /// `copied()` could be used instead.\n+    ///\n+    /// **Why is this bad?** `copied()` is better because it guarantees that the type being cloned\n+    /// implements `Copy`.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust\n+    /// [1, 2, 3].iter().cloned();\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// [1, 2, 3].iter().copied();\n+    /// ```\n+    pub CLONED_INSTEAD_OF_COPIED,\n+    pedantic,\n+    \"used `cloned` where `copied` could be used instead\"\n+}\n+\n declare_clippy_lint! {\n     /// **What it does:** Checks for `.unwrap()` calls on `Option`s and on `Result`s.\n     ///\n@@ -1638,6 +1662,7 @@ impl_lint_pass!(Methods => [\n     CLONE_ON_COPY,\n     CLONE_ON_REF_PTR,\n     CLONE_DOUBLE_REF,\n+    CLONED_INSTEAD_OF_COPIED,\n     INEFFICIENT_TO_STRING,\n     NEW_RET_NO_SELF,\n     SINGLE_CHAR_PATTERN,\n@@ -1909,6 +1934,7 @@ fn check_methods<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, msrv: Optio\n             (\"as_mut\", []) => useless_asref::check(cx, expr, \"as_mut\", recv),\n             (\"as_ref\", []) => useless_asref::check(cx, expr, \"as_ref\", recv),\n             (\"assume_init\", []) => uninit_assumed_init::check(cx, expr, recv),\n+            (\"cloned\", []) => cloned_instead_of_copied::check(cx, expr, recv, span),\n             (\"collect\", []) => match method_call!(recv) {\n                 Some((\"cloned\", [recv2], _)) => iter_cloned_collect::check(cx, expr, recv2),\n                 Some((\"map\", [m_recv, m_arg], _)) => {"}, {"sha": "e33a33e238633aeaf5b68930e536070d80b73cb5", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28dbcd85c8a956a1d1e39066668fcf1484080949/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28dbcd85c8a956a1d1e39066668fcf1484080949/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=28dbcd85c8a956a1d1e39066668fcf1484080949", "patch": "@@ -279,7 +279,7 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessPassByValue {\n                             spans.extend(\n                                 deref_span\n                                     .iter()\n-                                    .cloned()\n+                                    .copied()\n                                     .map(|span| (span, format!(\"*{}\", snippet(cx, span, \"<expr>\")))),\n                             );\n                             spans.sort_by_key(|&(span, _)| span);"}, {"sha": "4272935bc310e93bfd13bf2dec59c6e6d5ef6559", "filename": "clippy_lints/src/suspicious_operation_groupings.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28dbcd85c8a956a1d1e39066668fcf1484080949/clippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28dbcd85c8a956a1d1e39066668fcf1484080949/clippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs?ref=28dbcd85c8a956a1d1e39066668fcf1484080949", "patch": "@@ -195,7 +195,7 @@ fn attempt_to_emit_no_difference_lint(\n     i: usize,\n     expected_loc: IdentLocation,\n ) {\n-    if let Some(binop) = binops.get(i).cloned() {\n+    if let Some(binop) = binops.get(i).copied() {\n         // We need to try and figure out which identifier we should\n         // suggest using instead. Since there could be multiple\n         // replacement candidates in a given expression, and we're"}, {"sha": "7e962472c07f5b4c994027c5303262dbb7c4470b", "filename": "clippy_lints/src/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28dbcd85c8a956a1d1e39066668fcf1484080949/clippy_lints%2Fsrc%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28dbcd85c8a956a1d1e39066668fcf1484080949/clippy_lints%2Fsrc%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwrite.rs?ref=28dbcd85c8a956a1d1e39066668fcf1484080949", "patch": "@@ -573,7 +573,7 @@ impl Write {\n                         diag.multipart_suggestion(\n                             \"try this\",\n                             iter::once((comma_span.to(token_expr.span), String::new()))\n-                                .chain(fmt_spans.iter().cloned().zip(iter::repeat(replacement)))\n+                                .chain(fmt_spans.iter().copied().zip(iter::repeat(replacement)))\n                                 .collect(),\n                             Applicability::MachineApplicable,\n                         );"}, {"sha": "3ad1ac75e560f2f7aedd22a29e02802b12875a9c", "filename": "clippy_utils/src/hir_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28dbcd85c8a956a1d1e39066668fcf1484080949/clippy_utils%2Fsrc%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28dbcd85c8a956a1d1e39066668fcf1484080949/clippy_utils%2Fsrc%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fhir_utils.rs?ref=28dbcd85c8a956a1d1e39066668fcf1484080949", "patch": "@@ -424,7 +424,7 @@ fn reduce_exprkind<'hir>(cx: &LateContext<'_>, kind: &'hir ExprKind<'hir>) -> &'\n                                 TokenKind::LineComment { .. } | TokenKind::BlockComment { .. } | TokenKind::Whitespace\n                             )\n                         })\n-                        .ne([TokenKind::OpenBrace, TokenKind::CloseBrace].iter().cloned()) =>\n+                        .ne([TokenKind::OpenBrace, TokenKind::CloseBrace].iter().copied()) =>\n                 {\n                     kind\n                 },"}, {"sha": "a5986ed00daf56dea56ee6a34c694df8dfe3809c", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/28dbcd85c8a956a1d1e39066668fcf1484080949/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28dbcd85c8a956a1d1e39066668fcf1484080949/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=28dbcd85c8a956a1d1e39066668fcf1484080949", "patch": "@@ -1053,7 +1053,7 @@ pub fn is_refutable(cx: &LateContext<'_>, pat: &Pat<'_>) -> bool {\n /// the function once on the given pattern.\n pub fn recurse_or_patterns<'tcx, F: FnMut(&'tcx Pat<'tcx>)>(pat: &'tcx Pat<'tcx>, mut f: F) {\n     if let PatKind::Or(pats) = pat.kind {\n-        pats.iter().cloned().for_each(f)\n+        pats.iter().copied().for_each(f)\n     } else {\n         f(pat)\n     }\n@@ -1230,14 +1230,14 @@ pub fn match_any_def_paths(cx: &LateContext<'_>, did: DefId, paths: &[&[&str]])\n     let search_path = cx.get_def_path(did);\n     paths\n         .iter()\n-        .position(|p| p.iter().map(|x| Symbol::intern(x)).eq(search_path.iter().cloned()))\n+        .position(|p| p.iter().map(|x| Symbol::intern(x)).eq(search_path.iter().copied()))\n }\n \n /// Checks if the given `DefId` matches the path.\n pub fn match_def_path<'tcx>(cx: &LateContext<'tcx>, did: DefId, syms: &[&str]) -> bool {\n     // We should probably move to Symbols in Clippy as well rather than interning every time.\n     let path = cx.get_def_path(did);\n-    syms.iter().map(|x| Symbol::intern(x)).eq(path.iter().cloned())\n+    syms.iter().map(|x| Symbol::intern(x)).eq(path.iter().copied())\n }\n \n pub fn match_panic_call(cx: &LateContext<'_>, expr: &'tcx Expr<'_>) -> Option<&'tcx Expr<'tcx>> {"}, {"sha": "64a80f2554fa4c0e413cd2c51be74fe3f20f6cb6", "filename": "clippy_utils/src/ty.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/28dbcd85c8a956a1d1e39066668fcf1484080949/clippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28dbcd85c8a956a1d1e39066668fcf1484080949/clippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fty.rs?ref=28dbcd85c8a956a1d1e39066668fcf1484080949", "patch": "@@ -13,7 +13,7 @@ use rustc_lint::LateContext;\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind};\n use rustc_middle::ty::{self, AdtDef, IntTy, Ty, TypeFoldable, UintTy};\n use rustc_span::sym;\n-use rustc_span::symbol::Symbol;\n+use rustc_span::symbol::{Ident, Symbol};\n use rustc_span::DUMMY_SP;\n use rustc_trait_selection::traits::query::normalize::AtExt;\n \n@@ -52,6 +52,25 @@ pub fn contains_adt_constructor(ty: Ty<'_>, adt: &AdtDef) -> bool {\n     })\n }\n \n+/// Resolves `<T as Iterator>::Item` for `T`\n+/// Do not invoke without first verifying that the type implements `Iterator`\n+pub fn get_iterator_item_ty<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> Option<Ty<'tcx>> {\n+    cx.tcx\n+        .get_diagnostic_item(sym::Iterator)\n+        .and_then(|iter_did| {\n+            cx.tcx.associated_items(iter_did).find_by_name_and_kind(\n+                cx.tcx,\n+                Ident::from_str(\"Item\"),\n+                ty::AssocKind::Type,\n+                iter_did,\n+            )\n+        })\n+        .map(|assoc| {\n+            let proj = cx.tcx.mk_projection(assoc.def_id, cx.tcx.mk_substs_trait(ty, &[]));\n+            cx.tcx.normalize_erasing_regions(cx.param_env, proj)\n+        })\n+}\n+\n /// Returns true if ty has `iter` or `iter_mut` methods\n pub fn has_iter_method(cx: &LateContext<'_>, probably_ref_ty: Ty<'_>) -> Option<Symbol> {\n     // FIXME: instead of this hard-coded list, we should check if `<adt>::iter`"}, {"sha": "4eb999e18e64e35c33e43fd1ecf9aff0aa0c6a55", "filename": "tests/ui/cloned_instead_of_copied.fixed", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/28dbcd85c8a956a1d1e39066668fcf1484080949/tests%2Fui%2Fcloned_instead_of_copied.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/28dbcd85c8a956a1d1e39066668fcf1484080949/tests%2Fui%2Fcloned_instead_of_copied.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcloned_instead_of_copied.fixed?ref=28dbcd85c8a956a1d1e39066668fcf1484080949", "patch": "@@ -0,0 +1,15 @@\n+// run-rustfix\n+#![warn(clippy::cloned_instead_of_copied)]\n+\n+fn main() {\n+    // yay\n+    let _ = [1].iter().copied();\n+    let _ = vec![\"hi\"].iter().copied();\n+    let _ = Some(&1).copied();\n+    let _ = Box::new([1].iter()).copied();\n+    let _ = Box::new(Some(&1)).copied();\n+\n+    // nay\n+    let _ = [String::new()].iter().cloned();\n+    let _ = Some(&String::new()).cloned();\n+}"}, {"sha": "894496c0ebbb5de0831cafe122d3f9debbee39aa", "filename": "tests/ui/cloned_instead_of_copied.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/28dbcd85c8a956a1d1e39066668fcf1484080949/tests%2Fui%2Fcloned_instead_of_copied.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28dbcd85c8a956a1d1e39066668fcf1484080949/tests%2Fui%2Fcloned_instead_of_copied.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcloned_instead_of_copied.rs?ref=28dbcd85c8a956a1d1e39066668fcf1484080949", "patch": "@@ -0,0 +1,15 @@\n+// run-rustfix\n+#![warn(clippy::cloned_instead_of_copied)]\n+\n+fn main() {\n+    // yay\n+    let _ = [1].iter().cloned();\n+    let _ = vec![\"hi\"].iter().cloned();\n+    let _ = Some(&1).cloned();\n+    let _ = Box::new([1].iter()).cloned();\n+    let _ = Box::new(Some(&1)).cloned();\n+\n+    // nay\n+    let _ = [String::new()].iter().cloned();\n+    let _ = Some(&String::new()).cloned();\n+}"}, {"sha": "e0707d32146891a50f6caca35169c453870459f4", "filename": "tests/ui/cloned_instead_of_copied.stderr", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/28dbcd85c8a956a1d1e39066668fcf1484080949/tests%2Fui%2Fcloned_instead_of_copied.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28dbcd85c8a956a1d1e39066668fcf1484080949/tests%2Fui%2Fcloned_instead_of_copied.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcloned_instead_of_copied.stderr?ref=28dbcd85c8a956a1d1e39066668fcf1484080949", "patch": "@@ -0,0 +1,34 @@\n+error: used `cloned` where `copied` could be used instead\n+  --> $DIR/cloned_instead_of_copied.rs:6:24\n+   |\n+LL |     let _ = [1].iter().cloned();\n+   |                        ^^^^^^ help: try: `copied`\n+   |\n+   = note: `-D clippy::cloned-instead-of-copied` implied by `-D warnings`\n+\n+error: used `cloned` where `copied` could be used instead\n+  --> $DIR/cloned_instead_of_copied.rs:7:31\n+   |\n+LL |     let _ = vec![\"hi\"].iter().cloned();\n+   |                               ^^^^^^ help: try: `copied`\n+\n+error: used `cloned` where `copied` could be used instead\n+  --> $DIR/cloned_instead_of_copied.rs:8:22\n+   |\n+LL |     let _ = Some(&1).cloned();\n+   |                      ^^^^^^ help: try: `copied`\n+\n+error: used `cloned` where `copied` could be used instead\n+  --> $DIR/cloned_instead_of_copied.rs:9:34\n+   |\n+LL |     let _ = Box::new([1].iter()).cloned();\n+   |                                  ^^^^^^ help: try: `copied`\n+\n+error: used `cloned` where `copied` could be used instead\n+  --> $DIR/cloned_instead_of_copied.rs:10:32\n+   |\n+LL |     let _ = Box::new(Some(&1)).cloned();\n+   |                                ^^^^^^ help: try: `copied`\n+\n+error: aborting due to 5 previous errors\n+"}]}