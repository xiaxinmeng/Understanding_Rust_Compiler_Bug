{"sha": "a32f287c8a528143566972721be88344a35eb81b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzMmYyODdjOGE1MjgxNDM1NjY5NzI3MjFiZTg4MzQ0YTM1ZWI4MWI=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2011-08-01T22:08:16Z"}, "committer": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2011-08-01T22:18:44Z"}, "message": "Add a GEPi function that wraps GEP with integer arguments.", "tree": {"sha": "4eb27c399d2530b72a97a94f6616667a05021346", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4eb27c399d2530b72a97a94f6616667a05021346"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a32f287c8a528143566972721be88344a35eb81b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a32f287c8a528143566972721be88344a35eb81b", "html_url": "https://github.com/rust-lang/rust/commit/a32f287c8a528143566972721be88344a35eb81b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a32f287c8a528143566972721be88344a35eb81b/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b87fa368333130830aea07f3d01aff4b009cbaa", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b87fa368333130830aea07f3d01aff4b009cbaa", "html_url": "https://github.com/rust-lang/rust/commit/7b87fa368333130830aea07f3d01aff4b009cbaa"}], "stats": {"total": 34, "additions": 22, "deletions": 12}, "files": [{"sha": "29efc4f9339c6dcc8be3c8682317216f13674fab", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 22, "deletions": 12, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/a32f287c8a528143566972721be88344a35eb81b/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a32f287c8a528143566972721be88344a35eb81b/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=a32f287c8a528143566972721be88344a35eb81b", "patch": "@@ -662,6 +662,26 @@ fn dynamic_align_of(cx: &@block_ctxt, t: &ty::t) -> result {\n     }\n }\n \n+// Simple wrapper around GEP that takes an array of ints and wraps them\n+// in C_int()\n+fn GEPi(cx: &@block_ctxt, base: ValueRef, ixs: &int[]) -> ValueRef {\n+    let v: ValueRef[] = ~[];\n+    for i: int  in ixs { v += ~[C_int(i)]; }\n+    ret cx.build.GEP(base, v);\n+}\n+\n+// Increment a pointer by a given amount and then cast it to be a pointer\n+// to a given type.\n+fn bump_ptr(bcx: &@block_ctxt, t: &ty::t, base: ValueRef, sz: ValueRef)\n+    -> ValueRef {\n+    let raw = bcx.build.PointerCast(base, T_ptr(T_i8()));\n+    let bumped = bcx.build.GEP(raw, ~[sz]);\n+    if ty::type_has_dynamic_size(bcx_tcx(bcx), t) {\n+        ret bumped;\n+    }\n+    let typ = T_ptr(type_of(bcx_ccx(bcx), bcx.sp, t));\n+    ret bcx.build.PointerCast(bumped, typ);\n+}\n \n // Replacement for the LLVM 'GEP' instruction when field-indexing into a\n // tuple-like structure (tup, rec) with a static index. This one is driven off\n@@ -672,11 +692,8 @@ fn GEP_tup_like(cx: &@block_ctxt, t: &ty::t, base: ValueRef, ixs: &int[]) ->\n    result {\n     assert (ty::type_is_tup_like(bcx_tcx(cx), t));\n     // It might be a static-known type. Handle this.\n-\n     if !ty::type_has_dynamic_size(bcx_tcx(cx), t) {\n-        let v: ValueRef[] = ~[];\n-        for i: int  in ixs { v += ~[C_int(i)]; }\n-        ret rslt(cx, cx.build.GEP(base, v));\n+        ret rslt(cx, GEPi(cx, base, ixs));\n     }\n     // It is a dynamic-containing type that, if we convert directly to an LLVM\n     // TypeRef, will be all wrong; there's no proper LLVM type to represent\n@@ -745,14 +762,7 @@ fn GEP_tup_like(cx: &@block_ctxt, t: &ty::t, base: ValueRef, ixs: &int[]) ->\n \n     let bcx = cx;\n     let sz = size_of(bcx, prefix_ty);\n-    bcx = sz.bcx;\n-    let raw = bcx.build.PointerCast(base, T_ptr(T_i8()));\n-    let bumped = bcx.build.GEP(raw, ~[sz.val]);\n-    if ty::type_has_dynamic_size(bcx_tcx(cx), s.target) {\n-        ret rslt(bcx, bumped);\n-    }\n-    let typ = T_ptr(type_of(bcx_ccx(bcx), bcx.sp, s.target));\n-    ret rslt(bcx, bcx.build.PointerCast(bumped, typ));\n+    ret rslt(sz.bcx, bump_ptr(sz.bcx, s.target, base, sz.val));\n }\n \n "}]}