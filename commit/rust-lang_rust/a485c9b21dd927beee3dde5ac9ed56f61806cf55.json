{"sha": "a485c9b21dd927beee3dde5ac9ed56f61806cf55", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0ODVjOWIyMWRkOTI3YmVlZTNkZGU1YWM5ZWQ1NmY2MTgwNmNmNTU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-12-31T15:29:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-12-31T15:29:26Z"}, "message": "Merge #7071\n\n7071: Pass --all-targets to \"cargo check\" when discovering external resources r=matklad a=WasabiFan\n\nThere is a repro case and background in the linked issue.\r\n\r\nIn short, the goal of this MR is to allow rust-analyzer to discover proc-macros which come from your tests (including, most importantly, dev-dependencies).\r\n\r\nBy default, `cargo check` implies the equivalent of `--lib --bins`, meaning it'll check your libraries and binaries -- but not tests! This means proc-macros (or, I guess, build scripts as well) weren't discovered by rust-analyzer if they came from tests.\r\n\r\nOne solution would be to manually add `--lib --bins --tests` (i.e., just augment the effective options to include tests). However, in this MR, I threw in `--all-targets`, which [according to the docs](https://doc.rust-lang.org/cargo/commands/cargo-check.html#target-selection) implies `--benches --examples` too. I have absolutely no idea what repercussions that will have on rust-analyzer for other projects, nor do I know if it's a problem that build scripts will now be discovered for tests/examples/benches. But I am not aware of a reason you _wouldn't_ want to discover these things in your examples too.\r\n\r\nI think the main drawback of this change is that it will likely slow down the `cargo check`. At a minimum, it'll now be checking your tests _and_ their dependencies. The `cargo check` docs also say that including `--tests` as I have here may cause your lib crate to be built _twice_, once for the normal target and again for unit tests. My reading of that caveat suggests that \"building twice\" means it's built once for the tests _inside_ your lib, with a test profile, and again for any consumers of your lib, now using a normal release profile or similar. This doesn't seem surprising.\r\n\r\nVery minor caveat: `--tests`  will not include tests within a binary if it has `test = false` set in `Cargo.toml`. (I discovered this manually by trial-and-error, but hey, it actually says that in the docs!) This is likely not an issue, but _does_ mean that if you are -- for whatever reason -- disabling tests like that and then manually specifying `cargo test --package <...> --bin <...>` to run them, rust-analyzer will remain unaware of proc-macros in your tests.\r\n\r\nI have confirmed this fixes the original issue in my sandbox example linked in #7034 and in my own project in which I originally discovered this. I've left it configured as my default RA language server and will report back if I notice any unexpected side-effects.\r\n\r\nFixes #7034\r\n\n\nCo-authored-by: Kaelin Laundry <wasabifan@outlook.com>", "tree": {"sha": "037222e02904cb28f793721da4f9ebc6320ffed5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/037222e02904cb28f793721da4f9ebc6320ffed5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a485c9b21dd927beee3dde5ac9ed56f61806cf55", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf7e5WCRBK7hj4Ov3rIwAAdHIIADxGB7N5VI1on6sfq1vTJOMb\nVxc7YTtnwzIckr2QjUNwkag2RqpGC+w1Vk8GA2QR3dNjYl6MyN7IUuzIoNKpbJza\n7TNhQVjG8eVBWN53vsP2SU5YkFm793l4xmKgtZniV9/BuLCOCn/ayShcMDtFIZQN\nyhdnaJyQV3hetbiudqOJySvM2FM2kqZzmJz9yWe/XwjGxK7ZnJ0GiZsk1/ZxFXOF\nFQJpzPmTN+/UhiFdlavGbRj6JGUbybjvlhAwSLkdt0dsM7C1IMC2BiR8ryHdMJ+W\n+EJsco2+9vBmbBujnfSbEeTdySqloH0x4B2RzkiYpTwqhG+LzZ+e2Kygkz55cpg=\n=jgWJ\n-----END PGP SIGNATURE-----\n", "payload": "tree 037222e02904cb28f793721da4f9ebc6320ffed5\nparent 0a3d08e2e3fa447de70e6a7d8c07bc11cf23f5c4\nparent 7b3b0bad1fe992441ae1c954ac63528d600a5ce4\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1609428566 +0000\ncommitter GitHub <noreply@github.com> 1609428566 +0000\n\nMerge #7071\n\n7071: Pass --all-targets to \"cargo check\" when discovering external resources r=matklad a=WasabiFan\n\nThere is a repro case and background in the linked issue.\r\n\r\nIn short, the goal of this MR is to allow rust-analyzer to discover proc-macros which come from your tests (including, most importantly, dev-dependencies).\r\n\r\nBy default, `cargo check` implies the equivalent of `--lib --bins`, meaning it'll check your libraries and binaries -- but not tests! This means proc-macros (or, I guess, build scripts as well) weren't discovered by rust-analyzer if they came from tests.\r\n\r\nOne solution would be to manually add `--lib --bins --tests` (i.e., just augment the effective options to include tests). However, in this MR, I threw in `--all-targets`, which [according to the docs](https://doc.rust-lang.org/cargo/commands/cargo-check.html#target-selection) implies `--benches --examples` too. I have absolutely no idea what repercussions that will have on rust-analyzer for other projects, nor do I know if it's a problem that build scripts will now be discovered for tests/examples/benches. But I am not aware of a reason you _wouldn't_ want to discover these things in your examples too.\r\n\r\nI think the main drawback of this change is that it will likely slow down the `cargo check`. At a minimum, it'll now be checking your tests _and_ their dependencies. The `cargo check` docs also say that including `--tests` as I have here may cause your lib crate to be built _twice_, once for the normal target and again for unit tests. My reading of that caveat suggests that \"building twice\" means it's built once for the tests _inside_ your lib, with a test profile, and again for any consumers of your lib, now using a normal release profile or similar. This doesn't seem surprising.\r\n\r\nVery minor caveat: `--tests`  will not include tests within a binary if it has `test = false` set in `Cargo.toml`. (I discovered this manually by trial-and-error, but hey, it actually says that in the docs!) This is likely not an issue, but _does_ mean that if you are -- for whatever reason -- disabling tests like that and then manually specifying `cargo test --package <...> --bin <...>` to run them, rust-analyzer will remain unaware of proc-macros in your tests.\r\n\r\nI have confirmed this fixes the original issue in my sandbox example linked in #7034 and in my own project in which I originally discovered this. I've left it configured as my default RA language server and will report back if I notice any unexpected side-effects.\r\n\r\nFixes #7034\r\n\n\nCo-authored-by: Kaelin Laundry <wasabifan@outlook.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a485c9b21dd927beee3dde5ac9ed56f61806cf55", "html_url": "https://github.com/rust-lang/rust/commit/a485c9b21dd927beee3dde5ac9ed56f61806cf55", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a485c9b21dd927beee3dde5ac9ed56f61806cf55/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a3d08e2e3fa447de70e6a7d8c07bc11cf23f5c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a3d08e2e3fa447de70e6a7d8c07bc11cf23f5c4", "html_url": "https://github.com/rust-lang/rust/commit/0a3d08e2e3fa447de70e6a7d8c07bc11cf23f5c4"}, {"sha": "7b3b0bad1fe992441ae1c954ac63528d600a5ce4", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b3b0bad1fe992441ae1c954ac63528d600a5ce4", "html_url": "https://github.com/rust-lang/rust/commit/7b3b0bad1fe992441ae1c954ac63528d600a5ce4"}], "stats": {"total": 5, "additions": 5, "deletions": 0}, "files": [{"sha": "1700cb8a7166f09050b77acde084fdda88f60f1d", "filename": "crates/project_model/src/cargo_workspace.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a485c9b21dd927beee3dde5ac9ed56f61806cf55/crates%2Fproject_model%2Fsrc%2Fcargo_workspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a485c9b21dd927beee3dde5ac9ed56f61806cf55/crates%2Fproject_model%2Fsrc%2Fcargo_workspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fcargo_workspace.rs?ref=a485c9b21dd927beee3dde5ac9ed56f61806cf55", "patch": "@@ -350,6 +350,11 @@ pub(crate) fn load_extern_resources(\n     let mut cmd = Command::new(toolchain::cargo());\n     cmd.args(&[\"check\", \"--message-format=json\", \"--manifest-path\"]).arg(cargo_toml);\n \n+    // --all-targets includes tests, benches and examples in addition to the\n+    // default lib and bins. This is an independent concept from the --targets\n+    // flag below.\n+    cmd.arg(\"--all-targets\");\n+\n     if let Some(target) = &cargo_features.target {\n         cmd.args(&[\"--target\", target]);\n     }"}]}