{"sha": "921a82007a0343c9180e7675f4b45813341daf63", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyMWE4MjAwN2EwMzQzYzkxODBlNzY3NWY0YjQ1ODEzMzQxZGFmNjM=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2021-03-25T00:07:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-25T00:07:28Z"}, "message": "Rollup merge of #83421 - faern:add-into-err, r=joshtriplett\n\nAdd Result::into_err where the Ok variant is the never type\n\nEquivalent of #66045 but for the inverse situation where `T: Into<!>` rather than `E: Into<!>`.\n\nI'm using the same feature gate name. I can't see why one of these methods would be OK to stabilize but not the other.\n\nTracking issue: #61695", "tree": {"sha": "8d845bc5fedbdc6e90bfe7e81e0592cd0f364859", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d845bc5fedbdc6e90bfe7e81e0592cd0f364859"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/921a82007a0343c9180e7675f4b45813341daf63", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgW9RACRBK7hj4Ov3rIwAAdHIIAGH3fvy15/MniM88fB3NHLaE\nQtkZHFtNfc1jyPfyK7R4QwpR5MAlD90pB9G5WOQwddpzGO7jmK4AQuPB0oeaxQTg\n3+a6+Zes22GnPNKJXTsXrn/lF+fy3E0fdVuAQ2w1t9+x4//n2tgFjMHGUbGbLvYS\no+1a9NtNrNfuHotuXAbUrFZ/n2NnEIpYwBmdSIZgTYDaPvYqFdfzq2CPPqveZo0Z\nhC1T0K0LUplCtzI6PoG7jT3MPJZidPC0f/7pwI1dBN+pHetMkLlrhhg4Lh2kdyMM\nT6zsKkjFdWrFNPFGOqLlJgsMGAs1TaPQfTsYeb8tj2sNgD44THAynlnMfxRrNcg=\n=ecgM\n-----END PGP SIGNATURE-----\n", "payload": "tree 8d845bc5fedbdc6e90bfe7e81e0592cd0f364859\nparent 72a2d0e3867005c90aaf9ec435735fb52809a127\nparent 3bf076e76b2afde77f1c0d2c763cef32407f0465\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1616630848 +0900\ncommitter GitHub <noreply@github.com> 1616630848 +0900\n\nRollup merge of #83421 - faern:add-into-err, r=joshtriplett\n\nAdd Result::into_err where the Ok variant is the never type\n\nEquivalent of #66045 but for the inverse situation where `T: Into<!>` rather than `E: Into<!>`.\n\nI'm using the same feature gate name. I can't see why one of these methods would be OK to stabilize but not the other.\n\nTracking issue: #61695\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/921a82007a0343c9180e7675f4b45813341daf63", "html_url": "https://github.com/rust-lang/rust/commit/921a82007a0343c9180e7675f4b45813341daf63", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/921a82007a0343c9180e7675f4b45813341daf63/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72a2d0e3867005c90aaf9ec435735fb52809a127", "url": "https://api.github.com/repos/rust-lang/rust/commits/72a2d0e3867005c90aaf9ec435735fb52809a127", "html_url": "https://github.com/rust-lang/rust/commit/72a2d0e3867005c90aaf9ec435735fb52809a127"}, {"sha": "3bf076e76b2afde77f1c0d2c763cef32407f0465", "url": "https://api.github.com/repos/rust-lang/rust/commits/3bf076e76b2afde77f1c0d2c763cef32407f0465", "html_url": "https://github.com/rust-lang/rust/commit/3bf076e76b2afde77f1c0d2c763cef32407f0465"}], "stats": {"total": 58, "additions": 58, "deletions": 0}, "files": [{"sha": "20f8095b7d1cee998b7115c3949b65514839ed01", "filename": "library/core/src/result.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/921a82007a0343c9180e7675f4b45813341daf63/library%2Fcore%2Fsrc%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/921a82007a0343c9180e7675f4b45813341daf63/library%2Fcore%2Fsrc%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fresult.rs?ref=921a82007a0343c9180e7675f4b45813341daf63", "patch": "@@ -1167,6 +1167,42 @@ impl<T, E: Into<!>> Result<T, E> {\n     }\n }\n \n+#[unstable(feature = \"unwrap_infallible\", reason = \"newly added\", issue = \"61695\")]\n+impl<T: Into<!>, E> Result<T, E> {\n+    /// Returns the contained [`Err`] value, but never panics.\n+    ///\n+    /// Unlike [`unwrap_err`], this method is known to never panic on the\n+    /// result types it is implemented for. Therefore, it can be used\n+    /// instead of `unwrap_err` as a maintainability safeguard that will fail\n+    /// to compile if the ok type of the `Result` is later changed\n+    /// to a type that can actually occur.\n+    ///\n+    /// [`unwrap_err`]: Result::unwrap_err\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// # #![feature(never_type)]\n+    /// # #![feature(unwrap_infallible)]\n+    ///\n+    /// fn only_bad_news() -> Result<!, String> {\n+    ///     Err(\"Oops, it failed\".into())\n+    /// }\n+    ///\n+    /// let error: String = only_bad_news().into_err();\n+    /// println!(\"{}\", error);\n+    /// ```\n+    #[inline]\n+    pub fn into_err(self) -> E {\n+        match self {\n+            Ok(x) => x.into(),\n+            Err(e) => e,\n+        }\n+    }\n+}\n+\n impl<T: Deref, E> Result<T, E> {\n     /// Converts from `Result<T, E>` (or `&Result<T, E>`) to `Result<&<T as Deref>::Target, &E>`.\n     ///"}, {"sha": "c461ab380ad3d2641b9bdc24ef3e36dfe5444d5a", "filename": "library/core/tests/result.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/921a82007a0343c9180e7675f4b45813341daf63/library%2Fcore%2Ftests%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/921a82007a0343c9180e7675f4b45813341daf63/library%2Fcore%2Ftests%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fresult.rs?ref=921a82007a0343c9180e7675f4b45813341daf63", "patch": "@@ -225,6 +225,28 @@ pub fn test_into_ok() {\n     assert_eq!(infallible_op2().into_ok(), 667);\n }\n \n+#[test]\n+pub fn test_into_err() {\n+    fn until_error_op() -> Result<!, isize> {\n+        Err(666)\n+    }\n+\n+    assert_eq!(until_error_op().into_err(), 666);\n+\n+    enum MyNeverToken {}\n+    impl From<MyNeverToken> for ! {\n+        fn from(never: MyNeverToken) -> ! {\n+            match never {}\n+        }\n+    }\n+\n+    fn until_error_op2() -> Result<MyNeverToken, isize> {\n+        Err(667)\n+    }\n+\n+    assert_eq!(until_error_op2().into_err(), 667);\n+}\n+\n #[test]\n fn test_try() {\n     fn try_result_some() -> Option<u8> {"}]}