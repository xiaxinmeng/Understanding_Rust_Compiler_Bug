{"sha": "223b58e484675bedc0fe4ed378e0ce8991fca1f3", "node_id": "C_kwDOAAsO6NoAKDIyM2I1OGU0ODQ2NzViZWRjMGZlNGVkMzc4ZTBjZTg5OTFmY2ExZjM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-27T07:01:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-27T07:01:29Z"}, "message": "Auto merge of #93957 - SaltyKitkat:stablize_const_ptr_offset, r=dtolnay\n\nStabilize const_ptr_offset\n\nClose #71499", "tree": {"sha": "1effeaa5a2a646dc88af21ab30e3a7ae040ebf13", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1effeaa5a2a646dc88af21ab30e3a7ae040ebf13"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/223b58e484675bedc0fe4ed378e0ce8991fca1f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/223b58e484675bedc0fe4ed378e0ce8991fca1f3", "html_url": "https://github.com/rust-lang/rust/commit/223b58e484675bedc0fe4ed378e0ce8991fca1f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/223b58e484675bedc0fe4ed378e0ce8991fca1f3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "185a3f0a112fd6439247cf15452d0c5dfb3c8c92", "url": "https://api.github.com/repos/rust-lang/rust/commits/185a3f0a112fd6439247cf15452d0c5dfb3c8c92", "html_url": "https://github.com/rust-lang/rust/commit/185a3f0a112fd6439247cf15452d0c5dfb3c8c92"}, {"sha": "333756f1c5bd3eec3bf9de1ae01637f71190c185", "url": "https://api.github.com/repos/rust-lang/rust/commits/333756f1c5bd3eec3bf9de1ae01637f71190c185", "html_url": "https://github.com/rust-lang/rust/commit/333756f1c5bd3eec3bf9de1ae01637f71190c185"}], "stats": {"total": 131, "additions": 62, "deletions": 69}, "files": [{"sha": "abce47e5afe1abe6f149ccf6b803e6c0af05bf44", "filename": "library/alloc/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/223b58e484675bedc0fe4ed378e0ce8991fca1f3/library%2Falloc%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/223b58e484675bedc0fe4ed378e0ce8991fca1f3/library%2Falloc%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Flib.rs?ref=223b58e484675bedc0fe4ed378e0ce8991fca1f3", "patch": "@@ -10,7 +10,6 @@\n #![feature(const_intrinsic_copy)]\n #![feature(const_mut_refs)]\n #![feature(const_nonnull_slice_from_raw_parts)]\n-#![feature(const_ptr_offset)]\n #![feature(const_ptr_write)]\n #![feature(const_try)]\n #![feature(core_intrinsics)]"}, {"sha": "129402ad23a566c067daf8accfc1b7194e16abc3", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/223b58e484675bedc0fe4ed378e0ce8991fca1f3/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/223b58e484675bedc0fe4ed378e0ce8991fca1f3/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=223b58e484675bedc0fe4ed378e0ce8991fca1f3", "patch": "@@ -1168,7 +1168,7 @@ extern \"rust-intrinsic\" {\n     ///\n     /// The stabilized version of this intrinsic is [`pointer::offset`].\n     #[must_use = \"returns a new pointer rather than modifying its argument\"]\n-    #[rustc_const_unstable(feature = \"const_ptr_offset\", issue = \"71499\")]\n+    #[rustc_const_stable(feature = \"const_ptr_offset\", since = \"1.61.0\")]\n     pub fn offset<T>(dst: *const T, offset: isize) -> *const T;\n \n     /// Calculates the offset from a pointer, potentially wrapping.\n@@ -1185,7 +1185,7 @@ extern \"rust-intrinsic\" {\n     ///\n     /// The stabilized version of this intrinsic is [`pointer::wrapping_offset`].\n     #[must_use = \"returns a new pointer rather than modifying its argument\"]\n-    #[rustc_const_unstable(feature = \"const_ptr_offset\", issue = \"71499\")]\n+    #[rustc_const_stable(feature = \"const_ptr_offset\", since = \"1.61.0\")]\n     pub fn arith_offset<T>(dst: *const T, offset: isize) -> *const T;\n \n     /// Equivalent to the appropriate `llvm.memcpy.p0i8.0i8.*` intrinsic, with"}, {"sha": "5c16346cbd1d94e5f259fab570539ea849618dce", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/223b58e484675bedc0fe4ed378e0ce8991fca1f3/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/223b58e484675bedc0fe4ed378e0ce8991fca1f3/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=223b58e484675bedc0fe4ed378e0ce8991fca1f3", "patch": "@@ -126,7 +126,6 @@\n #![feature(const_pin)]\n #![feature(const_replace)]\n #![feature(const_ptr_is_null)]\n-#![feature(const_ptr_offset)]\n #![feature(const_ptr_offset_from)]\n #![feature(const_ptr_read)]\n #![feature(const_ptr_write)]"}, {"sha": "8cdd98149ad3e29aa251d777d81c21c3b42c2f38", "filename": "library/core/src/ptr/const_ptr.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/223b58e484675bedc0fe4ed378e0ce8991fca1f3/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/223b58e484675bedc0fe4ed378e0ce8991fca1f3/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs?ref=223b58e484675bedc0fe4ed378e0ce8991fca1f3", "patch": "@@ -285,7 +285,7 @@ impl<T: ?Sized> *const T {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[must_use = \"returns a new pointer rather than modifying its argument\"]\n-    #[rustc_const_unstable(feature = \"const_ptr_offset\", issue = \"71499\")]\n+    #[rustc_const_stable(feature = \"const_ptr_offset\", since = \"1.61.0\")]\n     #[inline(always)]\n     pub const unsafe fn offset(self, count: isize) -> *const T\n     where\n@@ -347,7 +347,7 @@ impl<T: ?Sized> *const T {\n     /// ```\n     #[stable(feature = \"ptr_wrapping_offset\", since = \"1.16.0\")]\n     #[must_use = \"returns a new pointer rather than modifying its argument\"]\n-    #[rustc_const_unstable(feature = \"const_ptr_offset\", issue = \"71499\")]\n+    #[rustc_const_stable(feature = \"const_ptr_offset\", since = \"1.61.0\")]\n     #[inline(always)]\n     pub const fn wrapping_offset(self, count: isize) -> *const T\n     where\n@@ -566,7 +566,7 @@ impl<T: ?Sized> *const T {\n     /// ```\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[must_use = \"returns a new pointer rather than modifying its argument\"]\n-    #[rustc_const_unstable(feature = \"const_ptr_offset\", issue = \"71499\")]\n+    #[rustc_const_stable(feature = \"const_ptr_offset\", since = \"1.61.0\")]\n     #[inline(always)]\n     pub const unsafe fn add(self, count: usize) -> Self\n     where\n@@ -630,7 +630,7 @@ impl<T: ?Sized> *const T {\n     /// ```\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[must_use = \"returns a new pointer rather than modifying its argument\"]\n-    #[rustc_const_unstable(feature = \"const_ptr_offset\", issue = \"71499\")]\n+    #[rustc_const_stable(feature = \"const_ptr_offset\", since = \"1.61.0\")]\n     #[inline]\n     pub const unsafe fn sub(self, count: usize) -> Self\n     where\n@@ -693,7 +693,7 @@ impl<T: ?Sized> *const T {\n     /// ```\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[must_use = \"returns a new pointer rather than modifying its argument\"]\n-    #[rustc_const_unstable(feature = \"const_ptr_offset\", issue = \"71499\")]\n+    #[rustc_const_stable(feature = \"const_ptr_offset\", since = \"1.61.0\")]\n     #[inline(always)]\n     pub const fn wrapping_add(self, count: usize) -> Self\n     where\n@@ -755,7 +755,7 @@ impl<T: ?Sized> *const T {\n     /// ```\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[must_use = \"returns a new pointer rather than modifying its argument\"]\n-    #[rustc_const_unstable(feature = \"const_ptr_offset\", issue = \"71499\")]\n+    #[rustc_const_stable(feature = \"const_ptr_offset\", since = \"1.61.0\")]\n     #[inline]\n     pub const fn wrapping_sub(self, count: usize) -> Self\n     where"}, {"sha": "0c5b16aa01dc7eb9bf0acf4b404ef1cd53db3a77", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/223b58e484675bedc0fe4ed378e0ce8991fca1f3/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/223b58e484675bedc0fe4ed378e0ce8991fca1f3/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=223b58e484675bedc0fe4ed378e0ce8991fca1f3", "patch": "@@ -295,7 +295,7 @@ impl<T: ?Sized> *mut T {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[must_use = \"returns a new pointer rather than modifying its argument\"]\n-    #[rustc_const_unstable(feature = \"const_ptr_offset\", issue = \"71499\")]\n+    #[rustc_const_stable(feature = \"const_ptr_offset\", since = \"1.61.0\")]\n     #[inline(always)]\n     pub const unsafe fn offset(self, count: isize) -> *mut T\n     where\n@@ -358,7 +358,7 @@ impl<T: ?Sized> *mut T {\n     /// ```\n     #[stable(feature = \"ptr_wrapping_offset\", since = \"1.16.0\")]\n     #[must_use = \"returns a new pointer rather than modifying its argument\"]\n-    #[rustc_const_unstable(feature = \"const_ptr_offset\", issue = \"71499\")]\n+    #[rustc_const_stable(feature = \"const_ptr_offset\", since = \"1.61.0\")]\n     #[inline(always)]\n     pub const fn wrapping_offset(self, count: isize) -> *mut T\n     where\n@@ -680,7 +680,7 @@ impl<T: ?Sized> *mut T {\n     /// ```\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[must_use = \"returns a new pointer rather than modifying its argument\"]\n-    #[rustc_const_unstable(feature = \"const_ptr_offset\", issue = \"71499\")]\n+    #[rustc_const_stable(feature = \"const_ptr_offset\", since = \"1.61.0\")]\n     #[inline(always)]\n     pub const unsafe fn add(self, count: usize) -> Self\n     where\n@@ -744,7 +744,7 @@ impl<T: ?Sized> *mut T {\n     /// ```\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[must_use = \"returns a new pointer rather than modifying its argument\"]\n-    #[rustc_const_unstable(feature = \"const_ptr_offset\", issue = \"71499\")]\n+    #[rustc_const_stable(feature = \"const_ptr_offset\", since = \"1.61.0\")]\n     #[inline]\n     pub const unsafe fn sub(self, count: usize) -> Self\n     where\n@@ -807,7 +807,7 @@ impl<T: ?Sized> *mut T {\n     /// ```\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[must_use = \"returns a new pointer rather than modifying its argument\"]\n-    #[rustc_const_unstable(feature = \"const_ptr_offset\", issue = \"71499\")]\n+    #[rustc_const_stable(feature = \"const_ptr_offset\", since = \"1.61.0\")]\n     #[inline(always)]\n     pub const fn wrapping_add(self, count: usize) -> Self\n     where\n@@ -869,7 +869,7 @@ impl<T: ?Sized> *mut T {\n     /// ```\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[must_use = \"returns a new pointer rather than modifying its argument\"]\n-    #[rustc_const_unstable(feature = \"const_ptr_offset\", issue = \"71499\")]\n+    #[rustc_const_stable(feature = \"const_ptr_offset\", since = \"1.61.0\")]\n     #[inline]\n     pub const fn wrapping_sub(self, count: usize) -> Self\n     where"}, {"sha": "26d4fa15d0a7e9fa49411a2873f0a8e480f66120", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/223b58e484675bedc0fe4ed378e0ce8991fca1f3/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/223b58e484675bedc0fe4ed378e0ce8991fca1f3/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=223b58e484675bedc0fe4ed378e0ce8991fca1f3", "patch": "@@ -499,7 +499,8 @@ impl<T> [T] {\n     /// assert_eq!(x, &[3, 4, 6]);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_unstable(feature = \"const_ptr_offset\", issue = \"71499\")]\n+    #[rustc_const_stable(feature = \"const_ptr_offset\", since = \"1.61.0\")]\n+    #[rustc_allow_const_fn_unstable(const_mut_refs)]\n     #[inline]\n     #[must_use]\n     pub const fn as_mut_ptr(&mut self) -> *mut T {\n@@ -535,7 +536,7 @@ impl<T> [T] {\n     ///\n     /// [`as_ptr`]: slice::as_ptr\n     #[stable(feature = \"slice_ptr_range\", since = \"1.48.0\")]\n-    #[rustc_const_unstable(feature = \"const_ptr_offset\", issue = \"71499\")]\n+    #[rustc_const_stable(feature = \"const_ptr_offset\", since = \"1.61.0\")]\n     #[inline]\n     #[must_use]\n     pub const fn as_ptr_range(&self) -> Range<*const T> {\n@@ -578,7 +579,8 @@ impl<T> [T] {\n     ///\n     /// [`as_mut_ptr`]: slice::as_mut_ptr\n     #[stable(feature = \"slice_ptr_range\", since = \"1.48.0\")]\n-    #[rustc_const_unstable(feature = \"const_ptr_offset\", issue = \"71499\")]\n+    #[rustc_const_stable(feature = \"const_ptr_offset\", since = \"1.61.0\")]\n+    #[rustc_allow_const_fn_unstable(const_mut_refs)]\n     #[inline]\n     #[must_use]\n     pub const fn as_mut_ptr_range(&mut self) -> Range<*mut T> {"}, {"sha": "5f90a76ab74ee22090486d668e44a029ab4fc785", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/223b58e484675bedc0fe4ed378e0ce8991fca1f3/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/223b58e484675bedc0fe4ed378e0ce8991fca1f3/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=223b58e484675bedc0fe4ed378e0ce8991fca1f3", "patch": "@@ -20,7 +20,6 @@\n #![feature(const_ptr_as_ref)]\n #![feature(const_ptr_read)]\n #![feature(const_ptr_write)]\n-#![feature(const_ptr_offset)]\n #![feature(const_trait_impl)]\n #![feature(const_likely)]\n #![feature(core_ffi_c)]"}, {"sha": "9dd669180da0a46692bb0d1a0182a6efd70ee53e", "filename": "src/test/ui/const-ptr/out_of_bounds_read.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/223b58e484675bedc0fe4ed378e0ce8991fca1f3/src%2Ftest%2Fui%2Fconst-ptr%2Fout_of_bounds_read.rs", "raw_url": "https://github.com/rust-lang/rust/raw/223b58e484675bedc0fe4ed378e0ce8991fca1f3/src%2Ftest%2Fui%2Fconst-ptr%2Fout_of_bounds_read.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-ptr%2Fout_of_bounds_read.rs?ref=223b58e484675bedc0fe4ed378e0ce8991fca1f3", "patch": "@@ -1,7 +1,6 @@\n // error-pattern: evaluation of constant value failed\n \n #![feature(const_ptr_read)]\n-#![feature(const_ptr_offset)]\n \n fn main() {\n     use std::ptr;"}, {"sha": "678714d0e055a7254bf3bef4dca34a8e928049f6", "filename": "src/test/ui/const-ptr/out_of_bounds_read.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/223b58e484675bedc0fe4ed378e0ce8991fca1f3/src%2Ftest%2Fui%2Fconst-ptr%2Fout_of_bounds_read.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/223b58e484675bedc0fe4ed378e0ce8991fca1f3/src%2Ftest%2Fui%2Fconst-ptr%2Fout_of_bounds_read.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-ptr%2Fout_of_bounds_read.stderr?ref=223b58e484675bedc0fe4ed378e0ce8991fca1f3", "patch": "@@ -7,10 +7,10 @@ LL |         copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);\n    |         memory access failed: alloc7 has size 4, so pointer to 4 bytes starting at offset 4 is out-of-bounds\n    |         inside `std::ptr::read::<u32>` at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n    |\n-  ::: $DIR/out_of_bounds_read.rs:13:33\n+  ::: $DIR/out_of_bounds_read.rs:12:33\n    |\n LL |     const _READ: u32 = unsafe { ptr::read(PAST_END_PTR) };\n-   |                                 ----------------------- inside `_READ` at $DIR/out_of_bounds_read.rs:13:33\n+   |                                 ----------------------- inside `_READ` at $DIR/out_of_bounds_read.rs:12:33\n \n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n@@ -26,10 +26,10 @@ LL |         copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);\n LL |         unsafe { read(self) }\n    |                  ---------- inside `ptr::const_ptr::<impl *const u32>::read` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n-  ::: $DIR/out_of_bounds_read.rs:14:39\n+  ::: $DIR/out_of_bounds_read.rs:13:39\n    |\n LL |     const _CONST_READ: u32 = unsafe { PAST_END_PTR.read() };\n-   |                                       ------------------- inside `_CONST_READ` at $DIR/out_of_bounds_read.rs:14:39\n+   |                                       ------------------- inside `_CONST_READ` at $DIR/out_of_bounds_read.rs:13:39\n \n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n@@ -45,10 +45,10 @@ LL |         copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);\n LL |         unsafe { read(self) }\n    |                  ---------- inside `ptr::mut_ptr::<impl *mut u32>::read` at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n    |\n-  ::: $DIR/out_of_bounds_read.rs:15:37\n+  ::: $DIR/out_of_bounds_read.rs:14:37\n    |\n LL |     const _MUT_READ: u32 = unsafe { (PAST_END_PTR as *mut u32).read() };\n-   |                                     --------------------------------- inside `_MUT_READ` at $DIR/out_of_bounds_read.rs:15:37\n+   |                                     --------------------------------- inside `_MUT_READ` at $DIR/out_of_bounds_read.rs:14:37\n \n error: aborting due to 3 previous errors\n "}, {"sha": "5ab90324b8f866167a7fa6722f54e7ae2dc72c43", "filename": "src/test/ui/consts/copy-intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/223b58e484675bedc0fe4ed378e0ce8991fca1f3/src%2Ftest%2Fui%2Fconsts%2Fcopy-intrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/223b58e484675bedc0fe4ed378e0ce8991fca1f3/src%2Ftest%2Fui%2Fconsts%2Fcopy-intrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcopy-intrinsic.rs?ref=223b58e484675bedc0fe4ed378e0ce8991fca1f3", "patch": "@@ -2,7 +2,7 @@\n \n // ignore-tidy-linelength\n #![feature(intrinsics, staged_api)]\n-#![feature(const_mut_refs, const_intrinsic_copy, const_ptr_offset)]\n+#![feature(const_mut_refs, const_intrinsic_copy)]\n use std::mem;\n \n extern \"rust-intrinsic\" {"}, {"sha": "38c38d1ae673281fd05700d62afa1e2731f1baa8", "filename": "src/test/ui/consts/invalid-union.32bit.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/223b58e484675bedc0fe4ed378e0ce8991fca1f3/src%2Ftest%2Fui%2Fconsts%2Finvalid-union.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/223b58e484675bedc0fe4ed378e0ce8991fca1f3/src%2Ftest%2Fui%2Fconsts%2Finvalid-union.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Finvalid-union.32bit.stderr?ref=223b58e484675bedc0fe4ed378e0ce8991fca1f3", "patch": "@@ -1,5 +1,5 @@\n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/invalid-union.rs:41:1\n+  --> $DIR/invalid-union.rs:40:1\n    |\n LL | fn main() {\n    | ^^^^^^^^^ type validation failed at .<deref>.y.<enum-variant(B)>.0: encountered `UnsafeCell` in a `const`\n@@ -10,7 +10,7 @@ LL | fn main() {\n            }\n \n error: erroneous constant used\n-  --> $DIR/invalid-union.rs:42:25\n+  --> $DIR/invalid-union.rs:41:25\n    |\n LL |     let _: &'static _ = &C;\n    |                         ^^ referenced constant has errors"}, {"sha": "6bfa97a2fded7875aeed1c92e698265662037f8e", "filename": "src/test/ui/consts/invalid-union.64bit.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/223b58e484675bedc0fe4ed378e0ce8991fca1f3/src%2Ftest%2Fui%2Fconsts%2Finvalid-union.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/223b58e484675bedc0fe4ed378e0ce8991fca1f3/src%2Ftest%2Fui%2Fconsts%2Finvalid-union.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Finvalid-union.64bit.stderr?ref=223b58e484675bedc0fe4ed378e0ce8991fca1f3", "patch": "@@ -1,5 +1,5 @@\n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/invalid-union.rs:41:1\n+  --> $DIR/invalid-union.rs:40:1\n    |\n LL | fn main() {\n    | ^^^^^^^^^ type validation failed at .<deref>.y.<enum-variant(B)>.0: encountered `UnsafeCell` in a `const`\n@@ -10,7 +10,7 @@ LL | fn main() {\n            }\n \n error: erroneous constant used\n-  --> $DIR/invalid-union.rs:42:25\n+  --> $DIR/invalid-union.rs:41:25\n    |\n LL |     let _: &'static _ = &C;\n    |                         ^^ referenced constant has errors"}, {"sha": "f3f1af89b2c41b97dff98149404ab6a649fe3016", "filename": "src/test/ui/consts/invalid-union.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/223b58e484675bedc0fe4ed378e0ce8991fca1f3/src%2Ftest%2Fui%2Fconsts%2Finvalid-union.rs", "raw_url": "https://github.com/rust-lang/rust/raw/223b58e484675bedc0fe4ed378e0ce8991fca1f3/src%2Ftest%2Fui%2Fconsts%2Finvalid-union.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Finvalid-union.rs?ref=223b58e484675bedc0fe4ed378e0ce8991fca1f3", "patch": "@@ -9,7 +9,6 @@\n // build-fail\n // stderr-per-bitwidth\n #![feature(const_mut_refs)]\n-#![feature(const_ptr_offset)]\n #![feature(untagged_unions)]\n use std::cell::Cell;\n "}, {"sha": "2b23626e3d709087e3e14002e6be9612de053c6e", "filename": "src/test/ui/consts/issue-miri-1910.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/223b58e484675bedc0fe4ed378e0ce8991fca1f3/src%2Ftest%2Fui%2Fconsts%2Fissue-miri-1910.rs", "raw_url": "https://github.com/rust-lang/rust/raw/223b58e484675bedc0fe4ed378e0ce8991fca1f3/src%2Ftest%2Fui%2Fconsts%2Fissue-miri-1910.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-miri-1910.rs?ref=223b58e484675bedc0fe4ed378e0ce8991fca1f3", "patch": "@@ -1,6 +1,5 @@\n // error-pattern unable to turn pointer into raw bytes\n #![feature(const_ptr_read)]\n-#![feature(const_ptr_offset)]\n \n const C: () = unsafe {\n     let foo = Some(&42 as *const i32);"}, {"sha": "87882449c7342c936f0249ce7caffb6023ac665e", "filename": "src/test/ui/consts/issue-miri-1910.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/223b58e484675bedc0fe4ed378e0ce8991fca1f3/src%2Ftest%2Fui%2Fconsts%2Fissue-miri-1910.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/223b58e484675bedc0fe4ed378e0ce8991fca1f3/src%2Ftest%2Fui%2Fconsts%2Fissue-miri-1910.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-miri-1910.stderr?ref=223b58e484675bedc0fe4ed378e0ce8991fca1f3", "patch": "@@ -7,9 +7,9 @@ LL |           copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);\n    |           unable to turn pointer into raw bytes\n    |           inside `std::ptr::read::<u8>` at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n    |           inside `ptr::const_ptr::<impl *const u8>::read` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n-   |           inside `C` at $DIR/issue-miri-1910.rs:8:5\n+   |           inside `C` at $DIR/issue-miri-1910.rs:7:5\n    |\n-  ::: $DIR/issue-miri-1910.rs:5:1\n+  ::: $DIR/issue-miri-1910.rs:4:1\n    |\n LL | / const C: () = unsafe {\n LL | |     let foo = Some(&42 as *const i32);"}, {"sha": "f9ddda554fcf0a5e9391f207712ed5fee5825d85", "filename": "src/test/ui/consts/offset.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/223b58e484675bedc0fe4ed378e0ce8991fca1f3/src%2Ftest%2Fui%2Fconsts%2Foffset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/223b58e484675bedc0fe4ed378e0ce8991fca1f3/src%2Ftest%2Fui%2Fconsts%2Foffset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Foffset.rs?ref=223b58e484675bedc0fe4ed378e0ce8991fca1f3", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-#![feature(const_ptr_offset)]\n #![feature(const_ptr_offset_from)]\n use std::ptr;\n "}, {"sha": "939c1e31f9a5265bcffc248b08133444f9aee297", "filename": "src/test/ui/consts/offset_from_ub.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/223b58e484675bedc0fe4ed378e0ce8991fca1f3/src%2Ftest%2Fui%2Fconsts%2Foffset_from_ub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/223b58e484675bedc0fe4ed378e0ce8991fca1f3/src%2Ftest%2Fui%2Fconsts%2Foffset_from_ub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Foffset_from_ub.rs?ref=223b58e484675bedc0fe4ed378e0ce8991fca1f3", "patch": "@@ -1,4 +1,4 @@\n-#![feature(const_ptr_offset_from, const_ptr_offset)]\n+#![feature(const_ptr_offset_from)]\n #![feature(core_intrinsics)]\n \n use std::intrinsics::ptr_offset_from;"}, {"sha": "1b01e4fd14731037a4fe3f8b3a0d26da447a9715", "filename": "src/test/ui/consts/offset_ub.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/223b58e484675bedc0fe4ed378e0ce8991fca1f3/src%2Ftest%2Fui%2Fconsts%2Foffset_ub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/223b58e484675bedc0fe4ed378e0ce8991fca1f3/src%2Ftest%2Fui%2Fconsts%2Foffset_ub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Foffset_ub.rs?ref=223b58e484675bedc0fe4ed378e0ce8991fca1f3", "patch": "@@ -1,4 +1,3 @@\n-#![feature(const_ptr_offset)]\n use std::ptr;\n \n // normalize-stderr-test \"alloc\\d+\" -> \"allocN\""}, {"sha": "4d3e7ee2411106da7c7cce2b2bad58f81282f527", "filename": "src/test/ui/consts/offset_ub.stderr", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/223b58e484675bedc0fe4ed378e0ce8991fca1f3/src%2Ftest%2Fui%2Fconsts%2Foffset_ub.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/223b58e484675bedc0fe4ed378e0ce8991fca1f3/src%2Ftest%2Fui%2Fconsts%2Foffset_ub.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Foffset_ub.stderr?ref=223b58e484675bedc0fe4ed378e0ce8991fca1f3", "patch": "@@ -7,10 +7,10 @@ LL |         unsafe { intrinsics::offset(self, count) }\n    |                  overflowing in-bounds pointer arithmetic\n    |                  inside `ptr::const_ptr::<impl *const u8>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n-  ::: $DIR/offset_ub.rs:8:46\n+  ::: $DIR/offset_ub.rs:7:46\n    |\n LL | pub const BEFORE_START: *const u8 = unsafe { (&0u8 as *const u8).offset(-1) };\n-   |                                              ------------------------------ inside `BEFORE_START` at $DIR/offset_ub.rs:8:46\n+   |                                              ------------------------------ inside `BEFORE_START` at $DIR/offset_ub.rs:7:46\n \n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n@@ -21,10 +21,10 @@ LL |         unsafe { intrinsics::offset(self, count) }\n    |                  pointer arithmetic failed: allocN has size 1, so pointer to 2 bytes starting at offset 0 is out-of-bounds\n    |                  inside `ptr::const_ptr::<impl *const u8>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n-  ::: $DIR/offset_ub.rs:9:43\n+  ::: $DIR/offset_ub.rs:8:43\n    |\n LL | pub const AFTER_END: *const u8 = unsafe { (&0u8 as *const u8).offset(2) };\n-   |                                           ----------------------------- inside `AFTER_END` at $DIR/offset_ub.rs:9:43\n+   |                                           ----------------------------- inside `AFTER_END` at $DIR/offset_ub.rs:8:43\n \n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n@@ -35,10 +35,10 @@ LL |         unsafe { intrinsics::offset(self, count) }\n    |                  pointer arithmetic failed: allocN has size 100, so pointer to 101 bytes starting at offset 0 is out-of-bounds\n    |                  inside `ptr::const_ptr::<impl *const u8>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n-  ::: $DIR/offset_ub.rs:10:45\n+  ::: $DIR/offset_ub.rs:9:45\n    |\n LL | pub const AFTER_ARRAY: *const u8 = unsafe { [0u8; 100].as_ptr().offset(101) };\n-   |                                             ------------------------------- inside `AFTER_ARRAY` at $DIR/offset_ub.rs:10:45\n+   |                                             ------------------------------- inside `AFTER_ARRAY` at $DIR/offset_ub.rs:9:45\n \n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n@@ -49,10 +49,10 @@ LL |         unsafe { intrinsics::offset(self, count) }\n    |                  overflowing in-bounds pointer arithmetic\n    |                  inside `ptr::const_ptr::<impl *const u16>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n-  ::: $DIR/offset_ub.rs:12:43\n+  ::: $DIR/offset_ub.rs:11:43\n    |\n LL | pub const OVERFLOW: *const u16 = unsafe { [0u16; 1].as_ptr().offset(isize::MAX) };\n-   |                                           ------------------------------------- inside `OVERFLOW` at $DIR/offset_ub.rs:12:43\n+   |                                           ------------------------------------- inside `OVERFLOW` at $DIR/offset_ub.rs:11:43\n \n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n@@ -63,10 +63,10 @@ LL |         unsafe { intrinsics::offset(self, count) }\n    |                  overflowing in-bounds pointer arithmetic\n    |                  inside `ptr::const_ptr::<impl *const u16>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n-  ::: $DIR/offset_ub.rs:13:44\n+  ::: $DIR/offset_ub.rs:12:44\n    |\n LL | pub const UNDERFLOW: *const u16 = unsafe { [0u16; 1].as_ptr().offset(isize::MIN) };\n-   |                                            ------------------------------------- inside `UNDERFLOW` at $DIR/offset_ub.rs:13:44\n+   |                                            ------------------------------------- inside `UNDERFLOW` at $DIR/offset_ub.rs:12:44\n \n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n@@ -77,10 +77,10 @@ LL |         unsafe { intrinsics::offset(self, count) }\n    |                  overflowing in-bounds pointer arithmetic\n    |                  inside `ptr::const_ptr::<impl *const u8>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n-  ::: $DIR/offset_ub.rs:14:56\n+  ::: $DIR/offset_ub.rs:13:56\n    |\n LL | pub const OVERFLOW_ADDRESS_SPACE: *const u8 = unsafe { (usize::MAX as *const u8).offset(2) };\n-   |                                                        ----------------------------------- inside `OVERFLOW_ADDRESS_SPACE` at $DIR/offset_ub.rs:14:56\n+   |                                                        ----------------------------------- inside `OVERFLOW_ADDRESS_SPACE` at $DIR/offset_ub.rs:13:56\n \n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n@@ -91,10 +91,10 @@ LL |         unsafe { intrinsics::offset(self, count) }\n    |                  overflowing in-bounds pointer arithmetic\n    |                  inside `ptr::const_ptr::<impl *const u8>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n-  ::: $DIR/offset_ub.rs:15:57\n+  ::: $DIR/offset_ub.rs:14:57\n    |\n LL | pub const UNDERFLOW_ADDRESS_SPACE: *const u8 = unsafe { (1 as *const u8).offset(-2) };\n-   |                                                         --------------------------- inside `UNDERFLOW_ADDRESS_SPACE` at $DIR/offset_ub.rs:15:57\n+   |                                                         --------------------------- inside `UNDERFLOW_ADDRESS_SPACE` at $DIR/offset_ub.rs:14:57\n \n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n@@ -105,10 +105,10 @@ LL |         unsafe { intrinsics::offset(self, count) }\n    |                  pointer arithmetic failed: allocN has size 1, so pointer to 2 bytes starting at offset -4 is out-of-bounds\n    |                  inside `ptr::const_ptr::<impl *const u8>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n-  ::: $DIR/offset_ub.rs:16:49\n+  ::: $DIR/offset_ub.rs:15:49\n    |\n LL | pub const NEGATIVE_OFFSET: *const u8 = unsafe { [0u8; 1].as_ptr().wrapping_offset(-2).offset(-2) };\n-   |                                                 ------------------------------------------------ inside `NEGATIVE_OFFSET` at $DIR/offset_ub.rs:16:49\n+   |                                                 ------------------------------------------------ inside `NEGATIVE_OFFSET` at $DIR/offset_ub.rs:15:49\n \n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n@@ -119,10 +119,10 @@ LL |         unsafe { intrinsics::offset(self, count) }\n    |                  pointer arithmetic failed: allocN has size 0, so pointer to 1 byte starting at offset 0 is out-of-bounds\n    |                  inside `ptr::const_ptr::<impl *const u8>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n-  ::: $DIR/offset_ub.rs:18:50\n+  ::: $DIR/offset_ub.rs:17:50\n    |\n LL | pub const ZERO_SIZED_ALLOC: *const u8 = unsafe { [0u8; 0].as_ptr().offset(1) };\n-   |                                                  --------------------------- inside `ZERO_SIZED_ALLOC` at $DIR/offset_ub.rs:18:50\n+   |                                                  --------------------------- inside `ZERO_SIZED_ALLOC` at $DIR/offset_ub.rs:17:50\n \n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n@@ -133,10 +133,10 @@ LL |         unsafe { intrinsics::offset(self, count) as *mut T }\n    |                  pointer arithmetic failed: 0x1 is not a valid pointer\n    |                  inside `ptr::mut_ptr::<impl *mut u8>::offset` at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n    |\n-  ::: $DIR/offset_ub.rs:19:42\n+  ::: $DIR/offset_ub.rs:18:42\n    |\n LL | pub const DANGLING: *const u8 = unsafe { ptr::NonNull::<u8>::dangling().as_ptr().offset(4) };\n-   |                                          ------------------------------------------------- inside `DANGLING` at $DIR/offset_ub.rs:19:42\n+   |                                          ------------------------------------------------- inside `DANGLING` at $DIR/offset_ub.rs:18:42\n \n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n@@ -147,10 +147,10 @@ LL |         unsafe { intrinsics::offset(self, count) }\n    |                  pointer arithmetic failed: null pointer is not a valid pointer\n    |                  inside `ptr::const_ptr::<impl *const u8>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n-  ::: $DIR/offset_ub.rs:22:50\n+  ::: $DIR/offset_ub.rs:21:50\n    |\n LL | pub const NULL_OFFSET_ZERO: *const u8 = unsafe { ptr::null::<u8>().offset(0) };\n-   |                                                  --------------------------- inside `NULL_OFFSET_ZERO` at $DIR/offset_ub.rs:22:50\n+   |                                                  --------------------------- inside `NULL_OFFSET_ZERO` at $DIR/offset_ub.rs:21:50\n \n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n@@ -161,10 +161,10 @@ LL |         unsafe { intrinsics::offset(self, count) }\n    |                  pointer arithmetic failed: 0x7f..f is not a valid pointer\n    |                  inside `ptr::const_ptr::<impl *const u8>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n-  ::: $DIR/offset_ub.rs:25:47\n+  ::: $DIR/offset_ub.rs:24:47\n    |\n LL | pub const UNDERFLOW_ABS: *const u8 = unsafe { (usize::MAX as *const u8).offset(isize::MIN) };\n-   |                                               -------------------------------------------- inside `UNDERFLOW_ABS` at $DIR/offset_ub.rs:25:47\n+   |                                               -------------------------------------------- inside `UNDERFLOW_ABS` at $DIR/offset_ub.rs:24:47\n \n error: aborting due to 12 previous errors\n "}, {"sha": "20233db09c90b8af70991fdd0e623f5339a2559a", "filename": "src/test/ui/consts/ptr_comparisons.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/223b58e484675bedc0fe4ed378e0ce8991fca1f3/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/223b58e484675bedc0fe4ed378e0ce8991fca1f3/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.rs?ref=223b58e484675bedc0fe4ed378e0ce8991fca1f3", "patch": "@@ -7,7 +7,6 @@\n #![feature(\n     core_intrinsics,\n     const_raw_ptr_comparison,\n-    const_ptr_offset,\n )]\n \n const FOO: &usize = &42;"}, {"sha": "678ce5d3a35c8aa40065353ca73d7f73427d3b63", "filename": "src/test/ui/consts/ptr_comparisons.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/223b58e484675bedc0fe4ed378e0ce8991fca1f3/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/223b58e484675bedc0fe4ed378e0ce8991fca1f3/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.stderr?ref=223b58e484675bedc0fe4ed378e0ce8991fca1f3", "patch": "@@ -7,19 +7,19 @@ LL |         unsafe { intrinsics::offset(self, count) }\n    |                  pointer arithmetic failed: alloc3 has size $WORD, so pointer to $TWO_WORDS bytes starting at offset 0 is out-of-bounds\n    |                  inside `ptr::const_ptr::<impl *const usize>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n-  ::: $DIR/ptr_comparisons.rs:59:34\n+  ::: $DIR/ptr_comparisons.rs:58:34\n    |\n LL | const _: *const usize = unsafe { (FOO as *const usize).offset(2) };\n-   |                                  ------------------------------- inside `_` at $DIR/ptr_comparisons.rs:59:34\n+   |                                  ------------------------------- inside `_` at $DIR/ptr_comparisons.rs:58:34\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/ptr_comparisons.rs:62:33\n+  --> $DIR/ptr_comparisons.rs:61:33\n    |\n LL |     unsafe { std::ptr::addr_of!((*(FOO as *const usize as *const [u8; 1000]))[999]) };\n    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereferencing pointer failed: alloc3 has size $WORD, so pointer to 1000 bytes starting at offset 0 is out-of-bounds\n \n error: any use of this value will cause an error\n-  --> $DIR/ptr_comparisons.rs:66:27\n+  --> $DIR/ptr_comparisons.rs:65:27\n    |\n LL | const _: usize = unsafe { std::mem::transmute::<*const usize, usize>(FOO) + 4 };\n    | --------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n@@ -31,7 +31,7 @@ LL | const _: usize = unsafe { std::mem::transmute::<*const usize, usize>(FOO) +\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/ptr_comparisons.rs:71:27\n+  --> $DIR/ptr_comparisons.rs:70:27\n    |\n LL | const _: usize = unsafe { *std::mem::transmute::<&&usize, &usize>(&FOO) + 4 };\n    | --------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---"}]}