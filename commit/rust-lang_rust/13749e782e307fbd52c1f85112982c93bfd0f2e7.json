{"sha": "13749e782e307fbd52c1f85112982c93bfd0f2e7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzNzQ5ZTc4MmUzMDdmYmQ1MmMxZjg1MTEyOTgyYzkzYmZkMGYyZTc=", "commit": {"author": {"name": "Yoshua Wuyts", "email": "yoshuawuyts@gmail.com", "date": "2021-08-09T16:27:01Z"}, "committer": {"name": "Yoshua Wuyts", "email": "yoshuawuyts@gmail.com", "date": "2021-08-09T16:27:01Z"}, "message": "move code around", "tree": {"sha": "960819d24d2f58f548790f083ad7b9c0c0835888", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/960819d24d2f58f548790f083ad7b9c0c0835888"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13749e782e307fbd52c1f85112982c93bfd0f2e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13749e782e307fbd52c1f85112982c93bfd0f2e7", "html_url": "https://github.com/rust-lang/rust/commit/13749e782e307fbd52c1f85112982c93bfd0f2e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13749e782e307fbd52c1f85112982c93bfd0f2e7/comments", "author": {"login": "yoshuawuyts", "id": 2467194, "node_id": "MDQ6VXNlcjI0NjcxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2467194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yoshuawuyts", "html_url": "https://github.com/yoshuawuyts", "followers_url": "https://api.github.com/users/yoshuawuyts/followers", "following_url": "https://api.github.com/users/yoshuawuyts/following{/other_user}", "gists_url": "https://api.github.com/users/yoshuawuyts/gists{/gist_id}", "starred_url": "https://api.github.com/users/yoshuawuyts/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yoshuawuyts/subscriptions", "organizations_url": "https://api.github.com/users/yoshuawuyts/orgs", "repos_url": "https://api.github.com/users/yoshuawuyts/repos", "events_url": "https://api.github.com/users/yoshuawuyts/events{/privacy}", "received_events_url": "https://api.github.com/users/yoshuawuyts/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yoshuawuyts", "id": 2467194, "node_id": "MDQ6VXNlcjI0NjcxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2467194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yoshuawuyts", "html_url": "https://github.com/yoshuawuyts", "followers_url": "https://api.github.com/users/yoshuawuyts/followers", "following_url": "https://api.github.com/users/yoshuawuyts/following{/other_user}", "gists_url": "https://api.github.com/users/yoshuawuyts/gists{/gist_id}", "starred_url": "https://api.github.com/users/yoshuawuyts/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yoshuawuyts/subscriptions", "organizations_url": "https://api.github.com/users/yoshuawuyts/orgs", "repos_url": "https://api.github.com/users/yoshuawuyts/repos", "events_url": "https://api.github.com/users/yoshuawuyts/events{/privacy}", "received_events_url": "https://api.github.com/users/yoshuawuyts/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "457eede79521d947fcfe067270652c0294c7fcd9", "url": "https://api.github.com/repos/rust-lang/rust/commits/457eede79521d947fcfe067270652c0294c7fcd9", "html_url": "https://github.com/rust-lang/rust/commit/457eede79521d947fcfe067270652c0294c7fcd9"}], "stats": {"total": 25, "additions": 12, "deletions": 13}, "files": [{"sha": "bcabca64b324249bd930d2076f2019c35401cb70", "filename": "crates/ide_assists/src/handlers/replace_derive_with_manual_impl.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/13749e782e307fbd52c1f85112982c93bfd0f2e7/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13749e782e307fbd52c1f85112982c93bfd0f2e7/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs?ref=13749e782e307fbd52c1f85112982c93bfd0f2e7", "patch": "@@ -189,15 +189,15 @@ fn gen_trait_body_impl(\n     match trait_path.segment()?.name_ref()?.text().as_str() {\n         \"Debug\" => gen_debug_impl(adt, func, annotated_name),\n         \"Default\" => gen_default_impl(adt, func),\n-        _ => Some(()),\n+        _ => None,\n     }\n }\n \n /// Generate a `Debug` impl based on the fields and members of the target type.\n fn gen_debug_impl(adt: &ast::Adt, func: &ast::Fn, annotated_name: &ast::Name) -> Option<()> {\n     match adt {\n         // `Debug` cannot be derived for unions, so no default impl can be provided.\n-        ast::Adt::Union(_) => Some(()),\n+        ast::Adt::Union(_) => None,\n \n         // => match self { Self::Variant => write!(f, \"Variant\") }\n         ast::Adt::Enum(enum_) => {\n@@ -279,11 +279,17 @@ fn gen_debug_impl(adt: &ast::Adt, func: &ast::Fn, annotated_name: &ast::Name) ->\n \n /// Generate a `Debug` impl based on the fields and members of the target type.\n fn gen_default_impl(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n-    return match adt {\n+    fn gen_default_call() -> ast::Expr {\n+        let trait_name = make::ext::ident_path(\"Default\");\n+        let method_name = make::ext::ident_path(\"default\");\n+        let fn_name = make::expr_path(make::path_concat(trait_name, method_name));\n+        make::expr_call(fn_name, make::arg_list(None))\n+    }\n+    match adt {\n         // `Debug` cannot be derived for unions, so no default impl can be provided.\n-        ast::Adt::Union(_) => Some(()),\n+        ast::Adt::Union(_) => None,\n         // Deriving `Debug` for enums is not stable yet.\n-        ast::Adt::Enum(_) => Some(()),\n+        ast::Adt::Enum(_) => None,\n         ast::Adt::Struct(strukt) => {\n             let expr = match strukt.field_list() {\n                 Some(ast::FieldList::RecordFieldList(field_list)) => {\n@@ -311,15 +317,8 @@ fn gen_default_impl(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n             };\n             let body = make::block_expr(None, Some(expr)).indent(ast::edit::IndentLevel(1));\n             ted::replace(func.body()?.syntax(), body.clone_for_update().syntax());\n-            return Some(());\n+            Some(())\n         }\n-    };\n-\n-    fn gen_default_call() -> ast::Expr {\n-        let trait_name = make::ext::ident_path(\"Default\");\n-        let method_name = make::ext::ident_path(\"default\");\n-        let fn_name = make::expr_path(make::path_concat(trait_name, method_name));\n-        make::expr_call(fn_name, make::arg_list(None))\n     }\n }\n fn update_attribute("}]}