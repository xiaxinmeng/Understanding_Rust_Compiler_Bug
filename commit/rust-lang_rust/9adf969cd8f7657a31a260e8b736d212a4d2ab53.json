{"sha": "9adf969cd8f7657a31a260e8b736d212a4d2ab53", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhZGY5NjljZDhmNzY1N2EzMWEyNjBlOGI3MzZkMjEyYTRkMmFiNTM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-06-13T08:54:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-06-13T08:54:23Z"}, "message": "Auto merge of #42608 - ollie27:rustdoc_variant_reexport, r=QuietMisdreavus\n\nrustdoc: Fix missing enum variant reexports\n\nFixes #35488", "tree": {"sha": "9b607a238bc2467ece00eabf63ca36e71fd2c6a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b607a238bc2467ece00eabf63ca36e71fd2c6a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9adf969cd8f7657a31a260e8b736d212a4d2ab53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9adf969cd8f7657a31a260e8b736d212a4d2ab53", "html_url": "https://github.com/rust-lang/rust/commit/9adf969cd8f7657a31a260e8b736d212a4d2ab53", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9adf969cd8f7657a31a260e8b736d212a4d2ab53/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7fffa2211f3145e444c2d90321a0e39d6150b42", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7fffa2211f3145e444c2d90321a0e39d6150b42", "html_url": "https://github.com/rust-lang/rust/commit/e7fffa2211f3145e444c2d90321a0e39d6150b42"}, {"sha": "68ccba81aea7f4ae86c97d88a6d7a3ea3f758f7e", "url": "https://api.github.com/repos/rust-lang/rust/commits/68ccba81aea7f4ae86c97d88a6d7a3ea3f758f7e", "html_url": "https://github.com/rust-lang/rust/commit/68ccba81aea7f4ae86c97d88a6d7a3ea3f758f7e"}], "stats": {"total": 55, "additions": 37, "deletions": 18}, "files": [{"sha": "a5797a5224d1d25d874518e0282eafc5fd2a2383", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9adf969cd8f7657a31a260e8b736d212a4d2ab53/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9adf969cd8f7657a31a260e8b736d212a4d2ab53/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=9adf969cd8f7657a31a260e8b736d212a4d2ab53", "patch": "@@ -77,10 +77,10 @@ pub fn try_inline(cx: &DocContext, def: Def, name: ast::Name)\n             ret.extend(build_impls(cx, did));\n             clean::EnumItem(build_enum(cx, did))\n         }\n-        // Assume that the enum type is reexported next to the variant, and\n-        // variants don't show up in documentation specially.\n-        // Similarly, consider that struct type is reexported next to its constructor.\n-        Def::Variant(..) |\n+        // Never inline enum variants but leave them shown as reexports.\n+        Def::Variant(..) => return None,\n+        // Assume that enum variants and struct types are reexported next to\n+        // their constructors.\n         Def::VariantCtor(..) |\n         Def::StructCtor(..) => return Some(Vec::new()),\n         Def::Mod(did) => {"}, {"sha": "657aab958bb90dd1c81749f4af05557eb8afade8", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9adf969cd8f7657a31a260e8b736d212a4d2ab53/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9adf969cd8f7657a31a260e8b736d212a4d2ab53/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=9adf969cd8f7657a31a260e8b736d212a4d2ab53", "patch": "@@ -329,25 +329,21 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         if !self.view_item_stack.insert(def_node_id) { return false }\n \n         let ret = match tcx.hir.get(def_node_id) {\n-            hir_map::NodeItem(it) => {\n+            hir_map::NodeItem(&hir::Item { node: hir::ItemMod(ref m), .. }) if glob => {\n                 let prev = mem::replace(&mut self.inlining, true);\n-                if glob {\n-                    match it.node {\n-                        hir::ItemMod(ref m) => {\n-                            for i in &m.item_ids {\n-                                let i = self.cx.tcx.hir.expect_item(i.id);\n-                                self.visit_item(i, None, om);\n-                            }\n-                        }\n-                        hir::ItemEnum(..) => {}\n-                        _ => { panic!(\"glob not mapped to a module or enum\"); }\n-                    }\n-                } else {\n-                    self.visit_item(it, renamed, om);\n+                for i in &m.item_ids {\n+                    let i = self.cx.tcx.hir.expect_item(i.id);\n+                    self.visit_item(i, None, om);\n                 }\n                 self.inlining = prev;\n                 true\n             }\n+            hir_map::NodeItem(it) if !glob => {\n+                let prev = mem::replace(&mut self.inlining, true);\n+                self.visit_item(it, renamed, om);\n+                self.inlining = prev;\n+                true\n+            }\n             _ => false,\n         };\n         self.view_item_stack.remove(&def_node_id);"}, {"sha": "f24166a65f05bd608bf13f8034895af9a33dc115", "filename": "src/test/rustdoc/issue-35488.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/9adf969cd8f7657a31a260e8b736d212a4d2ab53/src%2Ftest%2Frustdoc%2Fissue-35488.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9adf969cd8f7657a31a260e8b736d212a4d2ab53/src%2Ftest%2Frustdoc%2Fissue-35488.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-35488.rs?ref=9adf969cd8f7657a31a260e8b736d212a4d2ab53", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+mod foo {\n+    pub enum Foo {\n+        Bar,\n+    }\n+    pub use self::Foo::*;\n+}\n+\n+// @has 'issue_35488/index.html' '//code' 'pub use self::Foo::*;'\n+// @has 'issue_35488/enum.Foo.html'\n+pub use self::foo::*;\n+\n+// @has 'issue_35488/index.html' '//code' 'pub use std::option::Option::None;'\n+pub use std::option::Option::None;"}]}