{"sha": "b874502a2064fef93cb25aebf31b8ea1c5a41621", "node_id": "C_kwDOAAsO6NoAKGI4NzQ1MDJhMjA2NGZlZjkzY2IyNWFlYmYzMWI4ZWExYzVhNDE2MjE", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-10-06T16:45:16Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-03-26T16:40:18Z"}, "message": "Remove unnecessary raw pointer in __rust_start_panic arg\n\nIt is no longer necessary as __rust_start_panic switched to the Rust abi.", "tree": {"sha": "61892d1b8b54d61c77b774c2750f3b3e943ee5ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61892d1b8b54d61c77b774c2750f3b3e943ee5ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b874502a2064fef93cb25aebf31b8ea1c5a41621", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b874502a2064fef93cb25aebf31b8ea1c5a41621", "html_url": "https://github.com/rust-lang/rust/commit/b874502a2064fef93cb25aebf31b8ea1c5a41621", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b874502a2064fef93cb25aebf31b8ea1c5a41621/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "89c2e3d3d75486e52473de3ae38f0ca6efeffef2", "url": "https://api.github.com/repos/rust-lang/rust/commits/89c2e3d3d75486e52473de3ae38f0ca6efeffef2", "html_url": "https://github.com/rust-lang/rust/commit/89c2e3d3d75486e52473de3ae38f0ca6efeffef2"}], "stats": {"total": 25, "additions": 10, "deletions": 15}, "files": [{"sha": "20b5b6b514685b7b98bf3bf10687a13057988b36", "filename": "library/panic_abort/src/android.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b874502a2064fef93cb25aebf31b8ea1c5a41621/library%2Fpanic_abort%2Fsrc%2Fandroid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b874502a2064fef93cb25aebf31b8ea1c5a41621/library%2Fpanic_abort%2Fsrc%2Fandroid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fpanic_abort%2Fsrc%2Fandroid.rs?ref=b874502a2064fef93cb25aebf31b8ea1c5a41621", "patch": "@@ -15,15 +15,15 @@ type SetAbortMessageType = unsafe extern \"C\" fn(*const libc::c_char) -> ();\n //\n // Weakly resolve the symbol for android_set_abort_message. This function is only available\n // for API >= 21.\n-pub(crate) unsafe fn android_set_abort_message(payload: *mut &mut dyn BoxMeUp) {\n+pub(crate) unsafe fn android_set_abort_message(payload: &mut dyn BoxMeUp) {\n     let func_addr =\n         libc::dlsym(libc::RTLD_DEFAULT, ANDROID_SET_ABORT_MESSAGE.as_ptr() as *const libc::c_char)\n             as usize;\n     if func_addr == 0 {\n         return;\n     }\n \n-    let payload = (*payload).get();\n+    let payload = payload.get();\n     let msg = match payload.downcast_ref::<&'static str>() {\n         Some(msg) => msg.as_bytes(),\n         None => match payload.downcast_ref::<String>() {"}, {"sha": "b193d79b0e1a8bd90a8e085d5642c48c44283773", "filename": "library/panic_abort/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b874502a2064fef93cb25aebf31b8ea1c5a41621/library%2Fpanic_abort%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b874502a2064fef93cb25aebf31b8ea1c5a41621/library%2Fpanic_abort%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fpanic_abort%2Fsrc%2Flib.rs?ref=b874502a2064fef93cb25aebf31b8ea1c5a41621", "patch": "@@ -29,7 +29,7 @@ pub unsafe extern \"C\" fn __rust_panic_cleanup(_: *mut u8) -> *mut (dyn Any + Sen\n \n // \"Leak\" the payload and shim to the relevant abort on the platform in question.\n #[rustc_std_internal_symbol]\n-pub unsafe fn __rust_start_panic(_payload: *mut &mut dyn BoxMeUp) -> u32 {\n+pub unsafe fn __rust_start_panic(_payload: &mut dyn BoxMeUp) -> u32 {\n     // Android has the ability to attach a message as part of the abort.\n     #[cfg(target_os = \"android\")]\n     android::android_set_abort_message(_payload);"}, {"sha": "ce78ab82ef9422fedcbdec995a8e59ef1a3ffc52", "filename": "library/panic_unwind/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b874502a2064fef93cb25aebf31b8ea1c5a41621/library%2Fpanic_unwind%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b874502a2064fef93cb25aebf31b8ea1c5a41621/library%2Fpanic_unwind%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fpanic_unwind%2Fsrc%2Flib.rs?ref=b874502a2064fef93cb25aebf31b8ea1c5a41621", "patch": "@@ -99,8 +99,8 @@ pub unsafe extern \"C\" fn __rust_panic_cleanup(payload: *mut u8) -> *mut (dyn Any\n // Entry point for raising an exception, just delegates to the platform-specific\n // implementation.\n #[rustc_std_internal_symbol]\n-pub unsafe fn __rust_start_panic(payload: *mut &mut dyn BoxMeUp) -> u32 {\n-    let payload = Box::from_raw((*payload).take_box());\n+pub unsafe fn __rust_start_panic(payload: &mut dyn BoxMeUp) -> u32 {\n+    let payload = Box::from_raw(payload.take_box());\n \n     imp::panic(payload)\n }"}, {"sha": "e505466e535a0e37dd05d4b374dd023efe3eeb6e", "filename": "library/std/src/panicking.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b874502a2064fef93cb25aebf31b8ea1c5a41621/library%2Fstd%2Fsrc%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b874502a2064fef93cb25aebf31b8ea1c5a41621/library%2Fstd%2Fsrc%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpanicking.rs?ref=b874502a2064fef93cb25aebf31b8ea1c5a41621", "patch": "@@ -46,12 +46,10 @@ extern \"C\" {\n     fn __rust_panic_cleanup(payload: *mut u8) -> *mut (dyn Any + Send + 'static);\n }\n \n-#[allow(improper_ctypes)]\n extern \"Rust\" {\n-    /// `payload` is passed through another layer of raw pointers as `&mut dyn Trait` is not\n-    /// FFI-safe. `BoxMeUp` lazily performs allocation only when needed (this avoids allocations\n-    /// when using the \"abort\" panic runtime).\n-    fn __rust_start_panic(payload: *mut &mut dyn BoxMeUp) -> u32;\n+    /// `BoxMeUp` lazily performs allocation only when needed (this avoids\n+    /// allocations when using the \"abort\" panic runtime).\n+    fn __rust_start_panic(payload: &mut dyn BoxMeUp) -> u32;\n }\n \n /// This function is called by the panic runtime if FFI code catches a Rust\n@@ -738,10 +736,7 @@ pub fn rust_panic_without_hook(payload: Box<dyn Any + Send>) -> ! {\n /// yer breakpoints.\n #[inline(never)]\n #[cfg_attr(not(test), rustc_std_internal_symbol)]\n-fn rust_panic(mut msg: &mut dyn BoxMeUp) -> ! {\n-    let code = unsafe {\n-        let obj = &mut msg as *mut &mut dyn BoxMeUp;\n-        __rust_start_panic(obj)\n-    };\n+fn rust_panic(msg: &mut dyn BoxMeUp) -> ! {\n+    let code = unsafe { __rust_start_panic(msg) };\n     rtabort!(\"failed to initiate panic, error {code}\")\n }"}]}