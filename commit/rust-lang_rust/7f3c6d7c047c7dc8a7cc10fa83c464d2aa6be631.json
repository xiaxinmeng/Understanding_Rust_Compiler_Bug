{"sha": "7f3c6d7c047c7dc8a7cc10fa83c464d2aa6be631", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmM2M2ZDdjMDQ3YzdkYzhhN2NjMTBmYTgzYzQ2NGQyYWE2YmU2MzE=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-02-15T22:25:42Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-02-15T22:29:24Z"}, "message": "Take Const into account in HIR\n\nCo-Authored-By: Gabriel Smith <yodaldevoid@users.noreply.github.com>", "tree": {"sha": "2185ac256c8d84e99186c4da9d0b8990f4ff8dae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2185ac256c8d84e99186c4da9d0b8990f4ff8dae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f3c6d7c047c7dc8a7cc10fa83c464d2aa6be631", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f3c6d7c047c7dc8a7cc10fa83c464d2aa6be631", "html_url": "https://github.com/rust-lang/rust/commit/7f3c6d7c047c7dc8a7cc10fa83c464d2aa6be631", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f3c6d7c047c7dc8a7cc10fa83c464d2aa6be631/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ddf881110dc496c56b0b7c3b423ed9692af77ff4", "url": "https://api.github.com/repos/rust-lang/rust/commits/ddf881110dc496c56b0b7c3b423ed9692af77ff4", "html_url": "https://github.com/rust-lang/rust/commit/ddf881110dc496c56b0b7c3b423ed9692af77ff4"}], "stats": {"total": 279, "additions": 166, "deletions": 113}, "files": [{"sha": "94b036fded5a156e68431ea26de2e2ff7ca562b6", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f3c6d7c047c7dc8a7cc10fa83c464d2aa6be631/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3c6d7c047c7dc8a7cc10fa83c464d2aa6be631/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=7f3c6d7c047c7dc8a7cc10fa83c464d2aa6be631", "patch": "@@ -334,6 +334,7 @@ pub trait Visitor<'v> : Sized {\n         match generic_arg {\n             GenericArg::Lifetime(lt) => self.visit_lifetime(lt),\n             GenericArg::Type(ty) => self.visit_ty(ty),\n+            GenericArg::Const(ct) => self.visit_anon_const(&ct.value),\n         }\n     }\n     fn visit_lifetime(&mut self, lifetime: &'v Lifetime) {\n@@ -752,6 +753,7 @@ pub fn walk_generic_param<'v, V: Visitor<'v>>(visitor: &mut V, param: &'v Generi\n     match param.kind {\n         GenericParamKind::Lifetime { .. } => {}\n         GenericParamKind::Type { ref default, .. } => walk_list!(visitor, visit_ty, default),\n+        GenericParamKind::Const { ref ty } => visitor.visit_ty(ty),\n     }\n     walk_list!(visitor, visit_param_bound, &param.bounds);\n }"}, {"sha": "e933e4b7180c49c525460f394a28a4f6c206e17b", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7f3c6d7c047c7dc8a7cc10fa83c464d2aa6be631/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3c6d7c047c7dc8a7cc10fa83c464d2aa6be631/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=7f3c6d7c047c7dc8a7cc10fa83c464d2aa6be631", "patch": "@@ -398,6 +398,7 @@ impl<'hir> Map<'hir> {\n                 Some(match param.kind {\n                     GenericParamKind::Lifetime { .. } => Def::Local(param.id),\n                     GenericParamKind::Type { .. } => Def::TyParam(self.local_def_id(param.id)),\n+                    GenericParamKind::Const { .. } => Def::ConstParam(self.local_def_id(param.id)),\n                 })\n             }\n         }"}, {"sha": "727c441b0e8dba59e462567d577b13bcc00dc993", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7f3c6d7c047c7dc8a7cc10fa83c464d2aa6be631/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3c6d7c047c7dc8a7cc10fa83c464d2aa6be631/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=7f3c6d7c047c7dc8a7cc10fa83c464d2aa6be631", "patch": "@@ -179,9 +179,15 @@ impl_stable_hash_for!(struct hir::PathSegment {\n     args\n });\n \n+impl_stable_hash_for!(struct hir::ConstArg {\n+    value,\n+    span,\n+});\n+\n impl_stable_hash_for!(enum hir::GenericArg {\n     Lifetime(lt),\n-    Type(ty)\n+    Type(ty),\n+    Const(ct),\n });\n \n impl_stable_hash_for!(struct hir::GenericArgs {\n@@ -231,6 +237,9 @@ impl<'a> HashStable<StableHashingContext<'a>> for hir::GenericParamKind {\n                 default.hash_stable(hcx, hasher);\n                 synthetic.hash_stable(hcx, hasher);\n             }\n+            hir::GenericParamKind::Const { ref ty } => {\n+                ty.hash_stable(hcx, hasher);\n+            }\n         }\n     }\n }"}, {"sha": "56e7d789356989f7ab1027209686df687657b329", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f3c6d7c047c7dc8a7cc10fa83c464d2aa6be631/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3c6d7c047c7dc8a7cc10fa83c464d2aa6be631/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=7f3c6d7c047c7dc8a7cc10fa83c464d2aa6be631", "patch": "@@ -704,7 +704,7 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n                hir_id, expr_ty, def);\n \n         match def {\n-            Def::StructCtor(..) | Def::VariantCtor(..) | Def::Const(..) |\n+            Def::StructCtor(..) | Def::VariantCtor(..) | Def::Const(..) | Def::ConstParam(..) |\n             Def::AssociatedConst(..) | Def::Fn(..) | Def::Method(..) | Def::SelfCtor(..) => {\n                 Ok(self.cat_rvalue_node(hir_id, span, expr_ty))\n             }"}, {"sha": "08da74f47d450eed321978173dc969e7c38e5659", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 83, "deletions": 82, "changes": 165, "blob_url": "https://github.com/rust-lang/rust/blob/7f3c6d7c047c7dc8a7cc10fa83c464d2aa6be631/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3c6d7c047c7dc8a7cc10fa83c464d2aa6be631/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=7f3c6d7c047c7dc8a7cc10fa83c464d2aa6be631", "patch": "@@ -527,23 +527,20 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                 } else {\n                     0\n                 };\n-                let mut type_count = 0;\n-                let lifetimes = generics\n-                    .params\n-                    .iter()\n-                    .filter_map(|param| match param.kind {\n-                        GenericParamKind::Lifetime { .. } => {\n-                            Some(Region::early(&self.tcx.hir(), &mut index, param))\n-                        }\n-                        GenericParamKind::Type { .. } => {\n-                            type_count += 1;\n-                            None\n-                        }\n-                    })\n-                    .collect();\n+                let mut non_lifetime_count = 0;\n+                let lifetimes = generics.params.iter().filter_map(|param| match param.kind {\n+                    GenericParamKind::Lifetime { .. } => {\n+                        Some(Region::early(&self.tcx.hir(), &mut index, param))\n+                    }\n+                    GenericParamKind::Type { .. } |\n+                    GenericParamKind::Const { .. } => {\n+                        non_lifetime_count += 1;\n+                        None\n+                    }\n+                }).collect();\n                 let scope = Scope::Binder {\n                     lifetimes,\n-                    next_early_index: index + type_count,\n+                    next_early_index: index + non_lifetime_count,\n                     abstract_type_parent: true,\n                     track_lifetime_uses,\n                     s: ROOT_SCOPE,\n@@ -708,7 +705,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n \n                 let mut elision = None;\n                 let mut lifetimes = FxHashMap::default();\n-                let mut type_count = 0;\n+                let mut non_lifetime_count = 0;\n                 for param in &generics.params {\n                     match param.kind {\n                         GenericParamKind::Lifetime { .. } => {\n@@ -725,12 +722,13 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                                 lifetimes.insert(name, reg);\n                             }\n                         }\n-                        GenericParamKind::Type { .. } => {\n-                            type_count += 1;\n+                        GenericParamKind::Type { .. } |\n+                        GenericParamKind::Const { .. } => {\n+                            non_lifetime_count += 1;\n                         }\n                     }\n                 }\n-                let next_early_index = index + type_count;\n+                let next_early_index = index + non_lifetime_count;\n \n                 if let Some(elision_region) = elision {\n                     let scope = Scope::Elision {\n@@ -788,23 +786,20 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                 let generics = &trait_item.generics;\n                 let mut index = self.next_early_index();\n                 debug!(\"visit_ty: index = {}\", index);\n-                let mut type_count = 0;\n-                let lifetimes = generics\n-                    .params\n-                    .iter()\n-                    .filter_map(|param| match param.kind {\n-                        GenericParamKind::Lifetime { .. } => {\n-                            Some(Region::early(&self.tcx.hir(), &mut index, param))\n-                        }\n-                        GenericParamKind::Type { .. } => {\n-                            type_count += 1;\n-                            None\n-                        }\n-                    })\n-                    .collect();\n+                let mut non_lifetime_count = 0;\n+                let lifetimes = generics.params.iter().filter_map(|param| match param.kind {\n+                    GenericParamKind::Lifetime { .. } => {\n+                        Some(Region::early(&self.tcx.hir(), &mut index, param))\n+                    }\n+                    GenericParamKind::Type { .. } |\n+                    GenericParamKind::Const { .. } => {\n+                        non_lifetime_count += 1;\n+                        None\n+                    }\n+                }).collect();\n                 let scope = Scope::Binder {\n                     lifetimes,\n-                    next_early_index: index + type_count,\n+                    next_early_index: index + non_lifetime_count,\n                     s: self.scope,\n                     track_lifetime_uses: true,\n                     abstract_type_parent: true,\n@@ -842,24 +837,21 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n             Type(ref ty) => {\n                 let generics = &impl_item.generics;\n                 let mut index = self.next_early_index();\n-                let mut next_early_index = index;\n+                let mut non_lifetime_count = 0;\n                 debug!(\"visit_ty: index = {}\", index);\n-                let lifetimes = generics\n-                    .params\n-                    .iter()\n-                    .filter_map(|param| match param.kind {\n-                        GenericParamKind::Lifetime { .. } => {\n-                            Some(Region::early(&self.tcx.hir(), &mut index, param))\n-                        }\n-                        GenericParamKind::Type { .. } => {\n-                            next_early_index += 1;\n-                            None\n-                        }\n-                    })\n-                    .collect();\n+                let lifetimes = generics.params.iter().filter_map(|param| match param.kind {\n+                    GenericParamKind::Lifetime { .. } => {\n+                        Some(Region::early(&self.tcx.hir(), &mut index, param))\n+                    }\n+                    GenericParamKind::Const { .. } |\n+                    GenericParamKind::Type { .. } => {\n+                        non_lifetime_count += 1;\n+                        None\n+                    }\n+                }).collect();\n                 let scope = Scope::Binder {\n                     lifetimes,\n-                    next_early_index,\n+                    next_early_index: index + non_lifetime_count,\n                     s: self.scope,\n                     track_lifetime_uses: true,\n                     abstract_type_parent: true,\n@@ -874,19 +866,19 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                 let mut index = self.next_early_index();\n                 let mut next_early_index = index;\n                 debug!(\"visit_ty: index = {}\", index);\n-                let lifetimes = generics\n-                    .params\n-                    .iter()\n-                    .filter_map(|param| match param.kind {\n-                        GenericParamKind::Lifetime { .. } => {\n-                            Some(Region::early(&self.tcx.hir(), &mut index, param))\n-                        }\n-                        GenericParamKind::Type { .. } => {\n-                            next_early_index += 1;\n-                            None\n-                        }\n-                    })\n-                    .collect();\n+                let lifetimes = generics.params.iter().filter_map(|param| match param.kind {\n+                    GenericParamKind::Lifetime { .. } => {\n+                        Some(Region::early(&self.tcx.hir(), &mut index, param))\n+                    }\n+                    GenericParamKind::Type { .. } => {\n+                        next_early_index += 1;\n+                        None\n+                    }\n+                    GenericParamKind::Const { .. } => {\n+                        next_early_index += 1;\n+                        None\n+                    }\n+                }).collect();\n \n                 let scope = Scope::Binder {\n                     lifetimes,\n@@ -950,6 +942,10 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                         self.visit_ty(&ty);\n                     }\n                 }\n+                GenericParamKind::Const { ref ty, .. } => {\n+                    walk_list!(self, visit_param_bound, &param.bounds);\n+                    self.visit_ty(&ty);\n+                }\n             }\n         }\n         for predicate in &generics.where_clause.predicates {\n@@ -1395,6 +1391,10 @@ fn object_lifetime_defaults_for_item(\n                     Set1::Many => Set1::Many,\n                 })\n             }\n+            GenericParamKind::Const { .. } => {\n+                // Generic consts don't impose any constraints.\n+                None\n+            }\n         })\n         .collect()\n }\n@@ -1703,25 +1703,22 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             }\n         }\n \n-        let mut type_count = 0;\n-        let lifetimes = generics\n-            .params\n-            .iter()\n-            .filter_map(|param| match param.kind {\n-                GenericParamKind::Lifetime { .. } => {\n-                    if self.map.late_bound.contains(&param.id) {\n-                        Some(Region::late(&self.tcx.hir(), param))\n-                    } else {\n-                        Some(Region::early(&self.tcx.hir(), &mut index, param))\n-                    }\n-                }\n-                GenericParamKind::Type { .. } => {\n-                    type_count += 1;\n-                    None\n+        let mut non_lifetime_count = 0;\n+        let lifetimes = generics.params.iter().filter_map(|param| match param.kind {\n+            GenericParamKind::Lifetime { .. } => {\n+                if self.map.late_bound.contains(&param.id) {\n+                    Some(Region::late(&self.tcx.hir(), param))\n+                } else {\n+                    Some(Region::early(&self.tcx.hir(), &mut index, param))\n                 }\n-            })\n-            .collect();\n-        let next_early_index = index + type_count;\n+            }\n+            GenericParamKind::Type { .. } |\n+            GenericParamKind::Const { .. } => {\n+                non_lifetime_count += 1;\n+                None\n+            }\n+        }).collect();\n+        let next_early_index = index + non_lifetime_count;\n \n         let scope = Scope::Binder {\n             lifetimes,\n@@ -2011,6 +2008,9 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                     }\n                     i += 1;\n                 }\n+                GenericArg::Const(ct) => {\n+                    self.visit_anon_const(&ct.value);\n+                }\n             }\n         }\n \n@@ -2768,8 +2768,9 @@ fn insert_late_bound_lifetimes(\n         match param.kind {\n             hir::GenericParamKind::Lifetime { .. } => { /* fall through */ }\n \n-            // Types are not late-bound.\n-            hir::GenericParamKind::Type { .. } => continue,\n+            // Neither types nor consts are late-bound.\n+            hir::GenericParamKind::Type { .. }\n+            | hir::GenericParamKind::Const { .. } => continue,\n         }\n \n         let lt_name = hir::LifetimeName::Param(param.name.modern());"}, {"sha": "925cde5b5cc8b3d48057b3399ca707bacda789fe", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7f3c6d7c047c7dc8a7cc10fa83c464d2aa6be631/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3c6d7c047c7dc8a7cc10fa83c464d2aa6be631/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=7f3c6d7c047c7dc8a7cc10fa83c464d2aa6be631", "patch": "@@ -907,11 +907,13 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for InvalidNoMangleItems {\n                     for param in &generics.params {\n                         match param.kind {\n                             GenericParamKind::Lifetime { .. } => {}\n-                            GenericParamKind::Type { .. } => {\n-                                let mut err = cx.struct_span_lint(NO_MANGLE_GENERIC_ITEMS,\n-                                                                  it.span,\n-                                                                  \"functions generic over \\\n-                                                                   types must be mangled\");\n+                            GenericParamKind::Type { .. } |\n+                            GenericParamKind::Const { .. } => {\n+                                let mut err = cx.struct_span_lint(\n+                                    NO_MANGLE_GENERIC_ITEMS,\n+                                    it.span,\n+                                    \"functions generic over types or consts must be mangled\",\n+                                );\n                                 err.span_suggestion_short(\n                                     no_mangle_attr.span,\n                                     \"remove this attribute\",\n@@ -1791,14 +1793,15 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ExplicitOutlivesRequirements {\n \n             for param in &generics.params {\n                 let param_name = match param.kind {\n-                    hir::GenericParamKind::Lifetime { .. } => { continue; },\n+                    hir::GenericParamKind::Lifetime { .. } => continue,\n                     hir::GenericParamKind::Type { .. } => {\n                         match param.name {\n-                            hir::ParamName::Fresh(_) => { continue; },\n-                            hir::ParamName::Error => { continue; },\n-                            hir::ParamName::Plain(name) => name.to_string()\n+                            hir::ParamName::Fresh(_) => continue,\n+                            hir::ParamName::Error => continue,\n+                            hir::ParamName::Plain(name) => name.to_string(),\n                         }\n                     }\n+                    hir::GenericParamKind::Const { .. } => continue,\n                 };\n                 let bound_spans = self.collect_outlives_bound_spans(\n                     cx, def_id, &param_name, &param.bounds, infer_static"}, {"sha": "776adc077fc085a934c654edf6a4f4ed4b540c54", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/7f3c6d7c047c7dc8a7cc10fa83c464d2aa6be631/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3c6d7c047c7dc8a7cc10fa83c464d2aa6be631/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=7f3c6d7c047c7dc8a7cc10fa83c464d2aa6be631", "patch": "@@ -1331,6 +1331,29 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n         }\n     }\n \n+    fn encode_info_for_const_param(&mut self, def_id: DefId) -> Entry<'tcx> {\n+        debug!(\"IsolatedEncoder::encode_info_for_const_param({:?})\", def_id);\n+        let tcx = self.tcx;\n+        Entry {\n+            kind: EntryKind::Type,\n+            visibility: self.lazy(&ty::Visibility::Public),\n+            span: self.lazy(&tcx.def_span(def_id)),\n+            attributes: LazySeq::empty(),\n+            children: LazySeq::empty(),\n+            stability: None,\n+            deprecation: None,\n+\n+            ty: Some(self.encode_item_type(def_id)),\n+            inherent_impls: LazySeq::empty(),\n+            variances: LazySeq::empty(),\n+            generics: None,\n+            predicates: None,\n+            predicates_defined_on: None,\n+\n+            mir: None,\n+        }\n+    }\n+\n     fn encode_info_for_closure(&mut self, def_id: DefId) -> Entry<'tcx> {\n         debug!(\"IsolatedEncoder::encode_info_for_closure({:?})\", def_id);\n         let tcx = self.tcx;\n@@ -1684,6 +1707,11 @@ impl<'a, 'b, 'tcx> IndexBuilder<'a, 'b, 'tcx> {\n                     let encode_info = IsolatedEncoder::encode_info_for_ty_param;\n                     self.record(def_id, encode_info, (def_id, has_default));\n                 }\n+                hir::GenericParamKind::Const { .. } => {\n+                    let def_id = self.tcx.hir().local_def_id(param.id);\n+                    let encode_info = IsolatedEncoder::encode_info_for_const_param;\n+                    self.record(def_id, encode_info, def_id);\n+                }\n             }\n         }\n     }"}, {"sha": "e68702bfe3ae028ba0cec8ca948dd173c8741487", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7f3c6d7c047c7dc8a7cc10fa83c464d2aa6be631/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3c6d7c047c7dc8a7cc10fa83c464d2aa6be631/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=7f3c6d7c047c7dc8a7cc10fa83c464d2aa6be631", "patch": "@@ -1090,7 +1090,10 @@ fn create_mono_items_for_default_impls<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             for param in &generics.params {\n                 match param.kind {\n                     hir::GenericParamKind::Lifetime { .. } => {}\n-                    hir::GenericParamKind::Type { .. } => return,\n+                    hir::GenericParamKind::Type { .. } |\n+                    hir::GenericParamKind::Const { .. } => {\n+                        return\n+                    }\n                 }\n             }\n "}, {"sha": "cde6eb22bb8aed7cd1e28555b9c9cae1b52230cb", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 22, "deletions": 17, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/7f3c6d7c047c7dc8a7cc10fa83c464d2aa6be631/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3c6d7c047c7dc8a7cc10fa83c464d2aa6be631/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=7f3c6d7c047c7dc8a7cc10fa83c464d2aa6be631", "patch": "@@ -500,19 +500,20 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n                                 args.next();\n                                 params.next();\n                             }\n-                            (GenericArg::Lifetime(_), GenericParamDefKind::Type { .. }) => {\n-                                // We expected a type argument, but got a lifetime\n-                                // argument. This is an error, but we need to handle it\n-                                // gracefully so we can report sensible errors. In this\n-                                // case, we're simply going to infer this argument.\n-                                args.next();\n-                            }\n-                            (GenericArg::Type(_), GenericParamDefKind::Lifetime) => {\n-                                // We expected a lifetime argument, but got a type\n+                            (GenericArg::Type(_), GenericParamDefKind::Lifetime)\n+                            | (GenericArg::Const(_), GenericParamDefKind::Lifetime) => {\n+                                // We expected a lifetime argument, but got a type or const\n                                 // argument. That means we're inferring the lifetimes.\n                                 substs.push(inferred_kind(None, param, infer_types));\n                                 params.next();\n                             }\n+                            (_, _) => {\n+                                // We expected one kind of parameter, but the user provided\n+                                // another. This is an error, but we need to handle it\n+                                // gracefully so we can report sensible errors.\n+                                // In this case, we're simply going to infer this argument.\n+                                args.next();\n+                            }\n                         }\n                     }\n                     (Some(_), None) => {\n@@ -524,12 +525,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n                     (None, Some(&param)) => {\n                         // If there are fewer arguments than parameters, it means\n                         // we're inferring the remaining arguments.\n-                        match param.kind {\n-                            GenericParamDefKind::Lifetime | GenericParamDefKind::Type { .. } => {\n-                                let kind = inferred_kind(Some(&substs), param, infer_types);\n-                                substs.push(kind);\n-                            }\n-                        }\n+                        substs.push(inferred_kind(Some(&substs), param, infer_types));\n                         args.next();\n                         params.next();\n                     }\n@@ -1459,9 +1455,10 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n         let mut has_err = false;\n         for segment in segments {\n             segment.with_generic_args(|generic_args| {\n-                let (mut err_for_lt, mut err_for_ty) = (false, false);\n+                let (mut err_for_lt, mut err_for_ty, mut err_for_ct) = (false, false, false);\n                 for arg in &generic_args.args {\n                     let (mut span_err, span, kind) = match arg {\n+                        // FIXME(varkor): unify E0109, E0110 and E0111.\n                         hir::GenericArg::Lifetime(lt) => {\n                             if err_for_lt { continue }\n                             err_for_lt = true;\n@@ -1480,10 +1477,18 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n                              ty.span,\n                              \"type\")\n                         }\n+                        hir::GenericArg::Const(ct) => {\n+                            if err_for_ct { continue }\n+                            err_for_ct = true;\n+                            (struct_span_err!(self.tcx().sess, ct.span, E0111,\n+                                              \"const parameters are not allowed on this type\"),\n+                             ct.span,\n+                             \"const\")\n+                        }\n                     };\n                     span_err.span_label(span, format!(\"{} argument not allowed\", kind))\n                             .emit();\n-                    if err_for_lt && err_for_ty {\n+                    if err_for_lt && err_for_ty && err_for_ct {\n                         break;\n                     }\n                 }"}, {"sha": "bc323e2cf8a989ef44321130dba68f20508d05c4", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7f3c6d7c047c7dc8a7cc10fa83c464d2aa6be631/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3c6d7c047c7dc8a7cc10fa83c464d2aa6be631/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=7f3c6d7c047c7dc8a7cc10fa83c464d2aa6be631", "patch": "@@ -840,8 +840,9 @@ fn compare_synthetic_generics<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                         let bounds = impl_m.generics.params.iter().find_map(|param| {\n                             match param.kind {\n                                 GenericParamKind::Lifetime { .. } => None,\n-                                GenericParamKind::Type { .. } => {\n-                                    if param.hir_id == impl_hir_id {\n+                                GenericParamKind::Type { .. } |\n+                                GenericParamKind::Const { .. } => {\n+                                    if param.hir_id == impl_node_id {\n                                         Some(&param.bounds)\n                                     } else {\n                                         None"}]}