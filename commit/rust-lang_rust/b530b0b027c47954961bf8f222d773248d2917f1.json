{"sha": "b530b0b027c47954961bf8f222d773248d2917f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1MzBiMGIwMjdjNDc5NTQ5NjFiZjhmMjIyZDc3MzI0OGQyOTE3ZjE=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-03-07T14:27:19Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-03-07T14:27:23Z"}, "message": "Write new-value-repr branch tests over old tests.", "tree": {"sha": "4538d4f6fd3a05e17beb833346a9fcc127e88c0d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4538d4f6fd3a05e17beb833346a9fcc127e88c0d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b530b0b027c47954961bf8f222d773248d2917f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b530b0b027c47954961bf8f222d773248d2917f1", "html_url": "https://github.com/rust-lang/rust/commit/b530b0b027c47954961bf8f222d773248d2917f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b530b0b027c47954961bf8f222d773248d2917f1/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0cb7e3fae038f825c1ac0b7faf2f4be0288ba793", "url": "https://api.github.com/repos/rust-lang/rust/commits/0cb7e3fae038f825c1ac0b7faf2f4be0288ba793", "html_url": "https://github.com/rust-lang/rust/commit/0cb7e3fae038f825c1ac0b7faf2f4be0288ba793"}], "stats": {"total": 426, "additions": 125, "deletions": 301}, "files": [{"sha": "b3da0562fc5101e33f0c15fd97e50f6e2327682d", "filename": "test/basic.rs", "status": "modified", "additions": 125, "deletions": 104, "changes": 229, "blob_url": "https://github.com/rust-lang/rust/blob/b530b0b027c47954961bf8f222d773248d2917f1/test%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b530b0b027c47954961bf8f222d773248d2917f1/test%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test%2Fbasic.rs?ref=b530b0b027c47954961bf8f222d773248d2917f1", "patch": "@@ -1,51 +1,74 @@\n #![feature(custom_attribute)]\n #![allow(dead_code, unused_attributes)]\n \n-#[miri_run(expected = \"Int(1)\")]\n+#[miri_run]\n fn ret() -> i32 {\n     1\n }\n \n-#[miri_run(expected = \"Int(-1)\")]\n+#[miri_run]\n fn neg() -> i32 {\n     -1\n }\n \n-#[miri_run(expected = \"Int(3)\")]\n+#[miri_run]\n fn add() -> i32 {\n     1 + 2\n }\n \n-#[miri_run(expected = \"Int(3)\")]\n+#[miri_run]\n+fn empty() {}\n+\n+#[miri_run]\n+fn tuple() -> (i32,) {\n+    (1,)\n+}\n+\n+#[miri_run]\n+fn tuple_2() -> (i32, i32) {\n+    (1, 2)\n+}\n+\n+#[miri_run]\n+fn tuple_5() -> (i32, i32, i32, i32, i32) {\n+    (1, 2, 3, 4, 5)\n+}\n+\n+#[miri_run]\n fn indirect_add() -> i32 {\n     let x = 1;\n     let y = 2;\n     x + y\n }\n \n-#[miri_run(expected = \"Int(25)\")]\n+#[miri_run]\n fn arith() -> i32 {\n     3*3 + 4*4\n }\n \n-#[miri_run(expected = \"Int(0)\")]\n+#[miri_run]\n+fn boolean() -> bool {\n+    true\n+}\n+\n+#[miri_run]\n fn if_false() -> i32 {\n     if false { 1 } else { 0 }\n }\n \n-#[miri_run(expected = \"Int(1)\")]\n+#[miri_run]\n fn if_true() -> i32 {\n     if true { 1 } else { 0 }\n }\n \n-#[miri_run(expected = \"Int(2)\")]\n-fn call() -> i32 {\n-    fn increment(x: i32) -> i32 {\n-        x + 1\n-    }\n+// #[miri_run(expected = \"Int(2)\")]\n+// fn call() -> i32 {\n+//     fn increment(x: i32) -> i32 {\n+//         x + 1\n+//     }\n \n-    increment(1)\n-}\n+//     increment(1)\n+// }\n \n // #[miri_run(expected = \"Int(3628800)\")]\n // fn factorial_loop() -> i32 {\n@@ -60,29 +83,29 @@ fn call() -> i32 {\n //     product\n // }\n \n-#[miri_run(expected = \"Int(3628800)\")]\n-fn factorial_recursive() -> i32 {\n-    fn fact(n: i32) -> i32 {\n-        if n == 0 {\n-            1\n-        } else {\n-            n * fact(n - 1)\n-        }\n-    }\n+// #[miri_run(expected = \"Int(3628800)\")]\n+// fn factorial_recursive() -> i32 {\n+//     fn fact(n: i32) -> i32 {\n+//         if n == 0 {\n+//             1\n+//         } else {\n+//             n * fact(n - 1)\n+//         }\n+//     }\n \n-    fact(10)\n-}\n+//     fact(10)\n+// }\n \n-#[miri_run(expected = \"Int(1)\")]\n-fn match_bool() -> i32 {\n-    let b = true;\n-    match b {\n-        true => 1,\n-        false => 0,\n-    }\n-}\n+// #[miri_run]\n+// fn match_bool() -> i32 {\n+//     let b = true;\n+//     match b {\n+//         true => 1,\n+//         false => 0,\n+//     }\n+// }\n \n-#[miri_run(expected = \"Int(20)\")]\n+#[miri_run]\n fn match_int() -> i32 {\n     let n = 2;\n     match n {\n@@ -94,83 +117,81 @@ fn match_int() -> i32 {\n     }\n }\n \n-#[miri_run(expected = \"Int(1)\")]\n-fn one_line_ref() -> i32 {\n-    *&1\n-}\n-\n-#[miri_run(expected = \"Int(1)\")]\n-fn basic_ref() -> i32 {\n-    let x = &1;\n-    *x\n-}\n+// #[miri_run(expected = \"Int(1)\")]\n+// fn one_line_ref() -> i32 {\n+//     *&1\n+// }\n \n-#[miri_run(expected = \"Int(3)\")]\n-fn basic_ref_mut() -> i32 {\n-    let x = &mut 1;\n-    *x += 2;\n-    *x\n-}\n+// #[miri_run(expected = \"Int(1)\")]\n+// fn basic_ref() -> i32 {\n+//     let x = &1;\n+//     *x\n+// }\n \n // #[miri_run(expected = \"Int(3)\")]\n-// fn basic_ref_mut_var() -> i32 {\n-//     let mut a = 1;\n-//     {\n-//         let x = &mut a;\n-//         *x += 2;\n-//     }\n-//     a\n+// fn basic_ref_mut() -> i32 {\n+//     let x = &mut 1;\n+//     *x += 2;\n+//     *x\n // }\n \n-#[miri_run(expected = \"Int(4)\")]\n-fn match_int_range() -> i32 {\n-    let n = 42;\n-    match n {\n-        0...9 => 0,\n-        10...19 => 1,\n-        20...29 => 2,\n-        30...39 => 3,\n-        40...49 => 4,\n-        _ => 5,\n-    }\n-}\n-\n-enum MyOption<T> {\n-    Some { data: T },\n-    None,\n-}\n+// // #[miri_run(expected = \"Int(3)\")]\n+// // fn basic_ref_mut_var() -> i32 {\n+// //     let mut a = 1;\n+// //     {\n+// //         let x = &mut a;\n+// //         *x += 2;\n+// //     }\n+// //     a\n+// // }\n+\n+// #[miri_run(expected = \"Int(4)\")]\n+// fn match_int_range() -> i32 {\n+//     let n = 42;\n+//     match n {\n+//         0...9 => 0,\n+//         10...19 => 1,\n+//         20...29 => 2,\n+//         30...39 => 3,\n+//         40...49 => 4,\n+//         _ => 5,\n+//     }\n+// }\n \n-#[miri_run(expected = \"Int(13)\")]\n-fn match_my_opt_some() -> i32 {\n-    let x = MyOption::Some { data: 13 };\n-    match x {\n-        MyOption::Some { data } => data,\n-        MyOption::None => 42,\n-    }\n-}\n+// enum MyOption<T> {\n+//     Some { data: T },\n+//     None,\n+// }\n \n-#[miri_run(expected = \"Int(42)\")]\n-fn match_my_opt_none() -> i32 {\n-    let x = MyOption::None;\n-    match x {\n-        MyOption::Some { data } => data,\n-        MyOption::None => 42,\n-    }\n-}\n+// #[miri_run(expected = \"Int(13)\")]\n+// fn match_my_opt_some() -> i32 {\n+//     let x = MyOption::Some { data: 13 };\n+//     match x {\n+//         MyOption::Some { data } => data,\n+//         MyOption::None => 42,\n+//     }\n+// }\n \n-#[miri_run(expected = \"Int(13)\")]\n-fn match_opt_some() -> i32 {\n-    let x = Some(13);\n-    match x {\n-        Some(data)  => data,\n-        None => 42,\n-    }\n-}\n+// #[miri_run(expected = \"Int(42)\")]\n+// fn match_my_opt_none() -> i32 {\n+//     let x = MyOption::None;\n+//     match x {\n+//         MyOption::Some { data } => data,\n+//         MyOption::None => 42,\n+//     }\n+// }\n \n-/// Test calling a very simple function from the standard library.\n-#[miri_run(expected = \"Int(1)\")]\n-fn cross_crate_fn_call() -> i32 {\n-    if 1i32.is_positive() { 1 } else { 0 }\n-}\n+// #[miri_run(expected = \"Int(13)\")]\n+// fn match_opt_some() -> i32 {\n+//     let x = Some(13);\n+//     match x {\n+//         Some(data)  => data,\n+//         None => 42,\n+//     }\n+// }\n \n-fn main() {}\n+// /// Test calling a very simple function from the standard library.\n+// #[miri_run(expected = \"Int(1)\")]\n+// fn cross_crate_fn_call() -> i32 {\n+//     if 1i32.is_positive() { 1 } else { 0 }\n+// }"}, {"sha": "b3da0562fc5101e33f0c15fd97e50f6e2327682d", "filename": "test/new_values.rs", "status": "removed", "additions": 0, "deletions": 197, "changes": 197, "blob_url": "https://github.com/rust-lang/rust/blob/0cb7e3fae038f825c1ac0b7faf2f4be0288ba793/test%2Fnew_values.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cb7e3fae038f825c1ac0b7faf2f4be0288ba793/test%2Fnew_values.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test%2Fnew_values.rs?ref=0cb7e3fae038f825c1ac0b7faf2f4be0288ba793", "patch": "@@ -1,197 +0,0 @@\n-#![feature(custom_attribute)]\n-#![allow(dead_code, unused_attributes)]\n-\n-#[miri_run]\n-fn ret() -> i32 {\n-    1\n-}\n-\n-#[miri_run]\n-fn neg() -> i32 {\n-    -1\n-}\n-\n-#[miri_run]\n-fn add() -> i32 {\n-    1 + 2\n-}\n-\n-#[miri_run]\n-fn empty() {}\n-\n-#[miri_run]\n-fn tuple() -> (i32,) {\n-    (1,)\n-}\n-\n-#[miri_run]\n-fn tuple_2() -> (i32, i32) {\n-    (1, 2)\n-}\n-\n-#[miri_run]\n-fn tuple_5() -> (i32, i32, i32, i32, i32) {\n-    (1, 2, 3, 4, 5)\n-}\n-\n-#[miri_run]\n-fn indirect_add() -> i32 {\n-    let x = 1;\n-    let y = 2;\n-    x + y\n-}\n-\n-#[miri_run]\n-fn arith() -> i32 {\n-    3*3 + 4*4\n-}\n-\n-#[miri_run]\n-fn boolean() -> bool {\n-    true\n-}\n-\n-#[miri_run]\n-fn if_false() -> i32 {\n-    if false { 1 } else { 0 }\n-}\n-\n-#[miri_run]\n-fn if_true() -> i32 {\n-    if true { 1 } else { 0 }\n-}\n-\n-// #[miri_run(expected = \"Int(2)\")]\n-// fn call() -> i32 {\n-//     fn increment(x: i32) -> i32 {\n-//         x + 1\n-//     }\n-\n-//     increment(1)\n-// }\n-\n-// #[miri_run(expected = \"Int(3628800)\")]\n-// fn factorial_loop() -> i32 {\n-//     let mut product = 1;\n-//     let mut i = 1;\n-\n-//     while i <= 10 {\n-//         product *= i;\n-//         i += 1;\n-//     }\n-\n-//     product\n-// }\n-\n-// #[miri_run(expected = \"Int(3628800)\")]\n-// fn factorial_recursive() -> i32 {\n-//     fn fact(n: i32) -> i32 {\n-//         if n == 0 {\n-//             1\n-//         } else {\n-//             n * fact(n - 1)\n-//         }\n-//     }\n-\n-//     fact(10)\n-// }\n-\n-// #[miri_run]\n-// fn match_bool() -> i32 {\n-//     let b = true;\n-//     match b {\n-//         true => 1,\n-//         false => 0,\n-//     }\n-// }\n-\n-#[miri_run]\n-fn match_int() -> i32 {\n-    let n = 2;\n-    match n {\n-        0 => 0,\n-        1 => 10,\n-        2 => 20,\n-        3 => 30,\n-        _ => 100,\n-    }\n-}\n-\n-// #[miri_run(expected = \"Int(1)\")]\n-// fn one_line_ref() -> i32 {\n-//     *&1\n-// }\n-\n-// #[miri_run(expected = \"Int(1)\")]\n-// fn basic_ref() -> i32 {\n-//     let x = &1;\n-//     *x\n-// }\n-\n-// #[miri_run(expected = \"Int(3)\")]\n-// fn basic_ref_mut() -> i32 {\n-//     let x = &mut 1;\n-//     *x += 2;\n-//     *x\n-// }\n-\n-// // #[miri_run(expected = \"Int(3)\")]\n-// // fn basic_ref_mut_var() -> i32 {\n-// //     let mut a = 1;\n-// //     {\n-// //         let x = &mut a;\n-// //         *x += 2;\n-// //     }\n-// //     a\n-// // }\n-\n-// #[miri_run(expected = \"Int(4)\")]\n-// fn match_int_range() -> i32 {\n-//     let n = 42;\n-//     match n {\n-//         0...9 => 0,\n-//         10...19 => 1,\n-//         20...29 => 2,\n-//         30...39 => 3,\n-//         40...49 => 4,\n-//         _ => 5,\n-//     }\n-// }\n-\n-// enum MyOption<T> {\n-//     Some { data: T },\n-//     None,\n-// }\n-\n-// #[miri_run(expected = \"Int(13)\")]\n-// fn match_my_opt_some() -> i32 {\n-//     let x = MyOption::Some { data: 13 };\n-//     match x {\n-//         MyOption::Some { data } => data,\n-//         MyOption::None => 42,\n-//     }\n-// }\n-\n-// #[miri_run(expected = \"Int(42)\")]\n-// fn match_my_opt_none() -> i32 {\n-//     let x = MyOption::None;\n-//     match x {\n-//         MyOption::Some { data } => data,\n-//         MyOption::None => 42,\n-//     }\n-// }\n-\n-// #[miri_run(expected = \"Int(13)\")]\n-// fn match_opt_some() -> i32 {\n-//     let x = Some(13);\n-//     match x {\n-//         Some(data)  => data,\n-//         None => 42,\n-//     }\n-// }\n-\n-// /// Test calling a very simple function from the standard library.\n-// #[miri_run(expected = \"Int(1)\")]\n-// fn cross_crate_fn_call() -> i32 {\n-//     if 1i32.is_positive() { 1 } else { 0 }\n-// }"}]}