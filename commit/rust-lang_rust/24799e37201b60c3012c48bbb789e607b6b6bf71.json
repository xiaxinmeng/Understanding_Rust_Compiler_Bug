{"sha": "24799e37201b60c3012c48bbb789e607b6b6bf71", "node_id": "C_kwDOAAsO6NoAKDI0Nzk5ZTM3MjAxYjYwYzMwMTJjNDhiYmI3ODllNjA3YjZiNmJmNzE", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-06-27T15:18:49Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-07-04T12:35:19Z"}, "message": "remove an unused `DefId`", "tree": {"sha": "19fda1485bfd2b03fc04cce5decd0859d43b2624", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/19fda1485bfd2b03fc04cce5decd0859d43b2624"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/24799e37201b60c3012c48bbb789e607b6b6bf71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/24799e37201b60c3012c48bbb789e607b6b6bf71", "html_url": "https://github.com/rust-lang/rust/commit/24799e37201b60c3012c48bbb789e607b6b6bf71", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/24799e37201b60c3012c48bbb789e607b6b6bf71/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3beeaa84da241f35888338ded6659938206ff13", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3beeaa84da241f35888338ded6659938206ff13", "html_url": "https://github.com/rust-lang/rust/commit/a3beeaa84da241f35888338ded6659938206ff13"}], "stats": {"total": 102, "additions": 28, "deletions": 74}, "files": [{"sha": "fad949a3bc6a15a55fa2aeb34284e1b6a96ba9ee", "filename": "compiler/rustc_infer/src/infer/free_regions.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/24799e37201b60c3012c48bbb789e607b6b6bf71/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffree_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24799e37201b60c3012c48bbb789e607b6b6bf71/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffree_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffree_regions.rs?ref=24799e37201b60c3012c48bbb789e607b6b6bf71", "patch": "@@ -4,7 +4,6 @@\n //! and use that to decide when one free region outlives another, and so forth.\n \n use rustc_data_structures::transitive_relation::TransitiveRelation;\n-use rustc_hir::def_id::DefId;\n use rustc_middle::ty::{self, Lift, Region, TyCtxt};\n \n /// Combines a `FreeRegionMap` and a `TyCtxt`.\n@@ -14,16 +13,13 @@ use rustc_middle::ty::{self, Lift, Region, TyCtxt};\n pub(crate) struct RegionRelations<'a, 'tcx> {\n     pub tcx: TyCtxt<'tcx>,\n \n-    /// The context used for debug messages\n-    pub context: DefId,\n-\n     /// Free-region relationships.\n     pub free_regions: &'a FreeRegionMap<'tcx>,\n }\n \n impl<'a, 'tcx> RegionRelations<'a, 'tcx> {\n-    pub fn new(tcx: TyCtxt<'tcx>, context: DefId, free_regions: &'a FreeRegionMap<'tcx>) -> Self {\n-        Self { tcx, context, free_regions }\n+    pub fn new(tcx: TyCtxt<'tcx>, free_regions: &'a FreeRegionMap<'tcx>) -> Self {\n+        Self { tcx, free_regions }\n     }\n \n     pub fn lub_free_regions(&self, r_a: Region<'tcx>, r_b: Region<'tcx>) -> Region<'tcx> {"}, {"sha": "87fa22b3835ef1c2a1fbcff2d40c58d19cbb7241", "filename": "compiler/rustc_infer/src/infer/lexical_region_resolve/mod.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/24799e37201b60c3012c48bbb789e607b6b6bf71/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24799e37201b60c3012c48bbb789e607b6b6bf71/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs?ref=24799e37201b60c3012c48bbb789e607b6b6bf71", "patch": "@@ -120,13 +120,9 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n     ) -> LexicalRegionResolutions<'tcx> {\n         let mut var_data = self.construct_var_data(self.tcx());\n \n-        // Dorky hack to cause `dump_constraints` to only get called\n-        // if debug mode is enabled:\n-        debug!(\n-            \"----() End constraint listing (context={:?}) {:?}---\",\n-            self.region_rels.context,\n-            self.dump_constraints(self.region_rels)\n-        );\n+        if cfg!(debug_assertions) {\n+            self.dump_constraints();\n+        }\n \n         let graph = self.construct_graph();\n         self.expand_givens(&graph);\n@@ -156,8 +152,8 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n         }\n     }\n \n-    fn dump_constraints(&self, free_regions: &RegionRelations<'_, 'tcx>) {\n-        debug!(\"----() Start constraint listing (context={:?}) ()----\", free_regions.context);\n+    #[instrument(level = \"debug\", skip(self))]\n+    fn dump_constraints(&self) {\n         for (idx, (constraint, _)) in self.data.constraints.iter().enumerate() {\n             debug!(\"Constraint {} => {:?}\", idx, constraint);\n         }"}, {"sha": "70b9096714aedddeaad5f3d206d52897b743b6b7", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/24799e37201b60c3012c48bbb789e607b6b6bf71/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24799e37201b60c3012c48bbb789e607b6b6bf71/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=24799e37201b60c3012c48bbb789e607b6b6bf71", "patch": "@@ -1267,7 +1267,6 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     /// `resolve_vars_if_possible` as well as `fully_resolve`.\n     pub fn resolve_regions(\n         &self,\n-        region_context: DefId,\n         outlives_env: &OutlivesEnvironment<'tcx>,\n     ) -> Vec<RegionResolutionError<'tcx>> {\n         let (var_infos, data) = {\n@@ -1286,8 +1285,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 .into_infos_and_data()\n         };\n \n-        let region_rels =\n-            &RegionRelations::new(self.tcx, region_context, outlives_env.free_region_map());\n+        let region_rels = &RegionRelations::new(self.tcx, outlives_env.free_region_map());\n \n         let (lexical_region_resolutions, errors) =\n             lexical_region_resolve::resolve(outlives_env.param_env, region_rels, var_infos, data);\n@@ -1302,12 +1300,8 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     /// result. After this, no more unification operations should be\n     /// done -- or the compiler will panic -- but it is legal to use\n     /// `resolve_vars_if_possible` as well as `fully_resolve`.\n-    pub fn resolve_regions_and_report_errors(\n-        &self,\n-        region_context: DefId,\n-        outlives_env: &OutlivesEnvironment<'tcx>,\n-    ) {\n-        let errors = self.resolve_regions(region_context, outlives_env);\n+    pub fn resolve_regions_and_report_errors(&self, outlives_env: &OutlivesEnvironment<'tcx>) {\n+        let errors = self.resolve_regions(outlives_env);\n \n         if !self.is_tainted_by_errors() {\n             // As a heuristic, just skip reporting region errors"}, {"sha": "0e6bbd6bddbcf9d64347be0e594c4aa26893f65c", "filename": "compiler/rustc_trait_selection/src/traits/coherence.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/24799e37201b60c3012c48bbb789e607b6b6bf71/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24799e37201b60c3012c48bbb789e607b6b6bf71/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs?ref=24799e37201b60c3012c48bbb789e607b6b6bf71", "patch": "@@ -317,14 +317,13 @@ fn negative_impl<'cx, 'tcx>(\n         let (subject2, obligations) =\n             impl_subject_and_oblig(selcx, impl_env, impl2_def_id, impl2_substs);\n \n-        !equate(&infcx, impl_env, impl1_def_id, subject1, subject2, obligations)\n+        !equate(&infcx, impl_env, subject1, subject2, obligations)\n     })\n }\n \n fn equate<'cx, 'tcx>(\n     infcx: &InferCtxt<'cx, 'tcx>,\n     impl_env: ty::ParamEnv<'tcx>,\n-    impl1_def_id: DefId,\n     subject1: ImplSubject<'tcx>,\n     subject2: ImplSubject<'tcx>,\n     obligations: impl Iterator<Item = PredicateObligation<'tcx>>,\n@@ -341,7 +340,7 @@ fn equate<'cx, 'tcx>(\n     let opt_failing_obligation = obligations\n         .into_iter()\n         .chain(more_obligations)\n-        .find(|o| negative_impl_exists(selcx, impl_env, impl1_def_id, o));\n+        .find(|o| negative_impl_exists(selcx, impl_env, o));\n \n     if let Some(failing_obligation) = opt_failing_obligation {\n         debug!(\"overlap: obligation unsatisfiable {:?}\", failing_obligation);\n@@ -356,18 +355,17 @@ fn equate<'cx, 'tcx>(\n fn negative_impl_exists<'cx, 'tcx>(\n     selcx: &SelectionContext<'cx, 'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n-    region_context: DefId,\n     o: &PredicateObligation<'tcx>,\n ) -> bool {\n     let infcx = &selcx.infcx().fork();\n \n-    if resolve_negative_obligation(infcx, param_env, region_context, o) {\n+    if resolve_negative_obligation(infcx, param_env, o) {\n         return true;\n     }\n \n     // Try to prove a negative obligation exists for super predicates\n     for o in util::elaborate_predicates(infcx.tcx, iter::once(o.predicate)) {\n-        if resolve_negative_obligation(infcx, param_env, region_context, &o) {\n+        if resolve_negative_obligation(infcx, param_env, &o) {\n             return true;\n         }\n     }\n@@ -379,7 +377,6 @@ fn negative_impl_exists<'cx, 'tcx>(\n fn resolve_negative_obligation<'cx, 'tcx>(\n     infcx: &InferCtxt<'cx, 'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n-    region_context: DefId,\n     o: &PredicateObligation<'tcx>,\n ) -> bool {\n     let tcx = infcx.tcx;\n@@ -409,7 +406,7 @@ fn resolve_negative_obligation<'cx, 'tcx>(\n \n     infcx.process_registered_region_obligations(outlives_env.region_bound_pairs_map(), param_env);\n \n-    let errors = infcx.resolve_regions(region_context, &outlives_env);\n+    let errors = infcx.resolve_regions(&outlives_env);\n \n     if !errors.is_empty() {\n         return false;"}, {"sha": "b45f72e8748d615611cc9c5e97630f73a1487d49", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 3, "deletions": 15, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/24799e37201b60c3012c48bbb789e607b6b6bf71/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24799e37201b60c3012c48bbb789e607b6b6bf71/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=24799e37201b60c3012c48bbb789e607b6b6bf71", "patch": "@@ -198,17 +198,13 @@ pub fn type_known_to_meet_bound_modulo_regions<'a, 'tcx>(\n     }\n }\n \n+#[instrument(level = \"debug\", skip(tcx, elaborated_env))]\n fn do_normalize_predicates<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    region_context: DefId,\n     cause: ObligationCause<'tcx>,\n     elaborated_env: ty::ParamEnv<'tcx>,\n     predicates: Vec<ty::Predicate<'tcx>>,\n ) -> Result<Vec<ty::Predicate<'tcx>>, ErrorGuaranteed> {\n-    debug!(\n-        \"do_normalize_predicates(predicates={:?}, region_context={:?}, cause={:?})\",\n-        predicates, region_context, cause,\n-    );\n     let span = cause.span;\n     tcx.infer_ctxt().enter(|infcx| {\n         // FIXME. We should really... do something with these region\n@@ -240,7 +236,7 @@ fn do_normalize_predicates<'tcx>(\n         // cares about declarations like `'a: 'b`.\n         let outlives_env = OutlivesEnvironment::new(elaborated_env);\n \n-        infcx.resolve_regions_and_report_errors(region_context, &outlives_env);\n+        infcx.resolve_regions_and_report_errors(&outlives_env);\n \n         let predicates = match infcx.fully_resolve(predicates) {\n             Ok(predicates) => predicates,\n@@ -269,9 +265,9 @@ fn do_normalize_predicates<'tcx>(\n \n // FIXME: this is gonna need to be removed ...\n /// Normalizes the parameter environment, reporting errors if they occur.\n+#[instrument(level = \"debug\", skip(tcx))]\n pub fn normalize_param_env_or_error<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    region_context: DefId,\n     unnormalized_env: ty::ParamEnv<'tcx>,\n     cause: ObligationCause<'tcx>,\n ) -> ty::ParamEnv<'tcx> {\n@@ -289,12 +285,6 @@ pub fn normalize_param_env_or_error<'tcx>(\n     // parameter environments once for every fn as it goes,\n     // and errors will get reported then; so outside of type inference we\n     // can be sure that no errors should occur.\n-\n-    debug!(\n-        \"normalize_param_env_or_error(region_context={:?}, unnormalized_env={:?}, cause={:?})\",\n-        region_context, unnormalized_env, cause\n-    );\n-\n     let mut predicates: Vec<_> =\n         util::elaborate_predicates(tcx, unnormalized_env.caller_bounds().into_iter())\n             .map(|obligation| obligation.predicate)\n@@ -338,7 +328,6 @@ pub fn normalize_param_env_or_error<'tcx>(\n     );\n     let Ok(non_outlives_predicates) = do_normalize_predicates(\n         tcx,\n-        region_context,\n         cause.clone(),\n         elaborated_env,\n         predicates,\n@@ -362,7 +351,6 @@ pub fn normalize_param_env_or_error<'tcx>(\n     );\n     let Ok(outlives_predicates) = do_normalize_predicates(\n         tcx,\n-        region_context,\n         cause,\n         outlives_env,\n         outlives_predicates,"}, {"sha": "1d345caf69971e11b6cbe9e24b2707fcbf150e53", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/24799e37201b60c3012c48bbb789e607b6b6bf71/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24799e37201b60c3012c48bbb789e607b6b6bf71/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=24799e37201b60c3012c48bbb789e607b6b6bf71", "patch": "@@ -211,7 +211,7 @@ fn param_env(tcx: TyCtxt<'_>, def_id: DefId) -> ty::ParamEnv<'_> {\n         tcx.hir().maybe_body_owned_by(id).map_or(id, |body| body.hir_id)\n     });\n     let cause = traits::ObligationCause::misc(tcx.def_span(def_id), body_id);\n-    traits::normalize_param_env_or_error(tcx, def_id, unnormalized_env, cause)\n+    traits::normalize_param_env_or_error(tcx, unnormalized_env, cause)\n }\n \n /// Elaborate the environment."}, {"sha": "65c7c1aee1a89955e98b44dd1920d604367e6739", "filename": "compiler/rustc_typeck/src/check/compare_method.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/24799e37201b60c3012c48bbb789e607b6b6bf71/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24799e37201b60c3012c48bbb789e607b6b6bf71/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=24799e37201b60c3012c48bbb789e607b6b6bf71", "patch": "@@ -208,8 +208,7 @@ fn compare_predicate_entailment<'tcx>(\n         Reveal::UserFacing,\n         hir::Constness::NotConst,\n     );\n-    let param_env =\n-        traits::normalize_param_env_or_error(tcx, impl_m.def_id, param_env, normalize_cause);\n+    let param_env = traits::normalize_param_env_or_error(tcx, param_env, normalize_cause);\n \n     tcx.infer_ctxt().enter(|infcx| {\n         let inh = Inherited::new(infcx, impl_m.def_id.expect_local());\n@@ -1247,12 +1246,7 @@ fn compare_type_predicate_entailment<'tcx>(\n         Reveal::UserFacing,\n         hir::Constness::NotConst,\n     );\n-    let param_env = traits::normalize_param_env_or_error(\n-        tcx,\n-        impl_ty.def_id,\n-        param_env,\n-        normalize_cause.clone(),\n-    );\n+    let param_env = traits::normalize_param_env_or_error(tcx, param_env, normalize_cause.clone());\n     tcx.infer_ctxt().enter(|infcx| {\n         let inh = Inherited::new(infcx, impl_ty.def_id.expect_local());\n         let infcx = &inh.infcx;"}, {"sha": "567948f7e8a1dfd943fff7033ff7c00cdd3c037a", "filename": "compiler/rustc_typeck/src/check/regionck.rs", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/24799e37201b60c3012c48bbb789e607b6b6bf71/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24799e37201b60c3012c48bbb789e607b6b6bf71/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregionck.rs?ref=24799e37201b60c3012c48bbb789e607b6b6bf71", "patch": "@@ -222,10 +222,8 @@ pub struct RegionCtxt<'a, 'tcx> {\n \n     // id of innermost fn body id\n     body_id: hir::HirId,\n+    // TODO: is this always equal to `body_id`?\n     body_owner: LocalDefId,\n-\n-    // id of AST node being analyzed (the subject of the analysis).\n-    subject_def_id: LocalDefId,\n }\n \n impl<'a, 'tcx> Deref for RegionCtxt<'a, 'tcx> {\n@@ -245,13 +243,7 @@ impl<'a, 'tcx> RegionCtxt<'a, 'tcx> {\n         param_env: ty::ParamEnv<'tcx>,\n     ) -> RegionCtxt<'a, 'tcx> {\n         let outlives_environment = OutlivesEnvironment::new(param_env);\n-        RegionCtxt {\n-            fcx,\n-            body_id: initial_body_id,\n-            body_owner: subject,\n-            subject_def_id: subject,\n-            outlives_environment,\n-        }\n+        RegionCtxt { fcx, body_id: initial_body_id, body_owner: subject, outlives_environment }\n     }\n \n     /// Try to resolve the type for the given node, returning `t_err` if an error results. Note that\n@@ -369,10 +361,7 @@ impl<'a, 'tcx> RegionCtxt<'a, 'tcx> {\n             self.param_env,\n         );\n \n-        self.fcx.resolve_regions_and_report_errors(\n-            self.subject_def_id.to_def_id(),\n-            &self.outlives_environment,\n-        );\n+        self.fcx.resolve_regions_and_report_errors(&self.outlives_environment);\n     }\n \n     fn constrain_bindings_in_pat(&mut self, pat: &hir::Pat<'_>) {"}, {"sha": "652f711ccf40c7f97b8c126e83c125aad25f81d7", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/24799e37201b60c3012c48bbb789e607b6b6bf71/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24799e37201b60c3012c48bbb789e607b6b6bf71/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=24799e37201b60c3012c48bbb789e607b6b6bf71", "patch": "@@ -661,7 +661,7 @@ fn resolve_regions_with_wf_tys<'tcx>(\n \n         add_constraints(&infcx, region_bound_pairs);\n \n-        let errors = infcx.resolve_regions(id.expect_owner().to_def_id(), &outlives_environment);\n+        let errors = infcx.resolve_regions(&outlives_environment);\n \n         debug!(?errors, \"errors\");\n "}, {"sha": "ec4fe3c4203234340ed90122dad847af61d469ed", "filename": "compiler/rustc_typeck/src/coherence/builtin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/24799e37201b60c3012c48bbb789e607b6b6bf71/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24799e37201b60c3012c48bbb789e607b6b6bf71/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fbuiltin.rs?ref=24799e37201b60c3012c48bbb789e607b6b6bf71", "patch": "@@ -349,7 +349,7 @@ fn visit_implementation_of_dispatch_from_dyn<'tcx>(tcx: TyCtxt<'tcx>, impl_did:\n \n                     // Finally, resolve all regions.\n                     let outlives_env = OutlivesEnvironment::new(param_env);\n-                    infcx.resolve_regions_and_report_errors(impl_did.to_def_id(), &outlives_env);\n+                    infcx.resolve_regions_and_report_errors(&outlives_env);\n                 }\n             }\n             _ => {\n@@ -606,7 +606,7 @@ pub fn coerce_unsized_info<'tcx>(tcx: TyCtxt<'tcx>, impl_did: DefId) -> CoerceUn\n \n         // Finally, resolve all regions.\n         let outlives_env = OutlivesEnvironment::new(param_env);\n-        infcx.resolve_regions_and_report_errors(impl_did.to_def_id(), &outlives_env);\n+        infcx.resolve_regions_and_report_errors(&outlives_env);\n \n         CoerceUnsizedInfo { custom_kind: kind }\n     })"}, {"sha": "24ad0ccbaaab89a99b218e3bfe07bca04a5a9e8c", "filename": "compiler/rustc_typeck/src/impl_wf_check/min_specialization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/24799e37201b60c3012c48bbb789e607b6b6bf71/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24799e37201b60c3012c48bbb789e607b6b6bf71/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs?ref=24799e37201b60c3012c48bbb789e607b6b6bf71", "patch": "@@ -150,7 +150,7 @@ fn get_impl_substs<'tcx>(\n \n     // Conservatively use an empty `ParamEnv`.\n     let outlives_env = OutlivesEnvironment::new(ty::ParamEnv::empty());\n-    infcx.resolve_regions_and_report_errors(impl1_def_id.to_def_id(), &outlives_env);\n+    infcx.resolve_regions_and_report_errors(&outlives_env);\n     let Ok(impl2_substs) = infcx.fully_resolve(impl2_substs) else {\n         let span = tcx.def_span(impl1_def_id);\n         tcx.sess.emit_err(SubstsOnOverriddenImpl { span });"}]}