{"sha": "fc6b5d6efe163060bde31cc1c801086ed7ebc8f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjNmI1ZDZlZmUxNjMwNjBiZGUzMWNjMWM4MDEwODZlZDdlYmM4ZjE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-12-15T01:28:28Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-12-15T01:28:28Z"}, "message": "Auto merge of #67216 - ecstatic-morse:const-loop, r=oli-obk\n\nEnable `loop` and `while` in constants behind a feature flag\n\nThis PR is an initial implementation of #52000. It adds a `const_loop` feature gate, which allows `while` and `loop` expressions through both HIR and MIR const-checkers if enabled. `for` expressions remain forbidden by the HIR const-checker, since they desugar to a call to `IntoIterator::into_iter`, which will be rejected anyways.\n\n`while` loops also require [`#![feature(const_if_match)]`](https://github.com/rust-lang/rust/pull/66507), since they have a conditional built into them. The diagnostics from the HIR const checker will suggest this to the user.\n\nr? @oli-obk\ncc @rust-lang/wg-const-eval", "tree": {"sha": "af12b3b107ab3059dc240c1a913e9b8068ed0577", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af12b3b107ab3059dc240c1a913e9b8068ed0577"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc6b5d6efe163060bde31cc1c801086ed7ebc8f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc6b5d6efe163060bde31cc1c801086ed7ebc8f1", "html_url": "https://github.com/rust-lang/rust/commit/fc6b5d6efe163060bde31cc1c801086ed7ebc8f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc6b5d6efe163060bde31cc1c801086ed7ebc8f1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f829840f7e5897745bc7b5ff951b006a2c4e0e3", "html_url": "https://github.com/rust-lang/rust/commit/6f829840f7e5897745bc7b5ff951b006a2c4e0e3"}, {"sha": "faa52d1cdaa8806201d56484df0c45bf550bf565", "url": "https://api.github.com/repos/rust-lang/rust/commits/faa52d1cdaa8806201d56484df0c45bf550bf565", "html_url": "https://github.com/rust-lang/rust/commit/faa52d1cdaa8806201d56484df0c45bf550bf565"}], "stats": {"total": 686, "additions": 559, "deletions": 127}, "files": [{"sha": "602fbc50a71533f38c98f646c147b77c806909e8", "filename": "src/librustc_error_codes/error_codes/E0744.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc6b5d6efe163060bde31cc1c801086ed7ebc8f1/src%2Flibrustc_error_codes%2Ferror_codes%2FE0744.md", "raw_url": "https://github.com/rust-lang/rust/raw/fc6b5d6efe163060bde31cc1c801086ed7ebc8f1/src%2Flibrustc_error_codes%2Ferror_codes%2FE0744.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0744.md?ref=fc6b5d6efe163060bde31cc1c801086ed7ebc8f1", "patch": "@@ -3,7 +3,7 @@ Control-flow expressions are not allowed inside a const context.\n At the moment, `if` and `match`, as well as the looping constructs `for`,\n `while`, and `loop`, are forbidden inside a `const`, `static`, or `const fn`.\n \n-```compile_fail,E0744\n+```compile_fail,E0658\n const _: i32 = {\n     let mut x = 0;\n     loop {"}, {"sha": "a386cbf56af85f145bcbc501d1febbd8db7abd25", "filename": "src/librustc_feature/active.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fc6b5d6efe163060bde31cc1c801086ed7ebc8f1/src%2Flibrustc_feature%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc6b5d6efe163060bde31cc1c801086ed7ebc8f1/src%2Flibrustc_feature%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2Factive.rs?ref=fc6b5d6efe163060bde31cc1c801086ed7ebc8f1", "patch": "@@ -52,6 +52,17 @@ macro_rules! declare_features {\n             pub fn walk_feature_fields(&self, mut f: impl FnMut(&str, bool)) {\n                 $(f(stringify!($feature), self.$feature);)+\n             }\n+\n+            /// Is the given feature enabled?\n+            ///\n+            /// Panics if the symbol doesn't correspond to a declared feature.\n+            pub fn enabled(&self, feature: Symbol) -> bool {\n+                match feature {\n+                    $( sym::$feature => self.$feature, )*\n+\n+                    _ => panic!(\"`{}` was not listed in `declare_features`\", feature),\n+                }\n+            }\n         }\n     };\n }\n@@ -525,6 +536,9 @@ declare_features! (\n     /// Allows using `&mut` in constant functions.\n     (active, const_mut_refs, \"1.41.0\", Some(57349), None),\n \n+    /// Allows the use of `loop` and `while` in constants.\n+    (active, const_loop, \"1.41.0\", Some(52000), None),\n+\n     // -------------------------------------------------------------------------\n     // feature-group-end: actual feature gates\n     // -------------------------------------------------------------------------"}, {"sha": "3df60993d9ad5c5091e941a79e2612fdba6759a6", "filename": "src/librustc_mir/transform/check_consts/ops.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc6b5d6efe163060bde31cc1c801086ed7ebc8f1/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc6b5d6efe163060bde31cc1c801086ed7ebc8f1/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fops.rs?ref=fc6b5d6efe163060bde31cc1c801086ed7ebc8f1", "patch": "@@ -170,6 +170,10 @@ impl NonConstOp for LiveDrop {\n #[derive(Debug)]\n pub struct Loop;\n impl NonConstOp for Loop {\n+    fn feature_gate(tcx: TyCtxt<'_>) -> Option<bool> {\n+        Some(tcx.features().const_loop)\n+    }\n+\n     fn emit_error(&self, item: &Item<'_, '_>, span: Span) {\n         // This should be caught by the HIR const-checker.\n         item.tcx.sess.delay_span_bug("}, {"sha": "e2530795749a9792befd39a985275161fa0341e2", "filename": "src/librustc_mir/transform/qualify_min_const_fn.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fc6b5d6efe163060bde31cc1c801086ed7ebc8f1/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc6b5d6efe163060bde31cc1c801086ed7ebc8f1/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs?ref=fc6b5d6efe163060bde31cc1c801086ed7ebc8f1", "patch": "@@ -390,8 +390,12 @@ fn check_terminator(\n             cleanup: _,\n         } => check_operand(tcx, cond, span, def_id, body),\n \n+        | TerminatorKind::FalseUnwind { .. }\n+        if feature_allowed(tcx, def_id, sym::const_loop)\n+        => Ok(()),\n+\n         TerminatorKind::FalseUnwind { .. } => {\n             Err((span, \"loops are not allowed in const fn\".into()))\n-        },\n+        }\n     }\n }"}, {"sha": "725a742382e02d9e5466fbfabcc595ab4f86cd2f", "filename": "src/librustc_passes/check_const.rs", "status": "modified", "additions": 68, "deletions": 19, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/fc6b5d6efe163060bde31cc1c801086ed7ebc8f1/src%2Flibrustc_passes%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc6b5d6efe163060bde31cc1c801086ed7ebc8f1/src%2Flibrustc_passes%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fcheck_const.rs?ref=fc6b5d6efe163060bde31cc1c801086ed7ebc8f1", "patch": "@@ -13,11 +13,11 @@ use rustc::hir::map::Map;\n use rustc::hir;\n use rustc::ty::TyCtxt;\n use rustc::ty::query::Providers;\n-use rustc_feature::Features;\n+use rustc::session::config::nightly_options;\n use syntax::ast::Mutability;\n use syntax::feature_gate::feature_err;\n use syntax::span_err;\n-use syntax_pos::{sym, Span};\n+use syntax_pos::{sym, Span, Symbol};\n use rustc_error_codes::*;\n \n use std::fmt;\n@@ -37,18 +37,31 @@ impl NonConstExpr {\n         }\n     }\n \n-    /// Returns `true` if all feature gates required to enable this expression are turned on, or\n-    /// `None` if there is no feature gate corresponding to this expression.\n-    fn is_feature_gate_enabled(self, features: &Features) -> Option<bool> {\n+    fn required_feature_gates(self) -> Option<&'static [Symbol]> {\n         use hir::MatchSource::*;\n-        match self {\n+        use hir::LoopSource::*;\n+\n+        let gates: &[_] = match self {\n             | Self::Match(Normal)\n             | Self::Match(IfDesugar { .. })\n             | Self::Match(IfLetDesugar { .. })\n-            => Some(features.const_if_match),\n+            => &[sym::const_if_match],\n \n-            _ => None,\n-        }\n+            | Self::Loop(Loop)\n+            => &[sym::const_loop],\n+\n+            | Self::Loop(While)\n+            | Self::Loop(WhileLet)\n+            | Self::Match(WhileDesugar)\n+            | Self::Match(WhileLetDesugar)\n+            => &[sym::const_loop, sym::const_if_match],\n+\n+            // A `for` loop's desugaring contains a call to `IntoIterator::into_iter`,\n+            // so they are not yet allowed with `#![feature(const_loop)]`.\n+            _ => return None,\n+        };\n+\n+        Some(gates)\n     }\n }\n \n@@ -120,11 +133,15 @@ impl<'tcx> CheckConstVisitor<'tcx> {\n \n     /// Emits an error when an unsupported expression is found in a const context.\n     fn const_check_violated(&self, expr: NonConstExpr, span: Span) {\n-        match expr.is_feature_gate_enabled(self.tcx.features()) {\n+        let features = self.tcx.features();\n+        let required_gates = expr.required_feature_gates();\n+        match required_gates {\n             // Don't emit an error if the user has enabled the requisite feature gates.\n-            Some(true) => return,\n+            Some(gates) if gates.iter().all(|&g| features.enabled(g)) => return,\n \n-            // Users of `-Zunleash-the-miri-inside-of-you` must use feature gates when possible.\n+            // `-Zunleash-the-miri-inside-of-you` only works for expressions that don't have a\n+            // corresponding feature gate. This encourages nightly users to use feature gates when\n+            // possible.\n             None if self.tcx.sess.opts.debugging_opts.unleash_the_miri_inside_of_you => {\n                 self.tcx.sess.span_warn(span, \"skipping const checks\");\n                 return;\n@@ -135,15 +152,47 @@ impl<'tcx> CheckConstVisitor<'tcx> {\n \n         let const_kind = self.const_kind\n             .expect(\"`const_check_violated` may only be called inside a const context\");\n-\n         let msg = format!(\"`{}` is not allowed in a `{}`\", expr.name(), const_kind);\n-        match expr {\n-            | NonConstExpr::Match(hir::MatchSource::Normal)\n-            | NonConstExpr::Match(hir::MatchSource::IfDesugar { .. })\n-            | NonConstExpr::Match(hir::MatchSource::IfLetDesugar { .. })\n-            => feature_err(&self.tcx.sess.parse_sess, sym::const_if_match, span, &msg).emit(),\n \n-            _ => span_err!(self.tcx.sess, span, E0744, \"{}\", msg),\n+        let required_gates = required_gates.unwrap_or(&[]);\n+        let missing_gates: Vec<_> = required_gates\n+            .iter()\n+            .copied()\n+            .filter(|&g| !features.enabled(g))\n+            .collect();\n+\n+        match missing_gates.as_slice() {\n+            &[] => span_err!(self.tcx.sess, span, E0744, \"{}\", msg),\n+\n+            // If the user enabled `#![feature(const_loop)]` but not `#![feature(const_if_match)]`,\n+            // explain why their `while` loop is being rejected.\n+            &[gate @ sym::const_if_match] if required_gates.contains(&sym::const_loop) => {\n+                feature_err(&self.tcx.sess.parse_sess, gate, span, &msg)\n+                    .note(\"`#![feature(const_loop)]` alone is not sufficient, \\\n+                           since this loop expression contains an implicit conditional\")\n+                    .emit();\n+            }\n+\n+            &[missing_primary, ref missing_secondary @ ..] => {\n+                let mut err = feature_err(&self.tcx.sess.parse_sess, missing_primary, span, &msg);\n+\n+                // If multiple feature gates would be required to enable this expression, include\n+                // them as help messages. Don't emit a separate error for each missing feature gate.\n+                //\n+                // FIXME(ecstaticmorse): Maybe this could be incorporated into `feature_err`? This\n+                // is a pretty narrow case, however.\n+                if nightly_options::is_nightly_build() {\n+                    for gate in missing_secondary {\n+                        let note = format!(\n+                            \"add `#![feature({})]` to the crate attributes to enable\",\n+                            gate,\n+                        );\n+                        err.help(&note);\n+                    }\n+                }\n+\n+                err.emit();\n+            }\n         }\n     }\n "}, {"sha": "f01867f32c67b67d3a7b5ca53714f8aa13711e94", "filename": "src/librustc_passes/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fc6b5d6efe163060bde31cc1c801086ed7ebc8f1/src%2Flibrustc_passes%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc6b5d6efe163060bde31cc1c801086ed7ebc8f1/src%2Flibrustc_passes%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flib.rs?ref=fc6b5d6efe163060bde31cc1c801086ed7ebc8f1", "patch": "@@ -8,6 +8,7 @@\n \n #![feature(in_band_lifetimes)]\n #![feature(nll)]\n+#![feature(slice_patterns)]\n \n #![recursion_limit=\"256\"]\n "}, {"sha": "ae34064c9267bd1d073e437040260a8b80f8608f", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fc6b5d6efe163060bde31cc1c801086ed7ebc8f1/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc6b5d6efe163060bde31cc1c801086ed7ebc8f1/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=fc6b5d6efe163060bde31cc1c801086ed7ebc8f1", "patch": "@@ -213,6 +213,7 @@ symbols! {\n         const_indexing,\n         const_in_array_repeat_expressions,\n         const_let,\n+        const_loop,\n         const_mut_refs,\n         const_panic,\n         const_raw_ptr_deref,"}, {"sha": "4d13a80e4ccdde2a85cd76e2f45bb3e7f6d5b8bc", "filename": "src/test/ui/closures/issue-52437.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fc6b5d6efe163060bde31cc1c801086ed7ebc8f1/src%2Ftest%2Fui%2Fclosures%2Fissue-52437.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc6b5d6efe163060bde31cc1c801086ed7ebc8f1/src%2Ftest%2Fui%2Fclosures%2Fissue-52437.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fissue-52437.stderr?ref=fc6b5d6efe163060bde31cc1c801086ed7ebc8f1", "patch": "@@ -4,11 +4,14 @@ error: invalid label name `'static`\n LL |     [(); &(&'static: loop { |x| {}; }) as *const _ as usize]\n    |             ^^^^^^^\n \n-error[E0744]: `loop` is not allowed in a `const`\n+error[E0658]: `loop` is not allowed in a `const`\n   --> $DIR/issue-52437.rs:2:13\n    |\n LL |     [(); &(&'static: loop { |x| {}; }) as *const _ as usize]\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/52000\n+   = help: add `#![feature(const_loop)]` to the crate attributes to enable\n \n error[E0282]: type annotations needed\n   --> $DIR/issue-52437.rs:2:30\n@@ -18,5 +21,5 @@ LL |     [(); &(&'static: loop { |x| {}; }) as *const _ as usize]\n \n error: aborting due to 3 previous errors\n \n-Some errors have detailed explanations: E0282, E0744.\n+Some errors have detailed explanations: E0282, E0658.\n For more information about an error, try `rustc --explain E0282`."}, {"sha": "ed3c66db2cd3979c55713e2adcc218648ace9f5f", "filename": "src/test/ui/consts/const-eval/infinite_loop.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fc6b5d6efe163060bde31cc1c801086ed7ebc8f1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Finfinite_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc6b5d6efe163060bde31cc1c801086ed7ebc8f1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Finfinite_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Finfinite_loop.stderr?ref=fc6b5d6efe163060bde31cc1c801086ed7ebc8f1", "patch": "@@ -1,4 +1,4 @@\n-error[E0744]: `while` is not allowed in a `const`\n+error[E0658]: `while` is not allowed in a `const`\n   --> $DIR/infinite_loop.rs:7:9\n    |\n LL | /         while n != 0 {\n@@ -8,6 +8,10 @@ LL | |\n LL | |\n LL | |         }\n    | |_________^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/52000\n+   = help: add `#![feature(const_loop)]` to the crate attributes to enable\n+   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n \n error[E0658]: `if` is not allowed in a `const`\n   --> $DIR/infinite_loop.rs:9:17\n@@ -39,5 +43,5 @@ LL |             n = if n % 2 == 0 { n/2 } else { 3*n + 1 };\n \n error: aborting due to 3 previous errors\n \n-Some errors have detailed explanations: E0080, E0658, E0744.\n+Some errors have detailed explanations: E0080, E0658.\n For more information about an error, try `rustc --explain E0080`."}, {"sha": "c8ac4b1a7629dac6cdd49e8c81033ee5750882fe", "filename": "src/test/ui/consts/const-eval/issue-52442.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fc6b5d6efe163060bde31cc1c801086ed7ebc8f1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52442.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc6b5d6efe163060bde31cc1c801086ed7ebc8f1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52442.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52442.stderr?ref=fc6b5d6efe163060bde31cc1c801086ed7ebc8f1", "patch": "@@ -1,8 +1,11 @@\n-error[E0744]: `loop` is not allowed in a `const`\n+error[E0658]: `loop` is not allowed in a `const`\n   --> $DIR/issue-52442.rs:2:14\n    |\n LL |     [();  { &loop { break } as *const _ as usize } ];\n    |              ^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/52000\n+   = help: add `#![feature(const_loop)]` to the crate attributes to enable\n \n error[E0658]: casting pointers to integers in constants is unstable\n   --> $DIR/issue-52442.rs:2:13\n@@ -21,5 +24,5 @@ LL |     [();  { &loop { break } as *const _ as usize } ];\n \n error: aborting due to 3 previous errors\n \n-Some errors have detailed explanations: E0080, E0658, E0744.\n+Some errors have detailed explanations: E0080, E0658.\n For more information about an error, try `rustc --explain E0080`."}, {"sha": "7c0c735f9a49a60944296bd9abc94d7b06318117", "filename": "src/test/ui/consts/const-eval/issue-52475.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fc6b5d6efe163060bde31cc1c801086ed7ebc8f1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52475.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc6b5d6efe163060bde31cc1c801086ed7ebc8f1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52475.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52475.stderr?ref=fc6b5d6efe163060bde31cc1c801086ed7ebc8f1", "patch": "@@ -1,4 +1,4 @@\n-error[E0744]: `while` is not allowed in a `const`\n+error[E0658]: `while` is not allowed in a `const`\n   --> $DIR/issue-52475.rs:6:9\n    |\n LL | /         while n < 5 {\n@@ -7,6 +7,10 @@ LL | |             n = (n + 1) % 5;\n LL | |             x = &0; // Materialize a new AllocId\n LL | |         }\n    | |_________^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/52000\n+   = help: add `#![feature(const_loop)]` to the crate attributes to enable\n+   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n \n warning: Constant evaluating a complex constant, this might take some time\n   --> $DIR/issue-52475.rs:2:18\n@@ -29,5 +33,5 @@ LL |             n = (n + 1) % 5;\n \n error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0080, E0744.\n+Some errors have detailed explanations: E0080, E0658.\n For more information about an error, try `rustc --explain E0080`."}, {"sha": "a02bbe557cf97dbcda06376a65a9b2e1b2394512", "filename": "src/test/ui/consts/const-eval/issue-62272.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fc6b5d6efe163060bde31cc1c801086ed7ebc8f1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-62272.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc6b5d6efe163060bde31cc1c801086ed7ebc8f1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-62272.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-62272.stderr?ref=fc6b5d6efe163060bde31cc1c801086ed7ebc8f1", "patch": "@@ -1,15 +1,21 @@\n-error[E0744]: `loop` is not allowed in a `const`\n+error[E0658]: `loop` is not allowed in a `const`\n   --> $DIR/issue-62272.rs:7:17\n    |\n LL | const FOO: () = loop { break; };\n    |                 ^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/52000\n+   = help: add `#![feature(const_loop)]` to the crate attributes to enable\n \n-error[E0744]: `loop` is not allowed in a `const`\n+error[E0658]: `loop` is not allowed in a `const`\n   --> $DIR/issue-62272.rs:10:20\n    |\n LL |     [FOO; { let x; loop { x = 5; break; } x }];\n    |                    ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/52000\n+   = help: add `#![feature(const_loop)]` to the crate attributes to enable\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0744`.\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "1282008fb637afee542307da20e1d3b5d133882c", "filename": "src/test/ui/consts/const-labeled-break.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fc6b5d6efe163060bde31cc1c801086ed7ebc8f1/src%2Ftest%2Fui%2Fconsts%2Fconst-labeled-break.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc6b5d6efe163060bde31cc1c801086ed7ebc8f1/src%2Ftest%2Fui%2Fconsts%2Fconst-labeled-break.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-labeled-break.stderr?ref=fc6b5d6efe163060bde31cc1c801086ed7ebc8f1", "patch": "@@ -1,9 +1,13 @@\n-error[E0744]: `while` is not allowed in a `const`\n+error[E0658]: `while` is not allowed in a `const`\n   --> $DIR/const-labeled-break.rs:10:19\n    |\n LL | const CRASH: () = 'a: while break 'a {};\n    |                   ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/52000\n+   = help: add `#![feature(const_loop)]` to the crate attributes to enable\n+   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0744`.\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "a53293743d522d1ed72336ab91b11881773ffcb6", "filename": "src/test/ui/consts/control-flow/basics.rs", "status": "modified", "additions": 52, "deletions": 9, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/fc6b5d6efe163060bde31cc1c801086ed7ebc8f1/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fbasics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc6b5d6efe163060bde31cc1c801086ed7ebc8f1/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fbasics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fbasics.rs?ref=fc6b5d6efe163060bde31cc1c801086ed7ebc8f1", "patch": "@@ -1,9 +1,10 @@\n-// Test basic functionality of `if` and `match` in a const context.\n+// Test basic functionality of control flow in a const context.\n \n // run-pass\n \n #![feature(const_panic)]\n #![feature(const_if_match)]\n+#![feature(const_loop)]\n #![feature(const_fn)]\n \n const X: u32 = 4;\n@@ -30,15 +31,57 @@ const fn gcd(a: u32, b: u32) -> u32 {\n     gcd(b, a % b)\n }\n \n+const fn fib(n: u64) -> u64 {\n+    if n == 0 {\n+        return 0;\n+    }\n+\n+    let mut fib = (0, 1);\n+    let mut i = 1;\n+    while i < n {\n+        fib = (fib.1, fib.0 + fib.1);\n+        i += 1;\n+    }\n+\n+    fib.1\n+}\n+\n+const fn is_prime(n: u64) -> bool {\n+    if n % 2 == 0 {\n+        return false;\n+    }\n+\n+    let mut div = 3;\n+    loop {\n+        if n % div == 0 {\n+            return false;\n+        }\n+\n+        if div * div > n {\n+            return true;\n+        }\n+\n+        div += 2;\n+    }\n+}\n+\n+macro_rules! const_assert {\n+    ($expr:expr) => {\n+        const _: () = assert!($expr);\n+        assert!($expr);\n+    }\n+}\n+\n fn main() {\n-    const _: () = assert!(abs_diff(4, 5) == abs_diff(5, 4));\n-    assert_eq!(abs_diff(4, 5), abs_diff(5, 4));\n+    const_assert!(abs_diff(4, 5) == abs_diff(5, 4));\n+    const_assert!(ABS_DIFF == abs_diff(5, 4));\n+\n+    const_assert!(gcd(48, 18) == 6);\n+    const_assert!(gcd(18, 48) == 6);\n \n-    const _: () = assert!(ABS_DIFF == abs_diff(5, 4));\n-    assert_eq!(ABS_DIFF, abs_diff(5, 4));\n+    const_assert!(fib(2) == 1);\n+    const_assert!(fib(8) == 21);\n \n-    const _: () = assert!(gcd(48, 18) == 6);\n-    const _: () = assert!(gcd(18, 48) == 6);\n-    assert_eq!(gcd(48, 18), 6);\n-    assert_eq!(gcd(18, 48), 6);\n+    const_assert!(is_prime(113));\n+    const_assert!(!is_prime(117));\n }"}, {"sha": "9da5546976c755ea4e8458dbdef1e146abdb776e", "filename": "src/test/ui/consts/control-flow/drop-failure.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/fc6b5d6efe163060bde31cc1c801086ed7ebc8f1/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fdrop-failure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc6b5d6efe163060bde31cc1c801086ed7ebc8f1/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fdrop-failure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fdrop-failure.rs?ref=fc6b5d6efe163060bde31cc1c801086ed7ebc8f1", "patch": "@@ -1,4 +1,5 @@\n #![feature(const_if_match)]\n+#![feature(const_loop)]\n \n // `x` is *not* always moved into the final value may be dropped inside the initializer.\n const _: Option<Vec<i32>> = {\n@@ -32,4 +33,29 @@ const _: Vec<i32> = {\n     }\n };\n \n+const _: Option<Vec<i32>> = {\n+    let mut some = Some(Vec::new());\n+    let mut tmp = None;\n+    //~^ ERROR destructors cannot be evaluated at compile-time\n+\n+    let mut i = 0;\n+    while i < 10 {\n+        tmp = some;\n+        some = None;\n+\n+        // We can escape the loop with `Some` still in `tmp`,\n+        // which would require that it be dropped at the end of the block.\n+        if i > 100 {\n+            break;\n+        }\n+\n+        some = tmp;\n+        tmp = None;\n+\n+        i += 1;\n+    }\n+\n+    some\n+};\n+\n fn main() {}"}, {"sha": "3eec3a929a07ff6ccc685436ee2b3e56d5aaef86", "filename": "src/test/ui/consts/control-flow/drop-failure.stderr", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fc6b5d6efe163060bde31cc1c801086ed7ebc8f1/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fdrop-failure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc6b5d6efe163060bde31cc1c801086ed7ebc8f1/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fdrop-failure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fdrop-failure.stderr?ref=fc6b5d6efe163060bde31cc1c801086ed7ebc8f1", "patch": "@@ -1,21 +1,27 @@\n error[E0493]: destructors cannot be evaluated at compile-time\n-  --> $DIR/drop-failure.rs:6:9\n+  --> $DIR/drop-failure.rs:7:9\n    |\n LL |     let x = Some(Vec::new());\n    |         ^ constants cannot evaluate destructors\n \n error[E0493]: destructors cannot be evaluated at compile-time\n-  --> $DIR/drop-failure.rs:19:9\n+  --> $DIR/drop-failure.rs:20:9\n    |\n LL |     let vec_tuple = (Vec::new(),);\n    |         ^^^^^^^^^ constants cannot evaluate destructors\n \n error[E0493]: destructors cannot be evaluated at compile-time\n-  --> $DIR/drop-failure.rs:27:9\n+  --> $DIR/drop-failure.rs:28:9\n    |\n LL |     let x: Result<_, Vec<i32>> = Ok(Vec::new());\n    |         ^ constants cannot evaluate destructors\n \n-error: aborting due to 3 previous errors\n+error[E0493]: destructors cannot be evaluated at compile-time\n+  --> $DIR/drop-failure.rs:38:9\n+   |\n+LL |     let mut tmp = None;\n+   |         ^^^^^^^ constants cannot evaluate destructors\n+\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0493`."}, {"sha": "185d6b639962b0399ad591e0e6456ebc13a38a3c", "filename": "src/test/ui/consts/control-flow/drop-success.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/fc6b5d6efe163060bde31cc1c801086ed7ebc8f1/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fdrop-success.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc6b5d6efe163060bde31cc1c801086ed7ebc8f1/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fdrop-success.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fdrop-success.rs?ref=fc6b5d6efe163060bde31cc1c801086ed7ebc8f1", "patch": "@@ -1,6 +1,7 @@\n // run-pass\n \n #![feature(const_if_match)]\n+#![feature(const_loop)]\n \n // `x` is always moved into the final value and is not dropped inside the initializer.\n const _: Option<Vec<i32>> = {\n@@ -21,4 +22,24 @@ const _: Option<Vec<i32>> = {\n     }\n };\n \n+const _: Option<Vec<i32>> = {\n+    let mut some = Some(Vec::new());\n+    let mut tmp = None;\n+\n+    let mut i = 0;\n+    while i < 10 {\n+        tmp = some;\n+        some = None;\n+\n+        // We can never exit the loop with `Some` in `tmp`.\n+\n+        some = tmp;\n+        tmp = None;\n+\n+        i += 1;\n+    }\n+\n+    some\n+};\n+\n fn main() {}"}, {"sha": "c2439f4a7bff31c697b132fca970c463038dc823", "filename": "src/test/ui/consts/control-flow/interior-mutability.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/fc6b5d6efe163060bde31cc1c801086ed7ebc8f1/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Finterior-mutability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc6b5d6efe163060bde31cc1c801086ed7ebc8f1/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Finterior-mutability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Finterior-mutability.rs?ref=fc6b5d6efe163060bde31cc1c801086ed7ebc8f1", "patch": "@@ -2,6 +2,7 @@\n // disqualifies it from promotion.\n \n #![feature(const_if_match)]\n+#![feature(const_loop)]\n \n use std::cell::Cell;\n \n@@ -21,7 +22,26 @@ const Y: Option<Cell<i32>> = {\n     y\n };\n \n+const Z: Option<Cell<i32>> = {\n+    let mut z = None;\n+    let mut i = 0;\n+    while i < 10 {\n+        if i == 8 {\n+            z = Some(Cell::new(4));\n+        }\n+\n+        if i == 9 {\n+            z = None;\n+        }\n+\n+        i += 1;\n+    }\n+    z\n+};\n+\n+\n fn main() {\n     let x: &'static _ = &X; //~ ERROR temporary value dropped while borrowed\n     let y: &'static _ = &Y; //~ ERROR temporary value dropped while borrowed\n+    let z: &'static _ = &Z; //~ ERROR temporary value dropped while borrowed\n }"}, {"sha": "0977c84d12d8a7505f222ae6dad0eeeabfeacd50", "filename": "src/test/ui/consts/control-flow/interior-mutability.stderr", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/fc6b5d6efe163060bde31cc1c801086ed7ebc8f1/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Finterior-mutability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc6b5d6efe163060bde31cc1c801086ed7ebc8f1/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Finterior-mutability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Finterior-mutability.stderr?ref=fc6b5d6efe163060bde31cc1c801086ed7ebc8f1", "patch": "@@ -1,24 +1,35 @@\n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/interior-mutability.rs:25:26\n+  --> $DIR/interior-mutability.rs:44:26\n    |\n LL |     let x: &'static _ = &X;\n    |            ----------    ^ creates a temporary which is freed while still in use\n    |            |\n    |            type annotation requires that borrow lasts for `'static`\n-LL |     let y: &'static _ = &Y;\n+...\n LL | }\n    | - temporary value is freed at the end of this statement\n \n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/interior-mutability.rs:26:26\n+  --> $DIR/interior-mutability.rs:45:26\n    |\n LL |     let y: &'static _ = &Y;\n    |            ----------    ^ creates a temporary which is freed while still in use\n    |            |\n    |            type annotation requires that borrow lasts for `'static`\n+LL |     let z: &'static _ = &Z;\n+LL | }\n+   | - temporary value is freed at the end of this statement\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/interior-mutability.rs:46:26\n+   |\n+LL |     let z: &'static _ = &Z;\n+   |            ----------    ^ creates a temporary which is freed while still in use\n+   |            |\n+   |            type annotation requires that borrow lasts for `'static`\n LL | }\n    | - temporary value is freed at the end of this statement\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0716`."}, {"sha": "71d96b216f974a0419cc6c18518c91e2db142adf", "filename": "src/test/ui/consts/control-flow/loop.both.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/fc6b5d6efe163060bde31cc1c801086ed7ebc8f1/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Floop.both.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc6b5d6efe163060bde31cc1c801086ed7ebc8f1/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Floop.both.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Floop.both.stderr?ref=fc6b5d6efe163060bde31cc1c801086ed7ebc8f1", "patch": "@@ -0,0 +1,19 @@\n+error[E0744]: `for` is not allowed in a `const`\n+  --> $DIR/loop.rs:63:5\n+   |\n+LL | /     for i in 0..4 {\n+LL | |         x += i;\n+LL | |     }\n+   | |_____^\n+\n+error[E0744]: `for` is not allowed in a `const`\n+  --> $DIR/loop.rs:67:5\n+   |\n+LL | /     for i in 0..4 {\n+LL | |         x += i;\n+LL | |     }\n+   | |_____^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0744`."}, {"sha": "e01081638ec22fa75bcd75e1529c018273eb7757", "filename": "src/test/ui/consts/control-flow/loop.if_match.stderr", "status": "modified", "additions": 69, "deletions": 29, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/fc6b5d6efe163060bde31cc1c801086ed7ebc8f1/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Floop.if_match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc6b5d6efe163060bde31cc1c801086ed7ebc8f1/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Floop.if_match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Floop.if_match.stderr?ref=fc6b5d6efe163060bde31cc1c801086ed7ebc8f1", "patch": "@@ -1,67 +1,88 @@\n-error[E0744]: `loop` is not allowed in a `const`\n-  --> $DIR/loop.rs:8:15\n+error[E0658]: `loop` is not allowed in a `const`\n+  --> $DIR/loop.rs:10:15\n    |\n LL | const _: () = loop {};\n    |               ^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/52000\n+   = help: add `#![feature(const_loop)]` to the crate attributes to enable\n \n-error[E0744]: `loop` is not allowed in a `static`\n-  --> $DIR/loop.rs:10:19\n+error[E0658]: `loop` is not allowed in a `static`\n+  --> $DIR/loop.rs:12:19\n    |\n LL | static FOO: i32 = loop { break 4; };\n    |                   ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/52000\n+   = help: add `#![feature(const_loop)]` to the crate attributes to enable\n \n-error[E0744]: `loop` is not allowed in a `const fn`\n-  --> $DIR/loop.rs:13:5\n+error[E0658]: `loop` is not allowed in a `const fn`\n+  --> $DIR/loop.rs:15:5\n    |\n LL |     loop {}\n    |     ^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/52000\n+   = help: add `#![feature(const_loop)]` to the crate attributes to enable\n \n-error[E0744]: `loop` is not allowed in a `const fn`\n-  --> $DIR/loop.rs:26:9\n+error[E0658]: `loop` is not allowed in a `const fn`\n+  --> $DIR/loop.rs:28:9\n    |\n LL |         loop {}\n    |         ^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/52000\n+   = help: add `#![feature(const_loop)]` to the crate attributes to enable\n \n-error[E0744]: `while` is not allowed in a `const`\n-  --> $DIR/loop.rs:38:9\n+error[E0658]: `while` is not allowed in a `const`\n+  --> $DIR/loop.rs:40:9\n    |\n LL |         while false {}\n    |         ^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/52000\n+   = help: add `#![feature(const_loop)]` to the crate attributes to enable\n \n-error[E0744]: `while` is not allowed in a `const`\n-  --> $DIR/loop.rs:47:5\n+error[E0658]: `while` is not allowed in a `const`\n+  --> $DIR/loop.rs:49:5\n    |\n LL | /     while x < 4 {\n LL | |         x += 1;\n LL | |     }\n    | |_____^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/52000\n+   = help: add `#![feature(const_loop)]` to the crate attributes to enable\n \n-error[E0744]: `while` is not allowed in a `const`\n-  --> $DIR/loop.rs:51:5\n+error[E0658]: `while` is not allowed in a `const`\n+  --> $DIR/loop.rs:53:5\n    |\n LL | /     while x < 8 {\n LL | |         x += 1;\n LL | |     }\n    | |_____^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/52000\n+   = help: add `#![feature(const_loop)]` to the crate attributes to enable\n \n error[E0744]: `for` is not allowed in a `const`\n-  --> $DIR/loop.rs:61:5\n+  --> $DIR/loop.rs:63:5\n    |\n LL | /     for i in 0..4 {\n LL | |         x += i;\n LL | |     }\n    | |_____^\n \n error[E0744]: `for` is not allowed in a `const`\n-  --> $DIR/loop.rs:65:5\n+  --> $DIR/loop.rs:67:5\n    |\n LL | /     for i in 0..4 {\n LL | |         x += i;\n LL | |     }\n    | |_____^\n \n-error[E0744]: `loop` is not allowed in a `const`\n-  --> $DIR/loop.rs:75:5\n+error[E0658]: `loop` is not allowed in a `const`\n+  --> $DIR/loop.rs:77:5\n    |\n LL | /     loop {\n LL | |         x += 1;\n@@ -70,9 +91,12 @@ LL | |             break;\n LL | |         }\n LL | |     }\n    | |_____^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/52000\n+   = help: add `#![feature(const_loop)]` to the crate attributes to enable\n \n-error[E0744]: `loop` is not allowed in a `const`\n-  --> $DIR/loop.rs:82:5\n+error[E0658]: `loop` is not allowed in a `const`\n+  --> $DIR/loop.rs:84:5\n    |\n LL | /     loop {\n LL | |         x += 1;\n@@ -81,31 +105,47 @@ LL | |             break;\n LL | |         }\n LL | |     }\n    | |_____^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/52000\n+   = help: add `#![feature(const_loop)]` to the crate attributes to enable\n \n-error[E0744]: `while` is not allowed in a `const`\n-  --> $DIR/loop.rs:94:5\n+error[E0658]: `while` is not allowed in a `const`\n+  --> $DIR/loop.rs:96:5\n    |\n LL |     while let None = Some(x) { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/52000\n+   = help: add `#![feature(const_loop)]` to the crate attributes to enable\n \n-error[E0744]: `while` is not allowed in a `const`\n-  --> $DIR/loop.rs:95:5\n+error[E0658]: `while` is not allowed in a `const`\n+  --> $DIR/loop.rs:97:5\n    |\n LL |     while let None = Some(x) { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/52000\n+   = help: add `#![feature(const_loop)]` to the crate attributes to enable\n \n-error[E0744]: `loop` is not allowed in a `const`\n-  --> $DIR/loop.rs:17:22\n+error[E0658]: `loop` is not allowed in a `const`\n+  --> $DIR/loop.rs:19:22\n    |\n LL |     const BAR: i32 = loop { break 4; };\n    |                      ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/52000\n+   = help: add `#![feature(const_loop)]` to the crate attributes to enable\n \n-error[E0744]: `loop` is not allowed in a `const`\n-  --> $DIR/loop.rs:21:22\n+error[E0658]: `loop` is not allowed in a `const`\n+  --> $DIR/loop.rs:23:22\n    |\n LL |     const BAR: i32 = loop { break 4; };\n    |                      ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/52000\n+   = help: add `#![feature(const_loop)]` to the crate attributes to enable\n \n error: aborting due to 15 previous errors\n \n-For more information about this error, try `rustc --explain E0744`.\n+Some errors have detailed explanations: E0658, E0744.\n+For more information about an error, try `rustc --explain E0658`."}, {"sha": "cf871c9a78c412640190526e8fbecff593bc89cd", "filename": "src/test/ui/consts/control-flow/loop.loop_.stderr", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/fc6b5d6efe163060bde31cc1c801086ed7ebc8f1/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Floop.loop_.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc6b5d6efe163060bde31cc1c801086ed7ebc8f1/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Floop.loop_.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Floop.loop_.stderr?ref=fc6b5d6efe163060bde31cc1c801086ed7ebc8f1", "patch": "@@ -0,0 +1,96 @@\n+error[E0658]: `while` is not allowed in a `const`\n+  --> $DIR/loop.rs:40:9\n+   |\n+LL |         while false {}\n+   |         ^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n+   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n+   = note: `#![feature(const_loop)]` alone is not sufficient, since this loop expression contains an implicit conditional\n+\n+error[E0658]: `while` is not allowed in a `const`\n+  --> $DIR/loop.rs:49:5\n+   |\n+LL | /     while x < 4 {\n+LL | |         x += 1;\n+LL | |     }\n+   | |_____^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n+   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n+   = note: `#![feature(const_loop)]` alone is not sufficient, since this loop expression contains an implicit conditional\n+\n+error[E0658]: `while` is not allowed in a `const`\n+  --> $DIR/loop.rs:53:5\n+   |\n+LL | /     while x < 8 {\n+LL | |         x += 1;\n+LL | |     }\n+   | |_____^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n+   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n+   = note: `#![feature(const_loop)]` alone is not sufficient, since this loop expression contains an implicit conditional\n+\n+error[E0744]: `for` is not allowed in a `const`\n+  --> $DIR/loop.rs:63:5\n+   |\n+LL | /     for i in 0..4 {\n+LL | |         x += i;\n+LL | |     }\n+   | |_____^\n+\n+error[E0744]: `for` is not allowed in a `const`\n+  --> $DIR/loop.rs:67:5\n+   |\n+LL | /     for i in 0..4 {\n+LL | |         x += i;\n+LL | |     }\n+   | |_____^\n+\n+error[E0658]: `if` is not allowed in a `const`\n+  --> $DIR/loop.rs:79:9\n+   |\n+LL | /         if x == 4 {\n+LL | |             break;\n+LL | |         }\n+   | |_________^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n+   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n+\n+error[E0658]: `if` is not allowed in a `const`\n+  --> $DIR/loop.rs:86:9\n+   |\n+LL | /         if x == 8 {\n+LL | |             break;\n+LL | |         }\n+   | |_________^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n+   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n+\n+error[E0658]: `while` is not allowed in a `const`\n+  --> $DIR/loop.rs:96:5\n+   |\n+LL |     while let None = Some(x) { }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n+   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n+   = note: `#![feature(const_loop)]` alone is not sufficient, since this loop expression contains an implicit conditional\n+\n+error[E0658]: `while` is not allowed in a `const`\n+  --> $DIR/loop.rs:97:5\n+   |\n+LL |     while let None = Some(x) { }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n+   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n+   = note: `#![feature(const_loop)]` alone is not sufficient, since this loop expression contains an implicit conditional\n+\n+error: aborting due to 9 previous errors\n+\n+Some errors have detailed explanations: E0658, E0744.\n+For more information about an error, try `rustc --explain E0658`."}, {"sha": "bc57f7568a70aca5fc18598221df853e7cbafa51", "filename": "src/test/ui/consts/control-flow/loop.rs", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/fc6b5d6efe163060bde31cc1c801086ed7ebc8f1/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Floop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc6b5d6efe163060bde31cc1c801086ed7ebc8f1/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Floop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Floop.rs?ref=fc6b5d6efe163060bde31cc1c801086ed7ebc8f1", "patch": "@@ -1,9 +1,11 @@\n-// Ensure that all loops are forbidden in a const context, even if `#![feature(const_if_match)]` is\n-// enabled.\n+// Ensure that loops are forbidden in a const context unless `#![feature(const_loop)]` is enabled.\n+// `while` loops require `#![feature(const_if_match)]` to be enabled as well.\n \n-// revisions: stock if_match\n+// gate-test-const_loop\n+// revisions: stock if_match loop_ both\n \n-#![cfg_attr(if_match, feature(const_if_match))]\n+#![cfg_attr(any(both, if_match), feature(const_if_match))]\n+#![cfg_attr(any(both, loop_), feature(const_loop))]\n \n const _: () = loop {}; //[stock,if_match]~ ERROR `loop` is not allowed in a `const`\n \n@@ -36,19 +38,19 @@ const fn const_outside() {\n fn main() {\n     let x = [0; {\n         while false {}\n-        //[stock,if_match]~^ ERROR `while` is not allowed in a `const`\n+        //[stock,if_match,loop_]~^ ERROR `while` is not allowed in a `const`\n         4\n     }];\n }\n \n const _: i32 = {\n     let mut x = 0;\n \n-    while x < 4 { //[stock,if_match]~ ERROR `while` is not allowed in a `const`\n+    while x < 4 { //[stock,if_match,loop_]~ ERROR `while` is not allowed in a `const`\n         x += 1;\n     }\n \n-    while x < 8 { //[stock,if_match]~ ERROR `while` is not allowed in a `const`\n+    while x < 8 { //[stock,if_match,loop_]~ ERROR `while` is not allowed in a `const`\n         x += 1;\n     }\n \n@@ -58,11 +60,11 @@ const _: i32 = {\n const _: i32 = {\n     let mut x = 0;\n \n-    for i in 0..4 { //[stock,if_match]~ ERROR `for` is not allowed in a `const`\n+    for i in 0..4 { //[stock,if_match,loop_,both]~ ERROR `for` is not allowed in a `const`\n         x += i;\n     }\n \n-    for i in 0..4 { //[stock,if_match]~ ERROR `for` is not allowed in a `const`\n+    for i in 0..4 { //[stock,if_match,loop_,both]~ ERROR `for` is not allowed in a `const`\n         x += i;\n     }\n \n@@ -74,14 +76,14 @@ const _: i32 = {\n \n     loop { //[stock,if_match]~ ERROR `loop` is not allowed in a `const`\n         x += 1;\n-        if x == 4 { //[stock]~ ERROR `if` is not allowed in a `const`\n+        if x == 4 { //[stock,loop_]~ ERROR `if` is not allowed in a `const`\n             break;\n         }\n     }\n \n     loop { //[stock,if_match]~ ERROR `loop` is not allowed in a `const`\n         x += 1;\n-        if x == 8 { //[stock]~ ERROR `if` is not allowed in a `const`\n+        if x == 8 { //[stock,loop_]~ ERROR `if` is not allowed in a `const`\n             break;\n         }\n     }\n@@ -91,7 +93,7 @@ const _: i32 = {\n \n const _: i32 = {\n     let mut x = 0;\n-    while let None = Some(x) { } //[stock,if_match]~ ERROR `while` is not allowed in a `const`\n-    while let None = Some(x) { } //[stock,if_match]~ ERROR `while` is not allowed in a `const`\n+    while let None = Some(x) { } //[stock,if_match,loop_]~ ERROR `while` is not allowed in a `const`\n+    while let None = Some(x) { } //[stock,if_match,loop_]~ ERROR `while` is not allowed in a `const`\n     x\n };"}, {"sha": "e3687cf12acc7fe9c8ae499d57e170ef960bbab4", "filename": "src/test/ui/consts/control-flow/loop.stock.stderr", "status": "modified", "additions": 74, "deletions": 30, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/fc6b5d6efe163060bde31cc1c801086ed7ebc8f1/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Floop.stock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc6b5d6efe163060bde31cc1c801086ed7ebc8f1/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Floop.stock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Floop.stock.stderr?ref=fc6b5d6efe163060bde31cc1c801086ed7ebc8f1", "patch": "@@ -1,67 +1,91 @@\n-error[E0744]: `loop` is not allowed in a `const`\n-  --> $DIR/loop.rs:8:15\n+error[E0658]: `loop` is not allowed in a `const`\n+  --> $DIR/loop.rs:10:15\n    |\n LL | const _: () = loop {};\n    |               ^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/52000\n+   = help: add `#![feature(const_loop)]` to the crate attributes to enable\n \n-error[E0744]: `loop` is not allowed in a `static`\n-  --> $DIR/loop.rs:10:19\n+error[E0658]: `loop` is not allowed in a `static`\n+  --> $DIR/loop.rs:12:19\n    |\n LL | static FOO: i32 = loop { break 4; };\n    |                   ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/52000\n+   = help: add `#![feature(const_loop)]` to the crate attributes to enable\n \n-error[E0744]: `loop` is not allowed in a `const fn`\n-  --> $DIR/loop.rs:13:5\n+error[E0658]: `loop` is not allowed in a `const fn`\n+  --> $DIR/loop.rs:15:5\n    |\n LL |     loop {}\n    |     ^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/52000\n+   = help: add `#![feature(const_loop)]` to the crate attributes to enable\n \n-error[E0744]: `loop` is not allowed in a `const fn`\n-  --> $DIR/loop.rs:26:9\n+error[E0658]: `loop` is not allowed in a `const fn`\n+  --> $DIR/loop.rs:28:9\n    |\n LL |         loop {}\n    |         ^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/52000\n+   = help: add `#![feature(const_loop)]` to the crate attributes to enable\n \n-error[E0744]: `while` is not allowed in a `const`\n-  --> $DIR/loop.rs:38:9\n+error[E0658]: `while` is not allowed in a `const`\n+  --> $DIR/loop.rs:40:9\n    |\n LL |         while false {}\n    |         ^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/52000\n+   = help: add `#![feature(const_loop)]` to the crate attributes to enable\n+   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n \n-error[E0744]: `while` is not allowed in a `const`\n-  --> $DIR/loop.rs:47:5\n+error[E0658]: `while` is not allowed in a `const`\n+  --> $DIR/loop.rs:49:5\n    |\n LL | /     while x < 4 {\n LL | |         x += 1;\n LL | |     }\n    | |_____^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/52000\n+   = help: add `#![feature(const_loop)]` to the crate attributes to enable\n+   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n \n-error[E0744]: `while` is not allowed in a `const`\n-  --> $DIR/loop.rs:51:5\n+error[E0658]: `while` is not allowed in a `const`\n+  --> $DIR/loop.rs:53:5\n    |\n LL | /     while x < 8 {\n LL | |         x += 1;\n LL | |     }\n    | |_____^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/52000\n+   = help: add `#![feature(const_loop)]` to the crate attributes to enable\n+   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n \n error[E0744]: `for` is not allowed in a `const`\n-  --> $DIR/loop.rs:61:5\n+  --> $DIR/loop.rs:63:5\n    |\n LL | /     for i in 0..4 {\n LL | |         x += i;\n LL | |     }\n    | |_____^\n \n error[E0744]: `for` is not allowed in a `const`\n-  --> $DIR/loop.rs:65:5\n+  --> $DIR/loop.rs:67:5\n    |\n LL | /     for i in 0..4 {\n LL | |         x += i;\n LL | |     }\n    | |_____^\n \n-error[E0744]: `loop` is not allowed in a `const`\n-  --> $DIR/loop.rs:75:5\n+error[E0658]: `loop` is not allowed in a `const`\n+  --> $DIR/loop.rs:77:5\n    |\n LL | /     loop {\n LL | |         x += 1;\n@@ -70,9 +94,12 @@ LL | |             break;\n LL | |         }\n LL | |     }\n    | |_____^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/52000\n+   = help: add `#![feature(const_loop)]` to the crate attributes to enable\n \n error[E0658]: `if` is not allowed in a `const`\n-  --> $DIR/loop.rs:77:9\n+  --> $DIR/loop.rs:79:9\n    |\n LL | /         if x == 4 {\n LL | |             break;\n@@ -82,8 +109,8 @@ LL | |         }\n    = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n \n-error[E0744]: `loop` is not allowed in a `const`\n-  --> $DIR/loop.rs:82:5\n+error[E0658]: `loop` is not allowed in a `const`\n+  --> $DIR/loop.rs:84:5\n    |\n LL | /     loop {\n LL | |         x += 1;\n@@ -92,9 +119,12 @@ LL | |             break;\n LL | |         }\n LL | |     }\n    | |_____^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/52000\n+   = help: add `#![feature(const_loop)]` to the crate attributes to enable\n \n error[E0658]: `if` is not allowed in a `const`\n-  --> $DIR/loop.rs:84:9\n+  --> $DIR/loop.rs:86:9\n    |\n LL | /         if x == 8 {\n LL | |             break;\n@@ -104,29 +134,43 @@ LL | |         }\n    = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n \n-error[E0744]: `while` is not allowed in a `const`\n-  --> $DIR/loop.rs:94:5\n+error[E0658]: `while` is not allowed in a `const`\n+  --> $DIR/loop.rs:96:5\n    |\n LL |     while let None = Some(x) { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/52000\n+   = help: add `#![feature(const_loop)]` to the crate attributes to enable\n+   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n \n-error[E0744]: `while` is not allowed in a `const`\n-  --> $DIR/loop.rs:95:5\n+error[E0658]: `while` is not allowed in a `const`\n+  --> $DIR/loop.rs:97:5\n    |\n LL |     while let None = Some(x) { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/52000\n+   = help: add `#![feature(const_loop)]` to the crate attributes to enable\n+   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n \n-error[E0744]: `loop` is not allowed in a `const`\n-  --> $DIR/loop.rs:17:22\n+error[E0658]: `loop` is not allowed in a `const`\n+  --> $DIR/loop.rs:19:22\n    |\n LL |     const BAR: i32 = loop { break 4; };\n    |                      ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/52000\n+   = help: add `#![feature(const_loop)]` to the crate attributes to enable\n \n-error[E0744]: `loop` is not allowed in a `const`\n-  --> $DIR/loop.rs:21:22\n+error[E0658]: `loop` is not allowed in a `const`\n+  --> $DIR/loop.rs:23:22\n    |\n LL |     const BAR: i32 = loop { break 4; };\n    |                      ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/52000\n+   = help: add `#![feature(const_loop)]` to the crate attributes to enable\n \n error: aborting due to 17 previous errors\n "}, {"sha": "58d1d4211334cdae32c020705c3b6f61e5ee3fcc", "filename": "src/test/ui/consts/min_const_fn/loop_ice.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fc6b5d6efe163060bde31cc1c801086ed7ebc8f1/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Floop_ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc6b5d6efe163060bde31cc1c801086ed7ebc8f1/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Floop_ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Floop_ice.stderr?ref=fc6b5d6efe163060bde31cc1c801086ed7ebc8f1", "patch": "@@ -1,9 +1,12 @@\n-error[E0744]: `loop` is not allowed in a `const fn`\n+error[E0658]: `loop` is not allowed in a `const fn`\n   --> $DIR/loop_ice.rs:2:5\n    |\n LL |     loop {}\n    |     ^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/52000\n+   = help: add `#![feature(const_loop)]` to the crate attributes to enable\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0744`.\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "c3b880200f8518204583c575c8a15d2460e2de99", "filename": "src/test/ui/issues/issue-51714.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fc6b5d6efe163060bde31cc1c801086ed7ebc8f1/src%2Ftest%2Fui%2Fissues%2Fissue-51714.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc6b5d6efe163060bde31cc1c801086ed7ebc8f1/src%2Ftest%2Fui%2Fissues%2Fissue-51714.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-51714.stderr?ref=fc6b5d6efe163060bde31cc1c801086ed7ebc8f1", "patch": "@@ -1,8 +1,12 @@\n-error[E0744]: `while` is not allowed in a `const`\n+error[E0658]: `while` is not allowed in a `const`\n   --> $DIR/issue-51714.rs:11:17\n    |\n LL |     [(); return while let Some(n) = Some(0) {}];\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/52000\n+   = help: add `#![feature(const_loop)]` to the crate attributes to enable\n+   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n \n error[E0572]: return statement outside of function body\n   --> $DIR/issue-51714.rs:2:14\n@@ -30,5 +34,5 @@ LL |     [(); return while let Some(n) = Some(0) {}];\n \n error: aborting due to 5 previous errors\n \n-Some errors have detailed explanations: E0572, E0744.\n+Some errors have detailed explanations: E0572, E0658.\n For more information about an error, try `rustc --explain E0572`."}]}