{"sha": "e3aa07403348ed9471436909f93570e9104bf810", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzYWEwNzQwMzM0OGVkOTQ3MTQzNjkwOWY5MzU3MGU5MTA0YmY4MTA=", "commit": {"author": {"name": "Luis de Bethencourt", "email": "luisbg@osg.samsung.com", "date": "2017-05-11T10:11:00Z"}, "committer": {"name": "Luis de Bethencourt", "email": "luisbg@osg.samsung.com", "date": "2017-05-11T15:22:32Z"}, "message": "clean tests/ui/derive.rs\n\nCleaning the empty lines for clarity.", "tree": {"sha": "1025d0bc2226831ca9369266cd75f89f166c7f51", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1025d0bc2226831ca9369266cd75f89f166c7f51"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e3aa07403348ed9471436909f93570e9104bf810", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e3aa07403348ed9471436909f93570e9104bf810", "html_url": "https://github.com/rust-lang/rust/commit/e3aa07403348ed9471436909f93570e9104bf810", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e3aa07403348ed9471436909f93570e9104bf810/comments", "author": {"login": "luisbg", "id": 303663, "node_id": "MDQ6VXNlcjMwMzY2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/303663?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luisbg", "html_url": "https://github.com/luisbg", "followers_url": "https://api.github.com/users/luisbg/followers", "following_url": "https://api.github.com/users/luisbg/following{/other_user}", "gists_url": "https://api.github.com/users/luisbg/gists{/gist_id}", "starred_url": "https://api.github.com/users/luisbg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luisbg/subscriptions", "organizations_url": "https://api.github.com/users/luisbg/orgs", "repos_url": "https://api.github.com/users/luisbg/repos", "events_url": "https://api.github.com/users/luisbg/events{/privacy}", "received_events_url": "https://api.github.com/users/luisbg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "luisbg", "id": 303663, "node_id": "MDQ6VXNlcjMwMzY2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/303663?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luisbg", "html_url": "https://github.com/luisbg", "followers_url": "https://api.github.com/users/luisbg/followers", "following_url": "https://api.github.com/users/luisbg/following{/other_user}", "gists_url": "https://api.github.com/users/luisbg/gists{/gist_id}", "starred_url": "https://api.github.com/users/luisbg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luisbg/subscriptions", "organizations_url": "https://api.github.com/users/luisbg/orgs", "repos_url": "https://api.github.com/users/luisbg/repos", "events_url": "https://api.github.com/users/luisbg/events{/privacy}", "received_events_url": "https://api.github.com/users/luisbg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2cce4809b60ea8c9d1f5fa4b5f7541874910aa6", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2cce4809b60ea8c9d1f5fa4b5f7541874910aa6", "html_url": "https://github.com/rust-lang/rust/commit/e2cce4809b60ea8c9d1f5fa4b5f7541874910aa6"}], "stats": {"total": 74, "additions": 32, "deletions": 42}, "files": [{"sha": "50c1c1103c44ca32b9b7022cc078d038d69d8323", "filename": "tests/ui/derive.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e3aa07403348ed9471436909f93570e9104bf810/tests%2Fui%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3aa07403348ed9471436909f93570e9104bf810/tests%2Fui%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderive.rs?ref=e3aa07403348ed9471436909f93570e9104bf810", "patch": "@@ -16,15 +16,13 @@ impl PartialEq<u64> for Foo {\n }\n \n #[derive(Hash)]\n-\n struct Bar;\n \n impl PartialEq for Bar {\n     fn eq(&self, _: &Bar) -> bool { true }\n }\n \n #[derive(Hash)]\n-\n struct Baz;\n \n impl PartialEq<Baz> for Baz {\n@@ -35,15 +33,13 @@ impl PartialEq<Baz> for Baz {\n struct Bah;\n \n impl Hash for Bah {\n-\n     fn hash<H: Hasher>(&self, _: &mut H) {}\n }\n \n #[derive(Copy)]\n struct Qux;\n \n impl Clone for Qux {\n-\n     fn clone(&self) -> Self { Qux }\n }\n \n@@ -68,7 +64,6 @@ struct Lt<'a> {\n }\n \n impl<'a> Clone for Lt<'a> {\n-\n     fn clone(&self) -> Self { unimplemented!() }\n }\n "}, {"sha": "25d59bdb7da9a01589756a83639d1aa8266aca41", "filename": "tests/ui/derive.stderr", "status": "modified", "additions": 32, "deletions": 37, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/e3aa07403348ed9471436909f93570e9104bf810/tests%2Fui%2Fderive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3aa07403348ed9471436909f93570e9104bf810/tests%2Fui%2Fderive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderive.stderr?ref=e3aa07403348ed9471436909f93570e9104bf810", "patch": "@@ -11,51 +11,49 @@ note: lint level defined here\n 6  | #![deny(warnings)]\n    |         ^^^^^^^^\n note: `PartialEq` implemented here\n-  --> $DIR/derive.rs:22:1\n+  --> $DIR/derive.rs:21:1\n    |\n-22 | / impl PartialEq for Bar {\n-23 | |     fn eq(&self, _: &Bar) -> bool { true }\n-24 | | }\n+21 | / impl PartialEq for Bar {\n+22 | |     fn eq(&self, _: &Bar) -> bool { true }\n+23 | | }\n    | |_^\n \n error: you are deriving `Hash` but have implemented `PartialEq` explicitly\n-  --> $DIR/derive.rs:26:10\n+  --> $DIR/derive.rs:25:10\n    |\n-26 | #[derive(Hash)]\n+25 | #[derive(Hash)]\n    |          ^^^^\n    |\n    = note: #[deny(derive_hash_xor_eq)] implied by #[deny(warnings)]\n note: `PartialEq` implemented here\n-  --> $DIR/derive.rs:30:1\n+  --> $DIR/derive.rs:28:1\n    |\n-30 | / impl PartialEq<Baz> for Baz {\n-31 | |     fn eq(&self, _: &Baz) -> bool { true }\n-32 | | }\n+28 | / impl PartialEq<Baz> for Baz {\n+29 | |     fn eq(&self, _: &Baz) -> bool { true }\n+30 | | }\n    | |_^\n \n error: you are implementing `Hash` explicitly but have derived `PartialEq`\n-  --> $DIR/derive.rs:37:1\n+  --> $DIR/derive.rs:35:1\n    |\n-37 | / impl Hash for Bah {\n-38 | |\n-39 | |     fn hash<H: Hasher>(&self, _: &mut H) {}\n-40 | | }\n+35 | / impl Hash for Bah {\n+36 | |     fn hash<H: Hasher>(&self, _: &mut H) {}\n+37 | | }\n    | |_^\n    |\n    = note: #[deny(derive_hash_xor_eq)] implied by #[deny(warnings)]\n note: `PartialEq` implemented here\n-  --> $DIR/derive.rs:34:10\n+  --> $DIR/derive.rs:32:10\n    |\n-34 | #[derive(PartialEq)]\n+32 | #[derive(PartialEq)]\n    |          ^^^^^^^^^\n \n error: you are implementing `Clone` explicitly on a `Copy` type\n-  --> $DIR/derive.rs:45:1\n+  --> $DIR/derive.rs:42:1\n    |\n-45 | / impl Clone for Qux {\n-46 | |\n-47 | |     fn clone(&self) -> Self { Qux }\n-48 | | }\n+42 | / impl Clone for Qux {\n+43 | |     fn clone(&self) -> Self { Qux }\n+44 | | }\n    | |_^\n    |\n    = note: #[deny(expl_impl_clone_on_copy)] implied by #[deny(warnings)]\n@@ -65,31 +63,28 @@ note: lint level defined here\n 6  | #![deny(warnings)]\n    |         ^^^^^^^^\n note: consider deriving `Clone` or removing `Copy`\n-  --> $DIR/derive.rs:45:1\n+  --> $DIR/derive.rs:42:1\n    |\n-45 | / impl Clone for Qux {\n-46 | |\n-47 | |     fn clone(&self) -> Self { Qux }\n-48 | | }\n+42 | / impl Clone for Qux {\n+43 | |     fn clone(&self) -> Self { Qux }\n+44 | | }\n    | |_^\n \n error: you are implementing `Clone` explicitly on a `Copy` type\n-  --> $DIR/derive.rs:70:1\n+  --> $DIR/derive.rs:66:1\n    |\n-70 | / impl<'a> Clone for Lt<'a> {\n-71 | |\n-72 | |     fn clone(&self) -> Self { unimplemented!() }\n-73 | | }\n+66 | / impl<'a> Clone for Lt<'a> {\n+67 | |     fn clone(&self) -> Self { unimplemented!() }\n+68 | | }\n    | |_^\n    |\n    = note: #[deny(expl_impl_clone_on_copy)] implied by #[deny(warnings)]\n note: consider deriving `Clone` or removing `Copy`\n-  --> $DIR/derive.rs:70:1\n+  --> $DIR/derive.rs:66:1\n    |\n-70 | / impl<'a> Clone for Lt<'a> {\n-71 | |\n-72 | |     fn clone(&self) -> Self { unimplemented!() }\n-73 | | }\n+66 | / impl<'a> Clone for Lt<'a> {\n+67 | |     fn clone(&self) -> Self { unimplemented!() }\n+68 | | }\n    | |_^\n \n error: aborting due to 5 previous errors"}]}