{"sha": "92505df338a860f1055241a07949de2af7ddc6b0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyNTA1ZGYzMzhhODYwZjEwNTUyNDFhMDc5NDlkZTJhZjdkZGM2YjA=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-01-28T00:13:45Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-02-05T18:32:01Z"}, "message": "Account for `fn()` types in lifetime suggestions", "tree": {"sha": "93bfee2c894e11c8b035fd1a1b2fe44ff0b6e5a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93bfee2c894e11c8b035fd1a1b2fe44ff0b6e5a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/92505df338a860f1055241a07949de2af7ddc6b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/92505df338a860f1055241a07949de2af7ddc6b0", "html_url": "https://github.com/rust-lang/rust/commit/92505df338a860f1055241a07949de2af7ddc6b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/92505df338a860f1055241a07949de2af7ddc6b0/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba3b44c508b133829f7b6a57f3e62c0735a7d110", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba3b44c508b133829f7b6a57f3e62c0735a7d110", "html_url": "https://github.com/rust-lang/rust/commit/ba3b44c508b133829f7b6a57f3e62c0735a7d110"}], "stats": {"total": 363, "additions": 210, "deletions": 153}, "files": [{"sha": "8213a99a92d1e50d00fa8a52da02e4ea66d65f98", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/92505df338a860f1055241a07949de2af7ddc6b0/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92505df338a860f1055241a07949de2af7ddc6b0/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=92505df338a860f1055241a07949de2af7ddc6b0", "patch": "@@ -19,7 +19,7 @@ use syntax::ast::{self, Ident, Path};\n use syntax::util::lev_distance::find_best_match_for_name;\n \n use crate::imports::{ImportDirective, ImportDirectiveSubclass, ImportResolver};\n-use crate::lifetimes::{ElisionFailureInfo, HRLTSpanType, MissingLifetimeSpot};\n+use crate::lifetimes::{ElisionFailureInfo, ForLifetimeSpanType, MissingLifetimeSpot};\n use crate::path_names_to_string;\n use crate::{AmbiguityError, AmbiguityErrorMisc, AmbiguityKind};\n use crate::{BindingError, CrateLint, HasGenericParams, LegacyScope, Module, ModuleOrUniformRoot};\n@@ -1495,23 +1495,35 @@ crate fn add_missing_lifetime_specifiers_label(\n                 let should_break;\n                 introduce_suggestion.push(match missing {\n                     MissingLifetimeSpot::Generics(generics) => {\n-                        msg = \"consider introducing a named lifetime parameter\";\n+                        msg = \"consider introducing a named lifetime parameter\".to_string();\n                         should_break = true;\n                         match &generics.params {\n                             [] => (generics.span, \"<'a>\".to_string()),\n                             [param, ..] => (param.span.shrink_to_lo(), \"'a, \".to_string()),\n                         }\n                     }\n                     MissingLifetimeSpot::HRLT { span, span_type } => {\n-                        msg = \"consider introducing a higher-ranked lifetime\";\n+                        msg = format!(\n+                            \"consider making the {} lifetime-generic with a new `'a` lifetime\",\n+                            match span_type {\n+                                ForLifetimeSpanType::BoundEmpty\n+                                | ForLifetimeSpanType::BoundTail => \"bound\",\n+                                ForLifetimeSpanType::TypeEmpty | ForLifetimeSpanType::TypeTail =>\n+                                    \"type\",\n+                            }\n+                        );\n                         should_break = false;\n                         err.note(\n                             \"for more information on higher-ranked lifetimes, visit \\\n                              https://doc.rust-lang.org/nomicon/hrtb.html\",\n                         );\n                         let suggestion = match span_type {\n-                            HRLTSpanType::Empty => \"for<'a> \",\n-                            HRLTSpanType::Tail => \", 'a\",\n+                            ForLifetimeSpanType::BoundEmpty | ForLifetimeSpanType::TypeEmpty => {\n+                                \"for<'a> \"\n+                            }\n+                            ForLifetimeSpanType::BoundTail | ForLifetimeSpanType::TypeTail => {\n+                                \", 'a\"\n+                            }\n                         };\n                         (*span, suggestion.to_string())\n                     }\n@@ -1528,7 +1540,7 @@ crate fn add_missing_lifetime_specifiers_label(\n                     }\n                 }\n                 introduce_suggestion.push((span, sugg.to_string()));\n-                err.multipart_suggestion(msg, introduce_suggestion, Applicability::MaybeIncorrect);\n+                err.multipart_suggestion(&msg, introduce_suggestion, Applicability::MaybeIncorrect);\n                 if should_break {\n                     break;\n                 }"}, {"sha": "9bb852b2093aaa7edb6f5a6f442b3ececeba57e6", "filename": "src/librustc_resolve/lifetimes.rs", "status": "modified", "additions": 42, "deletions": 22, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/92505df338a860f1055241a07949de2af7ddc6b0/src%2Flibrustc_resolve%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92505df338a860f1055241a07949de2af7ddc6b0/src%2Flibrustc_resolve%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flifetimes.rs?ref=92505df338a860f1055241a07949de2af7ddc6b0", "patch": "@@ -155,12 +155,14 @@ struct NamedRegionMap {\n \n crate enum MissingLifetimeSpot<'tcx> {\n     Generics(&'tcx hir::Generics<'tcx>),\n-    HRLT { span: Span, span_type: HRLTSpanType },\n+    HRLT { span: Span, span_type: ForLifetimeSpanType },\n }\n \n-crate enum HRLTSpanType {\n-    Empty,\n-    Tail,\n+crate enum ForLifetimeSpanType {\n+    BoundEmpty,\n+    BoundTail,\n+    TypeEmpty,\n+    TypeTail,\n }\n \n impl<'tcx> Into<MissingLifetimeSpot<'tcx>> for &'tcx hir::Generics<'tcx> {\n@@ -509,6 +511,21 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                 let next_early_index = self.next_early_index();\n                 let was_in_fn_syntax = self.is_in_fn_syntax;\n                 self.is_in_fn_syntax = true;\n+                let lifetime_span: Option<Span> = c\n+                    .generic_params\n+                    .iter()\n+                    .filter_map(|param| match param.kind {\n+                        GenericParamKind::Lifetime { .. } => Some(param.span),\n+                        _ => None,\n+                    })\n+                    .last();\n+                let (span, span_type) = if let Some(span) = lifetime_span {\n+                    (span.shrink_to_hi(), ForLifetimeSpanType::TypeTail)\n+                } else {\n+                    (ty.span.shrink_to_lo(), ForLifetimeSpanType::TypeEmpty)\n+                };\n+                self.missing_named_lifetime_spots\n+                    .push(MissingLifetimeSpot::HRLT { span, span_type });\n                 let scope = Scope::Binder {\n                     lifetimes: c\n                         .generic_params\n@@ -531,6 +548,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     this.check_lifetime_params(old_scope, &c.generic_params);\n                     intravisit::walk_ty(this, ty);\n                 });\n+                self.missing_named_lifetime_spots.pop();\n                 self.is_in_fn_syntax = was_in_fn_syntax;\n             }\n             hir::TyKind::TraitObject(bounds, ref lifetime) => {\n@@ -1873,12 +1891,23 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                         err.span_suggestion(\n                             *span,\n                             &format!(\n-                                \"consider introducing a higher-ranked lifetime `{}` here\",\n+                                \"consider making the {} lifetime-generic with a new `{}` lifetime\",\n+                                match span_type {\n+                                    ForLifetimeSpanType::BoundEmpty\n+                                    | ForLifetimeSpanType::BoundTail => \"bound\",\n+                                    ForLifetimeSpanType::TypeEmpty\n+                                    | ForLifetimeSpanType::TypeTail => \"type\",\n+                                },\n                                 lifetime_ref\n                             ),\n                             match span_type {\n-                                HRLTSpanType::Empty => format!(\"for<{}> \", lifetime_ref),\n-                                HRLTSpanType::Tail => format!(\", {}\", lifetime_ref),\n+                                ForLifetimeSpanType::TypeEmpty\n+                                | ForLifetimeSpanType::BoundEmpty => {\n+                                    format!(\"for<{}> \", lifetime_ref)\n+                                }\n+                                ForLifetimeSpanType::TypeTail | ForLifetimeSpanType::BoundTail => {\n+                                    format!(\", {}\", lifetime_ref)\n+                                }\n                             }\n                             .to_string(),\n                             Applicability::MaybeIncorrect,\n@@ -2487,13 +2516,12 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             params.iter().cloned().filter(|info| info.lifetime_count > 0).collect();\n \n         let elided_len = elided_params.len();\n-        let mut spans = vec![];\n \n         for (i, info) in elided_params.into_iter().enumerate() {\n             let ElisionFailureInfo { parent, index, lifetime_count: n, have_bound_regions, span } =\n                 info;\n \n-            spans.push(span);\n+            db.span_label(span, \"\");\n             let help_name = if let Some(ident) =\n                 parent.and_then(|body| self.tcx.hir().body(body).params[index].pat.simple_ident())\n             {\n@@ -2524,37 +2552,29 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             }\n         }\n \n-        let help = |msg| {\n-            if spans.is_empty() {\n-                db.help(msg);\n-            } else {\n-                db.span_help(spans, msg);\n-            }\n-        };\n-\n         if len == 0 {\n             db.help(\n                 \"this function's return type contains a borrowed value, \\\n                  but there is no value for it to be borrowed from\",\n             );\n             self.suggest_lifetime(db, span, \"consider giving it a 'static lifetime\")\n         } else if elided_len == 0 {\n-            help(\n+            db.help(\n                 \"this function's return type contains a borrowed value with \\\n                  an elided lifetime, but the lifetime cannot be derived from \\\n                  the arguments\",\n             );\n             let msg = \"consider giving it an explicit bounded or 'static lifetime\";\n             self.suggest_lifetime(db, span, msg)\n         } else if elided_len == 1 {\n-            help(&format!(\n+            db.help(&format!(\n                 \"this function's return type contains a borrowed value, \\\n                  but the signature does not say which {} it is borrowed from\",\n                 m\n             ));\n             true\n         } else {\n-            help(&format!(\n+            db.help(&format!(\n                 \"this function's return type contains a borrowed value, \\\n                  but the signature does not say whether it is borrowed from {}\",\n                 m\n@@ -2816,8 +2836,8 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             .contains(&Some(did))\n             {\n                 let (span, span_type) = match &trait_ref.bound_generic_params {\n-                    [] => (trait_ref.span.shrink_to_lo(), HRLTSpanType::Empty),\n-                    [.., bound] => (bound.span.shrink_to_hi(), HRLTSpanType::Tail),\n+                    [] => (trait_ref.span.shrink_to_lo(), ForLifetimeSpanType::BoundEmpty),\n+                    [.., bound] => (bound.span.shrink_to_hi(), ForLifetimeSpanType::BoundTail),\n                 };\n                 self.missing_named_lifetime_spots\n                     .push(MissingLifetimeSpot::HRLT { span, span_type });"}, {"sha": "9f51ced9c3f499cb73ab02e5cece2ebca63ea4f0", "filename": "src/test/ui/async-await/issues/issue-63388-2.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/92505df338a860f1055241a07949de2af7ddc6b0/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/92505df338a860f1055241a07949de2af7ddc6b0/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-2.stderr?ref=92505df338a860f1055241a07949de2af7ddc6b0", "patch": "@@ -1,14 +1,12 @@\n error[E0106]: missing lifetime specifier\n   --> $DIR/issue-63388-2.rs:12:10\n    |\n+LL |         foo: &dyn Foo, bar: &'a dyn Foo\n+   |              --------       -----------\n LL |     ) -> &dyn Foo\n    |          ^ help: consider using the named lifetime: `&'a`\n    |\n-help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from `foo` or `bar`\n-  --> $DIR/issue-63388-2.rs:11:14\n-   |\n-LL |         foo: &dyn Foo, bar: &'a dyn Foo\n-   |              ^^^^^^^^       ^^^^^^^^^^^\n+   = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from `foo` or `bar`\n \n error: cannot infer an appropriate lifetime\n   --> $DIR/issue-63388-2.rs:11:9"}, {"sha": "5e25952390b2dedfb69bfc55d2bb2c27a775b105", "filename": "src/test/ui/generic/generic-extern-lifetime.stderr", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/92505df338a860f1055241a07949de2af7ddc6b0/src%2Ftest%2Fui%2Fgeneric%2Fgeneric-extern-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/92505df338a860f1055241a07949de2af7ddc6b0/src%2Ftest%2Fui%2Fgeneric%2Fgeneric-extern-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric%2Fgeneric-extern-lifetime.stderr?ref=92505df338a860f1055241a07949de2af7ddc6b0", "patch": "@@ -9,12 +9,24 @@ error[E0261]: use of undeclared lifetime name `'a`\n    |\n LL |    pub fn life4<'b>(x: for<'c> fn(&'a i32));\n    |                                    ^^ undeclared lifetime\n+   |\n+   = note: for more information on higher-ranked lifetimes, visit https://doc.rust-lang.org/nomicon/hrtb.html\n+help: consider making the type lifetime-generic with a new `'a` lifetime\n+   |\n+LL |    pub fn life4<'b>(x: for<'c, 'a> fn(&'a i32));\n+   |                              ^^^^\n \n error[E0261]: use of undeclared lifetime name `'a`\n   --> $DIR/generic-extern-lifetime.rs:11:38\n    |\n LL |    pub fn life7<'b>() -> for<'c> fn(&'a i32);\n    |                                      ^^ undeclared lifetime\n+   |\n+   = note: for more information on higher-ranked lifetimes, visit https://doc.rust-lang.org/nomicon/hrtb.html\n+help: consider making the type lifetime-generic with a new `'a` lifetime\n+   |\n+LL |    pub fn life7<'b>() -> for<'c, 'a> fn(&'a i32);\n+   |                                ^^^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "5abaf3c3aefff5d12fd7aedf9f8569a0fa375df0", "filename": "src/test/ui/in-band-lifetimes/no_introducing_in_band_in_locals.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/92505df338a860f1055241a07949de2af7ddc6b0/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fno_introducing_in_band_in_locals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/92505df338a860f1055241a07949de2af7ddc6b0/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fno_introducing_in_band_in_locals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fno_introducing_in_band_in_locals.stderr?ref=92505df338a860f1055241a07949de2af7ddc6b0", "patch": "@@ -9,10 +9,18 @@ LL |     let y: &'test u32 = x;\n error[E0261]: use of undeclared lifetime name `'test`\n   --> $DIR/no_introducing_in_band_in_locals.rs:10:16\n    |\n-LL | fn bar() {\n-   |       - help: consider introducing lifetime `'test` here: `<'test>`\n LL |     let y: fn(&'test u32) = foo2;\n    |                ^^^^^ undeclared lifetime\n+   |\n+   = note: for more information on higher-ranked lifetimes, visit https://doc.rust-lang.org/nomicon/hrtb.html\n+help: consider introducing lifetime `'test` here\n+   |\n+LL | fn bar<'test>() {\n+   |       ^^^^^^^\n+help: consider making the type lifetime-generic with a new `'test` lifetime\n+   |\n+LL |     let y: for<'test> fn(&'test u32) = foo2;\n+   |            ^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "398e97a6f207adb1ca96cb6f2b9b6e696b8d9e5a", "filename": "src/test/ui/issues/issue-19707.stderr", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/92505df338a860f1055241a07949de2af7ddc6b0/src%2Ftest%2Fui%2Fissues%2Fissue-19707.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/92505df338a860f1055241a07949de2af7ddc6b0/src%2Ftest%2Fui%2Fissues%2Fissue-19707.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19707.stderr?ref=92505df338a860f1055241a07949de2af7ddc6b0", "patch": "@@ -2,13 +2,14 @@ error[E0106]: missing lifetime specifier\n   --> $DIR/issue-19707.rs:3:28\n    |\n LL | type Foo = fn(&u8, &u8) -> &u8;\n-   |                            ^ expected named lifetime parameter\n+   |               ---  ---     ^ expected named lifetime parameter\n    |\n-help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from argument 1 or argument 2\n-  --> $DIR/issue-19707.rs:3:15\n+   = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from argument 1 or argument 2\n+   = note: for more information on higher-ranked lifetimes, visit https://doc.rust-lang.org/nomicon/hrtb.html\n+help: consider making the type lifetime-generic with a new `'a` lifetime\n    |\n-LL | type Foo = fn(&u8, &u8) -> &u8;\n-   |               ^^^  ^^^\n+LL | type Foo = for<'a> fn(&'a u8, &'a u8) -> &'a u8;\n+   |            ^^^^^^^    ^^^^^^  ^^^^^^     ^^^\n help: consider introducing a named lifetime parameter\n    |\n LL | type Foo<'a> = fn(&'a u8, &'a u8) -> &'a u8;\n@@ -18,15 +19,11 @@ error[E0106]: missing lifetime specifier\n   --> $DIR/issue-19707.rs:5:27\n    |\n LL | fn bar<F: Fn(&u8, &u8) -> &u8>(f: &F) {}\n-   |                           ^ expected named lifetime parameter\n+   |              ---  ---     ^ expected named lifetime parameter\n    |\n-help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from argument 1 or argument 2\n-  --> $DIR/issue-19707.rs:5:14\n-   |\n-LL | fn bar<F: Fn(&u8, &u8) -> &u8>(f: &F) {}\n-   |              ^^^  ^^^\n+   = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from argument 1 or argument 2\n    = note: for more information on higher-ranked lifetimes, visit https://doc.rust-lang.org/nomicon/hrtb.html\n-help: consider introducing a higher-ranked lifetime\n+help: consider making the bound lifetime-generic with a new `'a` lifetime\n    |\n LL | fn bar<F: for<'a> Fn(&'a u8, &'a u8) -> &'a u8>(f: &F) {}\n    |           ^^^^^^^    ^^^^^^  ^^^^^^     ^^^"}, {"sha": "1d8fbdc63c5e0271c3e99f68a7bb3cc8bbe3627e", "filename": "src/test/ui/issues/issue-26638.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/92505df338a860f1055241a07949de2af7ddc6b0/src%2Ftest%2Fui%2Fissues%2Fissue-26638.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/92505df338a860f1055241a07949de2af7ddc6b0/src%2Ftest%2Fui%2Fissues%2Fissue-26638.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26638.stderr?ref=92505df338a860f1055241a07949de2af7ddc6b0", "patch": "@@ -2,13 +2,9 @@ error[E0106]: missing lifetime specifier\n   --> $DIR/issue-26638.rs:1:62\n    |\n LL | fn parse_type(iter: Box<dyn Iterator<Item=&str>+'static>) -> &str { iter.next() }\n-   |                                                              ^ expected named lifetime parameter\n+   |                     ------------------------------------     ^ expected named lifetime parameter\n    |\n-help: this function's return type contains a borrowed value, but the signature does not say which one of `iter`'s 2 lifetimes it is borrowed from\n-  --> $DIR/issue-26638.rs:1:21\n-   |\n-LL | fn parse_type(iter: Box<dyn Iterator<Item=&str>+'static>) -> &str { iter.next() }\n-   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = help: this function's return type contains a borrowed value, but the signature does not say which one of `iter`'s 2 lifetimes it is borrowed from\n help: consider introducing a named lifetime parameter\n    |\n LL | fn parse_type<'a>(iter: Box<dyn Iterator<Item=&str>+'static>) -> &'a str { iter.next() }"}, {"sha": "ab43d4a3c6002cfd7a497b9a4a4b2f975042cfdb", "filename": "src/test/ui/issues/issue-30255.stderr", "status": "modified", "additions": 6, "deletions": 18, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/92505df338a860f1055241a07949de2af7ddc6b0/src%2Ftest%2Fui%2Fissues%2Fissue-30255.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/92505df338a860f1055241a07949de2af7ddc6b0/src%2Ftest%2Fui%2Fissues%2Fissue-30255.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-30255.stderr?ref=92505df338a860f1055241a07949de2af7ddc6b0", "patch": "@@ -2,13 +2,9 @@ error[E0106]: missing lifetime specifier\n   --> $DIR/issue-30255.rs:9:24\n    |\n LL | fn f(a: &S, b: i32) -> &i32 {\n-   |                        ^ expected named lifetime parameter\n+   |         --             ^ expected named lifetime parameter\n    |\n-help: this function's return type contains a borrowed value, but the signature does not say which one of `a`'s 2 lifetimes it is borrowed from\n-  --> $DIR/issue-30255.rs:9:9\n-   |\n-LL | fn f(a: &S, b: i32) -> &i32 {\n-   |         ^^\n+   = help: this function's return type contains a borrowed value, but the signature does not say which one of `a`'s 2 lifetimes it is borrowed from\n help: consider introducing a named lifetime parameter\n    |\n LL | fn f<'a>(a: &'a S, b: i32) -> &'a i32 {\n@@ -18,13 +14,9 @@ error[E0106]: missing lifetime specifier\n   --> $DIR/issue-30255.rs:14:34\n    |\n LL | fn g(a: &S, b: bool, c: &i32) -> &i32 {\n-   |                                  ^ expected named lifetime parameter\n-   |\n-help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from one of `a`'s 2 lifetimes or `c`\n-  --> $DIR/issue-30255.rs:14:9\n+   |         --              ----     ^ expected named lifetime parameter\n    |\n-LL | fn g(a: &S, b: bool, c: &i32) -> &i32 {\n-   |         ^^              ^^^^\n+   = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from one of `a`'s 2 lifetimes or `c`\n help: consider introducing a named lifetime parameter\n    |\n LL | fn g<'a>(a: &'a S, b: bool, c: &'a i32) -> &'a i32 {\n@@ -34,13 +26,9 @@ error[E0106]: missing lifetime specifier\n   --> $DIR/issue-30255.rs:19:44\n    |\n LL | fn h(a: &bool, b: bool, c: &S, d: &i32) -> &i32 {\n-   |                                            ^ expected named lifetime parameter\n-   |\n-help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from `a`, one of `c`'s 2 lifetimes, or `d`\n-  --> $DIR/issue-30255.rs:19:9\n+   |         -----              --     ----     ^ expected named lifetime parameter\n    |\n-LL | fn h(a: &bool, b: bool, c: &S, d: &i32) -> &i32 {\n-   |         ^^^^^              ^^     ^^^^\n+   = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from `a`, one of `c`'s 2 lifetimes, or `d`\n help: consider introducing a named lifetime parameter\n    |\n LL | fn h<'a>(a: &'a bool, b: bool, c: &'a S, d: &'a i32) -> &'a i32 {"}, {"sha": "461c1832e9af959c9e82281d5e498a20a6a87fe8", "filename": "src/test/ui/lifetimes/lifetime-elision-return-type-requires-explicit-lifetime.stderr", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/92505df338a860f1055241a07949de2af7ddc6b0/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-requires-explicit-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/92505df338a860f1055241a07949de2af7ddc6b0/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-requires-explicit-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-requires-explicit-lifetime.stderr?ref=92505df338a860f1055241a07949de2af7ddc6b0", "patch": "@@ -10,13 +10,9 @@ error[E0106]: missing lifetime specifier\n   --> $DIR/lifetime-elision-return-type-requires-explicit-lifetime.rs:7:33\n    |\n LL | fn g(_x: &isize, _y: &isize) -> &isize {\n-   |                                 ^ expected named lifetime parameter\n+   |          ------      ------     ^ expected named lifetime parameter\n    |\n-help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from `_x` or `_y`\n-  --> $DIR/lifetime-elision-return-type-requires-explicit-lifetime.rs:7:10\n-   |\n-LL | fn g(_x: &isize, _y: &isize) -> &isize {\n-   |          ^^^^^^      ^^^^^^\n+   = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from `_x` or `_y`\n help: consider introducing a named lifetime parameter\n    |\n LL | fn g<'a>(_x: &'a isize, _y: &'a isize) -> &'a isize {\n@@ -26,13 +22,9 @@ error[E0106]: missing lifetime specifier\n   --> $DIR/lifetime-elision-return-type-requires-explicit-lifetime.rs:17:19\n    |\n LL | fn h(_x: &Foo) -> &isize {\n-   |                   ^ expected named lifetime parameter\n+   |          ----     ^ expected named lifetime parameter\n    |\n-help: this function's return type contains a borrowed value, but the signature does not say which one of `_x`'s 2 lifetimes it is borrowed from\n-  --> $DIR/lifetime-elision-return-type-requires-explicit-lifetime.rs:17:10\n-   |\n-LL | fn h(_x: &Foo) -> &isize {\n-   |          ^^^^\n+   = help: this function's return type contains a borrowed value, but the signature does not say which one of `_x`'s 2 lifetimes it is borrowed from\n help: consider introducing a named lifetime parameter\n    |\n LL | fn h<'a>(_x: &'a Foo) -> &'a isize {"}, {"sha": "c1fcab2409f642287bf7fc9916547cd38bae910b", "filename": "src/test/ui/lifetimes/lifetime-errors/ex1b-return-no-names-if-else.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/92505df338a860f1055241a07949de2af7ddc6b0/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1b-return-no-names-if-else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/92505df338a860f1055241a07949de2af7ddc6b0/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1b-return-no-names-if-else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1b-return-no-names-if-else.stderr?ref=92505df338a860f1055241a07949de2af7ddc6b0", "patch": "@@ -2,13 +2,9 @@ error[E0106]: missing lifetime specifier\n   --> $DIR/ex1b-return-no-names-if-else.rs:1:29\n    |\n LL | fn foo(x: &i32, y: &i32) -> &i32 {\n-   |                             ^ expected named lifetime parameter\n+   |           ----     ----     ^ expected named lifetime parameter\n    |\n-help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from `x` or `y`\n-  --> $DIR/ex1b-return-no-names-if-else.rs:1:11\n-   |\n-LL | fn foo(x: &i32, y: &i32) -> &i32 {\n-   |           ^^^^     ^^^^\n+   = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from `x` or `y`\n help: consider introducing a named lifetime parameter\n    |\n LL | fn foo<'a>(x: &'a i32, y: &'a i32) -> &'a i32 {"}, {"sha": "e139e3f42518901d8930e1b7ee729131fa672a9b", "filename": "src/test/ui/regions/regions-name-undeclared.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/92505df338a860f1055241a07949de2af7ddc6b0/src%2Ftest%2Fui%2Fregions%2Fregions-name-undeclared.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/92505df338a860f1055241a07949de2af7ddc6b0/src%2Ftest%2Fui%2Fregions%2Fregions-name-undeclared.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-name-undeclared.stderr?ref=92505df338a860f1055241a07949de2af7ddc6b0", "patch": "@@ -94,7 +94,7 @@ help: consider introducing lifetime `'b` here\n    |\n LL | fn fn_types<'b>(a: &'a isize,\n    |            ^^^^\n-help: consider introducing a higher-ranked lifetime `'b` here\n+help: consider making the bound lifetime-generic with a new `'b` lifetime\n    |\n LL |             b: Box<dyn for<'a, 'b> FnOnce(&'a isize,\n    |                              ^^^^\n@@ -110,7 +110,7 @@ help: consider introducing lifetime `'b` here\n    |\n LL | fn fn_types<'b>(a: &'a isize,\n    |            ^^^^\n-help: consider introducing a higher-ranked lifetime `'b` here\n+help: consider making the bound lifetime-generic with a new `'b` lifetime\n    |\n LL |             b: Box<dyn for<'a, 'b> FnOnce(&'a isize,\n    |                              ^^^^"}, {"sha": "35a2ef10c2e3c48612ffc274c0587cba5d02355d", "filename": "src/test/ui/rfc1623-2.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/92505df338a860f1055241a07949de2af7ddc6b0/src%2Ftest%2Fui%2Frfc1623-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92505df338a860f1055241a07949de2af7ddc6b0/src%2Ftest%2Fui%2Frfc1623-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1623-2.rs?ref=92505df338a860f1055241a07949de2af7ddc6b0", "patch": "@@ -0,0 +1,13 @@\n+#![allow(dead_code)]\n+\n+fn non_elidable<'a, 'b>(a: &'a u8, b: &'b u8) -> &'a u8 {\n+    a\n+}\n+\n+// the boundaries of elision\n+static NON_ELIDABLE_FN: &fn(&u8, &u8) -> &u8 =\n+//~^ ERROR missing lifetime specifier [E0106]\n+    &(non_elidable as fn(&u8, &u8) -> &u8);\n+    //~^ ERROR missing lifetime specifier [E0106]\n+\n+fn main() {}"}, {"sha": "c927ad9e0ba4b98228d07316f5ebab74b3c82f0b", "filename": "src/test/ui/rfc1623-2.stderr", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/92505df338a860f1055241a07949de2af7ddc6b0/src%2Ftest%2Fui%2Frfc1623-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/92505df338a860f1055241a07949de2af7ddc6b0/src%2Ftest%2Fui%2Frfc1623-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1623-2.stderr?ref=92505df338a860f1055241a07949de2af7ddc6b0", "patch": "@@ -0,0 +1,29 @@\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/rfc1623-2.rs:8:42\n+   |\n+LL | static NON_ELIDABLE_FN: &fn(&u8, &u8) -> &u8 =\n+   |                             ---  ---     ^ expected named lifetime parameter\n+   |\n+   = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from argument 1 or argument 2\n+   = note: for more information on higher-ranked lifetimes, visit https://doc.rust-lang.org/nomicon/hrtb.html\n+help: consider making the type lifetime-generic with a new `'a` lifetime\n+   |\n+LL | static NON_ELIDABLE_FN: &for<'a> fn(&'a u8, &'a u8) -> &'a u8 =\n+   |                          ^^^^^^^    ^^^^^^  ^^^^^^     ^^^\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/rfc1623-2.rs:10:39\n+   |\n+LL |     &(non_elidable as fn(&u8, &u8) -> &u8);\n+   |                          ---  ---     ^ expected named lifetime parameter\n+   |\n+   = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from argument 1 or argument 2\n+   = note: for more information on higher-ranked lifetimes, visit https://doc.rust-lang.org/nomicon/hrtb.html\n+help: consider making the type lifetime-generic with a new `'a` lifetime\n+   |\n+LL |     &(non_elidable as for<'a> fn(&'a u8, &'a u8) -> &'a u8);\n+   |                       ^^^^^^^    ^^^^^^  ^^^^^^     ^^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0106`."}, {"sha": "55f5d0b94dcb05b72c3e1b5762f1de2a5722f029", "filename": "src/test/ui/rfc1623.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/92505df338a860f1055241a07949de2af7ddc6b0/src%2Ftest%2Fui%2Frfc1623.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92505df338a860f1055241a07949de2af7ddc6b0/src%2Ftest%2Fui%2Frfc1623.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1623.rs?ref=92505df338a860f1055241a07949de2af7ddc6b0", "patch": "@@ -4,11 +4,10 @@ fn non_elidable<'a, 'b>(a: &'a u8, b: &'b u8) -> &'a u8 {\n     a\n }\n \n-// the boundaries of elision\n-static NON_ELIDABLE_FN: &fn(&u8, &u8) -> &u8 =\n-//~^ ERROR missing lifetime specifier [E0106]\n-    &(non_elidable as fn(&u8, &u8) -> &u8);\n-    //~^ ERROR missing lifetime specifier [E0106]\n+// The incorrect case without `for<'a>` is tested for in `rfc1623-2.rs`\n+static NON_ELIDABLE_FN: &for<'a> fn(&'a u8, &'a u8) -> &'a u8 =\n+    &(non_elidable as for<'a> fn(&'a u8, &'a u8) -> &'a u8);\n+\n \n struct SomeStruct<'x, 'y, 'z: 'x> {\n     foo: &'x Foo<'z>,\n@@ -20,10 +19,12 @@ fn id<T>(t: T) -> T {\n     t\n }\n \n-static SOME_STRUCT: &SomeStruct = SomeStruct {\n+static SOME_STRUCT: &SomeStruct = SomeStruct { //~ ERROR mismatched types\n     foo: &Foo { bools: &[false, true] },\n     bar: &Bar { bools: &[true, true] },\n     f: &id,\n+    //~^ ERROR type mismatch in function arguments\n+    //~| ERROR type mismatch resolving\n };\n \n // very simple test for a 'static static with default lifetime"}, {"sha": "ca956004ef76f5aac107abaf37c30600b4abd5fa", "filename": "src/test/ui/rfc1623.stderr", "status": "modified", "additions": 37, "deletions": 18, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/92505df338a860f1055241a07949de2af7ddc6b0/src%2Ftest%2Fui%2Frfc1623.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/92505df338a860f1055241a07949de2af7ddc6b0/src%2Ftest%2Fui%2Frfc1623.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1623.stderr?ref=92505df338a860f1055241a07949de2af7ddc6b0", "patch": "@@ -1,27 +1,46 @@\n-error[E0106]: missing lifetime specifier\n-  --> $DIR/rfc1623.rs:8:42\n+error[E0308]: mismatched types\n+  --> $DIR/rfc1623.rs:22:35\n    |\n-LL | static NON_ELIDABLE_FN: &fn(&u8, &u8) -> &u8 =\n-   |                                          ^ expected named lifetime parameter\n+LL |   static SOME_STRUCT: &SomeStruct = SomeStruct {\n+   |  ___________________________________^\n+LL | |     foo: &Foo { bools: &[false, true] },\n+LL | |     bar: &Bar { bools: &[true, true] },\n+LL | |     f: &id,\n+LL | |\n+LL | |\n+LL | | };\n+   | |_^ expected `&SomeStruct<'static, 'static, 'static>`, found struct `SomeStruct`\n    |\n-help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from argument 1 or argument 2\n-  --> $DIR/rfc1623.rs:8:29\n+help: consider borrowing here\n    |\n-LL | static NON_ELIDABLE_FN: &fn(&u8, &u8) -> &u8 =\n-   |                             ^^^  ^^^\n+LL | static SOME_STRUCT: &SomeStruct = &SomeStruct {\n+LL |     foo: &Foo { bools: &[false, true] },\n+LL |     bar: &Bar { bools: &[true, true] },\n+LL |     f: &id,\n+LL |\n+LL |\n+ ...\n \n-error[E0106]: missing lifetime specifier\n-  --> $DIR/rfc1623.rs:10:39\n+error[E0631]: type mismatch in function arguments\n+  --> $DIR/rfc1623.rs:25:8\n    |\n-LL |     &(non_elidable as fn(&u8, &u8) -> &u8);\n-   |                                       ^ expected named lifetime parameter\n+LL | fn id<T>(t: T) -> T {\n+   | ------------------- found signature of `fn(_) -> _`\n+...\n+LL |     f: &id,\n+   |        ^^^ expected signature of `for<'a, 'b> fn(&'a Foo<'b>) -> _`\n    |\n-help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from argument 1 or argument 2\n-  --> $DIR/rfc1623.rs:10:26\n+   = note: required for the cast to the object type `dyn for<'a, 'b> std::ops::Fn(&'a Foo<'b>) -> &'a Foo<'b>`\n+\n+error[E0271]: type mismatch resolving `for<'a, 'b> <fn(_) -> _ {id::<_>} as std::ops::FnOnce<(&'a Foo<'b>,)>>::Output == &'a Foo<'b>`\n+  --> $DIR/rfc1623.rs:25:8\n+   |\n+LL |     f: &id,\n+   |        ^^^ expected bound lifetime parameter 'a, found concrete lifetime\n    |\n-LL |     &(non_elidable as fn(&u8, &u8) -> &u8);\n-   |                          ^^^  ^^^\n+   = note: required for the cast to the object type `dyn for<'a, 'b> std::ops::Fn(&'a Foo<'b>) -> &'a Foo<'b>`\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 3 previous errors\n \n-For more information about this error, try `rustc --explain E0106`.\n+Some errors have detailed explanations: E0271, E0308, E0631.\n+For more information about an error, try `rustc --explain E0271`."}, {"sha": "66913a3c544b32325bedf48cee2863201b6a7296", "filename": "src/test/ui/suggestions/fn-missing-lifetime-in-item.stderr", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/92505df338a860f1055241a07949de2af7ddc6b0/src%2Ftest%2Fui%2Fsuggestions%2Ffn-missing-lifetime-in-item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/92505df338a860f1055241a07949de2af7ddc6b0/src%2Ftest%2Fui%2Fsuggestions%2Ffn-missing-lifetime-in-item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffn-missing-lifetime-in-item.stderr?ref=92505df338a860f1055241a07949de2af7ddc6b0", "patch": "@@ -9,7 +9,7 @@ help: consider introducing lifetime `'a` here\n    |\n LL | struct S1<'a, F: Fn(&i32, &i32) -> &'a i32>(F);\n    |           ^^^\n-help: consider introducing a higher-ranked lifetime `'a` here\n+help: consider making the bound lifetime-generic with a new `'a` lifetime\n    |\n LL | struct S1<F: for<'a> Fn(&i32, &i32) -> &'a i32>(F);\n    |              ^^^^^^^\n@@ -18,15 +18,11 @@ error[E0106]: missing lifetime specifier\n   --> $DIR/fn-missing-lifetime-in-item.rs:2:32\n    |\n LL | struct S2<F: Fn(&i32, &i32) -> &i32>(F);\n-   |                                ^ expected named lifetime parameter\n+   |                 ----  ----     ^ expected named lifetime parameter\n    |\n-help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from argument 1 or argument 2\n-  --> $DIR/fn-missing-lifetime-in-item.rs:2:17\n-   |\n-LL | struct S2<F: Fn(&i32, &i32) -> &i32>(F);\n-   |                 ^^^^  ^^^^\n+   = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from argument 1 or argument 2\n    = note: for more information on higher-ranked lifetimes, visit https://doc.rust-lang.org/nomicon/hrtb.html\n-help: consider introducing a higher-ranked lifetime\n+help: consider making the bound lifetime-generic with a new `'a` lifetime\n    |\n LL | struct S2<F: for<'a> Fn(&'a i32, &'a i32) -> &'a i32>(F);\n    |              ^^^^^^^    ^^^^^^^  ^^^^^^^     ^^^"}, {"sha": "ce3b1748da435dcb150fc196fcac2f2e3d6512cf", "filename": "src/test/ui/suggestions/return-without-lifetime.stderr", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/92505df338a860f1055241a07949de2af7ddc6b0/src%2Ftest%2Fui%2Fsuggestions%2Freturn-without-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/92505df338a860f1055241a07949de2af7ddc6b0/src%2Ftest%2Fui%2Fsuggestions%2Freturn-without-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Freturn-without-lifetime.stderr?ref=92505df338a860f1055241a07949de2af7ddc6b0", "patch": "@@ -8,25 +8,17 @@ error[E0106]: missing lifetime specifier\n   --> $DIR/return-without-lifetime.rs:5:34\n    |\n LL | fn func1<'a>(_arg: &'a Thing) -> &() { unimplemented!() }\n-   |                                  ^ help: consider using the named lifetime: `&'a`\n+   |                    ---------     ^ help: consider using the named lifetime: `&'a`\n    |\n-help: this function's return type contains a borrowed value, but the signature does not say which one of `_arg`'s 2 lifetimes it is borrowed from\n-  --> $DIR/return-without-lifetime.rs:5:20\n-   |\n-LL | fn func1<'a>(_arg: &'a Thing) -> &() { unimplemented!() }\n-   |                    ^^^^^^^^^\n+   = help: this function's return type contains a borrowed value, but the signature does not say which one of `_arg`'s 2 lifetimes it is borrowed from\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/return-without-lifetime.rs:7:35\n    |\n LL | fn func2<'a>(_arg: &Thing<'a>) -> &() { unimplemented!() }\n-   |                                   ^ help: consider using the named lifetime: `&'a`\n+   |                    ----------     ^ help: consider using the named lifetime: `&'a`\n    |\n-help: this function's return type contains a borrowed value, but the signature does not say which one of `_arg`'s 2 lifetimes it is borrowed from\n-  --> $DIR/return-without-lifetime.rs:7:20\n-   |\n-LL | fn func2<'a>(_arg: &Thing<'a>) -> &() { unimplemented!() }\n-   |                    ^^^^^^^^^^\n+   = help: this function's return type contains a borrowed value, but the signature does not say which one of `_arg`'s 2 lifetimes it is borrowed from\n \n error: aborting due to 3 previous errors\n "}, {"sha": "1719a99d421d06efbf7446800d5acdaff77ae62d", "filename": "src/test/ui/unboxed-closures/unboxed-closure-sugar-lifetime-elision.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/92505df338a860f1055241a07949de2af7ddc6b0/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-lifetime-elision.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/92505df338a860f1055241a07949de2af7ddc6b0/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-lifetime-elision.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-lifetime-elision.stderr?ref=92505df338a860f1055241a07949de2af7ddc6b0", "patch": "@@ -2,13 +2,9 @@ error[E0106]: missing lifetime specifier\n   --> $DIR/unboxed-closure-sugar-lifetime-elision.rs:26:39\n    |\n LL |     let _: dyn Foo(&isize, &usize) -> &usize;\n-   |                                       ^ expected named lifetime parameter\n+   |                    ------  ------     ^ expected named lifetime parameter\n    |\n-help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from argument 1 or argument 2\n-  --> $DIR/unboxed-closure-sugar-lifetime-elision.rs:26:20\n-   |\n-LL |     let _: dyn Foo(&isize, &usize) -> &usize;\n-   |                    ^^^^^^  ^^^^^^\n+   = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from argument 1 or argument 2\n help: consider introducing a named lifetime parameter\n    |\n LL | fn main<'a>() {"}, {"sha": "8d2c82e59edc15f4a01834890067975738db1f96", "filename": "src/test/ui/underscore-lifetime/in-fn-return-illegal.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/92505df338a860f1055241a07949de2af7ddc6b0/src%2Ftest%2Fui%2Funderscore-lifetime%2Fin-fn-return-illegal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/92505df338a860f1055241a07949de2af7ddc6b0/src%2Ftest%2Fui%2Funderscore-lifetime%2Fin-fn-return-illegal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Fin-fn-return-illegal.stderr?ref=92505df338a860f1055241a07949de2af7ddc6b0", "patch": "@@ -2,13 +2,9 @@ error[E0106]: missing lifetime specifier\n   --> $DIR/in-fn-return-illegal.rs:5:30\n    |\n LL | fn foo(x: &u32, y: &u32) -> &'_ u32 { loop { } }\n-   |                              ^^ expected named lifetime parameter\n+   |           ----     ----      ^^ expected named lifetime parameter\n    |\n-help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from `x` or `y`\n-  --> $DIR/in-fn-return-illegal.rs:5:11\n-   |\n-LL | fn foo(x: &u32, y: &u32) -> &'_ u32 { loop { } }\n-   |           ^^^^     ^^^^\n+   = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from `x` or `y`\n help: consider introducing a named lifetime parameter\n    |\n LL | fn foo<'a>(x: &'a u32, y: &'a u32) -> &'a u32 { loop { } }"}, {"sha": "c7cda38e47691a05909573a180c98fecfd83a2d3", "filename": "src/test/ui/underscore-lifetime/underscore-lifetime-binders.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/92505df338a860f1055241a07949de2af7ddc6b0/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-lifetime-binders.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/92505df338a860f1055241a07949de2af7ddc6b0/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-lifetime-binders.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-lifetime-binders.stderr?ref=92505df338a860f1055241a07949de2af7ddc6b0", "patch": "@@ -28,13 +28,9 @@ error[E0106]: missing lifetime specifier\n   --> $DIR/underscore-lifetime-binders.rs:16:35\n    |\n LL | fn foo2(_: &'_ u8, y: &'_ u8) -> &'_ u8 { y }\n-   |                                   ^^ expected named lifetime parameter\n+   |            ------     ------      ^^ expected named lifetime parameter\n    |\n-help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from argument 1 or `y`\n-  --> $DIR/underscore-lifetime-binders.rs:16:12\n-   |\n-LL | fn foo2(_: &'_ u8, y: &'_ u8) -> &'_ u8 { y }\n-   |            ^^^^^^     ^^^^^^\n+   = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from argument 1 or `y`\n help: consider introducing a named lifetime parameter\n    |\n LL | fn foo2<'a>(_: &'a u8, y: &'a u8) -> &'a u8 { y }"}]}