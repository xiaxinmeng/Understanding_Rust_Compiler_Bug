{"sha": "4e3d1fee51a3a326c4146cb0986820ed129fce95", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlM2QxZmVlNTFhM2EzMjZjNDE0NmNiMDk4NjgyMGVkMTI5ZmNlOTU=", "commit": {"author": {"name": "Chase Albert", "email": "thaoeuns@gmail.com", "date": "2020-05-04T18:24:22Z"}, "committer": {"name": "Chase Albert", "email": "thaoeuns@gmail.com", "date": "2020-05-04T18:24:22Z"}, "message": "Address comments.", "tree": {"sha": "b17a8490373eba978c7290c1070516f939d8f95b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b17a8490373eba978c7290c1070516f939d8f95b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e3d1fee51a3a326c4146cb0986820ed129fce95", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e3d1fee51a3a326c4146cb0986820ed129fce95", "html_url": "https://github.com/rust-lang/rust/commit/4e3d1fee51a3a326c4146cb0986820ed129fce95", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e3d1fee51a3a326c4146cb0986820ed129fce95/comments", "author": {"login": "toc-the-younger", "id": 1740780, "node_id": "MDQ6VXNlcjE3NDA3ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1740780?v=4", "gravatar_id": "", "url": "https://api.github.com/users/toc-the-younger", "html_url": "https://github.com/toc-the-younger", "followers_url": "https://api.github.com/users/toc-the-younger/followers", "following_url": "https://api.github.com/users/toc-the-younger/following{/other_user}", "gists_url": "https://api.github.com/users/toc-the-younger/gists{/gist_id}", "starred_url": "https://api.github.com/users/toc-the-younger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/toc-the-younger/subscriptions", "organizations_url": "https://api.github.com/users/toc-the-younger/orgs", "repos_url": "https://api.github.com/users/toc-the-younger/repos", "events_url": "https://api.github.com/users/toc-the-younger/events{/privacy}", "received_events_url": "https://api.github.com/users/toc-the-younger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "toc-the-younger", "id": 1740780, "node_id": "MDQ6VXNlcjE3NDA3ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1740780?v=4", "gravatar_id": "", "url": "https://api.github.com/users/toc-the-younger", "html_url": "https://github.com/toc-the-younger", "followers_url": "https://api.github.com/users/toc-the-younger/followers", "following_url": "https://api.github.com/users/toc-the-younger/following{/other_user}", "gists_url": "https://api.github.com/users/toc-the-younger/gists{/gist_id}", "starred_url": "https://api.github.com/users/toc-the-younger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/toc-the-younger/subscriptions", "organizations_url": "https://api.github.com/users/toc-the-younger/orgs", "repos_url": "https://api.github.com/users/toc-the-younger/repos", "events_url": "https://api.github.com/users/toc-the-younger/events{/privacy}", "received_events_url": "https://api.github.com/users/toc-the-younger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f46d1974313c83886508088ff1beac3a107c3790", "url": "https://api.github.com/repos/rust-lang/rust/commits/f46d1974313c83886508088ff1beac3a107c3790", "html_url": "https://github.com/rust-lang/rust/commit/f46d1974313c83886508088ff1beac3a107c3790"}], "stats": {"total": 48, "additions": 22, "deletions": 26}, "files": [{"sha": "510efe4660880e0a7feffdbdda8898b75fd9474c", "filename": "src/helpers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e3d1fee51a3a326c4146cb0986820ed129fce95/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3d1fee51a3a326c4146cb0986820ed129fce95/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=4e3d1fee51a3a326c4146cb0986820ed129fce95", "patch": "@@ -477,7 +477,7 @@ pub fn check_arg_count<'a, 'tcx, const N: usize>(args: &'a [OpTy<'tcx, Tag>]) ->\n     if let Ok(ops) = args.try_into() {\n         return Ok(ops);\n     }\n-    throw_ub_format!(\"incorrect number of arguments, got {}, needed {}\", args.len(), N)\n+    throw_ub_format!(\"incorrect number of arguments: got {}, expected {}\", args.len(), N)\n }\n \n pub fn immty_from_int_checked<'tcx>("}, {"sha": "8a75fb03a53c076aa94a507d276cac5baa2618b9", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4e3d1fee51a3a326c4146cb0986820ed129fce95/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3d1fee51a3a326c4146cb0986820ed129fce95/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=4e3d1fee51a3a326c4146cb0986820ed129fce95", "patch": "@@ -454,6 +454,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n             // Architecture-specific shims\n             \"llvm.x86.sse2.pause\" if this.tcx.sess.target.target.arch == \"x86\" || this.tcx.sess.target.target.arch == \"x86_64\" => {\n+                let &[] = check_arg_count(args)?;\n                 this.sched_yield()?;\n             }\n "}, {"sha": "e0f54cac1570a7846f33e989b28c156fbf1ef466", "filename": "src/shims/foreign_items/posix/linux.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4e3d1fee51a3a326c4146cb0986820ed129fce95/src%2Fshims%2Fforeign_items%2Fposix%2Flinux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3d1fee51a3a326c4146cb0986820ed129fce95/src%2Fshims%2Fforeign_items%2Fposix%2Flinux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items%2Fposix%2Flinux.rs?ref=4e3d1fee51a3a326c4146cb0986820ed129fce95", "patch": "@@ -102,7 +102,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     .to_machine_usize(this)?;\n \n                 if args.is_empty() {\n-                    throw_ub_format!(\"incorrect number of arguments for syscall, needed at least 1\");\n+                    throw_ub_format!(\"incorrect number of arguments for syscall: got 0, expected at least 1\");\n                 }\n                 match this.read_scalar(args[0])?.to_machine_usize(this)? {\n                     // `libc::syscall(NR_GETRANDOM, buf.as_mut_ptr(), buf.len(), GRND_NONBLOCK)`\n@@ -143,6 +143,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             // Incomplete shims that we \"stub out\" just to get pre-main initialization code to work.\n             // These shims are enabled only when the caller is in the standard library.\n             \"pthread_getattr_np\" if this.frame().instance.to_string().starts_with(\"std::sys::unix::\") => {\n+                let &[_thread, _attr] = check_arg_count(args)?;\n                 this.write_null(dest)?;\n             }\n "}, {"sha": "1cfecbc93461f37e246eaaf4c408a15f6ab64e6b", "filename": "src/shims/foreign_items/posix/macos.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4e3d1fee51a3a326c4146cb0986820ed129fce95/src%2Fshims%2Fforeign_items%2Fposix%2Fmacos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3d1fee51a3a326c4146cb0986820ed129fce95/src%2Fshims%2Fforeign_items%2Fposix%2Fmacos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items%2Fposix%2Fmacos.rs?ref=4e3d1fee51a3a326c4146cb0986820ed129fce95", "patch": "@@ -118,8 +118,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n             // Threading\n             \"pthread_setname_np\" => {\n-                let ptr = this.read_scalar(args[0])?.not_undef()?;\n-                this.pthread_setname_np(ptr)?;\n+                let &[name] = check_arg_count(args)?;\n+                let name = this.read_scalar(name)?.not_undef()?;\n+                this.pthread_setname_np(name)?;\n             }\n \n             // Incomplete shims that we \"stub out\" just to get pre-main initialization code to work."}, {"sha": "ab912476f6a93df79104b7513df61d0ba51af6ec", "filename": "src/shims/foreign_items/windows.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4e3d1fee51a3a326c4146cb0986820ed129fce95/src%2Fshims%2Fforeign_items%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3d1fee51a3a326c4146cb0986820ed129fce95/src%2Fshims%2Fforeign_items%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items%2Fwindows.rs?ref=4e3d1fee51a3a326c4146cb0986820ed129fce95", "patch": "@@ -106,17 +106,17 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.write_scalar(res, dest)?;\n             }\n             \"HeapFree\" => {\n-                let &[handle, _flags, ptr] = check_arg_count(args)?;\n+                let &[handle, flags, ptr] = check_arg_count(args)?;\n                 this.read_scalar(handle)?.to_machine_isize(this)?;\n-                let _flags = this.read_scalar(_flags)?.to_u32()?;\n+                this.read_scalar(flags)?.to_u32()?;\n                 let ptr = this.read_scalar(ptr)?.not_undef()?;\n                 this.free(ptr, MiriMemoryKind::WinHeap)?;\n                 this.write_scalar(Scalar::from_i32(1), dest)?;\n             }\n             \"HeapReAlloc\" => {\n-                let &[handle, _flags, ptr, size] = check_arg_count(args)?;\n+                let &[handle, flags, ptr, size] = check_arg_count(args)?;\n                 this.read_scalar(handle)?.to_machine_isize(this)?;\n-                let _flags = this.read_scalar(_flags)?.to_u32()?;\n+                this.read_scalar(flags)?.to_u32()?;\n                 let ptr = this.read_scalar(ptr)?.not_undef()?;\n                 let size = this.read_scalar(size)?.to_machine_usize(this)?;\n                 let res = this.realloc(ptr, size, MiriMemoryKind::WinHeap)?;"}, {"sha": "ecb906f158e3283082663c0e87e5793ab23c9106", "filename": "src/shims/fs.rs", "status": "modified", "additions": 9, "deletions": 16, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/4e3d1fee51a3a326c4146cb0986820ed129fce95/src%2Fshims%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3d1fee51a3a326c4146cb0986820ed129fce95/src%2Fshims%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ffs.rs?ref=4e3d1fee51a3a326c4146cb0986820ed129fce95", "patch": "@@ -328,22 +328,18 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         this.check_no_isolation(\"fcntl\")?;\n \n-        let (fd, cmd, start) = if args.len() == 2 {\n-            let &[fd, cmd] = check_arg_count(args)?;\n-            (fd, cmd, None)\n-        } else {\n-            // If args.len() isn't 2 or 3 this will error appropriately.\n-            let &[fd, cmd, start] = check_arg_count(args)?;\n-            (fd, cmd, Some(start))\n-        };\n-        let fd = this.read_scalar(fd)?.to_i32()?;\n-        let cmd = this.read_scalar(cmd)?.to_i32()?;\n+        if args.len() < 2 {\n+            throw_ub_format!(\"incorrect number of arguments for fcntl: got {}, expected at least 2\", args.len());\n+        }\n+        let cmd = this.read_scalar(args[1])?.to_i32()?;\n         // We only support getting the flags for a descriptor.\n         if cmd == this.eval_libc_i32(\"F_GETFD\")? {\n             // Currently this is the only flag that `F_GETFD` returns. It is OK to just return the\n             // `FD_CLOEXEC` value without checking if the flag is set for the file because `std`\n             // always sets this flag when opening a file. However we still need to check that the\n             // file itself is open.\n+            let &[fd, _] = check_arg_count(args)?;\n+            let fd = this.read_scalar(fd)?.to_i32()?;\n             if this.machine.file_handler.handles.contains_key(&fd) {\n                 Ok(this.eval_libc_i32(\"FD_CLOEXEC\")?)\n             } else {\n@@ -356,15 +352,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             // because exec() isn't supported. The F_DUPFD and F_DUPFD_CLOEXEC commands only\n             // differ in whether the FD_CLOEXEC flag is pre-set on the new file descriptor,\n             // thus they can share the same implementation here.\n+            let &[fd, _, start] = check_arg_count(args)?;\n+            let fd = this.read_scalar(fd)?.to_i32()?;\n+            let start = this.read_scalar(start)?.to_i32()?;\n             if fd < MIN_NORMAL_FILE_FD {\n                 throw_unsup_format!(\"duplicating file descriptors for stdin, stdout, or stderr is not supported\")\n             }\n-            let start = start.ok_or_else(|| {\n-                err_unsup_format!(\n-                    \"fcntl with command F_DUPFD or F_DUPFD_CLOEXEC requires a third argument\"\n-                )\n-            })?;\n-            let start = this.read_scalar(start)?.to_i32()?;\n             let fh = &mut this.machine.file_handler;\n             let (file_result, writable) = match fh.handles.get(&fd) {\n                 Some(FileHandle { file, writable }) => (file.try_clone(), *writable),"}, {"sha": "3ea1ee0aa17d2dbf13b6724477df20f05ec65528", "filename": "src/shims/thread.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e3d1fee51a3a326c4146cb0986820ed129fce95/src%2Fshims%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3d1fee51a3a326c4146cb0986820ed129fce95/src%2Fshims%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fthread.rs?ref=4e3d1fee51a3a326c4146cb0986820ed129fce95", "patch": "@@ -121,12 +121,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n     fn pthread_setname_np(\n         &mut self,\n-        ptr: Scalar<Tag>,\n+        name: Scalar<Tag>,\n     ) -> InterpResult<'tcx> {\n         let this = self.eval_context_mut();\n         this.assert_target_os(\"macos\", \"pthread_setname_np\");\n \n-        let name = this.memory.read_c_str(ptr)?.to_owned();\n+        let name = this.memory.read_c_str(name)?.to_owned();\n         this.set_active_thread_name(name)?;\n \n         Ok(())"}]}