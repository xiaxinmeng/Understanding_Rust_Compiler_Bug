{"sha": "abab49b7cf65b787a2635332d9c867795d4dafc5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiYWI0OWI3Y2Y2NWI3ODdhMjYzNTMzMmQ5Yzg2Nzc5NWQ0ZGFmYzU=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-11-01T22:13:43Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-11-01T22:13:43Z"}, "message": "rustc: Fix tab characters", "tree": {"sha": "5274a83471c63dc7f078ac1302cf9f8692c66694", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5274a83471c63dc7f078ac1302cf9f8692c66694"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/abab49b7cf65b787a2635332d9c867795d4dafc5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/abab49b7cf65b787a2635332d9c867795d4dafc5", "html_url": "https://github.com/rust-lang/rust/commit/abab49b7cf65b787a2635332d9c867795d4dafc5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/abab49b7cf65b787a2635332d9c867795d4dafc5/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "94f05c1936e85d4805e7177fe546d4c6f40340d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/94f05c1936e85d4805e7177fe546d4c6f40340d8", "html_url": "https://github.com/rust-lang/rust/commit/94f05c1936e85d4805e7177fe546d4c6f40340d8"}], "stats": {"total": 60, "additions": 30, "deletions": 30}, "files": [{"sha": "a033a80a8d4585018e20d7972b7ccfb04ae27d9a", "filename": "src/rustc/middle/typeck/check/vtable.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/abab49b7cf65b787a2635332d9c867795d4dafc5/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abab49b7cf65b787a2635332d9c867795d4dafc5/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs?ref=abab49b7cf65b787a2635332d9c867795d4dafc5", "patch": "@@ -100,9 +100,9 @@ fn lookup_vtable_covariant(fcx: @fn_ctxt,\n                            allow_unsafe: bool,\n                            is_early: bool)\n                         -> Option<vtable_origin> {\n-\tdebug!(\"lookup_vtable_covariant(ty: %s, trait_ty=%s)\",\n-\t\t   fcx.infcx().ty_to_str(ty),\n-\t\t   fcx.infcx().ty_to_str(trait_ty));\n+    debug!(\"lookup_vtable_covariant(ty: %s, trait_ty=%s)\",\n+           fcx.infcx().ty_to_str(ty),\n+           fcx.infcx().ty_to_str(trait_ty));\n \n     let worklist = dvec::DVec();\n     worklist.push(trait_ty);\n@@ -479,16 +479,16 @@ fn early_resolve_expr(ex: @ast::expr, &&fcx: @fn_ctxt, is_early: bool) {\n       ast::expr_path(*) => {\n         match fcx.opt_node_ty_substs(ex.id) {\n           Some(ref substs) => {\n-\t\t  \tlet def = cx.tcx.def_map.get(ex.id);\n+              let def = cx.tcx.def_map.get(ex.id);\n             let did = ast_util::def_id_of_def(def);\n-\t\t\tdebug!(\"early resolve expr: def %?\", def);\n+            debug!(\"early resolve expr: def %?\", def);\n             let item_ty = ty::lookup_item_type(cx.tcx, did);\n             if has_trait_bounds(*item_ty.bounds) {\n-\t\t\t\tfor item_ty.bounds.each |bounds| {\n-\t\t\t\t\tdebug!(\"early_resolve_expr: looking up vtables for bound \\\n-\t\t\t\t\t\t\t%s\",\n-\t\t\t\t\t\t   ty::param_bounds_to_str(fcx.tcx(), *bounds));\n-\t\t\t\t}\n+                for item_ty.bounds.each |bounds| {\n+                    debug!(\"early_resolve_expr: looking up vtables for bound \\\n+                            %s\",\n+                           ty::param_bounds_to_str(fcx.tcx(), *bounds));\n+                }\n                 let vtbls = lookup_vtables(fcx, ex, item_ty.bounds,\n                                            substs, false, is_early);\n                 if !is_early { cx.vtable_map.insert(ex.id, vtbls); }"}, {"sha": "b82a55dc86bdfb63abdce09ca2642f78b1d39265", "filename": "src/rustc/middle/typeck/collect.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/abab49b7cf65b787a2635332d9c867795d4dafc5/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abab49b7cf65b787a2635332d9c867795d4dafc5/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=abab49b7cf65b787a2635332d9c867795d4dafc5", "patch": "@@ -231,11 +231,11 @@ fn ensure_trait_methods(ccx: @crate_ctxt, id: ast::node_id, trait_ty: ty::t) {\n             let trait_bounds = ty_param_bounds(ccx, params);\n             let ty_m = trait_method_to_ty_method(*m);\n             let method_ty = ty_of_ty_method(ccx, ty_m, region_paramd, def_id);\n-\t\t\tif ty_m.self_ty.node == ast::sty_static {\n-\t\t\t\tmake_static_method_ty(ccx, ty_m, region_paramd,\n-\t\t\t\t\t\t\t\t\t  method_ty, trait_ty,\n-\t\t\t\t\t\t\t\t\t  trait_bounds);\n-\t\t\t}\n+            if ty_m.self_ty.node == ast::sty_static {\n+                make_static_method_ty(ccx, ty_m, region_paramd,\n+                                      method_ty, trait_ty,\n+                                      trait_bounds);\n+            }\n             method_ty\n         });\n       }\n@@ -423,21 +423,21 @@ fn check_methods_against_trait(ccx: @crate_ctxt,\n     let (did, tpt) = instantiate_trait_ref(ccx, a_trait_ty, rp);\n \n     if did.crate == ast::local_crate {\n-\t\t// NB: This is subtle. We need to do this on the type of the trait\n-\t\t// item *itself*, not on the type that includes the parameter\n-\t\t// substitutions provided by the programmer at this particular\n-\t\t// trait ref. Otherwise, we will potentially overwrite the types of\n-\t\t// the methods within the trait with bogus results. (See issue #3903.)\n-\n-\t\tmatch tcx.items.find(did.node) {\n-\t\t\tSome(ast_map::node_item(item, _)) => {\n-\t\t\t\tlet tpt = ty_of_item(ccx, item);\n-\t\t\t\tensure_trait_methods(ccx, did.node, tpt.ty);\n-\t\t\t}\n-\t\t\t_ => {\n-\t\t\t\ttcx.sess.bug(~\"trait ref didn't resolve to trait\");\n-\t\t\t}\n-\t\t}\n+        // NB: This is subtle. We need to do this on the type of the trait\n+        // item *itself*, not on the type that includes the parameter\n+        // substitutions provided by the programmer at this particular\n+        // trait ref. Otherwise, we will potentially overwrite the types of\n+        // the methods within the trait with bogus results. (See issue #3903.)\n+\n+        match tcx.items.find(did.node) {\n+            Some(ast_map::node_item(item, _)) => {\n+                let tpt = ty_of_item(ccx, item);\n+                ensure_trait_methods(ccx, did.node, tpt.ty);\n+            }\n+            _ => {\n+                tcx.sess.bug(~\"trait ref didn't resolve to trait\");\n+            }\n+        }\n     }\n \n     for vec::each(*ty::trait_methods(tcx, did)) |trait_m| {"}]}