{"sha": "3f2a1c9c1726d4d93e3433303262e44faa5910e9", "node_id": "C_kwDOAAsO6NoAKDNmMmExYzljMTcyNmQ0ZDkzZTM0MzMzMDMyNjJlNDRmYWE1OTEwZTk", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2021-12-13T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2021-12-13T00:00:00Z"}, "message": "Use `OutputFilenames` to generate output file for `-Zllvm-time-trace`\n\nThe resulting profile will include the crate name and will be stored in\nthe `--out-dir` directory.\n\nThis implementation makes it convenient to use LLVM time trace together\nwith cargo, in the contrast to the previous implementation which would\noverwrite profiles or store them in `.cargo/registry/..`.", "tree": {"sha": "6cbedd77e4dec8a5c56177afe9ddfa7509bab834", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6cbedd77e4dec8a5c56177afe9ddfa7509bab834"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f2a1c9c1726d4d93e3433303262e44faa5910e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f2a1c9c1726d4d93e3433303262e44faa5910e9", "html_url": "https://github.com/rust-lang/rust/commit/3f2a1c9c1726d4d93e3433303262e44faa5910e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f2a1c9c1726d4d93e3433303262e44faa5910e9/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "06a6674a7de1ef7af00b0fcdfa0d77e6c3023a27", "url": "https://api.github.com/repos/rust-lang/rust/commits/06a6674a7de1ef7af00b0fcdfa0d77e6c3023a27", "html_url": "https://github.com/rust-lang/rust/commit/06a6674a7de1ef7af00b0fcdfa0d77e6c3023a27"}], "stats": {"total": 22, "additions": 16, "deletions": 6}, "files": [{"sha": "fcdf6b50764ee5088d17957bf536375693aecf6a", "filename": "compiler/rustc_codegen_cranelift/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3f2a1c9c1726d4d93e3433303262e44faa5910e9/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f2a1c9c1726d4d93e3433303262e44faa5910e9/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs?ref=3f2a1c9c1726d4d93e3433303262e44faa5910e9", "patch": "@@ -205,6 +205,7 @@ impl CodegenBackend for CraneliftCodegenBackend {\n         &self,\n         ongoing_codegen: Box<dyn Any>,\n         _sess: &Session,\n+        _outputs: &OutputFilenames,\n     ) -> Result<(CodegenResults, FxHashMap<WorkProductId, WorkProduct>), ErrorReported> {\n         Ok(*ongoing_codegen\n             .downcast::<(CodegenResults, FxHashMap<WorkProductId, WorkProduct>)>()"}, {"sha": "30a33b99e5053f4dac1d5422eb473502811bfce1", "filename": "compiler/rustc_codegen_gcc/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f2a1c9c1726d4d93e3433303262e44faa5910e9/compiler%2Frustc_codegen_gcc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f2a1c9c1726d4d93e3433303262e44faa5910e9/compiler%2Frustc_codegen_gcc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Flib.rs?ref=3f2a1c9c1726d4d93e3433303262e44faa5910e9", "patch": "@@ -96,7 +96,7 @@ impl CodegenBackend for GccCodegenBackend {\n         Box::new(res)\n     }\n \n-    fn join_codegen(&self, ongoing_codegen: Box<dyn Any>, sess: &Session) -> Result<(CodegenResults, FxHashMap<WorkProductId, WorkProduct>), ErrorReported> {\n+    fn join_codegen(&self, ongoing_codegen: Box<dyn Any>, sess: &Session, _outputs: &OutputFilenames) -> Result<(CodegenResults, FxHashMap<WorkProductId, WorkProduct>), ErrorReported> {\n         let (codegen_results, work_products) = ongoing_codegen\n             .downcast::<rustc_codegen_ssa::back::write::OngoingCodegen<GccCodegenBackend>>()\n             .expect(\"Expected GccCodegenBackend's OngoingCodegen, found Box<Any>\")"}, {"sha": "b52e9a6ea83bc2b0d6609db1f3724c06881e4f0e", "filename": "compiler/rustc_codegen_llvm/src/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3f2a1c9c1726d4d93e3433303262e44faa5910e9/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f2a1c9c1726d4d93e3433303262e44faa5910e9/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs?ref=3f2a1c9c1726d4d93e3433303262e44faa5910e9", "patch": "@@ -340,6 +340,7 @@ impl CodegenBackend for LlvmCodegenBackend {\n         &self,\n         ongoing_codegen: Box<dyn Any>,\n         sess: &Session,\n+        outputs: &OutputFilenames,\n     ) -> Result<(CodegenResults, FxHashMap<WorkProductId, WorkProduct>), ErrorReported> {\n         let (codegen_results, work_products) = ongoing_codegen\n             .downcast::<rustc_codegen_ssa::back::write::OngoingCodegen<LlvmCodegenBackend>>()\n@@ -348,7 +349,8 @@ impl CodegenBackend for LlvmCodegenBackend {\n \n         sess.time(\"llvm_dump_timing_file\", || {\n             if sess.opts.debugging_opts.llvm_time_trace {\n-                llvm_util::time_trace_profiler_finish(\"llvm_timings.json\");\n+                let file_name = outputs.with_extension(\"llvm_timings.json\");\n+                llvm_util::time_trace_profiler_finish(&file_name);\n             }\n         });\n "}, {"sha": "e4935ac431c8d8bcee2fbb7890377b0b450e5276", "filename": "compiler/rustc_codegen_llvm/src/llvm_util.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3f2a1c9c1726d4d93e3433303262e44faa5910e9/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f2a1c9c1726d4d93e3433303262e44faa5910e9/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs?ref=3f2a1c9c1726d4d93e3433303262e44faa5910e9", "patch": "@@ -4,6 +4,7 @@ use libc::c_int;\n use libloading::Library;\n use rustc_codegen_ssa::target_features::supported_target_features;\n use rustc_data_structures::fx::FxHashSet;\n+use rustc_fs_util::path_to_c_string;\n use rustc_middle::bug;\n use rustc_session::config::PrintRequest;\n use rustc_session::Session;\n@@ -13,6 +14,7 @@ use std::ffi::{CStr, CString};\n use tracing::debug;\n \n use std::mem;\n+use std::path::Path;\n use std::ptr;\n use std::slice;\n use std::str;\n@@ -134,9 +136,9 @@ unsafe fn configure_llvm(sess: &Session) {\n     llvm::LLVMRustSetLLVMOptions(llvm_args.len() as c_int, llvm_args.as_ptr());\n }\n \n-pub fn time_trace_profiler_finish(file_name: &str) {\n+pub fn time_trace_profiler_finish(file_name: &Path) {\n     unsafe {\n-        let file_name = CString::new(file_name).unwrap();\n+        let file_name = path_to_c_string(file_name);\n         llvm::LLVMTimeTraceProfilerFinish(file_name.as_ptr());\n     }\n }"}, {"sha": "c6abb3f6eb416a9c3e19945a403216e998d4c143", "filename": "compiler/rustc_codegen_ssa/src/traits/backend.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3f2a1c9c1726d4d93e3433303262e44faa5910e9/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbackend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f2a1c9c1726d4d93e3433303262e44faa5910e9/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbackend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbackend.rs?ref=3f2a1c9c1726d4d93e3433303262e44faa5910e9", "patch": "@@ -97,6 +97,7 @@ pub trait CodegenBackend {\n         &self,\n         ongoing_codegen: Box<dyn Any>,\n         sess: &Session,\n+        outputs: &OutputFilenames,\n     ) -> Result<(CodegenResults, FxHashMap<WorkProductId, WorkProduct>), ErrorReported>;\n \n     /// This is called on the returned `Box<dyn Any>` from `join_codegen`"}, {"sha": "e635ee1e0ec8a44394df59e7a2b2069e3ae7e537", "filename": "compiler/rustc_interface/src/queries.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3f2a1c9c1726d4d93e3433303262e44faa5910e9/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f2a1c9c1726d4d93e3433303262e44faa5910e9/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs?ref=3f2a1c9c1726d4d93e3433303262e44faa5910e9", "patch": "@@ -335,8 +335,11 @@ pub struct Linker {\n \n impl Linker {\n     pub fn link(self) -> Result<()> {\n-        let (codegen_results, work_products) =\n-            self.codegen_backend.join_codegen(self.ongoing_codegen, &self.sess)?;\n+        let (codegen_results, work_products) = self.codegen_backend.join_codegen(\n+            self.ongoing_codegen,\n+            &self.sess,\n+            &self.prepare_outputs,\n+        )?;\n \n         self.sess.compile_status()?;\n "}, {"sha": "8047a42c2b1768721e7d038a7ad9778484233593", "filename": "src/test/run-make-fulldeps/hotplug_codegen_backend/the_backend.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3f2a1c9c1726d4d93e3433303262e44faa5910e9/src%2Ftest%2Frun-make-fulldeps%2Fhotplug_codegen_backend%2Fthe_backend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f2a1c9c1726d4d93e3433303262e44faa5910e9/src%2Ftest%2Frun-make-fulldeps%2Fhotplug_codegen_backend%2Fthe_backend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fhotplug_codegen_backend%2Fthe_backend.rs?ref=3f2a1c9c1726d4d93e3433303262e44faa5910e9", "patch": "@@ -46,6 +46,7 @@ impl CodegenBackend for TheBackend {\n         &self,\n         ongoing_codegen: Box<dyn Any>,\n         _sess: &Session,\n+        _outputs: &OutputFilenames,\n     ) -> Result<(CodegenResults, FxHashMap<WorkProductId, WorkProduct>), ErrorReported> {\n         let codegen_results = ongoing_codegen\n             .downcast::<CodegenResults>()"}]}