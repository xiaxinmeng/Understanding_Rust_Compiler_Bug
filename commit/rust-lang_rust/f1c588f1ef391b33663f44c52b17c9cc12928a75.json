{"sha": "f1c588f1ef391b33663f44c52b17c9cc12928a75", "node_id": "C_kwDOAAsO6NoAKGYxYzU4OGYxZWYzOTFiMzM2NjNmNDRjNTJiMTdjOWNjMTI5MjhhNzU", "commit": {"author": {"name": "The8472", "email": "git@infinite-source.de", "date": "2021-10-11T21:36:04Z"}, "committer": {"name": "The8472", "email": "git@infinite-source.de", "date": "2021-10-11T21:36:04Z"}, "message": "use fold instead of try_fold now that .by_ref().next() has been inlined", "tree": {"sha": "17d34b1c16308c256e91ce495f9a6e4a1f5c4e7a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17d34b1c16308c256e91ce495f9a6e4a1f5c4e7a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f1c588f1ef391b33663f44c52b17c9cc12928a75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f1c588f1ef391b33663f44c52b17c9cc12928a75", "html_url": "https://github.com/rust-lang/rust/commit/f1c588f1ef391b33663f44c52b17c9cc12928a75", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f1c588f1ef391b33663f44c52b17c9cc12928a75/comments", "author": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "committer": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a398b6b9d429cd0044c0b4cec95ec4fe2dbac295", "url": "https://api.github.com/repos/rust-lang/rust/commits/a398b6b9d429cd0044c0b4cec95ec4fe2dbac295", "html_url": "https://github.com/rust-lang/rust/commit/a398b6b9d429cd0044c0b4cec95ec4fe2dbac295"}], "stats": {"total": 19, "additions": 6, "deletions": 13}, "files": [{"sha": "5d63cf03fcbc4fa0bc8c2a126bbb584ee8acd078", "filename": "library/core/src/array/iter.rs", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f1c588f1ef391b33663f44c52b17c9cc12928a75/library%2Fcore%2Fsrc%2Farray%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1c588f1ef391b33663f44c52b17c9cc12928a75/library%2Fcore%2Fsrc%2Farray%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fiter.rs?ref=f1c588f1ef391b33663f44c52b17c9cc12928a75", "patch": "@@ -135,19 +135,12 @@ impl<T, const N: usize> Iterator for IntoIter<T, N> {\n         Fold: FnMut(Acc, Self::Item) -> Acc,\n     {\n         let data = &mut self.data;\n-        // FIXME: This uses try_fold(&mut iter) instead of fold(iter) because the latter\n-        //  would go through the blanket `impl Iterator for &mut I` implementation\n-        //  which lacks inline annotations on its methods and adding those would be a larger\n-        //  perturbation than using try_fold here.\n-        //  Whether it would be beneficial to add those annotations should be investigated separately.\n-        (&mut self.alive)\n-            .try_fold::<_, _, Result<_, !>>(init, |acc, idx| {\n-                // SAFETY: idx is obtained by folding over the `alive` range, which implies the\n-                // value is currently considered alive but as the range is being consumed each value\n-                // we read here will only be read once and then considered dead.\n-                Ok(fold(acc, unsafe { data.get_unchecked(idx).assume_init_read() }))\n-            })\n-            .unwrap()\n+        self.alive.by_ref().fold(init, |acc, idx| {\n+            // SAFETY: idx is obtained by folding over the `alive` range, which implies the\n+            // value is currently considered alive but as the range is being consumed each value\n+            // we read here will only be read once and then considered dead.\n+            fold(acc, unsafe { data.get_unchecked(idx).assume_init_read() })\n+        })\n     }\n \n     fn count(self) -> usize {"}]}