{"sha": "bc7b7140b9a5ea4e764c9f53a915d26baa4326be", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjN2I3MTQwYjlhNWVhNGU3NjRjOWY1M2E5MTVkMjZiYWE0MzI2YmU=", "commit": {"author": {"name": "jumbatm", "email": "jumbatm@gmail.com", "date": "2020-04-28T23:45:13Z"}, "committer": {"name": "jumbatm", "email": "jumbatm@gmail.com", "date": "2020-05-01T11:52:43Z"}, "message": "Don't fail for UndefinedBehaviourInfo in validation.", "tree": {"sha": "6c3e42e46720a24c23f5ee32ec31d055f3085479", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c3e42e46720a24c23f5ee32ec31d055f3085479"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc7b7140b9a5ea4e764c9f53a915d26baa4326be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc7b7140b9a5ea4e764c9f53a915d26baa4326be", "html_url": "https://github.com/rust-lang/rust/commit/bc7b7140b9a5ea4e764c9f53a915d26baa4326be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc7b7140b9a5ea4e764c9f53a915d26baa4326be/comments", "author": {"login": "jumbatm", "id": 30644300, "node_id": "MDQ6VXNlcjMwNjQ0MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/30644300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jumbatm", "html_url": "https://github.com/jumbatm", "followers_url": "https://api.github.com/users/jumbatm/followers", "following_url": "https://api.github.com/users/jumbatm/following{/other_user}", "gists_url": "https://api.github.com/users/jumbatm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jumbatm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jumbatm/subscriptions", "organizations_url": "https://api.github.com/users/jumbatm/orgs", "repos_url": "https://api.github.com/users/jumbatm/repos", "events_url": "https://api.github.com/users/jumbatm/events{/privacy}", "received_events_url": "https://api.github.com/users/jumbatm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jumbatm", "id": 30644300, "node_id": "MDQ6VXNlcjMwNjQ0MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/30644300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jumbatm", "html_url": "https://github.com/jumbatm", "followers_url": "https://api.github.com/users/jumbatm/followers", "following_url": "https://api.github.com/users/jumbatm/following{/other_user}", "gists_url": "https://api.github.com/users/jumbatm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jumbatm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jumbatm/subscriptions", "organizations_url": "https://api.github.com/users/jumbatm/orgs", "repos_url": "https://api.github.com/users/jumbatm/repos", "events_url": "https://api.github.com/users/jumbatm/events{/privacy}", "received_events_url": "https://api.github.com/users/jumbatm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e66e37cbf1806f4e0b7a9e6935c8198b3a6c4b2f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e66e37cbf1806f4e0b7a9e6935c8198b3a6c4b2f", "html_url": "https://github.com/rust-lang/rust/commit/e66e37cbf1806f4e0b7a9e6935c8198b3a6c4b2f"}], "stats": {"total": 7, "additions": 5, "deletions": 2}, "files": [{"sha": "d6202638fd912e2f15f77089aa1cc17215c91142", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bc7b7140b9a5ea4e764c9f53a915d26baa4326be/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc7b7140b9a5ea4e764c9f53a915d26baa4326be/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=bc7b7140b9a5ea4e764c9f53a915d26baa4326be", "patch": "@@ -842,9 +842,12 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         // Run it.\n         match visitor.visit_value(op) {\n             Ok(()) => Ok(()),\n-            // We should only get validation errors here. Avoid other errors as\n-            // those do not show *where* in the value the issue lies.\n+            // Allow validation failures to be returned.\n             Err(err) if matches!(err.kind, err_ub!(ValidationFailure { .. })) => Err(err),\n+            // Also allow InvalidProgram to be returned, because it's likely that different callers\n+            // will want to do different things in this situation.\n+            Err(err) if matches!(err.kind, InterpError::InvalidProgram(_)) => Err(err),\n+            // Avoid other errors as those do not show *where* in the value the issue lies.\n             Err(err) => bug!(\"Unexpected error during validation: {}\", err),\n         }\n     }"}]}