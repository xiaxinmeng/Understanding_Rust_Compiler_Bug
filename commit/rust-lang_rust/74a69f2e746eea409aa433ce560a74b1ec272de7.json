{"sha": "74a69f2e746eea409aa433ce560a74b1ec272de7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0YTY5ZjJlNzQ2ZWVhNDA5YWE0MzNjZTU2MGE3NGIxZWMyNzJkZTc=", "commit": {"author": {"name": "Josh Stone", "email": "cuviper@gmail.com", "date": "2019-03-28T01:15:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-03-28T01:15:18Z"}, "message": "Rollup merge of #57293 - Zoxc:incr-passes3, r=michaelwoerister\n\nMake some lints incremental\n\nBlocked on https://github.com/rust-lang/rust/pull/57253\n\nr? @michaelwoerister", "tree": {"sha": "c71ff3f6bc932553d34e1c8c7b53949f8e99daf1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c71ff3f6bc932553d34e1c8c7b53949f8e99daf1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74a69f2e746eea409aa433ce560a74b1ec272de7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcnCAmCRBK7hj4Ov3rIwAAdHIIADiNQBlqYyIGgCKWALLKimrE\nx4wsxt61g3hifQ04yfqqtznIcufS4e/op5wxYJ0yhErgMXKykBmli/w+9iuG2S3/\nPZKpoptS/4Pvq6zI++xvhmqUMdIX6dDzKkFVUrzVOnRuKasXsPu5G0wa4HrRVzpJ\nBkCSLbeygtqDGvApxCNbM+Sb0RC4Ti5E5J8s+B+CUyzT2jmaBZG90Kwr/obD1MwP\nhUgzOkOIfBuXKu4wWbxtSiFAZwBxt9r+xhWJgqzRs6AiJ8BkqUWYPkNcHnjFQ5fd\n6MA/VBKNRswVj2jt4KOrBVvbK4/q1+oX/J8VxhkdlESjiMj9fxfbDeo2AlI2mms=\n=teUr\n-----END PGP SIGNATURE-----\n", "payload": "tree c71ff3f6bc932553d34e1c8c7b53949f8e99daf1\nparent 33ef0bad21d6bb646c7c3ab0dbf381ca96c324bf\nparent 4093bec80d39f94d69754d3a30cb14d9d4954424\nauthor Josh Stone <cuviper@gmail.com> 1553735718 -0700\ncommitter GitHub <noreply@github.com> 1553735718 -0700\n\nRollup merge of #57293 - Zoxc:incr-passes3, r=michaelwoerister\n\nMake some lints incremental\n\nBlocked on https://github.com/rust-lang/rust/pull/57253\n\nr? @michaelwoerister\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74a69f2e746eea409aa433ce560a74b1ec272de7", "html_url": "https://github.com/rust-lang/rust/commit/74a69f2e746eea409aa433ce560a74b1ec272de7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74a69f2e746eea409aa433ce560a74b1ec272de7/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "33ef0bad21d6bb646c7c3ab0dbf381ca96c324bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/33ef0bad21d6bb646c7c3ab0dbf381ca96c324bf", "html_url": "https://github.com/rust-lang/rust/commit/33ef0bad21d6bb646c7c3ab0dbf381ca96c324bf"}, {"sha": "4093bec80d39f94d69754d3a30cb14d9d4954424", "url": "https://api.github.com/repos/rust-lang/rust/commits/4093bec80d39f94d69754d3a30cb14d9d4954424", "html_url": "https://github.com/rust-lang/rust/commit/4093bec80d39f94d69754d3a30cb14d9d4954424"}], "stats": {"total": 223, "additions": 168, "deletions": 55}, "files": [{"sha": "9c6d03af9f51bc4c9056c7b77e3682907d0ad004", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/74a69f2e746eea409aa433ce560a74b1ec272de7/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74a69f2e746eea409aa433ce560a74b1ec272de7/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=74a69f2e746eea409aa433ce560a74b1ec272de7", "patch": "@@ -469,6 +469,7 @@ rustc_dep_node_append!([define_dep_nodes!][ <'tcx>\n     [] UnsafetyCheckResult(DefId),\n     [] UnsafeDeriveOnReprPacked(DefId),\n \n+    [] LintMod(DefId),\n     [] CheckModAttrs(DefId),\n     [] CheckModLoops(DefId),\n     [] CheckModUnstableApiUsage(DefId),"}, {"sha": "2ffb4959951b8896cefcb4eeaade5123baf2cef3", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/74a69f2e746eea409aa433ce560a74b1ec272de7/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74a69f2e746eea409aa433ce560a74b1ec272de7/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=74a69f2e746eea409aa433ce560a74b1ec272de7", "patch": "@@ -580,17 +580,17 @@ impl<'hir> Map<'hir> {\n         &self.forest.krate.attrs\n     }\n \n-    pub fn get_module(&self, module: DefId) -> (&'hir Mod, Span, NodeId)\n-    {\n+    pub fn get_module(&self, module: DefId) -> (&'hir Mod, Span, HirId) {\n         let node_id = self.as_local_node_id(module).unwrap();\n+        let hir_id = self.node_to_hir_id(node_id);\n         self.read(node_id);\n         match self.find_entry(node_id).unwrap().node {\n             Node::Item(&Item {\n                 span,\n                 node: ItemKind::Mod(ref m),\n                 ..\n-            }) => (m, span, node_id),\n-            Node::Crate => (&self.forest.krate.module, self.forest.krate.span, node_id),\n+            }) => (m, span, hir_id),\n+            Node::Crate => (&self.forest.krate.module, self.forest.krate.span, hir_id),\n             _ => panic!(\"not a module\")\n         }\n     }\n@@ -1013,7 +1013,7 @@ impl<'hir> Map<'hir> {\n     /// corresponding to the Node ID\n     pub fn attrs(&self, id: NodeId) -> &'hir [ast::Attribute] {\n         self.read(id); // reveals attributes on the node\n-        let attrs = match self.find(id) {\n+        let attrs = match self.find_entry(id).map(|entry| entry.node) {\n             Some(Node::Local(l)) => Some(&l.attrs[..]),\n             Some(Node::Item(i)) => Some(&i.attrs[..]),\n             Some(Node::ForeignItem(fi)) => Some(&fi.attrs[..]),\n@@ -1027,6 +1027,7 @@ impl<'hir> Map<'hir> {\n             // Unit/tuple structs/variants take the attributes straight from\n             // the struct/variant definition.\n             Some(Node::Ctor(..)) => return self.attrs(self.get_parent(id)),\n+            Some(Node::Crate) => Some(&self.forest.krate.attrs[..]),\n             _ => None\n         };\n         attrs.unwrap_or(&[])"}, {"sha": "953d0116aa2ba24d7706f8750d588fc91bcf856f", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 77, "deletions": 9, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/74a69f2e746eea409aa433ce560a74b1ec272de7/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74a69f2e746eea409aa433ce560a74b1ec272de7/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=74a69f2e746eea409aa433ce560a74b1ec272de7", "patch": "@@ -27,6 +27,7 @@ use crate::rustc_serialize::{Decoder, Decodable, Encoder, Encodable};\n use crate::session::{config, early_error, Session};\n use crate::ty::{self, TyCtxt, Ty};\n use crate::ty::layout::{LayoutError, LayoutOf, TyLayout};\n+use crate::ty::query::Providers;\n use crate::util::nodemap::FxHashMap;\n use crate::util::common::time;\n \n@@ -36,8 +37,9 @@ use syntax::edition;\n use syntax_pos::{MultiSpan, Span, symbol::{LocalInternedString, Symbol}};\n use errors::DiagnosticBuilder;\n use crate::hir;\n-use crate::hir::def_id::LOCAL_CRATE;\n+use crate::hir::def_id::{DefId, LOCAL_CRATE};\n use crate::hir::intravisit as hir_visit;\n+use crate::hir::intravisit::Visitor;\n use syntax::util::lev_distance::find_best_match_for_name;\n use syntax::visit as ast_visit;\n \n@@ -55,6 +57,7 @@ pub struct LintStore {\n     pre_expansion_passes: Option<Vec<EarlyLintPassObject>>,\n     early_passes: Option<Vec<EarlyLintPassObject>>,\n     late_passes: Option<Vec<LateLintPassObject>>,\n+    late_module_passes: Option<Vec<LateLintPassObject>>,\n \n     /// Lints indexed by name.\n     by_name: FxHashMap<String, TargetLint>,\n@@ -150,6 +153,7 @@ impl LintStore {\n             pre_expansion_passes: Some(vec![]),\n             early_passes: Some(vec![]),\n             late_passes: Some(vec![]),\n+            late_module_passes: Some(vec![]),\n             by_name: Default::default(),\n             future_incompatible: Default::default(),\n             lint_groups: Default::default(),\n@@ -199,9 +203,14 @@ impl LintStore {\n     pub fn register_late_pass(&mut self,\n                               sess: Option<&Session>,\n                               from_plugin: bool,\n+                              per_module: bool,\n                               pass: LateLintPassObject) {\n         self.push_pass(sess, from_plugin, &pass);\n-        self.late_passes.as_mut().unwrap().push(pass);\n+        if per_module {\n+            self.late_module_passes.as_mut().unwrap().push(pass);\n+        } else {\n+            self.late_passes.as_mut().unwrap().push(pass);\n+        }\n     }\n \n     // Helper method for register_early/late_pass\n@@ -508,6 +517,7 @@ pub struct LateContext<'a, 'tcx: 'a> {\n     pub tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n     /// Side-tables for the body we are in.\n+    // FIXME: Make this lazy to avoid running the TypeckTables query?\n     pub tables: &'a ty::TypeckTables<'tcx>,\n \n     /// Parameter environment for the item we are in.\n@@ -523,6 +533,9 @@ pub struct LateContext<'a, 'tcx: 'a> {\n \n     /// Generic type parameters in scope for the item we are in.\n     pub generics: Option<&'tcx hir::Generics>,\n+\n+    /// We are only looking at one module\n+    only_module: bool,\n }\n \n /// Context for lint checking of the AST, after expansion, before lowering to\n@@ -803,6 +816,12 @@ impl<'a, 'tcx> LateContext<'a, 'tcx> {\n     pub fn current_lint_root(&self) -> hir::HirId {\n         self.last_node_with_lint_attrs\n     }\n+\n+    fn process_mod(&mut self, m: &'tcx hir::Mod, s: Span, n: hir::HirId) {\n+        run_lints!(self, check_mod, m, s, n);\n+        hir_visit::walk_mod(self, m, n);\n+        run_lints!(self, check_mod_post, m, s, n);\n+    }\n }\n \n impl<'a, 'tcx> LayoutOf for LateContext<'a, 'tcx> {\n@@ -934,9 +953,9 @@ impl<'a, 'tcx> hir_visit::Visitor<'tcx> for LateContext<'a, 'tcx> {\n     }\n \n     fn visit_mod(&mut self, m: &'tcx hir::Mod, s: Span, n: hir::HirId) {\n-        run_lints!(self, check_mod, m, s, n);\n-        hir_visit::walk_mod(self, m, n);\n-        run_lints!(self, check_mod_post, m, s, n);\n+        if !self.only_module {\n+            self.process_mod(m, s, n);\n+        }\n     }\n \n     fn visit_local(&mut self, l: &'tcx hir::Local) {\n@@ -1203,11 +1222,48 @@ impl<'a, T: EarlyLintPass> ast_visit::Visitor<'a> for EarlyContextAndPass<'a, T>\n     }\n }\n \n+pub fn lint_mod<'tcx>(tcx: TyCtxt<'_, 'tcx, 'tcx>, module_def_id: DefId) {\n+    let access_levels = &tcx.privacy_access_levels(LOCAL_CRATE);\n \n-/// Performs lint checking on a crate.\n-///\n-/// Consumes the `lint_store` field of the `Session`.\n-pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n+    let store = &tcx.sess.lint_store;\n+    let passes = store.borrow_mut().late_module_passes.take();\n+\n+    let mut cx = LateContext {\n+        tcx,\n+        tables: &ty::TypeckTables::empty(None),\n+        param_env: ty::ParamEnv::empty(),\n+        access_levels,\n+        lint_sess: LintSession {\n+            lints: store.borrow(),\n+            passes,\n+        },\n+        last_node_with_lint_attrs: tcx.hir().as_local_hir_id(module_def_id).unwrap(),\n+        generics: None,\n+        only_module: true,\n+    };\n+\n+    let (module, span, hir_id) = tcx.hir().get_module(module_def_id);\n+    cx.process_mod(module, span, hir_id);\n+\n+    // Visit the crate attributes\n+    if hir_id == hir::CRATE_HIR_ID {\n+        walk_list!(cx, visit_attribute, cx.tcx.hir().attrs_by_hir_id(hir::CRATE_HIR_ID));\n+    }\n+\n+    // Put the lint store levels and passes back in the session.\n+    let passes = cx.lint_sess.passes;\n+    drop(cx.lint_sess.lints);\n+    store.borrow_mut().late_module_passes = passes;\n+}\n+\n+pub(crate) fn provide(providers: &mut Providers<'_>) {\n+    *providers = Providers {\n+        lint_mod,\n+        ..*providers\n+    };\n+}\n+\n+fn lint_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     let access_levels = &tcx.privacy_access_levels(LOCAL_CRATE);\n \n     let krate = tcx.hir().krate();\n@@ -1225,6 +1281,7 @@ pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n             },\n             last_node_with_lint_attrs: hir::CRATE_HIR_ID,\n             generics: None,\n+            only_module: false,\n         };\n \n         // Visit the whole crate.\n@@ -1244,6 +1301,17 @@ pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     tcx.sess.lint_store.borrow_mut().late_passes = passes;\n }\n \n+/// Performs lint checking on a crate.\n+pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n+    // Run per-module lints\n+    for &module in tcx.hir().krate().modules.keys() {\n+        tcx.ensure().lint_mod(tcx.hir().local_def_id(module));\n+    }\n+\n+    // Run whole crate non-incremental lints\n+    lint_crate(tcx);\n+}\n+\n struct EarlyLintPassObjects<'a> {\n     lints: &'a mut [EarlyLintPassObject],\n }"}, {"sha": "cf1c5d50000fa9bd8453bb5a716521710c5e9e42", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/74a69f2e746eea409aa433ce560a74b1ec272de7/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74a69f2e746eea409aa433ce560a74b1ec272de7/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=74a69f2e746eea409aa433ce560a74b1ec272de7", "patch": "@@ -824,6 +824,7 @@ impl<'a, 'tcx> intravisit::Visitor<'tcx> for LintLevelMapBuilder<'a, 'tcx> {\n \n pub fn provide(providers: &mut Providers<'_>) {\n     providers.lint_levels = lint_levels;\n+    context::provide(providers);\n }\n \n /// Returns whether `span` originates in a foreign crate's external macro."}, {"sha": "9c705104d1888dcd60decf29a68450f74304ebea", "filename": "src/librustc/ty/query/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74a69f2e746eea409aa433ce560a74b1ec272de7/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74a69f2e746eea409aa433ce560a74b1ec272de7/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs?ref=74a69f2e746eea409aa433ce560a74b1ec272de7", "patch": "@@ -217,6 +217,8 @@ rustc_query_append! { [define_queries!][ <'tcx>\n     },\n \n     Other {\n+        [] fn lint_mod: LintMod(DefId) -> (),\n+\n         /// Checks the attributes in the module\n         [] fn check_mod_attrs: CheckModAttrs(DefId) -> (),\n "}, {"sha": "b2b141fd0f514c688d95043a9cefb3779f35ccd1", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/74a69f2e746eea409aa433ce560a74b1ec272de7/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74a69f2e746eea409aa433ce560a74b1ec272de7/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=74a69f2e746eea409aa433ce560a74b1ec272de7", "patch": "@@ -1262,6 +1262,7 @@ pub fn force_from_dep_node<'tcx>(\n         DepKind::MirBorrowCheck => { force!(mir_borrowck, def_id!()); }\n         DepKind::UnsafetyCheckResult => { force!(unsafety_check_result, def_id!()); }\n         DepKind::UnsafeDeriveOnReprPacked => { force!(unsafe_derive_on_repr_packed, def_id!()); }\n+        DepKind::LintMod => { force!(lint_mod, def_id!()); }\n         DepKind::CheckModAttrs => { force!(check_mod_attrs, def_id!()); }\n         DepKind::CheckModLoops => { force!(check_mod_loops, def_id!()); }\n         DepKind::CheckModUnstableApiUsage => { force!(check_mod_unstable_api_usage, def_id!()); }"}, {"sha": "b6daadb1b456f6e2a6bc9e2deb4a084e5ce87672", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74a69f2e746eea409aa433ce560a74b1ec272de7/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74a69f2e746eea409aa433ce560a74b1ec272de7/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=74a69f2e746eea409aa433ce560a74b1ec272de7", "patch": "@@ -328,7 +328,7 @@ pub fn register_plugins<'a>(\n         ls.register_early_pass(Some(sess), true, false, pass);\n     }\n     for pass in late_lint_passes {\n-        ls.register_late_pass(Some(sess), true, pass);\n+        ls.register_late_pass(Some(sess), true, false, pass);\n     }\n \n     for (name, (to, deprecated_name)) in lint_groups {"}, {"sha": "492ac1bf14dcc88386375cc637e22466cb245e95", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/74a69f2e746eea409aa433ce560a74b1ec272de7/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74a69f2e746eea409aa433ce560a74b1ec272de7/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=74a69f2e746eea409aa433ce560a74b1ec272de7", "patch": "@@ -1360,6 +1360,7 @@ fn check_const(cx: &LateContext<'_, '_>, body_id: hir::BodyId) {\n         promoted: None\n     };\n     // trigger the query once for all constants since that will already report the errors\n+    // FIXME: Use ensure here\n     let _ = cx.tcx.const_eval(param_env.and(cid));\n }\n "}, {"sha": "4c624a267af9b676c1afd31987bf7212ea26801c", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 45, "deletions": 10, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/74a69f2e746eea409aa433ce560a74b1ec272de7/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74a69f2e746eea409aa433ce560a74b1ec272de7/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=74a69f2e746eea409aa433ce560a74b1ec272de7", "patch": "@@ -125,37 +125,72 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n         store.register_early_pass(sess, false, true, box BuiltinCombinedEarlyLintPass::new());\n     }\n \n-    late_lint_methods!(declare_combined_late_lint_pass, [BuiltinCombinedLateLintPass, [\n+    late_lint_methods!(declare_combined_late_lint_pass, [BuiltinCombinedModuleLateLintPass, [\n         HardwiredLints: HardwiredLints,\n         WhileTrue: WhileTrue,\n         ImproperCTypes: ImproperCTypes,\n         VariantSizeDifferences: VariantSizeDifferences,\n         BoxPointers: BoxPointers,\n-        UnusedAttributes: UnusedAttributes,\n         PathStatements: PathStatements,\n+\n+        // Depends on referenced function signatures in expressions\n         UnusedResults: UnusedResults,\n-        NonSnakeCase: NonSnakeCase,\n+\n         NonUpperCaseGlobals: NonUpperCaseGlobals,\n         NonShorthandFieldPatterns: NonShorthandFieldPatterns,\n         UnusedAllocation: UnusedAllocation,\n+\n+        // Depends on types used in type definitions\n         MissingCopyImplementations: MissingCopyImplementations,\n-        UnstableFeatures: UnstableFeatures,\n-        InvalidNoMangleItems: InvalidNoMangleItems,\n+\n         PluginAsLibrary: PluginAsLibrary,\n+\n+        // Depends on referenced function signatures in expressions\n         MutableTransmutes: MutableTransmutes,\n+\n+        // Depends on types of fields, checks if they implement Drop\n         UnionsWithDropFields: UnionsWithDropFields,\n-        UnreachablePub: UnreachablePub,\n-        UnnameableTestItems: UnnameableTestItems::new(),\n+\n         TypeAliasBounds: TypeAliasBounds,\n-        UnusedBrokenConst: UnusedBrokenConst,\n+\n         TrivialConstraints: TrivialConstraints,\n         TypeLimits: TypeLimits::new(),\n+\n+        NonSnakeCase: NonSnakeCase,\n+        InvalidNoMangleItems: InvalidNoMangleItems,\n+\n+        // Depends on access levels\n+        UnreachablePub: UnreachablePub,\n+\n+        ExplicitOutlivesRequirements: ExplicitOutlivesRequirements,\n+    ]], ['tcx]);\n+\n+    store.register_late_pass(sess, false, true, box BuiltinCombinedModuleLateLintPass::new());\n+\n+    late_lint_methods!(declare_combined_late_lint_pass, [BuiltinCombinedLateLintPass, [\n+        // FIXME: Look into regression when this is used as a module lint\n+        // May Depend on constants elsewhere\n+        UnusedBrokenConst: UnusedBrokenConst,\n+\n+        // Uses attr::is_used which is untracked, can't be an incremental module pass.\n+        UnusedAttributes: UnusedAttributes,\n+\n+        // Needs to run after UnusedAttributes as it marks all `feature` attributes as used.\n+        UnstableFeatures: UnstableFeatures,\n+\n+        // Tracks state across modules\n+        UnnameableTestItems: UnnameableTestItems::new(),\n+\n+        // Tracks attributes of parents\n         MissingDoc: MissingDoc::new(),\n+\n+        // Depends on access levels\n+        // FIXME: Turn the computation of types which implement Debug into a query\n+        // and change this to a module lint pass\n         MissingDebugImplementations: MissingDebugImplementations::new(),\n-        ExplicitOutlivesRequirements: ExplicitOutlivesRequirements,\n     ]], ['tcx]);\n \n-    store.register_late_pass(sess, false, box BuiltinCombinedLateLintPass::new());\n+    store.register_late_pass(sess, false, false, box BuiltinCombinedLateLintPass::new());\n \n     add_lint_group!(sess,\n                     \"nonstandard_style\","}, {"sha": "7a164dbcdf12d15922f2d0452b26510bd476366c", "filename": "src/librustc_lint/nonstandard_style.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/74a69f2e746eea409aa433ce560a74b1ec272de7/src%2Flibrustc_lint%2Fnonstandard_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74a69f2e746eea409aa433ce560a74b1ec272de7/src%2Flibrustc_lint%2Fnonstandard_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fnonstandard_style.rs?ref=74a69f2e746eea409aa433ce560a74b1ec272de7", "patch": "@@ -267,11 +267,15 @@ impl LintPass for NonSnakeCase {\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NonSnakeCase {\n-    fn check_crate(&mut self, cx: &LateContext<'_, '_>, cr: &hir::Crate) {\n+    fn check_mod(&mut self, cx: &LateContext<'_, '_>, _: &'tcx hir::Mod, _: Span, id: hir::HirId) {\n+        if id != hir::CRATE_HIR_ID {\n+            return;\n+        }\n+\n         let crate_ident = if let Some(name) = &cx.tcx.sess.opts.crate_name {\n             Some(Ident::from_str(name))\n         } else {\n-            attr::find_by_name(&cr.attrs, \"crate_name\")\n+            attr::find_by_name(&cx.tcx.hir().attrs_by_hir_id(hir::CRATE_HIR_ID), \"crate_name\")\n                 .and_then(|attr| attr.meta())\n                 .and_then(|meta| {\n                     meta.name_value_literal().and_then(|lit| {"}, {"sha": "b532e5c94d5318fe9ed0a4292a50d345cf8b28cb", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/74a69f2e746eea409aa433ce560a74b1ec272de7/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74a69f2e746eea409aa433ce560a74b1ec272de7/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=74a69f2e746eea409aa433ce560a74b1ec272de7", "patch": "@@ -1790,8 +1790,7 @@ fn check_mod_privacy<'tcx>(tcx: TyCtxt<'_, 'tcx, 'tcx>, module_def_id: DefId) {\n         current_item: hir::DUMMY_HIR_ID,\n         empty_tables: &empty_tables,\n     };\n-    let (module, span, node_id) = tcx.hir().get_module(module_def_id);\n-    let hir_id = tcx.hir().node_to_hir_id(node_id);\n+    let (module, span, hir_id) = tcx.hir().get_module(module_def_id);\n     intravisit::walk_mod(&mut visitor, module, hir_id);\n \n     // Check privacy of explicitly written types and traits as well as"}, {"sha": "56f85111d428f9678787b045aa51d535c0f15b39", "filename": "src/test/ui/lint/lint-impl-fn.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/74a69f2e746eea409aa433ce560a74b1ec272de7/src%2Ftest%2Fui%2Flint%2Flint-impl-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74a69f2e746eea409aa433ce560a74b1ec272de7/src%2Ftest%2Fui%2Flint%2Flint-impl-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-impl-fn.stderr?ref=74a69f2e746eea409aa433ce560a74b1ec272de7", "patch": "@@ -11,25 +11,25 @@ LL |     #[deny(while_true)]\n    |            ^^^^^^^^^^\n \n error: denote infinite loops with `loop { ... }`\n-  --> $DIR/lint-impl-fn.rs:18:25\n+  --> $DIR/lint-impl-fn.rs:27:5\n    |\n-LL |         fn foo(&self) { while true {} }\n-   |                         ^^^^^^^^^^ help: use `loop`\n+LL |     while true {}\n+   |     ^^^^^^^^^^ help: use `loop`\n    |\n note: lint level defined here\n-  --> $DIR/lint-impl-fn.rs:13:8\n+  --> $DIR/lint-impl-fn.rs:25:8\n    |\n LL | #[deny(while_true)]\n    |        ^^^^^^^^^^\n \n error: denote infinite loops with `loop { ... }`\n-  --> $DIR/lint-impl-fn.rs:27:5\n+  --> $DIR/lint-impl-fn.rs:18:25\n    |\n-LL |     while true {}\n-   |     ^^^^^^^^^^ help: use `loop`\n+LL |         fn foo(&self) { while true {} }\n+   |                         ^^^^^^^^^^ help: use `loop`\n    |\n note: lint level defined here\n-  --> $DIR/lint-impl-fn.rs:25:8\n+  --> $DIR/lint-impl-fn.rs:13:8\n    |\n LL | #[deny(while_true)]\n    |        ^^^^^^^^^^"}, {"sha": "5aaa9947f998a73e80a637f11a0faf47a75cb62a", "filename": "src/test/ui/lint/suggestions.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/74a69f2e746eea409aa433ce560a74b1ec272de7/src%2Ftest%2Fui%2Flint%2Fsuggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74a69f2e746eea409aa433ce560a74b1ec272de7/src%2Ftest%2Fui%2Flint%2Fsuggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fsuggestions.stderr?ref=74a69f2e746eea409aa433ce560a74b1ec272de7", "patch": "@@ -65,6 +65,24 @@ LL | pub fn defiant<T>(_t: T) {}\n    |\n    = note: #[warn(no_mangle_generic_items)] on by default\n \n+warning: denote infinite loops with `loop { ... }`\n+  --> $DIR/suggestions.rs:46:5\n+   |\n+LL |     while true {\n+   |     ^^^^^^^^^^ help: use `loop`\n+   |\n+   = note: #[warn(while_true)] on by default\n+\n+warning: the `warp_factor:` in this pattern is redundant\n+  --> $DIR/suggestions.rs:61:23\n+   |\n+LL |             Equinox { warp_factor: warp_factor } => {}\n+   |                       ------------^^^^^^^^^^^^\n+   |                       |\n+   |                       help: remove this\n+   |\n+   = note: #[warn(non_shorthand_field_patterns)] on by default\n+\n error: const items should never be #[no_mangle]\n   --> $DIR/suggestions.rs:22:18\n    |\n@@ -97,23 +115,5 @@ LL |     #[no_mangle] pub(crate) fn crossfield<T>() {}\n    |     |\n    |     help: remove this attribute\n \n-warning: denote infinite loops with `loop { ... }`\n-  --> $DIR/suggestions.rs:46:5\n-   |\n-LL |     while true {\n-   |     ^^^^^^^^^^ help: use `loop`\n-   |\n-   = note: #[warn(while_true)] on by default\n-\n-warning: the `warp_factor:` in this pattern is redundant\n-  --> $DIR/suggestions.rs:61:23\n-   |\n-LL |             Equinox { warp_factor: warp_factor } => {}\n-   |                       ------------^^^^^^^^^^^^\n-   |                       |\n-   |                       help: remove this\n-   |\n-   = note: #[warn(non_shorthand_field_patterns)] on by default\n-\n error: aborting due to 3 previous errors\n "}]}