{"sha": "810dbf7770cfaa52ed5cdc2f833fa11e4034c029", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxMGRiZjc3NzBjZmFhNTJlZDVjZGMyZjgzM2ZhMTFlNDAzNGMwMjk=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-05-23T10:02:54Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-05-23T10:24:19Z"}, "message": "take mir::PlaceElem by value", "tree": {"sha": "fc252f984616913b6307323b2fe918ce5fce0452", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc252f984616913b6307323b2fe918ce5fce0452"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/810dbf7770cfaa52ed5cdc2f833fa11e4034c029", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/810dbf7770cfaa52ed5cdc2f833fa11e4034c029", "html_url": "https://github.com/rust-lang/rust/commit/810dbf7770cfaa52ed5cdc2f833fa11e4034c029", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/810dbf7770cfaa52ed5cdc2f833fa11e4034c029/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da57cedd215564385b1c0ea09d553121fe09c32e", "url": "https://api.github.com/repos/rust-lang/rust/commits/da57cedd215564385b1c0ea09d553121fe09c32e", "html_url": "https://github.com/rust-lang/rust/commit/da57cedd215564385b1c0ea09d553121fe09c32e"}], "stats": {"total": 116, "additions": 58, "deletions": 58}, "files": [{"sha": "fa0f29acc74334c0ddc7097349ffc556f6657f58", "filename": "src/librustc_codegen_ssa/mir/analyze.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/810dbf7770cfaa52ed5cdc2f833fa11e4034c029/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/810dbf7770cfaa52ed5cdc2f833fa11e4034c029/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs?ref=810dbf7770cfaa52ed5cdc2f833fa11e4034c029", "patch": "@@ -104,7 +104,7 @@ impl<Bx: BuilderMethods<'a, 'tcx>> LocalAnalyzer<'mir, 'a, 'tcx, Bx> {\n     ) {\n         let cx = self.fx.cx;\n \n-        if let [proj_base @ .., elem] = place_ref.projection {\n+        if let &[ref proj_base @ .., elem] = place_ref.projection {\n             let mut base_context = if context.is_mutating_use() {\n                 PlaceContext::MutatingUse(MutatingUseContext::Projection)\n             } else {\n@@ -186,7 +186,7 @@ impl<Bx: BuilderMethods<'a, 'tcx>> LocalAnalyzer<'mir, 'a, 'tcx, Bx> {\n             // now that we have moved to the \"slice of projections\" representation.\n             if let mir::ProjectionElem::Index(local) = elem {\n                 self.visit_local(\n-                    local,\n+                    &local,\n                     PlaceContext::NonMutatingUse(NonMutatingUseContext::Copy),\n                     location,\n                 );"}, {"sha": "2be0679382900650e9494f3f5e71a77eeacb9f4a", "filename": "src/librustc_codegen_ssa/mir/place.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/810dbf7770cfaa52ed5cdc2f833fa11e4034c029/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/810dbf7770cfaa52ed5cdc2f833fa11e4034c029/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs?ref=810dbf7770cfaa52ed5cdc2f833fa11e4034c029", "patch": "@@ -429,7 +429,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 self.codegen_consume(bx, mir::PlaceRef { local, projection: proj_base })\n                     .deref(bx.cx())\n             }\n-            mir::PlaceRef { local, projection: [proj_base @ .., elem] } => {\n+            mir::PlaceRef { local, projection: &[ref proj_base @ .., elem] } => {\n                 // FIXME turn this recursion into iteration\n                 let cg_base =\n                     self.codegen_place(bx, mir::PlaceRef { local, projection: proj_base });\n@@ -440,7 +440,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                         cg_base.project_field(bx, field.index())\n                     }\n                     mir::ProjectionElem::Index(index) => {\n-                        let index = &mir::Operand::Copy(mir::Place::from(*index));\n+                        let index = &mir::Operand::Copy(mir::Place::from(index));\n                         let index = self.codegen_operand(bx, index);\n                         let llindex = index.immediate();\n                         cg_base.project_index(bx, llindex)\n@@ -450,22 +450,22 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                         from_end: false,\n                         min_length: _,\n                     } => {\n-                        let lloffset = bx.cx().const_usize(*offset as u64);\n+                        let lloffset = bx.cx().const_usize(offset as u64);\n                         cg_base.project_index(bx, lloffset)\n                     }\n                     mir::ProjectionElem::ConstantIndex {\n                         offset,\n                         from_end: true,\n                         min_length: _,\n                     } => {\n-                        let lloffset = bx.cx().const_usize(*offset as u64);\n+                        let lloffset = bx.cx().const_usize(offset as u64);\n                         let lllen = cg_base.len(bx.cx());\n                         let llindex = bx.sub(lllen, lloffset);\n                         cg_base.project_index(bx, llindex)\n                     }\n                     mir::ProjectionElem::Subslice { from, to, from_end } => {\n                         let mut subslice =\n-                            cg_base.project_index(bx, bx.cx().const_usize(*from as u64));\n+                            cg_base.project_index(bx, bx.cx().const_usize(from as u64));\n                         let projected_ty =\n                             PlaceTy::from_ty(cg_base.layout.ty).projection_ty(tcx, elem).ty;\n                         subslice.layout = bx.cx().layout_of(self.monomorphize(&projected_ty));\n@@ -474,7 +474,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                             assert!(from_end, \"slice subslices should be `from_end`\");\n                             subslice.llextra = Some(bx.sub(\n                                 cg_base.llextra.unwrap(),\n-                                bx.cx().const_usize((*from as u64) + (*to as u64)),\n+                                bx.cx().const_usize((from as u64) + (to as u64)),\n                             ));\n                         }\n \n@@ -487,7 +487,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n \n                         subslice\n                     }\n-                    mir::ProjectionElem::Downcast(_, v) => cg_base.project_downcast(bx, *v),\n+                    mir::ProjectionElem::Downcast(_, v) => cg_base.project_downcast(bx, v),\n                 }\n             }\n         };"}, {"sha": "4747aec2d5c24217a2625e7ea6df5d3e9fd109a2", "filename": "src/librustc_middle/mir/tcx.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/810dbf7770cfaa52ed5cdc2f833fa11e4034c029/src%2Flibrustc_middle%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/810dbf7770cfaa52ed5cdc2f833fa11e4034c029/src%2Flibrustc_middle%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Ftcx.rs?ref=810dbf7770cfaa52ed5cdc2f833fa11e4034c029", "patch": "@@ -56,8 +56,8 @@ impl<'tcx> PlaceTy<'tcx> {\n     /// Convenience wrapper around `projection_ty_core` for\n     /// `PlaceElem`, where we can just use the `Ty` that is already\n     /// stored inline on field projection elems.\n-    pub fn projection_ty(self, tcx: TyCtxt<'tcx>, elem: &PlaceElem<'tcx>) -> PlaceTy<'tcx> {\n-        self.projection_ty_core(tcx, ty::ParamEnv::empty(), elem, |_, _, ty| ty)\n+    pub fn projection_ty(self, tcx: TyCtxt<'tcx>, elem: PlaceElem<'tcx>) -> PlaceTy<'tcx> {\n+        self.projection_ty_core(tcx, ty::ParamEnv::empty(), &elem, |_, _, ty| ty)\n     }\n \n     /// `place_ty.projection_ty_core(tcx, elem, |...| { ... })`\n@@ -124,7 +124,7 @@ impl<'tcx> Place<'tcx> {\n     {\n         projection\n             .iter()\n-            .fold(PlaceTy::from_ty(local_decls.local_decls()[local].ty), |place_ty, elem| {\n+            .fold(PlaceTy::from_ty(local_decls.local_decls()[local].ty), |place_ty, &elem| {\n                 place_ty.projection_ty(tcx, elem)\n             })\n     }"}, {"sha": "a29b7b75294b7d026b3d2339069211ae5e49986b", "filename": "src/librustc_middle/mir/visit.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/810dbf7770cfaa52ed5cdc2f833fa11e4034c029/src%2Flibrustc_middle%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/810dbf7770cfaa52ed5cdc2f833fa11e4034c029/src%2Flibrustc_middle%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Fvisit.rs?ref=810dbf7770cfaa52ed5cdc2f833fa11e4034c029", "patch": "@@ -903,7 +903,7 @@ macro_rules! visit_place_fns {\n             let mut projection = Cow::Borrowed(projection);\n \n             for i in 0..projection.len() {\n-                if let Some(elem) = projection.get(i) {\n+                if let Some(&elem) = projection.get(i) {\n                     if let Some(elem) = self.process_projection_elem(elem, location) {\n                         // This converts the borrowed projection into `Cow::Owned(_)` and returns a\n                         // clone of the projection so we can mutate and reintern later.\n@@ -921,19 +921,19 @@ macro_rules! visit_place_fns {\n \n         fn process_projection_elem(\n             &mut self,\n-            elem: &PlaceElem<'tcx>,\n+            elem: PlaceElem<'tcx>,\n             location: Location,\n         ) -> Option<PlaceElem<'tcx>> {\n             match elem {\n                 PlaceElem::Index(local) => {\n-                    let mut new_local = *local;\n+                    let mut new_local = local;\n                     self.visit_local(\n                         &mut new_local,\n                         PlaceContext::NonMutatingUse(NonMutatingUseContext::Copy),\n                         location,\n                     );\n \n-                    if new_local == *local { None } else { Some(PlaceElem::Index(new_local)) }\n+                    if new_local == local { None } else { Some(PlaceElem::Index(new_local)) }\n                 }\n                 PlaceElem::Deref\n                 | PlaceElem::Field(..)\n@@ -959,7 +959,7 @@ macro_rules! visit_place_fns {\n             &mut self,\n             local: Local,\n             proj_base: &[PlaceElem<'tcx>],\n-            elem: &PlaceElem<'tcx>,\n+            elem: PlaceElem<'tcx>,\n             context: PlaceContext,\n             location: Location,\n         ) {\n@@ -990,7 +990,7 @@ macro_rules! visit_place_fns {\n             location: Location,\n         ) {\n             let mut cursor = projection;\n-            while let [proj_base @ .., elem] = cursor {\n+            while let &[ref proj_base @ .., elem] = cursor {\n                 cursor = proj_base;\n                 self.visit_projection_elem(local, cursor, elem, context, location);\n             }\n@@ -1000,7 +1000,7 @@ macro_rules! visit_place_fns {\n             &mut self,\n             _local: Local,\n             _proj_base: &[PlaceElem<'tcx>],\n-            elem: &PlaceElem<'tcx>,\n+            elem: PlaceElem<'tcx>,\n             _context: PlaceContext,\n             location: Location,\n         ) {\n@@ -1010,7 +1010,7 @@ macro_rules! visit_place_fns {\n                 }\n                 ProjectionElem::Index(local) => {\n                     self.visit_local(\n-                        local,\n+                        &local,\n                         PlaceContext::NonMutatingUse(NonMutatingUseContext::Copy),\n                         location,\n                     );"}, {"sha": "246e4826e0e767676d15355662894392fbe639c6", "filename": "src/librustc_mir/borrow_check/places_conflict.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/810dbf7770cfaa52ed5cdc2f833fa11e4034c029/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/810dbf7770cfaa52ed5cdc2f833fa11e4034c029/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs?ref=810dbf7770cfaa52ed5cdc2f833fa11e4034c029", "patch": "@@ -138,7 +138,7 @@ fn place_components_conflict<'tcx>(\n     }\n \n     // loop invariant: borrow_c is always either equal to access_c or disjoint from it.\n-    for (i, (borrow_c, access_c)) in\n+    for (i, (borrow_c, &access_c)) in\n         borrow_place.projection.iter().zip(access_place.projection.iter()).enumerate()\n     {\n         debug!(\"borrow_conflicts_with_place: borrow_c = {:?}\", borrow_c);\n@@ -163,8 +163,8 @@ fn place_components_conflict<'tcx>(\n             body,\n             borrow_local,\n             borrow_proj_base,\n-            &borrow_c,\n-            &access_c,\n+            borrow_c,\n+            access_c,\n             bias,\n         ) {\n             Overlap::Arbitrary => {\n@@ -313,8 +313,8 @@ fn place_projection_conflict<'tcx>(\n     body: &Body<'tcx>,\n     pi1_local: Local,\n     pi1_proj_base: &[PlaceElem<'tcx>],\n-    pi1_elem: &PlaceElem<'tcx>,\n-    pi2_elem: &PlaceElem<'tcx>,\n+    pi1_elem: PlaceElem<'tcx>,\n+    pi2_elem: PlaceElem<'tcx>,\n     bias: PlaceConflictBias,\n ) -> Overlap {\n     match (pi1_elem, pi2_elem) {\n@@ -420,24 +420,24 @@ fn place_projection_conflict<'tcx>(\n             }\n         }\n         (\n-            &ProjectionElem::ConstantIndex {\n+            ProjectionElem::ConstantIndex {\n                 offset: offset_from_begin,\n                 min_length: min_length1,\n                 from_end: false,\n             },\n-            &ProjectionElem::ConstantIndex {\n+            ProjectionElem::ConstantIndex {\n                 offset: offset_from_end,\n                 min_length: min_length2,\n                 from_end: true,\n             },\n         )\n         | (\n-            &ProjectionElem::ConstantIndex {\n+            ProjectionElem::ConstantIndex {\n                 offset: offset_from_end,\n                 min_length: min_length1,\n                 from_end: true,\n             },\n-            &ProjectionElem::ConstantIndex {\n+            ProjectionElem::ConstantIndex {\n                 offset: offset_from_begin,\n                 min_length: min_length2,\n                 from_end: false,"}, {"sha": "5df033b48c1f9f5153a1c12005be45a5b0f45c27", "filename": "src/librustc_mir/borrow_check/renumber.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/810dbf7770cfaa52ed5cdc2f833fa11e4034c029/src%2Flibrustc_mir%2Fborrow_check%2Frenumber.rs", "raw_url": "https://github.com/rust-lang/rust/raw/810dbf7770cfaa52ed5cdc2f833fa11e4034c029/src%2Flibrustc_mir%2Fborrow_check%2Frenumber.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Frenumber.rs?ref=810dbf7770cfaa52ed5cdc2f833fa11e4034c029", "patch": "@@ -66,14 +66,14 @@ impl<'a, 'tcx> MutVisitor<'tcx> for NLLVisitor<'a, 'tcx> {\n \n     fn process_projection_elem(\n         &mut self,\n-        elem: &PlaceElem<'tcx>,\n+        elem: PlaceElem<'tcx>,\n         _: Location,\n     ) -> Option<PlaceElem<'tcx>> {\n         if let PlaceElem::Field(field, ty) = elem {\n-            let new_ty = self.renumber_regions(ty);\n+            let new_ty = self.renumber_regions(&ty);\n \n-            if new_ty != *ty {\n-                return Some(PlaceElem::Field(*field, new_ty));\n+            if new_ty != ty {\n+                return Some(PlaceElem::Field(field, new_ty));\n             }\n         }\n "}, {"sha": "ac7da7ee42d66b212db34d44254269b72f21b5e2", "filename": "src/librustc_mir/borrow_check/type_check/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/810dbf7770cfaa52ed5cdc2f833fa11e4034c029/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/810dbf7770cfaa52ed5cdc2f833fa11e4034c029/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=810dbf7770cfaa52ed5cdc2f833fa11e4034c029", "patch": "@@ -497,7 +497,7 @@ impl<'a, 'b, 'tcx> TypeVerifier<'a, 'b, 'tcx> {\n                     return PlaceTy::from_ty(self.tcx().types.err);\n                 }\n             }\n-            place_ty = self.sanitize_projection(place_ty, &elem, place, location)\n+            place_ty = self.sanitize_projection(place_ty, elem, place, location)\n         }\n \n         if let PlaceContext::NonMutatingUse(NonMutatingUseContext::Copy) = context {\n@@ -611,14 +611,14 @@ impl<'a, 'b, 'tcx> TypeVerifier<'a, 'b, 'tcx> {\n     fn sanitize_projection(\n         &mut self,\n         base: PlaceTy<'tcx>,\n-        pi: &PlaceElem<'tcx>,\n+        pi: PlaceElem<'tcx>,\n         place: &Place<'tcx>,\n         location: Location,\n     ) -> PlaceTy<'tcx> {\n         debug!(\"sanitize_projection: {:?} {:?} {:?}\", base, pi, place);\n         let tcx = self.tcx();\n         let base_ty = base.ty;\n-        match *pi {\n+        match pi {\n             ProjectionElem::Deref => {\n                 let deref_ty = base_ty.builtin_deref(true);\n                 PlaceTy::from_ty(deref_ty.map(|t| t.ty).unwrap_or_else(|| {"}, {"sha": "6dd06743e2d5bdf187008aff53505c95ce1ec7ee", "filename": "src/librustc_mir/dataflow/drop_flag_effects.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/810dbf7770cfaa52ed5cdc2f833fa11e4034c029/src%2Flibrustc_mir%2Fdataflow%2Fdrop_flag_effects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/810dbf7770cfaa52ed5cdc2f833fa11e4034c029/src%2Flibrustc_mir%2Fdataflow%2Fdrop_flag_effects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fdrop_flag_effects.rs?ref=810dbf7770cfaa52ed5cdc2f833fa11e4034c029", "patch": "@@ -12,12 +12,12 @@ pub fn move_path_children_matching<'tcx, F>(\n     mut cond: F,\n ) -> Option<MovePathIndex>\n where\n-    F: FnMut(&mir::PlaceElem<'tcx>) -> bool,\n+    F: FnMut(mir::PlaceElem<'tcx>) -> bool,\n {\n     let mut next_child = move_data.move_paths[path].first_child;\n     while let Some(child_index) = next_child {\n         let move_path_children = &move_data.move_paths[child_index];\n-        if let Some(elem) = move_path_children.place.projection.last() {\n+        if let Some(&elem) = move_path_children.place.projection.last() {\n             if cond(elem) {\n                 return Some(child_index);\n             }"}, {"sha": "427ab1ca5cd229d20722df05bcd30e5296246e04", "filename": "src/librustc_mir/dataflow/move_paths/builder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/810dbf7770cfaa52ed5cdc2f833fa11e4034c029/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/810dbf7770cfaa52ed5cdc2f833fa11e4034c029/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs?ref=810dbf7770cfaa52ed5cdc2f833fa11e4034c029", "patch": "@@ -158,7 +158,7 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n             };\n \n             if union_path.is_none() {\n-                base = self.add_move_path(base, &elem, |tcx| Place {\n+                base = self.add_move_path(base, elem, |tcx| Place {\n                     local: place.local,\n                     projection: tcx.intern_place_elems(&place.projection[..i + 1]),\n                 });\n@@ -176,7 +176,7 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n     fn add_move_path(\n         &mut self,\n         base: MovePathIndex,\n-        elem: &PlaceElem<'tcx>,\n+        elem: PlaceElem<'tcx>,\n         mk_place: impl FnOnce(TyCtxt<'tcx>) -> Place<'tcx>,\n     ) -> MovePathIndex {\n         let MoveDataBuilder {\n@@ -485,7 +485,7 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n                 let elem =\n                     ProjectionElem::ConstantIndex { offset, min_length: len, from_end: false };\n                 let path =\n-                    self.add_move_path(base_path, &elem, |tcx| tcx.mk_place_elem(base_place, elem));\n+                    self.add_move_path(base_path, elem, |tcx| tcx.mk_place_elem(base_place, elem));\n                 self.record_move(place, path);\n             }\n         } else {"}, {"sha": "95bc9810dab80f92d0eb0c1720a9e6f9e98418cd", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/810dbf7770cfaa52ed5cdc2f833fa11e4034c029/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/810dbf7770cfaa52ed5cdc2f833fa11e4034c029/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=810dbf7770cfaa52ed5cdc2f833fa11e4034c029", "patch": "@@ -400,10 +400,10 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     pub fn operand_projection(\n         &self,\n         base: OpTy<'tcx, M::PointerTag>,\n-        proj_elem: &mir::PlaceElem<'tcx>,\n+        proj_elem: mir::PlaceElem<'tcx>,\n     ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {\n         use rustc_middle::mir::ProjectionElem::*;\n-        Ok(match *proj_elem {\n+        Ok(match proj_elem {\n             Field(field, _) => self.operand_field(base, field.index())?,\n             Downcast(_, variant) => self.operand_downcast(base, variant)?,\n             Deref => self.deref_operand(base)?.into(),\n@@ -466,7 +466,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         let op = place\n             .projection\n             .iter()\n-            .try_fold(base_op, |op, elem| self.operand_projection(op, &elem))?;\n+            .try_fold(base_op, |op, elem| self.operand_projection(op, elem))?;\n \n         trace!(\"eval_place_to_op: got {:?}\", *op);\n         Ok(op)"}, {"sha": "dc6967c2c49e52728cde62d86c6a6f70e40dabc7", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/810dbf7770cfaa52ed5cdc2f833fa11e4034c029/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/810dbf7770cfaa52ed5cdc2f833fa11e4034c029/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=810dbf7770cfaa52ed5cdc2f833fa11e4034c029", "patch": "@@ -517,10 +517,10 @@ where\n     pub(super) fn mplace_projection(\n         &self,\n         base: MPlaceTy<'tcx, M::PointerTag>,\n-        proj_elem: &mir::PlaceElem<'tcx>,\n+        proj_elem: mir::PlaceElem<'tcx>,\n     ) -> InterpResult<'tcx, MPlaceTy<'tcx, M::PointerTag>> {\n         use rustc_middle::mir::ProjectionElem::*;\n-        Ok(match *proj_elem {\n+        Ok(match proj_elem {\n             Field(field, _) => self.mplace_field(base, field.index())?,\n             Downcast(_, variant) => self.mplace_downcast(base, variant)?,\n             Deref => self.deref_operand(base.into())?,\n@@ -605,10 +605,10 @@ where\n     pub fn place_projection(\n         &mut self,\n         base: PlaceTy<'tcx, M::PointerTag>,\n-        proj_elem: &mir::ProjectionElem<mir::Local, Ty<'tcx>>,\n+        &proj_elem: &mir::ProjectionElem<mir::Local, Ty<'tcx>>,\n     ) -> InterpResult<'tcx, PlaceTy<'tcx, M::PointerTag>> {\n         use rustc_middle::mir::ProjectionElem::*;\n-        Ok(match *proj_elem {\n+        Ok(match proj_elem {\n             Field(field, _) => self.place_field(base, field.index())?,\n             Downcast(_, variant) => self.place_downcast(base, variant)?,\n             Deref => self.deref_operand(self.place_to_op(base)?)?.into(),"}, {"sha": "05a7c78d59d395fa200da22501999273a92ebce0", "filename": "src/librustc_mir/transform/check_consts/qualifs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/810dbf7770cfaa52ed5cdc2f833fa11e4034c029/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/810dbf7770cfaa52ed5cdc2f833fa11e4034c029/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fqualifs.rs?ref=810dbf7770cfaa52ed5cdc2f833fa11e4034c029", "patch": "@@ -206,8 +206,8 @@ where\n     F: FnMut(Local) -> bool,\n {\n     let mut projection = place.projection;\n-    while let [ref proj_base @ .., proj_elem] = projection {\n-        match *proj_elem {\n+    while let &[ref proj_base @ .., proj_elem] = projection {\n+        match proj_elem {\n             ProjectionElem::Index(index) if in_local(index) => return true,\n \n             ProjectionElem::Deref"}, {"sha": "80094e154bf66dcbc3d56f27b5ca8b4898ce191e", "filename": "src/librustc_mir/transform/check_consts/validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/810dbf7770cfaa52ed5cdc2f833fa11e4034c029/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/810dbf7770cfaa52ed5cdc2f833fa11e4034c029/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=810dbf7770cfaa52ed5cdc2f833fa11e4034c029", "patch": "@@ -432,7 +432,7 @@ impl Visitor<'tcx> for Validator<'mir, 'tcx> {\n         &mut self,\n         place_local: Local,\n         proj_base: &[PlaceElem<'tcx>],\n-        elem: &PlaceElem<'tcx>,\n+        elem: PlaceElem<'tcx>,\n         context: PlaceContext,\n         location: Location,\n     ) {"}, {"sha": "e4129f447d532532b17355d4139b6355fc414041", "filename": "src/librustc_mir/transform/elaborate_drops.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/810dbf7770cfaa52ed5cdc2f833fa11e4034c029/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/810dbf7770cfaa52ed5cdc2f833fa11e4034c029/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs?ref=810dbf7770cfaa52ed5cdc2f833fa11e4034c029", "patch": "@@ -213,31 +213,31 @@ impl<'a, 'b, 'tcx> DropElaborator<'a, 'tcx> for Elaborator<'a, 'b, 'tcx> {\n \n     fn field_subpath(&self, path: Self::Path, field: Field) -> Option<Self::Path> {\n         dataflow::move_path_children_matching(self.ctxt.move_data(), path, |e| match e {\n-            ProjectionElem::Field(idx, _) => *idx == field,\n+            ProjectionElem::Field(idx, _) => idx == field,\n             _ => false,\n         })\n     }\n \n     fn array_subpath(&self, path: Self::Path, index: u32, size: u32) -> Option<Self::Path> {\n         dataflow::move_path_children_matching(self.ctxt.move_data(), path, |e| match e {\n             ProjectionElem::ConstantIndex { offset, min_length, from_end } => {\n-                debug_assert!(size == *min_length, \"min_length should be exact for arrays\");\n+                debug_assert!(size == min_length, \"min_length should be exact for arrays\");\n                 assert!(!from_end, \"from_end should not be used for array element ConstantIndex\");\n-                *offset == index\n+                offset == index\n             }\n             _ => false,\n         })\n     }\n \n     fn deref_subpath(&self, path: Self::Path) -> Option<Self::Path> {\n         dataflow::move_path_children_matching(self.ctxt.move_data(), path, |e| {\n-            *e == ProjectionElem::Deref\n+            e == ProjectionElem::Deref\n         })\n     }\n \n     fn downcast_subpath(&self, path: Self::Path, variant: VariantIdx) -> Option<Self::Path> {\n         dataflow::move_path_children_matching(self.ctxt.move_data(), path, |e| match e {\n-            ProjectionElem::Downcast(_, idx) => *idx == variant,\n+            ProjectionElem::Downcast(_, idx) => idx == variant,\n             _ => false,\n         })\n     }"}, {"sha": "6caa2b48f3d45357a077032c0d3cd234d60e0335", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/810dbf7770cfaa52ed5cdc2f833fa11e4034c029/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/810dbf7770cfaa52ed5cdc2f833fa11e4034c029/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=810dbf7770cfaa52ed5cdc2f833fa11e4034c029", "patch": "@@ -340,7 +340,7 @@ impl<'tcx> Validator<'_, 'tcx> {\n                             // `let _: &'static _ = &(Cell::new(1), 2).1;`\n                             let mut place_projection = &place.projection[..];\n                             // FIXME(eddyb) use a forward loop instead of a reverse one.\n-                            while let [proj_base @ .., elem] = place_projection {\n+                            while let &[ref proj_base @ .., elem] = place_projection {\n                                 // FIXME(eddyb) this is probably excessive, with\n                                 // the exception of `union` member accesses.\n                                 let ty =\n@@ -676,7 +676,7 @@ impl<'tcx> Validator<'_, 'tcx> {\n                 if has_mut_interior {\n                     let mut place_projection = place.projection;\n                     // FIXME(eddyb) use a forward loop instead of a reverse one.\n-                    while let [proj_base @ .., elem] = place_projection {\n+                    while let &[ref proj_base @ .., elem] = place_projection {\n                         // FIXME(eddyb) this is probably excessive, with\n                         // the exception of `union` member accesses.\n                         let ty = Place::ty_from(place.local, proj_base, self.body, self.tcx)"}]}