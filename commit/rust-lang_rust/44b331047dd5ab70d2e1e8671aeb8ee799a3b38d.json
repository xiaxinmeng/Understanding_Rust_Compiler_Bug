{"sha": "44b331047dd5ab70d2e1e8671aeb8ee799a3b38d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0YjMzMTA0N2RkNWFiNzBkMmUxZTg2NzFhZWI4ZWU3OTlhM2IzOGQ=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-12-14T11:52:41Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-12-14T11:54:18Z"}, "message": "Also emit vcode when emitting clif ir while using new style backends", "tree": {"sha": "b60a79faa3ad03e5ac9b6a0b2b5cb4c95a4345d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b60a79faa3ad03e5ac9b6a0b2b5cb4c95a4345d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/44b331047dd5ab70d2e1e8671aeb8ee799a3b38d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/44b331047dd5ab70d2e1e8671aeb8ee799a3b38d", "html_url": "https://github.com/rust-lang/rust/commit/44b331047dd5ab70d2e1e8671aeb8ee799a3b38d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/44b331047dd5ab70d2e1e8671aeb8ee799a3b38d/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd21269ae0b3c9f516b0322b522255da03afcc76", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd21269ae0b3c9f516b0322b522255da03afcc76", "html_url": "https://github.com/rust-lang/rust/commit/cd21269ae0b3c9f516b0322b522255da03afcc76"}], "stats": {"total": 106, "additions": 64, "deletions": 42}, "files": [{"sha": "5ba992d93724f78cdd08e34de6790688b4ac50f7", "filename": "src/base.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/44b331047dd5ab70d2e1e8671aeb8ee799a3b38d/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44b331047dd5ab70d2e1e8671aeb8ee799a3b38d/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=44b331047dd5ab70d2e1e8671aeb8ee799a3b38d", "patch": "@@ -118,6 +118,8 @@ pub(crate) fn codegen_fn<'tcx>(\n     context.eliminate_unreachable_code(cx.module.isa()).unwrap();\n     context.dce(cx.module.isa()).unwrap();\n \n+    context.want_disasm = crate::pretty_clif::should_write_ir(tcx);\n+\n     // Define function\n     let module = &mut cx.module;\n     tcx.sess.time(\"define function\", || {\n@@ -140,6 +142,14 @@ pub(crate) fn codegen_fn<'tcx>(\n         &clif_comments,\n     );\n \n+    if let Some(mach_compile_result) = &context.mach_compile_result {\n+        if let Some(disasm) = &mach_compile_result.disasm {\n+            crate::pretty_clif::write_ir_file(tcx, &format!(\"{}.vcode\", tcx.symbol_name(instance).name), |file| {\n+                file.write_all(disasm.as_bytes())\n+            })\n+        }\n+    }\n+\n     // Define debuginfo for function\n     let isa = cx.module.isa();\n     let debug_context = &mut cx.debug_context;"}, {"sha": "1d17157a8761d9ac15b6320ac0870e9775494021", "filename": "src/pretty_clif.rs", "status": "modified", "additions": 54, "deletions": 42, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/44b331047dd5ab70d2e1e8671aeb8ee799a3b38d/src%2Fpretty_clif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44b331047dd5ab70d2e1e8671aeb8ee799a3b38d/src%2Fpretty_clif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpretty_clif.rs?ref=44b331047dd5ab70d2e1e8671aeb8ee799a3b38d", "patch": "@@ -53,6 +53,7 @@\n //! ```\n \n use std::fmt;\n+use std::io::Write;\n \n use cranelift_codegen::{\n     entity::SecondaryMap,\n@@ -200,32 +201,24 @@ impl<M: Module> FunctionCx<'_, '_, M> {\n     }\n }\n \n-pub(crate) fn write_clif_file<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n-    postfix: &str,\n-    isa: Option<&dyn cranelift_codegen::isa::TargetIsa>,\n-    instance: Instance<'tcx>,\n-    context: &cranelift_codegen::Context,\n-    mut clif_comments: &CommentWriter,\n-) {\n-    use std::io::Write;\n-\n-    if !cfg!(debug_assertions)\n-        && !tcx\n+pub(crate) fn should_write_ir(tcx: TyCtxt<'_>) -> bool {\n+    cfg!(debug_assertions)\n+        || tcx\n             .sess\n             .opts\n             .output_types\n             .contains_key(&OutputType::LlvmAssembly)\n-    {\n+}\n+\n+pub(crate) fn write_ir_file<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    name: &str,\n+    write: impl FnOnce(&mut dyn Write) -> std::io::Result<()>,\n+) {\n+    if !should_write_ir(tcx) {\n         return;\n     }\n \n-    let value_ranges = isa.map(|isa| {\n-        context\n-            .build_value_labels_ranges(isa)\n-            .expect(\"value location ranges\")\n-    });\n-\n     let clif_output_dir = tcx.output_filenames(LOCAL_CRATE).with_extension(\"clif\");\n \n     match std::fs::create_dir(&clif_output_dir) {\n@@ -234,39 +227,58 @@ pub(crate) fn write_clif_file<'tcx>(\n         res @ Err(_) => res.unwrap(),\n     }\n \n-    let clif_file_name = clif_output_dir.join(format!(\n+    let clif_file_name = clif_output_dir.join(name);\n+\n+    let res: std::io::Result<()> = try {\n+        let mut file = std::fs::File::create(clif_file_name)?;\n+        write(&mut file)?;\n+    };\n+    if let Err(err) = res {\n+        tcx.sess.warn(&format!(\"error writing ir file: {}\", err));\n+    }\n+}\n+\n+pub(crate) fn write_clif_file<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    postfix: &str,\n+    isa: Option<&dyn cranelift_codegen::isa::TargetIsa>,\n+    instance: Instance<'tcx>,\n+    context: &cranelift_codegen::Context,\n+    mut clif_comments: &CommentWriter,\n+) {\n+    write_ir_file(tcx, &format!(\n         \"{}.{}.clif\",\n         tcx.symbol_name(instance).name,\n         postfix\n-    ));\n+    ), |file| {\n+        let value_ranges = isa.map(|isa| {\n+            context\n+                .build_value_labels_ranges(isa)\n+                .expect(\"value location ranges\")\n+        });\n \n-    let mut clif = String::new();\n-    cranelift_codegen::write::decorate_function(\n-        &mut clif_comments,\n-        &mut clif,\n-        &context.func,\n-        &DisplayFunctionAnnotations {\n-            isa: Some(&*crate::build_isa(\n-                tcx.sess, true, /* PIC doesn't matter here */\n-            )),\n-            value_ranges: value_ranges.as_ref(),\n-        },\n-    )\n-    .unwrap();\n+        let mut clif = String::new();\n+        cranelift_codegen::write::decorate_function(\n+            &mut clif_comments,\n+            &mut clif,\n+            &context.func,\n+            &DisplayFunctionAnnotations {\n+                isa: Some(&*crate::build_isa(\n+                    tcx.sess, true, /* PIC doesn't matter here */\n+                )),\n+                value_ranges: value_ranges.as_ref(),\n+            },\n+        )\n+        .unwrap();\n \n-    let res: std::io::Result<()> = try {\n-        let mut file = std::fs::File::create(clif_file_name)?;\n-        let target_triple = crate::target_triple(tcx.sess);\n         writeln!(file, \"test compile\")?;\n         writeln!(file, \"set is_pic\")?;\n         writeln!(file, \"set enable_simd\")?;\n-        writeln!(file, \"target {} haswell\", target_triple)?;\n+        writeln!(file, \"target {} haswell\", crate::target_triple(tcx.sess))?;\n         writeln!(file)?;\n         file.write_all(clif.as_bytes())?;\n-    };\n-    if let Err(err) = res {\n-        tcx.sess.warn(&format!(\"err writing clif file: {}\", err));\n-    }\n+        Ok(())\n+    });\n }\n \n impl<M: Module> fmt::Debug for FunctionCx<'_, '_, M> {"}]}