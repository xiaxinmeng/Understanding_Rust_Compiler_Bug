{"sha": "5a5846f4c7b4797e3a038cc1107688af8e7919ec", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhNTg0NmY0YzdiNDc5N2UzYTAzOGNjMTEwNzY4OGFmOGU3OTE5ZWM=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2020-07-23T15:02:44Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2020-07-23T18:51:46Z"}, "message": "delay_span_bug instead of silent ignore", "tree": {"sha": "9da8e56026967fec303a303ef03a5f36ba746451", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9da8e56026967fec303a303ef03a5f36ba746451"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a5846f4c7b4797e3a038cc1107688af8e7919ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a5846f4c7b4797e3a038cc1107688af8e7919ec", "html_url": "https://github.com/rust-lang/rust/commit/5a5846f4c7b4797e3a038cc1107688af8e7919ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a5846f4c7b4797e3a038cc1107688af8e7919ec/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39a295f52637817ba8584cb9bcebef91fd0a9f4f", "url": "https://api.github.com/repos/rust-lang/rust/commits/39a295f52637817ba8584cb9bcebef91fd0a9f4f", "html_url": "https://github.com/rust-lang/rust/commit/39a295f52637817ba8584cb9bcebef91fd0a9f4f"}], "stats": {"total": 30, "additions": 18, "deletions": 12}, "files": [{"sha": "4b5ab03df4327a9df7af2cf74f851ab000c913f8", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/5a5846f4c7b4797e3a038cc1107688af8e7919ec/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a5846f4c7b4797e3a038cc1107688af8e7919ec/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=5a5846f4c7b4797e3a038cc1107688af8e7919ec", "patch": "@@ -1506,18 +1506,24 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n         pat.walk(&mut |pat| {\n             debug!(\"resolve_pattern pat={:?} node={:?}\", pat, pat.kind);\n             match pat.kind {\n-                // In tuple struct patterns ignore the invalid `ident @ ...`.\n-                // It will be handled as an error by the AST lowering.\n-                PatKind::Ident(bmode, ident, ref sub)\n-                    if !(is_tuple_struct_pat && sub.as_ref().filter(|p| p.is_rest()).is_some()) =>\n-                {\n-                    // First try to resolve the identifier as some existing entity,\n-                    // then fall back to a fresh binding.\n-                    let has_sub = sub.is_some();\n-                    let res = self\n-                        .try_resolve_as_non_binding(pat_src, pat, bmode, ident, has_sub)\n-                        .unwrap_or_else(|| self.fresh_binding(ident, pat.id, pat_src, bindings));\n-                    self.r.record_partial_res(pat.id, PartialRes::new(res));\n+                PatKind::Ident(bmode, ident, ref sub) => {\n+                    if is_tuple_struct_pat && sub.as_ref().filter(|p| p.is_rest()).is_some() {\n+                        // In tuple struct patterns ignore the invalid `ident @ ...`.\n+                        // It will be handled as an error by the AST lowering.\n+                        self.r\n+                            .session\n+                            .delay_span_bug(ident.span, \"ident in tuple pattern is invalid\");\n+                    } else {\n+                        // First try to resolve the identifier as some existing entity,\n+                        // then fall back to a fresh binding.\n+                        let has_sub = sub.is_some();\n+                        let res = self\n+                            .try_resolve_as_non_binding(pat_src, pat, bmode, ident, has_sub)\n+                            .unwrap_or_else(|| {\n+                                self.fresh_binding(ident, pat.id, pat_src, bindings)\n+                            });\n+                        self.r.record_partial_res(pat.id, PartialRes::new(res));\n+                    }\n                 }\n                 PatKind::TupleStruct(ref path, ..) => {\n                     self.smart_resolve_path(pat.id, None, path, PathSource::TupleStruct(pat.span));"}]}