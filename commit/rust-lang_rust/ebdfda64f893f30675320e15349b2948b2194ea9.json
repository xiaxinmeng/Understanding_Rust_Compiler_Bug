{"sha": "ebdfda64f893f30675320e15349b2948b2194ea9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViZGZkYTY0Zjg5M2YzMDY3NTMyMGUxNTM0OWIyOTQ4YjIxOTRlYTk=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-10-17T13:58:52Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-10-19T12:31:35Z"}, "message": "convert `FnDef` to `TypeOf`, which is more general", "tree": {"sha": "01ed8d875298aaa3541c09b00272fec7a08f1168", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/01ed8d875298aaa3541c09b00272fec7a08f1168"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ebdfda64f893f30675320e15349b2948b2194ea9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ebdfda64f893f30675320e15349b2948b2194ea9", "html_url": "https://github.com/rust-lang/rust/commit/ebdfda64f893f30675320e15349b2948b2194ea9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ebdfda64f893f30675320e15349b2948b2194ea9/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd93741bd34071faa74dc3c7de862ce289378cba", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd93741bd34071faa74dc3c7de862ce289378cba", "html_url": "https://github.com/rust-lang/rust/commit/bd93741bd34071faa74dc3c7de862ce289378cba"}], "stats": {"total": 23, "additions": 16, "deletions": 7}, "files": [{"sha": "4c3e084af4d7d9b7c64550efff2a7cf8c9aaccb7", "filename": "src/librustc/ich/impls_mir.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebdfda64f893f30675320e15349b2948b2194ea9/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebdfda64f893f30675320e15349b2948b2194ea9/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_mir.rs?ref=ebdfda64f893f30675320e15349b2948b2194ea9", "patch": "@@ -597,7 +597,7 @@ impl<'a, 'gcx> HashStable<StableHashingContext<'a>> for mir::UserTypeAnnotation<\n             mir::UserTypeAnnotation::Ty(ref ty) => {\n                 ty.hash_stable(hcx, hasher);\n             }\n-            mir::UserTypeAnnotation::FnDef(ref def_id, ref substs) => {\n+            mir::UserTypeAnnotation::TypeOf(ref def_id, ref substs) => {\n                 def_id.hash_stable(hcx, hasher);\n                 substs.hash_stable(hcx, hasher);\n             }"}, {"sha": "8dcb14485f572c8d34181407ce721d5d90f936fb", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ebdfda64f893f30675320e15349b2948b2194ea9/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebdfda64f893f30675320e15349b2948b2194ea9/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=ebdfda64f893f30675320e15349b2948b2194ea9", "patch": "@@ -2425,14 +2425,21 @@ pub struct Constant<'tcx> {\n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n pub enum UserTypeAnnotation<'tcx> {\n     Ty(CanonicalTy<'tcx>),\n-    FnDef(DefId, CanonicalUserSubsts<'tcx>),\n+\n+    /// The canonical type is the result of `type_of(def_id)` with the\n+    /// given substitutions applied.\n+    TypeOf(DefId, CanonicalUserSubsts<'tcx>),\n+\n+    /// The canonical type is the given ADT with the given\n+    /// substitutions applied (in this case, `user_self_ty` had better\n+    /// be `None`).\n     AdtDef(&'tcx AdtDef, CanonicalUserSubsts<'tcx>),\n }\n \n EnumTypeFoldableImpl! {\n     impl<'tcx> TypeFoldable<'tcx> for UserTypeAnnotation<'tcx> {\n         (UserTypeAnnotation::Ty)(ty),\n-        (UserTypeAnnotation::FnDef)(def, substs),\n+        (UserTypeAnnotation::TypeOf)(def, substs),\n         (UserTypeAnnotation::AdtDef)(def, substs),\n     }\n }"}, {"sha": "2ccfe6a73a28778185ec648e419b174df0fe1a14", "filename": "src/librustc_mir/borrow_check/nll/type_check/relate_tys.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ebdfda64f893f30675320e15349b2948b2194ea9/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Frelate_tys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebdfda64f893f30675320e15349b2948b2194ea9/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Frelate_tys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Frelate_tys.rs?ref=ebdfda64f893f30675320e15349b2948b2194ea9", "patch": "@@ -90,15 +90,17 @@ pub(super) fn relate_type_and_user_type<'tcx>(\n             type_relating.relate(&ty, &a)?;\n             Ok(ty)\n         }\n-        UserTypeAnnotation::FnDef(def_id, canonical_substs) => {\n+        UserTypeAnnotation::TypeOf(def_id, canonical_substs) => {\n             let (\n                 UserSubsts {\n                     substs,\n                     user_self_ty,\n                 },\n                 _,\n             ) = infcx.instantiate_canonical_with_fresh_inference_vars(DUMMY_SP, &canonical_substs);\n-            let ty = infcx.tcx.mk_fn_def(def_id, substs);\n+\n+            let ty = infcx.tcx.type_of(def_id);\n+            let ty = ty.subst(infcx.tcx, substs);\n \n             type_relating.relate(&ty, &a)?;\n "}, {"sha": "621e0d1b10cf5cd355e118f5c124e893d210af4d", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebdfda64f893f30675320e15349b2948b2194ea9/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebdfda64f893f30675320e15349b2948b2194ea9/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=ebdfda64f893f30675320e15349b2948b2194ea9", "patch": "@@ -772,7 +772,7 @@ fn user_substs_applied_to_def(\n         Def::Method(_) |\n         Def::StructCtor(_, CtorKind::Fn) |\n         Def::VariantCtor(_, CtorKind::Fn) =>\n-            Some(UserTypeAnnotation::FnDef(def.def_id(), cx.tables().user_substs(hir_id)?)),\n+            Some(UserTypeAnnotation::TypeOf(def.def_id(), cx.tables().user_substs(hir_id)?)),\n \n         Def::Const(_def_id) |\n         Def::AssociatedConst(_def_id) =>"}, {"sha": "fa5f2be62b80e11e784870cb1caa88d151a07200", "filename": "src/librustc_mir/hair/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebdfda64f893f30675320e15349b2948b2194ea9/src%2Flibrustc_mir%2Fhair%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebdfda64f893f30675320e15349b2948b2194ea9/src%2Flibrustc_mir%2Fhair%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Futil.rs?ref=ebdfda64f893f30675320e15349b2948b2194ea9", "patch": "@@ -36,7 +36,7 @@ crate trait UserAnnotatedTyHelpers<'gcx: 'tcx, 'tcx> {\n         let user_substs = self.tables().user_substs(hir_id)?;\n         match &self.tables().node_id_to_type(hir_id).sty {\n             ty::Adt(adt_def, _) => Some(UserTypeAnnotation::AdtDef(adt_def, user_substs)),\n-            ty::FnDef(def_id, _) => Some(UserTypeAnnotation::FnDef(*def_id, user_substs)),\n+            ty::FnDef(def_id, _) => Some(UserTypeAnnotation::TypeOf(*def_id, user_substs)),\n             sty => bug!(\n                 \"sty: {:?} should not have user-substs {:?} recorded \",\n                 sty,"}]}