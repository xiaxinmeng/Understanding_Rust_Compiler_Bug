{"sha": "92d2ec4d32c7f7722569b1463cba31c6402f7513", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyZDJlYzRkMzJjN2Y3NzIyNTY5YjE0NjNjYmEzMWM2NDAyZjc1MTM=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-05-03T05:44:03Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-05-09T00:03:58Z"}, "message": "libstd: Remove mutable fields from flatpipes and io_util", "tree": {"sha": "2b8ecd8dca5e50fae7b8142a5c918181b8c80c18", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b8ecd8dca5e50fae7b8142a5c918181b8c80c18"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/92d2ec4d32c7f7722569b1463cba31c6402f7513", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/92d2ec4d32c7f7722569b1463cba31c6402f7513", "html_url": "https://github.com/rust-lang/rust/commit/92d2ec4d32c7f7722569b1463cba31c6402f7513", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/92d2ec4d32c7f7722569b1463cba31c6402f7513/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da2ac908126ec52e60e621416ce84284e7b77e51", "url": "https://api.github.com/repos/rust-lang/rust/commits/da2ac908126ec52e60e621416ce84284e7b77e51", "html_url": "https://github.com/rust-lang/rust/commit/da2ac908126ec52e60e621416ce84284e7b77e51"}], "stats": {"total": 28, "additions": 15, "deletions": 13}, "files": [{"sha": "b091a951af17873567094994a0d3d17b484c2ffd", "filename": "src/libstd/flatpipes.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/92d2ec4d32c7f7722569b1463cba31c6402f7513/src%2Flibstd%2Fflatpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92d2ec4d32c7f7722569b1463cba31c6402f7513/src%2Flibstd%2Fflatpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fflatpipes.rs?ref=92d2ec4d32c7f7722569b1463cba31c6402f7513", "patch": "@@ -558,9 +558,11 @@ pub mod bytepipes {\n         }\n     }\n \n+    // XXX: Remove `@mut` when this module is ported to the new I/O traits,\n+    // which use `&mut self` properly.\n     pub struct PipeBytePort {\n         port: comm::Port<~[u8]>,\n-        mut buf: ~[u8]\n+        buf: @mut ~[u8]\n     }\n \n     pub struct PipeByteChan {\n@@ -569,13 +571,13 @@ pub mod bytepipes {\n \n     impl BytePort for PipeBytePort {\n         fn try_recv(&self, count: uint) -> Option<~[u8]> {\n-            if vec::uniq_len(&const self.buf) >= count {\n-                let mut bytes = ::core::util::replace(&mut self.buf, ~[]);\n-                self.buf = bytes.slice(count, bytes.len()).to_owned();\n+            if vec::uniq_len(&const *self.buf) >= count {\n+                let mut bytes = ::core::util::replace(&mut *self.buf, ~[]);\n+                *self.buf = bytes.slice(count, bytes.len()).to_owned();\n                 bytes.truncate(count);\n                 return Some(bytes);\n-            } else if vec::uniq_len(&const self.buf) > 0 {\n-                let mut bytes = ::core::util::replace(&mut self.buf, ~[]);\n+            } else if vec::uniq_len(&const *self.buf) > 0 {\n+                let mut bytes = ::core::util::replace(&mut *self.buf, ~[]);\n                 assert!(count > bytes.len());\n                 match self.try_recv(count - bytes.len()) {\n                     Some(rest) => {\n@@ -584,11 +586,11 @@ pub mod bytepipes {\n                     }\n                     None => return None\n                 }\n-            } else if vec::uniq_len(&const self.buf) == 0 {\n+            } else if vec::uniq_len(&const *self.buf) == 0 {\n                 match self.port.try_recv() {\n                     Some(buf) => {\n                         assert!(!buf.is_empty());\n-                        self.buf = buf;\n+                        *self.buf = buf;\n                         return self.try_recv(count);\n                     }\n                     None => return None\n@@ -609,7 +611,7 @@ pub mod bytepipes {\n         fn new(p: Port<~[u8]>) -> PipeBytePort {\n             PipeBytePort {\n                 port: p,\n-                buf: ~[]\n+                buf: @mut ~[]\n             }\n         }\n     }"}, {"sha": "6ed626202b7e20e70c07299f263eb0ba2e325f37", "filename": "src/libstd/io_util.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/92d2ec4d32c7f7722569b1463cba31c6402f7513/src%2Flibstd%2Fio_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92d2ec4d32c7f7722569b1463cba31c6402f7513/src%2Flibstd%2Fio_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio_util.rs?ref=92d2ec4d32c7f7722569b1463cba31c6402f7513", "patch": "@@ -13,14 +13,14 @@ use core::io;\n \n pub struct BufReader {\n     buf: ~[u8],\n-    mut pos: uint\n+    pos: @mut uint\n }\n \n pub impl BufReader {\n     pub fn new(v: ~[u8]) -> BufReader {\n         BufReader {\n             buf: v,\n-            pos: 0\n+            pos: @mut 0\n         }\n     }\n \n@@ -29,13 +29,13 @@ pub impl BufReader {\n         // I can't get the borrowing to work correctly\n         let bytes_reader = BytesReader {\n             bytes: ::core::util::id::<&[u8]>(self.buf),\n-            pos: self.pos\n+            pos: *self.pos\n         };\n \n         let res = f(&bytes_reader);\n \n         // FIXME #4429: This isn't correct if f fails\n-        self.pos = bytes_reader.pos;\n+        *self.pos = bytes_reader.pos;\n \n         return res;\n     }"}]}