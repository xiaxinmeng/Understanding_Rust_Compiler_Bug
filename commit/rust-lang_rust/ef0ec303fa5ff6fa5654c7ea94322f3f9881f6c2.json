{"sha": "ef0ec303fa5ff6fa5654c7ea94322f3f9881f6c2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmMGVjMzAzZmE1ZmY2ZmE1NjU0YzdlYTk0MzIyZjNmOTg4MWY2YzI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-24T15:24:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-24T15:24:38Z"}, "message": "Auto merge of #85596 - scottmcm:more-on-unimplemented, r=estebank\n\nExtend `rustc_on_implemented` to improve more `?` error messages\n\n`_Self` could match the generic definition; this adds that functionality for matching the generic definition of type parameters too.\n\nYour advice welcome on the wording of all these messages, and which things belong in the message/label/note.\n\nr? `@estebank`", "tree": {"sha": "b9c0ed22955435dd28e84d38b0ac443dbe7dacd2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9c0ed22955435dd28e84d38b0ac443dbe7dacd2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef0ec303fa5ff6fa5654c7ea94322f3f9881f6c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef0ec303fa5ff6fa5654c7ea94322f3f9881f6c2", "html_url": "https://github.com/rust-lang/rust/commit/ef0ec303fa5ff6fa5654c7ea94322f3f9881f6c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef0ec303fa5ff6fa5654c7ea94322f3f9881f6c2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf24e6ba00e8a74103fc69a8de25ff955f910ba3", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf24e6ba00e8a74103fc69a8de25ff955f910ba3", "html_url": "https://github.com/rust-lang/rust/commit/bf24e6ba00e8a74103fc69a8de25ff955f910ba3"}, {"sha": "8be67998a1f488b386d2982b3ddeec65099ab14c", "url": "https://api.github.com/repos/rust-lang/rust/commits/8be67998a1f488b386d2982b3ddeec65099ab14c", "html_url": "https://github.com/rust-lang/rust/commit/8be67998a1f488b386d2982b3ddeec65099ab14c"}], "stats": {"total": 62, "additions": 47, "deletions": 15}, "files": [{"sha": "0ca0245a203d1ef0f90c9edc2ce2da20aadaff0b", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/on_unimplemented.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ef0ec303fa5ff6fa5654c7ea94322f3f9881f6c2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef0ec303fa5ff6fa5654c7ea94322f3f9881f6c2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs?ref=ef0ec303fa5ff6fa5654c7ea94322f3f9881f6c2", "patch": "@@ -186,6 +186,15 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 };\n                 let name = param.name;\n                 flags.push((name, Some(value)));\n+\n+                if let GenericParamDefKind::Type { .. } = param.kind {\n+                    let param_ty = trait_ref.substs[param.index as usize].expect_ty();\n+                    if let Some(def) = param_ty.ty_adt_def() {\n+                        // We also want to be able to select the parameter's\n+                        // original signature with no type arguments resolved\n+                        flags.push((name, Some(self.tcx.type_of(def.did).to_string())));\n+                    }\n+                }\n             }\n \n             if let Some(true) = self_ty.ty_adt_def().map(|def| def.did.is_local()) {"}, {"sha": "1d9bc452618e2db93b5c551da8fe3e24d1181d7f", "filename": "library/core/src/ops/try_trait.rs", "status": "modified", "additions": 27, "deletions": 2, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/ef0ec303fa5ff6fa5654c7ea94322f3f9881f6c2/library%2Fcore%2Fsrc%2Fops%2Ftry_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef0ec303fa5ff6fa5654c7ea94322f3f9881f6c2/library%2Fcore%2Fsrc%2Fops%2Ftry_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Ftry_trait.rs?ref=ef0ec303fa5ff6fa5654c7ea94322f3f9881f6c2", "patch": "@@ -254,6 +254,18 @@ pub trait Try: FromResidual {\n         label = \"this `?` produces `{R}`, which is incompatible with `{Self}`\",\n         enclosing_scope = \"this function returns a `Result`\"\n     ),\n+    on(\n+        all(\n+            from_method = \"from_residual\",\n+            from_desugaring = \"QuestionMark\",\n+            _Self = \"std::option::Option<T>\",\n+            R = \"std::result::Result<T, E>\",\n+        ),\n+        message = \"the `?` operator can only be used on `Option`s, not `Result`s, \\\n+            in {ItemContext} that returns `Option`\",\n+        label = \"use `.ok()?` if you want to discard the `{R}` error information\",\n+        enclosing_scope = \"this function returns an `Option`\"\n+    ),\n     on(\n         all(\n             from_method = \"from_residual\",\n@@ -272,13 +284,26 @@ pub trait Try: FromResidual {\n             from_method = \"from_residual\",\n             from_desugaring = \"QuestionMark\",\n             _Self = \"std::ops::ControlFlow<B, C>\",\n+            R = \"std::ops::ControlFlow<B, C>\",\n         ),\n-        message = \"the `?` operator can only be used on `ControlFlow<B, _>`s \\\n-            in {ItemContext} that returns `ControlFlow<B, _>`\",\n+        message = \"the `?` operator in {ItemContext} that returns `ControlFlow<B, _>` \\\n+            can only be used on other `ControlFlow<B, _>`s (with the same Break type)\",\n         label = \"this `?` produces `{R}`, which is incompatible with `{Self}`\",\n         enclosing_scope = \"this function returns a `ControlFlow`\",\n         note = \"unlike `Result`, there's no `From`-conversion performed for `ControlFlow`\"\n     ),\n+    on(\n+        all(\n+            from_method = \"from_residual\",\n+            from_desugaring = \"QuestionMark\",\n+            _Self = \"std::ops::ControlFlow<B, C>\",\n+            // `R` is not a `ControlFlow`, as that case was matched previously\n+        ),\n+        message = \"the `?` operator can only be used on `ControlFlow`s \\\n+            in {ItemContext} that returns `ControlFlow`\",\n+        label = \"this `?` produces `{R}`, which is incompatible with `{Self}`\",\n+        enclosing_scope = \"this function returns a `ControlFlow`\",\n+    ),\n     on(\n         all(\n             from_method = \"from_residual\","}, {"sha": "385f5510fb414ea79aea2857d339dcceedaafb56", "filename": "src/test/ui/try-trait/bad-interconversion.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ef0ec303fa5ff6fa5654c7ea94322f3f9881f6c2/src%2Ftest%2Fui%2Ftry-trait%2Fbad-interconversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef0ec303fa5ff6fa5654c7ea94322f3f9881f6c2/src%2Ftest%2Fui%2Ftry-trait%2Fbad-interconversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-trait%2Fbad-interconversion.rs?ref=ef0ec303fa5ff6fa5654c7ea94322f3f9881f6c2", "patch": "@@ -20,7 +20,7 @@ fn control_flow_to_result() -> Result<u64, String> {\n \n fn result_to_option() -> Option<u16> {\n     Some(Err(\"hello\")?)\n-    //~^ ERROR the `?` operator can only be used on `Option`s in a function that returns `Option`\n+    //~^ ERROR the `?` operator can only be used on `Option`s, not `Result`s, in a function that returns `Option`\n }\n \n fn control_flow_to_option() -> Option<u64> {\n@@ -30,18 +30,18 @@ fn control_flow_to_option() -> Option<u64> {\n \n fn result_to_control_flow() -> ControlFlow<String> {\n     ControlFlow::Continue(Err(\"hello\")?)\n-    //~^ ERROR the `?` operator can only be used on `ControlFlow<B, _>`s in a function that returns `ControlFlow<B, _>`\n+    //~^ ERROR the `?` operator can only be used on `ControlFlow`s in a function that returns `ControlFlow`\n }\n \n fn option_to_control_flow() -> ControlFlow<u64> {\n     Some(3)?;\n-    //~^ ERROR the `?` operator can only be used on `ControlFlow<B, _>`s in a function that returns `ControlFlow<B, _>`\n+    //~^ ERROR the `?` operator can only be used on `ControlFlow`s in a function that returns `ControlFlow`\n     ControlFlow::Break(10)\n }\n \n fn control_flow_to_control_flow() -> ControlFlow<i64> {\n     ControlFlow::Break(4_u8)?;\n-    //~^ ERROR the `?` operator can only be used on `ControlFlow<B, _>`s in a function that returns `ControlFlow<B, _>`\n+    //~^ ERROR the `?` operator in a function that returns `ControlFlow<B, _>` can only be used on other `ControlFlow<B, _>`s\n     ControlFlow::Continue(())\n }\n "}, {"sha": "f5b315c25193377cf0987c90ff30a65e92e41be1", "filename": "src/test/ui/try-trait/bad-interconversion.stderr", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ef0ec303fa5ff6fa5654c7ea94322f3f9881f6c2/src%2Ftest%2Fui%2Ftry-trait%2Fbad-interconversion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef0ec303fa5ff6fa5654c7ea94322f3f9881f6c2/src%2Ftest%2Fui%2Ftry-trait%2Fbad-interconversion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-trait%2Fbad-interconversion.stderr?ref=ef0ec303fa5ff6fa5654c7ea94322f3f9881f6c2", "patch": "@@ -40,12 +40,12 @@ LL | | }\n    = help: the trait `FromResidual<ControlFlow<{integer}, Infallible>>` is not implemented for `Result<u64, String>`\n    = note: required by `from_residual`\n \n-error[E0277]: the `?` operator can only be used on `Option`s in a function that returns `Option`\n+error[E0277]: the `?` operator can only be used on `Option`s, not `Result`s, in a function that returns `Option`\n   --> $DIR/bad-interconversion.rs:22:22\n    |\n LL | / fn result_to_option() -> Option<u16> {\n LL | |     Some(Err(\"hello\")?)\n-   | |                      ^ this `?` produces `Result<Infallible, &str>`, which is incompatible with `Option<u16>`\n+   | |                      ^ use `.ok()?` if you want to discard the `Result<Infallible, &str>` error information\n LL | |\n LL | | }\n    | |_- this function returns an `Option`\n@@ -66,7 +66,7 @@ LL | | }\n    = help: the trait `FromResidual<ControlFlow<{integer}, Infallible>>` is not implemented for `Option<u64>`\n    = note: required by `from_residual`\n \n-error[E0277]: the `?` operator can only be used on `ControlFlow<B, _>`s in a function that returns `ControlFlow<B, _>`\n+error[E0277]: the `?` operator can only be used on `ControlFlow`s in a function that returns `ControlFlow`\n   --> $DIR/bad-interconversion.rs:32:39\n    |\n LL | / fn result_to_control_flow() -> ControlFlow<String> {\n@@ -77,10 +77,9 @@ LL | | }\n    | |_- this function returns a `ControlFlow`\n    |\n    = help: the trait `FromResidual<Result<Infallible, &str>>` is not implemented for `ControlFlow<String>`\n-   = note: unlike `Result`, there's no `From`-conversion performed for `ControlFlow`\n    = note: required by `from_residual`\n \n-error[E0277]: the `?` operator can only be used on `ControlFlow<B, _>`s in a function that returns `ControlFlow<B, _>`\n+error[E0277]: the `?` operator can only be used on `ControlFlow`s in a function that returns `ControlFlow`\n   --> $DIR/bad-interconversion.rs:37:12\n    |\n LL | / fn option_to_control_flow() -> ControlFlow<u64> {\n@@ -92,10 +91,9 @@ LL | | }\n    | |_- this function returns a `ControlFlow`\n    |\n    = help: the trait `FromResidual<Option<Infallible>>` is not implemented for `ControlFlow<u64>`\n-   = note: unlike `Result`, there's no `From`-conversion performed for `ControlFlow`\n    = note: required by `from_residual`\n \n-error[E0277]: the `?` operator can only be used on `ControlFlow<B, _>`s in a function that returns `ControlFlow<B, _>`\n+error[E0277]: the `?` operator in a function that returns `ControlFlow<B, _>` can only be used on other `ControlFlow<B, _>`s (with the same Break type)\n   --> $DIR/bad-interconversion.rs:43:29\n    |\n LL | / fn control_flow_to_control_flow() -> ControlFlow<i64> {"}, {"sha": "9f7d80d4f23cdc1bdb834e1b023d98f591bc9d2b", "filename": "src/test/ui/try-trait/option-to-result.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ef0ec303fa5ff6fa5654c7ea94322f3f9881f6c2/src%2Ftest%2Fui%2Ftry-trait%2Foption-to-result.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef0ec303fa5ff6fa5654c7ea94322f3f9881f6c2/src%2Ftest%2Fui%2Ftry-trait%2Foption-to-result.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-trait%2Foption-to-result.stderr?ref=ef0ec303fa5ff6fa5654c7ea94322f3f9881f6c2", "patch": "@@ -12,13 +12,13 @@ LL | | }\n    = help: the trait `FromResidual<Option<Infallible>>` is not implemented for `Result<(), ()>`\n    = note: required by `from_residual`\n \n-error[E0277]: the `?` operator can only be used on `Option`s in a function that returns `Option`\n+error[E0277]: the `?` operator can only be used on `Option`s, not `Result`s, in a function that returns `Option`\n   --> $DIR/option-to-result.rs:11:6\n    |\n LL | / fn test_option() -> Option<i32>{\n LL | |     let a:Result<i32, i32> = Ok(5);\n LL | |     a?;\n-   | |      ^ this `?` produces `Result<Infallible, i32>`, which is incompatible with `Option<i32>`\n+   | |      ^ use `.ok()?` if you want to discard the `Result<Infallible, i32>` error information\n LL | |     Some(5)\n LL | | }\n    | |_- this function returns an `Option`"}]}