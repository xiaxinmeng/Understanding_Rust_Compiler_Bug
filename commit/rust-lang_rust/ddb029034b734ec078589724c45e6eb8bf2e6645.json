{"sha": "ddb029034b734ec078589724c45e6eb8bf2e6645", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkYjAyOTAzNGI3MzRlYzA3ODU4OTcyNGM0NWU2ZWI4YmYyZTY2NDU=", "commit": {"author": {"name": "Alexis Beingessner", "email": "a.beingessner@gmail.com", "date": "2015-07-30T00:15:11Z"}, "committer": {"name": "Alexis Beingessner", "email": "a.beingessner@gmail.com", "date": "2015-07-30T00:19:42Z"}, "message": "fix example code", "tree": {"sha": "33e8f54ae29961246991a889c2056aa8d8f294f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/33e8f54ae29961246991a889c2056aa8d8f294f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ddb029034b734ec078589724c45e6eb8bf2e6645", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ddb029034b734ec078589724c45e6eb8bf2e6645", "html_url": "https://github.com/rust-lang/rust/commit/ddb029034b734ec078589724c45e6eb8bf2e6645", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ddb029034b734ec078589724c45e6eb8bf2e6645/comments", "author": {"login": "Gankra", "id": 1136864, "node_id": "MDQ6VXNlcjExMzY4NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1136864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gankra", "html_url": "https://github.com/Gankra", "followers_url": "https://api.github.com/users/Gankra/followers", "following_url": "https://api.github.com/users/Gankra/following{/other_user}", "gists_url": "https://api.github.com/users/Gankra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gankra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gankra/subscriptions", "organizations_url": "https://api.github.com/users/Gankra/orgs", "repos_url": "https://api.github.com/users/Gankra/repos", "events_url": "https://api.github.com/users/Gankra/events{/privacy}", "received_events_url": "https://api.github.com/users/Gankra/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Gankra", "id": 1136864, "node_id": "MDQ6VXNlcjExMzY4NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1136864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gankra", "html_url": "https://github.com/Gankra", "followers_url": "https://api.github.com/users/Gankra/followers", "following_url": "https://api.github.com/users/Gankra/following{/other_user}", "gists_url": "https://api.github.com/users/Gankra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gankra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gankra/subscriptions", "organizations_url": "https://api.github.com/users/Gankra/orgs", "repos_url": "https://api.github.com/users/Gankra/repos", "events_url": "https://api.github.com/users/Gankra/events{/privacy}", "received_events_url": "https://api.github.com/users/Gankra/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c48ffa53e7b9aa008bed5ac92a8362c0574172e", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c48ffa53e7b9aa008bed5ac92a8362c0574172e", "html_url": "https://github.com/rust-lang/rust/commit/4c48ffa53e7b9aa008bed5ac92a8362c0574172e"}], "stats": {"total": 16, "additions": 9, "deletions": 7}, "files": [{"sha": "123e2baf8fafd5ac0f5a2150b9bf3df27eafed0b", "filename": "src/doc/tarpl/borrow-splitting.md", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ddb029034b734ec078589724c45e6eb8bf2e6645/src%2Fdoc%2Ftarpl%2Fborrow-splitting.md", "raw_url": "https://github.com/rust-lang/rust/raw/ddb029034b734ec078589724c45e6eb8bf2e6645/src%2Fdoc%2Ftarpl%2Fborrow-splitting.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftarpl%2Fborrow-splitting.md?ref=ddb029034b734ec078589724c45e6eb8bf2e6645", "patch": "@@ -137,6 +137,7 @@ impl<'a, T> Iterator for IterMut<'a, T> {\n Here's a mutable slice:\n \n ```rust\n+# fn main() {}\n use std::mem;\n \n pub struct IterMut<'a, T: 'a>(&'a mut[T]);\n@@ -170,6 +171,7 @@ impl<'a, T> DoubleEndedIterator for IterMut<'a, T> {\n And here's a binary tree:\n \n ```rust\n+# fn main() {}\n use std::collections::VecDeque;\n \n type Link<T> = Option<Box<Node<T>>>;\n@@ -262,7 +264,7 @@ impl<'a, T> Iterator for IterMut<'a, T> {\n }\n \n impl<'a, T> DoubleEndedIterator for IterMut<'a, T> {\n-    fn next(&mut self) -> Option<Self::Item> {\n+    fn next_back(&mut self) -> Option<Self::Item> {\n         loop {\n             match self.0.back_mut().and_then(|node_it| node_it.next_back()) {\n                 Some(State::Elem(elem)) => return Some(elem),"}, {"sha": "c75bf8b11794c2afecca427eba51071f6c0ffad6", "filename": "src/doc/tarpl/dropck.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ddb029034b734ec078589724c45e6eb8bf2e6645/src%2Fdoc%2Ftarpl%2Fdropck.md", "raw_url": "https://github.com/rust-lang/rust/raw/ddb029034b734ec078589724c45e6eb8bf2e6645/src%2Fdoc%2Ftarpl%2Fdropck.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftarpl%2Fdropck.md?ref=ddb029034b734ec078589724c45e6eb8bf2e6645", "patch": "@@ -8,12 +8,12 @@ when we talked about `'a: 'b`, it was ok for `'a` to live *exactly* as long as\n gets dropped at the same time as another, right? This is why we used the\n following desugarring of `let` statements:\n \n-```rust\n+```rust,ignore\n let x;\n let y;\n ```\n \n-```rust\n+```rust,ignore\n {\n     let x;\n     {\n@@ -25,7 +25,7 @@ let y;\n Each creates its own scope, clearly establishing that one drops before the\n other. However, what if we do the following?\n \n-```rust\n+```rust,ignore\n let (x, y) = (vec![], vec![]);\n ```\n "}, {"sha": "343de99f08ad0270427d3dadc9c0bfdf3e1466f1", "filename": "src/doc/tarpl/leaking.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ddb029034b734ec078589724c45e6eb8bf2e6645/src%2Fdoc%2Ftarpl%2Fleaking.md", "raw_url": "https://github.com/rust-lang/rust/raw/ddb029034b734ec078589724c45e6eb8bf2e6645/src%2Fdoc%2Ftarpl%2Fleaking.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftarpl%2Fleaking.md?ref=ddb029034b734ec078589724c45e6eb8bf2e6645", "patch": "@@ -188,7 +188,7 @@ data on their parent's stack without any synchronization over that data by\n ensuring the parent joins the thread before any of the shared data goes out\n of scope.\n \n-```rust\n+```rust,ignore\n pub fn scoped<'a, F>(f: F) -> JoinGuard<'a>\n     where F: FnOnce() + Send + 'a\n ```"}, {"sha": "909308397d717bff7ff172c7d3aa5d477fdc3e2c", "filename": "src/doc/tarpl/safe-unsafe-meaning.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ddb029034b734ec078589724c45e6eb8bf2e6645/src%2Fdoc%2Ftarpl%2Fsafe-unsafe-meaning.md", "raw_url": "https://github.com/rust-lang/rust/raw/ddb029034b734ec078589724c45e6eb8bf2e6645/src%2Fdoc%2Ftarpl%2Fsafe-unsafe-meaning.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftarpl%2Fsafe-unsafe-meaning.md?ref=ddb029034b734ec078589724c45e6eb8bf2e6645", "patch": "@@ -114,7 +114,7 @@ implementation:\n ```rust\n # use std::cmp::Ordering;\n # struct MyType;\n-# pub unsafe trait UnsafeOrd { fn cmp(&self, other: &Self) -> Ordering; }\n+# unsafe trait UnsafeOrd { fn cmp(&self, other: &Self) -> Ordering; }\n unsafe impl UnsafeOrd for MyType {\n     fn cmp(&self, other: &Self) -> Ordering {\n         Ordering::Equal"}, {"sha": "3df63d5249c55efbe4fd3b2724e5dd208d5c3e18", "filename": "src/doc/tarpl/vec-layout.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ddb029034b734ec078589724c45e6eb8bf2e6645/src%2Fdoc%2Ftarpl%2Fvec-layout.md", "raw_url": "https://github.com/rust-lang/rust/raw/ddb029034b734ec078589724c45e6eb8bf2e6645/src%2Fdoc%2Ftarpl%2Fvec-layout.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftarpl%2Fvec-layout.md?ref=ddb029034b734ec078589724c45e6eb8bf2e6645", "patch": "@@ -12,7 +12,6 @@ pub struct Vec<T> {\n     cap: usize,\n     len: usize,\n }\n-\n # fn main() {}\n ```\n \n@@ -69,6 +68,7 @@ impl<T> Deref for Unique<T> {\n         unsafe { mem::transmute(&self.ptr) }\n     }\n }\n+# fn main() {}\n ```\n \n Unfortunately the mechanism for stating that your value is non-zero is"}]}