{"sha": "e42ab29517971d91d40da401da0bdff088d64d13", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0MmFiMjk1MTc5NzFkOTFkNDBkYTQwMWRhMGJkZmYwODhkNjRkMTM=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-06-27T13:57:52Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-06-27T13:57:52Z"}, "message": "Implement some UnOp's", "tree": {"sha": "ee1f87ec0c63ca314aac56ce4b50d5e9a82edbd8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee1f87ec0c63ca314aac56ce4b50d5e9a82edbd8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e42ab29517971d91d40da401da0bdff088d64d13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e42ab29517971d91d40da401da0bdff088d64d13", "html_url": "https://github.com/rust-lang/rust/commit/e42ab29517971d91d40da401da0bdff088d64d13", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e42ab29517971d91d40da401da0bdff088d64d13/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "518aa42b496f2ac75b327fc406414b3ddb2e4932", "url": "https://api.github.com/repos/rust-lang/rust/commits/518aa42b496f2ac75b327fc406414b3ddb2e4932", "html_url": "https://github.com/rust-lang/rust/commit/518aa42b496f2ac75b327fc406414b3ddb2e4932"}], "stats": {"total": 19, "additions": 15, "deletions": 4}, "files": [{"sha": "af486ad013c5d94bf7c40bf39d7afce9c6e0b1db", "filename": "src/base.rs", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e42ab29517971d91d40da401da0bdff088d64d13/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e42ab29517971d91d40da401da0bdff088d64d13/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=e42ab29517971d91d40da401da0bdff088d64d13", "patch": "@@ -352,13 +352,11 @@ fn trans_stmt<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx>, stmt: &Statement<'tcx\n                         TypeVariants::TyInt(_) => {\n                             trans_int_binop(fx, *bin_op, lhs, rhs, ty, true, false)\n                         }\n-                        _ => unimplemented!(),\n+                        _ => unimplemented!(\"bin op {:?} for {:?}\", bin_op, ty),\n                     };\n                     lval.write_cvalue(fx, res);\n                 }\n                 Rvalue::CheckedBinaryOp(bin_op, lhs, rhs) => {\n-                    // TODO correctly write output tuple\n-\n                     let ty = fx.monomorphize(&lhs.ty(&fx.mir.local_decls, fx.tcx));\n                     let lhs = trans_operand(fx, lhs).load_value(fx);\n                     let rhs = trans_operand(fx, rhs).load_value(fx);\n@@ -370,11 +368,24 @@ fn trans_stmt<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx>, stmt: &Statement<'tcx\n                         TypeVariants::TyInt(_) => {\n                             trans_int_binop(fx, *bin_op, lhs, rhs, ty, true, true)\n                         }\n-                        _ => unimplemented!(),\n+                        _ => unimplemented!(\"checked bin op {:?} for {:?}\", bin_op, ty),\n                     };\n                     lval.write_cvalue(fx, res);\n                     unimplemented!(\"checked bin op {:?}\", bin_op);\n                 }\n+                Rvalue::UnaryOp(un_op, operand) => {\n+                    let ty = fx.monomorphize(&operand.ty(&fx.mir.local_decls, fx.tcx));\n+                    let layout = fx.layout_of(ty);\n+                    let val = trans_operand(fx, operand).load_value(fx);\n+                    let res = match un_op {\n+                        UnOp::Not => fx.bcx.ins().bnot(val),\n+                        UnOp::Neg => match ty.sty {\n+                            TypeVariants::TyFloat(_) => fx.bcx.ins().fneg(val),\n+                            ref ty => unimplemented!(\"un op Neg for {:?}\", ty),\n+                        }\n+                    };\n+                    lval.write_cvalue(fx, CValue::ByVal(res, layout));\n+                }\n                 Rvalue::Cast(CastKind::ReifyFnPointer, operand, ty) => {\n                     let operand = trans_operand(fx, operand);\n                     let layout = fx.layout_of(ty);"}]}