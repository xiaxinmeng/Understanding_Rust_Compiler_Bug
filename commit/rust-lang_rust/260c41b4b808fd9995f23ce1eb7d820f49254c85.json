{"sha": "260c41b4b808fd9995f23ce1eb7d820f49254c85", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2MGM0MWI0YjgwOGZkOTk5NWYyM2NlMWViN2Q4MjBmNDkyNTRjODU=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-06-18T14:42:03Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-11-19T00:14:28Z"}, "message": "rustc_trans: do not introspect LLVM aggregate field types.", "tree": {"sha": "a59bd048e170b942de78d36a8b7c5028f0263437", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a59bd048e170b942de78d36a8b7c5028f0263437"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/260c41b4b808fd9995f23ce1eb7d820f49254c85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/260c41b4b808fd9995f23ce1eb7d820f49254c85", "html_url": "https://github.com/rust-lang/rust/commit/260c41b4b808fd9995f23ce1eb7d820f49254c85", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/260c41b4b808fd9995f23ce1eb7d820f49254c85/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8671bef977723bd5983fc3130910d2e5a8b6cd9", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8671bef977723bd5983fc3130910d2e5a8b6cd9", "html_url": "https://github.com/rust-lang/rust/commit/b8671bef977723bd5983fc3130910d2e5a8b6cd9"}], "stats": {"total": 64, "additions": 14, "deletions": 50}, "files": [{"sha": "0f96a22f897ae7bcfaa4e2d3d4f634d586404a67", "filename": "src/librustc_llvm/ffi.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/260c41b4b808fd9995f23ce1eb7d820f49254c85/src%2Flibrustc_llvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/260c41b4b808fd9995f23ce1eb7d820f49254c85/src%2Flibrustc_llvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fffi.rs?ref=260c41b4b808fd9995f23ce1eb7d820f49254c85", "patch": "@@ -575,8 +575,6 @@ extern \"C\" {\n                                    ElementCount: c_uint,\n                                    Packed: Bool)\n                                    -> TypeRef;\n-    pub fn LLVMCountStructElementTypes(StructTy: TypeRef) -> c_uint;\n-    pub fn LLVMGetStructElementTypes(StructTy: TypeRef, Dest: *mut TypeRef);\n     pub fn LLVMIsPackedStruct(StructTy: TypeRef) -> Bool;\n \n     // Operations on array, pointer, and vector types (sequence types)"}, {"sha": "d4289363ecf3856e7f48dab74b5e58da72859d9f", "filename": "src/librustc_trans/mir/constant.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/260c41b4b808fd9995f23ce1eb7d820f49254c85/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/260c41b4b808fd9995f23ce1eb7d820f49254c85/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fconstant.rs?ref=260c41b4b808fd9995f23ce1eb7d820f49254c85", "patch": "@@ -736,20 +736,17 @@ impl<'a, 'tcx> MirConstContext<'a, 'tcx> {\n                         }\n                     }\n                     mir::CastKind::Misc => { // Casts from a fat-ptr.\n-                        let ll_cast_ty = type_of::immediate_type_of(self.ccx, cast_ty);\n-                        let ll_from_ty = type_of::immediate_type_of(self.ccx, operand.ty);\n                         if common::type_is_fat_ptr(self.ccx, operand.ty) {\n-                            let (data_ptr, meta_ptr) = operand.get_fat_ptr(self.ccx);\n+                            let (data_ptr, meta) = operand.get_fat_ptr(self.ccx);\n                             if common::type_is_fat_ptr(self.ccx, cast_ty) {\n-                                let ll_cft = ll_cast_ty.field_types();\n-                                let ll_fft = ll_from_ty.field_types();\n-                                let data_cast = consts::ptrcast(data_ptr, ll_cft[0]);\n-                                assert_eq!(ll_cft[1].kind(), ll_fft[1].kind());\n-                                C_struct(self.ccx, &[data_cast, meta_ptr], false)\n+                                let llcast_ty = type_of::fat_ptr_base_ty(self.ccx, cast_ty);\n+                                let data_cast = consts::ptrcast(data_ptr, llcast_ty);\n+                                C_struct(self.ccx, &[data_cast, meta], false)\n                             } else { // cast to thin-ptr\n                                 // Cast of fat-ptr to thin-ptr is an extraction of data-ptr and\n                                 // pointer-cast of that pointer to desired pointer type.\n-                                consts::ptrcast(data_ptr, ll_cast_ty)\n+                                let llcast_ty = type_of::immediate_type_of(self.ccx, cast_ty);\n+                                consts::ptrcast(data_ptr, llcast_ty)\n                             }\n                         } else {\n                             bug!(\"Unexpected non-fat-pointer operand\")"}, {"sha": "f4285c2ad0ad0668d801002d0763519dd98c23fc", "filename": "src/librustc_trans/mir/operand.rs", "status": "modified", "additions": 2, "deletions": 17, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/260c41b4b808fd9995f23ce1eb7d820f49254c85/src%2Flibrustc_trans%2Fmir%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/260c41b4b808fd9995f23ce1eb7d820f49254c85/src%2Flibrustc_trans%2Fmir%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Foperand.rs?ref=260c41b4b808fd9995f23ce1eb7d820f49254c85", "patch": "@@ -27,6 +27,7 @@ use std::fmt;\n use std::ptr;\n \n use super::{MirContext, LocalRef};\n+use super::constant::Const;\n use super::lvalue::{Alignment, LvalueRef};\n \n /// The representation of a Rust value. The enum variant is in fact\n@@ -84,23 +85,7 @@ impl<'a, 'tcx> OperandRef<'tcx> {\n                    ty: Ty<'tcx>) -> OperandRef<'tcx> {\n         assert!(common::type_is_zero_size(ccx, ty));\n         let llty = type_of::type_of(ccx, ty);\n-        let val = if common::type_is_imm_pair(ccx, ty) {\n-            let layout = ccx.layout_of(ty);\n-            let (ix0, ix1) = if let Layout::Univariant { ref variant, .. } = *layout {\n-                (adt::struct_llfields_index(variant, 0),\n-                adt::struct_llfields_index(variant, 1))\n-            } else {\n-                (0, 1)\n-            };\n-            let fields = llty.field_types();\n-            OperandValue::Pair(C_undef(fields[ix0]), C_undef(fields[ix1]))\n-        } else {\n-            OperandValue::Immediate(C_undef(llty))\n-        };\n-        OperandRef {\n-            val,\n-            ty,\n-        }\n+        Const::new(C_undef(llty), ty).to_operand(ccx)\n     }\n \n     /// Asserts that this operand refers to a scalar and returns"}, {"sha": "d975ed8cda48238ca5a061171d69110ea4fd3eb1", "filename": "src/librustc_trans/mir/rvalue.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/260c41b4b808fd9995f23ce1eb7d820f49254c85/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/260c41b4b808fd9995f23ce1eb7d820f49254c85/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Frvalue.rs?ref=260c41b4b808fd9995f23ce1eb7d820f49254c85", "patch": "@@ -263,19 +263,16 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n                         }\n                     }\n                     mir::CastKind::Misc if common::type_is_fat_ptr(bcx.ccx, operand.ty) => {\n-                        let ll_cast_ty = type_of::immediate_type_of(bcx.ccx, cast_ty);\n-                        let ll_from_ty = type_of::immediate_type_of(bcx.ccx, operand.ty);\n-                        if let OperandValue::Pair(data_ptr, meta_ptr) = operand.val {\n+                        if let OperandValue::Pair(data_ptr, meta) = operand.val {\n                             if common::type_is_fat_ptr(bcx.ccx, cast_ty) {\n-                                let ll_cft = ll_cast_ty.field_types();\n-                                let ll_fft = ll_from_ty.field_types();\n-                                let data_cast = bcx.pointercast(data_ptr, ll_cft[0]);\n-                                assert_eq!(ll_cft[1].kind(), ll_fft[1].kind());\n-                                OperandValue::Pair(data_cast, meta_ptr)\n+                                let llcast_ty = type_of::fat_ptr_base_ty(bcx.ccx, cast_ty);\n+                                let data_cast = bcx.pointercast(data_ptr, llcast_ty);\n+                                OperandValue::Pair(data_cast, meta)\n                             } else { // cast to thin-ptr\n                                 // Cast of fat-ptr to thin-ptr is an extraction of data-ptr and\n                                 // pointer-cast of that pointer to desired pointer type.\n-                                let llval = bcx.pointercast(data_ptr, ll_cast_ty);\n+                                let llcast_ty = type_of::immediate_type_of(bcx.ccx, cast_ty);\n+                                let llval = bcx.pointercast(data_ptr, llcast_ty);\n                                 OperandValue::Immediate(llval)\n                             }\n                         } else {"}, {"sha": "bb8f3f23108ecbf92892ee33393046bb569493d5", "filename": "src/librustc_trans/type_.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/260c41b4b808fd9995f23ce1eb7d820f49254c85/src%2Flibrustc_trans%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/260c41b4b808fd9995f23ce1eb7d820f49254c85/src%2Flibrustc_trans%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftype_.rs?ref=260c41b4b808fd9995f23ce1eb7d820f49254c85", "patch": "@@ -249,19 +249,6 @@ impl Type {\n         }\n     }\n \n-    pub fn field_types(&self) -> Vec<Type> {\n-        unsafe {\n-            let n_elts = llvm::LLVMCountStructElementTypes(self.to_ref()) as usize;\n-            if n_elts == 0 {\n-                return Vec::new();\n-            }\n-            let mut elts = vec![Type { rf: ptr::null_mut() }; n_elts];\n-            llvm::LLVMGetStructElementTypes(self.to_ref(),\n-                                            elts.as_mut_ptr() as *mut TypeRef);\n-            elts\n-        }\n-    }\n-\n     pub fn func_params(&self) -> Vec<Type> {\n         unsafe {\n             let n_args = llvm::LLVMCountParamTypes(self.to_ref()) as usize;"}]}