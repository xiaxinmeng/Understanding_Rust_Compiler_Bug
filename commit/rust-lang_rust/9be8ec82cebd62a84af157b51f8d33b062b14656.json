{"sha": "9be8ec82cebd62a84af157b51f8d33b062b14656", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliZThlYzgyY2ViZDYyYTg0YWYxNTdiNTFmOGQzM2IwNjJiMTQ2NTY=", "commit": {"author": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2015-02-19T20:26:13Z"}, "committer": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2015-02-22T14:04:18Z"}, "message": "Properly translate methods with foreign CC\n\nThis fixes a general issue of trying to define extern functions inside impl blocks resulting in\nICE.\n\nFixes #21238\nFixes #20734\nFixes #19047", "tree": {"sha": "e4a173d37db8f666dc0d5ece247d1d6657c9c62c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e4a173d37db8f666dc0d5ece247d1d6657c9c62c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9be8ec82cebd62a84af157b51f8d33b062b14656", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9be8ec82cebd62a84af157b51f8d33b062b14656", "html_url": "https://github.com/rust-lang/rust/commit/9be8ec82cebd62a84af157b51f8d33b062b14656", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9be8ec82cebd62a84af157b51f8d33b062b14656/comments", "author": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c25e6f509dfd14b4516dd1cf209e1a0deedec65", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c25e6f509dfd14b4516dd1cf209e1a0deedec65", "html_url": "https://github.com/rust-lang/rust/commit/0c25e6f509dfd14b4516dd1cf209e1a0deedec65"}], "stats": {"total": 55, "additions": 49, "deletions": 6}, "files": [{"sha": "7e51c041c6e13911fcd281e64af0c24836f5d1c8", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9be8ec82cebd62a84af157b51f8d33b062b14656/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9be8ec82cebd62a84af157b51f8d33b062b14656/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=9be8ec82cebd62a84af157b51f8d33b062b14656", "patch": "@@ -2412,9 +2412,9 @@ fn register_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                          -> ValueRef {\n     if let ty::ty_bare_fn(_, ref f) = node_type.sty {\n         if f.abi != Rust && f.abi != RustCall {\n-            ccx.sess().span_bug(sp, &format!(\"only `Rust` or `rust-call` calling conventions \\\n-                                              are valid for this function, but it uses `{:?}`\",\n-                                              f.abi.name));\n+            ccx.sess().span_bug(sp, &format!(\"only the `{}` or `{}` calling conventions are valid \\\n+                                              for this function; `{}` was specified\",\n+                                              Rust.name(), RustCall.name(), f.abi.name()));\n         }\n     } else {\n         ccx.sess().span_bug(sp, \"expected bare rust function\")\n@@ -2938,9 +2938,17 @@ fn register_method(ccx: &CrateContext, id: ast::NodeId,\n \n     let sym = exported_name(ccx, id, mty, &m.attrs);\n \n-    let llfn = register_fn(ccx, m.span, sym, id, mty);\n-    set_llvm_fn_attrs(ccx, &m.attrs, llfn);\n-    llfn\n+    if let ty::ty_bare_fn(_, ref f) = mty.sty {\n+        let llfn = if f.abi == Rust || f.abi == RustCall {\n+            register_fn(ccx, m.span, sym, id, mty)\n+        } else {\n+            foreign::register_rust_fn_with_foreign_abi(ccx, m.span, sym, id)\n+        };\n+        set_llvm_fn_attrs(ccx, &m.attrs, llfn);\n+        return llfn;\n+    } else {\n+        ccx.sess().span_bug(m.span, \"expected bare rust function\");\n+    }\n }\n \n pub fn crate_ctxt_to_encode_parms<'a, 'tcx>(cx: &'a SharedCrateContext<'tcx>,"}, {"sha": "0cd53184e6c84fd2d5656b5c5c59eee758ce6ad3", "filename": "src/test/run-pass/extern-methods.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/9be8ec82cebd62a84af157b51f8d33b062b14656/src%2Ftest%2Frun-pass%2Fextern-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9be8ec82cebd62a84af157b51f8d33b062b14656/src%2Ftest%2Frun-pass%2Fextern-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-methods.rs?ref=9be8ec82cebd62a84af157b51f8d33b062b14656", "patch": "@@ -0,0 +1,35 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+trait A {\n+    extern \"fastcall\" fn test1(i: i32);\n+    extern fn test2(i: i32);\n+}\n+\n+struct S;\n+impl S {\n+    extern \"stdcall\" fn test3(i: i32) {\n+        assert_eq!(i, 3);\n+    }\n+}\n+\n+impl A for S {\n+    extern \"fastcall\" fn test1(i: i32) {\n+        assert_eq!(i, 1);\n+    }\n+    extern fn test2(i: i32) {\n+        assert_eq!(i, 2);\n+    }\n+}\n+\n+fn main() {\n+    <S as A>::test1(1);\n+    <S as A>::test2(2);\n+    S::test3(3);\n+}"}]}