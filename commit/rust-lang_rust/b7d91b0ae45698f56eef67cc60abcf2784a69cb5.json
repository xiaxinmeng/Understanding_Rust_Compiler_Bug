{"sha": "b7d91b0ae45698f56eef67cc60abcf2784a69cb5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3ZDkxYjBhZTQ1Njk4ZjU2ZWVmNjdjYzYwYWJjZjI3ODRhNjljYjU=", "commit": {"author": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2021-03-10T03:55:35Z"}, "committer": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2021-03-10T04:02:52Z"}, "message": "Remove `masked_crates` from `clean::Crate`\n\nPreviously, `masked_crates` existed both on `Cache` and on\n`clean::Crate`. During cache population, the `clean::Crate` version was\n`take`n and moved to `Cache`.\n\nThis change removes the version on `clean::Crate` and instead directly\nmutates `Cache.masked_crates` to initialize it. This has the advantage\nof avoiding duplication and avoiding unnecessary allocation, as well as\nmaking the flow of information through rustdoc less confusing.\n\nThe one downside I see is that `clean::utils::krate()` now uses the side\neffect of mutating `DocContext.cache` instead of returning the data\ndirectly, but it already mutated the `Cache` for other things (e.g.,\n`deref_trait_did`) so it's not really new behavior. Also,\n`clean::utils::krate()` is only called once (and is meant to only be\ncalled once since it performs expensive and potentially destructive\noperations) so the mutation shouldn't be an issue.", "tree": {"sha": "78dc82811b47b5dd114684910f14c298834e1a44", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/78dc82811b47b5dd114684910f14c298834e1a44"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7d91b0ae45698f56eef67cc60abcf2784a69cb5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7d91b0ae45698f56eef67cc60abcf2784a69cb5", "html_url": "https://github.com/rust-lang/rust/commit/b7d91b0ae45698f56eef67cc60abcf2784a69cb5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7d91b0ae45698f56eef67cc60abcf2784a69cb5/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a5d45f68cadc8fff4fbb557780f92b403b19c19", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a5d45f68cadc8fff4fbb557780f92b403b19c19", "html_url": "https://github.com/rust-lang/rust/commit/3a5d45f68cadc8fff4fbb557780f92b403b19c19"}], "stats": {"total": 13, "additions": 6, "deletions": 7}, "files": [{"sha": "114b68c56b812a320e0bd64425bfb201063b6f20", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b7d91b0ae45698f56eef67cc60abcf2784a69cb5/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7d91b0ae45698f56eef67cc60abcf2784a69cb5/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=b7d91b0ae45698f56eef67cc60abcf2784a69cb5", "patch": "@@ -57,7 +57,6 @@ crate struct Crate {\n     // These are later on moved into `CACHEKEY`, leaving the map empty.\n     // Only here so that they can be filtered through the rustdoc passes.\n     crate external_traits: Rc<RefCell<FxHashMap<DefId, TraitWithExtraInfo>>>,\n-    crate masked_crates: FxHashSet<CrateNum>,\n     crate collapsed: bool,\n }\n "}, {"sha": "8b5f5b66c45fc1480117695325d4cb34779b775c", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b7d91b0ae45698f56eef67cc60abcf2784a69cb5/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7d91b0ae45698f56eef67cc60abcf2784a69cb5/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=b7d91b0ae45698f56eef67cc60abcf2784a69cb5", "patch": "@@ -7,7 +7,6 @@ use crate::clean::{\n };\n use crate::core::DocContext;\n \n-use rustc_data_structures::fx::FxHashSet;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n@@ -38,7 +37,6 @@ crate fn krate(cx: &mut DocContext<'_>) -> Crate {\n     // Clean the crate, translating the entire librustc_ast AST to one that is\n     // understood by rustdoc.\n     let mut module = module.clean(cx);\n-    let mut masked_crates = FxHashSet::default();\n \n     match *module.kind {\n         ItemKind::ModuleItem(ref module) => {\n@@ -49,7 +47,7 @@ crate fn krate(cx: &mut DocContext<'_>) -> Crate {\n                     && (it.attrs.has_doc_flag(sym::masked)\n                         || cx.tcx.is_compiler_builtins(it.def_id.krate))\n                 {\n-                    masked_crates.insert(it.def_id.krate);\n+                    cx.cache.masked_crates.insert(it.def_id.krate);\n                 }\n             }\n         }\n@@ -82,7 +80,6 @@ crate fn krate(cx: &mut DocContext<'_>) -> Crate {\n         externs,\n         primitives,\n         external_traits: cx.external_traits.clone(),\n-        masked_crates,\n         collapsed: false,\n     }\n }"}, {"sha": "9415caf8b6f3d6921775fba73b0bad382a8ccbfa", "filename": "src/librustdoc/formats/cache.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b7d91b0ae45698f56eef67cc60abcf2784a69cb5/src%2Flibrustdoc%2Fformats%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7d91b0ae45698f56eef67cc60abcf2784a69cb5/src%2Flibrustdoc%2Fformats%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fcache.rs?ref=b7d91b0ae45698f56eef67cc60abcf2784a69cb5", "patch": "@@ -89,12 +89,16 @@ crate struct Cache {\n     /// This is stored in `Cache` so it doesn't need to be passed through all rustdoc functions.\n     crate document_private: bool,\n \n+    /// Crates marked with [`#[doc(masked)]`][doc_masked].\n+    ///\n+    /// [doc_masked]: https://doc.rust-lang.org/nightly/unstable-book/language-features/doc-masked.html\n+    crate masked_crates: FxHashSet<CrateNum>,\n+\n     // Private fields only used when initially crawling a crate to build a cache\n     stack: Vec<String>,\n     parent_stack: Vec<DefId>,\n     parent_is_trait_impl: bool,\n     stripped_mod: bool,\n-    masked_crates: FxHashSet<CrateNum>,\n \n     crate search_index: Vec<IndexItem>,\n     crate deref_trait_did: Option<DefId>,\n@@ -146,7 +150,6 @@ impl Cache {\n         // Crawl the crate to build various caches used for the output\n         debug!(?self.crate_version);\n         self.traits = krate.external_traits.take();\n-        self.masked_crates = mem::take(&mut krate.masked_crates);\n \n         // Cache where all our extern crates are located\n         // FIXME: this part is specific to HTML so it'd be nice to remove it from the common code"}]}