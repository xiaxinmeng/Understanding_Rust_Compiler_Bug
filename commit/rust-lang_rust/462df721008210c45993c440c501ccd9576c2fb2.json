{"sha": "462df721008210c45993c440c501ccd9576c2fb2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2MmRmNzIxMDA4MjEwYzQ1OTkzYzQ0MGM1MDFjY2Q5NTc2YzJmYjI=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-05-17T22:58:25Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-05-17T22:58:25Z"}, "message": "Dogfood and rustfmt", "tree": {"sha": "c5bbfbee88ada2f04f56b16aef0297b28c598ab5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c5bbfbee88ada2f04f56b16aef0297b28c598ab5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/462df721008210c45993c440c501ccd9576c2fb2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/462df721008210c45993c440c501ccd9576c2fb2", "html_url": "https://github.com/rust-lang/rust/commit/462df721008210c45993c440c501ccd9576c2fb2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/462df721008210c45993c440c501ccd9576c2fb2/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "568a3ecfc3eebe099c1ffe44c3d9afdc5d445fd2", "url": "https://api.github.com/repos/rust-lang/rust/commits/568a3ecfc3eebe099c1ffe44c3d9afdc5d445fd2", "html_url": "https://github.com/rust-lang/rust/commit/568a3ecfc3eebe099c1ffe44c3d9afdc5d445fd2"}], "stats": {"total": 69, "additions": 20, "deletions": 49}, "files": [{"sha": "57390f84c820b5dc172634a3bddd538e1afdd0db", "filename": "clippy_lints/src/booleans.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/462df721008210c45993c440c501ccd9576c2fb2/clippy_lints%2Fsrc%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/462df721008210c45993c440c501ccd9576c2fb2/clippy_lints%2Fsrc%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbooleans.rs?ref=462df721008210c45993c440c501ccd9576c2fb2", "patch": "@@ -50,10 +50,7 @@ declare_clippy_lint! {\n }\n \n // For each pairs, both orders are considered.\n-const METHODS_WITH_NEGATION: [(&str, &str); 2] = [\n-    (\"is_some\", \"is_none\"),\n-    (\"is_err\", \"is_ok\"),\n-];\n+const METHODS_WITH_NEGATION: [(&str, &str); 2] = [(\"is_some\", \"is_none\"), (\"is_err\", \"is_ok\")];\n \n declare_lint_pass!(NonminimalBool => [NONMINIMAL_BOOL, LOGIC_BUG]);\n "}, {"sha": "624e5eabff0584528a1586e1fe3be082975a697a", "filename": "clippy_lints/src/len_zero.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/462df721008210c45993c440c501ccd9576c2fb2/clippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/462df721008210c45993c440c501ccd9576c2fb2/clippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flen_zero.rs?ref=462df721008210c45993c440c501ccd9576c2fb2", "patch": "@@ -139,8 +139,7 @@ fn check_trait_items(cx: &LateContext<'_, '_>, visited_trait: &Item, trait_items\n         }\n     }\n \n-    if cx.access_levels.is_exported(visited_trait.hir_id) && trait_items.iter().any(|i| is_named_self(cx, i, \"len\"))\n-    {\n+    if cx.access_levels.is_exported(visited_trait.hir_id) && trait_items.iter().any(|i| is_named_self(cx, i, \"len\")) {\n         let mut current_and_super_traits = FxHashSet::default();\n         let visited_trait_def_id = cx.tcx.hir().local_def_id_from_hir_id(visited_trait.hir_id);\n         fill_trait_set(visited_trait_def_id, &mut current_and_super_traits, cx);"}, {"sha": "44cc537844af9e66d46df044fa35a457c03a8eaf", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 8, "deletions": 24, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/462df721008210c45993c440c501ccd9576c2fb2/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/462df721008210c45993c440c501ccd9576c2fb2/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=462df721008210c45993c440c501ccd9576c2fb2", "patch": "@@ -1111,8 +1111,7 @@ fn lint_or_fun_call<'a, 'tcx: 'a>(\n \n                 if [\"default\", \"new\"].contains(&path) {\n                     let arg_ty = cx.tables.expr_ty(arg);\n-                    let default_trait_id = if let Some(default_trait_id) = get_trait_def_id(cx, &paths::DEFAULT_TRAIT)\n-                    {\n+                    let default_trait_id = if let Some(default_trait_id) = get_trait_def_id(cx, &paths::DEFAULT_TRAIT) {\n                         default_trait_id\n                     } else {\n                         return false;\n@@ -2254,33 +2253,15 @@ fn lint_chars_cmp_with_unwrap<'a, 'tcx>(\n \n /// Checks for the `CHARS_NEXT_CMP` lint with `unwrap()`.\n fn lint_chars_next_cmp_with_unwrap<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, info: &BinaryExprInfo<'_>) -> bool {\n-    lint_chars_cmp_with_unwrap(\n-        cx,\n-        info,\n-        &[\"chars\", \"next\", \"unwrap\"],\n-        CHARS_NEXT_CMP,\n-        \"starts_with\",\n-    )\n+    lint_chars_cmp_with_unwrap(cx, info, &[\"chars\", \"next\", \"unwrap\"], CHARS_NEXT_CMP, \"starts_with\")\n }\n \n /// Checks for the `CHARS_LAST_CMP` lint with `unwrap()`.\n fn lint_chars_last_cmp_with_unwrap<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, info: &BinaryExprInfo<'_>) -> bool {\n-    if lint_chars_cmp_with_unwrap(\n-        cx,\n-        info,\n-        &[\"chars\", \"last\", \"unwrap\"],\n-        CHARS_LAST_CMP,\n-        \"ends_with\",\n-    ) {\n+    if lint_chars_cmp_with_unwrap(cx, info, &[\"chars\", \"last\", \"unwrap\"], CHARS_LAST_CMP, \"ends_with\") {\n         true\n     } else {\n-        lint_chars_cmp_with_unwrap(\n-            cx,\n-            info,\n-            &[\"chars\", \"next_back\", \"unwrap\"],\n-            CHARS_LAST_CMP,\n-            \"ends_with\",\n-        )\n+        lint_chars_cmp_with_unwrap(cx, info, &[\"chars\", \"next_back\", \"unwrap\"], CHARS_LAST_CMP, \"ends_with\")\n     }\n }\n \n@@ -2344,7 +2325,10 @@ fn lint_asref(cx: &LateContext<'_, '_>, expr: &hir::Expr, call_name: &str, as_re\n     }\n }\n \n-fn ty_has_iter_method(cx: &LateContext<'_, '_>, self_ref_ty: Ty<'_>) -> Option<(&'static Lint, &'static str, &'static str)> {\n+fn ty_has_iter_method(\n+    cx: &LateContext<'_, '_>,\n+    self_ref_ty: Ty<'_>,\n+) -> Option<(&'static Lint, &'static str, &'static str)> {\n     if let Some(ty_name) = has_iter_method(cx, self_ref_ty) {\n         let lint = if ty_name == \"array\" || ty_name == \"PathBuf\" {\n             INTO_ITER_ON_ARRAY"}, {"sha": "b1942e9498f105e94f689625c4a5d6cd550b4ba9", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/462df721008210c45993c440c501ccd9576c2fb2/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/462df721008210c45993c440c501ccd9576c2fb2/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=462df721008210c45993c440c501ccd9576c2fb2", "patch": "@@ -504,8 +504,7 @@ fn check_to_owned(cx: &LateContext<'_, '_>, expr: &Expr, other: &Expr) {\n         },\n         ExprKind::Call(ref path, ref v) if v.len() == 1 => {\n             if let ExprKind::Path(ref path) = path.node {\n-                if match_qpath(path, &[\"String\", \"from_str\"]) || match_qpath(path, &[\"String\", \"from\"])\n-                {\n+                if match_qpath(path, &[\"String\", \"from_str\"]) || match_qpath(path, &[\"String\", \"from\"]) {\n                     (cx.tables.expr_ty_adjusted(&v[0]), snippet(cx, v[0].span, \"..\"))\n                 } else {\n                     return;"}, {"sha": "af69d62ddb739980db47890cc8a8840ba414e2eb", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/462df721008210c45993c440c501ccd9576c2fb2/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/462df721008210c45993c440c501ccd9576c2fb2/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=462df721008210c45993c440c501ccd9576c2fb2", "patch": "@@ -193,12 +193,7 @@ fn check_fn(cx: &LateContext<'_, '_>, decl: &FnDecl, fn_id: HirId, opt_body_id:\n                     );\n                 }\n             } else if match_type(cx, ty, &paths::STRING) {\n-                if let Some(spans) = get_spans(\n-                    cx,\n-                    opt_body_id,\n-                    idx,\n-                    &[(\"clone\", \".to_string()\"), (\"as_str\", \"\")],\n-                ) {\n+                if let Some(spans) = get_spans(cx, opt_body_id, idx, &[(\"clone\", \".to_string()\"), (\"as_str\", \"\")]) {\n                     span_lint_and_then(\n                         cx,\n                         PTR_ARG,"}, {"sha": "a37ac3a1139b7f4ef737823bac81ebbbb9644b68", "filename": "clippy_lints/src/ranges.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/462df721008210c45993c440c501ccd9576c2fb2/clippy_lints%2Fsrc%2Franges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/462df721008210c45993c440c501ccd9576c2fb2/clippy_lints%2Fsrc%2Franges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Franges.rs?ref=462df721008210c45993c440c501ccd9576c2fb2", "patch": "@@ -212,8 +212,7 @@ fn has_step_by(cx: &LateContext<'_, '_>, expr: &Expr) -> bool {\n     // can't be called on a borrowed range.\n     let ty = cx.tables.expr_ty_adjusted(expr);\n \n-    get_trait_def_id(cx, &paths::ITERATOR)\n-        .map_or(false, |iterator_trait| implements_trait(cx, ty, iterator_trait, &[]))\n+    get_trait_def_id(cx, &paths::ITERATOR).map_or(false, |iterator_trait| implements_trait(cx, ty, iterator_trait, &[]))\n }\n \n fn y_plus_one(expr: &Expr) -> Option<&Expr> {"}, {"sha": "db275ef9e585b4e67d826450870d075ebe537018", "filename": "clippy_lints/src/redundant_clone.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/462df721008210c45993c440c501ccd9576c2fb2/clippy_lints%2Fsrc%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/462df721008210c45993c440c501ccd9576c2fb2/clippy_lints%2Fsrc%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_clone.rs?ref=462df721008210c45993c440c501ccd9576c2fb2", "patch": "@@ -96,8 +96,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for RedundantClone {\n \n             let from_borrow = match_def_path(cx, fn_def_id, &paths::CLONE_TRAIT_METHOD)\n                 || match_def_path(cx, fn_def_id, &paths::TO_OWNED_METHOD)\n-                || (match_def_path(cx, fn_def_id, &paths::TO_STRING_METHOD)\n-                    && match_type(cx, arg_ty, &paths::STRING));\n+                || (match_def_path(cx, fn_def_id, &paths::TO_STRING_METHOD) && match_type(cx, arg_ty, &paths::STRING));\n \n             let from_deref = !from_borrow\n                 && (match_def_path(cx, fn_def_id, &paths::PATH_TO_PATH_BUF)"}, {"sha": "81d7f7d58e71fd414c68b9a0bd112f014500c820", "filename": "clippy_lints/src/replace_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/462df721008210c45993c440c501ccd9576c2fb2/clippy_lints%2Fsrc%2Freplace_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/462df721008210c45993c440c501ccd9576c2fb2/clippy_lints%2Fsrc%2Freplace_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freplace_consts.rs?ref=462df721008210c45993c440c501ccd9576c2fb2", "patch": "@@ -56,7 +56,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ReplaceConsts {\n     }\n }\n \n-const REPLACEMENTS: [([&str; 3], &'static str); 25] = [\n+const REPLACEMENTS: [([&str; 3], &str); 25] = [\n     // Once\n     ([\"core\", \"sync\", \"ONCE_INIT\"], \"Once::new()\"),\n     // Min"}, {"sha": "6ba2f91eb03af1f516c44b5aef187227fefd9f88", "filename": "clippy_lints/src/utils/higher.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/462df721008210c45993c440c501ccd9576c2fb2/clippy_lints%2Fsrc%2Futils%2Fhigher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/462df721008210c45993c440c501ccd9576c2fb2/clippy_lints%2Fsrc%2Futils%2Fhigher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhigher.rs?ref=462df721008210c45993c440c501ccd9576c2fb2", "patch": "@@ -100,8 +100,7 @@ pub fn range<'a, 'b, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'b hir::Expr) -> O\n         },\n         hir::ExprKind::Call(ref path, ref args) => {\n             if let hir::ExprKind::Path(ref path) = path.node {\n-                if match_qpath(path, &paths::RANGE_INCLUSIVE_STD_NEW)\n-                    || match_qpath(path, &paths::RANGE_INCLUSIVE_NEW)\n+                if match_qpath(path, &paths::RANGE_INCLUSIVE_STD_NEW) || match_qpath(path, &paths::RANGE_INCLUSIVE_NEW)\n                 {\n                     Some(Range {\n                         start: Some(&args[0]),\n@@ -128,8 +127,7 @@ pub fn range<'a, 'b, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'b hir::Expr) -> O\n                     end: Some(get_field(\"end\", fields)?),\n                     limits: ast::RangeLimits::HalfOpen,\n                 })\n-            } else if match_qpath(path, &paths::RANGE_TO_INCLUSIVE_STD)\n-                || match_qpath(path, &paths::RANGE_TO_INCLUSIVE)\n+            } else if match_qpath(path, &paths::RANGE_TO_INCLUSIVE_STD) || match_qpath(path, &paths::RANGE_TO_INCLUSIVE)\n             {\n                 Some(Range {\n                     start: None,"}, {"sha": "3d22732a6d4bacb11a2d237884349c879547f14b", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/462df721008210c45993c440c501ccd9576c2fb2/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/462df721008210c45993c440c501ccd9576c2fb2/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=462df721008210c45993c440c501ccd9576c2fb2", "patch": "@@ -231,7 +231,9 @@ pub fn match_path_ast(path: &ast::Path, segments: &[&str]) -> bool {\n /// Gets the definition associated to a path.\n pub fn path_to_res(cx: &LateContext<'_, '_>, path: &[&str]) -> Option<(def::Res)> {\n     let crates = cx.tcx.crates();\n-    let krate = crates.iter().find(|&&krate| cx.tcx.crate_name(krate).as_str() == path[0]);\n+    let krate = crates\n+        .iter()\n+        .find(|&&krate| cx.tcx.crate_name(krate).as_str() == path[0]);\n     if let Some(krate) = krate {\n         let krate = DefId {\n             krate: *krate,"}, {"sha": "acd0763dbdc31dbe81ffd42eda7463e6edeeff43", "filename": "clippy_lints/src/utils/sym.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/462df721008210c45993c440c501ccd9576c2fb2/clippy_lints%2Fsrc%2Futils%2Fsym.rs", "raw_url": "https://github.com/rust-lang/rust/raw/462df721008210c45993c440c501ccd9576c2fb2/clippy_lints%2Fsrc%2Futils%2Fsym.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fsym.rs?ref=462df721008210c45993c440c501ccd9576c2fb2", "patch": "@@ -1,4 +1,3 @@\n-\n #[macro_export]\n macro_rules! sym {\n     ($tt:tt) => {"}]}