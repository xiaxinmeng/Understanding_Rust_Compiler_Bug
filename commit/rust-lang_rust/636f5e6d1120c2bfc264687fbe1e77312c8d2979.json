{"sha": "636f5e6d1120c2bfc264687fbe1e77312c8d2979", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzNmY1ZTZkMTEyMGMyYmZjMjY0Njg3ZmJlMWU3NzMxMmM4ZDI5Nzk=", "commit": {"author": {"name": "Chris Gregory", "email": "czipperz@gmail.com", "date": "2019-06-30T18:30:01Z"}, "committer": {"name": "Chris Gregory", "email": "czipperz@gmail.com", "date": "2019-07-02T03:21:12Z"}, "message": "Convert more usages over", "tree": {"sha": "6efc5c4df7f031bee45ce2e8409706981244ec34", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6efc5c4df7f031bee45ce2e8409706981244ec34"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/636f5e6d1120c2bfc264687fbe1e77312c8d2979", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/636f5e6d1120c2bfc264687fbe1e77312c8d2979", "html_url": "https://github.com/rust-lang/rust/commit/636f5e6d1120c2bfc264687fbe1e77312c8d2979", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/636f5e6d1120c2bfc264687fbe1e77312c8d2979/comments", "author": {"login": "czipperz", "id": 10054343, "node_id": "MDQ6VXNlcjEwMDU0MzQz", "avatar_url": "https://avatars.githubusercontent.com/u/10054343?v=4", "gravatar_id": "", "url": "https://api.github.com/users/czipperz", "html_url": "https://github.com/czipperz", "followers_url": "https://api.github.com/users/czipperz/followers", "following_url": "https://api.github.com/users/czipperz/following{/other_user}", "gists_url": "https://api.github.com/users/czipperz/gists{/gist_id}", "starred_url": "https://api.github.com/users/czipperz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/czipperz/subscriptions", "organizations_url": "https://api.github.com/users/czipperz/orgs", "repos_url": "https://api.github.com/users/czipperz/repos", "events_url": "https://api.github.com/users/czipperz/events{/privacy}", "received_events_url": "https://api.github.com/users/czipperz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "czipperz", "id": 10054343, "node_id": "MDQ6VXNlcjEwMDU0MzQz", "avatar_url": "https://avatars.githubusercontent.com/u/10054343?v=4", "gravatar_id": "", "url": "https://api.github.com/users/czipperz", "html_url": "https://github.com/czipperz", "followers_url": "https://api.github.com/users/czipperz/followers", "following_url": "https://api.github.com/users/czipperz/following{/other_user}", "gists_url": "https://api.github.com/users/czipperz/gists{/gist_id}", "starred_url": "https://api.github.com/users/czipperz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/czipperz/subscriptions", "organizations_url": "https://api.github.com/users/czipperz/orgs", "repos_url": "https://api.github.com/users/czipperz/repos", "events_url": "https://api.github.com/users/czipperz/events{/privacy}", "received_events_url": "https://api.github.com/users/czipperz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a3797b73618fb6d7591d194dac22c377b4cd371", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a3797b73618fb6d7591d194dac22c377b4cd371", "html_url": "https://github.com/rust-lang/rust/commit/8a3797b73618fb6d7591d194dac22c377b4cd371"}], "stats": {"total": 92, "additions": 44, "deletions": 48}, "files": [{"sha": "d9ebc40aa2cb943990bf35781d224405031e55d8", "filename": "src/liballoc/collections/btree/map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/636f5e6d1120c2bfc264687fbe1e77312c8d2979/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/636f5e6d1120c2bfc264687fbe1e77312c8d2979/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs?ref=636f5e6d1120c2bfc264687fbe1e77312c8d2979", "patch": "@@ -770,8 +770,8 @@ impl<K: Ord, V> BTreeMap<K, V> {\n         }\n \n         // First, we merge `self` and `other` into a sorted sequence in linear time.\n-        let self_iter = mem::replace(self, BTreeMap::new()).into_iter();\n-        let other_iter = mem::replace(other, BTreeMap::new()).into_iter();\n+        let self_iter = mem::take(self).into_iter();\n+        let other_iter = mem::take(other).into_iter();\n         let iter = MergeIter {\n             left: self_iter.peekable(),\n             right: other_iter.peekable(),"}, {"sha": "ca9e78bb459ace0cac5b89b4e6ef5b61b7f5b2b3", "filename": "src/liballoc/collections/linked_list.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/636f5e6d1120c2bfc264687fbe1e77312c8d2979/src%2Fliballoc%2Fcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/636f5e6d1120c2bfc264687fbe1e77312c8d2979/src%2Fliballoc%2Fcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Flinked_list.rs?ref=636f5e6d1120c2bfc264687fbe1e77312c8d2979", "patch": "@@ -708,7 +708,7 @@ impl<T> LinkedList<T> {\n         let len = self.len();\n         assert!(at <= len, \"Cannot split off at a nonexistent index\");\n         if at == 0 {\n-            return mem::replace(self, Self::new());\n+            return mem::take(self);\n         } else if at == len {\n             return Self::new();\n         }"}, {"sha": "70a93157c9ee26d12e3070d7b411cf0e51c2e05f", "filename": "src/liballoc/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/636f5e6d1120c2bfc264687fbe1e77312c8d2979/src%2Fliballoc%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/636f5e6d1120c2bfc264687fbe1e77312c8d2979/src%2Fliballoc%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstr.rs?ref=636f5e6d1120c2bfc264687fbe1e77312c8d2979", "patch": "@@ -203,7 +203,7 @@ impl ToOwned for str {\n     }\n \n     fn clone_into(&self, target: &mut String) {\n-        let mut b = mem::replace(target, String::new()).into_bytes();\n+        let mut b = mem::take(target).into_bytes();\n         self.as_bytes().clone_into(&mut b);\n         *target = unsafe { String::from_utf8_unchecked(b) }\n     }"}, {"sha": "2e7a934a7692cb80f9cf545866ae86706bbcb9a0", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/636f5e6d1120c2bfc264687fbe1e77312c8d2979/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/636f5e6d1120c2bfc264687fbe1e77312c8d2979/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=636f5e6d1120c2bfc264687fbe1e77312c8d2979", "patch": "@@ -1278,8 +1278,8 @@ impl<'a> LoweringContext<'a> {\n         let was_in_loop_condition = self.is_in_loop_condition;\n         self.is_in_loop_condition = false;\n \n-        let catch_scopes = mem::replace(&mut self.catch_scopes, Vec::new());\n-        let loop_scopes = mem::replace(&mut self.loop_scopes, Vec::new());\n+        let catch_scopes = mem::take(&mut self.catch_scopes);\n+        let loop_scopes = mem::take(&mut self.loop_scopes);\n         let ret = f(self);\n         self.catch_scopes = catch_scopes;\n         self.loop_scopes = loop_scopes;"}, {"sha": "a0621af053783865d46f234fea1e9aff97b8a0c2", "filename": "src/librustc/infer/nll_relate/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/636f5e6d1120c2bfc264687fbe1e77312c8d2979/src%2Flibrustc%2Finfer%2Fnll_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/636f5e6d1120c2bfc264687fbe1e77312c8d2979/src%2Flibrustc%2Finfer%2Fnll_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fnll_relate%2Fmod.rs?ref=636f5e6d1120c2bfc264687fbe1e77312c8d2979", "patch": "@@ -364,7 +364,7 @@ where\n         // been fully instantiated and hence the set of scopes we have\n         // doesn't matter -- just to be sure, put an empty vector\n         // in there.\n-        let old_a_scopes = ::std::mem::replace(pair.vid_scopes(self), vec![]);\n+        let old_a_scopes = ::std::mem::take(pair.vid_scopes(self));\n \n         // Relate the generalized kind to the original one.\n         let result = pair.relate_generalized_ty(self, generalized_ty);"}, {"sha": "e1470e4ef0232318468feb298536a639fe47fda7", "filename": "src/librustc/infer/outlives/obligations.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/636f5e6d1120c2bfc264687fbe1e77312c8d2979/src%2Flibrustc%2Finfer%2Foutlives%2Fobligations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/636f5e6d1120c2bfc264687fbe1e77312c8d2979/src%2Flibrustc%2Finfer%2Foutlives%2Fobligations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Foutlives%2Fobligations.rs?ref=636f5e6d1120c2bfc264687fbe1e77312c8d2979", "patch": "@@ -112,7 +112,7 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n \n     /// Trait queries just want to pass back type obligations \"as is\"\n     pub fn take_registered_region_obligations(&self) -> Vec<(hir::HirId, RegionObligation<'tcx>)> {\n-        ::std::mem::replace(&mut *self.region_obligations.borrow_mut(), vec![])\n+        ::std::mem::take(&mut *self.region_obligations.borrow_mut())\n     }\n \n     /// Process the region obligations that must be proven (during"}, {"sha": "b27c39c4f71b6dafc27a6006af299c9a43e0bc6f", "filename": "src/librustc/infer/region_constraints/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/636f5e6d1120c2bfc264687fbe1e77312c8d2979/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/636f5e6d1120c2bfc264687fbe1e77312c8d2979/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs?ref=636f5e6d1120c2bfc264687fbe1e77312c8d2979", "patch": "@@ -410,7 +410,7 @@ impl<'tcx> RegionConstraintCollector<'tcx> {\n             *any_unifications = false;\n         }\n \n-        mem::replace(data, RegionConstraintData::default())\n+        mem::take(data)\n     }\n \n     pub fn data(&self) -> &RegionConstraintData<'tcx> {"}, {"sha": "1a188bad11bd51607ccf7133b0f068ba01a7d3eb", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/636f5e6d1120c2bfc264687fbe1e77312c8d2979/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/636f5e6d1120c2bfc264687fbe1e77312c8d2979/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=636f5e6d1120c2bfc264687fbe1e77312c8d2979", "patch": "@@ -1375,7 +1375,7 @@ impl<'tcx> Visitor<'tcx> for RegionResolutionVisitor<'tcx> {\n \n         let outer_ec = mem::replace(&mut self.expr_and_pat_count, 0);\n         let outer_cx = self.cx;\n-        let outer_ts = mem::replace(&mut self.terminating_scopes, FxHashSet::default());\n+        let outer_ts = mem::take(&mut self.terminating_scopes);\n         self.terminating_scopes.insert(body.value.hir_id.local_id);\n \n         if let Some(root_id) = self.cx.root_id {"}, {"sha": "dada3a87be51474255f757b8e6cf73a2334fe525", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/636f5e6d1120c2bfc264687fbe1e77312c8d2979/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/636f5e6d1120c2bfc264687fbe1e77312c8d2979/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=636f5e6d1120c2bfc264687fbe1e77312c8d2979", "patch": "@@ -18,7 +18,7 @@ use errors::{Applicability, DiagnosticBuilder};\n use rustc_macros::HashStable;\n use std::borrow::Cow;\n use std::cell::Cell;\n-use std::mem::replace;\n+use std::mem::{replace, take};\n use syntax::ast;\n use syntax::attr;\n use syntax::ptr::P;\n@@ -441,7 +441,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n \n     fn visit_nested_body(&mut self, body: hir::BodyId) {\n         // Each body has their own set of labels, save labels.\n-        let saved = replace(&mut self.labels_in_fn, vec![]);\n+        let saved = take(&mut self.labels_in_fn);\n         let body = self.tcx.hir().body(body);\n         extract_labels(self, body);\n         self.with(\n@@ -1405,9 +1405,8 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             lifetime_uses,\n             ..\n         } = self;\n-        let labels_in_fn = replace(&mut self.labels_in_fn, vec![]);\n-        let xcrate_object_lifetime_defaults =\n-            replace(&mut self.xcrate_object_lifetime_defaults, DefIdMap::default());\n+        let labels_in_fn = take(&mut self.labels_in_fn);\n+        let xcrate_object_lifetime_defaults = take(&mut self.xcrate_object_lifetime_defaults);\n         let mut this = LifetimeContext {\n             tcx: *tcx,\n             map: map,"}, {"sha": "ca3b2b84655e2939857df0bb775d9e950eb2baef", "filename": "src/librustc_codegen_llvm/back/archive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/636f5e6d1120c2bfc264687fbe1e77312c8d2979/src%2Flibrustc_codegen_llvm%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/636f5e6d1120c2bfc264687fbe1e77312c8d2979/src%2Flibrustc_codegen_llvm%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Farchive.rs?ref=636f5e6d1120c2bfc264687fbe1e77312c8d2979", "patch": "@@ -205,8 +205,8 @@ impl<'a> LlvmArchiveBuilder<'a> {\n     }\n \n     fn build_with_llvm(&mut self, kind: ArchiveKind) -> io::Result<()> {\n-        let removals = mem::replace(&mut self.removals, Vec::new());\n-        let mut additions = mem::replace(&mut self.additions, Vec::new());\n+        let removals = mem::take(&mut self.removals);\n+        let mut additions = mem::take(&mut self.additions);\n         let mut strings = Vec::new();\n         let mut members = Vec::new();\n "}, {"sha": "d610805b5bbd0e1a8575bd95e0d5a0ac65afc172", "filename": "src/librustc_codegen_ssa/back/command.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/636f5e6d1120c2bfc264687fbe1e77312c8d2979/src%2Flibrustc_codegen_ssa%2Fback%2Fcommand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/636f5e6d1120c2bfc264687fbe1e77312c8d2979/src%2Flibrustc_codegen_ssa%2Fback%2Fcommand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fcommand.rs?ref=636f5e6d1120c2bfc264687fbe1e77312c8d2979", "patch": "@@ -110,7 +110,7 @@ impl Command {\n     }\n \n     pub fn take_args(&mut self) -> Vec<OsString> {\n-        mem::replace(&mut self.args, Vec::new())\n+        mem::take(&mut self.args)\n     }\n \n     /// Returns a `true` if we're pretty sure that this'll blow OS spawn limits,"}, {"sha": "5ca38273269f38e2cb774764ae9de064ebe67770", "filename": "src/librustc_codegen_ssa/back/write.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/636f5e6d1120c2bfc264687fbe1e77312c8d2979/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/636f5e6d1120c2bfc264687fbe1e77312c8d2979/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs?ref=636f5e6d1120c2bfc264687fbe1e77312c8d2979", "patch": "@@ -1345,12 +1345,9 @@ fn start_executing_work<B: ExtraBackendMethods>(\n                     assert!(!started_lto);\n                     started_lto = true;\n \n-                    let needs_fat_lto =\n-                        mem::replace(&mut needs_fat_lto, Vec::new());\n-                    let needs_thin_lto =\n-                        mem::replace(&mut needs_thin_lto, Vec::new());\n-                    let import_only_modules =\n-                        mem::replace(&mut lto_import_only_modules, Vec::new());\n+                    let needs_fat_lto = mem::take(&mut needs_fat_lto);\n+                    let needs_thin_lto = mem::take(&mut needs_thin_lto);\n+                    let import_only_modules = mem::take(&mut lto_import_only_modules);\n \n                     for (work, cost) in generate_lto_work(&cgcx, needs_fat_lto,\n                                                           needs_thin_lto, import_only_modules) {"}, {"sha": "58009167e3c3fdd0ec876d5dc1f6ddcc6cd58048", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/636f5e6d1120c2bfc264687fbe1e77312c8d2979/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/636f5e6d1120c2bfc264687fbe1e77312c8d2979/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=636f5e6d1120c2bfc264687fbe1e77312c8d2979", "patch": "@@ -275,7 +275,7 @@ fn do_mir_borrowck<'a, 'tcx>(\n     mbcx.analyze_results(&mut state); // entry point for DataflowResultsConsumer\n \n     // Convert any reservation warnings into lints.\n-    let reservation_warnings = mem::replace(&mut mbcx.reservation_warnings, Default::default());\n+    let reservation_warnings = mem::take(&mut mbcx.reservation_warnings);\n     for (_, (place, span, location, bk, borrow)) in reservation_warnings {\n         let mut initial_diag =\n             mbcx.report_conflicting_borrow(location, (&place, span), bk, &borrow);"}, {"sha": "7125eb6850bb6c6f7639362b28406ea61d299fdd", "filename": "src/librustc_mir/build/matches/simplify.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/636f5e6d1120c2bfc264687fbe1e77312c8d2979/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/636f5e6d1120c2bfc264687fbe1e77312c8d2979/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs?ref=636f5e6d1120c2bfc264687fbe1e77312c8d2979", "patch": "@@ -28,7 +28,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                                     candidate: &mut Candidate<'pat, 'tcx>) {\n         // repeatedly simplify match pairs until fixed point is reached\n         loop {\n-            let match_pairs = mem::replace(&mut candidate.match_pairs, vec![]);\n+            let match_pairs = mem::take(&mut candidate.match_pairs);\n             let mut changed = false;\n             for match_pair in match_pairs {\n                 match self.simplify_match_pair(match_pair, candidate) {"}, {"sha": "59821440c6619cfb2edded3d832b1a19281201a4", "filename": "src/librustc_mir/util/def_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/636f5e6d1120c2bfc264687fbe1e77312c8d2979/src%2Flibrustc_mir%2Futil%2Fdef_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/636f5e6d1120c2bfc264687fbe1e77312c8d2979/src%2Flibrustc_mir%2Futil%2Fdef_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fdef_use.rs?ref=636f5e6d1120c2bfc264687fbe1e77312c8d2979", "patch": "@@ -31,7 +31,7 @@ impl DefUseAnalysis {\n         self.clear();\n \n         let mut finder = DefUseFinder {\n-            info: mem::replace(&mut self.info, IndexVec::new()),\n+            info: mem::take(&mut self.info),\n         };\n         finder.visit_body(body);\n         self.info = finder.info"}, {"sha": "c544b3f46030bfab114d75c1fdc89b3f35106cf9", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/636f5e6d1120c2bfc264687fbe1e77312c8d2979/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/636f5e6d1120c2bfc264687fbe1e77312c8d2979/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=636f5e6d1120c2bfc264687fbe1e77312c8d2979", "patch": "@@ -946,7 +946,7 @@ impl<'a> Resolver<'a> {\n         };\n \n         let macro_resolutions =\n-            mem::replace(&mut *module.multi_segment_macro_resolutions.borrow_mut(), Vec::new());\n+            mem::take(&mut *module.multi_segment_macro_resolutions.borrow_mut());\n         for (mut path, path_span, kind, parent_scope, initial_res) in macro_resolutions {\n             // FIXME: Path resolution will ICE if segment IDs present.\n             for seg in &mut path { seg.id = None; }\n@@ -973,7 +973,7 @@ impl<'a> Resolver<'a> {\n         }\n \n         let macro_resolutions =\n-            mem::replace(&mut *module.single_segment_macro_resolutions.borrow_mut(), Vec::new());\n+            mem::take(&mut *module.single_segment_macro_resolutions.borrow_mut());\n         for (ident, kind, parent_scope, initial_binding) in macro_resolutions {\n             match self.early_resolve_ident_in_lexical_scope(ident, ScopeSet::Macro(kind),\n                                                             &parent_scope, true, true, ident.span) {\n@@ -998,7 +998,7 @@ impl<'a> Resolver<'a> {\n             }\n         }\n \n-        let builtin_attrs = mem::replace(&mut *module.builtin_attrs.borrow_mut(), Vec::new());\n+        let builtin_attrs = mem::take(&mut *module.builtin_attrs.borrow_mut());\n         for (ident, parent_scope) in builtin_attrs {\n             let _ = self.early_resolve_ident_in_lexical_scope(\n                 ident, ScopeSet::Macro(MacroKind::Attr), &parent_scope, true, true, ident.span"}, {"sha": "404d728d8808ce5cd54fe8e448a3ee86ea8924b2", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/636f5e6d1120c2bfc264687fbe1e77312c8d2979/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/636f5e6d1120c2bfc264687fbe1e77312c8d2979/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=636f5e6d1120c2bfc264687fbe1e77312c8d2979", "patch": "@@ -682,7 +682,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n         let mut prev_num_indeterminates = self.indeterminate_imports.len() + 1;\n         while self.indeterminate_imports.len() < prev_num_indeterminates {\n             prev_num_indeterminates = self.indeterminate_imports.len();\n-            for import in mem::replace(&mut self.indeterminate_imports, Vec::new()) {\n+            for import in mem::take(&mut self.indeterminate_imports) {\n                 match self.resolve_import(&import) {\n                     true => self.determined_imports.push(import),\n                     false => self.indeterminate_imports.push(import),"}, {"sha": "bd4cf9d208684de104e9da519c6a97502a7eb58b", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/636f5e6d1120c2bfc264687fbe1e77312c8d2979/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/636f5e6d1120c2bfc264687fbe1e77312c8d2979/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=636f5e6d1120c2bfc264687fbe1e77312c8d2979", "patch": "@@ -970,9 +970,9 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n \n         debug!(\"pick: actual search failed, assemble diagnotics\");\n \n-        let static_candidates = mem::replace(&mut self.static_candidates, vec![]);\n+        let static_candidates = mem::take(&mut self.static_candidates);\n         let private_candidate = self.private_candidate.take();\n-        let unsatisfied_predicates = mem::replace(&mut self.unsatisfied_predicates, vec![]);\n+        let unsatisfied_predicates = mem::take(&mut self.unsatisfied_predicates);\n \n         // things failed, so lets look at all traits, for diagnostic purposes now:\n         self.reset();"}, {"sha": "8fec433e56de6d5c65bbbba04701f605103c32d1", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/636f5e6d1120c2bfc264687fbe1e77312c8d2979/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/636f5e6d1120c2bfc264687fbe1e77312c8d2979/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=636f5e6d1120c2bfc264687fbe1e77312c8d2979", "patch": "@@ -4408,7 +4408,7 @@ pub fn enter_impl_trait<F, R>(cx: &DocContext<'_>, f: F) -> R\n where\n     F: FnOnce() -> R,\n {\n-    let old_bounds = mem::replace(&mut *cx.impl_trait_bounds.borrow_mut(), Default::default());\n+    let old_bounds = mem::take(&mut *cx.impl_trait_bounds.borrow_mut());\n     let r = f();\n     assert!(cx.impl_trait_bounds.borrow().is_empty());\n     *cx.impl_trait_bounds.borrow_mut() = old_bounds;"}, {"sha": "e4fba73b8205a21c1c9e8f242092d1f88fd55d6c", "filename": "src/librustdoc/clean/simplify.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/636f5e6d1120c2bfc264687fbe1e77312c8d2979/src%2Flibrustdoc%2Fclean%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/636f5e6d1120c2bfc264687fbe1e77312c8d2979/src%2Flibrustdoc%2Fclean%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fsimplify.rs?ref=636f5e6d1120c2bfc264687fbe1e77312c8d2979", "patch": "@@ -131,7 +131,7 @@ pub fn ty_params(mut params: Vec<clean::GenericParamDef>) -> Vec<clean::GenericP\n     for param in &mut params {\n         match param.kind {\n             clean::GenericParamDefKind::Type { ref mut bounds, .. } => {\n-                *bounds = ty_bounds(mem::replace(bounds, Vec::new()));\n+                *bounds = ty_bounds(mem::take(bounds));\n             }\n             _ => panic!(\"expected only type parameters\"),\n         }"}, {"sha": "2d6503c944560d313beb2775d8fec3feb743e875", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/636f5e6d1120c2bfc264687fbe1e77312c8d2979/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/636f5e6d1120c2bfc264687fbe1e77312c8d2979/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=636f5e6d1120c2bfc264687fbe1e77312c8d2979", "patch": "@@ -660,7 +660,7 @@ pub fn run(mut krate: clean::Crate,\n         deref_trait_did,\n         deref_mut_trait_did,\n         owned_box_did,\n-        masked_crates: mem::replace(&mut krate.masked_crates, Default::default()),\n+        masked_crates: mem::take(&mut krate.masked_crates),\n         param_names: external_param_names,\n         aliases: Default::default(),\n     };"}, {"sha": "e15a95e2e1a32537ba2684206f6d426a13ab09fe", "filename": "src/librustdoc/passes/collapse_docs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/636f5e6d1120c2bfc264687fbe1e77312c8d2979/src%2Flibrustdoc%2Fpasses%2Fcollapse_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/636f5e6d1120c2bfc264687fbe1e77312c8d2979/src%2Flibrustdoc%2Fpasses%2Fcollapse_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollapse_docs.rs?ref=636f5e6d1120c2bfc264687fbe1e77312c8d2979", "patch": "@@ -46,7 +46,7 @@ fn collapse(doc_strings: &mut Vec<DocFragment>) {\n     let mut docs = vec![];\n     let mut last_frag: Option<DocFragment> = None;\n \n-    for frag in replace(doc_strings, vec![]) {\n+    for frag in take(doc_strings) {\n         if let Some(mut curr_frag) = last_frag.take() {\n             let curr_kind = curr_frag.kind();\n             let new_kind = frag.kind();"}, {"sha": "952fd9ebfdf0723d20494c6bd683ed537bdc4f76", "filename": "src/libstd/panicking.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/636f5e6d1120c2bfc264687fbe1e77312c8d2979/src%2Flibstd%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/636f5e6d1120c2bfc264687fbe1e77312c8d2979/src%2Flibstd%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanicking.rs?ref=636f5e6d1120c2bfc264687fbe1e77312c8d2979", "patch": "@@ -364,7 +364,7 @@ fn continue_panic_fmt(info: &PanicInfo<'_>) -> ! {\n \n     unsafe impl<'a> BoxMeUp for PanicPayload<'a> {\n         fn box_me_up(&mut self) -> *mut (dyn Any + Send) {\n-            let contents = mem::replace(self.fill(), String::new());\n+            let contents = mem::take(self.fill());\n             Box::into_raw(Box::new(contents))\n         }\n "}, {"sha": "f8fcd3ff5a5bccb5b07cabfb3e1d627af13cb224", "filename": "src/libstd/sync/mpsc/sync.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/636f5e6d1120c2bfc264687fbe1e77312c8d2979/src%2Flibstd%2Fsync%2Fmpsc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/636f5e6d1120c2bfc264687fbe1e77312c8d2979/src%2Flibstd%2Fsync%2Fmpsc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fsync.rs?ref=636f5e6d1120c2bfc264687fbe1e77312c8d2979", "patch": "@@ -383,7 +383,7 @@ impl<T> Packet<T> {\n         // needs to be careful to destroy the data *outside* of the lock to\n         // prevent deadlock.\n         let _data = if guard.cap != 0 {\n-            mem::replace(&mut guard.buf.buf, Vec::new())\n+            mem::take(&mut guard.buf.buf)\n         } else {\n             Vec::new()\n         };"}, {"sha": "c77f30dfc7109cbd1d9f1c9287d216c6463210b4", "filename": "src/libstd/sys/windows/pipe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/636f5e6d1120c2bfc264687fbe1e77312c8d2979/src%2Flibstd%2Fsys%2Fwindows%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/636f5e6d1120c2bfc264687fbe1e77312c8d2979/src%2Flibstd%2Fsys%2Fwindows%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fpipe.rs?ref=636f5e6d1120c2bfc264687fbe1e77312c8d2979", "patch": "@@ -342,7 +342,7 @@ impl<'a> Drop for AsyncPipe<'a> {\n         // If anything here fails, there's not really much we can do, so we leak\n         // the buffer/OVERLAPPED pointers to ensure we're at least memory safe.\n         if self.pipe.cancel_io().is_err() || self.result().is_err() {\n-            let buf = mem::replace(self.dst, Vec::new());\n+            let buf = mem::take(self.dst);\n             let overlapped = Box::new(unsafe { mem::zeroed() });\n             let overlapped = mem::replace(&mut self.overlapped, overlapped);\n             mem::forget((buf, overlapped));"}, {"sha": "c0f721b466e912c8ef7622bc6c2ac0f6e2cc7918", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/636f5e6d1120c2bfc264687fbe1e77312c8d2979/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/636f5e6d1120c2bfc264687fbe1e77312c8d2979/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=636f5e6d1120c2bfc264687fbe1e77312c8d2979", "patch": "@@ -307,7 +307,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n             } else {\n                 self.resolve_imports();\n                 if undetermined_invocations.is_empty() { break }\n-                invocations = mem::replace(&mut undetermined_invocations, Vec::new());\n+                invocations = mem::take(&mut undetermined_invocations);\n                 force = !mem::replace(&mut progress, false);\n                 continue\n             };"}, {"sha": "e04fd2ddc05bce62332409adbd00515ad3de7069", "filename": "src/libsyntax/ext/tt/transcribe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/636f5e6d1120c2bfc264687fbe1e77312c8d2979/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/636f5e6d1120c2bfc264687fbe1e77312c8d2979/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs?ref=636f5e6d1120c2bfc264687fbe1e77312c8d2979", "patch": "@@ -249,7 +249,7 @@ pub fn transcribe(\n             quoted::TokenTree::Delimited(mut span, delimited) => {\n                 span = span.apply_mark(cx.current_expansion.mark);\n                 stack.push(Frame::Delimited { forest: delimited, idx: 0, span });\n-                result_stack.push(mem::replace(&mut result, Vec::new()));\n+                result_stack.push(mem::take(&mut result));\n             }\n \n             // Nothing much to do here. Just push the token to the result, being careful to"}, {"sha": "8ac20f33908b8c665d76775885a49f9ac54aa521", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/636f5e6d1120c2bfc264687fbe1e77312c8d2979/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/636f5e6d1120c2bfc264687fbe1e77312c8d2979/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=636f5e6d1120c2bfc264687fbe1e77312c8d2979", "patch": "@@ -7699,7 +7699,7 @@ impl<'a> Parser<'a> {\n         let mut tokens = Vec::new();\n         let prev_collecting = match self.token_cursor.frame.last_token {\n             LastToken::Collecting(ref mut list) => {\n-                Some(mem::replace(list, Vec::new()))\n+                Some(mem::take(list))\n             }\n             LastToken::Was(ref mut last) => {\n                 tokens.extend(last.take());\n@@ -7717,7 +7717,7 @@ impl<'a> Parser<'a> {\n \n         // Pull out the tokens that we've collected from the call to `f` above.\n         let mut collected_tokens = match *last_token {\n-            LastToken::Collecting(ref mut v) => mem::replace(v, Vec::new()),\n+            LastToken::Collecting(ref mut v) => mem::take(v),\n             LastToken::Was(_) => panic!(\"our vector went away?\"),\n         };\n "}, {"sha": "156fab8834ca4653e52bf6813aab747a8a47f168", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/636f5e6d1120c2bfc264687fbe1e77312c8d2979/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/636f5e6d1120c2bfc264687fbe1e77312c8d2979/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=636f5e6d1120c2bfc264687fbe1e77312c8d2979", "patch": "@@ -120,8 +120,8 @@ impl<'a> MutVisitor for TestHarnessGenerator<'a> {\n         // We don't want to recurse into anything other than mods, since\n         // mods or tests inside of functions will break things\n         if let ast::ItemKind::Mod(mut module) = item.node {\n-            let tests = mem::replace(&mut self.tests, Vec::new());\n-            let tested_submods = mem::replace(&mut self.tested_submods, Vec::new());\n+            let tests = mem::take(&mut self.tests);\n+            let tested_submods = mem::take(&mut self.tested_submods);\n             noop_visit_mod(&mut module, self);\n             let tests = mem::replace(&mut self.tests, tests);\n             let tested_submods = mem::replace(&mut self.tested_submods, tested_submods);"}, {"sha": "6053b538ff3225fcb3b50b054c95d4954c9cc93d", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/636f5e6d1120c2bfc264687fbe1e77312c8d2979/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/636f5e6d1120c2bfc264687fbe1e77312c8d2979/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=636f5e6d1120c2bfc264687fbe1e77312c8d2979", "patch": "@@ -3608,7 +3608,7 @@ fn nocomment_mir_line(line: &str) -> &str {\n \n fn read2_abbreviated(mut child: Child) -> io::Result<Output> {\n     use crate::read2::read2;\n-    use std::mem::replace;\n+    use std::mem::take;\n \n     const HEAD_LEN: usize = 160 * 1024;\n     const TAIL_LEN: usize = 256 * 1024;\n@@ -3632,7 +3632,7 @@ fn read2_abbreviated(mut child: Child) -> io::Result<Output> {\n                         return;\n                     }\n                     let tail = bytes.split_off(new_len - TAIL_LEN).into_boxed_slice();\n-                    let head = replace(bytes, Vec::new());\n+                    let head = take(bytes);\n                     let skipped = new_len - HEAD_LEN - TAIL_LEN;\n                     ProcOutput::Abbreviated {\n                         head,"}]}