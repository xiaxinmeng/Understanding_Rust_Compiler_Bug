{"sha": "409f4d2adb6c70dff7512395d7ae4c9475db8b28", "node_id": "C_kwDOAAsO6NoAKDQwOWY0ZDJhZGI2YzcwZGZmNzUxMjM5NWQ3YWU0Yzk0NzVkYjhiMjg", "commit": {"author": {"name": "Jakob Degen", "email": "jakob.e.degen@gmail.com", "date": "2022-12-04T08:20:10Z"}, "committer": {"name": "Jakob Degen", "email": "jakob.e.degen@gmail.com", "date": "2022-12-14T09:10:16Z"}, "message": "Support common enum operations in custom mir", "tree": {"sha": "f663f1c9ff88bfefa3943499fe6f77cbd2d77266", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f663f1c9ff88bfefa3943499fe6f77cbd2d77266"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/409f4d2adb6c70dff7512395d7ae4c9475db8b28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/409f4d2adb6c70dff7512395d7ae4c9475db8b28", "html_url": "https://github.com/rust-lang/rust/commit/409f4d2adb6c70dff7512395d7ae4c9475db8b28", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/409f4d2adb6c70dff7512395d7ae4c9475db8b28/comments", "author": {"login": "JakobDegen", "id": 51179609, "node_id": "MDQ6VXNlcjUxMTc5NjA5", "avatar_url": "https://avatars.githubusercontent.com/u/51179609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JakobDegen", "html_url": "https://github.com/JakobDegen", "followers_url": "https://api.github.com/users/JakobDegen/followers", "following_url": "https://api.github.com/users/JakobDegen/following{/other_user}", "gists_url": "https://api.github.com/users/JakobDegen/gists{/gist_id}", "starred_url": "https://api.github.com/users/JakobDegen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JakobDegen/subscriptions", "organizations_url": "https://api.github.com/users/JakobDegen/orgs", "repos_url": "https://api.github.com/users/JakobDegen/repos", "events_url": "https://api.github.com/users/JakobDegen/events{/privacy}", "received_events_url": "https://api.github.com/users/JakobDegen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JakobDegen", "id": 51179609, "node_id": "MDQ6VXNlcjUxMTc5NjA5", "avatar_url": "https://avatars.githubusercontent.com/u/51179609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JakobDegen", "html_url": "https://github.com/JakobDegen", "followers_url": "https://api.github.com/users/JakobDegen/followers", "following_url": "https://api.github.com/users/JakobDegen/following{/other_user}", "gists_url": "https://api.github.com/users/JakobDegen/gists{/gist_id}", "starred_url": "https://api.github.com/users/JakobDegen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JakobDegen/subscriptions", "organizations_url": "https://api.github.com/users/JakobDegen/orgs", "repos_url": "https://api.github.com/users/JakobDegen/repos", "events_url": "https://api.github.com/users/JakobDegen/events{/privacy}", "received_events_url": "https://api.github.com/users/JakobDegen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1b27eea45ef1fe330dd24dc3aa7028cb4d98e8c", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1b27eea45ef1fe330dd24dc3aa7028cb4d98e8c", "html_url": "https://github.com/rust-lang/rust/commit/c1b27eea45ef1fe330dd24dc3aa7028cb4d98e8c"}], "stats": {"total": 282, "additions": 279, "deletions": 3}, "files": [{"sha": "34fefb99e09c25c1b034a2f431ce38dafbf3e39c", "filename": "compiler/rustc_mir_build/src/build/custom/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/409f4d2adb6c70dff7512395d7ae4c9475db8b28/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcustom%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409f4d2adb6c70dff7512395d7ae4c9475db8b28/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcustom%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcustom%2Fmod.rs?ref=409f4d2adb6c70dff7512395d7ae4c9475db8b28", "patch": "@@ -25,7 +25,7 @@ use rustc_index::vec::IndexVec;\n use rustc_middle::{\n     mir::*,\n     thir::*,\n-    ty::{Ty, TyCtxt},\n+    ty::{ParamEnv, Ty, TyCtxt},\n };\n use rustc_span::Span;\n \n@@ -78,6 +78,7 @@ pub(super) fn build_custom_mir<'tcx>(\n \n     let mut pctxt = ParseCtxt {\n         tcx,\n+        param_env: tcx.param_env(did),\n         thir,\n         source_scope: OUTERMOST_SOURCE_SCOPE,\n         body: &mut body,\n@@ -132,6 +133,7 @@ fn parse_attribute(attr: &Attribute) -> MirPhase {\n \n struct ParseCtxt<'tcx, 'body> {\n     tcx: TyCtxt<'tcx>,\n+    param_env: ParamEnv<'tcx>,\n     thir: &'body Thir<'tcx>,\n     source_scope: SourceScope,\n "}, {"sha": "bc822113ce1fdaf9c2d2fb8683e623aef0af0813", "filename": "compiler/rustc_mir_build/src/build/custom/parse/instruction.rs", "status": "modified", "additions": 69, "deletions": 2, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/409f4d2adb6c70dff7512395d7ae4c9475db8b28/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcustom%2Fparse%2Finstruction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409f4d2adb6c70dff7512395d7ae4c9475db8b28/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcustom%2Fparse%2Finstruction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcustom%2Fparse%2Finstruction.rs?ref=409f4d2adb6c70dff7512395d7ae4c9475db8b28", "patch": "@@ -1,5 +1,10 @@\n use rustc_middle::mir::interpret::{ConstValue, Scalar};\n use rustc_middle::{mir::*, thir::*, ty};\n+use rustc_span::Span;\n+use rustc_target::abi::VariantIdx;\n+\n+use crate::build::custom::ParseError;\n+use crate::build::expr::as_constant::as_constant_inner;\n \n use super::{parse_by_kind, PResult, ParseCtxt};\n \n@@ -12,6 +17,14 @@ impl<'tcx, 'body> ParseCtxt<'tcx, 'body> {\n             @call(\"mir_retag_raw\", args) => {\n                 Ok(StatementKind::Retag(RetagKind::Raw, Box::new(self.parse_place(args[0])?)))\n             },\n+            @call(\"mir_set_discriminant\", args) => {\n+                let place = self.parse_place(args[0])?;\n+                let var = self.parse_integer_literal(args[1])? as u32;\n+                Ok(StatementKind::SetDiscriminant {\n+                    place: Box::new(place),\n+                    variant_index: VariantIdx::from_u32(var),\n+                })\n+            },\n             ExprKind::Assign { lhs, rhs } => {\n                 let lhs = self.parse_place(*lhs)?;\n                 let rhs = self.parse_rvalue(*rhs)?;\n@@ -21,18 +34,60 @@ impl<'tcx, 'body> ParseCtxt<'tcx, 'body> {\n     }\n \n     pub fn parse_terminator(&self, expr_id: ExprId) -> PResult<TerminatorKind<'tcx>> {\n-        parse_by_kind!(self, expr_id, _, \"terminator\",\n+        parse_by_kind!(self, expr_id, expr, \"terminator\",\n             @call(\"mir_return\", _args) => {\n                 Ok(TerminatorKind::Return)\n             },\n             @call(\"mir_goto\", args) => {\n                 Ok(TerminatorKind::Goto { target: self.parse_block(args[0])? } )\n             },\n+            ExprKind::Match { scrutinee, arms } => {\n+                let discr = self.parse_operand(*scrutinee)?;\n+                self.parse_match(arms, expr.span).map(|t| TerminatorKind::SwitchInt { discr, targets: t })\n+            },\n         )\n     }\n \n+    fn parse_match(&self, arms: &[ArmId], span: Span) -> PResult<SwitchTargets> {\n+        let Some((otherwise, rest)) = arms.split_last() else {\n+            return Err(ParseError {\n+                span,\n+                item_description: format!(\"no arms\"),\n+                expected: \"at least one arm\".to_string(),\n+            })\n+        };\n+\n+        let otherwise = &self.thir[*otherwise];\n+        let PatKind::Wild = otherwise.pattern.kind else {\n+            return Err(ParseError {\n+                span: otherwise.span,\n+                item_description: format!(\"{:?}\", otherwise.pattern.kind),\n+                expected: \"wildcard pattern\".to_string(),\n+            })\n+        };\n+        let otherwise = self.parse_block(otherwise.body)?;\n+\n+        let mut values = Vec::new();\n+        let mut targets = Vec::new();\n+        for arm in rest {\n+            let arm = &self.thir[*arm];\n+            let PatKind::Constant { value } = arm.pattern.kind else {\n+                return Err(ParseError {\n+                    span: arm.pattern.span,\n+                    item_description: format!(\"{:?}\", arm.pattern.kind),\n+                    expected: \"constant pattern\".to_string(),\n+                })\n+            };\n+            values.push(value.eval_bits(self.tcx, self.param_env, arm.pattern.ty));\n+            targets.push(self.parse_block(arm.body)?);\n+        }\n+\n+        Ok(SwitchTargets::new(values.into_iter().zip(targets), otherwise))\n+    }\n+\n     fn parse_rvalue(&self, expr_id: ExprId) -> PResult<Rvalue<'tcx>> {\n         parse_by_kind!(self, expr_id, _, \"rvalue\",\n+            @call(\"mir_discriminant\", args) => self.parse_place(args[0]).map(Rvalue::Discriminant),\n             ExprKind::Borrow { borrow_kind, arg } => Ok(\n                 Rvalue::Ref(self.tcx.lifetimes.re_erased, *borrow_kind, self.parse_place(*arg)?)\n             ),\n@@ -55,7 +110,7 @@ impl<'tcx, 'body> ParseCtxt<'tcx, 'body> {\n             | ExprKind::ConstParam { .. }\n             | ExprKind::ConstBlock { .. } => {\n                 Ok(Operand::Constant(Box::new(\n-                    crate::build::expr::as_constant::as_constant_inner(expr, |_| None, self.tcx)\n+                    as_constant_inner(expr, |_| None, self.tcx)\n                 )))\n             },\n             _ => self.parse_place(expr_id).map(Operand::Copy),\n@@ -102,4 +157,16 @@ impl<'tcx, 'body> ParseCtxt<'tcx, 'body> {\n             },\n         )\n     }\n+\n+    fn parse_integer_literal(&self, expr_id: ExprId) -> PResult<u128> {\n+        parse_by_kind!(self, expr_id, expr, \"constant\",\n+            ExprKind::Literal { .. }\n+            | ExprKind::NamedConst { .. }\n+            | ExprKind::NonHirLiteral { .. }\n+            | ExprKind::ConstBlock { .. } => Ok({\n+                let value = as_constant_inner(expr, |_| None, self.tcx);\n+                value.literal.eval_bits(self.tcx, self.param_env, value.ty())\n+            }),\n+        )\n+    }\n }"}, {"sha": "4759f128bbbb727f0d0ea740ae771b571744cb92", "filename": "library/core/src/intrinsics/mir.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/409f4d2adb6c70dff7512395d7ae4c9475db8b28/library%2Fcore%2Fsrc%2Fintrinsics%2Fmir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409f4d2adb6c70dff7512395d7ae4c9475db8b28/library%2Fcore%2Fsrc%2Fintrinsics%2Fmir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics%2Fmir.rs?ref=409f4d2adb6c70dff7512395d7ae4c9475db8b28", "patch": "@@ -82,6 +82,12 @@ define!(\"mir_retag_raw\", fn RetagRaw<T>(place: T));\n define!(\"mir_move\", fn Move<T>(place: T) -> T);\n define!(\"mir_static\", fn Static<T>(s: T) -> &'static T);\n define!(\"mir_static_mut\", fn StaticMut<T>(s: T) -> *mut T);\n+define!(\n+    \"mir_discriminant\",\n+    /// Gets the discriminant of a place.\n+    fn Discriminant<T>(place: T) -> <T as ::core::marker::DiscriminantKind>::Discriminant\n+);\n+define!(\"mir_set_discriminant\", fn SetDiscriminant<T>(place: T, index: u32));\n \n /// Convenience macro for generating custom MIR.\n ///"}, {"sha": "e5cd456377844e1d18ee1cde5a09ddf26fb828dc", "filename": "src/test/mir-opt/building/custom/enums.rs", "status": "added", "additions": 120, "deletions": 0, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/409f4d2adb6c70dff7512395d7ae4c9475db8b28/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Fenums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409f4d2adb6c70dff7512395d7ae4c9475db8b28/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Fenums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Fenums.rs?ref=409f4d2adb6c70dff7512395d7ae4c9475db8b28", "patch": "@@ -0,0 +1,120 @@\n+#![feature(custom_mir, core_intrinsics)]\n+\n+extern crate core;\n+use core::intrinsics::mir::*;\n+\n+// EMIT_MIR enums.switch_bool.built.after.mir\n+#[custom_mir(dialect = \"built\")]\n+pub fn switch_bool(b: bool) -> u32 {\n+    mir!(\n+        {\n+            match b {\n+                true => t,\n+                false => f,\n+                _ => f,\n+            }\n+        }\n+\n+        t = {\n+            RET = 5;\n+            Return()\n+        }\n+\n+        f = {\n+            RET = 10;\n+            Return()\n+        }\n+    )\n+}\n+\n+// EMIT_MIR enums.switch_option.built.after.mir\n+#[custom_mir(dialect = \"built\")]\n+pub fn switch_option(option: Option<()>) -> bool {\n+    mir!(\n+        {\n+            let discr = Discriminant(option);\n+            match discr {\n+                0 => n,\n+                1 => s,\n+                _ => s,\n+            }\n+        }\n+\n+        n = {\n+            RET = false;\n+            Return()\n+        }\n+\n+        s = {\n+            RET = true;\n+            Return()\n+        }\n+    )\n+}\n+\n+#[repr(u8)]\n+enum Bool {\n+    False = 0,\n+    True = 1,\n+}\n+\n+// EMIT_MIR enums.switch_option_repr.built.after.mir\n+#[custom_mir(dialect = \"built\")]\n+fn switch_option_repr(option: Bool) -> bool {\n+    mir!(\n+        {\n+            let discr = Discriminant(option);\n+            match discr {\n+                0 => f,\n+                _ => t,\n+            }\n+        }\n+\n+        t = {\n+            RET = true;\n+            Return()\n+        }\n+\n+        f = {\n+            RET = false;\n+            Return()\n+        }\n+    )\n+}\n+\n+// EMIT_MIR enums.set_discr.built.after.mir\n+#[custom_mir(dialect = \"runtime\", phase = \"initial\")]\n+fn set_discr(option: &mut Option<()>) {\n+    mir!({\n+        SetDiscriminant(*option, 0);\n+        Return()\n+    })\n+}\n+\n+// EMIT_MIR enums.set_discr_repr.built.after.mir\n+#[custom_mir(dialect = \"runtime\", phase = \"initial\")]\n+fn set_discr_repr(b: &mut Bool) {\n+    mir!({\n+        SetDiscriminant(*b, 0);\n+        Return()\n+    })\n+}\n+\n+fn main() {\n+    assert_eq!(switch_bool(true), 5);\n+    assert_eq!(switch_bool(false), 10);\n+\n+    assert_eq!(switch_option(Some(())), true);\n+    assert_eq!(switch_option(None), false);\n+\n+    assert_eq!(switch_option_repr(Bool::True), true);\n+    assert_eq!(switch_option_repr(Bool::False), false);\n+\n+    let mut opt = Some(());\n+    set_discr(&mut opt);\n+    assert_eq!(opt, None);\n+\n+    let mut b = Bool::True;\n+    set_discr_repr(&mut b);\n+    assert!(matches!(b, Bool::False));\n+}"}, {"sha": "7de9ed0983fe80a2787988eed3e541ae340a86c1", "filename": "src/test/mir-opt/building/custom/enums.set_discr.built.after.mir", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/409f4d2adb6c70dff7512395d7ae4c9475db8b28/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Fenums.set_discr.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/409f4d2adb6c70dff7512395d7ae4c9475db8b28/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Fenums.set_discr.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Fenums.set_discr.built.after.mir?ref=409f4d2adb6c70dff7512395d7ae4c9475db8b28", "patch": "@@ -0,0 +1,10 @@\n+// MIR for `set_discr` after built\n+\n+fn set_discr(_1: &mut Option<()>) -> () {\n+    let mut _0: ();                      // return place in scope 0 at $DIR/enums.rs:+0:39: +0:39\n+\n+    bb0: {\n+        discriminant((*_1)) = 0;         // scope 0 at $DIR/enums.rs:+2:9: +2:36\n+        return;                          // scope 0 at $DIR/enums.rs:+3:9: +3:17\n+    }\n+}"}, {"sha": "6fdc3d0f4d4e138c274868409efc5111c7b545d3", "filename": "src/test/mir-opt/building/custom/enums.set_discr_repr.built.after.mir", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/409f4d2adb6c70dff7512395d7ae4c9475db8b28/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Fenums.set_discr_repr.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/409f4d2adb6c70dff7512395d7ae4c9475db8b28/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Fenums.set_discr_repr.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Fenums.set_discr_repr.built.after.mir?ref=409f4d2adb6c70dff7512395d7ae4c9475db8b28", "patch": "@@ -0,0 +1,10 @@\n+// MIR for `set_discr_repr` after built\n+\n+fn set_discr_repr(_1: &mut Bool) -> () {\n+    let mut _0: ();                      // return place in scope 0 at $DIR/enums.rs:+0:33: +0:33\n+\n+    bb0: {\n+        discriminant((*_1)) = 0;         // scope 0 at $DIR/enums.rs:+2:9: +2:31\n+        return;                          // scope 0 at $DIR/enums.rs:+3:9: +3:17\n+    }\n+}"}, {"sha": "95c57d2dca33a3fd2996dc91fba4fc62231bc221", "filename": "src/test/mir-opt/building/custom/enums.switch_bool.built.after.mir", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/409f4d2adb6c70dff7512395d7ae4c9475db8b28/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Fenums.switch_bool.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/409f4d2adb6c70dff7512395d7ae4c9475db8b28/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Fenums.switch_bool.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Fenums.switch_bool.built.after.mir?ref=409f4d2adb6c70dff7512395d7ae4c9475db8b28", "patch": "@@ -0,0 +1,19 @@\n+// MIR for `switch_bool` after built\n+\n+fn switch_bool(_1: bool) -> u32 {\n+    let mut _0: u32;                     // return place in scope 0 at $DIR/enums.rs:+0:32: +0:35\n+\n+    bb0: {\n+        switchInt(_1) -> [1: bb1, 0: bb2, otherwise: bb2]; // scope 0 at $DIR/enums.rs:+3:13: +7:14\n+    }\n+\n+    bb1: {\n+        _0 = const 5_u32;                // scope 0 at $DIR/enums.rs:+11:13: +11:20\n+        return;                          // scope 0 at $DIR/enums.rs:+12:13: +12:21\n+    }\n+\n+    bb2: {\n+        _0 = const 10_u32;               // scope 0 at $DIR/enums.rs:+16:13: +16:21\n+        return;                          // scope 0 at $DIR/enums.rs:+17:13: +17:21\n+    }\n+}"}, {"sha": "a659ba7c114d046b08cbfe74d2ffe238f0e71f41", "filename": "src/test/mir-opt/building/custom/enums.switch_option.built.after.mir", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/409f4d2adb6c70dff7512395d7ae4c9475db8b28/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Fenums.switch_option.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/409f4d2adb6c70dff7512395d7ae4c9475db8b28/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Fenums.switch_option.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Fenums.switch_option.built.after.mir?ref=409f4d2adb6c70dff7512395d7ae4c9475db8b28", "patch": "@@ -0,0 +1,21 @@\n+// MIR for `switch_option` after built\n+\n+fn switch_option(_1: Option<()>) -> bool {\n+    let mut _0: bool;                    // return place in scope 0 at $DIR/enums.rs:+0:45: +0:49\n+    let mut _2: isize;                   // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+\n+    bb0: {\n+        _2 = discriminant(_1);           // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+        switchInt(_2) -> [0: bb1, 1: bb2, otherwise: bb2]; // scope 0 at $DIR/enums.rs:+4:13: +8:14\n+    }\n+\n+    bb1: {\n+        _0 = const false;                // scope 0 at $DIR/enums.rs:+12:13: +12:24\n+        return;                          // scope 0 at $DIR/enums.rs:+13:13: +13:21\n+    }\n+\n+    bb2: {\n+        _0 = const true;                 // scope 0 at $DIR/enums.rs:+17:13: +17:23\n+        return;                          // scope 0 at $DIR/enums.rs:+18:13: +18:21\n+    }\n+}"}, {"sha": "d60e4b1b712fd207983884cb152e854ddc6c201b", "filename": "src/test/mir-opt/building/custom/enums.switch_option_repr.built.after.mir", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/409f4d2adb6c70dff7512395d7ae4c9475db8b28/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Fenums.switch_option_repr.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/409f4d2adb6c70dff7512395d7ae4c9475db8b28/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Fenums.switch_option_repr.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Fenums.switch_option_repr.built.after.mir?ref=409f4d2adb6c70dff7512395d7ae4c9475db8b28", "patch": "@@ -0,0 +1,21 @@\n+// MIR for `switch_option_repr` after built\n+\n+fn switch_option_repr(_1: Bool) -> bool {\n+    let mut _0: bool;                    // return place in scope 0 at $DIR/enums.rs:+0:40: +0:44\n+    let mut _2: u8;                      // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+\n+    bb0: {\n+        _2 = discriminant(_1);           // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+        switchInt(_2) -> [0: bb2, otherwise: bb1]; // scope 0 at $DIR/enums.rs:+4:13: +7:14\n+    }\n+\n+    bb1: {\n+        _0 = const true;                 // scope 0 at $DIR/enums.rs:+11:13: +11:23\n+        return;                          // scope 0 at $DIR/enums.rs:+12:13: +12:21\n+    }\n+\n+    bb2: {\n+        _0 = const false;                // scope 0 at $DIR/enums.rs:+16:13: +16:24\n+        return;                          // scope 0 at $DIR/enums.rs:+17:13: +17:21\n+    }\n+}"}]}