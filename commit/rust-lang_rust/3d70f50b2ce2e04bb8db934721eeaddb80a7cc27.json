{"sha": "3d70f50b2ce2e04bb8db934721eeaddb80a7cc27", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkNzBmNTBiMmNlMmUwNGJiOGRiOTM0NzIxZWVhZGRiODBhN2NjMjc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-14T00:31:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-14T00:31:30Z"}, "message": "auto merge of #15649 : catharsis/rust/rust-libstd-examples, r=alexcrichton\n\nThis patch adds doc examples for the make_absolute, change_dir,\r\nerrors_string and args functions in the os module.", "tree": {"sha": "f698377c7e6d91799f01319ab8300624a7cc8dee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f698377c7e6d91799f01319ab8300624a7cc8dee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d70f50b2ce2e04bb8db934721eeaddb80a7cc27", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d70f50b2ce2e04bb8db934721eeaddb80a7cc27", "html_url": "https://github.com/rust-lang/rust/commit/3d70f50b2ce2e04bb8db934721eeaddb80a7cc27", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d70f50b2ce2e04bb8db934721eeaddb80a7cc27/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a35774b128df41e49ed3e56690e31dda998d5fdd", "url": "https://api.github.com/repos/rust-lang/rust/commits/a35774b128df41e49ed3e56690e31dda998d5fdd", "html_url": "https://github.com/rust-lang/rust/commit/a35774b128df41e49ed3e56690e31dda998d5fdd"}, {"sha": "77c4b3d26dab7bd2c95cf34c844760af5f79790e", "url": "https://api.github.com/repos/rust-lang/rust/commits/77c4b3d26dab7bd2c95cf34c844760af5f79790e", "html_url": "https://github.com/rust-lang/rust/commit/77c4b3d26dab7bd2c95cf34c844760af5f79790e"}], "stats": {"total": 52, "additions": 45, "deletions": 7}, "files": [{"sha": "86577a9840d04d07620bd171548cbe0d41d416f6", "filename": "src/libstd/os.rs", "status": "modified", "additions": 45, "deletions": 7, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/3d70f50b2ce2e04bb8db934721eeaddb80a7cc27/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d70f50b2ce2e04bb8db934721eeaddb80a7cc27/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=3d70f50b2ce2e04bb8db934721eeaddb80a7cc27", "patch": "@@ -837,13 +837,24 @@ pub fn tmpdir() -> Path {\n     }\n }\n \n-/**\n- * Convert a relative path to an absolute path\n- *\n- * If the given path is relative, return it prepended with the current working\n- * directory. If the given path is already an absolute path, return it\n- * as is.\n- */\n+///\n+/// Convert a relative path to an absolute path\n+///\n+/// If the given path is relative, return it prepended with the current working\n+/// directory. If the given path is already an absolute path, return it\n+/// as is.\n+///\n+/// # Example\n+/// ```rust\n+/// use std::os;\n+/// use std::path::Path;\n+///\n+/// // Assume we're in a path like /home/someuser\n+/// let rel_path = Path::new(\"..\");\n+/// let abs_path = os::make_absolute(&rel_path);\n+/// println!(\"The absolute path is {}\", abs_path.display());\n+/// // Prints \"The absolute path is /home\"\n+/// ```\n // NB: this is here rather than in path because it is a form of environment\n // querying; what it does depends on the process working directory, not just\n // the input paths.\n@@ -859,6 +870,16 @@ pub fn make_absolute(p: &Path) -> Path {\n \n /// Changes the current working directory to the specified path, returning\n /// whether the change was completed successfully or not.\n+///\n+/// # Example\n+/// ```rust\n+/// use std::os;\n+/// use std::path::Path;\n+///\n+/// let root = Path::new(\"/\");\n+/// assert!(os::change_dir(&root));\n+/// println!(\"Succesfully changed working directory to {}!\", root.display());\n+/// ```\n pub fn change_dir(p: &Path) -> bool {\n     return chdir(p);\n \n@@ -930,6 +951,13 @@ pub fn errno() -> uint {\n }\n \n /// Return the string corresponding to an `errno()` value of `errnum`.\n+/// # Example\n+/// ```rust\n+/// use std::os;\n+///\n+/// // Same as println!(\"{}\", last_os_error());\n+/// println!(\"{}\", os::error_string(os::errno() as uint));\n+/// ```\n pub fn error_string(errnum: uint) -> String {\n     return strerror(errnum);\n \n@@ -1217,6 +1245,16 @@ extern \"system\" {\n ///\n /// The arguments are interpreted as utf-8, with invalid bytes replaced with \\uFFFD.\n /// See `str::from_utf8_lossy` for details.\n+/// # Example\n+///\n+/// ```rust\n+/// use std::os;\n+///\n+/// // Prints each argument on a separate line\n+/// for argument in os::args().iter() {\n+///     println!(\"{}\", argument);\n+/// }\n+/// ```\n pub fn args() -> Vec<String> {\n     real_args()\n }"}]}