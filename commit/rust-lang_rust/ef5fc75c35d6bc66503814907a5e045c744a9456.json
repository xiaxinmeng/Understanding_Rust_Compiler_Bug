{"sha": "ef5fc75c35d6bc66503814907a5e045c744a9456", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmNWZjNzVjMzVkNmJjNjY1MDM4MTQ5MDdhNWUwNDVjNzQ0YTk0NTY=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-04-22T12:38:46Z"}, "committer": {"name": "Oliver 'ker' Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-04-22T18:09:00Z"}, "message": "various testing improvements", "tree": {"sha": "c5d78c17ef5c6acb428165f4cb28cac7c7b34692", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c5d78c17ef5c6acb428165f4cb28cac7c7b34692"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef5fc75c35d6bc66503814907a5e045c744a9456", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef5fc75c35d6bc66503814907a5e045c744a9456", "html_url": "https://github.com/rust-lang/rust/commit/ef5fc75c35d6bc66503814907a5e045c744a9456", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef5fc75c35d6bc66503814907a5e045c744a9456/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae41877b513cf48cb6d5110061fe57ac33f1c7a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae41877b513cf48cb6d5110061fe57ac33f1c7a7", "html_url": "https://github.com/rust-lang/rust/commit/ae41877b513cf48cb6d5110061fe57ac33f1c7a7"}], "stats": {"total": 192, "additions": 177, "deletions": 15}, "files": [{"sha": "a03d0a46ca93b91e1a4b01eb4b9fff92f734ec25", "filename": "src/bin/miri.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ef5fc75c35d6bc66503814907a5e045c744a9456/src%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef5fc75c35d6bc66503814907a5e045c744a9456/src%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri.rs?ref=ef5fc75c35d6bc66503814907a5e045c744a9456", "patch": "@@ -1,4 +1,5 @@\n-#![feature(rustc_private)]\n+#![feature(rustc_private, custom_attribute)]\n+#![allow(unused_attributes)]\n \n extern crate miri;\n extern crate rustc;\n@@ -23,6 +24,7 @@ impl<'a> CompilerCalls<'a> for MiriCompilerCalls {\n     }\n }\n \n+#[miri_run]\n fn main() {\n     let args: Vec<String> = std::env::args().collect();\n     rustc_driver::run_compiler(&args, &mut MiriCompilerCalls);"}, {"sha": "f0a487e20df727504c041683afd918546e29eb30", "filename": "tests/compile-fail/bugs/discriminant_value.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ef5fc75c35d6bc66503814907a5e045c744a9456/tests%2Fcompile-fail%2Fbugs%2Fdiscriminant_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef5fc75c35d6bc66503814907a5e045c744a9456/tests%2Fcompile-fail%2Fbugs%2Fdiscriminant_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fbugs%2Fdiscriminant_value.rs?ref=ef5fc75c35d6bc66503814907a5e045c744a9456", "patch": "@@ -0,0 +1,9 @@\n+#![feature(custom_attribute)]\n+#![allow(dead_code, unused_attributes)]\n+\n+// error-pattern:can't handle intrinsic: discriminant_value\n+\n+#[miri_run]\n+fn main() {\n+    assert_eq!(None::<i32>, None);\n+}"}, {"sha": "d854f21ca317eb8f71fb70a2a827898b618405db", "filename": "tests/compile-fail/bugs/memcmp.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ef5fc75c35d6bc66503814907a5e045c744a9456/tests%2Fcompile-fail%2Fbugs%2Fmemcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef5fc75c35d6bc66503814907a5e045c744a9456/tests%2Fcompile-fail%2Fbugs%2Fmemcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fbugs%2Fmemcmp.rs?ref=ef5fc75c35d6bc66503814907a5e045c744a9456", "patch": "@@ -0,0 +1,11 @@\n+#![feature(custom_attribute)]\n+#![allow(dead_code, unused_attributes)]\n+\n+// error-pattern:can't handle intrinsic: size_of_val\n+\n+#[miri_run]\n+fn memcmp() {\n+    assert_eq!(\"\", \"\");\n+}\n+\n+fn main() {}"}, {"sha": "52a76247ca46841a7382584360ebb3c459893b28", "filename": "tests/compile-fail/bugs/slice_index.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ef5fc75c35d6bc66503814907a5e045c744a9456/tests%2Fcompile-fail%2Fbugs%2Fslice_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef5fc75c35d6bc66503814907a5e045c744a9456/tests%2Fcompile-fail%2Fbugs%2Fslice_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fbugs%2Fslice_index.rs?ref=ef5fc75c35d6bc66503814907a5e045c744a9456", "patch": "@@ -0,0 +1,12 @@\n+#![feature(custom_attribute)]\n+#![allow(dead_code, unused_attributes)]\n+\n+// error-pattern:assertion failed\n+\n+#[miri_run]\n+fn slice() -> u8 {\n+    let arr: &[_] = &[101, 102, 103, 104, 105, 106];\n+    arr[5]\n+}\n+\n+fn main() {}"}, {"sha": "51634fd15bffb3402c154fe5d092e1f130f2224c", "filename": "tests/compiletest.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ef5fc75c35d6bc66503814907a5e045c744a9456/tests%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef5fc75c35d6bc66503814907a5e045c744a9456/tests%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompiletest.rs?ref=ef5fc75c35d6bc66503814907a5e045c744a9456", "patch": "@@ -20,4 +20,5 @@ fn run_mode(mode: &'static str) {\n fn compile_test() {\n     run_mode(\"compile-fail\");\n     run_mode(\"run-pass\");\n+    run_mode(\"run-fail\");\n }"}, {"sha": "25eb72aa04c23ce5b63bf4eb4423ed459bdcedda", "filename": "tests/run-fail/inception.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/ef5fc75c35d6bc66503814907a5e045c744a9456/tests%2Frun-fail%2Finception.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef5fc75c35d6bc66503814907a5e045c744a9456/tests%2Frun-fail%2Finception.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-fail%2Finception.rs?ref=ef5fc75c35d6bc66503814907a5e045c744a9456", "patch": "@@ -0,0 +1,32 @@\n+// error-pattern:no mir for DefId\n+\n+use std::env;\n+use std::process::{Command, Output};\n+\n+fn run_miri(file: &str, sysroot: &str) -> Output {\n+    let path = env::current_dir().unwrap();\n+    let libpath = path.join(\"target\").join(\"debug\");\n+    let libpath = libpath.to_str().unwrap();\n+    let libpath2 = path.join(\"target\").join(\"debug\").join(\"deps\");\n+    let libpath2 = libpath2.to_str().unwrap();\n+    Command::new(\"cargo\")\n+        .args(&[\n+            \"run\", \"--\",\n+            \"--sysroot\", sysroot,\n+            \"-L\", libpath,\n+            \"-L\", libpath2,\n+            file\n+        ])\n+        .output()\n+        .unwrap_or_else(|e| panic!(\"failed to execute process: {}\", e))\n+}\n+\n+fn main() {\n+    let sysroot = env::var(\"RUST_SYSROOT\").expect(\"env variable `RUST_SYSROOT` not set\");\n+    let test_run = run_miri(\"src/bin/miri.rs\", &sysroot);\n+\n+    if test_run.status.code().unwrap_or(-1) != 0 {\n+        println!(\"{}\", String::from_utf8(test_run.stdout).unwrap());\n+        panic!(\"{}\", String::from_utf8(test_run.stderr).unwrap());\n+    }\n+}"}, {"sha": "36b7217f5806277335485c7b3a81a0c083fed023", "filename": "tests/run-pass/arrays.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ef5fc75c35d6bc66503814907a5e045c744a9456/tests%2Frun-pass%2Farrays.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef5fc75c35d6bc66503814907a5e045c744a9456/tests%2Frun-pass%2Farrays.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Farrays.rs?ref=ef5fc75c35d6bc66503814907a5e045c744a9456", "patch": "@@ -6,6 +6,11 @@ fn empty_array() -> [u16; 0] {\n     []\n }\n \n+#[miri_run]\n+fn mini_array() -> [u16; 1] {\n+    [42]\n+}\n+\n #[miri_run]\n fn big_array() -> [u16; 5] {\n     [5, 4, 3, 2, 1]\n@@ -33,4 +38,14 @@ fn array_repeat() -> [u8; 8] {\n     [42; 8]\n }\n \n-fn main() {}\n+#[miri_run]\n+fn main() {\n+    //assert_eq!(empty_array(), []);\n+    assert_eq!(index_unsafe(), 20);\n+    assert_eq!(index(), 20);\n+    /*\n+    assert_eq!(big_array(), [5, 4, 3, 2, 1]);\n+    assert_eq!(array_array(), [[5, 4], [3, 2], [1, 0]]);\n+    assert_eq!(array_repeat(), [42; 8]);\n+    */\n+}"}, {"sha": "953670fef9b275258f558d5911d448dafcde860a", "filename": "tests/run-pass/bools.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ef5fc75c35d6bc66503814907a5e045c744a9456/tests%2Frun-pass%2Fbools.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef5fc75c35d6bc66503814907a5e045c744a9456/tests%2Frun-pass%2Fbools.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fbools.rs?ref=ef5fc75c35d6bc66503814907a5e045c744a9456", "patch": "@@ -27,4 +27,10 @@ fn match_bool() -> i16 {\n     }\n }\n \n-fn main() {}\n+#[miri_run]\n+fn main() {\n+    assert!(boolean());\n+    assert_eq!(if_false(), 0);\n+    assert_eq!(if_true(), 1);\n+    assert_eq!(match_bool(), 1);\n+}"}, {"sha": "fa7d195454ebe6165a207105f08df616ed0d1ab6", "filename": "tests/run-pass/c_enums.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ef5fc75c35d6bc66503814907a5e045c744a9456/tests%2Frun-pass%2Fc_enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef5fc75c35d6bc66503814907a5e045c744a9456/tests%2Frun-pass%2Fc_enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fc_enums.rs?ref=ef5fc75c35d6bc66503814907a5e045c744a9456", "patch": "@@ -20,4 +20,7 @@ fn unsafe_match() -> bool {\n     }\n }\n \n-fn main() {}\n+#[miri_run]\n+fn main() {\n+    assert!(unsafe_match());\n+}"}, {"sha": "68b358145627544220011468ca28d1c82decbcc1", "filename": "tests/run-pass/calls.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ef5fc75c35d6bc66503814907a5e045c744a9456/tests%2Frun-pass%2Fcalls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef5fc75c35d6bc66503814907a5e045c744a9456/tests%2Frun-pass%2Fcalls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fcalls.rs?ref=ef5fc75c35d6bc66503814907a5e045c744a9456", "patch": "@@ -39,4 +39,11 @@ fn test_size_of() -> usize {\n     ::std::mem::size_of::<Option<i32>>()\n }\n \n-fn main() {}\n+#[miri_run]\n+fn main() {\n+    assert_eq!(call(), 2);\n+    assert_eq!(factorial_recursive(), 3628800);\n+    //assert_eq!(call_generic(), (42, true));\n+    assert_eq!(cross_crate_fn_call(), 1);\n+    //assert_eq!(test_size_of(), 8);\n+}"}, {"sha": "ca35992225eccaf31a8f13964d776458808ff544", "filename": "tests/run-pass/closures.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ef5fc75c35d6bc66503814907a5e045c744a9456/tests%2Frun-pass%2Fclosures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef5fc75c35d6bc66503814907a5e045c744a9456/tests%2Frun-pass%2Fclosures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fclosures.rs?ref=ef5fc75c35d6bc66503814907a5e045c744a9456", "patch": "@@ -37,4 +37,7 @@ fn crazy_closure() -> (i32, i32, i32) {\n //     y\n // }\n \n-fn main() {}\n+#[miri_run]\n+fn main() {\n+    assert_eq!(simple(), 12);\n+}"}, {"sha": "f5aad1601c77d5ec329683e12773bcb1baa19ea6", "filename": "tests/run-pass/heap.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ef5fc75c35d6bc66503814907a5e045c744a9456/tests%2Frun-pass%2Fheap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef5fc75c35d6bc66503814907a5e045c744a9456/tests%2Frun-pass%2Fheap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fheap.rs?ref=ef5fc75c35d6bc66503814907a5e045c744a9456", "patch": "@@ -11,4 +11,8 @@ fn make_box_syntax() -> Box<(i16, i16)> {\n     box (1, 2)\n }\n \n-fn main() {}\n+#[miri_run]\n+fn main() {\n+    assert_eq!(*make_box(), (1, 2));\n+    assert_eq!(*make_box_syntax(), (1, 2));\n+}"}, {"sha": "76091be3581ec10cef7b64a9aed26bc31a519cd7", "filename": "tests/run-pass/ints.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ef5fc75c35d6bc66503814907a5e045c744a9456/tests%2Frun-pass%2Fints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef5fc75c35d6bc66503814907a5e045c744a9456/tests%2Frun-pass%2Fints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fints.rs?ref=ef5fc75c35d6bc66503814907a5e045c744a9456", "patch": "@@ -53,4 +53,13 @@ fn match_int_range() -> i64 {\n     }\n }\n \n-fn main() {}\n+#[miri_run]\n+fn main() {\n+    assert_eq!(ret(), 1);\n+    assert_eq!(neg(), -1);\n+    assert_eq!(add(), 3);\n+    assert_eq!(indirect_add(), 3);\n+    assert_eq!(arith(), 5*5);\n+    assert_eq!(match_int(), 20);\n+    assert_eq!(match_int_range(), 4);\n+}"}, {"sha": "57a2f7c4357bee61697258ecc9b2a77dc0a060c8", "filename": "tests/run-pass/loops.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ef5fc75c35d6bc66503814907a5e045c744a9456/tests%2Frun-pass%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef5fc75c35d6bc66503814907a5e045c744a9456/tests%2Frun-pass%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Floops.rs?ref=ef5fc75c35d6bc66503814907a5e045c744a9456", "patch": "@@ -34,4 +34,9 @@ fn for_loop() -> usize {\n     sum\n }\n \n-fn main() {}\n+#[miri_run]\n+fn main() {\n+    assert_eq!(factorial_loop(), 3628800);\n+    assert_eq!(index_for_loop(), 60);\n+    assert_eq!(for_loop(), 60);\n+}"}, {"sha": "9f28b982b4eeef6160d2df4c8ab53a98a2d69874", "filename": "tests/run-pass/pointers.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ef5fc75c35d6bc66503814907a5e045c744a9456/tests%2Frun-pass%2Fpointers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef5fc75c35d6bc66503814907a5e045c744a9456/tests%2Frun-pass%2Fpointers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fpointers.rs?ref=ef5fc75c35d6bc66503814907a5e045c744a9456", "patch": "@@ -58,4 +58,14 @@ fn dangling_pointer() -> *const i32 {\n     &*b as *const i32\n }\n \n-fn main() {}\n+#[miri_run]\n+fn main() {\n+    assert_eq!(one_line_ref(), 1);\n+    assert_eq!(basic_ref(), 1);\n+    assert_eq!(basic_ref_mut(), 3);\n+    assert_eq!(basic_ref_mut_var(), 3);\n+    assert_eq!(tuple_ref_mut(), (10, 22));\n+    assert_eq!(match_ref_mut(), 42);\n+    // FIXME: improve this test... how?\n+    assert!(dangling_pointer() != std::ptr::null());\n+}"}, {"sha": "68a1b429438e095423b48720bd11b9020f8cded9", "filename": "tests/run-pass/products.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ef5fc75c35d6bc66503814907a5e045c744a9456/tests%2Frun-pass%2Fproducts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef5fc75c35d6bc66503814907a5e045c744a9456/tests%2Frun-pass%2Fproducts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fproducts.rs?ref=ef5fc75c35d6bc66503814907a5e045c744a9456", "patch": "@@ -16,6 +16,7 @@ fn tuple_5() -> (i16, i16, i16, i16, i16) {\n     (1, 2, 3, 4, 5)\n }\n \n+#[derive(Debug, PartialEq)]\n struct Pair { x: i8, y: i8 }\n \n #[miri_run]\n@@ -30,4 +31,11 @@ fn field_access() -> (i8, i8) {\n     (p.x, p.y)\n }\n \n-fn main() {}\n+#[miri_run]\n+fn main() {\n+    assert_eq!(tuple(), (1,));\n+    assert_eq!(tuple_2(), (1, 2));\n+    assert_eq!(tuple_5(), (1, 2, 3, 4, 5));\n+    assert_eq!(pair(), Pair { x: 10, y: 20} );\n+    assert_eq!(field_access(), (15, 20));\n+}"}, {"sha": "b82038f400308c7312f0603a858b742015044426", "filename": "tests/run-pass/specialization.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ef5fc75c35d6bc66503814907a5e045c744a9456/tests%2Frun-pass%2Fspecialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef5fc75c35d6bc66503814907a5e045c744a9456/tests%2Frun-pass%2Fspecialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fspecialization.rs?ref=ef5fc75c35d6bc66503814907a5e045c744a9456", "patch": "@@ -18,4 +18,6 @@ fn specialization() -> (bool, bool) {\n     (i32::is_unit(), <()>::is_unit())\n }\n \n-fn main() {}\n+fn main() {\n+    assert_eq!(specialization(), (false, true));\n+}"}, {"sha": "1d4dc8befef8c6e73455f872514e29a948015330", "filename": "tests/run-pass/std.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ef5fc75c35d6bc66503814907a5e045c744a9456/tests%2Frun-pass%2Fstd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef5fc75c35d6bc66503814907a5e045c744a9456/tests%2Frun-pass%2Fstd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fstd.rs?ref=ef5fc75c35d6bc66503814907a5e045c744a9456", "patch": "@@ -44,4 +44,10 @@ fn true_assert() {\n     assert_eq!(1, 1);\n }\n \n-fn main() {}\n+#[miri_run]\n+fn main() {\n+    //let x = rc_reference_cycle().0;\n+    //assert!(x.borrow().is_some());\n+    assert_eq!(*arc(), 42);\n+    assert_eq!(rc_cell().get(), 84);\n+}"}, {"sha": "b8635b4dcd648c1929b1d1c0493cd1e6454d8f0a", "filename": "tests/run-pass/sums.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ef5fc75c35d6bc66503814907a5e045c744a9456/tests%2Frun-pass%2Fsums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef5fc75c35d6bc66503814907a5e045c744a9456/tests%2Frun-pass%2Fsums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fsums.rs?ref=ef5fc75c35d6bc66503814907a5e045c744a9456", "patch": "@@ -1,13 +1,15 @@\n #![feature(custom_attribute)]\n #![allow(dead_code, unused_attributes)]\n \n+#[derive(Debug, PartialEq)]\n enum Unit { Unit }\n \n #[miri_run]\n fn return_unit() -> Unit {\n     Unit::Unit\n }\n \n+#[derive(Debug, PartialEq)]\n enum MyBool { False, True }\n \n #[miri_run]\n@@ -53,4 +55,14 @@ fn two_nones() -> (Option<i16>, Option<i16>) {\n     (None, None)\n }\n \n-fn main() {}\n+#[miri_run]\n+fn main() {\n+    //assert_eq!(two_nones(), (None, None));\n+    assert_eq!(match_opt_some(), 13);\n+    assert_eq!(match_opt_none(), 42);\n+    //assert_eq!(return_some(), Some(42));\n+    //assert_eq!(return_none(), None);\n+    //assert_eq!(return_false(), MyBool::False);\n+    //assert_eq!(return_true(), MyBool::True);\n+    //assert_eq!(return_unit(), Unit::Unit);\n+}"}, {"sha": "2a4cc6128843bc1fc3546f597562e61d0914dd83", "filename": "tests/run-pass/vecs.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ef5fc75c35d6bc66503814907a5e045c744a9456/tests%2Frun-pass%2Fvecs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef5fc75c35d6bc66503814907a5e045c744a9456/tests%2Frun-pass%2Fvecs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fvecs.rs?ref=ef5fc75c35d6bc66503814907a5e045c744a9456", "patch": "@@ -36,4 +36,9 @@ fn vec_reallocate() -> Vec<u8> {\n     v\n }\n \n-fn main() {}\n+#[miri_run]\n+fn main() {\n+    assert_eq!(vec_reallocate().len(), 5);\n+    assert_eq!(vec_into_iter(), 30);\n+    assert_eq!(make_vec().capacity(), 4);\n+}"}]}