{"sha": "76b44f34b9ecd531b761b9fb10edc90671734d0e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2YjQ0ZjM0YjllY2Q1MzFiNzYxYjlmYjEwZWRjOTA2NzE3MzRkMGU=", "commit": {"author": {"name": "HMPerson1", "email": "hmperson1@gmail.com", "date": "2019-10-16T19:54:20Z"}, "committer": {"name": "HMPerson1", "email": "hmperson1@gmail.com", "date": "2019-10-16T19:54:20Z"}, "message": "Add `inefficient_to_string` lint", "tree": {"sha": "4c19417ffcd8346730c9279bb5567d44306e6ebb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c19417ffcd8346730c9279bb5567d44306e6ebb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/76b44f34b9ecd531b761b9fb10edc90671734d0e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQFIBAABCAAyFiEE30PRORiHa0gkBHJnH7R33dJ4Ic4FAl2ndXgUHGhtcGVyc29u\nMUBnbWFpbC5jb20ACgkQH7R33dJ4Ic7LEQf+N9lh9/jfjBq6r9saEXk42JAoTKeK\nayt96KpZqOtxHNzkKYKDYScudcvigFHs/i/jcG3cbBJlKe6+joJraYM8Ygx1iLRD\nwI8ys/K+C2ars+3BdlfzUzAPVHdn7V/VPHai9ycVfybid7pfBo5pGTIN1eEu8vPl\npVG45t2Rns7ejSOsarCsnxsEBeQUpsC9N/GwKUJhsmoQ5XFl2xu+W1tTn+brzSRG\nJs31jDwSsJ7csVOIxC6TQn29yzGlXErh2Od4pwPg8M1Dg9OWKR/0ICnCW1mToiJ+\nyJ2ckeK1MKm1FuNXpJorLnkRL0O/Ryu8q1FKYbpti6PMN0K8YmAEilMLfw==\n=T6Xw\n-----END PGP SIGNATURE-----", "payload": "tree 4c19417ffcd8346730c9279bb5567d44306e6ebb\nparent 07c06738b75e047ecf45b0041fcfcbebafed5edd\nauthor HMPerson1 <hmperson1@gmail.com> 1571255660 -0400\ncommitter HMPerson1 <hmperson1@gmail.com> 1571255660 -0400\n\nAdd `inefficient_to_string` lint\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/76b44f34b9ecd531b761b9fb10edc90671734d0e", "html_url": "https://github.com/rust-lang/rust/commit/76b44f34b9ecd531b761b9fb10edc90671734d0e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/76b44f34b9ecd531b761b9fb10edc90671734d0e/comments", "author": {"login": "HMPerson1", "id": 2219904, "node_id": "MDQ6VXNlcjIyMTk5MDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2219904?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HMPerson1", "html_url": "https://github.com/HMPerson1", "followers_url": "https://api.github.com/users/HMPerson1/followers", "following_url": "https://api.github.com/users/HMPerson1/following{/other_user}", "gists_url": "https://api.github.com/users/HMPerson1/gists{/gist_id}", "starred_url": "https://api.github.com/users/HMPerson1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HMPerson1/subscriptions", "organizations_url": "https://api.github.com/users/HMPerson1/orgs", "repos_url": "https://api.github.com/users/HMPerson1/repos", "events_url": "https://api.github.com/users/HMPerson1/events{/privacy}", "received_events_url": "https://api.github.com/users/HMPerson1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "HMPerson1", "id": 2219904, "node_id": "MDQ6VXNlcjIyMTk5MDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2219904?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HMPerson1", "html_url": "https://github.com/HMPerson1", "followers_url": "https://api.github.com/users/HMPerson1/followers", "following_url": "https://api.github.com/users/HMPerson1/following{/other_user}", "gists_url": "https://api.github.com/users/HMPerson1/gists{/gist_id}", "starred_url": "https://api.github.com/users/HMPerson1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HMPerson1/subscriptions", "organizations_url": "https://api.github.com/users/HMPerson1/orgs", "repos_url": "https://api.github.com/users/HMPerson1/repos", "events_url": "https://api.github.com/users/HMPerson1/events{/privacy}", "received_events_url": "https://api.github.com/users/HMPerson1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07c06738b75e047ecf45b0041fcfcbebafed5edd", "url": "https://api.github.com/repos/rust-lang/rust/commits/07c06738b75e047ecf45b0041fcfcbebafed5edd", "html_url": "https://github.com/rust-lang/rust/commit/07c06738b75e047ecf45b0041fcfcbebafed5edd"}], "stats": {"total": 183, "additions": 181, "deletions": 2}, "files": [{"sha": "42ab00001d9749f91cb3a732e25cd364378a4a87", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/76b44f34b9ecd531b761b9fb10edc90671734d0e/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/76b44f34b9ecd531b761b9fb10edc90671734d0e/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=76b44f34b9ecd531b761b9fb10edc90671734d0e", "patch": "@@ -1033,6 +1033,7 @@ Released 2018-09-13\n [`inconsistent_digit_grouping`]: https://rust-lang.github.io/rust-clippy/master/index.html#inconsistent_digit_grouping\n [`indexing_slicing`]: https://rust-lang.github.io/rust-clippy/master/index.html#indexing_slicing\n [`ineffective_bit_mask`]: https://rust-lang.github.io/rust-clippy/master/index.html#ineffective_bit_mask\n+[`inefficient_to_string`]: https://rust-lang.github.io/rust-clippy/master/index.html#inefficient_to_string\n [`infallible_destructuring_match`]: https://rust-lang.github.io/rust-clippy/master/index.html#infallible_destructuring_match\n [`infinite_iter`]: https://rust-lang.github.io/rust-clippy/master/index.html#infinite_iter\n [`inherent_to_string`]: https://rust-lang.github.io/rust-clippy/master/index.html#inherent_to_string"}, {"sha": "5023538c5ed905e0f35f0221de17112779928f16", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76b44f34b9ecd531b761b9fb10edc90671734d0e/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/76b44f34b9ecd531b761b9fb10edc90671734d0e/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=76b44f34b9ecd531b761b9fb10edc90671734d0e", "patch": "@@ -6,7 +6,7 @@\n \n A collection of lints to catch common mistakes and improve your [Rust](https://github.com/rust-lang/rust) code.\n \n-[There are 325 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n+[There are 326 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n \n We have a bunch of lint categories to allow you to choose how much Clippy is supposed to ~~annoy~~ help you:\n "}, {"sha": "bae904a445e064071ddbe3747e5fcc400570bcaa", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76b44f34b9ecd531b761b9fb10edc90671734d0e/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76b44f34b9ecd531b761b9fb10edc90671734d0e/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=76b44f34b9ecd531b761b9fb10edc90671734d0e", "patch": "@@ -806,6 +806,7 @@ pub fn register_plugins(reg: &mut rustc_driver::plugin::Registry<'_>, conf: &Con\n         methods::EXPECT_FUN_CALL,\n         methods::FILTER_NEXT,\n         methods::FLAT_MAP_IDENTITY,\n+        methods::INEFFICIENT_TO_STRING,\n         methods::INTO_ITER_ON_ARRAY,\n         methods::INTO_ITER_ON_REF,\n         methods::ITER_CLONED_COLLECT,\n@@ -1182,6 +1183,7 @@ pub fn register_plugins(reg: &mut rustc_driver::plugin::Registry<'_>, conf: &Con\n         loops::MANUAL_MEMCPY,\n         loops::NEEDLESS_COLLECT,\n         methods::EXPECT_FUN_CALL,\n+        methods::INEFFICIENT_TO_STRING,\n         methods::ITER_NTH,\n         methods::OR_FUN_CALL,\n         methods::SINGLE_CHAR_PATTERN,"}, {"sha": "35c634cc52dc21d0f1e71e876d9d0995308f1e75", "filename": "clippy_lints/src/methods/inefficient_to_string.rs", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/76b44f34b9ecd531b761b9fb10edc90671734d0e/clippy_lints%2Fsrc%2Fmethods%2Finefficient_to_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76b44f34b9ecd531b761b9fb10edc90671734d0e/clippy_lints%2Fsrc%2Fmethods%2Finefficient_to_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Finefficient_to_string.rs?ref=76b44f34b9ecd531b761b9fb10edc90671734d0e", "patch": "@@ -0,0 +1,55 @@\n+use super::INEFFICIENT_TO_STRING;\n+use crate::utils::{match_def_path, paths, snippet_with_applicability, span_lint_and_then, walk_ptrs_ty_depth};\n+use if_chain::if_chain;\n+use rustc::hir;\n+use rustc::lint::LateContext;\n+use rustc::ty::{self, Ty};\n+use rustc_errors::Applicability;\n+\n+/// Checks for the `INEFFICIENT_TO_STRING` lint\n+pub fn lint<'tcx>(cx: &LateContext<'_, 'tcx>, expr: &hir::Expr, arg: &hir::Expr, arg_ty: Ty<'tcx>) {\n+    if_chain! {\n+        if let Some(to_string_meth_did) = cx.tables.type_dependent_def_id(expr.hir_id);\n+        if match_def_path(cx, to_string_meth_did, &paths::TO_STRING_METHOD);\n+        if let Some(substs) = cx.tables.node_substs_opt(expr.hir_id);\n+        let self_ty = substs.type_at(0);\n+        let (deref_self_ty, deref_count) = walk_ptrs_ty_depth(self_ty);\n+        if deref_count >= 1;\n+        if specializes_tostring(cx, deref_self_ty);\n+        then {\n+            span_lint_and_then(\n+                cx,\n+                INEFFICIENT_TO_STRING,\n+                expr.span,\n+                &format!(\"calling `to_string` on `{}`\", arg_ty),\n+                |db| {\n+                    db.help(&format!(\n+                        \"`{}` implements `ToString` through the blanket impl, but `{}` specializes `ToString` directly\",\n+                        self_ty, deref_self_ty\n+                    ));\n+                    let mut applicability = Applicability::MachineApplicable;\n+                    let arg_snippet = snippet_with_applicability(cx, arg.span, \"..\", &mut applicability);\n+                    db.span_suggestion(\n+                        expr.span,\n+                        \"try dereferencing the receiver\",\n+                        format!(\"({}{}).to_string()\", \"*\".repeat(deref_count), arg_snippet),\n+                        applicability,\n+                    );\n+                },\n+            );\n+        }\n+    }\n+}\n+\n+/// Returns whether `ty` specializes `ToString`.\n+/// Currently, these are `str`, `String`, and `Cow<'_, str>`.\n+fn specializes_tostring(cx: &LateContext<'_, '_>, ty: Ty<'_>) -> bool {\n+    match ty.kind {\n+        ty::Str => true,\n+        ty::Adt(adt, substs) => {\n+            match_def_path(cx, adt.did, &paths::STRING)\n+                || (match_def_path(cx, adt.did, &paths::COW) && substs.type_at(1).is_str())\n+        },\n+        _ => false,\n+    }\n+}"}, {"sha": "efa283b823d9af3e8f3c3a7e4c5af7fb917faf94", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/76b44f34b9ecd531b761b9fb10edc90671734d0e/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76b44f34b9ecd531b761b9fb10edc90671734d0e/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=76b44f34b9ecd531b761b9fb10edc90671734d0e", "patch": "@@ -1,3 +1,4 @@\n+mod inefficient_to_string;\n mod manual_saturating_arithmetic;\n mod option_map_unwrap_or;\n mod unnecessary_filter_map;\n@@ -589,6 +590,29 @@ declare_clippy_lint! {\n     \"using `clone` on `&&T`\"\n }\n \n+declare_clippy_lint! {\n+    /// **What it does:** Checks for usage of `.to_string()` on an `&&T` where\n+    /// `T` implements `ToString` directly (like `&&str` or `&&String`).\n+    ///\n+    /// **Why is this bad?** This bypasses the specialized implementation of\n+    /// `ToString` and instead goes through the more expensive string formatting\n+    /// facilities.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    /// ```rust\n+    /// // Generic implementation for `T: Display` is used (slow)\n+    /// [\"foo\", \"bar\"].iter().map(|s| s.to_string());\n+    ///\n+    /// // OK, the specialized impl is used\n+    /// [\"foo\", \"bar\"].iter().map(|&s| s.to_string());\n+    /// ```\n+    pub INEFFICIENT_TO_STRING,\n+    perf,\n+    \"using `to_string` on `&&T` where `T: ToString`\"\n+}\n+\n declare_clippy_lint! {\n     /// **What it does:** Checks for `new` not returning `Self`.\n     ///\n@@ -1029,6 +1053,7 @@ declare_lint_pass!(Methods => [\n     CLONE_ON_COPY,\n     CLONE_ON_REF_PTR,\n     CLONE_DOUBLE_REF,\n+    INEFFICIENT_TO_STRING,\n     NEW_RET_NO_SELF,\n     SINGLE_CHAR_PATTERN,\n     SEARCH_IS_SOME,\n@@ -1122,6 +1147,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Methods {\n                     lint_clone_on_copy(cx, expr, &args[0], self_ty);\n                     lint_clone_on_ref_ptr(cx, expr, &args[0]);\n                 }\n+                if args.len() == 1 && method_call.ident.name == sym!(to_string) {\n+                    inefficient_to_string::lint(cx, expr, &args[0], self_ty);\n+                }\n \n                 match self_ty.kind {\n                     ty::Ref(_, ty, _) if ty.kind == ty::Str => {"}, {"sha": "1575f0e302785048adc6e830a9675b3d96c2c528", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/76b44f34b9ecd531b761b9fb10edc90671734d0e/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76b44f34b9ecd531b761b9fb10edc90671734d0e/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=76b44f34b9ecd531b761b9fb10edc90671734d0e", "patch": "@@ -6,7 +6,7 @@ pub use lint::Lint;\n pub use lint::LINT_LEVELS;\n \n // begin lint list, do not remove this comment, it\u2019s used in `update_lints`\n-pub const ALL_LINTS: [Lint; 325] = [\n+pub const ALL_LINTS: [Lint; 326] = [\n     Lint {\n         name: \"absurd_extreme_comparisons\",\n         group: \"correctness\",\n@@ -735,6 +735,13 @@ pub const ALL_LINTS: [Lint; 325] = [\n         deprecation: None,\n         module: \"bit_mask\",\n     },\n+    Lint {\n+        name: \"inefficient_to_string\",\n+        group: \"perf\",\n+        desc: \"using `to_string` on `&&T` where `T: ToString`\",\n+        deprecation: None,\n+        module: \"methods\",\n+    },\n     Lint {\n         name: \"infallible_destructuring_match\",\n         group: \"style\","}, {"sha": "a9f8f244c19a54a5942a9012c4f91e35fe6d8412", "filename": "tests/ui/inefficient_to_string.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/76b44f34b9ecd531b761b9fb10edc90671734d0e/tests%2Fui%2Finefficient_to_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76b44f34b9ecd531b761b9fb10edc90671734d0e/tests%2Fui%2Finefficient_to_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finefficient_to_string.rs?ref=76b44f34b9ecd531b761b9fb10edc90671734d0e", "patch": "@@ -0,0 +1,31 @@\n+#![deny(clippy::inefficient_to_string)]\n+\n+use std::borrow::Cow;\n+use std::string::ToString;\n+\n+fn main() {\n+    let rstr: &str = \"hello\";\n+    let rrstr: &&str = &rstr;\n+    let rrrstr: &&&str = &rrstr;\n+    let _: String = rstr.to_string();\n+    let _: String = rrstr.to_string();\n+    let _: String = rrrstr.to_string();\n+\n+    let string: String = String::from(\"hello\");\n+    let rstring: &String = &string;\n+    let rrstring: &&String = &rstring;\n+    let rrrstring: &&&String = &rrstring;\n+    let _: String = string.to_string();\n+    let _: String = rstring.to_string();\n+    let _: String = rrstring.to_string();\n+    let _: String = rrrstring.to_string();\n+\n+    let cow: Cow<'_, str> = Cow::Borrowed(\"hello\");\n+    let rcow: &Cow<'_, str> = &cow;\n+    let rrcow: &&Cow<'_, str> = &rcow;\n+    let rrrcow: &&&Cow<'_, str> = &rrcow;\n+    let _: String = cow.to_string();\n+    let _: String = rcow.to_string();\n+    let _: String = rrcow.to_string();\n+    let _: String = rrrcow.to_string();\n+}"}, {"sha": "70e3c1e82c79b98c83f756056af180512606a240", "filename": "tests/ui/inefficient_to_string.stderr", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/76b44f34b9ecd531b761b9fb10edc90671734d0e/tests%2Fui%2Finefficient_to_string.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/76b44f34b9ecd531b761b9fb10edc90671734d0e/tests%2Fui%2Finefficient_to_string.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finefficient_to_string.stderr?ref=76b44f34b9ecd531b761b9fb10edc90671734d0e", "patch": "@@ -0,0 +1,55 @@\n+error: calling `to_string` on `&&str`\n+  --> $DIR/inefficient_to_string.rs:11:21\n+   |\n+LL |     let _: String = rrstr.to_string();\n+   |                     ^^^^^^^^^^^^^^^^^ help: try dereferencing the receiver: `(*rrstr).to_string()`\n+   |\n+note: lint level defined here\n+  --> $DIR/inefficient_to_string.rs:1:9\n+   |\n+LL | #![deny(clippy::inefficient_to_string)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = help: `&str` implements `ToString` through the blanket impl, but `str` specializes `ToString` directly\n+\n+error: calling `to_string` on `&&&str`\n+  --> $DIR/inefficient_to_string.rs:12:21\n+   |\n+LL |     let _: String = rrrstr.to_string();\n+   |                     ^^^^^^^^^^^^^^^^^^ help: try dereferencing the receiver: `(**rrrstr).to_string()`\n+   |\n+   = help: `&&str` implements `ToString` through the blanket impl, but `str` specializes `ToString` directly\n+\n+error: calling `to_string` on `&&std::string::String`\n+  --> $DIR/inefficient_to_string.rs:20:21\n+   |\n+LL |     let _: String = rrstring.to_string();\n+   |                     ^^^^^^^^^^^^^^^^^^^^ help: try dereferencing the receiver: `(*rrstring).to_string()`\n+   |\n+   = help: `&std::string::String` implements `ToString` through the blanket impl, but `std::string::String` specializes `ToString` directly\n+\n+error: calling `to_string` on `&&&std::string::String`\n+  --> $DIR/inefficient_to_string.rs:21:21\n+   |\n+LL |     let _: String = rrrstring.to_string();\n+   |                     ^^^^^^^^^^^^^^^^^^^^^ help: try dereferencing the receiver: `(**rrrstring).to_string()`\n+   |\n+   = help: `&&std::string::String` implements `ToString` through the blanket impl, but `std::string::String` specializes `ToString` directly\n+\n+error: calling `to_string` on `&&std::borrow::Cow<'_, str>`\n+  --> $DIR/inefficient_to_string.rs:29:21\n+   |\n+LL |     let _: String = rrcow.to_string();\n+   |                     ^^^^^^^^^^^^^^^^^ help: try dereferencing the receiver: `(*rrcow).to_string()`\n+   |\n+   = help: `&std::borrow::Cow<'_, str>` implements `ToString` through the blanket impl, but `std::borrow::Cow<'_, str>` specializes `ToString` directly\n+\n+error: calling `to_string` on `&&&std::borrow::Cow<'_, str>`\n+  --> $DIR/inefficient_to_string.rs:30:21\n+   |\n+LL |     let _: String = rrrcow.to_string();\n+   |                     ^^^^^^^^^^^^^^^^^^ help: try dereferencing the receiver: `(**rrrcow).to_string()`\n+   |\n+   = help: `&&std::borrow::Cow<'_, str>` implements `ToString` through the blanket impl, but `std::borrow::Cow<'_, str>` specializes `ToString` directly\n+\n+error: aborting due to 6 previous errors\n+"}]}