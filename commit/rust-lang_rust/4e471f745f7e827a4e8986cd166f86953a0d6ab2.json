{"sha": "4e471f745f7e827a4e8986cd166f86953a0d6ab2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlNDcxZjc0NWY3ZTgyN2E0ZTg5ODZjZDE2NmY4Njk1M2EwZDZhYjI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-28T14:45:45Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-28T14:47:00Z"}, "message": "fix float test comments and test a few more int->float casts", "tree": {"sha": "06e533903d9cf4d340792ca75aee86f73b086b44", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06e533903d9cf4d340792ca75aee86f73b086b44"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e471f745f7e827a4e8986cd166f86953a0d6ab2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e471f745f7e827a4e8986cd166f86953a0d6ab2", "html_url": "https://github.com/rust-lang/rust/commit/4e471f745f7e827a4e8986cd166f86953a0d6ab2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e471f745f7e827a4e8986cd166f86953a0d6ab2/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc30266540d4e04c018046bb69098adf68ba9f6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc30266540d4e04c018046bb69098adf68ba9f6c", "html_url": "https://github.com/rust-lang/rust/commit/fc30266540d4e04c018046bb69098adf68ba9f6c"}], "stats": {"total": 16, "additions": 10, "deletions": 6}, "files": [{"sha": "394e91ac9c3b8df24fc29de96541f533d7c57b06", "filename": "tests/run-pass/floats.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4e471f745f7e827a4e8986cd166f86953a0d6ab2/tests%2Frun-pass%2Ffloats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e471f745f7e827a4e8986cd166f86953a0d6ab2/tests%2Frun-pass%2Ffloats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Ffloats.rs?ref=4e471f745f7e827a4e8986cd166f86953a0d6ab2", "patch": "@@ -2,8 +2,8 @@\n use std::fmt::Debug;\n \n // Helper function to avoid promotion so that this tests \"run-time\" casts, not CTFE.\n-// Doesn't make a big difference when running this in Miri, but when running this in\n-// rustc (with -Zmir-opt-level=0) for comparison it means we use LLVM casts.\n+// Doesn't make a big difference when running this in Miri, but it means we can compare this\n+// with the LLVM backend by running `rustc -Zmir-opt-level=0 -Zsaturating-float-casts`.\n #[track_caller]\n #[inline(never)]\n fn assert_eq<T: PartialEq + Debug>(x: T, y: T) {\n@@ -29,7 +29,7 @@ fn main() {\n     let y: f32 = unsafe { std::mem::transmute(x) };\n     assert_eq(y, 42.0_f32);\n \n-    // f32-to-int casts\n+    // f32 <-> int casts\n     assert_eq(5.0f32 as u32, 5);\n     assert_eq(-5.0f32 as u32, 0);\n     assert_eq(5.0f32 as i32, 5);\n@@ -44,11 +44,13 @@ fn main() {\n     assert_eq(std::f32::NEG_INFINITY as u32, 0);\n     assert_eq(std::f32::NAN as i32, 0);\n     assert_eq(std::f32::NAN as u32, 0);\n-    assert_eq(u128::MAX as f32, std::f32::INFINITY);\n     assert_eq((u32::MAX-127) as f32 as u32, u32::MAX); // rounding loss\n     assert_eq((u32::MAX-128) as f32 as u32, u32::MAX-255); // rounding loss\n+    assert_eq(127i8 as f32, 127.0f32);\n+    assert_eq(i128::MIN as f32, -170141183460469231731687303715884105728.0f32);\n+    assert_eq(u128::MAX as f32, std::f32::INFINITY); // saturation\n \n-    // f64-to-int casts\n+    // f64 <-> int casts\n     assert_eq(5.0f64 as u64, 5);\n     assert_eq(-5.0f64 as u64, 0);\n     assert_eq(5.0f64 as i64, 5);\n@@ -63,9 +65,11 @@ fn main() {\n     assert_eq(std::f64::NEG_INFINITY as u64, 0);\n     assert_eq(std::f64::NAN as i64, 0);\n     assert_eq(std::f64::NAN as u64, 0);\n-    assert_eq(u128::MAX as f64 as u128, u128::MAX);\n     assert_eq((u64::MAX-1023) as f64 as u64, u64::MAX); // rounding loss\n     assert_eq((u64::MAX-1024) as f64 as u64, u64::MAX-2047); // rounding loss\n+    assert_eq(u128::MAX as f64 as u128, u128::MAX);\n+    assert_eq(i16::MIN as f64, -32768.0f64);\n+    assert_eq(u128::MAX as f64, 340282366920938463463374607431768211455.0f64); // even that fits...\n \n     // f32 <-> f64 casts\n     assert_eq(5.0f64 as f32, 5.0f32);"}]}