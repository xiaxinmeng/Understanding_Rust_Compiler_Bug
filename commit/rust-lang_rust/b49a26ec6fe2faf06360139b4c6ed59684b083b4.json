{"sha": "b49a26ec6fe2faf06360139b4c6ed59684b083b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0OWEyNmVjNmZlMmZhZjA2MzYwMTM5YjRjNmVkNTk2ODRiMDgzYjQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-09-13T20:04:27Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-09-13T20:05:12Z"}, "message": "invoke drop glue with a ptr to (data, meta)\n\nThis is done by creating a little space on the stack. Hokey, but it's\nthe simplest fix I can see.", "tree": {"sha": "14da354a6d57c50a0648ecf0d824b5c3a380f79a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14da354a6d57c50a0648ecf0d824b5c3a380f79a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b49a26ec6fe2faf06360139b4c6ed59684b083b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b49a26ec6fe2faf06360139b4c6ed59684b083b4", "html_url": "https://github.com/rust-lang/rust/commit/b49a26ec6fe2faf06360139b4c6ed59684b083b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b49a26ec6fe2faf06360139b4c6ed59684b083b4/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c87ba3f1222ba20d491e8ed76a04977283280742", "url": "https://api.github.com/repos/rust-lang/rust/commits/c87ba3f1222ba20d491e8ed76a04977283280742", "html_url": "https://github.com/rust-lang/rust/commit/c87ba3f1222ba20d491e8ed76a04977283280742"}], "stats": {"total": 34, "additions": 30, "deletions": 4}, "files": [{"sha": "3073b1dbfaeebcd09d90d2daff23dd6816149a95", "filename": "src/librustc_trans/glue.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b49a26ec6fe2faf06360139b4c6ed59684b083b4/src%2Flibrustc_trans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b49a26ec6fe2faf06360139b4c6ed59684b083b4/src%2Flibrustc_trans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fglue.rs?ref=b49a26ec6fe2faf06360139b4c6ed59684b083b4", "patch": "@@ -296,6 +296,7 @@ fn trans_custom_dtor<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n         sized_args = [v0];\n         &sized_args\n     } else {\n+        // FIXME(#36457) -- we should pass unsized values to drop glue as two arguments\n         unsized_args = [\n             Load(bcx, get_dataptr(bcx, v0)),\n             Load(bcx, get_meta(bcx, v0))\n@@ -440,7 +441,9 @@ pub fn size_and_align_of_dst<'blk, 'tcx>(bcx: &BlockAndBuilder<'blk, 'tcx>,\n     }\n }\n \n-fn make_drop_glue<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, v0: ValueRef, g: DropGlueKind<'tcx>)\n+fn make_drop_glue<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n+                              v0: ValueRef,\n+                              g: DropGlueKind<'tcx>)\n                               -> Block<'blk, 'tcx> {\n     let t = g.ty();\n \n@@ -463,6 +466,7 @@ fn make_drop_glue<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, v0: ValueRef, g: DropGlueK\n                 let llval = get_dataptr(bcx, v0);\n                 let llbox = Load(bcx, llval);\n                 let bcx = drop_ty(bcx, v0, content_ty, DebugLoc::None);\n+                // FIXME(#36457) -- we should pass unsized values to drop glue as two arguments\n                 let info = get_meta(bcx, v0);\n                 let info = Load(bcx, info);\n                 let (llsize, llalign) =\n@@ -488,6 +492,7 @@ fn make_drop_glue<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, v0: ValueRef, g: DropGlueK\n             // No support in vtable for distinguishing destroying with\n             // versus without calling Drop::drop. Assert caller is\n             // okay with always calling the Drop impl, if any.\n+            // FIXME(#36457) -- we should pass unsized values to drop glue as two arguments\n             assert!(!skip_dtor);\n             let data_ptr = get_dataptr(bcx, v0);\n             let vtable_ptr = Load(bcx, get_meta(bcx, v0));\n@@ -543,6 +548,7 @@ fn drop_structural_ty<'blk, 'tcx>(cx: Block<'blk, 'tcx>,\n     let value = if type_is_sized(cx.tcx(), t) {\n         adt::MaybeSizedValue::sized(av)\n     } else {\n+        // FIXME(#36457) -- we should pass unsized values as two arguments\n         let data = Load(cx, get_dataptr(cx, av));\n         let info = Load(cx, get_meta(cx, av));\n         adt::MaybeSizedValue::unsized_(data, info)\n@@ -586,6 +592,7 @@ fn drop_structural_ty<'blk, 'tcx>(cx: Block<'blk, 'tcx>,\n                     let val = if type_is_sized(cx.tcx(), field_ty) {\n                         llfld_a\n                     } else {\n+                        // FIXME(#36457) -- we should pass unsized values as two arguments\n                         let scratch = alloc_ty(cx, field_ty, \"__fat_ptr_iter\");\n                         Store(cx, llfld_a, get_dataptr(cx, scratch));\n                         Store(cx, value.meta, get_meta(cx, scratch));"}, {"sha": "fbade107ecfda24bf6c05885b9808d03fe9fe170", "filename": "src/librustc_trans/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b49a26ec6fe2faf06360139b4c6ed59684b083b4/src%2Flibrustc_trans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b49a26ec6fe2faf06360139b4c6ed59684b083b4/src%2Flibrustc_trans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fintrinsic.rs?ref=b49a26ec6fe2faf06360139b4c6ed59684b083b4", "patch": "@@ -186,6 +186,7 @@ pub fn trans_intrinsic_call<'a, 'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n             let ptr = if is_sized {\n                 llargs[0]\n             } else {\n+                // FIXME(#36457) -- we should pass unsized values as two arguments\n                 let scratch = alloc_ty(bcx, tp_ty, \"drop\");\n                 call_lifetime_start(bcx, scratch);\n                 Store(bcx, llargs[0], get_dataptr(bcx, scratch));"}, {"sha": "baeafbe3e346f221462bac0a0bea64538fa06f5a", "filename": "src/librustc_trans/mir/block.rs", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b49a26ec6fe2faf06360139b4c6ed59684b083b4/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b49a26ec6fe2faf06360139b4c6ed59684b083b4/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fblock.rs?ref=b49a26ec6fe2faf06360139b4c6ed59684b083b4", "patch": "@@ -242,10 +242,28 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                 let lvalue = self.trans_lvalue(&bcx, location);\n                 let drop_fn = glue::get_drop_glue(bcx.ccx(), ty);\n                 let drop_ty = glue::get_drop_glue_type(bcx.tcx(), ty);\n-                let llvalue = if drop_ty != ty {\n-                    bcx.pointercast(lvalue.llval, type_of::type_of(bcx.ccx(), drop_ty).ptr_to())\n+                let is_sized = common::type_is_sized(bcx.tcx(), ty);\n+                let llvalue = if is_sized {\n+                    if drop_ty != ty {\n+                        bcx.pointercast(lvalue.llval, type_of::type_of(bcx.ccx(), drop_ty).ptr_to())\n+                    } else {\n+                        lvalue.llval\n+                    }\n                 } else {\n-                    lvalue.llval\n+                    // FIXME(#36457) Currently drop glue takes sized\n+                    // values as a `*(data, meta)`, but elsewhere in\n+                    // MIR we pass `(data, meta)` as two separate\n+                    // arguments. It would be better to fix drop glue,\n+                    // but I am shooting for a quick fix to #35546\n+                    // here that can be cleanly backported to beta, so\n+                    // I want to avoid touching all of trans.\n+                    bcx.with_block(|bcx| {\n+                        let scratch = base::alloc_ty(bcx, ty, \"drop\");\n+                        base::call_lifetime_start(bcx, scratch);\n+                        build::Store(bcx, lvalue.llval, base::get_dataptr(bcx, scratch));\n+                        build::Store(bcx, lvalue.llextra, base::get_meta(bcx, scratch));\n+                        scratch\n+                    })\n                 };\n                 if let Some(unwind) = unwind {\n                     bcx.invoke(drop_fn,"}]}