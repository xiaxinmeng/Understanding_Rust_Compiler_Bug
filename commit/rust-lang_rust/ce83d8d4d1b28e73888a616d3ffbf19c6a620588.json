{"sha": "ce83d8d4d1b28e73888a616d3ffbf19c6a620588", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlODNkOGQ0ZDFiMjhlNzM4ODhhNjE2ZDNmZmJmMTljNmE2MjA1ODg=", "commit": {"author": {"name": "Eduardo Broto", "email": "ebroto@tutanota.com", "date": "2020-09-22T22:39:00Z"}, "committer": {"name": "Eduardo Broto", "email": "ebroto@tutanota.com", "date": "2020-09-22T22:39:00Z"}, "message": "Revert \"Avoid or_fun_call for const_fn with no args\"\n\nThis reverts commit 5d66bd7bb3fd701d70ec11217e3f89fabe5cb0a7.", "tree": {"sha": "66eac946b11588eda899c8c86eadf92d46286e8e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66eac946b11588eda899c8c86eadf92d46286e8e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce83d8d4d1b28e73888a616d3ffbf19c6a620588", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce83d8d4d1b28e73888a616d3ffbf19c6a620588", "html_url": "https://github.com/rust-lang/rust/commit/ce83d8d4d1b28e73888a616d3ffbf19c6a620588", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce83d8d4d1b28e73888a616d3ffbf19c6a620588/comments", "author": {"login": "ebroto", "id": 816908, "node_id": "MDQ6VXNlcjgxNjkwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/816908?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebroto", "html_url": "https://github.com/ebroto", "followers_url": "https://api.github.com/users/ebroto/followers", "following_url": "https://api.github.com/users/ebroto/following{/other_user}", "gists_url": "https://api.github.com/users/ebroto/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebroto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebroto/subscriptions", "organizations_url": "https://api.github.com/users/ebroto/orgs", "repos_url": "https://api.github.com/users/ebroto/repos", "events_url": "https://api.github.com/users/ebroto/events{/privacy}", "received_events_url": "https://api.github.com/users/ebroto/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ebroto", "id": 816908, "node_id": "MDQ6VXNlcjgxNjkwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/816908?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebroto", "html_url": "https://github.com/ebroto", "followers_url": "https://api.github.com/users/ebroto/followers", "following_url": "https://api.github.com/users/ebroto/following{/other_user}", "gists_url": "https://api.github.com/users/ebroto/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebroto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebroto/subscriptions", "organizations_url": "https://api.github.com/users/ebroto/orgs", "repos_url": "https://api.github.com/users/ebroto/repos", "events_url": "https://api.github.com/users/ebroto/events{/privacy}", "received_events_url": "https://api.github.com/users/ebroto/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e294b22a43be349262405715cf4885296c284ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e294b22a43be349262405715cf4885296c284ba", "html_url": "https://github.com/rust-lang/rust/commit/3e294b22a43be349262405715cf4885296c284ba"}], "stats": {"total": 25, "additions": 0, "deletions": 25}, "files": [{"sha": "92cb31fcf85447c976487320cc4f323620df5f03", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ce83d8d4d1b28e73888a616d3ffbf19c6a620588/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce83d8d4d1b28e73888a616d3ffbf19c6a620588/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=ce83d8d4d1b28e73888a616d3ffbf19c6a620588", "patch": "@@ -46,7 +46,6 @@ use rustc_lint::{LateContext, Level, Lint, LintContext};\n use rustc_middle::hir::map::Map;\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind};\n use rustc_middle::ty::{self, layout::IntegerExt, Ty, TyCtxt, TypeFoldable};\n-use rustc_mir::const_eval;\n use rustc_span::hygiene::{ExpnKind, MacroKind};\n use rustc_span::source_map::original_sp;\n use rustc_span::symbol::{self, kw, Symbol};\n@@ -883,19 +882,11 @@ pub fn is_copy<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool {\n \n /// Checks if an expression is constructing a tuple-like enum variant or struct\n pub fn is_ctor_or_promotable_const_function(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n-    fn has_no_arguments(cx: &LateContext<'_>, def_id: DefId) -> bool {\n-        cx.tcx.fn_sig(def_id).skip_binder().inputs().is_empty()\n-    }\n-\n     if let ExprKind::Call(ref fun, _) = expr.kind {\n         if let ExprKind::Path(ref qp) = fun.kind {\n             let res = cx.qpath_res(qp, fun.hir_id);\n             return match res {\n                 def::Res::Def(DefKind::Variant | DefKind::Ctor(..), ..) => true,\n-                // FIXME: check the constness of the arguments, see https://github.com/rust-lang/rust-clippy/pull/5682#issuecomment-638681210\n-                def::Res::Def(DefKind::Fn, def_id) if has_no_arguments(cx, def_id) => {\n-                    const_eval::is_const_fn(cx.tcx, def_id)\n-                },\n                 def::Res::Def(_, def_id) => cx.tcx.is_promotable_const_fn(def_id),\n                 _ => false,\n             };"}, {"sha": "2045ffdb5f09d38996c36d57ffc9c56967859d96", "filename": "tests/ui/or_fun_call.fixed", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ce83d8d4d1b28e73888a616d3ffbf19c6a620588/tests%2Fui%2For_fun_call.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/ce83d8d4d1b28e73888a616d3ffbf19c6a620588/tests%2Fui%2For_fun_call.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2For_fun_call.fixed?ref=ce83d8d4d1b28e73888a616d3ffbf19c6a620588", "patch": "@@ -116,12 +116,4 @@ fn f() -> Option<()> {\n     Some(())\n }\n \n-// Issue 5886 - const fn (with no arguments)\n-pub fn skip_const_fn_with_no_args() {\n-    const fn foo() -> Option<i32> {\n-        Some(42)\n-    }\n-    let _ = None.or(foo());\n-}\n-\n fn main() {}"}, {"sha": "522f31b72d01f4d94a590dd179a86c287d1c6db4", "filename": "tests/ui/or_fun_call.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ce83d8d4d1b28e73888a616d3ffbf19c6a620588/tests%2Fui%2For_fun_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce83d8d4d1b28e73888a616d3ffbf19c6a620588/tests%2Fui%2For_fun_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2For_fun_call.rs?ref=ce83d8d4d1b28e73888a616d3ffbf19c6a620588", "patch": "@@ -116,12 +116,4 @@ fn f() -> Option<()> {\n     Some(())\n }\n \n-// Issue 5886 - const fn (with no arguments)\n-pub fn skip_const_fn_with_no_args() {\n-    const fn foo() -> Option<i32> {\n-        Some(42)\n-    }\n-    let _ = None.or(foo());\n-}\n-\n fn main() {}"}]}