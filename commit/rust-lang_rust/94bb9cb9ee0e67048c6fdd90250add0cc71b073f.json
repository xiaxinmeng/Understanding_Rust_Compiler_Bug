{"sha": "94bb9cb9ee0e67048c6fdd90250add0cc71b073f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0YmI5Y2I5ZWUwZTY3MDQ4YzZmZGQ5MDI1MGFkZDBjYzcxYjA3M2Y=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2021-03-10T09:30:25Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2021-03-10T09:30:25Z"}, "message": "Fix labels for single import assists", "tree": {"sha": "dd2d37626f7122074cd86378b1118cef9dcce52f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd2d37626f7122074cd86378b1118cef9dcce52f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/94bb9cb9ee0e67048c6fdd90250add0cc71b073f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/94bb9cb9ee0e67048c6fdd90250add0cc71b073f", "html_url": "https://github.com/rust-lang/rust/commit/94bb9cb9ee0e67048c6fdd90250add0cc71b073f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/94bb9cb9ee0e67048c6fdd90250add0cc71b073f/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "63715e1f732d94f090078d03591fe5569d8890c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/63715e1f732d94f090078d03591fe5569d8890c3", "html_url": "https://github.com/rust-lang/rust/commit/63715e1f732d94f090078d03591fe5569d8890c3"}], "stats": {"total": 32, "additions": 12, "deletions": 20}, "files": [{"sha": "7019039b9e3dacd674ed3dc3b0219aa6e4ab3dff", "filename": "crates/ide_assists/src/handlers/auto_import.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/94bb9cb9ee0e67048c6fdd90250add0cc71b073f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94bb9cb9ee0e67048c6fdd90250add0cc71b073f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fauto_import.rs?ref=94bb9cb9ee0e67048c6fdd90250add0cc71b073f", "patch": "@@ -1,7 +1,7 @@\n use ide_db::helpers::{\n     import_assets::{ImportAssets, ImportCandidate},\n     insert_use::{insert_use, ImportScope},\n-    item_name, mod_path_to_ast,\n+    mod_path_to_ast,\n };\n use syntax::{ast, AstNode, SyntaxNode};\n \n@@ -90,17 +90,13 @@ pub(crate) fn auto_import(acc: &mut Assists, ctx: &AssistContext) -> Option<()>\n     }\n \n     let range = ctx.sema.original_range(&syntax_under_caret).range;\n-    let group = import_group_message(import_assets.import_candidate());\n+    let group_label = group_label(import_assets.import_candidate());\n     let scope = ImportScope::find_insert_use_container(&syntax_under_caret, &ctx.sema)?;\n     for import in proposed_imports {\n-        let name = match item_name(ctx.db(), import.original_item) {\n-            Some(name) => name,\n-            None => continue,\n-        };\n         acc.add_group(\n-            &group,\n+            &group_label,\n             AssistId(\"auto_import\", AssistKind::QuickFix),\n-            format!(\"Import `{}`\", name),\n+            format!(\"Import `{}`\", import.import_path),\n             range,\n             |builder| {\n                 let rewriter =\n@@ -126,7 +122,7 @@ pub(super) fn find_importable_node(ctx: &AssistContext) -> Option<(ImportAssets,\n     }\n }\n \n-fn import_group_message(import_candidate: &ImportCandidate) -> GroupLabel {\n+fn group_label(import_candidate: &ImportCandidate) -> GroupLabel {\n     let name = match import_candidate {\n         ImportCandidate::Path(candidate) => format!(\"Import {}\", candidate.name.text()),\n         ImportCandidate::TraitAssocItem(candidate) => {"}, {"sha": "30b23da6cacac26973a2df03b87c8096f228303e", "filename": "crates/ide_assists/src/handlers/qualify_path.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/94bb9cb9ee0e67048c6fdd90250add0cc71b073f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fqualify_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94bb9cb9ee0e67048c6fdd90250add0cc71b073f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fqualify_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fqualify_path.rs?ref=94bb9cb9ee0e67048c6fdd90250add0cc71b073f", "patch": "@@ -3,7 +3,7 @@ use std::iter;\n use hir::AsAssocItem;\n use ide_db::helpers::{\n     import_assets::{ImportCandidate, LocatedImport},\n-    item_name, mod_path_to_ast,\n+    mod_path_to_ast,\n };\n use ide_db::RootDatabase;\n use syntax::{\n@@ -78,7 +78,7 @@ pub(crate) fn qualify_path(acc: &mut Assists, ctx: &AssistContext) -> Option<()>\n         acc.add_group(\n             &group_label,\n             AssistId(\"qualify_path\", AssistKind::QuickFix),\n-            label(ctx.db(), candidate, &import),\n+            label(candidate, &import),\n             range,\n             |builder| {\n                 qualify_candidate.qualify(\n@@ -199,21 +199,17 @@ fn group_label(candidate: &ImportCandidate) -> GroupLabel {\n     GroupLabel(format!(\"Qualify {}\", name))\n }\n \n-fn label(db: &RootDatabase, candidate: &ImportCandidate, import: &LocatedImport) -> String {\n-    let display_path = match item_name(db, import.original_item) {\n-        Some(display_path) => display_path.to_string(),\n-        None => \"{unknown}\".to_string(),\n-    };\n+fn label(candidate: &ImportCandidate, import: &LocatedImport) -> String {\n     match candidate {\n         ImportCandidate::Path(candidate) => {\n             if candidate.qualifier.is_some() {\n-                format!(\"Qualify with `{}`\", display_path)\n+                format!(\"Qualify with `{}`\", import.import_path)\n             } else {\n-                format!(\"Qualify as `{}`\", display_path)\n+                format!(\"Qualify as `{}`\", import.import_path)\n             }\n         }\n-        ImportCandidate::TraitAssocItem(_) => format!(\"Qualify `{}`\", display_path),\n-        ImportCandidate::TraitMethod(_) => format!(\"Qualify with cast as `{}`\", display_path),\n+        ImportCandidate::TraitAssocItem(_) => format!(\"Qualify `{}`\", import.import_path),\n+        ImportCandidate::TraitMethod(_) => format!(\"Qualify with cast as `{}`\", import.import_path),\n     }\n }\n "}]}