{"sha": "f3744a1b3dd1c3d6a27a6061fc1866194a453ee2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzNzQ0YTFiM2RkMWMzZDZhMjdhNjA2MWZjMTg2NjE5NGE0NTNlZTI=", "commit": {"author": {"name": "Wojciech Baranowski", "email": "wbaranowski@protonmail.com", "date": "2019-09-28T11:39:19Z"}, "committer": {"name": "Wojciech Baranowski", "email": "wbaranowski@protonmail.com", "date": "2019-09-28T11:39:19Z"}, "message": "Implement CRs", "tree": {"sha": "8f7f3e447076cc9d21404b5ea1ac7918735cd124", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f7f3e447076cc9d21404b5ea1ac7918735cd124"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f3744a1b3dd1c3d6a27a6061fc1866194a453ee2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f3744a1b3dd1c3d6a27a6061fc1866194a453ee2", "html_url": "https://github.com/rust-lang/rust/commit/f3744a1b3dd1c3d6a27a6061fc1866194a453ee2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f3744a1b3dd1c3d6a27a6061fc1866194a453ee2/comments", "author": {"login": "Baranowski", "id": 530922, "node_id": "MDQ6VXNlcjUzMDkyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/530922?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Baranowski", "html_url": "https://github.com/Baranowski", "followers_url": "https://api.github.com/users/Baranowski/followers", "following_url": "https://api.github.com/users/Baranowski/following{/other_user}", "gists_url": "https://api.github.com/users/Baranowski/gists{/gist_id}", "starred_url": "https://api.github.com/users/Baranowski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Baranowski/subscriptions", "organizations_url": "https://api.github.com/users/Baranowski/orgs", "repos_url": "https://api.github.com/users/Baranowski/repos", "events_url": "https://api.github.com/users/Baranowski/events{/privacy}", "received_events_url": "https://api.github.com/users/Baranowski/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Baranowski", "id": 530922, "node_id": "MDQ6VXNlcjUzMDkyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/530922?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Baranowski", "html_url": "https://github.com/Baranowski", "followers_url": "https://api.github.com/users/Baranowski/followers", "following_url": "https://api.github.com/users/Baranowski/following{/other_user}", "gists_url": "https://api.github.com/users/Baranowski/gists{/gist_id}", "starred_url": "https://api.github.com/users/Baranowski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Baranowski/subscriptions", "organizations_url": "https://api.github.com/users/Baranowski/orgs", "repos_url": "https://api.github.com/users/Baranowski/repos", "events_url": "https://api.github.com/users/Baranowski/events{/privacy}", "received_events_url": "https://api.github.com/users/Baranowski/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f922483112e407d69c02eb653d7e4bc0ffe2cfa0", "url": "https://api.github.com/repos/rust-lang/rust/commits/f922483112e407d69c02eb653d7e4bc0ffe2cfa0", "html_url": "https://github.com/rust-lang/rust/commit/f922483112e407d69c02eb653d7e4bc0ffe2cfa0"}], "stats": {"total": 121, "additions": 46, "deletions": 75}, "files": [{"sha": "dae4db4003aeb714887648046390cf36f00933e6", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 9, "deletions": 17, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f3744a1b3dd1c3d6a27a6061fc1866194a453ee2/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3744a1b3dd1c3d6a27a6061fc1866194a453ee2/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=f3744a1b3dd1c3d6a27a6061fc1866194a453ee2", "patch": "@@ -1392,26 +1392,18 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         } else if !expr_t.is_primitive_ty() {\n             let mut err = self.no_such_field_err(field.span, field, expr_t);\n \n-            match expr_t.kind {\n+            match expr_t.peel_refs().kind {\n                 ty::Array(_, len) => {\n                     self.maybe_suggest_array_indexing(&mut err, expr, base, field, len);\n                 }\n                 ty::RawPtr(..) => {\n                     self.suggest_first_deref_field(&mut err, expr, base, field);\n                 }\n-                _ => {}\n-            }\n-\n-            let deref_t = match expr_t.kind {\n-                ty::Ref(_, ref_t, _) => ref_t,\n-                _ => &expr_t\n-            };\n-            match deref_t.kind {\n                 ty::Adt(def, _) if !def.is_enum() => {\n                     self.suggest_fields_on_recordish(&mut err, def, field);\n                 }\n                 ty::Param(param_ty) => {\n-                    self.explain_param(&mut err, param_ty);\n+                    self.point_at_param_definition(&mut err, param_ty);\n                 }\n                 _ => {}\n             }\n@@ -1502,21 +1494,21 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         err.emit();\n     }\n \n-    fn explain_param(\n-        &self,\n-        err: &mut DiagnosticBuilder<'_>,\n-        param: ty::ParamTy,\n-    ) {\n+    fn point_at_param_definition(&self, err: &mut DiagnosticBuilder<'_>, param: ty::ParamTy) {\n         let generics = self.tcx.generics_of(self.body_id.owner_def_id());\n-        let param_def_id = generics.type_param(&param, self.tcx).def_id;\n+        let generic_param = generics.type_param(&param, self.tcx);\n+        if let ty::GenericParamDefKind::Type{synthetic: Some(..), ..} = generic_param.kind {\n+            return;\n+        }\n+        let param_def_id = generic_param.def_id;\n         let param_hir_id = match self.tcx.hir().as_local_hir_id(param_def_id) {\n             Some(x) => x,\n             None    => return,\n         };\n         let param_span = self.tcx.hir().span(param_hir_id);\n         let param_name = self.tcx.hir().ty_param_name(param_hir_id);\n \n-        err.span_note(param_span, &format!(\"Type parameter '{}' was declared here\", param_name));\n+        err.span_label(param_span, &format!(\"type parameter '{}' declared here\", param_name));\n     }\n \n     fn suggest_fields_on_recordish("}, {"sha": "7bd0eaf77a95d7369dec79a8ed5921a9b42806c1", "filename": "src/test/ui/derived-errors/issue-30580.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3744a1b3dd1c3d6a27a6061fc1866194a453ee2/src%2Ftest%2Fui%2Fderived-errors%2Fissue-30580.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f3744a1b3dd1c3d6a27a6061fc1866194a453ee2/src%2Ftest%2Fui%2Fderived-errors%2Fissue-30580.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderived-errors%2Fissue-30580.stderr?ref=f3744a1b3dd1c3d6a27a6061fc1866194a453ee2", "patch": "@@ -2,7 +2,7 @@ error[E0609]: no field `c` on type `&Foo`\n   --> $DIR/issue-30580.rs:12:11\n    |\n LL |         b.c;\n-   |           ^\n+   |           ^ help: a field with a similar name exists: `a`\n \n error: aborting due to previous error\n "}, {"sha": "c7618e0835b8d93e613213b76d5da9f21f64200c", "filename": "src/test/ui/issues/issue-31011.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f3744a1b3dd1c3d6a27a6061fc1866194a453ee2/src%2Ftest%2Fui%2Fissues%2Fissue-31011.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f3744a1b3dd1c3d6a27a6061fc1866194a453ee2/src%2Ftest%2Fui%2Fissues%2Fissue-31011.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-31011.stderr?ref=f3744a1b3dd1c3d6a27a6061fc1866194a453ee2", "patch": "@@ -4,6 +4,9 @@ error[E0609]: no field `trace` on type `&T`\n LL |         if $ctx.trace {\n    |                 ^^^^^\n ...\n+LL | fn wrap<T>(context: &T) -> ()\n+   |         - type parameter 'T' declared here\n+LL | {\n LL |     log!(context, \"entered wrapper\");\n    |     --------------------------------- in this macro invocation\n "}, {"sha": "6526ef58a447978e0e096812f2dafc4464f55b2d", "filename": "src/test/ui/structs/struct-pat-derived-error.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3744a1b3dd1c3d6a27a6061fc1866194a453ee2/src%2Ftest%2Fui%2Fstructs%2Fstruct-pat-derived-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f3744a1b3dd1c3d6a27a6061fc1866194a453ee2/src%2Ftest%2Fui%2Fstructs%2Fstruct-pat-derived-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-pat-derived-error.stderr?ref=f3744a1b3dd1c3d6a27a6061fc1866194a453ee2", "patch": "@@ -2,7 +2,7 @@ error[E0609]: no field `d` on type `&A`\n   --> $DIR/struct-pat-derived-error.rs:8:31\n    |\n LL |         let A { x, y } = self.d;\n-   |                               ^\n+   |                               ^ help: a field with a similar name exists: `b`\n \n error[E0026]: struct `A` does not have fields named `x`, `y`\n   --> $DIR/struct-pat-derived-error.rs:8:17"}, {"sha": "c57e8149574c94d3b2b90b050c1e9ce7de83f5cd", "filename": "src/test/ui/typeck/issue-52082-type-param-shadows-existing-type.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f3744a1b3dd1c3d6a27a6061fc1866194a453ee2/src%2Ftest%2Fui%2Ftypeck%2Fissue-52082-type-param-shadows-existing-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3744a1b3dd1c3d6a27a6061fc1866194a453ee2/src%2Ftest%2Fui%2Ftypeck%2Fissue-52082-type-param-shadows-existing-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-52082-type-param-shadows-existing-type.rs?ref=f3744a1b3dd1c3d6a27a6061fc1866194a453ee2", "previous_filename": "src/test/ui/typeck/issue-52082.rs"}, {"sha": "4be4c91dfc2c3ffbd4cbac25a471e8aa3f8bb0d4", "filename": "src/test/ui/typeck/issue-52082-type-param-shadows-existing-type.stderr", "status": "renamed", "additions": 32, "deletions": 56, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/f3744a1b3dd1c3d6a27a6061fc1866194a453ee2/src%2Ftest%2Fui%2Ftypeck%2Fissue-52082-type-param-shadows-existing-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f3744a1b3dd1c3d6a27a6061fc1866194a453ee2/src%2Ftest%2Fui%2Ftypeck%2Fissue-52082-type-param-shadows-existing-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-52082-type-param-shadows-existing-type.stderr?ref=f3744a1b3dd1c3d6a27a6061fc1866194a453ee2", "patch": "@@ -1,98 +1,74 @@\n error[E0609]: no field `x` on type `&Point`\n-  --> $DIR/issue-52082.rs:31:11\n+  --> $DIR/issue-52082-type-param-shadows-existing-type.rs:31:11\n    |\n+LL |     fn equals_ref<Point>(a: &Point, b: &Point) -> bool\n+   |                   ----- type parameter 'Point' declared here\n+LL |     {\n LL |         a.x == b.x && a.y == b.y\n    |           ^\n-   |\n-note: Type parameter 'Point' was declared here\n-  --> $DIR/issue-52082.rs:29:19\n-   |\n-LL |     fn equals_ref<Point>(a: &Point, b: &Point) -> bool\n-   |                   ^^^^^\n \n error[E0609]: no field `x` on type `&Point`\n-  --> $DIR/issue-52082.rs:31:18\n+  --> $DIR/issue-52082-type-param-shadows-existing-type.rs:31:18\n    |\n+LL |     fn equals_ref<Point>(a: &Point, b: &Point) -> bool\n+   |                   ----- type parameter 'Point' declared here\n+LL |     {\n LL |         a.x == b.x && a.y == b.y\n    |                  ^\n-   |\n-note: Type parameter 'Point' was declared here\n-  --> $DIR/issue-52082.rs:29:19\n-   |\n-LL |     fn equals_ref<Point>(a: &Point, b: &Point) -> bool\n-   |                   ^^^^^\n \n error[E0609]: no field `y` on type `&Point`\n-  --> $DIR/issue-52082.rs:31:25\n+  --> $DIR/issue-52082-type-param-shadows-existing-type.rs:31:25\n    |\n+LL |     fn equals_ref<Point>(a: &Point, b: &Point) -> bool\n+   |                   ----- type parameter 'Point' declared here\n+LL |     {\n LL |         a.x == b.x && a.y == b.y\n    |                         ^\n-   |\n-note: Type parameter 'Point' was declared here\n-  --> $DIR/issue-52082.rs:29:19\n-   |\n-LL |     fn equals_ref<Point>(a: &Point, b: &Point) -> bool\n-   |                   ^^^^^\n \n error[E0609]: no field `y` on type `&Point`\n-  --> $DIR/issue-52082.rs:31:32\n+  --> $DIR/issue-52082-type-param-shadows-existing-type.rs:31:32\n    |\n+LL |     fn equals_ref<Point>(a: &Point, b: &Point) -> bool\n+   |                   ----- type parameter 'Point' declared here\n+LL |     {\n LL |         a.x == b.x && a.y == b.y\n    |                                ^\n-   |\n-note: Type parameter 'Point' was declared here\n-  --> $DIR/issue-52082.rs:29:19\n-   |\n-LL |     fn equals_ref<Point>(a: &Point, b: &Point) -> bool\n-   |                   ^^^^^\n \n error[E0609]: no field `x` on type `Point`\n-  --> $DIR/issue-52082.rs:39:11\n+  --> $DIR/issue-52082-type-param-shadows-existing-type.rs:39:11\n    |\n+LL |     fn equals_val<Point>(a: Point, b: Point) -> bool\n+   |                   ----- type parameter 'Point' declared here\n+LL |     {\n LL |         a.x == b.x && a.y == b.y\n    |           ^\n-   |\n-note: Type parameter 'Point' was declared here\n-  --> $DIR/issue-52082.rs:37:19\n-   |\n-LL |     fn equals_val<Point>(a: Point, b: Point) -> bool\n-   |                   ^^^^^\n \n error[E0609]: no field `x` on type `Point`\n-  --> $DIR/issue-52082.rs:39:18\n+  --> $DIR/issue-52082-type-param-shadows-existing-type.rs:39:18\n    |\n+LL |     fn equals_val<Point>(a: Point, b: Point) -> bool\n+   |                   ----- type parameter 'Point' declared here\n+LL |     {\n LL |         a.x == b.x && a.y == b.y\n    |                  ^\n-   |\n-note: Type parameter 'Point' was declared here\n-  --> $DIR/issue-52082.rs:37:19\n-   |\n-LL |     fn equals_val<Point>(a: Point, b: Point) -> bool\n-   |                   ^^^^^\n \n error[E0609]: no field `y` on type `Point`\n-  --> $DIR/issue-52082.rs:39:25\n+  --> $DIR/issue-52082-type-param-shadows-existing-type.rs:39:25\n    |\n+LL |     fn equals_val<Point>(a: Point, b: Point) -> bool\n+   |                   ----- type parameter 'Point' declared here\n+LL |     {\n LL |         a.x == b.x && a.y == b.y\n    |                         ^\n-   |\n-note: Type parameter 'Point' was declared here\n-  --> $DIR/issue-52082.rs:37:19\n-   |\n-LL |     fn equals_val<Point>(a: Point, b: Point) -> bool\n-   |                   ^^^^^\n \n error[E0609]: no field `y` on type `Point`\n-  --> $DIR/issue-52082.rs:39:32\n+  --> $DIR/issue-52082-type-param-shadows-existing-type.rs:39:32\n    |\n+LL |     fn equals_val<Point>(a: Point, b: Point) -> bool\n+   |                   ----- type parameter 'Point' declared here\n+LL |     {\n LL |         a.x == b.x && a.y == b.y\n    |                                ^\n-   |\n-note: Type parameter 'Point' was declared here\n-  --> $DIR/issue-52082.rs:37:19\n-   |\n-LL |     fn equals_val<Point>(a: Point, b: Point) -> bool\n-   |                   ^^^^^\n \n error: aborting due to 8 previous errors\n ", "previous_filename": "src/test/ui/typeck/issue-52082.stderr"}]}