{"sha": "af58854168f2ae6b0af89d7945584cb78e276193", "node_id": "C_kwDOAAsO6NoAKGFmNTg4NTQxNjhmMmFlNmIwYWY4OWQ3OTQ1NTg0Y2I3OGUyNzYxOTM", "commit": {"author": {"name": "dimi", "email": "dimi.polonski@gmail.com", "date": "2022-10-26T12:40:03Z"}, "committer": {"name": "dimi", "email": "dimi.polonski@gmail.com", "date": "2023-01-24T13:21:57Z"}, "message": "add feature gate tests for DispatchFromDyn", "tree": {"sha": "b1a4ce00688d71d69204eadcc31f1fd412113024", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b1a4ce00688d71d69204eadcc31f1fd412113024"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af58854168f2ae6b0af89d7945584cb78e276193", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af58854168f2ae6b0af89d7945584cb78e276193", "html_url": "https://github.com/rust-lang/rust/commit/af58854168f2ae6b0af89d7945584cb78e276193", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af58854168f2ae6b0af89d7945584cb78e276193/comments", "author": {"login": "dimpolo", "id": 33688001, "node_id": "MDQ6VXNlcjMzNjg4MDAx", "avatar_url": "https://avatars.githubusercontent.com/u/33688001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dimpolo", "html_url": "https://github.com/dimpolo", "followers_url": "https://api.github.com/users/dimpolo/followers", "following_url": "https://api.github.com/users/dimpolo/following{/other_user}", "gists_url": "https://api.github.com/users/dimpolo/gists{/gist_id}", "starred_url": "https://api.github.com/users/dimpolo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dimpolo/subscriptions", "organizations_url": "https://api.github.com/users/dimpolo/orgs", "repos_url": "https://api.github.com/users/dimpolo/repos", "events_url": "https://api.github.com/users/dimpolo/events{/privacy}", "received_events_url": "https://api.github.com/users/dimpolo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dimpolo", "id": 33688001, "node_id": "MDQ6VXNlcjMzNjg4MDAx", "avatar_url": "https://avatars.githubusercontent.com/u/33688001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dimpolo", "html_url": "https://github.com/dimpolo", "followers_url": "https://api.github.com/users/dimpolo/followers", "following_url": "https://api.github.com/users/dimpolo/following{/other_user}", "gists_url": "https://api.github.com/users/dimpolo/gists{/gist_id}", "starred_url": "https://api.github.com/users/dimpolo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dimpolo/subscriptions", "organizations_url": "https://api.github.com/users/dimpolo/orgs", "repos_url": "https://api.github.com/users/dimpolo/repos", "events_url": "https://api.github.com/users/dimpolo/events{/privacy}", "received_events_url": "https://api.github.com/users/dimpolo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2d1cb2c22016ae003ab51d9654746cc4fc5200a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2d1cb2c22016ae003ab51d9654746cc4fc5200a", "html_url": "https://github.com/rust-lang/rust/commit/a2d1cb2c22016ae003ab51d9654746cc4fc5200a"}], "stats": {"total": 101, "additions": 101, "deletions": 0}, "files": [{"sha": "83366ea02b09a4be662212c0425827ea4497c1d0", "filename": "tests/ui/feature-gates/feature-gate-dispatch-from-dyn-cell.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/af58854168f2ae6b0af89d7945584cb78e276193/tests%2Fui%2Ffeature-gates%2Ffeature-gate-dispatch-from-dyn-cell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af58854168f2ae6b0af89d7945584cb78e276193/tests%2Fui%2Ffeature-gates%2Ffeature-gate-dispatch-from-dyn-cell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffeature-gates%2Ffeature-gate-dispatch-from-dyn-cell.rs?ref=af58854168f2ae6b0af89d7945584cb78e276193", "patch": "@@ -0,0 +1,9 @@\n+// Check that even though Cell: DispatchFromDyn it remains an invalid self parameter type\n+\n+use std::cell::Cell;\n+\n+trait Trait{\n+    fn cell(self: Cell<&Self>); //~ ERROR invalid `self` parameter type: Cell<&Self>\n+}\n+\n+fn main() {}"}, {"sha": "ce06ce916a7587823dfa66a8427635cca3b0102c", "filename": "tests/ui/feature-gates/feature-gate-dispatch-from-dyn-cell.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/af58854168f2ae6b0af89d7945584cb78e276193/tests%2Fui%2Ffeature-gates%2Ffeature-gate-dispatch-from-dyn-cell.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af58854168f2ae6b0af89d7945584cb78e276193/tests%2Fui%2Ffeature-gates%2Ffeature-gate-dispatch-from-dyn-cell.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffeature-gates%2Ffeature-gate-dispatch-from-dyn-cell.stderr?ref=af58854168f2ae6b0af89d7945584cb78e276193", "patch": "@@ -0,0 +1,12 @@\n+error[E0307]: invalid `self` parameter type: Cell<&Self>\n+  --> $DIR/feature-gate-dispatch-from-dyn-cell.rs:6:19\n+   |\n+LL |     fn cell(self: Cell<&Self>);\n+   |                   ^^^^^^^^^^^\n+   |\n+   = note: type of `self` must be `Self` or a type that dereferences to it\n+   = help: consider changing to `self`, `&self`, `&mut self`, `self: Box<Self>`, `self: Rc<Self>`, `self: Arc<Self>`, or `self: Pin<P>` (where P is one of the previous types except `Self`)\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0307`."}, {"sha": "23857cbaca85e700de69af8bc9b663edb77eb2cd", "filename": "tests/ui/feature-gates/feature-gate-dispatch-from-dyn-missing-impl.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/af58854168f2ae6b0af89d7945584cb78e276193/tests%2Fui%2Ffeature-gates%2Ffeature-gate-dispatch-from-dyn-missing-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af58854168f2ae6b0af89d7945584cb78e276193/tests%2Fui%2Ffeature-gates%2Ffeature-gate-dispatch-from-dyn-missing-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffeature-gates%2Ffeature-gate-dispatch-from-dyn-missing-impl.rs?ref=af58854168f2ae6b0af89d7945584cb78e276193", "patch": "@@ -0,0 +1,35 @@\n+// Check that a self parameter type requires a DispatchFromDyn impl to be object safe\n+\n+#![feature(arbitrary_self_types, unsize, coerce_unsized)]\n+\n+use std::{\n+    marker::Unsize,\n+    ops::{CoerceUnsized, Deref},\n+};\n+\n+struct Ptr<T: ?Sized>(Box<T>);\n+\n+impl<T: ?Sized> Deref for Ptr<T> {\n+    type Target = T;\n+\n+    fn deref(&self) -> &T {\n+        &*self.0\n+    }\n+}\n+\n+impl<T: Unsize<U> + ?Sized, U: ?Sized> CoerceUnsized<Ptr<U>> for Ptr<T> {}\n+// Because this impl is missing the coercion below fails.\n+// impl<T: Unsize<U> + ?Sized, U: ?Sized> DispatchFromDyn<Ptr<U>> for Ptr<T> {}\n+\n+trait Trait {\n+    fn ptr(self: Ptr<Self>);\n+}\n+impl Trait for i32 {\n+    fn ptr(self: Ptr<Self>) {}\n+}\n+\n+fn main() {\n+    Ptr(Box::new(4)) as Ptr<dyn Trait>;\n+    //~^ ERROR the trait `Trait` cannot be made into an object\n+    //~^^ ERROR the trait `Trait` cannot be made into an object\n+}"}, {"sha": "d81eade8e9bfb74dd62e2013e51240cb54832d20", "filename": "tests/ui/feature-gates/feature-gate-dispatch-from-dyn-missing-impl.stderr", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/af58854168f2ae6b0af89d7945584cb78e276193/tests%2Fui%2Ffeature-gates%2Ffeature-gate-dispatch-from-dyn-missing-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af58854168f2ae6b0af89d7945584cb78e276193/tests%2Fui%2Ffeature-gates%2Ffeature-gate-dispatch-from-dyn-missing-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffeature-gates%2Ffeature-gate-dispatch-from-dyn-missing-impl.stderr?ref=af58854168f2ae6b0af89d7945584cb78e276193", "patch": "@@ -0,0 +1,45 @@\n+error[E0038]: the trait `Trait` cannot be made into an object\n+  --> $DIR/feature-gate-dispatch-from-dyn-missing-impl.rs:32:25\n+   |\n+LL |     fn ptr(self: Ptr<Self>);\n+   |                  --------- help: consider changing method `ptr`'s `self` parameter to be `&self`: `&Self`\n+...\n+LL |     Ptr(Box::new(4)) as Ptr<dyn Trait>;\n+   |                         ^^^^^^^^^^^^^^ `Trait` cannot be made into an object\n+   |\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/feature-gate-dispatch-from-dyn-missing-impl.rs:25:18\n+   |\n+LL | trait Trait {\n+   |       ----- this trait cannot be made into an object...\n+LL |     fn ptr(self: Ptr<Self>);\n+   |                  ^^^^^^^^^ ...because method `ptr`'s `self` parameter cannot be dispatched on\n+\n+error[E0038]: the trait `Trait` cannot be made into an object\n+  --> $DIR/feature-gate-dispatch-from-dyn-missing-impl.rs:32:5\n+   |\n+LL |     fn ptr(self: Ptr<Self>);\n+   |                  --------- help: consider changing method `ptr`'s `self` parameter to be `&self`: `&Self`\n+...\n+LL |     Ptr(Box::new(4)) as Ptr<dyn Trait>;\n+   |     ^^^^^^^^^^^^^^^^ `Trait` cannot be made into an object\n+   |\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/feature-gate-dispatch-from-dyn-missing-impl.rs:25:18\n+   |\n+LL | trait Trait {\n+   |       ----- this trait cannot be made into an object...\n+LL |     fn ptr(self: Ptr<Self>);\n+   |                  ^^^^^^^^^ ...because method `ptr`'s `self` parameter cannot be dispatched on\n+note: required for `Ptr<{integer}>` to implement `CoerceUnsized<Ptr<dyn Trait>>`\n+  --> $DIR/feature-gate-dispatch-from-dyn-missing-impl.rs:20:40\n+   |\n+LL | impl<T: Unsize<U> + ?Sized, U: ?Sized> CoerceUnsized<Ptr<U>> for Ptr<T> {}\n+   |         ---------                      ^^^^^^^^^^^^^^^^^^^^^     ^^^^^^\n+   |         |\n+   |         unsatisfied trait bound introduced here\n+   = note: required by cast to type `Ptr<dyn Trait>`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0038`."}]}