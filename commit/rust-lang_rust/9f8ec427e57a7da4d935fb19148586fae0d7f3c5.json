{"sha": "9f8ec427e57a7da4d935fb19148586fae0d7f3c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmOGVjNDI3ZTU3YTdkYTRkOTM1ZmIxOTE0ODU4NmZhZTBkN2YzYzU=", "commit": {"author": {"name": "Victor Berger", "email": "victor.berger@m4x.org", "date": "2014-09-11T17:14:43Z"}, "committer": {"name": "Victor Berger", "email": "victor.berger@m4x.org", "date": "2014-09-12T09:24:31Z"}, "message": "New lint : unused_extern_crate. #10385", "tree": {"sha": "cc12c41e156719198b188d38e5596678e570523c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc12c41e156719198b188d38e5596678e570523c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f8ec427e57a7da4d935fb19148586fae0d7f3c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f8ec427e57a7da4d935fb19148586fae0d7f3c5", "html_url": "https://github.com/rust-lang/rust/commit/9f8ec427e57a7da4d935fb19148586fae0d7f3c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f8ec427e57a7da4d935fb19148586fae0d7f3c5/comments", "author": {"login": "elinorbgr", "id": 3009227, "node_id": "MDQ6VXNlcjMwMDkyMjc=", "avatar_url": "https://avatars.githubusercontent.com/u/3009227?v=4", "gravatar_id": "", "url": "https://api.github.com/users/elinorbgr", "html_url": "https://github.com/elinorbgr", "followers_url": "https://api.github.com/users/elinorbgr/followers", "following_url": "https://api.github.com/users/elinorbgr/following{/other_user}", "gists_url": "https://api.github.com/users/elinorbgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/elinorbgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/elinorbgr/subscriptions", "organizations_url": "https://api.github.com/users/elinorbgr/orgs", "repos_url": "https://api.github.com/users/elinorbgr/repos", "events_url": "https://api.github.com/users/elinorbgr/events{/privacy}", "received_events_url": "https://api.github.com/users/elinorbgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "elinorbgr", "id": 3009227, "node_id": "MDQ6VXNlcjMwMDkyMjc=", "avatar_url": "https://avatars.githubusercontent.com/u/3009227?v=4", "gravatar_id": "", "url": "https://api.github.com/users/elinorbgr", "html_url": "https://github.com/elinorbgr", "followers_url": "https://api.github.com/users/elinorbgr/followers", "following_url": "https://api.github.com/users/elinorbgr/following{/other_user}", "gists_url": "https://api.github.com/users/elinorbgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/elinorbgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/elinorbgr/subscriptions", "organizations_url": "https://api.github.com/users/elinorbgr/orgs", "repos_url": "https://api.github.com/users/elinorbgr/repos", "events_url": "https://api.github.com/users/elinorbgr/events{/privacy}", "received_events_url": "https://api.github.com/users/elinorbgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "805cf81b778f7b0d17a4afa3af93f975d5351307", "url": "https://api.github.com/repos/rust-lang/rust/commits/805cf81b778f7b0d17a4afa3af93f975d5351307", "html_url": "https://github.com/rust-lang/rust/commit/805cf81b778f7b0d17a4afa3af93f975d5351307"}], "stats": {"total": 103, "additions": 100, "deletions": 3}, "files": [{"sha": "58440a526ee20a65a6a901c69107edb53d4f46ac", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f8ec427e57a7da4d935fb19148586fae0d7f3c5/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f8ec427e57a7da4d935fb19148586fae0d7f3c5/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=9f8ec427e57a7da4d935fb19148586fae0d7f3c5", "patch": "@@ -1525,6 +1525,9 @@ impl LintPass for Stability {\n declare_lint!(pub UNUSED_IMPORTS, Warn,\n               \"imports that are never used\")\n \n+declare_lint!(pub UNUSED_EXTERN_CRATE, Allow,\n+              \"extern crates that are never used\")\n+\n declare_lint!(pub UNNECESSARY_QUALIFICATION, Allow,\n               \"detects unnecessarily qualified names\")\n \n@@ -1569,6 +1572,7 @@ impl LintPass for HardwiredLints {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(\n             UNUSED_IMPORTS,\n+            UNUSED_EXTERN_CRATE,\n             UNNECESSARY_QUALIFICATION,\n             UNRECOGNIZED_LINT,\n             UNUSED_VARIABLE,"}, {"sha": "a464de49b4df523dbbb0126bb7839c3c55602e6a", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f8ec427e57a7da4d935fb19148586fae0d7f3c5/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f8ec427e57a7da4d935fb19148586fae0d7f3c5/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=9f8ec427e57a7da4d935fb19148586fae0d7f3c5", "patch": "@@ -201,7 +201,7 @@ impl LintStore {\n \n         add_lint_group!(sess, \"unused\",\n                         UNUSED_IMPORTS, UNUSED_VARIABLE, DEAD_ASSIGNMENT, DEAD_CODE,\n-                        UNUSED_MUT, UNREACHABLE_CODE)\n+                        UNUSED_MUT, UNREACHABLE_CODE, UNUSED_EXTERN_CRATE)\n \n         // We have one lint pass defined in this module.\n         self.register_pass(sess, false, box GatherNodeLevels as LintPassObject);"}, {"sha": "b20f230bc3c6e88b718ee3c3aadb5dee2f5de7f3", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 63, "deletions": 2, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/9f8ec427e57a7da4d935fb19148586fae0d7f3c5/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f8ec427e57a7da4d935fb19148586fae0d7f3c5/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=9f8ec427e57a7da4d935fb19148586fae0d7f3c5", "patch": "@@ -21,7 +21,7 @@ use middle::subst::{ParamSpace, FnSpace, TypeSpace};\n use middle::ty::{ExplicitSelfCategory, StaticExplicitSelfCategory};\n use util::nodemap::{NodeMap, DefIdSet, FnvHashMap};\n \n-use syntax::ast::{Arm, BindByRef, BindByValue, BindingMode, Block, Crate};\n+use syntax::ast::{Arm, BindByRef, BindByValue, BindingMode, Block, Crate, CrateNum};\n use syntax::ast::{DeclItem, DefId, Expr, ExprAgain, ExprBreak, ExprField};\n use syntax::ast::{ExprFnBlock, ExprForLoop, ExprLoop, ExprWhile, ExprMethodCall};\n use syntax::ast::{ExprPath, ExprProc, ExprStruct, ExprUnboxedFn, FnDecl};\n@@ -899,6 +899,7 @@ struct Resolver<'a> {\n     emit_errors: bool,\n \n     used_imports: HashSet<(NodeId, Namespace)>,\n+    used_crates: HashSet<CrateNum>,\n }\n \n struct BuildReducedGraphVisitor<'a, 'b:'a> {\n@@ -987,6 +988,7 @@ impl<'a> Resolver<'a> {\n             export_map2: RefCell::new(NodeMap::new()),\n             trait_map: NodeMap::new(),\n             used_imports: HashSet::new(),\n+            used_crates: HashSet::new(),\n             external_exports: DefIdSet::new(),\n             last_private: NodeMap::new(),\n \n@@ -2453,7 +2455,14 @@ impl<'a> Resolver<'a> {\n                                     debug!(\"(resolving single import) found \\\n                                             import in ns {:?}\", namespace);\n                                     let id = import_resolution.id(namespace);\n+                                    // track used imports and extern crates as well\n                                     this.used_imports.insert((id, namespace));\n+                                    match target_module.def_id.get() {\n+                                        Some(DefId{krate: kid, ..}) => {\n+                                            this.used_crates.insert(kid);\n+                                        },\n+                                        _ => {}\n+                                    }\n                                     return BoundResult(target_module, bindings);\n                                 }\n                             }\n@@ -2496,6 +2505,11 @@ impl<'a> Resolver<'a> {\n                     Some(module) => {\n                         debug!(\"(resolving single import) found external \\\n                                 module\");\n+                        // track the module as used.\n+                        match module.def_id.get() {\n+                            Some(DefId{krate: kid, ..}) => { self.used_crates.insert(kid); },\n+                            _ => {}\n+                        }\n                         let name_bindings =\n                             Rc::new(Resolver::create_name_bindings_from_module(\n                                 module));\n@@ -3030,6 +3044,14 @@ impl<'a> Resolver<'a> {\n                                         (_, _) => {\n                                             search_module = module_def.clone();\n \n+                                            // track extern crates for unused_extern_crate lint\n+                                            match module_def.def_id.get() {\n+                                                Some(did) => {\n+                                                    self.used_crates.insert(did.krate);\n+                                                }\n+                                                _ => {}\n+                                            }\n+\n                                             // Keep track of the closest\n                                             // private module used when\n                                             // resolving this import chain.\n@@ -3213,7 +3235,12 @@ impl<'a> Resolver<'a> {\n                     Some(target) => {\n                         debug!(\"(resolving item in lexical scope) using \\\n                                 import resolution\");\n+                        // track used imports and extern crates as well\n                         self.used_imports.insert((import_resolution.id(namespace), namespace));\n+                        match target.target_module.def_id.get() {\n+                            Some(DefId{krate: kid, ..}) => { self.used_crates.insert(kid); },\n+                            _ => {}\n+                        }\n                         return Success((target, false));\n                     }\n                 }\n@@ -3492,7 +3519,12 @@ impl<'a> Resolver<'a> {\n                     Some(target) => {\n                         debug!(\"(resolving name in module) resolved to \\\n                                 import\");\n+                        // track used imports and extern crates as well\n                         self.used_imports.insert((import_resolution.id(namespace), namespace));\n+                        match target.target_module.def_id.get() {\n+                            Some(DefId{krate: kid, ..}) => { self.used_crates.insert(kid); },\n+                            _ => {}\n+                        }\n                         return Success((target, true));\n                     }\n                 }\n@@ -5061,7 +5093,14 @@ impl<'a> Resolver<'a> {\n                             Some(def) => {\n                                 // Found it.\n                                 let id = import_resolution.id(namespace);\n+                                // track imports and extern crates as well\n                                 self.used_imports.insert((id, namespace));\n+                                match target.target_module.def_id.get() {\n+                                    Some(DefId{krate: kid, ..}) => {\n+                                        self.used_crates.insert(kid);\n+                                    },\n+                                    _ => {}\n+                                }\n                                 return ImportNameDefinition(def, LastMod(AllPublic));\n                             }\n                             None => {\n@@ -5085,6 +5124,8 @@ impl<'a> Resolver<'a> {\n                     match module.def_id.get() {\n                         None => {} // Continue.\n                         Some(def_id) => {\n+                            // track used crates\n+                            self.used_crates.insert(def_id.krate);\n                             let lp = if module.is_public {LastMod(AllPublic)} else {\n                                 LastMod(DependsOn(def_id))\n                             };\n@@ -5168,6 +5209,10 @@ impl<'a> Resolver<'a> {\n             },\n             _ => (),\n         }\n+        match containing_module.def_id.get() {\n+            Some(DefId{krate: kid, ..}) => { self.used_crates.insert(kid); },\n+            _ => {}\n+        }\n         return Some(def);\n     }\n \n@@ -5787,6 +5832,10 @@ impl<'a> Resolver<'a> {\n                 if self.trait_item_map.borrow().contains_key(&(name, did)) {\n                     add_trait_info(&mut found_traits, did, name);\n                     self.used_imports.insert((import.type_id, TypeNS));\n+                    match target.target_module.def_id.get() {\n+                        Some(DefId{krate: kid, ..}) => { self.used_crates.insert(kid); },\n+                        _ => {}\n+                    }\n                 }\n             }\n \n@@ -5859,10 +5908,22 @@ impl<'a> Resolver<'a> {\n         if vi.span == DUMMY_SP { return }\n \n         match vi.node {\n-            ViewItemExternCrate(..) => {} // ignore\n+            ViewItemExternCrate(_, _, id) => {\n+                match self.session.cstore.find_extern_mod_stmt_cnum(id)\n+                {\n+                    Some(crate_num) => if !self.used_crates.contains(&crate_num) {\n+                    self.session.add_lint(lint::builtin::UNUSED_EXTERN_CRATE,\n+                                          id,\n+                                          vi.span,\n+                                          \"unused extern crate\".to_string());\n+                    },\n+                    _ => {}\n+                }\n+            },\n             ViewItemUse(ref p) => {\n                 match p.node {\n                     ViewPathSimple(_, _, id) => self.finalize_import(id, p.span),\n+\n                     ViewPathList(_, ref list, _) => {\n                         for i in list.iter() {\n                             self.finalize_import(i.node.id(), i.span);"}, {"sha": "a4dfdbdaeae01ed24a11ffbeadcc48f6377ef5e0", "filename": "src/test/compile-fail/lint-unused-extern-crate.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/9f8ec427e57a7da4d935fb19148586fae0d7f3c5/src%2Ftest%2Fcompile-fail%2Flint-unused-extern-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f8ec427e57a7da4d935fb19148586fae0d7f3c5/src%2Ftest%2Fcompile-fail%2Flint-unused-extern-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unused-extern-crate.rs?ref=9f8ec427e57a7da4d935fb19148586fae0d7f3c5", "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(globs)]\n+#![deny(unused_extern_crate)]\n+#![allow(unused_variable)]\n+\n+extern crate libc; //~ ERROR: unused extern crate\n+\n+extern crate \"collections\" as collecs; // no error, it is used\n+\n+extern crate rand; // no error, the use marks it as used\n+                   // even if imported objects aren't used\n+\n+extern crate time; // no error, the use * marks it as used\n+\n+#[allow(unused_imports)]\n+use rand::isaac::IsaacRng;\n+\n+use time::*;\n+\n+fn main() {\n+    let x: collecs::vec::Vec<uint> = Vec::new();\n+    let y = now();\n+}"}]}