{"sha": "279af1d7e06b5b5dcb0d0538d6f11ad5e974127a", "node_id": "C_kwDOAAsO6NoAKDI3OWFmMWQ3ZTA2YjViNWRjYjBkMDUzOGQ2ZjExYWQ1ZTk3NDEyN2E", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-07-31T12:17:23Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-07-31T12:17:23Z"}, "message": "Remove Clean trait implementation for hir::Path", "tree": {"sha": "bb4cd52dc137ea66da9422fd8b18084c5d0238e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb4cd52dc137ea66da9422fd8b18084c5d0238e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/279af1d7e06b5b5dcb0d0538d6f11ad5e974127a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/279af1d7e06b5b5dcb0d0538d6f11ad5e974127a", "html_url": "https://github.com/rust-lang/rust/commit/279af1d7e06b5b5dcb0d0538d6f11ad5e974127a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/279af1d7e06b5b5dcb0d0538d6f11ad5e974127a/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "482153bc208df5fc236cc0e1cddb24e93fcc332f", "url": "https://api.github.com/repos/rust-lang/rust/commits/482153bc208df5fc236cc0e1cddb24e93fcc332f", "html_url": "https://github.com/rust-lang/rust/commit/482153bc208df5fc236cc0e1cddb24e93fcc332f"}], "stats": {"total": 14, "additions": 6, "deletions": 8}, "files": [{"sha": "0d2a2d92725d706b7d33ed578970e9cca2fe388e", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/279af1d7e06b5b5dcb0d0538d6f11ad5e974127a/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/279af1d7e06b5b5dcb0d0538d6f11ad5e974127a/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=279af1d7e06b5b5dcb0d0538d6f11ad5e974127a", "patch": "@@ -1019,7 +1019,7 @@ impl<'tcx> Clean<'tcx, bool> for hir::IsAuto {\n \n impl<'tcx> Clean<'tcx, Path> for hir::TraitRef<'tcx> {\n     fn clean(&self, cx: &mut DocContext<'tcx>) -> Path {\n-        let path = self.path.clean(cx);\n+        let path = clean_path(self.path, cx);\n         register_res(cx, path.res);\n         path\n     }\n@@ -1344,7 +1344,7 @@ fn clean_qpath<'tcx>(hir_ty: &hir::Ty<'tcx>, cx: &mut DocContext<'tcx>) -> Type\n             if let Some(expanded) = maybe_expand_private_type_alias(cx, path) {\n                 expanded\n             } else {\n-                let path = path.clean(cx);\n+                let path = clean_path(path, cx);\n                 resolve_type(cx, path)\n             }\n         }\n@@ -1380,7 +1380,7 @@ fn clean_qpath<'tcx>(hir_ty: &hir::Ty<'tcx>, cx: &mut DocContext<'tcx>) -> Type\n                 ty::Error(_) => return Type::Infer,\n                 _ => bug!(\"clean: expected associated type, found `{:?}`\", ty),\n             };\n-            let trait_ = hir::Path { span, res, segments: &[] }.clean(cx);\n+            let trait_ = clean_path(&hir::Path { span, res, segments: &[] }, cx);\n             register_res(cx, trait_.res);\n             let self_def_id = res.opt_def_id();\n             let self_type = clean_ty(qself, cx);\n@@ -1857,10 +1857,8 @@ fn clean_variant_data<'tcx>(\n     }\n }\n \n-impl<'tcx> Clean<'tcx, Path> for hir::Path<'tcx> {\n-    fn clean(&self, cx: &mut DocContext<'tcx>) -> Path {\n-        Path { res: self.res, segments: self.segments.iter().map(|x| x.clean(cx)).collect() }\n-    }\n+fn clean_path<'tcx>(path: &hir::Path<'tcx>, cx: &mut DocContext<'tcx>) -> Path {\n+    Path { res: path.res, segments: path.segments.iter().map(|x| x.clean(cx)).collect() }\n }\n \n impl<'tcx> Clean<'tcx, GenericArgs> for hir::GenericArgs<'tcx> {\n@@ -2172,7 +2170,7 @@ fn clean_use_statement<'tcx>(\n \n     // Also check whether imports were asked to be inlined, in case we're trying to re-export a\n     // crate in Rust 2018+\n-    let path = path.clean(cx);\n+    let path = clean_path(path, cx);\n     let inner = if kind == hir::UseKind::Glob {\n         if !denied {\n             let mut visited = FxHashSet::default();"}]}