{"sha": "0ac6c3aacbf70d24a5e13b648e650dffec699952", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhYzZjM2FhY2JmNzBkMjRhNWUxM2I2NDhlNjUwZGZmZWM2OTk5NTI=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-11-12T16:20:38Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-11-12T16:20:38Z"}, "message": "rustc_driver: expose a way to override query providers in CompileController.", "tree": {"sha": "5dd572f2bfa8f17f183ba7a24fedc7195eefb750", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5dd572f2bfa8f17f183ba7a24fedc7195eefb750"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ac6c3aacbf70d24a5e13b648e650dffec699952", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ac6c3aacbf70d24a5e13b648e650dffec699952", "html_url": "https://github.com/rust-lang/rust/commit/0ac6c3aacbf70d24a5e13b648e650dffec699952", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ac6c3aacbf70d24a5e13b648e650dffec699952/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18b3a9a09916da9efc64af0b265ea576d9113ae9", "url": "https://api.github.com/repos/rust-lang/rust/commits/18b3a9a09916da9efc64af0b265ea576d9113ae9", "html_url": "https://github.com/rust-lang/rust/commit/18b3a9a09916da9efc64af0b265ea576d9113ae9"}], "stats": {"total": 74, "additions": 50, "deletions": 24}, "files": [{"sha": "ba1c6f2b15f443bea84a0c434eb43f7862817b84", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 39, "deletions": 18, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/0ac6c3aacbf70d24a5e13b648e650dffec699952/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ac6c3aacbf70d24a5e13b648e650dffec699952/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=0ac6c3aacbf70d24a5e13b648e650dffec699952", "patch": "@@ -207,7 +207,8 @@ pub fn compile_input(sess: &Session,\n             None\n         };\n \n-        phase_3_run_analysis_passes(sess,\n+        phase_3_run_analysis_passes(control,\n+                                    sess,\n                                     cstore,\n                                     hir_map,\n                                     analysis,\n@@ -348,6 +349,13 @@ pub struct CompileController<'a> {\n     pub keep_ast: bool,\n     // -Zcontinue-parse-after-error\n     pub continue_parse_after_error: bool,\n+\n+    /// Allows overriding default rustc query providers,\n+    /// after `default_provide` has installed them.\n+    pub provide: Box<Fn(&mut ty::maps::Providers) + 'a>,\n+    /// Same as `provide`, but only for non-local crates,\n+    /// applied after `default_provide_extern`.\n+    pub provide_extern: Box<Fn(&mut ty::maps::Providers) + 'a>,\n }\n \n impl<'a> CompileController<'a> {\n@@ -362,6 +370,8 @@ impl<'a> CompileController<'a> {\n             make_glob_map: MakeGlobMap::No,\n             keep_ast: false,\n             continue_parse_after_error: false,\n+            provide: box |_| {},\n+            provide_extern: box |_| {},\n         }\n     }\n }\n@@ -907,10 +917,33 @@ pub fn phase_2_configure_and_expand<F>(sess: &Session,\n     })\n }\n \n+pub fn default_provide(providers: &mut ty::maps::Providers) {\n+    borrowck::provide(providers);\n+    mir::provide(providers);\n+    reachable::provide(providers);\n+    rustc_privacy::provide(providers);\n+    DefaultTransCrate::provide(providers);\n+    typeck::provide(providers);\n+    ty::provide(providers);\n+    traits::provide(providers);\n+    reachable::provide(providers);\n+    rustc_const_eval::provide(providers);\n+    rustc_passes::provide(providers);\n+    middle::region::provide(providers);\n+    cstore::provide(providers);\n+    lint::provide(providers);\n+}\n+\n+pub fn default_provide_extern(providers: &mut ty::maps::Providers) {\n+    cstore::provide_extern(providers);\n+    DefaultTransCrate::provide_extern(providers);\n+}\n+\n /// Run the resolution, typechecking, region checking and other\n /// miscellaneous analysis passes on the crate. Return various\n /// structures carrying the results of the analysis.\n-pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n+pub fn phase_3_run_analysis_passes<'tcx, F, R>(control: &CompileController,\n+                                               sess: &'tcx Session,\n                                                cstore: &'tcx CrateStore,\n                                                hir_map: hir_map::Map<'tcx>,\n                                                mut analysis: ty::CrateAnalysis,\n@@ -966,24 +999,12 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n               || static_recursion::check_crate(sess, &hir_map))?;\n \n     let mut local_providers = ty::maps::Providers::default();\n-    borrowck::provide(&mut local_providers);\n-    mir::provide(&mut local_providers);\n-    reachable::provide(&mut local_providers);\n-    rustc_privacy::provide(&mut local_providers);\n-    DefaultTransCrate::provide(&mut local_providers);\n-    typeck::provide(&mut local_providers);\n-    ty::provide(&mut local_providers);\n-    traits::provide(&mut local_providers);\n-    reachable::provide(&mut local_providers);\n-    rustc_const_eval::provide(&mut local_providers);\n-    rustc_passes::provide(&mut local_providers);\n-    middle::region::provide(&mut local_providers);\n-    cstore::provide(&mut local_providers);\n-    lint::provide(&mut local_providers);\n+    default_provide(&mut local_providers);\n+    (control.provide)(&mut local_providers);\n \n     let mut extern_providers = local_providers;\n-    cstore::provide_extern(&mut extern_providers);\n-    DefaultTransCrate::provide_extern(&mut extern_providers);\n+    default_provide_extern(&mut extern_providers);\n+    (control.provide_extern)(&mut extern_providers);\n \n     // Setup the MIR passes that we want to run.\n     let mut passes = Passes::new();"}, {"sha": "85ccacb43fb4f671dd0c14894dd07a048fb2a83f", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0ac6c3aacbf70d24a5e13b648e650dffec699952/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ac6c3aacbf70d24a5e13b648e650dffec699952/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=0ac6c3aacbf70d24a5e13b648e650dffec699952", "patch": "@@ -227,7 +227,9 @@ impl PpSourceMode {\n                 f(&annotation, hir_map.forest.krate())\n             }\n             PpmTyped => {\n-                abort_on_err(driver::phase_3_run_analysis_passes(sess,\n+                let control = &driver::CompileController::basic();\n+                abort_on_err(driver::phase_3_run_analysis_passes(control,\n+                                                                 sess,\n                                                                  cstore,\n                                                                  hir_map.clone(),\n                                                                  analysis.clone(),\n@@ -1036,7 +1038,9 @@ fn print_with_analysis<'tcx, 'a: 'tcx>(sess: &'a Session,\n \n     let mut out = Vec::new();\n \n-    abort_on_err(driver::phase_3_run_analysis_passes(sess,\n+    let control = &driver::CompileController::basic();\n+    abort_on_err(driver::phase_3_run_analysis_passes(control,\n+                                                     sess,\n                                                      cstore,\n                                                      hir_map.clone(),\n                                                      analysis.clone(),"}, {"sha": "9172bfcde3f9effe62bdbe25ac51912396e4860a", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0ac6c3aacbf70d24a5e13b648e650dffec699952/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ac6c3aacbf70d24a5e13b648e650dffec699952/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=0ac6c3aacbf70d24a5e13b648e650dffec699952", "patch": "@@ -154,9 +154,9 @@ pub fn run_core(search_paths: SearchPaths,\n     target_features::add_configuration(&mut cfg, &sess);\n     sess.parse_sess.config = cfg;\n \n-    let krate = panictry!(driver::phase_1_parse_input(&driver::CompileController::basic(),\n-                                                      &sess,\n-                                                      &input));\n+    let control = &driver::CompileController::basic();\n+\n+    let krate = panictry!(driver::phase_1_parse_input(control, &sess, &input));\n     let krate = ReplaceBodyWithLoop::new().fold_crate(krate);\n \n     let name = link::find_crate_name(Some(&sess), &krate.attrs, &input);\n@@ -182,7 +182,8 @@ pub fn run_core(search_paths: SearchPaths,\n                                                           &[],\n                                                           &sess);\n \n-    abort_on_err(driver::phase_3_run_analysis_passes(&sess,\n+    abort_on_err(driver::phase_3_run_analysis_passes(control,\n+                                                     &sess,\n                                                      &*cstore,\n                                                      hir_map,\n                                                      analysis,"}]}