{"sha": "837a4467bc98471d5619e76cc47eac3b9a471d28", "node_id": "C_kwDOAAsO6NoAKDgzN2E0NDY3YmM5ODQ3MWQ1NjE5ZTc2Y2M0N2VhYzNiOWE0NzFkMjg", "commit": {"author": {"name": "yvt", "email": "i@yvt.jp", "date": "2022-04-05T16:25:13Z"}, "committer": {"name": "yvt", "email": "i@yvt.jp", "date": "2022-04-05T16:25:13Z"}, "message": "test: Test more integer types and checked arithmetic in `tests/run/int.rs`", "tree": {"sha": "a7b2f8225f242ee0391ed39caedc666c3141cc97", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a7b2f8225f242ee0391ed39caedc666c3141cc97"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/837a4467bc98471d5619e76cc47eac3b9a471d28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/837a4467bc98471d5619e76cc47eac3b9a471d28", "html_url": "https://github.com/rust-lang/rust/commit/837a4467bc98471d5619e76cc47eac3b9a471d28", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/837a4467bc98471d5619e76cc47eac3b9a471d28/comments", "author": {"login": "yvt", "id": 5253988, "node_id": "MDQ6VXNlcjUyNTM5ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/5253988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yvt", "html_url": "https://github.com/yvt", "followers_url": "https://api.github.com/users/yvt/followers", "following_url": "https://api.github.com/users/yvt/following{/other_user}", "gists_url": "https://api.github.com/users/yvt/gists{/gist_id}", "starred_url": "https://api.github.com/users/yvt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yvt/subscriptions", "organizations_url": "https://api.github.com/users/yvt/orgs", "repos_url": "https://api.github.com/users/yvt/repos", "events_url": "https://api.github.com/users/yvt/events{/privacy}", "received_events_url": "https://api.github.com/users/yvt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yvt", "id": 5253988, "node_id": "MDQ6VXNlcjUyNTM5ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/5253988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yvt", "html_url": "https://github.com/yvt", "followers_url": "https://api.github.com/users/yvt/followers", "following_url": "https://api.github.com/users/yvt/following{/other_user}", "gists_url": "https://api.github.com/users/yvt/gists{/gist_id}", "starred_url": "https://api.github.com/users/yvt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yvt/subscriptions", "organizations_url": "https://api.github.com/users/yvt/orgs", "repos_url": "https://api.github.com/users/yvt/repos", "events_url": "https://api.github.com/users/yvt/events{/privacy}", "received_events_url": "https://api.github.com/users/yvt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "56983cf3c6367f13fb94f6ada05537156f513e6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/56983cf3c6367f13fb94f6ada05537156f513e6c", "html_url": "https://github.com/rust-lang/rust/commit/56983cf3c6367f13fb94f6ada05537156f513e6c"}], "stats": {"total": 437, "additions": 324, "deletions": 113}, "files": [{"sha": "8d2db9096f7301191821a21fa4d93c7bd3f1c775", "filename": "tests/run/int.rs", "status": "modified", "additions": 324, "deletions": 113, "changes": 437, "blob_url": "https://github.com/rust-lang/rust/blob/837a4467bc98471d5619e76cc47eac3b9a471d28/tests%2Frun%2Fint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837a4467bc98471d5619e76cc47eac3b9a471d28/tests%2Frun%2Fint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun%2Fint.rs?ref=837a4467bc98471d5619e76cc47eac3b9a471d28", "patch": "@@ -3,7 +3,7 @@\n // Run-time:\n //   status: 0\n \n-#![feature(core_intrinsics, start)]\n+#![feature(bench_black_box, core_intrinsics, start)]\n \n #![no_std]\n \n@@ -17,118 +17,329 @@ fn panic_handler(_: &core::panic::PanicInfo) -> ! {\n  */\n \n #[start]\n-fn main(argc: isize, _argv: *const *const u8) -> isize {\n-    let var = 134217856_u128;\n-    let var2 = 10475372733397991552_u128;\n-    let var3 = 193236519889708027473620326106273939584_u128;\n-    let var4 = 123236519889708027473620326106273939584_u128;\n-    let var5 = 153236519889708027473620326106273939584_u128;\n-    let var6 = 18446744073709551616_i128;\n-    let var7 = 170141183460469231731687303715884105728_u128;\n-\n-    // Shifts.\n-    assert_eq!(var << (argc as u128 - 1), var);\n-    assert_eq!(var << argc as u128, 268435712);\n-    assert_eq!(var << (argc + 32) as u128, 1152922604118474752);\n-    assert_eq!(var << (argc + 48) as u128, 75557935783508361347072);\n-    assert_eq!(var << (argc + 60) as u128, 309485304969250248077606912);\n-    assert_eq!(var << (argc + 62) as u128, 1237941219877000992310427648);\n-    assert_eq!(var << (argc + 63) as u128, 2475882439754001984620855296);\n-    assert_eq!(var << (argc + 80) as u128, 324518863143436548128224745357312);\n-\n-    assert_eq!(var2 << argc as u128, 20950745466795983104);\n-    assert_eq!(var2 << (argc as u128 - 1), var2);\n-    assert_eq!(var2 << (argc + 32) as u128, 89982766606709001335848566784);\n-    assert_eq!(var2 << (argc + 48) as u128, 5897110592337281111546171672756224);\n-    assert_eq!(var2 << (argc + 60) as u128, 24154564986213503432893119171609493504);\n-    assert_eq!(var2 << (argc + 62) as u128, 96618259944854013731572476686437974016);\n-    assert_eq!(var2 << (argc + 63) as u128, 193236519889708027463144953372875948032);\n-\n-    assert_eq!(var3 << argc as u128, 46190672858477591483866044780779667712);\n-    assert_eq!(var3 << (argc as u128 - 1), var3);\n-    assert_eq!(var3 << (argc + 32) as u128, 21267668304951024224840338247585366016);\n-    assert_eq!(var3 << (argc + 48) as u128, 1335125106377253154015353231953100800);\n-    assert_eq!(var3 << (argc + 60) as u128, 24154564986213503432893119171609493504);\n-    assert_eq!(var3 << (argc + 62) as u128, 96618259944854013731572476686437974016);\n-    assert_eq!(var3 << (argc + 63) as u128, 193236519889708027463144953372875948032);\n-\n-    assert_eq!((2220326408_u32 + argc as u32) >> (32 - 6), 33);\n-\n-    assert_eq!(var >> (argc as u128 - 1), var);\n-    assert_eq!(var >> argc as u128, 67108928);\n-    assert_eq!(var >> (argc + 32) as u128, 0);\n-    assert_eq!(var >> (argc + 48) as u128, 0);\n-    assert_eq!(var >> (argc + 60) as u128, 0);\n-    assert_eq!(var >> (argc + 62) as u128, 0);\n-    assert_eq!(var >> (argc + 63) as u128, 0);\n-\n-    assert_eq!(var2 >> argc as u128, 5237686366698995776);\n-    assert_eq!(var2 >> (argc as u128 - 1), var2);\n-    assert_eq!(var2 >> (argc + 32) as u128, 1219493888);\n-    assert_eq!(var2 >> (argc + 48) as u128, 18608);\n-    assert_eq!(var2 >> (argc + 60) as u128, 4);\n-    assert_eq!(var2 >> (argc + 62) as u128, 1);\n-    assert_eq!(var2 >> (argc + 63) as u128, 0);\n-\n-    assert_eq!(var3 >> (argc as u128 - 1), var3);\n-    assert_eq!(var3 >> argc as u128, 96618259944854013736810163053136969792);\n-    assert_eq!(var3 >> (argc + 32) as u128, 22495691651677250335181635584);\n-    assert_eq!(var3 >> (argc + 48) as u128, 343257013727985387194544);\n-    assert_eq!(var3 >> (argc + 60) as u128, 83802981867183932420);\n-    assert_eq!(var3 >> (argc + 62) as u128, 20950745466795983105);\n-    assert_eq!(var3 >> (argc + 63) as u128, 10475372733397991552);\n-    assert_eq!(var3 >> (argc + 80) as u128, 79920751444992);\n-\n-    assert_eq!(var6 >> argc as u128, 9223372036854775808);\n-    assert_eq!((var6 - 1) >> argc as u128, 9223372036854775807);\n-    assert_eq!(var7 >> argc as u128, 85070591730234615865843651857942052864);\n-\n-    // Casts\n-    assert_eq!((var >> (argc + 32) as u128) as u64, 0);\n-    assert_eq!((var >> argc as u128) as u64, 67108928);\n-\n-    // Addition.\n-    assert_eq!(var + argc as u128, 134217857);\n-\n-    assert_eq!(var2 + argc as u128, 10475372733397991553);\n-    assert_eq!(var2 + (var2 + argc as u128) as u128, 20950745466795983105);\n-\n-    assert_eq!(var3 + argc as u128, 193236519889708027473620326106273939585);\n-\n-    // Subtraction\n-    assert_eq!(var - argc as u128, 134217855);\n-\n-    assert_eq!(var2 - argc as u128, 10475372733397991551);\n-\n-    assert_eq!(var3 - argc as u128, 193236519889708027473620326106273939583);\n-\n-    // Multiplication\n-    assert_eq!(var * (argc + 1) as u128, 268435712);\n-    assert_eq!(var * (argc as u128 + var2), 1405982069077538020949770368);\n-\n-    assert_eq!(var2 * (argc + 1) as u128, 20950745466795983104);\n-    assert_eq!(var2 * (argc as u128 + var2), 109733433903618109003204073240861360256);\n-\n-    assert_eq!(var3 * argc as u128, 193236519889708027473620326106273939584);\n-\n-    assert_eq!(var4 * (argc + 1) as u128, 246473039779416054947240652212547879168);\n-\n-    assert_eq!(var5 * (argc + 1) as u128, 306473039779416054947240652212547879168);\n-\n-    // Division.\n-    assert_eq!(var / (argc + 1) as u128, 67108928);\n-    assert_eq!(var / (argc + 2) as u128, 44739285);\n-\n-    assert_eq!(var2 / (argc + 1) as u128, 5237686366698995776);\n-    assert_eq!(var2 / (argc + 2) as u128, 3491790911132663850);\n-\n-    assert_eq!(var3 / (argc + 1) as u128, 96618259944854013736810163053136969792);\n-    assert_eq!(var3 / (argc + 2) as u128, 64412173296569342491206775368757979861);\n-    assert_eq!(var3 / (argc as u128 + var4), 1);\n-    assert_eq!(var3 / (argc as u128 + var2), 18446744073709551615);\n-\n-    assert_eq!(var4 / (argc + 1) as u128, 61618259944854013736810163053136969792);\n-    assert_eq!(var4 / (argc + 2) as u128, 41078839963236009157873442035424646528);\n+fn main(_argc: isize, _argv: *const *const u8) -> isize {\n+    let one: isize = core::hint::black_box(1);\n+\n+    macro_rules! check {\n+        ($ty:ty, $expr:expr) => {\n+            {\n+                const EXPECTED: $ty = {\n+                    #[allow(non_upper_case_globals)]\n+                    #[allow(dead_code)]\n+                    const one: isize = 1;\n+                    $expr\n+                };\n+                assert_eq!($expr, EXPECTED);\n+            }\n+        };\n+    }\n+\n+    check!(u32, (2220326408_u32 + one as u32) >> (32 - 6));\n+\n+    /// Generate `check!` tests for integer types at least as wide as 128 bits.\n+    macro_rules! check_ops128 {\n+        () => {\n+            check_ops64!();\n+\n+            // Shifts.\n+            check!(T, VAL1 << (one + 63) as T);\n+            check!(T, VAL1 << (one + 80) as T);\n+            check!(T, VAL3 << (one + 62) as T);\n+            check!(T, VAL3 << (one + 63) as T);\n+\n+            check!(T, VAL1 >> (one + 63) as T);\n+            check!(T, VAL2 >> (one + 63) as T);\n+            check!(T, VAL3 >> (one + 63) as T);\n+            check!(T, VAL3 >> (one + 80) as T);\n+        };\n+    }\n+\n+    /// Generate `check!` tests for integer types at least as wide as 64 bits.\n+    macro_rules! check_ops64 {\n+        () => {\n+            check_ops32!();\n+\n+            // Shifts.\n+            check!(T, VAL2 << (one + 32) as T);\n+            check!(T, VAL2 << (one + 48) as T);\n+            check!(T, VAL2 << (one + 60) as T);\n+            check!(T, VAL2 << (one + 62) as T);\n+\n+            check!(T, VAL3 << (one + 32) as T);\n+            check!(T, VAL3 << (one + 48) as T);\n+            check!(T, VAL3 << (one + 60) as T);\n+\n+            check!(T, VAL1 >> (one + 32) as T);\n+            check!(T, VAL1 >> (one + 48) as T);\n+            check!(T, VAL1 >> (one + 60) as T);\n+            check!(T, VAL1 >> (one + 62) as T);\n+\n+            check!(T, VAL2 >> (one + 32) as T);\n+            check!(T, VAL2 >> (one + 48) as T);\n+            check!(T, VAL2 >> (one + 60) as T);\n+            check!(T, VAL2 >> (one + 62) as T);\n+\n+            check!(T, VAL3 >> (one + 32) as T);\n+            check!(T, VAL3 >> (one + 48) as T);\n+            check!(T, VAL3 >> (one + 60) as T);\n+            check!(T, VAL3 >> (one + 62) as T);\n+        };\n+    }\n+\n+    /// Generate `check!` tests for integer types at least as wide as 32 bits.\n+    macro_rules! check_ops32 {\n+        () => {\n+            // Shifts.\n+            check!(T, VAL2 << one as T);\n+            check!(T, VAL2 << (one as T - 1));\n+\n+            check!(T, VAL3 << one as T);\n+            check!(T, VAL3 << (one as T - 1));\n+\n+            check!(T, VAL1.wrapping_shl(one as u32 - 1));\n+            check!(T, VAL1.wrapping_shl(one as u32));\n+            check!(T, VAL1.wrapping_shl((one + 32) as u32));\n+            check!(T, VAL1.wrapping_shl((one + 48) as u32));\n+            check!(T, VAL1.wrapping_shl((one + 60) as u32));\n+            check!(T, VAL1.wrapping_shl((one + 62) as u32));\n+            check!(T, VAL1.wrapping_shl((one + 63) as u32));\n+            check!(T, VAL1.wrapping_shl((one + 80) as u32));\n+\n+            check!(Option<T>, VAL1.checked_shl(one as u32 - 1));\n+            check!(Option<T>, VAL1.checked_shl(one as u32));\n+            check!(Option<T>, VAL1.checked_shl((one + 32) as u32));\n+            check!(Option<T>, VAL1.checked_shl((one + 48) as u32));\n+            check!(Option<T>, VAL1.checked_shl((one + 60) as u32));\n+            check!(Option<T>, VAL1.checked_shl((one + 62) as u32));\n+            check!(Option<T>, VAL1.checked_shl((one + 63) as u32));\n+            check!(Option<T>, VAL1.checked_shl((one + 80) as u32));\n+\n+            check!(T, VAL1 >> (one as T - 1));\n+            check!(T, VAL1 >> one as T);\n+\n+            check!(T, VAL2 >> one as T);\n+            check!(T, VAL2 >> (one as T - 1));\n+\n+            check!(T, VAL3 >> (one as T - 1));\n+            check!(T, VAL3 >> one as T);\n+\n+            check!(T, VAL1.wrapping_shr(one as u32 - 1));\n+            check!(T, VAL1.wrapping_shr(one as u32));\n+            check!(T, VAL1.wrapping_shr((one + 32) as u32));\n+            check!(T, VAL1.wrapping_shr((one + 48) as u32));\n+            check!(T, VAL1.wrapping_shr((one + 60) as u32));\n+            check!(T, VAL1.wrapping_shr((one + 62) as u32));\n+            check!(T, VAL1.wrapping_shr((one + 63) as u32));\n+            check!(T, VAL1.wrapping_shr((one + 80) as u32));\n+\n+            check!(Option<T>, VAL1.checked_shr(one as u32 - 1));\n+            check!(Option<T>, VAL1.checked_shr(one as u32));\n+            check!(Option<T>, VAL1.checked_shr((one + 32) as u32));\n+            check!(Option<T>, VAL1.checked_shr((one + 48) as u32));\n+            check!(Option<T>, VAL1.checked_shr((one + 60) as u32));\n+            check!(Option<T>, VAL1.checked_shr((one + 62) as u32));\n+            check!(Option<T>, VAL1.checked_shr((one + 63) as u32));\n+            check!(Option<T>, VAL1.checked_shr((one + 80) as u32));\n+\n+            // Casts\n+            check!(u64, (VAL1 >> one as T) as u64);\n+\n+            // Addition.\n+            check!(T, VAL1 + one as T);\n+            check!(T, VAL2 + one as T);\n+            check!(T, VAL2 + (VAL2 + one as T) as T);\n+            check!(T, VAL3 + one as T);\n+\n+            check!(Option<T>, VAL1.checked_add(one as T));\n+            check!(Option<T>, VAL2.checked_add(one as T));\n+            check!(Option<T>, VAL2.checked_add((VAL2 + one as T) as T));\n+            check!(Option<T>, VAL3.checked_add(T::MAX));\n+            check!(Option<T>, VAL3.checked_add(T::MIN));\n+\n+            check!(T, VAL1.wrapping_add(one as T));\n+            check!(T, VAL2.wrapping_add(one as T));\n+            check!(T, VAL2.wrapping_add((VAL2 + one as T) as T));\n+            check!(T, VAL3.wrapping_add(T::MAX));\n+            check!(T, VAL3.wrapping_add(T::MIN));\n+\n+            check!((T, bool), VAL1.overflowing_add(one as T));\n+            check!((T, bool), VAL2.overflowing_add(one as T));\n+            check!((T, bool), VAL2.overflowing_add((VAL2 + one as T) as T));\n+            check!((T, bool), VAL3.overflowing_add(T::MAX));\n+            check!((T, bool), VAL3.overflowing_add(T::MIN));\n+\n+            check!(T, VAL1.saturating_add(one as T));\n+            check!(T, VAL2.saturating_add(one as T));\n+            check!(T, VAL2.saturating_add((VAL2 + one as T) as T));\n+            check!(T, VAL3.saturating_add(T::MAX));\n+            check!(T, VAL3.saturating_add(T::MIN));\n+\n+            // Subtraction\n+            check!(T, VAL1 - one as T);\n+            check!(T, VAL2 - one as T);\n+            check!(T, VAL3 - one as T);\n+\n+            check!(Option<T>, VAL1.checked_sub(one as T));\n+            check!(Option<T>, VAL2.checked_sub(one as T));\n+            check!(Option<T>, VAL2.checked_sub((VAL2 + one as T) as T));\n+            check!(Option<T>, VAL3.checked_sub(T::MAX));\n+            check!(Option<T>, VAL3.checked_sub(T::MIN));\n+\n+            check!(T, VAL1.wrapping_sub(one as T));\n+            check!(T, VAL2.wrapping_sub(one as T));\n+            check!(T, VAL2.wrapping_sub((VAL2 + one as T) as T));\n+            check!(T, VAL3.wrapping_sub(T::MAX));\n+            check!(T, VAL3.wrapping_sub(T::MIN));\n+\n+            check!((T, bool), VAL1.overflowing_sub(one as T));\n+            check!((T, bool), VAL2.overflowing_sub(one as T));\n+            check!((T, bool), VAL2.overflowing_sub((VAL2 + one as T) as T));\n+            check!((T, bool), VAL3.overflowing_sub(T::MAX));\n+            check!((T, bool), VAL3.overflowing_sub(T::MIN));\n+\n+            check!(T, VAL1.saturating_sub(one as T));\n+            check!(T, VAL2.saturating_sub(one as T));\n+            check!(T, VAL2.saturating_sub((VAL2 + one as T) as T));\n+            check!(T, VAL3.saturating_sub(T::MAX));\n+            check!(T, VAL3.saturating_sub(T::MIN));\n+\n+            // Multiplication\n+            check!(T, VAL1 * (one + 1) as T);\n+            check!(T, VAL1 * (one as T + VAL2));\n+            check!(T, VAL2 * (one + 1) as T);\n+            check!(T, VAL2 * (one as T + VAL2));\n+            check!(T, VAL3 * one as T);\n+            check!(T, VAL4 * (one + 1) as T);\n+            check!(T, VAL5 * (one + 1) as T);\n+\n+            check!(Option<T>, VAL1.checked_mul((one + 1) as T));\n+            check!(Option<T>, VAL1.checked_mul((one as T + VAL2)));\n+            check!(Option<T>, VAL3.checked_mul(VAL3));\n+            check!(Option<T>, VAL4.checked_mul((one + 1) as T));\n+            check!(Option<T>, VAL5.checked_mul((one + 1) as T));\n+\n+            check!(T, VAL1.wrapping_mul((one + 1) as T));\n+            check!(T, VAL1.wrapping_mul((one as T + VAL2)));\n+            check!(T, VAL3.wrapping_mul(VAL3));\n+            check!(T, VAL4.wrapping_mul((one + 1) as T));\n+            check!(T, VAL5.wrapping_mul((one + 1) as T));\n+\n+            check!((T, bool), VAL1.overflowing_mul((one + 1) as T));\n+            check!((T, bool), VAL1.overflowing_mul((one as T + VAL2)));\n+            check!((T, bool), VAL3.overflowing_mul(VAL3));\n+            check!((T, bool), VAL4.overflowing_mul((one + 1) as T));\n+            check!((T, bool), VAL5.overflowing_mul((one + 1) as T));\n+\n+            check!(T, VAL1.saturating_mul((one + 1) as T));\n+            check!(T, VAL1.saturating_mul((one as T + VAL2)));\n+            check!(T, VAL3.saturating_mul(VAL3));\n+            check!(T, VAL4.saturating_mul((one + 1) as T));\n+            check!(T, VAL5.saturating_mul((one + 1) as T));\n+\n+            // Division.\n+            check!(T, VAL1 / (one + 1) as T);\n+            check!(T, VAL1 / (one + 2) as T);\n+\n+            check!(T, VAL2 / (one + 1) as T);\n+            check!(T, VAL2 / (one + 2) as T);\n+\n+            check!(T, VAL3 / (one + 1) as T);\n+            check!(T, VAL3 / (one + 2) as T);\n+            check!(T, VAL3 / (one as T + VAL4));\n+            check!(T, VAL3 / (one as T + VAL2));\n+\n+            check!(T, VAL4 / (one + 1) as T);\n+            check!(T, VAL4 / (one + 2) as T);\n+\n+            check!(Option<T>, VAL1.checked_div((one + 1) as T));\n+            check!(Option<T>, VAL1.checked_div((one as T + VAL2)));\n+            check!(Option<T>, VAL3.checked_div(VAL3));\n+            check!(Option<T>, VAL4.checked_div((one + 1) as T));\n+            check!(Option<T>, VAL5.checked_div((one + 1) as T));\n+            check!(Option<T>, (T::MIN).checked_div((0 as T).wrapping_sub(one as T)));\n+            check!(Option<T>, VAL5.checked_div((one - 1) as T)); // var5 / 0\n+\n+            check!(T, VAL1.wrapping_div((one + 1) as T));\n+            check!(T, VAL1.wrapping_div((one as T + VAL2)));\n+            check!(T, VAL3.wrapping_div(VAL3));\n+            check!(T, VAL4.wrapping_div((one + 1) as T));\n+            check!(T, VAL5.wrapping_div((one + 1) as T));\n+            check!(T, (T::MIN).wrapping_div((0 as T).wrapping_sub(one as T)));\n+\n+            check!((T, bool), VAL1.overflowing_div((one + 1) as T));\n+            check!((T, bool), VAL1.overflowing_div((one as T + VAL2)));\n+            check!((T, bool), VAL3.overflowing_div(VAL3));\n+            check!((T, bool), VAL4.overflowing_div((one + 1) as T));\n+            check!((T, bool), VAL5.overflowing_div((one + 1) as T));\n+            check!((T, bool), (T::MIN).overflowing_div((0 as T).wrapping_sub(one as T)));\n+\n+            check!(T, VAL1.saturating_div((one + 1) as T));\n+            check!(T, VAL1.saturating_div((one as T + VAL2)));\n+            check!(T, VAL3.saturating_div(VAL3));\n+            check!(T, VAL4.saturating_div((one + 1) as T));\n+            check!(T, VAL5.saturating_div((one + 1) as T));\n+            check!(T, (T::MIN).saturating_div((0 as T).wrapping_sub(one as T)));\n+        };\n+    }\n+\n+    {\n+        type T = u32;\n+        const VAL1: T = 14162_u32;\n+        const VAL2: T = 14556_u32;\n+        const VAL3: T = 323656954_u32;\n+        const VAL4: T = 2023651954_u32;\n+        const VAL5: T = 1323651954_u32;\n+        check_ops32!();\n+    }\n+\n+    {\n+        type T = i32;\n+        const VAL1: T = 13456_i32;\n+        const VAL2: T = 10475_i32;\n+        const VAL3: T = 923653954_i32;\n+        const VAL4: T = 993198738_i32;\n+        const VAL5: T = 1023653954_i32;\n+        check_ops32!();\n+    }\n+\n+    {\n+        type T = u64;\n+        const VAL1: T = 134217856_u64;\n+        const VAL2: T = 104753732_u64;\n+        const VAL3: T = 12323651988970863954_u64;\n+        const VAL4: T = 7323651988970863954_u64;\n+        const VAL5: T = 8323651988970863954_u64;\n+        check_ops64!();\n+    }\n+\n+    {\n+        type T = i64;\n+        const VAL1: T = 134217856_i64;\n+        const VAL2: T = 104753732_i64;\n+        const VAL3: T = 6323651988970863954_i64;\n+        const VAL4: T = 2323651988970863954_i64;\n+        const VAL5: T = 3323651988970863954_i64;\n+        check_ops64!();\n+    }\n+\n+    {\n+        type T = u128;\n+        const VAL1: T = 134217856_u128;\n+        const VAL2: T = 10475372733397991552_u128;\n+        const VAL3: T = 193236519889708027473620326106273939584_u128;\n+        const VAL4: T = 123236519889708027473620326106273939584_u128;\n+        const VAL5: T = 153236519889708027473620326106273939584_u128;\n+        check_ops128!();\n+    }\n+    {\n+        type T = i128;\n+        const VAL1: T = 134217856_i128;\n+        const VAL2: T = 10475372733397991552_i128;\n+        const VAL3: T = 83236519889708027473620326106273939584_i128;\n+        const VAL4: T = 63236519889708027473620326106273939584_i128;\n+        const VAL5: T = 73236519889708027473620326106273939584_i128;\n+        check_ops128!();\n+    }\n \n     0\n }"}]}